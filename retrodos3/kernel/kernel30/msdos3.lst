     1                                  ; ****************************************************************************
     2                                  ; MSDOS3.BIN (MSDOS 3.3 Kernel) - RETRO DOS v3.0 by ERDOGAN TAN
     3                                  ; ----------------------------------------------------------------------------
     4                                  ; Last Update: 22/11/2022 (BugFix)
     5                                  ;	BugFix: 20/05/2019
     6                                  ;	Optimization: 06-22/07/2019
     7                                  ;	Completion: 10/09/2018
     8                                  ; ----------------------------------------------------------------------------
     9                                  ; Beginning: 24/02/2018 (Retro DOS 2.0), 07/07/2018 (Retro DOS 3.0)
    10                                  ; ----------------------------------------------------------------------------
    11                                  ; Assembler: NASM version 2.11  
    12                                  ; ----------------------------------------------------------------------------
    13                                  ;	    ((nasm msdos3.s -l msdos3.lst -o MSDOS3.BIN)) 	
    14                                  ; ----------------------------------------------------------------------------
    15                                  ; Derived from 'msdos2.s' file of Retro DOS 2.0 source code (04/05/2018)
    16                                  ; ----------------------------------------------------------------------------
    17                                  ; Derived from 'MSCODE.ASM' file of MSDOS 2.0 (IBM PCDOS v2.0) source code
    18                                  ; by Microsoft, 25/08/1983 (DOSLINK - 'MSDOS.ASM')
    19                                  ; ****************************************************************************
    20                                  ; main file: 'retrodos3.s'
    21                                  ; incbin 'MSDOS3.BIN' ; (DOSGROUP CODE SEGMENT)
    22                                  ; ----------------------------------------------------------------------------
    23                                  ; 07/07/2018 - Erdogan Tan
    24                                  ; (Note: I have not got MSDOS 3.3 kernel source files; so, I need to continue
    25                                  ; by using disassembled MSDOS.SYS -v3.3- and MSDOS 6.0 kernel source files.)
    26                                  ; ----------------------------------------------------------------------------
    27                                  ; MSDOS 6.0 Kernel source files:
    28                                  ;	MSDATA.ASM, 
    29                                  ; 		(MSHEAD.ASM, MSCONST.ASM,CONST2.ASM, MS_DATA.ASM,
    30                                  ;		DOSTAB.ASM, LMSTUB.ASM, WPATCH.INC)
    31                                  ;	MSTABLE.ASM, MSCODE.ASM, MSDOSME.ASM (DOSMES.INC), TIME.ASM,
    32                                  ;	GETSET.ASM, PARSE.ASM, MISC.ASM, MISC2.ASM, CRIT.ASM, CPMIO.ASM,
    33                                  ;	CPMIO2.ASM, FCBIO.ASM, FCBIO2.ASM, SEARCH.ASM, PATH.ASM, IOCTL.ASM,
    34                                  ;	DELETE.ASM, RENAME.ASM, FINFO.ASM, DUP.ASM, CREATE.ASM, OPEN.ASM,
    35                                  ;	DINFO.ASM, ISEARCH.ASM, BUF.ASM, ABORT.ASM,CLOSE.ASM, DIRCALL.ASM,
    36                                  ;	DISK.ASM, DISK2.ASM, DISK3.ASM, DIR.ASM, DIR2.ASM, DEV.ASM,
    37                                  ;	MKNODE.ASM, ROM.ASM, FCB.ASM, MSCTRLC.ASM, FAT.ASM, MSPROC.ASM
    38                                  ;	ALLOC.ASM, SRVCALL.ASM, UTIL.ASM, MACRO.ASM, MACRO2.ASM, HANDLE.ASM
    39                                  ;	FILE.ASM, LOCK.ASM, ROMFIND.ASM, SHARE.ASM, MSINIT.ASM, ORIGIN.ASM
    40                                  ;
    41                                  ; MSDOS 2.0 Kernel source files:
    42                                  ; 	MSDOS.ASM (STDSW.ASM + MSHEAD.ASM + MSDATA.ASM)
    43                                  ;	MSCODE.ASM
    44                                  ;	DOSMES.ASM ... STDIO.ASM, TIME.ASM, XENIX.ASM, XENIX2.ASM
    45                                  
    46                                  ;============================================================================
    47                                  ; DOSLINK
    48                                  ;============================================================================
    49                                  ;msdos mscode dosmes misc getset dircall alloc dev dir +
    50                                  ;disk fat rom stdbuf stdcall stdctrlc stdfcb stdproc +
    51                                  ;stdio time xenix xenix2
    52                                  
    53                                  ;============================================================================
    54                                  ; This MSDOS source code is verified & modified by using IDA Pro Disassembler
    55                                  ; output in TASM syntax (July 2018 -> NASM syntax) [ IBMDOS.COM, 17/03/1987 ]
    56                                  ;============================================================================
    57                                  ;
    58                                  ; ###########################################################################
    59                                  ; #	This file is generated by The Interactive Disassembler (IDA)	    #
    60                                  ; #	Copyright (c) 2010 by Hex-Rays SA, <support@hex-rays.com>	    #
    61                                  ; #			 Licensed to: Freeware version			    #
    62                                  ; ###########################################################################
    63                                  ;
    64                                  ; Input	MD5   :	EF2ADCA1CB3882118FD247DD4C672C81
    65                                  
    66                                  ; ---------------------------------------------------------------------------
    67                                  ; File Name   :	D:\Documents and Settings\Erdoðan Tan\Desktop\MSDOS33.BIN
    68                                  ; Format      :	Binary file
    69                                  ; Base Address:	0000h Range: 0000h - 75CFh Loaded length: 75CFh
    70                                  ;============================================================================
    71                                  ; MSDOS33.BIN = IBMDOS.COM, 17/03/1987, 30159 bytes (IBM PC DOS 3.30 kernel)
    72                                  
    73                                  ;============================================================================
    74                                  ; MSDOS.ASM
    75                                  ;============================================================================
    76                                  
    77                                  ;TITLE   Standard MSDOS
    78                                  ;NAME    MSDOS_2
    79                                  
    80                                  ; Number of disk I/O buffers
    81                                  
    82                                  ;	INCLUDE STDSW.ASM
    83                                  ;       INCLUDE MSHEAD.ASM
    84                                  ;       INCLUDE MSDATA.ASM
    85                                  
    86                                  ;	END
    87                                  
    88                                  ;============================================================================
    89                                  ; STDSW.ASM
    90                                  ;============================================================================
    91                                  
    92                                  TRUE    EQU     0FFFFH
    93                                  FALSE   EQU     ~TRUE ; NOT TRUE
    94                                  
    95                                  ; Use the switches below to produce the standard Microsoft version or the IBM
    96                                  ; version of the operating system
    97                                  ;MSVER   EQU     false
    98                                  ;IBM     EQU     true
    99                                  ;WANG    EQU     FALSE
   100                                  ;ALTVECT EQU     FALSE
   101                                  
   102                                  ; Set this switch to cause DOS to move itself to the end of memory
   103                                  ;HIGHMEM EQU     FALSE
   104                                  
   105                                  ;	IF      IBM
   106                                  ESCCH   EQU     0			; character to begin escape seq.
   107                                  CANCEL  EQU     27			;Cancel with escape
   108                                  TOGLINS EQU     TRUE			;One key toggles insert mode
   109                                  TOGLPRN EQU     TRUE			;One key toggles printer echo
   110                                  ZEROEXT EQU     TRUE
   111                                  ;       ELSE
   112                                  ;       IF      WANG			;Are we assembling for WANG?
   113                                  ;ESCCH   EQU     1FH			;Yes. Use 1FH for escape character
   114                                  ;       ELSE
   115                                  ;ESCCH   EQU     1BH
   116                                  ;       ENDIF
   117                                  ;CANCEL  EQU     "X"-"@"		;Cancel with Ctrl-X
   118                                  ;TOGLINS EQU     WANG			;Separate keys for insert mode on
   119                                  					;and off if not WANG
   120                                  ;TOGLPRN EQU     FALSE			;Separate keys for printer echo on
   121                                  					;and off
   122                                  ;ZEROEXT EQU     TRUE
   123                                  ;        ENDIF
   124                                  
   125                                  ;============================================================================
   126                                  ; MSHEAD.ASM
   127                                  ;============================================================================
   128                                  
   129                                  ;--------------------------------------------------------------
   130                                  ; TITLE   MSHEAD.ASM -- MS-DOS DEFINITIONS
   131                                  ;--------------------------------------------------------------
   132                                  
   133                                  ; MS-DOS High-performance operating system for the 8086  version 1.28
   134                                  ;        by Microsoft MSDOS development group:
   135                                  ;           Tim Paterson (Ret.)
   136                                  ;           Aaron Reynolds
   137                                  ;           Nancy Panners (Parenting)
   138                                  ;           Mark Zbikowski
   139                                  ;           Chris Peters (BIOS) (ret.)
   140                                  
   141                                  ; ****************** Revision History *************************
   142                                  ;          >> EVERY change must noted below!! <<
   143                                  ;
   144                                  ; 0.34 12/29/80 General release, updating all past customers
   145                                  ; 0.42 02/25/81 32-byte directory entries added
   146                                  ; 0.56 03/23/81 Variable record and sector sizes
   147                                  ; 0.60 03/27/81 Ctrl-C exit changes, including register save on user stack
   148                                  ; 0.74 04/15/81 Recognize I/O devices with file names
   149                                  ; 0.75 04/17/81 Improve and correct buffer handling
   150                                  ; 0.76 04/23/81 Correct directory size when not 2^N entries
   151                                  ; 0.80 04/27/81 Add console input without echo, Functions 7 & 8
   152                                  ; 1.00 04/28/81 Renumber for general release
   153                                  ; 1.01 05/12/81 Fix bug in `STORE'
   154                                  ; 1.10 07/21/81 Fatal error trapping, NUL device, hidden files, date & time,
   155                                  ;               RENAME fix, general cleanup
   156                                  ; 1.11 09/03/81 Don't set CURRENT BLOCK to 0 on open; fix SET FILE SIZE
   157                                  ; 1.12 10/09/81 Zero high half of CURRENT BLOCK after all (CP/M programs don't)
   158                                  ; 1.13 10/29/81 Fix classic "no write-through" error in buffer handling
   159                                  ; 1.20 12/31/81 Add time to FCB; separate FAT from DPT; Kill SMALLDIR; Add
   160                                  ;               FLUSH and MAPDEV calls; allow disk mapping in DSKCHG; Lots
   161                                  ;               of smaller improvements
   162                                  ; 1.21 01/06/82 HIGHMEM switch to run DOS in high memory
   163                                  ; 1.22 01/12/82 Add VERIFY system call to enable/disable verify after write
   164                                  ; 1.23 02/11/82 Add defaulting to parser; use variable escape character Don't
   165                                  ;               zero extent field in IBM version (back to 1.01!)
   166                                  ; 1.24 03/01/82 Restore fcn. 27 to 1.0 level; add fcn. 28
   167                                  ; 1.25 03/03/82 Put marker (00) at end of directory to speed searches
   168                                  ; 1.26 03/03/82 Directory buffers searched as a circular queue, current buffer
   169                                  ;               is searched first when possible to minimize I/O
   170                                  ;      03/03/82 STORE routine optimized to tack on partial sector tail as
   171                                  ;               full sector write when file is growing
   172                                  ;      03/09/82 Multiple I/O buffers
   173                                  ;      03/29/82 Two bugs:  Delete all case resets search to start at beginning
   174                                  ;               of directory (infinite loop possible otherwise), DSKRESET
   175                                  ;               must invalidate all buffers (disk and directory).
   176                                  ; 1.27 03/31/82 Installable device drivers
   177                                  ;                 Function call 47 - Get pointer to device table list
   178                                  ;                 Function call 48 - Assign CON AUX LIST
   179                                  ;      04/01/82 Spooler interrupt (INT 28) added.
   180                                  ; 1.28 04/15/82 DOS retructured to use ASSUMEs and PROC labels around system
   181                                  ;               call entries.  Most CS relative references changed to SS
   182                                  ;               relative with an eye toward putting a portion of the DOS in
   183                                  ;               ROM.  DOS source also broken into header, data and code pieces
   184                                  ;      04/15/82 GETDMA and GETVECT calls added as 24 and 32.  These calls
   185                                  ;               return the current values.
   186                                  ;      04/15/82 INDOS flag implemented for interrupt processing along with
   187                                  ;               call to return flag location (call 29)
   188                                  ;      04/15/82 Volume ID attribute added
   189                                  ;      04/17/82 Changed ABORT return to user to a long ret from a long jump to
   190                                  ;               avoid a CS relative reference.
   191                                  ;      04/17/82 Put call to STATCHK in dispatcher to catch ^C more often
   192                                  ;      04/20/82 Added INT int_upooler into loop ^S wait
   193                                  ;      04/22/82 Dynamic disk I/O buffer allocation and call to manage them
   194                                  ;               call 49.
   195                                  ;      04/23/82 Added GETDSKPTDL as call 50, similar to GETFATPT(DL), returns
   196                                  ;               address of DPB
   197                                  ;      04/29/82 Mod to WRTDEV to look for ^C or ^S at console input when
   198                                  ;               writting to console device via file I/O.  Added a console
   199                                  ;               output attribute to devices.
   200                                  ;      04/30/82 Call to en/dis able ^C check in dispatcher Call 51
   201                                  ;      04/30/82 Code to allow assignment of func 1-12 to disk files as well
   202                                  ;               as devices....  pipes, redirection now possible
   203                                  ;      04/30/82 Expanded GETLIST call to 2.0 standard
   204                                  ;      05/04/82 Change to INT int_fatal_abort callout int HARDERR.  DOS SS
   205                                  ;               (data segment) stashed in ES, INT int_fatal_abort routines must
   206                                  ;               preserve ES.  This mod so HARDERR can be ROMed.
   207                                  ; 1.29 06/01/82 Installable block and character devices as per 2.0 spec
   208                                  ;      06/04/82 Fixed Bug in CLOSE regarding call to CHKFATWRT.  It got left
   209                                  ;               out back about 1.27 or so (oops).  ARR
   210                                  ; 1.30 06/07/82 Directory sector buffering added to main DOS buffer queue
   211                                  ; 1.40 06/15/82 Tree structured directories.  XENIX Path Parser MKDIR CHDIR
   212                                  ;               RMDIR Xenix calls
   213                                  ; 1.41 06/13/82 Made GETBUFFR call PLACEBUF
   214                                  ; 1.50 06/17/82 FATs cached in buffer pool, get FAT pointer calls disappear
   215                                  ;               Frees up lots of memory.
   216                                  ; 1.51 06/24/82 BREAKDOWN modified to do EXACT one sector read/write through
   217                                  ;               system buffers
   218                                  ; 1.52 06/30/82 OPEN, CLOSE, READ, WRITE, DUP, DUP2, LSEEK implemented
   219                                  ; 1.53 07/01/82 OPEN CLOSE mod for Xenix calls, saves and gets remote dir
   220                                  ; 1.54 07/11/82 Function calls 1-12 make use of new 2.0 PDB. Init code
   221                                  ;               changed to set file handle environment.
   222                                  ; 2.00 08/01/82 Number for IBM release
   223                                  ;      01/19/83 No environ bug in EXEC
   224                                  ;      01/19/83 MS-DOS OEM INT 21 extensions (SET_OEM_HANDLER)
   225                                  ;      01/19/83 Performance bug fix in cooked write to NUL
   226                                  ;      01/27/83 Growcnt fixed for 32-bits
   227                                  ;      01/27/83 Find-first problem after create
   228                                  ; 2.01 02/17/83 International DOS
   229                                  ; 2.11 08/12/83 Dos split into several more modules for assembly on
   230                                  ;               an IBM PC
   231                                  ; 08/07/2018 - Retro DOS v3.0 by Erdogan Tan
   232                                  ; (MSHEAD.ASM, MSDOS6.0, 1991) - mshead.asm 1.1 85/04/10 -
   233                                  ; 2.10 03/09/83 Start of NETWORK support
   234                                  ;		New Buffer structure
   235                                  ;		New Sytem file table structure
   236                                  ;		FCB moved to internal representation
   237                                  ;		DOS re-organized
   238                                  ; 2.11 04/21/83 Continuation of 2.10, preliminary Network
   239                                  ;		device interface.
   240                                  ; 2.11 08/12/83 Dos split into several more modules for assembly on
   241                                  ;               an IBM PC
   242                                  ; 2.50 09/12/83 More network stuff
   243                                  ;
   244                                  ; *************************************************************
   245                                  
   246                                  ; ----------------------------------------------------------------------------
   247                                  ; EQUATES
   248                                  
   249                                  ; Interrupt Entry Points:
   250                                  
   251                                  ; INTBASE:      ABORT
   252                                  ; INTBASE+4:    COMMAND
   253                                  ; INTBASE+8:    BASE EXIT ADDRESS
   254                                  ; INTBASE+C:    CONTROL-C ABORT
   255                                  ; INTBASE+10H:  FATAL ERROR ABORT
   256                                  ; INTBASE+14H:  BIOS DISK READ
   257                                  ; INTBASE+18H:  BIOS DISK WRITE
   258                                  ; INTBASE+1CH:  END BUT STAY RESIDENT (NOT SET BY DOS)
   259                                  ; INTBASE+20H:  SPOOLER INTERRUPT
   260                                  ; INTBASE+40H:  Long jump to CALL entry point
   261                                  
   262                                  ENTRYPOINTSEG   EQU     0CH
   263                                  MAXDIF          EQU     0FFFH
   264                                  SAVEXIT         EQU     10
   265                                  ;08/07/2018 - Retro DOS v3.0
   266                                  ;WRAPOFFSET	EQU	0FEF0h  ; (MISC.ASM, MSDOS 6.0, 1991)
   267                                  
   268                                         ; INCLUDE DOSSYM.ASM
   269                                         ; INCLUDE DEVSYM.ASM
   270                                  
   271                                  ; SUBTTL ^C, terminate/abort/exit and Hard error actions
   272                                  ; PAGE
   273                                  ; There are three kinds of context resets that can occur during normal DOS
   274                                  ; functioning:  ^C trap, terminate/abort/exit, and Hard-disk error.  These must
   275                                  ; be handles in a clean fashion that allows nested executions along with the
   276                                  ; ability to trap one's own errors.
   277                                  ;
   278                                  ; ^C trap - A process may elect to catch his own ^Cs.  This is achieved by
   279                                  ;           using the $GET_INTERRUPT_VECTOR and $SET_INTERRUPT_VECTOR as
   280                                  ;           follows:
   281                                  ;
   282                                  ;           $GET_INTERRUPT_VECTOR for INT int_ctrl_c
   283                                  ;           Save it in static memory.
   284                                  ;           $SET_INTERRUPT_VECTOR for INT int_ctrl_c
   285                                  ;
   286                                  ;           The interrupt service routine must preserve all registers and
   287                                  ;           return carry set iff the operation is to be aborted (via abort
   288                                  ;           system call), otherwise, carry is reset and the operation is
   289                                  ;           restarted.  ANY DEVIATION FROM THIS WILL LEAD TO UNRELIABLE
   290                                  ;           RESULTS.
   291                                  ;
   292                                  ;           To restore original ^C processing (done on terminate/abort/exit),
   293                                  ;           restore INT int_ctrl_c from the saved vector.
   294                                  ;
   295                                  ; Hard-disk error -- The interrupt service routine for INT int_fatal_abort must
   296                                  ;           also preserve registers and return one of three values in AL: 0 and
   297                                  ;           1 imply retry and ignore (???)  and 2 indicates an abort.  The user
   298                                  ;           himself is not to issue the abort, rather, the dos will do it for
   299                                  ;           him by simulating a normal abort/exit system call.  ANY DEVIATION
   300                                  ;           FROM THIS WILL LEAD TO UNRELIABLE RESULTS.
   301                                  ;
   302                                  ; terminate/abort/exit -- The user may not, under any circumstances trap an
   303                                  ;           abort call.  This is reserved for knowledgeable system programs.
   304                                  ;           ANY DEVIATION FROM THIS WILL LEAD TO UNRELIABLE RESULTS.
   305                                  
   306                                  ;SUBTTL SEGMENT DECLARATIONS
   307                                  
   308                                  ; The following are all of the segments used.  They are declared in the order
   309                                  ; that they should be placed in the executable
   310                                  
   311                                  ;
   312                                  ; segment ordering for MSDOS
   313                                  ;
   314                                  
   315                                  ;START           SEGMENT BYTE PUBLIC 'START'
   316                                  ;START           ENDS
   317                                  
   318                                  ;CONSTANTS       SEGMENT BYTE PUBLIC 'CONST'
   319                                  ;CONSTANTS       ENDS
   320                                  
   321                                  ;DATA            SEGMENT WORD PUBLIC 'DATA'
   322                                  ;DATA            ENDS
   323                                  
   324                                  ;CODE            SEGMENT BYTE PUBLIC 'CODE'
   325                                  ;CODE            ENDS
   326                                  
   327                                  ;LAST            SEGMENT BYTE PUBLIC 'LAST'
   328                                  ;LAST            ENDS
   329                                  
   330                                  ;DOSGROUP    GROUP   CODE,CONSTANTS,DATA,LAST
   331                                  
   332                                  ; The following segment is defined such that the data/const classes appear
   333                                  ; before the code class for ROMification
   334                                  
   335                                  ;START		SEGMENT BYTE PUBLIC 'START'
   336                                  ;           	ASSUME  CS:DOSGROUP,DS:NOTHING,ES:NOTHING,SS:NOTHING
   337                                  ;		JMP     DOSINIT
   338                                  ;START		ENDS
   339                                  
   340                                  ;============================================================================
   341                                  ; DOSSYM.ASM
   342                                  ;============================================================================
   343                                  
   344                                  ;<Control character definitions>
   345                                  
   346                                  c_DEL       EQU     7Fh         ;    ASCII rubout or delete previous char
   347                                  c_BS        EQU     08h         ; ^H ASCII backspace
   348                                  c_CR        EQU     0Dh         ; ^M ASCII carriage return
   349                                  c_LF        EQU     0Ah         ; ^J ASCII linefeed
   350                                  c_ETB       EQU     17h         ; ^W ASCII end of transmission
   351                                  c_NAK       EQU     15h         ; ^U ASCII negative acknowledge
   352                                  c_ETX       EQU     03h         ; ^C ASCII end of text
   353                                  c_HT        EQU     09h         ; ^I ASCII tab
   354                                  
   355                                  ;============================================================================
   356                                  ; BPB.INC, MSDOS 3.3, 1987
   357                                  ;============================================================================
   358                                  ; 09/07/2018 - Retro DOS v3.0
   359                                  
   360                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   361                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   362                                  ;									   ;
   363                                  
   364                                  ; BIOS PARAMETER BLOCK DEFINITION
   365                                  ; THIS STRUCTURE IS USED TO BUILD A FULL DPB
   366                                  
   367                                  struc BPBLOCK
   368 00000000 ????                    .SECSZ: resw 1		; Size in bytes of physical sector
   369 00000002 ??                      .CLUS:  resb 1		; Sectors/Alloc unit
   370 00000003 ????                    .RES:   resw 1		; Number of reserved sectors
   371 00000005 ??                      .FTCNT: resb 1		; Number of FATs
   372 00000006 ????                    .DRCNT: resw 1		; Number of directory entries
   373 00000008 ????                    .SCCNT: resw 1		; Total number of sectors
   374 0000000A ??                      .MEDIA: resb 1		; Media descriptor byte
   375 0000000B ????                    .FTSEC:	resw 1		; Number of sectors taken up by one FAT
   376                                  .size:
   377                                  endstruc
   378                                  
   379                                  ; 09/07/2018 - Retro DOS v3.0
   380                                  ; (BPB.INC, MSDOS 6.0, 1991)
   381                                  
   382                                  ;**	BIOS PARAMETER BLOCK DEFINITION
   383                                  ;
   384                                  ;	The BPB contains information about the disk structure.  It dates
   385                                  ;	back to the earliest FAT systems and so FAT information is
   386                                  ;	intermingled with physical driver information.
   387                                  ;
   388                                  ;	A boot sector contains a BPB for its device; for other disks
   389                                  ;	the driver creates a BPB.  DOS keeps copies of some of this
   390                                  ;	information in the DPB.
   391                                  ;
   392                                  ;	The BDS structure contains a BPB within it. 
   393                                  
   394                                  struc A_BPB
   395 00000000 ????                    .BPB_BYTESPERSECTOR:	resw	1
   396 00000002 ??                      .BPB_SECTORSPERCLUSTER:	resb	1
   397 00000003 ????                    .BPB_RESERVEDSECTORS:	resw	1
   398 00000005 ??                      .BPB_NUMBEROFFATS:	resb	1
   399 00000006 ????                    .BPB_ROOTENTRIES: 	resw	1
   400 00000008 ????                    .BPB_TOTALSECTORS:	resw	1
   401 0000000A ??                      .BPB_MEDIADESCRIPTOR:	resb	1
   402 0000000B ????                    .BPB_SECTORSPERFAT:	resw	1
   403 0000000D ????                    .BPB_SECTORSPERTRACK:	resw	1
   404 0000000F ????                    .BPB_HEADS:		resw	1
   405 00000011 ????                    .BPB_HIDDENSECTORS:	resw	1
   406 00000013 ????                    			resw	1
   407 00000015 ????                    .BPB_BIGTOTALSECTORS:	resw	1
   408 00000017 ????                    			resw	1
   409 00000019 ????????????            			resb	6	; NOTE:  many times these
   410                                  ;					; 	 6 bytes are omitted
   411                                  ;					;	 when BPB manipulations
   412                                  ;					;	 are performed!
   413                                  .size:
   414                                  endstruc
   415                                  
   416                                  ;                                                                          ;
   417                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   418                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   419                                  
   420                                  ;============================================================================
   421                                  ; BUFFER.INC, MSDOS 3.3, 1987
   422                                  ;============================================================================
   423                                  ; 09/07/2018 - Retro DOS v3.0
   424                                  
   425                                  ; <Disk I/O Buffer Header>
   426                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   427                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   428                                  ;                                                                          ;
   429                                  
   430                                  ; Field definition for I/O buffer information
   431                                  
   432                                  struc BUFFINFO
   433 00000000 ????????                .buf_link:	resd 1		; Pointer to next buffer in list
   434 00000004 ??                      .buf_ID:	resb 1		; Drive of buffer (bit 7 = 0)
   435                                  				; SFT table index (bit 7 = 1)
   436                                  				; = FFH if buffer free
   437 00000005 ??                      .buf_flags:	resb 1		; Bit 7 = 1 if Remote file buffer
   438                                  				;	= 0 if Local device buffer
   439                                  				; Bit 6 = 1 if buffer dirty
   440                                  				; Bit 5 = Reserved
   441                                  				; Bit 4 = Search bit (bit 7 = 1)
   442                                  				; Bit 3 = 1 if buffer is DATA
   443                                  				; Bit 2 = 1 if buffer is DIR
   444                                  				; Bit 1 = 1 if buffer is FAT
   445                                  				; Bit 0 = Reserved
   446 00000006 ????                    .buf_sector:	resw 1		; Sector number of buffer (bit 7 = 0)
   447                                  ; The next two items are often refed as a word (bit 7 = 0)
   448 00000008 ??                      .buf_wrtcnt:	resb 1		; For FAT sectors, # times sector written out
   449 00000009 ??                      .buf_wrtcntinc:	resb 1		; "   "     "   , # sectors between each write
   450 0000000A ????????                .buf_DPB:	resd 1		; Pointer to drive parameters
   451 0000000E ????                    .buf_fill:	resw 1		; How full buffer is (bit 7 = 1)
   452                                  .size:
   453                                  endstruc
   454                                  
   455                                  %define buf_offset dword [buf_sector]
   456                                  				;For bit 7 = 1, this is the byte
   457                                  				;offset of the start of the buffer in
   458                                  				;the file pointed to by buf_ID.  Thus
   459                                  				;the buffer starts at location
   460                                  				;buf_offset in the file and contains
   461                                  				;buf_fill bytes.
   462                                  
   463                                  BUFINSIZ        EQU     BUFFINFO.size
   464                                  
   465                                  buf_Free	EQU	0FFh	; buf_id of free buffer
   466                                  
   467                                  ;Flag byte masks
   468                                  buf_isnet	EQU	10000000B
   469                                  buf_dirty	EQU	01000000B
   470                                  ;***
   471                                  buf_visit	EQU	00100000B
   472                                  ;***
   473                                  buf_snbuf	EQU	00010000B
   474                                  
   475                                  buf_isDATA	EQU	00001000B
   476                                  buf_isDIR	EQU	00000100B
   477                                  buf_isFAT	EQU	00000010B
   478                                  buf_type_0	EQU	11110001B	; AND sets type to "none"
   479                                  
   480                                  buf_NetID	EQU	BUFINSIZ
   481                                  
   482                                  ;                                                                          ;
   483                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   484                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   485                                  
   486                                  ; <User stack inside of system call>
   487                                  ; Location of user registers relative user stack pointer
   488                                  
   489                                  struc	user_env   ; user_environ
   490 00000000 ????                    .user_AX: resw 1
   491 00000002 ????                    .user_BX: resw 1
   492 00000004 ????                    .user_CX: resw 1
   493 00000006 ????                    .user_DX: resw 1
   494 00000008 ????                    .user_SI: resw 1
   495 0000000A ????                    .user_DI: resw 1
   496 0000000C ????                    .user_BP: resw 1
   497 0000000E ????                    .user_DS: resw 1
   498 00000010 ????                    .user_ES: resw 1
   499 00000012 ????                    .user_IP: resw 1
   500 00000014 ????                    .user_CS: resw 1
   501 00000016 ????                    .user_F:  resw 1
   502                                  .size:
   503                                  endstruc
   504                                  
   505                                  ; 09/07/2018 - Retro DOS v3.0
   506                                  ; (VECTOR.INC, MSDOS 3.3, 1987)
   507                                  ; ----------------------------------------------------------------------------
   508                                  
   509                                  ; <interrupt definitions>
   510                                  
   511                                  INTTAB          EQU     20H
   512                                  INTBASE         EQU     4 * INTTAB
   513                                  ENTRYPOINT      EQU     INTBASE+40H
   514                                  
   515                                  ;	IF      ALTVECT
   516                                  ;ALTTAB  EQU     0F0H
   517                                  ;ALTBASE EQU     4 * ALTTAB
   518                                  ;	ENDIF
   519                                  
   520                                  ;
   521                                  ; interrupt assignments
   522                                  ;
   523                                  ;	IF	NOT ALTVECT
   524                                  int_abort	    EQU     INTTAB	; abort process
   525                                  int_command	    EQU     int_abort+1 ; call MSDOS
   526                                  int_terminate	    EQU     int_abort+2 ; int to terminate address
   527                                  int_ctrl_c	    EQU     int_abort+3 ; ^c trapper
   528                                  int_fatal_abort     EQU     int_abort+4 ; hard disk error
   529                                  int_disk_read	    EQU     int_abort+5 ; logical sector disk read
   530                                  int_disk_write	    EQU     int_abort+6 ; logical sector disk write
   531                                  int_keep_process    EQU     int_abort+7 ; terminate program and stay
   532                                  					; resident
   533                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   534                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   535                                  ;									   ;
   536                                  int_spooler	    EQU     int_abort+8 ; spooler call
   537                                  int_fastcon	    EQU     int_abort+9 ; fast CON interrupt
   538                                  int_IBM 	    EQU     int_abort+10; critical section maintenance
   539                                  ;									   ;
   540                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   541                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   542                                  ;	ELSE
   543                                  ;int_abort	    EQU     INTTAB	; abort process
   544                                  ;int_command	    EQU     int_abort+1 ; call MSDOS
   545                                  ;int_terminate	    EQU     ALTTAB	; int to terminate address
   546                                  ;int_ctrl_c	    EQU     int_terminate+1 ; ^c trapper
   547                                  ;int_fatal_abort    EQU     int_terminate+2 ; hard disk error
   548                                  ;int_disk_read	    EQU     int_abort+5 ; logical sector disk read
   549                                  ;int_disk_write	    EQU     int_abort+6 ; logical sector disk write
   550                                  ;int_keep_process   EQU     int_abort+7 ; terminate program and stay resident
   551                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   552                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   553                                  ;									   ;
   554                                  ;int_spooler	    EQU     int_terminate+3 ; spooler call
   555                                  ;int_fastcon	    EQU     int_abort+9 ; fast CON interrupt
   556                                  ;									   ;
   557                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   558                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   559                                  ;	ENDIF
   560                                  
   561                                  addr_int_abort		EQU    4 * int_abort
   562                                  addr_int_command	EQU    4 * int_command
   563                                  addr_int_terminate	EQU    4 * int_terminate
   564                                  addr_int_ctrl_c 	EQU    4 * int_ctrl_c
   565                                  addr_int_fatal_abort	EQU    4 * int_fatal_abort
   566                                  addr_int_disk_read	EQU    4 * int_disk_read
   567                                  addr_int_disk_write	EQU    4 * int_disk_write
   568                                  addr_int_keep_process	EQU    4 * int_keep_process
   569                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   570                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   571                                  ;									   ;
   572                                  addr_int_spooler	EQU    4 * int_spooler
   573                                  addr_int_fastcon	EQU    4 * int_fastcon
   574                                  addr_int_IBM		EQU    4 * int_IBM
   575                                  ;									   ;
   576                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   577                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   578                                  
   579                                  
   580                                  ; <Disk map>
   581                                  ;  MSDOS partitions the disk into 4 sections:
   582                                  ;
   583                                  ;  phys sector 0:   +-------------------+
   584                                  ;       |           | boot/reserved     |
   585                                  ;       |           +-------------------+
   586                                  ;       |           |  File allocation  |
   587                                  ;       v           |      table(s)     |
   588                                  ;                   |  (multiple copies |
   589                                  ;                   |     are kept)     |
   590                                  ;                   +-------------------+
   591                                  ;                   |     Directory     |
   592                                  ;                   +-------------------+
   593                                  ;                   |     File space    |
   594                                  ;                   +-------------------+
   595                                  ;                   |   Unaddressable   |
   596                                  ;                   |  (to end of disk) |
   597                                  ;                   +-------------------+
   598                                  ;
   599                                  ; All partition boundaries are sector boundaries.  The size of the FAT is
   600                                  ; adjusted to maximize the file space addressable.
   601                                  
   602                                  ; BREAK <Directory entry>
   603                                  
   604                                  ;
   605                                  ;       +---------------------------+
   606                                  ;       |  (12 BYTE) filename/ext   |       0       0
   607                                  ;       +---------------------------+
   608                                  ;       |     (BYTE) attributes     |       11      B
   609                                  ;       +---------------------------+
   610                                  ;       |    (10 BYTE) reserved     |       12      C
   611                                  ;       +---------------------------+
   612                                  ;       | (WORD) time of last write |       22      16
   613                                  ;       +---------------------------+
   614                                  ;       | (WORD) date of last write |       24      18
   615                                  ;       +---------------------------+
   616                                  ;       |   (WORD) First cluster    |       26      1A
   617                                  ;       +---------------------------+
   618                                  ;       |     (DWORD) file size     |       28      1C
   619                                  ;       +---------------------------+
   620                                  ;
   621                                  ;   First byte of filename  = E5 -> free directory entry
   622                                  ;                           = 00 -> end of allocated directory
   623                                  ;   Time:   Bits 0-4=seconds/2, bits 5-10=minute, 11-15=hour
   624                                  ;   Date:   Bits 0-4=day, bits 5-8=month, bits 9-15=year-1980
   625                                  ;
   626                                  struc dir_entry
   627 00000000 <res Bh>                .dir_name:	resb 11			; file name
   628 0000000B ??                      .dir_attr:	resb 1			; attribute bits
   629 0000000C <res Ah>                .dir_pad:	resb 10			; reserved for expansion
   630 00000016 ????                    .dir_time:	resw 1			; time of last write
   631 00000018 ????                    .dir_date:	resw 1			; date of last write
   632 0000001A ????                    .dir_first:	resw 1			; first allocation unit of file
   633 0000001C ????                    .dir_size_l:	resw 1			; low 16 bits of file size
   634 0000001E ????                    .dir_size_h:	resw 1			; high 16 bits of file size
   635                                  .size:
   636                                  endstruc
   637                                  
   638                                  attr_read_only      EQU      1h
   639                                  attr_hidden         EQU      2h
   640                                  attr_system         EQU      4h
   641                                  attr_volume_id      EQU      8h
   642                                  attr_directory      EQU     10h
   643                                  attr_archive        EQU     20h
   644                                  ;09/07/2018 - Retro DOS v3.0
   645                                  ;(DIRENT.INC, MSDOS 3.3, 1987)
   646                                  attr_device	    EQU     40h	; This is a VERY special bit.
   647                                  				;   NO directory entry on a disk EVER
   648                                  				;   has this bit set. It is set non-zero
   649                                  				;   when a device is found by GETPATH
   650                                  
   651                                  attr_all            EQU     attr_hidden+attr_system+attr_directory
   652                                                                          ; OR of hard attributes for FINDENTRY
   653                                  
   654                                  attr_ignore         EQU     attr_read_only+attr_archive
   655                                                                          ; ignore this(ese) attribute(s)
   656                                                                          ; during search first/next
   657                                  
   658                                  attr_changeable     EQU     attr_read_only+attr_hidden+attr_system+attr_archive
   659                                                                          ; changeable via CHMOD
   660                                  
   661                                  ; 09/08/2018 - Retro DOS v3.0
   662                                  ; (DIRENT.INC, MSDOS 6,0, 1991)
   663                                  DIRFREE 	equ	0E5h	; stored in dir_name[0] to indicate free slot
   664                                  
   665                                  ; <File allocation Table information>
   666                                  ;
   667                                  ; The File Allocation Table uses a 12-bit entry for each allocation unit on the
   668                                  ; disk.  These entries are packed, two for every three bytes.  The contents of
   669                                  ; entry number N is found by 1) multiplying N by 1.5; 2) adding the result to
   670                                  ; the base address of the Allocation Table; 3) fetching the 16-bit word at this
   671                                  ; address; 4) If N was odd (so that N*1.5 was not an integer), shift the word
   672                                  ; right four bits; 5) mask to 12 bits (AND with 0FFF hex).  Entry number zero
   673                                  ; is used as an end-of-file trap in the OS and is passed to the BIOS to help
   674                                  ; determine disk format.  Entry 1 is reserved for future use.  The first
   675                                  ; available allocation unit is assigned entry number two, and even though it is
   676                                  ; the first, is called cluster 2.  Entries greater than 0FF8H are end of file
   677                                  ; marks; entries of zero are unallocated.  Otherwise, the contents of a FAT
   678                                  ; entry is the number of the next cluster in the file.
   679                                  ;
   680                                  ; Clusters with bad sectors are tagged with FF7H.  Any non-zero number would do
   681                                  ; because these clusters show as allocated, but are not part of any allocation
   682                                  ; chain and thus will never be allocated to a file.  A particular number is
   683                                  ; selected so that disk checking programs know what to do (ie.  a cluster with
   684                                  ; entry FF7H which is not in a chain is not an error).
   685                                  
   686                                  ;DIRSTRLEN       EQU     64	; Max length in bytes of directory strings
   687                                  
   688                                  ; 19/07/2018
   689                                  ; (DPB.INC, MSDOS 3.3, 1987)
   690                                  ; 07/07/2018 - Retro DOS v3.0
   691                                  ; (DPB.INC, MSDOS 6.0, 1991)
   692                                  ; ----------------------------------------------------------------------------
   693                                  ;**	DPB - Drive Parameter Block
   694                                  ;
   695                                  ;	BUGBUG - this isn't authorative - it's my probably incomplete and
   696                                  ;	possibly inaccurate deductions from code study... - jgl
   697                                  ;
   698                                  ;	The DPB is DOS's main structure for describing block devices.
   699                                  ;	It contains info about the "Drive" intermingled with info about
   700                                  ;	the FAT file system which is presumably on the drive.  I don't know
   701                                  ;	how those fields are used if it's not the FAT file system - BUGBUG
   702                                  ;
   703                                  ;	The DPBs are statically allocated and chained off of DPBHead.
   704                                  ;	Users scan this chain looking for a match on DPB_DRIVE.
   705                                  ;	The DPBs are built at init time from info in the SYSDEV structure.
   706                                  
   707                                  struc	DPB
   708 00000000 ??                      .DRIVE:		resb 1		; Logical drive # assoc with DPB (A=0,B=1,...)
   709 00000001 ??                      .UNIT:		resb 1		; Driver unit number of DPB
   710 00000002 ????                    .SECTOR_SIZE:	resw 1		; Size of physical sector in bytes
   711 00000004 ??                      .CLUSTER_MASK:	resb 1		; Sectors/cluster - 1
   712 00000005 ??                      .CLUSTER_SHIFT:	resb 1		; Log2 of sectors/cluster
   713 00000006 ????                    .FIRST_FAT:	resw 1		; Starting record of FATs
   714 00000008 ??                      .FAT_COUNT:	resb 1		; Number of FATs for this drive
   715 00000009 ????                    .ROOT_ENTRIES:	resw 1		; Number of directory entries
   716 0000000B ????                    .FIRST_SECTOR:	resw 1		; First sector of first cluster
   717 0000000D ????                    .MAX_CLUSTER:	resw 1		; Number of clusters on drive + 1
   718                                  ; MSDOS 3.3
   719 0000000F ??                      .FAT_SIZE:	resb 1		; Number of records occupied by FAT
   720                                  ; MSDOS 6.0
   721                                  ;.FAT_SIZE:	resw 1		; Number of records occupied by FAT
   722 00000010 ????                    .DIR_SECTOR:	resw 1		; Starting record of directory
   723 00000012 ????????                .DRIVER_ADDR:	resd 1		; Pointer to driver
   724 00000016 ??                      .MEDIA:		resb 1		; Media byte
   725 00000017 ??                      .FIRST_ACCESS:	resb 1		; This is initialized to -1 to force a media
   726                                  				; check the first time this DPB is used
   727 00000018 ????????                .NEXT_DPB:	resd 1		; Pointer to next Drive parameter block
   728 0000001C ????                    .NEXT_FREE:	resw 1		; Cluster # of last allocated cluster
   729 0000001E ????                    .FREE_CNT:	resw 1		; Count of free clusters, -1 if unknown
   730                                  .size:
   731                                  endstruc
   732                                  
   733                                  DPBSIZ  EQU     DPB.size	; Size of the structure in bytes
   734                                  
   735                                  DSKSIZ  EQU	DPB.MAX_CLUSTER	; Size of disk (temp used during init only)
   736                                  
   737                                  ;                                                                          ;
   738                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   739                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   740                                  
   741                                  ; 12/07/2018 - Retro DOS v3.0 
   742                                  ; (DOSSYM.INC, MSDOS 6.0, 1991)
   743                                  
   744                                  ;**	Character Type Flags
   745                                  ;
   746                                  ;	These flags are used in a lookup table indexed by the character code.
   747                                  ;	They're used to quickly classify characters when parsing paths.
   748                                  ;	I think that these are only used to parse FCBs - jgl
   749                                  
   750                                  FCHK	equ 1		; I think this means "normal name char, no chks needed" -jgl
   751                                  FDELIM	equ 2		; is a delimiter
   752                                  FSPCHK	equ 4		; set if character is not a space or equivalent
   753                                  FFCB	equ 8		; is valid in an FCB
   754                                  
   755                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   756                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   757                                  ;                                                                          ;
   758                                  devid_file_clean        EQU     40h     ; true if file and not written
   759                                  devid_file_mask_drive   EQU     3Fh     ; mask for drive number
   760                                  
   761                                  devid_device            EQU     80h     ; true if a device
   762                                  devid_device_EOF        EQU     40h     ; true if end of file reached
   763                                  devid_device_raw        EQU     20h     ; true if in raw mode
   764                                  devid_device_special    EQU     10h     ; true if special device
   765                                  devid_device_clock      EQU     08h     ; true if clock device
   766                                  devid_device_null       EQU     04h     ; true if null device
   767                                  devid_device_con_out    EQU     02h     ; true if console output
   768                                  devid_device_con_in     EQU     01h     ; true if consle input
   769                                  
   770                                  ;
   771                                  ; structure of devid field as returned by IOCTL is:
   772                                  ;
   773                                  ;       BIT     7   6   5   4   3   2   1   0
   774                                  ;             |---|---|---|---|---|---|---|---|
   775                                  ;             | I | E | R | S | I | I | I | I |
   776                                  ;             | S | O | A | P | S | S | S | S |
   777                                  ;             | D | F | W | E | C | N | C | C |
   778                                  ;             | E |   |   | C | L | U | O | I |
   779                                  ;             | V |   |   | L | K | L | T | N |
   780                                  ;             |---|---|---|---|---|---|---|---|
   781                                  ;       ISDEV = 1 if this channel is a device
   782                                  ;             = 0 if this channel is a disk file
   783                                  ;
   784                                  ;       If ISDEV = 1
   785                                  ;
   786                                  ;             EOF = 0 if End Of File on input
   787                                  ;             RAW = 1 if this device is in Raw mode
   788                                  ;                 = 0 if this device is cooked
   789                                  ;             ISCLK = 1 if this device is the clock device
   790                                  ;             ISNUL = 1 if this device is the null device
   791                                  ;             ISCOT = 1 if this device is the console output
   792                                  ;             ISCIN = 1 if this device is the console input
   793                                  ;
   794                                  ;       If ISDEV = 0
   795                                  ;             EOF = 0 if channel has been written
   796                                  ;             Bits 0-5  are  the  block  device  number  for
   797                                  ;                 the channel (0 = A, 1 = B, ...)
   798                                  ;
   799                                  devid_ISDEV     EQU     80h
   800                                  devid_EOF       EQU     40h
   801                                  devid_RAW       EQU     20h
   802                                  devid_SPECIAL   EQU     10H
   803                                  devid_ISCLK     EQU     08h
   804                                  devid_ISNUL     EQU     04h
   805                                  devid_ISCOT     EQU     02h
   806                                  devid_ISCIN     EQU     01h
   807                                  
   808                                  devid_block_dev EQU     1Fh             ; mask for block device number
   809                                  
   810                                  ; 08/07/2018 - Retro DOS v3.0
   811                                  ; (PDB.INC, MSDOS 6.0, 1991)
   812                                  ; ----------------------------------------------------------------------------
   813                                  ; BREAK <Process data block>
   814                                  ;
   815                                  ;**	Process data block (otherwise known as program header)
   816                                  ;
   817                                  
   818                                  ;	These offset are documented in the MSDOS Encyclopedia, so nothing
   819                                  ;	can be rearranged here, ever.  Reserved areas are probably safe
   820                                  ;	for use.
   821                                  
   822                                  FILPERPROC	EQU     20
   823                                  
   824                                  struc PDB	; Process_data_block
   825 00000000 ????                    .EXIT_CALL:	resw 1   	; INT int_abort system terminate
   826 00000002 ????                    .BLOCK_LEN:	resw 1		; size of execution block
   827 00000004 ??                                      resb 1
   828 00000005 ??????????              .CPM_CALL:	resb 5		; ancient call to system
   829 0000000A ????????                .EXIT:		resd 1		; pointer to exit routine
   830 0000000E ????????                .CTRL_C:	resd 1		; pointer to ^C routine
   831 00000012 ????????                .FATAL_ABORT:	resd 1		; pointer to fatal error
   832 00000016 ????                    .PARENT_PID:	resw 1		; PID of parent (terminate PID)
   833 00000018 <res 14h>               .JFN_TABLE:     resb FILPERPROC ; indices into system table
   834 0000002C ????                    .ENVIRON:	resw 1		; seg addr of environment
   835 0000002E ????????                .USER_STACK:	resd 1		; stack of self during system calls
   836 00000032 ????                    .JFN_Length:	resw 1		; number of handles allowed
   837 00000034 ????????                .JFN_Pointer:	resd 1		; pointer to JFN table
   838 00000038 ????????                .Next_PDB:	resd 1		; pointer to nested PDB's
   839 0000003C ??                      .InterCon:	resb 1	; MSDOS 6.0 ; *** jh-3/28/90 *** 
   840 0000003D ??                      .Append:	resb 1	; MSDOS 6.0 ; *** Not sure if still used ***
   841 0000003E ????                    .Novell_Used:	resb 2	; MSDOS 6.0 ; Novell shell (redir) uses these
   842 00000040 ????                    .Version:	resw 1	; MSDOS 6.0 ; DOS version reported to this app
   843 00000042 <res Eh>                .PAD1:		resb 14 ; 0Eh
   844 00000050 ??????????              .CALL_SYSTEM:	resb 5		; portable method of system call
   845 00000055 ??????????????          .PAD2:		resb 7		; reserved so FCB 1 can be used as
   846                                  				;  an extended FCB
   847                                  ;endstruc 	; MSDOS 3.3
   848                                  	  	; MSDOS 6.0
   849 0000005C <res 10h>               .FCB1:		resb 16 ; 10h	; default FCB 1
   850 0000006C <res 10h>               .FCB2:		resb 16 ; 10h	; default FCB 2
   851 0000007C ????????                .PAD3:		resb 4		; not sure if this is used by PDB_FCB2
   852 00000080 <res 80h>               .TAIL:		resb 128	; command tail and default DTA
   853                                  endstruc
   854                                  
   855                                  ; BREAK <EXEC and EXE file structures>
   856                                  ;
   857                                  ; EXEC arg block - load/go program
   858                                  ;
   859                                  
   860                                  ;
   861                                  ; The following get used as arguments to the EXEC system call.  They indicate
   862                                  ; whether or not the program is executed or whether or not a program header
   863                                  ; gets created.
   864                                  ;
   865                                  exec_func_no_execute    EQU 1           ; no execute bit
   866                                  exec_func_overlay       EQU 2           ; overlay bit
   867                                  
   868                                  struc EXEC0
   869 00000000 ????                    .ENVIRON:	resw 1		; seg addr of environment
   870 00000002 ????????                .COM_LINE:	resd 1		; pointer to asciz command line
   871 00000006 ????????                .5C_FCB:	resd 1		; default fcb at 5C
   872 0000000A ????????                .6C_FCB:	resd 1		; default fcb at 6C
   873                                  .size:
   874                                  endstruc
   875                                  
   876                                  struc EXEC1
   877 00000000 ????                    .ENVIRON:	resw 1		; seg addr of environment
   878 00000002 ????????                .COM_LINE:	resd 1		; pointer to asciz command line
   879 00000006 ????????                .5C_FCB:	resd 1		; default fcb at 5C
   880 0000000A ????????                .6C_FCB:	resd 1		; default fcb at 6C
   881 0000000E ????                    .SP:		resw 1		; stack pointer of program
   882 00000010 ????                    .SS:		resw 1		; stack seg register of program
   883 00000012 ????                    .IP:		resw 1		; entry point IP
   884 00000014 ????                    .CS:		resw 1		; entry point CS
   885                                  .size:
   886                                  endstruc
   887                                  
   888                                  struc EXEC3
   889 00000000 ????                    .load_addr:	resw 1		; seg address of load point
   890 00000002 ????                    .reloc_fac:	resw 1		; relocation factor
   891                                  endstruc
   892                                  
   893                                  ; 02/08/2018 (MSDOS 6.0, EXEC.INC, 1991)
   894                                  ;**	Exit codes (in upper byte) for terminating programs
   895                                  
   896                                  EXIT_TERMINATE		EQU	0
   897                                  EXIT_ABORT		EQU	0
   898                                  EXIT_CTRL_C		EQU	1
   899                                  EXIT_HARD_ERROR 	EQU	2
   900                                  EXIT_KEEP_PROCESS	EQU	3
   901                                  
   902                                  ;
   903                                  ; EXE file header
   904                                  ;
   905                                  
   906                                  struc EXE
   907 00000000 ????                    .signature:   resw 1		; must contain 4D5A (yay zibo!)
   908 00000002 ????                    .len_mod_512: resw 1		; low 9 bits of length
   909 00000004 ????                    .pages:       resw 1		; number of 512b pages in file
   910 00000006 ????                    .rle_count:   resw 1		; count of reloc entries
   911 00000008 ????                    .par_dir:     resw 1		; number of paragraphs before image
   912 0000000A ????                    .min_BSS:     resw 1		; minimum number of para of BSS
   913 0000000C ????                    .max_BSS:     resw 1		; max number of para of BSS
   914 0000000E ????                    .SS:          resw 1		; stack of image
   915 00000010 ????                    .SP:          resw 1		; SP of image
   916 00000012 ????                    .chksum:      resw 1		; checksum of file (ignored)
   917 00000014 ????                    .IP:          resw 1		; IP of entry
   918 00000016 ????                    .CS:          resw 1		; CS of entry
   919 00000018 ????                    .rle_table:   resw 1		; byte offset of reloc table
   920 0000001A ????                    .iov:         resw 1		; overlay number (0 for root)
   921 0000001C ????????                .sym_tab:     resd 1		; offset of symbol table in file
   922                                  .size:
   923                                  endstruc
   924                                  
   925                                  exe_valid_signature     EQU 5A4Dh
   926                                  exe_valid_old_signature EQU 4D5Ah
   927                                  
   928                                  struc symbol_entry
   929 00000000 ????????                .value:	resd 1
   930 00000004 ????                    .type:	resw 1
   931 00000006 ??                      .len:	resb 1
   932 00000007 <res FFh>               .name:	resb 255
   933                                  endstruc
   934                                  
   935                                  ; 07/07/2018 - Retro DOS v3.0
   936                                  ; MSDOS 6.0 (SF.INC, 1991)
   937                                  ; ----------------------------------------------------------------------------
   938                                  ;**	SF.INC - System File Table
   939                                  ;
   940                                  ;   AN000   version 4.00   Jan. 1988
   941                                  ;   AN003   PTM 3680 --  make NAME offset the same as before (<=3.30)
   942                                  ;   AN009   PTM 3839	 reorder SFT for MS WINDOWS
   943                                  
   944                                  ;**	System File Table SuperStructure
   945                                  ;
   946                                  ;	The system file table entries are allocated in contiguous groups.
   947                                  ;	There may be more than one such groups; the SF "superstructure"
   948                                  ;	tracks the groups.
   949                                  
   950                                  struc	SFT
   951 00000000 ????????                .SFLink:	resd 1
   952 00000004 ????                    .SFCount:	resw 1		; number of entries
   953 00000006 ????                    .SFTable:	resw 1		; beginning of array of the following
   954                                  .size:
   955                                  endstruc
   956                                  
   957                                  ; 07/07/2018 - Retro DOS v3.0
   958                                  ; MSDOS 6.0 (SF.INC, 1991)
   959                                  ; ----------------------------------------------------------------------------
   960                                  ;**	System file table entry
   961                                  ;
   962                                  ;	These are the structures which are at SFTABLE in the SF structure.
   963                                  
   964                                  struc SF_ENTRY
   965 00000000 ????                    .sf_ref_count:	resw 1		; number of processes sharing entry
   966                                  				;   if FCB then ref count
   967 00000002 ????                    .sf_mode:	resw 1		; mode of access or high bit on if FCB
   968 00000004 ??                      .sf_attr:	resb 1		; attribute of file
   969 00000005 ????                    .sf_flags:	resw 1		;Bits 8-15
   970                                  				; Bit 15 = 1 if remote file
   971                                  				;	 = 0 if local file or device
   972                                  				; Bit 14 = 1 if date/time is not to be
   973                                  				;   set from clock at CLOSE.  Set by
   974                                  				;   FILETIMES and FCB_CLOSE.  Reset by
   975                                  				;   other reseters of the dirty bit
   976                                  				;   (WRITE)
   977                                  				; Bit 13 = Pipe bit (reserved)
   978                                  				;
   979                                  				; Bits 0-7 (old FCB_devid bits)
   980                                  				; If remote file or local file, bit
   981                                  				; 6=0 if dirty Device ID number, bits
   982                                  				; 0-5 if local file.
   983                                  				; bit 7=0 for local file, bit 7
   984                                  				;      =1 for local I/O device
   985                                  				; If local I/O device, bit 6=0 if EOF (input)
   986                                  				;		Bit 5=1 if Raw mode
   987                                  				;		Bit 0=1 if console input device
   988                                  				;		Bit 1=1 if console output device
   989                                  				;		Bit 2=1 if null device
   990                                  				;		Bit 3=1 if clock device
   991 00000007 ????????                .sf_devptr:	resd	1	; Points to DPB if local file, points
   992                                  				; to device header if local device,
   993                                  				; points to net device header if
   994                                  				; remote
   995 0000000B ????                    .sf_firclus:	resw	1	; First cluster of file (bit 15 = 0)
   996 0000000D ????                    .sf_time:	resw	1	; Time associated with file
   997 0000000F ????                    .sf_date:	resw	1	; Date associated with file
   998 00000011 ????????                .sf_size:	resd 	1	; Size associated with file
   999 00000015 ????????                .sf_position:	resd	1	; Read/Write pointer or LRU count for FCBs
  1000                                  
  1001                                  ; Starting here, the next 7 bytes may be used by the file system to store an
  1002                                  ; ID
  1003                                  
  1004                                  ; 09/07/2018 - Retro DOS v3.0
  1005                                  
  1006                                  ; MSDOS 3.3 SF.INC, 1987
  1007 00000019 ????                    .sf_cluspos:	resw	1	; Position of last cluster accessed
  1008 0000001B ????                    .sf_lstclus	resw	1	; Last cluster accessed
  1009 0000001D ????                    .sf_dirsec:	resw	1	; Sector number of directory sector
  1010                                  				; for this file
  1011 0000001F ??                      .sf_dirpos:	resb	1	; Offset of this entry in the above
  1012                                  
  1013                                  ; MSDOS 6.0, SF.INC, 1991
  1014                                  ;.sf_cluspos:	resw	1	; Position of last cluster accessed
  1015                                  ;.sf_dirsec:	resd	1	; Sector number of directory sector
  1016                                  ;				; for this file
  1017                                  ;.sf_dirpos:	resb	1	; Offset of this entry in the above
  1018                                  
  1019                                  ; End of 7 bytes of file-system specific info.
  1020                                  
  1021 00000020 <res Bh>                .sf_name:	resb	11	; 11 character name that is in the
  1022                                  				; directory entry.  This is used by
  1023                                  				; close to detect file deleted and
  1024                                  				; disk changed errors.
  1025                                  ; SHARING INFO
  1026 0000002B ????????                .sf_chain:	resd	1	; link to next SF
  1027 0000002F ????                    .sf_UID:	resw	1
  1028 00000031 ????                    .sf_PID:	resw	1
  1029 00000033 ????                    .sf_MFT:	resw	1
  1030                                  
  1031                                  ; MSDOS 6.0, SF.INC, 1991
  1032                                  ;.sf_lstclus:	resw	1	;AN009; Last cluster accessed
  1033                                  ;.sf_IFS_HDR:	resd	1
  1034                                  
  1035                                  .size:
  1036                                  endstruc
  1037                                  
  1038                                  ; 20/07/2018
  1039                                  ; MSDOS 3.3, SF.INC, 1987
  1040                                  %define sf_netid   SF_ENTRY.sf_cluspos    ; byte
  1041                                  %define sf_OpenAge SF_ENTRY.sf_position+2 ; word
  1042                                  %define sf_LRU	   SF_ENTRY.sf_position	  ; word
  1043                                  ; MSDOS 6.0, SDF.INC, 1991
  1044                                  %define sf_fsda	     SF_ENTRRY.sf_cluspos ; byte ;DOS 4.00
  1045                                  %define sf_serial_ID SF_ENTRY.sf_firclus  ; word ;DOS 4.00
  1046                                  
  1047                                  ; 19/07/2018
  1048                                  
  1049                                  ; MSDOS 3.3, SF.INC, 1987
  1050                                  
  1051                                  sf_default_number  EQU	5
  1052                                  
  1053                                  ; Note that we need to mark an SFT as being busy for OPEN/CREATE.  This is
  1054                                  ; because an INT 24 may prevent us from 'freeing' it.  We mark this as such
  1055                                  ; by placing a -1 in the ref_count field.
  1056                                  
  1057                                  sf_busy EQU -1
  1058                                  
  1059                                  ; mode mask for FCB detection
  1060                                  sf_isFCB		EQU	1000000000000000B
  1061                                  
  1062                                  ; Flag word masks
  1063                                  sf_isnet		EQU	1000000000000000B
  1064                                  sf_close_nodate 	EQU	0100000000000000B
  1065                                  sf_pipe 		EQU	0010000000000000B
  1066                                  sf_no_inherit		EQU	0001000000000000B
  1067                                  sf_net_spool		EQU	0000100000000000B
  1068                                  
  1069                                  ; 19/04/2018
  1070                                  sf_entry_size equ SF_ENTRY.size ; 53
  1071                                  
  1072                                  ;                                                                          ;
  1073                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1074                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1075                                  
  1076                                  ; 09/07/2018 - Retro DOS v3.0
  1077                                  ; (ARENA.INC, MSDOS 3.3, 1987)
  1078                                  ; ----------------------------------------------------------------------------
  1079                                  ;BREAK <Memory arena structure>
  1080                                  
  1081                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1082                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1083                                  ;                                                                          ;
  1084                                  ;
  1085                                  ; arena item
  1086                                  ;
  1087                                  
  1088                                  struc ARENA
  1089 00000000 ??                      .SIGNATURE:	resb 1		; 4D for valid item, 5A for last item
  1090 00000001 ????                    .OWNER:		resw 1		; owner of arena item
  1091 00000003 ????                    .SIZE:		resw 1		; size in paragraphs of item
  1092                                  endstruc
  1093                                  
  1094                                  ; CAUTION: The routines in ALLOC.ASM rely on the fact that arena_signature
  1095                                  ; and arena_owner_system are all equal to zero and are contained in DI.
  1096                                  ; Change them and change ALLOC.ASM.
  1097                                  
  1098                                  arena_owner_system  EQU 0               ; free block indication
  1099                                  
  1100                                  arena_signature_normal	EQU 4Dh		; valid signature, not end of arena
  1101                                  arena_signature_end     EQU 5Ah         ; valid signature, last block in arena
  1102                                  
  1103                                  ; 04/08/2018 - Retro DOS v3.0
  1104                                  ; (ARENA.INC, MSDOS 6.0, 1991)
  1105                                  
  1106                                  FIRST_FIT	EQU	00000000B
  1107                                  BEST_FIT	EQU	00000001B
  1108                                  LAST_FIT	EQU	00000010B
  1109                                  
  1110                                  ; MSDOS 6.0
  1111                                  ;LOW_FIRST	EQU	00000000B	; M001
  1112                                  ;HIGH_FIRST	EQU	10000000B	; M001
  1113                                  ;HIGH_ONLY	EQU	01000000B	; M001
  1114                                  
  1115                                  ;LINKSTATE	EQU	00000001B	; M002
  1116                                  
  1117                                  ;HF_MASK		EQU	~HIGH_FIRST	; M001
  1118                                  ;HO_MASK		EQU	~HIGH_ONLY	; M001
  1119                                  
  1120                                  ;STRAT_MASK	EQU	HF_MASK & HO_MASK	; M001;
  1121                                  						; M026: used to mask of bits
  1122                                  						; M026: 6 & 7 of AllocMethod
  1123                                  
  1124                                  ; 07/07/2018 - Retro DOS v3.0
  1125                                  ; (MI.INC, MSDOS 6.0, 1991)
  1126                                  ; ----------------------------------------------------------------------------
  1127                                  ;BREAK <Machine instruction, flag definitions and character types>
  1128                                  
  1129                                  mi_INT		EQU	0CDh
  1130                                  mi_Long_JMP	EQU	0EAh
  1131                                  mi_Long_CALL	EQU	09Ah
  1132                                  mi_Long_RET	EQU	0CBh
  1133                                  mi_Near_RET	EQU	0C3h
  1134                                  
  1135                                  ;			xxxxoditszxaxpxc
  1136                                  f_Overflow	EQU	0000100000000000B
  1137                                  f_Direction	EQU	0000010000000000B
  1138                                  f_Interrupt	EQU	0000001000000000B
  1139                                  f_Trace 	EQU	0000000100000000B
  1140                                  f_Sign		EQU	0000000010000000B
  1141                                  f_Zero		EQU	0000000001000000B
  1142                                  f_Aux		EQU	0000000000010000B
  1143                                  f_Parity	EQU	0000000000000100B
  1144                                  f_Carry 	EQU	0000000000000001B
  1145                                  
  1146                                  ; <Standard I/O assignments>
  1147                                  
  1148                                  stdin       EQU     0
  1149                                  stdout      EQU     1
  1150                                  stderr      EQU     2
  1151                                  stdaux      EQU     3
  1152                                  stdprn      EQU     4
  1153                                  
  1154                                  ; <Xenix subfunction assignments>
  1155                                  
  1156                                  open_for_read   EQU 0
  1157                                  open_for_write  EQU 1
  1158                                  open_for_both   EQU 2
  1159                                  
  1160                                  ; 13/07/2018 - Retro DOS v3.0
  1161                                  ; (FILEMODE.INC, MSDOS 6.0, 1991)
  1162                                  
  1163                                  access_mask	EQU 0Fh ; 09/08/2018
  1164                                  
  1165                                  EXEC_OPEN	EQU 3		; access code of 3 indicates that open was 
  1166                                  				; made from exec
  1167                                  SHARING_MASK	    equ 0F0h
  1168                                  SHARING_COMPAT	    equ 000h
  1169                                  SHARING_DENY_BOTH   equ 010h
  1170                                  SHARING_DENY_WRITE  equ 020h
  1171                                  SHARING_DENY_READ   equ 030h
  1172                                  SHARING_DENY_NONE   equ 040h
  1173                                  SHARING_NET_FCB     equ 070h
  1174                                  SHARING_NO_INHERIT  equ 080h
  1175                                  
  1176                                  ; 09/07/2018 - Retro DOS v3.0
  1177                                  ; (SYSCALL.INC, MSDOS 3.3, 1987)
  1178                                  ; ----------------------------------------------------------------------------
  1179                                  
  1180                                  ; <system call definitions>
  1181                                  
  1182                                  ABORT                           EQU 0   ;  0      0
  1183                                  STD_CON_INPUT                   EQU 1   ;  1      1
  1184                                  STD_CON_OUTPUT                  EQU 2   ;  2      2
  1185                                  STD_AUX_INPUT                   EQU 3   ;  3      3
  1186                                  STD_AUX_OUTPUT                  EQU 4   ;  4      4
  1187                                  STD_PRINTER_OUTPUT              EQU 5   ;  5      5
  1188                                  RAW_CON_IO                      EQU 6   ;  6      6
  1189                                  RAW_CON_INPUT                   EQU 7   ;  7      7
  1190                                  STD_CON_INPUT_NO_ECHO           EQU 8   ;  8      8
  1191                                  STD_CON_STRING_OUTPUT           EQU 9   ;  9      9
  1192                                  STD_CON_STRING_INPUT            EQU 10  ; 10      A
  1193                                  STD_CON_INPUT_STATUS            EQU 11  ; 11      B
  1194                                  STD_CON_INPUT_FLUSH             EQU 12  ; 12      C
  1195                                  DISK_RESET                      EQU 13  ; 13      D
  1196                                  SET_DEFAULT_DRIVE               EQU 14  ; 14      E
  1197                                  FCB_OPEN                        EQU 15  ; 15      F
  1198                                  FCB_CLOSE                       EQU 16  ; 16     10
  1199                                  DIR_SEARCH_FIRST                EQU 17  ; 17     11
  1200                                  DIR_SEARCH_NEXT                 EQU 18  ; 18     12
  1201                                  FCB_DELETE                      EQU 19  ; 19     13
  1202                                  FCB_SEQ_READ                    EQU 20  ; 20     14
  1203                                  FCB_SEQ_WRITE                   EQU 21  ; 21     15
  1204                                  FCB_CREATE                      EQU 22  ; 22     16
  1205                                  FCB_RENAME                      EQU 23  ; 23     17
  1206                                  GET_DEFAULT_DRIVE               EQU 25  ; 25     19
  1207                                  SET_DMA                         EQU 26  ; 26     1A
  1208                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1209                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1210                                  ;                                                                          ;
  1211                                  GET_DEFAULT_DPB                 EQU 31  ; 31     1F
  1212                                  ;                                                                          ;
  1213                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1214                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1215                                  FCB_RANDOM_READ                 EQU 33  ; 33     21
  1216                                  FCB_RANDOM_WRITE                EQU 34  ; 34     22
  1217                                  GET_FCB_FILE_LENGTH             EQU 35  ; 35     23
  1218                                  GET_FCB_POSITION                EQU 36  ; 36     24
  1219                                  SET_INTERRUPT_VECTOR            EQU 37  ; 37     25
  1220                                  CREATE_PROCESS_DATA_BLOCK       EQU 38  ; 38     26
  1221                                  FCB_RANDOM_READ_BLOCK           EQU 39  ; 39     27
  1222                                  FCB_RANDOM_WRITE_BLOCK          EQU 40  ; 40     28
  1223                                  PARSE_FILE_DESCRIPTOR           EQU 41  ; 41     29
  1224                                  GET_DATE                        EQU 42  ; 42     2A
  1225                                  SET_DATE                        EQU 43  ; 43     2B
  1226                                  GET_TIME                        EQU 44  ; 44     2C
  1227                                  SET_TIME                        EQU 45  ; 45     2D
  1228                                  SET_VERIFY_ON_WRITE             EQU 46  ; 46     2E
  1229                                  ; Extended functionality group
  1230                                  GET_DMA                         EQU 47  ; 47     2F
  1231                                  GET_VERSION                     EQU 48  ; 48     30
  1232                                  KEEP_PROCESS                    EQU 49  ; 49     31
  1233                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1234                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1235                                  ;                                                                          ;
  1236                                  GET_DPB                         EQU 50  ; 50     32
  1237                                  ;                                                                          ;
  1238                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1239                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1240                                  SET_CTRL_C_TRAPPING             EQU 51  ; 51     33
  1241                                  GET_INDOS_FLAG                  EQU 52  ; 52     34
  1242                                  GET_INTERRUPT_VECTOR            EQU 53  ; 53     35
  1243                                  GET_DRIVE_FREESPACE             EQU 54  ; 54     36
  1244                                  CHAR_OPER                       EQU 55  ; 55     37
  1245                                  INTERNATIONAL                   EQU 56  ; 56     38
  1246                                  ; XENIX CALLS
  1247                                  ;   Directory Group
  1248                                  MKDIR                           EQU 57  ; 57     39
  1249                                  RMDIR                           EQU 58  ; 58     3A
  1250                                  CHDIR                           EQU 59  ; 59     3B
  1251                                  ;   File Group
  1252                                  CREAT                           EQU 60  ; 60     3C
  1253                                  OPEN                            EQU 61  ; 61     3D
  1254                                  CLOSE                           EQU 62  ; 62     3E
  1255                                  READ                            EQU 63  ; 63     3F
  1256                                  WRITE                           EQU 64  ; 64     40
  1257                                  UNLINK                          EQU 65  ; 65     41
  1258                                  LSEEK                           EQU 66  ; 66     42
  1259                                  CHMOD                           EQU 67  ; 67     43
  1260                                  IOCTL                           EQU 68  ; 68     44
  1261                                  XDUP                            EQU 69  ; 69     45
  1262                                  XDUP2                           EQU 70  ; 70     46
  1263                                  CURRENT_DIR                     EQU 71  ; 71     47
  1264                                  ;    Memory Group
  1265                                  ALLOC                           EQU 72  ; 72     48
  1266                                  DEALLOC                         EQU 73  ; 73     49
  1267                                  SETBLOCK                        EQU 74  ; 74     4A
  1268                                  ;    Process Group
  1269                                  EXEC                            EQU 75  ; 75     4B
  1270                                  EXIT                            EQU 76  ; 76     4C
  1271                                  _WAIT				EQU 77  ; 77     4D
  1272                                  FIND_FIRST                      EQU 78  ; 78     4E
  1273                                  ;   Special Group
  1274                                  FIND_NEXT                       EQU 79  ; 79     4F
  1275                                  ; SPECIAL SYSTEM GROUP
  1276                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1277                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1278                                  ;                                                                          ;
  1279                                  SET_CURRENT_PDB                 EQU 80  ; 80     50
  1280                                  GET_CURRENT_PDB                 EQU 81  ; 81     51
  1281                                  GET_IN_VARS                     EQU 82  ; 82     52
  1282                                  SETDPB                          EQU 83  ; 83     53
  1283                                  ;                                                                          ;
  1284                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1285                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1286                                  GET_VERIFY_ON_WRITE             EQU 84  ; 84     54
  1287                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1288                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1289                                  ;                                                                          ;
  1290                                  DUP_PDB                         EQU 85  ; 85     55
  1291                                  ;                                                                          ;
  1292                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1293                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1294                                  RENAME                          EQU 86  ; 86     56
  1295                                  FILE_TIMES                      EQU 87  ; 87     57
  1296                                  ALLOCOPER			EQU 88	; 88	 58
  1297                                  ; Network extention system calls
  1298                                  GETEXTENDEDERROR		EQU 89	; 89	 59
  1299                                  CREATETEMPFILE			EQU 90	; 90	 5A
  1300                                  CREATENEWFILE			EQU 91	; 91	 5B
  1301                                  LOCKOPER			EQU 92	; 92	 5C Lock and Unlock
  1302                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1303                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  1304                                  ;									   ;
  1305                                  SERVERCALL			EQU 93	; 93	 5D CommitAll, ServerDOSCall,
  1306                                  					;	    CloseByName, CloseUser,
  1307                                  					;	    CloseUserProcess,
  1308                                  					;	    GetOpenFileList
  1309                                  ;									   ;
  1310                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  1311                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1312                                  USEROPER			EQU 94	; 94	 5E Get and Set
  1313                                  ASSINGOPER			EQU 95	; 95	 5F On, Off, Get, Set, Cancel
  1314                                  XNAMETRANS			EQU 96	; 96	 60
  1315                                  PATHPARSE			EQU 97	; 97	 61
  1316                                  GETCURRENTPSP			EQU 98	; 98	 62
  1317                                  HONGEUL 			EQU 99	; 99	 63
  1318                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1319                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  1320                                  ;									   ;
  1321                                  SET_PRINTER_FLAG		EQU 100 ; 100	 64
  1322                                  ;									   ;
  1323                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  1324                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1325                                  GETEXTCNTRY			EQU 101 ; 101	 65 
  1326                                  GETSETCDPG			EQU 102 ; 102	 66
  1327                                  EXTHANDLE			EQU 103 ; 103	 67
  1328                                  COMMIT				EQU 104 ; 104	 68
  1329                                  
  1330                                  ; 09/07/2018 - Retro DOS v3.0
  1331                                  ; (MSDOS 6.0, SYSCALL.INC, 1987)
  1332                                  
  1333                                  ;GetSetMediaID			EQU 105 ; 105	 69
  1334                                  ;IFS_IOCTL			EQU 107 ; 107	 6B
  1335                                  ;ExtOpen 			EQU 108 ; 108	 6C
  1336                                  
  1337                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1338                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1339                                  ;                                                                          ;
  1340                                  ;ifdef ROMEXEC
  1341                                  ;ROM_FIND_FIRST			EQU 109 ; 109    6D
  1342                                  ;ROM_FIND_NEXT			EQU 110 ; 110    6E
  1343                                  ;ROM_EXCLUDE			EQU 111 ; 111	 6F		; M035
  1344                                  ;endif
  1345                                  ;                                                                          ;
  1346                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1347                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1348                                  
  1349                                  SET_OEM_HANDLER			EQU 248 ; 248    F8
  1350                                  ;OEM_C1				EQU 249 ; 249    F9
  1351                                  ;OEM_C2				EQU 250 ; 250    FA
  1352                                  ;OEM_C3				EQU 251 ; 251    FB
  1353                                  ;OEM_C4				EQU 252 ; 252    FC
  1354                                  ;OEM_C5				EQU 253 ; 253    FD
  1355                                  ;OEM_C6				EQU 254 ; 254    FE
  1356                                  ;OEM_C7				EQU 255 ; 255    FF
  1357                                  
  1358                                  ;============================================================================
  1359                                  ; VERSIONA.INC (MSDOS 3.3, 24/07/1987)
  1360                                  ;============================================================================
  1361                                  ; 08/07/2018 - Retro DOS 3.0
  1362                                  
  1363                                  MAJOR_VERSION   EQU     3
  1364                                  MINOR_VERSION   EQU     30
  1365                                  
  1366                                  ;============================================================================
  1367                                  ; DOSSYM_V211.ASM (-*-)
  1368                                  ;============================================================================
  1369                                  
  1370                                  ;DOS_MAJOR_VERSION   EQU      2
  1371                                  ;DOS_MINOR_VERSION   EQU     11
  1372                                  
  1373                                  ;============================================================================
  1374                                  ; INTNAT.INC, MSDOS 3.3, 1987
  1375                                  ;============================================================================
  1376                                  ; 09/07/2018 - Retro DOS 3.0
  1377                                  
  1378                                  ;
  1379                                  ; Current structure of the data returned by the international call
  1380                                  ;
  1381                                  
  1382                                  struc	INTERNAT_BLOCK		; (-*-) Same with MSDOS 2.11 & MSDOS 6.0
  1383                                  .Date_tim_format:
  1384 00000000 ????                    		RESW 1		; 0-USA, 1-EUR, 2-JAP
  1385                                  .Currency_sym:
  1386 00000002 ??????????              		RESB 5		; Currency Symbol 5 bytes
  1387                                  .Thous_sep:
  1388 00000007 ????                    		RESB 2		; Thousands separator 2 bytes
  1389                                  .Decimal_sep:
  1390 00000009 ????                    		RESB 2		; Decimal separator 2 bytes
  1391                                  .Date_sep:
  1392 0000000B ????                    		RESB 2		; Date separator 2 bytes
  1393                                  .Time_sep:
  1394 0000000D ????                    		RESB 2		; Time separator 2 bytes
  1395                                  .Bit_field:	
  1396 0000000F ??                      		RESB 1		; Bit values
  1397                                                                     ;   Bit 0 = 0 if currency symbol first
  1398                                                                     ;         = 1 if currency symbol last
  1399                                                                     ;   Bit 1 = 0 if No space after currency symbol
  1400                                                                     ;         = 1 if space after currency symbol
  1401                                  .Currency_cents:
  1402 00000010 ??                      		RESB 	1	; Number of places after currency dec point
  1403                                  .Time_24:
  1404 00000011 ??                      		RESB 	1	; 1 if 24 hour time, 0 if 12 hour time
  1405                                  .Map_call:
  1406 00000012 ????                    		RESW	1	; Address of case mapping call (DWORD)
  1407 00000014 ????                                    RESW	1       ; THIS IS TWO WORDS SO IT CAN BE INITIALIZED
  1408                                  				;  in pieces.
  1409                                  .Data_sep:
  1410 00000016 ????                    		RESB	2	; Data list separator character
  1411                                  .size:		
  1412                                  endstruc
  1413                                  
  1414                                  ;
  1415                                  ; Max size of the block returned by the INTERNATIONAL call
  1416                                  ;
  1417                                  internat_block_max	EQU	32
  1418                                  
  1419                                  ;============================================================================
  1420                                  ; SYSVAR.INC (MSDOS 6.0, 1991)
  1421                                  ;============================================================================
  1422                                  ; 08/07/2018 - Retro DOS v3.0
  1423                                  
  1424                                  ;SysInitVars STRUC
  1425                                  struc SYSI
  1426 00000000 ????????                .DPB:	    resd 1		; DPB chain
  1427 00000004 ????????                .SFT:	    resd 1		; SFT chain
  1428 00000008 ????????                .CLOCK:	    resd 1		; CLOCK device
  1429 0000000C ????????                .CON:	    resd 1		; CON device
  1430 00000010 ????                    .MAXSEC:    resw 1		; maximum sector size
  1431 00000012 ????????                .BUF:	    resd 1		; points to Hashinitvar
  1432 00000016 ????????                .CDS:	    resd 1		; CDS list
  1433 0000001A ????????                .FCB:	    resd 1		; FCB chain
  1434 0000001E ????                    .Keep:	    resw 1		; keep count
  1435 00000020 ??                      .NUMIO:	    resb 1		; Number of block devices
  1436 00000021 ??                      .NCDS:	    resb 1		; number of CDS's
  1437 00000022 ????????                .DEV:	    resd 1		; device list
  1438                                  ; 09/07/2018
  1439                                  ; Above parameters are described in MSDOS 3.3 SYSVAR.INC (85/04/10)
  1440                                  ; Following parameters are used with MDSOS 6.0 (Retro DOS v4.0)
  1441 00000026 ????                    .ATTR:	    resw 1		; null device attribute word
  1442 00000028 ????                    .STRAT:	    resw 1		; null device strategy entry point
  1443 0000002A ????                    .INTER:	    resw 1		; null device interrupt entry point
  1444 0000002C ????????????????        .NAME:	    resb 8		; null device name
  1445 00000034 ??                      .SPLICE:    resb 1		; TRUE -> splicees being done
  1446 00000035 ????                    .IBMDOS_SIZE: resw 1		; DOS size in paragraphs
  1447 00000037 ????????                .IFS_DOSCALL@: resd 1		; IFS DOS service rountine entry
  1448 0000003B ????????                .IFS:	    resd 1		; IFS header chain
  1449 0000003F ????????                .BUFFERS:   resw 2		; BUFFERS= values (m,n)
  1450 00000043 ??                      .BOOT_DRIVE: resb 1		; boot drive A=1 B=2,..
  1451 00000044 ??                      .DWMOVE:    resb 1		; 1 if 386 machine
  1452 00000045 ????                    .EXT_MEM:   resw 1		; Extended memory size in KB.
  1453                                  endstruc
  1454                                  ;SysInitVars ENDS
  1455                                  
  1456                                  ;This is added for more information exchange between DOS, BIOS.
  1457                                  ;DOS will give the pointer to SysInitTable in ES:DI. - J.K. 5/29/86
  1458                                  
  1459                                  ;SysInitVars_Ext struc
  1460                                  struc SYSI_EXT
  1461 00000000 ????????                .SysInitVars:	resd 1		; Points to the above structure.
  1462 00000004 ????????                .Country_Tab:	resd 1		; DOS_Country_cdpg_info
  1463                                  endstruc
  1464                                  ;SysInitVars_Ext ends
  1465                                  
  1466                                  ;============================================================================
  1467                                  ; IOCTL.INC - MSDOS 6.0 - 1991
  1468                                  ;============================================================================
  1469                                  ; 09/07/2018 - Retro DOS v3.0
  1470                                  
  1471                                  ;*** J.K.
  1472                                  ;General Guide -
  1473                                  ;Category Code:
  1474                                  ; 0... .... DOS Defined
  1475                                  ; 1... .... User defined
  1476                                  ; .xxx xxxx Code
  1477                                  
  1478                                  ;Function Code:
  1479                                  ; 0... .... Return error if unsupported
  1480                                  ; 1... .... Ignore if unsupported
  1481                                  ; .0.. .... Intercepted by DOS
  1482                                  ; .1.. .... Passed to driver
  1483                                  ; ..0. .... Sends data/commands to device
  1484                                  ; ..1. .... Quries data/info from device
  1485                                  ; ...x .... Subfunction
  1486                                  ;
  1487                                  ; Note that "Sends/queries" data bit is intended only to regularize the
  1488                                  ; function set.  It plays no critical role; some functions may contain both
  1489                                  ; command and query elements. The convention is that such commands are
  1490                                  ; defined as "sends data".
  1491                                  
  1492                                  ;*****************************;*
  1493                                  ; BLOCK DRIVERS 	      ;*
  1494                                  ;*****************************;*
  1495                                  
  1496                                  ; IOCTL SUB-FUNCTIONS
  1497                                  ; (MSDOS 3.3 + MSDOS 6.0)
  1498                                  IOCTL_GET_DEVICE_INFO	EQU	0
  1499                                  IOCTL_SET_DEVICE_INFO	EQU	1
  1500                                  IOCTL_READ_HANDLE	EQU	2
  1501                                  IOCTL_WRITE_HANDLE	EQU	3
  1502                                  IOCTL_READ_DRIVE	EQU	4
  1503                                  IOCTL_WRITE_DRIVE	EQU	5
  1504                                  IOCTL_GET_INPUT_STATUS	EQU	6
  1505                                  IOCTL_GET_OUTPUT_STATUS EQU	7
  1506                                  IOCTL_CHANGEABLE?	EQU	8
  1507                                  IOCTL_DeviceLocOrRem?	EQU	9
  1508                                  IOCTL_HandleLocOrRem?	EQU	0Ah   ;10
  1509                                  IOCTL_SHARING_RETRY	EQU	0Bh   ;11
  1510                                  GENERIC_IOCTL_HANDLE	EQU	0Ch   ;12
  1511                                  GENERIC_IOCTL		EQU	0Dh   ;13
  1512                                  ; (MSDOS 6.0 + MSDOS 3.3)
  1513                                  IOCTL_GET_DRIVE_MAP 	EQU	0Eh   ;14
  1514                                  IOCTL_SET_DRIVE_MAP	EQU	0Fh   ;15
  1515                                  ; (MSDOS 6.0)
  1516                                  IOCTL_QUERY_HANDLE	EQU	10h   ;16
  1517                                  IOCTL_QUERY_BLOCK	EQU	11h   ;17
  1518                                  
  1519                                  ; GENERIC IOCTL CATEGORY CODES
  1520                                  IOC_OTHER		EQU	0	; Other device control J.K. 4/29/86
  1521                                  IOC_SE			EQU	1	; SERIAL DEVICE CONTROL
  1522                                  IOC_TC			EQU	2	; TERMINAL CONTROL
  1523                                  IOC_SC			EQU	3	; SCREEN CONTROL
  1524                                  IOC_KC			EQU	4	; KEYBOARD CONTROL
  1525                                  IOC_PC			EQU	5	; PRINTER CONTROL
  1526                                  IOC_DC			EQU	8	; DISK CONTROL (SAME AS RAWIO)
  1527                                  
  1528                                  ; GENERIC IOCTL SUB-FUNCTIONS
  1529                                  RAWIO			EQU	8
  1530                                  
  1531                                  ; RAWIO SUB-FUNCTIONS
  1532                                  ; (MSDOS 3.3 + MSDOS 6.0)
  1533                                  GET_DEVICE_PARAMETERS	EQU	60H
  1534                                  SET_DEVICE_PARAMETERS	EQU	40H
  1535                                  READ_TRACK		EQU	61H
  1536                                  WRITE_TRACK		EQU	41H
  1537                                  VERIFY_TRACK		EQU	62H
  1538                                  FORMAT_TRACK		EQU	42H
  1539                                  ; (MSDOS 6.0)
  1540                                  GET_MEDIA_ID		EQU	66h	;AN000;AN003;changed from 63h
  1541                                  SET_MEDIA_ID		EQU	46h	;AN000;AN003;changed from 43h
  1542                                  GET_ACCESS_FLAG 	EQU	67h	;AN002;AN003;Unpublished function.Changed from 64h
  1543                                  SET_ACCESS_FLAG 	EQU	47h	;AN002;AN003;Unpublished function.Changed from 44h
  1544                                  SENSE_MEDIA_TYPE	EQU	68H	;Added for 5.00
  1545                                  
  1546                                  ; SPECIAL FUNCTION FOR GET DEVICE PARAMETERS
  1547                                  BUILD_DEVICE_BPB	EQU	000000001B
  1548                                  
  1549                                  ; SPECIAL FUNCTIONS FOR SET DEVICE PARAMETERS
  1550                                  INSTALL_FAKE_BPB	EQU	000000001B
  1551                                  ONLY_SET_TRACKLAYOUT	EQU	000000010B
  1552                                  TRACKLAYOUT_IS_GOOD	EQU	000000100B
  1553                                  
  1554                                  ; SPECIAL FUNCTION FOR FORMAT TRACK
  1555                                  ; (MSDOS 3.3 + MSDOS 6.0)
  1556                                  STATUS_FOR_FORMAT	EQU	000000001B
  1557                                  ; (MSDOS 6.0)
  1558                                  DO_FAST_FORMAT		EQU	000000010B ;AN001;
  1559                                  
  1560                                  ; CODES RETURNED FROM FORMAT STATUS CALL
  1561                                  FORMAT_NO_ROM_SUPPORT	EQU	000000001B
  1562                                  FORMAT_COMB_NOT_SUPPORTED EQU	000000010B
  1563                                  
  1564                                  ; DEVICETYPE VALUES
  1565                                  ; (MSDOS 3.3 + MSDOS 6.0)
  1566                                  MAX_SECTORS_IN_TRACK	EQU	63	; MAXIMUM SECTORS ON A DISK.(Was 40 in DOS 3.2)
  1567                                  DEV_5INCH		EQU	0
  1568                                  DEV_5INCH96TPI		EQU	1
  1569                                  DEV_3INCH720KB		EQU	2
  1570                                  DEV_8INCHSS		EQU	3
  1571                                  DEV_8INCHDS		EQU	4
  1572                                  DEV_HARDDISK		EQU	5
  1573                                  DEV_OTHER		EQU	7
  1574                                  ; (MSDOS 6.0)
  1575                                  ;DEV_3INCH1440KB	EQU	7
  1576                                  DEV_3INCH2880KB		EQU	9
  1577                                  ; Retro DOS v2.0 - 26/03/2018
  1578                                  ;;DEV_TAPE		EQU	6
  1579                                  ;;DEV_ERIMO		EQU	8
  1580                                  ;DEV_3INCH2880KB	EQU	9
  1581                                  DEV_3INCH1440KB		EQU	10
  1582                                  
  1583                                  ; (MSDOS 3.3)
  1584                                  ;MAX_DEV_TYPE		EQU	7
  1585                                  
  1586                                  ; (MSDOS 6.0)
  1587                                  MAX_DEV_TYPE		EQU	10	; MAXIMUM DEVICE TYPE THAT WE
  1588                                  					; CURRENTLY SUPPORT.
  1589                                  
  1590                                  struc A_SECTORTABLE
  1591 00000000 ????                    .ST_SECTORNUMBER:	resw	1
  1592 00000002 ????                    .ST_SECTORSIZE:		resw	1
  1593                                  .size:
  1594                                  endstruc
  1595                                  
  1596                                  ;============================================================================
  1597                                  ; DEVSYM.ASM
  1598                                  ;============================================================================
  1599                                  
  1600                                  ;SUBTTL DEVICE TABLE AND SRH DEFINITION
  1601                                  ;PAGE
  1602                                  
  1603                                  ; 07/07/2018 - Retro DOS v3.0
  1604                                  ; (DEVSYM.INC, MSDOS 6.0, 1991)
  1605                                  
  1606                                  ;**	DevSym.inc - Device Symbols
  1607                                  
  1608                                  ; The device table list has the form:
  1609                                  struc	SYSDEV
  1610 00000000 ????????                .NEXT:		resd 1		;Pointer to next device header
  1611 00000004 ????                    .ATT:		resw 1		;Attributes of the device
  1612 00000006 ????                    .STRAT:		resw 1		;Strategy entry point
  1613 00000008 ????                    .INT:		resw 1		;Interrupt entry point
  1614 0000000A ????????????????        .NAME:		resb 8		;Name of device (only first byte used for block)
  1615                                  .size:
  1616                                  endstruc
  1617                                  
  1618                                  ;
  1619                                  ; ATTRIBUTE BIT MASKS
  1620                                  ;
  1621                                  ; CHARACTER DEVICES:
  1622                                  ;
  1623                                  ; BIT 15 -> MUST BE 1
  1624                                  ;     14 -> 1 IF THE DEVICE UNDERSTANDS IOCTL CONTROL STRINGS
  1625                                  ;     13 -> 1 IF THE DEVICE SUPPORTS OUTPUT-UNTIL-BUSY
  1626                                  ;     12 -> UNUSED
  1627                                  ;     11 -> 1 IF THE DEVICE UNDERSTANDS OPEN/CLOSE
  1628                                  ;     10 -> MUST BE 0
  1629                                  ;      9 -> MUST BE 0
  1630                                  ;      8 -> UNUSED
  1631                                  ;      7 -> UNUSED
  1632                                  ;      6 -> UNUSED
  1633                                  ;      5 -> UNUSED
  1634                                  ;      4 -> 1 IF DEVICE IS RECIPIENT OF INT 29H
  1635                                  ;      3 -> 1 IF DEVICE IS CLOCK DEVICE
  1636                                  ;      2 -> 1 IF DEVICE IS NULL DEVICE
  1637                                  ;      1 -> 1 IF DEVICE IS CONSOLE OUTPUT
  1638                                  ;      0 -> 1 IF DEVICE IS CONSOLE INPUT
  1639                                  ;
  1640                                  ; BLOCK DEVICES:
  1641                                  ;
  1642                                  ; BIT 15 -> MUST BE 0
  1643                                  ;     14 -> 1 IF THE DEVICE UNDERSTANDS IOCTL CONTROL STRINGS
  1644                                  ;     13 -> 1 IF THE DEVICE DETERMINES MEDIA BY EXAMINING THE FAT ID BYTE.
  1645                                  ;	    THIS REQUIRES THE FIRST SECTOR OF THE FAT TO *ALWAYS* RESIDE IN
  1646                                  ;	    THE SAME PLACE.
  1647                                  ;     12 -> UNUSED
  1648                                  ;     11 -> 1 IF THE DEVICE UNDERSTANDS OPEN/CLOSE/REMOVABLE MEDIA
  1649                                  ;     10 -> MUST BE 0
  1650                                  ;      9 -> MUST BE 0
  1651                                  ;      8 -> UNUSED
  1652                                  ;      7 -> UNUSED
  1653                                  ;      6 -> IF DEVICE HAS SUPPORT FOR GETMAP/SETMAP OF LOGICAL DRIVES.
  1654                                  ;	    IF THE DEVICE UNDERSTANDS GENERIC IOCTL FUNCTION CALLS.
  1655                                  ;      5 -> UNUSED
  1656                                  ;      4 -> UNUSED
  1657                                  ;      3 -> UNUSED
  1658                                  ;      2 -> UNUSED
  1659                                  ;      1 -> UNUSED
  1660                                  ;      0 -> UNUSED
  1661                                  ;
  1662                                  
  1663                                  ;Attribute bit masks
  1664                                  DEVTYP  EQU     8000H           ;Bit 15 - 1  if Char, 0 if block
  1665                                  DEVIOCTL EQU    4000H           ;Bit 14 - CONTROL mode bit
  1666                                  ISFATBYDEV EQU  2000H           ;Bit 13 - Device uses FAT ID bytes, comp media.
  1667                                  
  1668                                  ; 09/07/2018 - Retro DOS
  1669                                  ; (DEVSYM.INC, MSDOS 3.3, 1987) 
  1670                                  
  1671                                  OUTTILBUSY EQU	2000H		; OUTPUT UNTIL BUSY IS ENABLED
  1672                                  ISNET	   EQU	1000H		; BIT 12 - 1 IF A NET DEVICE, 0 IF
  1673                                  				;  NOT.  CURRENTLY BLOCK ONLY.
  1674                                  DEVOPCL    EQU	0800H		; BIT 11 - 1 IF THIS DEVICE HAS
  1675                                  				;  OPEN,CLOSE AND REMOVABLE MEDIA
  1676                                  				;  ENTRY POINTS, 0 IF NOT
  1677                                  
  1678                                  EXTENTBIT  EQU	0400H		; BIT 10 - CURRENTLY 0 ON ALL DEVS
  1679                                  				;  THIS BIT IS RESERVED FOR FUTURE USE
  1680                                  				;  TO EXTEND THE DEVICE HEADER BEYOND
  1681                                  				;  ITS CURRENT FORM.
  1682                                  
  1683                                  ; NOTE BIT 9 IS CURRENTLY USED ON IBM SYSTEMS TO INDICATE "DRIVE IS SHARED".
  1684                                  ;    SEE IOCTL FUNCTION 9. THIS USE IS NOT DOCUMENTED, IT IS USED BY SOME
  1685                                  ;    OF THE UTILITIES WHICH ARE SUPPOSED TO FAIL ON SHARED DRIVES ON SERVER
  1686                                  ;    MACHINES (FORMAT,CHKDSK,RECOVER,..).
  1687                                  
  1688                                  DEV320	EQU	0040H		;BIT 6 - FOR BLOCK DEVICES, THIS
  1689                                  				;DEVICE SUPPORTS SET/GET MAP OF
  1690                                  				;LOGICAL DRIVES, AND SUPPORTS
  1691                                  				;GENERIC IOCTL CALLS.
  1692                                  				;FOR CHARACTER DEVICES, THIS
  1693                                  				;DEVICE SUPPORTS GENERIC IOCTL.
  1694                                  				;THIS IS A DOS 3.2 DEVICE DRIVER.
  1695                                  
  1696                                  ISSPEC	EQU     0010H		;Bit 4 - This device is special ; 15/03/2018
  1697                                  ;ISIBM	EQU     0010H		;Bit 4 - This device is special
  1698                                  ISCLOCK EQU     0008H           ;Bit 3 - This device is the clock device.
  1699                                  ISNULL  EQU     0004H           ;Bit 2 - This device is the null device.
  1700                                  ISCOUT  EQU     0002H           ;Bit 1 - This device is the console output.
  1701                                  ISCIN   EQU     0001H           ;Bit 0 - This device is the console input.
  1702                                  
  1703                                  ;Static Reguest Header
  1704                                  struc	SRHEAD
  1705 00000000 ??                      .REQLEN:	resb 1		;Length in bytes of request block
  1706 00000001 ??                      .REQUNIT:	resb 1		;Device unit number
  1707 00000002 ??                      .REQFUNC:	resb 1		;Type of request
  1708 00000003 ????                    .REQSTAT:	resw 1		;Status Word
  1709 00000005 ????????????????                	resb 8		;Reserved for queue links
  1710                                  .size:
  1711                                  endstruc
  1712                                  
  1713                                  ;Status word masks
  1714                                  STERR   EQU     8000H           ;Bit 15 - Error
  1715                                  STBUI   EQU     0200H           ;Bit 9 - Buisy
  1716                                  STDON   EQU     0100H           ;Bit 8 - Done
  1717                                  STECODE EQU     00FFH           ;Error code
  1718                                  WRECODE EQU     0
  1719                                  
  1720                                  ;Function codes
  1721                                  DEVINIT EQU     0               ;Initialization
  1722                                  DINITHL EQU     26              ;Size of init header
  1723                                  DEVMDCH EQU     1               ;Media check
  1724                                  DMEDHL  EQU     15              ;Size of media check header
  1725                                  DEVBPB  EQU     2               ;Get BPB
  1726                                  DEVRDIOCTL EQU  3               ;IOCTL read
  1727                                  DBPBHL  EQU     22              ;Size of Get BPB header
  1728                                  DEVRD   EQU     4               ;Read
  1729                                  DRDWRHL EQU     22              ;Size of RD/WR header
  1730                                  DEVRDND EQU     5               ;Non destructive read no wait (character devs)
  1731                                  DRDNDHL EQU     14              ;Size of non destructive read header
  1732                                  DEVIST  EQU     6               ;Input status
  1733                                  DSTATHL EQU     13              ;Size of status header
  1734                                  DEVIFL  EQU     7               ;Input flush
  1735                                  DFLSHL  EQU     15              ;Size of flush header
  1736                                  DEVWRT  EQU     8               ;Write
  1737                                  DEVWRTV EQU     9               ;Write with verify
  1738                                  DEVOST  EQU     10              ;Output status
  1739                                  DEVOFL  EQU     11              ;Output flush
  1740                                  DEVWRIOCTL EQU  12              ;IOCTL write
  1741                                  
  1742                                  ; 09/07/2018 - Retro DOS v3.0
  1743                                  ; (DEVSYM.INC, MSDOS 3.3, 1987) 
  1744                                  
  1745                                  DEVOPN	EQU	13		;DEVICE OPEN
  1746                                  DEVCLS	EQU	14		;DEVICE CLOSE
  1747                                  DOPCLHL EQU	13		;SIZE OF OPEN/CLOSE HEADER
  1748                                  DEVRMD	EQU	15		;REMOVABLE MEDIA
  1749                                  ; 07/08/2018 - Retro DOS v3.0
  1750                                  REMHL	EQU	13		;SIZE OF REMOVABLE MEDIA HEADER
  1751                                  GENIOCTL EQU	19
  1752                                  
  1753                                  ; THE NEXT THREE ARE USED IN DOS 4.0
  1754                                  ;		     20
  1755                                  ;		     21
  1756                                  ;		     22
  1757                                  DEVGETOWN      EQU   23		;GET DEVICE OWNER
  1758                                  DEVSETOWN      EQU   24		;SET DEVICE OWNER
  1759                                  OWNHL	       EQU   13		;SIZE OF DEVICE OWNER HEADER
  1760                                  
  1761                                  DEVOUT	       EQU   16		; OUTPUT UNTIL BUSY.
  1762                                  DEVOUTL        EQU   DEVWRT	; LENGTH OF OUTPUT UNTIL BUSY
  1763                                  
  1764                                  ; GENERIC IOCTL REQUEST STRUCTURE
  1765                                  ;	SEE THE DOS 4.0 DEVICE DRIVER SPEC FOR FURTHER ELABORATION.
  1766                                  ;
  1767                                  
  1768                                  struc IOCTL_REQ
  1769 00000000 <res Dh>                .SRHEAD:	resb SRHEAD.size
  1770                                  				; GENERIC IOCTL ADDITION.
  1771 0000000D ??                      .MAJORFUNCTION: resb 1		;FUNCTION CODE
  1772 0000000E ??                      .MINORFUNCTION: resb 1		;FUNCTION CATEGORY
  1773 0000000F ????                    .REG_SI:	resw 1
  1774 00000011 ????                    .REG_DI:	resw 1
  1775 00000013 ????????                .GENERICIOCTL_PACKET: resd 1	; POINTER TO DATA BUFFER
  1776                                  .size: ; 07/08/2018
  1777                                  endstruc
  1778                                  
  1779                                  ; DEFINITIONS FOR IOCTL_REQ.MINORFUNCTION
  1780                                  GEN_IOCTL_WRT_TRK EQU	40H
  1781                                  GEN_IOCTL_RD_TRK  EQU	60H
  1782                                  GEN_IOCTL_FN_TST  EQU	20H	; USED TO DIFF. BET READS AND WRTS
  1783                                  
  1784                                  ;============================================================================
  1785                                  ; ERROR.INC (MSDOS 6.0, 1991)
  1786                                  ;============================================================================
  1787                                  ; 16/07/2018 - Retro DOS v3.0 
  1788                                  
  1789                                  ;**	ERROR.INC - DOS Error Codes
  1790                                  ;
  1791                                  ;    The newer (DOS 2.0 and above) "XENIX-style" calls
  1792                                  ;    return error codes through AX. If an error occurred then
  1793                                  ;    the carry bit will be set and the error code is in AX. If no error
  1794                                  ;    occurred then the carry bit is reset and AX contains returned info.
  1795                                  ;
  1796                                  ;    Since the set of error codes is being extended as we extend the operating
  1797                                  ;    system, we have provided a means for applications to ask the system for a
  1798                                  ;    recommended course of action when they receive an error.
  1799                                  ;
  1800                                  ;    The GetExtendedError system call returns a universal error, an error
  1801                                  ;    location and a recommended course of action. The universal error code is
  1802                                  ;    a symptom of the error REGARDLESS of the context in which GetExtendedError
  1803                                  ;    is issued.
  1804                                  
  1805                                  
  1806                                  ;	2.0 error codes
  1807                                  
  1808                                  error_invalid_function		EQU	1
  1809                                  error_file_not_found		EQU	2
  1810                                  error_path_not_found		EQU	3
  1811                                  error_too_many_open_files	EQU	4
  1812                                  error_access_denied		EQU	5
  1813                                  error_invalid_handle		EQU	6
  1814                                  error_arena_trashed		EQU	7
  1815                                  error_not_enough_memory 	EQU	8
  1816                                  error_invalid_block		EQU	9
  1817                                  error_bad_environment		EQU	10
  1818                                  error_bad_format		EQU	11
  1819                                  error_invalid_access		EQU	12
  1820                                  error_invalid_data		EQU	13
  1821                                  ;**** reserved			EQU	14	; *****
  1822                                  error_invalid_drive		EQU	15
  1823                                  error_current_directory 	EQU	16
  1824                                  error_not_same_device		EQU	17
  1825                                  error_no_more_files		EQU	18
  1826                                  
  1827                                  ;	These are the universal int 24 mappings for the old INT 24 set of errors
  1828                                  
  1829                                  error_write_protect		EQU	19
  1830                                  error_bad_unit			EQU	20
  1831                                  error_not_ready 		EQU	21
  1832                                  error_bad_command		EQU	22
  1833                                  error_CRC			EQU	23
  1834                                  error_bad_length		EQU	24
  1835                                  error_seek			EQU	25
  1836                                  error_not_DOS_disk		EQU	26
  1837                                  error_sector_not_found		EQU	27
  1838                                  error_out_of_paper		EQU	28
  1839                                  error_write_fault		EQU	29
  1840                                  error_read_fault		EQU	30
  1841                                  error_gen_failure		EQU	31
  1842                                  
  1843                                  ;	the new 3.0 error codes reported through INT 24
  1844                                  
  1845                                  error_sharing_violation 	EQU	32
  1846                                  error_lock_violation		EQU	33
  1847                                  error_wrong_disk		EQU	34
  1848                                  error_FCB_unavailable		EQU	35
  1849                                  error_sharing_buffer_exceeded	EQU	36
  1850                                  error_Code_Page_Mismatched	EQU	37    ; DOS 4.00  ;AN000;
  1851                                  error_handle_EOF		EQU	38    ; DOS 4.00  ;AN000;
  1852                                  error_handle_Disk_Full		EQU	39    ; DOS 4.00  ;AN000;
  1853                                  
  1854                                  ;	New OEM network-related errors are 50-79
  1855                                  
  1856                                  error_not_supported		EQU	50
  1857                                  
  1858                                  error_net_access_denied		EQU	65	;M028
  1859                                  
  1860                                  ;	End of INT 24 reportable errors
  1861                                  
  1862                                  error_file_exists		EQU	80
  1863                                  error_DUP_FCB			EQU	81	; *****
  1864                                  error_cannot_make		EQU	82
  1865                                  error_FAIL_I24			EQU	83
  1866                                  
  1867                                  ;	New 3.0 network related error codes
  1868                                  
  1869                                  error_out_of_structures 	EQU	84
  1870                                  error_already_assigned		EQU	85
  1871                                  error_invalid_password		EQU	86
  1872                                  error_invalid_parameter 	EQU	87
  1873                                  error_NET_write_fault		EQU	88
  1874                                  error_sys_comp_not_loaded	EQU	90    ; DOS 4.00  ;AN000;
  1875                                  
  1876                                  ;	BREAK <Interrupt 24 error codes>
  1877                                  
  1878                                  ;**	Int24 Error Codes
  1879                                  
  1880                                  error_I24_write_protect 	EQU	0
  1881                                  error_I24_bad_unit		EQU	1
  1882                                  error_I24_not_ready		EQU	2
  1883                                  error_I24_bad_command		EQU	3
  1884                                  error_I24_CRC			EQU	4
  1885                                  error_I24_bad_length		EQU	5
  1886                                  error_I24_Seek			EQU	6
  1887                                  error_I24_not_DOS_disk		EQU	7
  1888                                  error_I24_sector_not_found	EQU	8
  1889                                  error_I24_out_of_paper		EQU	9
  1890                                  error_I24_write_fault		EQU	0Ah
  1891                                  error_I24_read_fault		EQU	0Bh
  1892                                  error_I24_gen_failure		EQU	0Ch
  1893                                  ; NOTE: Code 0DH is used by MT-DOS.
  1894                                  error_I24_wrong_disk		EQU	0Fh
  1895                                  
  1896                                  ;	THE FOLLOWING ARE MASKS FOR THE AH REGISTER ON Int 24
  1897                                  ;
  1898                                  ;	NOTE: ABORT is ALWAYS allowed
  1899                                  
  1900                                  Allowed_FAIL			EQU	00001000B
  1901                                  Allowed_RETRY			EQU	00010000B
  1902                                  Allowed_IGNORE			EQU	00100000B
  1903                                  
  1904                                  I24_operation			EQU	00000001B  ;Z if READ,NZ if Write
  1905                                  I24_area			EQU	00000110B  ; 00 if DOS
  1906                                  						   ; 01 if FAT
  1907                                  						   ; 10 if root DIR
  1908                                  						   ; 11 if DATA
  1909                                  I24_class			EQU	10000000B  ;Z if DISK, NZ if FAT or char
  1910                                  
  1911                                  ;	BREAK <GetExtendedError CLASSes ACTIONs LOCUSs>
  1912                                  
  1913                                  ;**	The GetExtendedError call takes an error code and returns CLASS,
  1914                                  ;	ACTION and LOCUS codes to help programs determine the proper action
  1915                                  ;	to take for error codes that they don't explicitly understand.
  1916                                  
  1917                                  ;	Values for error CLASS
  1918                                  
  1919                                  errCLASS_OutRes 	EQU	1	; Out of Resource
  1920                                  errCLASS_TempSit	EQU	2	; Temporary Situation
  1921                                  errCLASS_Auth		EQU	3	; Permission problem
  1922                                  errCLASS_Intrn		EQU	4	; Internal System Error
  1923                                  errCLASS_HrdFail	EQU	5	; Hardware Failure
  1924                                  errCLASS_SysFail	EQU	6	; System Failure
  1925                                  errCLASS_Apperr 	EQU	7	; Application Error
  1926                                  errCLASS_NotFnd 	EQU	8	; Not Found
  1927                                  errCLASS_BadFmt 	EQU	9	; Bad Format
  1928                                  errCLASS_Locked 	EQU	10	; Locked
  1929                                  errCLASS_Media		EQU	11	; Media Failure
  1930                                  errCLASS_Already	EQU	12	; Collision with Existing Item
  1931                                  errCLASS_Unk		EQU	13	; Unknown/other
  1932                                  
  1933                                  ;	Values for error ACTION
  1934                                  
  1935                                  errACT_Retry		EQU	1	; Retry
  1936                                  errACT_DlyRet		EQU	2	; Delay Retry, retry after pause
  1937                                  errACT_User		EQU	3	; Ask user to regive info
  1938                                  errACT_Abort		EQU	4	; abort with clean up
  1939                                  errACT_Panic		EQU	5	; abort immediately
  1940                                  errACT_Ignore		EQU	6	; ignore
  1941                                  errACT_IntRet		EQU	7	; Retry after User Intervention
  1942                                  
  1943                                  ;	Values for error LOCUS
  1944                                  
  1945                                  errLOC_Unk		EQU	1	; No appropriate value
  1946                                  errLOC_Disk		EQU	2	; Random Access Mass Storage
  1947                                  errLOC_Net		EQU	3	; Network
  1948                                  errLOC_SerDev		EQU	4	; Serial Device
  1949                                  errLOC_Mem		EQU	5	; Memory
  1950                                  
  1951                                  ;============================================================================
  1952                                  ; MULT.INC (MSDOS 3.3, 1987)
  1953                                  ;============================================================================
  1954                                  
  1955                                  ;Break <Critical section and Multiplex channels>
  1956                                  
  1957                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1958                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  1959                                  ;									   ;
  1960                                  ; Critical section definitions
  1961                                  ;
  1962                                  ; These below are subject to leave-all sections
  1963                                  critDisk    EQU     1			; Disk I/O critical section
  1964                                  critDevice  EQU     2			; Device I/O critical section
  1965                                  critShare   EQU     1			; Sharer I/O critical section
  1966                                  critMem     EQU     1			; memory maintenance critical section
  1967                                  critNet     EQU     5			; network critical section
  1968                                  critSFT     EQU     1			; sft table allocation
  1969                                  ; These below are not subject to leave-all sections
  1970                                  critASSIGN  EQU     8			; Assign has munged a system call
  1971                                  ;									   ;
  1972                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  1973                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1974                                  
  1975                                  ;
  1976                                  ; The current set of defined multiplex channels is (* means documented):
  1977                                  ;
  1978                                  ;   Channel(h)	Issuer		Receiver    Function
  1979                                  ;      00	server		PSPRINT     print job control
  1980                                  ;     *01	print/apps	PRINT	    Queueing of files
  1981                                  ;      02	BIOS		REDIR	    signal open/close of printers
  1982                                  ;
  1983                                  ;      05	command 	REDIR	    obtain text of net int 24 message
  1984                                  ;     *06	server/assign	ASSIGN	    Install check
  1985                                  ;
  1986                                  ;      08	external driver IBMBIO	    interface to internal routines
  1987                                  ;
  1988                                  ;      10	sharer/server	Sharer	    install check
  1989                                  ;      11	DOS/server	Redir	    install check/redirection funcs
  1990                                  ;      12	sharer/redir	DOS	    dos functions and structure maint
  1991                                  ;      13	MSNET		MSNET	    movement of NCBs
  1992                                  ;      14	DOS		NLSFUNC     down load NLS country info,DOS 3.3
  1993                                  ;      14	Apps		Popup	    DOS 4.XX popup screen functions
  1994                                  ;	  ***> NOTE <***  Yes there are 2 users of 14h but since DOS 4.XX
  1995                                  ;			  doesn't use NLSFUNC, there is no conflict
  1996                                  ;      15	Apps		MSCDEX	    CD-ROM redirector interface
  1997                                  ;      16	Winoldap (?)	WIN386	    Private Windows communication
  1998                                  ;      17	Winoldap (?)	WIN386	    Win386 clipboard interface
  1999                                  ;      18	Apps		MS-Manager  Toggle interface to manager
  2000                                  ;      19,(13h) external driver IBMBIO	    Reset_Int_13, allows installation
  2001                                  ;					    of alternative INT_13 drivers after
  2002                                  ;					    boot_up
  2003                                  ;      B0	GRAFTABL	GRAFTABL
  2004                                  ;
  2005                                  
  2006                                  MultSHARE   EQU     10h 		; sharer
  2007                                      ;	1   MFT_enter
  2008                                      ;	2   MFTClose
  2009                                      ;	3   MFTclU
  2010                                      ;	4   MFTCloseP
  2011                                      ;	5   MFTCloN
  2012                                      ;	6   set_block
  2013                                      ;	7   clr_block
  2014                                      ;	8   chk_block
  2015                                      ;	9   MFT_get
  2016                                      ;	10  ShSave
  2017                                      ;	11  ShChk
  2018                                      ;	12  ShCol
  2019                                      ;	13  ShCloseFile
  2020                                  
  2021                                  MultNET     EQU     11h 		; Network support
  2022                                      ;	1   NET_RMDIR
  2023                                      ;	2   NET_SEQ_RMDIR
  2024                                      ;	3   NET_MKDIR
  2025                                      ;	4   NET_SEQ_MKDIR
  2026                                      ;	5   NET_CHDIR
  2027                                      ;	6   NET_CLOSE
  2028                                      ;	7   NET_COMMIT
  2029                                      ;	8   NET_READ
  2030                                      ;	9   NET_WRITE
  2031                                      ;	10  NET_LOCK
  2032                                      ;	11  NET_UNLOCK
  2033                                      ;	12  NET_DISK_INFO
  2034                                      ;	13  NET_SET_FILE_ATTRIBUTE
  2035                                      ;	14  NET_SEQ_SET_FILE_ATTRIBUTE
  2036                                      ;	15  NET_GET_FILE_INFO
  2037                                      ;	16  NET_SEQ_GET_FILE_INFO
  2038                                      ;	17  NET_RENAME
  2039                                      ;	18  NET_SEQ_RENAME
  2040                                      ;	19  NET_DELETE
  2041                                      ;	20  NET_SEQ_DELETE
  2042                                      ;	21  NET_OPEN
  2043                                      ;	22  NET_SEQ_OPEN
  2044                                      ;	23  NET_CREATE
  2045                                      ;	24  NET_SEQ_CREATE
  2046                                      ;	25  NET_SEQ_SEARCH_FIRST
  2047                                      ;	26  NET_SEQ_SEARCH_NEXT
  2048                                      ;	27  NET_SEARCH_FIRST
  2049                                      ;	28  NET_SEARCH_NEXT
  2050                                      ;	29  NET_ABORT
  2051                                      ;	30  NET_ASSOPER
  2052                                      ;	31  Printer_SET_STRING
  2053                                      ;	32  NetFlushBuf
  2054                                      ;	33  NetBufWrite
  2055                                      ;	34  NetResetEnvironment
  2056                                      ;	35  NetSpoolCheck
  2057                                      ;	36  NetSpoolClose
  2058                                  
  2059                                  MultDOS     EQU     12h 		; DOS call back
  2060                                      ;	1   DOS_CLOSE
  2061                                      ;	2   RECSET
  2062                                      ;	3   Get DOSGROUP
  2063                                      ;	4   PATHCHRCMP
  2064                                      ;	5   OUT
  2065                                      ;	6   NET_I24_ENTRY
  2066                                      ;	7   PLACEBUF
  2067                                      ;	8   FREE_SFT
  2068                                      ;	9   BUFWRITE
  2069                                      ;	10  SHARE_VIOLATION
  2070                                      ;	11  SHARE_ERROR
  2071                                      ;	12  SET_SFT_MODE
  2072                                      ;	13  DATE16
  2073                                      ;	14  SETVISIT
  2074                                      ;	15  SCANPLACE
  2075                                      ;	16  SKIPVISIT
  2076                                      ;	17  StrCpy
  2077                                      ;	18  StrLen
  2078                                      ;	19  UCase
  2079                                      ;	20  POINTCOMP
  2080                                      ;	21  CHECKFLUSH
  2081                                      ;	22  SFFromSFN
  2082                                      ;	23  GetCDSFromDrv
  2083                                      ;	24  Get_User_Stack
  2084                                      ;	25  GetThisDrv
  2085                                      ;	26  DriveFromText
  2086                                      ;	27  SETYEAR
  2087                                      ;	28  DSUM
  2088                                      ;	29  DSLIDE
  2089                                      ;	30  StrCmp
  2090                                      ;	31  initcds
  2091                                      ;	32  pjfnfromhandle
  2092                                      ;	33  $NameTrans
  2093                                      ;	34  CAL_LK
  2094                                      ;	35  DEVNAME
  2095                                      ;	36  Idle
  2096                                      ;
  2097                                  NLSFUNC     EQU     14h 		; NLSFUNC CALL , DOS 3.3
  2098                                      ;	0   NLSInstall
  2099                                      ;	1   ChgCodePage
  2100                                      ;	2   GetExtInfo
  2101                                      ;	3   SetCodePage
  2102                                      ;	4   GetCntry
  2103                                      ;
  2104                                  ;FASTOPEN is not chained through INT 2F   ; DOS 3.3 F.C.
  2105                                  ;	  it calls Multdos 42 to set up an entry routine address
  2106                                      ;	0   Install status  (reserved)
  2107                                      ;	1   Lookup
  2108                                      ;	2   Insert
  2109                                      ;	3   Delete
  2110                                      ;	4   Purge	    (reserved)
  2111                                  
  2112                                  ;============================================================================
  2113                                  ; FIND.INC (MSDOS 3.3, 1987)
  2114                                  ;============================================================================
  2115                                  ; 09/07/2018 - Retro DOS v3.0
  2116                                  
  2117                                  ;Break	<find first/next buffer>
  2118                                  
  2119                                  struc find_buf
  2120 00000000 ??                      .drive:	    resb 1		; drive of search
  2121 00000001 <res Bh>                .name:	    resb 11		; formatted name
  2122 0000000C ??                      .sattr:	    resb 1		; attribute of search
  2123 0000000D ????                    .LastEnt:   resw 1		; LastEnt
  2124 0000000F ????                    .DirStart:  resw 1		; DirStart
  2125 00000011 ??                      .attr:	    resb 1		; attribute found
  2126 00000012 ????                    .time:	    resw 1		; time
  2127 00000014 ????                    .date:	    resw 1		; date
  2128 00000016 ????                    .size_l:    resw 1		; low(size)
  2129 00000018 ????                    .size_h:    resw 1		; high(size)
  2130 0000001A <res Dh>                .pname:	    resb 13		; packed name
  2131                                  .size:
  2132                                  endstruc
  2133                                  
  2134                                  ;============================================================================
  2135                                  ; DOSCNTRY.INC (MSDOS 3.3, 1987)
  2136                                  ;============================================================================
  2137                                  ; 09/07/2018 - Retro DOS v3.0
  2138                                  
  2139                                  ;Equates for COUNTRY INFORMATION.
  2140                                  SetCountryInfo	EQU	1	;country info
  2141                                  SetUcase	EQU	2	;uppercase table
  2142                                  SetLcase	EQU	3	;lowercase table (Reserved)
  2143                                  SetUcaseFile	EQU	4	;uppercase file spec table
  2144                                  SetFileList	EQU	5	;valid file character list
  2145                                  SetCollate	EQU	6	;collating sequence
  2146                                  SetDBCS 	EQU	7	;double byte character set
  2147                                  SetALL		EQU	-1	;all the entries
  2148                                  
  2149                                  
  2150                                  ;DOS country and code page information table structure.
  2151                                  ;Internally, IBMDOS gives a pointer to this table.
  2152                                  ;IBMBIO, MODE and NLSFUNC modules communicate with IBMDOS through
  2153                                  ;this structure.
  2154                                  struc  DOS_CCDPG	; DOS_country_cdpg_info
  2155 00000000 ????????????????        .ccInfo_reserved: 	resb 8	;reserved for internal use
  2156 00000008 <res 40h>               .ccPath_CountrySys:	resb 64 ;path and filename for country info
  2157 00000048 ????                    .ccSysCodePage:		resw 1	;system code page id
  2158 0000004A ????                    .ccNumber_of_entries:	resw 1  ; (default value = 5)
  2159 0000004C ??                      .ccSetUcase:		resb 1  ; (default value = SetUcase)
  2160 0000004D ????????                .ccUcase_ptr:		resd 1	;pointer to Ucase table
  2161                                  
  2162 00000051 ??                      .ccSetUcaseFile:	resb 1	; (default value = SetUcaseFile)
  2163 00000052 ????????                .ccFileUcase_ptr: 	resd 1	;pointer to File Ucase table
  2164                                  
  2165 00000056 ??                      .ccSetFileList:		resb 1 	; (default value = SetFileList)
  2166 00000057 ????????                .ccFileChar_ptr:	resd 1	;pointer to File char list table
  2167                                  
  2168 0000005B ??                      .ccSetCollate:		resb 1	; (default value = SetCollate)
  2169 0000005C ????????                .ccCollate_ptr:		resd 1	;pointer to collate table
  2170                                  
  2171 00000060 ??                      .ccSetCountryInfo:	resb 1  ; (default value = SetCountryInfo)
  2172 00000061 ????                    .ccCountryInfoLen:	resw 1	;length of country info
  2173 00000063 ????                    .ccDosCountry:		resw 1	;system country code id
  2174 00000065 ????                    .ccDosCodePage:		resw 1	;system code page id
  2175 00000067 ????                    .ccDFormat:		resw 1	;date format
  2176 00000069 ??????????              .ccCurSymbol:		resb 5	;5 byte of (currency symbol+0)
  2177 0000006E ????                    .cc1000Sep:		resb 2	;2 byte of (1000 sep. + 0)
  2178 00000070 ????                    .ccDecSep:		resb 2	;2 byte of (Decimal sep. + 0)
  2179 00000072 ????                    .ccDateSep:		resb 2	;2 byte of (date sep. + 0)
  2180 00000074 ????                    .ccTimeSep:		resb 2	;2 byte of (time sep. + 0)
  2181 00000076 ??                      .ccCFormat:		resb 1	;currency format flags
  2182 00000077 ??                      .ccCSigDigits:		resb 1	;# of digits in currency
  2183 00000078 ??                      .ccTFormat:		resb 1	;time format
  2184 00000079 ????????                .ccMono_Ptr:		resd 1	;monocase routine entry point
  2185 0000007D ????                    .ccListSep:		resb 2	;data list separator
  2186 0000007F <res Ah>                .ccReserved_area: 	resw 5	;reserved
  2187                                  .size:
  2188                                  endstruc
  2189                                  
  2190                                  ;Ucase table
  2191                                  struc CC_UCASE_TAB
  2192 00000000 ????                    .ccUcase_leng:		resw 1	; (default value = 128)
  2193 00000002 <res 80h>               .ccUcase_data:		resb 128
  2194                                  endstruc
  2195                                  
  2196                                  ;File Ucase table
  2197                                  struc CC_FILE_UCASE_TAB
  2198 00000000 ????                    .ccFileucase_leng:	resw 1	; (default value = 128)
  2199 00000002 <res 80h>               .ccFileucase_data:	resb 128
  2200                                  endstruc
  2201                                  
  2202                                  ;File char list
  2203                                  struc CC_FILE_CHAR_TAB
  2204 00000000 ????                    .ccFilechar_leng:	resw 1
  2205 00000002 <res 2Eh>               .ccFilechar_data:	resb 46
  2206                                  endstruc
  2207                                  
  2208                                  ;collate table
  2209                                  struc CC_COLLATE_TAB
  2210 00000000 ????                    .ccCollate_leng:	resw 1	; (default value = 128)
  2211 00000002 <res 100h>              .ccCollate_data:	resb 256
  2212                                  endstruc
  2213                                  
  2214                                  OLD_COUNTRY_SIZE  equ	(DOS_CCDPG.size - DOS_CCDPG.ccDFormat - 10)
  2215                                  NEW_COUNTRY_SIZE  equ	(DOS_CCDPG.size - DOS_CCDPG.ccDosCountry) 
  2216                                  
  2217                                  ; 06/08/2018
  2218                                  ; DOSCNTRY.INC (MSDOS 6.0, 1991)
  2219                                  
  2220                                  ;CAPITALIZATION equates
  2221                                  CAP_ONE_CHAR	equ	20H
  2222                                  CAP_STRING	equ	21H
  2223                                  CAP_ASCIIZ	equ	22H
  2224                                  CHECK_YES_NO	equ	23H
  2225                                  UPPER_TABLE	equ	80H
  2226                                  
  2227                                  ;NLS_YES	equ	59H  ; 'Y'
  2228                                  ;NLS_yes2	equ	79H  ; 'y' 	
  2229                                  ;NLS_NO		equ	4EH  ; 'N'	
  2230                                  ;NLS_no2	equ	6EH  ; 'n'	
  2231                                  
  2232                                  ;============================================================================
  2233                                  ; CURDIR.INC (MSDOS 3.3, 1987)
  2234                                  ;============================================================================
  2235                                  ; 09/07/2018 - Retro DOS v3.0
  2236                                  
  2237                                  ;BREAK <Current directory list structure>
  2238                                  
  2239                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2240                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2241                                  ;									   ;
  2242                                  ; CDS items are used bu the internal routines to store cluster numbers and ;
  2243                                  ; network identifiers for each logical name.  The ID field is used dually, ;
  2244                                  ; both as net ID and for a cluster number for local devices.  In the case  ;
  2245                                  ; of local devices, the cluster number will be -1 if there is a potential  ;
  2246                                  ; of the disk being changed or if the path must be recracked.  The END	   ;
  2247                                  ; field is the location of the end of the definition.  No .. is allowed    ;
  2248                                  ; past this point							   ;
  2249                                  
  2250                                  DIRSTRLEN	EQU	64+3		; Max length in bytes of directory strings
  2251                                  TEMPLEN 	EQU	DIRSTRLEN*2
  2252                                  
  2253                                  struc curdir	; curdir_list
  2254 00000000 <res 43h>               .text:		resb DIRSTRLEN		; text of assignment and curdir
  2255 00000043 ????                    .flags:		resw 1			; various flags
  2256 00000045 ????????                .devptr:	resd 1			; local pointer to DPB or net device
  2257 00000049 ????                    .ID:		resw 1			; cluster of current dir (net ID)
  2258 0000004B ????                    		resw 1
  2259 0000004D ????                    .user_word:	resw 1
  2260 0000004F ????                    .end:		resw 1			; end of assignment
  2261                                  .size:
  2262                                  endstruc
  2263                                  
  2264                                  curdirLen	EQU curdir.size		; Needed for screwed up
  2265                                  
  2266                                  %define curdir_netID curdir_ID  ; dword
  2267                                  
  2268                                  ;Flag word masks
  2269                                  curdir_isnet	EQU	1000000000000000B
  2270                                  curdir_inuse	EQU	0100000000000000B
  2271                                  curdir_splice	EQU	0010000000000000B
  2272                                  curdir_local	EQU	0001000000000000B
  2273                                  ;									   ;
  2274                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2275                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2276                                  
  2277                                  ;============================================================================
  2278                                  ; CPMFCB.INC (MSDOS 3.3, 1987)
  2279                                  ;============================================================================
  2280                                  ; 09/07/2018 - Retro DOS v3.0
  2281                                  
  2282                                  ;BREAK <File Control Block definition>
  2283                                  
  2284                                  ;
  2285                                  ; Field definition for FCBs
  2286                                  ; The FCB has the following structure:
  2287                                  ;
  2288                                  ;	+---------------------------+
  2289                                  ;	|   Drive indicator(byte)   |
  2290                                  ;	+---------------------------+
  2291                                  ;	|    Filename (8 chars)     |
  2292                                  ;	+---------------------------+
  2293                                  ;	|    Extension (3 chars)    |
  2294                                  ;	+---------------------------+
  2295                                  ;	|   Current Extent(word)    |
  2296                                  ;	+---------------------------+
  2297                                  ;	|    Record size (word)     |
  2298                                  ;	+---------------------------+
  2299                                  ;	|    File Size (2 words)    |
  2300                                  ;	+---------------------------+
  2301                                  ;	|	Date of write	    |
  2302                                  ;	+---------------------------+
  2303                                  ;	|	Time of write	    |
  2304                                  ;	+---------------------------+
  2305                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2306                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2307                                  ;									   ;
  2308                                  ;	+---------------------------+
  2309                                  ;	|   8 bytes reserved	    |
  2310                                  ;	+---------------------------+
  2311                                  ;									   ;
  2312                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2313                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2314                                  ;	|    next record number     |
  2315                                  ;	+---------------------------+
  2316                                  ;	|   random record number    |
  2317                                  ;	+---------------------------+
  2318                                  ;
  2319                                  
  2320                                  struc	SYS_FCB
  2321 00000000 ??                      .drive:	resb 1
  2322 00000001 ????????????????        .name:	resb 8
  2323 00000009 ??????                  .ext:	resb 3
  2324 0000000C ????                    .EXTENT: resw 1
  2325 0000000E ????                    .RECSIZ: resw 1			; Size of record (user settable)
  2326 00000010 ????                    .FILSIZ: resw 1			; Size of file in bytes; used with the
  2327                                  				; following word
  2328 00000012 ????                    .DRVBP:	resw 1			; BP for SEARCH FIRST and SEARCH NEXT
  2329 00000014 ????                    .FDATE:	resw 1			; Date of last writing
  2330 00000016 ????                    .FTIME:	resw 1			; Time of last writing
  2331                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2332                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2333                                  ;									   ;
  2334 00000018 ????????????????        .reserved: resb 8		; RESERVED
  2335                                  ;									   ;
  2336                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2337                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2338 00000020 ??                      .NR:	resb 1			; Next record
  2339 00000021 ????????                .RR:	resb 4			; Random record
  2340                                  endstruc
  2341                                  
  2342                                  FILDIRENT EQU SYS_FCB.FILSIZ	; Used only by SEARCH FIRST and SEARCH
  2343                                  				; NEXT
  2344                                  ; 20/07/2018
  2345                                  %define fcb_sfn	SYS_FCB.reserved ; byte
  2346                                  
  2347                                  ; Note that fcb_net_handle, fcb_nsl_drive, fcb_nsld_drive and fcb_l_drive
  2348                                  ; all must point to the same byte.  Otherwise, the FCBRegen will fail.
  2349                                  ; NOTE about this byte (fcb_nsl_drive)
  2350                                  ;   The high two bits of this byte are used as follows to indicate the FCB type
  2351                                  ;	00 means a local file or device with sharing loaded
  2352                                  ;	10 means a remote (network) file
  2353                                  ;	01 means a local file with no sharing loaded
  2354                                  ;	11 means a local device with no sharing loaded
  2355                                  
  2356                                  ; 20/07/2018
  2357                                  
  2358                                  ;
  2359                                  ; Network FCB
  2360                                  ;
  2361                                  
  2362                                  %define fcb_net_drive	SYS_FCB.reserved+1  ; byte
  2363                                  %define fcb_net_handle	SYS_FCB.reserved+2  ; word
  2364                                  %define fcb_netID	SYS_FCB.reserved+4  ; dword		
  2365                                  
  2366                                  ;
  2367                                  ; No sharing local file FCB
  2368                                  ;
  2369                                  
  2370                                  %define fcb_nsl_drive	SYS_FCB.reserved+1  ; byte
  2371                                  %define fcb_nsl_bits	SYS_FCB.reserved+2  ; byte	
  2372                                  %define fcb_nsl_firclus SYS_FCB.reserved+3  ; word	
  2373                                  %define fcb_nsl_dirsec	SYS_FCB.reserved+5  ; word
  2374                                  %define fcb_nsl_dirpos  SYS_FCB.reserved+7  ; byte
  2375                                  
  2376                                  ;
  2377                                  ; No sharing local device FCB
  2378                                  ;
  2379                                  
  2380                                  %define fcb_nsld_drive	SYS_FCB.reserved+1  ; byte	
  2381                                  %define fcb_nsld_drvptr SYS_FCB.reserved+2  ; dword
  2382                                  
  2383                                  ;
  2384                                  ; Sharing local FCB
  2385                                  ;
  2386                                  
  2387                                  %define fcb_l_drive	SYS_FCB.reserved+1  ; byte
  2388                                  %define fcb_l_firclus	SYS_FCB.reserved+2  ; word
  2389                                  %define fcb_l_mfs	SYS_FCB.reserved+4  ; word
  2390                                  %define fcb_l_attr	SYS_FCB.reserved+6  ; byte
  2391                                  
  2392                                  ;
  2393                                  ; Bogusness:  the four cases are:
  2394                                  ;
  2395                                  ;   local file	    00
  2396                                  ;   local device    40
  2397                                  ;   local sharing   C0
  2398                                  ;   network	    80
  2399                                  ;
  2400                                  ; Since sharing and network collide, we cannot use a test instruction for
  2401                                  ; deciding whether a network or a share check in involved
  2402                                  ;
  2403                                  FCBDEVICE   EQU 040h
  2404                                  FCBNETWORK  EQU 080h
  2405                                  FCBSHARE    EQU 0C0h
  2406                                  
  2407                                  ; FCBSPECIAL must be able to mask off both net and share
  2408                                  FCBSPECIAL  EQU 080h
  2409                                  FCBMASK     EQU 0C0h
  2410                                  
  2411                                  ;============================================================================
  2412                                  ; FASTOPEN.INC, MSDOS 6.0, 1991
  2413                                  ;============================================================================
  2414                                  ; 11/07/2018 - Retro DOS v3.0
  2415                                  
  2416                                  struc	FEI	; FASTOPEN_EXTENDED_INFO
  2417 00000000 ??                      .dirpos:	resb 1
  2418                                  ;.dirsec:	resd 1 ; MSDOS 6.0
  2419 00000001 ????                    .dirsec:	resw 1 ; MSDOS 3.3
  2420 00000003 ????                    .clusnum:	resw 1
  2421                                  ;.lastent:	resw 1	; for search first ; MSDOS 6.0
  2422                                  ;.dirstart:	resw 1	; for search first ; MSDOS 6.0
  2423                                  .size:
  2424                                  endstruc
  2425                                  
  2426                                  ; 23/07/2018
  2427                                  ;FASTOPEN NAME CACHING Subfunctions
  2428                                  FONC_Look_up	equ	1
  2429                                  FONC_insert	equ	2
  2430                                  FONC_delete	equ	3
  2431                                  FONC_update	equ	4
  2432                                  FONC_purge	equ	5	;reserved for the future use.
  2433                                  FONC_Rename	equ	6	;AN001
  2434                                  
  2435                                  ; 27/07/2018
  2436                                  ;FastOpen Data Structure
  2437                                  struc fastopen_entry	;Fastopen Entry pointer in DOS
  2438 00000000 ????                    .entry_size:	resw 1	; = 4	; size of the following
  2439 00000002 ????????                .name_caching:	resd 1
  2440                                  ; MSDOS 6.0
  2441                                  ;.fatchain_caching: resd 1	;reserved for future use
  2442                                  .size:
  2443                                  endstruc
  2444                                  
  2445                                  ; 27/07/2018
  2446                                  ;Equates used in DOS.
  2447                                  FastOpen_Set	       equ     00000001b
  2448                                  FastOpen_Reset	       equ     11111110b
  2449                                  Lookup_Success	       equ     00000010b
  2450                                  Lookup_Reset	       equ     11111101b
  2451                                  Special_Fill_Set       equ     00000100b
  2452                                  Special_Fill_Reset     equ     11111011b
  2453                                  No_Lookup	       equ     00001000b
  2454                                  Set_For_Search	       equ     00010000b	;DCR 167
  2455                                  
  2456                                  ; 09/08/2018 
  2457                                  ; (FASTXXXX.INC, MSDOS 6.0, 1991)
  2458                                  ; Fastxxx equates
  2459                                  FastOpen_ID	   equ	   1
  2460                                  FastSeek_ID	   equ	   2
  2461                                  Fast_yes	   equ	   10000000B	 ; fastxxx flag
  2462                                  
  2463                                  ;Structure definitions
  2464                                  ;
  2465                                  struc Fasttable_Entry	 ; Fastxxx  Entry pointer in DOS
  2466 00000000 ????                    .Fast_Entry_Num: resw 1	 ; number of entries
  2467 00000002 ????????                .FastOpen_Seek:	 resd 1	 ; fastopen & fastseek entry address
  2468                                  endstruc
  2469                                  
  2470                                  ;============================================================================
  2471                                  ; LOCK.INC, MSDOS 6.0, 1991
  2472                                  ;============================================================================
  2473                                  ; 14/07/2018 - Retro DOS v3.0
  2474                                  
  2475                                  ;**	LOCK.INC - Definitions for Record Locking
  2476                                  
  2477                                  ;**	LOCK functions
  2478                                  
  2479                                  LOCK_ALL	    equ    0
  2480                                  UNLOCK_ALL	    equ    1
  2481                                  LOCK_MUL_RANGE	    equ    2
  2482                                  UNLOCK_MUL_RANGE    equ    3
  2483                                  LOCK_READ	    equ    4
  2484                                  WRITE_UNLOCK	    equ    5
  2485                                  LOCK_ADD	    equ    6
  2486                                  
  2487                                  ;**	Structure for Lock buffer
  2488                                  
  2489                                  struc LockBuf
  2490 00000000 ????????                .Lock_position:	resd 1		; file position for LOCK
  2491 00000004 ????????                .Lock_length:	resd 1		; number of bytes to LOCK
  2492                                  endstruc
  2493                                  
  2494                                  ;============================================================================
  2495                                  ; DPL.ASM, MSDOS 6.0, 1991
  2496                                  ;============================================================================
  2497                                  ; 04/08/2018 - Retro DOS v3.0
  2498                                  
  2499                                  ; (SRVCALL.ASM)
  2500                                  
  2501                                  struc DPL
  2502 00000000 ????                    .AX:	resw	1	; AX register
  2503 00000002 ????                    .BX:	resw	1	; BX register
  2504 00000004 ????                    .CX:	resw	1	; CX register
  2505 00000006 ????                    .DX:	resw	1	; DX register
  2506 00000008 ????                    .SI:	resw	1	; SI register
  2507 0000000A ????                    .DI:	resw	1	; DI register
  2508 0000000C ????                    .DS:	resw	1	; DS register
  2509 0000000E ????                    .ES:	resw	1	; ES register
  2510 00000010 ????                    .rsrvd: resw	1	; Reserved
  2511 00000012 ????                    .UID:	resw	1	; User (Machine) ID (0 = local macine)
  2512 00000014 ????                    .PID:	resw	1	; Process ID (0 = local user PID)
  2513                                  .size:
  2514                                  endstruc
  2515                                   
  2516                                  ;============================================================================
  2517                                  ; MSDATA.ASM
  2518                                  ;============================================================================
  2519                                  ;============================================================================
  2520                                  ; MS_DATA.ASM (MSDOS 6.0, 1991) (1)
  2521                                  ;============================================================================
  2522                                  ; 16/07/2018 - Retro DOS 3.0	
  2523                                  
  2524                                  ;Break <Uninitialized data overlayed by initialization code>
  2525                                  
  2526                                  ;DOSDATA    SEGMENT WORD PUBLIC 'DATA'
  2527                                  ; Init code overlaps with data area below
  2528                                  
  2529                                  		; Offset 0358h in IBMDOS.COM (MSDOS 3.3)
  2530                                  
  2531                                  ;	I_am    TIMEBUF,6               ; Time read from clock device
  2532                                  ;	I_am    DEVIOBUF,2              ; Buffer for I/O under file assignment
  2533                                  
  2534                                  TIMEBUF		EQU 	DATASEGMENT	; Offset 0358h (in IBMDOS.COM 3.3)
  2535                                  DEVIOBUF	EQU	TIMEBUF+6
  2536                                  ;
  2537                                  ; The following areas are used as temp buffer in EXEC system call
  2538                                  ;
  2539                                  ;       I_am    OPENBUF,128             ; buffer for name operations
  2540                                  ;       I_am    RenBuf,128              ; buffer for rename destination
  2541                                  
  2542                                  OPENBUF		EQU	DEVIOBUF+2	; DATASEGMENT+8 
  2543                                  RENBUF		EQU	OPENBUF+128	; DATASEGMENT+136
  2544                                  
  2545                                  ; Buffer for search calls
  2546                                  ;        I_am    SEARCHBUF,53		; internal search buffer
  2547                                  ;        I_am    DummyCDS,curdirLen
  2548                                  
  2549                                  SEARCHBUF	EQU	RENBUF+128	; DATASEGMENT+264
  2550                                  DUMMYCDS	EQU	SEARCHBUF+53	; DATASEGMENT+317 
  2551                                  						; Offset 495h in MSDOS 3.3
  2552                                  ;
  2553                                  ; End of contiguous buffer
  2554                                  ;
  2555                                  
  2556                                  ; Temporary directory entry for use by many routines.  Device directory
  2557                                  ; entries (bogus) are built here.
  2558                                  ;
  2559                                  ;        PUBLIC  DevFCB
  2560                                  ;DEVFCB  LABEL   BYTE                    ; Uses NAME1, NAME2, combined
  2561                                  ; WARNING.. do not alter position of NAME1 relative to DEVFCB
  2562                                  ; without first examining BUILD_DEVICE_ENT. Look carefully at DOS_RENAME
  2563                                  ; as well as it is the only guy who uses NAME2 and DESTSTART.
  2564                                  
  2565                                  DEVFCB		EQU	DUMMYCDS+curdirLen ; DATASEGMENT+398
  2566                                  
  2567                                  ;	I_am    NAME1,12                ; File name buffer
  2568                                  ;       I_am    NAME2,13                ;
  2569                                  ;	I_am    DESTSTART,WORD          ;
  2570                                  ;	DB      ((SIZE DIR_ENTRY) - ($ - DEVFCB)) DUP (?)
  2571                                  
  2572                                  NAME1		EQU	DEVFCB		; Offset 04E6h in IBMDOS.COM 3.3
  2573                                  NAME2		EQU	NAME1+12	; DATASEGMENT+410
  2574                                  DESTSTART	EQU	NAME2+13	; DATASEGMENT+423
  2575                                  
  2576                                  ;
  2577                                  ; End Temporary directory entry.
  2578                                  ;
  2579                                  
  2580                                  ;       I_am    ATTRIB,BYTE             ; storage for file attributes
  2581                                  ;	I_am    EXTFCB,BYTE             ; TRUE => extended FCB in use
  2582                                  
  2583                                  ATTRIB		EQU	DEVFCB + dir_entry.size ; Offset 0506h
  2584                                  	; Offset 0507h in IBMDOS.COM (MSDOS 3.3) 
  2585                                  EXTFCB		EQU	ATTRIB+1	; DATASEGMENT+431
  2586                                  
  2587                                  ;       I_am    SATTRIB,BYTE            ; Storage for search attributes
  2588                                  ;       I_AM    open_access,BYTE        ; access of open system call
  2589                                  ;       I_am    FoundDel,BYTE           ; true => file was deleted
  2590                                  ;       I_am    Found_dev,BYTE          ; true => search found a device
  2591                                  ;       I_am    fSplice,BYTE            ; true => do a splice in transpath
  2592                                  ;       I_am    fSharing,BYTE           ; TRUE => no redirection
  2593                                  ;       I_am    SECCLUSPOS,BYTE         ; Position of first sector within cluster
  2594                                  ;       I_am    TRANS,BYTE              ;
  2595                                  ;       I_am    READOP,BYTE             ;
  2596                                  ;       I_am    THISDRV,BYTE            ;
  2597                                  ;       I_am    CLUSFAC,BYTE            ;
  2598                                  ;       I_am    CLUSSPLIT,BYTE          ;
  2599                                  ;       I_am    INSMODE,BYTE            ; true => insert mode in buffered read
  2600                                  ;       I_am    cMeta,BYTE              ; count of meta'ed components found
  2601                                  ;       I_am    VOLID,BYTE              ;
  2602                                  ;       I_am    exit_type,BYTE          ; type of exit...
  2603                                  
  2604                                  SATTRIB		EQU	EXTFCB+1	; DATASEGMENT+432
  2605                                  OPEN_ACCESS	EQU	SATTRIB+1	; DATASEGMENT+433
  2606                                  FOUNDDEL	EQU	OPEN_ACCESS+1	; DATASEGMENT+434
  2607                                  FOUND_DEV	EQU	FOUNDDEL+1	; DATASEGMENT+435
  2608                                  FSPLICE		EQU	FOUND_DEV+1	; DATASEGMENT+436
  2609                                  FSHARING	EQU	FSPLICE+1	; DATASEGMENT+437
  2610                                  SECCLUSPOS	EQU	FSHARING+1	; DATASEGMENT+438
  2611                                  TRANS		EQU	SECCLUSPOS+1	; DATASEGMENT+439
  2612                                  READOP		EQU	TRANS+1		; DATASEGMENT+440	
  2613                                  THISDRV		EQU	READOP+1	; DATASEGMENT+441
  2614                                  CLUSFAC		EQU	THISDRV+1	; DATASEGMENT+442
  2615                                  CLUSSPLIT	EQU	CLUSFAC+1	; DATASEGMENT+443
  2616                                  INSMODE		EQU	CLUSSPLIT+1	; DATASEGMENT+444
  2617                                  CMETA		EQU	INSMODE+1	; DATASEGMENT+445
  2618                                  VOLID		EQU	CMETA+1		; DATASEGMENT+446
  2619                                  EXIT_TYPE	EQU	VOLID+1		; DATASEGMENT+447
  2620                                          
  2621                                  ;	EVEN
  2622                                  
  2623                                  ; WARNING - the following two items are accessed as a word
  2624                                  
  2625                                  ;	I_am    CREATING,BYTE           ; true => creating a file
  2626                                  ;	I_am	DELALL,BYTE		; = 0 iff BUGBUG
  2627                                  ;					; = DIRFREE iff BUGBUG
  2628                                  ;	I_am    EXITHOLD,DWORD          ; Temp location for proc terminate
  2629                                  ;	I_am    user_SP,WORD            ; User SP for system call
  2630                                  ;	I_am    user_SS,WORD            ; User SS for system call
  2631                                  ;	I_am    CONTSTK,WORD            ;
  2632                                  ;	I_am    THISDPB,DWORD           ;
  2633                                  ;	I_am    CLUSSAVE,WORD           ;
  2634                                  ; MSDOS 3.3
  2635                                  ;	I_am    CLUSSEC,WORD		;	
  2636                                  ;; MSDOS 6.0
  2637                                  ;;	I_am    CLUSSEC,DWORD           ;>32mb         ; AC0000
  2638                                  
  2639                                  	; Offset 0518h in IBMDOS.COM (MSDOS 3.3) 
  2640                                  
  2641                                  CREATING	EQU	EXIT_TYPE+1 	; DATASEGMENT+448
  2642                                  	; (End of 'MOVDPB' (in MSINIT) - Offset 0519h (just after 'retf'))
  2643                                  DELALL		EQU	CREATING+1	; DATASEGMENT+449
  2644                                  EXITHOLD	EQU	DELALL+1	; DATASEGMENT+450
  2645                                  USER_SP		EQU	EXITHOLD+4	; DATASEGMENT+454
  2646                                  USER_SS		EQU	USER_SP+2	; DATASEGMENT+456
  2647                                  CONTSTK		EQU	USER_SS+2	; DATASEGMENT+458	
  2648                                  THISDPB		EQU	CONTSTK+2	; DATASEGMENT+460
  2649                                  CLUSSAVE	EQU	THISDPB+4	; DATASEGMENT+464
  2650                                  CLUSSEC		EQU	CLUSSAVE+2	; Offset 052Ah ; DATASEGENT+466
  2651                                  
  2652                                  ;       I_am    PREREAD,WORD            ; 0 means preread; 1 means optional
  2653                                  ;       I_am    FATBYT,WORD             ; Used by ALLOCATE
  2654                                  ;       I_am    FATBYTE,WORD            ; Used by $SLEAZEFUNC
  2655                                  ;       I_am    DEVPT,DWORD             ;
  2656                                  ;       I_am    THISSFT,DWORD           ; Address of user SFT
  2657                                  ;       I_am    THISCDS,DWORD           ; Address of current CDS
  2658                                  ;       I_am    THISFCB,DWORD           ; Address of user FCB
  2659                                  
  2660                                  ; MSDOS 3.3
  2661                                  PREREAD		EQU	CLUSSEC+2	; OffseT 052Ch ; DATASEGMENT+468
  2662                                  
  2663                                  ; MSDOS 6.0
  2664                                  ; PREREAD	EQU	CLUSSEC+4
  2665                                  
  2666                                  FATBYT		EQU	PREREAD+2	; DATASEGMENT+470
  2667                                  FATBYTE		EQU	FATBYT+2	; Offset 0530h ; DATASEGMENT+472
  2668                                  DEVPT		EQU	FATBYTE+2	; DATASEGMENT+474	
  2669                                  THISSFT		EQU	DEVPT+4		; Offset 0536h ; DATASEGMENT+478
  2670                                  THISCDS		EQU	THISSFT+4	; DATASEGMENT+482	
  2671                                  THISFCB		EQU	THISCDS+4	; DATASEGMENT+486
  2672                                  
  2673                                  ; DATASEGMENT+490 :  ; *!!!*
  2674                                  	; Here is offset 0542h in IBMDOS.COM, 1987 (MSDOS 3.3 kernel) 
  2675                                  ;SFN		EQU	THISFCB+4	; DATASEGMENT + 0542h - 0358h
  2676                                  
  2677                                  ;       I_am    SFN,WORD,<-1>           ; SystemFileNumber found for accessfile
  2678                                  ;       I_am    JFN,WORD                ; JobFileNumber found for accessfile
  2679                                  ;       I_am    PJFN,DWORD              ; PointerJobFileNumber found for accessfile
  2680                                  ;       I_am    WFP_START,WORD          ;
  2681                                  ;       I_am    REN_WFP,WORD            ;
  2682                                  ;       I_am    CURR_DIR_END,WORD       ;
  2683                                  ;       I_am    NEXTADD,WORD            ;
  2684                                  ;       I_am    LASTPOS,WORD            ;
  2685                                  ;       I_am    CLUSNUM,WORD            ;
  2686                                  ;       I_am    DIRSEC,DWORD            ;>32mb 		; AC0000
  2687                                  ;       I_am    DIRSTART,WORD           ;
  2688                                  ;       I_am    SECPOS,DWORD		;>32mb Position of first sector accessed
  2689                                  ;       I_am    VALSEC,DWORD		;>32mb Number of valid (previously written)
  2690                                  ;                                       ; sectors
  2691                                  ;       I_am    BYTSECPOS,WORD          ; Position of first byte within sector
  2692                                  ;       I_am    BYTPOS,4                ; Byte position in file of access
  2693                                  ;       I_am    BYTCNT1,WORD            ; No. of bytes in first sector
  2694                                  ;       I_am    BYTCNT2,WORD            ; No. of bytes in last sector
  2695                                  ;       I_am    SECCNT,WORD             ; No. of whole sectors
  2696                                  ;       I_am    ENTFREE,WORD            ;
  2697                                  ;       I_am    ENTLAST,WORD            ;
  2698                                  ;       I_am    NXTCLUSNUM,WORD         ;
  2699                                  ;       I_am    GROWCNT,DWORD           ;
  2700                                  ;       I_am    CURBUF,DWORD            ;
  2701                                  ;       I_am    CONSft,DWORD            ; SFT of console swapped guy.
  2702                                  ;       I_am    SAVEBX,WORD             ;
  2703                                  ;       I_am    SAVEDS,WORD             ;
  2704                                  ;       I_am    restore_tmp,WORD        ; return address for restore world
  2705                                  ;       I_am    NSS,WORD
  2706                                  ;       I_am    NSP,WORD	
  2707                                  
  2708                                  ;	....  [ MS_DATA.ASM (MSDOS 6.0, 1991) (2) ] ; $$$
  2709                                  
  2710                                  ;DOSDATA ENDS
  2711                                  
  2712                                  ;============================================================================
  2713                                  ; MSHEAD.ASM
  2714                                  ;============================================================================
  2715                                  
  2716                                  [BITS 16]
  2717                                  [ORG 0]
  2718                                  
  2719                                  START:
  2720 00000000 E97E73                          JMP     DOSINIT
  2721                                  
  2722                                  ;============================================================================
  2723                                  ; MSHEAD.ASM (MSDOS 6.0, 1991)
  2724                                  ;============================================================================
  2725                                  ; 16/07/2018 - Retro DOS 3.0
  2726                                  
  2727                                  	; MSDOS 6.0
  2728                                  ;	dw	PARASTART	; PARASTART = 3DE0h for MSDOS 6.0, 6.22
  2729                                  ;BioDataSeg:
  2730                                  ;	dw	0070h		; Bios data segment fixed at 70h
  2731                                  
  2732                                  	; MSDOS 3.3
  2733 00000003 0000                    	dw	0
  2734 00000005 00                      	db	0 ; 12/08/2018
  2735 00000006 42554720                	db	"BUG "
  2736 0000000A 0000                    	dw	0
  2737 0000000C 0000                    	dw	0
  2738                                  
  2739                                  ;============================================================================
  2740                                  ; MSCONST.ASM (MSDOS 6.0, 1991)
  2741                                  ;============================================================================
  2742                                  ; 16/07/2018 - Retro DOS 3.0	
  2743                                  
  2744                                  	; MSDOS 3.3
  2745                                  MYNUM:			; Offset 000Eh
  2746 0000000E 0000                    	dw	0	
  2747                                  FCBLRU: 
  2748 00000010 0000                    	dw	0
  2749                                  OpenLRU:
  2750 00000012 0000                    	dw	0
  2751                                  OEM_HANDLER: 		; Pointer to OEM handler code	
  2752 00000014 FFFFFFFF                	dd	-1
  2753                                  LeaveAddr:
  2754                                  	;dd	LeaveDOS
  2755 00000018 [BC15]                  	dw	LeaveDOS ; 12/08/2018
  2756                                  RetryCount:		; Share retries
  2757 0000001A 0300                    	dw	3
  2758                                  RetryLoop:
  2759 0000001C 0100                    	dw	1
  2760                                  LastBuffer:
  2761 0000001E FFFFFFFF                	dd	-1	; Buffer queue recency pointer
  2762                                  CONTPOS:
  2763 00000022 0000                    	dw	0	; location in buffer of next read
  2764                                  arena_head:
  2765 00000024 0000                    	dw	0	; Segment # of first arena in memory
  2766                                  
  2767                                  ;; 16/07/2018
  2768                                  ;;****************************************************************************
  2769                                  ;; NOTE: INT 21H AH=52H !  (http://stanislavs.org/helppc/int_21-52.html)
  2770                                  ;;****************************************************************************
  2771                                  ;; INT 21,52 - Get Pointer to DOS "INVARS" (Undocumented)
  2772                                  ;;
  2773                                  ;;	AH = 52h
  2774                                  ;;
  2775                                  ;;	on return:
  2776                                  ;;	ES:BX = pointer to DOS "invars", a table of pointers used by DOS.
  2777                                  ;;		Known "invars" fields follow (varies with DOS version):
  2778                                  ;;
  2779                                  ;;	Offset Size		 Description
  2780                                  ;;
  2781                                  ;;	 -12   word   sharing retry count (DOS 3.1-3.3)
  2782                                  ;;	 -10   word   sharing retry delay  (DOS 3.1-3.3)
  2783                                  ;;	  -8   dword  pointer to current disk buffer (DOS 3.x)
  2784                                  ;;	  -4   word   pointer in DOS code segment of unread CON input;
  2785                                  ;;		      0 indicates no unread input (DOS 3.x)
  2786                                  ;;	  -2   word   segment of first Memory Control Block (MCB)
  2787                                  ;;	  00   dword  pointer to first DRIVE PARAMETER TABLE (A:) in chain
  2788                                  ;;	  04   dword  pointer to DOS System File Table (SFT)
  2789                                  ;;	  08   dword  pointer to $CLOCK device driver
  2790                                  ;;	  0C   dword  pointer to CON device driver
  2791                                  ;;	  10   byte   number of logical drives in system
  2792                                  ;;	  11   word   maximum bytes/block of any block device
  2793                                  ;;	  13   dword  pointer to DOS cache buffer header
  2794                                  ;;	  17 18bytes  NUL device header, first 4 bytes of device header
  2795                                  ;;		      point to the next device in device chain
  2796                                  ;;
  2797                                  ;;****************************************************************************
  2798                                  
  2799                                  ; The following block of data is used by SYSINIT.  Do not change the order or
  2800                                  ; size of this block
  2801                                  
  2802                                  
  2803                                  ; The following block of data is used by SYSINIT. 
  2804                                  ; Do not change the order or size of this block
  2805                                  
  2806                                  ;SYSINITVAR:
  2807                                  SYSINITVARS:
  2808                                  DPBHEAD:
  2809 00000026 00000000                	dd	0	; Pointer to head of DPB-FAT list
  2810                                  SFT_ADDR:
  2811 0000002A [98000000]              	dd	SFTABL	; Pointer to first SFT table
  2812                                  BCLOCK:
  2813 0000002E 00000000                	dd	0	; The CLOCK device
  2814                                  BCON:
  2815 00000032 00000000                	dd	0	; Console device entry points
  2816                                  MAXSEC:
  2817 00000036 8000                    	dw	128	; Maximum allowed sector size
  2818                                  BUFFHEAD:
  2819 00000038 00000000                	dd	0	; Pointer to head of buffer queue
  2820                                  CDSADDR:
  2821 0000003C 00000000                	dd	0	; Pointer to curdir structure table
  2822                                  SFTFCB:
  2823 00000040 00000000                	dd	0	; pointer to FCB cache table
  2824                                  KEEPCOUNT:
  2825 00000044 0000                    	dw	0	; count of FCB opens to keep
  2826                                  NUMIO:
  2827 00000046 00                      	db	0	; Number of disk tables
  2828                                  CDSCOUNT:
  2829 00000047 00                      	db	0	; Number of CDS structures in above
  2830                                  ; A fake header for the NUL device
  2831                                  NULDEV:
  2832 00000048 00000000                	dd	0	; Link to rest of device list
  2833                                  	;dw	8004h
  2834 0000004C 0480                    	dw	DEVTYP | ISNULL	; Null device attributes
  2835 0000004E [2C16]                  	dw	SNULDEV	; Strategy entry point
  2836 00000050 [3216]                  	dw	INULDEV	; Interrupt entry point
  2837 00000052 4E554C2020202020        	db	"NUL     " ; Name of null device
  2838                                  SPLICES:
  2839 0000005A 00                      	db	0	; TRUE => splices being done
  2840                                  
  2841                                  	; MSDOS 6.0 
  2842                                  ;Special_Entries:
  2843                                  ;	dw	0	; address of special entries	;AN000;
  2844                                  ;UU_IFS_DOS_CALL:
  2845                                  ;	dd	0	; entry for IFS DOS service	;AN000;
  2846                                  ;; 
  2847                                  ;; UU_IFS_HEADER:
  2848                                  ;; 	dd	0	; IFS header chain		;AN000;
  2849                                  ;;
  2850                                  ;ChkCopyProt:
  2851                                  ;	dw	0	; M068
  2852                                  ;A20OFF_PSP:
  2853                                  ;	dw	0	; M068
  2854                                  ;BUFFERS_PARM1:
  2855                                  ;	dw	0	; value of BUFFERS= ,m 	;AN000;
  2856                                  ;BUFFERS_PARM2:
  2857                                  ;	dw	0	; value of BUFFERS= ,n 	;AN000
  2858                                  ;BOOTDRIVE:
  2859                                  ;	db	0	; the boot drive	;AN000;
  2860                                  ;DDMOVE:
  2861                                  ;	db	0 	; 1 if we need DWORD move ;AN000;
  2862                                  ;EXT_MEM_SIZE:
  2863                                  ;	dw	0	; extended memory size 	;AN000;
  2864                                  
  2865                                  ;HASHINITVAR: ; LABEL   WORD	; AN000;
  2866                                  ;;
  2867                                  ;; Replaced by next two declarations
  2868                                  ;;
  2869                                  ;;UU_BUF_HASH_PTR:
  2870                                  ;;	dd	0	; buffer Hash table addr
  2871                                  ;;UU_BUF_HASH_COUNT:
  2872                                  ;;	dw	1	; number of Hash entries
  2873                                  ;
  2874                                  ;BufferQueue:
  2875                                  ;	dd	0	; Head of the buffer Queue
  2876                                  ;DirtyBufferCount:
  2877                                  ;	dw	0	; Count of Dirty buffers in the Que
  2878                                  ;			; BUGBUG ---- change to byte
  2879                                  ;SC_CACHE_PTR:
  2880                                  ;	dd	0	; secondary cache pointer
  2881                                  ;SC_CACHE_COUNT:
  2882                                  ;	dw	0 	; secondary cache count
  2883                                  ;BuffInHMA:
  2884                                  ;	db	0	; Flag to indicate that buffs are in HMA
  2885                                  ;LoMemBuff:
  2886                                  ;	dd	0	; Ptr to intermediate buffer
  2887                                  ;			;  in Low mem when buffs are in HMA
  2888                                  ;;
  2889                                  ;; All variables which have UU_ as prefix can be reused for other
  2890                                  ;; purposes and can be renamed. All these variables were used for
  2891                                  ;; EMS support of Buffer Manager. Now they are useless for Buffer
  2892                                  ;; manager ---- MOHANS
  2893                                  ;;
  2894                                  ;
  2895                                  ;	I_am	UU_BUF_EMS_FIRST_PAGE,3,<0,0,0>  
  2896                                  ;UU_BUF_EMS_FIRST_PAGE:	
  2897                                  ;	db	0,0,0	; holds the first page above 640K
  2898                                  ;
  2899                                  ;;	I_am	UU_BUF_EMS_NPA640,WORD,<0> ; holds the number of pages 
  2900                                  ;;					   ; above 640K
  2901                                  ;;UU_BUF_EMS_NPA640:
  2902                                  ;;	dw	0			
  2903                                  ;
  2904                                  ;CL0FATENTRY:
  2905                                  ;	dw	-1	; M014:	Holds the data that
  2906                                  ;			; is used in pack/unpack rts.
  2907                                  ;			; in fat.asm if cluster 0 is specified.
  2908                                  ;			; SR;
  2909                                  ;IoStatFail:
  2910                                  ;	db	0	; IoStatFail has been added to 
  2911                                  ;			; record a fail on an I24 
  2912                                  ;			; issued from IOFUNC on a status call. 
  2913                                  ;
  2914                                  ;;***	I_am	UU_BUF_EMS_MODE,BYTE,<-1>	; EMS mode 	;AN000;
  2915                                  ;;***	I_am	UU_BUF_EMS_HANDLE,BYTE		; buffer EMS handle ;AN000;
  2916                                  ;;***	I_am	UU_BUF_EMS_PAGE_FRAME,WORD ,<-1>; EMS page frame # ;AN000;
  2917                                  ;;***	I_am	UU_BUF_EMS_SEG_CNT,WORD,<1>	; EMS seg count	;AN000;
  2918                                  ;;***	I_am	UU_BUF_EMS_PFRAME,WORD		; EMS page frame seg address ;AN000;
  2919                                  ;;***	I_am	UU_BUF_EMS_RESERV,WORD,<0> 	; reserved	;AN000;
  2920                                  ;
  2921                                  ;;***	I_am	UU_BUF_EMS_MAP_BUFF,1,<0>	; this is not used to save the 
  2922                                  ;						; state of the 	buffers page.
  2923                                  ;						; This one byte is retained to 
  2924                                  ;						; keep the size of this data 
  2925                                  ;						; block the same.;
  2926                                  ;ALLOCMSAVE:
  2927                                  ;	db	0	; M063: temp var. used to 
  2928                                  ;			; M063: save alloc method in
  2929                                  ;			; M063: msproc.asm
  2930                                  ;A20OFF_COUNT:
  2931                                  ;	db	0	; M068: indiactes the # of 
  2932                                  ;			; M068: int 21 calls for 
  2933                                  ;			; M068: which A20 is off
  2934                                  ;DOS_FLAG:
  2935                                  ;	db	0	; see DOSSYM.INC for Bit 
  2936                                  ;			; definitions
  2937                                  ;UNPACK_OFFSET:
  2938                                  ;	dw	0	; saves pointer to the start
  2939                                  ;			; of unpack code in exepatch.
  2940                                  ;			; asm.
  2941                                  ;UMBFLAG:
  2942                                  ;	db	0 	; M003: bit 0 indicates the 
  2943                                  ;			; M003: link state of the UMBs
  2944                                  ;			; M003: whether linked or not 
  2945                                  ;			; M003: to the DOS arena chain
  2946                                  ;SAVE_AX:
  2947                                  ;	dw	0	; M000: temp varibale to store ax
  2948                                  ;			; M000: in msproc.asm
  2949                                  ;UMB_HEAD:
  2950                                  ;	dw	-1	; M000: this is initialized to  
  2951                                  ;			; M000: the first umb arena by 
  2952                                  ;			; M000: BIOS sysinit.
  2953                                  ;START_ARENA:
  2954                                  ;	dw	1	; M000: this is the first arena 
  2955                                  ;			; M000: from which DOS will 
  2956                                  ;			; M000: start its scan for alloc.
  2957                                  
  2958                                  ; End of SYSINITVar block
  2959                                  
  2960                                  ; 16/07/2018
  2961                                  ; MSDOS 3.3 (& MDOS 6.0)
  2962                                  
  2963                                  ;
  2964                                  ; Sharer jump table
  2965                                  ;
  2966                                  
  2967                                  ;PUBLIC	JShare
  2968                                  	;EVEN
  2969 0000005B 90                      align 2
  2970                                  
  2971                                  JShare: ; LABEL	DWORD
  2972 0000005C [BB17]0000              		DW	BadCall,0
  2973 00000060 [BF17]0000              MFT_enter	DW	OKCall, 0  ; 1   MFT_enter
  2974 00000064 [BF17]0000              MFTClose	DW	OKCall, 0  ; 2   MFTClose
  2975 00000068 [BB17]0000              MFTclU		DW	BadCall,0  ; 3   MFTclU
  2976 0000006C [BB17]0000              MFTCloseP	DW	BadCall,0  ; 4   MFTCloseP
  2977 00000070 [BB17]0000              MFTCloN		DW	BadCall,0  ; 5   MFTCloN
  2978 00000074 [BB17]0000              set_block	DW	BadCall,0  ; 6   set_block
  2979 00000078 [BB17]0000              clr_block	DW	BadCall,0  ; 7   clr_block
  2980 0000007C [BF17]0000              chk_block	DW	OKCall, 0  ; 8   chk_block
  2981 00000080 [BB17]0000              MFT_get		DW	BadCall,0  ; 9   MFT_get
  2982 00000084 [BB17]0000              ShSave		DW	BadCall,0  ; 10  ShSave
  2983 00000088 [BB17]0000              ShChk		DW	BadCall,0  ; 11  ShChk
  2984 0000008C [BF17]0000              ShCol		DW	OKCall, 0  ; 12  ShCol
  2985 00000090 [BB17]0000              ShCloseFile	DW	BadCall,0  ; 13  ShCloseFile
  2986 00000094 [BB17]0000              ShSU		DW	BadCall,0  ; 14  ShSU
  2987                                  
  2988                                  ;============================================================================
  2989                                  ; CONST2.ASM (MSDOS 6.0, 1991)
  2990                                  ;============================================================================
  2991                                  ; 16/07/2018 - Retro DOS 3.0	
  2992                                  
  2993                                  ;Break <Initialized data and data used at DOS initialization>
  2994                                  
  2995                                  ;
  2996                                  ; We need to identify the parts of the data area that are relevant to tasks
  2997                                  ; and those that are relevant to the system as a whole.  Under 3.0, the system
  2998                                  ; data will be gathered with the system code.  The process data under 2.x will
  2999                                  ; be available for swapping and under 3.0 it will be allocated per-process.
  3000                                  ;
  3001                                  ; The data that is system data will be identified by [SYSTEM] in the comments
  3002                                  ; describing that data item.
  3003                                  
  3004                                  ;	AsmVars <Debug, Redirector, ShareF>
  3005                                  
  3006                                  ;DOSDATA SEGMENT WORD PUBLIC 'DATA'
  3007                                  
  3008                                  ;
  3009                                  ; Table of routines for assignable devices
  3010                                  ;
  3011                                  ; MSDOS allows assignment if the following standard devices:
  3012                                  ;   stdin  (usually CON input)
  3013                                  ;   stdout (usually CON output)
  3014                                  ;   auxin  (usually AUX input)
  3015                                  ;   auxout (usually AUX output)
  3016                                  ;   stdlpt (usually PRN output)
  3017                                  ;
  3018                                  ; SPECIAL NOTE:
  3019                                  ;   Status of a file is a strange idea. We choose to handle it in this manner:
  3020                                  ;   If we're not at end-of-file, then we always say that we have a character.
  3021                                  ;   Otherwise, we return ^Z as the character and set the ZERO flag. In this
  3022                                  ;   manner we can support program written under the old DOS (they use ^Z as EOF
  3023                                  ;   on devices) and programs written under the new DOS (they use the ZERO flag
  3024                                  ;   as EOF).
  3025                                  
  3026                                  ; Default SFTs for boot up
  3027                                  
  3028                                  		;PUBLIC	SFTABL
  3029                                  
  3030                                  SFTABL:	   ; LABEL   DWORD		; file table
  3031 00000098 FFFF                    		DW -1			; link to next table
  3032 0000009A FFFF                    		DW -1			; link seg to next table
  3033 0000009C 0500                    		DW sf_default_number	; Number of entries in table
  3034 0000009E 00<rep 109h>            		times (sf_default_number*sf_entry_size) db 0
  3035                                  
  3036                                  ; the next two variables relate to the position of the logical stdout/stdin
  3037                                  ; cursor. They are only meaningful when stdin/stdout are assigned to the
  3038                                  ; console.
  3039                                  
  3040                                  		; Offset 01A7h in IBMDOS.COM (MSDOS 3.3)
  3041 000001A7 00                      CARPOS:		db 0			; cursor position in stdin
  3042 000001A8 00                      STARTPOS:	db 0			; position of cursor at beginning
  3043 000001A9 00<rep 80h>             INBUF:		times 128 db 0		; general device input buffer
  3044 00000229 00<rep 83h>             CONBUF:		times 131 db 0		; The rest of INBUF and console buffer
  3045                                  		; Offset 02ACh in IBMDOS.COM (MSDOS 3.3)
  3046 000002AC 00                      PFLAG:		db 0			; printer echoing flag
  3047 000002AD 00                      VERFLG:		db 0			; Initialize with verify off
  3048 000002AE 03                      CHARCO:		db 00000011b		; Allows statchks every 4 chars...
  3049                                  switch_character:
  3050 000002AF 2F                      chSwitch:	db '/'			; UNUSED - obsolete datum, can be reused
  3051 000002B0 00                      AllocMethod:	db 0			; how to alloc first(best)last
  3052 000002B1 00                      fShare:		db 0			; TRUE => sharing installed
  3053 000002B2 01                      DIFFNAM:	db 1			; Indicates when MYNAME has changed                                        ; of buffered input call
  3054 000002B3 20<rep 10h>             MYNAME:		times 16 db 20h		; My network name
  3055                                  
  3056                                  ;
  3057                                  ; The following table is a list of addresses that the sharer patches to be
  3058                                  ; PUSH AX to enable the critical sections
  3059                                  ;
  3060                                  		; Offset 02C3h in IBMDOS.COM (MSDOS 3.3)
  3061                                  
  3062                                  ;PUBLIC	CritPatch
  3063                                  
  3064                                  CritPatch:	; LABEL WORD
  3065                                  
  3066                                  ;IRP sect,<critDisk,critDevice>
  3067                                  
  3068                                  ;IF (NOT REDIRECTOR) AND (NOT SHAREF)
  3069                                  ;
  3070                                  ;SR; Change code patch address to a variable in data segment
  3071                                  ;
  3072                                  ;       dw OFFSET DOSDATA: redir_patch
  3073                                  ;       dw OFFSET DOSDATA: redir_patch
  3074                                  ;
  3075                                  ;;hkn	Short_Addr  E&sect
  3076                                  ;;hkn	Short_Addr  L&sect
  3077                                  ;
  3078                                  ;ELSE
  3079                                  ;	DW	0
  3080                                  ;	DW	0
  3081                                  ;ENDIF
  3082                                  ;ENDM
  3083                                  ;	DW	0
  3084                                  
  3085                                  	; 16/07/2018 - Retro DOS v3.0
  3086                                  	; IBMDOS.COM (MSDOS 3.3), offset 02C3h
  3087                                   
  3088 000002C3 [6C20]                  	dw 	EcritDisk
  3089 000002C5 [7420]                  	dw 	LcritDisk			
  3090 000002C7 [7C20]                  	dw	EcritDevice
  3091 000002C9 [8420]                  	dw 	LcritDevice
  3092                                  
  3093 000002CB 0000                    	dw	0
  3094                                  
  3095                                  ;
  3096                                  ; WARNING!!!  PRINT and PSPRINT *REQUIRE* ErrorMode to precede INDOS.
  3097                                  ; Also, IBM server 1.0 requires this also.
  3098                                  ;
  3099                                  	;EVEN			; Force swap area to start on word boundry
  3100 000002CD 90                      align 2
  3101                                  	;PUBLIC	SWAP_START
  3102                                  SWAP_START:	; LABEL BYTE
  3103 000002CE 00                      ERRORMODE:	db 0		; Flag for INT 24 processing
  3104 000002CF 00                      INDOS:		db 0		; DOS status for interrupt processing
  3105 000002D0 FF                      WPERR:		db -1		; Write protect error flag
  3106 000002D1 00                      EXTERR_LOCUS:	db 0		; Extended Error Locus
  3107 000002D2 0000                    EXTERR:		dw 0		; Extended Error code
  3108                                  
  3109                                  ;WARNING Following two bytes Accessed as word in $GetExtendedError
  3110 000002D4 00                      EXTERR_ACTION:	db 0		; Extended Error Action
  3111 000002D5 00                      EXTERR_CLASS:	db 0		; Extended Error Class
  3112                                  ; end warning
  3113                                   
  3114 000002D6 00000000                EXTERRPT:	dd 0		; Extended Error pointer
  3115                                  
  3116 000002DA 8000                    DMAADD:		dw 80H		; User's disk transfer address (disp/seg)
  3117 000002DC 0000                                    dw 0	
  3118 000002DE 0000                    CurrentPDB:	dw 0		; Current process identifier
  3119 000002E0 0000                    ConC_Spsave:	dw 0		; saved SP before ^C
  3120 000002E2 0000                    exit_code:	dw 0		; exit code of last proc.
  3121 000002E4 00                      CURDRV:		db 0		; Default drive (init A)
  3122 000002E5 00                      CNTCFLAG:	db 0		; ^C check in dispatch disabled
  3123                                  ;				; F.C. 2/17/86
  3124                                  ;CPSWFLAG:	db 0		; Code Page Switching Flag  DOS 4.00
  3125                                  ;CPSWSAVE:	db 0		; copy of above in case of ABORT
  3126                                  SWAP_ALWAYS:	; 05/08/2018
  3127 000002E6 0000                    USER_IN_AX:	dw 0		; User INPUT AX value (used for
  3128                                  				;   extended error type stuff.
  3129                                  				;   NOTE: does not have Correct value on
  3130                                  				;   1-12, OEM, Get/Set CurrentPDB,
  3131                                  				;   GetExtendedError system calls)
  3132 000002E8 0000                    PROC_ID:	dw 0		; PID for sharing (0 = local)
  3133 000002EA 0000                    USER_ID:	dw 0		; Machine for sharing (0 = local)
  3134 000002EC 0000                    FirstArena:	dw 0		; first free block found
  3135 000002EE 0000                    BestArena:	dw 0		; best free block found
  3136 000002F0 0000                    LastArena:	dw 0		; last free block found
  3137 000002F2 0000                    ENDMEM:		dw 0		; End of memory used in DOSINIT
  3138 000002F4 0000                    LASTENT:	dw 0		; Last entry for directory search
  3139 000002F6 00                      FAILERR:	db 0		; NZ if user did FAIL on I 24
  3140 000002F7 00                      ALLOWED:	db 0		; Allowed I 24 answers (see allowed_)
  3141 000002F8 00                      NoSetDir:	db 0		; true -> do not set directory
  3142 000002F9 00                      DidCTRLC:	db 0		; true -> we did a ^C exit
  3143 000002FA 00                      SpaceFlag:	db 0		; true -> embedded spaces are allowed in FC
  3144                                  
  3145                                  ; Warning!  The following items are accessed as a WORD in TIME.ASM
  3146                                  	;EVEN
  3147 000002FB 90                      align 2
  3148                                  	; Offset 02FCh in IBMDOS.COM (MSDOS 3.3); 
  3149 000002FC 00                      DAY:		db 0		; Day of month
  3150 000002FD 00                      MONTH:		db 0		; Month of year
  3151 000002FE 0000                    YEAR:		dw 0		; Year (with century)
  3152 00000300 FFFF                    DAYCNT:		dw -1		; Day count from beginning of year
  3153 00000302 00                      WEEKDAY:	db 0		; Day of week
  3154                                  ; end warning
  3155                                  
  3156 00000303 00                      CONSWAP:	db 0		; TRUE => console was swapped during device read
  3157 00000304 01                      IDLEINT:	db 1		; TRUE => idle int is allowed
  3158 00000305 00                      fAborting:	db 0		; TRUE => abort in progress
  3159                                  
  3160                                  ; Combination of all device call parameters
  3161                                  	;PUBLIC	DEVCALL 	;
  3162                                  ;DEVCALL SRHEAD	<>		; basic header for disk packet
  3163                                  DEVCALL: ; 08/08/2018
  3164 00000306 00                      DEVCALL_REQLEN:  db 0 		;Length in bytes of request block
  3165 00000307 00                      DEVCALL_REQUNIT: db 0		;Device unit number
  3166 00000308 00                      DEVCALL_REQFUNC: db 0		;Type of request
  3167 00000309 0000                    DEVCALL_REQSTAT: dw 0		;Status Word
  3168 0000030B 00<rep 8h>                       times 8 db 0		;Reserved for queue links
  3169                                  
  3170                                  	;PUBLIC	CALLUNIT
  3171                                  CALLUNIT: ; LABEL   BYTE	; unit number for disk
  3172                                  CALLFLSH: ; LABEL   WORD	;
  3173 00000313 00                      CALLMED:	db 0		; media byte
  3174                                  CALLBR:	  ; LABEL   DWORD	;
  3175                                  	;PUBLIC	CALLXAD 	;
  3176                                  CALLXAD:  ; LABEL   DWORD	;
  3177 00000314 00                      CALLRBYT:	db 0		;
  3178                                  	;PUBLIC	CALLVIDM	;
  3179                                  CALLVIDM: ; LABEL   DWORD	;
  3180 00000315 00<rep 3h>              	times 3 db 0	;
  3181                                  	;PUBLIC CallBPB		;
  3182                                  CALLBPB:  ; LABEL   DWORD	;
  3183                                  CALLSCNT:			;
  3184 00000318 0000                    		dw 0		;
  3185                                  	;PUBLIC	CALLSSEC	;
  3186                                  CALLSSEC: ; LABEL   WORD	;
  3187 0000031A 0000                    		dw 0		;
  3188 0000031C 00000000                CALLVIDRW:	dd 0		;
  3189                                  ;*MSDOS 6.0
  3190                                  ;*CALLNEWSC:	dd 0		; starting sector for >32mb
  3191 00000320 00000000                CALLDEVAD:	dd 0		; stash for device entry point
  3192                                  
  3193                                  ; Same as above for I/O calls	;
  3194                                  				;
  3195                                  	;PUBLIC	IOCall		;
  3196                                  ;IOCALL	SRHEAD	<>		;
  3197                                  IOCALL:	; 07/08/2018
  3198 00000324 00                      IOCALL_REQLEN:	db 0		;Length in bytes of request block	
  3199 00000325 00                      IOCALL_REQUNIT:	db 0		;Device unit number
  3200 00000326 00                      IOCALL_REQFUNC: db 0		;Type of request
  3201 00000327 0000                    IOCALL_REQSTAT: dw 0		;Status Word
  3202 00000329 00<rep 8h>              	times 8	db 0		;Reserved for queue links
  3203                                  IOFLSH:	  ; LABEL   WORD	;
  3204                                          ;PUBLIC  IORCHR		;
  3205                                  IORCHR:	  ; LABEL   BYTE	;
  3206 00000331 00                      IOMED:		db 0		;
  3207 00000332 00000000                IOXAD:		dd 0		;
  3208 00000336 0000                    IOSCNT:		dw 0		;	
  3209 00000338 0000                    IOSSEC:		dw 0		;
  3210                                  
  3211                                  ; Call struct for DSKSTATCHK	;
  3212 0000033A 0E                      DSKSTCALL:	db DRDNDHL 	; = 14
  3213 0000033B 00                      		db 0
  3214 0000033C 05                      DSKSTCOM:	db DEVRDND	; = 5
  3215 0000033D 0000                    DSKSTST:	dw 0		;
  3216 0000033F 00<rep 8h>              	times 8	db 0		;
  3217 00000347 00                      DSKCHRET:	db 0		;
  3218                                  
  3219                                  ;hkn; short_addr has been changed to provide offset in DOSCODE.
  3220                                  ;hkn; deviobuf is in DATA seg (DOSDATA)
  3221                                  ;hkn   short_addr  DEVIOBUF	;
  3222                                  	
  3223 00000348 [5E03]                  DEVIOBUF_PTR	dw DEVIOBUF
  3224 0000034A 0000                    DOSSEG_INIT	dw 0		; DOS segment set at Init
  3225 0000034C 0100                    DSKSTCNT:	dw 1		;
  3226 0000034E 0000                    		dw 0		;
  3227                                  
  3228 00000350 00                      CreatePDB:	db 0		; flag for creating a process
  3229                                  
  3230                                  ;* MSDOS 6.0
  3231                                  ;*	;PUBLIC	Lock_Buffer	;
  3232                                  ;*Lock_Buffer: ; LABEL  DWORD	;MS. DOS Lock Buffer for Ext Lock
  3233                                  ;*	    	dd 0		;MS. position
  3234                                  ;*	 	dd 0		;MS. length
  3235                                  
  3236                                  ;hkn; the foll. was moved from dosmes.asm.
  3237                                  
  3238                                  	;EVEN
  3239 00000351 90                      align 2				; needed to maintain offsets
  3240                                  
  3241                                  	; Offset 0352h in IBMDOS.COM (MSDOS 3.3)
  3242                                  	;PUBLIC  UserNum, OEMNum
  3243                                  USERNUM:
  3244 00000352 0000                     		dw 0		; 24 bit user number
  3245 00000354 00                      		db 0
  3246                                  ;IF IBM
  3247                                  ;IF IBMCOPYRIGHT
  3248 00000355 00                      OEMNUM:		DB 0		; 8 bit OEM number
  3249                                  ;ELSE
  3250                                  ;OEMNUM:	DB 0FFh		; 8 bit OEM number
  3251                                  ;ENDIF
  3252                                  ;ELSE
  3253                                  ;OEMNUM:	DB 0FFh
  3254                                  ;ENDIF
  3255                                  
  3256                                  ; 17/07/2018
  3257                                  ;----------------------------------------------------------------------------
  3258                                  ; (MSDOS 3.3, DOSMES.INC, 1987)
  3259                                  
  3260                                  ; The next variable points to the country table for the current country
  3261                                  ;	(the table returned by the AL=0 INTERNATIONAL call).
  3262                                  
  3263 00000356 [E40F]                  CurrentCounry:	dw USTABLE			
  3264                                  
  3265                                  
  3266                                  ;DOSDATA ENDS
  3267                                  
  3268                                  ;----------------------------------------------------------------------------
  3269                                  
  3270                                  ; 16/07/2018 - Retro DOS v3.0
  3271                                  
  3272                                  align 2
  3273                                  
  3274                                  DATASEGMENT EQU $ ; 17/04/2018
  3275                                  
  3276                                  ;============================================================================
  3277                                  ; MSINIT.ASM
  3278                                  ;============================================================================
  3279                                  ; 16/07/2018 - Retro DOS v3.0
  3280                                  ;	      (MSINIT code order/reference: MSDOS 3.3, IBMDOS.COM, 1987)
  3281                                  	
  3282                                  ; 15/04/2018 - Retro DOS v2.0 (DATA adaption for NASM)
  3283                                  
  3284                                  ; TITLE MSINIT.ASM -- MS-DOS INITIALIZATION CODE
  3285                                  
  3286                                  ;       ORG     0                       ; reset to beginning of data segment
  3287                                  ; Init code below overlaps with data area
  3288                                  
  3289                                  	
  3290                                  	; Offset 0358h in IBMDOS.COM (MSDOS 3.3)
  3291                                  
  3292                                  ;INITBLOCK DB    110H DUP(0)     ; Allow for segment round up
  3293 00000358 00<rep 110h>            INITBLOCK:	TIMES 272 DB 0
  3294                                  
  3295                                  	; Offset 0468h in IBMDOS.COM (MSDOS 3.3)
  3296                                  
  3297 00000468 0000                    INITSP:		DW 0
  3298 0000046A 0000                    INITSS:		DW 0
  3299                                  ;BUFFSTRT:	DW 0
  3300                                  
  3301                                  	; Offset 046Ch in IBMDOS.COM (MSDOS 3.3)	
  3302                                  
  3303                                  ;ASSUME  CS:DOSGROUP,DS:DOSGROUP,ES:DOSGROUP,SS:NOTHING
  3304                                  ;
  3305                                  ;        EXTRN   QUIT:NEAR,IRET:NEAR,ABSDRD:FAR,ABSDWRT:FAR
  3306                                  ;        EXTRN   COMMAND:NEAR,CALL_ENTRY:NEAR
  3307                                  ;        IF      NOT IBM
  3308                                  ;        EXTRN   HEADER:BYTE
  3309                                  ;        ENDIF
  3310                                  
  3311                                  MOVDPB:
  3312                                  	; 08/07/2018 - Retro DOS v3.0
  3313                                  ; This section of code is safe from being overwritten by block move
  3314                                          ;MOV     SP,[CS:INITSP]
  3315                                          ;MOV     SS,[CS:INITSS]
  3316                                          ; 30/03/2018
  3317 0000046C 8B26[6804]              	MOV     SP,[INITSP]
  3318 00000470 8E16[6A04]                      MOV     SS,[INITSS]
  3319 00000474 F3A4                    	REP     MOVSB
  3320 00000476 FC                              CLD
  3321                                          ; 15/07/2018
  3322                                  	;MOV	[ES:DMAADD+2],DX
  3323 00000477 8916[DC02]              	MOV	[DMAADD+2],DX
  3324 0000047B 8B36[2600]                      MOV     SI,[DPBHEAD]	; Address of first DPB
  3325                                  	;MOV	[ES:DPBHEAD+2],ES
  3326 0000047F 8C06[2800]                      MOV	[DPBHEAD+2],ES
  3327                                  	;MOV	[ES:SFT_ADDR+2],ES
  3328 00000483 8C06[2C00]              	MOV     [SFT_ADDR+2],ES
  3329 00000487 8A0E[4600]                      MOV     CL,[NUMIO]	; Number of DPBs
  3330 0000048B 30ED                            XOR     CH,CH
  3331                                  SETFINDPB:
  3332                                          ; 06/07/2019
  3333                                          ;MOV	[ES:SI+1AH],ES
  3334 0000048D 8C441A                  	mov	[si+1Ah],es
  3335                                          ;MOV	BYTE [ES:SI+17H],-1  ; Never accessed before
  3336 00000490 C64417FF                	mov	byte [si+17h],-1
  3337 00000494 83C620                          ADD     SI,DPBSIZ ; 32	; Point to next DPB
  3338 00000497 E2F4                            LOOP    SETFINDPB
  3339 00000499 83EE20                          SUB     SI,DPBSIZ ; sub si,32
  3340                                  	;MOV	WORD [ES:SI+1AH],-1
  3341 0000049C C7441AFFFF              	mov	word [SI+1Ah],-1
  3342                                  
  3343                                          ; 15/07/2018 - Retro DOS v3.0
  3344                                  	;; MSDOS 2.11
  3345                                          ;MOV	DI,[BUFFSTRT]		; Set up one default buffer
  3346                                  	;MOV	[ES:BUFFHEAD+2],ES
  3347                                          ;MOV	[ES:BUFFHEAD],DI
  3348                                  	; MSDOS 3.3
  3349 000004A1 06                      	push	es ; *
  3350 000004A2 BF[8F73]                	mov	di,SYSBUF+15 
  3351 000004A5 D1DF                    	rcr	di,1
  3352 000004A7 D1EF                    	shr	di,1
  3353 000004A9 D1EF                    	shr	di,1
  3354 000004AB D1EF                    	shr	di,1
  3355 000004AD 8CC0                    	mov	ax,es
  3356 000004AF 01F8                    	add	ax,di
  3357 000004B1 8EC0                    	mov	es,ax
  3358 000004B3 31FF                    	xor	di,di
  3359 000004B5 8C06[3A00]              	mov     [BUFFHEAD+2],es
  3360 000004B9 893E[3800]              	mov     [BUFFHEAD],di
  3361                                  	;	
  3362 000004BD 26C74504FF00                    MOV     WORD [ES:DI+4],00FFH
  3363 000004C3 26C705FFFF                      MOV     WORD [ES:DI],-1
  3364 000004C8 26C74502FFFF                    MOV     WORD [ES:DI+2],-1
  3365 000004CE 07                      	pop	es; * ; 15/07/2018
  3366 000004CF 06                              PUSH    ES
  3367 000004D0 42                              INC     DX ; **			; Leave enough room for the ARENA
  3368 000004D1 8B36[F202]              	mov	si,[ENDMEM] ; 15/07/2018
  3369                                  
  3370                                  	; 11/08/2018 - Retro DOS v3.0
  3371                                          ;invoke _$DUP_PDB		; create jfns and set CurrentPDB
  3372 000004D5 E85E19                  	CALL	_$DUP_PDB
  3373 000004D8 07                              POP	ES
  3374                                  
  3375                                  	; [CurrentPDB] = dx ; **
  3376                                  	; ds = previous [CurrentPDB]
  3377                                  	; es = cs
  3378                                  ;
  3379                                  ; set up memory arena
  3380                                  ;SPECIAL NOTE FOR HIGHMEM VERSION
  3381                                  ; At this point a process header has been built where the start of the 
  3382                                  ; CONSTANTS segment as refed by CS is. From this point until the return 
  3383                                  ; below be careful about references off of CS.
  3384                                  ;
  3385                                  	; 13/04/2018 ; *
  3386                                          ;PUSH	AX ; *
  3387                                  	;MOV	AX,[CurrentPDB]
  3388                                  
  3389                                        	; 06/07/2019
  3390                                  	;MOV	AX,[CS:CurrentPDB] ; 15/03/2018
  3391                                  	;MOV    [ES:CurrentPDB],AX	; Put it in the REAL location
  3392                                          ;MOV	BYTE [ES:CreatePDB],0	; reset flag in REAL location
  3393                                          
  3394 000004D9 2EA1[DE02]              	mov	ax,[cs:CurrentPDB]  ; es = cs
  3395                                  
  3396 000004DD 48                              DEC     AX
  3397 000004DE 26A3[2400]                      MOV     [ES:arena_head],AX
  3398 000004E2 1E                              PUSH    DS
  3399 000004E3 8ED8                            MOV     DS,AX
  3400 000004E5 C60600005A                      MOV     BYTE [ARENA.SIGNATURE],arena_signature_end
  3401 000004EA C70601000000                    MOV     WORD [ARENA.OWNER],arena_owner_system
  3402 000004F0 262B06[F202]                    SUB     AX,[ES:ENDMEM]
  3403 000004F5 F7D8                            NEG     AX
  3404 000004F7 48                              DEC     AX
  3405 000004F8 A30300                          MOV     [ARENA.SIZE],AX
  3406 000004FB 1F                              POP     DS
  3407                                          ;POP	AX ; *
  3408                                  
  3409 000004FC BF[9E00]                        MOV     DI,SFTABL+SFT.SFTable	; Point to sft 0
  3410                                  	; 15/07/2018
  3411 000004FF B80300                          MOV     AX,3
  3412 00000502 AB                              STOSW		; Adjust Refcount
  3413                                  	;MOV	DI,SYSINITVAR	; 16/03/2018 (Retro DOS v2.0)
  3414 00000503 BF[3B0F]                	MOV     DI,SysInitTable ; 15/07/2018 (Retro DOS v3.0)
  3415 00000506 CB                              RETF
  3416                                  	
  3417                                  	; 18/04/2018
  3418                                  FILL1	equ	$ - DATASEGMENT
  3419                                  ; ---------------------------------------------------------------------------
  3420                                  ; 16/07/2018 - Retro DOS v3.0
  3421 00000507 00<rep 3Bh>             	times (490-FILL1) db 0	; *!!!*
  3422                                  
  3423                                  ;============================================================================
  3424                                  ; MS_DATA.ASM (MSDOS 6.0, 1991)  (2)
  3425                                  ;============================================================================
  3426                                  ; 16/07/2018 - Retro DOS 3.0	
  3427                                  
  3428                                  ;  MS_DATA.ASM (MSDOS 6.0, 1991) (1) ... $$$
  3429                                   
  3430                                  ; (continues from 'SFN' ..) - from offset 0542h in IBMDOS.COM, 1987 -
  3431                                  
  3432                                  ; DATASEGMENT + 490
  3433                                  
  3434                                  ;       I_am    SFN,WORD,<-1>           ; SystemFileNumber found for accessfile
  3435                                  ;       I_am    JFN,WORD                ; JobFileNumber found for accessfile
  3436                                  ;       I_am    PJFN,DWORD              ; PointerJobFileNumber found for accessfile
  3437                                  ;       I_am    WFP_START,WORD          ;
  3438                                  ;       I_am    REN_WFP,WORD            ;
  3439                                  ;       I_am    CURR_DIR_END,WORD       ;
  3440                                  ;       I_am    NEXTADD,WORD            ;
  3441                                  ;       I_am    LASTPOS,WORD            ;
  3442                                  ;       I_am    CLUSNUM,WORD            ;
  3443                                  ; MSDOS 3.3
  3444                                  ;	I_am	DIRSEC,WORD
  3445                                  ;; MSDOS 6.0
  3446                                  ;;      I_am    DIRSEC,DWORD            ;>32mb		; AC0000
  3447                                  ;       I_am    DIRSTART,WORD           ;
  3448                                  ;       I_am    SECPOS,DWORD		;>32mb Position of first sector accessed
  3449                                  ;       I_am    VALSEC,DWORD		;>32mb Number of valid (previously written)
  3450                                  ;                                       ; sectors
  3451                                  ;       I_am    BYTSECPOS,WORD          ; Position of first byte within sector
  3452                                  ;       I_am    BYTPOS,4                ; Byte position in file of access
  3453                                  ;       I_am    BYTCNT1,WORD            ; No. of bytes in first sector
  3454                                  ;       I_am    BYTCNT2,WORD            ; No. of bytes in last sector
  3455                                  ;       I_am    SECCNT,WORD             ; No. of whole sectors
  3456                                  
  3457 00000542 FFFF                    SFN:		dw -1
  3458 00000544 0000                    JFN:		dw 0
  3459 00000546 00000000                PJFN:		dd 0
  3460 0000054A 0000                    WFP_START: 	dw 0
  3461 0000054C 0000                    REN_WFP: 	dw 0
  3462 0000054E 0000                    CURR_DIR_END: 	dw 0
  3463 00000550 0000                    NEXTADD: 	dw 0
  3464 00000552 0000                    LASTPOS: 	dw 0
  3465 00000554 0000                    CLUSNUM: 	dw 0
  3466                                  ; MSDOS 3.3
  3467 00000556 0000                    DIRSEC: 	dw 0
  3468                                  ; MSDOS 6.0
  3469                                  ;DIRSEC:	dd 0
  3470 00000558 0000                    DIRSTART: 	dw 0
  3471                                  ; MSDOS 3.3
  3472 0000055A 0000                    SECPOS: 	dw 0
  3473                                  ; MSDOS 6.0
  3474                                  ;SECPOS: 	dd 0
  3475                                  ; MSDOS 3.3
  3476 0000055C 0000                    VALSEC: 	dw 0
  3477                                  ; MSDOS 6.0
  3478                                  ;VALSEC: 	dd 0
  3479 0000055E 0000                    BYTSECPOS: 	dw 0
  3480 00000560 00000000                BYTPOS:		dd 0
  3481 00000564 0000                    BYTCNT1: 	dw 0
  3482 00000566 0000                    BYTCNT2: 	dw 0
  3483 00000568 0000                    SECCNT: 	dw 0
  3484                                  
  3485                                  	; Offset 056Ah in IBMDOS.COM (MSDOS 3.3)
  3486                                  ; DATASEGMENT + 530 (in Retro DOS v3.0)
  3487                                  
  3488                                  ;       I_am    ENTFREE,WORD            ;
  3489                                  ;       I_am    ENTLAST,WORD            ;
  3490                                  ;       I_am    NXTCLUSNUM,WORD         ;
  3491                                  ;       I_am    GROWCNT,DWORD           ;
  3492                                  ;       I_am    CURBUF,DWORD            ;
  3493                                  ;       I_am    CONSft,DWORD            ; SFT of console swapped guy.
  3494                                  ;       I_am    SAVEBX,WORD             ;
  3495                                  ;       I_am    SAVEDS,WORD             ;
  3496                                  ;       I_am    restore_tmp,WORD        ; return address for restore world
  3497                                  ;       I_am    NSS,WORD
  3498                                  ;       I_am    NSP,WORD
  3499                                  
  3500 0000056A 0000                    ENTFREE:	dw 0
  3501 0000056C 0000                    ENTLAST:	dw 0
  3502 0000056E 0000                    NXTCLUSNUM:	dw 0
  3503 00000570 00000000                GROWCNT:	dd 0
  3504 00000574 00000000                CURBUF:		dd 0
  3505 00000578 00000000                CONSFT:		dd 0
  3506 0000057C 0000                    SAVEBX:		dw 0
  3507 0000057E 0000                    SAVEDS:		dw 0
  3508 00000580 0000                    RESTORE_TMP:	dw 0
  3509 00000582 0000                    NSS:		dw 0
  3510 00000584 0000                    NSP:		dw 0	 ; Offset 0584h in IBMDOS.COM (MSDOS 3.3)
  3511                                  
  3512                                  ; DATASEGMENT+558 :  ; *!!!*
  3513                                  	; Here is offset 0586h in IBMDOS.COM, 1987 (MSDOS 3.3 kernel) 
  3514                                  
  3515                                  ; MSDOS 6.0
  3516                                  ;       I_am    EXTOPEN_FLAG,WORD,<0>   ;FT. extended open input flag       ;AN000;
  3517                                  ;       I_am    EXTOPEN_ON,BYTE,<0>     ;FT. extended open conditional flag ;AN000;
  3518                                  ;       I_am    EXTOPEN_IO_MODE,WORD,<0>;FT. extended open io mode          ;AN000;
  3519                                  ;       I_am    SAVE_DI,WORD            ;FT. extended open saved DI         ;AN000;
  3520                                  ;       I_am    SAVE_ES,WORD            ;FT. extended open saved ES         ;AN000;
  3521                                  ;       I_am    SAVE_DX,WORD            ;FT. extended open saved DX         ;AN000;
  3522                                  ;       I_am    SAVE_CX,WORD            ;FT. extended open saved CX         ;AN000;
  3523                                  ;       I_am    SAVE_BX,WORD            ;FT. extended open saved BX         ;AN000;
  3524                                  ;       I_am    SAVE_SI,WORD            ;FT. extended open saved SI         ;AN000;
  3525                                  ;       I_am    SAVE_DS,WORD            ;FT. extended open saved DS         ;AN000;
  3526                                  
  3527                                  ;	HIGH_SECTOR is a hack to allow passing 32-bit sector numbers where
  3528                                  ;	we used to just pass 16 bits in a register.  Now High_SECTOR holds
  3529                                  ;	the high 16, the low 16 are still in the register.
  3530                                  ;
  3531                                  ;       I_am    HIGH_SECTOR,WORD,<0>    ;>32mb higher sector #		    ;AN000;
  3532                                  ;
  3533                                  ;       ;I_am    UU_HIGH_SECTOR_TEMP,WORD,<0> ;M019: Unused
  3534                                  ;       I_am    OffsetMagicPatch,WORD,<offset MagicPatch> ;scottq 8/6/92
  3535                                  ;                                                         ;see dos\mpatch.asm
  3536                                  ;
  3537                                  ;       I_am    DISK_FULL,BYTE          ;>32mb indicating disk full when 1  ;AN000;
  3538                                  ;       I_am    TEMP_VAR,WORD           ; temporary variable for everyone   ;AN000;
  3539                                  ;       I_am    TEMP_VAR2,WORD          ; temporary variable 2 for everyone ;AN000;
  3540                                  ;       I_am    DrvErr,BYTE             ; used to save drive error          ;AN000;
  3541                                  ;       I_am    DOS34_FLAG,WORD,<0>     ; common flag for DOS 3.4           ;AN000;
  3542                                  ;       I_am    NO_FILTER_PATH,DWORD    ; pointer to orignal path           ;AN000;
  3543                                  ;       I_am    NO_FILTER_DPATH,DWORD   ; pointer to orignal path of destination;AN000;
  3544                                  ;; M008
  3545                                  ;       I_am   AbsRdWr_SS,WORD         ; INT 25/26 user stack segment
  3546                                  ;       I_am   AbsRdWr_SP,WORD         ; INT 25/26 user stack offset
  3547                                  ;       I_am   UU_Callback_flag,BYTE,<0>  ; Unused
  3548                                  ;; M008
  3549                                   
  3550                                  ; make those pushes fast!!!
  3551                                  	;.EVEN
  3552                                  align 2
  3553                                  
  3554                                  ; MSDOS 3.3 ($ MSDOS 6.0)
  3555                                  StackSize equ 180h			; gross but effective
  3556                                  
  3557                                  ;;;StackSize = 300h			; This is a "trial" change IBM hasn't
  3558                                  ;;;					; made up their minds about
  3559                                   
  3560                                  ;
  3561                                  ; WARNING!!!! DskStack may grow into AUXSTACK due to interrupt service.
  3562                                  ; This is NO problem as long as AUXSTACK comes immediately before DSKSTACK
  3563                                  ;
  3564                                   
  3565                                          ;PUBLIC  RENAMEDMA,AuxStack,DskStack,IOStack
  3566                                  RENAMEDMA:  ; LABEL   BYTE		; See DOS_RENAME
  3567                                  	;DB	StackSize DUP (?)       ;
  3568 00000586 00<rep 180h>            	times	StackSize db 0
  3569                                  
  3570                                  AUXSTACK:   ; LABEL   BYTE		;  Offset 0706h in IBMDOS.COM, 1987
  3571                                   	;DB	StackSize DUP (?)       ;
  3572 00000706 00<rep 180h>            	times	StackSize db 0
  3573                                  DSKSTACK:   ; LABEL   BYTE		;  Offset 0886h in IBMDOS.COM, 1987
  3574                                   	;DB	StackSize DUP (?)       ;
  3575 00000886 00<rep 180h>            	times	StackSize db 0
  3576                                  IOSTACK:    ; LABEL   BYTE		;  Offset 0A06h in IBMDOS.COM, 1987
  3577                                   
  3578                                  ; patch space for Boca folks.
  3579                                  ; Say What????!!! This does NOT go into the swappable area!
  3580                                  ; NOTE: We include the decl of ibmpatch in ms-dos even though it is not needed.
  3581                                  ;       This allows the REDIRector to work on either IBM or MS-DOS.
  3582                                   
  3583                                  ;PUBLIC  IBMPATCH
  3584                                  ;IBMPATCH label byte
  3585                                  ;	I_am    PRINTER_FLAG,BYTE,<0>   ; status of PRINT utility
  3586                                  ;	I_am    VOLCHNG_FLAG,BYTE,<0>   ; true if volume label created
  3587                                  ;	I_am    VIRTUAL_OPEN,BYTE,<0>   ; non-zero if we opened a virtual file
  3588                                  
  3589                                  IBMPATCH:
  3590 00000A06 00                      PRINTER_FLAG:	db 0
  3591 00000A07 00                      VOLCHNG_FLAG:	db 0
  3592 00000A08 00                      VIRTUAL_OPEN:	db 0
  3593                                  
  3594                                  ; MSDOS 6.0
  3595                                  ;; Following 4 variables moved to MSDATA.asm from MSTABLE.asm (P4986)
  3596                                  ;      I_am     FSeek_drive,BYTE         ;AN000; fastseek drive #
  3597                                  ;      I_am     FSeek_firclus,WORD       ;AN000; fastseek first cluster #
  3598                                  ;      I_am     FSeek_logclus,WORD       ;AN000; fastseek logical cluster #
  3599                                  ;      I_am     FSeek_logsave,WORD       ;AN000; fastseek returned log clus #
  3600                                  ;      I_am     UU_ACT_PAGE,WORD,<-1>    ;;;;;;; ;BL ; active EMS page ;AN000;
  3601                                  ;      I_am     TEMP_DOSLOC,WORD,<-1>    ;stores the temporary location of dos
  3602                                  					;at SYSINIT time.
  3603                                  ;SWAP_END LABEL   BYTE
  3604                                  ;PUBLIC  SWAP_END
  3605                                  
  3606                                  SWAP_END:
  3607                                   
  3608                                  ;; THE FOLLOWING BYTE MUST BE HERE, IMMEDIATELY FOLLOWING SWAP_END. IT CANNOT
  3609                                  ;;   BE USED. If the size of the swap data area is ODD, it will be rounded up
  3610                                  ;;   to include this byte.
  3611                                  ;       DB      ?
  3612                                  
  3613 00000A09 00                      	db	0
  3614                                   
  3615                                  ;;hkn;	DB      (512+80+32-(SWAP_END-ibmpatch)) DUP (?)
  3616                                  
  3617                                  ;DOSDATA    ENDS
  3618                                  
  3619                                  ; 08/09/2018
  3620 00000A0A 00<rep 243h>            	times 579 db 0
  3621                                  
  3622                                  ;12/08/2018 - Retro DOS v3.0
  3623                                  ;15/07/2018
  3624                                  ;============================================================================
  3625                                  ; 	Retro DOS v3.0
  3626                                  ;============================================================================
  3627 00000C4D 00                      	db 	0
  3628                                  RETRODOSMSG:
  3629 00000C4E 0D0A                    	db	13,10
  3630                                  	;db	"Retro DOS v3.0 by Erdogan Tan [2018]"
  3631                                  	; 22/11/2022
  3632 00000C50 526574726F20444F53-     	db	"Retro DOS v3.0 by Erdogan Tan [2018-2022]"
  3632 00000C59 2076332E3020627920-
  3632 00000C62 4572646F67616E2054-
  3632 00000C6B 616E205B323031382D-
  3632 00000C74 323032325D         
  3633 00000C79 0D0A2400                	db	13,10,"$", 0 
  3634                                  
  3635                                  ;============================================================================
  3636                                  ; MSTABLE.ASM (MSDOS 6.0, 1991)
  3637                                  ;============================================================================
  3638                                  ; 16/07/2018 - Retro DOS 3.0
  3639                                  
  3640                                  	; Offset 0C78h in IBMDOS.COM (MSDOS 3.3, 1987)
  3641                                  MSVERS:				; MS-DOS version in hex for $GET_VERSION
  3642 00000C7D 03                      MSMAJOR: DB	MAJOR_VERSION	; DOS_MAJOR_VERSION
  3643 00000C7E 1E                      MSMINOR: DB	MINOR_VERSION	; DOS_MINOR_VERSION  
  3644                                  
  3645                                  ;;hkn YRTAB & MONTAB moved to DOSDATA in ms_data.asm
  3646                                  ;        I_am    YRTAB,8,<200,166,200,165,200,165,200,165>   ; [SYSTEM]
  3647                                  ;        I_am    MONTAB,12,<31,28,31,30,31,30,31,31,30,31,30,31> ; [SYSTEM]
  3648                                  
  3649                                  ; DOSTAB.ASM (MSDOS 6.0, 1991)
  3650                                  ; YRTAB & MONTAB moved from TABLE segment in ms_table.asm
  3651                                  ;
  3652                                  ;	I_am    YRTAB,8,<200,166,200,165,200,165,200,165>   
  3653                                  ;	I_am    MONTAB,12,<31,28,31,30,31,30,31,31,30,31,30,31> 
  3654                                  
  3655                                  ; Days in year
  3656                                  
  3657                                  YRTAB:   
  3658 00000C7F C8A6                    	DB	200,166			; Leap year
  3659 00000C81 C8A5                    	DB	200,165
  3660 00000C83 C8A5                    	DB	200,165
  3661 00000C85 C8A5                    	DB	200,165
  3662                                  
  3663                                  ; Days of each month
  3664                                  
  3665                                  MONTAB:        
  3666 00000C87 1F                      	DB      31                      ; January
  3667                                  february:
  3668 00000C88 1C                      	DB	28 			; February--reset each 
  3669                                  					; time year changes
  3670 00000C89 1F                              DB      31                      ; March
  3671 00000C8A 1E                              DB      30                      ; April
  3672 00000C8B 1F                              DB      31                      ; May
  3673 00000C8C 1E                              DB      30                      ; June
  3674 00000C8D 1F                              DB      31                      ; July
  3675 00000C8E 1F                              DB      31                      ; August
  3676 00000C8F 1E                              DB      30                      ; September
  3677 00000C90 1F                              DB      31                      ; October
  3678 00000C91 1E                              DB      30                      ; November
  3679 00000C92 1F                              DB      31                      ; December
  3680                                  
  3681                                  ;
  3682                                  ; This is the error code mapping table for INT 21 errors.  This table defines
  3683                                  ; those error codes which are "allowed" for each system call.  If the error
  3684                                  ; code ABOUT to be returned is not "allowed" for the call, the correct action
  3685                                  ; is to return the "real" error via Extended error, and one of the allowed
  3686                                  ; errors on the actual call.
  3687                                  ;
  3688                                  ; The table is organized as follows:
  3689                                  ;
  3690                                  ;    Each entry in the table is of variable size, but the first
  3691                                  ;       two bytes are always:
  3692                                  ;
  3693                                  ;       Call#,Cnt of bytes following this byte
  3694                                  ;
  3695                                  ; EXAMPLE:
  3696                                  ;       Call 61 (OPEN)
  3697                                  ;
  3698                                  ;       DB      61,5,12,3,2,4,5
  3699                                  ;
  3700                                  ;       61 is the AH INT 21 call value for OPEN.
  3701                                  ;        5 indicates that there are 5 bytes after this byte (12,3,2,4,5).
  3702                                  ;       Next five bytes are those error codes which are "allowed" on OPEN.
  3703                                  ;       The order of these values is not important EXCEPT FOR THE LAST ONE (in
  3704                                  ;       this case 5).  The last value will be the one returned on the call if
  3705                                  ;       the "real" error is not one of the allowed ones.
  3706                                  ;
  3707                                  ; There are a number of calls (for instance all of the FCB calls) for which
  3708                                  ;   there is NO entry.  This means that NO error codes are returned on this
  3709                                  ;   call, so set up an Extended error and leave the current error code alone.
  3710                                  ;
  3711                                  ; The table is terminated by a call value of 0FFh
  3712                                  
  3713                                  ;PUBLIC I21_MAP_E_TAB
  3714                                  	; 10/08/2018
  3715                                  I21_MAP_E_TAB:	; LABEL	BYTE
  3716 00000C93 38020102                    DB  INTERNATIONAL,2,error_invalid_function,error_file_not_found
  3717 00000C97 3903030205                  DB  MKDIR,3,error_path_not_found,error_file_not_found,error_access_denied
  3718 00000C9C 3A041003                    DB  RMDIR,4,error_current_directory,error_path_not_found
  3719 00000CA0 0205                        DB          error_file_not_found,error_access_denied
  3720 00000CA2 3B020203                    DB  CHDIR,2,error_file_not_found,error_path_not_found
  3721 00000CA6 3C040302                    DB  CREAT,4,error_path_not_found,error_file_not_found
  3722 00000CAA 04                          DB          error_too_many_open_files
  3723 00000CAB 05                          DB          error_access_denied
  3724                                      ; MSDOS 6.0
  3725                                      ;DB  OPEN,6,error_path_not_found,error_file_not_found,error_invalid_access
  3726                                      ;DB          error_too_many_open_files
  3727                                      ;DB          error_not_dos_disk,error_access_denied
  3728                                      ; MSDOS 3.3
  3729 00000CAC 3D0503020C                  DB  OPEN,5,error_path_not_found,error_file_not_found,error_invalid_access
  3730 00000CB1 0405                        DB          error_too_many_open_files,error_access_denied
  3731 00000CB3 3E0106                      DB  CLOSE,1,error_invalid_handle
  3732 00000CB6 3F020605                    DB  READ,2,error_invalid_handle,error_access_denied
  3733 00000CBA 40020605                    DB  WRITE,2,error_invalid_handle,error_access_denied
  3734 00000CBE 4103030205                  DB  UNLINK,3,error_path_not_found,error_file_not_found,error_access_denied
  3735 00000CC3 42020601                    DB  LSEEK,2,error_invalid_handle,error_invalid_function
  3736 00000CC7 4304030201                  DB  CHMOD,4,error_path_not_found,error_file_not_found,error_invalid_function
  3737 00000CCC 05                          DB          error_access_denied
  3738 00000CCD 44050F0D01                  DB  IOCTL,5,error_invalid_drive,error_invalid_data,error_invalid_function
  3739 00000CD2 0605                        DB          error_invalid_handle,error_access_denied
  3740 00000CD4 45020604                    DB  XDUP,2,error_invalid_handle,error_too_many_open_files
  3741 00000CD8 46020604                    DB  XDUP2,2,error_invalid_handle,error_too_many_open_files
  3742                                      ; MSDOS 6.0	
  3743                                      ;DB  CURRENT_DIR,2,error_not_DOS_disk,error_invalid_drive
  3744                                      ; MSDOS 3.3	
  3745 00000CDC 47010F                      DB  CURRENT_DIR,1,error_invalid_drive
  3746 00000CDF 48020708                    DB  ALLOC,2,error_arena_trashed,error_not_enough_memory
  3747 00000CE3 49020709                    DB  DEALLOC,2,error_arena_trashed,error_invalid_block
  3748 00000CE7 4A03070908                  DB  SETBLOCK,3,error_arena_trashed,error_invalid_block,error_not_enough_memory
  3749 00000CEC 4B08030102                  DB  EXEC,8,error_path_not_found,error_invalid_function,error_file_not_found
  3750 00000CF1 040B0A                      DB          error_too_many_open_files,error_bad_format,error_bad_environment
  3751 00000CF4 0805                        DB          error_not_enough_memory,error_access_denied
  3752 00000CF6 4E03030212                  DB  FIND_FIRST,3,error_path_not_found,error_file_not_found,error_no_more_files
  3753 00000CFB 4F0112                      DB  FIND_NEXT,1,error_no_more_files
  3754                                      ; MSDOS 6.0
  3755                                      ;DB  RENAME,5,error_not_same_device,error_path_not_found,error_file_not_found
  3756                                      ;DB          error_current_directory,error_access_denied
  3757                                      ; MSDOS 3.3
  3758 00000CFE 5604110302                  DB  RENAME,4,error_not_same_device,error_path_not_found,error_file_not_found
  3759 00000D03 05                          DB          error_access_denied
  3760                                      ; MSDOS 6.0	
  3761                                      ;DB  FILE_TIMES,4,error_invalid_handle,error_not_enough_memory
  3762                                      ;DB             error_invalid_data,error_invalid_function
  3763                                      ; MSDOS 3.03	
  3764 00000D04 57020601                    DB  FILE_TIMES,2,error_invalid_handle,error_invalid_function
  3765 00000D08 580101                      DB  ALLOCOPER,1,error_invalid_function
  3766 00000D0B 5A040302                    DB  CREATETEMPFILE,4,error_path_not_found,error_file_not_found
  3767 00000D0F 0405                        DB          error_too_many_open_files,error_access_denied
  3768 00000D11 5B055003                    DB  CREATENEWFILE,5,error_file_exists,error_path_not_found
  3769 00000D15 020405                      DB          error_file_not_found,error_too_many_open_files,error_access_denied
  3770 00000D18 5C040601                    DB  LOCKOPER,4,error_invalid_handle,error_invalid_function
  3771 00000D1C 2421                        DB          error_sharing_buffer_exceeded,error_lock_violation
  3772 00000D1E 65020102                    DB  GETEXTCNTRY,2,error_invalid_function,error_file_not_found	;DOS 3.3
  3773 00000D22 66020102                    DB  GETSETCDPG,2,error_invalid_function,error_file_not_found        ;DOS 3.3
  3774 00000D26 680106                      DB  COMMIT,1,error_invalid_handle                                   ;DOS 3.3
  3775 00000D29 67030408                    DB  EXTHANDLE,3,error_too_many_open_files,error_not_enough_memory
  3776 00000D2D 01                          DB              error_invalid_function
  3777                                      ; MSDOS 6.0		
  3778                                      ;DB	ExtOpen,10
  3779                                      ;DB   error_path_not_found,error_file_not_found,error_invalid_access
  3780                                      ;DB         error_too_many_open_files,error_file_exists,error_not_enough_memory
  3781                                      ;DB         error_not_dos_disk,error_invalid_data
  3782                                      ;DB             error_invalid_function,error_access_denied
  3783                                      ;DB GetSetMediaID,4,error_invalid_drive,error_invalid_data
  3784                                      ;DB         error_invalid_function,error_access_denied
  3785 00000D2E FF                          DB  0FFh
  3786                                  
  3787                                  ;============================================================================
  3788                                  ; DOSTAB.ASM (MSDOS 6.0, 1991)
  3789                                  ;============================================================================
  3790                                  ; 16/07/2018 - Retro DOS 3.0
  3791                                  
  3792                                  ;**
  3793                                  ;
  3794                                  ; The following table defines CLASS ACTION and LOCUS info for the INT 21H
  3795                                  ; errors.  Each entry is 4 bytes long:
  3796                                  ;
  3797                                  ;       Err#,Class,Action,Locus
  3798                                  ;
  3799                                  ; A value of 0FFh indicates a call specific value (ie.  should already
  3800                                  ; be set).  AN ERROR CODE NOT IN THE TABLE FALLS THROUGH TO THE CATCH ALL AT
  3801                                  ; THE END, IT IS ASSUMES THAT CLASS, ACTION, LOCUS IS ALREADY SET.
  3802                                  ;
  3803                                  
  3804                                  ;PUBLIC  ERR_TABLE_21
  3805                                  ERR_TABLE_21: ; LABEL   BYTE
  3806 00000D2F 010704FF                    DB  error_invalid_function,       errCLASS_Apperr,    errACT_Abort,     0FFh
  3807 00000D33 02080302                    DB  error_file_not_found,         errCLASS_NotFnd,    errACT_User,      errLOC_Disk
  3808 00000D37 03080302                    DB  error_path_not_found,         errCLASS_NotFnd,    errACT_User,      errLOC_Disk
  3809 00000D3B 04010401                    DB  error_too_many_open_files,    errCLASS_OutRes,    errACT_Abort,     errLOC_Unk
  3810 00000D3F 050303FF                    DB  error_access_denied,          errCLASS_Auth,      errACT_User,      0FFh
  3811 00000D43 06070401                    DB  error_invalid_handle,         errCLASS_Apperr,    errACT_Abort,     errLOC_Unk
  3812 00000D47 07070505                    DB  error_arena_trashed,          errCLASS_Apperr,    errACT_Panic,     errLOC_Mem
  3813 00000D4B 08010405                    DB  error_not_enough_memory,      errCLASS_OutRes,    errACT_Abort,     errLOC_Mem
  3814 00000D4F 09070405                    DB  error_invalid_block,          errCLASS_Apperr,    errACT_Abort,     errLOC_Mem
  3815 00000D53 0A070405                    DB  error_bad_environment,        errCLASS_Apperr,    errACT_Abort,     errLOC_Mem
  3816 00000D57 0B090301                    DB  error_bad_format,             errCLASS_BadFmt,    errACT_User,      errLOC_Unk
  3817 00000D5B 0C070401                    DB  error_invalid_access,         errCLASS_Apperr,    errACT_Abort,     errLOC_Unk
  3818 00000D5F 0D090401                    DB  error_invalid_data,           errCLASS_BadFmt,    errACT_Abort,     errLOC_Unk
  3819 00000D63 0F080302                    DB  error_invalid_drive,          errCLASS_NotFnd,    errACT_User,      errLOC_Disk
  3820 00000D67 10030302                    DB  error_current_directory,      errCLASS_Auth,      errACT_User,      errLOC_Disk
  3821 00000D6B 110D0302                    DB  error_not_same_device,        errCLASS_Unk,       errACT_User,      errLOC_Disk
  3822 00000D6F 12080302                    DB  error_no_more_files,          errCLASS_NotFnd,    errACT_User,      errLOC_Disk
  3823 00000D73 500C0302                    DB  error_file_exists,            errCLASS_Already,   errACT_User,      errLOC_Disk
  3824 00000D77 200A0202                    DB  error_sharing_violation,      errCLASS_Locked,    errACT_DlyRet,    errLOC_Disk
  3825 00000D7B 210A0202                    DB  error_lock_violation,         errCLASS_Locked,    errACT_DlyRet,    errLOC_Disk
  3826 00000D7F 540104FF                    DB  error_out_of_structures,      errCLASS_OutRes,    errACT_Abort,     0FFh
  3827 00000D83 56030301                    DB  error_invalid_password,       errCLASS_Auth,      errACT_User,      errLOC_Unk
  3828 00000D87 52010402                    DB  error_cannot_make,            errCLASS_OutRes,    errACT_Abort,     errLOC_Disk
  3829 00000D8B 32090303                    DB  error_not_supported,          errCLASS_BadFmt,    errACT_User,      errLOC_Net
  3830 00000D8F 550C0303                    DB  error_already_assigned,       errCLASS_Already,   errACT_User,      errLOC_Net
  3831 00000D93 57090301                    DB  error_invalid_parameter,      errCLASS_BadFmt,    errACT_User,      errLOC_Unk
  3832 00000D97 530D0401                    DB  error_FAIL_I24,               errCLASS_Unk,       errACT_Abort,     errLOC_Unk
  3833 00000D9B 24010405                    DB  error_sharing_buffer_exceeded,errCLASS_OutRes,    errACT_Abort,     errLOC_Mem
  3834                                      ; MSDOS 6.0
  3835                                      ;DB  error_handle_EOF,            errCLASS_OutRes,    errACT_Abort,     errLOC_Unk ;AN000;
  3836                                      ;DB  error_handle_Disk_Full,      errCLASS_OutRes,    errACT_Abort,     errLOC_Unk ;AN000;
  3837                                      ;DB  error_sys_comp_not_loaded,   errCLASS_Unk,       errACT_Abort,     errLOC_Disk ;AN001;
  3838 00000D9F FFFFFFFF                    DB  0FFh,                         0FFH,       	  0FFH,       	    0FFh
  3839                                  
  3840                                  ; MSDOS 3.3 (IBMDOS.COM, 1987) - Offset 0D2Ah
  3841                                  ;ERR_TABLE_21:	db 1,7,4,0FFh
  3842                                  ;		db 2,8,3,2
  3843                                  ;		db 3,8,3,2
  3844                                  ;		db 4,1,4,1
  3845                                  ;		db 5,3,3,0FFh
  3846                                  ;		db 6,7,4,1
  3847                                  ;		db 7,7,5,5
  3848                                  ;		db 8,1,4,5
  3849                                  ;		db 9,7,4,5
  3850                                  ;		db 0Ah,7,4,5
  3851                                  ;		db 0Bh,9,3,1
  3852                                  ;		db 0Ch,7,4,1
  3853                                  ;		db 0Dh,9,4,1
  3854                                  ;		db 0Fh,8,3,2
  3855                                  ;		db 10h,3,3,2
  3856                                  ;		db 11h,0Dh,3,2
  3857                                  ;		db 12h,8,3,2
  3858                                  ;		db 50h,0Ch,3,2
  3859                                  ;		db 20h,0Ah,2,2
  3860                                  ;		db 21h,0Ah,2,2
  3861                                  ;		db 54h,1,4,0FFh
  3862                                  ;		db 56h,3,3,1
  3863                                  ;		db 52h,1,4,2
  3864                                  ;		db 32h,9,3,3
  3865                                  ;		db 55h,0Ch,3,3
  3866                                  ;		db 57h,9,3,1
  3867                                  ;		db 53h,0Dh,4,1
  3868                                  ;		db 24h,1,4,5
  3869                                  ;		db 0FFh,0FFh,0FFh,0FFh
  3870                                  
  3871                                  ;
  3872                                  ; The following table defines CLASS ACTION and LOCUS info for the INT 24H
  3873                                  ; errors.  Each entry is 4 bytes long:
  3874                                  ;
  3875                                  ;       Err#,Class,Action,Locus
  3876                                  ;
  3877                                  ; A Locus value of 0FFh indicates a call specific value (ie.  should already
  3878                                  ; be set).  AN ERROR CODE NOT IN THE TABLE FALLS THROUGH TO THE CATCH ALL AT
  3879                                  ; THE END.
  3880                                  
  3881                                  ;PUBLIC  ERR_TABLE_24
  3882                                  ERR_TABLE_24: ; LABEL   BYTE
  3883 00000DA3 130B0702                    DB  error_write_protect,          errCLASS_Media,     errACT_IntRet,    errLOC_Disk
  3884 00000DA7 14040501                    DB  error_bad_unit,               errCLASS_Intrn,     errACT_Panic,     errLOC_Unk
  3885 00000DAB 150507FF                    DB  error_not_ready,              errCLASS_HrdFail,   errACT_IntRet,    0FFh
  3886 00000DAF 16040501                    DB  error_bad_command,            errCLASS_Intrn,     errACT_Panic,     errLOC_Unk
  3887 00000DB3 170B0402                    DB  error_CRC,                    errCLASS_Media,     errACT_Abort,     errLOC_Disk
  3888 00000DB7 18040501                    DB  error_bad_length,             errCLASS_Intrn,     errACT_Panic,     errLOC_Unk
  3889 00000DBB 19050102                    DB  error_seek,                   errCLASS_HrdFail,   errACT_Retry,     errLOC_Disk
  3890 00000DBF 1A0B0702                    DB  error_not_DOS_disk,           errCLASS_Media,     errACT_IntRet,    errLOC_Disk
  3891 00000DC3 1B0B0402                    DB  error_sector_not_found,       errCLASS_Media,     errACT_Abort,     errLOC_Disk
  3892 00000DC7 1C020704                    DB  error_out_of_paper,           errCLASS_TempSit,   errACT_IntRet,    errLOC_SerDev
  3893 00000DCB 1D0504FF                    DB  error_write_fault,            errCLASS_HrdFail,   errACT_Abort,     0FFh
  3894 00000DCF 1E0504FF                    DB  error_read_fault,             errCLASS_HrdFail,   errACT_Abort,     0FFh
  3895 00000DD3 1F0D04FF                    DB  error_gen_failure,            errCLASS_Unk,       errACT_Abort,     0FFh
  3896 00000DD7 200A0202                    DB  error_sharing_violation,      errCLASS_Locked,    errACT_DlyRet,    errLOC_Disk
  3897 00000DDB 210A0202                    DB  error_lock_violation,         errCLASS_Locked,    errACT_DlyRet,    errLOC_Disk
  3898 00000DDF 220B0702                    DB  error_wrong_disk,             errCLASS_Media,     errACT_IntRet,    errLOC_Disk
  3899 00000DE3 32090303                    DB  error_not_supported,          errCLASS_BadFmt,    errACT_User,      errLOC_Net
  3900 00000DE7 23070401                    DB  error_FCB_unavailable,        errCLASS_Apperr,    errACT_Abort,     errLOC_Unk
  3901 00000DEB 24010405                    DB  error_sharing_buffer_exceeded,errCLASS_OutRes,    errACT_Abort,     errLOC_Mem
  3902 00000DEF FF0D05FF                    DB	0FFh,                         errCLASS_Unk,       errACT_Panic,     0FFh
  3903                                  
  3904                                  
  3905                                  ; MSDOS 3.3 (IBMDOS.COM, 1987) - Offset 0D9Eh
  3906                                  ;ERR_TABLE_24:	db 13h,0Bh,7,2
  3907                                  ;		db 14h,4,5,1
  3908                                  ;		db 15h,5,7,0FFh
  3909                                  ;		db 16h,4,5,1
  3910                                  ;		db 17h,0Bh,4,2
  3911                                  ;		db 18h,4,5,1
  3912                                  ;		db 19h,5,1,2
  3913                                  ;		db 1Ah,0Bh,7,2
  3914                                  ;		db 1Bh,0Bh,4,2
  3915                                  ;		db 1Ch,2,7,4
  3916                                  ;		db 1Dh,5,4,0FFh
  3917                                  ;		db 1Eh,5,4,0FFh
  3918                                  ;		db 1Fh,0Dh,4,0FFh
  3919                                  ;		db 20h,0Ah,2,2
  3920                                  ;		db 21h,0Ah,2,2
  3921                                  ;		db 22h,0Bh,7,2
  3922                                  ;		db 32h,9,3,3
  3923                                  ;		db 23h,7,4,1
  3924                                  ;		db 24h,1,4,5
  3925                                  ;		db 0FFh,0Dh,5,0FFh
  3926                                  
  3927                                  ;
  3928                                  ; We need to map old int 24 errors and device driver errors into the new set
  3929                                  ; of errors.  The following table is indexed by the new errors
  3930                                  ;
  3931                                  
  3932                                  ;Public  ErrMap24
  3933                                  ErrMap24: ; Label   BYTE
  3934 00000DF3 13                          DB  error_write_protect	; 0
  3935 00000DF4 14                          DB  error_bad_unit		; 1
  3936 00000DF5 15                          DB  error_not_ready		; 2
  3937 00000DF6 16                          DB  error_bad_command	; 3
  3938 00000DF7 17                          DB  error_CRC		; 4
  3939 00000DF8 18                          DB  error_bad_length	; 5
  3940 00000DF9 19                          DB  error_seek		; 6
  3941 00000DFA 1A                          DB  error_not_DOS_disk	; 7
  3942 00000DFB 1B                          DB  error_sector_not_found	; 8
  3943 00000DFC 1C                          DB  error_out_of_paper	; 9
  3944 00000DFD 1D                          DB  error_write_fault	; A
  3945 00000DFE 1E                          DB  error_read_fault	; B
  3946 00000DFF 1F                          DB  error_gen_failure	; C
  3947 00000E00 1F                          DB  error_gen_failure	; D  RESERVED
  3948 00000E01 1F                          DB  error_gen_failure	; E  RESERVED
  3949 00000E02 22                          DB  error_wrong_disk	; F
  3950                                  
  3951                                  ;Public  ErrMap24End
  3952                                  ErrMap24End: ; LABEL   BYTE
  3953                                  
  3954                                  ; 16/07/2018 - Retro DOS v3.0
  3955                                  ;_MAXCALL:	db 	36
  3956                                  ;_MAXCOM:	db	104
  3957                                  
  3958                                  ; 08/09/2018
  3959 00000E03 24                          db  36
  3960 00000E04 68                          db  104
  3961                                  
  3962                                  ;============================================================================
  3963                                  ; MSTABLE.ASM, MSDOS 6.0, 1991
  3964                                  ;============================================================================
  3965                                  ; 11/07/2018 - Retro DOS v3.0
  3966                                  
  3967                                  	%define short_addr dw  ; 03/03/2018 - Retro DOS v2.0
  3968                                  
  3969 00000E05 90                      align 2
  3970                                  
  3971                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 0E00h
  3972                                  
  3973                                  ; Standard Functions
  3974                                  ;DISPATCH    LABEL WORD
  3975                                  DISPATCH:
  3976                                  	; 16/07/2018 - Retro DOS v3.0
  3977                                  	; (MSDOS 3.3)
  3978                                  
  3979 00000E06 [CD64]                          short_addr  _$ABORT			    ;  0      0
  3980 00000E08 [7923]                          short_addr  _$STD_CON_INPUT		    ;  1      1
  3981 00000E0A [8223]                          short_addr  _$STD_CON_OUTPUT		    ;  2      2
  3982 00000E0C [3B24]                          short_addr  _$STD_AUX_INPUT		    ;  3      3
  3983 00000E0E [5824]                          short_addr  _$STD_AUX_OUTPUT		    ;  4      4
  3984 00000E10 [5E24]                          short_addr  _$STD_PRINTER_OUTPUT	    ;  5      5
  3985 00000E12 [CB22]                          short_addr  _$RAW_CON_IO		    ;  6      6
  3986 00000E14 [F722]                          short_addr  _$RAW_CON_INPUT		    ;  7      7
  3987 00000E16 [8C20]                          short_addr  _$STD_CON_INPUT_NO_ECHO	    ;  8      8
  3988 00000E18 [F820]                          short_addr  _$STD_CON_STRING_OUTPUT	    ;  9      9
  3989 00000E1A [0421]                          short_addr  _$STD_CON_STRING_INPUT	    ; 10      A
  3990 00000E1C [7224]                          short_addr  _$STD_CON_INPUT_STATUS	    ; 11      B
  3991 00000E1E [7C24]                          short_addr  _$STD_CON_INPUT_FLUSH	    ; 12      C
  3992 00000E20 [531D]                          short_addr  _$DISK_RESET		    ; 13      D
  3993 00000E22 [4F1C]                          short_addr  _$SET_DEFAULT_DRIVE		    ; 14      E
  3994 00000E24 [872B]                          short_addr  _$FCB_OPEN			    ; 15      F
  3995 00000E26 [2525]                          short_addr  _$FCB_CLOSE			    ; 16     10
  3996 00000E28 [872C]                          short_addr  _$DIR_SEARCH_FIRST		    ; 17     11
  3997 00000E2A [1C2D]                          short_addr  _$DIR_SEARCH_NEXT		    ; 18     12
  3998 00000E2C [C124]                          short_addr  _$FCB_DELETE		    ; 19     13
  3999 00000E2E [732C]                          short_addr  _$FCB_SEQ_READ		    ; 20     14
  4000 00000E30 [782C]                          short_addr  _$FCB_SEQ_WRITE	            ; 21     15
  4001 00000E32 [592C]                          short_addr  _$FCB_CREATE		    ; 22     16
  4002 00000E34 [9625]                          short_addr  _$FCB_RENAME		    ; 23     17
  4003                                  	; 16/07/2018
  4004                                          ;short_addr _CPMFUNC			    ; 24     18	
  4005 00000E36 [1C17]                          short_addr  NO_OP			    ; 24     18
  4006 00000E38 [4A1C]                          short_addr  _$GET_DEFAULT_DRIVE		    ; 25     19
  4007 00000E3A [3F1C]                          short_addr  _$SET_DMA			    ; 26     1A
  4008                                  
  4009                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  4010                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  4011                                  ;                                                                          ;
  4012 00000E3C [DC1C]                          short_addr  _$SLEAZEFUNC		    ; 27     1B
  4013 00000E3E [DE1C]                          short_addr  _$SLEAZEFUNCDL		    ; 28     1C
  4014                                  ;                                                                          ;
  4015                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  4016                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  4017                                  
  4018                                          ;short_addr  _CPMFUNC			    ; 29     1D
  4019                                          ;short_addr  _CPMFUNC			    ; 30     1E
  4020                                  
  4021                                  ; 08/07/2018 - Retro DOS v3.0
  4022                                  ; MSDOS 6.0 - MSTABLE.ASM, 1991
  4023                                  
  4024 00000E40 [1C17]                  	short_addr  NO_OP			    ; 29     1D
  4025 00000E42 [1C17]                  	short_addr  NO_OP			    ; 30     1E
  4026                                  
  4027                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  4028                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  4029                                  ;                                                                          ;
  4030 00000E44 [221D]                          short_addr  _$GET_DEFAULT_DPB               ; 31     1F
  4031                                  ;                                                                          ;
  4032                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  4033                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  4034                                          ;short_addr _CPMFUNC			    ; 32     20
  4035                                  
  4036                                  ; 08/07/2018 - Retro DOS v3.0
  4037                                  ; MSDOS 6.0 - MSTABLE.ASM, 1991
  4038                                  
  4039 00000E46 [1C17]                  	short_addr  NO_OP			    ; 32     20
  4040                                  
  4041 00000E48 [7D2C]                          short_addr  _$FCB_RANDOM_READ               ; 33     21
  4042 00000E4A [822C]                          short_addr  _$FCB_RANDOM_WRITE              ; 34     22
  4043 00000E4C [D624]                          short_addr  _$GET_FCB_FILE_LENGTH	    ; 35     23
  4044 00000E4E [A924]                          short_addr  _$GET_FCB_POSITION		    ; 36     24
  4045                                  
  4046                                  ;MAXCALL = ($-DISPATCH)/2 - 1
  4047                                  MAXCALL EQU ($-DISPATCH)/2 - 1
  4048                                  
  4049                                  ; Extended Functions
  4050 00000E50 [711C]                          short_addr  _$SET_INTERRUPT_VECTOR	    ; 37     25
  4051                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  4052                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  4053                                  ;                                                                          ;
  4054 00000E52 [441E]                          short_addr  _$CREATE_PROCESS_DATA_BLOCK	    ; 38     26
  4055                                  ;                                                                          ;
  4056                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  4057                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  4058 00000E54 [6E2C]                          short_addr  _$FCB_RANDOM_READ_BLOCK	    ; 39     27
  4059 00000E56 [692C]                          short_addr  _$FCB_RANDOM_WRITE_BLOCK        ; 40     28
  4060 00000E58 [D11C]                          short_addr  _$PARSE_FILE_DESCRIPTOR	    ; 41     29
  4061 00000E5A [2418]                          short_addr  _$GET_DATE                      ; 42     2A
  4062 00000E5C [4118]                          short_addr  _$SET_DATE                      ; 43     2B
  4063 00000E5E [6118]                          short_addr  _$GET_TIME                      ; 44     2C
  4064 00000E60 [7218]                          short_addr  _$SET_TIME                      ; 45     2D
  4065 00000E62 [1F1A]                          short_addr  _$SET_VERIFY_ON_WRITE           ; 46     2E
  4066                                  
  4067                                  ; Extended functionality group
  4068 00000E64 [2B1C]                          short_addr  _$GET_DMA                       ; 47     2F
  4069 00000E66 [011A]                          short_addr  _$GET_VERSION                   ; 48     30
  4070 00000E68 [7164]                          short_addr  _$KEEP_PROCESS		    ; 49     31
  4071                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  4072                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  4073                                  ;                                                                          ;
  4074 00000E6A [241D]                          short_addr  _$GET_DPB			    ; 50     32
  4075                                  ;                                                                          ;
  4076                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  4077                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  4078 00000E6C [5F14]                          short_addr  _$SET_CTRL_C_TRAPPING           ; 51     33
  4079 00000E6E [0A1D]                          short_addr  _$GET_INDOS_FLAG                ; 52     34
  4080 00000E70 [611C]                          short_addr  _$GET_INTERRUPT_VECTOR          ; 53     35
  4081 00000E72 [001C]                          short_addr  _$GET_DRIVE_FREESPACE           ; 54     36
  4082 00000E74 [891C]                          short_addr  _$CHAR_OPER                     ; 55     37
  4083 00000E76 [261A]                          short_addr  _$INTERNATIONAL                 ; 56     38
  4084                                  ; XENIX CALLS
  4085                                  ;   Directory Group
  4086 00000E78 [5B2F]                          short_addr  _$MKDIR			    ; 57     39
  4087 00000E7A [AD2E]                          short_addr  _$RMDIR			    ; 58     3A
  4088 00000E7C [E92E]                          short_addr  _$CHDIR			    ; 59     3B
  4089                                  ;   File Group
  4090 00000E7E [F470]                          short_addr  _$CREAT			    ; 60     3C
  4091 00000E80 [3A70]                          short_addr  _$OPEN			    ; 61     3D
  4092 00000E82 [C76D]                          short_addr  _$CLOSE		 	    ; 62     3E
  4093 00000E84 [DF6E]                          short_addr  _$READ			    ; 63     3F
  4094 00000E86 [346F]                          short_addr  _$WRITE			    ; 64     40
  4095 00000E88 [4971]                          short_addr  _$UNLINK			    ; 65     41
  4096 00000E8A [396F]                          short_addr  _$LSEEK			    ; 66     42
  4097 00000E8C [0171]                          short_addr  _$CHMOD			    ; 67     43
  4098 00000E8E [B82F]                          short_addr  _$IOCTL			    ; 68     44
  4099 00000E90 [F56F]                          short_addr  _$DUP			    ; 69     45
  4100 00000E92 [1770]                          short_addr  _$DUP2			    ; 70     46
  4101 00000E94 [502E]                          short_addr  _$CURRENT_DIR		    ; 71     47
  4102                                  ;   Memory Group
  4103 00000E96 [5265]                          short_addr  _$ALLOC			    ; 72     48
  4104 00000E98 [6F66]                          short_addr  _$DEALLOC                       ; 73     49
  4105 00000E9A [4B66]                          short_addr  _$SETBLOCK                      ; 74     4A
  4106                                  ;   Process Group
  4107 00000E9C [E65F]                          short_addr  _$EXEC			    ; 75     4B
  4108 00000E9E [A964]                          short_addr  _$EXIT			    ; 76     4C
  4109 00000EA0 [DC5F]                          short_addr  _$WAIT			    ; 77     4D
  4110 00000EA2 [8F2D]                          short_addr  _$FIND_FIRST		    ; 78     4E
  4111                                  ;   Special Group
  4112 00000EA4 [E82D]                          short_addr  _$FIND_NEXT			    ; 79     4F
  4113                                  ; SPECIAL SYSTEM GROUP
  4114                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  4115                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  4116                                  ;                                                                          ;
  4117 00000EA6 [5314]                          short_addr  _$SET_CURRENT_PDB		    ; 80     50
  4118 00000EA8 [5914]                          short_addr  _$GET_CURRENT_PDB               ; 81     51
  4119 00000EAA [161D]                          short_addr  _$GET_IN_VARS                   ; 82     52
  4120 00000EAC [8C1D]                          short_addr  _$SETDPB			    ; 83     53
  4121                                  ;                                                                          ;
  4122                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  4123                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  4124 00000EAE [1A1A]                          short_addr  _$GET_VERIFY_ON_WRITE	    ; 84     54
  4125                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  4126                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  4127                                  ;                                                                          ;
  4128 00000EB0 [361E]                          short_addr  _$DUP_PDB                       ; 85     55
  4129                                  ;                                                                          ;
  4130                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  4131                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  4132 00000EB2 [7171]                          short_addr  _$RENAME			    ; 86     56
  4133 00000EB4 [A56F]                          short_addr  _$FILE_TIMES                    ; 87     57
  4134 00000EB6 [9066]                          short_addr  _$ALLOCOPER                     ; 88     58
  4135                                  
  4136                                  ; 08/07/2018 - Retro DOS v3.0
  4137                                  ; -------------------------------------------------------------------------;
  4138                                  ; MSDOS 6.0 - MSTABLE.ASM, 1991
  4139                                  
  4140                                  ; Network extention system calls
  4141 00000EB8 [AE1C]                          short_addr  _$GetExtendedError              ; 89     59
  4142 00000EBA [FE71]                          short_addr  _$CreateTempFile                ; 90     5A
  4143 00000EBC [E671]                          short_addr  _$CreateNewFile                 ; 91     5B
  4144 00000EBE [9672]                          short_addr  _$LockOper                      ; 92     5C
  4145 00000EC0 [B266]                          short_addr  _$ServerCall                    ; 93     5D
  4146 00000EC2 [0869]                          short_addr  _$UserOper                      ; 94     5E
  4147 00000EC4 [9768]                          short_addr  _$AssignOper                    ; 95     5F
  4148 00000EC6 [606D]                          short_addr  _$NameTrans                     ; 96     60
  4149 00000EC8 [1C17]                  	short_addr  NO_OP			    ; 97     61
  4150 00000ECA [5914]                          short_addr  _$GET_CURRENT_PDB		    ; 98     62
  4151                                  ; the next call is reserved for hangool sys call
  4152                                  	; 16/07/2018
  4153                                  	;short_addr  _$ECS_Call			    ; 99     63
  4154 00000ECC [1C17]                  	short_addr  NO_OP			    ; 99     63
  4155                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  4156                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  4157                                  ;                                                                          ;
  4158 00000ECE [8614]                          short_addr  _$SET_PRINTER_FLAG              ; 100    64
  4159                                  ;                                                                          ;
  4160                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  4161                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  4162 00000ED0 [AC1A]                          short_addr  _$GetExtCntry                   ; 101    65
  4163 00000ED2 [A91B]                          short_addr  _$GetSetCdPg                    ; 102    66
  4164 00000ED4 [166E]                          short_addr  _$ExtHandle                     ; 103    67
  4165 00000ED6 [FA6D]                          short_addr  _$COMMIT                        ; 104    68
  4166                                  
  4167                                  ; 08/07/2018
  4168                                  ; Above system calls are valid for Retro DOS v3.0 (MSDOS 3.3) 
  4169                                  ; Following system calls are valid for Retro DOS v4.0 (MSDOS 6.0)
  4170                                  
  4171                                  ;	short_addr  _$GSetMediaID                   ; 105    69   ;AN000;
  4172                                  ;	short_addr  _$COMMIT                        ; 106    6A   ;AN000;
  4173                                  ;	short_addr  NO_OP                           ; 107    6B   
  4174                                  ;						    ; IFS_IOCTL no longer 
  4175                                  ;						    ; supported
  4176                                  ;	short_addr  _$Extended_Open                 ; 108    6C   ;AN000;
  4177                                  
  4178                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  4179                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  4180                                  ;                                                                          ;
  4181                                  ;ifdef ROMEXEC
  4182                                  ;       short_addr  $ROM_FIND_FIRST	   	    ; 109    6D
  4183                                  ;       short_addr  $ROM_FIND_NEXT	   	    ; 110    6E
  4184                                  ;	short_addr  $ROM_EXCLUDE		    ; 111    6F	  ; M078
  4185                                  ;endif
  4186                                  ;                                                                          ;
  4187                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  4188                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  4189                                  
  4190                                  ;MAXCOM  = ($-DISPATCH)/2 - 1
  4191                                  
  4192                                  MAXCOM  EQU ($-DISPATCH)/2 - 1
  4193                                  
  4194                                  ; 08/07/2018 - Retro DOS v3.0
  4195                                  ; MSDOS 6.0 - MSTABLE.ASM, 1991
  4196                                  
  4197                                  ;	If	Installed
  4198                                  
  4199                                  align 2
  4200                                  
  4201                                  ;PUBLIC FOO
  4202                                  
  4203                                  FOO:	; LABEL WORD
  4204 00000ED8 [CE17]                          short_addr  Leave2F
  4205                                  
  4206 00000EDA [DC0E]                  DTab:	DW  DOSTable
  4207                                  
  4208                                  	;PUBLIC FOO,DTAB
  4209                                  
  4210                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 0ED6h
  4211                                         
  4212                                  DOSTable:  ; LABEL  WORD
  4213 00000EDC 2F                              DB      (DOSTableEnd-DOSTable-1)/2 ; db  46
  4214 00000EDD [FB17]                          short_addr  DOSInstall          ;   0 install check
  4215 00000EDF [C23A]                          short_addr  DOS_CLOSE           ;   1   DOS_CLOSE
  4216 00000EE1 [7E1C]                          short_addr  RECSET              ;   2   RECSET
  4217 00000EE3 [F817]                          short_addr  DosGetGroup         ;   3   Get DOSGROUP
  4218 00000EE5 [4C56]                          short_addr  PATHCHRCMP          ;   4   PATHCHRCMP
  4219 00000EE7 [8423]                          short_addr  OUTT                ;   5   OUT
  4220 00000EE9 [B958]                          short_addr  NET_I24_ENTRY       ;   6   NET_I24_ENTRY
  4221 00000EEB [DE5D]                          short_addr  PLACEBUF            ;   7   PLACEBUF
  4222 00000EED [7C3B]                          short_addr  FREE_SFT            ;   8   FREE_SFT
  4223 00000EEF [805F]                          short_addr  BUFWRITE            ;   9   BUFWRITE
  4224 00000EF1 [3273]                          short_addr  SHARE_VIOLATION     ;   10  SHARE_VIOLATION
  4225 00000EF3 [6C38]                          short_addr  SHARE_ERROR         ;   11  SHARE_ERROR
  4226 00000EF5 [5538]                          short_addr  SET_SFT_MODE        ;   12  SET_SFT_MODE
  4227 00000EF7 [B918]                          short_addr  DATE16              ;   13  DATE16
  4228 00000EF9 [891F]                          short_addr  Idle		;   14      empty slot
  4229 00000EFB [D25D]                          short_addr  SCANPLACE           ;   15  SCANPLACE
  4230 00000EFD [891F]                          short_addr  Idle		;   16      empty slot
  4231 00000EFF [521F]                          short_addr  StrCpy              ;   17  StrCpy
  4232 00000F01 [6A1F]                          short_addr  StrLen              ;   18  StrLen
  4233 00000F03 [1056]                          short_addr  UCase		;   19  UCase
  4234 00000F05 [7A5E]                          short_addr  POINTCOMP           ;   20  POINTCOMP
  4235 00000F07 [575F]                          short_addr  CHECKFLUSH          ;   21  CHECKFLUSH
  4236 00000F09 [1668]                          short_addr  SFFromSFN           ;   22  SFFromSFN
  4237 00000F0B [C869]                          short_addr  GetCDSFromDrv       ;   23  GetCDSFromDrv
  4238 00000F0D [0B16]                          short_addr  Get_User_Stack      ;   24  Get_User_Stack
  4239 00000F0F [7569]                          short_addr  GETTHISDRV          ;   25  GetThisDrv
  4240 00000F11 [856D]                          short_addr  DriveFromText       ;   26  DriveFromText
  4241 00000F13 [6019]                          short_addr  SETYEAR             ;   27  SETYEAR
  4242 00000F15 [F719]                          short_addr  DSUM                ;   28  DSUM
  4243 00000F17 [5419]                          short_addr  DSLIDE              ;   29  DSLIDE
  4244 00000F19 [341F]                          short_addr  StrCmp              ;   30  StrCmp
  4245 00000F1B [BB68]                          short_addr  InitCDS             ;   31  initcds
  4246 00000F1D [E867]                          short_addr  pJFNFromHandle      ;   32  pJfnFromHandle
  4247 00000F1F [606D]                          short_addr  _$NameTrans		;   33  $NameTrans
  4248 00000F21 [4317]                          short_addr  CAL_LK              ;   34  CAL_LK
  4249 00000F23 [E44A]                          short_addr  DEVNAME             ;   35  DEVNAME
  4250 00000F25 [891F]                          short_addr  Idle                ;   36  Idle
  4251 00000F27 [781F]                          short_addr  DStrLen             ;   37  DStrLen
  4252 00000F29 [0B20]                          short_addr  NLS_OPEN            ;   38  NLS_OPEN      DOS 3.3
  4253 00000F2B [C76D]                          short_addr  _$CLOSE		;   39  $CLOSE        DOS 3.3
  4254 00000F2D [1120]                          short_addr  NLS_LSEEK           ;   40  NLS_LSEEK     DOS 3.3
  4255 00000F2F [DF6E]                          short_addr  _$READ		;   41  $READ         DOS 3.3
  4256 00000F31 [EA1F]                          short_addr  FastInit            ;   42  FastInit      DOS 3.4  ;AN000;
  4257 00000F33 [4A20]                          short_addr  NLS_IOCTL           ;   43  NLS_IOCTL     DOS 3.3
  4258 00000F35 [3D20]                          short_addr  GetDevList          ;   44  GetDevList    DOS 3.3
  4259 00000F37 [6720]                          short_addr  NLS_GETEXT          ;   45  NLS_GETEXT    DOS 3.3
  4260                                          
  4261                                  	; 10/08/2018
  4262                                  	;short_addr  MSG_RETRIEVAL	;   46  MSG_RETRIEVAL DOS 4.0  ;AN000;
  4263                                  
  4264 00000F39 [1C17]                  	short_addr  NO_OP		;   M006: 47  no longer supported
  4265                                  ;*** 	short_addr  Fake_Version	;   47  Fake_Version  DOS 4.0  ;AN006;
  4266                                  
  4267                                  DOSTableEnd:  ; LABEL BYTE
  4268                                  
  4269                                  	;ENDIF
  4270                                  
  4271                                  ;============================================================================
  4272                                  ; DOSTAB.ASM, MSDOS 6.0, 1991
  4273                                  ;============================================================================
  4274                                  ; 16/07/2018 - Retro DOS v3.0
  4275                                  
  4276                                  ;----------------THE FOLL. BLOCK MOVED FROM TABLE SEG IN MS_TABLE.ASM-------
  4277                                  
  4278                                  ; SYS init extended table,   DOS 3.3   F.C. 5/29/86
  4279                                  ;
  4280                                  	;PUBLIC	SysInitTable
  4281                                  
  4282                                  SysInitTable:	; label  byte
  4283 00000F3B [2600]                  	dw      SYSINITVARS			; pointer to sysinit var
  4284 00000F3D 0000                            dw      0                             	; segment
  4285 00000F3F [FD0F]                          dw      COUNTRY_CDPG		   	; pointer to country tabl
  4286 00000F41 0000                            dw      0                            	; segment of pointer
  4287                                  
  4288                                  ; DOS 3.3 F.C. 6/12/86
  4289                                  ; FASTOPEN communications area DOS 3.3   F.C. 5/29/86
  4290                                  ;
  4291                                  	;PUBLIC	FastOpenTable
  4292                                  	;PUBLIC	FastTable		; a better name
  4293                                  	;EXTRN	FastRet:FAR		; defined in misc2.asm
  4294                                  
  4295                                  ; MSDOS 6.0
  4296                                  ;FastTable:     ;label  byte		; a better name
  4297                                  ;FastOpenTable: ;label  byte
  4298                                  ;	dw      2                       ; number of entries
  4299                                  ;	dw      FastRet			; pointer to ret instr.
  4300                                  ;	dw      0                       ; and will be modified by
  4301                                  ;	dw      FastRet			; FASTxxx when loaded in
  4302                                  ;	dw      0                       
  4303                                  
  4304                                  ;
  4305                                  ; DOS 3.3 F.C. 6/12/86
  4306                                  ;
  4307                                  
  4308                                  ;	PUBLIC	FastFlg                 ; flags
  4309                                  ;FastFlg:	;label  byte		; don't change the foll: order
  4310                                  ;FastOpenFlg:
  4311                                  ;	db	0  ; I_am    FastOpenFlg,BYTE,<0>
  4312                                  
  4313                                  ; MSDOS 3.3
  4314                                  FastTable:
  4315                                  FastOpenTable:
  4316 00000F43 0400                    	dw      4 
  4317 00000F45 [0720]                  	dw      FastRet
  4318 00000F47 0000                    	dw      0  ; (('FastRet' segment will be set to CS by DOSINIT))
  4319                                  
  4320                                  	;PUBLIC	FastOpen_Ext_Info
  4321                                  
  4322                                  ; FastOpen_Ext_Info is used as a temporary storage for saving dirpos,dirsec
  4323                                  ; and clusnum  which are filled by DOS 3.ncwhen calling FastOpen Insert
  4324                                  ; or filled by FastOPen when calling FastOpen Lookup
  4325                                  
  4326                                  FastOpen_Ext_Info: ;label  byte		;dirpos
  4327 00000F49 00<rep 5h>              	times	FEI.size db 0	; 5 (for MSDOS 3.3), 11 (for MSDOS 6.0)
  4328                                  
  4329                                  ; Dir_Info_Buff is a dir entry buffer which is filled by FastOPen
  4330                                  ; when calling FastOpen Lookup
  4331                                  
  4332                                  	;PUBLIC	Dir_Info_Buff
  4333                                  
  4334                                  Dir_Info_Buff:	; label  byte
  4335 00000F4E 00<rep 20h>             	times	dir_entry.size db 0 ; 32 ; segment of pointer
  4336                                  
  4337                                  ; MSDOS 3.3 (IBMDOS.COM, 1987)
  4338                                  FastFlg:
  4339                                  FastOpenFlg:
  4340 00000F6E 00                      	db	0
  4341                                  
  4342                                  	;I_am	Next_Element_Start,WORD	; save next element start offset
  4343                                  Next_Element_Start:
  4344 00000F6F 0000                    	dw	0
  4345                                  
  4346                                  	; MSDOS 6.0
  4347                                  	;I_am    Del_ExtCluster,WORD     ; for dos_delete                       
  4348                                  
  4349                                  ; 17/07/2018
  4350                                  
  4351                                  ; The following is a stack and its pointer for interrupt 2F which is uesd
  4352                                  ; by NLSFUNC.  There is no significant use of this stack, we are just trying
  4353                                  ; not to destroy the INT 21 stack saved for the user.
  4354                                  
  4355                                  	;PUBLIC	USER_SP_2F
  4356                                  
  4357                                  USER_SP_2F:	; LABEL  WORD
  4358 00000F71 [730F]                  	dw	FAKE_STACK_2F
  4359                                  
  4360                                  	;PUBLIC	Packet_Temp
  4361                                  ;Packet_Temp	label  word		; temporary packet used by readtime
  4362                                  	;PUBLIC  DOS_TEMP		; temporary word
  4363                                  ;DOS_TEMP	label  word
  4364                                  FAKE_STACK_2F:
  4365                                  	;dw	14 dup (0)
  4366 00000F73 0000<rep Ch>            	times	12 dw 0			; 12 register temporary storage
  4367                                  
  4368                                  	;PUBLIC	Hash_Temp		; temporary word
  4369                                  ;Hash_Temp	label  word              
  4370                                  	;dw	4 dup (0)		; temporary hash table during config.sys
  4371                                  
  4372                                  	;PUBLIC  SCAN_FLAG             	; flag to indicate key ALT_Q
  4373                                  SCAN_FLAG:	; label  byte
  4374 00000F8B 00                      	db	0
  4375                                  
  4376                                  ; MSDOS 3.3
  4377                                  DISK_FULL:
  4378 00000F8C 00                      	db	0
  4379                                  
  4380                                  	;PUBLIC  DATE_FLAG
  4381                                  DATE_FLAG:   	;label  word 		; flag to
  4382 00000F8D 0000                    	dw     0                	; to update the date
  4383                                  
  4384                                  FETCHI_TAG:	;label  word		; OBSOLETE - no longer used
  4385 00000F8F 0000                    	dw     0			; formerly part of IBM's piracy protection
  4386                                  
  4387                                  ; MSDOS 6.0
  4388                                  ;      PUBLIC	MSG_EXTERROR 		; for system message addr              
  4389                                  ;MSG_EXTERROR	label  DWORD                                                     
  4390                                  ;               dd     0                ; for extended error                   
  4391                                  ;               dd     0                ; for parser                           
  4392                                  ;              	dd     0                ; for critical errror                  
  4393                                  ;              	dd     0                ; for IFS                              
  4394                                  ;              	dd     0                ; for code reduction                   
  4395                                  ;
  4396                                  ;      PUBLIC  	SEQ_SECTOR              ; last sector read                     
  4397                                  ;SEQ_SECTOR    	label  DWORD                                                     
  4398                                  ;              	dd     -1                                                        
  4399                                  ;
  4400                                  ;;      I_am    ACT_PAGE,WORD,<-1>      ; active EMS page                       
  4401                                  ;	I_am    SC_SECTOR_SIZE,WORD     ; sector size for SC                 
  4402                                  ;       I_am    SC_DRIVE,BYTE           ; drive # for secondary cache        
  4403                                  ;       I_am    CurSC_DRIVE,BYTE,<-1>   ; current SC drive                   
  4404                                  ;       I_am    CurSC_SECTOR,DWORD      ; current SC starting sector         
  4405                                  ;       I_am    SC_STATUS,WORD,<0>      ; SC status word                     
  4406                                  ;       I_am    SC_FLAG,BYTE,<0>        ; SC flag                            
  4407                                  ;       I_am    AbsDskErr,WORD,<0>	; Storage for Abs dsk read/write err
  4408                                  ;
  4409                                  ;	PUBLIC 	NO_NAME_ID                                                           
  4410                                  ;NO_NAME_ID	label byte                                                           
  4411                                  ;		db   'NO NAME    '	; null media id                      
  4412                                  ;
  4413                                  ;;hkn; moved from TABLE segment in kstrin.asm
  4414                                  ;
  4415                                  ;Public	KISTR001S,KISTR001E,LOOKSIZ	; 2/17/KK
  4416                                  ;KISTR001S	label	byte		; 2/17/KK
  4417                                  ;LOOKSIZ DB	0			; 0 if byte, NZ if word	2/17/KK
  4418                                  ;KISTR001E	label	byte		; 2/17/KK
  4419                                  ;
  4420                                  ;; the nul device driver used to be part of the code.  However, since the 
  4421                                  ;; header is in the data, and the entry points are only given as an offset,
  4422                                  ;; the strategy and interrupt entry points must also be in the data now.
  4423                                  ;;
  4424                                  ;
  4425                                  ;procedure   snuldev,far
  4426                                  ;assume ds:nothing,es:nothing,ss:nothing, cs:dosdata
  4427                                  ; 	or	es:[bx.reqstat],stdon	; set done bit
  4428                                  ;entry inuldev
  4429                                  ;	ret				; must not be a return!
  4430                                  ;endproc snuldev
  4431                                  ;
  4432                                  
  4433                                  ;============================================================================
  4434                                  ; MSTABLE.ASM, MSDOS 6.0, 1991
  4435                                  ;============================================================================
  4436                                  ; 17/07/2018 - Retro DOS v3.0
  4437                                  
  4438                                  ; ----------------------------------------------------------------------------
  4439                                  ; BREAK   <Copyright notice and version>
  4440                                  ; ----------------------------------------------------------------------------
  4441                                  
  4442                                  ;CODSTRT EQU     $
  4443                                  
  4444                                  ; 08/07/2018 - Retro DOS v3.0 by Erdogan Tan
  4445                                  ; (MSTABLE.ASM, MSDOS 6.0, 1991)
  4446                                  
  4447                                  ; NOTE WARNING: This declaration of HEADER must be THE LAST thing in this
  4448                                  ;       module. The reason is so that the data alignments are the same in
  4449                                  ;       IBM-DOS and MS-DOS up through header.
  4450                                  
  4451                                  	;PUBLIC	HEADER
  4452                                  
  4453                                  HEADER:	; LABEL	BYTE
  4454                                          ;IF	DEBUG
  4455                                          ;DB	13,10,"Debugging DOS version "
  4456                                          ;DB	MAJOR_VERSION + "0"
  4457                                          ;DB	"."
  4458                                          ;DB	(MINOR_VERSION / 10) + "0"
  4459                                          ;DB	(MINOR_VERSION MOD 10) + "0"
  4460                                          ;ENDIF
  4461                                  
  4462                                          ;IF	NOT IBM
  4463 00000F91 0D0A4D532D444F5320-             DB	13,10,"MS-DOS version "
  4463 00000F9A 76657273696F6E20   
  4464 00000FA2 33                              DB	MAJOR_VERSION + "0"
  4465 00000FA3 2E                              DB	"."
  4466 00000FA4 33                              DB	(MINOR_VERSION / 10) + "0"
  4467                                          ;DB	(MINOR_VERSION MOD 10) + "0"
  4468 00000FA5 30                              DB	(MINOR_VERSION % 10) + "0"
  4469                                  
  4470                                          ;IF	HIGHMEM
  4471                                          ;DB	"H"
  4472                                          ;ENDIF
  4473                                  
  4474 00000FA6 0D0A436F7079726967-     	DB	13,10,"Copyright 1981,82,83,84,88 Microsoft Corp.",13,10,"$"
  4474 00000FAF 687420313938312C38-
  4474 00000FB8 322C38332C38342C38-
  4474 00000FC1 38204D6963726F736F-
  4474 00000FCA 667420436F72702E0D-
  4474 00000FD3 0A24               
  4475                                  	;ENDIF
  4476                                  
  4477                                  ;IF DEBUG
  4478                                  ;	DB	13,10,"$"
  4479                                  ;ENDIF
  4480                                  
  4481                                  ;include copyrigh.inc
  4482                                  
  4483                                  	;DB	"MS DOS Version 6 (C)Copyright 1981-1993 Microsoft Corp "
  4484                                  	;DB	"Licensed Material - Property of Microsoft "
  4485                                  	;DB	"All rights reserved "
  4486                                  
  4487                                  ;============================================================================
  4488                                  ; MCODE.ASM, MSDOS 6.0, 1991
  4489                                  ;============================================================================
  4490                                  ; 17/07/2018 - Retro DOS v3.0
  4491                                  
  4492                                  ;	TITLE	MISC DOS ROUTINES - Int 25 and 26 handlers and other
  4493                                  ;	NAME	IBMCODE
  4494                                  
  4495                                  ;BREAK <NullDev -- Driver for null device>
  4496                                  
  4497                                  ; ROMDOS note:
  4498                                  ;	NUL device driver used to be here, but it was removed and placed in
  4499                                  ;	DOSDATA, because the entry points have to be in the segment as the
  4500                                  ;	header, which is also in DOSDATA.
  4501                                  
  4502                                  ;BREAK <AbsDRD, AbsDWRT -- INT int_disk_read, int_disk_write handlers>
  4503                                  
  4504                                  ;Public MSC001S,MSC001E
  4505                                  ;MSC001S label byte
  4506                                  	;IF	IBM
  4507                                  ; Codes returned by BIOS
  4508                                  ERRIN:
  4509 00000FD5 02                      	DB	2			; NO RESPONSE
  4510 00000FD6 06                      	DB	6			; SEEK FAILURE
  4511 00000FD7 0C                      	DB	12			; GENERAL ERROR
  4512 00000FD8 04                      	DB	4			; BAD CRC
  4513 00000FD9 08                      	DB	8			; SECTOR NOT FOUND
  4514 00000FDA 00                      	DB	0			; WRITE ATTEMPT ON WRITE-PROTECT DISK
  4515                                  ERROUT:
  4516                                  ; DISK ERRORS RETURNED FROM INT 25 and 26
  4517 00000FDB 80                      	DB	80H			; NO RESPONSE
  4518 00000FDC 40                      	DB	40H			; Seek failure
  4519 00000FDD 02                      	DB	2			; Address Mark not found
  4520 00000FDE 10                      	DB	10H			; BAD CRC
  4521 00000FDF 04                      	DB	4			; SECTOR NOT FOUND
  4522 00000FE0 03                      	DB	3			; WRITE ATTEMPT TO WRITE-PROTECT DISK
  4523                                  
  4524                                  NUMERR	EQU	$-ERROUT
  4525                                  	;ENDIF
  4526                                  ;MSC001E label byte
  4527                                  
  4528                                  ;============================================================================
  4529                                  ; DOSMES.INC (MSDOS 3.3, 1987)
  4530                                  ;============================================================================
  4531                                  ; 17/07/2018 - Retro DOS v3.0
  4532                                  
  4533                                  ;TABLE	SEGMENT BYTE PUBLIC 'TABLE'
  4534                                  
  4535                                  ; The international table(s). Used for DOS 3.x  (x < 3)
  4536                                  ; This is simply a sequence of tables of the following form:
  4537                                  ;
  4538                                  ; Offset
  4539                                  ;		BYTE  Size of this table excluding this byte and the next
  4540                                  ;		WORD  Country code represented by this table
  4541                                  ;			A sequence of n bytes, where n is the number specified
  4542                                  ;			by the first byte above and is not > internat_block_max,
  4543                                  ;			in the correct order for being returned by the
  4544                                  ;			INTERNATIONAL call as follows:
  4545                                  ;		WORD	Date format 0=mdy, 1=dmy, 2=ymd
  4546                                  ;		5 BYTE	Currency symbol null terminated
  4547                                  ;		2 BYTE	thousands separator null terminated
  4548                                  ;		2 BYTE	Decimal point null terminated
  4549                                  ;		2 BYTE	Date separator null terminated
  4550                                  ;		2 BYTE	Time separator null terminated
  4551                                  ;		1 BYTE	Bit field.  Currency format.
  4552                                  ;			Bit 0.	=0 $ before #  =1 $ after #
  4553                                  ;			Bit 1.	no. of spaces between # and $ (0 or 1)
  4554                                  ;			Bit 2.	=1 imbedded at decimal point, & no spaces;
  4555                                  ;		1 BYTE	No. of significant decimal digits in currency
  4556                                  ;		1 BYTE	Bit field.  Time format.
  4557                                  ;			Bit 0.	=0 12 hour clock  =1 24 hour
  4558                                  ;		WORD	Segment offset for address of case conversion routine
  4559                                  ;		WORD	RESERVED. Filled in by DOS. Segment value for above routine
  4560                                  ;		2 BYTE	Data list separator null terminated.
  4561                                  ;		   NOTE: The segment part of the DWORD Map_call is set
  4562                                  ;			by the INTERNATIONAL call. Do not try to initialize
  4563                                  ;			it to anything meaningful.
  4564                                  ;
  4565                                  ; The list of tables is terminated by putting a byte of -1 after the last
  4566                                  ;	table (a table with length -1).
  4567                                  
  4568                                  	; PUBLIC  international_table
  4569                                  
  4570                                  ; Offset 0F95h in IBMDOS.COM (MSDOS 3.3), 1987
  4571                                  
  4572                                  international_table:	; LABEL BYTE
  4573                                  
  4574 00000FE1 18                      	DB 	INTERNAT_BLOCK.size  ; = 24 ; Size in bytes of this table
  4575 00000FE2 0100                    	DW 	1		; Country code
  4576                                  USTABLE:
  4577 00000FE4 0000                    	dw	0		; 0-USA, 1-EUR, 2-JAP
  4578 00000FE6 2400000000              	db	'$',0,0,0,0	; Currency Symbol 5 bytes
  4579 00000FEB 2C00                    	db	',',0		; Thousands separator 2 bytes
  4580 00000FED 2E00                    	db	'.',0		; Decimal separator 2 bytes
  4581 00000FEF 2D00                    	db	'-',0		; Date separator 2 bytes
  4582 00000FF1 3A00                    	db	':',0		; Time separator 2 bytes
  4583 00000FF3 00                      	db	0		; Bit values
  4584                                                                 	;   Bit 0 = 0 if currency symbol first
  4585                                                                 	;         = 1 if currency symbol last
  4586                                                                 	;   Bit 1 = 0 if No space after currency symbol
  4587                                                                 	;         = 1 if space after currency symbol
  4588 00000FF4 02                      	db	2		; Number of places after currency dec point
  4589 00000FF5 00                      	db	0		; if 24 hour time, 0 if 12 hour time
  4590 00000FF6 [FE17]                  	dw	MAP_CASE	; Address of case mapping call (DWORD)
  4591 00000FF8 0000                            dw	0		; THIS IS TWO WORDS SO IT CAN BE INITIALIZED
  4592                                  				;  in pieces.
  4593 00000FFA 2C00                    	db	',',0		; Data list separator character
  4594                                  
  4595                                  ;	Tables for the IBM PC character set follow. The values
  4596                                  ;	associated with some of the currency symbols may change with
  4597                                  ;	other character sets. You may wish to add or delete country
  4598                                  ;	entries. NOTE: It is not a mistake that the JAPANESE entry
  4599                                  ;	has different currency symbols for the KANJI and
  4600                                  ;	non-KANJI versions.
  4601                                  	
  4602 00000FFC FF                      	DB	-1		; end of table
  4603                                  
  4604                                  ; The following table is used for DOS 3.3
  4605                                  ;DOS country and code page information is defined here for DOS 3.3.
  4606                                  ;The initial value for ccDosCountry is 1 (USA).
  4607                                  ;The initial value for ccDosCodepage is 850.
  4608                                  ;
  4609                                  ;
  4610                                  	;PUBLIC  COUNTRY_CDPG,UCASE_TAB,FILE_UCASE_TAB
  4611                                  	;PUBLIC  FILE_CHAR_TAB
  4612                                  
  4613                                  ; country and code page infomation
  4614                                  
  4615                                  COUNTRY_CDPG:	; label  byte
  4616 00000FFD 0000000000000000        	db	0,0,0,0,0,0,0,0		; reserved words
  4617 00001005 5C434F554E5452592E-     	db	'\COUNTRY.SYS',0	; path name of country.sys
  4617 0000100E 53595300           
  4618 00001012 00<rep 33h>             	times	51 db 0
  4619 00001045 B501                    	dw	437			; system code page id
  4620 00001047 0500                    	dw	5			; number of entries
  4621 00001049 02                      	db	SetUcase		; Ucase type
  4622 0000104A [8610]                  	dw	UCASE_TAB		; pointer to upper case table
  4623 0000104C 0000                    	dw	0			; segment of poiter
  4624 0000104E 04                      	db	SetUcaseFile		; Ucase file char type
  4625 0000104F [0811]                  	dw	FILE_UCASE_TAB		; pointer to file upper case table
  4626 00001051 0000                    	dw	0			; segment of poiter
  4627 00001053 05                      	db	SetFileList		; valid file chars type
  4628 00001054 [8A11]                  	dw	FILE_CHAR_TAB		; pointer to valid file char tab
  4629 00001056 0000                    	dw	0			; segment of poiter
  4630 00001058 06                      	db	SetCollate		; collate type
  4631 00001059 [BA11]                  	dw	COLLATE_TAB		; pointer to collate table
  4632 0000105B 0000                    	dw	0			; segment of pointer
  4633 0000105D 01                      	db	SetCountryInfo		; country info type
  4634 0000105E 2600                    	dw	NEW_COUNTRY_SIZE	; extended country info size
  4635 00001060 0100                    	dw	1			; USA country id
  4636 00001062 B501                    	dw	437			; USA system code page id
  4637 00001064 0000                    	dw	0			; date format
  4638 00001066 2400000000              	db	'$',0,0,0,0		; currency symbol
  4639 0000106B 2C00                    	db	',',0			; thousand separator
  4640 0000106D 2E00                    	db	'.',0			; decimal separator
  4641 0000106F 2D00                    	db	'-',0			; date separator
  4642 00001071 3A00                    	db	':',0			; time separator
  4643 00001073 00                      	db	0			; currency format flag
  4644 00001074 02                      	db	2			; # of disgit in currency
  4645 00001075 00                      	db	0			; time format
  4646 00001076 [FE17]                  	dw	MAP_CASE		;mono case routine entry point
  4647 00001078 0000                    	dw	0			; segment of entry point
  4648 0000107A 2C00                    	db	',',0			; data list separator
  4649 0000107C 000000000000000000-     	dw	0,0,0,0,0		; reserved
  4649 00001085 00                 
  4650                                  
  4651                                  ; upper case table
  4652                                  
  4653                                  UCASE_TAB: 	; label   byte
  4654 00001086 8000                    	dw	128
  4655 00001088 809A45418E418F80        	db	128,154,069,065,142,065,143,128
  4656 00001090 4545454949498E8F        	db	069,069,069,073,073,073,142,143
  4657 00001098 9092924F994F5555        	db	144,146,146,079,153,079,085,085
  4658 000010A0 59999A9B9C9D9E9F        	db	089,153,154,155,156,157,158,159
  4659 000010A8 41494F55A5A5A6A7        	db	065,073,079,085,165,165,166,167
  4660 000010B0 A8A9AAABACADAEAF        	db	168,169,170,171,172,173,174,175
  4661 000010B8 B0B1B2B3B4B5B6B7        	db	176,177,178,179,180,181,182,183
  4662 000010C0 B8B9BABBBCBDBEBF        	db	184,185,186,187,188,189,190,191
  4663 000010C8 C0C1C2C3C4C5C6C7        	db	192,193,194,195,196,197,198,199
  4664 000010D0 C8C9CACBCCCDCECF        	db	200,201,202,203,204,205,206,207
  4665 000010D8 D0D1D2D3D4D5D6D7        	db	208,209,210,211,212,213,214,215
  4666 000010E0 D8D9DADBDCDDDEDF        	db	216,217,218,219,220,221,222,223
  4667 000010E8 E0E1E2E3E4E5E6E7        	db	224,225,226,227,228,229,230,231
  4668 000010F0 E8E9EAEBECEDEEEF        	db	232,233,234,235,236,237,238,239
  4669 000010F8 F0F1F2F3F4F5F6F7        	db	240,241,242,243,244,245,246,247
  4670 00001100 F8F9FAFBFCFDFEFF        	db	248,249,250,251,252,253,254,255
  4671                                  
  4672                                  ; file upper case table
  4673                                  
  4674                                  FILE_UCASE_TAB: ; label  byte
  4675 00001108 8000                    	dw	128
  4676 0000110A 809A45418E418F80        	db	128,154,069,065,142,065,143,128
  4677 00001112 4545454949498E8F        	db	069,069,069,073,073,073,142,143
  4678 0000111A 9092924F994F5555        	db	144,146,146,079,153,079,085,085
  4679 00001122 59999A9B9C9D9E9F        	db	089,153,154,155,156,157,158,159
  4680 0000112A 41494F55A5A5A6A7        	db	065,073,079,085,165,165,166,167
  4681 00001132 A8A9AAABACADAEAF        	db	168,169,170,171,172,173,174,175
  4682 0000113A B0B1B2B3B4B5B6B7        	db	176,177,178,179,180,181,182,183
  4683 00001142 B8B9BABBBCBDBEBF        	db	184,185,186,187,188,189,190,191
  4684 0000114A C0C1C2C3C4C5C6C7        	db	192,193,194,195,196,197,198,199
  4685 00001152 C8C9CACBCCCDCECF        	db	200,201,202,203,204,205,206,207
  4686 0000115A D0D1D2D3D4D5D6D7        	db	208,209,210,211,212,213,214,215
  4687 00001162 D8D9DADBDCDDDEDF        	db	216,217,218,219,220,221,222,223
  4688 0000116A E0E1E2E3E4E5E6E7        	db	224,225,226,227,228,229,230,231
  4689 00001172 E8E9EAEBECEDEEEF        	db	232,233,234,235,236,237,238,239
  4690 0000117A F0F1F2F3F4F5F6F7        	db	240,241,242,243,244,245,246,247
  4691 00001182 F8F9FAFBFCFDFEFF        	db	248,249,250,251,252,253,254,255
  4692                                  
  4693                                  ; file char list
  4694                                  
  4695                                  FILE_CHAR_TAB:	; label  byte
  4696 0000118A 1600                    	dw	22				; length
  4697 0000118C 0100FF                  	db	1,0,255 			; include all
  4698 0000118F 000020                  	db	0,0,20h 			; exclude 0 - 20h
  4699 00001192 020E2E222F5C5B5D3A-     	db	2,14,'."/\[]:|<>+=;,'           ; exclude 14 special
  4699 0000119B 7C3C3E2B3D3B2C     
  4700                                  	;db	24 dup (?)			; reserved
  4701 000011A2 00<rep 18h>             	times	24 db 0
  4702                                  
  4703                                  ; collate table
  4704                                  
  4705                                  COLLATE_TAB:	; label   byte
  4706 000011BA 0001                    	dw	256
  4707 000011BC 0001020304050607        	db	0,1,2,3,4,5,6,7
  4708 000011C4 08090A0B0C0D0E0F        	db	8,9,10,11,12,13,14,15
  4709 000011CC 1011121314151617        	db	16,17,18,19,20,21,22,23
  4710 000011D4 18191A1B1C1D1E1F        	db	24,25,26,27,28,29,30,31
  4711 000011DC 2021222324252627        	db	" ","!",'"',"#","$","%","&","'"
  4712 000011E4 28292A2B2C2D2E2F        	db	"(",")","*","+",",","-",".","/"
  4713 000011EC 3031323334353637        	db	"0","1","2","3","4","5","6","7"
  4714 000011F4 38393A3B3C3D3E3F        	db	"8","9",":",";","<","=",">","?"
  4715 000011FC 4041424344454647        	db	"@","A","B","C","D","E","F","G"
  4716 00001204 48494A4B4C4D4E4F        	db	"H","I","J","K","L","M","N","O"
  4717 0000120C 5051525354555657        	db	"P","Q","R","S","T","U","V","W"
  4718 00001214 58595A5B5C5D5E5F        	db	"X","Y","Z","[","\","]","^","_"
  4719 0000121C 6041424344454647        	db	"`","A","B","C","D","E","F","G"
  4720 00001224 48494A4B4C4D4E4F        	db	"H","I","J","K","L","M","N","O"
  4721 0000122C 5051525354555657        	db	"P","Q","R","S","T","U","V","W"
  4722 00001234 58595A7B7C7D7E7F        	db	"X","Y","Z","{","|","}","~",127
  4723 0000123C 4355454141414143        	db	"C","U","E","A","A","A","A","C"
  4724 00001244 4545454949494141        	db	"E","E","E","I","I","I","A","A"
  4725 0000124C 4541414F4F4F5555        	db	"E","A","A","O","O","O","U","U"
  4726 00001254 594F552424242424        	db	"Y","O","U","$","$","$","$","$"
  4727 0000125C 41494F554E4EA6A7        	db	"A","I","O","U","N","N",166,167
  4728 00001264 3FA9AAABAC212222        	db	"?",169,170,171,172,"!",'"','"'
  4729 0000126C B0B1B2B3B4B5B6B7        	db	176,177,178,179,180,181,182,183
  4730 00001274 B8B9BABBBCBDBEBF        	db	184,185,186,187,188,189,190,191
  4731 0000127C C0C1C2C3C4C5C6C7        	db	192,193,194,195,196,197,198,199
  4732 00001284 C8C9CACBCCCDCECF        	db	200,201,202,203,204,205,206,207
  4733 0000128C D0D1D2D3D4D5D6D7        	db	208,209,210,211,212,213,214,215
  4734 00001294 D8D9DADBDCDDDEDF        	db	216,217,218,219,220,221,222,223
  4735 0000129C E053                    	db	224,"S"
  4736 0000129E E2E3E4E5E6E7            	db	226,227,228,229,230,231
  4737 000012A4 E8E9EAEBECEDEEEF        	db	232,233,234,235,236,237,238,239
  4738 000012AC F0F1F2F3F4F5F6F7        	db	240,241,242,243,244,245,246,247
  4739 000012B4 F8F9FAFBFCFDFEFF        	db	248,249,250,251,252,253,254,255
  4740                                  
  4741                                  ;include divmes.inc
  4742                                  
  4743                                  ; THIS IS THE ONLY DOS "MESSAGE". IT DOES NOT NEED A TERMINATOR.
  4744                                  	;PUBLIC	DIVMES
  4745                                  
  4746 000012BC 0D0A44697669646520-     DIVMES:	DB	13,10,"Divide overflow",13,10
  4746 000012C5 6F766572666C6F770D-
  4746 000012CE 0A                 
  4747                                  
  4748                                  	;PUBLIC	DivMesLen
  4749                                  DivMesLen:
  4750 000012CF 1300                    	DW	$-DIVMES	; Length of the above message in bytes
  4751                                  
  4752                                  ;SUBTTL EDIT FUNCTION ASSIGNMENTS AND HEADERS
  4753                                  
  4754                                  ; The following two tables implement the current buffered input editing
  4755                                  ; routines. The tables are pairwise associated in reverse order for ease
  4756                                  ; in indexing. That is; The first entry in ESCTAB corresponds to the last
  4757                                  ; entry in ESCFUNC, and the last entry in ESCTAB to the first entry in ESCFUNC.
  4758                                  
  4759                                  	;PUBLIC	CANCHAR
  4760                                  CANCHAR:
  4761 000012D1 1B                      	DB	CANCEL	; 1Bh	;Cancel line character
  4762                                  	
  4763                                  	;PUBLIC	ESCCHAR
  4764                                  ESCCHAR:
  4765 000012D2 00                      	DB	ESCCH	; 0	;Lead-in character for escape sequences
  4766                                  	
  4767                                  	;IF	NOT Rainbow
  4768                                  
  4769                                  ESCTAB:	; LABEL BYTE
  4770                                  
  4771                                  	;IF	IBM
  4772 000012D3 40                      	DB	64		; Ctrl-Z - F6
  4773 000012D4 4D                      	DB	77		; Copy one char - -->
  4774 000012D5 3B                      	DB	59		; Copy one char - F1
  4775 000012D6 53                      	DB	83		; Skip one char - DEL
  4776 000012D7 3C                      	DB	60		; Copy to char - F2
  4777 000012D8 3E                      	DB	62		; Skip to char - F4
  4778 000012D9 3D                      	DB	61		; Copy line - F3
  4779 000012DA 3D                      	DB	61		; Kill line (no change to template ) - Not used
  4780 000012DB 3F                      	DB	63		; Reedit line (new template) - F5
  4781 000012DC 4B                      	DB	75		; Backspace - <--
  4782 000012DD 52                      	DB	82		; Enter insert mode - INS (toggle)
  4783 000012DE 52                      	DB	82		; Exit insert mode - INS (toggle)
  4784 000012DF 41                      	DB	65		; Escape character - F7
  4785 000012E0 41                      	DB	65		; End of table
  4786                                  	;ENDIF
  4787                                  
  4788                                  ESCEND: ; LABEL BYTE
  4789                                  
  4790                                  ESCTABLEN EQU ESCEND-ESCTAB
  4791                                  
  4792                                  ESCFUNC: ; LABEL WORD
  4793                                  	
  4794 000012E1 [3F21]                  	short_addr  GETCH	; Ignore the escape sequence
  4795 000012E3 [2C22]                  	short_addr  TWOESC
  4796 000012E5 [B422]                  	short_addr  EXITINS
  4797 000012E7 [B422]                  	short_addr  ENTERINS
  4798 000012E9 [B621]                  	short_addr  BACKSP
  4799 000012EB [A022]                  	short_addr  REEDIT
  4800 000012ED [A321]                  	short_addr  KILNEW
  4801 000012EF [3322]                  	short_addr  COPYLIN
  4802 000012F1 [6622]                  	short_addr  SKIPSTR
  4803 000012F3 [3922]                  	short_addr  COPYSTR
  4804 000012F5 [5C22]                  	short_addr  SKIPONE
  4805 000012F7 [3E22]                  	short_addr  COPYONE
  4806 000012F9 [3E22]                  	short_addr  COPYONE
  4807 000012FB [BC22]                  	short_addr  CTRLZ
  4808                                  
  4809                                  	;ENDIF
  4810                                  
  4811                                  ;TABLE	ENDS
  4812                                  
  4813                                  ; 17/07/2018
  4814                                  ; Offset 12B1h of IBMDOS.COM (MSDOS 3.3), 1987
  4815                                  
  4816                                  ;CRTERRTAB: ; 19/07/2018	
  4817                                  ;	db	0,5,52h,50h,3,5,20h
  4818                                  
  4819                                  ; 08/08/2018
  4820                                  
  4821                                  CRTERRTAB:	;LABEL BYTE	; Lookup table for MakeNode returns
  4822 000012FD 00                      	DB	0			; none
  4823 000012FE 05                      	DB	error_access_denied	; MakeNode error 1
  4824 000012FF 52                      	DB	error_cannot_make	; MakeNode error 2
  4825 00001300 50                      	DB	error_file_exists	; MakeNode error 3
  4826 00001301 03                      	DB	error_path_not_found	; MakeNode error 4
  4827 00001302 05                      	DB	error_access_denied	; MakeNode error 5
  4828 00001303 20                      	DB	error_sharing_violation ; MakeNode error 6
  4829                                  	; MSDOS 6.0
  4830                                  	;DB	error_file_not_found	; MakeNode error 7
  4831                                  
  4832                                  ;============================================================================
  4833                                  ; DEV.ASM (MSDOS 6.0, 1987)
  4834                                  ;============================================================================
  4835                                  ; 17/07/2018 - Retro DOS v3.0
  4836                                  
  4837                                  ; Offset 12B8h of IBMDOS.COM (MSDOS 3.3), 1987
  4838                                  
  4839                                  ;Public DEV001S, DEV001E 		; Pathgen labels
  4840                                  ;DEV001s:
  4841                                  ;		length of packets
  4842 00001304 160E160D0F0E            LenTab:		DB	DRDWRHL, DRDNDHL, DRDWRHL, DSTATHL, DFLSHL, DRDNDHL
  4843                                  ;LenTab:	db	22,14,22,13,15,14
  4844                                  
  4845                                  ;	       Error Function
  4846                                  
  4847                                  CmdTab:
  4848 0000130A 8604                    	DB	86h, DEVRD	; 0 input
  4849 0000130C 8605                    	DB	86h, DEVRDND	; 1 input status
  4850 0000130E 8708                    	DB	87h, DEVWRT	; 2 output
  4851 00001310 870A                    	DB	87h, DEVOST	; 3 output status
  4852 00001312 8607                    	DB	86h, DEVIFL	; 4 input flush
  4853 00001314 8605                    	DB	86H, DEVRDND	; 5 input status with system WAIT
  4854                                  
  4855                                  ; Offset 12BEh of IBMDOS.COM (MSDOS 3.3), 1987
  4856                                  
  4857                                  ;CmdTab:
  4858                                  ;	db	86h, 4
  4859                                  ;	db	86h, 5
  4860                                  ;	db	87h, 8
  4861                                  ;	db	87h, 10
  4862                                  ;	db	86h, 7
  4863                                  ;	db	86h, 5
  4864                                  
  4865                                  ;DEV001E:
  4866                                  
  4867                                  ;============================================================================
  4868                                  ; FCB.ASM (MSDOS 6.0, 1987)
  4869                                  ;============================================================================
  4870                                  ; 17/07/2018 - Retro DOS v3.0
  4871                                  
  4872                                  ; Character type table for file name scanning
  4873                                  ; Table provides a mapping of characters to validity bits.
  4874                                  ; Four bits are provided for each character.  Values 7Dh and above
  4875                                  ; have all bits set, so that part of the table is chopped off, and
  4876                                  ; the translation routine is responsible for screening these values.
  4877                                  ; The bit values are defined in DOSSYM.INC
  4878                                  
  4879                                  ;	      ; ^A and NUL
  4880                                  ;CharType:
  4881                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
  4882                                  ;
  4883                                  ;	      ; ^C and ^B
  4884                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
  4885                                  ;
  4886                                  ;	      ; ^E and ^D
  4887                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
  4888                                  ;
  4889                                  ;	      ; ^G and ^F
  4890                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
  4891                                  ;
  4892                                  ;	      ; TAB and BS
  4893                                  ;	 db   LOW ((NOT FFCB+FCHK+FDELIM+FSPCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
  4894                                  ;
  4895                                  ;	      ; ^K and ^J
  4896                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
  4897                                  ;
  4898                                  ;	      ; ^M and ^L
  4899                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
  4900                                  ;
  4901                                  ;	      ; ^O and ^N
  4902                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
  4903                                  ;
  4904                                  ;	      ; ^Q and ^P
  4905                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
  4906                                  ;
  4907                                  ;	      ; ^S and ^R
  4908                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
  4909                                  ;
  4910                                  ;	      ; ^U and ^T
  4911                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
  4912                                  ;
  4913                                  ;	      ; ^W and ^V
  4914                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
  4915                                  ;
  4916                                  ;	      ; ^Y and ^X
  4917                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
  4918                                  ;
  4919                                  ;	      ; ESC and ^Z
  4920                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
  4921                                  ;
  4922                                  ;	      ; ^] and ^;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
  4924                                  ;
  4925                                  ;	      ; ^_ and ^^
  4926                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
  4927                                  ;
  4928                                  ;	      ; ! and SPACE
  4929                                  ;	 db   LOW (NOT FCHK+FDELIM+FSPCHK)
  4930                                  ;
  4931                                  ;	      ; # and "
  4932                                  ;	 db   LOW (NOT FFCB+FCHK)
  4933                                  ;
  4934                                  ;	      ; $ - )
  4935                                  ;	 db   3 dup (0FFh)
  4936                                  ;
  4937                                  ;	      ; + and *
  4938                                  ;	 db   LOW ((NOT FFCB+FCHK+FDELIM) SHL 4) OR 0Fh
  4939                                  ;
  4940                                  ;	      ; - and '
  4941                                  ;	 db   NOT (FFCB+FCHK+FDELIM)
  4942                                  ;
  4943                                  ;	      ; / and .
  4944                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FCHK) AND 0Fh
  4945                                  ;
  4946                                  ;	      ; 0 - 9
  4947                                  ;	 db   5 dup (0FFh)
  4948                                  ;
  4949                                  ;	      ; ; and :
  4950                                  ;	 db   LOW ((NOT FFCB+FCHK+FDELIM) SHL 4) OR LOW (NOT FFCB+FCHK+FDELIM) AND 0Fh
  4951                                  ;
  4952                                  ;	      ; = and <
  4953                                  ;	 db   LOW ((NOT FFCB+FCHK+FDELIM) SHL 4) OR LOW (NOT FFCB+FCHK+FDELIM) AND 0Fh
  4954                                  ;
  4955                                  ;	      ; ? and >
  4956                                  ;	 db   NOT FFCB+FCHK+FDELIM
  4957                                  ;
  4958                                  ;	      ; A - Z
  4959                                  ;	 db   13 dup (0FFh)
  4960                                  ;
  4961                                  ;	      ; \ and [
  4962                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR 0Fh
  4963                                  ;
  4964                                  ;	      ; ^ and ]
  4965                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
  4966                                  ;
  4967                                  ;	      ; _ - {
  4968                                  ;	 db   15 dup (0FFh)
  4969                                  ;
  4970                                  ;	      ; } and |
  4971                                  ;	 db   NOT FFCB+FCHK+FDELIM
  4972                                  
  4973                                  ;CharType_last equ ($ - CharType) * 2	; This is the value of the last
  4974                                  ;					; character in the table
  4975                                  
  4976                                  ; Offset 12CAh of IBMDOS.COM (MSDOS 3.3), 1987
  4977                                  
  4978                                  CharType:
  4979 00001316 F6F6F6F6F6F6F6F6                db 0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h
  4980 0000131E F6F0F6F6F6F6F6F6        	db 0F6h,0F0h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h
  4981 00001326 F6F6F6F6F6F6F6F6        	db 0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h
  4982 0000132E F6F6F6F6F6F6F6F6        	db 0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h
  4983 00001336 F8FFF6FFFFFFFFFF        	db 0F8h,0FFh,0F6h,0FFh,0FFh,0FFh,0FFh,0FFh
  4984 0000133E FFFFFFF4F4FFFEF6        	db 0FFh,0FFh,0FFh,0F4h,0F4h,0FFh,0FEh,0F6h
  4985 00001346 FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  4986 0000134E FFFFF4F4F4F4F4FF        	db 0FFh,0FFh,0F4h,0F4h,0F4h,0F4h,0F4h,0FFh
  4987 00001356 FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  4988 0000135E FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  4989 00001366 FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  4990 0000136E FFFFFFF6F6F6FFFF        	db 0FFh,0FFh,0FFh,0F6h,0F6h,0F6h,0FFh,0FFh
  4991 00001376 FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  4992 0000137E FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  4993 00001386 FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  4994 0000138E FFFFFFFFF4FFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0F4h,0FFh,0FFh,0FFh
  4995 00001396 FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  4996 0000139E FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  4997 000013A6 FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  4998 000013AE FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  4999 000013B6 FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  5000 000013BE FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  5001 000013C6 FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  5002 000013CE FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  5003 000013D6 FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  5004 000013DE FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  5005 000013E6 FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  5006 000013EE FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  5007 000013F6 FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  5008 000013FE FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  5009 00001406 FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  5010 0000140E FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  5011                                  
  5012                                  ; 02/08/2018 - Retro DOS v3.0
  5013                                  ; DOSTAB.ASM - MSDOS 6.0 - 1991
  5014                                  
  5015                                  ; Offset 13CAh of IBMDOS.COM (MSDOS 3.3), 1987
  5016                                  
  5017 00001416 0000                    exec_init_SP:	dw 0
  5018 00001418 0000                    exec_init_SS:	dw 0
  5019 0000141A 0000                    exec_init_IP:	dw 0
  5020 0000141C 0000                    exec_init_CS:	dw 0
  5021                                  
  5022 0000141E 0000                    exec_signature:	dw 0	; must contain 4D5A  (yay zibo!)
  5023 00001420 0000                    exec_len_mod_512: dw 0	; low 9 bits of length
  5024 00001422 0000                    exec_pages:	dw 0	; number of 512b pages in file
  5025 00001424 0000                    exec_rle_count:	dw 0	; count of reloc entries
  5026 00001426 0000                    exec_par_dir:	dw 0	; number of paragraphs before image
  5027 00001428 0000                    exec_min_BSS:	dw 0	; minimum number of para of BSS
  5028 0000142A 0000                    exec_max_BSS:	dw 0	; max number of para of BSS
  5029 0000142C 0000                    exec_SS:	dw 0	; stack of image
  5030 0000142E 0000                    exec_SP:	dw 0	; SP of image
  5031 00001430 0000                    exec_chksum:	dw 0	; checksum  of file (ignored)
  5032 00001432 0000                    exec_IP:	dw 0	; IP of entry
  5033 00001434 0000                    exec_CS:	dw 0	; CS of entry
  5034 00001436 0000                    exec_rle_table:	dw 0	; byte offset of reloc table
  5035                                  
  5036                                  Exec_Header_Len	EQU $-exec_signature
  5037                                  
  5038                                  ; 02/08/2018 - Retro DOS v3.0
  5039                                  ; SRVCALL.ASM - MSDOS 6.0 - 1991
  5040                                  ;** Server DOS call functions
  5041                                  
  5042 00001438 [3C14]                  SERVERTAB:      dw SERVER_DISP
  5043 0000143A [E566]                  SERVERLEAVE:	dw SERVERRETURN
  5044 0000143C 0B                      SERVER_DISP:	db (SERVER_DISP_END-SERVER_DISP-1)/2
  5045 0000143D [5067]                  		dw SRV_CALL	; 0
  5046 0000143F [E666]                  		dw COMMIT_ALL	; 1
  5047 00001441 [1D67]                  		dw CLOSE_NAME	; 2
  5048 00001443 [2967]                  		dw CLOSE_UID	; 3
  5049 00001445 [3067]                  		dw CLOSE_UID_PID ; 4
  5050 00001447 [3767]                  		dw GET_LIST	; 5
  5051 00001449 [9167]                  		dw GET_DOS_DATA	; 6
  5052 0000144B [B567]                  		dw SPOOL_OPER	; 7
  5053 0000144D [B567]                  		dw SPOOL_OPER	; 8
  5054 0000144F [B567]                  		dw SPOOL_OPER	; 9
  5055 00001451 [C467]                  		dw _$SetExtendedError ; 10
  5056                                  SERVER_DISP_END:
  5057                                  
  5058                                  ;============================================================================
  5059                                  ; MSCODE.ASM
  5060                                  ;============================================================================
  5061                                  
  5062                                  ; Retro DOS v2.0 (NASM 2.11) source code modifications by Erdogan Tan
  5063                                  ; 03/03/2018
  5064                                  
  5065                                  ;
  5066                                  ; MSCODE.ASM -- MSDOS code
  5067                                  ;
  5068                                  
  5069                                  ;INCLUDE DOSSEG.ASM
  5070                                  ;INCLUDE STDSW.ASM
  5071                                  
  5072                                  ;CODE    SEGMENT BYTE PUBLIC  'CODE'
  5073                                  ;ASSUME  CS:DOSGROUP,DS:NOTHING,ES:NOTHING,SS:NOTHING
  5074                                  
  5075                                  ;.xcref
  5076                                  ;INCLUDE DOSSYM.ASM
  5077                                  ;INCLUDE DEVSYM.ASM
  5078                                  ;.cref
  5079                                  ;.list
  5080                                  
  5081                                  ;IFNDEF  KANJI
  5082                                  ;KANJI   EQU     0       ; FALSE
  5083                                  ;ENDIF
  5084                                  
  5085                                  ;IFNDEF  IBM
  5086                                  ;IBM     EQU     0
  5087                                  ;ENDIF
  5088                                  
  5089                                  ;IFNDEF  HIGHMEM
  5090                                  ;HIGHMEM  EQU     0
  5091                                  ;ENDIF
  5092                                  
  5093                                          ;i_need  USER_SP,WORD
  5094                                          ;i_need  USER_SS,WORD
  5095                                          ;i_need  SAVEDS,WORD
  5096                                          ;i_need  SAVEBX,WORD
  5097                                          ;i_need  INDOS,BYTE
  5098                                          ;i_need  NSP,WORD
  5099                                          ;i_need  NSS,WORD
  5100                                          ;i_need  CURRENTPDB,WORD
  5101                                          ;i_need  AUXSTACK,BYTE
  5102                                          ;i_need  CONSWAP,BYTE
  5103                                          ;i_need  IDLEINT,BYTE
  5104                                          ;i_need  NOSETDIR,BYTE
  5105                                          ;i_need  ERRORMODE,BYTE
  5106                                          ;i_need  IOSTACK,BYTE
  5107                                          ;i_need  WPERR,BYTE
  5108                                          ;i_need  DSKSTACK,BYTE
  5109                                          ;i_need  CNTCFLAG,BYTE
  5110                                          ;i_need  LEAVEADDR,WORD
  5111                                          ;i_need  NULLDEVPT,DWORD
  5112                                  
  5113                                          ;IF NOT IBM
  5114                                          ;i_need  OEM_HANDLER,DWORD
  5115                                          ;ENDIF
  5116                                  
  5117                                          ;EXTRN   DSKSTATCHK:NEAR,GETBP:NEAR,DSKREAD:NEAR,DSKWRITE:NEAR
  5118                                  
  5119                                  ;============================================================================
  5120                                  ; MSDISP.ASM, MSDOS 6.0, 1991
  5121                                  ;============================================================================
  5122                                  ; 11/07/2018 - Retro DOS v3.0
  5123                                  
  5124                                  ; 18/07/2018
  5125                                  
  5126                                  ; The following two routines are dispatched to directly with ints disabled
  5127                                  ; immediately after the int 21h entry.	no DIS state is set.
  5128                                  
  5129                                  ; ---------------------------------------------------------------------------
  5130                                  ; $Set_current_PDB takes BX and sets it to be the current process
  5131                                  ;   *** THIS FUNCTION CALL IS SUBJECT TO CHANGE!!! ***
  5132                                  ;
  5133                                         ;procedure   $SET_CURRENT_PDB,NEAR
  5134                                  _$SET_CURRENT_PDB:
  5135                                          ;ASSUME	DS:NOTHING,SS:NOTHING
  5136 00001453 2E891E[DE02]                    MOV     [CS:CurrentPDB],BX ; 12/03/2018
  5137 00001458 CF                      	iret ; 08/07/2018 - Retro DOS v3.0
  5138                                  ;$SET_CURRENT_PDB    ENDP
  5139                                  
  5140                                  ; ---------------------------------------------------------------------------
  5141                                  ; $get_current_PDB returns in BX the current process
  5142                                  ;   *** THIS FUNCTION CALL IS SUBJECT TO CHANGE!!! ***
  5143                                  ;
  5144                                          ;procedure $GET_CURRENT_PDB,NEAR
  5145                                  _$GET_CURRENT_PDB:
  5146                                          ;ASSUME	DS:NOTHING,SS:NOTHING
  5147 00001459 2E8B1E[DE02]            	mov	BX,[CS:CurrentPDB] ; 11/07/2018
  5148 0000145E CF                      	iret ; 08/07/2018 - Retro DOS v3.0
  5149                                  ;$GET_CURRENT_PDB    ENDP
  5150                                  ; ---------------------------------------------------------------------------
  5151                                  
  5152                                  ; 11/07/2018 - Retro DOS v3.0
  5153                                  
  5154                                  ;BREAK <$Set_CTRL_C_Trapping -- En/Disable ^C check in dispatcher>
  5155                                  
  5156                                  _$SET_CTRL_C_TRAPPING:
  5157                                  
  5158                                  ; Inputs:
  5159                                  ;       AL = 0 read ^C status
  5160                                  ;       AL = 1 Set ^C status, DL = 0/1 for ^C off/on
  5161                                  ;	AL = 2 Set ^C status to contents of DL.	Output is old state.
  5162                                  ;	     (MSDISP.ASM,MSDOS 6.0, 1991)
  5163                                  ; Function:
  5164                                  ;       Enable disable ^C checking in dispatcher
  5165                                  ; Outputs:
  5166                                  ;       If AL = 0 then DL = 0/1 for ^C off/on
  5167                                  
  5168                                  	; 08/07/2018 - Retro DOS v3.0
  5169                                  
  5170 0000145F 08C0                            OR      AL,AL
  5171 00001461 7506                            JNZ     SHORT CTRL_C_set
  5172                                  
  5173                                  	; 11/07/2018
  5174 00001463 2E8A16[E502]            	mov	dl,[CS:CNTCFLAG]
  5175 00001468 CF                      	iret
  5176                                  
  5177                                  CTRL_C_set:
  5178                                  	; 08/07/2018
  5179 00001469 3C02                    	cmp	al,2
  5180 0000146B 7716                    	ja	short bad_val
  5181 0000146D 740B                    	je	short scct_3
  5182                                  
  5183 0000146F 52                      	push    dx
  5184 00001470 80E201                  	and     dl,1
  5185 00001473 2E8816[E502]            	mov     [cs:CNTCFLAG],dl
  5186 00001478 5A                      	pop     dx
  5187 00001479 CF                      	iret
  5188                                  
  5189                                  scct_3:
  5190 0000147A 80E201                  	and	dl,1
  5191 0000147D 2E8616[E502]                    xchg	dl,[CS:CNTCFLAG]
  5192 00001482 CF                              iret
  5193                                  
  5194                                  bad_val:
  5195 00001483 B0FF                    	MOV	AL,0FFH
  5196 00001485 CF                      	iret
  5197                                  
  5198                                  ; 11/07/2018
  5199                                  
  5200                                  _$SET_PRINTER_FLAG:
  5201                                  	; 08/07/2018 - Retro DOS v3.0
  5202                                  	;mov 	[cs:IOSTACK],al
  5203 00001486 2EA2[060A]              	mov	[cs:PRINTER_FLAG],al
  5204 0000148A CF                      	iret
  5205                                  
  5206                                  ; 08/07/2018 - Retro DOS v3.0
  5207                                  ; (MSDISP.ASM, MSDOS 6.0, 1991)
  5208                                  
  5209                                  ; ----------------------------------------------------------------------------
  5210                                  ; BREAK   <System call entry points and dispatcher>
  5211                                  ; ----------------------------------------------------------------------------
  5212                                  ;ASSUME  CS:DOSGROUP,DS:NOTHING,ES:NOTHING,SS:NOTHING
  5213                                  
  5214                                          ;procedure   SYSTEM_CALL,NEAR
  5215                                  SYSTEM_CALL:
  5216                                  ;entry	QUIT				; INT 20H entry point
  5217                                  QUIT:
  5218                                  	;MOV	AH,0
  5219 0000148B 30E4                    	xor	ah,ah ; 08/07/2018
  5220 0000148D EB47                    	JMP     SHORT SAVREGS
  5221                                  
  5222                                  ; ---------------------------------------------------------------------------
  5223                                  
  5224                                  ;COMMAND:
  5225                                  ;	;IF	NOT IBM
  5226                                  ;       CMP	AH,SET_OEM_HANDLER
  5227                                  ;       JB      SHORT NOTOEM
  5228                                  ;	; 18/07/2018
  5229                                  ;	je	_$SET_OEM_HANDLER	
  5230                                  ;
  5231                                  ;	; 20/04/2018
  5232                                  ;       ;JMP	_$SET_OEM_HANDLER
  5233                                  ;
  5234                                  ;	; Retro DOS v2.0 - 20/04/2018
  5235                                  ;	CMP	AX, 0FFFFh
  5236                                  ;	;JNE	_$SET_OEM_HANDLER
  5237                                  ;	; 18/07/2018
  5238                                  ;	jne	DO_OEM_FUNC
  5239                                  ;
  5240                                  ;	PUSHA
  5241                                  ;	MOV     SI,RETRODOSMSG
  5242                                  ;       ;CALL	OUTMES
  5243                                  ;wrdosmsg:
  5244                                  ;	mov	ah, 0Eh
  5245                                  ;	mov	bx, 7
  5246                                  ;wrdosmsg_nxt:
  5247                                  ;	cs	lodsb
  5248                                  ;	cmp	al, '$'
  5249                                  ;	je	short wrdosmsg_ok		
  5250                                  ;	int	10h
  5251                                  ;	jmp	short wrdosmsg_nxt
  5252                                  ;wrdosmsg_ok:
  5253                                  ;	POPA
  5254                                  ;	JMP	SHORT BADCALL 
  5255                                  ;	;
  5256                                  ;NOTOEM:
  5257                                  ;	;ENDIF
  5258                                  ;
  5259                                  ;       CMP     AH,MAXCOM
  5260                                  ;       JBE     SHORT SAVREGS
  5261                                  
  5262                                  	; The system call in AH is out of the range that we know how
  5263                                  	; to handle. We arbitrarily set the contents of AL to 0 and
  5264                                  	; IRET. Note that we CANNOT set the carry flag to indicate an
  5265                                  	; error as this may break some programs compatability.
  5266                                  
  5267                                  BADCALL:
  5268                                          ;MOV	AL,0
  5269 0000148F 30C0                    	xor	al,al ; 08/07/2018
  5270                                  ;entry	IRET
  5271                                  _IRET:
  5272 00001491 CF                              IRET
  5273                                  
  5274                                  ; ---------------------------------------------------------------------------
  5275                                  
  5276                                  ;entry	CALL_ENTRY                      ; System call entry point and dispatcher
  5277                                  CALL_ENTRY:
  5278 00001492 58                              POP     AX                      ; IP from the long call at 5
  5279 00001493 58                              POP     AX                      ; Segment from the long call at 5
  5280                                          ;POP	WORD [USER_SP]		; IP from the CALL 5
  5281 00001494 2E8F06[1E05]                    POP	WORD [CS:USER_SP] ; 12/03/2018
  5282 00001499 9C                      	PUSHF                           ; Start re-ordering the stack
  5283 0000149A FA                              CLI
  5284 0000149B 50                              PUSH    AX                      ; Save segment
  5285                                          ;PUSH	WORD [USER_SP]		; Stack now ordered as if INT had been used
  5286 0000149C 2EFF36[1E05]                    PUSH	WORD [CS:USER_SP] ; 12/03/2018
  5287 000014A1 80F924                          CMP     CL,MAXCALL              ; This entry point doesn't get as many calls
  5288 000014A4 77E9                            JA      SHORT BADCALL
  5289 000014A6 88CC                            MOV     AH,CL
  5290                                  	; 08/07/2018
  5291 000014A8 EB2C                    	jmp	short SAVREGS 
  5292                                  
  5293                                  COMMAND:
  5294                                  	; 08/07/2018 - Retro DOS v3.0
  5295                                  
  5296                                  	;IF	NOT IBM
  5297 000014AA 80FCF8                          CMP	AH,SET_OEM_HANDLER
  5298 000014AD 7221                            JB      SHORT NOTOEM
  5299                                  	; 18/07/2018
  5300 000014AF 0F845E01                	je	_$SET_OEM_HANDLER	
  5301                                  
  5302                                  	; 20/04/2018
  5303                                          ;JMP	_$SET_OEM_HANDLER
  5304                                  
  5305                                  	; Retro DOS v2.0 - 20/04/2018
  5306 000014B3 83F8FF                  	CMP	AX,0FFFFh
  5307                                  	;JNE	_$SET_OEM_HANDLER
  5308                                  	; 18/07/2018
  5309 000014B6 0F856201                	jne	DO_OEM_FUNC
  5310                                  
  5311 000014BA 60                      	PUSHA
  5312 000014BB BE[4E0C]                	MOV     SI,RETRODOSMSG
  5313                                          ;CALL	OUTMES
  5314                                  wrdosmsg:
  5315 000014BE B40E                    	mov	ah, 0Eh
  5316 000014C0 BB0700                  	mov	bx, 7
  5317                                  wrdosmsg_nxt:
  5318 000014C3 2EAC                    	cs	lodsb
  5319 000014C5 3C24                    	cmp	al, '$'
  5320 000014C7 7404                    	je	short wrdosmsg_ok		
  5321 000014C9 CD10                    	int	10h
  5322 000014CB EBF6                    	jmp	short wrdosmsg_nxt
  5323                                  wrdosmsg_ok:
  5324 000014CD 61                      	POPA
  5325 000014CE EBBF                    	JMP	SHORT BADCALL 
  5326                                  	;
  5327                                  
  5328                                  NOTOEM:
  5329                                  	;ENDIF
  5330                                  
  5331 000014D0 FA                      	cli	; 08/07/2018
  5332                                  
  5333                                  _COMMAND: ; MSDOS 3.3 (IBM)
  5334                                  
  5335 000014D1 80FC68                          CMP     AH,MAXCOM
  5336                                  	;JBE	SHORT SAVREGS
  5337 000014D4 77B9                            JA	SHORT BADCALL ; 08/07/2018
  5338                                  
  5339                                  SAVREGS:
  5340                                  	; 10/08/2018
  5341                                  	; 08/07/2018 - Retro DOS v3.0
  5342 000014D6 80FC33                  	cmp	ah,33h
  5343 000014D9 7484                    	jz	short _$SET_CTRL_C_TRAPPING
  5344 000014DB 721C                    	jb	short SaveAllRegs
  5345 000014DD 80FC64                  	cmp	ah,64h
  5346 000014E0 7717                    	ja	short SaveAllRegs
  5347 000014E2 74A2                    	jz	short _$SET_PRINTER_FLAG
  5348 000014E4 80FC51                  	cmp	ah,51h
  5349 000014E7 0F846EFF                	jz	_$GET_CURRENT_PDB
  5350 000014EB 80FC62                  	cmp	ah,62h
  5351 000014EE 0F8467FF                	jz	_$GET_CURRENT_PDB
  5352 000014F2 80FC50                  	cmp     ah,50h
  5353 000014F5 0F845AFF                	jz	_$SET_CURRENT_PDB
  5354                                  SaveAllRegs:
  5355 000014F9 E8FC00                          CALL    save_world
  5356 000014FC 2E8C1E[7E05]                    MOV	[CS:SAVEDS],DS	; 12/03/2018
  5357 00001501 2E891E[7C05]                    MOV	[CS:SAVEBX],BX	; 12/03/2018
  5358 00001506 8CCB                            MOV     BX,CS
  5359 00001508 8EDB                            MOV     DS,BX
  5360                                  ;ASSUME  DS:DOSGROUP
  5361 0000150A FE06[CF02]                      INC     BYTE [INDOS]		; Flag that we're in the DOS
  5362                                  	
  5363                                  	; 08/07/2018 - Retro DOS v3.0        
  5364 0000150E 31C0                    	xor     ax, ax
  5365 00001510 A3[EA02]                	mov     [USER_ID],ax
  5366 00001513 A1[DE02]                	mov     ax,[CurrentPDB]
  5367 00001516 A3[E802]                	mov     [PROC_ID],ax
  5368                                  
  5369 00001519 A1[1E05]                	MOV     AX,[USER_SP]
  5370 0000151C A3[8405]                        MOV     [NSP],AX
  5371 0000151F A1[2005]                        MOV     AX,[USER_SS]
  5372 00001522 A3[8205]                        MOV     [NSS],AX
  5373 00001525 58                              POP     AX
  5374 00001526 50                              PUSH    AX
  5375 00001527 8926[1E05]                      MOV     [USER_SP],SP
  5376 0000152B 8C16[2005]                      MOV     [USER_SS],SS
  5377                                  ;
  5378                                  ; save user stack in his area for later returns (possibly from EXEC)
  5379                                  ; Here comes multitasking!!!
  5380                                  ;
  5381 0000152F 8E1E[DE02]                      MOV     DS,[CurrentPDB]
  5382 00001533 89262E00                        MOV     [PDB.USER_STACK],SP
  5383 00001537 8C163000                        MOV     [PDB.USER_STACK+2],SS
  5384                                  	; 18/07/2018
  5385 0000153B 2EC606[0D05]00          	mov	byte [CS:FSHARING], 0
  5386                                  
  5387 00001541 8CCB                            MOV     BX,CS                   ; no holes here.
  5388 00001543 8ED3                            MOV     SS,BX
  5389                                  ;ASSUME  SS:DOSGROUP
  5390                                  
  5391                                  ;entry	REDISP
  5392                                  REDISP:
  5393 00001545 BC[0607]                        MOV     SP,AUXSTACK		; Enough stack for interrupts
  5394 00001548 FB                              STI                             ; Stack OK now
  5395                                  	; 08/07/2018
  5396                                          ;PUSH	CS
  5397                                          ;POP	DS
  5398 00001549 8CCB                    	mov	bx,cs
  5399 0000154B 8EDB                    	mov	ds,bx
  5400 0000154D 30FF                            XOR     BH,BH
  5401 0000154F 883E[0303]                      MOV     [CONSWAP],BH
  5402 00001553 C606[0403]01                    MOV     BYTE [IDLEINT],1
  5403 00001558 883E[F802]                      MOV     BYTE [NoSetDir],bh ; 0	; set directories on search
  5404 0000155C 883E[F602]                      mov	byte [FAILERR],bh ; 0	
  5405 00001560 88E3                    	MOV     BL,AH
  5406 00001562 D1E3                            SHL     BX,1
  5407 00001564 FC                              CLD
  5408 00001565 08E4                            OR      AH,AH
  5409 00001567 7416                            JZ      SHORT DSKROUT		; ABORT
  5410                                  
  5411                                          ;CMP	AH,12
  5412                                          ;JBE	SHORT IOROUT		; Character I/O
  5413                                          ;CMP	AH,GET_CURRENT_PDB      ; INT 24 needs GET,SET PDB
  5414                                          ;JZ	SHORT IOROUT
  5415                                          ;CMP	AH,SET_CURRENT_PDB
  5416                                          ;JNZ	SHORT DSKROUT
  5417                                  
  5418                                  	; 10/08/2018
  5419 00001569 80FC59                  	cmp     ah,GETEXTENDEDERROR ; 59h
  5420 0000156C 743D                    	jz      short DISPCALL
  5421 0000156E 80FC0C                  	cmp     ah,STD_CON_INPUT_FLUSH ; 0Ch
  5422 00001571 770C                    	ja      short DSKROUT
  5423                                  
  5424                                  IOROUT:
  5425 00001573 803E[CE02]00                    CMP     BYTE [ERRORMODE],0
  5426 00001578 7531                            JNZ     SHORT DISPCALL		; Stay on AUXSTACK if INT 24
  5427 0000157A BC[060A]                        MOV     SP,IOSTACK
  5428 0000157D EB2C                            JMP     SHORT DISPCALL
  5429                                  
  5430                                  DSKROUT:
  5431                                  	; 08/07/2018 - Retro DOS v3.0
  5432 0000157F A3[E602]                        mov     [USER_IN_AX],ax
  5433 00001582 C606[D102]01            	mov     byte [EXTERR_LOCUS],1	; errLOC_Unk  (Default)
  5434                                  
  5435 00001587 C606[CE02]00                    MOV     BYTE [ERRORMODE],0	; Cannot make non 1-12 calls in
  5436 0000158C C606[D002]FF                    MOV     BYTE [WPERR],-1		; error mode, so good place to
  5437                                                                          ; make sure flags are reset
  5438 00001591 50                      	push    ax
  5439 00001592 B482                    	mov     ah, 82h
  5440 00001594 CD2A                    	int     2Ah 		; Microsoft Networks 
  5441                                  				; END DOS CRITICAL SECTIONS 0 THROUGH 7
  5442 00001596 58                      	pop     ax
  5443 00001597 C606[0403]00            	mov     byte [IDLEINT],0
  5444                                  
  5445 0000159C BC[8608]                        MOV     SP,DSKSTACK
  5446 0000159F F606[E502]FF                    TEST    BYTE [CNTCFLAG],-1
  5447 000015A4 7405                            JZ      SHORT DISPCALL
  5448 000015A6 50                              PUSH    AX
  5449                                          ;invoke	DSKSTATCHK
  5450 000015A7 E8AF40                          CALL	DSKSTATCHK
  5451 000015AA 58                      	POP     AX
  5452                                  DISPCALL:
  5453                                  	; 08/07/2018 -Retro DOS v3.0
  5454                                  	;;;PUSH	WORD [LEAVEADDR] ; (***)
  5455                                          ;;;PUSH	WORD [CS:BX+DISPATCH]
  5456                                          ;;;;PUSH WORD [BX+DISPATCH]
  5457                                  
  5458                                  	; 11/07/2018	
  5459                                  	;mov	bx,[CS:BX+DISPATCH]
  5460 000015AB 8B9F[060E]               	mov	bx,[bx+DISPATCH] 
  5461                                  
  5462                                  	;;;MOV	BX,[SAVEBX]
  5463 000015AF 871E[7C05]              	xchg    bx,[SAVEBX]        
  5464                                  
  5465 000015B3 8E1E[7E05]              	MOV     DS,[SAVEDS]
  5466                                  ;ASSUME	DS:NOTHING
  5467                                          ;return
  5468                                  ;;;	RETN	
  5469                                  
  5470 000015B7 36FF16[7C05]            	call	word [SS:SAVEBX]
  5471                                  
  5472                                  ;entry LEAVE
  5473                                  ;;;_LEAVE:				; Exit from a system call
  5474                                  LeaveDOS: ; 18/07/2018 
  5475                                  ;ASSUME	SS:NOTHING			; User routines may misbehave
  5476 000015BC FA                      	CLI
  5477                                          ; 12/03/2018
  5478 000015BD 2EFE0E[CF02]            	DEC     BYTE [CS:INDOS]
  5479 000015C2 2E8B26[1E05]                    MOV     SP,[CS:USER_SP]
  5480 000015C7 2E8E16[2005]                    MOV     SS,[CS:USER_SS]
  5481 000015CC 89E5                    	MOV     BP,SP
  5482                                  	;MOV	[BP.user_AX],AL	
  5483                                          ;MOV	[BP+user_env.user_AX],AL  ; user_env.user_AX = 0
  5484 000015CE 884600                          MOV     [BP],AL
  5485 000015D1 2EA1[8405]              	MOV     AX,[CS:NSP]
  5486 000015D5 2EA3[1E05]                      MOV     [CS:USER_SP],AX
  5487 000015D9 2EA1[8205]                      MOV     AX,[CS:NSS]
  5488 000015DD 2EA3[2005]                      MOV     [CS:USER_SS],AX
  5489 000015E1 E80100                  	CALL    restore_world
  5490                                  
  5491 000015E4 CF                              IRET
  5492                                  
  5493                                  ;SYSTEM_CALL ENDP
  5494                                  
  5495                                  ;
  5496                                  ; restore_world restores all registers ('cept SS:SP, CS:IP, flags) from
  5497                                  ; the stack prior to giving the user control
  5498                                  ;
  5499                                  
  5500                                  ; 11/07/2018 - Retro DOS v3.0
  5501                                          ;ASSUME  DS:NOTHING,ES:NOTHING
  5502                                  ;;restore_tmp DW  ?
  5503                                  ;restore_tmp: 
  5504                                  ;	dw	0
  5505                                          ;procedure restore_world,NEAR
  5506                                  restore_world:
  5507 000015E5 2E8F06[8005]                    POP	WORD [CS:RESTORE_TMP] ; 12/03/2018
  5508 000015EA 58                              POP     AX              ; PUSH    ES
  5509 000015EB 5B                              POP     BX              ; PUSH    DS
  5510 000015EC 59                              POP     CX              ; PUSH    BP
  5511 000015ED 5A                              POP     DX              ; PUSH    DI
  5512 000015EE 5E                              POP     SI              ; PUSH    SI
  5513 000015EF 5F                              POP     DI              ; PUSH    DX
  5514 000015F0 5D                              POP     BP              ; PUSH    CX
  5515 000015F1 1F                              POP     DS              ; PUSH    BX
  5516 000015F2 07                              POP     ES              ; PUSH    AX
  5517                                  	; 07/07/2018 - Retro DOS v3.0
  5518 000015F3 2EFF26[8005]                   	jmp	word [CS:RESTORE_TMP]
  5519                                  
  5520                                  ;restore_world	ENDP
  5521                                  
  5522                                  ;
  5523                                  ; save_world saves complete registers on the stack
  5524                                  ;
  5525                                          ;procedure save_world,NEAR
  5526                                  save_world:
  5527 000015F8 2E8F06[8005]                    POP	WORD [CS:RESTORE_TMP] ; 12/03/2018
  5528 000015FD 06                              PUSH    ES
  5529 000015FE 1E                              PUSH    DS
  5530 000015FF 55                              PUSH    BP
  5531 00001600 57                              PUSH    DI
  5532 00001601 56                              PUSH    SI
  5533 00001602 52                              PUSH    DX
  5534 00001603 51                              PUSH    CX
  5535 00001604 53                              PUSH    BX
  5536 00001605 50                              PUSH    AX
  5537                                  	; 07/07/2018 - Retro DOS v3.0
  5538 00001606 2EFF26[8005]                   	jmp	word [CS:RESTORE_TMP]
  5539                                  
  5540                                  ;save_world	ENDP
  5541                                  
  5542                                  ;
  5543                                  ; get_user_stack returns the user's stack (and hence registers) in DS:SI
  5544                                  ;
  5545                                          ;procedure get_user_stack,NEAR
  5546                                  Get_User_Stack:
  5547                                          ;LDS	SI,DWORD PTR [USER_SP]
  5548                                          ;LDS	SI,[USER_SP]
  5549 0000160B 2EC536[1E05]                    LDS	SI,[CS:USER_SP] ; 12/03/2018
  5550                                  	;return
  5551 00001610 C3                      	RETN
  5552                                  
  5553                                  ;get_user_stack  ENDP
  5554                                  
  5555                                  ; ---------------------------------------------------------------------------
  5556                                  ;
  5557                                  ; Set_OEM_Handler -- Set OEM sys call address and handle OEM Calls
  5558                                  ; Inputs:
  5559                                  ;	User registers, User Stack, INTS disabled
  5560                                  ;	If CALL F8, DS:DX is new handler address
  5561                                  ; Function:
  5562                                  ;	Process OEM INT 21 extensions
  5563                                  ; Outputs:
  5564                                  ;	Jumps to OEM_HANDLER if appropriate
  5565                                  ;
  5566                                  ; ---------------------------------------------------------------------------
  5567                                  
  5568                                  ;IF	NOT IBM
  5569                                  
  5570                                  _$SET_OEM_HANDLER:
  5571                                  	; 18/07/2018
  5572                                  
  5573                                  	;JNE	short DO_OEM_FUNC	; If above F8 try to jump to handler
  5574 00001611 2E8916[1400]            	MOV     [CS:OEM_HANDLER],DX	; Set Handler
  5575 00001616 2E8C1E[1600]            	MOV     [CS:OEM_HANDLER+2],DS
  5576 0000161B CF                      	IRET                            ; Quick return, Have altered no registers
  5577                                  
  5578                                  DO_OEM_FUNC:
  5579 0000161C 2E833E[1400]FF          	CMP     WORD [CS:OEM_HANDLER],-1
  5580 00001622 7503                    	JNZ     short OEM_JMP
  5581 00001624 E968FE                  	JMP     BADCALL                 ; Handler not initialized
  5582                                  
  5583                                  OEM_JMP:
  5584 00001627 2EFF2E[1400]            	JMP     FAR [CS:OEM_HANDLER]
  5585                                  
  5586                                  ;       ENDIF
  5587                                  
  5588                                  ;============================================================================
  5589                                  ; DOSTAB.ASM - MSDOS 6.0 - 1991
  5590                                  ;============================================================================
  5591                                  ; 11/07/2018 - Retro DOS v3.0
  5592                                  
  5593                                  ; the nul device driver used to be part of the code.  However, since the 
  5594                                  ; header is in the data, and the entry points are only given as an offset,
  5595                                  ; the strategy and interrupt entry points must also be in the data now.
  5596                                  ;
  5597                                  
  5598                                  ;procedure	snuldev,far
  5599                                  SNULDEV:
  5600                                  ;assume ds:nothing,es:nothing,ss:nothing, cs:dosdata
  5601                                  ; Offset 1599h in IBMDOS.COM (MSDOS 3.3), 1987
  5602                                  	;or	word [ES:BX+3],0100h
  5603 0000162C 26814F030001             	OR	word [ES:BX+SRHEAD.REQSTAT],STDON ; set done bit
  5604                                  ;entry inuldev
  5605                                  INULDEV:
  5606 00001632 CB                      	retf				; must not be a return!
  5607                                  ;endproc snuldev
  5608                                  
  5609                                  ;============================================================================
  5610                                  ; MSCODE.ASM - MSDOS 6.0 - 1991
  5611                                  ;============================================================================
  5612                                  ; 18/07/2018 - Retro DOS v3.0
  5613                                  
  5614                                  ;BREAK <AbsDRD, AbsDWRT -- INT int_disk_read, int_disk_write handlers>>
  5615                                  
  5616                                  
  5617                                  ;   AbsSetup - setup for abs disk functions
  5618                                  ;----------------------------------------------------------------------------
  5619                                  
  5620                                  AbsSetup:
  5621 00001633 36FE06[CF02]            	INC	byte [SS:INDOS]		; SS override
  5622 00001638 FB                      	STI
  5623 00001639 FC                      	CLD
  5624 0000163A 1E                      	PUSH	DS
  5625 0000163B 16                      	push	ss
  5626 0000163C 1F                      	pop	ds
  5627 0000163D E89100                  	CALL	GETBP
  5628 00001640 7206                    	JC	short errdriv 		; PM. error drive ;AN000;
  5629 00001642 26C7461EFFFF            	MOV	WORD [ES:BP+DPB.FREE_CNT],-1 ; do not trust user at all.
  5630                                  errdriv:
  5631 00001648 1F                      	POP	DS
  5632 00001649 7301                    	jnc	short AbsSetup2
  5633                                  AbsSetup_retn:
  5634 0000164B C3                      	retn
  5635                                  
  5636                                  AbsSetup2:
  5637                                  	; MSDOS 6.0
  5638                                  	;				; SS override
  5639                                  	;MOV	word [SS:HIGH_SECTOR],0 ;>32mb	from API		;AN000;
  5640                                  	;CALL	RW32_CONVERT		;>32mb convert 32bit format to 16bit ;AN000;
  5641 0000164C 72FD                    	jc	short AbsSetup_retn
  5642                                  	;call	SET_RQ_SC_PARMS 	;LB. set up SC parms		;AN000;
  5643                                  
  5644                                  	; MSDOS 3.3 (& MSDOS 6.0)
  5645 0000164E 1E                      	PUSH	DS
  5646 0000164F 56                      	PUSH	SI
  5647 00001650 50                      	PUSH	AX
  5648                                  
  5649 00001651 16                      	push	ss
  5650 00001652 1F                      	pop	ds
  5651                                  	
  5652 00001653 BE[6003]                	MOV	SI,OPENBUF
  5653 00001656 8804                    	MOV	[SI],AL
  5654 00001658 800441                  	ADD	BYTE [SI],"A"
  5655 0000165B C744013A00              	MOV	WORD [SI+1],003AH ; ":",0
  5656 00001660 B80003                  	MOV	AX,0300H
  5657 00001663 F8                      	CLC
  5658 00001664 CD2A                    	INT	int_IBM 		; Will set carry if shared
  5659 00001666 58                      	POP	AX
  5660 00001667 5E                      	POP	SI
  5661 00001668 1F                      	POP	DS
  5662 00001669 73E0                    	jnc	short AbsSetup_retn
  5663                                  
  5664                                  	;mov	word [ss:EXTERR],32h
  5665 0000166B 36C706[D202]3200        	MOV	word [ss:EXTERR],error_not_supported
  5666 00001672 C3                      	retn
  5667                                  
  5668                                  ;---------------------------------------------------------------------------
  5669                                  ;
  5670                                  ; Procedure Name : ABSDRD
  5671                                  ;
  5672                                  ; Interrupt 25 handler.  Performs absolute disk read.
  5673                                  ; Inputs:	AL - 0-based drive number
  5674                                  ;		DS:BX point to destination buffer
  5675                                  ;		CX number of logical sectors to read
  5676                                  ;		DX starting  logical sector number (0-based)
  5677                                  ; Outputs:	Original flags still on stack
  5678                                  ;		Carry set
  5679                                  ;		    AH error from BIOS
  5680                                  ;		    AL same as low byte of DI from INT 24
  5681                                  ;
  5682                                  ;---------------------------------------------------------------------------
  5683                                          ;procedure   ABSDRD,FAR
  5684                                  ABSDRD:
  5685                                  	; 15/07/2018
  5686                                  ;ASSUME  DS:NOTHING,ES:NOTHING,SS:NOTHING
  5687 00001673 FA                              CLI
  5688                                          ;MOV	[USER_SS],SS
  5689                                          ;MOV	[USER_SP],SP
  5690                                  	; 15/03/2018
  5691 00001674 2E8C16[2005]                    MOV	[CS:USER_SS],SS
  5692 00001679 2E8926[1E05]                    MOV	[CS:USER_SP],SP        
  5693 0000167E 0E                      	PUSH    CS
  5694 0000167F 17                              POP     SS
  5695                                  ;ASSUME  SS:DOSGROUP
  5696 00001680 BC[8608]                        MOV	SP,DSKSTACK
  5697                                  
  5698                                  	;; MSDOS 2.11
  5699                                  
  5700                                          ;;;INC	BYTE [INDOS]
  5701                                          ;;INC	BYTE [SS:INDOS]
  5702                                  	;;STI
  5703                                          ;;CLD
  5704                                          ;;PUSH	ES
  5705                                          ;;PUSH	DS
  5706                                          ;;PUSH	SS
  5707                                          ;;POP	DS
  5708                                  ;;;ASSUME DS:DOSGROUP
  5709                                          ;;;invoke GETBP
  5710                                  	;;CALL	GETBP
  5711                                          ;;POP	DS
  5712                                  ;;;ASSUME DS:NOTHING
  5713                                  
  5714                                  	; 15/07/2018 - Retro DOS v3.0
  5715                                  	; MSDOS 3.3 (& MSDOS 6.0, MSCODE.ASM, 1991)
  5716 00001683 06                              PUSH    ES
  5717 00001684 E8ACFF                  	call    AbsSetup
  5718                                  	;	
  5719 00001687 721A                            JC      SHORT ILEAVE
  5720                                          ;invoke	DSKREAD
  5721 00001689 E8332B                  	CALL	DSKREAD
  5722                                  TLEAVE:
  5723 0000168C 7415                            JZ      SHORT ILEAVE
  5724                                  
  5725                                  	; 15/07/2018 - Retro DOS v3.0
  5726                                          ;IF	IBM
  5727                                  ; Translate the error code to ancient 1.1 codes
  5728 0000168E 06                              PUSH    ES
  5729 0000168F 0E                              PUSH    CS
  5730 00001690 07                              POP     ES
  5731 00001691 30E4                            XOR     AH,AH			; Nul error code
  5732                                  	;mov	cx,6
  5733 00001693 B90600                          MOV     CX,NUMERR		; Number of possible error conditions
  5734 00001696 BF[D50F]                        MOV     DI,ERRIN		; Point to error conditions
  5735 00001699 F2AE                            REPNE   SCASB
  5736 0000169B 7504                            JNZ     SHORT LEAVECODE		; Not found
  5737                                  	;mov	ah,[ES:DI+5]
  5738 0000169D 268A6505                        MOV     AH,[ES:DI+NUMERR-1]	; Get translation
  5739                                  LEAVECODE:
  5740 000016A1 07                              POP     ES
  5741                                          ;ENDIF
  5742                                  
  5743 000016A2 F9                              STC
  5744                                  ILEAVE:
  5745 000016A3 07                              POP     ES
  5746 000016A4 FA                              CLI
  5747                                          ;DEC	BYTE [INDOS]
  5748                                          ;15/03/2018
  5749 000016A5 36FE0E[CF02]            	DEC	BYTE [SS:INDOS]
  5750                                  	; 15/08/2018
  5751                                          ;MOV	SS,[CS:USER_SS]
  5752                                  	;MOV	SP,[CS:USER_SP]
  5753 000016AA 368B26[1E05]            	MOV     SP,[SS:USER_SP]
  5754 000016AF 368E16[2005]                    MOV     SS,[SS:USER_SS]
  5755                                  ;ASSUME  SS:NOTHING
  5756 000016B4 FB                              STI
  5757                                          ;return
  5758 000016B5 CB                      	RETF   ; ! FAR return !
  5759                                  
  5760                                  ;ABSDRD	ENDP
  5761                                  
  5762                                  ;---------------------------------------------------------------------------
  5763                                  ;
  5764                                  ; Procedure Name : ABSDWRT
  5765                                  ;
  5766                                  ; Interrupt 26 handler.  Performs absolute disk write.
  5767                                  ; Inputs:	AL - 0-based drive number
  5768                                  ;		DS:BX point to source buffer
  5769                                  ;		CX number of logical sectors to write
  5770                                  ;		DX starting  logical sector number (0-based)
  5771                                  ; Outputs:	Original flags still on stack
  5772                                  ;		Carry set
  5773                                  ;		    AH error from BIOS
  5774                                  ;		    AL same as low byte of DI from INT 24
  5775                                  ;
  5776                                  ;---------------------------------------------------------------------------
  5777                                          ;procedure   ABSDWRT,FAR
  5778                                  ABSDWRT:
  5779                                  	; 15/07/2018
  5780                                  ;ASSUME	DS:NOTHING,ES:NOTHING,SS:NOTHING
  5781                                  
  5782 000016B6 FA                              CLI
  5783                                  	; 15/08/2018
  5784                                  	; 15/03/2018
  5785 000016B7 2E8C16[2005]            	MOV	[CS:USER_SS],SS
  5786 000016BC 2E8926[1E05]                    MOV	[CS:USER_SP],SP
  5787 000016C1 0E                              PUSH    CS
  5788 000016C2 17                              POP     SS
  5789                                  ;ASSUME	SS:DOSGROUP
  5790                                          ;MOV	SP,OFFSET DOSGROUP:DSKSTACK
  5791 000016C3 BC[8608]                        MOV	SP,DSKSTACK
  5792                                  
  5793                                  	;; MSDOS 2.11
  5794                                  
  5795                                          ;;;INC	BYTE [INDOS]
  5796                                          ;;INC	BYTE [SS:INDOS]
  5797                                  	;;STI
  5798                                          ;;CLD
  5799                                          ;;PUSH	ES
  5800                                          ;;PUSH	DS
  5801                                          ;;PUSH	SS
  5802                                          ;;POP	DS
  5803                                  ;;;ASSUME DS:DOSGROUP
  5804                                          ;;;invoke GETBP
  5805                                  	;;CALL	GETBP
  5806                                          ;;POP	DS
  5807                                  ;;;ASSUME DS:NOTHING
  5808                                  
  5809                                  	; 15/07/2018 - Retro DOS v3.0
  5810                                  	; MSDOS 3.3 (& MSDOS 6.0, MSCODE.ASM, 1991)
  5811 000016C6 06                              PUSH    ES
  5812 000016C7 E869FF                  	call    AbsSetup
  5813                                  	;
  5814 000016CA 72D7                            JC      SHORT ILEAVE
  5815                                          ;invoke DSKWRITE
  5816 000016CC E8192B                          CALL	DSKWRITE
  5817 000016CF EBBB                    	JMP     SHORT TLEAVE
  5818                                  
  5819                                  ;ABSDWRT ENDP
  5820                                  
  5821                                  ;----------------------------------------------------------------------------
  5822                                  ;
  5823                                  ; Procedure Name : GETBP
  5824                                  ;
  5825                                  ; Inputs:
  5826                                  ;	AL = Logical unit number (A = 0)
  5827                                  ; Function:
  5828                                  ;	Find Drive Parameter Block
  5829                                  ; Outputs:
  5830                                  ;	ES:BP points to DPB
  5831                                  ;	[THISDPB] = ES:BP
  5832                                  ;	Carry set if unit number bad or unit is a NET device.
  5833                                  ;		Later case sets extended error error_I24_not_supported
  5834                                  ; No other registers altered
  5835                                  ;
  5836                                  ;----------------------------------------------------------------------------
  5837                                  
  5838                                  GETBP:
  5839                                  	; 11/07/2018 - Retro DOS v3.0
  5840 000016D1 50                      	PUSH	AX
  5841 000016D2 0401                    	ADD	AL, 1		; No increment; need carry flag
  5842 000016D4 7203                    	JC	SHORT SKIPGET
  5843 000016D6 E89C52                  	CALL	GETTHISDRV
  5844                                  	; MSDOS 6.0
  5845                                  	;JNC	SHORT SKIPGET		;PM. good drive		;AN000;
  5846                                  	;XOR	AH,AH			;DCR. ax= error code 	;AN000;
  5847                                  	;CMP	AX,error_not_dos_disk	;DCR. is unknown media ? ;AN000;
  5848                                  	;JZ	SHORT SKIPGET 		;DCR. yes, let it go 	;AN000;
  5849                                  	;STC				;DCR.			;AN000;
  5850                                  	;MOV	[EXTERR],AX	;PM. invalid drive or Non DOS drive ;AN000;
  5851                                  	;MOV	WORD [AbsDskErr],201h
  5852                                  SKIPGET:
  5853 000016D9 58                      	POP	AX
  5854 000016DA 7213                    	JC	SHORT GETBP_RETN
  5855 000016DC C42E[3A05]              	LES	BP,[THISCDS]
  5856                                  	;TEST	WORD [ES:BP+43H],8000H
  5857 000016E0 26F746430080            	TEST	WORD [ES:BP+curdir.flags],curdir_isnet ; Clears carry
  5858 000016E6 7408                    	JZ	SHORT GETBP_CDS
  5859 000016E8 C706[D202]3200          	MOV	WORD [EXTERR],error_not_supported  ; 32
  5860 000016EE F9                      	STC
  5861                                  GETBP_RETN:
  5862 000016EF C3                      	RETN
  5863                                  
  5864                                  GETBP_CDS:
  5865                                  	;LES	BP,[ES:BP+45H]
  5866 000016F0 26C46E45                	LES	BP,[ES:BP+curdir.devptr]
  5867                                  
  5868                                  GOTDPB:
  5869                                  	; Load THISDPB from ES:BP
  5870 000016F4 892E[2405]              	MOV	[THISDPB],BP
  5871 000016F8 8C06[2605]              	MOV	[THISDPB+2],ES
  5872 000016FC C3                      	RETN
  5873                                  
  5874                                  ;BREAK <SYS_RET_OK SYS_RET_ERR CAL_LK ETAB_LK set system call returns>
  5875                                  
  5876                                  ;----------------------------------------------------------------------------
  5877                                  ;
  5878                                  ; Procedure Name : SYS_RETURN
  5879                                  ;
  5880                                  ; These are the general system call exit mechanisms. All internal system
  5881                                  ; calls will transfer (jump) to one of these at the end. Their sole purpose
  5882                                  ; is to set the user's flags and set his AX register for return.
  5883                                  ;
  5884                                  ;----------------------------------------------------------------------------
  5885                                  
  5886                                          ;procedure   SYS_RETURN,NEAR
  5887                                  SYS_RETURN:        
  5888                                          ;entry	SYS_RET_OK
  5889                                  SYS_RET_OK:   
  5890                                  	; 18/07/2018
  5891                                  	; Offset 1666h in IBMDOS.COM (MSDOS 3.3), 1987
  5892 000016FD E82508                  	call    FETCHI_CHECK ; MSDOS 3.3 ! IBMDOS feature ! 	     
  5893 00001700 E808FF                  	call    Get_User_Stack
  5894                                  		; turn off user's carry flag 
  5895                                          ;and	word [SI+16h],0FFFEh 
  5896 00001703 836416FE                        and	word [SI+user_env.user_F],~f_Carry 
  5897 00001707 EB10                            JMP     SHORT DO_RET
  5898                                  
  5899                                          ;entry   SYS_RET_ERR
  5900                                  SYS_RET_ERR:        
  5901 00001709 30E4                    	XOR     AH,AH 		; hack to allow for smaller error rets
  5902 0000170B E86900                  	call	ETAB_LK 	; Make sure code is OK, EXTERR gets set
  5903 0000170E E81A00                  	CALL	ErrorMap
  5904                                  
  5905                                  	;entry	From_GetSet
  5906                                  From_GetSet:
  5907 00001711 E8F7FE                          call    Get_User_Stack
  5908                                  		 ; signal carry to user
  5909                                  	;or	word [SI+16h],1
  5910 00001714 834C1601                	OR	word [SI+user_env.user_F],f_Carry
  5911 00001718 F9                      	STC			; also, signal internal error
  5912                                  DO_RET:
  5913                                          ;MOV	[SI+user_env.user_AX], AX ; Really only sets AH
  5914 00001719 8904                    	MOV	[SI],AX
  5915 0000171B C3                      	RETN
  5916                                  
  5917                                  	;entry	FCB_RET_OK
  5918                                  FCB_RET_OK:
  5919                                  	;entry	NO_OP		; obsolete system calls dispatch to here
  5920                                  NO_OP:
  5921 0000171C 30C0                    	XOR	AL,AL
  5922 0000171E C3                      	retn
  5923                                  
  5924                                  	;entry	FCB_RET_ERR
  5925                                  FCB_RET_ERR:
  5926 0000171F 30E4                    	XOR	AH,AH
  5927 00001721 36A3[D202]              	mov	[ss:EXTERR],AX
  5928 00001725 E80300                  	CALL	ErrorMap
  5929 00001728 B0FF                    	MOV	AL,-1
  5930 0000172A C3                      	retn
  5931                                  
  5932                                  	;entry	ErrorMap
  5933                                  ErrorMap:
  5934 0000172B 56                      	PUSH	SI
  5935                                  				; ERR_TABLE_21 is now in DOSDATA
  5936 0000172C BE[2F0D]                	MOV	SI,ERR_TABLE_21
  5937                                  				; SS override for FAILERR and EXTERR
  5938 0000172F 36803E[F602]00          	CMP	byte [SS:FAILERR],0 ; Check for SPECIAL case.
  5939 00001735 7407                    	JZ	short EXTENDED_NORMAL ; All is OK.
  5940                                  		 ; Ooops, this is the REAL reason
  5941                                  	;mov	word [SS:EXTERR],53h
  5942 00001737 36C706[D202]5300        	MOV	word [SS:EXTERR],error_FAIL_I24
  5943                                  EXTENDED_NORMAL:
  5944 0000173E E80200                  	call	CAL_LK		; Set CLASS,ACTION,LOCUS for EXTERR
  5945 00001741 5E                      	POP	SI
  5946 00001742 C3                      	retn
  5947                                  
  5948                                  	;EndProc SYS_RETURN
  5949                                  
  5950                                  ;---------------------------------------------------------------------------
  5951                                  ;
  5952                                  ; Procedure Name : CAL_LK
  5953                                  ;
  5954                                  ; Inputs:
  5955                                  ;	SI is OFFSET in DOSDATA of CLASS,ACTION,LOCUS Table to use
  5956                                  ;		(DS NEED not be DOSDATA)
  5957                                  ;	[EXTERR] is set with error
  5958                                  ; Function:
  5959                                  ;	Look up and set CLASS ACTION and LOCUS values for GetExtendedError
  5960                                  ; Outputs:
  5961                                  ;	[EXTERR_CLASS] set
  5962                                  ;	[EXTERR_ACTION] set
  5963                                  ;	[EXTERR_LOCUS] set  (EXCEPT on certain errors as determined by table)
  5964                                  ; Destroys SI, FLAGS
  5965                                  ;
  5966                                  ;---------------------------------------------------------------------------
  5967                                  
  5968                                  	;procedure CAL_LK,NEAR
  5969                                  CAL_LK:
  5970 00001743 1E                      	PUSH	DS
  5971 00001744 50                      	PUSH	AX
  5972 00001745 53                      	PUSH	BX
  5973                                  
  5974                                  ;M048	Context DS		; DS:SI -> Table
  5975                                  ;
  5976                                  ; Since this function can be called thru int 2f we shall not assume that SS
  5977                                  ; is DOSDATA
  5978                                  
  5979                                  	;getdseg	<ds>	; M048: DS:SI -> Table
  5980                                  
  5981                                  	; 18/07/2018
  5982 00001746 16                      	push	ss
  5983 00001747 1F                      	pop	ds
  5984                                  
  5985 00001748 8B1E[D202]              	MOV	BX,[EXTERR]	; Get error in BL
  5986                                  TABLK1:
  5987 0000174C AC                      	LODSB
  5988                                  
  5989 0000174D 3CFF                    	CMP	AL,0FFH
  5990 0000174F 7409                    	JZ	short GOT_VALS	; End of table
  5991 00001751 38D8                    	CMP	AL,BL
  5992 00001753 7405                    	JZ	short GOT_VALS	; Got entry
  5993 00001755 83C603                  	ADD	SI,3		; Next table entry
  5994                                  	; 15/08/2018
  5995 00001758 EBF2                    	JMP	short TABLK1
  5996                                  
  5997                                  GOT_VALS:
  5998 0000175A AD                      	LODSW			; AL is CLASS, AH is ACTION
  5999                                  
  6000 0000175B 80FCFF                  	CMP	AH,0FFH
  6001 0000175E 7404                    	JZ	short NO_SET_ACT
  6002 00001760 8826[D402]              	MOV	[EXTERR_ACTION],AH	; Set ACTION
  6003                                  NO_SET_ACT:
  6004 00001764 3CFF                    	CMP	AL,0FFH
  6005 00001766 7403                    	JZ	short NO_SET_CLS
  6006 00001768 A2[D502]                	MOV	[EXTERR_CLASS],AL	; Set CLASS
  6007                                  NO_SET_CLS:
  6008 0000176B AC                      	LODSB			; Get LOCUS
  6009                                  
  6010 0000176C 3CFF                    	CMP	AL,0FFH
  6011 0000176E 7403                    	JZ	short NO_SET_LOC
  6012 00001770 A2[D102]                	MOV	[EXTERR_LOCUS],AL
  6013                                  NO_SET_LOC:
  6014 00001773 5B                      	POP	BX
  6015 00001774 58                      	POP	AX
  6016 00001775 1F                      	POP	DS
  6017 00001776 C3                      	retn
  6018                                  
  6019                                  	;EndProc CAL_LK
  6020                                  
  6021                                  ;---------------------------------------------------------------------------
  6022                                  ;
  6023                                  ; Procedure Name : ETAB_LK
  6024                                  ;
  6025                                  ; Inputs:
  6026                                  ;	AX is error code
  6027                                  ;	[USER_IN_AX] has AH value of system call involved
  6028                                  ; Function:
  6029                                  ;	Make sure error code is appropriate to this call.
  6030                                  ; Outputs:
  6031                                  ;	AX MAY be mapped error code
  6032                                  ;	[EXTERR] = Input AX
  6033                                  ; Destroys ONLY AX and FLAGS
  6034                                  ;
  6035                                  ;---------------------------------------------------------------------------
  6036                                  
  6037                                  	;procedure ETAB_LK,NEAR
  6038                                  
  6039                                  ETAB_LK: ; 10/08/2018
  6040 00001777 1E                      	PUSH	DS
  6041 00001778 56                      	PUSH	SI
  6042 00001779 51                      	PUSH	CX
  6043 0000177A 53                      	PUSH	BX
  6044                                  
  6045                                  	;Context DS			; SS is DOSDATA
  6046                                  
  6047 0000177B 16                      	push	ss
  6048 0000177C 1F                      	pop	ds
  6049                                  
  6050 0000177D A3[D202]                	MOV	[EXTERR],AX		; Set EXTERR with "real" error
  6051                                  
  6052                                  					; I21_MAP_E_TAB is now in DOSCODE
  6053 00001780 BE[930C]                	MOV	SI,I21_MAP_E_TAB
  6054 00001783 88C7                    	MOV	BH,AL			; Real code to BH
  6055 00001785 8A1E[E702]              	MOV	BL,[USER_IN_AX+1]	; Sys call to BL
  6056                                  TABLK2:
  6057                                  ;;hkn;	LODSW
  6058                                  ;	LODS	word ptr cs:[si] ; MSDOS 6.0
  6059                                  	
  6060                                  	; 18/07/2018
  6061 00001789 AD                      	lodsw		; IBMDOS.COM (MSDOS 3.3) - Offset 16F7h
  6062                                  
  6063 0000178A 3CFF                    	CMP	AL,0FFH 		; End of table?
  6064 0000178C 740C                    	JZ	short NOT_IN_TABLE	; Yes
  6065 0000178E 38D8                    	CMP	AL,BL			; Found call?
  6066 00001790 740C                    	JZ	short GOT_CALL		; Yes
  6067 00001792 86E0                    	XCHG	AH,AL			; Count to AL
  6068 00001794 30E4                    	XOR	AH,AH			; Make word for add
  6069 00001796 01C6                    	ADD	SI,AX			; Next table entry
  6070 00001798 EBEF                    	JMP	short TABLK2
  6071                                  
  6072                                  NOT_IN_TABLE:
  6073 0000179A 88F8                    	MOV	AL,BH			; Restore original code
  6074 0000179C EB0B                    	JMP	SHORT NO_MAP
  6075                                  
  6076                                  GOT_CALL:
  6077 0000179E 88E1                    	MOV	CL,AH
  6078 000017A0 30ED                    	XOR	CH,CH			; Count of valid err codes to CX
  6079                                  CHECK_CODE:
  6080                                  ;;hkn;	LODSB
  6081                                  ;	LODS	byte ptr cs:[si]
  6082                                  
  6083                                  	; 18/07/2018
  6084 000017A2 AC                      	lodsb		; IBMDOS.COM (MSDOS 3.3) - Offset 1710h
  6085                                  
  6086 000017A3 38F8                    	CMP	AL,BH			; Code OK?
  6087 000017A5 7402                    	JZ	short NO_MAP		; Yes
  6088 000017A7 E2F9                    	LOOP	CHECK_CODE
  6089                                  NO_MAP:
  6090 000017A9 30E4                    	XOR	AH,AH			; AX is now valid code
  6091 000017AB 5B                      	POP	BX
  6092 000017AC 59                      	POP	CX
  6093 000017AD 5E                      	POP	SI
  6094 000017AE 1F                      	POP	DS
  6095 000017AF C3                      	retn
  6096                                  
  6097                                  	;EndProc ETAB_LK
  6098                                  
  6099                                  ; 18/07/2018 - Retro DOS v3.0
  6100                                  ;---------------------------------------------------------------------------
  6101                                  ; BREAK <DOS 2F Handler and default NET 2F handler>
  6102                                  
  6103                                  ;IF installed
  6104                                  ;---------------------------------------------------------------------------
  6105                                  ;
  6106                                  ; Procedure Name : SetBad
  6107                                  ;
  6108                                  ; SetBad sets up info for bad functions
  6109                                  ;
  6110                                  ;---------------------------------------------------------------------------
  6111                                  
  6112                                  SetBad:
  6113                                  	;mov	ax,1
  6114 000017B0 B80100                  	MOV	AX,error_invalid_function ; ALL NET REQUESTS get inv func
  6115                                  
  6116                                  ;	set up ds to point to DOSDATA
  6117                                  
  6118                                  	; MSDOS 6.0
  6119                                  	;push	ds
  6120                                  
  6121                                  	;getdseg <ds>
  6122                                  	;MOV	[EXTERR_LOCUS],errLOC_Unk	
  6123                                  
  6124                                  	; MSDOS 3.3
  6125                                  	;mov	byte [cs:EXTERR_LOCUS],1
  6126 000017B3 2EC606[D102]01          	MOV	byte [CS:EXTERR_LOCUS],errLOC_Unk
  6127                                  
  6128                                  	;pop	ds	  		;hkn; restore ds
  6129                                  
  6130 000017B9 F9                      	STC
  6131 000017BA C3                      	retn
  6132                                  
  6133                                  ;--------------------------------------------------------------------------
  6134                                  ;
  6135                                  ; Procedure Name : BadCall
  6136                                  ;
  6137                                  ; BadCall is the initial routine for bad function calls
  6138                                  ;
  6139                                  ;--------------------------------------------------------------------------
  6140                                  
  6141                                  BadCall:
  6142 000017BB E8F2FF                  	call	SetBad
  6143 000017BE CB                      	retf
  6144                                  
  6145                                  ;--------------------------------------------------------------------------
  6146                                  ;
  6147                                  ; OKCall always sets carry to off.
  6148                                  ;
  6149                                  ;-----------------------------------------------------------------------
  6150                                  
  6151                                  OKCall:
  6152 000017BF F8                      	CLC
  6153 000017C0 CB                      	retf
  6154                                  
  6155                                  ;---------------------------------------------------------------------------
  6156                                  ;
  6157                                  ; Procedure Name : INT2F
  6158                                  ;
  6159                                  ; INT 2F handler works as follows:
  6160                                  ;   PUSH    AX
  6161                                  ;   MOV     AX,multiplex:function
  6162                                  ;   INT     2F
  6163                                  ;   POP     ...
  6164                                  ; The handler itself needs to make the AX available for the various routines.
  6165                                  ;
  6166                                  ;----------------------------------------------------------------------------
  6167                                  
  6168                                  ;PUBLIC	Int2F
  6169                                  ;INT2F	PROC	FAR
  6170                                  
  6171                                  	; 18/07/2018 - Retro DOS v3.0
  6172                                  
  6173                                  INT2F:
  6174                                  	; Offset 172Fh in IBMDOS.COM (MSDOS 3.3), 1987
  6175                                  INT2FNT:
  6176                                  	;ASSUME	CS:DOSCODE,DS:NOTHING,ES:NOTHING,SS:NOTHING
  6177 000017C1 FB                      	STI
  6178                                  	;cmp	ah,11h
  6179 000017C2 80FC11                  	CMP	AH,MultNET
  6180 000017C5 750A                    	JNZ	short INT2FSHR
  6181                                  TestInstall:
  6182 000017C7 08C0                    	OR	AL,AL
  6183 000017C9 7403                    	JZ	short Leave2F
  6184                                  BadFunc:
  6185 000017CB E8E2FF                  	CALL	SetBad
  6186                                  
  6187                                  	;entry	Leave2F
  6188                                  Leave2F:
  6189 000017CE CA0200                  	RETF	2			; long return + clear flags off stack
  6190                                  
  6191                                  INT2FSHR:
  6192                                  	;cmp	ah,10h
  6193 000017D1 80FC10                  	CMP	AH,MultSHARE		; is this a share request
  6194 000017D4 74F1                    	JZ	short TestInstall	; yes, check for installation
  6195                                  INT2FNLS:
  6196                                  	;cmp	ah,14h
  6197 000017D6 80FC14                  	CMP	AH,NLSFUNC		; is this a DOS 3.3 NLSFUNC request
  6198 000017D9 74EC                    	JZ	short TestInstall	; yes check for installation
  6199                                  INT2FDOS:
  6200                                  	;ASSUME	CS:DOSCODE,DS:NOTHING,ES:NOTHING,SS:NOTHING
  6201                                  
  6202                                  	; 18/07/2018
  6203                                  	; MSDOS 6.0
  6204                                  	;CMP	AH,MultDOS
  6205                                  	;JNZ	check_win		;check if win386 broadcast
  6206                                  	;jmp	DispatchDOS
  6207                                  
  6208                                  	; .... win386 .... 
  6209                                  	
  6210                                  	; 18/07/2018
  6211                                  	; MSDOS 3.3
  6212                                  	;cmp	ah,12h	
  6213 000017DB 80FC12                  	CMP	AH,MultDOS
  6214 000017DE 7401                    	jz	short DispatchDOS
  6215 000017E0 CF                      	iret
  6216                                  
  6217                                  ;INT2F	ENDP
  6218                                  	
  6219                                  DispatchDOS:
  6220 000017E1 2EFF36[D80E]            	PUSH	word [CS:FOO]		; push return address
  6221 000017E6 2EFF36[DA0E]            	PUSH	word [CS:DTab]		; push table address
  6222 000017EB 50                      	PUSH	AX			; push index
  6223 000017EC 55                      	PUSH	BP
  6224 000017ED 89E5                    	MOV	BP,SP
  6225                                  		; stack looks like:
  6226                                  		;   0	BP
  6227                                  		;   2	DISPATCH
  6228                                  		;   4	TABLE
  6229                                  		;   6	RETURN
  6230                                  		;   8	LONG-RETURN
  6231                                  		;   c	FLAGS
  6232                                  		;   e	AX
  6233                                  	
  6234 000017EF 8B460E                  	MOV	AX,[BP+0Eh]		; get AX value
  6235 000017F2 5D                      	POP	BP
  6236 000017F3 E8AD07                  	call	TableDispatch
  6237 000017F6 EBD3                    	JMP	short BadFunc 		; return indicates invalid function
  6238                                  
  6239                                  INT2F_etcetera:
  6240                                  	;entry	DosGetGroup
  6241                                  DosGetGroup:
  6242                                  	; MSDOS 6.0
  6243                                  ;SR; Cannot use CS now
  6244                                  ;
  6245                                  ;	PUSH	CS
  6246                                  ;	POP	DS
  6247                                  
  6248                                  	;getdseg <ds>
  6249                                  	;retn
  6250                                  
  6251                                  	; MSDOS 3.3
  6252 000017F8 0E                      	push	cs
  6253 000017F9 1F                      	pop	ds
  6254 000017FA C3                      	retn
  6255                                  
  6256                                  	;entry	DOSInstall
  6257                                  DOSInstall:
  6258 000017FB B0FF                    	MOV	AL,0FFh
  6259 000017FD C3                      	retn
  6260                                  
  6261                                  ;ENDIF
  6262                                  
  6263                                  ;============================================================================
  6264                                  ; DOSTAB.ASM (MSDOS 6.0, 1991)
  6265                                  ;============================================================================
  6266                                  ; 18/07/2018 - Retro DOS 3.0
  6267                                  
  6268                                  ;CASE MAPPER ROUTINE FOR 80H-FFH character range, DOS 3.3
  6269                                  ;     ENTRY: AL = Character to map
  6270                                  ;     EXIT:  AL = The converted character
  6271                                  ; Alters no registers except AL and flags.
  6272                                  ; The routine should do nothing to chars below 80H.
  6273                                  ;
  6274                                  ; Example:
  6275                                  
  6276                                  ;Procedure   MAP_CASE,FAR
  6277                                  
  6278                                  MAP_CASE:
  6279                                  	; Offset 176Ch in IBMDOS.COM (MSDOS 3.3), 1987
  6280                                  	
  6281 000017FE 3C80                    	CMP	AL,80H
  6282 00001800 7301                    	JAE	short Map1	;Map no chars below 80H ever
  6283 00001802 CB                      	RETF
  6284                                  Map1:
  6285 00001803 2C80                    	SUB	AL,80H		;Turn into index value
  6286 00001805 1E                      	PUSH	DS
  6287 00001806 53                      	PUSH	BX
  6288 00001807 BB[8810]                	MOV	BX,UCASE_TAB+2
  6289                                  FINISH:
  6290 0000180A 0E                      	PUSH	CS		;Move to DS
  6291 0000180B 1F                      	POP	DS
  6292 0000180C D7                      	XLAT			; Get upper case character
  6293 0000180D 5B                      	POP	BX
  6294 0000180E 1F                      	POP	DS
  6295                                  L_RET:	
  6296 0000180F CB                      	RETF
  6297                                  
  6298                                  ;EndProc MAP_CASE
  6299                                  
  6300                                  ;============================================================================
  6301                                  ; DOSMES.INC (MSDOS 6.0, 1991)
  6302                                  ;============================================================================
  6303                                  ; 18/07/2018 - Retro DOS v3.0
  6304                                  
  6305                                  ; DOSMES.ASM (MSDOS 2.11, 1983)
  6306                                  
  6307                                  ; OEMFunction key is expected to process a single function
  6308                                  ;   key input from a device and dispatch to the proper
  6309                                  ;   routines leaving all registers UNTOUCHED.
  6310                                  ;
  6311                                  ; Inputs:   CS, SS are DOSGROUP
  6312                                  ; Outputs:  None. This function is expected to JMP to onw of
  6313                                  ;           the following labels:
  6314                                  ;
  6315                                  ;           GetCh       - ignore the sequence
  6316                                  ;           TwoEsc      - insert an ESCChar in the buffer
  6317                                  ;           ExitIns     - toggle insert mode
  6318                                  ;           EnterIns    - toggle insert mode
  6319                                  ;           BackSp      - move backwards one space
  6320                                  ;           ReEdit      - reedit the line with a new template
  6321                                  ;           KilNew      - discard the current line and start from scratch
  6322                                  ;           CopyLin     - copy the rest of the template into the line
  6323                                  ;           SkipStr     - read the next character and skip to it in the template
  6324                                  ;           CopyStr     - read next char and copy from template to line until char
  6325                                  ;           SkipOne     - advance position in template one character
  6326                                  ;           CopyOne     - copy next character in template into line
  6327                                  ;           CtrlZ       - place a ^Z into the template
  6328                                  ; Registers that are allowed to be modified by this function are:
  6329                                  ;           AX, CX, BP
  6330                                  
  6331                                  OEMFunctionKey:
  6332 00001810 E87908                  	CALL	_$STD_CON_INPUT_NO_ECHO  ; Get the second byte of the sequence
  6333 00001813 B10E                    	MOV     CL,ESCTABLEN ; 14	; length of table for scan
  6334 00001815 57                      	PUSH    DI                      ; save DI (cannot change it!)
  6335 00001816 BF[D312]                	MOV     DI,ESCTAB		; offset of second byte table
  6336 00001819 F2AE                    	REPNE   SCASB                   ; Look it up in the table
  6337 0000181B 5F                      	POP     DI                      ; restore DI
  6338 0000181C D1E1                    	SHL     CX,1                    ; convert byte offset to word
  6339 0000181E 89CD                    	MOV     BP,CX                   ; move to indexable register
  6340                                  	;JMP	word [SS:BP+ESCFUNC]	; Go to the right routine
  6341 00001820 FFA6[E112]              	JMP	word [BP+ESCFUNC]
  6342                                  	
  6343                                  ;============================================================================
  6344                                  ; TIME.ASM (MSDOS 6.0, 1991)
  6345                                  ;============================================================================
  6346                                  ; Retro DOS v3.0 - 18/07/2018
  6347                                  
  6348                                  ; SYSCALL.ASM (MSDOS 2.11, 1983)
  6349                                  ;----------------------------------------------------------------------------
  6350                                  ; Retro DOS v2.0 - 13/03/2018
  6351                                  
  6352                                  ;**	TIME.ASM - System Calls and low level routines for DATE and TIME
  6353                                  
  6354                                  	;BREAK <DATE AND TIME - SYSTEM CALLS 42,43,44,45>
  6355                                  
  6356                                  ;**	$GET_DATE - Get Current Date
  6357                                  ;
  6358                                  ;	ENTRY	none
  6359                                  ;	EXIT	(cx:dx) = current date
  6360                                  ;	USES	all
  6361                                  
  6362                                  _$GET_DATE:	;System call 42
  6363                                  
  6364 00001824 16                              PUSH    SS
  6365 00001825 1F                              POP     DS
  6366 00001826 E8B700                          CALL	READTIME        ;Check for rollover to next day
  6367 00001829 A1[FE02]                        MOV     AX,[YEAR]
  6368                                  
  6369                                  ;	WARNING!!!! DAY and MONTH must be adjacently allocated!
  6370                                  
  6371 0000182C 8B1E[FC02]                      MOV     BX,[DAY]	; fetch both day and month
  6372 00001830 E8D8FD                  	CALL	Get_User_Stack	;Get pointer to user registers
  6373                                          ;MOV    [SI+6],BX  	;DH=month, DL=day
  6374 00001833 895C06                  	MOV	[SI+user_env.user_DX],BX
  6375 00001836 05BC07                          ADD     AX,1980         ;Put bias back
  6376                                          ;MOV    [SI+4],AX  	;CX=year
  6377 00001839 894404                  	MOV	[SI+user_env.user_CX],AX
  6378                                          ;MOV	AL,[WEEKDAY]
  6379 0000183C 36A0[0203]                      MOV	AL,[SS:WEEKDAY]	;hkn; SS override
  6380 00001840 C3                      	RETN
  6381                                  
  6382                                  ;**	$SET_DATE - Set Current Date
  6383                                  ;
  6384                                  ;	ENTRY	(cx:dx) = current date
  6385                                  ;	EXIT	(al) = -1 iff bad date
  6386                                  ;		(al) = 0 if ok
  6387                                  ;	USES	all
  6388                                  
  6389                                  _$SET_DATE:			;System call 43
  6390                                  
  6391 00001841 B0FF                            MOV     AL,-1           ;Be ready to flag error
  6392 00001843 81E9BC07                        SUB     CX,1980         ;Fix bias in year
  6393 00001847 7217                            JC      SHORT RET24	;Error if not big enough
  6394 00001849 83F977                          CMP     CX,119          ;Year must be less than 2100
  6395 0000184C 7712                            JA      SHORT RET24
  6396 0000184E 08F6                            OR      DH,DH
  6397 00001850 740E                            JZ      SHORT RET24
  6398 00001852 08D2                            OR      DL,DL
  6399 00001854 740A                            JZ      SHORT RET24	;Error if either month or day is 0
  6400 00001856 80FE0C                          CMP     DH,12           ;Check against max. month
  6401 00001859 7705                            JA      SHORT RET24
  6402 0000185B 16                              PUSH    SS
  6403 0000185C 1F                              POP     DS
  6404 0000185D E81301                  	CALL	DODATE
  6405                                  RET24:  
  6406 00001860 C3                      	RETN
  6407                                  
  6408                                  
  6409                                  ;**	$GET_TIME - Get Current Time
  6410                                  ;
  6411                                  ;	ENTRY	none
  6412                                  ;	EXIT	(cx:dx) = current time
  6413                                  ;	USES	all
  6414                                  
  6415                                  _$GET_TIME:			;System call 44
  6416                                  
  6417 00001861 16                              PUSH    SS
  6418 00001862 1F                              POP     DS
  6419 00001863 E87A00                  	CALL	READTIME
  6420 00001866 E8A2FD                  	CALL	Get_User_Stack           ;Get pointer to user registers
  6421                                         ;MOV     [SI+6],DX
  6422 00001869 895406                  	MOV	[SI+user_env.user_DX],DX
  6423                                         ;MOV     [SI+4],CX
  6424 0000186C 894C04                  	MOV	[SI+user_env.user_CX],CX
  6425 0000186F 30C0                            XOR     AL,AL
  6426                                  RET26:  
  6427 00001871 C3                      	RETN
  6428                                  
  6429                                  ;**	$SET_TIME - Set Current Time
  6430                                  ;
  6431                                  ;	ENTRY	(cx:dx) = time
  6432                                  ;	EXIT	(al) = 0 if 0k
  6433                                  ;		(al) = -1 if invalid
  6434                                  ;	USES	ALL
  6435                                  
  6436                                  _$SET_TIME:			;System call 45
  6437                                  
  6438 00001872 B0FF                            MOV     AL,-1           ;Flag in case of error
  6439 00001874 80FD18                          CMP     CH,24           ;Check hours
  6440 00001877 73F8                            JAE     SHORT RET26
  6441 00001879 80F93C                          CMP     CL,60           ;Check minutes
  6442 0000187C 73F3                            JAE     SHORT RET26
  6443 0000187E 80FE3C                          CMP     DH,60           ;Check seconds
  6444 00001881 73EE                            JAE     SHORT RET26
  6445 00001883 80FA64                          CMP     DL,100          ;Check 1/100's
  6446 00001886 73E9                            JAE     SHORT RET26
  6447 00001888 51                              PUSH    CX
  6448 00001889 52                              PUSH    DX
  6449 0000188A 16                              PUSH    SS
  6450 0000188B 1F                              POP     DS
  6451 0000188C BB[5803]                        MOV     BX,TIMEBUF
  6452 0000188F B90600                          MOV     CX,6
  6453 00001892 31D2                            XOR     DX,DX
  6454 00001894 89D0                            MOV     AX,DX
  6455 00001896 53                              PUSH    BX
  6456 00001897 E88836                  	CALL	SETREAD
  6457 0000189A 1E                              PUSH    DS
  6458 0000189B C536[2E00]                      LDS     SI,[BCLOCK]
  6459 0000189F E85C36                  	CALL	DEVIOCALL2      ;Get correct day count
  6460 000018A2 1F                              POP     DS
  6461 000018A3 5B                              POP     BX
  6462 000018A4 E8AE36                  	CALL	SETWRITE
  6463 000018A7 8F06[5C03]                      POP     WORD [TIMEBUF+4]
  6464 000018AB 8F06[5A03]                      POP     WORD [TIMEBUF+2]
  6465 000018AF C536[2E00]                      LDS     SI,[BCLOCK]
  6466 000018B3 E84836                  	CALL	DEVIOCALL2      ;Set the time
  6467 000018B6 30C0                            XOR     AL,AL
  6468 000018B8 C3                              RETN
  6469                                  
  6470                                  ; 11/07/2018 - Retro DOS v3.0
  6471                                  ; Retro DOS v2.0 - 14/03/2018
  6472                                  
  6473                                  FOURYEARS EQU 3*365 + 366  ; = 1461 
  6474                                  
  6475                                  ;SUBTTL DATE16, READTIME, DODATE -- GUTS OF TIME AND DATE
  6476                                  
  6477                                  ;
  6478                                  ; Date16 returns the current date in AX, current time in DX
  6479                                  ;   AX - YYYYYYYMMMMDDDDD  years months days
  6480                                  ;   DX - HHHHHMMMMMMSSSSS  hours minutes seconds/2
  6481                                  ;
  6482                                  
  6483                                  DATE16:
  6484                                  	
  6485                                  ;M048	Context DS
  6486                                  ;
  6487                                  ; Since this function can be called thru int 2f we shall not assume that SS
  6488                                  ; is DOSDATA
  6489                                  
  6490                                  	;getdseg	<ds>			; M048
  6491                                  
  6492                                  	;PUSH	SS
  6493 000018B9 0E                      	PUSH	CS
  6494 000018BA 1F                      	POP	DS
  6495                                  
  6496 000018BB 51                              PUSH    CX
  6497 000018BC 06                              PUSH    ES
  6498 000018BD E82000                          CALL    READTIME
  6499 000018C0 07                              POP     ES
  6500 000018C1 D0E1                            SHL     CL,1            ;Minutes to left part of byte
  6501 000018C3 D0E1                            SHL     CL,1
  6502 000018C5 D1E1                            SHL     CX,1            ;Push hours and minutes to left end
  6503 000018C7 D1E1                            SHL     CX,1
  6504 000018C9 D1E1                            SHL     CX,1
  6505 000018CB D0EE                            SHR     DH,1            ;Count every two seconds
  6506 000018CD 08F1                            OR      CL,DH           ;Combine seconds with hours and minutes
  6507 000018CF 89CA                            MOV     DX,CX
  6508                                  
  6509                                  ;	WARNING!  MONTH and YEAR must be adjacently allocated
  6510                                  
  6511 000018D1 A1[FD02]                        MOV     AX,[MONTH]	;Fetch month and year
  6512 000018D4 B104                            MOV     CL,4
  6513 000018D6 D2E0                            SHL     AL,CL		;Push month to left to make room for day
  6514 000018D8 D1E0                            SHL     AX,1
  6515 000018DA 59                              POP     CX
  6516 000018DB 0A06[FC02]                      OR      AL,[DAY]
  6517                                  RET21:
  6518 000018DF C3                              RETN
  6519                                  
  6520                                  READTIME:
  6521                                  ;Gets time in CX:DX. Figures new date if it has changed.
  6522                                  ;Uses AX, CX, DX.
  6523                                  
  6524 000018E0 C706[8D0F]0000          	MOV	word [DATE_FLAG],0 ; reset date flag for CPMIO
  6525 000018E6 56                              PUSH    SI
  6526 000018E7 53                              PUSH    BX
  6527                                  
  6528 000018E8 BB[5803]                        MOV     BX,TIMEBUF
  6529                                  
  6530 000018EB B90600                          MOV     CX,6
  6531 000018EE 31D2                            XOR     DX,DX
  6532 000018F0 89D0                            MOV     AX,DX
  6533 000018F2 E82D36                  	CALL	SETREAD
  6534 000018F5 1E                              PUSH    DS
  6535 000018F6 C536[2E00]                      LDS     SI,[BCLOCK]
  6536 000018FA E80136                  	CALL	DEVIOCALL2      ;Get correct date and time
  6537 000018FD 1F                              POP     DS
  6538 000018FE 5B                              POP     BX
  6539 000018FF 5E                              POP     SI
  6540 00001900 A1[5803]                        MOV     AX,[TIMEBUF]
  6541 00001903 8B0E[5A03]                      MOV     CX,[TIMEBUF+2]
  6542 00001907 8B16[5C03]                      MOV     DX,[TIMEBUF+4]
  6543 0000190B 3B06[0003]                      CMP     AX,[DAYCNT]     ;See if day count is the same
  6544                                          ;JZ	SHORT RET22
  6545 0000190F 74CE                    	JZ	SHORT RET21 ; 18/07/2018
  6546                                  	;cmp	ax,43830
  6547 00001911 3D36AB                          CMP     AX,FOURYEARS*30 ;Number of days in 120 years
  6548 00001914 733D                            JAE     SHORT RET22	;Ignore if too large
  6549 00001916 A3[0003]                        MOV     [DAYCNT],AX
  6550 00001919 56                              PUSH    SI
  6551 0000191A 51                              PUSH    CX
  6552 0000191B 52                              PUSH    DX              ;Save time
  6553 0000191C 31D2                            XOR     DX,DX
  6554                                  	;mov	cx,1461
  6555 0000191E B9B505                          MOV     CX,FOURYEARS    ;Number of days in 4 years
  6556 00001921 F7F1                            DIV     CX              ;Compute number of 4-year units
  6557 00001923 D1E0                            SHL     AX,1
  6558 00001925 D1E0                            SHL     AX,1
  6559 00001927 D1E0                            SHL     AX,1            ;Multiply by 8 (no. of half-years)
  6560 00001929 89C1                            MOV     CX,AX           ;<240 implies AH=0
  6561                                  
  6562 0000192B BE[7F0C]                        MOV     SI,YRTAB        ;Table of days in each year
  6563                                  
  6564 0000192E E82300                          CALL    DSLIDE          ;Find out which of four years we're in
  6565 00001931 D1E9                            SHR     CX,1            ;Convert half-years to whole years
  6566 00001933 7304                            JNC     SHORT SK	;Extra half-year?
  6567 00001935 81C2C800                        ADD     DX,200
  6568                                  SK:
  6569 00001939 E82400                          CALL    SETYEAR
  6570 0000193C B101                            MOV     CL,1            ;At least at first month in year
  6571                                  
  6572 0000193E BE[870C]                        MOV     SI,MONTAB       ;Table of days in each month
  6573                                          
  6574 00001941 E81000                  	CALL    DSLIDE          ;Find out which month we're in
  6575 00001944 880E[FD02]                      MOV     [MONTH],CL
  6576 00001948 42                              INC     DX              ;Remainder is day of month (start with one)
  6577 00001949 8816[FC02]                      MOV     [DAY],DL
  6578 0000194D E89400                          CALL    WKDAY           ;Set day of week
  6579 00001950 5A                              POP     DX
  6580 00001951 59                              POP     CX
  6581 00001952 5E                              POP     SI
  6582                                  RET22:  
  6583 00001953 C3                      	RETN
  6584                                  
  6585                                  DSLIDE:
  6586 00001954 B400                            MOV     AH,0
  6587                                  DSLIDE1:
  6588 00001956 AC                              LODSB			;Get count of days
  6589 00001957 39C2                            CMP     DX,AX           ;See if it will fit
  6590 00001959 7217                            JB      SHORT RET23	;If not, done
  6591 0000195B 29C2                            SUB     DX,AX
  6592 0000195D 41                              INC     CX              ;Count one more month/year
  6593 0000195E EBF6                            JMP     SHORT DSLIDE1
  6594                                  
  6595                                  SETYEAR:
  6596                                  ;Set year with value in CX. Adjust length of February for this year.
  6597                                  
  6598                                  ; NOTE: This can also be called thru int 2f. If this is called then it will
  6599                                  ;       set DS to DOSDATA. Since the only guy calling this should be the DOS
  6600                                  ;	redir, DS will be DOSDATA anyway. It is going to be in-efficient to
  6601                                  ;	preserve DS as CHKYR is also called as a routine.
  6602                                  
  6603                                  
  6604                                  	; MSDOS 6.0 (18/07/2018) ; *
  6605                                  
  6606                                  	;GETDSEG DS
  6607                                  
  6608 00001960 0E                      	PUSH	CS  ; *
  6609 00001961 1F                      	POP	DS  ; *
  6610                                  
  6611                                  	; Offset 18CEh in IBMDOS.COM (MSDOS 3.3), 1987 
  6612                                  
  6613 00001962 880E[FE02]                      MOV     [YEAR],CL
  6614                                  CHKYR:
  6615 00001966 F6C103                          TEST    CL,3            ;Check for leap year
  6616 00001969 B01C                            MOV     AL,28
  6617 0000196B 7502                            JNZ     SHORT SAVFEB	;28 days if no leap year
  6618 0000196D FEC0                            INC     AL              ;Add leap day
  6619                                  SAVFEB:
  6620                                  	;mov	[february],al
  6621 0000196F A2[880C]                        MOV     [MONTAB+1],AL   ;Store for February
  6622                                  RET23:  
  6623 00001972 C3                      	RETN
  6624                                  
  6625                                  DODATE:
  6626 00001973 E8F0FF                          CALL    CHKYR           ;Set Feb. up for new year
  6627 00001976 88F0                            MOV     AL,DH
  6628                                  
  6629 00001978 BB[860C]                        MOV     BX,MONTAB-1
  6630                                  
  6631 0000197B D7                              XLAT                    ;Look up days in month
  6632 0000197C 38D0                            CMP     AL,DL
  6633 0000197E B0FF                            MOV     AL,-1           ;Restore error flag, just in case
  6634                                          ;JB	SHORT RET25	;Error if too many days
  6635 00001980 72F0                            jb	short RET23 ; 18/07/2018
  6636 00001982 E8DBFF                  	CALL    SETYEAR
  6637                                  ;
  6638                                  ; WARNING!  DAY and MONTH must be adjacently allocated
  6639                                  ;
  6640 00001985 8916[FC02]                      MOV     [DAY],DX	;Set both day and month
  6641 00001989 D1E9                            SHR     CX,1
  6642 0000198B D1E9                            SHR     CX,1
  6643                                  	;mov	ax,1461
  6644 0000198D B8B505                          MOV     AX,FOURYEARS
  6645 00001990 89D3                            MOV     BX,DX
  6646 00001992 F7E1                            MUL     CX
  6647 00001994 8A0E[FE02]                      MOV     CL,[YEAR]
  6648 00001998 80E103                          AND     CL,3
  6649                                  
  6650 0000199B BE[7F0C]                        MOV     SI,YRTAB
  6651                                  
  6652 0000199E 89C2                            MOV     DX,AX
  6653 000019A0 D1E1                            SHL     CX,1            ;Two entries per year, so double count
  6654 000019A2 E85200                          CALL    DSUM            ;Add up the days in each year
  6655 000019A5 88F9                            MOV     CL,BH           ;Month of year
  6656                                  
  6657 000019A7 BE[870C]                        MOV     SI,MONTAB
  6658                                  
  6659 000019AA 49                              DEC     CX              ;Account for months starting with one
  6660 000019AB E84900                          CALL    DSUM            ;Add up days in each month
  6661 000019AE 88D9                            MOV     CL,BL           ;Day of month
  6662 000019B0 49                              DEC     CX              ;Account for days starting with one
  6663 000019B1 01CA                            ADD     DX,CX           ;Add in to day total
  6664 000019B3 92                              XCHG    AX,DX           ;Get day count in AX
  6665 000019B4 A3[0003]                        MOV     [DAYCNT],AX
  6666 000019B7 56                              PUSH    SI
  6667 000019B8 53                              PUSH    BX
  6668 000019B9 50                              PUSH    AX
  6669                                  
  6670 000019BA BB[5803]                        MOV     BX,TIMEBUF
  6671                                  
  6672 000019BD B90600                          MOV     CX,6
  6673 000019C0 31D2                            XOR     DX,DX
  6674 000019C2 89D0                            MOV     AX,DX
  6675 000019C4 53                              PUSH    BX
  6676 000019C5 E85A35                  	CALL	SETREAD
  6677                                  
  6678 000019C8 1E                              PUSH    DS
  6679 000019C9 C536[2E00]                      LDS     SI,[BCLOCK]
  6680 000019CD E82E35                  	CALL	DEVIOCALL2	;Get correct date and time
  6681 000019D0 1F                              POP     DS
  6682 000019D1 5B                              POP     BX
  6683 000019D2 E88035                  	CALL	SETWRITE
  6684 000019D5 8F06[5803]                      POP     WORD [TIMEBUF]
  6685 000019D9 1E                              PUSH    DS
  6686 000019DA C536[2E00]                      LDS     SI,[BCLOCK]
  6687 000019DE E81D35                  	CALL	DEVIOCALL2      ;Set the date
  6688 000019E1 1F                              POP     DS
  6689 000019E2 5B                              POP     BX
  6690 000019E3 5E                              POP     SI
  6691                                  WKDAY:
  6692 000019E4 A1[0003]                        MOV     AX,[DAYCNT]
  6693 000019E7 31D2                            XOR     DX,DX
  6694 000019E9 B90700                          MOV     CX,7
  6695 000019EC 40                              INC     AX
  6696 000019ED 40                              INC     AX              ;First day was Tuesday
  6697 000019EE F7F1                            DIV     CX              ;Compute day of week
  6698 000019F0 8816[0203]                      MOV     [WEEKDAY],DL
  6699 000019F4 30C0                            XOR     AL,AL           ;Flag OK
  6700                                  RET25:
  6701 000019F6 C3                      	RETN
  6702                                  
  6703                                  ;**	DSUM - Compute the sum of a string of bytes
  6704                                  ;
  6705                                  ;	ENTRY	(cx) = byte count
  6706                                  ;		(ds:si) = byte address
  6707                                  ;		(dx) = sum register, initialized by caller
  6708                                  ;	EXIT	(dx) updated
  6709                                  ;	USES	ax, cx, dx, si, flags
  6710                                  
  6711                                  DSUM:
  6712 000019F7 B400                            MOV     AH,0
  6713                                  	;JCXZ	DSUM9
  6714 000019F9 E3FB                            JCXZ	RET25 ; 18/07/2018
  6715                                  DSUM1:
  6716 000019FB AC                              LODSB
  6717 000019FC 01C2                            ADD     DX,AX
  6718 000019FE E2FB                            LOOP    DSUM1
  6719                                  DSUM9:
  6720 00001A00 C3                              RETN
  6721                                  
  6722                                  
  6723                                  ;============================================================================
  6724                                  ; GETSET.ASM
  6725                                  ;============================================================================
  6726                                  ; 18/07/2018 - Retro DOS v3.0 (GETSET.ASM, MSDOS 6.0, 1991)
  6727                                  ; Retro DOS v2.0 - 12/03/2018
  6728                                  
  6729                                  ;TITLE	GETSET - GETting and SETting MS-DOS system calls
  6730                                  ;NAME	GETSET
  6731                                  
  6732                                  ;CODE	SEGMENT BYTE PUBLIC  'CODE'
  6733                                  ;       ASSUME  SS:DOSGROUP,CS:DOSGROUP
  6734                                  
  6735                                  ;USERNUM:
  6736                                  ;	DW	0			; 24 bit user number
  6737                                  ;       DB      0
  6738                                  ;;	IF      IBM
  6739                                  ;;OEMNUM: DB    0			; 8 bit OEM number
  6740                                  ;;	ELSE
  6741                                  ;OEMNUM: DB     0FFH			; 8 bit OEM number
  6742                                  ;;	ENDIF
  6743                                  
  6744                                  ;MSVERS:		; MS-DOS version in hex for $GET_VERSION
  6745                                  ;; 08/07/2018 - Retro DOS v3.0
  6746                                  ;MSMAJOR: DB	MAJOR_VERSION	; DOS_MAJOR_VERSION
  6747                                  ;MSMINOR: DB	MINOR_VERSION	; DOS_MINOR_VERSION  
  6748                                  
  6749                                  
  6750                                  ;BREAK <$Get_Version -- Return MSDOS version number>
  6751                                  
  6752                                  _$GET_VERSION:
  6753                                  
  6754                                  ; Inputs:
  6755                                  ;       None
  6756                                  ; Function:
  6757                                  ;       Return MS-DOS version number
  6758                                  ; Outputs:
  6759                                  ;       OEM number in BH
  6760                                  ;       User number in BL:CX (24 bits)
  6761                                  ;       Version number as AL.AH in binary
  6762                                  ;       NOTE: On pre 1.28 DOSs AL will be zero
  6763                                  
  6764                                  ; MSDOS 6.0
  6765                                  ;		if input al = 00
  6766                                  ;		  (bh) = OEM number			
  6767                                  ;		else if input al = 01
  6768                                  ;		  (bh) = version flags
  6769                                  ;		 
  6770                                  ;		       	 bits 0-2 = DOS internal revision
  6771                                  ;		       	 bits 3-7 = DOS type flags
  6772                                  ;		              bit 3    = DOS is in ROM
  6773                                  ;		              bit 4    = DOS in in HMA
  6774                                  ;		              bits 5-7 = reserved
  6775                                  ;               M007 change - only bit 3 is now valid.  Other bits
  6776                                  ;               are 0 when AL = 1
  6777                                  
  6778                                  	
  6779                                  	; MSDOS 3.3 (IBMDOS.COM, offset 196Dh)
  6780                                  
  6781 00001A01 16                              PUSH    SS
  6782 00001A02 1F                              POP     DS
  6783 00001A03 8B1E[5403]                      MOV     BX,[USERNUM+2]
  6784 00001A07 8B0E[5203]                      MOV     CX,[USERNUM]
  6785 00001A0B A1[7D0C]                        MOV     AX,[MSVERS]
  6786 00001A0E E8FAFB                          call	Get_User_Stack
  6787                                          ;MOV	[SI+2],BX
  6788 00001A11 895C02                  	mov	[SI+user_env.user_BX],BX
  6789                                          ;MOV	[SI+4],CX
  6790 00001A14 894C04                  	mov	[SI+user_env.user_CX],CX
  6791                                          ;MOV	[SI+user_env.user_AX],AX  ; Really only sets AH
  6792 00001A17 8904                            MOV	[SI],AX ; 31/03/2018
  6793 00001A19 C3                      	RETN
  6794                                  
  6795                                  ; 18/07/2018 - Retro DOS v3.0
  6796                                  
  6797                                  ;BREAK <$Get/Set_Verify_on_Write - return/set verify-after-write flag>
  6798                                  
  6799                                  ;**	$Get_Verify_On_Write - Get Status of Verify on write flag
  6800                                  ;
  6801                                  ;	ENTRY	none
  6802                                  ;	EXIT	(al) = value of VERIFY flag
  6803                                  ;	USES	all
  6804                                  
  6805                                  
  6806                                  _$GET_VERIFY_ON_WRITE:
  6807                                  
  6808                                  ;hkn; SS override
  6809 00001A1A 36A0[AD02]              	MOV	AL,[SS:VERFLG]	; Retro DOS v2.0 - 12/03/2018
  6810 00001A1E C3                      	retn
  6811                                  
  6812                                  ;**	$Set_Verify_On_Write - Set Status of Verify on write flag
  6813                                  ;
  6814                                  ;	ENTRY	(al) = value of VERIFY flag
  6815                                  ;	EXIT	none
  6816                                  ;	USES	all
  6817                                  
  6818                                  _$SET_VERIFY_ON_WRITE:
  6819                                  
  6820 00001A1F 2401                    	AND	AL,1
  6821                                  ;hkn; SS override
  6822 00001A21 36A2[AD02]              	MOV	[SS:VERFLG],AL	; Retro DOS v2.0 - 12/03/2018
  6823                                  RET27:	; 18/07/2018
  6824 00001A25 C3                      	retn
  6825                                  
  6826                                  ; 19/07/2018 - Retro DOS v3.0
  6827                                  
  6828                                  ;BREAK <$International - return country-dependent information>
  6829                                  
  6830                                  ;----------------------------------------------------------------------------
  6831                                  ;
  6832                                  ; Procedure Name : $INTERNATIONAL
  6833                                  ;
  6834                                  ; Inputs:
  6835                                  ;	MOV	AH,International
  6836                                  ;	MOV	AL,country	(al = 0 => current country)
  6837                                  ;      [MOV	BX,country]
  6838                                  ;	LDS	DX,block
  6839                                  ;	INT	21
  6840                                  ; Function:
  6841                                  ;	give users an idea of what country the application is running
  6842                                  ; Outputs:
  6843                                  ;	IF DX != -1 on input (get country)
  6844                                  ;	  AL = 0 means return current country table.
  6845                                  ;	  0<AL<0FFH means return country table for country AL
  6846                                  ;	  AL = 0FF means return country table for country BX
  6847                                  ;	  No Carry:
  6848                                  ;	     Register BX will contain the 16-bit country code.
  6849                                  ;	     Register AL will contain the low 8 bits of the country code.
  6850                                  ;	     The block pointed to by DS:DX is filled in with the information
  6851                                  ;	     for the particular country.
  6852                                  ;		BYTE  Size of this table excluding this byte and the next
  6853                                  ;		BYTE  Country code represented by this table
  6854                                  ;			A sequence of n bytes, where n is the number specified
  6855                                  ;			by the first byte above and is not > internat_block_max,
  6856                                  ;			in the correct order for being returned by the
  6857                                  ;			INTERNATIONAL call as follows:
  6858                                  ;		WORD	Date format 0=mdy, 1=dmy, 2=ymd
  6859                                  ;		5 BYTE	Currency symbol null terminated
  6860                                  ;		2 BYTE	thousands separator null terminated
  6861                                  ;		2 BYTE	Decimal point null terminated
  6862                                  ;		2 BYTE	Date separator null terminated
  6863                                  ;		2 BYTE	Time separator null terminated
  6864                                  ;		1 BYTE	Bit field.  Currency format.
  6865                                  ;			Bit 0.	=0 $ before #  =1 $ after #
  6866                                  ;			Bit 1.	no. of spaces between # and $ (0 or 1)
  6867                                  ;		1 BYTE	No. of significant decimal digits in currency
  6868                                  ;		1 BYTE	Bit field.  Time format.
  6869                                  ;			Bit 0.	=0 12 hour clock  =1 24 hour
  6870                                  ;		DWORD	Call address of case conversion routine
  6871                                  ;		2 BYTE	Data list separator null terminated.
  6872                                  ;	  Carry:
  6873                                  ;	     Register AX has the error code.
  6874                                  ;	IF DX = -1 on input (set current country)
  6875                                  ;	  AL = 0 is an error
  6876                                  ;	  0<AL<0FFH means set current country to country AL
  6877                                  ;	  AL = 0FF means set current country to country BX
  6878                                  ;	  No Carry:
  6879                                  ;	    Current country SET
  6880                                  ;	    Register AL will contain the low 8 bits of the country code.
  6881                                  ;	  Carry:
  6882                                  ;	     Register AX has the error code.
  6883                                  ;-----------------------------------------------------------------------------
  6884                                  
  6885                                  ;procedure   $INTERNATIONAL,NEAR   ; DOS 3.3
  6886                                  
  6887                                  _$INTERNATIONAL:  ; IBMDOS.COM (MSDOS 3.3), offset 1992h
  6888                                  	 
  6889 00001A26 3CFF                    	CMP	AL,0FFH
  6890 00001A28 7404                    	JZ	short BX_HAS_CODE	; -1 means country code is in BX
  6891 00001A2A 88C3                    	MOV	BL,AL			; Put AL country code in BX
  6892 00001A2C 30FF                    	XOR	BH,BH
  6893                                  BX_HAS_CODE:
  6894 00001A2E 1E                      	PUSH	DS
  6895 00001A2F 07                      	POP	ES
  6896 00001A30 52                      	PUSH	DX
  6897 00001A31 5F                      	POP	DI			; User buffer to ES:DI
  6898                                  
  6899                                  ;hkn; SS is DOSDATA
  6900                                  ;	context DS
  6901                                  
  6902 00001A32 16                      	push	ss
  6903 00001A33 1F                      	pop	ds
  6904                                  
  6905 00001A34 83FFFF                  	CMP	DI,-1
  6906 00001A37 745F                    	JZ	short international_set
  6907 00001A39 09DB                    	OR	BX,BX
  6908 00001A3B 7505                    	JNZ	short international_find
  6909                                  
  6910                                  ;hkn; country_cdpg is in DOSDATA segment.
  6911 00001A3D BE[FD0F]                	MOV	SI,COUNTRY_CDPG
  6912                                  
  6913 00001A40 EB40                    	JMP	SHORT international_copy
  6914                                  
  6915                                  international_find:
  6916 00001A42 BD0000                  	MOV	BP,0			 ; flag it for GetCntry only
  6917 00001A45 E80B00                  	CALL	international_get
  6918 00001A48 7256                    	JC	short errtn
  6919 00001A4A 83FB00                  	CMP	BX,0			 ; nlsfunc finished it ?
  6920 00001A4D 7533                    	JNZ	SHORT international_copy ; no, copy by myself
  6921 00001A4F 89D3                    	MOV	BX,DX			 ; put country back
  6922 00001A51 EB3A                    	JMP	SHORT international_ok3
  6923                                  
  6924                                  international_get:
  6925                                  
  6926                                  ;hkn; country_cdpg is in DOSDATA segment.
  6927                                  ;hkn; use ss override to access COUNTRY_CDPG fields
  6928 00001A53 BE[FD0F]                	MOV	SI,COUNTRY_CDPG
  6929                                  
  6930                                  	; MSDOS 6.0
  6931                                  	;CMP	BX,ss:[SI.ccDosCountry]	 ; = current country id;smr;SS Override
  6932                                  	;retz				 ; return if equal
  6933                                  
  6934                                  	; MSDOS 3.3
  6935                                  	;cmp	bx,[SI+63h]
  6936 00001A56 3B5C63                  	CMP	BX,[SI+DOS_CCDPG.ccDosCountry]
  6937 00001A59 74CA                    	jz	short RET27
  6938                                  
  6939 00001A5B 89DA                    	MOV	DX,BX
  6940 00001A5D 31DB                    	XOR	BX,BX			; bx = 0, default code page
  6941                                  	;CallInstall NLSInstall,NLSFUNC,0 ; check if NLSFUNC in memory
  6942                                  
  6943 00001A5F B80014                  	mov	ax,1400h
  6944 00001A62 CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - INSTALLATION CHECK
  6945                                  			; Return: AL = 00h not installed, OK to install
  6946                                  			; 01h not installed, not OK
  6947                                  			; FFh installed
  6948                                  	
  6949 00001A64 3CFF                    	CMP	AL,0FFH
  6950 00001A66 7516                    	JNZ	short interr		; not in memory
  6951                                  	;cmp	bp,0
  6952 00001A68 09ED                    	or	bp,bp			; GetCntry ?
  6953 00001A6A 7507                    	JNZ	short stcdpg
  6954                                  	;CallInstall GetCntry,NLSFUNC,4	; get country info
  6955                                  
  6956 00001A6C B80414                  	mov     ax,1404h
  6957 00001A6F CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - GET COUNTRY INFO
  6958                                  			; BX = code page, DX = country code,
  6959                                  			; DS:SI -> internal code page structure
  6960                                  			; ES:DI -> user buffer
  6961                                  			; Return: AL = status
  6962                                  
  6963 00001A71 EB05                    	JMP	short chkok
  6964                                  	
  6965                                  	;nop
  6966                                  
  6967                                  stcdpg:
  6968                                  	;CallInstall SetCodePage,NLSFUNC,3  ; set country info
  6969                                  
  6970 00001A73 B80314                  	mov     ax,1403h
  6971 00001A76 CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - SET COUNTRY INFO
  6972                                  			; DS:SI -> internal code page structure
  6973                                  			; BX = code page, DX = country code
  6974                                  			; Return: AL = status
  6975                                  chkok:
  6976 00001A78 08C0                    	or	al,al			; success ?
  6977                                  	;retz				; yes
  6978 00001A7A 74A9                    	jz	short RET27
  6979                                  
  6980                                  setcarry:
  6981 00001A7C F9                      	STC				; set carry
  6982 00001A7D C3                      	retn
  6983                                  interr:
  6984 00001A7E B0FF                    	MOV	AL,0FFH			; flag nlsfunc error
  6985 00001A80 EBFA                    	JMP	short setcarry
  6986                                  
  6987                                  international_copy:
  6988                                  
  6989                                  ;hkn; country_cdpg is in DOSDATA segment.
  6990                                  ;hkn; use ss override to access COUNTRY_CDPG fields
  6991                                  	; MSDOS 6.0
  6992                                  	;MOV	BX,ss:[SI.ccDosCountry]	 ; = current country id;smr;SS Override
  6993                                  	;MOV	SI,OFFSET DOSDATA:COUNTRY_CDPG.ccDFormat
  6994                                  
  6995                                  	; MSDOS 3.3
  6996                                  	;mov	bx,[SI+63h]
  6997 00001A82 8B5C63                  	mov	BX,[SI+DOS_CCDPG.ccDosCountry]
  6998 00001A85 BE[6410]                	mov	SI,COUNTRY_CDPG+DOS_CCDPG.ccDFormat ; 08/09/2018
  6999                                  
  7000                                  	;mov	cx,24
  7001 00001A88 B91800                  	MOV	CX,OLD_COUNTRY_SIZE
  7002                                  
  7003                                  	; MSDOS 6.0
  7004                                  ;hkn;	must set up DS to SS so that international info can be copied
  7005                                  	;push	ds
  7006                                  	;push	ss					; cs -> ss
  7007                                  	;pop	ds
  7008                                  
  7009 00001A8B F3A4                    	REP	MOVSB			;copy country info
  7010                                  
  7011                                  	; MSDOS 6.0
  7012                                  ;hkn;	restore ds
  7013                                  	;pop	ds
  7014                                  
  7015                                  international_ok3:
  7016 00001A8D E87BFB                  	call	Get_User_Stack
  7017                                  ;ASSUME	DS:NOTHING
  7018                                  	;MOV	[SI+2],BX
  7019 00001A90 895C02                  	MOV	[SI+user_env.user_BX],BX
  7020                                  international_ok:
  7021 00001A93 89D8                    	MOV	AX,BX			; Return country code in AX too.
  7022 00001A95 E965FC                  	jmp	SYS_RET_OK
  7023                                  
  7024                                  international_set:
  7025                                  
  7026                                  ;hkn; ASSUME	DS:DOSGROUP
  7027                                  ;ASSUME	DS:DOSDATA
  7028                                  
  7029 00001A98 BD0100                  	MOV	BP,1			; flag it for SetCodePage only
  7030 00001A9B E8B5FF                  	CALL	international_get
  7031 00001A9E 73F3                    	JNC	short international_ok
  7032                                  errtn:
  7033 00001AA0 3CFF                    	CMP	AL,0FFH
  7034 00001AA2 7403                    	JZ	short errtn2
  7035                                  errtn1:
  7036 00001AA4 E962FC                  	jmp	SYS_RET_ERR		; return what we got from NLSFUNC
  7037                                  errtn2:
  7038                                  	;error	error_invalid_function	; NLSFUNC not existent
  7039                                  
  7040                                  	;mov	al,1
  7041 00001AA7 B001                    	mov	al,error_invalid_function 
  7042                                  	;jmp	short errtn1
  7043                                  errtn3:
  7044 00001AA9 E95DFC                  	jmp	SYS_RET_ERR
  7045                                  
  7046                                  ;EndProc $INTERNATIONAL
  7047                                  
  7048                                  ; 19/07/2018
  7049                                  
  7050                                  ;BREAK <$GetExtCntry - return extended country-dependent information>
  7051                                  
  7052                                  ;---------------------------------------------------------------------------
  7053                                  ;
  7054                                  ; Procedure Name : $GetExtCntry
  7055                                  ;
  7056                                  ; Inputs:
  7057                                  ;	if AL >= 20H
  7058                                  ;	  AL= 20H    capitalize single char, DL= char
  7059                                  ;	      21H    capitalize string, CX= string length
  7060                                  ;	      22H    capitalize ASCIIZ string
  7061                                  ;	      23H    YES/NO check, DL=1st char DH= 2nd char (DBCS)
  7062                                  ;	      80H bit 0 = use normal upper case table
  7063                                  ;		      1 = use file upper case table
  7064                                  ;	   DS:DX points to string
  7065                                  ;
  7066                                  ;	else
  7067                                  ;
  7068                                  ;	MOV	AH,GetExtCntry	 ; DOS 3.3
  7069                                  ;	MOV	AL,INFO_ID	( info type,-1 selects all )
  7070                                  ;	MOV	BX,CODE_PAGE	( -1 = active code page )
  7071                                  ;	MOV	DX,COUNTRY_ID	( -1 = active country )
  7072                                  ;	MOV	CX,SIZE 	( amount of data to return )
  7073                                  ;	LES	DI,COUNTRY_INFO ( buffer for returned data )
  7074                                  ;	INT	21
  7075                                  ; Function:
  7076                                  ;	give users extended country dependent information
  7077                                  ;	or capitalize chars
  7078                                  ; Outputs:
  7079                                  ;	  No Carry:
  7080                                  ;	     extended country info is succesfully returned
  7081                                  ;	  Carry:
  7082                                  ;	     Register AX has the error code.
  7083                                  ;	     AX=0, NO	 for YES/NO CHECK
  7084                                  ;		1, YES
  7085                                  ;-------------------------------------------------------------------------------
  7086                                  
  7087                                  ;procedure   $GetExtCntry,NEAR	; DOS 3.3
  7088                                  
  7089                                  	; MSDOS 6.0
  7090                                  _$GetExtCntry:
  7091 00001AAC 3C20                    	CMP	AL,CAP_ONE_CHAR 	; < 20H ?
  7092 00001AAE 7262                    	JB	short notcap
  7093                                  capcap: 				;
  7094 00001AB0 A880                    	TEST	AL,UPPER_TABLE		; which upper case table
  7095 00001AB2 7505                    	JNZ	short fileupper		; file upper case
  7096                                  
  7097                                  ;hkn; UCASE_TAB in DOSDATA
  7098 00001AB4 BB[8810]                	MOV	BX,UCASE_TAB+2		; get normal upper case
  7099 00001AB7 EB03                    	JMP	SHORT capit
  7100                                  
  7101                                  fileupper:
  7102                                  ;hkn; FILE_UCASE_TAB in DOSDATA
  7103 00001AB9 BB[0A11]                	MOV	BX,FILE_UCASE_TAB+2 ; get file upper case
  7104                                  capit:					;
  7105 00001ABC 3C20                    	CMP	AL,CAP_ONE_CHAR 	; cap one char ?
  7106 00001ABE 750D                    	JNZ	short chkyes		; no
  7107 00001AC0 88D0                    	MOV	AL,DL			; set up AL
  7108 00001AC2 E86C3B                  	call	GETLET3 		; upper case it
  7109 00001AC5 E843FB                  	call	Get_User_Stack		; get user stack
  7110 00001AC8 884406                  	MOV	[SI+user_env.user_DX],AL ; user's DL=AL
  7111 00001ACB EB1C                    	JMP	SHORT nono		; done
  7112                                  chkyes: 				;
  7113 00001ACD 3C23                    	CMP	AL,CHECK_YES_NO		; check YES or NO ?
  7114 00001ACF 751B                    	JNZ	short capstring		; no
  7115 00001AD1 31C0                    	XOR	AX,AX			; presume NO
  7116                                  		      
  7117                                  ;hkn; NLS_YES, NLS_NO, NLS_yes2, NLS_no2 is defined in msdos.cl3 which is
  7118                                  ;hkn; included in yesno.asm in the DOSCODE segment.
  7119                                  
  7120                                  	; 06/08/2018 - Retro DOS v3.0
  7121                                  	;CMP	DL,[cs:NLS_YES]		; is 'Y' ?
  7122 00001AD3 80FA59                  	cmp	DL,'Y'
  7123 00001AD6 7410                    	JZ	short yesyes		; yes
  7124                                  	;CMP	DL,[cs:NLS_yes2]	; is 'y' ?
  7125 00001AD8 80FA79                  	cmp	dl,'y'
  7126 00001ADB 740B                    	JZ	short yesyes		; yes
  7127 00001ADD 80FA4E                  	cmp	dl,'N'
  7128                                  	;CMP	DL,[cs:NLS_NO]		; is  'N'?
  7129 00001AE0 7407                    	JZ	short nono		; no
  7130 00001AE2 80FA6E                  	CMP	DL,'n'
  7131                                  	;CMP	DL,[cs:NLS_no2]		; is 'n' ?
  7132 00001AE5 7402                    	JZ	short nono		; no
  7133                                  ;dbcs_char:				;
  7134 00001AE7 40                      	INC	AX			; not YES or NO
  7135                                  yesyes: 				;
  7136 00001AE8 40                      	INC	AX			; return 1
  7137                                  nono:					;
  7138 00001AE9 E911FC                  	jmp	SYS_RET_OK		; done
  7139                                  capstring:				;
  7140 00001AEC 89D6                    	MOV	SI,DX			; si=dx
  7141 00001AEE 3C21                    	CMP	AL,CAP_STRING		; cap string ?
  7142 00001AF0 750F                    	JNZ	short capascii		; no
  7143 00001AF2 09C9                    	OR	CX,CX			; check count 0
  7144 00001AF4 74F3                    	JZ	short nono		; yes finished
  7145                                  concap: 				;
  7146 00001AF6 AC                      	LODSB				; get char
  7147 00001AF7 E8373B                  	call	GETLET3 		; upper case it
  7148 00001AFA 8844FF                  	MOV	byte [SI-1],AL		; store back
  7149                                  next99: 				;
  7150 00001AFD E2F7                    	LOOP	concap			; continue
  7151 00001AFF EBE8                    	JMP	short nono		; done
  7152                                  capascii:				;
  7153 00001B01 3C22                    	CMP	AL,CAP_ASCIIZ		; cap ASCIIZ string ?
  7154 00001B03 7545                    	JNZ	short capinval		; no
  7155                                  concap2:				;
  7156 00001B05 AC                      	LODSB				; get char
  7157 00001B06 08C0                    	or	al,al			; end of string ?
  7158 00001B08 74DF                    	JZ	short nono		; yes
  7159 00001B0A E8243B                  	call	GETLET3 		; upper case it
  7160 00001B0D 8844FF                  	MOV	[SI-1],AL		; store back
  7161 00001B10 EBF3                    	JMP	short concap2 		; continue
  7162                                  
  7163                                  	; MSDOS 3.3 ($ MSDOS 6.0)
  7164                                  
  7165                                  ; Offset 1A19h in IBMDOS.COM (MSDOS 3.3), 1987 	
  7166                                  ; _$GetExtCntry:
  7167                                  
  7168                                  notcap:
  7169 00001B12 83F905                  	CMP	CX,5			; minimum size is 5
  7170 00001B15 7279                    	jb	short sizeerror
  7171                                  
  7172                                  GEC_CONT:
  7173                                  ;hkn; SS is DOSDATA
  7174                                  	;context DS
  7175                                  
  7176 00001B17 16                      	push	ss
  7177                                  	;pop	es  ; ! (Retro DOS v3.0 BUG) !
  7178 00001B18 1F                      	pop	ds  ; 17/05/2019 - BugFix
  7179                                  	
  7180                                  ;hkn; COUNTRY_CDPG is in DOSDATA
  7181 00001B19 BE[FD0F]                	MOV	SI,COUNTRY_CDPG
  7182                                  
  7183 00001B1C 83FAFF                  	CMP	DX,-1			; active country ?
  7184 00001B1F 7503                    	JNZ	short GETCDPG 		; no
  7185                                  
  7186                                  ;hkn; use DS override to accesss country_cdpg fields
  7187                                  	;mov	dx,[si+63h]
  7188 00001B21 8B5463                  	MOV	DX,[SI+DOS_CCDPG.ccDosCountry]
  7189                                  					; get active country id;smr;use DS
  7190                                  GETCDPG:
  7191 00001B24 83FBFF                  	CMP	BX,-1			; active code page?
  7192 00001B27 7503                    	JNZ	short CHKAGAIN		; no, check again
  7193                                  
  7194                                  ;hkn; use DS override to accesss country_cdpg fields
  7195                                  	;mov	bx,[si+65h]
  7196 00001B29 8B5C65                  	MOV	BX,[SI+DOS_CCDPG.ccDosCodePage]
  7197                                  					; get active code page id;smr;Use DS
  7198                                  CHKAGAIN:
  7199                                  	;cmp	dx,[si+63h]
  7200 00001B2C 3B5463                  	CMP	DX,[SI+DOS_CCDPG.ccDosCountry]
  7201                                  					; same as active country id?;smr;use DS
  7202 00001B2F 7552                    	JNZ	short CHKNLS		; no
  7203                                  	;cmp	bx,[si+65h]
  7204 00001B31 3B5C65                  	CMP	BX,[SI+DOS_CCDPG.ccDosCodePage]	
  7205                                  					; same as active code pg id?;smr;use DS
  7206 00001B34 754D                    	JNZ	short CHKNLS		; no
  7207                                  CHKTYPE:
  7208                                  	;mov	bx,[si+48h]
  7209 00001B36 8B5C48                  	MOV	BX,[SI+DOS_CCDPG.ccSysCodePage]	
  7210                                  					; bx = sys code page id;smr;use DS
  7211                                  ;	CMP	AL,SetALL		; select all?
  7212                                  ;	JNZ	short SELONE
  7213                                  ;	MOV	SI,COUNTRY_CDPG+DOS_CCDPG.ccNumber_of_entries
  7214                                  ;SELONE:
  7215 00001B39 51                      	PUSH	CX			; save cx
  7216                                  	;mov	cx,[si+4Ah]
  7217 00001B3A 8B4C4A                  	MOV	CX,[SI+DOS_CCDPG.ccNumber_of_entries]	;smr;use DS
  7218 00001B3D BE[4910]                	MOV	SI,COUNTRY_CDPG+DOS_CCDPG.ccSetUcase   ;smr;CDPG in DOSDATA
  7219                                  NXTENTRY:
  7220 00001B40 3A04                    	CMP	AL,[SI] 		; compare info type;smr;use DS
  7221 00001B42 740B                    	JZ	short FOUNDIT
  7222 00001B44 83C605                  	ADD	SI,5			; next entry
  7223 00001B47 E2F7                    	LOOP	NXTENTRY
  7224 00001B49 59                      	POP	CX
  7225                                  capinval:
  7226                                  	;error	error_invalid_function	; info type not found
  7227                                  	;mov	al,1
  7228 00001B4A B001                    	mov	al,error_invalid_function
  7229 00001B4C E9BAFB                  	jmp	SYS_RET_ERR
  7230                                  
  7231                                  FOUNDIT:
  7232 00001B4F A4                      	MOVSB				; move info id byte
  7233 00001B50 59                      	POP	CX			; retsore char count
  7234                                  	;cmp	al,1
  7235 00001B51 3C01                    	CMP	AL,SetCountryInfo	; select country info type ?
  7236 00001B53 7415                    	JZ	short setsize
  7237 00001B55 B90400                  	MOV	CX,4			; 4 bytes will be moved
  7238 00001B58 B80500                  	MOV	AX,5			; 5 bytes will be returned in CX
  7239                                  OK_RETN:
  7240 00001B5B F3A4                    	REP	MOVSB			; copy info
  7241 00001B5D 89C1                    	MOV	CX,AX			; CX = actual length returned
  7242 00001B5F 89D8                    	MOV	AX,BX			; return sys code page in ax
  7243                                  GETDONE:
  7244 00001B61 E8A7FA                  	call	Get_User_Stack		; return actual length to user's CX
  7245                                  	;mov	[si+4],cx 
  7246 00001B64 894C04                  	MOV	[SI+user_env.user_CX],CX
  7247 00001B67 E993FB                  	jmp	SYS_RET_OK
  7248                                  setsize:
  7249 00001B6A 83E903                  	SUB	CX,3			; size after length field
  7250 00001B6D 390C                    	CMP	[SI],CX			; less than table size ;smr;use ds
  7251 00001B6F 7302                    	JAE	short setsize2		; no
  7252 00001B71 8B0C                    	MOV	CX,[SI]			; truncate to table size ;smr;use ds
  7253                                  setsize2:
  7254 00001B73 26890D                  	MOV	[ES:DI],CX		; copy actual length to user's
  7255 00001B76 83C702                  	ADD	DI,2			; update index
  7256 00001B79 83C602                  	ADD	SI,2
  7257 00001B7C 89C8                    	MOV	AX,CX
  7258 00001B7E 83C003                  	ADD	AX,3			; AX has the actual length
  7259 00001B81 EBD8                    	JMP	short OK_RETN 		; go move it
  7260                                  CHKNLS:
  7261 00001B83 30E4                    	XOR	AH,AH
  7262 00001B85 50                      	PUSH	AX			; save info type
  7263 00001B86 5D                      	POP	BP			; bp = info type
  7264                                  	
  7265                                  	;CallInstall NLSInstall,NLSFUNC,0 ; check if NLSFUNC in memory
  7266                                  
  7267 00001B87 B80014                  	mov     ax, 1400h
  7268 00001B8A CD2F                    	int     2Fh     ; - Multiplex - NLSFUNC.COM - INSTALLATION CHECK
  7269                                  			; Return: AL = 00h not installed, OK to install
  7270                                  			; 01h not installed, not OK
  7271                                  			; FFh installed
  7272                                  	
  7273 00001B8C 3CFF                    	CMP	AL,0FFH
  7274 00001B8E 7405                    	JZ	short NLSNXT		; in memory
  7275                                  
  7276                                  sizeerror:
  7277                                  	;error	error_invalid_function
  7278                                  	;mov	al,1
  7279 00001B90 B001                    	mov	al,error_invalid_function
  7280 00001B92 E974FB                  	jmp	SYS_RET_ERR
  7281                                  
  7282                                  NLSNXT: 
  7283                                  	;CallInstall GetExtInfo,NLSFUNC,2 ;get extended info
  7284                                  
  7285 00001B95 B80214                  	mov     ax, 1402h
  7286 00001B98 CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - GET COUNTRY INFO
  7287                                  			; BP = subfunction, BX = code page
  7288                                  			; DX = country code, DS:SI -> internal code page structure
  7289                                  			; ES:DI -> user buffer, CX = size of user buffer
  7290                                  			; Return: AL = status
  7291                                  			; 00h successful
  7292                                  			; else DOS error code
  7293                                  
  7294 00001B9A 3C00                    	CMP	AL,0			; success ?
  7295 00001B9C 7508                    	JNZ	short NLSERROR
  7296 00001B9E 8B4448                  	mov     ax,[si+48h]
  7297 00001BA1 8B4448                  	MOV	AX,[SI+DOS_CCDPG.ccSysCodePage]	
  7298                                  			; ax = sys code page id;smr;use ds;
  7299                                  			;BUGBUG;check whether DS is OK after the above calls
  7300 00001BA4 EBBB                    	JMP	short GETDONE
  7301                                  NLSERROR:
  7302 00001BA6 E960FB                  	jmp	SYS_RET_ERR		; return what is got from NLSFUNC
  7303                                  
  7304                                  ;EndProc $GetExtCntry
  7305                                  
  7306                                  ;BREAK <$GetSetCdPg - get or set global code page>
  7307                                  
  7308                                  ;**	$GetSetCdPg - Get or Set Global Code Page
  7309                                  ;
  7310                                  ;   System call format:
  7311                                  ;
  7312                                  ;	MOV	AH,GetSetCdPg	; DOS 3.3
  7313                                  ;	MOV	AL,n		; n = 1 : get code page, n = 2 : set code page
  7314                                  ;	MOV	BX,CODE_PAGE	( set code page only)
  7315                                  ;	INT	21
  7316                                  ;
  7317                                  ;	ENTRY	(al) = n
  7318                                  ;		(bx) = code page
  7319                                  ;	EXIT	'C' clear
  7320                                  ;		  global code page is set	(set global code page)
  7321                                  ;		  (BX) = active code page id	(get global code page)
  7322                                  ;		  (DX) = system code page id	(get global code page)
  7323                                  ;		'C' set
  7324                                  ;		  (AX) = error code
  7325                                  
  7326                                  ;procedure  $GetSetCdPg,NEAR   ; DOS 3.3
  7327                                  
  7328                                  _$GetSetCdPg:
  7329                                  
  7330                                  ;hkn; SS is DOSDATA
  7331                                  	;context DS
  7332                                  
  7333 00001BA9 16                      	push	ss
  7334 00001BAA 1F                      	pop	ds
  7335                                  
  7336                                  ;hkn; COUNTRY_CDPG is in DOSDATA
  7337 00001BAB BE[FD0F]                	MOV	SI,COUNTRY_CDPG
  7338                                  
  7339 00001BAE 3C01                    	CMP	AL,1		       ; get global code page
  7340 00001BB0 7512                    	JNZ	short setglpg 	       ; set global cod epage
  7341                                  	;mov	bx,[si+65h]
  7342 00001BB2 8B5C65                  	MOV	BX,[SI+DOS_CCDPG.ccDosCodePage]
  7343                                  					; get active code page id;smr;use ds
  7344                                  	;mov	dx,[si+48h]
  7345 00001BB5 8B5448                  	MOV	DX,[SI+DOS_CCDPG.ccSysCodePage]
  7346                                  				  	; get sys code page id;smr;use ds
  7347 00001BB8 E850FA                  	call	Get_User_Stack
  7348                                  ;ASSUME DS:NOTHING
  7349                                  	;mov	[si+2],bx
  7350 00001BBB 895C02                  	MOV	[SI+user_env.user_BX],BX ; update returned bx
  7351                                  	;mov	[si+6],dx
  7352 00001BBE 895406                  	MOV	[SI+user_env.user_DX],DX ; update returned dx
  7353                                  OK_RETURN:
  7354                                  	;transfer SYS_RET_OK
  7355 00001BC1 E939FB                  	jmp	SYS_RET_OK
  7356                                  
  7357                                  ;hkn; ASSUME DS:DOSGROUP
  7358                                  ;ASSUME	DS:DOSDATA
  7359                                  
  7360                                  setglpg:
  7361 00001BC4 3C02                    	CMP	AL,2
  7362 00001BC6 7534                    	JNZ	short nomem
  7363                                  ;;;;;;; CMP	BX,[SI+DOS_CCDPG.ccDosCodePage] ; same as active code page
  7364                                  ;;;;;;; JZ	short OK_RETURN		; yes
  7365                                  	;mov	dx,[si+63h]
  7366 00001BC8 8B5463                  	MOV	DX,[SI+DOS_CCDPG.ccDosCountry]	;smr;use ds
  7367                                  	;CallInstall NLSInstall,NLSFUNC,0 ; check if NLSFUNC in memory
  7368 00001BCB B80014                  	mov     ax, 1400h
  7369 00001BCE CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - INSTALLATION CHECK
  7370                                  			; Return: AL = 00h not installed, OK to install
  7371                                  			; 01h not installed, not OK
  7372                                  			; FFh installed
  7373 00001BD0 3CFF                    	CMP	AL,0FFH
  7374 00001BD2 7528                    	JNZ	short nomem		; not in memory
  7375                                  	;CallInstall SetCodePage,NLSFUNC,1  ;set the code page
  7376 00001BD4 B80114                  	mov     ax, 1401h
  7377 00001BD7 CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - CHANGE CODE PAGE
  7378                                  			; DS:SI -> internal code page structure
  7379                                  			; BX = new code page, DX = country code???
  7380                                  			; Return: AL = status
  7381                                  			; 00h successful
  7382                                  			; else DOS error code
  7383                                  	;cmp	al,0
  7384 00001BD9 08C0                    	or	al,al			   ; success ?
  7385 00001BDB 74E4                    	JZ	short OK_RETURN		   ; yes
  7386 00001BDD 3C41                    	CMP	AL,65			   ; set device code page failed
  7387 00001BDF 7518                    	JNZ	short seterr
  7388 00001BE1 B84100                  	MOV	AX,65
  7389 00001BE4 A3[D202]                	MOV	[EXTERR],AX
  7390                                  	;mov	byte [EXTERR_ACTION],6
  7391                                  	;mov	byte [EXTERR_CLASS],5
  7392                                  	;mov	byte [EXTERR_LOCUS],4
  7393 00001BE7 C606[D402]06            	MOV	byte [EXTERR_ACTION],errACT_Ignore
  7394 00001BEC C606[D502]05            	MOV	byte [EXTERR_CLASS],errCLASS_HrdFail
  7395 00001BF1 C606[D102]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev
  7396                                  	;transfer From_GetSet
  7397 00001BF6 E918FB                  	jmp	From_GetSet
  7398                                  
  7399                                  seterr:
  7400                                  	;transfer SYS_RET_ERR
  7401 00001BF9 E90DFB                  	jmp	SYS_RET_ERR
  7402                                  
  7403                                  nomem:
  7404                                  	;error	error_invalid_function ; function not defined
  7405                                  	;mov	al,1
  7406 00001BFC B001                    	mov	al,error_invalid_function
  7407 00001BFE EBF9                    	jmp	short seterr
  7408                                  
  7409                                  ;EndProc $GetSetCdPg
  7410                                  
  7411                                  
  7412                                  ;BREAK <$Get_Drive_Freespace -- Return bytes of free disk space on a drive>
  7413                                  
  7414                                  ;**	$Get_Drive_Freespace - Return amount of drive free space
  7415                                  ;
  7416                                  ;	$Get_Drive_Freespace returns the # of free allocation units on a
  7417                                  ;		drive.
  7418                                  ;
  7419                                  ;	This call returns the same info in the same registers (except for the
  7420                                  ;	FAT pointer) as the old FAT pointer calls
  7421                                  ;
  7422                                  ;	ENTRY	DL = Drive number
  7423                                  ;	EXIT	AX = Sectors per allocation unit
  7424                                  ;		   = -1 if bad drive specified
  7425                                  ;		On User Stack
  7426                                  ;		    BX = Number of free allocation units
  7427                                  ;		    DX = Total Number of allocation units on disk
  7428                                  ;		    CX = Sector size
  7429                                  
  7430                                  ;procedure   $GET_DRIVE_FREESPACE,NEAR
  7431                                  
  7432                                  _$GET_DRIVE_FREESPACE:
  7433                                  
  7434                                  ;hkn; SS is DOSDATA
  7435                                  	;context DS
  7436 00001C00 16                      	push	ss
  7437 00001C01 1F                      	pop	ds
  7438                                  
  7439 00001C02 88D0                    	MOV	AL,DL
  7440                                  	;invoke	GetThisDrv		; Get drive
  7441 00001C04 E86E4D                  	call	GETTHISDRV
  7442                                  SET_AX_RET:
  7443 00001C07 7218                    	JC	short BADFDRV
  7444                                  	;invoke	DISK_INFO
  7445 00001C09 E8AB1C                  	call	DISK_INFO
  7446 00001C0C 87D3                    	XCHG	DX,BX
  7447 00001C0E 72F7                    	JC	short SET_AX_RET	; User FAILed to I 24
  7448 00001C10 30E4                    	XOR	AH,AH			; Chuck Fat ID byte
  7449                                  DoSt:
  7450 00001C12 E8F6F9                  	call	Get_User_Stack
  7451                                  ;ASSUME	DS:NOTHING
  7452                                  	;mov	[si+6],dx
  7453                                  	;mov	[si+4],cx
  7454                                  	;mov	[si+2],bx
  7455 00001C15 895406                  	MOV	[SI+user_env.user_DX],DX
  7456 00001C18 894C04                  	MOV	[SI+user_env.user_CX],CX
  7457 00001C1B 895C02                  	MOV	[SI+user_env.user_BX],BX
  7458                                  	;MOV	[SI+user_env.user_AX],AX
  7459 00001C1E 8904                    	mov     [si],ax
  7460                                  	;return
  7461 00001C20 C3                      	retn
  7462                                  
  7463                                  BADFDRV:
  7464                                  	; MSDOS 6.0
  7465                                  	;;mov	al,0Fh
  7466                                  	;MOV	AL,error_invalid_drive	; Assume error
  7467                                  	
  7468                                  	; MSDOS 3.3
  7469                                  	;mov	al,0Fh
  7470 00001C21 B00F                    	mov	al,error_invalid_drive	; Assume error
  7471                                  
  7472                                  	;invoke	FCB_RET_ERR
  7473 00001C23 E8F9FA                  	call	FCB_RET_ERR
  7474 00001C26 B8FFFF                  	MOV	AX,-1
  7475 00001C29 EBE7                    	JMP	short DoSt
  7476                                  
  7477                                  ;EndProc $GET_DRIVE_FREESPACE
  7478                                  
  7479                                  
  7480                                  ;	BREAK <$Get_DMA, $Set_DMA -- Get/Set current DMA address>
  7481                                  
  7482                                  ;**	$Get_DMA - Get Disk Transfer Address
  7483                                  ;
  7484                                  ;	ENTRY	none
  7485                                  ;	EXIT	ES:BX is current transfer address
  7486                                  ;	USES	all
  7487                                  
  7488                                  _$GET_DMA:
  7489 00001C2B 368B1E[DA02]            	MOV	BX,[SS:DMAADD]
  7490 00001C30 368B0E[DC02]            	MOV	CX,[SS:DMAADD+2]
  7491 00001C35 E8D3F9                  	call	Get_User_Stack
  7492                                  	;mov	[si+2],bx
  7493                                  	;mov	[si+10h],cx
  7494 00001C38 895C02                  	MOV	[SI+user_env.user_BX],BX
  7495 00001C3B 894C10                  	MOV	[SI+user_env.user_ES],CX
  7496 00001C3E C3                      	retn
  7497                                  
  7498                                  ;**	$Set_DMA - Set Disk Transfer Address
  7499                                  ;
  7500                                  ;	ENTRY	DS:DX is current transfer address
  7501                                  ;	EXIT	none
  7502                                  ;	USES	all
  7503                                  
  7504                                  _$SET_DMA:
  7505 00001C3F 368916[DA02]            	MOV	[SS:DMAADD],DX
  7506 00001C44 368C1E[DC02]            	MOV	[SS:DMAADD+2],DS
  7507 00001C49 C3                      	retn
  7508                                  
  7509                                  ;	BREAK <$Get_Default_Drive, $Set_Default_Drive -- Set/Get default drive>
  7510                                  
  7511                                  ;**	$Get_Default_Drive - Get Current Default Drive
  7512                                  ;
  7513                                  ;	ENTRY	none
  7514                                  ;	EXIT	(AL) = drive number
  7515                                  ;	USES	all
  7516                                  
  7517                                  _$GET_DEFAULT_DRIVE:
  7518 00001C4A 36A0[E402]              	MOV	AL,[SS:CURDRV]
  7519 00001C4E C3                      	retn
  7520                                  
  7521                                  ;**	$Set_Default_Drive - Specify new Default Drive
  7522                                  ;
  7523                                  ;	ENTRY	(DL) = Drive number for new default drive
  7524                                  ;	EXIT	(AL) = Number of drives, NO ERROR RETURN IF DRIVE NUMBER BAD
  7525                                  
  7526                                  _$SET_DEFAULT_DRIVE:
  7527 00001C4F 88D0                    	MOV	AL,DL
  7528 00001C51 FEC0                    	INC	AL			; A=1, B=2...
  7529 00001C53 E8084D                  	call	GetVisDrv		; see if visible drive
  7530 00001C56 7204                    	JC	short SETRET		; errors do not set
  7531 00001C58 36A2[E402]              	MOV	[SS:CURDRV],AL		; no, set
  7532                                  
  7533                                  SETRET:
  7534 00001C5C 36A0[4700]              	MOV	AL,[SS:CDSCOUNT]	; let user see what the count really is
  7535 00001C60 C3                      	retn
  7536                                  
  7537                                  
  7538                                  ;BREAK <$Get/Set_Interrupt_Vector - Get/Set interrupt vectors>
  7539                                  
  7540                                  ;**	$Get_Interrupt_Vector - Get Interrupt Vector
  7541                                  ;
  7542                                  ;	$Get_Interrupt_Vector is the official way for user pgms to get the
  7543                                  ;	contents of an interrupt vector.
  7544                                  ;
  7545                                  ;	ENTRY	(AL) = interrupt number
  7546                                  ;	EXIT	(ES:BX) = current interrupt vector
  7547                                  
  7548                                  _$GET_INTERRUPT_VECTOR:
  7549 00001C61 E81A00                  	CALL	RECSET
  7550 00001C64 26C41F                  	LES	BX,[ES:BX]
  7551 00001C67 E8A1F9                  	call	Get_User_Stack
  7552                                  	;mov	[si+2],bx
  7553                                  	;mov	[si+10h],es
  7554 00001C6A 895C02                  	MOV	[SI+user_env.user_BX],BX
  7555 00001C6D 8C4410                  	MOV	[SI+user_env.user_ES],ES
  7556 00001C70 C3                      	retn
  7557                                  
  7558                                  ;**	$Set_Interrupt_Vector - Set Interrupt Vector
  7559                                  ;
  7560                                  ;	$Set_Interrupt_Vector is the official way for user pgms to set the
  7561                                  ;	contents of an interrupt vector.
  7562                                  ;
  7563                                  ;	M004, M068: Also set A20OFF_COUNT to 1 if EXECA20OFF bit has been set 
  7564                                  ;	and if A20OFF_COUNT is non-zero. See under tag M003 in inc\dossym.inc 
  7565                                  ;	for explanation.
  7566                                  ;
  7567                                  ;	ENTRY	(AL) = interrupt number
  7568                                  ;		(ds:dx) = desired new vector value
  7569                                  ;	EXIT	none
  7570                                  ;	USES	all
  7571                                  
  7572                                  _$SET_INTERRUPT_VECTOR:
  7573 00001C71 E80A00                  	CALL	RECSET
  7574 00001C74 FA                      	CLI				; Watch out!!!!! Folks sometimes use
  7575 00001C75 268917                  	MOV	[ES:BX],DX		;   this for hardware ints (like timer).
  7576 00001C78 268C5F02                	MOV	[ES:BX+2],DS
  7577 00001C7C FB                      	STI
  7578                                  					; M004, M068 - Start
  7579                                  	; MSDOS 6.0
  7580                                  	;test	byte [DOS_FLAG],EXECA20OFF
  7581                                  					; Q: was the previous call an int 21
  7582                                  					;    exec call
  7583                                  	;jnz	short siv_1		; Y: go set count
  7584 00001C7D C3                      	retn				; N: return
  7585                                  
  7586                                  ;siv_1:	
  7587                                  	;cmp	byte [A20OFF_COUNT],0	; Q: is count 0
  7588                                  	;jne	short siv_2		; N: done 
  7589                                  	;mov	byte [A20OFF_COUNT],1	; Y: set it to 1 to indicate to dos 
  7590                                  					; dispatcher to turn A20 Off before 
  7591                                  					; returning to user.
  7592                                  ;siv_2:
  7593                                  	;retn				; M004, M068 - End
  7594                                  	
  7595                                  RECSET:
  7596 00001C7E 31DB                    	XOR	BX,BX
  7597 00001C80 8EC3                    	MOV	ES,BX
  7598 00001C82 88C3                    	MOV	BL,AL
  7599 00001C84 D1E3                    	SHL	BX,1
  7600 00001C86 D1E3                    	SHL	BX,1
  7601 00001C88 C3                      	retn
  7602                                  
  7603                                  
  7604                                  ;	BREAK <$Char_Oper - hack on paths, switches so that xenix can look like PCDOS>
  7605                                  
  7606                                  ;**	$Char_Oper - Manipulate Switch Character
  7607                                  ;
  7608                                  ;	This function was put in to facilitate XENIX path/switch compatibility
  7609                                  ;
  7610                                  ;	ENTRY	AL = function:
  7611                                  ;		    0 - read switch char
  7612                                  ;		    1 - set switch char (char in DL)
  7613                                  ;		    2 - read device availability
  7614                                  ;			Always returns available
  7615                                  ;		    3 - set device availability
  7616                                  ;			No longer supported (NOP)
  7617                                  ;	EXIT	(al) = 0xff iff error
  7618                                  ;		(al) != 0xff if ok
  7619                                  ;		  (dl) = character/flag, iff "read switch char" subfunction
  7620                                  ;	USES	AL, DL
  7621                                  ;
  7622                                  ;	NOTE	This already obsolete function has been deactivated in DOS 5.0
  7623                                  ;		The character / is always returned for subfunction 0,
  7624                                  ;		subfunction 2 always returns -1, all other subfunctions are ignored.
  7625                                  
  7626                                  _$CHAR_OPER:
  7627                                  	; MSDOS 6.0
  7628                                  	;or	al,al				; get switch?
  7629                                  	;mov	dl,'/'				; assume yes
  7630                                  	;jz	short chop_1			; jump if yes
  7631                                  	;cmp	al,2				; check device availability?
  7632                                  	;mov	dl,-1				; assume yes
  7633                                  	;jz	short chop_1				; jump if yes
  7634                                  	;retn					; otherwise just quit
  7635                                  
  7636                                  ; subfunctions requiring return of value to user come here.  DL holds
  7637                                  ; value to return
  7638                                  
  7639                                  ;chop_1:
  7640                                  	;call	Get_User_Stack
  7641                                  	;mov	[SI+user_env.user_DX],dx	; store value for user
  7642                                  	;retn
  7643                                  
  7644                                  	; MSDOS 3.3
  7645                                  	; Offset 1B87h in IBMDOS.COM (MSDOS 3.3), 1987
  7646 00001C89 16                      	push    ss
  7647 00001C8A 1F                      	pop     ds
  7648 00001C8B 3C01                    	cmp     al, 1
  7649 00001C8D 720B                    	jb      short chop_1
  7650 00001C8F 740F                    	jz      short chop_2
  7651 00001C91 3C03                    	cmp     al, 3
  7652 00001C93 7210                    	jb      short chop_3
  7653 00001C95 7416                    	jz      short chop_5
  7654 00001C97 B0FF                    	mov     al, 0FFh
  7655 00001C99 C3                      	retn
  7656                                  chop_1:
  7657 00001C9A 8A16[AF02]              	mov     dl,[chSwitch]
  7658 00001C9E EB07                    	jmp     short chop_4
  7659                                  chop_2:
  7660 00001CA0 8816[AF02]              	mov     [chSwitch], dl
  7661 00001CA4 C3                      	retn
  7662                                  chop_3:
  7663 00001CA5 B2FF                    	mov     dl, 0FFh
  7664                                  chop_4:
  7665 00001CA7 E861F9                  	call    Get_User_Stack
  7666 00001CAA 895406                  	mov     [si+6],dx
  7667                                  chop_5:
  7668 00001CAD C3                      	retn
  7669                                  
  7670                                  
  7671                                  ;**	$GetExtendedError - Return Extended error code
  7672                                  ;
  7673                                  ;	This function reads up the extended error info from the static
  7674                                  ;	variables where it was stored.
  7675                                  ;
  7676                                  ;	ENTRY	none
  7677                                  ;	EXIT	AX = Extended error code (0 means no extended error)
  7678                                  ;		BL = recommended action
  7679                                  ;		BH = class of error
  7680                                  ;		CH = locus of error
  7681                                  ;		ES:DI = may be pointer
  7682                                  ;	USES	ALL
  7683                                  
  7684                                  _$GetExtendedError:
  7685 00001CAE 16                      	push	ss
  7686 00001CAF 1F                      	pop	ds
  7687 00001CB0 A1[D202]                	MOV	AX,[EXTERR]
  7688 00001CB3 C43E[D602]              	LES	DI,[EXTERRPT]
  7689 00001CB7 8B1E[D402]              	MOV	BX,[EXTERR_ACTION]	; BL = Action, BH = Class
  7690 00001CBB 8A2E[D102]              	MOV	CH,[EXTERR_LOCUS]
  7691 00001CBF E849F9                  	call	Get_User_Stack
  7692                                  	;mov	[si+0Ah],di
  7693 00001CC2 897C0A                  	MOV	[SI+user_env.user_DI],DI
  7694                                  	;mov	[si+10h],es
  7695 00001CC5 8C4410                  	MOV	[SI+user_env.user_ES],ES
  7696                                  	;mov	[si+2],bx
  7697 00001CC8 895C02                  	MOV	[SI+user_env.user_BX],BX
  7698                                  	;mov	[si+4],cx
  7699 00001CCB 894C04                  	MOV	[SI+user_env.user_CX],CX
  7700 00001CCE E92CFA                  	jmp	SYS_RET_OK
  7701                                  
  7702                                  
  7703                                  ;============================================================================
  7704                                  ; PARSE.ASM, MSDOS 6.0, 1991
  7705                                  ;============================================================================
  7706                                  ; 19/07/2018 - Retro DOS v3.0
  7707                                  
  7708                                  ; System calls for parsing command lines
  7709                                  ;
  7710                                  ;   $PARSE_FILE_DESCRIPTOR
  7711                                  ;
  7712                                  ;   Modification history:
  7713                                  ;
  7714                                  ;       Created: ARR 30 March 1983
  7715                                  ;               EE PathParse 10 Sept 1983
  7716                                  ;
  7717                                  
  7718                                  ;BREAK <$Parse_File_Descriptor -- Parse an arbitrary string into an FCB>
  7719                                  ;---------------------------------------------------------------------------
  7720                                  ; Inputs:
  7721                                  ;       DS:SI Points to a command line
  7722                                  ;       ES:DI Points to an empty FCB
  7723                                  ;       Bit 0 of AL = 1 At most one leading separator scanned off
  7724                                  ;                   = 0 Parse stops if separator encountered
  7725                                  ;       Bit 1 of AL = 1 If drive field blank in command line - leave FCB
  7726                                  ;                   = 0  "    "    "     "         "      "  - put 0 in FCB
  7727                                  ;       Bit 2 of AL = 1 If filename field blank - leave FCB
  7728                                  ;                   = 0  "       "      "       - put blanks in FCB
  7729                                  ;       Bit 3 of AL = 1 If extension field blank - leave FCB
  7730                                  ;                   = 0  "       "      "        - put blanks in FCB
  7731                                  ; Function:
  7732                                  ;       Parse command line into FCB
  7733                                  ; Returns:
  7734                                  ;       AL = 1 if '*' or '?' in filename or extension, 0 otherwise
  7735                                  ;       DS:SI points to first character after filename
  7736                                  ;---------------------------------------------------------------------------
  7737                                  
  7738                                  _$PARSE_FILE_DESCRIPTOR:
  7739 00001CD1 E85738                  	call	MAKEFCB
  7740 00001CD4 56                      	PUSH    SI
  7741 00001CD5 E833F9                  	call	Get_User_Stack
  7742                                  	;pop	word [si+8]
  7743 00001CD8 8F4408                  	POP     word [SI+user_env.user_SI]
  7744 00001CDB C3                      	retn
  7745                                  
  7746                                  ;============================================================================
  7747                                  ; MISC.ASM, MSDOS 6.0, 1991
  7748                                  ;============================================================================
  7749                                  ; 19/07/2018 - Retro DOS v3.0
  7750                                  
  7751                                  ;ENTRYPOINTSEG	EQU	0CH
  7752                                  ;MAXDIF		EQU	0FFFH
  7753                                  ;SAVEXIT 	EQU	10
  7754                                  ;WRAPOFFSET	EQU	0FEF0h
  7755                                  
  7756                                  ;
  7757                                  ;----------------------------------------------------------------------------
  7758                                  ;
  7759                                  ;**	$SLEAZEFUNC - Get a Pointer to the Media Byte
  7760                                  ;
  7761                                  ;	Return Stuff sort of like old get fat call
  7762                                  ;
  7763                                  ;	ENTRY	none
  7764                                  ;	EXIT	DS:BX = Points to FAT ID byte (IBM only)
  7765                                  ;			GOD help anyone who tries to do ANYTHING except
  7766                                  ;			READ this ONE byte.
  7767                                  ;		DX = Total Number of allocation units on disk
  7768                                  ;		CX = Sector size
  7769                                  ;		AL = Sectors per allocation unit
  7770                                  ;		   = -1 if bad drive specified
  7771                                  ;	USES	all
  7772                                  ;
  7773                                  ;**	$SLEAZEFUNCDL - Get a Pointer to the Media Byte
  7774                                  ;
  7775                                  ;	Identical to $SLEAZEFUNC except (dl) = drive
  7776                                  ;
  7777                                  ;	ENTRY	(dl) = drive (0=default, 1=A, 2=B, etc.)
  7778                                  ;	EXIT	DS:BX = Points to FAT ID byte (IBM only)
  7779                                  ;			GOD help anyone who tries to do ANYTHING except
  7780                                  ;			READ this ONE byte.
  7781                                  ;		DX = Total Number of allocation units on disk
  7782                                  ;		CX = Sector size
  7783                                  ;		AL = Sectors per allocation unit
  7784                                  ;		   = -1 if bad drive specified
  7785                                  ;	USES	all
  7786                                  ;
  7787                                  ;----------------------------------------------------------------------------
  7788                                  ;
  7789                                  
  7790                                  _$SLEAZEFUNC:
  7791 00001CDC B200                    	MOV	DL,0
  7792                                  
  7793                                  _$SLEAZEFUNCDL:
  7794 00001CDE 16                      	push	ss
  7795 00001CDF 1F                      	pop	ds
  7796                                  	
  7797 00001CE0 88D0                    	MOV	AL,DL
  7798 00001CE2 E8904C                  	call	GETTHISDRV		; Get CDS structure
  7799                                  SET_AL_RET:
  7800                                  	; MSDOS 6.0
  7801                                  	;;mov	al, 0Fh
  7802                                  	;MOV	AL,error_invalid_drive	; Assume error	;AC000;
  7803                                  	
  7804                                  	; MSDOS 3.3
  7805                                  	;mov	al, 0Fh
  7806 00001CE5 B00F                    	MOV	AL,error_invalid_drive	; Assume error	;AC000;
  7807                                  
  7808 00001CE7 721E                    	JC	short BADSLDRIVE
  7809                                  
  7810 00001CE9 E8CB1B                  	call	DISK_INFO
  7811 00001CEC 72F7                    	JC	short SET_AL_RET	; User FAILed to I 24
  7812 00001CEE 8826[3005]              	MOV	[FATBYTE],AH
  7813                                  
  7814                                  ; NOTE THAT A FIXED MEMORY CELL IS USED --> THIS CALL IS NOT
  7815                                  ; RE-ENTRANT. USERS BETTER GET THE ID BYTE BEFORE THEY MAKE THE
  7816                                  ; CALL AGAIN
  7817                                  
  7818 00001CF2 BF[3005]                	MOV	DI,FATBYTE
  7819 00001CF5 30E4                    	XOR	AH,AH			; AL has sectors/cluster
  7820 00001CF7 E811F9                  	call	Get_User_Stack
  7821                                  	;mov	[si+4],cx
  7822                                  	;mov	[si+6],bx
  7823                                  	;mov	[si+2],di
  7824 00001CFA 894C04                  	MOV	[SI+user_env.user_CX],CX
  7825 00001CFD 895C06                  	MOV	[SI+user_env.user_DX],BX
  7826 00001D00 897C02                  	MOV	[SI+user_env.user_BX],DI
  7827                                  	
  7828                                  	;mov	[si+0Eh],cs
  7829                                  	;mov	[SI+user_env.user_DS],SS
  7830 00001D03 8C4C0E                  	MOV     [SI+user_env.user_DS],CS ; stash correct pointer
  7831                                  
  7832 00001D06 C3                      	retn
  7833                                  
  7834                                  BADSLDRIVE:
  7835 00001D07 E915FA                  	jmp	FCB_RET_ERR
  7836                                  
  7837                                  ;
  7838                                  ;----------------------------------------------------------------------------
  7839                                  ;
  7840                                  ;**	$Get_INDOS_Flag - Return location of DOS Critical Section Flag
  7841                                  ;
  7842                                  ;	Returns location of DOS status for interrupt routines
  7843                                  ;									   ;
  7844                                  ;	ENTRY	none
  7845                                  ;	EXIT	(es:bx) = flag location
  7846                                  ;	USES	all
  7847                                  ;
  7848                                  ;----------------------------------------------------------------------------
  7849                                  ;
  7850                                  
  7851                                  _$GET_INDOS_FLAG:
  7852 00001D0A E8FEF8                          CALL	Get_User_Stack
  7853                                          ;MOV	WORD [SI+2],INDOS
  7854 00001D0D C74402[CF02]            	MOV     word [SI+user_env.user_BX],INDOS
  7855                                          ;MOV	[SI+10H],SS
  7856 00001D12 8C5410                  	MOV	[SI+user_env.user_ES],SS
  7857 00001D15 C3                      	RETN 
  7858                                  
  7859                                  ;
  7860                                  ;----------------------------------------------------------------------------
  7861                                  ;
  7862                                  ;**	$Get_IN_Vars - Return Pointer to DOS Variables
  7863                                  ;
  7864                                  ;	Return a pointer to interesting DOS variables This call is version
  7865                                  ;	dependent and is subject to change without notice in future versions.
  7866                                  ;	Use at risk.
  7867                                  ;
  7868                                  ;	ENTRY	none
  7869                                  ;	EXIT	(es:bx) = address of SYSINITVAR
  7870                                  ;	uses	ALL
  7871                                  ;
  7872                                  ;----------------------------------------------------------------------------
  7873                                  ;
  7874                                  
  7875                                  _$GET_IN_VARS:
  7876 00001D16 E8F2F8                          CALL	Get_User_Stack
  7877                                          ;MOV	WORD [SI+2],SYSINITVAR
  7878                                  	;MOV	word [SI+user_env.user_BX],SYSINITVAR
  7879 00001D19 C74402[2600]            	MOV	word [SI+user_env.user_BX],SYSINITVARS
  7880                                          ;MOV	[SI+10H],SS
  7881 00001D1E 8C5410                  	MOV	[SI+user_env.user_ES],SS
  7882 00001D21 C3                      	RETN
  7883                                  
  7884                                  ;
  7885                                  ;----------------------------------------------------------------------------
  7886                                  ;
  7887                                  ;**	$Get_Default_DPB - Return a pointer to the Default DPB
  7888                                  ;
  7889                                  ;	Return pointer to drive parameter table for default drive
  7890                                  ;
  7891                                  ;	ENTRY	none
  7892                                  ;	EXIT	(ds:bx) = DPB address
  7893                                  ;	USES	all
  7894                                  ;
  7895                                  ;**	$Get_DPB - Return a pointer to a specified DPB
  7896                                  ;
  7897                                  ;	Return pointer to a specified drive parameter table
  7898                                  ;
  7899                                  ;	ENTRY	(dl) = drive # (0 = default, 1=A, 2=B, etc.)
  7900                                  ;	EXIT	(al) = 0 iff ok
  7901                                  ;		  (ds:bx) = DPB address
  7902                                  ;		(al) = -1 if bad drive
  7903                                  ;	USES	all
  7904                                  ;
  7905                                  ;----------------------------------------------------------------------------
  7906                                  ;
  7907                                  
  7908                                  _$GET_DEFAULT_DPB:
  7909 00001D22 B200                    	MOV	DL,0
  7910                                  _$GET_DPB:
  7911 00001D24 16                      	push	ss
  7912 00001D25 1F                      	pop	ds
  7913                                  
  7914 00001D26 88D0                    	MOV	AL,DL
  7915 00001D28 E84A4C                  	call	GETTHISDRV		; Get CDS structure
  7916 00001D2B 7223                    	JC	short ISNODRV 		; no valid drive
  7917 00001D2D C43E[3A05]              	LES	DI,[THISCDS]		; check for net CDS
  7918                                  	;test	word [es:di+43h],8000h
  7919 00001D31 26F745430080            	TEST	word [ES:DI+curdir.flags],curdir_isnet
  7920 00001D37 7517                    	JNZ	short ISNODRV 		; No DPB to point at on NET stuff
  7921 00001D39 E83003                  	call	EcritDisk
  7922 00001D3C E8803E                  	call	FATREAD_CDS		; Force Media Check and return DPB
  7923 00001D3F E83203                  	call	LcritDisk
  7924 00001D42 720C                    	JC	short ISNODRV 		; User FAILed to I 24, only error we
  7925                                  					;   have.
  7926 00001D44 E8C4F8                  	call	Get_User_Stack
  7927                                  	;mov	[si+2],bp
  7928                                  	;mov	[si+0Eh],es
  7929 00001D47 896C02                  	MOV	[SI+user_env.user_BX],BP
  7930 00001D4A 8C440E                  	MOV	[SI+user_env.user_DS],ES
  7931 00001D4D 30C0                    	XOR	AL,AL
  7932 00001D4F C3                      	retn
  7933                                  ISNODRV:
  7934 00001D50 B0FF                    	MOV	AL,-1
  7935 00001D52 C3                      	retn
  7936                                  
  7937                                  ;
  7938                                  ;----------------------------------------------------------------------------
  7939                                  ;
  7940                                  ;**	$Disk_Reset - Flush out Dirty Buffers
  7941                                  ;
  7942                                  ;	$DiskReset flushes and invalidates all buffers.  BUGBUG - do
  7943                                  ;		we really invalidate?  SHould we?  THis screws non-removable
  7944                                  ;		caching.  Maybe CHKDSK relies upon it, though....
  7945                                  ;
  7946                                  ;	ENTRY	none
  7947                                  ;	EXIT	none
  7948                                  ;	USES	all
  7949                                  ;
  7950                                  ;----------------------------------------------------------------------------
  7951                                  ;
  7952                                  
  7953                                  _$DISK_RESET:
  7954 00001D53 16                      	push	ss
  7955 00001D54 1F                      	pop	ds
  7956 00001D55 B0FF                    	MOV	AL,-1
  7957 00001D57 E81203                  	call	EcritDisk
  7958                                  	; MSDOS 6.0
  7959                                  	;or	word [DOS34_FLAG],FROM_DISK_RESET    ;AN000;
  7960 00001D5A E8D441                  	call	FLUSHBUF
  7961                                  	; MSDOS 6.0
  7962                                  	;AND	word [DOS34_FLAG],NO_FROM_DISK_RESET ;AN000;
  7963                                  	;mov	word [SC_STATUS],0	; Throw out secondary cache M041
  7964                                  ;
  7965                                  ; We will "ignore" any errors on the flush, and go ahead and invalidate.  This
  7966                                  ; call doesn't return any errors and it is supposed to FORCE a known state, so
  7967                                  ; let's do it.
  7968                                  ;
  7969                                  ; Invalidate 'last-buffer' used
  7970                                  ;
  7971 00001D5D BBFFFF                  	MOV	BX,-1
  7972 00001D60 891E[2000]              	MOV	[LastBuffer+2],BX
  7973 00001D64 891E[1E00]              	MOV	[LastBuffer],BX
  7974                                  
  7975                                  	; MSDOS 3.3 
  7976                                  	; IBMDOS.COM, Offset 1C66h
  7977                                  	;;;;
  7978 00001D68 C536[3800]              	lds     si,[BUFFHEAD]
  7979 00001D6C B8FF20                  	mov	ax,20FFh	; .buf_ID,    AL = FFh (Free buffer)
  7980                                  				; .buf_flags, AH = 0, reset/clear
  7981                                  DRST_1:
  7982                                  	;mov	[si+4],ax
  7983 00001D6F 894404                  	mov	[si+BUFFINFO.buf_ID],ax
  7984 00001D72 C534                    	lds	si,[SI]
  7985 00001D74 39DE                    	cmp	si,bx ; -1
  7986 00001D76 7409                    	je	short DRST_2
  7987                                  	;mov	[si+4],ax
  7988 00001D78 894404                  	mov	[si+BUFFINFO.buf_ID],ax
  7989 00001D7B C534                    	lds	si,[SI]
  7990 00001D7D 39DE                    	cmp	si,bx
  7991 00001D7F 75EE                    	jne	short DRST_1
  7992                                  	;;;;
  7993                                  DRST_2:
  7994 00001D81 E8F002                  	call	LcritDisk
  7995                                  
  7996                                  	; 20/05/2019
  7997                                  	;MOV	AX,-1
  7998                                  	;CallInstall NetFlushBuf,MultNET,32,AX,AX
  7999                                  	;mov	ax,0FFFFh
  8000                                  
  8001 00001D84 B82011                  	mov     ax,1120h
  8002 00001D87 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - FLUSH ALL DISK BUFFERS
  8003                                  			; DS = DOS CS
  8004                                  			; Return: CF clear (successful)
  8005 00001D89 C3                      	retn
  8006                                  
  8007                                  	; 19/07/2018 - Retro DOS v3.0
  8008                                  
  8009                                  ;
  8010                                  ;	BREAK <$SetDPB - Create a valid DPB from a user-specified BPB>
  8011                                  ;
  8012                                  ;----------------------------------------------------------------------------
  8013                                  ;
  8014                                  ;**	$SetDPB - Create a DPB
  8015                                  ;
  8016                                  ;	SetDPB Creates a valid DPB from a user-specified BPB
  8017                                  ;
  8018                                  ;	ENTRY	ES:BP Points to DPB
  8019                                  ;		DS:SI Points to BPB
  8020                                  ;	EXIT	DPB setup
  8021                                  ;	USES	ALL but BP, DS, ES
  8022                                  ;
  8023                                  ;----------------------------------------------------------------------------
  8024                                  ;
  8025                                  
  8026                                  ; MSDOS 6.0
  8027 00001D8A 0300                    word3:	dw	3			; M008 -- word value for divides
  8028                                  
  8029                                  ;procedure   $SETDPB,NEAR
  8030                                  
  8031                                  _$SETDPB:
  8032 00001D8C 89EF                    	MOV	DI,BP
  8033 00001D8E 83C702                  	ADD	DI,2			; Skip over dpb_drive and dpb_UNIT
  8034 00001D91 AD                      	LODSW
  8035 00001D92 AB                      	STOSW				; dpb_sector_size
  8036                                  	; MSDOS 6.0
  8037 00001D93 807C0300                	CMP	BYTE [SI+A_BPB.BPB_NUMBEROFFATS-2],0 ; FAT file system drive ;AN000;
  8038 00001D97 7507                    	JNZ	short yesfat			     ; yes		;AN000;
  8039 00001D99 26C6450400              	MOV	BYTE [ES:DI+DPB.FAT_COUNT-4],0
  8040 00001D9E EB50                    	JMP	short setend			     ; NO		;AN000;
  8041                                  yesfat: ; 10/08/2018
  8042 00001DA0 89C2                    	MOV	DX,AX
  8043 00001DA2 AC                      	LODSB
  8044 00001DA3 FEC8                    	DEC	AL
  8045 00001DA5 AA                      	STOSB				; dpb_cluster_mask
  8046 00001DA6 FEC0                    	INC	AL
  8047 00001DA8 30E4                    	XOR	AH,AH
  8048                                  LOG2LOOP:
  8049 00001DAA A801                    	test	AL,1
  8050 00001DAC 7506                    	JNZ	short SAVLOG
  8051 00001DAE FEC4                    	INC	AH
  8052 00001DB0 D0E8                    	SHR	AL,1
  8053 00001DB2 EBF6                    	JMP	SHORT LOG2LOOP
  8054                                  SAVLOG:
  8055 00001DB4 88E0                    	MOV	AL,AH
  8056 00001DB6 AA                      	STOSB				; dpb_cluster_shift
  8057 00001DB7 88C3                    	MOV	BL,AL
  8058 00001DB9 A5                      	MOVSW				; dpb_first_FAT Start of FAT (# of reserved sectors)
  8059 00001DBA AC                      	LODSB
  8060 00001DBB AA                      	STOSB				; dpb_FAT_count Number of FATs
  8061                                  ;	OR	AL,AL			; NONFAT ?				;AN000;
  8062                                  ;	JZ	short setend		; yes, don't do anything                ;AN000;
  8063 00001DBC 88C7                    	MOV	BH,AL
  8064 00001DBE AD                      	LODSW
  8065 00001DBF AB                      	STOSW				; dpb_root_entries Number of directory entries
  8066 00001DC0 B105                    	MOV	CL,5
  8067 00001DC2 D3EA                    	SHR	DX,CL			; Directory entries per sector
  8068 00001DC4 48                      	DEC	AX
  8069 00001DC5 01D0                    	ADD	AX,DX			; Cause Round Up
  8070 00001DC7 89D1                    	MOV	CX,DX
  8071 00001DC9 31D2                    	XOR	DX,DX
  8072 00001DCB F7F1                    	DIV	CX
  8073 00001DCD 89C1                    	MOV	CX,AX			; Number of directory sectors
  8074 00001DCF 47                      	INC	DI
  8075 00001DD0 47                      	INC	DI			; Skip dpb_first_sector
  8076 00001DD1 A5                      	MOVSW			; Total number of sectors in DSKSIZ (temp as dpb_max_cluster)
  8077 00001DD2 AC                      	LODSB
  8078                                  	;mov	[es:bp+16h],al
  8079 00001DD3 26884616                	MOV	[ES:BP+DPB.MEDIA],AL	; Media byte
  8080 00001DD7 AD                      	LODSW				; Number of sectors in a FAT
  8081                                  	;;;
  8082                                  	;MSDOS 6.0
  8083                                  	;
  8084                                  	;STOSW		; DPB.FAT_SIZE	;AC000;;>32mb dpb_FAT_size
  8085                                  	;MOV	DL,BH			;AN000;;>32mb
  8086                                  	;XOR	DH,DH			;AN000;;>32mb
  8087                                  	;MUL	DX			;AC000;;>32mb Space occupied by all FATs
  8088                                  	
  8089                                  	;MSDOS 3.3
  8090                                  	;
  8091 00001DD8 AA                      	STOSB		; DPB.FAT_SIZE
  8092 00001DD9 F6E7                    	MUL	BH
  8093                                  	;;;
  8094                                  	;add	ax,[es:bp+6]
  8095 00001DDB 26034606                	ADD	AX,[ES:BP+DPB.FIRST_FAT]
  8096 00001DDF AB                      	STOSW				; dpb_dir_sector
  8097 00001DE0 01C8                    	ADD	AX,CX			; Add number of directory sectors
  8098                                  	;mov	[es:bp+0Bh],ax
  8099 00001DE2 2689460B                	MOV	[ES:BP+DPB.FIRST_SECTOR],AX
  8100                                  	
  8101                                  	; MSDOS 6.0
  8102 00001DE6 88D9                    	MOV	CL,BL			;F.C. >32mb				;AN000;
  8103                                  	;CMP	WORD [ES:BP+DSKSIZ],0	;F.C. >32mb				;AN000;
  8104                                  	;JNZ	short normal_dpb	;F.C. >32mb				;AN000;
  8105                                  	;XOR	CH,CH			;F.C. >32mb				;AN000;
  8106                                  	;MOV	BX,[SI+A_BPB.BPB_BIGTOTALSECTORS-A_BPB.BPB_SECTORSPERTRACK]	;AN000;
  8107                                  	;MOV	DX,[SI+A_BPB.BPB_BIGTOTALSECTORS-A_BPB.BPB_SECTORSPERTRACK+2]	;AN000;
  8108                                  	;SUB	BX,AX			;AN000;;F.C. >32mb
  8109                                  	;SBB	DX,0			;AN000;;F.C. >32mb
  8110                                  	;OR	CX,CX			;AN000;;F.C. >32mb
  8111                                  	;JZ	short norot		;AN000;;F.C. >32mb
  8112                                  ;rott:					;AN000;;F.C. >32mb
  8113                                  	;CLC				;AN000;;F.C. >32mb
  8114                                  	;RCR	DX,1			;AN000;;F.C. >32mb
  8115                                  	;RCR	BX,1			;AN000;;F.C. >32mb
  8116                                  	;LOOP	rott			;AN000;;F.C. >32mb
  8117                                  ;norot:					;AN000;
  8118                                  	;MOV	AX,BX			;AN000;;F.C. >32mb
  8119                                  	;JMP	short setend		;AN000;;F.C. >32mb
  8120                                  normal_dpb:
  8121                                  	;sub	ax,[es:bp+0Dh]
  8122 00001DE8 262B460D                	SUB	AX,[ES:BP+DSKSIZ]
  8123 00001DEC F7D8                    	NEG	AX			; Sectors in data area
  8124                                  ;;	MOV	CL,BL			; dpb_cluster_shift
  8125 00001DEE D3E8                    	SHR	AX,CL			; Div by sectors/cluster
  8126                                  setend:
  8127                                  
  8128                                  ;	M008 - CAS
  8129                                  ;
  8130 00001DF0 40                      	INC	AX			; +2 (reserved), -1 (count -> max)
  8131                                  ;
  8132                                  ;	There has been a bug in our fatsize calculation for so long
  8133                                  ;	  that we can't correct it now without causing some user to
  8134                                  ;	  experience data loss. There are even cases where allowing
  8135                                  ;	  the number of clusters to exceed the fats is the optimal
  8136                                  ;	  case -- where adding 2 more fat sectors would make the
  8137                                  ;	  data field smaller so that there's nothing to use the extra
  8138                                  ;	  fat sectors for.
  8139                                  ;
  8140                                  ;	Note that this bug had very minor known symptoms. CHKDSK would
  8141                                  ;	  still report that there was a cluster left when the disk was
  8142                                  ;	  actually full. Very graceful failure for a corrupt system
  8143                                  ;	  configuration. There may be worse cases that were never
  8144                                  ;	  properly traced back to this bug. The problem cases only
  8145                                  ;	  occurred when partition sizes were very near FAT sector
  8146                                  ;	  rounding boundaries, which were rare cases.
  8147                                  ;
  8148                                  ;	Also, it's possible that some third-party partition program might
  8149                                  ;	  create a partition that had a less-than-perfect FAT calculation
  8150                                  ;	  scheme. In this hypothetical case, the number of allocation
  8151                                  ;	  clusters which don't actually have FAT entries to represent
  8152                                  ;	  them might be larger and might create a more catastrophic
  8153                                  ;	  failure. So we'll provide the safeguard of limiting the
  8154                                  ;	  max_cluster to the amount that will fit in the FATs.
  8155                                  ;
  8156                                  ;	ax = maximum legal cluster, ES:BP -> dpb
  8157                                  
  8158                                  ;	make sure the number of fat sectors is actually enough to
  8159                                  ;	  hold that many clusters. otherwise, back the number of
  8160                                  ;	  clusters down
  8161                                  
  8162                                  	; 19/07/2018 - Retro DOS v3.0
  8163                                  	; MSDOS 6.0
  8164 00001DF1 89C3                    	mov	bx,ax			; remember calculated # clusters
  8165                                  	;;mov	ax,[ES:BP+0Fh]
  8166                                  	;mov	ax,[ES:BP+DPB.FAT_SIZE]
  8167                                  	; 01/08/2018 (MSDOS 3.3)
  8168 00001DF3 268A460F                	mov	al,[ES:BP+DPB.FAT_SIZE]
  8169 00001DF7 30E4                    	xor	ah,ah 	
  8170 00001DF9 26F76602                	mul	word [ES:BP+DPB.SECTOR_SIZE] ; how big is the FAT?
  8171 00001DFD 81FBF60F                	cmp	bx,4096-10		; test for 12 vs. 16 bit fat
  8172 00001E01 720D                    	jb	short setend_fat12
  8173 00001E03 D1EA                    	shr	dx,1
  8174                                  ;cs3 7/2/92
  8175 00001E05 751C                    	jnz	short setend_faterr	; some bonehead gave us more fatspace
  8176                                  ;					; than enough for the maximum FAT,
  8177                                  ;					; so go ahead and use the calculated
  8178                                  ;					; number of clusters.
  8179                                  ;cs3 7/2/92
  8180                                  
  8181 00001E07 D1D8                    	rcr	ax,1			; find number of entries
  8182 00001E09 3DF70F                  	cmp	ax,4096-10+1		; would this truncation move us
  8183                                  ;					;  into 12-bit fatland?
  8184 00001E0C 7215                    	jb	short setend_faterr	; then go ahead and let the
  8185                                  ;					;  inconsistency pass through
  8186                                  ;					;  rather than lose data by
  8187                                  ;					;  correcting the fat type
  8188 00001E0E EB0E                    	jmp	short setend_fat16
  8189                                  
  8190                                  setend_fat12:
  8191 00001E10 01C0                    	add	ax,ax			; (fatsiz*2)/3 = # of fat entries
  8192 00001E12 11D2                    	adc	dx,dx
  8193                                  ;cs3 7/2/92
  8194 00001E14 83FA03                  	cmp	dx,3			; if our fatspace is WAY more than
  8195 00001E17 730A                    	jnb	short setend_faterr	; we need, we may get an overflow
  8196                                  ;					; here.  Check for it and use
  8197                                  ;					; the calcuated size in this case.
  8198                                  ;cs3 7/2/92
  8199 00001E19 2EF736[8A1D]            	div	word [cs:word3]
  8200                                  
  8201                                  setend_fat16:
  8202 00001E1E 48                      	dec	ax			; limit at 1
  8203 00001E1F 39D8                    	cmp	ax,bx			; is fat big enough?
  8204 00001E21 7602                    	jbe	short setend_fat	; use max value that'll fit
  8205                                  
  8206                                  setend_faterr:
  8207 00001E23 89D8                    	mov	ax,bx			; use calculated value
  8208                                  
  8209                                  setend_fat:
  8210                                  
  8211                                  ;	now ax = maximum legal cluster
  8212                                  
  8213                                  ;	end M008
  8214                                  
  8215                                  	;mov	[es:bp+0Dh], ax
  8216 00001E25 2689460D                	MOV	[ES:BP+DPB.MAX_CLUSTER],AX
  8217                                  	;mov	word [es:bp+1Ch],0  ; MSDOS 3.3
  8218 00001E29 26C7461C0000            	MOV	word [ES:BP+DPB.NEXT_FREE],0 
  8219                                  					; Init so first ALLOC starts at
  8220                                  					; begining of FAT
  8221                                  	;mov	word [es:bp+1Eh],-1 ; MSDOS 3.3
  8222 00001E2F 26C7461EFFFF            	MOV	word [ES:BP+DPB.FREE_CNT],-1 ; current count is invalid.
  8223                                  
  8224 00001E35 C3                      	retn
  8225                                  
  8226                                  ;EndProc $SETDPB
  8227                                  
  8228                                  
  8229                                  ;BREAK <$Create_Process_Data_Block,SetMem -- Set up process data block>
  8230                                  
  8231                                  ;
  8232                                  ;----------------------------------------------------------------------------
  8233                                  ;
  8234                                  ;**	$Dup_PDB
  8235                                  ;
  8236                                  ; Inputs:   DX is new segment address of process
  8237                                  ;	    SI is end of new allocation block
  8238                                  ;
  8239                                  ;----------------------------------------------------------------------------
  8240                                  ;
  8241                                  
  8242                                  _$DUP_PDB:
  8243                                  
  8244                                  ;hkn;	CreatePDB would have a CS override. This is not valid.
  8245                                  ;hkn;	Must set up ds in order to access CreatePDB. Also SS is 
  8246                                  ;hkn;	has been assumed to be NOTHING. It may not have DOSDATA.
  8247                                  
  8248 00001E36 2EC606[5003]FF          	MOV	byte [CS:CreatePDB],0FFH  ; indicate a new process
  8249 00001E3C 2E8E1E[DE02]            	MOV	DS,[CS:CurrentPDB]
  8250 00001E41 56                      	PUSH	SI
  8251 00001E42 EB0A                    	JMP	SHORT CreateCopy
  8252                                  
  8253                                  ;
  8254                                  ;----------------------------------------------------------------------------
  8255                                  ;
  8256                                  ; Inputs:
  8257                                  ;	DX = Segment number of new base
  8258                                  ; Function:
  8259                                  ;	Set up program base and copy term and ^C from int area
  8260                                  ; Returns:
  8261                                  ;	None
  8262                                  ; Called at DOS init
  8263                                  ;
  8264                                  ;----------------------------------------------------------------------------
  8265                                  ;
  8266                                  
  8267                                  _$CREATE_PROCESS_DATA_BLOCK:
  8268                                  			; Offset 1D02h in IBMDOS.COM (MSDOS 3.3), 1987
  8269 00001E44 E8C4F7                  	CALL	Get_User_Stack
  8270                                  	;mov	ds,[si+14h]
  8271 00001E47 8E5C14                  	MOV	DS,[SI+user_env.user_CS]
  8272                                  	;push	word [2]
  8273 00001E4A FF360200                	PUSH	word [PDB.BLOCK_LEN]
  8274                                  CreateCopy:
  8275 00001E4E 8EC2                    	MOV	ES,DX
  8276                                  
  8277 00001E50 31F6                    	XOR	SI,SI			; copy entire PDB
  8278 00001E52 89F7                    	MOV	DI,SI
  8279 00001E54 B98000                  	MOV	CX,80H
  8280 00001E57 F3A5                    	REP	MOVSW
  8281                                  
  8282                                  ; DOS 3.3 7/9/86
  8283                                  
  8284                                  	;mov	cx,20
  8285                                  	;MOV	CX,FILPERPROC		; copy handles in case of
  8286 00001E59 B114                    	mov	cl,FILPERPROC ; 06/07/2019
  8287                                  	;mov	di,18h
  8288 00001E5B BF1800                  	MOV	DI,PDB.JFN_TABLE	; Set Handle Count has been issued
  8289 00001E5E 1E                      	PUSH	DS
  8290                                  	;lds	si,[34h]
  8291 00001E5F C5363400                	LDS	SI,[PDB.JFN_Pointer]
  8292 00001E63 F3A4                    	REP	MOVSB
  8293 00001E65 1F                      	POP	DS
  8294                                  
  8295                                  ; DOS 3.3 7/9/86
  8296                                  
  8297                                  	;test	byte [cs:CreatePDB],0FFh
  8298 00001E66 2E803E[5003]00          	cmp	byte [CS:CreatePDB],0	; Shall we create a process?
  8299 00001E6C 744A                    	JZ	short Create_PDB_cont 	; nope, old style call
  8300                                  ;
  8301                                  ; Here we set up for a new process...
  8302                                  ;
  8303                                  
  8304 00001E6E 0E                      	PUSH    CS                      ; Called at DOSINIT time, NO SS
  8305 00001E6F 1F                      	POP     DS
  8306                                  
  8307 00001E70 31DB                    	XOR	BX,BX			; dup all jfns
  8308                                  	;mov	cx,20
  8309                                  	;MOV	CX,FILPERPROC		; only 20 of them
  8310 00001E72 B114                    	mov	cl,FILPERPROC ; 06/07/2019
  8311                                  
  8312                                  Create_dup_jfn:
  8313 00001E74 06                      	PUSH	ES			; save new PDB
  8314 00001E75 E88849                  	call	SFFromHandle		; get sf pointer
  8315 00001E78 B0FF                    	MOV	AL,-1			; unassigned JFN
  8316 00001E7A 7225                    	JC	short CreateStash	; file was not really open
  8317                                  	;test	word [es:di+5],1000h
  8318 00001E7C 26F745050010            	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_no_inherit
  8319 00001E82 751D                    	JNZ	short CreateStash	; if no-inherit bit is set, skip dup.
  8320                                  ;
  8321                                  ; We do not inherit network file handles.
  8322                                  ;
  8323                                  	;mov	ah,[es:di+2]
  8324 00001E84 268A6502                	MOV	AH,[ES:DI+SF_ENTRY.sf_mode]
  8325                                  	;and	ah,0F0h
  8326 00001E88 80E4F0                  	AND	AH,SHARING_MASK
  8327                                  	;cmp	ah,70h
  8328 00001E8B 80FC70                  	CMP	AH,SHARING_NET_FCB
  8329 00001E8E 7411                    	jz	short CreateStash
  8330                                  ;
  8331                                  ; The handle we have found is duplicatable (and inheritable). Perform
  8332                                  ; duplication operation.
  8333                                  ;
  8334 00001E90 893E[3605]              	MOV	[THISSFT],DI
  8335 00001E94 8C06[3805]              	MOV	[THISSFT+2],ES
  8336 00001E98 E84018                  	call	DOS_DUP 		; signal duplication
  8337                                  ;
  8338                                  ; get the old sfn for copy
  8339                                  ;
  8340 00001E9B E84A49                  	call	pJFNFromHandle		; ES:DI is jfn
  8341 00001E9E 268A05                  	MOV	AL,[ES:DI]		; get sfn
  8342                                  ;
  8343                                  ; Take AL (old sfn or -1) and stash it into the new position
  8344                                  ;
  8345                                  CreateStash:
  8346 00001EA1 07                      	POP	ES
  8347                                  	;mov	[es:bx+18h],al
  8348 00001EA2 26884718                	MOV	[ES:BX+PDB.JFN_TABLE],AL ; copy into new place!
  8349 00001EA6 43                      	INC	BX			; next jfn...
  8350 00001EA7 E2CB                    	LOOP	Create_dup_jfn
  8351                                  
  8352 00001EA9 8B1E[DE02]              	MOV	BX,[CurrentPDB]		; get current process
  8353                                  	;mov	[es:bx+16h]
  8354 00001EAD 26891E1600              	MOV	[ES:PDB.PARENT_PID],BX	; stash in child
  8355 00001EB2 8C06[DE02]              	MOV	[CurrentPDB],ES
  8356 00001EB6 8EDB                    	MOV	DS,BX
  8357                                  ;
  8358                                  ; end of new process create
  8359                                  ;
  8360                                  Create_PDB_cont:
  8361 00001EB8 2EC606[5003]00          	MOV     BYTE [CS:CreatePDB],0	; reset flag
  8362 00001EBE 58                      	POP	AX
  8363                                  
  8364                                  	;entry	SETMEM
  8365                                  
  8366                                  ;---------------------------------------------------------------------------
  8367                                  ; Inputs:
  8368                                  ;	AX = Size of memory in paragraphs
  8369                                  ;	DX = Segment
  8370                                  ; Function:
  8371                                  ;	Completely prepares a program base at the
  8372                                  ;	specified segment.
  8373                                  ; Called at DOS init
  8374                                  ; Outputs:
  8375                                  ;	DS = DX
  8376                                  ;	ES = DX
  8377                                  ;	[0] has INT int_abort
  8378                                  ;	[2] = First unavailable segment
  8379                                  ;	[5] to [9] form a long call to the entry point
  8380                                  ;	[10] to [13] have exit address (from int_terminate)
  8381                                  ;	[14] to [17] have ctrl-C exit address (from int_ctrl_c)
  8382                                  ;	[18] to [21] have fatal error address (from int_fatal_abort)
  8383                                  ; DX,BP unchanged. All other registers destroyed.
  8384                                  ;---------------------------------------------------------------------------
  8385                                  
  8386                                  SETMEM:
  8387 00001EBF 31C9                    	XOR	CX,CX
  8388 00001EC1 8ED9                    	MOV	DS,CX
  8389 00001EC3 8EC2                    	MOV	ES,DX
  8390                                  	;mov	si,88h
  8391 00001EC5 BE8800                  	MOV	SI,addr_int_terminate
  8392                                  	;mov	di,10
  8393 00001EC8 BF0A00                  	MOV	DI,SAVEXIT
  8394                                  	;MOV	CX,6
  8395 00001ECB B106                    	mov	cl,6 ; 06/07/2019
  8396 00001ECD F3A5                    	REP	MOVSW
  8397 00001ECF 26A30200                	MOV	[ES:2],AX
  8398 00001ED3 29D0                    	SUB	AX,DX
  8399 00001ED5 3DFF0F                  	CMP	AX,MAXDIF ; 0FFFh
  8400 00001ED8 7603                    	JBE	short HAVDIF
  8401 00001EDA B8FF0F                  	MOV	AX,MAXDIF
  8402                                  HAVDIF:
  8403 00001EDD 83E810                  	SUB	AX,10H			; Allow for 100h byte "stack"
  8404 00001EE0 BB0C00                  	MOV	BX,ENTRYPOINTSEG	;	in .COM files
  8405 00001EE3 29C3                    	SUB	BX,AX
  8406 00001EE5 B104                    	MOV	CL,4
  8407 00001EE7 D3E0                    	SHL	AX,CL
  8408 00001EE9 8EDA                    	MOV	DS,DX
  8409                                  
  8410                                  	; (MSDOS 6.0 note)
  8411                                  	;
  8412                                  	; The address in BX:AX will be F01D:FEF0 if there is 64K or more 
  8413                                  	; memory in the system. This is equivalent to 0:c0 if A20 is OFF.
  8414                                  	; If DOS is in HMA this equivalence is no longer valid as A20 is ON.
  8415                                  	; But the BIOS which now resides in FFFF:30 has 5 bytes in FFFF:D0
  8416                                  	; (F01D:FEF0) which is the same as the ones in 0:C0, thereby 
  8417                                  	; making this equvalnce valid for this particular case. If however
  8418                                  	; there is less than 64K remaining the address in BX:AX will not 
  8419                                  	; be the same as above. We will then stuff 0:c0, the call 5 address
  8420                                  	; into the PSP.
  8421                                  	;
  8422                                  	; Therefore for the case where there is less than 64K remaining in 
  8423                                  	; the system old CPM Apps that look at PSP:6 to determine memory
  8424                                  	; requirements will not work. Call 5, however will continue to work
  8425                                  	; for all cases.
  8426                                  	;
  8427                                  
  8428                                  	;mov	[6],ax
  8429                                  	;mov	[8],bx
  8430                                  
  8431 00001EEB A30600                  	MOV	[PDB.CPM_CALL+1],AX
  8432 00001EEE 891E0800                	MOV	[PDB.CPM_CALL+3],BX
  8433                                  
  8434                                  	;cmp	ax,WRAPOFFSET		; Q: does the system have >= 64k of
  8435                                  	;				;    memory left
  8436                                  	;je	short addr_ok		; Y: the above calculated address is
  8437                                  	;				;    OK
  8438                                  	;				; N: 
  8439                                  
  8440                                  	;MOV	WORD [PDB.CPM_CALL+1],0c0h
  8441                                  	;MOV	WORD [PDB.CPM_CALL+3],0
  8442                                  
  8443                                  ;addr_ok:
  8444                                  
  8445                                  	;mov	word [0],20CDh
  8446 00001EF2 C7060000CD20            	MOV	word [PDB.EXIT_CALL],(int_abort*256) + mi_INT
  8447                                  	;mov	byte [5],9Ah
  8448 00001EF8 C60605009A              	MOV	BYTE [PDB.CPM_CALL],mi_Long_CALL
  8449                                  	;mov	word [50h],21CDh
  8450 00001EFD C7065000CD21            	MOV	WORD [PDB.CALL_SYSTEM],(int_command*256) + mi_INT
  8451                                  	;mov	byte [52h],0CBh
  8452 00001F03 C6065200CB              	MOV	BYTE [PDB.CALL_SYSTEM+2],mi_Long_RET
  8453                                  	;mov	word [34h],18h
  8454 00001F08 C70634001800            	MOV	WORD [PDB.JFN_Pointer],PDB.JFN_TABLE
  8455                                  	;mov	word [36h],ds
  8456 00001F0E 8C1E3600                	MOV	WORD [PDB.JFN_Pointer+2],DS
  8457                                  	;mov	word [32h],20
  8458 00001F12 C70632001400            	MOV	WORD [PDB.JFN_Length],FILPERPROC
  8459                                  ;
  8460                                  ; The server runs several PDB's without creating them VIA EXEC.  We need to
  8461                                  ; enumerate all PDB's at CPS time in order to find all references to a
  8462                                  ; particular SFT.  We perform this by requiring that the server link together
  8463                                  ; for us all sub-PDB's that he creates.  The requirement for us, now, is to
  8464                                  ; initialize this pointer.
  8465                                  ;
  8466                                   	;mov	word [38h],-1
  8467 00001F18 C7063800FFFF            	MOV	word [PDB.Next_PDB],-1
  8468                                  	;mov	word [3Ah],-1
  8469 00001F1E C7063A00FFFF            	MOV	word [PDB.Next_PDB+2],-1
  8470                                  
  8471                                  			; Set the real version number in the PSP - 5.00
  8472                                  	;mov	[ES:PDB.Version],(MINOR_VERSION*256)+MAJOR_VERSION
  8473                                  
  8474 00001F24 C3                      	retn
  8475                                  
  8476                                  ;============================================================================
  8477                                  ; IBMDOS.COM (MSDOS 3.3 KERNEL), 1987 - Offset 1DE6h
  8478                                  ;============================================================================
  8479                                  ; 19/07/2018 - Retro DOS v3.0
  8480                                  
  8481                                  FETCHI_CHECK:
  8482 00001F25 9C                      	pushf
  8483 00001F26 2E813E[8F0F]7258        	cmp	word [cs:FETCHI_TAG], 5872h
  8484 00001F2D 7403                    	jz      short FETCHI_CHK_RETN
  8485 00001F2F E84F54                  	call    DOSINIT
  8486                                  FETCHI_CHK_RETN:
  8487 00001F32 9D                      	popf
  8488 00001F33 C3                      	retn
  8489                                  
  8490                                  ;============================================================================
  8491                                  ; MISC2.ASM, MSDOS 6.0, 1991
  8492                                  ;============================================================================
  8493                                  ; 20/07/2018 - Retro DOS v3.0
  8494                                  
  8495                                  ; Break <STRCMP - compare two ASCIZ strings DS:SI to ES:DI>
  8496                                  ;----------------------------------------------------------------------------
  8497                                  ;
  8498                                  ;   Strcmp - compare ASCIZ DS:SI to ES:DI. Case INSENSITIVE. '/' = '\'
  8499                                  ;		Strings of different lengths don't match.
  8500                                  ;   Inputs:	DS:SI - pointer to source string  ES:DI - pointer to dest string
  8501                                  ;   Outputs:	Z if strings same, NZ if different
  8502                                  ;   Registers modified: NONE
  8503                                  ;----------------------------------------------------------------------------
  8504                                  
  8505                                  StrCmp:
  8506 00001F34 56                      	push	si
  8507 00001F35 57                      	push	di
  8508 00001F36 50                      	push	ax
  8509                                  
  8510                                  Cmplp:
  8511 00001F37 AC                      	LODSB
  8512 00001F38 E8D536                  	call	UCase			; convert to upper case
  8513 00001F3B E80E37                  	call	PATHCHRCMP		; convert / to 	MOV	AH,AL
  8515 00001F3E 268A05                  	MOV	AL,[ES:DI]
  8516 00001F41 47                      	INC	DI
  8517 00001F42 E8CB36                  	call	UCase			; convert to upper case
  8518 00001F45 E80437                  	call	PATHCHRCMP		; convert / to 	CMP	AH,AL
  8520 00001F48 7504                    	JNZ	short PopRet		; Strings dif
  8521                                  Tend:
  8522 00001F4A 08C0                    	OR	AL,AL
  8523 00001F4C 75E9                    	JNZ	short Cmplp		; More string
  8524                                  PopRet:
  8525 00001F4E 58                      	pop	ax
  8526 00001F4F 5F                      	pop	di
  8527 00001F50 5E                      	pop	si
  8528 00001F51 C3                      	retn
  8529                                  
  8530                                  ;Break <STRCPY - copy ASCIZ string from DS:SI to ES:DI>
  8531                                  ;----------------------------------------------------------------------------
  8532                                  ;
  8533                                  ;   Strcpy - copy an ASCIZ string from DS:SI to ES:DI and make uppercase
  8534                                  ;   FStrcpy - copy an ASCIZ string from DS:SI to ES:DI.  no modification of
  8535                                  ;	characters.
  8536                                  ;
  8537                                  ;   Inputs:	DS:SI - pointer to source string
  8538                                  ;		ES:DI - pointer to destination string
  8539                                  ;   Outputs:	ES:DI point byte after nul byte at end of dest string
  8540                                  ;		DS:SI point byte after nul byte at end of source string
  8541                                  ;   Registers modified: SI,DI
  8542                                  ;----------------------------------------------------------------------------
  8543                                  
  8544                                  StrCpy:
  8545 00001F52 50                      	push	ax
  8546                                  CPYLoop:
  8547 00001F53 AC                      	LODSB
  8548 00001F54 E8B936                  	call	UCase			; convert to upper case
  8549 00001F57 E8F236                  	call	PATHCHRCMP		; convert / to \ ;
  8550 00001F5A AA                      	STOSB
  8551                                  Tend2:
  8552 00001F5B 08C0                    	OR	AL,AL
  8553 00001F5D 75F4                    	JNZ	short CPYLoop
  8554 00001F5F 58                      	pop	ax
  8555 00001F60 C3                      	retn
  8556                                  
  8557                                  ;----------------------------------------------------------------------------
  8558                                  ; Procedure Name : FStrCpy
  8559                                  ;----------------------------------------------------------------------------
  8560                                  
  8561                                  FStrCpy:
  8562 00001F61 50                      	push	ax
  8563                                  FCPYLoop:
  8564 00001F62 AC                      	LODSB
  8565 00001F63 AA                      	STOSB
  8566 00001F64 08C0                    	OR	AL,AL
  8567 00001F66 75FA                    	JNZ	short FCPYLoop
  8568 00001F68 58                      	pop	ax
  8569 00001F69 C3                      	retn
  8570                                  
  8571                                  ; 20/07/2018 - Retro DOS v3.0
  8572                                  ;----------------------------------------------------------------------------
  8573                                  ; UCase, IBMDOS.COM (MSDOS 3.3), 1987 - Offset 1E2Fh
  8574                                  ;----------------------------------------------------------------------------
  8575                                  ;
  8576                                  ;UCase:	
  8577                                  ;	call	_UCase	 ; Offset 5518h (GetLet, Offset 5517h)
  8578                                  ;	retn
  8579                                  
  8580                                  ;Break <StrLen - compute length of string ES:DI>
  8581                                  ;----------------------------------------------------------------------------
  8582                                  ;**	StrLen - Compute Length of String
  8583                                  ;
  8584                                  ;	StrLen computes the length of a string, including the trailing 00
  8585                                  ;
  8586                                  ;	ENTRY	(es:di) = address of string
  8587                                  ;	EXIT	(cx) = size of string
  8588                                  ;	USES	cx, flags
  8589                                  ;----------------------------------------------------------------------------
  8590                                  
  8591                                  StrLen:
  8592 00001F6A 57                      	push	di
  8593 00001F6B 50                      	push	ax
  8594                                  	;MOV	CX,-1
  8595 00001F6C B9FFFF                  	mov	cx,65535
  8596 00001F6F 30C0                    	XOR	AL,AL
  8597 00001F71 F2AE                    	REPNE	SCASB
  8598 00001F73 F7D1                    	NOT	CX
  8599 00001F75 58                      	pop	ax
  8600 00001F76 5F                      	pop	di
  8601 00001F77 C3                      	retn
  8602                                  
  8603                                  ;----------------------------------------------------------------------------
  8604                                  ;**	DStrLen - Compute Length of String
  8605                                  ;
  8606                                  ;	ENTRY	(ds:si) = address of string
  8607                                  ;	EXIT	(cx) = size of string, including trailing NUL
  8608                                  ;	USES	cx, flags
  8609                                  ;----------------------------------------------------------------------------
  8610                                  
  8611                                  DStrLen:	; BUGBUG - this guy is a pig, who uses him?
  8612 00001F78 E80700                  	CALL	XCHGP
  8613 00001F7B E8ECFF                  	CALL	StrLen
  8614 00001F7E E80100                  	CALL	XCHGP
  8615 00001F81 C3                      	retn
  8616                                  
  8617                                  ;----------------------------------------------------------------------------
  8618                                  ;**	XCHGP - Exchange Source and Destination Pointers
  8619                                  ;
  8620                                  ;	XCHGP exchanges (DS:SI) and (ES:DI)
  8621                                  ;
  8622                                  ;	ENTRY	none
  8623                                  ;	EXIT	pairs exchanged
  8624                                  ;	USES	SI, DI, DS, ES
  8625                                  ;----------------------------------------------------------------------------
  8626                                  
  8627                                  XCHGP:
  8628 00001F82 1E                      	push	ds
  8629 00001F83 06                      	push	es
  8630 00001F84 1F                      	pop	ds
  8631 00001F85 07                      	pop	es
  8632 00001F86 87F7                    	XCHG	SI,DI
  8633                                  xchgp_retn:
  8634 00001F88 C3                      	retn
  8635                                  
  8636                                  ;Break	<Idle - wait for a specified amount of time>
  8637                                  ;----------------------------------------------------------------------------
  8638                                  ;
  8639                                  ;   Idle - when retrying an operation due to a lock/sharing violation,
  8640                                  ;   	   we spin until RetryLoop is exhausted.
  8641                                  ;
  8642                                  ;   Inputs:	RetryLoop is the number of times we spin
  8643                                  ;   Outputs:	Wait
  8644                                  ;   Registers modified: none
  8645                                  ;----------------------------------------------------------------------------
  8646                                  
  8647                                  Idle:
  8648                                  	;test	byte [SS:FSHARING],0FFh
  8649 00001F89 36803E[0D05]00          	cmp	byte [SS:FSHARING],0	;hkn; SS override
  8650                                  	;retnz
  8651 00001F8F 75F7                    	jnz	short xchgp_retn
  8652                                  	;SAVE	<CX>
  8653 00001F91 51                      	push	cx
  8654 00001F92 368B0E[1C00]            	MOV	CX,[ss:RetryLoop]	;hkn; SS override
  8655 00001F97 E308                    	JCXZ	Idle3
  8656                                  Idle1:	
  8657 00001F99 51                      	PUSH	CX
  8658 00001F9A 31C9                    	XOR	CX,CX
  8659                                  Idle2:	
  8660 00001F9C E2FE                    	LOOP	Idle2
  8661 00001F9E 59                      	POP	CX
  8662 00001F9F E2F8                    	LOOP	Idle1
  8663                                  Idle3:	
  8664                                  	;RESTORE <CX>
  8665 00001FA1 59                      	pop	cx
  8666 00001FA2 C3                      	retn
  8667                                  
  8668                                  ;Break	<TableDispatch - dispatch to a table>
  8669                                  ;----------------------------------------------------------------------------
  8670                                  ;
  8671                                  ;   TableDispatch - given a table and an index, jmp to the approptiate
  8672                                  ;   routine.  Preserve all input registers to the routine.
  8673                                  ;
  8674                                  ;   Inputs:	Push	return address
  8675                                  ;		Push	Table address
  8676                                  ;		Push	index (byte)
  8677                                  ;   Outputs:	appropriate routine gets jumped to.
  8678                                  ;		return indicates invalid index
  8679                                  ;   Registers modified: none.
  8680                                  ;----------------------------------------------------------------------------
  8681                                  
  8682                                  struc TFrame	 ; TableFrame
  8683 00000000 ????                    .OldBP:	 resw 1  ; 0
  8684 00000002 ????                    .OldRet: resw 1  ; 2
  8685 00000004 ??                      .Index:	 resb 1  ; 4
  8686 00000005 ??                      .Pad:	 resb 1  ; 5  
  8687 00000006 ????                    .Tab:	 resw 1  ; 6
  8688 00000008 ????                    .NewRet: resw 1  ; 8
  8689                                  endstruc
  8690                                  
  8691                                  TableDispatch:
  8692 00001FA3 55                      	PUSH	BP
  8693 00001FA4 89E5                    	MOV	BP,SP
  8694 00001FA6 53                      	PUSH	BX			; save BX
  8695                                  	;mov	bx,[bp+6]
  8696 00001FA7 8B5E06                  	MOV	BX,[BP+TFrame.Tab]	; get pointer to table
  8697 00001FAA 2E8A1F                  	MOV	BL,[CS:BX]		; maximum index
  8698                                  	;cmp	[bp+4],bl
  8699 00001FAD 385E04                  	CMP	[BP+TFrame.Index],BL	; table error?
  8700 00001FB0 7317                    	JAE	short TableError	; yes
  8701                                  	;mov	bl,[bp+4]
  8702 00001FB2 8A5E04                  	MOV	BL,[BP+TFrame.Index]	; get desired table index
  8703 00001FB5 30FF                    	XOR	BH,BH			; convert to word
  8704 00001FB7 D1E3                    	SHL	BX,1			; convert to word pointer
  8705 00001FB9 43                      	INC	BX			; point past first length byte
  8706                                  	; 17/08/2018
  8707                                  	;add	bx,[bp+6]
  8708 00001FBA 035E06                  	ADD	BX,[BP+TFrame.Tab]	; get real offset
  8709 00001FBD 2E8B1F                  	MOV	BX,[CS:BX]		; get contents of table entry
  8710                                  	;mov	[bp+6],bx
  8711 00001FC0 895E06                  	MOV	[BP+TFrame.Tab],BX	; put table entry into return address
  8712 00001FC3 5B                      	POP	BX			; restore BX
  8713 00001FC4 5D                      	POP	BP			; restore BP
  8714 00001FC5 83C404                  	ADD	SP,4			; clean off Index and our return addr
  8715 00001FC8 C3                      	retn				; do operation
  8716                                  TableError:
  8717 00001FC9 5B                      	POP	BX			; restore BX
  8718 00001FCA 5D                      	POP	BP			; restore BP
  8719 00001FCB C20600                  	RETN	6			; clean off Index, Table and RetAddr
  8720                                  
  8721                                  
  8722                                  ;Break	<TestNet - determine if a CDS is for the network>
  8723                                  ;----------------------------------------------------------------------------
  8724                                  ;
  8725                                  ;   TestNet - examine CDS pointed to by ThisCDS and see if it indicates a
  8726                                  ;	network CDS.  This will handle NULL cds also.
  8727                                  ;
  8728                                  ;   Inputs:	ThisCDS points to CDS or NULL
  8729                                  ;   Outputs:	ES:DI = ThisCDS
  8730                                  ;		carry Set => network
  8731                                  ;		carry Clear => local
  8732                                  ;   Registers modified: none.
  8733                                  ;----------------------------------------------------------------------------
  8734                                  
  8735                                  TestNet:
  8736 00001FCE 2EC43E[3A05]            	LES	DI,[CS:THISCDS]
  8737 00001FD3 83FFFF                  	CMP	DI,-1
  8738 00001FD6 7409                    	JZ	short CMCRet		; UNC? carry is clear
  8739                                  	;test	word [es:di+43h],8000h
  8740 00001FD8 26F745430080            	TEST	word [ES:DI+curdir.flags],curdir_isnet
  8741 00001FDE 7501                    	JNZ	short CMCRet		; jump has carry clear
  8742 00001FE0 C3                      	retn				; carry is clear
  8743                                  CMCRet: 
  8744 00001FE1 F5                      	CMC
  8745 00001FE2 C3                      	retn
  8746                                  
  8747                                  ;Break	<IsSFTNet - see if an sft is for the network>
  8748                                  ;----------------------------------------------------------------------------
  8749                                  ;
  8750                                  ;   IsSFTNet - examine SF pointed to by ES:DI and see if it indicates a
  8751                                  ;	network file.
  8752                                  ;
  8753                                  ;   Inputs:	ES:DI point to SFT
  8754                                  ;   Outputs:	Zero set if not network sft
  8755                                  ;		zero reset otherwise
  8756                                  ;		Carry CLEAR!!!
  8757                                  ;   Registers modified: none.
  8758                                  ;----------------------------------------------------------------------------
  8759                                  
  8760                                  IsSFTNet:
  8761                                  	;test	word [es:di+5],8000h
  8762 00001FE3 26F745050080            	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
  8763 00001FE9 C3                      	retn
  8764                                  
  8765                                  ;Break	<FastInit - Initialize FastTable entries >
  8766                                  ;----------------------------------------------------------------------------
  8767                                  ;   DOS 4.00   2/9/87
  8768                                  ;   FastInit  - initialize the FASTXXX routine entry
  8769                                  ;		  in the FastTable
  8770                                  ;
  8771                                  ;   Inputs:	BX = FASTXXX ID ( 1=fastopen )
  8772                                  ;		DS:SI = address of FASTXXX routine entry
  8773                                  ;		   SI = -1 for query only
  8774                                  ;   Outputs:	Carry flag clear, if success
  8775                                  ;		Carry flag set,   if failure
  8776                                  ;
  8777                                  ;
  8778                                  ;----------------------------------------------------------------------------
  8779                                  
  8780                                  ;Procedure FastInit,NEAR
  8781                                  ;	ASSUME	CS:DOSCODE,SS:NOTHING
  8782                                  ;FastInit:
  8783                                  	; MSDOS 6.0
  8784                                  	;hkn; set up es to dosdataseg.
  8785                                  	;push	es
  8786                                  	;getdseg <es>			; es -> dosdata
  8787                                  
  8788                                  	;hkn; FastTable is in DOSDATA
  8789                                  	;MOV	DI,OFFSET DOSDATA:FastTable + 2 ;AN000;FO. points to fastxxx entry
  8790                                  	;DEC	BX				;AN000;FO.;; decrement index
  8791                                  	;MOV	DX,BX				;AN000;FO.;; save bx
  8792                                  	;SHL	BX,1				;AN000;FO.;; times 4 , each entry is DWORD
  8793                                  	;SHL	BX,1				;AN000;FO.
  8794                                  	;ADD	DI,BX				;AN000;FO. index to the entry
  8795                                  	;MOV	AX,WORD PTR ES:[DI+2]		;AN000;FO. get entry segment
  8796                                  ;fcheck: 					;AN000;
  8797                                  	;MOV	CX,CS				;AN000;FO.;; get DOS segment
  8798                                  	;CMP	AX,CX				;AN000;FO.;; first time installed ?
  8799                                  	;JZ	short ok_install			;AN000;FO.;; yes
  8800                                  	;OR	AX,AX				;AN000;FO.;
  8801                                  	;JZ	short ok_install		;AN000;FO.;
  8802                                  	;STC					;AN000;FO.;; already installed !
  8803                                  	;JMP	SHORT FSret			;AN000;FO. set carry
  8804                                  ;ok_install:					;AN000;
  8805                                  	;CMP	SI,-1				;AN000;FO.; Query only ?
  8806                                  	;JZ	short FSret			;AN000;FO.; yes
  8807                                  	;MOV	CX,DS				;AN000;FO.; get FASTXXX entry segment
  8808                                  	;MOV	WORD PTR ES:[DI+2],CX		;AN000;FO.; initialize routine entry
  8809                                  	;MOV	WORD PTR ES:[DI],SI		;AN000;FO.; initialize routine offset
  8810                                  
  8811                                  ;hkn; FastFlg moved to DOSDATA
  8812                                  	;MOV	DI,OFFSET DOSDATA:FastFlg	;AN000;FO.; get addr of FASTXXX flags
  8813                                  	;ADD	DI,DX				;AN000;FO.; index to a FASTXXX flag
  8814                                  	;OR	byte ptr ES:[DI],Fast_yes	;AN000;FO.; indicate installed
  8815                                  FSret:						;AN000;
  8816                                  	;pop	es
  8817                                  	;return					;AN000;FO.
  8818                                  ;EndProc FastInit				;AN000;FO.
  8819                                  
  8820                                  	; MSDOS 3.3
  8821                                  	; IBMDOS.COM (1987) - Offset 1EB3h
  8822                                  FastInit:
  8823 00001FEA BF[430F]                	mov	di,FastTable ; FastOpenTable
  8824 00001FED 2E8B4504                	mov	ax,[cs:di+4]		; Entry segment
  8825 00001FF1 8CCB                    	mov	bx,cs			; get DOS segment
  8826 00001FF3 39D8                    	cmp	ax,bx			; first time installed ?	
  8827 00001FF5 7402                    	je	short ok_install	; yes
  8828 00001FF7 F9                      	stc				; set carry
  8829 00001FF8 C3                      	retn				; (cf=1 means) already installed !
  8830                                  
  8831                                  ok_install:
  8832 00001FF9 BB[430F]                	mov	bx,FastTable ; FastOpenTable
  8833 00001FFC 8CD9                    	mov	cx,ds
  8834                                  	; set address of FASTXXX (FASTOPEN) routine entry
  8835 00001FFE 2E894F04                	mov	[cs:bx+4],cx
  8836 00002002 2E897702                	mov	[cs:bx+2],si
  8837 00002006 C3                      	retn
  8838                                  
  8839                                  ;Break	<FastRet - initial routine in FastOpenTable >
  8840                                  ;----------------------------------------------------------------------------
  8841                                  ;   DOS 3.3   6/10/86
  8842                                  ;   FastRet	- indicate FASTXXXX  not in memory
  8843                                  ;
  8844                                  ;   Inputs:	None
  8845                                  ;   Outputs:	AX = -1 and carry flag set
  8846                                  ;
  8847                                  ;   Registers modified: none.
  8848                                  ;----------------------------------------------------------------------------
  8849                                  
  8850                                  FastRet:
  8851                                  	;mov	ax,-1
  8852                                  	;stc
  8853                                  	;retf
  8854 00002007 F9                      	STC
  8855 00002008 19C0                    	sbb	ax,ax		; (ax) = -1, 'C' set
  8856 0000200A CB                      	RETF
  8857                                  
  8858                                  ;Break	<NLS_OPEN - do $open for NLSFUNC>
  8859                                  ;----------------------------------------------------------------------------
  8860                                  ;   DOS 3.3   6/10/86
  8861                                  ;   NLS_OPEN	- call $OPEN for NLSFUNC
  8862                                  ;
  8863                                  ;   Inputs:	Same input as $OPEN except CL = mode
  8864                                  ;   Outputs:	same output as $OPEN
  8865                                  ;
  8866                                  ;----------------------------------------------------------------------------
  8867                                  
  8868                                  ;hkn; NOTE! SS MUST HAVE BEEN SET UP TO DOSDATA BY THE TIME THESE
  8869                                  ;hkn; NLS FUNCTIONS ARE CALLED!!! THERE FORE WE WILL USE SS OVERRIDES
  8870                                  ;hkn; IN ORDER TO ACCESS DOS DATA VARIABLES!
  8871                                  
  8872                                  NLS_OPEN:
  8873                                  ;	MOV	BL,[CPSWFLAG]	 ; disable code page matching logic
  8874                                  ;	MOV	BYTE [CPSWFLAG],0
  8875                                  ;	PUSH	BX		 ; save current state
  8876                                  
  8877 0000200B 88C8                    	MOV	AL,CL		 ; set up correct interface for $OPEN
  8878 0000200D E82A50                  	call	_$OPEN
  8879                                  
  8880                                   ;	POP	BX		 ; restore current state
  8881                                   ;	MOV	[CPSWFLAG],BL
  8882 00002010 C3                      	RETN
  8883                                  
  8884                                  ;Break	<NLS_LSEEK - do $LSEEK for NLSFUNC>
  8885                                  ;----------------------------------------------------------------------------
  8886                                  ;   DOS 3.3   6/10/86
  8887                                  ;   NLS_LSEEK	- call $LSEEK for NLSFUNC
  8888                                  ;
  8889                                  ;   Inputs:	BP = open mode
  8890                                  ;   Outputs:	same output as $LSEEK
  8891                                  ;
  8892                                  ;----------------------------------------------------------------------------
  8893                                  
  8894                                  NLS_LSEEK:
  8895                                  	;PUSH	word [SS:USER_SP] ; save user stack
  8896                                  	;PUSH	word [SS:USER_SS]
  8897 00002011 2EFF36[1E05]            	PUSH	word [CS:USER_SP] ; save user stack
  8898 00002016 2EFF36[2005]            	PUSH	word [CS:USER_SS]
  8899 0000201B E81000                  	CALL	Fake_User_Stack
  8900 0000201E 89E8                    	MOV	AX,BP		; set up correct interface for $LSEEK
  8901 00002020 E8164F                  	call	_$LSEEK
  8902                                  	;POP	word [SS:USER_SS] ; restore user stack
  8903                                  	;POP	word [SS:USER_SP]
  8904 00002023 2E8F06[2005]            	POP	word [cs:USER_SS] ; restore user stack
  8905 00002028 2E8F06[1E05]            	POP	word [cs:USER_SP]
  8906 0000202D C3                      	RETN
  8907                                  
  8908                                  ;Break	<Fake_User_Stack - save user stack>
  8909                                  ;----------------------------------------------------------------------------
  8910                                  ;   DOS 3.3   6/10/86
  8911                                  ;   Fake_User_Stack - save user stack pointer
  8912                                  ;
  8913                                  ;----------------------------------------------------------------------------
  8914                                  
  8915                                  Fake_User_Stack:
  8916                                  	;MOV	AX,[ss:USER_SP_2F] ; replace with INT 2F stack
  8917 0000202E 2EA1[710F]              	MOV	AX,[cs:USER_SP_2F]
  8918                                  	;MOV	[SS:USER_SP],AX
  8919 00002032 2EA3[1E05]              	MOV	[CS:USER_SP],AX
  8920 00002036 8CC8                    	MOV	AX,CS
  8921                                  	;mov	ax,ss
  8922                                  	;MOV	[SS:USER_SS],AX
  8923 00002038 2EA3[2005]              	MOV	[CS:USER_SS],AX
  8924 0000203C C3                      	RETN
  8925                                  
  8926                                  ;Break	<GetDevList - get device header list pointer>
  8927                                  ;----------------------------------------------------------------------------
  8928                                  ;   DOS 3.3   7/25/86
  8929                                  ;   GetDevList - get device header list pointer
  8930                                  ;
  8931                                  ;   Output: AX:BX points to the device header list
  8932                                  ;----------------------------------------------------------------------------
  8933                                  
  8934                                  GetDevList:
  8935 0000203D BE[3B0F]                	MOV	SI,SysInitTable
  8936                                  	;LDS	SI,[CS:SI+SYSINITVARS]
  8937 00002040 2EC534                  	LDS	SI,[CS:SI]
  8938                                  	;mov	ax,[si+34]  ; SSYSINITVARS offset 34 = [SI+SYSI.DEV]
  8939                                  	;mov	bx,[si+36]  ; SSYSINITVARS offset 36 = [SI+SYSI.DEV+2]
  8940 00002043 8B4422                  	MOV	AX,[SI+SYSI.DEV]
  8941 00002046 8B5C24                  	MOV	BX,[SI+SYSI.DEV+2]
  8942 00002049 C3                      	RETN
  8943                                  
  8944                                  ;Break	<NLS_IOCTL - do $IOCTL for NLSFUNC   >
  8945                                  ;----------------------------------------------------------------------------
  8946                                  ;   DOS 3.3   7/25/86
  8947                                  ;   NLS_IOCTL	- call $IOCTL for NLSFUNC
  8948                                  ;
  8949                                  ;   Inputs:	BP = function code 0CH
  8950                                  ;   Outputs:	same output as generic $IOCTL
  8951                                  ;
  8952                                  ;----------------------------------------------------------------------------
  8953                                  
  8954                                  NLS_IOCTL:
  8955                                  	;PUSH	word [SS:USER_SP] ; save user stack
  8956                                  	;PUSH	word [SS:USER_SS]
  8957 0000204A 2EFF36[1E05]            	PUSH	word [CS:USER_SP] ; save user stack
  8958 0000204F 2EFF36[2005]            	PUSH	word [CS:USER_SS]
  8959 00002054 E8D7FF                  	CALL	Fake_User_Stack
  8960 00002057 89E8                    	MOV	AX,BP	     ; set up correct interface for $LSEEK
  8961 00002059 E85C0F                  	call	_$IOCTL
  8962                                  	;POP	word [SS:USER_SS] ; restore user stack
  8963                                  	;POP	word [SS:USER_SP]
  8964 0000205C 2E8F06[2005]            	POP	word [CS:USER_SS] ; restore user stack
  8965 00002061 2E8F06[1E05]            	POP	word [CS:USER_SP]
  8966 00002066 C3                      	RETN
  8967                                  
  8968                                  ;Break	<NLS_GETEXT- get extended error for NLSFUNC>
  8969                                  ;----------------------------------------------------------------------------
  8970                                  ;   DOS 3.3   7/25/86
  8971                                  ;   NLS_GETEXT	-
  8972                                  ;
  8973                                  ;   Inputs:	none
  8974                                  ;   Outputs:	AX = extended error
  8975                                  ;
  8976                                  ;----------------------------------------------------------------------------
  8977                                  
  8978                                  NLS_GETEXT:
  8979                                  	;MOV	AX,[SS:EXTERR]	 ; return extended error
  8980 00002067 2EA1[D202]              	mov	AX,[CS:EXTERR]
  8981 0000206B C3                      	RETN
  8982                                  
  8983                                  ;============================================================================
  8984                                  ; EcritDisk, LcritDisk, EcritDevice, LCritDevice
  8985                                  ; IBMDOS.COM (MSDOS 3.3), 1987 - Offset 1F36h
  8986                                  ;============================================================================
  8987                                  ; 20/07/2018 - Retro DOS v3.0
  8988                                  
  8989                                  	; MSDOS 3.3
  8990                                  	; 08/08/2018 - Retro DSOS v3.0
  8991                                  EcritMem:
  8992                                  EcritSFT:
  8993                                  	;
  8994                                  EcritDisk:
  8995                                  	;push	ax
  8996 0000206C C3                      	retn
  8997                                  	
  8998 0000206D B80180                  	mov	ax,8001h
  8999 00002070 CD2A                    	int	2Ah	; Microsoft Networks - BEGIN DOS CRITICAL SECTION
  9000                                  			; AL = critical section number (00h-0Fh)
  9001 00002072 58                      	pop	ax
  9002 00002073 C3                      	retn
  9003                                  
  9004                                  	; MSDOS 3.3
  9005                                  	; 08/08/2018 - Retro DSOS v3.0
  9006                                  LcritMem:
  9007                                  LcritSFT:
  9008                                  	;
  9009                                  LcritDisk:
  9010                                  	;push	ax
  9011 00002074 C3                      	retn
  9012                                  	
  9013 00002075 B80181                  	mov	ax,8101h
  9014 00002078 CD2A                    	int	2Ah	; Microsoft Networks - END DOS CRITICAL SECTION
  9015                                  			; AL = critical section number (00h-0Fh)
  9016 0000207A 58                      	pop	ax
  9017 0000207B C3                      	retn
  9018                                  
  9019                                  EcritDevice:
  9020                                  	;push	ax
  9021 0000207C C3                      	retn
  9022                                  	
  9023 0000207D B80280                  	mov	ax,8002h
  9024 00002080 CD2A                    	int	2Ah	; Microsoft Networks - BEGIN DOS CRITICAL SECTION
  9025                                  			; AL = critical section number (00h-0Fh)
  9026 00002082 58                      	pop	ax
  9027 00002083 C3                      	retn
  9028                                  
  9029                                  LcritDevice:
  9030                                  	;push	ax
  9031 00002084 C3                      	retn
  9032                                  	
  9033 00002085 B80281                  	mov	ax,8102h
  9034 00002088 CD2A                    	int	2Ah	; Microsoft Networks - END DOS CRITICAL SECTION
  9035                                  			; AL = critical section number (00h-0Fh)
  9036 0000208A 58                      	pop	ax
  9037 0000208B C3                      	retn
  9038                                  
  9039                                  ;============================================================================
  9040                                  ; CRIT.ASM, MSDOS 6.0, 1991
  9041                                  ;============================================================================
  9042                                  ; 20/07/2018 - Retro DOS v3.0
  9043                                  
  9044                                  ; (DOSMAC.INC, MSDOS 6.0, 1991)
  9045                                  
  9046                                  ; Some old versions of the 80286 have a bug in the chip.  The popf
  9047                                  ; instruction will enable interrupts.  Therefore in a section of code with
  9048                                  ; interrupts disabled and you need a popf instruction use the 'popff'
  9049                                  ; macro instead.
  9050                                  ;
  9051                                  
  9052                                  ;%macro POPFF 0
  9053                                  ;	jmp	$+3
  9054                                  ;	iret
  9055                                  ;	push	cs
  9056                                  ;	call	$-2
  9057                                  ;%endmacro
  9058                                  
  9059                                  ;**	CRIT.ASM - Critical Section Routines
  9060                                  ;
  9061                                  ;	Critical section handlers
  9062                                  ;
  9063                                  ;	Modification history:
  9064                                  ;
  9065                                  ;	    Created: ARR 30 March 1983
  9066                                  
  9067                                  ;
  9068                                  ;SR; This variable is set when the redir installs itself
  9069                                  ;
  9070                                  	;I_need redir_patch,BYTE
  9071                                  
  9072                                  ; Break	<Critical section handlers>
  9073                                  
  9074                                  ;   Each handler must leave everything untouched; including flags!
  9075                                  ;
  9076                                  ;   Sleaze for time savings:  first instruction is a return.  This is patched
  9077                                  ;   by the sharer to be a PUSH AX to complete the correct routines.
  9078                                  
  9079                                  ;Procedure  EcritDisk,NEAR
  9080                                  	;public  EcritMem
  9081                                  	;public  EcritSFT
  9082                                  ;ECritMEM    LABEL   NEAR
  9083                                  ;ECritSFT    LABEL   NEAR
  9084                                  
  9085                                  ;
  9086                                  ;SR; Check if critical section is to be entered
  9087                                  ;
  9088                                  
  9089                                  ;	pushf
  9090                                  ;	cmp	ss:[redir_patch],0
  9091                                  ;	jz	@f
  9092                                  ;	popff
  9093                                  ;
  9094                                  ;       PUSH    AX
  9095                                  ;	MOV     AX,8000h+critDisk
  9096                                  ;	INT     int_ibm
  9097                                  ;	POP     AX
  9098                                  ;	return
  9099                                  ;@@:
  9100                                  ;	popff
  9101                                  ;	ret
  9102                                  ;EndProc EcritDisk
  9103                                  
  9104                                  ;Procedure   LcritDisk,NEAR
  9105                                  ;	public  LcritMem
  9106                                  ;	public  LcritSFT
  9107                                  ;LCritMEM    LABEL   NEAR
  9108                                  ;LCritSFT    LABEL   NEAR
  9109                                  
  9110                                  ;
  9111                                  ;SR; Check if critical section is to be entered
  9112                                  ;
  9113                                  
  9114                                  ;	pushf
  9115                                  ;	cmp	ss:[redir_patch],0
  9116                                  ;	jz	@f
  9117                                  ;	popff
  9118                                  
  9119                                  ;       PUSH    AX
  9120                                  ;	MOV     AX,8100h+critDisk
  9121                                  ;	INT     int_ibm
  9122                                  ;	POP     AX
  9123                                  ;	return
  9124                                  ;@@:
  9125                                  ;	popff
  9126                                  ;	ret
  9127                                  
  9128                                  ;EndProc LcritDisk
  9129                                  
  9130                                  ;Procedure   EcritDevice,NEAR
  9131                                  ;
  9132                                  ;SR; Check if critical section is to be entered
  9133                                  ;
  9134                                  
  9135                                  ;	pushf
  9136                                  ;	cmp	ss:[redir_patch],0
  9137                                  ;	jz	@f
  9138                                  ;	popff
  9139                                  
  9140                                  ;       PUSH    AX
  9141                                  ;	MOV     AX,8000h+critDevice
  9142                                  ;	INT     int_ibm
  9143                                  ;	POP     AX
  9144                                  ;	return
  9145                                  ;@@:
  9146                                  ;	popff
  9147                                  ;	ret
  9148                                  
  9149                                  ;EndProc EcritDevice
  9150                                  
  9151                                  ;Procedure   LcritDevice,NEAR
  9152                                  ;
  9153                                  ;SR; Check if critical section is to be entered
  9154                                  ;
  9155                                  
  9156                                  ;	pushf
  9157                                  ;	cmp	ss:[redir_patch],0
  9158                                  ;	jz	@f
  9159                                  ;	popff
  9160                                  
  9161                                  ;       PUSH    AX
  9162                                  ;	MOV     AX,8100h+critDevice
  9163                                  ;	INT     int_ibm
  9164                                  ;	POP     AX
  9165                                  ;	return
  9166                                  ;@@:
  9167                                  ;	popff
  9168                                  ;	ret
  9169                                  
  9170                                  ;EndProc LcritDevice
  9171                                  
  9172                                  
  9173                                  ;============================================================================
  9174                                  ; CPMIO.ASM, MSDOS 6.0, 1991
  9175                                  ;============================================================================
  9176                                  ; 20/07/2018 - Retro DOS v3.0
  9177                                  
  9178                                  ;============================================================================
  9179                                  ; STDIO.ASM - (MSDOS 2.0)
  9180                                  ;============================================================================
  9181                                  
  9182                                  ;
  9183                                  ; Standard device IO for MSDOS (first 12 function calls)
  9184                                  ;
  9185                                  
  9186                                  ;.xlist
  9187                                  ;.xcref
  9188                                  ;INCLUDE STDSW.ASM
  9189                                  ;INCLUDE DOSSEG.ASM
  9190                                  ;.cref
  9191                                  ;.list
  9192                                  
  9193                                  ;TITLE   STDIO - device IO for MSDOS
  9194                                  ;NAME    STDIO
  9195                                  
  9196                                  ;INCLUDE IO.ASM
  9197                                  
  9198                                  ; ---------------------------------------------------------------------------
  9199                                  ;
  9200                                  ; NOTE for Retro DOS v2.0 :  (ERDOGAN TAN - 13/03/2018)
  9201                                  ;	  I0.ASM is missing in MSDOS 2.0 kernel source code files !!!
  9202                                  ;	  INSTEAD of IO.ASM, I have disassembled IBMDOS.COM (MSDOS 2.0)
  9203                                  ;			    and I have used CPMIO.ASM (MSDOS 6.0 source code)
  9204                                  ;			    to restore MSDOS 2.0 device IO source code 
  9205                                  ;
  9206                                  ;		(STRIN.ASM has '$STD_CON_STRING_INPUT' code.)	
  9207                                  	
  9208                                  ;============================================================================
  9209                                  ; STDIO.ASM - (MSDOS 2.0)
  9210                                  ;============================================================================
  9211                                  
  9212                                  ;
  9213                                  ; Standard device IO for MSDOS (first 12 function calls)
  9214                                  ;
  9215                                  
  9216                                  ;.xlist
  9217                                  ;.xcref
  9218                                  ;INCLUDE STDSW.ASM
  9219                                  ;INCLUDE DOSSEG.ASM
  9220                                  ;.cref
  9221                                  ;.list
  9222                                  
  9223                                  ;TITLE   STDIO - device IO for MSDOS
  9224                                  ;NAME    STDIO
  9225                                  
  9226                                  ;INCLUDE IO.ASM
  9227                                  
  9228                                  ; ---------------------------------------------------------------------------
  9229                                  ;
  9230                                  ; NOTE for Retro DOS v2.0 :  (ERDOGAN TAN - 13/03/2018)
  9231                                  ;	  I0.ASM is missing in MSDOS 2.0 kernel source code files !!!
  9232                                  ;	  INSTEAD of IO.ASM, I have disassembled IBMDOS.COM (MSDOS 2.0)
  9233                                  ;			    and I have used CPMIO.ASM (MSDOS 6.0 source code)
  9234                                  ;			    to restore MSDOS 2.0 device IO source code 
  9235                                  ;
  9236                                  ;		(STRIN.ASM has '$STD_CON_STRING_INPUT' code.)		
  9237                                  ;
  9238                                  ;============================================================================
  9239                                  ; IO.ASM (MSDOS 2.0) (IBMDOS.COM 2.0) - STRIN.ASM (MSDOS 2.0, 19/08/1983)
  9240                                  ;============================================================================
  9241                                  ; Retro DOS v2.0 by Erdogan Tan, 13/03/2018 - 14/03/2018
  9242                                  
  9243                                  ; (Disassembled code of IBMDOS.COM, 08/03/1983) - Dissassembler: IDA Pro Free
  9244                                  ; (Comments are from CPMIO.ASM - 1991, MSDOS 6.0) 
  9245                                  
  9246                                  ;**	Standard device IO for MSDOS (first 12 function calls)
  9247                                  ;
  9248                                  ;	TITLE	IBMCPMIO - device IO for MSDOS
  9249                                  ;	NAME	IBMCPMIO
  9250                                  
  9251                                  ;	Old style CP/M 1-12 system calls to talk to reserved devices
  9252                                  ;
  9253                                  ;	$Std_Con_Input_No_Echo
  9254                                  ;	$Std_Con_String_Output
  9255                                  ;	$Std_Con_String_Input
  9256                                  ;	$RawConIO
  9257                                  ;	$RawConInput
  9258                                  ;	RAWOUT
  9259                                  ;	RAWOUT2
  9260                                  ;
  9261                                  
  9262                                  ; The following routines form the console I/O group (funcs 1,2,6,7,8,9,10,11).
  9263                                  ; They assume ES and DS NOTHING, while not strictly correct, this forces data
  9264                                  ; references to be SS or CS relative which is desired.
  9265                                  
  9266                                  ; ---------------------------------------------------------------------------
  9267                                  
  9268                                  ;	TITLE	CPMIO2 - device IO for MSDOS
  9269                                  ;	NAME	CPMIO2
  9270                                  
  9271                                  ;
  9272                                  ;	Microsoft Confidential
  9273                                  ;	Copyright (C) Microsoft Corporation 1991
  9274                                  ;	All Rights Reserved.
  9275                                  ;
  9276                                  
  9277                                  ;**	Old style CP/M 1-12 system calls to talk to reserved devices
  9278                                  ;
  9279                                  ;	$Std_Con_Input
  9280                                  ;	$Std_Con_Output
  9281                                  ;	OUTT
  9282                                  ;	TAB
  9283                                  ;	BUFOUT
  9284                                  ;	$Std_Aux_Input
  9285                                  ;	$Std_Aux_Output
  9286                                  ;	$Std_Printer_Output
  9287                                  ;	$Std_Con_Input_Status
  9288                                  ;	$Std_Con_Input_Flush
  9289                                  ;
  9290                                  ;	Revision History:
  9291                                  ;
  9292                                  ;	  AN000	 version 4.00 - Jan. 1988
  9293                                  
  9294                                  ; The following routines form the console I/O group (funcs 1,2,6,7,8,9,10,11).
  9295                                  ; They assume ES and DS NOTHING, while not strictly correct, this forces data
  9296                                  ; references to be SS or CS relative which is desired.
  9297                                  
  9298                                  ;DOSCODE SEGMENT
  9299                                  ;	ASSUME	SS:DOSDATA,CS:DOSCODE
  9300                                  
  9301                                  
  9302                                  ;hkn; 	All the variables use SS override or DS. Therefore there is
  9303                                  ;hkn;	no need to specifically set up any seg regs unless SS assumption is
  9304                                  ;hkn;	not valid. 
  9305                                  
  9306                                  ;
  9307                                  ;----------------------------------------------------------------------------
  9308                                  ;
  9309                                  ; Procedure : $Std_Con_Input_No_Echo
  9310                                  ;
  9311                                  ;----------------------------------------------------------------------------
  9312                                  ;
  9313                                  
  9314                                  _$STD_CON_INPUT_NO_ECHO:   ;System call 8
  9315                                  
  9316                                  ; Inputs:
  9317                                  ;	None
  9318                                  ; Function:
  9319                                  ;	Input character from console, no echo
  9320                                  ; Returns:
  9321                                  ;	AL = character
  9322                                  
  9323 0000208C 1E                      	push	ds
  9324 0000208D 56                      	push	si
  9325                                  INTEST:
  9326 0000208E E86336                  	call	STATCHK
  9327 00002091 754D                    	jnz	short GET ; 08/09/2018
  9328                                  ;*************************************************************************
  9329                                  ;hkn; SS override
  9330 00002093 36803E[060A]00          	cmp	byte [SS:PRINTER_FLAG],0  ; is printer idle?
  9331 00002099 7505                    	jnz	short no_sys_wait
  9332 0000209B B405                    	mov	ah,5			; get input status with system wait
  9333 0000209D E8B12C                  	call	IOFUNC
  9334                                  no_sys_wait:
  9335                                  ;**************************************************************************
  9336 000020A0 B484                    	MOV	AH,84h
  9337 000020A2 CD2A                    	INT	int_IBM	 ; int 2Ah
  9338                                  
  9339                                  ;;; 7/15/86  update the date in the idle loop
  9340                                  ;;; Dec 19, 1986 D.C.L. changed following CMP to Byte Ptr from Word Ptr
  9341                                  ;;;;		 to shorten loop in consideration of the PC Convertible
  9342                                  
  9343                                  ;hkn; SS override
  9344 000020A4 36803E[8D0F]FF          	CMP	byte [SS:DATE_FLAG],-1	; date is updated may be every
  9345 000020AA 752D                    	JNZ	short NoUpdate		; 65535 x ? ms if no one calls
  9346 000020AC 50                      	PUSH	AX
  9347 000020AD 53                      	PUSH	BX			; following is tricky,
  9348 000020AE 51                      	PUSH	CX			; it may be called by critical handler
  9349 000020AF 52                      	PUSH	DX			; at that time, DEVCALL is used by
  9350                                  					; other's READ or WRITE
  9351 000020B0 1E                      	PUSH	DS			; save DS = SFT's sgement
  9352                                  
  9353                                  ;hkn; READTIME must use ds = DOSDATA
  9354                                  ;hkn;	PUSH	CS			; READTIME must use DS=CS
  9355                                  
  9356                                  	;push	ss
  9357 000020B1 0E                      	PUSH	CS
  9358 000020B2 1F                      	POP	DS
  9359                                  
  9360 000020B3 B80000                  	MOV	AX,0			; therefore, we save DEVCALL
  9361 000020B6 E89F02                  	CALL	Save_Restore_Packet	; save DEVCALL packet
  9362                                  	;invoke	READTIME		; readtime
  9363 000020B9 E824F8                  	call	READTIME
  9364 000020BC B80100                  	MOV	AX,1
  9365 000020BF E89602                  	CALL	Save_Restore_Packet	; restore DEVCALL packet
  9366                                  	;
  9367                                  	; MSDOS 3.3 (IBMDOS.COM, Offset 1F8Ch)
  9368                                  	; (MSDOS 6.0 code does not contain IBM DOS FETCHI_TAG check)
  9369 000020C2 53                      	push	bx
  9370 000020C3 BB[8D0F]                	mov	bx,DATE_FLAG
  9371 000020C6 83C302                  	add	bx,2  ; mov bx,FETCHI_FLAG
  9372 000020C9 2E813F7258              	cmp	word [cs:bx],5872h
  9373 000020CE 7403                    	jz	short FETCHI_TAG_chk_ok
  9374 000020D0 E8AE52                  	call	DOSINIT
  9375                                  FETCHI_TAG_chk_ok:
  9376 000020D3 5B                      	pop	bx
  9377                                  	;
  9378 000020D4 1F                      	POP	DS			; restore DS
  9379 000020D5 5A                      	POP	DX
  9380 000020D6 59                      	POP	CX
  9381 000020D7 5B                      	POP	BX
  9382 000020D8 58                      	POP	AX
  9383                                  NoUpdate:
  9384                                  
  9385                                  ;hkn; SS override
  9386 000020D9 36FF06[8D0F]            	INC	word [SS:DATE_FLAG]
  9387                                  
  9388                                  ;;; 7/15/86 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  9389 000020DE EBAE                    	JMP	short INTEST
  9390                                  GET:
  9391 000020E0 30E4                    	XOR	AH,AH
  9392 000020E2 E86C2C                  	call	IOFUNC
  9393 000020E5 5E                      	POP	SI
  9394 000020E6 1F                      	POP	DS
  9395                                  ;;; 7/15/86
  9396                                  
  9397                                  ;hkn; SS override
  9398                                  	; MSDOS 6.0
  9399 000020E7 36C606[8B0F]00          	MOV	BYTE [SS:SCAN_FLAG],0
  9400                                  	;
  9401 000020ED 3C00                    	CMP	AL,0	    ; extended code ( AL )
  9402 000020EF 7506                    	JNZ	short noscan
  9403                                  
  9404                                  ;hkn; SS override
  9405 000020F1 36C606[8B0F]01          	MOV	BYTE [SS:SCAN_FLAG],1 ; set this flag for ALT_Q key
  9406                                  
  9407                                  noscan:
  9408 000020F7 C3                      	retn
  9409                                  ;
  9410                                  ;----------------------------------------------------------------------------
  9411                                  ;
  9412                                  ;**	$STD_CON_STRING_OUTPUT - Console String Output
  9413                                  ;
  9414                                  ;
  9415                                  ;	ENTRY	(DS:DX) Point to output string '$' terminated
  9416                                  ;	EXIT	none
  9417                                  ;	USES	ALL
  9418                                  ;
  9419                                  ;----------------------------------------------------------------------------
  9420                                  ;
  9421                                  
  9422                                  _$STD_CON_STRING_OUTPUT:	;System call 9
  9423                                  
  9424 000020F8 89D6                    	mov	si,dx
  9425                                  STRING_OUT1:	
  9426 000020FA AC                      	lodsb
  9427 000020FB 3C24                    	cmp	al,'$'
  9428 000020FD 74F8                    	jz	short noscan
  9429                                  NEXT_STR1:
  9430 000020FF E88202                  	call	OUTT
  9431 00002102 EBF6                    	jmp	short STRING_OUT1
  9432                                  
  9433                                  ;----------------------------------------------------------------------------
  9434                                  ;
  9435                                  ;**	$STD_CON_STRING_INPUT - Input Line from Console
  9436                                  ;
  9437                                  ;	$STD_CON_STRING_INPUT Fills a buffer from console input until CR
  9438                                  ;
  9439                                  ;	ENTRY	(ds:dx) = input buffer
  9440                                  ;	EXIT	none
  9441                                  ;	USES	ALL
  9442                                  ;
  9443                                  ;----------------------------------------------------------------------------
  9444                                  
  9445                                  _$STD_CON_STRING_INPUT:		;System call 10
  9446                                  
  9447 00002104 8CD0                    	mov	ax,ss
  9448 00002106 8EC0                    	mov	es,ax
  9449 00002108 89D6                    	mov	si,dx
  9450 0000210A 30ED                    	xor	ch,ch
  9451 0000210C AD                      	lodsw
  9452                                  
  9453                                  ;	(AL) = the buffer length
  9454                                  ;	(AH) = the template length
  9455                                  
  9456 0000210D 08C0                            or	al,al
  9457 0000210F 74E6                            jz	short noscan	;Buffer is 0 length!!?
  9458 00002111 88E3                    	mov	bl,ah		;Init template counter
  9459 00002113 88EF                            mov	bh,ch		;Init template counter
  9460                                  
  9461                                  ;	(BL) = the number of bytes in the template
  9462                                  
  9463 00002115 38D8                            cmp	al,bl
  9464 00002117 7605                            jbe	short NOEDIT	;If length of buffer inconsistent with contents
  9465 00002119 80380D                          cmp	byte [bx+si],c_CR ; 0Dh
  9466 0000211C 7402                            jz	short EDITON	;If CR correctly placed EDIT is OK
  9467                                  
  9468                                  ; The number of chars in the template is >= the number of chars in buffer or
  9469                                  ; there is no CR at the end of the template.  This is an inconsistant state
  9470                                  ; of affairs.  Pretend that the template was empty:
  9471                                  ;
  9472                                  
  9473                                  NOEDIT:	
  9474 0000211E 88EB                    	mov	bl,ch		;Reset buffer
  9475                                  EDITON: 
  9476 00002120 88C2                    	mov	dl,al
  9477 00002122 4A                      	dec	dx		;DL is # of bytes we can put in the buffer
  9478                                  
  9479                                  ;	Top level.  We begin to read a line in.
  9480                                  
  9481                                  NEWLIN: 
  9482 00002123 36A0[A701]              	mov	al,[SS:CARPOS]
  9483 00002127 36A2[A801]              	mov	[SS:STARTPOS],al ;Remember position in raw buffer
  9484                                  
  9485 0000212B 56                      	push	si
  9486 0000212C BF[A901]                	mov	di,INBUF ;Build the new line here
  9487 0000212F 36882E[1405]            	mov	byte [SS:INSMODE],ch ;Insert mode off
  9488 00002134 88EF                    	mov	bh,ch		;No chars from template yet
  9489 00002136 88EE                    	mov	dh,ch		;No chars to new line yet
  9490 00002138 E851FF                  	call	_$STD_CON_INPUT_NO_ECHO ;Get first char
  9491 0000213B 3C0A                    	cmp	al,c_LF		; 0Ah	;Linefeed 
  9492 0000213D 7503                    	jnz	short GOTCH
  9493                                  
  9494                                  ;	This is the main loop of reading in a character and processing it.
  9495                                  ;
  9496                                  ;	(BH) = the index of the next byte in the template
  9497                                  ;	(BL) = the length of the template
  9498                                  ;	(DH) = the number of bytes in the buffer
  9499                                  ;	(DL) = the length of the buffer
  9500                                  
  9501                                  GETCH:
  9502 0000213F E84AFF                  	call	_$STD_CON_INPUT_NO_ECHO
  9503                                  GOTCH:
  9504                                  ;
  9505                                  ; Brain-damaged Tim Patterson ignored ^F in case his BIOS did not flush the
  9506                                  ; input queue.
  9507                                  ;
  9508 00002142 3C06                            cmp	al,"F"-"@"  ; CMP AL, 6  ; Ignore ^F
  9509 00002144 74F9                    	jz	short GETCH
  9510                                  
  9511                                  ;	If the leading char is the function-key lead byte
  9512                                  
  9513 00002146 363A06[D212]                    cmp	al,[SS:ESCCHAR]
  9514 0000214B 7438                            jz	short ESCAPE	;change reserved keyword DBM 5-7-87
  9515                                  
  9516                                  ;	Rubout and ^H are both destructive backspaces.
  9517                                  
  9518 0000214D 3C7F                            cmp	al,c_DEL ; 7FH
  9519 0000214F 742B                            jz	short BACKSPJ
  9520 00002151 3C08                            cmp	al,c_BS  ; 8
  9521 00002153 7427                            jz	short BACKSPJ
  9522                                  
  9523                                  	; MSDOS 6.0
  9524                                  ;;	^W deletes backward once and then backs up until a letter is before the
  9525                                  ;;	cursor
  9526                                  ;
  9527                                  ;	CMP     AL,"W"-"@" ; 17h
  9528                                  ;
  9529                                  ;;	The removal of the comment characters before the jump statement will
  9530                                  ;;	cause ^W to backup a word.
  9531                                  ;
  9532                                  ;;***	JZ	short WordDel
  9533                                  ;	NOP
  9534                                  ;	NOP
  9535                                  ;	CMP     AL,"U"-"@" ; 15h
  9536                                  ;
  9537                                  ;;	The removal of the comment characters before the jump statement will
  9538                                  ;;	cause ^U to clear a line.
  9539                                  ;
  9540                                  ;;***	JZ	short LineDel
  9541                                  ;	NOP
  9542                                  ;	NOP
  9543                                  
  9544                                  ;	CR terminates the line.
  9545                                  
  9546 00002155 3C0D                            cmp	al,c_CR ; 0Dh
  9547 00002157 742F                            jz	short ENDLIN
  9548                                  
  9549                                  ;	LF goes to a new line and keeps on reading.
  9550                                  
  9551 00002159 3C0A                            cmp	al,c_LF ; 0Ah
  9552 0000215B 7441                    	jz	short PHYCRLF
  9553                                  
  9554                                  ;	^X (or ESC) deletes the line and starts over
  9555                                  
  9556                                  	; MSDOS 3.3
  9557                                  	;cmp	al,[ss:CANCHAR] ; 1Bh
  9558                                  	;jz	short KILNEW
  9559                                  	;MSDOS 6.0
  9560 0000215D 3C1B                    	cmp	al,CANCEL ; 1Bh
  9561 0000215F 7442                    	jz	short KILNEW
  9562                                  
  9563                                  ; Otherwise, we save the input character.
  9564                                  
  9565                                  SAVCH:	
  9566 00002161 38D6                    	cmp	dh,dl
  9567 00002163 7319                    	jnb	short BUFFUL		; buffer is full.
  9568 00002165 AA                              stosb
  9569 00002166 FEC6                    	inc	dh                      ; increment count in buffer.
  9570 00002168 E8B302                  	call	BUFOUT			;Print control chars nicely
  9571                                  
  9572 0000216B 36803E[1405]00                  cmp	byte [SS:INSMODE], 0
  9573 00002171 75CC                    	jnz	short GETCH		; insertmode => don't advance template
  9574 00002173 38DF                            cmp	bh,bl
  9575 00002175 73C8                            jnb	short GETCH		; no more characters in template
  9576 00002177 46                              inc	si                      ; Skip to next char in template
  9577 00002178 FEC7                            inc	bh                      ; remember position in template
  9578 0000217A EBC3                            jmp	short GETCH
  9579                                  
  9580                                  BACKSPJ: 
  9581 0000217C EB38                    	jmp	short BACKSP
  9582                                  
  9583                                  BUFFUL: 
  9584 0000217E B007                    	mov	al, 7			; Bell to signal full buffer
  9585 00002180 E80102                  	call	OUTT
  9586 00002183 EBBA                    	jmp	short GETCH
  9587                                  
  9588                                  ESCAPE: 
  9589                                  	;transfer OEMFunctionKey
  9590 00002185 E988F6                  	JMP	OEMFunctionKey
  9591                                  
  9592                                  ENDLIN:
  9593 00002188 AA                              stosb				; Put the CR in the buffer
  9594 00002189 E8F801                  	call	OUTT                    ; Echo it
  9595 0000218C 5F                              pop	di                      ; Get start of user buffer
  9596 0000218D 8875FF                          mov	[di-1], dh		; Tell user how many bytes
  9597 00002190 FEC6                            inc	dh			; DH is length including CR
  9598                                  
  9599                                  COPYNEW:
  9600                                  	; (IBMDOS.COM, MSDOS 2.0, STRIN.ASM)
  9601                                  	;mov	bp, es
  9602                                  	;mov	bx, ds
  9603                                  	;mov	es, bx
  9604                                  	;mov	ds, bp
  9605                                  	;mov	si, INBUF
  9606                                  	;mov	cl, dh
  9607                                  	;rep	movsb
  9608                                  	;retn
  9609                                  
  9610                                  	; CPMIO.ASM (MSDOS 6.0)
  9611                                  	; (IBMDOS.COM, MSDOS 3.3, Offset 2061h) 
  9612                                  	;SAVE	<DS,ES>
  9613 00002192 1E                      	PUSH	DS
  9614 00002193 06                      	PUSH	ES
  9615                                  	;RESTORE <DS,ES>		; XCHG ES,DS
  9616 00002194 1F                      	POP	DS
  9617 00002195 07                      	POP	ES
  9618                                  
  9619                                  ;;hkn; INBUF is in DOSDATA
  9620 00002196 BE[A901]                        MOV     SI,INBUF
  9621 00002199 88F1                            MOV     CL,DH                   ; set up count
  9622 0000219B F3A4                            REP     MOVSB                   ; Copy final line to user buffer
  9623                                  OLDBAK_RETN:
  9624 0000219D C3                              RETN
  9625                                  
  9626                                  ;	Output a CRLF to the user screen and do NOT store it into the buffer
  9627                                  
  9628                                  PHYCRLF:
  9629 0000219E E82001                  	CALL	CRLF
  9630 000021A1 EB9C                            JMP	short GETCH
  9631                                  
  9632                                  	; MSDOS 6.0 (& MSDOS 3.3, IBMDOS.COM, 1987)
  9633                                  
  9634                                  	; Note: Following routines were not used in IBMDOS.COM
  9635                                  	;	-CRTL+W, CRTL+U is not activated-
  9636                                  	;	but they were in the kernel code!?)
  9637                                  ;
  9638                                  ; Delete the previous line
  9639                                  ;
  9640                                  ;LineDel:
  9641                                  ;	OR      DH,DH
  9642                                  ;	JZ	short GetCh
  9643                                  ;	Call    BackSpace
  9644                                  ;	JMP	short LineDel
  9645                                  
  9646                                  ;
  9647                                  ; delete the previous word.
  9648                                  ;
  9649                                  ;WordDel:
  9650                                  ;WordLoop:
  9651                                  ;	Call    BackSpace               ; backspace the one spot
  9652                                  ;	OR      DH,DH
  9653                                  ;	JZ	short GetChJ
  9654                                  ;	MOV     AL,[ES:DI-1]
  9655                                  ;	cmp     al,'0'
  9656                                  ;	jb	short GetChj
  9657                                  ;	cmp     al,'9'
  9658                                  ;	jbe	short WordLoop
  9659                                  ;	OR      AL,20h
  9660                                  ;	CMP     AL,'a'
  9661                                  ;	JB	short GetChJ
  9662                                  ;	CMP     AL,'z'
  9663                                  ;	JBE	short WordLoop
  9664                                  ;getchj: 
  9665                                  ;	JMP	GetCh
  9666                                  
  9667                                  ; The user wants to throw away what he's typed in and wants to start over.
  9668                                  ; We print the backslash and then go to the next line and tab to the correct
  9669                                  ; spot to begin the buffered input.
  9670                                  
  9671                                  KILNEW:
  9672 000021A3 B05C                            mov	al,'\'
  9673 000021A5 E8DC01                          call	OUTT            ;Print the CANCEL indicator
  9674 000021A8 5E                              pop	si		;Remember start of edit buffer
  9675                                  PUTNEW:
  9676 000021A9 E81501                  	call	CRLF            ;Go to next line on screen
  9677 000021AC 36A0[A801]              	mov	al,[SS:STARTPOS]
  9678 000021B0 E84702                  	call	TAB             ;Tab over
  9679 000021B3 E96DFF                          JMP     NEWLIN		;Start over again
  9680                                  
  9681                                  ;	Destructively back up one character position
  9682                                  
  9683                                  BACKSP:
  9684                                  	; 09/09/2018
  9685 000021B6 E80200                  	Call    BackSpace
  9686 000021B9 EB84                    	JMP     GETCH
  9687                                  
  9688                                  BackSpace:
  9689 000021BB 08F6                    	or	dh,dh
  9690 000021BD 7419                    	jz	short OLDBAK	;No chars in line, do nothing to line
  9691 000021BF E85800                  	call	BACKUP          ;Do the backup
  9692 000021C2 268A05                  	mov	al,[es:di]	;Get the deleted char
  9693 000021C5 3C20                            cmp	al,20h	; ' '
  9694 000021C7 730F                    	jnb	short OLDBAK	;Was a normal char
  9695 000021C9 3C09                            cmp	al,c_HT ; 9
  9696 000021CB 741B                    	jz	short BAKTAB	;Was a tab, fix up users display
  9697                                  ;; 9/27/86 fix for ctrl-U backspace
  9698 000021CD 3C15                    	CMP     AL,"U"-"@" ; 15h ; ctrl-U is a section symbol not ^U
  9699 000021CF 7407                    	JZ	short OLDBAK
  9700 000021D1 3C14                           	CMP     AL,"T"-"@" ; 14h ; ctrl-T is a paragraphs symbol not ^T
  9701 000021D3 7403                    	JZ	short OLDBAK
  9702                                  ;; 9/27/86 fix for ctrl-U backspace
  9703 000021D5 E84500                          call	BACKMES         ;Was a control char, zap the '^'
  9704                                  OLDBAK:
  9705 000021D8 36803E[1405]00                  cmp	byte [SS:INSMODE], 0
  9706 000021DE 75BD                    	jnz	short OLDBAK_RETN ;In insert mode, done
  9707 000021E0 08FF                    	or	bh,bh
  9708 000021E2 74B9                            jz	short OLDBAK_RETN 
  9709                                  				;Not advanced in template, stay where we are
  9710 000021E4 FECF                    	dec	bh		;Go back in template
  9711 000021E6 4E                              dec	si
  9712 000021E7 C3                      	retn
  9713                                  
  9714                                  BAKTAB:
  9715 000021E8 57                              push	di
  9716 000021E9 4F                              dec	di		;Back up one char
  9717 000021EA FD                              std			;Go backward
  9718 000021EB 88F1                            mov	cl,dh		;Number of chars currently in line
  9719 000021ED B020                            mov	al,20h	; ' '
  9720 000021EF 53                              push	bx
  9721 000021F0 B307                            mov	bl,7		;Max
  9722 000021F2 E30E                            jcxz	FIGTAB		;At start, do nothing
  9723                                  FNDPOS:
  9724 000021F4 AE                              scasb			;Look back
  9725 000021F5 7609                    	jbe	short CHKCNT
  9726 000021F7 26807D0109              	cmp	byte [es:di+1],9
  9727 000021FC 7409                    	jz	short HAVTAB	;Found a tab
  9728 000021FE FECB                    	dec	bl		;Back one char if non tab control char
  9729                                  CHKCNT:
  9730 00002200 E2F2                            loop	FNDPOS
  9731                                  FIGTAB:		
  9732 00002202 362A1E[A801]            	sub	bl,[SS:STARTPOS]
  9733                                  HAVTAB:
  9734 00002207 28F3                    	sub	bl,dh
  9735 00002209 00D9                    	add	cl,bl
  9736 0000220B 80E107                  	and	cl,7		;CX has correct number to erase
  9737 0000220E FC                      	cld			;Back to normal
  9738 0000220F 5B                      	pop	bx
  9739 00002210 5F                      	pop	di
  9740 00002211 74C5                    	jz	short OLDBAK	;Nothing to erase
  9741                                  TABBAK:
  9742 00002213 E80700                  	call	BACKMES
  9743 00002216 E2FB                    	loop	TABBAK		;Erase correct number of chars
  9744 00002218 EBBE                    	jmp	short OLDBAK
  9745                                  
  9746                                  BACKUP:
  9747 0000221A FECE                            dec	dh             ;Back up in line
  9748 0000221C 4F                              dec	di
  9749                                  BACKMES:
  9750 0000221D B008                            mov	al,c_BS ; 8	;Backspace
  9751 0000221F E86201                          call	OUTT
  9752 00002222 B020                            mov	al,20h ; ' '	;Erase
  9753 00002224 E85D01                          call	OUTT
  9754 00002227 B008                            mov	al,c_BS ; 8	;Backspace
  9755 00002229 E95801                  	jmp	OUTT		;Done
  9756                                  
  9757                                  ;User really wants an ESC character in his line
  9758                                  TWOESC:	
  9759 0000222C 36A0[D212]              	mov	al,[SS:ESCCHAR]
  9760 00002230 E92EFF                  	jmp	SAVCH
  9761                                  
  9762                                  ;Copy the rest of the template
  9763                                  COPYLIN:
  9764 00002233 88D9                            mov	cl,bl		;Total size of template
  9765 00002235 28F9                    	sub	cl,bh		;Minus position in template, is number to move
  9766 00002237 EB07                            jmp	short COPYEACH
  9767                                  
  9768                                  COPYSTR:
  9769 00002239 E83400                  	call	FINDOLD         ;Find the char
  9770 0000223C EB02                    	jmp	short COPYEACH  ;Copy up to it
  9771                                  
  9772                                  ;Copy one char from template to line
  9773                                  COPYONE:
  9774 0000223E B101                            mov	cl,1
  9775                                  ;Copy CX chars from template to line
  9776                                  COPYEACH:
  9777 00002240 36C606[1405]00                  mov	byte [SS:INSMODE],0	;All copies turn off insert mode
  9778 00002246 38D6                    	cmp	dh,dl
  9779 00002248 740F                            jz	short GETCH2		;At end of line, can't do anything
  9780 0000224A 38DF                            cmp	bh,bl
  9781 0000224C 740B                            jz	short GETCH2		;At end of template, can't do anything
  9782 0000224E AC                              lodsb
  9783 0000224F AA                              stosb
  9784 00002250 E8CB01                  	call	BUFOUT
  9785 00002253 FEC7                            inc	bh			;Ahead in template
  9786 00002255 FEC6                            inc	dh			;Ahead in line
  9787 00002257 E2E7                            loop	COPYEACH
  9788                                  GETCH2:
  9789 00002259 E9E3FE                          jmp	GETCH
  9790                                  
  9791                                  ;Skip one char in template
  9792                                  SKIPONE:
  9793 0000225C 38DF                    	cmp	bh,bl
  9794 0000225E 74F9                    	jz	short GETCH2		;At end of template
  9795 00002260 FEC7                    	inc	bh			;Ahead in templat
  9796 00002262 46                      	inc	si
  9797 00002263 E9D9FE                  	jmp	GETCH
  9798                                  
  9799                                  SKIPSTR:
  9800 00002266 E80700                  	call	FINDOLD                 ;Find out how far to go
  9801 00002269 01CE                            add	si,cx			;Go there
  9802 0000226B 00CF                            add	bh,cl
  9803 0000226D E9CFFE                          jmp	GETCH
  9804                                  
  9805                                  ;Get the next user char, and look ahead in template for a match
  9806                                  ;CX indicates how many chars to skip to get there on output
  9807                                  ;NOTE: WARNING: If the operation cannot be done, the return
  9808                                  ;       address is popped off and a jump to GETCH is taken.
  9809                                  ;       Make sure nothing extra on stack when this routine
  9810                                  ;       is called!!! (no PUSHes before calling it).
  9811                                  FINDOLD:
  9812 00002270 E819FE                          call	_$STD_CON_INPUT_NO_ECHO
  9813                                  	; STRIN.ASM (MSDOS 2.11, 19/07/2018) 
  9814 00002273 363A06[D212]            	CMP     AL,[SS:ESCCHAR]	; did he type a function key?
  9815                                  ;hkn; ESCCHAR is in TABLE seg (DOSCODE), so CS override
  9816                                  	;CMP	AL,[CS:ESCCHAR]
  9817 00002278 7505                    	JNZ     SHORT FINDSETUP		; no, set up for scan
  9818 0000227A E80FFE                          CALL	_$STD_CON_INPUT_NO_ECHO	; eat next char
  9819 0000227D EB1D                            JMP     SHORT NOTFND		; go try again
  9820                                  FINDSETUP:
  9821 0000227F 88D9                    	mov	cl,bl
  9822 00002281 28F9                            sub	cl,bh		;CX is number of chars to end of template
  9823 00002283 7417                    	jz	short NOTFND	;At end of template
  9824 00002285 49                              dec	cx		;Cannot point past end, limit search
  9825 00002286 7414                            jz	short NOTFND	 ;If only one char in template, forget it
  9826 00002288 06                      	push	es
  9827 00002289 1E                      	push	ds
  9828 0000228A 07                      	pop	es
  9829 0000228B 57                      	push	di
  9830 0000228C 89F7                    	mov	di,si		;Template to ES:DI
  9831 0000228E 47                      	inc	di
  9832 0000228F F2AE                    	repne	scasb		;Look
  9833 00002291 5F                      	pop	di
  9834 00002292 07                      	pop	es
  9835 00002293 7507                    	jnz	short NOTFND	;Didn't find the char
  9836 00002295 F6D1                            not	cl		;Turn how far to go into how far we went
  9837 00002297 00D9                            add	cl,bl		;Add size of template
  9838 00002299 28F9                            sub	cl,bh		;Subtract current pos, result distance to skip
  9839                                  FINDOLD_RETN:
  9840 0000229B C3                      	retn
  9841                                  
  9842                                  NOTFND:
  9843 0000229C 5D                              pop	bp              ;Chuck return address
  9844 0000229D E99FFE                          jmp	GETCH
  9845                                  
  9846                                  REEDIT:
  9847 000022A0 B040                    	mov	al,'@'		;Output re-edit character
  9848 000022A2 E8DF00                  	call	OUTT
  9849 000022A5 5F                      	pop	di
  9850 000022A6 57                      	push	di
  9851 000022A7 06                      	push	es
  9852 000022A8 1E                      	push	ds
  9853 000022A9 E8E6FE                  	call	COPYNEW		;Copy current line into template
  9854 000022AC 1F                      	pop	ds
  9855 000022AD 07                      	pop	es
  9856 000022AE 5E                      	pop	si
  9857 000022AF 88F3                    	mov	bl,dh		;Size of line is new size template
  9858 000022B1 E9F5FE                  	jmp	PUTNEW		;Start over again
  9859                                  
  9860                                  EXITINS:
  9861                                  ENTERINS:
  9862 000022B4 36F616[1405]            	not	byte [SS:INSMODE]
  9863 000022B9 E983FE                  	jmp	GETCH
  9864                                  
  9865                                  ;Put a real live ^Z in the buffer (embedded)
  9866                                  CTRLZ:
  9867 000022BC B01A                    	mov	al,"Z"-"@" ; 1Ah
  9868 000022BE E9A0FE                          jmp	SAVCH
  9869                                  
  9870                                  ;Output a CRLF
  9871                                  CRLF:
  9872 000022C1 B00D                    	mov	al,c_CR ; 0Dh 
  9873 000022C3 E8BE00                  	call	OUTT
  9874 000022C6 B00A                    	mov	al,c_LF ; 0Ah
  9875 000022C8 E9B900                  	jmp	OUTT
  9876                                  
  9877                                  ;
  9878                                  ;----------------------------------------------------------------------------
  9879                                  ;
  9880                                  ;**	$RAW_CON_IO - Do Raw Console I/O
  9881                                  ;
  9882                                  ;	Input or output raw character from console, no echo
  9883                                  ;
  9884                                  ;	ENTRY	DL = -1 if input
  9885                                  ;		   =  output character if output
  9886                                  ;	EXIT	(AL) = input character if input
  9887                                  ;	USES	all
  9888                                  ;
  9889                                  ;----------------------------------------------------------------------------
  9890                                  ; 20/07/2018 - Retro DOS v3.0
  9891                                  
  9892                                  _$RAW_CON_IO:			; System call 6
  9893                                  
  9894 000022CB 88D0                            MOV     AL,DL
  9895 000022CD 3CFF                            CMP     AL,-1
  9896 000022CF 7542                            JNZ     SHORT RAWOUT
  9897                                          ;LES 	DI,[USER_SP]	; Get pointer to register save area
  9898 000022D1 36C43E[1E05]                    LES     DI,[SS:USER_SP] ; 12/03/2018
  9899 000022D6 31DB                    	XOR     BX,BX
  9900                                      	;CALL	GET_IO_FCB	; MSDOS 2.11 (Retro DOS v2.0)
  9901 000022D8 E8E31D                  	CALL	GET_IO_SFT	; MSDOS 3.3 & MSDOS 6.0
  9902                                          ;JC	SHORT RET17
  9903 000022DB 72BE                            jc	short FINDOLD_RETN
  9904 000022DD B401                    	MOV     AH,1
  9905 000022DF E86F2A                          CALL	IOFUNC
  9906 000022E2 750B                            JNZ     SHORT RESFLG
  9907 000022E4 E8EE33                          CALL	SPOOLINT
  9908                                          ;OR	BYTE [ES:DI+16H],40H
  9909 000022E7 26804D1640              	OR	BYTE [ES:DI+user_env.user_F],40H ; Set user's zero flag
  9910 000022EC 30C0                            XOR     AL,AL
  9911                                  RET17:
  9912 000022EE C3                              RETN
  9913                                  
  9914                                  RESFLG:
  9915                                  	;AND	BYTE [ES:DI+16H],0FFH-40H  ; 0BFh
  9916 000022EF 26806516BF              	AND	BYTE [ES:DI+user_env.user_F],0FFH-40H
  9917                                  				; Reset user's zero flag
  9918                                  ;RILP:
  9919                                  rci0:
  9920 000022F4 E8DE33                       	CALL	SPOOLINT
  9921                                  
  9922                                  ;
  9923                                  ;----------------------------------------------------------------------------
  9924                                  ;
  9925                                  ;**	$Raw_CON_INPUT - Raw Console Input
  9926                                  ;
  9927                                  ;	Input raw character from console, no echo
  9928                                  ;
  9929                                  ;	ENTRY	none
  9930                                  ;	EXIT	(al) = character
  9931                                  ;	USES	all
  9932                                  ;
  9933                                  ;----------------------------------------------------------------------------
  9934                                  ;
  9935                                  
  9936                                  ;rci0:	invoke	SPOOLINT
  9937                                  
  9938                                  	;entry	$RAW_CON_INPUT
  9939                                  
  9940                                  _$RAW_CON_INPUT:		; System call 7
  9941 000022F7 53                      	push	bx
  9942 000022F8 31DB                            XOR     BX,BX
  9943                                          ;CALL	GET_IO_FCB	; MSDOS 2.11 (Retro DOS v2.0)
  9944 000022FA E8C11D                  	CALL	GET_IO_SFT	; MSDOS 3.3 & MSDOS 6.0
  9945 000022FD 5B                              pop	bx
  9946 000022FE 72EE                    	JC	SHORT RET17
  9947 00002300 B401                            MOV     AH,1
  9948 00002302 E84C2A                          CALL	IOFUNC
  9949                                  	;JZ	SHORT RILP	; MSDOS 2.11
  9950                                  	;XOR     AH,AH
  9951                                          ;CALL	IOFUNC
  9952                                          ;RETN
  9953 00002305 7506                    	jnz	short rci5	; MSDOS 3.3 & MSDOS 6.0
  9954 00002307 B484                    	MOV	AH,84h
  9955 00002309 CD2A                    	INT	int_IBM  ; int 2Ah
  9956 0000230B EBE7                    	JMP	short rci0
  9957                                  rci5:	
  9958 0000230D 30E4                            XOR     AH,AH
  9959 0000230F E83F2A                          CALL	IOFUNC
  9960 00002312 C3                              RETN
  9961                                  
  9962                                  ;
  9963                                  ;       Output the character in AL to stdout
  9964                                  ;
  9965                                  	;entry   RAWOUT
  9966                                  
  9967                                  RAWOUT:
  9968 00002313 53                              PUSH    BX
  9969 00002314 BB0100                          MOV     BX,1
  9970                                  
  9971                                          ;CALL	GET_IO_FCB	; MSDOS 2.11 (Retro DOS v2.0)
  9972 00002317 E8A41D                  	CALL	GET_IO_SFT	; MSDOS 3.3 & MSDOS 6.0
  9973 0000231A 721B                            JC      SHORT RAWRET1
  9974                                  	;
  9975                                  	; MSDOS 2.11
  9976                                          ;TEST	BYTE [SI+18H],080H	; output to file?
  9977                                          ;JZ	SHORT RAWNORM		; if so, do normally
  9978                                          ;PUSH	DS
  9979                                          ;PUSH	SI
  9980                                          ;LDS	SI,[SI+19H]		; output to special?
  9981                                  	;TEST	BYTE [SI+4],ISSPEC
  9982                                  	;POP	SI
  9983                                  	;
  9984                                          
  9985                                  	; MSDOS 3.3 & MSDOS 6.0
  9986                                  	;mov	bx,[si+5]
  9987 0000231C 8B5C05                  	MOV	BX,[SI+SF_ENTRY.sf_flags] ;hkn; DS set up by get_io_sft
  9988                                   ;
  9989                                   ; If we are a network handle OR if we are not a local device then go do the
  9990                                   ; output the hard way.
  9991                                   ;	
  9992                                  	;and	bx,8080h
  9993 0000231F 81E38080                	AND	BX,sf_isnet+devid_device
  9994                                  	;cmp	bx,80h
  9995 00002323 81FB8000                	CMP	BX,devid_device
  9996 00002327 7510                    	jnz     short RAWNORM
  9997 00002329 1E                      	push    ds
  9998                                  	;lds	bx,[si+7]
  9999 0000232A C55C07                  	LDS	BX,[SI+SF_ENTRY.sf_devptr] ; output to special?
 10000                                  	;test	byte [bx+4],10h
 10001 0000232D F6470410                	TEST	BYTE [BX+SYSDEV.ATT],ISSPEC
 10002                                  	;
 10003                                  
 10004 00002331 1F                              POP     DS
 10005 00002332 7405                            JZ      SHORT RAWNORM		; if not, do normally
 10006 00002334 CD29                            INT     int_fastcon   ; int 29h	; quickly output the char
 10007                                  
 10008                                          ;JMP     SHORT RAWRET
 10009                                  ;RAWNORM:
 10010                                  ;	CALL    RAWOUT3
 10011                                  
 10012                                  RAWRET: 
 10013 00002336 F8                      	CLC
 10014                                  RAWRET1:
 10015 00002337 5B                              POP     BX
 10016                                  RAWRET2:
 10017 00002338 C3                      	RETN
 10018                                  
 10019                                  RAWNORM:
 10020 00002339 E80700                  	CALL    RAWOUT3
 10021 0000233C EBF8                    	jmp	short RAWRET
 10022                                  
 10023                                  ;
 10024                                  ;       Output the character in AL to handle in BX
 10025                                  ;
 10026                                  ;	entry   RAWOUT2
 10027                                  
 10028                                  RAWOUT2:
 10029                                  	;CALL	GET_IO_FCB	; MSDOS 2.11 (Retro DOS v2.0)
 10030                                  	;JC	SHORT RET18
 10031 0000233E E87D1D                  	CALL	GET_IO_SFT	; MSDOS 3.3 & MSDOS 6.0
 10032 00002341 72F5                    	JC	SHORT RAWRET2
 10033                                  RAWOUT3:
 10034 00002343 50                              PUSH    AX
 10035 00002344 EB03                            JMP     SHORT RAWOSTRT
 10036                                  ROLP:
 10037 00002346 E88C33                          CALL	SPOOLINT
 10038                                  
 10039                                  	; MSDOS 6.0
 10040                                  	;OR	word [DOS34_FLAG],CTRL_BREAK_FLAG ; 001000000000b
 10041                                  				;AN002; set control break
 10042                                  	;;invoke DSKSTATCHK
 10043                                  	;call	DSKSTATCHK	;AN002; check control break
 10044                                  
 10045                                  RAWOSTRT:
 10046 00002349 B403                            MOV     AH,3
 10047 0000234B E8032A                          CALL    IOFUNC
 10048 0000234E 74F6                            JZ      SHORT ROLP
 10049                                  
 10050                                  	; MSDOS 6.0
 10051                                  ;SR;
 10052                                  ; IOFUNC now returns ax = 0ffffh if there was an I24 on a status call and
 10053                                  ;the user failed. We do not send a char if this happens. We however return 
 10054                                  ;to the caller with carry clear because this DOS call does not return any
 10055                                  ;status. 
 10056                                  ;
 10057                                  	;inc	ax		;fail on I24 if ax = -1
 10058                                  	;POP	AX
 10059                                  	;jz	short nosend	;yes, do not send char
 10060                                  	;MOV	AH,2
 10061                                  	;call	IOFUNC
 10062                                  ;nosend:
 10063                                  	;CLC			; Clear carry indicating successful
 10064                                  	;retn
 10065                                  
 10066                                  	; MSDOS 3.3 & MSDOS 2.11
 10067 00002350 58                              POP     AX
 10068 00002351 B402                            MOV     AH,2
 10069 00002353 E8FB29                          CALL    IOFUNC
 10070 00002356 F8                              CLC                     ; Clear carry indicating successful
 10071                                  RET18:    
 10072 00002357 C3                      	RETN
 10073                                  
 10074                                  ;;10/08/2018
 10075                                  ; 20/07/2018 - Retro DOS v3.0
 10076                                  ; ---------------------------------------------------------------------------
 10077                                  ; Retro DOS v2.0 (MSDOS 2.11) - OUTMES
 10078                                  ; ---------------------------------------------------------------------------
 10079                                  
 10080                                  ; This routine is called at DOS init
 10081                                  
 10082                                  ;;	;procedure OUTMES,NEAR ; String output for internal messages
 10083                                  ;;OUTMES:
 10084                                  ;;	;LODS	CS:BYTE PTR [SI]
 10085                                  ;;	CS	LODSB
 10086                                  ;;	CMP     AL,"$" ; 24h
 10087                                  ;;	JZ	SHORT RET18
 10088                                  ;;	CALL	OUTT
 10089                                  ;;	JMP     SHORT OUTMES
 10090                                  
 10091                                  ; ---------------------------------------------------------------------------
 10092                                  
 10093                                  ; 20/07/2018 - Retro DOS v3.0
 10094                                  
 10095                                  ; IBMDOS.COM (MSDOS 3.3 kernel) - Offset 2252h
 10096                                  
 10097                                  ;
 10098                                  ;----------------------------------------------------------------------------
 10099                                  ;
 10100                                  ; Inputs:
 10101                                  ;	AX=0 save the DEVCALL request packet
 10102                                  ;	  =1 restore the DEVCALL request packet
 10103                                  ; Function:
 10104                                  ;	save or restore the DEVCALL packet
 10105                                  ; Returns:
 10106                                  ;	none
 10107                                  ;
 10108                                  ;----------------------------------------------------------------------------
 10109                                  ;
 10110                                  
 10111                                  Save_Restore_Packet:
 10112 00002358 1E                      	PUSH	DS
 10113 00002359 06                      	PUSH	ES
 10114 0000235A 56                      	PUSH	SI
 10115 0000235B 57                      	PUSH	DI
 10116                                  
 10117                                  	; 09/09/2018
 10118 0000235C BF[730F]                	mov	di,FAKE_STACK_2F 
 10119 0000235F BE[0603]                	mov	si,DEVCALL
 10120                                  	;
 10121 00002362 83F800                  	CMP	AX,0		; save packet
 10122                                  	;JZ	short save_packet
 10123 00002365 7402                    	je	short set_seg 
 10124                                  
 10125                                  	; MSDOS 6.0
 10126                                  restore_packet:
 10127                                  ;	MOV	SI,OFFSET DOSDATA:Packet_Temp	 ;sourec
 10128                                  ;	MOV	DI,OFFSET DOSDATA:DEVCALL	 ;destination
 10129                                  	; MSDOS 3.3
 10130                                  	;mov	si,FAKE_STACK_2F ; DOS_TEMP ; Packed_Temp 
 10131                                  	;mov	di,DEVCALL  ; 09/09/2018
 10132                                  	;
 10133                                  	;JMP	short set_seg
 10134                                  	
 10135                                  	; 09/09/2018
 10136 00002367 87F7                    	xchg	si,di  ; DI = offset DEVCALL, SI = offset FAKE_STACK_2F
 10137                                  
 10138                                  	; MSDOS 6.0
 10139                                  save_packet:
 10140                                  ;	MOV	DI,OFFSET DOSDATA:Packet_Temp	 ;destination
 10141                                  ;	MOV	SI,OFFSET DOSDATA:DEVCALL	 ;source
 10142                                  	; 09/09/2018
 10143                                  	; MSDOS 3.3
 10144                                  	;mov	di,FAKE_STACK_2F ; DOS_TEMP ; Packed_Temp 
 10145                                  	;mov	si,DEVCALL ; 09/09/2018
 10146                                  
 10147                                  set_seg:
 10148                                  	; MSDOS 6.0
 10149                                  	;MOV	AX,SS		; set DS,ES to DOSDATA
 10150                                  	; MSDOS 3.3
 10151 00002369 8CC8                    	mov	ax,cs
 10152                                  	;
 10153 0000236B 8ED8                    	MOV	DS,AX
 10154 0000236D 8EC0                    	MOV	ES,AX
 10155 0000236F B90B00                  	MOV	CX,11		; 11 words to move
 10156 00002372 F3A5                    	REP	MOVSW
 10157                                  
 10158 00002374 5F                      	POP	DI
 10159 00002375 5E                      	POP	SI
 10160 00002376 07                      	POP	ES
 10161 00002377 1F                      	POP	DS
 10162 00002378 C3                      	retn
 10163                                  
 10164                                  ;============================================================================
 10165                                  ; CPMIO2.ASM, MSDOS 6.0, 1991
 10166                                  ;============================================================================
 10167                                  ; 20/07/2018 - Retro DOS v3.0
 10168                                  
 10169                                  ;hkn; 	All the variables use SS override or DS. Therefore there is
 10170                                  ;hkn;	no need to specifically set up any seg regs unless SS assumption is
 10171                                  ;hkn;	not valid. 
 10172                                  
 10173                                  ;
 10174                                  ;----------------------------------------------------------------------------
 10175                                  ;
 10176                                  ;**	$STD_CON_INPUT - System Call 1
 10177                                  ;
 10178                                  ;	Input character from console, echo
 10179                                  ;
 10180                                  ;	ENTRY	none
 10181                                  ;	EXIT	(al) = character
 10182                                  ;	USES	ALL
 10183                                  ;
 10184                                  ;----------------------------------------------------------------------------
 10185                                  ;
 10186                                  
 10187                                  _$STD_CON_INPUT:	;System call 1
 10188                                  	
 10189 00002379 E810FD                  	CALL	_$STD_CON_INPUT_NO_ECHO
 10190 0000237C 50                      	PUSH	AX
 10191 0000237D E80400                  	CALL	OUTT
 10192 00002380 58                      	POP	AX
 10193                                  CON_INPUT_RETN:	
 10194 00002381 C3                      	RETN
 10195                                  
 10196                                  ;
 10197                                  ;----------------------------------------------------------------------------
 10198                                  ;
 10199                                  ;**	$STD_CON_OUTPUT - System Call 2
 10200                                  ;
 10201                                  ;	Output character to console
 10202                                  ;
 10203                                  ;	ENTRY	(dl) = character
 10204                                  ;	EXIT	none
 10205                                  ;	USES	all
 10206                                  ;
 10207                                  ;----------------------------------------------------------------------------
 10208                                  ;
 10209                                  
 10210                                  _$STD_CON_OUTPUT:	;System call 2
 10211                                  
 10212 00002382 88D0                    	MOV	AL,DL
 10213                                  
 10214                                  OUTT:
 10215 00002384 3C20                    	CMP	AL,20H ; " "
 10216 00002386 725E                    	JB	SHORT CTRLOUT
 10217 00002388 3C7F                    	CMP	AL,c_DEL ; 7Fh
 10218 0000238A 7405                    	JZ	SHORT OUTCH
 10219                                  OUTCHA:	
 10220                                  	;INC	BYTE PTR [CARPOS]
 10221 0000238C 36FE06[A701]            	INC	BYTE [SS:CARPOS]
 10222                                  OUTCH:
 10223 00002391 1E                      	PUSH	DS
 10224 00002392 56                      	PUSH	SI
 10225                                  	;INC	BYTE PTR [CHARCO]		;invoke  statchk...
 10226                                  	;AND	BYTE PTR [CHARCO],00111111B	;AN000; every 64th char
 10227 00002393 36FE06[AE02]            	INC	BYTE [SS:CHARCO]	
 10228                                  	;AND	BYTE [SS:CHARCO],00111111B
 10229                                  	; 14/03/2018
 10230 00002398 368026[AE02]03          	and	byte [SS:CHARCO],3  ; IBMDOS.COM, MSDOS 3.3, MSDOS 2.11
 10231 0000239E 7505                    	JNZ	SHORT OUTSKIP
 10232 000023A0 50                      	PUSH	AX
 10233 000023A1 E85033                  	CALL	STATCHK
 10234 000023A4 58                      	POP	AX
 10235                                  OUTSKIP:
 10236 000023A5 E86BFF                  	CALL	RAWOUT				;output the character
 10237 000023A8 5E                      	POP	SI
 10238 000023A9 1F                      	POP	DS
 10239                                  
 10240                                  	;TEST	BYTE PTR [PFLAG],-1
 10241                                  	;retz
 10242 000023AA 36F606[AC02]FF          	TEST	BYTE [SS:PFLAG],0FFh
 10243 000023B0 74CF                    	JZ	SHORT CON_INPUT_RETN
 10244                                  
 10245 000023B2 53                      	PUSH	BX
 10246 000023B3 1E                      	PUSH	DS
 10247 000023B4 56                      	PUSH	SI
 10248 000023B5 BB0100                  	MOV	BX,1
 10249                                  	; 20/07/2018 - Retro DOS v3.0
 10250                                  	; MSDOS 3.3
 10251                                  	; MSDOS 6.0 (CPMIO2.ASM)
 10252 000023B8 E8031D                  	CALL	GET_IO_SFT		;hkn; GET_IO_SFT will set up DS:SI 
 10253                                  					;hkn; to sft entry
 10254 000023BB 7226                    	JC	SHORT TRIPOPJ
 10255                                  	;mov	bx,[si+5]
 10256 000023BD 8B5C05                  	MOV	BX,[SI+SF_ENTRY.sf_flags]
 10257                                  	;test	bx,8000h
 10258 000023C0 F7C30080                	TEST	BX,sf_isnet	; 8000H		; output to NET?
 10259 000023C4 751D                    	JNZ	short TRIPOPJ 			; if so, no echo
 10260                                  	;test	bx,80h
 10261 000023C6 F7C38000                	TEST	BX,devid_device ; 80H		; output to file?
 10262 000023CA 7417                    	JZ	SHORT TRIPOPJ 			; if so, no echo
 10263                                  	; 14/03/2018
 10264                                  	;call	GET_IO_FCB	 	; IBMDOS.COM, MSDOS 2.11
 10265                                  	;jc	short TRIPOPJ
 10266                                  	; MSDOS 2.11
 10267                                  	;test	byte [SI+18H], 80h
 10268                                  	;jz	short TRIPOPJ
 10269 000023CC BB0400                  	MOV	BX,4
 10270 000023CF E8EC1C                  	CALL	GET_IO_SFT
 10271 000023D2 720F                    	JC	SHORT TRIPOPJ
 10272                                  	;test	word [si+5], 800h
 10273 000023D4 F744050008              	TEST	word [SI+SF_ENTRY.sf_flags],sf_net_spool ; 800H 
 10274                                  						; StdPrn redirected?
 10275                                  	;JZ	SHORT LISSTRT2J			; No, OK to echo
 10276 000023D9 0F848E00                	jz	LISSTRT2 ; 10/08/2018 
 10277                                  	;MOV	BYTE [PFLAG],0			
 10278 000023DD 36C606[AC02]00          	MOV	BYTE [SS:PFLAG],0		; If a spool, NEVER echo
 10279                                  	; MSDOS 2.11
 10280                                  	;mov	bx,4
 10281                                  	;jmp	short LISSTRT2
 10282                                  	
 10283                                  TRIPOPJ:
 10284                                  	; 20/07/2018
 10285 000023E3 E98800                  	JMP	TRIPOP
 10286                                  
 10287                                  ;LISSTRT2J:
 10288                                  ;	JMP	LISSTRT2
 10289                                  
 10290                                  CTRLOUT:
 10291 000023E6 3C0D                    	CMP	AL,c_CR ; 0Dh
 10292 000023E8 7420                    	JZ	SHORT ZERPOS
 10293 000023EA 3C08                    	CMP	AL,c_BS ; 8
 10294 000023EC 7428                    	JZ	SHORT BACKPOS
 10295 000023EE 3C09                    	CMP	AL,c_HT ; 9
 10296 000023F0 759F                    	JNZ	SHORT OUTCH
 10297                                  	;MOV	AL,[CARPOS]
 10298 000023F2 36A0[A701]              	MOV	AL,[SS:CARPOS]
 10299 000023F6 0CF8                    	OR	AL,0F8H
 10300 000023F8 F6D8                    	NEG	AL
 10301                                  
 10302                                  TAB:
 10303 000023FA 51                      	PUSH	CX
 10304 000023FB 88C1                    	MOV	CL,AL
 10305 000023FD B500                    	MOV	CH,0
 10306 000023FF E307                    	JCXZ	POPTAB
 10307                                  TABLP:
 10308 00002401 B020                    	MOV	AL," "
 10309 00002403 E87EFF                  	CALL	OUTT
 10310 00002406 E2F9                    	LOOP	TABLP
 10311                                  POPTAB:
 10312 00002408 59                      	POP	CX
 10313 00002409 C3                      	RETN
 10314                                  
 10315                                  ZERPOS:
 10316                                  	;MOV	BYTE PTR [CARPOS],0
 10317 0000240A 36C606[A701]00          	MOV	BYTE [SS:CARPOS],0
 10318                                  	; 10/08/2018
 10319 00002410 E97EFF                  	JMP	OUTCH
 10320                                  OUTJ:	
 10321 00002413 E96EFF                  	JMP	OUTT
 10322                                  
 10323                                  BACKPOS:
 10324                                  	;DEC	BYTE PTR [CARPOS]
 10325 00002416 36FE0E[A701]            	DEC	BYTE [SS:CARPOS]
 10326 0000241B E973FF                  	JMP	OUTCH
 10327                                  
 10328                                  BUFOUT:
 10329 0000241E 3C20                    	CMP	AL," "
 10330 00002420 73F1                    	JAE	SHORT OUTJ		;Normal char
 10331 00002422 3C09                    	CMP	AL,9
 10332 00002424 74ED                    	JZ	SHORT OUTJ		;OUT knows how to expand tabs
 10333                                  	;DOS 3.3  7/14/86
 10334 00002426 3C15                    	CMP	AL,"U"-"@" ; 15h	; turn ^U to section symbol
 10335 00002428 740D                    	JZ	short CTRLU
 10336 0000242A 3C14                    	CMP	AL,"T"-"@" ; 14h	; turn ^T to paragraph symbol
 10337 0000242C 7409                    	JZ	short CTRLU
 10338                                  NOT_CTRLU:
 10339                                  	;DOS 3.3  7/14/86
 10340 0000242E 50                      	PUSH	AX
 10341 0000242F B05E                    	MOV	AL,"^"
 10342 00002431 E850FF                  	CALL	OUTT		;Print '^' before control chars
 10343 00002434 58                      	POP	AX
 10344 00002435 0C40                    	OR	AL,40H		;Turn it into Upper case mate
 10345                                  CTRLU:
 10346 00002437 E84AFF                  	CALL	OUTT
 10347                                  BUFOUT_RETN:
 10348 0000243A C3                      	RETN
 10349                                  
 10350                                  ;
 10351                                  ;----------------------------------------------------------------------------
 10352                                  ;
 10353                                  ;**	$STD_AUX_INPUT - System Call 3
 10354                                  ;
 10355                                  ;	$STD_AUX_INPUT returns a character from Aux Input
 10356                                  ;
 10357                                  ;	ENTRY	none
 10358                                  ;	EXIT	(al) = character
 10359                                  ;	USES	all
 10360                                  ;
 10361                                  ;----------------------------------------------------------------------------
 10362                                  ;
 10363                                  
 10364                                  _$STD_AUX_INPUT:	;System call 3
 10365                                  
 10366 0000243B E8B632                  	CALL	STATCHK
 10367 0000243E BB0300                  	MOV	BX,3
 10368 00002441 E87A1C                  	CALL	GET_IO_SFT	; 20/07/2018 - MSDOS 3.3 (MSDOS 6.0)
 10369                                  	;CALL	GET_IO_FCB	; 14/03/2018 - MSDOS 2.11
 10370                                  	;retc
 10371 00002444 72F4                    	JC	SHORT BUFOUT_RETN
 10372 00002446 EB03                    	JMP	SHORT TAISTRT
 10373                                  AUXILP:
 10374 00002448 E88A32                  	CALL	SPOOLINT
 10375                                  TAISTRT:
 10376 0000244B B401                    	MOV	AH,1
 10377 0000244D E80129                  	CALL	IOFUNC
 10378 00002450 74F6                    	JZ	SHORT AUXILP
 10379 00002452 30E4                    	XOR	AH,AH
 10380 00002454 E8FA28                  	CALL	IOFUNC
 10381 00002457 C3                      	RETN
 10382                                  
 10383                                  ;
 10384                                  ;----------------------------------------------------------------------------
 10385                                  ;
 10386                                  ;**	$STD_AUX_OUTPUT - Output character to AUX
 10387                                  ;
 10388                                  ;	ENTRY	(dl) = character
 10389                                  ;	EXIT	none
 10390                                  ;	USES	all
 10391                                  ;
 10392                                  ;----------------------------------------------------------------------------
 10393                                  ;
 10394                                  
 10395                                  _$STD_AUX_OUTPUT:	;System call 4
 10396                                  
 10397 00002458 53                      	PUSH	BX
 10398 00002459 BB0300                  	MOV	BX,3
 10399 0000245C EB04                    	JMP	SHORT SENDOUT
 10400                                  
 10401                                  ;
 10402                                  ;----------------------------------------------------------------------------
 10403                                  ;
 10404                                  ;**	$STD_PRINTER_OUTPUT - Output character to printer
 10405                                  ;
 10406                                  ;	ENTRY	(dl) = character
 10407                                  ;	EXIT	none
 10408                                  ;	USES	all
 10409                                  ;
 10410                                  ;----------------------------------------------------------------------------
 10411                                  ;
 10412                                  
 10413                                  _$STD_PRINTER_OUTPUT:	;System call 5
 10414                                  
 10415 0000245E 53                      	PUSH	BX
 10416 0000245F BB0400                  	MOV	BX,4
 10417                                  
 10418                                  SENDOUT:
 10419 00002462 88D0                    	MOV	AL,DL
 10420 00002464 50                      	PUSH	AX
 10421 00002465 E88C32                  	CALL	STATCHK
 10422 00002468 58                      	POP	AX
 10423 00002469 1E                      	PUSH	DS
 10424 0000246A 56                      	PUSH	SI
 10425                                  LISSTRT2:
 10426 0000246B E8D0FE                  	CALL	RAWOUT2
 10427                                  TRIPOP:
 10428 0000246E 5E                      	POP	SI
 10429 0000246F 1F                      	POP	DS
 10430 00002470 5B                      	POP	BX
 10431                                  SCIS_RETN:	; 20/07/2018
 10432 00002471 C3                      	RETN
 10433                                  ;
 10434                                  ;----------------------------------------------------------------------------
 10435                                  ;
 10436                                  ;**	$STD_CON_INPUT_STATUS - System Call 11
 10437                                  ;
 10438                                  ;	Check console input status
 10439                                  ;
 10440                                  ;	ENTRY	none
 10441                                  ;	EXIT	AL = -1 character available, = 0 no character
 10442                                  ;	USES	all
 10443                                  ;
 10444                                  ;----------------------------------------------------------------------------
 10445                                  ;
 10446                                  
 10447                                  _$STD_CON_INPUT_STATUS:		 ;System call 11
 10448                                  
 10449 00002472 E87F32                  	CALL	STATCHK
 10450 00002475 B000                    	MOV	AL,0			; no xor!!
 10451                                  	;retz
 10452 00002477 74F8                    	JZ	SHORT SCIS_RETN ; 15/04/2018
 10453 00002479 0CFF                    	OR	AL,-1
 10454                                  ;SCIS_RETN:
 10455 0000247B C3                      	RETN
 10456                                  
 10457                                  ;
 10458                                  ;----------------------------------------------------------------------------
 10459                                  ;
 10460                                  ;**	$STD_CON_INPUT_FLUSH - System Call 12
 10461                                  ;
 10462                                  ;	Flush console input buffer and perform call in AL
 10463                                  ;
 10464                                  ;	ENTRY	(AL) = DOS function to be called after flush (1,6,7,8,10)
 10465                                  ;	EXIT	(al) = 0 iff (al) was not one of the supported fcns
 10466                                  ;		return arguments for the fcn supplied in (AL)
 10467                                  ;	USES	all
 10468                                  ;
 10469                                  ;----------------------------------------------------------------------------
 10470                                  ;
 10471                                  
 10472                                  _$STD_CON_INPUT_FLUSH:		;System call 12
 10473                                  
 10474 0000247C 50                      	PUSH	AX
 10475 0000247D 52                      	PUSH	DX
 10476 0000247E 31DB                    	XOR	BX,BX
 10477 00002480 E83B1C                  	CALL	GET_IO_SFT	; 20/07/2018 - MSDOS 3.3 (MSDOS 6.0)
 10478                                  	;CALL	GET_IO_FCB	; 14/03/2018 - MSDOS 2.11
 10479 00002483 7205                    	JC	SHORT BADJFNCON
 10480 00002485 B404                    	MOV	AH,4
 10481 00002487 E8C728                  	CALL	IOFUNC
 10482                                  
 10483                                  BADJFNCON:
 10484 0000248A 5A                      	POP	DX
 10485 0000248B 58                      	POP	AX
 10486 0000248C 88C4                    	MOV	AH,AL
 10487 0000248E 3C01                    	CMP	AL,1
 10488 00002490 7413                    	JZ	SHORT REDISPJ
 10489 00002492 3C06                    	CMP	AL,6
 10490 00002494 740F                    	JZ	SHORT REDISPJ
 10491 00002496 3C07                    	CMP	AL,7
 10492 00002498 740B                    	JZ	SHORT REDISPJ
 10493 0000249A 3C08                    	CMP	AL,8
 10494 0000249C 7407                    	JZ	SHORT REDISPJ
 10495 0000249E 3C0A                    	CMP	AL,10
 10496 000024A0 7403                    	JZ	SHORT REDISPJ
 10497 000024A2 B000                    	MOV	AL,0
 10498 000024A4 C3                      	RETN
 10499                                  
 10500                                  REDISPJ:
 10501 000024A5 FA                      	CLI
 10502                                  	;transfer REDISP
 10503 000024A6 E99CF0                  	JMP	REDISP
 10504                                  
 10505                                  ;============================================================================
 10506                                  ; FCBIO.ASM, MSDOS 6.0, 1991
 10507                                  ;============================================================================
 10508                                  ; 20/07/2018 - Retro DOS v3.0
 10509                                  
 10510                                  ;**	FCBIO.ASM - Ancient 1.0 1.1 FCB system calls
 10511                                  ;
 10512                                  ;	$GET_FCB_POSITION
 10513                                  ;	$FCB_DELETE
 10514                                  ;	$GET_FCB_FILE_LENGTH
 10515                                  ;	$FCB_CLOSE
 10516                                  ;	$FCB_RENAME
 10517                                  ;	SaveFCBInfo
 10518                                  ;	ResetLRU
 10519                                  ;	SetOpenAge
 10520                                  ;	LRUFCB
 10521                                  ;	FCBRegen
 10522                                  ;	BlastSFT
 10523                                  ;	CheckFCB
 10524                                  ;	SFTFromFCB
 10525                                  ;	FCBHardErr
 10526                                  ;
 10527                                  ;	Revision history:
 10528                                  ;
 10529                                  ;		Created: ARR 4 April 1983"
 10530                                  ;			 MZ  6 June  1983 completion of functions
 10531                                  ;			 MZ 15 Dec   1983 Brain damaged programs close FCBs multiple
 10532                                  ;					  times.  Change so successive closes work by
 10533                                  ;					  always returning OK.	Also, detect I/O to
 10534                                  ;					  already closed FCB and return EOF.
 10535                                  ;			 MZ 16 Jan   1984 More braindamage.  Need to separate info
 10536                                  ;					  out of sft into FCB for reconnection
 10537                                  ;
 10538                                  ;		A000	 version 4.00  Jan. 1988
 10539                                  
 10540                                  ;Break <$Get_FCB_Position - set random record fields to current pos>
 10541                                  ;----------------------------------------------------------------------------
 10542                                  ;
 10543                                  ;   $Get_FCB_Position - look at an FCB, retrieve the current position from the
 10544                                  ;	extent and next record field and set the random record field to point
 10545                                  ;	to that record
 10546                                  ;
 10547                                  ;   Inputs:	DS:DX point to a possible extended FCB
 10548                                  ;   Outputs:	The random record field of the FCB is set to the current record
 10549                                  ;   Registers modified: all
 10550                                  ;
 10551                                  ;----------------------------------------------------------------------------
 10552                                  ;
 10553                                  
 10554                                  _$GET_FCB_POSITION:
 10555 000024A9 E81D05                  	call	GetExtended		; point to FCB
 10556 000024AC E8ED04                  	call	GetExtent		; DX:AX is current record
 10557                                  	;mov	[si+21h],ax
 10558 000024AF 894421                  	MOV	[SI+SYS_FCB.RR],AX ; drop in low order piece
 10559                                  	;mov	[si+23h],dl
 10560 000024B2 885423                  	MOV	[SI+SYS_FCB.RR+2],DL	; drop in high order piece
 10561                                  	;cmp	word [si+0Eh],64
 10562 000024B5 837C0E40                	CMP	word [SI+SYS_FCB.RECSIZ],64
 10563 000024B9 7303                    	JAE	short GetFCBBye
 10564                                  	;mov	[si+24h],dh
 10565 000024BB 887424                  	MOV	[SI+SYS_FCB.RR+2+1],DH	; Set 4th byte only if record size < 64
 10566                                  GetFCBBye:
 10567 000024BE E95BF2                  	jmp	FCB_RET_OK
 10568                                  
 10569                                  
 10570                                  ;Break <$FCB_Delete - remove several files that match the input FCB>
 10571                                  ;----------------------------------------------------------------------------
 10572                                  ;
 10573                                  ;**	$FCB_Delete - Delete from FCB Template
 10574                                  ;
 10575                                  ;	given an FCB, remove all directory entries in the current
 10576                                  ;	directory that have names that match the FCB's ?  marks.
 10577                                  ;
 10578                                  ;	ENTRY	(DS:DX) = address of FCB
 10579                                  ;	EXIT	entries matching the FCB are deleted
 10580                                  ;		(al) = ff iff no entries were deleted
 10581                                  ;	USES	all
 10582                                  ;
 10583                                  ;----------------------------------------------------------------------------
 10584                                  ;
 10585                                  
 10586                                  _$FCB_DELETE:		; System call 19
 10587                                  					; OpenBuf is in DOSDATA
 10588 000024C1 BF[6003]                	MOV	DI,OPENBUF 		; appropriate place 
 10589                                  
 10590 000024C4 E82545                  	call	TransFCB		; convert FCB to path
 10591 000024C7 720A                    	JC	short BadPath 		; signal no deletions
 10592                                  
 10593 000024C9 16                      	push	SS
 10594 000024CA 1F                      	pop	DS			; SS is DOSDATA
 10595                                  
 10596 000024CB E8A20D                  	call	DOS_DELETE		; wham
 10597 000024CE 7203                    	JC	short BadPath
 10598                                  GoodPath:
 10599 000024D0 E949F2                  	jmp	FCB_RET_OK		; do a good return
 10600                                  BadPath:
 10601                                  	; Error code is in AX
 10602                                  
 10603 000024D3 E949F2                  	jmp	FCB_RET_ERR		; let someone else signal the error
 10604                                  
 10605                                  
 10606                                  ;Break <$Get_FCB_File_Length - return the length of a file>
 10607                                  ;----------------------------------------------------------------------------
 10608                                  ;
 10609                                  ;   $Get_FCB_File_Length - set the random record field to the length of the
 10610                                  ;	file in records (rounded up if partial).
 10611                                  ;
 10612                                  ;   Inputs:	DS:DX - point to a possible extended FCB
 10613                                  ;   Outputs:	Random record field updated to reflect the number of records
 10614                                  ;   Registers modified: all
 10615                                  ;
 10616                                  ;----------------------------------------------------------------------------
 10617                                  ;
 10618                                  
 10619                                  _$GET_FCB_FILE_LENGTH:
 10620                                  
 10621 000024D6 E8F004                  	call	GetExtended		; get real FCB pointer
 10622                                  					; DX points to Input FCB
 10623                                  
 10624                                  					; OpenBuf is in DOSDATA
 10625 000024D9 BF[6003]                	MOV	DI,OPENBUF		; appropriate buffer
 10626                                  
 10627 000024DC 1E                      	push	ds			; save pointer to true FCB
 10628 000024DD 56                      	push	si
 10629 000024DE E80B45                  	call	TransFCB		; Trans name DS:DX, sets SATTRIB
 10630 000024E1 5E                      	pop	si
 10631 000024E2 1F                      	pop	ds
 10632 000024E3 72EE                    	JC	short BadPath
 10633 000024E5 1E                      	push	ds			; save pointer
 10634 000024E6 56                      	push	si
 10635 000024E7 16                      	push	ss		
 10636 000024E8 1F                      	pop	ds
 10637 000024E9 E80711                  	call	GET_FILE_INFO		; grab the info
 10638 000024EC 5E                      	pop	si			; get pointer back
 10639 000024ED 1F                      	pop	ds
 10640 000024EE 72E3                    	JC	short BadPath 		; invalid something
 10641 000024F0 89DA                    	MOV	DX,BX			; get high order size
 10642 000024F2 89F8                    	MOV	AX,DI			; get low order size
 10643                                  	;mov	 bx,[si+0Eh]
 10644 000024F4 8B5C0E                  	MOV	BX,[SI+SYS_FCB.RECSIZ]	; get his record size
 10645 000024F7 09DB                    	OR	BX,BX			; empty record => 0 size for file
 10646 000024F9 7503                    	JNZ	short GetSize 		; not empty
 10647 000024FB BB8000                  	MOV	BX,128
 10648                                  GetSize:
 10649 000024FE 89C7                    	MOV	DI,AX			; save low order word
 10650 00002500 89D0                    	MOV	AX,DX			; move high order for divide
 10651 00002502 31D2                    	XOR	DX,DX			; clear out high
 10652 00002504 F7F3                    	DIV	BX			; wham
 10653 00002506 50                      	PUSH	AX			; save dividend
 10654 00002507 89F8                    	MOV	AX,DI			; get low order piece
 10655 00002509 F7F3                    	DIV	BX			; wham
 10656 0000250B 89D1                    	MOV	CX,DX			; save remainder
 10657 0000250D 5A                      	POP	DX			; get high order dividend
 10658 0000250E E306                    	JCXZ	LengthStore		; no roundup
 10659 00002510 83C001                  	ADD	AX,1
 10660 00002513 83D200                  	ADC	DX,0			; 32-bit increment
 10661                                  LengthStore:
 10662                                  	;mov	[si+21h],ax
 10663 00002516 894421                  	MOV	[SI+SYS_FCB.RR],AX	; store low order
 10664                                  	;mov	[si+23h],dl
 10665 00002519 885423                  	MOV	[SI+SYS_FCB.RR+2],DL	; store high order
 10666 0000251C 08F6                    	OR	DH,DH
 10667 0000251E 74B0                    	JZ	short GoodPath		; not storing insignificant zero
 10668                                  	;mov	[si+24h],dh
 10669 00002520 887424                  	MOV	[SI+SYS_FCB.RR+3],DH	; save that high piece
 10670                                  GoodRet:
 10671                                  	;jmp	FCB_RET_OK
 10672 00002523 EBAB                    	jmp	short GoodPath
 10673                                  
 10674                                  ;Break <$FCB_Close - close a file>
 10675                                  ;----------------------------------------------------------------------------
 10676                                  ;
 10677                                  ;   $FCB_Close - given an FCB, look up the SFN and close it.  Do not free it
 10678                                  ;	as the FCB may be used for further I/O
 10679                                  ;
 10680                                  ;   Inputs:	DS:DX point to FCB
 10681                                  ;   Outputs:	AL = FF if file was not found on disk
 10682                                  ;   Registers modified: all
 10683                                  ;
 10684                                  ;----------------------------------------------------------------------------
 10685                                  ;
 10686                                  
 10687                                  _$FCB_CLOSE:		; System call 16
 10688                                  
 10689 00002525 30C0                    	XOR	AL,AL			; default search attributes
 10690 00002527 E89F04                  	call	GetExtended		; DS:SI point to real FCB
 10691 0000252A 7403                    	JZ	short NoAttr		; not extended
 10692 0000252C 8A44FF                  	MOV	AL,[SI-1]		; get attributes
 10693                                  NoAttr:
 10694                                  					; SS override
 10695 0000252F 36A2[0605]              	MOV	[SS:ATTRIB],AL		; stash away found attributes
 10696 00002533 E80804                  	call	SFTFromFCB
 10697 00002536 72EB                    	JC	short GoodRet 		; MZ 16 Jan Assume death
 10698                                  
 10699                                  	;
 10700                                  	; If the sharer is present, then the SFT is not regenable. Thus, 
 10701                                  	; there is no need to set the SFT's attribute.
 10702                                  	;
 10703                                  
 10704                                  	;;; 9/8/86 F.C. save SFT attribute and restore it back when close is 
 10705                                  	;;; done
 10706                                  
 10707                                  	;mov	al,[es:di+4]
 10708 00002538 268A4504                	MOV	AL,[ES:DI+SF_ENTRY.sf_attr]
 10709 0000253C 30E4                    	XOR	AH,AH
 10710 0000253E 50                      	PUSH	AX
 10711                                  
 10712                                  	;;; 9/8/86 F.C. save SFT attribute and restore it back when close is 
 10713                                  	;;; done
 10714                                  
 10715 0000253F E8E34D                  	call	CheckShare
 10716 00002542 7508                    	JNZ	short NoStash
 10717 00002544 36A0[0605]              	MOV	AL,[SS:ATTRIB]
 10718                                  	;mov	[es:di+4],al
 10719 00002548 26884504                	MOV	[ES:DI+SF_ENTRY.sf_attr],AL ; attempted attribute for close
 10720                                  NoStash:
 10721                                  	;mov	ax,[si+14h]
 10722 0000254C 8B4414                  	MOV	AX,[SI+SYS_FCB.FDATE] ; move in the time and date
 10723                                  	;mov	[es:di+0Fh],ax
 10724 0000254F 2689450F                	MOV	[ES:DI+SF_ENTRY.sf_date],AX
 10725                                  	;mov	ax,[si+16h]
 10726 00002553 8B4416                  	MOV	AX,[SI+SYS_FCB.FTIME]
 10727                                  	;mov	[es:di+0Dh],ax
 10728 00002556 2689450D                	MOV	[ES:DI+SF_ENTRY.sf_time],AX
 10729                                  	;mov	ax,[si+10h]
 10730 0000255A 8B4410                  	MOV	AX,[SI+SYS_FCB.FILSIZ]
 10731                                  	;mov	[es:di+11h],ax
 10732 0000255D 26894511                	MOV	[ES:DI+SF_ENTRY.sf_size],AX
 10733                                  	;mov	ax,[si+12h]
 10734 00002561 8B4412                  	MOV	AX,[SI+SYS_FCB.FILSIZ+2]
 10735                                  	;mov	[es:di+13h],ax
 10736 00002564 26894513                	MOV	[ES:DI+SF_ENTRY.sf_size+2],AX
 10737                                  	;or	word [es:di+5],4000h
 10738 00002568 26814D050040            	OR	word [ES:DI+SF_ENTRY.sf_flags],sf_close_nodate
 10739 0000256E 16                      	push	ss
 10740 0000256F 1F                      	pop	ds
 10741 00002570 E84F15                  	call	DOS_CLOSE	; wham
 10742 00002573 C43E[3605]              	LES	DI,[THISSFT]
 10743                                  
 10744                                  	;;; 9/8/86 F.C. restore SFT attribute
 10745 00002577 59                      	POP	CX
 10746                                  	;mov	[es:di+4],cl
 10747 00002578 26884D04                	MOV	[ES:DI+SF_ENTRY.sf_attr],CL
 10748                                  	;;; 9/8/86 F.C. restore SFT attribute
 10749                                  
 10750 0000257C 9C                      	PUSHF
 10751                                  	;test	word [es:di],0FFFFh
 10752                                  	;cmp	word [ES:DI+SF_ENTRY.sf_ref_count],0
 10753                                  				; zero ref count gets blasted
 10754 0000257D 26833D00                	cmp	word [ES:DI],0
 10755 00002581 7507                    	jnz     short CloseOK
 10756 00002583 50                      	PUSH	AX
 10757 00002584 B04D                    	MOV	AL,'M'
 10758 00002586 E8DA02                  	call	BlastSFT
 10759 00002589 58                      	POP	AX
 10760                                  CloseOK:
 10761 0000258A 9D                      	POPF
 10762 0000258B 7396                    	JNC	short GoodRet
 10763                                  	;cmp	al,6
 10764 0000258D 3C06                    	CMP	AL,error_invalid_handle
 10765 0000258F 7492                    	JZ	short GoodRet
 10766                                  	;mov	al,2
 10767 00002591 B002                    	MOV	AL,error_file_not_found
 10768                                  fcb_close_err:
 10769 00002593 E989F1                  	jmp	FCB_RET_ERR
 10770                                  
 10771                                  ;
 10772                                  ;----------------------------------------------------------------------------
 10773                                  ;
 10774                                  ;**	$FCB_Rename - Rename a File
 10775                                  ;
 10776                                  ;	$FCB_Rename - rename a file in place within a directory.  Renames
 10777                                  ;	multiple files copying from the meta characters.
 10778                                  ;
 10779                                  ;	ENTRY	DS:DX point to an FCB.	The normal name field is the source
 10780                                  ;		    name of the files to be renamed.  Starting at offset 11h
 10781                                  ;		    in the FCB is the destination name.
 10782                                  ;	EXIT	AL = 0 -> no error occurred and all files were renamed
 10783                                  ;		AL = FF -> some files may have been renamed but:
 10784                                  ;			rename to existing file or source file not found
 10785                                  ;	USES	ALL
 10786                                  ;
 10787                                  ;----------------------------------------------------------------------------
 10788                                  ;
 10789                                  
 10790                                  _$FCB_RENAME:		; System call 23
 10791                                  
 10792 00002596 E83004                  	call	GetExtended		; get pointer to real FCB
 10793 00002599 52                      	push	dx
 10794 0000259A 8A04                    	MOV	AL,[SI] 		; get drive byte
 10795 0000259C 83C610                  	ADD	SI,10h			; point to destination
 10796                                  
 10797                                  					; RenBuf is in DOSDATA
 10798 0000259F BF[E003]                	MOV	DI,RENBUF		; point to destination buffer
 10799 000025A2 FF34                    	push	word [SI]
 10800 000025A4 1E                      	push	ds
 10801 000025A5 57                      	push	di			; save source pointer for TransFCB
 10802 000025A6 8804                    	MOV	[SI],AL			; drop in real drive
 10803 000025A8 89F2                    	MOV	DX,SI			; let TransFCB know where the FCB is
 10804 000025AA E83F44                  	call	TransFCB		; munch this pathname
 10805 000025AD 5E                      	pop	si
 10806 000025AE 1F                      	pop	ds	
 10807 000025AF 8F04                    	pop	WORD [SI]		; get path back
 10808 000025B1 5A                      	pop	dx			; Original FCB pointer
 10809 000025B2 721A                    	JC	short fren90		; bad path -> error
 10810                                  
 10811                                  					; SS override for WFP_Start & Ren_WFP
 10812 000025B4 368B36[4A05]            	MOV	SI,[ss:WFP_START]	; get pointer
 10813 000025B9 368936[4C05]            	MOV	[ss:REN_WFP],SI		; stash it
 10814                                  
 10815                                  					; OpenBuf is in DOSDATA
 10816 000025BE BF[6003]                	MOV	DI,OPENBUF		; appropriate spot
 10817 000025C1 E82844                  	call	TransFCB		; wham
 10818                                  					; NOTE that this call is pointing
 10819                                  					;  back to the ORIGINAL FCB so
 10820                                  					;  SATTRIB gets set correctly
 10821 000025C4 7208                    	JC	short fren90		; error
 10822 000025C6 E8520E                  	call	DOS_RENAME
 10823 000025C9 7203                    	JC	short fren90
 10824 000025CB E94EF1                  	jmp	FCB_RET_OK
 10825                                  
 10826                                  ;	Error -
 10827                                  ;
 10828                                  ;	(al) = error code
 10829                                  
 10830                                  fren90:	
 10831 000025CE E94EF1                  	jmp	FCB_RET_ERR
 10832                                  
 10833                                  
 10834                                  ;Break <Misbehavior fixers>
 10835                                  ;
 10836                                  ;   FCBs suffer from several problems.	First, they are maintained in the
 10837                                  ;   user's space so he may move them at will.  Second, they have a small
 10838                                  ;   reserved area that may be used for system information.  Third, there was
 10839                                  ;   never any "rules for behavior" for FCBs; there was no protocol for their
 10840                                  ;   usage.
 10841                                  ;
 10842                                  ;   This results in the following misbehavior:
 10843                                  ;
 10844                                  ;	infinite opens of the same file:
 10845                                  ;
 10846                                  ;	While (TRUE) {			While (TRUE) {
 10847                                  ;	    FCBOpen (FCB);		    FCBOpen (FCB);
 10848                                  ;	    Read (FCB); 		    Write (FCB);
 10849                                  ;	    }				    }
 10850                                  ;
 10851                                  ;	infinite opens of different files:
 10852                                  ;
 10853                                  ;	While (TRUE) {			While (TRUE) {
 10854                                  ;	    FCBOpen (FCB[i++]); 	    FCBOpen (FCB[i++]);
 10855                                  ;	    Read (FCB); 		    Write (FCB);
 10856                                  ;	    }				    }
 10857                                  ;
 10858                                  ;	multiple closes of the same file:
 10859                                  ;
 10860                                  ;	FCBOpen (FCB);
 10861                                  ;	while (TRUE)
 10862                                  ;	    FCBClose (FCB);
 10863                                  ;
 10864                                  ;	I/O after closing file:
 10865                                  ;
 10866                                  ;	FCBOpen (FCB);
 10867                                  ;	while (TRUE) {
 10868                                  ;	    FCBWrite (FCB);
 10869                                  ;	    FCBClose (FCB);
 10870                                  ;	    }
 10871                                  ;
 10872                                  ;   The following is am implementation of a methodology for emulating the
 10873                                  ;   above with the exception of I/O after close.  We are NOT attempting to
 10874                                  ;   resolve that particular misbehavior.  We will enforce correct behaviour in
 10875                                  ;   FCBs when they refer to a network file or when there is file sharing on
 10876                                  ;   the local machine.
 10877                                  ;
 10878                                  ;   The reserved fields of the FCB (10 bytes worth) is divided up into various
 10879                                  ;   structures depending on the file itself and the state of operations of the
 10880                                  ;   OS.  The information contained in this reserved field is enough to
 10881                                  ;   regenerate the SFT for the local non-shared file.  It is assumed that this
 10882                                  ;   regeneration procedure may be expensive.  The SFT for the FCB is
 10883                                  ;   maintained in a LRU cache as the ONLY performance inprovement.
 10884                                  ;
 10885                                  ;   No regeneration of SFTs is attempted for network FCBs.
 10886                                  ;
 10887                                  ;   To regenerate the SFT for a local FCB, it is necessary to determine if the
 10888                                  ;   file sharer is working.  If the file sharer is present then the SFT is not
 10889                                  ;   regenerated.
 10890                                  ;
 10891                                  ;   Finally, if there is no local sharing, the full name of the file is no
 10892                                  ;   longer available.  We can make up for this by using the following
 10893                                  ;   information:
 10894                                  ;
 10895                                  ;	The Drive number (from the DPB).
 10896                                  ;	The physical sector of the directory that contains the entry.
 10897                                  ;	The relative position of the entry in the sector.
 10898                                  ;	The first cluster field.
 10899                                  ;	The last used SFT.
 10900                                  ;      OR In the case of a device FCB
 10901                                  ;	The low 6 bits of sf_flags (indicating device type)
 10902                                  ;	The pointer to the device header
 10903                                  ;
 10904                                  ;
 10905                                  ;   We read in the particular directory sector and examine the indicated
 10906                                  ;   directory entry.  If it matches, then we are kosher; otherwise, we fail.
 10907                                  ;
 10908                                  ;   Some key items need to be remembered:
 10909                                  ;
 10910                                  ;	Even though we are caching SFTs, they may contain useful sharing
 10911                                  ;	information.  We enforce good behavior on the FCBs.
 10912                                  ;
 10913                                  ;	Network support must not treat FCBs as impacting the ref counts on
 10914                                  ;	open VCs.  The VCs may be closed only at process termination.
 10915                                  ;
 10916                                  ;	If this is not an installed version of the DOS, file sharing will
 10917                                  ;	always be present.
 10918                                  ;
 10919                                  ;	We MUST always initialize lstclus to = firclus when regenerating a
 10920                                  ;	file. Otherwise we start allocating clusters up the wazoo.
 10921                                  ;
 10922                                  ;	Always initialize, during regeneration, the mode field to both isFCB
 10923                                  ;	and open_for_both.  This is so the FCB code in the sharer can find the
 10924                                  ;	proper OI record.
 10925                                  ;
 10926                                  ;   The test bits are:
 10927                                  ;
 10928                                  ;	00 -> local file
 10929                                  ;	40 -> sharing local
 10930                                  ;	80 -> network
 10931                                  ;	C0 -> local device
 10932                                  
 10933                                  ;Break	<SaveFCBInfo - store pertinent information from an SFT into the FCB>
 10934                                  ;----------------------------------------------------------------------------
 10935                                  ;
 10936                                  ;   SaveFCBInfo - given an FCB and its associated SFT, copy the relevant
 10937                                  ;	pieces of information into the FCB to allow for subsequent
 10938                                  ;	regeneration. Poke LRU also.
 10939                                  ;
 10940                                  ;   Inputs:	ThisSFT points to a complete SFT.
 10941                                  ;		DS:SI point to the FCB (not an extended one)
 10942                                  ;   Outputs:	The relevant reserved fields in the FCB are filled in.
 10943                                  ;		DS:SI preserved
 10944                                  ;		ES:DI point to sft
 10945                                  ;   Registers modified: All
 10946                                  ;
 10947                                  ;
 10948                                  ;----------------------------------------------------------------------------
 10949                                  ;
 10950                                  
 10951                                  SaveFCBInfo:
 10952                                  
 10953 000025D1 36C43E[3605]            	LES	DI,[SS:THISSFT]		; SS override
 10954 000025D6 E80AFA                  	call	IsSFTNet
 10955 000025D9 7419                    	JZ	short SaveLocal		; if not network then save local info
 10956                                  ;
 10957                                  ;----- In net support -----
 10958                                  ;
 10959                                  	; MSDOS 6.0
 10960                                  	;MOV	AX,[ES:DI+sf_serial_ID] ;AN000;;IFS. save IFS ID
 10961                                  	;MOV	[SI+fcb_netID],ax	;AN000;;IFS.
 10962                                  	; MSDOS 3.3
 10963                                  	;mov	ax,[es:di+1Dh]
 10964 000025DB 268B451D                	mov	ax,[es:di+SF_ENTRY.sf_dirsec]
 10965                                  	;mov	[si+1Ah],ax
 10966 000025DF 89441A                  	mov	[si+fcb_net_handle],ax
 10967                                  
 10968                                  	; MSDOS 3.3
 10969 000025E2 06                      	push	es
 10970 000025E3 57                      	push	di
 10971                                  	;les	di,[es:di+19h]
 10972 000025E4 26C47D19                	LES	DI,[ES:DI+sf_netid]
 10973                                  	;mov	[si+1Ch],di
 10974 000025E8 897C1C                  	MOV	[SI+fcb_netID],DI	; save net ID
 10975                                  	;mov 	[si+1Eh],es
 10976 000025EB 8C441E                  	MOV	[SI+fcb_netID+2],ES
 10977 000025EE 5F                      	pop	di
 10978 000025EF 07                      	pop	es
 10979                                  
 10980                                  	;mov	bl,80h
 10981 000025F0 B380                    	MOV	BL,FCBNETWORK
 10982                                  ;
 10983                                  ;----- END In net support -----
 10984                                  ;
 10985 000025F2 EB4C                    	jmp	SHORT SaveSFN
 10986                                  
 10987                                  SaveLocal:
 10988                                  	;IF	Installed
 10989 000025F4 E82E4D                  	call	CheckShare
 10990 000025F7 7402                    	JZ	short SaveNoShare	; no sharer
 10991 000025F9 EB40                    	JMP	short SaveShare		; sharer present
 10992                                  
 10993                                  SaveNoShare:
 10994                                  	;test 	word [es:di+5],80h
 10995 000025FB 26F745058000            	TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 10996 00002601 7526                    	JNZ	short SaveNoShareDev	; Device
 10997                                  	;
 10998                                  	; Save no sharing local file information
 10999                                  	;
 11000                                  	;mov	ax,[es:di+1Dh]
 11001 00002603 268B451D                	MOV	AX,[ES:DI+SF_ENTRY.sf_dirsec] ; get directory sector F.C.
 11002                                  	;mov	[si+1Dh],ax
 11003 00002607 89441D                  	MOV	[SI+fcb_nsl_dirsec],AX
 11004                                  
 11005                                  	; MSDOS 6.0
 11006                                  	;SR; Store high byte of directory sector
 11007                                  	;mov	ax,[es:di+SF_ENTRY.sf_dirsec+2] ; get high word
 11008                                  	;
 11009                                  	; SR;
 11010                                  	; We have to store the read-only and archive attributes of the file.
 11011                                  	; We extract it from the SFT and store it in the top two bits of the 
 11012                                  	; sector number ( sector number == 22 bits only )
 11013                                  	;
 11014                                  	;mov	bl,[es:di+SF_ENTRY.sf_attr]
 11015                                  	;mov	bh,bl
 11016                                  	;ror	bl,1
 11017                                  	;shl	bh,1
 11018                                  	;or	bl,bh
 11019                                  	;and	bl,0C0h
 11020                                  	;
 11021                                  	;or	al,bl
 11022                                  	;mov	[si+fcb_sfn],al	;sector number = 22-bits
 11023                                  
 11024                                  	; MSDOS 3.3 ($ MSDOS 6.0)
 11025                                  	;mov	al,[es:di+1Fh]
 11026 0000260A 268A451F                	MOV	AL,[ES:DI+SF_ENTRY.sf_dirpos] ; location in sector
 11027                                  	;mov	[si+1Fh],al
 11028 0000260E 88441F                  	MOV	[SI+fcb_nsl_dirpos],AL
 11029                                  	;mov	ax,[es:di+0Bh]
 11030 00002611 268B450B                	MOV	AX,[ES:DI+SF_ENTRY.sf_firclus] ; first cluster
 11031                                  	;mov	[si+1Bh],ax
 11032 00002615 89441B                  	MOV	[SI+fcb_nsl_firclus],AX
 11033 00002618 B300                    	MOV	BL,0
 11034                                  
 11035                                  	; Create the bits field from the dirty/device bits of the flags word 
 11036                                  	; and the mode byte
 11037                                  
 11038                                  SetFCBBits:
 11039                                  	;mov	ax,[es:di+5]
 11040 0000261A 268B4505                	MOV	AX,[ES:DI+SF_ENTRY.sf_flags]
 11041 0000261E 24C0                    	AND	AL,0C0h 		; mask off drive bits
 11042                                  	;or	al,[es:di+2]
 11043 00002620 260A4502                	OR	AL,[ES:DI+SF_ENTRY.sf_mode] ; stick in open mode
 11044                                  	;mov	[si+1Ah], al
 11045 00002624 88441A                  	MOV	[SI+fcb_nsl_bits],AL	; save dirty info
 11046                                  
 11047                                  	; MSDOS 6.0
 11048                                  	; SR;
 11049                                  	; Check if we came here for local file or device. If for local file, 
 11050                                  	; skip setting of SFT index
 11051                                  	;
 11052                                  	;or	bl,bl
 11053                                  	;jz	short SaveNoSFN		; do not save SFN if local file
 11054                                  
 11055 00002627 EB17                    	JMP	short SaveSFN 		; go and save SFN
 11056                                  
 11057                                  	; Save no sharing local device information
 11058                                  
 11059                                  SaveNoShareDev:
 11060                                  	;mov	ax,[es:di+7]
 11061 00002629 268B4507                	MOV	AX,[ES:DI+SF_ENTRY.sf_devptr]
 11062                                  	;mov	[si+1Ah],ax
 11063 0000262D 89441A                  	MOV	[SI+fcb_nsld_drvptr],AX
 11064                                  	;mov	ax,[es:di+9]
 11065 00002630 268B4509                	MOV	AX,[ES:DI+SF_ENTRY.sf_devptr+2]
 11066 00002634 89441C                  	MOV	[SI+fcb_nsld_drvptr+2],AX
 11067                                  	;mov	bl,40h
 11068 00002637 B340                    	MOV	BL,FCBDEVICE
 11069 00002639 EBDF                    	JMP	SetFCBBits		; go and save SFN
 11070                                  
 11071                                  SaveShare:
 11072                                  	;ENDIF
 11073                                  ;
 11074                                  ;----- In share support -----
 11075                                  ;
 11076                                  	;call	far [ss:ShSave]
 11077 0000263B 36FF1E[8400]            	Call	far [ss:JShare+(10*4)] ; 10 = ShSave ; SS Override
 11078                                  ;
 11079                                  ;----- end in share support -----
 11080                                  ;
 11081                                  SaveSFN:
 11082                                  	; MSDOS 3.3
 11083                                  	;mov	ax,[es:di+5]
 11084                                  	;and	al,3Fh
 11085                                  	;or	al,bl
 11086                                  	;mov	[si+19h],al
 11087                                  
 11088                                  	;lea	ax, [di-6]
 11089 00002640 8D45FA                  	LEA	AX,[DI-SFT.SFTable]
 11090                                  	
 11091                                  	; Adjust for offset to table.
 11092                                  	
 11093 00002643 362B06[4000]            	SUB	AX,[SS:SFTFCB]		; SS override for SftFCB
 11094                                  
 11095 00002648 53                      	push	bx			;bx = FCB type (net/Share or local)
 11096 00002649 B335                    	mov	bl,53
 11097 0000264B B335                    	MOV	BL,SF_ENTRY.size
 11098 0000264D F6F3                    	DIV	BL
 11099 0000264F 884418                  	MOV	[SI+fcb_sfn],AL		; last used SFN
 11100 00002652 5B                      	pop	bx			;restore bx
 11101                                  
 11102                                  SaveNoSFN:
 11103                                  	;mov	ax,[es:di+5]
 11104 00002653 268B4505                	MOV	AX,[ES:DI+SF_ENTRY.sf_flags]
 11105 00002657 243F                    	AND	AL,3Fh			; get real drive
 11106 00002659 08D8                    	OR	AL,BL
 11107                                  	;mov	[si+19h],al
 11108 0000265B 884419                  	MOV	[SI+fcb_l_drive],AL
 11109                                  
 11110 0000265E 36A1[1000]              	MOV	AX,[SS:FCBLRU]		; get lru count
 11111 00002662 40                      	INC	AX
 11112                                  	;mov	[es:di+15h],ax
 11113 00002663 26894515                	MOV	[ES:DI+sf_LRU],AX
 11114 00002667 7506                    	JNZ	short SimpleStuff
 11115                                  	
 11116                                  	; lru flag overflowed.	Run through all FCB sfts and adjust:  
 11117                                  	; LRU < 8000H get set to 0.  Others -= 8000h.  This LRU = 8000h
 11118                                  	
 11119                                  	;mov	bx,15h
 11120 00002669 BB1500                  	MOV	BX,SF_ENTRY.sf_position
 11121 0000266C E80500                  	call	ResetLRU
 11122                                  
 11123                                  	;	Set new LRU to AX
 11124                                  SimpleStuff:
 11125 0000266F 36A3[1000]              	MOV	[SS:FCBLRU],AX
 11126 00002673 C3                      	retn
 11127                                  
 11128                                  ;Break	<ResetLRU - reset overflowed lru counts>
 11129                                  ;----------------------------------------------------------------------------
 11130                                  ;
 11131                                  ;   ResetLRU - during lru updates, we may wrap at 64K.	We must walk the
 11132                                  ;   entire set of SFTs and subtract 8000h from their lru counts and truncate
 11133                                  ;   at 0.
 11134                                  ;
 11135                                  ;   Inputs:	BX is offset into SFT field where lru firld is kept
 11136                                  ;		ES:DI point to SFT currently being updated
 11137                                  ;   Outputs:	All FCB SFTs have their lru fields truncated
 11138                                  ;		AX has 8000h
 11139                                  ;   Registers modified: none
 11140                                  ;
 11141                                  ;----------------------------------------------------------------------------
 11142                                  ;
 11143                                  
 11144                                  ResetLRU:
 11145                                  
 11146                                  	; ResetLRU is only called from fcbio.asm. So SS can be assumed to be 
 11147                                  	; DOSDATA
 11148                                  
 11149 00002674 B80080                  	MOV	AX,8000h
 11150 00002677 06                      	push	es
 11151 00002678 57                      	push	di
 11152 00002679 2EC43E[4000]            	LES	DI,[CS:SFTFCB]		; get pointer to head
 11153                                  	;mov	cx,[es:di+4]
 11154 0000267E 268B4D04                	MOV	CX,[ES:DI+SFT.SFCount]
 11155                                  	;lea	di,[di+6]
 11156 00002682 8D7D06                  	LEA	DI,[DI+SFT.SFTable] 	; point at table
 11157                                  ovScan:
 11158 00002685 262901                  	SUB	[ES:DI+BX],AX		; decrement lru count
 11159 00002688 7703                    	JA	short ovLoop
 11160 0000268A 268901                  	MOV	[ES:DI+BX],AX		; truncate at 0
 11161                                  ovLoop:
 11162                                  	;add	di,53
 11163 0000268D 83C735                  	ADD	DI,SF_ENTRY.size	; advance to next
 11164 00002690 E2F3                    	LOOP	ovScan
 11165 00002692 5F                      	pop	di
 11166 00002693 07                      	pop	es
 11167 00002694 268901                  	MOV	[ES:DI+BX],AX
 11168 00002697 C3                      	retn
 11169                                  
 11170                                  ;IF  0  ; We dont need this routine any more.
 11171                                  
 11172                                  ;Break	<SetOpenAge - update the open age of a SFT>
 11173                                  ;----------------------------------------------------------------------------
 11174                                  ;
 11175                                  ;   SetOpenAge - In order to maintain the first N open files in the FCB cache,
 11176                                  ;   we keep the 'open age' or an LRU count based on opens.  We update the
 11177                                  ;   count here and fill in the appropriate field.
 11178                                  ;
 11179                                  ;   Inputs:	ES:DI point to SFT
 11180                                  ;   Outputs:	ES:DI has the open age field filled in.
 11181                                  ;		If open age has wraparound, we will have subtracted 8000h
 11182                                  ;		    from all open ages.
 11183                                  ;   Registers modified: AX
 11184                                  ;
 11185                                  ;----------------------------------------------------------------------------
 11186                                  ;
 11187                                  
 11188                                  SetOpenAge:
 11189                                  
 11190                                  	; 20/07/2018 - Retro DOS v3.0
 11191                                  	; MSDOS 3.3 - IBMDOS.COM, Offset 2597h 
 11192                                  	; (& MSDOS 6.0, FCBIO.ASM)
 11193                                  
 11194                                  	; SetOpenAge is called from fcbio2.asm. SS can be assumed to be valid.
 11195                                  
 11196 00002698 2EA1[1200]              	MOV	AX,[CS:OpenLRU]	; SS override
 11197 0000269C 40                      	INC	AX
 11198                                  	;mov	[es:di+17h],ax
 11199 0000269D 26894517                	MOV	[ES:DI+sf_OpenAge],AX
 11200 000026A1 7506                    	JNZ	short SetDone
 11201                                  	;mov	bx,17h
 11202 000026A3 BB1700                  	MOV	BX,SF_ENTRY.sf_position+2 ; mov bx,sf_OpenAge
 11203 000026A6 E8CBFF                  	call	ResetLRU
 11204                                  SetDone:
 11205 000026A9 2EA3[1200]              	MOV	[CS:OpenLRU],AX
 11206 000026AD C3                      	retn
 11207                                  
 11208                                  ;ENDIF	; SetOpenAge no longer needed
 11209                                  
 11210                                  
 11211                                  ; 21/07/2018 - Retro DOS v3.0
 11212                                  
 11213                                  ; LRUFCB for MSDOS 3.3 !
 11214                                  
 11215                                  ;Break	<LRUFCB - perform LRU on FCB sfts>
 11216                                  ;----------------------------------------------------------------------------
 11217                                  ;
 11218                                  ;   LRUFCB - find LRU fcb in cache.  Set ThisSFT and return it.  We preserve
 11219                                  ;	the first keepcount sfts if they are network sfts or if sharing is
 11220                                  ;	loaded.  If carry is set then NO BLASTING is NECESSARY.
 11221                                  ;
 11222                                  ;   Inputs:	none
 11223                                  ;   Outputs:	ES:DI point to SFT
 11224                                  ;		ThisSFT points to SFT
 11225                                  ;		SFT is zeroed
 11226                                  ;		Carry set of closes failed
 11227                                  ;   Registers modified: none
 11228                                  ;
 11229                                  ;----------------------------------------------------------------------------
 11230                                  ;
 11231                                  
 11232                                  ; MSDOS 6.0
 11233                                  ;IF 0	; rewritten this routine
 11234                                  
 11235                                  LRUFCB: ; MSDOS 3.3 - IBMDOS.COM (1987) - Offset 25ADh
 11236 000026AE E847EF                  	call	save_world
 11237                                  	
 11238                                  ; Find nth oldest NET/SHARE FCB.  We want to find its age for the second scan
 11239                                  ; to find the lease recently used one that is younger than the open age.  We
 11240                                  ; operate be scanning the list n times finding the least age that is greater
 11241                                  ; or equal to the previous minimum age.
 11242                                  ;
 11243                                  ;   BP is the count of times we need to go through this loop.
 11244                                  ;   AX is the current acceptable minimum age to consider
 11245                                  ;
 11246 000026B1 2E8B2E[4400]            	mov	bp,[CS:KEEPCOUNT]	; k = keepcount;
 11247 000026B6 31C0                    	XOR	AX,AX			; low = 0;
 11248                                  ;
 11249                                  ; If we've scanned the table n times, then we are done.
 11250                                  ;
 11251                                  lru1:
 11252 000026B8 83FD00                  	CMP	bp,0			; while (k--) {
 11253 000026BB 7451                    	JZ	short lru75
 11254 000026BD 4D                      	DEC	bp
 11255                                  ;
 11256                                  ; Set up for scan.
 11257                                  ;
 11258                                  ;   AX is the minimum age for consideration
 11259                                  ;   BX is the minimum age found during the scan
 11260                                  ;   SI is the position of the entry that corresponds to BX
 11261                                  ;
 11262 000026BE BBFFFF                  	MOV	BX,-1			;     min = 0xffff;
 11263 000026C1 89DE                    	MOV	si,BX			;     pos = 0xffff;
 11264 000026C3 2EC43E[4000]            	LES	DI,[CS:SFTFCB]		;     for (CX=FCBCount; CX>0; CX--)
 11265                                  	;mov	cx,[es:di+4]
 11266 000026C8 268B4D04                	MOV	CX,[ES:DI+SFT.SFCount]
 11267                                  	;lea	di,[di+6]
 11268 000026CC 8D7D06                  	LEA	DI,[DI+SFT.SFTable]
 11269                                  ;
 11270                                  ; Innermost loop.  If the current entry is free, then we are done.  Or, if the
 11271                                  ; current entry is busy (indicating a previous aborted allocation), then we
 11272                                  ; are done.  In both cases, we use the found entry.
 11273                                  ;
 11274                                  lru2:
 11275 000026CF 26833D00                	cmp	word [es:di],0
 11276                                  	;cmp	word [es:di+SF_ENTRY.sf_ref_count],0
 11277 000026D3 7406                    	jz	short lru25
 11278                                  	;cmp	word [es:di],-1
 11279                                  	;cmp	word [es:di+SFT_ENTRY.sf_ref_count],sf_busy
 11280 000026D5 26833DFF                	cmp	word [es:di],sf_busy
 11281 000026D9 7504                    	jnz	short lru3
 11282                                  ;
 11283                                  ; The entry is usable without further scan.  Go and use it.
 11284                                  ;
 11285                                  lru25:
 11286 000026DB 89FE                    	MOV	si,DI			;	      pos = i;
 11287 000026DD EB69                    	JMP	short lru11		;	      goto got;
 11288                                  ;
 11289                                  ; See if the entry is for the network or for the sharer.
 11290                                  ;
 11291                                  ;  If for the sharer or network then
 11292                                  ;	if the age < current minimum AND >= allowed minimum then
 11293                                  ;	    this entry becomes current minimum
 11294                                  ;
 11295                                  lru3:
 11296                                  	;test	word [es:di+5],8000h
 11297 000026DF 26F745050080            	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet 
 11298                                  					;	  if (!net[i]
 11299 000026E5 7505                    	JNZ	short lru35
 11300                                  ;if installed
 11301 000026E7 E83B4C                  	call	CheckShare		;		&& !sharing)
 11302 000026EA 7410                    	JZ	short lru5		;	  else
 11303                                  ;ENDIF
 11304                                  ;
 11305                                  ; This SFT is for the net or is for the sharer.  See if it less than the
 11306                                  ; current minimum.
 11307                                  ;
 11308                                  lru35:
 11309                                  	;mov	dx,[es:di+17h]
 11310 000026EC 268B5517                	MOV	DX,[ES:DI+sf_OpenAge]
 11311 000026F0 39C2                    	CMP	DX,AX			;	  if (age[i] >= low &&
 11312 000026F2 7208                    	JB	short lru5
 11313 000026F4 39DA                    	CMP	DX,BX
 11314 000026F6 7304                    	JAE	short lru5		;	      age[i] < min) {
 11315                                  ;
 11316                                  ; entry is new minimum.  Remember his age.
 11317                                  ;
 11318 000026F8 89D3                    	mov	bx,DX			;	      min = age[i];
 11319 000026FA 89FE                    	mov	si,di			;	      pos = i;
 11320                                  ;
 11321                                  ; End of loop.	gp back for more
 11322                                  ;
 11323                                  lru5:
 11324                                  	;add	di,53
 11325 000026FC 83C735                  	add	di,SF_ENTRY.size
 11326 000026FF E2CE                    	loop	lru2			;	      }
 11327                                  ;
 11328                                  ; The scan is complete.  If we have successfully found a new minimum (pos != -1)
 11329                                  ; set then threshold value to this new minimum + 1.  Otherwise, the scan is
 11330                                  ; complete.  Go find LRU.
 11331                                  ;
 11332                                  lru6:	
 11333 00002701 83FEFF                  	cmp	si,-1			; position not -1?
 11334 00002704 7408                    	jz	short lru75		; no, done with everything
 11335 00002706 8D4701                  	lea	ax,[bx+1]		; set new threshold age
 11336 00002709 EBAD                    	jmp	short lru1		; go and loop for more
 11337                                  lru65:	
 11338 0000270B F9                      	stc
 11339 0000270C EB70                    	jmp	short LRUDead		;	  return -1;
 11340                                  ;
 11341                                  ; Main loop is done.  We have AX being the age+1 of the nth oldest sharer or
 11342                                  ; network entry.  We now make a second pass through to find the LRU entry
 11343                                  ; that is local-no-share or has age >= AX
 11344                                  ;
 11345                                  lru75:
 11346 0000270E BBFFFF                  	mov	bx,-1			; min = 0xffff;
 11347 00002711 89DE                    	mov	si,bx			; pos = 0xffff;
 11348 00002713 2EC43E[4000]            	LES	DI,[CS:SFTFCB]		; for (CX=FCBCount; CX>0; CX--)
 11349                                  	;mov	cx,[es:di+4]
 11350 00002718 268B4D04                	MOV	CX,[ES:DI+SFT.SFCount]
 11351                                  	;lea	di,[di+6]
 11352 0000271C 8D7D06                  	LEA	DI,[DI+SFT.SFTable]
 11353                                  ;
 11354                                  ; If this is is local-no-share then go check for LRU else if age >= threshold
 11355                                  ; then check for lru.
 11356                                  ;
 11357                                  lru8:
 11358                                  	;test	word [es:di+5],8000h
 11359 0000271F 26F745050080            	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 11360 00002725 7505                    	jnz	short lru85		; is for network, go check age
 11361 00002727 E8FB4B                  	call	CheckShare		; sharer here?
 11362 0000272A 7406                    	jz	short lru86		; no, go check lru
 11363                                  ;
 11364                                  ; Network or sharer.  Check age
 11365                                  ;
 11366                                  lru85:
 11367                                  	;cmp	[es:di+17h],ax
 11368 0000272C 26394517                	cmp	[es:di+sf_OpenAge],ax
 11369 00002730 720C                    	jb	short lru9		; age is before threshold, skip it
 11370                                  ;
 11371                                  ; Check LRU
 11372                                  ;
 11373                                  lru86:
 11374                                  	;cmp	[es:di+15h],bx
 11375 00002732 26395D15                	cmp	[es:di+sf_LRU],bx	; is LRU less than current LRU?
 11376 00002736 7306                    	jae	short lru9		; no, skip this
 11377 00002738 89FE                    	mov	si,di			; remember position
 11378                                  	;mov	bx,[es:di+15h]
 11379 0000273A 268B5D15                	mov	bx,[es:di+sf_LRU]	; remember new minimum LRU
 11380                                  ;
 11381                                  ; Done with this entry, go back for more.
 11382                                  ;
 11383                                  lru9:
 11384                                  	;add	di, 53
 11385 0000273E 83C735                  	add	di,SF_ENTRY.size
 11386 00002741 E2DC                    	loop	lru8
 11387                                  ;
 11388                                  ; Scan is complete.  If we found NOTHING that satisfied us then we bomb
 11389                                  ; out.	The conditions here are:
 11390                                  ;
 11391                                  ;   No local-no-shares AND all net/share entries are older than threshold
 11392                                  ;
 11393                                  lru10:
 11394 00002743 83FEFF                  	cmp	si,-1			; if no one f
 11395 00002746 74C3                    	jz	short lru65		;     return -1;
 11396                                  lru11:
 11397 00002748 89F7                    	mov	di,si
 11398 0000274A 2E893E[3605]            	MOV	[CS:THISSFT],DI		; set thissft
 11399 0000274F 2E8C06[3805]            	MOV	[CS:THISSFT+2],ES
 11400                                  ;
 11401                                  ; If we have sharing or thisSFT is a net sft, then close it until ref count
 11402                                  ; is 0.
 11403                                  ;
 11404                                  	;test	word [es:di+5],8000h
 11405 00002754 26F745050080            	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 11406 0000275A 7505                    	JNZ	short LRUClose
 11407                                  ;IF INSTALLED
 11408 0000275C E8C64B                  	call	CheckShare
 11409 0000275F 7418                    	JZ	short LRUDone
 11410                                  ;ENDIF
 11411                                  ;
 11412                                  ; Repeat close until ref count is 0
 11413                                  ;
 11414                                  LRUClose:
 11415 00002761 16                      	push	ss
 11416 00002762 1F                      	pop	ds
 11417 00002763 C43E[3605]              	LES	DI,[THISSFT]
 11418 00002767 26833D00                	cmp     word [es:di],0
 11419                                  	;CMP	word [ES:DI+SFT.sf_ref_count],0 ; is ref count still <> 0?
 11420 0000276B 740C                    	JZ	short LRUDone 		; nope, all done
 11421 0000276D E85213                  	call	DOS_CLOSE
 11422 00002770 73EF                    	jnc	short LRUClose		; no error => clean up
 11423                                  	;cmp	al,6
 11424 00002772 3C06                    	cmp	al,error_invalid_handle
 11425 00002774 74EB                    	jz	short LRUClose
 11426 00002776 F9                      	stc
 11427 00002777 EB05                    	JMP	short LRUDead
 11428                                  LRUDone:
 11429 00002779 30C0                    	XOR	AL,AL
 11430 0000277B E8E500                  	call	BlastSFT		; fill SFT with 0 (AL), 'C' cleared
 11431                                  
 11432                                  LRUDead:
 11433 0000277E E864EE                  	call	restore_world
 11434 00002781 2EC43E[3605]             	LES     DI,[CS:THISSFT]
 11435 00002786 7302                    	jnc	short LRUFCB_retn
 11436                                  LRUFCB_err:
 11437                                  	; mov	al, 23h	
 11438 00002788 B023                    	MOV	AL,error_FCB_unavailable
 11439                                  LRUFCB_retn:	
 11440                                  	retn:
 11441                                  
 11442                                  ;ENDIF
 11443                                  
 11444                                  FCBRegen:
 11445                                  	; called from SFTFromFCB. SS already DOSDATA
 11446                                  
 11447                                  	; General data filling. Mode is sf_isFCB + open_for_both, date/time 
 11448                                  	; we do not fill, size we do no fill, position we do not fill,
 11449                                  	; bit 14 of flags = TRUE, other bits = FALSE
 11450                                  
 11451                                  	;mov	al,[si+19h]
 11452 0000278A 8A4419                  	MOV	AL,[SI+fcb_l_drive]
 11453                                  
 11454                                  	; We discriminate based on the first two bits in the reserved field.
 11455                                  	
 11456                                  	;test	al,80h
 11457 0000278D A880                    	test	AL,FCBSPECIAL		; check for no sharing test
 11458 0000278F 741C                    	JZ	short RegenNoSharing	; yes, go regen from no sharing
 11459                                  
 11460                                  	;
 11461                                  	; The FCB is for a network or a sharing based system.  At this point 
 11462                                  	; we have already closed the SFT for this guy and reconnection is 
 11463                                  	; impossible.
 11464                                  	;
 11465                                  	; Remember that he may have given us a FCB with bogus information in
 11466                                  	; it. Check to see if sharing is present or if the redir is present.
 11467                                  	; If either is around, presume that we have cycled out the FCB and 
 11468                                  	; give the hard error. Otherwise, just return with carry set.
 11469                                  	;
 11470                                  
 11471 00002791 E8914B                  	call	CheckShare		; test for sharer
 11472 00002794 7509                    	JNZ	short RegenFail		; yep, fail this.
 11473                                  	;mov	ax,1100h
 11474 00002796 B80011                  	MOV	AX,MultNET<<8		; install check on multnet
 11475 00002799 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - INSTALLATION CHECK
 11476                                  			; Return: AL = 00h  not installed, OK to install
 11477                                  			; 01h  not installed, not OK to install
 11478                                  			; FFh  installed
 11479 0000279B 08C0                    	OR	AL,AL			; is it there?
 11480 0000279D 740C                    	JZ	short RegenDead		; no, just fail the operation
 11481                                  RegenFail:
 11482 0000279F 2EA1[E602]              	MOV     AX,[CS:USER_IN_AX]	; SS override
 11483                                  	;cmp	ah,10h
 11484 000027A3 80FC10                  	cmp	AH,FCB_CLOSE
 11485 000027A6 7403                    	jz	short RegenDead
 11486 000027A8 E8C701                  	call	FCBHardErr		; massive hard error.
 11487                                  RegenDead:
 11488 000027AB F9                      	STC				; carry set
 11489                                  FCBRegen_retn:
 11490 000027AC C3                      	retn
 11491                                  
 11492                                  	;
 11493                                  	; Local FCB without sharing. Check to see if sharing is loaded. If 
 11494                                  	; so fail the operation.
 11495                                  	;
 11496                                  RegenNoSharing:
 11497 000027AD E8754B                  	call	CheckShare		; Sharing around?
 11498 000027B0 75ED                    	JNZ	short RegenFail
 11499                                  	
 11500                                  	; Find an SFT for this guy.
 11501                                  	
 11502                                  	; MSDOS 6.0
 11503                                  	;push	ax
 11504                                  	;mov	al,0			;indicate it is a regen operation
 11505                                  	;call	LRUFCB
 11506                                  	;pop	ax
 11507                                  	;jc	short FCBRegen_retn
 11508                                  
 11509                                  	; MSDOS 3.3
 11510 000027B2 E8F9FE                  	call	LRUFCB
 11511 000027B5 72F5                    	jc	short FCBRegen_retn
 11512                                  
 11513                                  	;mov	word [es:di+2],8002h
 11514 000027B7 26C745020280            	MOV	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB+open_for_both+SHARING_COMPAT
 11515 000027BD 243F                    	AND	AL,3Fh			; get drive number for flags
 11516 000027BF 98                      	CBW
 11517                                  	;or	ax,4000h
 11518 000027C0 0D0040                  	OR	AX,sf_close_nodate	; normal FCB operation
 11519                                  
 11520                                  	;
 11521                                  	; The bits field consists of the upper two bits (dirty and device) 
 11522                                  	; from the SFT and the low 4 bits from the open mode.
 11523                                  	;
 11524                                  
 11525                                  	;mov	cl,[si+1Ah]
 11526 000027C3 8A4C1A                  	MOV	CL,[SI+fcb_nsl_bits]	; stick in dirty bits.
 11527 000027C6 88CD                    	MOV	CH,CL
 11528 000027C8 80E5C0                  	AND	CH,0C0h 		; mask off the dirty/device bits
 11529 000027CB 08E8                    	OR	AL,CH
 11530                                  	;and	cl,0Fh
 11531 000027CD 80E10F                  	AND	CL,access_mask		; get the mode bits
 11532                                  	;mov	[es:di+2],cl
 11533 000027D0 26884D02                	MOV	[ES:DI+SF_ENTRY.sf_mode],CL
 11534                                  	;mov	[es:di+5],ax
 11535 000027D4 26894505                	MOV	[ES:DI+SF_ENTRY.sf_flags],AX ; initial flags
 11536 000027D8 2EA1[E802]              	MOV     AX,[CS:PROC_ID]		; SS override
 11537                                  	;mov	[es:di+31h],ax
 11538 000027DC 26894531                	MOV	[ES:DI+SF_ENTRY.sf_PID],AX
 11539 000027E0 1E                      	push	ds
 11540 000027E1 56                      	push	si
 11541 000027E2 06                      	push	es
 11542 000027E3 57                      	push	di
 11543 000027E4 16                      	push	ss
 11544 000027E5 07                      	pop	es
 11545 000027E6 BF[E604]                	MOV	DI,NAME1		; NAME1 is in DOSDATA
 11546                                  
 11547 000027E9 B90800                  	MOV	CX,8
 11548 000027EC 46                      	INC	SI			; Skip past drive byte to name in FCB
 11549                                  
 11550                                  	; MSDOS 6.0
 11551                                  	;call	RegenCopyName		;copy the name to NAME1
 11552                                  
 11553                                  	; MSDOS 3.3
 11554                                  RegenCopyName:
 11555 000027ED AC                      	lodsb
 11556 000027EE E81F2E                  	call	UCase
 11557 000027F1 AA                      	stosb
 11558 000027F2 E2F9                    	loop	RegenCopyName
 11559                                  
 11560 000027F4 16                      	push	ss	; SS is DOSDATA
 11561 000027F5 1F                      	pop	ds
 11562                                  
 11563                                  	;mov	byte [ATTRIB],16h
 11564 000027F6 C606[0605]16            	MOV	byte [ATTRIB],attr_hidden+attr_system+attr_directory
 11565                                  					; Must set this to something interesting
 11566                                  					; to call DEVNAME.
 11567 000027FB E8E622                  	call	DEVNAME 		; check for device
 11568 000027FE 5E                      	pop	si
 11569 000027FF 07                      	pop	es
 11570 00002800 5E                      	pop	si
 11571 00002801 1F                      	pop	ds
 11572 00002802 7219                    	JC	short RegenFileNoSharing ; not found on device list => file
 11573                                  
 11574                                  	;
 11575                                  	; Device found.  We can ignore disk-specific info
 11576                                  	;
 11577                                  
 11578                                  	;mov	[es:di+5],bh
 11579 00002804 26887D05                	MOV	[ES:DI+SF_ENTRY.sf_flags],BH ; device parms
 11580                                  	;mov	byte [es:di+4],0
 11581 00002808 26C6450400              	MOV	byte [ES:DI+SF_ENTRY.sf_attr],0 ; attribute
 11582                                  					; SS override
 11583 0000280D 2EC536[3205]            	LDS	SI,[CS:DEVPT]		; get device driver
 11584                                  	;mov	[es:di+7],si
 11585 00002812 26897507                	MOV	[ES:DI+SF_ENTRY.sf_devptr],SI
 11586                                  	;mov	[es:di+9],ds
 11587 00002816 268C5D09                	MOV	[ES:DI+SF_ENTRY.sf_devptr+2],DS
 11588 0000281A C3                      	retn				; carry is clear
 11589                                  
 11590                                  RegenDeadJ:
 11591 0000281B EB8E                    	JMP	RegenDead
 11592                                  
 11593                                  	;
 11594                                  	; File found.  Just copy in the remaining pieces.
 11595                                  	;
 11596                                  
 11597                                  RegenFileNoSharing:
 11598                                  	;mov	ax,[es:di+5]
 11599 0000281D 268B4505                	MOV	AX,[ES:DI+SF_ENTRY.sf_flags]
 11600 00002821 83E03F                  	AND	AX,03Fh
 11601 00002824 1E                      	push	ds
 11602 00002825 56                      	push	si
 11603 00002826 E87D40                  	call	FIND_DPB
 11604                                  	;mov	[es:di+7],si
 11605 00002829 26897507                	MOV	[ES:DI+SF_ENTRY.sf_devptr],SI
 11606                                  	;mov	[es:di+9],ds
 11607 0000282D 268C5D09                	MOV	[ES:DI+SF_ENTRY.sf_devptr+2],DS
 11608 00002831 5E                      	pop	si
 11609 00002832 1F                      	pop	ds
 11610 00002833 72E6                    	jc	short RegenDeadJ	; if find DPB fails, then drive
 11611                                  					; indicator was bogus
 11612                                  	;mov	ax,[si+1Dh]
 11613 00002835 8B441D                  	MOV	AX,[SI+fcb_nsl_dirsec]
 11614                                  	;mov	[es:di+1Dh],ax
 11615 00002838 2689451D                	MOV	[ES:DI+SF_ENTRY.sf_dirsec],AX
 11616                                  
 11617                                  	;MSDOS6.0
 11618                                  	; SR;
 11619                                  	; Update the higher word of the directory sector from the FCB
 11620                                  	;
 11621                                  
 11622                                  	;MOV	word [ES:DI+SF_ENTRY.sf_dirsec+2],0	;AN000;>32mb
 11623                                  
 11624                                  	; SR;
 11625                                  	; Extract the read-only and archive bits from the top 2 bits of the sector
 11626                                  	; number
 11627                                  	;
 11628                                  
 11629                                  	;mov	al,[si+fcb_sfn]
 11630                                  	;and	al,0C0h		;get the 2 attribute bits
 11631                                  	;mov	ah,al
 11632                                  	;rol	ah,1
 11633                                  	;shr	al,1
 11634                                  	;or	al,ah
 11635                                  	;and	al,03Fh		;mask off unused bits
 11636                                  	;mov	[es:di+SF_ENTRY.sf_attr],al
 11637                                  
 11638                                  	;mov	al,[si+fcb_sfn]
 11639                                  	;and	al,03Fh		;mask off top 2 bits -- attr bits
 11640                                  	;sub	ah,ah
 11641                                  	;mov	[es:di+SF_ENTRY.sf_dirsec+2],ax ;update high word
 11642                                  
 11643                                  	; MSDOS 3.3(& MSDOS 6.0)
 11644                                  	;mov	ax,[si+1Bh]
 11645 0000283C 8B441B                  	MOV	AX,[SI+fcb_nsl_firclus]
 11646                                  	;mov	[es:di+0Bh],ax
 11647 0000283F 2689450B                	MOV	[ES:DI+SF_ENTRY.sf_firclus],AX
 11648                                  	;mov	[es:di+1Bh],ax
 11649 00002843 2689451B                	MOV	[ES:DI+SF_ENTRY.sf_lstclus],AX
 11650                                  	;mov	al,[si+1Fh]
 11651 00002847 8A441F                  	MOV	AL,[SI+fcb_nsl_dirpos]
 11652                                  	;mov  	[es:di+1Fh], al
 11653 0000284A 2688451F                	MOV	[ES:DI+SF_ENTRY.sf_dirpos],AL
 11654                                  	;INC	word [ES:DI+SF_ENTRY.sf_ref_count]
 11655 0000284E 26FF05                  	inc	word [ES:DI]		; Increment reference count.
 11656                                  					; Existing FCB entries would be
 11657                                  					; flushed unnecessarily because of
 11658                                  					; check in CheckFCB of the ref_count.
 11659                                  					; July 22/85 - BAS
 11660                                  	;lea	si,[si+1]
 11661 00002851 8D7401                  	LEA	SI,[SI+SYS_FCB.name]
 11662                                  	;lea	di,[di+20h] ; MSDOS 3.3 
 11663 00002854 8D7D20                  	LEA	DI,[DI+SF_ENTRY.sf_name]
 11664                                  	;mov	cx,11
 11665 00002857 B90B00                  	MOV	CX,SYS_FCB.EXTENT-SYS_FCB.name ; 12-1
 11666                                  	
 11667                                  	; 17/05/2019
 11668                                  	; MSDOS 6.0
 11669                                  	;call	RegenCopyName	;copy name to SFT 
 11670                                  	;
 11671                                  	; MSDOS3.3
 11672                                  RegenCopyName2:
 11673 0000285A AC                      	lodsb
 11674 0000285B E8B22D                  	call    UCase
 11675 0000285E AA                      	stosb
 11676 0000285F E2F9                    	loop    RegenCopyName2
 11677                                  
 11678 00002861 F8                      	clc
 11679 00002862 C3                      	retn
 11680                                  
 11681                                  ;**	BlastSFT - FIll SFT with Garbage
 11682                                  ;
 11683                                  ;	BlastSFT is used when an SFT is no longer needed; it's called with
 11684                                  ;	various garbage values to put into the SFT.  I don't know why,
 11685                                  ;	presumably to help with debugging (jgl).  We clear the few fields
 11686                                  ;	necessary to show that the SFT is free after filling it.
 11687                                  ;
 11688                                  ;	ENTRY	(es:di) = address of SFT
 11689                                  ;		(al) = fill character
 11690                                  ;	EXIT	(ax) = -1
 11691                                  ;		'C' clear
 11692                                  ;	USES	AX, CX, Flags
 11693                                  
 11694                                  BlastSFT:
 11695 00002863 57                      	push	di
 11696                                  	;mov	cx,53
 11697 00002864 B93500                  	mov	cx,SF_ENTRY.size
 11698 00002867 F3AA                    	rep	stosb
 11699 00002869 5F                      	pop	di
 11700 0000286A 29C0                    	sub	ax,ax	; 0		; clear 'C'-----------------;
 11701 0000286C 268905                  	mov	[es:di],ax
 11702                                  	;mov	[es:di+SFT_ENTRY.sf_ref_count],ax ; set ref count   ;
 11703                                  	;mov	[es:di+15h],ax
 11704 0000286F 26894515                	mov	[es:di+sf_LRU],ax	; set lru		    ;
 11705 00002873 48                      	dec	ax	; -1					    ;
 11706                                  	;mov	[es:di+17h],ax ; 0FFFFh ; -1
 11707 00002874 26894517                	mov	[es:di+sf_OpenAge],ax	; set open age to -1	    ;
 11708                                  BlastSFT_retn:
 11709 00002878 C3                      	retn				; return with 'C' clear     ;
 11710                                  
 11711                                  
 11712                                  ;Break	<CheckFCB - see if the SFT pointed to by the FCB is still OK>
 11713                                  ;----------------------------------------------------------------------------
 11714                                  ;
 11715                                  ;   CheckFCB - examine an FCB and its contents to see if it needs to be
 11716                                  ;   regenerated.
 11717                                  ;
 11718                                  ;   Inputs:	DS:SI point to FCB (not extended)
 11719                                  ;		AL is SFT index
 11720                                  ;   Outputs:	Carry Set - FCB needs to be regened
 11721                                  ;		Carry clear - FCB is OK. ES:DI point to SFT
 11722                                  ;   Registers modified: AX and BX
 11723                                  ;
 11724                                  ;----------------------------------------------------------------------------
 11725                                  ;
 11726                                  
 11727                                  CheckFCB:
 11728                                  		
 11729                                  	; called from $fcb_open and sftfromfcb. SS already set up to DOSDATA
 11730                                  
 11731                                  	; MSDOS6.0
 11732                                  	; SR;
 11733                                  	; We check if the given FCB is for a local file. If so, we return a 
 11734                                  	; bad SFT status forcing the caller to regenerate the SFT.
 11735                                  
 11736                                  	;test	byte [si+fcb_l_drive],FCBNETWORK|FCBSHARE|FCBDEVICE
 11737                                  	;jz	short BadSFT		;Local file, return bad SFT
 11738                                  
 11739                                  	; MSDOS 3.3 (& MSDOS6.0)
 11740 00002879 2EC43E[4000]            	LES     DI,[CS:SFTFCB]		; SS override
 11741                                  	;cmp	[es:di+4],al
 11742 0000287E 26384504                	CMP	[ES:DI+SFT.SFCount],AL
 11743 00002882 7248                    	JC	short BadSFT
 11744 00002884 B335                    	MOV	BL,SF_ENTRY.size
 11745 00002886 F6E3                    	MUL	BL
 11746                                  	;lea	di,[di+6]
 11747 00002888 8D7D06                  	LEA	DI,[DI+SFT.SFTable]
 11748 0000288B 01C7                    	ADD	DI,AX
 11749 0000288D 2EA1[E802]              	MOV     AX,[CS:PROC_ID]		; SS override
 11750                                  	;cmp	[es:di+31h],ax
 11751 00002891 26394531                	CMP	[ES:DI+SF_ENTRY.sf_PID],AX
 11752 00002895 7535                    	JNZ	short BadSFT		; must match process
 11753 00002897 26833D00                	cmp	word [es:di],0
 11754                                  	;CMP	word [ES:DI+SF_ENTRY.sf_ref_count],0
 11755 0000289B 742F                    	JZ	short BadSFT		; must also be in use
 11756                                  	;mov	al,[si+19h]
 11757 0000289D 8A4419                  	MOV	AL,[SI+fcb_l_drive]
 11758                                  	;test	al,80h
 11759 000028A0 A880                    	test	AL,FCBSPECIAL		; a special FCB?
 11760 000028A2 7443                    	JZ	short CheckNoShare	; No. try local or device
 11761                                  
 11762                                  	; Since we are a special FCB, try NOT to use a bogus test instruction.
 11763                                  	; FCBSHARE is a superset of FCBNETWORK.
 11764                                  
 11765 000028A4 50                      	PUSH	AX
 11766                                  	;and	al,0C0h
 11767 000028A5 24C0                    	AND	AL,FCBMASK
 11768                                  	;cmp	al,0C0h
 11769 000028A7 3CC0                    	CMP	AL,FCBSHARE		; net FCB?
 11770 000028A9 58                      	POP	AX
 11771 000028AA 7522                    	JNZ	short CheckNet		; yes
 11772                                  ;
 11773                                  ;----- In share support -----
 11774                                  ;
 11775                                  	;call	far [cs:jShare+(11*4)]
 11776 000028AC 36FF1E[8800]            	Call    far [ss:JShare+(11*4)] ; 11 = ShChk ; SS Override
 11777 000028B1 7219                    	JC	short BadSFT
 11778 000028B3 EB0A                    	JMP	SHORT CheckD
 11779                                  ;
 11780                                  ;----- End in share support -----
 11781                                  ;
 11782                                  CheckFirClus:
 11783 000028B5 263B5D0B                	cmp     bx,[es:di+0Bh]
 11784 000028B9 263B5D0B                	CMP	BX,[ES:DI+SF_ENTRY.sf_firclus]
 11785 000028BD 750D                    	JNZ	short BadSFT
 11786                                  CheckD: 
 11787 000028BF 243F                    	AND	AL,3Fh
 11788                                  	;mov	ah,[es:di+5]
 11789 000028C1 268A6505                	MOV	AH,[ES:DI+SF_ENTRY.sf_flags]
 11790 000028C5 80E43F                  	AND	AH,3Fh
 11791 000028C8 38C4                    	CMP	AH,AL
 11792 000028CA 74AC                    	jz	short BlastSFT_retn	; carry is clear
 11793                                  BadSFT: 
 11794 000028CC F9                      	STC
 11795 000028CD C3                      	retn				; carry is clear
 11796                                  CheckNet:
 11797                                  ;
 11798                                  ;----- In net support -----
 11799                                  ;
 11800                                  	; MSDOS 6.0
 11801                                  	;MOV	AX,[SI+fcb_netID]	;AN000;IFS.DOS 4.00
 11802                                  	;CMP	AX,[ES:DI+sf_serial_ID]	;AN000;IFS.DOS 4.00
 11803                                  	;JNZ	short BadSFT
 11804                                  
 11805                                  	; MSDOS 3.3
 11806                                  	;mov	ax,[si+1Ah]
 11807 000028CE 8B441A                  	mov	ax,[si+fcb_net_handle]
 11808                                  	;cmp	ax,[es:di+1Dh]
 11809 000028D1 263B451D                	cmp	ax,[ES:DI+SF_ENTRY.sf_dirsec]
 11810 000028D5 75F5                    	jnz	short BadSFT
 11811                                  	;cmp	ax,[es:di+19h]
 11812 000028D7 263B4519                	cmp	ax,[ES:DI+sf_netid]
 11813 000028DB 75EF                    	jnz     short BadSFT
 11814                                  	;mov	ax,[si+1Eh]
 11815 000028DD 8B441E                  	mov	ax,[si+fcb_l_attr]
 11816                                  	;cmp	ax,[es:di+1Bh]
 11817 000028E0 263B451B                	cmp	ax,[es:di+SF_ENTRY.sf_lstclus]
 11818 000028E4 75E6                    	jnz     short BadSFT
 11819                                  ;
 11820                                  ;----- END In net support -----
 11821                                  ;
 11822                                  CheckNet_retn:
 11823 000028E6 C3                      	retn
 11824                                  
 11825                                  CheckNoShare:
 11826                                  	;test	al,40h
 11827 000028E7 A840                    	test	AL,FCBDEVICE		; Device?
 11828 000028E9 753F                    	JNZ	short CheckNoShareDev 	; Yes
 11829                                  
 11830                                  	; MSDOS6.0
 11831                                  	; SR;
 11832                                  	; The code below to match a local FCB with its SFT can no longer be
 11833                                  	; used. We just return a no-match status. This check is done right
 11834                                  	; at the top.
 11835                                  	;
 11836                                  
 11837                                  	; MSDOS 3.3 - IBMDOS.COM - Offset 27EFh
 11838                                  	;mov	bx,[si+1Dh]
 11839 000028EB 8B5C1D                  	MOV	BX,[SI+fcb_nsl_dirsec]
 11840                                  	;cmp	bx,[es:di+1Dh]
 11841 000028EE 263B5D1D                	cmp	bx,[ES:DI+SF_ENTRY.sf_dirsec]
 11842 000028F2 75D8                    	jnz	short BadSFT
 11843                                  	;mov	bl,[si+1Fh]
 11844 000028F4 8A5C1F                  	MOV	bl,[SI+fcb_nsl_dirpos]
 11845                                  	;cmp	bl,[es:di+1Fh]
 11846 000028F7 263A5D1F                	cmp	bl,[ES:DI+SF_ENTRY.sf_dirpos]
 11847 000028FB 75CF                    	jnz     short BadSFT
 11848                                  	;mov	bl,[si+1Ah]
 11849 000028FD 8A5C1A                  	MOV	bl,[SI+fcb_nsl_bits]
 11850                                  	;mov	bh,[es:di+5]
 11851 00002900 268A7D05                	MOV	bh,[ES:DI+SF_ENTRY.sf_flags]
 11852 00002904 30DF                    	xor     bh,bl
 11853 00002906 80E7C0                  	and     bh,0C0h
 11854 00002909 75C1                    	jnz     short BadSFT
 11855                                  	;xor	bl,[es:di+2]
 11856 0000290B 26325D02                	xor	bl,[ES:DI+SF_ENTRY.sf_mode]
 11857 0000290F 80E30F                  	and     bl,0Fh
 11858 00002912 75B8                    	jnz     short BadSFT
 11859 00002914 57                      	push    di
 11860 00002915 56                      	push    si
 11861                                  	;lea	di,[di+20h]  ; MSDOS 3.3
 11862 00002916 8D7D20                  	LEA	DI,[DI+SF_ENTRY.sf_name]
 11863                                  	;lea	si,[si+1]
 11864 00002919 8D7401                  	LEA	SI,[SI+SYS_FCB.name]
 11865                                  	;mov	cx,11
 11866 0000291C B90B00                  	MOV	CX,SYS_FCB.EXTENT-SYS_FCB.name ; 12-1
 11867 0000291F F3A6                    	repe	cmpsb
 11868 00002921 5E                      	pop     si
 11869 00002922 5F                      	pop     di
 11870 00002923 75A7                    	jnz     short BadSFT
 11871                                  	;mov	bx,[si+1Bh]
 11872 00002925 8B5C1B                  	MOV	bX,[SI+fcb_nsl_firclus]
 11873 00002928 EB8B                    	jmp     short CheckFirClus
 11874                                  
 11875                                  CheckNoShareDev:
 11876                                  	;mov	bx,[si+1Ah]
 11877 0000292A 8B5C1A                  	MOV	BX,[SI+fcb_nsld_drvptr]
 11878                                  	;cmp	bx,[es:di+7]
 11879 0000292D 263B5D07                	CMP	BX,[ES:DI+SF_ENTRY.sf_devptr]
 11880 00002931 7599                    	JNZ	short BadSFT
 11881                                  	;mov	bx,[si+1Ch]
 11882 00002933 8B5C1C                  	MOV	BX,[SI+fcb_nsld_drvptr+2]
 11883                                  	;cmp	bx,[es:di+9]
 11884 00002936 263B5D09                	CMP	BX,[ES:DI+SF_ENTRY.sf_devptr+2]
 11885 0000293A 7590                    	JNZ	short BadSFT
 11886 0000293C EB81                    	JMP	CheckD
 11887                                  
 11888                                  ;Break	<SFTFromFCB - take a FCB and obtain a SFT from it>
 11889                                  ;----------------------------------------------------------------------------
 11890                                  ;
 11891                                  ;   SFTFromFCB - the workhorse of this compatability crap.  Check to see if
 11892                                  ;	the SFT for the FCB is Good.  If so, make ThisSFT point to it.	If not
 11893                                  ;	good, get one from the cache and regenerate it.  Overlay the LRU field
 11894                                  ;	with PID
 11895                                  ;
 11896                                  ;   Inputs:	DS:SI point to FCB
 11897                                  ;   Outputs:	ThisSFT point to appropriate SFT
 11898                                  ;		Carry clear -> OK ES:DI -> SFT
 11899                                  ;		Carry set -> error in ax
 11900                                  ;   Registers modified: ES,DI, AX
 11901                                  ;
 11902                                  ;----------------------------------------------------------------------------
 11903                                  
 11904                                  SFTFromFCB:
 11905                                  
 11906                                  	; called from fcbio and $fcb_close. SS already set up to DOSDATA
 11907                                  
 11908 0000293E 50                      	push	ax
 11909 0000293F 53                      	push	bx
 11910                                  	;mov	al,[si+18h]
 11911 00002940 8A4418                  	MOV	AL,[SI+fcb_sfn] 	; set SFN for check
 11912 00002943 E833FF                  	call	CheckFCB
 11913 00002946 5B                      	pop	bx
 11914 00002947 58                      	pop	ax
 11915 00002948 2E893E[3605]            	MOV	[CS:THISSFT],DI		; SS override
 11916 0000294D 2E8C06[3805]            	MOV	[CS:THISSFT+2],ES
 11917 00002952 730F                    	JNC	short Set_SFT		; no problems, just set thissft
 11918 00002954 E8A1EC                  	call	save_world
 11919 00002957 E830FE                  	call	FCBRegen
 11920 0000295A E888EC                  	call	restore_world		; use macro restore world
 11921 0000295D 2EA1[D202]              	MOV     AX,[CS:EXTERR]		; SS override
 11922 00002961 7283                    	jc	short CheckNet_retn
 11923                                  
 11924                                  Set_SFT: 
 11925 00002963 2EC43E[3605]            	LES     DI,[CS:THISSFT]		; SS override for THISSFT & PROC_ID
 11926 00002968 2EFF36[E802]            	PUSH    word [CS:PROC_ID]	; set process id
 11927                                  	;pop	word [es:di+31h]
 11928 0000296D 268F4531                	POP     word [ES:DI+SF_ENTRY.sf_PID]
 11929 00002971 C3                      	retn				; carry is clear
 11930                                  
 11931                                  ;Break	<FCBHardErr - generate INT 24 for hard errors on FCBS>
 11932                                  ;----------------------------------------------------------------------------
 11933                                  ;
 11934                                  ;   FCBHardErr - signal to a user app that he is trying to use an
 11935                                  ;	unavailable FCB.
 11936                                  ;
 11937                                  ;   Inputs:	none.
 11938                                  ;   Outputs:	none.
 11939                                  ;   Registers modified: all
 11940                                  ;
 11941                                  ;----------------------------------------------------------------------------
 11942                                  ;
 11943                                  
 11944                                  FCBHardErr:
 11945                                  	;mov	ax,23h
 11946 00002972 B82300                  	MOV	AX,error_FCB_unavailable
 11947                                  	;mov	byte [cs:ALLOWED],8
 11948 00002975 2EC606[F702]08          	MOV	byte [CS:ALLOWED],Allowed_FAIL
 11949 0000297B 2EC42E[2405]            	LES	BP,[CS:THISDPB]
 11950 00002980 BF0100                  	MOV	DI,1			; Fake some registers
 11951 00002983 89F9                    	MOV	CX,DI
 11952                                  	;mov	dx,[es:bp+0Bh]
 11953 00002985 268B560B                	MOV	DX,[ES:BP+DPB.FIRST_SECTOR]
 11954 00002989 E8C02E                  	call	HARDERR
 11955 0000298C F9                      	STC
 11956 0000298D C3                      	retn
 11957                                  
 11958                                  ;============================================================================
 11959                                  ; FCBIO2.ASM, MSDOS 6.0, 1991
 11960                                  ;============================================================================
 11961                                  ; 21/07/2018 - Retro DOS v3.0
 11962                                  
 11963                                  ;**	FCBIO2.ASM - Ancient 1.0 1.1 FCB system calls
 11964                                  ;
 11965                                  ;	GetRR
 11966                                  ;	GetExtent
 11967                                  ;	SetExtent
 11968                                  ;	GetExtended
 11969                                  ;	GetRecSize
 11970                                  ;	FCBIO
 11971                                  ;	$FCB_OPEN
 11972                                  ;	$FCB_CREATE
 11973                                  ;	$FCB_RANDOM_WRITE_BLOCK
 11974                                  ;	$FCB_RANDOM_READ_BLOCK
 11975                                  ;	$FCB_SEQ_READ
 11976                                  ;	$FCB_SEQ_WRITE
 11977                                  ;	$FCB_RANDOM_READ
 11978                                  ;	$FCB_RANDOM_WRITE
 11979                                  ;
 11980                                  ;	Revision history:
 11981                                  ;
 11982                                  ;		Created: ARR 4 April 1983
 11983                                  ;			 MZ  6 June  1983 completion of functions
 11984                                  ;			 MZ 15 Dec   1983 Brain damaged programs close FCBs multiple
 11985                                  ;				  times.  Change so successive closes work by
 11986                                  ;				  always returning OK.	Also, detect I/O to
 11987                                  ;				  already closed FCB and return EOF.
 11988                                  ;		 MZ 16 Jan   1984 More braindamage.  Need to separate info
 11989                                  ;				  out of sft into FCB for reconnection
 11990                                  ;
 11991                                  ;	    A000   version 4.00	Jan. 1988
 11992                                  
 11993                                  ; Defintions for FCBOp flags
 11994                                  
 11995                                  RANDOM	equ 2				; random operation
 11996                                  FCBREAD equ 4				; doing a read
 11997                                  BLOCK	equ 8				; doing a block I/O
 11998                                  
 11999                                  ;Break <GetRR - return the random record field in DX:AX>
 12000                                  ;---------------------------------------------------------------------------
 12001                                  ;
 12002                                  ;   GetRR - correctly load DX:AX with the random record field (3 or 4 bytes)
 12003                                  ;	from the FCB pointed to by DS:SI
 12004                                  ;
 12005                                  ;   Inputs:	DS:SI point to an FCB
 12006                                  ;		BX has record size
 12007                                  ;   Outputs:	DX:AX contain the contents of the random record field
 12008                                  ;   Registers modified: none
 12009                                  ;---------------------------------------------------------------------------
 12010                                  
 12011                                  GetRR:
 12012                                  	;mov	ax,[si+21h]
 12013 0000298E 8B4421                  	MOV	AX,[SI+SYS_FCB.RR]	; get low order part
 12014                                  	;mov	dx,[si+23h]
 12015 00002991 8B5423                  	MOV	DX,[SI+SYS_FCB.RR+2]	; get high order part
 12016 00002994 83FB40                  	CMP	BX,64			; ignore MSB of RR if recsiz > 64
 12017 00002997 7202                    	JB	short GetRRBye
 12018 00002999 30F6                    	XOR	DH,DH
 12019                                  GetRRBye:
 12020 0000299B C3                      	retn
 12021                                  
 12022                                  ;Break <GetExtent - retrieve next location for sequential IO>
 12023                                  ;---------------------------------------------------------------------------
 12024                                  ;
 12025                                  ;   GetExtent - Construct the next record to perform I/O from the EXTENT and
 12026                                  ;	NR fields in the FCB.
 12027                                  ;
 12028                                  ;   Inputs:	DS:SI - point to FCB
 12029                                  ;   Outputs:	DX:AX contain the contents of the random record field
 12030                                  ;   Registers modified: none
 12031                                  ;---------------------------------------------------------------------------
 12032                                  
 12033                                  GetExtent:
 12034                                  	;mov	al,[si+20h]
 12035 0000299C 8A4420                  	MOV	AL,[SI+SYS_FCB.NR]	; get low order piece
 12036                                  	;mov	dx,[si+0Ch]
 12037 0000299F 8B540C                  	MOV	DX,[SI+SYS_FCB.EXTENT]	; get high order piece
 12038 000029A2 D0E0                    	SHL	AL,1
 12039 000029A4 D1EA                    	SHR	DX,1
 12040 000029A6 D0D8                    	RCR	AL,1	; move low order bit of DL to high order of AH
 12041 000029A8 88D4                    	MOV	AH,DL
 12042 000029AA 88F2                    	MOV	DL,DH
 12043 000029AC 30F6                    	XOR	DH,DH
 12044 000029AE C3                      	retn
 12045                                  
 12046                                  ;Break <SetExtent - update the extent/NR field>
 12047                                  ;---------------------------------------------------------------------------
 12048                                  ;
 12049                                  ;   SetExtent - change the position of an FCB by filling in the extent/NR
 12050                                  ;	fields
 12051                                  ;
 12052                                  ;   Inputs:	DS:SI point to FCB
 12053                                  ;		DX:AX is a record location in file
 12054                                  ;   Outputs:	Extent/NR fields are filled in
 12055                                  ;   Registers modified: CX
 12056                                  ;---------------------------------------------------------------------------
 12057                                  
 12058                                  SetExtent:
 12059 000029AF 50                      	push	ax
 12060 000029B0 52                      	push	dx
 12061 000029B1 89C1                    	MOV	CX,AX
 12062 000029B3 247F                    	AND	AL,7FH			; next rec field
 12063                                  	;mov	[si+20h],al
 12064 000029B5 884420                  	MOV	[SI+SYS_FCB.NR],AL
 12065 000029B8 80E180                  	AND	CL,80H			; save upper bit
 12066 000029BB D1E1                    	SHL	CX,1
 12067 000029BD D1D2                    	RCL	DX,1			; move high bit of CX to low bit of DX
 12068 000029BF 88E8                    	MOV	AL,CH
 12069 000029C1 88D4                    	MOV	AH,DL
 12070                                  	;mov	[si+0Ch], ax
 12071 000029C3 89440C                  	MOV	[SI+SYS_FCB.EXTENT],AX	; all done
 12072 000029C6 5A                      	pop	dx
 12073 000029C7 58                      	pop	ax
 12074 000029C8 C3                      	retn
 12075                                  
 12076                                  ;Break <GetExtended - find FCB in potential extended fcb>
 12077                                  ;---------------------------------------------------------------------------
 12078                                  ;
 12079                                  ;   GetExtended - Make DS:SI point to FCB from DS:DX
 12080                                  ;
 12081                                  ;   Inputs:	DS:DX point to a possible extended FCB
 12082                                  ;   Outputs:	DS:SI point to the FCB part
 12083                                  ;		zeroflag set if not extended fcb
 12084                                  ;   Registers modified: SI
 12085                                  ;---------------------------------------------------------------------------
 12086                                  
 12087                                  GetExtended:
 12088 000029C9 89D6                    	MOV	SI,DX			; point to Something
 12089 000029CB 803CFF                  	CMP	BYTE [SI],-1		; look for extention
 12090 000029CE 7503                    	JNZ	short GetBye		; not there
 12091 000029D0 83C607                  	ADD	SI,7			; point to FCB
 12092                                  GetBye:
 12093 000029D3 39D6                    	CMP	SI,DX			; set condition codes
 12094                                  getextd_retn:
 12095 000029D5 C3                      	retn
 12096                                  
 12097                                  ;Break <GetRecSize - return in BX the FCB record size>
 12098                                  ;---------------------------------------------------------------------------
 12099                                  ;
 12100                                  ;   GetRecSize - return in BX the record size from the FCB at DS:SI
 12101                                  ;
 12102                                  ;   Inputs:	DS:SI point to a non-extended FCB
 12103                                  ;   Outputs:	BX contains the record size
 12104                                  ;   Registers modified: None
 12105                                  ;---------------------------------------------------------------------------
 12106                                  
 12107                                  GetRecSize:
 12108 000029D6 8B5C0E                  	mov	bx,[si+0Eh]
 12109 000029D9 8B5C0E                  	MOV	BX,[SI+SYS_FCB.RECSIZ]	; get his record size
 12110 000029DC 09DB                    	OR	BX,BX			; is it nul?
 12111 000029DE 74F5                    	jz	short getextd_retn
 12112 000029E0 BB8000                  	MOV	BX,128			; use default size
 12113                                  	;mov	[si+0Eh],bx
 12114 000029E3 895C0E                  	MOV	[SI+SYS_FCB.RECSIZ],BX	; stuff it back
 12115 000029E6 C3                      	retn
 12116                                  
 12117                                  ;BREAK <FCBIO - do internal FCB I/O>
 12118                                  ;---------------------------------------------------------------------------
 12119                                  ;
 12120                                  ;   FCBIO - look at FCBOP and merge all FCB operations into a single routine.
 12121                                  ;
 12122                                  ;   Inputs:	FCBOP flags which operations need to be performed
 12123                                  ;		DS:DX point to FCB
 12124                                  ;		CX may have count of number of records to xfer
 12125                                  ;   Outputs:	AL has error code
 12126                                  ;   Registers modified: all
 12127                                  ;---------------------------------------------------------------------------
 12128                                  
 12129                                  FCBIO:
 12130                                  
 12131                                  FEOF	EQU	1
 12132                                  FTRIM	EQU	2
 12133                                  
 12134                                  %define	FCBErr	byte [bp-1]  ; byte	
 12135                                  %define	cRec	word [bp-3]  ; word	
 12136                                  ;%define RecPos	word [bp-7]  ; dword
 12137                                  %define RecPosL	word [bp-7]  ; word
 12138                                  %define RecPosH	word [bp-5]  ; word
 12139                                  %define	RecSize	word [bp-9]  ; word
 12140                                  ;%define bPos	word [bp-13] ; dword
 12141                                  %define bPosL	word [bp-13] ; word
 12142                                  %define bPosH	word [bp-11] ; word
 12143                                  %define cByte	word [bp-15] ; word	
 12144                                  %define cResult word [bp-17] ; word	
 12145                                  %define	cRecRes	word [bp-19] ; word
 12146                                  %define	FCBOp	byte [bp-20] ; byte
 12147                                  
 12148                                  	;Enter
 12149                                  
 12150 000029E7 55                      	push	bp
 12151 000029E8 89E5                    	mov	bp,sp
 12152 000029EA 83EC14                  	sub	sp,20
 12153                                  	;mov	[bp-20],al
 12154 000029ED 8846EC                  	MOV	FCBOp,AL
 12155                                  	;mov	byte [bp-1],0
 12156 000029F0 C646FF00                	MOV	FCBErr,0		;   FCBErr = 0;
 12157 000029F4 E8D2FF                  	call	GetExtended		;   FCB = GetExtended ();
 12158                                  	;test	byte [bp-20],8
 12159 000029F7 F646EC08                	TEST	FCBOp,BLOCK		;   if ((OP&BLOCK) == 0)
 12160 000029FB 7503                    	JNZ	short GetPos
 12161 000029FD B90100                  	MOV	CX,1			;	cRec = 1;
 12162                                  GetPos:
 12163                                  	;mov	[bp-3],cx
 12164 00002A00 894EFD                  	MOV	cRec,CX 		;*Tail coalesce
 12165 00002A03 E896FF                  	call	GetExtent		;   RecPos = GetExtent ();
 12166 00002A06 E8CDFF                  	call	GetRecSize		;   RecSize = GetRecSize ();
 12167                                  	;mov	[bp-9],bx
 12168 00002A09 895EF7                  	MOV	RecSize,BX
 12169                                  	;test	byte [bp-20],2
 12170 00002A0C F646EC02                	TEST	FCBOp,RANDOM		;   if ((OP&RANDOM) <> 0)
 12171 00002A10 7403                    	JZ	short GetRec
 12172 00002A12 E879FF                  	call	GetRR			;	RecPos = GetRR ();
 12173                                  GetRec:
 12174                                  	;mov	[bp-7],ax
 12175 00002A15 8946F9                  	MOV	RecPosL,AX		;*Tail coalesce
 12176                                  	;mov	[bp-5],dx
 12177 00002A18 8956FB                  	MOV	RecPosH,DX
 12178 00002A1B E891FF                  	call	SetExtent		;   SetExtent (RecPos);
 12179                                  	;mov	ax,[bp-5]
 12180 00002A1E 8B46FB                  	MOV	AX,RecPosH		;   bPos = RecPos * RecSize;
 12181 00002A21 F7E3                    	MUL	BX
 12182 00002A23 89C7                    	MOV	DI,AX
 12183                                  	;mov	ax,[bp-7]
 12184 00002A25 8B46F9                  	MOV	AX,RecPosL
 12185 00002A28 F7E3                    	MUL	BX
 12186 00002A2A 01FA                    	ADD	DX,DI
 12187                                  	;mov	[bp-13],ax
 12188 00002A2C 8946F3                  	MOV	bPosL,AX
 12189                                  	;mov	[bp-11],dx
 12190 00002A2F 8956F5                  	MOV	bPosH,DX
 12191                                  	;mov	ax,[bp-3]
 12192 00002A32 8B46FD                  	MOV	AX,cRec 		;   cByte = cRec * RecSize;
 12193 00002A35 F7E3                    	MUL	BX
 12194                                  	;mov	[bp-15],ax
 12195 00002A37 8946F1                  	MOV	cByte,AX
 12196                                  
 12197                                  ;hkn; 	SS override
 12198 00002A3A 360306[DA02]            	ADD	AX,[SS:DMAADD]		;   if (cByte+DMA > 64K) {
 12199 00002A3F 83D200                  	ADC	DX,0
 12200 00002A42 7419                    	JZ	short DoOper
 12201                                  	;mov	byte [bp-1],2
 12202 00002A44 C646FF02                	MOV	FCBErr,FTRIM		;	FCBErr = FTRIM;
 12203                                  
 12204                                  ;hkn; 	SS override
 12205 00002A48 36A1[DA02]              	MOV	AX,[SS:DMAADD]		;	cRec = (64K-DMA)/RecSize;
 12206 00002A4C F7D8                    	NEG	AX
 12207 00002A4E 7501                    	JNZ	short DoDiv
 12208 00002A50 48                      	DEC	AX
 12209                                  DoDiv:
 12210 00002A51 31D2                    	XOR	DX,DX
 12211 00002A53 F7F3                    	DIV	BX
 12212                                  	;mov	[bp-3],ax
 12213 00002A55 8946FD                  	MOV	cRec,AX
 12214 00002A58 F7E3                    	MUL	BX			;	cByte = cRec * RecSize;
 12215                                  	;mov	[bp-15],ax
 12216 00002A5A 8946F1                  	MOV	cByte,AX		;	}
 12217                                  DoOper:
 12218 00002A5D 31DB                    	XOR	BX,BX
 12219                                  	;mov	[bp-17],bx
 12220 00002A5F 895EEF                  	MOV	cResult,BX		;   cResult = 0;
 12221                                  	;cmp	[bp-15],bx
 12222 00002A62 395EF1                  	CMP	cByte,BX		;   if (cByte <> 0 ||
 12223 00002A65 7506                    	JNZ	short DoGetExt
 12224                                  	;test	byte [bp-1],2
 12225 00002A67 F646FF02                	TEST	FCBErr,FTRIM		;	(FCBErr&FTRIM) == 0) {
 12226                                  	;JZ	short DoGetExt
 12227                                  	;JMP	short SkipOp
 12228 00002A6B 7576                    	jnz	short SkipOp
 12229                                  DoGetExt:
 12230 00002A6D E8CEFE                  	call	SFTFromFCB		;	if (!SFTFromFCB (SFT,FCB))
 12231 00002A70 730F                    	JNC	short ContinueOp
 12232                                  FCBDeath:
 12233 00002A72 E8AAEC                  	call	FCB_RET_ERR		; signal error, map for extended
 12234                                  	;mov	word [bp-19],0
 12235 00002A75 C746ED0000              	MOV	cRecRes,0		; no bytes transferred
 12236                                  	;mov	byte [bp-1],1
 12237 00002A7A C646FF01                	MOV	FCBErr,FEOF		;	    return FTRIM;
 12238 00002A7E E9F000                  	JMP	FCBSave 		; bam!
 12239                                  ContinueOp:
 12240                                  	;mov	di,offset DOS_READ
 12241                                  	;test	byte [bp-14h],4
 12242                                  	;jnz	short DoContext
 12243                                  	;mov	di,DOS_WRITE
 12244                                  
 12245                                  	;mov	ax,[si+10h]
 12246 00002A81 8B4410                  	MOV	AX,[SI+SYS_FCB.FILSIZ]
 12247                                  	;mov	[es:di+11h],ax
 12248 00002A84 26894511                	MOV	[ES:DI+SF_ENTRY.sf_size],AX
 12249                                  	;mov	ax,[si+12h]
 12250 00002A88 8B4412                  	MOV	AX,[SI+SYS_FCB.FILSIZ+2]
 12251                                  	;mov	[es:di+13h],ax
 12252 00002A8B 26894513                	MOV	[ES:DI+SF_ENTRY.sf_size+2],AX
 12253                                  	;mov	ax,[bp-13]
 12254 00002A8F 8B46F3                  	MOV	AX,bPosL
 12255                                  	;mov	dx,[bp-11]
 12256 00002A92 8B56F5                  	MOV	DX,bPosH
 12257                                  	;mov	[es:di+15h],ax
 12258 00002A95 26894515                	MOV	[ES:DI+SF_ENTRY.sf_position],AX
 12259                                  	;xchg	dx,[es:di+17h]
 12260 00002A99 26875517                	XCHG	[ES:DI+SF_ENTRY.sf_position+2],DX
 12261 00002A9D 52                      	PUSH	DX			; save away Open age.
 12262                                  	;mov	cx,[bp-15]
 12263 00002A9E 8B4EF1                  	MOV	CX,cByte		;	cResult =
 12264                                  
 12265                                  ;hkn; DOS_Read is in DOSCODE
 12266 00002AA1 BF[043E]                	MOV	DI,DOS_READ		;	    *(OP&FCBRead ? DOS_Read
 12267                                  	;test	byte [bp-20],4
 12268 00002AA4 F646EC04                	TEST	FCBOp,FCBREAD		;		 : DOS_Write)(cRec);
 12269 00002AA8 7503                    	JNZ	short DoContext
 12270                                  
 12271                                  ;hkn; DOS_Write is in DOSCODE
 12272 00002AAA BF[853F]                	MOV	DI,DOS_WRITE
 12273                                  DoContext:
 12274 00002AAD 55                      	push	bp
 12275 00002AAE 1E                      	push	ds
 12276 00002AAF 56                      	push	si
 12277                                  
 12278                                  ;hkn; SS is DOSDATA
 12279 00002AB0 16                      	push	ss
 12280 00002AB1 1F                      	pop	ds
 12281                                  
 12282                                  ;; Fix for disk full
 12283 00002AB2 FFD7                    	CALL	DI
 12284                                  	
 12285 00002AB4 5E                      	pop	si
 12286 00002AB5 1F                      	pop	ds
 12287 00002AB6 5D                      	pop	bp
 12288 00002AB7 72B9                    	JC	short FCBDeath
 12289                                  	
 12290 00002AB9 36803E[8C0F]00          	CMP	BYTE [SS:DISK_FULL],0	; treat disk full as error
 12291 00002ABF 740A                    	JZ	short NODSKFULL
 12292 00002AC1 36C606[8C0F]00          	MOV	BYTE [SS:DISK_FULL],0	; clear the flag
 12293                                  	;mov	byte [bp-1],1 
 12294 00002AC7 C646FF01                	MOV	FCBErr,FEOF		; set disk full flag
 12295                                  NODSKFULL:
 12296                                  ;; Fix for disk full
 12297                                  	;mov	[bp-17],cx
 12298 00002ACB 894EEF                  	MOV	cResult,CX
 12299 00002ACE E800FB                  	call	SaveFCBInfo		;	SaveFCBInfo (FCB);
 12300                                  	;pop	word [es:di+17h]	
 12301 00002AD1 268F4517                	POP	WORD [ES:DI+SF_ENTRY.sf_position+2] ; restore open age
 12302                                  			       ; (sf_OpenAge = SF_ENTRY.sf_position+2)			
 12303                                  	;mov	ax,[es:di+11h]
 12304 00002AD5 268B4511                	MOV	AX,[ES:DI+SF_ENTRY.sf_size]
 12305                                  	;mov	[si+10h],ax
 12306 00002AD9 894410                  	MOV	[SI+SYS_FCB.FILSIZ],AX
 12307                                  	;mov	ax,[es:di+13h]
 12308 00002ADC 268B4513                	MOV	AX,[ES:DI+SF_ENTRY.sf_size+2]
 12309                                  	;mov	[si+12h],ax
 12310 00002AE0 894412                  	MOV	[SI+SYS_FCB.FILSIZ+2],AX
 12311                                  					;	}
 12312                                  SkipOp:
 12313                                  	;mov	ax,[bp-17]
 12314 00002AE3 8B46EF                  	MOV	AX,cResult		;   cRecRes = cResult / RecSize;
 12315 00002AE6 31D2                    	XOR	DX,DX
 12316                                  	;div	word [bp-9]
 12317 00002AE8 F776F7                  	DIV	RecSize
 12318                                  	;mov	[bp-19],ax
 12319 00002AEB 8946ED                  	MOV	cRecRes,AX
 12320                                  	;add	[bp-7],ax
 12321 00002AEE 0146F9                  	ADD	RecPosL,AX		;   RecPos += cRecResult;
 12322                                  	;adc	word [bp-5],0
 12323 00002AF1 8356FB00                	ADC	RecPosH,0
 12324                                  ;
 12325                                  ; If we have not gotten the expected number of records, we signal an EOF
 12326                                  ; condition.  On input, this is EOF.  On output this is usually disk full.
 12327                                  ; BUT...  Under 2.0 and before, all device output IGNORED this condition.  So
 12328                                  ; do we.
 12329                                  ;
 12330                                  	;cmp	ax,[bp-3]
 12331 00002AF5 3B46FD                  	CMP	AX,cRec 		;   if (cRecRes <> cRec)
 12332 00002AF8 7412                    	JZ	short TryBlank
 12333                                  	;test	byte [bp-20],4
 12334 00002AFA F646EC04                	TEST	FCBOp,FCBREAD		;	if (OP&FCBRead || !DEVICE)
 12335 00002AFE 7508                    	JNZ	short SetEOF
 12336                                  	;test	word [es:di+5],80h
 12337 00002B00 26F745058000            	TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 12338 00002B06 7504                    	JNZ	short TryBlank
 12339                                  SetEOF:
 12340                                  	;mov	byte [bp-1],1
 12341 00002B08 C646FF01                	MOV	FCBErr,FEOF		;	FCBErr = FEOF;
 12342                                  TryBlank:				;
 12343 00002B0C 09D2                    	OR	DX,DX			;   if (cResult%RecSize <> 0) {
 12344 00002B0E 7426                    	JZ	short SetExt
 12345                                  	;add	word [bp-7],1
 12346 00002B10 8346F901                	ADD	RecPosL,1		;	RecPos++;
 12347                                  	;adc	word [bp-5],0
 12348 00002B14 8356FB00                	ADC	RecPosH,0
 12349                                  	;test	byte [bp-20],4
 12350 00002B18 F646EC04                	TEST	FCBOp,FCBREAD		;	if(OP&FCBRead) <> 0) {
 12351 00002B1C 7418                    	JZ	short SetExt
 12352                                  	;inc	word [bp-19]
 12353 00002B1E FF46ED                  	INC	cRecRes 		;	cRecRes++;
 12354                                  	;mov	byte [bp-1],3
 12355 00002B21 C646FF03                	MOV	FCBErr,FTRIM+FEOF	;	FCBErr = FTRIM | FEOF;
 12356                                  	;mov	cx,[bp-9]
 12357 00002B25 8B4EF7                  	MOV	CX,RecSize		;	Blank (RecSize-cResult%RecSize,
 12358 00002B28 29D1                    	SUB	CX,DX			;	       DMA+cResult);
 12359 00002B2A 30C0                    	XOR	AL,AL
 12360                                  ;hkn; 	SS override
 12361 00002B2C 36C43E[DA02]            	les     di,[ss:DMAADD]
 12362                                  	;add	di,[bp-17]
 12363 00002B31 037EEF                  	ADD	DI,cResult
 12364 00002B34 F3AA                    	REP	STOSB			;   }	}
 12365                                  SetExt:
 12366                                  	;mov	dx,[bp-5]
 12367 00002B36 8B56FB                  	MOV	DX,RecPosH
 12368                                  	;mov	ax,[bp-7]
 12369 00002B39 8B46F9                  	MOV	AX,RecPosL
 12370                                  	;test	byte [bp-20],2
 12371 00002B3C F646EC02                	TEST	FCBOp,RANDOM		;   if ((OP&Random) == 0 ||
 12372 00002B40 7406                    	JZ	short DoSetExt
 12373                                  	;test	byte [bp-20],8
 12374 00002B42 F646EC08                	TEST	FCBOp,BLOCK		;	(OP&BLOCK) <> 0)
 12375 00002B46 7403                    	JZ	short TrySetRR
 12376                                  DoSetExt:
 12377 00002B48 E864FE                  	call	SetExtent		;	SetExtent (RecPos, FCB);
 12378                                  TrySetRR:
 12379                                  	;test	byte [bp-20],8
 12380 00002B4B F646EC08                	TEST	FCBOp,BLOCK		;   if ((op&BLOCK) <> 0)
 12381 00002B4F 740F                    	JZ	short TryReturn
 12382                                  	;mov	[si+21h],ax
 12383 00002B51 894421                  	MOV	[SI+SYS_FCB.RR],AX	;	FCB->RR = RecPos;
 12384                                  	;mov	[si+23h],dl
 12385 00002B54 885423                  	MOV	[SI+SYS_FCB.RR+2],DL
 12386                                  	;cmp	word [si+0Eh],64
 12387 00002B57 837C0E40                	CMP	word [SI+SYS_FCB.RECSIZ],64
 12388 00002B5B 7303                    	JAE	short TryReturn
 12389                                  	;mov	[si+24h],dh
 12390 00002B5D 887424                  	MOV	[SI+SYS_FCB.RR+2+1],DH	; Set 4th byte only if record size < 64
 12391                                  TryReturn: 
 12392                                  	;test	byte [bp-20],4
 12393 00002B60 F646EC04                	TEST	FCBOp,FCBREAD		;   if (!(FCBOP & FCBREAD)) {
 12394 00002B64 750B                    	JNZ	short FCBSave
 12395 00002B66 1E                      	push	ds			;	FCB->FDate = date;
 12396 00002B67 E84FED                  	call	DATE16			;	FCB->FTime = time;
 12397 00002B6A 1F                      	pop	ds
 12398                                  	;mov	[si+14h],ax
 12399 00002B6B 894414                  	MOV	[SI+SYS_FCB.FDATE],AX
 12400                                  	;mov	[si+16h],dx
 12401 00002B6E 895416                  	MOV	[SI+SYS_FCB.FTIME],DX	;	}
 12402                                  FCBSave: 
 12403                                  	;test	byte [bp-20],8
 12404 00002B71 F646EC08                	TEST	FCBOp,BLOCK		;   if ((op&BLOCK) <> 0)
 12405 00002B75 7409                    	jz	short DoReturn
 12406                                  	;mov	cx,[bp-19]
 12407 00002B77 8B4EED                  	MOV	CX,cRecRes		;	user_CX = cRecRes;
 12408 00002B7A E88EEA                  	call    Get_User_Stack
 12409                                  	;mov	[si+4],cx
 12410 00002B7D 894C04                  	MOV	[SI+user_env.user_CX],CX
 12411                                  DoReturn:
 12412                                  	;mov	al,[bp-1]
 12413 00002B80 8A46FF                  	MOV	AL,FCBErr		;   return (FCBERR);
 12414                                  	;Leave	
 12415 00002B83 89EC                    	mov     sp,bp
 12416 00002B85 5D                      	pop     bp
 12417 00002B86 C3                      	retn
 12418                                  
 12419                                  ; 22/07/2018 - Retro DOS v3.0
 12420                                  
 12421                                  ;Break <$FCB_Open - open an old-style FCB>
 12422                                  ;---------------------------------------------------------------------------
 12423                                  ;
 12424                                  ;   $FCB_Open - CPM compatability file open. The user has formatted an FCB
 12425                                  ;	for us and asked to have the rest filled in.
 12426                                  ;
 12427                                  ;   Inputs:	DS:DX point to an unopenned FCB
 12428                                  ;   Outputs:	AL indicates status 0 is ok FF is error
 12429                                  ;		FCB has the following fields filled in:
 12430                                  ;		    Time/Date Extent/NR Size
 12431                                  ;---------------------------------------------------------------------------
 12432                                  
 12433                                  _$FCB_OPEN:			; System call 15
 12434                                  
 12435 00002B87 B80200                  	MOV	AX,SHARING_COMPAT+open_for_both
 12436                                  
 12437                                  ;hkn; DOS_Open is in DOSCODE
 12438 00002B8A B9[8237]                	MOV	CX,DOS_OPEN
 12439                                  ;
 12440                                  ; The following is common code for Creation and openning of FCBs.  AX is
 12441                                  ; either attributes (for create) or open mode (for open)...  DS:DX points to
 12442                                  ; the FCB
 12443                                  ;
 12444                                  DoAccess:
 12445 00002B8D 3E                      	pushj	ds
 12446 00002B8E 52                      	push	dx
 12447 00002B8F 51                      	push	cx
 12448 00002B90 50                      	push	ax			; save FCB pointer away
 12449                                  
 12450                                  ;hkn; 	OpenBuf is in DOSDATA
 12451 00002B91 BF[6003]                	MOV	DI,OPENBUF
 12452 00002B94 E8553E                  	call	TransFCB		; crunch the fcb
 12453 00002B97 58                      	pop	ax
 12454 00002B98 59                      	pop	cx
 12455 00002B99 5A                      	pop	dx
 12456 00002B9A 1F                      	pop	ds			; get fcb
 12457 00002B9B 7303                    	JNC	short FindFCB		; everything seems ok
 12458                                  FCBOpenErr:
 12459                                  ;
 12460                                  ; AL has error code
 12461                                  ;
 12462 00002B9D E97FEB                  	jmp	FCB_RET_ERR
 12463                                  FindFCB:
 12464 00002BA0 E826FE                  	call	GetExtended		; DS:SI will point to FCB
 12465                                  
 12466                                  	; MSDOS 6.0
 12467                                  	;push	ax
 12468                                  	;mov	al,1			;indicate Open/Create operation
 12469                                  	;call	LRUFCB			; get a sft entry (no error)
 12470                                  	;pop	ax
 12471                                  	;jc	short HardMessage
 12472                                  	
 12473                                  	; MSDOS 3.3
 12474 00002BA3 E808FB                  	call	LRUFCB
 12475 00002BA6 722A                    	JC	short HardMessage
 12476                                  
 12477                                  	;mov	word [es:di+2],8000h
 12478 00002BA8 26C745020080            	mov	word [es:di+SF_ENTRY.sf_mode],sf_isFCB
 12479 00002BAE 1E                      	push	ds
 12480 00002BAF 56                      	push	si
 12481 00002BB0 53                      	push	bx			; save fcb pointer
 12482 00002BB1 89CE                    	MOV	SI,CX
 12483                                  
 12484                                  ;hkn; SS is DOSDATA
 12485 00002BB3 16                      	push	ss
 12486 00002BB4 1F                      	pop	ds			; let DOS_Open see variables
 12487 00002BB5 FFD6                    	CALL	SI			; go open the file
 12488 00002BB7 5B                      	pop	bx
 12489 00002BB8 5E                      	pop	si
 12490 00002BB9 1F                      	pop	ds			; get fcb
 12491                                  
 12492                                  ;hkn; SS override
 12493 00002BBA 36C43E[3605]            	LES	DI,[SS:THISSFT]		; get sf pointer
 12494 00002BBF 7319                    	JNC	short FCBOK		; operation succeeded
 12495                                  failopen:
 12496 00002BC1 50                      	PUSH	AX
 12497 00002BC2 B052                    	MOV	AL,"R"                  ; clear out field (free sft)
 12498 00002BC4 E89CFC                  	call	BlastSFT
 12499 00002BC7 58                      	POP	AX
 12500                                  	;cmp	ax,4
 12501 00002BC8 83F804                  	CMP	AX,error_too_many_open_files
 12502 00002BCB 7405                    	JZ	short HardMessage
 12503                                  	;cmp	ax,24h
 12504 00002BCD 83F824                  	CMP	AX,error_sharing_buffer_exceeded
 12505 00002BD0 7505                    	jnz	short DeadFCB
 12506                                  HardMessage:
 12507 00002BD2 50                      	PUSH	AX
 12508 00002BD3 E89CFD                  	call	FCBHardErr
 12509 00002BD6 58                      	POP	AX
 12510                                  DeadFCB:
 12511 00002BD7 E945EB                  	jmp	FCB_RET_ERR
 12512                                  FCBOK:
 12513                                  	; MSDOS 6.0
 12514                                  	;call	IsSFTNet		       ;AN007;F.C. >32mb  Non Fat file?
 12515                                  	;JNZ	short FCBOK2		       ;AN007;F.C. >32mb  yes
 12516                                  	;call	CheckShare		       ;AN000;F.C. >32mb  share around?
 12517                                  	;JNZ	short FCBOK2		       ;AN000;F.C. >32mb  yes
 12518                                  ;SR;
 12519                                  ; If we reach here, we know we have got a local SFT. Let's update the 
 12520                                  ; LocalSFT variable to reflect this.
 12521                                  ;
 12522                                  	;mov	[cs:LocalSFT],di	;
 12523                                  	;mov	[cs:LocalSFT+2],es; Store the SFT address
 12524                                  ;;SR;
 12525                                  ;; The check below is not valid anymore since we regenerate for media > 32M.
 12526                                  ;;
 12527                                  ;;	CMP	WORD [ES:DI+SF_ENTRY.sf_dirsec+2],0 
 12528                                  ;;					       ;AN000;F.C. >32mb  if dirsec >32mb
 12529                                  ;;	JZ	short FCBOK2		       ;AN000;F.C. >32mb    then error
 12530                                  ;;	MOV	AX,error_sys_comp_not_loaded   ;AN000;F.C. >32mb
 12531                                  ;;	JMP	short failopen		       ;AN000;F.C. >32mb
 12532                                  
 12533                                  FCBOK2:
 12534                                  	; MSDOS 3.3 (& MSDOS 6.0)
 12535 00002BDA 26FF05                  	inc	word [es:di]
 12536                                  	;INC	word [ES:DI+SF_ENTRY.sf_ref_count] ; increment reference count
 12537 00002BDD E8F1F9                  	call	SaveFCBInfo
 12538                                  	; MSDOS 3.3
 12539 00002BE0 E8B5FA                  	call	SetOpenAge
 12540                                  	; MSDOS 3.3 (& MSDOS 6.0)
 12541                                  	;test	word [es:di+5],80h
 12542 00002BE3 26F745058000            	TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 12543 00002BE9 7509                    	JNZ	short FCBNoDrive	; do not munge drive on devices
 12544 00002BEB 8A04                    	MOV	AL,[SI]			; get drive byte
 12545 00002BED E8853D                  	call	GETTHISDRV		; convert
 12546 00002BF0 FEC0                    	INC	AL
 12547 00002BF2 8804                    	MOV	[SI],AL			; stash in good drive letter
 12548                                  FCBNoDrive:
 12549                                  	;mov	word [si+0Eh],128
 12550 00002BF4 C7440E8000              	MOV	word [SI+SYS_FCB.RECSIZ],80h ; stuff in default record size
 12551                                  
 12552                                  	;mov	ax,[es:di+0Dh]
 12553 00002BF9 268B450D                	MOV	AX,[ES:DI+SF_ENTRY.sf_time] ; set time
 12554                                  	;mov	[si+16h],ax
 12555 00002BFD 894416                  	MOV	[SI+SYS_FCB.FTIME],AX
 12556                                  	;mov	ax,[es:di+0Fh]
 12557 00002C00 268B450F                	MOV	AX,[ES:DI+SF_ENTRY.sf_date] ; set date
 12558                                  	;mov	[si+14h],ax
 12559 00002C04 894414                  	MOV	[SI+SYS_FCB.FDATE],AX
 12560                                  	;mov	ax,[es:di+11h]
 12561 00002C07 268B4511                	MOV	AX,[ES:DI+SF_ENTRY.sf_size] ; set sizes
 12562                                  	;mov	[si+10h],ax
 12563 00002C0B 894410                  	MOV	[SI+SYS_FCB.FILSIZ],AX
 12564                                  	;mov	ax,[es:di+13h]
 12565 00002C0E 268B4513                	MOV	AX,[ES:DI+SF_ENTRY.sf_size+2]
 12566                                  	;mov	[si+12h],ax
 12567 00002C12 894412                  	MOV	[SI+SYS_FCB.FILSIZ+2],AX
 12568 00002C15 31C0                    	XOR	AX,AX			; convenient zero
 12569                                  	;mov	[si+0Ch],ax
 12570 00002C17 89440C                  	MOV	[SI+SYS_FCB.EXTENT],AX	; point to beginning of file
 12571                                  ;
 12572                                  ; We must scan the set of FCB SFTs for one that appears to match the current
 12573                                  ; one.	We cheat and use CheckFCB to match the FCBs.
 12574                                  ;
 12575                                  
 12576                                  ;hkn; 	SS override
 12577 00002C1A 36C43E[4000]            	LES	DI,[SS:SFTFCB]		; get the pointer to head of the list
 12578                                  	;mov	ah,[es:di+4]
 12579 00002C1F 268A6504                	MOV	AH,[ES:DI+SFT.SFCount]	; get number of SFTs to scan
 12580                                  OpenScan:
 12581                                  	;cmp	al,[si+18h]
 12582 00002C23 3A4418                  	CMP	AL,[SI+fcb_sfn]		; don't compare ourselves
 12583 00002C26 7407                    	JZ	short SkipCheck
 12584 00002C28 50                      	push	ax			; preserve count
 12585 00002C29 E84DFC                  	call	CheckFCB		; do they match
 12586 00002C2C 58                      	pop	ax			; get count back
 12587 00002C2D 7309                    	JNC	short OpenFound		; found a match!
 12588                                  SkipCheck:
 12589 00002C2F FEC0                    	INC	AL			; advance to next FCB
 12590 00002C31 38E0                    	CMP	AL,AH			; table full?
 12591 00002C33 75EE                    	JNZ	short OpenScan		; no, go for more
 12592                                  OpenDone:
 12593 00002C35 30C0                    	xor	al,al			; return success
 12594 00002C37 C3                      	retn
 12595                                  ;
 12596                                  ; The SFT at ES:DI is the one that is already in use for this FCB. We set the
 12597                                  ; FCB to use this one. We increment its ref count. We do NOT close it at all.
 12598                                  ; Consider:
 12599                                  ;
 12600                                  ;   open (foo)	delete (foo) open (bar)
 12601                                  ;
 12602                                  ; This causes us to recycle (potentially) bar through the same local SFT as
 12603                                  ; foo even though foo is no longer needed; this is due to the server closing
 12604                                  ; foo for us when we delete it. Unfortunately, we cannot see this closure.
 12605                                  ; If we were to CLOSE bar, the server would then close the only reference to
 12606                                  ; bar and subsequent I/O would be lost to the redirector.
 12607                                  ;
 12608                                  ; This gets solved by NOT closing the sft, but zeroing the ref count
 12609                                  ; (effectively freeing the SFT) and informing the sharer (if relevant) that
 12610                                  ; the SFT is no longer in use. Note that the SHARER MUST keep its ref counts
 12611                                  ; around.  This will allow us to access the same file through multiple network
 12612                                  ; connections and NOT prematurely terminate when the ref count on one
 12613                                  ; connection goes to zero.
 12614                                  ;
 12615                                  OpenFound:
 12616                                  	;mov	[si+18h],al
 12617 00002C38 884418                  	MOV	[SI+fcb_sfn],AL 	; assign with this
 12618 00002C3B 26FF05                  	inc	word [es:di]
 12619                                  	;INC	word [ES:DI+SF_ENTRY.sf_ref_count] 
 12620                                  					; remember this new invocation
 12621 00002C3E 36A1[1000]              	MOV	AX,[SS:FCBLRU]		; update LRU counts
 12622                                  	;mov	[es:di+15h],ax
 12623 00002C42 26894515                	MOV	[ES:DI+sf_LRU],AX
 12624                                  ;
 12625                                  ; We have an FCB sft that is now of no use.  We release sharing info and then
 12626                                  ; blast it to prevent other reuse.
 12627                                  ;
 12628 00002C46 16                      	push	ss
 12629 00002C47 1F                      	pop	ds
 12630 00002C48 C43E[3605]              	LES	DI,[THISSFT]
 12631 00002C4C 26FF0D                  	dec	word [es:di]
 12632                                  	;DEC	word [ES:DI+SF_ENTRY.sf_ref_count]
 12633                                  					; free the newly allocated SFT
 12634 00002C4F E80647                  	call	ShareEnd
 12635 00002C52 B043                    	MOV	AL,'C'
 12636 00002C54 E80CFC                  	call	BlastSFT
 12637 00002C57 EBDC                    	JMP	short OpenDone
 12638                                  
 12639                                  ;BREAK	<$FCB_Create - create a new directory entry>
 12640                                  ;----------------------------------------------------------------------------
 12641                                  ;
 12642                                  ;   $FCB_Create - CPM compatability file create. The user has formatted an
 12643                                  ;	FCB for us and asked to have the rest filled in.
 12644                                  ;
 12645                                  ;   Inputs:	DS:DX point to an unopenned FCB
 12646                                  ;   Outputs:	AL indicates status 0 is ok FF is error
 12647                                  ;		FCB has the following fields filled in:
 12648                                  ;		    Time/Date Extent/NR Size
 12649                                  ;----------------------------------------------------------------------------
 12650                                  
 12651                                  _$FCB_CREATE:		; System call 22
 12652                                  
 12653                                  ;hkn; DOS_Create is in DOSCODE
 12654 00002C59 B9[EC36]                	MOV	CX,DOS_CREATE		; routine to call
 12655 00002C5C 31C0                    	XOR	AX,AX			; attributes to create
 12656 00002C5E E868FD                  	call	GetExtended		; get extended FCB
 12657 00002C61 7403                    	JZ	short DoAccessJ		; not an extended FCB
 12658 00002C63 8A44FF                  	MOV	AL,[SI-1]		; get attributes
 12659                                  DoAccessJ:
 12660 00002C66 E924FF                  	JMP	DoAccess		; do dirty work
 12661                                  
 12662                                  ; 22/07/2018 - Retro DOS v3.0
 12663                                  
 12664                                  ;BREAK <$FCB_Random_write_Block - write a block of records to a file >
 12665                                  ;----------------------------------------------------------------------------
 12666                                  ;
 12667                                  ;   $FCB_Random_Write_Block - retrieve a location from the FCB, seek to it
 12668                                  ;	and write a number of blocks from it.
 12669                                  ;
 12670                                  ;   Inputs:	DS:DX point to an FCB
 12671                                  ;   Outputs:	AL = 0 write was successful and the FCB position is updated
 12672                                  ;		AL <> 0 Not enough room on disk for the output
 12673                                  ;
 12674                                  ;----------------------------------------------------------------------------
 12675                                  
 12676                                  _$FCB_RANDOM_WRITE_BLOCK:
 12677                                  	;mov	AL,0Ah	
 12678 00002C69 B00A                    	MOV	AL,RANDOM+BLOCK
 12679 00002C6B E979FD                  	JMP	FCBIO
 12680                                  
 12681                                  ;BREAK <$FCB_Random_Read_Block - read a block of records to a file >
 12682                                  ;----------------------------------------------------------------------------
 12683                                  ;
 12684                                  ;   $FCB_Random_Read_Block - retrieve a location from the FCB, seek to it
 12685                                  ;	and read a number of blocks from it.
 12686                                  ;
 12687                                  ;   Inputs:	DS:DX point to an FCB
 12688                                  ;   Outputs:	AL = error codes defined above
 12689                                  ;
 12690                                  ;----------------------------------------------------------------------------
 12691                                  
 12692                                  _$FCB_RANDOM_READ_BLOCK:
 12693                                  	;mov	AL,0Eh	
 12694 00002C6E B00E                    	MOV	AL,RANDOM+FCBREAD+BLOCK
 12695 00002C70 E974FD                  	JMP	FCBIO
 12696                                  
 12697                                  ;BREAK <$FCB_Seq_Read - read the next record from a file >
 12698                                  ;----------------------------------------------------------------------------
 12699                                  ;
 12700                                  ;   $FCB_Seq_Read - retrieve the next record from an FCB and read it into
 12701                                  ;	memory
 12702                                  ;
 12703                                  ;   Inputs:	DS:DX point to an FCB
 12704                                  ;   Outputs:	AL = error codes defined above
 12705                                  ;
 12706                                  ;----------------------------------------------------------------------------
 12707                                  
 12708                                  _$FCB_SEQ_READ:
 12709                                  	;mov	AL,4	
 12710 00002C73 B004                    	MOV	AL,FCBREAD
 12711 00002C75 E96FFD                  	JMP	FCBIO
 12712                                  
 12713                                  ;BREAK <$FCB_Seq_Write - write the next record to a file >
 12714                                  ;----------------------------------------------------------------------------
 12715                                  ;
 12716                                  ;   $FCB_Seq_Write - retrieve the next record from an FCB and write it to the
 12717                                  ;	file
 12718                                  ;
 12719                                  ;   Inputs:	DS:DX point to an FCB
 12720                                  ;   Outputs:	AL = error codes defined above
 12721                                  ;
 12722                                  ;----------------------------------------------------------------------------
 12723                                  
 12724                                  _$FCB_SEQ_WRITE:
 12725 00002C78 B000                    	MOV	AL,0
 12726 00002C7A E96AFD                  	jmp	FCBIO
 12727                                  
 12728                                  ;BREAK <$FCB_Random_Read - Read a single record from a file >
 12729                                  ;----------------------------------------------------------------------------
 12730                                  ;
 12731                                  ;   $FCB_Random_Read - retrieve a location from the FCB, seek to it and read a
 12732                                  ;	record from it.
 12733                                  ;
 12734                                  ;   Inputs:	DS:DX point to an FCB
 12735                                  ;   Outputs:	AL = error codes defined above
 12736                                  ;
 12737                                  ;----------------------------------------------------------------------------
 12738                                  
 12739                                  _$FCB_RANDOM_READ:
 12740                                  	;mov	AL,6	
 12741 00002C7D B006                    	MOV	AL,RANDOM+FCBREAD
 12742 00002C7F E965FD                  	jmp	FCBIO			; single block
 12743                                  
 12744                                  ;BREAK <$FCB_Random_Write - write a single record to a file >
 12745                                  ;----------------------------------------------------------------------------
 12746                                  ;
 12747                                  ;   $FCB_Random_Write - retrieve a location from the FCB, seek to it and write
 12748                                  ;	a record to it.
 12749                                  ;
 12750                                  ;   Inputs:	DS:DX point to an FCB
 12751                                  ;   Outputs:	AL = error codes defined above
 12752                                  ;
 12753                                  ;----------------------------------------------------------------------------
 12754                                  
 12755                                  _$FCB_RANDOM_WRITE:
 12756                                  	;mov	AL,2	
 12757 00002C82 B002                    	MOV	AL,RANDOM
 12758 00002C84 E960FD                  	jmp	FCBIO
 12759                                  
 12760                                  ;============================================================================
 12761                                  ; SEARCH.ASM, MSDOS 6.0, 1991
 12762                                  ;============================================================================
 12763                                  ; 22/07/2018 - Retro DOS v3.0
 12764                                  
 12765                                  ;**	Search.asm
 12766                                  ;
 12767                                  ;	Directory search system calls.
 12768                                  ;	These will be passed direct text of the pathname from the user. 
 12769                                  ;	They will need to be passed through the macro expander prior to
 12770                                  ;	being sent through the low-level stuff. 
 12771                                  ;	I/O specs are defined in DISPATCH. The system calls are:
 12772                                  ;
 12773                                  ;	$Dir_Search_First	  written
 12774                                  ;	$Dir_Search_Next	  written
 12775                                  ;	$Find_First	  written
 12776                                  ;	$Find_Next		  written
 12777                                  ;	PackName		  written
 12778                                  ;
 12779                                  ;	Modification history:
 12780                                  ;
 12781                                  ;	  Created: ARR 4 April 1983
 12782                                  
 12783                                  ;----------------------------------------------------------------------------
 12784                                  ; Procedure Name : $DIR_SEARCH_FIRST
 12785                                  ;
 12786                                  ; Inputs:
 12787                                  ;	DS:DX Points to unopenned FCB
 12788                                  ; Function:
 12789                                  ;	Directory is searched for first matching entry and the directory
 12790                                  ;	entry is loaded at the disk transfer address
 12791                                  ; Returns:
 12792                                  ;	AL = -1 if no entries matched, otherwise 0
 12793                                  ;----------------------------------------------------------------------------
 12794                                  
 12795                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 2B88h
 12796                                  
 12797                                  _$DIR_SEARCH_FIRST:
 12798 00002C87 368916[3E05]            	MOV	[SS:THISFCB],DX
 12799 00002C8C 368C1E[4005]            	MOV	[SS:THISFCB+2],DS
 12800 00002C91 89D6                    	MOV	SI,DX
 12801 00002C93 803CFF                  	CMP	BYTE [SI],0FFH
 12802 00002C96 7503                    	JNZ	short NORMFCB4
 12803 00002C98 83C607                  	ADD	SI,7			; Point to drive select byte
 12804                                  NORMFCB4:
 12805 00002C9B FF34                    	push	word [SI]		; Save original drive byte for later
 12806                                  
 12807 00002C9D 16                      	push	ss
 12808 00002C9E 07                      	pop	es			; get es to address DOSGroup
 12809                                  
 12810 00002C9F BF[6003]                	MOV	DI,OPENBUF		; appropriate buffer
 12811 00002CA2 E8473D                  	call	TransFCB		; convert the FCB, set SATTRIB EXTFCB
 12812 00002CA5 7304                    	JNC	short SearchIt		; no error, go and look
 12813 00002CA7 5B                      	pop	bx			; Clean stack
 12814                                  ;
 12815                                  ; Error code is in AX
 12816                                  ;
 12817 00002CA8 E974EA                  	jmp	FCB_RET_ERR		; error
 12818                                  
 12819                                  SearchIt:
 12820 00002CAB 16                      	push	ss
 12821 00002CAC 1F                      	pop	ds			; get ready for search
 12822 00002CAD FF36[DA02]              	push	word [DMAADD]
 12823 00002CB1 FF36[DC02]              	push	word [DMAADD+2]
 12824 00002CB5 C706[DA02][6004]        	MOV	WORD [DMAADD],SEARCHBUF
 12825 00002CBB 8C1E[DC02]              	MOV	WORD [DMAADD+2],DS
 12826                                  	; MSDOS 6.0
 12827                                  	;call	GET_FAST_SEARCH 	; search
 12828                                  	; MSDOS 3.3
 12829 00002CBF E8560C                  	call	DOS_SEARCH_FIRST
 12830 00002CC2 8F06[DC02]              	pop	word [DMAADD+2]
 12831 00002CC6 8F06[DA02]              	pop	word [DMAADD]
 12832 00002CCA 7304                    	JNC	short SearchSet		; no error, transfer info
 12833 00002CCC 5B                      	pop	bx			; Clean stack
 12834                                  ;
 12835                                  ; Error code is in AX
 12836                                  ;
 12837 00002CCD E94FEA                  	jmp	FCB_RET_ERR
 12838                                  
 12839                                  ;
 12840                                  ; The search was successful (or the search-next).  We store the information
 12841                                  ; into the user's FCB for continuation.
 12842                                  ;
 12843                                  SearchSet:
 12844 00002CD0 BE[6004]                	MOV	SI,SEARCHBUF
 12845 00002CD3 C43E[3E05]              	LES	DI,[THISFCB]		; point to the FCB
 12846 00002CD7 F606[0705]FF            	TEST	byte [EXTFCB],0FFh		;
 12847 00002CDC 7403                    	JZ	short NORMFCB1
 12848 00002CDE 83C707                  	ADD	DI,7			; Point past the extension
 12849                                  NORMFCB1:
 12850 00002CE1 5B                      	pop	bx			; Get original drive byte
 12851 00002CE2 08DB                    	OR	BL,BL
 12852 00002CE4 7506                    	JNZ	short SearchDrv
 12853 00002CE6 8A1E[E402]              	MOV	BL,[CURDRV]
 12854 00002CEA FEC3                    	INC	BL
 12855                                  SearchDrv:
 12856 00002CEC AC                      	LODSB				; Get correct search contin drive byte
 12857 00002CED 86C3                    	XCHG	AL,BL			; Search byte to BL, user byte to AL
 12858 00002CEF 47                      	INC	DI
 12859                                  	;STOSB				; Store the correct "user" drive byte
 12860                                  					;  at the start of the search info
 12861 00002CF0 B90A00                  	MOV	CX,20/2
 12862 00002CF3 F3A5                    	REP	MOVSW			; Rest of search cont info, SI -> entry
 12863 00002CF5 86C3                    	XCHG	AL,BL			; User drive byte back to BL, search
 12864                                  					;   byte to AL
 12865 00002CF7 AA                      	STOSB				; Search contin drive byte at end of
 12866                                  					;   contin info
 12867 00002CF8 C43E[DA02]              	LES	DI,[DMAADD]
 12868 00002CFC F606[0705]FF            	TEST	byte [EXTFCB],0FFh
 12869 00002D01 740E                    	JZ	short NORMFCB2
 12870 00002D03 B0FF                    	MOV	AL,0FFh
 12871 00002D05 AA                      	STOSB
 12872 00002D06 FEC0                    	INC	AL
 12873 00002D08 B90500                  	MOV	CX,5
 12874 00002D0B F3AA                    	REP	STOSB
 12875 00002D0D A0[0805]                	MOV	AL,[SATTRIB]
 12876 00002D10 AA                      	STOSB
 12877                                  NORMFCB2:
 12878 00002D11 88D8                    	MOV	AL,BL			; User Drive byte
 12879 00002D13 AA                      	STOSB
 12880 00002D14 B91000                  	MOV	CX,16			; 32 / 2 words of dir entry
 12881 00002D17 F3A5                    	REP	MOVSW
 12882 00002D19 E900EA                  	jmp	FCB_RET_OK
 12883                                  
 12884                                  ;----------------------------------------------------------------------------
 12885                                  ;
 12886                                  ; Procedure Name : $DIR_SEARCH_NEXT
 12887                                  ;
 12888                                  ; Inputs:
 12889                                  ;	DS:DX points to unopenned FCB returned by $DIR_SEARCH_FIRST
 12890                                  ; Function:
 12891                                  ;	Directory is searched for the next matching entry and the directory
 12892                                  ;	entry is loaded at the disk transfer address
 12893                                  ; Returns:
 12894                                  ;	AL = -1 if no entries matched, otherwise 0
 12895                                  ;----------------------------------------------------------------------------
 12896                                  
 12897                                  _$DIR_SEARCH_NEXT:
 12898 00002D1C 368916[3E05]            	MOV	[SS:THISFCB],DX
 12899 00002D21 368C1E[4005]            	MOV	[SS:THISFCB+2],DS
 12900 00002D26 36C606[0805]00          	MOV	byte [SS:SATTRIB],0
 12901 00002D2C 36C606[0705]00          	MOV	byte [SS:EXTFCB],0
 12902                                  
 12903 00002D32 16                      	push	ss
 12904 00002D33 07                      	pop	es
 12905                                  
 12906 00002D34 BF[6004]                	MOV	DI,SEARCHBUF
 12907                                  
 12908 00002D37 89D6                    	MOV	SI,DX
 12909 00002D39 803CFF                  	CMP	BYTE [SI],0FFh
 12910 00002D3C 750D                    	JNZ	short NORMFCB6
 12911 00002D3E 83C606                  	ADD	SI,6
 12912 00002D41 AC                      	LODSB
 12913                                  
 12914 00002D42 36A2[0805]              	MOV	[SS:SATTRIB],AL
 12915 00002D46 36FE0E[0705]            	DEC	byte [SS:EXTFCB]
 12916                                  NORMFCB6:
 12917 00002D4B AC                      	LODSB				; Get original user drive byte
 12918 00002D4C 50                      	push	ax			; Put it on stack
 12919 00002D4D 8A4414                  	MOV	AL,[SI+20]		; Get correct search contin drive byte
 12920 00002D50 AA                      	STOSB				; Put in correct place
 12921 00002D51 B90A00                  	MOV	CX,20/2
 12922 00002D54 F3A5                    	REP	MOVSW			; Transfer in rest of search contin info
 12923                                  
 12924 00002D56 16                      	push	ss
 12925 00002D57 1F                      	pop	ds
 12926                                  
 12927 00002D58 FF36[DA02]              	push	word [DMAADD]
 12928 00002D5C FF36[DC02]              	push	word [DMAADD+2]
 12929 00002D60 C706[DA02][6004]        	MOV	WORD [DMAADD],SEARCHBUF
 12930 00002D66 8C1E[DC02]              	MOV	WORD [DMAADD+2],DS
 12931 00002D6A E8600C                  	call	DOS_SEARCH_NEXT 	; Find it
 12932 00002D6D 8F06[DC02]              	pop	word [DMAADD+2]
 12933 00002D71 8F06[DA02]              	pop	word [DMAADD]
 12934 00002D75 7203                    	JC	short SearchNoMore
 12935 00002D77 E956FF                  	JMP	SearchSet		; Ok set return
 12936                                  
 12937                                  SearchNoMore:
 12938 00002D7A C43E[3E05]              	LES	DI,[THISFCB]
 12939 00002D7E F606[0705]FF            	TEST	byte [EXTFCB],0FFh
 12940 00002D83 7403                    	JZ	short NORMFCB8
 12941 00002D85 83C707                  	ADD	DI,7			; Point past the extension
 12942                                  NORMFCB8:
 12943 00002D88 5B                      	pop	bx			; Get original drive byte
 12944 00002D89 26881D                  	MOV	[ES:DI],BL		; Store the correct "user" drive byte
 12945                                  					;  at the right spot
 12946                                  ;
 12947                                  ; error code is in AX
 12948                                  ;
 12949 00002D8C E990E9                  	jmp	FCB_RET_ERR
 12950                                  
 12951                                  ;---------------------------------------------------------------------------
 12952                                  ;
 12953                                  ;   Procedure Name : $FIND_FIRST
 12954                                  ; 
 12955                                  ;   Assembler usage:
 12956                                  ;	    MOV AH, FindFirst
 12957                                  ;	    LDS DX, name
 12958                                  ;	    MOV CX, attr
 12959                                  ;	    INT 21h
 12960                                  ;	; DMA address has datablock
 12961                                  ;
 12962                                  ;   Error Returns:
 12963                                  ;	    AX = error_path_not_found
 12964                                  ;	       = error_no_more_files
 12965                                  ;---------------------------------------------------------------------------
 12966                                  
 12967                                  _$FIND_FIRST:
 12968 00002D8F 89D6                    	MOV	SI,DX			; get name in appropriate place
 12969 00002D91 36880E[0805]            	MOV	[SS:SATTRIB],CL		; Search attribute to correct loc
 12970                                  
 12971 00002D96 BF[6003]                	MOV	DI,OPENBUF		; appropriate buffer
 12972                                  
 12973 00002D99 E8B83C                  	call	TransPathSet		; convert the path
 12974 00002D9C 7305                    	JNC	short Find_it 		; no error, go and look
 12975                                  FindError:
 12976                                  	;mov	al,3
 12977 00002D9E B003                    	mov	al, error_path_not_found ; error and map into one.
 12978 00002DA0 E966E9                  	jmp	SYS_RET_ERR
 12979                                  Find_it:
 12980 00002DA3 16                      	push	ss
 12981 00002DA4 1F                      	pop	ds
 12982                                  
 12983 00002DA5 FF36[DA02]              	push	word [DMAADD]
 12984 00002DA9 FF36[DC02]              	push	word [DMAADD+2]
 12985 00002DAD C706[DA02][6004]        	MOV	WORD [DMAADD],SEARCHBUF
 12986 00002DB3 8C1E[DC02]              	MOV	WORD [DMAADD+2],DS
 12987                                  	; MSDOS 6.0
 12988                                  	;call	GET_FAST_SEARCH 	; search
 12989                                  	; MSDOS 3.3
 12990 00002DB7 E85E0B                  	call	DOS_SEARCH_FIRST
 12991 00002DBA 8F06[DC02]              	pop	word [DMAADD+2]
 12992 00002DBE 8F06[DA02]              	pop	word [DMAADD]
 12993 00002DC2 7303                    	JNC	short FindSet 		; no error, transfer info
 12994 00002DC4 E942E9                  	jmp	SYS_RET_ERR
 12995                                  
 12996                                  FindSet:
 12997 00002DC7 BE[6004]                	MOV	SI,SEARCHBUF
 12998 00002DCA C43E[DA02]              	LES	DI,[DMAADD]
 12999 00002DCE B91500                  	MOV	CX,21
 13000 00002DD1 F3A4                    	REP	MOVSB
 13001 00002DD3 56                      	PUSH	SI			; Save pointer to start of entry
 13002                                  	;mov	al,[si+0Bh]
 13003 00002DD4 8A440B                  	MOV	AL,[SI+dir_entry.dir_attr]
 13004 00002DD7 AA                      	STOSB
 13005                                  	;add	si,16h
 13006 00002DD8 83C616                  	ADD	SI,dir_entry.dir_time
 13007 00002DDB A5                      	MOVSW				; dir_time
 13008 00002DDC A5                      	MOVSW				; dir_date
 13009 00002DDD 46                      	INC	SI
 13010 00002DDE 46                      	INC	SI			; Skip dir_first
 13011 00002DDF A5                      	MOVSW				; dir_size (2 words)
 13012 00002DE0 A5                      	MOVSW
 13013 00002DE1 5E                      	POP	SI			; Point back to dir_name
 13014 00002DE2 E83600                   	CALL	PackName
 13015 00002DE5 E915E9                  	jmp	SYS_RET_OK		; bye with no errors
 13016                                  
 13017                                  ;---------------------------------------------------------------------------
 13018                                  ;
 13019                                  ;   Procedure Name : $FIND_NEXT
 13020                                  ;
 13021                                  ;   Assembler usage:
 13022                                  ;	; dma points at area returned by find_first
 13023                                  ;	    MOV AH, findnext
 13024                                  ;	    INT 21h
 13025                                  ;	; next entry is at dma
 13026                                  ;
 13027                                  ;   Error Returns:
 13028                                  ;	    AX = error_no_more_files
 13029                                  ;---------------------------------------------------------------------------
 13030                                  
 13031                                  _$FIND_NEXT:
 13032 00002DE8 16                      	push	ss
 13033 00002DE9 07                      	pop	es
 13034                                  
 13035 00002DEA BF[6004]                	MOV	DI,SEARCHBUF
 13036                                  
 13037 00002DED 36C536[DA02]            	LDS	SI,[SS:DMAADD]
 13038                                  
 13039 00002DF2 B91500                  	MOV	CX,21
 13040 00002DF5 F3A4                    	REP	MOVSB			; Put the search continuation info
 13041                                  					;  in the right place
 13042 00002DF7 16                      	push	ss
 13043 00002DF8 1F                      	pop	ds			; get ready for search
 13044                                  	
 13045 00002DF9 FF36[DA02]              	push	word [DMAADD]
 13046 00002DFD FF36[DC02]              	push	word [DMAADD+2]
 13047 00002E01 C706[DA02][6004]        	MOV	WORD [DMAADD],SEARCHBUF
 13048 00002E07 8C1E[DC02]              	MOV	WORD [DMAADD+2],DS
 13049 00002E0B E8BF0B                  	call	DOS_SEARCH_NEXT 	; Find it
 13050 00002E0E 8F06[DC02]              	pop	word [DMAADD+2]
 13051 00002E12 8F06[DA02]              	pop	word [DMAADD]
 13052 00002E16 73AF                    	JNC	short FindSet 		; No error, set info
 13053 00002E18 E9EEE8                  	jmp	SYS_RET_ERR
 13054                                  
 13055                                  ;---------------------------------------------------------------------------
 13056                                  ;**	PackName - Convert file names from FCB to ASCIZ format.
 13057                                  ;
 13058                                  ;	PackName transfers a file name from DS:SI to ES:DI and converts it to
 13059                                  ;	the ASCIZ format.
 13060                                  ;
 13061                                  ;	ENTRY	(DS:SI) = 11 character FCB or dir entry name
 13062                                  ;		(ES:DI) = destination area (13 bytes)
 13063                                  ;	EXIT	(ds:SI) and (es:DI) advanced
 13064                                  ;	USES	al, CX, SI, DI, Flags  (BUGBUG - not verified - jgl)
 13065                                  ;---------------------------------------------------------------------------
 13066                                  
 13067                                  PackName:
 13068                                  ;	Move over 8 characters to cover the name component, then trim it's
 13069                                  ;	trailing blanks.
 13070                                  
 13071 00002E1B B90800                  	MOV	CX,8			; Pack the name
 13072 00002E1E F3A4                    	REP	MOVSB			; Move all of it
 13073                                  main_kill_tail:
 13074 00002E20 26807DFF20              	CMP	BYTE [ES:DI-1]," "
 13075 00002E25 7507                    	JNZ	short find_check_dot
 13076 00002E27 4F                      	DEC	DI			; Back up over trailing space
 13077 00002E28 41                      	INC	CX
 13078 00002E29 83F908                  	CMP	CX,8
 13079 00002E2C 72F2                    	JB	short main_kill_tail
 13080                                  find_check_dot:
 13081                                  	;CMP	WORD [SI],(" " << 8) | " "
 13082 00002E2E 813C2020                	cmp     word [si],2020h 
 13083 00002E32 7506                    	JNZ	short got_ext 		; Some chars in extension
 13084 00002E34 807C0220                	CMP	BYTE [SI+2]," "
 13085 00002E38 7412                    	JZ	short find_done		; No extension
 13086                                  got_ext:
 13087 00002E3A B02E                    	MOV	AL,"."
 13088 00002E3C AA                      	STOSB
 13089 00002E3D B90300                  	MOV	CX,3
 13090 00002E40 F3A4                    	REP	MOVSB
 13091                                  ext_kill_tail:
 13092 00002E42 26807DFF20              	CMP	BYTE [ES:DI-1]," "
 13093 00002E47 7503                    	JNZ	short find_done
 13094 00002E49 4F                      	DEC	DI			; Back up over trailing space
 13095 00002E4A EBF6                    	JMP	short ext_kill_tail
 13096                                  find_done:
 13097 00002E4C 31C0                    	XOR	AX,AX
 13098 00002E4E AA                      	STOSB				; NUL terminate
 13099 00002E4F C3                      	retn
 13100                                  
 13101                                  ;GET_FAST_SEARCH:
 13102                                  ;	; 22/07/2018
 13103                                  ;	; MSDOS 6.0
 13104                                  ;	OR	word [DOS34_FLAG],SEARCH_FASTOPEN 
 13105                                  ;					;FO.trigger fastopen ;AN000;
 13106                                  ;	call	DOS_SEARCH_FIRST
 13107                                  ;	retn
 13108                                  
 13109                                  
 13110                                  ;============================================================================
 13111                                  ; PATH.ASM, MSDOS 6.0, 1991
 13112                                  ;============================================================================
 13113                                  ; 06/08/2018 - Retro DOS v3.0
 13114                                  
 13115                                  ;**	Directory related system calls. These will be passed direct text of the
 13116                                  ;	pathname from the user. They will need to be passed through the macro
 13117                                  ;	expander prior to being sent through the low-level stuff. I/O specs are
 13118                                  ;	defined in DISPATCH. The system calls are:
 13119                                  ;
 13120                                  ;	$CURRENT_DIR  Written
 13121                                  ;	$RMDIR	  Written
 13122                                  ;	$CHDIR	  Written
 13123                                  ;	$MKDIR	  Written
 13124                                  ;
 13125                                  ;
 13126                                  ;	Modification history:
 13127                                  ;
 13128                                  ;	    Created: ARR 4 April 1983
 13129                                  ;		 MZ 10 May 1983     CurrentDir implemented
 13130                                  ;		 MZ 11 May 1983     RmDir, ChDir, MkDir implemented
 13131                                  ;		 EE 19 Oct 1983     RmDir no longer allows you to delete a
 13132                                  ;				    current directory.
 13133                                  ;		 MZ 19 Jan 1983     Brain damaged applications rely on success
 13134                                  
 13135                                  ;	I_Need	ThisCDS,DWORD		; pointer to Current CDS
 13136                                  ;	I_Need	WFP_Start,WORD		; pointer to beginning of directory text
 13137                                  ;	I_Need	Curr_Dir_End,WORD	; offset to end of directory part
 13138                                  ;	I_Need	OpenBuf,128		; temp spot for translated name
 13139                                  ;	I_need	fSplice,BYTE		; TRUE => do splice
 13140                                  ;	I_Need	NoSetDir,BYTE		; TRUE => no exact match on splice
 13141                                  ;	I_Need	cMeta,BYTE
 13142                                  ;	I_Need	DrvErr,BYTE					;AN000;
 13143                                  
 13144                                  
 13145                                  ;BREAK <$CURRENT_DIR - dump the current directory into user space>
 13146                                  ;---------------------------------------------------------------------------
 13147                                  ;
 13148                                  ;   Procedure Name : $CURRENT_DIR
 13149                                  ;
 13150                                  ;   Assembler usage:
 13151                                  ;		LDS	SI,area
 13152                                  ;		MOV	DL,drive
 13153                                  ;		INT	21h
 13154                                  ;	    ; DS:SI is a pointer to 64 byte area that contains drive
 13155                                  ;	    ; current directory.
 13156                                  ;   Error returns:
 13157                                  ;	    AX = error_invalid_drive
 13158                                  ;
 13159                                  ;---------------------------------------------------------------------------
 13160                                  
 13161                                  _$CURRENT_DIR:
 13162                                  	;06/08/2018 - Retro DOS v3.0
 13163                                  	;IBMDOS.COM (MSDOS 3.3, 1987) - Offset 2D4Eh
 13164 00002E50 E819F2                  	call	EcritDisk
 13165 00002E53 88D0                    	MOV	AL,DL			; get drive number (0=def, 1=A)
 13166 00002E55 E8063B                  	call	GetVisDrv		; grab it
 13167 00002E58 7308                    	JNC	short CurrentValidate 	; no error -> go and validate dir
 13168                                  CurdirErr:
 13169 00002E5A E817F2                  	call	LcritDisk
 13170                                  	
 13171                                  	; MSDOS 6.0
 13172                                  	;MOV	AL,[CS:DrvErr]		;IFS.			;AN000;
 13173                                  
 13174                                  	; MSDOS 3.3
 13175 00002E5D B00F                    	mov	al,0Fh
 13176                                  
 13177                                  curdir_errj:
 13178 00002E5F E9A7E8                  	jmp	SYS_RET_ERR		;IFS. make noise	;AN000;
 13179                                  
 13180                                  CurrentValidate:
 13181 00002E62 1E                      	push	ds		; save destination
 13182 00002E63 56                      	push	si
 13183 00002E64 2EC536[3A05]            	LDS	SI,[CS:THISCDS]
 13184                                  	;TEST	word [SI+curdir.flags],curdir_isnet
 13185                                  	;JNZ	short DoCheck
 13186                                  ; Random optimization nuked due to some utilities using GetCurrentDir to do
 13187                                  ; media check.
 13188                                  ;	CMP	word [SI+curdir.ID],0
 13189                                  ;	JZ	short GetDst
 13190                                  DoCheck:
 13191 00002E69 2EC606[F802]00          	MOV	byte [cs:NoSetDir],0	; interested only in contents
 13192                                  
 13193 00002E6F BF[6003]                	MOV	DI,OPENBUF
 13194                                  
 13195 00002E72 E8FD1C                  	call	ValidateCDS		; output is ES:DI -> CDS
 13196 00002E75 06                      	push	es	 		; swap source and destination
 13197 00002E76 57                      	push	di
 13198 00002E77 5E                      	pop	si
 13199 00002E78 1F                      	pop	ds
 13200                                  GetDst:
 13201 00002E79 5F                      	pop	di
 13202 00002E7A 07                      	pop	es			; get real destination
 13203 00002E7B 72DD                    	JC	short CurdirErr
 13204                                  	;ADD	SI,curdir.text ; add si,0 ; 09/08/2018
 13205 00002E7D 03744F                  	ADD	SI,[SI+curdir.end]
 13206 00002E80 803C5C                  	CMP	BYTE [SI],'\'		; root or subdirs present?
 13207 00002E83 7501                    	JNZ	short CurrentCopy
 13208 00002E85 46                      	INC	SI
 13209                                  CurrentCopy:
 13210                                  ;	call	FStrCpy
 13211                                  ;; 10/29/86 E5 char
 13212 00002E86 50                      	PUSH	AX
 13213 00002E87 AC                      	LODSB				; get char
 13214 00002E88 08C0                    	OR	AL,AL
 13215 00002E8A 7413                    	JZ	short FOK
 13216 00002E8C 3C05                    	CMP	AL,05
 13217 00002E8E 740D                    	JZ	short FCHANGE
 13218 00002E90 EB01                    	JMP	short FFF
 13219                                  FCPYNEXT:
 13220 00002E92 AC                      	LODSB				; get char
 13221                                  FFF:
 13222 00002E93 3C5C                    	CMP	AL,'\'			; beginning of directory
 13223 00002E95 7508                    	JNZ	short FOK		; no
 13224 00002E97 AA                      	STOSB				; put into user's buffer
 13225 00002E98 AC                      	LODSB				; 1st char of dir is 05?
 13226 00002E99 3C05                    	CMP	AL,05H
 13227 00002E9B 7502                    	JNZ	short FOK		; no
 13228                                  FCHANGE:
 13229 00002E9D B0E5                    	MOV	AL,0E5H			; make it E5
 13230                                  FOK:
 13231 00002E9F AA                      	STOSB				; put into user's buffer
 13232 00002EA0 08C0                    	OR	AL,AL			; final char
 13233 00002EA2 75EE                    	JNZ	short FCPYNEXT		; no
 13234 00002EA4 58                      	POP	AX
 13235                                  
 13236                                  ;; 10/29/86 E5 char
 13237 00002EA5 30C0                    	xor	AL,AL			; MZ 19 Jan 84
 13238 00002EA7 E8CAF1                  	call	LcritDisk
 13239 00002EAA E950E8                  	jmp	SYS_RET_OK		; no more, bye!
 13240                                  
 13241                                  
 13242                                  ;BREAK <$RmDir -- Remove a directory>
 13243                                  ;---------------------------------------------------------------------------
 13244                                  ;
 13245                                  ; Procedure Name : $RmDir
 13246                                  ;
 13247                                  ; Inputs:
 13248                                  ;	DS:DX Points to asciz name
 13249                                  ; Function:
 13250                                  ;	Delete directory if empty
 13251                                  ; Returns:
 13252                                  ;	STD XENIX Return
 13253                                  ;	AX = error_path_not_found If path bad
 13254                                  ;	AX = error_access_denied If
 13255                                  ;		Directory not empty
 13256                                  ;		Path not directory
 13257                                  ;		Root directory specified
 13258                                  ;		Directory malformed (. and .. not first two entries)
 13259                                  ;		User tries to delete a current directory
 13260                                  ;	AX = error_current_directory
 13261                                  ;
 13262                                  ;----------------------------------------------------------------------------
 13263                                  
 13264                                  _$RMDIR:
 13265 00002EAD 52                      	push	dx			; Save ptr to name
 13266 00002EAE 1E                      	push	ds
 13267 00002EAF 89D6                    	mov	si,dx			; Load ptr into si
 13268 00002EB1 BF[6003]                	mov	di,OPENBUF		; di = ptr to buf for trans name
 13269 00002EB4 57                      	push	di
 13270 00002EB5 E8A43B                  	call	TransPathNoSet		; Translate the name
 13271 00002EB8 5F                      	pop	di			; di = ptr to buf for trans name
 13272 00002EB9 7307                    	jnc	short rmlset		; If transpath succeeded, continue
 13273 00002EBB 1F                      	pop	ds
 13274 00002EBC 5A                      	pop	dx			; Restore the	 name
 13275 00002EBD B003                    	mov	al,error_path_not_found ; Otherwise, return an error
 13276                                  	;jmp	short curdir_errj
 13277                                  rmdir_errj: ; 10/08/2018
 13278 00002EBF E947E8                  	jmp	SYS_RET_ERR
 13279                                  rmlset:
 13280 00002EC2 36803E[1505]FF          	CMP	byte [ss:CMETA],-1	;   if (cMeta >= 0)
 13281 00002EC8 7512                    	Jnz	short rmerr		;	return (-1);
 13282 00002ECA 16                      	push	ss
 13283 00002ECB 07                      	pop	es
 13284 00002ECC 30C0                    	xor	al,al			; al = 0 , ie drive a:
 13285                                  rmloop: 
 13286 00002ECE E8F73A                  	call	GetCDSFromDrv		; Get curdir for drive in al
 13287 00002ED1 720F                    	jc	short rmcont		; If error, exit loop & cont normally
 13288 00002ED3 E85EF0                  	call	StrCmp			; Are the 2 paths the same?
 13289 00002ED6 7404                    	jz	short rmerr		; Yes, report error.
 13290 00002ED8 FEC0                    	inc	al			; No, inc al to next drive number
 13291 00002EDA EBF2                    	jmp	short rmloop		; Go check next drive.
 13292                                  rmerr:
 13293 00002EDC 1F                      	pop	ds
 13294 00002EDD 5A                      	pop	dx			; Restore the name
 13295 00002EDE B010                    	mov	al,error_current_directory ;  error
 13296                                  	;jmp	short curdir_errj
 13297 00002EE0 EBDD                    	jmp	short rmdir_errj
 13298                                  rmcont:
 13299 00002EE2 1F                      	pop	ds
 13300 00002EE3 5A                      	pop	dx			; Restore the name
 13301 00002EE4 BE[233D]                	MOV	SI,DOS_RMDIR
 13302 00002EE7 EB75                    	JMP	short DoDirCall ; 07/09/2018
 13303                                  
 13304                                  ;BREAK <$ChDir -- Change current directory on a drive>
 13305                                  ;----------------------------------------------------------------------------
 13306                                  ;
 13307                                  ; $ChDir - Top-level change directory system call.  This call is responsible
 13308                                  ; for setting up the CDS for the specified drive appropriately.  There are
 13309                                  ; several cases to consider:
 13310                                  ;
 13311                                  ;   o	Local, simple CDS.  In this case, we take the input path and convert
 13312                                  ;	it into a WFP.	We verify the existance of this directory and then
 13313                                  ;	copy the WFP into the CDS and set up the ID field to point to the
 13314                                  ;	directory cluster.
 13315                                  ;   o	Net CDS.  We form the path from the root (including network prefix)
 13316                                  ;	and verify its existance (via DOS_Chdir).  If successful, we copy the
 13317                                  ;	WFP back into the CDS.
 13318                                  ;   o	SUBST'ed CDS.  This is no different than the local, simple CDS.
 13319                                  ;   o	JOIN'ed CDS.  This is trouble as there are two CDS's at work.  If we
 13320                                  ;	call TransPath, we will get the PHYSICAL CDS that the path refers to
 13321                                  ;	and the PHYSICAL WFP that the input path refers to.  This is perfectly
 13322                                  ;	good for the validation but not for currency.  We call TransPathNoSet
 13323                                  ;	to process the path but to return the logical CDS and the logical
 13324                                  ;	path.  We then copy the logical path into the logical CDS.
 13325                                  ;
 13326                                  ; Inputs:
 13327                                  ;	DS:DX Points to asciz name
 13328                                  ; Returns:
 13329                                  ;	STD XENIX Return
 13330                                  ;	AX = chdir_path_not_found if error
 13331                                  ;
 13332                                  ;----------------------------------------------------------------------------
 13333                                  
 13334                                  _$CHDIR:
 13335 00002EE9 BF[6003]                	MOV	DI,OPENBUF		; spot for translated name
 13336 00002EEC 89D6                    	MOV	SI,DX			; get source
 13337 00002EEE E85F3B                  	call	TransPath		; go munge the path and get real CDS
 13338 00002EF1 7305                    	JNC	short ChDirCrack	; no errors, try path
 13339                                  ChDirErrP:
 13340 00002EF3 B003                    	MOV	AL,error_path_not_found
 13341                                  ChDirErr:
 13342 00002EF5 E911E8                  	jmp	SYS_RET_ERR 	; oops!
 13343                                  
 13344                                  ChDirCrack:
 13345 00002EF8 803E[1505]FF            	CMP	byte [CMETA],-1		; No meta chars allowed.
 13346 00002EFD 75F4                    	JNZ	short ChDirErrP
 13347                                  ;
 13348                                  ; We cannot do a ChDir (yet) on a raw CDS.  This is treated as a path not
 13349                                  ; found.
 13350                                  ;
 13351 00002EFF C43E[3A05]              	LES	DI,[THISCDS]
 13352 00002F03 83FFFF                  	CMP	DI,-1			;   if (ThisCDS == NULL)
 13353 00002F06 74EB                    	JZ	short ChDirErrP		;	error ();
 13354                                   ;
 13355                                   ; Find out if the directory exists.
 13356                                   ;
 13357 00002F08 E8E30D                  	call	DOS_CHDIR
 13358 00002F0B 72E8                    	Jc	short ChDirErr
 13359                                  ;
 13360                                  ; Get back CDS to see if a join as seen.  Set the currency pointer (only if
 13361                                  ; not network).  If one was seen, all we need to do is copy in the text
 13362                                  ;
 13363 00002F0D C43E[3A05]              	LES	DI,[THISCDS]
 13364 00002F11 26F745430020            	TEST	word [ES:DI+curdir.flags],curdir_splice
 13365 00002F17 7425                    	JZ	short GotCDS
 13366                                  ;
 13367                                  ; The CDS was joined.  Let's go back and grab the logical CDS.
 13368                                  ;
 13369 00002F19 06                      	push	es	
 13370 00002F1A 57                      	push	di
 13371 00002F1B 51                      	push	cx			; save CDS and cluster...
 13372 00002F1C E8ECE6                  	call	Get_User_Stack		; get original text
 13373 00002F1F 8B7C06                  	MOV	DI,[SI+user_env.user_DX]
 13374 00002F22 8E5C0E                  	MOV	DS,[SI+user_env.user_DS]
 13375 00002F25 BE[6003]                	MOV	SI,OPENBUF		; spot for translated name
 13376 00002F28 87F7                    	XCHG	SI,DI
 13377 00002F2A 30C0                    	XOR	AL,AL			; do no splicing
 13378 00002F2C 57                      	push	di
 13379 00002F2D E82C3B                  	call	TransPathNoSet		; Munge path
 13380 00002F30 5E                      	pop	si
 13381                                  ;
 13382                                  ; There should NEVER be an error here.
 13383                                  ;
 13384                                  
 13385                                  ;IF FALSE
 13386                                  ;	JNC SKipErr
 13387                                  ;	fmt <>,<>,<"$p: Internal CHDIR error\n">
 13388                                  ;SkipErr:
 13389                                  ;ENDIF
 13390 00002F31 C43E[3A05]              	LES	DI,[THISCDS]		; get new CDS
 13391 00002F35 26C74549FFFF            	MOV	word [ES:DI+curdir.ID],-1
 13392                                  					; no valid cluster here...
 13393 00002F3B 59                      	pop	cx
 13394 00002F3C 5F                      	pop	di
 13395 00002F3D 07                      	pop	es
 13396                                  ;
 13397                                  ; ES:DI point to the physical CDS, CX is the ID (local only)
 13398                                  ;
 13399                                  GotCDS:
 13400                                  ;
 13401                                  ; wfp_start points to the text.  See if it is long enough
 13402                                  ;
 13403                                  	; MSDOS 3.3
 13404                                  	;push	ss
 13405                                  	;pop	ds
 13406                                  	;mov	si,[WFP_START]
 13407                                  	;push	cx
 13408                                  	;call	DStrLen
 13409                                  	;cmp	cx,67 ; cmp cx,DIRSTRLEN
 13410                                  	;pop	cx
 13411                                  	;ja	short ChDirErrP
 13412                                  
 13413                                  	; MSDOS 6.0
 13414 00002F3E E84800                  	CALL	Check_PathLen		;PTM.		;AN000;
 13415 00002F41 77B0                    	JA	short ChDirErrP
 13416                                  	; MSDOS 3.3 (& MSDOS 6.0)
 13417 00002F43 26F745430080            	TEST	word [ES:DI+curdir.flags],curdir_isnet
 13418 00002F49 7508                    	JNZ	short SkipRecency
 13419                                  	; MSDOS 6.0
 13420                                  	;TEST	word [ES:DI+curdir.flags],curdir_splice 
 13421                                  	;				;PTM. for Join and Subst ;AN000;
 13422                                  	;JZ	short setdirclus	;PTM.		;AN000;
 13423                                  	;MOV	CX,-1			;PTM.		;AN000;
 13424                                  ;setdirclus:
 13425 00002F4B 26894D49                	MOV	[ES:DI+curdir.ID],CX
 13426 00002F4F C43E[3A05]              	LES	DI,[THISCDS]		; get logical CDS
 13427                                  SkipRecency:
 13428 00002F53 E80BF0                  	call	FStrCpy
 13429 00002F56 30C0                    	XOR	AL,AL
 13430                                  mkdir_ok:
 13431 00002F58 E9A2E7                  	jmp	SYS_RET_OK
 13432                                  
 13433                                  
 13434                                  ;BREAK <$MkDir - Make a directory entry>
 13435                                  ;---------------------------------------------------------------------------
 13436                                  ;
 13437                                  ; Procedure Name : $MkDir
 13438                                  ; Inputs:
 13439                                  ;	DS:DX Points to asciz name
 13440                                  ; Function:
 13441                                  ;	Make a new directory
 13442                                  ; Returns:
 13443                                  ;	STD XENIX Return
 13444                                  ;	AX = mkdir_path_not_found if path bad
 13445                                  ;	AX = mkdir_access_denied  If
 13446                                  ;		Directory cannot be created
 13447                                  ;		Node already exists
 13448                                  ;		Device name given
 13449                                  ;		Disk or directory(root) full
 13450                                  ;---------------------------------------------------------------------------
 13451                                  
 13452                                  _$MKDIR:
 13453 00002F5B BE[0C3C]                	MOV	SI,DOS_MKDIR
 13454                                  DoDirCall:
 13455 00002F5E BF[6003]                	MOV	DI,OPENBUF		; spot for translated name
 13456                                  
 13457 00002F61 56                      	push	si
 13458 00002F62 89D6                    	MOV	SI,DX			; get source
 13459 00002F64 E8E93A                  	call	TransPath		; go munge the path
 13460 00002F67 5E                      	pop	si
 13461 00002F68 7305                    	JNC	short MkDirCrack	; no errors, try path
 13462                                  MkErrP:
 13463 00002F6A B003                    	MOV	AL,error_path_not_found	; oops!
 13464                                  MkErr:
 13465 00002F6C E99AE7                  	jmp	SYS_RET_ERR
 13466                                  MkDirCrack:
 13467 00002F6F 36803E[1505]FF          	CMP	byte [SS:CMETA],-1
 13468 00002F75 75F3                    	JNZ	short MkErrP
 13469                                  
 13470                                  	; MSDOS 3.3
 13471                                  	;push	ss
 13472                                  	;pop	ds
 13473                                  	;call	si
 13474                                  	;jb	short MkErr
 13475                                  	;;jmp	short mkdir_ok
 13476                                  	;jmp	SYS_RET_OK
 13477                                  
 13478                                  	; MSDOS 6.0
 13479 00002F77 56                      	PUSH	SI			;PTM.			;AN000;
 13480 00002F78 E80E00                  	CALL	Check_PathLen		;PTM. check path len > 67 ? ;AN000;
 13481 00002F7B 5E                      	POP	SI			;PTM.			;AN000;
 13482 00002F7C 7604                    	JBE	short pathok		;PTM.			;AN000;
 13483 00002F7E B005                    	MOV	AL,error_access_denied	;PTM. ops!
 13484                                  	;jmp	SYS_RET_ERR		;PTM.
 13485 00002F80 EBEA                    	jmp	short MkErr
 13486                                  pathok:
 13487 00002F82 FFD6                    	CALL	SI			; go get file
 13488 00002F84 72E6                    	JC	short MkErr		; no errors
 13489                                  	;jmp	short mkdir_ok
 13490 00002F86 E974E7                  	jmp	SYS_RET_OK
 13491                                  
 13492                                  ;----------------------------------------------------------------------------
 13493                                  ;
 13494                                  ; Procedure Name : Check_PathLen
 13495                                  ;
 13496                                  ; Inputs:
 13497                                  ;	nothing
 13498                                  ; Function:
 13499                                  ;	check if final path length greater than 67
 13500                                  ; Returns:
 13501                                  ;	Above flag set if > 67
 13502                                  ;
 13503                                  ;---------------------------------------------------------------------------
 13504                                  
 13505                                  Check_PathLen:
 13506                                  	; 09/09/2018
 13507                                  	;;MOV	SI,[WFP_START]
 13508                                  	;MOV	SI,[SS:WFP_START] ; MSDOS 6.0
 13509                                  ;check_PathLen2:
 13510 00002F89 16                      	push	ss
 13511 00002F8A 1F                      	pop	ds
 13512 00002F8B 8B36[4A05]              	mov	SI,[WFP_START] ; MSDOS 3.3
 13513 00002F8F 51                      	push	CX	
 13514 00002F90 E8E5EF                  	CALL	DStrLen
 13515 00002F93 83F943                  	CMP	CX,DIRSTRLEN
 13516 00002F96 59                      	POP	CX
 13517 00002F97 C3                      	retn
 13518                                  
 13519                                  ;============================================================================
 13520                                  ; IOCTL.ASM, MSDOS 6.0, 1991
 13521                                  ;============================================================================
 13522                                  ; 07/08/2018 - Retro DOS v3.0
 13523                                  
 13524                                  ;**	IOCTL system call.
 13525                                  ;
 13526                                  ;	$IOCTL
 13527                                  ;
 13528                                  ;	  Revision history:
 13529                                  ;
 13530                                  ;		Created: ARR 4 April 1983
 13531                                  ;
 13532                                  ;		GenericIOCTL added:		KGS	22 April 1985
 13533                                  ;
 13534                                  ;		A000	version 4.00	Jan. 1988
 13535                                  ;
 13536                                  ;		Used jump table to dispatch IOCTL functions. HKN 3/12/90
 13537                                  ;
 13538                                  
 13539                                  ;BREAK <IOCTL - munge on a handle to do device specific stuff>
 13540                                  ;---------------------------------------------------------------------------
 13541                                  ;
 13542                                  ;   Assembler usage:
 13543                                  ;	    MOV     BX, Handle
 13544                                  ;	    MOV     DX, Data
 13545                                  ;
 13546                                  ;	(or LDS     DX,BUF
 13547                                  ;	    MOV     CX,COUNT)
 13548                                  ;
 13549                                  ;	    MOV     AH, Ioctl
 13550                                  ;	    MOV     AL, Request
 13551                                  ;	    INT     21h
 13552                                  ;
 13553                                  ;   AH = 0  Return a combination of low byte of sf_flags and device driver
 13554                                  ;	    attribute word in DX, handle in BX:
 13555                                  ;	    DH = high word of device driver attributes
 13556                                  ;	    DL = low byte of sf_flags
 13557                                  ;	 1  Set the bits contained in DX to sf_flags.  DH MUST be 0.  Handle
 13558                                  ;	    in BX.
 13559                                  ;	 2  Read CX bytes from the device control channel for handle in BX
 13560                                  ;	    into DS:DX.  Return number read in AX.
 13561                                  ;	 3  Write CX bytes to the device control channel for handle in BX from
 13562                                  ;	    DS:DX.  Return bytes written in AX.
 13563                                  ;	 4  Read CX bytes from the device control channel for drive in BX
 13564                                  ;	    into DS:DX.  Return number read in AX.
 13565                                  ;	 5  Write CX bytes to the device control channel for drive in BX from
 13566                                  ;	    DS:DX.  Return bytes written in AX.
 13567                                  ;	 6  Return input status of handle in BX. If a read will go to the
 13568                                  ;	    device, AL = 0FFh, otherwise 0.
 13569                                  ;	 7  Return output status of handle in BX. If a write will go to the
 13570                                  ;	    device, AL = 0FFh, otherwise 0.
 13571                                  ;	 8  Given a drive in BX, return 1 if the device contains non-
 13572                                  ;	    removable media, 0 otherwise.
 13573                                  ;	 9  Return the contents of the device attribute word in DX for the
 13574                                  ;	    drive in BX.  0200h is the bit for shared.	1000h is the bit for
 13575                                  ;	    network. 8000h is the bit for local use.
 13576                                  ;	 A  Return 8000h if the handle in BX is for the network or not.
 13577                                  ;	 B  Change the retry delay and the retry count for the system. BX is
 13578                                  ;	    the count and CX is the delay.
 13579                                  ;
 13580                                  ;   Error returns:
 13581                                  ;	    AX = error_invalid_handle
 13582                                  ;	       = error_invalid_function
 13583                                  ;	       = error_invalid_data
 13584                                  ;
 13585                                  ;-------------------------------------------------------------------------------
 13586                                  ;
 13587                                  ;   This is the documentation copied from DOS 4.0 it is much better
 13588                                  ;   than the above
 13589                                  ;
 13590                                  ;	There are several basic forms of IOCTL calls:
 13591                                  ;
 13592                                  ;
 13593                                  ;	** Get/Set device information:	**
 13594                                  ;
 13595                                  ;	ENTRY	(AL) = function code
 13596                                  ;		  0 - Get device information
 13597                                  ;		  1 - Set device information
 13598                                  ;		(BX) = file handle
 13599                                  ;		(DX) = info for "Set Device Information"
 13600                                  ;	EXIT	'C' set if error
 13601                                  ;		  (AX) = error code
 13602                                  ;		'C' clear if OK
 13603                                  ;		  (DX) = info for "Get Device Information"
 13604                                  ;	USES	ALL
 13605                                  ;
 13606                                  ;
 13607                                  ;	**  Read/Write Control Data From/To Handle  **
 13608                                  ;
 13609                                  ;	ENTRY	(AL) = function code
 13610                                  ;		  2 - Read device control info
 13611                                  ;		  3 - Write device control info
 13612                                  ;		(BX) = file handle
 13613                                  ;		(CX) = transfer count
 13614                                  ;		(DS:DX) = address for data
 13615                                  ;	EXIT	'C' set if error
 13616                                  ;		  (AX) = error code
 13617                                  ;		'C' clear if OK
 13618                                  ;		  (AX) = count of bytes transfered
 13619                                  ;	USES	ALL
 13620                                  ;
 13621                                  ;
 13622                                  ;	**  Read/Write Control Data From/To Block Device  **
 13623                                  ;
 13624                                  ;	ENTRY	(AL) = function code
 13625                                  ;		  4 - Read device control info
 13626                                  ;		  5 - Write device control info
 13627                                  ;		(BL) = Drive number (0=default, 1='A', 2='B', etc)
 13628                                  ;		(CX) = transfer count
 13629                                  ;		(DS:DX) = address for data
 13630                                  ;	EXIT	'C' set if error
 13631                                  ;		  (AX) = error code
 13632                                  ;		'C' clear if OK
 13633                                  ;		  (AX) = count of bytes transfered
 13634                                  ;	USES	ALL
 13635                                  ;
 13636                                  ;
 13637                                  ;	**  Get Input/Output Status  **
 13638                                  ;
 13639                                  ;	ENTRY	(AL) = function code
 13640                                  ;		  6 - Get Input status
 13641                                  ;		  7 - Get Output Status
 13642                                  ;		(BX) = file handle
 13643                                  ;	EXIT	'C' set if error
 13644                                  ;		  (AX) = error code
 13645                                  ;		'C' clear if OK
 13646                                  ;		  (AL) = 00 if not ready
 13647                                  ;		  (AL) = FF if ready
 13648                                  ;	USES	ALL
 13649                                  ;
 13650                                  ;
 13651                                  ;	**  Get Drive Information  **
 13652                                  ;
 13653                                  ;	ENTRY	(AL) = function code
 13654                                  ;		  8 - Check for removable media
 13655                                  ;		  9 - Get device attributes
 13656                                  ;		(BL) = Drive number (0=default, 1='A', 2='B', etc)
 13657                                  ;	EXIT	'C' set if error
 13658                                  ;		  (AX) = error code
 13659                                  ;		'C' clear if OK
 13660                                  ;		  (AX) = 0/1 media is removable/fixed (func. 8)
 13661                                  ;		  (DX) = device attribute word (func. 9)
 13662                                  ;	USES	ALL
 13663                                  ;
 13664                                  ;
 13665                                  ;	**  Get Redirected bit	**
 13666                                  ;
 13667                                  ;	ENTRY	(AL) = function code
 13668                                  ;		  0Ah - Network stuff
 13669                                  ;		(BX) = file handle
 13670                                  ;	EXIT	'C' set if error
 13671                                  ;		  (AX) = error code
 13672                                  ;		'C' clear if OK
 13673                                  ;		  (DX) = SFT flags word, 8000h set if network file
 13674                                  ;	USES	ALL
 13675                                  ;
 13676                                  ;
 13677                                  ;	**  Change sharer retry parameters  **
 13678                                  ;
 13679                                  ;	ENTRY	(AL) = function code
 13680                                  ;		  0Bh - Set retry parameters
 13681                                  ;		(CX) = retry loop count
 13682                                  ;		(DX) = number of retries
 13683                                  ;	EXIT	'C' set if error
 13684                                  ;		  (AX) = error code
 13685                                  ;		'C' clear if OK
 13686                                  ;	USES	ALL
 13687                                  ;
 13688                                  ;
 13689                                  ;   =================================================================
 13690                                  ;
 13691                                  ;	**  New Standard Control  **
 13692                                  ;
 13693                                  ;	ALL NEW IOCTL FACILITIES SHOULD USE THIS FORM.	THE OTHER
 13694                                  ;	FORMS ARE OBSOLETE.
 13695                                  ;
 13696                                  ;   =================================================================
 13697                                  ;
 13698                                  ;	ENTRY	(AL) = function code
 13699                                  ;		  0Ch - Control Function subcode
 13700                                  ;		(BX) = File Handle
 13701                                  ;		(CH) = Category Indicator
 13702                                  ;		(CL) = Function within category
 13703                                  ;		(DS:DX) = address for data, if any
 13704                                  ;		(SI) = Passed to device as argument, use depends upon function
 13705                                  ;		(DI) = Passed to device as argument, use depends upon function
 13706                                  ;	EXIT	'C' set if error
 13707                                  ;		  (AX) = error code
 13708                                  ;		'C' clear if OK
 13709                                  ;		  (SI) = Return value, meaning is function dependent
 13710                                  ;		  (DI) = Return value, meaning is function dependent
 13711                                  ;		  (DS:DX) = Return address, use is function dependent
 13712                                  ;	USES	ALL
 13713                                  ;
 13714                                  ;    ============== Generic IOCTL Definitions for DOS 3.2 ============
 13715                                  ;     (See inc\ioctl.inc for more info)
 13716                                  ;
 13717                                  ;	ENTRY	(AL) = function code
 13718                                  ;		  0Dh - Control Function subcode
 13719                                  ;		(BL) = Drive Number (0 = Default, 1= 'A')
 13720                                  ;		(CH) = Category Indicator
 13721                                  ;		(CL) = Function within category
 13722                                  ;		(DS:DX) = address for data, if any
 13723                                  ;		(SI) = Passed to device as argument, use depends upon function
 13724                                  ;		(DI) = Passed to device as argument, use depends upon function
 13725                                  ;
 13726                                  ;	EXIT	'C' set if error
 13727                                  ;		  (AX) = error code
 13728                                  ;		'C' clear if OK
 13729                                  ;		  (DS:DX) = Return address, use is function dependent
 13730                                  ;	USES	ALL
 13731                                  ;
 13732                                  ;---------------------------------------------------------------------------
 13733                                  	
 13734                                  	; MSDOS 6.0
 13735                                  IOCTLJMPTABLE:	;label	word
 13736                                  	; MSDOS 3.3 (& MSDOS 6.0)
 13737 00002F98 [D02F]                  	dw	ioctl_getset_data	; 0
 13738 00002F9A [D02F]                  	dw	ioctl_getset_data   	; 1
 13739 00002F9C [1F30]                  	dw	ioctl_control_string	; 2
 13740 00002F9E [1F30]                  	dw	ioctl_control_string	; 3
 13741 00002FA0 [7731]                  	dw	ioctl_get_dev		; 4
 13742 00002FA2 [7731]                  	dw	ioctl_get_dev		; 5
 13743 00002FA4 [3A30]                  	dw	ioctl_status		; 6
 13744 00002FA6 [3A30]                  	dw	ioctl_status		; 7
 13745 00002FA8 [D030]                  	dw	ioctl_rem_media		; 8
 13746 00002FAA [0F31]                  	dw	Ioctl_Drive_attr	; 9
 13747 00002FAC [6631]                  	dw	IOCTL_Handle_Redir	; A
 13748 00002FAE [5930]                  	dw	Set_Retry_Parameters	; B
 13749 00002FB0 [6830]                  	dw	GENERICIOCTLHANDLE	; C
 13750 00002FB2 [8030]                  	dw	GENERICIOCTL		; D
 13751                                  	; MSDOS 6.0 (& MSDOS 3.3)
 13752 00002FB4 [2A32]                  	dw	ioctl_drive_owner	; E
 13753 00002FB6 [2A32]                  	dw	ioctl_drive_owner	; F
 13754                                  	; MSDOS 6.0
 13755                                  	;dw	query_handle_support	; 10h
 13756                                  	;dw	query_device_support	; 11h
 13757                                  
 13758                                  _$IOCTL:
 13759 00002FB8 8CDE                    	MOV	SI,DS			; Stash DS for calls 2,3,4 and 5
 13760 00002FBA 16                      	push	ss
 13761 00002FBB 1F                      	pop	ds			;hkn; SS is DOSDATA
 13762                                  
 13763                                  	; MSDOS 3.3
 13764 00002FBC 3C0F                    	cmp	al,0Fh 
 13765                                  	; MSDOS 6.0
 13766                                  	;cmp	al,11h			; al must be between 0 & 11h
 13767 00002FBE 770D                    	ja	short ioctl_bad_funj2	; if not bad function #
 13768                                  
 13769                                  	; 09/09/2018
 13770                                  	;push	AX			; Need to save AL for generic IOCTL
 13771 00002FC0 89C7                    	mov	di,ax			; di NOT a PARM
 13772 00002FC2 81E7FF00                	and	di,0FFh			; di = al
 13773 00002FC6 D1E7                    	shl	di,1			; di = index into jmp table
 13774                                  	;pop	AX			; Restore AL for generic IOCTL
 13775                                  
 13776 00002FC8 2EFFA5[982F]            	jmp	word [CS:DI+IOCTLJMPTABLE]
 13777                                  
 13778                                  
 13779                                  ioctl_bad_funj2:
 13780 00002FCD E9F800                  	JMP	ioctl_bad_fun  ; 10/08/2018
 13781                                  
 13782                                  ;--------------------------------------------------------------------------
 13783                                  ;
 13784                                  ; IOCTL: AL= 0,1
 13785                                  ;
 13786                                  ; ENTRY : DS = DOSDATA
 13787                                  ;
 13788                                  ;---------------------------------------------------------------------
 13789                                  
 13790                                  ioctl_getset_data:
 13791                                  	; MSDOS 6.0
 13792 00002FD0 E82D38                  	call	SFFromHandle		; ES:DI -> SFT
 13793 00002FD3 7305                    	JNC	short ioctl_check_permissions ; have valid handle
 13794                                  ioctl_bad_handle:
 13795 00002FD5 B006                    	mov	al,error_invalid_handle
 13796                                  ioctl_error:
 13797 00002FD7 E92FE7                  	jmp	SYS_RET_ERR
 13798                                  
 13799                                  ioctl_check_permissions:
 13800 00002FDA 3C00                    	CMP	AL,0
 13801 00002FDC 268A4505                	MOV	AL,[ES:DI+SF_ENTRY.sf_flags]; Get low byte of flags
 13802 00002FE0 741B                    	JZ	short ioctl_read	; read the byte
 13803                                  
 13804 00002FE2 08F6                    	or	dh, dh
 13805 00002FE4 7404                    	JZ	short ioctl_check_device ; can I set with this data?
 13806 00002FE6 B00D                    	mov	al,error_invalid_data	; no DH <> 0
 13807                                  	;jmp	SYS_RET_ERR
 13808 00002FE8 EBED                    	jmp	short ioctl_error
 13809                                  
 13810                                  ioctl_check_device:
 13811 00002FEA A880                    	test	AL,devid_device 	; can I set this handle?
 13812 00002FEC 74DF                    	jz	short ioctl_bad_funj2
 13813 00002FEE 80CA80                  	OR	DL,devid_device 	; Make sure user doesn't turn off the
 13814                                  					;   device bit!! He can muck with the
 13815                                  					;   others at will.
 13816 00002FF1 C606[D102]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev
 13817 00002FF6 26885505                	MOV	BYTE [ES:DI+SF_ENTRY.sf_flags],DL  ;AC000;MS.; Set flags
 13818                                  
 13819                                  ioctl_ok:
 13820 00002FFA E900E7                  	jmp	SYS_RET_OK
 13821                                  
 13822                                  ioctl_read:
 13823 00002FFD C606[D102]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 13824 00003002 30E4                    	XOR	AH,AH
 13825 00003004 A880                    	test	AL,devid_device 	; Should I set high byte
 13826 00003006 740D                    	JZ	short ioctl_no_high	; no
 13827 00003008 C606[D102]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev
 13828 0000300D 26C47D07                	LES	DI,[ES:DI+SF_ENTRY.sf_devptr] ; Get device pointer
 13829 00003011 268A6505                	MOV	AH,[ES:DI+SYSDEV.ATT+1] ; Get high byte
 13830                                  ioctl_no_high:
 13831 00003015 89C2                    	MOV	DX,AX
 13832 00003017 E8F1E5                  	call	Get_User_Stack
 13833 0000301A 895406                  	MOV	[SI+user_env.user_DX],DX
 13834                                  	;jmp	SYS_RET_OK
 13835 0000301D EBDB                    	jmp	short ioctl_ok
 13836                                  
 13837                                  ;--------------------------------------------------------------------------
 13838                                  ;
 13839                                  ; IOCTL: 2,3
 13840                                  ;
 13841                                  ; ENTRY : DS = DOSDATA
 13842                                  ;	  SI = user's DS
 13843                                  ;
 13844                                  ;--------------------------------------------------------------------------
 13845                                  
 13846                                  ioctl_control_string:
 13847                                  
 13848 0000301F E8DE37                  	call	SFFromHandle		; ES:DI -> SFT
 13849 00003022 72B1                    	JC	short ioctl_bad_handle	; invalid handle
 13850 00003024 26F745058000            	TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device ; can I?
 13851 0000302A 74A1                    	jz	short ioctl_bad_funj2			; No it is a file
 13852 0000302C C606[D102]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev
 13853 00003031 26C47D07                	LES	DI,[ES:DI+SF_ENTRY.sf_devptr] ; Get device pointer
 13854 00003035 30DB                    	XOR	BL,BL			; Unit number of char dev = 0
 13855 00003037 E94201                  	JMP	ioctl_do_string
 13856                                  
 13857                                  ;--------------------------------------------------------------------------
 13858                                  ;
 13859                                  ; IOCTL: AL = 6,7
 13860                                  ;
 13861                                  ; ENTRY: DS = DOSDATA
 13862                                  ;
 13863                                  ;--------------------------------------------------------------------------
 13864                                  
 13865                                  ioctl_status:
 13866                                  
 13867 0000303A B401                    	MOV	AH,1
 13868 0000303C 2C06                    	SUB	AL,6			; 6=0,7=1
 13869 0000303E 7402                    	JZ	short ioctl_get_status
 13870 00003040 B403                    	MOV	AH,3
 13871                                  ioctl_get_status:
 13872 00003042 50                      	PUSH	AX
 13873 00003043 E87810                  	call	GET_IO_SFT
 13874 00003046 58                      	POP	AX
 13875 00003047 7302                    	JNC	short DO_IOFUNC
 13876 00003049 EB8A                    	JMP	short ioctl_bad_handle	; invalid SFT
 13877                                  
 13878                                  DO_IOFUNC:
 13879 0000304B E8031D                  	call	IOFUNC
 13880 0000304E 88C4                    	MOV	AH,AL
 13881 00003050 B0FF                    	MOV	AL,0FFH
 13882 00003052 7502                    	JNZ	short ioctl_status_ret
 13883 00003054 FEC0                    	INC	AL
 13884                                  ioctl_status_ret:
 13885 00003056 E9A4E6                  	jmp	SYS_RET_OK
 13886                                  
 13887                                  ;------------------------------------------------------------------------
 13888                                  ;
 13889                                  ; IOCTL: AL = B
 13890                                  ;
 13891                                  ; ENTRY: DS = DOSDATA
 13892                                  ;
 13893                                  ;-------------------------------------------------------------------------
 13894                                  
 13895                                  Set_Retry_Parameters:
 13896                                  	; 09/09/2018
 13897 00003059 890E[1C00]              	MOV	[RetryLoop],CX		; 0 retry loop count allowed
 13898 0000305D 09D2                    	OR	DX,DX			; zero retries not allowed
 13899 0000305F 7467                    	JZ	short ioctl_bad_fun
 13900 00003061 8916[1A00]              	MOV	[RetryCount],DX		; Set new retry count
 13901                                  doneok:
 13902 00003065 E995E6                  	jmp	SYS_RET_OK		; Done
 13903                                  
 13904                                  ;--------------------------------------------------------------------------
 13905                                  ;
 13906                                  ; Generic IOCTL entry point. AL = C, D, 10h, 11h
 13907                                  ;
 13908                                  ;	here we invoke the Generic IOCTL using the IOCTL_Req structure.
 13909                                  ;	SI:DX -> Users Device Parameter Table
 13910                                  ;	IOCALL -> IOCTL_Req structure
 13911                                  ;
 13912                                  ; 	If on entry AL >= IOCTL_QUERY_HANDLE the function is a
 13913                                  ;	QueryIOCtlSupport call ELSE it's a standard generic IOCtl
 13914                                  ;	call.
 13915                                  ;
 13916                                  ; BUGBUG: Don't push anything on the stack between GENERIOCTL: and 
 13917                                  ;         the call to Check_If_Net because Check_If_Net gets our
 13918                                  ;         return address off the stack if the drive is invalid.
 13919                                  ;
 13920                                  ;----------------------------------------------------------------------------
 13921                                  
 13922                                  query_handle_support:	; Entry point for handles
 13923                                  GENERICIOCTLHANDLE:
 13924                                  
 13925 00003068 E89537                  	call	SFFromHandle		; Get SFT for device.
 13926 0000306B 7260                    	jc	short ioctl_bad_handlej
 13927                                  
 13928 0000306D 26F745050080            	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet	; M031;
 13929 00003073 7553                    	jnz	short ioctl_bad_fun	; Cannot do this over net.
 13930                                  
 13931 00003075 C606[D102]04            	mov	byte [EXTERR_LOCUS],errLOC_SerDev
 13932 0000307A 26C47D07                	les	di,[es:di+SF_ENTRY.sf_devptr]	; Get pointer to device.
 13933 0000307E EB0F                    	jmp	short Do_GenIOCTL
 13934                                  
 13935                                  query_device_support:	; Entry point for devices:
 13936                                  GENERICIOCTL:
 13937                                  
 13938 00003080 C606[D102]02            	mov	byte [EXTERR_LOCUS],errLOC_Disk
 13939 00003085 80FD08                  	cmp	ch,IOC_DC		; Only disk devices are allowed to use
 13940 00003088 753E                    	jne	short ioctl_bad_fun	; no handles with Generic IOCTL.
 13941                                  
 13942 0000308A E88001                  	CALL	Check_If_Net		; ES:DI := Get_hdr_block of device in BL
 13943 0000308D 7539                    	JNZ	short ioctl_bad_fun	; There are no "net devices", and they
 13944                                  
 13945                                  Do_GenIOCTL:
 13946                                  	;TEST	word [ES:DI+SYSDEV.ATT],DEV320 ; Can device handle Generic IOCTL funcs
 13947                                  	; 09/09/2018
 13948 0000308F 26F6450440              	TEST	byte [ES:DI+SYSDEV.ATT],DEV320 ; 0040h
 13949 00003094 7432                    	jz	short ioctl_bad_fun
 13950                                  
 13951                                  	; MSDOS 6.0
 13952                                  	;mov	byte [IOCALL_REQFUNC],GENIOCTL ;Assume real Request
 13953                                  	;cmp	AL,IOCTL_QUERY_HANDLE	; See if this is just a query
 13954                                  	;jl	short SetIOCtlBlock
 13955                                  	;
 13956                                  	;TEST	word [ES:DI+SYSDEV.ATT],IOQUERY ; See if device supports a query
 13957                                  	;jz	short ioctl_bad_fun	; No support for query 
 13958                                  	;
 13959                                  	;mov	byte [IOCALL_REQFUNC],IOCTL_QUERY ; Just a query (5.00)
 13960                                  
 13961                                  ;SetIOCtlBlock:
 13962 00003096 06                      	PUSH	ES			; DEVIOCALL2 expects Device header block
 13963 00003097 57                      	PUSH	DI			; in DS:SI
 13964                                  					; Setup Generic IOCTL Request Block
 13965 00003098 C606[2403]17            	mov	byte [IOCALL_REQLEN],IOCTL_REQ.size
 13966                                  	; 07/09/2018 (MSDOS 3.3)
 13967                                  	;mov	byte [IOCALL_REQFUNC],19
 13968 0000309D C606[2603]13            	mov	byte [IOCALL_REQFUNC],GENIOCTL ; 07/09/2018
 13969                                  	;
 13970 000030A2 881E[2503]              	MOV	byte [IOCALL_REQUNIT],BL
 13971 000030A6 882E[3103]              	MOV	byte [IOCALL+IOCTL_REQ.MAJORFUNCTION],CH
 13972 000030AA 880E[3203]              	MOV	byte [IOCALL+IOCTL_REQ.MINORFUNCTION],CL
 13973 000030AE 8936[3303]              	MOV	word [IOCALL+IOCTL_REQ.REG_SI],SI
 13974 000030B2 893E[3503]              	MOV	word [IOCALL+IOCTL_REQ.REG_DI],DI
 13975 000030B6 8916[3703]              	MOV	word [IOCALL+IOCTL_REQ.GENERICIOCTL_PACKET],DX
 13976 000030BA 8936[3903]              	MOV	word [IOCALL+IOCTL_REQ.GENERICIOCTL_PACKET+2],SI
 13977                                  
 13978                                  ;hkn; IOCALL is in DOSDATA
 13979 000030BE BB[2403]                	MOV	BX,IOCALL
 13980                                  
 13981 000030C1 16                      	PUSH	SS
 13982 000030C2 07                      	POP	ES
 13983                                  					; DS:SI -> Device header.
 13984 000030C3 5E                      	POP	SI
 13985 000030C4 1F                      	POP	DS
 13986                                  	; 10/08/2018
 13987 000030C5 E9EE00                  	jmp	ioctl_do_IO		; Perform Call to device driver
 13988                                  
 13989                                  ioctl_bad_fun:
 13990 000030C8 B001                    	mov	al, error_invalid_function
 13991 000030CA E93CE6                  	jmp	SYS_RET_ERR	
 13992                                  
 13993                                  ioctl_bad_handlej:
 13994 000030CD E905FF                  	jmp	ioctl_bad_handle
 13995                                  
 13996                                  ;---------------------------------------------------------------------------
 13997                                  ;
 13998                                  ; IOCTL AL = 8
 13999                                  ;
 14000                                  ; ENTRY:  DS = DOSDATA
 14001                                  ;
 14002                                  ; BUGBUG: Don't push anything on the stack between ioctl_rem_media: and 
 14003                                  ;         the call to Check_If_Net because Check_If_Net gets our
 14004                                  ;         return address off the stack if the drive is invalid.
 14005                                  ;
 14006                                  ;-------------------------------------------------------------------------
 14007                                  
 14008                                  ioctl_rem_media:
 14009                                  	; MSDOS 3.3 (& MSDOS 6.0)
 14010 000030D0 E83A01                  	CALL	Check_If_Net
 14011 000030D3 75F3                    	JNZ	short ioctl_bad_fun	; There are no "net devices", and they
 14012                                  					;   certainly don't know how to do this
 14013                                  					;   call.
 14014 000030D5 26F745040008            	TEST	word [ES:DI+SYSDEV.ATT],DEVOPCL ; See if device can
 14015 000030DB 74EB                    	JZ	short ioctl_bad_fun		; NO
 14016                                  
 14017                                  ;hkn; SS override for IOCALL
 14018 000030DD 36C606[2603]0F          	MOV	byte [SS:IOCALL_REQFUNC],DEVRMD
 14019 000030E3 B00D                    	MOV	AL,REMHL
 14020 000030E5 88DC                    	MOV	AH,BL			; Unit number
 14021 000030E7 36A3[2403]              	MOV	[SS:IOCALL_REQLEN],AX
 14022 000030EB 31C0                    	XOR	AX,AX
 14023 000030ED 36A3[2703]              	MOV	[SS:IOCALL_REQSTAT],AX
 14024 000030F1 06                      	PUSH	ES
 14025 000030F2 1F                      	POP	DS
 14026 000030F3 89FE                    	MOV	SI,DI			; DS:SI -> driver
 14027 000030F5 16                      	PUSH	SS
 14028 000030F6 07                      	POP	ES
 14029                                  
 14030                                  ;hkn; IOCALL is in DOSDATA (msconst.asm)
 14031 000030F7 BB[2403]                	MOV	BX,IOCALL		; ES:BX -> Call header
 14032 000030FA 1E                      	push	ds
 14033 000030FB 56                      	push	si
 14034 000030FC E8FF1D                  	call	DEVIOCALL2
 14035 000030FF 5E                      	pop	si
 14036 00003100 1F                      	pop	ds
 14037                                  
 14038                                  ;hkn; SS override
 14039 00003101 36A1[2703]              	MOV	AX,[SS:IOCALL_REQSTAT]	; Get Status word
 14040 00003105 250002                  	AND	AX,STBUI		; Mask to busy bit
 14041 00003108 B109                    	MOV	CL,9
 14042 0000310A D3E8                    	SHR	AX,CL			; Busy bit to bit 0
 14043 0000310C E9EEE5                  	jmp	SYS_RET_OK
 14044                                  
 14045                                  ;-------------------------------------------------------------------------
 14046                                  ;
 14047                                  ; IOCTL: AL = 9
 14048                                  ;
 14049                                  ; ENTRY: DS = DOSDATA
 14050                                  ;
 14051                                  ;-------------------------------------------------------------------------
 14052                                  
 14053                                  Ioctl_Drive_attr:
 14054                                  	; MSDOS 3.3 (& MSDOS 6.0)
 14055 0000310F 88D8                    	mov	al, bl
 14056 00003111 E86138                  	call	GETTHISDRV
 14057 00003114 724B                    	jc	short ioctl_drv_err
 14058 00003116 E8C500                  	call	Get_Driver_BL
 14059                                  	; MSDOS 6.0
 14060 00003119 7246                    	JC	short ioctl_drv_err	; drive not valid
 14061                                  
 14062 0000311B 268B5504                	mov	dx,[es:di+SYSDEV.ATT]	
 14063                                  					; get device attribute word
 14064 0000311F 88C3                    	MOV	BL,AL			; Phys letter to BL (A=0)
 14065                                  
 14066                                  ;hkn; SS override
 14067 00003121 36C43E[3A05]            	LES	DI,[SS:THISCDS]
 14068 00003126 26F745430080            	TEST	word [ES:DI+curdir.flags],curdir_isnet
 14069 0000312C 7403                    	JZ	short IOCTLShare
 14070                                  
 14071                                  	;or	dx,1000h ; msdos 3.3
 14072                                  
 14073                                  ;	Net devices don't return a device attribute word.
 14074                                  ;	Bit 12 = 1, meaning net device, all others = 0.
 14075                                  
 14076 0000312E BA0010                  	MOV	DX,1000h ;  MSDOS 6.0
 14077                                  IOCTLShare:
 14078 00003131 16                      	push	ss
 14079 00003132 1F                      	pop	ds
 14080 00003133 BE[6003]                	MOV	SI,OPENBUF
 14081 00003136 80C341                  	ADD	BL,"A"
 14082 00003139 881C                    	MOV	[SI],BL
 14083 0000313B C744013A00              	MOV	WORD [SI+1],003AH ; ":",0
 14084 00003140 B80003                  	MOV	AX,0300h
 14085 00003143 F8                      	CLC
 14086                                  	;INT	int_IBM
 14087 00003144 CD2A                    	int     2Ah	; Microsoft Networks - CHECK DIRECT I/O
 14088                                  			; DS:SI -> ASCIZ disk device name (may be full path or only drive
 14089                                  			; specifier--must include the colon)
 14090                                  			; Return: CF clear if absolute disk access allowed
 14091 00003146 7304                    	JNC	short IOCTLLocal	; Not shared
 14092 00003148 81CA0002                	OR	DX,0200H		; Shared, bit 9
 14093                                  IOCTLLocal:
 14094 0000314C 26F745430010            	TEST	word [ES:DI+curdir.flags],curdir_local
 14095 00003152 7404                    	JZ	short ioctl_set_DX
 14096 00003154 81CA0080                	OR	DX,8000h
 14097                                  ioctl_set_DX:
 14098 00003158 E8B0E4                  	call	Get_User_Stack
 14099 0000315B 895406                  	MOV	[SI+user_env.user_DX],DX
 14100 0000315E E99CE5                  	jmp	SYS_RET_OK
 14101                                  
 14102                                  ioctl_drv_err:
 14103 00003161 B00F                    	mov	al, error_invalid_drive
 14104 00003163 E9A3E5                  	jmp	SYS_RET_ERR
 14105                                  
 14106                                  ;--------------------------------------------------------------------------
 14107                                  ; IOCTL: AL = A
 14108                                  ;
 14109                                  ; ENTRY: DS = DOSDATA
 14110                                  ;
 14111                                  ;--------------------------------------------------------------------------
 14112                                  
 14113                                  IOCTL_Handle_Redir:
 14114 00003166 E89736                  	call	SFFromHandle		; ES:DI -> SFT
 14115 00003169 7303                    	JNC	short ioctl_got_sft	; have valid handle
 14116 0000316B E967FE                  	jmp	ioctl_bad_handle ; 10/08/2018
 14117                                  
 14118                                  ioctl_got_sft:
 14119 0000316E 268B5505                	MOV	DX,[ES:DI+SF_ENTRY.sf_flags] ; Get flags
 14120 00003172 EBE4                    	JMP	short ioctl_set_DX	; pass dx to user and return
 14121                                  
 14122                                  ioctl_bad_funj:
 14123 00003174 E951FF                  	JMP	ioctl_bad_fun
 14124                                  
 14125                                  ;--------------------------------------------------------------------------
 14126                                  ;
 14127                                  ; IOCTL: AL= 4,5
 14128                                  ;
 14129                                  ; ENTRY: DS = DOSDATA
 14130                                  ;	 SI = user's DS
 14131                                  ;
 14132                                  ;
 14133                                  ; BUGBUG: Don't push anything on the stack between ioctl_get_dev: and 
 14134                                  ;         the call to Check_If_Net because Check_If_Net gets our
 14135                                  ;         return address off the stack if the drive is invalid.
 14136                                  ;
 14137                                  ;-------------------------------------------------------------------------
 14138                                  
 14139                                  ioctl_get_dev:
 14140 00003177 E89300                  	CALL	Check_If_Net
 14141 0000317A 75F8                    	JNZ	short ioctl_bad_funj	; There are no "net devices", and they
 14142                                  					;   certainly don't know how to do this
 14143                                  					;   call.
 14144                                  ioctl_do_string:
 14145 0000317C 26F745040040            	TEST	word [ES:DI+SYSDEV.ATT],DEVIOCTL; See if device accepts control
 14146 00003182 74F0                    	JZ	short ioctl_bad_funj		; NO
 14147                                  					; assume IOCTL read
 14148 00003184 C606[2603]03            	MOV	byte [IOCALL_REQFUNC],DEVRDIOCTL
 14149                                  
 14150 00003189 A801                    	TEST	AL,1			; is it func. 4/5 or 2/3
 14151 0000318B 7405                    	JZ	short ioctl_control_call ; it is read. goto ioctl_control_call
 14152                                  
 14153                                  					; it is an IOCTL write
 14154 0000318D C606[2603]0C            	MOV	byte [IOCALL_REQFUNC],DEVWRIOCTL
 14155                                  
 14156                                  ioctl_control_call:
 14157 00003192 B016                    	MOV	AL,DRDWRHL
 14158                                  ioctl_setup_pkt:
 14159 00003194 88DC                    	MOV	AH,BL			; Unit number
 14160 00003196 A3[2403]                	MOV	[IOCALL_REQLEN],AX
 14161 00003199 31C0                    	XOR	AX,AX
 14162 0000319B A3[2703]                	MOV	[IOCALL_REQSTAT],AX
 14163 0000319E A2[3103]                	MOV	[IOMED],AL
 14164 000031A1 890E[3603]              	MOV	[IOSCNT],CX
 14165 000031A5 8916[3203]              	MOV	[IOXAD],DX
 14166 000031A9 8936[3403]              	MOV	[IOXAD+2],SI
 14167 000031AD 06                      	PUSH	ES
 14168 000031AE 1F                      	POP	DS
 14169 000031AF 89FE                    	MOV	SI,DI			; DS:SI -> driver
 14170 000031B1 16                      	PUSH	SS
 14171 000031B2 07                      	POP	ES
 14172                                  
 14173 000031B3 BB[2403]                	MOV	BX,IOCALL		; ES:BX -> Call header
 14174                                  ioctl_do_IO:
 14175 000031B6 E8451D                  	call	DEVIOCALL2
 14176                                  
 14177                                  ;hkn; SS override for IOCALL
 14178 000031B9 36F706[2703]0080        	TEST	word [SS:IOCALL_REQSTAT],STERR ;Error?
 14179 000031C0 7507                    	JNZ	short ioctl_string_err
 14180                                  
 14181                                  ;hkn; SS override
 14182 000031C2 36A1[3603]              	MOV	AX,[SS:IOSCNT]		; Get actual bytes transferred
 14183 000031C6 E934E5                  	jmp	SYS_RET_OK
 14184                                  
 14185                                  ioctl_string_err:
 14186 000031C9 368B3E[2703]            	MOV	DI,[SS:IOCALL_REQSTAT]	;Get Error
 14187                                  device_err:
 14188 000031CE 81E7FF00                	AND	DI,STECODE		; mask out irrelevant bits
 14189 000031D2 89F8                    	MOV	AX,DI
 14190 000031D4 E84128                  	call	SET_I24_EXTENDED_ERROR
 14191                                  
 14192                                  ;hkn; use SS override
 14193                                  ;hkn;	mov	ax,[CS:EXTERR]
 14194 000031D7 36A1[D202]              	mov	ax,[SS:EXTERR]
 14195 000031DB E92BE5                  	jmp	SYS_RET_ERR
 14196                                  
 14197                                  ;--------------------------------------------------------------------------
 14198                                  ; Proc name : Get_Driver_BL
 14199                                  ;
 14200                                  ;	DS is DOSDATA
 14201                                  ;	BL is drive number (0=default)
 14202                                  ;	Returns pointer to device in ES:DI, unit number in BL if carry clear
 14203                                  ;	No regs modified
 14204                                  ;
 14205                                  ;---------------------------------------------------------------------------
 14206                                  
 14207                                  Get_Driver_BL:
 14208 000031DE 50                      	PUSH	AX
 14209 000031DF 88D8                    	MOV	AL,BL			; Drive
 14210 000031E1 E89137                  	call	GETTHISDRV
 14211 000031E4 7225                    	jc	short ioctl_bad_drv
 14212 000031E6 30DB                    	XOR	BL,BL			; Unit zero on Net device
 14213 000031E8 C606[D102]03            	MOV	byte [EXTERR_LOCUS],errLOC_Net
 14214 000031ED C43E[3A05]              	LES	DI,[THISCDS]
 14215 000031F1 26F745430080            	TEST	word [ES:DI+curdir.flags],curdir_isnet
 14216 000031F7 26C47D45                	LES	DI,[ES:DI+curdir.devptr]; ES:DI -> Dpb or net dev
 14217 000031FB 750D                    	JNZ	short got_dev_ptr	; Is net
 14218 000031FD C606[D102]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 14219 00003202 268A5D01                	MOV	BL,[ES:DI+DPB.UNIT]	; Unit number
 14220 00003206 26C47D12                	LES	DI,[ES:DI+DPB.DRIVER_ADDR] ; Driver addr
 14221                                  got_dev_ptr:
 14222 0000320A F8                      	CLC
 14223                                  ioctl_bad_drv:
 14224 0000320B 58                      	POP	AX
 14225 0000320C C3                      	retn
 14226                                  
 14227                                  ;-------------------------------------------------------------------------
 14228                                  ; Proc Name : Check_If_Net:
 14229                                  ;
 14230                                  ;
 14231                                  ; Checks if the device is over the net or not. Returns result in ZERO flag.
 14232                                  ; If no device is found, the return address is popped off the stack, and a
 14233                                  ; jump is made to ioctl_drv_err.
 14234                                  ;
 14235                                  ; On Entry:
 14236                                  ; Registers same as those for Get_Driver_BL
 14237                                  ;
 14238                                  ; On Exit:
 14239                                  ; ZERO flag	- set if not a net device
 14240                                  ;		- reset if net device
 14241                                  ; ES:DI -> the device
 14242                                  ;
 14243                                  ;
 14244                                  ; BUGBUG: This function assumes the following stack setup on entry
 14245                                  ;
 14246                                  ;	  SP+2 -> Error return address
 14247                                  ;	  SP   -> Normal return address
 14248                                  ;
 14249                                  ;-------------------------------------------------------------------------
 14250                                  
 14251                                  Check_If_Net:
 14252                                  	; MSDOS 3.3 (& MSDOS 6.0)
 14253 0000320D E8CEFF                  	CALL	Get_Driver_BL
 14254 00003210 720F                    	JC	short ioctl_drv_err_pop	; invalid drive letter
 14255 00003212 06                      	PUSH	ES
 14256 00003213 57                      	PUSH	DI
 14257 00003214 C43E[3A05]              	LES	DI,[THISCDS]
 14258 00003218 26F745430080            	TEST	word [ES:DI+curdir.flags],curdir_isnet
 14259 0000321E 5F                      	POP	DI
 14260 0000321F 07                      	POP	ES
 14261 00003220 C3                      	retn
 14262                                  
 14263                                  ioctl_drv_err_pop:
 14264 00003221 58                      	pop	ax			; pop off return address
 14265 00003222 E93CFF                  	jmp	ioctl_drv_err
 14266                                  
 14267                                  ioctl_bad_funj3:
 14268 00003225 E9A0FE                  	jmp	ioctl_bad_fun
 14269                                  
 14270                                  ioctl_string_errj:
 14271 00003228 EB9F                    	jmp	ioctl_string_err
 14272                                  
 14273                                  ;--------------------------------------------------------------------------
 14274                                  ;
 14275                                  ; IOCTL: AL = E, F
 14276                                  ;
 14277                                  ; ENTRY: DS = DOSDATA
 14278                                  ;
 14279                                  ;
 14280                                  ; BUGBUG: Don't push anything on the stack between ioctl_drive_owner: and 
 14281                                  ;         the call to Check_If_Net because Check_If_Net gets our
 14282                                  ;         return address off the stack if the drive is invalid.
 14283                                  ;
 14284                                  ;--------------------------------------------------------------------------
 14285                                  
 14286                                  ioctl_drive_owner:
 14287                                  	; MSDOS 3.3 (& MSDOS 6.0)
 14288 0000322A E8E0FF                  	Call	Check_If_Net
 14289 0000322D 75F6                    	JNZ	short ioctl_bad_funj3 	; There are no "net devices", and they
 14290                                  					;   certainly don't know how to do this
 14291                                  					;   call.
 14292                                  	;TEST	word [ES:DI+SYSDEV.ATT],DEV320	; See if device can handle this
 14293                                  	; 09/09/2018
 14294 0000322F 26F6450440              	TEST	byte [ES:DI+SYSDEV.ATT],DEV320 ; 0040h
 14295 00003234 74EF                    	JZ	short ioctl_bad_funj3 	; NO
 14296 00003236 C606[2603]17            	mov	byte [IOCALL_REQFUNC],DEVGETOWN	; default to get owner
 14297 0000323B 3C0E                    	cmp	al,0Eh			; Get Owner ?
 14298 0000323D 7405                    	jz	short GetOwner
 14299                                  SetOwner:
 14300 0000323F C606[2603]18            	MOV	byte [IOCALL_REQFUNC],DEVSETOWN
 14301                                  GetOwner:
 14302 00003244 B00D                    	MOV	AL,OWNHL
 14303 00003246 88DC                    	MOV	AH,BL			; Unit number
 14304 00003248 A3[2403]                	MOV	[IOCALL_REQLEN],AX
 14305 0000324B 31C0                    	XOR	AX,AX
 14306 0000324D A3[2703]                	MOV	[IOCALL_REQSTAT],AX
 14307 00003250 06                      	PUSH	ES
 14308 00003251 1F                      	POP	DS
 14309 00003252 89FE                    	MOV	SI,DI			; DS:SI -> driver
 14310 00003254 16                      	PUSH	SS
 14311 00003255 07                      	POP	ES
 14312 00003256 BB[2403]                	MOV	BX,IOCALL		; ES:BX -> Call header
 14313 00003259 1E                      	push	ds
 14314 0000325A 56                      	push	si
 14315 0000325B E8A01C                  	call	DEVIOCALL2
 14316 0000325E 5E                      	pop	si
 14317 0000325F 1F                      	pop	ds
 14318                                  ;hkn; SS override
 14319 00003260 36F706[2703]0080        	TEST	word [SS:IOCALL_REQSTAT],STERR
 14320 00003267 75BF                    	jnz	short ioctl_string_errj
 14321 00003269 36A0[2503]              	MOV	AL,[SS:IOCALL_REQUNIT]	; Get owner returned by device
 14322                                  					; owner returned is 1-based.
 14323 0000326D E98DE4                  	jmp	SYS_RET_OK
 14324                                  
 14325                                  
 14326                                  ;============================================================================
 14327                                  ; DELETE.ASM, MSDOS 6.0, 1991
 14328                                  ;============================================================================
 14329                                  ; 07/08/2018 - Retro DOS v3.0
 14330                                  
 14331                                  ;	TITLE	DOS_DELETE - Internal DELETE call for MS-DOS
 14332                                  ;	NAME	DOS_DELETE
 14333                                  
 14334                                  ;
 14335                                  ;	Microsoft Confidential
 14336                                  ;	Copyright (C) Microsoft Corporation 1991
 14337                                  ;	All Rights Reserved.
 14338                                  ;
 14339                                  
 14340                                  ;**	DELETE.ASM - Low level routine for deleting files
 14341                                  ;
 14342                                  ;		DOS_DELETE
 14343                                  ;		REN_DEL_Check
 14344                                  ;		FastOpen_Delete	       ; DOS 3.3
 14345                                  ;		FastOpen_Update	       ; DOS 3.3
 14346                                  
 14347                                  
 14348                                  ;   Revision history:
 14349                                  ;
 14350                                  ;   A000  version 4.00	Jan. 1988
 14351                                  ;   A001  Fastopen Rename fix	April 1989
 14352                                  
 14353                                  
 14354                                  ;Installed = TRUE
 14355                                  
 14356                                  ;	i_need	NoSetDir,BYTE
 14357                                  ;	i_need	Creating,BYTE
 14358                                  ;	i_need	DELALL,BYTE
 14359                                  ;	i_need	THISDPB,DWORD
 14360                                  ;	i_need	THISSFT,DWORD
 14361                                  ;	i_need	THISCDS,DWORD
 14362                                  ;	i_need	CURBUF,DWORD
 14363                                  ;	i_need	ATTRIB,BYTE
 14364                                  ;	i_need	SATTRIB,BYTE
 14365                                  ;	i_need	WFP_START,WORD
 14366                                  ;	i_need	REN_WFP,WORD			 ;BN001
 14367                                  ;	i_need	NAME1,BYTE			 ;BN001
 14368                                  ;	i_need	FoundDel,BYTE
 14369                                  ;	i_need	AUXSTACK,BYTE
 14370                                  ;	i_need	VOLCHNG_FLAG,BYTE
 14371                                  ;	i_need	JShare,DWORD
 14372                                  ;	i_need	FastOpenTable,BYTE		  ; DOS 3.3
 14373                                  ;	i_need	FastTable,BYTE			  ; DOS 4.00
 14374                                  ;
 14375                                  ;	i_need	Del_ExtCluster,WORD		  ; DOS 4.00
 14376                                  ;
 14377                                  ;	i_need	SAVE_BX,WORD			  ; DOS 4.00
 14378                                  ;	i_need	DMAADD,DWORD
 14379                                  ;	i_need	RENAMEDMA,BYTE
 14380                                  
 14381                                  ;---------------------------------------------------------------------------
 14382                                  ;
 14383                                  ; Procedure Name : DOS_DELETE
 14384                                  ;
 14385                                  ; Inputs:
 14386                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 14387                                  ;		terminated)
 14388                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 14389                                  ;		( = -1 if current dir not involved, else
 14390                                  ;		 Points to first char after last "/" of current dir part)
 14391                                  ;	[THISCDS] Points to CDS being used
 14392                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 14393                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 14394                                  ; Function:
 14395                                  ;	Delete the specified file(s)
 14396                                  ; Outputs:
 14397                                  ;	CARRY CLEAR
 14398                                  ;		OK
 14399                                  ;	CARRY SET
 14400                                  ;	    AX is error code
 14401                                  ;		error_file_not_found
 14402                                  ;			Last element of path not found
 14403                                  ;		error_path_not_found
 14404                                  ;			Bad path (not in curr dir part if present)
 14405                                  ;		error_bad_curr_dir
 14406                                  ;			Bad path in current directory part of path
 14407                                  ;		error_access_denied
 14408                                  ;			Attempt to delete device or directory
 14409                                  ;		***error_sharing_violation***
 14410                                  ;			Deny both access required, generates an INT 24.
 14411                                  ;			This error is NOT returned. The INT 24H is generated,
 14412                                  ;			  and the file is ignored (not deleted). Delete will
 14413                                  ;			  simply continue on looking for more files.
 14414                                  ;			  Carry will NOT be set in this case.
 14415                                  ; DS preserved, others destroyed
 14416                                  ;
 14417                                  ;---------------------------------------------------------------------------
 14418                                  
 14419                                  FILEFOUND   equ 01h
 14420                                  FILEDELETED equ 10h
 14421                                  
 14422                                  DOS_DELETE:
 14423                                  
 14424                                  ;hkn; DOS_Delete is called from file.asm and fcbio.asm. DS has been set up 
 14425                                  ;hkn; appropriately at this point.
 14426                                  
 14427 00003270 E85BED                  	call	TestNet
 14428 00003273 7306                    	JNC	short LOCAL_DELETE
 14429                                  
 14430                                  ;IF NOT Installed
 14431                                  ;	transfer NET_DELETE
 14432                                  ;ELSE
 14433                                  	;MOV	AX,(MultNET SHL 8) | 19
 14434                                  	;INT	2FH
 14435                                  	;return
 14436                                  
 14437 00003275 B81311                  	mov	ax,1113h
 14438 00003278 CD2F                    	int     2Fh 	; Multiplex - NETWORK REDIRECTOR - DELETE REMOTE FILE
 14439                                  			; SS = DS = DOS CS, SDA first filename pointer -> 
 14440                                  			;		fully-qualified filename in DOS CS
 14441                                  			; SDA CDS pointer -> current directory structure for drive with file
 14442                                  			; Return: CF set on error
 14443 0000327A C3                      	retn
 14444                                  
 14445                                  ;ENDIF
 14446                                  
 14447                                  LOCAL_DELETE:
 14448 0000327B C606[0A05]00            	MOV	byte [FOUNDDEL],0	; No files found and no files deleted
 14449 00003280 E8E9ED                  	call	EcritDisk
 14450 00003283 C706[1805]00E5          	MOV	WORD [CREATING],DIRFREE*256+0 ; Assume not del *.*
 14451 00003289 8B36[4A05]              	MOV	SI,[WFP_START]
 14452                                  SKPNUL:
 14453 0000328D AC                      	LODSB
 14454 0000328E 08C0                    	OR	AL,AL
 14455 00003290 75FB                    	JNZ	short SKPNUL		; go to end
 14456 00003292 83EE04                  	SUB	SI,4			; Back over possible "*.*"
 14457 00003295 813C2A2E                	CMP	WORD [SI],2E2Ah ; "*."
 14458 00003299 7506                    	JNZ	short TEST_QUEST
 14459 0000329B 807C022A                	CMP	BYTE [SI+2],"*"
 14460 0000329F 741F                    	JZ	short CHECK_ATTS
 14461                                  TEST_QUEST:
 14462 000032A1 83EE09                  	SUB	SI,9		; Back over possible "????????.???"
 14463 000032A4 87FE                    	XCHG	DI,SI
 14464                                  
 14465 000032A6 16                      	push	ss
 14466                                  	;pop	ds ; ! Retro DOS v3.0 BUG !
 14467 000032A7 07                      	pop	es ; 17/05/2019 (BugFix)
 14468                                  
 14469 000032A8 B83F3F                  	MOV	AX,"??"
 14470 000032AB B90400                  	MOV	CX,4		; four sets of "??"
 14471 000032AE F3AF                    	REPE	SCASW
 14472 000032B0 751C                    	JNZ	short NOT_ALL
 14473 000032B2 87FE                    	XCHG	DI,SI
 14474 000032B4 AD                      	LODSW
 14475 000032B5 3D2E3F                  	CMP	AX,3F2Eh ; ".?"
 14476 000032B8 7514                    	JNZ	short NOT_ALL
 14477 000032BA AD                      	LODSW
 14478 000032BB 3D3F3F                  	CMP	AX,"??"
 14479 000032BE 750E                    	JNZ	short NOT_ALL
 14480                                  CHECK_ATTS:
 14481 000032C0 A0[0805]                	MOV	AL,[SATTRIB]
 14482 000032C3 241F                    	AND	AL,attr_hidden+attr_system+attr_directory+attr_volume_id+attr_read_only
 14483                                  					; Look only at hidden bits
 14484 000032C5 3C1F                    	CMP	AL,attr_hidden+attr_system+attr_directory+attr_volume_id+attr_read_only
 14485                                  					; All must be set
 14486 000032C7 7505                    	JNZ	short NOT_ALL
 14487                                  
 14488                                  ; NOTE WARNING DANGER-----
 14489                                  ;    This DELALL stuff is not safe. It allows directories to be deleted.
 14490                                  ;	It should ONLY be used by FORMAT in the ROOT directory.
 14491                                  
 14492 000032C9 C606[1905]00            	MOV	byte [DELALL],0		; DEL *.* - flag deleting all
 14493                                  NOT_ALL:
 14494 000032CE C606[F802]01            	MOV	byte [NoSetDir],1
 14495 000032D3 E86915                  	call	GetPathNoSet
 14496 000032D6 7313                    	JNC	short Del_found
 14497 000032D8 750C                    	JNZ	short _bad_path
 14498 000032DA 08C9                    	OR	CL,CL
 14499 000032DC 7408                    	JZ	short _bad_path
 14500                                  No_file:
 14501 000032DE B80200                  	MOV	AX,error_file_not_found
 14502                                  ErrorReturn:
 14503 000032E1 F9                      	STC
 14504 000032E2 E88FED                  	call	LcritDisk
 14505 000032E5 C3                      	retn
 14506                                  
 14507                                  _bad_path:
 14508 000032E6 B80300                  	MOV	AX,error_path_not_found
 14509 000032E9 EBF6                    	JMP	short ErrorReturn
 14510                                  
 14511                                  Del_found:
 14512 000032EB 750C                    	JNZ	short NOT_DIR		; Check for dir specified
 14513 000032ED 803E[1905]00            	CMP	byte [DELALL],0		; DelAll = 0 allows delete of dir.
 14514 000032F2 7405                    	JZ	short NOT_DIR
 14515                                  Del_access_err:
 14516 000032F4 B80500                  	MOV	AX,error_access_denied
 14517 000032F7 EBE8                    	JMP	short ErrorReturn
 14518                                  
 14519                                  NOT_DIR:
 14520 000032F9 08E4                    	OR	AH,AH			; Check if device name
 14521 000032FB 78F7                    	JS	short Del_access_err	; Can't delete I/O devices
 14522                                  
 14523                                  ; Main delete loop. CURBUF+2:BX points to a matching directory entry.
 14524                                  
 14525                                  DELFILE:
 14526 000032FD 800E[0A05]01            	OR	byte [FOUNDDEL],FILEFOUND ; file found, not deleted yet
 14527                                  
 14528                                  ; If we are deleting the Volume ID, then we set VOLUME_CHNG flag to make
 14529                                  ; DOS issue a build BPB call the next time this drive is accessed.
 14530                                  
 14531 00003302 1E                      	PUSH	DS
 14532 00003303 8A26[1905]              	MOV	AH,[DELALL]
 14533 00003307 C53E[7405]              	LDS	DI,[CURBUF]
 14534                                  	
 14535                                  ;hkn; SS override
 14536 0000330B 36F606[0605]01          	TEST	byte [SS:ATTRIB],attr_read_only ; are we deleting RO files too?
 14537 00003311 7509                    	JNZ	short DoDelete		; yes
 14538                                  
 14539 00003313 F6470B01                	TEST	byte [BX+dir_entry.dir_attr],attr_read_only
 14540 00003317 7403                    	JZ	short DoDelete		; not read only
 14541                                  
 14542 00003319 1F                      	POP	DS
 14543 0000331A EB29                    	JMP	SHORT DELNXT		; Skip it (Note ES:BP not set)
 14544                                  
 14545                                  DoDelete:
 14546 0000331C E87700                  	call	REN_DEL_Check		; Sets ES:BP = [THISDPB]
 14547 0000331F 7303                    	JNC	short DEL_SHARE_OK
 14548 00003321 1F                      	POP	DS
 14549 00003322 EB21                    	JMP	SHORT DELNXT		; Skip it
 14550                                  
 14551                                  DEL_SHARE_OK:
 14552                                  	; MSDOS 6.0
 14553                                  	;TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty 
 14554                                  	;				;LB. if already dirty		  ;AN000;
 14555                                  	;JNZ	short yesdirty		;LB.  don't increment dirty count ;AN000;
 14556                                  	;call	INC_DIRTY_COUNT		;LB.				  ;AN000;
 14557 00003324 804D0540                	OR	byte [DI+BUFFINFO.buf_flags],buf_dirty
 14558                                  ;yesdirty:
 14559                                  	;MOV	[BX+dir_entry.dir_name],AH ; Put in E5H or 0
 14560 00003328 8827                    	mov	[bx],ah ; 05/07/2019	
 14561 0000332A 8B1C                    	MOV	BX,[SI] 		; Get firclus pointer
 14562 0000332C 1F                      	POP	DS
 14563 0000332D 800E[0A05]10            	OR	byte [FOUNDDEL],FILEDELETED ; Deleted file
 14564                                  
 14565 00003332 83FB02                  	CMP	BX,2
 14566 00003335 720E                    	JB	short DELNXT		; File has invalid FIRCLUS (too small)
 14567 00003337 263B5E0D                	CMP	BX,[ES:BP+DPB.MAX_CLUSTER]
 14568 0000333B 7708                    	JA	short DELNXT		; File has invalid FIRCLUS (too big)
 14569                                  
 14570 0000333D E8AD21                  	call	RELEASE 		; Free file data
 14571 00003340 724E                    	JC	short No_fileJ
 14572                                  
 14573                                  ; DOS 3.3  FastOpen
 14574                                  
 14575 00003342 E8BA00                  	CALL	FastOpen_Delete 	; delete the dir info in fastopen
 14576                                  
 14577                                  ; DOS 3.3  FastOpen
 14578                                  
 14579                                  DELNXT:
 14580 00003345 C42E[2405]              	LES	BP,[THISDPB]		; Possible to get here without this set
 14581 00003349 E86714                  	call	GETENTRY		; Registers need to be reset
 14582 0000334C 7242                    	JC	short No_fileJ
 14583 0000334E E8A913                  	call	NEXTENT
 14584 00003351 73AA                    	JNC	short DELFILE
 14585 00003353 C42E[2405]              	LES	BP,[THISDPB]		; NEXTENT sets ES=DOSGROUP
 14586                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 14587 00003357 268A4600                	MOV	AL,[ES:BP]
 14588 0000335B E8D32B                  	call	FLUSHBUF
 14589 0000335E 7230                    	JC	short No_fileJ
 14590                                  ;
 14591                                  ; Now we need to test FoundDel for our flags. The cases to consider are:
 14592                                  ;
 14593                                  ;   not found not deleted		file not found
 14594                                  ;   not found	  deleted		*** impossible ***
 14595                                  ;	found not deleted		access denied (read-only)
 14596                                  ;	found	  deleted		no error
 14597                                  ;
 14598 00003360 F606[0A05]10            	TEST	byte [FOUNDDEL],FILEDELETED ; did we delete a file?
 14599 00003365 7422                    	JZ	short DelError		; no, figure out what's wrong.
 14600                                  ; We set VOLCHNG_FLAG to indicate that we have changed the volume label
 14601                                  ; and to force the DOS to issue a media check.
 14602 00003367 F606[0605]08            	TEST	byte [ATTRIB],attr_volume_id
 14603 0000336C 7417                    	jz	short No_Set_Flag
 14604 0000336E 50                      	PUSH	AX
 14605 0000336F 06                      	PUSH	ES
 14606 00003370 57                      	PUSH	DI
 14607 00003371 C43E[3A05]              	LES	DI,[THISCDS]
 14608 00003375 268A25                  	MOV	AH,[ES:DI]		; Get drive
 14609 00003378 80EC41                  	SUB	AH,'A'                  ; Convert to 0-based
 14610 0000337B 8826[070A]              	mov	[VOLCHNG_FLAG],AH
 14611                                  	
 14612                                  	; MSDOS 6.0
 14613                                  	;XOR	BH,BH			;>32mb delete volume id from boot record ;AN000;
 14614                                  	;call	Set_Media_ID		;>32mb set volumme id to boot record	 ;AN000;
 14615                                  	 
 14616 0000337F E83D28                  	call	FATREAD_CDS		; force media check
 14617 00003382 5F                      	POP	DI
 14618 00003383 07                      	POP	ES
 14619 00003384 58                      	POP	AX
 14620                                  No_Set_Flag:
 14621 00003385 E8ECEC                  	call	LcritDisk		; carry is clear
 14622 00003388 C3                      	retn
 14623                                  DelError:
 14624 00003389 F606[0A05]01            	TEST	byte [FOUNDDEL],FILEFOUND ; not deleted. Did we find file?
 14625 0000338E 7503                    	JNZ	short Del_access_errJ 	; yes. Access denied
 14626                                  No_fileJ:
 14627 00003390 E94BFF                  	JMP	No_file ; 10/08/2018 		; Nope
 14628                                  Del_access_errJ:
 14629 00003393 E95EFF                  	JMP	Del_access_err ; 10/08/2018
 14630                                  
 14631                                  ; 08/08/2018 - Retro DOS v3.0
 14632                                  
 14633                                  ;Break	<REN_DEL_Check - check for access for rename and delete>
 14634                                  ;---------------------------------------------------------------------------
 14635                                  ; Procedure Name : REN_DEL_Check
 14636                                  ;
 14637                                  ; Inputs:
 14638                                  ;	[THISDPB] set
 14639                                  ;	[CURBUF+2]:BX points to entry
 14640                                  ;	[CURBUF+2]:SI points to firclus field of entry
 14641                                  ;	[WFP_Start] points to name
 14642                                  ; Function:
 14643                                  ;	Check for Exclusive access on given file.
 14644                                  ;	  Used by RENAME, SET_FILE_INFO, and DELETE.
 14645                                  ; Outputs:
 14646                                  ;	ES:BP = [THISDPB]
 14647                                  ;	NOTE: The WFP string pointed to by [WFP_Start] Will be Modified.  The
 14648                                  ;		last element will be loaded from the directory entry.  This is
 14649                                  ;		so the name given to the sharer doesn't have any meta chars in
 14650                                  ;		it.
 14651                                  ;	Carry set if sharing violation, INT 24H generated
 14652                                  ;	    NOTE THAT AX IS NOT error_sharing_violation.
 14653                                  ;		This is because input AX is preserved.
 14654                                  ;		Caller must set the error if needed.
 14655                                  ;	Carry clear
 14656                                  ;		OK
 14657                                  ; AX,DS,BX,SI,DI preserved
 14658                                  ;---------------------------------------------------------------------------
 14659                                  
 14660                                  REN_DEL_Check:
 14661                                  
 14662 00003396 1E                      	PUSH	DS
 14663 00003397 57                      	PUSH	DI
 14664 00003398 50                      	PUSH	AX
 14665 00003399 53                      	PUSH	BX
 14666 0000339A 56                      	PUSH	SI		; Save CURBUF pointers
 14667                                  	
 14668 0000339B 16                      	push	ss
 14669 0000339C 07                      	pop	es
 14670                                  
 14671                                  ;hkn; context ES will assume ES to DOSDATA
 14672                                  ;hkn; ASSUME	ES:DOSGROUP
 14673                                  
 14674                                  ;hkn; SS override
 14675 0000339D 368B3E[4A05]            	MOV	DI,[SS:WFP_START] ; ES:DI -> WFP
 14676 000033A2 89DE                    	MOV	SI,BX
 14677                                  
 14678                                  ;hkn; SS override
 14679 000033A4 368E1E[7605]            	MOV	DS,[SS:CURBUF+2] ; DS:SI -> entry (FCB style name)
 14680 000033A9 89FB                    	MOV	BX,DI		; Set backup limit for skipback
 14681 000033AB 83C302                  	ADD	BX,2		; Skip over d: to point to leading '\'
 14682 000033AE E8B9EB                  	call	StrLen		; CX is length of ES:DI including NUL
 14683 000033B1 49                      	DEC	CX		; Don't include nul in count
 14684 000033B2 01CF                    	ADD	DI,CX		; Point to NUL at end of string
 14685 000033B4 E88138                  	call	SkipBack	; Back up one element
 14686 000033B7 47                      	INC	DI		; Point to start of last element
 14687                                  
 14688                                  ;hkn; SS override
 14689                                  	; MSDOS 6.0
 14690                                  	;MOV	[SS:SAVE_BX],DI	;IFS. save for DOS_RENAME   ;AN000;
 14691                                  	;
 14692 000033B8 E860FA                  	call	PackName	; Transfer name from entry to ASCIZ tail.
 14693 000033BB 5E                      	POP	SI		; Get back entry pointers
 14694 000033BC 5B                      	POP	BX
 14695 000033BD 53                      	PUSH	BX
 14696 000033BE 56                      	PUSH	SI		; Back on stack
 14697                                  	
 14698 000033BF 16                      	push	ss
 14699 000033C0 1F                      	pop	ds
 14700                                  
 14701                                  ;hkn; context DS will assume ES to DOSDATA
 14702                                  ;hkn; ASSUME	DS:DOSGROUP
 14703                                  
 14704                                  ;
 14705                                  ; Close the file if possible by us.
 14706                                  ;
 14707                                  ;if installed
 14708 000033C1 FF1E[9000]              	Call	far [JShare+(13*4)] ; 13 = ShCloseFile
 14709                                  ;else
 14710                                  ;	Call	ShCloseFile
 14711                                  ;endif
 14712 000033C5 8C1E[3805]              	MOV	[THISSFT+2],DS
 14713                                  
 14714                                  ;hkn; AUXSTACK is in DOSDATA
 14715 000033C9 C706[3605][D106]        	MOV	word [THISSFT],AUXSTACK-SF_ENTRY.size
 14716                                  				; Scratch space
 14717 000033CF 30E4                    	XOR	AH,AH		; Indicate file to DOOPEN (high bit off)
 14718 000033D1 E8F01D                  	call	DOOPEN		; Fill in SFT for share check
 14719 000033D4 C43E[3605]              	LES	DI,[THISSFT]
 14720 000033D8 26C745021000            	MOV	word [ES:DI+SF_ENTRY.sf_mode],SHARING_DENY_BOTH
 14721                                  				; requires exclusive access
 14722                                  	;MOV	word [ES:DI+SF_ENTRY.sf_ref_count],1 ; Pretend open
 14723 000033DE 26C7050100              	mov	word [ES:DI],1
 14724 000033E3 E8783F                  	call	ShareEnter
 14725 000033E6 720D                    	jc	short CheckDone
 14726 000033E8 C43E[3605]              	LES	DI,[THISSFT]
 14727                                  	;MOV	word [ES:DI+SF_ENTRY.sf_ref_count],0
 14728 000033EC 26C7050000              	mov	word [ES:DI],0	; Pretend closed and free
 14729                                  	
 14730 000033F1 E8643F                  	call	ShareEnd	; Tell sharer we're done with THISSFT
 14731 000033F4 F8                      	CLC
 14732                                  CheckDone:
 14733 000033F5 C42E[2405]              	LES	BP,[THISDPB]
 14734 000033F9 5E                      	POP	SI
 14735 000033FA 5B                      	POP	BX
 14736 000033FB 58                      	POP	AX
 14737 000033FC 5F                      	POP	DI
 14738 000033FD 1F                      	POP	DS
 14739 000033FE C3                      	retn
 14740                                  
 14741                                  ;Break	<FastOpen_Delete - delete dir info in fastopen>
 14742                                  ;---------------------------------------------------------------------------
 14743                                  ; Procedure Name : FastOpen_Delete
 14744                                  ; Inputs:
 14745                                  ;	None
 14746                                  ; Function:
 14747                                  ;	Call FastOpen to delete the dir info.
 14748                                  ; Outputs:
 14749                                  ;	None
 14750                                  ;---------------------------------------------------------------------------
 14751                                  
 14752                                  FastOpen_Delete:
 14753 000033FF 9C                      	PUSHF			; save flag
 14754 00003400 56                      	PUSH	SI		; save registers
 14755 00003401 53                      	PUSH	BX
 14756 00003402 50                      	PUSH	AX
 14757                                  ;hkn; SS override
 14758 00003403 8B36[4A05]              	MOV	SI,[WFP_START]	; ds:si points to path name
 14759 00003407 B003                    	MOV	AL,FONC_delete	; al = 3
 14760                                  fastinvoke:
 14761                                  ;hkn; FastTable is in DOSDATA
 14762 00003409 BB[450F]                	MOV	BX,FastTable+2
 14763 0000340C FF1F                    	CALL	far [BX]	; call fastopen
 14764 0000340E 58                      	POP	AX		; restore registers
 14765 0000340F 5B                      	POP	BX
 14766 00003410 5E                      	POP	SI
 14767 00003411 9D                      	POPF			; restore flag
 14768 00003412 C3                      	retn
 14769                                  
 14770                                  ;Break	<FastOpen_Update - update dir info in fastopen>
 14771                                  ;---------------------------------------------------------------------------
 14772                                  ; Procedure Name : FastOpen_Update
 14773                                  ;
 14774                                  ; Inputs:
 14775                                  ;	DL     drive number (A=0,B=1,,,)
 14776                                  ;	CX     first cluster #
 14777                                  ;	AH     0 updates dir entry
 14778                                  ;	       1 updates CLUSNUM , BP = new CLUSNUM
 14779                                  ;	ES:DI  directory entry
 14780                                  ; Function:
 14781                                  ;	Call FastOpen to update the dir info.
 14782                                  ; Outputs:
 14783                                  ;	None
 14784                                  ;---------------------------------------------------------------------------
 14785                                  
 14786                                  FastOpen_Update:
 14787 00003413 9C                      	PUSHF			; save flag
 14788 00003414 56                      	PUSH	SI
 14789 00003415 53                      	PUSH	BX		; save regs
 14790 00003416 50                      	PUSH	AX
 14791 00003417 B004                    	MOV	AL,FONC_update	; al = 4
 14792 00003419 EBEE                    	JMP	short fastinvoke
 14793                                  
 14794                                  ;Break	<FastOpen_Rename - Rename directory>	   ; PTR 5622
 14795                                  ;---------------------------------------------------------------------------
 14796                                  ; PROCEDURE Name : FastOpen_Rename
 14797                                  ;
 14798                                  ; Inputs:
 14799                                  ;	 REN_WFP   = Path Name
 14800                                  ;	 NAME1	   = New Name
 14801                                  ; Function:
 14802                                  ;	Call FastOpen to rename the dir entry in the cache
 14803                                  ; Outputs:
 14804                                  ;	None
 14805                                  ;---------------------------------------------------------------------------
 14806                                  
 14807                                  FastOpen_Rename:
 14808                                  	; 08/08/2018 - Retro DOS v3.0
 14809                                  	; MSDOS 6.0
 14810                                  	;PUSHF			;AN001 save flag
 14811                                  	;PUSH	SI		;AN001 save registers
 14812                                  	;PUSH	DI		;AN001
 14813                                  	;PUSH	BX		;AN001
 14814                                  	;PUSH	AX		;AN001
 14815                                  	;
 14816                                  ;hkn; SS override
 14817                                  	;;MOV	SI,[SS:REN_WFP]	;AN001	;;AN001  ds:si-->Path name addrs
 14818                                  	;
 14819                                  	; ? - 08/08/2018 - Retro DOS v3.0
 14820                                  	;push	ss
 14821                                  	;pop	ds
 14822                                  	;mov	si,[REN_WFP]
 14823                                  	;
 14824                                  ;hkn; NAME1 is in DOSDATA
 14825                                  	;MOV	DI,NAME1	;;AN001  ds:di-->New name addrs
 14826                                  	;MOV	AL,FONC_Rename	;;AN001  al = 6
 14827                                  	;
 14828                                  ;hkn; FastTable is in DOSDATA
 14829                                  	;MOV	BX,FastTable+2
 14830                                  	;CALL	far [BX]	;;AN001  call fastopen
 14831                                  	;
 14832                                  	;POP	AX		; restore registers  ;AN001
 14833                                  	;POP	BX				     ;AN001
 14834                                  	;POP	DI				     ;AN001
 14835                                  	;POP	SI				     ;AN001
 14836                                  	;POPF			; restore flag	     ;AN001
 14837                                  	;retn					     ;AN001
 14838                                  
 14839                                  	; MSDOS 6.0
 14840                                  ;entry Fast_Dispatch		; future fastxxxx entry	;AN000;
 14841                                  Fast_Dispatch:
 14842                                  ;hkn; FastTable is in DOSDATA
 14843                                  	;MOV	SI,FastTable+2	; index to the	     ;AN000;
 14844                                  ;hkn; use SS override
 14845                                  	;CALL	far [SS:SI]	; RMFD call fastopen
 14846                                  	;retn
 14847                                  
 14848                                  ;============================================================================
 14849                                  ; RENAME.ASM, MSDOS 6.0, 1991
 14850                                  ;============================================================================
 14851                                  ; 08/08/2018 - Retro DOS v3.0
 14852                                  
 14853                                  ;	TITLE	DOS_RENAME - Internal RENAME call for MS-DOS
 14854                                  ;	NAME	DOS_RENAME
 14855                                  
 14856                                  ;**	Low level routine for renaming files
 14857                                  ;
 14858                                  ;	DOS_RENAME
 14859                                  ;
 14860                                  ;	Modification history:
 14861                                  ;
 14862                                  ;	    Created: ARR 30 March 1983
 14863                                  
 14864                                  ;----------------------------------------------------------------------------
 14865                                  ;
 14866                                  ; Procedure Name : DOS_RENAME
 14867                                  ;
 14868                                  ; Inputs:
 14869                                  ;	[WFP_START] Points to SOURCE WFP string ("d:/" must be first 3
 14870                                  ;		chars, NUL terminated)
 14871                                  ;	[CURR_DIR_END] Points to end of Current dir part of string [SOURCE]
 14872                                  ;		( = -1 if current dir not involved, else
 14873                                  ;		 Points to first char after last "/" of current dir part)
 14874                                  ;	[REN_WFP] Points to DEST WFP string ("d:/" must be first 3
 14875                                  ;		chars, NUL terminated)
 14876                                  ;	[THISCDS] Points to CDS being used
 14877                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 14878                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 14879                                  ; Function:
 14880                                  ;	Rename the specified file(s)
 14881                                  ;	NOTE: This routine uses most of AUXSTACK as a temp buffer.
 14882                                  ; Outputs:
 14883                                  ;	CARRY CLEAR
 14884                                  ;	    OK
 14885                                  ;	CARRY SET
 14886                                  ;	    AX is error code
 14887                                  ;		error_file_not_found
 14888                                  ;			No match for source, or dest path invalid
 14889                                  ;		error_not_same_device
 14890                                  ;			Source and dest are on different devices
 14891                                  ;		error_access_denied
 14892                                  ;			Directory specified (not simple rename),
 14893                                  ;			Device name given, Destination exists.
 14894                                  ;			NOTE: In third case some renames may have
 14895                                  ;			 been done if metas.
 14896                                  ;		error_path_not_found
 14897                                  ;			Bad path (not in curr dir part if present)
 14898                                  ;			SOURCE ONLY
 14899                                  ;		error_bad_curr_dir
 14900                                  ;			Bad path in current directory part of path
 14901                                  ;			SOURCE ONLY
 14902                                  ;		error_sharing_violation
 14903                                  ;			Deny both access required, generates an INT 24.
 14904                                  ; DS preserved, others destroyed
 14905                                  ;
 14906                                  ;----------------------------------------------------------------------------
 14907                                  
 14908                                  DOS_RENAME:
 14909                                  
 14910                                  ;hkn; DOS_RENAME is called from file.asm and fcbio.asm. DS has been set up
 14911                                  ;hkn; at this point to DOSDATA.
 14912                                  
 14913 0000341B E8B0EB                  	call	TestNet
 14914 0000341E 7306                    	JNC	short LOCAL_RENAME
 14915                                  
 14916                                  ;IF NOT Installed
 14917                                  ;	transfer NET_RENAME
 14918                                  ;ELSE
 14919                                  	;MOV	AX,(MultNET SHL 8) OR 17
 14920                                  	;INT	2FH
 14921                                  	;return
 14922                                  
 14923 00003420 B81111                  	mov     ax, 1111h
 14924 00003423 CD2F                    	int     2Fh 	; Multiplex - NETWORK REDIRECTOR - RENAME REMOTE FILE
 14925                                  			; SS = DS = DOS CS, 
 14926                                  			; SDA first filename pointer = offset of fully-qualified old name
 14927                                  			; SDA CDS pointer -> current directory
 14928                                  			; Return: CF set on error
 14929 00003425 C3                      	retn
 14930                                  ;ENDIF
 14931                                  
 14932                                  LOCAL_RENAME:
 14933 00003426 C606[D102]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 14934 0000342B 8B36[4A05]              	MOV	SI,[WFP_START]
 14935 0000342F 8B3E[4C05]              	MOV	DI,[REN_WFP]
 14936 00003433 8A04                    	MOV	AL,[SI]
 14937 00003435 8A25                    	MOV	AH,[DI]
 14938 00003437 0D2020                  	OR	AX,2020H		; Lower case
 14939 0000343A 38E0                    	CMP	AL,AH
 14940 0000343C 7405                    	JZ	short SAMEDRV
 14941 0000343E B81100                  	MOV	AX,error_not_same_device
 14942 00003441 F9                      	STC
 14943 00003442 C3                      	retn
 14944                                  
 14945                                  SAMEDRV:
 14946 00003443 FF36[DC02]              	PUSH	WORD [DMAADD+2]
 14947 00003447 FF36[DA02]              	PUSH	WORD [DMAADD]
 14948 0000344B 8C1E[DC02]              	MOV	[DMAADD+2],DS
 14949                                  
 14950                                  ;hkn; RENAMEDMA is in DOSDATA
 14951 0000344F C706[DA02][8605]        	MOV	WORD [DMAADD],RENAMEDMA
 14952 00003455 C606[0B05]00            	MOV	byte [FOUND_DEV],0	; Rename fails on DEVS, assume not a dev
 14953 0000345A E80FEC                  	call	EcritDisk
 14954 0000345D E8B804                  	call	DOS_SEARCH_FIRST	; Sets [NoSetDir] to 1, [CURBUF+2]:BX
 14955                                  					;    points to entry
 14956 00003460 7315                    	JNC	short Check_Dev
 14957 00003462 83F812                  	CMP	AX,error_no_more_files
 14958 00003465 7503                    	JNZ	short GOTERR
 14959 00003467 B80200                  	MOV	AX,error_file_not_found
 14960                                  GOTERR:
 14961 0000346A F9                      	STC
 14962                                  RENAME_POP:
 14963 0000346B 8F06[DA02]              	POP	WORD [DMAADD]
 14964 0000346F 8F06[DC02]              	POP	WORD [DMAADD+2]
 14965 00003473 E8FEEB                  	call	LcritDisk
 14966 00003476 C3                      	retn
 14967                                  
 14968                                  Check_Dev:
 14969 00003477 B80500                  	MOV	AX,error_access_denied	; Assume error
 14970                                  	;
 14971                                  	; MSDOS 6.0
 14972                                  	;PUSH	DS			      ;PTM.			    ;AN000;
 14973                                  	;LDS	SI,[DMAADD]		      ;PTM.  chek if source a dir   ;AN000;
 14974                                  	;!?;ADD	SI,find_buf.attr	      ;PTM.			    ;AN000;
 14975                                  	;!?;TEST byte [SI+dir_entry.dir_attr],attr_directory  ;PTM.	    ;AN000;
 14976                                  	;JZ	short notdir		      ;PTM.			    ;AN000;
 14977                                  	;MOV	SI,[REN_WFP]		      ;PTM.  if yes, make sure path ;AN000;
 14978                                  	;call	Check_Pathlen2		      ;PTM.   length < 67	    ;AN000;
 14979                                  ;notdir:
 14980                                  	;POP	DS			      ;PTM.			    ;AN000;
 14981                                  	;JA	short GOTERR		      ;PTM.			    ;AN000;
 14982                                  	;
 14983                                  	; MSDOS 3.3 (& MSDOS 6.0)
 14984 0000347A 803E[0B05]00            	CMP	byte [FOUND_DEV],0
 14985 0000347F 75E9                    	JNZ	short GOTERR
 14986                                  ; At this point a source has been found. There is search continuation info (a
 14987                                  ; la DOS_SEARCH_NEXT) for the source at RENAMEDMA, together with the first
 14988                                  ; directory entry found.
 14989                                  ; [THISCDS], [THISDPB], and [THISDRV] are set and will remain correct
 14990                                  ; throughout the RENAME since it is known at this point that the source and
 14991                                  ; destination are both on the same device.
 14992                                  ; [SATTRIB] is also set.
 14993 00003481 89DE                    	MOV	SI,BX
 14994 00003483 83C61A                  	ADD	SI,dir_entry.dir_first
 14995 00003486 E80DFF                  	call	REN_DEL_Check
 14996 00003489 7305                    	JNC	short REN_OK1
 14997 0000348B B82000                  	MOV	AX,error_sharing_violation
 14998 0000348E EBDB                    	JMP	short RENAME_POP
 14999                                  
 15000                                  ;------------------------------------------------------------------------------
 15001                                  ; Check if the source is a file or directory. If file, delete the entry
 15002                                  ; from the Fastopen cache. If directory, rename it later
 15003                                  ;------------------------------------------------------------------------------
 15004                                  REN_OK1:				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 15005                                  	; MSDOS 6.0
 15006                                  	;PUSH	SI
 15007                                  	;LDS	SI,[DMAADD]		;BN00X; PTM. check if source a dir ;AN000;
 15008                                  	;!?;ADD	SI,find_buf.attr	;;BN00XPTM.P5520		   ;AN000;
 15009                                  	;!?;TEST byte [SI+dir_entry.dir_attr],attr_directory ;;BN00XPTM.   ;AN000;
 15010                                  	;JZ	short NOT_DIR1		;;BN00XPTM.			   ;AN000;
 15011                                  	;POP	SI			;BN00X
 15012                                  	;JMP	SHORT SWAP_SOURCE	;BN00X
 15013                                  	;
 15014                                  ;NOT_DIR1:				;;BN00X it is a file, delete the entry
 15015                                  	;POP	SI
 15016                                  	;
 15017                                  	; MSDOS 3.3 (& MSDOS 6.0)	
 15018 00003490 E86CFF                  	call	FastOpen_Delete 	; delete dir info in fastopen DOS 3.3
 15019                                  
 15020                                  ;SWAP_SOURCE:
 15021                                  	; MSDOS 3.3
 15022                                  	;MOV	SI,[REN_WFP]
 15023                                  	;MOV	[WFP_START],SI
 15024                                  	; MSDOS 6.0
 15025 00003493 A1[4A05]                	MOV	AX,[WFP_START]		; Swap source and destination
 15026 00003496 8B36[4C05]              	MOV	SI,[REN_WFP]		; Swap source and destination
 15027 0000349A 8936[4A05]              	MOV	[WFP_START],SI		; WFP_START = Destination path
 15028 0000349E A3[4C05]                	MOV	[REN_WFP],AX		; REN_WFP   = Source path
 15029                                  	; MSDOS 3.3 (& MSDOS 6.0)
 15030 000034A1 C706[4E05]FFFF          	MOV	word [CURR_DIR_END],-1	; No current dir on dest
 15031 000034A7 C706[1805]FFE5          	MOV	WORD [CREATING],DIRFREE*256+0FFh  ; Creating, not DEL *.*
 15032                                  					; A rename is like a CREATE_NEW as far
 15033                                  					; as the destination is concerned.
 15034 000034AD E88F13                  	call	GetPathNoSet
 15035                                  ;   If this GETPATH fails due to file not found, we know all renames will work
 15036                                  ;   since no files match the destination name. If it fails for any other
 15037                                  ;   reason, the rename fails on a path not found, or whatever (also fails if
 15038                                  ;   we find a device or directory). If the GETPATH succeeds, we aren't sure
 15039                                  ;   if the rename should fail because we haven't built an explicit name by
 15040                                  ;   substituting for the meta chars in it. In this case the destination file
 15041                                  ;   spec with metas is in [NAME1] and the explicit source name is at RENAMEDMA
 15042                                  ;   in the directory entry part.
 15043 000034B0 7223                    	JC	short NODEST
 15044                                  	;; MSDOS 6.0
 15045                                  	;; JZ	short BAD_ACC 		; Dest string is a directory	;AC000;
 15046                                  	; !! MSDOS 3.3 !!
 15047 000034B2 7404                    	JZ	short BAD_ACC ; !!	; Dest string is a directory
 15048                                  	;
 15049 000034B4 08E4                    	OR	AH,AH			; Device?
 15050 000034B6 7930                    	JNS	short SAVEDEST		; No, continue
 15051                                  BAD_ACC:
 15052 000034B8 B80500                  	MOV	AX,error_access_denied
 15053 000034BB F9                      	STC
 15054                                  RENAME_CLEAN:
 15055 000034BC 9C                      	PUSHF				; Save carry state
 15056 000034BD 50                      	PUSH	AX			; and error code (if carry set)
 15057 000034BE A0[1105]                	MOV	AL,[THISDRV]
 15058 000034C1 E86D2A                  	call	FLUSHBUF
 15059 000034C4 58                      	POP	AX
 15060 000034C5 803E[F602]00            	CMP	byte [FAILERR],0
 15061 000034CA 7503                    	JNZ	short BAD_ERR		; User FAILed to I 24
 15062 000034CC 9D                      	POPF
 15063 000034CD EB9C                    	JMP	short RENAME_POP
 15064                                  
 15065                                  BAD_ERR:
 15066 000034CF 58                      	POP	AX			; Saved flags
 15067 000034D0 B80300                  	MOV	AX,error_path_not_found
 15068 000034D3 EB95                    	JMP	short GOTERR
 15069                                  
 15070                                  NODEST:
 15071 000034D5 750B                    	JNZ	short BAD_PATH
 15072 000034D7 803E[F602]00            	CMP	byte [FAILERR],0
 15073 000034DC 7504                    	JNZ	short BAD_PATH	; Search for dest failed because user FAILed on
 15074                                  				;	I 24
 15075 000034DE 08C9                    	OR	CL,CL
 15076 000034E0 7506                    	JNZ	short SAVEDEST
 15077                                  BAD_PATH:
 15078 000034E2 B80300                  	MOV	AX,error_path_not_found
 15079 000034E5 F9                      	STC
 15080 000034E6 EB83                    	JMP	short RENAME_POP
 15081                                  
 15082                                  SAVEDEST:
 15083 000034E8 16                      	push	ss
 15084 000034E9 07                      	pop	es
 15085                                  
 15086                                  ;hkn; NAME1 & NAME2 is in DOSDATA
 15087 000034EA BF[F204]                	MOV	DI,NAME2
 15088 000034ED BE[E604]                	MOV	SI,NAME1
 15089                                  
 15090 000034F0 B90B00                  	MOV	CX,11
 15091 000034F3 F3A4                    	REP	MOVSB			; Save dest with metas at NAME2
 15092 000034F5 A1[5805]                	MOV	AX,[DIRSTART]
 15093 000034F8 A3[FF04]                	MOV	[DESTSTART],AX
 15094                                  BUILDDEST:
 15095 000034FB 16                      	push	ss
 15096 000034FC 07                      	pop	es			; needed due to JMP BUILDDEST below
 15097                                  
 15098                                  ;hkn; RENAMEDMA, NAME1, NAME2 in DOSDATA
 15099 000034FD BB[9B05]                	MOV	BX,RENAMEDMA+21		; Source of replace chars
 15100 00003500 BF[E604]                	MOV	DI,NAME1		; Real dest name goes here
 15101 00003503 BE[F204]                	MOV	SI,NAME2		; Raw dest
 15102                                  
 15103 00003506 B90B00                  	MOV	CX,11
 15104                                  	
 15105                                  	; MSDOS 6.0
 15106                                  	;CALL	NEW_RENAME		;IFS. replace ? chars	;AN000;
 15107                                  
 15108                                  	; MSDOS 3.3
 15109                                  
 15110                                  ; 08/08/2018 - Retro DOS v3.0
 15111                                  ; MSDOS 6.0 
 15112                                  ;---------------------------------------------------------------------------
 15113                                  ;Procedure: NEW_RENAME
 15114                                  ;
 15115                                  ;Input: DS:SI -> raw string with ?
 15116                                  ;	ES:DI -> destination string
 15117                                  ;	DS:BX -> source string
 15118                                  ;Function: replace ? chars of raw string with chars in source string and
 15119                                  ;	   put in destination string
 15120                                  ;Output: ES:DI-> new string
 15121                                  ;---------------------------------------------------------------------------
 15122                                  
 15123                                  NEW_RENAME:
 15124                                  NEWNAM:
 15125                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 341Ah
 15126 00003509 AC                      	LODSB
 15127 0000350A 3C3F                    	CMP	AL,"?"
 15128 0000350C 7502                    	JNZ	short NOCHG
 15129 0000350E 8A07                    	MOV	AL,[BX] 		; Get replace char
 15130                                  NOCHG:
 15131 00003510 AA                      	STOSB
 15132 00003511 43                      	INC	BX			; Next replace char
 15133 00003512 E2F5                    	LOOP	NEWNAM
 15134                                  	; MSSOS 6.0
 15135                                  	;retn
 15136                                  
 15137                                  	; MSDOS 3.3 (& MSDOS 6.0)
 15138 00003514 C606[0605]16            	MOV	byte [ATTRIB],attr_all	; Stop duplicates with any attributes
 15139 00003519 C606[1805]FF            	MOV	byte [CREATING],0FFH
 15140 0000351E E8C315                  	call	DEVNAME 		; Check if we built a device name
 15141 00003521 7395                    	JNC	short BAD_ACC
 15142 00003523 8B1E[FF04]              	MOV	BX,[DESTSTART]
 15143 00003527 C42E[2405]              	LES	BP,[THISDPB]
 15144 0000352B E8B612                  	call	SETDIRSRCH		; Reset search to start of dir
 15145 0000352E 7288                    	JC	short BAD_ACC 		; Screw up
 15146 00003530 E87611                  	call	FINDENTRY		; See if new name already exists
 15147 00003533 7383                    	JNC	short BAD_ACC 		; Error if found
 15148 00003535 803E[F602]00            	CMP	byte [FAILERR],0
 15149 0000353A 752A                    	JNZ	short BAD_ACCJ		; Find failed because user FAILed to I 24
 15150 0000353C A1[FF04]                	MOV	AX,[DESTSTART]		; DIRSTART of dest
 15151 0000353F 3B06[9505]              	CMP	AX,[RENAMEDMA+15]	; DIRSTART of source
 15152 00003543 7453                    	JZ	short SIMPLE_RENAME	; If =, just give new name
 15153                                  
 15154 00003545 A0[A605]                	MOV	AL,[RENAMEDMA+21+dir_entry.dir_attr]
 15155 00003548 A810                    	TEST	AL,attr_directory
 15156 0000354A 751A                    	JNZ	short BAD_ACCJ		; Can only do a simple rename on dirs,
 15157                                  					; otherwise the . and .. entries get
 15158                                  					; wiped.
 15159 0000354C A2[0605]                	MOV	[ATTRIB],AL
 15160 0000354F 8C1E[3805]              	MOV	[THISSFT+2],DS
 15161                                  
 15162                                  ;hkn; AUXSTACK is in DOSDATA
 15163 00003553 BE[D106]                	MOV	SI,AUXSTACK-SF_ENTRY.size
 15164 00003556 8936[3605]              	MOV	[THISSFT],SI
 15165 0000355A C744020200              	MOV	word [SI+SF_ENTRY.sf_mode],SHARING_COMPAT+open_for_both
 15166 0000355F 31C9                    	XOR	CX,CX			; Set "device ID" for call into makenode
 15167 00003561 E8F21A                  	call	RENAME_MAKE		; This is in mknode
 15168 00003564 7303                    	JNC	short GOT_DEST
 15169                                  BAD_ACCJ:
 15170 00003566 E94FFF                  	JMP	BAD_ACC
 15171                                  
 15172                                  GOT_DEST:
 15173 00003569 53                      	push	bx
 15174 0000356A C43E[3605]              	LES	DI,[THISSFT]		; RENAME_MAKE entered this into sharing
 15175 0000356E E8E73D                  	call	ShareEnd		; we need to remove it.
 15176 00003571 5B                      	pop	bx
 15177                                  ; A zero length entry with the correct new name has now been made at
 15178                                  ;   [CURBUF+2]:BX.
 15179 00003572 C43E[7405]              	LES	DI,[CURBUF]
 15180                                  
 15181                                  	; MSDOS 6.0
 15182                                  	;TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 15183                                  	;				;LB. if already dirty		  ;AN000;
 15184                                  	;JNZ	short yesdirty		;LB.  don't increment dirty count ;AN000;
 15185                                  	;call	INC_DIRTY_COUNT 	;LB.				  ;AN000;
 15186                                  	
 15187 00003576 26804D0540              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 15188                                  ;yesdirty:
 15189 0000357B 89DF                    	MOV	DI,BX
 15190 0000357D 83C70B                  	ADD	DI,dir_entry.dir_attr	; Skip name
 15191                                  
 15192                                  ;hkn; RENAMEDMA is in DOSDATA
 15193 00003580 BE[A605]                	MOV	SI,RENAMEDMA+21+dir_entry.dir_attr
 15194 00003583 B91500                  	MOV	CX,dir_entry.size-dir_entry.dir_attr ; mov cx,21
 15195 00003586 F3A4                    	REP	MOVSB
 15196 00003588 E85100                  	CALL	GET_SOURCE
 15197 0000358B 724B                    	JC	short RENAME_OVER
 15198 0000358D 89DF                    	MOV	DI,BX
 15199 0000358F 8E06[7605]              	MOV	ES,[CURBUF+2]
 15200 00003593 B0E5                    	MOV	AL,DIRFREE
 15201 00003595 AA                      	STOSB				; "free" the source
 15202 00003596 EB13                    	JMP	SHORT DIRTY_IT
 15203                                  
 15204                                  SIMPLE_RENAME:
 15205 00003598 E84100                  	CALL	GET_SOURCE		; Get the source back
 15206 0000359B 723B                    	JC	short RENAME_OVER
 15207 0000359D 89DF                    	MOV	DI,BX
 15208 0000359F 8E06[7605]              	MOV	ES,[CURBUF+2]
 15209                                  
 15210                                  ;hkn; NAME1 is in DOSDATA
 15211 000035A3 BE[E604]                	MOV	SI,NAME1		; New Name
 15212 000035A6 B90B00                  	MOV	CX,11
 15213 000035A9 F3A4                    	REP	MOVSB
 15214                                  DIRTY_IT:
 15215 000035AB 8B3E[7405]              	MOV	DI,[CURBUF]
 15216                                  
 15217                                  	; MSDOS 6.0
 15218                                  	;TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 15219                                  	;				;LB. if already dirty		  ;AN000;
 15220                                  	;JNZ	short Yesdirty2		;LB.  don't increment dirty count ;AN000;
 15221                                  	;call	INC_DIRTY_COUNT 	;LB.				  ;AN000;
 15222                                  	
 15223 000035AF 26804D0540              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 15224                                  ;------------------------------------------------------------------------------
 15225                                  ; Check if the source is a directory of file. If directory rename it to the
 15226                                  ; the new name in the Fastopen cache buffer.  If file name it has been
 15227                                  ; previously deleted.
 15228                                  ;------------------------------------------------------------------------------
 15229                                  ;Yesdirty2:
 15230                                  	; MSDOS 6.0
 15231                                  	;PUSH	SI
 15232                                  	;LDS	SI,[DMAADD]		;;BN00XPTM. chek if source a dir ;AN000;
 15233                                  	;ADD	SI,find_buf.attr	;;BN00XPTM.P5520		;AN000;
 15234                                  	;TEST	byte [SI+dir_entry.dir_attr],attr_directory ;;BN00XPTM.	;AN000;
 15235                                  	;JZ	short NOT_DIR2		;;BN00XPTM.			;AN000;
 15236                                  	;call	FASTOPEN_RENAME		;;BN00X rename dir entry in fastopen
 15237                                  	;POP	SI
 15238                                  	;JMP	SHORT NOT_DIRTY1
 15239                                  ;NOT_DIR2:				;;BN00X it is a file, delete the entry
 15240                                  	;POP	SI
 15241                                  ;NOT_DIRTY1:				;;BN00X
 15242                                  NEXT_SOURCE:
 15243                                  ;hkn; RENAMEDMA is in DOSDATA
 15244 000035B4 BE[8705]                	MOV	SI,RENAMEDMA+1		;Name
 15245                                  ;
 15246                                  ; WARNING! Rename_Next leaves the disk critical section *ALWAYS*. We need
 15247                                  ; to enter it before going to RENAME_Next.
 15248                                  ;
 15249 000035B7 E8B2EA                  	call	EcritDisk
 15250 000035BA C606[1805]00            	MOV	byte [CREATING],0 ; Correct setting for search (we changed it
 15251                                  				  ;  to FF when we made the prev new file).
 15252 000035BF E85704                  	call	RENAME_NEXT
 15253                                  ;
 15254                                  ; Note, now, that we have exited the previous ENTER and so are back to where
 15255                                  ; we were before.
 15256                                  ;
 15257 000035C2 7214                    	JC	short RENAME_OVER
 15258 000035C4 8D771A                  	LEA	SI,[BX+dir_entry.dir_first]
 15259 000035C7 E8CCFD                  	call	REN_DEL_Check
 15260 000035CA 7306                    	JNC	short REN_OK2
 15261 000035CC B82000                  	MOV	AX,error_sharing_violation
 15262 000035CF E9EAFE                  	JMP	RENAME_CLEAN ; 10/08/2018
 15263                                  
 15264                                  ;------------------------------------------------------------------------------
 15265                                  ; Check if file or directory. If file, delete file from the Fastopen cache,
 15266                                  ; if directory, rename directory name in the Fastopen cache.
 15267                                  ;-----------------------------------------------------------------------------
 15268                                  REN_OK2:
 15269                                  	; MSDOS 6.0
 15270                                  	;MOV	AL,[RENAMEDMA+21+dir_entry.dir_attr] ; PTR P5622
 15271                                  	;TEST	AL,attr_directory	;;BN00X directory
 15272                                  	;JZ	short Ren_Directory	;;BN00X no - file, delete it
 15273                                  	
 15274                                  	; MSDOS 3.3 (& MSDOS 6.0)
 15275 000035D2 E82AFE                  	call	FastOpen_Delete 	;;BN00X delete dir info in fastopen DOS 3.3
 15276 000035D5 E923FF                  	JMP	BUILDDEST		;;BN00X
 15277                                  
 15278                                  	; MSDOS 6.0
 15279                                  ;Ren_Directory:
 15280                                  	;call	FASTOPEN_RENAME 	;;BN00X delete dir info in fastopen DOS 3.3
 15281                                  	;JMP	BUILDDEST
 15282                                  
 15283                                  RENAME_OVER:
 15284 000035D8 F8                      	CLC
 15285 000035D9 E9E0FE                  	JMP	RENAME_CLEAN ; 10/08/2018
 15286                                  
 15287                                  ;----------------------------------------------------------------------------
 15288                                  ; Procedure: GET_SOURCE
 15289                                  ;
 15290                                  ; Inputs:
 15291                                  ;	RENAMEDMA has source info
 15292                                  ; Function:
 15293                                  ;	Re-find the source
 15294                                  ; Output:
 15295                                  ;	[CURBUF] set
 15296                                  ;	[CURBUF+2]:BX points to entry
 15297                                  ;	Carry set if error (currently user FAILed to I 24)
 15298                                  ; DS preserved, others destroyed
 15299                                  ;----------------------------------------------------------------------------
 15300                                  
 15301                                  GET_SOURCE:
 15302 000035DC 8B1E[9505]              	MOV	BX,[RENAMEDMA+15]	; DirStart
 15303 000035E0 C42E[2405]              	LES	BP,[THISDPB]
 15304 000035E4 E8FD11                  	call	SETDIRSRCH
 15305 000035E7 7209                    	JC	short gs_ret_label	; retc
 15306 000035E9 E8D714                  	call	STARTSRCH
 15307 000035EC A1[9305]                	MOV	AX,[RENAMEDMA+13]	; Lastent
 15308 000035EF E8C411                  	call	GETENT
 15309                                  
 15310                                  gs_ret_label:
 15311 000035F2 C3                      	retn
 15312                                  
 15313                                  ;============================================================================
 15314                                  ; FINFO.ASM, MSDOS 6.0, 1991
 15315                                  ;============================================================================
 15316                                  ; 08/08/2018 - Retro DOS v3.0
 15317                                  
 15318                                  ;**	Low level routines for returning file information and setting file
 15319                                  ;	attributes
 15320                                  ;
 15321                                  ;	GET_FILE_INFO
 15322                                  ;	SET_FILE_ATTRIBUTE
 15323                                  ;
 15324                                  ;	Modification history:
 15325                                  ;
 15326                                  ;	    Created: ARR 30 March 1983
 15327                                  ;
 15328                                  ;	M025: Return access_denied if attempting to set
 15329                                  ;	      attribute of root directory.
 15330                                  ;
 15331                                  
 15332                                  ;SUBTTL GET_FILE_INFO -- Get File Information
 15333                                  
 15334                                  ;---------------------------------------------------------------------------
 15335                                  ; Procedure Name : GET_FILE_INFO
 15336                                  ;
 15337                                  ; Inputs:
 15338                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 15339                                  ;		terminated)
 15340                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 15341                                  ;		( = -1 if current dir not involved, else
 15342                                  ;		 Points to first char after last "/" of current dir part)
 15343                                  ;	[THISCDS] Points to CDS being used
 15344                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 15345                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 15346                                  ; Function:
 15347                                  ;	Get Information about a file
 15348                                  ; Returns:
 15349                                  ;	CARRY CLEAR
 15350                                  ;	    AX = Attribute of file
 15351                                  ;	    CX = Time stamp of file
 15352                                  ;	    DX = Date stamp of file
 15353                                  ;	    BX:DI = Size of file (32 bit)
 15354                                  ;	CARRY SET
 15355                                  ;	    AX is error code
 15356                                  ;		error_file_not_found
 15357                                  ;			Last element of path not found
 15358                                  ;		error_path_not_found
 15359                                  ;			Bad path (not in curr dir part if present)
 15360                                  ;		error_bad_curr_dir
 15361                                  ;			Bad path in current directory part of path
 15362                                  ; DS preserved, others destroyed
 15363                                  ;---------------------------------------------------------------------------
 15364                                  
 15365                                  GET_FILE_INFO:
 15366                                  
 15367                                  ;hkn; get_file_info is called from file.asm and fcbio.asm. DS has been set 
 15368                                  ;hkn; to DOSDATA at this point. So DOSassume is OK.
 15369                                  
 15370 000035F3 E8D8E9                  	call	TestNet
 15371 000035F6 7306                    	JNC	short LOCAL_INFO
 15372                                  
 15373                                  ;IF NOT Installed
 15374                                  ;	transfer NET_GET_FILE_INFO
 15375                                  ;ELSE
 15376                                  ;	MOV	AX,(MultNET SHL 8) OR 15
 15377                                  ;	INT	2FH
 15378                                  ;	return
 15379                                  
 15380 000035F8 B80F11                  	mov     ax, 110Fh
 15381 000035FB CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - GET REMOTE FILE'S ATTRIBUTES
 15382                                  			; SS = DOS CS, SDA first filename pointer -> fully-qualified name of file
 15383                                  			; SDA CDS pointer -> current directory
 15384                                  			; Return: CF set on error, AX = file attributes
 15385 000035FD C3                      	retn
 15386                                  ;ENDIF
 15387                                  
 15388                                  LOCAL_INFO:
 15389 000035FE E86BEA                  	call	EcritDisk
 15390 00003601 C606[F802]01            	MOV	byte [NoSetDir],1	; if we find a dir, don't change to it
 15391                                  	; MSDOS 6.0
 15392                                  	;call	Get_FAST_PATH
 15393                                  	; MSDOS 3.3
 15394 00003606 E83012                  	call	GETPATH
 15395                                  info_check:
 15396 00003609 7313                    	JNC	short info_check_dev
 15397                                  NO_PATH:
 15398 0000360B 750C                    	JNZ	short bad_path1
 15399 0000360D 08C9                    	OR	CL,CL
 15400 0000360F 7408                    	JZ	short bad_path1
 15401                                  info_no_file:
 15402 00003611 B80200                  	MOV	AX,error_file_not_found
 15403                                  BadRet:
 15404 00003614 F9                      	STC
 15405                                  JustRet:
 15406 00003615 E85CEA                  	call	LcritDisk
 15407 00003618 C3                      	retn
 15408                                  
 15409                                  bad_path1:
 15410 00003619 B80300                  	MOV	AX,error_path_not_found
 15411 0000361C EBF6                    	jmp	short BadRet
 15412                                  
 15413                                  info_check_dev:
 15414 0000361E 08E4                    	OR	AH,AH
 15415 00003620 78EF                    	JS	short info_no_file	; device
 15416                                  
 15417                                  	; MSDOS 6.0
 15418                                  ;SR;
 15419                                  ; If root dir then CurBuf == -1. Check for this case and return subdir attr
 15420                                  ;for a root dir
 15421                                  ;
 15422 00003622 833E[7405]FF            	cmp	word [CURBUF],-1	;is it a root dir?
 15423 00003627 7507                    	jne	short not_root		;no, CurBuf ptr is valid
 15424                                  
 15425 00003629 30E4                    	xor	ah,ah
 15426 0000362B B010                    	mov	al,attr_directory
 15427 0000362D F8                      	clc
 15428 0000362E EBE5                    	jmp	short JustRet
 15429                                  
 15430                                  not_root:
 15431                                  	; MSDOS 3.3 (& MSDOS 6.0)
 15432 00003630 1E                      	PUSH	DS
 15433 00003631 8E1E[7605]              	MOV	DS,[CURBUF+2]
 15434 00003635 89DE                    	MOV	SI,BX
 15435 00003637 31DB                    	XOR	BX,BX			; Assume size=0 (dir)
 15436 00003639 89DF                    	MOV	DI,BX
 15437 0000363B 8B4C16                  	MOV	CX,[SI+dir_entry.dir_time]
 15438 0000363E 8B5418                  	MOV	DX,[SI+dir_entry.dir_date]
 15439 00003641 30E4                    	XOR	AH,AH
 15440 00003643 8A440B                  	MOV	AL,[SI+dir_entry.dir_attr]
 15441 00003646 A810                    	TEST	AL,attr_directory
 15442 00003648 7506                    	JNZ	short NO_SIZE
 15443 0000364A 8B7C1C                  	MOV	DI,[SI+dir_entry.dir_size_l]
 15444 0000364D 8B5C1E                  	MOV	BX,[SI+dir_entry.dir_size_h]
 15445                                  NO_SIZE:
 15446 00003650 1F                      	POP	DS
 15447 00003651 F8                      	CLC
 15448 00003652 EBC1                    	jmp	short JustRet
 15449                                  
 15450                                  ;Break	<SET_FILE_ATTRIBUTE -- Set File Attribute>
 15451                                  ;-------------------------------------------------------------------------------
 15452                                  ; Procedure Name : SET_FILE_ATTRIBUTE
 15453                                  ; Inputs:
 15454                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 15455                                  ;		terminated)
 15456                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 15457                                  ;		( = -1 if current dir not involved, else
 15458                                  ;		 Points to first char after last "/" of current dir part)
 15459                                  ;	[THISCDS] Points to CDS being used
 15460                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 15461                                  ;	[SATTRIB] is attribute of search (determines what files may be found)
 15462                                  ;	AX is new attributes to give to file
 15463                                  ; Function:
 15464                                  ;	Set File Attributes
 15465                                  ; Returns:
 15466                                  ;	CARRY CLEAR
 15467                                  ;	    No error
 15468                                  ;	CARRY SET
 15469                                  ;	    AX is error code
 15470                                  ;		error_file_not_found
 15471                                  ;			Last element of path not found
 15472                                  ;		error_path_not_found
 15473                                  ;			Bad path (not in curr dir part if present)
 15474                                  ;		error_bad_curr_dir
 15475                                  ;			Bad path in current directory part of path
 15476                                  ;		error_access_denied
 15477                                  ;			Attempt to set an attribute which cannot be set
 15478                                  ;			(attr_directory, attr_volume_ID)
 15479                                  ;		error_sharing_violation
 15480                                  ;			Sharing mode of file did not allow the change
 15481                                  ;			(this request requires exclusive write/read access)
 15482                                  ;			(INT 24H generated)
 15483                                  ; DS preserved, others destroyed
 15484                                  ;----------------------------------------------------------------------------
 15485                                  
 15486                                  SET_FILE_ATTRIBUTE:
 15487                                  
 15488                                  ;hkn; set_file_attr is called from file.asm. DS has been set 
 15489                                  ;hkn; to DOSDATA at this point. So DOSassume is OK.
 15490                                  
 15491 00003654 A9D8FF                  	TEST	AX,~attr_changeable ; 0FFD8h
 15492 00003657 7414                    	JZ	short set_look
 15493                                  _BAD_ACC:
 15494 00003659 C606[D102]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk
 15495 0000365E C606[D502]07            	MOV	byte [EXTERR_CLASS],errCLASS_Apperr
 15496 00003663 C606[D402]04            	MOV	byte [EXTERR_ACTION],errACT_Abort
 15497 00003668 B80500                  	MOV	AX,error_access_denied
 15498 0000366B F9                      	STC
 15499 0000366C C3                      	retn
 15500                                  
 15501                                  set_look:
 15502 0000366D E85EE9                  	call	TestNet
 15503 00003670 7308                    	JNC	short LOCAL_SET
 15504                                  
 15505                                  ;IF NOT Installed
 15506                                  ;	transfer NET_SEQ_SET_FILE_ATTRIBUTE
 15507                                  ;ELSE
 15508 00003672 50                      	PUSH	AX
 15509                                  	
 15510                                  	;MOV	AX,(MultNET SHL 8) OR 14
 15511                                  	;INT	2FH
 15512                                  
 15513 00003673 B80E11                  	mov     ax, 110Eh
 15514 00003676 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - SET REMOTE FILE'S ATTRIBUTES
 15515                                  			; SS = DOS CS, SDA first filename pointer -> fully-qualified name of file
 15516                                  			; SDA CDS pointer -> current directory
 15517                                  			; STACK: WORD new file attributes
 15518                                  			; Return: CF set on error
 15519                                  
 15520 00003678 5B                      	POP	BX			; clean stack
 15521 00003679 C3                      	retn
 15522                                  ;ENDIF
 15523                                  
 15524                                  LOCAL_SET:
 15525 0000367A E8EFE9                  	call	EcritDisk
 15526 0000367D 50                      	PUSH	AX			; Save new attributes
 15527 0000367E C606[F802]01            	MOV	byte [NoSetDir],1	; if we find a dir, don't change to it
 15528 00003683 E8B311                  	call	GETPATH 		; get path through fastopen if there	 ;AC000;
 15529 00003686 7303                    	JNC	short set_check_device
 15530 00003688 5B                      	POP	BX			; Clean stack (don't zap AX)
 15531 00003689 EB80                    	JMP	short NO_PATH
 15532                                  
 15533                                  set_check_device:
 15534 0000368B 08E4                    	OR	AH,AH
 15535 0000368D 7906                    	JNS	short set_check_share
 15536 0000368F 58                      	POP	AX
 15537 00003690 E8E1E9                  	call	LcritDisk
 15538 00003693 EBC4                    	JMP	short _BAD_ACC 		; device
 15539                                  
 15540                                  set_check_share:
 15541 00003695 58                      	POP	AX			; Get new attributes
 15542                                  
 15543                                  	; MSDOS 6.0
 15544 00003696 833E[7405]FF            	cmp	word [CURBUF], -1	; M025: Q: is this the root dir
 15545 0000369B 740A                    	je	short cannot_set_root	; M025: Y: return error
 15546                                  
 15547                                  	; MSDOS 3.3 (& MSDOS 6.0)
 15548 0000369D E8F6FC                  	call	REN_DEL_Check
 15549 000036A0 730B                    	JNC	short set_do
 15550 000036A2 B82000                  	MOV	AX,error_sharing_violation
 15551 000036A5 EB30                    	jmp	short OK_BYE
 15552                                  
 15553                                  	; MSDOS 6.0
 15554                                  cannot_set_root:			; M025:
 15555 000036A7 B80500                  	mov	ax, error_access_denied	; M025: return error is attempting
 15556 000036AA F9                      	stc				; M025: to set attr. of root
 15557 000036AB EB2A                    	jmp	short OK_BYE		; M025:
 15558                                  
 15559                                  set_do:
 15560                                  	; MSDOS 3.3 (& MSDOS 6.0)
 15561 000036AD C43E[7405]              	LES	DI,[CURBUF]
 15562 000036B1 2680670BD8              	AND	BYTE [ES:BX+dir_entry.dir_attr],~attr_changeable ; 0D8h
 15563 000036B6 2608470B                	OR	BYTE [ES:BX+dir_entry.dir_attr],AL
 15564                                  
 15565                                  	; MSDOS 6.0
 15566                                  	;TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 15567                                  	;				;LB. if already dirty		  ;AN000;
 15568                                  	;JNZ	short yesdirty3		;LB.  don't increment dirty count ;AN000;
 15569                                  	;call	INC_DIRTY_COUNT 	;LB.				  ;AN000;
 15570                                  	
 15571 000036BA 26804D0540              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 15572                                  ;yesdirty3:
 15573 000036BF A0[1105]                	MOV	AL,[THISDRV]
 15574                                  ;;;; 10/1/86 F.C update fastopen cache
 15575 000036C2 52                      	PUSH	DX
 15576 000036C3 57                      	PUSH	DI
 15577 000036C4 B400                    	MOV	AH,0		  ; dir entry update
 15578 000036C6 88C2                    	MOV	DL,AL		  ; drive number A=0,B=1,,
 15579 000036C8 89DF                    	MOV	DI,BX		  ; ES:DI -> dir entry
 15580 000036CA E846FD                  	call	FastOpen_Update
 15581 000036CD 5F                      	POP	DI
 15582 000036CE 5A                      	POP	DX
 15583                                  ;;;; 9/11/86 F.C update fastopen cache
 15584 000036CF E85F28                  	call	FLUSHBUF
 15585 000036D2 7303                    	JNC	short OK_BYE
 15586 000036D4 B80200                  	MOV	AX,error_file_not_found
 15587                                  OK_BYE:
 15588 000036D7 E89AE9                  	call	LcritDisk
 15589 000036DA C3                      	retn
 15590                                  
 15591                                  	; MSDOS 6.0
 15592                                  ;GET_FAST_PATH:
 15593                                  ;hkn; use SS override for FastOpenFlg
 15594                                  	;OR	byte [FastOpenFlg],FastOpen_Set
 15595                                  	;				;FO. trigger fastopen	;AN000;
 15596                                  	;call	GETPATH
 15597                                  	;PUSHF			 	;FO.			;AN000;
 15598                                  	;AND	byte [FastOpenFlg],Fast_yes 
 15599                                  	;				;FO. clear all fastopen flags ;AN000;
 15600                                  	;POPF				;FO.			;AN000;
 15601                                  	;retn
 15602                                  
 15603                                  ;============================================================================
 15604                                  ; DUP.ASM, MSDOS 6.0, 1991
 15605                                  ;============================================================================
 15606                                  ; 08/08/2018 - Retro DOS v3.0
 15607                                  
 15608                                  ;**	Low level DUP routine for use by EXEC when creating a new process. Exports
 15609                                  ;	  the DUP to the server machine and increments the SFT ref count
 15610                                  ;
 15611                                  ;	DOS_DUP
 15612                                  ;
 15613                                  ;	Modification history:
 15614                                  ;
 15615                                  ;	  Created: ARR 30 March 1983
 15616                                  
 15617                                  ;BREAK <DOS_DUP -- DUP SFT across network>
 15618                                  ;---------------------------------------------------------------------------
 15619                                  ; Procedure Name : DOS_DUP
 15620                                  ;
 15621                                  ; Inputs:
 15622                                  ;	[THISSFT] set to the SFT for the file being DUPed
 15623                                  ;		(a non net SFT is OK, in this case the ref
 15624                                  ;		 count is simply incremented)
 15625                                  ; Function:
 15626                                  ;	Signal to the devices that a logical open is occurring
 15627                                  ; Returns:
 15628                                  ;	ES:DI point to SFT
 15629                                  ;    Carry clear
 15630                                  ;	SFT ref_count is incremented
 15631                                  ; Registers modified: None.
 15632                                  ; NOTE:
 15633                                  ;	This routine is called from $CREATE_PROCESS_DATA_BLOCK at DOSINIT
 15634                                  ;	time with SS NOT DOSGROUP. There will be no Network handles at
 15635                                  ;	that time.
 15636                                  ;---------------------------------------------------------------------------
 15637                                  
 15638                                  DOS_DUP:
 15639 000036DB 2EC43E[3605]            	LES	DI,[CS:THISSFT]
 15640                                  
 15641                                  	;Entry	Dos_Dup_Direct
 15642                                  DOS_Dup_Direct:
 15643 000036E0 E800E9                  	call	IsSFTNet
 15644 000036E3 7503                    	JNZ	short DO_INC
 15645 000036E5 E89117                  	call	DEV_OPEN_SFT
 15646                                  DO_INC:
 15647                                  
 15648                                  	;INC	word [ES:DI+SF_ENTRY.sf_ref_count]
 15649 000036E8 26FF05                  	inc	word [ES:DI]		; Clears carry (if this ever wraps
 15650                                  					;   we're in big trouble anyway)
 15651 000036EB C3                      	retn
 15652                                  
 15653                                  ;============================================================================
 15654                                  ; CREATE.ASM, MSDOS 6.0, 1991
 15655                                  ;============================================================================
 15656                                  ; 08/08/2018 - Retro DOS v3.0
 15657                                  
 15658                                  ;TITLE	DOS_CREATE/DOS_CREATE_NEW - Internal CREATE calls for MS-DOS
 15659                                  ;NAME	DOS_CREATE
 15660                                  
 15661                                  ;**	Internal Create and Create new to create a local or NET file and SFT.
 15662                                  ;
 15663                                  ;	DOS_CREATE
 15664                                  ;	DOS_CREATE_NEW
 15665                                  ;	SET_MKND_ERR
 15666                                  ;	SET_Media_ID
 15667                                  ;	SET_EXT_Mode
 15668                                  ;
 15669                                  ;	Revision history:
 15670                                  ;
 15671                                  ;	    A000 version 4.00	  Jan. 1988
 15672                                  ;	    A001  D490 -- Change IOCTL subfunctios from 63h,43h to 66h, 46h
 15673                                  
 15674                                  ;Installed = TRUE
 15675                                  
 15676                                  ;	i_need	THISSFT,DWORD
 15677                                  ;	i_need	THISCDS,DWORD
 15678                                  ;	I_need	EXTERR,WORD
 15679                                  ;	I_Need	ExtErr_locus,BYTE
 15680                                  ;	I_need	JShare,DWORD
 15681                                  ;	I_need	VOLCHNG_FLAG,BYTE
 15682                                  ;	I_need	SATTRIB,BYTE
 15683                                  ;	I_need	CALLVIDM,DWORD
 15684                                  ;	I_need	EXTOPEN_ON,BYTE 		  ;AN000; extended open
 15685                                  ;	I_need	NAME1,BYTE			  ;AN000;
 15686                                  ;	I_need	NO_NAME_ID,BYTE 		  ;AN000;
 15687                                  ;	I_need	Packet_Temp,WORD		  ;AN000;
 15688                                  ;	I_need	DOS34_FLAG,WORD 		  ;AN000;
 15689                                  ;	I_need	SAVE_BX,WORD			  ;AN000;
 15690                                  
 15691                                  ;***	DOS_CREATE - Create a File
 15692                                  ;----------------------------------------------------------------------------
 15693                                  ;	DOS_Create is called to create the specified file, truncating
 15694                                  ;	the old one if it exists.
 15695                                  ;
 15696                                  ;
 15697                                  ;	ENTRY	AX is Attribute to create
 15698                                  ;		(ds) = DOSDATA
 15699                                  ;		[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 15700                                  ;			terminated)
 15701                                  ;		[CURR_DIR_END] Points to end of Current dir part of string
 15702                                  ;			( = -1 if current dir not involved, else
 15703                                  ;			 Points to first char after last "/" of current dir part)
 15704                                  ;		[THISCDS] Points to CDS being used
 15705                                  ;			(Low word = -1 if NUL CDS (Net direct request))
 15706                                  ;		[THISSFT] Points to SFT to fill in if file created
 15707                                  ;			(sf_mode field set so that FCB may be detected)
 15708                                  ;		[SATTRIB] Is attribute of search, determines what files can be found
 15709                                  ;
 15710                                  ;	EXIT	sf_ref_count is NOT altered
 15711                                  ;		CARRY CLEAR
 15712                                  ;		    THISSFT filled in.
 15713                                  ;			sf_mode = unchanged for FCB, sharing_compat + open_for_both
 15714                                  ;		CARRY SET
 15715                                  ;		    AX is error code
 15716                                  ;			error_path_not_found
 15717                                  ;				Bad path (not in curr dir part if present)
 15718                                  ;			error_bad_curr_dir
 15719                                  ;				Bad path in current directory part of path
 15720                                  ;			error_access_denied
 15721                                  ;				Attempt to re-create read only file , or
 15722                                  ;				create a second volume id or create a dir
 15723                                  ;			error_sharing_violation
 15724                                  ;				The sharing mode was correct but not allowed
 15725                                  ;				generates an INT 24
 15726                                  ;	USES	all but DS
 15727                                  ;----------------------------------------------------------------------------
 15728                                  
 15729                                  DOS_CREATE:
 15730                                  
 15731                                  ;hkn; dispatched to from file.asm and fcbio.asm. DS set up to DOSDATA at 
 15732                                  ;hkn; this point.
 15733                                  
 15734 000036EC 30E4                    	XOR	AH,AH		; Truncate is OK
 15735                                  
 15736                                  ;	Enter here from Dos_Create_New
 15737                                  ;
 15738                                  ;	(ah) = 0 iff truncate OK
 15739                                  
 15740                                  Create_inter:
 15741 000036EE A8C0                    	TEST	AL,~(attr_all+attr_ignore+attr_volume_id) ; 80h
 15742                                  				; Mask out any meaningless bits
 15743 000036F0 750C                    	JNZ	short AttErr
 15744 000036F2 A808                    	TEST	AL,attr_volume_id
 15745 000036F4 7402                    	JZ	short NoReset
 15746                                  	;
 15747                                  	; MSDOS 6.0
 15748                                  	;OR	[DOS34_FLAG],DBCS_VOLID      ;AN000;FOR dbcs volid
 15749                                  	;
 15750 000036F6 B008                    	MOV	AL,attr_volume_id
 15751                                  NoReset:
 15752 000036F8 0C20                    	OR	AL,attr_archive ; File changed
 15753 000036FA A850                    	TEST	AL,attr_directory+attr_device
 15754 000036FC 740A                    	JZ	short ATT_OK
 15755                                  AttErr:
 15756 000036FE B80500                  	MOV	AX,5		; Attribute problem
 15757 00003701 C606[D102]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk
 15758 00003706 EB3D                    	JMP	SHORT SET_MKND_ERR ; Gotta use MKDIR to make dirs, NEVER allow
 15759                                  				   ;	attr_device to be set.
 15760                                  ATT_OK:
 15761 00003708 C43E[3605]              	LES	DI,[THISSFT]
 15762 0000370C 06                      	PUSH	ES
 15763 0000370D C436[3A05]              	LES	SI,[THISCDS]
 15764 00003711 83FEFF                  	CMP	SI,-1
 15765 00003714 7509                    	JNE	short TEST_RE_NET
 15766                                  
 15767                                  ;	No CDS, it must be redirected.
 15768                                  
 15769 00003716 07                      	POP	ES
 15770                                  
 15771                                  	; MSDOS 6.0
 15772                                  ;Extended open hooks
 15773                                  	;TEST	byte [EXTOPEN_ON],ext_open_on ;AN000;EO. from extended open
 15774                                  	;JZ	short NOEXTOP 		    ;AN000;EO. no, do normal
 15775                                  ;IFS_extopen:				    ;AN000;EO.
 15776                                  	;PUSH	AX			    ;AN000;EO. pass create attr
 15777                                  	;;MOV	AX,(MultNET SHL 8) OR 46    ;AN000;EO. issue extended open verb
 15778                                  	;mov	ax,112Eh
 15779                                  	;INT	2FH			    ;AN000;EO.
 15780                                  	;POP	BX			    ;AN000;EO. trash bx
 15781                                  	;MOV	byte [EXTOPEN_ON],0	    ;AN000;EO.
 15782                                  	;retn				    ;AN000;EO.
 15783                                  ;NOEXTOP:				    ;AN000;
 15784                                  ;Extended open hooks
 15785                                  
 15786                                  ;IF NOT Installed
 15787                                  ;	transfer NET_SEQ_CREATE
 15788                                  ;ELSE
 15789 00003717 50                      	PUSH	AX
 15790                                  
 15791                                  	;MOV	AX,(MultNET SHL 8) OR 24
 15792                                  	;INT	2FH
 15793                                  
 15794 00003718 B81811                  	mov     ax,1118h
 15795 0000371B CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - CREATE/TRUNCATE FILE
 15796                                  			; ES:DI -> uninitialized SFT, SS = DOS CS
 15797                                  			; SDA first filename pointer -> fully-qualified name of file
 15798                                  			; STACK: WORD file creation mode???
 15799                                  
 15800 0000371D 5B                      	POP	BX			; BX is trashed anyway
 15801 0000371E C3                      	retn
 15802                                  ;ENDIF
 15803                                  
 15804                                  ;	We have a CDS. See if it's network
 15805                                  
 15806                                  TEST_RE_NET:
 15807 0000371F 26F744430080            	TEST	word [ES:SI+curdir.flags],curdir_isnet
 15808 00003725 07                      	POP	ES
 15809 00003726 7408                    	JZ	short LOCAL_CREATE
 15810                                  
 15811                                  	; MSDOS 6.0
 15812                                  	;CALL	Set_EXT_mode		    ;AN000;EO.
 15813                                  	;JC	SHORT dochk		    ;AN000;EO.
 15814                                  	;OR	word [ES:DI+SF_ENTRY.sf_mode],SHARING_COMPAT+open_for_both ;IFS.
 15815                                  
 15816                                  ;Extended open hooks
 15817                                  ;dochk:
 15818                                  	;TEST	byte [EXTOPEN_ON],ext_open_on ;AN000;EO. from extended open
 15819                                  	;JNZ	short IFS_extopen	    ;AN000;EO. yes, issue extended open
 15820                                  ;Extended open hooks
 15821                                  
 15822                                  ;IF NOT Installed
 15823                                  ;	transfer NET_CREATE
 15824                                  ;ELSE
 15825 00003728 50                      	PUSH	AX
 15826                                  	
 15827                                  	;MOV	AX,(MultNET SHL 8) OR 23
 15828                                  	;INT	2FH
 15829                                  	
 15830 00003729 B81711                  	mov     ax, 1117h
 15831 0000372C CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - CREATE/TRUNCATE REMOTE FILE
 15832                                  			; ES:DI -> uninitialized SFT, SS = DOS CS
 15833                                  			; SDA first filename pointer -> fully-qualified name of file to open
 15834                                  			; SDA CDS pointer -> current directory
 15835                                  			; Return: CF set on error
 15836                                  
 15837 0000372E 5B                      	POP	BX			; BX is trashed anyway
 15838                                  ;nomore:
 15839 0000372F C3                      	retn
 15840                                  ;ENDIF
 15841                                  
 15842                                  
 15843                                  ;**	It's a local create.  We have a local CDS for it.
 15844                                  
 15845                                  LOCAL_CREATE:
 15846                                  	; MSDOS 6.0
 15847                                  	;CALL	Set_EXT_mode	;AN000;EO. set mode if from extended open
 15848                                  	;JC	short setdone	;AN000;EO.
 15849                                  	
 15850                                  	; MSDOS 3.3 (& MSDOS 6.0)
 15851 00003730 26834D0202              	OR	word [ES:DI+SF_ENTRY.sf_mode],SHARING_COMPAT+open_for_both
 15852                                  ;setdone:
 15853 00003735 E834E9                  	call	EcritDisk
 15854 00003738 E8F518                  	call	MakeNode
 15855 0000373B 730E                    	JNC	short Create_ok
 15856 0000373D C606[070A]FF            	mov	byte [VOLCHNG_FLAG],-1	; indicate no change in volume label
 15857 00003742 E82FE9                  	call	LcritDisk
 15858                                  
 15859                                  	;entry	SET_MKND_ERR
 15860                                  SET_MKND_ERR:
 15861                                  
 15862                                  ;	Looks up MakeNode errors and converts them. AL is MakeNode
 15863                                  ;	error, SI is GETPATH bad spot return if path_not_found error.
 15864                                  
 15865                                  ;hkn; CRTERRTAB is in TABLE seg (DOSCODE)
 15866 00003745 BB[FD12]                	MOV     BX,CRTERRTAB
 15867 00003748 D7                      	XLAT
 15868                                  	;XLAT	byte [CS:BX]
 15869                                  CreatBadRet:
 15870 00003749 F9                      	STC
 15871 0000374A C3                      	retn
 15872                                  
 15873                                  ; We have just created a new file. This results in the truncation of old
 15874                                  ; files. We must inform the sharer to slash all the open SFT's for this
 15875                                  ; file to the current size.
 15876                                  
 15877                                  ; If we created a volume id on the diskette, set the VOLCHNG_FLAG to logical
 15878                                  ; drive number to force a Build BPB after Media Check.
 15879                                  
 15880                                  ;;; FASTOPEN 8/29/86
 15881                                  Create_ok:
 15882 0000374B E8B1FC                  	call	FastOpen_Delete
 15883                                  ;;; FASTOPEN 8/29/86
 15884 0000374E A0[0805]                	mov	al,[SATTRIB]
 15885 00003751 A808                    	test	al,attr_volume_id
 15886 00003753 7417                    	jz	short NoVolLabel
 15887 00003755 C43E[3A05]              	LES	DI,[THISCDS]
 15888                                  	;mov	ah,[ES:DI+curdir.text]	; get drive letter
 15889 00003759 268A25                  	mov	ah,[ES:DI] ; 09/08/2018
 15890 0000375C 80EC41                  	sub	ah,'A'                  ; convert to drive letter
 15891 0000375F 8826[070A]              	mov	[VOLCHNG_FLAG],ah	;Set flag to indicate volid change
 15892                                  	
 15893                                  	; MSDOS 6.0
 15894                                  	;MOV	BH,1			;AN000;>32mb set volume id to boot record
 15895                                  	;CALL	Set_Media_ID		;AN000;>32mb
 15896                                  	
 15897 00003763 E806E9                  	call	EcritDisk
 15898 00003766 E85624                  	call	FATREAD_CDS		; force a media check
 15899 00003769 E808E9                  	call	LcritDisk
 15900                                  
 15901                                  NoVolLabel:
 15902 0000376C B80200                  	MOV	ax,2
 15903 0000376F C43E[3605]              	LES	DI,[THISSFT]
 15904                                  ;if installed
 15905                                  	;call	JShare + 14 * 4
 15906 00003773 FF1E[9400]              	call	far [JShare+(14*4)] ; 14 = ShSU
 15907                                  ;else
 15908                                  ;	Call	ShSU
 15909                                  ;endif
 15910 00003777 E8FAE8                  	call	LcritDisk
 15911 0000377A E9D800                  	jmp	SET_SFT_MODE
 15912                                  
 15913                                  ;---------------------------------------------------------------------------
 15914                                  ; Procedure Name : Dos_Create_New
 15915                                  ;
 15916                                  ; Inputs:
 15917                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 15918                                  ;		terminated)
 15919                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 15920                                  ;		( = -1 if current dir not involved, else
 15921                                  ;		 Points to first char after last "/" of current dir part)
 15922                                  ;	[THISCDS] Points to CDS being used
 15923                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 15924                                  ;	[THISSFT] Points to SFT to fill in if file created
 15925                                  ;		(sf_mode field set so that FCB may be detected)
 15926                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 15927                                  ;	AX is Attribute to create
 15928                                  ; Function:
 15929                                  ;	Try to create the specified file truncating an old one that exists
 15930                                  ; Outputs:
 15931                                  ;	sf_ref_count is NOT altered
 15932                                  ;	CARRY CLEAR
 15933                                  ;	    THISSFT filled in.
 15934                                  ;		sf_mode = sharing_compat + open_for_both for Non-FCB SFT
 15935                                  ;	CARRY SET
 15936                                  ;	    AX is error code
 15937                                  ;		error_path_not_found
 15938                                  ;			Bad path (not in curr dir part if present)
 15939                                  ;		error_bad_curr_dir
 15940                                  ;			Bad path in current directory part of path
 15941                                  ;		error_access_denied
 15942                                  ;			Create a second volume id or create a dir
 15943                                  ;		error_file_exists
 15944                                  ;			Already a file by this name
 15945                                  ; DS preserved, others destroyed
 15946                                  ;---------------------------------------------------------------------------
 15947                                  
 15948                                  DOS_Create_New:
 15949 0000377D B401                    	MOV	AH,1		; Truncate is NOT OK
 15950 0000377F E96CFF                  	JMP	Create_inter
 15951                                  
 15952                                  ; MSDOS 6.0
 15953                                  ;---------------------------------------------------------------------------
 15954                                  ; Procedure Name : Set_Media_ID
 15955                                  ;
 15956                                  ; Inputs:
 15957                                  ;	NAME1= Volume ID
 15958                                  ;	BH= 0, delete volume id
 15959                                  ;	    1, set new volume id
 15960                                  ;	DS= DOSGROUP
 15961                                  ; Function:
 15962                                  ;	Set Volume ID to DOS 4.00 Boot record.
 15963                                  ; Outputs:
 15964                                  ;	CARRY CLEAR
 15965                                  ;	    volume id set
 15966                                  ;	CARRY SET
 15967                                  ;	    AX is error code
 15968                                  ;---------------------------------------------------------------------------
 15969                                  ;
 15970                                  ;procedure   Set_Media_ID,NEAR
 15971                                  ;	DOSAssume   <DS>,"SetMedID"
 15972                                  ;
 15973                                  ;	PUSH	AX		;AN000;;>32mb
 15974                                  ;	PUSH	ES		;AN000;;>32mb
 15975                                  ;	PUSH	DI		;AN000;;>32mb
 15976                                  ;
 15977                                  ;	INC	AH		;AN000;;>32mb  bl=drive #
 15978                                  ;	MOV	BL,AH		;AN000;;>32mb  bl=drive # (A=1,B=2,,,)
 15979                                  ;	MOV	AL,0DH		;AN000;;>32mb  generic IOCTL
 15980                                  ;	MOV	CX,0866H	;AN001;;>32mb  get media id
 15981                                  ;
 15982                                  ;hkn; PACKET_TEMP is in DOSDATA
 15983                                  ;	MOV	DX,OFFSET DOSDATA:PACKET_TEMP	;AN000;>32mb
 15984                                  ;
 15985                                  ;	PUSH	BX		;AN000;;>32mb
 15986                                  ;	PUSH	DX		;AN000;;>32mb
 15987                                  ;	XOR	BH,BH		;AN000;;>32mb
 15988                                  ;
 15989                                  ;	invoke	$IOCTL		;AN000;;>32mb
 15990                                  ;	POP	DX		;AN000;;>32mb
 15991                                  ;	POP	BX		;AN000;;>32mb
 15992                                  ;	JC	geterr		;AN000;;>32mb
 15993                                  ;
 15994                                  ;	OR	BH,BH		;AN000;;>32mb delete volume id
 15995                                  ;	JZ	NoName		;AN000;>32mb yes
 15996                                  ;
 15997                                  ;hkn; NAME1 is in DOSDATA
 15998                                  ;	MOV	SI,OFFSET DOSDATA:NAME1   ;AN000;>32mb
 15999                                  ;
 16000                                  ;	JMP	SHORT doset	;AN000;>32mb yes
 16001                                  ;Noname: 			;AN000;
 16002                                  ;
 16003                                  ;hkn; NO_NAME_ID is in DOSDATA
 16004                                  ;	MOV	SI,OFFSET DOSDATA:NO_NAME_ID  ;AN000;>32mb
 16005                                  ;
 16006                                  ;doset:					       ;AN000;
 16007                                  ;	MOV	DI,DX		;AN000;;>32mb
 16008                                  ;	ADD	DI,MEDIA_LABEL	;AN000;;>32mb
 16009                                  ;
 16010                                  ;hkn; ES & DS must point to SS
 16011                                  ;hkn;	PUSH	CS		;AN000;;>32mb  move new volume id to packet
 16012                                  ;	PUSH	SS		;AN000;;>32mb  move new volume id to packet
 16013                                  ;
 16014                                  ;	POP	DS		;AN000;;>32mb
 16015                                  ;
 16016                                  ;hkn;	PUSH	CS		;AN000;;>32mb
 16017                                  ;	PUSH	SS		;AN000;;>32mb
 16018                                  ;
 16019                                  ;	POP	ES		;AN000;;>32mb
 16020                                  ;	MOV	CX,11		;AN000;;>32mb
 16021                                  ;	REP	MOVSB		;AN000;;>32mb
 16022                                  ;	MOV	CX,0846H	;AN001;;>32mb
 16023                                  ;	MOV	AL,0DH		;AN000;;>32mb
 16024                                  ;	XOR	BH,BH		;AN000;;>32mb
 16025                                  ;	invoke	$IOCTL		;AN000;;>32mb  set volume id
 16026                                  ;geterr: 			;AN000;
 16027                                  ;
 16028                                  ;hkn;	PUSH	CS		;AN000;>32mb
 16029                                  ;	PUSH	SS		;AN000;>32mb
 16030                                  ;
 16031                                  ;	POP	DS		;AN000;>32mb   ds= dosgroup
 16032                                  ;
 16033                                  ;	POP	DI		;AN000;;>32mb
 16034                                  ;	POP	ES		;AN000;;>32mb
 16035                                  ;	POP	AX		;AN000;;>32mb
 16036                                  ;	return			;AN000;>32mb
 16037                                  ;
 16038                                  ;EndProc Set_Media_ID		;AN000;
 16039                                  
 16040                                  ; MSDOS 6.0
 16041                                  ;---------------------------------------------------------------------------
 16042                                  ; Procedure Name : Set_EXT_mode
 16043                                  ;
 16044                                  ; Inputs:
 16045                                  ;	[EXTOPEN_ON]= flag for extended open
 16046                                  ;	SAVE_BX= mode specified in Extended Open
 16047                                  ; Function:
 16048                                  ;	Set mode in ThisSFT
 16049                                  ; Outputs:
 16050                                  ;	carry set,mode is set if from Extended Open
 16051                                  ;	carry clear, mode not set yet
 16052                                  ;---------------------------------------------------------------------------
 16053                                  ;
 16054                                  ;procedure   Set_EXT_mode,NEAR
 16055                                  ;
 16056                                  ;hkn; SS override
 16057                                  ;	TEST	[EXTOPEN_ON],ext_open_on    ;AN000;EO. from extended open
 16058                                  ;	JZ	NOTEX			    ;AN000;EO. no, do normal
 16059                                  ;	PUSH	AX			    ;AN000;EO.
 16060                                  ;
 16061                                  ;hkn; SS override
 16062                                  ;	MOV	AX,[SAVE_BX]		    ;AN000;EO.
 16063                                  ;	OR	ES:[DI.sf_mode],AX	    ;AN000;EO.
 16064                                  ;	POP	AX			    ;AN000;EO.
 16065                                  ;	STC				    ;AN000;EO.
 16066                                  ;NOTEX:					    ;AN000;
 16067                                  ;	return				    ;AN000;EO.
 16068                                  ;
 16069                                  ;EndProc Set_EXT_mode			    ;AN000;
 16070                                  
 16071                                  ;============================================================================
 16072                                  ; OPEN.ASM, MSDOS 6.0, 1991
 16073                                  ;============================================================================
 16074                                  ; 08/08/2018 - Retro DOS v3.0
 16075                                  
 16076                                  ;	TITLE	DOS_OPEN - Internal OPEN call for MS-DOS
 16077                                  ;	NAME	DOS_OPEN
 16078                                  
 16079                                  ;**	OPEN.ASM - File Open
 16080                                  ;----------------------------------------------------------------------------
 16081                                  ;	Low level routines for openning a file from a file spec.
 16082                                  ;	Also misc routines for sharing errors
 16083                                  ;
 16084                                  ;	DOS_Open
 16085                                  ;	Check_Access_AX
 16086                                  ;	SHARE_ERROR
 16087                                  ;	SET_SFT_MODE
 16088                                  ;	Code_Page_Mismatched_Error		   ; DOS 4.00
 16089                                  ;
 16090                                  ;	Revision history:
 16091                                  ;
 16092                                  ;	    Created: ARR 30 March 1983
 16093                                  ;	    A000	version 4.00   Jan. 1988
 16094                                  ;
 16095                                  ;	M034 - The value in save_bx must be pushed on to the stack for
 16096                                  ; 	       remote extended opens and not save_cx.
 16097                                  ;
 16098                                  ;	M035 - if open made from exec then we must set the appropriate bits
 16099                                  ;	       on the stack before calling off to the redir.
 16100                                  ;	M042 - Bit 11 of DOS34_FLAG set indicates that the redir knows how 
 16101                                  ;	       to handle open from exec. In this case set the appropriate bit
 16102                                  ;	       else do not.
 16103                                  ;----------------------------------------------------------------------------	
 16104                                  
 16105                                  ;Installed = TRUE
 16106                                  
 16107                                  ;	i_need	NoSetDir,BYTE
 16108                                  ;	i_need	THISSFT,DWORD
 16109                                  ;	i_need	THISCDS,DWORD
 16110                                  ;	i_need	CURBUF,DWORD
 16111                                  ;	i_need	CurrentPDB,WORD
 16112                                  ;	i_need	CURR_DIR_END,WORD
 16113                                  ;	I_need	RetryCount,WORD
 16114                                  ;	I_need	Open_Access,BYTE
 16115                                  ;	I_need	fSharing,BYTE
 16116                                  ;	i_need	JShare,DWORD
 16117                                  ;	I_need	FastOpenFlg,byte
 16118                                  ;	I_need	EXTOPEN_ON,BYTE 		  ;AN000;; DOS 4.00
 16119                                  ;	I_need	ALLOWED,BYTE			  ;AN000;; DOS 4.00
 16120                                  ;	I_need	EXTERR,WORD			  ;AN000;; DOS 4.00
 16121                                  ;	I_need	EXTERR_LOCUS,BYTE		  ;AN000;; DOS 4.00
 16122                                  ;	I_need	EXTERR_ACTION,BYTE		  ;AN000;; DOS 4.00
 16123                                  ;	I_need	EXTERR_CLASS,BYTE		  ;AN000;; DOS 4.00
 16124                                  ;	I_need	CPSWFLAG,BYTE			  ;AN000;; DOS 4.00
 16125                                  ;	I_need	EXITHOLD,DWORD			  ;AN000;; DOS 4.00
 16126                                  ;	I_need	THISDPB,DWORD			  ;AN000;; DOS 4.00
 16127                                  ;	I_need	SAVE_CX,WORD			  ;AN000;; DOS 4.00
 16128                                  ;	I_need	SAVE_BX,WORD			  ;M034
 16129                                  ;
 16130                                  ;	I_need	DOS_FLAG,BYTE
 16131                                  ;	I_need	DOS34_FLAG,WORD			  ;M042
 16132                                  
 16133                                  ;Break	<DOS_Open - internal file access>
 16134                                  ;---------------------------------------------------------------------------
 16135                                  ; Procedure Name : DOS_Open
 16136                                  ;
 16137                                  ; Inputs:
 16138                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 16139                                  ;		terminated)
 16140                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 16141                                  ;		( = -1 if current dir not involved, else
 16142                                  ;		 Points to first char after last "/" of current dir part)
 16143                                  ;	[THISCDS] Points to CDS being used
 16144                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 16145                                  ;	[THISSFT] Points to SFT to fill in if file found
 16146                                  ;		(sf_mode field set so that FCB may be detected)
 16147                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 16148                                  ;	AX is Access and Sharing mode
 16149                                  ;	  High NIBBLE of AL (Sharing Mode)
 16150                                  ;		sharing_compat	   file is opened in compatibility mode
 16151                                  ;		sharing_deny_none  file is opened Multi reader, Multi writer
 16152                                  ;		sharing_deny_read  file is opened Only reader, Multi writer
 16153                                  ;		sharing_deny_write file is opened Multi reader, Only writer
 16154                                  ;		sharing_deny_both  file is opened Only reader, Only writer
 16155                                  ;	  Low NIBBLE of AL (Access Mode)
 16156                                  ;		open_for_read	file is opened for reading
 16157                                  ;		open_for_write	file is opened for writing
 16158                                  ;		open_for_both	file is opened for both reading and writing.
 16159                                  ;
 16160                                  ;	  For FCB SFTs AL should = sharing_compat + open_for_both
 16161                                  ;		(not checked)
 16162                                  ; Function:
 16163                                  ;	Try to open the specified file
 16164                                  ; Outputs:
 16165                                  ;	sf_ref_count is NOT altered
 16166                                  ;	CARRY CLEAR
 16167                                  ;	    THISSFT filled in.
 16168                                  ;	CARRY SET
 16169                                  ;	    AX is error code
 16170                                  ;		error_file_not_found
 16171                                  ;			Last element of path not found
 16172                                  ;		error_path_not_found
 16173                                  ;			Bad path (not in curr dir part if present)
 16174                                  ;		error_bad_curr_dir
 16175                                  ;			Bad path in current directory part of path
 16176                                  ;		error_invalid_access
 16177                                  ;			Bad sharing mode or bad access mode or bad combination
 16178                                  ;		error_access_denied
 16179                                  ;			Attempt to open read only file for writting, or
 16180                                  ;			open a directory
 16181                                  ;		error_sharing_violation
 16182                                  ;			The sharing mode was correct but not allowed
 16183                                  ;			generates an INT 24 on compatibility mode SFTs
 16184                                  ; DS preserved, others destroyed
 16185                                  ;----------------------------------------------------------------------------
 16186                                  
 16187                                  DOS_OPEN:
 16188                                  	; DS has been set up to DOSDATA in file.asm and fcbio2.asm. 
 16189                                  
 16190 00003782 C606[F802]00            	MOV	byte [NoSetDir],0
 16191 00003787 E80001                  	CALL	Check_Access_AX
 16192 0000378A 721C                    	JC	short do_ret_label		    ; retc
 16193                                  
 16194 0000378C C43E[3605]              	LES	DI,[THISSFT]
 16195 00003790 30E4                    	XOR	AH,AH
 16196                                  
 16197                                  	; sleaze! move only access/sharing mode in. Leave sf_isFCB unchanged
 16198                                  
 16199 00003792 26884502                	MOV	[ES:DI+SF_ENTRY.sf_mode],AL ; For moment do this on FCBs too
 16200 00003796 06                      	PUSH	ES
 16201 00003797 C436[3A05]              	LES	SI,[THISCDS]
 16202                                  	; 18/08/2018
 16203 0000379B 83FEFF                  	CMP	SI,-1
 16204 0000379E 7509                    	JNZ	short TEST_RE_NET1
 16205 000037A0 07                      	POP	ES
 16206                                  
 16207                                  	; MSDOS 6.0
 16208                                  ;Extended open hooks
 16209                                  	;TEST	byte [EXTOPEN_ON],ext_open_on	;FT. from extnded open		;AN000;
 16210                                  	;JZ	short NOEXTOP 		    ;FT. no, do normal			;AN000;
 16211                                  IFS_extopen:									;AN000;
 16212                                  	;MOV	AL,[SAVE_BX]		    ; M034 - save_bx has original bx  
 16213                                  	;				    ; with which call was made. This
 16214                                  	;				    ; has the open access bits. 
 16215                                  	;;;MOV	AL,[SAVE_CX]		    ; M034 - FT. al= create attribute
 16216                                  	;
 16217                                  	;PUSH	AX			    ;FT. pass create attr to IFS	;AN000;
 16218                                  	;;MOV	AX,(MultNET SHL 8) OR 46    ;FT. issue extended open verb	;AN000;
 16219                                  	;mov	ax,(MultNET*256)+46 
 16220                                  	;INT	2FH			    ;FT.				;AN000;
 16221                                  	;POP	BX			    ;FT. trash bx			;AN000;
 16222                                  	;MOV	byte [EXTOPEN_ON],0	    ;FT.				;AN000;
 16223                                  
 16224                                  ;do_ret_label:
 16225                                  	;retn				    ;FT.				;AN000;
 16226                                  ;NOEXTOP:
 16227                                  ;Extended open hooks
 16228                                  	;
 16229                                  ;IF NOT Installed
 16230                                  	;transfer NET_SEQ_OPEN
 16231                                  ;ELSE
 16232                                  	;
 16233                                  do_net_int2f:
 16234                                  	;
 16235                                  	;test	byte [DOS_FLAG],EXECOPEN ; Q: was this open call made from exec
 16236                                  	;jz	short not_exec_open	; N: just do net open
 16237                                  	;				; Y: check to see if redir is aware
 16238                                  	;				;    of this 
 16239                                  	;
 16240                                  	;				; M042 - start
 16241                                  	;test	word [DOS34_FLAG],EXEC_AWARE_REDIR
 16242                                  	;				; Q: does this redir know how to 
 16243                                  	;				;    this
 16244                                  	;jz	short not_exec_open	; N: just do net open
 16245                                  	;				; Y: set bit 3 of access byte and 
 16246                                  	;				;    set sharing mode to DENY_WRITE
 16247                                  	;				; M042 - end
 16248                                  	;
 16249                                  	; NOTE: This specific mode has not been set for the code assembled
 16250                                  	; under the "NOT Installed" conditional. Currently Installed is 
 16251                                  	; always one.
 16252                                  	;				; M035 - set the bits on the stack
 16253                                  	;mov	AL,SHARING_DENY_WRITE+EXEC_OPEN
 16254                                  	;
 16255                                  ;not_exec_open:
 16256                                  
 16257                                  	; MSDOS 3.3 (& MSDOS 6.0)
 16258 000037A1 50                      	PUSH	AX
 16259                                  
 16260                                  	;MOV	AX,(MultNET SHL 8) OR 22
 16261                                  	;INT	2FH
 16262                                  
 16263 000037A2 B81611                  	mov     ax,1116h
 16264 000037A5 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - OPEN EXISTING REMOTE FILE
 16265                                  			; ES:DI -> uninitialized SFT, SS = DOS CS
 16266                                  			; SDA first filename pointer -> fully-qualified name of file to open
 16267                                  			; STACK: WORD file open mode
 16268                                  			; Return: CF set on error
 16269                                  
 16270 000037A7 5B                      	POP	BX			; clean stack
 16271                                  do_ret_label: ; 09/08/2018
 16272 000037A8 C3                      	retn
 16273                                  ;ENDIF
 16274                                  
 16275                                  TEST_RE_NET1:
 16276 000037A9 26F744430080            	TEST	word [ES:SI+curdir.flags],curdir_isnet
 16277                                  	; 18/08/2018
 16278 000037AF 07                      	POP	ES
 16279                                  	;JZ	short LOCAL_OPEN
 16280                                  
 16281 000037B0 75EF                    	jnz	short do_net_int2f ; (*)
 16282                                  
 16283                                  ;Extended open hooks
 16284                                  	; MSDOS 6.0
 16285                                  	;TEST	byte [EXTOPEN_ON],ext_open_on ;FT. from extended open	;AN000;
 16286                                  	;JNZ	short IFS_extopen	      ;FT. isuue extended open	;AN000;
 16287                                  ;Extended open hooks
 16288                                  
 16289                                  ;IF NOT Installed
 16290                                  ;	transfer NET_OPEN
 16291                                  ;ELSE
 16292                                  	;jmp	short do_net_int2f (*)
 16293                                  ;ENDIF
 16294                                  
 16295                                  LOCAL_OPEN:
 16296                                  	; MSDOS 3.3 (& MSDOS 6.0)
 16297 000037B2 E8B7E8                  	call	EcritDisk
 16298                                  
 16299                                  ; DOS 3.3 FastOPen 6/16/86
 16300                                  
 16301 000037B5 800E[6E0F]05            	OR	byte [FastOpenFlg],FastOpen_Set+Special_Fill_Set ; only open can
 16302                                  
 16303 000037BA E87C10                  	call	GETPATH
 16304                                  
 16305                                  ; DOS 3.3 FastOPen 6/16/86
 16306                                  
 16307 000037BD 731E                    	JNC	short Open_found
 16308 000037BF 7512                    	JNZ	short bad_path2
 16309 000037C1 08C9                    	OR	CL,CL
 16310 000037C3 740E                    	JZ	short bad_path2
 16311                                  
 16312                                  OpenFNF:
 16313 000037C5 B80200                  	MOV	AX,error_file_not_found
 16314                                  
 16315                                  OpenBadRet:
 16316                                  ;hkn; FastOpenFlg is in DOSDATA use SS override
 16317                                  	; 12/08/2018
 16318                                  	;mov	byte [cs:FastOpenFlg],0 ; IBMDOS.COM (MSDOS 3.3) offset 36CAh
 16319                                  	; MSDOS 6.0
 16320 000037C8 368026[6E0F]80          	AND	BYTE [SS:FastOpenFlg],Fast_yes    ;; DOS 3.3
 16321 000037CE F9                      	STC
 16322 000037CF E8A2E8                  	call	LcritDisk
 16323                                  	;JMP	Clear_FastOpen ; 10/08/2018
 16324 000037D2 C3                      	retn 	; 08/09/2018
 16325                                  
 16326                                  bad_path2:
 16327 000037D3 B80300                  	MOV	AX,error_path_not_found
 16328 000037D6 EBF0                    	JMP	short OpenBadRet
 16329                                  
 16330                                  Open_Bad_Access:
 16331 000037D8 B80500                  	MOV	AX,error_access_denied
 16332 000037DB EBEB                    	JMP	short OpenBadRet
 16333                                  
 16334                                  Open_found:
 16335 000037DD 74F9                    	JZ	short Open_Bad_Access 	; test for directories
 16336 000037DF 08E4                    	OR	AH,AH
 16337 000037E1 783F                    	JS	short open_ok		; Devices don't have attributes
 16338 000037E3 8E06[7605]              	MOV	ES,[CURBUF+2]		; get buffer location
 16339 000037E7 268A470B                	MOV	AL,[ES:BX+dir_entry.dir_attr]
 16340 000037EB A808                    	TEST	AL,attr_volume_id	; can't open volume ids
 16341 000037ED 75E9                    	JNZ	short Open_Bad_Access
 16342 000037EF A801                    	TEST	AL,attr_read_only	; check write on read only
 16343 000037F1 742F                    	JZ	short open_ok
 16344                                  ;
 16345                                  ; The file is marked READ-ONLY. We verify that the open mode allows access to
 16346                                  ; the read-only file. Unfortunately, with FCB's and net-FCB's we cannot
 16347                                  ; determine at the OPEN time if such access is allowed. Thus, we defer such
 16348                                  ; processing until the actual write operation:
 16349                                  ;
 16350                                  ; If FCB, then we change the mode to be read_only.
 16351                                  ; If net_FCB, then we change the mode to be read_only.
 16352                                  ; If not open for read then error.
 16353                                  ;
 16354 000037F3 1E                      	push	ds
 16355 000037F4 56                      	push	si
 16356 000037F5 C536[3605]              	LDS	SI,[THISSFT]
 16357 000037F9 8B4C02                  	MOV	CX,[SI+SF_ENTRY.sf_mode]
 16358 000037FC F7C10080                	TEST	CX,sf_isFCB		; is it FCB?
 16359 00003800 750A                    	JNZ	short ResetAccess	; yes, reset the access
 16360 00003802 88CA                    	MOV	DL,CL
 16361 00003804 80E2F0                  	AND	DL,SHARING_MASK
 16362 00003807 80FA70                  	CMP	DL,SHARING_NET_FCB	; is it net FCB?
 16363 0000380A 7508                    	JNZ	short NormalOpen	; no
 16364                                  ResetAccess:
 16365 0000380C 83E1F0                  	AND	CX,~access_mask	;0FFF0h	; clear access
 16366                                  ;	OR	CX,open_for_read	; stick in open_for_read
 16367 0000380F 894C02                  	MOV	[SI+SF_ENTRY.sf_mode],CX
 16368 00003812 EB0C                    	JMP	SHORT FillSFT
 16369                                  ;
 16370                                  ; The SFT is normal.  See if the requested access is open_for_read
 16371                                  ;
 16372                                  NormalOpen:
 16373 00003814 80E10F                  	AND	CL,access_mask	;0Fh	; remove extras
 16374 00003817 80F900                  	CMP	CL,open_for_read	; is it open for read?
 16375 0000381A 7404                    	JZ	short FillSFT
 16376 0000381C 5E                      	pop	si
 16377 0000381D 1F                      	pop	ds
 16378 0000381E EBB8                    	JMP	short Open_Bad_Access
 16379                                  ;
 16380                                  ; All done, restore registers and fill the SFT.
 16381                                  ;
 16382                                  FillSFT:
 16383 00003820 5E                      	pop	si
 16384 00003821 1F                      	pop	ds
 16385                                  open_ok:
 16386 00003822 E89F19                  	call	DOOPEN			; Fill in SFT
 16387                                  
 16388                                  ;hkn; FastOpenFlg is in DOSDATA. use SS override
 16389                                  	;12/08/2018
 16390                                  	;AND	BYTE [SS:FastOpenFlg],Fast_yes    ;; DOS 3.3
 16391 00003825 8026[6E0F]80            	and	byte [FastOpenFlg],Fast_yes	
 16392                                  
 16393                                  	; MSDOS 6.0
 16394                                  	;CALL	DO_SHARE_CHECK
 16395                                  	;JNC	short SHARE_OK
 16396                                  	;call	LcritDisk
 16397                                  	;JMP	short Clear_FastOpen	
 16398                                  
 16399                                  	; MSDOS 3.3
 16400                                  DO_SHARE_CHECK:
 16401 0000382A 8B0E[1A00]              	MOV	CX,[RetryCount]		; Get # tries to do
 16402                                  OpenShareRetry:
 16403 0000382E 51                      	push	cx			; Save number left to do
 16404 0000382F E8FA3A                  	call	SHARE_CHECK		; Final Check
 16405 00003832 59                      	pop	cx			; CX = # left
 16406 00003833 7312                    	JNC	short SHARE_OK		; No problem with access
 16407 00003835 E851E7                  	call	Idle
 16408 00003838 E2F4                    	LOOP	OpenShareRetry		; One more retry used up
 16409                                  OpenShareFail:
 16410 0000383A C43E[3605]              	LES	DI,[THISSFT]
 16411 0000383E E82B00                  	call	SHARE_ERROR
 16412 00003841 73E7                    	JNC	short DO_SHARE_CHECK	; User wants more retry
 16413                                  	
 16414                                  	;12/08/2018
 16415                                  	;mov	byte [ss:FastOpenFlg],0
 16416                                  	;08/09/2018
 16417                                  	;mov	byte [FastOpenFlg],0
 16418 00003843 E82EE8                  	call	LcritDisk
 16419                                  	;JMP	short Clear_FastOpen
 16420 00003846 C3                      	retn
 16421                                  
 16422                                  SHARE_OK:
 16423                                  	; MSDOS 3.3 (& MSDOS 6.0)
 16424 00003847 B80300                  	MOV	AX,3
 16425 0000384A C43E[3605]              	LES	DI,[THISSFT]
 16426                                  ;if installed
 16427                                  	;call	JShare + 14 * 4
 16428 0000384E FF1E[9400]              	call	far [JShare+(14*4)]  ; 14 = ShSU
 16429                                  ;else
 16430                                  ;	Call	ShSU
 16431                                  ;endif
 16432 00003852 E81FE8                  	call	LcritDisk
 16433                                  	
 16434                                  	;FallThru Set_SFT_Mode
 16435                                  
 16436                                  ;----------------------------------------------------------------------------
 16437                                  ; Procedure Name : SET_SFT_MODE
 16438                                  ;
 16439                                  ; Finish SFT initialization for new reference. Set the correct mode.
 16440                                  ;
 16441                                  ;   Inputs:
 16442                                  ;	ThisSFT points to SFT
 16443                                  ;
 16444                                  ;   Outputs:
 16445                                  ;	Carry clear
 16446                                  ;   Registers modified: AX.
 16447                                  ;---------------------------------------------------------------------------
 16448                                  
 16449                                  ;hkn; called from create. DS already set up to DOSDATA.
 16450                                  
 16451                                  SET_SFT_MODE:
 16452 00003855 C43E[3605]              	LES	DI,[THISSFT]
 16453 00003859 E81D16                  	call	DEV_OPEN_SFT
 16454 0000385C 26F745020080            	TEST	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB ; Clears carry
 16455 00003862 7407                    	JZ	short Clear_FastOpen	; sf_mode correct (retz)
 16456 00003864 A1[DE02]                	MOV	AX,[CurrentPDB]
 16457 00003867 26894531                	MOV	[ES:DI+SF_ENTRY.sf_PID],AX ; For FCB sf_PID=PDB
 16458                                  
 16459                                  Clear_FastOpen:
 16460 0000386B C3                      	retn			       ;;;;; DOS 3.3
 16461                                  
 16462                                  ;----------------------------------------------------------------------------
 16463                                  ; Procedure Name : SHARE_ERROR
 16464                                  ;
 16465                                  ; Called on sharing violations. ES:DI points to SFT. AX has error code
 16466                                  ; If SFT is FCB or compatibility mode gens INT 24 error.
 16467                                  ; Returns carry set AX=error_sharing_violation if user says ignore (can't
 16468                                  ; really ignore).  Carry clear
 16469                                  ; if user wants a retry. ES, DI, DS preserved
 16470                                  ;---------------------------------------------------------------------------
 16471                                  
 16472                                  SHARE_ERROR:
 16473 0000386C 26F745020080            	TEST	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB
 16474 00003872 750C                    	JNZ	short _HARD_ERR
 16475 00003874 268A4D02                	MOV	CL,[ES:DI+SF_ENTRY.sf_mode]
 16476 00003878 80E1F0                  	AND	CL,SHARING_MASK
 16477 0000387B 80F900                  	CMP	CL,SHARING_COMPAT
 16478 0000387E 7505                    	JNE	short _NO_HARD_ERR
 16479                                  _HARD_ERR:
 16480 00003880 E8AF3A                  	call	SHARE_VIOLATION
 16481                                  	;retnc				; User wants retry
 16482 00003883 73E6                    	jnc	short Clear_FastOpen
 16483                                  _NO_HARD_ERR:
 16484 00003885 B82000                  	MOV	AX,error_sharing_violation
 16485 00003888 F9                      	STC
 16486 00003889 C3                      	retn
 16487                                  
 16488                                  ; MSDOS 6.0
 16489                                  ;----------------------------------------------------------------------------
 16490                                  ; Procedure Name : DO_SHARE_CHECK
 16491                                  ;
 16492                                  ; Input: THISDPB, WFP_Start, THISSFT set
 16493                                  ; Functions: check file sharing mode is valid
 16494                                  ; Output: carry set, error
 16495                                  ;	  carry clear, share ok
 16496                                  ;----------------------------------------------------------------------------
 16497                                  ;
 16498                                  ;DO_SHARE_CHECK:
 16499                                  ;	call	EcritDisk		; enter critical section
 16500                                  ;OPN_RETRY:
 16501                                  ;	MOV	CX,[RetryCount]		; Get # tries to do
 16502                                  ;OpenShareRetry:
 16503                                  ;	push	cx			; Save number left to do
 16504                                  ;	call	SHARE_CHECK		; Final Check
 16505                                  ;	pop	cx			; CX = # left
 16506                                  ;	JNC	short Share_Ok2		; No problem with access
 16507                                  ;	call	Idle
 16508                                  ;	LOOP	OpenShareRetry		; One more retry used up
 16509                                  ;OpenShareFail:
 16510                                  ;	LES	DI,[THISSFT]
 16511                                  ;	call	SHARE_ERROR
 16512                                  ;	JNC	short OPN_RETRY		; User wants more retry
 16513                                  ;Share_Ok2:
 16514                                  ;	call	LcritDisk		; leave critical section
 16515                                  ;	retn
 16516                                  
 16517                                  ;-----------------------------------------------------------------------------
 16518                                  ; Procedure Name : Check_Access
 16519                                  ;
 16520                                  ; Inputs:
 16521                                  ;	AX is mode
 16522                                  ;	  High NIBBLE of AL (Sharing Mode)
 16523                                  ;		sharing_compat	   file is opened in compatibility mode
 16524                                  ;		sharing_deny_none  file is opened Multi reader, Multi writer
 16525                                  ;		sharing_deny_read  file is opened Only reader, Multi writer
 16526                                  ;		sharing_deny_write file is opened Multi reader, Only writer
 16527                                  ;		sharing_deny_both  file is opened Only reader, Only writer
 16528                                  ;	  Low NIBBLE of AL (Access Mode)
 16529                                  ;		open_for_read	file is opened for reading
 16530                                  ;		open_for_write	file is opened for writing
 16531                                  ;		open_for_both	file is opened for both reading and writing.
 16532                                  ; Function:
 16533                                  ;	Check this access mode for correctness
 16534                                  ; Outputs:
 16535                                  ;	[open_access] = AL input
 16536                                  ;	Carry Clear
 16537                                  ;		Mode is correct
 16538                                  ;		AX unchanged
 16539                                  ;	Carry Set
 16540                                  ;		Mode is bad
 16541                                  ;		AX = error_invalid_access
 16542                                  ; No other registers effected
 16543                                  ;----------------------------------------------------------------------------
 16544                                  
 16545                                  Check_Access_AX:
 16546                                  
 16547 0000388A A2[0905]                	MOV	[OPEN_ACCESS],AL
 16548 0000388D 53                      	PUSH	BX
 16549                                  
 16550                                  ;	If sharing, then test for special sharing mode for FCBs
 16551                                  
 16552 0000388E 88C3                    	MOV	BL,AL
 16553 00003890 80E3F0                  	AND	BL,SHARING_MASK
 16554 00003893 803E[0D05]FF            	CMP	byte [FSHARING],-1
 16555 00003898 7505                    	JNZ	short CheckShareMode	; not through server call, must be ok
 16556 0000389A 80FB70                  	CMP	BL,SHARING_NET_FCB
 16557 0000389D 7405                    	JZ	short CheckAccessMode	; yes, we have an FCB
 16558                                  CheckShareMode:
 16559 0000389F 80FB40                  	CMP	BL,40h			; is this a good sharing mode?
 16560 000038A2 770D                    	JA	short Make_Bad_Access
 16561                                  CheckAccessMode:
 16562 000038A4 88C3                    	MOV	BL,AL
 16563 000038A6 80E30F                  	AND	BL,access_mask
 16564 000038A9 80FB02                  	CMP	BL,2
 16565 000038AC 7703                    	JA	short Make_Bad_Access
 16566 000038AE 5B                      	POP	BX
 16567 000038AF F8                      	CLC
 16568 000038B0 C3                      	retn
 16569                                  
 16570                                  Make_Bad_Access:
 16571 000038B1 B80C00                  	MOV	AX,error_invalid_access
 16572 000038B4 5B                      	POP	BX
 16573 000038B5 F9                      	STC
 16574 000038B6 C3                      	retn
 16575                                  
 16576                                  ;============================================================================
 16577                                  ; DINFO.ASM, MSDOS 6.0, 1991
 16578                                  ;============================================================================
 16579                                  ; 08/08/2018 - Retro DOS v3.0
 16580                                  
 16581                                  ;**	Low level routine for returning disk drive information from a local
 16582                                  ;	  or NET device
 16583                                  ;
 16584                                  ;	DISK_INFO
 16585                                  ;
 16586                                  ;	  Modification history:
 16587                                  ;
 16588                                  ;		Created: ARR 30 March 1983
 16589                                  
 16590                                  ;	Break	<DISK_INFO -- Get Disk Drive Information>
 16591                                  ;---------------------------------------------------------------------------
 16592                                  ; Procedure Name : DISK_INFO
 16593                                  ;
 16594                                  ; Inputs:
 16595                                  ;	[THISCDS] Points to the Macro List Structure of interest
 16596                                  ;		(It MAY NOT be NUL, error not detected)
 16597                                  ; Function:
 16598                                  ;	Get Interesting Drive Information
 16599                                  ; Returns:
 16600                                  ;	DX = Number of free allocation units
 16601                                  ;	BX = Total Number of allocation units on disk
 16602                                  ;	CX = Sector size
 16603                                  ;	AL = Sectors per allocation unit
 16604                                  ;	AH = FAT ID BYTE
 16605                                  ;	Carry set if error (currently user FAILed to I 24)
 16606                                  ; Segs except ES preserved, others destroyed
 16607                                  ;----------------------------------------------------------------------------
 16608                                  
 16609                                  ;hkn; called from getset.asm and misc.asm. DS has already been set up to 
 16610                                  ;hkn; DOSDATA. 
 16611                                  
 16612                                  DISK_INFO:
 16613                                  	; 08/08/2018 - Retro DOS v3.0
 16614                                  	; IBM DOS.COM (MSDOS 3.3, 1987) - Offset 37C5h
 16615                                  
 16616 000038B7 E814E7                  	call	TestNet
 16617 000038BA 7306                    	JNC	short LOCAL_DSK_INFO
 16618                                  
 16619                                  ;IF NOT Installed
 16620                                  ;	transfer NET_DISK_INFO
 16621                                  ;ELSE
 16622                                  	;MOV	AX,(MultNET SHL 8) OR 12
 16623                                  	;INT	2FH
 16624                                  	;return
 16625                                  
 16626 000038BC B80C11                  	mov     ax,110Ch
 16627 000038BF CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - GET DISK SPACE
 16628                                  			; ES:DI -> current directory
 16629                                  			; Return: AL = sectors per cluster, BX = total clusters
 16630                                  			; CX = bytes per sector, DX = number of available clusters
 16631 000038C1 C3                      	retn
 16632                                  ;ENDIF
 16633                                  
 16634                                  LOCAL_DSK_INFO:
 16635 000038C2 C606[D102]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 16636 000038C7 E8A2E7                  	call	EcritDisk
 16637 000038CA E8F222                  	call	FATREAD_CDS		; perform media check.
 16638 000038CD 7241                    	JC	short CRIT_LEAVE
 16639 000038CF BB0200                  	MOV	BX,2
 16640 000038D2 E87C21                  	call	UNPACK			; Get first FAT sector into CURBUF
 16641 000038D5 7239                    	JC	short CRIT_LEAVE
 16642 000038D7 C536[7405]              	LDS	SI,[CURBUF]
 16643 000038DB 8A6410                  	MOV	AH,[SI+BUFINSIZ]	; get FAT ID BYTE
 16644                                  
 16645                                  ;hkn; SS is DOSDATA
 16646 000038DE 16                      	push	ss
 16647 000038DF 1F                      	pop	ds
 16648 000038E0 268B4E0D                	MOV	CX,[ES:BP+DPB.MAX_CLUSTER]
 16649                                  ;
 16650                                  ; Examine the current free count.  If it indicates that we have an invalid
 16651                                  ; count, do the expensive calculation.
 16652                                  ;
 16653 000038E4 268B561E                	MOV	DX,[ES:BP+DPB.FREE_CNT] ; get free count
 16654 000038E8 83FAFF                  	CMP	DX,-1			; is it valid?
 16655 000038EB 7404                    	JZ	short DoScan
 16656                                  ;
 16657                                  ; Check to see if it is in a reasonalbe range.	If so, trust it and return.
 16658                                  ; Otherwise, we need to blast out an internal error message and then recompute
 16659                                  ; the count.
 16660                                  ;
 16661 000038ED 39CA                    	CMP	DX,CX			; is it in a reasonable range?
 16662 000038EF 7223                    	JB	short GotVal		; yes, trust it.
 16663                                  DoScan:
 16664 000038F1 31D2                    	XOR	DX,DX
 16665 000038F3 49                      	DEC	CX
 16666                                  SCANFREE:
 16667 000038F4 E85A21                  	call	UNPACK
 16668 000038F7 7217                    	JC	short CRIT_LEAVE
 16669 000038F9 7501                    	JNZ	short NOTFREECLUS
 16670 000038FB 42                      	INC	DX			; A free one
 16671                                  NOTFREECLUS:
 16672 000038FC 43                      	INC	BX			; Next cluster
 16673 000038FD E2F5                    	LOOP	SCANFREE
 16674 000038FF 4B                      	DEC	BX			; BX was next cluster.	Convert to
 16675                                  ReturnVals:
 16676 00003900 4B                      	DEC	BX			; count
 16677 00003901 268A4604                	MOV	AL,[ES:BP+DPB.CLUSTER_MASK] 
 16678 00003905 FEC0                    	INC	AL			; Sectors/cluster
 16679 00003907 268B4E02                	MOV	CX,[ES:BP+DPB.SECTOR_SIZE] ; Bytes/sector
 16680 0000390B 2689561E                	MOV	[ES:BP+DPB.FREE_CNT],DX
 16681 0000390F F8                      	CLC
 16682                                  CRIT_LEAVE:
 16683 00003910 E861E7                  	call	LcritDisk
 16684 00003913 C3                      	retn
 16685                                  ;
 16686                                  ; We have correctly computed everything previously. Load up registers for
 16687                                  ; return.
 16688                                  ;
 16689                                  GotVal: 
 16690 00003914 89CB                    	MOV	BX,CX			; get cluster count
 16691 00003916 EBE8                    	JMP	short ReturnVals
 16692                                  
 16693                                  ;============================================================================
 16694                                  ; ISEARCH.ASM, MSDOS 6.0, 1991
 16695                                  ;============================================================================
 16696                                  ; 22/07/2018 - Retro DOS v3.0
 16697                                  
 16698                                  ;	TITLE	DOS_SEARCH - Internal SEARCH calls for MS-DOS
 16699                                  ;	NAME	DOS_SEARCH
 16700                                  
 16701                                  ;**	Low level routines for doing local and NET directory searches
 16702                                  ;
 16703                                  ;	DOS_SEARCH_FIRST
 16704                                  ;	DOS_SEARCH_NEXT
 16705                                  ;	RENAME_NEXT
 16706                                  ;
 16707                                  ;	Revision history:
 16708                                  ;
 16709                                  ;	    Created: ARR 30 March 1983
 16710                                  ;	    A000	version 4.00  Jan. 1988
 16711                                  ;	    A001	PTM 3564 -- search for fastopen
 16712                                  
 16713                                  ;Installed = TRUE
 16714                                  
 16715                                  ;--------------------------------------------------------------------------
 16716                                  ;
 16717                                  ; Procedure Name : DOS_SEARCH_FIRST
 16718                                  ;
 16719                                  ; Inputs:
 16720                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 16721                                  ;		terminated)
 16722                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 16723                                  ;		( = -1 if current dir not involved, else
 16724                                  ;		 Points to first char after last "/" of current dir part)
 16725                                  ;	[THISCDS] Points to CDS being used
 16726                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 16727                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 16728                                  ;	[DMAADD] Points to 53 byte buffer
 16729                                  ; Function:
 16730                                  ;	Initiate a search for the given file spec
 16731                                  ; Outputs:
 16732                                  ;	CARRY CLEAR
 16733                                  ;	    The 53 bytes ot DMAADD are filled in as follows:
 16734                                  ;
 16735                                  ;	LOCAL
 16736                                  ;	    Drive Byte (A=1, B=2, ...) High bit clear
 16737                                  ;		NEVER STORE DRIVE BYTE AFTER  found_it
 16738                                  ;	    11 byte search name with Meta chars in it
 16739                                  ;	    Search Attribute Byte, attribute of search
 16740                                  ;	    WORD LastEnt value
 16741                                  ;	    WORD DirStart
 16742                                  ;	    4 byte pad
 16743                                  ;	    32 bytes of the directory entry found
 16744                                  ;	NET
 16745                                  ;	    21 bytes First byte has high bit set
 16746                                  ;	    32 bytes of the directory entry found
 16747                                  ;
 16748                                  ;	CARRY SET
 16749                                  ;	    AX = error code
 16750                                  ;		error_no_more_files
 16751                                  ;			No match for this file
 16752                                  ;		error_path_not_found
 16753                                  ;			Bad path (not in curr dir part if present)
 16754                                  ;		error_bad_curr_dir
 16755                                  ;			Bad path in current directory part of path
 16756                                  ; DS preserved, others destroyed
 16757                                  ;---------------------------------------------------------------------------
 16758                                  
 16759                                  DOS_SEARCH_FIRST:
 16760                                  	; IBMDOS.COM (MSDOS 3.3 kernel) - Offset 3826h
 16761                                  
 16762 00003918 C43E[3A05]              	LES	DI,[THISCDS]
 16763 0000391C 83FFFF                  	CMP	DI,-1
 16764 0000391F 7506                    	JNZ	short TEST_RE_NET2
 16765                                  
 16766                                  ;IF NOT Installed
 16767                                  ;	transfer NET_SEQ_SEARCH_FIRST
 16768                                  ;ELSE
 16769                                  	;mov	ax,1119h
 16770 00003921 B81911                  	MOV	AX,(MultNET<<8)|25
 16771 00003924 CD2F                    	INT	2Fh
 16772 00003926 C3                      	retn
 16773                                  ;ENDIF
 16774                                  
 16775                                  TEST_RE_NET2:
 16776                                  	;test	word [es:di+43h],8000h
 16777 00003927 26F745430080            	TEST	word [ES:DI+curdir.flags],curdir_isnet
 16778 0000392D 7406                    	JZ	short LOCAL_SEARCH_FIRST
 16779                                  
 16780                                  ;IF NOT Installed
 16781                                  ;	transfer NET_SEARCH_FIRST
 16782                                  ;ELSE
 16783                                  	;mov	ax,111Bh
 16784 0000392F B81B11                  	MOV	AX,(MultNET<<8)|27
 16785 00003932 CD2F                    	INT	2FH
 16786 00003934 C3                      	retn
 16787                                  ;ENDIF
 16788                                  
 16789                                  LOCAL_SEARCH_FIRST:
 16790 00003935 E834E7                  	call	EcritDisk
 16791                                  	; MSDOS 6.0
 16792                                  	;TEST	word [DOS34_FLAG],SEARCH_FASTOPEN ;AN000;
 16793                                  	;JZ	short NOFN			;AN000;
 16794                                  	;OR	byte [FastOpenflg],Fastopen_Set	;AN000;
 16795                                  ;NOFN:						;AN000;
 16796 00003938 C606[F802]01            	MOV	byte [NoSetDir],1	; if we find a dir, don't change to it
 16797                                  	; MSDOS 6.0
 16798                                  	;CALL	CHECK_QUESTION		;AN000;;FO. is '?' in path
 16799                                  	;JNC	short norm_GETPATH	;AN000;;FO. no
 16800                                  	;AND	byte [FastOpenflg],Fast_yes ;AN000;;FO. reset fastopen
 16801                                  ;norm_GETPATH:
 16802 0000393D E8F90E                  	call	GETPATH
 16803                                  	; BX = offset NAME1
 16804                                  ;_getdone:
 16805 00003940 7313                    	JNC	short find_check_dev
 16806 00003942 750C                    	JNZ	short bad_path3
 16807 00003944 08C9                    	OR	CL,CL
 16808 00003946 7408                    	JZ	short bad_path3
 16809                                  find_no_more:
 16810                                  	;mov	ax,12h
 16811 00003948 B81200                  	MOV	AX,error_no_more_files
 16812                                  BadBye:
 16813                                  	; MSDOS 6.0
 16814                                  	;AND	[SS:FastOpenflg],Fast_yes  ;AN000;;FO. reset fastopen
 16815                                  
 16816 0000394B F9                      	STC
 16817 0000394C E825E7                  	call	LcritDisk
 16818 0000394F C3                      	retn
 16819                                  
 16820                                  bad_path3:
 16821                                  	;mov	ax,3
 16822 00003950 B80300                  	MOV	AX,error_path_not_found
 16823 00003953 EBF6                    	JMP	short BadBye
 16824                                  
 16825                                  find_check_dev:
 16826 00003955 08E4                    	OR	AH,AH
 16827 00003957 790A                    	JNS	short found_entry
 16828 00003959 C706[F402]FFFF          	MOV	word [LASTENT],-1	; Cause DOS_SEARCH_NEXT to fail
 16829 0000395F FE06[0B05]              	INC	byte [FOUND_DEV]	; Tell DOS_RENAME we found a device
 16830                                  found_entry:
 16831                                  ;
 16832                                  ; We set the physical drive byte here Instead of after found_it; Doing
 16833                                  ; a search-next may not have wfp_start set correctly
 16834                                  ;
 16835 00003963 C43E[DA02]              	LES	DI,[DMAADD]
 16836 00003967 8B36[4A05]              	MOV	SI,[WFP_START]		; get pointer to beginning
 16837 0000396B AC                      	LODSB
 16838 0000396C 2C40                    	SUB	AL,'A'-1                ; logical drive
 16839 0000396E AA                      	STOSB				; High bit not set (local)
 16840                                  found_it:
 16841 0000396F C43E[DA02]              	LES	DI,[DMAADD]
 16842 00003973 47                      	INC	DI
 16843                                  
 16844                                  	; MSDOS 6.0
 16845                                  	;PUSH	DS				  ;FO.;AN001; save ds
 16846                                  	;TEST	byte [Fastopenflg],Set_For_Search ;FO.;AN001; from fastopen
 16847                                  	;JZ	short notfast 			  ;FO.;AN001;
 16848                                  	;MOV	SI,BX				  ;FO.;AN001;
 16849                                  	;MOV	DS,[CURBUF+2]			  ;FO.;AN001;
 16850                                  	;JMP	SHORT movmov			  ;FO.;AN001;
 16851                                  
 16852                                  notfast:
 16853 00003974 BE[E604]                	MOV	SI,NAME1		; find_buf 2 = formatted name
 16854                                  movmov:
 16855                                  ; Special E5 code
 16856 00003977 A4                      	MOVSB
 16857 00003978 26807DFF05              	CMP	BYTE [ES:DI-1],5
 16858 0000397D 7505                    	JNZ	short NOTKANJB
 16859 0000397F 26C645FFE5              	MOV	BYTE [ES:DI-1],0E5H
 16860                                  NOTKANJB:
 16861 00003984 B90A00                  	MOV	CX,10
 16862 00003987 F3A4                    	REP	MOVSB
 16863                                  
 16864                                  	; 08/09/2018
 16865                                  	;POP	DS			;FO.;AN001; restore ds
 16866                                  
 16867 00003989 A0[0605]                	MOV	AL,[ATTRIB]
 16868 0000398C AA                      	STOSB
 16869 0000398D 50                      	PUSH	AX			; Save AH device info
 16870 0000398E A1[F402]                	MOV	AX,[LASTENT]
 16871 00003991 AB                      	STOSW
 16872 00003992 A1[5805]                	MOV	AX,[DIRSTART]
 16873 00003995 AB                      	STOSW
 16874                                  ; 4 bytes of 21 byte cont structure left for NET stuff
 16875 00003996 83C704                  	ADD	DI,4
 16876 00003999 58                      	POP	AX			; Recover AH device info
 16877 0000399A 08E4                    	OR	AH,AH
 16878 0000399C 7813                    	JS	short DOSREL		; Device entry is DOSGROUP relative
 16879 0000399E 833E[7405]FF            	CMP	WORD [CURBUF],-1
 16880 000039A3 7508                    	JNZ	short OKSTORE
 16881                                  
 16882                                  	; MSDOS 6.0
 16883                                  	;TEST	byte [FastOPenFlg],Set_For_Search
 16884                                  					;AN000;;FO. from fastopen and is good
 16885                                  	;JNZ	short OKSTORE		;AN000;;FO.
 16886                                  
 16887                                  	; The user has specified the root directory itself, rather than some
 16888                                  	; contents of it. We can't "find" that.
 16889 000039A5 26C745F8FFFF            	MOV	WORD [ES:DI-8],-1	; Cause DOS_SEARCH_NEXT to fail by
 16890                                  					;   stuffing a -1 at Lastent
 16891 000039AB EB9B                    	JMP	short find_no_more
 16892                                  
 16893                                  OKSTORE:
 16894 000039AD 8E1E[7605]              	MOV	DS,[CURBUF+2]
 16895                                  DOSREL:
 16896                                  	; BX = offset NAME1 (from GETPATH)
 16897 000039B1 89DE                    	MOV	SI,BX			; SI-> start of entry
 16898                                  
 16899                                  ; NOTE: DOS_RENAME depends on BX not being altered after this point
 16900                                  
 16901                                  	;mov	cx,32
 16902 000039B3 B92000                  	MOV	CX,dir_entry.size
 16903                                  ;;;;; 7/29/86
 16904 000039B6 89F8                    	MOV	AX,DI			; save the 1st byte addr
 16905 000039B8 F3A4                    	REP	MOVSB
 16906 000039BA 89C7                    	MOV	DI,AX			; restore 1st byte addr
 16907 000039BC 26803D05                	CMP	BYTE [ES:DI],05H	; special char check
 16908 000039C0 7504                    	JNZ	short NO05
 16909 000039C2 26C605E5                	MOV	BYTE [ES:DI],0E5H	; convert it back to E5
 16910                                  NO05:
 16911                                  
 16912                                  ;;;;; 7/29/86
 16913                                  
 16914                                  ;hkn; FastOpenflg is in DOSDATA use SS
 16915                                  	; MSDOS 6.0
 16916                                  	;AND	byte [SS:FastOpenflg],Fast_yes ;AN000;;FO. reset fastopen
 16917                                  	;push	ss
 16918                                  	;pop	ds
 16919                                  	;AND	byte [FastOpenflg],Fast_yes
 16920                                  
 16921                                  ;hkn; SS is DOSDATA
 16922 000039C6 16                      	push	ss
 16923 000039C7 1F                      	pop	ds
 16924 000039C8 F8                      	CLC
 16925 000039C9 E8A8E6                  	call	LcritDisk
 16926 000039CC C3                      	retn
 16927                                  
 16928                                  ;BREAK <DOS_SEARCH_NEXT - scan for subsequent matches>
 16929                                  ;----------------------------------------------------------------------------
 16930                                  ;
 16931                                  ; Procedure Name : DOS_SEARCH_NEXT
 16932                                  ;
 16933                                  ; Inputs:
 16934                                  ;	[DMAADD] Points to 53 byte buffer returned by DOS_SEARCH_FIRST
 16935                                  ;	    (only first 21 bytes must have valid information)
 16936                                  ; Function:
 16937                                  ;	Look for subsequent matches
 16938                                  ; Outputs:
 16939                                  ;	CARRY CLEAR
 16940                                  ;	    The 53 bytes at DMAADD are updated for next call
 16941                                  ;		(see DOS_SEARCH_FIRST)
 16942                                  ;	CARRY SET
 16943                                  ;	    AX = error code
 16944                                  ;		error_no_more_files
 16945                                  ;			No more files to find
 16946                                  ; DS preserved, others destroyed
 16947                                  ;---------------------------------------------------------------------------
 16948                                  
 16949                                  ;hkn; called from search.asm. DS already set up at this point.
 16950                                  
 16951                                  DOS_SEARCH_NEXT:
 16952 000039CD C43E[DA02]              	LES	DI,[DMAADD]
 16953 000039D1 268A05                  	MOV	AL,[ES:DI]
 16954 000039D4 A880                    	TEST	AL,80H			; Test for NET
 16955 000039D6 7406                    	JZ	short LOCAL_SEARCH_NEXT
 16956                                  ;IF NOT Installed
 16957                                  ;	transfer NET_SEARCH_NEXT
 16958                                  ;ELSE
 16959                                  	;mov	ax,111Ch
 16960 000039D8 B81C11                  	MOV	AX,(MultNET<<8)|28
 16961 000039DB CD2F                    	INT	2FH  ; Multiplex - NETWORK REDIRECTOR - FINDNEXT
 16962                                  		     ; SS = DS = DOS CS, [DTA] = 21-byte findfirst search data
 16963                                  		     ; Return: CF set on error, AX = DOS error code
 16964                                  		     ; CF clear if successful
 16965 000039DD C3                      	retn
 16966                                  ;ENDIF
 16967                                  
 16968                                  LOCAL_SEARCH_NEXT:
 16969                                  	;AL is drive A=1
 16970                                  	;mov	byte [EXTERR_LOCUS],2
 16971 000039DE C606[D102]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 16972 000039E3 E886E6                  	call	EcritDisk
 16973                                  
 16974                                  ;hkn; DummyCDS is in DOSDATA
 16975 000039E6 C706[3A05][9504]        	MOV     word [THISCDS],DUMMYCDS
 16976                                  ;hkn; Segment address is DOSDATA - use ds
 16977                                  ;hkn;	MOV     WORD [THISCDS+2],CS
 16978 000039EC 8C1E[3C05]              	mov	[THISCDS+2],DS
 16979                                  
 16980 000039F0 0440                    	ADD	AL,'A'-1
 16981 000039F2 E8C62E                  	call	InitCDS
 16982                                  
 16983                                  ;	call	GETTHISDRV		; Set CDS pointer
 16984                                  
 16985 000039F5 7236                    	JC	short No_files		; Bogus drive letter
 16986 000039F7 C43E[3A05]              	LES	DI,[THISCDS]		; Get CDS pointer
 16987                                  	;les	bp,[es:di+45h]
 16988 000039FB 26C46D45                	LES	BP,[ES:DI+curdir.devptr]; Get DPB pointer
 16989 000039FF E8F2DC                  	call	GOTDPB			; [THISDPB] = ES:BP
 16990                                  
 16991 00003A02 268A4600                	mov	al,[ES:BP]
 16992                                  	;mov	AL,[ES:BP+DPB.DRIVE] ; mov al,[ES:BP+0]
 16993 00003A06 A2[1105]                	mov	[THISDRV],AL
 16994                                  	;mov	word [CREATING], 0E500h
 16995 00003A09 C706[1805]00E5          	MOV	WORD [CREATING],(DIRFREE*256)+0
 16996 00003A0F C606[F802]01            	MOV	byte [NoSetDir],1	; if we find a dir, don't change to it
 16997 00003A14 C536[DA02]              	LDS	SI,[DMAADD]
 16998 00003A18 AC                      	LODSB				; Drive Byte
 16999                                  
 17000                                  	;entry	RENAME_NEXT		; Entry used by DOS_RENAME
 17001                                  RENAME_NEXT:
 17002                                  	;context ES
 17003 00003A19 16                      	push	ss
 17004 00003A1A 07                      	pop	es			; THIS BLOWS ES:BP POINTER TO DPB
 17005                                  
 17006                                  ;hkn; NAME1 is in DOSDATA
 17007 00003A1B BF[E604]                	MOV	DI,NAME1
 17008                                  
 17009 00003A1E B90B00                  	MOV	CX,11
 17010 00003A21 F3A4                    	REP	MOVSB			; Search name
 17011 00003A23 AC                      	LODSB				; Attribute
 17012                                  
 17013                                  ;hkn; SS override
 17014 00003A24 36A2[0605]              	MOV	[SS:ATTRIB],AL
 17015 00003A28 AD                      	LODSW				; LastEnt
 17016 00003A29 09C0                    	OR	AX,AX
 17017 00003A2B 7903                    	JNS	short cont_load
 17018                                  No_files:
 17019 00003A2D E918FF                  	JMP	find_no_more
 17020                                  
 17021                                  cont_load:
 17022 00003A30 50                      	PUSH	AX			; Save LastEnt
 17023 00003A31 AD                      	LODSW				; DirStart
 17024 00003A32 89C3                    	MOV	BX,AX
 17025                                  
 17026                                  ;hkn; SS is DOSDATA
 17027                                  	;context DS
 17028 00003A34 16                      	push	ss
 17029 00003A35 1F                      	pop	ds
 17030 00003A36 C42E[2405]              	LES	BP,[THISDPB]		; Recover ES:BP
 17031                                  	;invoke	SetDirSrch
 17032 00003A3A E8A70D                  	call	SETDIRSRCH
 17033 00003A3D 7303                    	JNC	short SEARCH_GOON
 17034 00003A3F 58                      	POP	AX			; Clean stack
 17035 00003A40 EBEB                    	JMP	short No_files
 17036                                  
 17037                                  SEARCH_GOON:
 17038 00003A42 E87E10                  	call	STARTSRCH
 17039 00003A45 58                      	POP	AX
 17040 00003A46 E86D0D                  	call	GETENT
 17041 00003A49 72E2                    	JC	short No_files
 17042 00003A4B E8AC0C                  	call	NEXTENT
 17043 00003A4E 72DD                    	JC	short No_files
 17044 00003A50 30E4                    	XOR	AH,AH			; If Search_Next, can't be a DEV
 17045 00003A52 E91AFF                  	JMP	found_it ; 10/08/2018
 17046                                  
 17047                                  ; MSDOS6.0
 17048                                  ;---------------------------------------------------------------------------
 17049                                  ;
 17050                                  ; Procedure Name : CHECK_QUESTION
 17051                                  ;
 17052                                  ; Input: [WFP_START]= pointer to final path
 17053                                  ; Function: check '?' char
 17054                                  ; Output: carry clear, if no '?'
 17055                                  ;	 carry set, if '?' exists
 17056                                  ;---------------------------------------------------------------------------
 17057                                  
 17058                                  ;CHECK_QUESTION:
 17059                                  ;;hkn;	wfp_start is in DOSDATA;hkn;	MOV     WORD PTR ThisCDS+2,CS
 17060                                  ;;hkn;	PUSH	CS			;AN000;;FO.
 17061                                  ;	push	ss
 17062                                  ;
 17063                                  ;	POP	DS			;AN000;;FO. ds:si -> final path
 17064                                  ;	MOV	SI,[WFP_START]		;AN000;;FO.
 17065                                  ;getnext:				;AN000;
 17066                                  ;	LODSB				;AN000;;FO. get char
 17067                                  ;	OR	AL,AL			;AN000;;FO. is it null
 17068                                  ;	JZ	short NO_Question	;AN000;;FO. yes
 17069                                  ;	CMP	AL,'?'                  ;AN000;;FO. is '?'
 17070                                  ;	JNZ	short getnext 		;AN000;;FO. no
 17071                                  ;	STC				;AN000;;FO.
 17072                                  ;NO_Question:				;AN000;
 17073                                  ;	retn				;AN000;;FO.
 17074                                  
 17075                                  ;============================================================================
 17076                                  ; ABORT.ASM, MSDOS 6.0, 1991
 17077                                  ;============================================================================
 17078                                  ; 23/07/2018 - Retro DOS v3.0
 17079                                  
 17080                                  ;**
 17081                                  ;
 17082                                  ; Internal Abort call closes all handles and FCBs associated with a process.
 17083                                  ;  If process has NET resources a close all is sent out over the net.
 17084                                  ;
 17085                                  ;   DOS_ABORT
 17086                                  ;
 17087                                  ;   Modification history:
 17088                                  ;
 17089                                  ;       Created: ARR 30 March 1983
 17090                                  ;
 17091                                  ;	M038	SR	10/16/90	Free SFT with the PSP of the process
 17092                                  ;				being terminated only if it is busy.
 17093                                  ;
 17094                                  
 17095                                  ;Break   <DOS_ABORT -- CLOSE all files for process>
 17096                                  ;--------------------------------------------------------------------------
 17097                                  ;
 17098                                  ; Procedure Name : DOS_ABORT
 17099                                  ;
 17100                                  ; Inputs:
 17101                                  ;       [CurrentPDB] set to PID of process aborting
 17102                                  ; Function:
 17103                                  ;       Close all files and free all SFTs for this PID
 17104                                  ; Returns:
 17105                                  ;       None
 17106                                  ; All destroyed except stack
 17107                                  ;---------------------------------------------------------------------------
 17108                                  
 17109                                  DOS_ABORT:
 17110 00003A55 368E06[DE02]            	MOV     ES,[SS:CurrentPDB]	; SS override
 17111 00003A5A 268B0E3200              	MOV     CX,[ES:PDB.JFN_Length]  ; Number of JFNs
 17112                                  reset_free_jfn:
 17113 00003A5F 89CB                    	MOV     BX,CX
 17114 00003A61 51                      	PUSH    CX
 17115 00003A62 4B                      	DEC     BX                      ; get jfn (start with last one)
 17116                                  
 17117 00003A63 E86133                  	CALL	_$CLOSE
 17118 00003A66 59                      	POP     CX
 17119 00003A67 E2F6                    	LOOP    reset_free_jfn          ; and do 'em all
 17120                                  ;
 17121                                  ; Note:  We do need to explicitly close FCBs. Reasons are as follows: If we
 17122                                  ; are running in the no-sharing no-network environment, we are simulating the
 17123                                  ; 2.0 world and thus if the user doesn't close the file, that is his problem
 17124                                  ; BUT...  the cache remains in a state with garbage that may be reused by the
 17125                                  ; next process.  We scan the set and blast the ref counts of the FCBs we own.
 17126                                  ;
 17127                                  ; If sharing is loaded, then the following call to close process will
 17128                                  ; correctly close all FCBs.  We will then need to walk the list AFTER here.
 17129                                  ;
 17130                                  ; Finally, the following call to NET_Abort will cause an EOP to be sent to all
 17131                                  ; known network resources.  These resources are then responsible for cleaning
 17132                                  ; up after this process.
 17133                                  ;
 17134                                  ; Sleazy, eh?
 17135                                  ;
 17136                                  	;context DS			; SS is DOSDATA
 17137 00003A69 16                      	push	ss
 17138 00003A6A 1F                      	pop	ds  ; 09/09/2018
 17139                                  
 17140                                  	;CallInstall Net_Abort, MultNET, 29
 17141 00003A6B B81D11                  	mov	ax, 111Dh
 17142 00003A6E CD2F                    	int     2Fh 	; Multiplex - NETWORK REDIRECTOR 
 17143                                  			;	    - CLOSE ALL REMOTE FILES FOR PROCESS
 17144                                  			; DS???, SS = DOS CS
 17145                                  ;if installed
 17146 00003A70 FF1E[6C00]              	call	far [JShare+(4*4)]	; 4 = MFTCloseP
 17147                                  ;else
 17148                                  ;	call 	mftCloseP
 17149                                  ;endif
 17150                                  
 17151                                  ; Scan the FCB cache for guys that belong to this process and zap their ref
 17152                                  ; counts.
 17153                                  					; SS override
 17154 00003A74 36C43E[4000]            	les     di,[ss:SFTFCB]		; grab the pointer to the table
 17155                                  	;mov	cx,[es:di+4]
 17156 00003A79 268B4D04                	mov     cx,[es:di+SFT.SFCount]
 17157 00003A7D E317                    	jcxz    FCBScanDone
 17158                                  	;lea	di,[di+6]
 17159 00003A7F 8D7D06                  	LEA     DI,[DI+SFT.SFTable]	; point at table
 17160 00003A82 36A1[E802]              	mov     ax,[SS:PROC_ID]		; SS override
 17161                                  FCBTest:
 17162                                  	;cmp	[es:di+31h],ax
 17163 00003A86 26394531                	cmp	[es:di+SF_ENTRY.sf_PID],ax ; is this one of ours
 17164 00003A8A 7505                    	jnz	short FCBNext		; no, skip it
 17165 00003A8C 26C7050000              	mov	word [es:di],0
 17166                                  	;mov	word [es:di+SF_ENTRY.sf_ref_count],0  ; yes, blast ref count
 17167                                  FCBNext:
 17168 00003A91 83C735                  	add     di,SF_ENTRY.size
 17169 00003A94 E2F0                    	loop    FCBTest
 17170                                  FCBScanDone:
 17171                                  
 17172                                  ;
 17173                                  ; Walk the SFT to eliminate all busy SFT's for this process.
 17174                                  ;
 17175 00003A96 31DB                    	XOR     BX,BX
 17176                                  Scan:
 17177 00003A98 53                      	push    bx
 17178 00003A99 E87A2D                  	call	SFFromSFN
 17179 00003A9C 5B                      	pop     bx
 17180 00003A9D 7301                    	jnc     short Scan1
 17181 00003A9F C3                      	retn
 17182                                  
 17183                                  ;M038
 17184                                  ; Do what the comment above says, check for busy state
 17185                                  ;
 17186                                  Scan1:
 17187                                  	;cmp	word [es:di],0
 17188                                  	;jz	short scan_next  ; MSDOS 3.3
 17189                                  	; MSDOS6.0
 17190 00003AA0 26833DFF                	cmp	word [es:di],sf_busy ; -1
 17191                                  	;cmp	word [es:di+SF_ENTRY.sf_ref_count],sf_busy
 17192                                  				; Is Sft busy? ;M038
 17193 00003AA4 7519                    	jnz	short scan_next
 17194                                  ;
 17195                                  ; we have a SFT that is busy. See if it is for the current process
 17196                                  ;
 17197 00003AA6 36A1[E802]              	mov     ax,[SS:PROC_ID]		; SS override
 17198                                  	;cmp	[es:di+31h],ax
 17199 00003AAA 26394531                	cmp	[es:di+SF_ENTRY.sf_PID],ax
 17200 00003AAE 750F                    	jnz	short scan_next
 17201 00003AB0 36A1[EA02]              	mov     ax,[SS:USER_ID]		; SS override
 17202                                  	;cmp	[es:di+2Fh],ax
 17203 00003AB4 2639452F                	cmp	[es:di+SF_ENTRY.sf_UID],ax
 17204 00003AB8 7505                    	jnz	short scan_next
 17205                                  ;
 17206                                  ; This SFT is labelled as ours.
 17207                                  ;
 17208 00003ABA 26C7050000              	mov	word [es:di],0
 17209                                  	;mov	word [es:di+SF_ENTRY.sf_ref_count],0
 17210                                  scan_next:
 17211 00003ABF 43                      	inc     bx
 17212 00003AC0 EBD6                    	jmp     short Scan
 17213                                  
 17214                                  
 17215                                  ;============================================================================
 17216                                  ; CLOSE.ASM, MSDOS 6.0, 1991
 17217                                  ;============================================================================
 17218                                  ; 23/07/2018 - Retro DOS v3.0
 17219                                  
 17220                                  ;**	Internal Close and Commit calls to close a local or NET SFT.
 17221                                  ;
 17222                                  ;	DOS_CLOSE
 17223                                  ;	DOS_COMMIT
 17224                                  ;	FREE_SFT
 17225                                  ;	SetSFTTimes
 17226                                  ;
 17227                                  ;	Revision history:
 17228                                  ;
 17229                                  ;	   AN000  version 4.00	Jan. 1988
 17230                                  ;	   A005   PTM 3718 --- lost clusters when fastopen installed
 17231                                  ;	   A011   PTM 4766 --- C2 fastopen problem
 17232                                  
 17233                                  ;Installed = TRUE
 17234                                  
 17235                                  ;Break <DOS_CLOSE -- CLOSE FILE from SFT>
 17236                                  ;---------------------------------------------------------------------------
 17237                                  ;
 17238                                  ; Procedure Name : DOS_CLOSE
 17239                                  ;
 17240                                  ; Inputs:
 17241                                  ;	[THISSFT] set to the SFT for the file being used
 17242                                  ; Function:
 17243                                  ;	Close the indicated file via the SFT
 17244                                  ; Returns:
 17245                                  ;	sf_ref_count decremented otherwise
 17246                                  ;	ES:DI point to SFT
 17247                                  ;	Carry set if error
 17248                                  ;	    AX has error code
 17249                                  ; DS preserved, others destroyed
 17250                                  ;---------------------------------------------------------------------------
 17251                                  
 17252                                  ;hkn; DOS_CLOSE called from fcbio.asm and handle.asm. DS alreday set up.
 17253                                  
 17254                                  ; 23/07/2018 - IBMDOS.COM (MSDOS 3.3), 1987 - Offset 39D0h
 17255                                  
 17256                                  DOS_CLOSE:
 17257 00003AC2 C43E[3605]              	LES	DI,[THISSFT]
 17258                                  	;mov	bx,[ES:DI+5]
 17259 00003AC6 268B5D05                	MOV	BX,[ES:DI+SF_ENTRY.sf_flags]
 17260                                  
 17261                                  ;	Network closes are handled entirely by the net code.
 17262                                  
 17263                                  	;test	bx,8000h
 17264 00003ACA F7C30080                	TEST	BX,sf_isnet
 17265 00003ACE 7406                    	JZ	short LocalClose
 17266                                  
 17267                                  	;CallInstall Net_Close,MultNET,6
 17268 00003AD0 B80611                  	mov     ax, 1106h
 17269 00003AD3 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - CLOSE REMOTE FILE
 17270                                  			; ES:DI -> SFT
 17271                                  			; SFT DPB field -> DPB of drive containing file
 17272                                  			; Return: CF set on error, AX = DOS error code
 17273                                  			; CF clear if successful
 17274 00003AD5 C3                      	retn
 17275                                  
 17276                                  ;
 17277                                  ; All closes release the sharing information.
 17278                                  ; No commit releases sharing information
 17279                                  ;
 17280                                  ; All closes decrement the ref count.
 17281                                  ; No commit decrements the ref count.
 17282                                  ;
 17283                                  LocalClose:
 17284 00003AD6 E893E5                  	call	EcritDisk
 17285 00003AD9 E80E01                  	CALL	SetSFTTimes
 17286 00003ADC E89D00                  	CALL	FREE_SFT		; dec ref count or mark as busy
 17287                                  
 17288                                  ;hkn; SS is DOSDATA
 17289                                  	;Context DS
 17290 00003ADF 16                      	push	ss
 17291 00003AE0 1F                      	pop	ds
 17292                                  
 17293 00003AE1 50                      	push	ax
 17294 00003AE2 53                      	push	bx
 17295 00003AE3 E87238                  	call	ShareEnd
 17296 00003AE6 5B                      	pop	bx
 17297 00003AE7 58                      	pop	ax
 17298                                  ;
 17299                                  ; Commit enters here. AX from commit MUST be <> 1, BX is flags word
 17300                                  ;
 17301                                  CloseEntry:
 17302 00003AE8 50                      	PUSH	AX
 17303                                  ;
 17304                                  ; File clean or device does not get stamped nor disk looked at.
 17305                                  ;
 17306                                  	;test	bx,0C0h
 17307 00003AE9 F7C3C000                	TEST	BX,devid_file_clean+devid_device
 17308                                  	;JZ	short rdir
 17309                                  	;JMP	FREE_SFT_OK		; either clean or device
 17310 00003AED 757A                    	jnz	short FREE_SFT_OK
 17311                                  ;
 17312                                  ; Retrieve the directory entry for the file
 17313                                  ;
 17314                                  rdir:
 17315 00003AEF E89700                  	CALL	DirFromSFT
 17316                                  	;mov	al,5
 17317 00003AF2 B005                    	MOV	AL,error_access_denied
 17318                                  	;JNC	short clook
 17319                                  	;JMP	CloseFinish		; pretend the close worked.
 17320 00003AF4 7274                    	jc	short CloseFinish
 17321                                  clook:
 17322                                  ;
 17323                                  ; ES:DI points to entry
 17324                                  ; DS:SI points to SFT
 17325                                  ; ES:BX points to buffer header
 17326                                  ;
 17327 00003AF6 57                      	push	di
 17328 00003AF7 56                      	push	si
 17329                                  	;lea	si,[si+20h] ; MSDOS 3.3
 17330 00003AF8 8D7420                  	LEA	SI,[SI+SF_ENTRY.sf_name]
 17331                                  ;
 17332                                  ; ES:DI point to directory entry
 17333                                  ; DS:SI point to unpacked name
 17334                                  ;
 17335 00003AFB E884E4                  	call	XCHGP
 17336                                  ;
 17337                                  ; ES:DI point to unpacked name
 17338                                  ; DS:SI point to directory entry
 17339                                  ;
 17340 00003AFE E8570C                  	call	MetaCompare
 17341 00003B01 E87EE4                  	call	XCHGP
 17342 00003B04 5E                      	pop	si
 17343 00003B05 5F                      	pop	di
 17344 00003B06 740B                    	JZ	short CLOSE_GO		; Name OK
 17345                                  Bye:	
 17346 00003B08 89F7                    	MOV	DI,SI
 17347 00003B0A 1E                      	PUSH	DS
 17348 00003B0B 07                      	POP	ES			; ES:DI points to SFT
 17349 00003B0C 16                      	PUSH	SS
 17350 00003B0D 1F                      	POP	DS
 17351 00003B0E F9                      	STC
 17352                                  	;mov	al,2
 17353 00003B0F B002                    	MOV	AL,error_file_not_found
 17354 00003B11 EB57                    	JMP	short CloseFinish
 17355                                  
 17356                                  CLOSE_GO:
 17357                                  	; MSDOS 6.0
 17358                                  	;TEST	[SI+SF_ENTRY.sf_mode],sf_isFCB	; FCB ?
 17359                                  	;JZ	short nofcb		; no, set dir attr, sf_attr
 17360                                  	; MSDOS 3.3 (& MSDOS 6.0)
 17361                                  	;mov	ch,[es:di+0Bh]
 17362 00003B13 268A6D0B                	MOV	CH,[ES:DI+dir_entry.dir_attr]
 17363                                  	;mov	al,[si+4]
 17364 00003B17 8A4404                  	MOV	AL,[SI+SF_ENTRY.sf_attr]
 17365                                  
 17366                                  ;hkn; SS override
 17367 00003B1A 36A2[0605]              	MOV	[SS:ATTRIB],AL
 17368                                  	; MSDOS 3.3
 17369 00003B1E E8B60F                  	call	MatchAttributes
 17370 00003B21 75E5                    	JNZ	short Bye		; attributes do not match
 17371                                  	;JMP	SHORT setattr		;FT.
 17372                                  	; MSDOS 6.0
 17373                                  ;nofcb:
 17374                                  	;MOV	AL,[SI+SF_ENTRY.sf_attr] ;FT.		;AN000;
 17375                                  	;MOV	[ES:DI+dir_entry.dir_attr],AL ;FT.	;AN000;
 17376                                  setattr:
 17377                                  	; MSDOS 3.3 (& MSDOS6.0)
 17378                                  	;or	byte [es:di+0Bh],20h
 17379 00003B23 26804D0B20              	OR	BYTE [ES:DI+dir_entry.dir_attr],attr_archive ;Set archive
 17380                                  	; MSDOS6.0
 17381                                  	;MOV	AX,[ES:DI+dir_entry.dir_first] ;AN011
 17382                                  					;F.O. save old first cluster
 17383                                  ;hkn; SS override
 17384                                  	;MOV	[SS:OLD_FIRSTCLUS],AX	;AN011;F.O. save old first cluster
 17385                                  
 17386                                  	;mov	ax,[si+0Bh]
 17387 00003B28 8B440B                  	MOV	AX,[SI+SF_ENTRY.sf_firclus]
 17388                                  	;mov	[es:di+1Ah],ax
 17389 00003B2B 2689451A                	MOV	[ES:DI+dir_entry.dir_first],AX	;Set firclus pointer
 17390                                  	;mov	ax,[si+11h]
 17391 00003B2F 8B4411                  	MOV	AX,[SI+SF_ENTRY.sf_size]
 17392                                  	;mov	[es:di+1Ch],ax
 17393 00003B32 2689451C                	MOV	[ES:DI+dir_entry.dir_size_l],AX	;Set size
 17394                                  	;mov	ax,[si+13h]
 17395 00003B36 8B4413                  	MOV	AX,[SI+SF_ENTRY.sf_size+2]
 17396                                  	;mov	[es:di+1Eh],ax
 17397 00003B39 2689451E                	MOV	[ES:DI+dir_entry.dir_size_h],AX
 17398                                  	;mov	ax,[si+0Fh]
 17399 00003B3D 8B440F                  	MOV	AX,[SI+SF_ENTRY.sf_date]
 17400                                  	;mov	[es:di+18h],ax
 17401 00003B40 26894518                	MOV	[ES:DI+dir_entry.dir_date],AX	;Set date
 17402                                  	;mov	ax,[si+0Dh]
 17403 00003B44 8B440D                  	MOV	AX,[SI+SF_ENTRY.sf_time]
 17404                                  	;mov	[es:di+16h],ax
 17405 00003B47 26894516                	MOV	[ES:DI+dir_entry.dir_time],AX	;Set time
 17406                                  
 17407                                  	; MSDOS 6.0
 17408                                  ;; File Tagging
 17409                                  	;TEST	byte [ES:BX+BUFFINFO.buf_flags],buf_dirty  
 17410                                  	;			  ;LB. if already dirty		    ;AN000;
 17411                                  	;JNZ	short yesdirty	  ;LB.  don't increment dirty count ;AN000;
 17412                                  	;call	INC_DIRTY_COUNT   ;LB.				    ;AN000;
 17413                                  	; MSDOS 3.3 (& MSDOS6.0)
 17414                                  	;or	byte [es:bx+5],40h
 17415 00003B4B 26804F0540              	OR	byte [ES:BX+BUFFINFO.buf_flags],buf_dirty ;Buffer dirty
 17416                                  yesdirty:
 17417 00003B50 1E                      	push	ds
 17418 00003B51 56                      	push	si
 17419                                  	; MSDOS 6.0
 17420                                  	;MOV	CX,[SI.sf_firclus]	; do this for Fastopen
 17421                                  
 17422                                  ;hkn; SS override
 17423                                  	;MOV	AL,[SS:THISDRV]
 17424                                  	; MSDOS3.3 
 17425 00003B52 16                      	push	ss
 17426 00003B53 1F                      	pop	ds
 17427 00003B54 A0[1105]                	MOV	AL,[THISDRV]
 17428                                  ;;; 10/1/86  update fastopen cache
 17429                                  	; MSDOS 3.3 (& MSDOS6.0)
 17430 00003B57 52                      	PUSH	DX
 17431 00003B58 B400                    	MOV	AH,0			; dir entry update
 17432 00003B5A 88C2                    	MOV	DL,AL			; drive number A=0, B=1,,,
 17433                                  	; MSDOS 6.0
 17434                                  	;OR	CX,CX			;AN005; first cluster 0; may be truncated
 17435                                  	;JNZ	short do_update2	;AN005; no, do update
 17436                                  	;MOV	AH,3			;AN005; do a delete cache entry
 17437                                  	;MOV	DI,[SI+SF_ENTRY.sf_dirsec]   ;AN005; cx:di = dir sector
 17438                                  	;MOV	CX,[SI+SF_ENTRY.sf_dirsec+2] ;AN005;
 17439                                  	;MOV	DH,[SI+SF_ENTRY.sf_dirpos]   ;AN005; dh= dir pos
 17440                                  	;JMP	SHORT do_update 	;AN011;F.O.
 17441                                  ;do_update2:				;AN011;F.O.
 17442                                  ;hkn; SS override fort OLD_FIRSTCLUS
 17443                                  	;CMP	CX,[SS:OLD_FIRSTCLUS]	;AN011;F.O. same as old first clusetr?
 17444                                  	;JZ	short do_update		;AN011;F.O. yes
 17445                                  	;MOV	AH,2			;AN011;F.O. delete the old entry
 17446                                  	;MOV	CX,[SS:OLD_FIRSTCLUS]	;AN011;F.O.
 17447                                  do_update:				;AN005;
 17448                                  ;hkn; SS is DOSDATA
 17449                                  	;Context DS
 17450                                  	;push	ss
 17451                                  	;pop	ds	
 17452                                  	; MSDOS 3.3 (& MSDOS6.0)
 17453 00003B5C E8B4F8                  	call	FastOpen_Update 	; invoke fastopen
 17454 00003B5F 5A                      	POP	DX
 17455                                  
 17456                                  ;;; 10/1/86  update fastopen cache
 17457 00003B60 E8CE23                  	call	FLUSHBUF		; flush all relevant buffers
 17458 00003B63 5F                      	pop	di
 17459 00003B64 07                      	pop	es
 17460                                  	;mov	al,5
 17461 00003B65 B005                    	MOV	AL,error_access_denied
 17462 00003B67 7201                    	JC	short CloseFinish
 17463                                  FREE_SFT_OK:
 17464 00003B69 F8                      	CLC				; signal no error.
 17465                                  CloseFinish:
 17466                                  ;
 17467                                  ; Indicate to the device that the SFT is being closed.
 17468                                  ;
 17469                                  ;;;; 7/21/86
 17470 00003B6A 9C                      	PUSHF				; save flag from DirFromSFT
 17471 00003B6B E81213                  	call	DEV_CLOSE_SFT
 17472 00003B6E 9D                      	POPF
 17473                                  ;;;; 7/21/86
 17474                                  ;
 17475                                  ; See if the ref count indicates that we have busied the SFT. If so, mark the
 17476                                  ; SFT as being free. Note that we do NOT need to be in critSFT as we are ONLY
 17477                                  ; going to be moving from busy to free.
 17478                                  ;
 17479 00003B6F 59                      	POP	CX			; get old ref count
 17480 00003B70 9C                      	PUSHF
 17481 00003B71 49                      	DEC	CX			; if cx != 1
 17482 00003B72 7503                    	JNZ	short NoFree		; then do NOT free SFT
 17483 00003B74 26890D                  	mov	[es:di],cx
 17484                                  	;MOV	[ES:DI+SF_ENTRY.sf_ref_Count],CX ; mov [es:di+0],cx
 17485                                  NoFree:
 17486 00003B77 E8FAE4                  	call	LcritDisk
 17487 00003B7A 9D                      	POPF
 17488 00003B7B C3                      	retn
 17489                                  
 17490                                  ;---------------------------------------------------------------------------
 17491                                  ;
 17492                                  ; Procedure Name : FREE_SFT
 17493                                  ;
 17494                                  ; ES:DI -> SFT. Decs sft_ref_count. If the count goes to 0, mark it as busy.
 17495                                  ; Flags preserved. Return old ref count in AX
 17496                                  ;
 17497                                  ; Note that busy is indicated by the SFT ref count being -1.
 17498                                  ;
 17499                                  ;---------------------------------------------------------------------------
 17500                                  
 17501                                  FREE_SFT:
 17502 00003B7C 9C                      	PUSHF		; Save carry state
 17503 00003B7D 268B05                  	mov	ax,[es:di]
 17504                                  	;MOV	AX,[ES:DI+SF_ENTRY.sf_ref_count]
 17505 00003B80 48                      	DEC	AX
 17506 00003B81 7501                    	JNZ	short SetCount
 17507 00003B83 48                      	DEC	AX
 17508                                  SetCount:
 17509 00003B84 268705                  	xchg	ax,[es:di]
 17510                                  	;XCHG	AX,[ES:DI+SF_ENTRY.sf_ref_count]
 17511 00003B87 9D                      	POPF
 17512 00003B88 C3                      	retn
 17513                                  
 17514                                  ;----------------------------------------------------------------------------
 17515                                  ;
 17516                                  ; Procedure Name : DirFromSFT
 17517                                  ;
 17518                                  ;   DirFromSFT - locate a directory entry given an SFT.
 17519                                  ;
 17520                                  ;   Inputs:	ES:DI point to SFT
 17521                                  ;		DS = DOSDATA
 17522                                  ;   Outputs:
 17523                                  ;		EXTERR_LOCUS = errLOC_Disk
 17524                                  ;		CurBuf points to buffer
 17525                                  ;		Carry Clear -> operation OK
 17526                                  ;		    ES:DI point to entry
 17527                                  ;		    ES:BX point to buffer
 17528                                  ;		    DS:SI point to SFT
 17529                                  ;		Carry SET   -> operation failed
 17530                                  ;		    registers trashified
 17531                                  ;   Registers modified: ALL
 17532                                  ;----------------------------------------------------------------------------
 17533                                  
 17534                                  DirFromSFT:
 17535                                  	;mov	byte [EXTERR_LOCUS],2
 17536 00003B89 C606[D102]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 17537 00003B8E 06                      	push	es
 17538 00003B8F 57                      	push	di
 17539                                  	; MSDOS 3.3
 17540                                  	;mov	dx,[es:di+1Dh]
 17541 00003B90 268B551D                	MOV	dx,[ES:DI+SF_ENTRY.sf_dirsec]
 17542                                  	; MSDOS 6.0
 17543                                  	;MOV	DX,[ES:DI+SF_ENTRY.sf_dirsec+2]  ;F.C. >32mb
 17544                                  	;MOV	[HIGH_SECTOR],DX		 ;F.C. >32mb
 17545                                  	;MOV	DX,[ES:DI+SF_ENTRY.sf_dirsec]
 17546                                  	;PUSH	word [HIGH_SECTOR]	;F.C. >32mb
 17547                                  	; MSDOS 3.3 (& MSDOS6.0)
 17548 00003B94 52                      	PUSH	DX
 17549 00003B95 E81520                  	call	FATREAD_SFT		; ES:BP points to DPB, [THISDRV] set
 17550                                  					; [THISDPB] set
 17551 00003B98 5A                      	POP	DX
 17552                                  	;POP	word [HIGH_SECTOR]	;F.C. >32mb
 17553 00003B99 7225                    	JC	short PopDone
 17554 00003B9B 30C0                    	XOR	AL,AL			; Pre read
 17555                                  	;mov	byte [ALLOWED],18h
 17556 00003B9D C606[F702]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 17557 00003BA2 E8E422                  	call	GETBUFFR
 17558 00003BA5 7219                    	JC	short PopDone
 17559 00003BA7 5E                      	pop	si
 17560 00003BA8 1F                      	pop	ds			; Get back SFT pointer
 17561                                  
 17562                                  ;hkn; SS override
 17563 00003BA9 36C43E[7405]            	LES	DI,[SS:CURBUF]
 17564                                  	;or	byte [es:di+5],4
 17565 00003BAE 26804D0504              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_isDIR
 17566 00003BB3 89FB                    	MOV	BX,DI			; ES:BX point to buffer header
 17567                                  	;lea	di,[di+10h]
 17568 00003BB5 8D7D10                  	LEA	DI,[DI+BUFINSIZ] 	; Point to buffer
 17569                                  	;mov	al,32
 17570 00003BB8 B020                    	MOV	AL,dir_entry.size
 17571 00003BBA F6641F                  	MUL	byte [SI+SF_ENTRY.sf_dirpos]
 17572 00003BBD 01C7                    	ADD	DI,AX			; Point at the entry
 17573 00003BBF C3                      	retn				; carry is clear
 17574                                  
 17575                                  PopDone:
 17576 00003BC0 5F                      	pop	di
 17577 00003BC1 07                      	pop	es
 17578                                  PopDone_retn:
 17579 00003BC2 C3                      	retn
 17580                                  
 17581                                  ;----------------------------------------------------------------------------
 17582                                  ;
 17583                                  ;**	DOS_Commit - UPdate Directory Entries
 17584                                  ;
 17585                                  ;	ENTRY	same as DOS_CLOSE (??? BUGBUG - update this jgl)
 17586                                  ;		(DS) = DOSGROUP
 17587                                  ;	EXIT	Same as DOS_CLOSE except ref_count field is not altered
 17588                                  ;	USES	all but DS
 17589                                  ;
 17590                                  ;----------------------------------------------------------------------------
 17591                                  ;
 17592                                  
 17593                                  DOS_COMMIT:
 17594                                  	;hkn; called from srvcall. DS already set up.
 17595 00003BC3 C43E[3605]              	LES	DI,[THISSFT]
 17596                                  	;mov	bx,[es:di+5]
 17597 00003BC7 268B5D05                	MOV	BX,[ES:DI+SF_ENTRY.sf_flags]
 17598                                  	;test	bx,0C0h
 17599 00003BCB F7C3C000                	TEST	BX,devid_file_clean+devid_device ;Clears carry
 17600 00003BCF 75F1                    	jnz	short PopDone_retn
 17601                                  	;test	bx,8000h
 17602 00003BD1 F7C30080                	TEST	BX,sf_isnet
 17603 00003BD5 7406                    	JZ	short LOCAL_COMMIT
 17604                                  
 17605                                  ;IF NOT Installed
 17606                                  ;	transfer NET_COMMIT
 17607                                  ;ELSE
 17608                                  	;mov	ax,1107h
 17609 00003BD7 B80711                  	MOV	AX,(MultNET<<8)|7
 17610 00003BDA CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - COMMIT REMOTE FILE
 17611                                  			; ES:DI -> SFT
 17612                                  			; SFT DPB field -> DPB of drive containing file
 17613                                  			; Return: CF set on error, AX = DOS error code
 17614                                  			; CF clear if successful
 17615 00003BDC C3                      	retn
 17616                                  ;ENDIF
 17617                                  
 17618                                  ;
 17619                                  ; Perform local commit operation by doing a close but not releaseing the SFT.
 17620                                  ; There are three ways we can do this.	One is to enter a critical section to
 17621                                  ; protect a potential free.  The second is to increment the ref count to mask
 17622                                  ; the close decrementing.
 17623                                  ;
 17624                                  ; The proper way is to let the caller's of close decide if a decrement should
 17625                                  ; be done.  We do this by providing another entry into close after the
 17626                                  ; decrement and after the share information release.
 17627                                  ;
 17628                                  LOCAL_COMMIT:
 17629 00003BDD E88CE4                  	call	EcritDisk
 17630                                  	; MSDOS6.0
 17631                                  	;call	EcritDisk	;PTM.
 17632 00003BE0 E80700                  	call	SetSFTTimes
 17633 00003BE3 B8FFFF                  	MOV	AX,-1
 17634 00003BE6 E8FFFE                  	call	CloseEntry
 17635                                  	; MSDOS 6.0
 17636                                  	;PUSHF			;PTM.				;AN000;
 17637                                  	;call	DEV_OPEN_SFT	;PTM.  increment device count	;AN000;
 17638                                  	;POPF			;PTM.				;AN000;
 17639                                  	;call	LcritDisk	;PTM.				;AN000;
 17640                                  localcommit_retn:
 17641 00003BE9 C3                      	retn
 17642                                  
 17643                                  ;Break	<SetSFTTimes - signal a change in the times for an SFT>
 17644                                  ;----------------------------------------------------------------------------
 17645                                  ;
 17646                                  ; Procedure Name : SetSFTTimes
 17647                                  ;
 17648                                  ;   SetSFTTimes - Examine the flags for a SFT and set the time appropriately.
 17649                                  ;   Reflect these times in other SFT's for the same file.
 17650                                  ;
 17651                                  ;   Inputs:	ES:DI point to SFT
 17652                                  ;		BX = sf_flags set apprpriately
 17653                                  ;   Outputs:	Set sft times to current time iff File & dirty & !nodate
 17654                                  ;   Registers modified: All except ES:DI, BX, AX
 17655                                  ;
 17656                                  ;----------------------------------------------------------------------------
 17657                                  
 17658                                  SetSFTTimes:
 17659                                  ;	File clean or device does not get stamped nor disk looked at.
 17660                                  	
 17661                                  	;test	bx,0C0h
 17662 00003BEA F7C3C000                	TEST	BX,devid_file_clean+devid_device
 17663                                  	;retnz				; clean or device => no timestamp
 17664 00003BEE 75F9                    	jnz	short localcommit_retn
 17665                                  
 17666                                  ;	file and dirty. See if date is good
 17667                                  
 17668                                  	;test	bx,4000h
 17669 00003BF0 F7C30040                	TEST	BX,sf_close_nodate
 17670                                  	;retnz				; nodate => no timestamp
 17671 00003BF4 75F3                    	jnz	short localcommit_retn
 17672                                  
 17673 00003BF6 50                      	push	ax
 17674 00003BF7 53                      	push	bx
 17675 00003BF8 E8BEDC                  	call	DATE16			; Date/Time to AX/DX
 17676                                  	;mov	[es:di+0Fh],ax
 17677 00003BFB 2689450F                	MOV	[ES:DI+SF_ENTRY.sf_date],AX
 17678                                  	;mov	[es:di+0Dh],dx
 17679 00003BFF 2689550D                	MOV	[ES:DI+SF_ENTRY.sf_time],DX
 17680 00003C03 31C0                    	XOR	AX,AX
 17681                                  ;if installed
 17682                                  	;call	JShare + 14 * 4
 17683 00003C05 FF1E[9400]              	call	far [JShare+(14*4)]	; 14 = ShSU
 17684                                  ;else
 17685                                  ;	call	ShSU
 17686                                  ;endif
 17687 00003C09 5B                      	pop	bx
 17688 00003C0A 58                      	pop	ax
 17689 00003C0B C3                      	retn
 17690                                  
 17691                                  ;============================================================================
 17692                                  ; DIRCALL.ASM, MSDOS 6.0, 1991
 17693                                  ;============================================================================
 17694                                  ; 23/07/2018 - Retro DOS v3.0
 17695                                  
 17696                                  ;TITLE DIRCALL - Directory manipulation internal calls
 17697                                  ;NAME  DIRCALL
 17698                                  
 17699                                  ;**	Low level directory manipulation routines for making removing and
 17700                                  ;	  verifying local or NET directories
 17701                                  ;
 17702                                  ;	DOS_MKDIR
 17703                                  ;	DOS_CHDIR
 17704                                  ;	DOS_RMDIR
 17705                                  ;
 17706                                  ;	Modification history:
 17707                                  ;
 17708                                  ;		Created: ARR 30 March 1983
 17709                                  
 17710                                  ;BREAK <DOS_MkDir - Make a directory entry>
 17711                                  ;---------------------------------------------------------------------------
 17712                                  ;
 17713                                  ; Procedure Name : DOS_MkDir
 17714                                  ;
 17715                                  ; Inputs:
 17716                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 17717                                  ;		terminated)
 17718                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 17719                                  ;		( = -1 if current dir not involved, else
 17720                                  ;		 Points to first char after last "/" of current dir part)
 17721                                  ;	[THISCDS] Points to CDS being used
 17722                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 17723                                  ; Function:
 17724                                  ;	Make a new directory
 17725                                  ; Returns:
 17726                                  ;	Carry Clear
 17727                                  ;		No error
 17728                                  ;	Carry Set
 17729                                  ;	    AX is error code
 17730                                  ;		error_path_not_found
 17731                                  ;			Bad path (not in curr dir part if present)
 17732                                  ;		error_bad_curr_dir
 17733                                  ;			Bad path in current directory part of path
 17734                                  ;		error_access_denied
 17735                                  ;			Already exists, device name
 17736                                  ; DS preserved, Others destroyed
 17737                                  ;---------------------------------------------------------------------------
 17738                                  
 17739                                  ;hkn; called from path.asm. DS already set up.
 17740                                  
 17741                                  DOS_MKDIR:
 17742 00003C0C E8BFE3                  	call	TestNet
 17743 00003C0F 7314                    	JNC	short LOCAL_MKDIR
 17744                                  
 17745                                  ;IF NOT Installed
 17746                                  ;	transfer NET_MKDIR
 17747                                  ;ELSE
 17748                                  	;mov	ax,1103h
 17749 00003C11 B80311                  	MOV	AX,(MultNET<<8)|3
 17750 00003C14 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - MAKE REMOTE DIRECTORY
 17751                                  			; SS = DOS CS
 17752                                  			; SDA first filename pointer -> fully-qualified directory name
 17753                                  			; SDA CDS pointer -> current directory
 17754                                  			; Return: CF set on error, AX = DOS error code
 17755                                  			; CF clear if successful
 17756 00003C16 C3                      	retn
 17757                                  ;ENDIF
 17758                                  
 17759                                  NODEACCERRJ:
 17760                                  	;mov	ax,5
 17761 00003C17 B80500                  	MOV	AX,error_access_denied
 17762                                  _BadRet:
 17763 00003C1A F9                      	STC
 17764 00003C1B E856E4                  	call	LcritDisk
 17765 00003C1E C3                      	retn
 17766                                  
 17767                                  PATHNFJ:
 17768 00003C1F E852E4                  	call	LcritDisk
 17769 00003C22 E920FB                  	jmp	SET_MKND_ERR	; Map the MakeNode error and return
 17770                                  
 17771                                  LOCAL_MKDIR:
 17772 00003C25 E844E4                  	call	EcritDisk
 17773                                  ;
 17774                                  ; MakeNode requires an SFT to fiddle with. We Use a temp spot (RENBUF)
 17775                                  ;
 17776 00003C28 8C16[3805]              	MOV	[THISSFT+2],SS
 17777                                  
 17778                                  ;hkn; DOSDATA
 17779 00003C2C C706[3605][E003]        	MOV	WORD [THISSFT],RENBUF
 17780                                  ;
 17781                                  ;  NOTE: Need WORD PTR because MASM takes type of
 17782                                  ;   TempSFT (byte) instead of type of sf_mft (word).
 17783                                  ;
 17784 00003C32 C706[1304]0000          	MOV	WORD [RENBUF+SF_ENTRY.sf_MFT],0
 17785                                  				; make sure SHARER won't complain.
 17786                                  	;mov	al,10h
 17787 00003C38 B010                    	MOV	AL,attr_directory
 17788 00003C3A E8F313                  	call	MakeNode
 17789 00003C3D 72E0                    	JC	short PATHNFJ
 17790 00003C3F 83F803                  	CMP	AX,3
 17791 00003C42 74D3                    	JZ	short NODEACCERRJ ; Can't make a device into a directory
 17792 00003C44 C42E[2405]              	LES	BP,[THISDPB]	; Makenode zaps this
 17793 00003C48 C53E[7405]              	LDS	DI,[CURBUF]
 17794 00003C4C 29FE                    	SUB	SI,DI
 17795 00003C4E 56                      	PUSH	SI		; Pointer to dir_first
 17796                                  	; MSDOS 6.0
 17797                                  	;PUSH	WORD [DI+BUFFINFO.buf_sector+2]	;F.C. >32mb
 17798                                  	; MSDOS 3.3 (& MSDOS 6.0)
 17799                                  	;push	word [di+6]
 17800 00003C4F FF7506                  	PUSH	WORD [DI+BUFFINFO.buf_sector] ; Sector of new node
 17801 00003C52 16                      	push	ss
 17802 00003C53 1F                      	pop	ds
 17803 00003C54 FF36[5805]              	PUSH	word [DIRSTART]	; Parent for .. entry
 17804 00003C58 31C0                    	XOR	AX,AX
 17805 00003C5A A3[5805]                	MOV	[DIRSTART],AX	; Null directory
 17806 00003C5D E81413                  	call	NEWDIR
 17807 00003C60 7260                    	JC	short NODEEXISTSPOPDEL ; No room
 17808 00003C62 E8510B                  	call	GETENT		; First entry
 17809 00003C65 725B                    	JC	short NODEEXISTSPOPDEL ; Screw up
 17810 00003C67 C43E[7405]              	LES	DI,[CURBUF]
 17811                                  
 17812                                  	; MSDOS 6.0
 17813                                  	;TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 17814                                  	;			 ;LB. if already dirty		    ;AN000;
 17815                                  	;JNZ	short yesdirty_	 ;LB.   don't increment dirty count ;AN000;
 17816                                  	;call	INC_DIRTY_COUNT  ;LB.				    ;AN000;
 17817                                  	
 17818                                  	; MSDOS 3.3 (& MSDOS 6.0)
 17819                                  	;or	byte [es:di+5],40h
 17820 00003C6B 26804D0540              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 17821                                  ;yesdirty_:
 17822                                  	;add	di,16
 17823 00003C70 83C710                  	ADD	DI,BUFINSIZ	; Point at buffer
 17824 00003C73 B82E20                  	MOV	AX,202EH	; ". "
 17825 00003C76 8B16[5805]              	MOV	DX,[DIRSTART]	; Point at itself
 17826 00003C7A E88F13                  	call	SETDOTENT
 17827 00003C7D B82E2E                  	MOV	AX,2E2EH	; ".."
 17828 00003C80 5A                      	POP	DX		; Parent
 17829 00003C81 E88813                  	call	SETDOTENT
 17830 00003C84 C42E[2405]              	LES	BP,[THISDPB]
 17831                                  	;mov	byte [ALLOWED],18h
 17832 00003C88 C606[F702]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 17833 00003C8D 5A                      	POP	DX		; Entry sector
 17834                                  	; MSDOS 6.0
 17835                                  	;POP	word [HIGH_SECTOR] ;F.C. >32mb
 17836                                  
 17837 00003C8E 30C0                    	XOR	AL,AL		; Pre read
 17838 00003C90 E8F621                  	call	GETBUFFR
 17839 00003C93 7256                    	JC	short NODEEXISTSP
 17840 00003C95 8B16[5805]              	MOV	DX,[DIRSTART]
 17841 00003C99 C53E[7405]              	LDS	DI,[CURBUF]
 17842                                  	;or	byte [di+5],4
 17843 00003C9D 804D0504                	OR	byte [DI+BUFFINFO.buf_flags],buf_isDIR
 17844 00003CA1 5E                      	POP	SI		; dir_first pointer
 17845 00003CA2 01FE                    	ADD	SI,DI
 17846 00003CA4 8914                    	MOV	[SI],DX
 17847 00003CA6 31D2                    	XOR	DX,DX
 17848 00003CA8 895402                  	MOV	[SI+2],DX	; Zero size
 17849 00003CAB 895404                  	MOV	[SI+4],DX
 17850                                  DIRUP:
 17851                                  	; MSDOS 6.0
 17852                                  	;TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty  
 17853                                  	;			 ;LB. if already dirty 		   ;AN000;
 17854                                  	;JNZ	short yesdirty2	 ;LB.  don't increment dirty count ;AN000;
 17855                                  	;call	INC_DIRTY_COUNT  ;LB.				   ;AN000;
 17856                                  	
 17857                                  	; MSDOS 3.3 (& MSDOS 6.0)
 17858                                  	;or	byte [di+5],40h
 17859 00003CAE 804D0540                	OR	byte [DI+BUFFINFO.buf_flags],buf_dirty	; Dirty buffer
 17860                                  ;yesdirty2:
 17861 00003CB2 16                      	push	ss
 17862 00003CB3 1F                      	pop	ds
 17863 00003CB4 268A4600                	mov	al,[es:bp]
 17864                                  	; 18/05/2019
 17865                                  	;MOV	AL,[ES:BP+DPB.DRIVE]  ; mov al,[es:bp+0]
 17866 00003CB8 E87622                  	call	FLUSHBUF
 17867                                  	;mov	ax,5
 17868 00003CBB B80500                  	MOV	AX,error_access_denied
 17869 00003CBE E8B3E3                  	call	LcritDisk
 17870 00003CC1 C3                      	retn
 17871                                  
 17872                                  NODEEXISTSPOPDEL:
 17873 00003CC2 5A                      	POP	DX		; Parent
 17874 00003CC3 5A                      	POP	DX		; Entry sector
 17875                                  	; MSDOS 6.0 
 17876                                  	;POP	word [HIGH_SECTOR] ; F.C. >32mb
 17877 00003CC4 C42E[2405]              	LES	BP,[THISDPB]
 17878                                  	;mov	byte [ALLOWED],18h
 17879 00003CC8 C606[F702]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 17880 00003CCD 30C0                    	XOR	AL,AL		; Pre read
 17881 00003CCF E8B721                  	call	GETBUFFR
 17882 00003CD2 7217                    	JC	short NODEEXISTSP
 17883 00003CD4 C53E[7405]              	LDS	DI,[CURBUF]
 17884                                  	;or	byte [di+5],4
 17885 00003CD8 804D0504                	OR	byte [DI+BUFFINFO.buf_flags],buf_isDIR
 17886 00003CDC 5E                      	POP	SI		; dir_first pointer
 17887 00003CDD 01FE                    	ADD	SI,DI
 17888                                  	;sub	si,1Ah ; 26
 17889 00003CDF 83EE1A                  	SUB	SI,dir_entry.dir_first	;Point back to start of dir entry
 17890 00003CE2 C604E5                  	MOV	BYTE [SI],0E5H	; Free the entry
 17891 00003CE5 E8C6FF                  	CALL	DIRUP		; Error doesn't matter since erroring anyway
 17892                                  NODEEXISTS:
 17893 00003CE8 E92CFF                  	JMP	NODEACCERRJ ; 10/08/2018
 17894                                  
 17895                                  NODEEXISTSP:
 17896 00003CEB 5E                      	POP	SI		; Clean stack
 17897 00003CEC EBFA                    	JMP	short NODEEXISTS
 17898                                  
 17899                                  ;BREAK <DOS_ChDir -- Verify a directory>
 17900                                  ;----------------------------------------------------------------------------
 17901                                  ;
 17902                                  ; Procedure Name : DOS_ChDir
 17903                                  ;
 17904                                  ; Inputs:
 17905                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 17906                                  ;		terminated)
 17907                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 17908                                  ;		( = -1 if current dir not involved, else
 17909                                  ;		 Points to first char after last "/" of current dir part)
 17910                                  ;	[THISCDS] Points to CDS being used May not be NUL
 17911                                  ; Function:
 17912                                  ;	Validate the path for potential new current directory
 17913                                  ; Returns:
 17914                                  ;	NOTE:
 17915                                  ;	    [SATTRIB] is modified by this call
 17916                                  ;	Carry Clear
 17917                                  ;	    CX is cluster number of the DIR, LOCAL CDS ONLY
 17918                                  ;		Caller must NOT set ID fields on a NET CDS.
 17919                                  ;	Carry Set
 17920                                  ;	    AX is error code
 17921                                  ;		error_path_not_found
 17922                                  ;			Bad path
 17923                                  ;		error_access_denied
 17924                                  ;			device or file name
 17925                                  ; DS preserved, Others destroyed
 17926                                  ;----------------------------------------------------------------------------
 17927                                  
 17928                                  ;hkn; called from path.asm and dir2.asm. DS already set up.
 17929                                  
 17930                                  DOS_CHDIR:
 17931 00003CEE E8DDE2                  	call	TestNet
 17932 00003CF1 7306                    	JNC	short LOCAL_CHDIR
 17933                                  
 17934                                  ;IF NOT Installed
 17935                                  ;	transfer NET_CHDIR
 17936                                  ;ELSE
 17937                                  	;mov	ax,1105h
 17938 00003CF3 B80511                  	MOV	AX,(MultNET<<8)|5
 17939 00003CF6 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - CHDIR
 17940                                  			; SS = DOS CS
 17941                                  			; SDA first filename pointer -> fully-qualified directory name
 17942                                  			; SDA CDS pointer -> current directory
 17943                                  			; Return: CF set on error, AX = DOS error code
 17944                                  			; CF clear if successful
 17945 00003CF8 C3                      	retn
 17946                                  ;ENDIF
 17947                                  
 17948                                  LOCAL_CHDIR:
 17949 00003CF9 E870E3                  	call	EcritDisk
 17950                                  	; MSDOS 6.0
 17951                                  	;TEST	word [ES:DI+curdir.flags],curdir_splice ;PTM.
 17952                                  	;JZ	short nojoin			   ;PTM.
 17953                                  	;MOV	word [ES:DI+curdir.ID],0FFFFH	   ;PTM.
 17954                                  ;nojoin:
 17955                                  	; MSDOS 3.3 (& MSDOS 6.0)
 17956 00003CFC C606[F802]00            	MOV	byte [NoSetDir],0 ; FALSE
 17957                                  	;mov	byte [SATTRIB],16h
 17958 00003D01 C606[0805]16            	MOV	byte [SATTRIB],attr_directory+attr_system+attr_hidden
 17959                                  				; Dir calls can find these
 17960                                  ; DOS 3.3  6/24/86 FastOpen
 17961 00003D06 800E[6E0F]01            	OR	byte [FastOpenFlg],FastOpen_Set	   ; set fastopen flag
 17962 00003D0B E82B0B                  	call	GETPATH
 17963                                  	;PUSHF							;AN000;
 17964                                  	;AND	byte [FastOpenFlg],Fast_yes	   ; clear it all ;AC000;
 17965                                  	;POPF							;AN000;
 17966                                  ; DOS 3.3  6/24/86 FastOpen
 17967                                  
 17968                                  	; MSDOS 3.3
 17969 00003D0E C606[6E0F]00            	mov	byte [FastOpenFlg],0
 17970                                  	;mov	ax,3
 17971 00003D13 B80300                  	MOV	AX,error_path_not_found
 17972 00003D16 7207                    	JC	short ChDirDone
 17973 00003D18 753A                    	JNZ	short NOTDIRPATH	; Path not a DIR
 17974 00003D1A 8B0E[5805]              	MOV	CX,[DIRSTART]		; Get cluster number
 17975 00003D1E F8                      	CLC
 17976                                  ChDirDone:
 17977 00003D1F E852E3                  	call	LcritDisk
 17978 00003D22 C3                      	retn
 17979                                  
 17980                                  ;BREAK <DOS_RmDir -- Remove a directory>
 17981                                  ;----------------------------------------------------------------------------
 17982                                  ;
 17983                                  ; Procedure Name : DOS_RmDir
 17984                                  ;
 17985                                  ; Inputs:
 17986                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 17987                                  ;		terminated)
 17988                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 17989                                  ;		( = -1 if current dir not involved, else
 17990                                  ;		 Points to first char after last "/" of current dir part)
 17991                                  ;	[THISCDS] Points to CDS being used
 17992                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 17993                                  ; Function:
 17994                                  ;	Remove a directory
 17995                                  ;	NOTE: Attempt to remove current directory must be detected by caller
 17996                                  ; Returns:
 17997                                  ;	NOTE:
 17998                                  ;	    [SATTRIB] is modified by this call
 17999                                  ;	Carry Clear
 18000                                  ;		No error
 18001                                  ;	Carry Set
 18002                                  ;	    AX is error code
 18003                                  ;		error_path_not_found
 18004                                  ;			Bad path (not in curr dir part if present)
 18005                                  ;		error_bad_curr_dir
 18006                                  ;			Bad path in current directory part of path
 18007                                  ;		error_access_denied
 18008                                  ;			device or file name, root directory
 18009                                  ;			Bad directory ('.' '..' messed up)
 18010                                  ; DS preserved, Others destroyed
 18011                                  ;----------------------------------------------------------------------------
 18012                                  
 18013                                  ;hkn; called from path.asm. DS already set up.
 18014                                  
 18015                                  DOS_RMDIR:
 18016 00003D23 E8A8E2                  	call	TestNet
 18017 00003D26 7306                    	JNC	short LOCAL_RMDIR
 18018                                  
 18019                                  ;IF NOT Installed
 18020                                  ;	transfer NET_RMDIR
 18021                                  ;ELSE
 18022                                  	;mov	ax,1101h
 18023 00003D28 B80111                  	MOV	AX,(MultNET<<8)|1
 18024 00003D2B CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - REMOVE REMOTE DIRECTORY
 18025                                  			; SS = DOS CS
 18026                                  			; SDA first filename pointer -> fully-qualified directory name
 18027                                  			; SDA CDS pointer -> current directory
 18028                                  			; Return: CF set on error, AX = DOS error code
 18029                                  			; CF clear if successful
 18030 00003D2D C3                      	retn
 18031                                  ;ENDIF
 18032                                  
 18033                                  LOCAL_RMDIR:
 18034 00003D2E E83BE3                  	call	EcritDisk
 18035 00003D31 C606[F802]00            	MOV	byte [NoSetDir],0
 18036                                  	;mov	byte [SATTRIB],16h
 18037 00003D36 C606[0805]16            	MOV	byte [SATTRIB],attr_directory+attr_system+attr_hidden
 18038                                  					; Dir calls can find these
 18039 00003D3B E8FB0A                  	call	GETPATH
 18040 00003D3E 720C                    	JC	short NOPATH		; Path not found
 18041 00003D40 7512                    	JNZ	short NOTDIRPATH	; Path not a DIR
 18042 00003D42 8B3E[5805]              	MOV	DI,[DIRSTART]
 18043 00003D46 09FF                    	OR	DI,DI			; Root ?
 18044 00003D48 750D                    	JNZ	short rmdir_get_buf	; No
 18045 00003D4A EB08                    	JMP	SHORT NOTDIRPATH
 18046                                  
 18047                                  NOPATH:
 18048                                  	;mov	ax,3
 18049 00003D4C B80300                  	MOV	AX,error_path_not_found
 18050 00003D4F E9C8FE                  	JMP	_BadRet
 18051                                  
 18052                                  NOTDIRPATHPOP:
 18053                                  	; MSDOS 6.0
 18054                                  	;POP	AX			  ;F.C. >32mb
 18055 00003D52 58                      	POP	AX
 18056                                  NOTDIRPATHPOP2:
 18057 00003D53 58                      	POP	AX
 18058                                  NOTDIRPATH:
 18059 00003D54 E9C0FE                  	JMP	NODEACCERRJ
 18060                                  
 18061                                  rmdir_get_buf:
 18062 00003D57 C53E[7405]              	LDS	DI,[CURBUF]
 18063 00003D5B 29FB                    	SUB	BX,DI		; Compute true offset
 18064 00003D5D 53                      	PUSH	BX		; Save entry pointer
 18065                                  	
 18066                                  	; MSDOS 6.0
 18067                                  	;PUSH	WORD [DI+BUFFINFO.buf_sector+2] ;F.C. >32mb
 18068                                  	
 18069                                  	; MSDOS 3.3 (& MSDOS 6.0)
 18070                                  	;push	word [di+6]
 18071 00003D5E FF7506                  	PUSH	WORD [DI+BUFFINFO.buf_sector] ; Save sector number
 18072                                  
 18073                                  ;hkn; SS is DOSDATA
 18074                                  	;context DS
 18075 00003D61 16                      	push	ss
 18076 00003D62 1F                      	pop	ds
 18077                                  	;context ES
 18078 00003D63 16                      	push	ss
 18079 00003D64 07                      	pop	es
 18080                                  
 18081                                  ;hkn; NAME1 is in DOSDATA
 18082 00003D65 BF[E604]                	MOV	DI,NAME1
 18083 00003D68 B03F                    	MOV	AL,'?'
 18084 00003D6A B90B00                  	MOV	CX,11
 18085 00003D6D F3AA                    	REP	STOSB
 18086 00003D6F 30C0                    	XOR	AL,AL
 18087 00003D71 AA                      	STOSB				; Nul terminate it
 18088 00003D72 E84E0D                  	call	STARTSRCH		; Set search
 18089 00003D75 E83B0A                  	call	GETENTRY		; Get start of directory
 18090 00003D78 72D8                    	JC	short NOTDIRPATHPOP	; Screw up
 18091 00003D7A 8E1E[7605]              	MOV	DS,[CURBUF+2]
 18092 00003D7E 89DE                    	MOV	SI,BX
 18093 00003D80 AD                      	LODSW
 18094                                  	;CMP	AX,(' ' SHL 8) OR '.'   ; First entry '.'?
 18095 00003D81 3D2E20                  	cmp	ax,202Eh ; ". "
 18096 00003D84 75CC                    	JNZ	short NOTDIRPATHPOP	; Nope
 18097                                  	;add     si,30
 18098 00003D86 83C61E                  	ADD	SI,dir_entry.size-2 ; Next entry
 18099 00003D89 AD                      	LODSW
 18100                                  	;CMP	AX,('.' SHL 8) OR '.'   ; Second entry '..'?
 18101                                  	;cmp	ax, '..'
 18102 00003D8A 3D2E2E                  	cmp	ax,2E2Eh
 18103 00003D8D 75C3                    	JNZ	short NOTDIRPATHPOP	; Nope
 18104                                  
 18105                                  ;hkn; SS is DOSDATA
 18106                                  	;context DS
 18107 00003D8F 16                      	push	ss
 18108 00003D90 1F                      	pop	ds
 18109 00003D91 C706[F402]0200          	MOV	word [LASTENT],2	; Skip . and ..
 18110 00003D97 E8190A                  	call	GETENTRY		; Get next entry
 18111 00003D9A 72B6                    	JC	short NOTDIRPATHPOP	; Screw up
 18112                                  	;mov	byte [ATTRIB],16h
 18113 00003D9C C606[0605]16            	MOV	byte [ATTRIB],attr_directory+attr_hidden+attr_system
 18114 00003DA1 E81C09                  	call	SRCH			; Do a search
 18115 00003DA4 73AC                    	JNC	short NOTDIRPATHPOP	; Found another entry!
 18116 00003DA6 803E[F602]00            	CMP	byte [FAILERR],0
 18117 00003DAB 75A5                    	JNZ	short NOTDIRPATHPOP	; Failure of search due to I 24 FAIL
 18118 00003DAD C42E[2405]              	LES	BP,[THISDPB]
 18119 00003DB1 8B1E[5805]              	MOV	BX,[DIRSTART]
 18120 00003DB5 E83517                  	call	RELEASE 		; Release data in sub dir
 18121 00003DB8 7298                    	JC	short NOTDIRPATHPOP	; Screw up
 18122 00003DBA 5A                      	POP	DX			; Sector # of entry
 18123                                  	;POP	word [HIGH_SECTOR]	; F.C. >32mb
 18124                                  	;mov	byte [ALLOWED],18h
 18125 00003DBB C606[F702]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 18126 00003DC0 30C0                    	XOR	AL,AL			; Pre read
 18127 00003DC2 E8C420                  	call	GETBUFFR		; Get sector back
 18128 00003DC5 728C                    	JC	short NOTDIRPATHPOP2	; Screw up
 18129 00003DC7 C53E[7405]              	LDS	DI,[CURBUF]
 18130                                  	;or	byte [di+5],4
 18131 00003DCB 804D0504                	OR	byte [DI+BUFFINFO.buf_flags],buf_isDIR
 18132 00003DCF 5B                      	POP	BX			; Pointer to start of entry
 18133 00003DD0 01FB                    	ADD	BX,DI			; Corrected
 18134 00003DD2 C607E5                  	MOV	BYTE [BX],0E5H		; Free the entry
 18135                                  
 18136                                  ;DOS 3.3 FastOpen  6/16/86  F.C.
 18137 00003DD5 1E                      	PUSH	DS
 18138                                  
 18139                                  ;hkn; SS is DOSDATA
 18140                                  	;context DS
 18141 00003DD6 16                      	push	ss
 18142 00003DD7 1F                      	pop	ds
 18143                                  
 18144                                  	; MSDOS 6.0
 18145                                  	;call	FastOpen_Delete 	; call fastopen to delete an entry
 18146                                  
 18147                                  	; MSDOS 3.3
 18148                                  _FastOpen_Delete:
 18149 00003DD8 50                      	push	ax
 18150 00003DD9 8B36[4A05]              	mov	si,[WFP_START]
 18151 00003DDD BB[430F]                	mov	bx,FastTable
 18152                                  	;mov	al,3  ; FONC_delete
 18153 00003DE0 B003                    	mov	al,FONC_delete
 18154 00003DE2 FF5F02                  	call	far [BX+2]  ; FastTable+2
 18155 00003DE5 58                      	pop	ax
 18156                                  
 18157 00003DE6 1F                      	POP	DS
 18158                                  ;DOS 3.3 FastOpen  6/16/86  F.C.
 18159                                  
 18160 00003DE7 E9C4FE                  	JMP	DIRUP			; In MKDIR, dirty buffer and flush
 18161                                  
 18162                                  ;============================================================================
 18163                                  ; DISK.ASM, MSDOS 6.0, 1991
 18164                                  ;============================================================================
 18165                                  ; 23/07/2018 - Retro DOS v3.0 
 18166                                  
 18167                                  ;	TITLE	DISK - Disk utility routines
 18168                                  ;	NAME	Disk
 18169                                  
 18170                                  ;**	Low level Read and write routines for local SFT I/O on files and devs
 18171                                  ;
 18172                                  ;	SWAPCON
 18173                                  ;	SWAPBACK
 18174                                  ;	DOS_READ
 18175                                  ;	DOS_WRITE
 18176                                  ;	get_io_sft
 18177                                  ;	DirRead
 18178                                  ;	FIRSTCLUSTER
 18179                                  ;	SET_BUF_AS_DIR
 18180                                  ;	FATSecRd
 18181                                  ;	DREAD
 18182                                  ;	CHECK_WRITE_LOCK
 18183                                  ;	CHECK_READ_LOCK
 18184                                  ;
 18185                                  ;	Revision history:
 18186                                  ;
 18187                                  ;		A000   version 4.00  Jan. 1988
 18188                                  ;
 18189                                  ;----------------------------------------------------------------------------
 18190                                  ;
 18191                                  ; M065 : B#5276. On raw read/write of a block of characters if a critical
 18192                                  ;		error happens, DOS retries the entire block assuming that
 18193                                  ;		zero characters were transferred. Modified the code to take
 18194                                  ;		into account the number of characters transfered before
 18195                                  ;		retrying the operation.
 18196                                  ;
 18197                                  ;----------------------------------------------------------------------------
 18198                                  ;
 18199                                  
 18200                                  ;Installed = TRUE
 18201                                  
 18202                                  ;Break	<SwapCon, Swap Back - Old-style I/O to files>
 18203                                  
 18204                                  ; **** Drivers for file input from devices ****
 18205                                  ;----------------------------------------------------------------------------
 18206                                  ;   Indicate that there is no more I/O occurring through another SFT outside
 18207                                  ;   of handles 0 and 1
 18208                                  ;
 18209                                  ;   Inputs:	DS is DOSDATA
 18210                                  ;   Outputs:	CONSWAP is set to false.
 18211                                  ;   Registers modified: none
 18212                                  ;----------------------------------------------------------------------------
 18213                                  
 18214                                  ; IBMDOS.COM (MSDOS 3.3) - Offset 3CF8h
 18215                                  
 18216                                  SWAPBACK:
 18217 00003DEA C606[0303]00            	MOV	BYTE [CONSWAP],0	; signal no conswaps
 18218 00003DEF C3                      	retn
 18219                                  
 18220                                  ;----------------------------------------------------------------------------
 18221                                  ;
 18222                                  ; Procedure Name : SWAPCON
 18223                                  ;
 18224                                  ;   Copy ThisSFT to CONSFT for use by the 1-12 primitives.
 18225                                  ;
 18226                                  ;   Inputs:	ThisSFT as the sft of the desired file
 18227                                  ;		DS is DOSDATA
 18228                                  ;   Outputs:	CONSWAP is set.  CONSFT = ThisSFT.
 18229                                  ;   Registers modified: none
 18230                                  ;--------------------------------------------------------------------------
 18231                                  
 18232                                  SWAPCON:
 18233                                  	; MSDOS 3.3
 18234                                  	;push	es
 18235                                  	;push	di
 18236                                  	;mov	byte [CONSWAP],1
 18237                                  	;les	di,[THISSFT]
 18238                                  	;mov	word [CONSFT],di
 18239                                  	;mov	word [CONSFT+2],es
 18240                                  	;pop	di
 18241                                  	;pop	es
 18242                                  	;retn
 18243                                  
 18244                                  	; MSDOS 6.0
 18245 00003DF0 C606[0303]01            	mov	byte [CONSWAP],1	; ConSwap = TRUE
 18246 00003DF5 50                      	push	ax
 18247 00003DF6 A1[3605]                	mov	ax,[THISSFT]
 18248 00003DF9 A3[7805]                	mov	[CONSFT],ax
 18249 00003DFC A1[3805]                	mov	ax,[THISSFT+2]
 18250 00003DFF A3[7A05]                	mov	[CONSFT+2],ax
 18251 00003E02 58                      	pop	ax
 18252 00003E03 C3                      	retn
 18253                                  
 18254                                  
 18255                                  ;Break	<DOS_READ -- MAIN READ ROUTINE AND DEVICE IN ROUTINES>
 18256                                  ;-----------------------------------------------------------------------------
 18257                                  ;
 18258                                  ; Inputs:
 18259                                  ;	ThisSFT set to the SFT for the file being used
 18260                                  ;	[DMAADD] contains transfer address
 18261                                  ;	CX = No. of bytes to read
 18262                                  ;	DS = DOSDATA
 18263                                  ; Function:
 18264                                  ;	Perform read operation
 18265                                  ; Outputs:
 18266                                  ;    Carry clear
 18267                                  ;	SFT Position and cluster pointers updated
 18268                                  ;	CX = No. of bytes read
 18269                                  ;	ES:DI point to SFT
 18270                                  ;    Carry set
 18271                                  ;	AX is error code
 18272                                  ;	CX = 0
 18273                                  ;	ES:DI point to SFT
 18274                                  ; DS preserved, all other registers destroyed
 18275                                  ;
 18276                                  ;-----------------------------------------------------------------------------
 18277                                  
 18278                                  ;hkn; called from fcbio.asm, handle.asm and dev.asm. DS is be set up.
 18279                                  
 18280                                  DOS_READ:
 18281 00003E04 C43E[3605]              	LES	DI,[THISSFT]
 18282                                  
 18283                                  ; Verify that the sft has been opened in a mode that allows reading.
 18284                                  
 18285                                  	;mov	al,[es:di+2]
 18286 00003E08 268A4502                	MOV	AL,[ES:DI+SF_ENTRY.sf_mode]
 18287                                  	;and	al,0Fh
 18288 00003E0C 240F                    	AND	AL,access_mask
 18289                                  	;cmp	al,1
 18290 00003E0E 3C01                    	CMP	AL,open_for_write
 18291 00003E10 7503                    	JNE	short READ_NO_MODE		;Is read or both
 18292 00003E12 E94205                  	jmp	SET_ACC_ERR
 18293                                  
 18294                                  READ_NO_MODE:
 18295 00003E15 E81904                  	call	SETUP
 18296 00003E18 E30B                    	JCXZ	NoIORet 		; no bytes to read - fast return
 18297 00003E1A E8C6E1                  	call	IsSFTNet
 18298 00003E1D 7408                    	JZ	short LOCAL_READ
 18299                                  
 18300                                  ;IF NOT Installed
 18301                                  ;	transfer NET_READ
 18302                                  ;ELSE
 18303                                  	;mov	ax,1108h
 18304 00003E1F B80811                  	MOV	AX,(MultNET<<8)|8
 18305 00003E22 CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - READ FROM REMOTE FILE
 18306                                  			; ES:DI -> SFT
 18307                                  			; SFT DPB field -> DPB of drive containing file
 18308                                  			; CX = number of bytes, SS = DOS CS, SDA DTA field -> user buffer
 18309                                  			; Return: CF set on error, CX = bytes read
 18310 00003E24 C3                      	retn
 18311                                  ;ENDIF
 18312                                  
 18313                                  ; The user ended up requesting 0 bytes of input.  We do nothing for this case
 18314                                  ; except return immediately.
 18315                                  
 18316                                  NoIORet:
 18317 00003E25 F8                      	CLC
 18318 00003E26 C3                      	retn
 18319                                  
 18320                                  LOCAL_READ:
 18321                                  	;test	word [es:di+5],80h
 18322 00003E27 26F745058000            	TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device  ; Check for named device I/O
 18323 00003E2D 750F                    	JNZ	short READDEV
 18324                                  	;mov	byte [EXTERR_LOCUS],2
 18325 00003E2F C606[D102]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 18326 00003E34 E835E2                  	call	EcritDisk
 18327 00003E37 E8D804                  	call	DISKREAD
 18328                                  
 18329                                  critexit:
 18330 00003E3A E837E2                  	call	LcritDisk
 18331 00003E3D C3                      	retn
 18332                                  
 18333                                  ; We are reading from a device. Examine the status of the device to see if we
 18334                                  ; can short-circuit the I/O. If the device in the EOF state or if it is the
 18335                                  ; null device, we can safely indicate no transfer.
 18336                                  
 18337                                  READDEV:
 18338                                  	;mov	byte [EXTERR_LOCUS],4
 18339 00003E3E C606[D102]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev
 18340                                  	;mov	bl,[es:di+5]
 18341 00003E43 268A5D05                	MOV	BL,[ES:DI+SF_ENTRY.sf_flags]
 18342 00003E47 C43E[DA02]              	LES	DI,[DMAADD]
 18343                                  	;test	bl,40h
 18344 00003E4B F6C340                  	test	BL,devid_device_EOF	; End of file?
 18345 00003E4E 7407                    	JZ	short ENDRDDEVJ3
 18346                                  	;test	bl,4
 18347 00003E50 F6C304                  	test	BL,devid_device_null	; NUL device?
 18348 00003E53 7405                    	JZ	short TESTRAW 		; NO
 18349 00003E55 30C0                    	XOR	AL,AL			; Indicate EOF by setting zero
 18350                                  ENDRDDEVJ3:
 18351 00003E57 E9BC00                  	JMP	ENDRDDEVJ2
 18352                                  
 18353                                  ;
 18354                                  ; We need to hit the device.  Figure out if we do a raw read or we do the
 18355                                  ; bizarre std_con_string_input.
 18356                                  ;
 18357                                  TESTRAW:
 18358                                  	;test	bl,20h
 18359 00003E5A F6C320                  	test	BL,devid_device_raw	; Raw mode?
 18360 00003E5D 7508                    	JNZ	short DVRDRAW 		; Yes, let the device do all local editing
 18361                                  	;test	bl,1
 18362 00003E5F F6C301                  	test	BL,devid_device_con_in	; Is it console device?
 18363 00003E62 7447                    	JZ	short NOTRDCON
 18364 00003E64 E9E500                  	JMP	READCON
 18365                                  
 18366                                  DVRDRAW:
 18367 00003E67 06                      	PUSH	ES
 18368 00003E68 1F                      	POP	DS			; Xaddr to DS:DI
 18369                                  
 18370                                  	; MSDOS 6.0
 18371                                  ;SR;
 18372                                  ;Check for win386 presence -- if present, do polled read of characters
 18373                                  ;
 18374                                  	;test	byte [ss:IsWIN386],1
 18375                                  	;jz	short ReadRawRetry	;not present
 18376                                  	;test	bl,devid_device_con_in	;is it console device
 18377                                  	;jz	short ReadRawRetry	;no, do normal read
 18378                                  	;jmp	do_polling		;yes, do win386 polling loop
 18379                                  
 18380                                  ReadRawRetry:
 18381 00003E69 89FB                    	MOV	BX,DI			; DS:BX transfer addr
 18382 00003E6B 31C0                    	XOR	AX,AX			; Media Byte, unit = 0
 18383 00003E6D 89C2                    	MOV	DX,AX			; Start at 0
 18384 00003E6F E8B010                  	call	SETREAD
 18385 00003E72 1E                      	PUSH	DS			; Save Seg part of Xaddr
 18386                                  
 18387                                  ;hkn; SS override
 18388 00003E73 36C536[3605]            	LDS	SI,[SS:THISSFT]
 18389 00003E78 E88010                  	call	DEVIOCALL
 18390 00003E7B 89FA                    	MOV	DX,DI			; DS:DX is preserved by INT 24
 18391 00003E7D B486                    	MOV	AH,86H			; Read error
 18392                                  
 18393                                  ;hkn; SS override
 18394 00003E7F 368B3E[0903]            	MOV	DI,[SS:DEVCALL_REQSTAT]
 18395                                  	; MSDOS 3.3
 18396                                  	;test	di,8000h
 18397                                  	;jz	short CRDROK
 18398                                  	; MSDOS 6.0
 18399 00003E84 09FF                    	or	di,di
 18400 00003E86 7919                    	jns	short CRDROK		; no errors
 18401                                  	; MSDOS 3.3 (& MSDOS 6.0)
 18402 00003E88 E8A319                  	call	CHARHARD
 18403 00003E8B 89D7                    	MOV	DI,DX			; DS:DI is Xaddr
 18404                                  
 18405                                  	; MSDOS 6.0
 18406                                  	;add	di,[ss:callscnt]	; update ptr and count to reflect the	M065
 18407                                  	;sub	cx,[ss:callscnt]	; number of chars xferred		M065
 18408                                  
 18409                                  	; MSDOS 3.3 (& MSDOS 6.0)
 18410 00003E8D 08C0                    	OR	AL,AL
 18411 00003E8F 7410                    	JZ	short CRDROK		; Ignore
 18412 00003E91 3C03                    	CMP	AL,3
 18413 00003E93 7403                    	JZ	short CRDFERR 		; fail.
 18414 00003E95 1F                      	POP	DS			; Recover saved seg part of Xaddr
 18415                                  	; 19/05/2019
 18416 00003E96 EBD1                    	JMP	short ReadRawRetry	; Retry
 18417                                  
 18418                                  ;
 18419                                  ; We have encountered a device-driver error.  We have informed the user of it
 18420                                  ; and he has said for us to fail the system call.
 18421                                  ;
 18422                                  CRDFERR:
 18423 00003E98 5F                      	POP	DI			; Clean stack
 18424                                  DEVIOFERR:
 18425                                  
 18426                                  ;hkn; SS override
 18427 00003E99 36C43E[3605]            	LES	DI,[SS:THISSFT]
 18428 00003E9E E9B404                  	jmp	SET_ACC_ERR_DS
 18429                                  
 18430                                  CRDROK:
 18431 00003EA1 5F                      	POP	DI			; Chuck saved seg of Xaddr
 18432 00003EA2 89D7                    	MOV	DI,DX
 18433                                  
 18434                                  ;hkn; SS override
 18435 00003EA4 36033E[1803]            	ADD	DI,[ss:CALLSCNT]	; Amount transferred
 18436 00003EA9 EBAC                    	JMP	SHORT ENDRDDEVJ3
 18437                                  
 18438                                  ; We are going to do a cooked read on some character device. There is a
 18439                                  ; problem here, what does the data look like? Is it a terminal device, line
 18440                                  ; CR line CR line CR, or is it file data, line CR LF line CR LF? Does it have
 18441                                  ; a ^Z at the end which is data, or is the ^Z not data?  In any event we're
 18442                                  ; going to do this: Read in pieces up to CR (CRs included in data) or ^z (^z
 18443                                  ; included in data). this "simulates" the way con works in cooked mode
 18444                                  ; reading one line at a time. With file data, however, the lines will look
 18445                                  ; like, LF line CR. This is a little weird.
 18446                                  
 18447                                  NOTRDCON:
 18448 00003EAB 8CC0                    	MOV	AX,ES
 18449 00003EAD 8ED8                    	MOV	DS,AX
 18450 00003EAF 89FB                    	MOV	BX,DI
 18451 00003EB1 31D2                    	XOR	DX,DX
 18452 00003EB3 89D0                    	MOV	AX,DX
 18453 00003EB5 51                      	PUSH	CX
 18454 00003EB6 B90100                  	MOV	CX,1
 18455 00003EB9 E86610                  	call	SETREAD
 18456 00003EBC 59                      	POP	CX
 18457                                  
 18458                                  ;hkn; SS override
 18459 00003EBD 36C536[3605]            	LDS	SI,[SS:THISSFT]
 18460                                  	;lds	si,[si+7]
 18461 00003EC2 C57407                  	LDS	SI,[SI+SF_ENTRY.sf_devptr]
 18462                                  DVRDLP:
 18463 00003EC5 E89117                  	call	DSKSTATCHK
 18464 00003EC8 E83310                  	call	DEVIOCALL2
 18465 00003ECB 57                      	PUSH	DI		; Save "count" done
 18466 00003ECC B486                    	MOV	AH,86H
 18467                                  
 18468                                  ;hkn; SS override
 18469 00003ECE 368B3E[0903]            	MOV	DI,[SS:DEVCALL_REQSTAT]
 18470                                  	
 18471                                  	; MSDOS 3.3
 18472                                  	;test	di, 8000h
 18473                                  	;jz	short CRDOK
 18474                                  	; MSDOS 6.0
 18475 00003ED3 09FF                    	or	di,di
 18476 00003ED5 7917                    	jns	short CRDOK
 18477                                  	
 18478 00003ED7 E85419                  	call	CHARHARD
 18479 00003EDA 5F                      	POP	DI
 18480                                  
 18481                                  ;hkn; SS override
 18482 00003EDB 36C706[1803]0100        	MOV	word [SS:CALLSCNT],1
 18483 00003EE2 3C01                    	CMP	AL,1
 18484 00003EE4 74DF                    	JZ	short DVRDLP		;Retry
 18485 00003EE6 3C03                    	CMP	AL,3
 18486 00003EE8 74AF                    	JZ	short DEVIOFERR		; FAIL
 18487 00003EEA 30C0                    	XOR	AL,AL			; Ignore, Pick some random character
 18488 00003EEC EB12                    	JMP	SHORT DVRDIGN
 18489                                  
 18490                                  CRDOK:
 18491 00003EEE 5F                      	POP	DI
 18492                                  
 18493                                  ;hkn; SS override
 18494 00003EEF 36833E[1803]01          	CMP	word [SS:CALLSCNT],1
 18495 00003EF5 751F                    	JNZ	short ENDRDDEVJ2
 18496 00003EF7 1E                      	PUSH	DS
 18497                                  
 18498                                  ;hkn; SS override
 18499 00003EF8 368E1E[1603]            	MOV	DS,[SS:CALLXAD+2]
 18500 00003EFD 8A05                    	MOV	AL,[DI]			; Get the character we just read
 18501 00003EFF 1F                      	POP	DS
 18502                                  DVRDIGN:
 18503                                  
 18504                                  ;hkn; SS override
 18505 00003F00 36FF06[1403]            	INC	WORD [SS:CALLXAD]	; Next character
 18506 00003F05 36C706[0903]0000        	MOV	word [SS:DEVCALL_REQSTAT],0
 18507 00003F0C 47                      	INC	DI			; Next character
 18508 00003F0D 3C1A                    	CMP	AL,1AH			; ^Z?
 18509 00003F0F 7405                    	JZ	short ENDRDDEVJ2	; Yes, done zero set (EOF)
 18510 00003F11 3C0D                    	CMP	AL,c_CR 		; CR?
 18511 00003F13 E0B0                    	LOOPNZ	DVRDLP			; Loop if no, else done
 18512 00003F15 40                      	INC	AX			; Resets zero flag so NOT EOF, unless
 18513                                  					;  AX=FFFF which is not likely
 18514                                  ENDRDDEVJ2:
 18515 00003F16 EB1F                    	JMP	short ENDRDDEV		;changed short to long for win386
 18516                                  
 18517                                  	;  MSDOS 6.0
 18518                                  ;;SR;
 18519                                  ;;Polling code for raw read on CON when WIN386 is present
 18520                                  ;;
 18521                                  ;;At this point -- ds:di is transfer address
 18522                                  ;;		  cx is count
 18523                                  ;;
 18524                                  ;
 18525                                  ;do_polling:
 18526                                  ;	mov	bx,di			;ds:bx is Xfer address
 18527                                  ;	xor	ax,ax
 18528                                  ;	mov	dx,ax
 18529                                  ;	call	setread			;prepare device packet
 18530                                  ;
 18531                                  ;do_io:
 18532                                  ;;
 18533                                  ;;Change read to a NON-DESTRUCTIVE READ, NO WAIT
 18534                                  ;;
 18535                                  ;	mov	byte ptr es:[bx+2],DEVRDND	;Change command code
 18536                                  ;	push	ds
 18537                                  ;	lds	si,[THISSFT]		;get device header
 18538                                  ;	call	deviocall		;call device driver
 18539                                  ;	pop	ds
 18540                                  ;	
 18541                                  ;	test	es:[bx.REQSTAT],STERR	;check if error
 18542                                  ;	jz	check_busy		;no
 18543                                  ;
 18544                                  ;	push	ds
 18545                                  ;	mov	dx,di
 18546                                  ;	invoke 	charhard		;invoke int 24h handler
 18547                                  ;	mov	di,dx
 18548                                  ;	or	al,al
 18549                                  ;	jz	pop_done_read		;ignore by user, assume read done
 18550                                  ;	cmp	al,3
 18551                                  ;	jz	devrderr		;user asked to fail
 18552                                  ;	pop	ds
 18553                                  ;	jmp	do_io			;user asked to retry
 18554                                  ;
 18555                                  ;check_busy:
 18556                                  ;	test	es:[bx.REQSTAT],0200h	;see if busy bit set
 18557                                  ;	jnz	no_char			;yes, no character available
 18558                                  ;;
 18559                                  ;;Character is available. Read in 1 character at a time until all characters
 18560                                  ;;are read in or no character is available
 18561                                  ;;
 18562                                  ;	mov	byte ptr es:[bx+2],DEVRD	;command code is READ now
 18563                                  ;	mov	word ptr es:[bx+18],1		;change count to 1 character
 18564                                  ;	push	ds
 18565                                  ;	lds	si,[THISSFT]
 18566                                  ;	call	deviocall
 18567                                  ;
 18568                                  ;	mov	dx,di
 18569                                  ;	mov	ah,86h
 18570                                  ;	mov	di,es:[bx.REQSTAT]	;get returned status
 18571                                  ;	test	di,STERR		;was there an error during read?
 18572                                  ;	jz	next_char		;no,read next character
 18573                                  ;
 18574                                  ;	invoke	charhard		;invoke int 24h handler
 18575                                  ;	mov	di,dx			;restore di
 18576                                  ;	or	al,al			;
 18577                                  ;	jz	pop_done_read		;ignore by user,assume read is done
 18578                                  ;	cmp	al,3
 18579                                  ;	jz	devrderr		;user issued a 'fail',indicate error
 18580                                  ;	pop	ds
 18581                                  ;	jmp	do_io			;user issued a retry
 18582                                  ;
 18583                                  ;next_char:
 18584                                  ;	pop	ds
 18585                                  ;	mov	di,dx
 18586                                  ;	dec	cx			;decrement count
 18587                                  ;	jcxz	done_read		;all characters read in
 18588                                  ;	inc	word ptr es:[bx+14]	;update transfer address
 18589                                  ;	jmp	do_io			;read next character in
 18590                                  ;
 18591                                  ;devrderr:
 18592                                  ;	pop	di			;discard segment address
 18593                                  ;	les	di,[THISSFT]
 18594                                  ;	transfer SET_ACC_ERR_DS		;indicate error
 18595                                  ;
 18596                                  ;no_char:
 18597                                  ;;
 18598                                  ;;Since no character is available, we let win386 switch the VM out
 18599                                  ;;
 18600                                  ;	push	ax
 18601                                  ;	mov	ah,84h
 18602                                  ;	int	2ah			;indicate idle to WIN386
 18603                                  ;;
 18604                                  ;;When control returns from WIN386, we continue the raw read
 18605                                  ;;
 18606                                  ;	pop	ax
 18607                                  ;	jmp	do_io
 18608                                  ;
 18609                                  ;pop_done_read:
 18610                                  ;	pop	ds
 18611                                  ;done_read:
 18612                                  ;	add	di,[CALLSCNT]
 18613                                  ;	jmp	ENDRDDEVJ3	;jump back to normal DOS raw read exit
 18614                                  
 18615                                  TRANBUF:
 18616 00003F18 AC                      	LODSB
 18617 00003F19 AA                      	STOSB
 18618 00003F1A 3C0D                    	CMP	AL,c_CR 	; Check for carriage return
 18619 00003F1C 7503                    	JNZ	short NORMCH
 18620 00003F1E C6040A                  	MOV	BYTE [SI],c_LF
 18621                                  NORMCH:
 18622 00003F21 3C0A                    	CMP	AL,c_LF
 18623 00003F23 E0F3                    	LOOPNZ	TRANBUF
 18624 00003F25 7507                    	JNZ	short ENDRDCON
 18625 00003F27 31F6                    	XOR	SI,SI		; Cause a new buffer to be read
 18626 00003F29 E858E4                  	call	OUTT		; Transmit linefeed
 18627 00003F2C 0C01                    	OR	AL,1		; Clear zero flag--not end of file
 18628                                  ENDRDCON:
 18629                                  
 18630                                  ;hkn; SS is DOSDATA
 18631 00003F2E 16                      	push	ss
 18632 00003F2F 1F                      	pop	ds
 18633 00003F30 E8B7FE                  	CALL	SWAPBACK
 18634 00003F33 8936[2200]              	MOV	[CONTPOS],SI
 18635                                  ENDRDDEV:
 18636                                  
 18637                                  ;hkn; SS is DOSDATA
 18638 00003F37 16                      	push	ss
 18639 00003F38 1F                      	pop	ds
 18640                                  
 18641 00003F39 893E[5005]              	MOV	[NEXTADD],DI
 18642 00003F3D 7509                    	JNZ	short SETSFTC 	; Zero set if Ctrl-Z found in input
 18643 00003F3F C43E[3605]              	LES	DI,[THISSFT]
 18644                                  	;and	byte [es:di+5],0BFh
 18645 00003F43 26806505BF              	AND	BYTE [ES:DI+SF_ENTRY.sf_flags],~devid_device_EOF 
 18646                                  					; Mark as no more data available
 18647                                  SETSFTC:
 18648 00003F48 E8EA04                  	call	SETSFT
 18649 00003F4B C3                      	retn
 18650                                  
 18651                                  READCON:
 18652 00003F4C E8A1FE                  	CALL	SWAPCON
 18653 00003F4F 8B36[2200]              	MOV	SI,[CONTPOS]
 18654 00003F53 09F6                    	OR	SI,SI
 18655 00003F55 75C1                    	JNZ	short TRANBUF
 18656 00003F57 803E[2902]80            	CMP	BYTE [CONBUF],128
 18657 00003F5C 7406                    	JZ	short GETBUF
 18658 00003F5E C706[2902]80FF          	MOV	WORD [CONBUF],0FF80H ; Set up 128-byte buffer with no template
 18659                                  GETBUF:
 18660 00003F64 51                      	PUSH	CX
 18661 00003F65 06                      	PUSH	ES
 18662 00003F66 57                      	PUSH	DI
 18663                                  
 18664                                  ;hkn; CONBUF is in DOSDATA
 18665 00003F67 BA[2902]                	MOV	DX,CONBUF
 18666                                  
 18667 00003F6A E897E1                  	call	_$STD_CON_STRING_INPUT	; Get input buffer
 18668 00003F6D 5F                      	POP	DI
 18669 00003F6E 07                      	POP	ES
 18670 00003F6F 59                      	POP	CX
 18671                                  
 18672                                  ;hkn; CONBUF is in DOSDATA
 18673 00003F70 BE[2B02]                	MOV	SI,CONBUF+2
 18674                                  
 18675 00003F73 803C1A                  	CMP	BYTE [SI],1AH	; Check for Ctrl-Z in first character
 18676 00003F76 75A0                    	JNZ	short TRANBUF
 18677 00003F78 B01A                    	MOV	AL,1AH
 18678 00003F7A AA                      	STOSB
 18679 00003F7B 4F                      	DEC	DI
 18680 00003F7C B00A                    	MOV	AL,c_LF
 18681 00003F7E E803E4                  	call	OUTT		; Send linefeed
 18682 00003F81 31F6                    	XOR	SI,SI
 18683 00003F83 EBA9                    	JMP	ENDRDCON
 18684                                  
 18685                                  ; 24/07/2018 - Retro DOS v3.0
 18686                                  
 18687                                  ;Break	<DOS_WRITE -- MAIN WRITE ROUTINE AND DEVICE OUT ROUTINES>
 18688                                  ;---------------------------------------------------------------------------
 18689                                  ;
 18690                                  ; Procedure Name : DOS_WRITE
 18691                                  ;
 18692                                  ; Inputs:
 18693                                  ;	ThisSFT set to the SFT for the file being used
 18694                                  ;	[DMAADD] contains transfer address
 18695                                  ;	CX = No. of bytes to write
 18696                                  ; Function:
 18697                                  ;	Perform write operation
 18698                                  ;	NOTE: If CX = 0 on input, file is truncated or grown
 18699                                  ;		to current sf_position
 18700                                  ; Outputs:
 18701                                  ;    Carry clear
 18702                                  ;	SFT Position and cluster pointers updated
 18703                                  ;	CX = No. of bytes written
 18704                                  ;	ES:DI point to SFT
 18705                                  ;    Carry set
 18706                                  ;	AX is error code
 18707                                  ;	CX = 0
 18708                                  ;	ES:DI point to SFT
 18709                                  ; DS preserved, all other registers destroyed
 18710                                  ;---------------------------------------------------------------------------
 18711                                  
 18712                                  ;hkn; called from fcbio2.asm, handle.asm and dev.asm. DS is set up at this 
 18713                                  ;hkn; point to DOSDATA.
 18714                                  
 18715                                  DOS_WRITE:
 18716 00003F85 C43E[3605]              	LES	DI,[THISSFT]
 18717                                  	;mov	al,[ES:DI+2]
 18718 00003F89 268A4502                	MOV	AL,[ES:DI+SF_ENTRY.sf_mode]
 18719                                  	;and	al,0Fh
 18720 00003F8D 240F                    	AND	AL,access_mask
 18721                                  	;cmp	al,0
 18722 00003F8F 3C00                    	CMP	AL,open_for_read
 18723 00003F91 7503                    	JNE	short Check_FCB_RO		 ;Is write or both
 18724                                  BadMode:
 18725 00003F93 E9C103                  	jmp	SET_ACC_ERR
 18726                                  
 18727                                  ;
 18728                                  ; NOTE: The following check for writting to a Read Only File is performed
 18729                                  ;	    ONLY on FCBs!!!!
 18730                                  ;	We ALLOW writes to Read Only files via handles to allow a CREATE
 18731                                  ;	    of a read only file which can then be written to.
 18732                                  ;	This is OK because we are NOT ALLOWED to OPEN a RO file via handles
 18733                                  ;	    for writting, or RE-CREATE an EXISTING RO file via handles. Thus,
 18734                                  ;	    CREATing a NEW RO file, or RE-CREATing an existing file which
 18735                                  ;	    is NOT RO to be RO, via handles are the only times we can write
 18736                                  ;	    to a read-only file.
 18737                                  ;
 18738                                  Check_FCB_RO:
 18739                                  	;test	word [es:di+2],8000h
 18740 00003F96 26F745020080            	TEST	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB
 18741 00003F9C 7407                    	JZ	short WRITE_NO_MODE	; Not an FCB
 18742                                  	;test	byte [es:di+4],1
 18743 00003F9E 26F6450401              	TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_read_only
 18744 00003FA3 75EE                    	JNZ	short BadMode 		; Can't write to Read_Only files via FCB
 18745                                  WRITE_NO_MODE:
 18746 00003FA5 E88902                  	call	SETUP
 18747 00003FA8 E838E0                  	call	IsSFTNet
 18748 00003FAB 7406                    	JZ	short LOCAL_WRITE
 18749                                  
 18750                                  ;IF NOT Installed
 18751                                  ;	transfer NET_WRITE
 18752                                  ;ELSE
 18753                                  	;mov	ax,1109h
 18754 00003FAD B80911                  	MOV	AX,(MultNET<<8)|9
 18755 00003FB0 CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - WRITE TO REMOTE FILE
 18756                                  			; ES:DI -> SFT
 18757                                  			; SFT DPB field -> DPB of drive containing file
 18758                                  			; CX = number of bytes, SS = DOS CS, SDA DTA field -> user buffer
 18759                                  			; Return: CF set on error, CX = bytes written
 18760 00003FB2 C3                      	retn
 18761                                  ;ENDIF
 18762                                  
 18763                                  LOCAL_WRITE:
 18764                                  	;test	word [es:di+5],80h
 18765 00003FB3 26F745058000            	TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device ; Check for named device I/O
 18766 00003FB9 7552                    	jnz	short WRTDEV
 18767                                  	;mov	byte [EXTERR_LOCUS],2
 18768 00003FBB C606[D102]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 18769 00003FC0 E8A9E0                  	call	EcritDisk
 18770                                  
 18771 00003FC3 E89E04                  	call	DISKWRITE
 18772                                  
 18773                                  	; MSDOS 6.0
 18774                                  ;; Extended Open
 18775                                  	;JC	short nocommit
 18776                                  	;LES	DI,[THISSFT]
 18777                                  	;TEST	word [ES:DI+SF_ENTRY.sf_mode],auto_commit_write
 18778                                  	;JZ	short nocommit
 18779                                  	;PUSH	CX
 18780                                  	;call	DOS_COMMIT
 18781                                  	;POP	CX
 18782                                  ;nocommit:
 18783                                  ;; Extended Open
 18784 00003FC6 E8ABE0                  	call	LcritDisk
 18785 00003FC9 C3                      	retn
 18786                                  
 18787                                  DVWRTRAW:
 18788 00003FCA 31C0                    	XOR	AX,AX			; Media Byte, unit = 0
 18789 00003FCC E8860F                  	call	SETWRITE
 18790 00003FCF 1E                      	PUSH	DS			; Save seg of transfer
 18791                                  
 18792                                  ;hkn; SS override
 18793 00003FD0 36C536[3605]            	LDS	SI,[SS:THISSFT]
 18794 00003FD5 E8230F                  	call	DEVIOCALL		; DS:SI -> DEVICE
 18795                                  
 18796 00003FD8 89FA                    	MOV	DX,DI			; Offset part of Xaddr saved in DX
 18797 00003FDA B487                    	MOV	AH,87H
 18798                                  
 18799                                  ;hkn; SS override
 18800 00003FDC 368B3E[0903]            	MOV	DI,[SS:DEVCALL_REQSTAT]
 18801                                  
 18802                                  	; MSDOS 3.3
 18803                                  	;test	di,8000h
 18804                                  	;jz	short CWRTROK
 18805                                  
 18806                                  	; MSDOS 6.0
 18807 00003FE1 09FF                    	or	di,di
 18808 00003FE3 7914                    	jns	short CWRTROK
 18809                                  	
 18810                                  	; MSDOS 3.3 (& MSDOS 6.0)
 18811 00003FE5 E84618                  	call	CHARHARD
 18812                                  
 18813                                  	; MSDOS 6.0
 18814                                  	;sub	cx,[ss:callscnt]	; update ptr & count to reflect	M065
 18815                                  	;mov	bx,dx			; number of chars xferred	M065
 18816                                  	;add	bx,[ss:callscnt]		;				M065
 18817                                  	;mov	di,bx			;				M065
 18818                                  	
 18819                                  	; MSDOS 3.3
 18820 00003FE8 89D3                    	MOV	BX,DX			; Recall transfer addr		M065
 18821                                  
 18822                                  	; MSDOS 3.3 (& MSDOS 6.0)
 18823 00003FEA 08C0                    	OR	AL,AL
 18824 00003FEC 740B                    	JZ	short CWRTROK 		; Ignore
 18825 00003FEE 3C03                    	CMP	AL,3
 18826 00003FF0 7403                    	JZ	short CWRFERR
 18827 00003FF2 1F                      	POP	DS			; Recover saved seg of transfer
 18828 00003FF3 EBD5                    	JMP	short DVWRTRAW		; Try again
 18829                                  
 18830                                  CWRFERR:
 18831 00003FF5 58                      	POP	AX			; Chuck saved seg of transfer
 18832 00003FF6 E99FFE                  	JMP	CRDFERR 		; Will pop one more stack element
 18833                                  
 18834                                  CWRTROK:
 18835 00003FF9 58                      	POP	AX			; Chuck saved seg of transfer
 18836 00003FFA 1F                      	POP	DS
 18837 00003FFB A1[1803]                	MOV	AX,[CALLSCNT]		; Get actual number of bytes transferred
 18838                                  ENDWRDEV:
 18839 00003FFE C43E[3605]              	LES	DI,[THISSFT]
 18840 00004002 89C1                    	MOV	CX,AX
 18841 00004004 E85004                  	call	ADDREC
 18842 00004007 C3                      	retn
 18843                                  
 18844                                  WRTNUL:
 18845 00004008 89CA                    	MOV	DX,CX			;Entire transfer done
 18846                                  WRTCOOKJ:
 18847 0000400A E98D00                  	JMP	WRTCOOKDONE
 18848                                  
 18849                                  WRTDEV:
 18850                                  	;mov	byte [EXTERR_LOCUS],4
 18851 0000400D C606[D102]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev
 18852                                  	;or	byte [es:di+5],40h
 18853 00004012 26804D0540              	OR	BYTE [ES:DI+SF_ENTRY.sf_flags],devid_device_EOF
 18854                                  					; Reset EOF for input
 18855                                  	;mov	bl,[es:di+5]
 18856 00004017 268A5D05                	MOV	BL,[ES:DI+SF_ENTRY.sf_flags]
 18857 0000401B 31C0                    	XOR	AX,AX
 18858 0000401D E3DF                    	JCXZ	ENDWRDEV		; problem of creating on a device.
 18859 0000401F 1E                      	PUSH	DS
 18860 00004020 88D8                    	MOV	AL,BL
 18861 00004022 C51E[DA02]              	LDS	BX,[DMAADD]		; Xaddr to DS:BX
 18862 00004026 89DF                    	MOV	DI,BX			; Xaddr to DS:DI
 18863 00004028 31D2                    	XOR	DX,DX			; Set starting point
 18864                                  	;test	al,20h
 18865 0000402A A820                    	test	AL,devid_device_raw	; Raw?
 18866                                  	;JZ	short TEST_DEV_CON
 18867                                  	;JMP	DVWRTRAW
 18868 0000402C 759C                    	jnz	short DVWRTRAW
 18869                                  
 18870                                  TEST_DEV_CON:
 18871                                  	;test	al,2
 18872 0000402E A802                    	test	AL,devid_device_con_out ; Console output device?
 18873 00004030 756E                    	jnz	short WRITECON
 18874                                  	;test	al,4
 18875 00004032 A804                    	test	AL,devid_device_null
 18876 00004034 75D2                    	JNZ	short WRTNUL
 18877 00004036 89D0                    	MOV	AX,DX
 18878 00004038 803F1A                  	CMP	BYTE [BX],1Ah		; ^Z?
 18879 0000403B 74CD                    	JZ	short WRTCOOKJ		; Yes, transfer nothing
 18880 0000403D 51                      	PUSH	CX
 18881 0000403E B90100                  	MOV	CX,1
 18882 00004041 E8110F                  	call	SETWRITE
 18883 00004044 59                      	POP	CX
 18884                                  
 18885                                  ;hkn; SS override
 18886 00004045 36C536[3605]            	LDS	SI,[SS:THISSFT]
 18887                                  ;
 18888                                  ;SR; Removed X25 support from here
 18889                                  ;
 18890                                  	;lds	si,[si+7]
 18891 0000404A C57407                  	LDS	SI,[SI+SF_ENTRY.sf_devptr]
 18892                                  DVWRTLP:
 18893 0000404D E80916                  	call	DSKSTATCHK
 18894 00004050 E8AB0E                  	call	DEVIOCALL2
 18895 00004053 57                      	PUSH	DI
 18896 00004054 B487                    	MOV	AH,87H
 18897                                  
 18898                                  ;hkn; SS override
 18899 00004056 368B3E[0903]            	MOV	DI,[SS:DEVCALL_REQSTAT]
 18900                                  	
 18901                                  	; MSDOS 3.3
 18902                                  	;test	di,8000h
 18903                                  	;jz	short CWROK
 18904                                  
 18905                                  	; MSDOS 6.0
 18906 0000405B 09FF                    	or	di,di
 18907 0000405D 7916                    	jns	short CWROK
 18908                                  	
 18909                                  	; MSDOS 3.3 (& MSDOS 6.0)
 18910 0000405F E8CC17                  	call	CHARHARD
 18911 00004062 5F                      	POP	DI
 18912                                  
 18913                                  ;hkn; SS override
 18914 00004063 36C706[1803]0100        	MOV	word [SS:CALLSCNT],1
 18915 0000406A 3C01                    	CMP	AL,1
 18916 0000406C 74DF                    	JZ	short DVWRTLP 	; Retry
 18917 0000406E 08C0                    	OR	AL,AL
 18918 00004070 740C                    	JZ	short DVWRTIGN	; Ignore
 18919                                  	; 10/08/2018
 18920 00004072 E923FE                  	JMP	CRDFERR 	; Fail, pops one stack element
 18921                                  
 18922                                  CWROK:
 18923 00004075 5F                      	POP	DI
 18924                                  
 18925                                  ;hkn; SS override
 18926 00004076 36833E[1803]00          	CMP	word [SS:CALLSCNT],0
 18927 0000407C 741C                    	JZ	short WRTCOOKDONE
 18928                                  DVWRTIGN:
 18929 0000407E 42                      	INC	DX
 18930                                  
 18931                                  ;hkn; SS override for CALLXAD
 18932 0000407F 36FF06[1403]            	INC	WORD [SS:CALLXAD]
 18933 00004084 47                      	INC	DI
 18934 00004085 1E                      	PUSH	DS
 18935 00004086 368E1E[1603]            	MOV	DS,[SS:CALLXAD+2]
 18936 0000408B 803D1A                  	CMP	BYTE [DI],1Ah	; ^Z?
 18937 0000408E 1F                      	POP	DS
 18938 0000408F 7409                    	JZ	short WRTCOOKDONE
 18939                                  
 18940                                  ;hkn; SS override
 18941 00004091 36C706[0903]0000        	MOV	word [SS:DEVCALL_REQSTAT],0
 18942 00004098 E2B3                    	LOOP	DVWRTLP
 18943                                  WRTCOOKDONE:
 18944 0000409A 89D0                    	MOV	AX,DX
 18945 0000409C 1F                      	POP	DS
 18946 0000409D E95EFF                  	JMP	ENDWRDEV ; 10/08/2018
 18947                                  
 18948                                  WRITECON:
 18949 000040A0 1E                      	PUSH	DS
 18950                                  
 18951                                  ;hkn; SS is DOSDATA
 18952 000040A1 16                      	push	ss
 18953 000040A2 1F                      	pop	ds
 18954 000040A3 E84AFD                  	CALL	SWAPCON
 18955 000040A6 1F                      	POP	DS
 18956 000040A7 89DE                    	MOV	SI,BX
 18957 000040A9 51                      	PUSH	CX
 18958                                  WRCONLP:
 18959 000040AA AC                      	LODSB
 18960 000040AB 3C1A                    	CMP	AL,1Ah		; ^Z?
 18961 000040AD 7405                    	JZ	short CONEOF
 18962 000040AF E8D2E2                  	call	OUTT
 18963 000040B2 E2F6                    	LOOP	WRCONLP
 18964                                  CONEOF:
 18965 000040B4 58                      	POP	AX			; Count
 18966 000040B5 29C8                    	SUB	AX,CX			; Amount actually written
 18967 000040B7 1F                      	POP	DS
 18968 000040B8 E82FFD                  	CALL	SWAPBACK
 18969 000040BB E940FF                  	JMP	ENDWRDEV
 18970                                  
 18971                                  ;---------------------------------------------------------------------------
 18972                                  ;
 18973                                  ; Procedure Name : get_io_sft
 18974                                  ;
 18975                                  ;   Convert JFN number in BX to sf_entry in DS:SI We get the normal SFT if
 18976                                  ;   CONSWAP is FALSE or if the handle desired is 2 or more.  Otherwise, we
 18977                                  ;   retrieve the sft from ConSFT which is set by SwapCon.
 18978                                  ;
 18979                                  ;---------------------------------------------------------------------------
 18980                                  
 18981                                  GET_IO_SFT:
 18982                                  	;test	byte [SS:CONSWAP],0FFh
 18983 000040BE 36803E[0303]00          	cmp	byte [SS:CONSWAP],0			;smr;SS Override
 18984 000040C4 7512                    	JNZ	short GetRedir
 18985                                  GetNormal:
 18986 000040C6 16                      	push	ss
 18987 000040C7 1F                      	pop	ds
 18988 000040C8 06                      	PUSH	ES
 18989 000040C9 57                      	PUSH	DI
 18990 000040CA E83327                  	call	SFFromHandle
 18991 000040CD 7206                    	JC	short RET44P
 18992 000040CF 8CC6                    	MOV	SI,ES
 18993 000040D1 8EDE                    	MOV	DS,SI
 18994 000040D3 89FE                    	MOV	SI,DI
 18995                                  RET44P:
 18996 000040D5 5F                      	POP	DI
 18997 000040D6 07                      	POP	ES
 18998 000040D7 C3                      	retn
 18999                                  GetRedir:
 19000 000040D8 83FB01                  	CMP	BX,1
 19001 000040DB 77E9                    	JA	short GetNormal
 19002 000040DD 36C536[7805]            	LDS	SI,[SS:CONSFT]
 19003 000040E2 F8                      	CLC
 19004                                  get_io_sft_retn:
 19005 000040E3 C3                      	retn
 19006                                  
 19007                                  ;Break	<DIRREAD -- READ A DIRECTORY SECTOR>
 19008                                  ;---------------------------------------------------------------------------
 19009                                  ;
 19010                                  ; Procedure Name : DIRREAD
 19011                                  ;
 19012                                  ; Inputs:
 19013                                  ;	AX = Directory block number (relative to first block of directory)
 19014                                  ;	ES:BP = Base of drive parameters
 19015                                  ;	[DIRSEC] = First sector of first cluster of directory
 19016                                  ;	[CLUSNUM] = Next cluster
 19017                                  ;	[CLUSFAC] = Sectors/Cluster
 19018                                  ; Function:
 19019                                  ;	Read the directory block into [CURBUF].
 19020                                  ; Outputs:
 19021                                  ;	[NXTCLUSNUM] = Next cluster (after the one skipped to)
 19022                                  ;	[SECCLUSPOS] Set
 19023                                  ;	ES:BP unchanged
 19024                                  ;	[CURBUF] Points to Buffer with dir sector
 19025                                  ;	Carry set if error (user said FAIL to I 24)
 19026                                  ; DS preserved, all other registers destroyed.
 19027                                  ;---------------------------------------------------------------------------
 19028                                  
 19029                                  ;hkn; called from dir.asm. DS already set up to DOSDATA.
 19030                                  
 19031                                  DIRREAD:
 19032                                  
 19033                                  ; Note that ClusFac is the sectors per cluster. This is NOT necessarily
 19034                                  ; the same as what is in the DPB! In the case of the root directory, we have
 19035                                  ; ClusFac = # sectors in the root directory. The root directory is detected
 19036                                  ; by DIRStart = 0.
 19037                                  
 19038 000040E4 31D2                    	XOR	DX,DX
 19039 000040E6 833E[5805]00            	CMP	word [DIRSTART],0
 19040 000040EB 7503                    	jnz	short SubDir
 19041 000040ED 92                      	XCHG	AX,DX
 19042 000040EE EB0C                    	JMP	short DoRead
 19043                                  
 19044                                  ; Convert the sector number in AX into cluster and sector-within-cluster pair
 19045                                  
 19046                                  SubDir:
 19047 000040F0 88C2                    	MOV	DL,AL
 19048                                  	;and	dl,[es:bp+4]
 19049 000040F2 26225604                	AND	DL,[ES:BP+DPB.CLUSTER_MASK]
 19050                                  
 19051                                  ;	(DX) = sector-in-cluster
 19052                                  
 19053                                  	;mov	cl,[es:bp+5]
 19054 000040F6 268A4E05                	MOV	CL,[ES:BP+DPB.CLUSTER_SHIFT]
 19055 000040FA D3E8                    	SHR	AX,CL
 19056                                  
 19057                                  ;	(DX) = position in cluster
 19058                                  ;	(AX) = number of clusters to skip
 19059                                  
 19060                                  DoRead:
 19061 000040FC 8816[0E05]              	MOV	[SECCLUSPOS],DL
 19062 00004100 89C1                    	MOV	CX,AX
 19063 00004102 88D4                    	MOV	AH,DL
 19064                                  
 19065                                  ;	(CX) = number of clusters to skip.
 19066                                  ;	(AH) = remainder
 19067                                  
 19068                                  	; MSDOS 6.0
 19069                                  	;MOV	DX,[DIRSEC+2]	     	  ;>32mb
 19070                                  	;MOV	[HIGH_SECTOR],DX	  ;>32mb
 19071 00004104 8B16[5605]              	MOV	DX,[DIRSEC]
 19072 00004108 00E2                    	ADD	DL,AH
 19073 0000410A 80D600                  	ADC	DH,0
 19074                                  	;ADC	word [HIGH_SECTOR],0	  ;>32mb
 19075                                  
 19076 0000410D 8B1E[5405]              	MOV	BX,[CLUSNUM]
 19077 00004111 891E[6E05]              	MOV	[NXTCLUSNUM],BX
 19078 00004115 E319                    	JCXZ	FIRSTCLUSTER
 19079                                  SKPCLLP:
 19080 00004117 E83719                  	call	UNPACK
 19081 0000411A 72C7                    	jc	short get_io_sft_retn
 19082 0000411C 87DF                    	XCHG	BX,DI
 19083 0000411E E81919                  	call	IsEOF			; test for eof based on fat size
 19084 00004121 7302                    	JAE	short HAVESKIPPED
 19085 00004123 E2F2                    	LOOP	SKPCLLP
 19086                                  HAVESKIPPED:
 19087 00004125 891E[6E05]              	MOV	[NXTCLUSNUM],BX
 19088 00004129 89FA                    	MOV	DX,DI
 19089 0000412B 88E3                    	MOV	BL,AH
 19090 0000412D E80513                  	call	FIGREC
 19091                                  
 19092                                  	;entry	FIRSTCLUSTER
 19093                                  
 19094                                  FIRSTCLUSTER:
 19095                                  	;mov	byte [ALLOWED],18h
 19096 00004130 C606[F702]18            	MOV	byte [ALLOWED],Allowed_RETRY+Allowed_FAIL
 19097 00004135 30C0                    	XOR	AL,AL		; Indicate pre-read
 19098 00004137 E84F1D                  	call	GETBUFFR
 19099 0000413A 72A7                    	jc	short get_io_sft_retn
 19100                                  
 19101                                  	;entry	SET_BUF_AS_DIR
 19102                                  
 19103                                  SET_BUF_AS_DIR:
 19104                                  
 19105                                  ;	Set the type of CURBUF to be a directory sector.
 19106                                  ;	Only flags are modified.
 19107                                  
 19108 0000413C 1E                      	PUSH	DS
 19109 0000413D 56                      	PUSH	SI
 19110 0000413E C536[7405]              	LDS	SI,[CURBUF]
 19111                                  	;or	byte [si+5],4
 19112 00004142 804C0504                	OR	byte [SI+BUFFINFO.buf_flags],buf_isDIR	; Clears carry
 19113 00004146 5E                      	POP	SI
 19114 00004147 1F                      	POP	DS
 19115                                  dirread_retn:
 19116 00004148 C3                      	retn
 19117                                  
 19118                                  ;Break	<FATSECRD -- READ A FAT SECTOR>
 19119                                  ;----------------------------------------------------------------------------
 19120                                  ;
 19121                                  ; Procedure Name : FATSECRD
 19122                                  ; Inputs:
 19123                                  ;	Same as DREAD
 19124                                  ;	DS:BX = Transfer address
 19125                                  ;	CX = Number of sectors
 19126                                  ;	DX = Absolute record number
 19127                                  ;	ES:BP = Base of drive parameters
 19128                                  ; Function:
 19129                                  ;	Calls BIOS to perform FAT read.
 19130                                  ; Outputs:
 19131                                  ;	Same as DREAD
 19132                                  ;---------------------------------------------------------------------------
 19133                                  
 19134                                  FATSECRD:
 19135                                  ;hkn; SS override
 19136                                  	;mov	byte [ss:ALLOWED],18h
 19137 00004149 36C606[F702]18          	MOV	byte [SS:ALLOWED],Allowed_RETRY+Allowed_FAIL
 19138 0000414F 89CF                    	MOV	DI,CX
 19139                                  	;mov	cl,[es:bp+8]
 19140 00004151 268A4E08                	MOV	CL,[ES:BP+DPB.FAT_COUNT]
 19141                                  	; MSDOS 6.0
 19142                                  	;MOV	AX,[ES:BP+DPB.FAT_SIZE] 	;>32mb
 19143                                  	; MSDOS 3.3
 19144                                  	;mov	al,[es:bp+0Fh]
 19145 00004155 268A460F                	MOV	AL,[ES:BP+DPB.FAT_SIZE] 
 19146 00004159 30E4                    	XOR	AH,AH
 19147 0000415B 30ED                    	XOR	CH,CH				;>32mb
 19148 0000415D 52                      	PUSH	DX
 19149                                  NXTFAT:
 19150                                  	; MSDOS 6.0
 19151                                  ;hkn; SS override
 19152                                  	;MOV	word [SS:HIGH_SECTOR],0	;>32mb FAT sectors cannot exceed
 19153 0000415E 51                      	PUSH	CX			;32mb
 19154 0000415F 50                      	PUSH	AX
 19155 00004160 89F9                    	MOV	CX,DI
 19156 00004162 E85A00                  	call	DSKREAD
 19157 00004165 58                      	POP	AX
 19158 00004166 59                      	POP	CX
 19159 00004167 7420                    	JZ	short RET41P		; Carry clear
 19160 00004169 01C2                    	ADD	DX,AX
 19161 0000416B E2F1                    	LOOP	NXTFAT
 19162 0000416D 5A                      	POP	DX
 19163 0000416E 89F9                    	MOV	CX,DI
 19164                                  
 19165                                  ; NOTE FALL THROUGH
 19166                                  
 19167                                  ;Break	<DREAD -- DO A DISK READ>
 19168                                  ;---------------------------------------------------------------------------
 19169                                  ;
 19170                                  ; Procedure Name : DREAD
 19171                                  ;
 19172                                  ; Inputs:
 19173                                  ;	DS:BX = Transfer address
 19174                                  ;	CX = Number of sectors
 19175                                  ;	DX = Absolute record number	      (LOW)
 19176                                  ;	[HIGH_SECTOR]= Absolute record number (HIGH)
 19177                                  ;	ES:BP = Base of drive parameters
 19178                                  ;	[ALLOWED] must be set in case call to HARDERR needed
 19179                                  ; Function:
 19180                                  ;	Calls BIOS to perform disk read. If BIOS reports
 19181                                  ;	errors, will call HARDERRRW for further action.
 19182                                  ; Outputs:
 19183                                  ;	Carry set if error (currently user FAILED to INT 24)
 19184                                  ; DS,ES:BP preserved. All other registers destroyed.
 19185                                  ;---------------------------------------------------------------------------
 19186                                  
 19187                                  	;entry	DREAD
 19188                                  DREAD:
 19189 00004170 E84C00                  	call	DSKREAD
 19190 00004173 74D3                    	jz	short dirread_retn	; Carry clear
 19191                                  ;hkn; SS override
 19192 00004175 36C606[1005]00          	MOV	BYTE [SS:READOP],0
 19193 0000417B E89900                  	call	HARDERRRW
 19194 0000417E 3C01                    	CMP	AL,1		; Check for retry
 19195 00004180 74EE                    	JZ	short DREAD
 19196 00004182 3C03                    	CMP	AL,3		; Check for FAIL
 19197 00004184 F8                      	CLC
 19198 00004185 7501                    	JNZ	short NO_CAR		; Ignore
 19199 00004187 F9                      	STC
 19200                                  NO_CAR:
 19201 00004188 C3                      	retn
 19202                                  RET41P: 
 19203 00004189 5A                      	POP	DX
 19204 0000418A C3                      	retn
 19205                                  
 19206                                  ; 24/07/2018 - Retro DOS v3.0
 19207                                  
 19208                                  ;Break	<CHECK_WRITE_LOCK>
 19209                                  ;---------------------------------------------------------------------------
 19210                                  ;
 19211                                  ; Procedure Name : CHECK_WRITE_LOCK
 19212                                  ;
 19213                                  ; Inputs:
 19214                                  ;	output of SETUP
 19215                                  ;	ES:DI -> SFT
 19216                                  ; Function:
 19217                                  ;	check write lock
 19218                                  ; Outputs:
 19219                                  ;	Carry set if error
 19220                                  ;	Carry clear if ok
 19221                                  ;
 19222                                  ;----------------------------------------------------------------------------
 19223                                  
 19224                                  CHECK_WRITE_LOCK:
 19225                                  	; MSDOS 6.0
 19226                                  	;test	byte [es:di+4],8
 19227 0000418B 26F6450408              	TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_volume_id ;volume id
 19228                                  	;JZ	short write_cont			     ;no
 19229                                  	;call	SET_ACC_ERR_DS		;
 19230                                  	;retn
 19231                                  	;jnz	SET_ACC_ERR_DS
 19232                                  	; 19/08/2018
 19233 00004190 7403                    	jz	short write_cont
 19234 00004192 E9C001                  	jmp	SET_ACC_ERR_DS
 19235                                  write_cont:				;
 19236 00004195 51                      	PUSH	CX			;save reg
 19237 00004196 09C9                    	OR	CX,CX			;
 19238 00004198 7501                    	JNZ	short Not_Truncate	;
 19239 0000419A 49                      	dec	cx			;(cx) = -1; check for lock on whole file
 19240                                  Not_Truncate:				;
 19241 0000419B B080                    	MOV	AL,80H			;check write access
 19242 0000419D E84A31                  	call	LOCK_CHECK		;check lock
 19243 000041A0 59                      	POP	CX			;restore reg
 19244 000041A1 7305                    	JNC	short WRITE_OK		;lock ok
 19245 000041A3 E86501                  	call	WRITE_LOCK_VIOLATION	;issue I24
 19246 000041A6 73ED                    	JNC	short write_cont	;retry
 19247                                  WRITE_OK:				;
 19248 000041A8 C3                      	retn				;
 19249                                  
 19250                                  ;Break	<CHECK_READ_LOCK>
 19251                                  ;---------------------------------------------------------------------------
 19252                                  ;
 19253                                  ; Procedure Name : CHECK_READ_LOC
 19254                                  ;
 19255                                  ; Inputs:
 19256                                  ;	ES:DI -> SFT
 19257                                  ;	output of SETUP
 19258                                  ; Function:
 19259                                  ;	check read lock
 19260                                  ; Outputs:
 19261                                  ;	Carry set if error
 19262                                  ;	Carry clear if ok
 19263                                  ;----------------------------------------------------------------------------
 19264                                  
 19265                                  CHECK_READ_LOCK:
 19266                                  	; MSDOS 6.0
 19267                                  	;test	byte [es:di+4],8
 19268 000041A9 26F6450408              	TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_volume_id ;volume id
 19269                                  	;JZ	short do_retry			   	     ; no
 19270                                  	;call	SET_ACC_ERR		;
 19271                                  	;retn
 19272 000041AE 0F85A501                	jnz	SET_ACC_ERR		;
 19273                                  do_retry:				;
 19274 000041B2 30C0                    	xor	al,al			;check read access
 19275 000041B4 E83331                  	call	LOCK_CHECK		;check lock
 19276 000041B7 7305                    	JNC	short READLOCK_OK 	;lock ok
 19277 000041B9 E82801                  	call	READ_LOCK_VIOLATION	;issue I24
 19278 000041BC 73F4                    	JNC	short do_retry		;retry
 19279                                  READLOCK_OK:				;
 19280 000041BE C3                      	retn				;
 19281                                  
 19282                                  ;============================================================================
 19283                                  ; DISK2.ASM, MSDOS 6.0, 1991
 19284                                  ;============================================================================
 19285                                  ; 24/07/2018 - Retro DOS v3.0 
 19286                                  
 19287                                  ;	TITLE	DISK2 - Disk utility routines
 19288                                  ;	NAME	Disk2
 19289                                  
 19290                                  ;**	Low level Read and write routines for local SFT I/O on files and devs
 19291                                  ;
 19292                                  ;	DskRead
 19293                                  ;	DWRITE
 19294                                  ;	DSKWRITE
 19295                                  ;	HarderrRW
 19296                                  ;	SETUP
 19297                                  ;	BREAKDOWN
 19298                                  ;	READ_LOCK_VIOLATION
 19299                                  ;	WRITE_LOCK_VIOLATION
 19300                                  ;	DISKREAD
 19301                                  ;	SET_ACC_ERR_DS
 19302                                  ;	SET_ACC_ERR
 19303                                  ;	SETSFT
 19304                                  ;	SETCLUS
 19305                                  ;	AddRec
 19306                                  ;
 19307                                  ;	Revision history:
 19308                                  ;
 19309                                  ;		AN000 version 4.00 Jan. 1988
 19310                                  ;		M039 DB 10/17/90 - Disk read/write optimization
 19311                                  
 19312                                  ;Break	<DSKREAD -- PHYSICAL DISK READ>
 19313                                  ;---------------------------------------------------------------------------
 19314                                  ;
 19315                                  ; Procedure Name : DSKREAD
 19316                                  ;
 19317                                  ; Inputs:
 19318                                  ;	DS:BX = Transfer addr
 19319                                  ;	CX = Number of sectors
 19320                                  ;	[HIGH_SECTOR] = Absolute record number (HIGH)
 19321                                  ;	DX = Absolute record number	       (LOW)
 19322                                  ;	ES:BP = Base of drive parameters
 19323                                  ; Function:
 19324                                  ;	Call BIOS to perform disk read
 19325                                  ; Outputs:
 19326                                  ;	DI = CX on entry
 19327                                  ;	CX = Number of sectors unsuccessfully transfered
 19328                                  ;	AX = Status word as returned by BIOS (error code in AL if error)
 19329                                  ;	Zero set if OK (from BIOS) (carry clear)
 19330                                  ;	Zero clear if error (carry clear)
 19331                                  ; SI Destroyed, others preserved
 19332                                  ;---------------------------------------------------------------------------
 19333                                  
 19334                                  DSKREAD:
 19335 000041BF 51                      	PUSH	CX
 19336                                  	;mov	ah,[es:bp+16h]
 19337 000041C0 268A6616                	MOV	AH,[ES:BP+DPB.MEDIA]
 19338                                  	;mov	al,[es:bp+1]
 19339 000041C4 268A4601                	MOV	AL,[ES:BP+DPB.UNIT]
 19340 000041C8 53                      	PUSH	BX
 19341 000041C9 06                      	PUSH	ES
 19342 000041CA E8550D                  	call	SETREAD
 19343 000041CD EB27                    	JMP	short DODSKOP
 19344                                  
 19345                                  ;Break	<DWRITE -- SEE ABOUT WRITING>
 19346                                  ;--------------------------------------------------------------------------
 19347                                  ;
 19348                                  ; Procedure Name : DWRITE
 19349                                  ;
 19350                                  ; Inputs:
 19351                                  ;	DS:BX = Transfer address
 19352                                  ;	CX = Number of sectors
 19353                                  ;	[HIGH_SECTOR] = Absolute record number (HIGH)
 19354                                  ;	DX = Absolute record number	       (LOW)
 19355                                  ;	ES:BP = Base of drive parameters
 19356                                  ;	[ALLOWED] must be set in case HARDERR called
 19357                                  ; Function:
 19358                                  ;	Calls BIOS to perform disk write. If BIOS reports
 19359                                  ;	errors, will call HARDERRRW for further action.
 19360                                  ; Output:
 19361                                  ;	Carry set if error (currently, user FAILed to I 24)
 19362                                  ; BP preserved. All other registers destroyed.
 19363                                  ;----------------------------------------------------------------------------
 19364                                  
 19365                                  
 19366                                  	;entry	DWRITE
 19367                                  DWRITE:
 19368 000041CF E81600                  	CALL	DSKWRITE
 19369 000041D2 7413                    	jz	short dw_ret_label	; Carry clear (retz)
 19370                                  
 19371                                  ;hkn; SS override
 19372 000041D4 36C606[1005]01          	MOV	BYTE [SS:READOP],1
 19373 000041DA E83A00                  	call	HARDERRRW
 19374 000041DD 3C01                    	CMP	AL,1		; Check for retry
 19375 000041DF 74EE                    	JZ	short DWRITE
 19376 000041E1 3C03                    	CMP	AL,3		; Check for FAIL
 19377 000041E3 F8                      	CLC
 19378 000041E4 7501                    	JNZ	short NO_CAR2 	; Ignore
 19379 000041E6 F9                      	STC
 19380                                  NO_CAR2:
 19381                                  dw_ret_label:
 19382 000041E7 C3                      	retn
 19383                                  
 19384                                  ;Break	<DSKWRITE -- PHYSICAL DISK WRITE>
 19385                                  ;---------------------------------------------------------------------------
 19386                                  ;
 19387                                  ; Procedure Name : DSKWRITE
 19388                                  ;
 19389                                  ; Inputs:
 19390                                  ;	DS:BX = Transfer addr
 19391                                  ;	CX = Number of sectors
 19392                                  ;	DX = Absolute record number	       (LOW)
 19393                                  ;	[HIGH_SECTOR] = Absolute record number (HIGH)
 19394                                  ;	ES:BP = Base of drive parameters
 19395                                  ; Function:
 19396                                  ;	Call BIOS to perform disk read
 19397                                  ; Outputs:
 19398                                  ;	DI = CX on entry
 19399                                  ;	CX = Number of sectors unsuccessfully transfered
 19400                                  ;	AX = Status word as returned by BIOS (error code in AL if error)
 19401                                  ;	Zero set if OK (from BIOS) (carry clear)
 19402                                  ;	Zero clear if error (carry clear)
 19403                                  ; SI Destroyed, others preserved
 19404                                  ;
 19405                                  ;----------------------------------------------------------------------------
 19406                                  
 19407                                  	;entry	DSKWRITE
 19408                                  DSKWRITE:
 19409 000041E8 51                      	PUSH	CX
 19410                                  	;mov	ah,[es:bp+16h]
 19411 000041E9 268A6616                	MOV	AH,[ES:BP+DPB.MEDIA]
 19412                                  	;mov	al,[es:bp+1]
 19413 000041ED 268A4601                	MOV	AL,[ES:BP+DPB.UNIT]
 19414 000041F1 53                      	PUSH	BX
 19415 000041F2 06                      	PUSH	ES
 19416 000041F3 E85F0D                  	call	SETWRITE
 19417                                  DODSKOP:
 19418 000041F6 8CD9                    	MOV	CX,DS		; Save DS
 19419 000041F8 1F                      	POP	DS		; DS:BP points to DPB
 19420 000041F9 1E                      	PUSH	DS
 19421                                  	;lds	si,[ds:bp+12h]
 19422 000041FA 3EC57612                	LDS	SI,[ds:BP+DPB.DRIVER_ADDR] ; 07/09/2018
 19423 000041FE E8FD0C                  	call	DEVIOCALL2
 19424 00004201 8ED9                    	MOV	DS,CX		; Restore DS
 19425 00004203 07                      	POP	ES		; Restore ES
 19426 00004204 5B                      	POP	BX
 19427                                  
 19428                                  ;hkn; SS override
 19429 00004205 368B0E[1803]            	MOV	CX,[SS:CALLSCNT] ; Number of sectors transferred
 19430 0000420A 5F                      	POP	DI
 19431 0000420B 29F9                    	SUB	CX,DI
 19432 0000420D F7D9                    	NEG	CX		; Number of sectors not transferred
 19433                                  
 19434                                  ;hkn; SS override
 19435 0000420F 36A1[0903]              	MOV	AX,[SS:DEVCALL_REQSTAT]
 19436                                  	;test	ax,8000h
 19437 00004213 A90080                  	test	AX,STERR
 19438 00004216 C3                      	retn
 19439                                  
 19440                                  ;Break	<HardErrRW - map extended errors and call harderr>
 19441                                  ;---------------------------------------------------------------------------
 19442                                  ;
 19443                                  ; Procedure Name : HardErrRW
 19444                                  ;
 19445                                  ; Inputs:
 19446                                  ;	AX is error code from read or write
 19447                                  ;	Other registers set as per HARDERR
 19448                                  ; Function:
 19449                                  ;	Checks the error code for special extended
 19450                                  ;	errors and maps them if needed. Then invokes
 19451                                  ;	Harderr
 19452                                  ; Outputs:
 19453                                  ;	Of HARDERR
 19454                                  ; AX may be modified prior to call to HARDERR.
 19455                                  ; No other registers altered.
 19456                                  ;
 19457                                  ;---------------------------------------------------------------------------
 19458                                  
 19459                                  HARDERRRW:
 19460                                  	;cmp	al,0Fh
 19461 00004217 3C0F                    	CMP	AL,error_I24_wrong_disk
 19462 00004219 7512                    	JNZ	short DO_ERR				; Nothing to do
 19463                                  
 19464                                  	; MSDOS 3.3
 19465                                  	;push	ds
 19466                                  	;push	si
 19467                                  	;lds	si,[ss:CALLVIDRW]
 19468                                  	;mov	[ss:EXTERRPT+2], ds
 19469                                  	;mov	[ss:EXTERRPT], si
 19470                                  	;pop	si
 19471                                  	;pop	ds
 19472                                  
 19473                                  	; MSDOS 6.0
 19474 0000421B 50                      	push	ax
 19475 0000421C 36A1[1C03]              	mov	ax,[SS:CALLVIDRW]		; get ptr lo  ;smr;SS Override
 19476 00004220 36A3[D602]              	mov	[ss:EXTERRPT],ax		; set ext err ptr lo
 19477 00004224 36A1[1E03]              	mov	ax,[SS:CALLVIDRW+2]		; get ptr hi from dev
 19478 00004228 36A3[D802]              	mov	[ss:EXTERRPT+2],ax		; set ext err ptr hi
 19479 0000422C 58                      	pop	ax
 19480                                  DO_ERR:
 19481 0000422D E81C16                  	call	HARDERR
 19482 00004230 C3                      	retn
 19483                                  
 19484                                  ; 24/07/2018 - Retro DOS v3.0
 19485                                  
 19486                                  ;Break	<SETUP -- SETUP A DISK READ OR WRITE FROM USER>
 19487                                  ;----------------------------------------------------------------------------
 19488                                  ;
 19489                                  ; Procedure Name : SETUP
 19490                                  ;
 19491                                  ; Inputs:
 19492                                  ;	ES:DI point to SFT (value also in THISSFT)
 19493                                  ;	DMAAdd contains transfer address
 19494                                  ;	CX = Byte count
 19495                                  ;	DS = DOSDATA
 19496                                  ;   WARNING Stack must be clean, two ret addrs on stack, 1st of caller,
 19497                                  ;		2nd of caller of caller.
 19498                                  ; Outputs:
 19499                                  ;	    CX = byte count
 19500                                  ;	    [THISDPB] = Base of drive parameters if file
 19501                                  ;		      = Pointer to device header if device or NET
 19502                                  ;	    ES:DI Points to SFT
 19503                                  ;	    [NEXTADD] = Displacement of disk transfer within segment
 19504                                  ;	    [TRANS] = 0 (No transfers yet)
 19505                                  ;	    BytPos = Byte position in file
 19506                                  ;
 19507                                  ;	The following fields are relevant to local files (not devices) only:
 19508                                  ;
 19509                                  ;	    SecPos = Position of first sector (local files only)
 19510                                  ;	    [BYTSECPOS] = Byte position in first sector (local files only)
 19511                                  ;	    [CLUSNUM] = First cluster (local files only)
 19512                                  ;	    [SECCLUSPOS] = Sector within first cluster (local files only)
 19513                                  ;	    [THISDRV] = Physical unit number (local files only)
 19514                                  ;
 19515                                  ;      RETURNS ONE LEVEL UP WITH:
 19516                                  ;	   CX = 0
 19517                                  ;	   CARRY = Clear
 19518                                  ;	IF AN ERROR IS DETECTED
 19519                                  ; All other registers destroyed
 19520                                  ;----------------------------------------------------------------------------
 19521                                  
 19522                                  ;hkn; called from disk.asm. DS has been set up to DOSDATA.
 19523                                  
 19524                                  SETUP:
 19525                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 411Bh
 19526                                  
 19527                                  	;lds 	si,[es:di+7]
 19528 00004231 26C57507                	LDS	SI,[ES:DI+SF_ENTRY.sf_devptr]
 19529                                  
 19530                                  ;hkn; SS override
 19531 00004235 368C1E[2605]            	MOV	[SS:THISDPB+2],DS
 19532                                  
 19533                                  ;hkn; SS is DOSDATA
 19534 0000423A 16                      	push	ss
 19535 0000423B 1F                      	pop	ds
 19536                                  
 19537 0000423C 8936[2405]              	MOV	[THISDPB],SI
 19538                                  
 19539 00004240 8B1E[DA02]              	MOV	BX,[DMAADD]
 19540 00004244 891E[5005]              	MOV	[NEXTADD],BX		;Set NEXTADD to start of Xaddr
 19541 00004248 C606[0F05]00            	MOV	BYTE [TRANS],0		;No transferes
 19542                                  	;mov	ax,[es:di+15h]
 19543 0000424D 268B4515                	MOV	AX,[ES:DI+SF_ENTRY.sf_position]
 19544                                  	;mov	dx,[es:di+17h]
 19545 00004251 268B5517                	MOV	DX,[ES:DI+SF_ENTRY.sf_position+2]
 19546 00004255 8916[6205]              	MOV	[BYTPOS+2],DX	;Set it
 19547 00004259 A3[6005]                	MOV	[BYTPOS],AX
 19548                                  	;test	word [es:di+5],8080h
 19549 0000425C 26F745058080            	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet+devid_device
 19550 00004262 7536                    	JNZ	short NOSETSTUFF	;Following not done on devs or NET
 19551 00004264 06                      	PUSH	ES
 19552 00004265 C42E[2405]              	LES	BP,[THISDPB]		;Point at the DPB
 19553                                  	;mov	bl,[es:bp+0]
 19554                                  	;MOV	BL,[ES:BP+DPB.drive]
 19555 00004269 268A5E00                	mov	bl,[es:bp]
 19556 0000426D 881E[1105]              	MOV	[THISDRV],BL		;Set THISDRV
 19557                                  	;mov	bx,[es:bp+2]
 19558 00004271 268B5E02                	MOV	BX,[ES:BP+DPB.SECTOR_SIZE]
 19559                                  
 19560                                  	; MSDOS 3.3
 19561 00004275 39DA                    	cmp	dx, bx
 19562 00004277 7336                    	jnb	short EOFERR
 19563 00004279 F7F3                    	div	bx
 19564 0000427B A3[5A05]                	mov	[SECPOS],ax
 19565 0000427E 8916[5E05]              	mov	[BYTSECPOS],dx
 19566 00004282 89C2                    	mov	dx,ax
 19567                                  	;and	al,[es:bp+4]
 19568 00004284 26224604                	AND	AL,[ES:BP+DPB.CLUSTER_MASK]
 19569 00004288 A2[0E05]                	mov	[SECCLUSPOS],al
 19570 0000428B 89C8                    	mov	ax,cx
 19571                                  	;mov	cl,[es:bp+5]
 19572 0000428D 268A4E05                	MOV	CL,[ES:BP+DPB.CLUSTER_SHIFT]
 19573 00004291 D3EA                    	shr	dx,cl
 19574 00004293 8916[5405]              	mov	[CLUSNUM],dx
 19575 00004297 07                      	pop	es
 19576 00004298 89C1                    	mov	cx,ax
 19577                                  
 19578                                  	; MSDOS 6.0
 19579                                  ;M039: Optimized this section.
 19580                                          ;PUSH    CX                            ;SHR32 and DIV32 use CX.
 19581                                  	;call	DIV32			      ;DX:AX/BX = CX:AX + DX (rem)
 19582                                  	;MOV	[BYTSECPOS],DX
 19583                                  	;MOV	[SecPos],AX
 19584                                  	;MOV	[SecPos+2],CX
 19585                                  	;MOV	DX,CX
 19586                                  
 19587                                  	;MOV	BX,AX
 19588                                  	;;and	bl,[es:bp+4]
 19589                                  	;AND	BL,[ES:BP+DPB.CLUSTER_MASK]
 19590                                  	;MOV	[SECCLUSPOS],BL
 19591                                  
 19592                                  	;call	SHR32			     ;(DX:AX SHR dpb_cluster_shift)
 19593                                  	;POP	CX			     ;CX = byte count.
 19594                                  	;JNZ	short EOFERR		     ;cluster number above 64k
 19595                                  	;CMP	AX,[ES:BP+DPB.MAX_CLUSTER]   ;>32mb    if > disk size ;AN000;
 19596                                  	;JA	short EOFERR		     ;>32mb    then EOF       ;AN000;
 19597                                  
 19598                                  	;MOV	[CLUSNUM],AX
 19599                                  	;POP	ES			     ; ES:DI point to SFT
 19600                                  ;M039
 19601                                  
 19602                                  NOSETSTUFF:
 19603 0000429A 89C8                    	MOV	AX,CX		; AX = Byte count.
 19604 0000429C 0306[DA02]              	ADD	AX,[DMAADD]	 ; See if it will fit in one segment
 19605 000042A0 730C                    	JNC	short setup_OK		; Must be less than 64K
 19606 000042A2 A1[DA02]                	MOV	AX,[DMAADD]
 19607 000042A5 F7D8                    	NEG	AX		; Amount of room left in segment (know
 19608                                  				;    less than 64K since max value of CX
 19609                                  				;    is FFFF).
 19610 000042A7 7501                    	JNZ	short NoDec
 19611 000042A9 48                      	DEC	AX
 19612                                  NoDec:
 19613 000042AA 89C1                    	MOV	CX,AX		; Can do this much
 19614 000042AC E309                    	JCXZ	NOROOM		; Silly user gave Xaddr of FFFF in segment
 19615                                  setup_OK:
 19616 000042AE C3                      	retn
 19617                                  
 19618                                  EOFERR:
 19619 000042AF 07                      	POP	ES		; ES:DI point to SFT
 19620 000042B0 31C9                    	XOR	CX,CX		; No bytes read
 19621                                  ;;;;;;;;;;; 7/18/86
 19622                                  	; MSDOS 3.3
 19623 000042B2 C606[8C0F]01            	MOV	BYTE [DISK_FULL],1 ; set disk full flag
 19624                                  ;;;;;;;;;;;
 19625                                  NOROOM:
 19626 000042B7 5B                      	POP	BX		; Kill return address
 19627 000042B8 F8                      	CLC
 19628 000042B9 C3                      	retn			; RETURN TO CALLER OF CALLER
 19629                                  
 19630                                  ;Break	<BREAKDOWN -- CUT A USER READ OR WRITE INTO PIECES>
 19631                                  ;---------------------------------------------------------------------------
 19632                                  ;
 19633                                  ; Procedure Name : BREAKDOWN
 19634                                  ;
 19635                                  ; Inputs:
 19636                                  ;	CX = Length of disk transfer in bytes
 19637                                  ;	ES:BP = Base of drive parameters
 19638                                  ;	[BYTSECPOS] = Byte position within first sector
 19639                                  ;	DS = DOSDATA
 19640                                  ; Outputs:
 19641                                  ;	[BYTCNT1] = Bytes to transfer in first sector
 19642                                  ;	[SECCNT] = No. of whole sectors to transfer
 19643                                  ;	[BYTCNT2] = Bytes to transfer in last sector
 19644                                  ; AX, BX, DX destroyed. No other registers affected.
 19645                                  ;---------------------------------------------------------------------------
 19646                                  
 19647                                  BREAKDOWN:
 19648 000042BA A1[5E05]                	MOV	AX,[BYTSECPOS]
 19649 000042BD 89CB                    	MOV	BX,CX
 19650 000042BF 09C0                    	OR	AX,AX
 19651 000042C1 740E                    	JZ	short SAVFIR	; Partial first sector?
 19652                                  	;sub	ax,[es:bp+2]
 19653 000042C3 262B4602                	SUB	AX,[ES:BP+DPB.SECTOR_SIZE]
 19654 000042C7 F7D8                    	NEG	AX		; Max number of bytes left in first sector
 19655 000042C9 29C3                    	SUB	BX,AX		; Subtract from total length
 19656 000042CB 7304                    	JAE	short SAVFIR
 19657 000042CD 01D8                    	ADD	AX,BX		; Don't use all of the rest of the sector
 19658 000042CF 31DB                    	XOR	BX,BX		; And no bytes are left
 19659                                  SAVFIR:
 19660 000042D1 A3[6405]                	MOV	[BYTCNT1],AX
 19661 000042D4 89D8                    	MOV	AX,BX
 19662 000042D6 31D2                    	XOR	DX,DX
 19663                                  	;div	word [ES:BP+2]
 19664 000042D8 26F77602                	DIV	word [ES:BP+DPB.SECTOR_SIZE]  ; How many whole sectors?
 19665 000042DC A3[6805]                	MOV	[SECCNT],AX
 19666 000042DF 8916[6605]              	MOV	[BYTCNT2],DX	; Bytes remaining for last sector
 19667                                  	; MSDOS 3.3
 19668                                  ;	OR	DX,[BYTCNT1]	; SMR ONESECTORFIX BUGBUG
 19669                                  ;	retnz			; NOT (BYTCNT1 = BYTCNT2 = 0)
 19670                                  ;	CMP	AX,1
 19671                                  ;	retnz
 19672                                  ;	MOV	AX,[ES:BP+DPB.SECTOR_SIZE] ; Buffer EXACT one sector I/O
 19673                                  ;	MOV	[BYTCNT2],AX
 19674                                  ;	MOV	[SECCNT],DX	; DX = 0
 19675                                  _RET45:
 19676 000042E3 C3                      	retn
 19677                                  
 19678                                  ;----------------------------------------------------------------------------
 19679                                  ;
 19680                                  ; Procedure Name : READ_LOCK_VIOLATION
 19681                                  ;
 19682                                  ; ES:DI points to SFT. This entry used by NET_READ
 19683                                  ; Carry set if to return error (CX=0,AX=error_sharing_violation).
 19684                                  ; Else do retrys.
 19685                                  ; ES:DI,DS,CX preserved
 19686                                  ;
 19687                                  ;----------------------------------------------------------------------------
 19688                                  
 19689                                  READ_LOCK_VIOLATION:
 19690 000042E4 C606[1005]00            	MOV	byte [READOP],0
 19691                                  ERR_ON_CHECK:
 19692                                  	;test	word [es:di+2],8000h
 19693 000042E9 26F745020080            	TEST	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB
 19694 000042EF 750E                    	JNZ	short HARD_ERR
 19695 000042F1 51                      	PUSH	CX
 19696 000042F2 268A4D02                	MOV	CL,[ES:DI+SF_ENTRY.sf_mode]
 19697                                  	;and	cl,0F0h
 19698 000042F6 80E1F0                  	AND	CL,SHARING_MASK
 19699                                  	;cmp	cl,0
 19700 000042F9 80F900                  	CMP	CL,SHARING_COMPAT
 19701 000042FC 59                      	POP	CX
 19702 000042FD 7505                    	JNE	short NO_HARD_ERR
 19703                                  HARD_ERR:
 19704 000042FF E8FD2F                  	call	LOCK_VIOLATION
 19705 00004302 73DF                    	jnc	short _RET45		; User wants Retrys
 19706                                  NO_HARD_ERR:
 19707 00004304 31C9                    	XOR	CX,CX			;No bytes transferred
 19708                                  	;mov	ax, 21h
 19709 00004306 B82100                  	MOV	AX,error_lock_violation
 19710 00004309 F9                      	STC
 19711 0000430A C3                      	retn
 19712                                  
 19713                                  ;----------------------------------------------------------------------------
 19714                                  ;
 19715                                  ; Procedure Name : WRITE_LOCK_VIOLATION
 19716                                  ;
 19717                                  ; Same as READ_LOCK_VIOLATION except for READOP.
 19718                                  ; This entry used by NET_WRITE
 19719                                  ;
 19720                                  ;----------------------------------------------------------------------------
 19721                                  
 19722                                  WRITE_LOCK_VIOLATION:
 19723 0000430B C606[1005]01            	MOV	byte [READOP],1
 19724 00004310 EBD7                    	JMP	short ERR_ON_CHECK
 19725                                  
 19726                                  ;Break	<DISKREAD -- PERFORM USER DISK READ>
 19727                                  ;----------------------------------------------------------------------------
 19728                                  ;
 19729                                  ; Procedure Name : DISKREAD
 19730                                  ;
 19731                                  ; Inputs:
 19732                                  ;	Outputs of SETUP
 19733                                  ; Function:
 19734                                  ;	Perform disk read
 19735                                  ; Outputs:
 19736                                  ;    Carry clear
 19737                                  ;	CX = No. of bytes read
 19738                                  ;	ES:DI point to SFT
 19739                                  ;	SFT offset and cluster pointers updated
 19740                                  ;    Carry set
 19741                                  ;	CX = 0
 19742                                  ;	ES:DI point to SFT
 19743                                  ;	AX has error code
 19744                                  ;----------------------------------------------------------------------------
 19745                                  
 19746                                  ;hkn; called from disk.asm. DS already set up.
 19747                                  
 19748                                  DISKREAD:
 19749                                  	;mov	ax,[es:di+11h]
 19750 00004312 268B4511                	MOV	AX,[ES:DI+SF_ENTRY.sf_size]
 19751                                  	;mov	bx,[es:di+13h]
 19752 00004316 268B5D13                	MOV	BX,[ES:DI+SF_ENTRY.sf_size+2]
 19753 0000431A 2B06[6005]              	SUB	AX,[BYTPOS]
 19754 0000431E 1B1E[6205]              	SBB	BX,[BYTPOS+2]
 19755 00004322 7226                    	JB	short RDERR		;Read starts past EOF
 19756 00004324 750A                    	JNZ	short ENUF		;More than 64k to EOF
 19757 00004326 09C0                    	OR	AX,AX
 19758 00004328 7420                    	JZ	short RDERR		;Read starts at EOF
 19759 0000432A 39C8                    	CMP	AX,CX
 19760 0000432C 7302                    	JAE	short ENUF		;I/O fits
 19761 0000432E 89C1                    	MOV	CX,AX			;Limit read to up til EOF
 19762                                  ENUF:
 19763                                  	; MSDOS 3.3
 19764                                  	;test	byte [es:di+4],8
 19765                                  	;TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_volume_id
 19766                                  	;jnz	short SET_ACC_ERR
 19767                                  	;call	LOCK_CHECK
 19768                                  	;jnb	short _READ_OK
 19769                                  	;call	READ_LOCK_VIOLATION
 19770                                  	;jnb	short ENUF
 19771                                  	;retn
 19772                                  
 19773                                  	; MSDOS 6.0
 19774 00004330 E876FE                  	call	CHECK_READ_LOCK		;IFS. check read lock	;AN000;
 19775 00004333 7301                    	JNC	short _READ_OK 		; There are no locks
 19776 00004335 C3                      	retn
 19777                                  
 19778                                  _READ_OK:
 19779 00004336 C42E[2405]              	LES	BP,[THISDPB]
 19780 0000433A E87DFF                  	CALL	BREAKDOWN
 19781 0000433D 8B0E[5405]              	MOV	CX,[CLUSNUM]
 19782 00004341 E86E0F                  	call	FNDCLUS
 19783                                       	; MSDOS 6.0			;M022 conditional removed here
 19784 00004344 720F                    	JC	short SET_ACC_ERR_DS	; fix to take care of I24 fail
 19785                                  					; migrated from 330a - HKN
 19786 00004346 09C9                    	OR	CX,CX
 19787 00004348 7414                    	JZ	short SKIPERR
 19788                                  RDERR:
 19789 0000434A B40E                    	MOV	AH,0EH			;MS. read/data/fail ;AN000;
 19790 0000434C E99E01                  	jmp	WRTERR22
 19791                                  
 19792                                  ;RDLASTJ: 
 19793                                  	;JMP	RDLAST                  ;M039
 19794                                  
 19795                                  SETSFTJ2: 
 19796 0000434F E9E300                  	JMP	SETSFT
 19797                                  
 19798                                  CANOT_READ:
 19799                                  	; MSDOS 3.3
 19800 00004352 59                      	POP	CX		;M039.
 19801                                  	; MSDOS 3.3 (& MSDOS 6.0)
 19802 00004353 59                      	POP	CX              ;Clean stack.
 19803 00004354 5B                      	POP	BX
 19804                                  
 19805                                  	;entry	SET_ACC_ERR_DS
 19806                                  SET_ACC_ERR_DS:
 19807                                  ;hkn; SS is DOSDATA
 19808                                  	;Context DS
 19809 00004355 16                      	push	ss
 19810 00004356 1F                      	pop	ds
 19811                                  
 19812                                  	;entry	SET_ACC_ERR
 19813                                  SET_ACC_ERR:
 19814 00004357 31C9                    	XOR	CX,CX
 19815                                  	;mov	ax,5
 19816 00004359 B80500                  	MOV	AX,error_access_denied
 19817 0000435C F9                      	STC
 19818 0000435D C3                      	retn
 19819                                  
 19820                                  SKIPERR:
 19821 0000435E 8916[5205]              	MOV	[LASTPOS],DX
 19822 00004362 891E[5405]              	MOV	[CLUSNUM],BX
 19823 00004366 833E[6405]00            	CMP	word [BYTCNT1],0
 19824 0000436B 7405                    	JZ	short RDMID
 19825 0000436D E8B80F                  	call	BUFRD
 19826 00004370 72E3                    	JC	short SET_ACC_ERR_DS
 19827                                  RDMID:
 19828 00004372 833E[6805]00            	CMP	word [SECCNT],0
 19829 00004377 0F849D00                	JZ	RDLAST ; 10/08/2018
 19830 0000437B E82610                  	call	NEXTSEC
 19831 0000437E 72CF                    	JC	short SETSFTJ2
 19832 00004380 C606[0F05]01            	MOV	BYTE [TRANS],1		; A transfer is taking place
 19833                                  ONSEC:
 19834 00004385 8A16[0E05]              	MOV	DL,[SECCLUSPOS]	; (dx/DL = Extent start) ((dh = ?))
 19835 00004389 8B0E[6805]              	MOV	CX,[SECCNT]
 19836 0000438D 8B1E[5405]              	MOV	BX,[CLUSNUM]
 19837                                  RDLP:
 19838 00004391 E84110                  	call	OPTIMIZE
 19839 00004394 72BF                    	JC	short SET_ACC_ERR_DS
 19840 00004396 57                      	PUSH	DI                      ;DI = Next physical cluster.
 19841 00004397 50                      	PUSH	AX                      ;AX = # of sectors remaining.
 19842 00004398 53                      	PUSH	BX			;[DMAADD+2]:BX = Transfer address.
 19843                                  	;mov	byte [ALLOWED],38h
 19844 00004399 C606[F702]38            	MOV	byte [ALLOWED],Allowed_RETRY+Allowed_FAIL+Allowed_IGNORE
 19845 0000439E 8E1E[DC02]              	MOV	DS,[DMAADD+2]
 19846                                  
 19847 000043A2 52                      	PUSH	DX                      ;[HIGH_SECTOR]:DX = phys. sector #.
 19848 000043A3 51                      	PUSH	CX                      ;CX = # of contiguous sectors to read.
 19849                                  
 19850                                  	; MSDOS 6.0
 19851                                  	;call	SET_RQ_SC_PARMS 	 ;LB. do this for SC ;AN000;
 19852                                  
 19853                                  	; MSDOS 3.3 (& MSDOS 6.0)
 19854 000043A4 E8C9FD                  	call	DREAD
 19855                                  
 19856                                  	; MSDOS 3.3 
 19857 000043A7 5B                      	pop	bx
 19858 000043A8 5A                      	pop	dx
 19859 000043A9 72A7                    	jc	short CANOT_READ
 19860 000043AB 01D3                    	add	bx,dx	; (bx = Extent end)
 19861 000043AD 268A4600                	mov	al,[es:bp] ; mov al,[es:bp+0]
 19862                                  	;mov	al,[ES:BP+DPB.DRIVE] 
 19863 000043B1 E8F119                  	call	SETVISIT
 19864                                  	; ->***
 19865                                  
 19866                                  ;M039
 19867                                  	; MSDOS 6.0 
 19868                                  	;pop	cx
 19869                                  	;pop	dx
 19870                                  	;pop	WORD [TEMP_VAR]
 19871                                  	;jc	short CANOT_READ
 19872                                  
 19873                                  	;mov	[TEMP_VAR2],ds
 19874                                  
 19875                                  ;       CX = # of contiguous sectors read.  (These constitute a block of
 19876                                  ;            sectors, also termed an "Extent".)
 19877                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
 19878                                  ;       [TEMP_VAR2]:[TEMP_VAR] = Transfer address (destination data address).
 19879                                  ;       ES:BP -> Drive Parameter Block (DPB).
 19880                                  ;
 19881                                  ;	The Buffer Queue must now be scanned: the contents of any dirty
 19882                                  ;	buffers must be "read" into the transfer memory block, so that the
 19883                                  ;       transfer memory reflects the most recent data.
 19884                                  
 19885                                  	;call    DskRdBufScan
 19886                                  
 19887                                  	;;Context DS
 19888                                  	;push	ss
 19889                                  	;pop	ds
 19890                                          
 19891                                  	;pop	cx
 19892                                          ;pop	bx
 19893                                  
 19894                                  ;       CX = # of sector remaining.
 19895                                  ;       BX = Next physical cluster.
 19896                                  ;M039
 19897                                  	; 25/07/2018 - Retro DOS v3.0
 19898                                  	; ***->
 19899                                  	; MSDOS 3.3
 19900                                  	; IBMDOS.COM (1987) - Offset 42BDh
 19901                                  bufq:
 19902                                  ;	DX = Extent start.
 19903                                  ;	BX = Extent end.
 19904                                  ;	 AL = Drive #.
 19905                                  ;     DS:DI-> 1st buffer in queue.
 19906                                  
 19907                                  	;or	byte [di+5],20h
 19908 000043B4 804D0520                	or	byte [DI+BUFFINFO.buf_flags],buf_visit ; Bit 5 = reserved
 19909                                  	;cmp	al,[di+4]	
 19910 000043B8 3A4504                  	cmp	al,[DI+BUFFINFO.buf_ID]
 19911 000043BB 7541                    	jnz	short bufq3
 19912                                  	;cmp	[di+6],dx
 19913 000043BD 395506                  	cmp	[DI+BUFFINFO.buf_sector],dx
 19914 000043C0 723C                    	jb	short bufq3	; Jump if Extent start > buffer sector.
 19915                                  	;cmp	[di+6],bx
 19916 000043C2 395D06                  	cmp	[DI+BUFFINFO.buf_sector],bx
 19917 000043C5 7337                    	jnb	short bufq3	; Jump if Extent end >= buffer sector.
 19918                                  	
 19919                                  	; Buffer sector is in the Extent (contiguous sectors to read)
 19920                                  
 19921                                  ;       Buffer's sector is in Extent: if it is dirty, copy its contents to
 19922                                  ;	transfer memory; otherwise, just re-position it in the buffer queue
 19923                                  ;       as MRU (Most Recently Used).
 19924                                  
 19925                                  	;test	byte [di+5],40h
 19926 000043C7 F6450540                	test	byte [DI+BUFFINFO.buf_flags],buf_dirty ; Bit 6 = dirty flag
 19927 000043CB 742E                    	jz	short bufq2	; clear buffer, check the next buff sec
 19928 000043CD 58                      	pop	ax ; transfer address
 19929 000043CE 50                      	push	ax
 19930 000043CF 57                      	push	di
 19931 000043D0 52                      	push	dx
 19932                                  	;sub	dx,[di+6]
 19933 000043D1 2B5506                  	sub	dx,[DI+BUFFINFO.buf_sector]
 19934 000043D4 F7DA                    	neg	dx
 19935                                  
 19936                                  ;       DX = offset (in sectors) of buffer sector within Transfer memory
 19937                                  ;            block.
 19938                                  
 19939 000043D6 89FE                    	mov	si,di
 19940 000043D8 89C7                    	mov	di,ax
 19941 000043DA 89D0                    	mov	ax,dx
 19942                                  	;mov	cx,[es:bp+6]	
 19943 000043DC 268B4E02                	mov     cx,[ES:BP+DPB.SECTOR_SIZE] ; CX = sector size (in bytes).
 19944 000043E0 F7E1                    	mul	cx
 19945 000043E2 01C7                    	add	di,ax
 19946                                  
 19947                                  	; 06/07/2019
 19948                                  	;lea	si,[si+16]
 19949 000043E4 8D7410                  	lea	si,[SI+BUFINSIZ] ;DS:SI -> buffer data.
 19950 000043E7 D1E9                           	shr	cx,1
 19951 000043E9 06                      	push	es
 19952 000043EA 368E06[DC02]            	mov	es,[SS:DMAADD+2]
 19953                                  
 19954                                  ;	   CX = sector size (in WORDs) ; CF=1 if odd # of bytes.
 19955                                  ;       DS:SI-> Buffer sector data.
 19956                                  ;       ES:DI-> Destination within Transfer memory block.
 19957                                  
 19958 000043EF F3A5                    	rep	movsw			;Copy buffer sector to Transfer memory
 19959                                  	;adc	cx,0                    ;CX=1 if odd # of bytes, else CX=0.
 19960                                  	;rep	movsb                   ;Copy last byte.
 19961 000043F1 7301                    	jnc	short bufq1
 19962 000043F3 A4                      	movsb
 19963                                  bufq1:
 19964 000043F4 07                      	pop	es
 19965 000043F5 5A                      	pop	dx
 19966 000043F6 5F                      	pop	di
 19967 000043F7 268A4600                	mov	al,[es:bp]  ; mov al,[es:bp+0]
 19968                                  	;mov	al,[ES:BP+DPB.DRIVE]
 19969                                  bufq2:
 19970 000043FB E8D419                  	call	SCANPLACE
 19971                                  bufq3:
 19972 000043FE E8BD19                  	call	SKIPVISIT
 19973 00004401 75B1                    	jnz	short bufq
 19974                                  	
 19975 00004403 16                      	push	ss
 19976 00004404 1F                      	pop	ds
 19977 00004405 59                      	pop	cx
 19978 00004406 59                      	pop	cx
 19979 00004407 5B                      	pop	bx	
 19980                                  bufq4:
 19981 00004408 E30E                    	JCXZ	RDLAST
 19982 0000440A E82D16                  	call	IsEOF			; test for eof on fat size
 19983 0000440D 7326                    	JAE	short SETSFT
 19984 0000440F B200                    	MOV	DL,0
 19985 00004411 FF06[5205]              	INC	word [LASTPOS]		; We'll be using next cluster
 19986 00004415 E979FF                  	JMP	RDLP
 19987                                  
 19988                                  RDLAST:
 19989 00004418 A1[6605]                	MOV	AX,[BYTCNT2]
 19990 0000441B 09C0                    	OR	AX,AX
 19991 0000441D 7416                    	JZ	short SETSFT
 19992 0000441F A3[6405]                	MOV	[BYTCNT1],AX
 19993 00004422 E87F0F                  	call	NEXTSEC
 19994 00004425 720E                    	JC	short SETSFT
 19995 00004427 C706[5E05]0000          	MOV	word [BYTSECPOS],0
 19996 0000442D E8F80E                  	call	BUFRD
 19997                                  	; 10/08/2018
 19998 00004430 7303                    	JNC	short SETSFT
 19999 00004432 E920FF                  	JMP	SET_ACC_ERR_DS
 20000                                  
 20001                                  ;------------------------------------------------------------------------------
 20002                                  ;
 20003                                  ; Procedure Name : SETSFT
 20004                                  ; Inputs:
 20005                                  ;	[NEXTADD],[CLUSNUM],[LASTPOS] set to determine transfer size
 20006                                  ;		and set cluster fields
 20007                                  ; Function:
 20008                                  ;	Update [THISSFT] based on the transfer
 20009                                  ; Outputs:
 20010                                  ;	sf_position, sf_lstclus, and sf_cluspos updated
 20011                                  ;	ES:DI points to [THISSFT]
 20012                                  ;	CX No. of bytes transferred
 20013                                  ;	Carry clear
 20014                                  ;
 20015                                  ;----------------------------------------------------------------------------
 20016                                  
 20017                                  	;entry	SETSFT
 20018                                  
 20019                                  ; 26/07/2018 - Retro DOS v3.0
 20020                                  SETSFT:
 20021 00004435 C43E[3605]              	LES	DI,[THISSFT]
 20022                                  
 20023                                  ; Same as SETSFT except ES:DI already points to SFT
 20024                                  	;entry	SETCLUS
 20025                                  SETCLUS:	
 20026 00004439 8B0E[5005]              	MOV	CX,[NEXTADD]
 20027 0000443D 2B0E[DA02]              	SUB	CX,[DMAADD]		; Number of bytes transfered
 20028                                  	;test	word [es:di+5],80h
 20029 00004441 26F745058000            	TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 20030 00004447 750E                    	JNZ	short ADDREC		; don't set clusters if device
 20031 00004449 A1[5405]                	MOV	AX,[CLUSNUM]
 20032                                  	;mov	[es:di+1Bh],ax
 20033 0000444C 2689451B                	MOV	[ES:DI+SF_ENTRY.sf_lstclus],AX
 20034 00004450 A1[5205]                	MOV	AX,[LASTPOS]
 20035                                  	;mov	[es:di+19h],ax
 20036 00004453 26894519                	MOV	[ES:DI+SF_ENTRY.sf_cluspos],AX
 20037                                  
 20038                                  ;----------------------------------------------------------------------------
 20039                                  ;
 20040                                  ; Procedure : AddRec
 20041                                  ; Inputs:
 20042                                  ;	ES:DI points to SFT
 20043                                  ;	CX is No. Bytes transferred
 20044                                  ; Function:
 20045                                  ;	Update the SFT offset based on the transfer
 20046                                  ; Outputs:
 20047                                  ;	sf_position updated to point to first byte after transfer
 20048                                  ;	ES:DI points to SFT
 20049                                  ;	CX No. of bytes transferred
 20050                                  ;	Carry clear
 20051                                  ;----------------------------------------------------------------------------
 20052                                  
 20053                                  	;entry	AddRec
 20054                                  ADDREC:
 20055 00004457 E309                    	JCXZ	RET28		; If no records read,  don't change position
 20056                                  	;add	[es:di+15h],cx
 20057 00004459 26014D15                	ADD	[ES:DI+SF_ENTRY.sf_position],CX  ; Update current position
 20058                                  	;adc	word [es:di+17h], 0
 20059 0000445D 2683551700              	ADC	WORD [ES:DI+SF_ENTRY.sf_position+2],0
 20060                                  RET28:	
 20061 00004462 F8                      	CLC
 20062 00004463 C3                      	retn
 20063                                  
 20064                                  ; 25/07/2018
 20065                                  ; MSDOS 6.0
 20066                                  ;Break   <DskRdBufScan -- Disk Read Buffer Scan>
 20067                                  ;----------------------------------------------------------------------------
 20068                                  ;
 20069                                  ; Procedure Name : DskRdBufScan
 20070                                  ;
 20071                                  ; Inputs:
 20072                                  ;       CX = # of contiguous sectors read.  (These constitute a block of
 20073                                  ;            sectors, also termed an "Extent".)
 20074                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
 20075                                  ;       [TEMP_VAR2]:[TEMP_VAR] = Transfer address (destination data address).
 20076                                  ;       ES:BP -> Drive Parameter Block (DPB).
 20077                                  ;
 20078                                  ; Function:
 20079                                  ;	The Buffer Queue is scanned: the contents of any dirty buffers are
 20080                                  ;	"read" into the transfer memory block, so that the transfer memory
 20081                                  ;	reflects the most recent data.
 20082                                  ;
 20083                                  ; Outputs:
 20084                                  ;       Transfer memory updated as required.
 20085                                  ;
 20086                                  ; Uses:
 20087                                  ;       DS,AX,BX,CX,SI,DI destroyed.
 20088                                  ;       SS override for all global variables.
 20089                                  ;
 20090                                  ; Notes:
 20091                                  ;       FIRST_BUFF_ADDR is set-up to contain the LAST buffer to check, rather
 20092                                  ;	than the FIRST.
 20093                                  ;----------------------------------------------------------------------------
 20094                                  ;M039: Created
 20095                                  
 20096                                  ;procedure   DskRdBufScan,NEAR
 20097                                  ;
 20098                                  ;ASSUME  DS:NOTHING
 20099                                  ;
 20100                                  ;	cmp	[DirtyBufferCount],0	;Any dirty buffers?
 20101                                  ;	je	bufx			; -no, skip all work.
 20102                                  ;
 20103                                  ;       mov     bx,[HIGH_SECTOR]
 20104                                  ;       mov     si,bx
 20105                                  ;       add     cx,dx
 20106                                  ;       adc     si,0
 20107                                  ;
 20108                                  ;	call	GETCURHEAD		;DS:DI -> 1st buf in queue.
 20109                                  ;       mov     ax,[di].buf_prev
 20110                                  ;       mov     [FIRST_BUFF_ADDR],ax
 20111                                  ;
 20112                                  ;       Assert  ISDPB,<ES,BP>,"DISKREAD/bufchk"
 20113                                  ;	mov	al,es:[bp].dpb_drive
 20114                                  ;
 20115                                  ;;            BX:DX = Extent start.
 20116                                  ;;            SI:CX = Extent end + 1.
 20117                                  ;;               AL = Drive #.
 20118                                  ;;            DS:DI-> 1st buffer in queue.
 20119                                  ;;[FIRST_BUFF_ADDR] = Address offset of last buffer in queue.
 20120                                  ;
 20121                                  ;bufq:	cmp     al,BYTE PTR [di.buf_ID] ;Same drive?
 20122                                  ;	jne     bufq1        		;  -no, jump.
 20123                                  ;
 20124                                  ;       Cmp32   bx,dx,<WORD PTR [di.buf_sector+2]>,<WORD PTR [di.buf_sector]>
 20125                                  ;       ja	bufq1			;Jump if Extent start > buffer sector.
 20126                                  ;       Cmp32   si,cx,<WORD PTR [di.buf_sector+2]>,<WORD PTR [di.buf_sector]>
 20127                                  ;       ja	bufq2                   ;Jump if Extent end >= buffer sector.
 20128                                  ;
 20129                                  ;bufq1:	cmp     di,[FIRST_BUFF_ADDR]    ;Scanned entire buffer queue?
 20130                                  ;       mov     di,[di].buf_next        ; Set-up for next buffer.
 20131                                  ;       jne     bufq                    ; -no, do next buffer
 20132                                  ;
 20133                                  ;bufx:   return                          ;Exit.
 20134                                  ;
 20135                                  ;;       Buffer's sector is in Extent: if it is dirty, copy its contents to
 20136                                  ;;	transfer memory; otherwise, just re-position it in the buffer queue
 20137                                  ;;       as MRU (Most Recently Used).
 20138                                  ;
 20139                                  ;bufq2:	SaveReg <ax>
 20140                                  ;	testb   [di.buf_flags],buf_dirty ;Buffer dirty?
 20141                                  ;	jz      bufq3                    ; -no, jump.
 20142                                  ;
 20143                                  ;        SaveReg <cx,dx,si,di,es>
 20144                                  ;
 20145                                  ;	mov     ax,dx
 20146                                  ;	sub	ax, word ptr [di].buf_sector
 20147                                  ;	neg	ax
 20148                                  ;
 20149                                  ;;       AX = offset (in sectors) of buffer sector within Transfer memory
 20150                                  ;;            block.  (Note: the upper word of the sector # may be ignored
 20151                                  ;;	     since no more than 64k bytes will ever be read.  This 64k limit
 20152                                  ;;            is imposed by the input parameters of the disk read operation.)
 20153                                  ;
 20154                                  ;	lea	si,[di].BUFINSIZ	;DS:SI -> buffer data.
 20155                                  ;	mov     cx,es:[bp].dpb_sector_size ;CX = sector size (in bytes).
 20156                                  ;	mul     cx			;AX = offset (in bytes) of buf. sector
 20157                                  ;	mov     di,WORD PTR [TEMP_VAR]
 20158                                  ;	add	di,ax
 20159                                  ;	mov	es,WORD PTR [TEMP_VAR2]
 20160                                  ;	shr	cx,1
 20161                                  ;
 20162                                  ;;	   CX = sector size (in WORDs); CF=1 if odd # of bytes.
 20163                                  ;;       DS:SI-> Buffer sector data.
 20164                                  ;;       ES:DI-> Destination within Transfer memory block.
 20165                                  ;
 20166                                  ;	rep	movsw			;Copy buffer sector to Transfer memory
 20167                                  ;	adc	cx,0                    ;CX=1 if odd # of bytes, else CX=0.
 20168                                  ;	rep	movsb                   ;Copy last byte.
 20169                                  ;	RestoreReg <es,di,si,dx,cx>
 20170                                  ;
 20171                                  ;       DS:DI -> current buffer.
 20172                                  ;
 20173                                  ;bufq3:	mov     ax,di			;DS:AX -> Current buffer.
 20174                                  ;       invoke  SCANPLACE
 20175                                  ;       cmp	ax,[FIRST_BUFF_ADDR]    ;Last buffer?
 20176                                  ;       RestoreReg <ax>
 20177                                  ;       jnz    	bufq                   	; -no, jump.
 20178                                  ;       jmp     short bufx              ; -yes, exit.
 20179                                  ;
 20180                                  ;EndProc DskRdBufScan
 20181                                  
 20182                                  ;Break   <DISKWRITE -- PERFORM USER DISK WRITE>
 20183                                  ;----------------------------------------------------------------------------
 20184                                  ;
 20185                                  ; Procedure Name : DISKWRITE
 20186                                  ;
 20187                                  ; Inputs:
 20188                                  ;       Outputs of SETUP
 20189                                  ; Function:
 20190                                  ;       Perform disk write
 20191                                  ; Outputs:
 20192                                  ;    Carry clear
 20193                                  ;       CX = No. of bytes read
 20194                                  ;       ES:DI point to SFT
 20195                                  ;       SFT offset and cluster pointers updated
 20196                                  ;    Carry set
 20197                                  ;       CX = 0
 20198                                  ;       ES:DI point to SFT
 20199                                  ;       AX has error code
 20200                                  ;----------------------------------------------------------------------------
 20201                                  
 20202                                  ;hkn; called by DOS_WRITE. DS already set up at this point.
 20203                                  
 20204                                  DISKWRITE:
 20205                                  	; MSDOS 3.3
 20206                                  	; IBMDOS.COM - Offset 436Dh
 20207                                  	;;test	byte [es:di+4],8
 20208                                  	;TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_volume_id
 20209                                  	;jz	short write_cont
 20210                                  	;jmp	SET_ACC_ERR_DS
 20211                                  ;write_cont:
 20212                                  	;push	cx
 20213                                  	;or	cx, cx
 20214                                  	;jnz	short Not_Truncate
 20215                                  	;;mov	cx,-1
 20216                                  	;dec	cx
 20217                                  ;Not_Truncate:
 20218                                  	;call	LOCK_CHECK
 20219                                  	;pop	cx
 20220                                  	;jnb	short _WRITE_OK
 20221                                  	;call	WRITE_LOCK_VIOLATION
 20222                                  	;jnb	short DISKWRITE
 20223                                  	;retn
 20224                                  
 20225                                  	; MSDOS 6.0
 20226 00004464 E824FD                  	call	CHECK_WRITE_LOCK	;IFS. check write lock	;AN000;
 20227                                  	; 19/08/2018
 20228 00004467 7304                    	JNC	short _WRITE_OK		;IFS. lock check ok	;AN000;
 20229 00004469 C3                      	retn
 20230                                  
 20231                                  WRTEOFJ:
 20232 0000446A E99501                  	JMP     WRTEOF
 20233                                  
 20234                                  _WRITE_OK:
 20235                                   	; 27/07/2018
 20236                                  	; IBMDOS.COM - Offset 438Eh
 20237                                  	
 20238                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20239                                  	;and	word [es:di+5],0BFBFh
 20240 0000446D 26816505BFBF            	AND     word [ES:DI+SF_ENTRY.sf_flags],~(sf_close_nodate|devid_file_clean)
 20241                                  				; Mark file as dirty, clear no date on close
 20242                                  	; MSDOS 6.0
 20243                                  	;MOV	AX,[ES:DI+SF_ENTRY.sf_size]		;M039
 20244                                          ;MOV	[TEMP_VAR],AX                           ;M039
 20245                                  	;MOV	AX,[ES:DI+SF_ENTRY.sf_size+2]		;M039
 20246                                          ;MOV	[TEMP_VAR2],AX                          ;M039
 20247                                  
 20248                                  ;	TEMP_VAR2:TEMP_VAR = Current file size (sf_size);M039
 20249                                  
 20250                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20251 00004473 C42E[2405]              	LES     BP,[THISDPB]
 20252                                  
 20253 00004477 E840FE                  	call	BREAKDOWN
 20254                                  
 20255 0000447A A1[6005]                	MOV     AX,[BYTPOS]
 20256 0000447D 8B16[6205]              	MOV     DX,[BYTPOS+2]
 20257 00004481 E3E7                    	JCXZ    WRTEOFJ                 ;Make the file length = sf_position
 20258 00004483 01C8                    	ADD     AX,CX
 20259 00004485 83D200                  	ADC     DX,0                    ;DX:AX = last byte to write + 1.
 20260                                  
 20261                                  	;mov	bx,[es:bp+2]
 20262 00004488 268B5E02                	MOV     BX,[ES:BP+DPB.SECTOR_SIZE]
 20263                                  
 20264                                  	; MSDOS 6.0
 20265                                  	;CALL	DIV32                   ;DX:AX/BX = CX:AX + DX (rem.).
 20266                                  	;MOV	SI,AX
 20267                                          ;MOV	[HIGH_SECTOR],CX
 20268                                  
 20269                                  ;       [HIGH_SECTOR]:SI = Last full sector to write.
 20270                                  
 20271                                  	;OR	DX,DX
 20272                                  	;PUSH	DX			;M039: Free DX for use by SHR32
 20273                                  	;MOV	DX,CX			;M039
 20274                                  	;JNZ	short CALCLUS
 20275                                  	;SUB	AX,1                    ;AX must be zero base indexed	;AC000;
 20276                                  	;SBB	DX,0			;M039 ;F.C. >32mb		;AN000;
 20277                                  
 20278                                  	; MSDOS 3.3
 20279 0000448C 39DA                    	cmp	dx,bx
 20280 0000448E 7360                    	jnb	short WRTERR33
 20281 00004490 F7F3                    	div	bx
 20282 00004492 89C3                    	mov	bx,ax
 20283 00004494 09D2                    	OR	DX,DX
 20284 00004496 7501                    	JNZ	short CALCLUS
 20285 00004498 48                      	dec	ax
 20286                                  
 20287                                  CALCLUS:
 20288                                  	; MSDOS 3.3
 20289                                  	;mov	cl,[es:bp+5]
 20290 00004499 268A4E05                	MOV	CL,[ES:BP+DPB.CLUSTER_SHIFT]
 20291 0000449D D3E8                    	shr	ax,cl
 20292 0000449F 50                      	push	ax
 20293 000044A0 52                      	push	dx
 20294 000044A1 06                      	push	es
 20295 000044A2 C43E[3605]              	les	di,[THISSFT]
 20296                                  	;mov	ax,[es:di+11h]
 20297                                  	;mov	dx,[es:di+13h]
 20298 000044A6 268B4511                	mov	ax,[ES:DI+SF_ENTRY.sf_size]
 20299 000044AA 268B5513                	mov	dx,[ES:DI+SF_ENTRY.sf_size+2]
 20300 000044AE 07                      	pop	es
 20301                                  	;DX:AX = current file size (in bytes).
 20302                                  	;div	word [es:bp+2]
 20303 000044AF 26F77602                	div	word [ES:BP+DPB.SECTOR_SIZE]
 20304 000044B3 89C1                    	mov	cx,ax
 20305 000044B5 09D2                    	or	dx,dx
 20306 000044B7 7401                    	jz	short NORND
 20307 000044B9 40                      	inc	ax
 20308                                  
 20309                                  	; MSDOS 6.0
 20310                                  	;CALL	SHR32                   ;F.C. >32mb			;AN000;
 20311                                  	;POP	DX
 20312                                  
 20313                                  ;       AX = Last cluster to write.
 20314                                  ;       DX = # of bytes in last sector to write (the "tail").
 20315                                  ;       BX = ES:[BP.dpb_sector_size]
 20316                                  
 20317                                  	;PUSH	AX
 20318                                  	;PUSH	DX
 20319                                  ;M039
 20320                                  	;mov	dx,[TEMP_VAR2]
 20321                                  	;mov	ax,[TEMP_VAR]           ;DX:AX = current file size (in bytes).
 20322                                  	;call	DIV32           	;DX:AX/BX = CX:AX + DX (rem.)
 20323                                  	;mov	[TEMP_VAR2],cx
 20324                                  	;mov	[VALSEC+2],cx
 20325                                  	;mov	cx,ax
 20326                                  	;mov	bx,si
 20327                                  
 20328                                  ;       [HIGH_SECTOR]:BX = Last full sector to write.
 20329                                  ;          [VALSEC+2]:CX = Last full sector of current file.
 20330                                  ;         [TEMP_VAR2]:CX = Last full sector of current file.
 20331                                  ;                     DX = # of bytes in last sector of current file.
 20332                                  ;M039
 20333                                  	;OR	DX,DX
 20334                                  	;JZ	short NORND
 20335                                  	;ADD	AX,1            	;Round up if any remainder	;AC000;
 20336                                  	;ADC	word [VALSEC+2],0
 20337                                  NORND:	
 20338                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20339 000044BA A3[5C05]                	MOV     [VALSEC],AX
 20340                                  
 20341                                  ;       [VALSEC] = Last sector of current file.
 20342                                  
 20343 000044BD 31C0                    	XOR     AX,AX
 20344 000044BF A3[7005]                	MOV     [GROWCNT],AX
 20345 000044C2 A3[7205]                	MOV     [GROWCNT+2],AX
 20346 000044C5 58                      	POP     AX
 20347                                  
 20348                                  	; MSDOS 6.0
 20349                                  	;MOV	DI,[HIGH_SECTOR]        ;F.C. >32mb			;AN000;
 20350                                  	;CMP	DI,[TEMP_VAR2]		;M039; F.C. >32mb			;AN000;
 20351                                  	;JB	short NOGROW		;F.C. >32mb                             ;AN000;
 20352                                  	;JZ	short lowsec		;F.C. >32mb                             ;AN000;
 20353                                  	;SUB	BX,CX                   ;F.C. >32mb                             ;AN000;
 20354                                  	;SBB	DI,[TEMP_VAR2]   	;M039; F.C. >32mb di:bx no. of sectors	;AN000;
 20355                                  	;JMP	short yesgrow           ;F.C. >32mb                             ;AN000;
 20356                                  ;lowsec:
 20357                                  	;MOV	DI,0			;F.C. >32mb
 20358                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20359 000044C6 29CB                    	SUB	BX,CX			; Number of full sectors
 20360 000044C8 723D                    	JB	short NOGROW
 20361 000044CA 742E                    	JZ	short TESTTAIL
 20362                                  ;yesgrow:
 20363                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20364 000044CC 89D1                    	MOV     CX,DX
 20365 000044CE 93                      	XCHG    AX,BX
 20366                                  	;mul	word [es:bp+2]
 20367 000044CF 26F76602                	MUL	word [ES:BP+DPB.SECTOR_SIZE]  ; Bytes of full sector growth
 20368                                  	
 20369                                  	; MSDOS 6.0
 20370                                  	;MOV	[HIGH_SECTOR],DX         ;F.C. >32mb save dx                    ;AN000;
 20371                                  	;MOV	[TEMP_VAR2],AX    	 ;M039; F.C. >32mb save ax		;AN000;
 20372                                  	;MOV	AX,DI                    ;F.C. >32mb                            ;AN000;
 20373                                  	;;mul	word [es:bp+2]
 20374                                  	;MUL	word [ES:BP+DPB.SECTOR_SIZE] ;F.C. >32mb do higher word multiply ;AN000;
 20375                                  	
 20376                                  	;ADD	AX,[HIGH_SECTOR]         ;F.C. >32mb add lower value            ;AN000;
 20377                                  	;MOV	DX,AX                    ;F.C. >32mb DX:AX is the result of     ;AN000;
 20378                                  	;MOV	AX,[TEMP_VAR2]    	 ;M039; F.C. >32mb a 32 bit multiply	;AN000;
 20379                                  
 20380                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20381 000044D3 29C8                    	SUB     AX,CX           ; Take off current "tail"
 20382 000044D5 83DA00                  	SBB     DX,0            ; 32-bit extension
 20383 000044D8 01D8                    	ADD     AX,BX           ; Add on new "tail"
 20384 000044DA 83D200                  	ADC     DX,0            ; ripple tim's head off
 20385 000044DD EB21                    	JMP     SHORT SETGRW
 20386                                  
 20387                                  HAVSTART:
 20388                                  	;int 3
 20389 000044DF 89C1                    	MOV     CX,AX
 20390 000044E1 E8EE0D                  	call	SKPCLP
 20391                                  	;JCXZ	DOWRTJ
 20392 000044E4 E357                    	jcxz	DOWRT
 20393                                  
 20394 000044E6 E85D0F                  	call	ALLOCATE
 20395                                  	;JNC	short DOWRTJ
 20396 000044E9 7352                    	jnc	short DOWRT
 20397                                  
 20398                                  	;entry   WRTERR
 20399                                  WRTERR:
 20400 000044EB B40F                    	MOV     AH,0FH                          ;MS. write/data/fail/abort      ;AN000;
 20401                                  
 20402                                  	;entry WRTERR22
 20403                                  WRTERR22:
 20404 000044ED A0[1105]                	MOV     AL,[THISDRV]                    ;MS.                            ;AN000;
 20405                                  
 20406                                  	; 27/07/2018
 20407                                  WRTERR33:
 20408                                  	;MOV	CX,0                    	;No bytes transferred
 20409 000044F0 31C9                    	XOR     CX,CX
 20410                                  					
 20411 000044F2 C43E[3605]              	LES     DI,[THISSFT]
 20412                                  	;CLC	; 19/05/2019
 20413 000044F6 C3                      	retn
 20414                                  
 20415                                  ;DOWRTJ: 
 20416                                  ;	JMP     short DOWRT
 20417                                  
 20418                                  ACC_ERRWJ:
 20419                                  	; 10/08/2018
 20420                                  	;JMP	SET_ACC_ERRW
 20421 000044F7 E95BFE                  	jmp	SET_ACC_ERR_DS
 20422                                  
 20423                                  TESTTAIL:
 20424 000044FA 29D0                    	SUB     AX,DX
 20425 000044FC 7609                    	JBE	short NOGROW
 20426 000044FE 31D2                    	XOR     DX,DX
 20427                                  SETGRW:
 20428 00004500 A3[7005]                	MOV	[GROWCNT],AX
 20429 00004503 8916[7205]              	MOV	[GROWCNT+2],DX
 20430                                  NOGROW:
 20431 00004507 58                      	POP     AX
 20432 00004508 8B0E[5405]              	MOV     CX,[CLUSNUM]    ; First cluster accessed
 20433 0000450C E8A30D                  	call	FNDCLUS
 20434 0000450F 72E6                    	JC	short ACC_ERRWJ
 20435 00004511 891E[5405]              	MOV     [CLUSNUM],BX
 20436 00004515 8916[5205]              	MOV     [LASTPOS],DX
 20437                                  
 20438 00004519 29D0                    	SUB     AX,DX           ; Last cluster minus current cluster
 20439 0000451B 7420                    	JZ	short DOWRT	; If we have last clus, we must have first
 20440 0000451D E3C0                    	JCXZ    HAVSTART        ; See if no more data
 20441 0000451F 51                      	PUSH    CX              ; No. of clusters short of first
 20442 00004520 89C1                    	MOV     CX,AX
 20443 00004522 E8210F                  	call	ALLOCATE
 20444 00004525 59                      	POP     CX
 20445 00004526 72C3                    	JC	short WRTERR
 20446 00004528 8B16[5205]              	MOV     DX,[LASTPOS]
 20447 0000452C 42                      	INC     DX
 20448 0000452D 49                      	DEC     CX
 20449 0000452E 7405                    	JZ	short NOSKIP
 20450 00004530 E89F0D                  	call	SKPCLP
 20451 00004533 72C2                    	JC	short ACC_ERRWJ
 20452                                  NOSKIP:
 20453 00004535 891E[5405]              	MOV     [CLUSNUM],BX
 20454 00004539 8916[5205]              	MOV     [LASTPOS],DX
 20455                                  DOWRT:
 20456 0000453D 833E[6405]00            	CMP     word [BYTCNT1],0
 20457 00004542 7409                    	JZ	short WRTMID
 20458 00004544 8B1E[5405]              	MOV     BX,[CLUSNUM]
 20459 00004548 E8140E                  	call	BUFWRT
 20460 0000454B 72AA                    	JC	short ACC_ERRWJ
 20461                                  	;JC	short SET_ACC_ERRW
 20462                                  WRTMID:
 20463 0000454D A1[6805]                	MOV     AX,[SECCNT]
 20464 00004550 09C0                    	OR      AX,AX
 20465 00004552 7471                    	JZ	short WRTLAST		;M039
 20466 00004554 0106[5A05]              	ADD     [SECPOS],AX
 20467                                  	; MSDOS 6.0
 20468                                  	;ADC	WORD [SECPOS+2],0	;F.C. >32mb 	;AN000;
 20469 00004558 E8490E                  	call	NEXTSEC
 20470 0000455B 729A                    	JC	short ACC_ERRWJ
 20471                                  	;JC	short SET_ACC_ERRW	;M039
 20472 0000455D C606[0F05]01            	MOV     BYTE [TRANS],1		; A transfer is taking place
 20473 00004562 8A16[0E05]              	MOV     DL,[SECCLUSPOS] 	; (dx/DL = Extent start) ((dh = ?))
 20474 00004566 8B1E[5405]              	MOV     BX,[CLUSNUM]
 20475 0000456A 8B0E[6805]              	MOV     CX,[SECCNT]
 20476                                  WRTLP:
 20477 0000456E E8640E                  	call	OPTIMIZE
 20478 00004571 7284                    	JC	short ACC_ERRWJ
 20479                                  	;JC	short SET_ACC_ERRW
 20480                                  
 20481                                  ;M039
 20482                                  ;       DI = Next physical cluster.
 20483                                  ;       AX = # sectors remaining.
 20484                                  ;       [DMAADD+2]:BX = transfer address (source data address).
 20485                                  ;       CX = # of contiguous sectors to write. (These constitute a block of
 20486                                  ;	     sectors, also termed an "Extent".)
 20487                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
 20488                                  ;       ES:BP -> Drive Parameter Block (DPB).
 20489                                  ;
 20490                                  ;       Purge the Buffer Queue and the Secondary Cache of any buffers which
 20491                                  ;	are in Extent; they are being over-written.
 20492                                  
 20493 00004573 57                      	push    di
 20494 00004574 50                      	push    ax
 20495                                  
 20496                                          ; MSDOS 6.0
 20497                                  	;call	DskWrtBufPurge          ;DS trashed.
 20498                                  ;ASSUME DS:NOTHING
 20499                                  ;M039
 20500                                  	; MSDOS 3.3
 20501                                  	; IBMDOS.COM (1987) - Offset 4497h
 20502 00004575 52                      	push	dx
 20503 00004576 53                      	push	bx
 20504 00004577 268A4600                	mov	al,[es:bp]
 20505                                  	;mov	AL,[ES:BP+DPB.DRIVE] ; mov al,[es:bp+0]
 20506 0000457B 89CB                    	mov	bx,cx
 20507 0000457D 01D3                    	add	bx,dx	; (bx = Extent end)
 20508                                  
 20509                                  ;	DX = Extent start.
 20510                                  ;	BX = Extent end.
 20511                                  ;	 AL = Drive #.
 20512                                  
 20513 0000457F E82318                  	call	SETVISIT
 20514                                  
 20515                                  wbufq1:
 20516                                  	;or	byte [di+5],20h
 20517 00004582 804D0520                	or	byte [DI+BUFFINFO.buf_flags],buf_visit ; Bit 5 = reserved
 20518                                  	;cmp	al,[di+4]	
 20519 00004586 3A4504                  	cmp	al,[DI+BUFFINFO.buf_ID]
 20520 00004589 7512                    	jnz	short wbufq2	; Jump if Extent start > buffer sector.
 20521                                  	;cmp	[di+6],dx
 20522 0000458B 395506                  	cmp	[DI+BUFFINFO.buf_sector],dx
 20523 0000458E 720D                    	jb	short wbufq2
 20524                                  	;cmp	[di+6],bx
 20525 00004590 395D06                  	cmp	[DI+BUFFINFO.buf_sector],bx
 20526 00004593 7308                    	jnb	short wbufq2	; Jump if Extent end >= buffer sector.
 20527                                  
 20528                                  	; Buffer sector is in the Extent
 20529                                  
 20530                                  	;mov	word [di+4],20FFh
 20531 00004595 C74504FF20              	mov	word [DI+BUFFINFO.buf_ID],20FFh
 20532                                  					; .buf_ID,    AL = FFh (Free buffer)
 20533                                  					; .buf_flags, AH = 0, reset/clear
 20534 0000459A E83518                  	call	SCANPLACE
 20535                                  wbufq2:
 20536 0000459D E81E18                  	call	SKIPVISIT
 20537 000045A0 75E0                    	jnz	short wbufq1
 20538 000045A2 5B                      	pop	bx
 20539 000045A3 5A                      	pop	dx
 20540                                  	
 20541                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20542                                  ;hkn; SS override for DMAADD and ALLOWED
 20543 000045A4 368E1E[DC02]            	MOV     DS,[SS:DMAADD+2]
 20544                                  	;mov	byte [ss:ALLOWED],38h
 20545 000045A9 36C606[F702]38          	MOV	byte [SS:ALLOWED],Allowed_RETRY+Allowed_FAIL+Allowed_IGNORE
 20546                                  
 20547                                  ;	put logic from DWRITE in-line here so we can modify it
 20548                                  ;	for DISK FULL conditions.
 20549                                  
 20550                                  DWRITE_LUP:
 20551                                  	; MSDOS 6.0
 20552                                  	;call	DSKWRITE
 20553                                  	;jz	short DWRITE_OKAY
 20554                                  
 20555                                  ;;	int	3
 20556                                  	;cmp	al,error_handle_Disk_Full	; compressed volume full?
 20557                                  	;jz	short DWRITE_DISK_FULL
 20558                                  
 20559                                  ;;hkn; SS override
 20560                                  	;MOV	BYTE [SS:READOP],1
 20561                                  	;call	HARDERRRW
 20562                                  	;CMP	AL,1		; Check for retry
 20563                                  	;JZ	short DWRITE_LUP
 20564                                  	;CMP	AL,3		; Check for FAIL
 20565                                  	;CLC
 20566                                  	;JNZ	short DWRITE_OKAY ; Ignore
 20567                                  	;STC
 20568                                  
 20569                                  	; MSDOS 3.3
 20570 000045AF E81DFC                  	call	DWRITE
 20571                                  
 20572                                  DWRITE_OKAY:
 20573                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20574                                  
 20575 000045B2 59                      	POP     CX
 20576 000045B3 5B                      	POP     BX
 20577                                  
 20578                                  ;       CX = # sectors remaining.
 20579                                  ;       BX = Next physical cluster.
 20580                                  
 20581                                  ;hkn; SS override
 20582                                          ;Context DS
 20583 000045B4 16                      	push	ss
 20584 000045B5 1F                      	pop	ds
 20585                                  
 20586 000045B6 720A                    	JC      SET_ACC_ERRW
 20587 000045B8 E30B                    	JCXZ    WRTLAST
 20588 000045BA B200                    	MOV     DL,0
 20589 000045BC FF06[5205]              	INC     word [LASTPOS]	; We'll be using next cluster
 20590 000045C0 EBAC                    	JMP     short WRTLP
 20591                                  
 20592                                  	; 09/08/2018
 20593                                  	; MSDOS 6.0
 20594                                  ;DWRITE_DISK_FULL:
 20595                                  	;;Context DS		;SQ 3-5-93 DS must be setup on return!
 20596                                  	;push	ss
 20597                                  	;pop	ds
 20598                                  	;pop	cx		; unjunk stack
 20599                                  	;pop	bx
 20600                                  	;mov	byte [DISK_FULL],1
 20601                                  	;stc
 20602                                  	;jmp	short WRTERR	; go to disk full exit
 20603                                  
 20604                                  SET_ACC_ERRW:
 20605 000045C2 E990FD                  	jmp	SET_ACC_ERR_DS
 20606                                  
 20607                                  WRTLAST:
 20608 000045C5 A1[6605]                	MOV     AX,[BYTCNT2]
 20609 000045C8 09C0                    	OR      AX,AX
 20610 000045CA 7413                    	JZ	short FINWRT
 20611 000045CC A3[6405]                	MOV     [BYTCNT1],AX
 20612 000045CF E8D20D                  	call	NEXTSEC
 20613 000045D2 72EE                    	JC	short SET_ACC_ERRW
 20614 000045D4 C706[5E05]0000          	MOV     word [BYTSECPOS],0
 20615 000045DA E8820D                  	call	BUFWRT
 20616 000045DD 72E3                    	JC	short SET_ACC_ERRW
 20617                                  FINWRT:
 20618 000045DF C43E[3605]              	LES     DI,[THISSFT]
 20619 000045E3 A1[7005]                	MOV     AX,[GROWCNT]
 20620 000045E6 8B0E[7205]              	MOV     CX,[GROWCNT+2]
 20621 000045EA 09C0                    	OR      AX,AX
 20622 000045EC 7502                    	JNZ	short UPDATE_size
 20623 000045EE E30F                    	JCXZ    SAMSIZ
 20624                                  UPDATE_size:
 20625                                  	;add	[es:di+11h],ax
 20626 000045F0 26014511                	ADD     [ES:DI+SF_ENTRY.sf_size],AX
 20627                                  	;adc	[es:di+13h],cx
 20628 000045F4 26114D13                	ADC     [ES:DI+SF_ENTRY.sf_size+2],CX
 20629                                  ;
 20630                                  ; Make sure that all other SFT's see this growth also.
 20631                                  ;
 20632 000045F8 B80100                  	MOV     AX,1
 20633                                  ;if installed
 20634                                  	;Call	JShare + 14 * 4
 20635 000045FB FF1E[9400]              	call    far [JShare+(14*4)]	; 14 = ShSU
 20636                                  ;else
 20637                                  ;	Call    ShSU
 20638                                  ;endif
 20639                                  
 20640                                  SAMSIZ:
 20641 000045FF E937FE                  	jmp	SETCLUS	; ES:DI already points to SFT
 20642                                  
 20643                                  WRTEOF:
 20644 00004602 89C1                    	MOV     CX,AX
 20645 00004604 09D1                    	OR      CX,DX
 20646 00004606 7464                    	JZ	short KILLFIL
 20647 00004608 83E801                  	SUB     AX,1
 20648 0000460B 83DA00                  	SBB     DX,0
 20649                                  
 20650                                  	; MSDOS 3.3
 20651                                  	;div	word [es:bp+2]
 20652 0000460E 26F77602                	div	word [ES:BP+DPB.SECTOR_SIZE]
 20653                                  	;mov	cl,[es:bp+5]
 20654 00004612 268A4E05                	mov	cl,[ES:BP+DPB.CLUSTER_SHIFT] 
 20655 00004616 D3E8                    	shr     ax,cl
 20656                                  
 20657                                  	; MSDOS 6.0
 20658                                  	;PUSH	BX
 20659                                  	;MOV	BX,[ES:BP+DPB.SECTOR_SIZE]    ;F.C. >32mb                       ;AN000;
 20660                                  	;CALL	DIV32                         ;F.C. >32mb                       ;AN000;
 20661                                  	;POP	BX			      ;F.C. >32mb			;AN000;
 20662                                  	;MOV	DX,CX			      ;M039
 20663                                          ;MOV	[HIGH_SECTOR],CX              ;M039: Probably extraneous, but not sure.
 20664                                  	;CALL	SHR32                         ;F.C. >32mb                       ;AN000;
 20665                                  
 20666 00004618 89C1                    	MOV     CX,AX
 20667 0000461A E8950C                  	call	FNDCLUS
 20668                                  SET_ACC_ERRWJ2:
 20669 0000461D 72A3                    	JC	short SET_ACC_ERRW
 20670                                  
 20671 0000461F E326                    	JCXZ    RELFILE
 20672 00004621 E8220E                  	call	ALLOCATE
 20673 00004624 721E                    	JC	short WRTERRJ              ;;;;;;;;; disk full
 20674                                  
 20675                                  UPDATE:
 20676 00004626 C43E[3605]              	LES	DI,[THISSFT]
 20677 0000462A A1[6005]                	MOV	AX,[BYTPOS]
 20678                                  	;mov	[es:di+11h],ax
 20679 0000462D 26894511                	MOV	[ES:DI+SF_ENTRY.sf_size],AX
 20680 00004631 A1[6205]                	MOV	AX,[BYTPOS+2]
 20681                                  	;mov	[es:di+13h],ax
 20682 00004634 26894513                	MOV	[ES:DI+SF_ENTRY.sf_size+2],AX
 20683                                  ;
 20684                                  ; Make sure that all other SFT's see this growth also.
 20685                                  ;
 20686 00004638 B80200                  	MOV     AX,2
 20687                                  ;if installed
 20688                                  	;Call	JShare + 14 * 4
 20689 0000463B FF1E[9400]              	call    far [JShare+(14*4)]	; 14 = ShSU
 20690                                  ;else
 20691                                  ;	Call    ShSU
 20692                                  ;endif
 20693 0000463F 31C9                    	XOR     CX,CX
 20694 00004641 E913FE                  	jmp	ADDREC
 20695                                  
 20696                                  WRTERRJ: 
 20697 00004644 E9A4FE                  	JMP     WRTERR
 20698                                  
 20699                                  ;;;;;;;;;;;;;;;; 7/18/86
 20700                                  ;;;;;;;;;;;;;;;;
 20701                                  
 20702                                  RELFILE:
 20703                                  	; MSDOS 6.0
 20704 00004647 06                      	PUSH    ES                    ;AN002; BL Reset Lstclus and cluspos to
 20705 00004648 C43E[3605]              	LES     DI,[THISSFT]          ;AN002; BL beginning of file if current
 20706 0000464C 263B5519                	CMP     DX,[ES:DI+SF_ENTRY.sf_cluspos]	;AN002; BL cluspos is past EOF.
 20707 00004650 730E                    	JAE	short SKIPRESET	      		;AN002; BL
 20708 00004652 26C745190000            	MOV     word [ES:DI+SF_ENTRY.sf_cluspos],0 ;AN002; BL
 20709 00004658 268B550B                	MOV     DX,[ES:DI+SF_ENTRY.sf_firclus]	;AN002; BL
 20710 0000465C 2689551B                	MOV     [ES:DI+SF_ENTRY.sf_lstclus],DX	;AN002; BL
 20711                                  SKIPRESET:                            		;AN002; BL
 20712 00004660 07                      	POP     ES                    		;AN002; BL
 20713                                  ;
 20714 00004661 BAFFFF                  	MOV     DX,0FFFFH
 20715 00004664 E8880E                  	call	RELBLKS
 20716 00004667 73BD                    	jnc	short UPDATE
 20717                                  SET_ACC_ERRWJJ:
 20718                                  	;JC	short SET_ACC_ERRWJ2
 20719                                  	;JMP	SHORT UPDATE
 20720 00004669 E9E9FC                  	jmp	SET_ACC_ERR_DS
 20721                                  
 20722                                  KILLFIL:
 20723 0000466C 31DB                    	XOR     BX,BX
 20724 0000466E 06                      	PUSH    ES
 20725 0000466F C43E[3605]              	LES     DI,[THISSFT]
 20726 00004673 26895D19                	mov	[es:di+19h],bx
 20727 00004677 26895D19                	MOV	[ES:DI+SF_ENTRY.sf_cluspos],BX
 20728                                  	;mov	[es:di+1Bh],bx
 20729 0000467B 26895D1B                	MOV	[ES:DI+SF_ENTRY.sf_lstclus],BX
 20730                                  	;xchg	bx,[es:di+0Bh]
 20731 0000467F 26875D0B                	XCHG    BX,[ES:DI+SF_ENTRY.sf_firclus]
 20732 00004683 07                      	POP	ES
 20733                                  
 20734 00004684 09DB                    	OR	BX,BX
 20735                                  	;JZ	short UPDATEJ
 20736 00004686 749E                    	jz	short UPDATE
 20737                                  ;; 10/23/86 FastOpen update
 20738 00004688 06                      	PUSH	ES              ; since first cluster # is 0
 20739 00004689 55                      	PUSH	BP              ; we must delete the old cache entry
 20740 0000468A 50                      	PUSH	AX
 20741 0000468B 51                      	PUSH	CX
 20742 0000468C 52                      	PUSH	DX
 20743 0000468D C42E[2405]              	LES	BP,[THISDPB]             ; get current DPB
 20744 00004691 268A5600                	mov	dl,[ES:BP] ; mov al,[es:bp+0]
 20745                                  	;MOV	DL,[ES:BP+DPB.DRIVE]	; get current drive
 20746 00004695 89D9                    	MOV	CX,BX                    ; first cluster #
 20747 00004697 B402                    	MOV	AH,2                     ; delete cache entry by drive:firclus
 20748 00004699 E877ED                  	call	FastOpen_Update          ; call fastopen
 20749 0000469C 5A                      	POP	DX
 20750 0000469D 59                      	POP	CX
 20751 0000469E 58                      	POP	AX
 20752 0000469F 5D                      	POP	BP
 20753 000046A0 07                      	POP	ES
 20754                                  ;; 10/23/86 FastOpen update
 20755                                  
 20756 000046A1 E8490E                  	call	RELEASE
 20757 000046A4 72C3                    	JC	short SET_ACC_ERRWJJ
 20758                                  UpDateJ:
 20759 000046A6 E97DFF                  	JMP	UPDATE ; 10/08/2018
 20760                                  
 20761                                  ;Break   <DskWrtBufPurge -- Disk Write Buffer Purge>
 20762                                  ;----------------------------------------------------------------------------
 20763                                  ;
 20764                                  ; Procedure Name : DskWrtBufPurge
 20765                                  ;
 20766                                  ; Inputs:
 20767                                  ;       CX = # of contiguous sectors to write. (These constitute a block of
 20768                                  ;	     sectors, also termed an "Extent".)
 20769                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
 20770                                  ;       ES:BP -> Drive Parameter Block (DPB).
 20771                                  ;
 20772                                  ; Function:
 20773                                  ;       Purge the Buffer Queue and the Secondary Cache of any buffers which
 20774                                  ;	are in Extent; they are being over-written.
 20775                                  ;
 20776                                  ; Outputs:
 20777                                  ;       (Same as Input.)
 20778                                  ; Uses:
 20779                                  ;       All registers except DS,AX,SI,DI preserved.
 20780                                  ;       SS override for all global variables.
 20781                                  ;----------------------------------------------------------------------------
 20782                                  ;M039: Created
 20783                                  
 20784                                  ;procedure   DskWrtBufPurge,NEAR
 20785                                  ;
 20786                                  ;ASSUME  DS:NOTHING
 20787                                  ;
 20788                                  ;       SaveReg <bx,cx>
 20789                                  ;       mov	bx,[HIGH_SECTOR]	;BX:DX = Extent start (sector #).
 20790                                  ;       mov     si,bx
 20791                                  ;       add     cx,dx
 20792                                  ;       adc     si,0                    ;SI:CX = Extent end + 1.
 20793                                  ;
 20794                                  ;	Assert  ISDPB,<ES,BP>,"DskWrtBufPurge"
 20795                                  ;	mov     al,es:[bp.dpb_drive]
 20796                                  ;
 20797                                  ;;      BX:DX = Extent start.
 20798                                  ;;      SI:CX = Extent end + 1.
 20799                                  ;;      AL = Drive #
 20800                                  ;
 20801                                  ;	cmp     [SC_CACHE_COUNT],0      ;Secondary cache in-use?
 20802                                  ;	je      nosc                    ; -no, jump.
 20803                                  ;
 20804                                  ;;      If any of the sectors to be written are in the secondary cache (SC),
 20805                                  ;;      invalidate the entire SC. (This is an optimization; we really only
 20806                                  ;;	need to invalidate those sectors which intersect, but that's slower.)
 20807                                  ;
 20808                                  ;       cmp     al,[CURSC_DRIVE]        ;Same drive?
 20809                                  ;       jne     nosc                    ; -no, jump.
 20810                                  ;
 20811                                  ;       push    ax
 20812                                  ;       mov     ax,[CURSC_SECTOR]
 20813                                  ;       mov     di,[CURSC_SECTOR+2]     ;DI:AX = SC start.
 20814                                  ;       Cmp32   si,cx,di,ax             ;Extent end < SC start?
 20815                                  ;       jbe     sc5                     ; -yes, jump.
 20816                                  ;       add     ax,[SC_CACHE_COUNT]
 20817                                  ;       adc     di,0                    ;DI:AX = SC end + 1.
 20818                                  ;       Cmp32   bx,dx,di,ax             ;Extent start > SC end?
 20819                                  ;       jae     sc5                     ; -yes, jump.
 20820                                  ;       mov     [SC_STATUS],0           ;Extent intersects SC: invalidate SC.
 20821                                  ;sc5:	pop     ax
 20822                                  ;
 20823                                  ;;	Free any buffered sectors which are in Extent; they are being over-
 20824                                  ;;	written.
 20825                                  ;
 20826                                  ;nosc:	invoke  GETCURHEAD              ;DS:DI -> first buffer in queue.
 20827                                  ;
 20828                                  ;bufq:	cmp     al,BYTE PTR [di.buf_ID] ;Same drive?
 20829                                  ;	jne     bufq5                   ; -no, jump.
 20830                                  ;
 20831                                  ;       Cmp32   bx,dx,<WORD PTR [di.buf_sector+2]>,<WORD PTR [di.buf_sector]>
 20832                                  ;       ja	bufq5			;Jump if Extent start > buffer sector.
 20833                                  ;       Cmp32   si,cx,<WORD PTR [di.buf_sector+2]>,<WORD PTR [di.buf_sector]>
 20834                                  ;       jbe	bufq5                   ;Jump if Extent end < buffer sector.
 20835                                  ;
 20836                                  ;;      Buffer's sector is in Extent, so free it; it is being over-written.
 20837                                  ;
 20838                                  ;       testb   [di.buf_flags],buf_dirty ;Buffer dirty?
 20839                                  ;       jz      bufq2                    ; -no, jump.
 20840                                  ;       invoke  DEC_DIRTY_COUNT          ; -yes, decrement dirty count.
 20841                                  ;bufq2: mov     WORD PTR [di.buf_ID],((buf_visit SHL 8) OR 0FFh)
 20842                                  ;
 20843                                  ;       invoke  SCANPLACE
 20844                                  ;       jmp     short bufq6
 20845                                  ;
 20846                                  ;bufq5: mov     di,[di.buf_next]
 20847                                  ;bufq6: cmp     di,[FIRST_BUFF_ADDR]    ;Scanned entire buffer queue?
 20848                                  ;       jne     bufq	                ; --no, go do next buffer.
 20849                                  ;
 20850                                  ;       RestoreReg <cx,bx>
 20851                                  ;       return
 20852                                  ;
 20853                                  ;EndProc DskWrtBufPurge
 20854                                  
 20855                                  
 20856                                  ;Break   <DIV32 -- PERFORM 32 BIT DIVIDE>
 20857                                  ;----------------------------------------------------------------------------
 20858                                  ;
 20859                                  ; Procedure Name : DIV32
 20860                                  ;
 20861                                  ; Inputs:
 20862                                  ;       DX:AX = 32 bit dividend   BX= divisor
 20863                                  ; Function:
 20864                                  ;       Perform 32 bit division:  DX:AX/BX = CX:AX + DX (rem.)
 20865                                  ; Outputs:
 20866                                  ;       CX:AX = quotient , DX= remainder
 20867                                  ; Uses:
 20868                                  ;       All registers except AX,CX,DX preserved.
 20869                                  ;----------------------------------------------------------------------------
 20870                                  ;M039: DIV32 optimized for divisor of 512 (common sector size).
 20871                                  
 20872                                  ;DIV32:
 20873                                  ;
 20874                                  ;       cmp     bx,512
 20875                                  ;       jne    	short div5
 20876                                  ;
 20877                                  ;	mov     cx,dx
 20878                                  ;       mov     dx,ax           ; CX:AX = Dividend
 20879                                  ;       and     dx,(512-1)      ; DX = Remainder
 20880                                  ;       mov     al,ah
 20881                                  ;       mov     ah,cl
 20882                                  ;       mov     cl,ch
 20883                                  ;       xor     ch,ch
 20884                                  ;       shr     cx,1
 20885                                  ;       rcr     ax,1
 20886                                  ;       retn
 20887                                  ;
 20888                                  ;div5:	mov     cx,ax
 20889                                  ;       mov     ax,dx
 20890                                  ;       xor     dx,dx
 20891                                  ;       div     bx              ; 0:AX/BX
 20892                                  ;       xchg    cx,ax
 20893                                  ;       div     bx              ; DX:AX/BX
 20894                                  ;       retn
 20895                                  
 20896                                  ;Break   <SHR32 -- PERFORM 32 BIT SHIFT RIGHT>
 20897                                  ;----------------------------------------------------------------------------
 20898                                  ;
 20899                                  ; Procedure Name : SHR32
 20900                                  ;
 20901                                  ; Inputs:
 20902                                  ;	DX:AX = 32 bit sector number
 20903                                  ; Function:
 20904                                  ;       Perform 32 bit shift right
 20905                                  ; Outputs:
 20906                                  ;	AX = cluster number
 20907                                  ;	ZF = 1 if no error
 20908                                  ;	   = 0 if error (cluster number > 64k)
 20909                                  ; Uses:
 20910                                  ;       DX,CX
 20911                                  ;---------------------------------------------------------------------------
 20912                                  ; M017	- SHR32 rewritten for better performance
 20913                                  ; M039	- Additional optimization
 20914                                  
 20915                                  ;SHR32:
 20916                                  ;
 20917                                  ;	mov     cl,[ES:BP+DPB.CLUSTER_SHIFT]
 20918                                  ;	xor	ch,ch	    ;ZF=1
 20919                                  ;	jcxz	norota
 20920                                  ;
 20921                                  ;rotashft2:
 20922                                  ;	shr	dx,1	    ;ZF reflects state of DX.
 20923                                  ;	rcr	ax,1	    ;ZF not affected.
 20924                                  ;	loop	rotashft2
 20925                                  ;
 20926                                  ;norota:
 20927                                  ;	retn
 20928                                  
 20929                                  ;============================================================================
 20930                                  ; DIR.ASM, MSDOS 6.0, 1991
 20931                                  ;============================================================================
 20932                                  ; 27/07/2018 - Retro DOS v3.0 
 20933                                  
 20934                                  ;	TITLE	DIR - Directory and path cracking
 20935                                  ;	NAME	Dir
 20936                                  
 20937                                  ;Break	<FINDENTRY -- LOOK FOR AN ENTRY>
 20938                                  ;---------------------------------------------------------------------------
 20939                                  ;
 20940                                  ; Procedure Name : FINDENTRY,SEARCH
 20941                                  ;
 20942                                  ; Inputs:
 20943                                  ;	[THISDPB] set
 20944                                  ;	[SECCLUSPOS] = 0
 20945                                  ;	[DIRSEC] = Starting directory sector number
 20946                                  ;	[CLUSNUM] = Next cluster of directory
 20947                                  ;	[CLUSFAC] = Sectors/Cluster
 20948                                  ;	[NAME1] = Name to look for
 20949                                  ; Function:
 20950                                  ;	Find file name in disk directory.
 20951                                  ;	"?" matches any character.
 20952                                  ; Outputs:
 20953                                  ;	Carry set if name not found
 20954                                  ;	ELSE
 20955                                  ;	Zero set if attributes match (always except when creating)
 20956                                  ;	AH = Device ID (bit 7 set if not disk)
 20957                                  ;	[THISDPB] = Base of drive parameters
 20958                                  ;	DS = DOSGROUP
 20959                                  ;	ES = DOSGROUP
 20960                                  ;	[CURBUF+2]:BX = Pointer into directory buffer
 20961                                  ;	[CURBUF+2]:SI = Pointer to First Cluster field in directory entry
 20962                                  ;	[CURBUF] has directory record with match
 20963                                  ;	[NAME1] has file name
 20964                                  ;	[LASTENT] is entry number of the entry
 20965                                  ; All other registers destroyed.
 20966                                  ;----------------------------------------------------------------------------
 20967                                  
 20968                                  ;hkn; called from rename.asm and dir2.asm. DS must be already set up at
 20969                                  ;hkn; this point.
 20970                                  
 20971                                  SEARCH:
 20972                                  	; 27/07/2018 - Retro DOS v3.0
 20973                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 45B3h 
 20974                                  	; 15/03/2018 - Retro DOS v2.0
 20975                                  
 20976                                  	;entry	FindEntry
 20977                                  FINDENTRY:
 20978 000046A9 E81704                  	call	STARTSRCH
 20979 000046AC A0[0605]                	MOV	AL,[ATTRIB]
 20980                                  	;and	al,9Eh
 20981 000046AF 24DE                    	AND	AL,~attr_ignore		; Ignore useless bits
 20982                                  	;cmp	al,8
 20983 000046B1 3C08                    	CMP	AL,attr_volume_id	; Looking for vol ID only ?
 20984 000046B3 7503                    	JNZ	short NOTVOLSRCH	; No
 20985 000046B5 E86201                  	CALL	SETROOTSRCH		; Yes force search of root
 20986                                  NOTVOLSRCH:
 20987 000046B8 E8F800                  	CALL	GETENTRY
 20988 000046BB 7303                    	JNC	short SRCH
 20989 000046BD E99500                  	JMP	SETESRET
 20990                                  
 20991                                  	;entry	Srch
 20992                                  SRCH:
 20993 000046C0 1E                      	PUSH	DS
 20994 000046C1 8E1E[7605]              	MOV	DS,[CURBUF+2]
 20995                                  
 20996                                  ;	(DS:BX) = directory entry address
 20997                                  
 20998 000046C5 8A27                    	mov	ah,[BX]
 20999                                  	;MOV	AH,[BX+dir_entry.dir_name] ; mov ah,[bx+0]
 21000 000046C7 08E4                    	OR	AH,AH			; End of directory?
 21001 000046C9 743A                    	JZ	short FREE
 21002                                  
 21003                                  ;hkn; SS override
 21004 000046CB 363A26[1905]            	CMP	AH,[SS:DELALL]		; Free entry?
 21005 000046D0 7433                    	JZ	short FREE
 21006                                  	;test	byte [bx+0Bh],8
 21007 000046D2 F6470B08                	TEST	byte [BX+dir_entry.dir_attr],attr_volume_id
 21008                                  					; Volume ID file?
 21009 000046D6 7405                    	JZ	short CHKFNAM 		; NO
 21010                                  
 21011                                  ;hkn; SS override
 21012 000046D8 36FE06[1605]            	INC	BYTE [SS:VOLID]
 21013                                  CHKFNAM:
 21014                                  ;	Context ES
 21015 000046DD 8CD6                    	MOV	SI,SS
 21016 000046DF 8EC6                    	MOV	ES,SI
 21017 000046E1 89DE                    	MOV	SI,BX
 21018                                  
 21019                                  ;hkn; NAME1 is in DOSDATA
 21020 000046E3 BF[E604]                	MOV	DI,NAME1
 21021                                  ;;;;; 7/29/86
 21022                                  
 21023                                  ;hkn; SS override for NAME1
 21024 000046E6 36803E[E604]E5          	CMP	BYTE [SS:NAME1],0E5H	; special char check
 21025 000046EC 7506                    	JNZ	short NO_E5
 21026 000046EE 36C606[E604]05          	MOV	BYTE [SS:NAME1],05H
 21027                                  NO_E5:
 21028                                  ;;;;; 7/29/86
 21029 000046F4 E86100                  	CALL	MetaCompare
 21030 000046F7 7428                    	JZ	short FOUND
 21031 000046F9 1F                      	POP	DS
 21032                                  
 21033                                  	;entry	NEXTENT
 21034                                  NEXTENT:
 21035 000046FA C42E[2405]              	LES	BP,[THISDPB]
 21036 000046FE E86600                  	CALL	NEXTENTRY
 21037 00004701 73BD                    	JNC	short SRCH
 21038 00004703 EB50                    	JMP	SHORT SETESRET
 21039                                  
 21040                                  FREE:
 21041 00004705 1F                      	POP	DS
 21042 00004706 8B0E[F402]              	MOV	CX,[LASTENT]
 21043 0000470A 3B0E[6A05]              	CMP	CX,[ENTFREE]
 21044 0000470E 7304                    	JAE	short TSTALL
 21045 00004710 890E[6A05]              	MOV	[ENTFREE],CX
 21046                                  TSTALL:
 21047 00004714 3A26[1905]              	CMP	AH,[DELALL]		; At end of directory?
 21048                                  NEXTENTJ:
 21049 00004718 74E0                    	je	short NEXTENT 		; No - continue search
 21050 0000471A 890E[6C05]              	MOV	[ENTLAST],CX
 21051 0000471E F9                      	STC
 21052 0000471F EB34                    	JMP	SHORT SETESRET
 21053                                  
 21054                                  FOUND:
 21055                                  ;
 21056                                  ; We have a file with a matching name.	We must now consider the attributes:
 21057                                  ; ATTRIB	Action
 21058                                  ; ------	------
 21059                                  ; Volume_ID	Is Volume_ID in test?
 21060                                  ; Otherwise	If no create then Is ATTRIB+extra superset of test?
 21061                                  ;		If create then Is ATTRIB equal to test?
 21062                                  ;
 21063 00004721 8A2C                    	MOV	CH,[SI] 		; Attributes of file
 21064 00004723 1F                      	POP	DS
 21065 00004724 8A26[0605]              	MOV	AH,[ATTRIB]		; Attributes of search
 21066                                  	;and	ah,9Eh
 21067 00004728 80E4DE                  	AND	AH,~attr_ignore
 21068                                  	;lea	si,[si+15]
 21069 0000472B 8D740F                  	LEA	SI,[SI+dir_entry.dir_first-dir_entry.dir_attr]
 21070                                  					; point to first cluster field
 21071                                  	;test	ch,8
 21072 0000472E F6C508                  	TEST	CH,attr_volume_id	; Volume ID file?
 21073 00004731 7409                    	JZ	short check_one_volume_id ; Nope check other attributes
 21074                                  	;test	ah,8
 21075 00004733 F6C408                  	TEST	AH,attr_volume_id	; Can we find Volume ID?
 21076                                  	;JZ	short NEXTENTJ		; Nope, (not even $FCB_CREATE)
 21077 00004736 74C2                    	jz	short NEXTENT ; 19/05/2019
 21078 00004738 30E4                    	XOR	AH,AH			; Set zero flag for $FCB_CREATE
 21079 0000473A EB11                    	JMP	SHORT RETFF		; Found Volume ID
 21080                                  check_one_volume_id:
 21081                                  	;CMP	ah,8
 21082 0000473C 80FC08                  	CMP	AH,attr_volume_id	; Looking only for Volume ID?
 21083                                  	;JZ	short NEXTENTJ		; Yes, continue search
 21084 0000473F 74B9                    	je	short NEXTENT ; 19/05/2019
 21085 00004741 E89303                  	CALL	MatchAttributes
 21086 00004744 7407                    	JZ	SHORT RETFF
 21087 00004746 F606[1805]FF            	TEST	BYTE [CREATING],-1	; Pass back mismatch if creating
 21088                                  	;JZ	short NEXTENTJ		; Otherwise continue searching
 21089 0000474B 74AD                    	jz	short NEXTENT ; 19/05/2019
 21090                                  RETFF:
 21091 0000474D C42E[2405]              	LES	BP,[THISDPB]
 21092 00004751 268A6600                	MOV	AH,[ES:BP]
 21093                                  	;MOV	AH,[ES:BP+DPB.DRIVE]  ; mov ah,[es:bp+0]
 21094                                  SETESRET:
 21095 00004755 16                      	PUSH	SS
 21096 00004756 07                      	POP	ES
 21097 00004757 C3                      	retn
 21098                                  
 21099                                  ;----------------------------------------------------------------------------
 21100                                  ;
 21101                                  ; Procedure Name : MetaCompare
 21102                                  ;
 21103                                  ; Inputs:
 21104                                  ;	DS:SI -> 11 character FCB style name NO '?'
 21105                                  ;	    Typically this is a directory entry.  It MUST be in upper case
 21106                                  ;	ES:DI -> 11 character FCB style name with possible '?'
 21107                                  ;	    Typically this is a FCB or SFT.  It MUST be in upper case
 21108                                  ; Function:
 21109                                  ;	Compare FCB style names allowing for ? match to any char
 21110                                  ; Outputs:
 21111                                  ;	Zero if match else NZ
 21112                                  ; Destroys CX,SI,DI all others preserved
 21113                                  ;----------------------------------------------------------------------------
 21114                                  
 21115                                  MetaCompare:
 21116 00004758 B90B00                  	MOV	CX,11
 21117                                  WILDCRD:
 21118 0000475B F3A6                    	REPE	CMPSB
 21119 0000475D 7407                    	JZ	short MetaRet 		; most of the time we will fail.
 21120                                  CHECK_META:
 21121 0000475F 26807DFF3F              	CMP	BYTE [ES:DI-1],"?"
 21122 00004764 74F5                    	JZ	short WILDCRD
 21123                                  MetaRet:
 21124 00004766 C3                       	retn				; Zero set, Match
 21125                                  
 21126                                  ;Break	<NEXTENTRY -- STEP THROUGH DIRECTORY>
 21127                                  ;----------------------------------------------------------------------------
 21128                                  ;
 21129                                  ; Procedure Name : NEXTENTRY
 21130                                  ;
 21131                                  ; Inputs:
 21132                                  ;	Same as outputs of GETENTRY, above
 21133                                  ; Function:
 21134                                  ;	Update BX, and [LASTENT] for next directory entry.
 21135                                  ;	Carry set if no more.
 21136                                  ;----------------------------------------------------------------------------
 21137                                  
 21138                                  NEXTENTRY:
 21139                                  	; 27/07/2018 - Retro DOS v3.0
 21140                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 4671h 
 21141                                  	; 15/03/2018 - Retro DOS v2.0
 21142                                  
 21143 00004767 A1[F402]                	MOV	AX,[LASTENT]
 21144 0000476A 3B06[6C05]              	CMP	AX,[ENTLAST]
 21145 0000476E 7424                    	JZ	short NONE
 21146 00004770 40                      	INC	AX
 21147                                  	;ADD	BX,32
 21148 00004771 8D5F20                  	LEA	BX,[BX+32]
 21149 00004774 39D3                    	CMP	BX,DX
 21150 00004776 721E                    	JB	short HAVIT
 21151 00004778 8A1E[0E05]              	MOV	BL,[SECCLUSPOS]
 21152 0000477C FEC3                    	INC	BL
 21153 0000477E 3A1E[1205]              	CMP	BL,[CLUSFAC]
 21154 00004782 7217                    	JB	short SAMECLUS
 21155 00004784 8B1E[6E05]              	MOV	BX,[NXTCLUSNUM]
 21156 00004788 E8AF12                  	call	IsEOF
 21157 0000478B 7307                    	JAE	short NONE
 21158 0000478D 83FB02                  	CMP	BX,2
 21159 00004790 7202                    	JB	short NONE
 21160 00004792 EB22                    	JMP	short GETENT
 21161                                  NONE:
 21162 00004794 F9                      	STC
 21163 00004795 C3                      	retn
 21164                                  HAVIT:
 21165 00004796 A3[F402]                	MOV	[LASTENT],AX
 21166 00004799 F8                      	CLC
 21167                                  nextentry_retn:
 21168 0000479A C3                      	retn
 21169                                  SAMECLUS:
 21170 0000479B 881E[0E05]              	MOV	[SECCLUSPOS],BL
 21171 0000479F A3[F402]                	MOV	[LASTENT],AX
 21172 000047A2 1E                      	PUSH	DS
 21173 000047A3 C53E[7405]              	LDS	DI,[CURBUF]
 21174                                  	;MOV	DX,[DI+BUFFINFO.buf_sector+2]	;AN000; >32mb
 21175                                  ;hkn; SS override
 21176                                  	;MOV	[HIGH_SECTOR],DX		;AN000; >32mb
 21177                                  	;mov	dx,[di+6]
 21178 000047A7 8B5506                  	MOV	DX,[DI+BUFFINFO.buf_sector]	;AN000; >32mb
 21179                                  	;ADD	DX,1				;AN000; >32mb
 21180                                  	;ADC	word [HIGH_SECTOR],0 		;AN000; >32mb
 21181 000047AA 42                      	inc	dx
 21182 000047AB 1F                      	POP	DS
 21183 000047AC E881F9                  	call	FIRSTCLUSTER
 21184 000047AF 31DB                    	XOR	BX,BX
 21185 000047B1 EB23                    	JMP	short SETENTRY
 21186                                  
 21187                                  ;----------------------------------------------------------------------------
 21188                                  ;
 21189                                  ; Procedure Name : GETENTRY
 21190                                  ;
 21191                                  ; Inputs:
 21192                                  ;	[LASTENT] has directory entry
 21193                                  ;	ES:BP points to drive parameters
 21194                                  ;	[DIRSEC],[CLUSNUM],[CLUSFAC],[ENTLAST] set for DIR involved
 21195                                  ; Function:
 21196                                  ;	Locates directory entry in preparation for search
 21197                                  ;	GETENT provides entry for passing desired entry in AX
 21198                                  ; Outputs:
 21199                                  ;	[CURBUF+2]:BX = Pointer to next directory entry in CURBUF
 21200                                  ;	[CURBUF+2]:DX = Pointer to first byte after end of CURBUF
 21201                                  ;	[LASTENT] = New directory entry number
 21202                                  ;	[NXTCLUSNUM],[SECCLUSPOS] set via DIRREAD
 21203                                  ;	Carry set if error (currently user FAILed to I 24)
 21204                                  ;----------------------------------------------------------------------------
 21205                                  
 21206                                  GETENTRY:
 21207                                  	; 27/07/2018 - Retro DOS v3.0
 21208 000047B3 A1[F402]                	MOV	AX,[LASTENT]
 21209                                  
 21210                                  	;entry	GETENT
 21211                                  GETENT:
 21212 000047B6 A3[F402]                	MOV	[LASTENT],AX
 21213                                  ;
 21214                                  ; Convert the entry number in AX into a byte offset from the beginning of the
 21215                                  ; directory.
 21216                                  ;
 21217 000047B9 B105                    	mov	cl,5			; shift left by 5 = mult by 32
 21218 000047BB D3C0                    	rol	ax,cl			; keep hight order bits
 21219 000047BD 89C2                    	mov	dx,ax
 21220                                  	;and	ax,0FFE0h
 21221                                  	;;and	ax,~(32-1)		; mask off high order bits
 21222 000047BF 24E0                    	and	al,0E0h ; ~31 ; 19/05/2019
 21223 000047C1 83E21F                  	and	dx,1Fh
 21224                                  	;and	dx,32-1			; mask off low order bits
 21225                                  ;
 21226                                  ; DX:AX contain the byte offset of the required directory entry from the
 21227                                  ; beginning of the directory. Convert this to a sector number. Round the
 21228                                  ; sector size down to a multiple of 32.
 21229                                  ;
 21230                                  	;mov	bx,[es:bp+2]
 21231 000047C4 268B5E02                	MOV	BX,[ES:BP+DPB.SECTOR_SIZE]
 21232 000047C8 80E3E0                  	and	bl,0E0h
 21233                                  	;AND	BL,255-31		; Must be multiple of 32
 21234 000047CB F7F3                    	DIV	BX
 21235 000047CD 89D3                    	MOV	BX,DX			; Position within sector
 21236 000047CF 53                      	PUSH	BX
 21237 000047D0 E811F9                  	call	DIRREAD
 21238 000047D3 5B                      	POP	BX
 21239                                  	;retc
 21240 000047D4 72C4                    	jc	short nextentry_retn	
 21241                                  SETENTRY:
 21242 000047D6 8B16[7405]              	MOV	DX,[CURBUF]
 21243                                  	;add	dx,16
 21244 000047DA 83C210                  	ADD	DX,BUFINSIZ
 21245 000047DD 01D3                    	ADD	BX,DX
 21246                                  	;add	dx,[es:bp+2]
 21247 000047DF 26035602                	ADD	DX,[ES:BP+DPB.SECTOR_SIZE]  ; Always clears carry
 21248 000047E3 C3                      	retn
 21249                                  
 21250                                  ;Break	<SETDIRSRCH SETROOTSRCH -- Set Search environments>
 21251                                  ;----------------------------------------------------------------------------
 21252                                  ;
 21253                                  ; Procedure Name : SETDIRSRCH,SETROOTSRCH
 21254                                  ;
 21255                                  ; Inputs:
 21256                                  ;	BX cluster number of start of directory
 21257                                  ;	ES:BP Points to DPB
 21258                                  ;	DI next cluster number from fastopen extended info. DOS 3.3 only
 21259                                  ; Function:
 21260                                  ;	Set up a directory search
 21261                                  ; Outputs:
 21262                                  ;	[DIRSTART] = BX
 21263                                  ;	[CLUSFAC],[CLUSNUM],[SECCLUSPOS],[DIRSEC] set
 21264                                  ;	Carry set if error (currently user FAILed to I 24)
 21265                                  ; destroys AX,DX,BX
 21266                                  ;----------------------------------------------------------------------------
 21267                                  
 21268                                  SETDIRSRCH:
 21269 000047E4 09DB                    	OR	BX,BX
 21270 000047E6 7432                    	JZ	short SETROOTSRCH
 21271 000047E8 891E[5805]              	MOV	[DIRSTART],BX
 21272                                  	;mov	al,[es:bp+4]
 21273 000047EC 268A4604                	MOV	AL,[ES:BP+DPB.CLUSTER_MASK]
 21274 000047F0 FEC0                    	INC	AL
 21275 000047F2 A2[1205]                	MOV	[CLUSFAC],AL
 21276                                  
 21277                                  ; DOS 3.3 for FastOPen	F.C. 6/12/86
 21278                                  	;SAVE	<SI>
 21279 000047F5 56                      	push	si
 21280                                  	;test	byte [FastOpenFlg],2
 21281 000047F6 F606[6E0F]02            	TEST	byte [FastOpenFlg],Lookup_Success
 21282 000047FB 7507                    	JNZ	short UNP_OK
 21283                                  
 21284                                  ; DOS 3.3 for FastOPen	F.C. 6/12/86
 21285                                  	;invoke	UNPACK
 21286 000047FD E85112                  	call	UNPACK
 21287 00004800 7302                    	JNC	short UNP_OK
 21288                                  	;RESTORE <SI>
 21289 00004802 5E                      	pop	si
 21290                                  	;return
 21291 00004803 C3                      	retn
 21292                                  
 21293                                  UNP_OK:
 21294 00004804 893E[5405]              	MOV	[CLUSNUM],DI
 21295 00004808 89DA                    	MOV	DX,BX
 21296 0000480A 30DB                    	XOR	BL,BL
 21297 0000480C 881E[0E05]              	MOV	[SECCLUSPOS],BL
 21298                                  	;invoke	FIGREC
 21299 00004810 E8220C                  	call	FIGREC
 21300                                  	;RESTORE <SI>
 21301 00004813 5E                      	pop	si
 21302                                  	
 21303                                  	; MSDOS 6.0
 21304                                  	;PUSH	DX			   ;AN000; >32mb
 21305                                  	;MOV	DX,[HIGH_SECTOR]	   ;AN000; >32mb
 21306                                  	;MOV	[DIRSEC+2],DX		   ;AN000; >32mb
 21307                                  	;POP	DX			   ;AN000; >32mb
 21308                                  	
 21309 00004814 8916[5605]              	MOV	[DIRSEC],DX
 21310 00004818 F8                      	CLC
 21311 00004819 C3                      	retn
 21312                                  
 21313                                  	;entry	SETROOTSRCH
 21314                                  SETROOTSRCH:
 21315 0000481A 31C0                    	XOR	AX,AX
 21316 0000481C A3[5805]                	MOV	[DIRSTART],AX
 21317 0000481F A2[0E05]                	MOV	[SECCLUSPOS],AL
 21318 00004822 48                      	DEC	AX
 21319 00004823 A3[5405]                	MOV	[CLUSNUM],AX
 21320                                  	;mov	ax,[es:bp+0Bh]
 21321 00004826 268B460B                	MOV	AX,[ES:BP+DPB.FIRST_SECTOR]
 21322                                  	;mov	dx,[es:bp+10h]
 21323 0000482A 268B5610                	MOV	DX,[ES:BP+DPB.DIR_SECTOR]
 21324 0000482E 29D0                    	SUB	AX,DX
 21325 00004830 A2[1205]                	MOV	[CLUSFAC],AL
 21326 00004833 8916[5605]              	MOV	[DIRSEC],DX		      ;F.C. >32mb
 21327                                  	; MSDOS 6.0
 21328                                  	;MOV	WORD [DIRSEC+2],0	      ;F.C. >32mb
 21329 00004837 F8                      	CLC
 21330 00004838 C3                      	retn
 21331                                  
 21332                                  ;============================================================================
 21333                                  ; DIR2.ASM, MSDOS 6.0, 1991
 21334                                  ;============================================================================
 21335                                  ; 27/07/2018 - Retro DOS v3.0 
 21336                                  
 21337                                  ;	TITLE	DIR2 - Directory and path cracking
 21338                                  ;	NAME	Dir2
 21339                                  
 21340                                  ;Break	<GETPATH -- PARSE A WFP>
 21341                                  ;----------------------------------------------------------------------------
 21342                                  ;
 21343                                  ; Procedure Name : GETPATH
 21344                                  ;
 21345                                  ; Inputs:
 21346                                  ;	[WFP_START] Points to WFP string ("d:\" must be first 3 chars, NUL
 21347                                  ;		terminated; d:/ (note forward slash) indicates a real device).
 21348                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 21349                                  ;		( = -1 if current dir not involved, else
 21350                                  ;		 Points to first char after last "/" of current dir part)
 21351                                  ;	[THISCDS] Points to CDS being used
 21352                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 21353                                  ;	[NoSetDir] set
 21354                                  ;	[THISDPB] set to DPB if disk otherwise garbage.
 21355                                  ; Function:
 21356                                  ;	Crack the path
 21357                                  ; Outputs:
 21358                                  ;	Sets EXTERR_LOCUS = errLOC_Disk if disk file
 21359                                  ;	Sets EXTERR_LOCUS = errLOC_Unk if char device
 21360                                  ;	ID1 field of [THISCDS] updated appropriately
 21361                                  ;	[ATTRIB] = [SATTRIB]
 21362                                  ;	ES:BP Points to DPB
 21363                                  ;	Carry set if bad path
 21364                                  ;	   SI Points to path element causing failure
 21365                                  ;	   Zero set
 21366                                  ;	      [DIRSTART],[DIRSEC],[CLUSNUM], and [CLUSFAC] are set up to
 21367                                  ;	      start a search on the last directory
 21368                                  ;	      CL is zero if there is a bad name in the path
 21369                                  ;	      CL is non-zero if the name was simply not found
 21370                                  ;		 [ENTFREE] may have free spot in directory
 21371                                  ;		 [NAME1] is the name.
 21372                                  ;		 CL = 81H if '*'s or '?' in NAME1, 80H otherwise
 21373                                  ;	   Zero reset
 21374                                  ;	      File in middle of path or bad name in path or attribute mismatch
 21375                                  ;		or path too long or malformed path
 21376                                  ;	ELSE
 21377                                  ;	   [CurBuf] = -1 if root directory
 21378                                  ;	   [CURBUF] contains directory record with match
 21379                                  ;	   [CURBUF+2]:BX Points into [CURBUF] to start of entry
 21380                                  ;	   [CURBUF+2]:SI Points into [CURBUF] to dir_first field for entry
 21381                                  ;	   AH = device ID
 21382                                  ;	      bit 7 of AH set if device SI and BX
 21383                                  ;	      will point DOSGROUP relative The firclus
 21384                                  ;	      field of the device entry contains the device pointer
 21385                                  ;	   [NAME1] Has name looked for
 21386                                  ;	   If last element is a directory zero is set and:
 21387                                  ;	      [DIRSTART],[SECCLUSPOS],[DIRSEC],[CLUSNUM], and [CLUSFAC]
 21388                                  ;	      are set up to start a search on it.
 21389                                  ;	      unless [NoSetDir] is non zero in which case the return is
 21390                                  ;	      like that for a file (except for zero flag)
 21391                                  ;	   If last element is a file zero is reset
 21392                                  ;	      [DIRSEC],[CLUSNUM],[CLUSFAC],[NXTCLUSNUM],[SECCLUSPOS],
 21393                                  ;	      [LASTENT], [ENTLAST] are set to continue search of last
 21394                                  ;	      directory for furthur matches on NAME1 via the NEXTENT
 21395                                  ;	      entry point in FindEntry (or GETENT entry in GETENTRY in
 21396                                  ;	      which case [NXTCLUSNUM] and [SECCLUSPOS] need not be valid)
 21397                                  ; DS preserved, Others destroyed
 21398                                  ;---------------------------------------------------------------------------
 21399                                  
 21400                                  ;hkn; called from delete.asm, finfo.asm, mknode.asm and rename.asm.
 21401                                  ;hkn; DS already set up at this point.
 21402                                  
 21403                                  GETPATH:
 21404                                  	;mov	word [CREATING],0E500h
 21405 00004839 C706[1805]00E5          	MOV	WORD [CREATING],DIRFREE*256+0 ; Not Creating, not DEL *.*
 21406                                  
 21407                                  ; Same as GetPath only CREATING and DELALL already set
 21408                                  
 21409                                  	;entry	GetPathNoSet
 21410                                  GetPathNoSet:
 21411                                  	;mov	byte [EXTERR_LOCUS],2	
 21412 0000483F C606[D102]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 21413 00004844 C706[7405]FFFF          	MOV	word [CURBUF],-1	; initial setting
 21414                                  
 21415                                  ; See if the input indicates a device that has already been detected. If so,
 21416                                  ; go build the guy quickly. Otherwise, let findpath find the device.
 21417                                  
 21418 0000484A 8B3E[4A05]              	MOV	DI,[WFP_START]		; point to the beginning of the name
 21419                                  	;cmp	word [DI+1],5C3Ah
 21420                                  	;CMP	WORD [DI+1],'\' << 8 + ':'
 21421 0000484E 817D013A5C              	cmp	word [DI+1],':\'
 21422 00004853 7438                    	JZ	short CrackIt
 21423                                  
 21424                                  ; Let ChkDev find it in the device list
 21425                                  
 21426 00004855 83C703                  	ADD	DI,3
 21427                                  	; 18/08/2018
 21428                                  	;MOV	SI,DI			; let CHKDEV see the original name
 21429 00004858 E8B000                  	CALL	CHKDEV
 21430 0000485B 722E                    	JC	short InternalError
 21431                                  Build_devJ:
 21432                                  
 21433 0000485D A0[0805]                	MOV	AL,[SATTRIB]
 21434 00004860 A2[0605]                	MOV	[ATTRIB],AL
 21435                                  	;mov	byte [EXTERR_LOCUS],1
 21436 00004863 C606[D102]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk ; In the particular case of
 21437                                  					; "finding" a char device
 21438                                  					; set LOCUS to Unknown. This makes
 21439                                  					; certain idiotic problems reported
 21440                                  					; by a certain 3 letter OEM go away.
 21441                                  
 21442                                  ; Take name in name1 and pack it back into where wfp_start points. This
 21443                                  ; guarantees wfp_start pointing to a canonical representation of a device.
 21444                                  ; We are allowed to do this as GetPath is *ALWAYS* called before entering a
 21445                                  ; wfp into the share set.
 21446                                  ;
 21447                                  ; We copy chars from name1 to wfp_start remembering the position of the last
 21448                                  ; non-space seen +1.  This position is kept in DX.
 21449                                  
 21450                                  ;hkn; SS is DOSDATA
 21451 00004868 16                      	push	ss
 21452 00004869 07                      	pop	es
 21453                                  
 21454                                  ;hkn; NAME1 is in DOSDATA
 21455 0000486A BE[E604]                	mov	si,NAME1
 21456 0000486D 8B3E[4A05]              	mov	di,[WFP_START]
 21457 00004871 89FA                    	mov	dx,di
 21458 00004873 B90800                  	mov	cx,8			; 8 chars in device name
 21459                                  MoveLoop:
 21460 00004876 AC                      	lodsb
 21461 00004877 AA                      	stosb
 21462 00004878 3C20                    	cmp	al," "
 21463 0000487A 7402                    	jz	short NoSave
 21464                                  
 21465 0000487C 89FA                    	mov	dx,di
 21466                                  NoSave:
 21467 0000487E E2F6                    	loop	MoveLoop
 21468                                  ;
 21469                                  ; DX is the position of the last seen non-space + 1. We terminate the name
 21470                                  ; at this point.
 21471                                  ;
 21472 00004880 89D7                    	mov	di,dx
 21473 00004882 C60500                  	mov	byte [di],0		; end of string
 21474 00004885 E8BC02                  	call	Build_device_ent	; Clears carry sets zero
 21475 00004888 FEC0                    	INC	AL			; reset zero
 21476 0000488A C3                      	retn
 21477                                  
 21478                                  InternalError:
 21479                                  InternalError_loop:
 21480 0000488B EBFE                    	JMP	short InternalError_loop	; freeze
 21481                                  
 21482                                  ; Start off at the correct spot. Optimize if the current dir part is valid.
 21483                                  
 21484                                  CrackIt:
 21485 0000488D 8B36[4E05]              	MOV	SI,[CURR_DIR_END]	; get current directory pointer
 21486 00004891 83FEFF                  	CMP	SI,-1			; valid?
 21487 00004894 7503                    	JNZ	short LOOK_SING		; Yes, use it.
 21488 00004896 8D7503                  	LEA	SI,[DI+3]		; skip D:\.
 21489                                  LOOK_SING:
 21490                                  	;mov	byte [ATTRIB],16h
 21491 00004899 C606[0605]16            	MOV	byte [ATTRIB],attr_directory+attr_system+attr_hidden
 21492                                  					; Attributes to search through Dirs
 21493 0000489E C43E[3A05]              	LES	DI,[THISCDS]
 21494 000048A2 B8FFFF                  	MOV	AX,-1
 21495                                  	;mov	bx,[es:di+73]
 21496 000048A5 268B5D49                	MOV	BX,[ES:DI+curdir.ID]
 21497 000048A9 8B36[4E05]              	MOV	SI,[CURR_DIR_END]
 21498                                  
 21499                                  ; AX = -1
 21500                                  ; BX = cluster number of current directory.  THis number is -1 if the media
 21501                                  ;      has been uncertainly changed.
 21502                                  ; SI = offset in DOSGroup into path to end of current directory text.  This
 21503                                  ;      may be -1 if no current directory part has been used.
 21504                                  
 21505 000048AD 39C6                    	CMP	SI,AX			; if Current directory is not part
 21506 000048AF 7440                    	JZ	short NO_CURR_D		; then we must crack from root
 21507 000048B1 39C3                    	CMP	BX,AX			; is the current directory cluster valid
 21508                                  
 21509                                  ; DOS 3.3  6/25/86
 21510 000048B3 743C                    	JZ	short NO_CURR_D		; no, crack form the root
 21511                                  	;test	byte [FastOpenFlg],1
 21512 000048B5 F606[6E0F]01            	TEST	byte [FastOpenFlg],FastOpen_Set ; for fastopen ?
 21513 000048BA 7442                    	JZ	short GOT_SEARCH_CLUSTER	; no
 21514 000048BC 06                      	PUSH	ES			; save registers
 21515 000048BD 57                      	PUSH	DI
 21516 000048BE 51                      	PUSH	CX
 21517 000048BF FF74FF                  	PUSH	word [SI-1]		; save \ and 1st char of next element
 21518 000048C2 56                      	PUSH	SI
 21519 000048C3 53                      	PUSH	BX
 21520                                  
 21521 000048C4 C644FF00                	MOV	BYTE [SI-1],0		; call fastopen to look up cur dir info
 21522 000048C8 8B36[4A05]              	MOV	SI,[WFP_START]
 21523                                  
 21524                                  ;hkn; FastOpenTable, Dir_Info_Buff & FastOpen_Ext_Info are in DOSDATA
 21525 000048CC BB[430F]                	MOV	BX,FastOpenTable
 21526 000048CF BF[4E0F]                	MOV	DI,Dir_Info_Buff
 21527 000048D2 B9[490F]                	MOV	CX,FastOpen_Ext_Info
 21528                                  	;mov	al,1
 21529 000048D5 B001                    	MOV	AL,FONC_Look_up
 21530 000048D7 1E                      	PUSH	DS
 21531 000048D8 07                      	POP	ES
 21532                                  	;call	far [BX+2]
 21533 000048D9 FF5F02                  	CALL	far [BX+fastopen_entry.name_caching]
 21534 000048DC 7208                    	JC	short GO_Chk_end1 	;fastopen not installed, or wrong drive.
 21535                                  					; Go to Got_Srch_cluster
 21536 000048DE 803C00                  	CMP	BYTE [SI],0		;fastopen has current dir info?
 21537 000048E1 7404                    	JE	short GO_Chk_end	;yes. Go to got_search_cluster
 21538 000048E3 F9                      	stc
 21539 000048E4 EB01                    	jmp	short GO_Chk_end	;Go to No_Curr_D
 21540                                  GO_Chk_end1:
 21541 000048E6 F8                      	clc
 21542                                  GO_Chk_end:				; restore registers
 21543 000048E7 5B                      	POP	BX
 21544 000048E8 5E                      	POP	SI
 21545 000048E9 8F44FF                  	POP	word [SI-1]
 21546 000048EC 59                      	POP	CX
 21547 000048ED 5F                      	POP	DI
 21548 000048EE 07                      	POP	ES
 21549 000048EF 730D                    	JNC	short GOT_SEARCH_CLUSTER ; crack based on cur dir
 21550                                  
 21551                                  ; DOS 3.3  6/25/86
 21552                                  ;
 21553                                  ; We must cract the path beginning at the root. Advance pointer to beginning
 21554                                  ; of path and go crack from root.
 21555                                  
 21556                                  NO_CURR_D:
 21557 000048F1 8B36[4A05]              	MOV	SI,[WFP_START]
 21558 000048F5 8D7403                  	LEA	SI,[SI+3]		; Skip "d:/"
 21559 000048F8 C42E[2405]              	LES	BP,[THISDPB]		; Get ES:BP
 21560 000048FC EB3D                    	JMP	short ROOTPATH
 21561                                  
 21562                                  ; We are able to crack from the current directory part. Go set up for search
 21563                                  ; of specified cluster.
 21564                                  
 21565                                  GOT_SEARCH_CLUSTER:
 21566 000048FE C42E[2405]              	LES	BP,[THISDPB]		; Get ES:BP
 21567 00004902 E8DFFE                  	call	SETDIRSRCH
 21568                                  	;JC	short SETFERR
 21569                                  	;JMP	short FINDPATH
 21570 00004905 7345                    	jnc	short FINDPATH ; 17/08/2018
 21571                                  SETFERR:
 21572 00004907 30C9                    	XOR	CL,CL			; set zero
 21573 00004909 F9                      	STC
 21574 0000490A C3                      	retn
 21575                                  
 21576                                  ;---------------------------------------------------------------------------
 21577                                  ;
 21578                                  ; Procedure Name : ChkDev
 21579                                  ;
 21580                                  ; Check to see if the name at DS:DI is a device. Returns carry set if not a
 21581                                  ;   device.
 21582                                  ; Blasts CX,SI,DI,AX,BX
 21583                                  ;---------------------------------------------------------------------------
 21584                                  
 21585                                  CHKDEV:
 21586 0000490B 89FE                    	MOV	SI,DI
 21587 0000490D 8CD7                    	MOV	DI,SS
 21588 0000490F 8EC7                    	MOV	ES,DI
 21589                                  
 21590 00004911 BF[E604]                	MOV	DI,NAME1
 21591 00004914 B90900                  	MOV	CX,9
 21592                                  TESTLOOP:
 21593 00004917 E8F50C                  	call	GETLET
 21594                                  
 21595 0000491A 3C2E                    	CMP	AL,'.'
 21596 0000491C 740E                    	JZ	short TESTDEVICE
 21597 0000491E E82B0D                  	call	PATHCHRCMP
 21598 00004921 7407                    	JZ	short NOTDEV
 21599 00004923 08C0                    	OR	AL,AL
 21600 00004925 7405                    	JZ	short TESTDEVICE
 21601                                  
 21602 00004927 AA                      	STOSB
 21603 00004928 E2ED                    	LOOP	TESTLOOP
 21604                                  NOTDEV:
 21605 0000492A F9                      	STC
 21606 0000492B C3                      	retn
 21607                                  
 21608                                  TESTDEVICE:
 21609 0000492C 83C102                  	ADD	CX,2
 21610 0000492F B020                    	MOV	AL,' '
 21611 00004931 F3AA                    	REP	STOSB
 21612 00004933 8CD0                    	MOV	AX,SS
 21613 00004935 8ED8                    	MOV	DS,AX
 21614 00004937 E8AA01                  	call	DEVNAME
 21615 0000493A C3                      	retn
 21616                                  
 21617                                  ;Break	<ROOTPATH, FINDPATH -- PARSE A PATH>
 21618                                  ;----------------------------------------------------------------------------
 21619                                  ;
 21620                                  ; Procedure Name : ROOTPATH,FINDPATH
 21621                                  ;
 21622                                  ; Inputs:
 21623                                  ;	Same as FINDPATH but,
 21624                                  ;	SI Points to asciz string of path which is assumed to start at
 21625                                  ;		the root (no leading '/').
 21626                                  ; Function:
 21627                                  ;	Search from root for path
 21628                                  ; Outputs:
 21629                                  ;	Same as FINDPATH but:
 21630                                  ;	If root directory specified, [CURBUF] and [NAME1] are NOT set, and
 21631                                  ;	[NoSetDir] is ignored.
 21632                                  ;----------------------------------------------------------------------------
 21633                                  
 21634                                  ROOTPATH:
 21635 0000493B E8DCFE                  	call	SETROOTSRCH
 21636 0000493E 803C00                  	CMP	BYTE [SI],0
 21637 00004941 7509                    	JNZ	short FINDPATH
 21638                                  
 21639                                  ; Root dir specified
 21640 00004943 A0[0805]                	MOV	AL,[SATTRIB]
 21641 00004946 A2[0605]                	MOV	[ATTRIB],AL
 21642 00004949 30E4                    	XOR	AH,AH			; Sets "device ID" byte, sets zero
 21643                                  					; (dir), clears carry.
 21644 0000494B C3                      	retn
 21645                                  
 21646                                  ; Inputs:
 21647                                  ;	[ATTRIB] Set to get through directories
 21648                                  ;	[SATTRIB] Set to find last element
 21649                                  ;	ES:BP Points to DPB
 21650                                  ;	SI Points to asciz string of path (no leading '/').
 21651                                  ;	[SECCLUSPOS] = 0
 21652                                  ;	[DIRSEC] = Phys sec # of first sector of directory
 21653                                  ;	[CLUSNUM] = Cluster # of next cluster
 21654                                  ;	[CLUSFAC] = Sectors per cluster
 21655                                  ;	[NoSetDir] set
 21656                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 21657                                  ;		( = -1 if current dir not involved, else
 21658                                  ;		 Points to first char after last "/" of current dir part)
 21659                                  ;	[THISCDS] Points to CDS being used
 21660                                  ;	[CREATING] and [DELALL] set
 21661                                  ; Function:
 21662                                  ;	Parse path name
 21663                                  ; Outputs:
 21664                                  ;	ID1 field of [THISCDS] updated appropriately
 21665                                  ;	[ATTRIB] = [SATTRIB]
 21666                                  ;	ES:BP Points to DPB
 21667                                  ;	[THISDPB] = ES:BP
 21668                                  ;	Carry set if bad path
 21669                                  ;	   SI Points to path element causing failure
 21670                                  ;	   Zero set
 21671                                  ;	      [DIRSTART],[DIRSEC],[CLUSNUM], and [CLUSFAC] are set up to
 21672                                  ;	      start a search on the last directory
 21673                                  ;	      CL is zero if there is a bad name in the path
 21674                                  ;	      CL is non-zero if the name was simply not found
 21675                                  ;		 [ENTFREE] may have free spot in directory
 21676                                  ;		 [NAME1] is the name.
 21677                                  ;		 CL = 81H if '*'s or '?' in NAME1, 80H otherwise
 21678                                  ;	   Zero reset
 21679                                  ;	      File in middle of path or bad name in path
 21680                                  ;		or path too long or malformed path
 21681                                  ;	ELSE
 21682                                  ;	   [CURBUF] contains directory record with match
 21683                                  ;	   [CURBUF+2]:BX Points into [CURBUF] to start of entry
 21684                                  ;	   [CURBUF+2]:SI Points to fcb_FIRCLUS field for entry
 21685                                  ;	   [NAME1] Has name looked for
 21686                                  ;	   AH = device ID
 21687                                  ;	      bit 7 of AH set if device SI and BX
 21688                                  ;	      will point DOSGROUP relative The firclus
 21689                                  ;	      field of the device entry contains the device pointer
 21690                                  ;	   If last element is a directory zero is set and:
 21691                                  ;	      [DIRSTART],[SECCLUSPOS],[DIRSEC],[CLUSNUM], and [CLUSFAC]
 21692                                  ;	      are set up to start a search on it,
 21693                                  ;	      unless [NoSetDir] is non zero in which case the return is
 21694                                  ;	      like that for a file (except for zero flag)
 21695                                  ;	   If last element is a file zero is reset
 21696                                  ;	      [DIRSEC],[CLUSNUM],[CLUSFAC],[NXTCLUSNUM],[SECCLUSPOS],
 21697                                  ;	      [LASTENT], [ENTLAST] are set to continue search of last
 21698                                  ;	      directory for furthur matches on NAME1 via the NEXTENT
 21699                                  ;	      entry point in FindEntry (or GETENT entry in GETENTRY in
 21700                                  ;	      which case [NXTCLUSNUM] and [SECCLUSPOS] need not be valid)
 21701                                  ; Destroys all other registers
 21702                                  
 21703                                      	;entry	FINDPATH
 21704                                  FINDPATH:
 21705 0000494C 06                      	PUSH	ES			; Save ES:BP
 21706 0000494D 56                      	PUSH	SI
 21707 0000494E 89F7                    	MOV	DI,SI
 21708 00004950 8B0E[5805]              	MOV	CX,[DIRSTART]		; Get start clus of dir being searched
 21709 00004954 833E[4E05]FF            	CMP	word [CURR_DIR_END],-1
 21710 00004959 740E                    	JZ	short NOIDS		; No current dir part
 21711 0000495B 3B3E[4E05]              	CMP	DI,[CURR_DIR_END]
 21712 0000495F 7508                    	JNZ	short NOIDS		; Not to current dir end yet
 21713 00004961 C43E[3A05]              	LES	DI,[THISCDS]
 21714                                  	;mov	[es:di+73],cx
 21715 00004965 26894D49                	MOV	[ES:DI+curdir.ID],CX	; Set current directory currency
 21716                                  NOIDS:
 21717                                  
 21718                                  ; Parse the name off of DS:SI into NAME1. AL = 1 if there was a meta
 21719                                  ; character in the string. CX,DI may be destroyed.
 21720                                  ;
 21721                                  ;	invoke	NAMETRANS
 21722                                  ;	MOV	CL,AL
 21723                                  ;
 21724                                  ; The above is the slow method. The name has *already* been munged by
 21725                                  ; TransPath so no special casing needs to be done. All we do is try to copy
 21726                                  ; the name until ., \ or 0 is hit.
 21727                                  
 21728 00004969 8CD0                    	MOV	AX,SS
 21729 0000496B 8EC0                    	MOV	ES,AX
 21730                                  
 21731                                  ;hkn; Name1 is in DOSDATA
 21732 0000496D BF[E604]                	MOV	DI,NAME1
 21733 00004970 B82020                  	MOV	AX,'  ' ; 2020h
 21734 00004973 AA                      	STOSB
 21735 00004974 AB                      	STOSW
 21736 00004975 AB                      	STOSW
 21737 00004976 AB                      	STOSW
 21738 00004977 AB                      	STOSW
 21739 00004978 AB                      	STOSW
 21740                                  
 21741                                  ;hkn; Name1 is in DOSDATA
 21742 00004979 BF[E604]                	MOV	DI,NAME1
 21743 0000497C 30E4                    	XOR	AH,AH			; bits for CL
 21744                                  GetNam:
 21745                                  	;INC	CL			;AN000; KK incrment volid count
 21746 0000497E AC                      	LODSB
 21747 0000497F 3C2E                    	CMP	AL,'.'
 21748 00004981 7412                    	JZ	short _SetExt
 21749 00004983 08C0                    	OR	AL,AL
 21750 00004985 7424                    	JZ	short _GetDone
 21751 00004987 3C5C                    	CMP	AL,'\'
 21752 00004989 7420                    	JZ	short _GetDone
 21753 0000498B 3C3F                    	CMP	AL,'?'
 21754 0000498D 7503                    	JNZ	short StoNam
 21755 0000498F 80CC01                  	OR	AH,1
 21756                                  StoNam: 
 21757 00004992 AA                      	STOSB
 21758 00004993 EBE9                    	JMP	short GetNam
 21759                                  _SetExt:
 21760 00004995 BF[EE04]                	MOV	DI,NAME1+8
 21761                                  GetExt:
 21762 00004998 AC                      	LODSB
 21763 00004999 08C0                    	OR	AL,AL
 21764 0000499B 740E                    	JZ	short _GetDone
 21765 0000499D 3C5C                    	CMP	AL,'\'
 21766 0000499F 740A                    	JZ	short _GetDone
 21767 000049A1 3C3F                    	CMP	AL,'?'
 21768 000049A3 7503                    	JNZ	short StoExt
 21769 000049A5 80CC01                  	OR	AH,1
 21770                                  StoExt: 
 21771 000049A8 AA                      	STOSB
 21772 000049A9 EBED                    	JMP	short GetExt
 21773                                  _GetDone:
 21774 000049AB 4E                      	DEC	SI
 21775 000049AC 88E1                    	MOV	CL,AH
 21776 000049AE 80C980                  	OR	CL,80H
 21777 000049B1 5F                      	POP	DI			; Start of this element
 21778 000049B2 07                      	POP	ES			; Restore ES:BP
 21779 000049B3 39FE                    	CMP	SI,DI
 21780 000049B5 7503                    	JNZ	short check_device
 21781 000049B7 E9D100                  	JMP	_BADPATH		; NUL parse (two delims most likely)
 21782                                  check_device:
 21783 000049BA 56                      	PUSH	SI			; Start of next element
 21784 000049BB 8A04                    	MOV	AL,[SI]
 21785 000049BD 08C0                    	OR	AL,AL
 21786 000049BF 7508                    	JNZ	short NOT_LAST
 21787                                  
 21788                                  ; for last element of the path switch to the correct search attributes
 21789                                  
 21790 000049C1 8A3E[0805]              	MOV	BH,[SATTRIB]
 21791 000049C5 883E[0605]              	MOV	[ATTRIB],BH
 21792                                  
 21793                                  NOT_LAST:
 21794                                  
 21795                                  ; check name1 to see if we have a device...
 21796                                  
 21797 000049C9 06                      	PUSH	ES			; Save ES:BP
 21798                                  
 21799                                  ;hkn; SS is DOSDATA
 21800                                  	;context ES
 21801 000049CA 16                      	push	ss
 21802 000049CB 07                      	pop	es
 21803 000049CC E81501                  	call	DEVNAME 		; blast BX
 21804 000049CF 07                      	POP	ES			; Restore ES:BP
 21805 000049D0 720B                    	JC	short FindFile		; Not a device
 21806 000049D2 08C0                    	OR	AL,AL			; Test next char again
 21807 000049D4 7403                    	JZ	short GO_BDEV
 21808 000049D6 E9B600                  	JMP	FILEINPATH		; Device name in middle of path
 21809                                  
 21810                                  GO_BDEV:
 21811 000049D9 5E                      	POP	SI			; Points to NUL at end of path
 21812 000049DA E980FE                  	JMP	Build_devJ
 21813                                  
 21814                                  FindFile:
 21815                                  ;;;; 7/28/86
 21816 000049DD 803E[E604]E5            	CMP	BYTE [NAME1],0E5H	; if 1st char = E5
 21817 000049E2 7505                    	JNZ	short NOE5		; no
 21818 000049E4 C606[E604]05            	MOV	BYTE [NAME1],05H	; change it to 05
 21819                                  NOE5:
 21820                                  ;;;; 7/28/86
 21821 000049E9 57                      	PUSH	DI			; Start of this element
 21822 000049EA 06                      	PUSH	ES			; Save ES:BP
 21823 000049EB 51                      	PUSH	CX			; CL return from NameTrans
 21824                                  ;DOS 3.3 FastOPen 6/12/86 F.C.
 21825                                  
 21826 000049EC E87C02                  	CALL	LookupPath		; call fastopen to get dir entry
 21827 000049EF 7303                    	JNC	short DIR_FOUND		; found dir entry
 21828                                  
 21829                                  ;DOS 3.3 FastOPen 6/12/86 F.C.
 21830 000049F1 E8B5FC                  	call	FINDENTRY
 21831                                  DIR_FOUND:
 21832 000049F4 59                      	POP	CX
 21833 000049F5 07                      	POP	ES
 21834 000049F6 5F                      	POP	DI
 21835 000049F7 7303                    	JNC	short LOAD_BUF
 21836 000049F9 E9B800                  	JMP	BADPATHPOP
 21837                                  
 21838                                  LOAD_BUF:
 21839 000049FC C53E[7405]              	LDS	DI,[CURBUF]
 21840                                  	;test	byte [bx+0Bh],10h
 21841 00004A00 F6470B10                	TEST	BYTE [BX+dir_entry.dir_attr],attr_directory
 21842 00004A04 7503                    	JNZ	short GO_NEXT 		; DOS 3.3
 21843 00004A06 E98600                  	JMP	FILEINPATH		; Error or end of path
 21844                                  
 21845                                  ; if we are not setting the directory, then check for end of string
 21846                                  
 21847                                  GO_NEXT:
 21848                                  ;hkn; SS override
 21849 00004A09 36803E[F802]00          	CMP	BYTE [SS:NoSetDir],0
 21850 00004A0F 7412                    	JZ	short SetDir
 21851 00004A11 89FA                    	MOV	DX,DI			; Save pointer to entry
 21852 00004A13 8CD9                    	MOV	CX,DS
 21853                                  
 21854                                  ;hkn; SS is DOSDATA
 21855                                  	;context DS
 21856 00004A15 16                      	push	ss
 21857 00004A16 1F                      	pop	ds
 21858 00004A17 5F                      	POP	DI			; Start of next element
 21859                                  	; MSDOS 6.0
 21860                                  	;TEST	byte [FastOpenFlg],FastOpen_Set ;only DOSOPEN can take advantage of
 21861                                  	;JZ	short nofast			; the FastOpen
 21862                                  	;TEST	byte [FastOpenFlg],Lookup_Success ; Lookup just happened
 21863                                  	;JZ	short nofast			; no
 21864                                  	;MOV	DI,[Next_Element_Start]	; no need to insert it again
 21865                                  ;nofast:
 21866 00004A18 803D00                  	CMP	BYTE [DI],0
 21867 00004A1B 7501                    	JNZ	short NEXT_ONE		; DOS 3.3
 21868                                  	;JMP	_SETRET			; Got it
 21869 00004A1D C3                      	retn	; 05/09/2018
 21870                                  NEXT_ONE:
 21871 00004A1E 57                      	PUSH	DI			; Put start of next element back on stack
 21872 00004A1F 89D7                    	MOV	DI,DX
 21873 00004A21 8ED9                    	MOV	DS,CX			; Get back pointer to entry
 21874                                  SetDir:
 21875 00004A23 8B14                    	MOV	DX,[SI] 		; Dir_first
 21876                                  
 21877                                  ;DOS 3.3 FastOPen 6/12/86 F.C.
 21878 00004A25 1E                      	PUSH	DS		      ; save [curbuf+2]
 21879                                  ;hkn; SS is DOSDATA
 21880 00004A26 16                      	push	ss
 21881 00004A27 1F                      	pop	ds		      ; set DS Dosgroup
 21882                                  	;test	byte [FastOpenFlg],2
 21883 00004A28 F606[6E0F]02            	TEST	byte [FastOpenFlg],Lookup_Success
 21884 00004A2D 7410                    	JZ	short DO_NORMAL	      ; fastopen not in memory or path not
 21885 00004A2F 89D3                    	MOV	BX,DX		      ; not found
 21886 00004A31 8B3E[5405]              	MOV	DI,[CLUSNUM]	      ; clusnum was set in LookupPath
 21887 00004A35 50                      	PUSH	AX		      ; save device id (AH)
 21888 00004A36 E8ABFD                  	call	SETDIRSRCH
 21889 00004A39 58                      	POP	AX		      ; restore device id (AH)
 21890 00004A3A 83C402                  	ADD	SP,2		      ; pop ds in stack
 21891 00004A3D EB36                    	JMP	short FAST_OPEN_SKIP
 21892                                  
 21893                                  DO_NORMAL:
 21894 00004A3F 1F                      	POP	DS			; DS = [curbuf + 2]
 21895                                  ;DOS 3.3 FastOPen 6/12/86 F.C.
 21896                                  
 21897 00004A40 29FB                    	SUB	BX,DI			; Offset into sector of start of entry
 21898 00004A42 29FE                    	SUB	SI,DI			; Offset into sector of dir_first
 21899 00004A44 53                      	PUSH	BX
 21900 00004A45 50                      	PUSH	AX
 21901 00004A46 56                      	PUSH	SI
 21902 00004A47 51                      	PUSH	CX
 21903                                  	;push	word [di+6]
 21904 00004A48 FF7506                  	PUSH	WORD [DI+BUFFINFO.buf_sector]	;AN000;>32mb
 21905                                  	; MSDOS 6.0
 21906                                  	;PUSH	WORD [DI+BUFFINFO.buf_sector+2]	;AN000;>32mb
 21907 00004A4B 89D3                    	MOV	BX,DX
 21908                                  
 21909                                  ;hkn; SS is DOSDATA
 21910                                  	;context DS
 21911 00004A4D 16                      	push	ss
 21912 00004A4E 1F                      	pop	ds
 21913                                  	;invoke	SETDIRSRCH		; This uses UNPACK which might blow
 21914 00004A4F E892FD                  	call	SETDIRSRCH		; the entry sector buffer
 21915                                  	; MSDOS 6.0
 21916                                  	;POP	word [HIGH_SECTOR]
 21917 00004A52 5A                      	POP	DX
 21918 00004A53 720A                    	JC	short SKIP_GETB
 21919                                  	;mov	byte [ALLOWED],18h
 21920 00004A55 C606[F702]18            	MOV	byte [ALLOWED],Allowed_RETRY+Allowed_FAIL
 21921 00004A5A 30C0                    	XOR	AL,AL
 21922                                  	;invoke	GETBUFFR		; Get the entry buffer back
 21923 00004A5C E82A14                  	call	GETBUFFR
 21924                                  SKIP_GETB:
 21925 00004A5F 59                      	POP	CX
 21926 00004A60 5E                      	POP	SI
 21927 00004A61 58                      	POP	AX
 21928 00004A62 5B                      	POP	BX
 21929 00004A63 7305                    	JNC	short SET_THE_BUF ; 19/05/2019
 21930 00004A65 5F                      	POP	DI			; Start of next element
 21931 00004A66 89FE                    	MOV	SI,DI			; Point with SI
 21932 00004A68 EB21                    	JMP	SHORT _BADPATH
 21933                                  
 21934                                  SET_THE_BUF:
 21935 00004A6A E8CFF6                  	call	SET_BUF_AS_DIR
 21936 00004A6D 8B3E[7405]              	MOV	DI,[CURBUF]
 21937 00004A71 01FE                    	ADD	SI,DI			; Get the offsets back
 21938 00004A73 01FB                    	ADD	BX,DI
 21939                                  ; DOS 3.3 FastOpen 6/12/86  F.C.
 21940                                  FAST_OPEN_SKIP:
 21941 00004A75 5F                      	POP	DI			; Start of next element
 21942 00004A76 E86802                  	CALL	InsertPath		; insert dir entry info
 21943                                  ; DOS 3.3 FastOpen 6/12/86  F.C.
 21944 00004A79 8A05                    	MOV	AL,[DI]
 21945 00004A7B 08C0                    	OR	AL,AL
 21946 00004A7D 7434                    	JZ	short _SETRET		; At end
 21947 00004A7F 47                      	INC	DI			; Skip over "/"
 21948 00004A80 89FE                    	MOV	SI,DI			; Point with SI
 21949 00004A82 E8C70B                  	call	PATHCHRCMP
 21950 00004A85 7503                    	JNZ	short find_bad_name	; oops
 21951 00004A87 E9C2FE                  	JMP	FINDPATH		; Next element
 21952                                  
 21953                                  find_bad_name:
 21954 00004A8A 4E                      	DEC	SI			; Undo above INC to get failure point
 21955                                  _BADPATH:
 21956 00004A8B 30C9                    	XOR	CL,CL			; Set zero
 21957 00004A8D EB2C                    	JMP	SHORT BADPRET
 21958                                  
 21959                                  FILEINPATH:
 21960 00004A8F 5F                      	POP	DI			; Start of next element
 21961                                  
 21962                                  ;hkn; SS is DOSDATA
 21963                                  	;context DS			; Got to from one place with DS gone
 21964 00004A90 16                      	push	ss
 21965 00004A91 1F                      	pop	ds
 21966                                  
 21967                                  ; DOS 3.3 FastOpen
 21968                                  	;test	byte [FastOpenFlg],1
 21969 00004A92 F606[6E0F]01            	TEST	byte [FastOpenFlg],FastOpen_Set  ; do this here is we don't want to
 21970 00004A97 740B                    	JZ	short NO_FAST		; device info to fastopen
 21971                                  	;test	byte [FastOpenFlg],2
 21972 00004A99 F606[6E0F]02            	TEST	byte [FastOpenFlg],Lookup_Success
 21973 00004A9E 7404                    	JZ	short NO_FAST
 21974 00004AA0 8B3E[6F0F]              	MOV	DI,[Next_Element_Start]  ; This takes care of one time lookup
 21975                                  					 ; success
 21976                                  NO_FAST:
 21977                                  ; DOS 3.3 FastOpen
 21978                                  
 21979 00004AA4 8A05                    	MOV	AL,[DI]
 21980 00004AA6 08C0                    	OR	AL,AL
 21981 00004AA8 7404                    	JZ	short INCRET
 21982 00004AAA 89FE                    	MOV	SI,DI			; Path too long
 21983 00004AAC EB0D                    	JMP	SHORT BADPRET
 21984                                  
 21985                                  INCRET:
 21986                                  ; DOS 3.3 FasOpen 6/12/86  F.C.
 21987                                  
 21988 00004AAE E83002                  	CALL   InsertPath		; insert dir entry info
 21989                                  
 21990                                  ; DOS 3.3 FasOpen 6/12/86  F.C.
 21991 00004AB1 FEC0                    	INC	AL			; Reset zero
 21992                                  _SETRET:
 21993 00004AB3 C3                      	retn
 21994                                  
 21995                                  BADPATHPOP:
 21996 00004AB4 5E                      	POP	SI			; Start of next element
 21997 00004AB5 8A04                    	MOV	AL,[SI]
 21998 00004AB7 89FE                    	MOV	SI,DI			; Start of bad element
 21999 00004AB9 08C0                    	OR	AL,AL			; zero if bad element is last, non-zero if path too long
 22000                                  BADPRET:
 22001 00004ABB A0[0805]                	MOV	AL,[SATTRIB]
 22002 00004ABE A2[0605]                	MOV	[ATTRIB],AL		; Make sure return correct
 22003 00004AC1 F9                      	STC
 22004 00004AC2 C3                      	retn
 22005                                  
 22006                                  ;Break	<STARTSRCH -- INITIATE DIRECTORY SEARCH>
 22007                                  ;---------------------------------------------------------------------------
 22008                                  ;
 22009                                  ; Procedure Name : STARTSRCH
 22010                                  ;
 22011                                  ; Inputs:
 22012                                  ;	[THISDPB] Set
 22013                                  ; Function:
 22014                                  ;	Set up a search for GETENTRY and NEXTENTRY
 22015                                  ; Outputs:
 22016                                  ;	ES:BP = Drive parameters
 22017                                  ;	Sets up LASTENT, ENTFREE=ENTLAST=-1, VOLID=0
 22018                                  ; Destroys ES,BP,AX
 22019                                  ;--------------------------------------------------------------------------
 22020                                  
 22021                                  STARTSRCH:
 22022 00004AC3 C42E[2405]              	LES	BP,[THISDPB]
 22023 00004AC7 31C0                    	XOR	AX,AX
 22024 00004AC9 A3[F402]                	MOV	[LASTENT],AX
 22025 00004ACC A2[1605]                	MOV	[VOLID],AL		; No volume ID found
 22026 00004ACF 48                      	DEC	AX
 22027 00004AD0 A3[6A05]                	MOV	[ENTFREE],AX
 22028 00004AD3 A3[6C05]                	MOV	[ENTLAST],AX
 22029 00004AD6 C3                      	retn
 22030                                  
 22031                                  ;BREAK <MatchAttributes - the final check for attribute matching>
 22032                                  ;----------------------------------------------------------------------------
 22033                                  ; Procedure Name : MatchAttributes
 22034                                  ;
 22035                                  ; Input:    [Attrib] = attribute to search for
 22036                                  ;	    CH = found attribute
 22037                                  ; Output:   JZ <match>
 22038                                  ;	    JNZ <nomatch>
 22039                                  ; Registers modified: noneski
 22040                                  ;----------------------------------------------------------------------------
 22041                                  
 22042                                  MatchAttributes:
 22043 00004AD7 50                      	PUSH	AX
 22044                                  
 22045                                  ;hkn; SS override
 22046 00004AD8 36A0[0605]              	MOV	AL,[ss:ATTRIB]		; AL <- SearchSet
 22047 00004ADC F6D0                    	NOT	AL			; AL <- SearchSet'
 22048 00004ADE 20E8                    	AND	AL,CH			; AL <- SearchSet' and FoundSet
 22049                                  	;and	al,16h
 22050 00004AE0 2416                    	AND	AL,attr_all	; AL <- SearchSet' and FoundSet and Important
 22051                                  ;
 22052                                  ; the result is non-zero if an attribute is not in the search set
 22053                                  ; and in the found set and in the important set. This means that we do not
 22054                                  ; have a match. Do a JNZ <nomatch> or JZ <match>
 22055                                  ;
 22056 00004AE2 58                      	POP	AX
 22057 00004AE3 C3                      	retn
 22058                                  
 22059                                  ;Break <DevName - Look for name of device>
 22060                                  ;---------------------------------------------------------------------------
 22061                                  ;
 22062                                  ; Procedure Name : DevName
 22063                                  ;
 22064                                  ; Inputs:
 22065                                  ;	DS,ES:DOSDATA
 22066                                  ;	Filename in NAME1
 22067                                  ;	ATTRIB set so that we can error out if looking for Volume IDs
 22068                                  ; Function:
 22069                                  ;	Determine if file is in list of I/O drivers
 22070                                  ; Outputs:
 22071                                  ;	Carry set if not a device
 22072                                  ;	ELSE
 22073                                  ;	Zero flag set
 22074                                  ;	BH = Bit 7,6 = 1, bit 5 = 0 (cooked mode)
 22075                                  ;	     bits 0-4 set from low byte of attribute word
 22076                                  ;	DEVPT = DWORD pointer to Device header of device
 22077                                  ; BX destroyed, others preserved
 22078                                  ;---------------------------------------------------------------------------
 22079                                  
 22080                                  DEVNAME:
 22081                                  	; 28/07/2018 - Retro DOS v3.0
 22082                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 49FBh
 22083                                  
 22084 00004AE4 56                      	PUSH	SI
 22085 00004AE5 57                      	PUSH	DI
 22086 00004AE6 51                      	PUSH	CX
 22087 00004AE7 50                      	PUSH	AX
 22088                                  
 22089                                  ; E5 special code
 22090 00004AE8 FF36[E604]              	PUSH	WORD [NAME1]
 22091 00004AEC 803E[E604]05            	CMP	byte [NAME1],5
 22092 00004AF1 7505                    	JNZ	short NOKTR
 22093 00004AF3 C606[E604]E5            	MOV	byte [NAME1],0E5h
 22094                                  NOKTR:
 22095                                  	;test	byte [ATTRIB],8
 22096 00004AF8 F606[0605]08            	TEST	byte [ATTRIB],attr_volume_id
 22097                                  					; If looking for VOL id don't find devs
 22098 00004AFD 7522                    	JNZ	short RET31
 22099                                  
 22100                                  ;hkn; NULDEV is in DOSDATA
 22101 00004AFF BE[4800]                	MOV	SI,NULDEV
 22102                                  LOOKIO:
 22103                                  	;test	word [si+4],8000h
 22104 00004B02 F744040080              	TEST	word [SI+SYSDEV.ATT],DEVTYP
 22105 00004B07 7411                    	JZ	short SKIPDEV 		; Skip block devices (NET and LOCAL)
 22106 00004B09 89F0                    	MOV	AX,SI
 22107                                  	;add	si,10
 22108 00004B0B 83C60A                  	ADD	SI,SYSDEV.NAME
 22109                                  
 22110                                  ;hkn; NAME1 is in DOSDATA
 22111 00004B0E BF[E604]                	MOV	DI,NAME1
 22112 00004B11 B90400                  	MOV	CX,4			; All devices are 8 letters
 22113 00004B14 F3A7                    	REPE	CMPSW			; Check for name in list
 22114 00004B16 89C6                    	MOV	SI,AX
 22115 00004B18 7415                    	JZ	short IOCHK		; Found it?
 22116                                  SKIPDEV:
 22117 00004B1A C534                    	LDS	SI,[SI]			; Get address of next device
 22118 00004B1C 83FEFF                  	CMP	SI,-1			; At end of list?
 22119 00004B1F 75E1                    	JNZ	short LOOKIO
 22120                                  RET31:	
 22121 00004B21 F9                      	STC				; Not found
 22122                                  RETNV:	
 22123 00004B22 8CD1                    	MOV	CX,SS
 22124 00004B24 8ED9                    	MOV	DS,CX
 22125                                  
 22126 00004B26 8F06[E604]              	POP	WORD [NAME1]
 22127 00004B2A 58                      	POP	AX
 22128 00004B2B 59                      	POP	CX
 22129 00004B2C 5F                      	POP	DI
 22130 00004B2D 5E                      	POP	SI
 22131 00004B2E C3                      	RETN
 22132                                  
 22133                                  IOCHK:
 22134                                  ;hkn; SS override for DEVPT
 22135 00004B2F 368C1E[3405]            	MOV	[SS:DEVPT+2],DS		; Save pointer to device
 22136                                  	;mov	bh,[si+4]
 22137 00004B34 8A7C04                  	MOV	BH,[SI+SYSDEV.ATT]
 22138 00004B37 80CFC0                  	OR	BH,0C0h
 22139 00004B3A 80E7DF                  	and	bh,0DFh
 22140                                  	;AND	BH,~(020h)		; Clears Carry
 22141 00004B3D 368936[3205]            	MOV	[SS:DEVPT],SI
 22142 00004B42 EBDE                    	JMP	short RETNV
 22143                                  
 22144                                  ;BREAK <Build_device_ent - Make a Directory entry>
 22145                                  ;---------------------------------------------------------------------------
 22146                                  ; Procedure Name : Build_device_ent
 22147                                  ;
 22148                                  ; Inputs:
 22149                                  ;	[NAME1] has name
 22150                                  ;	BH is attribute field (supplied by DEVNAME)
 22151                                  ;	[DEVPT] points to device header (supplied by DEVNAME)
 22152                                  ; Function:
 22153                                  ;	Build a directory entry for a device at DEVFCB
 22154                                  ; Outputs:
 22155                                  ;	BX points to DEVFCB
 22156                                  ;	SI points to dir_first field
 22157                                  ;	AH = input BH
 22158                                  ;	AL = 0
 22159                                  ;	dir_first = DEVPT
 22160                                  ;	Zero Set, Carry Clear
 22161                                  ; DS,ES,BP preserved, others destroyed
 22162                                  ;--------------------------------------------------------------------------
 22163                                  
 22164                                  Build_device_ent:
 22165 00004B44 B82020                  	MOV	AX,"  " ; 2020h
 22166                                  
 22167                                  ;hkn; DEVFCB is in DOSDATA
 22168 00004B47 BF[EE04]                	MOV	DI,DEVFCB+8		; Point to extent field
 22169                                  
 22170                                  ;	Fill dir_ext	BUGBUG - use ERRNZs for this stuff!
 22171                                  
 22172 00004B4A AB                      	STOSW
 22173 00004B4B AA                      	STOSB				; Blank out extent field
 22174                                  	;mov	al,40h
 22175 00004B4C B040                    	MOV	AL,attr_device
 22176                                  
 22177                                  ;	Fill Dir_attr
 22178                                  
 22179 00004B4E AA                      	STOSB				; Set attribute field
 22180 00004B4F 31C0                    	XOR	AX,AX
 22181 00004B51 B90A00                  	MOV	CX,10
 22182                                  
 22183                                  ; Fill dir_pad
 22184                                  
 22185 00004B54 F3AB                    	REP	STOSW			; Fill rest with zeros
 22186 00004B56 E860CD                  	call	DATE16
 22187                                  
 22188                                  ;hkn; DEVFCB is in DOSDATA
 22189 00004B59 BF[FC04]                	MOV	DI,DEVFCB+dir_entry.dir_time ; 09/08/2018
 22190 00004B5C 92                      	XCHG	AX,DX
 22191                                  
 22192                                  ; Fill dir_time
 22193                                  
 22194 00004B5D AB                      	STOSW
 22195 00004B5E 92                      	XCHG	AX,DX
 22196                                  
 22197                                  ; Fill dir_date
 22198                                  
 22199 00004B5F AB                      	STOSW
 22200 00004B60 89FE                    	MOV	SI,DI			; SI points to dir_first field
 22201 00004B62 A1[3205]                	MOV	AX,[DEVPT]
 22202                                  
 22203                                  ; Fill dir_first
 22204                                  
 22205 00004B65 AB                      	STOSW				; Dir_first points to device
 22206 00004B66 A1[3405]                	MOV	AX,[DEVPT+2]
 22207                                  ;
 22208                                  ; Fill dir_size_l
 22209                                  ;
 22210 00004B69 AB                      	STOSW
 22211 00004B6A 88FC                    	MOV	AH,BH			; Put device atts in AH
 22212                                  
 22213                                  ;hkn; DEVFCB is in DOSDATA
 22214 00004B6C BB[E604]                	MOV	BX,DEVFCB
 22215 00004B6F 30C0                    	XOR	AL,AL			; Set zero, clear carry
 22216 00004B71 C3                      	retn
 22217                                  
 22218                                  ;Break	<ValidateCDS - given a CDS, validate the media and the current directory>
 22219                                  ;----------------------------------------------------------------------------
 22220                                  ;
 22221                                  ;   ValidateCDS - Get current CDS. Splice it. Call FatReadCDS to check
 22222                                  ;   media. If media has been changed, do DOS_Chdir to validate path.
 22223                                  ;   If invalid, reset original CDS to root.
 22224                                  ;
 22225                                  ;   Inputs:	ThisCDS points to CDS of interest
 22226                                  ;		SS:DI points to temp buffer
 22227                                  ;   Outputs:	The current directory string is validated on the appropriate
 22228                                  ;		    drive
 22229                                  ;		ThisDPB changed
 22230                                  ;		ES:DI point to CDS
 22231                                  ;		Carry set if error (currently user FAILed to I 24)
 22232                                  ;   Registers modified: all
 22233                                  ;----------------------------------------------------------------------------
 22234                                  
 22235                                  ValidateCDS:
 22236                                  	; 28/07/2018 - Retro DOS v3.0
 22237                                  
 22238                                     %define  Temp	[bp-2]	; word
 22239                                     %define  SaveCDS	[bp-6]	; dword
 22240                                     %define  SaveCDSL	[bp-6]	; word
 22241                                     %define  SaveCDSH	[bp-4]	; word
 22242                                  
 22243                                  	;Enter
 22244 00004B72 55                      	push	bp
 22245 00004B73 89E5                    	mov	bp,sp
 22246 00004B75 83EC06                  	sub	sp,6
 22247                                  
 22248 00004B78 897EFE                  	MOV	Temp,DI
 22249                                  
 22250                                  ;hkn; SS override
 22251 00004B7B 36C536[3A05]            	LDS	SI,[SS:THISCDS]
 22252 00004B80 8976FA                  	MOV	SaveCDSL,SI
 22253 00004B83 8C5EFC                  	MOV	SaveCDSH,DS
 22254                                  	;EnterCrit critDisk
 22255 00004B86 E8E3D4                  	call	EcritDisk
 22256                                  	;test	word [si+67],8000h
 22257 00004B89 F744430080              	TEST	word [SI+curdir.flags],curdir_isnet	; Clears carry
 22258 00004B8E 7403                    	JZ	short _DoSplice
 22259 00004B90 E98900                  	JMP	FatFail
 22260                                  _DoSplice:
 22261 00004B93 30D2                    	XOR	DL,DL
 22262 00004B95 368616[F802]            	XCHG	DL,[SS:NoSetDir]
 22263                                  
 22264                                  ;hkn; SS is DOSDATA
 22265                                  	;Context ES
 22266 00004B9A 16                      	push	ss
 22267 00004B9B 07                      	pop	es
 22268                                  	;Invoke	FStrcpy
 22269 00004B9C E8C2D3                  	call	FStrCpy
 22270 00004B9F 8B76FE                  	MOV	SI,Temp
 22271                                  
 22272                                  ;hkn; SS is DOSDATA
 22273                                  	;Context DS
 22274 00004BA2 16                      	push	ss
 22275 00004BA3 1F                      	pop	ds	
 22276                                  	;Invoke	Splice
 22277 00004BA4 E83221                  	call	Splice
 22278                                  
 22279                                   ;hkn; SS is DOSDATA
 22280                                  	;Context DS			;   FatReadCDS (ThisCDS);
 22281 00004BA7 16                      	push	ss
 22282 00004BA8 1F                      	pop	ds
 22283 00004BA9 8816[F802]              	MOV	[NoSetDir],DL
 22284 00004BAD C43E[3A05]              	LES	DI,[THISCDS]
 22285                                  	;SAVE	<BP>
 22286 00004BB1 55                      	push	bp
 22287                                  	;Invoke	FATREAD_CDS
 22288 00004BB2 E80A10                  	call	FATREAD_CDS	
 22289                                  	;RESTORE <BP>
 22290 00004BB5 5D                      	pop	bp
 22291 00004BB6 7264                    	JC	short FatFail
 22292                                  
 22293 00004BB8 C536[3A05]              	LDS	SI,[THISCDS]		;   if (ThisCDS->ID == -1) {
 22294                                  	;cmp	word [si+73], -1
 22295 00004BBC 837C49FF                	CMP	word [SI+curdir.ID],-1
 22296 00004BC0 754C                    	JNZ	short RestoreCDS
 22297                                  
 22298                                  ;hkn; SS is DOSDATA
 22299                                  	;Context ES
 22300 00004BC2 16                      	push	ss
 22301 00004BC3 07                      	pop	es
 22302                                  
 22303                                  ;hkn; SS override
 22304                                  	;SAVE	<wfp_Start>		;	t = wfp_Start;
 22305 00004BC4 36FF36[4A05]            	push	word [SS:WFP_START]
 22306                                  	;cmp	si,[bp-6]
 22307 00004BC9 3B76FA                  	CMP	SI,SaveCDSL		; if not spliced
 22308 00004BCC 750B                    	JNZ	short DoChdir
 22309                                  	;mov	di,[bp-2]
 22310 00004BCE 8B7EFE                  	MOV	DI,Temp
 22311                                  
 22312                                  ;hkn; SS override
 22313 00004BD1 36893E[4A05]            	MOV	[SS:WFP_START],DI	;	wfp_start = d;
 22314                                  	;Invoke	FStrCpy 		;	strcpy (d, ThisCDS->Text);
 22315 00004BD6 E888D3                  	call	FStrCpy
 22316                                  DoChdir:
 22317                                  ;hkn; SS is DOSDATA
 22318                                  	;Context DS
 22319 00004BD9 16                      	push	ss
 22320 00004BDA 1F                      	pop	ds
 22321                                  	;SAVE	<<WORD PTR SAttrib>,BP> ;	c = DOSChDir ();
 22322 00004BDB FF36[0805]              	push	word [SATTRIB]
 22323 00004BDF 55                      	push	bp
 22324                                  	;Invoke	DOS_ChDir
 22325 00004BE0 E80BF1                  	call	DOS_CHDIR
 22326                                  	;RESTORE <BP,BX,wfp_start>	;	wfp_Start = t;
 22327 00004BE3 5D                      	pop	bp
 22328 00004BE4 5B                      	pop	bx
 22329 00004BE5 8F06[4A05]              	pop	word [WFP_START]
 22330 00004BE9 881E[0805]              	MOV	[SATTRIB],BL
 22331 00004BED C576FA                  	LDS	SI,SaveCDS
 22332 00004BF0 730F                    	JNC	short SetCluster	;	if (c == -1) {
 22333                                  
 22334                                  ;hkn; SS override for THISCDS
 22335 00004BF2 368936[3A05]            	MOV	[SS:THISCDS],SI		;	    ThisCDS = TmpCDS;
 22336 00004BF7 368C1E[3C05]            	MOV	[SS:THISCDS+2],DS
 22337 00004BFC 31C9                    	XOR	CX,CX			;	    TmpCDS->text[3] = c = 0;
 22338 00004BFE 884C03                  	MOV	[SI+3],CL		;	    }
 22339                                  SetCluster:
 22340                                  	;mov	word [si+73],0FFFFh
 22341 00004C01 C74449FFFF              	MOV	word [SI+curdir.ID],-1	;	TmpCDS->ID = -1;
 22342 00004C06 36C536[3A05]            	LDS	SI,[SS:THISCDS]		;	ThisCDS->ID = c;
 22343                                  	; MSDOS 6.0
 22344                                  	;TEST	word [SI+curdir.flags],curdir_splice ;AN000;;MS. for Join and Subst
 22345                                  	;JZ	short setdirclus		     ;AN000;;MS.
 22346                                  	;MOV	CX,-1				     ;AN000;;MS.
 22347                                  setdirclus:
 22348                                  	;mov	[si+73],cx
 22349 00004C0B 894C49                  	MOV	[SI+curdir.ID],CX	;	}
 22350                                  RestoreCDS:
 22351 00004C0E C47EFA                  	LES	DI,SaveCDS
 22352 00004C11 36893E[3A05]            	MOV	[SS:THISCDS],DI
 22353 00004C16 368C06[3C05]            	MOV	[SS:THISCDS+2],ES
 22354 00004C1B F8                      	CLC
 22355                                  FatFail:
 22356                                  	;LeaveCrit critDisk
 22357 00004C1C E855D4                  	call	LcritDisk
 22358                                  
 22359                                  	;les	di,[bp-6]
 22360 00004C1F C47EFA                  	LES	DI,SaveCDS
 22361                                  	;Leave
 22362 00004C22 89EC                    	mov	sp,bp
 22363 00004C24 5D                      	pop	bp
 22364 00004C25 C3                      	retn
 22365                                  
 22366                                  ; 28/07/2018 - Retro DOS v3.0
 22367                                  ; IBMDOS.COM (MSDOS 3.3, 1987) - offset 43BDh
 22368                                  
 22369                                  ;Break	<CheckThisDevice - Check for being a device>
 22370                                  ;---------------------------------------------------------------------------
 22371                                  ;
 22372                                  ;   CheckThisDevice - Examine the area at DS:SI to see if there is a valid
 22373                                  ;   device specified. We will return carry if there is a device present. 
 22374                                  ;   The forms of devices we will recognize are:
 22375                                  ;
 22376                                  ;	[path]device
 22377                                  ;
 22378                                  ;   Note that the drive letter has *already* been removed. All other forms
 22379                                  ;   are not considered to be devices. If such a device is found we change
 22380                                  ;   the source pointer to point to the device component.
 22381                                  ;
 22382                                  ;   Inputs:	ES is DOSDATA
 22383                                  ;		DS:SI contains name
 22384                                  ;   Outputs:	ES is DOSDATA
 22385                                  ;		DS:SI point to name or device
 22386                                  ;		Carry flag set if device was found
 22387                                  ;		Carry flag reset otherwise
 22388                                  ;   Registers Modified: all except ES:DI, DS
 22389                                  ;----------------------------------------------------------------------------
 22390                                  
 22391                                  CheckThisDevice:
 22392 00004C26 57                      	push	di
 22393 00004C27 56                      	push	si
 22394 00004C28 89F7                    	MOV	DI,SI
 22395                                  ;
 22396                                  ; Check for presence of \dev\ (Dam multiplan!)
 22397                                  ;
 22398 00004C2A 8A04                    	MOV	AL,[SI]
 22399 00004C2C E81D0A                  	call	PATHCHRCMP		; is it a path char?
 22400 00004C2F 7517                    	JNZ	short ParseDev		; no, go attempt to parse device
 22401 00004C31 46                      	INC	SI			; simulate LODSB
 22402                                  ;
 22403                                  ; We have the leading path separator. Look for DEV part.
 22404                                  ;
 22405 00004C32 AD                      	LODSW
 22406 00004C33 0D2020                  	OR	AX,2020h
 22407 00004C36 3D6465                  	cmp	ax,"de"
 22408                                  	;CMP	AX,"e"<< 8 + "d"
 22409 00004C39 752D                    	JNZ	short NotDevice		; not "de", assume not device
 22410 00004C3B AC                      	LODSB
 22411 00004C3C 0C20                    	OR	AL,20h
 22412 00004C3E 3C76                    	CMP	AL,"v"                  ; Not "v", assume not device
 22413 00004C40 7526                    	JNZ	short NotDevice
 22414 00004C42 AC                      	LODSB
 22415 00004C43 E8060A                  	call	PATHCHRCMP		; do we have the last path separator?
 22416 00004C46 7520                    	JNZ	short NotDevice		; no. go for it.
 22417                                  ;
 22418                                  ; DS:SI now points to a potential drive. Preserve them as NameTrans advances
 22419                                  ; SI and DevName may destroy DS.
 22420                                  ;
 22421                                  ParseDev:
 22422 00004C48 1E                      	push	ds
 22423 00004C49 56                      	push	si			; preserve the source pointer
 22424 00004C4A E89509                  	call	NameTrans		; advance DS:SI
 22425 00004C4D 803C00                  	CMP	BYTE [SI],0		; parse entire string?
 22426 00004C50 F9                      	STC				; simulate a Carry return from DevName
 22427 00004C51 750B                    	JNZ	short SkipSearch	; no parse. simulate a file return.
 22428                                  
 22429                                  ;hkn; SS is DOSDATA
 22430 00004C53 16                      	push	ss
 22431 00004C54 1F                      	pop	ds
 22432                                  
 22433                                  ; M026 - start - fix ported from ROMDOS2 for bug # 2849
 22434                                  ;
 22435                                  ; SR;
 22436                                  ; We have to set Attrib before invoking DevName. Otherwise, the value from
 22437                                  ; a previous DOS call is used and DevName thinks it is not a device if the
 22438                                  ; old call set the volume attribute bit.
 22439                                  ;
 22440 00004C55 A0[0805]                	mov	al,[SATTRIB]
 22441 00004C58 A2[0605]                	mov	[ATTRIB],al		;set Attrib for DevName
 22442                                  
 22443                                  ; M026 - end
 22444                                  
 22445 00004C5B E886FE                  	call	DEVNAME
 22446                                  
 22447                                  SkipSearch:
 22448 00004C5E 5E                      	pop	si
 22449 00004C5F 1F                      	pop	ds
 22450                                  ;
 22451                                  ; SI points to the beginning of the potential device. If we have a device
 22452                                  ; then we do not change SI. If we have a file, then we reset SI back to the
 22453                                  ; original value. At this point Carry set indicates FILE.
 22454                                  ;
 22455                                  CheckReturn:
 22456 00004C60 5F                      	pop	di			; get original SI
 22457 00004C61 7302                    	JNC	short Check_Done	; if device then do not reset pointer
 22458 00004C63 89FE                    	MOV	SI,DI
 22459                                  Check_Done:
 22460 00004C65 5F                      	pop	di
 22461 00004C66 F5                      	CMC				; invert carry. Carry => device
 22462 00004C67 C3                      	retn
 22463                                  NotDevice:
 22464 00004C68 F9                      	STC
 22465 00004C69 EBF5                    	JMP	short CheckReturn
 22466                                  
 22467                                  ;BREAK <LookupPath - call fastopen to get dir entry info>
 22468                                  ;-----------------------------------------------------------------------------
 22469                                  ;
 22470                                  ; Procedure Name : LookupPath
 22471                                  ;
 22472                                  ; Output  DS:SI -> path name,
 22473                                  ;	  ES:DI -> dir entry info buffer
 22474                                  ;	  ES:CX -> extended dir info buffer
 22475                                  ;
 22476                                  ;	  carry flag clear : tables pointed by ES:DI and ES:CX are filled by
 22477                                  ;			     FastOpen, DS:SI points to char just one after
 22478                                  ;			     the last char of path name which is fully or
 22479                                  ;			     partially found in FastOPen
 22480                                  ;	  carry flag set : FastOpen not in memory or path name not found
 22481                                  ;
 22482                                  ;----------------------------------------------------------------------------
 22483                                  
 22484                                  LookupPath:
 22485                                  ;	PUSH	AX
 22486                                  
 22487                                  ;hkn; SS override
 22488                                  	;test	byte [ss:FastOpenFlg],1
 22489 00004C6B 36F606[6E0F]01          	TEST	byte [ss:FastOpenFlg],FastOpen_Set  ; flg is set in DOSPEN
 22490 00004C71 7502                    	JNZ	short FASTINST			    ; and this routine is
 22491                                  NOLOOK:
 22492 00004C73 EB6A                    	JMP	NOLOOKUP			    ; executed once
 22493                                  
 22494                                  FASTINST:
 22495                                  ;hkn; SS override
 22496                                  	;test	byte [ss:FastOpenFlg],8
 22497 00004C75 36F606[6E0F]08          	TEST	byte [ss:FastOpenFlg],No_Lookup	    ; no more lookup?
 22498 00004C7B 75F6                    	JNZ	short NOLOOK			    ; yes
 22499                                  
 22500 00004C7D BB[430F]                	MOV	BX,FastOpenTable		    ; get fastopen related tab
 22501                                  
 22502                                  ;hkn; SS override
 22503 00004C80 368B36[4A05]            	MOV	SI,[SS:WFP_START]		    ; si points to path name
 22504 00004C85 BF[4E0F]                	MOV	DI,Dir_Info_Buff
 22505 00004C88 B9[490F]                	MOV	CX,FastOpen_Ext_Info
 22506 00004C8B B001                    	MOV	AL,FONC_Look_up 		    ; al = 1
 22507 00004C8D 1E                      	PUSH	DS
 22508 00004C8E 07                      	POP	ES
 22509                                  
 22510                                  ;hkn; SS override
 22511                                  	;call	far [bx+2]
 22512 00004C8F FF5F02                  	CALL	far [BX+fastopen_entry.name_caching] ;call fastopen
 22513 00004C92 723A                    	JC	short NOTFOUND			    ; fastopen not in memory
 22514                                  
 22515 00004C94 8D5CFE                  	LEA	BX,[SI-2]
 22516                                  
 22517                                  ;hkn; SS override
 22518 00004C97 363B1E[4A05]            	CMP	BX,[SS:WFP_START]		    ; path found ?
 22519 00004C9C 7430                    	JZ	short NOTFOUND			    ; no
 22520                                  
 22521                                  	; MSDOSD 6.0				    ; fully or partially found
 22522                                  	;CMP	BYTE [SI],0			    ;AN000;FO.
 22523                                  	;JNZ	short parfnd			    ;AN000;FO.; partiallyfound
 22524                                  	;PUSH	CX				    ;AN000;FO.; is attribute matched ?
 22525                                  
 22526                                  ;hkn; SS override for attrib/sattrib
 22527                                  	;MOV	CL,[ss:ATTRIB]			    ;AN000;FO.;
 22528                                  	;MOV	CH,[ss:SATTRIB]			    ;AN000;FO.; attrib=sattrib
 22529                                  	;MOV	[ss:ATTRIB],CH			    ;AN000;FO.;
 22530                                  	;MOV	CH,[ES:DI+dir_entry.dir_attr]	    ;AN000;FO.;
 22531                                  	;call	Matchattributes 		    ;AN000;FO.;
 22532                                  ;;;	MOV	[ss:ATTRIB],CL			    ;AN001;FO.; restore attrib
 22533                                  	;POP	CX				    ;AN000;FO.;
 22534                                  	;JNZ	short NOLOOKUP			    ;AN000;FO.; not matched
 22535                                  ;parfnd:
 22536                                  
 22537                                  ;hkn; SS override
 22538 00004C9E 368936[6F0F]            	MOV	[SS:Next_Element_Start],SI	    ; save si
 22539 00004CA3 89CB                    	MOV	BX,CX
 22540                                  	; MSDOS 6.0
 22541                                  	;MOV	AX,[BX+FEI.lastent]		    ;AN000;;FO. restore lastentry
 22542                                  ;hkn; SS override for LASTENT, DIRSTART, CLUSNUM
 22543                                  	;MOV	[SS:LASTENT],AX			    ;AN000;;FO.
 22544                                  	;MOV	AX,[BX+FEI.dirstart]		    ;AN001;;FO. restore dirstart
 22545                                  	;MOV	[SS:DIRSTART],AX			    ;AN001;;FO.
 22546                                  	; MSDOS 3.3 (& MSDOS 6.0)
 22547                                  	;mov	ax,[bx+3] ; MSDOS 3.3
 22548 00004CA5 8B4703                  	MOV	AX,[BX+FEI.clusnum]		    ; restore next cluster num
 22549 00004CA8 36A3[5405]              	MOV	[SS:CLUSNUM],AX			    ;
 22550                                  
 22551 00004CAC 06                      	PUSH	ES				    ; save ES
 22552                                  ;hkn; SS override
 22553 00004CAD 36C41E[2405]            	LES	BX,[SS:THISDPB]			    ; put drive id
 22554 00004CB2 268A27                  	mov	ah,[ES:BX] ; 15/08/2018
 22555                                  	;MOV	AH,[ES:BX+DPB.DRIVE]		    ; in AH for DOOPEN
 22556 00004CB5 07                      	POP	ES				    ; pop ES
 22557                                  ;SR;
 22558                                  ; We cannot have a root dir if we have come here. So, we zero out CurBuf to
 22559                                  ;indicate it is not a root dir
 22560                                  ;
 22561 00004CB6 36C706[7405]0000        	mov	word [SS:CURBUF],0		    ; indicate not root dir
 22562                                  
 22563 00004CBD 368C06[7605]            	MOV	WORD [SS:CURBUF+2],ES		    ; [curbuf+2].bx points to
 22564 00004CC2 89FB                    	MOV	BX,DI				    ; start of entry
 22565                                  	;lea	si,[di+1Ah]
 22566 00004CC4 8D751A                  	LEA	SI,[DI+dir_entry.dir_first]	    ; [curbuf+2]:si points to
 22567                                  						    ; dir_first field in the
 22568                                  						    ; dir entry
 22569                                  ;hkn; SS override for FastOpenFlg
 22570                                  	;or	byte [ss:FastOpenFlg],2
 22571 00004CC7 36800E[6E0F]12          	OR	byte [SS:FastOpenFlg],Lookup_Success+Set_For_Search
 22572                                  ;	POP	AX
 22573 00004CCD C3                      	RETN
 22574                                  NOTFOUND:
 22575 00004CCE 83F8FF                  	CMP	AX,-1				    ; not in memory ?
 22576 00004CD1 7506                    	JNZ	short Partial_Success 		    ; yes, in memory
 22577 00004CD3 36C606[6E0F]00          	MOV	byte [SS:FastOpenFlg],0		    ; no more fastopen
 22578                                  Partial_Success:
 22579                                  	;and	byte [SS:FastOpenFlg],0FBh
 22580 00004CD9 368026[6E0F]FB          	AND	byte [SS:FastOpenFlg],Special_Fill_Reset
 22581                                  NOLOOKUP:
 22582                                  ;	POP	AX
 22583 00004CDF F9                      	STC
 22584 00004CE0 C3                      	RETN
 22585                                  
 22586                                  ;BREAK <InsertPath - call fastopen to insert dir entry info>
 22587                                  ;-----------------------------------------------------------------------------
 22588                                  ;
 22589                                  ; Procedure Name : InsertPath
 22590                                  ; Input:  FastOpen_Set flag set when from DOSOPEN otherwise 0
 22591                                  ;	  Lookup_Success flag set when got dir entry info from FASTOPEN
 22592                                  ;	  DS = DOSDATA
 22593                                  ; Output: FastOPen_Ext_Info is set and path dir info is inserted
 22594                                  ;
 22595                                  ;-----------------------------------------------------------------------------
 22596                                  
 22597                                  InsertPath:
 22598 00004CE1 9C                      	PUSHF
 22599                                  ;hkn; SS override for FastOpenFlag
 22600                                  	;test	byte [SS:FastOpenFlg], 1
 22601 00004CE2 36F606[6E0F]01          	TEST	byte [SS:FastOpenFlg],FastOpen_Set ;only DOSOPEN can take advantage of
 22602 00004CE8 7465                    	JZ	short GET_NEXT_ELEMENT		; the FastOpen
 22603                                  	;test	byte [ss:FastOpenFlg],2
 22604 00004CEA 36F606[6E0F]02          	TEST	byte [SS:FastOpenFlg],Lookup_Success ; Lookup just happened
 22605 00004CF0 740D                    	JZ	short INSERT_DIR_INFO		; no
 22606                                  	;and	byte [ss:FastOpenFlg],0FDh
 22607 00004CF2 368026[6E0F]FD          	AND	byte [SS:FastOpenFlg],Lookup_Reset  ; we got dir info from fastopen so
 22608 00004CF8 368B3E[6F0F]            	MOV	DI,[SS:Next_Element_Start]	; no need to insert it again
 22609 00004CFD EB4A                    	JMP	short GET_NEXT2
 22610                                  INSERT_DIR_INFO:				; save registers
 22611 00004CFF 1E                      	PUSH	DS
 22612 00004D00 06                      	PUSH	ES
 22613 00004D01 53                      	PUSH	BX
 22614 00004D02 56                      	PUSH	SI
 22615 00004D03 57                      	PUSH	DI
 22616 00004D04 51                      	PUSH	CX
 22617 00004D05 50                      	PUSH	AX
 22618                                  
 22619                                  ;hkn; SS override
 22620 00004D06 36C53E[7405]            	LDS	DI,[SS:CURBUF]			; DS:DI -> buffer header
 22621 00004D0B BE[490F]                	MOV	SI,FastOpen_Ext_Info
 22622                                  	;mov	ax,[di+6]
 22623 00004D0E 8B4506                  	MOV	AX,[DI+BUFFINFO.buf_sector]	; get directory sector
 22624                                  	; 22/07/2019
 22625                                  	; MSDOS 6.0
 22626                                  	;MOV	[SS:SI+FEI.dirsec],AX 		;AN000; >32mb save dir sector
 22627                                  	;MOV	AX,[DI+BUFFINFO.buf_sector+2]	;AN000; >32mb
 22628                                  
 22629                                  ;hkn; SS is DOSDATA
 22630 00004D11 16                      	push	ss
 22631 00004D12 1F                      	pop	ds
 22632                                  	; MSDOS 6.0
 22633                                  	;MOV	[SI+FEI.dirsec+2],AX  ;AN000;>32mb save high dir sector
 22634                                  	; MSDOS 3.3	
 22635                                  	;mov	[si+1],ax	
 22636 00004D13 894401                  	MOV	[SI+FEI.dirsec],AX
 22637                                  	; MSDOS 3.3 (& MSDOS 6.0)
 22638 00004D16 A1[5405]                	MOV	AX,[CLUSNUM]		; save next cluster number
 22639                                  	;;mov	[si+5],ax ; MSDOS 6.0
 22640                                  	;mov	[si+3],ax ; MSDOS 3.3
 22641 00004D19 894403                  	MOV	[SI+FEI.clusnum],AX
 22642                                  	; MSDOS 6.0
 22643                                  	;MOV	AX,[LASTENT]		;AN000;FO. save lastentry for search first
 22644                                  	;MOV	[SI+FEI.lastent],AX	;AN000;FO.
 22645                                  	;MOV	AX,[DIRSTART]		;AN001;FO. save  for search first
 22646                                  	;MOV	[SI+FEI.dirstart],AX	;AN001;FO.
 22647                                  	; MSDOS 3.3 (& MSDOS 6.0)
 22648 00004D1C 89D8                    	MOV	AX,BX
 22649                                  	;add	di,16
 22650 00004D1E 83C710                  	ADD	DI,BUFINSIZ		; DS:DI -> start of data in buffer
 22651 00004D21 29F8                    	SUB	AX,DI			; AX=BX relative to start of sector
 22652                                  	;mov	cl,32
 22653 00004D23 B120                    	MOV	CL,dir_entry.size
 22654 00004D25 F6F1                    	DIV	CL
 22655                                  	;MOV	[SI+FEI.dirpos],AL	; save directory entry # in buffer
 22656 00004D27 8804                    	mov	[si],al
 22657                                  
 22658 00004D29 1E                      	PUSH	DS
 22659 00004D2A 07                      	POP	ES
 22660                                  
 22661 00004D2B 8E1E[7605]              	MOV	DS,[CURBUF+2]
 22662 00004D2F 89DF                    	MOV	DI,BX			; DS:DI -> dir entry info
 22663                                  	;cmp	word [di+1Ah],0
 22664 00004D31 837D1A00                	CMP	word [DI+dir_entry.dir_first],0 
 22665                                  					; never insert info when file is empty
 22666 00004D35 740B                    	JZ	short SKIP_INSERT	; e.g. newly created file
 22667                                  
 22668 00004D37 56                      	PUSH	SI			; ES:BX -> extended info
 22669 00004D38 5B                      	POP	BX
 22670                                  
 22671                                  	;mov	al,2
 22672 00004D39 B002                    	MOV	AL,FONC_insert		; call fastopen insert operation
 22673 00004D3B BE[430F]                	MOV	SI,FastOpenTable
 22674                                  	;call	far [es:si+2]
 22675 00004D3E FF5C02                  	CALL	far [SI+fastopen_entry.name_caching]
 22676                                  
 22677 00004D41 F8                      	CLC
 22678                                  SKIP_INSERT:
 22679 00004D42 58                      	POP	AX
 22680 00004D43 59                      	POP	CX			; restore registers
 22681 00004D44 5F                      	POP	DI
 22682 00004D45 5E                      	POP	SI
 22683 00004D46 5B                      	POP	BX
 22684 00004D47 07                      	POP	ES
 22685 00004D48 1F                      	POP	DS
 22686                                  GET_NEXT2:
 22687                                  	;or	[ss:FastOpenFlg],8
 22688 00004D49 36800E[6E0F]08          	OR	byte [SS:FastOpenFlg],No_Lookup
 22689                                  					; we got dir info from fastopen so
 22690                                  GET_NEXT_ELEMENT:
 22691 00004D4F 9D                      	POPF
 22692 00004D50 C3                      	RETN
 22693                                  
 22694                                  ;============================================================================
 22695                                  ; DEV.ASM, MSDOS 6.0, 1991
 22696                                  ;============================================================================
 22697                                  ; 28/07/2018 - Retro DOS v3.0
 22698                                  
 22699                                  ; DEV.ASM: Retro DOS v2.0 - 14/03/2018
 22700                                  
 22701                                  ;TITLE   DEV - Device call routines
 22702                                  ;NAME    Dev
 22703                                  
 22704                                  ;Break	<IOFUNC -- DO FUNCTION 1-12 I/O>
 22705                                  ;----------------------------------------------------------------------------
 22706                                  ;
 22707                                  ; Procedure Name : IOFUNC
 22708                                  ;
 22709                                  ; Inputs:
 22710                                  ;	DS:SI Points to SFT
 22711                                  ;	AH is function code
 22712                                  ;		= 0 Input
 22713                                  ;		= 1 Input Status
 22714                                  ;		= 2 Output
 22715                                  ;		= 3 Output Status
 22716                                  ;		= 4 Flush
 22717                                  ;		= 5 Input Status - System WAIT invoked for K09 if no char
 22718                                  ;				   present.
 22719                                  ;	AL = character if output
 22720                                  ; Function:
 22721                                  ;	Perform indicated I/O to device or file
 22722                                  ; Outputs:
 22723                                  ;	AL is character if input
 22724                                  ;	If a status call
 22725                                  ;		zero set if not ready
 22726                                  ;		zero reset if ready (character in AL for input status)
 22727                                  ; For regular files:
 22728                                  ;	Input Status
 22729                                  ;		Gets character but restores position
 22730                                  ;		Zero set on EOF
 22731                                  ;	Input
 22732                                  ;		Gets character advances position
 22733                                  ;		Returns ^Z on EOF
 22734                                  ;	Output Status
 22735                                  ;		Always ready
 22736                                  ; AX altered, all other registers preserved
 22737                                  ;----------------------------------------------------------------------------
 22738                                  
 22739                                  IOFUNC:
 22740 00004D51 368C16[3403]            	MOV	[SS:IOXAD+2],SS		; SS override for IOXAD, IOSCNT, 
 22741                                  					; DEVIOBUF
 22742 00004D56 36C706[3203][5E03]      	MOV	WORD [SS:IOXAD],DEVIOBUF
 22743 00004D5D 36C706[3603]0100        	MOV	WORD [SS:IOSCNT],1
 22744 00004D64 36A3[5E03]              	MOV	WORD [SS:DEVIOBUF],AX
 22745                                  	;test	word [si+5],8000h
 22746 00004D68 F744050080              	TEST	word [SI+SF_ENTRY.sf_flags],sf_isnet
 22747 00004D6D 7403                    	JZ	short IOTO22		;AN000;
 22748 00004D6F E98500                  	JMP	IOTOFILE		;AN000;
 22749                                  IOTO22:
 22750                                  	;test	word [si+5],80h ; 17/05/2019
 22751 00004D72 F744058000              	TEST	word [SI+SF_ENTRY.sf_flags],devid_device 
 22752 00004D77 7502                    	JNZ	short IOTO33		;AN000;
 22753 00004D79 EB7C                    	JMP	IOTOFILE		;AN000;
 22754                                  IOTO33:
 22755 00004D7B E87AC8                  	call	save_world
 22756 00004D7E 8CDA                    	MOV	DX,DS
 22757 00004D80 8CD3                    	MOV	BX,SS
 22758 00004D82 8EDB                    	MOV	DS,BX
 22759 00004D84 8EC3                    	MOV	ES,BX
 22760 00004D86 31DB                    	XOR	BX,BX
 22761 00004D88 80FC05                  	cmp	ah,5		    ; system wait enabled?
 22762 00004D8B 7504                    	jnz	short _no_sys_wait
 22763 00004D8D 81CB0004                	or	bx,0400H	    ; Set bit 10 in status word for driver
 22764                                  				    ; It is up to device driver to carry out
 22765                                  				    ; appropriate action.
 22766                                  _no_sys_wait:
 22767 00004D91 891E[2703]              	MOV	[IOCALL_REQSTAT],BX
 22768 00004D95 31DB                    	XOR	BX,BX
 22769 00004D97 881E[3103]              	MOV	[IOMED],BL
 22770                                  
 22771 00004D9B 88E3                    	MOV	BL,AH		 	; get function
 22772 00004D9D 8AA7[0413]              	MOV	AH,[BX+LenTab]
 22773 00004DA1 D1E3                    	SHL	BX,1
 22774 00004DA3 8B8F[0A13]              	MOV	CX,[BX+CmdTab]
 22775 00004DA7 BB[2403]                	MOV	BX,IOCALL
 22776 00004DAA 8826[2403]              	MOV	[IOCALL_REQLEN],AH
 22777 00004DAE 882E[2603]              	MOV	[IOCALL_REQFUNC],CH
 22778                                  
 22779 00004DB2 8EDA                    	MOV	DS,DX
 22780 00004DB4 E84401                  	CALL	DEVIOCALL
 22781 00004DB7 368B3E[2703]            	MOV	DI,[SS:IOCALL_REQSTAT]	; SS override
 22782                                  	;test	di,8000h
 22783                                  	;jnz	short DevErr
 22784 00004DBC 21FF                    	and	di,di
 22785 00004DBE 7820                    	js	short DevErr
 22786                                  
 22787                                  OKDevIO:
 22788 00004DC0 8CD0                    	MOV	AX,SS
 22789 00004DC2 8ED8                    	MOV	DS,AX
 22790                                  
 22791                                  	;cmp	ch, 5
 22792 00004DC4 80FD05                  	CMP	CH,DEVRDND
 22793 00004DC7 7506                    	JNZ	short DNODRD
 22794 00004DC9 A0[3103]                	MOV	AL,[IORCHR]
 22795 00004DCC A2[5E03]                	MOV	[DEVIOBUF],AL
 22796                                  
 22797                                  DNODRD: 
 22798 00004DCF 8A26[2803]              	MOV	AH,[IOCALL_REQSTAT+1]
 22799 00004DD3 F6D4                    	NOT	AH			; Zero = busy, not zero = ready
 22800                                  	;and	ah,2
 22801 00004DD5 80E402                  	AND	AH,STBUI>>8
 22802                                  
 22803                                  QuickReturn:				;AN000; 2/13/KK
 22804 00004DD8 E80AC8                  	call	restore_world
 22805                                  
 22806                                  	; SR;
 22807                                  	; We return ax = -1 if the user failed on I24. This is the case if 
 22808                                  	; IoStatFail = -1 (set after return from the I24)
 22809                                  	;
 22810                                  
 22811                                  	; MSDOS 6.0
 22812                                  	;pushf
 22813                                  	;mov	al,[ss:IoStatFail]	;assume fail error
 22814                                  	;cbw				;sign extend to word
 22815                                  	;cmp	ax,-1
 22816                                  	;jne	short not_fail_ret
 22817                                  	;inc	byte [ss:IoStatFail]
 22818                                  	;popf
 22819                                  	;retn
 22820                                  
 22821                                  ;not_fail_ret:
 22822 00004DDB 36A1[5E03]              	MOV	AX,[SS:DEVIOBUF]	;ss override
 22823                                  	;popf
 22824 00004DDF C3                      	retn
 22825                                  
 22826                                  ;IOTOFILEJ:
 22827                                  ;	JMP	SHORT IOTOFILE
 22828                                  
 22829                                  DevErr:
 22830 00004DE0 88CC                    	MOV	AH,CL
 22831 00004DE2 E8490A                  	call	CHARHARD
 22832 00004DE5 3C01                    	CMP	AL,1
 22833 00004DE7 7506                    	JNZ	short NO_RETRY
 22834 00004DE9 E8F9C7                  	call	restore_world		
 22835 00004DEC E962FF                  	JMP	IOFUNC	; 10/08/2018
 22836                                  
 22837                                  NO_RETRY:
 22838                                  
 22839                                  	; Know user must have wanted Ignore OR Fail. Make sure device shows ready
 22840                                  	; ready so that DOS doesn't get caught in a status loop when user 
 22841                                  	; simply wants to ignore the error.
 22842                                  	;
 22843                                  	; SR; If fail wanted by user set ax to special value (ax = -1). This 
 22844                                  	; should be checked by the caller on return
 22845                                  	;
 22846                                  
 22847                                  					; SS override
 22848 00004DEF 368026[2803]FD          	and	byte [SS:IOCALL_REQSTAT+1],0FDh
 22849                                  	;AND	BYTE [SS:IOCALL_REQSTAT+1],~(STBUI >> 8)
 22850                                  
 22851                                  	; SR;
 22852                                  	; Check if user failed
 22853                                  	;
 22854                                  
 22855                                  	; MSDOS 6.0
 22856                                  	;cmp	al,3
 22857                                  	;jnz	short not_fail
 22858                                  	;dec	byte [ss:IoStatFail]	;set flag indicating fail on I24
 22859                                  ;not_fail:
 22860 00004DF5 EBC9                    	JMP	short OKDevIO
 22861                                  
 22862                                  IOTOFILE:
 22863 00004DF7 08E4                    	OR	AH,AH
 22864 00004DF9 7423                    	JZ	short IOIN
 22865 00004DFB FECC                    	DEC	AH
 22866 00004DFD 7405                    	JZ	short IOIST
 22867 00004DFF FECC                    	DEC	AH
 22868 00004E01 7411                    	JZ	short IOUT
 22869 00004E03 C3                      	retn				; NON ZERO FLAG FOR OUTPUT STATUS
 22870                                  
 22871                                  IOIST:
 22872                                  	;push	word [si+15h]
 22873 00004E04 FF7415                  	PUSH	WORD [SI+SF_ENTRY.sf_position]   ; Save position
 22874                                  	;push	word [si+17h]
 22875 00004E07 FF7417                  	PUSH	WORD [SI+SF_ENTRY.sf_position+2]
 22876 00004E0A E81100                  	CALL	IOIN
 22877                                  	;pop	word [si+17h]
 22878 00004E0D 8F4417                  	POP	WORD [SI+SF_ENTRY.sf_position+2] ; Restore position
 22879                                  	;pop	word [si+15h]
 22880 00004E10 8F4415                  	POP	WORD [SI+SF_ENTRY.sf_position]
 22881 00004E13 C3                      	retn
 22882                                  
 22883                                  IOUT:
 22884 00004E14 E81B00                  	CALL	SETXADDR
 22885 00004E17 E86BF1                  	call	DOS_WRITE
 22886 00004E1A E84800                  	CALL	RESTXADDR	; If you change this into a jmp don't
 22887                                  IOUT_retn:
 22888 00004E1D C3                      	retn			; come crying to me when things don't
 22889                                  				; work ARR
 22890                                  IOIN:
 22891 00004E1E E81100                  	CALL	SETXADDR
 22892                                  					; SS override for DOS34_FLAG
 22893                                  	;OR	word [SS:DOS34_FLAG],Disable_EOF_I24	;AN000;
 22894 00004E21 E8E0EF                  	CALL	DOS_READ
 22895                                  	;AND	word [SS:DOS34_FLAG],NO_Disable_EOF_I24 ;AN000;
 22896 00004E24 09C9                    	OR	CX,CX			; Check EOF
 22897 00004E26 E83C00                  	CALL	RESTXADDR
 22898                                  					; SS override
 22899 00004E29 36A0[5E03]              	MOV	AL,[SS:DEVIOBUF]	; Get byte from trans addr
 22900 00004E2D 75EE                    	jnz	short IOUT_retn	
 22901 00004E2F B01A                    	MOV	AL,1AH			; ^Z if no bytes
 22902 00004E31 C3                      	retn
 22903                                  
 22904                                  SETXADDR:
 22905                                  					; SS override
 22906 00004E32 368F06[1803]            	POP	WORD [SS:CALLSCNT]	; Return address
 22907                                  
 22908 00004E37 E8BEC7                  	call	save_world
 22909                                  
 22910                                  					; SS override for DMAADD and THISSFT
 22911 00004E3A 36FF36[DA02]            	PUSH	WORD [SS:DMAADD]	; Save Disk trans addr
 22912 00004E3F 36FF36[DC02]            	PUSH	WORD [SS:DMAADD+2]
 22913 00004E44 368C1E[3805]            	MOV	[SS:THISSFT+2],DS
 22914                                  
 22915 00004E49 16                      	push	ss
 22916 00004E4A 1F                      	pop	ds
 22917                                  
 22918 00004E4B 8936[3605]              	MOV	[THISSFT],SI		; Finish setting SFT pointer
 22919 00004E4F 8B0E[3403]              	MOV	CX,[IOXAD+2]
 22920 00004E53 890E[DC02]              	MOV	[DMAADD+2],CX
 22921 00004E57 8B0E[3203]              	MOV	CX,[IOXAD]
 22922 00004E5B 890E[DA02]              	MOV	[DMAADD],CX		; Set byte trans addr
 22923 00004E5F 8B0E[3603]              	MOV	CX,[IOSCNT]		; ioscnt specifies length of buffer
 22924 00004E63 EB0F                    	JMP	SHORT RESTRET		; RETURN ADDRESS
 22925                                  
 22926                                  RESTXADDR:
 22927 00004E65 8F06[1803]              	POP	WORD [CALLSCNT]		; Return address
 22928 00004E69 8F06[DC02]              	POP	WORD [DMAADD+2]		; Restore Disk trans addr
 22929 00004E6D 8F06[DA02]              	POP	WORD [DMAADD]
 22930                                  
 22931 00004E71 E871C7                  	call	restore_world
 22932                                  					; SS override
 22933                                  RESTRET:
 22934 00004E74 36FF26[1803]            	JMP	WORD [SS:CALLSCNT]	; Return address
 22935                                  
 22936                                  
 22937                                  ; 29/07/2018 - Retro DOS v3.0
 22938                                  ; IBMDOS.COM (1987) - Offset 4D82h
 22939                                  
 22940                                  ;Break <DEV_OPEN_SFT, DEV_CLOSE_SFT - OPEN or CLOSE A DEVICE>
 22941                                  
 22942                                  ;----------------------------------------------------------------------------
 22943                                  ;**	Dev_Open_SFT - Open the Device for an SFT
 22944                                  ;
 22945                                  ;	Dev_Open_SFT issues an open call to the device associated with
 22946                                  ;	the SFT.
 22947                                  ;
 22948                                  ;	ENTRY	(ES:DI) = SFT
 22949                                  ;	EXIT	none
 22950                                  ;	USES	all
 22951                                  ;----------------------------------------------------------------------------
 22952                                  
 22953                                  DEV_OPEN_SFT:
 22954 00004E79 E87CC7                  	call	save_world
 22955                                  	;mov	al,0Dh	
 22956 00004E7C B00D                    	MOV	AL,DEVOPN
 22957 00004E7E EB05                    	JMP	SHORT DO_OPCLS
 22958                                  
 22959                                  ;----------------------------------------------------------------------------
 22960                                  ; Procedure Name : DEV_CLOSE_SFT
 22961                                  ;
 22962                                  ; Inputs:
 22963                                  ;	ES:DI Points to SFT
 22964                                  ; Function:
 22965                                  ;	Issue a CLOSE call to the correct device
 22966                                  ; Outputs:
 22967                                  ;	None
 22968                                  ; ALL preserved
 22969                                  ;----------------------------------------------------------------------------
 22970                                  
 22971                                  DEV_CLOSE_SFT:
 22972 00004E80 E875C7                  	call	save_world
 22973                                  	;mov	al,0Eh	
 22974 00004E83 B00E                    	MOV	AL,DEVCLS
 22975                                  
 22976                                  	; Main entry for device open and close. AL contains the function 
 22977                                  	; requested. Subtlety: if Sharing is NOT loaded then we do NOT issue 
 22978                                  	; open/close to block devices. This allows networks to function but 
 22979                                  	; does NOT hang up with bogus change-line code.
 22980                                  
 22981                                  	;entry	DO_OPCLS
 22982                                  DO_OPCLS:
 22983                                  	; Is the SFT for the net?  If so, no action necessary.
 22984                                  
 22985                                  	; MSDOS 3.3
 22986                                  	;call	IsSFTNet
 22987                                  	;jnz	short OPCLS_DONE
 22988                                  
 22989                                  	; MSDOS 6.0
 22990                                  	;test	word [es:di+5],8000h
 22991 00004E85 26F745050080            	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 22992 00004E8B 756A                    	JNZ	short OPCLS_DONE	; NOP on net SFTs
 22993 00004E8D 30E4                    	XOR	AH,AH			; Unit
 22994                                  	;test	word [es:di+5],80h
 22995 00004E8F 26F745058000            	TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 22996                                  	;les	di,[es:di+7]
 22997 00004E95 26C47D07                	LES	DI,[ES:DI+SF_ENTRY.sf_devptr] ; Get DPB or device
 22998 00004E99 7513                    	JNZ	short GOT_DEV_ADDR
 22999                                  
 23000                                  	; We are about to call device open/close on a block driver. If no 
 23001                                  	; sharing then just short circuit to done.
 23002                                  	
 23003                                  ;;;;;	invoke	CheckShare
 23004                                  
 23005                                  	; MSDOS 3.3
 23006                                  	;call	CheckShare	; cmp byte [cs:fShare],0
 23007                                  	;jz	short OPCLS_DONE
 23008                                  
 23009                                  	; MSDOS 6.0
 23010                                  					; SS override
 23011 00004E9B 36803E[B102]01          	CMP	byte [ss:fShare],1	;AN010; /NC or no SHARE
 23012 00004EA1 7654                    	JBE	short OPCLS_DONE	;AN010; yes
 23013                                  
 23014                                  	; MSDOS 3.3 (& MSDOS 6.0)
 23015                                  	;mov	ah,[es:di+1]
 23016 00004EA3 268A6501                	MOV	AH,[ES:DI+DPB.UNIT]	; (ah) = unit
 23017 00004EA7 268A0D                  	mov	cl,[es:di]
 23018                                  	;MOV	CL,[ES:DI+DPB.DRIVE]	; (cl) = drive
 23019                                  	;les	di,[es:di+12h]
 23020 00004EAA 26C47D12                	LES	DI,[ES:DI+DPB.DRIVER_ADDR] ; Get device
 23021                                  GOT_DEV_ADDR:				; ES:DI -> device
 23022                                  	;test	word [es:di+4],800h
 23023 00004EAE 26F745040008            	TEST	word [ES:DI+SYSDEV.ATT],DEVOPCL
 23024 00004EB4 7441                    	JZ	short OPCLS_DONE	; Device can't
 23025 00004EB6 06                      	PUSH	ES
 23026 00004EB7 1F                      	POP	DS
 23027 00004EB8 89FE                    	MOV	SI,DI			; DS:SI -> device
 23028                                  OPCLS_RETRY:
 23029                                  	;Context ES
 23030 00004EBA 16                      	push	ss
 23031 00004EBB 07                      	pop	es
 23032                                  					; DEVCALL is in DOSDATA
 23033 00004EBC BF[0603]                	MOV	DI,DEVCALL
 23034                                  
 23035 00004EBF 89FB                    	MOV	BX,DI
 23036 00004EC1 50                      	PUSH	AX
 23037                                  	;mov	al,13
 23038 00004EC2 B00D                    	MOV	AL,DOPCLHL
 23039 00004EC4 AA                      	STOSB				; Length
 23040 00004EC5 58                      	POP	AX
 23041 00004EC6 86E0                    	XCHG	AH,AL
 23042 00004EC8 AA                      	STOSB				; Unit
 23043 00004EC9 86E0                    	XCHG	AH,AL
 23044 00004ECB AA                      	STOSB				; Command
 23045 00004ECC 26C7050000              	MOV	WORD [ES:DI],0		; Status
 23046 00004ED1 50                      	PUSH	AX			; Save Unit,Command
 23047                                  	;invoke	DEVIOCALL2
 23048 00004ED2 E82900                  	call	DEVIOCALL2
 23049                                  
 23050                                  	;mov	di,[es:bx+3]
 23051 00004ED5 268B7F03                	MOV	DI,[ES:BX+SRHEAD.REQSTAT]
 23052                                  	;test	di,8000h
 23053                                  	;jz	short OPCLS_DONEP	
 23054 00004ED9 21FF                    	and	di,di
 23055 00004EDB 7919                    	jns	short OPCLS_DONEP	; No error
 23056                                  	;test	word [si+4],8000h
 23057                                  	; 22/11/2022 (!BugFix!)
 23058 00004EDD F744040080              	TEST	word [SI+SYSDEV.ATT],DEVTYP
 23059 00004EE2 7404                    	JZ	short BLKDEV
 23060 00004EE4 B486                    	MOV	AH,86H			; Read error in data, Char dev
 23061 00004EE6 EB04                    	JMP	SHORT HRDERR
 23062                                  
 23063                                  BLKDEV:
 23064 00004EE8 88C8                    	MOV	AL,CL			; Drive # in AL
 23065 00004EEA B406                    	MOV	AH,6			; Read error in data, Blk dev
 23066                                  HRDERR:
 23067                                  	;invoke	CHARHARD
 23068 00004EEC E83F09                  	call	CHARHARD
 23069 00004EEF 3C01                    	CMP	AL,1
 23070 00004EF1 7503                    	JNZ	short OPCLS_DONEP	; IGNORE or FAIL
 23071                                  					;  Note that FAIL is essentually IGNORED
 23072 00004EF3 58                      	POP	AX			; Get back Unit, Command
 23073 00004EF4 EBC4                    	JMP	short OPCLS_RETRY
 23074                                  
 23075                                  OPCLS_DONEP:
 23076 00004EF6 58                      	POP	AX			; Clean stack
 23077                                  OPCLS_DONE:
 23078 00004EF7 E8EBC6                  	call	restore_world
 23079 00004EFA C3                      	retn
 23080                                  
 23081                                  ;Break	<DEVIOCALL, DEVIOCALL2 - CALL A DEVICE>
 23082                                  ;----------------------------------------------------------------------------
 23083                                  ;**	DevIoCall  - Call Device
 23084                                  ;
 23085                                  ;	ENTRY	DS:SI Points to device SFT
 23086                                  ;		ES:BX Points to request data
 23087                                  ;	EXIT	DS:SI -> Device driver
 23088                                  ;	USES	DS:SI,AX
 23089                                  ;----------------------------------------------------------------------------
 23090                                  ;**	DevIoCall2 - Call Device
 23091                                  ;
 23092                                  ;	ENTRY	DS:SI Points to DPB
 23093                                  ;		ES:BX Points to request data
 23094                                  ;	EXIT	DS:SI -> Device driver
 23095                                  ;	USES	DS:SI,AX
 23096                                  ;----------------------------------------------------------------------------
 23097                                  
 23098                                  DEVIOCALL:
 23099                                  					; SS override for CALLSSEC, 
 23100                                  	;lds	si,[si+7]		; CALLNEWSC, HIGH_SECTOR & CALLDEVAD
 23101 00004EFB C57407                  	LDS	SI,[SI+SF_ENTRY.sf_devptr]
 23102                                  
 23103                                  	;entry	DEVIOCALL2
 23104                                  DEVIOCALL2:
 23105                                  	;EnterCrit critDevice
 23106 00004EFE E87BD1                  	call	EcritDevice
 23107                                  
 23108                                  	; MSDOS 6.0
 23109                                  	;TEST	word [SI+SYSDEV.ATT],DevTyp ;AN000; >32mb   block device ?
 23110                                  	;JNZ	short chardev2		;AN000; >32mb   no
 23111                                  	;CMP	byte [ES:BX+SRHEAD.REQFUNC],DEVRD  ;AN000; >32mb   read ?
 23112                                  	;JZ	short chkext		;AN000; >32mb   yes
 23113                                  	;CMP	byte [ES:BX+SRHEAD.REQFUNC],DEVWRT ;AN000; >32mb   write ?
 23114                                  	;JZ	short chkex		;AN000; >32mb   yes
 23115                                  	;CMP	byte [ES:BX+SRHEAD.REQFUNC],DEVWRTV
 23116                                  	;				;AN000; >32mb   write/verify ?
 23117                                  	;JNZ	short chardev2		;AN000; >32mb   no
 23118                                  ;chkext:
 23119                                  	;CALL	RW_SC			;AN000;LB. use secondary cache if there
 23120                                  	;JC	short dev_exit		;AN000;LB. done
 23121                                  	;
 23122                                  	;TEST	word [SI+SYSDEV.ATT],EXTDRVR ;AN000;>32mb   extended driver?
 23123                                  	;JZ	short chksector		;AN000;>32mb   no
 23124                                  	;ADD	BYTE [ES:BX],8		;AN000;>32mb   make length to 30
 23125                                  	;MOV	AX,[SS:CALLSSEC]	;AN000;>32mb
 23126                                  	;MOV	[SS:CALLSSEC],-1	;AN000;>32mb   old sector  =-1
 23127                                  	;MOV	[SS:CALLNEWSC],AX	;AN000;>32mb   new sector  =
 23128                                  	;MOV	AX,[SS:HIGH_SECTOR]	;AN000; >32mb  low sector,high sector
 23129                                  	;MOV	[SS:CALLNEWSC+2],AX	;AN000; >32mb
 23130                                  	;JMP	short chardev2		;AN000; >32mb
 23131                                  ;chksector:				;AN000; >32mb
 23132                                  	;CMP	word [SS:HIGH_SECTOR],0	;AN000; >32mb   if >32mb
 23133                                  	;JZ	short chardev2		;AN000; >32mb   then fake error
 23134                                  	;MOV	word [ES:BX+SRHEAD.REQSTAT],STERR+STDON+ERROR_I24_NOT_DOS_DISK 
 23135                                  	;				;AN000; >32mb
 23136                                  	;JMP	SHORT dev_exit		;AN000; >32mb
 23137                                  
 23138                                  ;chardev2:				;AN000;
 23139                                  
 23140                                  	; As above only DS:SI points to device header on entry, and DS:SI is 
 23141                                  	; preserved
 23142                                  
 23143                                  	;mov	ax,[si+6]
 23144 00004F01 8B4406                  	MOV	AX,[SI+SYSDEV.STRAT]
 23145 00004F04 36A3[2003]              	MOV	[SS:CALLDEVAD],AX
 23146 00004F08 368C1E[2203]            	MOV	[SS:CALLDEVAD+2],DS
 23147 00004F0D 36FF1E[2003]            	CALL	far [SS:CALLDEVAD]
 23148                                  	;mov	ax,[si+8]
 23149 00004F12 8B4408                  	MOV	AX,[SI+SYSDEV.INT]
 23150 00004F15 36A3[2003]              	MOV	[SS:CALLDEVAD],AX
 23151 00004F19 36FF1E[2003]            	CALL	far [SS:CALLDEVAD]
 23152                                  	; MSDOS 6.0
 23153                                  	;CALL	VIRREAD 		;AN000;LB. move data from SC to buffer
 23154                                  	;JC	short chardev2		;AN000;LB. bad sector or exceeds max sec
 23155                                  dev_exit:
 23156                                  	;LeaveCrit critDevice
 23157 00004F1E E863D1                  	call	LcritDevice
 23158 00004F21 C3                      	retn
 23159                                  
 23160                                  ;Break	<SETREAD, SETWRITE -- SET UP HEADER BLOCK>
 23161                                  ;---------------------------------------------------------------------------
 23162                                  ;
 23163                                  ; Procedure Name : SETREAD, SETWRITE
 23164                                  ;
 23165                                  ; Inputs:
 23166                                  ;	DS:BX = Transfer Address
 23167                                  ;	CX = Record Count
 23168                                  ;	DX = Starting Record
 23169                                  ;	AH = Media Byte
 23170                                  ;	AL = Unit Code
 23171                                  ; Function:
 23172                                  ;	Set up the device call header at DEVCALL
 23173                                  ; Output:
 23174                                  ;	ES:BX Points to DEVCALL
 23175                                  ; No other registers effected
 23176                                  ;
 23177                                  ;---------------------------------------------------------------------------
 23178                                  
 23179                                  SETREAD:
 23180 00004F22 57                      	PUSH	DI
 23181 00004F23 51                      	PUSH	CX
 23182 00004F24 50                      	PUSH	AX
 23183 00004F25 B104                    	MOV	CL,DEVRD ; mov cl,4
 23184                                  SETCALLHEAD:
 23185 00004F27 B016                    	MOV	AL,DRDWRHL ; mov al,16h
 23186 00004F29 16                      	PUSH	SS
 23187 00004F2A 07                      	POP	ES
 23188                                  					; DEVCALL is in DOSDATA
 23189 00004F2B BF[0603]                	MOV	DI,DEVCALL
 23190                                  
 23191 00004F2E AA                      	STOSB				; length
 23192 00004F2F 58                      	POP	AX
 23193 00004F30 AA                      	STOSB				; Unit
 23194 00004F31 50                      	PUSH	AX
 23195 00004F32 88C8                    	MOV	AL,CL
 23196 00004F34 AA                      	STOSB				; Command code
 23197 00004F35 31C0                    	XOR	AX,AX
 23198 00004F37 AB                      	STOSW				; Status
 23199 00004F38 83C708                  	ADD	DI,8			; Skip link fields
 23200 00004F3B 58                      	POP	AX
 23201 00004F3C 86E0                    	XCHG	AH,AL
 23202 00004F3E AA                      	STOSB				; Media byte
 23203 00004F3F 86C4                    	XCHG	AL,AH
 23204 00004F41 50                      	PUSH	AX
 23205 00004F42 89D8                    	MOV	AX,BX
 23206 00004F44 AB                      	STOSW
 23207 00004F45 8CD8                    	MOV	AX,DS
 23208 00004F47 AB                      	STOSW				; Transfer addr
 23209 00004F48 59                      	POP	CX			; Real AX
 23210 00004F49 58                      	POP	AX			; Real CX
 23211 00004F4A AB                      	STOSW				; Count
 23212 00004F4B 92                      	XCHG	AX,DX			; AX=Real DX, DX=real CX, CX=real AX
 23213 00004F4C AB                      	STOSW				; Start
 23214 00004F4D 91                      	XCHG	AX,CX
 23215 00004F4E 87D1                    	XCHG	DX,CX
 23216 00004F50 5F                      	POP	DI
 23217                                  					; DEVCALL is in DOSDATA
 23218 00004F51 BB[0603]                	MOV	BX,DEVCALL
 23219 00004F54 C3                      	retn
 23220                                  
 23221                                  	;entry	SETWRITE
 23222                                  SETWRITE:
 23223                                  
 23224                                  ; Inputs:
 23225                                  ;	DS:BX = Transfer Address
 23226                                  ;	CX = Record Count
 23227                                  ;	DX = Starting Record
 23228                                  ;	AH = Media Byte
 23229                                  ;	AL = Unit Code
 23230                                  ; Function:
 23231                                  ;	Set up the device call header at DEVCALL
 23232                                  ; Output:
 23233                                  ;	ES:BX Points to DEVCALL
 23234                                  ; No other registers effected
 23235                                  
 23236 00004F55 57                      	PUSH	DI
 23237 00004F56 51                      	PUSH	CX
 23238 00004F57 50                      	PUSH	AX
 23239 00004F58 B108                    	MOV	CL,DEVWRT ; mov cl,8
 23240 00004F5A 36020E[AD02]            	ADD	CL,[SS:VERFLG]		; SS override
 23241 00004F5F EBC6                    	JMP	SHORT SETCALLHEAD
 23242                                  
 23243                                  ;Break	<RW_SC -- Read Write Secondary Cache>
 23244                                  ;---------------------------------------------------------------------------
 23245                                  ;
 23246                                  ; Procedure Name : RW_SC
 23247                                  ;
 23248                                  ; Inputs:
 23249                                  ;	 [SC_CACHE_COUNT]= secondary cache count
 23250                                  ;	 [SC_STATUS]= SC validity status
 23251                                  ;	 [SEQ_SECTOR]= last sector read
 23252                                  ; Function:
 23253                                  ;	Read from or write through secondary cache
 23254                                  ; Output:
 23255                                  ;	ES:BX Points to DEVCALL
 23256                                  ;	carry clear, I/O is not done
 23257                                  ;		     [SC_FLAG]=1 if continuos sectors will be read
 23258                                  ;	carry set, I/O is done
 23259                                  ;
 23260                                  ;----------------------------------------------------------------------------
 23261                                  
 23262                                  ;procedure   RW_SC,NEAR		;AN000;
 23263                                  ;
 23264                                  ;	; SS override for all variables used.
 23265                                  ;
 23266                                  ;	CMP	[SC_CACHE_COUNT],0	;AN000;LB. secondary cache exists?
 23267                                  ;	JZ	scexit4 		;AN000;LB. no, do nothing
 23268                                  ;	CMP	[CALLSCNT],1		;AN000;LB. sector count = 1 (buffer I/O)
 23269                                  ;	JNZ	scexit4 		;AN000;LB. no, do nothing
 23270                                  ;	PUSH	CX			    ;AN000;;LB.
 23271                                  ;	PUSH	DX			    ;AN000;;LB. yes
 23272                                  ;	PUSH	DS			    ;AN000;;LB. save registers
 23273                                  ;	PUSH	SI			    ;AN000;;LB.
 23274                                  ;	PUSH	ES			    ;AN000;;LB.
 23275                                  ;	PUSH	DI			    ;AN000;;LB.
 23276                                  ;	MOV	DX,WORD PTR [CALLSSEC]	    ;AN000;;LB.  starting sector
 23277                                  ;	CMP	BYTE PTR [DEVCALL.REQFUNC],DEVRD ;AN000;LB. read ?
 23278                                  ;	JZ	doread			    ;AN000;LB. yes
 23279                                  ;	CALL	INVALIDATE_SC		    ;AN000;LB. invalidate SC
 23280                                  ;	JMP	scexit2 		    ;AN000;LB. back to normal
 23281                                  ;scexit4:				    ;AN000;
 23282                                  ;	CLC				    ;AN000;LB. I/O not done yet
 23283                                  ;	return				    ;AN000;LB.
 23284                                  ;doread: 				    ;AN000;
 23285                                  ;	CALL	SC2BUF			    ;AN000;LB. check if in SC
 23286                                  ;	JC	readSC			    ;AN000;LB.
 23287                                  ;	MOV	[DEVCALL.REQSTAT],STDON     ;AN000;LB. fake done and ok
 23288                                  ;	STC				    ;AN000;LB. set carry
 23289                                  ;	JMP	short saveseq 		    ;AN000;LB. save seq. sector #
 23290                                  ;readSC: 				    ;AN000;
 23291                                  ;	MOV	AX,WORD PTR [HIGH_SECTOR]   ;AN000;;LB. subtract sector num from
 23292                                  ;	MOV	CX,WORD PTR [CALLSSEC]	    ;AN000;;LB. saved sequential sector
 23293                                  ;	SUB	CX,WORD PTR [SEQ_SECTOR]    ;AN000;;LB. number
 23294                                  ;	SBB	AX,WORD PTR [SEQ_SECTOR+2]  ;AN000;;LB.
 23295                                  ;	CMP	AX,0			    ;AN000;;LB. greater than 64K
 23296                                  ;	JNZ	saveseq2		    ;AN000;;LB. yes,save seq. sector #
 23297                                  ;chklow: 						
 23298                                  ;	CMP	CX,1			    ;AN000;;LB. <= 1
 23299                                  ;	JA	saveseq2		    ;AN000;;LB. no, not sequential
 23300                                  ;	MOV	[SC_STATUS],-1		    ;AN000;;LB. prsume all SC valid
 23301                                  ;	MOV	AX,[SC_CACHE_COUNT]	    ;AN000;;LB. yes, sequential
 23302                                  ;	MOV	[CALLSCNT],AX		    ;AN000;;LB. read continuous sectors
 23303                                  ;readsr:
 23304                                  ;	MOV	AX,WORD PTR [CALLXAD+2]     ;AN000;;LB. save buffer addr
 23305                                  ;	MOV	[TEMP_VAR2],AX		    ;AN000;;LB. in temp vars
 23306                                  ;	MOV	AX,WORD PTR [CALLXAD]	    ;AN000;;LB.
 23307                                  ;	MOV	[TEMP_VAR],AX		    ;AN000;;LB.
 23308                                  ;						
 23309                                  ;	MOV	AX,WORD PTR [SC_CACHE_PTR]  ;AN000;LB. use SC cache addr as
 23310                                  ;	MOV	WORD PTR [CALLXAD],AX	    ;AN000;LB. transfer addr
 23311                                  ;	MOV	AX,WORD PTR [SC_CACHE_PTR+2] ;AN000;LB.
 23312                                  ;	MOV	WORD PTR [CALLXAD+2],AX     ;AN000;LB.
 23313                                  ;	MOV	[SC_FLAG],1		    ;AN000;LB. flag it for later;
 23314                                  ;	MOV	AL,[SC_DRIVE]		    ;AN000;;LB. current drive
 23315                                  ;	MOV	[CURSC_DRIVE],AL	    ;AN000;;LB. set current drive
 23316                                  ;	MOV	AX,WORD PTR [CALLSSEC]	    ;AN000;;LB. current sector
 23317                                  ;	MOV	[CURSC_SECTOR],AX	    ;AN000;;LB. set current sector
 23318                                  ;	MOV	AX,WORD PTR [HIGH_SECTOR]   ;AN000;;LB.
 23319                                  ;	MOV	[CURSC_SECTOR+2],AX	    ;AN000;;LB.
 23320                                  ;saveseq2:				    ;AN000;
 23321                                  ;	CLC				    ;AN000;LB. clear carry
 23322                                  ;saveseq:				    ;AN000;	
 23323                                  ;	MOV	AX,[HIGH_SECTOR]	    ;AN000;LB. save current sector #
 23324                                  ;	MOV	WORD PTR [SEQ_SECTOR+2],AX  ;AN000;LB. for access mode ref.
 23325                                  ;	MOV	AX,[CALLSSEC]		    ;AN000;LB.	
 23326                                  ;	MOV	WORD PTR [SEQ_SECTOR],AX    ;AN000;LB.	
 23327                                  ;	JMP	short scexit 		    ;AN000;LB.	
 23328                                  ;						
 23329                                  ;scexit2:				    ;AN000;LB.
 23330                                  ;	CLC				    ;AN000;LB.	clear carry
 23331                                  ;scexit: 				    ;AN000;		
 23332                                  ;	POP	DI			    ;AN000;;LB.
 23333                                  ;	POP	ES			    ;AN000;;LB. restore registers
 23334                                  ;	POP	SI			    ;AN000;;LB.
 23335                                  ;	POP	DS			    ;AN000;;LB.
 23336                                  ;	POP	DX			    ;AN000;;LB.
 23337                                  ;	POP	CX			    ;AN000;;LB.
 23338                                  ;	return				    ;AN000;;LB.
 23339                                  ;							
 23340                                  ;EndProc RW_SC				    ;AN000;
 23341                                  
 23342                                  ;Break	<IN_SC -- check if in secondary cache>
 23343                                  ;--------------------------------------------------------------------------
 23344                                  ;
 23345                                  ; Procedure Name : IN_SC
 23346                                  ;
 23347                                  ; Inputs:  [SC_DRIVE]= requesting drive
 23348                                  ;	   [CURSC_DRIVE]= current SC drive
 23349                                  ;	   [CURSC_SECTOR] = starting scetor # of SC
 23350                                  ;	   [SC_CACHE_COUNT] = SC count
 23351                                  ;	   [HIGH_SECTOR]:DX= sector number
 23352                                  ; Function:
 23353                                  ;	Check if the sector is in secondary cache
 23354                                  ; Output:
 23355                                  ;	carry clear, in SC
 23356                                  ;	   CX= the index in the secondary cache
 23357                                  ;	carry set, not in SC
 23358                                  ;
 23359                                  ;---------------------------------------------------------------------------
 23360                                  
 23361                                  ;procedure   IN_SC,NEAR		    ;AN000;
 23362                                  ;
 23363                                  ;	; SS override for all variables used
 23364                                  ;
 23365                                  ;	MOV	AL,[SC_DRIVE]		    ;AN000;;LB. current drive
 23366                                  ;	CMP	AL,[CURSC_DRIVE]	    ;AN000;;LB. same as SC drive
 23367                                  ;	JNZ	outrange2		    ;AN000;;LB. no
 23368                                  ;	MOV	AX,WORD PTR [HIGH_SECTOR]   ;AN000;;LB. subtract sector num from
 23369                                  ;	MOV	CX,DX			    ;AN000;;LB. secondary starting sector
 23370                                  ;	SUB	CX,WORD PTR [CURSC_SECTOR]    ;AN000;;LB. number
 23371                                  ;	SBB	AX,WORD PTR [CURSC_SECTOR+2]  ;AN000;;LB.
 23372                                  ;	CMP	AX,0			    ;AN000;;LB. greater than 64K
 23373                                  ;	JNZ	outrange2		    ;AN000;;LB. yes
 23374                                  ;	CMP	CX,[SC_CACHE_COUNT]	    ;AN000;;LB. greater than SC count
 23375                                  ;	JAE	outrange2		    ;AN000;;LB. yes
 23376                                  ;	CLC				    ;AN000;;LB. clear carry
 23377                                  ;	JMP	short inexit		    ;AN000;;LB. in SC
 23378                                  ;outrange2:				    ;AN000;;LB. set carry
 23379                                  ;	STC				    ;AN000;;LB.
 23380                                  ;inexit: 				    ;AN000;;LB.
 23381                                  ;	return				    ;AN000;;LB.
 23382                                  ;
 23383                                  ;EndProc IN_SC				    ;AN000;
 23384                                  
 23385                                  ;Break	<INVALIDATE_SC - invalide secondary cache>
 23386                                  ;---------------------------------------------------------------------------
 23387                                  ;
 23388                                  ; Procedure Name : Invalidate_Sc
 23389                                  ;
 23390                                  ; Inputs:  [SC_DRIVE]= requesting drive
 23391                                  ;	   [CURSC_DRIVE]= current SC drive
 23392                                  ;	   [CURSC_SECTOR] = starting scetor # of SC
 23393                                  ;	   [SC_CACHE_COUNT] = SC count
 23394                                  ;	   [SC_STAUS] = SC status word
 23395                                  ;	   [HIGH_SECTOR]:DX= sector number
 23396                                  ;
 23397                                  ; Function:
 23398                                  ;	invalidate secondary cache if in there
 23399                                  ; Output:
 23400                                  ;	[SC_STATUS] is updated
 23401                                  ;---------------------------------------------------------------------------
 23402                                  
 23403                                  ;procedure   INVALIDATE_SC,NEAR	    ;AN000;
 23404                                  ;
 23405                                  ;	; SS override for all variables used
 23406                                  ;
 23407                                  ;	CALL	IN_SC			    ;AN000;;LB. in secondary cache
 23408                                  ;	JC	outrange		    ;AN000;;LB. no
 23409                                  ;	MOV	AX,1			    ;AN000;;LB. invalidate the sector
 23410                                  ;	SHL	AX,CL			    ;AN000;;LB. in the secondary cache
 23411                                  ;	NOT	AX			    ;AN000;;LB.
 23412                                  ;	AND	[SC_STATUS],AX		    ;AN000;;LB. save the status
 23413                                  ;outrange:				    ;AN000;;LB.
 23414                                  ;	return				    ;AN000;;LB.
 23415                                  ;
 23416                                  ;EndProc INVALIDATE_SC			    ;AN000;
 23417                                  
 23418                                  
 23419                                  ;Break	<VIRREAD- virtually read data into buffer>
 23420                                  ;--------------------------------------------------------------------------
 23421                                  ;
 23422                                  ; Procedure Name : SC_FLAG
 23423                                  ;
 23424                                  ; Inputs:  SC_FLAG = 0 , no sectors were read into SC
 23425                                  ;		     1, continous sectors were read into SC
 23426                                  ; Function:
 23427                                  ;	   Move data from SC to buffer
 23428                                  ; Output:
 23429                                  ;	 carry clear, data is moved to buffer
 23430                                  ;	 carry set, bad sector or exceeds maximum sector
 23431                                  ;	   SC_FLAG =0
 23432                                  ;	   CALLSCNT=1
 23433                                  ;	   SC_STATUS= -1 if succeeded
 23434                                  ;     
 23435                                  ;		       0 if failed
 23436                                  ;--------------------------------------------------------------------------
 23437                                  
 23438                                  ;procedure   VIRREAD,NEAR	    ;AN000;
 23439                                  ;
 23440                                  ;	; SS override for all variables used
 23441                                  ;
 23442                                  ;	CMP	[SC_FLAG],0		    ;AN000;;LB.  from SC fill
 23443                                  ;	JZ	sc2end			    ;AN000;;LB.  no
 23444                                  ;	MOV	AX,[TEMP_VAR2]		    ;AN000;;LB. restore buffer addr
 23445                                  ;	MOV	WORD PTR [CALLXAD+2],AX     ;AN000;;LB.
 23446                                  ;	MOV	AX,[TEMP_VAR]		    ;AN000;;LB.
 23447                                  ;	MOV	WORD PTR [CALLXAD],AX	    ;AN000;;LB.
 23448                                  ;	MOV	[SC_FLAG],0		    ;AN000;;LB.  reset sc_flag
 23449                                  ;	MOV	[CALLSCNT],1		    ;AN000;;LB.  one sector transferred
 23450                                  ;
 23451                                  ;	TESTB	[DEVCALL.REQSTAT],STERR     ;AN000;;LB.  error?
 23452                                  ;	JNZ	scerror 		    ;AN000;;LB. yes
 23453                                  ;	PUSH	DS			    ;AN000;;LB.
 23454                                  ;	PUSH	SI			    ;AN000;;LB.
 23455                                  ;	PUSH	ES			    ;AN000;;LB.
 23456                                  ;	PUSH	DI			    ;AN000;;LB.
 23457                                  ;	PUSH	DX			    ;AN000;;LB.
 23458                                  ;	PUSH	CX			    ;AN000;;LB.
 23459                                  ;	XOR	CX,CX			    ;AN000;;LB. we want first sector in SC
 23460                                  ;	CALL	SC2BUF2 		    ;AN000;;LB. move data from SC to buffer
 23461                                  ;	POP	CX			    ;AN000;;LB.
 23462                                  ;	POP	DX			    ;AN000;;LB.
 23463                                  ;	POP	DI			    ;AN000;;LB.
 23464                                  ;	POP	ES			    ;AN000;;LB.
 23465                                  ;	POP	SI			    ;AN000;;LB.
 23466                                  ;	POP	DS			    ;AN000;;LB.
 23467                                  ;	JMP	SHORT sc2end		    ;AN000;;LB. return
 23468                                  ;
 23469                                  ;scerror:				    ;AN000;
 23470                                  ;	MOV	[CALLSCNT],1		    ;AN000;;LB. reset sector count to 1
 23471                                  ;	MOV	[SC_STATUS],0		    ;AN000;;LB. invalidate all SC sectors
 23472                                  ;	MOV	[CURSC_DRIVE],-1	    ;AN000;;LB. invalidate drive
 23473                                  ;	STC				    ;AN000;;LB. carry set
 23474                                  ;	return				    ;AN000;;LB.
 23475                                  ;
 23476                                  ;sc2end: 				    ;AN000;
 23477                                  ;	CLC				    ;AN000;;LB. carry clear
 23478                                  ;	return				    ;AN000;;LB.
 23479                                  ;
 23480                                  ;EndProc VIRREAD 			    ;AN000;
 23481                                  
 23482                                  ;Break	<SC2BUF- move data from SC to buffer>
 23483                                  ;----------------------------------------------------------------------------
 23484                                  ;
 23485                                  ; Procedure Name : SC2BUF
 23486                                  ;
 23487                                  ; Inputs:  [SC_STATUS] = SC validity status
 23488                                  ;	   [SC_SECTOR_SIZE] = request sector size
 23489                                  ;	   [SC_CACHE_PTR] = pointer to SC
 23490                                  ; Function:
 23491                                  ;	   Move data from SC to buffer
 23492                                  ; Output:
 23493                                  ;	   carry clear, in SC  and data is moved
 23494                                  ;	   carry set, not in SC and data is not moved
 23495                                  ;---------------------------------------------------------------------------
 23496                                  
 23497                                  ;procedure   SC2BUF,NEAR 	    ;AN000;
 23498                                  ;
 23499                                  ;	; SS override for all variables used
 23500                                  ;
 23501                                  ;	CALL	IN_SC			    ;AN000;;LB. in secondary cache
 23502                                  ;	JC	noSC			    ;AN000;;LB. no
 23503                                  ;	MOV	AX,1			    ;AN000;;LB. check if valid sector
 23504                                  ;	SHL	AX,CL			    ;AN000;;LB. in the secondary cache
 23505                                  ;	TEST	[SC_STATUS],AX		    ;AN000;;LB.
 23506                                  ;	JZ	noSC			    ;AN000;;LB. invalid
 23507                                  ;entry SC2BUF2				    ;AN000;
 23508                                  ;	MOV	AX,CX			    ;AN000;;LB. times index with
 23509                                  ;	MUL	[SC_SECTOR_SIZE]	    ;AN000;;LB. sector size
 23510                                  ;	ADD	AX,WORD PTR [SC_CACHE_PTR]  ;AN000;;LB. add SC starting addr
 23511                                  ;	ADC	DX,WORD PTR [SC_CACHE_PTR+2];AN000;;LB.
 23512                                  ;	MOV	DS,DX			    ;AN000;    ;LB. DS:SI-> SC sector addr
 23513                                  ;	MOV	SI,AX			    ;AN000;    ;LB.
 23514                                  ;	MOV	ES,WORD PTR [CALLXAD+2]     ;AN000;    ;LB. ES:DI-> buffer addr
 23515                                  ;	MOV	DI,WORD PTR [CALLXAD]	    ;AN000;    ;LB.
 23516                                  ;	MOV	CX,[SC_SECTOR_SIZE]	    ;AN000;    ;LB. count= sector size
 23517                                  ;	SHR	CX,1			    ;AN000;    ;LB. may use DWORD move for 386
 23518                                  ;entry MOVWORDS				    ;AN000;
 23519                                  ;	CMP	[DDMOVE],0		    ;AN000;    ;LB. 386 ?
 23520                                  ;	JZ	nodd			    ;AN000;    ;LB. no
 23521                                  ;	SHR	CX,1			    ;AN000;    ;LB. words/2
 23522                                  ;	DB	66H			    ;AN000;    ;LB. use double word move
 23523                                  ;nodd:
 23524                                  ;	REP	MOVSW			    ;AN000;    ;LB. move to buffer
 23525                                  ;	CLC				    ;AN000;    ;LB. clear carry
 23526                                  ;	return				    ;AN000;    ;LB. exit
 23527                                  ;noSC:					    ;AN000;
 23528                                  ;	STC				    ;AN000;    ;LB. set carry
 23529                                  ;sexit:					    ;AN000;
 23530                                  ;	return				    ;AN000;    ;LB.
 23531                                  ;
 23532                                  ;EndProc SC2BUF
 23533                                  
 23534                                  
 23535                                  ;============================================================================
 23536                                  ; MKNODE.ASM, MSDOS 6.0, 1991
 23537                                  ;============================================================================
 23538                                  ; 29/07/2018 - Retro DOS v3.0
 23539                                  
 23540                                  ;	TITLE	MKNODE - Node maker
 23541                                  ;	NAME	MKNODE
 23542                                  
 23543                                  ;**	MKNODE.ASM
 23544                                  ;
 23545                                  ;	Low level routines for making a new local file system node
 23546                                  ;	and filling in an SFT from a directory entry
 23547                                  ;
 23548                                  ;	BUILDDIR
 23549                                  ;	SETDOTENT
 23550                                  ;	MakeNode
 23551                                  ;	NEWENTRY
 23552                                  ;	FREEENT
 23553                                  ;	NEWDIR
 23554                                  ;	DOOPEN
 23555                                  ;	RENAME_MAKE
 23556                                  ;	CHECK_VIRT_OPEN
 23557                                  ;
 23558                                  ;	Revision history:
 23559                                  ;
 23560                                  ;	 AN000	version 4.0  Jan. 1988
 23561                                  ;	 A004	PTM 3680  --- Make SFT NAME field offset same as 3.30
 23562                                  
 23563                                  ;Break   <BUILDDIR,NEWDIR -- ALLOCATE DIRECTORIES>
 23564                                  ;----------------------------------------------------------------------------
 23565                                  ;
 23566                                  ; Procedure Name : BUILDDIR,NEWDIR
 23567                                  ;
 23568                                  ; Inputs:
 23569                                  ;       ES:BP Points to DPB
 23570                                  ;       [THISSFT] Set if using NEWDIR entry point
 23571                                  ;               (used by ALLOCATE)
 23572                                  ;       [LASTENT] current last valid entry number in directory if no free
 23573                                  ;               entries
 23574                                  ;       [DIRSTART] Points to first cluster of dir (0 means root)
 23575                                  ; Function:
 23576                                  ;       Grow directory if no free entries and not root
 23577                                  ; Outputs:
 23578                                  ;       CARRY SET IF FAILURE
 23579                                  ;       ELSE
 23580                                  ;          AX entry number of new entry
 23581                                  ;          If a new dir [DIRSTART],[CLUSFAC],[CLUSNUM],[DIRSEC] set
 23582                                  ;               AX = first entry of new dir
 23583                                  ;       GETENT should be called to set [LASTENT]
 23584                                  ;
 23585                                  ;----------------------------------------------------------------------------
 23586                                  
 23587                                  BUILDDIR:
 23588                                  	; 29/07/2018 - Retro DOS v3.0
 23589                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 4E66h
 23590                                  
 23591 00004F61 A1[6A05]                        MOV     AX,[ENTFREE]
 23592 00004F64 83F8FF                          CMP     AX,-1
 23593 00004F67 7402                            JZ	short CHECK_IF_ROOT
 23594 00004F69 F8                              CLC
 23595 00004F6A C3                              retn
 23596                                  
 23597                                  CHECK_IF_ROOT:
 23598 00004F6B 833E[5805]00                    CMP     word [DIRSTART],0
 23599 00004F70 7502                            JNZ	short NEWDIR
 23600 00004F72 F9                              STC
 23601                                  builddir_retn:
 23602 00004F73 C3                              retn				; Can't grow root
 23603                                  
 23604                                  	;entry   NEWDIR
 23605                                  NEWDIR:        
 23606 00004F74 8B1E[5805]              	MOV     BX,[DIRSTART]
 23607 00004F78 09DB                            OR      BX,BX
 23608 00004F7A 7405                            JZ	short NULLDIR
 23609 00004F7C E89A05                  	call	GETEOF
 23610 00004F7F 72F2                            jc	short builddir_retn	; Screw up
 23611                                  NULLDIR:
 23612 00004F81 B90100                          MOV     CX,1
 23613 00004F84 E8BF04                  	call	ALLOCATE
 23614 00004F87 72EA                            jc	short  builddir_retn
 23615 00004F89 8B16[5805]                      MOV     DX,[DIRSTART]
 23616 00004F8D 09D2                            OR      DX,DX
 23617 00004F8F 750D                            JNZ	short ADDINGDIR
 23618 00004F91 E850F8                  	call	SETDIRSRCH
 23619 00004F94 72DD                            jc	short  builddir_retn
 23620 00004F96 C706[F402]FFFF                  MOV     word [LASTENT],-1
 23621 00004F9C EB2B                            JMP     SHORT GOTDIRREC
 23622                                  ADDINGDIR:
 23623 00004F9E 53                              PUSH    BX
 23624 00004F9F 8B1E[5405]                      MOV     BX,[CLUSNUM]
 23625 00004FA3 E8940A                          call	IsEOF
 23626 00004FA6 5B                              POP     BX
 23627 00004FA7 7219                            JB	short NOTFIRSTGROW
 23628                                  ;;;; 10/17/86 update CLUSNUM in the fastopen cache
 23629 00004FA9 891E[5405]                      MOV     [CLUSNUM],BX
 23630 00004FAD 51                              PUSH    CX
 23631 00004FAE 50                              PUSH    AX
 23632 00004FAF 55                              PUSH    BP
 23633 00004FB0 B401                            MOV     AH,1			; CLUSNUM update
 23634                                  	;mov	dl,[es:bp+0]
 23635 00004FB2 268A5600                	mov	dl,[ES:BP] ; 09/09/2018
 23636                                          ;MOV	DL,[ES:BP+DPB.DRIVE]	; drive #
 23637 00004FB6 8B0E[5805]                      MOV     CX,[DIRSTART]		; first cluster #
 23638 00004FBA 89DD                            MOV     BP,BX 			; CLUSNUM
 23639 00004FBC E854E4                  	call	FastOpen_Update
 23640 00004FBF 5D                              POP     BP
 23641 00004FC0 58                              POP     AX
 23642 00004FC1 59                              POP     CX
 23643                                  
 23644                                  ;;;; 10/17/86 update CLUSNUM in the fastopen cache
 23645                                  NOTFIRSTGROW:
 23646 00004FC2 89DA                            MOV     DX,BX
 23647 00004FC4 30DB                            XOR     BL,BL
 23648 00004FC6 E86C04                  	call	FIGREC
 23649                                  GOTDIRREC:
 23650                                  	;mov	cl,[es:bp+4]
 23651 00004FC9 268A4E04                        MOV     CL,[ES:BP+DPB.CLUSTER_MASK]
 23652 00004FCD FEC1                            INC     CL
 23653 00004FCF 30ED                            XOR     CH,CH
 23654                                  ZERODIR:
 23655 00004FD1 51                              PUSH    CX
 23656                                  	;mov	byte [ALLOWED],18h
 23657 00004FD2 C606[F702]18                    MOV     byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 23658 00004FD7 B0FF                            MOV     AL,0FFH
 23659 00004FD9 E8AD0E                          call	GETBUFFR
 23660 00004FDC 7302                            JNC	short GET_SSIZE
 23661 00004FDE 59                              POP     CX
 23662 00004FDF C3                              retn
 23663                                  
 23664                                  GET_SSIZE:
 23665                                  	;mov	cx,[es:bp+2]
 23666 00004FE0 268B4E02                        MOV     CX,[ES:BP+DPB.SECTOR_SIZE]
 23667 00004FE4 06                              PUSH    ES
 23668 00004FE5 C43E[7405]                      LES     DI,[CURBUF]
 23669                                  	;or	byte [es:di+5],4
 23670 00004FE9 26804D0504                      OR      byte [ES:DI+BUFFINFO.buf_flags],buf_isDIR
 23671 00004FEE 57                              PUSH    DI
 23672                                  	;add	di,16
 23673 00004FEF 83C710                          ADD     DI,BUFINSIZ
 23674 00004FF2 31C0                            XOR     AX,AX
 23675 00004FF4 D1E9                            SHR     CX,1
 23676 00004FF6 F3AB                            REP     STOSW
 23677 00004FF8 7301                            JNC	short EVENZ
 23678 00004FFA AA                              STOSB
 23679                                  EVENZ:
 23680 00004FFB 5F                              POP     DI
 23681                                  
 23682                                  	; MSDOS 6.0
 23683                                  	;TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 23684                                  	;				;LB. if already dirty		  ;AN000;
 23685                                          ;JNZ	short _yesdirty_	;LB.  don't increment dirty count ;AN000;
 23686                                          ;call	INC_DIRTY_COUNT		;LB. 				  ;AN000;
 23687                                          
 23688                                  	;or	byte [es:di+5],40h
 23689 00004FFC 26804D0540              	OR      byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 23690                                  ;_yesdirty_:
 23691 00005001 07                              POP	ES
 23692 00005002 59                              POP	CX
 23693                                  
 23694                                  	; MSDOS 6.0
 23695                                  	;add	dx, 1
 23696                                  	;adc	word [HIGH_SECTOR],0
 23697                                  
 23698 00005003 42                      	INC	DX
 23699 00005004 E2CB                            LOOP    ZERODIR
 23700                                  
 23701 00005006 A1[F402]                        MOV     AX,[LASTENT]
 23702 00005009 40                              INC     AX
 23703 0000500A F8                              CLC
 23704 0000500B C3                              retn
 23705                                  
 23706                                  ;--------------------------------------------------------------------------
 23707                                  ;
 23708                                  ; Procedure Name : SETDOTENT
 23709                                  ;
 23710                                  ; set up a . or .. directory entry for a directory.
 23711                                  ;
 23712                                  ;   Inputs:     ES:DI point to the beginning of a directory entry.
 23713                                  ;               AX contains ". " or ".."
 23714                                  ;               DX contains first cluster of entry
 23715                                  ;
 23716                                  ;----------------------------------------------------------------------------
 23717                                  
 23718                                  SETDOTENT:
 23719                                  ;	Fill in name field
 23720 0000500C AB                              STOSW
 23721 0000500D B90400                          MOV     CX,4
 23722 00005010 B82020                          MOV     AX,"  " ; 2020h
 23723 00005013 F3AB                            REP     STOSW
 23724 00005015 AA                              STOSB
 23725                                  
 23726                                  ;	Set up attribute
 23727                                  	;mov	al, 10h
 23728 00005016 B010                            MOV     AL,attr_directory
 23729 00005018 AA                              STOSB
 23730                                  
 23731                                  ;	Initialize time and date of creation
 23732 00005019 83C70A                          ADD     DI,10
 23733 0000501C 8B36[3605]                      MOV     SI,[THISSFT]
 23734                                  	;mov	ax,[si+0Dh]
 23735 00005020 8B440D                          MOV     AX,[SI+SF_ENTRY.sf_time]
 23736 00005023 AB                              STOSW
 23737                                  	;mov	ax,[si+0Fh]
 23738 00005024 8B440F                          MOV     AX,[SI+SF_ENTRY.sf_date]
 23739 00005027 AB                      	STOSW
 23740                                  
 23741                                  ;	Set up first cluster field
 23742 00005028 89D0                            MOV     AX,DX
 23743 0000502A AB                              STOSW
 23744                                  
 23745                                  ;	0 file size
 23746 0000502B 31C0                            XOR     AX,AX
 23747 0000502D AB                              STOSW
 23748 0000502E AB                              STOSW
 23749 0000502F C3                              retn
 23750                                  
 23751                                  ;Break   <MAKENODE -- CREATE A NEW NODE>
 23752                                  ;---------------------------------------------------------------------------
 23753                                  ;
 23754                                  ; Procedure Name : MakeNode
 23755                                  ;
 23756                                  ; Inputs:
 23757                                  ;       AL - attribute to create
 23758                                  ;       AH = 0 if it is ok to truncate a file already by this name
 23759                                  ;	AH != 0 if truncation not allowed (prexisting file is an error)
 23760                                  ;               (AH ignored on dirs and devices)
 23761                                  ;
 23762                                  ;        NOTE: When making a DIR or volume ID, AH need not be set since
 23763                                  ;               a name already existant is ALWAYS an error in these cases.
 23764                                  ;
 23765                                  ;       [WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 23766                                  ;               terminated)
 23767                                  ;       [CURR_DIR_END] Points to end of Current dir part of string
 23768                                  ;               ( = -1 if current dir not involved, else
 23769                                  ;                Points to first char after last "/" of current dir part)
 23770                                  ;       [THISCDS] Points to CDS being used
 23771                                  ;       [THISSFT] Points to an empty SFT. EXCEPT sf_mode filled in.
 23772                                  ; Function:
 23773                                  ;       Make a new node
 23774                                  ; Outputs:
 23775                                  ;       Sets EXTERR_LOCUS = errLOC_Disk or errLOC_Unk via GetPathNoset
 23776                                  ;       CARRY SET IF ERROR
 23777                                  ;          AX = 1 A node by this name exists and is a directory
 23778                                  ;          AX = 2 A new node could not be created
 23779                                  ;          AX = 3 A node by this name exists and is a disk file
 23780                                  ;               (AH was NZ on input)
 23781                                  ;          AX = 4 Bad Path
 23782                                  ;               SI return from GetPath maintained
 23783                                  ;          AX = 5 Attribute mismatch
 23784                                  ;          AX = 6 Sharing Violation
 23785                                  ;               (INT 24 generated ALWAYS since create is always compat mode
 23786                                  ;          AX = 7 file not found for Extended Open (not exists and fails)
 23787                                  ;       ELSE
 23788                                  ;          AX = 0       Disk Node
 23789                                  ;          AX = 3       Device Node (error in some cases)
 23790                                  ;          [DIRSTART],[DIRSEC],[CLUSFAC],[CLUSNUM] set to directory
 23791                                  ;               containing new node.
 23792                                  ;          [CURBUF+2]:BX Points to entry
 23793                                  ;          [CURBUF+2]:SI Points to entry.dir_first
 23794                                  ;          [THISSFT] is filled in
 23795                                  ;               sf_mode = unchanged.
 23796                                  ;          Attribute byte in entry is input AL
 23797                                  ; DS preserved, others destroyed
 23798                                  ;
 23799                                  ;-------------------------------------------------------------------------
 23800                                  
 23801                                  MakeNode:
 23802                                  	;mov	word [CREATING],0E5FFh
 23803 00005030 C706[1805]FFE5          	MOV	WORD [CREATING],DIRFREE*256 + 0FFh ; Creating, not DEL *.*
 23804 00005036 50                              PUSH    AX              ; Save AH value
 23805 00005037 C606[F802]00            	MOV	byte [NoSetDir],0
 23806 0000503C A2[0805]                	MOV	[SATTRIB],AL
 23807 0000503F E8FDF7                  	call	GetPathNoSet
 23808 00005042 88CA                            MOV     DL,CL           ; Save CL info
 23809 00005044 89C1                            MOV     CX,AX           ; Device ID to CH
 23810 00005046 58                              POP     AX              ; Get back AH
 23811 00005047 7316                            JNC	short make_exists ; File existed
 23812 00005049 7505                            JNZ	short make_err_4 ; Path bad
 23813 0000504B 80FA80                          CMP     DL,80h          ; Check "CL" return from GETPATH
 23814 0000504E 7406                            JZ	short make_type	; Name simply not found, and no metas
 23815                                  make_err_4:
 23816 00005050 B004                            MOV     AL,4            ; case 1 bad path
 23817                                  make_err_ret:
 23818 00005052 30E4                            XOR     AH,AH
 23819 00005054 F9                              STC
 23820                                  make_retn:
 23821 00005055 C3                              retn
 23822                                  
 23823                                          ;entry	RENAME_MAKE     ; Used by DOS_RENAME to "copy" a node
 23824                                  RENAME_MAKE:
 23825                                  make_type:
 23826                                  ;Extended Open hooks
 23827                                  	; MSDOS 6.0
 23828                                  	;TESTB	EXTOPEN_ON,ext_open_on	;FT. from extended open		;AN000;
 23829                                  	;JZ	make_type2		;FT. no				;AN000;
 23830                                  	;OR	EXTOPEN_ON,ext_file_not_exists ;FT. set for extended open ;AN000;
 23831                                  	;TESTB	EXTOPEN_FLAG,0F0H	;FT. not exists and fails	;AN000;
 23832                                  	;JNZ    make_type2		;FT. no				;AN000;
 23833                                  	;STC				;FT. set carry			;AN000;
 23834                                  	;MOV    AX,7			;FT. file not found		;AN000;
 23835                                  	;return				;FT.				;AN000;
 23836                                  ;	Extended Open hooks
 23837                                  
 23838                                  make_type2:
 23839 00005056 C43E[3605]                      LES     DI,[THISSFT]
 23840 0000505A 31C0                            XOR     AX,AX           ; nothing exists Disk Node
 23841 0000505C F9                              STC                     ; Not found
 23842 0000505D EB5A                            JMP     short make_new
 23843                                  
 23844                                  ; The node exists.  It may be either a device, directory or file:
 23845                                  ;   Zero set => directory
 23846                                  ;   High bit of CH on => device
 23847                                  ;   else => file
 23848                                  make_exists:
 23849 0000505F 7448                            JZ	short make_exists_dir
 23850 00005061 B003                            MOV     AL,3            ; file exists type 3  (error or device node)
 23851                                  	;test	byte [ATTRIB],18h
 23852 00005063 F606[0605]18            	TEST	byte [ATTRIB],attr_volume_id+attr_directory
 23853 00005068 753B                            JNZ	short make_err_ret_5
 23854                                  				; Cannot already exist as Disk or Device Node
 23855                                                                  ;       if making DIR or Volume ID
 23856 0000506A 08ED                            OR      CH,CH
 23857 0000506C 781A                            JS	short make_share ; No further checks on attributes if device
 23858 0000506E 08E4                            OR      AH,AH
 23859 00005070 75E0                            JNZ	short make_err_ret ; truncating NOT OK (AL = 3)
 23860 00005072 51                              PUSH    CX              ; Save device ID
 23861 00005073 8E06[7605]                      MOV     ES,[CURBUF+2]
 23862                                  	;mov	ch,[es:bx+0Bh]
 23863 00005077 268A6F0B                        MOV     CH,[ES:BX+dir_entry.dir_attr] ; Get file attributes
 23864                                  	;test	ch,1
 23865 0000507B F6C501                  	test	CH,attr_read_only
 23866 0000507E 7524                            JNZ	short make_err_ret_5P ; Cannot create on read only files
 23867 00005080 E854FA                  	call	MatchAttributes
 23868 00005083 59                              POP     CX              ; Devid back in CH
 23869 00005084 751F                            JNZ	short make_err_ret_5 ; Attributes not ok
 23870 00005086 30C0                            XOR     AL,AL           ; AL = 0, Disk Node
 23871                                  make_share:
 23872 00005088 30E4                            XOR     AH,AH
 23873 0000508A 50                              PUSH    AX              ; Save Disk or Device node
 23874 0000508B 51                              PUSH    CX              ; Save Device ID
 23875 0000508C 88EC                            MOV     AH,CH           ; Device ID to AH
 23876 0000508E E83301                          CALL    DOOPEN          ; Fill in SFT for share check
 23877 00005091 C43E[3605]                      LES     DI,[THISSFT]
 23878 00005095 56                      	push	si
 23879 00005096 53                      	push	bx		; Save CURBUF pointers
 23880 00005097 E8C422                  	call	ShareEnter
 23881 0000509A 7350                            jnc	short MakeEndShare
 23882                                  
 23883                                  ; User failed request.
 23884 0000509C 5B                      	pop	bx
 23885 0000509D 5E                      	pop	si
 23886 0000509E 59                      	pop	cx
 23887 0000509F 58                      	pop	ax
 23888                                  
 23889                                  Make_Share_ret:
 23890 000050A0 B006                            MOV     AL,6
 23891 000050A2 EBAE                            JMP	short make_err_ret
 23892                                  
 23893                                  make_err_ret_5P:
 23894 000050A4 59                              POP     CX              ; Get back device ID
 23895                                  make_err_ret_5:
 23896 000050A5 B005                            MOV     AL,5            ; Attribute mismatch
 23897 000050A7 EBA9                            JMP     make_err_ret
 23898                                  
 23899                                  make_exists_dir:
 23900 000050A9 B001                            MOV     AL,1            ; exists as directory, always an error
 23901 000050AB EBA5                            JMP     make_err_ret
 23902                                  
 23903                                  make_save:
 23904 000050AD 50                              PUSH    AX              ; Save whether Disk or File
 23905 000050AE 89C8                            MOV     AX,CX           ; Device ID to AH
 23906 000050B0 E86A00                          CALL    NEWENTRY
 23907 000050B3 58                              POP     AX              ; 0 if Disk, 3 if File
 23908 000050B4 739F                            jnc	short make_retn
 23909 000050B6 B002                            MOV     AL,2            ; create failed case 2
 23910                                  make_save_retn:
 23911 000050B8 C3                              retn
 23912                                  
 23913                                  make_new:
 23914 000050B9 E8F1FF                          call    make_save
 23915 000050BC 72FA                            jc	short make_save_retn	; case 2 fail
 23916 000050BE F606[0605]10            	test	BYTE [ATTRIB],attr_directory
 23917 000050C3 75F3                            jnz	short make_save_retn	; Don't "open" directories, so don't
 23918                                                                  ;   tell the sharer about them
 23919 000050C5 50                      	push	ax
 23920 000050C6 53                      	push	bx
 23921 000050C7 56                      	push	si		
 23922 000050C8 E89322                          call	ShareEnter
 23923 000050CB 5E                      	pop	si
 23924 000050CC 5B                      	pop	bx
 23925 000050CD 58                      	pop	ax
 23926 000050CE 73E8                    	jnc	short make_save_retn
 23927                                  ;
 23928                                  ; We get here by having the user FAIL a share problem. Typically a failure of
 23929                                  ; this nature is an out-of-space or an internal error. We clean up as best as
 23930                                  ; possible: delete the newly created directory entry and return share_error.
 23931                                  ;
 23932 000050D0 50                              PUSH    AX
 23933 000050D1 C43E[7405]                      LES     DI,[CURBUF]
 23934                                  	;mov	byte [es:bx],0E5h
 23935 000050D5 26C607E5                	MOV	BYTE [ES:BX],DIRFREE	; nuke newly created entry.
 23936                                  	
 23937                                  	; MSDOS 6.0
 23938                                  	;TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 23939                                  	;				;LB. if already dirty		  ;AN000;
 23940                                          ;JNZ	short yesdirty3		;LB.  don't increment dirty count ;AN000;
 23941                                  	;call	INC_DIRTY_COUNT		;LB.				  ;AN000;
 23942                                  	;or	byte [es:di+5],40h
 23943 000050D9 26804D0540                      OR      byte [ES:DI+BUFFINFO.buf_flags],buf_dirty ; flag buffer as dirty
 23944                                  ;yesdirty3:
 23945 000050DE C42E[2405]                      LES     BP,[THISDPB]
 23946 000050E2 268A4600                        mov	al,[ES:BP]
 23947                                  	;MOV	AL,[ES:BP+DPB.DRIVE]	; get drive for flush
 23948 000050E6 E8480E                          call	FLUSHBUF		; write out buffer.
 23949 000050E9 58                              POP     AX
 23950 000050EA EBB4                            jmp	short Make_Share_ret
 23951                                  ;
 23952                                  ; We have found an existing file. We have also entered it into the share set.
 23953                                  ; At this point we need to call newentry to correctly address the problem of
 23954                                  ; getting rid of old data (create an existing file) or creating a new
 23955                                  ; directory entry (create a new file). Unfortunately, this operation may
 23956                                  ; result in an INT 24 that the user doesn't return from, thus locking the file
 23957                                  ; irretrievably into the share set. The correct solution is for us to LEAVE
 23958                                  ; the share set now, do the operation and then reassert the share access.
 23959                                  ;
 23960                                  ; We are allowed to do this! There is no window! After all, we are in
 23961                                  ; critDisk here and for someone else to get in, they must enter critDisk also.
 23962                                  ;
 23963                                  MakeEndShare:
 23964 000050EC C43E[3605]                      LES     DI,[THISSFT]		; grab SFT
 23965 000050F0 31C0                            XOR     AX,AX
 23966 000050F2 E877CF                  	call	EcritSFT
 23967 000050F5 268705                  	xchg	AX,[ES:DI]
 23968                                  	;XCHG	AX,[ES:DI+SF_ENTRY.sf_ref_count]
 23969 000050F8 50                      	push	ax
 23970 000050F9 57                      	push	di
 23971 000050FA 06                      	push	es
 23972 000050FB 9C                              PUSHF
 23973 000050FC E85922                          call	ShareEnd                ; remove sharing
 23974 000050FF 9D                              POPF
 23975 00005100 07                      	pop	es
 23976 00005101 5F                      	pop	di
 23977 00005102 268F05                          pop	word [ES:DI]	
 23978                                  	;pop	word [ES:DI+SF_ENTRY.sf_ref_count]
 23979 00005105 E86CCF                  	call	LcritSFT
 23980 00005108 5B                      	pop	bx
 23981 00005109 5E                      	pop	si
 23982 0000510A 59                      	pop	cx
 23983 0000510B 58                      	pop	ax
 23984 0000510C E89EFF                          CALL    make_save
 23985                                  
 23986                                  ; If the user failed, we do not reenter into the sharing set.
 23987                                  
 23988 0000510F 72A7                            jc	short make_save_retn	; bye if error
 23989 00005111 50                      	push	ax
 23990 00005112 53                      	push	bx
 23991 00005113 56                      	push	si
 23992 00005114 9C                              PUSHF
 23993 00005115 E84622                          call	ShareEnter
 23994 00005118 9D                              POPF
 23995 00005119 5E                      	pop	si
 23996 0000511A 5B                      	pop	bx
 23997 0000511B 58                      	pop	ax
 23998                                  
 23999                                  ; If Share_check fails, then we have an internal ERROR!!!!!
 24000                                  
 24001                                  makeendshare_retn:
 24002 0000511C C3                              retn
 24003                                  
 24004                                  ;---------------------------------------------------------------------------
 24005                                  ;
 24006                                  ; Procedure Name : NEWENTRY
 24007                                  ;
 24008                                  ; Inputs:
 24009                                  ;       [THISSFT] set
 24010                                  ;       [THISDPB] set
 24011                                  ;       [LASTENT] current last valid entry number in directory if no free
 24012                                  ;               entries
 24013                                  ;       [VOLID] set if a volume ID was found during search
 24014                                  ;	Attrib Contains attributes for new file
 24015                                  ;       [DIRSTART] Points to first cluster of dir (0 means root)
 24016                                  ;       CARRY FLAG INDICATES STATUS OF SEARCH FOR FILE
 24017                                  ;               NC means file existed (device)
 24018                                  ;               C  means file did not exist
 24019                                  ;       AH = Device ID byte
 24020                                  ;       If FILE
 24021                                  ;           [CURBUF+2]:BX points to start of directory entry
 24022                                  ;           [CURBUF+2]:SI points to dir_first of directory entry
 24023                                  ;       If device
 24024                                  ;           DS:BX points to start of "fake" directory entry
 24025                                  ;           DS:SI points to dir_first of "fake" directory entry
 24026                                  ;               (has DWORD pointer to device header)
 24027                                  ; Function:
 24028                                  ;       Make a new directory entry
 24029                                  ;       If an old one existed it is truncated first
 24030                                  ; Outputs:
 24031                                  ;       Carry set if error
 24032                                  ;               Can't grow dir, atts didn't match, attempt to make 2nd
 24033                                  ;               vol ID, user FAILed to I 24
 24034                                  ;       else
 24035                                  ;               outputs of DOOPEN
 24036                                  ; DS, BX, SI preserved (meaning on SI BX, not value), others destroyed
 24037                                  ;
 24038                                  ;----------------------------------------------------------------------------
 24039                                  
 24040                                  NEWENTRY:
 24041 0000511D C42E[2405]                      LES     BP,[THISDPB]
 24042 00005121 7316                            JNC	short EXISTENT	
 24043 00005123 803E[F602]00                    CMP     byte [FAILERR],0
 24044 00005128 F9                              STC
 24045 00005129 75F1                            jnz	short makeendshare_retn	; User FAILed, node might exist
 24046 0000512B E833FE                          CALL    BUILDDIR        ; Try to build dir
 24047 0000512E 72EC                            jc	short makeendshare_retn	; Failed
 24048 00005130 E883F6                          call	GETENT          ; Point at that free entry
 24049 00005133 72E7                            jc	short makeendshare_retn	; Failed
 24050 00005135 EB0E                            JMP     SHORT FREESPOT
 24051                                  
 24052                                  ERRRET3:
 24053 00005137 F9                              STC
 24054                                  newentry_retn:
 24055 00005138 C3                              retn
 24056                                  
 24057                                  EXISTENT:
 24058 00005139 08E4                            OR      AH,AH           ; Check if file is I/O device
 24059 0000513B 7903                            JNS	short NOT_DEV1
 24060 0000513D E98400                          JMP     DOOPEN          ; If so, proceed with open
 24061                                  
 24062                                  NOT_DEV1:
 24063 00005140 E81401                          call	FREEENT		; Free cluster chain
 24064 00005143 72F3                            jc	short newentry_retn ; Failed
 24065                                  FREESPOT:
 24066                                  	;test	byte [ATTRIB],8
 24067 00005145 F606[0605]08            	test	BYTE [ATTRIB],attr_volume_id
 24068 0000514A 7407                            JZ	short NOTVOLID
 24069 0000514C 803E[1605]00                    CMP     BYTE [VOLID],0
 24070 00005151 75E4                            JNZ	short ERRRET3	; Can't create a second volume ID
 24071                                  NOTVOLID:
 24072 00005153 8E06[7605]                      MOV     ES,[CURBUF+2]
 24073 00005157 89DF                            MOV     DI,BX
 24074                                  
 24075 00005159 BE[E604]                        MOV     SI,NAME1
 24076                                  
 24077 0000515C B90500                          MOV     CX,5
 24078 0000515F F3A5                            REP     MOVSW
 24079 00005161 A4                              MOVSB                   ; Move name into dir entry
 24080 00005162 A0[0605]                	MOV	AL,[ATTRIB]
 24081 00005165 AA                      	STOSB                   ; Attributes
 24082                                  
 24083                                  ;; File Tagging for Create DOS 4.00
 24084 00005166 B105                            MOV     CL,5            ;FT. assume normal FBUGBUG	;AN000;
 24085                                  ;; File Tagging for Create DOS 4.00
 24086                                  
 24087 00005168 31C0                            XOR     AX,AX
 24088 0000516A F3AB                            REP     STOSW           ; Zero pad
 24089 0000516C E84AC7                          call	DATE16
 24090 0000516F 92                              XCHG    AX,DX
 24091 00005170 AB                              STOSW                   ; dir_time
 24092 00005171 92                              XCHG    AX,DX
 24093 00005172 AB                              STOSW                   ; dir_date
 24094 00005173 31C0                            XOR     AX,AX
 24095 00005175 57                              PUSH    DI              ; Correct SI input value
 24096                                  				; 	(recomputed for new buffer)
 24097 00005176 AB                              STOSW                   ; Zero dir_first and size
 24098 00005177 AB                              STOSW
 24099 00005178 AB                              STOSW
 24100                                  updnxt:
 24101 00005179 8B36[7405]              	MOV	SI,[CURBUF]
 24102                                  
 24103                                  	; MSDOS 6.0
 24104                                  	;TEST	byte [ES:SI+BUFFINFO.buf_flags],buf_dirty
 24105                                  	;			;LB. if already dirty		  ;AN000;
 24106                                          ;JNZ	short yesdirty4	;LB.  don't increment dirty count ;AN000;
 24107                                          ;call	INC_DIRTY_COUNT	;LB.				  ;AN000;
 24108                                          
 24109                                  	;or	byte [es:si+5],40h
 24110 0000517D 26804C0540              	OR      byte [ES:SI+BUFFINFO.buf_flags],buf_dirty
 24111                                  ;yesdirty4:
 24112 00005182 C42E[2405]                      LES     BP,[THISDPB]
 24113 00005186 268A4600                	MOV	AL,[ES:BP]	; mov al,[es:bp+0] 
 24114                                          ;MOV	AL,[ES:BP+DPB.DRIVE] ; Sets AH value again (in AL)
 24115 0000518A 50                              PUSH    AX
 24116 0000518B 53                              PUSH    BX
 24117                                  ; If we have a file, we need to increment the open ref. count so that
 24118                                  ; we have some protection against invalid media changes if an Int 24
 24119                                  ; error occurs.
 24120                                  ; Do nothing for a device.
 24121 0000518C 06                      	push	es
 24122 0000518D 57                      	push	di
 24123 0000518E C43E[3605]                      LES     DI,[THISSFT]
 24124                                  	;test	word [es:di+5],80h
 24125 00005192 26F745058000            	TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 24126 00005198 751A                            jnz	short GotADevice
 24127 0000519A 1E                      	push	ds
 24128 0000519B 53                      	push	bx
 24129 0000519C C51E[2405]                      LDS     BX,[THISDPB]
 24130                                  	;mov	[es:di+7],bx
 24131 000051A0 26895D07                        MOV     [ES:DI+SF_ENTRY.sf_devptr],BX
 24132 000051A4 8CDB                            MOV     BX,DS
 24133                                  	;mov	[es:di+9],bx
 24134 000051A6 26895D09                        MOV     [ES:DI+SF_ENTRY.sf_devptr+2],BX
 24135 000051AA 5B                      	pop	bx
 24136 000051AB 1F                      	pop	ds ; need to use DS for segment later on
 24137 000051AC E8CAFC                  	call	DEV_OPEN_SFT    ; increment ref. count
 24138 000051AF C606[080A]01                    mov	byte [VIRTUAL_OPEN],1; set flag
 24139                                  GotADevice:
 24140 000051B4 5F                      	pop	di
 24141 000051B5 07                      	pop	es
 24142                                  
 24143 000051B6 E8780D                          call	FLUSHBUF
 24144 000051B9 E8DA00                          Call    CHECK_VIRT_OPEN ; decrement ref. count                          ;AN000;
 24145 000051BC 5B                              POP     BX
 24146 000051BD 58                              POP     AX
 24147 000051BE 5E                              POP     SI              ; Get SI input back
 24148 000051BF 88C4                            MOV     AH,AL           ; Get I/O driver number back
 24149 000051C1 7301                            jnc	short DOOPEN    ; Failed
 24150 000051C3 C3                      	retn
 24151                                  
 24152                                  ;NOTE FALL THROUGH
 24153                                  
 24154                                  ; Inputs:
 24155                                  ;       [THISDPB] points to DPB if file
 24156                                  ;       [THISSFT] points to SFT being used
 24157                                  ;       AH = Device ID byte
 24158                                  ;       If FILE
 24159                                  ;           [CURBUF+2]:BX points to start of directory entry
 24160                                  ;           [CURBUF+2]:SI points to dir_first of directory entry
 24161                                  ;       If device
 24162                                  ;           DS:BX points to start of "fake" directory entry
 24163                                  ;           DS:SI points to dir_first of "fake" directory entry
 24164                                  ;               (has DWORD pointer to device header)
 24165                                  ; Function:
 24166                                  ;       Fill in SFT from dir entry
 24167                                  ; Outputs:
 24168                                  ;       CARRY CLEAR
 24169                                  ;       sf_ref_count and sf_mode fields not altered
 24170                                  ;       sf_flags high byte = 0
 24171                                  ;       sf_flags low byte = AH except
 24172                                  ;       sf_flags Bit 6 set (not dirty or not EOF)
 24173                                  ;       sf_attr sf_date sf_time sf_name set from entry
 24174                                  ;       sf_position = 0
 24175                                  ;       If device
 24176                                  ;           sf_devptr = dword at dir_first (pointer to device header)
 24177                                  ;           sf_size = 0
 24178                                  ;       If file
 24179                                  ;           sf_firclus sf_size set from entry
 24180                                  ;           sf_devptr = [THISDPB]
 24181                                  ;           sf_cluspos = 0
 24182                                  ;           sf_lstclus = sf_firclus
 24183                                  ;           sf_dirsec sf_dirpos set
 24184                                  ; DS,SI,BX preserved, others destroyed
 24185                                  
 24186                                  	;entry	DOOPEN
 24187                                  DOOPEN:
 24188                                  ;	Generate and store attribute
 24189                                  
 24190 000051C4 88E6                            MOV     DH,AH           ; AH to different place
 24191 000051C6 C43E[3605]                      LES     DI,[THISSFT]
 24192                                  	;add	di,4
 24193 000051CA 83C704                          ADD     DI,SF_ENTRY.sf_attr ; Skip ref_count and mode fields
 24194 000051CD 30C0                            XOR     AL,AL           ; Assume it's a device, devices have an
 24195                                                                  ;   attribute of 0 (for R/O testing etc).
 24196 000051CF 08F6                            OR      DH,DH           ; See if our assumption good.
 24197 000051D1 7807                            JS	short DEV_SFT1	; If device DS=DOSGROUP
 24198 000051D3 8E1E[7605]                      MOV     DS,[CURBUF+2]
 24199                                  	;mov	al,[BX+0Bh]
 24200 000051D7 8A470B                          MOV     AL,[BX+dir_entry.dir_attr]
 24201                                  				; If file, get attrib from dir entry
 24202                                  DEV_SFT1:
 24203 000051DA AA                              STOSB                   ; sf_attr, ES:DI -> sf_flags
 24204                                  
 24205                                  ;	Generate and store flags word
 24206                                  
 24207 000051DB 31C0                            XOR     AX,AX
 24208 000051DD 88F0                            MOV     AL,DH
 24209                                  	;or	al,40h
 24210 000051DF 0C40                            OR      AL,devid_file_clean
 24211 000051E1 AB                              STOSW                   ; sf_flags, ES:DI -> sf_devptr
 24212                                  
 24213                                  ;	Generate and store device pointer
 24214                                  
 24215 000051E2 1E                              PUSH    DS
 24216                                  	;lds	ax,[bx+1Ah]
 24217 000051E3 C5471A                          LDS     AX,[BX+dir_entry.dir_first] ; Assume device
 24218 000051E6 08F6                            OR      DH,DH
 24219 000051E8 7805                            JS	short DEV_SFT2
 24220                                  
 24221                                  ;hkn; SS override
 24222 000051EA 36C506[2405]                    LDS     AX,[SS:THISDPB]	; Was file
 24223                                  DEV_SFT2:
 24224 000051EF AB                              STOSW 			; store offset
 24225 000051F0 8CD8                            MOV     AX,DS
 24226 000051F2 1F                              POP     DS
 24227 000051F3 AB                      	STOSW			; store segment
 24228                                  				; ES:DI -> sf_firclus
 24229                                  
 24230                                  ;	Generate pointer to, generate and store first cluster 
 24231                                  ;	(irrelevant for devices)
 24232                                  
 24233 000051F4 56                              PUSH    SI              ; Save pointer to dir_first
 24234 000051F5 A5                              MOVSW                   ; dir_first -> sf_firclus
 24235                                                                  ; DS:SI -> dir_size_l, ES:DI -> sf_time
 24236                                  
 24237                                  ;	Copy time/date of last modification
 24238                                  
 24239                                  	;sub	si,6
 24240 000051F6 83EE06                          SUB     SI,dir_entry.dir_size_l - dir_entry.dir_time 
 24241                                  				; DS:SI->dir_time
 24242 000051F9 A5                              MOVSW                   ; dir_time -> sf_time
 24243                                                                  ; DS:SI -> dir_date, ES:DI -> sf_date
 24244 000051FA A5                              MOVSW                   ; dir_date -> sf_date
 24245                                                                  ; DS:SI -> dir_first, ES:DI -> sf_size
 24246                                  
 24247                                  ;	Generate and store file size (0 for devices)
 24248                                  
 24249 000051FB AD                              LODSW                   ; skip dir_first, DS:SI -> dir_size_l
 24250 000051FC AD                              LODSW                   ; dir_size_l in AX , DS:SI -> dir_size_h
 24251 000051FD 89C1                            MOV     CX,AX           ; dir_size_l in CX
 24252 000051FF AD                              LODSW                   ; dir_size_h (size AX:CX), DS:SI -> ????
 24253 00005200 08F6                            OR      DH,DH
 24254 00005202 7904                            JNS	short FILE_SFT1
 24255 00005204 31C0                            XOR     AX,AX
 24256 00005206 89C1                            MOV     CX,AX           ; Devices are open ended
 24257                                  FILE_SFT1:
 24258 00005208 91                              XCHG    AX,CX
 24259 00005209 AB                              STOSW                   ; Low word of sf_size
 24260 0000520A 91                              XCHG    AX,CX
 24261 0000520B AB                              STOSW                   ; High word of sf_size
 24262                                                                  ; ES:DI -> sf_position
 24263                                  ; Initialize position to 0
 24264                                  
 24265 0000520C 31C0                            XOR     AX,AX
 24266 0000520E AB                              STOSW
 24267 0000520F AB                              STOSW                   ; sf_position
 24268                                                                  ; ES:DI -> sf_cluspos
 24269                                  
 24270                                  ; Generate cluster optimizations for files
 24271                                  
 24272 00005210 08F6                            OR      DH,DH
 24273 00005212 7834                            JS	short DEV_SFT3
 24274 00005214 AB                              STOSW                   ; sf_cluspos
 24275                                  	;mov	ax,[bx+1Ah]
 24276 00005215 8B471A                          MOV     AX,[BX+dir_entry.dir_first]
 24277                                  	; MSDOS 3.3
 24278 00005218 AB                      	STOSW                   ; sf_lstclus
 24279                                  	; MSDOS 6.0
 24280                                          ;PUSH	DI              ;AN004; save dirsec offset
 24281                                          ;SUB	DI,SF_ENTRY.sf_dirsec	;AN004; es:di -> SFT
 24282                                          ;MOV	[ES:DI.sf_lstclus],AX	;AN004; save it
 24283                                          ;POP	DI              ;AN004; restore dirsec offset
 24284                                  
 24285                                  ; DOS 3.3  FastOpen  6/13/86
 24286                                  
 24287 00005219 1E                      	PUSH	DS
 24288                                  
 24289                                  ;hkn; SS is DOSDATA
 24290 0000521A 16                      	push	ss
 24291 0000521B 1F                      	pop	ds
 24292                                  	;test	byte [FastOpenFlg],4
 24293 0000521C F606[6E0F]04            	TEST	byte [FastOpenFlg],Special_Fill_Set
 24294 00005221 740D                    	JZ	short Not_FastOpen
 24295                                  
 24296                                  ;hkn; FastOpen_Ext_Info is in DOSDATA
 24297 00005223 BE[490F]                        MOV     SI,FastOpen_Ext_Info
 24298                                  
 24299 00005226 8B4401                          MOV     AX,[SI+FEI.dirsec]
 24300 00005229 AB                              STOSW                   ; sf_dirsec
 24301                                  	; MSDOS 6.0
 24302                                          ;MOV	AX,[SI+FEI.dirsec+2]
 24303                                  				;;; changed for >32mb
 24304                                          ;STOSW                   ; sf_dirsec
 24305                                  	; 19/08//2018
 24306 0000522A 8A04                    	mov	al,[SI]
 24307                                          ;MOV	AL,[SI+FEI.dirpos] ; mov al,[SI+0]
 24308 0000522C AA                              STOSB                   ; sf_dirpos
 24309 0000522D 1F                              POP	DS
 24310 0000522E EB16                            JMP     short Next_Name
 24311                                  
 24312                                  ; DOS 3.3  FastOpen  6/13/86
 24313                                  
 24314                                  Not_FastOpen:
 24315 00005230 1F                              POP     DS		; normal path
 24316                                  
 24317                                  ;hkn; SS override
 24318 00005231 368B36[7405]                    MOV     SI,[SS:CURBUF]	; DS:SI->buffer header
 24319                                  
 24320 00005236 8B4406                          MOV     AX,[SI+BUFFINFO.buf_sector]     ;F.C. >32mb ;AN000;
 24321 00005239 AB                              STOSW                   ; sf_dirsec     ;F.C. >32mb ;AN000;
 24322                                          ; MSDOS 6.0
 24323                                  	;MOV	AX,[SI+BUFFINFO.buf_sector+2]	;F.C. >32mb ;AN000;
 24324                                          ;STOSW                   ; sf_dirsec     ;F.C. >32mb ;AN000;
 24325                                          
 24326 0000523A 89D8                    	MOV     AX,BX
 24327                                  	;add	si,16
 24328 0000523C 83C610                          ADD     SI,BUFINSIZ     ; DS:SI-> start of data in buffer
 24329 0000523F 29F0                            SUB     AX,SI           ; AX = BX relative to start of sector
 24330                                          ;mov	cl,32
 24331 00005241 B120                    	MOV     CL,dir_entry.size
 24332 00005243 F6F1                            DIV     CL
 24333 00005245 AA                              STOSB                   ; sf_dirpos
 24334                                  
 24335                                  Next_Name:
 24336 00005246 EB03                            JMP     SHORT FILE_SFT2
 24337                                  
 24338                                  DEV_SFT3:
 24339                                  	;add	di,7
 24340 00005248 83C707                          ADD     DI,SF_ENTRY.sf_name-SF_ENTRY.sf_cluspos
 24341                                  FILE_SFT2:
 24342                                  ;
 24343                                  ; Copy in the object's name
 24344                                  ;
 24345 0000524B 89DE                            MOV     SI,BX           ; DS:SI points to dir_name
 24346 0000524D B90B00                          MOV     CX,11
 24347 00005250 F3A4                            REP     MOVSB           ; sf_name
 24348 00005252 5E                              POP     SI              ; recover DS:SI -> dir_first
 24349                                  
 24350                                  ;hkn; SS is DOSDATA
 24351 00005253 16                              push	ss
 24352 00005254 1F                      	pop	ds
 24353 00005255 F8                              CLC
 24354 00005256 C3                              retn
 24355                                  
 24356                                  ;---------------------------------------------------------------------------
 24357                                  ;
 24358                                  ; Procedure Name : FREEENT
 24359                                  ;
 24360                                  ; Inputs:
 24361                                  ;       ES:BP -> DPB
 24362                                  ;       [CURBUF] Set
 24363                                  ;       [CURBUF+2]:BX points to directory entry
 24364                                  ;       [CURBUF+2]:SI points to above dir_first
 24365                                  ; Function:
 24366                                  ;       Free the cluster chain for the entry if present
 24367                                  ; Outputs:
 24368                                  ;       Carry set if error (currently user FAILed to I 24)
 24369                                  ;       (NOTE dir_firclus and dir_size_l/h are wrong)
 24370                                  ; DS BX SI ES BP preserved (BX,SI in meaning, not value) others destroyed
 24371                                  ;---------------------------------------------------------------------------
 24372                                  
 24373                                  FREEENT:
 24374 00005257 1E                              PUSH    DS
 24375 00005258 C53E[7405]                      LDS     DI,[CURBUF]
 24376 0000525C 8B0C                            MOV     CX,[SI]         ; Get pointer to clusters
 24377                                  	; 19/05/2019
 24378                                  	; MSDOS 6.0
 24379                                  	;MOV	DX,[DI+BUFFINFO.buf_sector+2]  ;F.C. >32mb	;AN000;
 24380                                  ;hkn; SS override
 24381                                          ;MOV	[SS:HIGH_SECTOR],DX		;F.C. >32mb	;AN000;
 24382 0000525E 8B5506                          MOV     DX,[DI+BUFFINFO.buf_sector]
 24383 00005261 1F                              POP     DS
 24384 00005262 83F902                  	CMP	CX,2
 24385 00005265 722D                            JB	short RET1	; Was 0 length file (or mucked Firclus if CX=1)
 24386                                  	;cmp	cx,[es:bp+0Dh]
 24387 00005267 263B4E0D                        CMP     CX,[ES:BP+DPB.MAX_CLUSTER]
 24388 0000526B 7727                            JA	short RET1	; Treat like zero length file (firclus mucked)
 24389 0000526D 29FB                            SUB     BX,DI
 24390 0000526F 53                              PUSH    BX              ; Save offset
 24391                                  	;PUSH	word [HIGH_SECTOR] ;F.C. >32mb	;AN000;
 24392 00005270 52                              PUSH    DX              ; Save sector number
 24393 00005271 89CB                            MOV     BX,CX
 24394 00005273 E87702                          call	RELEASE         ; Free any data allocated
 24395 00005276 5A                              POP     DX
 24396                                          ;POP	word [HIGH_SECTOR] ;F.C. >32mb	;AN000;
 24397 00005277 7302                            JNC	short GET_BUF_BACK
 24398 00005279 5B                              POP     BX
 24399                                  freeent_retn:
 24400 0000527A C3                              retn			; Screw up
 24401                                  
 24402                                  GET_BUF_BACK:
 24403                                  	;mov	byte [ALLOWED],18h
 24404 0000527B C606[F702]18                    MOV     byte [ALLOWED],Allowed_RETRY+Allowed_FAIL
 24405 00005280 30C0                            XOR     AL,AL
 24406 00005282 E8040C                  	call	GETBUFFR        ; Get sector back
 24407 00005285 5B                              POP     BX              ; Get offset back
 24408 00005286 72F2                            jc	short freeent_retn
 24409 00005288 E8B1EE                  	call	SET_BUF_AS_DIR
 24410 0000528B 031E[7405]                      ADD     BX,[CURBUF]	; Correct it for new buffer
 24411 0000528F 89DE                            MOV     SI,BX
 24412                                  	;add	si,1Ah
 24413 00005291 83C61A                          ADD     SI,dir_entry.dir_first	; Get corrected SI
 24414                                  RET1:
 24415 00005294 F8                              CLC
 24416 00005295 C3                              retn
 24417                                  
 24418                                  ;---------------------------------------------------------------------------
 24419                                  ;
 24420                                  ; Procedure Name : CHECK_VIRT_OPEN
 24421                                  ;
 24422                                  ; CHECK_VIRT_OPEN checks to see if we had performed a "virtual open" (by
 24423                                  ; examining the flag [VIRTUAL_OPEN] to see if it is 1). If we did, then
 24424                                  ; it calls Dev_Close_SFT to decrement the ref. count. It also resets the
 24425                                  ; flag [VIRTUAL_OPEN].
 24426                                  ; No registers affected (including flags).
 24427                                  ; On input, [THISSFT] points to current SFT.
 24428                                  ;
 24429                                  ;---------------------------------------------------------------------------
 24430                                  
 24431                                  CHECK_VIRT_OPEN:
 24432 00005296 50                      	        PUSH    AX
 24433 00005297 9F                              lahf                    ; preserve flags
 24434 00005298 803E[080A]00                    CMP     byte [VIRTUAL_OPEN],0
 24435 0000529D 7410                            JZ	short ALL_CLOSED
 24436 0000529F C606[080A]00                    mov     byte [VIRTUAL_OPEN],0	; reset flag
 24437 000052A4 06                      	push	es
 24438 000052A5 57                      	push	di
 24439 000052A6 C43E[3605]                      LES     DI,[THISSFT]
 24440 000052AA E8D3FB                          call	DEV_CLOSE_SFT
 24441 000052AD 5F                      	pop	di
 24442 000052AE 07                      	pop	es
 24443                                  
 24444                                  ALL_CLOSED:
 24445 000052AF 9E                              sahf                    ; restore flags
 24446 000052B0 58                              POP     AX
 24447 000052B1 C3                              retn
 24448                                  
 24449                                  ;============================================================================
 24450                                  ; ROM.ASM, MSDOS 6.0, 1991
 24451                                  ;============================================================================
 24452                                  ; 29/07/2018 - Retro DOS v3.0
 24453                                  
 24454                                  ;	TITLE	ROM - Miscellaneous routines
 24455                                  ;	NAME	ROM
 24456                                  
 24457                                  ;**	Misc Low level routines for doing simple FCB computations, Cache
 24458                                  ;       reads and writes, I/O optimization, and FAT allocation/deallocation
 24459                                  ;
 24460                                  ;	SKPCLP
 24461                                  ;	FNDCLUS
 24462                                  ;	BUFSEC
 24463                                  ;	BUFRD
 24464                                  ;	BUFWRT
 24465                                  ;	NEXTSEC
 24466                                  ;	OPTIMIZE
 24467                                  ;	FIGREC
 24468                                  ;	ALLOCATE
 24469                                  ;	RESTFATBYT
 24470                                  ;	RELEASE
 24471                                  ;	RELBLKS
 24472                                  ;	GETEOF
 24473                                  ;
 24474                                  ;	Modification history:
 24475                                  ;
 24476                                  ;		Created: ARR 30 March 1983
 24477                                  ;               M039: DB 10/25/90 - Disk read/write optimization.
 24478                                  
 24479                                  ;Break   <FNDCLUS -- Skip over allocation units>
 24480                                  ;--------------------------------------------------------------------------
 24481                                  ;
 24482                                  ; Procedure Name : FNDCLUS
 24483                                  ;
 24484                                  ; Inputs:
 24485                                  ;       CX = No. of clusters to skip
 24486                                  ;       ES:BP = Base of drive parameters
 24487                                  ;       [THISSFT] point to SFT
 24488                                  ; Outputs:
 24489                                  ;       BX = Last cluster skipped to
 24490                                  ;       CX = No. of clusters remaining (0 unless EOF)
 24491                                  ;       DX = Position of last cluster
 24492                                  ;       Carry set if error (currently user FAILed to I 24)
 24493                                  ; DI destroyed. No other registers affected.
 24494                                  ;--------------------------------------------------------------------------
 24495                                  
 24496                                  FNDCLUS:
 24497 000052B2 06                      	PUSH	ES
 24498 000052B3 C43E[3605]                      LES     DI,[THISSFT]		; setup addressability to SFT
 24499                                  	;mov	bx,[es:di+1Bh]
 24500 000052B7 268B5D1B                	MOV	BX,[ES:DI+SF_ENTRY.sf_lstclus]
 24501                                  	;mov	dx,[es:di+19h]
 24502 000052BB 268B5519                        MOV     DX,[ES:DI+SF_ENTRY.sf_cluspos]
 24503 000052BF 09DB                    	OR	BX,BX
 24504 000052C1 7424                    	JZ	short NOCLUS
 24505                                  
 24506 000052C3 29D1                            SUB     CX,DX
 24507 000052C5 7308                            JNB	short FINDIT
 24508                                  
 24509 000052C7 01D1                            ADD     CX,DX
 24510 000052C9 31D2                            XOR     DX,DX
 24511                                  	;mov	bx,[es:di+0Bh]
 24512 000052CB 268B5D0B                        MOV     BX,[ES:DI+SF_ENTRY.sf_firclus]
 24513                                  FINDIT:
 24514 000052CF 07                              POP	ES
 24515 000052D0 E313                    	JCXZ	RET9
 24516                                  
 24517                                  	;entry	SKPCLP
 24518                                  SKPCLP:
 24519 000052D2 E87C07                  	call	UNPACK
 24520 000052D5 7214                            jc	short fndclus_retn	; retc
 24521                                  	
 24522                                  	; 09/09/2018
 24523                                  
 24524                                  	; MSDOS 6.0
 24525                                  	;xchg	bx,di
 24526                                  	;call	IsEOF
 24527                                  	;pop	bx
 24528                                  	;xchg	bx,di
 24529                                  	;jae	short RET9
 24530                                  
 24531                                  	; MSDOS 3.3
 24532 000052D7 53                      	push	bx
 24533 000052D8 89FB                    	mov	bx,di
 24534 000052DA E85D07                  	call	IsEOF
 24535 000052DD 5B                      	pop	bx	
 24536 000052DE 7305                    	jae	short RET9
 24537                                  
 24538 000052E0 87DF                            XCHG    BX,DI
 24539 000052E2 42                              INC     DX
 24540 000052E3 E2ED                    	LOOP	SKPCLP			; RMFS
 24541                                  RET9:	
 24542 000052E5 F8                      	CLC
 24543 000052E6 C3                              retn
 24544                                  NOCLUS:
 24545 000052E7 07                              POP	ES
 24546 000052E8 41                              INC	CX
 24547 000052E9 4A                              DEC	DX
 24548 000052EA F8                              CLC
 24549                                  
 24550                                  fndclus_retn:
 24551 000052EB C3                              retn
 24552                                  
 24553                                  ;Break  <BUFSEC -- BUFFER A SECTOR AND SET UP A TRANSFER>
 24554                                  ;--------------------------------------------------------------------------
 24555                                  ;
 24556                                  ; Procedure Name : BUFSEC
 24557                                  ;
 24558                                  ; Inputs:
 24559                                  ;       AH = priority of buffer
 24560                                  ;       AL = 0 if buffer must be read, 1 if no pre-read needed
 24561                                  ;       ES:BP = Base of drive parameters
 24562                                  ;       [CLUSNUM] = Physical cluster number
 24563                                  ;       [SECCLUSPOS] = Sector position of transfer within cluster
 24564                                  ;       [BYTCNT1] = Size of transfer
 24565                                  ; Function:
 24566                                  ;       Insure specified sector is in buffer, flushing buffer before
 24567                                  ;       read if necessary.
 24568                                  ; Outputs:
 24569                                  ;       ES:DI = Pointer to buffer
 24570                                  ;       SI = Pointer to transfer address
 24571                                  ;       CX = Number of bytes
 24572                                  ;       [NEXTADD] updated
 24573                                  ;       [TRANS] set to indicate a transfer will occur
 24574                                  ;       Carry set if error (user FAILed to I 24)
 24575                                  ;--------------------------------------------------------------------------
 24576                                  
 24577                                  BUFSEC:
 24578 000052EC 8B16[5405]                      MOV     DX,[CLUSNUM]
 24579 000052F0 8A1E[0E05]                      MOV     BL,[SECCLUSPOS]
 24580                                  	;mov	byte [ALLOWED],38h
 24581 000052F4 C606[F702]38                    MOV     byte [ALLOWED],Allowed_FAIL+Allowed_RETRY+Allowed_IGNORE
 24582 000052F9 E83901                          CALL    FIGREC
 24583 000052FC E88A0B                  	call	GETBUFFR
 24584 000052FF 72EA                            jc	short fndclus_retn
 24585                                  
 24586 00005301 C606[0F05]01                    MOV     BYTE [TRANS],1	; A transfer is taking place
 24587 00005306 8B36[5005]                      MOV     SI,[NEXTADD]
 24588 0000530A 89F7                            MOV     DI,SI
 24589 0000530C 8B0E[6405]                      MOV     CX,[BYTCNT1]
 24590 00005310 01CF                            ADD     DI,CX
 24591 00005312 893E[5005]                      MOV     [NEXTADD],DI
 24592 00005316 C43E[7405]                      LES     DI,[CURBUF]
 24593                                  	;or	byte [es:di+5],8
 24594 0000531A 26804D0508                      OR      byte [ES:DI+BUFFINFO.buf_flags],buf_isDATA
 24595                                  	;lea	di,[di+16]
 24596 0000531F 8D7D10                          LEA     DI,[DI+BUFINSIZ]        ; Point to buffer
 24597 00005322 033E[5E05]                      ADD     DI,[BYTSECPOS]
 24598 00005326 F8                              CLC
 24599 00005327 C3                              retn
 24600                                  
 24601                                  ;Break   <BUFRD, BUFWRT -- PERFORM BUFFERED READ AND WRITE>
 24602                                  
 24603                                  ;---------------------------------------------------------------------------
 24604                                  ;
 24605                                  ; Procedure Name : BUFRD
 24606                                  ;
 24607                                  ; Do a partial sector read via one of the system buffers
 24608                                  ; ES:BP Points to DPB
 24609                                  ; Carry set if error (currently user FAILed to I 24)
 24610                                  ;
 24611                                  ; DS - set to DOSDATA
 24612                                  ;
 24613                                  ;----------------------------------------------------------------------------
 24614                                  
 24615                                  BUFRD:
 24616 00005328 06                              PUSH	ES
 24617 00005329 31C0                            xor	ax, ax			; pre-read sector
 24618 0000532B E8BEFF                          CALL    BUFSEC
 24619 0000532E 7303                            JNC	short BUF_OK
 24620                                  
 24621                                  BUF_IO_FAIL:				; this label used by BUFWRT also
 24622 00005330 07                              POP	ES
 24623 00005331 EB29                            JMP     SHORT RBUFPLACED
 24624                                  
 24625                                  BUF_OK:
 24626 00005333 8CC3                            MOV     BX,ES
 24627 00005335 8E06[DC02]                      MOV     ES,[DMAADD+2]
 24628 00005339 8EDB                            MOV     DS,BX
 24629 0000533B 87FE                    	XCHG    DI,SI
 24630 0000533D D1E9                            SHR     CX,1
 24631                                  ;M039
 24632                                  	; MSDOS 3.3
 24633 0000533F 7301                    	JNC	short EVENRD
 24634 00005341 A4                      	MOVSB
 24635                                  EVENRD:
 24636 00005342 F3A5                    	REP     MOVSW
 24637                                  
 24638                                  ;	   CX = # of whole WORDs; CF=1 if odd # of bytes.
 24639                                  ;       DS:SI-> Source within Buffer.
 24640                                  ;       ES:DI-> Destination within Transfer memory block.
 24641                                  
 24642                                  	; MSDOS 6.0
 24643                                  ;	rep	movsw			;Copy Buffer to Transfer memory.
 24644                                  ;	adc	cx,0                    ;CX=1 if odd # of bytes, else CX=0.
 24645                                  ;	rep	movsb                   ;Copy last byte.
 24646                                  ;M039
 24647                                  
 24648 00005344 07                              POP	ES
 24649                                  ;hkn; SS override
 24650 00005345 36C53E[7405]                    LDS     DI,[SS:CURBUF]
 24651                                  	;lea	bx,[di+16]
 24652 0000534A 8D5D10                  	LEA     BX,[DI+BUFINSIZ]
 24653 0000534D 29DE                            SUB     SI,BX                   ; Position in buffer
 24654 0000534F E88C0A                          call	PLACEBUF
 24655                                  	;cmp	si,[es:bp+2]
 24656 00005352 263B7602                	CMP	SI,[ES:BP+DPB.SECTOR_SIZE] ; Read Last byte?
 24657 00005356 7203                            JB	short RBUFPLACEDC	; No, leave buf where it is
 24658                                  
 24659                                  ;M039
 24660                                  	; MSDOS 3.3
 24661 00005358 E8E50A                  	call	PLACEHEAD               ; Make it prime candidate for chucking
 24662                                                                          ;  even though it is MRU.
 24663                                          ; MSDOS 6.0
 24664                                  	;MOV	[BufferQueue],DI	; Make it prime candidate for
 24665                                  ;M039					; chucking even though it is MRU.
 24666                                  
 24667                                  RBUFPLACEDC:
 24668 0000535B F8                              CLC
 24669                                  RBUFPLACED:
 24670 0000535C 16                      	push	ss
 24671 0000535D 1F                      	pop	ds
 24672 0000535E C3                              retn
 24673                                  
 24674                                  ;----------------------------------------------------------------------------
 24675                                  ;
 24676                                  ; Procedure : BUFWRT
 24677                                  ;
 24678                                  ; Do a partial sector write via one of the system buffers
 24679                                  ; ES:BP Points to DPB
 24680                                  ; Carry set if error (currently user FAILed to I 24)
 24681                                  ;
 24682                                  ; DS - set to DOSDATA
 24683                                  ;
 24684                                  ;----------------------------------------------------------------------------
 24685                                  
 24686                                  BUFWRT:
 24687 0000535F A1[5A05]                        MOV     AX,[SECPOS]
 24688                                          ; MSDOS 6.0
 24689                                  	;ADD	AX,1            	; Set for next sector
 24690                                          ;MOV	[SECPOS],AX 		;F.C. >32mb	;AN000;
 24691                                          ;ADC	[SECPOS+2],0		;F.C. >32mb	;AN000;
 24692                                          ;MOV	AX,[SECPOS+2]		;F.C. >32mb	;AN000;
 24693                                          ;CMP	AX,[VALSEC+2]		;F.C. >32mb	;AN000;
 24694                                          ;MOV	AL,1			;F.C. >32mb	;AN000;
 24695                                          ;JA	short NOREAD		;F.C. >32mb	;AN000;
 24696                                          ;JB	short doread		;F.C. >32mb	;AN000;
 24697                                          ;MOV	AX,[SECPOS]		;F.C. >32mb	;AN000;
 24698                                  	; MSDOS 3.3
 24699 00005362 40                      	INC	AX
 24700 00005363 A3[5A05]                	MOV	[SECPOS],AX ; 09/09/2018
 24701                                  	; MSDOS 3.3 (& MSDOS 6.0)
 24702 00005366 3B06[5C05]                      CMP     AX,[VALSEC]		; Has sector been written before?
 24703 0000536A B001                            MOV     AL,1
 24704 0000536C 7702                            JA	short NOREAD		; Skip preread if SECPOS>VALSEC
 24705                                  ;doread:
 24706 0000536E 30C0                            XOR     AL,AL
 24707                                  NOREAD:
 24708 00005370 06                              PUSH	ES
 24709 00005371 E878FF                          CALL    BUFSEC
 24710 00005374 72BA                    	JC	short BUF_IO_FAIL
 24711 00005376 8E1E[DC02]                      MOV     DS,[DMAADD+2]
 24712 0000537A D1E9                            SHR     CX,1
 24713                                  
 24714                                  ;M039
 24715                                  	; MSDOS 3.3
 24716 0000537C 7301                    	JNC     short EVENWRT ; 09/09/2018
 24717 0000537E A4                      	MOVSB
 24718                                  EVENWRT:
 24719 0000537F F3A5                    	REP     MOVSW
 24720                                  
 24721                                  ;	   CX = # of whole WORDs; CF=1 if odd # of bytes.
 24722                                  ;       DS:SI-> Source within Transfer memory block.
 24723                                  ;       ES:DI-> Destination within Buffer.
 24724                                  
 24725                                  	; MSDOS 6.0
 24726                                  	;rep	movsw			;Copy Transfer memory to Buffer.
 24727                                  	;adc	cx,0                    ;CX=1 if odd # of bytes, else CX=0.
 24728                                  	;rep	movsb                   ;Copy last byte.
 24729                                  ;M039
 24730 00005381 07                              POP	ES
 24731                                  
 24732                                  ;hkn; SS override
 24733 00005382 36C51E[7405]                    LDS     BX,[SS:CURBUF]
 24734                                  
 24735                                  	; MSDOS 6.0
 24736                                          ;TEST	byte [BX+BUFFINFO.buf_flags],buf_dirty
 24737                                  	;				;LB. if already dirty		  ;AN000;
 24738                                          ;JNZ	short yesdirty5		;LB.  don't increment dirty count ;AN000;
 24739                                  	;call	INC_DIRTY_COUNT		;LB.				  ;AN000;
 24740                                  	
 24741                                  	;or	byte [bx+5],40h
 24742 00005387 804F0540                        OR	byte [BX+BUFFINFO.buf_flags],buf_dirty
 24743                                  ;yesdirty5:
 24744                                  	;lea	si,[bx+16]
 24745 0000538B 8D7710                          LEA     SI,[BX+BUFINSIZ]
 24746 0000538E 29F7                            SUB     DI,SI                   ; Position in buffer
 24747                                  ;M039
 24748                                  	; MSDOS 3.3
 24749 00005390 89FE                    	MOV     SI,DI
 24750 00005392 89DF                    	MOV     DI,BX
 24751 00005394 E8470A                  	call	PLACEBUF
 24752                                  	;cmp	si,[es:bp+2]
 24753 00005397 263B7602                	CMP     SI,[ES:BP+DPB.SECTOR_SIZE] ; Written last byte?
 24754 0000539B 7203                    	JB	short WBUFPLACED	; No, leave buf where it is
 24755 0000539D E8A00A                  	call	PLACEHEAD               ; Make it prime candidate for chucking
 24756                                                                          ;  even though it is MRU.
 24757                                  	; MSDOS 6.0
 24758                                  	;CMP	SI,[ES:BP+DPB.SECTOR_SIZE] ; Written last byte?
 24759                                          ;JB	short WBUFPLACED	; No, leave buf where it is
 24760                                          ;MOV	[BufferQueue],BX	; Make it prime candidate for
 24761                                  					; chucking even though it is MRU.
 24762                                  ;M039
 24763                                  
 24764                                  WBUFPLACED:
 24765 000053A0 F8                              CLC
 24766 000053A1 16                      	push	ss
 24767 000053A2 1F                      	pop	ds
 24768 000053A3 C3                              retn
 24769                                  
 24770                                  ;Break   <NEXTSEC -- Compute next sector to read or write>
 24771                                  ;---------------------------------------------------------------------------
 24772                                  ;
 24773                                  ; Procedure Name : NEXTSEC
 24774                                  ;
 24775                                  ; Compute the next sector to read or write
 24776                                  ; ES:BP Points to DPB
 24777                                  ;
 24778                                  ;---------------------------------------------------------------------------
 24779                                  
 24780                                  NEXTSEC:
 24781 000053A4 F606[0F05]FF            	test	byte [TRANS],0FFh ; -1 
 24782 000053A9 7426                            JZ	short CLRET
 24783                                  
 24784 000053AB A0[0E05]                        MOV     AL,[SECCLUSPOS]
 24785 000053AE FEC0                            INC     AL
 24786                                  	;cmp	al,[es:bp+4]
 24787 000053B0 263A4604                        CMP     AL,[ES:BP+DPB.CLUSTER_MASK]
 24788 000053B4 7618                            JBE	short SAVPOS
 24789                                  
 24790 000053B6 8B1E[5405]                      MOV     BX,[CLUSNUM]
 24791 000053BA E87D06                          call	IsEOF
 24792 000053BD 7314                            JAE	short NONEXT
 24793                                  
 24794 000053BF E88F06                          call	UNPACK
 24795 000053C2 720F                            JC	short NONEXT
 24796                                  clusgot:
 24797 000053C4 893E[5405]                      MOV     [CLUSNUM],DI
 24798 000053C8 FF06[5205]                      INC     word [LASTPOS]
 24799 000053CC B000                            MOV     AL,0
 24800                                  SAVPOS:
 24801 000053CE A2[0E05]                        MOV     [SECCLUSPOS],AL
 24802                                  CLRET:
 24803 000053D1 F8                              CLC
 24804 000053D2 C3                              retn
 24805                                  NONEXT:
 24806 000053D3 F9                              STC
 24807 000053D4 C3                              retn
 24808                                  
 24809                                  ;Break	<OPTIMIZE -- DO A USER DISK REQUEST WELL>
 24810                                  ;----------------------------------------------------------------------------
 24811                                  ;
 24812                                  ; Procedure Name : OPTIMIZE
 24813                                  ;
 24814                                  ; Inputs:
 24815                                  ;       BX = Physical cluster
 24816                                  ;       CX = No. of records
 24817                                  ;       DL = sector within cluster
 24818                                  ;       ES:BP = Base of drives parameters
 24819                                  ;       [NEXTADD] = transfer address
 24820                                  ; Outputs:
 24821                                  ;       AX = No. of records remaining
 24822                                  ;       BX = Transfer address
 24823                                  ;       CX = No. or records to be transferred
 24824                                  ;       DX = Physical sector address            (LOW)
 24825                                  ;       [HIGH_SECTOR] = Physical sector address (HIGH)
 24826                                  ;       DI = Next cluster
 24827                                  ;       [CLUSNUM] = Last cluster accessed
 24828                                  ;       [NEXTADD] updated
 24829                                  ;       Carry set if error (currently user FAILed to I 24)
 24830                                  ; ES:BP unchanged. Note that segment of transfer not set.
 24831                                  ;
 24832                                  ;---------------------------------------------------------------------------
 24833                                  
 24834                                  OPTIMIZE:
 24835 000053D5 52                      	PUSH    DX
 24836 000053D6 53                              PUSH    BX
 24837                                  	;mov	al,[es:bp+4]
 24838 000053D7 268A4604                        MOV     AL,[ES:BP+DPB.CLUSTER_MASK]
 24839 000053DB FEC0                            INC     AL              ; Number of sectors per cluster
 24840 000053DD 88C4                            MOV     AH,AL
 24841 000053DF 28D0                            SUB     AL,DL           ; AL = Number of sectors left in first cluster
 24842 000053E1 89CA                            MOV     DX,CX
 24843 000053E3 B90000                          MOV     CX,0
 24844                                  OPTCLUS:
 24845                                  ; AL has number of sectors available in current cluster
 24846                                  ; AH has number of sectors available in next cluster
 24847                                  ; BX has current physical cluster
 24848                                  ; CX has number of sequential sectors found so far
 24849                                  ; DX has number of sectors left to transfer
 24850                                  ; ES:BP Points to DPB
 24851                                  ; ES:SI has FAT pointer
 24852                                  
 24853                                  do_norm3:
 24854 000053E6 E86806                          call	UNPACK
 24855 000053E9 7237                            JC	short OP_ERR
 24856                                  clusgot2:
 24857 000053EB 00C1                    	ADD	CL,AL
 24858 000053ED 80D500                          ADC     CH,0
 24859 000053F0 39D1                            CMP     CX,DX
 24860 000053F2 7333                            JAE	short BLKDON
 24861 000053F4 88E0                            MOV     AL,AH
 24862 000053F6 43                              INC     BX
 24863 000053F7 39DF                            CMP     DI,BX
 24864 000053F9 74EB                            JZ	short OPTCLUS
 24865 000053FB 4B                              DEC     BX
 24866                                  FINCLUS:
 24867 000053FC 891E[5405]                      MOV     [CLUSNUM],BX    ; Last cluster accessed
 24868 00005400 29CA                            SUB     DX,CX           ; Number of sectors still needed
 24869 00005402 52                              PUSH    DX
 24870 00005403 89C8                            MOV     AX,CX
 24871                                  	;mul	word[ES:BP+2]
 24872 00005405 26F76602                        MUL	word [ES:BP+DPB.SECTOR_SIZE] 
 24873                                  				; Number of sectors times sector size
 24874 00005409 8B36[5005]                      MOV     SI,[NEXTADD]
 24875 0000540D 01F0                            ADD     AX,SI           ; Adjust by size of transfer
 24876 0000540F A3[5005]                        MOV     [NEXTADD],AX
 24877 00005412 58                              POP     AX              ; Number of sectors still needed
 24878 00005413 5A                              POP     DX              ; Starting cluster
 24879 00005414 29D3                            SUB     BX,DX           ; Number of new clusters accessed
 24880 00005416 011E[5205]                      ADD     [LASTPOS],BX
 24881 0000541A 5B                              POP     BX              ; BL = sector postion within cluster
 24882 0000541B E81700                  	call	FIGREC
 24883 0000541E 89F3                            MOV     BX,SI
 24884 00005420 F8                      	CLC
 24885 00005421 C3                              retn
 24886                                  
 24887                                  OP_ERR:
 24888 00005422 83C404                          ADD     SP,4
 24889 00005425 F9                      	STC
 24890 00005426 C3                              retn
 24891                                  
 24892                                  BLKDON:
 24893 00005427 29D1                            SUB     CX,DX           ; Number of sectors in cluster we don't want
 24894 00005429 28CC                            SUB     AH,CL           ; Number of sectors in cluster we accepted
 24895 0000542B FECC                            DEC     AH              ; Adjust to mean position within cluster
 24896 0000542D 8826[0E05]                      MOV     [SECCLUSPOS],AH
 24897 00005431 89D1                            MOV     CX,DX           ; Anyway, make the total equal to the request
 24898 00005433 EBC7                            JMP     SHORT FINCLUS
 24899                                  
 24900                                  ;Break	<FIGREC -- Figure sector in allocation unit>
 24901                                  ;---------------------------------------------------------------------------
 24902                                  ;
 24903                                  ; Procedure Name : FIGREC
 24904                                  ;
 24905                                  ; Inputs:
 24906                                  ;       DX = Physical cluster number
 24907                                  ;       BL = Sector position within cluster
 24908                                  ;       ES:BP = Base of drive parameters
 24909                                  ; Outputs:
 24910                                  ;       DX = physical sector number           (LOW)
 24911                                  ;       [HIGH_SECTOR] Physical sector address (HIGH)
 24912                                  ; No other registers affected.
 24913                                  ;
 24914                                  ;---------------------------------------------------------------------------
 24915                                  
 24916                                  FIGREC:
 24917 00005435 51                              PUSH    CX
 24918                                  	;mov	cl,[es:bp+5]
 24919 00005436 268A4E05                        MOV     CL,[ES:BP+DPB.CLUSTER_SHIFT]
 24920 0000543A 4A                              DEC     DX
 24921 0000543B 4A                              DEC     DX
 24922                                  
 24923                                  ;hkn; SS override HIGH_SECTOR
 24924                                  	; MSDOS 6.0
 24925                                  	;MOV	word [SS:HIGH_SECTOR],0		;F.C. >32mb
 24926                                  	;OR	CL,CL				;F.C. >32mb
 24927                                  	;JZ	short noshift			;F.C. >32mb
 24928                                  	;XOR	CH,CH 				;F.C. >32mb
 24929                                  ;rotleft:					;F.C. >32mb
 24930                                  	;CLC					;F.C. >32mb
 24931                                  	;RCL	DX,1				;F.C. >32mb
 24932                                  	;RCL	word [HIGH_SECTOR],1		;F.C. >32mb
 24933                                  	;LOOP	rotleft				;F.C. >32mb
 24934                                  ;noshift:
 24935                                  
 24936                                  	; MSDOS 3.3
 24937 0000543C D3E2                    	SHL     DX,CL
 24938                                  	; MSDOS 3.3 (& MSDOS 6.0)
 24939 0000543E 08DA                            OR      DL,BL
 24940                                  	;add	dx,[es:bp+0Bh]
 24941 00005440 2603560B                        ADD     DX,[ES:BP+DPB.FIRST_SECTOR]
 24942                                  	; MSDOS 6.0
 24943                                          ;ADC	word [HIGH_SECTOR],0		;F.C. >32mb
 24944                                  	; MSDOS 3.3 (& MSDOS 6.0)        
 24945 00005444 59                      	POP     CX
 24946                                  figrec_retn:
 24947 00005445 C3                              retn
 24948                                  
 24949                                  ; 30/07/2018 - Retro DOS v3.0
 24950                                  ; IBMDOS.COM (MSDOS3.3, 1987) - Offset 
 24951                                  
 24952                                  ;Break   <ALLOCATE -- Assign disk space>
 24953                                  ;---------------------------------------------------------------------------
 24954                                  ;
 24955                                  ; Procedure Name : ALLOCATE - Allocate Disk Space
 24956                                  ;
 24957                                  ;   ALLOCATE is called to allocate disk clusters. The new clusters are
 24958                                  ;   FAT-chained onto the end of the existing file.
 24959                                  ;
 24960                                  ;   The DPB contains the cluster # of the last free cluster allocated
 24961                                  ;   (dpb_next_free). We start at this cluster and scan towards higher
 24962                                  ;   numbered clusters, looking for the necessary free blocks.
 24963                                  ;
 24964                                  ;   Once again, fancy terminology gets in the way of corrct coding. When
 24965                                  ;   using next_free, start scanning AT THAT POINT and not the one following it.
 24966                                  ;   This fixes the boundary condition bug when only free = next_free = 2.
 24967                                  ;
 24968                                  ;       If we get to the end of the disk without satisfaction:
 24969                                  ;
 24970                                  ;           if (dpb_next_free == 2) then we've scanned the whole disk.
 24971                                  ;               return (insufficient_disk_space)
 24972                                  ;           ELSE
 24973                                  ;               dpb_next_free = 2; start scan over from the beginning.
 24974                                  ;
 24975                                  ;   Note that there is no multitasking interlock. There is no race when
 24976                                  ;   examining the entrys in an in-core FAT block since there will be no
 24977                                  ;   context switch. When UNPACK context switches while waiting for a FAT read
 24978                                  ;   we are done with any in-core FAT blocks, so again there is no race. The
 24979                                  ;   only special concern is that V2 and V3 MSDOS left the last allocated
 24980                                  ;   cluster as "00"; marking it EOF only when the entire alloc request was
 24981                                  ;   satisfied. We can't allow another activation to think this cluster is
 24982                                  ;   free, so we give it a special temporary mark to show that it is, indeed,
 24983                                  ;   allocated.
 24984                                  ;
 24985                                  ;   Note that when we run out of space this algorithem will scan from
 24986                                  ;   dpb_next_free to the end, then scan from cluster 2 through the end,
 24987                                  ;   redundantly scanning the later part of the disk. This only happens when
 24988                                  ;   we run out of space, so sue me.
 24989                                  ;
 24990                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
 24991                                  ;            C  A  V  E  A  T     P  A  T  T  E  R  S  O  N                ;
 24992                                  ;                                                                          ;
 24993                                  ;   The use of FATBYT and RESTFATBYT is somewhat mysterious. Here is the
 24994                                  ;   explanation:
 24995                                  ;
 24996                                  ;   In the NUL file case (sf_firclus currently 0) ALLOCATE is called with
 24997                                  ;   entry BX = 0. What needs to be done in this case is to stuff the cluster
 24998                                  ;   number of the first cluster allocated in sf_firclus when the ALLOCATE is
 24999                                  ;   complete. THIS VALUE IS SAVED TEMPORARILY IN CLUSTER 0, HENCE THE CURRENT
 25000                                  ;   VALUE IN CLUSTER 0 MUST BE SAVED AND RESTORED. This is a side effect of
 25001                                  ;   the fact that PACK and UNPACK don't treat requests for clusters 0 and 1 as
 25002                                  ;   errors. This "stuff" is done by the call to PACK which is right before
 25003                                  ;   the
 25004                                  ;           LOOP   findfre         ; alloc more if needed
 25005                                  ;   instruction when the first cluster is allocated to the nul file. The
 25006                                  ;   value is recalled from cluster 0 and stored at sf_firclus at ads4:
 25007                                  ;
 25008                                  ;   This method is obviously useless (because it is non-reentrant) for
 25009                                  ;   multitasking, and will have to be changed. Storing the required value on
 25010                                  ;   the stack is recommended. Setting sf_firclus at the PACK of cluster 0
 25011                                  ;   (instead of actually doing the PACK) is BAD because it doesn't handle
 25012                                  ;   problems with INT 24 well.
 25013                                  ;
 25014                                  ;            C  A  V  E  A  T     P  A  T  T  E  R  S  O  N                ;
 25015                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
 25016                                  ;                                                                          ;
 25017                                  ;       ENTRY   BX = Last cluster of file (0 if null file)
 25018                                  ;               CX = No. of clusters to allocate
 25019                                  ;               ES:BP = Base of drive parameters
 25020                                  ;               [THISSFT] = Points to SFT
 25021                                  ;
 25022                                  ;       EXIT    'C' set if insufficient space
 25023                                  ;                 [FAILERR] can be tested to see the reason for failure
 25024                                  ;                 CX = max. no. of clusters that could be added to file
 25025                                  ;               'C' clear if space allocated
 25026                                  ;                 BX = First cluster allocated
 25027                                  ;                 FAT is fully updated
 25028                                  ;                 sf_FIRCLUS field of SFT set if file was null
 25029                                  ;
 25030                                  ;       USES    ALL but SI, BP
 25031                                  
 25032                                  ;callmagic  proc near
 25033                                  ;       push    ds                             ;push segment of routine 
 25034                                  ;       push    Offset MagicPatch              ;push offset for routine
 25035                                  ;       retf                                   ;simulate jmp far
 25036                                  ;                                              ;far return address is on
 25037                                  ;                                              ;stack, so far return from
 25038                                  ;                                              ;call will return this routine
 25039                                  ;callmagic  endp
 25040                                  
 25041                                  ALLOCATE:
 25042                                  	; 10/09/2018
 25043                                  ;BEGIN MAGICDRV MODIFICATIONS
 25044                                  ;
 25045                                  ;7/5/92 scottq
 25046                                  ;
 25047                                  ;This is the disk compression patch location which allows
 25048                                  ;the disk compression software to fail allocations if the
 25049                                  ;FAT would allows allocation, but the free space for compressed
 25050                                  ;data would not.
 25051                                  ;        
 25052                                  ;;;	call    far ptr MAGICPATCH
 25053                                  ;;; We cannot do a far call since we cannot have fix-ups[romdos,hidos],
 25054                                  ;;; but we do know the segment and offset of the routine
 25055                                  ;;; so simulate a far call to dosdata:magicpatch
 25056                                  ;;; note dosassume above, so DS -> dosdata
 25057                                  
 25058                                  	; MSDOS 6.0
 25059                                          ;clc				;clear carry so we fall through
 25060                                  	;				;if no patch is present
 25061                                  	;push	cs			;push segment for far return
 25062                                          ;call	callmagic		;this is a near call
 25063                                          ;jnc	short Regular_Allocate_Path
 25064                                  	;jmp	Disk_Full_Return
 25065                                  
 25066                                  	; MSDOS 6.0
 25067                                          ;clc				;clear carry so we fall through
 25068                                  	;				;if no patch is present
 25069                                  	;push	cs			;push segment for far return
 25070                                          ;call	callmagic		;this is a near call
 25071                                          ;jnc	short Regular_Allocate_Path
 25072                                  	;jmp	Disk_Full_Return ; 10/09/2018 !
 25073                                  
 25074                                  ;Regular_Allocate_Path:
 25075                                  ;END MAGICDRV MODIFICATIONS
 25076                                  
 25077 00005446 53                              PUSH    BX                      ; save (bx)
 25078 00005447 31DB                            XOR     BX,BX
 25079 00005449 E80506                  	call	UNPACK
 25080 0000544C 893E[2E05]                      MOV     [FATBYT],DI             ; save correct cluster 0 value
 25081 00005450 5B                              POP     BX
 25082 00005451 72F2                            jc	short figrec_retn	; abort if error   [INTERR?]
 25083                                  
 25084 00005453 51                              PUSH    CX
 25085 00005454 53                              PUSH    BX
 25086                                  
 25087 00005455 89DA                            MOV     DX,BX
 25088                                  	;mov	bx,[es:bp+1Ch]
 25089 00005457 268B5E1C                        mov     bx,[ES:BP+DPB.NEXT_FREE]
 25090 0000545B 83FB02                          cmp     bx,2
 25091 0000545E 7709                            ja	short FINDFRE
 25092                                  
 25093                                  ;   couldn't find enough free space beyond dpb_next_free, or dpb_next_free is
 25094                                  ;   <2 or >dpb_max_clus. Reset it and restart the scan
 25095                                  
 25096                                  ads1:
 25097                                  	;mov	word [es:bp+1Ch],2
 25098 00005460 26C7461C0200                    mov     word [ES:BP+DPB.NEXT_FREE],2
 25099 00005466 BB0100                          mov     bx,1                    ; Counter next instruction so first
 25100                                                                          ;       cluster examined is 2
 25101                                  
 25102                                  ;   Scanning both forwards and backwards for a free cluster
 25103                                  ;
 25104                                  ;       (BX) = forwards scan pointer
 25105                                  ;       (CX) = clusters remaining to be allocated
 25106                                  ;       (DX) = current last cluster in file
 25107                                  ;       (TOS) = last cluster of file
 25108                                  
 25109                                  FINDFRE:
 25110 00005469 43                              INC     BX
 25111                                  	;cmp	bx,[es:bp+0Dh]
 25112 0000546A 263B5E0D                        CMP	BX,[ES:BP+DPB.MAX_CLUSTER]
 25113 0000546E 7757                    	ja	short ads7	; at end of disk
 25114 00005470 E8DE05                          call	UNPACK          ; check out this cluster
 25115 00005473 722F                            jc	short ads4	; FAT error             [INTERR?]
 25116 00005475 75F2                            jnz	short FINDFRE	; not free, keep on truckin
 25117                                  
 25118                                  ;   Have found a free cluster. Chain it to the file
 25119                                  ;
 25120                                  ;       (BX) = found free cluster #
 25121                                  ;       (DX) = current last cluster in file
 25122                                  
 25123                                  	;mov	[es:bp+1Ch],bx
 25124 00005477 26895E1C                        mov	[ES:BP+DPB.NEXT_FREE],bx ; next time start search here
 25125 0000547B 92                              xchg    ax,dx           ; save (dx) in ax
 25126 0000547C BA0100                          mov     dx,1            ; mark this free guy as "1"
 25127 0000547F E81806                  	call	PACK            ; set special "temporary" mark
 25128 00005482 7220                            jc	short ads4	; FAT error             [INTERR?]
 25129                                  	;cmp	word [es:bp+1Eh],-1
 25130 00005484 26837E1EFF                      CMP	word [ES:BP+DPB.FREE_CNT],-1 ; Free count valid?
 25131 00005489 7404                            JZ	short NO_ALLOC	; No
 25132                                  	;dec	word [es:bp+1Eh]
 25133 0000548B 26FF4E1E                        DEC     word [ES:BP+DPB.FREE_CNT] ; Reduce free count by 1
 25134                                  NO_ALLOC:
 25135 0000548F 92                              xchg    ax,dx           ; (dx) = current last cluster in file
 25136 00005490 87DA                            XCHG    BX,DX
 25137 00005492 89D0                            MOV     AX,DX
 25138 00005494 E80306                  	call	PACK            ; link free cluster onto file
 25139                                                                  ;  CAVEAT.. On Nul file, first pass stuffs
 25140                                                                  ;    cluster 0 with FIRCLUS value.
 25141 00005497 720B                            jc	short ads4	; FAT error [INTERR?]
 25142 00005499 93                              xchg    BX,AX           ; (BX) = last one we looked at
 25143 0000549A 89DA                            mov     dx,bx           ; (dx) = current end of file
 25144 0000549C E2CB                            LOOP    FINDFRE         ; alloc more if needed
 25145                                  
 25146                                  ;   We've successfully extended the file. Clean up and exit
 25147                                  ;
 25148                                  ;       (BX) = last cluster in file
 25149                                  
 25150 0000549E BAFFFF                          MOV     DX,0FFFFH
 25151 000054A1 E8F605                  	call	PACK            ; mark last cluster EOF
 25152                                  
 25153                                  ;   Note that FAT errors jump here to clean the stack and exit. This saves us
 25154                                  ;   2 whole bytes.  Hope its worth it...
 25155                                  ;
 25156                                  ;       'C' set iff error
 25157                                  ;       calling (BX) and (CX) pushed on stack
 25158                                  
 25159                                  ads4:   
 25160 000054A4 5B                      	POP     BX
 25161 000054A5 59                              POP     CX              ; Don't need this stuff since we're successful
 25162 000054A6 729D                            jc	short figrec_retn
 25163 000054A8 E8A605                          call	UNPACK          ; Get first cluster allocated for return
 25164                                                                  ; CAVEAT... In nul file case, UNPACKs cluster 0.
 25165 000054AB 7298                            jc	short figrec_retn
 25166 000054AD E82D00                  	call	RESTFATBYT      ; Restore correct cluster 0 value
 25167 000054B0 7293                            jc	short figrec_retn
 25168 000054B2 87DF                            XCHG    BX,DI           ; (DI) = last cluster in file upon our entry
 25169 000054B4 09FF                            OR      DI,DI           ; clear 'C'
 25170 000054B6 758D                    	jnz	short figrec_retn ; we were extending an existing file
 25171                                  
 25172                                  ;   We were doing the first allocation for a new file. Update the SFT cluster
 25173                                  ;   info
 25174                                  dofastk:
 25175 000054B8 06                              PUSH	ES
 25176 000054B9 C43E[3605]                      LES     DI,[THISSFT]
 25177                                  	;mov	[es:di+0Bh],bx
 25178 000054BD 26895D0B                        MOV     [ES:DI+SF_ENTRY.sf_firclus],BX
 25179                                  	;mov	[es:di+1Bh],bx
 25180 000054C1 26895D1B                        MOV     [ES:DI+SF_ENTRY.sf_lstclus],BX
 25181 000054C5 07                              POP	ES
 25182 000054C6 C3                              retn
 25183                                  
 25184                                  ;** we're at the end of the disk, and not satisfied. See if we've scanned ALL
 25185                                  ;   of the disk...
 25186                                  
 25187                                  ads7:   
 25188 000054C7 26837E1C02              	cmp	word [ES:BP+DPB.NEXT_FREE],2
 25189 000054CC 7592                    	jnz	short ads1	; start scan from front of disk
 25190                                  
 25191                                  ;   Sorry, we've gone over the whole disk, with insufficient luck. Lets give
 25192                                  ;   the space back to the free list and tell the caller how much he could have
 25193                                  ;   had.  We have to make sure we remove the "special mark" we put on the last
 25194                                  ;   cluster we were able to allocate, so it doesn't become orphaned.
 25195                                  ;
 25196                                  ;       (CX) = clusters remaining to be allocated
 25197                                  ;       (TOS) = last cluster of file (before call to ALLOCATE)
 25198                                  ;       (TOS+1) = # of clusters wanted to allocate
 25199                                  
 25200 000054CE 5B                              POP     BX              ; (BX) = last cluster of file
 25201 000054CF BAFFFF                          MOV     DX,0FFFFH
 25202 000054D2 E81A00                  	call	RELBLKS         ; give back any clusters just alloced
 25203 000054D5 58                              POP     AX              ; No. of clusters requested
 25204                                                                  ; Don't "retc". We are setting Carry anyway,
 25205                                                                  ;   Alloc failed, so proceed with return CX
 25206                                                                  ;   setup.
 25207 000054D6 29C8                            SUB     AX,CX           ; AX=No. of clusters allocated
 25208 000054D8 E80200                  	call	RESTFATBYT      ; Don't "retc". We are setting Carry anyway,
 25209                                                                  ;   Alloc failed.
 25210                                  Disk_Full_Return:               ;label added for magic patch 8-6-92 scottq
 25211                                          ; MSDOS 6.0
 25212                                  	;MOV	byte [DISK_FULL],1 ;MS. indicating disk full
 25213 000054DB F9                              STC
 25214 000054DC C3                              retn
 25215                                  
 25216                                  ;-----------------------------------------------------------------------
 25217                                  ;
 25218                                  ; Procedure Name : RESTFATBYT
 25219                                  ;
 25220                                  ; SEE ALLOCATE CAVEAT
 25221                                  ;       Carry set if error (currently user FAILed to I 24)
 25222                                  ;-----------------------------------------------------------------------
 25223                                  
 25224                                  RESTFATBYT:
 25225 000054DD 53                              PUSH    BX
 25226 000054DE 52                              PUSH    DX
 25227 000054DF 57                              PUSH    DI
 25228 000054E0 31DB                            XOR     BX,BX
 25229 000054E2 8B16[2E05]                      MOV     DX,[FATBYT]
 25230 000054E6 E8B105                  	call	PACK
 25231 000054E9 5F                              POP     DI
 25232 000054EA 5A                              POP     DX
 25233 000054EB 5B                              POP     BX
 25234                                  RELEASE_flush:
 25235 000054EC C3                      	retn
 25236                                  
 25237                                  ;Break	<RELEASE -- DEASSIGN DISK SPACE>
 25238                                  ;---------------------------------------------------------------------------
 25239                                  ;
 25240                                  ; Procedure Name : RELEASE
 25241                                  ;
 25242                                  ; Inputs:
 25243                                  ;       BX = Cluster in file
 25244                                  ;       ES:BP = Base of drive parameters
 25245                                  ; Function:
 25246                                  ;       Frees cluster chain starting with [BX]
 25247                                  ;       Carry set if error (currently user FAILed to I 24)
 25248                                  ; AX,BX,DX,DI all destroyed. Other registers unchanged.
 25249                                  ;
 25250                                  ;-----------------------------------------------------------------------------
 25251                                  
 25252                                  RELEASE:
 25253 000054ED 31D2                            XOR     DX,DX
 25254                                  
 25255                                  	;entry	RELBLKS
 25256                                  RELBLKS:
 25257                                  
 25258                                  ;   Enter here with DX=0FFFFH to put an end-of-file mark in the first cluster
 25259                                  ;   and free the rest in the chain.
 25260                                  
 25261 000054EF E85F05                  	call	UNPACK
 25262 000054F2 72F8                    	jc	short RELEASE_flush
 25263 000054F4 74F6                    	jz	short RELEASE_flush
 25264 000054F6 89F8                            MOV     AX,DI
 25265 000054F8 52                              PUSH    DX
 25266 000054F9 E89E05                  	call	PACK
 25267 000054FC 5A                              POP     DX
 25268 000054FD 72ED                    	jc	short RELEASE_flush
 25269 000054FF 09D2                            OR      DX,DX
 25270 00005501 750B                            JNZ	short NO_DEALLOC	; Was putting EOF mark
 25271                                  	;cmp	word [es:bp+1Eh],-1
 25272 00005503 26837E1EFF              	CMP     word [ES:BP+DPB.FREE_CNT],-1 ; Free count valid?
 25273 00005508 7404                            JZ	short NO_DEALLOC	; No
 25274 0000550A 26FF461E                        INC	word [ES:BP+DPB.FREE_CNT] ; Increase free count by 1
 25275                                  NO_DEALLOC:
 25276 0000550E 89C3                            MOV     BX,AX
 25277 00005510 48                              dec     ax              ; check for "1"
 25278 00005511 74D9                    	jz	short RELEASE_flush	; is last cluster of incomplete chain
 25279 00005513 E82405                  	call	IsEOF
 25280 00005516 72D5                            JB	short RELEASE	; Carry clear if JMP not taken
 25281                                  
 25282                                  ;RELEASE_flush:
 25283                                  	; MSDOS 6.0
 25284                                  	;mov	al,[es:bp]
 25285                                  	;;MOV	AL,[ES:BP+DPB.DRIVE]
 25286                                  	;push	si		; FLUSHBUF may trash these and we guarantee
 25287                                  	;push	cx		;  them to be preserved.
 25288                                  	;push	es
 25289                                  	;push	bp
 25290                                  	;call	FLUSHBUF	; commit buffers for this drive
 25291                                  	;pop	bp
 25292                                  	;pop	es
 25293                                  	;pop	cx
 25294                                  	;pop	si
 25295                                  RET12:
 25296 00005518 C3                      	retn
 25297                                  
 25298                                  ;Break	<GETEOF -- Find the end of a file>
 25299                                  ;------------------------------------------------------------------------
 25300                                  ;
 25301                                  ; Procedure Name : GETEOF
 25302                                  ;
 25303                                  ; Inputs:
 25304                                  ;       ES:BP Points to DPB
 25305                                  ;       BX = Cluster in a file
 25306                                  ;       DS = CS
 25307                                  ; Outputs:
 25308                                  ;       BX = Last cluster in the file
 25309                                  ;       Carry set if error (currently user FAILed to I 24)
 25310                                  ; DI destroyed. No other registers affected.
 25311                                  ;
 25312                                  ;--------------------------------------------------------------------------
 25313                                  
 25314                                  GETEOF:
 25315 00005519 E83505                  	call	UNPACK
 25316 0000551C 72FA                            jc	short RET12
 25317 0000551E 53                              PUSH    BX
 25318 0000551F 89FB                            MOV     BX,DI
 25319 00005521 E81605                  	call	IsEOF
 25320 00005524 5B                              POP     BX
 25321 00005525 73F1                            JAE     short RET12
 25322 00005527 89FB                            MOV     BX,DI
 25323 00005529 EBEE                            JMP     short GETEOF
 25324                                  
 25325                                  ;============================================================================
 25326                                  ; FCB.ASM, MSDOS 6.0, 1991
 25327                                  ;============================================================================
 25328                                  ; 30/07/2018 - Retro DOS v3.0
 25329                                  
 25330                                  ;	TITLE	FCB - FCB parse calls for MSDOS
 25331                                  ;	NAME	FCB
 25332                                  
 25333                                  ;**	FCB.ASM -  Low level routines for parsing names into FCBs and analyzing
 25334                                  ;		   filename characters
 25335                                  ;
 25336                                  ;	MakeFcb
 25337                                  ;	NameTrans
 25338                                  ;	PATHCHRCMP
 25339                                  ;	GetLet
 25340                                  ;	UCase
 25341                                  ;	GetLet3
 25342                                  ;	GetCharType
 25343                                  ;	TESTKANJ
 25344                                  ;	NORMSCAN
 25345                                  ;	DELIM
 25346                                  ;
 25347                                  ;	Revision history:
 25348                                  ;
 25349                                  ;		A000  version 4.00  Jan. 1988
 25350                                  ;	
 25351                                  ;	M048 - access FILE_UCASE_TAB using DS rather than SS.
 25352                                  
 25353                                  TableLook	EQU -1
 25354                                  
 25355                                  SCANSEPARATOR	EQU	1
 25356                                  DRVBIT		EQU	2
 25357                                  NAMBIT		EQU	4
 25358                                  EXTBIT		EQU	8
 25359                                  
 25360                                  ;
 25361                                  ;----------------------------------------------------------------------------
 25362                                  ;
 25363                                  ; Procedure : MakeFcb
 25364                                  ;
 25365                                  ;----------------------------------------------------------------------------
 25366                                  ;
 25367                                  
 25368                                  MAKEFCB:
 25369                                  ;hkn; SS override
 25370 0000552B 36C606[FA02]00          	MOV	BYTE [SS:SpaceFlag],0
 25371 00005531 30D2                    	XOR	DL,DL		; Flag--not ambiguous file name
 25372                                  	;test	al,2
 25373 00005533 A802                    	test	AL,DRVBIT	; Use current drive field if default?
 25374 00005535 7504                    	JNZ	short DEFDRV
 25375 00005537 26C60500                	MOV	BYTE [ES:DI],0	; No - use default drive
 25376                                  DEFDRV:
 25377 0000553B 47                      	INC	DI
 25378 0000553C B90800                  	MOV	CX,8
 25379                                  	;test	al,4
 25380 0000553F A804                    	test	AL,NAMBIT	; Use current name fields as default?
 25381 00005541 93                      	XCHG	AX,BX		; Save bits in BX
 25382 00005542 B020                    	MOV	AL," "
 25383 00005544 7404                    	JZ	short FILLB	; If not, go fill with blanks
 25384 00005546 01CF                    	ADD	DI,CX
 25385 00005548 31C9                    	XOR	CX,CX		; Don't fill any
 25386                                  FILLB:
 25387 0000554A F3AA                    	REP	STOSB
 25388 0000554C B103                    	MOV	CL,3
 25389 0000554E F6C308                  	test	BL,EXTBIT	; Use current extension as default
 25390 00005551 7404                    	JZ	short FILLB2
 25391 00005553 01CF                    	ADD	DI,CX
 25392 00005555 31C9                    	XOR	CX,CX
 25393                                  FILLB2:
 25394 00005557 F3AA                    	REP	STOSB
 25395 00005559 91                      	XCHG	AX,CX		; Put zero in AX
 25396 0000555A AB                      	STOSW
 25397 0000555B AB                      	STOSW			; Initialize two words after to zero
 25398 0000555C 83EF10                  	SUB	DI,16		; Point back at start
 25399                                  	;test	bl,1
 25400 0000555F F6C301                  	test	BL,SCANSEPARATOR; Scan off separators if not zero
 25401 00005562 7409                    	JZ	short SKPSPC
 25402 00005564 E87300                  	CALL	SCANB		; Peel off blanks and tabs
 25403 00005567 E8CA00                  	CALL	DELIM		; Is it a one-time-only delimiter?
 25404 0000556A 7504                    	JNZ	short NOSCAN
 25405 0000556C 46                      	INC	SI		; Skip over the delimiter
 25406                                  SKPSPC:
 25407 0000556D E86A00                  	CALL	SCANB		; Always kill preceding blanks and tabs
 25408                                  NOSCAN:
 25409 00005570 E89C00                  	CALL	GETLET
 25410 00005573 7616                    	JBE	short NODRV	; Quit if termination character
 25411 00005575 803C3A                  	CMP	BYTE [SI],":"	; Check for potential drive specifier
 25412 00005578 7511                    	JNZ	short NODRV
 25413 0000557A 46                      	INC	SI		; Skip over colon
 25414 0000557B 2C40                    	SUB	AL,"@"          ; Convert drive letter to drive number (A=1)
 25415 0000557D 7607                    	JBE	short BADDRV	; Drive letter out of range
 25416                                  
 25417 0000557F 50                      	PUSH	AX
 25418 00005580 E8DB13                  	call	GetVisDrv
 25419 00005583 58                      	POP	AX
 25420 00005584 7302                    	JNC	short HAVDRV
 25421                                  
 25422                                  	; MSDOS 6.0
 25423                                  ;hkn; SS override
 25424                                  	;CMP	byte [SS:DrvErr],error_not_DOS_disk
 25425                                  	;				; if not FAT drive ;AN000;
 25426                                  	;JZ	short HAVDRV		; assume ok	   ;AN000;
 25427                                  BADDRV:
 25428 00005586 B2FF                    	MOV	DL,-1
 25429                                  HAVDRV:
 25430 00005588 AA                      	STOSB			; Put drive specifier in first byte
 25431 00005589 46                      	INC	SI
 25432 0000558A 4F                      	DEC	DI		; Counteract next two instructions
 25433                                  NODRV:
 25434 0000558B 4E                      	DEC	SI		; Back up
 25435 0000558C 47                      	INC	DI		; Skip drive byte
 25436                                  
 25437                                  	;entry	NORMSCAN
 25438                                  NORMSCAN:
 25439 0000558D B90800                  	MOV	CX,8
 25440 00005590 E81300                  	CALL	GETWORD 	; Get 8-letter file name
 25441 00005593 803C2E                  	CMP	BYTE [SI],"."
 25442 00005596 7507                    	JNZ	short NODOT
 25443 00005598 46                      	INC	SI		; Skip over dot if present
 25444                                  
 25445                                  	; MSDOS6.0
 25446                                  ;hkn; SS override
 25447                                  	;TEST	word [SS:DOS34_FLAG],DBCS_VOLID2	;AN000;
 25448                                  	;JZ	short VOLOK				;AN000;
 25449                                  	;MOVSB			; 2nd byte of DBCS	;AN000;
 25450                                  	;MOV	CX,2					;AN000;
 25451                                  	;JMP	SHORT contvol				;AN000;
 25452                                  ;VOLOK:
 25453 00005599 B90300                  	MOV	CX,3		; Get 3-letter extension
 25454                                  contvol:
 25455 0000559C E80D00                  	CALL	MUSTGETWORD
 25456                                  NODOT:
 25457 0000559F 88D0                    	MOV	AL,DL
 25458                                  
 25459                                  	; MSDOS 6.0
 25460                                  	;and	word [ss:DOS34_FLAG],~DBCS_VOLID2 ; ### BUG FIX ###
 25461                                  
 25462 000055A1 C3                      	retn
 25463                                  
 25464                                  NONAM:
 25465 000055A2 01CF                    	ADD	DI,CX
 25466 000055A4 4E                      	DEC	SI
 25467 000055A5 C3                      	retn
 25468                                  
 25469                                  GETWORD:
 25470 000055A6 E86600                  	CALL	GETLET		
 25471 000055A9 76F7                    	JBE	short NONAM	; Exit if invalid character
 25472 000055AB 4E                      	DEC	SI
 25473                                  
 25474                                  ;	UGH!!! Horrible bug here that should be fixed at some point:
 25475                                  ;	If the name we are scanning is longer than CX, we keep on reading!
 25476                                  
 25477                                  MUSTGETWORD:
 25478 000055AC E86000                  	CALL	GETLET
 25479                                  
 25480                                  ;	If spaceFlag is set then we allow spaces in a pathname
 25481                                  
 25482                                  ;IF NOT TABLELOOK
 25483 000055AF 7223                    	JB	short FILLNAM
 25484                                  ;ENDIF
 25485 000055B1 750C                    	JNZ	short MustCheckCX
 25486                                  
 25487                                  ;hkn; SS override
 25488 000055B3 36F606[FA02]FF          	test	BYTE [SS:SpaceFlag],0FFh
 25489 000055B9 7419                    	JZ	short FILLNAM
 25490 000055BB 3C20                    	CMP	AL," "
 25491 000055BD 7515                    	JNZ	short FILLNAM
 25492                                  
 25493                                  MustCheckCX:
 25494 000055BF E3EB                    	JCXZ	MUSTGETWORD
 25495 000055C1 49                      	DEC	CX
 25496 000055C2 3C2A                    	CMP	AL,"*"          ; Check for ambiguous file specifier
 25497 000055C4 7504                    	JNZ	short NOSTAR
 25498 000055C6 B03F                    	MOV	AL,"?"
 25499 000055C8 F3AA                    	REP	STOSB
 25500                                  NOSTAR:
 25501 000055CA AA                      	STOSB
 25502 000055CB 3C3F                    	CMP	AL,"?"
 25503 000055CD 75DD                    	JNZ	short MUSTGETWORD
 25504 000055CF 80CA01                  	OR	DL,1		; Flag ambiguous file name
 25505 000055D2 EBD8                    	JMP	short MUSTGETWORD
 25506                                  FILLNAM:
 25507 000055D4 B020                    	MOV	AL," "
 25508 000055D6 F3AA                    	REP	STOSB
 25509 000055D8 4E                      	DEC	SI
 25510 000055D9 C3                      	retn
 25511                                  
 25512                                  SCANB:
 25513 000055DA AC                      	LODSB
 25514 000055DB E86200                  	CALL	SPCHK
 25515 000055DE 74FA                    	JZ	short SCANB
 25516 000055E0 4E                      	DEC	SI
 25517                                  scanb_retn:
 25518 000055E1 C3                      	retn
 25519                                  
 25520                                  ;----------------------------------------------------------------------------
 25521                                  ;
 25522                                  ; Procedure Name : NameTrans
 25523                                  ;
 25524                                  ; NameTrans is used by FindPath to scan off an element of a path. We must
 25525                                  ; allow spaces in pathnames
 25526                                  ;
 25527                                  ;   Inputs:	DS:SI points to start of path element
 25528                                  ;   Outputs:	Name1 has unpacked name, uppercased
 25529                                  ;		ES = DOSGroup
 25530                                  ;		DS:SI advanced after name
 25531                                  ;   Registers modified: DI,AX,DX,CX
 25532                                  ;
 25533                                  ;----------------------------------------------------------------------------
 25534                                  
 25535                                  NameTrans:
 25536                                  ;hkn; SS override
 25537 000055E2 36C606[FA02]01          	MOV	BYTE [SS:SpaceFlag],1
 25538 000055E8 16                      	push	ss
 25539 000055E9 07                      	pop	es
 25540                                  
 25541                                  ;hkn; NAME1 is in DOSDATA
 25542 000055EA BF[E604]                	MOV	DI,NAME1
 25543 000055ED 57                      	PUSH	DI
 25544 000055EE B82020                  	MOV	AX,'  '
 25545 000055F1 B90500                  	MOV	CX,5
 25546 000055F4 AA                      	STOSB
 25547 000055F5 F3AB                    	REP	STOSW		; Fill "FCB" at NAME1 with spaces
 25548 000055F7 30C0                    	XOR	AL,AL		; Set stuff for NORMSCAN
 25549 000055F9 88C2                    	MOV	DL,AL
 25550 000055FB AA                      	STOSB
 25551 000055FC 5F                      	POP	DI
 25552                                  
 25553 000055FD E88DFF                  	CALL	NORMSCAN
 25554                                  
 25555                                  ;hkn; SS override for NAME1
 25556 00005600 36803E[E604]E5          	CMP	byte [SS:NAME1],0E5H
 25557 00005606 75D9                    	jnz	short scanb_retn
 25558 00005608 36C606[E604]05          	MOV	byte [SS:NAME1],5 ; Magic name translation
 25559 0000560E C3                      	retn
 25560                                  
 25561                                  ;Break	<GETLET, DELIM -- CHECK CHARACTERS AND CONVERT>
 25562                                  
 25563                                  ;----------------------------------------------------------------------------
 25564                                  ;
 25565                                  ; Procedure Names : GetLet, UCase, GetLet3
 25566                                  ;
 25567                                  ; These routines take a character, convert it to upper case, and check
 25568                                  ; for delimiters.  Three different entry points:
 25569                                  ;	GetLet -  DS:[SI] = character to convert
 25570                                  ;	UCase  -  AL = character to convert
 25571                                  ;	GetLet3 - AL = character
 25572                                  ;		  [BX] = translation table to use
 25573                                  ;
 25574                                  ;	Exit (in all cases) : AL = upper case character
 25575                                  ;			      CY set if char is control char other than TAB
 25576                                  ;			      ZF set if char is a delimiter
 25577                                  ;	Uses : AX, flags
 25578                                  ;
 25579                                  ; NOTE: This routine exists in a fast table lookup version, and a slow
 25580                                  ; inline version.  Return with carry set is only possible in the inline
 25581                                  ; version.  The table lookup version is the one in use.
 25582                                  ;
 25583                                  ;----------------------------------------------------------------------------
 25584                                  
 25585                                  
 25586                                  ; This entry point has character at [SI]
 25587                                  
 25588                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5517h
 25589                                  GETLET:	
 25590 0000560F AC                      	LODSB
 25591                                  
 25592                                  ; This entry point has character in AL
 25593                                  
 25594                                  	;entry	UCase
 25595                                  UCase:	
 25596                                  	; 09/08/2018
 25597                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5518h
 25598                                  _UCase:
 25599 00005610 53                      	PUSH	BX
 25600 00005611 BB[0A11]                	MOV	BX,FILE_UCASE_TAB+2
 25601                                  
 25602                                  ; Convert the character in AL to upper case
 25603                                  
 25604                                  gl_0:
 25605 00005614 3C61                    	CMP	AL,"a"
 25606 00005616 720E                    	JB	short gl_2	; Already upper case, go check type
 25607 00005618 3C7A                    	CMP	AL,"z"
 25608 0000561A 7702                    	JA	short gl_1
 25609 0000561C 2C20                    	SUB	AL,20H		; Convert to upper case
 25610                                  
 25611                                  ; Map European character to upper case
 25612                                  
 25613                                  gl_1:
 25614 0000561E 3C80                    	CMP	AL,80H
 25615 00005620 7204                    	JB	short gl_2	; Not EuroChar, go check type
 25616 00005622 2C80                    	SUB	AL,80H		; translate to upper case with this index
 25617                                  
 25618                                  	; M048 - Start 
 25619                                  	; Lantastic call Ucase thru int 2f without setting SS to DOSDATA.
 25620                                  	; So we shall set up DS and to access FILE_UCASE_TAB in BX and also 
 25621                                  	; preserve it.
 25622                                  	;
 25623                                  
 25624                                  	;push	ds
 25625                                  	;push	cs
 25626                                  	;pop	ds
 25627                                  
 25628                                  	; 09/08/2018
 25629                                  	;XLAT	BYTE [CS:BX]	; ds as file_ucase_tab is in DOSDATA
 25630 00005624 2ED7                    	CS	XLAT
 25631                                  
 25632                                  	;pop	ds
 25633                                  
 25634                                  	; M048 - End
 25635                                  
 25636                                  ; Now check the type
 25637                                  
 25638                                  ;If TableLook
 25639                                  
 25640                                  gl_2:
 25641 00005626 50                      	PUSH	AX
 25642                                  	
 25643                                  	; MSDOS 6.0
 25644                                  	;CALL	GetCharType	; returns type flags in AL
 25645                                  	
 25646                                  	; MSDOS 3.3
 25647 00005627 BB[1613]                	mov	bx,CharType
 25648                                  	; 09/08/2018
 25649                                  	;xlat	byte [cs:bx]
 25650 0000562A 2ED7                    	cs	xlat	
 25651                                  
 25652                                  	;test	al,1	
 25653 0000562C A801                    	TEST	AL,FCHK 	; test for normal character
 25654 0000562E 58                      	POP	AX
 25655 0000562F 5B                      	POP	BX
 25656 00005630 C3                      	RETN
 25657                                  
 25658                                  ; This entry has character in AL and lookup table in BX
 25659                                  
 25660                                  	; MSDOS 6.0
 25661                                  ;	;entry GetLet3
 25662                                  GETLET3: ; 10/08/2018
 25663 00005631 53                      	PUSH	BX
 25664 00005632 EBE0                    	JMP	short gl_0
 25665                                  
 25666                                  ;ELSE
 25667                                  ;
 25668                                  ;gl_2:
 25669                                  ;	POP	BX
 25670                                  ;	CMP	AL,"."
 25671                                  ;	retz
 25672                                  ;	CMP	AL,'"'
 25673                                  ;	retz
 25674                                  ;	CALL	PATHCHRCMP
 25675                                  ;	retz
 25676                                  ;	CMP	AL,"["
 25677                                  ;	retz
 25678                                  ;	CMP	AL,"]"
 25679                                  ;	retz
 25680                                  ;ENDIF
 25681                                  
 25682                                  ;---------------------------------------------------------------------
 25683                                  ;
 25684                                  ; DELIM - check if character is a delimiter
 25685                                  ;	Entry : AX = character to check
 25686                                  ;	Exit  : ZF set if character is not a delimiter
 25687                                  ;	Uses  : Flags
 25688                                  ;
 25689                                  ;--------------------------------------------------------------------
 25690                                  
 25691                                  	;entry	DELIM
 25692                                  DELIM:
 25693                                  ;IF TableLook
 25694 00005634 50                      	PUSH	AX
 25695                                  
 25696                                  	; MSDOS 6.0
 25697                                  	;CALL	GetCharType
 25698                                  	
 25699                                  	; MSDOS 3.3
 25700 00005635 53                      	push	bx
 25701 00005636 BB[1613]                	mov	bx,CharType
 25702                                  	;09/08/2018
 25703                                  	;xlat	byte [cs:bx]
 25704 00005639 2ED7                    	cs	xlat
 25705 0000563B 5B                      	pop	bx
 25706                                  
 25707                                  	;test	al,2
 25708 0000563C A802                    	TEST	AL,FDELIM
 25709 0000563E 58                      	POP	AX
 25710 0000563F C3                      	RETN
 25711                                  ;ELSE
 25712                                  ;	CMP	AL,":"
 25713                                  ;	retz
 25714                                  ;
 25715                                  ;	CMP	AL,"<"
 25716                                  ;	retz
 25717                                  ;	CMP	AL,"|"
 25718                                  ;	retz
 25719                                  ;	CMP	AL,">"
 25720                                  ;	retz
 25721                                  ;
 25722                                  ;	CMP	AL,"+"
 25723                                  ;	retz
 25724                                  ;	CMP	AL,"="
 25725                                  ;	retz
 25726                                  ;	CMP	AL,";"
 25727                                  ;	retz
 25728                                  ;	CMP	AL,","
 25729                                  ;	retz
 25730                                  ;ENDIF
 25731                                  
 25732                                  ;-------------------------------------------------------------------------
 25733                                  ;
 25734                                  ;  SPCHK - checks to see if a character is a space or equivalent
 25735                                  ;	Entry : AL = character to check
 25736                                  ;	Exit  : ZF set if character is a space
 25737                                  ;	Uses  : flags
 25738                                  ;
 25739                                  ;-------------------------------------------------------------------------
 25740                                  
 25741                                  	;entry SPCHK
 25742                                  SPCHK:
 25743                                  ;IF TableLook
 25744 00005640 50                      	PUSH	AX
 25745                                  
 25746                                  	; MSDOS 6.0
 25747                                  	;CALL	GetCharType
 25748                                  	
 25749                                  	; MSDOS 3.3
 25750 00005641 53                      	push	bx
 25751 00005642 BB[1613]                	mov	bx,CharType
 25752                                  	; 09/08/2018
 25753                                  	;xlat	byte [cs:bx]
 25754 00005645 2ED7                    	cs	xlat
 25755 00005647 5B                      	pop	bx
 25756                                  
 25757                                  	;test	al,4
 25758 00005648 A804                    	TEST	AL,FSPCHK
 25759 0000564A 58                      	POP	AX
 25760 0000564B C3                      	RETN
 25761                                  ;ELSE
 25762                                  ;	CMP	AL,9		; Filter out tabs too
 25763                                  ;	retz
 25764                                  ;; WARNING! " " MUST be the last compare
 25765                                  ;	CMP	AL," "
 25766                                  ;	return
 25767                                  ;ENDIF
 25768                                  
 25769                                  ; MSDOS 6.0
 25770                                  ;-------------------------------------------------------------------------
 25771                                  ;
 25772                                  ;  GetCharType - return flag bits indicating character type
 25773                                  ;	Bits are defined in DOSSYM.INC. Uses lookup table
 25774                                  ;	defined above at label CharType.
 25775                                  ;
 25776                                  ;	Entry : AL = character to return type flags for
 25777                                  ;	Exit  : AL = type flags
 25778                                  ;	Uses  : AL, flags
 25779                                  ;
 25780                                  ;-------------------------------------------------------------------------
 25781                                  ;
 25782                                  ;GetCharType:
 25783                                  ;	cmp	al,CharType_last	; beyond end of table?
 25784                                  ;	jae	short gct_90		; return standard value
 25785                                  ;
 25786                                  ;	push	bx
 25787                                  ;	mov	bx,CharType		; load lookup table
 25788                                  ;	shr	al,1			; adjust for half-byte table entry size
 25789                                  ;	;xlat	cs:[bx] 		; get flags
 25790                                  ;	cs	xlat	
 25791                                  ;	pop	bx
 25792                                  ;
 25793                                  ; carry clear from previous shift means we want the low nibble.  Otherwise
 25794                                  ; we have to shift the flags down to the low nibble
 25795                                  ;
 25796                                  ;	jnc	short gct_80		; carry clear, no shift needed
 25797                                  ;
 25798                                  ;	shr	al,1			; we want high nibble, shift it down
 25799                                  ;	shr	al,1
 25800                                  ;	shr	al,1
 25801                                  ;	shr	al,1
 25802                                  ;
 25803                                  ;gct_80:
 25804                                  ;	and	al,0Fh			; clear the unused nibble
 25805                                  ;	retn
 25806                                  ;
 25807                                  ;gct_90:
 25808                                  ;	mov	al,0Fh			; set all flags
 25809                                  ;	retn
 25810                                  
 25811                                  ;----------------------------------------------------------------------------
 25812                                  ;
 25813                                  ; Procedure : PATHCHRCMP
 25814                                  ;
 25815                                  ;----------------------------------------------------------------------------
 25816                                  
 25817                                  PATHCHRCMP:
 25818 0000564C 3C2F                    	CMP	AL,'/'
 25819 0000564E 7606                    	JBE	short PathRet
 25820 00005650 3C5C                    	CMP	AL,'\'
 25821 00005652 C3                      	retn
 25822                                  GotFor:
 25823 00005653 B05C                    	MOV	AL,'\'
 25824 00005655 C3                      	retn
 25825                                  PathRet:
 25826 00005656 74FB                    	JZ	short GotFor
 25827 00005658 C3                      	retn
 25828                                  
 25829                                  
 25830                                  ;============================================================================
 25831                                  ; MSCRTLC.ASM, MSDOS 6.0, 1991
 25832                                  ;============================================================================
 25833                                  ; 30/07/2018 - Retro DOS v3.0
 25834                                  
 25835                                  ; 15/03/2018 - Retro DOS v2.0 (MSDOS 2.11, CTRLC.ASM, 1983)
 25836                                  
 25837                                  ;**	MSCTRLC.ASM - ^C and error handler for MSDOS
 25838                                  
 25839                                  ;	TITLE	Control C detection, Hard error and EXIT routines
 25840                                  ;	NAME	IBMCTRLC
 25841                                  
 25842                                  ;**	Low level routines for detecting special characters on CON input,
 25843                                  ;	the ^C exit/int code, the Hard error INT 24 code, the
 25844                                  ;	process termination code, and the INT 0 divide overflow handler.
 25845                                  ;
 25846                                  ;	FATAL
 25847                                  ;	FATAL1
 25848                                  ;	reset_environment
 25849                                  ;	DSKSTATCHK
 25850                                  ;	SPOOLINT
 25851                                  ;	STATCHK
 25852                                  ;	CNTCHAND
 25853                                  ;	DIVOV
 25854                                  ;	CHARHARD
 25855                                  ;	HardErr
 25856                                  ;
 25857                                  ;	Revision history:
 25858                                  ;
 25859                                  ;	    AN000	version 4.0   Jan 1988
 25860                                  ;	    A002	PTM    -- dir >lpt3 hangs
 25861                                  ;	    A003	PTM 3957- fake version for IBMCAHE.COM
 25862                                  ;
 25863                                  ; 	M011: NEC's 8086 clone chip uses Intel's undocumented bit number in
 25864                                  ;	      flags register. In order to return to user normally DOS used to
 25865                                  ;	      move F202 into flags, which sets bit number 1 in flags uncondit-
 25866                                  ;	      ionally. Now it is modified to maintain the state of bit 1.
 25867                                  ;
 25868                                  ; 	M024: suppressed fail and ignore options if not in the middle of int 
 25869                                  ;	      24 and if Ctrl P or ctrl printscrn is pressed in routine 
 25870                                  ;	      charhard.
 25871                                  
 25872                                  
 25873                                  	; MSDOS 6.0
 25874                                  ;		public	LowInt23Addr		
 25875                                  ;LowInt23Addr	LABEL	DWORD
 25876                                  ;	DW	offset DOSDATA:LowInt23, 0
 25877                                  ;
 25878                                  ;		public	LowInt24Addr
 25879                                  ;LowInt24Addr	LABEL	DWORD
 25880                                  ;	DW	offset DOSDATA:LowInt24, 0
 25881                                  ;
 25882                                  ;		public	LowInt28Addr
 25883                                  ;LowInt28Addr	LABEL	DWORD
 25884                                  ;	DW	offset DOSDATA:LowInt28, 0
 25885                                  
 25886                                  ;Break	<Checks for ^C in CON I/O>
 25887                                  
 25888                                  ;---------------------------------------------------------------------------
 25889                                  ;
 25890                                  ; Procedure Name : DSKSTATCHK
 25891                                  ;
 25892                                  ; Check for ^C if only one level in
 25893                                  ;
 25894                                  ;---------------------------------------------------------------------------
 25895                                  
 25896                                          ;procedure   DSKSTATCHK,NEAR ; Check for ^C if only one level in
 25897                                  
 25898                                  DSKSTATCHK:        
 25899                                  	;CMP	BYTE [INDOS],1
 25900 00005659 36803E[CF02]01                  CMP     BYTE [SS:INDOS],1 ; 15/03/2018
 25901                                  	;retnz			; Do NOTHING
 25902 0000565F 7535                    	JNZ	SHORT _RET37 ; Retro DOS v2.0 - 04/03/2018         
 25903                                  
 25904 00005661 51                      	PUSH    CX
 25905 00005662 06                              PUSH    ES
 25906 00005663 53                              PUSH    BX
 25907 00005664 1E                              PUSH    DS
 25908 00005665 56                              PUSH    SI
 25909                                          
 25910                                  	;PUSH	CS
 25911                                          ;POP	ES
 25912                                          ;PUSH	CS
 25913                                          ;POP	DS
 25914                                  
 25915 00005666 8CD3                    	MOV	BX, SS		; SS is DOSDATA. ES:BX must be set up
 25916 00005668 8EC3                    	MOV	ES, BX		; for deviocall2
 25917 0000566A 8EDB                    	MOV	DS, BX
 25918                                  
 25919                                  	; 09/09/2018
 25920 0000566C C606[3C03]05                    MOV     BYTE [DSKSTCOM],DEVRDND
 25921 00005671 C606[3A03]0E                    MOV     BYTE [DSKSTCALL],DRDNDHL
 25922 00005676 C706[3D03]0000          	mov	word [DSKSTST],0
 25923                                  
 25924 0000567C BB[3A03]                        MOV     BX,DSKSTCALL
 25925 0000567F C536[3200]                      LDS     SI,[BCON]
 25926 00005683 E878F8                          CALL	DEVIOCALL2
 25927                                   	; 15/03/2018
 25928                                  	;test	word [ss:DSKSTST],200h
 25929 00005686 36F706[3D03]0002                TEST    WORD [SS:DSKSTST],STBUI
 25930                                  	;JNZ	SHORT ZRET		; No characters available
 25931                                  	; 30/07/2018
 25932 0000568D 7408                    	jz	short _GotCh
 25933                                  ;ZRET:
 25934 0000568F 30C0                            XOR     AL,AL                   ; Set zero
 25935                                  RET36:
 25936 00005691 5E                              POP     SI
 25937 00005692 1F                              POP     DS
 25938 00005693 5B                              POP     BX
 25939 00005694 07                              POP     ES
 25940 00005695 59                              POP     CX
 25941                                  _RET37:
 25942 00005696 C3                              RETN
 25943                                  
 25944                                  _GotCh:
 25945 00005697 36A0[4703]                      MOV     AL,[SS:DSKCHRET]	; SS override
 25946                                  
 25947 0000569B 3C03                            CMP     AL,"C"-"@" ; cmp al,3
 25948 0000569D 75F2                            JNZ     SHORT RET36
 25949 0000569F 36C606[3C03]04                  MOV     BYTE [SS:DSKSTCOM],DEVRD
 25950 000056A5 36C606[3A03]16                  MOV     BYTE [SS:DSKSTCALL],DRDWRHL
 25951 000056AB 36880E[4703]                    MOV     [SS:DSKCHRET],CL
 25952                                  	; 09/09/2018
 25953 000056B0 36C706[3D03]0000        	MOV	word [SS:DSKSTST],0
 25954 000056B7 36C706[4C03]0100        	MOV	word [SS:DSKSTCNT],1
 25955 000056BE E83DF8                  	CALL	DEVIOCALL2              ; Eat the ^C
 25956 000056C1 5E                              POP     SI
 25957 000056C2 1F                              POP     DS
 25958 000056C3 5B                              POP     BX                      ; Clean stack
 25959 000056C4 07                              POP     ES
 25960 000056C5 59                              POP     CX
 25961 000056C6 E9BF00                          JMP	CNTCHAND ; 10/08/2018
 25962                                  
 25963                                  NOSTOP:
 25964                                  	; MSDOS 6.0
 25965                                  	;CMP	AL,"P"-"@"
 25966                                  	;JNZ	short check_next
 25967                                  				    	; SS override
 25968                                  	;CMP	BYTE [SS:Scan_Flag],0	; ALT_Q ?
 25969                                  	;JZ	short INCHKJ		; no
 25970                                  	;retn
 25971                                  ;check_next:
 25972                                  	;;IF	NOT TOGLPRN
 25973                                  	;CMP	AL,"N"-"@"
 25974                                  	;JZ	short INCHKJ
 25975                                  	;;ENDIF
 25976                                  
 25977                                  	;CMP	AL,"C"-"@"
 25978                                  	;JZ	short INCHKJ
 25979                                  ;check_end:
 25980                                  	;retn
 25981                                  
 25982                                  	; MSDOS 3.3
 25983 000056C9 3C10                            CMP     AL,"P"-"@"  ; cmp al,16	
 25984 000056CB 7405                            JZ	short INCHKJ
 25985                                  
 25986                                  	; 15/04/2018
 25987                                          ;;IF	NOT TOGLPRN
 25988                                          ;CMP	AL,"N"-"@"
 25989                                          ;JZ	SHORT INCHKJ
 25990                                          ;;ENDIF
 25991                                  
 25992 000056CD 3C03                            CMP     AL,"C"-"@"  ; cmp al,3	
 25993 000056CF 7401                            JZ	short INCHKJ
 25994 000056D1 C3                      	RETN
 25995                                  
 25996                                  	; 08/09/2018
 25997                                  INCHKJ:	; 10/08/2018
 25998 000056D2 E98F00                  	JMP	INCHK
 25999                                  
 26000                                  ;----------------------------------------------------------------------------
 26001                                  ;
 26002                                  ; Procedure Name : SpoolInt
 26003                                  ;
 26004                                  ; SpoolInt - signal processes that the DOS is truly idle.  We are allowed to
 26005                                  ; do this ONLY if we are working on a 1-12 system call AND if we are not in
 26006                                  ; the middle of an INT 24.
 26007                                  ;
 26008                                  ;----------------------------------------------------------------------------
 26009                                  
 26010                                  SPOOLINT:
 26011 000056D5 9C                              PUSHF
 26012                                  	; 15/03/2018
 26013 000056D6 36803E[0403]00                  CMP     BYTE [SS:IDLEINT],0	; SS override
 26014 000056DC 7414                            JZ      SHORT POPFRET
 26015 000056DE 36803E[CE02]00                  CMP     BYTE [SS:ERRORMODE],0
 26016 000056E4 750C                            JNZ     SHORT POPFRET		;No spool ints in error mode
 26017                                  
 26018                                  	; 30/07/2018
 26019                                  
 26020                                  	; Note that we are going to allow an external program to issue system 
 26021                                  	; calls at this time.  We MUST preserve IdleInt across this.
 26022                                  
 26023                                  
 26024 000056E6 36FF36[0403]            	PUSH	WORD [SS:IDLEINT]
 26025                                   
 26026                                  	; MSDOS 6.0
 26027                                  	;cmp	byte [SS:DosHasHMA],0	; Q: is dos running in HMA (M021)
 26028                                  	;jne	short do_low_int28	; Y: the int must be done from low mem
 26029                                  	;INT	int_spooler		; N: Execute user int 28 handler
 26030                                  	;jmp	short spool_ret_addr
 26031                                  
 26032                                  ;do_low_int28:
 26033                                  	;call	far [SS:LowInt28Addr]
 26034                                  
 26035                                  ;spool_ret_addr:
 26036                                  
 26037 000056EB CD28                            INT     int_spooler		; INT 28h
 26038                                  
 26039 000056ED 368F06[0403]            	POP	WORD [SS:IDLEINT]
 26040                                  
 26041                                  POPFRET:
 26042 000056F2 9D                              POPF
 26043                                  _RET18:  
 26044 000056F3 C3                      	RETN
 26045                                  
 26046                                  ;----------------------------------------------------------------------------
 26047                                  ;
 26048                                  ; Procedure Name : STATCHK
 26049                                  ;
 26050                                  ;----------------------------------------------------------------------------
 26051                                  
 26052                                  STATCHK:
 26053 000056F4 E862FF                          CALL	DSKSTATCHK              ; Allows ^C to be detected under
 26054                                                                          ; input redirection
 26055 000056F7 53                              PUSH    BX
 26056 000056F8 31DB                            XOR     BX,BX
 26057 000056FA E8C1E9                          CALL	GET_IO_SFT
 26058 000056FD 5B                              POP     BX
 26059 000056FE 72F3                            JC      SHORT _RET18
 26060 00005700 B401                            MOV     AH,1
 26061 00005702 E84CF6                          CALL	IOFUNC
 26062 00005705 74CE                            JZ      SHORT SPOOLINT
 26063 00005707 3C13                            CMP     AL,'S'-'@'
 26064 00005709 75BE                            JNZ     SHORT NOSTOP
 26065                                  
 26066                                  	; MSDOS 6.0			; SS override
 26067                                  	;CMP	BYTE [SS:Scan_Flag],0	; AN000; ALT_R ?
 26068                                  	;JNZ	short check_end		; AN000; yes
 26069                                  
 26070 0000570B 30E4                            XOR     AH,AH
 26071 0000570D E841F6                          CALL	IOFUNC                  ; Eat Cntrl-S
 26072 00005710 EB4B                            JMP     SHORT PAUSOSTRT
 26073                                  
 26074                                  PRINTOFF:
 26075                                  PRINTON:
 26076 00005712 36F616[AC02]            	NOT	BYTE [SS:PFLAG] ; 14/03/2018
 26077                                  
 26078                                  	; 30/07/2018 - Retro DOS v3.0
 26079 00005717 53                      	PUSH	BX
 26080 00005718 BB0400                  	MOV	BX,4
 26081 0000571B E8A0E9                  	call	GET_IO_SFT
 26082 0000571E 5B                      	POP	BX
 26083 0000571F 72D2                    	jc	short _RET18
 26084 00005721 06                      	PUSH	ES
 26085 00005722 57                      	PUSH	DI
 26086 00005723 1E                      	PUSH	DS
 26087 00005724 07                      	POP	ES
 26088 00005725 89F7                    	MOV	DI,SI			; ES:DI -> SFT
 26089                                  	;test	word [es:di+5],800h
 26090 00005727 26F745050008            	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_net_spool
 26091 0000572D 7418                    	JZ	short NORM_PR 		; Not redirected, echo is OK
 26092                                  
 26093                                  	;Callinstall NetSpoolEchoCheck,MultNet,38,<AX>,<AX> 
 26094                                  					; See if allowed
 26095 0000572F 50                      	push	ax
 26096 00005730 B82611                  	mov	ax, 1126h
 26097 00005733 CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - ???
 26098                                  			; Return: CF set on error, AX = error code
 26099                                  			; STACK unchanged
 26100 00005735 58                      	pop	ax
 26101                                  
 26102 00005736 730F                    	JNC	short NORM_PR 		; Echo is OK
 26103                                  
 26104                                  					; SS override
 26105 00005738 36C606[AC02]00          	MOV	BYTE [SS:PFLAG],0	; If not allowed, disable echo
 26106                                  
 26107                                  	;Callinstall NetSpoolClose,MultNet,36,<AX>,<AX> ; and close
 26108                                  
 26109 0000573E 50                      	push    ax
 26110 0000573F B82411                  	mov     ax, 1124h
 26111 00005742 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - ???
 26112                                  			; ES:DI -> SFT, SS = DOS CS
 26113 00005744 58                      	pop     ax
 26114                                  
 26115 00005745 EB10                    	JMP	SHORT RETP6
 26116                                  
 26117                                  NORM_PR:
 26118 00005747 36803E[AC02]00          	CMP	BYTE [SS:PFLAG],0	; SS override
 26119 0000574D 7505                    	JNZ	short PRNOPN
 26120 0000574F E82EF7                  	call	DEV_CLOSE_SFT
 26121 00005752 EB03                    	JMP	SHORT RETP6
 26122                                  
 26123                                  PRNOPN:
 26124 00005754 E822F7                  	call	DEV_OPEN_SFT
 26125                                  RETP6:
 26126 00005757 5F                      	POP	DI
 26127 00005758 07                      	POP	ES
 26128                                  
 26129                                  STATCHK_RETN:
 26130 00005759 C3                              RETN
 26131                                  
 26132                                  PAUSOLP:
 26133 0000575A E878FF                          CALL    SPOOLINT
 26134                                  PAUSOSTRT:
 26135 0000575D B401                            MOV     AH,1
 26136 0000575F E8EFF5                          CALL	IOFUNC
 26137 00005762 74F6                            JZ      SHORT PAUSOLP
 26138                                  INCHK:
 26139 00005764 53                              PUSH    BX
 26140 00005765 31DB                            XOR     BX,BX
 26141 00005767 E854E9                          CALL	GET_IO_SFT
 26142 0000576A 5B                              POP     BX
 26143 0000576B 72EC                            JC      SHORT STATCHK_RETN ; 30/07/2018
 26144 0000576D 30E4                            XOR     AH,AH
 26145 0000576F E8DFF5                          CALL	IOFUNC
 26146                                  	; 30/07/2018
 26147                                  	; MSDOS 3.3
 26148 00005772 3C10                            CMP     AL,'P'-'@' ;cmp al,16
 26149 00005774 750E                            JNZ	SHORT NOPRINT
 26150                                  
 26151 00005776 36803E[8B0F]00          	cmp	byte [SS:SCAN_FLAG],0
 26152 0000577C 7494                    	JZ	SHORT PRINTON	
 26153 0000577E 36C606[8B0F]00          	mov	byte [ss:SCAN_FLAG],0
 26154                                  
 26155                                  	; MSDOS 6.0
 26156                                  	;CMP	AL,"P"-"@"
 26157                                  	;;;;;  7/14/86	ALT_Q key fix
 26158                                  	;JZ	short PRINTON		; no! must be CTRL_P
 26159                                  
 26160                                  NOPRINT:	
 26161                                  	;IF	NOT TOGLPRN
 26162                                  	;CMP	AL,"N"-"@"
 26163                                  	;JZ	short PRINTOFF
 26164                                  	;ENDIF
 26165 00005784 3C03                    	CMP	AL,"C"-"@" ; cmp al,3 
 26166                                  	;retnz
 26167 00005786 75D1                    	jnz	short STATCHK_RETN
 26168                                  
 26169                                  ;	!! NOTE: FALL THROUGH !!
 26170                                  
 26171                                  ;---------------------------------------------------------------------------
 26172                                  ;
 26173                                  ; Procedure Name : CNTHAND ( CTRLC_C HANDLER )
 26174                                  ;
 26175                                  ; "^C" and CR/LF is printed.  Then the user registers are restored and the
 26176                                  ; user CTRL-C handler is executed.  At this point the top of the stack has 1)
 26177                                  ; the interrupt return address should the user CTRL-C handler wish to allow
 26178                                  ; processing to continue; 2) the original interrupt return address to the code
 26179                                  ; that performed the function call in the first place.	If the user CTRL-C
 26180                                  ; handler wishes to continue, it must leave all registers unchanged and RET
 26181                                  ; (not IRET) with carry CLEAR.	If carry is SET then an terminate system call
 26182                                  ; is simulated.
 26183                                  ;
 26184                                  ;---------------------------------------------------------------------------
 26185                                  
 26186                                  CNTCHAND:
 26187                                  	; MSDOS 6.0			; SS override
 26188                                  					; AN002; from RAWOUT
 26189                                  	;TEST	word [SS:Dos34_Flag],CTRL_BREAK_FLAG  
 26190                                  	;JNZ	short around_deadlock 	; AN002;
 26191                                  
 26192 00005788 B003                            MOV     AL,3			; Display "^C"
 26193 0000578A E891CC                          CALL	BUFOUT
 26194 0000578D E831CB                          CALL	CRLF
 26195                                  ;around_deadlock:
 26196 00005790 16                              PUSH    SS
 26197 00005791 1F                              POP     DS
 26198 00005792 803E[0303]00                    CMP     BYTE [CONSWAP],0
 26199 00005797 7403                            JZ      SHORT NOSWAP
 26200 00005799 E84EE6                          CALL	SWAPBACK
 26201                                  NOSWAP:
 26202 0000579C FA                      	CLI				; Prepare to play with stack
 26203 0000579D 8E16[2005]              	MOV	SS,[USER_SS]		; User stack now restored
 26204 000057A1 8B26[1E05]              	MOV	SP,[USER_SP]
 26205 000057A5 E83DBE                          CALL	restore_world       ; User registers now restored
 26206                                  
 26207                                  	; 30/07/2018 - Retro DOS v3.0 
 26208                                  	; MSDOS 3.3 (IBMDOS.COM - Offset 56ACh)
 26209                                          ; 14/03/2018 - Retro DOS v2.0
 26210 000057A8 2EC606[CF02]00          	MOV     BYTE [CS:INDOS],0	
 26211 000057AE 2EC606[CE02]00                  MOV     BYTE [CS:ERRORMODE],0
 26212 000057B4 2E8926[E002]                    MOV     [CS:ConC_Spsave],SP
 26213 000057B9 F8                      	clc	;30/07/2018
 26214 000057BA CD23                            INT     int_ctrl_c ; 23h    ; Execute user Ctrl-C handler
 26215                                  	;int	23h	; DOS - CONTROL "C" EXIT ADDRESS
 26216                                  			; Return: return via RETF 2 with CF set
 26217                                  			; DOS will abort program with errorlevel 0
 26218                                  			; else
 26219                                  			; interrupted DOS call continues
 26220                                  
 26221                                  	; 30/07/2018 
 26222                                  
 26223                                  	; MSDOS 3.3 (IBMDOS.COM - Offset 56C0h)
 26224                                  
 26225                                  ; The user has returned to us.	The circumstances we allow are:
 26226                                  ;
 26227                                  ;   IRET	We retry the operation by redispatching the system call
 26228                                  ;   CLC/RETF	POP the stack and retry
 26229                                  ;   ... 	Exit the current process with ^C exit
 26230                                  ;
 26231                                  ; User's may RETURN to us and leave interrupts on. 
 26232                                  ; Turn 'em off just to be sure
 26233                                  
 26234 000057BC FA                      	CLI
 26235                                  
 26236 000057BD 2EA3[E602]              	MOV	[CS:USER_IN_AX],ax	; save the AX
 26237 000057C1 9C                      	PUSHF				; and the flags (maybe new call)
 26238 000057C2 58                      	POP	AX
 26239                                  
 26240                                  ; See if the input stack is identical to the output stack
 26241                                  
 26242 000057C3 2E3B26[E002]                    CMP	SP,[CS:ConC_Spsave]
 26243 000057C8 7507                    	JNZ     SHORT ctrlc_try_new ; current SP not the same as saved SP
 26244                                  
 26245                                  ; Repeat the operation by redispatching the system call.
 26246                                  
 26247                                  ctrlc_repeat:
 26248 000057CA 2EA1[E602]                      MOV     AX,[CS:USER_IN_AX]
 26249                                  	;transfer COMMAND           ; Repeat command otherwise
 26250                                  COMMANDJ:
 26251 000057CE E9D9BC                  	JMP	COMMAND
 26252                                  
 26253                                  ; The current SP is NOT the same as the input SP. Presume that he 
 26254                                  ; RETF'd leaving some flags on the stack and examine the input
 26255                                  
 26256                                  ctrlc_try_new:
 26257 000057D1 83C402                  	ADD	SP,2			; pop those flags
 26258                                  	;test	ax,1
 26259 000057D4 A90100                  	TEST	AX,f_Carry		; did he return with carry?
 26260 000057D7 74F1                    	JZ	short ctrlc_repeat	; no carry set, just retry
 26261                                  
 26262                                  	; Well...  time to abort the user.  
 26263                                  	; Signal a ^C exit and use the EXIT system call..
 26264                                  
 26265                                  ctrlc_abort:
 26266                                          ;MOV	AX,(EXIT SHL 8) + 0
 26267 000057D9 B8004C                          MOV	AX, (EXIT*256) + 0  ; 4C00h
 26268 000057DC 2EC606[F902]FF          	mov	byte [CS:DidCTRLC],0FFh ; 14/03/2018
 26269                                          ;transfer COMMAND	    ; give up by faking $EXIT
 26270                                  	;JMP	SHORT COMMANDJ
 26271 000057E2 E9C5BC                  	JMP	COMMAND
 26272                                  
 26273                                  ;Break	<DIVISION OVERFLOW INTERRUPT>
 26274                                  ;----------------------------------------------------------------------------
 26275                                  ;
 26276                                  ; Procedure Name : DIVOV
 26277                                  ;
 26278                                  ; Default handler for division overflow trap
 26279                                  ;
 26280                                  ;----------------------------------------------------------------------------
 26281                                  
 26282                                  DIVOV: 
 26283                                  	; 30/07/2018
 26284                                  	; 07/07/2018 - Retro DOS v3.0
 26285 000057E5 BE[BC12]                	mov	si,DIVMES
 26286 000057E8 2E8B1E[CF12]            	mov	bx,[cs:DivMesLen]
 26287 000057ED 8CC8                    	mov     ax,cs
 26288 000057EF 8ED0                    	mov	ss,ax
 26289 000057F1 BC[0607]                	mov     sp,AUXSTACK
 26290 000057F4 E80200                  	call	RealDivOv
 26291                                  	;call	_outmes ; MSDOS 6.0
 26292 000057F7 EBE0                    	jmp	short ctrlc_abort  ; Use Ctrl-C abort on divide overflow
 26293                                  
 26294                                  ; 30/07/2018
 26295                                  
 26296                                  ; MSDOS 6.0
 26297                                  ;---------------------------------------------------------------------------
 26298                                  ;
 26299                                  ; Procedure Name : OutMes
 26300                                  ;
 26301                                  ;
 26302                                  ; OutMes: perform message output
 26303                                  ; Inputs:   SS:SI points to message
 26304                                  ;	    BX has message length
 26305                                  ; Outputs:  message to BCON
 26306                                  ;
 26307                                  ;Actually, cs:si points to the message now. The segment address is filled in
 26308                                  ;at init. time ([dskchret+2]). This will be temporarily changed to DOSCODE. 
 26309                                  ;NB. This procedure is called only from DIVOV. -SR
 26310                                  ;
 26311                                  ;---------------------------------------------------------------------------
 26312                                  
 26313                                  ;MSDOS 3.3
 26314                                  ;---------------------------------------------------------------------------
 26315                                  ; RealDivOv: perform actual divide overflow stuff.
 26316                                  ; Inputs:   none
 26317                                  ; Outputs:  message to BCON
 26318                                  ;---------------------------------------------------------------------------
 26319                                  
 26320                                  	; 30/07/2018
 26321                                  	; MSDOS 6.0
 26322                                  ;_OUTMES:
 26323                                  	;MSDOS 3.3
 26324                                  RealDivOv:
 26325                                  	 
 26326                                  	; 07/07/2018 - Retro DOS v3.0
 26327                                          ;Context ES
 26328                                          ;push	ss ; 30/07/2018
 26329 000057F9 0E                      	PUSH	CS			; get ES addressability
 26330 000057FA 07                      	POP	ES
 26331                                          ;Context DS
 26332                                  	;push	ss ; 30/07/2018
 26333 000057FB 0E                      	PUSH	CS			; get DS addressability
 26334 000057FC 1F                      	POP	DS
 26335 000057FD C606[3C03]08                    MOV     BYTE [DSKSTCOM],DEVWRT
 26336 00005802 C606[3A03]16                    MOV     BYTE [DSKSTCALL],DRDWRHL
 26337 00005807 C706[3D03]0000                  MOV     WORD [DSKSTST],0
 26338                                  	; BX = [DivMesLen] = 19
 26339 0000580D 891E[4C03]                      MOV     [DSKSTCNT],BX
 26340 00005811 BB[3A03]                        MOV     BX,DSKSTCALL
 26341                                          ;MOV     [DSKCHRET+1],SI	; transfer address (need an EQU)
 26342                                  	; 08/09/2018
 26343 00005814 8936[4803]              	mov	[DEVIOBUF_PTR],si
 26344                                  	; MSDOS 6.0
 26345                                  					; CS is used for string, fill in 
 26346                                  					; segment address 
 26347                                  	;MOV	[DskChRet+3],CS
 26348                                  
 26349 00005818 C536[3200]                      LDS     SI,[BCON]
 26350 0000581C E8DFF6                          CALL	DEVIOCALL2
 26351                                  	; 14/03/2018
 26352                                          ;MOV     WORD [CS:DSKCHRET+1],DEVIOBUF
 26353                                  	; 08/09/2018
 26354 0000581F 2EC706[4803][5E03]      	mov	word [CS:DEVIOBUF_PTR],DEVIOBUF
 26355 00005826 2EC706[4C03]0100                MOV     WORD [CS:DSKSTCNT],1
 26356 0000582D C3                              RETN
 26357                                  
 26358                                  ;Break	<CHARHRD,HARDERR,ERROR -- HANDLE DISK ERRORS AND RETURN TO USER>
 26359                                  ;---------------------------------------------------------------------------
 26360                                  ;
 26361                                  ; Procedure Name : CHARHARD
 26362                                  ;
 26363                                  ;
 26364                                  ; Character device error handler
 26365                                  ; Same function as HARDERR
 26366                                  ;
 26367                                  ;---------------------------------------------------------------------------
 26368                                  
 26369                                  CHARHARD:
 26370                                  	; 30/07/2018
 26371                                  	; 08/07/2018 - Retro DOS v3.0
 26372                                  
 26373                                  	; MSDOS 6.0
 26374                                  ;		   			; M024 - start
 26375                                  ;	cmp	byte ptr [ERRORMODE], 0	; Q: are we in the middle of int 24
 26376                                  ;	jne	@f			; Y: allow fail
 26377                                  ;
 26378                                  ;	OR	AH, Allowed_RETRY	; assume ctrl p
 26379                                  ;
 26380                                  ;	test	byte ptr [PFLAG], -1	; Q: has ctrl p been pressed
 26381                                  ;	jnz	ctrlp			; Y: 
 26382                                  ;@@:					; M024 - end
 26383                                  
 26384                                  ; Character device error handler
 26385                                  ; Same function as HARDERR
 26386                                  
 26387                                  	;or	ah,38h
 26388 0000582E 80CC38                  	or	ah,Allowed_IGNORE+Allowed_RETRY+Allowed_FAIL
 26389                                  ;ctrlp:			; SS override for Allowed and EXITHOLD
 26390 00005831 368826[F702]            	mov	[SS:ALLOWED],ah
 26391                                  
 26392                                  	; 15/03/2018
 26393 00005836 368C06[1C05]                    MOV     [SS:EXITHOLD+2],ES
 26394 0000583B 36892E[1A05]                    MOV     [SS:EXITHOLD],BP
 26395 00005840 56                              PUSH    SI
 26396                                  	;and	di,0FFh
 26397 00005841 81E7FF00                        AND     DI,STECODE
 26398 00005845 8CDD                            MOV     BP,DS                   ;Device pointer is BP:SI
 26399 00005847 E86400                          CALL    FATALC
 26400 0000584A 5E                              POP     SI
 26401                                  	;return
 26402 0000584B C3                              RETN
 26403                                  
 26404                                  ;---------------------------------------------------------------------------
 26405                                  ;
 26406                                  ; Procedure Name : HardErr
 26407                                  ;
 26408                                  ; Hard disk error handler. Entry conditions:
 26409                                  ;	DS:BX = Original disk transfer address
 26410                                  ;	DX = Original logical sector number
 26411                                  ;	CX = Number of sectors to go (first one gave the error)
 26412                                  ;	AX = Hardware error code
 26413                                  ;	DI = Original sector transfer count	
 26414                                  ;	ES:BP = Base of drive parameters
 26415                                  ;	[READOP] = 0 for read, 1 for write
 26416                                  ;	Allowed Set with allowed responses to this error (other bits MUST BE 0)
 26417                                  ; Output:
 26418                                  ;	[FAILERR] will be set if user responded FAIL
 26419                                  ;
 26420                                  ;--------------------------------------------------------------------------
 26421                                  
 26422                                  HARDERR:
 26423                                  	; 30/07/2018
 26424                                  	; 08/07/2018 - Retro DOS v3.0
 26425 0000584C 97                      	XCHG    AX,DI                   ; Error code in DI, count in AX
 26426                                          ;and	di,0FFh
 26427 0000584D 81E7FF00                	AND     DI,STECODE              ; And off status bits
 26428                                          ;CMP	DI,WRECODE		; Write Protect Error?
 26429                                  	;cmp	di,0
 26430 00005851 83FF00                  	cmp	DI,error_I24_write_protect ; Write Protect Error?
 26431 00005854 750A                            JNZ     short NOSETWRPERR
 26432 00005856 50                              PUSH    AX
 26433                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 26434                                          ;MOV	AL,[ES:BP+0]
 26435 00005857 268A4600                	mov	al,[ES:BP]
 26436                                          	; 15/03/2018
 26437 0000585B 36A2[D002]                      MOV     [SS:WPERR],AL		; Flag drive with WP error
 26438 0000585F 58                              POP     AX
 26439                                  NOSETWRPERR:
 26440 00005860 29C8                            SUB     AX,CX                   ; Number of sectors successfully transferred
 26441 00005862 01C2                            ADD     DX,AX                   ; First sector number to retry
 26442 00005864 52                              PUSH    DX
 26443                                  	; 08/07/2018
 26444                                          ;MUL	word [ES:BP+2] 		; Number of bytes transferred
 26445 00005865 26F76602                	MUL	word [ES:BP+DPB.SECTOR_SIZE]
 26446 00005869 5A                              POP     DX
 26447 0000586A 01C3                            ADD     BX,AX                   ; First address for retry
 26448 0000586C 30E4                            XOR     AH,AH                   ; Flag disk section in error
 26449                                          ;CMP	DX,[ES:BP+6] 		; In reserved area?
 26450 0000586E 263B5606                	CMP	DX,[ES:BP+DPB.FIRST_FAT]
 26451 00005872 721A                            JB      SHORT ERRINT
 26452 00005874 FEC4                            INC     AH                      ; Flag for FAT
 26453                                          ;CMP	DX,[ES:BP+10H] 		; In FAT?
 26454 00005876 263B5610                	CMP	DX,[ES:BP+DPB.DIR_SECTOR]   
 26455 0000587A 7308                    	JAE	short TESTDIR 		; No
 26456                                  		 ; Err in FAT must force recomp of freespace
 26457                                  	;mov	word[ES:BP+1Eh],-1
 26458 0000587C 26C7461EFFFF            	MOV	word [ES:BP+DPB.FREE_CNT],-1
 26459 00005882 EB0A                    	JMP	SHORT ERRINT
 26460                                  TESTDIR:
 26461 00005884 FEC4                            INC     AH
 26462                                          ;CMP	DX,[ES:BP+0BH]		; In directory?
 26463 00005886 263B560B                	CMP	DX,[ES:BP+DPB.FIRST_SECTOR] 
 26464 0000588A 7202                            JB      SHORT ERRINT
 26465 0000588C FEC4                            INC     AH                      ; Must be in data area
 26466                                  ERRINT:
 26467 0000588E D0E4                            SHL     AH,1                    ; Make room for read/write bit
 26468 00005890 360A26[1005]                    OR      AH,[SS:READOP] ; 15/03/2018
 26469                                  
 26470                                  	; 15/08/2018
 26471                                  					; SS override for allowed and EXITHOLD
 26472 00005895 360A26[F702]            	OR	AH,[SS:ALLOWED]		; Set the allowed_ bits
 26473                                  
 26474                                          ;entry   FATAL
 26475                                  FATAL:
 26476                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 26477                                          ;MOV	AL,[ES:BP+0]		; Get drive number
 26478 0000589A 268A4600                	MOV	AL,[ES:BP]        
 26479                                  
 26480                                  	;entry   FATAL1
 26481                                  FATAL1:  
 26482                                  	; 15/03/2018      
 26483 0000589E 368C06[1C05]            	MOV     [SS:EXITHOLD+2],ES
 26484 000058A3 36892E[1A05]                    MOV     [SS:EXITHOLD],BP	; The only things we preserve	
 26485                                  	;LES	SI,[ES:BP+12H]
 26486 000058A8 26C47612                	LES	SI,[ES:BP+DPB.DRIVER_ADDR]
 26487 000058AC 8CC5                            MOV     BP,ES                   ; BP:SI points to the device involved
 26488                                  
 26489                                  	; DI has the INT-24-style extended error. We now map the error code 
 26490                                  	; for this into the normalized get extended error set by using the 
 26491                                  	; ErrMap24 table as a translate table. Note that we translate ONLY 
 26492                                  	; the device returned codes and leave all others beyond the look up 
 26493                                  	; table alone.
 26494                                  
 26495                                  	; 08/07/2018 - Retro DOS v3.0
 26496                                  FATALC:
 26497 000058AE E86701                  	call	SET_I24_EXTENDED_ERROR
 26498                                  	;cmp	di,0Ch
 26499 000058B1 83FF0C                  	CMP	DI,error_I24_gen_failure
 26500 000058B4 7603                    	JBE	short GOT_RIGHT_CODE	; Error codes above gen_failure get
 26501 000058B6 BF0C00                  	MOV	DI,error_I24_gen_failure; mapped to gen_failure. Real codes
 26502                                  					;  Only come via GetExtendedError
 26503                                  ;**
 26504                                  ;
 26505                                  ; Entry point used by REDIRector on Network I 24 errors.
 26506                                  ;
 26507                                  ;	ASSUME	DS:NOTHING,ES:NOTHING,SS:DOSDATA
 26508                                  ;
 26509                                  ; ALL I 24 regs set up. ALL Extended error info SET. ALLOWED Set.
 26510                                  ;     EXITHOLD set for restore of ES:BP.
 26511                                  ;
 26512                                  	;entry	NET_I24_ENTRY
 26513                                  NET_I24_ENTRY:
 26514                                  GOT_RIGHT_CODE:
 26515 000058B9 36803E[CE02]00          	CMP     BYTE [SS:ERRORMODE],0	; No INT 24s if already INT 24
 26516 000058BF 7404                            JZ	SHORT NoSetFail
 26517 000058C1 B003                    	MOV	AL,3
 26518 000058C3 EB51                    	JMP	short FailRet
 26519                                  NoSetFail:
 26520 000058C5 368926[2205]                    MOV     [SS:CONTSTK],SP		; SS override
 26521 000058CA 16                              PUSH	SS
 26522 000058CB 07                              POP	ES
 26523                                      
 26524                                  	; Wango!!! We may need to free some user state info... In 
 26525                                  	; particular, we may have locked down a JFN for a user and he may 
 26526                                  	; NEVER return to us. Thus,we need to free it here and then 
 26527                                  	; reallocate it when we come back.
 26528                                  
 26529 000058CC 36833E[4205]FF          	CMP	word [SS:SFN],-1
 26530 000058D2 740C                    	JZ	short _NoFree
 26531 000058D4 1E                      	push	ds
 26532 000058D5 56                      	push	si
 26533 000058D6 36C536[4605]            	LDS	SI,[SS:PJFN]
 26534 000058DB C604FF                  	MOV	BYTE [SI],0FFH
 26535 000058DE 5E                      	pop	si
 26536 000058DF 1F                      	pop	ds
 26537                                  
 26538                                  _NoFree:
 26539 000058E0 FA                      	CLI
 26540                                  					; Prepare to play with stack
 26541 000058E1 36FE06[CE02]                    INC     BYTE [SS:ERRORMODE]	; Flag INT 24 in progress
 26542 000058E6 36FE0E[CF02]                    DEC     BYTE [SS:INDOS]		; INT 24 handler might not return
 26543 000058EB 368E16[2005]                    MOV     SS,[SS:USER_SS]
 26544 000058F0 268B26[1E05]                    MOV     SP,[ES:USER_SP]         ; User stack pointer restored
 26545                                  	;int	24h	
 26546 000058F5 CD24                            INT     int_fatal_abort         ; Fatal error interrupt vector, must preserve ES
 26547 000058F7 268926[1E05]                    MOV     [ES:USER_SP],SP         ; restore our stack
 26548 000058FC 268C16[2005]                    MOV     [ES:USER_SS],SS
 26549 00005901 8CC5                            MOV     BP,ES
 26550 00005903 8ED5                            MOV     SS,BP
 26551 00005905 368B26[2205]                    MOV     SP,[SS:CONTSTK]
 26552 0000590A 36FE06[CF02]                    INC     BYTE [SS:INDOS]		; Back in the DOS
 26553 0000590F 36C606[CE02]00                  MOV     BYTE [SS:ERRORMODE],0	; Back from INT 24
 26554 00005915 FB                              STI
 26555                                  FailRet:
 26556 00005916 36C42E[1A05]                    LES     BP,[SS:EXITHOLD]
 26557                                  	
 26558                                  	; 08/07/2018
 26559                                  
 26560                                  	; Triage the user's reply.
 26561                                  
 26562 0000591B 3C01                    	CMP	AL,1
 26563 0000591D 7235                    	JB	short CheckIgnore	; 0 => ignore
 26564 0000591F 743D                    	JZ	short CheckRetry	; 1 => retry
 26565 00005921 3C03                    	CMP	AL,3			; 3 => fail
 26566 00005923 7543                    	JNZ	short DoAbort 		; 2, invalid => abort
 26567                                  
 26568                                  	; The reply was fail.  See if we are allowed to fail.
 26569                                  
 26570                                  				; SS override for ALLOWED, EXTOPEN_ON, 
 26571                                  				; ALLOWED, FAILERR, WPERR, SFN, pJFN
 26572                                  	;test	byte [ss:ALLOWED],8
 26573 00005925 36F606[F702]08          	test	byte [ss:ALLOWED],Allowed_FAIL ; Can we?
 26574 0000592B 743B                    	jz	short DoAbort	; No, do abort
 26575                                  DoFail:
 26576 0000592D B003                    	MOV	AL,3		; just in case...
 26577                                  				; AN000;EO. I24 error disabled
 26578                                  	;(MSDOS 6.0, MSCTRLC.ASM, 1991)
 26579                                  	;test	byte [ss:EXTOPEN_ON],EXT_OPEN_I24_OFF 
 26580                                  	;jnz	short Cleanup 		; AN000;EO. no
 26581                                  	
 26582 0000592F 36FE06[F602]            	inc	byte [SS:FAILERR]	; Tell everybody
 26583                                  
 26584                                  CleanUp:
 26585 00005934 36C606[D002]FF          	MOV	byte [SS:WPERR],-1
 26586 0000593A 36833E[4205]FF          	CMP	word [SS:SFN],-1
 26587                                  	;jnz	short CleanUp2
 26588                                  	;retn
 26589 00005940 7411                    	jz	short Cleanup_retn ; 08/07/2018 - Retro DOS v3.0
 26590                                  ;CleanUp2:
 26591 00005942 1E                      	push	ds
 26592 00005943 56                      	push	si
 26593 00005944 50                      	push	ax
 26594 00005945 36A1[4205]              	MOV	AX,[ss:SFN]
 26595 00005949 36C536[4605]            	LDS	SI,[ss:PJFN]
 26596 0000594E 8804                    	MOV	[SI],AL
 26597 00005950 58                      	pop	ax
 26598 00005951 5E                      	pop	si
 26599 00005952 1F                      	pop	ds
 26600                                  Cleanup_retn:
 26601 00005953 C3                      	retn
 26602                                  
 26603                                  	; The reply was IGNORE. See if we are allowed to ignore.
 26604                                  
 26605                                  CheckIgnore:
 26606                                  	;test	byte [ss:ALLOWED],20h
 26607 00005954 36F606[F702]20          	test	byte [ss:ALLOWED],Allowed_IGNORE ; Can we?
 26608 0000595A 74D1                    	jz	short DoFail			 ; No, do fail
 26609 0000595C EBD6                    	jmp	short CleanUp
 26610                                  
 26611                                  	; The reply was RETRY. See if we are allowed to retry.
 26612                                  
 26613                                  CheckRetry:
 26614                                  	;test	byte [ss:ALLOWED],10h
 26615 0000595E 36F606[F702]10          	test	byte [ss:ALLOWED],Allowed_RETRY	; Can we?
 26616 00005964 74C7                    	jz	short DoFail			; No, do fail
 26617 00005966 EBCC                    	JMP	short CleanUp
 26618                                  
 26619                                  	; The reply was ABORT.
 26620                                  
 26621                                  DoAbort:
 26622 00005968 16                      	push	ss
 26623 00005969 1F                      	pop	ds
 26624                                  
 26625 0000596A 803E[0303]00            	CMP	byte [CONSWAP],0
 26626 0000596F 7403                    	JZ	short NOSWAP2
 26627 00005971 E876E4                  	call	SWAPBACK
 26628                                  NOSWAP2:
 26629                                  	; See if we are to truly abort. If we are in the process of aborting, 
 26630                                  	; turn this abort into a fail.
 26631                                  
 26632                                  	;test	byte [fAborting],0FFh
 26633                                  	;jnz	short DoFail
 26634                                  
 26635 00005974 803E[0503]00            	cmp	byte [fAborting],0
 26636 00005979 75B2                    	JNZ	short DoFail
 26637                                  
 26638                                  	; Set return code
 26639                                  
 26640 0000597B C606[1705]02            	MOV	BYTE [EXIT_TYPE],EXIT_HARD_ERROR
 26641 00005980 30C0                    	XOR	AL,AL
 26642                                  
 26643                                  	; we are truly aborting the process. Go restore information from 
 26644                                  	; the PDB as necessary.
 26645                                  
 26646 00005982 E93B0B                  	jmp	exit_inner
 26647                                  
 26648                                  ;**
 26649                                  ;
 26650                                  ; reset_environment checks the DS value against the CurrentPDB. If they are
 26651                                  ; different, then an old-style return is performed. If they are the same,
 26652                                  ; then we release jfns and restore to parent. We still use the PDB at DS:0 as
 26653                                  ; the source of the terminate addresses.
 26654                                  ;
 26655                                  ; Some subtlety: We are about to issue a bunch of calls that *may* generate
 26656                                  ; INT 24s. We *cannot* allow the user to restart the abort process; we may
 26657                                  ; end up aborting the wrong process or turn a terminate/stay/resident into a
 26658                                  ; normal abort and leave interrupt handlers around. What we do is to set a
 26659                                  ; flag that will indicate that if any abort code is seen, we just continue the
 26660                                  ; operation. In essence, we dis-allow the abort response.
 26661                                  ;
 26662                                  ; output:   none.
 26663                                  ;
 26664                                  	;entry	reset_environment
 26665                                  	
 26666                                  reset_environment:
 26667                                  	; 30/07/2018 - Retro DOS v3.0
 26668                                  	; IBMDOS.COM (MSDOS3.3) - Offset 588Ah 
 26669                                  
 26670                                  ;***	invoke	Reset_Version		; AN007 ;MS. reset version number
 26671                                  
 26672 00005985 1E                      	PUSH	DS			; save PDB of process
 26673                                  
 26674                                  	; There are no critical sections in force. Although we may enter 
 26675                                  	; here with critical sections locked down, they are no longer 
 26676                                  	; relevant. We may safely free all allocated resources.
 26677                                  
 26678 00005986 B482                    	MOV	AH,82h
 26679                                  		; Microsoft Networks - END DOS CRITICAL SECTIONS 0 THROUGH 7
 26680                                  	;int	2Ah 	
 26681 00005988 CD2A                    	INT	int_IBM
 26682                                  
 26683                                  					; SS override
 26684 0000598A 36C606[0503]FF          	MOV	byte [SS:fAborting],-1	; signal abort in progress
 26685                                  
 26686                                  					; DOS 4.00 doesn't need it
 26687                                  	;CallInstall NetResetEnvironment, MultNET, 34  
 26688                                  					; Allow REDIR to clear some stuff
 26689                                  					; On process exit.
 26690 00005990 B82211                  	mov     ax, 1122h
 26691 00005993 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - PROCESS TERMINATION HOOK
 26692                                  			; SS = DOS CS
 26693                                  	;mov	al,22h	
 26694 00005995 B022                    	MOV	AL,int_terminate
 26695 00005997 E8C7C2                  	call	_$GET_INTERRUPT_VECTOR	; and who to go to
 26696                                  
 26697 0000599A 59                      	POP	CX			; get ThisPDB
 26698 0000599B 06                      	push	es
 26699 0000599C 53                      	push	bx			; save return address
 26700                                  
 26701 0000599D 368B1E[DE02]            	MOV	BX,[SS:CurrentPDB] 	; get currentPDB
 26702 000059A2 8EDB                    	MOV	DS,BX
 26703 000059A4 A11600                  	MOV	AX,[PDB.PARENT_PID]	; get parentPDB
 26704                                  
 26705                                  	; AX = parentPDB, BX = CurrentPDB, CX = ThisPDB
 26706                                  	; Only free handles if AX <> BX and BX = CX and [exit_code].upper 
 26707                                  	; is not Exit_keep_process
 26708                                  	
 26709 000059A7 39D8                    	CMP	AX,BX
 26710 000059A9 7418                    	JZ	short reset_return	; parentPDB = CurrentPDB
 26711 000059AB 39CB                    	CMP	BX,CX
 26712 000059AD 7514                    	JNZ	short reset_return	; CurrentPDB <> ThisPDB
 26713 000059AF 50                      	PUSH	AX			; save parent
 26714                                  
 26715                                  					; SS override
 26716                                  	;cmp	byte [SS:EXIT_TYPE],3
 26717 000059B0 36803E[1705]03          	CMP	BYTE [SS:EXIT_TYPE],EXIT_KEEP_PROCESS ; 15/08/2018
 26718 000059B6 7406                    	JZ	short reset_to_parent 	; keeping this process
 26719                                  
 26720                                  	; We are truly removing a process. Free all allocation blocks 
 26721                                  	; belonging to this PDB
 26722                                  
 26723                                  	;invoke	arena_free_process
 26724 000059B8 E83C0B                  	call	arena_free_process
 26725                                  
 26726                                  	; Kill off remainder of this process. Close file handles and signal 
 26727                                  	; to relevant network folks that this process is dead. Remember that 
 26728                                  	; CurrentPDB is STILL the current process!
 26729                                  
 26730                                  	;invoke	DOS_ABORT
 26731 000059BB E897E0                  	call	DOS_ABORT
 26732                                  
 26733                                  reset_to_parent:
 26734                                  					; SS override
 26735 000059BE 368F06[DE02]            	POP	word [SS:CurrentPDB]	; set up process as parent
 26736                                  
 26737                                  reset_return:				; come here for normal return
 26738                                  	;Context DS			; DS is used to refer to DOSDATA  
 26739 000059C3 16                      	push	ss
 26740 000059C4 1F                      	pop	ds	
 26741                                  
 26742 000059C5 B0FF                    	MOV	AL,-1
 26743                                  
 26744                                  	; make sure that everything is clean In this case ignore any errors, 
 26745                                  	; we cannot "FAIL" the abort, the program being aborted is dead.
 26746                                  
 26747                                  	;EnterCrit critDisk
 26748 000059C7 E8A2C6                  	call	EcritDisk
 26749                                  	;invoke	FLUSHBUF
 26750 000059CA E86405                  	call	FLUSHBUF
 26751                                  	;LeaveCrit critDisk
 26752 000059CD E8A4C6                  	call	LcritDisk
 26753                                  
 26754                                  	; Decrement open ref. count if we had done a virtual open earlier.
 26755                                  
 26756 000059D0 E8C3F8                  	call	CHECK_VIRT_OPEN
 26757 000059D3 FA                      	CLI
 26758 000059D4 C606[CF02]00            	MOV	BYTE [INDOS],0		; Go to known state
 26759 000059D9 C606[D002]FF            	MOV	BYTE [WPERR],-1		; Forget about WP error
 26760 000059DE C606[0503]00            	MOV	byte [fAborting],0	; let aborts occur
 26761 000059E3 8F06[1A05]              	POP	WORD [EXITHOLD]
 26762 000059E7 8F06[1C05]              	POP	WORD [EXITHOLD+2]
 26763                                  
 26764                                  	; Snake into multitasking... Get stack from CurrentPDB person
 26765                                  
 26766 000059EB 8E1E[DE02]              	MOV	DS,[CurrentPDB]
 26767 000059EF 8E163000                	MOV	SS,[PDB.USER_STACK+2]
 26768 000059F3 8B262E00                	MOV	SP,[PDB.USER_STACK]
 26769                                  
 26770 000059F7 E8EBBB                  	call	restore_world
 26771                                  
 26772                                  	; MSDOS 6.0
 26773                                  	;push	ax			; set up ds, but save ds in TEMPSEG 
 26774                                  	;mov	ax, ds			; and not on stack.
 26775                                  	;getdseg <ds>			; ds -> dosdata
 26776                                  	;mov	TempSeg, ax
 26777                                  	;pop	ax
 26778                                  					; set up ds to DOSDATA
 26779 000059FA 2EA3[1E05]              	MOV	[CS:USER_SP],AX
 26780                                  
 26781 000059FE 58                      	POP	AX			; suck off CS:IP of interrupt...
 26782 000059FF 58                      	POP	AX
 26783 00005A00 58                      	POP	AX
 26784                                  
 26785                                  ; M011 : BEGIN
 26786                                  
 26787                                  	; MSDOS 3.3
 26788                                  ;	MOV	AX,0F202h	; STI
 26789                                  
 26790                                  	; MSDOS 6.0
 26791 00005A01 9F                      	LAHF
 26792 00005A02 86E0                    	XCHG	AH, AL
 26793 00005A04 2402                    	AND	AL, 02
 26794 00005A06 B4F2                    	MOV	AH, 0F2h
 26795                                  
 26796                                  ; M011 : END
 26797                                  
 26798                                  	; MSDOS 3.3 (& MSDOS 6.0)
 26799 00005A08 50                      	PUSH	AX
 26800                                   
 26801 00005A09 2EFF36[1C05]            	PUSH	word [CS:EXITHOLD+2]
 26802 00005A0E 2EFF36[1A05]            	PUSH	word [CS:EXITHOLD]
 26803                                  
 26804 00005A13 2EA1[1E05]              	MOV	AX,[CS:USER_SP]
 26805                                  
 26806                                  	; MSDOS 6.0
 26807                                  	;mov	ds,TempSeg	; restore ds
 26808                                  
 26809 00005A17 CF                      	IRET			; Long return back to user terminate address
 26810                                  
 26811                                  ;---------------------------------------------------------------------------
 26812                                  ;
 26813                                  ; Procedure Name : SET_I24_EXTENDED_ERROR
 26814                                  ;
 26815                                  ; This routine handles extended error codes.
 26816                                  ; Input : DI = error code from device
 26817                                  ; Output: All EXTERR fields are set
 26818                                  ;
 26819                                  ;--------------------------------------------------------------------------
 26820                                  
 26821                                  SET_I24_EXTENDED_ERROR:
 26822 00005A18 50                      	PUSH	AX
 26823                                  					; ErrMap24End is in DOSDATA
 26824 00005A19 B8[030E]                	MOV	AX,ErrMap24End
 26825 00005A1C 2D[F30D]                	SUB	AX,ErrMap24
 26826                                  					; Change to dosdata to access 
 26827                                  					; ErrMap24 and EXTERR -SR
 26828                                  	; MSDOS 6.0
 26829                                  	;push	ds
 26830                                  	;getdseg <ds>			; ds ->dosdata
 26831                                  
 26832                                  	; AX is the index of the first unavailable error. Do not translate 
 26833                                  	; if greater or equal to AX.
 26834                                  
 26835 00005A1F 39C7                    	CMP	DI,AX
 26836 00005A21 89F8                    	MOV	AX,DI
 26837 00005A23 7307                    	JAE	short NoTrans
 26838                                  
 26839 00005A25 2E8A85[F30D]            	MOV	AL,[CS:DI+ErrMap24]
 26840 00005A2A 30E4                    	XOR	AH,AH
 26841                                  NoTrans:
 26842 00005A2C 2EA3[D202]              	MOV	[CS:EXTERR],AX
 26843                                  	;pop	ds
 26844                                  	;assume	ds:nothing
 26845 00005A30 58                      	POP	AX
 26846                                  
 26847                                  	; Now Extended error is set correctly. Translate it to get correct 
 26848                                  	; error locus class and recommended action.
 26849                                  
 26850 00005A31 56                      	PUSH	SI
 26851                                  					; ERR_TABLE_24 is in DOSCODE 
 26852 00005A32 BE[A30D]                	MOV	SI,ERR_TABLE_24
 26853 00005A35 E80BBD                  	call	CAL_LK			; Set other extended error fields
 26854 00005A38 5E                      	POP	SI
 26855 00005A39 C3                      	retn
 26856                                  
 26857                                  ;============================================================================
 26858                                  ; FAT.ASM, MSDOS 6.0, 1991
 26859                                  ;============================================================================
 26860                                  ; 30/07/2018 - Retro DOS v3.0
 26861                                  
 26862                                  ;	TITLE	FAT - FAT maintenance routines
 26863                                  ;	NAME	FAT
 26864                                  
 26865                                  ;**	FAT.ASM
 26866                                  ;
 26867                                  ;	Low level local device routines for performing disk change sequence,
 26868                                  ;	setting cluster validity, and manipulating the FAT
 26869                                  ;
 26870                                  ;	IsEof
 26871                                  ;	UNPACK
 26872                                  ;	PACK
 26873                                  ;	MAPCLUSTER
 26874                                  ;	FATREAD_SFT
 26875                                  ;	FATREAD_CDS
 26876                                  ;	FAT_operation
 26877                                  ;
 26878                                  ;	Revision history:
 26879                                  ;
 26880                                  ;	  AN000  version Jan. 1988
 26881                                  ;	   A001  PTM	      -- disk changed for look ahead buffers
 26882                                  ;
 26883                                  ;	M014 - if a request for pack\unpack cluster 0 is made we write\read
 26884                                  ;	       from CL0FATENTRY rather than disk.
 26885                                  ;
 26886                                  
 26887                                  ;Break <IsEOF - check the quantity in BX for EOF>
 26888                                  ;----------------------------------------------------------------------------
 26889                                  ;
 26890                                  ; Procedure Name : IsEOF
 26891                                  ;
 26892                                  ; IsEOF - check the fat value in BX for eof.
 26893                                  ;
 26894                                  ;   Inputs:	ES:BP point to DPB
 26895                                  ;		BX has fat value
 26896                                  ;   Outputs:	JAE eof
 26897                                  ;   Registers modified: none
 26898                                  ;
 26899                                  ;---------------------------------------------------------------------------
 26900                                  
 26901                                  IsEOF:
 26902                                  	;cmp	word [es:bp+0Dh],0FF6h
 26903 00005A3A 26817E0DF60F            	CMP	word [ES:BP+DPB.MAX_CLUSTER],4096-10 ; is this 16 bit fat?
 26904 00005A40 730B                    	JAE	short EOF16			; yes, check for eof there
 26905                                  
 26906                                  ;J.K. 8/27/86
 26907                                  ;Modified to accept 0FF0h as an eof. This is to handle the diskfull case
 26908                                  ;of any media that has "F0"(Other) as a MediaByte.
 26909                                  ;Hopely, this does not create any side effect for those who may use any value
 26910                                  ;other than "FF8-FFF" as an EOF for their own file.
 26911                                  
 26912 00005A42 81FBF00F                	cmp	bx,0FF0h
 26913 00005A46 7404                    	je	short IsEOF_other
 26914                                  
 26915 00005A48 81FBF80F                	CMP	BX,0FF8h		; do the 12 bit compare
 26916                                  IsEOF_other:
 26917 00005A4C C3                      	retn
 26918                                  EOF16:
 26919 00005A4D 83FBF8                  	CMP	BX,0FFF8h		; 16 bit compare
 26920 00005A50 C3                      	retn
 26921                                  
 26922                                  ;Break	<UNPACK -- UNPACK FAT ENTRIES>
 26923                                  ;---------------------------------------------------------------------------
 26924                                  ;
 26925                                  ; Procedur Name : UNPACK
 26926                                  ;
 26927                                  ; Inputs:
 26928                                  ;	BX = Cluster number (may be full 16-bit quantity)
 26929                                  ;	ES:BP = Base of drive parameters
 26930                                  ; Outputs:
 26931                                  ;	DI = Contents of FAT for given cluster (may be full 16-bit quantity)
 26932                                  ;	Zero set means DI=0 (free cluster)
 26933                                  ;	Carry set means error (currently user FAILed to I 24)
 26934                                  ; SI Destroyed, No other registers affected. Fatal error if cluster too big.
 26935                                  ;
 26936                                  ; NOTE: if BX = 0 then DI = contents of CL0FATENTRY
 26937                                  ;
 26938                                  ;----------------------------------------------------------------------------
 26939                                  
 26940                                  UNPACK:
 26941                                  	; MSDOS 6.0			; M014 - Start
 26942                                  	;or	bx, bx			; Q: are we unpacking cluster 0
 26943                                  	;jnz	short up_cont		; N: proceed with normal unpack
 26944                                  	;mov	di,[CL0FATENTRY]	; Y: return value in CL0FATENTRY
 26945                                  	;or	di,di 			; return z if di=0
 26946                                  	;retn				; done
 26947                                  ;up_cont:				; M014 - End
 26948                                  	;cmp	bx,[es:bp+0Dh]
 26949 00005A51 263B5E0D                	CMP	BX,[ES:BP+DPB.MAX_CLUSTER]
 26950 00005A55 7726                    	JA	short HURTFAT
 26951 00005A57 E8B900                  	CALL	MAPCLUSTER
 26952 00005A5A 721E                    	jc	short _DoContext
 26953 00005A5C 8B3D                    	MOV	DI,[DI]
 26954 00005A5E 750E                    	JNZ	short High12		; MZ if high 12 bits, go get 'em
 26955 00005A60 268B760D                	MOV	SI,[ES:BP+DPB.MAX_CLUSTER] ; MZ is this 16-bit fat?
 26956 00005A64 81FEF60F                	CMP	SI,4096-10
 26957 00005A68 720C                    	JB	short Unpack12		; MZ No, go 'AND' off bits
 26958 00005A6A 09FF                    	OR	DI,DI			; MZ set zero condition code, clears carry
 26959 00005A6C EB0C                    	JMP	SHORT _DoContext 	; MZ go do context
 26960                                  
 26961                                  High12:
 26962 00005A6E D1EF                    	SHR	DI,1
 26963 00005A70 D1EF                    	SHR	DI,1
 26964 00005A72 D1EF                    	SHR	DI,1
 26965 00005A74 D1EF                    	SHR	DI,1
 26966                                  Unpack12:
 26967 00005A76 81E7FF0F                	AND	DI,0FFFh		; Clears carry
 26968                                  _DoContext:
 26969 00005A7A 16                      	PUSH	SS
 26970 00005A7B 1F                      	POP	DS
 26971 00005A7C C3                      	retn
 26972                                  
 26973                                  HURTFAT:
 26974                                  	;mov	word [es:bp+1Eh],0FFFFh
 26975 00005A7D 26C7461EFFFF            	MOV	word [ES:BP+DPB.FREE_CNT],-1 ; Err in FAT must force recomp of freespace
 26976 00005A83 50                      	PUSH	AX
 26977 00005A84 B488                    	MOV	AH,Allowed_FAIL+80h ; 88h
 26978                                  
 26979                                  ;hkn; SS override
 26980 00005A86 36C606[F702]08          	MOV	byte [SS:ALLOWED],Allowed_FAIL ; 8
 26981                                  ;
 26982                                  ; Signal Bad FAT to INT int_fatal_abort handler. We have an invalid cluster.
 26983                                  ;
 26984 00005A8C BFFF0F                  	MOV	DI,0FFFh		; In case INT int_fatal_abort returns (it shouldn't)
 26985 00005A8F E808FE                  	call	FATAL
 26986 00005A92 3C03                    	CMP	AL,3
 26987 00005A94 F8                      	CLC
 26988 00005A95 7501                    	JNZ	short OKU_RET 		; Try to ignore bad FAT
 26989 00005A97 F9                      	STC				; User said FAIL
 26990                                  OKU_RET:
 26991 00005A98 58                      	POP	AX
 26992                                  hurtfat_retn:
 26993 00005A99 C3                      	retn
 26994                                  
 26995                                  ;Break	<PACK -- PACK FAT ENTRIES>
 26996                                  ;----------------------------------------------------------------------------
 26997                                  ;
 26998                                  ; Procedure Name : PACK
 26999                                  ;
 27000                                  ; Inputs:
 27001                                  ;	BX = Cluster number
 27002                                  ;	DX = Data
 27003                                  ;	ES:BP = Pointer to drive DPB
 27004                                  ; Outputs:
 27005                                  ;	The data is stored in the FAT at the given cluster.
 27006                                  ;	SI,DX,DI all destroyed
 27007                                  ;	Carry set means error (currently user FAILed to I 24)
 27008                                  ;	No other registers affected
 27009                                  ;
 27010                                  ; NOTE: if BX = 0 then data in DX is atored in CL0FATENTRY.
 27011                                  ;
 27012                                  ;---------------------------------------------------------------------------
 27013                                  
 27014                                  PACK:
 27015                                  	; MSDOS 6.0			; M014 - start
 27016                                  	;or	bx, bx			; Q: are we packing cluster 0
 27017                                  	;jnz	short p_cont		; N: proceed with normal pack
 27018                                  	;mov	[CL0FATENTRY],dx	; Y: place value in CL0FATENTRY
 27019                                  	;retn				; done
 27020                                  ;p_cont:				; M014 - end
 27021 00005A9A E87600                  	CALL	MAPCLUSTER
 27022 00005A9D 72DB                    	JC	short _DoContext
 27023 00005A9F 8B35                    	MOV	SI,[DI]
 27024 00005AA1 740B                    	JZ	short ALIGNED 		; byte (not nibble) aligned
 27025 00005AA3 51                      	PUSH	CX			; move data to upper 12 bits
 27026 00005AA4 B104                    	MOV	CL,4
 27027 00005AA6 D3E2                    	SHL	DX,CL
 27028 00005AA8 59                      	POP	CX
 27029 00005AA9 83E60F                  	AND	SI,0FH			; leave in original low 4 bits
 27030 00005AAC EB14                    	JMP	SHORT PACKIN
 27031                                  ALIGNED:
 27032                                  	;cmp	word [es:bp+0Dh],0FF6h
 27033 00005AAE 26817E0DF60F            	CMP	word [ES:BP+DPB.MAX_CLUSTER],4096-10 ; MZ 16 bit fats?
 27034 00005AB4 730A                    	JAE	short Pack16		; MZ yes, go clobber original data
 27035 00005AB6 81E600F0                	AND	SI,0F000h		; MZ leave in upper 4 bits of original
 27036 00005ABA 81E2FF0F                	AND	DX,0FFFh		; MZ store only 12 bits
 27037 00005ABE EB02                    	JMP	SHORT PACKIN		; MZ go store
 27038                                  Pack16:
 27039 00005AC0 31F6                    	XOR	SI,SI			; MZ no original data
 27040                                  PACKIN:
 27041 00005AC2 09D6                    	OR	SI,DX
 27042 00005AC4 8935                    	MOV	[DI],SI
 27043                                  
 27044                                  ;hkn; SS override
 27045 00005AC6 36C536[7405]            	LDS	SI,[SS:CURBUF]
 27046                                  	; MSDOS 6.0
 27047                                  	;TEST	byte [SI+BUFFINFO.buf_flags],buf_dirty  
 27048                                  					;LB. if already dirty		  ;AN000;
 27049                                  	;JNZ	short yesdirty6		;LB.  don't increment dirty count ;AN000;
 27050                                  	;call	INC_DIRTY_COUNT		;LB.				  ;AN000;
 27051                                  	
 27052                                  	;or	byte [si+5],40h
 27053 00005ACB 804C0540                	OR	byte [SI+BUFFINFO.buf_flags],buf_dirty  
 27054                                  ;yesdirty6:				;LB.				  ;AN000;
 27055                                  ;hkn; SS override
 27056 00005ACF 36803E[1305]00          	CMP	BYTE [SS:CLUSSPLIT],0	; 15/08/2018
 27057                                  ;hkn; SS is DOSDATA
 27058 00005AD5 16                      	push	ss
 27059 00005AD6 1F                      	pop	ds
 27060 00005AD7 74C0                    	jz	short hurtfat_retn	; Carry clear
 27061 00005AD9 50                      	PUSH	AX
 27062 00005ADA 53                      	PUSH	BX
 27063 00005ADB 51                      	PUSH	CX
 27064 00005ADC A1[2805]                	MOV	AX,[CLUSSAVE]
 27065 00005ADF 8E1E[7605]              	MOV	DS,[CURBUF+2]
 27066 00005AE3 83C610                  	ADD	SI,BUFINSIZ  ; add si,16
 27067 00005AE6 8824                    	MOV	[SI],AH
 27068                                  ;hkn; SS is DOSDATA
 27069                                  	;Context DS
 27070 00005AE8 16                      	push	ss
 27071 00005AE9 1F                      	pop	ds	
 27072 00005AEA 50                      	PUSH	AX
 27073                                  	; MSDOS 6.0
 27074                                  	;MOV	DX,[CLUSSEC+2]		;F.C. >32mb			;AN000;
 27075                                  	;MOV	[HIGH_SECTOR],DX	;F.C. >32mb			;AN000;
 27076                                  
 27077 00005AEB 8B16[2A05]              	MOV	DX,[CLUSSEC]
 27078 00005AEF BE0100                  	MOV	SI,1
 27079 00005AF2 30C0                    	XOR	AL,AL
 27080 00005AF4 E89403                  	call	GETBUFFRB
 27081 00005AF7 58                      	POP	AX
 27082 00005AF8 7213                    	JC	short POPP_RET
 27083 00005AFA C53E[7405]              	LDS	DI,[CURBUF]
 27084                                  	; MSDOS 6.0
 27085                                  	;TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty  
 27086                                  	;				;LB. if already dirty		  ;AN000;
 27087                                  	;JNZ	short yesdirty7		;LB.  don't increment dirty count ;AN000;
 27088                                  	;call	INC_DIRTY_COUNT 	;LB.				  ;AN000;
 27089                                  	
 27090                                  	;or	byte [di+5],40h
 27091 00005AFE 804D0540                	OR	byte [DI+BUFFINFO.buf_flags],buf_dirty 
 27092                                  yesdirty7:
 27093 00005B02 83C710                  	ADD	DI,BUFINSIZ ; add di,16
 27094 00005B05 4F                      	DEC	DI
 27095                                  	;add	di,[es:bp+2]
 27096 00005B06 26037E02                	ADD	DI,[ES:BP+DPB.SECTOR_SIZE]
 27097 00005B0A 8805                    	MOV	[DI],AL
 27098 00005B0C F8                      	CLC
 27099                                  POPP_RET:
 27100 00005B0D 16                      	PUSH	SS
 27101 00005B0E 1F                      	POP	DS
 27102 00005B0F 59                      	POP	CX
 27103 00005B10 5B                      	POP	BX
 27104 00005B11 58                      	POP	AX
 27105 00005B12 C3                      	retn
 27106                                  
 27107                                  ; 31/07/2018 - Retro DOS v3.0
 27108                                  
 27109                                  ;Break	<MAPCLUSTER - BUFFER A FAT SECTOR>
 27110                                  ;---------------------------------------------------------------------------
 27111                                  ;
 27112                                  ; Procedure Name : MAPCLUSTER
 27113                                  ;
 27114                                  ; Inputs:
 27115                                  ;	ES:BP Points to DPB
 27116                                  ;	BX Is cluster number
 27117                                  ; Function:
 27118                                  ;	Get a pointer to the cluster
 27119                                  ; Outputs:
 27120                                  ;	DS:DI Points to contents of FAT for given cluster
 27121                                  ;	DS:SI Points to start of buffer
 27122                                  ;	Zero Not set if cluster data is in high 12 bits of word
 27123                                  ;	Zero set if cluster data is in low 12 or 16 bits
 27124                                  ;	Carry set if failed.
 27125                                  ; SI is destroyed.
 27126                                  ;
 27127                                  ;---------------------------------------------------------------------------
 27128                                  
 27129                                  MAPCLUSTER:
 27130                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5A15h
 27131 00005B13 C606[1305]00            	MOV	BYTE [CLUSSPLIT],0
 27132                                  	;SAVE	<AX,BX,CX,DX>
 27133 00005B18 50                      	push	ax
 27134 00005B19 53                      	push	bx
 27135 00005B1A 51                      	push	cx
 27136 00005B1B 52                      	push	dx
 27137 00005B1C 89D8                    	MOV	AX,BX			; AX = BX
 27138 00005B1E 26817E0DF60F            	CMP	word [ES:BP+DPB.MAX_CLUSTER],4096-10  ; MZ 16 bit fat?
 27139 00005B24 7302                    	JAE	short Map16		; MZ yes, do 16 bit algorithm
 27140 00005B26 D1E8                    	SHR	AX,1			; AX = BX/2
 27141                                  Map16:	
 27142                                  	; MSDOS 6.0			; MZ skip prev => AX=2*BX
 27143                                  	;XOR	DI,DI			; >32mb fat ;AN000;
 27144                                  	
 27145 00005B28 01D8                    	ADD	AX,BX			; AX = 1.5*fat = byte offset in fat
 27146                                  	;ADC	DI,DI			; >32mb fat ;DI is zero before op;AN000;
 27147 00005B2A 268B4E02                	MOV	CX,[ES:BP+DPB.SECTOR_SIZE]
 27148                                  
 27149                                  ;IF FastDiv
 27150                                  ;
 27151                                  ; Gross hack: 99% of all disks have 512 bytes per sector. We test for this
 27152                                  ; case and apply a really fast algorithm to get the desired results
 27153                                  ;
 27154                                  ; Divide method takes 157+4*4=173 (MOV and DIV)
 27155                                  ; Fast method takes 39+20*4=119
 27156                                  ;
 27157                                  ; This saves a bunch.
 27158                                  ;
 27159 00005B2E 81F90002                	CMP	CX,512			; 4	Is this 512 byte sector?
 27160 00005B32 750E                    	jne	short _DoDiv		; 4     for no jump
 27161 00005B34 89C2                    	MOV	DX,AX			; 2	get set for remainder
 27162 00005B36 81E2FF01                	AND	DX,512-1		; 4	Form remainder
 27163 00005B3A 88E0                    	MOV	AL,AH			; 2     Quotient in formation in AL
 27164                                  	; MDOS 6.0
 27165                                  	;shr	di,1			; 2
 27166                                  	;rcr	al,1			; 2
 27167                                  	; MDOS 3.3
 27168 00005B3C D0E8                    	shr	al,1	
 27169                                  	; MDOS 3.3 (& MSDOS 6.0)
 27170 00005B3E 30E4                    	xor	ah,ah			; 3
 27171 00005B40 EB04                    	jmp	short DivDone		; 16
 27172                                  _DoDiv:
 27173                                  ;ENDIF
 27174                                  	; MSDOS 6.0
 27175                                  	;mov	dx,di			; 2
 27176                                  	; MSDOS 3.3
 27177 00005B42 31D2                    	xor	dx,dx
 27178                                  	; MSDOS 3.3 (& MSDOS 6.0)	
 27179 00005B44 F7F1                    	DIV	CX			; 155 AX is FAT sector # DX is sector index
 27180                                  ;IF FastDiv
 27181                                  DivDone:
 27182                                  ;ENDIF
 27183 00005B46 26034606                	ADD	AX,[ES:BP+DPB.FIRST_FAT]
 27184 00005B4A 49                      	DEC	CX			; CX is sector size - 1
 27185                                  	;SAVE	<AX,DX,CX>
 27186 00005B4B 50                      	push	ax
 27187 00005B4C 52                      	push	dx
 27188 00005B4D 51                      	push	cx
 27189 00005B4E 89C2                    	MOV	DX,AX
 27190                                  	; MSDOS 6.0
 27191                                  	;MOV	word [HIGH_SECTOR],0 	;F.C. >32mb  low sector #
 27192 00005B50 30C0                    	XOR	AL,AL
 27193 00005B52 BE0100                  	MOV	SI,1
 27194                                  	;invoke	GETBUFFRB
 27195 00005B55 E83303                  	call	GETBUFFRB
 27196                                  	;RESTORE <CX,AX,DX>		; CX is sec siz-1, AX is offset in sec
 27197 00005B58 59                      	pop	cx
 27198 00005B59 58                      	pop	ax
 27199 00005B5A 5A                      	pop	dx
 27200 00005B5B 724B                    	JC	short MAP_POP
 27201 00005B5D C536[7405]              	LDS	SI,[CURBUF]
 27202 00005B61 8D7C10                  	LEA	DI,[SI+BUFINSIZ]  ; [si+16]
 27203 00005B64 01C7                    	ADD	DI,AX
 27204 00005B66 39C8                    	CMP	AX,CX
 27205 00005B68 752B                    	JNZ	short MAPRET
 27206 00005B6A 8A05                    	MOV	AL,[DI]
 27207                                  	;Context DS		 	;hkn; SS is DOSDATA
 27208 00005B6C 16                      	push	ss
 27209 00005B6D 1F                      	pop	ds	
 27210 00005B6E FE06[1305]              	INC	BYTE [CLUSSPLIT]
 27211 00005B72 A2[2805]                	MOV	[CLUSSAVE],AL
 27212 00005B75 8916[2A05]              	MOV	[CLUSSEC],DX
 27213                                  	; MSDOS 6.0
 27214                                  	;MOV	WORD [CLUSSEC+2],0      ;F.C. >32mb		;AN000;
 27215 00005B79 42                      	INC	DX
 27216                                  	;MOV	word [HIGH_SECTOR],0	;F.C. >32mb FAT sector <32mb ;AN000;
 27217 00005B7A 30C0                    	XOR	AL,AL
 27218 00005B7C BE0100                  	MOV	SI,1
 27219                                  	;invoke	GETBUFFRB
 27220 00005B7F E80903                  	call	GETBUFFRB
 27221 00005B82 7224                    	JC	short MAP_POP
 27222 00005B84 C536[7405]              	LDS	SI,[CURBUF]
 27223 00005B88 8D7C10                  	LEA	DI,[SI+BUFINSIZ]
 27224 00005B8B 8A05                    	MOV	AL,[DI]
 27225                                  	;Context DS			;hkn; SS is DOSDATA
 27226 00005B8D 16                      	push	ss
 27227 00005B8E 1F                      	pop	ds
 27228 00005B8F A2[2905]                	MOV	[CLUSSAVE+1],AL
 27229                                  
 27230                                  ;hkn; CLUSSAVE is in DOSDATA
 27231 00005B92 BF[2805]                	MOV	DI,CLUSSAVE
 27232                                  MAPRET:
 27233                                  	;RESTORE <DX,CX,BX>
 27234 00005B95 5A                      	pop	dx
 27235 00005B96 59                      	pop	cx
 27236 00005B97 5B                      	pop	bx
 27237 00005B98 31C0                    	XOR	AX,AX			; MZ allow shift to clear carry
 27238 00005B9A 26817E0DF60F            	CMP	word [ES:BP+DPB.MAX_CLUSTER],4096-10 ; MZ is this 16-bit fat?
 27239 00005BA0 7302                    	JAE	short MapSet		; MZ no, set flags
 27240 00005BA2 89D8                    	MOV	AX,BX
 27241                                  MapSet:
 27242 00005BA4 A801                    	TEST	AL,1			; set zero flag if not on boundary
 27243                                  	;RESTORE <AX>
 27244 00005BA6 58                      	pop	ax
 27245 00005BA7 C3                      	retn
 27246                                  
 27247                                  MAP_POP:
 27248                                  	;RESTORE <DX,CX,BX,AX>
 27249 00005BA8 5A                      	pop	dx
 27250 00005BA9 59                      	pop	cx
 27251 00005BAA 5B                      	pop	bx
 27252 00005BAB 58                      	pop	ax
 27253 00005BAC C3                      	retn
 27254                                  
 27255                                  ;Break	<FATREAD_SFT/FATREAD_CDS -- CHECK DRIVE GET FAT>
 27256                                  ;----------------------------------------------------------------------------
 27257                                  ;
 27258                                  ; Procedure Name : FATREAD_SFT
 27259                                  ;
 27260                                  ; Inputs:
 27261                                  ;	ES:DI points to an SFT for the drive of intrest (local only,
 27262                                  ;		giving a NET SFT will produce system crashing results).
 27263                                  ;	DS DOSDATA
 27264                                  ; Function:
 27265                                  ;	Can be used by an SFT routine (like CLOSE) to invalidate buffers
 27266                                  ;	if disk changed.
 27267                                  ;	In other respects, same as FATREAD_CDS.
 27268                                  ;	(note ES:DI destroyed!)
 27269                                  ; Outputs:
 27270                                  ;	Carry set if error (currently user FAILed to I 24)
 27271                                  ; NOTE: This routine may cause FATREAD_CDS to "miss" a disk change
 27272                                  ;	as far as invalidating curdir_ID is concerned.
 27273                                  ;	Since getting a true disk changed on this call is a screw up
 27274                                  ;	anyway, that's the way it goes.
 27275                                  ;
 27276                                  ;---------------------------------------------------------------------------
 27277                                  
 27278                                  FATREAD_SFT:
 27279 00005BAD 26C46D07                	LES	BP,[ES:DI+SF_ENTRY.sf_devptr]
 27280                                  	;MOV	AL,[ES:BP+DPB.DRIVE] ; [es:bp+0]
 27281 00005BB1 268A4600                	mov	AL,[ES:BP]
 27282 00005BB5 A2[1105]                	MOV	[THISDRV],AL
 27283 00005BB8 E839BB                  	call	GOTDPB			;Set THISDPB
 27284 00005BBB E87A00                  	CALL	FAT_GOT_DPB
 27285                                  fatread_sft_retn:
 27286 00005BBE C3                      	retn
 27287                                  
 27288                                  ;----------------------------------------------------------------------------
 27289                                  ;
 27290                                  ; Procedure Name : FATREAD_CDS
 27291                                  ;
 27292                                  ; Inputs:
 27293                                  ;	DS:DOSDATA
 27294                                  ;	ES:DI points to an CDS for the drive of intrest (local only,
 27295                                  ;		giving a NET or NUL CDS will produce system crashing results).
 27296                                  ; Function:
 27297                                  ;	If disk may have been changed, media is determined and buffers are
 27298                                  ;	flagged invalid. If not, no action is taken.
 27299                                  ; Outputs:
 27300                                  ;	ES:BP = Drive parameter block
 27301                                  ;	THISDPB = ES:BP
 27302                                  ;	THISDRV set
 27303                                  ;	Carry set if error (currently user FAILed to I 24)
 27304                                  ; DS preserved , all other registers destroyed
 27305                                  ;
 27306                                  ;---------------------------------------------------------------------------
 27307                                  
 27308                                  FATREAD_CDS:
 27309 00005BBF 06                      	PUSH	ES
 27310 00005BC0 57                      	PUSH	DI
 27311                                  	;les	bp,[es:di+45h]
 27312 00005BC1 26C46D45                	LES	BP,[ES:DI+curdir.devptr]
 27313                                  	;MOV	AL,[ES:BP+DPB.DRIVE] ; [es:bp+0]
 27314 00005BC5 268A4600                	mov	AL,[ES:BP]
 27315 00005BC9 A2[1105]                	MOV	[THISDRV],AL
 27316 00005BCC E825BB                  	call	GOTDPB			;Set THISDPB
 27317 00005BCF E86600                  	CALL	FAT_GOT_DPB
 27318 00005BD2 5F                      	POP	DI			;Get back CDS pointer
 27319 00005BD3 07                      	POP	ES
 27320 00005BD4 72E8                    	jc	short fatread_sft_retn
 27321 00005BD6 7539                    	JNZ	short NO_CHANGE		;Media NOT changed
 27322                                  
 27323                                  ;	Media changed. We now need to find all CDS structures which use this
 27324                                  ;	DPB and invalidate their ID pointers.
 27325                                  
 27326                                  MED_CHANGE:
 27327 00005BD8 31C0                    	XOR	AX,AX
 27328 00005BDA 48                      	DEC	AX			; AX = -1
 27329 00005BDB 1E                      	PUSH	DS
 27330 00005BDC 8A0E[4700]              	MOV	CL,[CDSCOUNT]
 27331 00005BE0 30ED                    	XOR	CH,CH			; CX is number of structures
 27332                                  	;lds	si,[es:di+45h]
 27333 00005BE2 26C57545                	LDS	SI,[ES:DI+curdir.devptr] ; Find all CDS with this devptr
 27334                                  
 27335                                  ;hkn; SS override
 27336                                  
 27337                                  ;	Find all CDSs with this DevPtr
 27338                                  ;
 27339                                  ;	(ax) = -1
 27340                                  ;	(ds:si) = DevPtr
 27341                                  
 27342 00005BE6 36C43E[3C00]            	LES	DI,[SS:CDSADDR]		; (es:di) = CDS pointer
 27343                                  frcd20: 
 27344                                  	;test	word [es:di+43h],8000h
 27345 00005BEB 26F745430080            	TEST	word [ES:DI+curdir.flags],curdir_isnet
 27346 00005BF1 7518                    	JNZ	short frcd25		; Leave NET guys alone!!
 27347                                  
 27348                                  	; MSDOS 3.3
 27349                                  	;push	es
 27350                                  	;push	di
 27351                                  	;les	di,[es:di+45h]
 27352                                  	;;les	di,[ES:DI+curdir.devptr]
 27353                                  	;call	POINTCOMP
 27354                                  	;pop	di
 27355                                  	;pop	es
 27356                                  	;jnz	short frcd25
 27357                                  
 27358                                  	; MSDOS 6.0
 27359 00005BF3 263B7545                	cmp	si,[ES:DI+curdir.devptr]
 27360 00005BF7 7512                    	jne	short frcd25		; no match
 27361 00005BF9 8CDB                    	mov	bx,ds
 27362 00005BFB 263B5D47                	cmp	bx,[ES:DI+curdir.devptr+2]
 27363 00005BFF 750A                    	jne	short frcd25		; CDS not for this drive
 27364                                  
 27365                                  	; MSDOS 3.3 (& MSDOS 6.0)
 27366                                  	;test	[es:di+49h],ax
 27367 00005C01 26854549                	test	[ES:DI+curdir.ID],AX
 27368 00005C05 7404                    	JZ	short frcd25		; If root (0), leave root
 27369                                  	;mov	[es:di+49h],ax
 27370 00005C07 26894549                	MOV	[ES:DI+curdir.ID],AX	; else invalid
 27371                                  frcd25:	
 27372                                  	;add	di,81
 27373 00005C0B 83C751                  	ADD	DI,curdir.size		; Point to next CDS
 27374 00005C0E E2DB                    	LOOP	frcd20
 27375 00005C10 1F                      	POP	DS
 27376                                  NO_CHANGE:
 27377 00005C11 C42E[2405]              	LES	BP,[THISDPB]
 27378 00005C15 F8                      	CLC
 27379 00005C16 C3                      	retn
 27380                                  
 27381                                  ;Break	<Fat_Operation - miscellaneous fat stuff>
 27382                                  ;----------------------------------------------------------------------------
 27383                                  ;
 27384                                  ; Procedure Name : FAT_operation
 27385                                  ;
 27386                                  ;----------------------------------------------------------------------------
 27387                                  FAT_operation:
 27388                                  	; 31/07/2018 - Retro DOS v3.0
 27389                                  FATERR:
 27390                                  	;mov	word [es:bp+1Eh],-1
 27391 00005C17 26C7461EFFFF            	MOV	word [ES:BP+DPB.FREE_CNT],-1 
 27392                                  					; Err in FAT must force recomp of freespace
 27393                                  	;and	di,0FFh
 27394 00005C1D 81E7FF00                	AND	DI,STECODE		; Put error code in DI
 27395                                  	;mov	byte [ALLOWED],18h
 27396 00005C21 C606[F702]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 27397                                  	;mov	ah,1Ah
 27398 00005C26 B41A                    	MOV	AH,2+Allowed_FAIL+Allowed_RETRY ; While trying to read FAT
 27399 00005C28 A0[1105]                	MOV	AL,[THISDRV]		; Tell which drive
 27400 00005C2B E870FC                  	call	FATAL1
 27401 00005C2E C42E[2405]              	LES	BP,[THISDPB]
 27402 00005C32 3C03                    	CMP	AL,3
 27403 00005C34 7502                    	JNZ	short FAT_GOT_DPB	; User said retry
 27404 00005C36 F9                      	STC				; User said FAIL
 27405 00005C37 C3                      	retn
 27406                                  
 27407                                  FAT_GOT_DPB:
 27408                                  	;Context DS			;hkn; SS is DOSDATA
 27409 00005C38 16                      	push	ss			
 27410 00005C39 1F                      	pop	ds
 27411                                  	;mov	al,0Fh
 27412 00005C3A B00F                    	MOV	AL,DMEDHL
 27413                                  	;mov	al,[es:bp+1]
 27414 00005C3C 268A6601                	MOV	AH,[ES:BP+DPB.UNIT] 
 27415 00005C40 A3[0603]                	MOV	[DEVCALL_REQLEN],AX ; 09/09/2018 
 27416 00005C43 C606[0803]01            	MOV	BYTE [DEVCALL_REQFUNC],DEVMDCH
 27417 00005C48 C706[0903]0000          	MOV	word [DEVCALL_REQSTAT],0
 27418                                  	;mov	al,[es:bp+16h]
 27419 00005C4E 268A4616                	MOV	AL,[ES:BP+DPB.MEDIA]
 27420 00005C52 A2[1303]                	MOV	[CALLMED],AL
 27421 00005C55 06                      	PUSH	ES
 27422 00005C56 1E                      	PUSH	DS
 27423                                  
 27424                                  ;hkn; DEVCALL is in DOSDATA
 27425 00005C57 BB[0603]                	MOV	BX,DEVCALL
 27426                                  	;lds	si,[es:bp+12h]
 27427 00005C5A 26C57612                	LDS	SI,[ES:BP+DPB.DRIVER_ADDR] ; DS:SI Points to device header
 27428 00005C5E 07                      	POP	ES			; ES:BX Points to call header
 27429 00005C5F E89CF2                  	call	DEVIOCALL2
 27430                                  	;Context DS		 	;hkn; SS is DOSDATA
 27431 00005C62 16                      	push	ss
 27432 00005C63 1F                      	pop	ds
 27433 00005C64 07                      	POP	ES			; Restore ES:BP
 27434 00005C65 8B3E[0903]              	MOV	DI,[DEVCALL_REQSTAT]
 27435                                  	;test	di,8000h
 27436                                  	;jnz	short FATERR
 27437 00005C69 09FF                    	or	di,di
 27438 00005C6B 78AA                    	js	short FATERR		; have error
 27439 00005C6D 30E4                    	XOR	AH,AH
 27440                                  	;xchg	ah,[es:bp+17h]
 27441 00005C6F 26866617                	XCHG	AH,[ES:BP+DPB.FIRST_ACCESS] ; Reset dpb_first_access
 27442 00005C73 A0[1105]                	MOV	AL,[THISDRV]		; Use physical unit number
 27443                                  ; See if we had changed volume id by creating one on the diskette
 27444 00005C76 3806[070A]              	cmp	[VOLCHNG_FLAG],AL
 27445 00005C7A 7508                    	jnz	short CHECK_BYT
 27446 00005C7C C606[070A]FF            	mov	byte [VOLCHNG_FLAG],-1
 27447 00005C81 E98800                  	jmp	GOGETBPB		; Need to get device driver to read in
 27448                                  					; new volume label.
 27449                                  CHECK_BYT:
 27450 00005C84 0A26[1403]              	OR	AH,[CALLRBYT]
 27451                                  	;JNS	short CHECK_ZR		; ns = 0 or 1
 27452                                  	;JMP	short NEWDSK
 27453 00005C88 785D                    	js	short NEWDSK
 27454                                  
 27455                                  CHECK_ZR:
 27456 00005C8A 743D                    	JZ	short CHKBUFFDIRT	; jump if I don't know
 27457 00005C8C F8                      	CLC
 27458 00005C8D C3                      	retn				; If Media not changed (NZ)
 27459                                  
 27460                                  DISK_CHNG_ERR:
 27461 00005C8E 06                      	PUSH	ES
 27462 00005C8F 55                      	PUSH	BP
 27463                                  	;les	bp,[es:bp+12h]
 27464 00005C90 26C46E12                	LES	BP,[ES:BP+DPB.DRIVER_ADDR] ; Get device pointer
 27465                                  	;test	word [es:bp+4],800h
 27466 00005C94 26F746040008            	TEST	word [ES:BP+SYSDEV.ATT],DEVOPCL ; Did it set vol id?
 27467 00005C9A 5D                      	POP	BP
 27468 00005C9B 07                      	POP	ES
 27469 00005C9C 7426                    	JZ	short FAIL_OPJ2		; Nope, FAIL
 27470 00005C9E 1E                      	PUSH	DS			; Save buffer pointer for ignore
 27471 00005C9F 57                      	PUSH	DI
 27472 00005CA0 16                      	push	ss			;hkn; SS is DOSDATA
 27473 00005CA1 1F                      	pop	ds
 27474                                  	;mov	byte [ALLOWED],18h
 27475 00005CA2 C606[F702]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 27476 00005CA7 06                      	PUSH	ES
 27477 00005CA8 C43E[1503]              	LES	DI,[CALLVIDM]		; Get volume ID pointer
 27478 00005CAC 8C06[D802]              	MOV	[EXTERRPT+2],ES
 27479 00005CB0 07                      	POP	ES
 27480 00005CB1 893E[D602]              	MOV	[EXTERRPT],DI
 27481                                  	;mov	ax,0Fh
 27482 00005CB5 B80F00                  	MOV	AX,error_I24_wrong_disk
 27483 00005CB8 C606[1005]01            	MOV	byte [READOP],1		; Write
 27484                                  	;invoke	HARDERR
 27485 00005CBD E88CFB                  	call	HARDERR
 27486 00005CC0 5F                      	POP	DI			; Get back buffer for ignore
 27487 00005CC1 1F                      	POP	DS
 27488 00005CC2 3C03                    	CMP	AL,3
 27489                                  FAIL_OPJ2:
 27490 00005CC4 7416                    	JZ	short FAIL_OP
 27491 00005CC6 E96FFF                  	JMP	FAT_GOT_DPB		; Retry
 27492                                  
 27493                                  CHKBUFFDIRT:
 27494                                  	; MSDOS 6.0
 27495                                  	;cmp	word [DirtyBufferCount],0	; any dirty buffers ? ;hkn;
 27496                                  	;je	short NEWDSK			; no, skip the check
 27497                                  	;call	GetCurHead			; get pointer to first buffer
 27498                                  
 27499                                  	; MSDOS 3.3
 27500 00005CC9 C53E[3800]              	lds	di,[BUFFHEAD]
 27501                                  nbuffer:
 27502                                  	;cmp	al,[di+4]
 27503 00005CCD 384504                  	cmp	[di+BUFFINFO.buf_ID],al	; Unit OK ?
 27504 00005CD0 750E                    	jne	short lfnxt			; no, go for next buffer
 27505                                  	;test   byte [di+5],40h
 27506 00005CD2 F6450540                	TEST	byte [di+BUFFINFO.buf_flags],buf_dirty	; is the buffer dirty ?
 27507 00005CD6 7408                    	jz	short lfnxt			; no, go for next buffer
 27508                                  	;Context DS
 27509 00005CD8 16                      	push	ss
 27510 00005CD9 1F                      	pop	ds
 27511 00005CDA F8                      	clc
 27512 00005CDB C3                      	retn
 27513                                  
 27514                                  FAIL_OP:					; This label & code is here
 27515                                  	;Context DS				;  for reachability
 27516 00005CDC 16                      	push	ss
 27517 00005CDD 1F                      	pop	ds
 27518 00005CDE F9                      	STC
 27519 00005CDF C3                      	retn
 27520                                  
 27521                                  lfnxt:
 27522                                  	; 15/08/2018
 27523                                  	;mov	di,[di]
 27524                                  	;mov	di,[di+BUFFINFO.buf_next]	; get next buffer
 27525                                  	;
 27526 00005CE0 C53D                    	lds	di,[di]
 27527                                  	;
 27528                                  	; MSDOS 6.0
 27529                                  	;cmp	[FIRST_BUFF_ADDR],di		; is this where we started ?;hkn;
 27530                                  	;jne	short nbuffer			; no, check this guy also
 27531                                  	; MSDOS 3.3
 27532 00005CE2 83FFFF                  	cmp	di,-1
 27533 00005CE5 75E6                    	jne	short nbuffer
 27534                                  
 27535                                  ; If no dirty buffers, assume Media changed
 27536                                  NEWDSK:
 27537                                  	;mov	word [es:bp+1Eh],0FFFFh
 27538 00005CE7 26C7461EFFFF            	mov	word [ES:BP+DPB.FREE_CNT],-1	; Media changed, must
 27539                                  	; MSDOS 6.0				;  recompute
 27540                                  	;call	GetCurHead
 27541                                  	; MSDOS 3.3
 27542 00005CED E8B500                  	call	SETVISIT
 27543                                  nxbuffer:
 27544                                  	; MSDOS 3.3
 27545 00005CF0 804D0520                	or 	byte [di+5],20h
 27546                                  	; MSDOS 3.3 (& MSDOS 6.0)
 27547                                  	;cmp	[di+4],al
 27548 00005CF4 384504                  	cmp	[DI+BUFFINFO.buf_ID],al		; This drive ?
 27549 00005CF7 750E                    	jne	short lfnxt2
 27550                                  	;test	byte [di+5],40h
 27551 00005CF9 F6450540                	TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty
 27552 00005CFD 758F                    	jnz	short DISK_CHNG_ERR
 27553                                  	;mov	word [di+4],20FFh
 27554 00005CFF C74504FF20              	mov	word [DI+BUFFINFO.buf_ID],(buf_visit*256)+0FFh ; free up
 27555 00005D04 E8CB00                  	call	SCANPLACE
 27556                                  	; MSDOS 6.0
 27557                                  	;jmp	short skpbuff
 27558                                  ;lfnxt2:
 27559                                  	;;mov	di,[di+BUFFINFO.buf_next]
 27560                                  	;mov	di,[di]
 27561                                  ;skpbuff:
 27562                                  	;cmp	di,[FIRST_BUFF_ADDR]					;hkn;
 27563                                  	;jne	short nxbuffer
 27564                                  
 27565                                  	;CMP	word [SC_CACHE_COUNT],0	;LB.  look ahead buffers ?	;AN001;
 27566                                  	;JZ	short GOGETBPB		;LB.  no			;AN001;
 27567                                  	;CMP	AL,[CURSC_DRIVE]	;LB.  same as changed drive	;AN001;
 27568                                  	;JNZ	short GOGETBPB		;LB.  no			;AN001;
 27569                                  	;MOV	byte [CURSC_DRIVE],-1	;LB.  invalidate look ahead buffers ;AN000;
 27570                                  lfnxt2:
 27571                                  	; MSDOS 3.3
 27572 00005D07 E8B400                  	call	SKIPVISIT
 27573 00005D0A 75E4                    	jnz	short nxbuffer
 27574                                  GOGETBPB:
 27575                                  	;lds	di,[es:bp+12h]
 27576 00005D0C 26C57E12                	LDS	DI,[ES:BP+DPB.DRIVER_ADDR]
 27577                                  	;test	word [di+4],2000h
 27578 00005D10 F745040020              	TEST	word [DI+SYSDEV.ATT],ISFATBYDEV
 27579 00005D15 7510                    	JNZ	short GETFREEBUF
 27580                                  	;context DS	    		;hkn; SS is DOSDATA
 27581 00005D17 16                      	push	ss
 27582 00005D18 1F                      	pop	ds
 27583 00005D19 BB0200                  	MOV	BX,2
 27584 00005D1C E832FD                  	CALL	UNPACK			; Read the first FAT sector into CURBUF
 27585                                  FAIL_OPJ:
 27586 00005D1F 72BB                    	JC	short FAIL_OP
 27587 00005D21 C53E[7405]              	LDS	DI,[CURBUF]
 27588 00005D25 EB0E                    	JMP	SHORT GOTGETBUF
 27589                                  
 27590                                  GETFREEBUF:
 27591 00005D27 06                      	PUSH	ES			; Get a free buffer for BIOS to use
 27592 00005D28 55                      	PUSH	BP
 27593                                  	; MSDOS 3.3
 27594 00005D29 36C53E[3800]            	LDS	DI,[SS:BUFFHEAD] ; 15/08/2018
 27595                                  	; MSDOS 6.0
 27596                                  	;XOR	DX,DX			;LB.  fake to get 1st	  ;AN000;
 27597                                  ;hkn; SS override
 27598                                  	;MOV	[SS:HIGH_SECTOR],DX	;LB.  buffer addr	  ;AN000;
 27599                                  	;call	GETCURHEAD		;LB.			  ;AN000;
 27600                                  	; MSDOS 3.3 (& MSDOS 6.0)
 27601 00005D2E E84F02                  	call	BUFWRITE
 27602 00005D31 5D                      	POP	BP
 27603 00005D32 07                      	POP	ES
 27604                                  	;JC	short FAIL_OPJ
 27605 00005D33 72A7                    	jc	short FAIL_OP
 27606                                  GOTGETBUF:
 27607                                  	;add	di,16
 27608 00005D35 83C710                  	ADD	DI,BUFINSIZ
 27609                                  
 27610                                  ;hkn; SS override
 27611 00005D38 368C1E[1603]            	MOV	[SS:CALLXAD+2],DS
 27612                                  	;Context DS			;hkn; SS is DOSDATA
 27613 00005D3D 16                      	push	ss
 27614 00005D3E 1F                      	pop	ds
 27615 00005D3F 893E[1403]              	MOV	[CALLXAD],DI
 27616                                  	;mov	al,16h
 27617 00005D43 B016                    	MOV	AL,DBPBHL
 27618                                  	;mov	ah,[es:bp+1]
 27619 00005D45 268A6601                	MOV	AH,[ES:BP+DPB.UNIT]
 27620 00005D49 A3[0603]                	MOV	[DEVCALL_REQLEN],AX ; 09/09/2018
 27621 00005D4C C606[0803]02            	MOV	BYTE [DEVCALL_REQFUNC],DEVBPB
 27622 00005D51 C706[0903]0000          	MOV	word [DEVCALL_REQSTAT],0
 27623                                  	;mov	al,[es:bp+16h]
 27624 00005D57 268A4616                	MOV	AL,[ES:BP+DPB.MEDIA]
 27625 00005D5B A2[1303]                	MOV	[CALLMED],AL
 27626 00005D5E 06                      	PUSH	ES
 27627 00005D5F 1E                      	PUSH	DS
 27628                                  	;push	word [es:bp+14h]
 27629 00005D60 26FF7614                	PUSH	WORD [ES:BP+DPB.DRIVER_ADDR+2]
 27630                                  	;push	word [es:bp+12h]
 27631 00005D64 26FF7612                	PUSH	WORD [ES:BP+DPB.DRIVER_ADDR]
 27632                                  
 27633                                  ;hkn; DEVCALL is in DOSDATA
 27634 00005D68 BB[0603]                	MOV	BX,DEVCALL
 27635 00005D6B 5E                      	POP	SI
 27636 00005D6C 1F                      	POP	DS			; DS:SI Points to device header
 27637 00005D6D 07                      	POP	ES			; ES:BX Points to call header
 27638                                  	;invoke	DEVIOCALL2
 27639 00005D6E E88DF1                  	call	DEVIOCALL2
 27640 00005D71 07                      	POP	ES			; Restore ES:BP
 27641                                  	;Context DS
 27642 00005D72 16                      	push	ss		 	;hkn; SS is DOSDATA
 27643 00005D73 1F                      	pop	ds
 27644 00005D74 8B3E[0903]              	MOV	DI,[DEVCALL_REQSTAT]
 27645                                  	; MSDOS 3.3
 27646                                  	;test	di,8000h
 27647                                  	;jnz	short FATERRJ
 27648                                  	; MSDOS 6.0
 27649 00005D78 09FF                    	or	di,di
 27650 00005D7A 7826                    	js	short FATERRJ 		; have error
 27651                                  	;;mov	al,[es:bp+16h]
 27652 00005D7C 268A4616                	MOV	AL,[ES:BP+DPB.MEDIA]
 27653 00005D80 C536[1803]              	LDS	SI,[CALLBPB]
 27654                                  	;mov	word [es:bp+1Ch],0
 27655 00005D84 26C7461C0000            	MOV	word [ES:BP+DPB.NEXT_FREE],0 ; recycle scanning pointer
 27656                                  	;invoke	$SETDPB
 27657 00005D8A E8FFBF                  	call	_$SETDPB
 27658                                  
 27659                                  ;hkn; SS override
 27660 00005D8D 36C53E[1403]            	LDS	DI,[SS:CALLXAD]		; Get back buffer pointer
 27661                                  	;mov	al,[es:bp+8]
 27662 00005D92 268A4608                	MOV	AL,[ES:BP+DPB.FAT_COUNT]
 27663                                  
 27664                                  	; MSDOS 6.0
 27665                                  	;MOV	[DI+BUFFINFO.buf_wrtcnt-BUFINSIZ],AL ;>32mb		  ;AN000;
 27666                                  	;MOV	AX,[ES:BP+DPB.FAT_SIZE]		;>32mb			  ;AC000;
 27667                                  	;MOV	[DI.buf_wrtcntinc-BUFINSIZ],AX ;>32mb Correct buffer info ;AC000;
 27668                                  
 27669                                  	; MSDOS 3.3
 27670                                  	;mov	ah,[es:bp+0Fh]
 27671 00005D96 268A660F                	MOV	AH,[ES:BP+DPB.FAT_SIZE]
 27672                                  	;mov	[DI-8],ax
 27673 00005D9A 8945F8                  	MOV	[DI+BUFFINFO.buf_wrtcnt-BUFINSIZ],AX
 27674                                  
 27675                                  	;Context DS			;hkn; SS is DOSDATA
 27676 00005D9D 16                      	push	ss
 27677 00005D9E 1F                      	pop	ds
 27678 00005D9F 30C0                    	XOR	AL,AL			;Media changed (Z), Carry clear
 27679 00005DA1 C3                      	retn
 27680                                  
 27681                                  FATERRJ: 
 27682 00005DA2 E972FE                  	JMP	FATERR
 27683                                  
 27684                                  
 27685                                  ;============================================================================
 27686                                  ; STDBUF.ASM
 27687                                  ;============================================================================
 27688                                  ; Retro DOS v2.0 - 12/03/2018
 27689                                  
 27690                                  ;
 27691                                  ; Standard buffer management for MSDOS
 27692                                  ;
 27693                                  
 27694                                  ;.xlist
 27695                                  ;.xcref
 27696                                  ;INCLUDE STDSW.ASM
 27697                                  ;.cref
 27698                                  ;.list
 27699                                  
 27700                                  ;TITLE	STDBUF - MSDOS buffer management
 27701                                  ;NAME	STDBUF
 27702                                  
 27703                                  ;INCLUDE BUF.ASM
 27704                                  
 27705                                  ;============================================================================
 27706                                  ; BUF.ASM
 27707                                  ;============================================================================
 27708                                  ; 31/07/2018 - Retro DOS v3.0
 27709                                  ; Retro DOS v2.0 - 12/03/2018
 27710                                  
 27711                                  ;
 27712                                  ; buffer management for MSDOS
 27713                                  ;
 27714                                  
 27715                                  ;CODE	SEGMENT BYTE PUBLIC  'CODE'
 27716                                  ;       ASSUME  SS:DOSGROUP,CS:DOSGROUP
 27717                                  
 27718                                  ;SUBTTL SETVISIT,SKIPVISIT -- MANAGE BUFFER SCANS
 27719                                  
 27720                                  SETVISIT:
 27721                                  	; 31/07/2018 - Retro DOS v3.0
 27722                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5CAFh
 27723                                  ; Inputs:
 27724                                  ;       None
 27725                                  ; Function:
 27726                                  ;       Set up a scan of I/O buffers
 27727                                  ; Outputs:
 27728                                  ;       All visit flags = 0
 27729                                  ;               NOTE: This pre-scan is needed because a hard disk error
 27730                                  ;                     may cause a scan to stop in the middle leaving some
 27731                                  ;                     visit flags set, and some not set.
 27732                                  ;       DS:DI Points to [BUFFHEAD]
 27733                                  ; No other registers altered
 27734                                  
 27735 00005DA5 36C53E[3800]                    LDS     DI,[SS:BUFFHEAD] ; 15/03/2018
 27736 00005DAA 50                      	PUSH    AX
 27737                                          ;;XOR	AX,AX	  ;; MSDOS 2.11
 27738                                  	;mov	al,0DFh
 27739 00005DAB B0DF                    	mov	al,~buf_visit
 27740                                  SETLOOP:
 27741                                          ;;MOV	[DI+7],AL ;; MSDOS 2.11
 27742                                  	;and	[DI+5],al
 27743 00005DAD 204505                  	AND	[DI+BUFFINFO.buf_flags],AL
 27744 00005DB0 C53D                            LDS     DI,[DI]
 27745 00005DB2 83FFFF                          CMP     DI,-1
 27746 00005DB5 75F6                            JNZ     SHORT SETLOOP
 27747 00005DB7 58                              POP     AX ; 09/09/2018
 27748 00005DB8 36C53E[3800]            	LDS     DI,[SS:BUFFHEAD] ; 15/03/2018
 27749                                  SVISIT_RETN:
 27750 00005DBD C3                              RETN
 27751                                  
 27752                                  SKIPVISIT:
 27753                                  	; 31/07/2018 - Retro DOS v3.0
 27754                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5CC8h
 27755                                  
 27756                                  ; Inputs:
 27757                                  ;       DS:DI Points to a buffer
 27758                                  ; Function:
 27759                                  ;       Skip visited buffers
 27760                                  ; Outputs:
 27761                                  ;       DS:DI Points to next unvisited buffer
 27762                                  ;       Zero is set if skip to LAST buffer
 27763                                  ; No other registers altered
 27764                                  
 27765 00005DBE 83FFFF                          CMP     DI,-1
 27766                                          ;retz
 27767 00005DC1 74FA                            JZ	SHORT SVISIT_RETN
 27768                                  
 27769                                  	;;CMP	BYTE [DI+7],1 ;; MSDOS 2.11
 27770                                          ;;;retnz
 27771                                          ;;JNZ	SHORT SVISIT_RETN
 27772                                  
 27773                                  	;test	byte [di+5],20h
 27774 00005DC3 F6450520                	TEST	byte [DI+BUFFINFO.buf_flags],buf_visit	
 27775 00005DC7 7505                    	JNZ	short SKIPLOOP
 27776                                  	
 27777 00005DC9 50                      	push	ax
 27778 00005DCA 0C01                    	or	al,1
 27779 00005DCC 58                      	pop	ax
 27780 00005DCD C3                      	retn	
 27781                                  
 27782                                  SKIPLOOP:
 27783 00005DCE C53D                    	LDS     DI,[DI]
 27784 00005DD0 EBEC                            JMP     SHORT SKIPVISIT
 27785                                  
 27786                                  ;============================================================================
 27787                                  ; BUF.ASM, MSDOS 6.0, 1991
 27788                                  ;============================================================================
 27789                                  ; 31/07/2018 - Retro DOS v3.0
 27790                                  
 27791                                  ;	TITLE	BUF - MSDOS buffer management
 27792                                  ;	NAME	BUF
 27793                                  
 27794                                  ;**	BUF.ASM - Low level routines for buffer cache management
 27795                                  ;
 27796                                  ;	GETCURHEAD
 27797                                  ;	ScanPlace
 27798                                  ;	PLACEBUF
 27799                                  ;	PLACEHEAD
 27800                                  ;	PointComp
 27801                                  ;	GETBUFFR
 27802                                  ;	GETBUFFRB
 27803                                  ;	FlushBuf
 27804                                  ;	BufWrite
 27805                                  ;	SET_RQ_SC_PARMS
 27806                                  ;
 27807                                  ;	Revision history:
 27808                                  ;
 27809                                  ;		AN000  version 4.00  Jan. 1988
 27810                                  ;		A004   PTM 3765 -- Disk reset failed
 27811                                  ;		M039 DB 10/17/90 - Disk write optimization
 27812                                  ;		I001   5.0 PTR 722211 - Preserve CY when in buffer in HMA
 27813                                  
 27814                                  ;Break	<GETCURHEAD -- Get current buffer header>
 27815                                  ;----------------------------------------------------------------------------
 27816                                  ; Procedure Name : GetCurHead
 27817                                  ; Inputs:
 27818                                  ;	 No Inputs
 27819                                  ; Function:
 27820                                  ;	Returns the pointer to the first buffer in Queue
 27821                                  ;	and updates FIRST_BUFF_ADDR
 27822                                  ;       and invalidates LASTBUFFER (recency pointer)
 27823                                  ; Outputs:
 27824                                  ;	DS:DI = pointer to the first buffer in Queue
 27825                                  ;	FIRST_BUFF_ADDR = offset ( DI ) of First buffer in Queue
 27826                                  ;       LASTBUFFER = -1
 27827                                  ; No other registers altered
 27828                                  ;----------------------------------------------------------------------------
 27829                                  
 27830                                  ;procedure   GETCURHEAD,NEAR
 27831                                  ;
 27832                                  ;	lds	di, BufferQueue		; Pointer to the first buffer;smr;SS Override
 27833                                  ;	mov	word ptr [LastBuffer],-1; invalidate last buffer;smr;SS Override
 27834                                  ;	mov	[FIRST_BUFF_ADDR],di	;save first buffer addr;smr;SS Override
 27835                                  ;	ret
 27836                                  ;
 27837                                  ;EndProc GETCURHEAD
 27838                                  
 27839                                  ;Break	<SCANPLACE, PLACEBUF -- PUT A BUFFER BACK IN THE POOL>
 27840                                  ;----------------------------------------------------------------------------
 27841                                  ; Procedure Name : ScanPlace
 27842                                  ; Inputs:
 27843                                  ;	Same as PLACEBUF
 27844                                  ; Function:
 27845                                  ;	Save scan location and call PLACEBUF
 27846                                  ; Outputs:
 27847                                  ;	DS:DI Points to saved scan location
 27848                                  ; All registers, except DS:DI, preserved.
 27849                                  ;----------------------------------------------------------------------------
 27850                                  ;M039: Rewritten to preserve registers.
 27851                                  
 27852                                  SCANPLACE:
 27853                                  	; 31/07/2018 - Retro DOS v3.0
 27854                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5DDCh
 27855 00005DD2 06                      	push	es
 27856 00005DD3 C435                    	les	si,[di]
 27857                                  	;les	si,[DI+BUFFINFO.buf_link]
 27858 00005DD5 E80600                  	call	PLACEBUF
 27859 00005DD8 06                      	push	es
 27860 00005DD9 1F                      	pop	ds
 27861 00005DDA 89F7                    	mov	di,si
 27862 00005DDC 07                      	pop	es
 27863                                  scanplace_retn:
 27864 00005DDD C3                      	retn	
 27865                                  	
 27866                                  	; MSDOS 6.0
 27867                                  ;ScanPlace:
 27868                                  	;push	[di].buf_next		;Save scan location
 27869                                  	;call	PLACEBUF
 27870                                  	;pop	di
 27871                                  	;retn
 27872                                  
 27873                                  ;----------------------------------------------------------------------------
 27874                                  ; Procedure Name : PlaceBuf
 27875                                  ; Input:
 27876                                  ;	DS:DI points to buffer (DS->BUFFINFO array, DI=offset in array)
 27877                                  ; Function:
 27878                                  ;	Remove buffer from queue and re-insert it in proper place.
 27879                                  ; NO registers altered
 27880                                  ;----------------------------------------------------------------------------
 27881                                  
 27882                                  ;procedure   PLACEBUF,NEAR
 27883                                  
 27884                                  ;PLACEBUF:
 27885                                  	; 31/07/2018 - Retro DOS v3.0
 27886                                  
 27887                                  	; MSDOS 6.0
 27888                                  	;push	AX			;Save only regs we modify	;AN000;
 27889                                  	;push	BX							;AN000;
 27890                                  	;push	SI							;AN000;
 27891                                  	;mov	ax, [di].BUF_NEXT
 27892                                  	;mov	bx, word ptr[BufferQueue]	; bx = offset of head of list;smr;SS Override
 27893                                  	;
 27894                                  	;cmp	ax,bx				;Buf = last?		;AN000;
 27895                                  	;je	nret				;Yes, special case	;AN000;
 27896                                  	;cmp	di,bx				;Buf = first?		;AN000;
 27897                                  	;jne	not_first 			;Yes, special case	;AN000;
 27898                                  	;mov	word ptr [BufferQueue],ax	;smr;SS Override
 27899                                  	;jmp	short nret 			;Continue with repositioning;AN000;
 27900                                  ;not_first:
 27901                                  	;mov	SI,[DI].BUF_PREV		;No, SI = prior Buf	;AN000;
 27902                                  	;mov	[SI].BUF_NEXT,AX		; ax has di->buf_next	;AN000;
 27903                                  	;xchg	si, ax
 27904                                  	;mov	[SI].BUF_PREV,AX		;			;AN000;
 27905                                  	;
 27906                                  	;mov	SI,[BX].BUF_PREV		;SI-> last buffer	;AN000;
 27907                                  	;mov	[SI].BUF_NEXT,DI		;Add Buf to end of list ;AN000;
 27908                                  	;mov	[BX].BUF_PREV,DI					;AN000;
 27909                                  	;mov	[DI].BUF_PREV,SI		;Update link in Buf too	;AN000;
 27910                                  	;mov	[DI].BUF_NEXT,BX					;AN000;
 27911                                  ;nret:									;AN000;
 27912                                  	;pop	SI							;AN000;
 27913                                  	;pop	BX							;AN000;
 27914                                  	;pop	AX							;AN000;
 27915                                  	;								;AN000;
 27916                                  	;cmp	[di.buf_ID],-1			; Buffer FREE?		;AN000;
 27917                                          ;jne	pbx                             ; M039: -no, jump.
 27918                                  	;mov	WORD PTR [BufferQueue],di	; M039: -yes, make it LRU.
 27919                                  ;pbx:	
 27920                                  ;	ret								;AN000;
 27921                                  
 27922                                  	; 31/07/2018 - Retro DOS v3.0
 27923                                  
 27924                                  	; MSDOS 3.3
 27925                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5DDCh
 27926                                  
 27927                                  PLACEBUF:
 27928                                  	; 15/03/2018 - Retro DOS v2.0 (MSDOS 2.11)
 27929                                  	
 27930 00005DDE E817B8                          CALL	save_world
 27931 00005DE1 C40D                            LES     CX,[DI]
 27932 00005DE3 83F9FF                          CMP     CX,-1           	; Buf is LAST?
 27933 00005DE6 744B                            JZ      SHORT NRET		; Buffer already last
 27934 00005DE8 8CC5                            MOV     BP,ES           	; Pointsave = Buf.nextbuf
 27935 00005DEA 1E                              PUSH    DS
 27936 00005DEB 07                              POP     ES              	; Buf is ES:DI
 27937                                  	; 15/03/2018
 27938 00005DEC 36C536[3800]                    LDS     SI,[SS:BUFFHEAD] 	; Curbuf = HEAD
 27939 00005DF1 E88600                          CALL    POINTCOMP       	; Buf == HEAD?
 27940 00005DF4 750C                            JNZ     SHORT BUFLOOP
 27941 00005DF6 36890E[3800]                    MOV     [SS:BUFFHEAD],CX
 27942 00005DFB 36892E[3A00]                    MOV     [SS:BUFFHEAD+2],BP	; HEAD = Pointsave
 27943 00005E00 EB14                            JMP     SHORT LOOKEND
 27944                                  
 27945                                  BUFLOOP:
 27946                                  	; 31/07/2018
 27947 00005E02 8CD8                    	mov	ax,ds
 27948 00005E04 89F3                    	mov	bx,si
 27949                                  	;lds	si,[SI+BUFFINFO.buf_link]
 27950 00005E06 C534                            LDS     SI,[SI]
 27951 00005E08 E86F00                          CALL    POINTCOMP
 27952 00005E0B 75F5                            jnz	short BUFLOOP
 27953                                  	;
 27954 00005E0D 8ED8                    	mov	ds,ax
 27955 00005E0F 89DE                    	mov	si,bx
 27956 00005E11 890C                    	mov	[SI],cx
 27957                                  	;mov	[SI+BUFFINFO.buf_link],cx   ; If Curbuf.nextbuf == buf
 27958 00005E13 896C02                  	mov	[SI+2],bp
 27959                                  	;mov	[BX+BUFFINFO.buf_link+2],bp ; Curbuf.nextbuf = Pointsave
 27960                                  LOOKEND:
 27961 00005E16 8CD8                    	mov	ax,ds
 27962 00005E18 89F3                    	mov	bx,si
 27963 00005E1A C534                            LDS     SI,[SI]
 27964 00005E1C 83FEFF                          CMP     SI,-1
 27965 00005E1F 75F5                            jnz     short LOOKEND
 27966                                  
 27967                                  GOTHEEND:
 27968 00005E21 8ED8                            mov	ds,ax
 27969 00005E23 893F                    	mov	[BX],di
 27970 00005E25 8C4702                          MOV     [BX+2],ES 		; Curbuf.nextbuf = Buf
 27971 00005E28 26C705FFFF                      MOV     WORD [ES:DI],-1
 27972                                  	;mov	word [ES:DI+BUFFINFO.buf_link],-1
 27973 00005E2D 26C74502FFFF                    MOV     WORD [ES:DI+2],-1 	; Buf is LAST
 27974                                  	;mov	word [ES:DI+BUFFINFO.buf_link+2],-1
 27975                                  NRET:
 27976 00005E33 E8AFB7                          CALL	restore_world
 27977                                  	
 27978                                  	;cmp	byte [di+4],-1
 27979 00005E36 807D04FF                	cmp	byte [DI+BUFFINFO.buf_ID],-1  ; Free buffer ?
 27980 00005E3A 75A1                    	jnz     short scanplace_retn
 27981 00005E3C E80100                  	call    PLACEHEAD
 27982 00005E3F C3                      	retn
 27983                                  
 27984                                  ;EndProc PLACEBUF
 27985                                  
 27986                                  ;M039 - Removed PLACEHEAD.
 27987                                  ;----------------------------------------------------------------------------
 27988                                  ; places buffer at head
 27989                                  ;  NOTE:::::: ASSUMES THAT BUFFER IS CURRENTLY THE LAST
 27990                                  ;	ONE IN THE LIST!!!!!!!
 27991                                  ; BUGBUG ---- this routine can be removed because it has only
 27992                                  ; BUGBUG ---- one instruction. This routine is called from
 27993                                  ; BUGBUG ---- 3 places. ( Size = 3*3+6 = 15 bytes )
 27994                                  ; BUGBUG ---- if coded in line = 3 * 5 = 15 bytes
 27995                                  ; BUGBUG ---- But kept as it is for modularity
 27996                                  ;----------------------------------------------------------------------------
 27997                                  ;procedure   PLACEHEAD,NEAR
 27998                                  ;	mov	word ptr [BufferQueue], di
 27999                                  ;	ret
 28000                                  ;EndProc PLACEHEAD
 28001                                  ;M039
 28002                                  
 28003                                  ;----------------------------------------------------------------------------
 28004                                  ; Procedure Name : PLACEHEAD
 28005                                  ;
 28006                                  ; SAME AS PLACEBUF except places buffer at head
 28007                                  ;----------------------------------------------------------------------------
 28008                                  
 28009                                  	; MSDOS 3.3 (Retro DOS v3.0)
 28010                                  	; 05/09/2018
 28011                                  	; MSDOS 2.11 (Retro DOS v2.0)
 28012                                  PLACEHEAD:
 28013                                  	; 31/07/2018 - Retro DOS v3.0
 28014                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5D4Ah
 28015                                  
 28016 00005E40 E8B5B7                          CALL	save_world
 28017 00005E43 1E                              PUSH	DS
 28018 00005E44 07                              POP	ES
 28019                                  	; 15/03/2018 - Retro DOS v2.0 (MSDOS 2.11)
 28020 00005E45 36C536[3800]                    LDS     SI,[SS:BUFFHEAD]
 28021                                  	; 31/07/2018 - Retro DOS v3.0 (MSDOS 3.3)
 28022 00005E4A E82D00                  	CALL    POINTCOMP
 28023 00005E4D 7427                            JZ      SHORT GOTHEEND2
 28024 00005E4F 268935                  	MOV	[ES:DI],SI
 28025                                  	;mov	[ES:DI+BUFFINFO.buf_link],si
 28026 00005E52 268C5D02                        MOV	[ES:DI+2],DS
 28027                                  	;mov	[ES:DI+BUFFINFO.buf_link+2],ds
 28028 00005E56 36893E[3800]                    MOV	[SS:BUFFHEAD],DI
 28029 00005E5B 368C06[3A00]                    MOV	[SS:BUFFHEAD+2],ES
 28030                                  LOOKEND2:
 28031 00005E60 8CD8                            mov	ax,ds
 28032 00005E62 89F3                    	mov	bx,si
 28033                                  	;lds	si,[SI+BUFFINFO.buf_link]
 28034 00005E64 C534                            LDS     SI,[SI]
 28035 00005E66 E81100                          CALL    POINTCOMP
 28036 00005E69 75F5                            JNZ	SHORT LOOKEND2 ; 05/09/2018
 28037 00005E6B 8ED8                            mov	ds,ax
 28038 00005E6D C707FFFF                	mov	word [bx],-1
 28039                                  	;mov	word [BX+BUFFINFO.buf_link],-1
 28040 00005E71 C74702FFFF              	mov	word [bx+2],-1
 28041                                  	;mov	word [BX+BUFFINFO.buf_link+2],-1
 28042                                  GOTHEEND2:
 28043 00005E76 E86CB7                         	call	restore_world
 28044                                  placehead_retn:
 28045 00005E79 C3                      	retn
 28046                                  
 28047                                  ;Break	<POINTCOMP -- 20 BIT POINTER COMPARE>
 28048                                  ;----------------------------------------------------------------------------
 28049                                  ;
 28050                                  ; Procedure Name : PointComp
 28051                                  ; Inputs:
 28052                                  ;         DS:SI & ES:DI
 28053                                  ; Function:
 28054                                  ;          Checks for ((SI==DI) && (ES==DS))
 28055                                  ;	   Assumes that pointers are normalized for the
 28056                                  ;	   same segment
 28057                                  ;
 28058                                  ; Compare DS:SI to ES:DI (or DS:DI to ES:SI) for equality
 28059                                  ; DO NOT USE FOR < or >
 28060                                  ; No Registers altered
 28061                                  ;
 28062                                  ;----------------------------------------------------------------------------
 28063                                  
 28064                                  POINTCOMP:
 28065                                  	; 31/07/2018 - Retro DOS v3.0
 28066                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5D84h
 28067 00005E7A 39FE                    	CMP	SI,DI
 28068                                  	;jnz	short _ret_label	; return if nz
 28069 00005E7C 75FB                    	jnz	short placehead_retn 
 28070 00005E7E 51                      	PUSH	CX
 28071 00005E7F 52                      	PUSH	DX
 28072 00005E80 8CD9                    	MOV	CX,DS
 28073 00005E82 8CC2                    	MOV	DX,ES
 28074 00005E84 39D1                    	CMP	CX,DX
 28075 00005E86 5A                      	POP	DX
 28076 00005E87 59                      	POP	CX
 28077                                  ;_ret_label:
 28078 00005E88 C3                      	retn
 28079                                  
 28080                                  
 28081                                  ; 01/08/2018 - Retro DOS v3.0
 28082                                  ; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5D93h 
 28083                                  
 28084                                  ;Break	<GETBUFFR, GETBUFFRB -- GET A SECTOR INTO A BUFFER>
 28085                                  
 28086                                  ;**	GetBuffr - Get a non-FAT Sector into a Buffer
 28087                                  ;----------------------------------------------------------------------------
 28088                                  ;	GetBuffr does normal ( non-FAT ) sector buffering
 28089                                  ;	It gets the specified local sector into one of the I/O buffers
 28090                                  ;	and shuffles the queue
 28091                                  ; 
 28092                                  ;	ENTRY	(AL) = 0 means sector must be pre-read
 28093                                  ;		       ELSE no pre-read
 28094                                  ;		(DX) = Desired physical sector number	      (LOW)
 28095                                  ;		HIGH_SECTOR = Desired physical sector number (HIGH)
 28096                                  ;		(ES:BP) = Pointer to drive parameters
 28097                                  ;		ALLOWED set in case of INT 24
 28098                                  ;	EXIT	'C' set if error (user FAIL response to INT24)
 28099                                  ;		'C' clear if OK
 28100                                  ;		CURBUF Points to the Buffer for the sector
 28101                                  ;		    the buffer type bits OF buf_flags = 0, caller must set it
 28102                                  ;	USES	AX, BX, CX, SI, DI, Flags
 28103                                  ;----------------------------------------------------------------------------
 28104                                  
 28105                                  ;**	GetBuffrb - Get a FAT Sector into a Buffer
 28106                                  ;----------------------------------------------------------------------------
 28107                                  ;	GetBuffr reads a sector from the FAT file system's FAT table.
 28108                                  ;	It gets the specified sector into one of the I/O buffers
 28109                                  ;	and shuffles the queue. We need a special entry point so that
 28110                                  ;	we can read the alternate FAT sector if the first read fails, also
 28111                                  ;	so we can mark the buffer as a FAT sector.
 28112                                  ; 
 28113                                  ;	ENTRY	(AL) = 0 means sector must be pre-read
 28114                                  ;		       ELSE no pre-read
 28115                                  ;		(DX) = Desired physical sector number	      (LOW)
 28116                                  ;		(SI) != 0
 28117                                  ;		HIGH_SECTOR = Desired physical sector number (HIGH)
 28118                                  ;		(ES:BP) = Pointer to drive parameters
 28119                                  ;		ALLOWED set in case of INT 24
 28120                                  ;	EXIT	'C' set if error (user FAIL response to INT24)
 28121                                  ;		'C' clear if OK
 28122                                  ;		CUR ddBUF Points to the Buffer for the sector
 28123                                  ;		    the buffer type bits OF buf_flags = 0, caller must set it
 28124                                  ;	USES	AX, BX, CX, SI, DI, Flags
 28125                                  ;----------------------------------------------------------------------------
 28126                                  
 28127                                  GETBUFFR:
 28128 00005E89 31F6                    	XOR	SI,SI
 28129                                  
 28130                                  ;	This entry point is called for FAT buffering with SI != 0
 28131                                  
 28132                                  GETBUFFRB:
 28133 00005E8B A3[2C05]                	MOV	[PREREAD],AX			; save pre-read flag
 28134 00005E8E 268A4600                	mov	al,[ES:BP]
 28135                                  	;MOV	AL,[ES:BP+DPB.DRIVE] ; mov al,[es:bp+0]
 28136 00005E92 C53E[1E00]              	LDS	DI,[LastBuffer]			; Get the recency pointer
 28137                                  	; MSDOS 6.0
 28138                                  ;hkn; SS override
 28139                                  	;MOV	CX,[SS:HIGH_SECTOR]		; F.C. >32mb		;AN000;
 28140                                  
 28141                                  ;	See if this is the buffer that was most recently returned.
 28142                                  ;	A big performance win if it is.
 28143                                  
 28144 00005E96 83FFFF                  	CMP	DI,-1				; Recency pointer valid?
 28145 00005E99 740A                    	je	short getb5			; No
 28146                                  	;cmp	dx,[di+6]
 28147 00005E9B 3B5506                  	CMP	DX,[DI+BUFFINFO.buf_sector]
 28148 00005E9E 7505                    	JNZ	short getb5			; Wrong sector
 28149                                  	
 28150                                  	; MSDOS 6.0
 28151                                  	;CMP	CX,[DI+BUFFINFO.buf_sector+2]	; F.C. >32mb		;AN000;
 28152                                  	;JNZ	short getb5			; F.C. >32mb		;AN000;
 28153                                  	
 28154                                  	;cmp	al,[di+4]
 28155 00005EA0 3A4504                  	CMP	AL,[DI+BUFFINFO.buf_ID]
 28156 00005EA3 7474                    	JZ	getb35				; Just asked for same buffer
 28157                                  
 28158                                  ;	It's not the buffer most recently returned.  See if it's in the
 28159                                  ;	cache.
 28160                                  ;
 28161                                  ;	(cx:dx) = sector #
 28162                                  ;	(al) = drive #
 28163                                  ;	(si) = 0 iff non fat sector, != 0 if FAT sector read
 28164                                  ;	??? list may be incomplete ???
 28165                                  
 28166                                  getb5:	
 28167                                  	; MSDOS 6.0
 28168                                  	;CALL	GETCURHEAD			; get Q Head
 28169                                  	; MSDOS 3.3
 28170 00005EA5 36C53E[3800]            	lds	di,[SS:BUFFHEAD]
 28171                                  getb10:	
 28172                                  	;cmp	dx,[di+6]
 28173 00005EAA 3B5506                  	CMP	DX,[DI+BUFFINFO.buf_sector]
 28174 00005EAD 7505                    	jne	short getb12			; wrong sector lo
 28175                                  	
 28176                                  	; MSDOS 6.0
 28177                                  	;CMP	CX,[DI+BUFFINFO.buf_sector+2]
 28178                                  	;jne	short getb12			; wrong sector hi
 28179                                  	
 28180                                  	;cmp	al,[di+4]
 28181 00005EAF 3A4504                  	CMP	AL,[DI+BUFFINFO.buf_ID]
 28182 00005EB2 7450                    	je	short getb25 ; 05/09/2018	; Found the requested sector
 28183                                  getb12:	
 28184                                  	; MSDOS 6.0
 28185                                  	;mov	DI,[DI+BUFFINFO.BUF_NEXT]
 28186                                  	;cmp	DI,[SS:FIRST_BUFF_ADDR]		; back at the front again?
 28187                                  	;jne	short getb10			; no, continue looking
 28188                                  
 28189                                  	; MSDOS 3.3
 28190                                  	;mov	di,[DI]
 28191                                  	;mov	di,[DI+BUFFINFO.buf_link]
 28192                                  	;
 28193                                  	; 15/08/2018
 28194 00005EB4 C53D                    	lds	di,[di]
 28195                                  	;
 28196 00005EB6 83FFFF                  	cmp	di,-1 ; 0FFFFh
 28197 00005EB9 75EF                    	jne	short getb10
 28198 00005EBB 36C53E[3800]            	lds	di,[SS:BUFFHEAD]		
 28199                                  
 28200                                  ;	The requested sector is not available in the buffers. DS:DI now points
 28201                                  ;	to the first buffer in the Queue. Flush the first buffer & read in the
 28202                                  ;	new sector into it.
 28203                                  ;
 28204                                  ;	BUGBUG - what goes on here? Isn't the first guy the most recently
 28205                                  ;	used guy? Shuld be for fast lookup. If he is, we shouldn't take
 28206                                  ;	him, we should take LRU. And the above lookup shouldn't be
 28207                                  ;	down a chain, but should be hashed.
 28208                                  ;
 28209                                  ;	(DS:DI) = first buffer in the queue
 28210                                  ;	(CX:DX) = sector # we want
 28211                                  ;	(si) = 0 iff non fat sector, != 0 if FAT sector read
 28212                                  
 28213                                  ;hkn; SS override
 28214                                  	;PUSH	cx
 28215 00005EC0 56                      	push	si
 28216 00005EC1 52                      	push	dx
 28217 00005EC2 55                      	push	bp
 28218 00005EC3 06                      	push	es
 28219 00005EC4 E8B900                  	CALL	BUFWRITE			; Write out the dirty buffer
 28220 00005EC7 07                      	pop	es
 28221 00005EC8 5D                      	pop	bp
 28222 00005EC9 5A                      	pop	dx
 28223 00005ECA 5E                      	pop	si
 28224                                  	;POP	word [SS:HIGH_SECTOR]
 28225 00005ECB 7261                    	jc	short getbx			; if got hard error
 28226                                  
 28227                                  	; MSDOS 6.0
 28228                                  	;CALL	SET_RQ_SC_PARMS 		; set parms for secondary cache
 28229                                  
 28230                                  ;	We're ready to read in the buffer, if need be. If the caller
 28231                                  ;	wanted to just *write* the buffer then we'll skip reading it in.
 28232                                  
 28233 00005ECD 30E4                    	XOR	AH,AH				; initial flags
 28234                                  ;hkn; SS override
 28235                                  	;test	byte [ss:PREREAD],0FFh
 28236                                  	;jnz	short getb20
 28237 00005ECF 363826[2C05]            	CMP	[SS:PREREAD],ah ; 0		; am to Read in the new sector?
 28238 00005ED4 751E                    	JNZ	short getb20			; no, we're done
 28239 00005ED6 8D5D10                  	LEA	BX,[DI+BUFINSIZ] ; [DI+16]	; (ds:bx) = data address
 28240 00005ED9 B90100                  	MOV	CX,1
 28241 00005EDC 56                      	push	si
 28242 00005EDD 57                      	push	di
 28243 00005EDE 52                      	push	dx
 28244                                  	; MSDOS 6.0
 28245                                  	;push	es
 28246                                  ; Note:  As far as I can tell, all disk reads into buffers go through
 28247                                  ;	 this point.  -mrw 10/88
 28248                                  	;cmp	BuffInHMA, 0		; is buffers in HMA?
 28249                                  	;jz	@f
 28250                                  	;push	ds
 28251                                  	;push	bx
 28252                                  	;lds	bx, dword ptr LoMemBuff	; Then let's read it into scratch buff
 28253                                  ;@@:
 28254                                  ;M039: Eliminated redundant HMA code.
 28255                                  
 28256                                  	; MSDOS 3.3 (& MSDOS 6.0)
 28257 00005EDF 09F6                    	OR	SI,SI			; FAT sector ?
 28258 00005EE1 7407                    	JZ	short getb15		
 28259                                  
 28260 00005EE3 E863E2                  	call	FATSECRD
 28261                                  	;mov	ah,2
 28262 00005EE6 B402                    	MOV	AH,buf_isFAT		; Set buf_flags
 28263                                  
 28264 00005EE8 EB05                    	JMP	SHORT getb17		; Buffer is marked free if read barfs
 28265                                  
 28266                                  getb15:
 28267 00005EEA E883E2                  	call	DREAD			; Buffer is marked free if read barfs
 28268 00005EED B400                    	MOV	AH,0			; Set buf_flags to no type, DO NOT XOR!
 28269                                  getb17:	
 28270                                  	; MSDOS 6.0							  ;I001
 28271                                  	;pushf								  ;I001
 28272                                  	;cmp	byte [SS:BuffInHMA],0	; did we read into scratch buff ? ;I001
 28273                                  	;jz	short not_in_hma	; no				  ;I001
 28274                                  	;mov	cx,[ES:BP+DPB.SECTOR_SIZE]				  ;I001
 28275                                  	;shr	cx,1							  ;I001
 28276                                  	;popf				; Retreive possible CY from DREAD ;I001
 28277                                  	;mov	si,bx							  ;I001
 28278                                  	;pop	di							  ;I001
 28279                                  	;pop	es							  ;I001
 28280                                  	;cld								  ;I001
 28281                                  	;pushf				; Preserve possible CY from DREAD ;I001
 28282                                  	;rep	movsw			; move the contents of scratch buf;I001
 28283                                  	;push	es							  ;I001
 28284                                  	;pop	ds							  ;I001
 28285                                  ;not_in_hma:								  ;I001
 28286                                  	;popf							 	  ;I001
 28287                                  	;pop	es
 28288                                  	;
 28289 00005EEF 5A                      	pop	dx
 28290 00005EF0 5F                      	pop	di
 28291 00005EF1 5E                      	pop	si
 28292 00005EF2 723A                    	JC	short getbx
 28293                                  
 28294                                  ;	The buffer has the data setup in it (if we were to read)
 28295                                  ;	Setup the various buffer fields
 28296                                  ;
 28297                                  ;	(ds:di) = buffer address
 28298                                  ;	(es:bp) = DPB address
 28299                                  ;	(HIGH_SECTOR:DX) = sector #
 28300                                  ;	(ah) = BUF_FLAGS value
 28301                                  ;	(si) = 0 if non fat sector, != 0 if FAT sector read
 28302                                  
 28303                                  ;hkn; SS override
 28304                                  getb20:	; MSDOS 6.0
 28305                                  	;MOV	CX,[SS:HIGH_SECTOR]
 28306                                  	;MOV	WORD [DI+BUFFINFO.buf_sector+2],CX
 28307                                  	; MSDOS 3.3 (& MSDOS 6.0)	
 28308                                   	;mov	[di+6],dx
 28309 00005EF4 895506                  	MOV	[DI+BUFFINFO.buf_sector],DX
 28310                                  	;mov	[di+0Ah],bp
 28311 00005EF7 896D0A                  	MOV	[DI+BUFFINFO.buf_DPB],BP
 28312                                  	;mov	[di+0Ch], es
 28313 00005EFA 8C450C                  	MOV	[DI+BUFFINFO.buf_DPB+2],ES
 28314 00005EFD 268A4600                	mov	al,[es:bp]
 28315                                  	;mov	al,[es:bp+0]
 28316                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 28317                                  	;mov	[di+4],ax
 28318 00005F01 894504                  	MOV	[DI+BUFFINFO.buf_ID],AX		; Set ID and Flags
 28319                                  getb25:	
 28320                                  	; MSDOS 6.0
 28321                                  	;MOV	[DI+BUFFINFO.buf_wrtcnt],1	; Default to not a FAT sector ;AC000;
 28322                                  	;XOR	AX,AX
 28323                                  
 28324                                  	; MSDOS 3.3
 28325 00005F04 B80100                  	mov     ax,1
 28326                                  
 28327 00005F07 09F6                    	OR	SI,SI				; FAT sector ?
 28328 00005F09 7408                    	JZ	short getb30
 28329                                  
 28330                                  	;mov	al,[es:bp+8]
 28331 00005F0B 268A4608                	MOV	AL,[ES:BP+DPB.FAT_COUNT]	; update number of copies of
 28332                                  	; MSDOS 6.0
 28333                                  	;MOV	[DI+BUFFINFO.buf_wrtcnt],AL	;  this sector present on disk
 28334                                  	;MOV	AX,[ES:BP+DPB.FAT_SIZE]		; offset of identical FAT
 28335                                  						;  sectors
 28336                                  	; MSDOS 3.3
 28337                                  	;mov	ah,[es:bp+0Fh]
 28338 00005F0F 268A660F                	MOV	AH,[ES:BP+DPB.FAT_SIZE]
 28339                                  
 28340                                  ;	BUGBUG - dos 6 can clean this up by not setting wrtcntinc unless wrtcnt
 28341                                  ;		is set
 28342                                  
 28343                                  getb30:	
 28344                                  	; MSDOS 6.0
 28345                                  	;MOV	[DI+BUFFINFO.buf_wrtcntinc],AX
 28346                                  
 28347                                  	; MSDOS 3.3
 28348                                  	;mov	[di+8],ax ; 15/08/2018	
 28349 00005F13 894508                  	MOV	[DI+BUFFINFO.buf_wrtcnt],AX
 28350                                  
 28351 00005F16 E8C5FE                  	CALL	PLACEBUF
 28352                                  
 28353                                  ;hkn; SS override for next 4
 28354                                  getb35: 
 28355 00005F19 368C1E[7605]            	MOV	[SS:CURBUF+2],DS
 28356 00005F1E 368C1E[2000]            	MOV	[SS:LastBuffer+2],DS
 28357 00005F23 36893E[7405]            	MOV	[SS:CURBUF],DI
 28358 00005F28 36893E[1E00]            	MOV	[SS:LastBuffer],DI
 28359 00005F2D F8                      	CLC
 28360                                  
 28361                                  ;	Return with 'C' set appropriately
 28362                                  ;
 28363                                  ;	(dx) = caller's original value
 28364                                  
 28365                                  getbx:	
 28366 00005F2E 16                      	push	ss
 28367 00005F2F 1F                      	pop	ds
 28368 00005F30 C3                      	retn
 28369                                  
 28370                                  
 28371                                  
 28372                                  ;Break	<FLUSHBUF -- WRITE OUT DIRTY BUFFERS>
 28373                                  ;----------------------------------------------------------------------------
 28374                                  ; Input:
 28375                                  ;	DS = DOSGROUP
 28376                                  ;	AL = Physical unit number local buffers only
 28377                                  ;	   = -1 for all units and all remote buffers
 28378                                  ; Function:
 28379                                  ;	Write out all dirty buffers for unit, and flag them as clean
 28380                                  ;	Carry set if error (user FAILed to I 24)
 28381                                  ;	    Flush operation completed.
 28382                                  ; DS Preserved, all others destroyed (ES too)
 28383                                  ;----------------------------------------------------------------------------
 28384                                  
 28385                                  FLUSHBUF:
 28386                                  	; MSDOS 6.0
 28387                                  	;call	GetCurHead
 28388                                  	;TEST	word [DOS34_FLAG],FROM_DISK_RESET ; from disk reset ? ;hkn;
 28389                                  	;jnz	short scan_buf_queue
 28390                                  	;cmp	word [DirtyBufferCount], 0			;hkn;
 28391                                  	;je	short end_scan
 28392                                  	
 28393                                  	; MSDOS 3.3
 28394                                  	;mov	ah,-1 ; 01/08/2018 - Retro DOS v3.0
 28395 00005F31 C53E[3800]              	lds	di,[BUFFHEAD]
 28396                                  scan_buf_queue:
 28397 00005F35 E81F00                  	call	CHECKFLUSH
 28398                                  	;push	ax  ; MSDOS 3.3
 28399                                  	; MSDOS 6.0
 28400 00005F38 8A6504                  	mov	ah,[DI+BUFFINFO.buf_ID]
 28401 00005F3B 363826[D002]            	cmp	[SS:WPERR],ah					;hkn;
 28402                                  	;je	short free_the_buf
 28403                                  	;TEST	word [DOS34_FLAG],FROM_DISK_RESET ; from disk reset ? ;hkn;
 28404                                  	;jz	short dont_free_the_buf
 28405                                  	; MSDOS 3.3
 28406                                  	;mov	al,[di+4]
 28407                                  	;mov	al,[DI+BUFFINFO.buf_ID]
 28408                                  	;cmp	[SS:WPERR],al					;hkn;
 28409                                  	; 15/08/2018
 28410 00005F40 7505                    	jne	short dont_free_the_buf	
 28411                                  free_the_buf:
 28412                                  	; MSDOS 6.0 (& MSDOS 3.3)
 28413 00005F42 C74504FF00              	mov	word [DI+BUFFINFO.buf_ID],00FFh
 28414                                  dont_free_the_buf:
 28415                                  	;pop	ax  ; MSDOS 3.3 	   	
 28416                                  	
 28417                                  	; MSDOS 6.0
 28418                                  	;mov	di,[DI+BUFFINFO.buf_next] ; .buf_link
 28419                                  	;cmp	di,[SS:FIRST_BUFF_ADDR]				;hkn;
 28420                                  	;jne	short scan_buf_queue
 28421                                  
 28422                                  	; MSDOS 3.3
 28423                                  	;mov	di,[DI]
 28424                                  	;mov	di,[DI+BUFFINFO.buf_link] ; .buf_next
 28425                                  	;
 28426                                  	; 15/08/2018
 28427 00005F47 C53D                    	lds	di,[di]
 28428                                  	;
 28429 00005F49 83FFFF                  	cmp	di,-1 ; 0FFFFh
 28430 00005F4C 75E7                    	jnz	short scan_buf_queue 
 28431                                  
 28432                                  end_scan:
 28433 00005F4E 16                      	push	ss
 28434 00005F4F 1F                      	pop	ds
 28435                                  	; 01/08/2018 - Retro DOS v3.0
 28436                                  	;cmp	byte [FAILERR],0
 28437                                  	;jne	short bad_flush
 28438                                  	;retn
 28439                                  ;bad_flush:
 28440                                  	;stc
 28441                                  	;retn
 28442                                  	; 01/08/2018 - Retro DOS v3.0
 28443 00005F50 803E[F602]01            	cmp	byte [FAILERR],1
 28444 00005F55 F5                      	cmc
 28445                                  flushbuf_retn:
 28446 00005F56 C3                      	retn
 28447                                  
 28448                                  ;----------------------------------------------------------------------------
 28449                                  ;
 28450                                  ; Procedure Name : CHECKFLUSH
 28451                                  ;
 28452                                  ; Inputs : AL - Drive number, -1 means do not check for drive
 28453                                  ;	   DS:DI - pointer to buffer
 28454                                  ;
 28455                                  ; Function : Write out a buffer if it is dirty
 28456                                  ;
 28457                                  ; Carry set if problem (currently user FAILed to I 24)
 28458                                  ;
 28459                                  ;----------------------------------------------------------------------------
 28460                                  
 28461                                  CHECKFLUSH:
 28462                                  	; MSDOS 6.0
 28463 00005F57 B4FF                    	mov	ah, -1 ; 01/08/2018 Retro DOS v3.0
 28464                                  	;cmp	[di+4],ah
 28465 00005F59 386504                  	CMP	[DI+BUFFINFO.buf_ID],AH
 28466 00005F5C 74F8                    	jz	short flushbuf_retn	; Skip free buffer, carry clear
 28467 00005F5E 38C4                    	CMP	AH,AL			; 
 28468 00005F60 7406                    	JZ	short DOBUFFER		; do this buffer
 28469                                  	;cmp	al,[di+4]
 28470 00005F62 3A4504                  	CMP	AL,[DI+BUFFINFO.buf_ID]
 28471 00005F65 F8                      	CLC
 28472 00005F66 75EE                    	jnz	short flushbuf_retn	; Buffer not for this unit or SFT
 28473                                  DOBUFFER:
 28474                                  	;test	byte [di+5],40h
 28475 00005F68 F6450540                	TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty
 28476 00005F6C 74E8                    	jz	short flushbuf_retn	; Buffer not dirty, carry clear by TEST
 28477 00005F6E 50                      	PUSH	AX
 28478                                  	;push	word [di+4]
 28479 00005F6F FF7504                  	PUSH	WORD [DI+BUFFINFO.buf_ID]
 28480 00005F72 E80B00                  	CALL	BUFWRITE
 28481 00005F75 58                      	POP	AX
 28482 00005F76 7206                    	JC	short LEAVE_BUF		; Leave buffer marked free (lost).
 28483                                  	;and	ah,0BFh
 28484 00005F78 80E4BF                  	AND	AH,~buf_dirty		; Buffer is clean, clears carry
 28485                                  	;mov	[di+4],ax
 28486 00005F7B 894504                  	MOV	[DI+BUFFINFO.buf_ID],AX
 28487                                  LEAVE_BUF:
 28488 00005F7E 58                      	POP	AX			; Search info
 28489                                  checkflush_retn:
 28490 00005F7F C3                      	retn
 28491                                  
 28492                                  ;Break	<BUFWRITE -- WRITE OUT A BUFFER IF DIRTY>
 28493                                  ;----------------------------------------------------------------------------
 28494                                  ;
 28495                                  ;	BufWrite writes a buffer to the disk, iff it's dirty.
 28496                                  ;
 28497                                  ;	ENTRY	DS:DI Points to the buffer
 28498                                  ;
 28499                                  ;	EXIT	Buffer marked free
 28500                                  ;		Carry set if error (currently user FAILed to I 24)
 28501                                  ;
 28502                                  ;	USES	All buf DS:DI
 28503                                  ;		HIGH_SECTOR
 28504                                  ;----------------------------------------------------------------------------
 28505                                  
 28506                                  BUFWRITE:
 28507                                  	; 10/09/2018
 28508                                  	; 01/08/2018 - Retro DOS v3.0
 28509                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5E94h
 28510 00005F80 B8FF00                  	MOV	AX,00FFH
 28511                                  	;xchg	ax,[di+4]
 28512 00005F83 874504                  	XCHG	AX,[DI+BUFFINFO.buf_ID]	; Free, in case write barfs
 28513 00005F86 3CFF                    	CMP	AL,0FFH
 28514 00005F88 74F5                    	jz      short checkflush_retn	; Buffer is free, carry clear.
 28515                                  	;test	ah,40h
 28516 00005F8A F6C440                  	test	AH,buf_dirty
 28517 00005F8D 74F0                    	jz      short checkflush_retn	; Buffer is clean, carry clear.
 28518                                  	; MSDOS 6.0
 28519                                  	;call	DEC_DIRTY_COUNT 	; LB. decrement dirty count
 28520                                  
 28521                                  ;hkn; SS override
 28522 00005F8F 363A06[D002]            	CMP	AL,[SS:WPERR]
 28523 00005F94 74E9                    	jz      short checkflush_retn	; If in WP error zap buffer
 28524                                  
 28525                                  ;hkn; SS override
 28526                                  	; MSDOS 6.0
 28527                                  	;MOV	[SS:SC_DRIVE],AL	;LB. set it for invalidation ;AN000;
 28528                                  	
 28529                                  	;les	bp,[di+10]
 28530 00005F96 C46D0A                  	LES	BP,[DI+BUFFINFO.buf_DPB]
 28531                                  	;lea	bx,[di+16]
 28532 00005F99 8D5D10                  	LEA	BX,[DI+BUFINSIZ]	; Point at buffer
 28533                                  	;mov	dx,[di+6]
 28534 00005F9C 8B5506                  	MOV	DX,[DI+BUFFINFO.buf_sector] ;F.C. >32mb		;AN000;
 28535                                  	; MSDOS 6.0
 28536                                  	;MOV	CX,[DI+BUFFINFO.buf_sector+2] ;F.C. >32mb	;AN000;
 28537                                  
 28538                                  ;hkn; SS override
 28539                                  	;MOV	[SS:HIGH_SECTOR],CX	;F.C. >32mb		;AN000;
 28540                                  	;MOV	CL,[DI+BUFFINFO.buf_wrtcnt] ;>32mb		;AC000;
 28541                                  	; MSDOS 3.3
 28542                                  	; mov	cx,[DI+8]
 28543 00005F9F 8B4D08                  	mov	cx,[DI+BUFFINFO.buf_wrtcnt]
 28544 00005FA2 88E8                    	MOV	AL,CH			; [DI+BUFFINFO.buf_wrtcntinc]
 28545 00005FA4 30ED                    	XOR	CH,CH
 28546                                  	;mov	ah,ch ; MSDOS 3.3
 28547                                  
 28548                                  ;hkn; SS override for ALLOWED
 28549                                  	;mov	byte [SS:ALLOWED],18h
 28550 00005FA6 36C606[F702]18          	MOV	byte [SS:ALLOWED],Allowed_RETRY+Allowed_FAIL
 28551                                  	;test	byte [di+5],8
 28552                                  	;test	ah,8
 28553 00005FAC F6C408                  	test	AH,buf_isDATA
 28554 00005FAF 7406                    	JZ	short NO_IGNORE
 28555                                  	;or	byte [SS:ALLOWED],20h
 28556 00005FB1 36800E[F702]20          	OR	byte [SS:ALLOWED],Allowed_IGNORE
 28557                                  NO_IGNORE:
 28558 00005FB7 30E4                    	xor	ah,ah ; 10/09/2018 (MSDOS 3.3, Retro DOS v3.0)
 28559                                  	; MSDOS 6.0
 28560                                  	;MOV	AX,[DI+BUFFINFO.buf_wrtcntinc]	;>32mb		;AC000;
 28561                                  
 28562 00005FB9 57                      	PUSH	DI		; Save buffer pointer
 28563 00005FBA 31FF                    	XOR	DI,DI		; Indicate failure
 28564                                  
 28565                                  	;push	ds
 28566                                  	;push	bx
 28567                                  WRTAGAIN:
 28568 00005FBC 57                      	push	di
 28569 00005FBD 51                      	push	cx
 28570 00005FBE 50                      	push	ax
 28571 00005FBF B90100                  	MOV	CX,1
 28572 00005FC2 53                      	push	bx
 28573 00005FC3 52                      	push	dx
 28574 00005FC4 1E                      	push	ds
 28575                                  
 28576                                  ; Note:  As far as I can tell, all disk reads into buffers go through this point.  -mrw 10/88
 28577                                  
 28578                                  	; MSDOS 6.0
 28579                                  	;cmp	byte [BuffInHMA], 0
 28580                                  	;jz	short NBUFFINHMA
 28581                                  	;push	cx
 28582                                  	;push	es
 28583                                  	;mov	si,bx
 28584                                  	;mov	cx,[es:bp+DPB.SECTOR_SIZE]
 28585                                  	;shr	cx,1
 28586                                  	;les	di,[LoMemBuff]
 28587                                  	;mov	bx,di
 28588                                  	;cld
 28589                                  	;rep	movsw
 28590                                  	;push	es
 28591                                  	;pop	ds
 28592                                  	;pop	es
 28593                                  	;pop	cx
 28594                                  ;NBUFFINHMA:
 28595 00005FC5 E807E2                  	call	DWRITE		; Write out the dirty buffer
 28596 00005FC8 1F                      	pop	ds
 28597 00005FC9 5A                      	pop	dx
 28598 00005FCA 5B                      	pop	bx
 28599 00005FCB 58                      	pop	ax
 28600 00005FCC 59                      	pop	cx
 28601 00005FCD 5F                      	pop	di
 28602 00005FCE 7201                    	JC	short NOSET
 28603 00005FD0 47                      	INC	DI		; If at least ONE write succeedes, the operation
 28604                                  NOSET:				;	succeedes.
 28605 00005FD1 01C2                    	ADD	DX,AX
 28606 00005FD3 E2E7                    	LOOP	WRTAGAIN
 28607                                  	;pop	bx
 28608                                  	;pop	ds
 28609 00005FD5 09FF                    	OR	DI,DI		; Clears carry
 28610 00005FD7 7501                    	JNZ	short BWROK	; At least one write worked
 28611 00005FD9 F9                      	STC			; DI never got INCed, all writes failed.
 28612                                  BWROK:	
 28613 00005FDA 5F                      	POP	DI
 28614 00005FDB C3                      	retn
 28615                                  
 28616                                  ;**	Set_RQ_SC_Parms - Set Secondary Cache Parameters
 28617                                  ;----------------------------------------------------------------------------
 28618                                  ;	Set_RQ_SC_Parms sets the sector size and drive number value
 28619                                  ;	for the secondary cache. This updates SC_SECTOR_SIZE &
 28620                                  ;	SC_DRIVE even if SC is disabled to save the testing
 28621                                  ;	code and time
 28622                                  ;
 28623                                  ;	ENTRY	ES:BP = drive parameter block
 28624                                  ;
 28625                                  ;	EXIT	[SC_SECTOR_SIZE]= drive sector size
 28626                                  ;		[SC_DRIVE]= drive #
 28627                                  ;
 28628                                  ;	USES	Flags
 28629                                  ;----------------------------------------------------------------------------
 28630                                  
 28631                                  ;procedure   SET_RQ_SC_PARMS,NEAR
 28632                                  ;
 28633                                  ;;hkn; SS override for all variables used in this procedure.
 28634                                  ;
 28635                                  ;	SAVE	<ax>
 28636                                  ;
 28637                                  ;	MOV	ax,ES:[BP].DPB_SECTOR_SIZE	; save sector size
 28638                                  ;	MOV	SC_SECTOR_SIZE,ax
 28639                                  ;
 28640                                  ;	MOV	al,ES:[BP].DPB_DRIVE		; save drive #
 28641                                  ;	MOV	SC_DRIVE,al
 28642                                  ;
 28643                                  ;	RESTORE <ax>
 28644                                  ;
 28645                                  ;srspx:	return
 28646                                  ;
 28647                                  ;EndProc SET_RQ_SC_PARMS 			;LB. return
 28648                                  
 28649                                  ;Break	<INC_DIRTY_COUNT-increment dirty count>
 28650                                  ;----------------------------------------------------------------------------
 28651                                  ; Input:
 28652                                  ;	none
 28653                                  ; Function:
 28654                                  ;	increment dirty buffers count
 28655                                  ; Output:
 28656                                  ;	dirty buffers count is incremented
 28657                                  ;
 28658                                  ; All registers preserved
 28659                                  ;----------------------------------------------------------------------------
 28660                                  
 28661                                  ;procedure   INC_DIRTY_COUNT,NEAR
 28662                                  ;
 28663                                  ;; BUGBUG  ---- remove this routine
 28664                                  ;; BUGBUG ---- only one instruction is needed   (speed win, space loose)
 28665                                  ;	inc	[DirtyBufferCount]			;hkn;
 28666                                  ;	ret
 28667                                  ;EndProc INC_DIRTY_COUNT
 28668                                  
 28669                                  ;Break	<DEC_DIRTY_COUNT-decrement dirty count>
 28670                                  ;----------------------------------------------------------------------------
 28671                                  ; Input:
 28672                                  ;	none
 28673                                  ; Function:
 28674                                  ;	decrement dirty buffers count
 28675                                  ; Output:
 28676                                  ;	dirty buffers count is decremented
 28677                                  ;
 28678                                  ; All registers preserved
 28679                                  ;----------------------------------------------------------------------------
 28680                                  
 28681                                  ;procedure   DEC_DIRTY_COUNT,NEAR
 28682                                  ;	cmp	[DirtyBufferCount], 0	;hkn;
 28683                                  ;	jz	ddcx			; BUGBUG - shouldn't it be an
 28684                                  ;	dec	[DirtyBufferCount]	; error condition to underflow here? ;hkn;
 28685                                  ;ddcx:	ret
 28686                                  ;
 28687                                  ;EndProc DEC_DIRTY_COUNT
 28688                                  
 28689                                  ;============================================================================
 28690                                  ; MSPROC.ASM, MSDOS 6.0, 1991
 28691                                  ;============================================================================
 28692                                  ; 02/08/2018 - Retro DOS v3.0
 28693                                  
 28694                                  ; (15/04/2018 - RetrO DOS v2.0, MSDOS 2.11 - PROC.ASM - 1983)
 28695                                  
 28696                                  ; Pseudo EXEC system call for DOS
 28697                                  
 28698                                  ;	TITLE	MSPROC - process maintenance
 28699                                  ;	NAME	MSPROC
 28700                                  
 28701                                  ; =========================================================================
 28702                                  ;**	Process related system calls and low level routines for DOS 2.X.
 28703                                  ;	I/O specs are defined in DISPATCH.
 28704                                  ;
 28705                                  ;	$WAIT
 28706                                  ;	$EXEC
 28707                                  ;	$Keep_process
 28708                                  ;	Stay_resident
 28709                                  ;	$EXIT
 28710                                  ;	$ABORT
 28711                                  ;	abort_inner
 28712                                  ;
 28713                                  ;	Modification history:
 28714                                  ;
 28715                                  ;		Created: ARR 30 March 1983
 28716                                  ;		AN000	version 4.0 jan. 1988
 28717                                  ;		A007	PTM 3957 - fake vesrion for IBMCACHE.COM
 28718                                  ;		A008	PTM 4070 - fake version for MS WINDOWS
 28719                                  ;
 28720                                  ;		M000	added support for loading programs into UMBs 7/9/90
 28721                                  ;
 28722                                  ;		M004 - MS PASCAL 3.2 support. Please see under tag M003 in 
 28723                                  ;		       dossym.inc. 7/30/90
 28724                                  ;		M005 - Support for EXE programs with out STACK segment and 
 28725                                  ;		       with resident size < 64K - 256 bytes. A 256 byte 
 28726                                  ;		       stack is provided at the end of the program. Note that
 28727                                  ;		       only SP is changed.
 28728                                  ;		M020 - Fix for Rational bug for details see exepatch.asm
 28729                                  ;
 28730                                  ;		M028 - 4b04 implementation
 28731                                  ;
 28732                                  ;		M029 - Support for EXEs without stack rewritten. If EXE is
 28733                                  ;			in memory block >= 64K, sp = 0. If memory block
 28734                                  ;			obtained is <64K, point sp at the end of the memory
 28735                                  ;			block. For EXEs smaller than 64K, 256 bytes are still
 28736                                  ;			added for a stack segment which may be needed if it
 28737                                  ;			is loaded in low memory situations.
 28738                                  ;
 28739                                  ;		M030 - Fixing bug in EXEPACPATCH & changing 4b04 to 4b05
 28740                                  ;
 28741                                  ;		M040 - Bug #3052. The environment sizing code would flag a
 28742                                  ;			a bad environment if it reached 32767 bytes. Changed
 28743                                  ;			to allow 32768 bytes of environment.
 28744                                  ;
 28745                                  ;		M047 - Release the allocated UMB when we failed to load a 
 28746                                  ;		       COM file high. Also ensure that if the biggest block
 28747                                  ;		       into which we load the com file is less than 64K then
 28748                                  ;		       we provide atleast 256 bytes of stack to the user.
 28749                                  ;
 28750                                  ;		M050 - Made Lie table search CASE insensitive
 28751                                  ;
 28752                                  ;		M060 - Removed special version table from the kernal and
 28753                                  ;                      put it in a device drive which puts the address
 28754                                  ;                      in the DOS DATA area location UU_IFS_DOS_CALL
 28755                                  ;		       as a DWORD.
 28756                                  ;
 28757                                  ;		M063 - Modified UMB support. If the HIGH_ONLY bit is set on
 28758                                  ;		       entry do not try to load low if there is no space in
 28759                                  ;		       UMBs.
 28760                                  ;
 28761                                  ;		M068 - Support for copy protect apps. Call ChkCopyProt to 
 28762                                  ;		       set a20off_count. Set bit EXECA20BIT in DOS_FLAG. Also
 28763                                  ;		       change return address to LeaveDos if AL=5.
 28764                                  ;
 28765                                  ;               20-Jul-1992 bens    Added ifdef RESTRICTED_BUILD code that
 28766                                  ;                      controls building a version of MSDOS.SYS that only
 28767                                  ;                      runs programs from a fixed list (defined in the
 28768                                  ;                      file RESTRICT.INC).  Search for "RESTRICTED_BUILD"
 28769                                  ;                      for details.  This feature is used to build a
 28770                                  ;                      "special" version of DOS that can be handed out to
 28771                                  ;                      OEM/ISV customers as part of a "service" disk.
 28772                                  ;
 28773                                  ; =========================================================================
 28774                                  
 28775                                  ;SAVEXIT 	EQU	10
 28776                                  
 28777                                  ;BREAK	<$WAIT - return previous process error code>
 28778                                  ; =========================================================================
 28779                                  ;	$WAIT - Return previous process error code.
 28780                                  ;
 28781                                  ;	Assembler usage:
 28782                                  ;
 28783                                  ;	    MOV     AH, WaitProcess
 28784                                  ;	    INT     int_command
 28785                                  ;
 28786                                  ;	ENTRY	none
 28787                                  ;	EXIT	(ax) = exit code
 28788                                  ;	USES	all
 28789                                  ; =========================================================================
 28790                                  
 28791                                  _$WAIT:
 28792                                  	; 02/08/2018 - Retro DOS v3.0
 28793                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5E1h
 28794                                  
 28795 00005FDC 31C0                    	xor	AX,AX
 28796 00005FDE 368706[E202]            	xchg	AX,[ss:exit_code]
 28797 00005FE3 E917B7                  	jmp	SYS_RET_OK
 28798                                  
 28799                                  ; =========================================================================
 28800                                  ;BREAK <$exec - load/go a program>
 28801                                  ;	EXEC.ASM - EXEC System Call
 28802                                  ;
 28803                                  ;
 28804                                  ; Assembler usage:
 28805                                  ;	    lds     DX, Name
 28806                                  ;	    les     BX, Blk
 28807                                  ;	    mov     AH, Exec
 28808                                  ;	    mov     AL, FUNC
 28809                                  ;	    int     INT_COMMAND
 28810                                  ;
 28811                                  ;	AL  Function
 28812                                  ;	--  --------
 28813                                  ;	 0  Load and execute the program.
 28814                                  ;	 1  Load, create  the  program	header	but  do  not
 28815                                  ;	    begin execution.
 28816                                  ;	 3  Load overlay. No header created.
 28817                                  ;
 28818                                  ;	    AL = 0 -> load/execute program
 28819                                  ;
 28820                                  ;	    +---------------------------+
 28821                                  ;	    | WORD segment address of	|
 28822                                  ;	    | environment.		|
 28823                                  ;	    +---------------------------+
 28824                                  ;	    | DWORD pointer to ASCIZ	|
 28825                                  ;	    | command line at 80h	|
 28826                                  ;	    +---------------------------+
 28827                                  ;	    | DWORD pointer to default	|
 28828                                  ;	    | FCB to be passed at 5Ch	|
 28829                                  ;	    +---------------------------+
 28830                                  ;	    | DWORD pointer to default	|
 28831                                  ;	    | FCB to be passed at 6Ch	|
 28832                                  ;	    +---------------------------+
 28833                                  ;
 28834                                  ;	    AL = 1 -> load program
 28835                                  ;
 28836                                  ;	    +---------------------------+
 28837                                  ;	    | WORD segment address of	|
 28838                                  ;	    | environment.		|
 28839                                  ;	    +---------------------------+
 28840                                  ;	    | DWORD pointer to ASCIZ	|
 28841                                  ;	    | command line at 80h	|
 28842                                  ;	    +---------------------------+
 28843                                  ;	    | DWORD pointer to default	|
 28844                                  ;	    | FCB to be passed at 5Ch	|
 28845                                  ;	    +---------------------------+
 28846                                  ;	    | DWORD pointer to default	|
 28847                                  ;	    | FCB to be passed at 6Ch	|
 28848                                  ;	    +---------------------------+
 28849                                  ;	    | DWORD returned value of	|
 28850                                  ;	    | CS:IP			|
 28851                                  ;	    +---------------------------+
 28852                                  ;	    | DWORD returned value of	|
 28853                                  ;	    | SS:IP			|
 28854                                  ;	    +---------------------------+
 28855                                  ;
 28856                                  ;	    AL = 3 -> load overlay
 28857                                  ;
 28858                                  ;	    +---------------------------+
 28859                                  ;	    | WORD segment address where|
 28860                                  ;	    | file will be loaded.	|
 28861                                  ;	    +---------------------------+
 28862                                  ;	    | WORD relocation factor to |
 28863                                  ;	    | be applied to the image.	|
 28864                                  ;	    +---------------------------+
 28865                                  ;
 28866                                  ; Returns:
 28867                                  ;	    AX = error_invalid_function
 28868                                  ;	       = error_bad_format
 28869                                  ;	       = error_bad_environment
 28870                                  ;	       = error_not_enough_memory
 28871                                  ;	       = error_file_not_found
 28872                                  ; =========================================================================
 28873                                  ;
 28874                                  ;   Revision history:
 28875                                  ;
 28876                                  ;	 A000	version 4.00  Jan. 1988
 28877                                  ;
 28878                                  ; =========================================================================
 28879                                  
 28880                                  Exec_Internal_Buffer		EQU	OPENBUF
 28881                                  Exec_Internal_Buffer_Size	EQU	(128+128+53+curdirLen)
 28882                                  
 28883                                  ; =========================================================================
 28884                                  
 28885                                  ;IF1		; warning message on buffers
 28886                                  ;%out	Please make sure that the following are contiguous and of the
 28887                                  ;%out	following sizes:
 28888                                  ;%out
 28889                                  ;%out	OpenBuf     128
 28890                                  ;%out	RenBuf	    128
 28891                                  ;%out	SearchBuf    53
 28892                                  ;%out	DummyCDS    curdirLen
 28893                                  ;ENDIF
 28894                                  
 28895                                  ; =========================================================================
 28896                                  
 28897                                  ; =========================================================================
 28898                                  ;
 28899                                  ; =========================================================================
 28900                                  
 28901                                  _$EXEC:
 28902                                  	; 02/08/2018 - Retro DOS v3.0
 28903                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5EF1h
 28904                                  
 28905                                  EXEC001S:
 28906                                  
 28907                                  	;LocalVar    Exec_Blk		,DWORD
 28908                                  	;LocalVar    Exec_Func		,BYTE
 28909                                  	;LocalVar    Exec_Load_High	,BYTE
 28910                                  	;LocalVar    Exec_FH		,WORD
 28911                                  	;LocalVar    Exec_Rel_Fac	,WORD
 28912                                  	;LocalVar    Exec_Res_Len_Para	,WORD
 28913                                  	;LocalVar    Exec_Environ	,WORD
 28914                                  	;LocalVar    Exec_Size		,WORD
 28915                                  	;LocalVar    Exec_Load_Block	,WORD
 28916                                  	;LocalVar    Exec_DMA		,WORD
 28917                                  	;LocalVar    ExecNameLen 	,WORD
 28918                                  	;LocalVar    ExecName		,DWORD
 28919                                  	;
 28920                                  	;LocalVar    Exec_DMA_Save	,WORD
 28921                                  	;LocalVar    Exec_NoStack	,BYTE
 28922                                  
 28923                                  	; MSDOS 3.3 (& MSDOS 6.0)
 28924                                  	;%define	Exec_Blk	dword [bp-4]
 28925                                  	%define		Exec_Blk	[bp-4] ; 09/08/2018
 28926                                  	%define		Exec_BlkL	word [bp-4]	
 28927                                  	%define		Exec_BlkH	word [bp-2]
 28928                                  	%define		Exec_Func	byte [bp-5]
 28929                                  	%define		Exec_Load_High	byte [bp-6]
 28930                                  	%define		Exec_FH		word [bp-8]
 28931                                  	%define		Exec_Rel_Fac	word [bp-10]
 28932                                  	%define		Exec_Res_Len_Para word [bp-12]
 28933                                  	%define		Exec_Environ	word [bp-14]
 28934                                  	%define		Exec_Size	word [bp-16]
 28935                                  	%define		Exec_Load_Block	word [bp-18]
 28936                                  	%define		Exec_DMA	word [bp-20]
 28937                                  	%define		ExecNameLen	word [bp-22]
 28938                                  	;%define	ExecName	dword [bp-26]
 28939                                  	%define		ExecName	[bp-26] ; 09/08/2018
 28940                                  	%define		ExecNameL	word [bp-26]	
 28941                                  	%define		ExecNameH	word [bp-24]
 28942                                  	; MSDOS 6.0
 28943                                  	%define		Exec_DMA_Save	word [bp-28]
 28944                                  	%define		Exec_NoStack	byte [bp-29]
 28945                                  	
 28946                                  	; ==================================================================
 28947                                  	; validate function
 28948                                  	; ==================================================================
 28949                                  		      	
 28950                                  	;
 28951                                  	; M068 - Start
 28952                                  	;
 28953                                  	; Reset the A20OFF_COUNT to 0. This is done as there is a 
 28954                                  	; possibility that the count may not be decremented all the way to
 28955                                  	; 0. A typical case is if the program for which we intended to keep 
 28956                                  	; the A20  off for a sufficiently long time (A20OFF_COUNT int 21 
 28957                                  	; calls), exits pre-maturely due to error conditions.
 28958                                  	;
 28959                                  
 28960                                  	; MSDOS 6.0
 28961                                  	;mov	byte [SS:A20OFF_COUNT], 0
 28962                                  
 28963                                  	;
 28964                                  	; If al=5 (ExecReady) we'll change the return address on the stack	
 28965                                  	; to be LeaveDos in msdisp.asm. This ensures that the EXECA20OFF
 28966                                  	; bit set in DOS_FLAG by ExceReady is not cleared in msdisp.asm
 28967                                  	;
 28968                                  	
 28969                                  	;cmp	al, 5			; Q: is this ExecReady call
 28970                                  	;jne	@f			; N: continue
 28971                                  					; Y: change ret addr. to LeaveDos.
 28972                                  	;pop	cx			; Note CX is not input to ExecReady
 28973                                  	;mov	cx, offset DOSCODE:LeaveDos
 28974                                  	;push	cx
 28975                                  ;@@:
 28976                                  	;
 28977                                  	; M068 - End
 28978                                  	;
 28979                                  
 28980                                  	;Enter
 28981                                  
 28982 00005FE6 55                      	push	bp
 28983 00005FE7 89E5                    	mov	bp,sp
 28984 00005FE9 83EC1E                  	sub	sp,30 ; MSDOS 6.0
 28985                                  	;sub	sp,26 ; MSDOS 3.3
 28986                                  
 28987                                  	; MSDOS 6.0
 28988                                  	;cmp	AL,5			; only 0, 1, 3 or 5 are allowed ;M028
 28989                                  					; M030
 28990                                  	;jna	short Exec_Check_2
 28991                                  
 28992                                  	; MSDOS 3.3
 28993 00005FEC 3C03                    	cmp	AL,3
 28994 00005FEE 760E                    	jna	short Exec_Check_2
 28995                                  
 28996                                  Exec_Bad_Fun:
 28997 00005FF0 36C606[D102]01          	mov	byte [ss:EXTERR_LOCUS],errLOC_Unk 
 28998                                  					; Extended Error Locus	;smr;SS Override
 28999                                  	;mov	al,1
 29000 00005FF6 B001                    	mov	al,error_invalid_function
 29001                                  
 29002                                  Exec_Ret_Err:
 29003                                  	;Leave
 29004 00005FF8 89EC                    	mov	sp,bp
 29005 00005FFA 5D                      	pop	bp
 29006                                  	;transfer SYS_RET_ERR
 29007 00005FFB E90BB7                  	jmp	SYS_RET_ERR
 29008                                  
 29009                                  	; MSDOS 6.0
 29010                                  ;ExecReadyJ:
 29011                                  	;call	ExecReady		; M028
 29012                                  	;jmp	norm_ovl		; do a Leave & xfer sysret_OK ; M028
 29013                                  
 29014                                  Exec_Check_2:
 29015 00005FFE 3C02                    	cmp	AL,2			
 29016 00006000 74EE                    	jz	short Exec_Bad_Fun
 29017                                  
 29018                                  	; MSDOS 6.0
 29019                                  	;cmp	al,4			; 2 & 4 are not allowed
 29020                                  	;je	short Exec_Bad_Fun
 29021                                  	;
 29022                                  	;cmp	al,5			; M028 ; M030
 29023                                  	;je	short ExecReadyJ		; M028
 29024                                  
 29025                                  	;mov	[bp-4],bx
 29026 00006002 895EFC                  	mov	Exec_BlkL,BX		; stash args
 29027                                  	;mov	[bp-2],es
 29028 00006005 8C46FE                  	mov	Exec_BlkH,ES
 29029                                  	;mov	[bp-5],al
 29030 00006008 8846FB                  	mov	Exec_Func,AL
 29031                                  	;mov	byte [bp-6],0
 29032 0000600B C646FA00                	mov	Exec_Load_High,0
 29033                                  
 29034                                  	;mov	[bp-26],dx
 29035 0000600F 8956E6                  	mov	ExecNameL,DX		; set up length of exec name
 29036                                  	;mov	[bp-24],ds
 29037 00006012 8C5EE8                  	mov	ExecNameH,DS
 29038 00006015 89D6                    	mov	SI,DX			; move pointer to convenient place
 29039                                  	;invoke	DStrLen
 29040 00006017 E85EBF                  	call	DStrLen
 29041                                  	;mov	[bp-22],cx
 29042 0000601A 894EEA                  	mov	ExecNameLen,CX		; save length
 29043                                  
 29044                                  	; MSDOS 6.0
 29045                                  	;mov	al, [AllocMethod]	; M063: save alloc method in 
 29046                                  	;mov	[AllocMsave], al	; M063: AllocMsave
 29047                                  
 29048 0000601D 30C0                    	xor	AL,AL			; open for reading
 29049 0000601F 55                      	push	BP
 29050                                  
 29051                                  	; MSDOS 6.0
 29052                                  	;or	byte [DOS_FLAG], EXECOPEN ; this flag is set to indicate to 
 29053                                  					; the redir that this open call is
 29054                                  					; due to an exec.
 29055                                  
 29056                                  	;invoke	$OPEN			; is the file there?
 29057 00006020 E81710                  	call	_$OPEN
 29058                                  
 29059                                  	; MSDOS 6.0
 29060                                  	;pushf
 29061                                  	;and	byte [DOS_FLAG],~EXECOPEN; reset flag
 29062                                  	;popf
 29063                                  
 29064 00006023 5D                      	pop	BP
 29065                                  	;MSDOS 3.3
 29066 00006024 72D2                    	jc	short Exec_Ret_Err
 29067                                  
 29068                                  	;mov	[bp-8],ax
 29069 00006026 8946F8                  	mov	Exec_FH,AX
 29070 00006029 89C3                    	mov	BX,AX
 29071 0000602B 30C0                    	xor	AL,AL
 29072                                  	;invoke	$Ioctl
 29073 0000602D E888CF                  	call	_$IOCTL
 29074 00006030 7207                    	jc	short Exec_BombJ
 29075                                  
 29076                                  	;test	dl,80h
 29077 00006032 F6C280                  	test	DL,devid_ISDEV
 29078 00006035 740A                    	jz	short Exec_Check_Environ
 29079                                  
 29080                                  	;mov	al,2
 29081 00006037 B002                    	mov	AL,error_file_not_found
 29082                                  Exec_BombJ:
 29083 00006039 E9CC00                  	jmp	Exec_Bomb
 29084                                  
 29085                                  BadEnv:
 29086                                  	;mov	al,0Ah
 29087 0000603C B00A                    	mov	AL,error_bad_environment
 29088 0000603E E9C700                  	jmp	Exec_Bomb
 29089                                  
 29090                                  Exec_Check_Environ:
 29091                                  	;mov	word [bp-18],0
 29092 00006041 C746EE0000              	mov	Exec_Load_Block,0
 29093                                  	;mov	word [bp-14],0
 29094 00006046 C746F20000              	mov	Exec_Environ,0
 29095                                  					; overlays... no environment
 29096                                  	;test	byte [bp-5],2
 29097 0000604B F646FB02                	test	Exec_Func,exec_func_overlay
 29098 0000604F 7554                    	jnz	short Exec_Read_Header
 29099                                  
 29100                                  	;lds	si,[bp-4]
 29101 00006051 C576FC                  	lds	SI,Exec_Blk		; get block
 29102 00006054 8B04                    	mov	ax,[SI]
 29103                                  	;mov	AX,[SI+EXEC1.ENVIRON]	; address of environ
 29104 00006056 09C0                    	or	AX,AX
 29105 00006058 750C                    	jnz	short Exec_Scan_Env
 29106                                  
 29107 0000605A 368E1E[DE02]            	mov	DS,[SS:CurrentPDB]	;smr;SS Override
 29108                                  	;mov	ax,[44]
 29109 0000605F A12C00                  	mov	AX,[PDB.ENVIRON]
 29110                                  
 29111                                  ; MSDOS 6.0
 29112                                  ;---------------------------------------------BUG 92 4/30/90-----------------
 29113                                  ;
 29114                                  ; Exec_environ is being correctly initialized after the environment has been
 29115                                  ; allocated and copied form the parent's env. It must not be initialized here.
 29116                                  ; Because if the call to $alloc below fails Exec_dealloc will deallocate the
 29117                                  ; parent's environment.
 29118                                  ;	mov	Exec_Environ,AX
 29119                                  ;
 29120                                  ;----------------------------------------------------------------------------
 29121                                  
 29122                                  	;mov	[bp-14],ax
 29123                                  	;mov	Exec_Environ,ax
 29124                                  
 29125 00006062 09C0                    	or	AX,AX
 29126 00006064 743F                    	jz	short Exec_Read_Header
 29127                                  
 29128                                  Exec_Scan_Env:
 29129 00006066 8EC0                    	mov	ES,AX
 29130 00006068 31FF                    	xor	DI,DI
 29131                                  	;mov	cx,7FFFh ; MSDOS 3.3
 29132 0000606A B90080                  	mov	CX,8000h ; MSDOS 6.0	; at most 32k of environment ;M040
 29133 0000606D 30C0                    	xor	AL,AL
 29134                                  
 29135                                  Exec_Get_Environ_Len:
 29136 0000606F F2AE                    	repnz	scasb			; find that nul byte
 29137 00006071 75C9                    	jnz	short BadEnv
 29138                                  
 29139 00006073 49                      	dec	CX			; Dec CX for the next nul byte test
 29140 00006074 78C6                    	js	short BadEnv		; gone beyond the end of the environment
 29141                                  
 29142 00006076 AE                      	scasb				; is there another nul byte?
 29143 00006077 75F6                    	jnz	short Exec_Get_Environ_Len ; no, scan some more
 29144                                  
 29145 00006079 57                      	push	DI
 29146                                  	;lea	bx,[DI+11h]
 29147 0000607A 8D5D11                  	lea	BX,[DI+0Fh+2]
 29148                                  	;add	bx,[bp-22]
 29149 0000607D 035EEA                  	add	BX,ExecNameLen		; BX <- length of environment
 29150                                  					; remember argv[0] length
 29151                                  					; round up and remember argc
 29152 00006080 B104                    	mov	CL,4
 29153 00006082 D3EB                    	shr	BX,CL			; number of paragraphs needed
 29154 00006084 06                      	push	ES
 29155                                  	;invoke	$Alloc			; can we get the space?
 29156 00006085 E8CA04                  	call	_$ALLOC
 29157 00006088 1F                      	pop	DS
 29158 00006089 59                      	pop	CX
 29159 0000608A 7302                    	jnc	short Exec_Save_Environ
 29160                                  
 29161 0000608C EB74                    	jmp	SHORT Exec_No_Mem	; nope... cry and sob
 29162                                  
 29163                                  Exec_Save_Environ:
 29164 0000608E 8EC0                    	mov	ES,AX
 29165                                  	;mov	[bp-14],ax
 29166 00006090 8946F2                  	mov	Exec_Environ,AX 	; save him for a rainy day
 29167 00006093 31F6                    	xor	SI,SI
 29168 00006095 89F7                    	mov	DI,SI
 29169 00006097 F3A4                    	rep	movsb			; copy the environment
 29170 00006099 B80100                  	mov	AX,1
 29171 0000609C AB                      	stosw
 29172                                  	;lds	si,[bp-26]
 29173 0000609D C576E6                  	lds	SI,ExecName
 29174                                  	;mov	cx,[bp-22]
 29175 000060A0 8B4EEA                  	mov	CX,ExecNameLen
 29176 000060A3 F3A4                    	rep	movsb
 29177                                  
 29178                                  Exec_Read_Header:
 29179                                  	; We read in the program header into the above data area and
 29180                                  	; determine where in this memory the image will be located.
 29181                                  
 29182                                  	;Context DS
 29183 000060A5 16                      	push	ss
 29184 000060A6 1F                      	pop	ds
 29185                                  	;mov	cx,26
 29186 000060A7 B91A00                  	mov	CX,Exec_Header_Len	; header size
 29187 000060AA BA[1E14]                	mov	DX,exec_signature
 29188 000060AD 06                      	push	ES
 29189 000060AE 1E                      	push	DS
 29190 000060AF E87803                  	call	ExecRead
 29191 000060B2 1F                      	pop	DS
 29192 000060B3 07                      	pop	ES
 29193 000060B4 7250                    	jc	short Exec_Bad_File
 29194                                  
 29195 000060B6 09C0                    	or	AX,AX
 29196 000060B8 744C                    	jz	short Exec_Bad_File
 29197                                  	;cmp	ax,26
 29198 000060BA 83F81A                  	cmp	AX,Exec_Header_Len	; did we read the right number?
 29199 000060BD 7519                    	jnz	short Exec_Com_Filej	; yep... continue
 29200                                  
 29201 000060BF F706[2A14]FFFF          	test	word [exec_max_BSS],-1 	; indicate load high?
 29202 000060C5 7504                    	jnz	short Exec_Check_Sig
 29203                                  
 29204                                  	;mov	byte [bp-6],0FFh
 29205 000060C7 C646FAFF                	mov	Exec_Load_High,-1
 29206                                  
 29207                                  Exec_Check_Sig:
 29208 000060CB A1[1E14]                	mov	AX,[exec_signature]	; rms;NSS
 29209                                  	;cmp	ax,5A4Dh ; 'MZ'
 29210 000060CE 3D4D5A                  	cmp	AX,exe_valid_signature	; zibo arises!
 29211 000060D1 7408                    	jz	short Exec_Save_Start 	; assume com file if no signature
 29212                                  
 29213                                  	;cmp	ax,4D5Ah ; 'ZM'
 29214 000060D3 3D5A4D                  	cmp	AX,exe_valid_old_signature  ; zibo arises!
 29215 000060D6 7403                    	jz	short Exec_Save_Start 	; assume com file if no signature
 29216                                  
 29217                                  Exec_Com_Filej:
 29218 000060D8 E9A201                  	jmp	Exec_Com_File
 29219                                  
 29220                                  	; We have the program header... determine memory requirements
 29221                                  
 29222                                  Exec_Save_Start:
 29223 000060DB A1[2214]                	mov	AX,[exec_pages]		; get 512-byte pages	;rms;NSS
 29224 000060DE B105                    	mov	CL,5			; convert to paragraphs
 29225 000060E0 D3E0                    	shl	AX,CL
 29226 000060E2 2B06[2614]              	sub	AX,[exec_par_dir] 	; AX = size in paragraphs;rms;NSS
 29227                                  	;mov	[bp-12],ax
 29228 000060E6 8946F4                  	mov	Exec_Res_Len_Para,AX
 29229                                  
 29230                                  		; Do we need to allocate memory?
 29231                                  		; Yes if function is not load-overlay
 29232                                  
 29233                                  	;test	byte [bp-5],2
 29234 000060E9 F646FB02                	test	Exec_Func,exec_func_overlay
 29235 000060ED 742C                    	jz	short Exec_Allocate	; allocation of space
 29236                                  
 29237                                  		; get load address from block
 29238                                  
 29239                                  	;les	di,[bp-4]
 29240 000060EF C47EFC                  	les	DI,Exec_Blk
 29241 000060F2 268B05                  	mov	ax,[es:di]
 29242                                  	;mov	AX,[ES:DI+EXEC3.load_addr]
 29243                                  	;mov	[bp-20],ax
 29244 000060F5 8946EC                  	mov	Exec_DMA,AX
 29245 000060F8 268B4502                	mov	AX,[ES:DI+EXEC3.reloc_fac]
 29246                                  	;mov	[bp-10],ax
 29247 000060FC 8946F6                  	mov	Exec_Rel_Fac,AX
 29248                                  	; 10/08/2018
 29249 000060FF E9AB00                  	jmp	Exec_Find_Res		; M000
 29250                                  
 29251                                  Exec_No_Mem:
 29252                                  	;mov	al,8
 29253 00006102 B008                    	mov	AL,error_not_enough_memory
 29254 00006104 EB02                    	jmp	short Exec_Bomb
 29255                                  
 29256                                  Exec_Bad_File:
 29257                                  	;mov	al,0Bh
 29258 00006106 B00B                    	mov	AL,error_bad_format
 29259                                  
 29260                                  Exec_Bomb:
 29261                                  	;mov	bx,[bp-8]
 29262 00006108 8B5EF8                  	mov	BX,Exec_FH
 29263 0000610B E82B03                  	call	Exec_Dealloc
 29264                                  	;LeaveCrit CritMem
 29265 0000610E E863BF                  	call	LcritMem
 29266                                  	;save	<AX,BP>
 29267 00006111 50                      	push	ax
 29268 00006112 55                      	push	bp
 29269                                  	;invoke	$CLOSE
 29270 00006113 E8B10C                  	call	_$CLOSE
 29271                                  	;restore <BP,AX>
 29272 00006116 5D                      	pop	bp
 29273 00006117 58                      	pop	ax
 29274 00006118 E9DDFE                  	jmp	Exec_Ret_Err
 29275                                  
 29276                                  Exec_Chk_Mem: 
 29277                                  	; MSDOS 6.0    			; M063 - Start
 29278                                  	;mov	al,[AllocMethod]	; save current alloc method in ax
 29279                                  	;mov	bl,[AllocMsave]
 29280                                  	;mov	[AllocMethod], bl	; restore original allocmethod
 29281                                  	;test	bl,HIGH_ONLY 		; Q: was the HIGH_ONLY bit already set
 29282                                  	;jnz	short Exec_No_Mem	; Y: no space in UMBs. Quit
 29283                                  	;				; N: continue
 29284                                  	;
 29285                                  	;test	al,HIGH_ONLY		; Q: did we set the HIGH_ONLY bit
 29286                                  	;jz	short Exec_No_Mem	; N: no memory 
 29287                                  	;mov	ax,[save_AX]		; Y: restore ax and
 29288                                  	;jmp	short Exec_Norm_Alloc	;    Try again
 29289                                  	;				; M063 - End
 29290                                  
 29291                                  Exec_Allocate:
 29292                                  	; 09/09/2018
 29293                                  
 29294                                  	; M005 - START
 29295                                  	; If there is no STACK segment for this exe file and if this
 29296                                  	; not an overlay and the resident size is less than 64K - 
 29297                                  	; 256 bytes we shall add 256bytes bytes to the programs 
 29298                                  	; resident memory requirement and set Exec_SP to this value.
 29299                                  
 29300                                  	; MSDOS 6.0
 29301 0000611B C646E300                	mov	Exec_NoStack,0
 29302 0000611F 833E[2C14]00            	cmp	word [exec_SS],0	; Q: is there a stack seg
 29303 00006124 7512                    	jne	short ea1		; Y: continue normal processing
 29304 00006126 833E[2E14]00            	cmp	word [exec_SP],0	; Q: is there a stack ptr
 29305 0000612B 750B                    	jne	short ea1		; Y: continue normal processing
 29306                                  
 29307 0000612D FE46E3                  	inc	Exec_NoStack
 29308 00006130 3DF00F                  	cmp	ax,1000h-10h		; Q: is this >= 64K-256 bytes
 29309 00006133 7303                    	jae	short ea1		; Y: don't set Exec_SP
 29310                                  
 29311 00006135 83C010                  	add	ax,10h			; add 10h paras to mem requirement
 29312                                  ea1:
 29313                                  	; M005 - END
 29314                                  
 29315                                  	; MSDOS 6.0			; M000 - start
 29316                                  	;test	byte [AllocMethod],HIGH_FIRST
 29317                                  	;				; Q: is the alloc strat high_first
 29318                                  	;jz	short Exec_Norm_Alloc	; N: normal allocate
 29319                                  	;				; Y: set high_only bit
 29320                                  	;or	byte [AllocMethod],HIGH_ONLY
 29321                                  	;				; M000 - end
 29322                                  
 29323                                  ;Exec_Norm_Alloc:
 29324                                  	;mov	[save_ax],ax		; M000: save ax for possible 2nd  
 29325                                  					; M000: attempt at allocating memory
 29326                                  	;;push	ax			; M000
 29327                                  
 29328                                  	; MSDOS 3.3
 29329 00006138 50                      	push	ax	
 29330                                  
 29331 00006139 BBFFFF                  	mov	BX,0FFFFh		; see how much room in arena
 29332 0000613C 1E                      	push	DS
 29333                                  	;invoke	$Alloc			; should have carry set and BX has max
 29334 0000613D E81204                  	call	_$ALLOC
 29335 00006140 1F                      	pop	DS
 29336                                  
 29337                                  	; MSDOS 6.0
 29338                                  	;mov	ax,[save_ax]		; M000
 29339                                  	;;pop	AX			; M000
 29340                                  
 29341                                  	; MSDOS 3.3
 29342 00006141 58                      	pop	ax
 29343                                  
 29344 00006142 83C010                  	add	AX,10h			; room for header
 29345 00006145 83FB11                  	cmp	BX,11h			; enough room for a header
 29346                                  	; MSDOS 6.0
 29347                                  	;jb	short Exec_Chk_Mem	; M000
 29348                                  	; MSDOS 3.3	
 29349 00006148 72B8                    	jb	short Exec_No_Mem
 29350                                  
 29351 0000614A 39D8                    	cmp	AX,BX			; is there enough for bare image?
 29352                                  	; MSDOS 6.0
 29353                                  	;ja	short Exec_Chk_Mem	; M000
 29354                                  	; MSDOS 3.3
 29355 0000614C 77B4                    	ja	short Exec_No_Mem
 29356                                  
 29357                                  	;test	byte [bp-6],0FFh
 29358 0000614E F646FAFF                	test	Exec_Load_High,-1	; if load high, use max
 29359 00006152 7518                    	jnz	short Exec_BX_Max	; use max
 29360                                  
 29361                                  	; 09/09/2018
 29362                                  
 29363 00006154 0306[2814]              	add	AX,[exec_min_BSS] 	; go for min allocation;rms;NSS
 29364                                  	; MSDOS 6.0
 29365                                  	;jc	short Exec_Chk_Mem		; M000
 29366                                  	; MSDOS 3.3
 29367 00006158 72A8                    	jc	short Exec_No_Mem
 29368                                  
 29369 0000615A 39D8                    	cmp	AX,BX			; enough space?
 29370                                  	; MSDOS 6.0
 29371                                  	;ja	short Exec_Chk_Mem	; M000: nope...	
 29372                                  	; MSDOS 3.3
 29373 0000615C 77A4                    	ja	short Exec_No_Mem
 29374                                  
 29375 0000615E 2B06[2814]              	sub	AX,[exec_min_BSS] 	; rms;NSS
 29376 00006162 0306[2A14]              	add	AX,[exec_max_BSS] 	; go for the MAX
 29377 00006166 7204                    	jc	short Exec_BX_Max
 29378                                  
 29379 00006168 39D8                    	cmp	AX,BX
 29380 0000616A 7602                    	jbe	short Exec_Got_Block
 29381                                  
 29382                                  Exec_BX_Max:
 29383 0000616C 89D8                    	mov	AX,BX
 29384                                  
 29385                                  Exec_Got_Block:
 29386                                  	; 03/08/2018 - Retro DOS v3.0
 29387                                  
 29388 0000616E 1E                      	push	DS
 29389 0000616F 89C3                    	mov	BX,AX
 29390                                  	;mov	[bp-16],bx
 29391 00006171 895EF0                  	mov	Exec_Size,BX
 29392                                  	;invoke	$Alloc			; get the space
 29393 00006174 E8DB03                  	call	_$ALLOC
 29394 00006177 1F                      	pop	DS
 29395                                  	; MSDOS 6.0
 29396                                  	;jc	short Exec_Chk_Mem	; M000
 29397                                  	; MSDOS 3.3
 29398 00006178 7288                    	jc	short Exec_No_Mem
 29399                                  
 29400                                  	; MSDOS 6.0
 29401                                  	;mov	cl,[AllocMsave]		; M063: 
 29402                                  	;mov	[AllocMethod],cl	; M063: restore allocmethod
 29403                                  
 29404                                  ;M029; Begin changes
 29405                                  ; This code does special handling for programs with no stack segment. If so,
 29406                                  ;check if the current block is larger than 64K. If so, we do not modify
 29407                                  ;Exec_SP. If smaller than 64K, we make Exec_SP = top of block. In either
 29408                                  ;case Exec_SS is not changed.
 29409                                  ;
 29410                                  	; MSDOS 6.0
 29411 0000617A 807EE300                	cmp	Exec_NoStack,0
 29412                                  	;je	@f
 29413 0000617E 7412                    	je	short ea2
 29414                                  
 29415 00006180 81FB0010                	cmp	bx,1000h		; Q: >= 64K memory block
 29416                                  	;jae	@f			; Y: Exec_SP = 0
 29417 00006184 730C                    	jae	short ea2
 29418                                  ;
 29419                                  ;Make Exec_SP point at the top of the memory block
 29420                                  ;
 29421 00006186 B104                    	mov	cl,4
 29422 00006188 D3E3                    	shl	bx,cl			; get byte offset
 29423 0000618A 81EB0001                	sub	bx,100h			; take care of PSP
 29424 0000618E 891E[2E14]              	mov	[exec_SP],bx		; Exec_SP = top of block
 29425                                  ea2:
 29426                                  ;@@:
 29427                                  ;
 29428                                  ;M029; end changes
 29429                                  ;
 29430                                  	;mov	[bp-18],ax
 29431 00006192 8946EE                  	mov	Exec_Load_Block,AX
 29432 00006195 83C010                  	add	AX,10h
 29433                                  	;test	byte [bp-6],0FFh
 29434 00006198 F646FAFF                	test	Exec_Load_High,-1
 29435 0000619C 7409                    	jz	short Exec_Use_AX	; use ax for load info
 29436                                  
 29437                                  	;add	ax,[bp-16]
 29438 0000619E 0346F0                  	add	AX,Exec_Size		; go to end
 29439                                  	;sub	ax,[bp-12]
 29440 000061A1 2B46F4                  	sub	AX,Exec_Res_Len_Para	; drop off header
 29441 000061A4 83E810                  	sub	AX,10h			; drop off pdb
 29442                                  
 29443                                  Exec_Use_AX:
 29444                                  	;mov	[bp-10],ax
 29445 000061A7 8946F6                  	mov	Exec_Rel_Fac,AX 	; new segment
 29446                                  	;mov	[bp-20],ax
 29447 000061AA 8946EC                  	mov	Exec_DMA,AX		; beginning of dma
 29448                                  
 29449                                  	; Determine the location in the file of the beginning of
 29450                                  	; the resident
 29451                                  
 29452                                  Exec_Find_Res:
 29453                                  	; MSDOS 6.0
 29454                                  	;mov	dx,[bp-20]
 29455 000061AD 8B56EC                  	mov	DX,Exec_DMA
 29456                                  	;mov	[bp-28],dx
 29457 000061B0 8956E4                  	mov	Exec_DMA_Save,DX
 29458                                  
 29459                                  	; MSDOS 3.3 (& MSDOS 6.0)
 29460 000061B3 8B16[2614]              	mov	DX,[exec_par_dir]
 29461 000061B7 52                      	push	DX
 29462 000061B8 B104                    	mov	CL,4
 29463 000061BA D3E2                    	shl	DX,CL			; low word of location
 29464 000061BC 58                      	pop	AX
 29465 000061BD B10C                    	mov	CL,12
 29466 000061BF D3E8                    	shr	AX,CL			; high word of location
 29467 000061C1 89C1                    	mov	CX,AX			; CX <- high
 29468                                  
 29469                                  		; Read in the resident image (first, seek to it)
 29470                                  	;mov	bx,[bp-8]
 29471 000061C3 8B5EF8                  	mov	BX,Exec_FH
 29472 000061C6 1E                      	push	DS
 29473 000061C7 30C0                    	xor	AL,AL
 29474                                  	;invoke	$Lseek			; Seek to resident
 29475 000061C9 E86D0D                  	call	_$LSEEK
 29476 000061CC 1F                      	pop	DS
 29477 000061CD 7303                    	jnc	short Exec_Big_Read
 29478                                  
 29479 000061CF E936FF                  	jmp	Exec_Bomb
 29480                                  
 29481                                  Exec_Big_Read:				; Read resident into memory
 29482                                  	;mov	bx,[bp-12]
 29483 000061D2 8B5EF4                  	mov	BX,Exec_Res_Len_Para
 29484 000061D5 81FB0010                	cmp	BX,1000h		; Too many bytes to read?
 29485 000061D9 7203                    	jb	short Exec_Read_OK
 29486                                  
 29487 000061DB BBE00F                  	mov	BX,0FE0h		; Max in one chunk FE00 bytes
 29488                                  
 29489                                  Exec_Read_OK:
 29490                                  	;sub	[bp-12],bx
 29491 000061DE 295EF4                  	sub	Exec_Res_Len_Para,BX	; We read (soon) this many
 29492 000061E1 53                      	push	BX
 29493 000061E2 B104                    	mov	CL,4
 29494 000061E4 D3E3                    	shl	BX,CL			; Get count in bytes from paras
 29495 000061E6 89D9                    	mov	CX,BX			; Count in correct register
 29496 000061E8 1E                      	push	DS
 29497                                  	;mov	ds,[bp-20]
 29498 000061E9 8E5EEC                  	mov	DS,Exec_DMA		; Set up read buffer
 29499                                  
 29500 000061EC 31D2                    	xor	DX,DX
 29501 000061EE 51                      	push	CX			; Save our count
 29502 000061EF E83802                  	call	ExecRead
 29503 000061F2 59                      	pop	CX			; Get old count to verify
 29504 000061F3 1F                      	pop	DS
 29505 000061F4 7248                    	jc	short Exec_Bad_FileJ
 29506                                  
 29507 000061F6 39C1                    	cmp	CX,AX			; Did we read enough?
 29508 000061F8 5B                      	pop	BX			; Get paragraph count back
 29509 000061F9 7408                    	jz	short ExecCheckEnd	; and do reloc if no more to read
 29510                                  
 29511                                  	; The read did not match the request. If we are off by 512
 29512                                  	; bytes or more then the header lied and we have an error.
 29513                                  
 29514 000061FB 29C1                    	sub	CX,AX
 29515 000061FD 81F90002                	cmp	CX,512
 29516 00006201 733B                    	jae	short Exec_Bad_FileJ
 29517                                  
 29518                                  	; We've read in CX bytes... bump DTA location
 29519                                  
 29520                                  ExecCheckEnd:
 29521                                  	;add	[bp-20],bx
 29522 00006203 015EEC                  	add	Exec_DMA,BX		; Bump dma address
 29523                                  	;test	word [bp-12],0FFFFh
 29524 00006206 F746F4FFFF              	test	Exec_Res_Len_Para,-1
 29525 0000620B 75C5                    	jnz	short Exec_Big_Read
 29526                                  
 29527                                  	; The image has now been read in. We must perform relocation
 29528                                  	; to the current location.
 29529                                  
 29530                                  exec_do_reloc:
 29531                                  	;mov	cx,[bp-10]
 29532 0000620D 8B4EF6                  	mov	CX,Exec_Rel_Fac
 29533 00006210 A1[2C14]                	mov	AX,[exec_SS]		; get initial SS ;rms;NSS
 29534 00006213 01C8                    	add	AX,CX			; and relocate him
 29535 00006215 A3[1814]                	mov	[exec_init_SS],AX 	; rms;NSS
 29536                                  
 29537 00006218 A1[2E14]                	mov	AX,[exec_SP]		; initial SP ;rms;NSS
 29538 0000621B A3[1614]                	mov	[exec_init_SP],AX 	; rms;NSS
 29539                                  
 29540 0000621E C406[3214]              	les	AX,[exec_IP]		; rms;NSS
 29541 00006222 A3[1A14]                	mov	[exec_init_IP],AX 	; rms;NSS
 29542 00006225 8CC0                    	mov	AX,ES			; rms;NSS
 29543 00006227 01C8                    	add	AX,CX			; relocated...
 29544 00006229 A3[1C14]                	mov	[exec_init_CS],AX 	; rms;NSS
 29545                                  
 29546 0000622C 31C9                    	xor	CX,CX
 29547 0000622E 8B16[3614]              	mov	DX,[exec_rle_table]	; rms;NSS
 29548                                  	;mov	bx,[bp-8]
 29549 00006232 8B5EF8                  	mov	BX,Exec_FH
 29550 00006235 1E                      	push	DS
 29551 00006236 31C0                    	xor	AX,AX
 29552                                  	;invoke	$Lseek
 29553 00006238 E8FE0C                  	call	_$LSEEK
 29554 0000623B 1F                      	pop	DS
 29555 0000623C 7303                    	jnc	short exec_get_entries
 29556                                  
 29557                                  Exec_Bad_FileJ:
 29558 0000623E E9C5FE                  	jmp	Exec_Bad_File
 29559                                  
 29560                                  exec_get_entries:
 29561 00006241 8B16[2414]              	mov	DX,[exec_rle_count]	; Number of entries left ;rms;NSS
 29562                                  
 29563                                  exec_read_reloc:
 29564 00006245 52                      	push	DX
 29565                                  	;mov	dx,OPENBUF
 29566 00006246 BA[6003]                	mov	DX,Exec_Internal_Buffer
 29567                                  	;mov	cx,388
 29568 00006249 B98401                  	mov	CX,((Exec_Internal_Buffer_Size)/4)*4 ; (390>>2)<<2
 29569 0000624C 1E                      	push	DS
 29570 0000624D E8DA01                  	call	ExecRead
 29571 00006250 07                      	pop	ES
 29572 00006251 5A                      	pop	DX
 29573 00006252 72EA                    	jc	short Exec_Bad_FileJ
 29574                                  
 29575                                  	;mov	cx,97
 29576 00006254 B96100                  	mov	CX,(Exec_Internal_Buffer_Size)/4 ; (390>>2)
 29577                                  					; Pointer to byte location in header
 29578                                  	;mov	di,OPENBUF
 29579 00006257 BF[6003]                	mov	DI,Exec_Internal_Buffer
 29580                                  	;mov	si,[bp-10]
 29581 0000625A 8B76F6                  	mov	SI,Exec_Rel_Fac 	; Relocate a single address
 29582                                  
 29583                                  exec_reloc_one:
 29584 0000625D 09D2                    	or	DX,DX			; Any more entries?
 29585 0000625F 7416                    	jz	short Exec_Set_PDBJ
 29586                                  
 29587                                  exec_get_addr:
 29588 00006261 26C51D                  	lds	BX,[ES:DI]		; Get ra/sa of entry
 29589 00006264 8CD8                    	mov	AX,DS			; Relocate address of item
 29590                                  
 29591                                  	; MSDOS 6.0
 29592                                  ;;;;;;	add	AX,SI  ; MSDOS 3.3
 29593                                  	;add	ax,[bp-28]
 29594 00006266 0346E4                  	add	AX,Exec_DMA_Save
 29595                                  
 29596 00006269 8ED8                    	mov	DS,AX
 29597 0000626B 0137                    	add	[BX],SI
 29598 0000626D 83C704                  	add	DI,4
 29599 00006270 4A                      	dec	DX
 29600 00006271 E2EA                    	loop	exec_reloc_one		; End of internal buffer?
 29601                                  
 29602                                  	; We've exhausted a single buffer's worth. Read in the next
 29603                                  	; piece of the relocation table.
 29604                                  
 29605 00006273 06                      	push	ES
 29606 00006274 1F                      	pop	DS
 29607 00006275 EBCE                    	jmp	short exec_read_reloc
 29608                                  
 29609                                  Exec_Set_PDBJ:
 29610                                  
 29611                                  	; MSDOS 6.0
 29612                                  	;
 29613                                  	; We now determine if this is a buggy exe packed file and if 
 29614                                  	; so we patch in the right code. Note that fixexepatch will
 29615                                  	; point to a ret if dos loads low. The load segment as 
 29616                                  	; determined above will be in exec_dma_save
 29617                                  	;
 29618                                  	;push	es
 29619                                  	;push	ax			; M030
 29620                                  	;push	cx			; M030
 29621                                  	;mov	es,Exec_DMA_Save
 29622                                  	;mov	ax,[exec_init_CS]	; M030
 29623                                  	;mov	cx,[exec_init_IP]	; M030
 29624                                  	;call	word [fixexepatch]
 29625                                  	;call	word [Rational386PatchPtr]
 29626                                  	;pop	cx			; M030
 29627                                  	;pop	ax			; M030
 29628                                  	;pop	es
 29629                                  
 29630 00006277 E99D00                  	jmp	Exec_Set_PDB
 29631                                  
 29632                                  Exec_No_Memj:
 29633 0000627A E985FE                  	jmp	Exec_No_Mem
 29634                                  
 29635                                  	; we have a .COM file.	First, determine if we are merely
 29636                                  	; loading an overlay.
 29637                                  
 29638                                  Exec_Com_File:
 29639                                  	;test	byte [bp-5],2
 29640 0000627D F646FB02                	test	Exec_Func,exec_func_overlay
 29641 00006281 740C                    	jz	short Exec_Alloc_Com_File
 29642                                  	;lds	si,[bp-4]
 29643 00006283 C576FC                  	lds	SI,Exec_Blk		; get arg block
 29644 00006286 AD                      	lodsw				; get load address
 29645                                  	;mov	[bp-20],ax
 29646 00006287 8946EC                  	mov	Exec_DMA,AX
 29647 0000628A B8FFFF                  	mov	AX,0FFFFh
 29648 0000628D EB34                    	jmp	SHORT Exec_Read_Block	; read it all!
 29649                                  
 29650                                  Exec_Chk_Com_Mem:			
 29651                                  	; MSDOS 6.0	     		; M063 - Start
 29652                                  	;mov	al,[AllocMethod]	; save current alloc method in ax
 29653                                  	;mov	bl,[AllocMsave]
 29654                                  	;mov	[AllocMethod],bl	; restore original allocmethod
 29655                                  	;test	bl,HIGH_ONLY 		; Q: was the HIGH_ONLY bit already set
 29656                                  	;jnz	short Exec_No_Memj	; Y: no space in UMBs. Quit
 29657                                  	;				; N: continue
 29658                                  	;
 29659                                  	;test	al,HIGH_ONLY		; Q: did we set the HIGH_ONLY bit
 29660                                  	;jz	short Exec_No_Memj	; N: no memory 
 29661                                  	;
 29662                                  	;mov	ax,Exec_Load_Block	; M047: ax = block we just allocated	
 29663                                  	;xor	bx,bx			; M047: bx => free arena
 29664                                  	;call	ChangeOwner		; M047: free this block
 29665                                  	;
 29666                                  	;jmp	short Exec_Norm_Com_Alloc
 29667                                  	;				; M063 - End
 29668                                  	
 29669                                  	; We must allocate the max possible size block (ick!)
 29670                                  	; and set up CS=DS=ES=SS=PDB pointer, IP=100, SP=max
 29671                                  	; size of block.
 29672                                  
 29673                                  Exec_Alloc_Com_File:
 29674                                  
 29675                                  	; MSDOS 6.0			; M000 -start
 29676                                  	;test	byte [AllocMethod],HIGH_FIRST
 29677                                  	;				; Q: is the alloc strat high_first
 29678                                  	;jz	short Exec_Norm_Com_Alloc ; N: normal allocate
 29679                                  	;				; Y: set high_only bit
 29680                                  	;or	byte [AllocMethod],HIGH_ONLY
 29681                                  	;				; M000 - end
 29682                                  ;Exec_Norm_Com_Alloc:			; M000
 29683                                  	; MSDOS 3.3 (& MSDOS 6.0)
 29684 0000628F BBFFFF                  	mov	BX,0FFFFh
 29685                                  	;invoke	$Alloc			; largest piece available as error
 29686 00006292 E8BD02                  	call	_$ALLOC
 29687 00006295 09DB                    	or	BX,BX
 29688                                  	; MSDOS 6.0
 29689                                  	;jz	short Exec_Chk_Com_Mem	; M000
 29690                                  	; MSDOS 3.3
 29691 00006297 74E1                    	jz	short Exec_No_Memj
 29692                                  
 29693                                  	;mov	[bp-16],bx
 29694 00006299 895EF0                  	mov	Exec_Size,BX		; save size of allocation block
 29695 0000629C 53                      	push	BX
 29696                                  	;invoke	$ALLOC			; largest piece available as error
 29697 0000629D E8B202                  	call	_$ALLOC
 29698 000062A0 5B                      	pop	BX			; get size of block...
 29699                                  	;mov	[bp-18],ax
 29700 000062A1 8946EE                  	mov	Exec_Load_Block,AX
 29701 000062A4 83C010                  	add	AX,10h			; increment for header
 29702                                  	;mov	[bp-20],ax
 29703 000062A7 8946EC                  	mov	Exec_DMA,AX
 29704 000062AA 31C0                    	xor	AX,AX			; presume 64K read...
 29705 000062AC 81FB0010                	cmp	BX,1000h		; 64k or more in block?
 29706 000062B0 730E                    	jae	short Exec_Read_Com	; yes, read only 64k
 29707                                  
 29708 000062B2 89D8                    	mov	AX,BX			; convert size to bytes
 29709 000062B4 B104                    	mov	CL,4
 29710 000062B6 D3E0                    	shl	AX,CL
 29711                                  	; MSDOS 6.0
 29712 000062B8 3D0002                          cmp     AX,200h                 ; enough memory for PSP and stack?
 29713                                  ;	jbe	short Exec_Chk_Com_Mem	; M000: jump if not
 29714                                  ;	;jbe	short Exec_No_Memj	; M000: jump if not
 29715                                  	; Retro DOS v3.0 modification (on MSDOS 6.0 code) -03/08/2018-
 29716                                  	;jbe	short Exec_Chk_Com_Mem	; M000: jump if not
 29717 000062BB 76BD                    	jbe	short Exec_No_Memj	; M000: jump if not
 29718                                  
 29719                                  					; M047: size of the block is < 64K
 29720 000062BD 2D0001                  	sub	ax,100h			; M047: reserve 256 bytes for stack
 29721                                  
 29722                                  Exec_Read_Com:
 29723                                  	; MSDOS 3.3 (& MSDOS 6.0)
 29724 000062C0 2D0001                  	sub	AX,100h 		; remember size of psp
 29725                                  
 29726                                  Exec_Read_Block:
 29727 000062C3 50                      	push	AX			; save number to read
 29728                                  	;mov	bx,[bp-8]
 29729 000062C4 8B5EF8                  	mov	BX,Exec_FH		; of com file
 29730 000062C7 31C9                    	xor	CX,CX			; but seek to 0:0
 29731 000062C9 89CA                    	mov	DX,CX
 29732 000062CB 31C0                    	xor	AX,AX			; seek relative to beginning
 29733                                  	;invoke	$Lseek			; back to beginning of file
 29734 000062CD E8690C                  	call	_$LSEEK
 29735 000062D0 59                      	pop	CX			; number to read
 29736                                  	;mov	ds,[bp-20]
 29737 000062D1 8E5EEC                  	mov	DS,Exec_DMA
 29738 000062D4 31D2                    	xor	DX,DX
 29739 000062D6 51                      	push	CX
 29740 000062D7 E85001                  	call	ExecRead
 29741 000062DA 5E                      	pop	SI			; get number of bytes to read
 29742 000062DB 7303                    	jnc	short OkRead
 29743                                  
 29744 000062DD E926FE                  	jmp	Exec_Bad_File
 29745                                  
 29746                                  	; 10/09/2018
 29747                                  OkRead:
 29748 000062E0 39F0                    	cmp	AX,SI			; did we read them all?
 29749                                  	; MSDOS 6.0
 29750                                  	;jz	short Exec_Chk_Com_Mem	; M00: exactly the wrong number...no 
 29751                                  	; MSDOS 3.3
 29752 000062E2 7496                    	jz	short Exec_No_Memj	; M00: exactly the wrong number...
 29753                                  	
 29754                                  	; MSDOS 6.0
 29755                                  	;mov	bl,[AllocMsave]		; M063
 29756                                  	;mov	[AllocMethod],bl	; M063: restore allocmethod
 29757                                  
 29758                                  	; MSDOS 3.3 (& MSDOS 6.0)
 29759                                  	;test	byte [bp-5],2
 29760 000062E4 F646FB02                	test	Exec_Func,exec_func_overlay
 29761 000062E8 752D                    	jnz	short Exec_Set_PDB	; no starto, chumo!
 29762                                  
 29763                                  	;mov	ax,[bp-20]
 29764 000062EA 8B46EC                  	mov	AX,Exec_DMA
 29765 000062ED 83E810                  	sub	AX,10h
 29766 000062F0 36A3[1C14]              	mov	[SS:exec_init_CS],AX
 29767 000062F4 36C706[1A14]0001        	mov	word [SS:exec_init_IP],100h ; initial IP is 100h
 29768                                  
 29769                                  	; SI is AT MOST FF00h. Add FE to account for PSP - word
 29770                                  	; of 0 on stack.
 29771                                  
 29772 000062FB 81C6FE00                	add	SI,0FEh 		; make room for stack
 29773                                  
 29774                                  	; MSDOS 6.0
 29775 000062FF 83FEFE                  	cmp	si,0FFFEh		; M047: Q: was there >= 64K available
 29776 00006302 7404                    	je	short Exec_St_Ok	; M047: Y: stack is fine
 29777 00006304 81C60001                	add	si,100h			; M047: N: add the xtra 100h for stack
 29778                                  
 29779                                  Exec_St_Ok:
 29780                                  	; MSDOS 3.3 (& MSDOS 6.0)
 29781 00006308 368936[1614]            	mov	[SS:exec_init_SP],SI 	; max value for read is also SP!;smr;SS Override
 29782 0000630D 36A3[1814]              	mov	[SS:exec_init_SS],AX 					;smr;SS Override
 29783 00006311 8ED8                    	mov	DS,AX
 29784 00006313 C7040000                	mov	WORD [SI],0		; 0 for return
 29785                                  
 29786                                  	; MSDOS 6.0
 29787                                  	;
 29788                                  	; M068
 29789                                  	;
 29790                                  	; We now determine if this is a Copy Protected App. If so the 
 29791                                  	; A20OFF_COUNT is set to 6. Note that ChkCopyProt will point to a 
 29792                                  	; a ret if DOS is loaded low. Also DS contains the load segment.
 29793                                  
 29794                                  	;call	word ptr [ChkCopyProt]	
 29795                                  
 29796                                  Exec_Set_PDB:
 29797                                  	; MSDOS 3.3 (& MSDOS 6.0)
 29798                                  	;mov	bx,[bp-8]
 29799 00006317 8B5EF8                  	mov	BX,Exec_FH		; we are finished with the file.
 29800 0000631A E81C01                  	call	Exec_Dealloc
 29801 0000631D 55                      	push	BP
 29802                                  	;invoke	$Close			; release the jfn
 29803 0000631E E8A60A                  	call	_$CLOSE
 29804 00006321 5D                      	pop	BP
 29805 00006322 E81F01                  	call	Exec_Alloc
 29806                                  	;test	byte [bp-5],2
 29807 00006325 F646FB02                	test	Exec_Func,exec_func_overlay
 29808 00006329 7406                    	jz	short Exec_Build_Header
 29809                                  
 29810                                  	; MSDOS 6.0
 29811                                  	;call	Scan_Execname
 29812                                  	;call	Scan_Special_Entries
 29813                                  	;
 29814                                  ;SR;
 29815                                  ;The current lie strategy uses the PSP to store the lie version. However,
 29816                                  ;device drivers are loaded as overlays and have no PSP. To handle them, we
 29817                                  ;use the Sysinit flag provided by the BIOS as part of a structure pointed at
 29818                                  ;by BiosDataPtr. If this flag is set, the overlay call has been issued from
 29819                                  ;Sysinit and therefore must be a device driver load. We then get the lie 
 29820                                  ;version for this driver and put it into the Sysinit PSP. When the driver
 29821                                  ;issues the version check, it gets the lie version until the next overlay
 29822                                  ;call is issued.
 29823                                  ;
 29824                                  	;cmp	DriverLoad,0		;was Sysinit processing done?
 29825                                  	;je	norm_ovl		;yes, no special handling
 29826                                  	;push	si
 29827                                  	;push	es
 29828                                  	;les	si,BiosDataPtr		;get ptr to BIOS data block
 29829                                  	;cmp	byte ptr es:[si],0		;in Sysinit?
 29830                                  	;je	sysinit_done		;no, Sysinit is finished
 29831                                  	;
 29832                                  	;mov	es,CurrentPDB		;es = current PSP (Sysinit PSP)
 29833                                  	;push	Special_Version
 29834                                  	;pop	es:PDB_Version		;store lie version in Sysinit PSP
 29835                                  		;;; PDB.VERSION
 29836                                  	;jmp	short setver_done
 29837                                  ;sysinit_done:
 29838                                  	;mov	DriverLoad,0		;Sysinit done,special handling off
 29839                                  ;setver_done:
 29840                                  	;pop	es
 29841                                  	;pop	si
 29842                                  ;norm_ovl:
 29843                                  
 29844                                  	;leave
 29845 0000632B 89EC                    	mov	sp,bp		
 29846 0000632D 5D                      	pop	bp
 29847                                  
 29848                                  	;transfer SYS_RET_OK		; overlay load -> done
 29849 0000632E E9CCB3                  	jmp	SYS_RET_OK
 29850                                  
 29851                                  Exec_Build_Header:
 29852                                  	;mov	dx,[bp-18]
 29853 00006331 8B56EE                  	mov	DX,Exec_Load_Block
 29854                                  					; assign the space to the process
 29855                                  	;mov	si,1
 29856 00006334 BE0100                  	mov	SI,ARENA.OWNER		; pointer to owner field
 29857                                  	;mov	ax,[bp-14]
 29858 00006337 8B46F2                  	mov	AX,Exec_Environ 	; get environ pointer
 29859 0000633A 09C0                    	or	AX,AX
 29860 0000633C 7405                    	jz	short No_Owner		; no environment
 29861                                  
 29862 0000633E 48                      	dec	AX			; point to header
 29863 0000633F 8ED8                    	mov	DS,AX
 29864 00006341 8914                    	mov	[SI],DX 		; assign ownership
 29865                                  
 29866                                  No_Owner:
 29867                                  	;mov	ax,[bp-18]
 29868 00006343 8B46EE                  	mov	AX,Exec_Load_Block	; get load block pointer
 29869 00006346 48                      	dec	AX
 29870 00006347 8ED8                    	mov	DS,AX			; point to header
 29871 00006349 8914                    	mov	[SI],DX 		; assign ownership
 29872                                  
 29873                                  	; MSDOS 6.0
 29874                                  	;push	DS			;AN000;MS. make ES=DS
 29875                                  	;pop	ES			;AN000;MS.
 29876                                  	;mov	DI,Arena_Name		;AN000;MS. ES:DI points to destination
 29877                                  	;call	Scan_Execname		;AN007;MS. parse execname
 29878                                  	;				;	   ds:si->name, cx=name length
 29879                                  	;push	CX			;AN007;;MS. save for fake version
 29880                                  	;push	SI			;AN007;;MS. save for fake version
 29881                                  	;
 29882                                  ;MoveName:				;AN000;
 29883                                  	;lodsb				;AN000;;MS. get char
 29884                                  	;cmp	AL,'.'			;AN000;;MS. is '.' ,may be name.exe
 29885                                  	;jz	Mem_Done		;AN000;;MS. no, move to header
 29886                                  	;				;AN000;
 29887                                  	;stosb				;AN000;;MS. move char
 29888                                  	;				; MSKK bug fix - limit length copied
 29889                                  	;cmp	di,16			; end of memory arena block?
 29890                                  	;jae	mem_done		; jump if so
 29891                                  	;
 29892                                  	;loop	movename		;AN000;;MS. continue
 29893                                  ;Mem_Done:				;AN000;
 29894                                  	;xor	AL,AL			;AN000;;MS. make ASCIIZ
 29895                                  	;cmp	DI,SIZE ARENA		;AN000;MS. if not all filled
 29896                                  	;jae	Fill8			;AN000;MS.
 29897                                  	;
 29898                                  	;stosb				;AN000;MS.
 29899                                  	;
 29900                                  ;Fill8:					;AN000;
 29901                                  	;pop	SI			;AN007;MS. ds:si -> file name
 29902                                  	;pop	CX			;AN007;MS.
 29903                                  	;
 29904                                  	;call	Scan_Special_Entries	;AN007;MS.
 29905                                  
 29906                                  	; MSDOS 3.3 (& MSDOS 6.0)
 29907 0000634B 52                      	push	DX
 29908                                  	;mov	si,[bp-16]
 29909 0000634C 8B76F0                  	mov	SI,Exec_Size
 29910 0000634F 01D6                    	add	SI,DX
 29911                                  	;Invoke	$Dup_PDB		; ES is now PDB
 29912 00006351 E8E2BA                  	call	_$DUP_PDB
 29913 00006354 5A                      	pop	DX
 29914                                  
 29915                                  	;push	word [bp-14]
 29916 00006355 FF76F2                  	push	Exec_Environ
 29917                                  	;pop	WORD [ES:2Ch]
 29918 00006358 268F062C00              	pop	word [ES:PDB.ENVIRON]
 29919                                  
 29920                                  	; MSDOS 6.0			; *** Added for DOS 5.00
 29921                                  					; version number in PSP
 29922                                   	;push	word [Special_Version]	; Set the DOS version number to
 29923                                  	;pop	word [ES:PDB_Version]	; to be used for this application
 29924                                  		; PDB.VERSION
 29925                                  
 29926                                  	; MSDOS 3.3 (& MSDOS 6.0)	; set up proper command line stuff
 29927                                  	;lds	si,[bp-4]
 29928 0000635D C576FC                  	lds	SI,Exec_Blk		; get the block
 29929 00006360 1E                      	push	DS			; save its location
 29930 00006361 56                      	push	SI
 29931                                  	;lds	si, [si+6]
 29932 00006362 C57406                  	lds	SI,[SI+EXEC0.5C_FCB]	; get the 5c fcb
 29933                                  
 29934                                  	; DS points to user space 5C FCB
 29935                                  
 29936 00006365 B90C00                  	mov	CX,12			; copy drive, name and ext
 29937 00006368 51                      	push	CX
 29938 00006369 BF5C00                  	mov	DI,5Ch
 29939 0000636C 8A1C                    	mov	BL,[SI]
 29940 0000636E F3A4                    	rep	movsb
 29941                                  
 29942                                  	; DI = 5Ch + 12 = 5Ch + 0Ch = 68h
 29943                                  
 29944 00006370 31C0                    	xor	AX,AX			; zero extent, etc for CPM
 29945 00006372 AB                      	stosw
 29946 00006373 AB                      	stosw
 29947                                  
 29948                                  	; DI = 5Ch + 12 + 4 = 5Ch + 10h = 6Ch
 29949                                  
 29950 00006374 59                      	pop	CX
 29951 00006375 5E                      	pop	SI			; get block
 29952 00006376 1F                      	pop	DS
 29953 00006377 1E                      	push	DS			; save (again)
 29954 00006378 56                      	push	SI
 29955                                  	;lds	si,[si+0Ah]
 29956 00006379 C5740A                  	lds	SI,[SI+EXEC0.6C_FCB]	; get 6C FCB
 29957                                  
 29958                                  	; DS points to user space 6C FCB
 29959                                  
 29960 0000637C 8A3C                    	mov	BH,[SI] 		; do same as above
 29961 0000637E F3A4                    	rep	movsb
 29962 00006380 AB                      	stosw
 29963 00006381 AB                      	stosw
 29964 00006382 5E                      	pop	SI			; get block (last time)
 29965 00006383 1F                      	pop	DS
 29966                                  	;ld	si,[si+2]
 29967 00006384 C57402                  	lds	SI,[SI+EXEC0.COM_LINE]	; command line
 29968                                  
 29969                                  	; DS points to user space 80 command line
 29970                                  
 29971 00006387 80C980                  	or	CL,80h
 29972 0000638A 89CF                    	mov	DI,CX
 29973 0000638C F3A4                    	rep	movsb			; Wham!
 29974                                  
 29975                                  	; Process BX into default AX (validity of drive specs on args).
 29976                                  	; We no longer care about DS:SI.
 29977                                  
 29978 0000638E FEC9                    	dec	CL			; get 0FFh in CL
 29979 00006390 88F8                    	mov	AL,BH
 29980 00006392 30FF                    	xor	BH,BH
 29981                                  	;invoke	GetVisDrv
 29982 00006394 E8C705                  	call	GetVisDrv
 29983 00006397 7302                    	jnc	short Exec_BL
 29984                                  
 29985 00006399 88CF                    	mov	BH,CL
 29986                                  
 29987                                  Exec_BL:
 29988 0000639B 88D8                    	mov	AL,BL
 29989 0000639D 30DB                    	xor	BL,BL
 29990                                  	;invoke	GetVisDrv
 29991 0000639F E8BC05                  	call	GetVisDrv
 29992 000063A2 7302                    	jnc	short Exec_Set_Return
 29993                                  
 29994 000063A4 88CB                    	mov	BL,CL
 29995                                  
 29996                                  Exec_Set_Return:
 29997                                  	;invoke	Get_User_Stack			; get his return address
 29998 000063A6 E862B2                  	call	Get_User_Stack
 29999                                  
 30000                                  	;push	word [si+14h]
 30001 000063A9 FF7414                  	push	word [SI+user_env.user_CS]	; suck out the CS and IP
 30002                                  	;push	word [si+12h]
 30003 000063AC FF7412                  	push	word [SI+user_env.user_IP]
 30004                                  	;push	word [si+14h]
 30005 000063AF FF7414                  	push	word [SI+user_env.user_CS]	; suck out the CS and IP
 30006                                  	;push	word [si+12h]
 30007 000063B2 FF7412                  	push	word [SI+user_env.user_IP]
 30008                                  	;pop	word [ES:0Ah]
 30009 000063B5 268F060A00              	pop	WORD [ES:PDB.EXIT]
 30010                                  	;pop	word [ES:0Ch]
 30011 000063BA 268F060C00              	pop	WORD [ES:PDB.EXIT+2]
 30012                                  
 30013 000063BF 31C0                    	xor	AX,AX
 30014 000063C1 8ED8                    	mov	DS,AX
 30015                                  					; save them where we can get them
 30016                                  					; later when the child exits.
 30017                                  	;pop	word [88h]
 30018 000063C3 8F068800                	pop	word [addr_int_terminate] ; 22h*4
 30019                                  	;pop	word [90h]
 30020 000063C7 8F068A00                	pop	word [addr_int_terminate+2] ; (22h*4)+2
 30021                                  
 30022 000063CB 36C706[DA02]8000        	mov	WORD [SS:DMAADD],80h	; SS Override
 30023 000063D2 368E1E[DE02]            	mov	DS,[SS:CurrentPDB]	; SS Override
 30024 000063D7 368C1E[DC02]            	mov	[SS:DMAADD+2],DS	; SS Override
 30025                                  
 30026                                  	;test	byte [bp-5],1
 30027 000063DC F646FB01                	test	Exec_Func,exec_func_no_execute
 30028 000063E0 7427                    	jz	short exec_go
 30029                                  
 30030 000063E2 36C536[1614]            	lds	SI,[SS:exec_init_SP]	; get stack SS Override
 30031                                  	;les	di,[bp-4]
 30032 000063E7 C47EFC                  	les	DI,Exec_Blk		; and block for return
 30033                                  	;mov	[es:di+10h],ds
 30034 000063EA 268C5D10                	mov	[ES:DI+EXEC1.SS],DS	; return SS
 30035                                  
 30036 000063EE 4E                      	dec	SI			; 'push' default AX
 30037 000063EF 4E                      	dec	SI
 30038 000063F0 891C                    	mov	[SI],BX 		; save default AX reg
 30039                                  	;mov	[es:di+0Eh], si
 30040 000063F2 2689750E                	mov	[ES:DI+EXEC1.SP],SI	; return 'SP'
 30041                                  
 30042 000063F6 36C506[1A14]            	lds	AX,[SS:exec_init_IP]	; SS Override
 30043                                  	;mov	[es:di+14h],ds
 30044 000063FB 268C5D14                	mov	[ES:DI+EXEC1.CS],DS	; initial entry stuff
 30045                                  	;mov	[es:di+12h],ax
 30046 000063FF 26894512                	mov	[ES:DI+EXEC1.IP],AX
 30047                                  	
 30048                                  	;leave
 30049 00006403 89EC                    	mov	sp,bp
 30050 00006405 5D                      	pop	bp	
 30051                                  
 30052                                  	;transfer SYS_RET_OK
 30053 00006406 E9F4B2                  	jmp	SYS_RET_OK
 30054                                  
 30055                                  exec_go:
 30056 00006409 36C536[1A14]            	lds	SI,[SS:exec_init_IP]	; get entry point SS Override
 30057 0000640E 36C43E[1614]            	les	DI,[SS:exec_init_SP]	; new stack SS Override
 30058 00006413 8CC0                    	mov	AX,ES
 30059                                  
 30060                                  	; MSDOS 6.0
 30061                                  	;cmp	byte [SS:DosHasHMA],0	; Q: is dos in HMA (M021)
 30062                                  	;je	short Xfer_To_User	; N: transfer control to user
 30063                                  
 30064                                  	;push	ds			; Y: control must go to low mem stub
 30065                                  	;	
 30066                                  	;push	cs			;    where we disable a20 and Xfer 
 30067                                  	;pop	ds			;    control to user 
 30068                                  	;
 30069                                  	;or	byte [DOS_FLAG],EXECA20OFF ; M068:
 30070                                  	;				; M004: Set bit to signal int 21
 30071                                  	;				; ah = 25 & ah= 49. See dossym.inc 
 30072                                  	;				; under TAG M003 & M009 for 
 30073                                  	;				; explanation
 30074                                  	;mov	[A20OFF_PSP],dx		; M068: set the PSP for which A20 is
 30075                                  	;				; M068: going to be turned OFF.
 30076                                  	;
 30077                                  	;mov	ax,ds			; ax = segment of low mem stub
 30078                                  	;pop	ds
 30079                                  	;
 30080                                  	;push	ax			; ret far into the low mem stub
 30081                                  	;mov	ax,Disa20_Xfer
 30082                                  	;push	ax
 30083                                  	;mov	AX,ES			; restore ax
 30084                                  	;retf
 30085                                  
 30086                                  Xfer_To_User:
 30087                                  	; DS:SI points to entry point
 30088                                  	; AX:DI points to initial stack
 30089                                  	; DX has PDB pointer
 30090                                  	; BX has initial AX value
 30091                                  
 30092 00006415 FA                      	cli
 30093                                  	; 15/08/2018
 30094 00006416 36C606[CF02]00          	mov	BYTE [SS:INDOS],0	; SS Override
 30095                                  
 30096 0000641C 8ED0                    	mov	SS,AX			; set up user's stack
 30097 0000641E 89FC                    	mov	SP,DI			; and SP
 30098 00006420 FB                      	sti
 30099                                  
 30100 00006421 1E                      	push	DS			; fake long call to entry
 30101 00006422 56                      	push	SI
 30102 00006423 8EC2                    	mov	ES,DX			; set up proper seg registers
 30103 00006425 8EDA                    	mov	DS,DX
 30104 00006427 89D8                    	mov	AX,BX			; set up proper AX
 30105                                  
 30106 00006429 CB                      	retf
 30107                                  
 30108                                  ; 04/08/2018 - Retro DOS v3.0
 30109                                  
 30110                                  ;----------------------------------------------------------------------------
 30111                                  ;
 30112                                  ;----------------------------------------------------------------------------
 30113                                  
 30114                                  ExecRead:
 30115 0000642A E80C00                  	CALL	Exec_Dealloc
 30116                                  	;mov	bx,[bp-8]
 30117 0000642D 8B5EF8                  	MOV	bx,Exec_FH
 30118 00006430 55                      	PUSH	BP
 30119 00006431 E8AB0A                  	call	_$READ
 30120 00006434 5D                      	POP	BP
 30121 00006435 E80C00                  	CALL	Exec_Alloc
 30122 00006438 C3                      	retn
 30123                                  
 30124                                  ;----------------------------------------------------------------------------
 30125                                  ;
 30126                                  ;----------------------------------------------------------------------------
 30127                                  
 30128                                  Exec_Dealloc:
 30129 00006439 53                      	push	BX
 30130                                  	;mov	bx,0
 30131 0000643A 29DB                    	sub	BX,BX		; (bx) = ARENA_OWNER_SYSTEM
 30132 0000643C E82DBC                  	call	EcritMem
 30133 0000643F E81000                  	call	ChangeOwners
 30134 00006442 5B                      	pop	BX
 30135 00006443 C3                      	retn
 30136                                  
 30137                                  ;----------------------------------------------------------------------------
 30138                                  ;
 30139                                  ;----------------------------------------------------------------------------
 30140                                  
 30141                                  Exec_Alloc:
 30142 00006444 53                      	push	BX
 30143                                  	;mov	bx,[SS:CurrentPDB]	; SS Override
 30144 00006445 2E8B1E[DE02]            	mov	BX,[CS:CurrentPDB]  ; MSDOS 3.3
 30145 0000644A E80500                  	call	ChangeOwners
 30146 0000644D E824BC                  	call	LcritMem
 30147 00006450 5B                      	pop	BX
 30148 00006451 C3                      	retn
 30149                                  
 30150                                  ;----------------------------------------------------------------------------
 30151                                  ;
 30152                                  ;----------------------------------------------------------------------------
 30153                                  
 30154                                  ChangeOwners:
 30155 00006452 9C                      	pushf
 30156 00006453 50                      	push	AX
 30157                                  	;mov	ax,[bp-14]
 30158 00006454 8B46F2                  	mov	AX,Exec_Environ
 30159 00006457 E80900                  	call	ChangeOwner
 30160                                  	;mov	ax,[bp-18]
 30161 0000645A 8B46EE                  	mov	AX,Exec_Load_Block
 30162 0000645D E80300                  	call	ChangeOwner
 30163 00006460 58                      	pop	AX
 30164 00006461 9D                      	popf
 30165                                  chgown_retn:
 30166 00006462 C3                      	retn
 30167                                  
 30168                                  ;----------------------------------------------------------------------------
 30169                                  ;
 30170                                  ;----------------------------------------------------------------------------
 30171                                  
 30172                                  ChangeOwner:
 30173 00006463 09C0                    	or	AX,AX			; is area allocated?
 30174 00006465 74FB                    	jz	short chgown_retn	; no, do nothing
 30175 00006467 48                      	dec	AX
 30176 00006468 1E                      	push	DS
 30177 00006469 8ED8                    	mov	DS,AX
 30178 0000646B 891E0100                	mov	[ARENA.OWNER],BX
 30179 0000646F 1F                      	pop	DS
 30180 00006470 C3                      	retn
 30181                                  
 30182                                  
 30183                                  ; MSDOS 6.0
 30184                                  ;----------------------------------------------------------------------------
 30185                                  ;
 30186                                  ;----------------------------------------------------------------------------
 30187                                  
 30188                                  ;Procedure	Scan_Execname,near
 30189                                  ;	ASSUME	SS:DosData
 30190                                  ;
 30191                                  ;	lds	SI,ExecName		; DS:SI points to name
 30192                                  ;Entry	Scan_Execname1			; M028
 30193                                  ;Save_Begin:				;
 30194                                  ;	mov	CX,SI			; CX= starting addr
 30195                                  ;Scan0:					;
 30196                                  ;	lodsb				; get char
 30197                                  ;
 30198                                  ;	cmp	AL,':'			; is ':' , may be A:name
 30199                                  ;	jz	save_begin		; yes, save si
 30200                                  ;	cmp	AL,'\'                  ; is '\', may be A:\name
 30201                                  ;	jz	save_begin		; yes, save si
 30202                                  ;	cmp	AL,0			; is end of name
 30203                                  ;	jnz	scan0			; no, continue scanning
 30204                                  ;	sub	SI,CX			; get name's length
 30205                                  ;	xchg	SI,CX			; cx= length, si= starting addr
 30206                                  ;
 30207                                  ;	return
 30208                                  ;
 30209                                  ;EndProc Scan_Execname
 30210                                  
 30211                                  ; MSDOS 6.0
 30212                                  ;----------------------------------------------------------------------------
 30213                                  ;
 30214                                  ;----------------------------------------------------------------------------
 30215                                  
 30216                                  ;Procedure    Scan_Special_Entries,near
 30217                                  ;	assume	SS:DOSDATA
 30218                                  ;
 30219                                  ;	dec	CX			; cx= name length
 30220                                  ;;M060	mov	DI,[Special_Entries]	; es:di -> addr of special entries
 30221                                  ;					;reset to current version
 30222                                  ;	mov    [Special_Version],(Minor_Version SHL 8) + Major_Version
 30223                                  ;;***	call	Reset_Version
 30224                                  ;
 30225                                  ;;M060	push	SS
 30226                                  ;;M060	pop	ES
 30227                                  ;
 30228                                  ;	les	DI,SS:UU_IFS_DOS_CALL	;M060; ES:DI --> Table in SETVER.SYS
 30229                                  ;	mov	AX,ES			;M060; First do a NULL ptr check to
 30230                                  ;	or	AX,DI			;M060; be sure the table exists
 30231                                  ;	jz	End_List		;M060; If ZR then no table
 30232                                  ;
 30233                                  ;GetEntries:
 30234                                  ;	mov	AL,ES:[DI]		; end of list
 30235                                  ;	or	AL,AL
 30236                                  ;	jz	End_List		; yes
 30237                                  ;
 30238                                  ;	mov	[Temp_Var2],DI		; save di
 30239                                  ;	cmp	AL,CL			; same length ?
 30240                                  ;	jnz	SkipOne 		; no
 30241                                  ;
 30242                                  ;	inc	DI			; es:di -> special name
 30243                                  ;	push	CX			; save length and name addr
 30244                                  ;	push	SI
 30245                                  ;
 30246                                  ;;
 30247                                  ;; M050 - BEGIN
 30248                                  ;;
 30249                                  ;	push	ax			; save len
 30250                                  ;sse_next_char:
 30251                                  ;	lodsb
 30252                                  ;	call	UCase
 30253                                  ;	scasb
 30254                                  ;	jne	Not_Matched
 30255                                  ;	loop	sse_next_char
 30256                                  ;	
 30257                                  ;;
 30258                                  ;;	repz	cmpsb			; same name ?
 30259                                  ;;
 30260                                  ;;	jnz	Not_Matched		; no
 30261                                  ;;
 30262                                  ;	pop	ax			; take len off the stack
 30263                                  ;;
 30264                                  ;; M050 - END
 30265                                  ;;
 30266                                  ;	mov	AX,ES:[DI]		; get special version
 30267                                  ;	mov	[Special_Version],AX	; save it
 30268                                  ;
 30269                                  ;;***	mov	AL,ES:[DI+2]		; get fake count
 30270                                  ;;***	mov	[Fake_Count],AL 	; save it
 30271                                  ;
 30272                                  ;	pop	SI
 30273                                  ;	pop	CX
 30274                                  ;	jmp	SHORT end_list
 30275                                  ;
 30276                                  ;Not_Matched:
 30277                                  ;	pop	ax			; get len from stack ; M050
 30278                                  ;	pop	SI			; restore si,cx
 30279                                  ;	pop	CX
 30280                                  ;
 30281                                  ;SkipOne:
 30282                                  ;	mov	DI,[Temp_Var2]		; restore old di use SS Override
 30283                                  ;	xor	AH,AH			; position to next entry
 30284                                  ;	add	DI,AX
 30285                                  ;
 30286                                  ;	add	DI,3			; DI -> next entry length
 30287                                  ;;***	add	DI,4			; DI -> next entry length
 30288                                  ;
 30289                                  ;	jmp	Getentries
 30290                                  ;
 30291                                  ;End_List:
 30292                                  ;	return
 30293                                  ;
 30294                                  ;EndProc Scan_Special_Entries
 30295                                  
 30296                                  
 30297                                  ; 04/08/2018 - Retro DOS v3.0
 30298                                  ; IBMDOS.COm (MSDOS 3.3, 1987) - Offset 633Dh
 30299                                  
 30300                                  ;----------------------------------------------------------------------------
 30301                                  ;SUBTTL Terminate and stay resident handler
 30302                                  ;
 30303                                  ; Input:    DX is  an  offset  from  CurrentPDB  at which to
 30304                                  ;	    truncate the current block.
 30305                                  ;
 30306                                  ; output:   The current block is truncated (expanded) to be [DX+15]/16
 30307                                  ;	    paragraphs long.  An exit is simulated via resetting CurrentPDB
 30308                                  ;	    and restoring the vectors.
 30309                                  ;
 30310                                  ;----------------------------------------------------------------------------
 30311                                  
 30312                                  _$KEEP_PROCESS:
 30313 00006471 50                      	push	AX			; keep exit code around
 30314                                  	;mov	byte [SS:EXIT_TYPE],3
 30315 00006472 36C606[1705]03          	mov	BYTE [SS:EXIT_TYPE],EXIT_KEEP_PROCESS
 30316 00006478 368E06[DE02]            	mov	ES,[SS:CurrentPDB]
 30317 0000647D 83FA06                  	cmp	DX,6h			; keep enough space around for system
 30318 00006480 7303                    	jae	short Keep_Shrink	; info
 30319                                  
 30320 00006482 BA0600                  	mov	DX,6h
 30321                                  
 30322                                  Keep_Shrink:
 30323 00006485 89D3                    	mov	BX,DX
 30324 00006487 53                      	push	BX
 30325 00006488 06                      	push	ES
 30326 00006489 E8BF01                  	call	_$SETBLOCK		; ignore return codes.
 30327 0000648C 1F                      	pop	DS
 30328 0000648D 5B                      	pop	BX
 30329 0000648E 7207                    	jc	short Keep_Done		; failed on modification
 30330                                  
 30331 00006490 8CD8                    	mov	AX,DS
 30332 00006492 01D8                    	add	AX,BX
 30333                                  	;mov	[2],ax
 30334 00006494 A30200                  	mov	[PDB.BLOCK_LEN],AX	;PBUGBUG
 30335                                  
 30336                                  Keep_Done:
 30337 00006497 58                      	pop	AX
 30338 00006498 EB26                    	jmp	SHORT exit_inner	; and let abort take care of the rest
 30339                                  
 30340                                  ;----------------------------------------------------------------------------
 30341                                  ;
 30342                                  ;----------------------------------------------------------------------------
 30343                                  
 30344                                  STAY_RESIDENT:
 30345                                  	;mov	ax,3100h
 30346 0000649A B80031                  	mov	AX,(KEEP_PROCESS<<8)+0 ; Lower part is return code;PBUGBUG
 30347 0000649D 83C20F                  	add	DX,15
 30348 000064A0 D1DA                    	rcr	DX,1
 30349 000064A2 B103                    	mov	CL,3
 30350 000064A4 D3EA                    	shr	DX,CL
 30351                                  
 30352 000064A6 E901B0                  	jmp	COMMAND
 30353                                  
 30354                                  ;----------------------------------------------------------------------------
 30355                                  ;SUBTTL $EXIT - return to parent process
 30356                                  ;   Assembler usage:
 30357                                  ;	    MOV     AL, code
 30358                                  ;	    MOV     AH, Exit
 30359                                  ;	    INT     int_command
 30360                                  ;   Error return:
 30361                                  ;	    None.
 30362                                  ;
 30363                                  ;----------------------------------------------------------------------------
 30364                                  
 30365                                  _$EXIT:
 30366                                  	; 04/08/2018 - Retro DOS v3.0
 30367                                  	; IBMDOSDOS.COM (MSDOS 3.3, 1987) - Offset 6375h
 30368 000064A9 30E4                    	xor	AH,AH
 30369 000064AB 368626[F902]            	xchg	AH,[SS:DidCTRLC]
 30370 000064B0 08E4                    	or	AH,AH
 30371                                  	;mov	BYTE [SS:EXIT_TYPE],0
 30372 000064B2 36C606[1705]00          	mov	BYTE [SS:EXIT_TYPE],EXIT_TERMINATE
 30373 000064B8 7406                    	jz	short exit_inner
 30374                                  	;mov	BYTE [SS:EXIT_TYPE],1
 30375 000064BA 36C606[1705]01          	mov	BYTE [SS:EXIT_TYPE],EXIT_CTRL_C
 30376                                  
 30377                                  	;entry	Exit_inner
 30378                                  exit_inner:
 30379 000064C0 E848B1                  	call	Get_User_Stack		;PBUGBUG
 30380                                  
 30381 000064C3 36FF36[DE02]            	push	word [ss:CurrentPDB]
 30382                                  	;pop	word [si+14h]
 30383 000064C8 8F4414                  	pop	word [SI+user_env.user_CS] ;PBUGBUG
 30384 000064CB EB08                    	jmp	short abort_inner
 30385                                  
 30386                                  ;BREAK <$ABORT -- Terminate a process>
 30387                                  ;----------------------------------------------------------------------------
 30388                                  ; Inputs:
 30389                                  ;	user_CS:00 must point to valid program header block
 30390                                  ; Function:
 30391                                  ;	Restore terminate and Cntrl-C addresses, flush buffers and transfer
 30392                                  ;	to the terminate address
 30393                                  ; Returns:
 30394                                  ;	TO THE TERMINATE ADDRESS
 30395                                  ;----------------------------------------------------------------------------
 30396                                  
 30397                                  _$ABORT:
 30398 000064CD 30C0                    	xor	AL,AL
 30399                                  	;mov	byte [SS:EXIT_TYPE],0
 30400                                  	;mov	byte [SS:EXIT_TYPE],AL ; = 0
 30401 000064CF 36C606[1705]00          	mov	byte [SS:EXIT_TYPE],EXIT_ABORT
 30402                                  
 30403                                  	; abort_inner must have AL set as the exit code! The exit type
 30404                                  	; is retrieved from exit_type. Also, the PDB at user_CS needs
 30405                                  	; to be correct as the one that is terminating.
 30406                                  
 30407                                  abort_inner:
 30408 000064D5 368A26[1705]            	mov	AH,[SS:EXIT_TYPE]
 30409 000064DA 36A3[E202]              	mov	[SS:exit_code],AX
 30410 000064DE E82AB1                  	call	Get_User_Stack
 30411                                  
 30412                                  	;mov	ds,[si+14h]
 30413 000064E1 8E5C14                  	mov	DS,[SI+user_env.user_CS] ; set up old interrupts ;PBUGBUG
 30414 000064E4 31C0                    	xor	AX,AX
 30415 000064E6 8EC0                    	mov	ES,AX
 30416                                  	;mov	si,10
 30417 000064E8 BE0A00                  	mov	SI,SAVEXIT
 30418                                  	;mov	di,88h
 30419 000064EB BF8800                  	mov	DI,addr_int_terminate
 30420 000064EE A5                      	movsw
 30421 000064EF A5                      	movsw
 30422 000064F0 A5                      	movsw
 30423 000064F1 A5                      	movsw
 30424 000064F2 A5                      	movsw
 30425 000064F3 A5                      	movsw
 30426 000064F4 E98EF4                  	jmp	reset_environment
 30427                                  
 30428                                  ; MSDOS 6.0
 30429                                  ;----------------------------------------------------------------------------
 30430                                  ;
 30431                                  ; fixexepatch will point to this is DOS loads low. 
 30432                                  ;
 30433                                  ;----------------------------------------------------------------------------
 30434                                  
 30435                                  ;retexepatch	proc	near
 30436                                  ;	
 30437                                  ;	ret
 30438                                  ;
 30439                                  ;retexepatch 	endp
 30440                                  
 30441                                  
 30442                                  ;============================================================================
 30443                                  ; ALLOC.ASM, MSDOS 6.0, 1991
 30444                                  ;============================================================================
 30445                                  ; 04/08/2018 - Retro DOS v3.0
 30446                                  
 30447                                  ;	TITLE ALLOC.ASM - memory arena manager	NAME Alloc
 30448                                  
 30449                                  ;**
 30450                                  ;	Microsoft Confidential
 30451                                  ;	Copyright (C) Microsoft Corporation 1991
 30452                                  ;	All Rights Reserved.
 30453                                  ;
 30454                                  ;	Memory related system calls and low level routines for MSDOS 2.X.
 30455                                  ;	I/O specs are defined in DISPATCH.
 30456                                  ;
 30457                                  ;	$ALLOC
 30458                                  ;	$SETBLOCK
 30459                                  ;	$DEALLOC
 30460                                  ;	$AllocOper
 30461                                  ;	arena_free_process
 30462                                  ;	arena_next
 30463                                  ;	check_signature
 30464                                  ;	Coalesce
 30465                                  ;
 30466                                  ;	Modification history:
 30467                                  ;
 30468                                  ;	    Created: ARR 30 March 1983
 30469                                  ;
 30470                                  ;	    Revision: M000 - added support for allocing UMBs. 7/9/90
 30471                                  ;		      M003 - added support for link/unlink UMBs from
 30472                                  ;			     DOS arena chain. 7/18/90
 30473                                  ;		      M009 - Added error returns invalid function and 
 30474                                  ;			     arena trashed in set link state call.
 30475                                  ;		      M010 - Release UMB arenas allocated to current PDB
 30476                                  ;			     if UMB_HEAD is initialized.
 30477                                  ;
 30478                                  ;		      M016 - MACE utilities mkeyrate.com version 1.0 
 30479                                  ;			     support. Please see under M009 in 
 30480                                  ;			     ..\inc\dossym.inc. 8/31/90.
 30481                                  ;
 30482                                  ;		      M061 - In GetLastArena, if linking in UMBs check to make
 30483                                  ;			     sure that umb_head arena is valid and also make
 30484                                  ;			     sure that the previous arena is pointing to 
 30485                                  ;			     umb_head.
 30486                                  ;
 30487                                  ;		      M064 - allow HIGH_ONLY bit to be set by a call to 
 30488                                  ;			     set allloc strategy.
 30489                                  ;			     use STRAT_MASK to mask out bits 6 & 7 of 
 30490                                  ;			     bx in AllocSetStrat.
 30491                                  ;
 30492                                  ;		      M068 - use a count value (A20OFF_COUNT) rather than
 30493                                  ;			     a bit to indicate to dos dispatcher to turn
 30494                                  ;			     a20 off before iret. See M016.
 30495                                  ;
 30496                                  
 30497                                  ;	BREAK	<memory allocation utility routines>
 30498                                  
 30499                                  
 30500                                  ; 15/04/2018 - Retro DOS v2.0
 30501                                  ;----------------------------------------------------------------------------
 30502                                  ; xenix memory calls for MSDOS
 30503                                  ;
 30504                                  ; CAUTION: The following routines rely on the fact that arena_signature and
 30505                                  ; arena_owner_system are all equal to zero and are contained in DI.
 30506                                  ;
 30507                                  ;INCLUDE DOSSEG.ASM
 30508                                  
 30509                                  ;CODE	SEGMENT BYTE PUBLIC  'CODE'
 30510                                  ;       ASSUME  SS:DOSGROUP,CS:DOSGROUP
 30511                                  
 30512                                  ;.xlist
 30513                                  ;.xcref
 30514                                  ;INCLUDE DOSSYM.ASM
 30515                                  ;INCLUDE DEVSYM.ASM
 30516                                  ;.cref
 30517                                  ;.list
 30518                                  
 30519                                  ;TITLE ALLOC.ASM - memory arena manager
 30520                                  ;NAME Alloc
 30521                                  
 30522                                  ;SUBTTL memory allocation utility routines
 30523                                  ;PAGE
 30524                                  ;
 30525                                  ; arena data
 30526                                  ;
 30527                                  ;       i_need  arena_head,WORD         ; seg address of start of arena
 30528                                  ;       i_need  CurrentPDB,WORD         ; current process data block addr
 30529                                  ;       i_need  FirstArena,WORD         ; first free block found
 30530                                  ;       i_need  BestArena,WORD          ; best free block found
 30531                                  ;       i_need  LastArena,WORD          ; last free block found
 30532                                  ;       i_need  AllocMethod,BYTE        ; how to alloc first(best)last
 30533                                  
 30534                                  ;**	Arena_Free_Process
 30535                                  ;----------------------------------------------------------------------------
 30536                                  ;	Free all arena blocks allocated to a prOcess
 30537                                  ;
 30538                                  ;	ENTRY	(bx) = PID of process
 30539                                  ;	EXIT	none
 30540                                  ;	USES	????? BUGBUG
 30541                                  ;----------------------------------------------------------------------------
 30542                                  
 30543                                  arena_free_process:
 30544                                  	; 04/08/2018 - Retro DOS v3.0
 30545 000064F7 36A1[2400]                      MOV	AX,[SS:arena_head]
 30546                                  arena_free_process_start:
 30547 000064FB BF0000                  	MOV     DI,ARENA.SIGNATURE ; 0
 30548                                  	;MOV	AX,[SS:arena_head] ; 15/04/2018  
 30549 000064FE E81F00                          CALL    check_signature         ; ES <- AX, check for valid block
 30550                                  
 30551                                  arena_free_process_loop:
 30552                                          ;retc
 30553 00006501 722C                            JC	SHORT AFP_RETN	; Retro DOS v2.0 - 05/03/2018
 30554 00006503 06                      	PUSH    ES
 30555 00006504 1F                              POP     DS
 30556                                  	;cmp	[1],bx 
 30557 00006505 391E0100                        CMP     [ARENA.OWNER],BX	; is block owned by pid?
 30558 00006509 7504                            JNZ     SHORT arena_free_next	; no, skip to next
 30559                                  	; 20/05/2019
 30560                                  	;mov	[1],di
 30561 0000650B 893E0100                        MOV     [ARENA.OWNER],DI	; yes... free him
 30562                                  
 30563                                  arena_free_next:
 30564                                  	;cmp	byte [di],5Ah ;'Z'
 30565 0000650F 803D5A                          CMP     BYTE [DI],arena_signature_end
 30566                                                                          ; end of road, Jack?
 30567                                          ;retz				; never come back no more
 30568 00006512 741B                    	JZ	SHORT AFP_RETN  ;msdos 3.3 (& MSDOS 2.11)
 30569                                  	; MSDOS 6.0
 30570                                  	;jz	short arena_chk_umbs
 30571                                          
 30572 00006514 E80200                  	CALL    arena_next              ; next item in ES/AX carry set if trash
 30573 00006517 EBE8                            JMP     SHORT arena_free_process_loop
 30574                                  
 30575                                  	; MSDOS 6.0
 30576                                  ;arena_chk_umbs:			; M010 - Start
 30577                                  	;mov	ax,[umb_head]		; ax = umb_head
 30578                                  	;cmp	ax,0FFFFh		; Q: is umb_head initialized
 30579                                  	;je	short ret_label		; N: we're done
 30580                                  	;
 30581                                  	;mov	di,ds			; di = last arena
 30582                                  	;cmp	di,ax			; Q: is last arena above umb_head
 30583                                  	;jae	short ret_label		; Y: we've scanned umbs also. done.
 30584                                  	;jmp	short arena_free_process_start
 30585                                  					; M010 - End
 30586                                  
 30587                                  ;AFP_RETN:
 30588                                  ;	RETN
 30589                                  
 30590                                  ;	BREAK	<Arena Helper Routines>
 30591                                  
 30592                                  ;**	Arena_Next - Find Next item in Arena
 30593                                  ;----------------------------------------------------------------------------
 30594                                  ;	ENTRY	DS - pointer to block head
 30595                                  ;		(di) = 0
 30596                                  ;	EXIT	AX,ES - pointers to next head
 30597                                  ;		'C' set iff arena damaged
 30598                                  ;----------------------------------------------------------------------------
 30599                                  
 30600                                  arena_next:
 30601 00006519 8CD8                            MOV     AX,DS                   ; AX <- current block
 30602 0000651B 03060300                        ADD     AX,[ARENA.SIZE]		; AX <- AX + current block length
 30603 0000651F 40                              INC     AX                      ; remember that header!
 30604                                  ;
 30605                                  ;       fall into check_signature and return
 30606                                  ;
 30607                                  ;       CALL    check_signature         ; ES <- AX, carry set if error
 30608                                  ;       RET
 30609                                  
 30610                                  ;**	Check_Signature - Check Memory Block Signature
 30611                                  ;----------------------------------------------------------------------------
 30612                                  ;	ENTRY	(AX) = address of block header
 30613                                  ;		(di) = 0
 30614                                  ;	EXIT	 ES = AX
 30615                                  ;		'C' clear if signature good
 30616                                  ;		'C' set if signature bad
 30617                                  ;	USES	ES, Flags
 30618                                  ;----------------------------------------------------------------------------
 30619                                  
 30620                                  check_signature:        
 30621                                  
 30622 00006520 8EC0                    	MOV     ES,AX                   ; ES <- AX
 30623                                  	;cmp	byte [es:di],4Dh ; 'M'
 30624 00006522 26803D4D                        CMP     BYTE [ES:DI],arena_signature_normal
 30625                                                                          ; IF next signature = not_end THEN
 30626 00006526 7407                            JZ      SHORT check_signature_ok ;   GOTO ok
 30627                                  	;cmp 	byte [es:di],5Ah ; 'Z'
 30628 00006528 26803D5A                        CMP     BYTE [ES:DI],arena_signature_end
 30629                                                                          ; IF next signature = end then
 30630 0000652C 7401                            JZ      SHORT check_signature_ok ;   GOTO ok
 30631 0000652E F9                              STC                             ; set error
 30632                                  ;ret_label: ; MSDOS 6.0
 30633                                  AFP_RETN:
 30634                                   	;  Retro DOS v.20 - 05/03/2018
 30635                                  check_signature_ok:
 30636                                  COALESCE_RETN:
 30637 0000652F C3                      	RETN
 30638                                  
 30639                                  ;**	Coalesce - Combine free blocks ahead with current block
 30640                                  ;----------------------------------------------------------------------------
 30641                                  ;	Coalesce adds the block following the argument to the argument block,
 30642                                  ;	iff it's free.  Coalesce is usually used to join free blocks, but
 30643                                  ;	some callers (such as $setblock) use it to join a free block to it's
 30644                                  ;	preceeding allocated block.
 30645                                  ;
 30646                                  ;	ENTRY	(ds) = pointer to the head of a free block
 30647                                  ;		(di) = 0
 30648                                  ;	EXIT	'C' clear if OK
 30649                                  ;		  (ds) unchanged, this block updated
 30650                                  ;		  (ax) = address of next block, IFF not at end
 30651                                  ;		'C' set if arena trashed
 30652                                  ;	USES	(cx)
 30653                                  ;----------------------------------------------------------------------------
 30654                                          
 30655                                  Coalesce:
 30656                                  	;cmp	byte [di],5Ah ; 'Z'
 30657 00006530 803D5A                  	CMP     BYTE [DI],arena_signature_end
 30658                                                                          ; IF current signature = END THEN
 30659                                          ;retz				;   GOTO ok
 30660 00006533 74FA                            jz	short COALESCE_RETN
 30661 00006535 E8E1FF                  	CALL    arena_next              ; ES, AX <- next block, Carry set if error
 30662                                          ;retc				; IF no error THEN GOTO check
 30663 00006538 72F5                    	jc	short COALESCE_RETN
 30664                                  
 30665                                  coalesce_check:
 30666                                  	;cmp	[es:1],di
 30667 0000653A 26393E0100                      CMP     [ES:ARENA.OWNER],DI
 30668                                          ;retnz				; IF next block isnt free THEN return
 30669 0000653F 75EE                            JNZ	SHORT COALESCE_RETN
 30670                                  	;mov	cx,[ES:3]
 30671 00006541 268B0E0300              	MOV     CX,[ES:ARENA.SIZE]	; CX <- next block size
 30672 00006546 41                              INC     CX                      ; CX <- CX + 1 (for header size)
 30673                                          ;ADD	[3],CX
 30674 00006547 010E0300                	ADD     [ARENA.SIZE],CX		; current size <- current size + CX
 30675 0000654B 268A0D                          MOV     CL,[ES:DI]              ; move up signature
 30676 0000654E 880D                            MOV     [DI],CL
 30677 00006550 EBDE                            JMP     SHORT Coalesce		; try again
 30678                                  
 30679                                  ; 04/08/2018 - Retro DOS v3.0
 30680                                  ; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 641Fh
 30681                                  
 30682                                  ;	BREAK  <$Alloc - allocate space in memory>
 30683                                  
 30684                                  ; MSDOS 6.0
 30685                                  ;----------------------------------------------------------------------------
 30686                                  ;**	$Alloc - Allocate Memory Space
 30687                                  ;
 30688                                  ;	$Alloc services the INT21 that allocates memory space to a program.
 30689                                  ;	Alloc returns a pointer to a free block of memory that
 30690                                  ;	has the requested size in paragraphs.
 30691                                  ;
 30692                                  ;	If the allocation strategy is HIGH_FIRST or HIGH_ONLY memory is 
 30693                                  ;	scanned from umb_head if not from arena_head. If the strategy is
 30694                                  ; 	HIGH_FIRST the scan is continued from arena_head if a block of 
 30695                                  ;	appropriate size is not found in the UMBs. If the strategy is 
 30696                                  ;	HIGH_FIRST+HIGH_ONLY only the UMBs are scanned for memory.
 30697                                  ;
 30698                                  ;	In either case if bit 0 of UmbFlag is not initialized then the scan
 30699                                  ;	starts from arena_head.
 30700                                  ;
 30701                                  ;	Assembler usage:
 30702                                  ;           MOV     BX,size
 30703                                  ;           MOV     AH,Alloc
 30704                                  ;           INT     21h
 30705                                  ;
 30706                                  ;	BUGBUG - a lot can be done to improve performance. We can set marks
 30707                                  ;	so that we start searching the arena at it's first non-trivial free
 30708                                  ;	block, we can peephole the code, etc. (We can move some subr calls
 30709                                  ;	inline, etc.) I assume that this is called rarely and that the arena
 30710                                  ;	doesn't have too many memory objects in it beyond the first free one.
 30711                                  ;	verify that this is true; if so, this can stay as is
 30712                                  ;
 30713                                  ;	ENTRY	(bx) = requested size, in bytes
 30714                                  ;		(DS) = (ES) = DOSGROUP
 30715                                  ;	EXIT	'C' clear if memory allocated
 30716                                  ;		  (ax:0) = address of requested memory
 30717                                  ;		'C' set if request failed
 30718                                  ;		  (AX) = error_not_enough_memory
 30719                                  ;		    (bx) = max size we could have allocated
 30720                                  ;		  (ax) = error_arena_trashed
 30721                                  ;	USES	All
 30722                                  ;----------------------------------------------------------------------------
 30723                                  
 30724                                  ; MSDOS 2.11 (& MSDOS 3.3)
 30725                                  ;----------------------------------------------------------------------------
 30726                                  ;SUBTTL $Alloc - allocate space in memory
 30727                                  ;
 30728                                  ;   Assembler usage:
 30729                                  ;           MOV     BX,size
 30730                                  ;           MOV     AH,Alloc
 30731                                  ;           INT     21h
 30732                                  ;         AX:0 is pointer to allocated memory
 30733                                  ;         BX is max size if not enough memory
 30734                                  ;
 30735                                  ;   Description:
 30736                                  ;           Alloc returns  a  pointer  to  a  free  block of
 30737                                  ;       memory that has the requested  size  in  paragraphs.
 30738                                  ;
 30739                                  ;   Error return:
 30740                                  ;           AX = error_not_enough_memory
 30741                                  ;              = error_arena_trashed
 30742                                  ;----------------------------------------------------------------------------
 30743                                  
 30744                                  _$ALLOC:
 30745                                  	; 04/08/2018 - Retro DOS v3.0
 30746                                  	;EnterCrit critMem
 30747 00006552 E817BB                  	call	EcritMem ; MSDOS 3.3 & MSDOS 6.0
 30748                                  
 30749                                  	; MSDOS 6.0
 30750                                  	;mov	ax,[arena_head]
 30751                                  	;mov	[start_arena],ax	; assume LOW_FIRST
 30752                                  	;			
 30753                                  	;test	byte [AllocMethod],HIGH_FIRST+HIGH_ONLY
 30754                                  	;				; Q: should we start scanning from 
 30755                                  	;				;    UMB's
 30756                                  	;jz	short norm_alloc	; N: scan from arena_head
 30757                                  	;	
 30758                                  	;;cmp	word [umb_head],-1	; Q: Has umb_head been initialized
 30759                                  	;;je	short norm_alloc	; N: scan from arena_head
 30760                                  	;test	byte [UmbFlag],LINKSTATE ; Q: are umb's linked
 30761                                  	;jz	short norm_alloc	; N: scan from arena_head
 30762                                  	;
 30763                                  	;mov	ax,[umb_head]
 30764                                  	;mov	[start_arena],ax	; start_arena = umb_head
 30765                                  	;
 30766                                  					; M000 - end
 30767                                  ;norm_alloc:
 30768 00006555 31C0                            XOR     AX,AX
 30769 00006557 89C7                            MOV     DI,AX
 30770                                  	; 15/03/2018
 30771 00006559 36A3[EC02]                      MOV     [SS:FirstArena],AX	; init the options
 30772 0000655D 36A3[EE02]                      MOV     [SS:BestArena],AX
 30773 00006561 36A3[F002]                      MOV     [SS:LastArena],AX
 30774 00006565 50                              PUSH    AX                      ; alloc_max <- 0
 30775                                  	; 04/08/2018
 30776                                  start_scan:
 30777                                  	; MSDOS 6.0
 30778                                  	;mov	ax,[SS:start_arena]	; M000: AX <- beginning of arena
 30779                                  	;
 30780 00006566 36A1[2400]              	MOV     AX,[SS:arena_head]	; AX <- beginning of arena
 30781 0000656A E8B3FF                  	CALL    check_signature         ; ES <- AX, carry set if error
 30782 0000656D 7212                            JC      SHORT alloc_err		; IF error THEN GOTO err
 30783                                  
 30784                                  alloc_scan:
 30785 0000656F 06                              PUSH    ES
 30786 00006570 1F                              POP     DS                      ; DS <- ES
 30787 00006571 393E0100                        CMP     [ARENA.OWNER],DI
 30788 00006575 742A                            JZ      SHORT alloc_free	; IF current block is free THEN examine
 30789                                  
 30790                                  alloc_next:
 30791                                  	; MSDOS 6.0			; M000 - start 
 30792                                  	;test	byte [UmbFlag],LINKSTATE ; Q: are umb's linked
 30793                                  	;jz	short norm_strat	; N: see if we reached last arena
 30794                                  	;
 30795                                  	;test	byte [AllocMethod],HIGH_FIRST
 30796                                  	;				; Q: is alloc strategy high_first
 30797                                  	;jz	short norm_strat	; N: see if we reached last arena
 30798                                  	;mov	ax,[start_arena]
 30799                                  	;cmp	ax,[arena_head]		; Q: did we start scan from 
 30800                                  					;    arena_head
 30801                                  	;jne	short norm_strat	; N: see if we reached last arena
 30802                                  	;mov	ax,ds			; ax = current block
 30803                                  	;cmp	ax,[umb_head]		; Q: check against umb_head 
 30804                                  	;jmp	short alloc_chk_end
 30805                                  
 30806                                  ;norm_strat:
 30807                                  	;cmp	byte [di],5Ah ; 'Z'
 30808 00006577 803D5A                          CMP     BYTE [DI],arena_signature_end
 30809                                                                          ; IF current block is last THEN
 30810 0000657A 740E                            JZ      SHORT alloc_end		;   GOTO end
 30811 0000657C E89AFF                          CALL    arena_next              ; AX, ES <- next block, Carry set if error
 30812 0000657F 73EE                            JNC     SHORT alloc_scan	; IF no error THEN GOTO scan
 30813                                  
 30814                                  alloc_err:
 30815 00006581 58                              POP     AX
 30816                                  
 30817                                  alloc_trashed:
 30818                                  	;LeaveCrit critMem
 30819 00006582 E8EFBA                  	call    LcritMem ; MSDOS 3.3 & MSDOS 6.0	
 30820                                          ;error	error_arena_trashed
 30821                                  	;mov	al,7
 30822 00006585 B007                    	MOV	AL,error_arena_trashed
 30823                                  alloc_errj:
 30824 00006587 E97FB1                  	JMP	SYS_RET_ERR
 30825                                  
 30826                                  alloc_end:
 30827 0000658A 36833E[EC02]00                  CMP	WORD [SS:FirstArena],0	; 15/03/2018
 30828 00006590 756B                    	JNZ     SHORT alloc_do_split
 30829                                  
 30830                                  	; MSDOS 6.0
 30831                                  	;mov	ax,[arena_head]
 30832                                  	;cmp	ax,[start_arena]	; Q: started scanning from arena_head
 30833                                  	;je	short alloc_fail	; Y: not enough memory
 30834                                  	;				; N:
 30835                                  	;				; Q: is the alloc strat HIGH_ONLY
 30836                                  	;test 	byte [AllocMethod],HIGH_ONLY
 30837                                  	;jnz	short alloc_fail	; Y: return size of largest UMB
 30838                                  	;
 30839                                  	;mov	[start_arena],ax	; N: start scanning from arena_head
 30840                                  	;jmp	short start_scan
 30841                                  	;				; M000 - end
 30842                                  
 30843                                  alloc_fail:
 30844                                          ;invoke Get_User_Stack
 30845 00006592 E876B0                          CALL	Get_User_Stack
 30846 00006595 5B                      	POP     BX
 30847                                          ;MOV	[SI].user_BX,BX
 30848                                  	;MOV	[SI+2],BX
 30849 00006596 895C02                  	mov	[SI+user_env.user_BX],bx
 30850                                  	;LeaveCrit critMem
 30851 00006599 E8D8BA                  	call    LcritMem ; MSDOS 3.3 & MSDOS 6.0
 30852                                  	;error	error_not_enough_memory
 30853                                  	;mov	al,8
 30854 0000659C B008                    	MOV	AL,error_not_enough_memory
 30855                                  	;jmp	short alloc_errj
 30856 0000659E E968B1                  	JMP	SYS_RET_ERR
 30857                                  
 30858                                  alloc_free:
 30859 000065A1 E88CFF                          CALL    Coalesce		; add following free block to current
 30860 000065A4 72DB                            JC	SHORT alloc_err		; IF error THEN GOTO err
 30861 000065A6 8B0E0300                        MOV     CX,[ARENA.SIZE]
 30862 000065AA 5A                              POP     DX                      ; check for max found size
 30863 000065AB 39D1                            CMP     CX,DX
 30864 000065AD 7602                            JNA     SHORT alloc_test
 30865 000065AF 89CA                            MOV     DX,CX
 30866                                  
 30867                                  alloc_test:
 30868 000065B1 52                              PUSH    DX
 30869 000065B2 39CB                            CMP     BX,CX                   ; IF BX > size of current block THEN
 30870 000065B4 77C1                            JA      SHORT alloc_next	;   GOTO next
 30871                                  
 30872                                  	; 15/03/2018
 30873 000065B6 36833E[EC02]00                  CMP     WORD [SS:FirstArena],0
 30874 000065BC 7505                    	JNZ	SHORT alloc_best
 30875 000065BE 368C1E[EC02]                    MOV     [SS:FirstArena],DS	; save first one found	
 30876                                  alloc_best:
 30877 000065C3 36833E[EE02]00                  CMP     WORD [SS:BestArena],0
 30878 000065C9 740E                            JZ      SHORT alloc_make_best	; initial best
 30879 000065CB 06                              PUSH	ES
 30880 000065CC 368E06[EE02]                    MOV     ES,[SS:BestArena]
 30881 000065D1 26390E0300                      CMP     [ES:ARENA.SIZE],CX	; is size of best larger than found?
 30882 000065D6 07                              POP	ES
 30883 000065D7 7605                            JBE     SHORT alloc_last
 30884                                  alloc_make_best:
 30885 000065D9 368C1E[EE02]                    MOV     [SS:BestArena],DS	; assign best
 30886                                  alloc_last:
 30887 000065DE 368C1E[F002]                    MOV     [SS:LastArena],DS 	; assign last
 30888 000065E3 EB92                            JMP     SHORT alloc_next
 30889                                  ;
 30890                                  ; split the block high
 30891                                  ;
 30892                                  alloc_do_split_high:
 30893 000065E5 368E1E[F002]                    MOV     DS,[SS:LastArena]
 30894 000065EA 8B0E0300                        MOV     CX,[ARENA.SIZE]
 30895 000065EE 29D9                            SUB     CX,BX
 30896 000065F0 8CDA                            MOV     DX,DS
 30897 000065F2 7444                            JE      SHORT alloc_set_owner	; sizes are equal, no split
 30898 000065F4 01CA                            ADD     DX,CX                   ; point to next block
 30899 000065F6 8EC2                            MOV     ES,DX                   ; no decrement!
 30900 000065F8 49                              DEC     CX
 30901 000065F9 87D9                            XCHG    BX,CX                   ; bx has size of lower block
 30902 000065FB EB26                            JMP     SHORT alloc_set_sizes	; cx has upper (requested) size
 30903                                  ;
 30904                                  ; we have scanned memory and have found all appropriate blocks
 30905                                  ; check for the type of allocation desired; first and best are identical
 30906                                  ; last must be split high
 30907                                  ;
 30908                                  alloc_do_split:
 30909                                  	; 04/08/2018
 30910                                  	; MSDOS 6.0			; M000 - start
 30911                                  	;xor	cx,cx
 30912                                  	;mov	cl,[AllocMethod]
 30913                                  	;and	cx,STRAT_MASK		; mask off bit 7
 30914                                  	;cmp	cx,BEST_FIT		; Q; is the alloc strategy best_fit
 30915                                  
 30916                                  	; 15/03/2018
 30917                                          ;CMP     BYTE [SS:AllocMethod], 1
 30918                                  	; 04/08/2018
 30919 000065FD 36803E[B002]01          	CMP     BYTE [SS:AllocMethod],BEST_FIT
 30920 00006603 77E0                            JA      SHORT alloc_do_split_high
 30921 00006605 368E1E[EC02]                    MOV     DS,[SS:FirstArena]        
 30922 0000660A 7205                    	JB      SHORT alloc_get_size
 30923 0000660C 368E1E[EE02]            	MOV     DS,[SS:BestArena]
 30924                                  
 30925                                  alloc_get_size:
 30926 00006611 8B0E0300                        MOV     CX,[ARENA.SIZE]
 30927 00006615 29D9                            SUB     CX,BX                   ; get room left over
 30928 00006617 8CD8                            MOV     AX,DS
 30929 00006619 89C2                            MOV     DX,AX                   ; save for owner setting
 30930 0000661B 741B                            JE      SHORT alloc_set_owner	; IF BX = size THEN (don't split)
 30931 0000661D 01D8                            ADD     AX,BX
 30932 0000661F 40                              INC     AX                      ; remember the header
 30933 00006620 8EC0                            MOV     ES,AX                   ; ES <- DS + BX (new header location)
 30934 00006622 49                              DEC     CX                      ; CX <- size of split block
 30935                                  alloc_set_sizes:
 30936 00006623 891E0300                        MOV     [ARENA.SIZE],BX		; current size <- BX
 30937 00006627 26890E0300                      MOV     [ES:ARENA.SIZE],CX      ; split size <- CX
 30938                                  	;mov	bl,4Dh ; 'M'
 30939 0000662C B34D                            MOV     BL,arena_signature_normal
 30940 0000662E 861D                            XCHG    BL,[DI]			; current signature <- 4D
 30941 00006630 26881D                          MOV     [ES:DI],BL		; new block sig <- old block sig
 30942 00006633 26893E0100                      MOV     [ES:ARENA.OWNER],DI
 30943                                  
 30944                                  alloc_set_owner:
 30945 00006638 8EDA                            MOV     DS,DX
 30946 0000663A 36A1[DE02]                      MOV     AX,[SS:CurrentPDB] ; 15/03/2018
 30947 0000663E A30100                          MOV     [ARENA.OWNER],AX
 30948 00006641 8CD8                            MOV     AX,DS
 30949 00006643 40                              INC     AX
 30950 00006644 5B                              POP     BX
 30951                                  	;LeaveCrit critMem
 30952 00006645 E82CBA                  	call    LcritMem ; MSDOS 3.3 & MSDOS 6.0
 30953                                          ;transfer SYS_RET_OK
 30954 00006648 E9B2B0                  	JMP	SYS_RET_OK
 30955                                  
 30956                                  
 30957                                  ;	BREAK $SETBLOCK - change size of an allocated block (if possible)
 30958                                  
 30959                                  ; MSDOS 6.0
 30960                                  ;----------------------------------------------------------------------------
 30961                                  ;**	$SETBLOCK - Change size of an Alocated Block
 30962                                  ;
 30963                                  ;	Setblock changes the size of an allocated block.  First, we coalesce
 30964                                  ;	any following free space onto this block; then we try to trim the
 30965                                  ;	block down to the size requested.
 30966                                  ;
 30967                                  ;	Note that if the guy wants to grow the block but that growth fails,
 30968                                  ;	we still go ahead and coalesce any trailing free blocks onto it.
 30969                                  ;	Thus the maximum-size-possible value that we return has already
 30970                                  ;	been allocated!  This is a bug, dare we fix it?  BUGBUG
 30971                                  ;
 30972                                  ;	NOTE - $SETBLOCK is in bed with $ALLOC and jumps into $ALLOC to
 30973                                  ;		finish it's work.  FOr this reason we build the allocsf
 30974                                  ;		structure on the frame, to make us compatible with $ALLOCs
 30975                                  ;		code.
 30976                                  ;
 30977                                  ;	ENTRY	(es) = segment of old block
 30978                                  ;		(bx) = newsize
 30979                                  ;		(ah) = SETBLOCK
 30980                                  ;
 30981                                  ;	EXIT	'C' clear if OK
 30982                                  ;		'C' set if error
 30983                                  ;		  (ax) = error_invalid_block
 30984                                  ;		       = error_arena_trashed
 30985                                  ;		       = error_not_enough_memory
 30986                                  ;		       = error_invalid_function
 30987                                  ;		  (bx) = maximum size possible, iff (ax) = error_not_enough_memory
 30988                                  ;	USES	???? BUGBUG
 30989                                  ;----------------------------------------------------------------------------
 30990                                  
 30991                                  ; MSDOS 2.11 (& MSDOS 3.3)
 30992                                  ;----------------------------------------------------------------------------
 30993                                  ;SUBTTL $SETBLOCK - change size of an allocated block (if possible)
 30994                                  ;
 30995                                  ;   Assembler usage:
 30996                                  ;           MOV     ES,block
 30997                                  ;           MOV     BX,newsize
 30998                                  ;           MOV     AH,setblock
 30999                                  ;           INT     21h
 31000                                  ;         if setblock fails for growing, BX will have the maximum
 31001                                  ;         size possible
 31002                                  ;   Error return:
 31003                                  ;           AX = error_invalid_block
 31004                                  ;              = error_arena_trashed
 31005                                  ;              = error_not_enough_memory
 31006                                  ;              = error_invalid_function
 31007                                  ;----------------------------------------------------------------------------
 31008                                  
 31009                                  _$SETBLOCK:        
 31010                                  	; 04/08/2018 - Retro DOS v3.0
 31011                                  	;EnterCrit   critMem
 31012 0000664B E81EBA                  	call	EcritMem ; MSDOS 3.3 & MSDOS 6.0
 31013                                  
 31014 0000664E BF0000                  	MOV     DI,ARENA.SIGNATURE
 31015 00006651 8CC0                            MOV     AX,ES
 31016 00006653 48                              DEC     AX
 31017 00006654 E8C9FE                          CALL    check_signature
 31018 00006657 7303                            JNC     SHORT setblock_grab
 31019                                  
 31020                                  setblock_bad:
 31021 00006659 E926FF                          JMP     alloc_trashed
 31022                                  
 31023                                  setblock_grab:
 31024 0000665C 8ED8                            MOV     DS,AX
 31025 0000665E E8CFFE                          CALL    Coalesce
 31026 00006661 72F6                            JC      SHORT setblock_bad
 31027 00006663 8B0E0300                        MOV     CX,[ARENA.SIZE]
 31028 00006667 51                              PUSH    CX
 31029 00006668 39CB                            CMP     BX,CX
 31030 0000666A 76A5                            JBE     SHORT alloc_get_size
 31031 0000666C E923FF                          JMP     alloc_fail
 31032                                  
 31033                                  ;	BREAK $DEALLOC - free previously allocated piece of memory
 31034                                  
 31035                                  ; MSDOS 6.0
 31036                                  ;----------------------------------------------------------------------------
 31037                                  ;**	$DEALLOC - Free Heap Memory
 31038                                  ;
 31039                                  ;	ENTRY	(es) = address of item
 31040                                  ;
 31041                                  ;	EXIT	'C' clear of OK
 31042                                  ;		'C' set if error
 31043                                  ;		  (AX) = error_invalid_block
 31044                                  ;	USES	???? BUGBUG
 31045                                  
 31046                                  ; MSDOS 2.11 (& MSDOS 3.3)
 31047                                  ;----------------------------------------------------------------------------
 31048                                  ;SUBTTL $DEALLOC - free previously allocated piece of memory
 31049                                  ;
 31050                                  ;   Assembler usage:
 31051                                  ;           MOV     ES,block
 31052                                  ;           MOV     AH,dealloc
 31053                                  ;           INT     21h
 31054                                  ;
 31055                                  ;   Error return:
 31056                                  ;           AX = error_invalid_block
 31057                                  ;              = error_arena_trashed
 31058                                  ;---------------------------------------------------------------------------- 
 31059                                  
 31060                                  _$DEALLOC:    
 31061                                  	; 04/08/2018 - Retro DOS v3.0
 31062                                  	;EnterCrit   critMem
 31063 0000666F E8FAB9                  	call	EcritMem ; MSDOS 3.3 & MSDOS 6.0
 31064                                  
 31065                                  	; MSDOS 6.0			; M016, M068 - Start
 31066                                  	;test	byte [DOS_FLAG],EXECA20OFF
 31067                                  					; Q: was the previous call an int 21
 31068                                  					;    exec call
 31069                                  	;jz	short deallocate	; N: continue
 31070                                  	;cmp	byte [A20OFF_COUNT], 0	; Q: is count 0
 31071                                  	;jne	short deallocate	; N: continue
 31072                                  	;mov	byte [A20OFF_COUNT], 1	; Y: set count to 1
 31073                                  ;deallocate:				; M016, M068 - End
 31074                                      
 31075 00006672 BF0000                  	MOV     DI,ARENA.SIGNATURE ; = 0
 31076 00006675 8CC0                            MOV     AX,ES
 31077 00006677 48                              DEC     AX
 31078 00006678 E8A5FE                          CALL    check_signature
 31079 0000667B 720B                            JC      SHORT dealloc_err
 31080 0000667D 26893E0100                      MOV     [ES:ARENA.OWNER],DI
 31081                                  	;LeaveCrit critMem
 31082 00006682 E8EFB9                  	call    LcritMem ; MSDOS 3.3 & MSDOS 6.0
 31083                                          ;transfer SYS_RET_OK
 31084 00006685 E975B0                  	JMP	SYS_RET_OK
 31085                                  
 31086                                  dealloc_err:
 31087                                  	;LeaveCrit critMem
 31088 00006688 E8E9B9                  	call    LcritMem ; MSDOS 3.3 & MSDOS 6.0
 31089                                          ;error	error_invalid_block
 31090                                  	;mov	al,9
 31091 0000668B B009                    	MOV	AL,error_invalid_block
 31092 0000668D E979B0                  	JMP	SYS_RET_ERR
 31093                                  
 31094                                  ;	BREAK $AllocOper - get/set allocation mechanism
 31095                                  
 31096                                  ; MSDOS 6.0
 31097                                  ;----------------------------------------------------------------------------
 31098                                  ;**	$AllocOper - Get/Set Allocation Mechanism
 31099                                  ;
 31100                                  ;	Assembler usage:
 31101                                  ;           MOV     AH,AllocOper
 31102                                  ;           MOV     BX,method
 31103                                  ;           MOV     AL,func
 31104                                  ;           INT     21h
 31105                                  ;
 31106                                  ;	ENTRY	
 31107                                  ;		(al) = 0
 31108                                  ;		  Get allocation Strategy in (ax)
 31109                                  ;
 31110                                  ;		(al) = 1, (bx) = method = zw0000xy
 31111                                  ;		  Set allocation strategy.
 31112                                  ;		   w  = 1  => HIGH_ONLY
 31113                                  ;		   z  = 1  => HIGH_FIRST
 31114                                  ;		   xy = 00 => FIRST_FIT
 31115                                  ;		      = 01 => BEST_FIT
 31116                                  ;		      = 10 => LAST_FIT
 31117                                  ;
 31118                                  ;		(al) = 2
 31119                                  ;		  Get UMB link state in (al)
 31120                                  ;
 31121                                  ;		(al) = 3
 31122                                  ;		  Set UMB link state
 31123                                  ;		   (bx) = 0 => Unlink UMBs
 31124                                  ;		   (bx) = 1 => Link UMBs
 31125                                  ;
 31126                                  ;
 31127                                  ;	EXIT	'C' clear if OK
 31128                                  ;
 31129                                  ;		 if (al) = 0
 31130                                  ;		  (ax) = existing method
 31131                                  ;		 if (al) = 1
 31132                                  ;		  Sets allocation strategy
 31133                                  ;		 if (al) = 2
 31134                                  ;		  (al) = 0 => UMBs not linked
 31135                                  ;		  (al) = 1 => UMBs linked in
 31136                                  ;		 if (al) = 3
 31137                                  ;		  Links/Unlinks the UMBs into DOS chain
 31138                                  ;
 31139                                  ;		'C' set if error
 31140                                  ;		  AX = error_invalid_function
 31141                                  ;
 31142                                  ;	Rev. M000 - added support for HIGH_FIRST in (al) = 1. 7/9/90
 31143                                  ; 	Rev. M003 - added functions (al) = 2 and (al) = 3. 7/18/90
 31144                                  ;	Rev. M009 - (al) = 3 will return 'invalid function' in ax if
 31145                                  ;		    umbhead has'nt been initialized by sysinit and 'trashed
 31146                                  ;		    arena' if an arena sig is damaged.
 31147                                  ;----------------------------------------------------------------------------
 31148                                  
 31149                                  ; MSDOS 2.11 (& MSDOS 3.3)
 31150                                  ;----------------------------------------------------------------------------
 31151                                  ;SUBTTL $AllocOper - get/set allocation mechanism
 31152                                  ;
 31153                                  ;   Assembler usage:
 31154                                  ;           MOV     AH,AllocOper
 31155                                  ;           MOV     BX,method
 31156                                  ;           MOV     AL,func
 31157                                  ;           INT     21h
 31158                                  ;
 31159                                  ;   Error return:
 31160                                  ;           AX = error_invalid_function
 31161                                  ;----------------------------------------------------------------------------
 31162                                  
 31163                                  _$ALLOCOPER:
 31164                                  	; MSDOS 6.0
 31165                                  	;or	al, al
 31166                                  	;jz	short AllocGetStrat
 31167                                  	;cmp	al, 1
 31168                                  	;jz	short AllocSetStrat
 31169                                  	;cmp	al, 2
 31170                                  	;jz	short AllocGetLink
 31171                                  	;cmp	al, 3
 31172                                  	;jz	short AllocSetLink
 31173                                  
 31174                                  	; 15/04/2018
 31175 00006690 3C01                    	CMP     AL,1
 31176 00006692 720D                            JB      SHORT AllocOperGet
 31177 00006694 7414                            JZ      SHORT AllocOperSet
 31178                                  
 31179                                  AllocOperError:
 31180                                  	; 04/08/2018 - Retro DOS v3.0
 31181                                  	; MSDOS 3.3 (& MSDOS 6.0)	; Extended Error Locus	
 31182                                  	;mov	byte [ss:EXTERR_LOCUS],5
 31183 00006696 36C606[D102]05                  MOV     byte [SS:EXTERR_LOCUS],errLOC_Mem
 31184                                  	;error	error_invalid_function
 31185                                  	;mov	al,1
 31186 0000669C B001                    	MOV	AL,error_invalid_function
 31187                                  AllocOperErrj:
 31188 0000669E E968B0                  	JMP	SYS_RET_ERR
 31189                                  
 31190                                  ;AllocArenaError:
 31191                                  	; MSDOS 6.0
 31192                                  	;MOV     byte [SS:EXTERR_LOCUS],errLOC_Mem
 31193                                  	;				; M009: Extended Error Locus
 31194                                  	;;error   error_arena_trashed	; M009:
 31195                                  	;MOV	AL,error_arena_trashed
 31196                                  	;;JMP	SYS_RET_ERR
 31197                                  	;jmp	short AllocOperErrj
 31198                                  
 31199                                  ;AllocGetStrat: 
 31200                                  	; MSDOS 6.0
 31201                                  AllocOperGet:
 31202 000066A1 36A0[B002]                      MOV     AL,[SS:AllocMethod]
 31203 000066A5 30E4                            XOR     AH,AH
 31204                                          ;transfer SYS_RET_OK
 31205 000066A7 E953B0                  	JMP	SYS_RET_OK
 31206                                  
 31207                                  ;AllocSetStrat: 
 31208                                  	; MSDOS 6.0
 31209                                  	;push	bx			; M000 - start
 31210                                  	;and	bx,STRAT_MASK 		; M064: mask off bit 6 & 7
 31211                                  	;cmp	bx,2			; BX must be 0-2
 31212                                  	;pop	bx			; M000 - end
 31213                                  	;ja	short AllocOperError
 31214                                  
 31215                                  AllocOperSet:
 31216 000066AA 36881E[B002]                    MOV     [SS:AllocMethod],BL
 31217                                          ;transfer SYS_RET_OK
 31218 000066AF E94BB0                  	JMP	SYS_RET_OK
 31219                                  
 31220                                  ;AllocGetLink:
 31221                                  	; MSDOS 6.0
 31222                                  	;mov	al,[UmbFlag]		; return link state in al
 31223                                  	;and 	al,LINKSTATE		
 31224                                  	;;transfer SYS_RET_OK
 31225                                  	;jmp	SYS_RET_OK
 31226                                  
 31227                                  ;AllocSetLink:
 31228                                  	; MSDOS 6.0			; M009 - start
 31229                                  	;mov	cx,[umb_head]		; cx = umb_head
 31230                                  	;cmp	cx,0FFFFh		; Q: has umb_head been initialized
 31231                                  	;je	short AllocOperError	; N: error
 31232                                  	;				; Y: continue
 31233                                  	;				; M009 - end
 31234                                  	;cmp	bx,1			
 31235                                  	;jb	short UnlinkUmbs
 31236                                  	;jz	short LinkUmbs
 31237                                  	;
 31238                                  	;jmp	short AllocOperError
 31239                                  	;
 31240                                  ;UnlinkUmbs:
 31241                                  	;test	byte[UmbFlag],LINKSTATE	; Q: umbs unlinked?
 31242                                  	;jz	short unlinked		; Y: return 
 31243                                  	;
 31244                                  	;call	GetLastArena		; get arena before umb_head in DS
 31245                                  	;jc	short AllocArenaError	; M009: arena trashed
 31246                                  	;
 31247                                  	;				; make it last
 31248                                  	;mov	byte [0],arena_signature_end
 31249                                  	;
 31250                                  	;and	byte [UmbFlag],~LINKSTATE ; indicate unlink'd state in umbflag
 31251                                  	;
 31252                                  ;unlinked:
 31253                                  	;;transfer SYS_RET_OK
 31254                                  	;jmp	SYS_RET_OK
 31255                                  
 31256                                  ;LinkUmbs:
 31257                                  	;test	byte [UmbFlag],LINKSTATE ; Q: umbs linked?
 31258                                  	;jnz	short linked		; Y: return
 31259                                  	;
 31260                                  	;call	GetLastArena		; get arena before umb_head
 31261                                  	;jc	short AllocArenaError	; M009: arena trashed
 31262                                  	;
 31263                                  	;				; make it normal. M061: ds points to
 31264                                  	;				; arena before umb_head
 31265                                  	;mov	byte [0],arena_signature_normal
 31266                                  	;
 31267                                  	;or	byte [UmbFlag],LINKSTATE ; indicate link'd state in umbflag
 31268                                  ;linked:
 31269                                  	;;transfer SYS_RET_OK
 31270                                  	;jmp	SYS_RET_OK
 31271                                  
 31272                                  ; MSDOS 6.0
 31273                                  ;--------------------------------------------------------------------------
 31274                                  ; Procedure Name : GetLastArena		-  M003
 31275                                  ;
 31276                                  ; Inputs	 : cx = umb_head
 31277                                  ;
 31278                                  ;
 31279                                  ; Outputs	 : If UMBs are linked
 31280                                  ;			ES = umb_head
 31281                                  ;			DS = arena before umb_head
 31282                                  ;		   else
 31283                                  ;			DS = last arena
 31284                                  ;			ES = next arena. will be umb_head if NC.
 31285                                  ;
 31286                                  ;		   CY if error
 31287                                  ;
 31288                                  ; Uses		 : DS, ES, DI, BX
 31289                                  ;--------------------------------------------------------------------------
 31290                                  	
 31291                                  ;Procedure	GetLastArena, NEAR
 31292                                  ;
 31293                                  ;	push	ax			; save ax
 31294                                  ;
 31295                                  ;	mov	ax, [arena_head]
 31296                                  ;	mov	es, ax			; es = arena_head
 31297                                  ;	xor	di, di
 31298                                  ;
 31299                                  ;	cmp     byte ptr es:[di],arena_signature_end
 31300                                  ;					; Q: is this the last arena
 31301                                  ;	je	GLA_done		; Y: return last arena in ES		
 31302                                  ;					
 31303                                  ;
 31304                                  ;GLA_next:
 31305                                  ;	mov	ds, ax
 31306                                  ;	call	arena_next		; ax, es -> next arena
 31307                                  ;	jc	GLA_err
 31308                                  ;
 31309                                  ;	test	[UmbFlag], LINKSTATE	; Q: are UMBs linked
 31310                                  ;	jnz	GLA_chkumb		; Y: terminating condition is 
 31311                                  ;					;    umb_head
 31312                                  ;					; N: terminating condition is 05Ah
 31313                                  ;
 31314                                  ;	cmp     byte ptr es:[di],arena_signature_end
 31315                                  ;					; Q: is this the last arena
 31316                                  ;	jmp	short @f
 31317                                  ;GLA_chkumb:
 31318                                  ;	cmp	ax, cx			; Q: is this umb_head
 31319                                  ;@@:
 31320                                  ;	jne	GLA_next		; N: get next arena
 31321                                  ;
 31322                                  ;GLA_done:
 31323                                  ;					; M061 - Start
 31324                                  ;	test	[UmbFlag], LINKSTATE	; Q: are UMBs linked
 31325                                  ;	jnz	GLA_ret			; Y: we're done
 31326                                  ;					; N: let us confirm that the next 
 31327                                  ;					;    arena is umb_head
 31328                                  ;	mov	ds, ax
 31329                                  ;	call	arena_next		; ax, es -> next arena
 31330                                  ;	jc	GLA_err
 31331                                  ;	cmp	ax, cx			; Q: is this umb_head
 31332                                  ;	jne	GLA_err			; N: error
 31333                                  ;					; M061 - End
 31334                                  ;
 31335                                  ;GLA_ret:				
 31336                                  ;	clc
 31337                                  ;	pop	ax			; M061
 31338                                  ;	ret				; M061
 31339                                  ;
 31340                                  ;GLA_err:
 31341                                  ;	stc				; M061
 31342                                  ;	pop	ax
 31343                                  ;	ret
 31344                                  ;
 31345                                  ;EndProc GetLastArena
 31346                                  
 31347                                  ;============================================================================
 31348                                  ; SRVCALL.ASM, MSDOS 6.0, 1991
 31349                                  ;============================================================================
 31350                                  ; 04/08/2018 - Retro DOS v3.0
 31351                                  
 31352                                  ;	TITLE SRVCALL - Server DOS call
 31353                                  ;	NAME  SRVCALL
 31354                                  
 31355                                  ;**	SRVCALL.ASM - Server DOS call functions
 31356                                  ;
 31357                                  ;
 31358                                  ;	$ServerCall
 31359                                  ;
 31360                                  ;	Modification history:
 31361                                  ;
 31362                                  ;	    Created: ARR 08 August 1983
 31363                                  
 31364                                  ;AsmVars <Installed>
 31365                                  
 31366                                  ;include dpl.asm
 31367                                  
 31368                                  ;Installed = TRUE
 31369                                  
 31370                                  ;BREAK <ServerCall -- Server DOS call>
 31371                                  ;----------------------------------------------------------------------------
 31372                                  ;
 31373                                  ; Procedure Name : $ServerCall
 31374                                  ;
 31375                                  ; Inputs:
 31376                                  ;	DS:DX -> DPL  (except calls 7,8,9)
 31377                                  ; Function:
 31378                                  ;	AL=0	Server DOS call
 31379                                  ;	AL=1	Commit All files
 31380                                  ;	AL=2	Close file by name (SHARING LOADED ONLY) DS:DX in DPL -> name
 31381                                  ;	AL=3	Close all files for DPL_UID
 31382                                  ;	AL=4	Close all files for DPL_UID/PID_PID
 31383                                  ;	AL=5	Get open file list entry
 31384                                  ;		    IN: BX File Index
 31385                                  ;			CX User Index
 31386                                  ;		    OUT:ES:DI -> Name
 31387                                  ;			BX = UID
 31388                                  ;		    CX = # locked blocks held by this UID
 31389                                  ;	AL=6	Get DOS data area
 31390                                  ;		    OUT: DS:SI -> Start
 31391                                  ;			CX size in bytes of swap if indos
 31392                                  ;			DX size in bytes of swap always
 31393                                  ;	AL=7	Get truncate flag
 31394                                  ;	AL=8	Set truncate flag
 31395                                  ;	AL=9	Close all spool files
 31396                                  ;	AL=10	SetExtendedError
 31397                                  ;
 31398                                  ;----------------------------------------------------------------------------
 31399                                  
 31400                                  _$ServerCall:
 31401                                  	; 05/08/2018 - Retro DOS v3.0
 31402                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 657Bh
 31403 000066B2 3C07                    	CMP	AL,7
 31404 000066B4 7204                    	JB	short SET_STUFF
 31405 000066B6 3C09                    	CMP	AL,9
 31406 000066B8 7612                    	JBE	short NO_SET_ID		; No DPL on calls 7,8,9
 31407                                  SET_STUFF:
 31408 000066BA 89D6                    	MOV	SI,DX			; Point to DPL with DS:SI
 31409                                  	;mov	bx,[si+12h]
 31410 000066BC 8B5C12                  	MOV	BX,[SI+DPL.UID]
 31411                                  
 31412                                  	; MSDOS 6.0
 31413                                  ;SR;
 31414                                  ; WIN386 updates the USER_ID itself. If WIN386 is present we skip the updating
 31415                                  ; of USER_ID
 31416                                  ;
 31417                                  	;test	byte [SS:IsWin386],1
 31418                                  	;jnz	short skip_win386
 31419                                  
 31420                                  ;hkn; SS override for user_id and proc_id
 31421                                  	; 15/08/2018
 31422 000066BF 36891E[EA02]            	MOV	[SS:USER_ID],BX		; Set UID
 31423                                  
 31424                                  ;skip_win386:
 31425                                  
 31426 000066C4 8B5C14                  	MOV	BX,[SI+DPL.PID]
 31427 000066C7 36891E[E802]            	MOV	[SS:PROC_ID],BX		; Set process ID
 31428                                  NO_SET_ID:
 31429 000066CC 36FF36[3A14]            	PUSH	word [SS:SERVERLEAVE]	; push return address
 31430 000066D1 36FF36[3814]            	PUSH	word [SS:SERVERTAB]	; push table address
 31431 000066D6 50                      	PUSH	AX
 31432 000066D7 E8C9B8                  	call	TableDispatch
 31433                                  
 31434                                  ;hkn; SS override
 31435                                  	;mov 	byte [SS:EXETERR_LOCUS],1
 31436 000066DA 36C606[D102]01          	MOV	byte [SS:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 31437                                  	;error	error_invalid_function
 31438                                  	;mov	al,1
 31439 000066E0 B001                    	MOV	AL,error_invalid_function
 31440                                  servercall_error:
 31441 000066E2 E924B0                  	JMP	SYS_RET_ERR
 31442                                  
 31443                                  SERVERRETURN:
 31444 000066E5 C3                      	retn
 31445                                  
 31446                                  ; Commit - iterate through the open file list and make sure that the
 31447                                  ; directory entries are correctly updated.
 31448                                  
 31449                                  COMMIT_ALL:
 31450 000066E6 31DB                    	XOR	BX,BX			;   for (i=0; ThisSFT=getSFT(i); i++)
 31451 000066E8 16                      	push	ss
 31452 000066E9 1F                      	pop	ds
 31453 000066EA E87FB9                  	call	EcritSFT		; Gonna scan SFT cache, lock it down
 31454                                  CommitLoop:
 31455 000066ED 53                      	push	bx
 31456 000066EE E82501                  	call	SFFromSFN
 31457 000066F1 7223                    	JC	short CommitDone
 31458 000066F3 26833D00                	cmp	word [es:di],0
 31459                                  	;CMP	word [ES:DI+SF_ENTRY.sf_Ref_Count],0
 31460                                  					; if (ThisSFT->refcount != 0)
 31461 000066F7 7419                    	JZ	short CommitNext
 31462                                  	;cmp	word [es:di],0FFFFh ; -1
 31463 000066F9 26833DFF                	cmp	word [ES:DI],sf_busy
 31464                                  	;CMP	word [ES:DI+SF_ENTRY.sf_Ref_Count],sf_busy  
 31465                                  					; BUSY SFTs have god knows what
 31466 000066FD 7413                    	JZ	short CommitNext	;   in them.
 31467 000066FF 26F745050080            	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 31468 00006705 750B                    	JNZ	short CommitNext	;  Skip Network SFTs so the SERVER
 31469                                  					;	doesn't deadlock
 31470 00006707 893E[3605]              	MOV	[THISSFT],DI
 31471 0000670B 8C06[3805]              	MOV	[THISSFT+2],ES
 31472 0000670F E8B1D4                  	call	DOS_COMMIT		;	DOSCommit ();
 31473                                  CommitNext:
 31474 00006712 5B                      	pop	bx
 31475 00006713 43                      	INC	BX
 31476 00006714 EBD7                    	JMP	short CommitLoop
 31477                                  CommitDone:
 31478 00006716 E85BB9                  	call	LcritSFT
 31479 00006719 5B                      	pop	bx
 31480 0000671A E9E0AF                  	jmp	SYS_RET_OK
 31481                                  
 31482                                  CLOSE_NAME:
 31483                                  
 31484                                  ;if installed
 31485                                  
 31486                                  ;hkn; SS override
 31487 0000671D 36FF1E[7000]            	Call	far [SS:JShare+(5*4)] ; 5 = MFTcloN
 31488                                  ;else
 31489                                  ;	Call	MFTcloN
 31490                                  ;endif
 31491                                  
 31492                                  CheckReturns:
 31493 00006722 7203                    	JC	short func_err
 31494 00006724 E9D6AF                  	jmp	SYS_RET_OK
 31495                                  func_err:
 31496                                  	;transfer SYS_RET_ERR
 31497                                  	;jmp	SYS_RET_ERR
 31498 00006727 EBB9                    	jmp	short servercall_error
 31499                                  
 31500                                  CLOSE_UID:
 31501                                  
 31502                                  ;if installed
 31503                                  ;hkn; SS override
 31504 00006729 36FF1E[6800]            	Call	far [SS:JShare+(3*4)] ; 3 = MTFTclu
 31505                                  ;else
 31506                                  ;	Call	MFTclU
 31507                                  ;endif
 31508 0000672E EBF2                    	JMP	short CheckReturns
 31509                                  
 31510                                  CLOSE_UID_PID:
 31511                                  
 31512                                  ;if installed
 31513                                  ;hkn; SS override
 31514 00006730 36FF1E[6C00]            	Call	far [SS:JShare+(4*4)] ; 4 = MFTCloseP 
 31515                                  ;else
 31516                                  ;	Call	MFTCloseP
 31517                                  ;endif
 31518 00006735 EBEB                    	JMP	CheckReturns
 31519                                  
 31520                                  GET_LIST:
 31521                                  
 31522                                  ;if installed
 31523                                  ;hkn; SS override
 31524 00006737 36FF1E[8000]            	Call	far [SS:JShare+(9*4)] ; 9 = MFT_get
 31525                                  ;else
 31526                                  ;	Call	MFT_get
 31527                                  ;endif
 31528 0000673C 72E9                    	JC	short func_err
 31529 0000673E E8CAAE                  	call	Get_User_Stack
 31530                                  	;mov	[si+2],bx
 31531 00006741 895C02                  	MOV	[SI+user_env.user_BX],BX
 31532                                  	;mov	[si+10],di
 31533 00006744 897C0A                  	MOV	[SI+user_env.user_DI],DI
 31534                                  	;mov	[si+16],es
 31535 00006747 8C4410                  	MOV	[SI+user_env.user_ES],ES
 31536                                  SetCXOK:
 31537                                  	;mov	[si+4],cx
 31538 0000674A 894C04                  	MOV	[SI+user_env.user_CX],CX
 31539 0000674D E9ADAF                  	jmp	SYS_RET_OK
 31540                                  
 31541                                  SRV_CALL:
 31542 00006750 58                      	POP	AX			; get rid of call to $srvcall
 31543 00006751 1E                      	push	ds
 31544 00006752 56                      	push	si
 31545 00006753 E8B5AE                  	call	Get_User_Stack
 31546 00006756 5F                      	pop	di
 31547 00006757 07                      	pop	es
 31548                                  ;
 31549                                  ; DS:SI point to stack
 31550                                  ; ES:DI point to DPL
 31551                                  ;
 31552 00006758 E827B8                  	call	XCHGP
 31553                                  ;
 31554                                  ; DS:SI point to DPL
 31555                                  ; ES:DI point to stack
 31556                                  ;
 31557                                  ; We now copy the registers from DPL to save stack
 31558                                  ;
 31559 0000675B 56                      	push	si
 31560 0000675C B90600                  	MOV	CX,6
 31561 0000675F F3A5                    	REP	MOVSW			; Put in AX,BX,CX,DX,SI,DI
 31562 00006761 47                      	INC	DI
 31563 00006762 47                      	INC	DI			; Skip user_BP
 31564 00006763 A5                      	MOVSW				; DS
 31565 00006764 A5                      	MOVSW				; ES
 31566 00006765 5E                      	pop	si			; DS:SI -> DPL
 31567 00006766 8B04                    	mov	ax,[SI]
 31568                                  	;MOV	AX,[SI+DPL.AX]
 31569                                  	;mov	bx,[si+2]
 31570 00006768 8B5C02                  	MOV	BX,[SI+DPL.BX]
 31571                                  	;mov	cx,[si+4]
 31572 0000676B 8B4C04                  	MOV	CX,[SI+DPL.CX]
 31573                                  	;mov	dx,[si+6]
 31574 0000676E 8B5406                  	MOV	DX,[SI+DPL.DX]
 31575                                  	;mov	di,[si+10]
 31576 00006771 8B7C0A                  	MOV	DI,[SI+DPL.DI]
 31577                                  	;mov	es,[si+14]
 31578 00006774 8E440E                  	MOV	ES,[SI+DPL.ES]
 31579                                  	;push	word [si+8]
 31580 00006777 FF7408                  	PUSH	word [SI+DPL.SI]
 31581                                  	;mov	ds,[si+12]
 31582 0000677A 8E5C0C                  	MOV	DS,[SI+DPL.DS]
 31583 0000677D 5E                      	POP	SI
 31584                                  
 31585                                  ;hkn; SS override for next 3
 31586 0000677E 368C1E[7E05]            	MOV	[SS:SAVEDS],DS
 31587 00006783 36891E[7C05]            	MOV	[SS:SAVEBX],BX
 31588 00006788 36C606[0D05]FF          	MOV	byte [SS:FSHARING],-1	; set no redirect flag
 31589 0000678E E9B4AD                  	jmp	REDISP
 31590                                  
 31591                                  GET_DOS_DATA:
 31592 00006791 16                      	push	ss
 31593 00006792 07                      	pop	es
 31594 00006793 BF[CE02]                	MOV     DI,SWAP_START
 31595 00006796 B9[090A]                	MOV     CX,SWAP_END
 31596 00006799 BA[E602]                	MOV     DX,SWAP_ALWAYS
 31597 0000679C 29F9                    	SUB     CX,DI
 31598 0000679E 29FA                    	SUB     DX,DI
 31599 000067A0 D1E9                    	SHR     CX,1                    ; div by 2, remainder in carry
 31600 000067A2 83D100                  	ADC     CX,0                    ; div by 2 + round up
 31601 000067A5 D1E1                    	SHL     CX,1                    ; round up to 2 boundary.
 31602 000067A7 E861AE                  	call	Get_User_Stack
 31603                                  	;mov	[si+14],es
 31604 000067AA 8C440E                  	MOV     [SI+user_env.user_DS],ES
 31605                                  	;mov	[si+8],di
 31606 000067AD 897C08                  	MOV     [SI+user_env.user_SI],DI
 31607                                  	;mov	[si+6],dx
 31608 000067B0 895406                  	MOV     [SI+user_env.user_DX],DX
 31609 000067B3 EB95                    	JMP	short SetCXOK
 31610                                  
 31611                                  SPOOL_OPER:
 31612                                  	;CallInstall NETSpoolOper,MultNET,37,AX,BX
 31613                                  
 31614 000067B5 50                      	push    ax
 31615 000067B6 B82511                  	mov     ax, 1125h
 31616 000067B9 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - REDIRECTED PRINTER MODE
 31617                                  			; STACK: WORD subfunction
 31618                                  			; Return: CF set on error, AX = error code
 31619                                  			; STACK unchanged
 31620 000067BB 5B                      	pop	bx
 31621 000067BC 7203                    	JC	short func_err2
 31622 000067BE E93CAF                  	jmp	SYS_RET_OK
 31623                                  func_err2:
 31624 000067C1 E945AF                  	jmp	SYS_RET_ERR
 31625                                  
 31626                                  ;Break	<$SetExtendedError - set extended error for later retrieval>
 31627                                  ;--------------------------------------------------------------------------
 31628                                  ;
 31629                                  ; Procedure Name : $SetExtendedError
 31630                                  ;
 31631                                  ; $SetExtendedError takes extended error information and loads it up for the
 31632                                  ; next extended error call.  This is used by interrupt-level proccessors to
 31633                                  ; mask their actions.
 31634                                  ;
 31635                                  ;   Inputs: DS:SI points to DPL which contains all registers
 31636                                  ;   Outputs: none
 31637                                  ;
 31638                                  ;---------------------------------------------------------------------------
 31639                                  
 31640                                  _$SetExtendedError:
 31641                                  
 31642                                  ;hkn; SS override for all variables used
 31643                                  
 31644 000067C4 8B04                    	mov	ax,[si]
 31645                                  	;MOV	AX,[SI+DPL.AX]
 31646 000067C6 36A3[D202]              	MOV	[SS:EXTERR],AX
 31647                                  	;mov	ax,[si+10]
 31648 000067CA 8B440A                  	MOV	AX,[SI+DPL.DI]
 31649 000067CD 36A3[D602]              	MOV	[SS:EXTERRPT],AX
 31650                                  	;mov	ax,[si+14]
 31651 000067D1 8B440E                  	MOV	AX,[SI+DPL.ES]
 31652 000067D4 36A3[D802]              	MOV	[SS:EXTERRPT+2],AX
 31653                                  	;mov	ax,[si+2]
 31654 000067D8 8B4402                  	MOV	AX,[SI+DPL.BX]
 31655 000067DB 36A3[D402]              	MOV	[SS:EXTERR_ACTION],AX
 31656                                  	;mov	ax,[si+4]
 31657 000067DF 8B4404                  	MOV	AX,[SI+DPL.CX]
 31658 000067E2 368826[D102]            	MOV	[SS:EXTERR_LOCUS],AH
 31659 000067E7 C3                      	retn
 31660                                  
 31661                                  ;============================================================================
 31662                                  ; UTIL.ASM, MSDOS 6.0, 1991
 31663                                  ;============================================================================
 31664                                  ; 05/08/2018 - Retro DOS v3.0
 31665                                  
 31666                                  ;**	Handle related utilities for MSDOS 2.X.
 31667                                  ;
 31668                                  ;	pJFNFromHandle	written
 31669                                  ;	SFFromHandle	written
 31670                                  ;	SFFromSFN	written
 31671                                  ;	JFNFree 	written
 31672                                  ;	SFNFree 	written
 31673                                  ;
 31674                                  ;	Modification history:
 31675                                  ;
 31676                                  ;	    Created: MZ 1 April 1983
 31677                                  
 31678                                  ;	BREAK	<pJFNFromHandle - return pointer to JFN table entry>
 31679                                  
 31680                                  ;**	pJFNFromHandle - Translate Handle to Pointer to JFN
 31681                                  ;----------------------------------------------------------------------------
 31682                                  ;	pJFNFromHandle takes a file handle and turns that into a pointer to
 31683                                  ;	the JFN entry (i.e., to a byte holding the internal file handle #)
 31684                                  ;
 31685                                  ;	NOTE:
 31686                                  ;	  This routine is called from $CREATE_PROCESS_DATA_BLOCK which is called
 31687                                  ;	  at DOSINIT time with SS NOT DOSGROUP
 31688                                  ;
 31689                                  ;	ENTRY	(bx) = handle
 31690                                  ;	EXIT	'C' clear if ok
 31691                                  ;		  (es:di) = address of JFN value
 31692                                  ;		'C' set if error
 31693                                  ;		  (ax) = error code
 31694                                  ;	USES	AX, DI, ES, Flags
 31695                                  ;----------------------------------------------------------------------------
 31696                                  
 31697                                  pJFNFromHandle:
 31698                                  
 31699 000067E8 2E8E06[DE02]            	MOV	ES,[cs:CurrentPDB]	; get user process data block
 31700                                  	;cmp	bx,[ES:32h]
 31701 000067ED 263B1E3200              	CMP	BX,[ES:PDB.JFN_Length]	; is handle greater than allocated
 31702 000067F2 7204                    	JB	short pjfn10		; no, get offset
 31703                                  ReturnCarry_inv_hndl: ; 05/08/2018 - Retro DOS v3.0
 31704                                  	;mov	al,6
 31705 000067F4 B006                    	MOV     AL,error_invalid_handle ; appropriate error
 31706                                  ReturnCarry:
 31707 000067F6 F9                      	STC                             ; signal error
 31708 000067F7 C3                      	retn				; go back
 31709                                  pjfn10: 
 31710                                  	;les	di,[es:34h]
 31711 000067F8 26C43E3400              	LES	DI,[ES:PDB.JFN_Pointer]	; get pointer to beginning of table
 31712 000067FD 01DF                    	ADD	DI,BX			; add in offset, clear 'C'
 31713                                  	;clc
 31714                                  pJFNFromHandle_error:
 31715 000067FF C3                      	retn
 31716                                  
 31717                                  ;BREAK <SFFromHandle - return pointer (or error) to SF entry from handle>
 31718                                  ;----------------------------------------------------------------------------
 31719                                  ;
 31720                                  ; Procedure Name : SFFromHandle
 31721                                  ;
 31722                                  ; SFFromHandle - Given a handle, get JFN and then index into SF table
 31723                                  ;
 31724                                  ;   Input:      BX has handle
 31725                                  ;   Output:     Carry Set
 31726                                  ;                   AX has error code
 31727                                  ;               Carry Reset
 31728                                  ;                   ES:DI has pointer to SF entry
 31729                                  ;   Registers modified: If error, AX,ES, else ES:DI
 31730                                  ; NOTE:
 31731                                  ;   This routine is called from $CREATE_PROCESS_DATA_BLOCK which is called
 31732                                  ;       at DOSINIT time with SS NOT DOSGROUP
 31733                                  ;
 31734                                  ;----------------------------------------------------------------------------
 31735                                  
 31736                                  SFFromHandle:
 31737 00006800 E8E5FF                  	CALL    pJFNFromHandle          ; get jfn pointer
 31738                                  	;retc				; return if error
 31739 00006803 72FA                    	jc	short pJFNFromHandle_error
 31740 00006805 26803DFF                	CMP     BYTE [ES:DI],-1		; unused handle
 31741                                  	;JNZ	short GetSF		; nope, suck out SF
 31742                                  	;;mov	al,6
 31743                                  	;MOV	AL,error_invalid_handle ; appropriate error
 31744                                  	;jmp	short ReturnCarry	; signal it
 31745 00006809 74E9                    	jz	short ReturnCarry_inv_hndl ; Retro DOS v3.0 modification
 31746                                  GetSF:
 31747 0000680B 53                      	push	bx			; save handle
 31748 0000680C 268A1D                  	MOV     BL,[ES:DI]		; get SFN
 31749 0000680F 30FF                    	XOR     BH,BH                   ; ignore upper half
 31750 00006811 E80200                  	CALL    SFFromSFN               ; get real sf spot
 31751 00006814 5B                      	pop	bx			; restore
 31752 00006815 C3                      	retn                          ; say goodbye
 31753                                  
 31754                                  ;BREAK <SFFromSFN - index into SF table for SFN>
 31755                                  
 31756                                  ;**	SFFromSFN - Get an SF Table entry from an SFN
 31757                                  ;----------------------------------------------------------------------------
 31758                                  ;	SFFromSfn uses an SFN to index an entry into the SF table.  This
 31759                                  ;	is more than just a simple index instruction because the SF table
 31760                                  ;	can be made up of multiple pieces chained together. We follow the
 31761                                  ;	chain to the right piece and then do the index operation.
 31762                                  ;
 31763                                  ;   NOTE:
 31764                                  ;	This routine is called from SFFromHandle which is called
 31765                                  ;       at DOSINIT time with SS NOT DOSGROUP
 31766                                  ;
 31767                                  ;	ENTRY	BX has SF index
 31768                                  ;	EXIT	'C' clear if OK
 31769                                  ;		  ES:DI points to SF entry
 31770                                  ;		'C' set if index too large
 31771                                  ;	USES	BX, DI, ES
 31772                                  ;----------------------------------------------------------------------------
 31773                                  
 31774                                  SFFromSFN:
 31775 00006816 2EC43E[2A00]            	LES	DI,[CS:SFT_ADDR]	; (es:di) = start of SFT table
 31776                                  sfsfn5:	
 31777                                  	;cmp	bx,[es:di+4]
 31778 0000681B 263B5D04                	CMP	BX,[ES:DI+SFT.SFCount]	; is handle in this table?
 31779 0000681F 720E                    	JB	short sfsfn7		; yes, go grab it
 31780                                  	;sub	bx,[es:di+4]
 31781 00006821 262B5D04                	SUB     BX,[ES:DI+SFT.SFCount]
 31782 00006825 26C43D                  	les	di,[es:di] ; 14/08/2018
 31783                                  	;LES	DI,[ES:DI+SFT.SFLink]	; get next table segment
 31784 00006828 83FFFF                  	CMP     DI,-1                   ; end of tables?
 31785 0000682B 75EE                    	JNZ	short sfsfn5		; no, try again
 31786 0000682D F9                      	STC
 31787 0000682E C3                      	retn				; return with error, not found
 31788                                  
 31789                                  sfsfn7:
 31790 0000682F 50                      	push	ax
 31791                                  	;mov	ax,53
 31792 00006830 B83500                  	MOV     AX,SF_ENTRY.size	; put it in a nice place
 31793 00006833 F6E3                    	MUL	BL			; (ax) = offset into this SF block
 31794 00006835 01C7                    	ADD	DI,AX			; add base of SF block
 31795 00006837 58                      	pop	ax
 31796                                  	;add	di,6
 31797 00006838 83C706                  	ADD	DI,SFT.SFTable		; offset into structure, 'C' cleared
 31798 0000683B C3                      	retn				; return with 'C' clear
 31799                                  
 31800                                  ;	BREAK <JFNFree - return a jfn pointer if one is free>
 31801                                  
 31802                                  ;**	JFNFree - Find a Free JFN Slot
 31803                                  ;----------------------------------------------------------------------------
 31804                                  ;	JFNFree scansthrough the JFN table and returnsa pointer to a free slot
 31805                                  ;
 31806                                  ;	ENTRY	(ss) = DOSDATA
 31807                                  ;	EXIT	'C' clear if OK
 31808                                  ;		  (bx) = new handle
 31809                                  ;		  (es:di) = pointer to JFN slot
 31810                                  ;		'C' set if error
 31811                                  ;		  (al) = error code
 31812                                  ;	USES	bx, di, es, flags
 31813                                  ;----------------------------------------------------------------------------
 31814                                  
 31815                                  JFNFree:
 31816 0000683C 31DB                    	XOR	BX,BX			; (bx) = initial JFN to try
 31817                                  jfnf1:	
 31818 0000683E E8A7FF                  	CALL	pJFNFromHandle		; get the appropriate handle
 31819 00006841 7209                    	JC	short jfnf5		; no more handles
 31820 00006843 26803DFF                	CMP     BYTE [ES:DI],-1		; free?
 31821 00006847 7405                    	je	short jfnfx		; yes, carry is clear
 31822 00006849 43                      	INC     BX                      ; no, next handle
 31823 0000684A EBF2                    	JMP	short jfnf1		; and try again
 31824                                  
 31825                                  ;	Error.	'C' set
 31826                                  jfnf5:	
 31827                                  	;mov	al,4
 31828 0000684C B004                    	MOV	AL,error_too_many_open_files
 31829                                  jfnfx:	
 31830 0000684E C3                      	retn				; bye
 31831                                  
 31832                                  ;	BREAK <SFNFree - Allocate a free SFN>
 31833                                  
 31834                                  ;**	SFNFree - Allocate a Free SFN/SFT
 31835                                  ;----------------------------------------------------------------------------
 31836                                  ;	SFNFree scans through the sf table looking for a free entry
 31837                                  ;	If it finds one it partially allocates it by setting SFT_REF_COUNT = -1
 31838                                  ;
 31839                                  ;	The problem is that we want to mark the SFT busy so that other threads
 31840                                  ;	can't allocate the SFT before we're finished marking it up.  However,
 31841                                  ;	we can't just mark it busy because we may get blown out of our open
 31842                                  ;	by INT24 and leave the thing orphaned.	To solve this we mark it
 31843                                  ;	"allocation in progress" by setting SFT_REF_COUNT = -1.  If we see
 31844                                  ;	an SFT with this value we look to see if it belongs to this user
 31845                                  ;	and process.  If it does belong to us then it must be an orphan
 31846                                  ;	and we reclaim it.
 31847                                  ;
 31848                                  ;	BUGBUG - improve the performance. I guess it's smaller to call SFFromSFN
 31849                                  ;		over and over, but we could at least set a high water mark...
 31850                                  ;		cause an N^2 loop calling slow SFFromSFN is real slow, too slow
 31851                                  ;		even though this is not a frequently called routine - jgl
 31852                                  ;
 31853                                  ;	ENTRY	(ss) = DOSDATA
 31854                                  ;	EXIT	'C' clear if no error
 31855                                  ;		  (bx) = SFN
 31856                                  ;		  (es:di) = pointer to SFT
 31857                                  ;		  es:[di].SFT_REF_COUNT = -1
 31858                                  ;		'C' set if error
 31859                                  ;		  (al) = error code
 31860                                  ;	USES	bx, di, es, Flags
 31861                                  ;----------------------------------------------------------------------------
 31862                                  
 31863                                  SFNFree:
 31864                                  	;12/08/2018
 31865                                  	;05/08/2018 - Retro DOS v3.0
 31866                                  	; MSDOS 6.0
 31867 0000684F 50                      	push	ax
 31868 00006850 31DB                    	xor	bx,bx			; (bx) = SFN to consider
 31869                                  sfnf5:	
 31870 00006852 53                      	push	bx
 31871 00006853 E8C0FF                  	call	SFFromSFN		; get the potential handle
 31872 00006856 5B                      	pop	bx
 31873 00006857 723A                    	jc	short sfnf95		; no more free SFNs
 31874 00006859 26833D00                	cmp	word [ES:DI],0
 31875                                  	;cmp	word [ES:DI+SF_ENTRY.sf_Ref_Count],0 ; free?
 31876 0000685D 741D                    	je	short sfnf20			; yep, got one
 31877                                  	
 31878                                  	;cmp	word [es:di],0FFFFh ; -1
 31879 0000685F 26833DFF                	cmp	word [ES:DI],sf_busy
 31880                                  	;cmp	word [ES:DI+SF_ENTRY.sf_ref_count],sf_busy
 31881 00006863 7403                    	je	short sfnf10		; special busy mark
 31882                                  sfnf7:	
 31883 00006865 43                      	inc	bx			; try the next one
 31884 00006866 EBEA                    	jmp	short sfnf5
 31885                                  
 31886                                  ;	The SFT has the special "busy" mark; if it belongs to us then
 31887                                  ;	it was abandoned during a earlier call and we can use it.
 31888                                  ;
 31889                                  ;	(bx)	= SFN
 31890                                  ;	(es:di) = pointer to SFT
 31891                                  ;	(TOS)	= caller's (ax)
 31892                                  
 31893                                  sfnf10:	
 31894 00006868 36A1[EA02]              	mov	ax,[SS:USER_ID]
 31895                                  	;cmp	[es:di+2Fh],ax
 31896 0000686C 2639452F                	cmp	[ES:DI+SF_ENTRY.sf_UID],ax
 31897 00006870 75F3                    	jnz	short sfnf7		; not ours
 31898 00006872 36A1[E802]              	mov	ax,[SS:PROC_ID]
 31899                                  	;cmp	[es:di+31h],ax
 31900 00006876 26394531                	cmp	[ES:DI+SF_ENTRY.sf_PID],ax
 31901 0000687A 75E9                    	jnz	short sfnf7		; can't use this one, try the next
 31902                                  
 31903                                  ;	We have an SFT to allocate
 31904                                  ;
 31905                                  ;	(bx)	= SFN
 31906                                  ;	(es:di) = pointer to SFT
 31907                                  ;	(TOS)	= caller's (ax)
 31908                                  
 31909                                  sfnf20:
 31910                                  	; cf = 0 ;; Retro DOS v3.0
 31911                                  
 31912                                  	;mov	word [es:di],0FFFFh
 31913 0000687C 26C705FFFF              	mov	word [ES:DI],sf_busy
 31914                                  					; make sure that this is allocated
 31915                                  	;mov	word [ES:DI+SF_ENTRY.sf_ref_count],sf_busy
 31916                                  
 31917 00006881 36A1[EA02]              	mov	ax,[SS:USER_ID]
 31918                                  	;mov	[es:di+2Fh],ax
 31919 00006885 2689452F                	mov	[ES:DI+SF_ENTRY.sf_UID],ax
 31920 00006889 36A1[E802]              	mov	ax,[SS:PROC_ID]
 31921                                  	;mov	[es:di+31h],ax
 31922 0000688D 26894531                	mov	[es:DI+SF_ENTRY.sf_PID],ax
 31923                                  sfnf21: ;; Retro DOS v3.0
 31924 00006891 58                      	pop	ax
 31925                                  	;clc
 31926 00006892 C3                      	retn				; return with no error
 31927                                  
 31928                                  ;**	Error - no more free SFNs
 31929                                  ;
 31930                                  ;	'C' set
 31931                                  ;	(TOS) = saved ax
 31932                                  
 31933                                  sfnf95: 
 31934 00006893 58                      	pop	ax
 31935                                  	;mov	al,4
 31936 00006894 B004                    	mov	al,error_too_many_open_files
 31937 00006896 C3                      	retn				; return with 'C' and error
 31938                                  
 31939                                  ;============================================================================
 31940                                  ; MACRO.ASM, MSDOS 6.0, 1991
 31941                                  ;============================================================================
 31942                                  ; Retro	DOS v3.0 - 11/07/2018
 31943                                  
 31944                                  ;	TITLE	MACRO - Pathname and macro related internal routines
 31945                                  ;	NAME	MACRO
 31946                                  
 31947                                  ;	Microsoft Confidential
 31948                                  ;	Copyright (C) Microsoft Corporation 1991
 31949                                  ;	All Rights Reserved.
 31950                                  
 31951                                  ;**	MACRO.ASM
 31952                                  ;
 31953                                  ;	$AssignOper
 31954                                  ;	FIND_DPB
 31955                                  ;	InitCDS
 31956                                  ;	$UserOper
 31957                                  ;	GetVisDrv
 31958                                  ;	GetThisDrv
 31959                                  ;	GetCDSFromDrv
 31960                                  ;
 31961                                  ;   Revision history:
 31962                                  ;
 31963                                  ;	Created: MZ 4 April 1983
 31964                                  ;		 MZ 18 April 1983   Make TransFCB handle extended FCBs
 31965                                  ;		 AR 2 June 1983     Define/Delete macro for NET redir.
 31966                                  ;		 MZ 3 Nov 83	    Fix InitCDS to reset length to 2
 31967                                  ;		 MZ 4 Nov 83	    Fix NetAssign to use STRLEN only
 31968                                  ;		 MZ 18 Nov 83	    Rewrite string processing for subtree
 31969                                  ;				    aliasing.
 31970                                  ;
 31971                                  ;   MSDOS performs several types of name translation. First, we maintain for
 31972                                  ;   each valid drive letter the text of the current directory on that drive.
 31973                                  ;   For invalid drive letters, there is no current directory so we pretend to
 31974                                  ;   be at the root. A current directory is either the raw local directory
 31975                                  ;   (consisting of drive:\path) or a local network directory (consisting of
 31976                                  ;   \\machine\path. There is a limit on the point to which a .. is allowed.
 31977                                  ;
 31978                                  ;   Given a path, MSDOS will transform this into a real from-the-root path
 31979                                  ;   without . or .. entries. Any component that is > 8.3 is truncated to
 31980                                  ;   this and all * are expanded into ?'s.
 31981                                  ;
 31982                                  ;   The second part of name translation involves subtree aliasing. A list of
 31983                                  ;   subtree pairs is maintained by the external utility SUBST. The results of
 31984                                  ;   the previous 'canonicalization' are then examined to see if any of the
 31985                                  ;   subtree pairs is a prefix of the user path. If so, then this prefix is
 31986                                  ;   replaced with the other subtree in the pair.
 31987                                  ;
 31988                                  ;   A third part involves mapping this "real" path into a "physical" path.  A
 31989                                  ;   list of drive/subtree pairs are maintained by the external utility JOIN.
 31990                                  ;   The output of the previous translation is examined to see if any of the
 31991                                  ;   subtrees in this list are a prefix of the string. If so, then the prefix
 31992                                  ;   is replaced by the appropriate drive letter. In this manner, we can
 31993                                  ;   'mount' one device under another.
 31994                                  ;
 31995                                  ;   The final form of name translation involves the mapping of a user's
 31996                                  ;   logical drive number into the internal physical drive. This is
 31997                                  ;   accomplished by converting the drive number into letter:CON, performing
 31998                                  ;   the above translation and then converting the character back into a drive
 31999                                  ;   number.
 32000                                  ;
 32001                                  ;   There are two main entry points: TransPath and TransFCB. TransPath will
 32002                                  ;   take a path and form the real text of the pathname with all . and ..
 32003                                  ;   removed. TransFCB will translate an FCB into a path and then invoke
 32004                                  ;   TransPath.
 32005                                  ;
 32006                                  ;	A000	version 4.00  Jan. 1988
 32007                                  
 32008                                  ;Installed = TRUE
 32009                                  
 32010                                  ;	I_need	ThisCDS,DWORD		; pointer to CDS used
 32011                                  ;	I_need	CDSAddr,DWORD		; pointer to CDS table
 32012                                  ;	I_need	CDSCount,BYTE		; number of CDS entries
 32013                                  ;	I_need	CurDrv,BYTE		; current macro assignment (old
 32014                                  ;					; current drive)
 32015                                  ;	I_need	NUMIO,BYTE		; Number of physical drives
 32016                                  ;	I_need	fSharing,BYTE		; TRUE => no redirection allowed
 32017                                  ;	I_need	DummyCDS,80h		; buffer for dummy cds
 32018                                  ;	I_need	DIFFNAM,BYTE		; flag for MyName being set
 32019                                  ;	I_need	MYNAME,16		; machine name
 32020                                  ;	I_need	MYNUM,WORD		; machine number
 32021                                  ;	I_need	DPBHEAD,DWORD		; beginning of DPB chain
 32022                                  ;	I_need	EXTERR_LOCUS,BYTE	; Extended Error Locus
 32023                                  ;	I_need	DrvErr,BYTE		; drive error
 32024                                  
 32025                                  ;BREAK <$AssignOper -- Set up a Macro>
 32026                                  ;----------------------------------------------------------------------------
 32027                                  ; Inputs:
 32028                                  ;	AL = 00 get assign mode 		    (ReturnMode)
 32029                                  ;	AL = 01 set assign mode 		    (SetMode)
 32030                                  ;	AL = 02 get attach list entry		    (GetAsgList)
 32031                                  ;	AL = 03 Define Macro (attch start)
 32032                                  ;	    BL = Macro type
 32033                                  ;	       = 0 alias
 32034                                  ;	       = 1 file/device
 32035                                  ;	       = 2 drive
 32036                                  ;	       = 3 Char device -> network
 32037                                  ;	       = 4 File device -> network
 32038                                  ;	    DS:SI -> ASCIZ source name
 32039                                  ;	    ES:DI -> ASCIZ destination name
 32040                                  ;	AL = 04 Cancel Macro
 32041                                  ;	    DS:SI -> ASCIZ source name
 32042                                  ;	AL = 05 Modified get attach list entry
 32043                                  ;	AL = 06 Get ifsfunc item
 32044                                  ;	AL = 07 set in_use of a drive's CDS
 32045                                  ;	     DL = drive number, 0=default  0=A,,
 32046                                  ;	AL = 08 reset in_use of a drive's CDS
 32047                                  ;	     DL = drive number, 0=A, 1=B,,,
 32048                                  ; Function:
 32049                                  ;	Do macro stuff
 32050                                  ; Returns:
 32051                                  ;	Std Xenix style error return
 32052                                  ;----------------------------------------------------------------------------
 32053                                  
 32054                                  _$AssignOper:
 32055                                  	; MSDOS 6.0
 32056                                  	;CMP	AL,7			      ; set in_use ?		;AN000;
 32057                                  	;JNZ	short chk08		      ; no			;AN000;
 32058                                  ;srinuse:								;AN000;
 32059                                  	;PUSH	AX			      ; save al 		;AN000;
 32060                                  	;MOV	AL,DL			      ; AL= drive id		;AN000;
 32061                                  	;CALL	GetCDSFromDrv		      ; ds:si -> cds		;AN000;
 32062                                  	;POP	AX			      ; 			;AN000;
 32063                                  	;JC	short baddrv		      ; bad drive		;AN000;
 32064                                  	;CMP	WORD [SI+curdir.devptr],0     ; dpb ptr =0 ?		;AN000;
 32065                                  	;JZ	short baddrv		      ;     no			;AN000;
 32066                                  	;CMP	AL,7			      ; set ?			;AN000;
 32067                                  	;JNZ	short resetdrv		      ; no			;AN000;
 32068                                  	;OR	word [SI+curdir.flags],curdir_inuse; set in_use		;AN000;
 32069                                  	;JMP	SHORT okdone		      ; 			;AN000;
 32070                                  ;resetdrv:								;AN000;
 32071                                  	;AND	word [SI+curdir_flags],~curdir_inuse ; reset in_use	;AN000;
 32072                                  	;JMP	SHORT okdone			; 			;AN000;
 32073                                  ;baddrv: 								;AN000;
 32074                                  	;MOV	AX,error_invalid_drive	      ; error			;AN000;
 32075                                  	;JMP	SHORT ASS_ERR		      ; 			;AN000;
 32076                                  ;chk08:									;AN000;
 32077                                  	;CMP	AL,8			      ; reset inuse ?		;AN000;
 32078                                  	;JZ	short srinuse 		      ; yes			;AN000;
 32079                                  
 32080                                  	;IF	NOT INSTALLED
 32081                                  	;transfer NET_ASSOPER
 32082                                  	;ELSE
 32083                                  
 32084                                  	; MSDOS 3.3 (& MSDOS 6.0)
 32085 00006897 50                      	PUSH	AX
 32086                                  	;mov	ax,111Eh
 32087                                  	;MOV	AX,(MultNET SHL 8) OR 30
 32088 00006898 B81E11                  	mov	ax,(MultNET*256)+30
 32089 0000689B CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - DO REDIRECTION
 32090                                  			; SS = DOS CS
 32091                                  			; STACK: WORD function to execute
 32092                                  			; Return: CF set on error, AX = error code
 32093                                  			; STACK unchanged
 32094 0000689D 5B                      	POP	BX			; Don't zap error code in AX
 32095 0000689E 7203                    	JC	short ASS_ERR
 32096                                  okdone:
 32097 000068A0 E95AAE                  	jmp	SYS_RET_OK
 32098                                  
 32099                                  ASS_ERR:
 32100 000068A3 E963AE                  	jmp	SYS_RET_ERR
 32101                                  
 32102                                  	;ENDIF
 32103                                  
 32104                                  ;Break <FIND_DPB - Find a DPB from a drive number>
 32105                                  ;----------------------------------------------------------------------------
 32106                                  ;**	FIND_DPB - Find a DPB from a Drive #
 32107                                  ;
 32108                                  ;	ENTRY	AL has drive number A = 0
 32109                                  ;	EXIT	'C' set
 32110                                  ;		    No DPB for this drive number
 32111                                  ;		'C' clear
 32112                                  ;		    DS:SI points to DPB for drive
 32113                                  ;	USES	SI, DS, Flags
 32114                                  ;----------------------------------------------------------------------------
 32115                                  
 32116                                  FIND_DPB:
 32117 000068A6 36C536[2600]            	LDS	SI,[SS:DPBHEAD]		;smr;SS Override
 32118                                  fdpb5:	
 32119 000068AB 83FEFF                  	CMP	SI,-1
 32120 000068AE 7409                    	JZ	short fdpb10
 32121 000068B0 3A04                    	cmp	al,[si]
 32122                                  	;CMP	AL,[SI+DPB.DRIVE]
 32123 000068B2 7406                    	jz	short ret_label15	; Carry clear (retz)
 32124                                  	;lds	si,[si+18h]
 32125 000068B4 C57418                  	LDS	SI,[SI+DPB.NEXT_DPB]
 32126 000068B7 EBF2                    	JMP	short fdpb5
 32127                                  
 32128                                  fdpb10:	
 32129 000068B9 F9                      	STC
 32130                                  
 32131                                  ret_label15:
 32132 000068BA C3                      	retn
 32133                                  
 32134                                  ;	Break <InitCDS - set up an empty CDS>
 32135                                  ;----------------------------------------------------------------------------
 32136                                  ;**	InitCDS - Setup an Empty CDS
 32137                                  ;
 32138                                  ;	ENTRY	ThisCDS points to CDS
 32139                                  ;		AL has uppercase drive letter
 32140                                  ;	EXIT	ThisCDS is now empty
 32141                                  ;		(ES:DI) = CDS
 32142                                  ;		'C' set if no DPB associated with drive
 32143                                  ;	USES	AH,ES,DI, Flags
 32144                                  ;----------------------------------------------------------------------------
 32145                                  
 32146                                  InitCDS:
 32147                                  	; 19/08/2018
 32148                                  	; 05/08/2018 - Retro DOS v3.0
 32149                                  	; MSDOS 6.0
 32150 000068BB 50                      	push	ax			; save (AL) for caller
 32151 000068BC 36C43E[3A05]            	LES	DI,[SS:THISCDS]		; (es:di) = CDS address
 32152                                  	;mov	word [es:di+67],0
 32153 000068C1 26C745430000            	MOV	word [ES:DI+curdir.flags],0 ; "free" CDS
 32154 000068C7 2C40                    	SUB	AL,"A"-1                ; A = 1
 32155 000068C9 363806[4600]            	CMP	[SS:NUMIO],AL		;smr;SS Override
 32156 000068CE 7236                    	JC	short icdsx		; Drive does not map a physical drive
 32157 000068D0 48                      	dec	ax			; (AL) = 0 if A, 1 if B, etc.
 32158 000068D1 50                      	PUSH	AX			; save drive number for later
 32159 000068D2 0441                    	add	al,"A"
 32160 000068D4 B43A                    	MOV	AH,':'
 32161 000068D6 268905                  	mov	[ES:DI],ax
 32162                                  	;MOV	[ES:DI+curdir.text],AX 	; set "x:"
 32163                                  	;mov	ax,"\"
 32164                                  	;mov	[es:di+2],ax
 32165                                  	;MOV	word [ES:DI+curdir.text+2],"\"	; NUL terminate
 32166 000068D9 26C745025C00            	mov	word [ES:DI+curdir.text+2],005Ch ; 19/08/2018
 32167                                  	;or	word [es:di+67],4000h
 32168                                  	;or	byte [es:di+68],40h
 32169 000068DF 26804D4440              	OR	byte [ES:DI+curdir.flags+1],curdir_inuse>>8
 32170 000068E4 29C0                    	sub	ax,ax
 32171                                  	;MOV	[es:di+73],ax ; 0
 32172 000068E6 26894549                	MOV	[ES:DI+curdir.ID],ax
 32173                                  	;mov	[es:di+75],ax ; 0
 32174 000068EA 2689454B                	MOV	[ES:DI+curdir.ID+2],ax
 32175 000068EE B002                    	mov	al,2
 32176                                  	;mov	[es:di+79],aX ; 2
 32177 000068F0 2689454F                	MOV	[ES:DI+curdir.end],ax
 32178 000068F4 58                      	POP	AX			; (al) = drive number
 32179 000068F5 1E                      	push	ds
 32180 000068F6 56                      	push	si
 32181 000068F7 E8ACFF                  	call	FIND_DPB
 32182 000068FA 7208                    	JC	short icds5		; OOOOPPPPPSSSS!!!!
 32183                                  	;mov	[es:di+69],si
 32184 000068FC 26897545                	MOV	[ES:DI+curdir.devptr],SI
 32185                                  	;mov	[es:di+71],ds
 32186 00006900 268C5D47                	MOV	[ES:DI+curdir.devptr+2],DS
 32187                                  icds5:	
 32188 00006904 5E                      	pop	si
 32189 00006905 1F                      	pop	ds
 32190                                  icdsx:	
 32191 00006906 58                      	pop	ax
 32192                                  RET45:
 32193 00006907 C3                      	retn
 32194                                  
 32195                                  ;Break <$UserOper - get/set current user ID (for net)>
 32196                                  ;----------------------------------------------------------------------------
 32197                                  ;   $UserOper - retrieve or initiate a user id string.	MSDOS will only
 32198                                  ;	maintain this string and do no verifications.
 32199                                  ;
 32200                                  ;   Inputs:	AL has function type (0-get 1-set 2-printer-set 3-printer-get
 32201                                  ;				      4-printer-set-flags,5-printer-get-flags)
 32202                                  ;		DS:DX is user string pointer (calls 1,2)
 32203                                  ;		ES:DI is user buffer (call 3)
 32204                                  ;		BX is assign index (calls 2,3,4,5)
 32205                                  ;		CX is user number (call 1)
 32206                                  ;		DX is flag word (call 4)
 32207                                  ;   Outputs:	If AL = 0 then the current user string is written to DS:DX
 32208                                  ;			and user CX is set to the user number
 32209                                  ;		If AL = 3 then CX bytes have been put at input ES:DI
 32210                                  ;		If AL = 5 then DX is flag word
 32211                                  ;----------------------------------------------------------------------------
 32212                                  
 32213                                  _$UserOper:
 32214                                  	; 05/08/2018 - Retro DOS v3.0
 32215                                  	; MSDOS 6.0 (& MSDOS 3.3)
 32216 00006908 50                      	PUSH	AX
 32217 00006909 2C01                    	SUB	AL,1			; quick dispatch on 0,1
 32218 0000690B 58                      	POP	AX
 32219 0000690C 7211                    	JB	short UserGet 		; return to user the string
 32220 0000690E 742E                    	JZ	short UserSet 		; set the current user
 32221 00006910 3C05                    	CMP	AL,5			; test for 2,3,4 or 5
 32222 00006912 763D                    	JBE	short UserPrint		; yep
 32223                                  	;mov	byte [ss:EXTERR_LOCUS],1
 32224 00006914 36C606[D102]01          	MOV	byte [SS:EXTERR_LOCUS],errLOC_Unk ;smr;SS Override 
 32225                                  					; Extended Error Locus
 32226                                  	;error	error_invalid_function	; not 0,1,2,3
 32227                                  	;mov	al,1
 32228 0000691A B001                    	MOV	AL,error_invalid_function
 32229                                  useroper_error:
 32230 0000691C E9EAAD                  	JMP	SYS_RET_ERR
 32231                                  
 32232                                  UserGet:
 32233                                  ; Transfer MYNAME to DS:DX
 32234                                  ; Set Return CX to MYNUM
 32235 0000691F 1E                      	PUSH	DS			; switch registers
 32236 00006920 07                      	POP	ES
 32237 00006921 89D7                    	MOV	DI,DX			; destination
 32238 00006923 368B0E[0E00]            	MOV	CX,[SS:MYNUM]		; Get number	;smr;SS Override
 32239 00006928 E8E0AC                  	call	Get_User_Stack
 32240 0000692B 894C04                  	MOV	[SI+user_env.user_CX],CX ; Set number return
 32241 0000692E 16                      	push	ss			; point to DOSDATA
 32242 0000692F 1F                      	pop	ds
 32243 00006930 BE[B302]                	MOV	SI,MYNAME		; point source to user string
 32244                                  UserMove:
 32245 00006933 B90F00                  	MOV	CX,15
 32246 00006936 F3A4                    	REP	MOVSB			; blam.
 32247 00006938 31C0                    	XOR	AX,AX			; 16th byte is 0
 32248 0000693A AA                      	STOSB
 32249                                  UserBye:
 32250 0000693B E9BFAD                  	jmp	SYS_RET_OK		; no errors here
 32251                                  
 32252                                  UserSet:
 32253                                  ; Transfer DS:DX to MYNAME
 32254                                  ; CX to MYNUM
 32255 0000693E 36890E[0E00]            	MOV	[SS:MYNUM],CX				;smr;SS Override
 32256 00006943 89D6                    	MOV	SI,DX			; user space has source
 32257 00006945 16                      	push	ss
 32258 00006946 07                      	pop	es
 32259 00006947 BF[B302]                	MOV	DI,MYNAME		; point dest to user string
 32260 0000694A 36FE06[B202]            	INC	byte [SS:DIFFNAM]	; signal change ;smr;SS Override
 32261 0000694F EBE2                    	JMP	short UserMove
 32262                                  
 32263                                  UserPrint:
 32264                                  
 32265                                  ;IF NOT Installed
 32266                                  ;	transfer PRINTER_GETSET_STRING
 32267                                  ;ELSE
 32268 00006951 50                      	PUSH	AX
 32269                                  	;mov	ax,111Fh
 32270                                  	;MOV	AX,(MultNET SHL 8) OR 31
 32271 00006952 B81F11                  	mov	ax,(MultNET<<8)|31
 32272 00006955 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - PRINTER SETUP
 32273                                  			; STACK: WORD function
 32274                                  			; Return: CF set on error, AX = error code
 32275                                  			; STACK unchanged
 32276 00006957 5A                      	POP	DX			; Clean stack
 32277 00006958 7302                    	JNC	short OKPA
 32278 0000695A EBC0                    	jmp	short useroper_error
 32279                                  OKPA:
 32280 0000695C EBDD                    	jmp	short UserBye
 32281                                  ;ENDIF
 32282                                  
 32283                                  
 32284                                  ;Break	<GetVisDrv - return visible drive>
 32285                                  ;----------------------------------------------------------------------------
 32286                                  ;   GetVisDrv - correctly map non-spliced inuse drives
 32287                                  ;
 32288                                  ;   Inputs:	AL has drive identifier (0=default)
 32289                                  ;   Outputs:	Carry Set - invalid drive/macro
 32290                                  ;		Carry Clear - AL has physical drive (0=A)
 32291                                  ;		    ThisCDS points to CDS
 32292                                  ;   Registers modified: AL
 32293                                  ;----------------------------------------------------------------------------
 32294                                  
 32295                                  GetVisDrv:
 32296                                  	; 05/08/2018 - Retro DOS v3.0
 32297                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 6839h
 32298 0000695E E81400                  	CALL	GETTHISDRV		; get inuse drive
 32299 00006961 72A4                    	jc	short RET45
 32300 00006963 1E                      	push	ds
 32301 00006964 56                      	push	si
 32302 00006965 36C536[3A05]            	LDS	SI,[SS:THISCDS]			;smr;SS Override
 32303                                  	;test	word [si+67],2000h
 32304 0000696A F744430020              	TEST	word [SI+curdir.flags],curdir_splice
 32305 0000696F 5E                      	pop	si
 32306 00006970 1F                      	pop	ds
 32307 00006971 7494                    	jz	short RET45		; if not spliced, return OK
 32308                                  	; MSDOS 6.0
 32309                                  	;MOV	[SS:DrvErr],error_invalid_drive ;IFS. ;AN000;smr;SS Override
 32310                                  	;
 32311 00006973 F9                      	STC				; signal error
 32312 00006974 C3                      	retn
 32313                                  
 32314                                  ;Break <Getthisdrv - map a drive designator (0=def, 1=A...)>
 32315                                  ;----------------------------------------------------------------------------
 32316                                  ;   GetThisDrv - look through a set of macros and return the current drive and
 32317                                  ;	macro pointer
 32318                                  ;
 32319                                  ;   Inputs:	AL has drive identifier (1=A, 0=default)
 32320                                  ;   Outputs:
 32321                                  ;		Carry Set - invalid drive/macro
 32322                                  ;		Carry Clear - AL has physical drive (0=A)
 32323                                  ;		   ThisCDS points to macro
 32324                                  ;   Registers modified: AL
 32325                                  ;----------------------------------------------------------------------------
 32326                                  
 32327                                  GETTHISDRV:
 32328                                  	; 05/08/2018
 32329                                  	; 12/07/2018 - Retro DOS v3.0
 32330                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 6850h
 32331                                  	; MSDOS 3.3 (& MSDOS 6.0)
 32332 00006975 08C0                    	OR	AL,AL			; are we using default drive?
 32333 00006977 7506                    	JNZ	SHORT GTD10		; no, go get the CDS pointers
 32334 00006979 36A0[E402]              	MOV	AL,[SS:CURDRV]		; get the current drive
 32335                                  	;INC	ax			; Counteract next instruction
 32336                                  	; 04/09/2018
 32337 0000697D FEC0                    	inc	al
 32338                                  GTD10:	
 32339                                  	;DEC	ax			; 0 = A
 32340 0000697F FEC8                    	dec	al
 32341 00006981 1E                      	PUSH	DS			; save world
 32342 00006982 56                      	PUSH	SI
 32343                                  	;mov	byte [ss:EXTERR_LOCUS],2
 32344 00006983 36C606[D102]02          	MOV	BYTE [SS:EXTERR_LOCUS],errLOC_Disk		;smr;SS Override
 32345 00006989 36F606[0D05]FF          	TEST	BYTE [SS:FSHARING],-1	; Logical or Physical?	;smr;SS Override
 32346 0000698F 7421                    	JZ	SHORT GTD20		; Logical
 32347 00006991 50                      	PUSH	AX
 32348 00006992 06                      	PUSH	ES
 32349 00006993 57                      	PUSH	DI
 32350 00006994 36C706[3A05][9504]      	MOV	WORD [SS:THISCDS],DUMMYCDS ;smr;SS Override
 32351 0000699B 368C0E[3C05]            	mov	[SS:THISCDS+2],CS ; MSDOS 3.3
 32352                                  	;MOV	[SS:THISCDS+2],SS	;ThisCDS = &DummyCDS;smr;
 32353 000069A0 0441                    	ADD	AL,'A'
 32354 000069A2 E816FF                  	CALL	InitCDS			;	InitCDS(c);
 32355                                  	;test	word [es:di+67],4000h
 32356 000069A5 26F745430040            	TEST	WORD [ES:DI+curdir.flags],curdir_inuse	; Clears carry
 32357 000069AB 5F                      	POP	DI
 32358 000069AC 07                      	POP	ES
 32359 000069AD 58                      	POP	AX
 32360 000069AE 740E                    	JZ	SHORT GTD30		; Not a physical drive.
 32361 000069B0 EB13                    	JMP	SHORT GTDX		; carry clear
 32362                                  GTD20:
 32363 000069B2 E81300                  	CALL	GetCDSFromDrv
 32364 000069B5 7207                    	JC	SHORT GTD30	; Unassigned CDS -> return error already set
 32365                                  	;test	word [si+43h],4000h
 32366 000069B7 F744430040              	TEST	WORD [SI+curdir.flags],curdir_inuse ; Clears Carry
 32367 000069BC 7507                    	JNZ	SHORT GTDX		; carry clear
 32368                                  GTD30:	
 32369                                  	; 14/08/2018
 32370                                  	;MOV	AL,error_invalid_drive	; invalid FAT drive
 32371                                  	;MOV	BYTE [ss:DrvErr],AL	; save this for IOCTL
 32372 000069BE 36C606[D102]01          	MOV	BYTE [ss:EXTERR_LOCUS],errLOC_Unk
 32373 000069C4 F9                      	STC
 32374                                  GTDX:	
 32375 000069C5 5E                      	POP	SI			; restore world
 32376 000069C6 1F                      	POP	DS
 32377 000069C7 C3                      	RETN
 32378                                   
 32379                                  
 32380                                  ;Break <GetCDSFromDrv - convert a drive number to a CDS pointer>
 32381                                  ;----------------------------------------------------------------------------
 32382                                  ;   GetCDSFromDrv - given a physical drive number, convert it to a CDS
 32383                                  ;	pointer, returning an error if the drive number is greater than the
 32384                                  ;	number of CDS's
 32385                                  ;
 32386                                  ;   Inputs:	AL is physical unit # A=0...
 32387                                  ;   Outputs:	Carry Set if Bad Drive
 32388                                  ;		Carry Clear
 32389                                  ;		    DS:SI -> CDS
 32390                                  ;		    [THISCDS] = DS:SI
 32391                                  ;   Registers modified: DS,SI
 32392                                  ;----------------------------------------------------------------------------
 32393                                  
 32394                                  GetCDSFromDrv:
 32395 000069C8 363A06[4700]            	CMP	AL,[SS:CDSCOUNT]	; is this a valid designator;smr;SS Override
 32396 000069CD 7202                    	JB	SHORT GetCDS		; yes, go get the macro
 32397 000069CF F9                      	STC				; signal error
 32398 000069D0 C3                      	RETN				; bye
 32399                                  GetCDS:
 32400 000069D1 53                      	PUSH	BX
 32401 000069D2 50                      	PUSH	AX
 32402 000069D3 36C536[3C00]            	LDS	SI,[SS:CDSADDR]		; get pointer to table	;smr;SS Override
 32403                                  	;mov	bl,81
 32404 000069D8 B351                    	MOV	BL,curdir.size		; size in convenient spot
 32405 000069DA F6E3                    	MUL	BL			; get net offset
 32406 000069DC 01C6                    	ADD	SI,AX			; convert to true pointer
 32407 000069DE 368936[3A05]            	MOV	[SS:THISCDS],SI		; store convenient offset;smr;SS Override
 32408 000069E3 368C1E[3C05]            	MOV	[SS:THISCDS+2],DS	; store convenient segment;smr;SS Override
 32409 000069E8 58                      	POP	AX
 32410 000069E9 5B                      	POP	BX
 32411 000069EA F8                      	CLC				; no error
 32412 000069EB C3                      	RETN				; bye!
 32413                                  
 32414                                  ;============================================================================
 32415                                  ; MACRO2.ASM, MSDOS 6.0, 1991
 32416                                  ;============================================================================
 32417                                  ; Retro	DOS v3.0 - 12/07/2018
 32418                                  
 32419                                  ;BREAK <TransFCB - convert an FCB into a path, doing substitution>
 32420                                  ;----------------------------------------------------------------------------
 32421                                  ;   TransFCB - Copy an FCB from DS:DX into a reserved area doing all of the
 32422                                  ;       gritty substitution.
 32423                                  ;
 32424                                  ;   Inputs:     DS:DX - pointer to FCB
 32425                                  ;               ES:DI - point to destination
 32426                                  ;   Outputs:    Carry Set - invalid path in final map
 32427                                  ;               Carry Clear - FCB has been mapped into ES:DI
 32428                                  ;                   Sattrib is set from possibly extended FCB
 32429                                  ;                   ExtFCB set if extended FCB found
 32430                                  ;   Registers modified: most
 32431                                  ;----------------------------------------------------------------------------
 32432                                  
 32433                                  TransFCB:
 32434                                  	; 12/07/2018 - Retro DOS v3.0
 32435                                  	;LocalVar FCBTmp,16
 32436                                  	;ENTER
 32437 000069EC 55                      	push	bp
 32438 000069ED 89E5                    	mov	bp,sp
 32439                                  	;sub	sp,15	; MSDOS 3.3
 32440 000069EF 83EC10                  	sub	sp,16	; MSDOS 6.0
 32441 000069F2 16                      	push	ss
 32442 000069F3 07                      	pop	es
 32443 000069F4 06                      	push	es
 32444 000069F5 57                      	push	di
 32445                                  	;lea	di,[bp-15] ; MSDOS 3.3
 32446                                  	;LEA	DI,FCBTmp 
 32447 000069F6 8D7EF0                  	lea	di,[bp-16]		; point to FCB temp area
 32448 000069F9 36C606[0705]00          	mov	byte [SS:EXTFCB],0	; no extended FCB found ;smr;SS Override
 32449 000069FF 36C606[0805]00          	mov	byte [SS:SATTRIB],0	; default search attributes;smr;SS Override
 32450 00006A05 E8C1BF                  	call	GetExtended             ; get FCB, extended or not
 32451 00006A08 740D                    	jz	short GetDrive		; not an extended FCB, get drive
 32452 00006A0A 8A44FF                  	mov	AL,[SI-1]               ; get attributes
 32453 00006A0D 36A2[0805]              	mov	[SS:SATTRIB],AL		; store search attributes;smr;SS Override
 32454 00006A11 36C606[0705]FF          	mov	byte [SS:EXTFCB],-1	; signal extended FCB  ;smr;SS Override
 32455                                  GetDrive:
 32456 00006A17 AC                      	lodsb				; get drive byte
 32457 00006A18 E85AFF                  	call	GETTHISDRV
 32458 00006A1B 722C                    	jc	short BadPack
 32459 00006A1D E87C03                  	call	TextFromDrive           ; convert 0-based drive to text
 32460                                  ;
 32461                                  ; Scan the source to see if there are any illegal chars
 32462                                  ;
 32463 00006A20 BB[1613]                	mov	bx,CharType		; load lookup table
 32464 00006A23 B90B00                  	mov	cx,11
 32465 00006A26 56                      	push	si			; back over name, ext
 32466                                  FCBScan:
 32467 00006A27 AC                      	lodsb				; get a byte
 32468                                  	; 09/08/2018
 32469                                  	;xlat	byte [es:bx]
 32470 00006A28 26D7                    	es	xlat			; get flags
 32471                                  	;test	al,8	
 32472 00006A2A A808                    	test	al,FFCB
 32473 00006A2C 741B                    	jz	short BadPack
 32474                                  NextCh: 
 32475 00006A2E E2F7                    	loop	FCBScan
 32476 00006A30 5E                      	pop	si
 32477 00006A31 89FB                    	mov	bx,di
 32478 00006A33 E8E5C3                  	call	PackName                ; crunch the path
 32479 00006A36 5F                      	pop	di			; get original destination
 32480 00006A37 07                      	pop	es
 32481 00006A38 16                      	push	ss			; get DS addressability
 32482 00006A39 1F                      	pop	ds
 32483                                  	;lea	si,[bp-15] ; MSDOS 3.3
 32484                                  	;LEA	SI,FCBTmp		; point at new pathname
 32485 00006A3A 8D76F0                  	lea	si,[bp-16]
 32486 00006A3D 803F00                  	cmp	byte [bx],0
 32487 00006A40 7407                    	jz	short BadPack
 32488 00006A42 55                      	push	bp
 32489 00006A43 E80E00                  	call	TransPathSet            ; convert the path
 32490 00006A46 5D                      	pop	bp
 32491 00006A47 7303                    	jnc	short FCBRet		; bye with transPath error code
 32492                                  BadPack:
 32493 00006A49 F9                      	STC
 32494                                  	;mov	al,3
 32495 00006A4A B003                    	MOV     AL,error_path_not_found
 32496                                  FCBRet: 
 32497                                  	;LEAVE
 32498 00006A4C 89EC                    	mov	sp,bp
 32499 00006A4E 5D                      	pop	bp
 32500                                  TransPath_retn:
 32501 00006A4F C3                      	retn
 32502                                  
 32503                                  ; 12/07/2018 - Retro DOS v3.0
 32504                                  
 32505                                  ;BREAK <TransPath - copy a path, do string sub and put in current dir>
 32506                                  ;----------------------------------------------------------------------------
 32507                                  ;
 32508                                  ;   TransPath - copy a path from DS:SI to ES:DI, performing component string
 32509                                  ;       substitution, insertion of current directory and fixing . and ..
 32510                                  ;       entries. Perform splicing. Allow input string to match splice
 32511                                  ;       exactly.
 32512                                  ;
 32513                                  ;   TransPathSet - Same as above except No splicing is performed if input path
 32514                                  ;       matches splice.
 32515                                  ;
 32516                                  ;   TransPathNoSet - No splicing/local using is performed at all.
 32517                                  ;
 32518                                  ;   The following anomalous behaviour is required:
 32519                                  ;
 32520                                  ;       Drive letters on devices are ignored. (set up DummyCDS)
 32521                                  ;       Paths on devices are ignored. (truncate to 0-length)
 32522                                  ;       Raw net I/O sets ThisCDS => NULL.
 32523                                  ;       fSharing => dummyCDS and no subst/splice. Only canonicalize.
 32524                                  ;
 32525                                  ;   Other behaviour:
 32526                                  ;
 32527                                  ;       ThisCDS set up.
 32528                                  ;       FatRead done on local CDS.
 32529                                  ;       ValidateCDS done on local CDS.
 32530                                  ;
 32531                                  ;   Brief flowchart:
 32532                                  ;
 32533                                  ;       if fSharing then
 32534                                  ;           set up DummyCDS (ThisCDS)
 32535                                  ;           canonicalize (sets cMeta)
 32536                                  ;           splice
 32537                                  ;           fatRead
 32538                                  ;           return
 32539                                  ;       if \\ or d:\\ lead then
 32540                                  ;           set up null CDS (ThisCDS)
 32541                                  ;           canonicalize (sets cMeta)
 32542                                  ;           return
 32543                                  ;       if device then
 32544                                  ;           set up dummyCDS (ThisCDS)
 32545                                  ;           canonicalize (sets cMeta)
 32546                                  ;           return
 32547                                  ;       if file then
 32548                                  ;           getCDS (sets (ThisCDS) from name)
 32549                                  ;           validateCDS (may reset current dir)
 32550                                  ;           Copy current dir
 32551                                  ;           canonicalize (set cMeta)
 32552                                  ;           splice
 32553                                  ;           generate correct CDS (ThisCDS)
 32554                                  ;           if local then
 32555                                  ;               fatread
 32556                                  ;           return
 32557                                  ;
 32558                                  ;   Inputs:     DS:SI - point to ASCIZ string path
 32559                                  ;               DI - point to buffer in DOSDATA
 32560                                  ;   Outputs:    Carry Set - invalid path specification: too many .., bad
 32561                                  ;                   syntax, etc. or user FAILed to I 24.
 32562                                  ;               WFP_Start - points to beginning of buffer
 32563                                  ;               Curr_Dir_End - points to end of current dir in path
 32564                                  ;               DS - DOSDATA
 32565                                  ;   Registers modified: most
 32566                                  ;
 32567                                  ;----------------------------------------------------------------------------
 32568                                  
 32569                                  TransPath:
 32570 00006A50 30C0                    	XOR     AL,AL
 32571 00006A52 EB02                    	JMP     SHORT SetSplice
 32572                                  TransPathSet:
 32573 00006A54 B0FF                    	MOV     AL,-1
 32574                                  SetSplice:
 32575 00006A56 36A2[F802]              	MOV	[SS:NoSetDir],AL	;   NoSetDir = !fExact; ;smr;SS Override
 32576 00006A5A B0FF                    	MOV     AL,-1
 32577                                  TransPathNoSet:
 32578 00006A5C 36A2[0C05]              	MOV	[SS:FSPLICE],AL		;   fSplice = TRUE;     ;smr;SS Override
 32579 00006A60 36C606[1505]FF          	MOV	byte [ss:CMETA],-1      			;smr;SS Override
 32580 00006A66 36893E[4A05]            	MOV     [SS:WFP_START],DI 				;smr;SS Override
 32581 00006A6B 36C706[4E05]FFFF        	MOV	word [SS:CURR_DIR_END],-1 ; crack from start	;smr;SS Override
 32582 00006A72 16                      	push	ss
 32583 00006A73 07                      	pop	es
 32584                                  	;lea	bp,[di+134]
 32585 00006A74 8DAD8600                	LEA     BP,[DI+TEMPLEN]         ; end of buffer
 32586                                  ;
 32587                                  ; if this is through the server dos call, fsharing is set. We set up a
 32588                                  ; dummy cds and let the operation go.
 32589                                  ;
 32590 00006A78 36F606[0D05]FF          	TEST	byte [SS:FSHARING],-1	; if no sharing		;smr;SS Override
 32591 00006A7E 7435                    	JZ	short CheckUNC		; skip to UNC check
 32592                                  ;
 32593                                  ; ES:DI point to buffer
 32594                                  ;
 32595 00006A80 E80203                  	CALL	DriveFromText           ; get drive and advance DS:SI
 32596 00006A83 E8EFFE                  	call	GETTHISDRV              ; Set ThisCDS and convert to 0-based
 32597 00006A86 722A                    	jc	short NoPath
 32598 00006A88 E81103                  	CALL	TextFromDrive		; drop in new
 32599 00006A8B 8D5D01                  	LEA	BX,[DI+1]               ; backup limit
 32600 00006A8E E83801                  	CALL	Canonicalize            ; copy and canonicalize
 32601 00006A91 72BC                    	jc	short TransPath_retn	; errors
 32602                                  ;
 32603                                  ; Perform splices for net guys.
 32604                                  ;
 32605 00006A93 16                      	push	ss
 32606 00006A94 1F                      	pop	ds
 32607 00006A95 8B36[4A05]              	MOV     SI,[WFP_START] 		; point to name
 32608 00006A99 F606[0C05]FF            	TEST	byte [FSPLICE],-1
 32609 00006A9E 7403                    	JZ	short NoServerSplice
 32610 00006AA0 E83602                  	CALL    Splice
 32611                                  NoServerSplice:
 32612 00006AA3 16                      	push	ss
 32613 00006AA4 1F                      	pop	ds                      ; for FATREAD
 32614 00006AA5 C43E[3A05]              	LES     DI,[THISCDS]		; for fatread
 32615 00006AA9 E8C0B5                  	call	EcritDisk
 32616 00006AAC E810F1                  	call	FATREAD_CDS
 32617 00006AAF E8C2B5                  	call	LcritDisk
 32618                                  NoPath:
 32619                                  	;mov	al,3
 32620 00006AB2 B003                    	MOV     AL,error_path_not_found ; Set up for possible bad path error
 32621 00006AB4 C3                      	retn				; any errors are in Carry flag
 32622                                  
 32623                                  ;
 32624                                  ; Let the network decide if the name is for a spooled device. It will map
 32625                                  ; the name if so.
 32626                                  ;
 32627                                  CheckUNC:
 32628 00006AB5 36C706[3A05]FFFF        	MOV     WORD [SS:THISCDS],-1	; NULL thisCDS		;smr;SS Override
 32629                                  	;CallInstall NetSpoolCheck,MultNET,35
 32630 00006ABC B82311                  	mov	ax,1123h
 32631 00006ABF CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - QUALIFY REMOTE FILENAME
 32632                                  			; DS:SI -> ASCIZ filename to canonicalize
 32633                                  			; ES:DI -> 128-byte buffer for qualified name
 32634                                  			; Return: CF set if not resolved
 32635 00006AC1 7329                    	JNC	short UNCDone
 32636                                  ;
 32637                                  ; At this point the name is either a UNC-style name (prefixed with two leading
 32638                                  ; \\s) or is a local file/device. Remember that if a net-spooled device was
 32639                                  ; input, then the name has been changed to the remote spooler by the above net
 32640                                  ; call. Also, there may be a drive in front of the \\.
 32641                                  ;
 32642                                  NO_CHECK:
 32643 00006AC3 E8BF02                  	CALL    DriveFromText		; eat drive letter
 32644 00006AC6 50                      	PUSH    AX                      ; save it
 32645 00006AC7 8B04                    	MOV     AX,[SI]			; get first two bytes of path
 32646 00006AC9 E880EB                  	call    PATHCHRCMP              ; convert to normal form
 32647 00006ACC 86E0                    	XCHG    AH,AL                   ; swap for second byte
 32648 00006ACE E87BEB                  	call    PATHCHRCMP              ; convert to normal form
 32649 00006AD1 751F                    	JNZ	short CheckDevice	; not a path char
 32650 00006AD3 38C4                    	CMP     AH,AL                   ; are they same?
 32651 00006AD5 751B                    	JNZ	short CheckDevice	; nope
 32652                                  ;
 32653                                  ; We have a UNC request. We must copy the string up to the beginning of the
 32654                                  ; local machine root path
 32655                                  ;
 32656                                  
 32657 00006AD7 58                      	POP     AX
 32658 00006AD8 A5                      	MOVSW                           ; get the lead \\.
 32659                                  UNCCpy:
 32660 00006AD9 AC                      	LODSB                           ; get a byte
 32661 00006ADA E833EB                   	call	UCase                   ;AN000;; convert the char
 32662 00006ADD 08C0                    	OR      AL,AL
 32663 00006ADF 740E                    	JZ	short UNCTerm		; end of string. All done.
 32664 00006AE1 E868EB                  	call    PATHCHRCMP              ; is it a path char?
 32665 00006AE4 89FB                    	MOV     BX,DI                   ; backup position
 32666 00006AE6 AA                      	STOSB
 32667 00006AE7 75F0                    	JNZ	short UNCCpy		; no, go copy
 32668 00006AE9 E8DD00                  	CALL    Canonicalize            ; wham (and set cMeta)
 32669                                  UNCDone:
 32670 00006AEC 16                      	push	ss
 32671 00006AED 1F                      	pop	ds
 32672 00006AEE C3                       	retn				; return error code
 32673                                  UNCTerm:
 32674 00006AEF AA                      	STOSB                           ;AN000;
 32675 00006AF0 EBFA                    	JMP	short UNCDone		;AN000;
 32676                                  
 32677                                  CheckDevice:
 32678                                  ;
 32679                                  ; Check DS:SI for device. First eat any path stuff
 32680                                  ;
 32681 00006AF2 58                      	POP     AX                      ; retrieve drive info
 32682 00006AF3 803C00                  	CMP     BYTE [SI],0		; check for null file
 32683 00006AF6 7504                    	JNZ	short CheckPath
 32684                                  	;mov	al,2 
 32685 00006AF8 B002                    	MOV     AL,error_file_not_found ; bad file error
 32686 00006AFA F9                      	STC                             ; signal error on null input
 32687 00006AFB C3                      	RETN				; bye!
 32688                                  CheckPath:
 32689 00006AFC 50                      	push	ax
 32690 00006AFD 55                      	push	bp			; save drive number
 32691                                  
 32692                                  	; MSDOS 6.0
 32693                                  ;;;BUGBUG BUG 10-26-1992 scottq
 32694                                  ;;;This is a hack for the CDROM extensions (2.1) who scan looking
 32695                                  ;;;for the following POP BP == 5Dh (restore <bp,ax>).
 32696                                  ;;;The problem is that a direct call to CheckThisDevice can (and did)
 32697                                  ;;;end up having a 5D in the opcode's displacement field. The
 32698                                  ;;;scanning code would choke on this thinking it was a POP BP instruction.
 32699                                  ;;;
 32700                                  ;;;What we do here is do a call to a function that is less than 5Dh
 32701                                  ;;;bytes away (and assert its not exactly 5D away) that jmps (transfers)
 32702                                  ;;;to the correct function. This cannot accidently insert a 5Dh.
 32703                                  ;;;
 32704                                  ;;;More info:
 32705                                  ;;;  This particular scan is begun at the UNCdone label for 32 bytes
 32706                                  ;;;looking for pop BP, so you cannot put a 5D between here and there.
 32707                                  ;;;
 32708 00006AFE E82000                  	call	no5Dshere
 32709                                  start5Dhack:
 32710                                  ;following is replaced with 5Dhack code--Invoke  CheckThisDevice         
 32711                                  backfrom5Dhack:
 32712 00006B01 5D                      	pop	bp
 32713 00006B02 58                      	pop	ax			; get drive letter back
 32714 00006B03 731F                    	JNC	short DoFile		; yes we have a file.
 32715                                  ;
 32716                                  ; We have a device. AX has drive letter. At this point we may fake a CDS ala
 32717                                  ; sharing DOS call. We know by getting here that we are NOT in a sharing DOS
 32718                                  ; call.
 32719                                  ;
 32720 00006B05 36C606[0D05]FF          	MOV	byte [SS:FSHARING],-1	; simulate sharing dos call;smr;SS Override
 32721 00006B0B E867FE                  	call	GETTHISDRV              ; set ThisCDS and init DUMMYCDS
 32722 00006B0E 36C606[0D05]00          	MOV     byte [SS:FSHARING],0	;                       ;smr;SS Override
 32723                                  ;
 32724                                  ; Now that we have noted that we have a device, we put it into a form that
 32725                                  ; getpath can understand. Normally getpath requires d:\ to begin the input
 32726                                  ; string. We relax this to state that if the d:\ is present then the path
 32727                                  ; may be a file. If D:/ (note the forward slash) is present then we have
 32728                                  ; a device.
 32729                                  ;
 32730 00006B14 E88502                  	CALL    TextFromDrive
 32731 00006B17 B02F                    	MOV     AL,'/'                  ; path sep.
 32732 00006B19 AA                      	STOSB
 32733 00006B1A E835B4                  	call	StrCpy			; move remainder of string
 32734                                  
 32735 00006B1D F8                      	CLC                             ; everything OK.
 32736 00006B1E 16                      	push	ss
 32737 00006B1F 1F                      	pop	ds                      ; remainder of OK stuff
 32738                                  DoFile_retn:
 32739 00006B20 C3                      	retn
 32740                                  
 32741                                  no5Dshere:
 32742                                  	; 10/08/2018
 32743 00006B21 E902E1                  	jmp	CheckThisDevice		; snoop for device
 32744                                  
 32745                                  ;.erre (no5Dshere - start5Dhack - 5D)
 32746                                  
 32747                                  ;
 32748                                  ; We have a file. Get the raw CDS.
 32749                                  ;
 32750                                  
 32751                                  DoFile:
 32752                                  	; MSDOS 3.3 (& MSDOS 6.0)
 32753                                  
 32754 00006B24 E837FE                  	call	GetVisDrv               ; get proper CDS
 32755                                  	;mov	al,3 
 32756 00006B27 B003                    	MOV     AL,error_path_not_found ; Set up for possible bad file error
 32757 00006B29 72F5                    	jc	short DoFile_retn  ; CARRY set -> bogus drive/spliced
 32758                                  ;
 32759                                  ; ThisCDS has correct CDS. DS:SI advanced to point to beginning of path/file.
 32760                                  ; Make sure that CDS has valid directory; ValidateCDS requires a temp buffer
 32761                                  ; Use the one that we are going to use (ES:DI).
 32762                                  ;
 32763                                  	;SAVE    <DS,SI,ES,DI>		; save all string pointers.
 32764 00006B2B 1E                      	push	ds
 32765 00006B2C 56                      	push	si
 32766 00006B2D 06                      	push	es
 32767 00006B2E 57                      	push	di
 32768 00006B2F E840E0                  	call	ValidateCDS             ; poke CDS and make everything OK
 32769                                  	;RESTORE <DI,ES,SI,DS>		; get back pointers
 32770 00006B32 5F                      	pop	di
 32771 00006B33 07                      	pop	es
 32772 00006B34 5E                      	pop	si
 32773 00006B35 1F                      	pop	ds
 32774                                  	;mov	al,3
 32775 00006B36 B003                    	MOV     AL,error_path_not_found ; Set up for possible bad path error
 32776                                  	;retc				; someone failed an operation
 32777 00006B38 72E6                    	jc	short DoFile_retn
 32778                                  ;
 32779                                  ; ThisCDS points to correct CDS. It contains the correct text of the
 32780                                  ; current directory. Copy it in.
 32781                                  ;
 32782 00006B3A 1E                      	push	ds
 32783 00006B3B 56                      	push	si
 32784 00006B3C 36C536[3A05]            	LDS     SI,[SS:THISCDS]		; point to CDS	;smr;SS Override
 32785 00006B41 89FB                    	MOV     BX,DI                   ; point to destination
 32786 00006B43 035C4F                  	ADD     BX,[SI+curdir.end]	; point to backup limit
 32787                                  ;       LEA     SI,[SI+curdir.text]	; point to text
 32788                                  	;lea	bp,[di+134]
 32789 00006B46 8DAD8600                	LEA     BP,[DI+TEMPLEN]         ; regenerate end of buffer
 32790                                  					;AN000;
 32791 00006B4A E814B4                  	call	FStrCpy                 ; copy string. ES:DI point to end
 32792 00006B4D 4F                      	DEC     DI                      ; point to NUL byte
 32793                                  
 32794                                  ;
 32795                                  ; Make sure that there is a path char at end.
 32796                                  ;
 32797 00006B4E B05C                    	MOV     AL,'\'
 32798 00006B50 263845FF                	CMP     [ES:DI-1],AL
 32799 00006B54 7401                    	JZ	short GetOrig
 32800 00006B56 AA                      	STOSB
 32801                                  ;
 32802                                  ; Now get original string.
 32803                                  ;
 32804                                  GetOrig:
 32805 00006B57 4F                      	DEC     DI                      ; point to path char
 32806 00006B58 5E                      	pop	si
 32807 00006B59 1F                      	pop	ds
 32808                                  ;
 32809                                  ; BX points to the end of the root part of the CDS (at where a path char
 32810                                  ; should be). Now, we decide whether we use this root or extend it with the
 32811                                  ; current directory.  See if the input string begins with a leading ;
 32813 00006B5A E8D100                  	CALL    PathSep                 ; is DS:SI a path sep?
 32814 00006B5D 7511                    	JNZ	short PathAssure	; no, DI is correct. Assure a path char
 32815 00006B5F 08C0                    	OR      AL,AL                   ; end of string?
 32816 00006B61 7410                    	JZ	short DoCanon		; yes, skip.
 32817                                  ;
 32818                                  ; The string does begin with a \. Reset the beginning of the canonicalization
 32819                                  ; to this root. Make sure that there is a path char there and advance the
 32820                                  ; source string over all leading \'s.
 32821                                  ;
 32822 00006B63 89DF                    	MOV     DI,BX                   ; back up to root point.
 32823                                  SkipPath:
 32824 00006B65 AC                      	LODSB
 32825 00006B66 E8E3EA                  	call    PATHCHRCMP
 32826 00006B69 74FA                    	JZ	short SkipPath
 32827 00006B6B 4E                      	DEC     SI
 32828 00006B6C 08C0                    	OR      AL,AL
 32829 00006B6E 7403                    	JZ	short DoCanon
 32830                                  ;
 32831                                  ; DS:SI start at some file name. ES:DI points at some path char. Drop one in
 32832                                  ; for yucks.
 32833                                  ;
 32834                                  PathAssure:
 32835 00006B70 B05C                    	MOV     AL,'\'
 32836 00006B72 AA                      	STOSB
 32837                                  ;
 32838                                  ; ES:DI point to the correct spot for canonicalization to begin.
 32839                                  ; BP is the max extent to advance DI
 32840                                  ; BX is the backup limit for ..
 32841                                  ;
 32842                                  DoCanon:
 32843 00006B73 E85300                  	CALL    Canonicalize            ; wham.
 32844                                  	;retc				; badly formatted path.
 32845 00006B76 72A8                    	jc	short DoFile_retn
 32846                                  
 32847                                  ;
 32848                                  ; The string has been moved to ES:DI. Reset world to DOS context, pointers
 32849                                  ; to wfp_start and do string substitution. BP is still the max position in
 32850                                  ; buffer.
 32851                                  ;
 32852 00006B78 16                      	push	ss
 32853 00006B79 1F                      	pop	ds
 32854 00006B7A 8B3E[4A05]              	MOV     DI,[WFP_START]		; DS:SI point to string
 32855 00006B7E C536[3A05]              	LDS     SI,[THISCDS]		; point to CDS
 32856                                  ;       LEA     SI,[SI+curdir.text]	; point to text
 32857 00006B82 E81F02                  	CALL    PathPref                ; is there a prefix?
 32858 00006B85 7514                    	JNZ	short DoSplice		; no, do splice
 32859                                  ;
 32860                                  ; We have a match. Check to see if we ended in a path char.
 32861                                  ;
 32862 00006B87 8A44FF                  	MOV     AL,[SI-1]		; last char to match
 32863 00006B8A E8BFEA                  	call    PATHCHRCMP              ; did we end on a path char? (root)
 32864 00006B8D 740C                    	JZ	short DoSplice		; yes, no current dir here.
 32865                                  Pathline:                               ; 2/13/KK
 32866 00006B8F 26803D00                	CMP     BYTE [ES:DI],0		; end at NUL?
 32867 00006B93 7406                    	JZ	short DoSplice
 32868 00006B95 47                      	INC     DI                      ; point to after current path char
 32869 00006B96 36893E[4E05]            	MOV     [SS:CURR_DIR_END],DI	; point to correct spot ;smr;SS Override
 32870                                  ;
 32871                                  ; Splice the result.
 32872                                  ;
 32873                                  DoSplice:
 32874 00006B9B 16                      	push	ss
 32875 00006B9C 1F                      	pop	ds			; back to DOSDATA
 32876 00006B9D 8B36[4A05]              	MOV     SI,[WFP_START]		; point to beginning of string
 32877 00006BA1 31C9                    	XOR     CX,CX
 32878 00006BA3 F606[0C05]FF            	TEST	byte [FSPLICE],-1
 32879 00006BA8 7403                    	JZ	short SkipSplice
 32880 00006BAA E82C01                  	CALL    Splice                  ; replaces in place.
 32881                                  SkipSplice:
 32882                                  ;
 32883                                  ; The final thing is to assure ourselves that a FATREAD is done on the local
 32884                                  ; device.
 32885                                  ;
 32886 00006BAD 16                      	push	ss
 32887 00006BAE 1F                      	pop	ds
 32888 00006BAF C43E[3A05]              	LES     DI,[THISCDS]		; point to correct drive
 32889                                  	;test	word [es:di+67],8000h
 32890 00006BB3 26F745430080            	TEST	word [ES:DI+curdir.flags],curdir_isnet
 32891 00006BB9 750D                    	JNZ	short Done		; net, no fatread necessary (retnz)
 32892 00006BBB E30B                    	JCXZ    Done
 32893 00006BBD E8ACB4                  	call	EcritDisk
 32894 00006BC0 E8FCEF                  	call	FATREAD_CDS
 32895 00006BC3 E8AEB4                  	call	LcritDisk
 32896                                  	;mov	al, 3
 32897 00006BC6 B003                    	MOV     AL,error_path_not_found ; Set up for possible bad path error
 32898                                  Done:   
 32899 00006BC8 C3                      	retn                         ; any errors in carry flag.
 32900                                  
 32901                                  ; 13/07/2018
 32902                                  
 32903                                  ;BREAK <Canonicalize - copy a path and remove . and .. entries>
 32904                                  ;----------------------------------------------------------------------------
 32905                                  ;   Canonicalize - copy path removing . and .. entries.
 32906                                  ;
 32907                                  ;   Inputs:     DS:SI - point to ASCIZ string path
 32908                                  ;               ES:DI - point to buffer
 32909                                  ;               BX - backup limit (offset from ES) points to slash
 32910                                  ;               BP - end of buffer
 32911                                  ;   Outputs:    Carry Set - invalid path specification: too many .., bad
 32912                                  ;                   syntax, etc.
 32913                                  ;               Carry Clear -
 32914                                  ;                   DS:DI - advanced to end of string
 32915                                  ;                   ES:DI - advanced to end of canonicalized form after nul
 32916                                  ;   Registers modified: AX CX DX (in addition to those above)
 32917                                  ;----------------------------------------------------------------------------
 32918                                  
 32919                                  Canonicalize:
 32920                                  ;
 32921                                  ; We copy all leading path separators.
 32922                                  ;
 32923 00006BC9 AC                      	LODSB                           ;   while (PathChr (*s))
 32924 00006BCA E87FEA                  	call    PATHCHRCMP
 32925 00006BCD 7507                    	JNZ	short CanonDec
 32926 00006BCF 39EF                    	CMP     DI,BP                   ;       if (d > dlim)
 32927 00006BD1 7319                    	JAE	short CanonBad		;           goto error;
 32928 00006BD3 AA                      	STOSB
 32929 00006BD4 EBF3                    	JMP	short Canonicalize	;           *d++ = *s++;
 32930                                  CanonDec:
 32931 00006BD6 4E                      	DEC     SI
 32932                                  ;
 32933                                  ; Main canonicalization loop.  We come here with DS:SI pointing to a textual
 32934                                  ; component (no leading path separators) and ES:DI being the destination
 32935                                  ; buffer.
 32936                                  ;
 32937                                  CanonLoop:
 32938                                  ;
 32939                                  ; If we are at the end of the source string, then we need to check to see that
 32940                                  ; a potential drive specifier is correctly terminated with a path sep char.
 32941                                  ; Otherwise, do nothing
 32942                                  ;
 32943 00006BD7 31C0                    	XOR     AX,AX
 32944 00006BD9 3804                    	CMP     [SI],AL                 ;       if (*s == 0) {
 32945 00006BDB 751A                    	JNZ	short DoComponent
 32946 00006BDD 26807DFF3A              	CMP     BYTE [ES:DI-1],':'	;           if (d[-1] == ':')
 32947 00006BE2 7505                    	JNZ	short DoTerminate
 32948 00006BE4 B05C                    	MOV     AL,'\'                  ;               *d++ = '\';
 32949 00006BE6 AA                      	STOSB
 32950 00006BE7 88E0                    	MOV     AL,AH
 32951                                  DoTerminate:
 32952 00006BE9 AA                      	STOSB                           ;           *d++ = 0;
 32953 00006BEA F8                      	CLC                             ;           return (0);
 32954 00006BEB C3                      	retn
 32955                                  
 32956                                  CanonBad:
 32957 00006BEC E8CE01                  	CALL	ScanPathChar            ; check for path chars in rest of string
 32958                                  	;mov	al,3
 32959 00006BEF B003                    	MOV     AL,error_path_not_found ; Set up for bad path error
 32960 00006BF1 7402                    	JZ	short PathEnc		; path character encountered in string
 32961                                  	;mov	al,2
 32962 00006BF3 B002                    	MOV     AL,error_file_not_found ; Set bad file error
 32963                                  PathEnc:
 32964 00006BF5 F9                      	STC
 32965                                  CanonBad_retn:
 32966 00006BF6 C3                      	retn
 32967                                  ;
 32968                                  ; We have a textual component that we must copy.  We uppercase it and truncate
 32969                                  ; it to 8.3
 32970                                  ;
 32971                                  DoComponent:                            ;           }
 32972 00006BF7 E85100                  	CALL    CopyComponent		;       if (!CopyComponent (s, d))
 32973 00006BFA 72FA                    	jc	short CanonBad_retn	;           return (-1);
 32974                                  ;
 32975                                  ; We special case the . and .. cases.  These will be backed up.
 32976                                  ;
 32977                                  	;CMP	WORD PTR ES:[DI],'.' + (0 SHL 8)
 32978 00006BFC 26833D2E                	CMP	WORD [ES:DI],002Eh
 32979 00006C00 7408                    	JZ	short Skip1
 32980                                  	;CMP	WORD PTR ES:[DI],'..'
 32981 00006C02 26813D2E2E              	CMP     WORD [ES:DI],2E2Eh
 32982 00006C07 750A                    	JNZ	short CanonNormal
 32983 00006C09 4F                      	DEC     DI                      ;           d--;
 32984                                  Skip1:  
 32985 00006C0A E82B00                  	CALL    SkipBack                ;           SkipBack ();
 32986                                  	;mov	al,3
 32987 00006C0D B003                    	MOV     AL,error_path_not_found ; Set up for possible bad path error
 32988 00006C0F 72E5                    	jc	short CanonBad_retn
 32989 00006C11 EB02                    	JMP     short CanonPath         ;           }
 32990                                  ;
 32991                                  ; We have a normal path.  Advance destination pointer over it.
 32992                                  ;
 32993                                  CanonNormal:                            ;       else
 32994 00006C13 01CF                    	ADD     DI,CX                   ;           d += ct;
 32995                                  ;
 32996                                  ; We have successfully copied a component.  We are now pointing at a path
 32997                                  ; sep char or are pointing at a nul or are pointing at something else.
 32998                                  ; If we point at something else, then we have an error.
 32999                                  ;
 33000                                  CanonPath:
 33001 00006C15 E81600                  	CALL    PathSep
 33002 00006C18 75D2                    	JNZ	short CanonBad		; something else...
 33003                                  ;
 33004                                  ; Copy the first path char we see.
 33005                                  ;
 33006 00006C1A AC                      	LODSB                           ; get the char
 33007 00006C1B E82EEA                  	call    PATHCHRCMP              ; is it path char?
 33008 00006C1E 75B6                    	JNZ	short CanonDec		; no, go test for nul
 33009 00006C20 39EF                    	CMP     DI,BP                   ; beyond buffer end?
 33010 00006C22 73C8                    	JAE	short CanonBad		; yep, error.
 33011 00006C24 AA                      	STOSB                           ; copy the one byte
 33012                                  ;
 33013                                  ; Skip all remaining path chars
 33014                                  ;
 33015                                  CanonPathLoop:
 33016 00006C25 AC                      	LODSB                           ; get next byte
 33017 00006C26 E823EA                  	call    PATHCHRCMP              ; path char again?
 33018 00006C29 74FA                    	JZ	short CanonPathLoop	; yep, grab another
 33019 00006C2B 4E                      	DEC     SI                      ; back up
 33020 00006C2C EBA9                    	JMP	short  CanonLoop	; go copy component
 33021                                  
 33022                                  ;BREAK <PathSep - determine if char is a path separator>
 33023                                  ;----------------------------------------------------------------------------
 33024                                  ;   PathSep - look at DS:SI and see if char is / \ or NUL
 33025                                  ;   Inputs:     DS:SI - point to a char
 33026                                  ;   Outputs:    AL has char from DS:SI (/ => \)
 33027                                  ;               Zero set if AL is / \ or NUL
 33028                                  ;               Zero reset otherwise
 33029                                  ;   Registers modified: AL
 33030                                  ;----------------------------------------------------------------------------
 33031                                  
 33032                                  PathSep:
 33033 00006C2E 8A04                    	MOV     AL,[SI]                 ; get the character
 33034                                  PathSepGotCh:				; already have character
 33035 00006C30 08C0                    	OR      AL,AL                   ; test for zero
 33036 00006C32 74C2                    	jz	short CanonBad_retn	; return if equal to zero (NUL)
 33037 00006C34 E815EA                  	call    PATHCHRCMP              ; check for path character
 33038 00006C37 C3                      	retn				; and return HIS determination
 33039                                  
 33040                                  ;BREAK <SkipBack - move backwards to a path separator>
 33041                                  ;----------------------------------------------------------------------------
 33042                                  ;   SkipBack - look at ES:DI and backup until it points to a / ;   Inputs:     ES:DI - point to a char
 33044                                  ;               BX has current directory back up limit (point to a / \)
 33045                                  ;   Outputs:    ES:DI backed up to point to a path char
 33046                                  ;               AL has char from output ES:DI (path sep if carry clear)
 33047                                  ;               Carry set if illegal backup
 33048                                  ;               Carry Clear if ok
 33049                                  ;   Registers modified: DI,AL
 33050                                  ;----------------------------------------------------------------------------
 33051                                  
 33052                                  SkipBack:
 33053 00006C38 39DF                    	CMP     DI,BX                   ;   while (TRUE) {
 33054 00006C3A 720B                    	JB	short SkipBad		;       if (d < dlim)
 33055 00006C3C 4F                      	DEC     DI                      ;           goto err;
 33056 00006C3D 268A05                  	MOV     AL,[ES:DI]		;       if (pathchr (*--d))
 33057 00006C40 E809EA                  	call    PATHCHRCMP              ;           break;
 33058 00006C43 75F3                    	JNZ	short SkipBack		;       }
 33059 00006C45 F8                      	CLC                             ;   return (0);
 33060 00006C46 C3                      	retn				;
 33061                                  SkipBad:                                ;err:
 33062                                  	;mov	al,3
 33063 00006C47 B003                    	MOV     AL,error_path_not_found ; bad path error
 33064 00006C49 F9                      	STC                             ;   return (-1);
 33065 00006C4A C3                      	retn                          ;
 33066                                  
 33067                                  ;Break <CopyComponent - copy out a file path component>
 33068                                  ;----------------------------------------------------------------------------
 33069                                  ;   CopyComponent - copy a file component from a path string (DS:SI) into ES:DI
 33070                                  ;
 33071                                  ;   Inputs:     DS:SI - source path
 33072                                  ;               ES:DI - destination
 33073                                  ;               ES:BP - end of buffer
 33074                                  ;   Outputs:    Carry Set - too long
 33075                                  ;               Carry Clear - DS:SI moved past component
 33076                                  ;                   CX has length of destination
 33077                                  ;   Registers modified: AX,CX,DX
 33078                                  ;----------------------------------------------------------------------------
 33079                                  
 33080                                  CopyComponent:
 33081                                  
 33082                                  %define CopyBP	 [BP]		; word
 33083                                  %define CopyD	 [BP+2]		; dword
 33084                                  %define CopyDoff [BP+2]		; word
 33085                                  %define CopyS	 [BP+6]		; dword
 33086                                  %define CopySoff [BP+6]		; word
 33087                                  %define CopyTemp [BP+10]	; byte
 33088                                  
 33089 00006C4B 83EC0E                  	SUB     SP,14                   ; room for temp buffer
 33090 00006C4E 1E                      	push	ds
 33091 00006C4F 56                      	push	si
 33092 00006C50 06                      	push	es
 33093 00006C51 57                      	push	di
 33094 00006C52 55                      	push	bp
 33095 00006C53 89E5                    	MOV     BP,SP
 33096 00006C55 B42E                    	MOV     AH,'.'
 33097 00006C57 AC                      	LODSB
 33098 00006C58 AA                      	STOSB
 33099 00006C59 38E0                    	CMP     AL,AH                   ;   if ((*d++=*s++) == '.') {
 33100 00006C5B 7518                    	JNZ	short NormalComp
 33101 00006C5D E8CEFF                  	CALL    PathSep                 ;       if (!pathsep(*s))
 33102 00006C60 740B                    	JZ	short NulTerm
 33103                                  TryTwoDot:
 33104 00006C62 AC                      	LODSB                           ;           if ((*d++=*s++) != '.'
 33105 00006C63 AA                      	STOSB
 33106 00006C64 38E0                    	CMP     AL,AH
 33107 00006C66 7557                    	JNZ	short CopyBad
 33108 00006C68 E8C3FF                  	CALL    PathSep
 33109 00006C6B 7552                    	JNZ	short CopyBad		;               || !pathsep (*s))
 33110                                  NulTerm:                                ;               return -1;
 33111 00006C6D 30C0                    	XOR     AL,AL                   ;       *d++ = 0;
 33112 00006C6F AA                      	STOSB
 33113 00006C70 897606                  	MOV     CopySoff,SI
 33114 00006C73 EB47                    	JMP     SHORT _GoodRet		;       }
 33115                                  NormalComp:                             ;   else {
 33116 00006C75 8B7606                  	MOV     SI,CopySoff ; [bp+6]
 33117 00006C78 E867E9                  	call	NameTrans               ;       s = NameTrans (s, Name1);
 33118 00006C7B 3B7606                  	CMP     SI,CopySoff             ;       if (s == CopySOff)
 33119 00006C7E 743F                    	JZ	short CopyBad		;           return (-1);
 33120 00006C80 36F606[0D05]FF          	TEST	byte [SS:FSHARING],-1	;       if (!fSharing) {;smr;SS Override
 33121 00006C86 7510                    	JNZ	short DoPack
 33122 00006C88 80E201                  	AND     DL,1                    ;           cMeta += fMeta;
 33123 00006C8B 360016[1505]            	ADD	[ss:CMETA],DL		;           if (cMeta > 0);smr;SS Override
 33124 00006C90 7F2D                    	JG	short CopyBad		;               return (-1);
 33125 00006C92 7504                    	JNZ	short DoPack		;           else
 33126 00006C94 08D2                    	OR      DL,DL                   ;           if (cMeta == 0 && fMeta == 0)
 33127 00006C96 742F                    	JZ	short CopyBadPath	;               return (-1);
 33128                                  DoPack:                                 ;           }
 33129 00006C98 897606                  	MOV     CopySoff,SI ; [bp+6]
 33130 00006C9B 16                      	push	ss
 33131 00006C9C 1F                      	pop	ds
 33132 00006C9D BE[E604]                	MOV     SI,NAME1
 33133 00006CA0 8D7E0A                  	LEA     DI,CopyTemp ; [bp+10]
 33134 00006CA3 57                      	push	di
 33135 00006CA4 E874C1                  	call	PackName                ;       PackName (Name1, temp);
 33136 00006CA7 5F                      	pop	di
 33137 00006CA8 E8BFB2                  	call	StrLen                  ;       if (strlen(temp)+d > bp)
 33138 00006CAB 49                      	DEC     CX
 33139 00006CAC 034E02                  	ADD     CX,CopyDoff ; [bp+2]
 33140 00006CAF 3B4E00                  	CMP     CX,CopyBP   ; [bp+0]
 33141 00006CB2 730B                    	JAE	short CopyBad		;           return (-1);
 33142 00006CB4 89FE                    	MOV     SI,DI                   ;       strcpy (d, temp);
 33143 00006CB6 C47E02                  	LES     DI,CopyD    ; [bp+2]	
 33144 00006CB9 E8A5B2                  	call	FStrCpy
 33145                                  _GoodRet:				;       }
 33146 00006CBC F8                      	CLC
 33147 00006CBD EB0B                    	JMP     SHORT CopyEnd           ;   return 0;
 33148                                  CopyBad:
 33149 00006CBF F9                      	STC
 33150 00006CC0 E8FA00                  	CALL    ScanPathChar            ; check for path chars in rest of string
 33151                                  	;mov	al,2
 33152 00006CC3 B002                    	MOV     AL,error_file_not_found ; Set up for bad file error
 33153 00006CC5 7503                    	JNZ	short CopyEnd
 33154                                  CopyBadPath:
 33155 00006CC7 F9                      	STC
 33156                                  	;mov	al,3
 33157 00006CC8 B003                    	MOV     AL,error_path_not_found ; Set bad path error
 33158                                  CopyEnd:
 33159 00006CCA 5D                      	pop	bp
 33160 00006CCB 5F                      	pop	di
 33161 00006CCC 07                      	pop	es
 33162 00006CCD 5E                      	pop	si
 33163 00006CCE 1F                      	pop	ds
 33164 00006CCF 9F                      	LAHF
 33165 00006CD0 83C40E                  	ADD     SP,14                   ; reclaim temp buffer
 33166 00006CD3 E894B2                  	call	StrLen
 33167 00006CD6 49                      	DEC     CX
 33168 00006CD7 9E                      	SAHF
 33169 00006CD8 C3                      	retn
 33170                                  
 33171                                  ;Break <Splice - pseudo mount by string substitution>
 33172                                  ;----------------------------------------------------------------------------
 33173                                  ;   Splice - take a string and substitute a prefix if one exists. Change
 33174                                  ;       ThisCDS to point to physical drive CDS.
 33175                                  ;   Inputs:     DS:SI point to string
 33176                                  ;               NoSetDir = TRUE => exact matches with splice fail
 33177                                  ;   Outputs:    DS:SI points to thisCDS
 33178                                  ;               ES:DI points to DPB
 33179                                  ;               String at DS:SI may be reduced in length by removing prefix
 33180                                  ;               and substituting drive letter.
 33181                                  ;               CX = 0 If no splice done
 33182                                  ;               CX <> 0 otherwise
 33183                                  ;               ThisCDS points to proper CDS if spliced, otherwise it is
 33184                                  ;                   left alone
 33185                                  ;               ThisDPB points to proper DPB
 33186                                  ;   Registers modified: DS:SI, ES:DI, BX,AX,CX
 33187                                  ;----------------------------------------------------------------------------
 33188                                  
 33189                                  Splice:
 33190 00006CD9 36F606[5A00]FF          	TEST	byte [SS:SPLICES],-1	;smr;SS Override
 33191 00006CDF 746A                    	JZ	short AllDone
 33192 00006CE1 36FF36[3A05]            	push	word [SS:THISCDS]
 33193 00006CE6 36FF36[3C05]            	push	word [SS:THISCDS+2]	; TmpCDS = ThisCDS;smr;SS Override
 33194 00006CEB 1E                      	push	ds
 33195 00006CEC 56                      	push	si
 33196 00006CED 5F                      	pop	di
 33197 00006CEE 07                      	pop	es
 33198 00006CEF 31C0                    	XOR     AX,AX                   ;   for (i=1; s = GetCDSFromDrv (i); i++)
 33199                                  SpliceScan:
 33200 00006CF1 E8D4FC                  	call	GetCDSFromDrv
 33201 00006CF4 724B                    	JC	short SpliceDone
 33202 00006CF6 FEC0                    	INC     AL
 33203                                  	;test	word [si+67],2000h
 33204 00006CF8 F744430020              	TEST    word [SI+curdir.flags],curdir_splice
 33205 00006CFD 74F2                    	JZ	short SpliceScan 	;       if ( Spliced (i) ) {
 33206 00006CFF 57                      	push	di
 33207 00006D00 E8A100                  	CALL    PathPref                ;           if (!PathPref (s, d))
 33208 00006D03 7403                    	JZ	short SpliceFound	;
 33209                                  SpliceSkip:
 33210 00006D05 5F                      	pop	di
 33211 00006D06 EBE9                    	JMP	short SpliceScan	;               continue;
 33212                                  SpliceFound:
 33213 00006D08 26803D00                	CMP     BYTE [ES:DI],0		;           if (*s || NoSetDir) {
 33214 00006D0C 7508                    	JNZ	short SpliceDo
 33215 00006D0E 36F606[F802]FF          	TEST	byte [ss:NoSetDir],-1			;smr;SS Override
 33216 00006D14 75EF                    	JNZ	short SpliceSkip
 33217                                  SpliceDo:
 33218 00006D16 89FE                    	MOV     SI,DI                   ;               p = src + strlen (p);
 33219 00006D18 06                      	push	es
 33220 00006D19 1F                      	pop	ds
 33221 00006D1A 5F                      	pop	di
 33222 00006D1B E88000                  	CALL    TextFromDrive1          ;               src = TextFromDrive1(src,i);
 33223 00006D1E 36A1[4E05]              	MOV     AX,[SS:CURR_DIR_END]			;smr;SS Override
 33224 00006D22 09C0                    	OR      AX,AX
 33225 00006D24 7808                    	JS	short NoPoke
 33226 00006D26 01F8                    	ADD     AX,DI                   ;               curdirend += src-p;
 33227 00006D28 29F0                    	SUB     AX,SI
 33228 00006D2A 36A3[4E05]              	MOV     [SS:CURR_DIR_END],AX			;smr;SS Override
 33229                                  NoPoke:
 33230 00006D2E 803C00                  	CMP     BYTE [SI],0		;               if (*p)
 33231 00006D31 7503                    	JNZ	short SpliceCopy	;                   *src++ = '\\';
 33232 00006D33 B05C                    	MOV     AL,"\"
 33233 00006D35 AA                      	STOSB
 33234                                  SpliceCopy:                             ;               strcpy (src, p);
 33235 00006D36 E828B2                  	call	FStrCpy
 33236 00006D39 83C404                  	ADD     SP,4                    ; throw away saved stuff
 33237 00006D3C 80C901                  	OR      CL,1                    ; signal splice done.
 33238 00006D3F EB0C                    	JMP     SHORT DoSet             ;               return;
 33239                                  SpliceDone:                             ;               }
 33240 00006D41 368F06[3C05]            	pop	word [SS:THISCDS+2]     ;   ThisCDS = TmpCDS;
 33241 00006D46 368F06[3A05]            	pop	word [SS:THISCDS]			;smr;SS Override
 33242                                  AllDone:
 33243 00006D4B 31C9                    	XOR     CX,CX
 33244                                  DoSet:
 33245 00006D4D 36C536[3A05]            	LDS     SI,[SS:THISCDS]		;   ThisDPB = ThisCDS->devptr;;smr;SS Override
 33246                                  	;les	di,[si+69]
 33247 00006D52 C47C45                  	LES     DI,[SI+curdir.devptr]	
 33248 00006D55 36893E[2405]            	MOV	[SS:THISDPB],DI				;smr;SS Override
 33249 00006D5A 368C06[2605]            	MOV	[SS:THISDPB+2],ES			;smr;SS Override
 33250                                  Splice_retn:
 33251 00006D5F C3                      	retn
 33252                                  
 33253                                  ;Break <$NameTrans - partially process a name>
 33254                                  ;----------------------------------------------------------------------------
 33255                                  ;   $NameTrans - allow users to see what names get mapped to. This call
 33256                                  ;   performs only string substitution and canonicalization, not splicing.  Due
 33257                                  ;   to Transpath playing games with devices, we need to insure that the output
 33258                                  ;   has drive letter and : in it.
 33259                                  ;
 33260                                  ;   Inputs:     DS:SI - source string for translation
 33261                                  ;               ES:DI - pointer to buffer
 33262                                  ;   Outputs:
 33263                                  ;       Carry Clear
 33264                                  ;               Buffer at ES:DI is filled in with data
 33265                                  ;               ES:DI point byte after nul byte at end of dest string in buffer
 33266                                  ;       Carry Set
 33267                                  ;               AX = error_path_not_found
 33268                                  ;   Registers modified: all
 33269                                  ;----------------------------------------------------------------------------
 33270                                  
 33271                                  _$NameTrans:
 33272 00006D60 1E                      	push	ds
 33273 00006D61 56                      	push	si
 33274 00006D62 06                      	push	es
 33275 00006D63 57                      	push	di
 33276 00006D64 51                      	push	cx ; MSDOS 6.0
 33277                                  	
 33278                                  	; MSDOS 6.0	
 33279                                  ; M027 - Start
 33280                                  ;
 33281                                  ; Sattrib must be set up with default values here. Otherwise, the value from
 33282                                  ; a previous DOS call is used for attrib and DevName thinks it is not a 
 33283                                  ; device if the old call set the volume attribute bit. Note that devname in
 33284                                  ; dir2.asm gets ultimately called by Transpath. See also M026. Also save
 33285                                  ; and restore CX.
 33286                                  ;
 33287 00006D65 B516                    	mov     ch,attr_hidden+attr_system+attr_directory
 33288 00006D67 E81C05                  	call	SetAttrib
 33289                                  
 33290                                  ; M027 - End
 33291                                  
 33292                                  	; MSDOS 3.3 (& MSDOS 6.0)
 33293 00006D6A BF[6003]                	MOV     DI,OPENBUF
 33294 00006D6D E8E0FC                  	CALL    TransPath               ; to translation (everything)
 33295 00006D70 59                      	pop	cx ; MSDOS 6.0
 33296 00006D71 5F                      	pop     di
 33297 00006D72 07                      	pop	es
 33298 00006D73 5E                      	pop     si
 33299 00006D74 1F                      	pop     ds
 33300 00006D75 7303                    	JNC	short TransOK
 33301 00006D77 E98FA9                  	jmp	SYS_RET_ERR
 33302                                  TransOK:
 33303 00006D7A BE[6003]                	MOV     SI,OPENBUF
 33304 00006D7D 16                      	push	ss
 33305 00006D7E 1F                      	pop	ds
 33306                                  GotText:
 33307 00006D7F E8DFB1                  	call	FStrCpy
 33308 00006D82 E978A9                  	jmp	SYS_RET_OK
 33309                                  
 33310                                  ;Break   <DriveFromText - return drive number from a text string>
 33311                                  ;----------------------------------------------------------------------------
 33312                                  ;   DriveFromText - examine DS:SI and remove a drive letter, advancing the
 33313                                  ;   pointer.
 33314                                  ;
 33315                                  ;   Inputs:     DS:SI point to a text string
 33316                                  ;   Outputs:    AL has drive number
 33317                                  ;               DS:SI advanced
 33318                                  ;   Registers modified: AX,SI.
 33319                                  ;----------------------------------------------------------------------------
 33320                                  
 33321                                  DriveFromText:
 33322 00006D85 30C0                    	XOR     AL,AL                   ;       drive = 0;
 33323 00006D87 803C00                  	CMP     BYTE [SI],0		;       if (*s &&
 33324 00006D8A 74D3                    	jz	short Splice_retn
 33325 00006D8C 807C013A                	CMP     BYTE [SI+1],':'		;           s[1] == ':') {
 33326 00006D90 75CD                    	jnz	short Splice_retn
 33327 00006D92 AD                      	LODSW                           ;           drive = (*s | 020) - 'a'+1;
 33328 00006D93 0C20                    	OR      AL,20h
 33329                                  	;sub	al,60h
 33330 00006D95 2C60                    	SUB     AL,'a'-1                ;           s += 2;
 33331 00006D97 75C6                    	jnz	short Splice_retn
 33332 00006D99 B0FF                    	MOV     AL,-1                   ; nuke AL...
 33333 00006D9B C3                      	retn				;           }
 33334                                  
 33335                                  ;Break   <TextFromDrive - convert a drive number to a text string>
 33336                                  ;----------------------------------------------------------------------------
 33337                                  ;   TextFromDrive - turn AL into a drive letter: and put it at es:di with
 33338                                  ;   trailing :. TextFromDrive1 takes a 1-based number.
 33339                                  ;
 33340                                  ;   Inputs:     AL has 0-based drive number
 33341                                  ;   Outputs:    ES:DI advanced
 33342                                  ;   Registers modified: AX
 33343                                  ;----------------------------------------------------------------------------
 33344                                  
 33345                                  TextFromDrive:
 33346 00006D9C FEC0                    	INC     AL
 33347                                  TextFromDrive1:
 33348                                  	;add	al,40h
 33349 00006D9E 0440                    	ADD     AL,'A'-1                ;   *d++ = drive-1+'A';
 33350 00006DA0 B43A                    	MOV     AH,":"                  ;   strcat (d, ":");
 33351 00006DA2 AB                      	STOSW
 33352                                  PathPref_retn:
 33353 00006DA3 C3                      	retn
 33354                                  
 33355                                  ;Break   <PathPref - see if one path is a prefix of another>
 33356                                  ;----------------------------------------------------------------------------
 33357                                  ;   PathPref - compare DS:SI with ES:DI to see if one is the prefix of the
 33358                                  ;   other.  Remember that only at a pathchar break are we allowed to have a
 33359                                  ;   prefix: A:\ and A:\FOO
 33360                                  ;
 33361                                  ;   Inputs:     DS:SI potential prefix
 33362                                  ;               ES:DI string
 33363                                  ;   Outputs:    Zero set => prefix found
 33364                                  ;                   DI/SI advanced past matching part
 33365                                  ;               Zero reset => no prefix, DS/SI garbage
 33366                                  ;   Registers modified: CX
 33367                                  ;----------------------------------------------------------------------------
 33368                                  
 33369                                  PathPref:
 33370 00006DA4 E8D1B1                  	call	DStrLen                 ; get length
 33371 00006DA7 49                      	DEC     CX                      ; do not include nul byte
 33372 00006DA8 F3A6                    	REPZ    CMPSB                   ; compare
 33373 00006DAA 75F7                    	jnz	short PathPref_retn	; if NZ then return NZ
 33374 00006DAC 50                      	push	ax			; save char register
 33375 00006DAD 8A44FF                  	MOV     AL,[SI-1]               ; get last byte to match
 33376 00006DB0 E899E8                  	call    PATHCHRCMP              ; is it a path char (Root!)
 33377 00006DB3 7406                    	JZ	short Prefix		; yes, match root (I hope)
 33378                                  NotSep:                                 ; 2/13/KK
 33379 00006DB5 268A05                  	MOV     AL,[ES:DI]		; get next char to match
 33380 00006DB8 E875FE                  	CALL    PathSepGotCh            ; was it a pathchar?
 33381                                  Prefix:
 33382 00006DBB 58                      	pop	ax			; get back original
 33383 00006DBC C3                      	retn
 33384                                  
 33385                                  ;Break   <ScanPathChar - see if there is a path character in a string>
 33386                                  ;----------------------------------------------------------------------------
 33387                                  ;     ScanPathChar - search through the string (pointed to by DS:SI) for
 33388                                  ;     a path separator.
 33389                                  ;
 33390                                  ;     Input:    DS:SI target string (null terminated)
 33391                                  ;     Output:   Zero set => path separator encountered in string
 33392                                  ;               Zero clear => null encountered
 33393                                  ;     Registers modified: SI
 33394                                  ;----------------------------------------------------------------------------
 33395                                  
 33396                                  ScanPathChar:
 33397 00006DBD AC                      	LODSB                           ; fetch a character
 33398 00006DBE E86FFE                  	call    PathSepGotCh
 33399 00006DC1 75FA                    	JNZ	short ScanPathChar	; not \, / or NUL => go back for more
 33400 00006DC3 E886E8                  	call    PATHCHRCMP              ; path separator?
 33401 00006DC6 C3                      	retn
 33402                                  
 33403                                  ;============================================================================
 33404                                  ; HANDLE.ASM, MSDOS 6.0, 1991
 33405                                  ;============================================================================
 33406                                  ; 13/07/2018 - Retro DOS v3.0
 33407                                  
 33408                                  ;	BREAK <$Close - return a handle to the system>
 33409                                  ;----------------------------------------------------------------------------
 33410                                  ;
 33411                                  ;**	$Close - Close a file Handle
 33412                                  ;
 33413                                  ;	BUGBUG - close gets called a LOT with invalid handles - sizzle that
 33414                                  ;		path
 33415                                  ;
 33416                                  ;	Assembler usage:
 33417                                  ;	    MOV     BX, handle
 33418                                  ;	    MOV     AH, Close
 33419                                  ;	    INT     int_command
 33420                                  ;
 33421                                  ;	ENTRY	(bx) = handle
 33422                                  ;	EXIT	<normal INT21 return convention>
 33423                                  ;	USES	all
 33424                                  ;
 33425                                  ;----------------------------------------------------------------------------
 33426                                  
 33427                                  _$CLOSE:
 33428                                  ;	Grab the SFT pointer from the JFN.
 33429                                  
 33430 00006DC7 E85B02                  	call	CheckOwner		; get system file entry
 33431 00006DCA 722B                    	jc	short CloseError	; error return
 33432 00006DCC 16                      	push	ss
 33433 00006DCD 1F                      	pop	ds			; For DOS_CLOSE
 33434 00006DCE 893E[3605]              	MOV	[THISSFT],DI		; save offset of pointer
 33435 00006DD2 8C06[3805]              	MOV	[THISSFT+2],ES		; save segment value
 33436                                  
 33437                                  ; DS:SI point to JFN table entry.
 33438                                  ; ES:DI point to SFT
 33439                                  ;
 33440                                  ; We now examine the user's JFN entry; If the file was a 70-mode file (network
 33441                                  ; FCB, we examine the ref count on the SFT;  if it was 1, we free the JFN.
 33442                                  ; If the file was not a net FCB, we free the JFN too.
 33443                                  
 33444                                  	;CMP	word [ES:DI+SF_ENTRY.sf_ref_count],1
 33445 00006DD6 26833D01                	cmp	word [ES:DI],1		; will the SFT become free?
 33446 00006DDA 740A                    	jz	short FreeJFN 		; yes, free JFN anyway.
 33447                                  	;mov	al,[ES:DI+2]
 33448 00006DDC 268A4502                	MOV	AL,[ES:DI+SF_ENTRY.sf_mode]
 33449                                  	;and	al,0F0h
 33450 00006DE0 24F0                    	AND	AL,SHARING_MASK
 33451                                  	;cmp	al,70h
 33452 00006DE2 3C70                    	CMP	AL,SHARING_NET_FCB
 33453 00006DE4 7407                    	JZ	short PostFree		; 70-mode and big ref count => free it
 33454                                  
 33455                                  ; The JFN must be freed.  Get the pointer to it and replace the contents with
 33456                                  ; -1.
 33457                                  
 33458                                  FreeJFN:
 33459 00006DE6 E8FFF9                  	call	pJFNFromHandle		;   d = pJFN (handle);
 33460 00006DE9 26C605FF                	MOV	BYTE [ES:DI],0FFh	; release the JFN
 33461                                  PostFree:
 33462                                  
 33463                                  ; ThisSFT is correctly set, we have DS = DOSDATA.  Looks OK for a DOS_CLOSE!
 33464                                  
 33465 00006DED E8D2CC                  	call	DOS_CLOSE
 33466                                  
 33467                                  ; DOS_Close may return an error.  If we see such an error, we report it but
 33468                                  ; the JFN stays closed because DOS_Close always frees the SFT!
 33469                                  
 33470 00006DF0 7205                    	JC	short CloseError
 33471                                  	;mov	ah,3Eh
 33472 00006DF2 B43E                    	MOV	AH,CLOSE		; MZ Bogus multiplan fix
 33473 00006DF4 E906A9                  	jmp	SYS_RET_OK
 33474                                  CloseError:
 33475 00006DF7 E90FA9                  	jmp	SYS_RET_ERR
 33476                                  
 33477                                  
 33478                                  ;	BREAK <$Commit - commit the file>
 33479                                  ;----------------------------------------------------------------------------
 33480                                  ;
 33481                                  ;**	$Commit - Commit a File
 33482                                  ;
 33483                                  ;	$Commit "commits" a file to disk - all of it's buffers are
 33484                                  ;	flushed out.  BUGBUG - I'm pretty sure that $Commit doesn't update
 33485                                  ;	the directory entry, etc., so this commit is pretty useless.  check
 33486                                  ;	and fix this!! jgl
 33487                                  ;
 33488                                  ;	Assembler usage:
 33489                                  ;	    MOV     BX, handle
 33490                                  ;	    MOV     AH, Commit
 33491                                  ;	    INT     int_command
 33492                                  ;
 33493                                  ;	ENTRY	(bx) = handle
 33494                                  ;	EXIT	none
 33495                                  ;	USES	all
 33496                                  ;;----------------------------------------------------------------------------
 33497                                  
 33498                                  _$COMMIT:
 33499                                  ;	Grab the SFT pointer from the JFN.
 33500                                  
 33501 00006DFA E82802                  	call	CheckOwner		; get system file entry
 33502 00006DFD 7214                    	JC	short CommitError	; error return
 33503 00006DFF 16                      	push	ss
 33504 00006E00 1F                      	pop	ds			; For DOS_COMMIT
 33505 00006E01 893E[3605]              	MOV	[THISSFT],DI		; save offset of pointer
 33506 00006E05 8C06[3805]              	MOV	[THISSFT+2],ES		; save segment value
 33507                                  
 33508                                  ;	ThisSFT is correctly set, we have DS = DOSDATA.  Looks OK for a DOS_COMMIT
 33509                                  ;
 33510                                  ;	ES:DI point to SFT
 33511                                  
 33512 00006E09 E8B7CD                  	call	DOS_COMMIT
 33513 00006E0C 7205                    	JC	short CommitError
 33514                                  	;mov	ah,68h
 33515 00006E0E B468                    	MOV	AH,COMMIT		;
 33516 00006E10 E9EAA8                  	jmp	SYS_RET_OK
 33517                                  CommitError:
 33518 00006E13 E9F3A8                  	jmp	SYS_RET_ERR
 33519                                  
 33520                                  ;	BREAK <$ExtHandle - extend handle count>
 33521                                  
 33522                                  ;**	$ExtHandle - Extend Handle Count
 33523                                  ;----------------------------------------------------------------------------
 33524                                  ;	Assembler usage:
 33525                                  ;	    MOV     BX, Number of Opens Allowed (MAX=65534;66535 is
 33526                                  ;	    MOV     AX, 6700H			 reserved to mark SFT
 33527                                  ;	    INT     int_command 		 busy )
 33528                                  ;
 33529                                  ;	ENTRY	(bx) = new number of handles
 33530                                  ;	EXIT	'C' clear if OK
 33531                                  ;		'C' set iff err
 33532                                  ;		  (ax) = error code
 33533                                  ;			 AX = error_not_enough_memory
 33534                                  ;			      error_too_many_open_files
 33535                                  ;	USES	all
 33536                                  ;----------------------------------------------------------------------------
 33537                                  
 33538                                  _$ExtHandle:
 33539 00006E16 31ED                    	XOR	BP,BP			; 0: enlarge   1: shrink  2:psp
 33540                                  	;cmp	bx,20
 33541 00006E18 83FB14                  	CMP	BX,FILPERPROC
 33542 00006E1B 7303                    	JAE	short exth2		; Don't set less than FilPerProc no
 33543 00006E1D BB1400                  	MOV	BX,FILPERPROC
 33544                                  exth2:	
 33545 00006E20 368E06[DE02]            	MOV	ES,[ss:CurrentPDB]	; get user process data block;smr;SS Override
 33546                                  	;mov	cx,[ES:32h]
 33547 00006E25 268B0E3200              	MOV	CX,[ES:PDB.JFN_Length]	; get number of handle allowed
 33548 00006E2A 39CB                    	CMP	BX,CX			; the requested == current
 33549 00006E2C 7452                    	JE	short ok_done 		; yes and exit
 33550 00006E2E 7722                    	JA	short larger		; go allocate new table
 33551                                  
 33552                                  ;	We're going to shrink the # of handles available
 33553                                  
 33554 00006E30 BD0100                  	MOV	BP,1			; shrink
 33555                                  	;mov	ds,[ES:36h]
 33556 00006E33 268E1E3600              	MOV	DS,[ES:PDB.JFN_Pointer+2] ;
 33557 00006E38 89DE                    	MOV	SI,BX			;
 33558 00006E3A 29D9                    	SUB	CX,BX			; get difference
 33559                                  
 33560                                  ;	BUGBUG - code a SCASB here, should be a bit smaller
 33561                                  chck_handles:
 33562 00006E3C 803CFF                  	CMP	BYTE [SI],-1		; scan through handles to ensure close
 33563 00006E3F 7542                    	JNZ	short too_many_files	; status
 33564 00006E41 46                      	INC	SI
 33565 00006E42 E2F8                    	LOOP	chck_handles
 33566 00006E44 83FB14                  	CMP	BX,FILPERPROC		; = 20
 33567 00006E47 7709                    	JA	short larger		; no
 33568                                  
 33569 00006E49 BD0200                  	MOV	BP,2			; psp
 33570                                  	;mov	di,24
 33571 00006E4C BF1800                  	MOV	DI,PDB.JFN_TABLE	; es:di -> jfn table in psp
 33572 00006E4F 53                      	PUSH	BX
 33573 00006E50 EB1F                    	JMP	short movhandl
 33574                                  
 33575                                  larger:
 33576 00006E52 83FBFF                  	CMP	BX,-1			; 65535 is not allowed
 33577 00006E55 0F848100                	JZ	invalid_func ; 10/08/2018
 33578 00006E59 F8                      	CLC
 33579 00006E5A 53                      	PUSH	BX			; save requested number
 33580 00006E5B 83C30F                  	ADD	BX,0FH			; adjust to paragraph boundary
 33581 00006E5E B104                    	MOV	CL,4
 33582                                  	;ror	bx,cl			; MSDOS 3.3
 33583 00006E60 D3DB                    	RCR	BX,CL			; DOS 4.00 fix		;AC000;
 33584 00006E62 81E3FF1F                	AND	BX,1FFFH		; clear most 3 bits
 33585                                  
 33586 00006E66 55                      	PUSH	BP
 33587 00006E67 E8E8F6                  	call	_$ALLOC			; allocate memory
 33588 00006E6A 5D                      	POP	BP
 33589 00006E6B 7267                    	JC	short no_memory		; not enough meory
 33590                                  
 33591 00006E6D 8EC0                    	MOV	ES,AX			; es:di points to new table memory
 33592 00006E6F 31FF                    	XOR	DI,DI
 33593                                  movhandl:
 33594 00006E71 368E1E[DE02]            	MOV	DS,[ss:CurrentPDB] 	; get user PDB address	;smr;SS Override
 33595                                  
 33596 00006E76 F7C50300                	test	BP,3			; enlarge ?
 33597 00006E7A 740C                    	JZ	short enlarge 		; yes
 33598 00006E7C 59                      	POP	CX			; cx = the amount you shrink
 33599 00006E7D 51                      	PUSH	CX
 33600 00006E7E EB0C                    	JMP	short copy_hand
 33601                                  
 33602                                  ;	Done.  'C' clear
 33603                                  
 33604                                  ok_done:
 33605 00006E80 E97AA8                  	jmp	SYS_RET_OK
 33606                                  
 33607                                  too_many_files:
 33608                                  	;mov	al,4
 33609 00006E83 B004                    	MOV	AL,error_too_many_open_files
 33610 00006E85 E981A8                  	jmp	SYS_RET_ERR
 33611                                  
 33612                                  enlarge:
 33613                                  	;mov	cx,[32h]
 33614 00006E88 8B0E3200                	MOV	CX,[PDB.JFN_Length]	; get number of old handles
 33615                                  copy_hand:
 33616 00006E8C 89CA                    	MOV	DX,CX
 33617                                  	;lds	si,[34h]
 33618 00006E8E C5363400                	LDS	SI,[PDB.JFN_Pointer]	; get old table pointer
 33619 00006E92 F3A4                    	REP	MOVSB			; copy infomation to new table
 33620 00006E94 59                      	POP	CX			; get new number of handles
 33621 00006E95 51                      	PUSH	CX			; save it again
 33622 00006E96 29D1                    	SUB	CX,DX			; get the difference
 33623 00006E98 B0FF                    	MOV	AL,-1			; set availability to handles
 33624 00006E9A F3AA                    	REP	STOSB
 33625 00006E9C 368E1E[DE02]            	MOV	DS,[ss:CurrentPDB] 	; get user process data block;smr;SS Override
 33626                                  	;cmp	word [34h],0
 33627 00006EA1 833E340000              	CMP	WORD [PDB.JFN_Pointer],0 ; check if original table pointer
 33628 00006EA6 750D                    	JNZ	short update_info	; yes, go update PDB entries
 33629 00006EA8 55                      	PUSH	BP
 33630 00006EA9 1E                      	PUSH	DS			; save old table segment
 33631 00006EAA 06                      	PUSH	ES			; save new table segment
 33632 00006EAB 8E063600                	MOV	ES,[PDB.JFN_Pointer+2]	; get old table segment
 33633 00006EAF E8BDF7                  	call	_$DEALLOC		; deallocate old table meomory
 33634 00006EB2 07                      	POP	ES			; restore new table segment
 33635 00006EB3 1F                      	POP	DS			; restore old table segment
 33636 00006EB4 5D                      	POP	BP
 33637                                  
 33638                                  update_info:
 33639 00006EB5 F7C50200                	test	BP,2			; psp?
 33640 00006EB9 7408                    	JZ	short non_psp 		; no
 33641                                  	;mov	word [34h],18h ; 24
 33642 00006EBB C70634001800            	MOV	WORD [PDB.JFN_Pointer],PDB.JFN_TABLE ; restore
 33643 00006EC1 EB06                    	JMP	short final
 33644                                  non_psp:
 33645                                  	;mov	word [34h],0
 33646 00006EC3 C70634000000            	MOV	WORD [PDB.JFN_Pointer],0 ; new table pointer offset always 0
 33647                                  final:
 33648                                  	;mov	word [36h],es	
 33649 00006EC9 8C063600                	MOV	[PDB.JFN_Pointer+2],ES	; update table pointer segment
 33650                                  	;pop	word [32h]
 33651 00006ECD 8F063200                	POP	word [PDB.JFN_Length]	; restore new number of handles
 33652 00006ED1 E929A8                  	jmp	SYS_RET_OK
 33653                                  
 33654                                  no_memory:
 33655 00006ED4 5B                      	POP	BX			; clean stack
 33656                                  	;mov	al,8
 33657 00006ED5 B008                    	MOV	AL,error_not_enough_memory
 33658 00006ED7 E92FA8                  	jmp	SYS_RET_ERR
 33659                                  invalid_func:
 33660                                  	;mov	al,1
 33661 00006EDA B001                    	MOV	AL,error_invalid_function
 33662 00006EDC E92AA8                  	jmp	SYS_RET_ERR
 33663                                  
 33664                                  
 33665                                  ;	BREAK <$READ - Read from a file handle>
 33666                                  ;----------------------------------------------------------------------------
 33667                                  ;
 33668                                  ;**	$Read - Read from a File Handle
 33669                                  ;
 33670                                  ;   Assembler usage:
 33671                                  ;
 33672                                  ;	LDS	DX, buf
 33673                                  ;	MOV	CX, count
 33674                                  ;	MOV	BX, handle
 33675                                  ;	MOV	AH, Read
 33676                                  ;	INT	int_command
 33677                                  ;	  AX has number of bytes read
 33678                                  ;
 33679                                  ;	ENTRY	(bx) = file handle
 33680                                  ;		(cx) = byte count
 33681                                  ;		(ds:dx) = buffer address
 33682                                  ;	EXIT	Through system call return so that to user:
 33683                                  ;		  'C' clear if OK
 33684                                  ;		    (ax) = bytes read
 33685                                  ;		  'C' set if error
 33686                                  ;		    (ax) = error code
 33687                                  ;
 33688                                  ;----------------------------------------------------------------------------
 33689                                  
 33690                                  _$READ:
 33691 00006EDF BE[043E]                	MOV	SI,DOS_READ
 33692                                  ReadDo:
 33693 00006EE2 E803F9                  	call	pJFNFromHandle
 33694 00006EE5 7208                    	JC	short ReadError
 33695 00006EE7 268A05                  	MOV	AL,[ES:DI]
 33696 00006EEA E83801                  	call	CheckOwner		; get the handle
 33697 00006EED 7303                    	JNC	short ReadSetup		; no errors do the operation
 33698                                  
 33699                                  ;	Have an error.	'C' set
 33700                                  
 33701                                  ReadError:
 33702 00006EEF E917A8                  	jmp	SYS_RET_ERR		; go to error traps
 33703                                  
 33704                                  ReadSetup:
 33705 00006EF2 36893E[3605]            	MOV	[SS:THISSFT],DI		; save offset of pointer;smr;SS Override
 33706 00006EF7 368C06[3805]            	MOV	[ss:THISSFT+2],ES	; save segment value	;smr;SS Override
 33707                                  	;;; MSDOS 6.0 
 33708                                  ;; Extended Open
 33709                                  	;;;testb [ES:DI+SF_ENTRY.sf_mode],INT_24_ERROR  ;AN000;;EO. need i24
 33710                                  	;;;JZ	short needi24 		      ;AN000;;EO. yes
 33711                                  	;;;OR	byte [EXTOPEN_ON],EXT_OPEN_I24_OFF 
 33712                                  					;AN000;;EO. set it off;smr;SS Override
 33713                                  needi24:				;AN000;
 33714                                  ;; Extended Open
 33715 00006EFC 36FF36[DA02]            	push	word [SS:DMAADD]
 33716 00006F01 36FF36[DC02]            	push	word [SS:DMAADD+2]	;smr;SS Override
 33717                                  ;;;;;	BAD SPOT FOR 286!!! SEGMENT ARITHMETIC!!!
 33718                                  	;;; MSDOS 6.0
 33719                                  	;;; CALL Align_Buffer		;AN000;MS. align user's buffer
 33720                                  	; MSDOS 3.3
 33721 00006F06 89D3                    	MOV	BX,DX			; copy offset
 33722 00006F08 51                      	push	cx			; don't stomp on count
 33723 00006F09 B104                    	MOV	CL,4			; bits to shift bytes->para
 33724 00006F0B D3EB                    	SHR	BX,CL			; get number of paragraphs
 33725 00006F0D 59                      	pop	cx			; get count back
 33726 00006F0E 8CD8                    	MOV	AX,DS			; get original segment
 33727 00006F10 01D8                    	ADD	AX,BX			; get new segment
 33728 00006F12 8ED8                    	MOV	DS,AX			; in seg register
 33729 00006F14 83E20F                  	AND	DX,0Fh			; normalize offset
 33730 00006F17 368916[DA02]            	MOV	[ss:DMAADD],DX		; use user DX as offset	;smr;SS Override
 33731 00006F1C 368C1E[DC02]            	MOV	[ss:DMAADD+2],DS 	; use user DS as segment for DMA
 33732                                  						;smr;SS Override
 33733                                  ;;;;;	END BAD SPOT FOR 286!!! SEGMENT ARITHMETIC!!!
 33734 00006F21 16                      	push	ss			; go for DOS addressability
 33735 00006F22 1F                      	pop	ds
 33736 00006F23 FFD6                    	CALL	SI ; DOS_READ		; indirect call to operation
 33737 00006F25 8F06[DC02]              	pop	word [DMAADD+2]
 33738 00006F29 8F06[DA02]              	pop	word [DMAADD]
 33739                                  	;JNC	short READ_OK		;AN002;
 33740                                  	;JMP	ReadError		;AN002; if error, say bye bye
 33741 00006F2D 72C0                    	jc	short ReadError
 33742                                  READ_OK:
 33743 00006F2F 89C8                    	MOV	AX,CX			; get correct return in correct reg
 33744 00006F31 E9C9A7                  	jmp	SYS_RET_OK		; successful return
 33745                                  
 33746                                  
 33747                                  
 33748                                  ; 13/07/2018 - Retro DOS v3.0
 33749                                  
 33750                                  ;
 33751                                  ;   Input: DS:DX points to user's buffer addr
 33752                                  ;   Function: rearrange segment and offset for READ/WRITE buffer
 33753                                  ;   Output: [DMAADD] set
 33754                                  ;
 33755                                  
 33756                                  ;Align_Buffer:
 33757                                  ;	MOV	BX,DX			; copy offset
 33758                                  ;	push	cx			; don't stomp on count
 33759                                  ;	MOV	CL,4			; bits to shift bytes->para
 33760                                  ;	SHR	BX,CL			; get number of paragraphs
 33761                                  ;	pop	cx			; get count back
 33762                                  ;	MOV	AX,DS			; get original segment
 33763                                  ;	ADD	AX,BX			; get new segment
 33764                                  ;	MOV	DS,AX			; in seg register
 33765                                  ;	AND	DX,0Fh			; normalize offset
 33766                                  ;	MOV	[ss:DMAADD],DX		; use user DX as offset	;smr;SS Override
 33767                                  ;	MOV	[ss:DMAADD+2],DS 	; use user DS as segment for DMA
 33768                                  ;						;smr;SS Override
 33769                                  ;	retn
 33770                                  
 33771                                  ;BREAK <$WRITE - write to a file handle>
 33772                                  ;----------------------------------------------------------------------------
 33773                                  ;
 33774                                  ;   Assembler usage:
 33775                                  ;	    LDS     DX, buf
 33776                                  ;	    MOV     CX, count
 33777                                  ;	    MOV     BX, handle
 33778                                  ;	    MOV     AH, Write
 33779                                  ;	    INT     int_command
 33780                                  ;	  AX has number of bytes written
 33781                                  ;   Errors:
 33782                                  ;	    AX = write_invalid_handle
 33783                                  ;	       = write_access_denied
 33784                                  ;
 33785                                  ;   Returns in register AX
 33786                                  ;
 33787                                  ;----------------------------------------------------------------------------
 33788                                  
 33789                                  _$WRITE:
 33790 00006F34 BE[853F]                	MOV	SI,DOS_WRITE
 33791 00006F37 EBA9                    	JMP	short ReadDo
 33792                                  
 33793                                  ;BREAK <$LSEEK - move r/w pointer>
 33794                                  ;----------------------------------------------------------------------------
 33795                                  ;
 33796                                  ;   Assembler usage:
 33797                                  ;	    MOV     DX, offsetlow
 33798                                  ;	    MOV     CX, offsethigh
 33799                                  ;	    MOV     BX, handle
 33800                                  ;	    MOV     AL, method
 33801                                  ;	    MOV     AH, LSeek
 33802                                  ;	    INT     int_command
 33803                                  ;	  DX:AX has the new location of the pointer
 33804                                  ;   Error returns:
 33805                                  ;	    AX = error_invalid_handle
 33806                                  ;	       = error_invalid_function
 33807                                  ;   Returns in registers DX:AX
 33808                                  ;
 33809                                  ;----------------------------------------------------------------------------
 33810                                  
 33811                                  _$LSEEK:
 33812 00006F39 E8E900                  	call	CheckOwner		; get system file entry
 33813                                  LSeekError:
 33814 00006F3C 7302                    	JNC	short CHKOWN_OK		;AN002;
 33815 00006F3E EBAF                    	JMP	short ReadError		;AN002; error return
 33816                                  
 33817                                  CHKOWN_OK:				;AN002;
 33818 00006F40 3C02                    	CMP	AL,2			; is the seek value correct?
 33819 00006F42 760A                    	JBE	short LSeekDisp		; yes, go dispatch
 33820                                  	;mov	byte [ss:EXTERR_LOCUS],1 
 33821 00006F44 36C606[D102]01          	MOV	byte [ss:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 33822                                  					;smr;SS Override
 33823                                  	;mov	al,1
 33824 00006F4A B001                    	mov	al, error_invalid_function ; invalid method
 33825 00006F4C EBA1                    	jmp	short ReadError
 33826                                  LSeekDisp:
 33827 00006F4E 3C01                    	CMP	AL,1			; best way to dispatch; check middle
 33828 00006F50 720A                    	JB	short LSeekStore	; just store CX:DX
 33829 00006F52 771C                    	JA	short LSeekEOF		; seek from end of file
 33830                                  	;add	dx,[es:di+21]
 33831 00006F54 26035515                	ADD	DX,[ES:DI+SF_ENTRY.sf_position]
 33832                                  	;adc	cx,[es:di+23]
 33833 00006F58 26134D17                	ADC	CX,[ES:DI+SF_ENTRY.sf_position+2]
 33834                                  LSeekStore:
 33835 00006F5C 89C8                    	MOV	AX,CX			; AX:DX
 33836 00006F5E 92                      	XCHG	AX,DX			; DX:AX is the correct value
 33837                                  LSeekSetpos:
 33838                                  	;mov	[es:di+21],ax
 33839 00006F5F 26894515                	MOV	[ES:DI+SF_ENTRY.sf_position],AX
 33840                                  	;mov	[es:di+23],dx
 33841 00006F63 26895517                	MOV	[ES:DI+SF_ENTRY.sf_position+2],DX
 33842 00006F67 E8A1A6                  	call	Get_User_Stack
 33843                                  	;mov	[si+6],dx
 33844 00006F6A 895406                  	MOV	[SI+user_env.user_DX],DX ; return DX:AX
 33845 00006F6D E98DA7                  	jmp	SYS_RET_OK		; successful return
 33846                                  
 33847                                  LSeekEOF:
 33848                                  	;test	word [es:di+5],8000h
 33849 00006F70 26F745050080            	test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 33850 00006F76 750A                    	JNZ	short Check_LSeek_Mode	; Is Net
 33851                                  LOCAL_LSeek:
 33852                                  	;add	dx,[es:di+17]
 33853 00006F78 26035511                	ADD	DX,[ES:DI+SF_ENTRY.sf_size]
 33854                                  	;adc	cx,[es:di+19]
 33855 00006F7C 26134D13                	ADC	CX,[ES:DI+SF_ENTRY.sf_size+2]
 33856 00006F80 EBDA                    	JMP	short LSeekStore	; go and set the position
 33857                                  
 33858                                  Check_LSeek_Mode:
 33859                                  	;test	word [es:di+2],8000h
 33860 00006F82 26F745020080            	test	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB
 33861 00006F88 75EE                    	JNZ	short LOCAL_LSeek	; FCB treated like local file
 33862                                  	;mov	ax,[es:di+2]
 33863 00006F8A 268B4502                	MOV	AX,[ES:DI+SF_ENTRY.sf_mode]
 33864                                  	;and	ax, 0F0h
 33865 00006F8E 25F000                  	AND	AX,SHARING_MASK
 33866                                  	;cmp	ax,40h
 33867 00006F91 83F840                  	CMP	AX,SHARING_DENY_NONE
 33868 00006F94 7405                    	JZ	short NET_LSEEK		; LSEEK exported in this mode
 33869                                  	;cmp	ax,30h
 33870 00006F96 83F830                  	CMP	AX,SHARING_DENY_READ
 33871 00006F99 75DD                    	JNZ	short LOCAL_LSeek	; Treated like local Lseek
 33872                                  NET_LSEEK:
 33873                                  ;	JMP	short LOCAL_LSeek
 33874                                  ; REMOVE ABOVE INSTRUCTION TO ENABLE DCR 142
 33875                                  	;CallInstall Net_Lseek,MultNET,33
 33876                                  	;JNC	short LSeekSetPos
 33877                                  
 33878 00006F9B B82111                  	mov     ax, 1121h
 33879 00006F9E CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - SEEK FROM END OF REMOTE FILE
 33880                                  			; CX:DX = offset (in bytes) from end
 33881                                  			; ES:DI -> SFT, SFT DPB field -> DPB of drive with file
 33882                                  			; SS = DOS CS
 33883                                  			; Return: CF set on error
 33884                                  			; CF clear if successful, DX:AX = new file position
 33885 00006FA0 73BD                    	jnb     short LSeekSetpos
 33886 00006FA2 E964A7                  	jmp	SYS_RET_ERR
 33887                                  
 33888                                  ;BREAK <FileTimes - modify write times on a handle>
 33889                                  ;----------------------------------------------------------------------------
 33890                                  ;
 33891                                  ;   Assembler usage:
 33892                                  ;	    MOV AH, FileTimes (57H)
 33893                                  ;	    MOV AL, func
 33894                                  ;	    MOV BX, handle
 33895                                  ;	; if AL = 1 then then next two are mandatory
 33896                                  ;	    MOV CX, time
 33897                                  ;	    MOV DX, date
 33898                                  ;	    INT 21h
 33899                                  ;	; if AL = 0 then CX/DX has the last write time/date
 33900                                  ;	; for the handle.
 33901                                  ;
 33902                                  ;	AL=02		 get extended attributes
 33903                                  ;	   BX=handle
 33904                                  ;	   CX=size of buffer (0, return max size )
 33905                                  ;	   DS:SI query list (si=-1, selects all EA)
 33906                                  ;	   ES:DI buffer to hold EA list
 33907                                  ;
 33908                                  ;	AL=03		 get EA name list
 33909                                  ;	   BX=handle
 33910                                  ;	   CX=size of buffer (0, return max size )
 33911                                  ;	   ES:DI buffer to hold name list
 33912                                  ;
 33913                                  ;	AL=04		 set extended attributes
 33914                                  ;	   BX=handle
 33915                                  ;	   ES:DI buffer of EA list
 33916                                  ;
 33917                                  ;
 33918                                  ;   Error returns:
 33919                                  ;	    AX = error_invalid_function
 33920                                  ;	       = error_invalid_handle
 33921                                  ;
 33922                                  ;----------------------------------------------------------------------------
 33923                                  
 33924                                  _$FILE_TIMES:
 33925                                  	; 13/07/2018 - Retro DOS v3.0
 33926                                  
 33927                                  	; MSDOS 3.3
 33928 00006FA5 3C02                    	cmp	al,2			; correct subfunction ?
 33929 00006FA7 720B                    	jb	short ft1
 33930                                  
 33931                                          ;mov	byte [ss:EXTERR_LOCUS], 1
 33932 00006FA9 36C606[D102]01          	mov	byte [ss:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 33933                                  						;SS Overr
 33934                                  	;mov	al,1
 33935 00006FAF B001                    	mov	al,error_invalid_function ; give bad return
 33936 00006FB1 E955A7                  	jmp     SYS_RET_ERR
 33937                                  
 33938                                  	; MSDOS 6.0
 33939                                  	;cmp	al,2			; correct subfunction ?
 33940                                  	;jae	short inval_func
 33941                                  ft1:
 33942 00006FB4 E86E00                  	call	CheckOwner		; get sft
 33943 00006FB7 7283                    	jc	short LSeekError	; bad handle
 33944                                  
 33945 00006FB9 08C0                    	or	al,al			; get time/date ?
 33946 00006FBB 7515                    	jnz	short ft_set_time
 33947                                  
 33948                                  ;------ here we get the time & date from the sft for the user
 33949                                  
 33950 00006FBD FA                      	cli				; is this cli/sti reqd ? BUGBUG
 33951                                  	;mov	cx,[es:di+13]
 33952 00006FBE 268B4D0D                	mov	cx,[es:di+SF_ENTRY.sf_time] ; get the time
 33953                                  	;mov	dx,[es:di+15]
 33954 00006FC2 268B550F                	mov	dx,[es:di+SF_ENTRY.sf_date] ;  & date
 33955 00006FC6 FB                      	sti
 33956 00006FC7 E841A6                  	call	Get_User_Stack
 33957                                  	;mov	[si+4],cx
 33958 00006FCA 894C04                  	mov	[si+user_env.user_CX],cx
 33959                                  	;mov	[si+6],dx
 33960 00006FCD 895406                  	mov	[si+user_env.user_DX],dx
 33961 00006FD0 EB20                    	jmp	short ok_ret
 33962                                  
 33963                                  ;------ here we set the time in sft
 33964                                  
 33965                                  ft_set_time:
 33966 00006FD2 E897B0                  	call    EcritSFT
 33967                                  	;mov	[es:di+13],cx
 33968 00006FD5 26894D0D                	mov	[es:di+SF_ENTRY.sf_time],cx ; drop in new time
 33969                                  	;mov	[es:di+15],dx
 33970 00006FD9 2689550F                	mov	[es:di+SF_ENTRY.sf_date],dx ;  and date	
 33971                                  
 33972 00006FDD 31C0                    	xor	ax, ax
 33973 00006FDF 36FF1E[9400]            	call	far [ss:JShare+(14*4)] ; 14 = ShSU	; SS Override
 33974                                  
 33975                                  ;------ set the flags in SFT entry
 33976                                  	;and	word [es:di+5],0FFBFh
 33977 00006FE4 26836505BF              	and	word [es:di+SF_ENTRY.sf_flags],~devid_file_clean 
 33978                                  							; mark file as dirty
 33979                                  	;or	word [es:di+5],4000h
 33980 00006FE9 26814D050040            	or	word [es:di+SF_ENTRY.sf_flags],sf_close_nodate
 33981                                  							; ask close not to
 33982                                  							;   bother about date
 33983                                  							;   and time
 33984 00006FEF E882B0                  	call	LcritSFT
 33985                                  ok_ret:
 33986 00006FF2 E908A7                  	jmp	SYS_RET_OK
 33987                                  
 33988                                  ;inval_func:
 33989                                  ;	mov	byte [ss:EXTERR_LOCUS], 1
 33990                                  ;	mov	byte [ss:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 33991                                  ;						;SS Overr
 33992                                  ;	;mov	al,1
 33993                                  ;	mov	al,error_invalid_function ; give bad return
 33994                                  ;	jmp     SYS_RET_ERR
 33995                                  
 33996                                  ;BREAK <$DUP - duplicate a jfn>
 33997                                  ;----------------------------------------------------------------------------
 33998                                  ;
 33999                                  ;   Assembler usage:
 34000                                  ;	    MOV     BX, fh
 34001                                  ;	    MOV     AH, Dup
 34002                                  ;	    INT     int_command
 34003                                  ;	  AX has the returned handle
 34004                                  ;   Errors:
 34005                                  ;	    AX = dup_invalid_handle
 34006                                  ;	       = dup_too_many_open_files
 34007                                  ;
 34008                                  ;----------------------------------------------------------------------------
 34009                                  
 34010                                  _$DUP:
 34011 00006FF5 89D8                    	MOV	AX,BX			; save away old handle in AX
 34012 00006FF7 E842F8                  	call	JFNFree 		; free handle? into ES:DI, new in BX
 34013                                  DupErrorCheck:
 34014 00006FFA 7218                    	JC	short DupErr		; nope, bye
 34015 00006FFC 06                      	push	es
 34016 00006FFD 57                      	push	di			; save away SFT
 34017 00006FFE 5E                      	pop	si			; into convenient place DS:SI
 34018 00006FFF 1F                      	pop	ds
 34019 00007000 93                      	XCHG	AX,BX			; get back old handle
 34020 00007001 E82100                  	call	CheckOwner		; get sft in ES:DI
 34021 00007004 720E                    	JC	short DupErr		; errors go home
 34022 00007006 E8D7C6                  	call	DOS_Dup_Direct
 34023 00007009 E8DCF7                  	call	pJFNFromHandle		; get pointer
 34024 0000700C 268A1D                  	MOV	BL,[ES:DI]		; get SFT number
 34025 0000700F 881C                    	MOV	[SI],BL			; stuff in new SFT
 34026 00007011 E9E9A6                  	jmp	SYS_RET_OK		; and go home
 34027                                  DupErr:
 34028 00007014 E9F2A6                  	jmp	SYS_RET_ERR
 34029                                  
 34030                                  ;BREAK <$DUP2 - force a dup on a particular jfn>
 34031                                  ;----------------------------------------------------------------------------
 34032                                  ;
 34033                                  ;   Assembler usage:
 34034                                  ;	    MOV     BX, fh
 34035                                  ;	    MOV     CX, newfh
 34036                                  ;	    MOV     AH, Dup2
 34037                                  ;	    INT     int_command
 34038                                  ;   Error returns:
 34039                                  ;	    AX = error_invalid_handle
 34040                                  ;
 34041                                  ;----------------------------------------------------------------------------
 34042                                  
 34043                                  _$DUP2:
 34044 00007017 53                      	push	bx
 34045 00007018 51                      	push	cx			; save source
 34046 00007019 89CB                    	MOV	BX,CX			; get one to close
 34047 0000701B E8A9FD                  	call	_$CLOSE			; close destination handle
 34048 0000701E 5B                      	pop	bx
 34049 0000701F 58                      	pop	ax			; old in AX, new in BX
 34050 00007020 E8C5F7                  	call	pJFNFromHandle		; get pointer
 34051 00007023 EBD5                    	JMP	short DupErrorCheck	; check error and do dup
 34052                                  
 34053                                  ;Break	<CheckOwner - verify ownership of handles from server>
 34054                                  ;----------------------------------------------------------------------------
 34055                                  ;   CheckOwner - Due to the ability of the server to close file handles for a
 34056                                  ;   process without the process knowing it (delete/rename of open files, for
 34057                                  ;   example), it is possible for the redirector to issue a call to a handle
 34058                                  ;   that it soes not rightfully own.  We check here to make sure that the
 34059                                  ;   issuing process is the owner of the SFT.  At the same time, we do a
 34060                                  ;   SFFromHandle to really make sure that the SFT is good.
 34061                                  ;
 34062                                  ;	ENTRY	BX has the handle
 34063                                  ;		User_ID is the current user
 34064                                  ;	EXIT	Carry Clear => ES:DI points to SFT
 34065                                  ;		Carry Set => AX has error code
 34066                                  ;	USES	none
 34067                                  ;----------------------------------------------------------------------------
 34068                                  
 34069                                  CheckOwner:
 34070                                  	; 13/07/2018 - Retro DOS v3.0
 34071                                  
 34072 00007025 E8D8F7                  	call	SFFromHandle
 34073 00007028 720F                    	jc	short co_ret_label	; retc
 34074                                  
 34075 0000702A 50                      	push	ax
 34076                                  
 34077                                  	; MSDOS 6.0
 34078                                  ;SR;
 34079                                  ;SR; WIN386 patch - Do not check for USER_ID for using handles since these 
 34080                                  ;SR; are shared across multiple VMs in win386.
 34081                                  ;SR;
 34082                                  	;test	byte [IsWin386],1
 34083                                  	;jz	short no_win386		;win386 is not present
 34084                                  	;xor	ax,ax			;set the zero flag
 34085                                  	;jmp	short skip_win386	
 34086                                  
 34087                                  ;no_win386:
 34088 0000702B 36A1[EA02]              	mov	ax,[SS:USER_ID]		;smr;SS Override
 34089                                  	;cmp	ax,[es:di+47]
 34090 0000702F 263B452F                	cmp	ax,[es:di+SF_ENTRY.sf_UID]
 34091                                  
 34092                                  ;skip_win386:
 34093 00007033 58                      	pop	ax
 34094                                  	
 34095 00007034 7403                    	jz	short co_ret_label
 34096                                  	
 34097                                  	;mov	al,6
 34098 00007036 B006                    	mov	al,error_invalid_handle
 34099 00007038 F9                      	stc
 34100                                  
 34101                                  co_ret_label:
 34102 00007039 C3                      	retn
 34103                                  
 34104                                  ;============================================================================
 34105                                  ; FILE.ASM, MSDOS 6.0, 1991
 34106                                  ;============================================================================
 34107                                  ; 14/07/2018 - Retro DOS v3.0
 34108                                  
 34109                                  ; MSDOS 2.11
 34110                                  ;BREAK <$Open - open a file handle>
 34111                                  ;----------------------------------------------------------------------------
 34112                                  ;   Assembler usage:
 34113                                  ;           LDS     DX, Name
 34114                                  ;           MOV     AH, Open
 34115                                  ;           MOV     AL, access
 34116                                  ;           INT     int_command
 34117                                  ;
 34118                                  ;       ACCESS          Function
 34119                                  ;       ------          --------
 34120                                  ;       open_for_read   file is opened for reading
 34121                                  ;       open_for_write  file is opened for writing
 34122                                  ;       open_for_both   file is opened for both reading and writing.
 34123                                  ;
 34124                                  ;   Error returns:
 34125                                  ;           AX = error_invalid_access
 34126                                  ;              = error_file_not_found
 34127                                  ;              = error_access_denied
 34128                                  ;              = error_too_many_open_files
 34129                                  ;----------------------------------------------------------------------------
 34130                                  
 34131                                  ; MSDOS 6.0
 34132                                  ;	BREAK <$Open - open a file from a path string>
 34133                                  ;----------------------------------------------------------------------------
 34134                                  ;
 34135                                  ;**	$OPen - Open a File
 34136                                  ;
 34137                                  ;	given a path name in DS:DX and an open mode in AL, $Open opens the
 34138                                  ;	file and and returns a handle
 34139                                  ;
 34140                                  ;	ENTRY	(DS:DX) = pointer to asciz name
 34141                                  ;		(AL) = open mode
 34142                                  ;	EXIT	'C' clear if OK
 34143                                  ;		  (ax) = file handle
 34144                                  ;		'C' set if error
 34145                                  ;		  (ax) = error code
 34146                                  ;	USES	all
 34147                                  ;
 34148                                  ;----------------------------------------------------------------------------
 34149                                  
 34150                                  _$OPEN:       
 34151 0000703A 30E4                    	xor	ah,ah  ; MSDOS 6.0	
 34152                                  _$Open2:
 34153                                  	;mov	ch,16h
 34154 0000703C B516                    	mov	ch,attr_hidden+attr_system+attr_directory
 34155 0000703E E84502                  	call	SetAttrib
 34156 00007041 B9[8237]                	mov	cx,DOS_OPEN
 34157                                  
 34158                                  	;xor	ah,ah  ; MSDOS 3.3
 34159                                  
 34160 00007044 50                      	push	ax
 34161                                  
 34162                                  ;*	General file open/create code. The $CREATE call and the various
 34163                                  ;	$OPEN calls all come here.
 34164                                  ;
 34165                                  ;	We'll share a lot of the standard stuff of allocating SFTs, cracking
 34166                                  ;	path names, etc., and then dispatch to our individual handlers.
 34167                                  ;	WARNING - this info and list is just a guess, not definitive - jgl
 34168                                  ;
 34169                                  ;	(TOS) = create mode
 34170                                  ;	(CX) = address of routine to call to do actual function
 34171                                  ;	(DS:DX) = ASCIZ name
 34172                                  ;	SAttrib = Attribute mask
 34173                                  
 34174                                  ;	Get a free SFT and mark it "being allocated"
 34175                                  
 34176                                  AccessFile:
 34177 00007045 E824B0                  	call	EcritSFT
 34178 00007048 E804F8                  	call	SFNFree			; get a free sfn
 34179 0000704B E826B0                  	call	LcritSFT
 34180 0000704E 7214                    	jc	short OpenFailJ		; oops, no free sft's
 34181 00007050 36891E[4205]            	MOV	[SS:SFN],BX		; save the SFN for later;smr;SS Override
 34182 00007055 36893E[3605]            	MOV	[SS:THISSFT],DI		; save the SF offset	;smr;SS Override
 34183 0000705A 368C06[3805]            	MOV	[SS:THISSFT+2],ES	; save the SF segment	;smr;SS Override
 34184                                  
 34185                                  ;	Find a free area in the user's JFN table.
 34186                                  
 34187 0000705F E8DAF7                  	call	JFNFree			; get a free jfn
 34188 00007062 7303                    	jnc	short SaveJFN
 34189                                  OpenFailJ:
 34190 00007064 E98100                  	JMP	OpenFail		; there were free JFNs... try SFN
 34191                                  
 34192                                  SaveJFN:
 34193 00007067 36893E[4605]            	mov	[ss:PJFN],DI		; save the jfn offset	;smr;SS Override
 34194 0000706C 368C06[4805]            	MOV	[ss:PJFN+2],ES		; save the jfn segment	;smr;SS Override
 34195 00007071 36891E[4405]            	MOV	[ss:JFN],BX		; save the jfn itself	;smr;SS Override
 34196                                  
 34197                                  ;	We have been given an JFN. We lock it down to prevent other tasks from
 34198                                  ;	reusing the same JFN.
 34199                                  
 34200 00007076 368B1E[4205]            	MOV	BX,[ss:SFN]					;smr;SS Override
 34201 0000707B 26881D                  	MOV	[ES:DI],BL		; assign the JFN
 34202 0000707E 89D6                    	MOV	SI,DX			; get name in appropriate place
 34203 00007080 BF[6003]                	MOV	DI,OPENBUF		; appropriate buffer
 34204 00007083 51                      	push	cx			; save routine to call
 34205 00007084 E8C9F9                  	call	TransPath		; convert the path
 34206 00007087 5B                      	pop	bx			; (bx) = routine to call
 34207                                  
 34208 00007088 36C536[3605]            	LDS	SI,[SS:THISSFT]					;smr;SS Override
 34209 0000708D 720A                    	JC	short OpenCleanJ	; no error, go and open file
 34210 0000708F 36803E[1505]FF          	CMP	byte [ss:CMETA],-1				;smr;SS Override
 34211 00007095 7404                    	JZ	short SetSearch
 34212                                  	;mov	al,2
 34213 00007097 B002                    	MOV	AL,error_file_not_found ; no meta chars allowed
 34214                                  OpenCleanJ:
 34215 00007099 EB3E                    	JMP	short OpenClean
 34216                                  
 34217                                  SetSearch:
 34218 0000709B 58                      	pop	ax			; Mode (Open), Attributes (Create)
 34219                                  
 34220                                  ;	We need to get the new inheritance bits.
 34221                                  
 34222 0000709C 31C9                    	xor	cx,cx
 34223                                  	; MSDOS 6.0
 34224                                  	;mov	[si+2],cx ; 0
 34225 0000709E 894C02                  	MOV	[SI+SF_ENTRY.sf_mode],cx ; initialize mode field to 0
 34226                                  	;mov    [si+51],cx ; 0
 34227 000070A1 894C33                  	MOV	[SI+SF_ENTRY.sf_MFT],cx	 ; clean out sharing info
 34228                                  	;
 34229 000070A4 81FB[8237]              	CMP	BX,DOS_OPEN
 34230 000070A8 7509                    	JNZ	short _DoOper
 34231                                  	;test   al,80h
 34232 000070AA A880                    	test	AL,SHARING_NO_INHERIT	; look for no inher
 34233 000070AC 7405                    	JZ	short _DoOper ; 10/08/2018
 34234 000070AE 247F                    	AND	AL,7Fh			; mask off inherit bit
 34235                                  	;mov	cx,1000h
 34236 000070B0 B90010                  	MOV	CX,sf_no_inherit
 34237                                  _DoOper:
 34238                                  	;; MSDOS 3.3
 34239                                  	;;mov	word [si+2], 0
 34240                                  	;;mov	word [si+33h], 0
 34241                                  	;MOV	word [SI+SF_ENTRY.sf_mode],0
 34242                                  	;MOV	word [SI+SF_ENTRY.sf_MFT],0
 34243                                  
 34244                                  	; MSDOS 6.0
 34245                                  ;**	Check if this is an extended open. If so you must set the
 34246                                  ;	modes in sf_mode. Call Set_EXT_mode to do all this. See
 34247                                  ;	Set_EXT_mode in creat.asm
 34248                                  
 34249                                  	; MSDOS 6.0
 34250                                  	;;SAVE	<di, es>                ;M022 conditional removed here
 34251                                  	;push	di
 34252                                  	;push	es
 34253                                  	;push	ds
 34254                                  	;pop	es
 34255                                  	;push	si
 34256                                  	;pop	di			; (es:di) = SFT address
 34257                                  	;call	Set_EXT_mode
 34258                                  	;;RESTORE <es, di>
 34259                                  	;pop	es
 34260                                  	;pop	di
 34261                                  
 34262                                  	;Context DS
 34263 000070B3 16                      	push	ss
 34264 000070B4 1F                      	pop	ds	
 34265                                  
 34266 000070B5 51                      	push	cx
 34267 000070B6 FFD3                    	CALL	BX			; blam!
 34268 000070B8 59                      	pop	cx
 34269 000070B9 C536[3605]              	LDS	SI,[THISSFT]
 34270                                  	;JC	short OpenE2		;AN000;FT. chek extended open hooks first
 34271 000070BD 721B                    	jc	short OpenE ; MSDOS 3.3
 34272                                  
 34273                                  ;	The SFT was successfully opened. Remove busy mark.
 34274                                  
 34275                                  OpenOK:
 34276                                  	;MOV	word [SI+SF_ENTRY.sf_ref_count],1
 34277 000070BF C7040100                	mov	word [SI],1
 34278                                  	;or	[SI+5],cx
 34279 000070C3 094C05                  	OR	[SI+SF_ENTRY.sf_flags],CX ; set no inherit bit if necessary
 34280                                  
 34281                                  ; If the open mode is 70, we scan the system for other SFT's with the same
 34282                                  ; contents. If we find one, then we can 'collapse' thissft onto the already
 34283                                  ; opened one. Otherwise we use this new one. We compare uid/pid/mode/mft
 34284                                  ;
 34285                                  ; Since this is only relevant on sharer systems, we stick this code into the
 34286                                  ; sharer.
 34287                                  
 34288 000070C6 36A1[4405]              	MOV	AX,[ss:JFN]				;smr;SS Override
 34289 000070CA 36FF1E[8C00]            	Call	far [ss:JShare+(12*4)]	; 12 = ShCol	;smr;SS Override
 34290                                  
 34291 000070CF 36C706[4205]FFFF        	MOV	word [ss:SFN],-1	; clear out sfn pointer	;smr;SS Override
 34292 000070D6 E924A6                  	jmp	SYS_RET_OK		; bye with no errors
 34293                                  
 34294                                  	; MSDOS 6.0
 34295                                  ;Extended Open hooks check
 34296                                  ;OpenE2:					;AN000;;EO.
 34297                                  ;	CMP	AX,error_invalid_parameter ;AN000;;EO. IFS extended open ?
 34298                                  ;	JNZ	short OpenE		;AN000;;EO. no.
 34299                                  ;	JMP	short OpenCritLeave	;AN000;;EO. keep handle
 34300                                  
 34301                                  ;	Extended Open hooks check
 34302                                  ;
 34303                                  ;	AL has error code.  Stack has argument to dos_open/dos_create.
 34304                                  
 34305                                  OpenClean:
 34306 000070D9 5B                      	pop	bx			; clean off stack
 34307                                  OpenE:
 34308                                  	;MOV	word [SI+SF_ENTRY.sf_ref_count],0 ; release SFT
 34309 000070DA C7040000                	mov	word [SI],0
 34310 000070DE 36C536[4605]            	LDS	SI,[ss:PJFN]				;smr;SS Override
 34311 000070E3 C604FF                  	MOV	BYTE [SI],0FFh		; free the SFN...
 34312 000070E6 EB02                    	JMP	SHORT OpenCritLeave
 34313                                  
 34314                                  OpenFail:
 34315 000070E8 FB                      	STI
 34316 000070E9 59                      	pop	cx			; Clean stack
 34317                                  OpenCritLeave:
 34318 000070EA 36C706[4205]FFFF        	MOV	word [SS:SFN],-1	; remove mark.
 34319                                  
 34320                                  	; MSDOS 6.0
 34321                                  ;; File Tagging DOS 4.00
 34322                                  ;	CMP	[SS:EXTERR],error_Code_Page_Mismatched 
 34323                                  ;				;AN000;;FT. code page mismatch;smr;SS Override
 34324                                  ;	JNZ	short NORERR	  	;AN000;;FT. no
 34325                                  ;	jmp	From_GetSet		;AN000;;FT. yes
 34326                                  ;NORERR: 				;AN000;
 34327                                  ;; File Tagging DOS 4.00
 34328                                  
 34329 000070F1 E915A6                  	jmp	SYS_RET_ERR		; no free, return error
 34330                                  
 34331                                  ; MSDOS 2.11
 34332                                  ;BREAK <$CREAT - creat a new file and open him for input>
 34333                                  ;----------------------------------------------------------------------------
 34334                                  ;   Assembler usage:
 34335                                  ;           LDS     DX, name
 34336                                  ;           MOV     AH, Creat
 34337                                  ;           MOV     CX, access
 34338                                  ;           INT     21h
 34339                                  ;       ; AX now has the handle
 34340                                  ;
 34341                                  ;   Error returns:
 34342                                  ;           AX = error_access_denied
 34343                                  ;              = error_path_not_found
 34344                                  ;              = error_too_many_open_files
 34345                                  ;----------------------------------------------------------------------------
 34346                                  
 34347                                  ; MSDOS 6.0
 34348                                  ;	BREAK <$Creat - create a brand-new file>
 34349                                  ;----------------------------------------------------------------------------
 34350                                  ;
 34351                                  ;**	$Creat - Create a File
 34352                                  ;
 34353                                  ;	$Creat creates the directory entry specified in DS:DX and gives it the
 34354                                  ;	initial attributes contained in CX
 34355                                  ;
 34356                                  ;	ENTRY	(DS:DX) = ASCIZ path name
 34357                                  ;		(CX) = initial attributes
 34358                                  ;	EXIT	'C' set if error
 34359                                  ;		  (ax) = error code
 34360                                  ;		'C' clear if OK
 34361                                  ;		  (ax) = file handle
 34362                                  ;	USES	all
 34363                                  ;
 34364                                  ;----------------------------------------------------------------------------
 34365                                  
 34366                                  _$CREAT:
 34367 000070F4 51                      	push	cx			; Save attributes on stack
 34368 000070F5 B9[EC36]                	mov	CX,DOS_CREATE		; routine to call
 34369                                  AccessSet:
 34370                                  	;mov	byte [ss:SATTRIB],6
 34371 000070F8 36C606[0805]06          	mov	byte [ss:SATTRIB],attr_hidden+attr_system ;smr;SS Override
 34372                                  	; 10/08/2018
 34373 000070FE E944FF                  	JMP	AccessFile		; use good ol' open
 34374                                  
 34375                                  
 34376                                  ; MSDOS 6.0 (MSDOS 3.3)
 34377                                  ;	BREAK <$CHMOD - change file attributes>
 34378                                  ;----------------------------------------------------------------------------
 34379                                  ;
 34380                                  ;**	$CHMOD - Change File Attributes
 34381                                  ;
 34382                                  ;   Assembler usage:
 34383                                  ;	    LDS     DX, name
 34384                                  ;	    MOV     CX, attributes
 34385                                  ;	    MOV     AL,func (0=get, 1=set)
 34386                                  ;	    INT     21h
 34387                                  ;   Error returns:
 34388                                  ;	    AX = error_path_not_found
 34389                                  ;	    AX = error_access_denied
 34390                                  ;
 34391                                  ;----------------------------------------------------------------------------
 34392                                  
 34393                                  _$CHMOD:
 34394                                  	; 05/08/2018 - Retro DOS v3.0
 34395                                  	;IBMDOS.COM (MSDOS 3.3, 1987) - Offset 6FCCh ,
 34396 00007101 BF[6003]                	MOV	DI,OPENBUF		; appropriate buffer
 34397 00007104 50                      	push	ax
 34398 00007105 51                      	push	cx			; save function and attributes
 34399 00007106 89D6                    	MOV	SI,DX			; get things in appropriate places
 34400 00007108 E849F9                  	call	TransPathSet		; get correct path
 34401 0000710B 59                      	pop	cx
 34402 0000710C 58                      	pop	ax			; and get function and attrs back
 34403 0000710D 7235                    	JC	short ChModErr		; errors get mapped to path not found
 34404 0000710F 16                      	push	ss			; set up for later possible calls
 34405 00007110 1F                      	pop	ds
 34406 00007111 803E[1505]FF            	CMP	byte [CMETA],-1
 34407 00007116 752C                    	JNZ	short ChModErr
 34408                                  	;mov	byte [SATTRIB],16h
 34409 00007118 C606[0805]16            	MOV	byte [SATTRIB],attr_hidden+attr_system+attr_directory
 34410 0000711D 2C01                    	SUB	AL,1			; fast way to discriminate
 34411 0000711F 720B                    	JB	short ChModGet		; 0 -> go get value
 34412 00007121 7417                    	JZ	short ChModSet		; 1 -> go set value
 34413                                  	;mov	byte [EXTERR_LOCUS],1
 34414 00007123 C606[D102]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 34415                                  	;mov	al,1
 34416 00007128 B001                    	mov	al,error_invalid_function ; bad value
 34417                                  	;jmp	SYS_RET_ERR
 34418 0000712A EB1A                    	jmp	short ChModE	
 34419                                  ChModGet:
 34420 0000712C E8C4C4                  	call	GET_FILE_INFO		; suck out the ol' info
 34421 0000712F 7215                    	JC	short ChModE		; error codes are already set for ret
 34422 00007131 E8D7A4                  	call	Get_User_Stack		; point to user saved vaiables
 34423                                  	;mov	[SI+4],ax
 34424 00007134 894404                  	MOV	[SI+user_env.user_CX],AX  ; return the attributes
 34425 00007137 E9C3A5                  	jmp	SYS_RET_OK		; say sayonara
 34426                                  ChModSet:
 34427 0000713A 89C8                    	MOV	AX,CX			; get attrs in position
 34428 0000713C E815C5                  	call	SET_FILE_ATTRIBUTE	; go set
 34429 0000713F 7205                    	JC	short ChModE		; errors are set
 34430 00007141 E9B9A5                  	jmp	SYS_RET_OK
 34431                                  ChModErr:
 34432                                  	;mov	al, 3
 34433 00007144 B003                    	mov	al,error_path_not_found
 34434                                  ChModE:
 34435 00007146 E9C0A5                  	jmp	SYS_RET_ERR
 34436                                  
 34437                                  ;	BREAK <$UNLINK - delete a file entry>
 34438                                  ;----------------------------------------------------------------------------
 34439                                  ;
 34440                                  ;**	$UNLINK - Delete a File
 34441                                  ;
 34442                                  ;
 34443                                  ;	Assembler usage:
 34444                                  ;	    LDS     DX, name
 34445                                  ;	    IF VIA SERVER DOS CALL
 34446                                  ;	     MOV     CX,SEARCH_ATTRIB
 34447                                  ;	    MOV     AH, Unlink
 34448                                  ;	    INT     21h
 34449                                  ;
 34450                                  ;	ENTRY	(ds:dx) = path name
 34451                                  ;		(cx) = search_attribute, if via server_dos
 34452                                  ;	EXIT	'C' clear if no error
 34453                                  ;		'C' set if error
 34454                                  ;		  (ax) = error code
 34455                                  ;			= error_file_not_found
 34456                                  ;			= error_access_denied
 34457                                  ;
 34458                                  ;----------------------------------------------------------------------------
 34459                                  
 34460                                  _$UNLINK:
 34461 00007149 51                      	push	cx			; Save possible CX input parm
 34462 0000714A 89D6                    	MOV	SI,DX			; Point at input string
 34463 0000714C BF[6003]                	MOV	DI,OPENBUF		; temp spot for path
 34464 0000714F E802F9                  	call	TransPathSet		; go get normalized path
 34465 00007152 59                      	pop	cx
 34466 00007153 72EF                    	JC	short ChModErr		; badly formed path
 34467 00007155 36803E[1505]FF          	CMP	byte [ss:CMETA],-1	; meta chars?	;smr;SS Override
 34468 0000715B 750F                    	JNZ	short NotFound
 34469 0000715D 16                      	push	ss
 34470 0000715E 1F                      	pop	ds
 34471                                  	;mov	ch,6
 34472 0000715F B506                    	mov	ch,attr_hidden+attr_system ; unlink appropriate files
 34473 00007161 E82201                  	call	SetAttrib
 34474 00007164 E809C1                  	call	DOS_DELETE		; remove that file
 34475 00007167 7205                    	JC	short UnlinkE 		; error is there
 34476 00007169 E991A5                  	jmp	SYS_RET_OK		; okey doksy
 34477                                  NotFound:
 34478                                  	;mov	al, 3
 34479 0000716C B003                    	MOV	AL,error_path_not_found
 34480                                  UnlinkE:
 34481 0000716E E998A5                  	jmp	SYS_RET_ERR		; bye
 34482                                  
 34483                                  ;BREAK <$RENAME - move directory entries around>
 34484                                  ;----------------------------------------------------------------------------
 34485                                  ;
 34486                                  ;   Assembler usage:
 34487                                  ;	    LDS     DX, source
 34488                                  ;	    LES     DI, dest
 34489                                  ;	    IF VIA SERVER DOS CALL
 34490                                  ;	     MOV     CX,SEARCH_ATTRIB
 34491                                  ;	    MOV     AH, Rename
 34492                                  ;	    INT     21h
 34493                                  ;
 34494                                  ;   Error returns:
 34495                                  ;	    AX = error_file_not_found
 34496                                  ;	       = error_not_same_device
 34497                                  ;	       = error_access_denied
 34498                                  ;
 34499                                  ;----------------------------------------------------------------------------
 34500                                  
 34501                                  _$RENAME:
 34502                                  	; MSDOS 3.3 (& MSDOS 6.0)
 34503 00007171 51                      	push	cx
 34504 00007172 1E                      	push	ds
 34505 00007173 52                      	push	dx			; save source and possible CX arg
 34506 00007174 06                      	PUSH	ES
 34507 00007175 1F                      	POP	DS			; move dest to source
 34508 00007176 89FE                    	MOV	SI,DI			; save for offsets
 34509 00007178 BF[E003]                	MOV	DI,RENBUF
 34510 0000717B E8D6F8                  	call	TransPathSet		; munge the paths
 34511 0000717E 36FF36[4A05]            	PUSH	word [ss:WFP_START]	; get pointer	;smr;SS Override
 34512 00007183 368F06[4C05]            	POP	word [ss:REN_WFP]	; stash it	;smr;SS Override
 34513 00007188 5E                      	pop	si
 34514 00007189 1F                      	pop	ds
 34515 0000718A 59                      	pop	cx			; get back source and possible CX arg
 34516                                  epjc2:	
 34517 0000718B 72B7                    	JC	short ChModErr		; get old error
 34518 0000718D 36803E[1505]FF          	CMP	byte [ss:CMETA],-1			;smr;SS Override
 34519 00007193 75D7                    	JNZ	short NotFound
 34520 00007195 51                      	push	cx			; Save possible CX arg
 34521 00007196 BF[6003]                	MOV	DI,OPENBUF		; appropriate buffer
 34522 00007199 E8B8F8                  	call	TransPathSet		; wham
 34523 0000719C 59                      	pop	cx
 34524 0000719D 72EC                    	JC	short epjc2
 34525 0000719F 16                      	push	ss
 34526 000071A0 1F                      	pop	ds
 34527 000071A1 803E[1505]FF            	CMP	byte [CMETA],-1
 34528 000071A6 72C4                    	JB	short NotFound
 34529                                  
 34530                                  	; MSDOS 6.0
 34531 000071A8 FF36[3A05]              	PUSH	WORD [THISCDS]		   ;AN000;;MS.save thiscds
 34532 000071AC FF36[3C05]              	PUSH	WORD [THISCDS+2]	   ;AN000;;MS.
 34533 000071B0 BF[6003]                	MOV	DI,OPENBUF		   ;AN000;;MS.
 34534 000071B3 16                      	PUSH	SS			   ;AN000;;MS.
 34535 000071B4 07                      	POP	ES			   ;AN000;;MS.es:di-> source
 34536 000071B5 30C0                    	XOR	AL,AL			   ;AN000;;MS.scan all CDS
 34537                                  rnloop: 				   ;AN000;
 34538 000071B7 E80EF8                  	call	GetCDSFromDrv		   ;AN000;;MS.
 34539 000071BA 7211                    	JC	short dorn		   ;AN000;;MS.	end of CDS
 34540 000071BC E875AD                  	call	StrCmp			   ;AN000;;MS.	current dir ?
 34541 000071BF 7404                    	JZ	short rnerr		   ;AN000;;MS.	yes
 34542 000071C1 FEC0                    	INC	AL			   ;AN000;;MS.	next
 34543 000071C3 EBF2                    	JMP	short rnloop		   ;AN000;;MS.
 34544                                  rnerr:					   ;AN000;
 34545 000071C5 83C404                  	ADD	SP,4			   ;AN000;;MS. pop thiscds
 34546                                  	;error	error_current_directory    ;AN000;;MS.
 34547 000071C8 B010                    	mov	al,error_current_directory 
 34548 000071CA E93CA5                  	jmp	SYS_RET_ERR
 34549                                  dorn:					   ;AN000;
 34550 000071CD 368F06[3C05]            	POP	WORD [SS:THISCDS+2]	   ;AN000;;MS.;PBUGBUG;SS REQD??
 34551 000071D2 368F06[3A05]            	POP	WORD [SS:THISCDS]	   ;AN000;;MS.;PBUGBUG;SS REQD??
 34552                                  
 34553 000071D7 16                      	push	ss
 34554 000071D8 1F                      	pop	ds
 34555                                  
 34556                                  	; MSDOS 3.3 (& MSDOS 6.0)
 34557                                  	;mov	ch,16h
 34558 000071D9 B516                    	mov	ch,attr_directory+attr_hidden+attr_system
 34559                                  					; rename appropriate files
 34560 000071DB E8A800                  	call	SetAttrib
 34561 000071DE E83AC2                  	call	DOS_RENAME		; do the deed
 34562 000071E1 728B                    	JC	short UnlinkE 		; errors
 34563                                  
 34564 000071E3 E917A5                  	jmp	SYS_RET_OK
 34565                                  
 34566                                  
 34567                                  ; 14/07/2018 - Retro DOS v3.0
 34568                                  ; MSDOS 3.3 (& MSDOS 6.0)
 34569                                  
 34570                                  ;Break <$CreateNewFile - Create a new directory entry>
 34571                                  ;----------------------------------------------------------------------------
 34572                                  ;   CreateNew - Create a new directory entry.  Return a file handle if there
 34573                                  ;	was no previous directory entry, and fail if a directory entry with
 34574                                  ;	the same name existed previously.
 34575                                  ;
 34576                                  ;   Inputs:	DS:DX point to an ASCIZ file name
 34577                                  ;		CX contains default file attributes
 34578                                  ;   Outputs:	Carry Clear:
 34579                                  ;		    AX has file handle opened for read/write
 34580                                  ;		Carry Set:
 34581                                  ;		    AX has error code
 34582                                  ;   Registers modified: All
 34583                                  ;----------------------------------------------------------------------------
 34584                                  
 34585                                  _$CreateNewFile:
 34586 000071E6 51                      	push	cx			; Save attributes on stack
 34587 000071E7 B9[7D37]                	MOV	CX,DOS_Create_New	; routine to call
 34588 000071EA E90BFF                  	JMP	AccessSet		; use good ol' open
 34589                                  
 34590                                  ;**	BinToAscii - convert a number to a string.
 34591                                  ;----------------------------------------------------------------------------
 34592                                  ;	BinToAscii converts a 16 bit number into a 4 ascii characters.
 34593                                  ;	This routine is used to generate temp file names so we don't spend
 34594                                  ;	the time and code needed for a true hex number, we just use
 34595                                  ;	A thorugh O.
 34596                                  ;
 34597                                  ;	ENTRY	(ax) = value
 34598                                  ;		(es:di) = destination
 34599                                  ;	EXIT	(es:di) updated by 4
 34600                                  ;	USES	cx, di, flags
 34601                                  ;----------------------------------------------------------------------------
 34602                                  
 34603                                  ; MSDOS 3.3
 34604                                  ;BinToAscii:
 34605                                  ;	mov     cx,4
 34606                                  ;bta5:
 34607                                  ;	push    cx
 34608                                  ;	mov     cl,4
 34609                                  ;	rol     ax,cl
 34610                                  ;	push    ax
 34611                                  ;	and     al,0Fh
 34612                                  ;	add     al,'0'
 34613                                  ;	cmp     al,'9'
 34614                                  ;	jbe     short bta6
 34615                                  ;	add     al,7
 34616                                  ;bta6: 
 34617                                  ;	stosb
 34618                                  ;	pop     ax
 34619                                  ;	pop     cx
 34620                                  ;	loop    bta5
 34621                                  ;	retn
 34622                                  
 34623                                  ; MSDOS 6.0
 34624                                  BinToAscii:
 34625 000071ED B90404                  	mov	cx,404h			; (ch) = digit counter, (cl) = shift cnt
 34626                                  bta5:	
 34627 000071F0 D3C0                    	ROL	AX,CL			; move leftmost nibble into rightmost
 34628 000071F2 50                      	push	ax			; preserve remainder of digits
 34629 000071F3 240F                    	AND	AL,0Fh			; grab low nibble
 34630 000071F5 0441                    	ADD	AL,'A'			; turn into ascii
 34631 000071F7 AA                      	STOSB				; drop in the character
 34632 000071F8 58                      	pop	ax			; (ax) = shifted number
 34633 000071F9 FECD                    	dec	ch
 34634 000071FB 75F3                    	jnz	short bta5		; process 4 digits
 34635 000071FD C3                      	retn
 34636                                  
 34637                                  ;Break	<$CreateTempFile - create a unique name>
 34638                                  ;----------------------------------------------------------------------------
 34639                                  ;   $CreateTemp - given a directory, create a unique name in that directory.
 34640                                  ;	Method used is to get the current time, convert to a name and attempt
 34641                                  ;	a create new.  Repeat until create new succeeds.
 34642                                  ;
 34643                                  ;   Inputs:	DS:DX point to a null terminated directory name.
 34644                                  ;		CX  contains default attributes
 34645                                  ;   Outputs:	Unique name is appended to DS:DX directory.
 34646                                  ;		AX has handle
 34647                                  ;   Registers modified: all
 34648                                  ;----------------------------------------------------------------------------
 34649                                  
 34650                                  _$CreateTempFile:
 34651                                  	;Enter
 34652 000071FE 55                      	push	bp
 34653 000071FF 89E5                    	mov	bp,sp
 34654                                  
 34655                                  	;LocalVar    EndPtr,DWORD
 34656                                  	;LocalVar    FilPtr,DWORD
 34657                                  	;LocalVar    Attr,WORD
 34658                                  
 34659 00007201 83EC0A                  	sub	sp,10
 34660                                  
 34661                                  	;test	cx,0FFD8h
 34662 00007204 F7C1D8FF                	test	CX,~attr_changeable
 34663 00007208 7405                    	JZ	short OKatts		; Ok if no non-changeable bits set
 34664                                  ;
 34665                                  ; We need this "hook" here to detect these cases (like user sets one both of
 34666                                  ; vol_id and dir bits) because of the structure of the or $CreateNewFile loop
 34667                                  ; below.  The code loops on error_access_denied, but if one of the non
 34668                                  ; changeable attributes is specified, the loop COULD be infinite or WILL be
 34669                                  ; infinite because CreateNewFile will fail with access_denied always.  Thus we
 34670                                  ; need to detect these cases before getting to the loop.
 34671                                  ;
 34672                                  	;mov	ax, 5
 34673 0000720A B80500                  	MOV	AX,error_access_denied
 34674 0000720D EB6B                    	JMP	SHORT SETTMPERR
 34675                                  
 34676                                  OKatts:
 34677                                  	;MOV	attr,CX 		; save attribute
 34678 0000720F 894EF6                  	mov     [bp-10],cx
 34679                                  	;MOV	FilPtrL,DX		; pointer to file
 34680 00007212 8956F8                  	mov	[bp-8],dx
 34681                                  	;MOV	FilPtrH,DS
 34682 00007215 8C5EFA                  	mov	[bp-6],ds
 34683                                  	;MOV	EndPtrH,DS		; seg pointer to end of dir
 34684 00007218 8C5EFE                  	mov	[bp-2],ds
 34685 0000721B 1E                      	PUSH	DS
 34686 0000721C 07                      	POP	ES			; destination for nul search
 34687 0000721D 89D7                    	MOV	DI,DX
 34688 0000721F 89F9                    	MOV	CX,DI
 34689 00007221 F7D9                    	NEG	CX			; number of bytes remaining in segment
 34690                                  	; MSDOS 6.0
 34691 00007223 09C9                    	OR	CX,CX			;AN000;MS. cx=0 ? ds:dx on segment boundary
 34692 00007225 7501                    	JNZ	short okok		;AN000;MS. no
 34693                                  	;MOV	CX,-1			;AN000;MS.
 34694 00007227 49                      	dec	cx  ; mov cx,-1
 34695                                  	;
 34696                                  okok:					;AN000;
 34697 00007228 31C0                    	XOR	AX,AX			;AN000;
 34698 0000722A F2AE                    	REPNZ	SCASB			;AN000;
 34699                                  					;AN000;
 34700 0000722C 4F                      	DEC	DI			; point back to the null
 34701 0000722D 268A45FF                	MOV	AL,[ES:DI-1]		; Get char before the NUL
 34702 00007231 E818E4                  	call	PATHCHRCMP		; Is it a path separator?
 34703 00007234 7403                    	JZ	short SETENDPTR		; Yes
 34704                                  STOREPTH:
 34705 00007236 B05C                    	MOV	AL,'\'
 34706 00007238 AA                      	STOSB				; Add a path separator (and INC DI)
 34707                                  SETENDPTR:
 34708                                  	;MOV	EndPtrL,DI		; pointer to the tail
 34709 00007239 8856FC                  	mov	[bp-4],dl
 34710                                  CreateLoop:
 34711 0000723C 16                      	push	ss			; let ReadTime see variables
 34712 0000723D 1F                      	pop	ds
 34713 0000723E 55                      	push	bp
 34714 0000723F E89EA6                  	call	READTIME		; go get time
 34715 00007242 5D                      	pop	bp
 34716                                  ;
 34717                                  ; Time is in CX:DX.  Go drop it into the string.
 34718                                  ;
 34719                                  	;les	di,EndPtr		; point to the string
 34720 00007243 C47EFC                  	les	di,[BP-4]
 34721 00007246 89C8                    	mov	ax,cx
 34722 00007248 E8A2FF                  	call	BinToAscii		; store upper word
 34723 0000724B 89D0                    	mov	ax,dx
 34724 0000724D E89DFF                  	call	BinToAscii		; store lower word
 34725 00007250 30C0                    	xor	al,al
 34726 00007252 AA                      	STOSB				; nul terminate
 34727                                  	;LDS	DX,FilPtr		; get name
 34728 00007253 C556F8                  	lds	dx,[bp-8]
 34729                                  	;MOV	CX,Attr 		; get attr
 34730 00007256 8B4EF6                  	mov	cx,[bp-10]
 34731 00007259 55                      	push	bp
 34732 0000725A E889FF                  	CALL	_$CreateNewFile		; try to create a new file
 34733 0000725D 5D                      	pop	bp
 34734 0000725E 731B                    	JNC	short CreateDone	; failed, go try again
 34735                                  ;
 34736                                  ; The operation failed and the error has been mapped in AX.  Grab the extended
 34737                                  ; error and figure out what to do.
 34738                                  ;
 34739                                  	;; MSDOS 3.3			; M049 - start
 34740                                  ;;	mov	ax,[ss:EXTERR]				;smr;SS Override
 34741                                  ;;	cmp	al,error_file_exists
 34742                                  ;;	jz	short CreateLoop	; file existed => try with new name
 34743                                  ;;	cmp	al,error_access_denied
 34744                                  ;;	jz	short CreateLoop	; access denied (attr mismatch)
 34745                                  
 34746                                  	; MSDOS 6.0
 34747                                  	;cmp	al,50h
 34748 00007260 3C50                    	CMP	AL,error_file_exists	; Q: did file already exist
 34749 00007262 74D8                    	JZ	short CreateLoop	; Y: try again
 34750                                  	;cmp	al,5
 34751 00007264 3C05                    	CMP	AL,error_access_denied	; Q: was it access denied
 34752 00007266 7512                    	JNZ	short SETTMPERR		; N: Error out
 34753                                  					; Y: Check to see if we got this due
 34754                                  					;    to the network drive. Note that
 34755                                  					;    the redir will set the exterr
 34756                                  					;    to error_cannot_make if this is 
 34757                                  					;    so. 
 34758 00007268 36803E[D202]41          	CMP	byte [SS:EXTERR],error_net_access_denied ; M069
 34759                                  					; See if it's REALLY an att mismatch
 34760 0000726E 740A                    	je	short SETTMPERR		; no, network error, stop
 34761                                  ;M070
 34762                                  ; If the user failed on an I24, we do not want to try again
 34763                                  ;
 34764 00007270 36803E[D202]53          	cmp	byte [SS:EXTERR],error_FAIL_I24 ;User failed on I24? ;M070
 34765 00007276 7402                    	je	short SETTMPERR		;yes, do not try again ;M070
 34766                                  
 34767 00007278 EBC2                    	jmp	short CreateLoop	;attr mismatch, try again ;M070
 34768                                  
 34769                                  ;;	MOV	AL,error_access_denied	; Return this "extended" error
 34770                                  					; M049 - end
 34771                                  SETTMPERR:
 34772 0000727A F9                      	STC
 34773                                  CreateDone:
 34774                                  	;Leave
 34775 0000727B 89EC                    	mov	sp,bp
 34776 0000727D 5D                      	pop	bp
 34777 0000727E 7203                    	JC	short CreateFail
 34778 00007280 E97AA4                  	jmp	SYS_RET_OK		; success!
 34779                                  CreateFail:
 34780 00007283 E983A4                  	jmp	SYS_RET_ERR
 34781                                  
 34782                                  ;
 34783                                  ;   SetAttrib will set the search attribute (SAttrib) either to the normal
 34784                                  ;   (CH) or to the value in CL if the current system call is through
 34785                                  ;   serverdoscall.
 34786                                  ;
 34787                                  ;   Inputs:	fSharing == FALSE => set sattrib to CH
 34788                                  ;		fSharing == TRUE => set sattrib to CL
 34789                                  ;   Outputs:	none
 34790                                  ;   Registers changed:	CX
 34791                                  
 34792                                  SetAttrib:
 34793 00007286 36F606[0D05]FF          	test	byte [SS:FSHARING],-1		;smr;SS Override
 34794 0000728C 7502                    	jnz	short Set
 34795 0000728E 88E9                    	mov	cl,ch
 34796                                  Set:
 34797 00007290 36880E[0805]            	mov	byte [ss:SATTRIB],cl		;smr;SS Override
 34798 00007295 C3                      	retn
 34799                                  
 34800                                  ; 14/07/2018 - Retro DOS v3.0
 34801                                  ; MSDOS 6.0
 34802                                  
 34803                                  ;Break	<Extended_Open- Extended open the file>
 34804                                  ;----------------------------------------------------------------------------
 34805                                  ; Input: AL= 0 reserved  AH=6CH
 34806                                  ;	 BX= mode
 34807                                  ;	 CL= create attribute  CH=search attribute (from server)
 34808                                  ;	 DX= flag
 34809                                  ;	 DS:SI = file name
 34810                                  ;	 ES:DI = parm list
 34811                                  ;			   DD  SET EA list (-1) null
 34812                                  ;			   DW  n  parameters
 34813                                  ;			   DB  type (TTTTTTLL)
 34814                                  ;			   DW  IOMODE
 34815                                  ; Function: Extended Open
 34816                                  ; Output: carry clear
 34817                                  ;		     AX= handle
 34818                                  ;		     CX=1 file opened
 34819                                  ;			2 file created/opened
 34820                                  ;			3 file replaced/opened
 34821                                  ;	  carry set: AX has error code
 34822                                  ;----------------------------------------------------------------------------
 34823                                  
 34824                                  ;_$Extended_Open:			  ;AN000;
 34825                                  ;	;ASSUME	CS:DOSCODE,SS:DOSDATA	  ;AN000;
 34826                                  ;	MOV	[SS:EXTOPEN_FLAG],DX	  ;AN000;EO. save ext. open flag;smr;SS Override
 34827                                  ;	MOV	word [SS:EXTOPEN_IO_MODE],0 ;AN000;EO. initialize IO mode;smr;SS Override
 34828                                  ;	TEST	DX,reserved_bits_mask	  ;AN000;EO. reserved bits 0  ?
 34829                                  ;	JNZ	short ext_inval2	  ;AN000;EO. no
 34830                                  ;	MOV	AH,DL			  ;AN000;EO. make sure flag is right
 34831                                  ;	CMP	DL,0			  ;AN000;EO. all fail ?
 34832                                  ;	JZ	short ext_inval2	  ;AN000;EO. yes, error
 34833                                  ;	AND	DL,exists_mask		  ;AN000;EO. get exists action byte
 34834                                  ;	CMP	DL,2			  ;AN000;EO, > 02
 34835                                  ;	JA	short ext_inval2	  ;AN000;EO. yes ,error
 34836                                  ;	AND	AH,not_exists_mask	  ;AN000;EO. get no exists action byte
 34837                                  ;	CMP	AH,10H			  ;AN000;EO. > 10
 34838                                  ;	JA	short ext_inval2	  ;AN000;EO. yes error
 34839                                  ;
 34840                                  ;	MOV	[SS:SAVE_ES],ES		  ;AN000;EO. save API parms;smr;SS Override
 34841                                  ;	MOV	[SS:SAVE_DI],DI		  ;AN000;EO.;smr;SS Override
 34842                                  ;	PUSH	word [SS:EXTOPEN_FLAG]	  ;AN000;EO.;smr;SS Override
 34843                                  ;	POP	word [SS:SAVE_DX]	  ;AN000;EO.;smr;SS Override
 34844                                  ;	MOV	[SS:SAVE_CX],CX		  ;AN000;EO.;smr;SS Override
 34845                                  ;	MOV	[SS:SAVE_BX],BX		  ;AN000;EO.;smr;SS Override
 34846                                  ;	MOV	[SS:SAVE_DS],DS		  ;AN000;EO.;smr;SS Override
 34847                                  ;	MOV	[SS:SAVE_SI],SI		  ;AN000;EO.;smr;SS Override
 34848                                  ;	MOV	DX,SI			  ;AN000;EO. ds:dx points to file name
 34849                                  ;	MOV	AX,BX			  ;AN000;EO. ax= mode
 34850                                  ;	JMP	SHORT goopen2		  ;AN000;;EO. do normal
 34851                                  ;ext_inval2:				  ;AN000;;EO.
 34852                                  ;	mov	al,error_invalid_function ;AN000;EO.. invalid function
 34853                                  ;	jmp	SYS_RET_ERR
 34854                                  ;error_return:				  ;AN000;EO.
 34855                                  ;	retn				  ;AN000;EO.. return with error
 34856                                  ;goopen2:				  ;AN000;
 34857                                  ;	TEST	BX,int_24_error 	  ;AN000;EO.. disable INT 24 error ?
 34858                                  ;	JZ	short goopen		  ;AN000;EO.. no
 34859                                  ;	OR	byte [SS:EXTOPEN_ON],EXT_OPEN_I24_OFF ;AN000;EO.. set bit to disable;smr;SS Override
 34860                                  ;goopen:					  ;AN000;
 34861                                  ;	OR	byte [SS:EXTOPEN_ON],EXT_OPEN_ON  ;AN000;EO.. set Extended Open active;smr;SS Override
 34862                                  ;	AND	word [SS:EXTOPEN_FLAG],0FFH  ;AN000;EO.create new ?;smr;SS Override
 34863                                  ;	CMP	word [SS:EXTOPEN_FLAG],ext_exists_fail + ext_nexists_create ;AN000;FT.;smr;SS Override
 34864                                  ;	JNZ	short chknext 		  ;AN000;;EO. no
 34865                                  ;	call	_$CreateNewFile		  ;AN000;;EO. yes
 34866                                  ;	JC	short error_return	  ;AN000;;EO. error
 34867                                  ;	CMP	byte [SS:EXTOPEN_ON],0	  ;AN000;;EO. IFS does it;smr;SS Override
 34868                                  ;	JZ	short ok_return2	  ;AN000;;EO. yes
 34869                                  ;	MOV	word [SS:EXTOPEN_FLAG],action_created_opened ;AN000;EO. creted/opened;smr;SS Override
 34870                                  ;	JMP	short setXAttr		  ;AN000;;EO. set XAs
 34871                                  ;ok_return2:
 34872                                  ;	jmp	SYS_RET_OK		  ;AN000;;EO.
 34873                                  ;chknext:
 34874                                  ;	TEST	word [SS:EXTOPEN_FLAG],ext_exists_open ;AN000;;EO. exists open;smr;SS Override
 34875                                  ;	JNZ	short exist_open	  ;AN000;;EO. yes
 34876                                  ;	call	_$CREAT			  ;AN000;;EO. must be replace open
 34877                                  ;	JC	short error_return	  ;AN000;;EO. return with error
 34878                                  ;	CMP	byte [SS:EXTOPEN_ON],0	  ;AN000;;EO. IFS does it;smr;SS Override
 34879                                  ;	JZ	short ok_return2	  ;AN000;;EO. yes
 34880                                  ;	MOV	word [SS:EXTOPEN_FLAG],action_created_opened ;AN000;EO. prsume create/open;smr;SS Override
 34881                                  ;	TEST	byte [SS:EXTOPEN_ON],ext_file_not_exists ;AN000;;EO. file not exists ?;smr;SS Override
 34882                                  ;	JNZ	short setXAttr		  ;AN000;;EO. no
 34883                                  ;	MOV	word [SS:EXTOPEN_FLAG],action_replaced_opened ;AN000;;EO. replaced/opened;smr;SS Override
 34884                                  ;	JMP	SHORT setXAttr		  ;AN000;;EO. set XAs
 34885                                  ;error_return2:
 34886                                  ;	STC 				  ; Set Carry again to flag error ;AN001;
 34887                                  ;	retn				  ;AN000;;EO. return with error
 34888                                  ;					  ;AN000;
 34889                                  ;exist_open:				  ;AN000;
 34890                                  ;	test	byte [SS:FSHARING],-1	  ;AN000;;EO. server doscall?;smr;SS Override
 34891                                  ;	jz	short noserver		  ;AN000;;EO. no
 34892                                  ;	MOV	CL,CH			  ;AN000;;EO. cl=search attribute
 34893                                  ;noserver:
 34894                                  ;	call	_$Open2			  ;AN000;;EO. do open
 34895                                  ;	JNC	short ext_ok		  ;AN000;;EO.
 34896                                  ;	CMP	byte [SS:EXTOPEN_ON],0	  ;AN000;;EO. error and IFS call;smr;SS Override
 34897                                  ;	JZ	short error_return2	  ;AN000;;EO. return with error
 34898                                  ;local_extopen:
 34899                                  ;	CMP	AX,error_file_not_found   ;AN000;;EO. file not found error
 34900                                  ;	JNZ	short error_return2	  ;AN000;;EO. no,
 34901                                  ;	TEST	word [SS:EXTOPEN_FLAG],ext_nexists_create;AN000;;EO. want to fail;smr;SS Override
 34902                                  ;	JNZ	short do_creat		  ;AN000;;EO. yes
 34903                                  ;	JMP	short extexit 		  ;AN000;;EO. yes
 34904                                  ;do_creat:
 34905                                  ;	MOV	CX,[SS:SAVE_CX]		  ;AN000;;EO. get ds:dx for file name;smr;SS Override
 34906                                  ;	LDS	SI,[SS:SAVE_SI]		  ;AN000;;EO. cx = attribute;smr;SS Override
 34907                                  ;	MOV	DX,SI			  ;AN000;;EO.
 34908                                  ;	call	_$CREAT			  ;AN000;;EO. do create
 34909                                  ;	JC	short extexit 		  ;AN000;;EO. error
 34910                                  ;	MOV	word [SS:EXTOPEN_FLAG],action_created_opened 
 34911                                  ;					  ;AN000;;EO. is created/opened;smr;SS Override
 34912                                  ;	JMP	SHORT setXAttr		  ;AN000;;EO. set XAs
 34913                                  ;
 34914                                  ;ext_ok:
 34915                                  ;	CMP	byte [SS:EXTOPEN_ON],0	  ;AN000;;EO. IFS call ?;smr;SS Override
 34916                                  ;	JZ	short ok_return		  ;AN000;;EO. yes
 34917                                  ;	MOV	[SS:EXTOPEN_FLAG],action_opened ;AN000;;EO.  opened;smr;SS Override
 34918                                  ;setXAttr:
 34919                                  ;	call	Get_User_Stack		  ;AN000;;EO.
 34920                                  ;	MOV	AX,[SS:EXTOPEN_FLAG]	  ;AN000;;EO.;smr;SS Override
 34921                                  ;	MOV	[SI+user_env.user_CX],AX  ;AN000;;EO. set action code for cx
 34922                                  ;	POP	AX			  ;AN000;;EO.
 34923                                  ;	MOV	[SI+user_env.user_AX],AX  ;AN000;;EO. set handle for ax
 34924                                  ;
 34925                                  ;ok_return:				  ;AN000;
 34926                                  ;	jmp	SYS_RET_OK		  ;AN000;;EO.
 34927                                  ;
 34928                                  ;extexit2:				  ;AN000; ERROR RECOVERY
 34929                                  ;	POP	BX			  ;AN000;EO. close the handle
 34930                                  ;	PUSH	AX			  ;AN000;EO. save error code from set XA
 34931                                  ;	CMP	word [SS:EXTOPEN_FLAG],action_created_opened 
 34932                                  ;					  ;AN000;EO. from create;smr;SS Override
 34933                                  ;	JNZ	short justopen		  ;AN000;EO.
 34934                                  ;	LDS	SI,[SS:SAVE_SI]		  ;AN000;EO. cx = attribute;smr;SS Override
 34935                                  ;	LDS	DX,[SI]			  ;AN000;EO.
 34936                                  ;	call	_$UNLINK 		  ;AN000;EO. delete the file
 34937                                  ;	JMP	SHORT reserror		  ;AN000;EO.
 34938                                  ;
 34939                                  ;justopen:				  ;AN000;
 34940                                  ;	call	$CLOSE			  ;AN000;EO. pretend never happend
 34941                                  ;reserror:				  ;AN000;
 34942                                  ;	POP	AX			  ;AN000;EO. restore error code from set XA
 34943                                  ;	JMP	SHORT extexit		  ;AN000;EO.
 34944                                  ;
 34945                                  ;ext_file_unfound:			  ;AN000;
 34946                                  ;	MOV	AX,error_file_not_found   ;AN000;EO.
 34947                                  ;	JMP	SHORT extexit		  ;AN000;EO.
 34948                                  ;ext_inval:				  ;AN000;
 34949                                  ;	MOV	AX,error_invalid_function ;AN000;EO.
 34950                                  ;extexit:
 34951                                  ;	jmp	SYS_RET_ERR		  ;AN000;EO.
 34952                                  
 34953                                  ;============================================================================
 34954                                  ; LOCK.ASM, MSDOS 6.0, 1991
 34955                                  ;============================================================================
 34956                                  ; 14/07/2018 - Retro DOS v3.0
 34957                                  
 34958                                  ;BREAK <$LockOper - Lock Calls>
 34959                                  
 34960                                  ;
 34961                                  ;   Assembler usage:
 34962                                  ;	    MOV     BX, Handle	       (DOS 3.3)
 34963                                  ;	    MOV     CX, OffsetHigh
 34964                                  ;	    MOV     DX, OffsetLow
 34965                                  ;	    MOV     SI, LengthHigh
 34966                                  ;	    MOV     DI, LengthLow
 34967                                  ;	    MOV     AH, LockOper
 34968                                  ;	    MOV     AL, Request
 34969                                  ;	    INT     21h
 34970                                  ;
 34971                                  ;   Error returns:
 34972                                  ;	    AX = error_invalid_handle
 34973                                  ;	       = error_invalid_function
 34974                                  ;	       = error_lock_violation
 34975                                  ;
 34976                                  ;   Assembler usage:
 34977                                  ;	    MOV     AX, 5C??	       (DOS 4.00)
 34978                                  ;
 34979                                  ;				    0? lock all
 34980                                  ;				    8? lock write
 34981                                  ;				    ?2 lock multiple
 34982                                  ;				    ?3 unlock multiple
 34983                                  ;				    ?4 lock/read
 34984                                  ;				    ?5 write/unlock
 34985                                  ;				    ?6 add (lseek EOF/lock/write/unlock)
 34986                                  ;	    MOV     BX, Handle
 34987                                  ;	    MOV     CX, count or size
 34988                                  ;	    LDS     DX, buffer
 34989                                  ;	    INT     21h
 34990                                  ;
 34991                                  ;   Error returns:
 34992                                  ;	    AX = error_invalid_handle
 34993                                  ;	       = error_invalid_function
 34994                                  ;	       = error_lock_violation
 34995                                  
 34996                                  _$LockOper:
 34997 00007296 3C01                    	CMP	AL,1
 34998 00007298 770C                    	JA	short lock_bad_func
 34999                                  
 35000 0000729A 57                      	PUSH	DI			       ; Save LengthLow
 35001 0000729B E862F5                  	call	SFFromHandle		       ; ES:DI -> SFT
 35002 0000729E 7311                    	JNC	short lock_do 		       ; have valid handle
 35003 000072A0 5F                      	POP	DI			       ; Clean stack
 35004                                  	;mov	al,6
 35005 000072A1 B006                    	mov	al,error_invalid_handle
 35006 000072A3 E963A4                  	jmp	SYS_RET_ERR
 35007                                  
 35008                                  lock_bad_func:
 35009                                  	;mov	byte [ss:EXTERR_LOCUS],1
 35010 000072A6 36C606[D102]01          	MOV	byte [SS:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus;smr;SS Override
 35011                                  	;mov	al,1
 35012 000072AC B001                    	mov	al,error_invalid_function
 35013 000072AE E958A4                  	jmp	SYS_RET_ERR
 35014                                  
 35015                                  	; MSDOS 6.0 
 35016                                  ; Align_buffer call has been deleted, since it corrupts the DTA (6/5/88) P5013
 35017                                  ; Dead code deleted, MD, 23 Mar 90
 35018                                  
 35019                                  lock_do:
 35020                                  	; MSDOS 3.3
 35021 000072B1 08C0                    	or	al,al
 35022 000072B3 58                      	pop	ax
 35023 000072B4 741E                    	jz	short DOS_Lock
 35024                                  DOS_Unlock:
 35025                                   	;test	word [es:di+5],8000h
 35026 000072B6 26F745050080            	test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 35027 000072BC 7409                    	JZ	short LOCAL_UNLOCK
 35028 000072BE 50                      	push    ax
 35029 000072BF B80B11                  	mov     ax,110Bh
 35030 000072C2 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - UNLOCK REGION OF FILE
 35031                                  			; BX = file handle, CX:DX = starting offset, SI = high word of size
 35032                                  			; STACK: WORD low word of size, ES:DI -> SFT for file
 35033                                  			; SFT DPB field -> DPB of drive containing file
 35034                                  			; Return: CF set error
 35035 000072C4 5B                      	pop     bx
 35036 000072C5 EB05                    	jmp     short ValChk
 35037                                  
 35038                                  LOCAL_UNLOCK:
 35039 000072C7 36FF1E[7800]            	Call	far [ss:JShare+(7*4)]	; 7 = clr_block ;smr;SS Override
 35040                                  ValChk:
 35041 000072CC 7303                    	JNC	short Lock_OK
 35042                                  lockerror:
 35043 000072CE E938A4                  	jmp	SYS_RET_ERR
 35044                                  Lock_OK:
 35045                                  	;MOV	AX,[SS:Temp_VAR] ;AN000;;MS. AX= number of bytes ;smr;SS Override
 35046 000072D1 E929A4                  	jmp	SYS_RET_OK
 35047                                  DOS_Lock:
 35048                                  	;test	word [es:di+5],8000h
 35049 000072D4 26F745050080            	test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 35050 000072DA 7407                    	JZ	short LOCAL_LOCK
 35051                                  	;CallInstall NET_XLock,MultNET,10
 35052 000072DC B80A11                  	mov     ax, 110Ah
 35053 000072DF CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - LOCK REGION OF FILE
 35054                                  			; BX = file handle, CX:DX = starting offset, SI = high word of size
 35055                                  			; STACK: WORD low word of size, ES:DI -> SFT
 35056                                  			; SFT DPB field -> DPB of drive containing file, SS = DOS CS
 35057                                  			; Return: CF set error
 35058 000072E1 EBE9                    	JMP	short ValChk
 35059                                  
 35060                                  LOCAL_LOCK:
 35061 000072E3 36FF1E[7400]            	Call	far [ss:JShare+(6*4)]	; 6 = Set_Block ;smr;SS Override
 35062 000072E8 EBE2                    	JMP	short ValChk
 35063                                  
 35064                                  ;lock_do:
 35065                                  ;	; MSDOS 6.0
 35066                                  ;	MOV	BX,AX				; save AX
 35067                                  ;	MOV	BP,Lock_Buffer			; get DOS LOCK buffer
 35068                                  ;	MOV	[BP+LockBuf.Lock_position],DX	; set low offset
 35069                                  ;	MOV	[BP+LockBuf.Lock_position+2],CX; set high offset
 35070                                  ;	POP	CX				; get low length
 35071                                  ;	MOV	[BP+LockBuf.Lock_length],CX	; set low length
 35072                                  ;	MOV	[BP+LockBuf.Lock_length+2],SI	; set high length
 35073                                  ;	MOV	CX,1				; one range
 35074                                  ;
 35075                                  ;;	PUSH	CS				;
 35076                                  ;;	POP	DS				; DS:DX points to
 35077                                  ;
 35078                                  ;	push	ss
 35079                                  ;	pop	ds
 35080                                  ;
 35081                                  ;	MOV	DX,BP				;   Lock_Buffer
 35082                                  ;	TEST	AL,Unlock_all			; function 1
 35083                                  ;	JNZ	short DOS_Unlock		; yes
 35084                                  ;	JMP	short DOS_Lock			; function 0
 35085                                  ;
 35086                                  ;DOS_Unlock:
 35087                                  ;	;test	word [es:di+5],8000h
 35088                                  ;	test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 35089                                  ;	JZ	short LOCAL_UNLOCK
 35090                                  ;	;CallInstall Net_Xlock,MultNET,10
 35091                                  ;	mov     ax, 110Bh
 35092                                  ;	int     2Fh	; Multiplex - NETWORK REDIRECTOR - UNLOCK REGION OF FILE
 35093                                  ;			; BX = file handle, CX:DX = starting offset, SI = high word of size
 35094                                  ;			; STACK: WORD low word of size, ES:DI -> SFT for file
 35095                                  ;			; SFT DPB field -> DPB of drive containing file
 35096                                  ;			; Return: CF set error
 35097                                  ;
 35098                                  ;	JMP	SHORT ValChk
 35099                                  ;LOCAL_UNLOCK:
 35100                                  ;	Call	far [ss:JShare+(7*4)]	; 7 = clr_block ;smr;SS Override
 35101                                  ;ValChk:
 35102                                  ;	JNC	short Lock_OK
 35103                                  ;lockerror:
 35104                                  ;	jmp	SYS_RET_ERR
 35105                                  ;Lock_OK:
 35106                                  ;	MOV	AX,[SS:Temp_VAR] ;AN000;;MS. AX= number of bytes ;smr;SS Override
 35107                                  ;	jmp	SYS_RET_OK
 35108                                  ;DOS_Lock:
 35109                                  ;	;test	word [es:di+5],8000h
 35110                                  ;	test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 35111                                  ;	JZ	short LOCAL_LOCK
 35112                                  ;	;CallInstall NET_XLock,MultNET,10
 35113                                  ;	mov     ax,110Ah
 35114                                  ;	int     2Fh	; Multiplex - NETWORK REDIRECTOR - LOCK REGION OF FILE
 35115                                  ;			; BX = file handle, CX:DX = starting offset, SI = high word of size
 35116                                  ;			; STACK: WORD low word of size, ES:DI -> SFT
 35117                                  ;			; SFT DPB field -> DPB of drive containing file, SS = DOS CS
 35118                                  ;			; Return: CF set error
 35119                                  ;	JMP	short ValChk
 35120                                  ;
 35121                                  ;LOCAL_LOCK:
 35122                                  ;	Call	far [ss:JShare+(6*4)]	; 6 = Set_Block ;smr;SS Override
 35123                                  ;	JMP	short ValChk
 35124                                  
 35125                                  ; 14/07/2018 - Retro DOS v3.0
 35126                                  ; LOC_CHECK
 35127                                  ;MSDOS6.0 (& MSDOS3.3)
 35128                                  
 35129                                  ; Inputs:
 35130                                  ;	Outputs of SETUP
 35131                                  ;	[USER_ID] Set
 35132                                  ;	[PROC_ID] Set
 35133                                  ; Function:
 35134                                  ;	Check for lock violations on local I/O
 35135                                  ;	Retries are attempted with sleeps in between
 35136                                  ; Outputs:
 35137                                  ;    Carry clear
 35138                                  ;	Operation is OK
 35139                                  ;    Carry set
 35140                                  ;	A lock violation detected
 35141                                  ; Outputs of SETUP preserved
 35142                                  
 35143                                  LOCK_CHECK:
 35144 000072EA 8B1E[1A00]              	MOV	BX,[RetryCount]	; Number retries
 35145                                  LockRetry:
 35146 000072EE 53                      	push	bx		; save regs
 35147                                  	;push	ax ; MSDOS 6.0
 35148                                  	;;MSDOS 3.3
 35149                                  	;;Call	far [JShare+(8*4)]
 35150 000072EF 36FF1E[7C00]            	Call	far [ss:JShare+(8*4)]	; 8 = chk_block
 35151                                  	;pop	ax ; MSDOS 6.0
 35152 000072F4 5B                      	pop	bx		; restrore regs
 35153 000072F5 7307                    	jnc	short lc_ret_label ; There are no locks (retnc)
 35154                                  LockN:
 35155 000072F7 E88FAC                  	call	Idle		; wait a while
 35156 000072FA 4B                      	DEC	BX		; remember a retry
 35157 000072FB 75F1                    	JNZ	short LockRetry	; more retries left...
 35158 000072FD F9                      	STC
 35159                                  lc_ret_label:
 35160 000072FE C3                      	retn
 35161                                  
 35162                                  ; 14/07/2018 - Retro DOS v3.0
 35163                                  ; LOCK_VIOLATION
 35164                                  ;MSDOS6.0 (& MSDOS3.3)
 35165                                  
 35166                                  ; Inputs:
 35167                                  ;	[THISDPB] set
 35168                                  ;	[READOP] indicates whether error on read or write
 35169                                  ; Function:
 35170                                  ;	Handle Lock violation on compatibility (FCB) mode SFTs
 35171                                  ; Outputs:
 35172                                  ;	Carry set if user says FAIL, causes error_lock_violation
 35173                                  ;	Carry clear if user wants a retry
 35174                                  ;
 35175                                  ; DS, ES, DI, CX preserved, others destroyed
 35176                                  
 35177                                  LOCK_VIOLATION:
 35178 000072FF 1E                      	PUSH	DS
 35179 00007300 06                      	PUSH	ES
 35180 00007301 57                      	PUSH	DI
 35181 00007302 51                      	PUSH	CX
 35182                                  	;mov	ax,21h
 35183 00007303 B82100                  	MOV	AX,error_lock_violation
 35184                                  	;mov	byte [ALLOWED],18h
 35185 00007306 C606[F702]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 35186 0000730B C42E[2405]              	LES	BP,[THISDPB]
 35187 0000730F BF0100                  	MOV	DI,1		; Fake some registers
 35188 00007312 89F9                    	MOV	CX,DI
 35189                                  	;mov	dx,[es:bp+11]
 35190 00007314 268B560B                	MOV	DX,[ES:BP+DPB.FIRST_SECTOR]
 35191 00007318 E831E5                  	call	HARDERR
 35192 0000731B 59                      	POP	CX
 35193 0000731C 5F                      	POP	DI
 35194 0000731D 07                      	POP	ES
 35195 0000731E 1F                      	POP	DS
 35196 0000731F 3C01                    	CMP	AL,1
 35197 00007321 74DB                    	jz	short lc_ret_label ; 1 = retry, carry clear
 35198 00007323 F9                      	STC
 35199 00007324 C3                      	retn
 35200                                  
 35201                                  ; 14/07/2018 - Retro DOS v3.0
 35202                                  
 35203                                  ;	do a retz to return error
 35204                                  
 35205                                  CheckShare:
 35206                                  	; MSDOS 6.0
 35207                                  	;push	ds			;smr;
 35208                                  	;;getdseg <ds>			; ds -> dosdata
 35209                                  	;push	cs
 35210                                  	;pop	ds
 35211                                  	;CMP	byte [fShare],0
 35212                                  	;pop	ds			;smr;
 35213                                  	;retn
 35214                                  	
 35215                                  	; MSDOS 3.3
 35216 00007325 2E803E[B102]00          	cmp	byte [cs:fShare],0
 35217 0000732B C3                      	retn
 35218                                  
 35219                                  ;============================================================================
 35220                                  ; SHARE.ASM, MSDOS 6.0, 1991
 35221                                  ;============================================================================
 35222                                  ; 14/07/2018 - Retro DOS v3.0
 35223                                  
 35224                                  ; SHARE_CHECK
 35225                                  
 35226                                  ; Inputs:
 35227                                  ;       [THISSFT] Points to filled in local file/device SFT for new
 35228                                  ;               instance of file sf_mode ALWAYS has mode (even on FCB SFTs)
 35229                                  ;       [WFP_START] has full path of name
 35230                                  ;       [USER_ID] Set
 35231                                  ;       [PROC_ID] Set
 35232                                  ; Function:
 35233                                  ;       Check for sharing violations on local file/device access
 35234                                  ; Outputs:
 35235                                  ;    Carry clear
 35236                                  ;       Sharing approved
 35237                                  ;    Carry set
 35238                                  ;       A sharing violation detected
 35239                                  ;           AX is error code
 35240                                  ; USES    ALL but DS
 35241                                  
 35242                                  SHARE_CHECK:
 35243                                  	;call	far [JShare+(1*4)] 	; MSDOS 3.3
 35244 0000732C 36FF1E[6000]            	call	far [ss:JShare+(1*4)]	; 1 = MFT_Enter
 35245                                  shchk_retn:
 35246 00007331 C3                      	retn
 35247                                  
 35248                                  ; SHARE_VIOLATION
 35249                                  
 35250                                  ; Inputs:
 35251                                  ;       [THISDPB] Set
 35252                                  ;       AX has error code
 35253                                  ; Function:
 35254                                  ;       Handle Sharing errors
 35255                                  ; Outputs:
 35256                                  ;       Carry set if user says FAIL, causes error_sharing_violation
 35257                                  ;       Carry clear if user wants a retry
 35258                                  ;
 35259                                  ; DS, ES, DI preserved, others destroyed
 35260                                  
 35261                                  SHARE_VIOLATION:
 35262 00007332 1E                      	PUSH    DS
 35263 00007333 06                      	PUSH	ES
 35264 00007334 57                      	PUSH    DI
 35265 00007335 C606[1005]00            	MOV     byte [READOP],0		; All share errors are reading
 35266                                  	;mov	byte [ALLOWED],18h
 35267 0000733A C606[F702]18            	MOV     byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 35268 0000733F C42E[2405]              	LES     BP,[THISDPB]
 35269 00007343 BF0100                  	MOV     DI,1			; Fake some registers
 35270 00007346 89F9                    	MOV     CX,DI
 35271                                  	;mov	dx,[es:bp+16]
 35272 00007348 268B5610                	MOV     DX,[ES:BP+DPB.DIR_SECTOR]
 35273 0000734C E8FDE4                  	call	HARDERR
 35274 0000734F 5F                      	POP     DI
 35275 00007350 07                      	POP	ES
 35276 00007351 1F                      	POP     DS
 35277 00007352 3C01                    	CMP     AL,1
 35278 00007354 74DB                    	jz	short shchk_retn	; 1 = retry, carry clear
 35279 00007356 F9                      	STC
 35280 00007357 C3                      	retn
 35281                                  
 35282                                  ;   ShareEnd - terminate sharing info on a particular SFT/UID/PID.  This does
 35283                                  ;       NOT perform a close, it merely asserts that the sharing information
 35284                                  ;       for the SFT/UID/PID may be safely released.
 35285                                  ;
 35286                                  ;   Inputs:     ES:DI points to an SFT
 35287                                  ;   Outputs:    None
 35288                                  ;   Registers modified: all except DS,ES,DI
 35289                                  
 35290                                  ShareEnd:
 35291                                  	;call	far [JShare+(2*4)]	; MSDOS 3.3
 35292 00007358 36FF1E[6400]            	call	far [ss:JShare+(2*4)]	; 2 = MFTClose
 35293 0000735D C3                      	retn
 35294                                  
 35295                                  ;Break <ShareEnter - attempt to enter a node into the sharing set>
 35296                                  
 35297                                  ;
 35298                                  ;   ShareEnter - perform a retried entry of a nodde into the sharing set.  If
 35299                                  ;   the max number of retries is exceeded, we notify the user via int 24.
 35300                                  ;
 35301                                  ;   Inputs:     ThisSFT points to the SFT
 35302                                  ;               WFP_Start points to the WFP
 35303                                  ;   Outputs:    Carry clear => successful entry
 35304                                  ;               Carry set => failed system call
 35305                                  ;   Registers modified: all
 35306                                  
 35307                                  ShareEnter:
 35308 0000735E 51                      	push	cx
 35309                                  retry:
 35310 0000735F 8B0E[1A00]              	mov     cx,[RetryCount]
 35311                                  attempt:
 35312 00007363 C43E[3605]              	les     di,[THISSFT]		; grab sft
 35313 00007367 31C0                    	XOR     AX,AX
 35314                                   	;mov	[es:di+51],ax
 35315 00007369 26894533                	MOV     [ES:DI+SF_ENTRY.sf_MFT],AX ; indicate free SFT
 35316 0000736D 51                      	push	cx
 35317 0000736E E8BBFF                  	call    SHARE_CHECK             ; attempt to enter into the sharing set
 35318 00007371 59                      	pop	cx
 35319 00007372 730A                    	jnc	short done		; success, let the user see this
 35320 00007374 E812AC                  	call	Idle                    ; wait a while
 35321 00007377 E2EA                    	loop    attempt                 ; go back for another attempt
 35322 00007379 E8B6FF                  	call    SHARE_VIOLATION         ; signal the problem to the user
 35323 0000737C 73E1                    	jnc	short retry		; user said to retry, go do it
 35324                                  done:
 35325 0000737E 59                      	pop	cx
 35326 0000737F C3                      	retn
 35327                                  
 35328                                  ;----------------------------------------------------------------------------
 35329                                  
 35330                                  ;align 2 ; 05/09/2018 (Error!)
 35331                                  
 35332                                  align 16 ; 08/09/2018 (OK.)
 35333                                  
 35334                                  ; 06/08/2018 - Retro DOS v3.0
 35335                                  
 35336                                  ;============================================================================
 35337                                  ; MSINIT.ASM
 35338                                  ;============================================================================
 35339                                  ;
 35340                                  ; MAIN ENTRY FOR DOS INITIALIZATION
 35341                                  ;
 35342                                  	; 15/07/2018 - RetroDOS v3.0
 35343                                  	; (MSDOS 3.3, IBMDOS.COM, 1987)
 35344                                  
 35345                                  SYSBUF:
 35346                                  IRETT:
 35347 00007380 CF                      	iret
 35348                                  
 35349                                  	; 07/07/2018 - Retro DOS v3.0
 35350                                  	; Retro DOS v2.0 - 03/03/2018
 35351                                  DOSINIT:
 35352                                  	; Far call from SYSINIT
 35353                                  	; DX = Memory size in paragraphs
 35354                                  	; DS:SI = [DEVICE_LIST] (SYSINIT.S) 
 35355                                  	;	  (Retro DOS v2.0, 16/03/2018)
 35356 00007381 FA                              CLI
 35357 00007382 FC                              CLD
 35358 00007383 2E8916[F202]                    MOV     [CS:ENDMEM],DX
 35359 00007388 2E8926[6804]                    MOV     [CS:INITSP],SP
 35360 0000738D 2E8C16[6A04]                    MOV     [CS:INITSS],SS
 35361 00007392 8CC8                            MOV     AX,CS
 35362 00007394 8ED0                            MOV     SS,AX
 35363 00007396 BC[8476]                        MOV     SP,INITSTACK
 35364                                  	; 08/08/2018
 35365 00007399 368C1E[4A00]            	MOV     [SS:NULDEV+2],DS
 35366 0000739E 368936[4800]                    MOV     [SS:NULDEV],SI	; DS:SI Points to CONSOLE Device
 35367                                  	; 15/07/2018
 35368                                  	; MSDOS 3.3 (IBMDOS.COM, 1987)
 35369                                  	; (Set INT 2Ah handler address to an 'IRET')
 35370 000073A3 1E                      	push    ds
 35371 000073A4 31C0                    	xor     ax,ax
 35372 000073A6 8ED8                    	mov     ds,ax
 35373 000073A8 B8[8073]                	mov     ax,IRETT
 35374 000073AB A3A800                  	mov     [2Ah*4],ax ; 00A8h
 35375 000073AE 8CC8                    	mov     ax,cs
 35376 000073B0 A3AA00                  	mov     [(2Ah*4)+2],ax ; 00AAh
 35377 000073B3 1F                      	pop     ds
 35378                                  	;
 35379 000073B4 E81C02                          CALL    CHARINIT	; initialize console driver
 35380                                  
 35381 000073B7 56                              PUSH	SI		; save pointer to header	
 35382 000073B8 0E                      	PUSH	CS
 35383 000073B9 07                              POP	ES
 35384                                          ; 07/07/2018
 35385 000073BA BF[9E00]                	MOV     DI,SFTABL+SFT.SFTable	; Point to sft 0
 35386 000073BD B80300                          MOV     AX,3
 35387 000073C0 AB                              STOSW           	; Refcount
 35388 000073C1 FEC8                            DEC     AL
 35389 000073C3 AB                              STOSW           	; Access rd/wr, compatibility
 35390 000073C4 30C0                            XOR     AL,AL
 35391 000073C6 AA                              STOSB           	; attribute
 35392                                  	;mov	al,0C3h
 35393 000073C7 B0C3                    	mov	al,devid_device_EOF|devid_device|ISCIN|ISCOUT
 35394 000073C9 AB                      	STOSw			; flags
 35395 000073CA 89F0                            mov	ax,si
 35396 000073CC AB                              stosw			; device pointer in devptr	
 35397 000073CD 8CD8                            mov	ax,ds
 35398 000073CF AB                      	stosw
 35399 000073D0 31C0                    	xor	ax,ax	; 0
 35400 000073D2 AB                      	stosw			; firclus
 35401 000073D3 AB                      	stosw			; time
 35402 000073D4 AB                      	stosw			; date
 35403 000073D5 48                      	dec	ax	; -1
 35404 000073D6 AB                      	stosw			; size
 35405 000073D7 AB                      	stosw
 35406 000073D8 40                      	inc	ax	; 0
 35407 000073D9 AB                      	stosw			; position
 35408 000073DA AB                      	stosw
 35409                                  	;add	di,7
 35410 000073DB 83C707                  	add	di,SF_ENTRY.sf_name - SF_ENTRY.sf_cluspos
 35411                                  				; point at name
 35412                                  	;add	si,10
 35413 000073DE 83C60A                  	add	si,SYSDEV.NAME	; sdevname
 35414                                  				; point to name
 35415 000073E1 B90400                  	mov	cx,4
 35416 000073E4 F3A5                    	rep	movsw		; name
 35417 000073E6 B103                    	mov	cl,3
 35418 000073E8 B020                    	mov	al," "
 35419 000073EA F3AA                    	rep	stosb		; extension
 35420 000073EC 5E                      	POP	SI		; get back pointer to header
 35421                                  
 35422                                  				; mark device as CON I/O
 35423                                  	; 15/07/2018
 35424                                          ;OR	BYTE [SI+4],ISCIN|ISCOUT ; or byte [si+4],3
 35425 000073ED 804C0403                	OR	BYTE [SI+SYSDEV.ATT],ISCIN|ISCOUT
 35426                                  	; 12/03/2018
 35427 000073F1 368936[3200]            	MOV     [SS:BCON],SI
 35428 000073F6 368C1E[3400]                    MOV     [SS:BCON+2],DS
 35429                                  
 35430                                  CHAR_INIT_LOOP:
 35431 000073FB C534                            LDS     SI,[SI]				; AUX device
 35432 000073FD E8D301                          CALL    CHARINIT
 35433                                         	;15/07/2018
 35434                                  	;test	byte [SI+4],8
 35435 00007400 F6440408                	TEST    BYTE [SI+SYSDEV.ATT],ISCLOCK
 35436 00007404 74F5                            JZ      SHORT CHAR_INIT_LOOP
 35437                                  	; 12/03/2018
 35438 00007406 368936[2E00]                    MOV     [SS:BCLOCK],SI
 35439 0000740B 368C1E[3000]                    MOV     [SS:BCLOCK+2],DS
 35440 00007410 BD[8676]                        MOV     BP,MEMSTRT			; ES:BP points to DPB
 35441                                  PERDRV:
 35442                                  	;lds	si,[SI+SYSDEV.NEXT] ; 15/07/2018
 35443 00007413 C534                            LDS     SI,[SI]				; Next device
 35444 00007415 83FEFF                          CMP     SI,-1
 35445 00007418 7468                    	JZ      SHORT CONTINIT
 35446                                  
 35447 0000741A E8B601                          CALL    CHARINIT
 35448                                  
 35449                                  	; Retro DOS v2.0 - 16/03/2018 (NOTE for 'CHARINIT' return):
 35450                                  	; [CALLUNIT] = Number of drives for (Disk) Block Dev Driver ([DRVMAX])
 35451                                  	;           (..When the command is 'DSK$INIT', as in 'CHARINIT')
 35452                                  	; [CALLBPB] = [DEVCALL.COUNT] = Address of the BPB (DEVCALL offset 18) 
 35453                                  	; (REF: MSDOS 3.3 MSBIO2.ASM, MSDATA.INC, MSDISK.ASM, MSBIO1.ASM)
 35454                                  	; (.. !DSK$IN' in MSBIO1.ASM)
 35455                                  	; DEVCALL.MEDIA = CALLUNIT (DEVCALL offset 13)
 35456                                  
 35457                                          ; 15/07/2018
 35458                                  	;test	word [SI+4],8000h		; DEVTYP
 35459 0000741D F744040080                      TEST    word [SI+SYSDEV.ATT],DEVTYP
 35460 00007422 75EF                    	JNZ     SHORT PERDRV			; Skip any other character devs
 35461                                  
 35462 00007424 368A0E[1303]                    MOV	CL,[SS:CALLUNIT] ; 12/03/2018
 35463 00007429 30ED                    	XOR     CH,CH
 35464                                          ; 07/07/2018
 35465                                  	;MOV	[SI+10],CL		; Number of units in name field
 35466 0000742B 884C0A                  	mov	[si+SYSDEV.NAME],cl	; sdevname        
 35467 0000742E 368A16[4600]            	MOV     DL,[SS:NUMIO]	; 15/03/2018
 35468 00007433 30F6                    	XOR     DH,DH
 35469 00007435 36000E[4600]            	ADD	[SS:NUMIO],CL	; 12/03/2018
 35470 0000743A 1E                      	PUSH    DS
 35471 0000743B 56                              PUSH    SI
 35472 0000743C 36C51E[1803]            	LDS	BX,[SS:CALLBPB]	; 12/03/2018
 35473                                  PERUNIT:
 35474 00007441 8B37                            MOV     SI,[BX]                 ; DS:SI Points to BPB
 35475 00007443 43                              INC     BX
 35476 00007444 43                              INC     BX                      ; On to next BPB
 35477                                  	;07/07/2018
 35478                                          ;mov	[ES:BP+DPB.DRIVE],dl
 35479 00007445 26885600                	MOV     [ES:BP],DL
 35480                                  	;MOV	[ES:BP+1],DH
 35481 00007449 26887601                	MOV	[ES:BP+DPB.UNIT],DH
 35482 0000744D 53                              PUSH    BX
 35483 0000744E 51                              PUSH    CX
 35484 0000744F 52                              PUSH    DX
 35485                                  
 35486                                          ;invoke	$SETDPB
 35487 00007450 E839A9                          CALL	_$SETDPB
 35488                                  
 35489                                  	; 07/07/2018
 35490                                  	;MOV	AX,[ES:BP+2]
 35491 00007453 268B4602                	mov	ax,[ES:BP+DPB.SECTOR_SIZE]
 35492                                          ; 12/03/2018
 35493 00007457 363B06[3600]            	CMP	AX,[SS:MAXSEC]
 35494 0000745C 7604                    	JBE     SHORT NOTMAX
 35495 0000745E 36A3[3600]              	MOV	[SS:MAXSEC],AX
 35496                                  NOTMAX:
 35497 00007462 5A                              POP     DX
 35498 00007463 59                              POP     CX
 35499 00007464 5B                              POP     BX
 35500 00007465 8CD8                            MOV     AX,DS                   ; save segment of bpb array
 35501 00007467 5E                              POP     SI
 35502 00007468 1F                              POP     DS
 35503                                  					; ds:si -> device header
 35504                                  					; store it in the corresponding dpb
 35505                                  	; 07/07/2018
 35506                                          ;MOV	[ES:BP+18],SI
 35507 00007469 26897612                	mov	[ES:BP+DPB.DRIVER_ADDR],si
 35508                                          ;MOV	[ES:BP+20],DS
 35509 0000746D 268C5E14                	mov	[ES:BP+DPB.DRIVER_ADDR+2],ds
 35510                                  
 35511 00007471 1E                              PUSH    DS			; save pointer to device header
 35512 00007472 56                              PUSH    SI
 35513 00007473 FEC6                            INC     DH			; inc unit #
 35514 00007475 FEC2                            INC     DL			; inc drive #
 35515 00007477 8ED8                            MOV     DS,AX			; restore segment of BPB array
 35516                                          ;add	bp,32 ;15/07/2018
 35517 00007479 83C520                  	ADD     BP,DPBSIZ		; advance pointer to next dpb
 35518 0000747C E2C3                    	LOOP    PERUNIT			; process all units in each driver
 35519                                          
 35520 0000747E 5E                      	POP     SI			; restore pointer to device header
 35521 0000747F 1F                              POP     DS
 35522 00007480 EB91                    	JMP	SHORT PERDRV		; process all drivers in chain
 35523                                  
 35524                                  CONTINIT:
 35525 00007482 0E                              PUSH    CS
 35526 00007483 1F                              POP     DS
 35527                                  ; Calculate true address of buffers, FATs, free space
 35528 00007484 89EF                            MOV     DI,BP           ; First byte after current DPBs
 35529 00007486 8B2E[3600]                      MOV     BP,[MAXSEC]
 35530 0000748A B8[8073]                        MOV     AX,SYSBUF	; = IRETT (15/07/2018)
 35531                                          ; 07/07/2018
 35532                                  	;MOV	[BUFFSTRT],AX
 35533 0000748D 01E8                            ADD     AX,BP           ; One I/O buffer
 35534 0000748F 83C010                          ADD     AX,BUFINSIZ ; = 16
 35535 00007492 A3[2600]                        MOV     [DPBHEAD],AX	; True start of DPBs
 35536 00007495 89C2                            MOV     DX,AX
 35537 00007497 81EA[8073]                      SUB     DX,SYSBUF	; = IRETT (15/07/2018)
 35538 0000749B 89D5                            MOV     BP,DX
 35539 0000749D 01FD                            ADD     BP,DI           ; Allocate buffer space
 35540                                  	;sub	bp,918 ; = ADJFAC for current DOSINIT (07/07/2018)
 35541 0000749F 81ED0603                        SUB     BP,ADJFAC       ; True address of free memory
 35542 000074A3 55                              PUSH    BP ; ###		
 35543 000074A4 BF[8676]                        MOV     DI,MEMSTRT	; Current start of DPBs
 35544                                  	;add	di,24
 35545 000074A7 83C718                          ADD     DI,DPB.NEXT_DPB	; Point at dpb.next_dpb field
 35546 000074AA 8A0E[4600]                      MOV     CL,[NUMIO]
 35547 000074AE 30ED                            XOR     CH,CH
 35548                                  TRUEDPBAD:
 35549                                  	;add	ax,32
 35550 000074B0 83C020                          ADD     AX,DPBSIZ       ; Compute address of next DPB
 35551 000074B3 AB                              STOSW                   ; Set the link to next DPB
 35552 000074B4 83C71E                          ADD     DI,DPBSIZ-2     ; Point at next address
 35553 000074B7 E2F7                            LOOP    TRUEDPBAD
 35554 000074B9 83EF20                          SUB     DI,DPBSIZ       ; Point at last dpb.next_dpb field
 35555 000074BC B8FFFF                          MOV     AX,-1
 35556 000074BF AB                              STOSW                   ; End of list
 35557 000074C0 83C50F                          ADD     BP,15           ; True start of free space (round up to segment)
 35558                                  	; 15/07/2018
 35559                                  	;MOV	CL,4
 35560                                          ;SHR	BP,CL           ; Number of segments for DOS resources
 35561 000074C3 D1DD                            rcr	bp,1
 35562 000074C5 B103                    	mov	cl,3
 35563 000074C7 D3ED                    	shr	bp,cl
 35564                                  	;
 35565 000074C9 8CCA                    	MOV     DX,CS
 35566 000074CB 01EA                            ADD     DX,BP           ; First free segment
 35567                                  	
 35568                                  	; 06/07/2019
 35569                                  	;MOV	BX,15 ; 0Fh
 35570                                  	;MOV	CX,[ENDMEM]
 35571                                  
 35572 000074CD 8CCD                            MOV     BP,CS
 35573                                  
 35574                                  ; BP has segment of DOS (whether to load high or run in place)
 35575                                  ; DX has program segment (whether after DOS or overlaying DOS)
 35576                                  ; CX has size of memory in paragraphs (reduced by DOS size if HIGHMEM)
 35577                                          
 35578                                  	;MOV	[ENDMEM],CX ; 06/07/2019
 35579                                          
 35580 000074CF 8EC5                    	MOV     ES,BP
 35581 000074D1 268C06[4A03]                    MOV     [ES:DSKCHRET+3],ES ; mov [ES:DOSEG_INIT],es
 35582 000074D6 31C0                            XOR     AX,AX
 35583 000074D8 8ED8                            MOV     DS,AX
 35584 000074DA 8EC0                            MOV     ES,AX
 35585                                  	;mov	di,82h 
 35586 000074DC BF8200                          MOV     DI,INTBASE+2
 35587                                  	; 15/07/2018
 35588 000074DF 89E8                            MOV     AX,BP
 35589                                  	; Set INT 0 (divide by zero) handler
 35590 000074E1 C7060000[E557]          	mov     word [0],DIVOV
 35591 000074E7 A30200                  	mov     word [2],ax  ; = cs
 35592                                  	; Set INT 20h to INT 28h handler segments 
 35593                                  	;mov	cx,17
 35594 000074EA B111                    	mov	cl,17 ; 06/07/2019
 35595 000074EC F3AB                    	rep	stosw
 35596                                  	; DI points to INT 29h vector, offset
 35597 000074EE 83C706                  	add	di,6 
 35598                                  	; DI points to INT 2Ah vector, segment
 35599                                  	;Set  INT 2Ah to INT 3Fh handler segments		
 35600                                  	;mov	cx,43
 35601 000074F1 B12B                    	mov	cl,43 ; 06/07/2019
 35602                                  	
 35603 000074F3 F3AB                    	rep	stosw
 35604                                  	; DI points to INT 40h vector, segment
 35605 000074F5 BF8000                  	mov	di,80h
 35606                                  	; Set INT 20h to INT 28h vectors to their default handler offsets
 35607 000074F8 B8[9114]                	mov	ax,_IRET
 35608                                  	;mov	cx,9
 35609 000074FB B109                    	mov	cl,9 ; 06/07/2019
 35610                                  iset1:
 35611 000074FD AB                      	stosw
 35612 000074FE 83C702                  	add	di,2
 35613 00007501 E2FA                    	loop	iset1
 35614 00007503 83C704                  	add	di,4
 35615                                  	; Set INT 2Ah to INT 3Fh vectors to their default handler offsets
 35616                                  	;mov	cx,22
 35617 00007506 B116                    	mov	cl,22 ; 06/07/2019
 35618                                  iset2:
 35619 00007508 AB                      	stosw
 35620 00007509 83C702                  	add	di,2
 35621 0000750C E2FA                    	loop	iset2
 35622                                  	
 35623 0000750E 89E8                    	mov	ax,bp
 35624                                  	; Set	INT 2Fh handler offset to INT2F
 35625 00007510 C706BC00[C117]          	mov	word [2Fh*4],INT2F  ; 00BCh
 35626                                  
 35627                                  	; set up entry point call at vectors 30-31h
 35628                                  
 35629 00007516 C606C000EA                      MOV     BYTE [ENTRYPOINT],mi_Long_JMP
 35630 0000751B C706C100[9214]                  MOV     WORD [ENTRYPOINT+1],CALL_ENTRY
 35631 00007521 A3C300                          MOV    [ENTRYPOINT+3],AX
 35632                                  
 35633                                  	; Set	INT 20h, 21h, 22h, 23h handler offsets
 35634 00007524 C7068000[8B14]                  MOV     WORD [addr_int_abort],QUIT
 35635 0000752A C7068400[AA14]                  MOV     WORD [addr_int_command],COMMAND
 35636 00007530 C70688000001                    MOV     WORD [addr_int_terminate],100H
 35637 00007536 89168A00                        MOV     [addr_int_terminate+2],DX
 35638                                  	; 15/07/2018 - Retro DOS v3.0
 35639 0000753A C7069400[7316]                  MOV     WORD [addr_int_disk_read],ABSDRD   ; INT 25h
 35640 00007540 C7069800[B616]                  MOV     WORD [addr_int_disk_write],ABSDWRT ; INT 26h
 35641 00007546 C7069C00[9A64]                  MOV     WORD [addr_int_keep_process],STAY_RESIDENT ; INT 27h
 35642                                  
 35643                                  	; 15/07/2018
 35644                                  	; MSDOS 3.3 (IBMDOS.COM, 1987)
 35645 0000754C 0E                      	push	cs
 35646 0000754D 1F                      	pop	ds
 35647 0000754E 0E                      	push	cs
 35648 0000754F 07                      	pop	es
 35649                                  	; initialize the jump table for the sharer..
 35650                                  	;	(MSDOS 6.0, MSINIT.ASM, 1991, "patch_misc_segments")
 35651                                  	; MSDOS 3.3
 35652                                  	; (set JSharer jump table segments)
 35653 00007550 BF[5C00]                	mov	di,JShare
 35654 00007553 8CC8                    	mov	ax,cs
 35655 00007555 B90F00                  	mov	cx,15
 35656                                  iset3:
 35657 00007558 83C702                  	add	di,2
 35658 0000755B AB                      	stosw
 35659 0000755C E2FA                    	loop	iset3
 35660                                  
 35661                                  	; MSDOS 2.11, MSDOS 3.3
 35662 0000755E B8[5803]                        MOV     AX,INITBLOCK
 35663 00007561 83C00F                          ADD	AX,0Fh		; round to a paragraph
 35664 00007564 B104                            MOV     CL,4
 35665 00007566 D3E8                            SHR     AX,CL
 35666 00007568 8CDF                            MOV     DI,DS
 35667 0000756A 01C7                            ADD     DI,AX
 35668 0000756C 47                              INC     DI
 35669 0000756D 893E[DE02]                      MOV     [CurrentPDB],DI
 35670 00007571 55                              PUSH    BP ; ##
 35671 00007572 52                              PUSH    DX ; #		; Save COMMAND address
 35672 00007573 A1[F202]                        MOV     AX,[ENDMEM]
 35673 00007576 89FA                            MOV     DX,DI
 35674                                  
 35675                                          ;invoke	SETMEM          ; Basic Header
 35676 00007578 E844A9                  	CALL	SETMEM
 35677 0000757B 0E                              PUSH	CS
 35678 0000757C 1F                              POP	DS
 35679                                  	;mov	di,24
 35680 0000757D BF1800                          MOV     DI,PDB.JFN_TABLE
 35681 00007580 31C0                            XOR     AX,AX
 35682 00007582 AB                              STOSW
 35683 00007583 AA                              STOSB                   ; 0,1 and 2 are CON device
 35684 00007584 B0FF                            MOV     AL,0FFH
 35685                                  	;mov	cx,17
 35686                                  	;MOV     CX,FILPERPROC - 3 ; 17
 35687 00007586 B111                    	mov	cl,FILPERPROC-3 ; 06/07/2019
 35688 00007588 F3AA                            REP     STOSB           ; Rest are unused
 35689 0000758A 0E                              PUSH	CS
 35690 0000758B 07                              POP	ES
 35691 0000758C 8C1E[2C00]                      MOV     [SFT_ADDR+2],DS	; Must be set to print messages
 35692                                  
 35693                                  	; 15/07/2018 - Retro DOS v3.0
 35694                                  	; MSDOS 3.3
 35695                                  	; (set country cdpg table segments)
 35696 00007590 BE[FD0F]                	mov	si,COUNTRY_CDPG ; country_tab
 35697                                  	;mov	[es:si+79],es	; Ucase table segment
 35698                                  	;mov	[es:si+84],es	; File ucase table segment
 35699                                  	;mov	[es:si+89],es	; File char list segment
 35700                                  	;mov	[es:si+94],es	; Collate table segment
 35701                                  	;mov	[es:si+123],es	; Monocase routine segment
 35702 00007593 8C444F                  	mov	[si+79],es
 35703 00007596 8C4454                  	mov	[si+84],es
 35704 00007599 8C4459                  	mov	[Si+89],es
 35705 0000759C 8C445E                  	mov	[si+94],es
 35706 0000759F 8C447B                  	mov	[si+123],es
 35707                                  	; (set SysInitTable -sysinitvars and country_cdpg- segments)
 35708 000075A2 BE[3B0F]                	mov     si,SysInitTable
 35709                                  	;;mov	[es:si+6], es
 35710                                  	;;mov	[es:si+2], es
 35711                                  	;mov	[es:si+SYSI_EXT.Country_Tab+2],es
 35712                                  	;mov	[es:si+SYSI_EXT.SysInitVars+2],es
 35713 000075A5 8C4406                  	mov	[si+SYSI_EXT.Country_Tab+2],es
 35714 000075A8 8C4402                  	mov	[si+SYSI_EXT.SysInitVars+2],es
 35715                                  
 35716                                  	; (set FastOpen table FastRet segment)
 35717 000075AB BE[430F]                	mov     si,FastTable
 35718                                  	;mov	[es:si+4],es
 35719                                  	;;mov	[es:si+8],es
 35720 000075AE 8C4404                  	mov     [si+4],es
 35721                                  	;mov	[si+8],es
 35722                                  	; IBMDOS.COM (Offset 7259h), IBM PC DOS 3.30
 35723 000075B1 C706[8F0F]7258          	mov	word [FETCHI_TAG],5872h ; ? ('Xr')
 35724                                  
 35725                                  	; 10/08/2018 - Retro DOS v3.0
 35726                                  
 35727                                  	; MSDOS 2.11 (Retro DOS v2.0), MSDOS 3.3
 35728                                  
 35729                                  ; After this points the char device functions for CON will work for
 35730                                  ; printing messages
 35731                                  
 35732                                  	;;IF	NOT IBM
 35733                                  	;;IF	NOT ALTVECT
 35734                                  	;MOV	SI,HEADER
 35735                                  	;;invoke OUTMES
 35736                                  	;CALL	OUTMES
 35737                                  	;;PUSH	CS		; Outmes stomps on segments
 35738                                  	;;POP	DS
 35739                                  	;;PUSH	CS
 35740                                  	;;POP	ES
 35741                                  	;;ENDIF
 35742                                  	;;ENDIF
 35743                                  
 35744                                  ; Move the FATs into position
 35745 000075B7 5A                              POP     DX ; #			; Restore COMMAND address
 35746 000075B8 5D                              POP     BP ; ##
 35747 000075B9 59                              POP     CX ; ###		; True address of free memory
 35748 000075BA BE[8676]                        MOV     SI,MEMSTRT		; Place to move DPBs from
 35749 000075BD 8B3E[2600]                      MOV     DI,[DPBHEAD]		; Place to move DPBs to
 35750 000075C1 29F9                            SUB     CX,DI                   ; Total length of DPBs
 35751 000075C3 39F7                            CMP     DI,SI
 35752 000075C5 7607                            JBE     SHORT MOVJMP		; Are we moving to higher or 
 35753                                  					; lower memory?
 35754 000075C7 49                              DEC     CX                      ; Move backwards to higher memory
 35755 000075C8 01CF                            ADD     DI,CX
 35756 000075CA 01CE                            ADD     SI,CX
 35757 000075CC 41                              INC     CX
 35758 000075CD FD                              STD
 35759                                  MOVJMP:
 35760 000075CE 8EC5                            MOV     ES,BP
 35761 000075D0 E9998E                          JMP     MOVDPB
 35762                                  
 35763                                  CHARINIT:
 35764                                  	; 07/07/2018 - Retro DOS v3.0
 35765 000075D3 36C606[0603]1A                  MOV	BYTE [SS:DEVCALL_REQLEN],DINITHL
 35766 000075D9 36C606[0703]00                  MOV	BYTE [SS:DEVCALL_REQUNIT],0
 35767 000075DF 36C606[0803]00                  MOV	BYTE [SS:DEVCALL_REQFUNC],DEVINIT
 35768 000075E5 36C706[0903]0000                MOV	WORD [SS:DEVCALL_REQSTAT],0
 35769 000075EC 06                              PUSH	ES
 35770 000075ED 53                              PUSH	BX
 35771 000075EE 50                              PUSH	AX
 35772 000075EF BB[0603]                        MOV	BX,DEVCALL
 35773 000075F2 0E                              PUSH	CS
 35774 000075F3 07                              POP	ES
 35775 000075F4 E807D9                          CALL	DEVIOCALL2	
 35776 000075F7 58                      	POP	AX
 35777 000075F8 5B                              POP	BX
 35778 000075F9 07                              POP	ES
 35779 000075FA C3                              RETN
 35780                                  
 35781 000075FB 90                      align 2
 35782                                          ;;DB	80H DUP(?)
 35783                                  	;TIMES 	64 dw 0 ; 05/09/2018
 35784                                  	; 10/08/2018
 35785                                  	;times	128 dw 0
 35786                                  	; 12/08/2018
 35787                                  	;times	132 dW 0 ; ADJFAC = 918 ; 08/09/2018 (OK.)
 35788                                  	; 08/09/2018 
 35789 000075FC 00<rep 88h>             	times	136 db 0 ; ADJFAC = 790	; 08/09/2018 (OK.) 
 35790                                  
 35791                                  INITSTACK:	; INITSTACK LABEL BYTE
 35792 00007684 0000                    	DW	0 ; DW ?
 35793                                  
 35794                                  ;MEMSTRT LABEL	WORD
 35795                                  MEMSTRT EQU	$
 35796                                  
 35797                                  ADJFAC  EQU     MEMSTRT-SYSBUF
 35798                                  
 35799 00007686 00                      	db 0
 35800 00007687 00                      	db 0
 35801 00007688 00                      	db 0
 35802 00007689 00                      	db 0
 35803 0000768A 00                      	db 0
 35804 0000768B 00                      	db 0
 35805 0000768C 00                      	db 0
 35806 0000768D 00                      	db 0
 35807 0000768E 00                      	db 0
 35808 0000768F 00                      	db 0
 35809                                  PcDosVersion:
 35810 00007690 1A4040402323232050-     	db 1Ah,'@@@### PC-DOS Version 3.30',0Dh,0Ah
 35810 00007699 432D444F5320566572-
 35810 000076A2 73696F6E20332E3330-
 35810 000076AB 0D0A               
 35811 000076AD 1A00                    	db 1Ah,0
 35812                                  
 35813                                          ;do_ext
 35814                                  ;LAST	ENDS
