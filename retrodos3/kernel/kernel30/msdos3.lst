     1                                  ; ****************************************************************************
     2                                  ; MSDOS3.BIN (MSDOS 3.3 Kernel) - RETRO DOS v3.0 by ERDOGAN TAN
     3                                  ; ----------------------------------------------------------------------------
     4                                  ; Last Update: 10/07/2024 (BugFix)
     5                                  ;	BugFix: 22/01/2024
     6                                  ;	BugFix: 16/01/2024
     7                                  ;	BugFix: 22/11/2022
     8                                  ;	BugFix: 20/05/2019
     9                                  ;	Optimization: 06-22/07/2019
    10                                  ;	Completion: 10/09/2018
    11                                  ; ----------------------------------------------------------------------------
    12                                  ; Beginning: 24/02/2018 (Retro DOS 2.0), 07/07/2018 (Retro DOS 3.0)
    13                                  ; ----------------------------------------------------------------------------
    14                                  ; Assembler: NASM version 2.11 (2.15)
    15                                  ; ----------------------------------------------------------------------------
    16                                  ;	    ((nasm msdos3.s -l msdos3.lst -o MSDOS3.BIN)) 	
    17                                  ; ----------------------------------------------------------------------------
    18                                  ; Derived from 'msdos2.s' file of Retro DOS 2.0 source code (04/05/2018)
    19                                  ; ----------------------------------------------------------------------------
    20                                  ; Derived from 'MSCODE.ASM' file of MSDOS 2.0 (IBM PCDOS v2.0) source code
    21                                  ; by Microsoft, 25/08/1983 (DOSLINK - 'MSDOS.ASM')
    22                                  ; ****************************************************************************
    23                                  ; main file: 'retrodos3.s'
    24                                  ; incbin 'MSDOS3.BIN' ; (DOSGROUP CODE SEGMENT)
    25                                  ; ----------------------------------------------------------------------------
    26                                  ; 07/07/2018 - Erdogan Tan
    27                                  ; (Note: I have not got MSDOS 3.3 kernel source files; so, I need to continue
    28                                  ; by using disassembled MSDOS.SYS -v3.3- and MSDOS 6.0 kernel source files.)
    29                                  ; ----------------------------------------------------------------------------
    30                                  ; MSDOS 6.0 Kernel source files:
    31                                  ;	MSDATA.ASM, 
    32                                  ; 		(MSHEAD.ASM, MSCONST.ASM,CONST2.ASM, MS_DATA.ASM,
    33                                  ;		DOSTAB.ASM, LMSTUB.ASM, WPATCH.INC)
    34                                  ;	MSTABLE.ASM, MSCODE.ASM, MSDOSME.ASM (DOSMES.INC), TIME.ASM,
    35                                  ;	GETSET.ASM, PARSE.ASM, MISC.ASM, MISC2.ASM, CRIT.ASM, CPMIO.ASM,
    36                                  ;	CPMIO2.ASM, FCBIO.ASM, FCBIO2.ASM, SEARCH.ASM, PATH.ASM, IOCTL.ASM,
    37                                  ;	DELETE.ASM, RENAME.ASM, FINFO.ASM, DUP.ASM, CREATE.ASM, OPEN.ASM,
    38                                  ;	DINFO.ASM, ISEARCH.ASM, BUF.ASM, ABORT.ASM,CLOSE.ASM, DIRCALL.ASM,
    39                                  ;	DISK.ASM, DISK2.ASM, DISK3.ASM, DIR.ASM, DIR2.ASM, DEV.ASM,
    40                                  ;	MKNODE.ASM, ROM.ASM, FCB.ASM, MSCTRLC.ASM, FAT.ASM, MSPROC.ASM
    41                                  ;	ALLOC.ASM, SRVCALL.ASM, UTIL.ASM, MACRO.ASM, MACRO2.ASM, HANDLE.ASM
    42                                  ;	FILE.ASM, LOCK.ASM, ROMFIND.ASM, SHARE.ASM, MSINIT.ASM, ORIGIN.ASM
    43                                  ;
    44                                  ; MSDOS 2.0 Kernel source files:
    45                                  ; 	MSDOS.ASM (STDSW.ASM + MSHEAD.ASM + MSDATA.ASM)
    46                                  ;	MSCODE.ASM
    47                                  ;	DOSMES.ASM ... STDIO.ASM, TIME.ASM, XENIX.ASM, XENIX2.ASM
    48                                  
    49                                  ;============================================================================
    50                                  ; DOSLINK
    51                                  ;============================================================================
    52                                  ;msdos mscode dosmes misc getset dircall alloc dev dir +
    53                                  ;disk fat rom stdbuf stdcall stdctrlc stdfcb stdproc +
    54                                  ;stdio time xenix xenix2
    55                                  
    56                                  ;============================================================================
    57                                  ; This MSDOS source code is verified & modified by using IDA Pro Disassembler
    58                                  ; output in TASM syntax (July 2018 -> NASM syntax) [ IBMDOS.COM, 17/03/1987 ]
    59                                  ;============================================================================
    60                                  ;
    61                                  ; ###########################################################################
    62                                  ; #	This file is generated by The Interactive Disassembler (IDA)	    #
    63                                  ; #	Copyright (c) 2010 by Hex-Rays SA, <support@hex-rays.com>	    #
    64                                  ; #			 Licensed to: Freeware version			    #
    65                                  ; ###########################################################################
    66                                  ;
    67                                  ; Input	MD5   :	EF2ADCA1CB3882118FD247DD4C672C81
    68                                  
    69                                  ; ---------------------------------------------------------------------------
    70                                  ; File Name   :	D:\Documents and Settings\Erdoðan Tan\Desktop\MSDOS33.BIN
    71                                  ; Format      :	Binary file
    72                                  ; Base Address:	0000h Range: 0000h - 75CFh Loaded length: 75CFh
    73                                  ;============================================================================
    74                                  ; MSDOS33.BIN = IBMDOS.COM, 17/03/1987, 30159 bytes (IBM PC DOS 3.30 kernel)
    75                                  
    76                                  ;============================================================================
    77                                  ; MSDOS.ASM
    78                                  ;============================================================================
    79                                  
    80                                  ;TITLE   Standard MSDOS
    81                                  ;NAME    MSDOS_2
    82                                  
    83                                  ; Number of disk I/O buffers
    84                                  
    85                                  ;	INCLUDE STDSW.ASM
    86                                  ;       INCLUDE MSHEAD.ASM
    87                                  ;       INCLUDE MSDATA.ASM
    88                                  
    89                                  ;	END
    90                                  
    91                                  ;============================================================================
    92                                  ; STDSW.ASM
    93                                  ;============================================================================
    94                                  
    95                                  TRUE    EQU     0FFFFH
    96                                  FALSE   EQU     ~TRUE ; NOT TRUE
    97                                  
    98                                  ; Use the switches below to produce the standard Microsoft version or the IBM
    99                                  ; version of the operating system
   100                                  ;MSVER   EQU     false
   101                                  ;IBM     EQU     true
   102                                  ;WANG    EQU     FALSE
   103                                  ;ALTVECT EQU     FALSE
   104                                  
   105                                  ; Set this switch to cause DOS to move itself to the end of memory
   106                                  ;HIGHMEM EQU     FALSE
   107                                  
   108                                  ;	IF      IBM
   109                                  ESCCH   EQU     0			; character to begin escape seq.
   110                                  CANCEL  EQU     27			;Cancel with escape
   111                                  TOGLINS EQU     TRUE			;One key toggles insert mode
   112                                  TOGLPRN EQU     TRUE			;One key toggles printer echo
   113                                  ZEROEXT EQU     TRUE
   114                                  ;       ELSE
   115                                  ;       IF      WANG			;Are we assembling for WANG?
   116                                  ;ESCCH   EQU     1FH			;Yes. Use 1FH for escape character
   117                                  ;       ELSE
   118                                  ;ESCCH   EQU     1BH
   119                                  ;       ENDIF
   120                                  ;CANCEL  EQU     "X"-"@"		;Cancel with Ctrl-X
   121                                  ;TOGLINS EQU     WANG			;Separate keys for insert mode on
   122                                  					;and off if not WANG
   123                                  ;TOGLPRN EQU     FALSE			;Separate keys for printer echo on
   124                                  					;and off
   125                                  ;ZEROEXT EQU     TRUE
   126                                  ;        ENDIF
   127                                  
   128                                  ;============================================================================
   129                                  ; MSHEAD.ASM
   130                                  ;============================================================================
   131                                  
   132                                  ;--------------------------------------------------------------
   133                                  ; TITLE   MSHEAD.ASM -- MS-DOS DEFINITIONS
   134                                  ;--------------------------------------------------------------
   135                                  
   136                                  ; MS-DOS High-performance operating system for the 8086  version 1.28
   137                                  ;        by Microsoft MSDOS development group:
   138                                  ;           Tim Paterson (Ret.)
   139                                  ;           Aaron Reynolds
   140                                  ;           Nancy Panners (Parenting)
   141                                  ;           Mark Zbikowski
   142                                  ;           Chris Peters (BIOS) (ret.)
   143                                  
   144                                  ; ****************** Revision History *************************
   145                                  ;          >> EVERY change must noted below!! <<
   146                                  ;
   147                                  ; 0.34 12/29/80 General release, updating all past customers
   148                                  ; 0.42 02/25/81 32-byte directory entries added
   149                                  ; 0.56 03/23/81 Variable record and sector sizes
   150                                  ; 0.60 03/27/81 Ctrl-C exit changes, including register save on user stack
   151                                  ; 0.74 04/15/81 Recognize I/O devices with file names
   152                                  ; 0.75 04/17/81 Improve and correct buffer handling
   153                                  ; 0.76 04/23/81 Correct directory size when not 2^N entries
   154                                  ; 0.80 04/27/81 Add console input without echo, Functions 7 & 8
   155                                  ; 1.00 04/28/81 Renumber for general release
   156                                  ; 1.01 05/12/81 Fix bug in `STORE'
   157                                  ; 1.10 07/21/81 Fatal error trapping, NUL device, hidden files, date & time,
   158                                  ;               RENAME fix, general cleanup
   159                                  ; 1.11 09/03/81 Don't set CURRENT BLOCK to 0 on open; fix SET FILE SIZE
   160                                  ; 1.12 10/09/81 Zero high half of CURRENT BLOCK after all (CP/M programs don't)
   161                                  ; 1.13 10/29/81 Fix classic "no write-through" error in buffer handling
   162                                  ; 1.20 12/31/81 Add time to FCB; separate FAT from DPT; Kill SMALLDIR; Add
   163                                  ;               FLUSH and MAPDEV calls; allow disk mapping in DSKCHG; Lots
   164                                  ;               of smaller improvements
   165                                  ; 1.21 01/06/82 HIGHMEM switch to run DOS in high memory
   166                                  ; 1.22 01/12/82 Add VERIFY system call to enable/disable verify after write
   167                                  ; 1.23 02/11/82 Add defaulting to parser; use variable escape character Don't
   168                                  ;               zero extent field in IBM version (back to 1.01!)
   169                                  ; 1.24 03/01/82 Restore fcn. 27 to 1.0 level; add fcn. 28
   170                                  ; 1.25 03/03/82 Put marker (00) at end of directory to speed searches
   171                                  ; 1.26 03/03/82 Directory buffers searched as a circular queue, current buffer
   172                                  ;               is searched first when possible to minimize I/O
   173                                  ;      03/03/82 STORE routine optimized to tack on partial sector tail as
   174                                  ;               full sector write when file is growing
   175                                  ;      03/09/82 Multiple I/O buffers
   176                                  ;      03/29/82 Two bugs:  Delete all case resets search to start at beginning
   177                                  ;               of directory (infinite loop possible otherwise), DSKRESET
   178                                  ;               must invalidate all buffers (disk and directory).
   179                                  ; 1.27 03/31/82 Installable device drivers
   180                                  ;                 Function call 47 - Get pointer to device table list
   181                                  ;                 Function call 48 - Assign CON AUX LIST
   182                                  ;      04/01/82 Spooler interrupt (INT 28) added.
   183                                  ; 1.28 04/15/82 DOS retructured to use ASSUMEs and PROC labels around system
   184                                  ;               call entries.  Most CS relative references changed to SS
   185                                  ;               relative with an eye toward putting a portion of the DOS in
   186                                  ;               ROM.  DOS source also broken into header, data and code pieces
   187                                  ;      04/15/82 GETDMA and GETVECT calls added as 24 and 32.  These calls
   188                                  ;               return the current values.
   189                                  ;      04/15/82 INDOS flag implemented for interrupt processing along with
   190                                  ;               call to return flag location (call 29)
   191                                  ;      04/15/82 Volume ID attribute added
   192                                  ;      04/17/82 Changed ABORT return to user to a long ret from a long jump to
   193                                  ;               avoid a CS relative reference.
   194                                  ;      04/17/82 Put call to STATCHK in dispatcher to catch ^C more often
   195                                  ;      04/20/82 Added INT int_upooler into loop ^S wait
   196                                  ;      04/22/82 Dynamic disk I/O buffer allocation and call to manage them
   197                                  ;               call 49.
   198                                  ;      04/23/82 Added GETDSKPTDL as call 50, similar to GETFATPT(DL), returns
   199                                  ;               address of DPB
   200                                  ;      04/29/82 Mod to WRTDEV to look for ^C or ^S at console input when
   201                                  ;               writting to console device via file I/O.  Added a console
   202                                  ;               output attribute to devices.
   203                                  ;      04/30/82 Call to en/dis able ^C check in dispatcher Call 51
   204                                  ;      04/30/82 Code to allow assignment of func 1-12 to disk files as well
   205                                  ;               as devices....  pipes, redirection now possible
   206                                  ;      04/30/82 Expanded GETLIST call to 2.0 standard
   207                                  ;      05/04/82 Change to INT int_fatal_abort callout int HARDERR.  DOS SS
   208                                  ;               (data segment) stashed in ES, INT int_fatal_abort routines must
   209                                  ;               preserve ES.  This mod so HARDERR can be ROMed.
   210                                  ; 1.29 06/01/82 Installable block and character devices as per 2.0 spec
   211                                  ;      06/04/82 Fixed Bug in CLOSE regarding call to CHKFATWRT.  It got left
   212                                  ;               out back about 1.27 or so (oops).  ARR
   213                                  ; 1.30 06/07/82 Directory sector buffering added to main DOS buffer queue
   214                                  ; 1.40 06/15/82 Tree structured directories.  XENIX Path Parser MKDIR CHDIR
   215                                  ;               RMDIR Xenix calls
   216                                  ; 1.41 06/13/82 Made GETBUFFR call PLACEBUF
   217                                  ; 1.50 06/17/82 FATs cached in buffer pool, get FAT pointer calls disappear
   218                                  ;               Frees up lots of memory.
   219                                  ; 1.51 06/24/82 BREAKDOWN modified to do EXACT one sector read/write through
   220                                  ;               system buffers
   221                                  ; 1.52 06/30/82 OPEN, CLOSE, READ, WRITE, DUP, DUP2, LSEEK implemented
   222                                  ; 1.53 07/01/82 OPEN CLOSE mod for Xenix calls, saves and gets remote dir
   223                                  ; 1.54 07/11/82 Function calls 1-12 make use of new 2.0 PDB. Init code
   224                                  ;               changed to set file handle environment.
   225                                  ; 2.00 08/01/82 Number for IBM release
   226                                  ;      01/19/83 No environ bug in EXEC
   227                                  ;      01/19/83 MS-DOS OEM INT 21 extensions (SET_OEM_HANDLER)
   228                                  ;      01/19/83 Performance bug fix in cooked write to NUL
   229                                  ;      01/27/83 Growcnt fixed for 32-bits
   230                                  ;      01/27/83 Find-first problem after create
   231                                  ; 2.01 02/17/83 International DOS
   232                                  ; 2.11 08/12/83 Dos split into several more modules for assembly on
   233                                  ;               an IBM PC
   234                                  ; 08/07/2018 - Retro DOS v3.0 by Erdogan Tan
   235                                  ; (MSHEAD.ASM, MSDOS6.0, 1991) - mshead.asm 1.1 85/04/10 -
   236                                  ; 2.10 03/09/83 Start of NETWORK support
   237                                  ;		New Buffer structure
   238                                  ;		New Sytem file table structure
   239                                  ;		FCB moved to internal representation
   240                                  ;		DOS re-organized
   241                                  ; 2.11 04/21/83 Continuation of 2.10, preliminary Network
   242                                  ;		device interface.
   243                                  ; 2.11 08/12/83 Dos split into several more modules for assembly on
   244                                  ;               an IBM PC
   245                                  ; 2.50 09/12/83 More network stuff
   246                                  ;
   247                                  ; *************************************************************
   248                                  
   249                                  ; ----------------------------------------------------------------------------
   250                                  ; EQUATES
   251                                  
   252                                  ; Interrupt Entry Points:
   253                                  
   254                                  ; INTBASE:      ABORT
   255                                  ; INTBASE+4:    COMMAND
   256                                  ; INTBASE+8:    BASE EXIT ADDRESS
   257                                  ; INTBASE+C:    CONTROL-C ABORT
   258                                  ; INTBASE+10H:  FATAL ERROR ABORT
   259                                  ; INTBASE+14H:  BIOS DISK READ
   260                                  ; INTBASE+18H:  BIOS DISK WRITE
   261                                  ; INTBASE+1CH:  END BUT STAY RESIDENT (NOT SET BY DOS)
   262                                  ; INTBASE+20H:  SPOOLER INTERRUPT
   263                                  ; INTBASE+40H:  Long jump to CALL entry point
   264                                  
   265                                  ENTRYPOINTSEG   EQU     0CH
   266                                  MAXDIF          EQU     0FFFH
   267                                  SAVEXIT         EQU     10
   268                                  ;08/07/2018 - Retro DOS v3.0
   269                                  ;WRAPOFFSET	EQU	0FEF0h  ; (MISC.ASM, MSDOS 6.0, 1991)
   270                                  
   271                                         ; INCLUDE DOSSYM.ASM
   272                                         ; INCLUDE DEVSYM.ASM
   273                                  
   274                                  ; SUBTTL ^C, terminate/abort/exit and Hard error actions
   275                                  ; PAGE
   276                                  ; There are three kinds of context resets that can occur during normal DOS
   277                                  ; functioning:  ^C trap, terminate/abort/exit, and Hard-disk error.  These must
   278                                  ; be handles in a clean fashion that allows nested executions along with the
   279                                  ; ability to trap one's own errors.
   280                                  ;
   281                                  ; ^C trap - A process may elect to catch his own ^Cs.  This is achieved by
   282                                  ;           using the $GET_INTERRUPT_VECTOR and $SET_INTERRUPT_VECTOR as
   283                                  ;           follows:
   284                                  ;
   285                                  ;           $GET_INTERRUPT_VECTOR for INT int_ctrl_c
   286                                  ;           Save it in static memory.
   287                                  ;           $SET_INTERRUPT_VECTOR for INT int_ctrl_c
   288                                  ;
   289                                  ;           The interrupt service routine must preserve all registers and
   290                                  ;           return carry set iff the operation is to be aborted (via abort
   291                                  ;           system call), otherwise, carry is reset and the operation is
   292                                  ;           restarted.  ANY DEVIATION FROM THIS WILL LEAD TO UNRELIABLE
   293                                  ;           RESULTS.
   294                                  ;
   295                                  ;           To restore original ^C processing (done on terminate/abort/exit),
   296                                  ;           restore INT int_ctrl_c from the saved vector.
   297                                  ;
   298                                  ; Hard-disk error -- The interrupt service routine for INT int_fatal_abort must
   299                                  ;           also preserve registers and return one of three values in AL: 0 and
   300                                  ;           1 imply retry and ignore (???)  and 2 indicates an abort.  The user
   301                                  ;           himself is not to issue the abort, rather, the dos will do it for
   302                                  ;           him by simulating a normal abort/exit system call.  ANY DEVIATION
   303                                  ;           FROM THIS WILL LEAD TO UNRELIABLE RESULTS.
   304                                  ;
   305                                  ; terminate/abort/exit -- The user may not, under any circumstances trap an
   306                                  ;           abort call.  This is reserved for knowledgeable system programs.
   307                                  ;           ANY DEVIATION FROM THIS WILL LEAD TO UNRELIABLE RESULTS.
   308                                  
   309                                  ;SUBTTL SEGMENT DECLARATIONS
   310                                  
   311                                  ; The following are all of the segments used.  They are declared in the order
   312                                  ; that they should be placed in the executable
   313                                  
   314                                  ;
   315                                  ; segment ordering for MSDOS
   316                                  ;
   317                                  
   318                                  ;START           SEGMENT BYTE PUBLIC 'START'
   319                                  ;START           ENDS
   320                                  
   321                                  ;CONSTANTS       SEGMENT BYTE PUBLIC 'CONST'
   322                                  ;CONSTANTS       ENDS
   323                                  
   324                                  ;DATA            SEGMENT WORD PUBLIC 'DATA'
   325                                  ;DATA            ENDS
   326                                  
   327                                  ;CODE            SEGMENT BYTE PUBLIC 'CODE'
   328                                  ;CODE            ENDS
   329                                  
   330                                  ;LAST            SEGMENT BYTE PUBLIC 'LAST'
   331                                  ;LAST            ENDS
   332                                  
   333                                  ;DOSGROUP    GROUP   CODE,CONSTANTS,DATA,LAST
   334                                  
   335                                  ; The following segment is defined such that the data/const classes appear
   336                                  ; before the code class for ROMification
   337                                  
   338                                  ;START		SEGMENT BYTE PUBLIC 'START'
   339                                  ;           	ASSUME  CS:DOSGROUP,DS:NOTHING,ES:NOTHING,SS:NOTHING
   340                                  ;		JMP     DOSINIT
   341                                  ;START		ENDS
   342                                  
   343                                  ;============================================================================
   344                                  ; DOSSYM.ASM
   345                                  ;============================================================================
   346                                  
   347                                  ;<Control character definitions>
   348                                  
   349                                  c_DEL       EQU     7Fh         ;    ASCII rubout or delete previous char
   350                                  c_BS        EQU     08h         ; ^H ASCII backspace
   351                                  c_CR        EQU     0Dh         ; ^M ASCII carriage return
   352                                  c_LF        EQU     0Ah         ; ^J ASCII linefeed
   353                                  c_ETB       EQU     17h         ; ^W ASCII end of transmission
   354                                  c_NAK       EQU     15h         ; ^U ASCII negative acknowledge
   355                                  c_ETX       EQU     03h         ; ^C ASCII end of text
   356                                  c_HT        EQU     09h         ; ^I ASCII tab
   357                                  
   358                                  ;============================================================================
   359                                  ; BPB.INC, MSDOS 3.3, 1987
   360                                  ;============================================================================
   361                                  ; 09/07/2018 - Retro DOS v3.0
   362                                  
   363                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   364                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   365                                  ;									   ;
   366                                  
   367                                  ; BIOS PARAMETER BLOCK DEFINITION
   368                                  ; THIS STRUCTURE IS USED TO BUILD A FULL DPB
   369                                  
   370                                  struc BPBLOCK
   371 00000000 ????                    .SECSZ: resw 1		; Size in bytes of physical sector
   372 00000002 ??                      .CLUS:  resb 1		; Sectors/Alloc unit
   373 00000003 ????                    .RES:   resw 1		; Number of reserved sectors
   374 00000005 ??                      .FTCNT: resb 1		; Number of FATs
   375 00000006 ????                    .DRCNT: resw 1		; Number of directory entries
   376 00000008 ????                    .SCCNT: resw 1		; Total number of sectors
   377 0000000A ??                      .MEDIA: resb 1		; Media descriptor byte
   378 0000000B ????                    .FTSEC:	resw 1		; Number of sectors taken up by one FAT
   379                                  .size:
   380                                  endstruc
   381                                  
   382                                  ; 09/07/2018 - Retro DOS v3.0
   383                                  ; (BPB.INC, MSDOS 6.0, 1991)
   384                                  
   385                                  ;**	BIOS PARAMETER BLOCK DEFINITION
   386                                  ;
   387                                  ;	The BPB contains information about the disk structure.  It dates
   388                                  ;	back to the earliest FAT systems and so FAT information is
   389                                  ;	intermingled with physical driver information.
   390                                  ;
   391                                  ;	A boot sector contains a BPB for its device; for other disks
   392                                  ;	the driver creates a BPB.  DOS keeps copies of some of this
   393                                  ;	information in the DPB.
   394                                  ;
   395                                  ;	The BDS structure contains a BPB within it. 
   396                                  
   397                                  struc A_BPB
   398 00000000 ????                    .BPB_BYTESPERSECTOR:	resw	1
   399 00000002 ??                      .BPB_SECTORSPERCLUSTER:	resb	1
   400 00000003 ????                    .BPB_RESERVEDSECTORS:	resw	1
   401 00000005 ??                      .BPB_NUMBEROFFATS:	resb	1
   402 00000006 ????                    .BPB_ROOTENTRIES: 	resw	1
   403 00000008 ????                    .BPB_TOTALSECTORS:	resw	1
   404 0000000A ??                      .BPB_MEDIADESCRIPTOR:	resb	1
   405 0000000B ????                    .BPB_SECTORSPERFAT:	resw	1
   406 0000000D ????                    .BPB_SECTORSPERTRACK:	resw	1
   407 0000000F ????                    .BPB_HEADS:		resw	1
   408 00000011 ????                    .BPB_HIDDENSECTORS:	resw	1
   409 00000013 ????                    			resw	1
   410 00000015 ????                    .BPB_BIGTOTALSECTORS:	resw	1
   411 00000017 ????                    			resw	1
   412 00000019 ????????????            			resb	6	; NOTE:  many times these
   413                                  ;					; 	 6 bytes are omitted
   414                                  ;					;	 when BPB manipulations
   415                                  ;					;	 are performed!
   416                                  .size:
   417                                  endstruc
   418                                  
   419                                  ;                                                                          ;
   420                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   421                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   422                                  
   423                                  ;============================================================================
   424                                  ; BUFFER.INC, MSDOS 3.3, 1987
   425                                  ;============================================================================
   426                                  ; 09/07/2018 - Retro DOS v3.0
   427                                  
   428                                  ; <Disk I/O Buffer Header>
   429                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   430                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   431                                  ;                                                                          ;
   432                                  
   433                                  ; Field definition for I/O buffer information
   434                                  
   435                                  struc BUFFINFO
   436 00000000 ????????                .buf_link:	resd 1		; Pointer to next buffer in list
   437 00000004 ??                      .buf_ID:	resb 1		; Drive of buffer (bit 7 = 0)
   438                                  				; SFT table index (bit 7 = 1)
   439                                  				; = FFH if buffer free
   440 00000005 ??                      .buf_flags:	resb 1		; Bit 7 = 1 if Remote file buffer
   441                                  				;	= 0 if Local device buffer
   442                                  				; Bit 6 = 1 if buffer dirty
   443                                  				; Bit 5 = Reserved
   444                                  				; Bit 4 = Search bit (bit 7 = 1)
   445                                  				; Bit 3 = 1 if buffer is DATA
   446                                  				; Bit 2 = 1 if buffer is DIR
   447                                  				; Bit 1 = 1 if buffer is FAT
   448                                  				; Bit 0 = Reserved
   449 00000006 ????                    .buf_sector:	resw 1		; Sector number of buffer (bit 7 = 0)
   450                                  ; The next two items are often refed as a word (bit 7 = 0)
   451 00000008 ??                      .buf_wrtcnt:	resb 1		; For FAT sectors, # times sector written out
   452 00000009 ??                      .buf_wrtcntinc:	resb 1		; "   "     "   , # sectors between each write
   453 0000000A ????????                .buf_DPB:	resd 1		; Pointer to drive parameters
   454 0000000E ????                    .buf_fill:	resw 1		; How full buffer is (bit 7 = 1)
   455                                  .size:
   456                                  endstruc
   457                                  
   458                                  %define buf_offset dword [buf_sector]
   459                                  				;For bit 7 = 1, this is the byte
   460                                  				;offset of the start of the buffer in
   461                                  				;the file pointed to by buf_ID.  Thus
   462                                  				;the buffer starts at location
   463                                  				;buf_offset in the file and contains
   464                                  				;buf_fill bytes.
   465                                  
   466                                  BUFINSIZ        EQU     BUFFINFO.size
   467                                  
   468                                  buf_Free	EQU	0FFh	; buf_id of free buffer
   469                                  
   470                                  ;Flag byte masks
   471                                  buf_isnet	EQU	10000000B
   472                                  buf_dirty	EQU	01000000B
   473                                  ;***
   474                                  buf_visit	EQU	00100000B
   475                                  ;***
   476                                  buf_snbuf	EQU	00010000B
   477                                  
   478                                  buf_isDATA	EQU	00001000B
   479                                  buf_isDIR	EQU	00000100B
   480                                  buf_isFAT	EQU	00000010B
   481                                  buf_type_0	EQU	11110001B	; AND sets type to "none"
   482                                  
   483                                  buf_NetID	EQU	BUFINSIZ
   484                                  
   485                                  ;                                                                          ;
   486                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   487                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   488                                  
   489                                  ; <User stack inside of system call>
   490                                  ; Location of user registers relative user stack pointer
   491                                  
   492                                  struc	user_env   ; user_environ
   493 00000000 ????                    .user_AX: resw 1
   494 00000002 ????                    .user_BX: resw 1
   495 00000004 ????                    .user_CX: resw 1
   496 00000006 ????                    .user_DX: resw 1
   497 00000008 ????                    .user_SI: resw 1
   498 0000000A ????                    .user_DI: resw 1
   499 0000000C ????                    .user_BP: resw 1
   500 0000000E ????                    .user_DS: resw 1
   501 00000010 ????                    .user_ES: resw 1
   502 00000012 ????                    .user_IP: resw 1
   503 00000014 ????                    .user_CS: resw 1
   504 00000016 ????                    .user_F:  resw 1
   505                                  .size:
   506                                  endstruc
   507                                  
   508                                  ; 09/07/2018 - Retro DOS v3.0
   509                                  ; (VECTOR.INC, MSDOS 3.3, 1987)
   510                                  ; ----------------------------------------------------------------------------
   511                                  
   512                                  ; <interrupt definitions>
   513                                  
   514                                  INTTAB          EQU     20H
   515                                  INTBASE         EQU     4 * INTTAB
   516                                  ENTRYPOINT      EQU     INTBASE+40H
   517                                  
   518                                  ;	IF      ALTVECT
   519                                  ;ALTTAB  EQU     0F0H
   520                                  ;ALTBASE EQU     4 * ALTTAB
   521                                  ;	ENDIF
   522                                  
   523                                  ;
   524                                  ; interrupt assignments
   525                                  ;
   526                                  ;	IF	NOT ALTVECT
   527                                  int_abort	    EQU     INTTAB	; abort process
   528                                  int_command	    EQU     int_abort+1 ; call MSDOS
   529                                  int_terminate	    EQU     int_abort+2 ; int to terminate address
   530                                  int_ctrl_c	    EQU     int_abort+3 ; ^c trapper
   531                                  int_fatal_abort     EQU     int_abort+4 ; hard disk error
   532                                  int_disk_read	    EQU     int_abort+5 ; logical sector disk read
   533                                  int_disk_write	    EQU     int_abort+6 ; logical sector disk write
   534                                  int_keep_process    EQU     int_abort+7 ; terminate program and stay
   535                                  					; resident
   536                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   537                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   538                                  ;									   ;
   539                                  int_spooler	    EQU     int_abort+8 ; spooler call
   540                                  int_fastcon	    EQU     int_abort+9 ; fast CON interrupt
   541                                  int_IBM 	    EQU     int_abort+10; critical section maintenance
   542                                  ;									   ;
   543                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   544                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   545                                  ;	ELSE
   546                                  ;int_abort	    EQU     INTTAB	; abort process
   547                                  ;int_command	    EQU     int_abort+1 ; call MSDOS
   548                                  ;int_terminate	    EQU     ALTTAB	; int to terminate address
   549                                  ;int_ctrl_c	    EQU     int_terminate+1 ; ^c trapper
   550                                  ;int_fatal_abort    EQU     int_terminate+2 ; hard disk error
   551                                  ;int_disk_read	    EQU     int_abort+5 ; logical sector disk read
   552                                  ;int_disk_write	    EQU     int_abort+6 ; logical sector disk write
   553                                  ;int_keep_process   EQU     int_abort+7 ; terminate program and stay resident
   554                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   555                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   556                                  ;									   ;
   557                                  ;int_spooler	    EQU     int_terminate+3 ; spooler call
   558                                  ;int_fastcon	    EQU     int_abort+9 ; fast CON interrupt
   559                                  ;									   ;
   560                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   561                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   562                                  ;	ENDIF
   563                                  
   564                                  addr_int_abort		EQU    4 * int_abort
   565                                  addr_int_command	EQU    4 * int_command
   566                                  addr_int_terminate	EQU    4 * int_terminate
   567                                  addr_int_ctrl_c 	EQU    4 * int_ctrl_c
   568                                  addr_int_fatal_abort	EQU    4 * int_fatal_abort
   569                                  addr_int_disk_read	EQU    4 * int_disk_read
   570                                  addr_int_disk_write	EQU    4 * int_disk_write
   571                                  addr_int_keep_process	EQU    4 * int_keep_process
   572                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   573                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   574                                  ;									   ;
   575                                  addr_int_spooler	EQU    4 * int_spooler
   576                                  addr_int_fastcon	EQU    4 * int_fastcon
   577                                  addr_int_IBM		EQU    4 * int_IBM
   578                                  ;									   ;
   579                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   580                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   581                                  
   582                                  
   583                                  ; <Disk map>
   584                                  ;  MSDOS partitions the disk into 4 sections:
   585                                  ;
   586                                  ;  phys sector 0:   +-------------------+
   587                                  ;       |           | boot/reserved     |
   588                                  ;       |           +-------------------+
   589                                  ;       |           |  File allocation  |
   590                                  ;       v           |      table(s)     |
   591                                  ;                   |  (multiple copies |
   592                                  ;                   |     are kept)     |
   593                                  ;                   +-------------------+
   594                                  ;                   |     Directory     |
   595                                  ;                   +-------------------+
   596                                  ;                   |     File space    |
   597                                  ;                   +-------------------+
   598                                  ;                   |   Unaddressable   |
   599                                  ;                   |  (to end of disk) |
   600                                  ;                   +-------------------+
   601                                  ;
   602                                  ; All partition boundaries are sector boundaries.  The size of the FAT is
   603                                  ; adjusted to maximize the file space addressable.
   604                                  
   605                                  ; BREAK <Directory entry>
   606                                  
   607                                  ;
   608                                  ;       +---------------------------+
   609                                  ;       |  (12 BYTE) filename/ext   |       0       0
   610                                  ;       +---------------------------+
   611                                  ;       |     (BYTE) attributes     |       11      B
   612                                  ;       +---------------------------+
   613                                  ;       |    (10 BYTE) reserved     |       12      C
   614                                  ;       +---------------------------+
   615                                  ;       | (WORD) time of last write |       22      16
   616                                  ;       +---------------------------+
   617                                  ;       | (WORD) date of last write |       24      18
   618                                  ;       +---------------------------+
   619                                  ;       |   (WORD) First cluster    |       26      1A
   620                                  ;       +---------------------------+
   621                                  ;       |     (DWORD) file size     |       28      1C
   622                                  ;       +---------------------------+
   623                                  ;
   624                                  ;   First byte of filename  = E5 -> free directory entry
   625                                  ;                           = 00 -> end of allocated directory
   626                                  ;   Time:   Bits 0-4=seconds/2, bits 5-10=minute, 11-15=hour
   627                                  ;   Date:   Bits 0-4=day, bits 5-8=month, bits 9-15=year-1980
   628                                  ;
   629                                  struc dir_entry
   630 00000000 <res Bh>                .dir_name:	resb 11			; file name
   631 0000000B ??                      .dir_attr:	resb 1			; attribute bits
   632 0000000C <res Ah>                .dir_pad:	resb 10			; reserved for expansion
   633 00000016 ????                    .dir_time:	resw 1			; time of last write
   634 00000018 ????                    .dir_date:	resw 1			; date of last write
   635 0000001A ????                    .dir_first:	resw 1			; first allocation unit of file
   636 0000001C ????                    .dir_size_l:	resw 1			; low 16 bits of file size
   637 0000001E ????                    .dir_size_h:	resw 1			; high 16 bits of file size
   638                                  .size:
   639                                  endstruc
   640                                  
   641                                  attr_read_only      EQU      1h
   642                                  attr_hidden         EQU      2h
   643                                  attr_system         EQU      4h
   644                                  attr_volume_id      EQU      8h
   645                                  attr_directory      EQU     10h
   646                                  attr_archive        EQU     20h
   647                                  ;09/07/2018 - Retro DOS v3.0
   648                                  ;(DIRENT.INC, MSDOS 3.3, 1987)
   649                                  attr_device	    EQU     40h	; This is a VERY special bit.
   650                                  				;   NO directory entry on a disk EVER
   651                                  				;   has this bit set. It is set non-zero
   652                                  				;   when a device is found by GETPATH
   653                                  
   654                                  attr_all            EQU     attr_hidden+attr_system+attr_directory
   655                                                                          ; OR of hard attributes for FINDENTRY
   656                                  
   657                                  attr_ignore         EQU     attr_read_only+attr_archive
   658                                                                          ; ignore this(ese) attribute(s)
   659                                                                          ; during search first/next
   660                                  
   661                                  attr_changeable     EQU     attr_read_only+attr_hidden+attr_system+attr_archive
   662                                                                          ; changeable via CHMOD
   663                                  
   664                                  ; 09/08/2018 - Retro DOS v3.0
   665                                  ; (DIRENT.INC, MSDOS 6,0, 1991)
   666                                  DIRFREE 	equ	0E5h	; stored in dir_name[0] to indicate free slot
   667                                  
   668                                  ; <File allocation Table information>
   669                                  ;
   670                                  ; The File Allocation Table uses a 12-bit entry for each allocation unit on the
   671                                  ; disk.  These entries are packed, two for every three bytes.  The contents of
   672                                  ; entry number N is found by 1) multiplying N by 1.5; 2) adding the result to
   673                                  ; the base address of the Allocation Table; 3) fetching the 16-bit word at this
   674                                  ; address; 4) If N was odd (so that N*1.5 was not an integer), shift the word
   675                                  ; right four bits; 5) mask to 12 bits (AND with 0FFF hex).  Entry number zero
   676                                  ; is used as an end-of-file trap in the OS and is passed to the BIOS to help
   677                                  ; determine disk format.  Entry 1 is reserved for future use.  The first
   678                                  ; available allocation unit is assigned entry number two, and even though it is
   679                                  ; the first, is called cluster 2.  Entries greater than 0FF8H are end of file
   680                                  ; marks; entries of zero are unallocated.  Otherwise, the contents of a FAT
   681                                  ; entry is the number of the next cluster in the file.
   682                                  ;
   683                                  ; Clusters with bad sectors are tagged with FF7H.  Any non-zero number would do
   684                                  ; because these clusters show as allocated, but are not part of any allocation
   685                                  ; chain and thus will never be allocated to a file.  A particular number is
   686                                  ; selected so that disk checking programs know what to do (ie.  a cluster with
   687                                  ; entry FF7H which is not in a chain is not an error).
   688                                  
   689                                  ;DIRSTRLEN       EQU     64	; Max length in bytes of directory strings
   690                                  
   691                                  ; 19/07/2018
   692                                  ; (DPB.INC, MSDOS 3.3, 1987)
   693                                  ; 07/07/2018 - Retro DOS v3.0
   694                                  ; (DPB.INC, MSDOS 6.0, 1991)
   695                                  ; ----------------------------------------------------------------------------
   696                                  ;**	DPB - Drive Parameter Block
   697                                  ;
   698                                  ;	BUGBUG - this isn't authorative - it's my probably incomplete and
   699                                  ;	possibly inaccurate deductions from code study... - jgl
   700                                  ;
   701                                  ;	The DPB is DOS's main structure for describing block devices.
   702                                  ;	It contains info about the "Drive" intermingled with info about
   703                                  ;	the FAT file system which is presumably on the drive.  I don't know
   704                                  ;	how those fields are used if it's not the FAT file system - BUGBUG
   705                                  ;
   706                                  ;	The DPBs are statically allocated and chained off of DPBHead.
   707                                  ;	Users scan this chain looking for a match on DPB_DRIVE.
   708                                  ;	The DPBs are built at init time from info in the SYSDEV structure.
   709                                  
   710                                  struc	DPB
   711 00000000 ??                      .DRIVE:		resb 1		; Logical drive # assoc with DPB (A=0,B=1,...)
   712 00000001 ??                      .UNIT:		resb 1		; Driver unit number of DPB
   713 00000002 ????                    .SECTOR_SIZE:	resw 1		; Size of physical sector in bytes
   714 00000004 ??                      .CLUSTER_MASK:	resb 1		; Sectors/cluster - 1
   715 00000005 ??                      .CLUSTER_SHIFT:	resb 1		; Log2 of sectors/cluster
   716 00000006 ????                    .FIRST_FAT:	resw 1		; Starting record of FATs
   717 00000008 ??                      .FAT_COUNT:	resb 1		; Number of FATs for this drive
   718 00000009 ????                    .ROOT_ENTRIES:	resw 1		; Number of directory entries
   719 0000000B ????                    .FIRST_SECTOR:	resw 1		; First sector of first cluster
   720 0000000D ????                    .MAX_CLUSTER:	resw 1		; Number of clusters on drive + 1
   721                                  ; MSDOS 3.3
   722 0000000F ??                      .FAT_SIZE:	resb 1		; Number of records occupied by FAT
   723                                  ; MSDOS 6.0
   724                                  ;.FAT_SIZE:	resw 1		; Number of records occupied by FAT
   725 00000010 ????                    .DIR_SECTOR:	resw 1		; Starting record of directory
   726 00000012 ????????                .DRIVER_ADDR:	resd 1		; Pointer to driver
   727 00000016 ??                      .MEDIA:		resb 1		; Media byte
   728 00000017 ??                      .FIRST_ACCESS:	resb 1		; This is initialized to -1 to force a media
   729                                  				; check the first time this DPB is used
   730 00000018 ????????                .NEXT_DPB:	resd 1		; Pointer to next Drive parameter block
   731 0000001C ????                    .NEXT_FREE:	resw 1		; Cluster # of last allocated cluster
   732 0000001E ????                    .FREE_CNT:	resw 1		; Count of free clusters, -1 if unknown
   733                                  .size:
   734                                  endstruc
   735                                  
   736                                  DPBSIZ  EQU     DPB.size	; Size of the structure in bytes
   737                                  
   738                                  DSKSIZ  EQU	DPB.MAX_CLUSTER	; Size of disk (temp used during init only)
   739                                  
   740                                  ;                                                                          ;
   741                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   742                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   743                                  
   744                                  ; 12/07/2018 - Retro DOS v3.0 
   745                                  ; (DOSSYM.INC, MSDOS 6.0, 1991)
   746                                  
   747                                  ;**	Character Type Flags
   748                                  ;
   749                                  ;	These flags are used in a lookup table indexed by the character code.
   750                                  ;	They're used to quickly classify characters when parsing paths.
   751                                  ;	I think that these are only used to parse FCBs - jgl
   752                                  
   753                                  FCHK	equ 1		; I think this means "normal name char, no chks needed" -jgl
   754                                  FDELIM	equ 2		; is a delimiter
   755                                  FSPCHK	equ 4		; set if character is not a space or equivalent
   756                                  FFCB	equ 8		; is valid in an FCB
   757                                  
   758                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   759                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   760                                  ;                                                                          ;
   761                                  devid_file_clean        EQU     40h     ; true if file and not written
   762                                  devid_file_mask_drive   EQU     3Fh     ; mask for drive number
   763                                  
   764                                  devid_device            EQU     80h     ; true if a device
   765                                  devid_device_EOF        EQU     40h     ; true if end of file reached
   766                                  devid_device_raw        EQU     20h     ; true if in raw mode
   767                                  devid_device_special    EQU     10h     ; true if special device
   768                                  devid_device_clock      EQU     08h     ; true if clock device
   769                                  devid_device_null       EQU     04h     ; true if null device
   770                                  devid_device_con_out    EQU     02h     ; true if console output
   771                                  devid_device_con_in     EQU     01h     ; true if consle input
   772                                  
   773                                  ;
   774                                  ; structure of devid field as returned by IOCTL is:
   775                                  ;
   776                                  ;       BIT     7   6   5   4   3   2   1   0
   777                                  ;             |---|---|---|---|---|---|---|---|
   778                                  ;             | I | E | R | S | I | I | I | I |
   779                                  ;             | S | O | A | P | S | S | S | S |
   780                                  ;             | D | F | W | E | C | N | C | C |
   781                                  ;             | E |   |   | C | L | U | O | I |
   782                                  ;             | V |   |   | L | K | L | T | N |
   783                                  ;             |---|---|---|---|---|---|---|---|
   784                                  ;       ISDEV = 1 if this channel is a device
   785                                  ;             = 0 if this channel is a disk file
   786                                  ;
   787                                  ;       If ISDEV = 1
   788                                  ;
   789                                  ;             EOF = 0 if End Of File on input
   790                                  ;             RAW = 1 if this device is in Raw mode
   791                                  ;                 = 0 if this device is cooked
   792                                  ;             ISCLK = 1 if this device is the clock device
   793                                  ;             ISNUL = 1 if this device is the null device
   794                                  ;             ISCOT = 1 if this device is the console output
   795                                  ;             ISCIN = 1 if this device is the console input
   796                                  ;
   797                                  ;       If ISDEV = 0
   798                                  ;             EOF = 0 if channel has been written
   799                                  ;             Bits 0-5  are  the  block  device  number  for
   800                                  ;                 the channel (0 = A, 1 = B, ...)
   801                                  ;
   802                                  devid_ISDEV     EQU     80h
   803                                  devid_EOF       EQU     40h
   804                                  devid_RAW       EQU     20h
   805                                  devid_SPECIAL   EQU     10H
   806                                  devid_ISCLK     EQU     08h
   807                                  devid_ISNUL     EQU     04h
   808                                  devid_ISCOT     EQU     02h
   809                                  devid_ISCIN     EQU     01h
   810                                  
   811                                  devid_block_dev EQU     1Fh             ; mask for block device number
   812                                  
   813                                  ; 08/07/2018 - Retro DOS v3.0
   814                                  ; (PDB.INC, MSDOS 6.0, 1991)
   815                                  ; ----------------------------------------------------------------------------
   816                                  ; BREAK <Process data block>
   817                                  ;
   818                                  ;**	Process data block (otherwise known as program header)
   819                                  ;
   820                                  
   821                                  ;	These offset are documented in the MSDOS Encyclopedia, so nothing
   822                                  ;	can be rearranged here, ever.  Reserved areas are probably safe
   823                                  ;	for use.
   824                                  
   825                                  FILPERPROC	EQU     20
   826                                  
   827                                  struc PDB	; Process_data_block
   828 00000000 ????                    .EXIT_CALL:	resw 1   	; INT int_abort system terminate
   829 00000002 ????                    .BLOCK_LEN:	resw 1		; size of execution block
   830 00000004 ??                                      resb 1
   831 00000005 ??????????              .CPM_CALL:	resb 5		; ancient call to system
   832 0000000A ????????                .EXIT:		resd 1		; pointer to exit routine
   833 0000000E ????????                .CTRL_C:	resd 1		; pointer to ^C routine
   834 00000012 ????????                .FATAL_ABORT:	resd 1		; pointer to fatal error
   835 00000016 ????                    .PARENT_PID:	resw 1		; PID of parent (terminate PID)
   836 00000018 <res 14h>               .JFN_TABLE:     resb FILPERPROC ; indices into system table
   837 0000002C ????                    .ENVIRON:	resw 1		; seg addr of environment
   838 0000002E ????????                .USER_STACK:	resd 1		; stack of self during system calls
   839 00000032 ????                    .JFN_Length:	resw 1		; number of handles allowed
   840 00000034 ????????                .JFN_Pointer:	resd 1		; pointer to JFN table
   841 00000038 ????????                .Next_PDB:	resd 1		; pointer to nested PDB's
   842 0000003C ??                      .InterCon:	resb 1	; MSDOS 6.0 ; *** jh-3/28/90 *** 
   843 0000003D ??                      .Append:	resb 1	; MSDOS 6.0 ; *** Not sure if still used ***
   844 0000003E ????                    .Novell_Used:	resb 2	; MSDOS 6.0 ; Novell shell (redir) uses these
   845 00000040 ????                    .Version:	resw 1	; MSDOS 6.0 ; DOS version reported to this app
   846 00000042 <res Eh>                .PAD1:		resb 14 ; 0Eh
   847 00000050 ??????????              .CALL_SYSTEM:	resb 5		; portable method of system call
   848 00000055 ??????????????          .PAD2:		resb 7		; reserved so FCB 1 can be used as
   849                                  				;  an extended FCB
   850                                  ;endstruc 	; MSDOS 3.3
   851                                  	  	; MSDOS 6.0
   852 0000005C <res 10h>               .FCB1:		resb 16 ; 10h	; default FCB 1
   853 0000006C <res 10h>               .FCB2:		resb 16 ; 10h	; default FCB 2
   854 0000007C ????????                .PAD3:		resb 4		; not sure if this is used by PDB_FCB2
   855 00000080 <res 80h>               .TAIL:		resb 128	; command tail and default DTA
   856                                  endstruc
   857                                  
   858                                  ; BREAK <EXEC and EXE file structures>
   859                                  ;
   860                                  ; EXEC arg block - load/go program
   861                                  ;
   862                                  
   863                                  ;
   864                                  ; The following get used as arguments to the EXEC system call.  They indicate
   865                                  ; whether or not the program is executed or whether or not a program header
   866                                  ; gets created.
   867                                  ;
   868                                  exec_func_no_execute    EQU 1           ; no execute bit
   869                                  exec_func_overlay       EQU 2           ; overlay bit
   870                                  
   871                                  struc EXEC0
   872 00000000 ????                    .ENVIRON:	resw 1		; seg addr of environment
   873 00000002 ????????                .COM_LINE:	resd 1		; pointer to asciz command line
   874 00000006 ????????                .5C_FCB:	resd 1		; default fcb at 5C
   875 0000000A ????????                .6C_FCB:	resd 1		; default fcb at 6C
   876                                  .size:
   877                                  endstruc
   878                                  
   879                                  struc EXEC1
   880 00000000 ????                    .ENVIRON:	resw 1		; seg addr of environment
   881 00000002 ????????                .COM_LINE:	resd 1		; pointer to asciz command line
   882 00000006 ????????                .5C_FCB:	resd 1		; default fcb at 5C
   883 0000000A ????????                .6C_FCB:	resd 1		; default fcb at 6C
   884 0000000E ????                    .SP:		resw 1		; stack pointer of program
   885 00000010 ????                    .SS:		resw 1		; stack seg register of program
   886 00000012 ????                    .IP:		resw 1		; entry point IP
   887 00000014 ????                    .CS:		resw 1		; entry point CS
   888                                  .size:
   889                                  endstruc
   890                                  
   891                                  struc EXEC3
   892 00000000 ????                    .load_addr:	resw 1		; seg address of load point
   893 00000002 ????                    .reloc_fac:	resw 1		; relocation factor
   894                                  endstruc
   895                                  
   896                                  ; 02/08/2018 (MSDOS 6.0, EXEC.INC, 1991)
   897                                  ;**	Exit codes (in upper byte) for terminating programs
   898                                  
   899                                  EXIT_TERMINATE		EQU	0
   900                                  EXIT_ABORT		EQU	0
   901                                  EXIT_CTRL_C		EQU	1
   902                                  EXIT_HARD_ERROR 	EQU	2
   903                                  EXIT_KEEP_PROCESS	EQU	3
   904                                  
   905                                  ;
   906                                  ; EXE file header
   907                                  ;
   908                                  
   909                                  struc EXE
   910 00000000 ????                    .signature:   resw 1		; must contain 4D5A (yay zibo!)
   911 00000002 ????                    .len_mod_512: resw 1		; low 9 bits of length
   912 00000004 ????                    .pages:       resw 1		; number of 512b pages in file
   913 00000006 ????                    .rle_count:   resw 1		; count of reloc entries
   914 00000008 ????                    .par_dir:     resw 1		; number of paragraphs before image
   915 0000000A ????                    .min_BSS:     resw 1		; minimum number of para of BSS
   916 0000000C ????                    .max_BSS:     resw 1		; max number of para of BSS
   917 0000000E ????                    .SS:          resw 1		; stack of image
   918 00000010 ????                    .SP:          resw 1		; SP of image
   919 00000012 ????                    .chksum:      resw 1		; checksum of file (ignored)
   920 00000014 ????                    .IP:          resw 1		; IP of entry
   921 00000016 ????                    .CS:          resw 1		; CS of entry
   922 00000018 ????                    .rle_table:   resw 1		; byte offset of reloc table
   923 0000001A ????                    .iov:         resw 1		; overlay number (0 for root)
   924 0000001C ????????                .sym_tab:     resd 1		; offset of symbol table in file
   925                                  .size:
   926                                  endstruc
   927                                  
   928                                  exe_valid_signature     EQU 5A4Dh
   929                                  exe_valid_old_signature EQU 4D5Ah
   930                                  
   931                                  struc symbol_entry
   932 00000000 ????????                .value:	resd 1
   933 00000004 ????                    .type:	resw 1
   934 00000006 ??                      .len:	resb 1
   935 00000007 <res FFh>               .name:	resb 255
   936                                  endstruc
   937                                  
   938                                  ; 07/07/2018 - Retro DOS v3.0
   939                                  ; MSDOS 6.0 (SF.INC, 1991)
   940                                  ; ----------------------------------------------------------------------------
   941                                  ;**	SF.INC - System File Table
   942                                  ;
   943                                  ;   AN000   version 4.00   Jan. 1988
   944                                  ;   AN003   PTM 3680 --  make NAME offset the same as before (<=3.30)
   945                                  ;   AN009   PTM 3839	 reorder SFT for MS WINDOWS
   946                                  
   947                                  ;**	System File Table SuperStructure
   948                                  ;
   949                                  ;	The system file table entries are allocated in contiguous groups.
   950                                  ;	There may be more than one such groups; the SF "superstructure"
   951                                  ;	tracks the groups.
   952                                  
   953                                  struc	SFT
   954 00000000 ????????                .SFLink:	resd 1
   955 00000004 ????                    .SFCount:	resw 1		; number of entries
   956 00000006 ????                    .SFTable:	resw 1		; beginning of array of the following
   957                                  .size:
   958                                  endstruc
   959                                  
   960                                  ; 07/07/2018 - Retro DOS v3.0
   961                                  ; MSDOS 6.0 (SF.INC, 1991)
   962                                  ; ----------------------------------------------------------------------------
   963                                  ;**	System file table entry
   964                                  ;
   965                                  ;	These are the structures which are at SFTABLE in the SF structure.
   966                                  
   967                                  struc SF_ENTRY
   968 00000000 ????                    .sf_ref_count:	resw 1		; number of processes sharing entry
   969                                  				;   if FCB then ref count
   970 00000002 ????                    .sf_mode:	resw 1		; mode of access or high bit on if FCB
   971 00000004 ??                      .sf_attr:	resb 1		; attribute of file
   972 00000005 ????                    .sf_flags:	resw 1		;Bits 8-15
   973                                  				; Bit 15 = 1 if remote file
   974                                  				;	 = 0 if local file or device
   975                                  				; Bit 14 = 1 if date/time is not to be
   976                                  				;   set from clock at CLOSE.  Set by
   977                                  				;   FILETIMES and FCB_CLOSE.  Reset by
   978                                  				;   other reseters of the dirty bit
   979                                  				;   (WRITE)
   980                                  				; Bit 13 = Pipe bit (reserved)
   981                                  				;
   982                                  				; Bits 0-7 (old FCB_devid bits)
   983                                  				; If remote file or local file, bit
   984                                  				; 6=0 if dirty Device ID number, bits
   985                                  				; 0-5 if local file.
   986                                  				; bit 7=0 for local file, bit 7
   987                                  				;      =1 for local I/O device
   988                                  				; If local I/O device, bit 6=0 if EOF (input)
   989                                  				;		Bit 5=1 if Raw mode
   990                                  				;		Bit 0=1 if console input device
   991                                  				;		Bit 1=1 if console output device
   992                                  				;		Bit 2=1 if null device
   993                                  				;		Bit 3=1 if clock device
   994 00000007 ????????                .sf_devptr:	resd	1	; Points to DPB if local file, points
   995                                  				; to device header if local device,
   996                                  				; points to net device header if
   997                                  				; remote
   998 0000000B ????                    .sf_firclus:	resw	1	; First cluster of file (bit 15 = 0)
   999 0000000D ????                    .sf_time:	resw	1	; Time associated with file
  1000 0000000F ????                    .sf_date:	resw	1	; Date associated with file
  1001 00000011 ????????                .sf_size:	resd 	1	; Size associated with file
  1002 00000015 ????????                .sf_position:	resd	1	; Read/Write pointer or LRU count for FCBs
  1003                                  
  1004                                  ; Starting here, the next 7 bytes may be used by the file system to store an
  1005                                  ; ID
  1006                                  
  1007                                  ; 09/07/2018 - Retro DOS v3.0
  1008                                  
  1009                                  ; MSDOS 3.3 SF.INC, 1987
  1010 00000019 ????                    .sf_cluspos:	resw	1	; Position of last cluster accessed
  1011 0000001B ????                    .sf_lstclus	resw	1	; Last cluster accessed
  1012 0000001D ????                    .sf_dirsec:	resw	1	; Sector number of directory sector
  1013                                  				; for this file
  1014 0000001F ??                      .sf_dirpos:	resb	1	; Offset of this entry in the above
  1015                                  
  1016                                  ; MSDOS 6.0, SF.INC, 1991
  1017                                  ;.sf_cluspos:	resw	1	; Position of last cluster accessed
  1018                                  ;.sf_dirsec:	resd	1	; Sector number of directory sector
  1019                                  ;				; for this file
  1020                                  ;.sf_dirpos:	resb	1	; Offset of this entry in the above
  1021                                  
  1022                                  ; End of 7 bytes of file-system specific info.
  1023                                  
  1024 00000020 <res Bh>                .sf_name:	resb	11	; 11 character name that is in the
  1025                                  				; directory entry.  This is used by
  1026                                  				; close to detect file deleted and
  1027                                  				; disk changed errors.
  1028                                  ; SHARING INFO
  1029 0000002B ????????                .sf_chain:	resd	1	; link to next SF
  1030 0000002F ????                    .sf_UID:	resw	1
  1031 00000031 ????                    .sf_PID:	resw	1
  1032 00000033 ????                    .sf_MFT:	resw	1
  1033                                  
  1034                                  ; MSDOS 6.0, SF.INC, 1991
  1035                                  ;.sf_lstclus:	resw	1	;AN009; Last cluster accessed
  1036                                  ;.sf_IFS_HDR:	resd	1
  1037                                  
  1038                                  .size:
  1039                                  endstruc
  1040                                  
  1041                                  ; 20/07/2018
  1042                                  ; MSDOS 3.3, SF.INC, 1987
  1043                                  %define sf_netid   SF_ENTRY.sf_cluspos    ; byte
  1044                                  %define sf_OpenAge SF_ENTRY.sf_position+2 ; word
  1045                                  %define sf_LRU	   SF_ENTRY.sf_position	  ; word
  1046                                  ; MSDOS 6.0, SDF.INC, 1991
  1047                                  %define sf_fsda	     SF_ENTRRY.sf_cluspos ; byte ;DOS 4.00
  1048                                  %define sf_serial_ID SF_ENTRY.sf_firclus  ; word ;DOS 4.00
  1049                                  
  1050                                  ; 19/07/2018
  1051                                  
  1052                                  ; MSDOS 3.3, SF.INC, 1987
  1053                                  
  1054                                  sf_default_number  EQU	5
  1055                                  
  1056                                  ; Note that we need to mark an SFT as being busy for OPEN/CREATE.  This is
  1057                                  ; because an INT 24 may prevent us from 'freeing' it.  We mark this as such
  1058                                  ; by placing a -1 in the ref_count field.
  1059                                  
  1060                                  sf_busy EQU -1
  1061                                  
  1062                                  ; mode mask for FCB detection
  1063                                  sf_isFCB		EQU	1000000000000000B
  1064                                  
  1065                                  ; Flag word masks
  1066                                  sf_isnet		EQU	1000000000000000B
  1067                                  sf_close_nodate 	EQU	0100000000000000B
  1068                                  sf_pipe 		EQU	0010000000000000B
  1069                                  sf_no_inherit		EQU	0001000000000000B
  1070                                  sf_net_spool		EQU	0000100000000000B
  1071                                  
  1072                                  ; 19/04/2018
  1073                                  sf_entry_size equ SF_ENTRY.size ; 53
  1074                                  
  1075                                  ;                                                                          ;
  1076                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1077                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1078                                  
  1079                                  ; 09/07/2018 - Retro DOS v3.0
  1080                                  ; (ARENA.INC, MSDOS 3.3, 1987)
  1081                                  ; ----------------------------------------------------------------------------
  1082                                  ;BREAK <Memory arena structure>
  1083                                  
  1084                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1085                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1086                                  ;                                                                          ;
  1087                                  ;
  1088                                  ; arena item
  1089                                  ;
  1090                                  
  1091                                  struc ARENA
  1092 00000000 ??                      .SIGNATURE:	resb 1		; 4D for valid item, 5A for last item
  1093 00000001 ????                    .OWNER:		resw 1		; owner of arena item
  1094 00000003 ????                    .SIZE:		resw 1		; size in paragraphs of item
  1095                                  endstruc
  1096                                  
  1097                                  ; CAUTION: The routines in ALLOC.ASM rely on the fact that arena_signature
  1098                                  ; and arena_owner_system are all equal to zero and are contained in DI.
  1099                                  ; Change them and change ALLOC.ASM.
  1100                                  
  1101                                  arena_owner_system  EQU 0               ; free block indication
  1102                                  
  1103                                  arena_signature_normal	EQU 4Dh		; valid signature, not end of arena
  1104                                  arena_signature_end     EQU 5Ah         ; valid signature, last block in arena
  1105                                  
  1106                                  ; 04/08/2018 - Retro DOS v3.0
  1107                                  ; (ARENA.INC, MSDOS 6.0, 1991)
  1108                                  
  1109                                  FIRST_FIT	EQU	00000000B
  1110                                  BEST_FIT	EQU	00000001B
  1111                                  LAST_FIT	EQU	00000010B
  1112                                  
  1113                                  ; MSDOS 6.0
  1114                                  ;LOW_FIRST	EQU	00000000B	; M001
  1115                                  ;HIGH_FIRST	EQU	10000000B	; M001
  1116                                  ;HIGH_ONLY	EQU	01000000B	; M001
  1117                                  
  1118                                  ;LINKSTATE	EQU	00000001B	; M002
  1119                                  
  1120                                  ;HF_MASK		EQU	~HIGH_FIRST	; M001
  1121                                  ;HO_MASK		EQU	~HIGH_ONLY	; M001
  1122                                  
  1123                                  ;STRAT_MASK	EQU	HF_MASK & HO_MASK	; M001;
  1124                                  						; M026: used to mask of bits
  1125                                  						; M026: 6 & 7 of AllocMethod
  1126                                  
  1127                                  ; 07/07/2018 - Retro DOS v3.0
  1128                                  ; (MI.INC, MSDOS 6.0, 1991)
  1129                                  ; ----------------------------------------------------------------------------
  1130                                  ;BREAK <Machine instruction, flag definitions and character types>
  1131                                  
  1132                                  mi_INT		EQU	0CDh
  1133                                  mi_Long_JMP	EQU	0EAh
  1134                                  mi_Long_CALL	EQU	09Ah
  1135                                  mi_Long_RET	EQU	0CBh
  1136                                  mi_Near_RET	EQU	0C3h
  1137                                  
  1138                                  ;			xxxxoditszxaxpxc
  1139                                  f_Overflow	EQU	0000100000000000B
  1140                                  f_Direction	EQU	0000010000000000B
  1141                                  f_Interrupt	EQU	0000001000000000B
  1142                                  f_Trace 	EQU	0000000100000000B
  1143                                  f_Sign		EQU	0000000010000000B
  1144                                  f_Zero		EQU	0000000001000000B
  1145                                  f_Aux		EQU	0000000000010000B
  1146                                  f_Parity	EQU	0000000000000100B
  1147                                  f_Carry 	EQU	0000000000000001B
  1148                                  
  1149                                  ; <Standard I/O assignments>
  1150                                  
  1151                                  stdin       EQU     0
  1152                                  stdout      EQU     1
  1153                                  stderr      EQU     2
  1154                                  stdaux      EQU     3
  1155                                  stdprn      EQU     4
  1156                                  
  1157                                  ; <Xenix subfunction assignments>
  1158                                  
  1159                                  open_for_read   EQU 0
  1160                                  open_for_write  EQU 1
  1161                                  open_for_both   EQU 2
  1162                                  
  1163                                  ; 13/07/2018 - Retro DOS v3.0
  1164                                  ; (FILEMODE.INC, MSDOS 6.0, 1991)
  1165                                  
  1166                                  access_mask	EQU 0Fh ; 09/08/2018
  1167                                  
  1168                                  EXEC_OPEN	EQU 3		; access code of 3 indicates that open was 
  1169                                  				; made from exec
  1170                                  SHARING_MASK	    equ 0F0h
  1171                                  SHARING_COMPAT	    equ 000h
  1172                                  SHARING_DENY_BOTH   equ 010h
  1173                                  SHARING_DENY_WRITE  equ 020h
  1174                                  SHARING_DENY_READ   equ 030h
  1175                                  SHARING_DENY_NONE   equ 040h
  1176                                  SHARING_NET_FCB     equ 070h
  1177                                  SHARING_NO_INHERIT  equ 080h
  1178                                  
  1179                                  ; 09/07/2018 - Retro DOS v3.0
  1180                                  ; (SYSCALL.INC, MSDOS 3.3, 1987)
  1181                                  ; ----------------------------------------------------------------------------
  1182                                  
  1183                                  ; <system call definitions>
  1184                                  
  1185                                  ABORT                           EQU 0   ;  0      0
  1186                                  STD_CON_INPUT                   EQU 1   ;  1      1
  1187                                  STD_CON_OUTPUT                  EQU 2   ;  2      2
  1188                                  STD_AUX_INPUT                   EQU 3   ;  3      3
  1189                                  STD_AUX_OUTPUT                  EQU 4   ;  4      4
  1190                                  STD_PRINTER_OUTPUT              EQU 5   ;  5      5
  1191                                  RAW_CON_IO                      EQU 6   ;  6      6
  1192                                  RAW_CON_INPUT                   EQU 7   ;  7      7
  1193                                  STD_CON_INPUT_NO_ECHO           EQU 8   ;  8      8
  1194                                  STD_CON_STRING_OUTPUT           EQU 9   ;  9      9
  1195                                  STD_CON_STRING_INPUT            EQU 10  ; 10      A
  1196                                  STD_CON_INPUT_STATUS            EQU 11  ; 11      B
  1197                                  STD_CON_INPUT_FLUSH             EQU 12  ; 12      C
  1198                                  DISK_RESET                      EQU 13  ; 13      D
  1199                                  SET_DEFAULT_DRIVE               EQU 14  ; 14      E
  1200                                  FCB_OPEN                        EQU 15  ; 15      F
  1201                                  FCB_CLOSE                       EQU 16  ; 16     10
  1202                                  DIR_SEARCH_FIRST                EQU 17  ; 17     11
  1203                                  DIR_SEARCH_NEXT                 EQU 18  ; 18     12
  1204                                  FCB_DELETE                      EQU 19  ; 19     13
  1205                                  FCB_SEQ_READ                    EQU 20  ; 20     14
  1206                                  FCB_SEQ_WRITE                   EQU 21  ; 21     15
  1207                                  FCB_CREATE                      EQU 22  ; 22     16
  1208                                  FCB_RENAME                      EQU 23  ; 23     17
  1209                                  GET_DEFAULT_DRIVE               EQU 25  ; 25     19
  1210                                  SET_DMA                         EQU 26  ; 26     1A
  1211                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1212                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1213                                  ;                                                                          ;
  1214                                  GET_DEFAULT_DPB                 EQU 31  ; 31     1F
  1215                                  ;                                                                          ;
  1216                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1217                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1218                                  FCB_RANDOM_READ                 EQU 33  ; 33     21
  1219                                  FCB_RANDOM_WRITE                EQU 34  ; 34     22
  1220                                  GET_FCB_FILE_LENGTH             EQU 35  ; 35     23
  1221                                  GET_FCB_POSITION                EQU 36  ; 36     24
  1222                                  SET_INTERRUPT_VECTOR            EQU 37  ; 37     25
  1223                                  CREATE_PROCESS_DATA_BLOCK       EQU 38  ; 38     26
  1224                                  FCB_RANDOM_READ_BLOCK           EQU 39  ; 39     27
  1225                                  FCB_RANDOM_WRITE_BLOCK          EQU 40  ; 40     28
  1226                                  PARSE_FILE_DESCRIPTOR           EQU 41  ; 41     29
  1227                                  GET_DATE                        EQU 42  ; 42     2A
  1228                                  SET_DATE                        EQU 43  ; 43     2B
  1229                                  GET_TIME                        EQU 44  ; 44     2C
  1230                                  SET_TIME                        EQU 45  ; 45     2D
  1231                                  SET_VERIFY_ON_WRITE             EQU 46  ; 46     2E
  1232                                  ; Extended functionality group
  1233                                  GET_DMA                         EQU 47  ; 47     2F
  1234                                  GET_VERSION                     EQU 48  ; 48     30
  1235                                  KEEP_PROCESS                    EQU 49  ; 49     31
  1236                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1237                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1238                                  ;                                                                          ;
  1239                                  GET_DPB                         EQU 50  ; 50     32
  1240                                  ;                                                                          ;
  1241                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1242                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1243                                  SET_CTRL_C_TRAPPING             EQU 51  ; 51     33
  1244                                  GET_INDOS_FLAG                  EQU 52  ; 52     34
  1245                                  GET_INTERRUPT_VECTOR            EQU 53  ; 53     35
  1246                                  GET_DRIVE_FREESPACE             EQU 54  ; 54     36
  1247                                  CHAR_OPER                       EQU 55  ; 55     37
  1248                                  INTERNATIONAL                   EQU 56  ; 56     38
  1249                                  ; XENIX CALLS
  1250                                  ;   Directory Group
  1251                                  MKDIR                           EQU 57  ; 57     39
  1252                                  RMDIR                           EQU 58  ; 58     3A
  1253                                  CHDIR                           EQU 59  ; 59     3B
  1254                                  ;   File Group
  1255                                  CREAT                           EQU 60  ; 60     3C
  1256                                  OPEN                            EQU 61  ; 61     3D
  1257                                  CLOSE                           EQU 62  ; 62     3E
  1258                                  READ                            EQU 63  ; 63     3F
  1259                                  WRITE                           EQU 64  ; 64     40
  1260                                  UNLINK                          EQU 65  ; 65     41
  1261                                  LSEEK                           EQU 66  ; 66     42
  1262                                  CHMOD                           EQU 67  ; 67     43
  1263                                  IOCTL                           EQU 68  ; 68     44
  1264                                  XDUP                            EQU 69  ; 69     45
  1265                                  XDUP2                           EQU 70  ; 70     46
  1266                                  CURRENT_DIR                     EQU 71  ; 71     47
  1267                                  ;    Memory Group
  1268                                  ALLOC                           EQU 72  ; 72     48
  1269                                  DEALLOC                         EQU 73  ; 73     49
  1270                                  SETBLOCK                        EQU 74  ; 74     4A
  1271                                  ;    Process Group
  1272                                  EXEC                            EQU 75  ; 75     4B
  1273                                  EXIT                            EQU 76  ; 76     4C
  1274                                  _WAIT				EQU 77  ; 77     4D
  1275                                  FIND_FIRST                      EQU 78  ; 78     4E
  1276                                  ;   Special Group
  1277                                  FIND_NEXT                       EQU 79  ; 79     4F
  1278                                  ; SPECIAL SYSTEM GROUP
  1279                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1280                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1281                                  ;                                                                          ;
  1282                                  SET_CURRENT_PDB                 EQU 80  ; 80     50
  1283                                  GET_CURRENT_PDB                 EQU 81  ; 81     51
  1284                                  GET_IN_VARS                     EQU 82  ; 82     52
  1285                                  SETDPB                          EQU 83  ; 83     53
  1286                                  ;                                                                          ;
  1287                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1288                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1289                                  GET_VERIFY_ON_WRITE             EQU 84  ; 84     54
  1290                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1291                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1292                                  ;                                                                          ;
  1293                                  DUP_PDB                         EQU 85  ; 85     55
  1294                                  ;                                                                          ;
  1295                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1296                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1297                                  RENAME                          EQU 86  ; 86     56
  1298                                  FILE_TIMES                      EQU 87  ; 87     57
  1299                                  ALLOCOPER			EQU 88	; 88	 58
  1300                                  ; Network extention system calls
  1301                                  GETEXTENDEDERROR		EQU 89	; 89	 59
  1302                                  CREATETEMPFILE			EQU 90	; 90	 5A
  1303                                  CREATENEWFILE			EQU 91	; 91	 5B
  1304                                  LOCKOPER			EQU 92	; 92	 5C Lock and Unlock
  1305                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1306                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  1307                                  ;									   ;
  1308                                  SERVERCALL			EQU 93	; 93	 5D CommitAll, ServerDOSCall,
  1309                                  					;	    CloseByName, CloseUser,
  1310                                  					;	    CloseUserProcess,
  1311                                  					;	    GetOpenFileList
  1312                                  ;									   ;
  1313                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  1314                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1315                                  USEROPER			EQU 94	; 94	 5E Get and Set
  1316                                  ASSINGOPER			EQU 95	; 95	 5F On, Off, Get, Set, Cancel
  1317                                  XNAMETRANS			EQU 96	; 96	 60
  1318                                  PATHPARSE			EQU 97	; 97	 61
  1319                                  GETCURRENTPSP			EQU 98	; 98	 62
  1320                                  HONGEUL 			EQU 99	; 99	 63
  1321                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1322                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  1323                                  ;									   ;
  1324                                  SET_PRINTER_FLAG		EQU 100 ; 100	 64
  1325                                  ;									   ;
  1326                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  1327                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1328                                  GETEXTCNTRY			EQU 101 ; 101	 65 
  1329                                  GETSETCDPG			EQU 102 ; 102	 66
  1330                                  EXTHANDLE			EQU 103 ; 103	 67
  1331                                  COMMIT				EQU 104 ; 104	 68
  1332                                  
  1333                                  ; 09/07/2018 - Retro DOS v3.0
  1334                                  ; (MSDOS 6.0, SYSCALL.INC, 1987)
  1335                                  
  1336                                  ;GetSetMediaID			EQU 105 ; 105	 69
  1337                                  ;IFS_IOCTL			EQU 107 ; 107	 6B
  1338                                  ;ExtOpen 			EQU 108 ; 108	 6C
  1339                                  
  1340                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1341                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1342                                  ;                                                                          ;
  1343                                  ;ifdef ROMEXEC
  1344                                  ;ROM_FIND_FIRST			EQU 109 ; 109    6D
  1345                                  ;ROM_FIND_NEXT			EQU 110 ; 110    6E
  1346                                  ;ROM_EXCLUDE			EQU 111 ; 111	 6F		; M035
  1347                                  ;endif
  1348                                  ;                                                                          ;
  1349                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1350                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1351                                  
  1352                                  SET_OEM_HANDLER			EQU 248 ; 248    F8
  1353                                  ;OEM_C1				EQU 249 ; 249    F9
  1354                                  ;OEM_C2				EQU 250 ; 250    FA
  1355                                  ;OEM_C3				EQU 251 ; 251    FB
  1356                                  ;OEM_C4				EQU 252 ; 252    FC
  1357                                  ;OEM_C5				EQU 253 ; 253    FD
  1358                                  ;OEM_C6				EQU 254 ; 254    FE
  1359                                  ;OEM_C7				EQU 255 ; 255    FF
  1360                                  
  1361                                  ;============================================================================
  1362                                  ; VERSIONA.INC (MSDOS 3.3, 24/07/1987)
  1363                                  ;============================================================================
  1364                                  ; 08/07/2018 - Retro DOS 3.0
  1365                                  
  1366                                  MAJOR_VERSION   EQU     3
  1367                                  MINOR_VERSION   EQU     30
  1368                                  
  1369                                  ;============================================================================
  1370                                  ; DOSSYM_V211.ASM (-*-)
  1371                                  ;============================================================================
  1372                                  
  1373                                  ;DOS_MAJOR_VERSION   EQU      2
  1374                                  ;DOS_MINOR_VERSION   EQU     11
  1375                                  
  1376                                  ;============================================================================
  1377                                  ; INTNAT.INC, MSDOS 3.3, 1987
  1378                                  ;============================================================================
  1379                                  ; 09/07/2018 - Retro DOS 3.0
  1380                                  
  1381                                  ;
  1382                                  ; Current structure of the data returned by the international call
  1383                                  ;
  1384                                  
  1385                                  struc	INTERNAT_BLOCK		; (-*-) Same with MSDOS 2.11 & MSDOS 6.0
  1386                                  .Date_tim_format:
  1387 00000000 ????                    		RESW 1		; 0-USA, 1-EUR, 2-JAP
  1388                                  .Currency_sym:
  1389 00000002 ??????????              		RESB 5		; Currency Symbol 5 bytes
  1390                                  .Thous_sep:
  1391 00000007 ????                    		RESB 2		; Thousands separator 2 bytes
  1392                                  .Decimal_sep:
  1393 00000009 ????                    		RESB 2		; Decimal separator 2 bytes
  1394                                  .Date_sep:
  1395 0000000B ????                    		RESB 2		; Date separator 2 bytes
  1396                                  .Time_sep:
  1397 0000000D ????                    		RESB 2		; Time separator 2 bytes
  1398                                  .Bit_field:	
  1399 0000000F ??                      		RESB 1		; Bit values
  1400                                                                     ;   Bit 0 = 0 if currency symbol first
  1401                                                                     ;         = 1 if currency symbol last
  1402                                                                     ;   Bit 1 = 0 if No space after currency symbol
  1403                                                                     ;         = 1 if space after currency symbol
  1404                                  .Currency_cents:
  1405 00000010 ??                      		RESB 	1	; Number of places after currency dec point
  1406                                  .Time_24:
  1407 00000011 ??                      		RESB 	1	; 1 if 24 hour time, 0 if 12 hour time
  1408                                  .Map_call:
  1409 00000012 ????                    		RESW	1	; Address of case mapping call (DWORD)
  1410 00000014 ????                                    RESW	1       ; THIS IS TWO WORDS SO IT CAN BE INITIALIZED
  1411                                  				;  in pieces.
  1412                                  .Data_sep:
  1413 00000016 ????                    		RESB	2	; Data list separator character
  1414                                  .size:		
  1415                                  endstruc
  1416                                  
  1417                                  ;
  1418                                  ; Max size of the block returned by the INTERNATIONAL call
  1419                                  ;
  1420                                  internat_block_max	EQU	32
  1421                                  
  1422                                  ;============================================================================
  1423                                  ; SYSVAR.INC (MSDOS 6.0, 1991)
  1424                                  ;============================================================================
  1425                                  ; 08/07/2018 - Retro DOS v3.0
  1426                                  
  1427                                  ;SysInitVars STRUC
  1428                                  struc SYSI
  1429 00000000 ????????                .DPB:	    resd 1		; DPB chain
  1430 00000004 ????????                .SFT:	    resd 1		; SFT chain
  1431 00000008 ????????                .CLOCK:	    resd 1		; CLOCK device
  1432 0000000C ????????                .CON:	    resd 1		; CON device
  1433 00000010 ????                    .MAXSEC:    resw 1		; maximum sector size
  1434 00000012 ????????                .BUF:	    resd 1		; points to Hashinitvar
  1435 00000016 ????????                .CDS:	    resd 1		; CDS list
  1436 0000001A ????????                .FCB:	    resd 1		; FCB chain
  1437 0000001E ????                    .Keep:	    resw 1		; keep count
  1438 00000020 ??                      .NUMIO:	    resb 1		; Number of block devices
  1439 00000021 ??                      .NCDS:	    resb 1		; number of CDS's
  1440 00000022 ????????                .DEV:	    resd 1		; device list
  1441                                  ; 09/07/2018
  1442                                  ; Above parameters are described in MSDOS 3.3 SYSVAR.INC (85/04/10)
  1443                                  ; Following parameters are used with MDSOS 6.0 (Retro DOS v4.0)
  1444 00000026 ????                    .ATTR:	    resw 1		; null device attribute word
  1445 00000028 ????                    .STRAT:	    resw 1		; null device strategy entry point
  1446 0000002A ????                    .INTER:	    resw 1		; null device interrupt entry point
  1447 0000002C ????????????????        .NAME:	    resb 8		; null device name
  1448 00000034 ??                      .SPLICE:    resb 1		; TRUE -> splicees being done
  1449 00000035 ????                    .IBMDOS_SIZE: resw 1		; DOS size in paragraphs
  1450 00000037 ????????                .IFS_DOSCALL@: resd 1		; IFS DOS service rountine entry
  1451 0000003B ????????                .IFS:	    resd 1		; IFS header chain
  1452 0000003F ????????                .BUFFERS:   resw 2		; BUFFERS= values (m,n)
  1453 00000043 ??                      .BOOT_DRIVE: resb 1		; boot drive A=1 B=2,..
  1454 00000044 ??                      .DWMOVE:    resb 1		; 1 if 386 machine
  1455 00000045 ????                    .EXT_MEM:   resw 1		; Extended memory size in KB.
  1456                                  endstruc
  1457                                  ;SysInitVars ENDS
  1458                                  
  1459                                  ;This is added for more information exchange between DOS, BIOS.
  1460                                  ;DOS will give the pointer to SysInitTable in ES:DI. - J.K. 5/29/86
  1461                                  
  1462                                  ;SysInitVars_Ext struc
  1463                                  struc SYSI_EXT
  1464 00000000 ????????                .SysInitVars:	resd 1		; Points to the above structure.
  1465 00000004 ????????                .Country_Tab:	resd 1		; DOS_Country_cdpg_info
  1466                                  endstruc
  1467                                  ;SysInitVars_Ext ends
  1468                                  
  1469                                  ;============================================================================
  1470                                  ; IOCTL.INC - MSDOS 6.0 - 1991
  1471                                  ;============================================================================
  1472                                  ; 09/07/2018 - Retro DOS v3.0
  1473                                  
  1474                                  ;*** J.K.
  1475                                  ;General Guide -
  1476                                  ;Category Code:
  1477                                  ; 0... .... DOS Defined
  1478                                  ; 1... .... User defined
  1479                                  ; .xxx xxxx Code
  1480                                  
  1481                                  ;Function Code:
  1482                                  ; 0... .... Return error if unsupported
  1483                                  ; 1... .... Ignore if unsupported
  1484                                  ; .0.. .... Intercepted by DOS
  1485                                  ; .1.. .... Passed to driver
  1486                                  ; ..0. .... Sends data/commands to device
  1487                                  ; ..1. .... Quries data/info from device
  1488                                  ; ...x .... Subfunction
  1489                                  ;
  1490                                  ; Note that "Sends/queries" data bit is intended only to regularize the
  1491                                  ; function set.  It plays no critical role; some functions may contain both
  1492                                  ; command and query elements. The convention is that such commands are
  1493                                  ; defined as "sends data".
  1494                                  
  1495                                  ;*****************************;*
  1496                                  ; BLOCK DRIVERS 	      ;*
  1497                                  ;*****************************;*
  1498                                  
  1499                                  ; IOCTL SUB-FUNCTIONS
  1500                                  ; (MSDOS 3.3 + MSDOS 6.0)
  1501                                  IOCTL_GET_DEVICE_INFO	EQU	0
  1502                                  IOCTL_SET_DEVICE_INFO	EQU	1
  1503                                  IOCTL_READ_HANDLE	EQU	2
  1504                                  IOCTL_WRITE_HANDLE	EQU	3
  1505                                  IOCTL_READ_DRIVE	EQU	4
  1506                                  IOCTL_WRITE_DRIVE	EQU	5
  1507                                  IOCTL_GET_INPUT_STATUS	EQU	6
  1508                                  IOCTL_GET_OUTPUT_STATUS EQU	7
  1509                                  IOCTL_CHANGEABLE?	EQU	8
  1510                                  IOCTL_DeviceLocOrRem?	EQU	9
  1511                                  IOCTL_HandleLocOrRem?	EQU	0Ah   ;10
  1512                                  IOCTL_SHARING_RETRY	EQU	0Bh   ;11
  1513                                  GENERIC_IOCTL_HANDLE	EQU	0Ch   ;12
  1514                                  GENERIC_IOCTL		EQU	0Dh   ;13
  1515                                  ; (MSDOS 6.0 + MSDOS 3.3)
  1516                                  IOCTL_GET_DRIVE_MAP 	EQU	0Eh   ;14
  1517                                  IOCTL_SET_DRIVE_MAP	EQU	0Fh   ;15
  1518                                  ; (MSDOS 6.0)
  1519                                  IOCTL_QUERY_HANDLE	EQU	10h   ;16
  1520                                  IOCTL_QUERY_BLOCK	EQU	11h   ;17
  1521                                  
  1522                                  ; GENERIC IOCTL CATEGORY CODES
  1523                                  IOC_OTHER		EQU	0	; Other device control J.K. 4/29/86
  1524                                  IOC_SE			EQU	1	; SERIAL DEVICE CONTROL
  1525                                  IOC_TC			EQU	2	; TERMINAL CONTROL
  1526                                  IOC_SC			EQU	3	; SCREEN CONTROL
  1527                                  IOC_KC			EQU	4	; KEYBOARD CONTROL
  1528                                  IOC_PC			EQU	5	; PRINTER CONTROL
  1529                                  IOC_DC			EQU	8	; DISK CONTROL (SAME AS RAWIO)
  1530                                  
  1531                                  ; GENERIC IOCTL SUB-FUNCTIONS
  1532                                  RAWIO			EQU	8
  1533                                  
  1534                                  ; RAWIO SUB-FUNCTIONS
  1535                                  ; (MSDOS 3.3 + MSDOS 6.0)
  1536                                  GET_DEVICE_PARAMETERS	EQU	60H
  1537                                  SET_DEVICE_PARAMETERS	EQU	40H
  1538                                  READ_TRACK		EQU	61H
  1539                                  WRITE_TRACK		EQU	41H
  1540                                  VERIFY_TRACK		EQU	62H
  1541                                  FORMAT_TRACK		EQU	42H
  1542                                  ; (MSDOS 6.0)
  1543                                  GET_MEDIA_ID		EQU	66h	;AN000;AN003;changed from 63h
  1544                                  SET_MEDIA_ID		EQU	46h	;AN000;AN003;changed from 43h
  1545                                  GET_ACCESS_FLAG 	EQU	67h	;AN002;AN003;Unpublished function.Changed from 64h
  1546                                  SET_ACCESS_FLAG 	EQU	47h	;AN002;AN003;Unpublished function.Changed from 44h
  1547                                  SENSE_MEDIA_TYPE	EQU	68H	;Added for 5.00
  1548                                  
  1549                                  ; SPECIAL FUNCTION FOR GET DEVICE PARAMETERS
  1550                                  BUILD_DEVICE_BPB	EQU	000000001B
  1551                                  
  1552                                  ; SPECIAL FUNCTIONS FOR SET DEVICE PARAMETERS
  1553                                  INSTALL_FAKE_BPB	EQU	000000001B
  1554                                  ONLY_SET_TRACKLAYOUT	EQU	000000010B
  1555                                  TRACKLAYOUT_IS_GOOD	EQU	000000100B
  1556                                  
  1557                                  ; SPECIAL FUNCTION FOR FORMAT TRACK
  1558                                  ; (MSDOS 3.3 + MSDOS 6.0)
  1559                                  STATUS_FOR_FORMAT	EQU	000000001B
  1560                                  ; (MSDOS 6.0)
  1561                                  DO_FAST_FORMAT		EQU	000000010B ;AN001;
  1562                                  
  1563                                  ; CODES RETURNED FROM FORMAT STATUS CALL
  1564                                  FORMAT_NO_ROM_SUPPORT	EQU	000000001B
  1565                                  FORMAT_COMB_NOT_SUPPORTED EQU	000000010B
  1566                                  
  1567                                  ; DEVICETYPE VALUES
  1568                                  ; (MSDOS 3.3 + MSDOS 6.0)
  1569                                  MAX_SECTORS_IN_TRACK	EQU	63	; MAXIMUM SECTORS ON A DISK.(Was 40 in DOS 3.2)
  1570                                  DEV_5INCH		EQU	0
  1571                                  DEV_5INCH96TPI		EQU	1
  1572                                  DEV_3INCH720KB		EQU	2
  1573                                  DEV_8INCHSS		EQU	3
  1574                                  DEV_8INCHDS		EQU	4
  1575                                  DEV_HARDDISK		EQU	5
  1576                                  DEV_OTHER		EQU	7
  1577                                  ; (MSDOS 6.0)
  1578                                  ;DEV_3INCH1440KB	EQU	7
  1579                                  DEV_3INCH2880KB		EQU	9
  1580                                  ; Retro DOS v2.0 - 26/03/2018
  1581                                  ;;DEV_TAPE		EQU	6
  1582                                  ;;DEV_ERIMO		EQU	8
  1583                                  ;DEV_3INCH2880KB	EQU	9
  1584                                  DEV_3INCH1440KB		EQU	10
  1585                                  
  1586                                  ; (MSDOS 3.3)
  1587                                  ;MAX_DEV_TYPE		EQU	7
  1588                                  
  1589                                  ; (MSDOS 6.0)
  1590                                  MAX_DEV_TYPE		EQU	10	; MAXIMUM DEVICE TYPE THAT WE
  1591                                  					; CURRENTLY SUPPORT.
  1592                                  
  1593                                  struc A_SECTORTABLE
  1594 00000000 ????                    .ST_SECTORNUMBER:	resw	1
  1595 00000002 ????                    .ST_SECTORSIZE:		resw	1
  1596                                  .size:
  1597                                  endstruc
  1598                                  
  1599                                  ;============================================================================
  1600                                  ; DEVSYM.ASM
  1601                                  ;============================================================================
  1602                                  
  1603                                  ;SUBTTL DEVICE TABLE AND SRH DEFINITION
  1604                                  ;PAGE
  1605                                  
  1606                                  ; 07/07/2018 - Retro DOS v3.0
  1607                                  ; (DEVSYM.INC, MSDOS 6.0, 1991)
  1608                                  
  1609                                  ;**	DevSym.inc - Device Symbols
  1610                                  
  1611                                  ; The device table list has the form:
  1612                                  struc	SYSDEV
  1613 00000000 ????????                .NEXT:		resd 1		;Pointer to next device header
  1614 00000004 ????                    .ATT:		resw 1		;Attributes of the device
  1615 00000006 ????                    .STRAT:		resw 1		;Strategy entry point
  1616 00000008 ????                    .INT:		resw 1		;Interrupt entry point
  1617 0000000A ????????????????        .NAME:		resb 8		;Name of device (only first byte used for block)
  1618                                  .size:
  1619                                  endstruc
  1620                                  
  1621                                  ;
  1622                                  ; ATTRIBUTE BIT MASKS
  1623                                  ;
  1624                                  ; CHARACTER DEVICES:
  1625                                  ;
  1626                                  ; BIT 15 -> MUST BE 1
  1627                                  ;     14 -> 1 IF THE DEVICE UNDERSTANDS IOCTL CONTROL STRINGS
  1628                                  ;     13 -> 1 IF THE DEVICE SUPPORTS OUTPUT-UNTIL-BUSY
  1629                                  ;     12 -> UNUSED
  1630                                  ;     11 -> 1 IF THE DEVICE UNDERSTANDS OPEN/CLOSE
  1631                                  ;     10 -> MUST BE 0
  1632                                  ;      9 -> MUST BE 0
  1633                                  ;      8 -> UNUSED
  1634                                  ;      7 -> UNUSED
  1635                                  ;      6 -> UNUSED
  1636                                  ;      5 -> UNUSED
  1637                                  ;      4 -> 1 IF DEVICE IS RECIPIENT OF INT 29H
  1638                                  ;      3 -> 1 IF DEVICE IS CLOCK DEVICE
  1639                                  ;      2 -> 1 IF DEVICE IS NULL DEVICE
  1640                                  ;      1 -> 1 IF DEVICE IS CONSOLE OUTPUT
  1641                                  ;      0 -> 1 IF DEVICE IS CONSOLE INPUT
  1642                                  ;
  1643                                  ; BLOCK DEVICES:
  1644                                  ;
  1645                                  ; BIT 15 -> MUST BE 0
  1646                                  ;     14 -> 1 IF THE DEVICE UNDERSTANDS IOCTL CONTROL STRINGS
  1647                                  ;     13 -> 1 IF THE DEVICE DETERMINES MEDIA BY EXAMINING THE FAT ID BYTE.
  1648                                  ;	    THIS REQUIRES THE FIRST SECTOR OF THE FAT TO *ALWAYS* RESIDE IN
  1649                                  ;	    THE SAME PLACE.
  1650                                  ;     12 -> UNUSED
  1651                                  ;     11 -> 1 IF THE DEVICE UNDERSTANDS OPEN/CLOSE/REMOVABLE MEDIA
  1652                                  ;     10 -> MUST BE 0
  1653                                  ;      9 -> MUST BE 0
  1654                                  ;      8 -> UNUSED
  1655                                  ;      7 -> UNUSED
  1656                                  ;      6 -> IF DEVICE HAS SUPPORT FOR GETMAP/SETMAP OF LOGICAL DRIVES.
  1657                                  ;	    IF THE DEVICE UNDERSTANDS GENERIC IOCTL FUNCTION CALLS.
  1658                                  ;      5 -> UNUSED
  1659                                  ;      4 -> UNUSED
  1660                                  ;      3 -> UNUSED
  1661                                  ;      2 -> UNUSED
  1662                                  ;      1 -> UNUSED
  1663                                  ;      0 -> UNUSED
  1664                                  ;
  1665                                  
  1666                                  ;Attribute bit masks
  1667                                  DEVTYP  EQU     8000H           ;Bit 15 - 1  if Char, 0 if block
  1668                                  DEVIOCTL EQU    4000H           ;Bit 14 - CONTROL mode bit
  1669                                  ISFATBYDEV EQU  2000H           ;Bit 13 - Device uses FAT ID bytes, comp media.
  1670                                  
  1671                                  ; 09/07/2018 - Retro DOS
  1672                                  ; (DEVSYM.INC, MSDOS 3.3, 1987) 
  1673                                  
  1674                                  OUTTILBUSY EQU	2000H		; OUTPUT UNTIL BUSY IS ENABLED
  1675                                  ISNET	   EQU	1000H		; BIT 12 - 1 IF A NET DEVICE, 0 IF
  1676                                  				;  NOT.  CURRENTLY BLOCK ONLY.
  1677                                  DEVOPCL    EQU	0800H		; BIT 11 - 1 IF THIS DEVICE HAS
  1678                                  				;  OPEN,CLOSE AND REMOVABLE MEDIA
  1679                                  				;  ENTRY POINTS, 0 IF NOT
  1680                                  
  1681                                  EXTENTBIT  EQU	0400H		; BIT 10 - CURRENTLY 0 ON ALL DEVS
  1682                                  				;  THIS BIT IS RESERVED FOR FUTURE USE
  1683                                  				;  TO EXTEND THE DEVICE HEADER BEYOND
  1684                                  				;  ITS CURRENT FORM.
  1685                                  
  1686                                  ; NOTE BIT 9 IS CURRENTLY USED ON IBM SYSTEMS TO INDICATE "DRIVE IS SHARED".
  1687                                  ;    SEE IOCTL FUNCTION 9. THIS USE IS NOT DOCUMENTED, IT IS USED BY SOME
  1688                                  ;    OF THE UTILITIES WHICH ARE SUPPOSED TO FAIL ON SHARED DRIVES ON SERVER
  1689                                  ;    MACHINES (FORMAT,CHKDSK,RECOVER,..).
  1690                                  
  1691                                  DEV320	EQU	0040H		;BIT 6 - FOR BLOCK DEVICES, THIS
  1692                                  				;DEVICE SUPPORTS SET/GET MAP OF
  1693                                  				;LOGICAL DRIVES, AND SUPPORTS
  1694                                  				;GENERIC IOCTL CALLS.
  1695                                  				;FOR CHARACTER DEVICES, THIS
  1696                                  				;DEVICE SUPPORTS GENERIC IOCTL.
  1697                                  				;THIS IS A DOS 3.2 DEVICE DRIVER.
  1698                                  
  1699                                  ISSPEC	EQU     0010H		;Bit 4 - This device is special ; 15/03/2018
  1700                                  ;ISIBM	EQU     0010H		;Bit 4 - This device is special
  1701                                  ISCLOCK EQU     0008H           ;Bit 3 - This device is the clock device.
  1702                                  ISNULL  EQU     0004H           ;Bit 2 - This device is the null device.
  1703                                  ISCOUT  EQU     0002H           ;Bit 1 - This device is the console output.
  1704                                  ISCIN   EQU     0001H           ;Bit 0 - This device is the console input.
  1705                                  
  1706                                  ;Static Reguest Header
  1707                                  struc	SRHEAD
  1708 00000000 ??                      .REQLEN:	resb 1		;Length in bytes of request block
  1709 00000001 ??                      .REQUNIT:	resb 1		;Device unit number
  1710 00000002 ??                      .REQFUNC:	resb 1		;Type of request
  1711 00000003 ????                    .REQSTAT:	resw 1		;Status Word
  1712 00000005 ????????????????                	resb 8		;Reserved for queue links
  1713                                  .size:
  1714                                  endstruc
  1715                                  
  1716                                  ;Status word masks
  1717                                  STERR   EQU     8000H           ;Bit 15 - Error
  1718                                  STBUI   EQU     0200H           ;Bit 9 - Buisy
  1719                                  STDON   EQU     0100H           ;Bit 8 - Done
  1720                                  STECODE EQU     00FFH           ;Error code
  1721                                  WRECODE EQU     0
  1722                                  
  1723                                  ;Function codes
  1724                                  DEVINIT EQU     0               ;Initialization
  1725                                  DINITHL EQU     26              ;Size of init header
  1726                                  DEVMDCH EQU     1               ;Media check
  1727                                  DMEDHL  EQU     15              ;Size of media check header
  1728                                  DEVBPB  EQU     2               ;Get BPB
  1729                                  DEVRDIOCTL EQU  3               ;IOCTL read
  1730                                  DBPBHL  EQU     22              ;Size of Get BPB header
  1731                                  DEVRD   EQU     4               ;Read
  1732                                  DRDWRHL EQU     22              ;Size of RD/WR header
  1733                                  DEVRDND EQU     5               ;Non destructive read no wait (character devs)
  1734                                  DRDNDHL EQU     14              ;Size of non destructive read header
  1735                                  DEVIST  EQU     6               ;Input status
  1736                                  DSTATHL EQU     13              ;Size of status header
  1737                                  DEVIFL  EQU     7               ;Input flush
  1738                                  DFLSHL  EQU     15              ;Size of flush header
  1739                                  DEVWRT  EQU     8               ;Write
  1740                                  DEVWRTV EQU     9               ;Write with verify
  1741                                  DEVOST  EQU     10              ;Output status
  1742                                  DEVOFL  EQU     11              ;Output flush
  1743                                  DEVWRIOCTL EQU  12              ;IOCTL write
  1744                                  
  1745                                  ; 09/07/2018 - Retro DOS v3.0
  1746                                  ; (DEVSYM.INC, MSDOS 3.3, 1987) 
  1747                                  
  1748                                  DEVOPN	EQU	13		;DEVICE OPEN
  1749                                  DEVCLS	EQU	14		;DEVICE CLOSE
  1750                                  DOPCLHL EQU	13		;SIZE OF OPEN/CLOSE HEADER
  1751                                  DEVRMD	EQU	15		;REMOVABLE MEDIA
  1752                                  ; 07/08/2018 - Retro DOS v3.0
  1753                                  REMHL	EQU	13		;SIZE OF REMOVABLE MEDIA HEADER
  1754                                  GENIOCTL EQU	19
  1755                                  
  1756                                  ; THE NEXT THREE ARE USED IN DOS 4.0
  1757                                  ;		     20
  1758                                  ;		     21
  1759                                  ;		     22
  1760                                  DEVGETOWN      EQU   23		;GET DEVICE OWNER
  1761                                  DEVSETOWN      EQU   24		;SET DEVICE OWNER
  1762                                  OWNHL	       EQU   13		;SIZE OF DEVICE OWNER HEADER
  1763                                  
  1764                                  DEVOUT	       EQU   16		; OUTPUT UNTIL BUSY.
  1765                                  DEVOUTL        EQU   DEVWRT	; LENGTH OF OUTPUT UNTIL BUSY
  1766                                  
  1767                                  ; GENERIC IOCTL REQUEST STRUCTURE
  1768                                  ;	SEE THE DOS 4.0 DEVICE DRIVER SPEC FOR FURTHER ELABORATION.
  1769                                  ;
  1770                                  
  1771                                  struc IOCTL_REQ
  1772 00000000 <res Dh>                .SRHEAD:	resb SRHEAD.size
  1773                                  				; GENERIC IOCTL ADDITION.
  1774 0000000D ??                      .MAJORFUNCTION: resb 1		;FUNCTION CODE
  1775 0000000E ??                      .MINORFUNCTION: resb 1		;FUNCTION CATEGORY
  1776 0000000F ????                    .REG_SI:	resw 1
  1777 00000011 ????                    .REG_DI:	resw 1
  1778 00000013 ????????                .GENERICIOCTL_PACKET: resd 1	; POINTER TO DATA BUFFER
  1779                                  .size: ; 07/08/2018
  1780                                  endstruc
  1781                                  
  1782                                  ; DEFINITIONS FOR IOCTL_REQ.MINORFUNCTION
  1783                                  GEN_IOCTL_WRT_TRK EQU	40H
  1784                                  GEN_IOCTL_RD_TRK  EQU	60H
  1785                                  GEN_IOCTL_FN_TST  EQU	20H	; USED TO DIFF. BET READS AND WRTS
  1786                                  
  1787                                  ;============================================================================
  1788                                  ; ERROR.INC (MSDOS 6.0, 1991)
  1789                                  ;============================================================================
  1790                                  ; 16/07/2018 - Retro DOS v3.0 
  1791                                  
  1792                                  ;**	ERROR.INC - DOS Error Codes
  1793                                  ;
  1794                                  ;    The newer (DOS 2.0 and above) "XENIX-style" calls
  1795                                  ;    return error codes through AX. If an error occurred then
  1796                                  ;    the carry bit will be set and the error code is in AX. If no error
  1797                                  ;    occurred then the carry bit is reset and AX contains returned info.
  1798                                  ;
  1799                                  ;    Since the set of error codes is being extended as we extend the operating
  1800                                  ;    system, we have provided a means for applications to ask the system for a
  1801                                  ;    recommended course of action when they receive an error.
  1802                                  ;
  1803                                  ;    The GetExtendedError system call returns a universal error, an error
  1804                                  ;    location and a recommended course of action. The universal error code is
  1805                                  ;    a symptom of the error REGARDLESS of the context in which GetExtendedError
  1806                                  ;    is issued.
  1807                                  
  1808                                  
  1809                                  ;	2.0 error codes
  1810                                  
  1811                                  error_invalid_function		EQU	1
  1812                                  error_file_not_found		EQU	2
  1813                                  error_path_not_found		EQU	3
  1814                                  error_too_many_open_files	EQU	4
  1815                                  error_access_denied		EQU	5
  1816                                  error_invalid_handle		EQU	6
  1817                                  error_arena_trashed		EQU	7
  1818                                  error_not_enough_memory 	EQU	8
  1819                                  error_invalid_block		EQU	9
  1820                                  error_bad_environment		EQU	10
  1821                                  error_bad_format		EQU	11
  1822                                  error_invalid_access		EQU	12
  1823                                  error_invalid_data		EQU	13
  1824                                  ;**** reserved			EQU	14	; *****
  1825                                  error_invalid_drive		EQU	15
  1826                                  error_current_directory 	EQU	16
  1827                                  error_not_same_device		EQU	17
  1828                                  error_no_more_files		EQU	18
  1829                                  
  1830                                  ;	These are the universal int 24 mappings for the old INT 24 set of errors
  1831                                  
  1832                                  error_write_protect		EQU	19
  1833                                  error_bad_unit			EQU	20
  1834                                  error_not_ready 		EQU	21
  1835                                  error_bad_command		EQU	22
  1836                                  error_CRC			EQU	23
  1837                                  error_bad_length		EQU	24
  1838                                  error_seek			EQU	25
  1839                                  error_not_DOS_disk		EQU	26
  1840                                  error_sector_not_found		EQU	27
  1841                                  error_out_of_paper		EQU	28
  1842                                  error_write_fault		EQU	29
  1843                                  error_read_fault		EQU	30
  1844                                  error_gen_failure		EQU	31
  1845                                  
  1846                                  ;	the new 3.0 error codes reported through INT 24
  1847                                  
  1848                                  error_sharing_violation 	EQU	32
  1849                                  error_lock_violation		EQU	33
  1850                                  error_wrong_disk		EQU	34
  1851                                  error_FCB_unavailable		EQU	35
  1852                                  error_sharing_buffer_exceeded	EQU	36
  1853                                  error_Code_Page_Mismatched	EQU	37    ; DOS 4.00  ;AN000;
  1854                                  error_handle_EOF		EQU	38    ; DOS 4.00  ;AN000;
  1855                                  error_handle_Disk_Full		EQU	39    ; DOS 4.00  ;AN000;
  1856                                  
  1857                                  ;	New OEM network-related errors are 50-79
  1858                                  
  1859                                  error_not_supported		EQU	50
  1860                                  
  1861                                  error_net_access_denied		EQU	65	;M028
  1862                                  
  1863                                  ;	End of INT 24 reportable errors
  1864                                  
  1865                                  error_file_exists		EQU	80
  1866                                  error_DUP_FCB			EQU	81	; *****
  1867                                  error_cannot_make		EQU	82
  1868                                  error_FAIL_I24			EQU	83
  1869                                  
  1870                                  ;	New 3.0 network related error codes
  1871                                  
  1872                                  error_out_of_structures 	EQU	84
  1873                                  error_already_assigned		EQU	85
  1874                                  error_invalid_password		EQU	86
  1875                                  error_invalid_parameter 	EQU	87
  1876                                  error_NET_write_fault		EQU	88
  1877                                  error_sys_comp_not_loaded	EQU	90    ; DOS 4.00  ;AN000;
  1878                                  
  1879                                  ;	BREAK <Interrupt 24 error codes>
  1880                                  
  1881                                  ;**	Int24 Error Codes
  1882                                  
  1883                                  error_I24_write_protect 	EQU	0
  1884                                  error_I24_bad_unit		EQU	1
  1885                                  error_I24_not_ready		EQU	2
  1886                                  error_I24_bad_command		EQU	3
  1887                                  error_I24_CRC			EQU	4
  1888                                  error_I24_bad_length		EQU	5
  1889                                  error_I24_Seek			EQU	6
  1890                                  error_I24_not_DOS_disk		EQU	7
  1891                                  error_I24_sector_not_found	EQU	8
  1892                                  error_I24_out_of_paper		EQU	9
  1893                                  error_I24_write_fault		EQU	0Ah
  1894                                  error_I24_read_fault		EQU	0Bh
  1895                                  error_I24_gen_failure		EQU	0Ch
  1896                                  ; NOTE: Code 0DH is used by MT-DOS.
  1897                                  error_I24_wrong_disk		EQU	0Fh
  1898                                  
  1899                                  ;	THE FOLLOWING ARE MASKS FOR THE AH REGISTER ON Int 24
  1900                                  ;
  1901                                  ;	NOTE: ABORT is ALWAYS allowed
  1902                                  
  1903                                  Allowed_FAIL			EQU	00001000B
  1904                                  Allowed_RETRY			EQU	00010000B
  1905                                  Allowed_IGNORE			EQU	00100000B
  1906                                  
  1907                                  I24_operation			EQU	00000001B  ;Z if READ,NZ if Write
  1908                                  I24_area			EQU	00000110B  ; 00 if DOS
  1909                                  						   ; 01 if FAT
  1910                                  						   ; 10 if root DIR
  1911                                  						   ; 11 if DATA
  1912                                  I24_class			EQU	10000000B  ;Z if DISK, NZ if FAT or char
  1913                                  
  1914                                  ;	BREAK <GetExtendedError CLASSes ACTIONs LOCUSs>
  1915                                  
  1916                                  ;**	The GetExtendedError call takes an error code and returns CLASS,
  1917                                  ;	ACTION and LOCUS codes to help programs determine the proper action
  1918                                  ;	to take for error codes that they don't explicitly understand.
  1919                                  
  1920                                  ;	Values for error CLASS
  1921                                  
  1922                                  errCLASS_OutRes 	EQU	1	; Out of Resource
  1923                                  errCLASS_TempSit	EQU	2	; Temporary Situation
  1924                                  errCLASS_Auth		EQU	3	; Permission problem
  1925                                  errCLASS_Intrn		EQU	4	; Internal System Error
  1926                                  errCLASS_HrdFail	EQU	5	; Hardware Failure
  1927                                  errCLASS_SysFail	EQU	6	; System Failure
  1928                                  errCLASS_Apperr 	EQU	7	; Application Error
  1929                                  errCLASS_NotFnd 	EQU	8	; Not Found
  1930                                  errCLASS_BadFmt 	EQU	9	; Bad Format
  1931                                  errCLASS_Locked 	EQU	10	; Locked
  1932                                  errCLASS_Media		EQU	11	; Media Failure
  1933                                  errCLASS_Already	EQU	12	; Collision with Existing Item
  1934                                  errCLASS_Unk		EQU	13	; Unknown/other
  1935                                  
  1936                                  ;	Values for error ACTION
  1937                                  
  1938                                  errACT_Retry		EQU	1	; Retry
  1939                                  errACT_DlyRet		EQU	2	; Delay Retry, retry after pause
  1940                                  errACT_User		EQU	3	; Ask user to regive info
  1941                                  errACT_Abort		EQU	4	; abort with clean up
  1942                                  errACT_Panic		EQU	5	; abort immediately
  1943                                  errACT_Ignore		EQU	6	; ignore
  1944                                  errACT_IntRet		EQU	7	; Retry after User Intervention
  1945                                  
  1946                                  ;	Values for error LOCUS
  1947                                  
  1948                                  errLOC_Unk		EQU	1	; No appropriate value
  1949                                  errLOC_Disk		EQU	2	; Random Access Mass Storage
  1950                                  errLOC_Net		EQU	3	; Network
  1951                                  errLOC_SerDev		EQU	4	; Serial Device
  1952                                  errLOC_Mem		EQU	5	; Memory
  1953                                  
  1954                                  ;============================================================================
  1955                                  ; MULT.INC (MSDOS 3.3, 1987)
  1956                                  ;============================================================================
  1957                                  
  1958                                  ;Break <Critical section and Multiplex channels>
  1959                                  
  1960                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1961                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  1962                                  ;									   ;
  1963                                  ; Critical section definitions
  1964                                  ;
  1965                                  ; These below are subject to leave-all sections
  1966                                  critDisk    EQU     1			; Disk I/O critical section
  1967                                  critDevice  EQU     2			; Device I/O critical section
  1968                                  critShare   EQU     1			; Sharer I/O critical section
  1969                                  critMem     EQU     1			; memory maintenance critical section
  1970                                  critNet     EQU     5			; network critical section
  1971                                  critSFT     EQU     1			; sft table allocation
  1972                                  ; These below are not subject to leave-all sections
  1973                                  critASSIGN  EQU     8			; Assign has munged a system call
  1974                                  ;									   ;
  1975                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  1976                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1977                                  
  1978                                  ;
  1979                                  ; The current set of defined multiplex channels is (* means documented):
  1980                                  ;
  1981                                  ;   Channel(h)	Issuer		Receiver    Function
  1982                                  ;      00	server		PSPRINT     print job control
  1983                                  ;     *01	print/apps	PRINT	    Queueing of files
  1984                                  ;      02	BIOS		REDIR	    signal open/close of printers
  1985                                  ;
  1986                                  ;      05	command 	REDIR	    obtain text of net int 24 message
  1987                                  ;     *06	server/assign	ASSIGN	    Install check
  1988                                  ;
  1989                                  ;      08	external driver IBMBIO	    interface to internal routines
  1990                                  ;
  1991                                  ;      10	sharer/server	Sharer	    install check
  1992                                  ;      11	DOS/server	Redir	    install check/redirection funcs
  1993                                  ;      12	sharer/redir	DOS	    dos functions and structure maint
  1994                                  ;      13	MSNET		MSNET	    movement of NCBs
  1995                                  ;      14	DOS		NLSFUNC     down load NLS country info,DOS 3.3
  1996                                  ;      14	Apps		Popup	    DOS 4.XX popup screen functions
  1997                                  ;	  ***> NOTE <***  Yes there are 2 users of 14h but since DOS 4.XX
  1998                                  ;			  doesn't use NLSFUNC, there is no conflict
  1999                                  ;      15	Apps		MSCDEX	    CD-ROM redirector interface
  2000                                  ;      16	Winoldap (?)	WIN386	    Private Windows communication
  2001                                  ;      17	Winoldap (?)	WIN386	    Win386 clipboard interface
  2002                                  ;      18	Apps		MS-Manager  Toggle interface to manager
  2003                                  ;      19,(13h) external driver IBMBIO	    Reset_Int_13, allows installation
  2004                                  ;					    of alternative INT_13 drivers after
  2005                                  ;					    boot_up
  2006                                  ;      B0	GRAFTABL	GRAFTABL
  2007                                  ;
  2008                                  
  2009                                  MultSHARE   EQU     10h 		; sharer
  2010                                      ;	1   MFT_enter
  2011                                      ;	2   MFTClose
  2012                                      ;	3   MFTclU
  2013                                      ;	4   MFTCloseP
  2014                                      ;	5   MFTCloN
  2015                                      ;	6   set_block
  2016                                      ;	7   clr_block
  2017                                      ;	8   chk_block
  2018                                      ;	9   MFT_get
  2019                                      ;	10  ShSave
  2020                                      ;	11  ShChk
  2021                                      ;	12  ShCol
  2022                                      ;	13  ShCloseFile
  2023                                  
  2024                                  MultNET     EQU     11h 		; Network support
  2025                                      ;	1   NET_RMDIR
  2026                                      ;	2   NET_SEQ_RMDIR
  2027                                      ;	3   NET_MKDIR
  2028                                      ;	4   NET_SEQ_MKDIR
  2029                                      ;	5   NET_CHDIR
  2030                                      ;	6   NET_CLOSE
  2031                                      ;	7   NET_COMMIT
  2032                                      ;	8   NET_READ
  2033                                      ;	9   NET_WRITE
  2034                                      ;	10  NET_LOCK
  2035                                      ;	11  NET_UNLOCK
  2036                                      ;	12  NET_DISK_INFO
  2037                                      ;	13  NET_SET_FILE_ATTRIBUTE
  2038                                      ;	14  NET_SEQ_SET_FILE_ATTRIBUTE
  2039                                      ;	15  NET_GET_FILE_INFO
  2040                                      ;	16  NET_SEQ_GET_FILE_INFO
  2041                                      ;	17  NET_RENAME
  2042                                      ;	18  NET_SEQ_RENAME
  2043                                      ;	19  NET_DELETE
  2044                                      ;	20  NET_SEQ_DELETE
  2045                                      ;	21  NET_OPEN
  2046                                      ;	22  NET_SEQ_OPEN
  2047                                      ;	23  NET_CREATE
  2048                                      ;	24  NET_SEQ_CREATE
  2049                                      ;	25  NET_SEQ_SEARCH_FIRST
  2050                                      ;	26  NET_SEQ_SEARCH_NEXT
  2051                                      ;	27  NET_SEARCH_FIRST
  2052                                      ;	28  NET_SEARCH_NEXT
  2053                                      ;	29  NET_ABORT
  2054                                      ;	30  NET_ASSOPER
  2055                                      ;	31  Printer_SET_STRING
  2056                                      ;	32  NetFlushBuf
  2057                                      ;	33  NetBufWrite
  2058                                      ;	34  NetResetEnvironment
  2059                                      ;	35  NetSpoolCheck
  2060                                      ;	36  NetSpoolClose
  2061                                  
  2062                                  MultDOS     EQU     12h 		; DOS call back
  2063                                      ;	1   DOS_CLOSE
  2064                                      ;	2   RECSET
  2065                                      ;	3   Get DOSGROUP
  2066                                      ;	4   PATHCHRCMP
  2067                                      ;	5   OUT
  2068                                      ;	6   NET_I24_ENTRY
  2069                                      ;	7   PLACEBUF
  2070                                      ;	8   FREE_SFT
  2071                                      ;	9   BUFWRITE
  2072                                      ;	10  SHARE_VIOLATION
  2073                                      ;	11  SHARE_ERROR
  2074                                      ;	12  SET_SFT_MODE
  2075                                      ;	13  DATE16
  2076                                      ;	14  SETVISIT
  2077                                      ;	15  SCANPLACE
  2078                                      ;	16  SKIPVISIT
  2079                                      ;	17  StrCpy
  2080                                      ;	18  StrLen
  2081                                      ;	19  UCase
  2082                                      ;	20  POINTCOMP
  2083                                      ;	21  CHECKFLUSH
  2084                                      ;	22  SFFromSFN
  2085                                      ;	23  GetCDSFromDrv
  2086                                      ;	24  Get_User_Stack
  2087                                      ;	25  GetThisDrv
  2088                                      ;	26  DriveFromText
  2089                                      ;	27  SETYEAR
  2090                                      ;	28  DSUM
  2091                                      ;	29  DSLIDE
  2092                                      ;	30  StrCmp
  2093                                      ;	31  initcds
  2094                                      ;	32  pjfnfromhandle
  2095                                      ;	33  $NameTrans
  2096                                      ;	34  CAL_LK
  2097                                      ;	35  DEVNAME
  2098                                      ;	36  Idle
  2099                                      ;
  2100                                  NLSFUNC     EQU     14h 		; NLSFUNC CALL , DOS 3.3
  2101                                      ;	0   NLSInstall
  2102                                      ;	1   ChgCodePage
  2103                                      ;	2   GetExtInfo
  2104                                      ;	3   SetCodePage
  2105                                      ;	4   GetCntry
  2106                                      ;
  2107                                  ;FASTOPEN is not chained through INT 2F   ; DOS 3.3 F.C.
  2108                                  ;	  it calls Multdos 42 to set up an entry routine address
  2109                                      ;	0   Install status  (reserved)
  2110                                      ;	1   Lookup
  2111                                      ;	2   Insert
  2112                                      ;	3   Delete
  2113                                      ;	4   Purge	    (reserved)
  2114                                  
  2115                                  ;============================================================================
  2116                                  ; FIND.INC (MSDOS 3.3, 1987)
  2117                                  ;============================================================================
  2118                                  ; 09/07/2018 - Retro DOS v3.0
  2119                                  
  2120                                  ;Break	<find first/next buffer>
  2121                                  
  2122                                  struc find_buf
  2123 00000000 ??                      .drive:	    resb 1		; drive of search
  2124 00000001 <res Bh>                .name:	    resb 11		; formatted name
  2125 0000000C ??                      .sattr:	    resb 1		; attribute of search
  2126 0000000D ????                    .LastEnt:   resw 1		; LastEnt
  2127 0000000F ????                    .DirStart:  resw 1		; DirStart
  2128 00000011 ??                      .attr:	    resb 1		; attribute found
  2129 00000012 ????                    .time:	    resw 1		; time
  2130 00000014 ????                    .date:	    resw 1		; date
  2131 00000016 ????                    .size_l:    resw 1		; low(size)
  2132 00000018 ????                    .size_h:    resw 1		; high(size)
  2133 0000001A <res Dh>                .pname:	    resb 13		; packed name
  2134                                  .size:
  2135                                  endstruc
  2136                                  
  2137                                  ;============================================================================
  2138                                  ; DOSCNTRY.INC (MSDOS 3.3, 1987)
  2139                                  ;============================================================================
  2140                                  ; 09/07/2018 - Retro DOS v3.0
  2141                                  
  2142                                  ;Equates for COUNTRY INFORMATION.
  2143                                  SetCountryInfo	EQU	1	;country info
  2144                                  SetUcase	EQU	2	;uppercase table
  2145                                  SetLcase	EQU	3	;lowercase table (Reserved)
  2146                                  SetUcaseFile	EQU	4	;uppercase file spec table
  2147                                  SetFileList	EQU	5	;valid file character list
  2148                                  SetCollate	EQU	6	;collating sequence
  2149                                  SetDBCS 	EQU	7	;double byte character set
  2150                                  SetALL		EQU	-1	;all the entries
  2151                                  
  2152                                  
  2153                                  ;DOS country and code page information table structure.
  2154                                  ;Internally, IBMDOS gives a pointer to this table.
  2155                                  ;IBMBIO, MODE and NLSFUNC modules communicate with IBMDOS through
  2156                                  ;this structure.
  2157                                  struc  DOS_CCDPG	; DOS_country_cdpg_info
  2158 00000000 ????????????????        .ccInfo_reserved: 	resb 8	;reserved for internal use
  2159 00000008 <res 40h>               .ccPath_CountrySys:	resb 64 ;path and filename for country info
  2160 00000048 ????                    .ccSysCodePage:		resw 1	;system code page id
  2161 0000004A ????                    .ccNumber_of_entries:	resw 1  ; (default value = 5)
  2162 0000004C ??                      .ccSetUcase:		resb 1  ; (default value = SetUcase)
  2163 0000004D ????????                .ccUcase_ptr:		resd 1	;pointer to Ucase table
  2164                                  
  2165 00000051 ??                      .ccSetUcaseFile:	resb 1	; (default value = SetUcaseFile)
  2166 00000052 ????????                .ccFileUcase_ptr: 	resd 1	;pointer to File Ucase table
  2167                                  
  2168 00000056 ??                      .ccSetFileList:		resb 1 	; (default value = SetFileList)
  2169 00000057 ????????                .ccFileChar_ptr:	resd 1	;pointer to File char list table
  2170                                  
  2171 0000005B ??                      .ccSetCollate:		resb 1	; (default value = SetCollate)
  2172 0000005C ????????                .ccCollate_ptr:		resd 1	;pointer to collate table
  2173                                  
  2174 00000060 ??                      .ccSetCountryInfo:	resb 1  ; (default value = SetCountryInfo)
  2175 00000061 ????                    .ccCountryInfoLen:	resw 1	;length of country info
  2176 00000063 ????                    .ccDosCountry:		resw 1	;system country code id
  2177 00000065 ????                    .ccDosCodePage:		resw 1	;system code page id
  2178 00000067 ????                    .ccDFormat:		resw 1	;date format
  2179 00000069 ??????????              .ccCurSymbol:		resb 5	;5 byte of (currency symbol+0)
  2180 0000006E ????                    .cc1000Sep:		resb 2	;2 byte of (1000 sep. + 0)
  2181 00000070 ????                    .ccDecSep:		resb 2	;2 byte of (Decimal sep. + 0)
  2182 00000072 ????                    .ccDateSep:		resb 2	;2 byte of (date sep. + 0)
  2183 00000074 ????                    .ccTimeSep:		resb 2	;2 byte of (time sep. + 0)
  2184 00000076 ??                      .ccCFormat:		resb 1	;currency format flags
  2185 00000077 ??                      .ccCSigDigits:		resb 1	;# of digits in currency
  2186 00000078 ??                      .ccTFormat:		resb 1	;time format
  2187 00000079 ????????                .ccMono_Ptr:		resd 1	;monocase routine entry point
  2188 0000007D ????                    .ccListSep:		resb 2	;data list separator
  2189 0000007F <res Ah>                .ccReserved_area: 	resw 5	;reserved
  2190                                  .size:
  2191                                  endstruc
  2192                                  
  2193                                  ;Ucase table
  2194                                  struc CC_UCASE_TAB
  2195 00000000 ????                    .ccUcase_leng:		resw 1	; (default value = 128)
  2196 00000002 <res 80h>               .ccUcase_data:		resb 128
  2197                                  endstruc
  2198                                  
  2199                                  ;File Ucase table
  2200                                  struc CC_FILE_UCASE_TAB
  2201 00000000 ????                    .ccFileucase_leng:	resw 1	; (default value = 128)
  2202 00000002 <res 80h>               .ccFileucase_data:	resb 128
  2203                                  endstruc
  2204                                  
  2205                                  ;File char list
  2206                                  struc CC_FILE_CHAR_TAB
  2207 00000000 ????                    .ccFilechar_leng:	resw 1
  2208 00000002 <res 2Eh>               .ccFilechar_data:	resb 46
  2209                                  endstruc
  2210                                  
  2211                                  ;collate table
  2212                                  struc CC_COLLATE_TAB
  2213 00000000 ????                    .ccCollate_leng:	resw 1	; (default value = 128)
  2214 00000002 <res 100h>              .ccCollate_data:	resb 256
  2215                                  endstruc
  2216                                  
  2217                                  OLD_COUNTRY_SIZE  equ	(DOS_CCDPG.size - DOS_CCDPG.ccDFormat - 10)
  2218                                  NEW_COUNTRY_SIZE  equ	(DOS_CCDPG.size - DOS_CCDPG.ccDosCountry) 
  2219                                  
  2220                                  ; 06/08/2018
  2221                                  ; DOSCNTRY.INC (MSDOS 6.0, 1991)
  2222                                  
  2223                                  ;CAPITALIZATION equates
  2224                                  CAP_ONE_CHAR	equ	20H
  2225                                  CAP_STRING	equ	21H
  2226                                  CAP_ASCIIZ	equ	22H
  2227                                  CHECK_YES_NO	equ	23H
  2228                                  UPPER_TABLE	equ	80H
  2229                                  
  2230                                  ;NLS_YES	equ	59H  ; 'Y'
  2231                                  ;NLS_yes2	equ	79H  ; 'y' 	
  2232                                  ;NLS_NO		equ	4EH  ; 'N'	
  2233                                  ;NLS_no2	equ	6EH  ; 'n'	
  2234                                  
  2235                                  ;============================================================================
  2236                                  ; CURDIR.INC (MSDOS 3.3, 1987)
  2237                                  ;============================================================================
  2238                                  ; 09/07/2018 - Retro DOS v3.0
  2239                                  
  2240                                  ;BREAK <Current directory list structure>
  2241                                  
  2242                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2243                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2244                                  ;									   ;
  2245                                  ; CDS items are used bu the internal routines to store cluster numbers and ;
  2246                                  ; network identifiers for each logical name.  The ID field is used dually, ;
  2247                                  ; both as net ID and for a cluster number for local devices.  In the case  ;
  2248                                  ; of local devices, the cluster number will be -1 if there is a potential  ;
  2249                                  ; of the disk being changed or if the path must be recracked.  The END	   ;
  2250                                  ; field is the location of the end of the definition.  No .. is allowed    ;
  2251                                  ; past this point							   ;
  2252                                  
  2253                                  DIRSTRLEN	EQU	64+3		; Max length in bytes of directory strings
  2254                                  TEMPLEN 	EQU	DIRSTRLEN*2
  2255                                  
  2256                                  struc curdir	; curdir_list
  2257 00000000 <res 43h>               .text:		resb DIRSTRLEN		; text of assignment and curdir
  2258 00000043 ????                    .flags:		resw 1			; various flags
  2259 00000045 ????????                .devptr:	resd 1			; local pointer to DPB or net device
  2260 00000049 ????                    .ID:		resw 1			; cluster of current dir (net ID)
  2261 0000004B ????                    		resw 1
  2262 0000004D ????                    .user_word:	resw 1
  2263 0000004F ????                    .end:		resw 1			; end of assignment
  2264                                  .size:
  2265                                  endstruc
  2266                                  
  2267                                  curdirLen	EQU curdir.size		; Needed for screwed up
  2268                                  
  2269                                  %define curdir_netID curdir_ID  ; dword
  2270                                  
  2271                                  ;Flag word masks
  2272                                  curdir_isnet	EQU	1000000000000000B
  2273                                  curdir_inuse	EQU	0100000000000000B
  2274                                  curdir_splice	EQU	0010000000000000B
  2275                                  curdir_local	EQU	0001000000000000B
  2276                                  ;									   ;
  2277                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2278                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2279                                  
  2280                                  ;============================================================================
  2281                                  ; CPMFCB.INC (MSDOS 3.3, 1987)
  2282                                  ;============================================================================
  2283                                  ; 09/07/2018 - Retro DOS v3.0
  2284                                  
  2285                                  ;BREAK <File Control Block definition>
  2286                                  
  2287                                  ;
  2288                                  ; Field definition for FCBs
  2289                                  ; The FCB has the following structure:
  2290                                  ;
  2291                                  ;	+---------------------------+
  2292                                  ;	|   Drive indicator(byte)   |
  2293                                  ;	+---------------------------+
  2294                                  ;	|    Filename (8 chars)     |
  2295                                  ;	+---------------------------+
  2296                                  ;	|    Extension (3 chars)    |
  2297                                  ;	+---------------------------+
  2298                                  ;	|   Current Extent(word)    |
  2299                                  ;	+---------------------------+
  2300                                  ;	|    Record size (word)     |
  2301                                  ;	+---------------------------+
  2302                                  ;	|    File Size (2 words)    |
  2303                                  ;	+---------------------------+
  2304                                  ;	|	Date of write	    |
  2305                                  ;	+---------------------------+
  2306                                  ;	|	Time of write	    |
  2307                                  ;	+---------------------------+
  2308                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2309                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2310                                  ;									   ;
  2311                                  ;	+---------------------------+
  2312                                  ;	|   8 bytes reserved	    |
  2313                                  ;	+---------------------------+
  2314                                  ;									   ;
  2315                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2316                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2317                                  ;	|    next record number     |
  2318                                  ;	+---------------------------+
  2319                                  ;	|   random record number    |
  2320                                  ;	+---------------------------+
  2321                                  ;
  2322                                  
  2323                                  struc	SYS_FCB
  2324 00000000 ??                      .drive:	resb 1
  2325 00000001 ????????????????        .name:	resb 8
  2326 00000009 ??????                  .ext:	resb 3
  2327 0000000C ????                    .EXTENT: resw 1
  2328 0000000E ????                    .RECSIZ: resw 1			; Size of record (user settable)
  2329 00000010 ????                    .FILSIZ: resw 1			; Size of file in bytes; used with the
  2330                                  				; following word
  2331 00000012 ????                    .DRVBP:	resw 1			; BP for SEARCH FIRST and SEARCH NEXT
  2332 00000014 ????                    .FDATE:	resw 1			; Date of last writing
  2333 00000016 ????                    .FTIME:	resw 1			; Time of last writing
  2334                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2335                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2336                                  ;									   ;
  2337 00000018 ????????????????        .reserved: resb 8		; RESERVED
  2338                                  ;									   ;
  2339                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2340                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2341 00000020 ??                      .NR:	resb 1			; Next record
  2342 00000021 ????????                .RR:	resb 4			; Random record
  2343                                  endstruc
  2344                                  
  2345                                  FILDIRENT EQU SYS_FCB.FILSIZ	; Used only by SEARCH FIRST and SEARCH
  2346                                  				; NEXT
  2347                                  ; 20/07/2018
  2348                                  %define fcb_sfn	SYS_FCB.reserved ; byte
  2349                                  
  2350                                  ; Note that fcb_net_handle, fcb_nsl_drive, fcb_nsld_drive and fcb_l_drive
  2351                                  ; all must point to the same byte.  Otherwise, the FCBRegen will fail.
  2352                                  ; NOTE about this byte (fcb_nsl_drive)
  2353                                  ;   The high two bits of this byte are used as follows to indicate the FCB type
  2354                                  ;	00 means a local file or device with sharing loaded
  2355                                  ;	10 means a remote (network) file
  2356                                  ;	01 means a local file with no sharing loaded
  2357                                  ;	11 means a local device with no sharing loaded
  2358                                  
  2359                                  ; 20/07/2018
  2360                                  
  2361                                  ;
  2362                                  ; Network FCB
  2363                                  ;
  2364                                  
  2365                                  %define fcb_net_drive	SYS_FCB.reserved+1  ; byte
  2366                                  %define fcb_net_handle	SYS_FCB.reserved+2  ; word
  2367                                  %define fcb_netID	SYS_FCB.reserved+4  ; dword		
  2368                                  
  2369                                  ;
  2370                                  ; No sharing local file FCB
  2371                                  ;
  2372                                  
  2373                                  %define fcb_nsl_drive	SYS_FCB.reserved+1  ; byte
  2374                                  %define fcb_nsl_bits	SYS_FCB.reserved+2  ; byte	
  2375                                  %define fcb_nsl_firclus SYS_FCB.reserved+3  ; word	
  2376                                  %define fcb_nsl_dirsec	SYS_FCB.reserved+5  ; word
  2377                                  %define fcb_nsl_dirpos  SYS_FCB.reserved+7  ; byte
  2378                                  
  2379                                  ;
  2380                                  ; No sharing local device FCB
  2381                                  ;
  2382                                  
  2383                                  %define fcb_nsld_drive	SYS_FCB.reserved+1  ; byte	
  2384                                  %define fcb_nsld_drvptr SYS_FCB.reserved+2  ; dword
  2385                                  
  2386                                  ;
  2387                                  ; Sharing local FCB
  2388                                  ;
  2389                                  
  2390                                  %define fcb_l_drive	SYS_FCB.reserved+1  ; byte
  2391                                  %define fcb_l_firclus	SYS_FCB.reserved+2  ; word
  2392                                  %define fcb_l_mfs	SYS_FCB.reserved+4  ; word
  2393                                  %define fcb_l_attr	SYS_FCB.reserved+6  ; byte
  2394                                  
  2395                                  ;
  2396                                  ; Bogusness:  the four cases are:
  2397                                  ;
  2398                                  ;   local file	    00
  2399                                  ;   local device    40
  2400                                  ;   local sharing   C0
  2401                                  ;   network	    80
  2402                                  ;
  2403                                  ; Since sharing and network collide, we cannot use a test instruction for
  2404                                  ; deciding whether a network or a share check in involved
  2405                                  ;
  2406                                  FCBDEVICE   EQU 040h
  2407                                  FCBNETWORK  EQU 080h
  2408                                  FCBSHARE    EQU 0C0h
  2409                                  
  2410                                  ; FCBSPECIAL must be able to mask off both net and share
  2411                                  FCBSPECIAL  EQU 080h
  2412                                  FCBMASK     EQU 0C0h
  2413                                  
  2414                                  ;============================================================================
  2415                                  ; FASTOPEN.INC, MSDOS 6.0, 1991
  2416                                  ;============================================================================
  2417                                  ; 11/07/2018 - Retro DOS v3.0
  2418                                  
  2419                                  struc	FEI	; FASTOPEN_EXTENDED_INFO
  2420 00000000 ??                      .dirpos:	resb 1
  2421                                  ;.dirsec:	resd 1 ; MSDOS 6.0
  2422 00000001 ????                    .dirsec:	resw 1 ; MSDOS 3.3
  2423 00000003 ????                    .clusnum:	resw 1
  2424                                  ;.lastent:	resw 1	; for search first ; MSDOS 6.0
  2425                                  ;.dirstart:	resw 1	; for search first ; MSDOS 6.0
  2426                                  .size:
  2427                                  endstruc
  2428                                  
  2429                                  ; 23/07/2018
  2430                                  ;FASTOPEN NAME CACHING Subfunctions
  2431                                  FONC_Look_up	equ	1
  2432                                  FONC_insert	equ	2
  2433                                  FONC_delete	equ	3
  2434                                  FONC_update	equ	4
  2435                                  FONC_purge	equ	5	;reserved for the future use.
  2436                                  FONC_Rename	equ	6	;AN001
  2437                                  
  2438                                  ; 27/07/2018
  2439                                  ;FastOpen Data Structure
  2440                                  struc fastopen_entry	;Fastopen Entry pointer in DOS
  2441 00000000 ????                    .entry_size:	resw 1	; = 4	; size of the following
  2442 00000002 ????????                .name_caching:	resd 1
  2443                                  ; MSDOS 6.0
  2444                                  ;.fatchain_caching: resd 1	;reserved for future use
  2445                                  .size:
  2446                                  endstruc
  2447                                  
  2448                                  ; 27/07/2018
  2449                                  ;Equates used in DOS.
  2450                                  FastOpen_Set	       equ     00000001b
  2451                                  FastOpen_Reset	       equ     11111110b
  2452                                  Lookup_Success	       equ     00000010b
  2453                                  Lookup_Reset	       equ     11111101b
  2454                                  Special_Fill_Set       equ     00000100b
  2455                                  Special_Fill_Reset     equ     11111011b
  2456                                  No_Lookup	       equ     00001000b
  2457                                  Set_For_Search	       equ     00010000b	;DCR 167
  2458                                  
  2459                                  ; 09/08/2018 
  2460                                  ; (FASTXXXX.INC, MSDOS 6.0, 1991)
  2461                                  ; Fastxxx equates
  2462                                  FastOpen_ID	   equ	   1
  2463                                  FastSeek_ID	   equ	   2
  2464                                  Fast_yes	   equ	   10000000B	 ; fastxxx flag
  2465                                  
  2466                                  ;Structure definitions
  2467                                  ;
  2468                                  struc Fasttable_Entry	 ; Fastxxx  Entry pointer in DOS
  2469 00000000 ????                    .Fast_Entry_Num: resw 1	 ; number of entries
  2470 00000002 ????????                .FastOpen_Seek:	 resd 1	 ; fastopen & fastseek entry address
  2471                                  endstruc
  2472                                  
  2473                                  ;============================================================================
  2474                                  ; LOCK.INC, MSDOS 6.0, 1991
  2475                                  ;============================================================================
  2476                                  ; 14/07/2018 - Retro DOS v3.0
  2477                                  
  2478                                  ;**	LOCK.INC - Definitions for Record Locking
  2479                                  
  2480                                  ;**	LOCK functions
  2481                                  
  2482                                  LOCK_ALL	    equ    0
  2483                                  UNLOCK_ALL	    equ    1
  2484                                  LOCK_MUL_RANGE	    equ    2
  2485                                  UNLOCK_MUL_RANGE    equ    3
  2486                                  LOCK_READ	    equ    4
  2487                                  WRITE_UNLOCK	    equ    5
  2488                                  LOCK_ADD	    equ    6
  2489                                  
  2490                                  ;**	Structure for Lock buffer
  2491                                  
  2492                                  struc LockBuf
  2493 00000000 ????????                .Lock_position:	resd 1		; file position for LOCK
  2494 00000004 ????????                .Lock_length:	resd 1		; number of bytes to LOCK
  2495                                  endstruc
  2496                                  
  2497                                  ;============================================================================
  2498                                  ; DPL.ASM, MSDOS 6.0, 1991
  2499                                  ;============================================================================
  2500                                  ; 04/08/2018 - Retro DOS v3.0
  2501                                  
  2502                                  ; (SRVCALL.ASM)
  2503                                  
  2504                                  struc DPL
  2505 00000000 ????                    .AX:	resw	1	; AX register
  2506 00000002 ????                    .BX:	resw	1	; BX register
  2507 00000004 ????                    .CX:	resw	1	; CX register
  2508 00000006 ????                    .DX:	resw	1	; DX register
  2509 00000008 ????                    .SI:	resw	1	; SI register
  2510 0000000A ????                    .DI:	resw	1	; DI register
  2511 0000000C ????                    .DS:	resw	1	; DS register
  2512 0000000E ????                    .ES:	resw	1	; ES register
  2513 00000010 ????                    .rsrvd: resw	1	; Reserved
  2514 00000012 ????                    .UID:	resw	1	; User (Machine) ID (0 = local macine)
  2515 00000014 ????                    .PID:	resw	1	; Process ID (0 = local user PID)
  2516                                  .size:
  2517                                  endstruc
  2518                                   
  2519                                  ;============================================================================
  2520                                  ; MSDATA.ASM
  2521                                  ;============================================================================
  2522                                  ;============================================================================
  2523                                  ; MS_DATA.ASM (MSDOS 6.0, 1991) (1)
  2524                                  ;============================================================================
  2525                                  ; 16/07/2018 - Retro DOS 3.0	
  2526                                  
  2527                                  ;Break <Uninitialized data overlayed by initialization code>
  2528                                  
  2529                                  ;DOSDATA    SEGMENT WORD PUBLIC 'DATA'
  2530                                  ; Init code overlaps with data area below
  2531                                  
  2532                                  		; Offset 0358h in IBMDOS.COM (MSDOS 3.3)
  2533                                  
  2534                                  ;	I_am    TIMEBUF,6               ; Time read from clock device
  2535                                  ;	I_am    DEVIOBUF,2              ; Buffer for I/O under file assignment
  2536                                  
  2537                                  TIMEBUF		EQU 	DATASEGMENT	; Offset 0358h (in IBMDOS.COM 3.3)
  2538                                  DEVIOBUF	EQU	TIMEBUF+6
  2539                                  ;
  2540                                  ; The following areas are used as temp buffer in EXEC system call
  2541                                  ;
  2542                                  ;       I_am    OPENBUF,128             ; buffer for name operations
  2543                                  ;       I_am    RenBuf,128              ; buffer for rename destination
  2544                                  
  2545                                  OPENBUF		EQU	DEVIOBUF+2	; DATASEGMENT+8 
  2546                                  RENBUF		EQU	OPENBUF+128	; DATASEGMENT+136
  2547                                  
  2548                                  ; Buffer for search calls
  2549                                  ;        I_am    SEARCHBUF,53		; internal search buffer
  2550                                  ;        I_am    DummyCDS,curdirLen
  2551                                  
  2552                                  SEARCHBUF	EQU	RENBUF+128	; DATASEGMENT+264
  2553                                  DUMMYCDS	EQU	SEARCHBUF+53	; DATASEGMENT+317 
  2554                                  						; Offset 495h in MSDOS 3.3
  2555                                  ;
  2556                                  ; End of contiguous buffer
  2557                                  ;
  2558                                  
  2559                                  ; Temporary directory entry for use by many routines.  Device directory
  2560                                  ; entries (bogus) are built here.
  2561                                  ;
  2562                                  ;        PUBLIC  DevFCB
  2563                                  ;DEVFCB  LABEL   BYTE                    ; Uses NAME1, NAME2, combined
  2564                                  ; WARNING.. do not alter position of NAME1 relative to DEVFCB
  2565                                  ; without first examining BUILD_DEVICE_ENT. Look carefully at DOS_RENAME
  2566                                  ; as well as it is the only guy who uses NAME2 and DESTSTART.
  2567                                  
  2568                                  DEVFCB		EQU	DUMMYCDS+curdirLen ; DATASEGMENT+398
  2569                                  
  2570                                  ;	I_am    NAME1,12                ; File name buffer
  2571                                  ;       I_am    NAME2,13                ;
  2572                                  ;	I_am    DESTSTART,WORD          ;
  2573                                  ;	DB      ((SIZE DIR_ENTRY) - ($ - DEVFCB)) DUP (?)
  2574                                  
  2575                                  NAME1		EQU	DEVFCB		; Offset 04E6h in IBMDOS.COM 3.3
  2576                                  NAME2		EQU	NAME1+12	; DATASEGMENT+410
  2577                                  DESTSTART	EQU	NAME2+13	; DATASEGMENT+423
  2578                                  
  2579                                  ;
  2580                                  ; End Temporary directory entry.
  2581                                  ;
  2582                                  
  2583                                  ;       I_am    ATTRIB,BYTE             ; storage for file attributes
  2584                                  ;	I_am    EXTFCB,BYTE             ; TRUE => extended FCB in use
  2585                                  
  2586                                  ATTRIB		EQU	DEVFCB + dir_entry.size ; Offset 0506h
  2587                                  	; Offset 0507h in IBMDOS.COM (MSDOS 3.3) 
  2588                                  EXTFCB		EQU	ATTRIB+1	; DATASEGMENT+431
  2589                                  
  2590                                  ;       I_am    SATTRIB,BYTE            ; Storage for search attributes
  2591                                  ;       I_AM    open_access,BYTE        ; access of open system call
  2592                                  ;       I_am    FoundDel,BYTE           ; true => file was deleted
  2593                                  ;       I_am    Found_dev,BYTE          ; true => search found a device
  2594                                  ;       I_am    fSplice,BYTE            ; true => do a splice in transpath
  2595                                  ;       I_am    fSharing,BYTE           ; TRUE => no redirection
  2596                                  ;       I_am    SECCLUSPOS,BYTE         ; Position of first sector within cluster
  2597                                  ;       I_am    TRANS,BYTE              ;
  2598                                  ;       I_am    READOP,BYTE             ;
  2599                                  ;       I_am    THISDRV,BYTE            ;
  2600                                  ;       I_am    CLUSFAC,BYTE            ;
  2601                                  ;       I_am    CLUSSPLIT,BYTE          ;
  2602                                  ;       I_am    INSMODE,BYTE            ; true => insert mode in buffered read
  2603                                  ;       I_am    cMeta,BYTE              ; count of meta'ed components found
  2604                                  ;       I_am    VOLID,BYTE              ;
  2605                                  ;       I_am    exit_type,BYTE          ; type of exit...
  2606                                  
  2607                                  SATTRIB		EQU	EXTFCB+1	; DATASEGMENT+432
  2608                                  OPEN_ACCESS	EQU	SATTRIB+1	; DATASEGMENT+433
  2609                                  FOUNDDEL	EQU	OPEN_ACCESS+1	; DATASEGMENT+434
  2610                                  FOUND_DEV	EQU	FOUNDDEL+1	; DATASEGMENT+435
  2611                                  FSPLICE		EQU	FOUND_DEV+1	; DATASEGMENT+436
  2612                                  FSHARING	EQU	FSPLICE+1	; DATASEGMENT+437
  2613                                  SECCLUSPOS	EQU	FSHARING+1	; DATASEGMENT+438
  2614                                  TRANS		EQU	SECCLUSPOS+1	; DATASEGMENT+439
  2615                                  READOP		EQU	TRANS+1		; DATASEGMENT+440	
  2616                                  THISDRV		EQU	READOP+1	; DATASEGMENT+441
  2617                                  CLUSFAC		EQU	THISDRV+1	; DATASEGMENT+442
  2618                                  CLUSSPLIT	EQU	CLUSFAC+1	; DATASEGMENT+443
  2619                                  INSMODE		EQU	CLUSSPLIT+1	; DATASEGMENT+444
  2620                                  CMETA		EQU	INSMODE+1	; DATASEGMENT+445
  2621                                  VOLID		EQU	CMETA+1		; DATASEGMENT+446
  2622                                  EXIT_TYPE	EQU	VOLID+1		; DATASEGMENT+447
  2623                                          
  2624                                  ;	EVEN
  2625                                  
  2626                                  ; WARNING - the following two items are accessed as a word
  2627                                  
  2628                                  ;	I_am    CREATING,BYTE           ; true => creating a file
  2629                                  ;	I_am	DELALL,BYTE		; = 0 iff BUGBUG
  2630                                  ;					; = DIRFREE iff BUGBUG
  2631                                  ;	I_am    EXITHOLD,DWORD          ; Temp location for proc terminate
  2632                                  ;	I_am    user_SP,WORD            ; User SP for system call
  2633                                  ;	I_am    user_SS,WORD            ; User SS for system call
  2634                                  ;	I_am    CONTSTK,WORD            ;
  2635                                  ;	I_am    THISDPB,DWORD           ;
  2636                                  ;	I_am    CLUSSAVE,WORD           ;
  2637                                  ; MSDOS 3.3
  2638                                  ;	I_am    CLUSSEC,WORD		;	
  2639                                  ;; MSDOS 6.0
  2640                                  ;;	I_am    CLUSSEC,DWORD           ;>32mb         ; AC0000
  2641                                  
  2642                                  	; Offset 0518h in IBMDOS.COM (MSDOS 3.3) 
  2643                                  
  2644                                  CREATING	EQU	EXIT_TYPE+1 	; DATASEGMENT+448
  2645                                  	; (End of 'MOVDPB' (in MSINIT) - Offset 0519h (just after 'retf'))
  2646                                  DELALL		EQU	CREATING+1	; DATASEGMENT+449
  2647                                  EXITHOLD	EQU	DELALL+1	; DATASEGMENT+450
  2648                                  USER_SP		EQU	EXITHOLD+4	; DATASEGMENT+454
  2649                                  USER_SS		EQU	USER_SP+2	; DATASEGMENT+456
  2650                                  CONTSTK		EQU	USER_SS+2	; DATASEGMENT+458	
  2651                                  THISDPB		EQU	CONTSTK+2	; DATASEGMENT+460
  2652                                  CLUSSAVE	EQU	THISDPB+4	; DATASEGMENT+464
  2653                                  CLUSSEC		EQU	CLUSSAVE+2	; Offset 052Ah ; DATASEGENT+466
  2654                                  
  2655                                  ;       I_am    PREREAD,WORD            ; 0 means preread; 1 means optional
  2656                                  ;       I_am    FATBYT,WORD             ; Used by ALLOCATE
  2657                                  ;       I_am    FATBYTE,WORD            ; Used by $SLEAZEFUNC
  2658                                  ;       I_am    DEVPT,DWORD             ;
  2659                                  ;       I_am    THISSFT,DWORD           ; Address of user SFT
  2660                                  ;       I_am    THISCDS,DWORD           ; Address of current CDS
  2661                                  ;       I_am    THISFCB,DWORD           ; Address of user FCB
  2662                                  
  2663                                  ; MSDOS 3.3
  2664                                  PREREAD		EQU	CLUSSEC+2	; OffseT 052Ch ; DATASEGMENT+468
  2665                                  
  2666                                  ; MSDOS 6.0
  2667                                  ; PREREAD	EQU	CLUSSEC+4
  2668                                  
  2669                                  FATBYT		EQU	PREREAD+2	; DATASEGMENT+470
  2670                                  FATBYTE		EQU	FATBYT+2	; Offset 0530h ; DATASEGMENT+472
  2671                                  DEVPT		EQU	FATBYTE+2	; DATASEGMENT+474	
  2672                                  THISSFT		EQU	DEVPT+4		; Offset 0536h ; DATASEGMENT+478
  2673                                  THISCDS		EQU	THISSFT+4	; DATASEGMENT+482	
  2674                                  THISFCB		EQU	THISCDS+4	; DATASEGMENT+486
  2675                                  
  2676                                  ; DATASEGMENT+490 :  ; *!!!*
  2677                                  	; Here is offset 0542h in IBMDOS.COM, 1987 (MSDOS 3.3 kernel) 
  2678                                  ;SFN		EQU	THISFCB+4	; DATASEGMENT + 0542h - 0358h
  2679                                  
  2680                                  ;       I_am    SFN,WORD,<-1>           ; SystemFileNumber found for accessfile
  2681                                  ;       I_am    JFN,WORD                ; JobFileNumber found for accessfile
  2682                                  ;       I_am    PJFN,DWORD              ; PointerJobFileNumber found for accessfile
  2683                                  ;       I_am    WFP_START,WORD          ;
  2684                                  ;       I_am    REN_WFP,WORD            ;
  2685                                  ;       I_am    CURR_DIR_END,WORD       ;
  2686                                  ;       I_am    NEXTADD,WORD            ;
  2687                                  ;       I_am    LASTPOS,WORD            ;
  2688                                  ;       I_am    CLUSNUM,WORD            ;
  2689                                  ;       I_am    DIRSEC,DWORD            ;>32mb 		; AC0000
  2690                                  ;       I_am    DIRSTART,WORD           ;
  2691                                  ;       I_am    SECPOS,DWORD		;>32mb Position of first sector accessed
  2692                                  ;       I_am    VALSEC,DWORD		;>32mb Number of valid (previously written)
  2693                                  ;                                       ; sectors
  2694                                  ;       I_am    BYTSECPOS,WORD          ; Position of first byte within sector
  2695                                  ;       I_am    BYTPOS,4                ; Byte position in file of access
  2696                                  ;       I_am    BYTCNT1,WORD            ; No. of bytes in first sector
  2697                                  ;       I_am    BYTCNT2,WORD            ; No. of bytes in last sector
  2698                                  ;       I_am    SECCNT,WORD             ; No. of whole sectors
  2699                                  ;       I_am    ENTFREE,WORD            ;
  2700                                  ;       I_am    ENTLAST,WORD            ;
  2701                                  ;       I_am    NXTCLUSNUM,WORD         ;
  2702                                  ;       I_am    GROWCNT,DWORD           ;
  2703                                  ;       I_am    CURBUF,DWORD            ;
  2704                                  ;       I_am    CONSft,DWORD            ; SFT of console swapped guy.
  2705                                  ;       I_am    SAVEBX,WORD             ;
  2706                                  ;       I_am    SAVEDS,WORD             ;
  2707                                  ;       I_am    restore_tmp,WORD        ; return address for restore world
  2708                                  ;       I_am    NSS,WORD
  2709                                  ;       I_am    NSP,WORD	
  2710                                  
  2711                                  ;	....  [ MS_DATA.ASM (MSDOS 6.0, 1991) (2) ] ; $$$
  2712                                  
  2713                                  ;DOSDATA ENDS
  2714                                  
  2715                                  ;============================================================================
  2716                                  ; MSHEAD.ASM
  2717                                  ;============================================================================
  2718                                  
  2719                                  [BITS 16]
  2720                                  [ORG 0]
  2721                                  
  2722                                  START:
  2723 00000000 E97E73                          JMP     DOSINIT
  2724                                  
  2725                                  ;============================================================================
  2726                                  ; MSHEAD.ASM (MSDOS 6.0, 1991)
  2727                                  ;============================================================================
  2728                                  ; 16/07/2018 - Retro DOS 3.0
  2729                                  
  2730                                  	; MSDOS 6.0
  2731                                  ;	dw	PARASTART	; PARASTART = 3DE0h for MSDOS 6.0, 6.22
  2732                                  ;BioDataSeg:
  2733                                  ;	dw	0070h		; Bios data segment fixed at 70h
  2734                                  
  2735                                  	; MSDOS 3.3
  2736 00000003 0000                    	dw	0
  2737 00000005 00                      	db	0 ; 12/08/2018
  2738 00000006 42554720                	db	"BUG "
  2739 0000000A 0000                    	dw	0
  2740 0000000C 0000                    	dw	0
  2741                                  
  2742                                  ;============================================================================
  2743                                  ; MSCONST.ASM (MSDOS 6.0, 1991)
  2744                                  ;============================================================================
  2745                                  ; 16/07/2018 - Retro DOS 3.0	
  2746                                  
  2747                                  	; MSDOS 3.3
  2748                                  MYNUM:			; Offset 000Eh
  2749 0000000E 0000                    	dw	0	
  2750                                  FCBLRU: 
  2751 00000010 0000                    	dw	0
  2752                                  OpenLRU:
  2753 00000012 0000                    	dw	0
  2754                                  OEM_HANDLER: 		; Pointer to OEM handler code	
  2755 00000014 FFFFFFFF                	dd	-1
  2756                                  LeaveAddr:
  2757                                  	;dd	LeaveDOS
  2758 00000018 [BC15]                  	dw	LeaveDOS ; 12/08/2018
  2759                                  RetryCount:		; Share retries
  2760 0000001A 0300                    	dw	3
  2761                                  RetryLoop:
  2762 0000001C 0100                    	dw	1
  2763                                  LastBuffer:
  2764 0000001E FFFFFFFF                	dd	-1	; Buffer queue recency pointer
  2765                                  CONTPOS:
  2766 00000022 0000                    	dw	0	; location in buffer of next read
  2767                                  arena_head:
  2768 00000024 0000                    	dw	0	; Segment # of first arena in memory
  2769                                  
  2770                                  ;; 16/07/2018
  2771                                  ;;****************************************************************************
  2772                                  ;; NOTE: INT 21H AH=52H !  (http://stanislavs.org/helppc/int_21-52.html)
  2773                                  ;;****************************************************************************
  2774                                  ;; INT 21,52 - Get Pointer to DOS "INVARS" (Undocumented)
  2775                                  ;;
  2776                                  ;;	AH = 52h
  2777                                  ;;
  2778                                  ;;	on return:
  2779                                  ;;	ES:BX = pointer to DOS "invars", a table of pointers used by DOS.
  2780                                  ;;		Known "invars" fields follow (varies with DOS version):
  2781                                  ;;
  2782                                  ;;	Offset Size		 Description
  2783                                  ;;
  2784                                  ;;	 -12   word   sharing retry count (DOS 3.1-3.3)
  2785                                  ;;	 -10   word   sharing retry delay  (DOS 3.1-3.3)
  2786                                  ;;	  -8   dword  pointer to current disk buffer (DOS 3.x)
  2787                                  ;;	  -4   word   pointer in DOS code segment of unread CON input;
  2788                                  ;;		      0 indicates no unread input (DOS 3.x)
  2789                                  ;;	  -2   word   segment of first Memory Control Block (MCB)
  2790                                  ;;	  00   dword  pointer to first DRIVE PARAMETER TABLE (A:) in chain
  2791                                  ;;	  04   dword  pointer to DOS System File Table (SFT)
  2792                                  ;;	  08   dword  pointer to $CLOCK device driver
  2793                                  ;;	  0C   dword  pointer to CON device driver
  2794                                  ;;	  10   byte   number of logical drives in system
  2795                                  ;;	  11   word   maximum bytes/block of any block device
  2796                                  ;;	  13   dword  pointer to DOS cache buffer header
  2797                                  ;;	  17 18bytes  NUL device header, first 4 bytes of device header
  2798                                  ;;		      point to the next device in device chain
  2799                                  ;;
  2800                                  ;;****************************************************************************
  2801                                  
  2802                                  ; The following block of data is used by SYSINIT.  Do not change the order or
  2803                                  ; size of this block
  2804                                  
  2805                                  
  2806                                  ; The following block of data is used by SYSINIT. 
  2807                                  ; Do not change the order or size of this block
  2808                                  
  2809                                  ;SYSINITVAR:
  2810                                  SYSINITVARS:
  2811                                  DPBHEAD:
  2812 00000026 00000000                	dd	0	; Pointer to head of DPB-FAT list
  2813                                  SFT_ADDR:
  2814 0000002A [98000000]              	dd	SFTABL	; Pointer to first SFT table
  2815                                  BCLOCK:
  2816 0000002E 00000000                	dd	0	; The CLOCK device
  2817                                  BCON:
  2818 00000032 00000000                	dd	0	; Console device entry points
  2819                                  MAXSEC:
  2820 00000036 8000                    	dw	128	; Maximum allowed sector size
  2821                                  BUFFHEAD:
  2822 00000038 00000000                	dd	0	; Pointer to head of buffer queue
  2823                                  CDSADDR:
  2824 0000003C 00000000                	dd	0	; Pointer to curdir structure table
  2825                                  SFTFCB:
  2826 00000040 00000000                	dd	0	; pointer to FCB cache table
  2827                                  KEEPCOUNT:
  2828 00000044 0000                    	dw	0	; count of FCB opens to keep
  2829                                  NUMIO:
  2830 00000046 00                      	db	0	; Number of disk tables
  2831                                  CDSCOUNT:
  2832 00000047 00                      	db	0	; Number of CDS structures in above
  2833                                  ; A fake header for the NUL device
  2834                                  NULDEV:
  2835 00000048 00000000                	dd	0	; Link to rest of device list
  2836                                  	;dw	8004h
  2837 0000004C 0480                    	dw	DEVTYP | ISNULL	; Null device attributes
  2838 0000004E [2C16]                  	dw	SNULDEV	; Strategy entry point
  2839 00000050 [3216]                  	dw	INULDEV	; Interrupt entry point
  2840 00000052 4E554C2020202020        	db	"NUL     " ; Name of null device
  2841                                  SPLICES:
  2842 0000005A 00                      	db	0	; TRUE => splices being done
  2843                                  
  2844                                  	; MSDOS 6.0 
  2845                                  ;Special_Entries:
  2846                                  ;	dw	0	; address of special entries	;AN000;
  2847                                  ;UU_IFS_DOS_CALL:
  2848                                  ;	dd	0	; entry for IFS DOS service	;AN000;
  2849                                  ;; 
  2850                                  ;; UU_IFS_HEADER:
  2851                                  ;; 	dd	0	; IFS header chain		;AN000;
  2852                                  ;;
  2853                                  ;ChkCopyProt:
  2854                                  ;	dw	0	; M068
  2855                                  ;A20OFF_PSP:
  2856                                  ;	dw	0	; M068
  2857                                  ;BUFFERS_PARM1:
  2858                                  ;	dw	0	; value of BUFFERS= ,m 	;AN000;
  2859                                  ;BUFFERS_PARM2:
  2860                                  ;	dw	0	; value of BUFFERS= ,n 	;AN000
  2861                                  ;BOOTDRIVE:
  2862                                  ;	db	0	; the boot drive	;AN000;
  2863                                  ;DDMOVE:
  2864                                  ;	db	0 	; 1 if we need DWORD move ;AN000;
  2865                                  ;EXT_MEM_SIZE:
  2866                                  ;	dw	0	; extended memory size 	;AN000;
  2867                                  
  2868                                  ;HASHINITVAR: ; LABEL   WORD	; AN000;
  2869                                  ;;
  2870                                  ;; Replaced by next two declarations
  2871                                  ;;
  2872                                  ;;UU_BUF_HASH_PTR:
  2873                                  ;;	dd	0	; buffer Hash table addr
  2874                                  ;;UU_BUF_HASH_COUNT:
  2875                                  ;;	dw	1	; number of Hash entries
  2876                                  ;
  2877                                  ;BufferQueue:
  2878                                  ;	dd	0	; Head of the buffer Queue
  2879                                  ;DirtyBufferCount:
  2880                                  ;	dw	0	; Count of Dirty buffers in the Que
  2881                                  ;			; BUGBUG ---- change to byte
  2882                                  ;SC_CACHE_PTR:
  2883                                  ;	dd	0	; secondary cache pointer
  2884                                  ;SC_CACHE_COUNT:
  2885                                  ;	dw	0 	; secondary cache count
  2886                                  ;BuffInHMA:
  2887                                  ;	db	0	; Flag to indicate that buffs are in HMA
  2888                                  ;LoMemBuff:
  2889                                  ;	dd	0	; Ptr to intermediate buffer
  2890                                  ;			;  in Low mem when buffs are in HMA
  2891                                  ;;
  2892                                  ;; All variables which have UU_ as prefix can be reused for other
  2893                                  ;; purposes and can be renamed. All these variables were used for
  2894                                  ;; EMS support of Buffer Manager. Now they are useless for Buffer
  2895                                  ;; manager ---- MOHANS
  2896                                  ;;
  2897                                  ;
  2898                                  ;	I_am	UU_BUF_EMS_FIRST_PAGE,3,<0,0,0>  
  2899                                  ;UU_BUF_EMS_FIRST_PAGE:	
  2900                                  ;	db	0,0,0	; holds the first page above 640K
  2901                                  ;
  2902                                  ;;	I_am	UU_BUF_EMS_NPA640,WORD,<0> ; holds the number of pages 
  2903                                  ;;					   ; above 640K
  2904                                  ;;UU_BUF_EMS_NPA640:
  2905                                  ;;	dw	0			
  2906                                  ;
  2907                                  ;CL0FATENTRY:
  2908                                  ;	dw	-1	; M014:	Holds the data that
  2909                                  ;			; is used in pack/unpack rts.
  2910                                  ;			; in fat.asm if cluster 0 is specified.
  2911                                  ;			; SR;
  2912                                  ;IoStatFail:
  2913                                  ;	db	0	; IoStatFail has been added to 
  2914                                  ;			; record a fail on an I24 
  2915                                  ;			; issued from IOFUNC on a status call. 
  2916                                  ;
  2917                                  ;;***	I_am	UU_BUF_EMS_MODE,BYTE,<-1>	; EMS mode 	;AN000;
  2918                                  ;;***	I_am	UU_BUF_EMS_HANDLE,BYTE		; buffer EMS handle ;AN000;
  2919                                  ;;***	I_am	UU_BUF_EMS_PAGE_FRAME,WORD ,<-1>; EMS page frame # ;AN000;
  2920                                  ;;***	I_am	UU_BUF_EMS_SEG_CNT,WORD,<1>	; EMS seg count	;AN000;
  2921                                  ;;***	I_am	UU_BUF_EMS_PFRAME,WORD		; EMS page frame seg address ;AN000;
  2922                                  ;;***	I_am	UU_BUF_EMS_RESERV,WORD,<0> 	; reserved	;AN000;
  2923                                  ;
  2924                                  ;;***	I_am	UU_BUF_EMS_MAP_BUFF,1,<0>	; this is not used to save the 
  2925                                  ;						; state of the 	buffers page.
  2926                                  ;						; This one byte is retained to 
  2927                                  ;						; keep the size of this data 
  2928                                  ;						; block the same.;
  2929                                  ;ALLOCMSAVE:
  2930                                  ;	db	0	; M063: temp var. used to 
  2931                                  ;			; M063: save alloc method in
  2932                                  ;			; M063: msproc.asm
  2933                                  ;A20OFF_COUNT:
  2934                                  ;	db	0	; M068: indiactes the # of 
  2935                                  ;			; M068: int 21 calls for 
  2936                                  ;			; M068: which A20 is off
  2937                                  ;DOS_FLAG:
  2938                                  ;	db	0	; see DOSSYM.INC for Bit 
  2939                                  ;			; definitions
  2940                                  ;UNPACK_OFFSET:
  2941                                  ;	dw	0	; saves pointer to the start
  2942                                  ;			; of unpack code in exepatch.
  2943                                  ;			; asm.
  2944                                  ;UMBFLAG:
  2945                                  ;	db	0 	; M003: bit 0 indicates the 
  2946                                  ;			; M003: link state of the UMBs
  2947                                  ;			; M003: whether linked or not 
  2948                                  ;			; M003: to the DOS arena chain
  2949                                  ;SAVE_AX:
  2950                                  ;	dw	0	; M000: temp varibale to store ax
  2951                                  ;			; M000: in msproc.asm
  2952                                  ;UMB_HEAD:
  2953                                  ;	dw	-1	; M000: this is initialized to  
  2954                                  ;			; M000: the first umb arena by 
  2955                                  ;			; M000: BIOS sysinit.
  2956                                  ;START_ARENA:
  2957                                  ;	dw	1	; M000: this is the first arena 
  2958                                  ;			; M000: from which DOS will 
  2959                                  ;			; M000: start its scan for alloc.
  2960                                  
  2961                                  ; End of SYSINITVar block
  2962                                  
  2963                                  ; 16/07/2018
  2964                                  ; MSDOS 3.3 (& MDOS 6.0)
  2965                                  
  2966                                  ;
  2967                                  ; Sharer jump table
  2968                                  ;
  2969                                  
  2970                                  ;PUBLIC	JShare
  2971                                  	;EVEN
  2972 0000005B 90                      align 2
  2973                                  
  2974                                  JShare: ; LABEL	DWORD
  2975 0000005C [BB17]0000              		DW	BadCall,0
  2976 00000060 [BF17]0000              MFT_enter	DW	OKCall, 0  ; 1   MFT_enter
  2977 00000064 [BF17]0000              MFTClose	DW	OKCall, 0  ; 2   MFTClose
  2978 00000068 [BB17]0000              MFTclU		DW	BadCall,0  ; 3   MFTclU
  2979 0000006C [BB17]0000              MFTCloseP	DW	BadCall,0  ; 4   MFTCloseP
  2980 00000070 [BB17]0000              MFTCloN		DW	BadCall,0  ; 5   MFTCloN
  2981 00000074 [BB17]0000              set_block	DW	BadCall,0  ; 6   set_block
  2982 00000078 [BB17]0000              clr_block	DW	BadCall,0  ; 7   clr_block
  2983 0000007C [BF17]0000              chk_block	DW	OKCall, 0  ; 8   chk_block
  2984 00000080 [BB17]0000              MFT_get		DW	BadCall,0  ; 9   MFT_get
  2985 00000084 [BB17]0000              ShSave		DW	BadCall,0  ; 10  ShSave
  2986 00000088 [BB17]0000              ShChk		DW	BadCall,0  ; 11  ShChk
  2987 0000008C [BF17]0000              ShCol		DW	OKCall, 0  ; 12  ShCol
  2988 00000090 [BB17]0000              ShCloseFile	DW	BadCall,0  ; 13  ShCloseFile
  2989 00000094 [BB17]0000              ShSU		DW	BadCall,0  ; 14  ShSU
  2990                                  
  2991                                  ;============================================================================
  2992                                  ; CONST2.ASM (MSDOS 6.0, 1991)
  2993                                  ;============================================================================
  2994                                  ; 16/07/2018 - Retro DOS 3.0	
  2995                                  
  2996                                  ;Break <Initialized data and data used at DOS initialization>
  2997                                  
  2998                                  ;
  2999                                  ; We need to identify the parts of the data area that are relevant to tasks
  3000                                  ; and those that are relevant to the system as a whole.  Under 3.0, the system
  3001                                  ; data will be gathered with the system code.  The process data under 2.x will
  3002                                  ; be available for swapping and under 3.0 it will be allocated per-process.
  3003                                  ;
  3004                                  ; The data that is system data will be identified by [SYSTEM] in the comments
  3005                                  ; describing that data item.
  3006                                  
  3007                                  ;	AsmVars <Debug, Redirector, ShareF>
  3008                                  
  3009                                  ;DOSDATA SEGMENT WORD PUBLIC 'DATA'
  3010                                  
  3011                                  ;
  3012                                  ; Table of routines for assignable devices
  3013                                  ;
  3014                                  ; MSDOS allows assignment if the following standard devices:
  3015                                  ;   stdin  (usually CON input)
  3016                                  ;   stdout (usually CON output)
  3017                                  ;   auxin  (usually AUX input)
  3018                                  ;   auxout (usually AUX output)
  3019                                  ;   stdlpt (usually PRN output)
  3020                                  ;
  3021                                  ; SPECIAL NOTE:
  3022                                  ;   Status of a file is a strange idea. We choose to handle it in this manner:
  3023                                  ;   If we're not at end-of-file, then we always say that we have a character.
  3024                                  ;   Otherwise, we return ^Z as the character and set the ZERO flag. In this
  3025                                  ;   manner we can support program written under the old DOS (they use ^Z as EOF
  3026                                  ;   on devices) and programs written under the new DOS (they use the ZERO flag
  3027                                  ;   as EOF).
  3028                                  
  3029                                  ; Default SFTs for boot up
  3030                                  
  3031                                  		;PUBLIC	SFTABL
  3032                                  
  3033                                  SFTABL:	   ; LABEL   DWORD		; file table
  3034 00000098 FFFF                    		DW -1			; link to next table
  3035 0000009A FFFF                    		DW -1			; link seg to next table
  3036 0000009C 0500                    		DW sf_default_number	; Number of entries in table
  3037 0000009E 00<rep 109h>            		times (sf_default_number*sf_entry_size) db 0
  3038                                  
  3039                                  ; the next two variables relate to the position of the logical stdout/stdin
  3040                                  ; cursor. They are only meaningful when stdin/stdout are assigned to the
  3041                                  ; console.
  3042                                  
  3043                                  		; Offset 01A7h in IBMDOS.COM (MSDOS 3.3)
  3044 000001A7 00                      CARPOS:		db 0			; cursor position in stdin
  3045 000001A8 00                      STARTPOS:	db 0			; position of cursor at beginning
  3046 000001A9 00<rep 80h>             INBUF:		times 128 db 0		; general device input buffer
  3047 00000229 00<rep 83h>             CONBUF:		times 131 db 0		; The rest of INBUF and console buffer
  3048                                  		; Offset 02ACh in IBMDOS.COM (MSDOS 3.3)
  3049 000002AC 00                      PFLAG:		db 0			; printer echoing flag
  3050 000002AD 00                      VERFLG:		db 0			; Initialize with verify off
  3051 000002AE 03                      CHARCO:		db 00000011b		; Allows statchks every 4 chars...
  3052                                  switch_character:
  3053 000002AF 2F                      chSwitch:	db '/'			; UNUSED - obsolete datum, can be reused
  3054 000002B0 00                      AllocMethod:	db 0			; how to alloc first(best)last
  3055 000002B1 00                      fShare:		db 0			; TRUE => sharing installed
  3056 000002B2 01                      DIFFNAM:	db 1			; Indicates when MYNAME has changed                                        ; of buffered input call
  3057 000002B3 20<rep 10h>             MYNAME:		times 16 db 20h		; My network name
  3058                                  
  3059                                  ;
  3060                                  ; The following table is a list of addresses that the sharer patches to be
  3061                                  ; PUSH AX to enable the critical sections
  3062                                  ;
  3063                                  		; Offset 02C3h in IBMDOS.COM (MSDOS 3.3)
  3064                                  
  3065                                  ;PUBLIC	CritPatch
  3066                                  
  3067                                  CritPatch:	; LABEL WORD
  3068                                  
  3069                                  ;IRP sect,<critDisk,critDevice>
  3070                                  
  3071                                  ;IF (NOT REDIRECTOR) AND (NOT SHAREF)
  3072                                  ;
  3073                                  ;SR; Change code patch address to a variable in data segment
  3074                                  ;
  3075                                  ;       dw OFFSET DOSDATA: redir_patch
  3076                                  ;       dw OFFSET DOSDATA: redir_patch
  3077                                  ;
  3078                                  ;;hkn	Short_Addr  E&sect
  3079                                  ;;hkn	Short_Addr  L&sect
  3080                                  ;
  3081                                  ;ELSE
  3082                                  ;	DW	0
  3083                                  ;	DW	0
  3084                                  ;ENDIF
  3085                                  ;ENDM
  3086                                  ;	DW	0
  3087                                  
  3088                                  	; 16/07/2018 - Retro DOS v3.0
  3089                                  	; IBMDOS.COM (MSDOS 3.3), offset 02C3h
  3090                                   
  3091 000002C3 [6C20]                  	dw 	EcritDisk
  3092 000002C5 [7420]                  	dw 	LcritDisk			
  3093 000002C7 [7C20]                  	dw	EcritDevice
  3094 000002C9 [8420]                  	dw 	LcritDevice
  3095                                  
  3096 000002CB 0000                    	dw	0
  3097                                  
  3098                                  ;
  3099                                  ; WARNING!!!  PRINT and PSPRINT *REQUIRE* ErrorMode to precede INDOS.
  3100                                  ; Also, IBM server 1.0 requires this also.
  3101                                  ;
  3102                                  	;EVEN			; Force swap area to start on word boundry
  3103 000002CD 90                      align 2
  3104                                  	;PUBLIC	SWAP_START
  3105                                  SWAP_START:	; LABEL BYTE
  3106 000002CE 00                      ERRORMODE:	db 0		; Flag for INT 24 processing
  3107 000002CF 00                      INDOS:		db 0		; DOS status for interrupt processing
  3108 000002D0 FF                      WPERR:		db -1		; Write protect error flag
  3109 000002D1 00                      EXTERR_LOCUS:	db 0		; Extended Error Locus
  3110 000002D2 0000                    EXTERR:		dw 0		; Extended Error code
  3111                                  
  3112                                  ;WARNING Following two bytes Accessed as word in $GetExtendedError
  3113 000002D4 00                      EXTERR_ACTION:	db 0		; Extended Error Action
  3114 000002D5 00                      EXTERR_CLASS:	db 0		; Extended Error Class
  3115                                  ; end warning
  3116                                   
  3117 000002D6 00000000                EXTERRPT:	dd 0		; Extended Error pointer
  3118                                  
  3119 000002DA 8000                    DMAADD:		dw 80H		; User's disk transfer address (disp/seg)
  3120 000002DC 0000                                    dw 0	
  3121 000002DE 0000                    CurrentPDB:	dw 0		; Current process identifier
  3122 000002E0 0000                    ConC_Spsave:	dw 0		; saved SP before ^C
  3123 000002E2 0000                    exit_code:	dw 0		; exit code of last proc.
  3124 000002E4 00                      CURDRV:		db 0		; Default drive (init A)
  3125 000002E5 00                      CNTCFLAG:	db 0		; ^C check in dispatch disabled
  3126                                  ;				; F.C. 2/17/86
  3127                                  ;CPSWFLAG:	db 0		; Code Page Switching Flag  DOS 4.00
  3128                                  ;CPSWSAVE:	db 0		; copy of above in case of ABORT
  3129                                  SWAP_ALWAYS:	; 05/08/2018
  3130 000002E6 0000                    USER_IN_AX:	dw 0		; User INPUT AX value (used for
  3131                                  				;   extended error type stuff.
  3132                                  				;   NOTE: does not have Correct value on
  3133                                  				;   1-12, OEM, Get/Set CurrentPDB,
  3134                                  				;   GetExtendedError system calls)
  3135 000002E8 0000                    PROC_ID:	dw 0		; PID for sharing (0 = local)
  3136 000002EA 0000                    USER_ID:	dw 0		; Machine for sharing (0 = local)
  3137 000002EC 0000                    FirstArena:	dw 0		; first free block found
  3138 000002EE 0000                    BestArena:	dw 0		; best free block found
  3139 000002F0 0000                    LastArena:	dw 0		; last free block found
  3140 000002F2 0000                    ENDMEM:		dw 0		; End of memory used in DOSINIT
  3141 000002F4 0000                    LASTENT:	dw 0		; Last entry for directory search
  3142 000002F6 00                      FAILERR:	db 0		; NZ if user did FAIL on I 24
  3143 000002F7 00                      ALLOWED:	db 0		; Allowed I 24 answers (see allowed_)
  3144 000002F8 00                      NoSetDir:	db 0		; true -> do not set directory
  3145 000002F9 00                      DidCTRLC:	db 0		; true -> we did a ^C exit
  3146 000002FA 00                      SpaceFlag:	db 0		; true -> embedded spaces are allowed in FC
  3147                                  
  3148                                  ; Warning!  The following items are accessed as a WORD in TIME.ASM
  3149                                  	;EVEN
  3150 000002FB 90                      align 2
  3151                                  	; Offset 02FCh in IBMDOS.COM (MSDOS 3.3); 
  3152 000002FC 00                      DAY:		db 0		; Day of month
  3153 000002FD 00                      MONTH:		db 0		; Month of year
  3154 000002FE 0000                    YEAR:		dw 0		; Year (with century)
  3155 00000300 FFFF                    DAYCNT:		dw -1		; Day count from beginning of year
  3156 00000302 00                      WEEKDAY:	db 0		; Day of week
  3157                                  ; end warning
  3158                                  
  3159 00000303 00                      CONSWAP:	db 0		; TRUE => console was swapped during device read
  3160 00000304 01                      IDLEINT:	db 1		; TRUE => idle int is allowed
  3161 00000305 00                      fAborting:	db 0		; TRUE => abort in progress
  3162                                  
  3163                                  ; Combination of all device call parameters
  3164                                  	;PUBLIC	DEVCALL 	;
  3165                                  ;DEVCALL SRHEAD	<>		; basic header for disk packet
  3166                                  DEVCALL: ; 08/08/2018
  3167 00000306 00                      DEVCALL_REQLEN:  db 0 		;Length in bytes of request block
  3168 00000307 00                      DEVCALL_REQUNIT: db 0		;Device unit number
  3169 00000308 00                      DEVCALL_REQFUNC: db 0		;Type of request
  3170 00000309 0000                    DEVCALL_REQSTAT: dw 0		;Status Word
  3171 0000030B 00<rep 8h>                       times 8 db 0		;Reserved for queue links
  3172                                  
  3173                                  	;PUBLIC	CALLUNIT
  3174                                  CALLUNIT: ; LABEL   BYTE	; unit number for disk
  3175                                  CALLFLSH: ; LABEL   WORD	;
  3176 00000313 00                      CALLMED:	db 0		; media byte
  3177                                  CALLBR:	  ; LABEL   DWORD	;
  3178                                  	;PUBLIC	CALLXAD 	;
  3179                                  CALLXAD:  ; LABEL   DWORD	;
  3180 00000314 00                      CALLRBYT:	db 0		;
  3181                                  	;PUBLIC	CALLVIDM	;
  3182                                  CALLVIDM: ; LABEL   DWORD	;
  3183 00000315 00<rep 3h>              	times 3 db 0	;
  3184                                  	;PUBLIC CallBPB		;
  3185                                  CALLBPB:  ; LABEL   DWORD	;
  3186                                  CALLSCNT:			;
  3187 00000318 0000                    		dw 0		;
  3188                                  	;PUBLIC	CALLSSEC	;
  3189                                  CALLSSEC: ; LABEL   WORD	;
  3190 0000031A 0000                    		dw 0		;
  3191 0000031C 00000000                CALLVIDRW:	dd 0		;
  3192                                  ;*MSDOS 6.0
  3193                                  ;*CALLNEWSC:	dd 0		; starting sector for >32mb
  3194 00000320 00000000                CALLDEVAD:	dd 0		; stash for device entry point
  3195                                  
  3196                                  ; Same as above for I/O calls	;
  3197                                  				;
  3198                                  	;PUBLIC	IOCall		;
  3199                                  ;IOCALL	SRHEAD	<>		;
  3200                                  IOCALL:	; 07/08/2018
  3201 00000324 00                      IOCALL_REQLEN:	db 0		;Length in bytes of request block	
  3202 00000325 00                      IOCALL_REQUNIT:	db 0		;Device unit number
  3203 00000326 00                      IOCALL_REQFUNC: db 0		;Type of request
  3204 00000327 0000                    IOCALL_REQSTAT: dw 0		;Status Word
  3205 00000329 00<rep 8h>              	times 8	db 0		;Reserved for queue links
  3206                                  IOFLSH:	  ; LABEL   WORD	;
  3207                                          ;PUBLIC  IORCHR		;
  3208                                  IORCHR:	  ; LABEL   BYTE	;
  3209 00000331 00                      IOMED:		db 0		;
  3210 00000332 00000000                IOXAD:		dd 0		;
  3211 00000336 0000                    IOSCNT:		dw 0		;	
  3212 00000338 0000                    IOSSEC:		dw 0		;
  3213                                  
  3214                                  ; Call struct for DSKSTATCHK	;
  3215 0000033A 0E                      DSKSTCALL:	db DRDNDHL 	; = 14
  3216 0000033B 00                      		db 0
  3217 0000033C 05                      DSKSTCOM:	db DEVRDND	; = 5
  3218 0000033D 0000                    DSKSTST:	dw 0		;
  3219 0000033F 00<rep 8h>              	times 8	db 0		;
  3220 00000347 00                      DSKCHRET:	db 0		;
  3221                                  
  3222                                  ;hkn; short_addr has been changed to provide offset in DOSCODE.
  3223                                  ;hkn; deviobuf is in DATA seg (DOSDATA)
  3224                                  ;hkn   short_addr  DEVIOBUF	;
  3225                                  	
  3226 00000348 [5E03]                  DEVIOBUF_PTR	dw DEVIOBUF
  3227 0000034A 0000                    DOSSEG_INIT	dw 0		; DOS segment set at Init
  3228 0000034C 0100                    DSKSTCNT:	dw 1		;
  3229 0000034E 0000                    		dw 0		;
  3230                                  
  3231 00000350 00                      CreatePDB:	db 0		; flag for creating a process
  3232                                  
  3233                                  ;* MSDOS 6.0
  3234                                  ;*	;PUBLIC	Lock_Buffer	;
  3235                                  ;*Lock_Buffer: ; LABEL  DWORD	;MS. DOS Lock Buffer for Ext Lock
  3236                                  ;*	    	dd 0		;MS. position
  3237                                  ;*	 	dd 0		;MS. length
  3238                                  
  3239                                  ;hkn; the foll. was moved from dosmes.asm.
  3240                                  
  3241                                  	;EVEN
  3242 00000351 90                      align 2				; needed to maintain offsets
  3243                                  
  3244                                  	; Offset 0352h in IBMDOS.COM (MSDOS 3.3)
  3245                                  	;PUBLIC  UserNum, OEMNum
  3246                                  USERNUM:
  3247 00000352 0000                     		dw 0		; 24 bit user number
  3248 00000354 00                      		db 0
  3249                                  ;IF IBM
  3250                                  ;IF IBMCOPYRIGHT
  3251 00000355 00                      OEMNUM:		DB 0		; 8 bit OEM number
  3252                                  ;ELSE
  3253                                  ;OEMNUM:	DB 0FFh		; 8 bit OEM number
  3254                                  ;ENDIF
  3255                                  ;ELSE
  3256                                  ;OEMNUM:	DB 0FFh
  3257                                  ;ENDIF
  3258                                  
  3259                                  ; 17/07/2018
  3260                                  ;----------------------------------------------------------------------------
  3261                                  ; (MSDOS 3.3, DOSMES.INC, 1987)
  3262                                  
  3263                                  ; The next variable points to the country table for the current country
  3264                                  ;	(the table returned by the AL=0 INTERNATIONAL call).
  3265                                  
  3266 00000356 [E40F]                  CurrentCounry:	dw USTABLE			
  3267                                  
  3268                                  
  3269                                  ;DOSDATA ENDS
  3270                                  
  3271                                  ;----------------------------------------------------------------------------
  3272                                  
  3273                                  ; 16/07/2018 - Retro DOS v3.0
  3274                                  
  3275                                  align 2
  3276                                  
  3277                                  DATASEGMENT EQU $ ; 17/04/2018
  3278                                  
  3279                                  ;============================================================================
  3280                                  ; MSINIT.ASM
  3281                                  ;============================================================================
  3282                                  ; 16/07/2018 - Retro DOS v3.0
  3283                                  ;	      (MSINIT code order/reference: MSDOS 3.3, IBMDOS.COM, 1987)
  3284                                  	
  3285                                  ; 15/04/2018 - Retro DOS v2.0 (DATA adaption for NASM)
  3286                                  
  3287                                  ; TITLE MSINIT.ASM -- MS-DOS INITIALIZATION CODE
  3288                                  
  3289                                  ;       ORG     0                       ; reset to beginning of data segment
  3290                                  ; Init code below overlaps with data area
  3291                                  
  3292                                  	
  3293                                  	; Offset 0358h in IBMDOS.COM (MSDOS 3.3)
  3294                                  
  3295                                  ;INITBLOCK DB    110H DUP(0)     ; Allow for segment round up
  3296 00000358 00<rep 110h>            INITBLOCK:	TIMES 272 DB 0
  3297                                  
  3298                                  	; Offset 0468h in IBMDOS.COM (MSDOS 3.3)
  3299                                  
  3300 00000468 0000                    INITSP:		DW 0
  3301 0000046A 0000                    INITSS:		DW 0
  3302                                  ;BUFFSTRT:	DW 0
  3303                                  
  3304                                  	; Offset 046Ch in IBMDOS.COM (MSDOS 3.3)	
  3305                                  
  3306                                  ;ASSUME  CS:DOSGROUP,DS:DOSGROUP,ES:DOSGROUP,SS:NOTHING
  3307                                  ;
  3308                                  ;        EXTRN   QUIT:NEAR,IRET:NEAR,ABSDRD:FAR,ABSDWRT:FAR
  3309                                  ;        EXTRN   COMMAND:NEAR,CALL_ENTRY:NEAR
  3310                                  ;        IF      NOT IBM
  3311                                  ;        EXTRN   HEADER:BYTE
  3312                                  ;        ENDIF
  3313                                  
  3314                                  MOVDPB:
  3315                                  	; 08/07/2018 - Retro DOS v3.0
  3316                                  ; This section of code is safe from being overwritten by block move
  3317                                          ;MOV     SP,[CS:INITSP]
  3318                                          ;MOV     SS,[CS:INITSS]
  3319                                          ; 30/03/2018
  3320 0000046C 8B26[6804]              	MOV     SP,[INITSP]
  3321 00000470 8E16[6A04]                      MOV     SS,[INITSS]
  3322 00000474 F3A4                    	REP     MOVSB
  3323 00000476 FC                              CLD
  3324                                          ; 15/07/2018
  3325                                  	;MOV	[ES:DMAADD+2],DX
  3326 00000477 8916[DC02]              	MOV	[DMAADD+2],DX
  3327 0000047B 8B36[2600]                      MOV     SI,[DPBHEAD]	; Address of first DPB
  3328                                  	;MOV	[ES:DPBHEAD+2],ES
  3329 0000047F 8C06[2800]                      MOV	[DPBHEAD+2],ES
  3330                                  	;MOV	[ES:SFT_ADDR+2],ES
  3331 00000483 8C06[2C00]              	MOV     [SFT_ADDR+2],ES
  3332 00000487 8A0E[4600]                      MOV     CL,[NUMIO]	; Number of DPBs
  3333 0000048B 30ED                            XOR     CH,CH
  3334                                  SETFINDPB:
  3335                                          ; 06/07/2019
  3336                                          ;MOV	[ES:SI+1AH],ES
  3337 0000048D 8C441A                  	mov	[si+1Ah],es
  3338                                          ;MOV	BYTE [ES:SI+17H],-1  ; Never accessed before
  3339 00000490 C64417FF                	mov	byte [si+17h],-1
  3340 00000494 83C620                          ADD     SI,DPBSIZ ; 32	; Point to next DPB
  3341 00000497 E2F4                            LOOP    SETFINDPB
  3342 00000499 83EE20                          SUB     SI,DPBSIZ ; sub si,32
  3343                                  	;MOV	WORD [ES:SI+1AH],-1
  3344 0000049C C7441AFFFF              	mov	word [SI+1Ah],-1
  3345                                  
  3346                                          ; 15/07/2018 - Retro DOS v3.0
  3347                                  	;; MSDOS 2.11
  3348                                          ;MOV	DI,[BUFFSTRT]		; Set up one default buffer
  3349                                  	;MOV	[ES:BUFFHEAD+2],ES
  3350                                          ;MOV	[ES:BUFFHEAD],DI
  3351                                  	; MSDOS 3.3
  3352 000004A1 06                      	push	es ; *
  3353 000004A2 BF[8F73]                	mov	di,SYSBUF+15 
  3354 000004A5 D1DF                    	rcr	di,1
  3355 000004A7 D1EF                    	shr	di,1
  3356 000004A9 D1EF                    	shr	di,1
  3357 000004AB D1EF                    	shr	di,1
  3358 000004AD 8CC0                    	mov	ax,es
  3359 000004AF 01F8                    	add	ax,di
  3360 000004B1 8EC0                    	mov	es,ax
  3361 000004B3 31FF                    	xor	di,di
  3362 000004B5 8C06[3A00]              	mov     [BUFFHEAD+2],es
  3363 000004B9 893E[3800]              	mov     [BUFFHEAD],di
  3364                                  	;	
  3365 000004BD 26C74504FF00                    MOV     WORD [ES:DI+4],00FFH
  3366 000004C3 26C705FFFF                      MOV     WORD [ES:DI],-1
  3367 000004C8 26C74502FFFF                    MOV     WORD [ES:DI+2],-1
  3368 000004CE 07                      	pop	es; * ; 15/07/2018
  3369 000004CF 06                              PUSH    ES
  3370 000004D0 42                              INC     DX ; **			; Leave enough room for the ARENA
  3371 000004D1 8B36[F202]              	mov	si,[ENDMEM] ; 15/07/2018
  3372                                  
  3373                                  	; 11/08/2018 - Retro DOS v3.0
  3374                                          ;invoke _$DUP_PDB		; create jfns and set CurrentPDB
  3375 000004D5 E85E19                  	CALL	_$DUP_PDB
  3376 000004D8 07                              POP	ES
  3377                                  
  3378                                  	; [CurrentPDB] = dx ; **
  3379                                  	; ds = previous [CurrentPDB]
  3380                                  	; es = cs
  3381                                  ;
  3382                                  ; set up memory arena
  3383                                  ;SPECIAL NOTE FOR HIGHMEM VERSION
  3384                                  ; At this point a process header has been built where the start of the 
  3385                                  ; CONSTANTS segment as refed by CS is. From this point until the return 
  3386                                  ; below be careful about references off of CS.
  3387                                  ;
  3388                                  	; 13/04/2018 ; *
  3389                                          ;PUSH	AX ; *
  3390                                  	;MOV	AX,[CurrentPDB]
  3391                                  
  3392                                        	; 06/07/2019
  3393                                  	;MOV	AX,[CS:CurrentPDB] ; 15/03/2018
  3394                                  	;MOV    [ES:CurrentPDB],AX	; Put it in the REAL location
  3395                                          ;MOV	BYTE [ES:CreatePDB],0	; reset flag in REAL location
  3396                                          
  3397 000004D9 2EA1[DE02]              	mov	ax,[cs:CurrentPDB]  ; es = cs
  3398                                  
  3399 000004DD 48                              DEC     AX
  3400 000004DE 26A3[2400]                      MOV     [ES:arena_head],AX
  3401 000004E2 1E                              PUSH    DS
  3402 000004E3 8ED8                            MOV     DS,AX
  3403 000004E5 C60600005A                      MOV     BYTE [ARENA.SIGNATURE],arena_signature_end
  3404 000004EA C70601000000                    MOV     WORD [ARENA.OWNER],arena_owner_system
  3405 000004F0 262B06[F202]                    SUB     AX,[ES:ENDMEM]
  3406 000004F5 F7D8                            NEG     AX
  3407 000004F7 48                              DEC     AX
  3408 000004F8 A30300                          MOV     [ARENA.SIZE],AX
  3409 000004FB 1F                              POP     DS
  3410                                          ;POP	AX ; *
  3411                                  
  3412 000004FC BF[9E00]                        MOV     DI,SFTABL+SFT.SFTable	; Point to sft 0
  3413                                  	; 15/07/2018
  3414 000004FF B80300                          MOV     AX,3
  3415 00000502 AB                              STOSW		; Adjust Refcount
  3416                                  	;MOV	DI,SYSINITVAR	; 16/03/2018 (Retro DOS v2.0)
  3417 00000503 BF[3B0F]                	MOV     DI,SysInitTable ; 15/07/2018 (Retro DOS v3.0)
  3418 00000506 CB                              RETF
  3419                                  	
  3420                                  	; 18/04/2018
  3421                                  FILL1	equ	$ - DATASEGMENT
  3422                                  ; ---------------------------------------------------------------------------
  3423                                  ; 16/07/2018 - Retro DOS v3.0
  3424 00000507 00<rep 3Bh>             	times (490-FILL1) db 0	; *!!!*
  3425                                  
  3426                                  ;============================================================================
  3427                                  ; MS_DATA.ASM (MSDOS 6.0, 1991)  (2)
  3428                                  ;============================================================================
  3429                                  ; 16/07/2018 - Retro DOS 3.0	
  3430                                  
  3431                                  ;  MS_DATA.ASM (MSDOS 6.0, 1991) (1) ... $$$
  3432                                   
  3433                                  ; (continues from 'SFN' ..) - from offset 0542h in IBMDOS.COM, 1987 -
  3434                                  
  3435                                  ; DATASEGMENT + 490
  3436                                  
  3437                                  ;       I_am    SFN,WORD,<-1>           ; SystemFileNumber found for accessfile
  3438                                  ;       I_am    JFN,WORD                ; JobFileNumber found for accessfile
  3439                                  ;       I_am    PJFN,DWORD              ; PointerJobFileNumber found for accessfile
  3440                                  ;       I_am    WFP_START,WORD          ;
  3441                                  ;       I_am    REN_WFP,WORD            ;
  3442                                  ;       I_am    CURR_DIR_END,WORD       ;
  3443                                  ;       I_am    NEXTADD,WORD            ;
  3444                                  ;       I_am    LASTPOS,WORD            ;
  3445                                  ;       I_am    CLUSNUM,WORD            ;
  3446                                  ; MSDOS 3.3
  3447                                  ;	I_am	DIRSEC,WORD
  3448                                  ;; MSDOS 6.0
  3449                                  ;;      I_am    DIRSEC,DWORD            ;>32mb		; AC0000
  3450                                  ;       I_am    DIRSTART,WORD           ;
  3451                                  ;       I_am    SECPOS,DWORD		;>32mb Position of first sector accessed
  3452                                  ;       I_am    VALSEC,DWORD		;>32mb Number of valid (previously written)
  3453                                  ;                                       ; sectors
  3454                                  ;       I_am    BYTSECPOS,WORD          ; Position of first byte within sector
  3455                                  ;       I_am    BYTPOS,4                ; Byte position in file of access
  3456                                  ;       I_am    BYTCNT1,WORD            ; No. of bytes in first sector
  3457                                  ;       I_am    BYTCNT2,WORD            ; No. of bytes in last sector
  3458                                  ;       I_am    SECCNT,WORD             ; No. of whole sectors
  3459                                  
  3460 00000542 FFFF                    SFN:		dw -1
  3461 00000544 0000                    JFN:		dw 0
  3462 00000546 00000000                PJFN:		dd 0
  3463 0000054A 0000                    WFP_START: 	dw 0
  3464 0000054C 0000                    REN_WFP: 	dw 0
  3465 0000054E 0000                    CURR_DIR_END: 	dw 0
  3466 00000550 0000                    NEXTADD: 	dw 0
  3467 00000552 0000                    LASTPOS: 	dw 0
  3468 00000554 0000                    CLUSNUM: 	dw 0
  3469                                  ; MSDOS 3.3
  3470 00000556 0000                    DIRSEC: 	dw 0
  3471                                  ; MSDOS 6.0
  3472                                  ;DIRSEC:	dd 0
  3473 00000558 0000                    DIRSTART: 	dw 0
  3474                                  ; MSDOS 3.3
  3475 0000055A 0000                    SECPOS: 	dw 0
  3476                                  ; MSDOS 6.0
  3477                                  ;SECPOS: 	dd 0
  3478                                  ; MSDOS 3.3
  3479 0000055C 0000                    VALSEC: 	dw 0
  3480                                  ; MSDOS 6.0
  3481                                  ;VALSEC: 	dd 0
  3482 0000055E 0000                    BYTSECPOS: 	dw 0
  3483 00000560 00000000                BYTPOS:		dd 0
  3484 00000564 0000                    BYTCNT1: 	dw 0
  3485 00000566 0000                    BYTCNT2: 	dw 0
  3486 00000568 0000                    SECCNT: 	dw 0
  3487                                  
  3488                                  	; Offset 056Ah in IBMDOS.COM (MSDOS 3.3)
  3489                                  ; DATASEGMENT + 530 (in Retro DOS v3.0)
  3490                                  
  3491                                  ;       I_am    ENTFREE,WORD            ;
  3492                                  ;       I_am    ENTLAST,WORD            ;
  3493                                  ;       I_am    NXTCLUSNUM,WORD         ;
  3494                                  ;       I_am    GROWCNT,DWORD           ;
  3495                                  ;       I_am    CURBUF,DWORD            ;
  3496                                  ;       I_am    CONSft,DWORD            ; SFT of console swapped guy.
  3497                                  ;       I_am    SAVEBX,WORD             ;
  3498                                  ;       I_am    SAVEDS,WORD             ;
  3499                                  ;       I_am    restore_tmp,WORD        ; return address for restore world
  3500                                  ;       I_am    NSS,WORD
  3501                                  ;       I_am    NSP,WORD
  3502                                  
  3503 0000056A 0000                    ENTFREE:	dw 0
  3504 0000056C 0000                    ENTLAST:	dw 0
  3505 0000056E 0000                    NXTCLUSNUM:	dw 0
  3506 00000570 00000000                GROWCNT:	dd 0
  3507 00000574 00000000                CURBUF:		dd 0
  3508 00000578 00000000                CONSFT:		dd 0
  3509 0000057C 0000                    SAVEBX:		dw 0
  3510 0000057E 0000                    SAVEDS:		dw 0
  3511 00000580 0000                    RESTORE_TMP:	dw 0
  3512 00000582 0000                    NSS:		dw 0
  3513 00000584 0000                    NSP:		dw 0	 ; Offset 0584h in IBMDOS.COM (MSDOS 3.3)
  3514                                  
  3515                                  ; DATASEGMENT+558 :  ; *!!!*
  3516                                  	; Here is offset 0586h in IBMDOS.COM, 1987 (MSDOS 3.3 kernel) 
  3517                                  
  3518                                  ; MSDOS 6.0
  3519                                  ;       I_am    EXTOPEN_FLAG,WORD,<0>   ;FT. extended open input flag       ;AN000;
  3520                                  ;       I_am    EXTOPEN_ON,BYTE,<0>     ;FT. extended open conditional flag ;AN000;
  3521                                  ;       I_am    EXTOPEN_IO_MODE,WORD,<0>;FT. extended open io mode          ;AN000;
  3522                                  ;       I_am    SAVE_DI,WORD            ;FT. extended open saved DI         ;AN000;
  3523                                  ;       I_am    SAVE_ES,WORD            ;FT. extended open saved ES         ;AN000;
  3524                                  ;       I_am    SAVE_DX,WORD            ;FT. extended open saved DX         ;AN000;
  3525                                  ;       I_am    SAVE_CX,WORD            ;FT. extended open saved CX         ;AN000;
  3526                                  ;       I_am    SAVE_BX,WORD            ;FT. extended open saved BX         ;AN000;
  3527                                  ;       I_am    SAVE_SI,WORD            ;FT. extended open saved SI         ;AN000;
  3528                                  ;       I_am    SAVE_DS,WORD            ;FT. extended open saved DS         ;AN000;
  3529                                  
  3530                                  ;	HIGH_SECTOR is a hack to allow passing 32-bit sector numbers where
  3531                                  ;	we used to just pass 16 bits in a register.  Now High_SECTOR holds
  3532                                  ;	the high 16, the low 16 are still in the register.
  3533                                  ;
  3534                                  ;       I_am    HIGH_SECTOR,WORD,<0>    ;>32mb higher sector #		    ;AN000;
  3535                                  ;
  3536                                  ;       ;I_am    UU_HIGH_SECTOR_TEMP,WORD,<0> ;M019: Unused
  3537                                  ;       I_am    OffsetMagicPatch,WORD,<offset MagicPatch> ;scottq 8/6/92
  3538                                  ;                                                         ;see dos\mpatch.asm
  3539                                  ;
  3540                                  ;       I_am    DISK_FULL,BYTE          ;>32mb indicating disk full when 1  ;AN000;
  3541                                  ;       I_am    TEMP_VAR,WORD           ; temporary variable for everyone   ;AN000;
  3542                                  ;       I_am    TEMP_VAR2,WORD          ; temporary variable 2 for everyone ;AN000;
  3543                                  ;       I_am    DrvErr,BYTE             ; used to save drive error          ;AN000;
  3544                                  ;       I_am    DOS34_FLAG,WORD,<0>     ; common flag for DOS 3.4           ;AN000;
  3545                                  ;       I_am    NO_FILTER_PATH,DWORD    ; pointer to orignal path           ;AN000;
  3546                                  ;       I_am    NO_FILTER_DPATH,DWORD   ; pointer to orignal path of destination;AN000;
  3547                                  ;; M008
  3548                                  ;       I_am   AbsRdWr_SS,WORD         ; INT 25/26 user stack segment
  3549                                  ;       I_am   AbsRdWr_SP,WORD         ; INT 25/26 user stack offset
  3550                                  ;       I_am   UU_Callback_flag,BYTE,<0>  ; Unused
  3551                                  ;; M008
  3552                                   
  3553                                  ; make those pushes fast!!!
  3554                                  	;.EVEN
  3555                                  align 2
  3556                                  
  3557                                  ; MSDOS 3.3 ($ MSDOS 6.0)
  3558                                  StackSize equ 180h			; gross but effective
  3559                                  
  3560                                  ;;;StackSize = 300h			; This is a "trial" change IBM hasn't
  3561                                  ;;;					; made up their minds about
  3562                                   
  3563                                  ;
  3564                                  ; WARNING!!!! DskStack may grow into AUXSTACK due to interrupt service.
  3565                                  ; This is NO problem as long as AUXSTACK comes immediately before DSKSTACK
  3566                                  ;
  3567                                   
  3568                                          ;PUBLIC  RENAMEDMA,AuxStack,DskStack,IOStack
  3569                                  RENAMEDMA:  ; LABEL   BYTE		; See DOS_RENAME
  3570                                  	;DB	StackSize DUP (?)       ;
  3571 00000586 00<rep 180h>            	times	StackSize db 0
  3572                                  
  3573                                  AUXSTACK:   ; LABEL   BYTE		;  Offset 0706h in IBMDOS.COM, 1987
  3574                                   	;DB	StackSize DUP (?)       ;
  3575 00000706 00<rep 180h>            	times	StackSize db 0
  3576                                  DSKSTACK:   ; LABEL   BYTE		;  Offset 0886h in IBMDOS.COM, 1987
  3577                                   	;DB	StackSize DUP (?)       ;
  3578 00000886 00<rep 180h>            	times	StackSize db 0
  3579                                  IOSTACK:    ; LABEL   BYTE		;  Offset 0A06h in IBMDOS.COM, 1987
  3580                                   
  3581                                  ; patch space for Boca folks.
  3582                                  ; Say What????!!! This does NOT go into the swappable area!
  3583                                  ; NOTE: We include the decl of ibmpatch in ms-dos even though it is not needed.
  3584                                  ;       This allows the REDIRector to work on either IBM or MS-DOS.
  3585                                   
  3586                                  ;PUBLIC  IBMPATCH
  3587                                  ;IBMPATCH label byte
  3588                                  ;	I_am    PRINTER_FLAG,BYTE,<0>   ; status of PRINT utility
  3589                                  ;	I_am    VOLCHNG_FLAG,BYTE,<0>   ; true if volume label created
  3590                                  ;	I_am    VIRTUAL_OPEN,BYTE,<0>   ; non-zero if we opened a virtual file
  3591                                  
  3592                                  IBMPATCH:
  3593 00000A06 00                      PRINTER_FLAG:	db 0
  3594 00000A07 00                      VOLCHNG_FLAG:	db 0
  3595 00000A08 00                      VIRTUAL_OPEN:	db 0
  3596                                  
  3597                                  ; MSDOS 6.0
  3598                                  ;; Following 4 variables moved to MSDATA.asm from MSTABLE.asm (P4986)
  3599                                  ;      I_am     FSeek_drive,BYTE        ;AN000; fastseek drive #
  3600                                  ;      I_am     FSeek_firclus,WORD      ;AN000; fastseek first cluster #
  3601                                  ;      I_am     FSeek_logclus,WORD      ;AN000; fastseek logical cluster #
  3602                                  ;      I_am     FSeek_logsave,WORD      ;AN000; fastseek returned log clus #
  3603                                  ;      I_am     UU_ACT_PAGE,WORD,<-1>   ;;;;;;; ;BL ; active EMS page ;AN000;
  3604                                  ;      I_am     TEMP_DOSLOC,WORD,<-1>   ;stores the temporary location of dos
  3605                                  					;at SYSINIT time.
  3606                                  ;SWAP_END LABEL   BYTE
  3607                                  ;PUBLIC  SWAP_END
  3608                                  
  3609                                  SWAP_END:
  3610                                   
  3611                                  ;; THE FOLLOWING BYTE MUST BE HERE, IMMEDIATELY FOLLOWING SWAP_END. IT CANNOT
  3612                                  ;;   BE USED. If the size of the swap data area is ODD, it will be rounded up
  3613                                  ;;   to include this byte.
  3614                                  ;       DB      ?
  3615                                  
  3616 00000A09 00                      	db	0
  3617                                   
  3618                                  ;;hkn;	DB      (512+80+32-(SWAP_END-ibmpatch)) DUP (?)
  3619                                  
  3620                                  ;DOSDATA    ENDS
  3621                                  
  3622                                  ; 08/09/2018
  3623 00000A0A 00<rep 243h>            	times 579 db 0
  3624                                  
  3625                                  ;12/08/2018 - Retro DOS v3.0
  3626                                  ;15/07/2018
  3627                                  ;============================================================================
  3628                                  ; 	Retro DOS v3.0
  3629                                  ;============================================================================
  3630 00000C4D 00                      	db 	0
  3631                                  RETRODOSMSG:
  3632 00000C4E 0D0A                    	db	13,10
  3633                                  	;;db	"Retro DOS v3.0 by Erdogan Tan [2018]"
  3634                                  	; 22/11/2022
  3635                                  	;db	"Retro DOS v3.0 by Erdogan Tan [2018-2022]"
  3636                                  	; 16/01/2024
  3637 00000C50 526574726F20444F53-     	db	"Retro DOS v3.0 by Erdogan Tan [2018-2024]"
  3637 00000C59 2076332E3020627920-
  3637 00000C62 4572646F67616E2054-
  3637 00000C6B 616E205B323031382D-
  3637 00000C74 323032345D         
  3638 00000C79 0D0A2400                	db	13,10,"$", 0 
  3639                                  
  3640                                  ;============================================================================
  3641                                  ; MSTABLE.ASM (MSDOS 6.0, 1991)
  3642                                  ;============================================================================
  3643                                  ; 16/07/2018 - Retro DOS 3.0
  3644                                  
  3645                                  	; Offset 0C78h in IBMDOS.COM (MSDOS 3.3, 1987)
  3646                                  MSVERS:				; MS-DOS version in hex for $GET_VERSION
  3647 00000C7D 03                      MSMAJOR: DB	MAJOR_VERSION	; DOS_MAJOR_VERSION
  3648 00000C7E 1E                      MSMINOR: DB	MINOR_VERSION	; DOS_MINOR_VERSION  
  3649                                  
  3650                                  ;;hkn YRTAB & MONTAB moved to DOSDATA in ms_data.asm
  3651                                  ;        I_am    YRTAB,8,<200,166,200,165,200,165,200,165>   ; [SYSTEM]
  3652                                  ;        I_am    MONTAB,12,<31,28,31,30,31,30,31,31,30,31,30,31> ; [SYSTEM]
  3653                                  
  3654                                  ; DOSTAB.ASM (MSDOS 6.0, 1991)
  3655                                  ; YRTAB & MONTAB moved from TABLE segment in ms_table.asm
  3656                                  ;
  3657                                  ;	I_am    YRTAB,8,<200,166,200,165,200,165,200,165>   
  3658                                  ;	I_am    MONTAB,12,<31,28,31,30,31,30,31,31,30,31,30,31> 
  3659                                  
  3660                                  ; Days in year
  3661                                  
  3662                                  YRTAB:   
  3663 00000C7F C8A6                    	DB	200,166			; Leap year
  3664 00000C81 C8A5                    	DB	200,165
  3665 00000C83 C8A5                    	DB	200,165
  3666 00000C85 C8A5                    	DB	200,165
  3667                                  
  3668                                  ; Days of each month
  3669                                  
  3670                                  MONTAB:        
  3671 00000C87 1F                      	DB      31                      ; January
  3672                                  february:
  3673 00000C88 1C                      	DB	28 			; February--reset each 
  3674                                  					; time year changes
  3675 00000C89 1F                              DB      31                      ; March
  3676 00000C8A 1E                              DB      30                      ; April
  3677 00000C8B 1F                              DB      31                      ; May
  3678 00000C8C 1E                              DB      30                      ; June
  3679 00000C8D 1F                              DB      31                      ; July
  3680 00000C8E 1F                              DB      31                      ; August
  3681 00000C8F 1E                              DB      30                      ; September
  3682 00000C90 1F                              DB      31                      ; October
  3683 00000C91 1E                              DB      30                      ; November
  3684 00000C92 1F                              DB      31                      ; December
  3685                                  
  3686                                  ;
  3687                                  ; This is the error code mapping table for INT 21 errors.  This table defines
  3688                                  ; those error codes which are "allowed" for each system call.  If the error
  3689                                  ; code ABOUT to be returned is not "allowed" for the call, the correct action
  3690                                  ; is to return the "real" error via Extended error, and one of the allowed
  3691                                  ; errors on the actual call.
  3692                                  ;
  3693                                  ; The table is organized as follows:
  3694                                  ;
  3695                                  ;    Each entry in the table is of variable size, but the first
  3696                                  ;       two bytes are always:
  3697                                  ;
  3698                                  ;       Call#,Cnt of bytes following this byte
  3699                                  ;
  3700                                  ; EXAMPLE:
  3701                                  ;       Call 61 (OPEN)
  3702                                  ;
  3703                                  ;       DB      61,5,12,3,2,4,5
  3704                                  ;
  3705                                  ;       61 is the AH INT 21 call value for OPEN.
  3706                                  ;        5 indicates that there are 5 bytes after this byte (12,3,2,4,5).
  3707                                  ;       Next five bytes are those error codes which are "allowed" on OPEN.
  3708                                  ;       The order of these values is not important EXCEPT FOR THE LAST ONE (in
  3709                                  ;       this case 5).  The last value will be the one returned on the call if
  3710                                  ;       the "real" error is not one of the allowed ones.
  3711                                  ;
  3712                                  ; There are a number of calls (for instance all of the FCB calls) for which
  3713                                  ;   there is NO entry.  This means that NO error codes are returned on this
  3714                                  ;   call, so set up an Extended error and leave the current error code alone.
  3715                                  ;
  3716                                  ; The table is terminated by a call value of 0FFh
  3717                                  
  3718                                  ;PUBLIC I21_MAP_E_TAB
  3719                                  	; 10/08/2018
  3720                                  I21_MAP_E_TAB:	; LABEL	BYTE
  3721 00000C93 38020102                    DB  INTERNATIONAL,2,error_invalid_function,error_file_not_found
  3722 00000C97 3903030205                  DB  MKDIR,3,error_path_not_found,error_file_not_found,error_access_denied
  3723 00000C9C 3A041003                    DB  RMDIR,4,error_current_directory,error_path_not_found
  3724 00000CA0 0205                        DB          error_file_not_found,error_access_denied
  3725 00000CA2 3B020203                    DB  CHDIR,2,error_file_not_found,error_path_not_found
  3726 00000CA6 3C040302                    DB  CREAT,4,error_path_not_found,error_file_not_found
  3727 00000CAA 04                          DB          error_too_many_open_files
  3728 00000CAB 05                          DB          error_access_denied
  3729                                      ; MSDOS 6.0
  3730                                      ;DB  OPEN,6,error_path_not_found,error_file_not_found,error_invalid_access
  3731                                      ;DB          error_too_many_open_files
  3732                                      ;DB          error_not_dos_disk,error_access_denied
  3733                                      ; MSDOS 3.3
  3734 00000CAC 3D0503020C                  DB  OPEN,5,error_path_not_found,error_file_not_found,error_invalid_access
  3735 00000CB1 0405                        DB          error_too_many_open_files,error_access_denied
  3736 00000CB3 3E0106                      DB  CLOSE,1,error_invalid_handle
  3737 00000CB6 3F020605                    DB  READ,2,error_invalid_handle,error_access_denied
  3738 00000CBA 40020605                    DB  WRITE,2,error_invalid_handle,error_access_denied
  3739 00000CBE 4103030205                  DB  UNLINK,3,error_path_not_found,error_file_not_found,error_access_denied
  3740 00000CC3 42020601                    DB  LSEEK,2,error_invalid_handle,error_invalid_function
  3741 00000CC7 4304030201                  DB  CHMOD,4,error_path_not_found,error_file_not_found,error_invalid_function
  3742 00000CCC 05                          DB          error_access_denied
  3743 00000CCD 44050F0D01                  DB  IOCTL,5,error_invalid_drive,error_invalid_data,error_invalid_function
  3744 00000CD2 0605                        DB          error_invalid_handle,error_access_denied
  3745 00000CD4 45020604                    DB  XDUP,2,error_invalid_handle,error_too_many_open_files
  3746 00000CD8 46020604                    DB  XDUP2,2,error_invalid_handle,error_too_many_open_files
  3747                                      ; MSDOS 6.0	
  3748                                      ;DB  CURRENT_DIR,2,error_not_DOS_disk,error_invalid_drive
  3749                                      ; MSDOS 3.3	
  3750 00000CDC 47010F                      DB  CURRENT_DIR,1,error_invalid_drive
  3751 00000CDF 48020708                    DB  ALLOC,2,error_arena_trashed,error_not_enough_memory
  3752 00000CE3 49020709                    DB  DEALLOC,2,error_arena_trashed,error_invalid_block
  3753 00000CE7 4A03070908                  DB  SETBLOCK,3,error_arena_trashed,error_invalid_block,error_not_enough_memory
  3754 00000CEC 4B08030102                  DB  EXEC,8,error_path_not_found,error_invalid_function,error_file_not_found
  3755 00000CF1 040B0A                      DB          error_too_many_open_files,error_bad_format,error_bad_environment
  3756 00000CF4 0805                        DB          error_not_enough_memory,error_access_denied
  3757 00000CF6 4E03030212                  DB  FIND_FIRST,3,error_path_not_found,error_file_not_found,error_no_more_files
  3758 00000CFB 4F0112                      DB  FIND_NEXT,1,error_no_more_files
  3759                                      ; MSDOS 6.0
  3760                                      ;DB  RENAME,5,error_not_same_device,error_path_not_found,error_file_not_found
  3761                                      ;DB          error_current_directory,error_access_denied
  3762                                      ; MSDOS 3.3
  3763 00000CFE 5604110302                  DB  RENAME,4,error_not_same_device,error_path_not_found,error_file_not_found
  3764 00000D03 05                          DB          error_access_denied
  3765                                      ; MSDOS 6.0	
  3766                                      ;DB  FILE_TIMES,4,error_invalid_handle,error_not_enough_memory
  3767                                      ;DB             error_invalid_data,error_invalid_function
  3768                                      ; MSDOS 3.03	
  3769 00000D04 57020601                    DB  FILE_TIMES,2,error_invalid_handle,error_invalid_function
  3770 00000D08 580101                      DB  ALLOCOPER,1,error_invalid_function
  3771 00000D0B 5A040302                    DB  CREATETEMPFILE,4,error_path_not_found,error_file_not_found
  3772 00000D0F 0405                        DB          error_too_many_open_files,error_access_denied
  3773 00000D11 5B055003                    DB  CREATENEWFILE,5,error_file_exists,error_path_not_found
  3774 00000D15 020405                      DB          error_file_not_found,error_too_many_open_files,error_access_denied
  3775 00000D18 5C040601                    DB  LOCKOPER,4,error_invalid_handle,error_invalid_function
  3776 00000D1C 2421                        DB          error_sharing_buffer_exceeded,error_lock_violation
  3777 00000D1E 65020102                    DB  GETEXTCNTRY,2,error_invalid_function,error_file_not_found	;DOS 3.3
  3778 00000D22 66020102                    DB  GETSETCDPG,2,error_invalid_function,error_file_not_found        ;DOS 3.3
  3779 00000D26 680106                      DB  COMMIT,1,error_invalid_handle                                   ;DOS 3.3
  3780 00000D29 67030408                    DB  EXTHANDLE,3,error_too_many_open_files,error_not_enough_memory
  3781 00000D2D 01                          DB              error_invalid_function
  3782                                      ; MSDOS 6.0		
  3783                                      ;DB	ExtOpen,10
  3784                                      ;DB   error_path_not_found,error_file_not_found,error_invalid_access
  3785                                      ;DB         error_too_many_open_files,error_file_exists,error_not_enough_memory
  3786                                      ;DB         error_not_dos_disk,error_invalid_data
  3787                                      ;DB             error_invalid_function,error_access_denied
  3788                                      ;DB GetSetMediaID,4,error_invalid_drive,error_invalid_data
  3789                                      ;DB         error_invalid_function,error_access_denied
  3790 00000D2E FF                          DB  0FFh
  3791                                  
  3792                                  ;============================================================================
  3793                                  ; DOSTAB.ASM (MSDOS 6.0, 1991)
  3794                                  ;============================================================================
  3795                                  ; 16/07/2018 - Retro DOS 3.0
  3796                                  
  3797                                  ;**
  3798                                  ;
  3799                                  ; The following table defines CLASS ACTION and LOCUS info for the INT 21H
  3800                                  ; errors.  Each entry is 4 bytes long:
  3801                                  ;
  3802                                  ;       Err#,Class,Action,Locus
  3803                                  ;
  3804                                  ; A value of 0FFh indicates a call specific value (ie.  should already
  3805                                  ; be set).  AN ERROR CODE NOT IN THE TABLE FALLS THROUGH TO THE CATCH ALL AT
  3806                                  ; THE END, IT IS ASSUMES THAT CLASS, ACTION, LOCUS IS ALREADY SET.
  3807                                  ;
  3808                                  
  3809                                  ;PUBLIC  ERR_TABLE_21
  3810                                  ERR_TABLE_21: ; LABEL   BYTE
  3811 00000D2F 010704FF                    DB  error_invalid_function,       errCLASS_Apperr,    errACT_Abort,     0FFh
  3812 00000D33 02080302                    DB  error_file_not_found,         errCLASS_NotFnd,    errACT_User,      errLOC_Disk
  3813 00000D37 03080302                    DB  error_path_not_found,         errCLASS_NotFnd,    errACT_User,      errLOC_Disk
  3814 00000D3B 04010401                    DB  error_too_many_open_files,    errCLASS_OutRes,    errACT_Abort,     errLOC_Unk
  3815 00000D3F 050303FF                    DB  error_access_denied,          errCLASS_Auth,      errACT_User,      0FFh
  3816 00000D43 06070401                    DB  error_invalid_handle,         errCLASS_Apperr,    errACT_Abort,     errLOC_Unk
  3817 00000D47 07070505                    DB  error_arena_trashed,          errCLASS_Apperr,    errACT_Panic,     errLOC_Mem
  3818 00000D4B 08010405                    DB  error_not_enough_memory,      errCLASS_OutRes,    errACT_Abort,     errLOC_Mem
  3819 00000D4F 09070405                    DB  error_invalid_block,          errCLASS_Apperr,    errACT_Abort,     errLOC_Mem
  3820 00000D53 0A070405                    DB  error_bad_environment,        errCLASS_Apperr,    errACT_Abort,     errLOC_Mem
  3821 00000D57 0B090301                    DB  error_bad_format,             errCLASS_BadFmt,    errACT_User,      errLOC_Unk
  3822 00000D5B 0C070401                    DB  error_invalid_access,         errCLASS_Apperr,    errACT_Abort,     errLOC_Unk
  3823 00000D5F 0D090401                    DB  error_invalid_data,           errCLASS_BadFmt,    errACT_Abort,     errLOC_Unk
  3824 00000D63 0F080302                    DB  error_invalid_drive,          errCLASS_NotFnd,    errACT_User,      errLOC_Disk
  3825 00000D67 10030302                    DB  error_current_directory,      errCLASS_Auth,      errACT_User,      errLOC_Disk
  3826 00000D6B 110D0302                    DB  error_not_same_device,        errCLASS_Unk,       errACT_User,      errLOC_Disk
  3827 00000D6F 12080302                    DB  error_no_more_files,          errCLASS_NotFnd,    errACT_User,      errLOC_Disk
  3828 00000D73 500C0302                    DB  error_file_exists,            errCLASS_Already,   errACT_User,      errLOC_Disk
  3829 00000D77 200A0202                    DB  error_sharing_violation,      errCLASS_Locked,    errACT_DlyRet,    errLOC_Disk
  3830 00000D7B 210A0202                    DB  error_lock_violation,         errCLASS_Locked,    errACT_DlyRet,    errLOC_Disk
  3831 00000D7F 540104FF                    DB  error_out_of_structures,      errCLASS_OutRes,    errACT_Abort,     0FFh
  3832 00000D83 56030301                    DB  error_invalid_password,       errCLASS_Auth,      errACT_User,      errLOC_Unk
  3833 00000D87 52010402                    DB  error_cannot_make,            errCLASS_OutRes,    errACT_Abort,     errLOC_Disk
  3834 00000D8B 32090303                    DB  error_not_supported,          errCLASS_BadFmt,    errACT_User,      errLOC_Net
  3835 00000D8F 550C0303                    DB  error_already_assigned,       errCLASS_Already,   errACT_User,      errLOC_Net
  3836 00000D93 57090301                    DB  error_invalid_parameter,      errCLASS_BadFmt,    errACT_User,      errLOC_Unk
  3837 00000D97 530D0401                    DB  error_FAIL_I24,               errCLASS_Unk,       errACT_Abort,     errLOC_Unk
  3838 00000D9B 24010405                    DB  error_sharing_buffer_exceeded,errCLASS_OutRes,    errACT_Abort,     errLOC_Mem
  3839                                      ; MSDOS 6.0
  3840                                      ;DB  error_handle_EOF,            errCLASS_OutRes,    errACT_Abort,     errLOC_Unk ;AN000;
  3841                                      ;DB  error_handle_Disk_Full,      errCLASS_OutRes,    errACT_Abort,     errLOC_Unk ;AN000;
  3842                                      ;DB  error_sys_comp_not_loaded,   errCLASS_Unk,       errACT_Abort,     errLOC_Disk ;AN001;
  3843 00000D9F FFFFFFFF                    DB  0FFh,                         0FFH,       	  0FFH,       	    0FFh
  3844                                  
  3845                                  ; MSDOS 3.3 (IBMDOS.COM, 1987) - Offset 0D2Ah
  3846                                  ;ERR_TABLE_21:	db 1,7,4,0FFh
  3847                                  ;		db 2,8,3,2
  3848                                  ;		db 3,8,3,2
  3849                                  ;		db 4,1,4,1
  3850                                  ;		db 5,3,3,0FFh
  3851                                  ;		db 6,7,4,1
  3852                                  ;		db 7,7,5,5
  3853                                  ;		db 8,1,4,5
  3854                                  ;		db 9,7,4,5
  3855                                  ;		db 0Ah,7,4,5
  3856                                  ;		db 0Bh,9,3,1
  3857                                  ;		db 0Ch,7,4,1
  3858                                  ;		db 0Dh,9,4,1
  3859                                  ;		db 0Fh,8,3,2
  3860                                  ;		db 10h,3,3,2
  3861                                  ;		db 11h,0Dh,3,2
  3862                                  ;		db 12h,8,3,2
  3863                                  ;		db 50h,0Ch,3,2
  3864                                  ;		db 20h,0Ah,2,2
  3865                                  ;		db 21h,0Ah,2,2
  3866                                  ;		db 54h,1,4,0FFh
  3867                                  ;		db 56h,3,3,1
  3868                                  ;		db 52h,1,4,2
  3869                                  ;		db 32h,9,3,3
  3870                                  ;		db 55h,0Ch,3,3
  3871                                  ;		db 57h,9,3,1
  3872                                  ;		db 53h,0Dh,4,1
  3873                                  ;		db 24h,1,4,5
  3874                                  ;		db 0FFh,0FFh,0FFh,0FFh
  3875                                  
  3876                                  ;
  3877                                  ; The following table defines CLASS ACTION and LOCUS info for the INT 24H
  3878                                  ; errors.  Each entry is 4 bytes long:
  3879                                  ;
  3880                                  ;       Err#,Class,Action,Locus
  3881                                  ;
  3882                                  ; A Locus value of 0FFh indicates a call specific value (ie.  should already
  3883                                  ; be set).  AN ERROR CODE NOT IN THE TABLE FALLS THROUGH TO THE CATCH ALL AT
  3884                                  ; THE END.
  3885                                  
  3886                                  ;PUBLIC  ERR_TABLE_24
  3887                                  ERR_TABLE_24: ; LABEL   BYTE
  3888 00000DA3 130B0702                    DB  error_write_protect,          errCLASS_Media,     errACT_IntRet,    errLOC_Disk
  3889 00000DA7 14040501                    DB  error_bad_unit,               errCLASS_Intrn,     errACT_Panic,     errLOC_Unk
  3890 00000DAB 150507FF                    DB  error_not_ready,              errCLASS_HrdFail,   errACT_IntRet,    0FFh
  3891 00000DAF 16040501                    DB  error_bad_command,            errCLASS_Intrn,     errACT_Panic,     errLOC_Unk
  3892 00000DB3 170B0402                    DB  error_CRC,                    errCLASS_Media,     errACT_Abort,     errLOC_Disk
  3893 00000DB7 18040501                    DB  error_bad_length,             errCLASS_Intrn,     errACT_Panic,     errLOC_Unk
  3894 00000DBB 19050102                    DB  error_seek,                   errCLASS_HrdFail,   errACT_Retry,     errLOC_Disk
  3895 00000DBF 1A0B0702                    DB  error_not_DOS_disk,           errCLASS_Media,     errACT_IntRet,    errLOC_Disk
  3896 00000DC3 1B0B0402                    DB  error_sector_not_found,       errCLASS_Media,     errACT_Abort,     errLOC_Disk
  3897 00000DC7 1C020704                    DB  error_out_of_paper,           errCLASS_TempSit,   errACT_IntRet,    errLOC_SerDev
  3898 00000DCB 1D0504FF                    DB  error_write_fault,            errCLASS_HrdFail,   errACT_Abort,     0FFh
  3899 00000DCF 1E0504FF                    DB  error_read_fault,             errCLASS_HrdFail,   errACT_Abort,     0FFh
  3900 00000DD3 1F0D04FF                    DB  error_gen_failure,            errCLASS_Unk,       errACT_Abort,     0FFh
  3901 00000DD7 200A0202                    DB  error_sharing_violation,      errCLASS_Locked,    errACT_DlyRet,    errLOC_Disk
  3902 00000DDB 210A0202                    DB  error_lock_violation,         errCLASS_Locked,    errACT_DlyRet,    errLOC_Disk
  3903 00000DDF 220B0702                    DB  error_wrong_disk,             errCLASS_Media,     errACT_IntRet,    errLOC_Disk
  3904 00000DE3 32090303                    DB  error_not_supported,          errCLASS_BadFmt,    errACT_User,      errLOC_Net
  3905 00000DE7 23070401                    DB  error_FCB_unavailable,        errCLASS_Apperr,    errACT_Abort,     errLOC_Unk
  3906 00000DEB 24010405                    DB  error_sharing_buffer_exceeded,errCLASS_OutRes,    errACT_Abort,     errLOC_Mem
  3907 00000DEF FF0D05FF                    DB	0FFh,                         errCLASS_Unk,       errACT_Panic,     0FFh
  3908                                  
  3909                                  
  3910                                  ; MSDOS 3.3 (IBMDOS.COM, 1987) - Offset 0D9Eh
  3911                                  ;ERR_TABLE_24:	db 13h,0Bh,7,2
  3912                                  ;		db 14h,4,5,1
  3913                                  ;		db 15h,5,7,0FFh
  3914                                  ;		db 16h,4,5,1
  3915                                  ;		db 17h,0Bh,4,2
  3916                                  ;		db 18h,4,5,1
  3917                                  ;		db 19h,5,1,2
  3918                                  ;		db 1Ah,0Bh,7,2
  3919                                  ;		db 1Bh,0Bh,4,2
  3920                                  ;		db 1Ch,2,7,4
  3921                                  ;		db 1Dh,5,4,0FFh
  3922                                  ;		db 1Eh,5,4,0FFh
  3923                                  ;		db 1Fh,0Dh,4,0FFh
  3924                                  ;		db 20h,0Ah,2,2
  3925                                  ;		db 21h,0Ah,2,2
  3926                                  ;		db 22h,0Bh,7,2
  3927                                  ;		db 32h,9,3,3
  3928                                  ;		db 23h,7,4,1
  3929                                  ;		db 24h,1,4,5
  3930                                  ;		db 0FFh,0Dh,5,0FFh
  3931                                  
  3932                                  ;
  3933                                  ; We need to map old int 24 errors and device driver errors into the new set
  3934                                  ; of errors.  The following table is indexed by the new errors
  3935                                  ;
  3936                                  
  3937                                  ;Public  ErrMap24
  3938                                  ErrMap24: ; Label   BYTE
  3939 00000DF3 13                          DB  error_write_protect	; 0
  3940 00000DF4 14                          DB  error_bad_unit		; 1
  3941 00000DF5 15                          DB  error_not_ready		; 2
  3942 00000DF6 16                          DB  error_bad_command	; 3
  3943 00000DF7 17                          DB  error_CRC		; 4
  3944 00000DF8 18                          DB  error_bad_length	; 5
  3945 00000DF9 19                          DB  error_seek		; 6
  3946 00000DFA 1A                          DB  error_not_DOS_disk	; 7
  3947 00000DFB 1B                          DB  error_sector_not_found	; 8
  3948 00000DFC 1C                          DB  error_out_of_paper	; 9
  3949 00000DFD 1D                          DB  error_write_fault	; A
  3950 00000DFE 1E                          DB  error_read_fault	; B
  3951 00000DFF 1F                          DB  error_gen_failure	; C
  3952 00000E00 1F                          DB  error_gen_failure	; D  RESERVED
  3953 00000E01 1F                          DB  error_gen_failure	; E  RESERVED
  3954 00000E02 22                          DB  error_wrong_disk	; F
  3955                                  
  3956                                  ;Public  ErrMap24End
  3957                                  ErrMap24End: ; LABEL   BYTE
  3958                                  
  3959                                  ; 16/07/2018 - Retro DOS v3.0
  3960                                  ;_MAXCALL:	db 	36
  3961                                  ;_MAXCOM:	db	104
  3962                                  
  3963                                  ; 08/09/2018
  3964 00000E03 24                          db  36
  3965 00000E04 68                          db  104
  3966                                  
  3967                                  ;============================================================================
  3968                                  ; MSTABLE.ASM, MSDOS 6.0, 1991
  3969                                  ;============================================================================
  3970                                  ; 11/07/2018 - Retro DOS v3.0
  3971                                  
  3972                                  	%define short_addr dw  ; 03/03/2018 - Retro DOS v2.0
  3973                                  
  3974 00000E05 90                      align 2
  3975                                  
  3976                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 0E00h
  3977                                  
  3978                                  ; Standard Functions
  3979                                  ;DISPATCH    LABEL WORD
  3980                                  DISPATCH:
  3981                                  	; 16/07/2018 - Retro DOS v3.0
  3982                                  	; (MSDOS 3.3)
  3983                                  
  3984 00000E06 [C964]                          short_addr  _$ABORT			    ;  0      0
  3985 00000E08 [7923]                          short_addr  _$STD_CON_INPUT		    ;  1      1
  3986 00000E0A [8223]                          short_addr  _$STD_CON_OUTPUT		    ;  2      2
  3987 00000E0C [3B24]                          short_addr  _$STD_AUX_INPUT		    ;  3      3
  3988 00000E0E [5824]                          short_addr  _$STD_AUX_OUTPUT		    ;  4      4
  3989 00000E10 [5E24]                          short_addr  _$STD_PRINTER_OUTPUT	    ;  5      5
  3990 00000E12 [CB22]                          short_addr  _$RAW_CON_IO		    ;  6      6
  3991 00000E14 [F722]                          short_addr  _$RAW_CON_INPUT		    ;  7      7
  3992 00000E16 [8C20]                          short_addr  _$STD_CON_INPUT_NO_ECHO	    ;  8      8
  3993 00000E18 [F820]                          short_addr  _$STD_CON_STRING_OUTPUT	    ;  9      9
  3994 00000E1A [0421]                          short_addr  _$STD_CON_STRING_INPUT	    ; 10      A
  3995 00000E1C [7224]                          short_addr  _$STD_CON_INPUT_STATUS	    ; 11      B
  3996 00000E1E [7C24]                          short_addr  _$STD_CON_INPUT_FLUSH	    ; 12      C
  3997 00000E20 [531D]                          short_addr  _$DISK_RESET		    ; 13      D
  3998 00000E22 [4F1C]                          short_addr  _$SET_DEFAULT_DRIVE		    ; 14      E
  3999 00000E24 [832B]                          short_addr  _$FCB_OPEN			    ; 15      F
  4000 00000E26 [2525]                          short_addr  _$FCB_CLOSE			    ; 16     10
  4001 00000E28 [832C]                          short_addr  _$DIR_SEARCH_FIRST		    ; 17     11
  4002 00000E2A [182D]                          short_addr  _$DIR_SEARCH_NEXT		    ; 18     12
  4003 00000E2C [C124]                          short_addr  _$FCB_DELETE		    ; 19     13
  4004 00000E2E [6F2C]                          short_addr  _$FCB_SEQ_READ		    ; 20     14
  4005 00000E30 [742C]                          short_addr  _$FCB_SEQ_WRITE	            ; 21     15
  4006 00000E32 [552C]                          short_addr  _$FCB_CREATE		    ; 22     16
  4007 00000E34 [9625]                          short_addr  _$FCB_RENAME		    ; 23     17
  4008                                  	; 16/07/2018
  4009                                          ;short_addr _CPMFUNC			    ; 24     18	
  4010 00000E36 [1C17]                          short_addr  NO_OP			    ; 24     18
  4011 00000E38 [4A1C]                          short_addr  _$GET_DEFAULT_DRIVE		    ; 25     19
  4012 00000E3A [3F1C]                          short_addr  _$SET_DMA			    ; 26     1A
  4013                                  
  4014                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  4015                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  4016                                  ;                                                                          ;
  4017 00000E3C [DC1C]                          short_addr  _$SLEAZEFUNC		    ; 27     1B
  4018 00000E3E [DE1C]                          short_addr  _$SLEAZEFUNCDL		    ; 28     1C
  4019                                  ;                                                                          ;
  4020                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  4021                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  4022                                  
  4023                                          ;short_addr  _CPMFUNC			    ; 29     1D
  4024                                          ;short_addr  _CPMFUNC			    ; 30     1E
  4025                                  
  4026                                  ; 08/07/2018 - Retro DOS v3.0
  4027                                  ; MSDOS 6.0 - MSTABLE.ASM, 1991
  4028                                  
  4029 00000E40 [1C17]                  	short_addr  NO_OP			    ; 29     1D
  4030 00000E42 [1C17]                  	short_addr  NO_OP			    ; 30     1E
  4031                                  
  4032                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  4033                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  4034                                  ;                                                                          ;
  4035 00000E44 [221D]                          short_addr  _$GET_DEFAULT_DPB               ; 31     1F
  4036                                  ;                                                                          ;
  4037                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  4038                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  4039                                          ;short_addr _CPMFUNC			    ; 32     20
  4040                                  
  4041                                  ; 08/07/2018 - Retro DOS v3.0
  4042                                  ; MSDOS 6.0 - MSTABLE.ASM, 1991
  4043                                  
  4044 00000E46 [1C17]                  	short_addr  NO_OP			    ; 32     20
  4045                                  
  4046 00000E48 [792C]                          short_addr  _$FCB_RANDOM_READ               ; 33     21
  4047 00000E4A [7E2C]                          short_addr  _$FCB_RANDOM_WRITE              ; 34     22
  4048 00000E4C [D624]                          short_addr  _$GET_FCB_FILE_LENGTH	    ; 35     23
  4049 00000E4E [A924]                          short_addr  _$GET_FCB_POSITION		    ; 36     24
  4050                                  
  4051                                  ;MAXCALL = ($-DISPATCH)/2 - 1
  4052                                  MAXCALL EQU ($-DISPATCH)/2 - 1
  4053                                  
  4054                                  ; Extended Functions
  4055 00000E50 [711C]                          short_addr  _$SET_INTERRUPT_VECTOR	    ; 37     25
  4056                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  4057                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  4058                                  ;                                                                          ;
  4059 00000E52 [441E]                          short_addr  _$CREATE_PROCESS_DATA_BLOCK	    ; 38     26
  4060                                  ;                                                                          ;
  4061                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  4062                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  4063 00000E54 [6A2C]                          short_addr  _$FCB_RANDOM_READ_BLOCK	    ; 39     27
  4064 00000E56 [652C]                          short_addr  _$FCB_RANDOM_WRITE_BLOCK        ; 40     28
  4065 00000E58 [D11C]                          short_addr  _$PARSE_FILE_DESCRIPTOR	    ; 41     29
  4066 00000E5A [2418]                          short_addr  _$GET_DATE                      ; 42     2A
  4067 00000E5C [4118]                          short_addr  _$SET_DATE                      ; 43     2B
  4068 00000E5E [6118]                          short_addr  _$GET_TIME                      ; 44     2C
  4069 00000E60 [7218]                          short_addr  _$SET_TIME                      ; 45     2D
  4070 00000E62 [1F1A]                          short_addr  _$SET_VERIFY_ON_WRITE           ; 46     2E
  4071                                  
  4072                                  ; Extended functionality group
  4073 00000E64 [2B1C]                          short_addr  _$GET_DMA                       ; 47     2F
  4074 00000E66 [011A]                          short_addr  _$GET_VERSION                   ; 48     30
  4075 00000E68 [6D64]                          short_addr  _$KEEP_PROCESS		    ; 49     31
  4076                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  4077                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  4078                                  ;                                                                          ;
  4079 00000E6A [241D]                          short_addr  _$GET_DPB			    ; 50     32
  4080                                  ;                                                                          ;
  4081                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  4082                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  4083 00000E6C [5F14]                          short_addr  _$SET_CTRL_C_TRAPPING           ; 51     33
  4084 00000E6E [0A1D]                          short_addr  _$GET_INDOS_FLAG                ; 52     34
  4085 00000E70 [611C]                          short_addr  _$GET_INTERRUPT_VECTOR          ; 53     35
  4086 00000E72 [001C]                          short_addr  _$GET_DRIVE_FREESPACE           ; 54     36
  4087 00000E74 [891C]                          short_addr  _$CHAR_OPER                     ; 55     37
  4088 00000E76 [261A]                          short_addr  _$INTERNATIONAL                 ; 56     38
  4089                                  ; XENIX CALLS
  4090                                  ;   Directory Group
  4091 00000E78 [572F]                          short_addr  _$MKDIR			    ; 57     39
  4092 00000E7A [A92E]                          short_addr  _$RMDIR			    ; 58     3A
  4093 00000E7C [E52E]                          short_addr  _$CHDIR			    ; 59     3B
  4094                                  ;   File Group
  4095 00000E7E [F070]                          short_addr  _$CREAT			    ; 60     3C
  4096 00000E80 [3670]                          short_addr  _$OPEN			    ; 61     3D
  4097 00000E82 [C36D]                          short_addr  _$CLOSE		 	    ; 62     3E
  4098 00000E84 [DB6E]                          short_addr  _$READ			    ; 63     3F
  4099 00000E86 [306F]                          short_addr  _$WRITE			    ; 64     40
  4100 00000E88 [4571]                          short_addr  _$UNLINK			    ; 65     41
  4101 00000E8A [356F]                          short_addr  _$LSEEK			    ; 66     42
  4102 00000E8C [FD70]                          short_addr  _$CHMOD			    ; 67     43
  4103 00000E8E [B42F]                          short_addr  _$IOCTL			    ; 68     44
  4104 00000E90 [F16F]                          short_addr  _$DUP			    ; 69     45
  4105 00000E92 [1370]                          short_addr  _$DUP2			    ; 70     46
  4106 00000E94 [4C2E]                          short_addr  _$CURRENT_DIR		    ; 71     47
  4107                                  ;   Memory Group
  4108 00000E96 [4E65]                          short_addr  _$ALLOC			    ; 72     48
  4109 00000E98 [6B66]                          short_addr  _$DEALLOC                       ; 73     49
  4110 00000E9A [4766]                          short_addr  _$SETBLOCK                      ; 74     4A
  4111                                  ;   Process Group
  4112 00000E9C [E25F]                          short_addr  _$EXEC			    ; 75     4B
  4113 00000E9E [A564]                          short_addr  _$EXIT			    ; 76     4C
  4114 00000EA0 [D85F]                          short_addr  _$WAIT			    ; 77     4D
  4115 00000EA2 [8B2D]                          short_addr  _$FIND_FIRST		    ; 78     4E
  4116                                  ;   Special Group
  4117 00000EA4 [E42D]                          short_addr  _$FIND_NEXT			    ; 79     4F
  4118                                  ; SPECIAL SYSTEM GROUP
  4119                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  4120                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  4121                                  ;                                                                          ;
  4122 00000EA6 [5314]                          short_addr  _$SET_CURRENT_PDB		    ; 80     50
  4123 00000EA8 [5914]                          short_addr  _$GET_CURRENT_PDB               ; 81     51
  4124 00000EAA [161D]                          short_addr  _$GET_IN_VARS                   ; 82     52
  4125 00000EAC [8C1D]                          short_addr  _$SETDPB			    ; 83     53
  4126                                  ;                                                                          ;
  4127                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  4128                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  4129 00000EAE [1A1A]                          short_addr  _$GET_VERIFY_ON_WRITE	    ; 84     54
  4130                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  4131                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  4132                                  ;                                                                          ;
  4133 00000EB0 [361E]                          short_addr  _$DUP_PDB                       ; 85     55
  4134                                  ;                                                                          ;
  4135                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  4136                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  4137 00000EB2 [6D71]                          short_addr  _$RENAME			    ; 86     56
  4138 00000EB4 [A16F]                          short_addr  _$FILE_TIMES                    ; 87     57
  4139 00000EB6 [8C66]                          short_addr  _$ALLOCOPER                     ; 88     58
  4140                                  
  4141                                  ; 08/07/2018 - Retro DOS v3.0
  4142                                  ; -------------------------------------------------------------------------;
  4143                                  ; MSDOS 6.0 - MSTABLE.ASM, 1991
  4144                                  
  4145                                  ; Network extention system calls
  4146 00000EB8 [AE1C]                          short_addr  _$GetExtendedError              ; 89     59
  4147 00000EBA [FA71]                          short_addr  _$CreateTempFile                ; 90     5A
  4148 00000EBC [E271]                          short_addr  _$CreateNewFile                 ; 91     5B
  4149 00000EBE [9272]                          short_addr  _$LockOper                      ; 92     5C
  4150 00000EC0 [AE66]                          short_addr  _$ServerCall                    ; 93     5D
  4151 00000EC2 [0469]                          short_addr  _$UserOper                      ; 94     5E
  4152 00000EC4 [9368]                          short_addr  _$AssignOper                    ; 95     5F
  4153 00000EC6 [5C6D]                          short_addr  _$NameTrans                     ; 96     60
  4154 00000EC8 [1C17]                  	short_addr  NO_OP			    ; 97     61
  4155 00000ECA [5914]                          short_addr  _$GET_CURRENT_PDB		    ; 98     62
  4156                                  ; the next call is reserved for hangool sys call
  4157                                  	; 16/07/2018
  4158                                  	;short_addr  _$ECS_Call			    ; 99     63
  4159 00000ECC [1C17]                  	short_addr  NO_OP			    ; 99     63
  4160                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  4161                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  4162                                  ;                                                                          ;
  4163 00000ECE [8614]                          short_addr  _$SET_PRINTER_FLAG              ; 100    64
  4164                                  ;                                                                          ;
  4165                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  4166                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  4167 00000ED0 [AC1A]                          short_addr  _$GetExtCntry                   ; 101    65
  4168 00000ED2 [A91B]                          short_addr  _$GetSetCdPg                    ; 102    66
  4169 00000ED4 [126E]                          short_addr  _$ExtHandle                     ; 103    67
  4170 00000ED6 [F66D]                          short_addr  _$COMMIT                        ; 104    68
  4171                                  
  4172                                  ; 08/07/2018
  4173                                  ; Above system calls are valid for Retro DOS v3.0 (MSDOS 3.3) 
  4174                                  ; Following system calls are valid for Retro DOS v4.0 (MSDOS 6.0)
  4175                                  
  4176                                  ;	short_addr  _$GSetMediaID                   ; 105    69   ;AN000;
  4177                                  ;	short_addr  _$COMMIT                        ; 106    6A   ;AN000;
  4178                                  ;	short_addr  NO_OP                           ; 107    6B   
  4179                                  ;						    ; IFS_IOCTL no longer 
  4180                                  ;						    ; supported
  4181                                  ;	short_addr  _$Extended_Open                 ; 108    6C   ;AN000;
  4182                                  
  4183                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  4184                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  4185                                  ;                                                                          ;
  4186                                  ;ifdef ROMEXEC
  4187                                  ;       short_addr  $ROM_FIND_FIRST	   	    ; 109    6D
  4188                                  ;       short_addr  $ROM_FIND_NEXT	   	    ; 110    6E
  4189                                  ;	short_addr  $ROM_EXCLUDE		    ; 111    6F	  ; M078
  4190                                  ;endif
  4191                                  ;                                                                          ;
  4192                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  4193                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  4194                                  
  4195                                  ;MAXCOM  = ($-DISPATCH)/2 - 1
  4196                                  
  4197                                  MAXCOM  EQU ($-DISPATCH)/2 - 1
  4198                                  
  4199                                  ; 08/07/2018 - Retro DOS v3.0
  4200                                  ; MSDOS 6.0 - MSTABLE.ASM, 1991
  4201                                  
  4202                                  ;	If	Installed
  4203                                  
  4204                                  align 2
  4205                                  
  4206                                  ;PUBLIC FOO
  4207                                  
  4208                                  FOO:	; LABEL WORD
  4209 00000ED8 [CE17]                          short_addr  Leave2F
  4210                                  
  4211 00000EDA [DC0E]                  DTab:	DW  DOSTable
  4212                                  
  4213                                  	;PUBLIC FOO,DTAB
  4214                                  
  4215                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 0ED6h
  4216                                         
  4217                                  DOSTable:  ; LABEL  WORD
  4218 00000EDC 2F                              DB      (DOSTableEnd-DOSTable-1)/2 ; db  46
  4219 00000EDD [FB17]                          short_addr  DOSInstall          ;   0 install check
  4220 00000EDF [BE3A]                          short_addr  DOS_CLOSE           ;   1   DOS_CLOSE
  4221 00000EE1 [7E1C]                          short_addr  RECSET              ;   2   RECSET
  4222 00000EE3 [F817]                          short_addr  DosGetGroup         ;   3   Get DOSGROUP
  4223 00000EE5 [4856]                          short_addr  PATHCHRCMP          ;   4   PATHCHRCMP
  4224 00000EE7 [8423]                          short_addr  OUTT                ;   5   OUT
  4225 00000EE9 [B558]                          short_addr  NET_I24_ENTRY       ;   6   NET_I24_ENTRY
  4226 00000EEB [DA5D]                          short_addr  PLACEBUF            ;   7   PLACEBUF
  4227 00000EED [783B]                          short_addr  FREE_SFT            ;   8   FREE_SFT
  4228 00000EEF [7C5F]                          short_addr  BUFWRITE            ;   9   BUFWRITE
  4229 00000EF1 [2E73]                          short_addr  SHARE_VIOLATION     ;   10  SHARE_VIOLATION
  4230 00000EF3 [6838]                          short_addr  SHARE_ERROR         ;   11  SHARE_ERROR
  4231 00000EF5 [5138]                          short_addr  SET_SFT_MODE        ;   12  SET_SFT_MODE
  4232 00000EF7 [B918]                          short_addr  DATE16              ;   13  DATE16
  4233 00000EF9 [891F]                          short_addr  Idle		;   14      empty slot
  4234 00000EFB [CE5D]                          short_addr  SCANPLACE           ;   15  SCANPLACE
  4235 00000EFD [891F]                          short_addr  Idle		;   16      empty slot
  4236 00000EFF [521F]                          short_addr  StrCpy              ;   17  StrCpy
  4237 00000F01 [6A1F]                          short_addr  StrLen              ;   18  StrLen
  4238 00000F03 [0C56]                          short_addr  UCase		;   19  UCase
  4239 00000F05 [765E]                          short_addr  POINTCOMP           ;   20  POINTCOMP
  4240 00000F07 [535F]                          short_addr  CHECKFLUSH          ;   21  CHECKFLUSH
  4241 00000F09 [1268]                          short_addr  SFFromSFN           ;   22  SFFromSFN
  4242 00000F0B [C469]                          short_addr  GetCDSFromDrv       ;   23  GetCDSFromDrv
  4243 00000F0D [0B16]                          short_addr  Get_User_Stack      ;   24  Get_User_Stack
  4244 00000F0F [7169]                          short_addr  GETTHISDRV          ;   25  GetThisDrv
  4245 00000F11 [816D]                          short_addr  DriveFromText       ;   26  DriveFromText
  4246 00000F13 [6019]                          short_addr  SETYEAR             ;   27  SETYEAR
  4247 00000F15 [F719]                          short_addr  DSUM                ;   28  DSUM
  4248 00000F17 [5419]                          short_addr  DSLIDE              ;   29  DSLIDE
  4249 00000F19 [341F]                          short_addr  StrCmp              ;   30  StrCmp
  4250 00000F1B [B768]                          short_addr  InitCDS             ;   31  initcds
  4251 00000F1D [E467]                          short_addr  pJFNFromHandle      ;   32  pJfnFromHandle
  4252 00000F1F [5C6D]                          short_addr  _$NameTrans		;   33  $NameTrans
  4253 00000F21 [4317]                          short_addr  CAL_LK              ;   34  CAL_LK
  4254 00000F23 [E04A]                          short_addr  DEVNAME             ;   35  DEVNAME
  4255 00000F25 [891F]                          short_addr  Idle                ;   36  Idle
  4256 00000F27 [781F]                          short_addr  DStrLen             ;   37  DStrLen
  4257 00000F29 [0B20]                          short_addr  NLS_OPEN            ;   38  NLS_OPEN      DOS 3.3
  4258 00000F2B [C36D]                          short_addr  _$CLOSE		;   39  $CLOSE        DOS 3.3
  4259 00000F2D [1120]                          short_addr  NLS_LSEEK           ;   40  NLS_LSEEK     DOS 3.3
  4260 00000F2F [DB6E]                          short_addr  _$READ		;   41  $READ         DOS 3.3
  4261 00000F31 [EA1F]                          short_addr  FastInit            ;   42  FastInit      DOS 3.4  ;AN000;
  4262 00000F33 [4A20]                          short_addr  NLS_IOCTL           ;   43  NLS_IOCTL     DOS 3.3
  4263 00000F35 [3D20]                          short_addr  GetDevList          ;   44  GetDevList    DOS 3.3
  4264 00000F37 [6720]                          short_addr  NLS_GETEXT          ;   45  NLS_GETEXT    DOS 3.3
  4265                                          
  4266                                  	; 10/08/2018
  4267                                  	;short_addr  MSG_RETRIEVAL	;   46  MSG_RETRIEVAL DOS 4.0  ;AN000;
  4268                                  
  4269 00000F39 [1C17]                  	short_addr  NO_OP		;   M006: 47  no longer supported
  4270                                  ;*** 	short_addr  Fake_Version	;   47  Fake_Version  DOS 4.0  ;AN006;
  4271                                  
  4272                                  DOSTableEnd:  ; LABEL BYTE
  4273                                  
  4274                                  	;ENDIF
  4275                                  
  4276                                  ;============================================================================
  4277                                  ; DOSTAB.ASM, MSDOS 6.0, 1991
  4278                                  ;============================================================================
  4279                                  ; 16/07/2018 - Retro DOS v3.0
  4280                                  
  4281                                  ;----------------THE FOLL. BLOCK MOVED FROM TABLE SEG IN MS_TABLE.ASM-------
  4282                                  
  4283                                  ; SYS init extended table,   DOS 3.3   F.C. 5/29/86
  4284                                  ;
  4285                                  	;PUBLIC	SysInitTable
  4286                                  
  4287                                  SysInitTable:	; label  byte
  4288 00000F3B [2600]                  	dw      SYSINITVARS			; pointer to sysinit var
  4289 00000F3D 0000                            dw      0                             	; segment
  4290 00000F3F [FD0F]                          dw      COUNTRY_CDPG		   	; pointer to country tabl
  4291 00000F41 0000                            dw      0                            	; segment of pointer
  4292                                  
  4293                                  ; DOS 3.3 F.C. 6/12/86
  4294                                  ; FASTOPEN communications area DOS 3.3   F.C. 5/29/86
  4295                                  ;
  4296                                  	;PUBLIC	FastOpenTable
  4297                                  	;PUBLIC	FastTable		; a better name
  4298                                  	;EXTRN	FastRet:FAR		; defined in misc2.asm
  4299                                  
  4300                                  ; MSDOS 6.0
  4301                                  ;FastTable:     ;label  byte		; a better name
  4302                                  ;FastOpenTable: ;label  byte
  4303                                  ;	dw      2                       ; number of entries
  4304                                  ;	dw      FastRet			; pointer to ret instr.
  4305                                  ;	dw      0                       ; and will be modified by
  4306                                  ;	dw      FastRet			; FASTxxx when loaded in
  4307                                  ;	dw      0                       
  4308                                  
  4309                                  ;
  4310                                  ; DOS 3.3 F.C. 6/12/86
  4311                                  ;
  4312                                  
  4313                                  ;	PUBLIC	FastFlg                 ; flags
  4314                                  ;FastFlg:	;label  byte		; don't change the foll: order
  4315                                  ;FastOpenFlg:
  4316                                  ;	db	0  ; I_am    FastOpenFlg,BYTE,<0>
  4317                                  
  4318                                  ; MSDOS 3.3
  4319                                  FastTable:
  4320                                  FastOpenTable:
  4321 00000F43 0400                    	dw      4 
  4322 00000F45 [0720]                  	dw      FastRet
  4323 00000F47 0000                    	dw      0  ; (('FastRet' segment will be set to CS by DOSINIT))
  4324                                  
  4325                                  	;PUBLIC	FastOpen_Ext_Info
  4326                                  
  4327                                  ; FastOpen_Ext_Info is used as a temporary storage for saving dirpos,dirsec
  4328                                  ; and clusnum  which are filled by DOS 3.ncwhen calling FastOpen Insert
  4329                                  ; or filled by FastOPen when calling FastOpen Lookup
  4330                                  
  4331                                  FastOpen_Ext_Info: ;label  byte		;dirpos
  4332 00000F49 00<rep 5h>              	times	FEI.size db 0	; 5 (for MSDOS 3.3), 11 (for MSDOS 6.0)
  4333                                  
  4334                                  ; Dir_Info_Buff is a dir entry buffer which is filled by FastOPen
  4335                                  ; when calling FastOpen Lookup
  4336                                  
  4337                                  	;PUBLIC	Dir_Info_Buff
  4338                                  
  4339                                  Dir_Info_Buff:	; label  byte
  4340 00000F4E 00<rep 20h>             	times	dir_entry.size db 0 ; 32 ; segment of pointer
  4341                                  
  4342                                  ; MSDOS 3.3 (IBMDOS.COM, 1987)
  4343                                  FastFlg:
  4344                                  FastOpenFlg:
  4345 00000F6E 00                      	db	0
  4346                                  
  4347                                  	;I_am	Next_Element_Start,WORD	; save next element start offset
  4348                                  Next_Element_Start:
  4349 00000F6F 0000                    	dw	0
  4350                                  
  4351                                  	; MSDOS 6.0
  4352                                  	;I_am    Del_ExtCluster,WORD     ; for dos_delete                       
  4353                                  
  4354                                  ; 17/07/2018
  4355                                  
  4356                                  ; The following is a stack and its pointer for interrupt 2F which is uesd
  4357                                  ; by NLSFUNC.  There is no significant use of this stack, we are just trying
  4358                                  ; not to destroy the INT 21 stack saved for the user.
  4359                                  
  4360                                  	;PUBLIC	USER_SP_2F
  4361                                  
  4362                                  USER_SP_2F:	; LABEL  WORD
  4363 00000F71 [730F]                  	dw	FAKE_STACK_2F
  4364                                  
  4365                                  	;PUBLIC	Packet_Temp
  4366                                  ;Packet_Temp	label  word		; temporary packet used by readtime
  4367                                  	;PUBLIC  DOS_TEMP		; temporary word
  4368                                  ;DOS_TEMP	label  word
  4369                                  FAKE_STACK_2F:
  4370                                  	;dw	14 dup (0)
  4371 00000F73 0000<rep Ch>            	times	12 dw 0			; 12 register temporary storage
  4372                                  
  4373                                  	;PUBLIC	Hash_Temp		; temporary word
  4374                                  ;Hash_Temp	label  word              
  4375                                  	;dw	4 dup (0)		; temporary hash table during config.sys
  4376                                  
  4377                                  	;PUBLIC  SCAN_FLAG             	; flag to indicate key ALT_Q
  4378                                  SCAN_FLAG:	; label  byte
  4379 00000F8B 00                      	db	0
  4380                                  
  4381                                  ; MSDOS 3.3
  4382                                  DISK_FULL:
  4383 00000F8C 00                      	db	0
  4384                                  
  4385                                  	;PUBLIC  DATE_FLAG
  4386                                  DATE_FLAG:   	;label  word 		; flag to
  4387 00000F8D 0000                    	dw     0                	; to update the date
  4388                                  
  4389                                  FETCHI_TAG:	;label  word		; OBSOLETE - no longer used
  4390 00000F8F 0000                    	dw     0			; formerly part of IBM's piracy protection
  4391                                  
  4392                                  ; MSDOS 6.0
  4393                                  ;      PUBLIC	MSG_EXTERROR 		; for system message addr              
  4394                                  ;MSG_EXTERROR	label  DWORD                                                     
  4395                                  ;               dd     0                ; for extended error                   
  4396                                  ;               dd     0                ; for parser                           
  4397                                  ;              	dd     0                ; for critical errror                  
  4398                                  ;              	dd     0                ; for IFS                              
  4399                                  ;              	dd     0                ; for code reduction                   
  4400                                  ;
  4401                                  ;      PUBLIC  	SEQ_SECTOR              ; last sector read                     
  4402                                  ;SEQ_SECTOR    	label  DWORD                                                     
  4403                                  ;              	dd     -1                                                        
  4404                                  ;
  4405                                  ;;      I_am    ACT_PAGE,WORD,<-1>      ; active EMS page                       
  4406                                  ;	I_am    SC_SECTOR_SIZE,WORD     ; sector size for SC                 
  4407                                  ;       I_am    SC_DRIVE,BYTE           ; drive # for secondary cache        
  4408                                  ;       I_am    CurSC_DRIVE,BYTE,<-1>   ; current SC drive                   
  4409                                  ;       I_am    CurSC_SECTOR,DWORD      ; current SC starting sector         
  4410                                  ;       I_am    SC_STATUS,WORD,<0>      ; SC status word                     
  4411                                  ;       I_am    SC_FLAG,BYTE,<0>        ; SC flag                            
  4412                                  ;       I_am    AbsDskErr,WORD,<0>	; Storage for Abs dsk read/write err
  4413                                  ;
  4414                                  ;	PUBLIC 	NO_NAME_ID                                                           
  4415                                  ;NO_NAME_ID	label byte                                                           
  4416                                  ;		db   'NO NAME    '	; null media id                      
  4417                                  ;
  4418                                  ;;hkn; moved from TABLE segment in kstrin.asm
  4419                                  ;
  4420                                  ;Public	KISTR001S,KISTR001E,LOOKSIZ	; 2/17/KK
  4421                                  ;KISTR001S	label	byte		; 2/17/KK
  4422                                  ;LOOKSIZ DB	0			; 0 if byte, NZ if word	2/17/KK
  4423                                  ;KISTR001E	label	byte		; 2/17/KK
  4424                                  ;
  4425                                  ;; the nul device driver used to be part of the code.  However, since the 
  4426                                  ;; header is in the data, and the entry points are only given as an offset,
  4427                                  ;; the strategy and interrupt entry points must also be in the data now.
  4428                                  ;;
  4429                                  ;
  4430                                  ;procedure   snuldev,far
  4431                                  ;assume ds:nothing,es:nothing,ss:nothing, cs:dosdata
  4432                                  ; 	or	es:[bx.reqstat],stdon	; set done bit
  4433                                  ;entry inuldev
  4434                                  ;	ret				; must not be a return!
  4435                                  ;endproc snuldev
  4436                                  ;
  4437                                  
  4438                                  ;============================================================================
  4439                                  ; MSTABLE.ASM, MSDOS 6.0, 1991
  4440                                  ;============================================================================
  4441                                  ; 17/07/2018 - Retro DOS v3.0
  4442                                  
  4443                                  ; ----------------------------------------------------------------------------
  4444                                  ; BREAK   <Copyright notice and version>
  4445                                  ; ----------------------------------------------------------------------------
  4446                                  
  4447                                  ;CODSTRT EQU     $
  4448                                  
  4449                                  ; 08/07/2018 - Retro DOS v3.0 by Erdogan Tan
  4450                                  ; (MSTABLE.ASM, MSDOS 6.0, 1991)
  4451                                  
  4452                                  ; NOTE WARNING: This declaration of HEADER must be THE LAST thing in this
  4453                                  ;       module. The reason is so that the data alignments are the same in
  4454                                  ;       IBM-DOS and MS-DOS up through header.
  4455                                  
  4456                                  	;PUBLIC	HEADER
  4457                                  
  4458                                  HEADER:	; LABEL	BYTE
  4459                                          ;IF	DEBUG
  4460                                          ;DB	13,10,"Debugging DOS version "
  4461                                          ;DB	MAJOR_VERSION + "0"
  4462                                          ;DB	"."
  4463                                          ;DB	(MINOR_VERSION / 10) + "0"
  4464                                          ;DB	(MINOR_VERSION MOD 10) + "0"
  4465                                          ;ENDIF
  4466                                  
  4467                                          ;IF	NOT IBM
  4468 00000F91 0D0A4D532D444F5320-             DB	13,10,"MS-DOS version "
  4468 00000F9A 76657273696F6E20   
  4469 00000FA2 33                              DB	MAJOR_VERSION + "0"
  4470 00000FA3 2E                              DB	"."
  4471 00000FA4 33                              DB	(MINOR_VERSION / 10) + "0"
  4472                                          ;DB	(MINOR_VERSION MOD 10) + "0"
  4473 00000FA5 30                              DB	(MINOR_VERSION % 10) + "0"
  4474                                  
  4475                                          ;IF	HIGHMEM
  4476                                          ;DB	"H"
  4477                                          ;ENDIF
  4478                                  
  4479 00000FA6 0D0A436F7079726967-     	DB	13,10,"Copyright 1981,82,83,84,88 Microsoft Corp.",13,10,"$"
  4479 00000FAF 687420313938312C38-
  4479 00000FB8 322C38332C38342C38-
  4479 00000FC1 38204D6963726F736F-
  4479 00000FCA 667420436F72702E0D-
  4479 00000FD3 0A24               
  4480                                  	;ENDIF
  4481                                  
  4482                                  ;IF DEBUG
  4483                                  ;	DB	13,10,"$"
  4484                                  ;ENDIF
  4485                                  
  4486                                  ;include copyrigh.inc
  4487                                  
  4488                                  	;DB	"MS DOS Version 6 (C)Copyright 1981-1993 Microsoft Corp "
  4489                                  	;DB	"Licensed Material - Property of Microsoft "
  4490                                  	;DB	"All rights reserved "
  4491                                  
  4492                                  ;============================================================================
  4493                                  ; MCODE.ASM, MSDOS 6.0, 1991
  4494                                  ;============================================================================
  4495                                  ; 17/07/2018 - Retro DOS v3.0
  4496                                  
  4497                                  ;	TITLE	MISC DOS ROUTINES - Int 25 and 26 handlers and other
  4498                                  ;	NAME	IBMCODE
  4499                                  
  4500                                  ;BREAK <NullDev -- Driver for null device>
  4501                                  
  4502                                  ; ROMDOS note:
  4503                                  ;	NUL device driver used to be here, but it was removed and placed in
  4504                                  ;	DOSDATA, because the entry points have to be in the segment as the
  4505                                  ;	header, which is also in DOSDATA.
  4506                                  
  4507                                  ;BREAK <AbsDRD, AbsDWRT -- INT int_disk_read, int_disk_write handlers>
  4508                                  
  4509                                  ;Public MSC001S,MSC001E
  4510                                  ;MSC001S label byte
  4511                                  	;IF	IBM
  4512                                  ; Codes returned by BIOS
  4513                                  ERRIN:
  4514 00000FD5 02                      	DB	2			; NO RESPONSE
  4515 00000FD6 06                      	DB	6			; SEEK FAILURE
  4516 00000FD7 0C                      	DB	12			; GENERAL ERROR
  4517 00000FD8 04                      	DB	4			; BAD CRC
  4518 00000FD9 08                      	DB	8			; SECTOR NOT FOUND
  4519 00000FDA 00                      	DB	0			; WRITE ATTEMPT ON WRITE-PROTECT DISK
  4520                                  ERROUT:
  4521                                  ; DISK ERRORS RETURNED FROM INT 25 and 26
  4522 00000FDB 80                      	DB	80H			; NO RESPONSE
  4523 00000FDC 40                      	DB	40H			; Seek failure
  4524 00000FDD 02                      	DB	2			; Address Mark not found
  4525 00000FDE 10                      	DB	10H			; BAD CRC
  4526 00000FDF 04                      	DB	4			; SECTOR NOT FOUND
  4527 00000FE0 03                      	DB	3			; WRITE ATTEMPT TO WRITE-PROTECT DISK
  4528                                  
  4529                                  NUMERR	EQU	$-ERROUT
  4530                                  	;ENDIF
  4531                                  ;MSC001E label byte
  4532                                  
  4533                                  ;============================================================================
  4534                                  ; DOSMES.INC (MSDOS 3.3, 1987)
  4535                                  ;============================================================================
  4536                                  ; 17/07/2018 - Retro DOS v3.0
  4537                                  
  4538                                  ;TABLE	SEGMENT BYTE PUBLIC 'TABLE'
  4539                                  
  4540                                  ; The international table(s). Used for DOS 3.x  (x < 3)
  4541                                  ; This is simply a sequence of tables of the following form:
  4542                                  ;
  4543                                  ; Offset
  4544                                  ;		BYTE  Size of this table excluding this byte and the next
  4545                                  ;		WORD  Country code represented by this table
  4546                                  ;			A sequence of n bytes, where n is the number specified
  4547                                  ;			by the first byte above and is not > internat_block_max,
  4548                                  ;			in the correct order for being returned by the
  4549                                  ;			INTERNATIONAL call as follows:
  4550                                  ;		WORD	Date format 0=mdy, 1=dmy, 2=ymd
  4551                                  ;		5 BYTE	Currency symbol null terminated
  4552                                  ;		2 BYTE	thousands separator null terminated
  4553                                  ;		2 BYTE	Decimal point null terminated
  4554                                  ;		2 BYTE	Date separator null terminated
  4555                                  ;		2 BYTE	Time separator null terminated
  4556                                  ;		1 BYTE	Bit field.  Currency format.
  4557                                  ;			Bit 0.	=0 $ before #  =1 $ after #
  4558                                  ;			Bit 1.	no. of spaces between # and $ (0 or 1)
  4559                                  ;			Bit 2.	=1 imbedded at decimal point, & no spaces;
  4560                                  ;		1 BYTE	No. of significant decimal digits in currency
  4561                                  ;		1 BYTE	Bit field.  Time format.
  4562                                  ;			Bit 0.	=0 12 hour clock  =1 24 hour
  4563                                  ;		WORD	Segment offset for address of case conversion routine
  4564                                  ;		WORD	RESERVED. Filled in by DOS. Segment value for above routine
  4565                                  ;		2 BYTE	Data list separator null terminated.
  4566                                  ;		   NOTE: The segment part of the DWORD Map_call is set
  4567                                  ;			by the INTERNATIONAL call. Do not try to initialize
  4568                                  ;			it to anything meaningful.
  4569                                  ;
  4570                                  ; The list of tables is terminated by putting a byte of -1 after the last
  4571                                  ;	table (a table with length -1).
  4572                                  
  4573                                  	; PUBLIC  international_table
  4574                                  
  4575                                  ; Offset 0F95h in IBMDOS.COM (MSDOS 3.3), 1987
  4576                                  
  4577                                  international_table:	; LABEL BYTE
  4578                                  
  4579 00000FE1 18                      	DB 	INTERNAT_BLOCK.size  ; = 24 ; Size in bytes of this table
  4580 00000FE2 0100                    	DW 	1		; Country code
  4581                                  USTABLE:
  4582 00000FE4 0000                    	dw	0		; 0-USA, 1-EUR, 2-JAP
  4583 00000FE6 2400000000              	db	'$',0,0,0,0	; Currency Symbol 5 bytes
  4584 00000FEB 2C00                    	db	',',0		; Thousands separator 2 bytes
  4585 00000FED 2E00                    	db	'.',0		; Decimal separator 2 bytes
  4586 00000FEF 2D00                    	db	'-',0		; Date separator 2 bytes
  4587 00000FF1 3A00                    	db	':',0		; Time separator 2 bytes
  4588 00000FF3 00                      	db	0		; Bit values
  4589                                                                 	;   Bit 0 = 0 if currency symbol first
  4590                                                                 	;         = 1 if currency symbol last
  4591                                                                 	;   Bit 1 = 0 if No space after currency symbol
  4592                                                                 	;         = 1 if space after currency symbol
  4593 00000FF4 02                      	db	2		; Number of places after currency dec point
  4594 00000FF5 00                      	db	0		; if 24 hour time, 0 if 12 hour time
  4595 00000FF6 [FE17]                  	dw	MAP_CASE	; Address of case mapping call (DWORD)
  4596 00000FF8 0000                            dw	0		; THIS IS TWO WORDS SO IT CAN BE INITIALIZED
  4597                                  				;  in pieces.
  4598 00000FFA 2C00                    	db	',',0		; Data list separator character
  4599                                  
  4600                                  ;	Tables for the IBM PC character set follow. The values
  4601                                  ;	associated with some of the currency symbols may change with
  4602                                  ;	other character sets. You may wish to add or delete country
  4603                                  ;	entries. NOTE: It is not a mistake that the JAPANESE entry
  4604                                  ;	has different currency symbols for the KANJI and
  4605                                  ;	non-KANJI versions.
  4606                                  	
  4607 00000FFC FF                      	DB	-1		; end of table
  4608                                  
  4609                                  ; The following table is used for DOS 3.3
  4610                                  ;DOS country and code page information is defined here for DOS 3.3.
  4611                                  ;The initial value for ccDosCountry is 1 (USA).
  4612                                  ;The initial value for ccDosCodepage is 850.
  4613                                  ;
  4614                                  ;
  4615                                  	;PUBLIC  COUNTRY_CDPG,UCASE_TAB,FILE_UCASE_TAB
  4616                                  	;PUBLIC  FILE_CHAR_TAB
  4617                                  
  4618                                  ; country and code page infomation
  4619                                  
  4620                                  COUNTRY_CDPG:	; label  byte
  4621 00000FFD 0000000000000000        	db	0,0,0,0,0,0,0,0		; reserved words
  4622 00001005 5C434F554E5452592E-     	db	'\COUNTRY.SYS',0	; path name of country.sys
  4622 0000100E 53595300           
  4623 00001012 00<rep 33h>             	times	51 db 0
  4624 00001045 B501                    	dw	437			; system code page id
  4625 00001047 0500                    	dw	5			; number of entries
  4626 00001049 02                      	db	SetUcase		; Ucase type
  4627 0000104A [8610]                  	dw	UCASE_TAB		; pointer to upper case table
  4628 0000104C 0000                    	dw	0			; segment of poiter
  4629 0000104E 04                      	db	SetUcaseFile		; Ucase file char type
  4630 0000104F [0811]                  	dw	FILE_UCASE_TAB		; pointer to file upper case table
  4631 00001051 0000                    	dw	0			; segment of poiter
  4632 00001053 05                      	db	SetFileList		; valid file chars type
  4633 00001054 [8A11]                  	dw	FILE_CHAR_TAB		; pointer to valid file char tab
  4634 00001056 0000                    	dw	0			; segment of poiter
  4635 00001058 06                      	db	SetCollate		; collate type
  4636 00001059 [BA11]                  	dw	COLLATE_TAB		; pointer to collate table
  4637 0000105B 0000                    	dw	0			; segment of pointer
  4638 0000105D 01                      	db	SetCountryInfo		; country info type
  4639 0000105E 2600                    	dw	NEW_COUNTRY_SIZE	; extended country info size
  4640 00001060 0100                    	dw	1			; USA country id
  4641 00001062 B501                    	dw	437			; USA system code page id
  4642 00001064 0000                    	dw	0			; date format
  4643 00001066 2400000000              	db	'$',0,0,0,0		; currency symbol
  4644 0000106B 2C00                    	db	',',0			; thousand separator
  4645 0000106D 2E00                    	db	'.',0			; decimal separator
  4646 0000106F 2D00                    	db	'-',0			; date separator
  4647 00001071 3A00                    	db	':',0			; time separator
  4648 00001073 00                      	db	0			; currency format flag
  4649 00001074 02                      	db	2			; # of disgit in currency
  4650 00001075 00                      	db	0			; time format
  4651 00001076 [FE17]                  	dw	MAP_CASE		;mono case routine entry point
  4652 00001078 0000                    	dw	0			; segment of entry point
  4653 0000107A 2C00                    	db	',',0			; data list separator
  4654 0000107C 000000000000000000-     	dw	0,0,0,0,0		; reserved
  4654 00001085 00                 
  4655                                  
  4656                                  ; upper case table
  4657                                  
  4658                                  UCASE_TAB: 	; label   byte
  4659 00001086 8000                    	dw	128
  4660 00001088 809A45418E418F80        	db	128,154,069,065,142,065,143,128
  4661 00001090 4545454949498E8F        	db	069,069,069,073,073,073,142,143
  4662 00001098 9092924F994F5555        	db	144,146,146,079,153,079,085,085
  4663 000010A0 59999A9B9C9D9E9F        	db	089,153,154,155,156,157,158,159
  4664 000010A8 41494F55A5A5A6A7        	db	065,073,079,085,165,165,166,167
  4665 000010B0 A8A9AAABACADAEAF        	db	168,169,170,171,172,173,174,175
  4666 000010B8 B0B1B2B3B4B5B6B7        	db	176,177,178,179,180,181,182,183
  4667 000010C0 B8B9BABBBCBDBEBF        	db	184,185,186,187,188,189,190,191
  4668 000010C8 C0C1C2C3C4C5C6C7        	db	192,193,194,195,196,197,198,199
  4669 000010D0 C8C9CACBCCCDCECF        	db	200,201,202,203,204,205,206,207
  4670 000010D8 D0D1D2D3D4D5D6D7        	db	208,209,210,211,212,213,214,215
  4671 000010E0 D8D9DADBDCDDDEDF        	db	216,217,218,219,220,221,222,223
  4672 000010E8 E0E1E2E3E4E5E6E7        	db	224,225,226,227,228,229,230,231
  4673 000010F0 E8E9EAEBECEDEEEF        	db	232,233,234,235,236,237,238,239
  4674 000010F8 F0F1F2F3F4F5F6F7        	db	240,241,242,243,244,245,246,247
  4675 00001100 F8F9FAFBFCFDFEFF        	db	248,249,250,251,252,253,254,255
  4676                                  
  4677                                  ; file upper case table
  4678                                  
  4679                                  FILE_UCASE_TAB: ; label  byte
  4680 00001108 8000                    	dw	128
  4681 0000110A 809A45418E418F80        	db	128,154,069,065,142,065,143,128
  4682 00001112 4545454949498E8F        	db	069,069,069,073,073,073,142,143
  4683 0000111A 9092924F994F5555        	db	144,146,146,079,153,079,085,085
  4684 00001122 59999A9B9C9D9E9F        	db	089,153,154,155,156,157,158,159
  4685 0000112A 41494F55A5A5A6A7        	db	065,073,079,085,165,165,166,167
  4686 00001132 A8A9AAABACADAEAF        	db	168,169,170,171,172,173,174,175
  4687 0000113A B0B1B2B3B4B5B6B7        	db	176,177,178,179,180,181,182,183
  4688 00001142 B8B9BABBBCBDBEBF        	db	184,185,186,187,188,189,190,191
  4689 0000114A C0C1C2C3C4C5C6C7        	db	192,193,194,195,196,197,198,199
  4690 00001152 C8C9CACBCCCDCECF        	db	200,201,202,203,204,205,206,207
  4691 0000115A D0D1D2D3D4D5D6D7        	db	208,209,210,211,212,213,214,215
  4692 00001162 D8D9DADBDCDDDEDF        	db	216,217,218,219,220,221,222,223
  4693 0000116A E0E1E2E3E4E5E6E7        	db	224,225,226,227,228,229,230,231
  4694 00001172 E8E9EAEBECEDEEEF        	db	232,233,234,235,236,237,238,239
  4695 0000117A F0F1F2F3F4F5F6F7        	db	240,241,242,243,244,245,246,247
  4696 00001182 F8F9FAFBFCFDFEFF        	db	248,249,250,251,252,253,254,255
  4697                                  
  4698                                  ; file char list
  4699                                  
  4700                                  FILE_CHAR_TAB:	; label  byte
  4701 0000118A 1600                    	dw	22				; length
  4702 0000118C 0100FF                  	db	1,0,255 			; include all
  4703 0000118F 000020                  	db	0,0,20h 			; exclude 0 - 20h
  4704 00001192 020E2E222F5C5B5D3A-     	db	2,14,'."/\[]:|<>+=;,'           ; exclude 14 special
  4704 0000119B 7C3C3E2B3D3B2C     
  4705                                  	;db	24 dup (?)			; reserved
  4706 000011A2 00<rep 18h>             	times	24 db 0
  4707                                  
  4708                                  ; collate table
  4709                                  
  4710                                  COLLATE_TAB:	; label   byte
  4711 000011BA 0001                    	dw	256
  4712 000011BC 0001020304050607        	db	0,1,2,3,4,5,6,7
  4713 000011C4 08090A0B0C0D0E0F        	db	8,9,10,11,12,13,14,15
  4714 000011CC 1011121314151617        	db	16,17,18,19,20,21,22,23
  4715 000011D4 18191A1B1C1D1E1F        	db	24,25,26,27,28,29,30,31
  4716 000011DC 2021222324252627        	db	" ","!",'"',"#","$","%","&","'"
  4717 000011E4 28292A2B2C2D2E2F        	db	"(",")","*","+",",","-",".","/"
  4718 000011EC 3031323334353637        	db	"0","1","2","3","4","5","6","7"
  4719 000011F4 38393A3B3C3D3E3F        	db	"8","9",":",";","<","=",">","?"
  4720 000011FC 4041424344454647        	db	"@","A","B","C","D","E","F","G"
  4721 00001204 48494A4B4C4D4E4F        	db	"H","I","J","K","L","M","N","O"
  4722 0000120C 5051525354555657        	db	"P","Q","R","S","T","U","V","W"
  4723 00001214 58595A5B5C5D5E5F        	db	"X","Y","Z","[","\","]","^","_"
  4724 0000121C 6041424344454647        	db	"`","A","B","C","D","E","F","G"
  4725 00001224 48494A4B4C4D4E4F        	db	"H","I","J","K","L","M","N","O"
  4726 0000122C 5051525354555657        	db	"P","Q","R","S","T","U","V","W"
  4727 00001234 58595A7B7C7D7E7F        	db	"X","Y","Z","{","|","}","~",127
  4728 0000123C 4355454141414143        	db	"C","U","E","A","A","A","A","C"
  4729 00001244 4545454949494141        	db	"E","E","E","I","I","I","A","A"
  4730 0000124C 4541414F4F4F5555        	db	"E","A","A","O","O","O","U","U"
  4731 00001254 594F552424242424        	db	"Y","O","U","$","$","$","$","$"
  4732 0000125C 41494F554E4EA6A7        	db	"A","I","O","U","N","N",166,167
  4733 00001264 3FA9AAABAC212222        	db	"?",169,170,171,172,"!",'"','"'
  4734 0000126C B0B1B2B3B4B5B6B7        	db	176,177,178,179,180,181,182,183
  4735 00001274 B8B9BABBBCBDBEBF        	db	184,185,186,187,188,189,190,191
  4736 0000127C C0C1C2C3C4C5C6C7        	db	192,193,194,195,196,197,198,199
  4737 00001284 C8C9CACBCCCDCECF        	db	200,201,202,203,204,205,206,207
  4738 0000128C D0D1D2D3D4D5D6D7        	db	208,209,210,211,212,213,214,215
  4739 00001294 D8D9DADBDCDDDEDF        	db	216,217,218,219,220,221,222,223
  4740 0000129C E053                    	db	224,"S"
  4741 0000129E E2E3E4E5E6E7            	db	226,227,228,229,230,231
  4742 000012A4 E8E9EAEBECEDEEEF        	db	232,233,234,235,236,237,238,239
  4743 000012AC F0F1F2F3F4F5F6F7        	db	240,241,242,243,244,245,246,247
  4744 000012B4 F8F9FAFBFCFDFEFF        	db	248,249,250,251,252,253,254,255
  4745                                  
  4746                                  ;include divmes.inc
  4747                                  
  4748                                  ; THIS IS THE ONLY DOS "MESSAGE". IT DOES NOT NEED A TERMINATOR.
  4749                                  	;PUBLIC	DIVMES
  4750                                  
  4751 000012BC 0D0A44697669646520-     DIVMES:	DB	13,10,"Divide overflow",13,10
  4751 000012C5 6F766572666C6F770D-
  4751 000012CE 0A                 
  4752                                  
  4753                                  	;PUBLIC	DivMesLen
  4754                                  DivMesLen:
  4755 000012CF 1300                    	DW	$-DIVMES	; Length of the above message in bytes
  4756                                  
  4757                                  ;SUBTTL EDIT FUNCTION ASSIGNMENTS AND HEADERS
  4758                                  
  4759                                  ; The following two tables implement the current buffered input editing
  4760                                  ; routines. The tables are pairwise associated in reverse order for ease
  4761                                  ; in indexing. That is; The first entry in ESCTAB corresponds to the last
  4762                                  ; entry in ESCFUNC, and the last entry in ESCTAB to the first entry in ESCFUNC.
  4763                                  
  4764                                  	;PUBLIC	CANCHAR
  4765                                  CANCHAR:
  4766 000012D1 1B                      	DB	CANCEL	; 1Bh	;Cancel line character
  4767                                  	
  4768                                  	;PUBLIC	ESCCHAR
  4769                                  ESCCHAR:
  4770 000012D2 00                      	DB	ESCCH	; 0	;Lead-in character for escape sequences
  4771                                  	
  4772                                  	;IF	NOT Rainbow
  4773                                  
  4774                                  ESCTAB:	; LABEL BYTE
  4775                                  
  4776                                  	;IF	IBM
  4777 000012D3 40                      	DB	64		; Ctrl-Z - F6
  4778 000012D4 4D                      	DB	77		; Copy one char - -->
  4779 000012D5 3B                      	DB	59		; Copy one char - F1
  4780 000012D6 53                      	DB	83		; Skip one char - DEL
  4781 000012D7 3C                      	DB	60		; Copy to char - F2
  4782 000012D8 3E                      	DB	62		; Skip to char - F4
  4783 000012D9 3D                      	DB	61		; Copy line - F3
  4784 000012DA 3D                      	DB	61		; Kill line (no change to template ) - Not used
  4785 000012DB 3F                      	DB	63		; Reedit line (new template) - F5
  4786 000012DC 4B                      	DB	75		; Backspace - <--
  4787 000012DD 52                      	DB	82		; Enter insert mode - INS (toggle)
  4788 000012DE 52                      	DB	82		; Exit insert mode - INS (toggle)
  4789 000012DF 41                      	DB	65		; Escape character - F7
  4790 000012E0 41                      	DB	65		; End of table
  4791                                  	;ENDIF
  4792                                  
  4793                                  ESCEND: ; LABEL BYTE
  4794                                  
  4795                                  ESCTABLEN EQU ESCEND-ESCTAB
  4796                                  
  4797                                  ESCFUNC: ; LABEL WORD
  4798                                  	
  4799 000012E1 [3F21]                  	short_addr  GETCH	; Ignore the escape sequence
  4800 000012E3 [2C22]                  	short_addr  TWOESC
  4801 000012E5 [B422]                  	short_addr  EXITINS
  4802 000012E7 [B422]                  	short_addr  ENTERINS
  4803 000012E9 [B621]                  	short_addr  BACKSP
  4804 000012EB [A022]                  	short_addr  REEDIT
  4805 000012ED [A321]                  	short_addr  KILNEW
  4806 000012EF [3322]                  	short_addr  COPYLIN
  4807 000012F1 [6622]                  	short_addr  SKIPSTR
  4808 000012F3 [3922]                  	short_addr  COPYSTR
  4809 000012F5 [5C22]                  	short_addr  SKIPONE
  4810 000012F7 [3E22]                  	short_addr  COPYONE
  4811 000012F9 [3E22]                  	short_addr  COPYONE
  4812 000012FB [BC22]                  	short_addr  CTRLZ
  4813                                  
  4814                                  	;ENDIF
  4815                                  
  4816                                  ;TABLE	ENDS
  4817                                  
  4818                                  ; 17/07/2018
  4819                                  ; Offset 12B1h of IBMDOS.COM (MSDOS 3.3), 1987
  4820                                  
  4821                                  ;CRTERRTAB: ; 19/07/2018	
  4822                                  ;	db	0,5,52h,50h,3,5,20h
  4823                                  
  4824                                  ; 08/08/2018
  4825                                  
  4826                                  CRTERRTAB:	;LABEL BYTE	; Lookup table for MakeNode returns
  4827 000012FD 00                      	DB	0			; none
  4828 000012FE 05                      	DB	error_access_denied	; MakeNode error 1
  4829 000012FF 52                      	DB	error_cannot_make	; MakeNode error 2
  4830 00001300 50                      	DB	error_file_exists	; MakeNode error 3
  4831 00001301 03                      	DB	error_path_not_found	; MakeNode error 4
  4832 00001302 05                      	DB	error_access_denied	; MakeNode error 5
  4833 00001303 20                      	DB	error_sharing_violation ; MakeNode error 6
  4834                                  	; MSDOS 6.0
  4835                                  	;DB	error_file_not_found	; MakeNode error 7
  4836                                  
  4837                                  ;============================================================================
  4838                                  ; DEV.ASM (MSDOS 6.0, 1987)
  4839                                  ;============================================================================
  4840                                  ; 17/07/2018 - Retro DOS v3.0
  4841                                  
  4842                                  ; Offset 12B8h of IBMDOS.COM (MSDOS 3.3), 1987
  4843                                  
  4844                                  ;Public DEV001S, DEV001E 		; Pathgen labels
  4845                                  ;DEV001s:
  4846                                  ;		length of packets
  4847 00001304 160E160D0F0E            LenTab:		DB	DRDWRHL, DRDNDHL, DRDWRHL, DSTATHL, DFLSHL, DRDNDHL
  4848                                  ;LenTab:	db	22,14,22,13,15,14
  4849                                  
  4850                                  ;	       Error Function
  4851                                  
  4852                                  CmdTab:
  4853 0000130A 8604                    	DB	86h, DEVRD	; 0 input
  4854 0000130C 8605                    	DB	86h, DEVRDND	; 1 input status
  4855 0000130E 8708                    	DB	87h, DEVWRT	; 2 output
  4856 00001310 870A                    	DB	87h, DEVOST	; 3 output status
  4857 00001312 8607                    	DB	86h, DEVIFL	; 4 input flush
  4858 00001314 8605                    	DB	86H, DEVRDND	; 5 input status with system WAIT
  4859                                  
  4860                                  ; Offset 12BEh of IBMDOS.COM (MSDOS 3.3), 1987
  4861                                  
  4862                                  ;CmdTab:
  4863                                  ;	db	86h, 4
  4864                                  ;	db	86h, 5
  4865                                  ;	db	87h, 8
  4866                                  ;	db	87h, 10
  4867                                  ;	db	86h, 7
  4868                                  ;	db	86h, 5
  4869                                  
  4870                                  ;DEV001E:
  4871                                  
  4872                                  ;============================================================================
  4873                                  ; FCB.ASM (MSDOS 6.0, 1987)
  4874                                  ;============================================================================
  4875                                  ; 17/07/2018 - Retro DOS v3.0
  4876                                  
  4877                                  ; Character type table for file name scanning
  4878                                  ; Table provides a mapping of characters to validity bits.
  4879                                  ; Four bits are provided for each character.  Values 7Dh and above
  4880                                  ; have all bits set, so that part of the table is chopped off, and
  4881                                  ; the translation routine is responsible for screening these values.
  4882                                  ; The bit values are defined in DOSSYM.INC
  4883                                  
  4884                                  ;	      ; ^A and NUL
  4885                                  ;CharType:
  4886                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
  4887                                  ;
  4888                                  ;	      ; ^C and ^B
  4889                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
  4890                                  ;
  4891                                  ;	      ; ^E and ^D
  4892                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
  4893                                  ;
  4894                                  ;	      ; ^G and ^F
  4895                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
  4896                                  ;
  4897                                  ;	      ; TAB and BS
  4898                                  ;	 db   LOW ((NOT FFCB+FCHK+FDELIM+FSPCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
  4899                                  ;
  4900                                  ;	      ; ^K and ^J
  4901                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
  4902                                  ;
  4903                                  ;	      ; ^M and ^L
  4904                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
  4905                                  ;
  4906                                  ;	      ; ^O and ^N
  4907                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
  4908                                  ;
  4909                                  ;	      ; ^Q and ^P
  4910                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
  4911                                  ;
  4912                                  ;	      ; ^S and ^R
  4913                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
  4914                                  ;
  4915                                  ;	      ; ^U and ^T
  4916                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
  4917                                  ;
  4918                                  ;	      ; ^W and ^V
  4919                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
  4920                                  ;
  4921                                  ;	      ; ^Y and ^X
  4922                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
  4923                                  ;
  4924                                  ;	      ; ESC and ^Z
  4925                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
  4926                                  ;
  4927                                  ;	      ; ^] and ^;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
  4929                                  ;
  4930                                  ;	      ; ^_ and ^^
  4931                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
  4932                                  ;
  4933                                  ;	      ; ! and SPACE
  4934                                  ;	 db   LOW (NOT FCHK+FDELIM+FSPCHK)
  4935                                  ;
  4936                                  ;	      ; # and "
  4937                                  ;	 db   LOW (NOT FFCB+FCHK)
  4938                                  ;
  4939                                  ;	      ; $ - )
  4940                                  ;	 db   3 dup (0FFh)
  4941                                  ;
  4942                                  ;	      ; + and *
  4943                                  ;	 db   LOW ((NOT FFCB+FCHK+FDELIM) SHL 4) OR 0Fh
  4944                                  ;
  4945                                  ;	      ; - and '
  4946                                  ;	 db   NOT (FFCB+FCHK+FDELIM)
  4947                                  ;
  4948                                  ;	      ; / and .
  4949                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FCHK) AND 0Fh
  4950                                  ;
  4951                                  ;	      ; 0 - 9
  4952                                  ;	 db   5 dup (0FFh)
  4953                                  ;
  4954                                  ;	      ; ; and :
  4955                                  ;	 db   LOW ((NOT FFCB+FCHK+FDELIM) SHL 4) OR LOW (NOT FFCB+FCHK+FDELIM) AND 0Fh
  4956                                  ;
  4957                                  ;	      ; = and <
  4958                                  ;	 db   LOW ((NOT FFCB+FCHK+FDELIM) SHL 4) OR LOW (NOT FFCB+FCHK+FDELIM) AND 0Fh
  4959                                  ;
  4960                                  ;	      ; ? and >
  4961                                  ;	 db   NOT FFCB+FCHK+FDELIM
  4962                                  ;
  4963                                  ;	      ; A - Z
  4964                                  ;	 db   13 dup (0FFh)
  4965                                  ;
  4966                                  ;	      ; \ and [
  4967                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR 0Fh
  4968                                  ;
  4969                                  ;	      ; ^ and ]
  4970                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
  4971                                  ;
  4972                                  ;	      ; _ - {
  4973                                  ;	 db   15 dup (0FFh)
  4974                                  ;
  4975                                  ;	      ; } and |
  4976                                  ;	 db   NOT FFCB+FCHK+FDELIM
  4977                                  
  4978                                  ;CharType_last equ ($ - CharType) * 2	; This is the value of the last
  4979                                  ;					; character in the table
  4980                                  
  4981                                  ; Offset 12CAh of IBMDOS.COM (MSDOS 3.3), 1987
  4982                                  
  4983                                  CharType:
  4984 00001316 F6F6F6F6F6F6F6F6                db 0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h
  4985 0000131E F6F0F6F6F6F6F6F6        	db 0F6h,0F0h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h
  4986 00001326 F6F6F6F6F6F6F6F6        	db 0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h
  4987 0000132E F6F6F6F6F6F6F6F6        	db 0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h
  4988 00001336 F8FFF6FFFFFFFFFF        	db 0F8h,0FFh,0F6h,0FFh,0FFh,0FFh,0FFh,0FFh
  4989 0000133E FFFFFFF4F4FFFEF6        	db 0FFh,0FFh,0FFh,0F4h,0F4h,0FFh,0FEh,0F6h
  4990 00001346 FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  4991 0000134E FFFFF4F4F4F4F4FF        	db 0FFh,0FFh,0F4h,0F4h,0F4h,0F4h,0F4h,0FFh
  4992 00001356 FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  4993 0000135E FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  4994 00001366 FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  4995 0000136E FFFFFFF6F6F6FFFF        	db 0FFh,0FFh,0FFh,0F6h,0F6h,0F6h,0FFh,0FFh
  4996 00001376 FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  4997 0000137E FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  4998 00001386 FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  4999 0000138E FFFFFFFFF4FFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0F4h,0FFh,0FFh,0FFh
  5000 00001396 FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  5001 0000139E FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  5002 000013A6 FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  5003 000013AE FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  5004 000013B6 FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  5005 000013BE FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  5006 000013C6 FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  5007 000013CE FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  5008 000013D6 FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  5009 000013DE FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  5010 000013E6 FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  5011 000013EE FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  5012 000013F6 FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  5013 000013FE FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  5014 00001406 FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  5015 0000140E FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  5016                                  
  5017                                  ; 02/08/2018 - Retro DOS v3.0
  5018                                  ; DOSTAB.ASM - MSDOS 6.0 - 1991
  5019                                  
  5020                                  ; Offset 13CAh of IBMDOS.COM (MSDOS 3.3), 1987
  5021                                  
  5022 00001416 0000                    exec_init_SP:	dw 0
  5023 00001418 0000                    exec_init_SS:	dw 0
  5024 0000141A 0000                    exec_init_IP:	dw 0
  5025 0000141C 0000                    exec_init_CS:	dw 0
  5026                                  
  5027 0000141E 0000                    exec_signature:	dw 0	; must contain 4D5A  (yay zibo!)
  5028 00001420 0000                    exec_len_mod_512: dw 0	; low 9 bits of length
  5029 00001422 0000                    exec_pages:	dw 0	; number of 512b pages in file
  5030 00001424 0000                    exec_rle_count:	dw 0	; count of reloc entries
  5031 00001426 0000                    exec_par_dir:	dw 0	; number of paragraphs before image
  5032 00001428 0000                    exec_min_BSS:	dw 0	; minimum number of para of BSS
  5033 0000142A 0000                    exec_max_BSS:	dw 0	; max number of para of BSS
  5034 0000142C 0000                    exec_SS:	dw 0	; stack of image
  5035 0000142E 0000                    exec_SP:	dw 0	; SP of image
  5036 00001430 0000                    exec_chksum:	dw 0	; checksum  of file (ignored)
  5037 00001432 0000                    exec_IP:	dw 0	; IP of entry
  5038 00001434 0000                    exec_CS:	dw 0	; CS of entry
  5039 00001436 0000                    exec_rle_table:	dw 0	; byte offset of reloc table
  5040                                  
  5041                                  Exec_Header_Len	EQU $-exec_signature
  5042                                  
  5043                                  ; 02/08/2018 - Retro DOS v3.0
  5044                                  ; SRVCALL.ASM - MSDOS 6.0 - 1991
  5045                                  ;** Server DOS call functions
  5046                                  
  5047 00001438 [3C14]                  SERVERTAB:      dw SERVER_DISP
  5048 0000143A [E166]                  SERVERLEAVE:	dw SERVERRETURN
  5049 0000143C 0B                      SERVER_DISP:	db (SERVER_DISP_END-SERVER_DISP-1)/2
  5050 0000143D [4C67]                  		dw SRV_CALL	; 0
  5051 0000143F [E266]                  		dw COMMIT_ALL	; 1
  5052 00001441 [1967]                  		dw CLOSE_NAME	; 2
  5053 00001443 [2567]                  		dw CLOSE_UID	; 3
  5054 00001445 [2C67]                  		dw CLOSE_UID_PID ; 4
  5055 00001447 [3367]                  		dw GET_LIST	; 5
  5056 00001449 [8D67]                  		dw GET_DOS_DATA	; 6
  5057 0000144B [B167]                  		dw SPOOL_OPER	; 7
  5058 0000144D [B167]                  		dw SPOOL_OPER	; 8
  5059 0000144F [B167]                  		dw SPOOL_OPER	; 9
  5060 00001451 [C067]                  		dw _$SetExtendedError ; 10
  5061                                  SERVER_DISP_END:
  5062                                  
  5063                                  ;============================================================================
  5064                                  ; MSCODE.ASM
  5065                                  ;============================================================================
  5066                                  
  5067                                  ; Retro DOS v2.0 (NASM 2.11) source code modifications by Erdogan Tan
  5068                                  ; 03/03/2018
  5069                                  
  5070                                  ;
  5071                                  ; MSCODE.ASM -- MSDOS code
  5072                                  ;
  5073                                  
  5074                                  ;INCLUDE DOSSEG.ASM
  5075                                  ;INCLUDE STDSW.ASM
  5076                                  
  5077                                  ;CODE    SEGMENT BYTE PUBLIC  'CODE'
  5078                                  ;ASSUME  CS:DOSGROUP,DS:NOTHING,ES:NOTHING,SS:NOTHING
  5079                                  
  5080                                  ;.xcref
  5081                                  ;INCLUDE DOSSYM.ASM
  5082                                  ;INCLUDE DEVSYM.ASM
  5083                                  ;.cref
  5084                                  ;.list
  5085                                  
  5086                                  ;IFNDEF  KANJI
  5087                                  ;KANJI   EQU     0       ; FALSE
  5088                                  ;ENDIF
  5089                                  
  5090                                  ;IFNDEF  IBM
  5091                                  ;IBM     EQU     0
  5092                                  ;ENDIF
  5093                                  
  5094                                  ;IFNDEF  HIGHMEM
  5095                                  ;HIGHMEM  EQU     0
  5096                                  ;ENDIF
  5097                                  
  5098                                          ;i_need  USER_SP,WORD
  5099                                          ;i_need  USER_SS,WORD
  5100                                          ;i_need  SAVEDS,WORD
  5101                                          ;i_need  SAVEBX,WORD
  5102                                          ;i_need  INDOS,BYTE
  5103                                          ;i_need  NSP,WORD
  5104                                          ;i_need  NSS,WORD
  5105                                          ;i_need  CURRENTPDB,WORD
  5106                                          ;i_need  AUXSTACK,BYTE
  5107                                          ;i_need  CONSWAP,BYTE
  5108                                          ;i_need  IDLEINT,BYTE
  5109                                          ;i_need  NOSETDIR,BYTE
  5110                                          ;i_need  ERRORMODE,BYTE
  5111                                          ;i_need  IOSTACK,BYTE
  5112                                          ;i_need  WPERR,BYTE
  5113                                          ;i_need  DSKSTACK,BYTE
  5114                                          ;i_need  CNTCFLAG,BYTE
  5115                                          ;i_need  LEAVEADDR,WORD
  5116                                          ;i_need  NULLDEVPT,DWORD
  5117                                  
  5118                                          ;IF NOT IBM
  5119                                          ;i_need  OEM_HANDLER,DWORD
  5120                                          ;ENDIF
  5121                                  
  5122                                          ;EXTRN   DSKSTATCHK:NEAR,GETBP:NEAR,DSKREAD:NEAR,DSKWRITE:NEAR
  5123                                  
  5124                                  ;============================================================================
  5125                                  ; MSDISP.ASM, MSDOS 6.0, 1991
  5126                                  ;============================================================================
  5127                                  ; 11/07/2018 - Retro DOS v3.0
  5128                                  
  5129                                  ; 18/07/2018
  5130                                  
  5131                                  ; The following two routines are dispatched to directly with ints disabled
  5132                                  ; immediately after the int 21h entry.	no DIS state is set.
  5133                                  
  5134                                  ; ---------------------------------------------------------------------------
  5135                                  ; $Set_current_PDB takes BX and sets it to be the current process
  5136                                  ;   *** THIS FUNCTION CALL IS SUBJECT TO CHANGE!!! ***
  5137                                  ;
  5138                                         ;procedure   $SET_CURRENT_PDB,NEAR
  5139                                  _$SET_CURRENT_PDB:
  5140                                          ;ASSUME	DS:NOTHING,SS:NOTHING
  5141 00001453 2E891E[DE02]                    MOV     [CS:CurrentPDB],BX ; 12/03/2018
  5142 00001458 CF                      	iret ; 08/07/2018 - Retro DOS v3.0
  5143                                  ;$SET_CURRENT_PDB    ENDP
  5144                                  
  5145                                  ; ---------------------------------------------------------------------------
  5146                                  ; $get_current_PDB returns in BX the current process
  5147                                  ;   *** THIS FUNCTION CALL IS SUBJECT TO CHANGE!!! ***
  5148                                  ;
  5149                                          ;procedure $GET_CURRENT_PDB,NEAR
  5150                                  _$GET_CURRENT_PDB:
  5151                                          ;ASSUME	DS:NOTHING,SS:NOTHING
  5152 00001459 2E8B1E[DE02]            	mov	BX,[CS:CurrentPDB] ; 11/07/2018
  5153 0000145E CF                      	iret ; 08/07/2018 - Retro DOS v3.0
  5154                                  ;$GET_CURRENT_PDB    ENDP
  5155                                  ; ---------------------------------------------------------------------------
  5156                                  
  5157                                  ; 11/07/2018 - Retro DOS v3.0
  5158                                  
  5159                                  ;BREAK <$Set_CTRL_C_Trapping -- En/Disable ^C check in dispatcher>
  5160                                  
  5161                                  _$SET_CTRL_C_TRAPPING:
  5162                                  
  5163                                  ; Inputs:
  5164                                  ;       AL = 0 read ^C status
  5165                                  ;       AL = 1 Set ^C status, DL = 0/1 for ^C off/on
  5166                                  ;	AL = 2 Set ^C status to contents of DL.	Output is old state.
  5167                                  ;	     (MSDISP.ASM,MSDOS 6.0, 1991)
  5168                                  ; Function:
  5169                                  ;       Enable disable ^C checking in dispatcher
  5170                                  ; Outputs:
  5171                                  ;       If AL = 0 then DL = 0/1 for ^C off/on
  5172                                  
  5173                                  	; 08/07/2018 - Retro DOS v3.0
  5174                                  
  5175 0000145F 08C0                            OR      AL,AL
  5176 00001461 7506                            JNZ     SHORT CTRL_C_set
  5177                                  
  5178                                  	; 11/07/2018
  5179 00001463 2E8A16[E502]            	mov	dl,[CS:CNTCFLAG]
  5180 00001468 CF                      	iret
  5181                                  
  5182                                  CTRL_C_set:
  5183                                  	; 08/07/2018
  5184 00001469 3C02                    	cmp	al,2
  5185 0000146B 7716                    	ja	short bad_val
  5186 0000146D 740B                    	je	short scct_3
  5187                                  
  5188 0000146F 52                      	push    dx
  5189 00001470 80E201                  	and     dl,1
  5190 00001473 2E8816[E502]            	mov     [cs:CNTCFLAG],dl
  5191 00001478 5A                      	pop     dx
  5192 00001479 CF                      	iret
  5193                                  
  5194                                  scct_3:
  5195 0000147A 80E201                  	and	dl,1
  5196 0000147D 2E8616[E502]                    xchg	dl,[CS:CNTCFLAG]
  5197 00001482 CF                              iret
  5198                                  
  5199                                  bad_val:
  5200 00001483 B0FF                    	MOV	AL,0FFH
  5201 00001485 CF                      	iret
  5202                                  
  5203                                  ; 11/07/2018
  5204                                  
  5205                                  _$SET_PRINTER_FLAG:
  5206                                  	; 08/07/2018 - Retro DOS v3.0
  5207                                  	;mov 	[cs:IOSTACK],al
  5208 00001486 2EA2[060A]              	mov	[cs:PRINTER_FLAG],al
  5209 0000148A CF                      	iret
  5210                                  
  5211                                  ; 08/07/2018 - Retro DOS v3.0
  5212                                  ; (MSDISP.ASM, MSDOS 6.0, 1991)
  5213                                  
  5214                                  ; ----------------------------------------------------------------------------
  5215                                  ; BREAK   <System call entry points and dispatcher>
  5216                                  ; ----------------------------------------------------------------------------
  5217                                  ;ASSUME  CS:DOSGROUP,DS:NOTHING,ES:NOTHING,SS:NOTHING
  5218                                  
  5219                                          ;procedure   SYSTEM_CALL,NEAR
  5220                                  SYSTEM_CALL:
  5221                                  ;entry	QUIT				; INT 20H entry point
  5222                                  QUIT:
  5223                                  	;MOV	AH,0
  5224 0000148B 30E4                    	xor	ah,ah ; 08/07/2018
  5225 0000148D EB47                    	JMP     SHORT SAVREGS
  5226                                  
  5227                                  ; ---------------------------------------------------------------------------
  5228                                  
  5229                                  ;COMMAND:
  5230                                  ;	;IF	NOT IBM
  5231                                  ;       CMP	AH,SET_OEM_HANDLER
  5232                                  ;       JB      SHORT NOTOEM
  5233                                  ;	; 18/07/2018
  5234                                  ;	je	_$SET_OEM_HANDLER	
  5235                                  ;
  5236                                  ;	; 20/04/2018
  5237                                  ;       ;JMP	_$SET_OEM_HANDLER
  5238                                  ;
  5239                                  ;	; Retro DOS v2.0 - 20/04/2018
  5240                                  ;	CMP	AX, 0FFFFh
  5241                                  ;	;JNE	_$SET_OEM_HANDLER
  5242                                  ;	; 18/07/2018
  5243                                  ;	jne	DO_OEM_FUNC
  5244                                  ;
  5245                                  ;	PUSHA
  5246                                  ;	MOV     SI,RETRODOSMSG
  5247                                  ;       ;CALL	OUTMES
  5248                                  ;wrdosmsg:
  5249                                  ;	mov	ah, 0Eh
  5250                                  ;	mov	bx, 7
  5251                                  ;wrdosmsg_nxt:
  5252                                  ;	cs	lodsb
  5253                                  ;	cmp	al, '$'
  5254                                  ;	je	short wrdosmsg_ok		
  5255                                  ;	int	10h
  5256                                  ;	jmp	short wrdosmsg_nxt
  5257                                  ;wrdosmsg_ok:
  5258                                  ;	POPA
  5259                                  ;	JMP	SHORT BADCALL 
  5260                                  ;	;
  5261                                  ;NOTOEM:
  5262                                  ;	;ENDIF
  5263                                  ;
  5264                                  ;       CMP     AH,MAXCOM
  5265                                  ;       JBE     SHORT SAVREGS
  5266                                  
  5267                                  	; The system call in AH is out of the range that we know how
  5268                                  	; to handle. We arbitrarily set the contents of AL to 0 and
  5269                                  	; IRET. Note that we CANNOT set the carry flag to indicate an
  5270                                  	; error as this may break some programs compatability.
  5271                                  
  5272                                  BADCALL:
  5273                                          ;MOV	AL,0
  5274 0000148F 30C0                    	xor	al,al ; 08/07/2018
  5275                                  ;entry	IRET
  5276                                  _IRET:
  5277 00001491 CF                              IRET
  5278                                  
  5279                                  ; ---------------------------------------------------------------------------
  5280                                  
  5281                                  ;entry	CALL_ENTRY                      ; System call entry point and dispatcher
  5282                                  CALL_ENTRY:
  5283 00001492 58                              POP     AX                      ; IP from the long call at 5
  5284 00001493 58                              POP     AX                      ; Segment from the long call at 5
  5285                                          ;POP	WORD [USER_SP]		; IP from the CALL 5
  5286 00001494 2E8F06[1E05]                    POP	WORD [CS:USER_SP] ; 12/03/2018
  5287 00001499 9C                      	PUSHF                           ; Start re-ordering the stack
  5288 0000149A FA                              CLI
  5289 0000149B 50                              PUSH    AX                      ; Save segment
  5290                                          ;PUSH	WORD [USER_SP]		; Stack now ordered as if INT had been used
  5291 0000149C 2EFF36[1E05]                    PUSH	WORD [CS:USER_SP] ; 12/03/2018
  5292 000014A1 80F924                          CMP     CL,MAXCALL              ; This entry point doesn't get as many calls
  5293 000014A4 77E9                            JA      SHORT BADCALL
  5294 000014A6 88CC                            MOV     AH,CL
  5295                                  	; 08/07/2018
  5296 000014A8 EB2C                    	jmp	short SAVREGS 
  5297                                  
  5298                                  COMMAND:
  5299                                  	; 08/07/2018 - Retro DOS v3.0
  5300                                  
  5301                                  	;IF	NOT IBM
  5302 000014AA 80FCF8                          CMP	AH,SET_OEM_HANDLER
  5303 000014AD 7221                            JB      SHORT NOTOEM
  5304                                  	; 18/07/2018
  5305 000014AF 0F845E01                	je	_$SET_OEM_HANDLER	
  5306                                  
  5307                                  	; 20/04/2018
  5308                                          ;JMP	_$SET_OEM_HANDLER
  5309                                  
  5310                                  	; Retro DOS v2.0 - 20/04/2018
  5311 000014B3 83F8FF                  	CMP	AX,0FFFFh
  5312                                  	;JNE	_$SET_OEM_HANDLER
  5313                                  	; 18/07/2018
  5314 000014B6 0F856201                	jne	DO_OEM_FUNC
  5315                                  
  5316 000014BA 60                      	PUSHA
  5317 000014BB BE[4E0C]                	MOV     SI,RETRODOSMSG
  5318                                          ;CALL	OUTMES
  5319                                  wrdosmsg:
  5320 000014BE B40E                    	mov	ah, 0Eh
  5321 000014C0 BB0700                  	mov	bx, 7
  5322                                  wrdosmsg_nxt:
  5323 000014C3 2EAC                    	cs	lodsb
  5324 000014C5 3C24                    	cmp	al, '$'
  5325 000014C7 7404                    	je	short wrdosmsg_ok		
  5326 000014C9 CD10                    	int	10h
  5327 000014CB EBF6                    	jmp	short wrdosmsg_nxt
  5328                                  wrdosmsg_ok:
  5329 000014CD 61                      	POPA
  5330 000014CE EBBF                    	JMP	SHORT BADCALL 
  5331                                  	;
  5332                                  
  5333                                  NOTOEM:
  5334                                  	;ENDIF
  5335                                  
  5336 000014D0 FA                      	cli	; 08/07/2018
  5337                                  
  5338                                  _COMMAND: ; MSDOS 3.3 (IBM)
  5339                                  
  5340 000014D1 80FC68                          CMP     AH,MAXCOM
  5341                                  	;JBE	SHORT SAVREGS
  5342 000014D4 77B9                            JA	SHORT BADCALL ; 08/07/2018
  5343                                  
  5344                                  SAVREGS:
  5345                                  	; 10/08/2018
  5346                                  	; 08/07/2018 - Retro DOS v3.0
  5347 000014D6 80FC33                  	cmp	ah,33h
  5348 000014D9 7484                    	jz	short _$SET_CTRL_C_TRAPPING
  5349 000014DB 721C                    	jb	short SaveAllRegs
  5350 000014DD 80FC64                  	cmp	ah,64h
  5351 000014E0 7717                    	ja	short SaveAllRegs
  5352 000014E2 74A2                    	jz	short _$SET_PRINTER_FLAG
  5353 000014E4 80FC51                  	cmp	ah,51h
  5354 000014E7 0F846EFF                	jz	_$GET_CURRENT_PDB
  5355 000014EB 80FC62                  	cmp	ah,62h
  5356 000014EE 0F8467FF                	jz	_$GET_CURRENT_PDB
  5357 000014F2 80FC50                  	cmp     ah,50h
  5358 000014F5 0F845AFF                	jz	_$SET_CURRENT_PDB
  5359                                  SaveAllRegs:
  5360 000014F9 E8FC00                          CALL    save_world
  5361 000014FC 2E8C1E[7E05]                    MOV	[CS:SAVEDS],DS	; 12/03/2018
  5362 00001501 2E891E[7C05]                    MOV	[CS:SAVEBX],BX	; 12/03/2018
  5363 00001506 8CCB                            MOV     BX,CS
  5364 00001508 8EDB                            MOV     DS,BX
  5365                                  ;ASSUME  DS:DOSGROUP
  5366 0000150A FE06[CF02]                      INC     BYTE [INDOS]		; Flag that we're in the DOS
  5367                                  	
  5368                                  	; 08/07/2018 - Retro DOS v3.0        
  5369 0000150E 31C0                    	xor     ax, ax
  5370 00001510 A3[EA02]                	mov     [USER_ID],ax
  5371 00001513 A1[DE02]                	mov     ax,[CurrentPDB]
  5372 00001516 A3[E802]                	mov     [PROC_ID],ax
  5373                                  
  5374 00001519 A1[1E05]                	MOV     AX,[USER_SP]
  5375 0000151C A3[8405]                        MOV     [NSP],AX
  5376 0000151F A1[2005]                        MOV     AX,[USER_SS]
  5377 00001522 A3[8205]                        MOV     [NSS],AX
  5378 00001525 58                              POP     AX
  5379 00001526 50                              PUSH    AX
  5380 00001527 8926[1E05]                      MOV     [USER_SP],SP
  5381 0000152B 8C16[2005]                      MOV     [USER_SS],SS
  5382                                  ;
  5383                                  ; save user stack in his area for later returns (possibly from EXEC)
  5384                                  ; Here comes multitasking!!!
  5385                                  ;
  5386 0000152F 8E1E[DE02]                      MOV     DS,[CurrentPDB]
  5387 00001533 89262E00                        MOV     [PDB.USER_STACK],SP
  5388 00001537 8C163000                        MOV     [PDB.USER_STACK+2],SS
  5389                                  	; 18/07/2018
  5390 0000153B 2EC606[0D05]00          	mov	byte [CS:FSHARING], 0
  5391                                  
  5392 00001541 8CCB                            MOV     BX,CS                   ; no holes here.
  5393 00001543 8ED3                            MOV     SS,BX
  5394                                  ;ASSUME  SS:DOSGROUP
  5395                                  
  5396                                  ;entry	REDISP
  5397                                  REDISP:
  5398 00001545 BC[0607]                        MOV     SP,AUXSTACK		; Enough stack for interrupts
  5399 00001548 FB                              STI                             ; Stack OK now
  5400                                  	; 08/07/2018
  5401                                          ;PUSH	CS
  5402                                          ;POP	DS
  5403 00001549 8CCB                    	mov	bx,cs
  5404 0000154B 8EDB                    	mov	ds,bx
  5405 0000154D 30FF                            XOR     BH,BH
  5406 0000154F 883E[0303]                      MOV     [CONSWAP],BH
  5407 00001553 C606[0403]01                    MOV     BYTE [IDLEINT],1
  5408 00001558 883E[F802]                      MOV     BYTE [NoSetDir],bh ; 0	; set directories on search
  5409 0000155C 883E[F602]                      mov	byte [FAILERR],bh ; 0	
  5410 00001560 88E3                    	MOV     BL,AH
  5411 00001562 D1E3                            SHL     BX,1
  5412 00001564 FC                              CLD
  5413 00001565 08E4                            OR      AH,AH
  5414 00001567 7416                            JZ      SHORT DSKROUT		; ABORT
  5415                                  
  5416                                          ;CMP	AH,12
  5417                                          ;JBE	SHORT IOROUT		; Character I/O
  5418                                          ;CMP	AH,GET_CURRENT_PDB      ; INT 24 needs GET,SET PDB
  5419                                          ;JZ	SHORT IOROUT
  5420                                          ;CMP	AH,SET_CURRENT_PDB
  5421                                          ;JNZ	SHORT DSKROUT
  5422                                  
  5423                                  	; 10/08/2018
  5424 00001569 80FC59                  	cmp     ah,GETEXTENDEDERROR ; 59h
  5425 0000156C 743D                    	jz      short DISPCALL
  5426 0000156E 80FC0C                  	cmp     ah,STD_CON_INPUT_FLUSH ; 0Ch
  5427 00001571 770C                    	ja      short DSKROUT
  5428                                  
  5429                                  IOROUT:
  5430 00001573 803E[CE02]00                    CMP     BYTE [ERRORMODE],0
  5431 00001578 7531                            JNZ     SHORT DISPCALL		; Stay on AUXSTACK if INT 24
  5432 0000157A BC[060A]                        MOV     SP,IOSTACK
  5433 0000157D EB2C                            JMP     SHORT DISPCALL
  5434                                  
  5435                                  DSKROUT:
  5436                                  	; 08/07/2018 - Retro DOS v3.0
  5437 0000157F A3[E602]                        mov     [USER_IN_AX],ax
  5438 00001582 C606[D102]01            	mov     byte [EXTERR_LOCUS],1	; errLOC_Unk  (Default)
  5439                                  
  5440 00001587 C606[CE02]00                    MOV     BYTE [ERRORMODE],0	; Cannot make non 1-12 calls in
  5441 0000158C C606[D002]FF                    MOV     BYTE [WPERR],-1		; error mode, so good place to
  5442                                                                          ; make sure flags are reset
  5443 00001591 50                      	push    ax
  5444 00001592 B482                    	mov     ah, 82h
  5445 00001594 CD2A                    	int     2Ah 		; Microsoft Networks 
  5446                                  				; END DOS CRITICAL SECTIONS 0 THROUGH 7
  5447 00001596 58                      	pop     ax
  5448 00001597 C606[0403]00            	mov     byte [IDLEINT],0
  5449                                  
  5450 0000159C BC[8608]                        MOV     SP,DSKSTACK
  5451 0000159F F606[E502]FF                    TEST    BYTE [CNTCFLAG],-1
  5452 000015A4 7405                            JZ      SHORT DISPCALL
  5453 000015A6 50                              PUSH    AX
  5454                                          ;invoke	DSKSTATCHK
  5455 000015A7 E8AB40                          CALL	DSKSTATCHK
  5456 000015AA 58                      	POP     AX
  5457                                  DISPCALL:
  5458                                  	; 08/07/2018 -Retro DOS v3.0
  5459                                  	;;;PUSH	WORD [LEAVEADDR] ; (***)
  5460                                          ;;;PUSH	WORD [CS:BX+DISPATCH]
  5461                                          ;;;;PUSH WORD [BX+DISPATCH]
  5462                                  
  5463                                  	; 11/07/2018	
  5464                                  	;mov	bx,[CS:BX+DISPATCH]
  5465 000015AB 8B9F[060E]               	mov	bx,[bx+DISPATCH] 
  5466                                  
  5467                                  	;;;MOV	BX,[SAVEBX]
  5468 000015AF 871E[7C05]              	xchg    bx,[SAVEBX]        
  5469                                  
  5470 000015B3 8E1E[7E05]              	MOV     DS,[SAVEDS]
  5471                                  ;ASSUME	DS:NOTHING
  5472                                          ;return
  5473                                  ;;;	RETN	
  5474                                  
  5475 000015B7 36FF16[7C05]            	call	word [SS:SAVEBX]
  5476                                  
  5477                                  ;entry LEAVE
  5478                                  ;;;_LEAVE:				; Exit from a system call
  5479                                  LeaveDOS: ; 18/07/2018 
  5480                                  ;ASSUME	SS:NOTHING			; User routines may misbehave
  5481 000015BC FA                      	CLI
  5482                                          ; 12/03/2018
  5483 000015BD 2EFE0E[CF02]            	DEC     BYTE [CS:INDOS]
  5484 000015C2 2E8B26[1E05]                    MOV     SP,[CS:USER_SP]
  5485 000015C7 2E8E16[2005]                    MOV     SS,[CS:USER_SS]
  5486 000015CC 89E5                    	MOV     BP,SP
  5487                                  	;MOV	[BP.user_AX],AL	
  5488                                          ;MOV	[BP+user_env.user_AX],AL  ; user_env.user_AX = 0
  5489 000015CE 884600                          MOV     [BP],AL
  5490 000015D1 2EA1[8405]              	MOV     AX,[CS:NSP]
  5491 000015D5 2EA3[1E05]                      MOV     [CS:USER_SP],AX
  5492 000015D9 2EA1[8205]                      MOV     AX,[CS:NSS]
  5493 000015DD 2EA3[2005]                      MOV     [CS:USER_SS],AX
  5494 000015E1 E80100                  	CALL    restore_world
  5495                                  
  5496 000015E4 CF                              IRET
  5497                                  
  5498                                  ;SYSTEM_CALL ENDP
  5499                                  
  5500                                  ;
  5501                                  ; restore_world restores all registers ('cept SS:SP, CS:IP, flags) from
  5502                                  ; the stack prior to giving the user control
  5503                                  ;
  5504                                  
  5505                                  ; 11/07/2018 - Retro DOS v3.0
  5506                                          ;ASSUME  DS:NOTHING,ES:NOTHING
  5507                                  ;;restore_tmp DW  ?
  5508                                  ;restore_tmp: 
  5509                                  ;	dw	0
  5510                                          ;procedure restore_world,NEAR
  5511                                  restore_world:
  5512 000015E5 2E8F06[8005]                    POP	WORD [CS:RESTORE_TMP] ; 12/03/2018
  5513 000015EA 58                              POP     AX              ; PUSH    ES
  5514 000015EB 5B                              POP     BX              ; PUSH    DS
  5515 000015EC 59                              POP     CX              ; PUSH    BP
  5516 000015ED 5A                              POP     DX              ; PUSH    DI
  5517 000015EE 5E                              POP     SI              ; PUSH    SI
  5518 000015EF 5F                              POP     DI              ; PUSH    DX
  5519 000015F0 5D                              POP     BP              ; PUSH    CX
  5520 000015F1 1F                              POP     DS              ; PUSH    BX
  5521 000015F2 07                              POP     ES              ; PUSH    AX
  5522                                  	; 07/07/2018 - Retro DOS v3.0
  5523 000015F3 2EFF26[8005]                   	jmp	word [CS:RESTORE_TMP]
  5524                                  
  5525                                  ;restore_world	ENDP
  5526                                  
  5527                                  ;
  5528                                  ; save_world saves complete registers on the stack
  5529                                  ;
  5530                                          ;procedure save_world,NEAR
  5531                                  save_world:
  5532 000015F8 2E8F06[8005]                    POP	WORD [CS:RESTORE_TMP] ; 12/03/2018
  5533 000015FD 06                              PUSH    ES
  5534 000015FE 1E                              PUSH    DS
  5535 000015FF 55                              PUSH    BP
  5536 00001600 57                              PUSH    DI
  5537 00001601 56                              PUSH    SI
  5538 00001602 52                              PUSH    DX
  5539 00001603 51                              PUSH    CX
  5540 00001604 53                              PUSH    BX
  5541 00001605 50                              PUSH    AX
  5542                                  	; 07/07/2018 - Retro DOS v3.0
  5543 00001606 2EFF26[8005]                   	jmp	word [CS:RESTORE_TMP]
  5544                                  
  5545                                  ;save_world	ENDP
  5546                                  
  5547                                  ;
  5548                                  ; get_user_stack returns the user's stack (and hence registers) in DS:SI
  5549                                  ;
  5550                                          ;procedure get_user_stack,NEAR
  5551                                  Get_User_Stack:
  5552                                          ;LDS	SI,DWORD PTR [USER_SP]
  5553                                          ;LDS	SI,[USER_SP]
  5554 0000160B 2EC536[1E05]                    LDS	SI,[CS:USER_SP] ; 12/03/2018
  5555                                  	;return
  5556 00001610 C3                      	RETN
  5557                                  
  5558                                  ;get_user_stack  ENDP
  5559                                  
  5560                                  ; ---------------------------------------------------------------------------
  5561                                  ;
  5562                                  ; Set_OEM_Handler -- Set OEM sys call address and handle OEM Calls
  5563                                  ; Inputs:
  5564                                  ;	User registers, User Stack, INTS disabled
  5565                                  ;	If CALL F8, DS:DX is new handler address
  5566                                  ; Function:
  5567                                  ;	Process OEM INT 21 extensions
  5568                                  ; Outputs:
  5569                                  ;	Jumps to OEM_HANDLER if appropriate
  5570                                  ;
  5571                                  ; ---------------------------------------------------------------------------
  5572                                  
  5573                                  ;IF	NOT IBM
  5574                                  
  5575                                  _$SET_OEM_HANDLER:
  5576                                  	; 18/07/2018
  5577                                  
  5578                                  	;JNE	short DO_OEM_FUNC	; If above F8 try to jump to handler
  5579 00001611 2E8916[1400]            	MOV     [CS:OEM_HANDLER],DX	; Set Handler
  5580 00001616 2E8C1E[1600]            	MOV     [CS:OEM_HANDLER+2],DS
  5581 0000161B CF                      	IRET                            ; Quick return, Have altered no registers
  5582                                  
  5583                                  DO_OEM_FUNC:
  5584 0000161C 2E833E[1400]FF          	CMP     WORD [CS:OEM_HANDLER],-1
  5585 00001622 7503                    	JNZ     short OEM_JMP
  5586 00001624 E968FE                  	JMP     BADCALL                 ; Handler not initialized
  5587                                  
  5588                                  OEM_JMP:
  5589 00001627 2EFF2E[1400]            	JMP     FAR [CS:OEM_HANDLER]
  5590                                  
  5591                                  ;       ENDIF
  5592                                  
  5593                                  ;============================================================================
  5594                                  ; DOSTAB.ASM - MSDOS 6.0 - 1991
  5595                                  ;============================================================================
  5596                                  ; 11/07/2018 - Retro DOS v3.0
  5597                                  
  5598                                  ; the nul device driver used to be part of the code.  However, since the 
  5599                                  ; header is in the data, and the entry points are only given as an offset,
  5600                                  ; the strategy and interrupt entry points must also be in the data now.
  5601                                  ;
  5602                                  
  5603                                  ;procedure	snuldev,far
  5604                                  SNULDEV:
  5605                                  ;assume ds:nothing,es:nothing,ss:nothing, cs:dosdata
  5606                                  ; Offset 1599h in IBMDOS.COM (MSDOS 3.3), 1987
  5607                                  	;or	word [ES:BX+3],0100h
  5608 0000162C 26814F030001             	OR	word [ES:BX+SRHEAD.REQSTAT],STDON ; set done bit
  5609                                  ;entry inuldev
  5610                                  INULDEV:
  5611 00001632 CB                      	retf				; must not be a return!
  5612                                  ;endproc snuldev
  5613                                  
  5614                                  ;============================================================================
  5615                                  ; MSCODE.ASM - MSDOS 6.0 - 1991
  5616                                  ;============================================================================
  5617                                  ; 18/07/2018 - Retro DOS v3.0
  5618                                  
  5619                                  ;BREAK <AbsDRD, AbsDWRT -- INT int_disk_read, int_disk_write handlers>>
  5620                                  
  5621                                  
  5622                                  ;   AbsSetup - setup for abs disk functions
  5623                                  ;----------------------------------------------------------------------------
  5624                                  
  5625                                  AbsSetup:
  5626 00001633 36FE06[CF02]            	INC	byte [SS:INDOS]		; SS override
  5627 00001638 FB                      	STI
  5628 00001639 FC                      	CLD
  5629 0000163A 1E                      	PUSH	DS
  5630 0000163B 16                      	push	ss
  5631 0000163C 1F                      	pop	ds
  5632 0000163D E89100                  	CALL	GETBP
  5633 00001640 7206                    	JC	short errdriv 		; PM. error drive ;AN000;
  5634 00001642 26C7461EFFFF            	MOV	WORD [ES:BP+DPB.FREE_CNT],-1 ; do not trust user at all.
  5635                                  errdriv:
  5636 00001648 1F                      	POP	DS
  5637 00001649 7301                    	jnc	short AbsSetup2
  5638                                  AbsSetup_retn:
  5639 0000164B C3                      	retn
  5640                                  
  5641                                  AbsSetup2:
  5642                                  	; MSDOS 6.0
  5643                                  	;				; SS override
  5644                                  	;MOV	word [SS:HIGH_SECTOR],0 ;>32mb	from API		;AN000;
  5645                                  	;CALL	RW32_CONVERT		;>32mb convert 32bit format to 16bit ;AN000;
  5646 0000164C 72FD                    	jc	short AbsSetup_retn
  5647                                  	;call	SET_RQ_SC_PARMS 	;LB. set up SC parms		;AN000;
  5648                                  
  5649                                  	; MSDOS 3.3 (& MSDOS 6.0)
  5650 0000164E 1E                      	PUSH	DS
  5651 0000164F 56                      	PUSH	SI
  5652 00001650 50                      	PUSH	AX
  5653                                  
  5654 00001651 16                      	push	ss
  5655 00001652 1F                      	pop	ds
  5656                                  	
  5657 00001653 BE[6003]                	MOV	SI,OPENBUF
  5658 00001656 8804                    	MOV	[SI],AL
  5659 00001658 800441                  	ADD	BYTE [SI],"A"
  5660 0000165B C744013A00              	MOV	WORD [SI+1],003AH ; ":",0
  5661 00001660 B80003                  	MOV	AX,0300H
  5662 00001663 F8                      	CLC
  5663 00001664 CD2A                    	INT	int_IBM 		; Will set carry if shared
  5664 00001666 58                      	POP	AX
  5665 00001667 5E                      	POP	SI
  5666 00001668 1F                      	POP	DS
  5667 00001669 73E0                    	jnc	short AbsSetup_retn
  5668                                  
  5669                                  	;mov	word [ss:EXTERR],32h
  5670 0000166B 36C706[D202]3200        	MOV	word [ss:EXTERR],error_not_supported
  5671 00001672 C3                      	retn
  5672                                  
  5673                                  ;---------------------------------------------------------------------------
  5674                                  ;
  5675                                  ; Procedure Name : ABSDRD
  5676                                  ;
  5677                                  ; Interrupt 25 handler.  Performs absolute disk read.
  5678                                  ; Inputs:	AL - 0-based drive number
  5679                                  ;		DS:BX point to destination buffer
  5680                                  ;		CX number of logical sectors to read
  5681                                  ;		DX starting  logical sector number (0-based)
  5682                                  ; Outputs:	Original flags still on stack
  5683                                  ;		Carry set
  5684                                  ;		    AH error from BIOS
  5685                                  ;		    AL same as low byte of DI from INT 24
  5686                                  ;
  5687                                  ;---------------------------------------------------------------------------
  5688                                          ;procedure   ABSDRD,FAR
  5689                                  ABSDRD:
  5690                                  	; 15/07/2018
  5691                                  ;ASSUME  DS:NOTHING,ES:NOTHING,SS:NOTHING
  5692 00001673 FA                              CLI
  5693                                          ;MOV	[USER_SS],SS
  5694                                          ;MOV	[USER_SP],SP
  5695                                  	; 15/03/2018
  5696 00001674 2E8C16[2005]                    MOV	[CS:USER_SS],SS
  5697 00001679 2E8926[1E05]                    MOV	[CS:USER_SP],SP        
  5698 0000167E 0E                      	PUSH    CS
  5699 0000167F 17                              POP     SS
  5700                                  ;ASSUME  SS:DOSGROUP
  5701 00001680 BC[8608]                        MOV	SP,DSKSTACK
  5702                                  
  5703                                  	;; MSDOS 2.11
  5704                                  
  5705                                          ;;;INC	BYTE [INDOS]
  5706                                          ;;INC	BYTE [SS:INDOS]
  5707                                  	;;STI
  5708                                          ;;CLD
  5709                                          ;;PUSH	ES
  5710                                          ;;PUSH	DS
  5711                                          ;;PUSH	SS
  5712                                          ;;POP	DS
  5713                                  ;;;ASSUME DS:DOSGROUP
  5714                                          ;;;invoke GETBP
  5715                                  	;;CALL	GETBP
  5716                                          ;;POP	DS
  5717                                  ;;;ASSUME DS:NOTHING
  5718                                  
  5719                                  	; 15/07/2018 - Retro DOS v3.0
  5720                                  	; MSDOS 3.3 (& MSDOS 6.0, MSCODE.ASM, 1991)
  5721 00001683 06                              PUSH    ES
  5722 00001684 E8ACFF                  	call    AbsSetup
  5723                                  	;	
  5724 00001687 721A                            JC      SHORT ILEAVE
  5725                                          ;invoke	DSKREAD
  5726 00001689 E82F2B                  	CALL	DSKREAD
  5727                                  TLEAVE:
  5728 0000168C 7415                            JZ      SHORT ILEAVE
  5729                                  
  5730                                  	; 15/07/2018 - Retro DOS v3.0
  5731                                          ;IF	IBM
  5732                                  ; Translate the error code to ancient 1.1 codes
  5733 0000168E 06                              PUSH    ES
  5734 0000168F 0E                              PUSH    CS
  5735 00001690 07                              POP     ES
  5736 00001691 30E4                            XOR     AH,AH			; Nul error code
  5737                                  	;mov	cx,6
  5738 00001693 B90600                          MOV     CX,NUMERR		; Number of possible error conditions
  5739 00001696 BF[D50F]                        MOV     DI,ERRIN		; Point to error conditions
  5740 00001699 F2AE                            REPNE   SCASB
  5741 0000169B 7504                            JNZ     SHORT LEAVECODE		; Not found
  5742                                  	;mov	ah,[ES:DI+5]
  5743 0000169D 268A6505                        MOV     AH,[ES:DI+NUMERR-1]	; Get translation
  5744                                  LEAVECODE:
  5745 000016A1 07                              POP     ES
  5746                                          ;ENDIF
  5747                                  
  5748 000016A2 F9                              STC
  5749                                  ILEAVE:
  5750 000016A3 07                              POP     ES
  5751 000016A4 FA                              CLI
  5752                                          ;DEC	BYTE [INDOS]
  5753                                          ;15/03/2018
  5754 000016A5 36FE0E[CF02]            	DEC	BYTE [SS:INDOS]
  5755                                  	; 15/08/2018
  5756                                          ;MOV	SS,[CS:USER_SS]
  5757                                  	;MOV	SP,[CS:USER_SP]
  5758 000016AA 368B26[1E05]            	MOV     SP,[SS:USER_SP]
  5759 000016AF 368E16[2005]                    MOV     SS,[SS:USER_SS]
  5760                                  ;ASSUME  SS:NOTHING
  5761 000016B4 FB                              STI
  5762                                          ;return
  5763 000016B5 CB                      	RETF   ; ! FAR return !
  5764                                  
  5765                                  ;ABSDRD	ENDP
  5766                                  
  5767                                  ;---------------------------------------------------------------------------
  5768                                  ;
  5769                                  ; Procedure Name : ABSDWRT
  5770                                  ;
  5771                                  ; Interrupt 26 handler.  Performs absolute disk write.
  5772                                  ; Inputs:	AL - 0-based drive number
  5773                                  ;		DS:BX point to source buffer
  5774                                  ;		CX number of logical sectors to write
  5775                                  ;		DX starting  logical sector number (0-based)
  5776                                  ; Outputs:	Original flags still on stack
  5777                                  ;		Carry set
  5778                                  ;		    AH error from BIOS
  5779                                  ;		    AL same as low byte of DI from INT 24
  5780                                  ;
  5781                                  ;---------------------------------------------------------------------------
  5782                                          ;procedure   ABSDWRT,FAR
  5783                                  ABSDWRT:
  5784                                  	; 15/07/2018
  5785                                  ;ASSUME	DS:NOTHING,ES:NOTHING,SS:NOTHING
  5786                                  
  5787 000016B6 FA                              CLI
  5788                                  	; 15/08/2018
  5789                                  	; 15/03/2018
  5790 000016B7 2E8C16[2005]            	MOV	[CS:USER_SS],SS
  5791 000016BC 2E8926[1E05]                    MOV	[CS:USER_SP],SP
  5792 000016C1 0E                              PUSH    CS
  5793 000016C2 17                              POP     SS
  5794                                  ;ASSUME	SS:DOSGROUP
  5795                                          ;MOV	SP,OFFSET DOSGROUP:DSKSTACK
  5796 000016C3 BC[8608]                        MOV	SP,DSKSTACK
  5797                                  
  5798                                  	;; MSDOS 2.11
  5799                                  
  5800                                          ;;;INC	BYTE [INDOS]
  5801                                          ;;INC	BYTE [SS:INDOS]
  5802                                  	;;STI
  5803                                          ;;CLD
  5804                                          ;;PUSH	ES
  5805                                          ;;PUSH	DS
  5806                                          ;;PUSH	SS
  5807                                          ;;POP	DS
  5808                                  ;;;ASSUME DS:DOSGROUP
  5809                                          ;;;invoke GETBP
  5810                                  	;;CALL	GETBP
  5811                                          ;;POP	DS
  5812                                  ;;;ASSUME DS:NOTHING
  5813                                  
  5814                                  	; 15/07/2018 - Retro DOS v3.0
  5815                                  	; MSDOS 3.3 (& MSDOS 6.0, MSCODE.ASM, 1991)
  5816 000016C6 06                              PUSH    ES
  5817 000016C7 E869FF                  	call    AbsSetup
  5818                                  	;
  5819 000016CA 72D7                            JC      SHORT ILEAVE
  5820                                          ;invoke DSKWRITE
  5821 000016CC E8152B                          CALL	DSKWRITE
  5822 000016CF EBBB                    	JMP     SHORT TLEAVE
  5823                                  
  5824                                  ;ABSDWRT ENDP
  5825                                  
  5826                                  ;----------------------------------------------------------------------------
  5827                                  ;
  5828                                  ; Procedure Name : GETBP
  5829                                  ;
  5830                                  ; Inputs:
  5831                                  ;	AL = Logical unit number (A = 0)
  5832                                  ; Function:
  5833                                  ;	Find Drive Parameter Block
  5834                                  ; Outputs:
  5835                                  ;	ES:BP points to DPB
  5836                                  ;	[THISDPB] = ES:BP
  5837                                  ;	Carry set if unit number bad or unit is a NET device.
  5838                                  ;		Later case sets extended error error_I24_not_supported
  5839                                  ; No other registers altered
  5840                                  ;
  5841                                  ;----------------------------------------------------------------------------
  5842                                  
  5843                                  GETBP:
  5844                                  	; 11/07/2018 - Retro DOS v3.0
  5845 000016D1 50                      	PUSH	AX
  5846 000016D2 0401                    	ADD	AL, 1		; No increment; need carry flag
  5847 000016D4 7203                    	JC	SHORT SKIPGET
  5848 000016D6 E89852                  	CALL	GETTHISDRV
  5849                                  	; MSDOS 6.0
  5850                                  	;JNC	SHORT SKIPGET		;PM. good drive		;AN000;
  5851                                  	;XOR	AH,AH			;DCR. ax= error code 	;AN000;
  5852                                  	;CMP	AX,error_not_dos_disk	;DCR. is unknown media ? ;AN000;
  5853                                  	;JZ	SHORT SKIPGET 		;DCR. yes, let it go 	;AN000;
  5854                                  	;STC				;DCR.			;AN000;
  5855                                  	;MOV	[EXTERR],AX	;PM. invalid drive or Non DOS drive ;AN000;
  5856                                  	;MOV	WORD [AbsDskErr],201h
  5857                                  SKIPGET:
  5858 000016D9 58                      	POP	AX
  5859 000016DA 7213                    	JC	SHORT GETBP_RETN
  5860 000016DC C42E[3A05]              	LES	BP,[THISCDS]
  5861                                  	;TEST	WORD [ES:BP+43H],8000H
  5862 000016E0 26F746430080            	TEST	WORD [ES:BP+curdir.flags],curdir_isnet ; Clears carry
  5863 000016E6 7408                    	JZ	SHORT GETBP_CDS
  5864 000016E8 C706[D202]3200          	MOV	WORD [EXTERR],error_not_supported  ; 32
  5865 000016EE F9                      	STC
  5866                                  GETBP_RETN:
  5867 000016EF C3                      	RETN
  5868                                  
  5869                                  GETBP_CDS:
  5870                                  	;LES	BP,[ES:BP+45H]
  5871 000016F0 26C46E45                	LES	BP,[ES:BP+curdir.devptr]
  5872                                  
  5873                                  GOTDPB:
  5874                                  	; Load THISDPB from ES:BP
  5875 000016F4 892E[2405]              	MOV	[THISDPB],BP
  5876 000016F8 8C06[2605]              	MOV	[THISDPB+2],ES
  5877 000016FC C3                      	RETN
  5878                                  
  5879                                  ;BREAK <SYS_RET_OK SYS_RET_ERR CAL_LK ETAB_LK set system call returns>
  5880                                  
  5881                                  ;----------------------------------------------------------------------------
  5882                                  ;
  5883                                  ; Procedure Name : SYS_RETURN
  5884                                  ;
  5885                                  ; These are the general system call exit mechanisms. All internal system
  5886                                  ; calls will transfer (jump) to one of these at the end. Their sole purpose
  5887                                  ; is to set the user's flags and set his AX register for return.
  5888                                  ;
  5889                                  ;----------------------------------------------------------------------------
  5890                                  
  5891                                          ;procedure   SYS_RETURN,NEAR
  5892                                  SYS_RETURN:        
  5893                                          ;entry	SYS_RET_OK
  5894                                  SYS_RET_OK:   
  5895                                  	; 18/07/2018
  5896                                  	; Offset 1666h in IBMDOS.COM (MSDOS 3.3), 1987
  5897 000016FD E82508                  	call    FETCHI_CHECK ; MSDOS 3.3 ! IBMDOS feature ! 	     
  5898 00001700 E808FF                  	call    Get_User_Stack
  5899                                  		; turn off user's carry flag 
  5900                                          ;and	word [SI+16h],0FFFEh 
  5901 00001703 836416FE                        and	word [SI+user_env.user_F],~f_Carry 
  5902 00001707 EB10                            JMP     SHORT DO_RET
  5903                                  
  5904                                          ;entry   SYS_RET_ERR
  5905                                  SYS_RET_ERR:        
  5906 00001709 30E4                    	XOR     AH,AH 		; hack to allow for smaller error rets
  5907 0000170B E86900                  	call	ETAB_LK 	; Make sure code is OK, EXTERR gets set
  5908 0000170E E81A00                  	CALL	ErrorMap
  5909                                  
  5910                                  	;entry	From_GetSet
  5911                                  From_GetSet:
  5912 00001711 E8F7FE                          call    Get_User_Stack
  5913                                  		 ; signal carry to user
  5914                                  	;or	word [SI+16h],1
  5915 00001714 834C1601                	OR	word [SI+user_env.user_F],f_Carry
  5916 00001718 F9                      	STC			; also, signal internal error
  5917                                  DO_RET:
  5918                                          ;MOV	[SI+user_env.user_AX], AX ; Really only sets AH
  5919 00001719 8904                    	MOV	[SI],AX
  5920 0000171B C3                      	RETN
  5921                                  
  5922                                  	;entry	FCB_RET_OK
  5923                                  FCB_RET_OK:
  5924                                  	;entry	NO_OP		; obsolete system calls dispatch to here
  5925                                  NO_OP:
  5926 0000171C 30C0                    	XOR	AL,AL
  5927 0000171E C3                      	retn
  5928                                  
  5929                                  	;entry	FCB_RET_ERR
  5930                                  FCB_RET_ERR:
  5931 0000171F 30E4                    	XOR	AH,AH
  5932 00001721 36A3[D202]              	mov	[ss:EXTERR],AX
  5933 00001725 E80300                  	CALL	ErrorMap
  5934 00001728 B0FF                    	MOV	AL,-1
  5935 0000172A C3                      	retn
  5936                                  
  5937                                  	;entry	ErrorMap
  5938                                  ErrorMap:
  5939 0000172B 56                      	PUSH	SI
  5940                                  				; ERR_TABLE_21 is now in DOSDATA
  5941 0000172C BE[2F0D]                	MOV	SI,ERR_TABLE_21
  5942                                  				; SS override for FAILERR and EXTERR
  5943 0000172F 36803E[F602]00          	CMP	byte [SS:FAILERR],0 ; Check for SPECIAL case.
  5944 00001735 7407                    	JZ	short EXTENDED_NORMAL ; All is OK.
  5945                                  		 ; Ooops, this is the REAL reason
  5946                                  	;mov	word [SS:EXTERR],53h
  5947 00001737 36C706[D202]5300        	MOV	word [SS:EXTERR],error_FAIL_I24
  5948                                  EXTENDED_NORMAL:
  5949 0000173E E80200                  	call	CAL_LK		; Set CLASS,ACTION,LOCUS for EXTERR
  5950 00001741 5E                      	POP	SI
  5951 00001742 C3                      	retn
  5952                                  
  5953                                  	;EndProc SYS_RETURN
  5954                                  
  5955                                  ;---------------------------------------------------------------------------
  5956                                  ;
  5957                                  ; Procedure Name : CAL_LK
  5958                                  ;
  5959                                  ; Inputs:
  5960                                  ;	SI is OFFSET in DOSDATA of CLASS,ACTION,LOCUS Table to use
  5961                                  ;		(DS NEED not be DOSDATA)
  5962                                  ;	[EXTERR] is set with error
  5963                                  ; Function:
  5964                                  ;	Look up and set CLASS ACTION and LOCUS values for GetExtendedError
  5965                                  ; Outputs:
  5966                                  ;	[EXTERR_CLASS] set
  5967                                  ;	[EXTERR_ACTION] set
  5968                                  ;	[EXTERR_LOCUS] set  (EXCEPT on certain errors as determined by table)
  5969                                  ; Destroys SI, FLAGS
  5970                                  ;
  5971                                  ;---------------------------------------------------------------------------
  5972                                  
  5973                                  	;procedure CAL_LK,NEAR
  5974                                  CAL_LK:
  5975 00001743 1E                      	PUSH	DS
  5976 00001744 50                      	PUSH	AX
  5977 00001745 53                      	PUSH	BX
  5978                                  
  5979                                  ;M048	Context DS		; DS:SI -> Table
  5980                                  ;
  5981                                  ; Since this function can be called thru int 2f we shall not assume that SS
  5982                                  ; is DOSDATA
  5983                                  
  5984                                  	;getdseg	<ds>	; M048: DS:SI -> Table
  5985                                  
  5986                                  	; 18/07/2018
  5987 00001746 16                      	push	ss
  5988 00001747 1F                      	pop	ds
  5989                                  
  5990 00001748 8B1E[D202]              	MOV	BX,[EXTERR]	; Get error in BL
  5991                                  TABLK1:
  5992 0000174C AC                      	LODSB
  5993                                  
  5994 0000174D 3CFF                    	CMP	AL,0FFH
  5995 0000174F 7409                    	JZ	short GOT_VALS	; End of table
  5996 00001751 38D8                    	CMP	AL,BL
  5997 00001753 7405                    	JZ	short GOT_VALS	; Got entry
  5998 00001755 83C603                  	ADD	SI,3		; Next table entry
  5999                                  	; 15/08/2018
  6000 00001758 EBF2                    	JMP	short TABLK1
  6001                                  
  6002                                  GOT_VALS:
  6003 0000175A AD                      	LODSW			; AL is CLASS, AH is ACTION
  6004                                  
  6005 0000175B 80FCFF                  	CMP	AH,0FFH
  6006 0000175E 7404                    	JZ	short NO_SET_ACT
  6007 00001760 8826[D402]              	MOV	[EXTERR_ACTION],AH	; Set ACTION
  6008                                  NO_SET_ACT:
  6009 00001764 3CFF                    	CMP	AL,0FFH
  6010 00001766 7403                    	JZ	short NO_SET_CLS
  6011 00001768 A2[D502]                	MOV	[EXTERR_CLASS],AL	; Set CLASS
  6012                                  NO_SET_CLS:
  6013 0000176B AC                      	LODSB			; Get LOCUS
  6014                                  
  6015 0000176C 3CFF                    	CMP	AL,0FFH
  6016 0000176E 7403                    	JZ	short NO_SET_LOC
  6017 00001770 A2[D102]                	MOV	[EXTERR_LOCUS],AL
  6018                                  NO_SET_LOC:
  6019 00001773 5B                      	POP	BX
  6020 00001774 58                      	POP	AX
  6021 00001775 1F                      	POP	DS
  6022 00001776 C3                      	retn
  6023                                  
  6024                                  	;EndProc CAL_LK
  6025                                  
  6026                                  ;---------------------------------------------------------------------------
  6027                                  ;
  6028                                  ; Procedure Name : ETAB_LK
  6029                                  ;
  6030                                  ; Inputs:
  6031                                  ;	AX is error code
  6032                                  ;	[USER_IN_AX] has AH value of system call involved
  6033                                  ; Function:
  6034                                  ;	Make sure error code is appropriate to this call.
  6035                                  ; Outputs:
  6036                                  ;	AX MAY be mapped error code
  6037                                  ;	[EXTERR] = Input AX
  6038                                  ; Destroys ONLY AX and FLAGS
  6039                                  ;
  6040                                  ;---------------------------------------------------------------------------
  6041                                  
  6042                                  	;procedure ETAB_LK,NEAR
  6043                                  
  6044                                  ETAB_LK: ; 10/08/2018
  6045 00001777 1E                      	PUSH	DS
  6046 00001778 56                      	PUSH	SI
  6047 00001779 51                      	PUSH	CX
  6048 0000177A 53                      	PUSH	BX
  6049                                  
  6050                                  	;Context DS			; SS is DOSDATA
  6051                                  
  6052 0000177B 16                      	push	ss
  6053 0000177C 1F                      	pop	ds
  6054                                  
  6055 0000177D A3[D202]                	MOV	[EXTERR],AX		; Set EXTERR with "real" error
  6056                                  
  6057                                  					; I21_MAP_E_TAB is now in DOSCODE
  6058 00001780 BE[930C]                	MOV	SI,I21_MAP_E_TAB
  6059 00001783 88C7                    	MOV	BH,AL			; Real code to BH
  6060 00001785 8A1E[E702]              	MOV	BL,[USER_IN_AX+1]	; Sys call to BL
  6061                                  TABLK2:
  6062                                  ;;hkn;	LODSW
  6063                                  ;	LODS	word ptr cs:[si] ; MSDOS 6.0
  6064                                  	
  6065                                  	; 18/07/2018
  6066 00001789 AD                      	lodsw		; IBMDOS.COM (MSDOS 3.3) - Offset 16F7h
  6067                                  
  6068 0000178A 3CFF                    	CMP	AL,0FFH 		; End of table?
  6069 0000178C 740C                    	JZ	short NOT_IN_TABLE	; Yes
  6070 0000178E 38D8                    	CMP	AL,BL			; Found call?
  6071 00001790 740C                    	JZ	short GOT_CALL		; Yes
  6072 00001792 86E0                    	XCHG	AH,AL			; Count to AL
  6073 00001794 30E4                    	XOR	AH,AH			; Make word for add
  6074 00001796 01C6                    	ADD	SI,AX			; Next table entry
  6075 00001798 EBEF                    	JMP	short TABLK2
  6076                                  
  6077                                  NOT_IN_TABLE:
  6078 0000179A 88F8                    	MOV	AL,BH			; Restore original code
  6079 0000179C EB0B                    	JMP	SHORT NO_MAP
  6080                                  
  6081                                  GOT_CALL:
  6082 0000179E 88E1                    	MOV	CL,AH
  6083 000017A0 30ED                    	XOR	CH,CH			; Count of valid err codes to CX
  6084                                  CHECK_CODE:
  6085                                  ;;hkn;	LODSB
  6086                                  ;	LODS	byte ptr cs:[si]
  6087                                  
  6088                                  	; 18/07/2018
  6089 000017A2 AC                      	lodsb		; IBMDOS.COM (MSDOS 3.3) - Offset 1710h
  6090                                  
  6091 000017A3 38F8                    	CMP	AL,BH			; Code OK?
  6092 000017A5 7402                    	JZ	short NO_MAP		; Yes
  6093 000017A7 E2F9                    	LOOP	CHECK_CODE
  6094                                  NO_MAP:
  6095 000017A9 30E4                    	XOR	AH,AH			; AX is now valid code
  6096 000017AB 5B                      	POP	BX
  6097 000017AC 59                      	POP	CX
  6098 000017AD 5E                      	POP	SI
  6099 000017AE 1F                      	POP	DS
  6100 000017AF C3                      	retn
  6101                                  
  6102                                  	;EndProc ETAB_LK
  6103                                  
  6104                                  ; 18/07/2018 - Retro DOS v3.0
  6105                                  ;---------------------------------------------------------------------------
  6106                                  ; BREAK <DOS 2F Handler and default NET 2F handler>
  6107                                  
  6108                                  ;IF installed
  6109                                  ;---------------------------------------------------------------------------
  6110                                  ;
  6111                                  ; Procedure Name : SetBad
  6112                                  ;
  6113                                  ; SetBad sets up info for bad functions
  6114                                  ;
  6115                                  ;---------------------------------------------------------------------------
  6116                                  
  6117                                  SetBad:
  6118                                  	;mov	ax,1
  6119 000017B0 B80100                  	MOV	AX,error_invalid_function ; ALL NET REQUESTS get inv func
  6120                                  
  6121                                  ;	set up ds to point to DOSDATA
  6122                                  
  6123                                  	; MSDOS 6.0
  6124                                  	;push	ds
  6125                                  
  6126                                  	;getdseg <ds>
  6127                                  	;MOV	[EXTERR_LOCUS],errLOC_Unk	
  6128                                  
  6129                                  	; MSDOS 3.3
  6130                                  	;mov	byte [cs:EXTERR_LOCUS],1
  6131 000017B3 2EC606[D102]01          	MOV	byte [CS:EXTERR_LOCUS],errLOC_Unk
  6132                                  
  6133                                  	;pop	ds	  		;hkn; restore ds
  6134                                  
  6135 000017B9 F9                      	STC
  6136 000017BA C3                      	retn
  6137                                  
  6138                                  ;--------------------------------------------------------------------------
  6139                                  ;
  6140                                  ; Procedure Name : BadCall
  6141                                  ;
  6142                                  ; BadCall is the initial routine for bad function calls
  6143                                  ;
  6144                                  ;--------------------------------------------------------------------------
  6145                                  
  6146                                  BadCall:
  6147 000017BB E8F2FF                  	call	SetBad
  6148 000017BE CB                      	retf
  6149                                  
  6150                                  ;--------------------------------------------------------------------------
  6151                                  ;
  6152                                  ; OKCall always sets carry to off.
  6153                                  ;
  6154                                  ;-----------------------------------------------------------------------
  6155                                  
  6156                                  OKCall:
  6157 000017BF F8                      	CLC
  6158 000017C0 CB                      	retf
  6159                                  
  6160                                  ;---------------------------------------------------------------------------
  6161                                  ;
  6162                                  ; Procedure Name : INT2F
  6163                                  ;
  6164                                  ; INT 2F handler works as follows:
  6165                                  ;   PUSH    AX
  6166                                  ;   MOV     AX,multiplex:function
  6167                                  ;   INT     2F
  6168                                  ;   POP     ...
  6169                                  ; The handler itself needs to make the AX available for the various routines.
  6170                                  ;
  6171                                  ;----------------------------------------------------------------------------
  6172                                  
  6173                                  ;PUBLIC	Int2F
  6174                                  ;INT2F	PROC	FAR
  6175                                  
  6176                                  	; 18/07/2018 - Retro DOS v3.0
  6177                                  
  6178                                  INT2F:
  6179                                  	; Offset 172Fh in IBMDOS.COM (MSDOS 3.3), 1987
  6180                                  INT2FNT:
  6181                                  	;ASSUME	CS:DOSCODE,DS:NOTHING,ES:NOTHING,SS:NOTHING
  6182 000017C1 FB                      	STI
  6183                                  	;cmp	ah,11h
  6184 000017C2 80FC11                  	CMP	AH,MultNET
  6185 000017C5 750A                    	JNZ	short INT2FSHR
  6186                                  TestInstall:
  6187 000017C7 08C0                    	OR	AL,AL
  6188 000017C9 7403                    	JZ	short Leave2F
  6189                                  BadFunc:
  6190 000017CB E8E2FF                  	CALL	SetBad
  6191                                  
  6192                                  	;entry	Leave2F
  6193                                  Leave2F:
  6194 000017CE CA0200                  	RETF	2			; long return + clear flags off stack
  6195                                  
  6196                                  INT2FSHR:
  6197                                  	;cmp	ah,10h
  6198 000017D1 80FC10                  	CMP	AH,MultSHARE		; is this a share request
  6199 000017D4 74F1                    	JZ	short TestInstall	; yes, check for installation
  6200                                  INT2FNLS:
  6201                                  	;cmp	ah,14h
  6202 000017D6 80FC14                  	CMP	AH,NLSFUNC		; is this a DOS 3.3 NLSFUNC request
  6203 000017D9 74EC                    	JZ	short TestInstall	; yes check for installation
  6204                                  INT2FDOS:
  6205                                  	;ASSUME	CS:DOSCODE,DS:NOTHING,ES:NOTHING,SS:NOTHING
  6206                                  
  6207                                  	; 18/07/2018
  6208                                  	; MSDOS 6.0
  6209                                  	;CMP	AH,MultDOS
  6210                                  	;JNZ	check_win		;check if win386 broadcast
  6211                                  	;jmp	DispatchDOS
  6212                                  
  6213                                  	; .... win386 .... 
  6214                                  	
  6215                                  	; 18/07/2018
  6216                                  	; MSDOS 3.3
  6217                                  	;cmp	ah,12h	
  6218 000017DB 80FC12                  	CMP	AH,MultDOS
  6219 000017DE 7401                    	jz	short DispatchDOS
  6220 000017E0 CF                      	iret
  6221                                  
  6222                                  ;INT2F	ENDP
  6223                                  	
  6224                                  DispatchDOS:
  6225 000017E1 2EFF36[D80E]            	PUSH	word [CS:FOO]		; push return address
  6226 000017E6 2EFF36[DA0E]            	PUSH	word [CS:DTab]		; push table address
  6227 000017EB 50                      	PUSH	AX			; push index
  6228 000017EC 55                      	PUSH	BP
  6229 000017ED 89E5                    	MOV	BP,SP
  6230                                  		; stack looks like:
  6231                                  		;   0	BP
  6232                                  		;   2	DISPATCH
  6233                                  		;   4	TABLE
  6234                                  		;   6	RETURN
  6235                                  		;   8	LONG-RETURN
  6236                                  		;   c	FLAGS
  6237                                  		;   e	AX
  6238                                  	
  6239 000017EF 8B460E                  	MOV	AX,[BP+0Eh]		; get AX value
  6240 000017F2 5D                      	POP	BP
  6241 000017F3 E8AD07                  	call	TableDispatch
  6242 000017F6 EBD3                    	JMP	short BadFunc 		; return indicates invalid function
  6243                                  
  6244                                  INT2F_etcetera:
  6245                                  	;entry	DosGetGroup
  6246                                  DosGetGroup:
  6247                                  	; MSDOS 6.0
  6248                                  ;SR; Cannot use CS now
  6249                                  ;
  6250                                  ;	PUSH	CS
  6251                                  ;	POP	DS
  6252                                  
  6253                                  	;getdseg <ds>
  6254                                  	;retn
  6255                                  
  6256                                  	; MSDOS 3.3
  6257 000017F8 0E                      	push	cs
  6258 000017F9 1F                      	pop	ds
  6259 000017FA C3                      	retn
  6260                                  
  6261                                  	;entry	DOSInstall
  6262                                  DOSInstall:
  6263 000017FB B0FF                    	MOV	AL,0FFh
  6264 000017FD C3                      	retn
  6265                                  
  6266                                  ;ENDIF
  6267                                  
  6268                                  ;============================================================================
  6269                                  ; DOSTAB.ASM (MSDOS 6.0, 1991)
  6270                                  ;============================================================================
  6271                                  ; 18/07/2018 - Retro DOS 3.0
  6272                                  
  6273                                  ;CASE MAPPER ROUTINE FOR 80H-FFH character range, DOS 3.3
  6274                                  ;     ENTRY: AL = Character to map
  6275                                  ;     EXIT:  AL = The converted character
  6276                                  ; Alters no registers except AL and flags.
  6277                                  ; The routine should do nothing to chars below 80H.
  6278                                  ;
  6279                                  ; Example:
  6280                                  
  6281                                  ;Procedure   MAP_CASE,FAR
  6282                                  
  6283                                  MAP_CASE:
  6284                                  	; Offset 176Ch in IBMDOS.COM (MSDOS 3.3), 1987
  6285                                  	
  6286 000017FE 3C80                    	CMP	AL,80H
  6287 00001800 7301                    	JAE	short Map1	;Map no chars below 80H ever
  6288 00001802 CB                      	RETF
  6289                                  Map1:
  6290 00001803 2C80                    	SUB	AL,80H		;Turn into index value
  6291 00001805 1E                      	PUSH	DS
  6292 00001806 53                      	PUSH	BX
  6293 00001807 BB[8810]                	MOV	BX,UCASE_TAB+2
  6294                                  FINISH:
  6295 0000180A 0E                      	PUSH	CS		;Move to DS
  6296 0000180B 1F                      	POP	DS
  6297 0000180C D7                      	XLAT			; Get upper case character
  6298 0000180D 5B                      	POP	BX
  6299 0000180E 1F                      	POP	DS
  6300                                  L_RET:	
  6301 0000180F CB                      	RETF
  6302                                  
  6303                                  ;EndProc MAP_CASE
  6304                                  
  6305                                  ;============================================================================
  6306                                  ; DOSMES.INC (MSDOS 6.0, 1991)
  6307                                  ;============================================================================
  6308                                  ; 18/07/2018 - Retro DOS v3.0
  6309                                  
  6310                                  ; DOSMES.ASM (MSDOS 2.11, 1983)
  6311                                  
  6312                                  ; OEMFunction key is expected to process a single function
  6313                                  ;   key input from a device and dispatch to the proper
  6314                                  ;   routines leaving all registers UNTOUCHED.
  6315                                  ;
  6316                                  ; Inputs:   CS, SS are DOSGROUP
  6317                                  ; Outputs:  None. This function is expected to JMP to onw of
  6318                                  ;           the following labels:
  6319                                  ;
  6320                                  ;           GetCh       - ignore the sequence
  6321                                  ;           TwoEsc      - insert an ESCChar in the buffer
  6322                                  ;           ExitIns     - toggle insert mode
  6323                                  ;           EnterIns    - toggle insert mode
  6324                                  ;           BackSp      - move backwards one space
  6325                                  ;           ReEdit      - reedit the line with a new template
  6326                                  ;           KilNew      - discard the current line and start from scratch
  6327                                  ;           CopyLin     - copy the rest of the template into the line
  6328                                  ;           SkipStr     - read the next character and skip to it in the template
  6329                                  ;           CopyStr     - read next char and copy from template to line until char
  6330                                  ;           SkipOne     - advance position in template one character
  6331                                  ;           CopyOne     - copy next character in template into line
  6332                                  ;           CtrlZ       - place a ^Z into the template
  6333                                  ; Registers that are allowed to be modified by this function are:
  6334                                  ;           AX, CX, BP
  6335                                  
  6336                                  OEMFunctionKey:
  6337 00001810 E87908                  	CALL	_$STD_CON_INPUT_NO_ECHO  ; Get the second byte of the sequence
  6338 00001813 B10E                    	MOV     CL,ESCTABLEN ; 14	; length of table for scan
  6339 00001815 57                      	PUSH    DI                      ; save DI (cannot change it!)
  6340 00001816 BF[D312]                	MOV     DI,ESCTAB		; offset of second byte table
  6341 00001819 F2AE                    	REPNE   SCASB                   ; Look it up in the table
  6342 0000181B 5F                      	POP     DI                      ; restore DI
  6343 0000181C D1E1                    	SHL     CX,1                    ; convert byte offset to word
  6344 0000181E 89CD                    	MOV     BP,CX                   ; move to indexable register
  6345                                  	;JMP	word [SS:BP+ESCFUNC]	; Go to the right routine
  6346 00001820 FFA6[E112]              	JMP	word [BP+ESCFUNC]
  6347                                  	
  6348                                  ;============================================================================
  6349                                  ; TIME.ASM (MSDOS 6.0, 1991)
  6350                                  ;============================================================================
  6351                                  ; Retro DOS v3.0 - 18/07/2018
  6352                                  
  6353                                  ; SYSCALL.ASM (MSDOS 2.11, 1983)
  6354                                  ;----------------------------------------------------------------------------
  6355                                  ; Retro DOS v2.0 - 13/03/2018
  6356                                  
  6357                                  ;**	TIME.ASM - System Calls and low level routines for DATE and TIME
  6358                                  
  6359                                  	;BREAK <DATE AND TIME - SYSTEM CALLS 42,43,44,45>
  6360                                  
  6361                                  ;**	$GET_DATE - Get Current Date
  6362                                  ;
  6363                                  ;	ENTRY	none
  6364                                  ;	EXIT	(cx:dx) = current date
  6365                                  ;	USES	all
  6366                                  
  6367                                  _$GET_DATE:	;System call 42
  6368                                  
  6369 00001824 16                              PUSH    SS
  6370 00001825 1F                              POP     DS
  6371 00001826 E8B700                          CALL	READTIME        ;Check for rollover to next day
  6372 00001829 A1[FE02]                        MOV     AX,[YEAR]
  6373                                  
  6374                                  ;	WARNING!!!! DAY and MONTH must be adjacently allocated!
  6375                                  
  6376 0000182C 8B1E[FC02]                      MOV     BX,[DAY]	; fetch both day and month
  6377 00001830 E8D8FD                  	CALL	Get_User_Stack	;Get pointer to user registers
  6378                                          ;MOV    [SI+6],BX  	;DH=month, DL=day
  6379 00001833 895C06                  	MOV	[SI+user_env.user_DX],BX
  6380 00001836 05BC07                          ADD     AX,1980         ;Put bias back
  6381                                          ;MOV    [SI+4],AX  	;CX=year
  6382 00001839 894404                  	MOV	[SI+user_env.user_CX],AX
  6383                                          ;MOV	AL,[WEEKDAY]
  6384 0000183C 36A0[0203]                      MOV	AL,[SS:WEEKDAY]	;hkn; SS override
  6385 00001840 C3                      	RETN
  6386                                  
  6387                                  ;**	$SET_DATE - Set Current Date
  6388                                  ;
  6389                                  ;	ENTRY	(cx:dx) = current date
  6390                                  ;	EXIT	(al) = -1 iff bad date
  6391                                  ;		(al) = 0 if ok
  6392                                  ;	USES	all
  6393                                  
  6394                                  _$SET_DATE:			;System call 43
  6395                                  
  6396 00001841 B0FF                            MOV     AL,-1           ;Be ready to flag error
  6397 00001843 81E9BC07                        SUB     CX,1980         ;Fix bias in year
  6398 00001847 7217                            JC      SHORT RET24	;Error if not big enough
  6399 00001849 83F977                          CMP     CX,119          ;Year must be less than 2100
  6400 0000184C 7712                            JA      SHORT RET24
  6401 0000184E 08F6                            OR      DH,DH
  6402 00001850 740E                            JZ      SHORT RET24
  6403 00001852 08D2                            OR      DL,DL
  6404 00001854 740A                            JZ      SHORT RET24	;Error if either month or day is 0
  6405 00001856 80FE0C                          CMP     DH,12           ;Check against max. month
  6406 00001859 7705                            JA      SHORT RET24
  6407 0000185B 16                              PUSH    SS
  6408 0000185C 1F                              POP     DS
  6409 0000185D E81301                  	CALL	DODATE
  6410                                  RET24:  
  6411 00001860 C3                      	RETN
  6412                                  
  6413                                  
  6414                                  ;**	$GET_TIME - Get Current Time
  6415                                  ;
  6416                                  ;	ENTRY	none
  6417                                  ;	EXIT	(cx:dx) = current time
  6418                                  ;	USES	all
  6419                                  
  6420                                  _$GET_TIME:			;System call 44
  6421                                  
  6422 00001861 16                              PUSH    SS
  6423 00001862 1F                              POP     DS
  6424 00001863 E87A00                  	CALL	READTIME
  6425 00001866 E8A2FD                  	CALL	Get_User_Stack           ;Get pointer to user registers
  6426                                         ;MOV     [SI+6],DX
  6427 00001869 895406                  	MOV	[SI+user_env.user_DX],DX
  6428                                         ;MOV     [SI+4],CX
  6429 0000186C 894C04                  	MOV	[SI+user_env.user_CX],CX
  6430 0000186F 30C0                            XOR     AL,AL
  6431                                  RET26:  
  6432 00001871 C3                      	RETN
  6433                                  
  6434                                  ;**	$SET_TIME - Set Current Time
  6435                                  ;
  6436                                  ;	ENTRY	(cx:dx) = time
  6437                                  ;	EXIT	(al) = 0 if 0k
  6438                                  ;		(al) = -1 if invalid
  6439                                  ;	USES	ALL
  6440                                  
  6441                                  _$SET_TIME:			;System call 45
  6442                                  
  6443 00001872 B0FF                            MOV     AL,-1           ;Flag in case of error
  6444 00001874 80FD18                          CMP     CH,24           ;Check hours
  6445 00001877 73F8                            JAE     SHORT RET26
  6446 00001879 80F93C                          CMP     CL,60           ;Check minutes
  6447 0000187C 73F3                            JAE     SHORT RET26
  6448 0000187E 80FE3C                          CMP     DH,60           ;Check seconds
  6449 00001881 73EE                            JAE     SHORT RET26
  6450 00001883 80FA64                          CMP     DL,100          ;Check 1/100's
  6451 00001886 73E9                            JAE     SHORT RET26
  6452 00001888 51                              PUSH    CX
  6453 00001889 52                              PUSH    DX
  6454 0000188A 16                              PUSH    SS
  6455 0000188B 1F                              POP     DS
  6456 0000188C BB[5803]                        MOV     BX,TIMEBUF
  6457 0000188F B90600                          MOV     CX,6
  6458 00001892 31D2                            XOR     DX,DX
  6459 00001894 89D0                            MOV     AX,DX
  6460 00001896 53                              PUSH    BX
  6461 00001897 E88436                  	CALL	SETREAD
  6462 0000189A 1E                              PUSH    DS
  6463 0000189B C536[2E00]                      LDS     SI,[BCLOCK]
  6464 0000189F E85836                  	CALL	DEVIOCALL2      ;Get correct day count
  6465 000018A2 1F                              POP     DS
  6466 000018A3 5B                              POP     BX
  6467 000018A4 E8AA36                  	CALL	SETWRITE
  6468 000018A7 8F06[5C03]                      POP     WORD [TIMEBUF+4]
  6469 000018AB 8F06[5A03]                      POP     WORD [TIMEBUF+2]
  6470 000018AF C536[2E00]                      LDS     SI,[BCLOCK]
  6471 000018B3 E84436                  	CALL	DEVIOCALL2      ;Set the time
  6472 000018B6 30C0                            XOR     AL,AL
  6473 000018B8 C3                              RETN
  6474                                  
  6475                                  ; 11/07/2018 - Retro DOS v3.0
  6476                                  ; Retro DOS v2.0 - 14/03/2018
  6477                                  
  6478                                  FOURYEARS EQU 3*365 + 366  ; = 1461 
  6479                                  
  6480                                  ;SUBTTL DATE16, READTIME, DODATE -- GUTS OF TIME AND DATE
  6481                                  
  6482                                  ;
  6483                                  ; Date16 returns the current date in AX, current time in DX
  6484                                  ;   AX - YYYYYYYMMMMDDDDD  years months days
  6485                                  ;   DX - HHHHHMMMMMMSSSSS  hours minutes seconds/2
  6486                                  ;
  6487                                  
  6488                                  DATE16:
  6489                                  	
  6490                                  ;M048	Context DS
  6491                                  ;
  6492                                  ; Since this function can be called thru int 2f we shall not assume that SS
  6493                                  ; is DOSDATA
  6494                                  
  6495                                  	;getdseg	<ds>			; M048
  6496                                  
  6497                                  	;PUSH	SS
  6498 000018B9 0E                      	PUSH	CS
  6499 000018BA 1F                      	POP	DS
  6500                                  
  6501 000018BB 51                              PUSH    CX
  6502 000018BC 06                              PUSH    ES
  6503 000018BD E82000                          CALL    READTIME
  6504 000018C0 07                              POP     ES
  6505 000018C1 D0E1                            SHL     CL,1            ;Minutes to left part of byte
  6506 000018C3 D0E1                            SHL     CL,1
  6507 000018C5 D1E1                            SHL     CX,1            ;Push hours and minutes to left end
  6508 000018C7 D1E1                            SHL     CX,1
  6509 000018C9 D1E1                            SHL     CX,1
  6510 000018CB D0EE                            SHR     DH,1            ;Count every two seconds
  6511 000018CD 08F1                            OR      CL,DH           ;Combine seconds with hours and minutes
  6512 000018CF 89CA                            MOV     DX,CX
  6513                                  
  6514                                  ;	WARNING!  MONTH and YEAR must be adjacently allocated
  6515                                  
  6516 000018D1 A1[FD02]                        MOV     AX,[MONTH]	;Fetch month and year
  6517 000018D4 B104                            MOV     CL,4
  6518 000018D6 D2E0                            SHL     AL,CL		;Push month to left to make room for day
  6519 000018D8 D1E0                            SHL     AX,1
  6520 000018DA 59                              POP     CX
  6521 000018DB 0A06[FC02]                      OR      AL,[DAY]
  6522                                  RET21:
  6523 000018DF C3                              RETN
  6524                                  
  6525                                  READTIME:
  6526                                  ;Gets time in CX:DX. Figures new date if it has changed.
  6527                                  ;Uses AX, CX, DX.
  6528                                  
  6529 000018E0 C706[8D0F]0000          	MOV	word [DATE_FLAG],0 ; reset date flag for CPMIO
  6530 000018E6 56                              PUSH    SI
  6531 000018E7 53                              PUSH    BX
  6532                                  
  6533 000018E8 BB[5803]                        MOV     BX,TIMEBUF
  6534                                  
  6535 000018EB B90600                          MOV     CX,6
  6536 000018EE 31D2                            XOR     DX,DX
  6537 000018F0 89D0                            MOV     AX,DX
  6538 000018F2 E82936                  	CALL	SETREAD
  6539 000018F5 1E                              PUSH    DS
  6540 000018F6 C536[2E00]                      LDS     SI,[BCLOCK]
  6541 000018FA E8FD35                  	CALL	DEVIOCALL2      ;Get correct date and time
  6542 000018FD 1F                              POP     DS
  6543 000018FE 5B                              POP     BX
  6544 000018FF 5E                              POP     SI
  6545 00001900 A1[5803]                        MOV     AX,[TIMEBUF]
  6546 00001903 8B0E[5A03]                      MOV     CX,[TIMEBUF+2]
  6547 00001907 8B16[5C03]                      MOV     DX,[TIMEBUF+4]
  6548 0000190B 3B06[0003]                      CMP     AX,[DAYCNT]     ;See if day count is the same
  6549                                          ;JZ	SHORT RET22
  6550 0000190F 74CE                    	JZ	SHORT RET21 ; 18/07/2018
  6551                                  	;cmp	ax,43830
  6552 00001911 3D36AB                          CMP     AX,FOURYEARS*30 ;Number of days in 120 years
  6553 00001914 733D                            JAE     SHORT RET22	;Ignore if too large
  6554 00001916 A3[0003]                        MOV     [DAYCNT],AX
  6555 00001919 56                              PUSH    SI
  6556 0000191A 51                              PUSH    CX
  6557 0000191B 52                              PUSH    DX              ;Save time
  6558 0000191C 31D2                            XOR     DX,DX
  6559                                  	;mov	cx,1461
  6560 0000191E B9B505                          MOV     CX,FOURYEARS    ;Number of days in 4 years
  6561 00001921 F7F1                            DIV     CX              ;Compute number of 4-year units
  6562 00001923 D1E0                            SHL     AX,1
  6563 00001925 D1E0                            SHL     AX,1
  6564 00001927 D1E0                            SHL     AX,1            ;Multiply by 8 (no. of half-years)
  6565 00001929 89C1                            MOV     CX,AX           ;<240 implies AH=0
  6566                                  
  6567 0000192B BE[7F0C]                        MOV     SI,YRTAB        ;Table of days in each year
  6568                                  
  6569 0000192E E82300                          CALL    DSLIDE          ;Find out which of four years we're in
  6570 00001931 D1E9                            SHR     CX,1            ;Convert half-years to whole years
  6571 00001933 7304                            JNC     SHORT SK	;Extra half-year?
  6572 00001935 81C2C800                        ADD     DX,200
  6573                                  SK:
  6574 00001939 E82400                          CALL    SETYEAR
  6575 0000193C B101                            MOV     CL,1            ;At least at first month in year
  6576                                  
  6577 0000193E BE[870C]                        MOV     SI,MONTAB       ;Table of days in each month
  6578                                          
  6579 00001941 E81000                  	CALL    DSLIDE          ;Find out which month we're in
  6580 00001944 880E[FD02]                      MOV     [MONTH],CL
  6581 00001948 42                              INC     DX              ;Remainder is day of month (start with one)
  6582 00001949 8816[FC02]                      MOV     [DAY],DL
  6583 0000194D E89400                          CALL    WKDAY           ;Set day of week
  6584 00001950 5A                              POP     DX
  6585 00001951 59                              POP     CX
  6586 00001952 5E                              POP     SI
  6587                                  RET22:  
  6588 00001953 C3                      	RETN
  6589                                  
  6590                                  DSLIDE:
  6591 00001954 B400                            MOV     AH,0
  6592                                  DSLIDE1:
  6593 00001956 AC                              LODSB			;Get count of days
  6594 00001957 39C2                            CMP     DX,AX           ;See if it will fit
  6595 00001959 7217                            JB      SHORT RET23	;If not, done
  6596 0000195B 29C2                            SUB     DX,AX
  6597 0000195D 41                              INC     CX              ;Count one more month/year
  6598 0000195E EBF6                            JMP     SHORT DSLIDE1
  6599                                  
  6600                                  SETYEAR:
  6601                                  ;Set year with value in CX. Adjust length of February for this year.
  6602                                  
  6603                                  ; NOTE: This can also be called thru int 2f. If this is called then it will
  6604                                  ;       set DS to DOSDATA. Since the only guy calling this should be the DOS
  6605                                  ;	redir, DS will be DOSDATA anyway. It is going to be in-efficient to
  6606                                  ;	preserve DS as CHKYR is also called as a routine.
  6607                                  
  6608                                  
  6609                                  	; MSDOS 6.0 (18/07/2018) ; *
  6610                                  
  6611                                  	;GETDSEG DS
  6612                                  
  6613 00001960 0E                      	PUSH	CS  ; *
  6614 00001961 1F                      	POP	DS  ; *
  6615                                  
  6616                                  	; Offset 18CEh in IBMDOS.COM (MSDOS 3.3), 1987 
  6617                                  
  6618 00001962 880E[FE02]                      MOV     [YEAR],CL
  6619                                  CHKYR:
  6620 00001966 F6C103                          TEST    CL,3            ;Check for leap year
  6621 00001969 B01C                            MOV     AL,28
  6622 0000196B 7502                            JNZ     SHORT SAVFEB	;28 days if no leap year
  6623 0000196D FEC0                            INC     AL              ;Add leap day
  6624                                  SAVFEB:
  6625                                  	;mov	[february],al
  6626 0000196F A2[880C]                        MOV     [MONTAB+1],AL   ;Store for February
  6627                                  RET23:  
  6628 00001972 C3                      	RETN
  6629                                  
  6630                                  DODATE:
  6631 00001973 E8F0FF                          CALL    CHKYR           ;Set Feb. up for new year
  6632 00001976 88F0                            MOV     AL,DH
  6633                                  
  6634 00001978 BB[860C]                        MOV     BX,MONTAB-1
  6635                                  
  6636 0000197B D7                              XLAT                    ;Look up days in month
  6637 0000197C 38D0                            CMP     AL,DL
  6638 0000197E B0FF                            MOV     AL,-1           ;Restore error flag, just in case
  6639                                          ;JB	SHORT RET25	;Error if too many days
  6640 00001980 72F0                            jb	short RET23 ; 18/07/2018
  6641 00001982 E8DBFF                  	CALL    SETYEAR
  6642                                  ;
  6643                                  ; WARNING!  DAY and MONTH must be adjacently allocated
  6644                                  ;
  6645 00001985 8916[FC02]                      MOV     [DAY],DX	;Set both day and month
  6646 00001989 D1E9                            SHR     CX,1
  6647 0000198B D1E9                            SHR     CX,1
  6648                                  	;mov	ax,1461
  6649 0000198D B8B505                          MOV     AX,FOURYEARS
  6650 00001990 89D3                            MOV     BX,DX
  6651 00001992 F7E1                            MUL     CX
  6652 00001994 8A0E[FE02]                      MOV     CL,[YEAR]
  6653 00001998 80E103                          AND     CL,3
  6654                                  
  6655 0000199B BE[7F0C]                        MOV     SI,YRTAB
  6656                                  
  6657 0000199E 89C2                            MOV     DX,AX
  6658 000019A0 D1E1                            SHL     CX,1            ;Two entries per year, so double count
  6659 000019A2 E85200                          CALL    DSUM            ;Add up the days in each year
  6660 000019A5 88F9                            MOV     CL,BH           ;Month of year
  6661                                  
  6662 000019A7 BE[870C]                        MOV     SI,MONTAB
  6663                                  
  6664 000019AA 49                              DEC     CX              ;Account for months starting with one
  6665 000019AB E84900                          CALL    DSUM            ;Add up days in each month
  6666 000019AE 88D9                            MOV     CL,BL           ;Day of month
  6667 000019B0 49                              DEC     CX              ;Account for days starting with one
  6668 000019B1 01CA                            ADD     DX,CX           ;Add in to day total
  6669 000019B3 92                              XCHG    AX,DX           ;Get day count in AX
  6670 000019B4 A3[0003]                        MOV     [DAYCNT],AX
  6671 000019B7 56                              PUSH    SI
  6672 000019B8 53                              PUSH    BX
  6673 000019B9 50                              PUSH    AX
  6674                                  
  6675 000019BA BB[5803]                        MOV     BX,TIMEBUF
  6676                                  
  6677 000019BD B90600                          MOV     CX,6
  6678 000019C0 31D2                            XOR     DX,DX
  6679 000019C2 89D0                            MOV     AX,DX
  6680 000019C4 53                              PUSH    BX
  6681 000019C5 E85635                  	CALL	SETREAD
  6682                                  
  6683 000019C8 1E                              PUSH    DS
  6684 000019C9 C536[2E00]                      LDS     SI,[BCLOCK]
  6685 000019CD E82A35                  	CALL	DEVIOCALL2	;Get correct date and time
  6686 000019D0 1F                              POP     DS
  6687 000019D1 5B                              POP     BX
  6688 000019D2 E87C35                  	CALL	SETWRITE
  6689 000019D5 8F06[5803]                      POP     WORD [TIMEBUF]
  6690 000019D9 1E                              PUSH    DS
  6691 000019DA C536[2E00]                      LDS     SI,[BCLOCK]
  6692 000019DE E81935                  	CALL	DEVIOCALL2      ;Set the date
  6693 000019E1 1F                              POP     DS
  6694 000019E2 5B                              POP     BX
  6695 000019E3 5E                              POP     SI
  6696                                  WKDAY:
  6697 000019E4 A1[0003]                        MOV     AX,[DAYCNT]
  6698 000019E7 31D2                            XOR     DX,DX
  6699 000019E9 B90700                          MOV     CX,7
  6700 000019EC 40                              INC     AX
  6701 000019ED 40                              INC     AX              ;First day was Tuesday
  6702 000019EE F7F1                            DIV     CX              ;Compute day of week
  6703 000019F0 8816[0203]                      MOV     [WEEKDAY],DL
  6704 000019F4 30C0                            XOR     AL,AL           ;Flag OK
  6705                                  RET25:
  6706 000019F6 C3                      	RETN
  6707                                  
  6708                                  ;**	DSUM - Compute the sum of a string of bytes
  6709                                  ;
  6710                                  ;	ENTRY	(cx) = byte count
  6711                                  ;		(ds:si) = byte address
  6712                                  ;		(dx) = sum register, initialized by caller
  6713                                  ;	EXIT	(dx) updated
  6714                                  ;	USES	ax, cx, dx, si, flags
  6715                                  
  6716                                  DSUM:
  6717 000019F7 B400                            MOV     AH,0
  6718                                  	;JCXZ	DSUM9
  6719 000019F9 E3FB                            JCXZ	RET25 ; 18/07/2018
  6720                                  DSUM1:
  6721 000019FB AC                              LODSB
  6722 000019FC 01C2                            ADD     DX,AX
  6723 000019FE E2FB                            LOOP    DSUM1
  6724                                  DSUM9:
  6725 00001A00 C3                              RETN
  6726                                  
  6727                                  
  6728                                  ;============================================================================
  6729                                  ; GETSET.ASM
  6730                                  ;============================================================================
  6731                                  ; 18/07/2018 - Retro DOS v3.0 (GETSET.ASM, MSDOS 6.0, 1991)
  6732                                  ; Retro DOS v2.0 - 12/03/2018
  6733                                  
  6734                                  ;TITLE	GETSET - GETting and SETting MS-DOS system calls
  6735                                  ;NAME	GETSET
  6736                                  
  6737                                  ;CODE	SEGMENT BYTE PUBLIC  'CODE'
  6738                                  ;       ASSUME  SS:DOSGROUP,CS:DOSGROUP
  6739                                  
  6740                                  ;USERNUM:
  6741                                  ;	DW	0			; 24 bit user number
  6742                                  ;       DB      0
  6743                                  ;;	IF      IBM
  6744                                  ;;OEMNUM: DB    0			; 8 bit OEM number
  6745                                  ;;	ELSE
  6746                                  ;OEMNUM: DB     0FFH			; 8 bit OEM number
  6747                                  ;;	ENDIF
  6748                                  
  6749                                  ;MSVERS:		; MS-DOS version in hex for $GET_VERSION
  6750                                  ;; 08/07/2018 - Retro DOS v3.0
  6751                                  ;MSMAJOR: DB	MAJOR_VERSION	; DOS_MAJOR_VERSION
  6752                                  ;MSMINOR: DB	MINOR_VERSION	; DOS_MINOR_VERSION  
  6753                                  
  6754                                  
  6755                                  ;BREAK <$Get_Version -- Return MSDOS version number>
  6756                                  
  6757                                  _$GET_VERSION:
  6758                                  
  6759                                  ; Inputs:
  6760                                  ;       None
  6761                                  ; Function:
  6762                                  ;       Return MS-DOS version number
  6763                                  ; Outputs:
  6764                                  ;       OEM number in BH
  6765                                  ;       User number in BL:CX (24 bits)
  6766                                  ;       Version number as AL.AH in binary
  6767                                  ;       NOTE: On pre 1.28 DOSs AL will be zero
  6768                                  
  6769                                  ; MSDOS 6.0
  6770                                  ;		if input al = 00
  6771                                  ;		  (bh) = OEM number			
  6772                                  ;		else if input al = 01
  6773                                  ;		  (bh) = version flags
  6774                                  ;		 
  6775                                  ;		       	 bits 0-2 = DOS internal revision
  6776                                  ;		       	 bits 3-7 = DOS type flags
  6777                                  ;		              bit 3    = DOS is in ROM
  6778                                  ;		              bit 4    = DOS in in HMA
  6779                                  ;		              bits 5-7 = reserved
  6780                                  ;               M007 change - only bit 3 is now valid.  Other bits
  6781                                  ;               are 0 when AL = 1
  6782                                  
  6783                                  	
  6784                                  	; MSDOS 3.3 (IBMDOS.COM, offset 196Dh)
  6785                                  
  6786 00001A01 16                              PUSH    SS
  6787 00001A02 1F                              POP     DS
  6788 00001A03 8B1E[5403]                      MOV     BX,[USERNUM+2]
  6789 00001A07 8B0E[5203]                      MOV     CX,[USERNUM]
  6790 00001A0B A1[7D0C]                        MOV     AX,[MSVERS]
  6791 00001A0E E8FAFB                          call	Get_User_Stack
  6792                                          ;MOV	[SI+2],BX
  6793 00001A11 895C02                  	mov	[SI+user_env.user_BX],BX
  6794                                          ;MOV	[SI+4],CX
  6795 00001A14 894C04                  	mov	[SI+user_env.user_CX],CX
  6796                                          ;MOV	[SI+user_env.user_AX],AX  ; Really only sets AH
  6797 00001A17 8904                            MOV	[SI],AX ; 31/03/2018
  6798 00001A19 C3                      	RETN
  6799                                  
  6800                                  ; 18/07/2018 - Retro DOS v3.0
  6801                                  
  6802                                  ;BREAK <$Get/Set_Verify_on_Write - return/set verify-after-write flag>
  6803                                  
  6804                                  ;**	$Get_Verify_On_Write - Get Status of Verify on write flag
  6805                                  ;
  6806                                  ;	ENTRY	none
  6807                                  ;	EXIT	(al) = value of VERIFY flag
  6808                                  ;	USES	all
  6809                                  
  6810                                  
  6811                                  _$GET_VERIFY_ON_WRITE:
  6812                                  
  6813                                  ;hkn; SS override
  6814 00001A1A 36A0[AD02]              	MOV	AL,[SS:VERFLG]	; Retro DOS v2.0 - 12/03/2018
  6815 00001A1E C3                      	retn
  6816                                  
  6817                                  ;**	$Set_Verify_On_Write - Set Status of Verify on write flag
  6818                                  ;
  6819                                  ;	ENTRY	(al) = value of VERIFY flag
  6820                                  ;	EXIT	none
  6821                                  ;	USES	all
  6822                                  
  6823                                  _$SET_VERIFY_ON_WRITE:
  6824                                  
  6825 00001A1F 2401                    	AND	AL,1
  6826                                  ;hkn; SS override
  6827 00001A21 36A2[AD02]              	MOV	[SS:VERFLG],AL	; Retro DOS v2.0 - 12/03/2018
  6828                                  RET27:	; 18/07/2018
  6829 00001A25 C3                      	retn
  6830                                  
  6831                                  ; 19/07/2018 - Retro DOS v3.0
  6832                                  
  6833                                  ;BREAK <$International - return country-dependent information>
  6834                                  
  6835                                  ;----------------------------------------------------------------------------
  6836                                  ;
  6837                                  ; Procedure Name : $INTERNATIONAL
  6838                                  ;
  6839                                  ; Inputs:
  6840                                  ;	MOV	AH,International
  6841                                  ;	MOV	AL,country	(al = 0 => current country)
  6842                                  ;      [MOV	BX,country]
  6843                                  ;	LDS	DX,block
  6844                                  ;	INT	21
  6845                                  ; Function:
  6846                                  ;	give users an idea of what country the application is running
  6847                                  ; Outputs:
  6848                                  ;	IF DX != -1 on input (get country)
  6849                                  ;	  AL = 0 means return current country table.
  6850                                  ;	  0<AL<0FFH means return country table for country AL
  6851                                  ;	  AL = 0FF means return country table for country BX
  6852                                  ;	  No Carry:
  6853                                  ;	     Register BX will contain the 16-bit country code.
  6854                                  ;	     Register AL will contain the low 8 bits of the country code.
  6855                                  ;	     The block pointed to by DS:DX is filled in with the information
  6856                                  ;	     for the particular country.
  6857                                  ;		BYTE  Size of this table excluding this byte and the next
  6858                                  ;		BYTE  Country code represented by this table
  6859                                  ;			A sequence of n bytes, where n is the number specified
  6860                                  ;			by the first byte above and is not > internat_block_max,
  6861                                  ;			in the correct order for being returned by the
  6862                                  ;			INTERNATIONAL call as follows:
  6863                                  ;		WORD	Date format 0=mdy, 1=dmy, 2=ymd
  6864                                  ;		5 BYTE	Currency symbol null terminated
  6865                                  ;		2 BYTE	thousands separator null terminated
  6866                                  ;		2 BYTE	Decimal point null terminated
  6867                                  ;		2 BYTE	Date separator null terminated
  6868                                  ;		2 BYTE	Time separator null terminated
  6869                                  ;		1 BYTE	Bit field.  Currency format.
  6870                                  ;			Bit 0.	=0 $ before #  =1 $ after #
  6871                                  ;			Bit 1.	no. of spaces between # and $ (0 or 1)
  6872                                  ;		1 BYTE	No. of significant decimal digits in currency
  6873                                  ;		1 BYTE	Bit field.  Time format.
  6874                                  ;			Bit 0.	=0 12 hour clock  =1 24 hour
  6875                                  ;		DWORD	Call address of case conversion routine
  6876                                  ;		2 BYTE	Data list separator null terminated.
  6877                                  ;	  Carry:
  6878                                  ;	     Register AX has the error code.
  6879                                  ;	IF DX = -1 on input (set current country)
  6880                                  ;	  AL = 0 is an error
  6881                                  ;	  0<AL<0FFH means set current country to country AL
  6882                                  ;	  AL = 0FF means set current country to country BX
  6883                                  ;	  No Carry:
  6884                                  ;	    Current country SET
  6885                                  ;	    Register AL will contain the low 8 bits of the country code.
  6886                                  ;	  Carry:
  6887                                  ;	     Register AX has the error code.
  6888                                  ;-----------------------------------------------------------------------------
  6889                                  
  6890                                  ;procedure   $INTERNATIONAL,NEAR   ; DOS 3.3
  6891                                  
  6892                                  _$INTERNATIONAL:  ; IBMDOS.COM (MSDOS 3.3), offset 1992h
  6893                                  	 
  6894 00001A26 3CFF                    	CMP	AL,0FFH
  6895 00001A28 7404                    	JZ	short BX_HAS_CODE	; -1 means country code is in BX
  6896 00001A2A 88C3                    	MOV	BL,AL			; Put AL country code in BX
  6897 00001A2C 30FF                    	XOR	BH,BH
  6898                                  BX_HAS_CODE:
  6899 00001A2E 1E                      	PUSH	DS
  6900 00001A2F 07                      	POP	ES
  6901 00001A30 52                      	PUSH	DX
  6902 00001A31 5F                      	POP	DI			; User buffer to ES:DI
  6903                                  
  6904                                  ;hkn; SS is DOSDATA
  6905                                  ;	context DS
  6906                                  
  6907 00001A32 16                      	push	ss
  6908 00001A33 1F                      	pop	ds
  6909                                  
  6910 00001A34 83FFFF                  	CMP	DI,-1
  6911 00001A37 745F                    	JZ	short international_set
  6912 00001A39 09DB                    	OR	BX,BX
  6913 00001A3B 7505                    	JNZ	short international_find
  6914                                  
  6915                                  ;hkn; country_cdpg is in DOSDATA segment.
  6916 00001A3D BE[FD0F]                	MOV	SI,COUNTRY_CDPG
  6917                                  
  6918 00001A40 EB40                    	JMP	SHORT international_copy
  6919                                  
  6920                                  international_find:
  6921 00001A42 BD0000                  	MOV	BP,0			 ; flag it for GetCntry only
  6922 00001A45 E80B00                  	CALL	international_get
  6923 00001A48 7256                    	JC	short errtn
  6924 00001A4A 83FB00                  	CMP	BX,0			 ; nlsfunc finished it ?
  6925 00001A4D 7533                    	JNZ	SHORT international_copy ; no, copy by myself
  6926 00001A4F 89D3                    	MOV	BX,DX			 ; put country back
  6927 00001A51 EB3A                    	JMP	SHORT international_ok3
  6928                                  
  6929                                  international_get:
  6930                                  
  6931                                  ;hkn; country_cdpg is in DOSDATA segment.
  6932                                  ;hkn; use ss override to access COUNTRY_CDPG fields
  6933 00001A53 BE[FD0F]                	MOV	SI,COUNTRY_CDPG
  6934                                  
  6935                                  	; MSDOS 6.0
  6936                                  	;CMP	BX,ss:[SI.ccDosCountry]	 ; = current country id;smr;SS Override
  6937                                  	;retz				 ; return if equal
  6938                                  
  6939                                  	; MSDOS 3.3
  6940                                  	;cmp	bx,[SI+63h]
  6941 00001A56 3B5C63                  	CMP	BX,[SI+DOS_CCDPG.ccDosCountry]
  6942 00001A59 74CA                    	jz	short RET27
  6943                                  
  6944 00001A5B 89DA                    	MOV	DX,BX
  6945 00001A5D 31DB                    	XOR	BX,BX			; bx = 0, default code page
  6946                                  	;CallInstall NLSInstall,NLSFUNC,0 ; check if NLSFUNC in memory
  6947                                  
  6948 00001A5F B80014                  	mov	ax,1400h
  6949 00001A62 CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - INSTALLATION CHECK
  6950                                  			; Return: AL = 00h not installed, OK to install
  6951                                  			; 01h not installed, not OK
  6952                                  			; FFh installed
  6953                                  	
  6954 00001A64 3CFF                    	CMP	AL,0FFH
  6955 00001A66 7516                    	JNZ	short interr		; not in memory
  6956                                  	;cmp	bp,0
  6957 00001A68 09ED                    	or	bp,bp			; GetCntry ?
  6958 00001A6A 7507                    	JNZ	short stcdpg
  6959                                  	;CallInstall GetCntry,NLSFUNC,4	; get country info
  6960                                  
  6961 00001A6C B80414                  	mov     ax,1404h
  6962 00001A6F CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - GET COUNTRY INFO
  6963                                  			; BX = code page, DX = country code,
  6964                                  			; DS:SI -> internal code page structure
  6965                                  			; ES:DI -> user buffer
  6966                                  			; Return: AL = status
  6967                                  
  6968 00001A71 EB05                    	JMP	short chkok
  6969                                  	
  6970                                  	;nop
  6971                                  
  6972                                  stcdpg:
  6973                                  	;CallInstall SetCodePage,NLSFUNC,3  ; set country info
  6974                                  
  6975 00001A73 B80314                  	mov     ax,1403h
  6976 00001A76 CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - SET COUNTRY INFO
  6977                                  			; DS:SI -> internal code page structure
  6978                                  			; BX = code page, DX = country code
  6979                                  			; Return: AL = status
  6980                                  chkok:
  6981 00001A78 08C0                    	or	al,al			; success ?
  6982                                  	;retz				; yes
  6983 00001A7A 74A9                    	jz	short RET27
  6984                                  
  6985                                  setcarry:
  6986 00001A7C F9                      	STC				; set carry
  6987 00001A7D C3                      	retn
  6988                                  interr:
  6989 00001A7E B0FF                    	MOV	AL,0FFH			; flag nlsfunc error
  6990 00001A80 EBFA                    	JMP	short setcarry
  6991                                  
  6992                                  international_copy:
  6993                                  
  6994                                  ;hkn; country_cdpg is in DOSDATA segment.
  6995                                  ;hkn; use ss override to access COUNTRY_CDPG fields
  6996                                  	; MSDOS 6.0
  6997                                  	;MOV	BX,ss:[SI.ccDosCountry]	 ; = current country id;smr;SS Override
  6998                                  	;MOV	SI,OFFSET DOSDATA:COUNTRY_CDPG.ccDFormat
  6999                                  
  7000                                  	; MSDOS 3.3
  7001                                  	;mov	bx,[SI+63h]
  7002 00001A82 8B5C63                  	mov	BX,[SI+DOS_CCDPG.ccDosCountry]
  7003 00001A85 BE[6410]                	mov	SI,COUNTRY_CDPG+DOS_CCDPG.ccDFormat ; 08/09/2018
  7004                                  
  7005                                  	;mov	cx,24
  7006 00001A88 B91800                  	MOV	CX,OLD_COUNTRY_SIZE
  7007                                  
  7008                                  	; MSDOS 6.0
  7009                                  ;hkn;	must set up DS to SS so that international info can be copied
  7010                                  	;push	ds
  7011                                  	;push	ss					; cs -> ss
  7012                                  	;pop	ds
  7013                                  
  7014 00001A8B F3A4                    	REP	MOVSB			;copy country info
  7015                                  
  7016                                  	; MSDOS 6.0
  7017                                  ;hkn;	restore ds
  7018                                  	;pop	ds
  7019                                  
  7020                                  international_ok3:
  7021 00001A8D E87BFB                  	call	Get_User_Stack
  7022                                  ;ASSUME	DS:NOTHING
  7023                                  	;MOV	[SI+2],BX
  7024 00001A90 895C02                  	MOV	[SI+user_env.user_BX],BX
  7025                                  international_ok:
  7026 00001A93 89D8                    	MOV	AX,BX			; Return country code in AX too.
  7027 00001A95 E965FC                  	jmp	SYS_RET_OK
  7028                                  
  7029                                  international_set:
  7030                                  
  7031                                  ;hkn; ASSUME	DS:DOSGROUP
  7032                                  ;ASSUME	DS:DOSDATA
  7033                                  
  7034 00001A98 BD0100                  	MOV	BP,1			; flag it for SetCodePage only
  7035 00001A9B E8B5FF                  	CALL	international_get
  7036 00001A9E 73F3                    	JNC	short international_ok
  7037                                  errtn:
  7038 00001AA0 3CFF                    	CMP	AL,0FFH
  7039 00001AA2 7403                    	JZ	short errtn2
  7040                                  errtn1:
  7041 00001AA4 E962FC                  	jmp	SYS_RET_ERR		; return what we got from NLSFUNC
  7042                                  errtn2:
  7043                                  	;error	error_invalid_function	; NLSFUNC not existent
  7044                                  
  7045                                  	;mov	al,1
  7046 00001AA7 B001                    	mov	al,error_invalid_function 
  7047                                  	;jmp	short errtn1
  7048                                  errtn3:
  7049 00001AA9 E95DFC                  	jmp	SYS_RET_ERR
  7050                                  
  7051                                  ;EndProc $INTERNATIONAL
  7052                                  
  7053                                  ; 19/07/2018
  7054                                  
  7055                                  ;BREAK <$GetExtCntry - return extended country-dependent information>
  7056                                  
  7057                                  ;---------------------------------------------------------------------------
  7058                                  ;
  7059                                  ; Procedure Name : $GetExtCntry
  7060                                  ;
  7061                                  ; Inputs:
  7062                                  ;	if AL >= 20H
  7063                                  ;	  AL= 20H    capitalize single char, DL= char
  7064                                  ;	      21H    capitalize string, CX= string length
  7065                                  ;	      22H    capitalize ASCIIZ string
  7066                                  ;	      23H    YES/NO check, DL=1st char DH= 2nd char (DBCS)
  7067                                  ;	      80H bit 0 = use normal upper case table
  7068                                  ;		      1 = use file upper case table
  7069                                  ;	   DS:DX points to string
  7070                                  ;
  7071                                  ;	else
  7072                                  ;
  7073                                  ;	MOV	AH,GetExtCntry	 ; DOS 3.3
  7074                                  ;	MOV	AL,INFO_ID	( info type,-1 selects all )
  7075                                  ;	MOV	BX,CODE_PAGE	( -1 = active code page )
  7076                                  ;	MOV	DX,COUNTRY_ID	( -1 = active country )
  7077                                  ;	MOV	CX,SIZE 	( amount of data to return )
  7078                                  ;	LES	DI,COUNTRY_INFO ( buffer for returned data )
  7079                                  ;	INT	21
  7080                                  ; Function:
  7081                                  ;	give users extended country dependent information
  7082                                  ;	or capitalize chars
  7083                                  ; Outputs:
  7084                                  ;	  No Carry:
  7085                                  ;	     extended country info is succesfully returned
  7086                                  ;	  Carry:
  7087                                  ;	     Register AX has the error code.
  7088                                  ;	     AX=0, NO	 for YES/NO CHECK
  7089                                  ;		1, YES
  7090                                  ;-------------------------------------------------------------------------------
  7091                                  
  7092                                  ;procedure   $GetExtCntry,NEAR	; DOS 3.3
  7093                                  
  7094                                  	; MSDOS 6.0
  7095                                  _$GetExtCntry:
  7096 00001AAC 3C20                    	CMP	AL,CAP_ONE_CHAR 	; < 20H ?
  7097 00001AAE 7262                    	JB	short notcap
  7098                                  capcap: 				;
  7099 00001AB0 A880                    	TEST	AL,UPPER_TABLE		; which upper case table
  7100 00001AB2 7505                    	JNZ	short fileupper		; file upper case
  7101                                  
  7102                                  ;hkn; UCASE_TAB in DOSDATA
  7103 00001AB4 BB[8810]                	MOV	BX,UCASE_TAB+2		; get normal upper case
  7104 00001AB7 EB03                    	JMP	SHORT capit
  7105                                  
  7106                                  fileupper:
  7107                                  ;hkn; FILE_UCASE_TAB in DOSDATA
  7108 00001AB9 BB[0A11]                	MOV	BX,FILE_UCASE_TAB+2 ; get file upper case
  7109                                  capit:					;
  7110 00001ABC 3C20                    	CMP	AL,CAP_ONE_CHAR 	; cap one char ?
  7111 00001ABE 750D                    	JNZ	short chkyes		; no
  7112 00001AC0 88D0                    	MOV	AL,DL			; set up AL
  7113 00001AC2 E8683B                  	call	GETLET3 		; upper case it
  7114 00001AC5 E843FB                  	call	Get_User_Stack		; get user stack
  7115 00001AC8 884406                  	MOV	[SI+user_env.user_DX],AL ; user's DL=AL
  7116 00001ACB EB1C                    	JMP	SHORT nono		; done
  7117                                  chkyes: 				;
  7118 00001ACD 3C23                    	CMP	AL,CHECK_YES_NO		; check YES or NO ?
  7119 00001ACF 751B                    	JNZ	short capstring		; no
  7120 00001AD1 31C0                    	XOR	AX,AX			; presume NO
  7121                                  		      
  7122                                  ;hkn; NLS_YES, NLS_NO, NLS_yes2, NLS_no2 is defined in msdos.cl3 which is
  7123                                  ;hkn; included in yesno.asm in the DOSCODE segment.
  7124                                  
  7125                                  	; 06/08/2018 - Retro DOS v3.0
  7126                                  	;CMP	DL,[cs:NLS_YES]		; is 'Y' ?
  7127 00001AD3 80FA59                  	cmp	DL,'Y'
  7128 00001AD6 7410                    	JZ	short yesyes		; yes
  7129                                  	;CMP	DL,[cs:NLS_yes2]	; is 'y' ?
  7130 00001AD8 80FA79                  	cmp	dl,'y'
  7131 00001ADB 740B                    	JZ	short yesyes		; yes
  7132 00001ADD 80FA4E                  	cmp	dl,'N'
  7133                                  	;CMP	DL,[cs:NLS_NO]		; is  'N'?
  7134 00001AE0 7407                    	JZ	short nono		; no
  7135 00001AE2 80FA6E                  	CMP	DL,'n'
  7136                                  	;CMP	DL,[cs:NLS_no2]		; is 'n' ?
  7137 00001AE5 7402                    	JZ	short nono		; no
  7138                                  ;dbcs_char:				;
  7139 00001AE7 40                      	INC	AX			; not YES or NO
  7140                                  yesyes: 				;
  7141 00001AE8 40                      	INC	AX			; return 1
  7142                                  nono:					;
  7143 00001AE9 E911FC                  	jmp	SYS_RET_OK		; done
  7144                                  capstring:				;
  7145 00001AEC 89D6                    	MOV	SI,DX			; si=dx
  7146 00001AEE 3C21                    	CMP	AL,CAP_STRING		; cap string ?
  7147 00001AF0 750F                    	JNZ	short capascii		; no
  7148 00001AF2 09C9                    	OR	CX,CX			; check count 0
  7149 00001AF4 74F3                    	JZ	short nono		; yes finished
  7150                                  concap: 				;
  7151 00001AF6 AC                      	LODSB				; get char
  7152 00001AF7 E8333B                  	call	GETLET3 		; upper case it
  7153 00001AFA 8844FF                  	MOV	byte [SI-1],AL		; store back
  7154                                  next99: 				;
  7155 00001AFD E2F7                    	LOOP	concap			; continue
  7156 00001AFF EBE8                    	JMP	short nono		; done
  7157                                  capascii:				;
  7158 00001B01 3C22                    	CMP	AL,CAP_ASCIIZ		; cap ASCIIZ string ?
  7159 00001B03 7545                    	JNZ	short capinval		; no
  7160                                  concap2:				;
  7161 00001B05 AC                      	LODSB				; get char
  7162 00001B06 08C0                    	or	al,al			; end of string ?
  7163 00001B08 74DF                    	JZ	short nono		; yes
  7164 00001B0A E8203B                  	call	GETLET3 		; upper case it
  7165 00001B0D 8844FF                  	MOV	[SI-1],AL		; store back
  7166 00001B10 EBF3                    	JMP	short concap2 		; continue
  7167                                  
  7168                                  	; MSDOS 3.3 ($ MSDOS 6.0)
  7169                                  
  7170                                  ; Offset 1A19h in IBMDOS.COM (MSDOS 3.3), 1987 	
  7171                                  ; _$GetExtCntry:
  7172                                  
  7173                                  notcap:
  7174 00001B12 83F905                  	CMP	CX,5			; minimum size is 5
  7175 00001B15 7279                    	jb	short sizeerror
  7176                                  
  7177                                  GEC_CONT:
  7178                                  ;hkn; SS is DOSDATA
  7179                                  	;context DS
  7180                                  
  7181 00001B17 16                      	push	ss
  7182                                  	;pop	es  ; ! (Retro DOS v3.0 BUG) !
  7183 00001B18 1F                      	pop	ds  ; 17/05/2019 - BugFix
  7184                                  	
  7185                                  ;hkn; COUNTRY_CDPG is in DOSDATA
  7186 00001B19 BE[FD0F]                	MOV	SI,COUNTRY_CDPG
  7187                                  
  7188 00001B1C 83FAFF                  	CMP	DX,-1			; active country ?
  7189 00001B1F 7503                    	JNZ	short GETCDPG 		; no
  7190                                  
  7191                                  ;hkn; use DS override to accesss country_cdpg fields
  7192                                  	;mov	dx,[si+63h]
  7193 00001B21 8B5463                  	MOV	DX,[SI+DOS_CCDPG.ccDosCountry]
  7194                                  					; get active country id;smr;use DS
  7195                                  GETCDPG:
  7196 00001B24 83FBFF                  	CMP	BX,-1			; active code page?
  7197 00001B27 7503                    	JNZ	short CHKAGAIN		; no, check again
  7198                                  
  7199                                  ;hkn; use DS override to accesss country_cdpg fields
  7200                                  	;mov	bx,[si+65h]
  7201 00001B29 8B5C65                  	MOV	BX,[SI+DOS_CCDPG.ccDosCodePage]
  7202                                  					; get active code page id;smr;Use DS
  7203                                  CHKAGAIN:
  7204                                  	;cmp	dx,[si+63h]
  7205 00001B2C 3B5463                  	CMP	DX,[SI+DOS_CCDPG.ccDosCountry]
  7206                                  					; same as active country id?;smr;use DS
  7207 00001B2F 7552                    	JNZ	short CHKNLS		; no
  7208                                  	;cmp	bx,[si+65h]
  7209 00001B31 3B5C65                  	CMP	BX,[SI+DOS_CCDPG.ccDosCodePage]	
  7210                                  					; same as active code pg id?;smr;use DS
  7211 00001B34 754D                    	JNZ	short CHKNLS		; no
  7212                                  CHKTYPE:
  7213                                  	;mov	bx,[si+48h]
  7214 00001B36 8B5C48                  	MOV	BX,[SI+DOS_CCDPG.ccSysCodePage]	
  7215                                  					; bx = sys code page id;smr;use DS
  7216                                  ;	CMP	AL,SetALL		; select all?
  7217                                  ;	JNZ	short SELONE
  7218                                  ;	MOV	SI,COUNTRY_CDPG+DOS_CCDPG.ccNumber_of_entries
  7219                                  ;SELONE:
  7220 00001B39 51                      	PUSH	CX			; save cx
  7221                                  	;mov	cx,[si+4Ah]
  7222 00001B3A 8B4C4A                  	MOV	CX,[SI+DOS_CCDPG.ccNumber_of_entries]	;smr;use DS
  7223 00001B3D BE[4910]                	MOV	SI,COUNTRY_CDPG+DOS_CCDPG.ccSetUcase   ;smr;CDPG in DOSDATA
  7224                                  NXTENTRY:
  7225 00001B40 3A04                    	CMP	AL,[SI] 		; compare info type;smr;use DS
  7226 00001B42 740B                    	JZ	short FOUNDIT
  7227 00001B44 83C605                  	ADD	SI,5			; next entry
  7228 00001B47 E2F7                    	LOOP	NXTENTRY
  7229 00001B49 59                      	POP	CX
  7230                                  capinval:
  7231                                  	;error	error_invalid_function	; info type not found
  7232                                  	;mov	al,1
  7233 00001B4A B001                    	mov	al,error_invalid_function
  7234 00001B4C E9BAFB                  	jmp	SYS_RET_ERR
  7235                                  
  7236                                  FOUNDIT:
  7237 00001B4F A4                      	MOVSB				; move info id byte
  7238 00001B50 59                      	POP	CX			; retsore char count
  7239                                  	;cmp	al,1
  7240 00001B51 3C01                    	CMP	AL,SetCountryInfo	; select country info type ?
  7241 00001B53 7415                    	JZ	short setsize
  7242 00001B55 B90400                  	MOV	CX,4			; 4 bytes will be moved
  7243 00001B58 B80500                  	MOV	AX,5			; 5 bytes will be returned in CX
  7244                                  OK_RETN:
  7245 00001B5B F3A4                    	REP	MOVSB			; copy info
  7246 00001B5D 89C1                    	MOV	CX,AX			; CX = actual length returned
  7247 00001B5F 89D8                    	MOV	AX,BX			; return sys code page in ax
  7248                                  GETDONE:
  7249 00001B61 E8A7FA                  	call	Get_User_Stack		; return actual length to user's CX
  7250                                  	;mov	[si+4],cx 
  7251 00001B64 894C04                  	MOV	[SI+user_env.user_CX],CX
  7252 00001B67 E993FB                  	jmp	SYS_RET_OK
  7253                                  setsize:
  7254 00001B6A 83E903                  	SUB	CX,3			; size after length field
  7255 00001B6D 390C                    	CMP	[SI],CX			; less than table size ;smr;use ds
  7256 00001B6F 7302                    	JAE	short setsize2		; no
  7257 00001B71 8B0C                    	MOV	CX,[SI]			; truncate to table size ;smr;use ds
  7258                                  setsize2:
  7259 00001B73 26890D                  	MOV	[ES:DI],CX		; copy actual length to user's
  7260 00001B76 83C702                  	ADD	DI,2			; update index
  7261 00001B79 83C602                  	ADD	SI,2
  7262 00001B7C 89C8                    	MOV	AX,CX
  7263 00001B7E 83C003                  	ADD	AX,3			; AX has the actual length
  7264 00001B81 EBD8                    	JMP	short OK_RETN 		; go move it
  7265                                  CHKNLS:
  7266 00001B83 30E4                    	XOR	AH,AH
  7267 00001B85 50                      	PUSH	AX			; save info type
  7268 00001B86 5D                      	POP	BP			; bp = info type
  7269                                  	
  7270                                  	;CallInstall NLSInstall,NLSFUNC,0 ; check if NLSFUNC in memory
  7271                                  
  7272 00001B87 B80014                  	mov     ax, 1400h
  7273 00001B8A CD2F                    	int     2Fh     ; - Multiplex - NLSFUNC.COM - INSTALLATION CHECK
  7274                                  			; Return: AL = 00h not installed, OK to install
  7275                                  			; 01h not installed, not OK
  7276                                  			; FFh installed
  7277                                  	
  7278 00001B8C 3CFF                    	CMP	AL,0FFH
  7279 00001B8E 7405                    	JZ	short NLSNXT		; in memory
  7280                                  
  7281                                  sizeerror:
  7282                                  	;error	error_invalid_function
  7283                                  	;mov	al,1
  7284 00001B90 B001                    	mov	al,error_invalid_function
  7285 00001B92 E974FB                  	jmp	SYS_RET_ERR
  7286                                  
  7287                                  NLSNXT: 
  7288                                  	;CallInstall GetExtInfo,NLSFUNC,2 ;get extended info
  7289                                  
  7290 00001B95 B80214                  	mov     ax, 1402h
  7291 00001B98 CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - GET COUNTRY INFO
  7292                                  			; BP = subfunction, BX = code page
  7293                                  			; DX = country code, DS:SI -> internal code page structure
  7294                                  			; ES:DI -> user buffer, CX = size of user buffer
  7295                                  			; Return: AL = status
  7296                                  			; 00h successful
  7297                                  			; else DOS error code
  7298                                  
  7299 00001B9A 3C00                    	CMP	AL,0			; success ?
  7300 00001B9C 7508                    	JNZ	short NLSERROR
  7301 00001B9E 8B4448                  	mov     ax,[si+48h]
  7302 00001BA1 8B4448                  	MOV	AX,[SI+DOS_CCDPG.ccSysCodePage]	
  7303                                  			; ax = sys code page id;smr;use ds;
  7304                                  			;BUGBUG;check whether DS is OK after the above calls
  7305 00001BA4 EBBB                    	JMP	short GETDONE
  7306                                  NLSERROR:
  7307 00001BA6 E960FB                  	jmp	SYS_RET_ERR		; return what is got from NLSFUNC
  7308                                  
  7309                                  ;EndProc $GetExtCntry
  7310                                  
  7311                                  ;BREAK <$GetSetCdPg - get or set global code page>
  7312                                  
  7313                                  ;**	$GetSetCdPg - Get or Set Global Code Page
  7314                                  ;
  7315                                  ;   System call format:
  7316                                  ;
  7317                                  ;	MOV	AH,GetSetCdPg	; DOS 3.3
  7318                                  ;	MOV	AL,n		; n = 1 : get code page, n = 2 : set code page
  7319                                  ;	MOV	BX,CODE_PAGE	( set code page only)
  7320                                  ;	INT	21
  7321                                  ;
  7322                                  ;	ENTRY	(al) = n
  7323                                  ;		(bx) = code page
  7324                                  ;	EXIT	'C' clear
  7325                                  ;		  global code page is set	(set global code page)
  7326                                  ;		  (BX) = active code page id	(get global code page)
  7327                                  ;		  (DX) = system code page id	(get global code page)
  7328                                  ;		'C' set
  7329                                  ;		  (AX) = error code
  7330                                  
  7331                                  ;procedure  $GetSetCdPg,NEAR   ; DOS 3.3
  7332                                  
  7333                                  _$GetSetCdPg:
  7334                                  
  7335                                  ;hkn; SS is DOSDATA
  7336                                  	;context DS
  7337                                  
  7338 00001BA9 16                      	push	ss
  7339 00001BAA 1F                      	pop	ds
  7340                                  
  7341                                  ;hkn; COUNTRY_CDPG is in DOSDATA
  7342 00001BAB BE[FD0F]                	MOV	SI,COUNTRY_CDPG
  7343                                  
  7344 00001BAE 3C01                    	CMP	AL,1		       ; get global code page
  7345 00001BB0 7512                    	JNZ	short setglpg 	       ; set global cod epage
  7346                                  	;mov	bx,[si+65h]
  7347 00001BB2 8B5C65                  	MOV	BX,[SI+DOS_CCDPG.ccDosCodePage]
  7348                                  					; get active code page id;smr;use ds
  7349                                  	;mov	dx,[si+48h]
  7350 00001BB5 8B5448                  	MOV	DX,[SI+DOS_CCDPG.ccSysCodePage]
  7351                                  				  	; get sys code page id;smr;use ds
  7352 00001BB8 E850FA                  	call	Get_User_Stack
  7353                                  ;ASSUME DS:NOTHING
  7354                                  	;mov	[si+2],bx
  7355 00001BBB 895C02                  	MOV	[SI+user_env.user_BX],BX ; update returned bx
  7356                                  	;mov	[si+6],dx
  7357 00001BBE 895406                  	MOV	[SI+user_env.user_DX],DX ; update returned dx
  7358                                  OK_RETURN:
  7359                                  	;transfer SYS_RET_OK
  7360 00001BC1 E939FB                  	jmp	SYS_RET_OK
  7361                                  
  7362                                  ;hkn; ASSUME DS:DOSGROUP
  7363                                  ;ASSUME	DS:DOSDATA
  7364                                  
  7365                                  setglpg:
  7366 00001BC4 3C02                    	CMP	AL,2
  7367 00001BC6 7534                    	JNZ	short nomem
  7368                                  ;;;;;;; CMP	BX,[SI+DOS_CCDPG.ccDosCodePage] ; same as active code page
  7369                                  ;;;;;;; JZ	short OK_RETURN		; yes
  7370                                  	;mov	dx,[si+63h]
  7371 00001BC8 8B5463                  	MOV	DX,[SI+DOS_CCDPG.ccDosCountry]	;smr;use ds
  7372                                  	;CallInstall NLSInstall,NLSFUNC,0 ; check if NLSFUNC in memory
  7373 00001BCB B80014                  	mov     ax, 1400h
  7374 00001BCE CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - INSTALLATION CHECK
  7375                                  			; Return: AL = 00h not installed, OK to install
  7376                                  			; 01h not installed, not OK
  7377                                  			; FFh installed
  7378 00001BD0 3CFF                    	CMP	AL,0FFH
  7379 00001BD2 7528                    	JNZ	short nomem		; not in memory
  7380                                  	;CallInstall SetCodePage,NLSFUNC,1  ;set the code page
  7381 00001BD4 B80114                  	mov     ax, 1401h
  7382 00001BD7 CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - CHANGE CODE PAGE
  7383                                  			; DS:SI -> internal code page structure
  7384                                  			; BX = new code page, DX = country code???
  7385                                  			; Return: AL = status
  7386                                  			; 00h successful
  7387                                  			; else DOS error code
  7388                                  	;cmp	al,0
  7389 00001BD9 08C0                    	or	al,al			   ; success ?
  7390 00001BDB 74E4                    	JZ	short OK_RETURN		   ; yes
  7391 00001BDD 3C41                    	CMP	AL,65			   ; set device code page failed
  7392 00001BDF 7518                    	JNZ	short seterr
  7393 00001BE1 B84100                  	MOV	AX,65
  7394 00001BE4 A3[D202]                	MOV	[EXTERR],AX
  7395                                  	;mov	byte [EXTERR_ACTION],6
  7396                                  	;mov	byte [EXTERR_CLASS],5
  7397                                  	;mov	byte [EXTERR_LOCUS],4
  7398 00001BE7 C606[D402]06            	MOV	byte [EXTERR_ACTION],errACT_Ignore
  7399 00001BEC C606[D502]05            	MOV	byte [EXTERR_CLASS],errCLASS_HrdFail
  7400 00001BF1 C606[D102]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev
  7401                                  	;transfer From_GetSet
  7402 00001BF6 E918FB                  	jmp	From_GetSet
  7403                                  
  7404                                  seterr:
  7405                                  	;transfer SYS_RET_ERR
  7406 00001BF9 E90DFB                  	jmp	SYS_RET_ERR
  7407                                  
  7408                                  nomem:
  7409                                  	;error	error_invalid_function ; function not defined
  7410                                  	;mov	al,1
  7411 00001BFC B001                    	mov	al,error_invalid_function
  7412 00001BFE EBF9                    	jmp	short seterr
  7413                                  
  7414                                  ;EndProc $GetSetCdPg
  7415                                  
  7416                                  
  7417                                  ;BREAK <$Get_Drive_Freespace -- Return bytes of free disk space on a drive>
  7418                                  
  7419                                  ;**	$Get_Drive_Freespace - Return amount of drive free space
  7420                                  ;
  7421                                  ;	$Get_Drive_Freespace returns the # of free allocation units on a
  7422                                  ;		drive.
  7423                                  ;
  7424                                  ;	This call returns the same info in the same registers (except for the
  7425                                  ;	FAT pointer) as the old FAT pointer calls
  7426                                  ;
  7427                                  ;	ENTRY	DL = Drive number
  7428                                  ;	EXIT	AX = Sectors per allocation unit
  7429                                  ;		   = -1 if bad drive specified
  7430                                  ;		On User Stack
  7431                                  ;		    BX = Number of free allocation units
  7432                                  ;		    DX = Total Number of allocation units on disk
  7433                                  ;		    CX = Sector size
  7434                                  
  7435                                  ;procedure   $GET_DRIVE_FREESPACE,NEAR
  7436                                  
  7437                                  _$GET_DRIVE_FREESPACE:
  7438                                  
  7439                                  ;hkn; SS is DOSDATA
  7440                                  	;context DS
  7441 00001C00 16                      	push	ss
  7442 00001C01 1F                      	pop	ds
  7443                                  
  7444 00001C02 88D0                    	MOV	AL,DL
  7445                                  	;invoke	GetThisDrv		; Get drive
  7446 00001C04 E86A4D                  	call	GETTHISDRV
  7447                                  SET_AX_RET:
  7448 00001C07 7218                    	JC	short BADFDRV
  7449                                  	;invoke	DISK_INFO
  7450 00001C09 E8A71C                  	call	DISK_INFO
  7451 00001C0C 87D3                    	XCHG	DX,BX
  7452 00001C0E 72F7                    	JC	short SET_AX_RET	; User FAILed to I 24
  7453 00001C10 30E4                    	XOR	AH,AH			; Chuck Fat ID byte
  7454                                  DoSt:
  7455 00001C12 E8F6F9                  	call	Get_User_Stack
  7456                                  ;ASSUME	DS:NOTHING
  7457                                  	;mov	[si+6],dx
  7458                                  	;mov	[si+4],cx
  7459                                  	;mov	[si+2],bx
  7460 00001C15 895406                  	MOV	[SI+user_env.user_DX],DX
  7461 00001C18 894C04                  	MOV	[SI+user_env.user_CX],CX
  7462 00001C1B 895C02                  	MOV	[SI+user_env.user_BX],BX
  7463                                  	;MOV	[SI+user_env.user_AX],AX
  7464 00001C1E 8904                    	mov     [si],ax
  7465                                  	;return
  7466 00001C20 C3                      	retn
  7467                                  
  7468                                  BADFDRV:
  7469                                  	; MSDOS 6.0
  7470                                  	;;mov	al,0Fh
  7471                                  	;MOV	AL,error_invalid_drive	; Assume error
  7472                                  	
  7473                                  	; MSDOS 3.3
  7474                                  	;mov	al,0Fh
  7475 00001C21 B00F                    	mov	al,error_invalid_drive	; Assume error
  7476                                  
  7477                                  	;invoke	FCB_RET_ERR
  7478 00001C23 E8F9FA                  	call	FCB_RET_ERR
  7479 00001C26 B8FFFF                  	MOV	AX,-1
  7480 00001C29 EBE7                    	JMP	short DoSt
  7481                                  
  7482                                  ;EndProc $GET_DRIVE_FREESPACE
  7483                                  
  7484                                  
  7485                                  ;	BREAK <$Get_DMA, $Set_DMA -- Get/Set current DMA address>
  7486                                  
  7487                                  ;**	$Get_DMA - Get Disk Transfer Address
  7488                                  ;
  7489                                  ;	ENTRY	none
  7490                                  ;	EXIT	ES:BX is current transfer address
  7491                                  ;	USES	all
  7492                                  
  7493                                  _$GET_DMA:
  7494 00001C2B 368B1E[DA02]            	MOV	BX,[SS:DMAADD]
  7495 00001C30 368B0E[DC02]            	MOV	CX,[SS:DMAADD+2]
  7496 00001C35 E8D3F9                  	call	Get_User_Stack
  7497                                  	;mov	[si+2],bx
  7498                                  	;mov	[si+10h],cx
  7499 00001C38 895C02                  	MOV	[SI+user_env.user_BX],BX
  7500 00001C3B 894C10                  	MOV	[SI+user_env.user_ES],CX
  7501 00001C3E C3                      	retn
  7502                                  
  7503                                  ;**	$Set_DMA - Set Disk Transfer Address
  7504                                  ;
  7505                                  ;	ENTRY	DS:DX is current transfer address
  7506                                  ;	EXIT	none
  7507                                  ;	USES	all
  7508                                  
  7509                                  _$SET_DMA:
  7510 00001C3F 368916[DA02]            	MOV	[SS:DMAADD],DX
  7511 00001C44 368C1E[DC02]            	MOV	[SS:DMAADD+2],DS
  7512 00001C49 C3                      	retn
  7513                                  
  7514                                  ;	BREAK <$Get_Default_Drive, $Set_Default_Drive -- Set/Get default drive>
  7515                                  
  7516                                  ;**	$Get_Default_Drive - Get Current Default Drive
  7517                                  ;
  7518                                  ;	ENTRY	none
  7519                                  ;	EXIT	(AL) = drive number
  7520                                  ;	USES	all
  7521                                  
  7522                                  _$GET_DEFAULT_DRIVE:
  7523 00001C4A 36A0[E402]              	MOV	AL,[SS:CURDRV]
  7524 00001C4E C3                      	retn
  7525                                  
  7526                                  ;**	$Set_Default_Drive - Specify new Default Drive
  7527                                  ;
  7528                                  ;	ENTRY	(DL) = Drive number for new default drive
  7529                                  ;	EXIT	(AL) = Number of drives, NO ERROR RETURN IF DRIVE NUMBER BAD
  7530                                  
  7531                                  _$SET_DEFAULT_DRIVE:
  7532 00001C4F 88D0                    	MOV	AL,DL
  7533 00001C51 FEC0                    	INC	AL			; A=1, B=2...
  7534 00001C53 E8044D                  	call	GetVisDrv		; see if visible drive
  7535 00001C56 7204                    	JC	short SETRET		; errors do not set
  7536 00001C58 36A2[E402]              	MOV	[SS:CURDRV],AL		; no, set
  7537                                  
  7538                                  SETRET:
  7539 00001C5C 36A0[4700]              	MOV	AL,[SS:CDSCOUNT]	; let user see what the count really is
  7540 00001C60 C3                      	retn
  7541                                  
  7542                                  
  7543                                  ;BREAK <$Get/Set_Interrupt_Vector - Get/Set interrupt vectors>
  7544                                  
  7545                                  ;**	$Get_Interrupt_Vector - Get Interrupt Vector
  7546                                  ;
  7547                                  ;	$Get_Interrupt_Vector is the official way for user pgms to get the
  7548                                  ;	contents of an interrupt vector.
  7549                                  ;
  7550                                  ;	ENTRY	(AL) = interrupt number
  7551                                  ;	EXIT	(ES:BX) = current interrupt vector
  7552                                  
  7553                                  _$GET_INTERRUPT_VECTOR:
  7554 00001C61 E81A00                  	CALL	RECSET
  7555 00001C64 26C41F                  	LES	BX,[ES:BX]
  7556 00001C67 E8A1F9                  	call	Get_User_Stack
  7557                                  	;mov	[si+2],bx
  7558                                  	;mov	[si+10h],es
  7559 00001C6A 895C02                  	MOV	[SI+user_env.user_BX],BX
  7560 00001C6D 8C4410                  	MOV	[SI+user_env.user_ES],ES
  7561 00001C70 C3                      	retn
  7562                                  
  7563                                  ;**	$Set_Interrupt_Vector - Set Interrupt Vector
  7564                                  ;
  7565                                  ;	$Set_Interrupt_Vector is the official way for user pgms to set the
  7566                                  ;	contents of an interrupt vector.
  7567                                  ;
  7568                                  ;	M004, M068: Also set A20OFF_COUNT to 1 if EXECA20OFF bit has been set 
  7569                                  ;	and if A20OFF_COUNT is non-zero. See under tag M003 in inc\dossym.inc 
  7570                                  ;	for explanation.
  7571                                  ;
  7572                                  ;	ENTRY	(AL) = interrupt number
  7573                                  ;		(ds:dx) = desired new vector value
  7574                                  ;	EXIT	none
  7575                                  ;	USES	all
  7576                                  
  7577                                  _$SET_INTERRUPT_VECTOR:
  7578 00001C71 E80A00                  	CALL	RECSET
  7579 00001C74 FA                      	CLI				; Watch out!!!!! Folks sometimes use
  7580 00001C75 268917                  	MOV	[ES:BX],DX		;   this for hardware ints (like timer).
  7581 00001C78 268C5F02                	MOV	[ES:BX+2],DS
  7582 00001C7C FB                      	STI
  7583                                  					; M004, M068 - Start
  7584                                  	; MSDOS 6.0
  7585                                  	;test	byte [DOS_FLAG],EXECA20OFF
  7586                                  					; Q: was the previous call an int 21
  7587                                  					;    exec call
  7588                                  	;jnz	short siv_1		; Y: go set count
  7589 00001C7D C3                      	retn				; N: return
  7590                                  
  7591                                  ;siv_1:	
  7592                                  	;cmp	byte [A20OFF_COUNT],0	; Q: is count 0
  7593                                  	;jne	short siv_2		; N: done 
  7594                                  	;mov	byte [A20OFF_COUNT],1	; Y: set it to 1 to indicate to dos 
  7595                                  					; dispatcher to turn A20 Off before 
  7596                                  					; returning to user.
  7597                                  ;siv_2:
  7598                                  	;retn				; M004, M068 - End
  7599                                  	
  7600                                  RECSET:
  7601 00001C7E 31DB                    	XOR	BX,BX
  7602 00001C80 8EC3                    	MOV	ES,BX
  7603 00001C82 88C3                    	MOV	BL,AL
  7604 00001C84 D1E3                    	SHL	BX,1
  7605 00001C86 D1E3                    	SHL	BX,1
  7606 00001C88 C3                      	retn
  7607                                  
  7608                                  
  7609                                  ;	BREAK <$Char_Oper - hack on paths, switches so that xenix can look like PCDOS>
  7610                                  
  7611                                  ;**	$Char_Oper - Manipulate Switch Character
  7612                                  ;
  7613                                  ;	This function was put in to facilitate XENIX path/switch compatibility
  7614                                  ;
  7615                                  ;	ENTRY	AL = function:
  7616                                  ;		    0 - read switch char
  7617                                  ;		    1 - set switch char (char in DL)
  7618                                  ;		    2 - read device availability
  7619                                  ;			Always returns available
  7620                                  ;		    3 - set device availability
  7621                                  ;			No longer supported (NOP)
  7622                                  ;	EXIT	(al) = 0xff iff error
  7623                                  ;		(al) != 0xff if ok
  7624                                  ;		  (dl) = character/flag, iff "read switch char" subfunction
  7625                                  ;	USES	AL, DL
  7626                                  ;
  7627                                  ;	NOTE	This already obsolete function has been deactivated in DOS 5.0
  7628                                  ;		The character / is always returned for subfunction 0,
  7629                                  ;		subfunction 2 always returns -1, all other subfunctions are ignored.
  7630                                  
  7631                                  _$CHAR_OPER:
  7632                                  	; MSDOS 6.0
  7633                                  	;or	al,al				; get switch?
  7634                                  	;mov	dl,'/'				; assume yes
  7635                                  	;jz	short chop_1			; jump if yes
  7636                                  	;cmp	al,2				; check device availability?
  7637                                  	;mov	dl,-1				; assume yes
  7638                                  	;jz	short chop_1				; jump if yes
  7639                                  	;retn					; otherwise just quit
  7640                                  
  7641                                  ; subfunctions requiring return of value to user come here.  DL holds
  7642                                  ; value to return
  7643                                  
  7644                                  ;chop_1:
  7645                                  	;call	Get_User_Stack
  7646                                  	;mov	[SI+user_env.user_DX],dx	; store value for user
  7647                                  	;retn
  7648                                  
  7649                                  	; MSDOS 3.3
  7650                                  	; Offset 1B87h in IBMDOS.COM (MSDOS 3.3), 1987
  7651 00001C89 16                      	push    ss
  7652 00001C8A 1F                      	pop     ds
  7653 00001C8B 3C01                    	cmp     al, 1
  7654 00001C8D 720B                    	jb      short chop_1
  7655 00001C8F 740F                    	jz      short chop_2
  7656 00001C91 3C03                    	cmp     al, 3
  7657 00001C93 7210                    	jb      short chop_3
  7658 00001C95 7416                    	jz      short chop_5
  7659 00001C97 B0FF                    	mov     al, 0FFh
  7660 00001C99 C3                      	retn
  7661                                  chop_1:
  7662 00001C9A 8A16[AF02]              	mov     dl,[chSwitch]
  7663 00001C9E EB07                    	jmp     short chop_4
  7664                                  chop_2:
  7665 00001CA0 8816[AF02]              	mov     [chSwitch], dl
  7666 00001CA4 C3                      	retn
  7667                                  chop_3:
  7668 00001CA5 B2FF                    	mov     dl, 0FFh
  7669                                  chop_4:
  7670 00001CA7 E861F9                  	call    Get_User_Stack
  7671 00001CAA 895406                  	mov     [si+6],dx
  7672                                  chop_5:
  7673 00001CAD C3                      	retn
  7674                                  
  7675                                  
  7676                                  ;**	$GetExtendedError - Return Extended error code
  7677                                  ;
  7678                                  ;	This function reads up the extended error info from the static
  7679                                  ;	variables where it was stored.
  7680                                  ;
  7681                                  ;	ENTRY	none
  7682                                  ;	EXIT	AX = Extended error code (0 means no extended error)
  7683                                  ;		BL = recommended action
  7684                                  ;		BH = class of error
  7685                                  ;		CH = locus of error
  7686                                  ;		ES:DI = may be pointer
  7687                                  ;	USES	ALL
  7688                                  
  7689                                  _$GetExtendedError:
  7690 00001CAE 16                      	push	ss
  7691 00001CAF 1F                      	pop	ds
  7692 00001CB0 A1[D202]                	MOV	AX,[EXTERR]
  7693 00001CB3 C43E[D602]              	LES	DI,[EXTERRPT]
  7694 00001CB7 8B1E[D402]              	MOV	BX,[EXTERR_ACTION]	; BL = Action, BH = Class
  7695 00001CBB 8A2E[D102]              	MOV	CH,[EXTERR_LOCUS]
  7696 00001CBF E849F9                  	call	Get_User_Stack
  7697                                  	;mov	[si+0Ah],di
  7698 00001CC2 897C0A                  	MOV	[SI+user_env.user_DI],DI
  7699                                  	;mov	[si+10h],es
  7700 00001CC5 8C4410                  	MOV	[SI+user_env.user_ES],ES
  7701                                  	;mov	[si+2],bx
  7702 00001CC8 895C02                  	MOV	[SI+user_env.user_BX],BX
  7703                                  	;mov	[si+4],cx
  7704 00001CCB 894C04                  	MOV	[SI+user_env.user_CX],CX
  7705 00001CCE E92CFA                  	jmp	SYS_RET_OK
  7706                                  
  7707                                  
  7708                                  ;============================================================================
  7709                                  ; PARSE.ASM, MSDOS 6.0, 1991
  7710                                  ;============================================================================
  7711                                  ; 19/07/2018 - Retro DOS v3.0
  7712                                  
  7713                                  ; System calls for parsing command lines
  7714                                  ;
  7715                                  ;   $PARSE_FILE_DESCRIPTOR
  7716                                  ;
  7717                                  ;   Modification history:
  7718                                  ;
  7719                                  ;       Created: ARR 30 March 1983
  7720                                  ;               EE PathParse 10 Sept 1983
  7721                                  ;
  7722                                  
  7723                                  ;BREAK <$Parse_File_Descriptor -- Parse an arbitrary string into an FCB>
  7724                                  ;---------------------------------------------------------------------------
  7725                                  ; Inputs:
  7726                                  ;       DS:SI Points to a command line
  7727                                  ;       ES:DI Points to an empty FCB
  7728                                  ;       Bit 0 of AL = 1 At most one leading separator scanned off
  7729                                  ;                   = 0 Parse stops if separator encountered
  7730                                  ;       Bit 1 of AL = 1 If drive field blank in command line - leave FCB
  7731                                  ;                   = 0  "    "    "     "         "      "  - put 0 in FCB
  7732                                  ;       Bit 2 of AL = 1 If filename field blank - leave FCB
  7733                                  ;                   = 0  "       "      "       - put blanks in FCB
  7734                                  ;       Bit 3 of AL = 1 If extension field blank - leave FCB
  7735                                  ;                   = 0  "       "      "        - put blanks in FCB
  7736                                  ; Function:
  7737                                  ;       Parse command line into FCB
  7738                                  ; Returns:
  7739                                  ;       AL = 1 if '*' or '?' in filename or extension, 0 otherwise
  7740                                  ;       DS:SI points to first character after filename
  7741                                  ;---------------------------------------------------------------------------
  7742                                  
  7743                                  _$PARSE_FILE_DESCRIPTOR:
  7744 00001CD1 E85338                  	call	MAKEFCB
  7745 00001CD4 56                      	PUSH    SI
  7746 00001CD5 E833F9                  	call	Get_User_Stack
  7747                                  	;pop	word [si+8]
  7748 00001CD8 8F4408                  	POP     word [SI+user_env.user_SI]
  7749 00001CDB C3                      	retn
  7750                                  
  7751                                  ;============================================================================
  7752                                  ; MISC.ASM, MSDOS 6.0, 1991
  7753                                  ;============================================================================
  7754                                  ; 19/07/2018 - Retro DOS v3.0
  7755                                  
  7756                                  ;ENTRYPOINTSEG	EQU	0CH
  7757                                  ;MAXDIF		EQU	0FFFH
  7758                                  ;SAVEXIT 	EQU	10
  7759                                  ;WRAPOFFSET	EQU	0FEF0h
  7760                                  
  7761                                  ;
  7762                                  ;----------------------------------------------------------------------------
  7763                                  ;
  7764                                  ;**	$SLEAZEFUNC - Get a Pointer to the Media Byte
  7765                                  ;
  7766                                  ;	Return Stuff sort of like old get fat call
  7767                                  ;
  7768                                  ;	ENTRY	none
  7769                                  ;	EXIT	DS:BX = Points to FAT ID byte (IBM only)
  7770                                  ;			GOD help anyone who tries to do ANYTHING except
  7771                                  ;			READ this ONE byte.
  7772                                  ;		DX = Total Number of allocation units on disk
  7773                                  ;		CX = Sector size
  7774                                  ;		AL = Sectors per allocation unit
  7775                                  ;		   = -1 if bad drive specified
  7776                                  ;	USES	all
  7777                                  ;
  7778                                  ;**	$SLEAZEFUNCDL - Get a Pointer to the Media Byte
  7779                                  ;
  7780                                  ;	Identical to $SLEAZEFUNC except (dl) = drive
  7781                                  ;
  7782                                  ;	ENTRY	(dl) = drive (0=default, 1=A, 2=B, etc.)
  7783                                  ;	EXIT	DS:BX = Points to FAT ID byte (IBM only)
  7784                                  ;			GOD help anyone who tries to do ANYTHING except
  7785                                  ;			READ this ONE byte.
  7786                                  ;		DX = Total Number of allocation units on disk
  7787                                  ;		CX = Sector size
  7788                                  ;		AL = Sectors per allocation unit
  7789                                  ;		   = -1 if bad drive specified
  7790                                  ;	USES	all
  7791                                  ;
  7792                                  ;----------------------------------------------------------------------------
  7793                                  ;
  7794                                  
  7795                                  _$SLEAZEFUNC:
  7796 00001CDC B200                    	MOV	DL,0
  7797                                  
  7798                                  _$SLEAZEFUNCDL:
  7799 00001CDE 16                      	push	ss
  7800 00001CDF 1F                      	pop	ds
  7801                                  	
  7802 00001CE0 88D0                    	MOV	AL,DL
  7803 00001CE2 E88C4C                  	call	GETTHISDRV		; Get CDS structure
  7804                                  SET_AL_RET:
  7805                                  	; MSDOS 6.0
  7806                                  	;;mov	al, 0Fh
  7807                                  	;MOV	AL,error_invalid_drive	; Assume error	;AC000;
  7808                                  	
  7809                                  	; MSDOS 3.3
  7810                                  	;mov	al, 0Fh
  7811 00001CE5 B00F                    	MOV	AL,error_invalid_drive	; Assume error	;AC000;
  7812                                  
  7813 00001CE7 721E                    	JC	short BADSLDRIVE
  7814                                  
  7815 00001CE9 E8C71B                  	call	DISK_INFO
  7816 00001CEC 72F7                    	JC	short SET_AL_RET	; User FAILed to I 24
  7817 00001CEE 8826[3005]              	MOV	[FATBYTE],AH
  7818                                  
  7819                                  ; NOTE THAT A FIXED MEMORY CELL IS USED --> THIS CALL IS NOT
  7820                                  ; RE-ENTRANT. USERS BETTER GET THE ID BYTE BEFORE THEY MAKE THE
  7821                                  ; CALL AGAIN
  7822                                  
  7823 00001CF2 BF[3005]                	MOV	DI,FATBYTE
  7824 00001CF5 30E4                    	XOR	AH,AH			; AL has sectors/cluster
  7825 00001CF7 E811F9                  	call	Get_User_Stack
  7826                                  	;mov	[si+4],cx
  7827                                  	;mov	[si+6],bx
  7828                                  	;mov	[si+2],di
  7829 00001CFA 894C04                  	MOV	[SI+user_env.user_CX],CX
  7830 00001CFD 895C06                  	MOV	[SI+user_env.user_DX],BX
  7831 00001D00 897C02                  	MOV	[SI+user_env.user_BX],DI
  7832                                  	
  7833                                  	;mov	[si+0Eh],cs
  7834                                  	;mov	[SI+user_env.user_DS],SS
  7835 00001D03 8C4C0E                  	MOV     [SI+user_env.user_DS],CS ; stash correct pointer
  7836                                  
  7837 00001D06 C3                      	retn
  7838                                  
  7839                                  BADSLDRIVE:
  7840 00001D07 E915FA                  	jmp	FCB_RET_ERR
  7841                                  
  7842                                  ;
  7843                                  ;----------------------------------------------------------------------------
  7844                                  ;
  7845                                  ;**	$Get_INDOS_Flag - Return location of DOS Critical Section Flag
  7846                                  ;
  7847                                  ;	Returns location of DOS status for interrupt routines
  7848                                  ;									   ;
  7849                                  ;	ENTRY	none
  7850                                  ;	EXIT	(es:bx) = flag location
  7851                                  ;	USES	all
  7852                                  ;
  7853                                  ;----------------------------------------------------------------------------
  7854                                  ;
  7855                                  
  7856                                  _$GET_INDOS_FLAG:
  7857 00001D0A E8FEF8                          CALL	Get_User_Stack
  7858                                          ;MOV	WORD [SI+2],INDOS
  7859 00001D0D C74402[CF02]            	MOV     word [SI+user_env.user_BX],INDOS
  7860                                          ;MOV	[SI+10H],SS
  7861 00001D12 8C5410                  	MOV	[SI+user_env.user_ES],SS
  7862 00001D15 C3                      	RETN 
  7863                                  
  7864                                  ;
  7865                                  ;----------------------------------------------------------------------------
  7866                                  ;
  7867                                  ;**	$Get_IN_Vars - Return Pointer to DOS Variables
  7868                                  ;
  7869                                  ;	Return a pointer to interesting DOS variables This call is version
  7870                                  ;	dependent and is subject to change without notice in future versions.
  7871                                  ;	Use at risk.
  7872                                  ;
  7873                                  ;	ENTRY	none
  7874                                  ;	EXIT	(es:bx) = address of SYSINITVAR
  7875                                  ;	uses	ALL
  7876                                  ;
  7877                                  ;----------------------------------------------------------------------------
  7878                                  ;
  7879                                  
  7880                                  _$GET_IN_VARS:
  7881 00001D16 E8F2F8                          CALL	Get_User_Stack
  7882                                          ;MOV	WORD [SI+2],SYSINITVAR
  7883                                  	;MOV	word [SI+user_env.user_BX],SYSINITVAR
  7884 00001D19 C74402[2600]            	MOV	word [SI+user_env.user_BX],SYSINITVARS
  7885                                          ;MOV	[SI+10H],SS
  7886 00001D1E 8C5410                  	MOV	[SI+user_env.user_ES],SS
  7887 00001D21 C3                      	RETN
  7888                                  
  7889                                  ;
  7890                                  ;----------------------------------------------------------------------------
  7891                                  ;
  7892                                  ;**	$Get_Default_DPB - Return a pointer to the Default DPB
  7893                                  ;
  7894                                  ;	Return pointer to drive parameter table for default drive
  7895                                  ;
  7896                                  ;	ENTRY	none
  7897                                  ;	EXIT	(ds:bx) = DPB address
  7898                                  ;	USES	all
  7899                                  ;
  7900                                  ;**	$Get_DPB - Return a pointer to a specified DPB
  7901                                  ;
  7902                                  ;	Return pointer to a specified drive parameter table
  7903                                  ;
  7904                                  ;	ENTRY	(dl) = drive # (0 = default, 1=A, 2=B, etc.)
  7905                                  ;	EXIT	(al) = 0 iff ok
  7906                                  ;		  (ds:bx) = DPB address
  7907                                  ;		(al) = -1 if bad drive
  7908                                  ;	USES	all
  7909                                  ;
  7910                                  ;----------------------------------------------------------------------------
  7911                                  ;
  7912                                  
  7913                                  _$GET_DEFAULT_DPB:
  7914 00001D22 B200                    	MOV	DL,0
  7915                                  _$GET_DPB:
  7916 00001D24 16                      	push	ss
  7917 00001D25 1F                      	pop	ds
  7918                                  
  7919 00001D26 88D0                    	MOV	AL,DL
  7920 00001D28 E8464C                  	call	GETTHISDRV		; Get CDS structure
  7921 00001D2B 7223                    	JC	short ISNODRV 		; no valid drive
  7922 00001D2D C43E[3A05]              	LES	DI,[THISCDS]		; check for net CDS
  7923                                  	;test	word [es:di+43h],8000h
  7924 00001D31 26F745430080            	TEST	word [ES:DI+curdir.flags],curdir_isnet
  7925 00001D37 7517                    	JNZ	short ISNODRV 		; No DPB to point at on NET stuff
  7926 00001D39 E83003                  	call	EcritDisk
  7927 00001D3C E87C3E                  	call	FATREAD_CDS		; Force Media Check and return DPB
  7928 00001D3F E83203                  	call	LcritDisk
  7929 00001D42 720C                    	JC	short ISNODRV 		; User FAILed to I 24, only error we
  7930                                  					;   have.
  7931 00001D44 E8C4F8                  	call	Get_User_Stack
  7932                                  	;mov	[si+2],bp
  7933                                  	;mov	[si+0Eh],es
  7934 00001D47 896C02                  	MOV	[SI+user_env.user_BX],BP
  7935 00001D4A 8C440E                  	MOV	[SI+user_env.user_DS],ES
  7936 00001D4D 30C0                    	XOR	AL,AL
  7937 00001D4F C3                      	retn
  7938                                  ISNODRV:
  7939 00001D50 B0FF                    	MOV	AL,-1
  7940 00001D52 C3                      	retn
  7941                                  
  7942                                  ;
  7943                                  ;----------------------------------------------------------------------------
  7944                                  ;
  7945                                  ;**	$Disk_Reset - Flush out Dirty Buffers
  7946                                  ;
  7947                                  ;	$DiskReset flushes and invalidates all buffers.  BUGBUG - do
  7948                                  ;		we really invalidate?  SHould we?  THis screws non-removable
  7949                                  ;		caching.  Maybe CHKDSK relies upon it, though....
  7950                                  ;
  7951                                  ;	ENTRY	none
  7952                                  ;	EXIT	none
  7953                                  ;	USES	all
  7954                                  ;
  7955                                  ;----------------------------------------------------------------------------
  7956                                  ;
  7957                                  
  7958                                  _$DISK_RESET:
  7959 00001D53 16                      	push	ss
  7960 00001D54 1F                      	pop	ds
  7961 00001D55 B0FF                    	MOV	AL,-1
  7962 00001D57 E81203                  	call	EcritDisk
  7963                                  	; MSDOS 6.0
  7964                                  	;or	word [DOS34_FLAG],FROM_DISK_RESET    ;AN000;
  7965 00001D5A E8D041                  	call	FLUSHBUF
  7966                                  	; MSDOS 6.0
  7967                                  	;AND	word [DOS34_FLAG],NO_FROM_DISK_RESET ;AN000;
  7968                                  	;mov	word [SC_STATUS],0	; Throw out secondary cache M041
  7969                                  ;
  7970                                  ; We will "ignore" any errors on the flush, and go ahead and invalidate.  This
  7971                                  ; call doesn't return any errors and it is supposed to FORCE a known state, so
  7972                                  ; let's do it.
  7973                                  ;
  7974                                  ; Invalidate 'last-buffer' used
  7975                                  ;
  7976 00001D5D BBFFFF                  	MOV	BX,-1
  7977 00001D60 891E[2000]              	MOV	[LastBuffer+2],BX
  7978 00001D64 891E[1E00]              	MOV	[LastBuffer],BX
  7979                                  
  7980                                  	; MSDOS 3.3 
  7981                                  	; IBMDOS.COM, Offset 1C66h
  7982                                  	;;;;
  7983 00001D68 C536[3800]              	lds     si,[BUFFHEAD]
  7984 00001D6C B8FF20                  	mov	ax,20FFh	; .buf_ID,    AL = FFh (Free buffer)
  7985                                  				; .buf_flags, AH = 0, reset/clear
  7986                                  DRST_1:
  7987                                  	;mov	[si+4],ax
  7988 00001D6F 894404                  	mov	[si+BUFFINFO.buf_ID],ax
  7989 00001D72 C534                    	lds	si,[SI]
  7990 00001D74 39DE                    	cmp	si,bx ; -1
  7991 00001D76 7409                    	je	short DRST_2
  7992                                  	;mov	[si+4],ax
  7993 00001D78 894404                  	mov	[si+BUFFINFO.buf_ID],ax
  7994 00001D7B C534                    	lds	si,[SI]
  7995 00001D7D 39DE                    	cmp	si,bx
  7996 00001D7F 75EE                    	jne	short DRST_1
  7997                                  	;;;;
  7998                                  DRST_2:
  7999 00001D81 E8F002                  	call	LcritDisk
  8000                                  
  8001                                  	; 20/05/2019
  8002                                  	;MOV	AX,-1
  8003                                  	;CallInstall NetFlushBuf,MultNET,32,AX,AX
  8004                                  	;mov	ax,0FFFFh
  8005                                  
  8006 00001D84 B82011                  	mov     ax,1120h
  8007 00001D87 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - FLUSH ALL DISK BUFFERS
  8008                                  			; DS = DOS CS
  8009                                  			; Return: CF clear (successful)
  8010 00001D89 C3                      	retn
  8011                                  
  8012                                  	; 19/07/2018 - Retro DOS v3.0
  8013                                  
  8014                                  ;
  8015                                  ;	BREAK <$SetDPB - Create a valid DPB from a user-specified BPB>
  8016                                  ;
  8017                                  ;----------------------------------------------------------------------------
  8018                                  ;
  8019                                  ;**	$SetDPB - Create a DPB
  8020                                  ;
  8021                                  ;	SetDPB Creates a valid DPB from a user-specified BPB
  8022                                  ;
  8023                                  ;	ENTRY	ES:BP Points to DPB
  8024                                  ;		DS:SI Points to BPB
  8025                                  ;	EXIT	DPB setup
  8026                                  ;	USES	ALL but BP, DS, ES
  8027                                  ;
  8028                                  ;----------------------------------------------------------------------------
  8029                                  ;
  8030                                  
  8031                                  ; MSDOS 6.0
  8032 00001D8A 0300                    word3:	dw	3			; M008 -- word value for divides
  8033                                  
  8034                                  ;procedure   $SETDPB,NEAR
  8035                                  
  8036                                  _$SETDPB:
  8037 00001D8C 89EF                    	MOV	DI,BP
  8038 00001D8E 83C702                  	ADD	DI,2			; Skip over dpb_drive and dpb_UNIT
  8039 00001D91 AD                      	LODSW
  8040 00001D92 AB                      	STOSW				; dpb_sector_size
  8041                                  	; MSDOS 6.0
  8042 00001D93 807C0300                	CMP	BYTE [SI+A_BPB.BPB_NUMBEROFFATS-2],0 ; FAT file system drive ;AN000;
  8043 00001D97 7507                    	JNZ	short yesfat			     ; yes		;AN000;
  8044 00001D99 26C6450400              	MOV	BYTE [ES:DI+DPB.FAT_COUNT-4],0
  8045 00001D9E EB50                    	JMP	short setend			     ; NO		;AN000;
  8046                                  yesfat: ; 10/08/2018
  8047 00001DA0 89C2                    	MOV	DX,AX
  8048 00001DA2 AC                      	LODSB
  8049 00001DA3 FEC8                    	DEC	AL
  8050 00001DA5 AA                      	STOSB				; dpb_cluster_mask
  8051 00001DA6 FEC0                    	INC	AL
  8052 00001DA8 30E4                    	XOR	AH,AH
  8053                                  LOG2LOOP:
  8054 00001DAA A801                    	test	AL,1
  8055 00001DAC 7506                    	JNZ	short SAVLOG
  8056 00001DAE FEC4                    	INC	AH
  8057 00001DB0 D0E8                    	SHR	AL,1
  8058 00001DB2 EBF6                    	JMP	SHORT LOG2LOOP
  8059                                  SAVLOG:
  8060 00001DB4 88E0                    	MOV	AL,AH
  8061 00001DB6 AA                      	STOSB				; dpb_cluster_shift
  8062 00001DB7 88C3                    	MOV	BL,AL
  8063 00001DB9 A5                      	MOVSW				; dpb_first_FAT Start of FAT (# of reserved sectors)
  8064 00001DBA AC                      	LODSB
  8065 00001DBB AA                      	STOSB				; dpb_FAT_count Number of FATs
  8066                                  ;	OR	AL,AL			; NONFAT ?				;AN000;
  8067                                  ;	JZ	short setend		; yes, don't do anything                ;AN000;
  8068 00001DBC 88C7                    	MOV	BH,AL
  8069 00001DBE AD                      	LODSW
  8070 00001DBF AB                      	STOSW				; dpb_root_entries Number of directory entries
  8071 00001DC0 B105                    	MOV	CL,5
  8072 00001DC2 D3EA                    	SHR	DX,CL			; Directory entries per sector
  8073 00001DC4 48                      	DEC	AX
  8074 00001DC5 01D0                    	ADD	AX,DX			; Cause Round Up
  8075 00001DC7 89D1                    	MOV	CX,DX
  8076 00001DC9 31D2                    	XOR	DX,DX
  8077 00001DCB F7F1                    	DIV	CX
  8078 00001DCD 89C1                    	MOV	CX,AX			; Number of directory sectors
  8079 00001DCF 47                      	INC	DI
  8080 00001DD0 47                      	INC	DI			; Skip dpb_first_sector
  8081 00001DD1 A5                      	MOVSW			; Total number of sectors in DSKSIZ (temp as dpb_max_cluster)
  8082 00001DD2 AC                      	LODSB
  8083                                  	;mov	[es:bp+16h],al
  8084 00001DD3 26884616                	MOV	[ES:BP+DPB.MEDIA],AL	; Media byte
  8085 00001DD7 AD                      	LODSW				; Number of sectors in a FAT
  8086                                  	;;;
  8087                                  	;MSDOS 6.0
  8088                                  	;
  8089                                  	;STOSW		; DPB.FAT_SIZE	;AC000;;>32mb dpb_FAT_size
  8090                                  	;MOV	DL,BH			;AN000;;>32mb
  8091                                  	;XOR	DH,DH			;AN000;;>32mb
  8092                                  	;MUL	DX			;AC000;;>32mb Space occupied by all FATs
  8093                                  	
  8094                                  	;MSDOS 3.3
  8095                                  	;
  8096 00001DD8 AA                      	STOSB		; DPB.FAT_SIZE
  8097 00001DD9 F6E7                    	MUL	BH
  8098                                  	;;;
  8099                                  	;add	ax,[es:bp+6]
  8100 00001DDB 26034606                	ADD	AX,[ES:BP+DPB.FIRST_FAT]
  8101 00001DDF AB                      	STOSW				; dpb_dir_sector
  8102 00001DE0 01C8                    	ADD	AX,CX			; Add number of directory sectors
  8103                                  	;mov	[es:bp+0Bh],ax
  8104 00001DE2 2689460B                	MOV	[ES:BP+DPB.FIRST_SECTOR],AX
  8105                                  	
  8106                                  	; MSDOS 6.0
  8107 00001DE6 88D9                    	MOV	CL,BL			;F.C. >32mb				;AN000;
  8108                                  	;CMP	WORD [ES:BP+DSKSIZ],0	;F.C. >32mb				;AN000;
  8109                                  	;JNZ	short normal_dpb	;F.C. >32mb				;AN000;
  8110                                  	;XOR	CH,CH			;F.C. >32mb				;AN000;
  8111                                  	;MOV	BX,[SI+A_BPB.BPB_BIGTOTALSECTORS-A_BPB.BPB_SECTORSPERTRACK]	;AN000;
  8112                                  	;MOV	DX,[SI+A_BPB.BPB_BIGTOTALSECTORS-A_BPB.BPB_SECTORSPERTRACK+2]	;AN000;
  8113                                  	;SUB	BX,AX			;AN000;;F.C. >32mb
  8114                                  	;SBB	DX,0			;AN000;;F.C. >32mb
  8115                                  	;OR	CX,CX			;AN000;;F.C. >32mb
  8116                                  	;JZ	short norot		;AN000;;F.C. >32mb
  8117                                  ;rott:					;AN000;;F.C. >32mb
  8118                                  	;CLC				;AN000;;F.C. >32mb
  8119                                  	;RCR	DX,1			;AN000;;F.C. >32mb
  8120                                  	;RCR	BX,1			;AN000;;F.C. >32mb
  8121                                  	;LOOP	rott			;AN000;;F.C. >32mb
  8122                                  ;norot:					;AN000;
  8123                                  	;MOV	AX,BX			;AN000;;F.C. >32mb
  8124                                  	;JMP	short setend		;AN000;;F.C. >32mb
  8125                                  normal_dpb:
  8126                                  	;sub	ax,[es:bp+0Dh]
  8127 00001DE8 262B460D                	SUB	AX,[ES:BP+DSKSIZ]
  8128 00001DEC F7D8                    	NEG	AX			; Sectors in data area
  8129                                  ;;	MOV	CL,BL			; dpb_cluster_shift
  8130 00001DEE D3E8                    	SHR	AX,CL			; Div by sectors/cluster
  8131                                  setend:
  8132                                  
  8133                                  ;	M008 - CAS
  8134                                  ;
  8135 00001DF0 40                      	INC	AX			; +2 (reserved), -1 (count -> max)
  8136                                  ;
  8137                                  ;	There has been a bug in our fatsize calculation for so long
  8138                                  ;	  that we can't correct it now without causing some user to
  8139                                  ;	  experience data loss. There are even cases where allowing
  8140                                  ;	  the number of clusters to exceed the fats is the optimal
  8141                                  ;	  case -- where adding 2 more fat sectors would make the
  8142                                  ;	  data field smaller so that there's nothing to use the extra
  8143                                  ;	  fat sectors for.
  8144                                  ;
  8145                                  ;	Note that this bug had very minor known symptoms. CHKDSK would
  8146                                  ;	  still report that there was a cluster left when the disk was
  8147                                  ;	  actually full. Very graceful failure for a corrupt system
  8148                                  ;	  configuration. There may be worse cases that were never
  8149                                  ;	  properly traced back to this bug. The problem cases only
  8150                                  ;	  occurred when partition sizes were very near FAT sector
  8151                                  ;	  rounding boundaries, which were rare cases.
  8152                                  ;
  8153                                  ;	Also, it's possible that some third-party partition program might
  8154                                  ;	  create a partition that had a less-than-perfect FAT calculation
  8155                                  ;	  scheme. In this hypothetical case, the number of allocation
  8156                                  ;	  clusters which don't actually have FAT entries to represent
  8157                                  ;	  them might be larger and might create a more catastrophic
  8158                                  ;	  failure. So we'll provide the safeguard of limiting the
  8159                                  ;	  max_cluster to the amount that will fit in the FATs.
  8160                                  ;
  8161                                  ;	ax = maximum legal cluster, ES:BP -> dpb
  8162                                  
  8163                                  ;	make sure the number of fat sectors is actually enough to
  8164                                  ;	  hold that many clusters. otherwise, back the number of
  8165                                  ;	  clusters down
  8166                                  
  8167                                  	; 19/07/2018 - Retro DOS v3.0
  8168                                  	; MSDOS 6.0
  8169 00001DF1 89C3                    	mov	bx,ax			; remember calculated # clusters
  8170                                  	;;mov	ax,[ES:BP+0Fh]
  8171                                  	;mov	ax,[ES:BP+DPB.FAT_SIZE]
  8172                                  	; 01/08/2018 (MSDOS 3.3)
  8173 00001DF3 268A460F                	mov	al,[ES:BP+DPB.FAT_SIZE]
  8174 00001DF7 30E4                    	xor	ah,ah 	
  8175 00001DF9 26F76602                	mul	word [ES:BP+DPB.SECTOR_SIZE] ; how big is the FAT?
  8176 00001DFD 81FBF60F                	cmp	bx,4096-10		; test for 12 vs. 16 bit fat
  8177 00001E01 720D                    	jb	short setend_fat12
  8178 00001E03 D1EA                    	shr	dx,1
  8179                                  ;cs3 7/2/92
  8180 00001E05 751C                    	jnz	short setend_faterr	; some bonehead gave us more fatspace
  8181                                  ;					; than enough for the maximum FAT,
  8182                                  ;					; so go ahead and use the calculated
  8183                                  ;					; number of clusters.
  8184                                  ;cs3 7/2/92
  8185                                  
  8186 00001E07 D1D8                    	rcr	ax,1			; find number of entries
  8187 00001E09 3DF70F                  	cmp	ax,4096-10+1		; would this truncation move us
  8188                                  ;					;  into 12-bit fatland?
  8189 00001E0C 7215                    	jb	short setend_faterr	; then go ahead and let the
  8190                                  ;					;  inconsistency pass through
  8191                                  ;					;  rather than lose data by
  8192                                  ;					;  correcting the fat type
  8193 00001E0E EB0E                    	jmp	short setend_fat16
  8194                                  
  8195                                  setend_fat12:
  8196 00001E10 01C0                    	add	ax,ax			; (fatsiz*2)/3 = # of fat entries
  8197 00001E12 11D2                    	adc	dx,dx
  8198                                  ;cs3 7/2/92
  8199 00001E14 83FA03                  	cmp	dx,3			; if our fatspace is WAY more than
  8200 00001E17 730A                    	jnb	short setend_faterr	; we need, we may get an overflow
  8201                                  ;					; here.  Check for it and use
  8202                                  ;					; the calcuated size in this case.
  8203                                  ;cs3 7/2/92
  8204 00001E19 2EF736[8A1D]            	div	word [cs:word3]
  8205                                  
  8206                                  setend_fat16:
  8207 00001E1E 48                      	dec	ax			; limit at 1
  8208 00001E1F 39D8                    	cmp	ax,bx			; is fat big enough?
  8209 00001E21 7602                    	jbe	short setend_fat	; use max value that'll fit
  8210                                  
  8211                                  setend_faterr:
  8212 00001E23 89D8                    	mov	ax,bx			; use calculated value
  8213                                  
  8214                                  setend_fat:
  8215                                  
  8216                                  ;	now ax = maximum legal cluster
  8217                                  
  8218                                  ;	end M008
  8219                                  
  8220                                  	;mov	[es:bp+0Dh], ax
  8221 00001E25 2689460D                	MOV	[ES:BP+DPB.MAX_CLUSTER],AX
  8222                                  	;mov	word [es:bp+1Ch],0  ; MSDOS 3.3
  8223 00001E29 26C7461C0000            	MOV	word [ES:BP+DPB.NEXT_FREE],0 
  8224                                  					; Init so first ALLOC starts at
  8225                                  					; begining of FAT
  8226                                  	;mov	word [es:bp+1Eh],-1 ; MSDOS 3.3
  8227 00001E2F 26C7461EFFFF            	MOV	word [ES:BP+DPB.FREE_CNT],-1 ; current count is invalid.
  8228                                  
  8229 00001E35 C3                      	retn
  8230                                  
  8231                                  ;EndProc $SETDPB
  8232                                  
  8233                                  
  8234                                  ;BREAK <$Create_Process_Data_Block,SetMem -- Set up process data block>
  8235                                  
  8236                                  ;
  8237                                  ;----------------------------------------------------------------------------
  8238                                  ;
  8239                                  ;**	$Dup_PDB
  8240                                  ;
  8241                                  ; Inputs:   DX is new segment address of process
  8242                                  ;	    SI is end of new allocation block
  8243                                  ;
  8244                                  ;----------------------------------------------------------------------------
  8245                                  ;
  8246                                  
  8247                                  _$DUP_PDB:
  8248                                  
  8249                                  ;hkn;	CreatePDB would have a CS override. This is not valid.
  8250                                  ;hkn;	Must set up ds in order to access CreatePDB. Also SS is 
  8251                                  ;hkn;	has been assumed to be NOTHING. It may not have DOSDATA.
  8252                                  
  8253 00001E36 2EC606[5003]FF          	MOV	byte [CS:CreatePDB],0FFH  ; indicate a new process
  8254 00001E3C 2E8E1E[DE02]            	MOV	DS,[CS:CurrentPDB]
  8255 00001E41 56                      	PUSH	SI
  8256 00001E42 EB0A                    	JMP	SHORT CreateCopy
  8257                                  
  8258                                  ;
  8259                                  ;----------------------------------------------------------------------------
  8260                                  ;
  8261                                  ; Inputs:
  8262                                  ;	DX = Segment number of new base
  8263                                  ; Function:
  8264                                  ;	Set up program base and copy term and ^C from int area
  8265                                  ; Returns:
  8266                                  ;	None
  8267                                  ; Called at DOS init
  8268                                  ;
  8269                                  ;----------------------------------------------------------------------------
  8270                                  ;
  8271                                  
  8272                                  _$CREATE_PROCESS_DATA_BLOCK:
  8273                                  			; Offset 1D02h in IBMDOS.COM (MSDOS 3.3), 1987
  8274 00001E44 E8C4F7                  	CALL	Get_User_Stack
  8275                                  	;mov	ds,[si+14h]
  8276 00001E47 8E5C14                  	MOV	DS,[SI+user_env.user_CS]
  8277                                  	;push	word [2]
  8278 00001E4A FF360200                	PUSH	word [PDB.BLOCK_LEN]
  8279                                  CreateCopy:
  8280 00001E4E 8EC2                    	MOV	ES,DX
  8281                                  
  8282 00001E50 31F6                    	XOR	SI,SI			; copy entire PDB
  8283 00001E52 89F7                    	MOV	DI,SI
  8284 00001E54 B98000                  	MOV	CX,80H
  8285 00001E57 F3A5                    	REP	MOVSW
  8286                                  
  8287                                  ; DOS 3.3 7/9/86
  8288                                  
  8289                                  	;mov	cx,20
  8290                                  	;MOV	CX,FILPERPROC		; copy handles in case of
  8291 00001E59 B114                    	mov	cl,FILPERPROC ; 06/07/2019
  8292                                  	;mov	di,18h
  8293 00001E5B BF1800                  	MOV	DI,PDB.JFN_TABLE	; Set Handle Count has been issued
  8294 00001E5E 1E                      	PUSH	DS
  8295                                  	;lds	si,[34h]
  8296 00001E5F C5363400                	LDS	SI,[PDB.JFN_Pointer]
  8297 00001E63 F3A4                    	REP	MOVSB
  8298 00001E65 1F                      	POP	DS
  8299                                  
  8300                                  ; DOS 3.3 7/9/86
  8301                                  
  8302                                  	;test	byte [cs:CreatePDB],0FFh
  8303 00001E66 2E803E[5003]00          	cmp	byte [CS:CreatePDB],0	; Shall we create a process?
  8304 00001E6C 744A                    	JZ	short Create_PDB_cont 	; nope, old style call
  8305                                  ;
  8306                                  ; Here we set up for a new process...
  8307                                  ;
  8308                                  
  8309 00001E6E 0E                      	PUSH    CS                      ; Called at DOSINIT time, NO SS
  8310 00001E6F 1F                      	POP     DS
  8311                                  
  8312 00001E70 31DB                    	XOR	BX,BX			; dup all jfns
  8313                                  	;mov	cx,20
  8314                                  	;MOV	CX,FILPERPROC		; only 20 of them
  8315 00001E72 B114                    	mov	cl,FILPERPROC ; 06/07/2019
  8316                                  
  8317                                  Create_dup_jfn:
  8318 00001E74 06                      	PUSH	ES			; save new PDB
  8319 00001E75 E88449                  	call	SFFromHandle		; get sf pointer
  8320 00001E78 B0FF                    	MOV	AL,-1			; unassigned JFN
  8321 00001E7A 7225                    	JC	short CreateStash	; file was not really open
  8322                                  	;test	word [es:di+5],1000h
  8323 00001E7C 26F745050010            	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_no_inherit
  8324 00001E82 751D                    	JNZ	short CreateStash	; if no-inherit bit is set, skip dup.
  8325                                  ;
  8326                                  ; We do not inherit network file handles.
  8327                                  ;
  8328                                  	;mov	ah,[es:di+2]
  8329 00001E84 268A6502                	MOV	AH,[ES:DI+SF_ENTRY.sf_mode]
  8330                                  	;and	ah,0F0h
  8331 00001E88 80E4F0                  	AND	AH,SHARING_MASK
  8332                                  	;cmp	ah,70h
  8333 00001E8B 80FC70                  	CMP	AH,SHARING_NET_FCB
  8334 00001E8E 7411                    	jz	short CreateStash
  8335                                  ;
  8336                                  ; The handle we have found is duplicatable (and inheritable). Perform
  8337                                  ; duplication operation.
  8338                                  ;
  8339 00001E90 893E[3605]              	MOV	[THISSFT],DI
  8340 00001E94 8C06[3805]              	MOV	[THISSFT+2],ES
  8341 00001E98 E83C18                  	call	DOS_DUP 		; signal duplication
  8342                                  ;
  8343                                  ; get the old sfn for copy
  8344                                  ;
  8345 00001E9B E84649                  	call	pJFNFromHandle		; ES:DI is jfn
  8346 00001E9E 268A05                  	MOV	AL,[ES:DI]		; get sfn
  8347                                  ;
  8348                                  ; Take AL (old sfn or -1) and stash it into the new position
  8349                                  ;
  8350                                  CreateStash:
  8351 00001EA1 07                      	POP	ES
  8352                                  	;mov	[es:bx+18h],al
  8353 00001EA2 26884718                	MOV	[ES:BX+PDB.JFN_TABLE],AL ; copy into new place!
  8354 00001EA6 43                      	INC	BX			; next jfn...
  8355 00001EA7 E2CB                    	LOOP	Create_dup_jfn
  8356                                  
  8357 00001EA9 8B1E[DE02]              	MOV	BX,[CurrentPDB]		; get current process
  8358                                  	;mov	[es:bx+16h]
  8359 00001EAD 26891E1600              	MOV	[ES:PDB.PARENT_PID],BX	; stash in child
  8360 00001EB2 8C06[DE02]              	MOV	[CurrentPDB],ES
  8361 00001EB6 8EDB                    	MOV	DS,BX
  8362                                  ;
  8363                                  ; end of new process create
  8364                                  ;
  8365                                  Create_PDB_cont:
  8366 00001EB8 2EC606[5003]00          	MOV     BYTE [CS:CreatePDB],0	; reset flag
  8367 00001EBE 58                      	POP	AX
  8368                                  
  8369                                  	;entry	SETMEM
  8370                                  
  8371                                  ;---------------------------------------------------------------------------
  8372                                  ; Inputs:
  8373                                  ;	AX = Size of memory in paragraphs
  8374                                  ;	DX = Segment
  8375                                  ; Function:
  8376                                  ;	Completely prepares a program base at the
  8377                                  ;	specified segment.
  8378                                  ; Called at DOS init
  8379                                  ; Outputs:
  8380                                  ;	DS = DX
  8381                                  ;	ES = DX
  8382                                  ;	[0] has INT int_abort
  8383                                  ;	[2] = First unavailable segment
  8384                                  ;	[5] to [9] form a long call to the entry point
  8385                                  ;	[10] to [13] have exit address (from int_terminate)
  8386                                  ;	[14] to [17] have ctrl-C exit address (from int_ctrl_c)
  8387                                  ;	[18] to [21] have fatal error address (from int_fatal_abort)
  8388                                  ; DX,BP unchanged. All other registers destroyed.
  8389                                  ;---------------------------------------------------------------------------
  8390                                  
  8391                                  SETMEM:
  8392 00001EBF 31C9                    	XOR	CX,CX
  8393 00001EC1 8ED9                    	MOV	DS,CX
  8394 00001EC3 8EC2                    	MOV	ES,DX
  8395                                  	;mov	si,88h
  8396 00001EC5 BE8800                  	MOV	SI,addr_int_terminate
  8397                                  	;mov	di,10
  8398 00001EC8 BF0A00                  	MOV	DI,SAVEXIT
  8399                                  	;MOV	CX,6
  8400 00001ECB B106                    	mov	cl,6 ; 06/07/2019
  8401 00001ECD F3A5                    	REP	MOVSW
  8402 00001ECF 26A30200                	MOV	[ES:2],AX
  8403 00001ED3 29D0                    	SUB	AX,DX
  8404 00001ED5 3DFF0F                  	CMP	AX,MAXDIF ; 0FFFh
  8405 00001ED8 7603                    	JBE	short HAVDIF
  8406 00001EDA B8FF0F                  	MOV	AX,MAXDIF
  8407                                  HAVDIF:
  8408 00001EDD 83E810                  	SUB	AX,10H			; Allow for 100h byte "stack"
  8409 00001EE0 BB0C00                  	MOV	BX,ENTRYPOINTSEG	;	in .COM files
  8410 00001EE3 29C3                    	SUB	BX,AX
  8411 00001EE5 B104                    	MOV	CL,4
  8412 00001EE7 D3E0                    	SHL	AX,CL
  8413 00001EE9 8EDA                    	MOV	DS,DX
  8414                                  
  8415                                  	; (MSDOS 6.0 note)
  8416                                  	;
  8417                                  	; The address in BX:AX will be F01D:FEF0 if there is 64K or more 
  8418                                  	; memory in the system. This is equivalent to 0:c0 if A20 is OFF.
  8419                                  	; If DOS is in HMA this equivalence is no longer valid as A20 is ON.
  8420                                  	; But the BIOS which now resides in FFFF:30 has 5 bytes in FFFF:D0
  8421                                  	; (F01D:FEF0) which is the same as the ones in 0:C0, thereby 
  8422                                  	; making this equvalnce valid for this particular case. If however
  8423                                  	; there is less than 64K remaining the address in BX:AX will not 
  8424                                  	; be the same as above. We will then stuff 0:c0, the call 5 address
  8425                                  	; into the PSP.
  8426                                  	;
  8427                                  	; Therefore for the case where there is less than 64K remaining in 
  8428                                  	; the system old CPM Apps that look at PSP:6 to determine memory
  8429                                  	; requirements will not work. Call 5, however will continue to work
  8430                                  	; for all cases.
  8431                                  	;
  8432                                  
  8433                                  	;mov	[6],ax
  8434                                  	;mov	[8],bx
  8435                                  
  8436 00001EEB A30600                  	MOV	[PDB.CPM_CALL+1],AX
  8437 00001EEE 891E0800                	MOV	[PDB.CPM_CALL+3],BX
  8438                                  
  8439                                  	;cmp	ax,WRAPOFFSET		; Q: does the system have >= 64k of
  8440                                  	;				;    memory left
  8441                                  	;je	short addr_ok		; Y: the above calculated address is
  8442                                  	;				;    OK
  8443                                  	;				; N: 
  8444                                  
  8445                                  	;MOV	WORD [PDB.CPM_CALL+1],0c0h
  8446                                  	;MOV	WORD [PDB.CPM_CALL+3],0
  8447                                  
  8448                                  ;addr_ok:
  8449                                  
  8450                                  	;mov	word [0],20CDh
  8451 00001EF2 C7060000CD20            	MOV	word [PDB.EXIT_CALL],(int_abort*256) + mi_INT
  8452                                  	;mov	byte [5],9Ah
  8453 00001EF8 C60605009A              	MOV	BYTE [PDB.CPM_CALL],mi_Long_CALL
  8454                                  	;mov	word [50h],21CDh
  8455 00001EFD C7065000CD21            	MOV	WORD [PDB.CALL_SYSTEM],(int_command*256) + mi_INT
  8456                                  	;mov	byte [52h],0CBh
  8457 00001F03 C6065200CB              	MOV	BYTE [PDB.CALL_SYSTEM+2],mi_Long_RET
  8458                                  	;mov	word [34h],18h
  8459 00001F08 C70634001800            	MOV	WORD [PDB.JFN_Pointer],PDB.JFN_TABLE
  8460                                  	;mov	word [36h],ds
  8461 00001F0E 8C1E3600                	MOV	WORD [PDB.JFN_Pointer+2],DS
  8462                                  	;mov	word [32h],20
  8463 00001F12 C70632001400            	MOV	WORD [PDB.JFN_Length],FILPERPROC
  8464                                  ;
  8465                                  ; The server runs several PDB's without creating them VIA EXEC.  We need to
  8466                                  ; enumerate all PDB's at CPS time in order to find all references to a
  8467                                  ; particular SFT.  We perform this by requiring that the server link together
  8468                                  ; for us all sub-PDB's that he creates.  The requirement for us, now, is to
  8469                                  ; initialize this pointer.
  8470                                  ;
  8471                                   	;mov	word [38h],-1
  8472 00001F18 C7063800FFFF            	MOV	word [PDB.Next_PDB],-1
  8473                                  	;mov	word [3Ah],-1
  8474 00001F1E C7063A00FFFF            	MOV	word [PDB.Next_PDB+2],-1
  8475                                  
  8476                                  			; Set the real version number in the PSP - 5.00
  8477                                  	;mov	[ES:PDB.Version],(MINOR_VERSION*256)+MAJOR_VERSION
  8478                                  
  8479 00001F24 C3                      	retn
  8480                                  
  8481                                  ;============================================================================
  8482                                  ; IBMDOS.COM (MSDOS 3.3 KERNEL), 1987 - Offset 1DE6h
  8483                                  ;============================================================================
  8484                                  ; 19/07/2018 - Retro DOS v3.0
  8485                                  
  8486                                  FETCHI_CHECK:
  8487 00001F25 9C                      	pushf
  8488 00001F26 2E813E[8F0F]7258        	cmp	word [cs:FETCHI_TAG], 5872h
  8489 00001F2D 7403                    	jz      short FETCHI_CHK_RETN
  8490 00001F2F E84F54                  	call    DOSINIT
  8491                                  FETCHI_CHK_RETN:
  8492 00001F32 9D                      	popf
  8493 00001F33 C3                      	retn
  8494                                  
  8495                                  ;============================================================================
  8496                                  ; MISC2.ASM, MSDOS 6.0, 1991
  8497                                  ;============================================================================
  8498                                  ; 20/07/2018 - Retro DOS v3.0
  8499                                  
  8500                                  ; Break <STRCMP - compare two ASCIZ strings DS:SI to ES:DI>
  8501                                  ;----------------------------------------------------------------------------
  8502                                  ;
  8503                                  ;   Strcmp - compare ASCIZ DS:SI to ES:DI. Case INSENSITIVE. '/' = '\'
  8504                                  ;		Strings of different lengths don't match.
  8505                                  ;   Inputs:	DS:SI - pointer to source string  ES:DI - pointer to dest string
  8506                                  ;   Outputs:	Z if strings same, NZ if different
  8507                                  ;   Registers modified: NONE
  8508                                  ;----------------------------------------------------------------------------
  8509                                  
  8510                                  StrCmp:
  8511 00001F34 56                      	push	si
  8512 00001F35 57                      	push	di
  8513 00001F36 50                      	push	ax
  8514                                  
  8515                                  Cmplp:
  8516 00001F37 AC                      	LODSB
  8517 00001F38 E8D136                  	call	UCase			; convert to upper case
  8518 00001F3B E80A37                  	call	PATHCHRCMP		; convert / to 	MOV	AH,AL
  8520 00001F3E 268A05                  	MOV	AL,[ES:DI]
  8521 00001F41 47                      	INC	DI
  8522 00001F42 E8C736                  	call	UCase			; convert to upper case
  8523 00001F45 E80037                  	call	PATHCHRCMP		; convert / to 	CMP	AH,AL
  8525 00001F48 7504                    	JNZ	short PopRet		; Strings dif
  8526                                  Tend:
  8527 00001F4A 08C0                    	OR	AL,AL
  8528 00001F4C 75E9                    	JNZ	short Cmplp		; More string
  8529                                  PopRet:
  8530 00001F4E 58                      	pop	ax
  8531 00001F4F 5F                      	pop	di
  8532 00001F50 5E                      	pop	si
  8533 00001F51 C3                      	retn
  8534                                  
  8535                                  ;Break <STRCPY - copy ASCIZ string from DS:SI to ES:DI>
  8536                                  ;----------------------------------------------------------------------------
  8537                                  ;
  8538                                  ;   Strcpy - copy an ASCIZ string from DS:SI to ES:DI and make uppercase
  8539                                  ;   FStrcpy - copy an ASCIZ string from DS:SI to ES:DI.  no modification of
  8540                                  ;	characters.
  8541                                  ;
  8542                                  ;   Inputs:	DS:SI - pointer to source string
  8543                                  ;		ES:DI - pointer to destination string
  8544                                  ;   Outputs:	ES:DI point byte after nul byte at end of dest string
  8545                                  ;		DS:SI point byte after nul byte at end of source string
  8546                                  ;   Registers modified: SI,DI
  8547                                  ;----------------------------------------------------------------------------
  8548                                  
  8549                                  StrCpy:
  8550 00001F52 50                      	push	ax
  8551                                  CPYLoop:
  8552 00001F53 AC                      	LODSB
  8553 00001F54 E8B536                  	call	UCase			; convert to upper case
  8554 00001F57 E8EE36                  	call	PATHCHRCMP		; convert / to \ ;
  8555 00001F5A AA                      	STOSB
  8556                                  Tend2:
  8557 00001F5B 08C0                    	OR	AL,AL
  8558 00001F5D 75F4                    	JNZ	short CPYLoop
  8559 00001F5F 58                      	pop	ax
  8560 00001F60 C3                      	retn
  8561                                  
  8562                                  ;----------------------------------------------------------------------------
  8563                                  ; Procedure Name : FStrCpy
  8564                                  ;----------------------------------------------------------------------------
  8565                                  
  8566                                  FStrCpy:
  8567 00001F61 50                      	push	ax
  8568                                  FCPYLoop:
  8569 00001F62 AC                      	LODSB
  8570 00001F63 AA                      	STOSB
  8571 00001F64 08C0                    	OR	AL,AL
  8572 00001F66 75FA                    	JNZ	short FCPYLoop
  8573 00001F68 58                      	pop	ax
  8574 00001F69 C3                      	retn
  8575                                  
  8576                                  ; 20/07/2018 - Retro DOS v3.0
  8577                                  ;----------------------------------------------------------------------------
  8578                                  ; UCase, IBMDOS.COM (MSDOS 3.3), 1987 - Offset 1E2Fh
  8579                                  ;----------------------------------------------------------------------------
  8580                                  ;
  8581                                  ;UCase:	
  8582                                  ;	call	_UCase	 ; Offset 5518h (GetLet, Offset 5517h)
  8583                                  ;	retn
  8584                                  
  8585                                  ;Break <StrLen - compute length of string ES:DI>
  8586                                  ;----------------------------------------------------------------------------
  8587                                  ;**	StrLen - Compute Length of String
  8588                                  ;
  8589                                  ;	StrLen computes the length of a string, including the trailing 00
  8590                                  ;
  8591                                  ;	ENTRY	(es:di) = address of string
  8592                                  ;	EXIT	(cx) = size of string
  8593                                  ;	USES	cx, flags
  8594                                  ;----------------------------------------------------------------------------
  8595                                  
  8596                                  StrLen:
  8597 00001F6A 57                      	push	di
  8598 00001F6B 50                      	push	ax
  8599                                  	;MOV	CX,-1
  8600 00001F6C B9FFFF                  	mov	cx,65535
  8601 00001F6F 30C0                    	XOR	AL,AL
  8602 00001F71 F2AE                    	REPNE	SCASB
  8603 00001F73 F7D1                    	NOT	CX
  8604 00001F75 58                      	pop	ax
  8605 00001F76 5F                      	pop	di
  8606 00001F77 C3                      	retn
  8607                                  
  8608                                  ;----------------------------------------------------------------------------
  8609                                  ;**	DStrLen - Compute Length of String
  8610                                  ;
  8611                                  ;	ENTRY	(ds:si) = address of string
  8612                                  ;	EXIT	(cx) = size of string, including trailing NUL
  8613                                  ;	USES	cx, flags
  8614                                  ;----------------------------------------------------------------------------
  8615                                  
  8616                                  DStrLen:	; BUGBUG - this guy is a pig, who uses him?
  8617 00001F78 E80700                  	CALL	XCHGP
  8618 00001F7B E8ECFF                  	CALL	StrLen
  8619 00001F7E E80100                  	CALL	XCHGP
  8620 00001F81 C3                      	retn
  8621                                  
  8622                                  ;----------------------------------------------------------------------------
  8623                                  ;**	XCHGP - Exchange Source and Destination Pointers
  8624                                  ;
  8625                                  ;	XCHGP exchanges (DS:SI) and (ES:DI)
  8626                                  ;
  8627                                  ;	ENTRY	none
  8628                                  ;	EXIT	pairs exchanged
  8629                                  ;	USES	SI, DI, DS, ES
  8630                                  ;----------------------------------------------------------------------------
  8631                                  
  8632                                  XCHGP:
  8633 00001F82 1E                      	push	ds
  8634 00001F83 06                      	push	es
  8635 00001F84 1F                      	pop	ds
  8636 00001F85 07                      	pop	es
  8637 00001F86 87F7                    	XCHG	SI,DI
  8638                                  xchgp_retn:
  8639 00001F88 C3                      	retn
  8640                                  
  8641                                  ;Break	<Idle - wait for a specified amount of time>
  8642                                  ;----------------------------------------------------------------------------
  8643                                  ;
  8644                                  ;   Idle - when retrying an operation due to a lock/sharing violation,
  8645                                  ;   	   we spin until RetryLoop is exhausted.
  8646                                  ;
  8647                                  ;   Inputs:	RetryLoop is the number of times we spin
  8648                                  ;   Outputs:	Wait
  8649                                  ;   Registers modified: none
  8650                                  ;----------------------------------------------------------------------------
  8651                                  
  8652                                  Idle:
  8653                                  	;test	byte [SS:FSHARING],0FFh
  8654 00001F89 36803E[0D05]00          	cmp	byte [SS:FSHARING],0	;hkn; SS override
  8655                                  	;retnz
  8656 00001F8F 75F7                    	jnz	short xchgp_retn
  8657                                  	;SAVE	<CX>
  8658 00001F91 51                      	push	cx
  8659 00001F92 368B0E[1C00]            	MOV	CX,[ss:RetryLoop]	;hkn; SS override
  8660 00001F97 E308                    	JCXZ	Idle3
  8661                                  Idle1:	
  8662 00001F99 51                      	PUSH	CX
  8663 00001F9A 31C9                    	XOR	CX,CX
  8664                                  Idle2:	
  8665 00001F9C E2FE                    	LOOP	Idle2
  8666 00001F9E 59                      	POP	CX
  8667 00001F9F E2F8                    	LOOP	Idle1
  8668                                  Idle3:	
  8669                                  	;RESTORE <CX>
  8670 00001FA1 59                      	pop	cx
  8671 00001FA2 C3                      	retn
  8672                                  
  8673                                  ;Break	<TableDispatch - dispatch to a table>
  8674                                  ;----------------------------------------------------------------------------
  8675                                  ;
  8676                                  ;   TableDispatch - given a table and an index, jmp to the approptiate
  8677                                  ;   routine.  Preserve all input registers to the routine.
  8678                                  ;
  8679                                  ;   Inputs:	Push	return address
  8680                                  ;		Push	Table address
  8681                                  ;		Push	index (byte)
  8682                                  ;   Outputs:	appropriate routine gets jumped to.
  8683                                  ;		return indicates invalid index
  8684                                  ;   Registers modified: none.
  8685                                  ;----------------------------------------------------------------------------
  8686                                  
  8687                                  struc TFrame	 ; TableFrame
  8688 00000000 ????                    .OldBP:	 resw 1  ; 0
  8689 00000002 ????                    .OldRet: resw 1  ; 2
  8690 00000004 ??                      .Index:	 resb 1  ; 4
  8691 00000005 ??                      .Pad:	 resb 1  ; 5  
  8692 00000006 ????                    .Tab:	 resw 1  ; 6
  8693 00000008 ????                    .NewRet: resw 1  ; 8
  8694                                  endstruc
  8695                                  
  8696                                  TableDispatch:
  8697 00001FA3 55                      	PUSH	BP
  8698 00001FA4 89E5                    	MOV	BP,SP
  8699 00001FA6 53                      	PUSH	BX			; save BX
  8700                                  	;mov	bx,[bp+6]
  8701 00001FA7 8B5E06                  	MOV	BX,[BP+TFrame.Tab]	; get pointer to table
  8702 00001FAA 2E8A1F                  	MOV	BL,[CS:BX]		; maximum index
  8703                                  	;cmp	[bp+4],bl
  8704 00001FAD 385E04                  	CMP	[BP+TFrame.Index],BL	; table error?
  8705 00001FB0 7317                    	JAE	short TableError	; yes
  8706                                  	;mov	bl,[bp+4]
  8707 00001FB2 8A5E04                  	MOV	BL,[BP+TFrame.Index]	; get desired table index
  8708 00001FB5 30FF                    	XOR	BH,BH			; convert to word
  8709 00001FB7 D1E3                    	SHL	BX,1			; convert to word pointer
  8710 00001FB9 43                      	INC	BX			; point past first length byte
  8711                                  	; 17/08/2018
  8712                                  	;add	bx,[bp+6]
  8713 00001FBA 035E06                  	ADD	BX,[BP+TFrame.Tab]	; get real offset
  8714 00001FBD 2E8B1F                  	MOV	BX,[CS:BX]		; get contents of table entry
  8715                                  	;mov	[bp+6],bx
  8716 00001FC0 895E06                  	MOV	[BP+TFrame.Tab],BX	; put table entry into return address
  8717 00001FC3 5B                      	POP	BX			; restore BX
  8718 00001FC4 5D                      	POP	BP			; restore BP
  8719 00001FC5 83C404                  	ADD	SP,4			; clean off Index and our return addr
  8720 00001FC8 C3                      	retn				; do operation
  8721                                  TableError:
  8722 00001FC9 5B                      	POP	BX			; restore BX
  8723 00001FCA 5D                      	POP	BP			; restore BP
  8724 00001FCB C20600                  	RETN	6			; clean off Index, Table and RetAddr
  8725                                  
  8726                                  
  8727                                  ;Break	<TestNet - determine if a CDS is for the network>
  8728                                  ;----------------------------------------------------------------------------
  8729                                  ;
  8730                                  ;   TestNet - examine CDS pointed to by ThisCDS and see if it indicates a
  8731                                  ;	network CDS.  This will handle NULL cds also.
  8732                                  ;
  8733                                  ;   Inputs:	ThisCDS points to CDS or NULL
  8734                                  ;   Outputs:	ES:DI = ThisCDS
  8735                                  ;		carry Set => network
  8736                                  ;		carry Clear => local
  8737                                  ;   Registers modified: none.
  8738                                  ;----------------------------------------------------------------------------
  8739                                  
  8740                                  TestNet:
  8741 00001FCE 2EC43E[3A05]            	LES	DI,[CS:THISCDS]
  8742 00001FD3 83FFFF                  	CMP	DI,-1
  8743 00001FD6 7409                    	JZ	short CMCRet		; UNC? carry is clear
  8744                                  	;test	word [es:di+43h],8000h
  8745 00001FD8 26F745430080            	TEST	word [ES:DI+curdir.flags],curdir_isnet
  8746 00001FDE 7501                    	JNZ	short CMCRet		; jump has carry clear
  8747 00001FE0 C3                      	retn				; carry is clear
  8748                                  CMCRet: 
  8749 00001FE1 F5                      	CMC
  8750 00001FE2 C3                      	retn
  8751                                  
  8752                                  ;Break	<IsSFTNet - see if an sft is for the network>
  8753                                  ;----------------------------------------------------------------------------
  8754                                  ;
  8755                                  ;   IsSFTNet - examine SF pointed to by ES:DI and see if it indicates a
  8756                                  ;	network file.
  8757                                  ;
  8758                                  ;   Inputs:	ES:DI point to SFT
  8759                                  ;   Outputs:	Zero set if not network sft
  8760                                  ;		zero reset otherwise
  8761                                  ;		Carry CLEAR!!!
  8762                                  ;   Registers modified: none.
  8763                                  ;----------------------------------------------------------------------------
  8764                                  
  8765                                  IsSFTNet:
  8766                                  	;test	word [es:di+5],8000h
  8767 00001FE3 26F745050080            	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
  8768 00001FE9 C3                      	retn
  8769                                  
  8770                                  ;Break	<FastInit - Initialize FastTable entries >
  8771                                  ;----------------------------------------------------------------------------
  8772                                  ;   DOS 4.00   2/9/87
  8773                                  ;   FastInit  - initialize the FASTXXX routine entry
  8774                                  ;		  in the FastTable
  8775                                  ;
  8776                                  ;   Inputs:	BX = FASTXXX ID ( 1=fastopen )
  8777                                  ;		DS:SI = address of FASTXXX routine entry
  8778                                  ;		   SI = -1 for query only
  8779                                  ;   Outputs:	Carry flag clear, if success
  8780                                  ;		Carry flag set,   if failure
  8781                                  ;
  8782                                  ;
  8783                                  ;----------------------------------------------------------------------------
  8784                                  
  8785                                  ;Procedure FastInit,NEAR
  8786                                  ;	ASSUME	CS:DOSCODE,SS:NOTHING
  8787                                  ;FastInit:
  8788                                  	; MSDOS 6.0
  8789                                  	;hkn; set up es to dosdataseg.
  8790                                  	;push	es
  8791                                  	;getdseg <es>			; es -> dosdata
  8792                                  
  8793                                  	;hkn; FastTable is in DOSDATA
  8794                                  	;MOV	DI,OFFSET DOSDATA:FastTable + 2 ;AN000;FO. points to fastxxx entry
  8795                                  	;DEC	BX				;AN000;FO.;; decrement index
  8796                                  	;MOV	DX,BX				;AN000;FO.;; save bx
  8797                                  	;SHL	BX,1				;AN000;FO.;; times 4 , each entry is DWORD
  8798                                  	;SHL	BX,1				;AN000;FO.
  8799                                  	;ADD	DI,BX				;AN000;FO. index to the entry
  8800                                  	;MOV	AX,WORD PTR ES:[DI+2]		;AN000;FO. get entry segment
  8801                                  ;fcheck: 					;AN000;
  8802                                  	;MOV	CX,CS				;AN000;FO.;; get DOS segment
  8803                                  	;CMP	AX,CX				;AN000;FO.;; first time installed ?
  8804                                  	;JZ	short ok_install			;AN000;FO.;; yes
  8805                                  	;OR	AX,AX				;AN000;FO.;
  8806                                  	;JZ	short ok_install		;AN000;FO.;
  8807                                  	;STC					;AN000;FO.;; already installed !
  8808                                  	;JMP	SHORT FSret			;AN000;FO. set carry
  8809                                  ;ok_install:					;AN000;
  8810                                  	;CMP	SI,-1				;AN000;FO.; Query only ?
  8811                                  	;JZ	short FSret			;AN000;FO.; yes
  8812                                  	;MOV	CX,DS				;AN000;FO.; get FASTXXX entry segment
  8813                                  	;MOV	WORD PTR ES:[DI+2],CX		;AN000;FO.; initialize routine entry
  8814                                  	;MOV	WORD PTR ES:[DI],SI		;AN000;FO.; initialize routine offset
  8815                                  
  8816                                  ;hkn; FastFlg moved to DOSDATA
  8817                                  	;MOV	DI,OFFSET DOSDATA:FastFlg	;AN000;FO.; get addr of FASTXXX flags
  8818                                  	;ADD	DI,DX				;AN000;FO.; index to a FASTXXX flag
  8819                                  	;OR	byte ptr ES:[DI],Fast_yes	;AN000;FO.; indicate installed
  8820                                  FSret:						;AN000;
  8821                                  	;pop	es
  8822                                  	;return					;AN000;FO.
  8823                                  ;EndProc FastInit				;AN000;FO.
  8824                                  
  8825                                  	; MSDOS 3.3
  8826                                  	; IBMDOS.COM (1987) - Offset 1EB3h
  8827                                  FastInit:
  8828 00001FEA BF[430F]                	mov	di,FastTable ; FastOpenTable
  8829 00001FED 2E8B4504                	mov	ax,[cs:di+4]		; Entry segment
  8830 00001FF1 8CCB                    	mov	bx,cs			; get DOS segment
  8831 00001FF3 39D8                    	cmp	ax,bx			; first time installed ?	
  8832 00001FF5 7402                    	je	short ok_install	; yes
  8833 00001FF7 F9                      	stc				; set carry
  8834 00001FF8 C3                      	retn				; (cf=1 means) already installed !
  8835                                  
  8836                                  ok_install:
  8837 00001FF9 BB[430F]                	mov	bx,FastTable ; FastOpenTable
  8838 00001FFC 8CD9                    	mov	cx,ds
  8839                                  	; set address of FASTXXX (FASTOPEN) routine entry
  8840 00001FFE 2E894F04                	mov	[cs:bx+4],cx
  8841 00002002 2E897702                	mov	[cs:bx+2],si
  8842 00002006 C3                      	retn
  8843                                  
  8844                                  ;Break	<FastRet - initial routine in FastOpenTable >
  8845                                  ;----------------------------------------------------------------------------
  8846                                  ;   DOS 3.3   6/10/86
  8847                                  ;   FastRet	- indicate FASTXXXX  not in memory
  8848                                  ;
  8849                                  ;   Inputs:	None
  8850                                  ;   Outputs:	AX = -1 and carry flag set
  8851                                  ;
  8852                                  ;   Registers modified: none.
  8853                                  ;----------------------------------------------------------------------------
  8854                                  
  8855                                  FastRet:
  8856                                  	;mov	ax,-1
  8857                                  	;stc
  8858                                  	;retf
  8859 00002007 F9                      	STC
  8860 00002008 19C0                    	sbb	ax,ax		; (ax) = -1, 'C' set
  8861 0000200A CB                      	RETF
  8862                                  
  8863                                  ;Break	<NLS_OPEN - do $open for NLSFUNC>
  8864                                  ;----------------------------------------------------------------------------
  8865                                  ;   DOS 3.3   6/10/86
  8866                                  ;   NLS_OPEN	- call $OPEN for NLSFUNC
  8867                                  ;
  8868                                  ;   Inputs:	Same input as $OPEN except CL = mode
  8869                                  ;   Outputs:	same output as $OPEN
  8870                                  ;
  8871                                  ;----------------------------------------------------------------------------
  8872                                  
  8873                                  ;hkn; NOTE! SS MUST HAVE BEEN SET UP TO DOSDATA BY THE TIME THESE
  8874                                  ;hkn; NLS FUNCTIONS ARE CALLED!!! THERE FORE WE WILL USE SS OVERRIDES
  8875                                  ;hkn; IN ORDER TO ACCESS DOS DATA VARIABLES!
  8876                                  
  8877                                  NLS_OPEN:
  8878                                  ;	MOV	BL,[CPSWFLAG]	 ; disable code page matching logic
  8879                                  ;	MOV	BYTE [CPSWFLAG],0
  8880                                  ;	PUSH	BX		 ; save current state
  8881                                  
  8882 0000200B 88C8                    	MOV	AL,CL		 ; set up correct interface for $OPEN
  8883 0000200D E82650                  	call	_$OPEN
  8884                                  
  8885                                   ;	POP	BX		 ; restore current state
  8886                                   ;	MOV	[CPSWFLAG],BL
  8887 00002010 C3                      	RETN
  8888                                  
  8889                                  ;Break	<NLS_LSEEK - do $LSEEK for NLSFUNC>
  8890                                  ;----------------------------------------------------------------------------
  8891                                  ;   DOS 3.3   6/10/86
  8892                                  ;   NLS_LSEEK	- call $LSEEK for NLSFUNC
  8893                                  ;
  8894                                  ;   Inputs:	BP = open mode
  8895                                  ;   Outputs:	same output as $LSEEK
  8896                                  ;
  8897                                  ;----------------------------------------------------------------------------
  8898                                  
  8899                                  NLS_LSEEK:
  8900                                  	;PUSH	word [SS:USER_SP] ; save user stack
  8901                                  	;PUSH	word [SS:USER_SS]
  8902 00002011 2EFF36[1E05]            	PUSH	word [CS:USER_SP] ; save user stack
  8903 00002016 2EFF36[2005]            	PUSH	word [CS:USER_SS]
  8904 0000201B E81000                  	CALL	Fake_User_Stack
  8905 0000201E 89E8                    	MOV	AX,BP		; set up correct interface for $LSEEK
  8906 00002020 E8124F                  	call	_$LSEEK
  8907                                  	;POP	word [SS:USER_SS] ; restore user stack
  8908                                  	;POP	word [SS:USER_SP]
  8909 00002023 2E8F06[2005]            	POP	word [cs:USER_SS] ; restore user stack
  8910 00002028 2E8F06[1E05]            	POP	word [cs:USER_SP]
  8911 0000202D C3                      	RETN
  8912                                  
  8913                                  ;Break	<Fake_User_Stack - save user stack>
  8914                                  ;----------------------------------------------------------------------------
  8915                                  ;   DOS 3.3   6/10/86
  8916                                  ;   Fake_User_Stack - save user stack pointer
  8917                                  ;
  8918                                  ;----------------------------------------------------------------------------
  8919                                  
  8920                                  Fake_User_Stack:
  8921                                  	;MOV	AX,[ss:USER_SP_2F] ; replace with INT 2F stack
  8922 0000202E 2EA1[710F]              	MOV	AX,[cs:USER_SP_2F]
  8923                                  	;MOV	[SS:USER_SP],AX
  8924 00002032 2EA3[1E05]              	MOV	[CS:USER_SP],AX
  8925 00002036 8CC8                    	MOV	AX,CS
  8926                                  	;mov	ax,ss
  8927                                  	;MOV	[SS:USER_SS],AX
  8928 00002038 2EA3[2005]              	MOV	[CS:USER_SS],AX
  8929 0000203C C3                      	RETN
  8930                                  
  8931                                  ;Break	<GetDevList - get device header list pointer>
  8932                                  ;----------------------------------------------------------------------------
  8933                                  ;   DOS 3.3   7/25/86
  8934                                  ;   GetDevList - get device header list pointer
  8935                                  ;
  8936                                  ;   Output: AX:BX points to the device header list
  8937                                  ;----------------------------------------------------------------------------
  8938                                  
  8939                                  GetDevList:
  8940 0000203D BE[3B0F]                	MOV	SI,SysInitTable
  8941                                  	;LDS	SI,[CS:SI+SYSINITVARS]
  8942 00002040 2EC534                  	LDS	SI,[CS:SI]
  8943                                  	;mov	ax,[si+34]  ; SSYSINITVARS offset 34 = [SI+SYSI.DEV]
  8944                                  	;mov	bx,[si+36]  ; SSYSINITVARS offset 36 = [SI+SYSI.DEV+2]
  8945 00002043 8B4422                  	MOV	AX,[SI+SYSI.DEV]
  8946 00002046 8B5C24                  	MOV	BX,[SI+SYSI.DEV+2]
  8947 00002049 C3                      	RETN
  8948                                  
  8949                                  ;Break	<NLS_IOCTL - do $IOCTL for NLSFUNC   >
  8950                                  ;----------------------------------------------------------------------------
  8951                                  ;   DOS 3.3   7/25/86
  8952                                  ;   NLS_IOCTL	- call $IOCTL for NLSFUNC
  8953                                  ;
  8954                                  ;   Inputs:	BP = function code 0CH
  8955                                  ;   Outputs:	same output as generic $IOCTL
  8956                                  ;
  8957                                  ;----------------------------------------------------------------------------
  8958                                  
  8959                                  NLS_IOCTL:
  8960                                  	;PUSH	word [SS:USER_SP] ; save user stack
  8961                                  	;PUSH	word [SS:USER_SS]
  8962 0000204A 2EFF36[1E05]            	PUSH	word [CS:USER_SP] ; save user stack
  8963 0000204F 2EFF36[2005]            	PUSH	word [CS:USER_SS]
  8964 00002054 E8D7FF                  	CALL	Fake_User_Stack
  8965 00002057 89E8                    	MOV	AX,BP	     ; set up correct interface for $LSEEK
  8966 00002059 E8580F                  	call	_$IOCTL
  8967                                  	;POP	word [SS:USER_SS] ; restore user stack
  8968                                  	;POP	word [SS:USER_SP]
  8969 0000205C 2E8F06[2005]            	POP	word [CS:USER_SS] ; restore user stack
  8970 00002061 2E8F06[1E05]            	POP	word [CS:USER_SP]
  8971 00002066 C3                      	RETN
  8972                                  
  8973                                  ;Break	<NLS_GETEXT- get extended error for NLSFUNC>
  8974                                  ;----------------------------------------------------------------------------
  8975                                  ;   DOS 3.3   7/25/86
  8976                                  ;   NLS_GETEXT	-
  8977                                  ;
  8978                                  ;   Inputs:	none
  8979                                  ;   Outputs:	AX = extended error
  8980                                  ;
  8981                                  ;----------------------------------------------------------------------------
  8982                                  
  8983                                  NLS_GETEXT:
  8984                                  	;MOV	AX,[SS:EXTERR]	 ; return extended error
  8985 00002067 2EA1[D202]              	mov	AX,[CS:EXTERR]
  8986 0000206B C3                      	RETN
  8987                                  
  8988                                  ;============================================================================
  8989                                  ; EcritDisk, LcritDisk, EcritDevice, LCritDevice
  8990                                  ; IBMDOS.COM (MSDOS 3.3), 1987 - Offset 1F36h
  8991                                  ;============================================================================
  8992                                  ; 20/07/2018 - Retro DOS v3.0
  8993                                  
  8994                                  	; MSDOS 3.3
  8995                                  	; 08/08/2018 - Retro DSOS v3.0
  8996                                  EcritMem:
  8997                                  EcritSFT:
  8998                                  	;
  8999                                  EcritDisk:
  9000                                  	;push	ax
  9001 0000206C C3                      	retn
  9002                                  	
  9003 0000206D B80180                  	mov	ax,8001h
  9004 00002070 CD2A                    	int	2Ah	; Microsoft Networks - BEGIN DOS CRITICAL SECTION
  9005                                  			; AL = critical section number (00h-0Fh)
  9006 00002072 58                      	pop	ax
  9007 00002073 C3                      	retn
  9008                                  
  9009                                  	; MSDOS 3.3
  9010                                  	; 08/08/2018 - Retro DSOS v3.0
  9011                                  LcritMem:
  9012                                  LcritSFT:
  9013                                  	;
  9014                                  LcritDisk:
  9015                                  	;push	ax
  9016 00002074 C3                      	retn
  9017                                  	
  9018 00002075 B80181                  	mov	ax,8101h
  9019 00002078 CD2A                    	int	2Ah	; Microsoft Networks - END DOS CRITICAL SECTION
  9020                                  			; AL = critical section number (00h-0Fh)
  9021 0000207A 58                      	pop	ax
  9022 0000207B C3                      	retn
  9023                                  
  9024                                  EcritDevice:
  9025                                  	;push	ax
  9026 0000207C C3                      	retn
  9027                                  	
  9028 0000207D B80280                  	mov	ax,8002h
  9029 00002080 CD2A                    	int	2Ah	; Microsoft Networks - BEGIN DOS CRITICAL SECTION
  9030                                  			; AL = critical section number (00h-0Fh)
  9031 00002082 58                      	pop	ax
  9032 00002083 C3                      	retn
  9033                                  
  9034                                  LcritDevice:
  9035                                  	;push	ax
  9036 00002084 C3                      	retn
  9037                                  	
  9038 00002085 B80281                  	mov	ax,8102h
  9039 00002088 CD2A                    	int	2Ah	; Microsoft Networks - END DOS CRITICAL SECTION
  9040                                  			; AL = critical section number (00h-0Fh)
  9041 0000208A 58                      	pop	ax
  9042 0000208B C3                      	retn
  9043                                  
  9044                                  ;============================================================================
  9045                                  ; CRIT.ASM, MSDOS 6.0, 1991
  9046                                  ;============================================================================
  9047                                  ; 20/07/2018 - Retro DOS v3.0
  9048                                  
  9049                                  ; (DOSMAC.INC, MSDOS 6.0, 1991)
  9050                                  
  9051                                  ; Some old versions of the 80286 have a bug in the chip.  The popf
  9052                                  ; instruction will enable interrupts.  Therefore in a section of code with
  9053                                  ; interrupts disabled and you need a popf instruction use the 'popff'
  9054                                  ; macro instead.
  9055                                  ;
  9056                                  
  9057                                  ;%macro POPFF 0
  9058                                  ;	jmp	$+3
  9059                                  ;	iret
  9060                                  ;	push	cs
  9061                                  ;	call	$-2
  9062                                  ;%endmacro
  9063                                  
  9064                                  ;**	CRIT.ASM - Critical Section Routines
  9065                                  ;
  9066                                  ;	Critical section handlers
  9067                                  ;
  9068                                  ;	Modification history:
  9069                                  ;
  9070                                  ;	    Created: ARR 30 March 1983
  9071                                  
  9072                                  ;
  9073                                  ;SR; This variable is set when the redir installs itself
  9074                                  ;
  9075                                  	;I_need redir_patch,BYTE
  9076                                  
  9077                                  ; Break	<Critical section handlers>
  9078                                  
  9079                                  ;   Each handler must leave everything untouched; including flags!
  9080                                  ;
  9081                                  ;   Sleaze for time savings:  first instruction is a return.  This is patched
  9082                                  ;   by the sharer to be a PUSH AX to complete the correct routines.
  9083                                  
  9084                                  ;Procedure  EcritDisk,NEAR
  9085                                  	;public  EcritMem
  9086                                  	;public  EcritSFT
  9087                                  ;ECritMEM    LABEL   NEAR
  9088                                  ;ECritSFT    LABEL   NEAR
  9089                                  
  9090                                  ;
  9091                                  ;SR; Check if critical section is to be entered
  9092                                  ;
  9093                                  
  9094                                  ;	pushf
  9095                                  ;	cmp	ss:[redir_patch],0
  9096                                  ;	jz	@f
  9097                                  ;	popff
  9098                                  ;
  9099                                  ;       PUSH    AX
  9100                                  ;	MOV     AX,8000h+critDisk
  9101                                  ;	INT     int_ibm
  9102                                  ;	POP     AX
  9103                                  ;	return
  9104                                  ;@@:
  9105                                  ;	popff
  9106                                  ;	ret
  9107                                  ;EndProc EcritDisk
  9108                                  
  9109                                  ;Procedure   LcritDisk,NEAR
  9110                                  ;	public  LcritMem
  9111                                  ;	public  LcritSFT
  9112                                  ;LCritMEM    LABEL   NEAR
  9113                                  ;LCritSFT    LABEL   NEAR
  9114                                  
  9115                                  ;
  9116                                  ;SR; Check if critical section is to be entered
  9117                                  ;
  9118                                  
  9119                                  ;	pushf
  9120                                  ;	cmp	ss:[redir_patch],0
  9121                                  ;	jz	@f
  9122                                  ;	popff
  9123                                  
  9124                                  ;       PUSH    AX
  9125                                  ;	MOV     AX,8100h+critDisk
  9126                                  ;	INT     int_ibm
  9127                                  ;	POP     AX
  9128                                  ;	return
  9129                                  ;@@:
  9130                                  ;	popff
  9131                                  ;	ret
  9132                                  
  9133                                  ;EndProc LcritDisk
  9134                                  
  9135                                  ;Procedure   EcritDevice,NEAR
  9136                                  ;
  9137                                  ;SR; Check if critical section is to be entered
  9138                                  ;
  9139                                  
  9140                                  ;	pushf
  9141                                  ;	cmp	ss:[redir_patch],0
  9142                                  ;	jz	@f
  9143                                  ;	popff
  9144                                  
  9145                                  ;       PUSH    AX
  9146                                  ;	MOV     AX,8000h+critDevice
  9147                                  ;	INT     int_ibm
  9148                                  ;	POP     AX
  9149                                  ;	return
  9150                                  ;@@:
  9151                                  ;	popff
  9152                                  ;	ret
  9153                                  
  9154                                  ;EndProc EcritDevice
  9155                                  
  9156                                  ;Procedure   LcritDevice,NEAR
  9157                                  ;
  9158                                  ;SR; Check if critical section is to be entered
  9159                                  ;
  9160                                  
  9161                                  ;	pushf
  9162                                  ;	cmp	ss:[redir_patch],0
  9163                                  ;	jz	@f
  9164                                  ;	popff
  9165                                  
  9166                                  ;       PUSH    AX
  9167                                  ;	MOV     AX,8100h+critDevice
  9168                                  ;	INT     int_ibm
  9169                                  ;	POP     AX
  9170                                  ;	return
  9171                                  ;@@:
  9172                                  ;	popff
  9173                                  ;	ret
  9174                                  
  9175                                  ;EndProc LcritDevice
  9176                                  
  9177                                  
  9178                                  ;============================================================================
  9179                                  ; CPMIO.ASM, MSDOS 6.0, 1991
  9180                                  ;============================================================================
  9181                                  ; 20/07/2018 - Retro DOS v3.0
  9182                                  
  9183                                  ;============================================================================
  9184                                  ; STDIO.ASM - (MSDOS 2.0)
  9185                                  ;============================================================================
  9186                                  
  9187                                  ;
  9188                                  ; Standard device IO for MSDOS (first 12 function calls)
  9189                                  ;
  9190                                  
  9191                                  ;.xlist
  9192                                  ;.xcref
  9193                                  ;INCLUDE STDSW.ASM
  9194                                  ;INCLUDE DOSSEG.ASM
  9195                                  ;.cref
  9196                                  ;.list
  9197                                  
  9198                                  ;TITLE   STDIO - device IO for MSDOS
  9199                                  ;NAME    STDIO
  9200                                  
  9201                                  ;INCLUDE IO.ASM
  9202                                  
  9203                                  ; ---------------------------------------------------------------------------
  9204                                  ;
  9205                                  ; NOTE for Retro DOS v2.0 :  (ERDOGAN TAN - 13/03/2018)
  9206                                  ;	  I0.ASM is missing in MSDOS 2.0 kernel source code files !!!
  9207                                  ;	  INSTEAD of IO.ASM, I have disassembled IBMDOS.COM (MSDOS 2.0)
  9208                                  ;			    and I have used CPMIO.ASM (MSDOS 6.0 source code)
  9209                                  ;			    to restore MSDOS 2.0 device IO source code 
  9210                                  ;
  9211                                  ;		(STRIN.ASM has '$STD_CON_STRING_INPUT' code.)	
  9212                                  	
  9213                                  ;============================================================================
  9214                                  ; STDIO.ASM - (MSDOS 2.0)
  9215                                  ;============================================================================
  9216                                  
  9217                                  ;
  9218                                  ; Standard device IO for MSDOS (first 12 function calls)
  9219                                  ;
  9220                                  
  9221                                  ;.xlist
  9222                                  ;.xcref
  9223                                  ;INCLUDE STDSW.ASM
  9224                                  ;INCLUDE DOSSEG.ASM
  9225                                  ;.cref
  9226                                  ;.list
  9227                                  
  9228                                  ;TITLE   STDIO - device IO for MSDOS
  9229                                  ;NAME    STDIO
  9230                                  
  9231                                  ;INCLUDE IO.ASM
  9232                                  
  9233                                  ; ---------------------------------------------------------------------------
  9234                                  ;
  9235                                  ; NOTE for Retro DOS v2.0 :  (ERDOGAN TAN - 13/03/2018)
  9236                                  ;	  I0.ASM is missing in MSDOS 2.0 kernel source code files !!!
  9237                                  ;	  INSTEAD of IO.ASM, I have disassembled IBMDOS.COM (MSDOS 2.0)
  9238                                  ;			    and I have used CPMIO.ASM (MSDOS 6.0 source code)
  9239                                  ;			    to restore MSDOS 2.0 device IO source code 
  9240                                  ;
  9241                                  ;		(STRIN.ASM has '$STD_CON_STRING_INPUT' code.)		
  9242                                  ;
  9243                                  ;============================================================================
  9244                                  ; IO.ASM (MSDOS 2.0) (IBMDOS.COM 2.0) - STRIN.ASM (MSDOS 2.0, 19/08/1983)
  9245                                  ;============================================================================
  9246                                  ; Retro DOS v2.0 by Erdogan Tan, 13/03/2018 - 14/03/2018
  9247                                  
  9248                                  ; (Disassembled code of IBMDOS.COM, 08/03/1983) - Dissassembler: IDA Pro Free
  9249                                  ; (Comments are from CPMIO.ASM - 1991, MSDOS 6.0) 
  9250                                  
  9251                                  ;**	Standard device IO for MSDOS (first 12 function calls)
  9252                                  ;
  9253                                  ;	TITLE	IBMCPMIO - device IO for MSDOS
  9254                                  ;	NAME	IBMCPMIO
  9255                                  
  9256                                  ;	Old style CP/M 1-12 system calls to talk to reserved devices
  9257                                  ;
  9258                                  ;	$Std_Con_Input_No_Echo
  9259                                  ;	$Std_Con_String_Output
  9260                                  ;	$Std_Con_String_Input
  9261                                  ;	$RawConIO
  9262                                  ;	$RawConInput
  9263                                  ;	RAWOUT
  9264                                  ;	RAWOUT2
  9265                                  ;
  9266                                  
  9267                                  ; The following routines form the console I/O group (funcs 1,2,6,7,8,9,10,11).
  9268                                  ; They assume ES and DS NOTHING, while not strictly correct, this forces data
  9269                                  ; references to be SS or CS relative which is desired.
  9270                                  
  9271                                  ; ---------------------------------------------------------------------------
  9272                                  
  9273                                  ;	TITLE	CPMIO2 - device IO for MSDOS
  9274                                  ;	NAME	CPMIO2
  9275                                  
  9276                                  ;
  9277                                  ;	Microsoft Confidential
  9278                                  ;	Copyright (C) Microsoft Corporation 1991
  9279                                  ;	All Rights Reserved.
  9280                                  ;
  9281                                  
  9282                                  ;**	Old style CP/M 1-12 system calls to talk to reserved devices
  9283                                  ;
  9284                                  ;	$Std_Con_Input
  9285                                  ;	$Std_Con_Output
  9286                                  ;	OUTT
  9287                                  ;	TAB
  9288                                  ;	BUFOUT
  9289                                  ;	$Std_Aux_Input
  9290                                  ;	$Std_Aux_Output
  9291                                  ;	$Std_Printer_Output
  9292                                  ;	$Std_Con_Input_Status
  9293                                  ;	$Std_Con_Input_Flush
  9294                                  ;
  9295                                  ;	Revision History:
  9296                                  ;
  9297                                  ;	  AN000	 version 4.00 - Jan. 1988
  9298                                  
  9299                                  ; The following routines form the console I/O group (funcs 1,2,6,7,8,9,10,11).
  9300                                  ; They assume ES and DS NOTHING, while not strictly correct, this forces data
  9301                                  ; references to be SS or CS relative which is desired.
  9302                                  
  9303                                  ;DOSCODE SEGMENT
  9304                                  ;	ASSUME	SS:DOSDATA,CS:DOSCODE
  9305                                  
  9306                                  
  9307                                  ;hkn; 	All the variables use SS override or DS. Therefore there is
  9308                                  ;hkn;	no need to specifically set up any seg regs unless SS assumption is
  9309                                  ;hkn;	not valid. 
  9310                                  
  9311                                  ;
  9312                                  ;----------------------------------------------------------------------------
  9313                                  ;
  9314                                  ; Procedure : $Std_Con_Input_No_Echo
  9315                                  ;
  9316                                  ;----------------------------------------------------------------------------
  9317                                  ;
  9318                                  
  9319                                  _$STD_CON_INPUT_NO_ECHO:   ;System call 8
  9320                                  
  9321                                  ; Inputs:
  9322                                  ;	None
  9323                                  ; Function:
  9324                                  ;	Input character from console, no echo
  9325                                  ; Returns:
  9326                                  ;	AL = character
  9327                                  
  9328 0000208C 1E                      	push	ds
  9329 0000208D 56                      	push	si
  9330                                  INTEST:
  9331 0000208E E85F36                  	call	STATCHK
  9332 00002091 754D                    	jnz	short GET ; 08/09/2018
  9333                                  ;*************************************************************************
  9334                                  ;hkn; SS override
  9335 00002093 36803E[060A]00          	cmp	byte [SS:PRINTER_FLAG],0  ; is printer idle?
  9336 00002099 7505                    	jnz	short no_sys_wait
  9337 0000209B B405                    	mov	ah,5			; get input status with system wait
  9338 0000209D E8AD2C                  	call	IOFUNC
  9339                                  no_sys_wait:
  9340                                  ;**************************************************************************
  9341 000020A0 B484                    	MOV	AH,84h
  9342 000020A2 CD2A                    	INT	int_IBM	 ; int 2Ah
  9343                                  
  9344                                  ;;; 7/15/86  update the date in the idle loop
  9345                                  ;;; Dec 19, 1986 D.C.L. changed following CMP to Byte Ptr from Word Ptr
  9346                                  ;;;;		 to shorten loop in consideration of the PC Convertible
  9347                                  
  9348                                  ;hkn; SS override
  9349 000020A4 36803E[8D0F]FF          	CMP	byte [SS:DATE_FLAG],-1	; date is updated may be every
  9350 000020AA 752D                    	JNZ	short NoUpdate		; 65535 x ? ms if no one calls
  9351 000020AC 50                      	PUSH	AX
  9352 000020AD 53                      	PUSH	BX			; following is tricky,
  9353 000020AE 51                      	PUSH	CX			; it may be called by critical handler
  9354 000020AF 52                      	PUSH	DX			; at that time, DEVCALL is used by
  9355                                  					; other's READ or WRITE
  9356 000020B0 1E                      	PUSH	DS			; save DS = SFT's sgement
  9357                                  
  9358                                  ;hkn; READTIME must use ds = DOSDATA
  9359                                  ;hkn;	PUSH	CS			; READTIME must use DS=CS
  9360                                  
  9361                                  	;push	ss
  9362 000020B1 0E                      	PUSH	CS
  9363 000020B2 1F                      	POP	DS
  9364                                  
  9365 000020B3 B80000                  	MOV	AX,0			; therefore, we save DEVCALL
  9366 000020B6 E89F02                  	CALL	Save_Restore_Packet	; save DEVCALL packet
  9367                                  	;invoke	READTIME		; readtime
  9368 000020B9 E824F8                  	call	READTIME
  9369 000020BC B80100                  	MOV	AX,1
  9370 000020BF E89602                  	CALL	Save_Restore_Packet	; restore DEVCALL packet
  9371                                  	;
  9372                                  	; MSDOS 3.3 (IBMDOS.COM, Offset 1F8Ch)
  9373                                  	; (MSDOS 6.0 code does not contain IBM DOS FETCHI_TAG check)
  9374 000020C2 53                      	push	bx
  9375 000020C3 BB[8D0F]                	mov	bx,DATE_FLAG
  9376 000020C6 83C302                  	add	bx,2  ; mov bx,FETCHI_FLAG
  9377 000020C9 2E813F7258              	cmp	word [cs:bx],5872h
  9378 000020CE 7403                    	jz	short FETCHI_TAG_chk_ok
  9379 000020D0 E8AE52                  	call	DOSINIT
  9380                                  FETCHI_TAG_chk_ok:
  9381 000020D3 5B                      	pop	bx
  9382                                  	;
  9383 000020D4 1F                      	POP	DS			; restore DS
  9384 000020D5 5A                      	POP	DX
  9385 000020D6 59                      	POP	CX
  9386 000020D7 5B                      	POP	BX
  9387 000020D8 58                      	POP	AX
  9388                                  NoUpdate:
  9389                                  
  9390                                  ;hkn; SS override
  9391 000020D9 36FF06[8D0F]            	INC	word [SS:DATE_FLAG]
  9392                                  
  9393                                  ;;; 7/15/86 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  9394 000020DE EBAE                    	JMP	short INTEST
  9395                                  GET:
  9396 000020E0 30E4                    	XOR	AH,AH
  9397 000020E2 E8682C                  	call	IOFUNC
  9398 000020E5 5E                      	POP	SI
  9399 000020E6 1F                      	POP	DS
  9400                                  ;;; 7/15/86
  9401                                  
  9402                                  ;hkn; SS override
  9403                                  	; MSDOS 6.0
  9404 000020E7 36C606[8B0F]00          	MOV	BYTE [SS:SCAN_FLAG],0
  9405                                  	;
  9406 000020ED 3C00                    	CMP	AL,0	    ; extended code ( AL )
  9407 000020EF 7506                    	JNZ	short noscan
  9408                                  
  9409                                  ;hkn; SS override
  9410 000020F1 36C606[8B0F]01          	MOV	BYTE [SS:SCAN_FLAG],1 ; set this flag for ALT_Q key
  9411                                  
  9412                                  noscan:
  9413 000020F7 C3                      	retn
  9414                                  ;
  9415                                  ;----------------------------------------------------------------------------
  9416                                  ;
  9417                                  ;**	$STD_CON_STRING_OUTPUT - Console String Output
  9418                                  ;
  9419                                  ;
  9420                                  ;	ENTRY	(DS:DX) Point to output string '$' terminated
  9421                                  ;	EXIT	none
  9422                                  ;	USES	ALL
  9423                                  ;
  9424                                  ;----------------------------------------------------------------------------
  9425                                  ;
  9426                                  
  9427                                  _$STD_CON_STRING_OUTPUT:	;System call 9
  9428                                  
  9429 000020F8 89D6                    	mov	si,dx
  9430                                  STRING_OUT1:	
  9431 000020FA AC                      	lodsb
  9432 000020FB 3C24                    	cmp	al,'$'
  9433 000020FD 74F8                    	jz	short noscan
  9434                                  NEXT_STR1:
  9435 000020FF E88202                  	call	OUTT
  9436 00002102 EBF6                    	jmp	short STRING_OUT1
  9437                                  
  9438                                  ;----------------------------------------------------------------------------
  9439                                  ;
  9440                                  ;**	$STD_CON_STRING_INPUT - Input Line from Console
  9441                                  ;
  9442                                  ;	$STD_CON_STRING_INPUT Fills a buffer from console input until CR
  9443                                  ;
  9444                                  ;	ENTRY	(ds:dx) = input buffer
  9445                                  ;	EXIT	none
  9446                                  ;	USES	ALL
  9447                                  ;
  9448                                  ;----------------------------------------------------------------------------
  9449                                  
  9450                                  _$STD_CON_STRING_INPUT:		;System call 10
  9451                                  
  9452 00002104 8CD0                    	mov	ax,ss
  9453 00002106 8EC0                    	mov	es,ax
  9454 00002108 89D6                    	mov	si,dx
  9455 0000210A 30ED                    	xor	ch,ch
  9456 0000210C AD                      	lodsw
  9457                                  
  9458                                  ;	(AL) = the buffer length
  9459                                  ;	(AH) = the template length
  9460                                  
  9461 0000210D 08C0                            or	al,al
  9462 0000210F 74E6                            jz	short noscan	;Buffer is 0 length!!?
  9463 00002111 88E3                    	mov	bl,ah		;Init template counter
  9464 00002113 88EF                            mov	bh,ch		;Init template counter
  9465                                  
  9466                                  ;	(BL) = the number of bytes in the template
  9467                                  
  9468 00002115 38D8                            cmp	al,bl
  9469 00002117 7605                            jbe	short NOEDIT	;If length of buffer inconsistent with contents
  9470 00002119 80380D                          cmp	byte [bx+si],c_CR ; 0Dh
  9471 0000211C 7402                            jz	short EDITON	;If CR correctly placed EDIT is OK
  9472                                  
  9473                                  ; The number of chars in the template is >= the number of chars in buffer or
  9474                                  ; there is no CR at the end of the template.  This is an inconsistant state
  9475                                  ; of affairs.  Pretend that the template was empty:
  9476                                  ;
  9477                                  
  9478                                  NOEDIT:	
  9479 0000211E 88EB                    	mov	bl,ch		;Reset buffer
  9480                                  EDITON: 
  9481 00002120 88C2                    	mov	dl,al
  9482 00002122 4A                      	dec	dx		;DL is # of bytes we can put in the buffer
  9483                                  
  9484                                  ;	Top level.  We begin to read a line in.
  9485                                  
  9486                                  NEWLIN: 
  9487 00002123 36A0[A701]              	mov	al,[SS:CARPOS]
  9488 00002127 36A2[A801]              	mov	[SS:STARTPOS],al ;Remember position in raw buffer
  9489                                  
  9490 0000212B 56                      	push	si
  9491 0000212C BF[A901]                	mov	di,INBUF ;Build the new line here
  9492 0000212F 36882E[1405]            	mov	byte [SS:INSMODE],ch ;Insert mode off
  9493 00002134 88EF                    	mov	bh,ch		;No chars from template yet
  9494 00002136 88EE                    	mov	dh,ch		;No chars to new line yet
  9495 00002138 E851FF                  	call	_$STD_CON_INPUT_NO_ECHO ;Get first char
  9496 0000213B 3C0A                    	cmp	al,c_LF		; 0Ah	;Linefeed 
  9497 0000213D 7503                    	jnz	short GOTCH
  9498                                  
  9499                                  ;	This is the main loop of reading in a character and processing it.
  9500                                  ;
  9501                                  ;	(BH) = the index of the next byte in the template
  9502                                  ;	(BL) = the length of the template
  9503                                  ;	(DH) = the number of bytes in the buffer
  9504                                  ;	(DL) = the length of the buffer
  9505                                  
  9506                                  GETCH:
  9507 0000213F E84AFF                  	call	_$STD_CON_INPUT_NO_ECHO
  9508                                  GOTCH:
  9509                                  ;
  9510                                  ; Brain-damaged Tim Patterson ignored ^F in case his BIOS did not flush the
  9511                                  ; input queue.
  9512                                  ;
  9513 00002142 3C06                            cmp	al,"F"-"@"  ; CMP AL, 6  ; Ignore ^F
  9514 00002144 74F9                    	jz	short GETCH
  9515                                  
  9516                                  ;	If the leading char is the function-key lead byte
  9517                                  
  9518 00002146 363A06[D212]                    cmp	al,[SS:ESCCHAR]
  9519 0000214B 7438                            jz	short ESCAPE	;change reserved keyword DBM 5-7-87
  9520                                  
  9521                                  ;	Rubout and ^H are both destructive backspaces.
  9522                                  
  9523 0000214D 3C7F                            cmp	al,c_DEL ; 7FH
  9524 0000214F 742B                            jz	short BACKSPJ
  9525 00002151 3C08                            cmp	al,c_BS  ; 8
  9526 00002153 7427                            jz	short BACKSPJ
  9527                                  
  9528                                  	; MSDOS 6.0
  9529                                  ;;	^W deletes backward once and then backs up until a letter is before the
  9530                                  ;;	cursor
  9531                                  ;
  9532                                  ;	CMP     AL,"W"-"@" ; 17h
  9533                                  ;
  9534                                  ;;	The removal of the comment characters before the jump statement will
  9535                                  ;;	cause ^W to backup a word.
  9536                                  ;
  9537                                  ;;***	JZ	short WordDel
  9538                                  ;	NOP
  9539                                  ;	NOP
  9540                                  ;	CMP     AL,"U"-"@" ; 15h
  9541                                  ;
  9542                                  ;;	The removal of the comment characters before the jump statement will
  9543                                  ;;	cause ^U to clear a line.
  9544                                  ;
  9545                                  ;;***	JZ	short LineDel
  9546                                  ;	NOP
  9547                                  ;	NOP
  9548                                  
  9549                                  ;	CR terminates the line.
  9550                                  
  9551 00002155 3C0D                            cmp	al,c_CR ; 0Dh
  9552 00002157 742F                            jz	short ENDLIN
  9553                                  
  9554                                  ;	LF goes to a new line and keeps on reading.
  9555                                  
  9556 00002159 3C0A                            cmp	al,c_LF ; 0Ah
  9557 0000215B 7441                    	jz	short PHYCRLF
  9558                                  
  9559                                  ;	^X (or ESC) deletes the line and starts over
  9560                                  
  9561                                  	; MSDOS 3.3
  9562                                  	;cmp	al,[ss:CANCHAR] ; 1Bh
  9563                                  	;jz	short KILNEW
  9564                                  	;MSDOS 6.0
  9565 0000215D 3C1B                    	cmp	al,CANCEL ; 1Bh
  9566 0000215F 7442                    	jz	short KILNEW
  9567                                  
  9568                                  ; Otherwise, we save the input character.
  9569                                  
  9570                                  SAVCH:	
  9571 00002161 38D6                    	cmp	dh,dl
  9572 00002163 7319                    	jnb	short BUFFUL		; buffer is full.
  9573 00002165 AA                              stosb
  9574 00002166 FEC6                    	inc	dh                      ; increment count in buffer.
  9575 00002168 E8B302                  	call	BUFOUT			;Print control chars nicely
  9576                                  
  9577 0000216B 36803E[1405]00                  cmp	byte [SS:INSMODE], 0
  9578 00002171 75CC                    	jnz	short GETCH		; insertmode => don't advance template
  9579 00002173 38DF                            cmp	bh,bl
  9580 00002175 73C8                            jnb	short GETCH		; no more characters in template
  9581 00002177 46                              inc	si                      ; Skip to next char in template
  9582 00002178 FEC7                            inc	bh                      ; remember position in template
  9583 0000217A EBC3                            jmp	short GETCH
  9584                                  
  9585                                  BACKSPJ: 
  9586 0000217C EB38                    	jmp	short BACKSP
  9587                                  
  9588                                  BUFFUL: 
  9589 0000217E B007                    	mov	al, 7			; Bell to signal full buffer
  9590 00002180 E80102                  	call	OUTT
  9591 00002183 EBBA                    	jmp	short GETCH
  9592                                  
  9593                                  ESCAPE: 
  9594                                  	;transfer OEMFunctionKey
  9595 00002185 E988F6                  	JMP	OEMFunctionKey
  9596                                  
  9597                                  ENDLIN:
  9598 00002188 AA                              stosb				; Put the CR in the buffer
  9599 00002189 E8F801                  	call	OUTT                    ; Echo it
  9600 0000218C 5F                              pop	di                      ; Get start of user buffer
  9601 0000218D 8875FF                          mov	[di-1], dh		; Tell user how many bytes
  9602 00002190 FEC6                            inc	dh			; DH is length including CR
  9603                                  
  9604                                  COPYNEW:
  9605                                  	; (IBMDOS.COM, MSDOS 2.0, STRIN.ASM)
  9606                                  	;mov	bp, es
  9607                                  	;mov	bx, ds
  9608                                  	;mov	es, bx
  9609                                  	;mov	ds, bp
  9610                                  	;mov	si, INBUF
  9611                                  	;mov	cl, dh
  9612                                  	;rep	movsb
  9613                                  	;retn
  9614                                  
  9615                                  	; CPMIO.ASM (MSDOS 6.0)
  9616                                  	; (IBMDOS.COM, MSDOS 3.3, Offset 2061h) 
  9617                                  	;SAVE	<DS,ES>
  9618 00002192 1E                      	PUSH	DS
  9619 00002193 06                      	PUSH	ES
  9620                                  	;RESTORE <DS,ES>		; XCHG ES,DS
  9621 00002194 1F                      	POP	DS
  9622 00002195 07                      	POP	ES
  9623                                  
  9624                                  ;;hkn; INBUF is in DOSDATA
  9625 00002196 BE[A901]                        MOV     SI,INBUF
  9626 00002199 88F1                            MOV     CL,DH                   ; set up count
  9627 0000219B F3A4                            REP     MOVSB                   ; Copy final line to user buffer
  9628                                  OLDBAK_RETN:
  9629 0000219D C3                              RETN
  9630                                  
  9631                                  ;	Output a CRLF to the user screen and do NOT store it into the buffer
  9632                                  
  9633                                  PHYCRLF:
  9634 0000219E E82001                  	CALL	CRLF
  9635 000021A1 EB9C                            JMP	short GETCH
  9636                                  
  9637                                  	; MSDOS 6.0 (& MSDOS 3.3, IBMDOS.COM, 1987)
  9638                                  
  9639                                  	; Note: Following routines were not used in IBMDOS.COM
  9640                                  	;	-CRTL+W, CRTL+U is not activated-
  9641                                  	;	but they were in the kernel code!?)
  9642                                  ;
  9643                                  ; Delete the previous line
  9644                                  ;
  9645                                  ;LineDel:
  9646                                  ;	OR      DH,DH
  9647                                  ;	JZ	short GetCh
  9648                                  ;	Call    BackSpace
  9649                                  ;	JMP	short LineDel
  9650                                  
  9651                                  ;
  9652                                  ; delete the previous word.
  9653                                  ;
  9654                                  ;WordDel:
  9655                                  ;WordLoop:
  9656                                  ;	Call    BackSpace               ; backspace the one spot
  9657                                  ;	OR      DH,DH
  9658                                  ;	JZ	short GetChJ
  9659                                  ;	MOV     AL,[ES:DI-1]
  9660                                  ;	cmp     al,'0'
  9661                                  ;	jb	short GetChj
  9662                                  ;	cmp     al,'9'
  9663                                  ;	jbe	short WordLoop
  9664                                  ;	OR      AL,20h
  9665                                  ;	CMP     AL,'a'
  9666                                  ;	JB	short GetChJ
  9667                                  ;	CMP     AL,'z'
  9668                                  ;	JBE	short WordLoop
  9669                                  ;getchj: 
  9670                                  ;	JMP	GetCh
  9671                                  
  9672                                  ; The user wants to throw away what he's typed in and wants to start over.
  9673                                  ; We print the backslash and then go to the next line and tab to the correct
  9674                                  ; spot to begin the buffered input.
  9675                                  
  9676                                  KILNEW:
  9677 000021A3 B05C                            mov	al,'\'
  9678 000021A5 E8DC01                          call	OUTT            ;Print the CANCEL indicator
  9679 000021A8 5E                              pop	si		;Remember start of edit buffer
  9680                                  PUTNEW:
  9681 000021A9 E81501                  	call	CRLF            ;Go to next line on screen
  9682 000021AC 36A0[A801]              	mov	al,[SS:STARTPOS]
  9683 000021B0 E84702                  	call	TAB             ;Tab over
  9684 000021B3 E96DFF                          JMP     NEWLIN		;Start over again
  9685                                  
  9686                                  ;	Destructively back up one character position
  9687                                  
  9688                                  BACKSP:
  9689                                  	; 09/09/2018
  9690 000021B6 E80200                  	Call    BackSpace
  9691 000021B9 EB84                    	JMP     GETCH
  9692                                  
  9693                                  BackSpace:
  9694 000021BB 08F6                    	or	dh,dh
  9695 000021BD 7419                    	jz	short OLDBAK	;No chars in line, do nothing to line
  9696 000021BF E85800                  	call	BACKUP          ;Do the backup
  9697 000021C2 268A05                  	mov	al,[es:di]	;Get the deleted char
  9698 000021C5 3C20                            cmp	al,20h	; ' '
  9699 000021C7 730F                    	jnb	short OLDBAK	;Was a normal char
  9700 000021C9 3C09                            cmp	al,c_HT ; 9
  9701 000021CB 741B                    	jz	short BAKTAB	;Was a tab, fix up users display
  9702                                  ;; 9/27/86 fix for ctrl-U backspace
  9703 000021CD 3C15                    	CMP     AL,"U"-"@" ; 15h ; ctrl-U is a section symbol not ^U
  9704 000021CF 7407                    	JZ	short OLDBAK
  9705 000021D1 3C14                           	CMP     AL,"T"-"@" ; 14h ; ctrl-T is a paragraphs symbol not ^T
  9706 000021D3 7403                    	JZ	short OLDBAK
  9707                                  ;; 9/27/86 fix for ctrl-U backspace
  9708 000021D5 E84500                          call	BACKMES         ;Was a control char, zap the '^'
  9709                                  OLDBAK:
  9710 000021D8 36803E[1405]00                  cmp	byte [SS:INSMODE], 0
  9711 000021DE 75BD                    	jnz	short OLDBAK_RETN ;In insert mode, done
  9712 000021E0 08FF                    	or	bh,bh
  9713 000021E2 74B9                            jz	short OLDBAK_RETN 
  9714                                  				;Not advanced in template, stay where we are
  9715 000021E4 FECF                    	dec	bh		;Go back in template
  9716 000021E6 4E                              dec	si
  9717 000021E7 C3                      	retn
  9718                                  
  9719                                  BAKTAB:
  9720 000021E8 57                              push	di
  9721 000021E9 4F                              dec	di		;Back up one char
  9722 000021EA FD                              std			;Go backward
  9723 000021EB 88F1                            mov	cl,dh		;Number of chars currently in line
  9724 000021ED B020                            mov	al,20h	; ' '
  9725 000021EF 53                              push	bx
  9726 000021F0 B307                            mov	bl,7		;Max
  9727 000021F2 E30E                            jcxz	FIGTAB		;At start, do nothing
  9728                                  FNDPOS:
  9729 000021F4 AE                              scasb			;Look back
  9730 000021F5 7609                    	jbe	short CHKCNT
  9731 000021F7 26807D0109              	cmp	byte [es:di+1],9
  9732 000021FC 7409                    	jz	short HAVTAB	;Found a tab
  9733 000021FE FECB                    	dec	bl		;Back one char if non tab control char
  9734                                  CHKCNT:
  9735 00002200 E2F2                            loop	FNDPOS
  9736                                  FIGTAB:		
  9737 00002202 362A1E[A801]            	sub	bl,[SS:STARTPOS]
  9738                                  HAVTAB:
  9739 00002207 28F3                    	sub	bl,dh
  9740 00002209 00D9                    	add	cl,bl
  9741 0000220B 80E107                  	and	cl,7		;CX has correct number to erase
  9742 0000220E FC                      	cld			;Back to normal
  9743 0000220F 5B                      	pop	bx
  9744 00002210 5F                      	pop	di
  9745 00002211 74C5                    	jz	short OLDBAK	;Nothing to erase
  9746                                  TABBAK:
  9747 00002213 E80700                  	call	BACKMES
  9748 00002216 E2FB                    	loop	TABBAK		;Erase correct number of chars
  9749 00002218 EBBE                    	jmp	short OLDBAK
  9750                                  
  9751                                  BACKUP:
  9752 0000221A FECE                            dec	dh             ;Back up in line
  9753 0000221C 4F                              dec	di
  9754                                  BACKMES:
  9755 0000221D B008                            mov	al,c_BS ; 8	;Backspace
  9756 0000221F E86201                          call	OUTT
  9757 00002222 B020                            mov	al,20h ; ' '	;Erase
  9758 00002224 E85D01                          call	OUTT
  9759 00002227 B008                            mov	al,c_BS ; 8	;Backspace
  9760 00002229 E95801                  	jmp	OUTT		;Done
  9761                                  
  9762                                  ;User really wants an ESC character in his line
  9763                                  TWOESC:	
  9764 0000222C 36A0[D212]              	mov	al,[SS:ESCCHAR]
  9765 00002230 E92EFF                  	jmp	SAVCH
  9766                                  
  9767                                  ;Copy the rest of the template
  9768                                  COPYLIN:
  9769 00002233 88D9                            mov	cl,bl		;Total size of template
  9770 00002235 28F9                    	sub	cl,bh		;Minus position in template, is number to move
  9771 00002237 EB07                            jmp	short COPYEACH
  9772                                  
  9773                                  COPYSTR:
  9774 00002239 E83400                  	call	FINDOLD         ;Find the char
  9775 0000223C EB02                    	jmp	short COPYEACH  ;Copy up to it
  9776                                  
  9777                                  ;Copy one char from template to line
  9778                                  COPYONE:
  9779 0000223E B101                            mov	cl,1
  9780                                  ;Copy CX chars from template to line
  9781                                  COPYEACH:
  9782 00002240 36C606[1405]00                  mov	byte [SS:INSMODE],0	;All copies turn off insert mode
  9783 00002246 38D6                    	cmp	dh,dl
  9784 00002248 740F                            jz	short GETCH2		;At end of line, can't do anything
  9785 0000224A 38DF                            cmp	bh,bl
  9786 0000224C 740B                            jz	short GETCH2		;At end of template, can't do anything
  9787 0000224E AC                              lodsb
  9788 0000224F AA                              stosb
  9789 00002250 E8CB01                  	call	BUFOUT
  9790 00002253 FEC7                            inc	bh			;Ahead in template
  9791 00002255 FEC6                            inc	dh			;Ahead in line
  9792 00002257 E2E7                            loop	COPYEACH
  9793                                  GETCH2:
  9794 00002259 E9E3FE                          jmp	GETCH
  9795                                  
  9796                                  ;Skip one char in template
  9797                                  SKIPONE:
  9798 0000225C 38DF                    	cmp	bh,bl
  9799 0000225E 74F9                    	jz	short GETCH2		;At end of template
  9800 00002260 FEC7                    	inc	bh			;Ahead in templat
  9801 00002262 46                      	inc	si
  9802 00002263 E9D9FE                  	jmp	GETCH
  9803                                  
  9804                                  SKIPSTR:
  9805 00002266 E80700                  	call	FINDOLD                 ;Find out how far to go
  9806 00002269 01CE                            add	si,cx			;Go there
  9807 0000226B 00CF                            add	bh,cl
  9808 0000226D E9CFFE                          jmp	GETCH
  9809                                  
  9810                                  ;Get the next user char, and look ahead in template for a match
  9811                                  ;CX indicates how many chars to skip to get there on output
  9812                                  ;NOTE: WARNING: If the operation cannot be done, the return
  9813                                  ;       address is popped off and a jump to GETCH is taken.
  9814                                  ;       Make sure nothing extra on stack when this routine
  9815                                  ;       is called!!! (no PUSHes before calling it).
  9816                                  FINDOLD:
  9817 00002270 E819FE                          call	_$STD_CON_INPUT_NO_ECHO
  9818                                  	; STRIN.ASM (MSDOS 2.11, 19/07/2018) 
  9819 00002273 363A06[D212]            	CMP     AL,[SS:ESCCHAR]	; did he type a function key?
  9820                                  ;hkn; ESCCHAR is in TABLE seg (DOSCODE), so CS override
  9821                                  	;CMP	AL,[CS:ESCCHAR]
  9822 00002278 7505                    	JNZ     SHORT FINDSETUP		; no, set up for scan
  9823 0000227A E80FFE                          CALL	_$STD_CON_INPUT_NO_ECHO	; eat next char
  9824 0000227D EB1D                            JMP     SHORT NOTFND		; go try again
  9825                                  FINDSETUP:
  9826 0000227F 88D9                    	mov	cl,bl
  9827 00002281 28F9                            sub	cl,bh		;CX is number of chars to end of template
  9828 00002283 7417                    	jz	short NOTFND	;At end of template
  9829 00002285 49                              dec	cx		;Cannot point past end, limit search
  9830 00002286 7414                            jz	short NOTFND	 ;If only one char in template, forget it
  9831 00002288 06                      	push	es
  9832 00002289 1E                      	push	ds
  9833 0000228A 07                      	pop	es
  9834 0000228B 57                      	push	di
  9835 0000228C 89F7                    	mov	di,si		;Template to ES:DI
  9836 0000228E 47                      	inc	di
  9837 0000228F F2AE                    	repne	scasb		;Look
  9838 00002291 5F                      	pop	di
  9839 00002292 07                      	pop	es
  9840 00002293 7507                    	jnz	short NOTFND	;Didn't find the char
  9841 00002295 F6D1                            not	cl		;Turn how far to go into how far we went
  9842 00002297 00D9                            add	cl,bl		;Add size of template
  9843 00002299 28F9                            sub	cl,bh		;Subtract current pos, result distance to skip
  9844                                  FINDOLD_RETN:
  9845 0000229B C3                      	retn
  9846                                  
  9847                                  NOTFND:
  9848 0000229C 5D                              pop	bp              ;Chuck return address
  9849 0000229D E99FFE                          jmp	GETCH
  9850                                  
  9851                                  REEDIT:
  9852 000022A0 B040                    	mov	al,'@'		;Output re-edit character
  9853 000022A2 E8DF00                  	call	OUTT
  9854 000022A5 5F                      	pop	di
  9855 000022A6 57                      	push	di
  9856 000022A7 06                      	push	es
  9857 000022A8 1E                      	push	ds
  9858 000022A9 E8E6FE                  	call	COPYNEW		;Copy current line into template
  9859 000022AC 1F                      	pop	ds
  9860 000022AD 07                      	pop	es
  9861 000022AE 5E                      	pop	si
  9862 000022AF 88F3                    	mov	bl,dh		;Size of line is new size template
  9863 000022B1 E9F5FE                  	jmp	PUTNEW		;Start over again
  9864                                  
  9865                                  EXITINS:
  9866                                  ENTERINS:
  9867 000022B4 36F616[1405]            	not	byte [SS:INSMODE]
  9868 000022B9 E983FE                  	jmp	GETCH
  9869                                  
  9870                                  ;Put a real live ^Z in the buffer (embedded)
  9871                                  CTRLZ:
  9872 000022BC B01A                    	mov	al,"Z"-"@" ; 1Ah
  9873 000022BE E9A0FE                          jmp	SAVCH
  9874                                  
  9875                                  ;Output a CRLF
  9876                                  CRLF:
  9877 000022C1 B00D                    	mov	al,c_CR ; 0Dh 
  9878 000022C3 E8BE00                  	call	OUTT
  9879 000022C6 B00A                    	mov	al,c_LF ; 0Ah
  9880 000022C8 E9B900                  	jmp	OUTT
  9881                                  
  9882                                  ;
  9883                                  ;----------------------------------------------------------------------------
  9884                                  ;
  9885                                  ;**	$RAW_CON_IO - Do Raw Console I/O
  9886                                  ;
  9887                                  ;	Input or output raw character from console, no echo
  9888                                  ;
  9889                                  ;	ENTRY	DL = -1 if input
  9890                                  ;		   =  output character if output
  9891                                  ;	EXIT	(AL) = input character if input
  9892                                  ;	USES	all
  9893                                  ;
  9894                                  ;----------------------------------------------------------------------------
  9895                                  ; 20/07/2018 - Retro DOS v3.0
  9896                                  
  9897                                  _$RAW_CON_IO:			; System call 6
  9898                                  
  9899 000022CB 88D0                            MOV     AL,DL
  9900 000022CD 3CFF                            CMP     AL,-1
  9901 000022CF 7542                            JNZ     SHORT RAWOUT
  9902                                          ;LES 	DI,[USER_SP]	; Get pointer to register save area
  9903 000022D1 36C43E[1E05]                    LES     DI,[SS:USER_SP] ; 12/03/2018
  9904 000022D6 31DB                    	XOR     BX,BX
  9905                                      	;CALL	GET_IO_FCB	; MSDOS 2.11 (Retro DOS v2.0)
  9906 000022D8 E8DF1D                  	CALL	GET_IO_SFT	; MSDOS 3.3 & MSDOS 6.0
  9907                                          ;JC	SHORT RET17
  9908 000022DB 72BE                            jc	short FINDOLD_RETN
  9909 000022DD B401                    	MOV     AH,1
  9910 000022DF E86B2A                          CALL	IOFUNC
  9911 000022E2 750B                            JNZ     SHORT RESFLG
  9912 000022E4 E8EA33                          CALL	SPOOLINT
  9913                                          ;OR	BYTE [ES:DI+16H],40H
  9914 000022E7 26804D1640              	OR	BYTE [ES:DI+user_env.user_F],40H ; Set user's zero flag
  9915 000022EC 30C0                            XOR     AL,AL
  9916                                  RET17:
  9917 000022EE C3                              RETN
  9918                                  
  9919                                  RESFLG:
  9920                                  	;AND	BYTE [ES:DI+16H],0FFH-40H  ; 0BFh
  9921 000022EF 26806516BF              	AND	BYTE [ES:DI+user_env.user_F],0FFH-40H
  9922                                  				; Reset user's zero flag
  9923                                  ;RILP:
  9924                                  rci0:
  9925 000022F4 E8DA33                       	CALL	SPOOLINT
  9926                                  
  9927                                  ;
  9928                                  ;----------------------------------------------------------------------------
  9929                                  ;
  9930                                  ;**	$Raw_CON_INPUT - Raw Console Input
  9931                                  ;
  9932                                  ;	Input raw character from console, no echo
  9933                                  ;
  9934                                  ;	ENTRY	none
  9935                                  ;	EXIT	(al) = character
  9936                                  ;	USES	all
  9937                                  ;
  9938                                  ;----------------------------------------------------------------------------
  9939                                  ;
  9940                                  
  9941                                  ;rci0:	invoke	SPOOLINT
  9942                                  
  9943                                  	;entry	$RAW_CON_INPUT
  9944                                  
  9945                                  _$RAW_CON_INPUT:		; System call 7
  9946 000022F7 53                      	push	bx
  9947 000022F8 31DB                            XOR     BX,BX
  9948                                          ;CALL	GET_IO_FCB	; MSDOS 2.11 (Retro DOS v2.0)
  9949 000022FA E8BD1D                  	CALL	GET_IO_SFT	; MSDOS 3.3 & MSDOS 6.0
  9950 000022FD 5B                              pop	bx
  9951 000022FE 72EE                    	JC	SHORT RET17
  9952 00002300 B401                            MOV     AH,1
  9953 00002302 E8482A                          CALL	IOFUNC
  9954                                  	;JZ	SHORT RILP	; MSDOS 2.11
  9955                                  	;XOR     AH,AH
  9956                                          ;CALL	IOFUNC
  9957                                          ;RETN
  9958 00002305 7506                    	jnz	short rci5	; MSDOS 3.3 & MSDOS 6.0
  9959 00002307 B484                    	MOV	AH,84h
  9960 00002309 CD2A                    	INT	int_IBM  ; int 2Ah
  9961 0000230B EBE7                    	JMP	short rci0
  9962                                  rci5:	
  9963 0000230D 30E4                            XOR     AH,AH
  9964 0000230F E83B2A                          CALL	IOFUNC
  9965 00002312 C3                              RETN
  9966                                  
  9967                                  ;
  9968                                  ;       Output the character in AL to stdout
  9969                                  ;
  9970                                  	;entry   RAWOUT
  9971                                  
  9972                                  RAWOUT:
  9973 00002313 53                              PUSH    BX
  9974 00002314 BB0100                          MOV     BX,1
  9975                                  
  9976                                          ;CALL	GET_IO_FCB	; MSDOS 2.11 (Retro DOS v2.0)
  9977 00002317 E8A01D                  	CALL	GET_IO_SFT	; MSDOS 3.3 & MSDOS 6.0
  9978 0000231A 721B                            JC      SHORT RAWRET1
  9979                                  	;
  9980                                  	; MSDOS 2.11
  9981                                          ;TEST	BYTE [SI+18H],080H	; output to file?
  9982                                          ;JZ	SHORT RAWNORM		; if so, do normally
  9983                                          ;PUSH	DS
  9984                                          ;PUSH	SI
  9985                                          ;LDS	SI,[SI+19H]		; output to special?
  9986                                  	;TEST	BYTE [SI+4],ISSPEC
  9987                                  	;POP	SI
  9988                                  	;
  9989                                          
  9990                                  	; MSDOS 3.3 & MSDOS 6.0
  9991                                  	;mov	bx,[si+5]
  9992 0000231C 8B5C05                  	MOV	BX,[SI+SF_ENTRY.sf_flags] ;hkn; DS set up by get_io_sft
  9993                                   ;
  9994                                   ; If we are a network handle OR if we are not a local device then go do the
  9995                                   ; output the hard way.
  9996                                   ;	
  9997                                  	;and	bx,8080h
  9998 0000231F 81E38080                	AND	BX,sf_isnet+devid_device
  9999                                  	;cmp	bx,80h
 10000 00002323 81FB8000                	CMP	BX,devid_device
 10001 00002327 7510                    	jnz     short RAWNORM
 10002 00002329 1E                      	push    ds
 10003                                  	;lds	bx,[si+7]
 10004 0000232A C55C07                  	LDS	BX,[SI+SF_ENTRY.sf_devptr] ; output to special?
 10005                                  	;test	byte [bx+4],10h
 10006 0000232D F6470410                	TEST	BYTE [BX+SYSDEV.ATT],ISSPEC
 10007                                  	;
 10008                                  
 10009 00002331 1F                              POP     DS
 10010 00002332 7405                            JZ      SHORT RAWNORM		; if not, do normally
 10011 00002334 CD29                            INT     int_fastcon   ; int 29h	; quickly output the char
 10012                                  
 10013                                          ;JMP     SHORT RAWRET
 10014                                  ;RAWNORM:
 10015                                  ;	CALL    RAWOUT3
 10016                                  
 10017                                  RAWRET: 
 10018 00002336 F8                      	CLC
 10019                                  RAWRET1:
 10020 00002337 5B                              POP     BX
 10021                                  RAWRET2:
 10022 00002338 C3                      	RETN
 10023                                  
 10024                                  RAWNORM:
 10025 00002339 E80700                  	CALL    RAWOUT3
 10026 0000233C EBF8                    	jmp	short RAWRET
 10027                                  
 10028                                  ;
 10029                                  ;       Output the character in AL to handle in BX
 10030                                  ;
 10031                                  ;	entry   RAWOUT2
 10032                                  
 10033                                  RAWOUT2:
 10034                                  	;CALL	GET_IO_FCB	; MSDOS 2.11 (Retro DOS v2.0)
 10035                                  	;JC	SHORT RET18
 10036 0000233E E8791D                  	CALL	GET_IO_SFT	; MSDOS 3.3 & MSDOS 6.0
 10037 00002341 72F5                    	JC	SHORT RAWRET2
 10038                                  RAWOUT3:
 10039 00002343 50                              PUSH    AX
 10040 00002344 EB03                            JMP     SHORT RAWOSTRT
 10041                                  ROLP:
 10042 00002346 E88833                          CALL	SPOOLINT
 10043                                  
 10044                                  	; MSDOS 6.0
 10045                                  	;OR	word [DOS34_FLAG],CTRL_BREAK_FLAG ; 001000000000b
 10046                                  				;AN002; set control break
 10047                                  	;;invoke DSKSTATCHK
 10048                                  	;call	DSKSTATCHK	;AN002; check control break
 10049                                  
 10050                                  RAWOSTRT:
 10051 00002349 B403                            MOV     AH,3
 10052 0000234B E8FF29                          CALL    IOFUNC
 10053 0000234E 74F6                            JZ      SHORT ROLP
 10054                                  
 10055                                  	; MSDOS 6.0
 10056                                  ;SR;
 10057                                  ; IOFUNC now returns ax = 0ffffh if there was an I24 on a status call and
 10058                                  ;the user failed. We do not send a char if this happens. We however return 
 10059                                  ;to the caller with carry clear because this DOS call does not return any
 10060                                  ;status. 
 10061                                  ;
 10062                                  	;inc	ax		;fail on I24 if ax = -1
 10063                                  	;POP	AX
 10064                                  	;jz	short nosend	;yes, do not send char
 10065                                  	;MOV	AH,2
 10066                                  	;call	IOFUNC
 10067                                  ;nosend:
 10068                                  	;CLC			; Clear carry indicating successful
 10069                                  	;retn
 10070                                  
 10071                                  	; MSDOS 3.3 & MSDOS 2.11
 10072 00002350 58                              POP     AX
 10073 00002351 B402                            MOV     AH,2
 10074 00002353 E8F729                          CALL    IOFUNC
 10075 00002356 F8                              CLC                     ; Clear carry indicating successful
 10076                                  RET18:    
 10077 00002357 C3                      	RETN
 10078                                  
 10079                                  ;;10/08/2018
 10080                                  ; 20/07/2018 - Retro DOS v3.0
 10081                                  ; ---------------------------------------------------------------------------
 10082                                  ; Retro DOS v2.0 (MSDOS 2.11) - OUTMES
 10083                                  ; ---------------------------------------------------------------------------
 10084                                  
 10085                                  ; This routine is called at DOS init
 10086                                  
 10087                                  ;;	;procedure OUTMES,NEAR ; String output for internal messages
 10088                                  ;;OUTMES:
 10089                                  ;;	;LODS	CS:BYTE PTR [SI]
 10090                                  ;;	CS	LODSB
 10091                                  ;;	CMP     AL,"$" ; 24h
 10092                                  ;;	JZ	SHORT RET18
 10093                                  ;;	CALL	OUTT
 10094                                  ;;	JMP     SHORT OUTMES
 10095                                  
 10096                                  ; ---------------------------------------------------------------------------
 10097                                  
 10098                                  ; 20/07/2018 - Retro DOS v3.0
 10099                                  
 10100                                  ; IBMDOS.COM (MSDOS 3.3 kernel) - Offset 2252h
 10101                                  
 10102                                  ;
 10103                                  ;----------------------------------------------------------------------------
 10104                                  ;
 10105                                  ; Inputs:
 10106                                  ;	AX=0 save the DEVCALL request packet
 10107                                  ;	  =1 restore the DEVCALL request packet
 10108                                  ; Function:
 10109                                  ;	save or restore the DEVCALL packet
 10110                                  ; Returns:
 10111                                  ;	none
 10112                                  ;
 10113                                  ;----------------------------------------------------------------------------
 10114                                  ;
 10115                                  
 10116                                  Save_Restore_Packet:
 10117 00002358 1E                      	PUSH	DS
 10118 00002359 06                      	PUSH	ES
 10119 0000235A 56                      	PUSH	SI
 10120 0000235B 57                      	PUSH	DI
 10121                                  
 10122                                  	; 09/09/2018
 10123 0000235C BF[730F]                	mov	di,FAKE_STACK_2F 
 10124 0000235F BE[0603]                	mov	si,DEVCALL
 10125                                  	;
 10126 00002362 83F800                  	CMP	AX,0		; save packet
 10127                                  	;JZ	short save_packet
 10128 00002365 7402                    	je	short set_seg 
 10129                                  
 10130                                  	; MSDOS 6.0
 10131                                  restore_packet:
 10132                                  ;	MOV	SI,OFFSET DOSDATA:Packet_Temp	 ;sourec
 10133                                  ;	MOV	DI,OFFSET DOSDATA:DEVCALL	 ;destination
 10134                                  	; MSDOS 3.3
 10135                                  	;mov	si,FAKE_STACK_2F ; DOS_TEMP ; Packed_Temp 
 10136                                  	;mov	di,DEVCALL  ; 09/09/2018
 10137                                  	;
 10138                                  	;JMP	short set_seg
 10139                                  	
 10140                                  	; 09/09/2018
 10141 00002367 87F7                    	xchg	si,di  ; DI = offset DEVCALL, SI = offset FAKE_STACK_2F
 10142                                  
 10143                                  	; MSDOS 6.0
 10144                                  save_packet:
 10145                                  ;	MOV	DI,OFFSET DOSDATA:Packet_Temp	 ;destination
 10146                                  ;	MOV	SI,OFFSET DOSDATA:DEVCALL	 ;source
 10147                                  	; 09/09/2018
 10148                                  	; MSDOS 3.3
 10149                                  	;mov	di,FAKE_STACK_2F ; DOS_TEMP ; Packed_Temp 
 10150                                  	;mov	si,DEVCALL ; 09/09/2018
 10151                                  
 10152                                  set_seg:
 10153                                  	; MSDOS 6.0
 10154                                  	;MOV	AX,SS		; set DS,ES to DOSDATA
 10155                                  	; MSDOS 3.3
 10156 00002369 8CC8                    	mov	ax,cs
 10157                                  	;
 10158 0000236B 8ED8                    	MOV	DS,AX
 10159 0000236D 8EC0                    	MOV	ES,AX
 10160 0000236F B90B00                  	MOV	CX,11		; 11 words to move
 10161 00002372 F3A5                    	REP	MOVSW
 10162                                  
 10163 00002374 5F                      	POP	DI
 10164 00002375 5E                      	POP	SI
 10165 00002376 07                      	POP	ES
 10166 00002377 1F                      	POP	DS
 10167 00002378 C3                      	retn
 10168                                  
 10169                                  ;============================================================================
 10170                                  ; CPMIO2.ASM, MSDOS 6.0, 1991
 10171                                  ;============================================================================
 10172                                  ; 20/07/2018 - Retro DOS v3.0
 10173                                  
 10174                                  ;hkn; 	All the variables use SS override or DS. Therefore there is
 10175                                  ;hkn;	no need to specifically set up any seg regs unless SS assumption is
 10176                                  ;hkn;	not valid. 
 10177                                  
 10178                                  ;
 10179                                  ;----------------------------------------------------------------------------
 10180                                  ;
 10181                                  ;**	$STD_CON_INPUT - System Call 1
 10182                                  ;
 10183                                  ;	Input character from console, echo
 10184                                  ;
 10185                                  ;	ENTRY	none
 10186                                  ;	EXIT	(al) = character
 10187                                  ;	USES	ALL
 10188                                  ;
 10189                                  ;----------------------------------------------------------------------------
 10190                                  ;
 10191                                  
 10192                                  _$STD_CON_INPUT:	;System call 1
 10193                                  	
 10194 00002379 E810FD                  	CALL	_$STD_CON_INPUT_NO_ECHO
 10195 0000237C 50                      	PUSH	AX
 10196 0000237D E80400                  	CALL	OUTT
 10197 00002380 58                      	POP	AX
 10198                                  CON_INPUT_RETN:	
 10199 00002381 C3                      	RETN
 10200                                  
 10201                                  ;
 10202                                  ;----------------------------------------------------------------------------
 10203                                  ;
 10204                                  ;**	$STD_CON_OUTPUT - System Call 2
 10205                                  ;
 10206                                  ;	Output character to console
 10207                                  ;
 10208                                  ;	ENTRY	(dl) = character
 10209                                  ;	EXIT	none
 10210                                  ;	USES	all
 10211                                  ;
 10212                                  ;----------------------------------------------------------------------------
 10213                                  ;
 10214                                  
 10215                                  _$STD_CON_OUTPUT:	;System call 2
 10216                                  
 10217 00002382 88D0                    	MOV	AL,DL
 10218                                  
 10219                                  OUTT:
 10220 00002384 3C20                    	CMP	AL,20H ; " "
 10221 00002386 725E                    	JB	SHORT CTRLOUT
 10222 00002388 3C7F                    	CMP	AL,c_DEL ; 7Fh
 10223 0000238A 7405                    	JZ	SHORT OUTCH
 10224                                  OUTCHA:	
 10225                                  	;INC	BYTE PTR [CARPOS]
 10226 0000238C 36FE06[A701]            	INC	BYTE [SS:CARPOS]
 10227                                  OUTCH:
 10228 00002391 1E                      	PUSH	DS
 10229 00002392 56                      	PUSH	SI
 10230                                  	;INC	BYTE PTR [CHARCO]		;invoke  statchk...
 10231                                  	;AND	BYTE PTR [CHARCO],00111111B	;AN000; every 64th char
 10232 00002393 36FE06[AE02]            	INC	BYTE [SS:CHARCO]	
 10233                                  	;AND	BYTE [SS:CHARCO],00111111B
 10234                                  	; 14/03/2018
 10235 00002398 368026[AE02]03          	and	byte [SS:CHARCO],3  ; IBMDOS.COM, MSDOS 3.3, MSDOS 2.11
 10236 0000239E 7505                    	JNZ	SHORT OUTSKIP
 10237 000023A0 50                      	PUSH	AX
 10238 000023A1 E84C33                  	CALL	STATCHK
 10239 000023A4 58                      	POP	AX
 10240                                  OUTSKIP:
 10241 000023A5 E86BFF                  	CALL	RAWOUT				;output the character
 10242 000023A8 5E                      	POP	SI
 10243 000023A9 1F                      	POP	DS
 10244                                  
 10245                                  	;TEST	BYTE PTR [PFLAG],-1
 10246                                  	;retz
 10247 000023AA 36F606[AC02]FF          	TEST	BYTE [SS:PFLAG],0FFh
 10248 000023B0 74CF                    	JZ	SHORT CON_INPUT_RETN
 10249                                  
 10250 000023B2 53                      	PUSH	BX
 10251 000023B3 1E                      	PUSH	DS
 10252 000023B4 56                      	PUSH	SI
 10253 000023B5 BB0100                  	MOV	BX,1
 10254                                  	; 20/07/2018 - Retro DOS v3.0
 10255                                  	; MSDOS 3.3
 10256                                  	; MSDOS 6.0 (CPMIO2.ASM)
 10257 000023B8 E8FF1C                  	CALL	GET_IO_SFT		;hkn; GET_IO_SFT will set up DS:SI 
 10258                                  					;hkn; to sft entry
 10259 000023BB 7226                    	JC	SHORT TRIPOPJ
 10260                                  	;mov	bx,[si+5]
 10261 000023BD 8B5C05                  	MOV	BX,[SI+SF_ENTRY.sf_flags]
 10262                                  	;test	bx,8000h
 10263 000023C0 F7C30080                	TEST	BX,sf_isnet	; 8000H		; output to NET?
 10264 000023C4 751D                    	JNZ	short TRIPOPJ 			; if so, no echo
 10265                                  	;test	bx,80h
 10266 000023C6 F7C38000                	TEST	BX,devid_device ; 80H		; output to file?
 10267 000023CA 7417                    	JZ	SHORT TRIPOPJ 			; if so, no echo
 10268                                  	; 14/03/2018
 10269                                  	;call	GET_IO_FCB	 	; IBMDOS.COM, MSDOS 2.11
 10270                                  	;jc	short TRIPOPJ
 10271                                  	; MSDOS 2.11
 10272                                  	;test	byte [SI+18H], 80h
 10273                                  	;jz	short TRIPOPJ
 10274 000023CC BB0400                  	MOV	BX,4
 10275 000023CF E8E81C                  	CALL	GET_IO_SFT
 10276 000023D2 720F                    	JC	SHORT TRIPOPJ
 10277                                  	;test	word [si+5], 800h
 10278 000023D4 F744050008              	TEST	word [SI+SF_ENTRY.sf_flags],sf_net_spool ; 800H 
 10279                                  						; StdPrn redirected?
 10280                                  	;JZ	SHORT LISSTRT2J			; No, OK to echo
 10281 000023D9 0F848E00                	jz	LISSTRT2 ; 10/08/2018 
 10282                                  	;MOV	BYTE [PFLAG],0			
 10283 000023DD 36C606[AC02]00          	MOV	BYTE [SS:PFLAG],0		; If a spool, NEVER echo
 10284                                  	; MSDOS 2.11
 10285                                  	;mov	bx,4
 10286                                  	;jmp	short LISSTRT2
 10287                                  	
 10288                                  TRIPOPJ:
 10289                                  	; 20/07/2018
 10290 000023E3 E98800                  	JMP	TRIPOP
 10291                                  
 10292                                  ;LISSTRT2J:
 10293                                  ;	JMP	LISSTRT2
 10294                                  
 10295                                  CTRLOUT:
 10296 000023E6 3C0D                    	CMP	AL,c_CR ; 0Dh
 10297 000023E8 7420                    	JZ	SHORT ZERPOS
 10298 000023EA 3C08                    	CMP	AL,c_BS ; 8
 10299 000023EC 7428                    	JZ	SHORT BACKPOS
 10300 000023EE 3C09                    	CMP	AL,c_HT ; 9
 10301 000023F0 759F                    	JNZ	SHORT OUTCH
 10302                                  	;MOV	AL,[CARPOS]
 10303 000023F2 36A0[A701]              	MOV	AL,[SS:CARPOS]
 10304 000023F6 0CF8                    	OR	AL,0F8H
 10305 000023F8 F6D8                    	NEG	AL
 10306                                  
 10307                                  TAB:
 10308 000023FA 51                      	PUSH	CX
 10309 000023FB 88C1                    	MOV	CL,AL
 10310 000023FD B500                    	MOV	CH,0
 10311 000023FF E307                    	JCXZ	POPTAB
 10312                                  TABLP:
 10313 00002401 B020                    	MOV	AL," "
 10314 00002403 E87EFF                  	CALL	OUTT
 10315 00002406 E2F9                    	LOOP	TABLP
 10316                                  POPTAB:
 10317 00002408 59                      	POP	CX
 10318 00002409 C3                      	RETN
 10319                                  
 10320                                  ZERPOS:
 10321                                  	;MOV	BYTE PTR [CARPOS],0
 10322 0000240A 36C606[A701]00          	MOV	BYTE [SS:CARPOS],0
 10323                                  	; 10/08/2018
 10324 00002410 E97EFF                  	JMP	OUTCH
 10325                                  OUTJ:	
 10326 00002413 E96EFF                  	JMP	OUTT
 10327                                  
 10328                                  BACKPOS:
 10329                                  	;DEC	BYTE PTR [CARPOS]
 10330 00002416 36FE0E[A701]            	DEC	BYTE [SS:CARPOS]
 10331 0000241B E973FF                  	JMP	OUTCH
 10332                                  
 10333                                  BUFOUT:
 10334 0000241E 3C20                    	CMP	AL," "
 10335 00002420 73F1                    	JAE	SHORT OUTJ		;Normal char
 10336 00002422 3C09                    	CMP	AL,9
 10337 00002424 74ED                    	JZ	SHORT OUTJ		;OUT knows how to expand tabs
 10338                                  	;DOS 3.3  7/14/86
 10339 00002426 3C15                    	CMP	AL,"U"-"@" ; 15h	; turn ^U to section symbol
 10340 00002428 740D                    	JZ	short CTRLU
 10341 0000242A 3C14                    	CMP	AL,"T"-"@" ; 14h	; turn ^T to paragraph symbol
 10342 0000242C 7409                    	JZ	short CTRLU
 10343                                  NOT_CTRLU:
 10344                                  	;DOS 3.3  7/14/86
 10345 0000242E 50                      	PUSH	AX
 10346 0000242F B05E                    	MOV	AL,"^"
 10347 00002431 E850FF                  	CALL	OUTT		;Print '^' before control chars
 10348 00002434 58                      	POP	AX
 10349 00002435 0C40                    	OR	AL,40H		;Turn it into Upper case mate
 10350                                  CTRLU:
 10351 00002437 E84AFF                  	CALL	OUTT
 10352                                  BUFOUT_RETN:
 10353 0000243A C3                      	RETN
 10354                                  
 10355                                  ;
 10356                                  ;----------------------------------------------------------------------------
 10357                                  ;
 10358                                  ;**	$STD_AUX_INPUT - System Call 3
 10359                                  ;
 10360                                  ;	$STD_AUX_INPUT returns a character from Aux Input
 10361                                  ;
 10362                                  ;	ENTRY	none
 10363                                  ;	EXIT	(al) = character
 10364                                  ;	USES	all
 10365                                  ;
 10366                                  ;----------------------------------------------------------------------------
 10367                                  ;
 10368                                  
 10369                                  _$STD_AUX_INPUT:	;System call 3
 10370                                  
 10371 0000243B E8B232                  	CALL	STATCHK
 10372 0000243E BB0300                  	MOV	BX,3
 10373 00002441 E8761C                  	CALL	GET_IO_SFT	; 20/07/2018 - MSDOS 3.3 (MSDOS 6.0)
 10374                                  	;CALL	GET_IO_FCB	; 14/03/2018 - MSDOS 2.11
 10375                                  	;retc
 10376 00002444 72F4                    	JC	SHORT BUFOUT_RETN
 10377 00002446 EB03                    	JMP	SHORT TAISTRT
 10378                                  AUXILP:
 10379 00002448 E88632                  	CALL	SPOOLINT
 10380                                  TAISTRT:
 10381 0000244B B401                    	MOV	AH,1
 10382 0000244D E8FD28                  	CALL	IOFUNC
 10383 00002450 74F6                    	JZ	SHORT AUXILP
 10384 00002452 30E4                    	XOR	AH,AH
 10385 00002454 E8F628                  	CALL	IOFUNC
 10386 00002457 C3                      	RETN
 10387                                  
 10388                                  ;
 10389                                  ;----------------------------------------------------------------------------
 10390                                  ;
 10391                                  ;**	$STD_AUX_OUTPUT - Output character to AUX
 10392                                  ;
 10393                                  ;	ENTRY	(dl) = character
 10394                                  ;	EXIT	none
 10395                                  ;	USES	all
 10396                                  ;
 10397                                  ;----------------------------------------------------------------------------
 10398                                  ;
 10399                                  
 10400                                  _$STD_AUX_OUTPUT:	;System call 4
 10401                                  
 10402 00002458 53                      	PUSH	BX
 10403 00002459 BB0300                  	MOV	BX,3
 10404 0000245C EB04                    	JMP	SHORT SENDOUT
 10405                                  
 10406                                  ;
 10407                                  ;----------------------------------------------------------------------------
 10408                                  ;
 10409                                  ;**	$STD_PRINTER_OUTPUT - Output character to printer
 10410                                  ;
 10411                                  ;	ENTRY	(dl) = character
 10412                                  ;	EXIT	none
 10413                                  ;	USES	all
 10414                                  ;
 10415                                  ;----------------------------------------------------------------------------
 10416                                  ;
 10417                                  
 10418                                  _$STD_PRINTER_OUTPUT:	;System call 5
 10419                                  
 10420 0000245E 53                      	PUSH	BX
 10421 0000245F BB0400                  	MOV	BX,4
 10422                                  
 10423                                  SENDOUT:
 10424 00002462 88D0                    	MOV	AL,DL
 10425 00002464 50                      	PUSH	AX
 10426 00002465 E88832                  	CALL	STATCHK
 10427 00002468 58                      	POP	AX
 10428 00002469 1E                      	PUSH	DS
 10429 0000246A 56                      	PUSH	SI
 10430                                  LISSTRT2:
 10431 0000246B E8D0FE                  	CALL	RAWOUT2
 10432                                  TRIPOP:
 10433 0000246E 5E                      	POP	SI
 10434 0000246F 1F                      	POP	DS
 10435 00002470 5B                      	POP	BX
 10436                                  SCIS_RETN:	; 20/07/2018
 10437 00002471 C3                      	RETN
 10438                                  ;
 10439                                  ;----------------------------------------------------------------------------
 10440                                  ;
 10441                                  ;**	$STD_CON_INPUT_STATUS - System Call 11
 10442                                  ;
 10443                                  ;	Check console input status
 10444                                  ;
 10445                                  ;	ENTRY	none
 10446                                  ;	EXIT	AL = -1 character available, = 0 no character
 10447                                  ;	USES	all
 10448                                  ;
 10449                                  ;----------------------------------------------------------------------------
 10450                                  ;
 10451                                  
 10452                                  _$STD_CON_INPUT_STATUS:		 ;System call 11
 10453                                  
 10454 00002472 E87B32                  	CALL	STATCHK
 10455 00002475 B000                    	MOV	AL,0			; no xor!!
 10456                                  	;retz
 10457 00002477 74F8                    	JZ	SHORT SCIS_RETN ; 15/04/2018
 10458 00002479 0CFF                    	OR	AL,-1
 10459                                  ;SCIS_RETN:
 10460 0000247B C3                      	RETN
 10461                                  
 10462                                  ;
 10463                                  ;----------------------------------------------------------------------------
 10464                                  ;
 10465                                  ;**	$STD_CON_INPUT_FLUSH - System Call 12
 10466                                  ;
 10467                                  ;	Flush console input buffer and perform call in AL
 10468                                  ;
 10469                                  ;	ENTRY	(AL) = DOS function to be called after flush (1,6,7,8,10)
 10470                                  ;	EXIT	(al) = 0 iff (al) was not one of the supported fcns
 10471                                  ;		return arguments for the fcn supplied in (AL)
 10472                                  ;	USES	all
 10473                                  ;
 10474                                  ;----------------------------------------------------------------------------
 10475                                  ;
 10476                                  
 10477                                  _$STD_CON_INPUT_FLUSH:		;System call 12
 10478                                  
 10479 0000247C 50                      	PUSH	AX
 10480 0000247D 52                      	PUSH	DX
 10481 0000247E 31DB                    	XOR	BX,BX
 10482 00002480 E8371C                  	CALL	GET_IO_SFT	; 20/07/2018 - MSDOS 3.3 (MSDOS 6.0)
 10483                                  	;CALL	GET_IO_FCB	; 14/03/2018 - MSDOS 2.11
 10484 00002483 7205                    	JC	SHORT BADJFNCON
 10485 00002485 B404                    	MOV	AH,4
 10486 00002487 E8C328                  	CALL	IOFUNC
 10487                                  
 10488                                  BADJFNCON:
 10489 0000248A 5A                      	POP	DX
 10490 0000248B 58                      	POP	AX
 10491 0000248C 88C4                    	MOV	AH,AL
 10492 0000248E 3C01                    	CMP	AL,1
 10493 00002490 7413                    	JZ	SHORT REDISPJ
 10494 00002492 3C06                    	CMP	AL,6
 10495 00002494 740F                    	JZ	SHORT REDISPJ
 10496 00002496 3C07                    	CMP	AL,7
 10497 00002498 740B                    	JZ	SHORT REDISPJ
 10498 0000249A 3C08                    	CMP	AL,8
 10499 0000249C 7407                    	JZ	SHORT REDISPJ
 10500 0000249E 3C0A                    	CMP	AL,10
 10501 000024A0 7403                    	JZ	SHORT REDISPJ
 10502 000024A2 B000                    	MOV	AL,0
 10503 000024A4 C3                      	RETN
 10504                                  
 10505                                  REDISPJ:
 10506 000024A5 FA                      	CLI
 10507                                  	;transfer REDISP
 10508 000024A6 E99CF0                  	JMP	REDISP
 10509                                  
 10510                                  ;============================================================================
 10511                                  ; FCBIO.ASM, MSDOS 6.0, 1991
 10512                                  ;============================================================================
 10513                                  ; 20/07/2018 - Retro DOS v3.0
 10514                                  
 10515                                  ;**	FCBIO.ASM - Ancient 1.0 1.1 FCB system calls
 10516                                  ;
 10517                                  ;	$GET_FCB_POSITION
 10518                                  ;	$FCB_DELETE
 10519                                  ;	$GET_FCB_FILE_LENGTH
 10520                                  ;	$FCB_CLOSE
 10521                                  ;	$FCB_RENAME
 10522                                  ;	SaveFCBInfo
 10523                                  ;	ResetLRU
 10524                                  ;	SetOpenAge
 10525                                  ;	LRUFCB
 10526                                  ;	FCBRegen
 10527                                  ;	BlastSFT
 10528                                  ;	CheckFCB
 10529                                  ;	SFTFromFCB
 10530                                  ;	FCBHardErr
 10531                                  ;
 10532                                  ;	Revision history:
 10533                                  ;
 10534                                  ;		Created: ARR 4 April 1983"
 10535                                  ;			 MZ  6 June  1983 completion of functions
 10536                                  ;			 MZ 15 Dec   1983 Brain damaged programs close FCBs multiple
 10537                                  ;					  times.  Change so successive closes work by
 10538                                  ;					  always returning OK.	Also, detect I/O to
 10539                                  ;					  already closed FCB and return EOF.
 10540                                  ;			 MZ 16 Jan   1984 More braindamage.  Need to separate info
 10541                                  ;					  out of sft into FCB for reconnection
 10542                                  ;
 10543                                  ;		A000	 version 4.00  Jan. 1988
 10544                                  
 10545                                  ;Break <$Get_FCB_Position - set random record fields to current pos>
 10546                                  ;----------------------------------------------------------------------------
 10547                                  ;
 10548                                  ;   $Get_FCB_Position - look at an FCB, retrieve the current position from the
 10549                                  ;	extent and next record field and set the random record field to point
 10550                                  ;	to that record
 10551                                  ;
 10552                                  ;   Inputs:	DS:DX point to a possible extended FCB
 10553                                  ;   Outputs:	The random record field of the FCB is set to the current record
 10554                                  ;   Registers modified: all
 10555                                  ;
 10556                                  ;----------------------------------------------------------------------------
 10557                                  ;
 10558                                  
 10559                                  _$GET_FCB_POSITION:
 10560 000024A9 E81D05                  	call	GetExtended		; point to FCB
 10561 000024AC E8ED04                  	call	GetExtent		; DX:AX is current record
 10562                                  	;mov	[si+21h],ax
 10563 000024AF 894421                  	MOV	[SI+SYS_FCB.RR],AX ; drop in low order piece
 10564                                  	;mov	[si+23h],dl
 10565 000024B2 885423                  	MOV	[SI+SYS_FCB.RR+2],DL	; drop in high order piece
 10566                                  	;cmp	word [si+0Eh],64
 10567 000024B5 837C0E40                	CMP	word [SI+SYS_FCB.RECSIZ],64
 10568 000024B9 7303                    	JAE	short GetFCBBye
 10569                                  	;mov	[si+24h],dh
 10570 000024BB 887424                  	MOV	[SI+SYS_FCB.RR+2+1],DH	; Set 4th byte only if record size < 64
 10571                                  GetFCBBye:
 10572 000024BE E95BF2                  	jmp	FCB_RET_OK
 10573                                  
 10574                                  
 10575                                  ;Break <$FCB_Delete - remove several files that match the input FCB>
 10576                                  ;----------------------------------------------------------------------------
 10577                                  ;
 10578                                  ;**	$FCB_Delete - Delete from FCB Template
 10579                                  ;
 10580                                  ;	given an FCB, remove all directory entries in the current
 10581                                  ;	directory that have names that match the FCB's ?  marks.
 10582                                  ;
 10583                                  ;	ENTRY	(DS:DX) = address of FCB
 10584                                  ;	EXIT	entries matching the FCB are deleted
 10585                                  ;		(al) = ff iff no entries were deleted
 10586                                  ;	USES	all
 10587                                  ;
 10588                                  ;----------------------------------------------------------------------------
 10589                                  ;
 10590                                  
 10591                                  _$FCB_DELETE:		; System call 19
 10592                                  					; OpenBuf is in DOSDATA
 10593 000024C1 BF[6003]                	MOV	DI,OPENBUF 		; appropriate place 
 10594                                  
 10595 000024C4 E82145                  	call	TransFCB		; convert FCB to path
 10596 000024C7 720A                    	JC	short BadPath 		; signal no deletions
 10597                                  
 10598 000024C9 16                      	push	SS
 10599 000024CA 1F                      	pop	DS			; SS is DOSDATA
 10600                                  
 10601 000024CB E89E0D                  	call	DOS_DELETE		; wham
 10602 000024CE 7203                    	JC	short BadPath
 10603                                  GoodPath:
 10604 000024D0 E949F2                  	jmp	FCB_RET_OK		; do a good return
 10605                                  BadPath:
 10606                                  	; Error code is in AX
 10607                                  
 10608 000024D3 E949F2                  	jmp	FCB_RET_ERR		; let someone else signal the error
 10609                                  
 10610                                  
 10611                                  ;Break <$Get_FCB_File_Length - return the length of a file>
 10612                                  ;----------------------------------------------------------------------------
 10613                                  ;
 10614                                  ;   $Get_FCB_File_Length - set the random record field to the length of the
 10615                                  ;	file in records (rounded up if partial).
 10616                                  ;
 10617                                  ;   Inputs:	DS:DX - point to a possible extended FCB
 10618                                  ;   Outputs:	Random record field updated to reflect the number of records
 10619                                  ;   Registers modified: all
 10620                                  ;
 10621                                  ;----------------------------------------------------------------------------
 10622                                  ;
 10623                                  
 10624                                  _$GET_FCB_FILE_LENGTH:
 10625                                  
 10626 000024D6 E8F004                  	call	GetExtended		; get real FCB pointer
 10627                                  					; DX points to Input FCB
 10628                                  
 10629                                  					; OpenBuf is in DOSDATA
 10630 000024D9 BF[6003]                	MOV	DI,OPENBUF		; appropriate buffer
 10631                                  
 10632 000024DC 1E                      	push	ds			; save pointer to true FCB
 10633 000024DD 56                      	push	si
 10634 000024DE E80745                  	call	TransFCB		; Trans name DS:DX, sets SATTRIB
 10635 000024E1 5E                      	pop	si
 10636 000024E2 1F                      	pop	ds
 10637 000024E3 72EE                    	JC	short BadPath
 10638 000024E5 1E                      	push	ds			; save pointer
 10639 000024E6 56                      	push	si
 10640 000024E7 16                      	push	ss		
 10641 000024E8 1F                      	pop	ds
 10642 000024E9 E80311                  	call	GET_FILE_INFO		; grab the info
 10643 000024EC 5E                      	pop	si			; get pointer back
 10644 000024ED 1F                      	pop	ds
 10645 000024EE 72E3                    	JC	short BadPath 		; invalid something
 10646 000024F0 89DA                    	MOV	DX,BX			; get high order size
 10647 000024F2 89F8                    	MOV	AX,DI			; get low order size
 10648                                  	;mov	 bx,[si+0Eh]
 10649 000024F4 8B5C0E                  	MOV	BX,[SI+SYS_FCB.RECSIZ]	; get his record size
 10650 000024F7 09DB                    	OR	BX,BX			; empty record => 0 size for file
 10651 000024F9 7503                    	JNZ	short GetSize 		; not empty
 10652 000024FB BB8000                  	MOV	BX,128
 10653                                  GetSize:
 10654 000024FE 89C7                    	MOV	DI,AX			; save low order word
 10655 00002500 89D0                    	MOV	AX,DX			; move high order for divide
 10656 00002502 31D2                    	XOR	DX,DX			; clear out high
 10657 00002504 F7F3                    	DIV	BX			; wham
 10658 00002506 50                      	PUSH	AX			; save dividend
 10659 00002507 89F8                    	MOV	AX,DI			; get low order piece
 10660 00002509 F7F3                    	DIV	BX			; wham
 10661 0000250B 89D1                    	MOV	CX,DX			; save remainder
 10662 0000250D 5A                      	POP	DX			; get high order dividend
 10663 0000250E E306                    	JCXZ	LengthStore		; no roundup
 10664 00002510 83C001                  	ADD	AX,1
 10665 00002513 83D200                  	ADC	DX,0			; 32-bit increment
 10666                                  LengthStore:
 10667                                  	;mov	[si+21h],ax
 10668 00002516 894421                  	MOV	[SI+SYS_FCB.RR],AX	; store low order
 10669                                  	;mov	[si+23h],dl
 10670 00002519 885423                  	MOV	[SI+SYS_FCB.RR+2],DL	; store high order
 10671 0000251C 08F6                    	OR	DH,DH
 10672 0000251E 74B0                    	JZ	short GoodPath		; not storing insignificant zero
 10673                                  	;mov	[si+24h],dh
 10674 00002520 887424                  	MOV	[SI+SYS_FCB.RR+3],DH	; save that high piece
 10675                                  GoodRet:
 10676                                  	;jmp	FCB_RET_OK
 10677 00002523 EBAB                    	jmp	short GoodPath
 10678                                  
 10679                                  ;Break <$FCB_Close - close a file>
 10680                                  ;----------------------------------------------------------------------------
 10681                                  ;
 10682                                  ;   $FCB_Close - given an FCB, look up the SFN and close it.  Do not free it
 10683                                  ;	as the FCB may be used for further I/O
 10684                                  ;
 10685                                  ;   Inputs:	DS:DX point to FCB
 10686                                  ;   Outputs:	AL = FF if file was not found on disk
 10687                                  ;   Registers modified: all
 10688                                  ;
 10689                                  ;----------------------------------------------------------------------------
 10690                                  ;
 10691                                  
 10692                                  _$FCB_CLOSE:		; System call 16
 10693                                  
 10694 00002525 30C0                    	XOR	AL,AL			; default search attributes
 10695 00002527 E89F04                  	call	GetExtended		; DS:SI point to real FCB
 10696 0000252A 7403                    	JZ	short NoAttr		; not extended
 10697 0000252C 8A44FF                  	MOV	AL,[SI-1]		; get attributes
 10698                                  NoAttr:
 10699                                  					; SS override
 10700 0000252F 36A2[0605]              	MOV	[SS:ATTRIB],AL		; stash away found attributes
 10701 00002533 E80804                  	call	SFTFromFCB
 10702 00002536 72EB                    	JC	short GoodRet 		; MZ 16 Jan Assume death
 10703                                  
 10704                                  	;
 10705                                  	; If the sharer is present, then the SFT is not regenable. Thus, 
 10706                                  	; there is no need to set the SFT's attribute.
 10707                                  	;
 10708                                  
 10709                                  	;;; 9/8/86 F.C. save SFT attribute and restore it back when close is 
 10710                                  	;;; done
 10711                                  
 10712                                  	;mov	al,[es:di+4]
 10713 00002538 268A4504                	MOV	AL,[ES:DI+SF_ENTRY.sf_attr]
 10714 0000253C 30E4                    	XOR	AH,AH
 10715 0000253E 50                      	PUSH	AX
 10716                                  
 10717                                  	;;; 9/8/86 F.C. save SFT attribute and restore it back when close is 
 10718                                  	;;; done
 10719                                  
 10720 0000253F E8DF4D                  	call	CheckShare
 10721 00002542 7508                    	JNZ	short NoStash
 10722 00002544 36A0[0605]              	MOV	AL,[SS:ATTRIB]
 10723                                  	;mov	[es:di+4],al
 10724 00002548 26884504                	MOV	[ES:DI+SF_ENTRY.sf_attr],AL ; attempted attribute for close
 10725                                  NoStash:
 10726                                  	;mov	ax,[si+14h]
 10727 0000254C 8B4414                  	MOV	AX,[SI+SYS_FCB.FDATE] ; move in the time and date
 10728                                  	;mov	[es:di+0Fh],ax
 10729 0000254F 2689450F                	MOV	[ES:DI+SF_ENTRY.sf_date],AX
 10730                                  	;mov	ax,[si+16h]
 10731 00002553 8B4416                  	MOV	AX,[SI+SYS_FCB.FTIME]
 10732                                  	;mov	[es:di+0Dh],ax
 10733 00002556 2689450D                	MOV	[ES:DI+SF_ENTRY.sf_time],AX
 10734                                  	;mov	ax,[si+10h]
 10735 0000255A 8B4410                  	MOV	AX,[SI+SYS_FCB.FILSIZ]
 10736                                  	;mov	[es:di+11h],ax
 10737 0000255D 26894511                	MOV	[ES:DI+SF_ENTRY.sf_size],AX
 10738                                  	;mov	ax,[si+12h]
 10739 00002561 8B4412                  	MOV	AX,[SI+SYS_FCB.FILSIZ+2]
 10740                                  	;mov	[es:di+13h],ax
 10741 00002564 26894513                	MOV	[ES:DI+SF_ENTRY.sf_size+2],AX
 10742                                  	;or	word [es:di+5],4000h
 10743 00002568 26814D050040            	OR	word [ES:DI+SF_ENTRY.sf_flags],sf_close_nodate
 10744 0000256E 16                      	push	ss
 10745 0000256F 1F                      	pop	ds
 10746 00002570 E84B15                  	call	DOS_CLOSE	; wham
 10747 00002573 C43E[3605]              	LES	DI,[THISSFT]
 10748                                  
 10749                                  	;;; 9/8/86 F.C. restore SFT attribute
 10750 00002577 59                      	POP	CX
 10751                                  	;mov	[es:di+4],cl
 10752 00002578 26884D04                	MOV	[ES:DI+SF_ENTRY.sf_attr],CL
 10753                                  	;;; 9/8/86 F.C. restore SFT attribute
 10754                                  
 10755 0000257C 9C                      	PUSHF
 10756                                  	;test	word [es:di],0FFFFh
 10757                                  	;cmp	word [ES:DI+SF_ENTRY.sf_ref_count],0
 10758                                  				; zero ref count gets blasted
 10759 0000257D 26833D00                	cmp	word [ES:DI],0
 10760 00002581 7507                    	jnz     short CloseOK
 10761 00002583 50                      	PUSH	AX
 10762 00002584 B04D                    	MOV	AL,'M'
 10763 00002586 E8DA02                  	call	BlastSFT
 10764 00002589 58                      	POP	AX
 10765                                  CloseOK:
 10766 0000258A 9D                      	POPF
 10767 0000258B 7396                    	JNC	short GoodRet
 10768                                  	;cmp	al,6
 10769 0000258D 3C06                    	CMP	AL,error_invalid_handle
 10770 0000258F 7492                    	JZ	short GoodRet
 10771                                  	;mov	al,2
 10772 00002591 B002                    	MOV	AL,error_file_not_found
 10773                                  fcb_close_err:
 10774 00002593 E989F1                  	jmp	FCB_RET_ERR
 10775                                  
 10776                                  ;
 10777                                  ;----------------------------------------------------------------------------
 10778                                  ;
 10779                                  ;**	$FCB_Rename - Rename a File
 10780                                  ;
 10781                                  ;	$FCB_Rename - rename a file in place within a directory.  Renames
 10782                                  ;	multiple files copying from the meta characters.
 10783                                  ;
 10784                                  ;	ENTRY	DS:DX point to an FCB.	The normal name field is the source
 10785                                  ;		    name of the files to be renamed.  Starting at offset 11h
 10786                                  ;		    in the FCB is the destination name.
 10787                                  ;	EXIT	AL = 0 -> no error occurred and all files were renamed
 10788                                  ;		AL = FF -> some files may have been renamed but:
 10789                                  ;			rename to existing file or source file not found
 10790                                  ;	USES	ALL
 10791                                  ;
 10792                                  ;----------------------------------------------------------------------------
 10793                                  ;
 10794                                  
 10795                                  _$FCB_RENAME:		; System call 23
 10796                                  
 10797 00002596 E83004                  	call	GetExtended		; get pointer to real FCB
 10798 00002599 52                      	push	dx
 10799 0000259A 8A04                    	MOV	AL,[SI] 		; get drive byte
 10800 0000259C 83C610                  	ADD	SI,10h			; point to destination
 10801                                  
 10802                                  					; RenBuf is in DOSDATA
 10803 0000259F BF[E003]                	MOV	DI,RENBUF		; point to destination buffer
 10804 000025A2 FF34                    	push	word [SI]
 10805 000025A4 1E                      	push	ds
 10806                                  	;push	di			; save source pointer for TransFCB
 10807                                  	; 16/01/2024 - BugFix !
 10808 000025A5 56                      	push	si
 10809 000025A6 8804                    	MOV	[SI],AL			; drop in real drive
 10810 000025A8 89F2                    	MOV	DX,SI			; let TransFCB know where the FCB is
 10811 000025AA E83B44                  	call	TransFCB		; munch this pathname
 10812 000025AD 5E                      	pop	si
 10813 000025AE 1F                      	pop	ds	
 10814 000025AF 8F04                    	pop	WORD [SI]		; get path back
 10815 000025B1 5A                      	pop	dx			; Original FCB pointer
 10816 000025B2 721A                    	JC	short fren90		; bad path -> error
 10817                                  
 10818                                  					; SS override for WFP_Start & Ren_WFP
 10819 000025B4 368B36[4A05]            	MOV	SI,[ss:WFP_START]	; get pointer
 10820 000025B9 368936[4C05]            	MOV	[ss:REN_WFP],SI		; stash it
 10821                                  
 10822                                  					; OpenBuf is in DOSDATA
 10823 000025BE BF[6003]                	MOV	DI,OPENBUF		; appropriate spot
 10824 000025C1 E82444                  	call	TransFCB		; wham
 10825                                  					; NOTE that this call is pointing
 10826                                  					;  back to the ORIGINAL FCB so
 10827                                  					;  SATTRIB gets set correctly
 10828 000025C4 7208                    	JC	short fren90		; error
 10829 000025C6 E84E0E                  	call	DOS_RENAME
 10830 000025C9 7203                    	JC	short fren90
 10831 000025CB E94EF1                  	jmp	FCB_RET_OK
 10832                                  
 10833                                  ;	Error -
 10834                                  ;
 10835                                  ;	(al) = error code
 10836                                  
 10837                                  fren90:	
 10838 000025CE E94EF1                  	jmp	FCB_RET_ERR
 10839                                  
 10840                                  
 10841                                  ;Break <Misbehavior fixers>
 10842                                  ;
 10843                                  ;   FCBs suffer from several problems.	First, they are maintained in the
 10844                                  ;   user's space so he may move them at will.  Second, they have a small
 10845                                  ;   reserved area that may be used for system information.  Third, there was
 10846                                  ;   never any "rules for behavior" for FCBs; there was no protocol for their
 10847                                  ;   usage.
 10848                                  ;
 10849                                  ;   This results in the following misbehavior:
 10850                                  ;
 10851                                  ;	infinite opens of the same file:
 10852                                  ;
 10853                                  ;	While (TRUE) {			While (TRUE) {
 10854                                  ;	    FCBOpen (FCB);		    FCBOpen (FCB);
 10855                                  ;	    Read (FCB); 		    Write (FCB);
 10856                                  ;	    }				    }
 10857                                  ;
 10858                                  ;	infinite opens of different files:
 10859                                  ;
 10860                                  ;	While (TRUE) {			While (TRUE) {
 10861                                  ;	    FCBOpen (FCB[i++]); 	    FCBOpen (FCB[i++]);
 10862                                  ;	    Read (FCB); 		    Write (FCB);
 10863                                  ;	    }				    }
 10864                                  ;
 10865                                  ;	multiple closes of the same file:
 10866                                  ;
 10867                                  ;	FCBOpen (FCB);
 10868                                  ;	while (TRUE)
 10869                                  ;	    FCBClose (FCB);
 10870                                  ;
 10871                                  ;	I/O after closing file:
 10872                                  ;
 10873                                  ;	FCBOpen (FCB);
 10874                                  ;	while (TRUE) {
 10875                                  ;	    FCBWrite (FCB);
 10876                                  ;	    FCBClose (FCB);
 10877                                  ;	    }
 10878                                  ;
 10879                                  ;   The following is am implementation of a methodology for emulating the
 10880                                  ;   above with the exception of I/O after close.  We are NOT attempting to
 10881                                  ;   resolve that particular misbehavior.  We will enforce correct behaviour in
 10882                                  ;   FCBs when they refer to a network file or when there is file sharing on
 10883                                  ;   the local machine.
 10884                                  ;
 10885                                  ;   The reserved fields of the FCB (10 bytes worth) is divided up into various
 10886                                  ;   structures depending on the file itself and the state of operations of the
 10887                                  ;   OS.  The information contained in this reserved field is enough to
 10888                                  ;   regenerate the SFT for the local non-shared file.  It is assumed that this
 10889                                  ;   regeneration procedure may be expensive.  The SFT for the FCB is
 10890                                  ;   maintained in a LRU cache as the ONLY performance inprovement.
 10891                                  ;
 10892                                  ;   No regeneration of SFTs is attempted for network FCBs.
 10893                                  ;
 10894                                  ;   To regenerate the SFT for a local FCB, it is necessary to determine if the
 10895                                  ;   file sharer is working.  If the file sharer is present then the SFT is not
 10896                                  ;   regenerated.
 10897                                  ;
 10898                                  ;   Finally, if there is no local sharing, the full name of the file is no
 10899                                  ;   longer available.  We can make up for this by using the following
 10900                                  ;   information:
 10901                                  ;
 10902                                  ;	The Drive number (from the DPB).
 10903                                  ;	The physical sector of the directory that contains the entry.
 10904                                  ;	The relative position of the entry in the sector.
 10905                                  ;	The first cluster field.
 10906                                  ;	The last used SFT.
 10907                                  ;      OR In the case of a device FCB
 10908                                  ;	The low 6 bits of sf_flags (indicating device type)
 10909                                  ;	The pointer to the device header
 10910                                  ;
 10911                                  ;
 10912                                  ;   We read in the particular directory sector and examine the indicated
 10913                                  ;   directory entry.  If it matches, then we are kosher; otherwise, we fail.
 10914                                  ;
 10915                                  ;   Some key items need to be remembered:
 10916                                  ;
 10917                                  ;	Even though we are caching SFTs, they may contain useful sharing
 10918                                  ;	information.  We enforce good behavior on the FCBs.
 10919                                  ;
 10920                                  ;	Network support must not treat FCBs as impacting the ref counts on
 10921                                  ;	open VCs.  The VCs may be closed only at process termination.
 10922                                  ;
 10923                                  ;	If this is not an installed version of the DOS, file sharing will
 10924                                  ;	always be present.
 10925                                  ;
 10926                                  ;	We MUST always initialize lstclus to = firclus when regenerating a
 10927                                  ;	file. Otherwise we start allocating clusters up the wazoo.
 10928                                  ;
 10929                                  ;	Always initialize, during regeneration, the mode field to both isFCB
 10930                                  ;	and open_for_both.  This is so the FCB code in the sharer can find the
 10931                                  ;	proper OI record.
 10932                                  ;
 10933                                  ;   The test bits are:
 10934                                  ;
 10935                                  ;	00 -> local file
 10936                                  ;	40 -> sharing local
 10937                                  ;	80 -> network
 10938                                  ;	C0 -> local device
 10939                                  
 10940                                  ;Break	<SaveFCBInfo - store pertinent information from an SFT into the FCB>
 10941                                  ;----------------------------------------------------------------------------
 10942                                  ;
 10943                                  ;   SaveFCBInfo - given an FCB and its associated SFT, copy the relevant
 10944                                  ;	pieces of information into the FCB to allow for subsequent
 10945                                  ;	regeneration. Poke LRU also.
 10946                                  ;
 10947                                  ;   Inputs:	ThisSFT points to a complete SFT.
 10948                                  ;		DS:SI point to the FCB (not an extended one)
 10949                                  ;   Outputs:	The relevant reserved fields in the FCB are filled in.
 10950                                  ;		DS:SI preserved
 10951                                  ;		ES:DI point to sft
 10952                                  ;   Registers modified: All
 10953                                  ;
 10954                                  ;
 10955                                  ;----------------------------------------------------------------------------
 10956                                  ;
 10957                                  
 10958                                  SaveFCBInfo:
 10959                                  
 10960 000025D1 36C43E[3605]            	LES	DI,[SS:THISSFT]		; SS override
 10961 000025D6 E80AFA                  	call	IsSFTNet
 10962 000025D9 7419                    	JZ	short SaveLocal		; if not network then save local info
 10963                                  ;
 10964                                  ;----- In net support -----
 10965                                  ;
 10966                                  	; MSDOS 6.0
 10967                                  	;MOV	AX,[ES:DI+sf_serial_ID] ;AN000;;IFS. save IFS ID
 10968                                  	;MOV	[SI+fcb_netID],ax	;AN000;;IFS.
 10969                                  	; MSDOS 3.3
 10970                                  	;mov	ax,[es:di+1Dh]
 10971 000025DB 268B451D                	mov	ax,[es:di+SF_ENTRY.sf_dirsec]
 10972                                  	;mov	[si+1Ah],ax
 10973 000025DF 89441A                  	mov	[si+fcb_net_handle],ax
 10974                                  
 10975                                  	; MSDOS 3.3
 10976 000025E2 06                      	push	es
 10977 000025E3 57                      	push	di
 10978                                  	;les	di,[es:di+19h]
 10979 000025E4 26C47D19                	LES	DI,[ES:DI+sf_netid]
 10980                                  	;mov	[si+1Ch],di
 10981 000025E8 897C1C                  	MOV	[SI+fcb_netID],DI	; save net ID
 10982                                  	;mov 	[si+1Eh],es
 10983 000025EB 8C441E                  	MOV	[SI+fcb_netID+2],ES
 10984 000025EE 5F                      	pop	di
 10985 000025EF 07                      	pop	es
 10986                                  
 10987                                  	;mov	bl,80h
 10988 000025F0 B380                    	MOV	BL,FCBNETWORK
 10989                                  ;
 10990                                  ;----- END In net support -----
 10991                                  ;
 10992 000025F2 EB4C                    	jmp	SHORT SaveSFN
 10993                                  
 10994                                  SaveLocal:
 10995                                  	;IF	Installed
 10996 000025F4 E82A4D                  	call	CheckShare
 10997 000025F7 7402                    	JZ	short SaveNoShare	; no sharer
 10998 000025F9 EB40                    	JMP	short SaveShare		; sharer present
 10999                                  
 11000                                  SaveNoShare:
 11001                                  	;test 	word [es:di+5],80h
 11002 000025FB 26F745058000            	TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 11003 00002601 7526                    	JNZ	short SaveNoShareDev	; Device
 11004                                  	;
 11005                                  	; Save no sharing local file information
 11006                                  	;
 11007                                  	;mov	ax,[es:di+1Dh]
 11008 00002603 268B451D                	MOV	AX,[ES:DI+SF_ENTRY.sf_dirsec] ; get directory sector F.C.
 11009                                  	;mov	[si+1Dh],ax
 11010 00002607 89441D                  	MOV	[SI+fcb_nsl_dirsec],AX
 11011                                  
 11012                                  	; MSDOS 6.0
 11013                                  	;SR; Store high byte of directory sector
 11014                                  	;mov	ax,[es:di+SF_ENTRY.sf_dirsec+2] ; get high word
 11015                                  	;
 11016                                  	; SR;
 11017                                  	; We have to store the read-only and archive attributes of the file.
 11018                                  	; We extract it from the SFT and store it in the top two bits of the 
 11019                                  	; sector number ( sector number == 22 bits only )
 11020                                  	;
 11021                                  	;mov	bl,[es:di+SF_ENTRY.sf_attr]
 11022                                  	;mov	bh,bl
 11023                                  	;ror	bl,1
 11024                                  	;shl	bh,1
 11025                                  	;or	bl,bh
 11026                                  	;and	bl,0C0h
 11027                                  	;
 11028                                  	;or	al,bl
 11029                                  	;mov	[si+fcb_sfn],al	;sector number = 22-bits
 11030                                  
 11031                                  	; MSDOS 3.3 ($ MSDOS 6.0)
 11032                                  	;mov	al,[es:di+1Fh]
 11033 0000260A 268A451F                	MOV	AL,[ES:DI+SF_ENTRY.sf_dirpos] ; location in sector
 11034                                  	;mov	[si+1Fh],al
 11035 0000260E 88441F                  	MOV	[SI+fcb_nsl_dirpos],AL
 11036                                  	;mov	ax,[es:di+0Bh]
 11037 00002611 268B450B                	MOV	AX,[ES:DI+SF_ENTRY.sf_firclus] ; first cluster
 11038                                  	;mov	[si+1Bh],ax
 11039 00002615 89441B                  	MOV	[SI+fcb_nsl_firclus],AX
 11040 00002618 B300                    	MOV	BL,0
 11041                                  
 11042                                  	; Create the bits field from the dirty/device bits of the flags word 
 11043                                  	; and the mode byte
 11044                                  
 11045                                  SetFCBBits:
 11046                                  	;mov	ax,[es:di+5]
 11047 0000261A 268B4505                	MOV	AX,[ES:DI+SF_ENTRY.sf_flags]
 11048 0000261E 24C0                    	AND	AL,0C0h 		; mask off drive bits
 11049                                  	;or	al,[es:di+2]
 11050 00002620 260A4502                	OR	AL,[ES:DI+SF_ENTRY.sf_mode] ; stick in open mode
 11051                                  	;mov	[si+1Ah], al
 11052 00002624 88441A                  	MOV	[SI+fcb_nsl_bits],AL	; save dirty info
 11053                                  
 11054                                  	; MSDOS 6.0
 11055                                  	; SR;
 11056                                  	; Check if we came here for local file or device. If for local file, 
 11057                                  	; skip setting of SFT index
 11058                                  	;
 11059                                  	;or	bl,bl
 11060                                  	;jz	short SaveNoSFN		; do not save SFN if local file
 11061                                  
 11062 00002627 EB17                    	JMP	short SaveSFN 		; go and save SFN
 11063                                  
 11064                                  	; Save no sharing local device information
 11065                                  
 11066                                  SaveNoShareDev:
 11067                                  	;mov	ax,[es:di+7]
 11068 00002629 268B4507                	MOV	AX,[ES:DI+SF_ENTRY.sf_devptr]
 11069                                  	;mov	[si+1Ah],ax
 11070 0000262D 89441A                  	MOV	[SI+fcb_nsld_drvptr],AX
 11071                                  	;mov	ax,[es:di+9]
 11072 00002630 268B4509                	MOV	AX,[ES:DI+SF_ENTRY.sf_devptr+2]
 11073 00002634 89441C                  	MOV	[SI+fcb_nsld_drvptr+2],AX
 11074                                  	;mov	bl,40h
 11075 00002637 B340                    	MOV	BL,FCBDEVICE
 11076 00002639 EBDF                    	JMP	SetFCBBits		; go and save SFN
 11077                                  
 11078                                  SaveShare:
 11079                                  	;ENDIF
 11080                                  ;
 11081                                  ;----- In share support -----
 11082                                  ;
 11083                                  	;call	far [ss:ShSave]
 11084 0000263B 36FF1E[8400]            	Call	far [ss:JShare+(10*4)] ; 10 = ShSave ; SS Override
 11085                                  ;
 11086                                  ;----- end in share support -----
 11087                                  ;
 11088                                  SaveSFN:
 11089                                  	; MSDOS 3.3
 11090                                  	;mov	ax,[es:di+5]
 11091                                  	;and	al,3Fh
 11092                                  	;or	al,bl
 11093                                  	;mov	[si+19h],al
 11094                                  
 11095                                  	;lea	ax, [di-6]
 11096 00002640 8D45FA                  	LEA	AX,[DI-SFT.SFTable]
 11097                                  	
 11098                                  	; Adjust for offset to table.
 11099                                  	
 11100 00002643 362B06[4000]            	SUB	AX,[SS:SFTFCB]		; SS override for SftFCB
 11101                                  
 11102 00002648 53                      	push	bx			;bx = FCB type (net/Share or local)
 11103 00002649 B335                    	mov	bl,53
 11104 0000264B B335                    	MOV	BL,SF_ENTRY.size
 11105 0000264D F6F3                    	DIV	BL
 11106 0000264F 884418                  	MOV	[SI+fcb_sfn],AL		; last used SFN
 11107 00002652 5B                      	pop	bx			;restore bx
 11108                                  
 11109                                  SaveNoSFN:
 11110                                  	;mov	ax,[es:di+5]
 11111 00002653 268B4505                	MOV	AX,[ES:DI+SF_ENTRY.sf_flags]
 11112 00002657 243F                    	AND	AL,3Fh			; get real drive
 11113 00002659 08D8                    	OR	AL,BL
 11114                                  	;mov	[si+19h],al
 11115 0000265B 884419                  	MOV	[SI+fcb_l_drive],AL
 11116                                  
 11117 0000265E 36A1[1000]              	MOV	AX,[SS:FCBLRU]		; get lru count
 11118 00002662 40                      	INC	AX
 11119                                  	;mov	[es:di+15h],ax
 11120 00002663 26894515                	MOV	[ES:DI+sf_LRU],AX
 11121 00002667 7506                    	JNZ	short SimpleStuff
 11122                                  	
 11123                                  	; lru flag overflowed.	Run through all FCB sfts and adjust:  
 11124                                  	; LRU < 8000H get set to 0.  Others -= 8000h.  This LRU = 8000h
 11125                                  	
 11126                                  	;mov	bx,15h
 11127 00002669 BB1500                  	MOV	BX,SF_ENTRY.sf_position
 11128 0000266C E80500                  	call	ResetLRU
 11129                                  
 11130                                  	;	Set new LRU to AX
 11131                                  SimpleStuff:
 11132 0000266F 36A3[1000]              	MOV	[SS:FCBLRU],AX
 11133 00002673 C3                      	retn
 11134                                  
 11135                                  ;Break	<ResetLRU - reset overflowed lru counts>
 11136                                  ;----------------------------------------------------------------------------
 11137                                  ;
 11138                                  ;   ResetLRU - during lru updates, we may wrap at 64K.	We must walk the
 11139                                  ;   entire set of SFTs and subtract 8000h from their lru counts and truncate
 11140                                  ;   at 0.
 11141                                  ;
 11142                                  ;   Inputs:	BX is offset into SFT field where lru firld is kept
 11143                                  ;		ES:DI point to SFT currently being updated
 11144                                  ;   Outputs:	All FCB SFTs have their lru fields truncated
 11145                                  ;		AX has 8000h
 11146                                  ;   Registers modified: none
 11147                                  ;
 11148                                  ;----------------------------------------------------------------------------
 11149                                  ;
 11150                                  
 11151                                  ResetLRU:
 11152                                  
 11153                                  	; ResetLRU is only called from fcbio.asm. So SS can be assumed to be 
 11154                                  	; DOSDATA
 11155                                  
 11156 00002674 B80080                  	MOV	AX,8000h
 11157 00002677 06                      	push	es
 11158 00002678 57                      	push	di
 11159 00002679 2EC43E[4000]            	LES	DI,[CS:SFTFCB]		; get pointer to head
 11160                                  	;mov	cx,[es:di+4]
 11161 0000267E 268B4D04                	MOV	CX,[ES:DI+SFT.SFCount]
 11162                                  	;lea	di,[di+6]
 11163 00002682 8D7D06                  	LEA	DI,[DI+SFT.SFTable] 	; point at table
 11164                                  ovScan:
 11165 00002685 262901                  	SUB	[ES:DI+BX],AX		; decrement lru count
 11166 00002688 7703                    	JA	short ovLoop
 11167 0000268A 268901                  	MOV	[ES:DI+BX],AX		; truncate at 0
 11168                                  ovLoop:
 11169                                  	;add	di,53
 11170 0000268D 83C735                  	ADD	DI,SF_ENTRY.size	; advance to next
 11171 00002690 E2F3                    	LOOP	ovScan
 11172 00002692 5F                      	pop	di
 11173 00002693 07                      	pop	es
 11174 00002694 268901                  	MOV	[ES:DI+BX],AX
 11175 00002697 C3                      	retn
 11176                                  
 11177                                  ;IF  0  ; We dont need this routine any more.
 11178                                  
 11179                                  ;Break	<SetOpenAge - update the open age of a SFT>
 11180                                  ;----------------------------------------------------------------------------
 11181                                  ;
 11182                                  ;   SetOpenAge - In order to maintain the first N open files in the FCB cache,
 11183                                  ;   we keep the 'open age' or an LRU count based on opens.  We update the
 11184                                  ;   count here and fill in the appropriate field.
 11185                                  ;
 11186                                  ;   Inputs:	ES:DI point to SFT
 11187                                  ;   Outputs:	ES:DI has the open age field filled in.
 11188                                  ;		If open age has wraparound, we will have subtracted 8000h
 11189                                  ;		    from all open ages.
 11190                                  ;   Registers modified: AX
 11191                                  ;
 11192                                  ;----------------------------------------------------------------------------
 11193                                  ;
 11194                                  
 11195                                  SetOpenAge:
 11196                                  
 11197                                  	; 20/07/2018 - Retro DOS v3.0
 11198                                  	; MSDOS 3.3 - IBMDOS.COM, Offset 2597h 
 11199                                  	; (& MSDOS 6.0, FCBIO.ASM)
 11200                                  
 11201                                  	; SetOpenAge is called from fcbio2.asm. SS can be assumed to be valid.
 11202                                  
 11203 00002698 2EA1[1200]              	MOV	AX,[CS:OpenLRU]	; SS override
 11204 0000269C 40                      	INC	AX
 11205                                  	;mov	[es:di+17h],ax
 11206 0000269D 26894517                	MOV	[ES:DI+sf_OpenAge],AX
 11207 000026A1 7506                    	JNZ	short SetDone
 11208                                  	;mov	bx,17h
 11209 000026A3 BB1700                  	MOV	BX,SF_ENTRY.sf_position+2 ; mov bx,sf_OpenAge
 11210 000026A6 E8CBFF                  	call	ResetLRU
 11211                                  SetDone:
 11212 000026A9 2EA3[1200]              	MOV	[CS:OpenLRU],AX
 11213 000026AD C3                      	retn
 11214                                  
 11215                                  ;ENDIF	; SetOpenAge no longer needed
 11216                                  
 11217                                  
 11218                                  ; 21/07/2018 - Retro DOS v3.0
 11219                                  
 11220                                  ; LRUFCB for MSDOS 3.3 !
 11221                                  
 11222                                  ;Break	<LRUFCB - perform LRU on FCB sfts>
 11223                                  ;----------------------------------------------------------------------------
 11224                                  ;
 11225                                  ;   LRUFCB - find LRU fcb in cache.  Set ThisSFT and return it.  We preserve
 11226                                  ;	the first keepcount sfts if they are network sfts or if sharing is
 11227                                  ;	loaded.  If carry is set then NO BLASTING is NECESSARY.
 11228                                  ;
 11229                                  ;   Inputs:	none
 11230                                  ;   Outputs:	ES:DI point to SFT
 11231                                  ;		ThisSFT points to SFT
 11232                                  ;		SFT is zeroed
 11233                                  ;		Carry set of closes failed
 11234                                  ;   Registers modified: none
 11235                                  ;
 11236                                  ;----------------------------------------------------------------------------
 11237                                  ;
 11238                                  
 11239                                  ; MSDOS 6.0
 11240                                  ;IF 0	; rewritten this routine
 11241                                  
 11242                                  LRUFCB: ; MSDOS 3.3 - IBMDOS.COM (1987) - Offset 25ADh
 11243 000026AE E847EF                  	call	save_world
 11244                                  	
 11245                                  ; Find nth oldest NET/SHARE FCB.  We want to find its age for the second scan
 11246                                  ; to find the lease recently used one that is younger than the open age.  We
 11247                                  ; operate be scanning the list n times finding the least age that is greater
 11248                                  ; or equal to the previous minimum age.
 11249                                  ;
 11250                                  ;   BP is the count of times we need to go through this loop.
 11251                                  ;   AX is the current acceptable minimum age to consider
 11252                                  ;
 11253 000026B1 2E8B2E[4400]            	mov	bp,[CS:KEEPCOUNT]	; k = keepcount;
 11254 000026B6 31C0                    	XOR	AX,AX			; low = 0;
 11255                                  ;
 11256                                  ; If we've scanned the table n times, then we are done.
 11257                                  ;
 11258                                  lru1:
 11259 000026B8 83FD00                  	CMP	bp,0			; while (k--) {
 11260 000026BB 7451                    	JZ	short lru75
 11261 000026BD 4D                      	DEC	bp
 11262                                  ;
 11263                                  ; Set up for scan.
 11264                                  ;
 11265                                  ;   AX is the minimum age for consideration
 11266                                  ;   BX is the minimum age found during the scan
 11267                                  ;   SI is the position of the entry that corresponds to BX
 11268                                  ;
 11269 000026BE BBFFFF                  	MOV	BX,-1			;     min = 0xffff;
 11270 000026C1 89DE                    	MOV	si,BX			;     pos = 0xffff;
 11271 000026C3 2EC43E[4000]            	LES	DI,[CS:SFTFCB]		;     for (CX=FCBCount; CX>0; CX--)
 11272                                  	;mov	cx,[es:di+4]
 11273 000026C8 268B4D04                	MOV	CX,[ES:DI+SFT.SFCount]
 11274                                  	;lea	di,[di+6]
 11275 000026CC 8D7D06                  	LEA	DI,[DI+SFT.SFTable]
 11276                                  ;
 11277                                  ; Innermost loop.  If the current entry is free, then we are done.  Or, if the
 11278                                  ; current entry is busy (indicating a previous aborted allocation), then we
 11279                                  ; are done.  In both cases, we use the found entry.
 11280                                  ;
 11281                                  lru2:
 11282 000026CF 26833D00                	cmp	word [es:di],0
 11283                                  	;cmp	word [es:di+SF_ENTRY.sf_ref_count],0
 11284 000026D3 7406                    	jz	short lru25
 11285                                  	;cmp	word [es:di],-1
 11286                                  	;cmp	word [es:di+SFT_ENTRY.sf_ref_count],sf_busy
 11287 000026D5 26833DFF                	cmp	word [es:di],sf_busy
 11288 000026D9 7504                    	jnz	short lru3
 11289                                  ;
 11290                                  ; The entry is usable without further scan.  Go and use it.
 11291                                  ;
 11292                                  lru25:
 11293 000026DB 89FE                    	MOV	si,DI			;	      pos = i;
 11294 000026DD EB69                    	JMP	short lru11		;	      goto got;
 11295                                  ;
 11296                                  ; See if the entry is for the network or for the sharer.
 11297                                  ;
 11298                                  ;  If for the sharer or network then
 11299                                  ;	if the age < current minimum AND >= allowed minimum then
 11300                                  ;	    this entry becomes current minimum
 11301                                  ;
 11302                                  lru3:
 11303                                  	;test	word [es:di+5],8000h
 11304 000026DF 26F745050080            	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet 
 11305                                  					;	  if (!net[i]
 11306 000026E5 7505                    	JNZ	short lru35
 11307                                  ;if installed
 11308 000026E7 E8374C                  	call	CheckShare		;		&& !sharing)
 11309 000026EA 7410                    	JZ	short lru5		;	  else
 11310                                  ;ENDIF
 11311                                  ;
 11312                                  ; This SFT is for the net or is for the sharer.  See if it less than the
 11313                                  ; current minimum.
 11314                                  ;
 11315                                  lru35:
 11316                                  	;mov	dx,[es:di+17h]
 11317 000026EC 268B5517                	MOV	DX,[ES:DI+sf_OpenAge]
 11318 000026F0 39C2                    	CMP	DX,AX			;	  if (age[i] >= low &&
 11319 000026F2 7208                    	JB	short lru5
 11320 000026F4 39DA                    	CMP	DX,BX
 11321 000026F6 7304                    	JAE	short lru5		;	      age[i] < min) {
 11322                                  ;
 11323                                  ; entry is new minimum.  Remember his age.
 11324                                  ;
 11325 000026F8 89D3                    	mov	bx,DX			;	      min = age[i];
 11326 000026FA 89FE                    	mov	si,di			;	      pos = i;
 11327                                  ;
 11328                                  ; End of loop.	gp back for more
 11329                                  ;
 11330                                  lru5:
 11331                                  	;add	di,53
 11332 000026FC 83C735                  	add	di,SF_ENTRY.size
 11333 000026FF E2CE                    	loop	lru2			;	      }
 11334                                  ;
 11335                                  ; The scan is complete.  If we have successfully found a new minimum (pos != -1)
 11336                                  ; set then threshold value to this new minimum + 1.  Otherwise, the scan is
 11337                                  ; complete.  Go find LRU.
 11338                                  ;
 11339                                  lru6:	
 11340 00002701 83FEFF                  	cmp	si,-1			; position not -1?
 11341 00002704 7408                    	jz	short lru75		; no, done with everything
 11342 00002706 8D4701                  	lea	ax,[bx+1]		; set new threshold age
 11343 00002709 EBAD                    	jmp	short lru1		; go and loop for more
 11344                                  lru65:	
 11345 0000270B F9                      	stc
 11346 0000270C EB70                    	jmp	short LRUDead		;	  return -1;
 11347                                  ;
 11348                                  ; Main loop is done.  We have AX being the age+1 of the nth oldest sharer or
 11349                                  ; network entry.  We now make a second pass through to find the LRU entry
 11350                                  ; that is local-no-share or has age >= AX
 11351                                  ;
 11352                                  lru75:
 11353 0000270E BBFFFF                  	mov	bx,-1			; min = 0xffff;
 11354 00002711 89DE                    	mov	si,bx			; pos = 0xffff;
 11355 00002713 2EC43E[4000]            	LES	DI,[CS:SFTFCB]		; for (CX=FCBCount; CX>0; CX--)
 11356                                  	;mov	cx,[es:di+4]
 11357 00002718 268B4D04                	MOV	CX,[ES:DI+SFT.SFCount]
 11358                                  	;lea	di,[di+6]
 11359 0000271C 8D7D06                  	LEA	DI,[DI+SFT.SFTable]
 11360                                  ;
 11361                                  ; If this is is local-no-share then go check for LRU else if age >= threshold
 11362                                  ; then check for lru.
 11363                                  ;
 11364                                  lru8:
 11365                                  	;test	word [es:di+5],8000h
 11366 0000271F 26F745050080            	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 11367 00002725 7505                    	jnz	short lru85		; is for network, go check age
 11368 00002727 E8F74B                  	call	CheckShare		; sharer here?
 11369 0000272A 7406                    	jz	short lru86		; no, go check lru
 11370                                  ;
 11371                                  ; Network or sharer.  Check age
 11372                                  ;
 11373                                  lru85:
 11374                                  	;cmp	[es:di+17h],ax
 11375 0000272C 26394517                	cmp	[es:di+sf_OpenAge],ax
 11376 00002730 720C                    	jb	short lru9		; age is before threshold, skip it
 11377                                  ;
 11378                                  ; Check LRU
 11379                                  ;
 11380                                  lru86:
 11381                                  	;cmp	[es:di+15h],bx
 11382 00002732 26395D15                	cmp	[es:di+sf_LRU],bx	; is LRU less than current LRU?
 11383 00002736 7306                    	jae	short lru9		; no, skip this
 11384 00002738 89FE                    	mov	si,di			; remember position
 11385                                  	;mov	bx,[es:di+15h]
 11386 0000273A 268B5D15                	mov	bx,[es:di+sf_LRU]	; remember new minimum LRU
 11387                                  ;
 11388                                  ; Done with this entry, go back for more.
 11389                                  ;
 11390                                  lru9:
 11391                                  	;add	di, 53
 11392 0000273E 83C735                  	add	di,SF_ENTRY.size
 11393 00002741 E2DC                    	loop	lru8
 11394                                  ;
 11395                                  ; Scan is complete.  If we found NOTHING that satisfied us then we bomb
 11396                                  ; out.	The conditions here are:
 11397                                  ;
 11398                                  ;   No local-no-shares AND all net/share entries are older than threshold
 11399                                  ;
 11400                                  lru10:
 11401 00002743 83FEFF                  	cmp	si,-1			; if no one f
 11402 00002746 74C3                    	jz	short lru65		;     return -1;
 11403                                  lru11:
 11404 00002748 89F7                    	mov	di,si
 11405 0000274A 2E893E[3605]            	MOV	[CS:THISSFT],DI		; set thissft
 11406 0000274F 2E8C06[3805]            	MOV	[CS:THISSFT+2],ES
 11407                                  ;
 11408                                  ; If we have sharing or thisSFT is a net sft, then close it until ref count
 11409                                  ; is 0.
 11410                                  ;
 11411                                  	;test	word [es:di+5],8000h
 11412 00002754 26F745050080            	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 11413 0000275A 7505                    	JNZ	short LRUClose
 11414                                  ;IF INSTALLED
 11415 0000275C E8C24B                  	call	CheckShare
 11416 0000275F 7418                    	JZ	short LRUDone
 11417                                  ;ENDIF
 11418                                  ;
 11419                                  ; Repeat close until ref count is 0
 11420                                  ;
 11421                                  LRUClose:
 11422 00002761 16                      	push	ss
 11423 00002762 1F                      	pop	ds
 11424 00002763 C43E[3605]              	LES	DI,[THISSFT]
 11425 00002767 26833D00                	cmp     word [es:di],0
 11426                                  	;CMP	word [ES:DI+SFT.sf_ref_count],0 ; is ref count still <> 0?
 11427 0000276B 740C                    	JZ	short LRUDone 		; nope, all done
 11428 0000276D E84E13                  	call	DOS_CLOSE
 11429 00002770 73EF                    	jnc	short LRUClose		; no error => clean up
 11430                                  	;cmp	al,6
 11431 00002772 3C06                    	cmp	al,error_invalid_handle
 11432 00002774 74EB                    	jz	short LRUClose
 11433 00002776 F9                      	stc
 11434 00002777 EB05                    	JMP	short LRUDead
 11435                                  LRUDone:
 11436 00002779 30C0                    	XOR	AL,AL
 11437 0000277B E8E500                  	call	BlastSFT		; fill SFT with 0 (AL), 'C' cleared
 11438                                  
 11439                                  LRUDead:
 11440 0000277E E864EE                  	call	restore_world
 11441 00002781 2EC43E[3605]             	LES     DI,[CS:THISSFT]
 11442 00002786 7302                    	jnc	short LRUFCB_retn
 11443                                  LRUFCB_err:
 11444                                  	; mov	al, 23h	
 11445 00002788 B023                    	MOV	AL,error_FCB_unavailable
 11446                                  LRUFCB_retn:	
 11447                                  	retn:
 11448                                  
 11449                                  ;ENDIF
 11450                                  
 11451                                  FCBRegen:
 11452                                  	; called from SFTFromFCB. SS already DOSDATA
 11453                                  
 11454                                  	; General data filling. Mode is sf_isFCB + open_for_both, date/time 
 11455                                  	; we do not fill, size we do no fill, position we do not fill,
 11456                                  	; bit 14 of flags = TRUE, other bits = FALSE
 11457                                  
 11458                                  	;mov	al,[si+19h]
 11459 0000278A 8A4419                  	MOV	AL,[SI+fcb_l_drive]
 11460                                  
 11461                                  	; We discriminate based on the first two bits in the reserved field.
 11462                                  	
 11463                                  	;test	al,80h
 11464 0000278D A880                    	test	AL,FCBSPECIAL		; check for no sharing test
 11465 0000278F 741C                    	JZ	short RegenNoSharing	; yes, go regen from no sharing
 11466                                  
 11467                                  	;
 11468                                  	; The FCB is for a network or a sharing based system.  At this point 
 11469                                  	; we have already closed the SFT for this guy and reconnection is 
 11470                                  	; impossible.
 11471                                  	;
 11472                                  	; Remember that he may have given us a FCB with bogus information in
 11473                                  	; it. Check to see if sharing is present or if the redir is present.
 11474                                  	; If either is around, presume that we have cycled out the FCB and 
 11475                                  	; give the hard error. Otherwise, just return with carry set.
 11476                                  	;
 11477                                  
 11478 00002791 E88D4B                  	call	CheckShare		; test for sharer
 11479 00002794 7509                    	JNZ	short RegenFail		; yep, fail this.
 11480                                  	;mov	ax,1100h
 11481 00002796 B80011                  	MOV	AX,MultNET<<8		; install check on multnet
 11482 00002799 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - INSTALLATION CHECK
 11483                                  			; Return: AL = 00h  not installed, OK to install
 11484                                  			; 01h  not installed, not OK to install
 11485                                  			; FFh  installed
 11486 0000279B 08C0                    	OR	AL,AL			; is it there?
 11487 0000279D 740C                    	JZ	short RegenDead		; no, just fail the operation
 11488                                  RegenFail:
 11489 0000279F 2EA1[E602]              	MOV     AX,[CS:USER_IN_AX]	; SS override
 11490                                  	;cmp	ah,10h
 11491 000027A3 80FC10                  	cmp	AH,FCB_CLOSE
 11492 000027A6 7403                    	jz	short RegenDead
 11493 000027A8 E8C701                  	call	FCBHardErr		; massive hard error.
 11494                                  RegenDead:
 11495 000027AB F9                      	STC				; carry set
 11496                                  FCBRegen_retn:
 11497 000027AC C3                      	retn
 11498                                  
 11499                                  	;
 11500                                  	; Local FCB without sharing. Check to see if sharing is loaded. If 
 11501                                  	; so fail the operation.
 11502                                  	;
 11503                                  RegenNoSharing:
 11504 000027AD E8714B                  	call	CheckShare		; Sharing around?
 11505 000027B0 75ED                    	JNZ	short RegenFail
 11506                                  	
 11507                                  	; Find an SFT for this guy.
 11508                                  	
 11509                                  	; MSDOS 6.0
 11510                                  	;push	ax
 11511                                  	;mov	al,0			;indicate it is a regen operation
 11512                                  	;call	LRUFCB
 11513                                  	;pop	ax
 11514                                  	;jc	short FCBRegen_retn
 11515                                  
 11516                                  	; MSDOS 3.3
 11517 000027B2 E8F9FE                  	call	LRUFCB
 11518 000027B5 72F5                    	jc	short FCBRegen_retn
 11519                                  
 11520                                  	;mov	word [es:di+2],8002h
 11521 000027B7 26C745020280            	MOV	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB+open_for_both+SHARING_COMPAT
 11522 000027BD 243F                    	AND	AL,3Fh			; get drive number for flags
 11523 000027BF 98                      	CBW
 11524                                  	;or	ax,4000h
 11525 000027C0 0D0040                  	OR	AX,sf_close_nodate	; normal FCB operation
 11526                                  
 11527                                  	;
 11528                                  	; The bits field consists of the upper two bits (dirty and device) 
 11529                                  	; from the SFT and the low 4 bits from the open mode.
 11530                                  	;
 11531                                  
 11532                                  	;mov	cl,[si+1Ah]
 11533 000027C3 8A4C1A                  	MOV	CL,[SI+fcb_nsl_bits]	; stick in dirty bits.
 11534 000027C6 88CD                    	MOV	CH,CL
 11535 000027C8 80E5C0                  	AND	CH,0C0h 		; mask off the dirty/device bits
 11536 000027CB 08E8                    	OR	AL,CH
 11537                                  	;and	cl,0Fh
 11538 000027CD 80E10F                  	AND	CL,access_mask		; get the mode bits
 11539                                  	;mov	[es:di+2],cl
 11540 000027D0 26884D02                	MOV	[ES:DI+SF_ENTRY.sf_mode],CL
 11541                                  	;mov	[es:di+5],ax
 11542 000027D4 26894505                	MOV	[ES:DI+SF_ENTRY.sf_flags],AX ; initial flags
 11543 000027D8 2EA1[E802]              	MOV     AX,[CS:PROC_ID]		; SS override
 11544                                  	;mov	[es:di+31h],ax
 11545 000027DC 26894531                	MOV	[ES:DI+SF_ENTRY.sf_PID],AX
 11546 000027E0 1E                      	push	ds
 11547 000027E1 56                      	push	si
 11548 000027E2 06                      	push	es
 11549 000027E3 57                      	push	di
 11550 000027E4 16                      	push	ss
 11551 000027E5 07                      	pop	es
 11552 000027E6 BF[E604]                	MOV	DI,NAME1		; NAME1 is in DOSDATA
 11553                                  
 11554 000027E9 B90800                  	MOV	CX,8
 11555 000027EC 46                      	INC	SI			; Skip past drive byte to name in FCB
 11556                                  
 11557                                  	; MSDOS 6.0
 11558                                  	;call	RegenCopyName		;copy the name to NAME1
 11559                                  
 11560                                  	; MSDOS 3.3
 11561                                  RegenCopyName:
 11562 000027ED AC                      	lodsb
 11563 000027EE E81B2E                  	call	UCase
 11564 000027F1 AA                      	stosb
 11565 000027F2 E2F9                    	loop	RegenCopyName
 11566                                  
 11567 000027F4 16                      	push	ss	; SS is DOSDATA
 11568 000027F5 1F                      	pop	ds
 11569                                  
 11570                                  	;mov	byte [ATTRIB],16h
 11571 000027F6 C606[0605]16            	MOV	byte [ATTRIB],attr_hidden+attr_system+attr_directory
 11572                                  					; Must set this to something interesting
 11573                                  					; to call DEVNAME.
 11574 000027FB E8E222                  	call	DEVNAME 		; check for device
 11575 000027FE 5E                      	pop	si
 11576 000027FF 07                      	pop	es
 11577 00002800 5E                      	pop	si
 11578 00002801 1F                      	pop	ds
 11579 00002802 7219                    	JC	short RegenFileNoSharing ; not found on device list => file
 11580                                  
 11581                                  	;
 11582                                  	; Device found.  We can ignore disk-specific info
 11583                                  	;
 11584                                  
 11585                                  	;mov	[es:di+5],bh
 11586 00002804 26887D05                	MOV	[ES:DI+SF_ENTRY.sf_flags],BH ; device parms
 11587                                  	;mov	byte [es:di+4],0
 11588 00002808 26C6450400              	MOV	byte [ES:DI+SF_ENTRY.sf_attr],0 ; attribute
 11589                                  					; SS override
 11590 0000280D 2EC536[3205]            	LDS	SI,[CS:DEVPT]		; get device driver
 11591                                  	;mov	[es:di+7],si
 11592 00002812 26897507                	MOV	[ES:DI+SF_ENTRY.sf_devptr],SI
 11593                                  	;mov	[es:di+9],ds
 11594 00002816 268C5D09                	MOV	[ES:DI+SF_ENTRY.sf_devptr+2],DS
 11595 0000281A C3                      	retn				; carry is clear
 11596                                  
 11597                                  RegenDeadJ:
 11598 0000281B EB8E                    	JMP	RegenDead
 11599                                  
 11600                                  	;
 11601                                  	; File found.  Just copy in the remaining pieces.
 11602                                  	;
 11603                                  
 11604                                  RegenFileNoSharing:
 11605                                  	;mov	ax,[es:di+5]
 11606 0000281D 268B4505                	MOV	AX,[ES:DI+SF_ENTRY.sf_flags]
 11607 00002821 83E03F                  	AND	AX,03Fh
 11608 00002824 1E                      	push	ds
 11609 00002825 56                      	push	si
 11610 00002826 E87940                  	call	FIND_DPB
 11611                                  	;mov	[es:di+7],si
 11612 00002829 26897507                	MOV	[ES:DI+SF_ENTRY.sf_devptr],SI
 11613                                  	;mov	[es:di+9],ds
 11614 0000282D 268C5D09                	MOV	[ES:DI+SF_ENTRY.sf_devptr+2],DS
 11615 00002831 5E                      	pop	si
 11616 00002832 1F                      	pop	ds
 11617 00002833 72E6                    	jc	short RegenDeadJ	; if find DPB fails, then drive
 11618                                  					; indicator was bogus
 11619                                  	;mov	ax,[si+1Dh]
 11620 00002835 8B441D                  	MOV	AX,[SI+fcb_nsl_dirsec]
 11621                                  	;mov	[es:di+1Dh],ax
 11622 00002838 2689451D                	MOV	[ES:DI+SF_ENTRY.sf_dirsec],AX
 11623                                  
 11624                                  	;MSDOS6.0
 11625                                  	; SR;
 11626                                  	; Update the higher word of the directory sector from the FCB
 11627                                  	;
 11628                                  
 11629                                  	;MOV	word [ES:DI+SF_ENTRY.sf_dirsec+2],0	;AN000;>32mb
 11630                                  
 11631                                  	; SR;
 11632                                  	; Extract the read-only and archive bits from the top 2 bits of the sector
 11633                                  	; number
 11634                                  	;
 11635                                  
 11636                                  	;mov	al,[si+fcb_sfn]
 11637                                  	;and	al,0C0h		;get the 2 attribute bits
 11638                                  	;mov	ah,al
 11639                                  	;rol	ah,1
 11640                                  	;shr	al,1
 11641                                  	;or	al,ah
 11642                                  	;and	al,03Fh		;mask off unused bits
 11643                                  	;mov	[es:di+SF_ENTRY.sf_attr],al
 11644                                  
 11645                                  	;mov	al,[si+fcb_sfn]
 11646                                  	;and	al,03Fh		;mask off top 2 bits -- attr bits
 11647                                  	;sub	ah,ah
 11648                                  	;mov	[es:di+SF_ENTRY.sf_dirsec+2],ax ;update high word
 11649                                  
 11650                                  	; MSDOS 3.3(& MSDOS 6.0)
 11651                                  	;mov	ax,[si+1Bh]
 11652 0000283C 8B441B                  	MOV	AX,[SI+fcb_nsl_firclus]
 11653                                  	;mov	[es:di+0Bh],ax
 11654 0000283F 2689450B                	MOV	[ES:DI+SF_ENTRY.sf_firclus],AX
 11655                                  	;mov	[es:di+1Bh],ax
 11656 00002843 2689451B                	MOV	[ES:DI+SF_ENTRY.sf_lstclus],AX
 11657                                  	;mov	al,[si+1Fh]
 11658 00002847 8A441F                  	MOV	AL,[SI+fcb_nsl_dirpos]
 11659                                  	;mov  	[es:di+1Fh], al
 11660 0000284A 2688451F                	MOV	[ES:DI+SF_ENTRY.sf_dirpos],AL
 11661                                  	;INC	word [ES:DI+SF_ENTRY.sf_ref_count]
 11662 0000284E 26FF05                  	inc	word [ES:DI]		; Increment reference count.
 11663                                  					; Existing FCB entries would be
 11664                                  					; flushed unnecessarily because of
 11665                                  					; check in CheckFCB of the ref_count.
 11666                                  					; July 22/85 - BAS
 11667                                  	;lea	si,[si+1]
 11668 00002851 8D7401                  	LEA	SI,[SI+SYS_FCB.name]
 11669                                  	;lea	di,[di+20h] ; MSDOS 3.3 
 11670 00002854 8D7D20                  	LEA	DI,[DI+SF_ENTRY.sf_name]
 11671                                  	;mov	cx,11
 11672 00002857 B90B00                  	MOV	CX,SYS_FCB.EXTENT-SYS_FCB.name ; 12-1
 11673                                  	
 11674                                  	; 17/05/2019
 11675                                  	; MSDOS 6.0
 11676                                  	;call	RegenCopyName	;copy name to SFT 
 11677                                  	;
 11678                                  	; MSDOS3.3
 11679                                  RegenCopyName2:
 11680 0000285A AC                      	lodsb
 11681 0000285B E8AE2D                  	call    UCase
 11682 0000285E AA                      	stosb
 11683 0000285F E2F9                    	loop    RegenCopyName2
 11684                                  
 11685 00002861 F8                      	clc
 11686 00002862 C3                      	retn
 11687                                  
 11688                                  ;**	BlastSFT - FIll SFT with Garbage
 11689                                  ;
 11690                                  ;	BlastSFT is used when an SFT is no longer needed; it's called with
 11691                                  ;	various garbage values to put into the SFT.  I don't know why,
 11692                                  ;	presumably to help with debugging (jgl).  We clear the few fields
 11693                                  ;	necessary to show that the SFT is free after filling it.
 11694                                  ;
 11695                                  ;	ENTRY	(es:di) = address of SFT
 11696                                  ;		(al) = fill character
 11697                                  ;	EXIT	(ax) = -1
 11698                                  ;		'C' clear
 11699                                  ;	USES	AX, CX, Flags
 11700                                  
 11701                                  BlastSFT:
 11702 00002863 57                      	push	di
 11703                                  	;mov	cx,53
 11704 00002864 B93500                  	mov	cx,SF_ENTRY.size
 11705 00002867 F3AA                    	rep	stosb
 11706 00002869 5F                      	pop	di
 11707 0000286A 29C0                    	sub	ax,ax	; 0		; clear 'C'-----------------;
 11708 0000286C 268905                  	mov	[es:di],ax
 11709                                  	;mov	[es:di+SFT_ENTRY.sf_ref_count],ax ; set ref count   ;
 11710                                  	;mov	[es:di+15h],ax
 11711 0000286F 26894515                	mov	[es:di+sf_LRU],ax	; set lru		    ;
 11712 00002873 48                      	dec	ax	; -1					    ;
 11713                                  	;mov	[es:di+17h],ax ; 0FFFFh ; -1
 11714 00002874 26894517                	mov	[es:di+sf_OpenAge],ax	; set open age to -1	    ;
 11715                                  BlastSFT_retn:
 11716 00002878 C3                      	retn				; return with 'C' clear     ;
 11717                                  
 11718                                  
 11719                                  ;Break	<CheckFCB - see if the SFT pointed to by the FCB is still OK>
 11720                                  ;----------------------------------------------------------------------------
 11721                                  ;
 11722                                  ;   CheckFCB - examine an FCB and its contents to see if it needs to be
 11723                                  ;   regenerated.
 11724                                  ;
 11725                                  ;   Inputs:	DS:SI point to FCB (not extended)
 11726                                  ;		AL is SFT index
 11727                                  ;   Outputs:	Carry Set - FCB needs to be regened
 11728                                  ;		Carry clear - FCB is OK. ES:DI point to SFT
 11729                                  ;   Registers modified: AX and BX
 11730                                  ;
 11731                                  ;----------------------------------------------------------------------------
 11732                                  ;
 11733                                  
 11734                                  CheckFCB:
 11735                                  		
 11736                                  	; called from $fcb_open and sftfromfcb. SS already set up to DOSDATA
 11737                                  
 11738                                  	; MSDOS6.0
 11739                                  	; SR;
 11740                                  	; We check if the given FCB is for a local file. If so, we return a 
 11741                                  	; bad SFT status forcing the caller to regenerate the SFT.
 11742                                  
 11743                                  	;test	byte [si+fcb_l_drive],FCBNETWORK|FCBSHARE|FCBDEVICE
 11744                                  	;jz	short BadSFT		;Local file, return bad SFT
 11745                                  
 11746                                  	; MSDOS 3.3 (& MSDOS6.0)
 11747 00002879 2EC43E[4000]            	LES     DI,[CS:SFTFCB]		; SS override
 11748                                  	;cmp	[es:di+4],al
 11749 0000287E 26384504                	CMP	[ES:DI+SFT.SFCount],AL
 11750 00002882 7248                    	JC	short BadSFT
 11751 00002884 B335                    	MOV	BL,SF_ENTRY.size
 11752 00002886 F6E3                    	MUL	BL
 11753                                  	;lea	di,[di+6]
 11754 00002888 8D7D06                  	LEA	DI,[DI+SFT.SFTable]
 11755 0000288B 01C7                    	ADD	DI,AX
 11756 0000288D 2EA1[E802]              	MOV     AX,[CS:PROC_ID]		; SS override
 11757                                  	;cmp	[es:di+31h],ax
 11758 00002891 26394531                	CMP	[ES:DI+SF_ENTRY.sf_PID],AX
 11759 00002895 7535                    	JNZ	short BadSFT		; must match process
 11760 00002897 26833D00                	cmp	word [es:di],0
 11761                                  	;CMP	word [ES:DI+SF_ENTRY.sf_ref_count],0
 11762 0000289B 742F                    	JZ	short BadSFT		; must also be in use
 11763                                  	;mov	al,[si+19h]
 11764 0000289D 8A4419                  	MOV	AL,[SI+fcb_l_drive]
 11765                                  	;test	al,80h
 11766 000028A0 A880                    	test	AL,FCBSPECIAL		; a special FCB?
 11767 000028A2 7443                    	JZ	short CheckNoShare	; No. try local or device
 11768                                  
 11769                                  	; Since we are a special FCB, try NOT to use a bogus test instruction.
 11770                                  	; FCBSHARE is a superset of FCBNETWORK.
 11771                                  
 11772 000028A4 50                      	PUSH	AX
 11773                                  	;and	al,0C0h
 11774 000028A5 24C0                    	AND	AL,FCBMASK
 11775                                  	;cmp	al,0C0h
 11776 000028A7 3CC0                    	CMP	AL,FCBSHARE		; net FCB?
 11777 000028A9 58                      	POP	AX
 11778 000028AA 7522                    	JNZ	short CheckNet		; yes
 11779                                  ;
 11780                                  ;----- In share support -----
 11781                                  ;
 11782                                  	;call	far [cs:jShare+(11*4)]
 11783 000028AC 36FF1E[8800]            	Call    far [ss:JShare+(11*4)] ; 11 = ShChk ; SS Override
 11784 000028B1 7219                    	JC	short BadSFT
 11785 000028B3 EB0A                    	JMP	SHORT CheckD
 11786                                  ;
 11787                                  ;----- End in share support -----
 11788                                  ;
 11789                                  CheckFirClus:
 11790 000028B5 263B5D0B                	cmp     bx,[es:di+0Bh]
 11791 000028B9 263B5D0B                	CMP	BX,[ES:DI+SF_ENTRY.sf_firclus]
 11792 000028BD 750D                    	JNZ	short BadSFT
 11793                                  CheckD: 
 11794 000028BF 243F                    	AND	AL,3Fh
 11795                                  	;mov	ah,[es:di+5]
 11796 000028C1 268A6505                	MOV	AH,[ES:DI+SF_ENTRY.sf_flags]
 11797 000028C5 80E43F                  	AND	AH,3Fh
 11798 000028C8 38C4                    	CMP	AH,AL
 11799 000028CA 74AC                    	jz	short BlastSFT_retn	; carry is clear
 11800                                  BadSFT: 
 11801 000028CC F9                      	STC
 11802 000028CD C3                      	retn				; carry is clear
 11803                                  CheckNet:
 11804                                  ;
 11805                                  ;----- In net support -----
 11806                                  ;
 11807                                  	; MSDOS 6.0
 11808                                  	;MOV	AX,[SI+fcb_netID]	;AN000;IFS.DOS 4.00
 11809                                  	;CMP	AX,[ES:DI+sf_serial_ID]	;AN000;IFS.DOS 4.00
 11810                                  	;JNZ	short BadSFT
 11811                                  
 11812                                  	; MSDOS 3.3
 11813                                  	;mov	ax,[si+1Ah]
 11814 000028CE 8B441A                  	mov	ax,[si+fcb_net_handle]
 11815                                  	;cmp	ax,[es:di+1Dh]
 11816 000028D1 263B451D                	cmp	ax,[ES:DI+SF_ENTRY.sf_dirsec]
 11817 000028D5 75F5                    	jnz	short BadSFT
 11818                                  	;cmp	ax,[es:di+19h]
 11819 000028D7 263B4519                	cmp	ax,[ES:DI+sf_netid]
 11820 000028DB 75EF                    	jnz     short BadSFT
 11821                                  	;mov	ax,[si+1Eh]
 11822 000028DD 8B441E                  	mov	ax,[si+fcb_l_attr]
 11823                                  	;cmp	ax,[es:di+1Bh]
 11824 000028E0 263B451B                	cmp	ax,[es:di+SF_ENTRY.sf_lstclus]
 11825 000028E4 75E6                    	jnz     short BadSFT
 11826                                  ;
 11827                                  ;----- END In net support -----
 11828                                  ;
 11829                                  CheckNet_retn:
 11830 000028E6 C3                      	retn
 11831                                  
 11832                                  CheckNoShare:
 11833                                  	;test	al,40h
 11834 000028E7 A840                    	test	AL,FCBDEVICE		; Device?
 11835 000028E9 753F                    	JNZ	short CheckNoShareDev 	; Yes
 11836                                  
 11837                                  	; MSDOS6.0
 11838                                  	; SR;
 11839                                  	; The code below to match a local FCB with its SFT can no longer be
 11840                                  	; used. We just return a no-match status. This check is done right
 11841                                  	; at the top.
 11842                                  	;
 11843                                  
 11844                                  	; MSDOS 3.3 - IBMDOS.COM - Offset 27EFh
 11845                                  	;mov	bx,[si+1Dh]
 11846 000028EB 8B5C1D                  	MOV	BX,[SI+fcb_nsl_dirsec]
 11847                                  	;cmp	bx,[es:di+1Dh]
 11848 000028EE 263B5D1D                	cmp	bx,[ES:DI+SF_ENTRY.sf_dirsec]
 11849 000028F2 75D8                    	jnz	short BadSFT
 11850                                  	;mov	bl,[si+1Fh]
 11851 000028F4 8A5C1F                  	MOV	bl,[SI+fcb_nsl_dirpos]
 11852                                  	;cmp	bl,[es:di+1Fh]
 11853 000028F7 263A5D1F                	cmp	bl,[ES:DI+SF_ENTRY.sf_dirpos]
 11854 000028FB 75CF                    	jnz     short BadSFT
 11855                                  	;mov	bl,[si+1Ah]
 11856 000028FD 8A5C1A                  	MOV	bl,[SI+fcb_nsl_bits]
 11857                                  	;mov	bh,[es:di+5]
 11858 00002900 268A7D05                	MOV	bh,[ES:DI+SF_ENTRY.sf_flags]
 11859 00002904 30DF                    	xor     bh,bl
 11860 00002906 80E7C0                  	and     bh,0C0h
 11861 00002909 75C1                    	jnz     short BadSFT
 11862                                  	;xor	bl,[es:di+2]
 11863 0000290B 26325D02                	xor	bl,[ES:DI+SF_ENTRY.sf_mode]
 11864 0000290F 80E30F                  	and     bl,0Fh
 11865 00002912 75B8                    	jnz     short BadSFT
 11866 00002914 57                      	push    di
 11867 00002915 56                      	push    si
 11868                                  	;lea	di,[di+20h]  ; MSDOS 3.3
 11869 00002916 8D7D20                  	LEA	DI,[DI+SF_ENTRY.sf_name]
 11870                                  	;lea	si,[si+1]
 11871 00002919 8D7401                  	LEA	SI,[SI+SYS_FCB.name]
 11872                                  	;mov	cx,11
 11873 0000291C B90B00                  	MOV	CX,SYS_FCB.EXTENT-SYS_FCB.name ; 12-1
 11874 0000291F F3A6                    	repe	cmpsb
 11875 00002921 5E                      	pop     si
 11876 00002922 5F                      	pop     di
 11877 00002923 75A7                    	jnz     short BadSFT
 11878                                  	;mov	bx,[si+1Bh]
 11879 00002925 8B5C1B                  	MOV	bX,[SI+fcb_nsl_firclus]
 11880 00002928 EB8B                    	jmp     short CheckFirClus
 11881                                  
 11882                                  CheckNoShareDev:
 11883                                  	;mov	bx,[si+1Ah]
 11884 0000292A 8B5C1A                  	MOV	BX,[SI+fcb_nsld_drvptr]
 11885                                  	;cmp	bx,[es:di+7]
 11886 0000292D 263B5D07                	CMP	BX,[ES:DI+SF_ENTRY.sf_devptr]
 11887 00002931 7599                    	JNZ	short BadSFT
 11888                                  	;mov	bx,[si+1Ch]
 11889 00002933 8B5C1C                  	MOV	BX,[SI+fcb_nsld_drvptr+2]
 11890                                  	;cmp	bx,[es:di+9]
 11891 00002936 263B5D09                	CMP	BX,[ES:DI+SF_ENTRY.sf_devptr+2]
 11892 0000293A 7590                    	JNZ	short BadSFT
 11893 0000293C EB81                    	JMP	CheckD
 11894                                  
 11895                                  ;Break	<SFTFromFCB - take a FCB and obtain a SFT from it>
 11896                                  ;----------------------------------------------------------------------------
 11897                                  ;
 11898                                  ;   SFTFromFCB - the workhorse of this compatability crap.  Check to see if
 11899                                  ;	the SFT for the FCB is Good.  If so, make ThisSFT point to it.	If not
 11900                                  ;	good, get one from the cache and regenerate it.  Overlay the LRU field
 11901                                  ;	with PID
 11902                                  ;
 11903                                  ;   Inputs:	DS:SI point to FCB
 11904                                  ;   Outputs:	ThisSFT point to appropriate SFT
 11905                                  ;		Carry clear -> OK ES:DI -> SFT
 11906                                  ;		Carry set -> error in ax
 11907                                  ;   Registers modified: ES,DI, AX
 11908                                  ;
 11909                                  ;----------------------------------------------------------------------------
 11910                                  
 11911                                  SFTFromFCB:
 11912                                  
 11913                                  	; called from fcbio and $fcb_close. SS already set up to DOSDATA
 11914                                  
 11915 0000293E 50                      	push	ax
 11916 0000293F 53                      	push	bx
 11917                                  	;mov	al,[si+18h]
 11918 00002940 8A4418                  	MOV	AL,[SI+fcb_sfn] 	; set SFN for check
 11919 00002943 E833FF                  	call	CheckFCB
 11920 00002946 5B                      	pop	bx
 11921 00002947 58                      	pop	ax
 11922 00002948 2E893E[3605]            	MOV	[CS:THISSFT],DI		; SS override
 11923 0000294D 2E8C06[3805]            	MOV	[CS:THISSFT+2],ES
 11924 00002952 730F                    	JNC	short Set_SFT		; no problems, just set thissft
 11925 00002954 E8A1EC                  	call	save_world
 11926 00002957 E830FE                  	call	FCBRegen
 11927 0000295A E888EC                  	call	restore_world		; use macro restore world
 11928 0000295D 2EA1[D202]              	MOV     AX,[CS:EXTERR]		; SS override
 11929 00002961 7283                    	jc	short CheckNet_retn
 11930                                  
 11931                                  Set_SFT: 
 11932 00002963 2EC43E[3605]            	LES     DI,[CS:THISSFT]		; SS override for THISSFT & PROC_ID
 11933 00002968 2EFF36[E802]            	PUSH    word [CS:PROC_ID]	; set process id
 11934                                  	;pop	word [es:di+31h]
 11935 0000296D 268F4531                	POP     word [ES:DI+SF_ENTRY.sf_PID]
 11936 00002971 C3                      	retn				; carry is clear
 11937                                  
 11938                                  ;Break	<FCBHardErr - generate INT 24 for hard errors on FCBS>
 11939                                  ;----------------------------------------------------------------------------
 11940                                  ;
 11941                                  ;   FCBHardErr - signal to a user app that he is trying to use an
 11942                                  ;	unavailable FCB.
 11943                                  ;
 11944                                  ;   Inputs:	none.
 11945                                  ;   Outputs:	none.
 11946                                  ;   Registers modified: all
 11947                                  ;
 11948                                  ;----------------------------------------------------------------------------
 11949                                  ;
 11950                                  
 11951                                  FCBHardErr:
 11952                                  	;mov	ax,23h
 11953 00002972 B82300                  	MOV	AX,error_FCB_unavailable
 11954                                  	;mov	byte [cs:ALLOWED],8
 11955 00002975 2EC606[F702]08          	MOV	byte [CS:ALLOWED],Allowed_FAIL
 11956 0000297B 2EC42E[2405]            	LES	BP,[CS:THISDPB]
 11957 00002980 BF0100                  	MOV	DI,1			; Fake some registers
 11958 00002983 89F9                    	MOV	CX,DI
 11959                                  	;mov	dx,[es:bp+0Bh]
 11960 00002985 268B560B                	MOV	DX,[ES:BP+DPB.FIRST_SECTOR]
 11961 00002989 E8BC2E                  	call	HARDERR
 11962 0000298C F9                      	STC
 11963 0000298D C3                      	retn
 11964                                  
 11965                                  ;============================================================================
 11966                                  ; FCBIO2.ASM, MSDOS 6.0, 1991
 11967                                  ;============================================================================
 11968                                  ; 21/07/2018 - Retro DOS v3.0
 11969                                  
 11970                                  ;**	FCBIO2.ASM - Ancient 1.0 1.1 FCB system calls
 11971                                  ;
 11972                                  ;	GetRR
 11973                                  ;	GetExtent
 11974                                  ;	SetExtent
 11975                                  ;	GetExtended
 11976                                  ;	GetRecSize
 11977                                  ;	FCBIO
 11978                                  ;	$FCB_OPEN
 11979                                  ;	$FCB_CREATE
 11980                                  ;	$FCB_RANDOM_WRITE_BLOCK
 11981                                  ;	$FCB_RANDOM_READ_BLOCK
 11982                                  ;	$FCB_SEQ_READ
 11983                                  ;	$FCB_SEQ_WRITE
 11984                                  ;	$FCB_RANDOM_READ
 11985                                  ;	$FCB_RANDOM_WRITE
 11986                                  ;
 11987                                  ;	Revision history:
 11988                                  ;
 11989                                  ;		Created: ARR 4 April 1983
 11990                                  ;			 MZ  6 June  1983 completion of functions
 11991                                  ;			 MZ 15 Dec   1983 Brain damaged programs close FCBs multiple
 11992                                  ;				  times.  Change so successive closes work by
 11993                                  ;				  always returning OK.	Also, detect I/O to
 11994                                  ;				  already closed FCB and return EOF.
 11995                                  ;		 MZ 16 Jan   1984 More braindamage.  Need to separate info
 11996                                  ;				  out of sft into FCB for reconnection
 11997                                  ;
 11998                                  ;	    A000   version 4.00	Jan. 1988
 11999                                  
 12000                                  ; Defintions for FCBOp flags
 12001                                  
 12002                                  RANDOM	equ 2				; random operation
 12003                                  FCBREAD equ 4				; doing a read
 12004                                  BLOCK	equ 8				; doing a block I/O
 12005                                  
 12006                                  ;Break <GetRR - return the random record field in DX:AX>
 12007                                  ;---------------------------------------------------------------------------
 12008                                  ;
 12009                                  ;   GetRR - correctly load DX:AX with the random record field (3 or 4 bytes)
 12010                                  ;	from the FCB pointed to by DS:SI
 12011                                  ;
 12012                                  ;   Inputs:	DS:SI point to an FCB
 12013                                  ;		BX has record size
 12014                                  ;   Outputs:	DX:AX contain the contents of the random record field
 12015                                  ;   Registers modified: none
 12016                                  ;---------------------------------------------------------------------------
 12017                                  
 12018                                  GetRR:
 12019                                  	;mov	ax,[si+21h]
 12020 0000298E 8B4421                  	MOV	AX,[SI+SYS_FCB.RR]	; get low order part
 12021                                  	;mov	dx,[si+23h]
 12022 00002991 8B5423                  	MOV	DX,[SI+SYS_FCB.RR+2]	; get high order part
 12023 00002994 83FB40                  	CMP	BX,64			; ignore MSB of RR if recsiz > 64
 12024 00002997 7202                    	JB	short GetRRBye
 12025 00002999 30F6                    	XOR	DH,DH
 12026                                  GetRRBye:
 12027 0000299B C3                      	retn
 12028                                  
 12029                                  ;Break <GetExtent - retrieve next location for sequential IO>
 12030                                  ;---------------------------------------------------------------------------
 12031                                  ;
 12032                                  ;   GetExtent - Construct the next record to perform I/O from the EXTENT and
 12033                                  ;	NR fields in the FCB.
 12034                                  ;
 12035                                  ;   Inputs:	DS:SI - point to FCB
 12036                                  ;   Outputs:	DX:AX contain the contents of the random record field
 12037                                  ;   Registers modified: none
 12038                                  ;---------------------------------------------------------------------------
 12039                                  
 12040                                  GetExtent:
 12041                                  	;mov	al,[si+20h]
 12042 0000299C 8A4420                  	MOV	AL,[SI+SYS_FCB.NR]	; get low order piece
 12043                                  	;mov	dx,[si+0Ch]
 12044 0000299F 8B540C                  	MOV	DX,[SI+SYS_FCB.EXTENT]	; get high order piece
 12045 000029A2 D0E0                    	SHL	AL,1
 12046 000029A4 D1EA                    	SHR	DX,1
 12047 000029A6 D0D8                    	RCR	AL,1	; move low order bit of DL to high order of AH
 12048 000029A8 88D4                    	MOV	AH,DL
 12049 000029AA 88F2                    	MOV	DL,DH
 12050 000029AC 30F6                    	XOR	DH,DH
 12051 000029AE C3                      	retn
 12052                                  
 12053                                  ;Break <SetExtent - update the extent/NR field>
 12054                                  ;---------------------------------------------------------------------------
 12055                                  ;
 12056                                  ;   SetExtent - change the position of an FCB by filling in the extent/NR
 12057                                  ;	fields
 12058                                  ;
 12059                                  ;   Inputs:	DS:SI point to FCB
 12060                                  ;		DX:AX is a record location in file
 12061                                  ;   Outputs:	Extent/NR fields are filled in
 12062                                  ;   Registers modified: CX
 12063                                  ;---------------------------------------------------------------------------
 12064                                  
 12065                                  SetExtent:
 12066 000029AF 50                      	push	ax
 12067 000029B0 52                      	push	dx
 12068 000029B1 89C1                    	MOV	CX,AX
 12069 000029B3 247F                    	AND	AL,7FH			; next rec field
 12070                                  	;mov	[si+20h],al
 12071 000029B5 884420                  	MOV	[SI+SYS_FCB.NR],AL
 12072 000029B8 80E180                  	AND	CL,80H			; save upper bit
 12073 000029BB D1E1                    	SHL	CX,1
 12074 000029BD D1D2                    	RCL	DX,1			; move high bit of CX to low bit of DX
 12075 000029BF 88E8                    	MOV	AL,CH
 12076 000029C1 88D4                    	MOV	AH,DL
 12077                                  	;mov	[si+0Ch], ax
 12078 000029C3 89440C                  	MOV	[SI+SYS_FCB.EXTENT],AX	; all done
 12079 000029C6 5A                      	pop	dx
 12080 000029C7 58                      	pop	ax
 12081 000029C8 C3                      	retn
 12082                                  
 12083                                  ;Break <GetExtended - find FCB in potential extended fcb>
 12084                                  ;---------------------------------------------------------------------------
 12085                                  ;
 12086                                  ;   GetExtended - Make DS:SI point to FCB from DS:DX
 12087                                  ;
 12088                                  ;   Inputs:	DS:DX point to a possible extended FCB
 12089                                  ;   Outputs:	DS:SI point to the FCB part
 12090                                  ;		zeroflag set if not extended fcb
 12091                                  ;   Registers modified: SI
 12092                                  ;---------------------------------------------------------------------------
 12093                                  
 12094                                  GetExtended:
 12095 000029C9 89D6                    	MOV	SI,DX			; point to Something
 12096 000029CB 803CFF                  	CMP	BYTE [SI],-1		; look for extention
 12097 000029CE 7503                    	JNZ	short GetBye		; not there
 12098 000029D0 83C607                  	ADD	SI,7			; point to FCB
 12099                                  GetBye:
 12100 000029D3 39D6                    	CMP	SI,DX			; set condition codes
 12101                                  getextd_retn:
 12102 000029D5 C3                      	retn
 12103                                  
 12104                                  ;Break <GetRecSize - return in BX the FCB record size>
 12105                                  ;---------------------------------------------------------------------------
 12106                                  ;
 12107                                  ;   GetRecSize - return in BX the record size from the FCB at DS:SI
 12108                                  ;
 12109                                  ;   Inputs:	DS:SI point to a non-extended FCB
 12110                                  ;   Outputs:	BX contains the record size
 12111                                  ;   Registers modified: None
 12112                                  ;---------------------------------------------------------------------------
 12113                                  
 12114                                  	; 22/01/2024
 12115                                  GetRecSize:
 12116                                  	;mov	bx,[si+0Eh]
 12117 000029D6 8B5C0E                  	MOV	BX,[SI+SYS_FCB.RECSIZ]	; get his record size
 12118 000029D9 09DB                    	OR	BX,BX			; is it nul?
 12119                                  	;jz	short getextd_retn
 12120                                  	; 22/01/2024 (BugFix)
 12121 000029DB 75F8                    	jnz	short getextd_retn
 12122                                  	;MOV	BX,128			; use default size
 12123 000029DD B380                    	mov	bl,128
 12124                                  	;mov	[si+0Eh],bx
 12125 000029DF 895C0E                  	MOV	[SI+SYS_FCB.RECSIZ],BX	; stuff it back
 12126 000029E2 C3                      	retn
 12127                                  
 12128                                  ;BREAK <FCBIO - do internal FCB I/O>
 12129                                  ;---------------------------------------------------------------------------
 12130                                  ;
 12131                                  ;   FCBIO - look at FCBOP and merge all FCB operations into a single routine.
 12132                                  ;
 12133                                  ;   Inputs:	FCBOP flags which operations need to be performed
 12134                                  ;		DS:DX point to FCB
 12135                                  ;		CX may have count of number of records to xfer
 12136                                  ;   Outputs:	AL has error code
 12137                                  ;   Registers modified: all
 12138                                  ;---------------------------------------------------------------------------
 12139                                  
 12140                                  FCBIO:
 12141                                  
 12142                                  FEOF	EQU	1
 12143                                  FTRIM	EQU	2
 12144                                  
 12145                                  %define	FCBErr	byte [bp-1]  ; byte	
 12146                                  %define	cRec	word [bp-3]  ; word	
 12147                                  ;%define RecPos	word [bp-7]  ; dword
 12148                                  %define RecPosL	word [bp-7]  ; word
 12149                                  %define RecPosH	word [bp-5]  ; word
 12150                                  %define	RecSize	word [bp-9]  ; word
 12151                                  ;%define bPos	word [bp-13] ; dword
 12152                                  %define bPosL	word [bp-13] ; word
 12153                                  %define bPosH	word [bp-11] ; word
 12154                                  %define cByte	word [bp-15] ; word	
 12155                                  %define cResult word [bp-17] ; word	
 12156                                  %define	cRecRes	word [bp-19] ; word
 12157                                  %define	FCBOp	byte [bp-20] ; byte
 12158                                  
 12159                                  	;Enter
 12160                                  
 12161 000029E3 55                      	push	bp
 12162 000029E4 89E5                    	mov	bp,sp
 12163 000029E6 83EC14                  	sub	sp,20
 12164                                  	;mov	[bp-20],al
 12165 000029E9 8846EC                  	MOV	FCBOp,AL
 12166                                  	;mov	byte [bp-1],0
 12167 000029EC C646FF00                	MOV	FCBErr,0		;   FCBErr = 0;
 12168 000029F0 E8D6FF                  	call	GetExtended		;   FCB = GetExtended ();
 12169                                  	;test	byte [bp-20],8
 12170 000029F3 F646EC08                	TEST	FCBOp,BLOCK		;   if ((OP&BLOCK) == 0)
 12171 000029F7 7503                    	JNZ	short GetPos
 12172 000029F9 B90100                  	MOV	CX,1			;	cRec = 1;
 12173                                  GetPos:
 12174                                  	;mov	[bp-3],cx
 12175 000029FC 894EFD                  	MOV	cRec,CX 		;*Tail coalesce
 12176 000029FF E89AFF                  	call	GetExtent		;   RecPos = GetExtent ();
 12177 00002A02 E8D1FF                  	call	GetRecSize		;   RecSize = GetRecSize ();
 12178                                  	;mov	[bp-9],bx
 12179 00002A05 895EF7                  	MOV	RecSize,BX
 12180                                  	;test	byte [bp-20],2
 12181 00002A08 F646EC02                	TEST	FCBOp,RANDOM		;   if ((OP&RANDOM) <> 0)
 12182 00002A0C 7403                    	JZ	short GetRec
 12183 00002A0E E87DFF                  	call	GetRR			;	RecPos = GetRR ();
 12184                                  GetRec:
 12185                                  	;mov	[bp-7],ax
 12186 00002A11 8946F9                  	MOV	RecPosL,AX		;*Tail coalesce
 12187                                  	;mov	[bp-5],dx
 12188 00002A14 8956FB                  	MOV	RecPosH,DX
 12189 00002A17 E895FF                  	call	SetExtent		;   SetExtent (RecPos);
 12190                                  	;mov	ax,[bp-5]
 12191 00002A1A 8B46FB                  	MOV	AX,RecPosH		;   bPos = RecPos * RecSize;
 12192 00002A1D F7E3                    	MUL	BX
 12193 00002A1F 89C7                    	MOV	DI,AX
 12194                                  	;mov	ax,[bp-7]
 12195 00002A21 8B46F9                  	MOV	AX,RecPosL
 12196 00002A24 F7E3                    	MUL	BX
 12197 00002A26 01FA                    	ADD	DX,DI
 12198                                  	;mov	[bp-13],ax
 12199 00002A28 8946F3                  	MOV	bPosL,AX
 12200                                  	;mov	[bp-11],dx
 12201 00002A2B 8956F5                  	MOV	bPosH,DX
 12202                                  	;mov	ax,[bp-3]
 12203 00002A2E 8B46FD                  	MOV	AX,cRec 		;   cByte = cRec * RecSize;
 12204 00002A31 F7E3                    	MUL	BX
 12205                                  	;mov	[bp-15],ax
 12206 00002A33 8946F1                  	MOV	cByte,AX
 12207                                  
 12208                                  ;hkn; 	SS override
 12209 00002A36 360306[DA02]            	ADD	AX,[SS:DMAADD]		;   if (cByte+DMA > 64K) {
 12210 00002A3B 83D200                  	ADC	DX,0
 12211 00002A3E 7419                    	JZ	short DoOper
 12212                                  	;mov	byte [bp-1],2
 12213 00002A40 C646FF02                	MOV	FCBErr,FTRIM		;	FCBErr = FTRIM;
 12214                                  
 12215                                  ;hkn; 	SS override
 12216 00002A44 36A1[DA02]              	MOV	AX,[SS:DMAADD]		;	cRec = (64K-DMA)/RecSize;
 12217 00002A48 F7D8                    	NEG	AX
 12218 00002A4A 7501                    	JNZ	short DoDiv
 12219 00002A4C 48                      	DEC	AX
 12220                                  DoDiv:
 12221 00002A4D 31D2                    	XOR	DX,DX
 12222 00002A4F F7F3                    	DIV	BX
 12223                                  	;mov	[bp-3],ax
 12224 00002A51 8946FD                  	MOV	cRec,AX
 12225 00002A54 F7E3                    	MUL	BX			;	cByte = cRec * RecSize;
 12226                                  	;mov	[bp-15],ax
 12227 00002A56 8946F1                  	MOV	cByte,AX		;	}
 12228                                  DoOper:
 12229 00002A59 31DB                    	XOR	BX,BX
 12230                                  	;mov	[bp-17],bx
 12231 00002A5B 895EEF                  	MOV	cResult,BX		;   cResult = 0;
 12232                                  	;cmp	[bp-15],bx
 12233 00002A5E 395EF1                  	CMP	cByte,BX		;   if (cByte <> 0 ||
 12234 00002A61 7506                    	JNZ	short DoGetExt
 12235                                  	;test	byte [bp-1],2
 12236 00002A63 F646FF02                	TEST	FCBErr,FTRIM		;	(FCBErr&FTRIM) == 0) {
 12237                                  	;JZ	short DoGetExt
 12238                                  	;JMP	short SkipOp
 12239 00002A67 7576                    	jnz	short SkipOp
 12240                                  DoGetExt:
 12241 00002A69 E8D2FE                  	call	SFTFromFCB		;	if (!SFTFromFCB (SFT,FCB))
 12242 00002A6C 730F                    	JNC	short ContinueOp
 12243                                  FCBDeath:
 12244 00002A6E E8AEEC                  	call	FCB_RET_ERR		; signal error, map for extended
 12245                                  	;mov	word [bp-19],0
 12246 00002A71 C746ED0000              	MOV	cRecRes,0		; no bytes transferred
 12247                                  	;mov	byte [bp-1],1
 12248 00002A76 C646FF01                	MOV	FCBErr,FEOF		;	    return FTRIM;
 12249 00002A7A E9F000                  	JMP	FCBSave 		; bam!
 12250                                  ContinueOp:
 12251                                  	;mov	di,offset DOS_READ
 12252                                  	;test	byte [bp-14h],4
 12253                                  	;jnz	short DoContext
 12254                                  	;mov	di,DOS_WRITE
 12255                                  
 12256                                  	;mov	ax,[si+10h]
 12257 00002A7D 8B4410                  	MOV	AX,[SI+SYS_FCB.FILSIZ]
 12258                                  	;mov	[es:di+11h],ax
 12259 00002A80 26894511                	MOV	[ES:DI+SF_ENTRY.sf_size],AX
 12260                                  	;mov	ax,[si+12h]
 12261 00002A84 8B4412                  	MOV	AX,[SI+SYS_FCB.FILSIZ+2]
 12262                                  	;mov	[es:di+13h],ax
 12263 00002A87 26894513                	MOV	[ES:DI+SF_ENTRY.sf_size+2],AX
 12264                                  	;mov	ax,[bp-13]
 12265 00002A8B 8B46F3                  	MOV	AX,bPosL
 12266                                  	;mov	dx,[bp-11]
 12267 00002A8E 8B56F5                  	MOV	DX,bPosH
 12268                                  	;mov	[es:di+15h],ax
 12269 00002A91 26894515                	MOV	[ES:DI+SF_ENTRY.sf_position],AX
 12270                                  	;xchg	dx,[es:di+17h]
 12271 00002A95 26875517                	XCHG	[ES:DI+SF_ENTRY.sf_position+2],DX
 12272 00002A99 52                      	PUSH	DX			; save away Open age.
 12273                                  	;mov	cx,[bp-15]
 12274 00002A9A 8B4EF1                  	MOV	CX,cByte		;	cResult =
 12275                                  
 12276                                  ;hkn; DOS_Read is in DOSCODE
 12277 00002A9D BF[003E]                	MOV	DI,DOS_READ		;	    *(OP&FCBRead ? DOS_Read
 12278                                  	;test	byte [bp-20],4
 12279 00002AA0 F646EC04                	TEST	FCBOp,FCBREAD		;		 : DOS_Write)(cRec);
 12280 00002AA4 7503                    	JNZ	short DoContext
 12281                                  
 12282                                  ;hkn; DOS_Write is in DOSCODE
 12283 00002AA6 BF[813F]                	MOV	DI,DOS_WRITE
 12284                                  DoContext:
 12285 00002AA9 55                      	push	bp
 12286 00002AAA 1E                      	push	ds
 12287 00002AAB 56                      	push	si
 12288                                  
 12289                                  ;hkn; SS is DOSDATA
 12290 00002AAC 16                      	push	ss
 12291 00002AAD 1F                      	pop	ds
 12292                                  
 12293                                  ;; Fix for disk full
 12294 00002AAE FFD7                    	CALL	DI
 12295                                  	
 12296 00002AB0 5E                      	pop	si
 12297 00002AB1 1F                      	pop	ds
 12298 00002AB2 5D                      	pop	bp
 12299 00002AB3 72B9                    	JC	short FCBDeath
 12300                                  	
 12301 00002AB5 36803E[8C0F]00          	CMP	BYTE [SS:DISK_FULL],0	; treat disk full as error
 12302 00002ABB 740A                    	JZ	short NODSKFULL
 12303 00002ABD 36C606[8C0F]00          	MOV	BYTE [SS:DISK_FULL],0	; clear the flag
 12304                                  	;mov	byte [bp-1],1 
 12305 00002AC3 C646FF01                	MOV	FCBErr,FEOF		; set disk full flag
 12306                                  NODSKFULL:
 12307                                  ;; Fix for disk full
 12308                                  	;mov	[bp-17],cx
 12309 00002AC7 894EEF                  	MOV	cResult,CX
 12310 00002ACA E804FB                  	call	SaveFCBInfo		;	SaveFCBInfo (FCB);
 12311                                  	;pop	word [es:di+17h]	
 12312 00002ACD 268F4517                	POP	WORD [ES:DI+SF_ENTRY.sf_position+2] ; restore open age
 12313                                  			       ; (sf_OpenAge = SF_ENTRY.sf_position+2)			
 12314                                  	;mov	ax,[es:di+11h]
 12315 00002AD1 268B4511                	MOV	AX,[ES:DI+SF_ENTRY.sf_size]
 12316                                  	;mov	[si+10h],ax
 12317 00002AD5 894410                  	MOV	[SI+SYS_FCB.FILSIZ],AX
 12318                                  	;mov	ax,[es:di+13h]
 12319 00002AD8 268B4513                	MOV	AX,[ES:DI+SF_ENTRY.sf_size+2]
 12320                                  	;mov	[si+12h],ax
 12321 00002ADC 894412                  	MOV	[SI+SYS_FCB.FILSIZ+2],AX
 12322                                  					;	}
 12323                                  SkipOp:
 12324                                  	;mov	ax,[bp-17]
 12325 00002ADF 8B46EF                  	MOV	AX,cResult		;   cRecRes = cResult / RecSize;
 12326 00002AE2 31D2                    	XOR	DX,DX
 12327                                  	;div	word [bp-9]
 12328 00002AE4 F776F7                  	DIV	RecSize
 12329                                  	;mov	[bp-19],ax
 12330 00002AE7 8946ED                  	MOV	cRecRes,AX
 12331                                  	;add	[bp-7],ax
 12332 00002AEA 0146F9                  	ADD	RecPosL,AX		;   RecPos += cRecResult;
 12333                                  	;adc	word [bp-5],0
 12334 00002AED 8356FB00                	ADC	RecPosH,0
 12335                                  ;
 12336                                  ; If we have not gotten the expected number of records, we signal an EOF
 12337                                  ; condition.  On input, this is EOF.  On output this is usually disk full.
 12338                                  ; BUT...  Under 2.0 and before, all device output IGNORED this condition.  So
 12339                                  ; do we.
 12340                                  ;
 12341                                  	;cmp	ax,[bp-3]
 12342 00002AF1 3B46FD                  	CMP	AX,cRec 		;   if (cRecRes <> cRec)
 12343 00002AF4 7412                    	JZ	short TryBlank
 12344                                  	;test	byte [bp-20],4
 12345 00002AF6 F646EC04                	TEST	FCBOp,FCBREAD		;	if (OP&FCBRead || !DEVICE)
 12346 00002AFA 7508                    	JNZ	short SetEOF
 12347                                  	;test	word [es:di+5],80h
 12348 00002AFC 26F745058000            	TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 12349 00002B02 7504                    	JNZ	short TryBlank
 12350                                  SetEOF:
 12351                                  	;mov	byte [bp-1],1
 12352 00002B04 C646FF01                	MOV	FCBErr,FEOF		;	FCBErr = FEOF;
 12353                                  TryBlank:				;
 12354 00002B08 09D2                    	OR	DX,DX			;   if (cResult%RecSize <> 0) {
 12355 00002B0A 7426                    	JZ	short SetExt
 12356                                  	;add	word [bp-7],1
 12357 00002B0C 8346F901                	ADD	RecPosL,1		;	RecPos++;
 12358                                  	;adc	word [bp-5],0
 12359 00002B10 8356FB00                	ADC	RecPosH,0
 12360                                  	;test	byte [bp-20],4
 12361 00002B14 F646EC04                	TEST	FCBOp,FCBREAD		;	if(OP&FCBRead) <> 0) {
 12362 00002B18 7418                    	JZ	short SetExt
 12363                                  	;inc	word [bp-19]
 12364 00002B1A FF46ED                  	INC	cRecRes 		;	cRecRes++;
 12365                                  	;mov	byte [bp-1],3
 12366 00002B1D C646FF03                	MOV	FCBErr,FTRIM+FEOF	;	FCBErr = FTRIM | FEOF;
 12367                                  	;mov	cx,[bp-9]
 12368 00002B21 8B4EF7                  	MOV	CX,RecSize		;	Blank (RecSize-cResult%RecSize,
 12369 00002B24 29D1                    	SUB	CX,DX			;	       DMA+cResult);
 12370 00002B26 30C0                    	XOR	AL,AL
 12371                                  ;hkn; 	SS override
 12372 00002B28 36C43E[DA02]            	les     di,[ss:DMAADD]
 12373                                  	;add	di,[bp-17]
 12374 00002B2D 037EEF                  	ADD	DI,cResult
 12375 00002B30 F3AA                    	REP	STOSB			;   }	}
 12376                                  SetExt:
 12377                                  	;mov	dx,[bp-5]
 12378 00002B32 8B56FB                  	MOV	DX,RecPosH
 12379                                  	;mov	ax,[bp-7]
 12380 00002B35 8B46F9                  	MOV	AX,RecPosL
 12381                                  	;test	byte [bp-20],2
 12382 00002B38 F646EC02                	TEST	FCBOp,RANDOM		;   if ((OP&Random) == 0 ||
 12383 00002B3C 7406                    	JZ	short DoSetExt
 12384                                  	;test	byte [bp-20],8
 12385 00002B3E F646EC08                	TEST	FCBOp,BLOCK		;	(OP&BLOCK) <> 0)
 12386 00002B42 7403                    	JZ	short TrySetRR
 12387                                  DoSetExt:
 12388 00002B44 E868FE                  	call	SetExtent		;	SetExtent (RecPos, FCB);
 12389                                  TrySetRR:
 12390                                  	;test	byte [bp-20],8
 12391 00002B47 F646EC08                	TEST	FCBOp,BLOCK		;   if ((op&BLOCK) <> 0)
 12392 00002B4B 740F                    	JZ	short TryReturn
 12393                                  	;mov	[si+21h],ax
 12394 00002B4D 894421                  	MOV	[SI+SYS_FCB.RR],AX	;	FCB->RR = RecPos;
 12395                                  	;mov	[si+23h],dl
 12396 00002B50 885423                  	MOV	[SI+SYS_FCB.RR+2],DL
 12397                                  	;cmp	word [si+0Eh],64
 12398 00002B53 837C0E40                	CMP	word [SI+SYS_FCB.RECSIZ],64
 12399 00002B57 7303                    	JAE	short TryReturn
 12400                                  	;mov	[si+24h],dh
 12401 00002B59 887424                  	MOV	[SI+SYS_FCB.RR+2+1],DH	; Set 4th byte only if record size < 64
 12402                                  TryReturn: 
 12403                                  	;test	byte [bp-20],4
 12404 00002B5C F646EC04                	TEST	FCBOp,FCBREAD		;   if (!(FCBOP & FCBREAD)) {
 12405 00002B60 750B                    	JNZ	short FCBSave
 12406 00002B62 1E                      	push	ds			;	FCB->FDate = date;
 12407 00002B63 E853ED                  	call	DATE16			;	FCB->FTime = time;
 12408 00002B66 1F                      	pop	ds
 12409                                  	;mov	[si+14h],ax
 12410 00002B67 894414                  	MOV	[SI+SYS_FCB.FDATE],AX
 12411                                  	;mov	[si+16h],dx
 12412 00002B6A 895416                  	MOV	[SI+SYS_FCB.FTIME],DX	;	}
 12413                                  FCBSave: 
 12414                                  	;test	byte [bp-20],8
 12415 00002B6D F646EC08                	TEST	FCBOp,BLOCK		;   if ((op&BLOCK) <> 0)
 12416 00002B71 7409                    	jz	short DoReturn
 12417                                  	;mov	cx,[bp-19]
 12418 00002B73 8B4EED                  	MOV	CX,cRecRes		;	user_CX = cRecRes;
 12419 00002B76 E892EA                  	call    Get_User_Stack
 12420                                  	;mov	[si+4],cx
 12421 00002B79 894C04                  	MOV	[SI+user_env.user_CX],CX
 12422                                  DoReturn:
 12423                                  	;mov	al,[bp-1]
 12424 00002B7C 8A46FF                  	MOV	AL,FCBErr		;   return (FCBERR);
 12425                                  	;Leave	
 12426 00002B7F 89EC                    	mov     sp,bp
 12427 00002B81 5D                      	pop     bp
 12428 00002B82 C3                      	retn
 12429                                  
 12430                                  ; 22/07/2018 - Retro DOS v3.0
 12431                                  
 12432                                  ;Break <$FCB_Open - open an old-style FCB>
 12433                                  ;---------------------------------------------------------------------------
 12434                                  ;
 12435                                  ;   $FCB_Open - CPM compatability file open. The user has formatted an FCB
 12436                                  ;	for us and asked to have the rest filled in.
 12437                                  ;
 12438                                  ;   Inputs:	DS:DX point to an unopenned FCB
 12439                                  ;   Outputs:	AL indicates status 0 is ok FF is error
 12440                                  ;		FCB has the following fields filled in:
 12441                                  ;		    Time/Date Extent/NR Size
 12442                                  ;---------------------------------------------------------------------------
 12443                                  
 12444                                  _$FCB_OPEN:			; System call 15
 12445                                  
 12446 00002B83 B80200                  	MOV	AX,SHARING_COMPAT+open_for_both
 12447                                  
 12448                                  ;hkn; DOS_Open is in DOSCODE
 12449 00002B86 B9[7E37]                	MOV	CX,DOS_OPEN
 12450                                  ;
 12451                                  ; The following is common code for Creation and openning of FCBs.  AX is
 12452                                  ; either attributes (for create) or open mode (for open)...  DS:DX points to
 12453                                  ; the FCB
 12454                                  ;
 12455                                  DoAccess:
 12456 00002B89 3E                      	pushj	ds
 12457 00002B8A 52                      	push	dx
 12458 00002B8B 51                      	push	cx
 12459 00002B8C 50                      	push	ax			; save FCB pointer away
 12460                                  
 12461                                  ;hkn; 	OpenBuf is in DOSDATA
 12462 00002B8D BF[6003]                	MOV	DI,OPENBUF
 12463 00002B90 E8553E                  	call	TransFCB		; crunch the fcb
 12464 00002B93 58                      	pop	ax
 12465 00002B94 59                      	pop	cx
 12466 00002B95 5A                      	pop	dx
 12467 00002B96 1F                      	pop	ds			; get fcb
 12468 00002B97 7303                    	JNC	short FindFCB		; everything seems ok
 12469                                  FCBOpenErr:
 12470                                  ;
 12471                                  ; AL has error code
 12472                                  ;
 12473 00002B99 E983EB                  	jmp	FCB_RET_ERR
 12474                                  FindFCB:
 12475 00002B9C E82AFE                  	call	GetExtended		; DS:SI will point to FCB
 12476                                  
 12477                                  	; MSDOS 6.0
 12478                                  	;push	ax
 12479                                  	;mov	al,1			;indicate Open/Create operation
 12480                                  	;call	LRUFCB			; get a sft entry (no error)
 12481                                  	;pop	ax
 12482                                  	;jc	short HardMessage
 12483                                  	
 12484                                  	; MSDOS 3.3
 12485 00002B9F E80CFB                  	call	LRUFCB
 12486 00002BA2 722A                    	JC	short HardMessage
 12487                                  
 12488                                  	;mov	word [es:di+2],8000h
 12489 00002BA4 26C745020080            	mov	word [es:di+SF_ENTRY.sf_mode],sf_isFCB
 12490 00002BAA 1E                      	push	ds
 12491 00002BAB 56                      	push	si
 12492 00002BAC 53                      	push	bx			; save fcb pointer
 12493 00002BAD 89CE                    	MOV	SI,CX
 12494                                  
 12495                                  ;hkn; SS is DOSDATA
 12496 00002BAF 16                      	push	ss
 12497 00002BB0 1F                      	pop	ds			; let DOS_Open see variables
 12498 00002BB1 FFD6                    	CALL	SI			; go open the file
 12499 00002BB3 5B                      	pop	bx
 12500 00002BB4 5E                      	pop	si
 12501 00002BB5 1F                      	pop	ds			; get fcb
 12502                                  
 12503                                  ;hkn; SS override
 12504 00002BB6 36C43E[3605]            	LES	DI,[SS:THISSFT]		; get sf pointer
 12505 00002BBB 7319                    	JNC	short FCBOK		; operation succeeded
 12506                                  failopen:
 12507 00002BBD 50                      	PUSH	AX
 12508 00002BBE B052                    	MOV	AL,"R"                  ; clear out field (free sft)
 12509 00002BC0 E8A0FC                  	call	BlastSFT
 12510 00002BC3 58                      	POP	AX
 12511                                  	;cmp	ax,4
 12512 00002BC4 83F804                  	CMP	AX,error_too_many_open_files
 12513 00002BC7 7405                    	JZ	short HardMessage
 12514                                  	;cmp	ax,24h
 12515 00002BC9 83F824                  	CMP	AX,error_sharing_buffer_exceeded
 12516 00002BCC 7505                    	jnz	short DeadFCB
 12517                                  HardMessage:
 12518 00002BCE 50                      	PUSH	AX
 12519 00002BCF E8A0FD                  	call	FCBHardErr
 12520 00002BD2 58                      	POP	AX
 12521                                  DeadFCB:
 12522 00002BD3 E949EB                  	jmp	FCB_RET_ERR
 12523                                  FCBOK:
 12524                                  	; MSDOS 6.0
 12525                                  	;call	IsSFTNet		       ;AN007;F.C. >32mb  Non Fat file?
 12526                                  	;JNZ	short FCBOK2		       ;AN007;F.C. >32mb  yes
 12527                                  	;call	CheckShare		       ;AN000;F.C. >32mb  share around?
 12528                                  	;JNZ	short FCBOK2		       ;AN000;F.C. >32mb  yes
 12529                                  ;SR;
 12530                                  ; If we reach here, we know we have got a local SFT. Let's update the 
 12531                                  ; LocalSFT variable to reflect this.
 12532                                  ;
 12533                                  	;mov	[cs:LocalSFT],di	;
 12534                                  	;mov	[cs:LocalSFT+2],es; Store the SFT address
 12535                                  ;;SR;
 12536                                  ;; The check below is not valid anymore since we regenerate for media > 32M.
 12537                                  ;;
 12538                                  ;;	CMP	WORD [ES:DI+SF_ENTRY.sf_dirsec+2],0 
 12539                                  ;;					       ;AN000;F.C. >32mb  if dirsec >32mb
 12540                                  ;;	JZ	short FCBOK2		       ;AN000;F.C. >32mb    then error
 12541                                  ;;	MOV	AX,error_sys_comp_not_loaded   ;AN000;F.C. >32mb
 12542                                  ;;	JMP	short failopen		       ;AN000;F.C. >32mb
 12543                                  
 12544                                  FCBOK2:
 12545                                  	; MSDOS 3.3 (& MSDOS 6.0)
 12546 00002BD6 26FF05                  	inc	word [es:di]
 12547                                  	;INC	word [ES:DI+SF_ENTRY.sf_ref_count] ; increment reference count
 12548 00002BD9 E8F5F9                  	call	SaveFCBInfo
 12549                                  	; MSDOS 3.3
 12550 00002BDC E8B9FA                  	call	SetOpenAge
 12551                                  	; MSDOS 3.3 (& MSDOS 6.0)
 12552                                  	;test	word [es:di+5],80h
 12553 00002BDF 26F745058000            	TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 12554 00002BE5 7509                    	JNZ	short FCBNoDrive	; do not munge drive on devices
 12555 00002BE7 8A04                    	MOV	AL,[SI]			; get drive byte
 12556 00002BE9 E8853D                  	call	GETTHISDRV		; convert
 12557 00002BEC FEC0                    	INC	AL
 12558 00002BEE 8804                    	MOV	[SI],AL			; stash in good drive letter
 12559                                  FCBNoDrive:
 12560                                  	;mov	word [si+0Eh],128
 12561 00002BF0 C7440E8000              	MOV	word [SI+SYS_FCB.RECSIZ],80h ; stuff in default record size
 12562                                  
 12563                                  	;mov	ax,[es:di+0Dh]
 12564 00002BF5 268B450D                	MOV	AX,[ES:DI+SF_ENTRY.sf_time] ; set time
 12565                                  	;mov	[si+16h],ax
 12566 00002BF9 894416                  	MOV	[SI+SYS_FCB.FTIME],AX
 12567                                  	;mov	ax,[es:di+0Fh]
 12568 00002BFC 268B450F                	MOV	AX,[ES:DI+SF_ENTRY.sf_date] ; set date
 12569                                  	;mov	[si+14h],ax
 12570 00002C00 894414                  	MOV	[SI+SYS_FCB.FDATE],AX
 12571                                  	;mov	ax,[es:di+11h]
 12572 00002C03 268B4511                	MOV	AX,[ES:DI+SF_ENTRY.sf_size] ; set sizes
 12573                                  	;mov	[si+10h],ax
 12574 00002C07 894410                  	MOV	[SI+SYS_FCB.FILSIZ],AX
 12575                                  	;mov	ax,[es:di+13h]
 12576 00002C0A 268B4513                	MOV	AX,[ES:DI+SF_ENTRY.sf_size+2]
 12577                                  	;mov	[si+12h],ax
 12578 00002C0E 894412                  	MOV	[SI+SYS_FCB.FILSIZ+2],AX
 12579 00002C11 31C0                    	XOR	AX,AX			; convenient zero
 12580                                  	;mov	[si+0Ch],ax
 12581 00002C13 89440C                  	MOV	[SI+SYS_FCB.EXTENT],AX	; point to beginning of file
 12582                                  ;
 12583                                  ; We must scan the set of FCB SFTs for one that appears to match the current
 12584                                  ; one.	We cheat and use CheckFCB to match the FCBs.
 12585                                  ;
 12586                                  
 12587                                  ;hkn; 	SS override
 12588 00002C16 36C43E[4000]            	LES	DI,[SS:SFTFCB]		; get the pointer to head of the list
 12589                                  	;mov	ah,[es:di+4]
 12590 00002C1B 268A6504                	MOV	AH,[ES:DI+SFT.SFCount]	; get number of SFTs to scan
 12591                                  OpenScan:
 12592                                  	;cmp	al,[si+18h]
 12593 00002C1F 3A4418                  	CMP	AL,[SI+fcb_sfn]		; don't compare ourselves
 12594 00002C22 7407                    	JZ	short SkipCheck
 12595 00002C24 50                      	push	ax			; preserve count
 12596 00002C25 E851FC                  	call	CheckFCB		; do they match
 12597 00002C28 58                      	pop	ax			; get count back
 12598 00002C29 7309                    	JNC	short OpenFound		; found a match!
 12599                                  SkipCheck:
 12600 00002C2B FEC0                    	INC	AL			; advance to next FCB
 12601 00002C2D 38E0                    	CMP	AL,AH			; table full?
 12602 00002C2F 75EE                    	JNZ	short OpenScan		; no, go for more
 12603                                  OpenDone:
 12604 00002C31 30C0                    	xor	al,al			; return success
 12605 00002C33 C3                      	retn
 12606                                  ;
 12607                                  ; The SFT at ES:DI is the one that is already in use for this FCB. We set the
 12608                                  ; FCB to use this one. We increment its ref count. We do NOT close it at all.
 12609                                  ; Consider:
 12610                                  ;
 12611                                  ;   open (foo)	delete (foo) open (bar)
 12612                                  ;
 12613                                  ; This causes us to recycle (potentially) bar through the same local SFT as
 12614                                  ; foo even though foo is no longer needed; this is due to the server closing
 12615                                  ; foo for us when we delete it. Unfortunately, we cannot see this closure.
 12616                                  ; If we were to CLOSE bar, the server would then close the only reference to
 12617                                  ; bar and subsequent I/O would be lost to the redirector.
 12618                                  ;
 12619                                  ; This gets solved by NOT closing the sft, but zeroing the ref count
 12620                                  ; (effectively freeing the SFT) and informing the sharer (if relevant) that
 12621                                  ; the SFT is no longer in use. Note that the SHARER MUST keep its ref counts
 12622                                  ; around.  This will allow us to access the same file through multiple network
 12623                                  ; connections and NOT prematurely terminate when the ref count on one
 12624                                  ; connection goes to zero.
 12625                                  ;
 12626                                  OpenFound:
 12627                                  	;mov	[si+18h],al
 12628 00002C34 884418                  	MOV	[SI+fcb_sfn],AL 	; assign with this
 12629 00002C37 26FF05                  	inc	word [es:di]
 12630                                  	;INC	word [ES:DI+SF_ENTRY.sf_ref_count] 
 12631                                  					; remember this new invocation
 12632 00002C3A 36A1[1000]              	MOV	AX,[SS:FCBLRU]		; update LRU counts
 12633                                  	;mov	[es:di+15h],ax
 12634 00002C3E 26894515                	MOV	[ES:DI+sf_LRU],AX
 12635                                  ;
 12636                                  ; We have an FCB sft that is now of no use.  We release sharing info and then
 12637                                  ; blast it to prevent other reuse.
 12638                                  ;
 12639 00002C42 16                      	push	ss
 12640 00002C43 1F                      	pop	ds
 12641 00002C44 C43E[3605]              	LES	DI,[THISSFT]
 12642 00002C48 26FF0D                  	dec	word [es:di]
 12643                                  	;DEC	word [ES:DI+SF_ENTRY.sf_ref_count]
 12644                                  					; free the newly allocated SFT
 12645 00002C4B E80647                  	call	ShareEnd
 12646 00002C4E B043                    	MOV	AL,'C'
 12647 00002C50 E810FC                  	call	BlastSFT
 12648 00002C53 EBDC                    	JMP	short OpenDone
 12649                                  
 12650                                  ;BREAK	<$FCB_Create - create a new directory entry>
 12651                                  ;----------------------------------------------------------------------------
 12652                                  ;
 12653                                  ;   $FCB_Create - CPM compatability file create. The user has formatted an
 12654                                  ;	FCB for us and asked to have the rest filled in.
 12655                                  ;
 12656                                  ;   Inputs:	DS:DX point to an unopenned FCB
 12657                                  ;   Outputs:	AL indicates status 0 is ok FF is error
 12658                                  ;		FCB has the following fields filled in:
 12659                                  ;		    Time/Date Extent/NR Size
 12660                                  ;----------------------------------------------------------------------------
 12661                                  
 12662                                  _$FCB_CREATE:		; System call 22
 12663                                  
 12664                                  ;hkn; DOS_Create is in DOSCODE
 12665 00002C55 B9[E836]                	MOV	CX,DOS_CREATE		; routine to call
 12666 00002C58 31C0                    	XOR	AX,AX			; attributes to create
 12667 00002C5A E86CFD                  	call	GetExtended		; get extended FCB
 12668 00002C5D 7403                    	JZ	short DoAccessJ		; not an extended FCB
 12669 00002C5F 8A44FF                  	MOV	AL,[SI-1]		; get attributes
 12670                                  DoAccessJ:
 12671 00002C62 E924FF                  	JMP	DoAccess		; do dirty work
 12672                                  
 12673                                  ; 22/07/2018 - Retro DOS v3.0
 12674                                  
 12675                                  ;BREAK <$FCB_Random_write_Block - write a block of records to a file >
 12676                                  ;----------------------------------------------------------------------------
 12677                                  ;
 12678                                  ;   $FCB_Random_Write_Block - retrieve a location from the FCB, seek to it
 12679                                  ;	and write a number of blocks from it.
 12680                                  ;
 12681                                  ;   Inputs:	DS:DX point to an FCB
 12682                                  ;   Outputs:	AL = 0 write was successful and the FCB position is updated
 12683                                  ;		AL <> 0 Not enough room on disk for the output
 12684                                  ;
 12685                                  ;----------------------------------------------------------------------------
 12686                                  
 12687                                  _$FCB_RANDOM_WRITE_BLOCK:
 12688                                  	;mov	AL,0Ah	
 12689 00002C65 B00A                    	MOV	AL,RANDOM+BLOCK
 12690 00002C67 E979FD                  	JMP	FCBIO
 12691                                  
 12692                                  ;BREAK <$FCB_Random_Read_Block - read a block of records to a file >
 12693                                  ;----------------------------------------------------------------------------
 12694                                  ;
 12695                                  ;   $FCB_Random_Read_Block - retrieve a location from the FCB, seek to it
 12696                                  ;	and read a number of blocks from it.
 12697                                  ;
 12698                                  ;   Inputs:	DS:DX point to an FCB
 12699                                  ;   Outputs:	AL = error codes defined above
 12700                                  ;
 12701                                  ;----------------------------------------------------------------------------
 12702                                  
 12703                                  _$FCB_RANDOM_READ_BLOCK:
 12704                                  	;mov	AL,0Eh	
 12705 00002C6A B00E                    	MOV	AL,RANDOM+FCBREAD+BLOCK
 12706 00002C6C E974FD                  	JMP	FCBIO
 12707                                  
 12708                                  ;BREAK <$FCB_Seq_Read - read the next record from a file >
 12709                                  ;----------------------------------------------------------------------------
 12710                                  ;
 12711                                  ;   $FCB_Seq_Read - retrieve the next record from an FCB and read it into
 12712                                  ;	memory
 12713                                  ;
 12714                                  ;   Inputs:	DS:DX point to an FCB
 12715                                  ;   Outputs:	AL = error codes defined above
 12716                                  ;
 12717                                  ;----------------------------------------------------------------------------
 12718                                  
 12719                                  _$FCB_SEQ_READ:
 12720                                  	;mov	AL,4	
 12721 00002C6F B004                    	MOV	AL,FCBREAD
 12722 00002C71 E96FFD                  	JMP	FCBIO
 12723                                  
 12724                                  ;BREAK <$FCB_Seq_Write - write the next record to a file >
 12725                                  ;----------------------------------------------------------------------------
 12726                                  ;
 12727                                  ;   $FCB_Seq_Write - retrieve the next record from an FCB and write it to the
 12728                                  ;	file
 12729                                  ;
 12730                                  ;   Inputs:	DS:DX point to an FCB
 12731                                  ;   Outputs:	AL = error codes defined above
 12732                                  ;
 12733                                  ;----------------------------------------------------------------------------
 12734                                  
 12735                                  _$FCB_SEQ_WRITE:
 12736 00002C74 B000                    	MOV	AL,0
 12737 00002C76 E96AFD                  	jmp	FCBIO
 12738                                  
 12739                                  ;BREAK <$FCB_Random_Read - Read a single record from a file >
 12740                                  ;----------------------------------------------------------------------------
 12741                                  ;
 12742                                  ;   $FCB_Random_Read - retrieve a location from the FCB, seek to it and read a
 12743                                  ;	record from it.
 12744                                  ;
 12745                                  ;   Inputs:	DS:DX point to an FCB
 12746                                  ;   Outputs:	AL = error codes defined above
 12747                                  ;
 12748                                  ;----------------------------------------------------------------------------
 12749                                  
 12750                                  _$FCB_RANDOM_READ:
 12751                                  	;mov	AL,6	
 12752 00002C79 B006                    	MOV	AL,RANDOM+FCBREAD
 12753 00002C7B E965FD                  	jmp	FCBIO			; single block
 12754                                  
 12755                                  ;BREAK <$FCB_Random_Write - write a single record to a file >
 12756                                  ;----------------------------------------------------------------------------
 12757                                  ;
 12758                                  ;   $FCB_Random_Write - retrieve a location from the FCB, seek to it and write
 12759                                  ;	a record to it.
 12760                                  ;
 12761                                  ;   Inputs:	DS:DX point to an FCB
 12762                                  ;   Outputs:	AL = error codes defined above
 12763                                  ;
 12764                                  ;----------------------------------------------------------------------------
 12765                                  
 12766                                  _$FCB_RANDOM_WRITE:
 12767                                  	;mov	AL,2	
 12768 00002C7E B002                    	MOV	AL,RANDOM
 12769 00002C80 E960FD                  	jmp	FCBIO
 12770                                  
 12771                                  ;============================================================================
 12772                                  ; SEARCH.ASM, MSDOS 6.0, 1991
 12773                                  ;============================================================================
 12774                                  ; 22/07/2018 - Retro DOS v3.0
 12775                                  
 12776                                  ;**	Search.asm
 12777                                  ;
 12778                                  ;	Directory search system calls.
 12779                                  ;	These will be passed direct text of the pathname from the user. 
 12780                                  ;	They will need to be passed through the macro expander prior to
 12781                                  ;	being sent through the low-level stuff. 
 12782                                  ;	I/O specs are defined in DISPATCH. The system calls are:
 12783                                  ;
 12784                                  ;	$Dir_Search_First	  written
 12785                                  ;	$Dir_Search_Next	  written
 12786                                  ;	$Find_First	  written
 12787                                  ;	$Find_Next		  written
 12788                                  ;	PackName		  written
 12789                                  ;
 12790                                  ;	Modification history:
 12791                                  ;
 12792                                  ;	  Created: ARR 4 April 1983
 12793                                  
 12794                                  ;----------------------------------------------------------------------------
 12795                                  ; Procedure Name : $DIR_SEARCH_FIRST
 12796                                  ;
 12797                                  ; Inputs:
 12798                                  ;	DS:DX Points to unopenned FCB
 12799                                  ; Function:
 12800                                  ;	Directory is searched for first matching entry and the directory
 12801                                  ;	entry is loaded at the disk transfer address
 12802                                  ; Returns:
 12803                                  ;	AL = -1 if no entries matched, otherwise 0
 12804                                  ;----------------------------------------------------------------------------
 12805                                  
 12806                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 2B88h
 12807                                  
 12808                                  _$DIR_SEARCH_FIRST:
 12809 00002C83 368916[3E05]            	MOV	[SS:THISFCB],DX
 12810 00002C88 368C1E[4005]            	MOV	[SS:THISFCB+2],DS
 12811 00002C8D 89D6                    	MOV	SI,DX
 12812 00002C8F 803CFF                  	CMP	BYTE [SI],0FFH
 12813 00002C92 7503                    	JNZ	short NORMFCB4
 12814 00002C94 83C607                  	ADD	SI,7			; Point to drive select byte
 12815                                  NORMFCB4:
 12816 00002C97 FF34                    	push	word [SI]		; Save original drive byte for later
 12817                                  
 12818 00002C99 16                      	push	ss
 12819 00002C9A 07                      	pop	es			; get es to address DOSGroup
 12820                                  
 12821 00002C9B BF[6003]                	MOV	DI,OPENBUF		; appropriate buffer
 12822 00002C9E E8473D                  	call	TransFCB		; convert the FCB, set SATTRIB EXTFCB
 12823 00002CA1 7304                    	JNC	short SearchIt		; no error, go and look
 12824 00002CA3 5B                      	pop	bx			; Clean stack
 12825                                  ;
 12826                                  ; Error code is in AX
 12827                                  ;
 12828 00002CA4 E978EA                  	jmp	FCB_RET_ERR		; error
 12829                                  
 12830                                  SearchIt:
 12831 00002CA7 16                      	push	ss
 12832 00002CA8 1F                      	pop	ds			; get ready for search
 12833 00002CA9 FF36[DA02]              	push	word [DMAADD]
 12834 00002CAD FF36[DC02]              	push	word [DMAADD+2]
 12835 00002CB1 C706[DA02][6004]        	MOV	WORD [DMAADD],SEARCHBUF
 12836 00002CB7 8C1E[DC02]              	MOV	WORD [DMAADD+2],DS
 12837                                  	; MSDOS 6.0
 12838                                  	;call	GET_FAST_SEARCH 	; search
 12839                                  	; MSDOS 3.3
 12840 00002CBB E8560C                  	call	DOS_SEARCH_FIRST
 12841 00002CBE 8F06[DC02]              	pop	word [DMAADD+2]
 12842 00002CC2 8F06[DA02]              	pop	word [DMAADD]
 12843 00002CC6 7304                    	JNC	short SearchSet		; no error, transfer info
 12844 00002CC8 5B                      	pop	bx			; Clean stack
 12845                                  ;
 12846                                  ; Error code is in AX
 12847                                  ;
 12848 00002CC9 E953EA                  	jmp	FCB_RET_ERR
 12849                                  
 12850                                  ;
 12851                                  ; The search was successful (or the search-next).  We store the information
 12852                                  ; into the user's FCB for continuation.
 12853                                  ;
 12854                                  SearchSet:
 12855 00002CCC BE[6004]                	MOV	SI,SEARCHBUF
 12856 00002CCF C43E[3E05]              	LES	DI,[THISFCB]		; point to the FCB
 12857 00002CD3 F606[0705]FF            	TEST	byte [EXTFCB],0FFh		;
 12858 00002CD8 7403                    	JZ	short NORMFCB1
 12859 00002CDA 83C707                  	ADD	DI,7			; Point past the extension
 12860                                  NORMFCB1:
 12861 00002CDD 5B                      	pop	bx			; Get original drive byte
 12862 00002CDE 08DB                    	OR	BL,BL
 12863 00002CE0 7506                    	JNZ	short SearchDrv
 12864 00002CE2 8A1E[E402]              	MOV	BL,[CURDRV]
 12865 00002CE6 FEC3                    	INC	BL
 12866                                  SearchDrv:
 12867 00002CE8 AC                      	LODSB				; Get correct search contin drive byte
 12868 00002CE9 86C3                    	XCHG	AL,BL			; Search byte to BL, user byte to AL
 12869 00002CEB 47                      	INC	DI
 12870                                  	;STOSB				; Store the correct "user" drive byte
 12871                                  					;  at the start of the search info
 12872 00002CEC B90A00                  	MOV	CX,20/2
 12873 00002CEF F3A5                    	REP	MOVSW			; Rest of search cont info, SI -> entry
 12874 00002CF1 86C3                    	XCHG	AL,BL			; User drive byte back to BL, search
 12875                                  					;   byte to AL
 12876 00002CF3 AA                      	STOSB				; Search contin drive byte at end of
 12877                                  					;   contin info
 12878 00002CF4 C43E[DA02]              	LES	DI,[DMAADD]
 12879 00002CF8 F606[0705]FF            	TEST	byte [EXTFCB],0FFh
 12880 00002CFD 740E                    	JZ	short NORMFCB2
 12881 00002CFF B0FF                    	MOV	AL,0FFh
 12882 00002D01 AA                      	STOSB
 12883 00002D02 FEC0                    	INC	AL
 12884 00002D04 B90500                  	MOV	CX,5
 12885 00002D07 F3AA                    	REP	STOSB
 12886 00002D09 A0[0805]                	MOV	AL,[SATTRIB]
 12887 00002D0C AA                      	STOSB
 12888                                  NORMFCB2:
 12889 00002D0D 88D8                    	MOV	AL,BL			; User Drive byte
 12890 00002D0F AA                      	STOSB
 12891 00002D10 B91000                  	MOV	CX,16			; 32 / 2 words of dir entry
 12892 00002D13 F3A5                    	REP	MOVSW
 12893 00002D15 E904EA                  	jmp	FCB_RET_OK
 12894                                  
 12895                                  ;----------------------------------------------------------------------------
 12896                                  ;
 12897                                  ; Procedure Name : $DIR_SEARCH_NEXT
 12898                                  ;
 12899                                  ; Inputs:
 12900                                  ;	DS:DX points to unopenned FCB returned by $DIR_SEARCH_FIRST
 12901                                  ; Function:
 12902                                  ;	Directory is searched for the next matching entry and the directory
 12903                                  ;	entry is loaded at the disk transfer address
 12904                                  ; Returns:
 12905                                  ;	AL = -1 if no entries matched, otherwise 0
 12906                                  ;----------------------------------------------------------------------------
 12907                                  
 12908                                  _$DIR_SEARCH_NEXT:
 12909 00002D18 368916[3E05]            	MOV	[SS:THISFCB],DX
 12910 00002D1D 368C1E[4005]            	MOV	[SS:THISFCB+2],DS
 12911 00002D22 36C606[0805]00          	MOV	byte [SS:SATTRIB],0
 12912 00002D28 36C606[0705]00          	MOV	byte [SS:EXTFCB],0
 12913                                  
 12914 00002D2E 16                      	push	ss
 12915 00002D2F 07                      	pop	es
 12916                                  
 12917 00002D30 BF[6004]                	MOV	DI,SEARCHBUF
 12918                                  
 12919 00002D33 89D6                    	MOV	SI,DX
 12920 00002D35 803CFF                  	CMP	BYTE [SI],0FFh
 12921 00002D38 750D                    	JNZ	short NORMFCB6
 12922 00002D3A 83C606                  	ADD	SI,6
 12923 00002D3D AC                      	LODSB
 12924                                  
 12925 00002D3E 36A2[0805]              	MOV	[SS:SATTRIB],AL
 12926 00002D42 36FE0E[0705]            	DEC	byte [SS:EXTFCB]
 12927                                  NORMFCB6:
 12928 00002D47 AC                      	LODSB				; Get original user drive byte
 12929 00002D48 50                      	push	ax			; Put it on stack
 12930 00002D49 8A4414                  	MOV	AL,[SI+20]		; Get correct search contin drive byte
 12931 00002D4C AA                      	STOSB				; Put in correct place
 12932 00002D4D B90A00                  	MOV	CX,20/2
 12933 00002D50 F3A5                    	REP	MOVSW			; Transfer in rest of search contin info
 12934                                  
 12935 00002D52 16                      	push	ss
 12936 00002D53 1F                      	pop	ds
 12937                                  
 12938 00002D54 FF36[DA02]              	push	word [DMAADD]
 12939 00002D58 FF36[DC02]              	push	word [DMAADD+2]
 12940 00002D5C C706[DA02][6004]        	MOV	WORD [DMAADD],SEARCHBUF
 12941 00002D62 8C1E[DC02]              	MOV	WORD [DMAADD+2],DS
 12942 00002D66 E8600C                  	call	DOS_SEARCH_NEXT 	; Find it
 12943 00002D69 8F06[DC02]              	pop	word [DMAADD+2]
 12944 00002D6D 8F06[DA02]              	pop	word [DMAADD]
 12945 00002D71 7203                    	JC	short SearchNoMore
 12946 00002D73 E956FF                  	JMP	SearchSet		; Ok set return
 12947                                  
 12948                                  SearchNoMore:
 12949 00002D76 C43E[3E05]              	LES	DI,[THISFCB]
 12950 00002D7A F606[0705]FF            	TEST	byte [EXTFCB],0FFh
 12951 00002D7F 7403                    	JZ	short NORMFCB8
 12952 00002D81 83C707                  	ADD	DI,7			; Point past the extension
 12953                                  NORMFCB8:
 12954 00002D84 5B                      	pop	bx			; Get original drive byte
 12955 00002D85 26881D                  	MOV	[ES:DI],BL		; Store the correct "user" drive byte
 12956                                  					;  at the right spot
 12957                                  ;
 12958                                  ; error code is in AX
 12959                                  ;
 12960 00002D88 E994E9                  	jmp	FCB_RET_ERR
 12961                                  
 12962                                  ;---------------------------------------------------------------------------
 12963                                  ;
 12964                                  ;   Procedure Name : $FIND_FIRST
 12965                                  ; 
 12966                                  ;   Assembler usage:
 12967                                  ;	    MOV AH, FindFirst
 12968                                  ;	    LDS DX, name
 12969                                  ;	    MOV CX, attr
 12970                                  ;	    INT 21h
 12971                                  ;	; DMA address has datablock
 12972                                  ;
 12973                                  ;   Error Returns:
 12974                                  ;	    AX = error_path_not_found
 12975                                  ;	       = error_no_more_files
 12976                                  ;---------------------------------------------------------------------------
 12977                                  
 12978                                  _$FIND_FIRST:
 12979 00002D8B 89D6                    	MOV	SI,DX			; get name in appropriate place
 12980 00002D8D 36880E[0805]            	MOV	[SS:SATTRIB],CL		; Search attribute to correct loc
 12981                                  
 12982 00002D92 BF[6003]                	MOV	DI,OPENBUF		; appropriate buffer
 12983                                  
 12984 00002D95 E8B83C                  	call	TransPathSet		; convert the path
 12985 00002D98 7305                    	JNC	short Find_it 		; no error, go and look
 12986                                  FindError:
 12987                                  	;mov	al,3
 12988 00002D9A B003                    	mov	al, error_path_not_found ; error and map into one.
 12989 00002D9C E96AE9                  	jmp	SYS_RET_ERR
 12990                                  Find_it:
 12991 00002D9F 16                      	push	ss
 12992 00002DA0 1F                      	pop	ds
 12993                                  
 12994 00002DA1 FF36[DA02]              	push	word [DMAADD]
 12995 00002DA5 FF36[DC02]              	push	word [DMAADD+2]
 12996 00002DA9 C706[DA02][6004]        	MOV	WORD [DMAADD],SEARCHBUF
 12997 00002DAF 8C1E[DC02]              	MOV	WORD [DMAADD+2],DS
 12998                                  	; MSDOS 6.0
 12999                                  	;call	GET_FAST_SEARCH 	; search
 13000                                  	; MSDOS 3.3
 13001 00002DB3 E85E0B                  	call	DOS_SEARCH_FIRST
 13002 00002DB6 8F06[DC02]              	pop	word [DMAADD+2]
 13003 00002DBA 8F06[DA02]              	pop	word [DMAADD]
 13004 00002DBE 7303                    	JNC	short FindSet 		; no error, transfer info
 13005 00002DC0 E946E9                  	jmp	SYS_RET_ERR
 13006                                  
 13007                                  FindSet:
 13008 00002DC3 BE[6004]                	MOV	SI,SEARCHBUF
 13009 00002DC6 C43E[DA02]              	LES	DI,[DMAADD]
 13010 00002DCA B91500                  	MOV	CX,21
 13011 00002DCD F3A4                    	REP	MOVSB
 13012 00002DCF 56                      	PUSH	SI			; Save pointer to start of entry
 13013                                  	;mov	al,[si+0Bh]
 13014 00002DD0 8A440B                  	MOV	AL,[SI+dir_entry.dir_attr]
 13015 00002DD3 AA                      	STOSB
 13016                                  	;add	si,16h
 13017 00002DD4 83C616                  	ADD	SI,dir_entry.dir_time
 13018 00002DD7 A5                      	MOVSW				; dir_time
 13019 00002DD8 A5                      	MOVSW				; dir_date
 13020 00002DD9 46                      	INC	SI
 13021 00002DDA 46                      	INC	SI			; Skip dir_first
 13022 00002DDB A5                      	MOVSW				; dir_size (2 words)
 13023 00002DDC A5                      	MOVSW
 13024 00002DDD 5E                      	POP	SI			; Point back to dir_name
 13025 00002DDE E83600                   	CALL	PackName
 13026 00002DE1 E919E9                  	jmp	SYS_RET_OK		; bye with no errors
 13027                                  
 13028                                  ;---------------------------------------------------------------------------
 13029                                  ;
 13030                                  ;   Procedure Name : $FIND_NEXT
 13031                                  ;
 13032                                  ;   Assembler usage:
 13033                                  ;	; dma points at area returned by find_first
 13034                                  ;	    MOV AH, findnext
 13035                                  ;	    INT 21h
 13036                                  ;	; next entry is at dma
 13037                                  ;
 13038                                  ;   Error Returns:
 13039                                  ;	    AX = error_no_more_files
 13040                                  ;---------------------------------------------------------------------------
 13041                                  
 13042                                  _$FIND_NEXT:
 13043 00002DE4 16                      	push	ss
 13044 00002DE5 07                      	pop	es
 13045                                  
 13046 00002DE6 BF[6004]                	MOV	DI,SEARCHBUF
 13047                                  
 13048 00002DE9 36C536[DA02]            	LDS	SI,[SS:DMAADD]
 13049                                  
 13050 00002DEE B91500                  	MOV	CX,21
 13051 00002DF1 F3A4                    	REP	MOVSB			; Put the search continuation info
 13052                                  					;  in the right place
 13053 00002DF3 16                      	push	ss
 13054 00002DF4 1F                      	pop	ds			; get ready for search
 13055                                  	
 13056 00002DF5 FF36[DA02]              	push	word [DMAADD]
 13057 00002DF9 FF36[DC02]              	push	word [DMAADD+2]
 13058 00002DFD C706[DA02][6004]        	MOV	WORD [DMAADD],SEARCHBUF
 13059 00002E03 8C1E[DC02]              	MOV	WORD [DMAADD+2],DS
 13060 00002E07 E8BF0B                  	call	DOS_SEARCH_NEXT 	; Find it
 13061 00002E0A 8F06[DC02]              	pop	word [DMAADD+2]
 13062 00002E0E 8F06[DA02]              	pop	word [DMAADD]
 13063 00002E12 73AF                    	JNC	short FindSet 		; No error, set info
 13064 00002E14 E9F2E8                  	jmp	SYS_RET_ERR
 13065                                  
 13066                                  ;---------------------------------------------------------------------------
 13067                                  ;**	PackName - Convert file names from FCB to ASCIZ format.
 13068                                  ;
 13069                                  ;	PackName transfers a file name from DS:SI to ES:DI and converts it to
 13070                                  ;	the ASCIZ format.
 13071                                  ;
 13072                                  ;	ENTRY	(DS:SI) = 11 character FCB or dir entry name
 13073                                  ;		(ES:DI) = destination area (13 bytes)
 13074                                  ;	EXIT	(ds:SI) and (es:DI) advanced
 13075                                  ;	USES	al, CX, SI, DI, Flags  (BUGBUG - not verified - jgl)
 13076                                  ;---------------------------------------------------------------------------
 13077                                  
 13078                                  PackName:
 13079                                  ;	Move over 8 characters to cover the name component, then trim it's
 13080                                  ;	trailing blanks.
 13081                                  
 13082 00002E17 B90800                  	MOV	CX,8			; Pack the name
 13083 00002E1A F3A4                    	REP	MOVSB			; Move all of it
 13084                                  main_kill_tail:
 13085 00002E1C 26807DFF20              	CMP	BYTE [ES:DI-1]," "
 13086 00002E21 7507                    	JNZ	short find_check_dot
 13087 00002E23 4F                      	DEC	DI			; Back up over trailing space
 13088 00002E24 41                      	INC	CX
 13089 00002E25 83F908                  	CMP	CX,8
 13090 00002E28 72F2                    	JB	short main_kill_tail
 13091                                  find_check_dot:
 13092                                  	;CMP	WORD [SI],(" " << 8) | " "
 13093 00002E2A 813C2020                	cmp     word [si],2020h 
 13094 00002E2E 7506                    	JNZ	short got_ext 		; Some chars in extension
 13095 00002E30 807C0220                	CMP	BYTE [SI+2]," "
 13096 00002E34 7412                    	JZ	short find_done		; No extension
 13097                                  got_ext:
 13098 00002E36 B02E                    	MOV	AL,"."
 13099 00002E38 AA                      	STOSB
 13100 00002E39 B90300                  	MOV	CX,3
 13101 00002E3C F3A4                    	REP	MOVSB
 13102                                  ext_kill_tail:
 13103 00002E3E 26807DFF20              	CMP	BYTE [ES:DI-1]," "
 13104 00002E43 7503                    	JNZ	short find_done
 13105 00002E45 4F                      	DEC	DI			; Back up over trailing space
 13106 00002E46 EBF6                    	JMP	short ext_kill_tail
 13107                                  find_done:
 13108 00002E48 31C0                    	XOR	AX,AX
 13109 00002E4A AA                      	STOSB				; NUL terminate
 13110 00002E4B C3                      	retn
 13111                                  
 13112                                  ;GET_FAST_SEARCH:
 13113                                  ;	; 22/07/2018
 13114                                  ;	; MSDOS 6.0
 13115                                  ;	OR	word [DOS34_FLAG],SEARCH_FASTOPEN 
 13116                                  ;					;FO.trigger fastopen ;AN000;
 13117                                  ;	call	DOS_SEARCH_FIRST
 13118                                  ;	retn
 13119                                  
 13120                                  
 13121                                  ;============================================================================
 13122                                  ; PATH.ASM, MSDOS 6.0, 1991
 13123                                  ;============================================================================
 13124                                  ; 06/08/2018 - Retro DOS v3.0
 13125                                  
 13126                                  ;**	Directory related system calls. These will be passed direct text of the
 13127                                  ;	pathname from the user. They will need to be passed through the macro
 13128                                  ;	expander prior to being sent through the low-level stuff. I/O specs are
 13129                                  ;	defined in DISPATCH. The system calls are:
 13130                                  ;
 13131                                  ;	$CURRENT_DIR  Written
 13132                                  ;	$RMDIR	  Written
 13133                                  ;	$CHDIR	  Written
 13134                                  ;	$MKDIR	  Written
 13135                                  ;
 13136                                  ;
 13137                                  ;	Modification history:
 13138                                  ;
 13139                                  ;	    Created: ARR 4 April 1983
 13140                                  ;		 MZ 10 May 1983     CurrentDir implemented
 13141                                  ;		 MZ 11 May 1983     RmDir, ChDir, MkDir implemented
 13142                                  ;		 EE 19 Oct 1983     RmDir no longer allows you to delete a
 13143                                  ;				    current directory.
 13144                                  ;		 MZ 19 Jan 1983     Brain damaged applications rely on success
 13145                                  
 13146                                  ;	I_Need	ThisCDS,DWORD		; pointer to Current CDS
 13147                                  ;	I_Need	WFP_Start,WORD		; pointer to beginning of directory text
 13148                                  ;	I_Need	Curr_Dir_End,WORD	; offset to end of directory part
 13149                                  ;	I_Need	OpenBuf,128		; temp spot for translated name
 13150                                  ;	I_need	fSplice,BYTE		; TRUE => do splice
 13151                                  ;	I_Need	NoSetDir,BYTE		; TRUE => no exact match on splice
 13152                                  ;	I_Need	cMeta,BYTE
 13153                                  ;	I_Need	DrvErr,BYTE					;AN000;
 13154                                  
 13155                                  
 13156                                  ;BREAK <$CURRENT_DIR - dump the current directory into user space>
 13157                                  ;---------------------------------------------------------------------------
 13158                                  ;
 13159                                  ;   Procedure Name : $CURRENT_DIR
 13160                                  ;
 13161                                  ;   Assembler usage:
 13162                                  ;		LDS	SI,area
 13163                                  ;		MOV	DL,drive
 13164                                  ;		INT	21h
 13165                                  ;	    ; DS:SI is a pointer to 64 byte area that contains drive
 13166                                  ;	    ; current directory.
 13167                                  ;   Error returns:
 13168                                  ;	    AX = error_invalid_drive
 13169                                  ;
 13170                                  ;---------------------------------------------------------------------------
 13171                                  
 13172                                  _$CURRENT_DIR:
 13173                                  	;06/08/2018 - Retro DOS v3.0
 13174                                  	;IBMDOS.COM (MSDOS 3.3, 1987) - Offset 2D4Eh
 13175 00002E4C E81DF2                  	call	EcritDisk
 13176 00002E4F 88D0                    	MOV	AL,DL			; get drive number (0=def, 1=A)
 13177 00002E51 E8063B                  	call	GetVisDrv		; grab it
 13178 00002E54 7308                    	JNC	short CurrentValidate 	; no error -> go and validate dir
 13179                                  CurdirErr:
 13180 00002E56 E81BF2                  	call	LcritDisk
 13181                                  	
 13182                                  	; MSDOS 6.0
 13183                                  	;MOV	AL,[CS:DrvErr]		;IFS.			;AN000;
 13184                                  
 13185                                  	; MSDOS 3.3
 13186 00002E59 B00F                    	mov	al,0Fh
 13187                                  
 13188                                  curdir_errj:
 13189 00002E5B E9ABE8                  	jmp	SYS_RET_ERR		;IFS. make noise	;AN000;
 13190                                  
 13191                                  CurrentValidate:
 13192 00002E5E 1E                      	push	ds		; save destination
 13193 00002E5F 56                      	push	si
 13194 00002E60 2EC536[3A05]            	LDS	SI,[CS:THISCDS]
 13195                                  	;TEST	word [SI+curdir.flags],curdir_isnet
 13196                                  	;JNZ	short DoCheck
 13197                                  ; Random optimization nuked due to some utilities using GetCurrentDir to do
 13198                                  ; media check.
 13199                                  ;	CMP	word [SI+curdir.ID],0
 13200                                  ;	JZ	short GetDst
 13201                                  DoCheck:
 13202 00002E65 2EC606[F802]00          	MOV	byte [cs:NoSetDir],0	; interested only in contents
 13203                                  
 13204 00002E6B BF[6003]                	MOV	DI,OPENBUF
 13205                                  
 13206 00002E6E E8FD1C                  	call	ValidateCDS		; output is ES:DI -> CDS
 13207 00002E71 06                      	push	es	 		; swap source and destination
 13208 00002E72 57                      	push	di
 13209 00002E73 5E                      	pop	si
 13210 00002E74 1F                      	pop	ds
 13211                                  GetDst:
 13212 00002E75 5F                      	pop	di
 13213 00002E76 07                      	pop	es			; get real destination
 13214 00002E77 72DD                    	JC	short CurdirErr
 13215                                  	;ADD	SI,curdir.text ; add si,0 ; 09/08/2018
 13216 00002E79 03744F                  	ADD	SI,[SI+curdir.end]
 13217 00002E7C 803C5C                  	CMP	BYTE [SI],'\'		; root or subdirs present?
 13218 00002E7F 7501                    	JNZ	short CurrentCopy
 13219 00002E81 46                      	INC	SI
 13220                                  CurrentCopy:
 13221                                  ;	call	FStrCpy
 13222                                  ;; 10/29/86 E5 char
 13223 00002E82 50                      	PUSH	AX
 13224 00002E83 AC                      	LODSB				; get char
 13225 00002E84 08C0                    	OR	AL,AL
 13226 00002E86 7413                    	JZ	short FOK
 13227 00002E88 3C05                    	CMP	AL,05
 13228 00002E8A 740D                    	JZ	short FCHANGE
 13229 00002E8C EB01                    	JMP	short FFF
 13230                                  FCPYNEXT:
 13231 00002E8E AC                      	LODSB				; get char
 13232                                  FFF:
 13233 00002E8F 3C5C                    	CMP	AL,'\'			; beginning of directory
 13234 00002E91 7508                    	JNZ	short FOK		; no
 13235 00002E93 AA                      	STOSB				; put into user's buffer
 13236 00002E94 AC                      	LODSB				; 1st char of dir is 05?
 13237 00002E95 3C05                    	CMP	AL,05H
 13238 00002E97 7502                    	JNZ	short FOK		; no
 13239                                  FCHANGE:
 13240 00002E99 B0E5                    	MOV	AL,0E5H			; make it E5
 13241                                  FOK:
 13242 00002E9B AA                      	STOSB				; put into user's buffer
 13243 00002E9C 08C0                    	OR	AL,AL			; final char
 13244 00002E9E 75EE                    	JNZ	short FCPYNEXT		; no
 13245 00002EA0 58                      	POP	AX
 13246                                  
 13247                                  ;; 10/29/86 E5 char
 13248 00002EA1 30C0                    	xor	AL,AL			; MZ 19 Jan 84
 13249 00002EA3 E8CEF1                  	call	LcritDisk
 13250 00002EA6 E954E8                  	jmp	SYS_RET_OK		; no more, bye!
 13251                                  
 13252                                  
 13253                                  ;BREAK <$RmDir -- Remove a directory>
 13254                                  ;---------------------------------------------------------------------------
 13255                                  ;
 13256                                  ; Procedure Name : $RmDir
 13257                                  ;
 13258                                  ; Inputs:
 13259                                  ;	DS:DX Points to asciz name
 13260                                  ; Function:
 13261                                  ;	Delete directory if empty
 13262                                  ; Returns:
 13263                                  ;	STD XENIX Return
 13264                                  ;	AX = error_path_not_found If path bad
 13265                                  ;	AX = error_access_denied If
 13266                                  ;		Directory not empty
 13267                                  ;		Path not directory
 13268                                  ;		Root directory specified
 13269                                  ;		Directory malformed (. and .. not first two entries)
 13270                                  ;		User tries to delete a current directory
 13271                                  ;	AX = error_current_directory
 13272                                  ;
 13273                                  ;----------------------------------------------------------------------------
 13274                                  
 13275                                  _$RMDIR:
 13276 00002EA9 52                      	push	dx			; Save ptr to name
 13277 00002EAA 1E                      	push	ds
 13278 00002EAB 89D6                    	mov	si,dx			; Load ptr into si
 13279 00002EAD BF[6003]                	mov	di,OPENBUF		; di = ptr to buf for trans name
 13280 00002EB0 57                      	push	di
 13281 00002EB1 E8A43B                  	call	TransPathNoSet		; Translate the name
 13282 00002EB4 5F                      	pop	di			; di = ptr to buf for trans name
 13283 00002EB5 7307                    	jnc	short rmlset		; If transpath succeeded, continue
 13284 00002EB7 1F                      	pop	ds
 13285 00002EB8 5A                      	pop	dx			; Restore the	 name
 13286 00002EB9 B003                    	mov	al,error_path_not_found ; Otherwise, return an error
 13287                                  	;jmp	short curdir_errj
 13288                                  rmdir_errj: ; 10/08/2018
 13289 00002EBB E94BE8                  	jmp	SYS_RET_ERR
 13290                                  rmlset:
 13291 00002EBE 36803E[1505]FF          	CMP	byte [ss:CMETA],-1	;   if (cMeta >= 0)
 13292 00002EC4 7512                    	Jnz	short rmerr		;	return (-1);
 13293 00002EC6 16                      	push	ss
 13294 00002EC7 07                      	pop	es
 13295 00002EC8 30C0                    	xor	al,al			; al = 0 , ie drive a:
 13296                                  rmloop: 
 13297 00002ECA E8F73A                  	call	GetCDSFromDrv		; Get curdir for drive in al
 13298 00002ECD 720F                    	jc	short rmcont		; If error, exit loop & cont normally
 13299 00002ECF E862F0                  	call	StrCmp			; Are the 2 paths the same?
 13300 00002ED2 7404                    	jz	short rmerr		; Yes, report error.
 13301 00002ED4 FEC0                    	inc	al			; No, inc al to next drive number
 13302 00002ED6 EBF2                    	jmp	short rmloop		; Go check next drive.
 13303                                  rmerr:
 13304 00002ED8 1F                      	pop	ds
 13305 00002ED9 5A                      	pop	dx			; Restore the name
 13306 00002EDA B010                    	mov	al,error_current_directory ;  error
 13307                                  	;jmp	short curdir_errj
 13308 00002EDC EBDD                    	jmp	short rmdir_errj
 13309                                  rmcont:
 13310 00002EDE 1F                      	pop	ds
 13311 00002EDF 5A                      	pop	dx			; Restore the name
 13312 00002EE0 BE[1F3D]                	MOV	SI,DOS_RMDIR
 13313 00002EE3 EB75                    	JMP	short DoDirCall ; 07/09/2018
 13314                                  
 13315                                  ;BREAK <$ChDir -- Change current directory on a drive>
 13316                                  ;----------------------------------------------------------------------------
 13317                                  ;
 13318                                  ; $ChDir - Top-level change directory system call.  This call is responsible
 13319                                  ; for setting up the CDS for the specified drive appropriately.  There are
 13320                                  ; several cases to consider:
 13321                                  ;
 13322                                  ;   o	Local, simple CDS.  In this case, we take the input path and convert
 13323                                  ;	it into a WFP.	We verify the existance of this directory and then
 13324                                  ;	copy the WFP into the CDS and set up the ID field to point to the
 13325                                  ;	directory cluster.
 13326                                  ;   o	Net CDS.  We form the path from the root (including network prefix)
 13327                                  ;	and verify its existance (via DOS_Chdir).  If successful, we copy the
 13328                                  ;	WFP back into the CDS.
 13329                                  ;   o	SUBST'ed CDS.  This is no different than the local, simple CDS.
 13330                                  ;   o	JOIN'ed CDS.  This is trouble as there are two CDS's at work.  If we
 13331                                  ;	call TransPath, we will get the PHYSICAL CDS that the path refers to
 13332                                  ;	and the PHYSICAL WFP that the input path refers to.  This is perfectly
 13333                                  ;	good for the validation but not for currency.  We call TransPathNoSet
 13334                                  ;	to process the path but to return the logical CDS and the logical
 13335                                  ;	path.  We then copy the logical path into the logical CDS.
 13336                                  ;
 13337                                  ; Inputs:
 13338                                  ;	DS:DX Points to asciz name
 13339                                  ; Returns:
 13340                                  ;	STD XENIX Return
 13341                                  ;	AX = chdir_path_not_found if error
 13342                                  ;
 13343                                  ;----------------------------------------------------------------------------
 13344                                  
 13345                                  _$CHDIR:
 13346 00002EE5 BF[6003]                	MOV	DI,OPENBUF		; spot for translated name
 13347 00002EE8 89D6                    	MOV	SI,DX			; get source
 13348 00002EEA E85F3B                  	call	TransPath		; go munge the path and get real CDS
 13349 00002EED 7305                    	JNC	short ChDirCrack	; no errors, try path
 13350                                  ChDirErrP:
 13351 00002EEF B003                    	MOV	AL,error_path_not_found
 13352                                  ChDirErr:
 13353 00002EF1 E915E8                  	jmp	SYS_RET_ERR 	; oops!
 13354                                  
 13355                                  ChDirCrack:
 13356 00002EF4 803E[1505]FF            	CMP	byte [CMETA],-1		; No meta chars allowed.
 13357 00002EF9 75F4                    	JNZ	short ChDirErrP
 13358                                  ;
 13359                                  ; We cannot do a ChDir (yet) on a raw CDS.  This is treated as a path not
 13360                                  ; found.
 13361                                  ;
 13362 00002EFB C43E[3A05]              	LES	DI,[THISCDS]
 13363 00002EFF 83FFFF                  	CMP	DI,-1			;   if (ThisCDS == NULL)
 13364 00002F02 74EB                    	JZ	short ChDirErrP		;	error ();
 13365                                   ;
 13366                                   ; Find out if the directory exists.
 13367                                   ;
 13368 00002F04 E8E30D                  	call	DOS_CHDIR
 13369 00002F07 72E8                    	Jc	short ChDirErr
 13370                                  ;
 13371                                  ; Get back CDS to see if a join as seen.  Set the currency pointer (only if
 13372                                  ; not network).  If one was seen, all we need to do is copy in the text
 13373                                  ;
 13374 00002F09 C43E[3A05]              	LES	DI,[THISCDS]
 13375 00002F0D 26F745430020            	TEST	word [ES:DI+curdir.flags],curdir_splice
 13376 00002F13 7425                    	JZ	short GotCDS
 13377                                  ;
 13378                                  ; The CDS was joined.  Let's go back and grab the logical CDS.
 13379                                  ;
 13380 00002F15 06                      	push	es	
 13381 00002F16 57                      	push	di
 13382 00002F17 51                      	push	cx			; save CDS and cluster...
 13383 00002F18 E8F0E6                  	call	Get_User_Stack		; get original text
 13384 00002F1B 8B7C06                  	MOV	DI,[SI+user_env.user_DX]
 13385 00002F1E 8E5C0E                  	MOV	DS,[SI+user_env.user_DS]
 13386 00002F21 BE[6003]                	MOV	SI,OPENBUF		; spot for translated name
 13387 00002F24 87F7                    	XCHG	SI,DI
 13388 00002F26 30C0                    	XOR	AL,AL			; do no splicing
 13389 00002F28 57                      	push	di
 13390 00002F29 E82C3B                  	call	TransPathNoSet		; Munge path
 13391 00002F2C 5E                      	pop	si
 13392                                  ;
 13393                                  ; There should NEVER be an error here.
 13394                                  ;
 13395                                  
 13396                                  ;IF FALSE
 13397                                  ;	JNC SKipErr
 13398                                  ;	fmt <>,<>,<"$p: Internal CHDIR error\n">
 13399                                  ;SkipErr:
 13400                                  ;ENDIF
 13401 00002F2D C43E[3A05]              	LES	DI,[THISCDS]		; get new CDS
 13402 00002F31 26C74549FFFF            	MOV	word [ES:DI+curdir.ID],-1
 13403                                  					; no valid cluster here...
 13404 00002F37 59                      	pop	cx
 13405 00002F38 5F                      	pop	di
 13406 00002F39 07                      	pop	es
 13407                                  ;
 13408                                  ; ES:DI point to the physical CDS, CX is the ID (local only)
 13409                                  ;
 13410                                  GotCDS:
 13411                                  ;
 13412                                  ; wfp_start points to the text.  See if it is long enough
 13413                                  ;
 13414                                  	; MSDOS 3.3
 13415                                  	;push	ss
 13416                                  	;pop	ds
 13417                                  	;mov	si,[WFP_START]
 13418                                  	;push	cx
 13419                                  	;call	DStrLen
 13420                                  	;cmp	cx,67 ; cmp cx,DIRSTRLEN
 13421                                  	;pop	cx
 13422                                  	;ja	short ChDirErrP
 13423                                  
 13424                                  	; MSDOS 6.0
 13425 00002F3A E84800                  	CALL	Check_PathLen		;PTM.		;AN000;
 13426 00002F3D 77B0                    	JA	short ChDirErrP
 13427                                  	; MSDOS 3.3 (& MSDOS 6.0)
 13428 00002F3F 26F745430080            	TEST	word [ES:DI+curdir.flags],curdir_isnet
 13429 00002F45 7508                    	JNZ	short SkipRecency
 13430                                  	; MSDOS 6.0
 13431                                  	;TEST	word [ES:DI+curdir.flags],curdir_splice 
 13432                                  	;				;PTM. for Join and Subst ;AN000;
 13433                                  	;JZ	short setdirclus	;PTM.		;AN000;
 13434                                  	;MOV	CX,-1			;PTM.		;AN000;
 13435                                  ;setdirclus:
 13436 00002F47 26894D49                	MOV	[ES:DI+curdir.ID],CX
 13437 00002F4B C43E[3A05]              	LES	DI,[THISCDS]		; get logical CDS
 13438                                  SkipRecency:
 13439 00002F4F E80FF0                  	call	FStrCpy
 13440 00002F52 30C0                    	XOR	AL,AL
 13441                                  mkdir_ok:
 13442 00002F54 E9A6E7                  	jmp	SYS_RET_OK
 13443                                  
 13444                                  
 13445                                  ;BREAK <$MkDir - Make a directory entry>
 13446                                  ;---------------------------------------------------------------------------
 13447                                  ;
 13448                                  ; Procedure Name : $MkDir
 13449                                  ; Inputs:
 13450                                  ;	DS:DX Points to asciz name
 13451                                  ; Function:
 13452                                  ;	Make a new directory
 13453                                  ; Returns:
 13454                                  ;	STD XENIX Return
 13455                                  ;	AX = mkdir_path_not_found if path bad
 13456                                  ;	AX = mkdir_access_denied  If
 13457                                  ;		Directory cannot be created
 13458                                  ;		Node already exists
 13459                                  ;		Device name given
 13460                                  ;		Disk or directory(root) full
 13461                                  ;---------------------------------------------------------------------------
 13462                                  
 13463                                  _$MKDIR:
 13464 00002F57 BE[083C]                	MOV	SI,DOS_MKDIR
 13465                                  DoDirCall:
 13466 00002F5A BF[6003]                	MOV	DI,OPENBUF		; spot for translated name
 13467                                  
 13468 00002F5D 56                      	push	si
 13469 00002F5E 89D6                    	MOV	SI,DX			; get source
 13470 00002F60 E8E93A                  	call	TransPath		; go munge the path
 13471 00002F63 5E                      	pop	si
 13472 00002F64 7305                    	JNC	short MkDirCrack	; no errors, try path
 13473                                  MkErrP:
 13474 00002F66 B003                    	MOV	AL,error_path_not_found	; oops!
 13475                                  MkErr:
 13476 00002F68 E99EE7                  	jmp	SYS_RET_ERR
 13477                                  MkDirCrack:
 13478 00002F6B 36803E[1505]FF          	CMP	byte [SS:CMETA],-1
 13479 00002F71 75F3                    	JNZ	short MkErrP
 13480                                  
 13481                                  	; MSDOS 3.3
 13482                                  	;push	ss
 13483                                  	;pop	ds
 13484                                  	;call	si
 13485                                  	;jb	short MkErr
 13486                                  	;;jmp	short mkdir_ok
 13487                                  	;jmp	SYS_RET_OK
 13488                                  
 13489                                  	; MSDOS 6.0
 13490 00002F73 56                      	PUSH	SI			;PTM.			;AN000;
 13491 00002F74 E80E00                  	CALL	Check_PathLen		;PTM. check path len > 67 ? ;AN000;
 13492 00002F77 5E                      	POP	SI			;PTM.			;AN000;
 13493 00002F78 7604                    	JBE	short pathok		;PTM.			;AN000;
 13494 00002F7A B005                    	MOV	AL,error_access_denied	;PTM. ops!
 13495                                  	;jmp	SYS_RET_ERR		;PTM.
 13496 00002F7C EBEA                    	jmp	short MkErr
 13497                                  pathok:
 13498 00002F7E FFD6                    	CALL	SI			; go get file
 13499 00002F80 72E6                    	JC	short MkErr		; no errors
 13500                                  	;jmp	short mkdir_ok
 13501 00002F82 E978E7                  	jmp	SYS_RET_OK
 13502                                  
 13503                                  ;----------------------------------------------------------------------------
 13504                                  ;
 13505                                  ; Procedure Name : Check_PathLen
 13506                                  ;
 13507                                  ; Inputs:
 13508                                  ;	nothing
 13509                                  ; Function:
 13510                                  ;	check if final path length greater than 67
 13511                                  ; Returns:
 13512                                  ;	Above flag set if > 67
 13513                                  ;
 13514                                  ;---------------------------------------------------------------------------
 13515                                  
 13516                                  Check_PathLen:
 13517                                  	; 09/09/2018
 13518                                  	;;MOV	SI,[WFP_START]
 13519                                  	;MOV	SI,[SS:WFP_START] ; MSDOS 6.0
 13520                                  ;check_PathLen2:
 13521 00002F85 16                      	push	ss
 13522 00002F86 1F                      	pop	ds
 13523 00002F87 8B36[4A05]              	mov	SI,[WFP_START] ; MSDOS 3.3
 13524 00002F8B 51                      	push	CX	
 13525 00002F8C E8E9EF                  	CALL	DStrLen
 13526 00002F8F 83F943                  	CMP	CX,DIRSTRLEN
 13527 00002F92 59                      	POP	CX
 13528 00002F93 C3                      	retn
 13529                                  
 13530                                  ;============================================================================
 13531                                  ; IOCTL.ASM, MSDOS 6.0, 1991
 13532                                  ;============================================================================
 13533                                  ; 07/08/2018 - Retro DOS v3.0
 13534                                  
 13535                                  ;**	IOCTL system call.
 13536                                  ;
 13537                                  ;	$IOCTL
 13538                                  ;
 13539                                  ;	  Revision history:
 13540                                  ;
 13541                                  ;		Created: ARR 4 April 1983
 13542                                  ;
 13543                                  ;		GenericIOCTL added:		KGS	22 April 1985
 13544                                  ;
 13545                                  ;		A000	version 4.00	Jan. 1988
 13546                                  ;
 13547                                  ;		Used jump table to dispatch IOCTL functions. HKN 3/12/90
 13548                                  ;
 13549                                  
 13550                                  ;BREAK <IOCTL - munge on a handle to do device specific stuff>
 13551                                  ;---------------------------------------------------------------------------
 13552                                  ;
 13553                                  ;   Assembler usage:
 13554                                  ;	    MOV     BX, Handle
 13555                                  ;	    MOV     DX, Data
 13556                                  ;
 13557                                  ;	(or LDS     DX,BUF
 13558                                  ;	    MOV     CX,COUNT)
 13559                                  ;
 13560                                  ;	    MOV     AH, Ioctl
 13561                                  ;	    MOV     AL, Request
 13562                                  ;	    INT     21h
 13563                                  ;
 13564                                  ;   AH = 0  Return a combination of low byte of sf_flags and device driver
 13565                                  ;	    attribute word in DX, handle in BX:
 13566                                  ;	    DH = high word of device driver attributes
 13567                                  ;	    DL = low byte of sf_flags
 13568                                  ;	 1  Set the bits contained in DX to sf_flags.  DH MUST be 0.  Handle
 13569                                  ;	    in BX.
 13570                                  ;	 2  Read CX bytes from the device control channel for handle in BX
 13571                                  ;	    into DS:DX.  Return number read in AX.
 13572                                  ;	 3  Write CX bytes to the device control channel for handle in BX from
 13573                                  ;	    DS:DX.  Return bytes written in AX.
 13574                                  ;	 4  Read CX bytes from the device control channel for drive in BX
 13575                                  ;	    into DS:DX.  Return number read in AX.
 13576                                  ;	 5  Write CX bytes to the device control channel for drive in BX from
 13577                                  ;	    DS:DX.  Return bytes written in AX.
 13578                                  ;	 6  Return input status of handle in BX. If a read will go to the
 13579                                  ;	    device, AL = 0FFh, otherwise 0.
 13580                                  ;	 7  Return output status of handle in BX. If a write will go to the
 13581                                  ;	    device, AL = 0FFh, otherwise 0.
 13582                                  ;	 8  Given a drive in BX, return 1 if the device contains non-
 13583                                  ;	    removable media, 0 otherwise.
 13584                                  ;	 9  Return the contents of the device attribute word in DX for the
 13585                                  ;	    drive in BX.  0200h is the bit for shared.	1000h is the bit for
 13586                                  ;	    network. 8000h is the bit for local use.
 13587                                  ;	 A  Return 8000h if the handle in BX is for the network or not.
 13588                                  ;	 B  Change the retry delay and the retry count for the system. BX is
 13589                                  ;	    the count and CX is the delay.
 13590                                  ;
 13591                                  ;   Error returns:
 13592                                  ;	    AX = error_invalid_handle
 13593                                  ;	       = error_invalid_function
 13594                                  ;	       = error_invalid_data
 13595                                  ;
 13596                                  ;-------------------------------------------------------------------------------
 13597                                  ;
 13598                                  ;   This is the documentation copied from DOS 4.0 it is much better
 13599                                  ;   than the above
 13600                                  ;
 13601                                  ;	There are several basic forms of IOCTL calls:
 13602                                  ;
 13603                                  ;
 13604                                  ;	** Get/Set device information:	**
 13605                                  ;
 13606                                  ;	ENTRY	(AL) = function code
 13607                                  ;		  0 - Get device information
 13608                                  ;		  1 - Set device information
 13609                                  ;		(BX) = file handle
 13610                                  ;		(DX) = info for "Set Device Information"
 13611                                  ;	EXIT	'C' set if error
 13612                                  ;		  (AX) = error code
 13613                                  ;		'C' clear if OK
 13614                                  ;		  (DX) = info for "Get Device Information"
 13615                                  ;	USES	ALL
 13616                                  ;
 13617                                  ;
 13618                                  ;	**  Read/Write Control Data From/To Handle  **
 13619                                  ;
 13620                                  ;	ENTRY	(AL) = function code
 13621                                  ;		  2 - Read device control info
 13622                                  ;		  3 - Write device control info
 13623                                  ;		(BX) = file handle
 13624                                  ;		(CX) = transfer count
 13625                                  ;		(DS:DX) = address for data
 13626                                  ;	EXIT	'C' set if error
 13627                                  ;		  (AX) = error code
 13628                                  ;		'C' clear if OK
 13629                                  ;		  (AX) = count of bytes transfered
 13630                                  ;	USES	ALL
 13631                                  ;
 13632                                  ;
 13633                                  ;	**  Read/Write Control Data From/To Block Device  **
 13634                                  ;
 13635                                  ;	ENTRY	(AL) = function code
 13636                                  ;		  4 - Read device control info
 13637                                  ;		  5 - Write device control info
 13638                                  ;		(BL) = Drive number (0=default, 1='A', 2='B', etc)
 13639                                  ;		(CX) = transfer count
 13640                                  ;		(DS:DX) = address for data
 13641                                  ;	EXIT	'C' set if error
 13642                                  ;		  (AX) = error code
 13643                                  ;		'C' clear if OK
 13644                                  ;		  (AX) = count of bytes transfered
 13645                                  ;	USES	ALL
 13646                                  ;
 13647                                  ;
 13648                                  ;	**  Get Input/Output Status  **
 13649                                  ;
 13650                                  ;	ENTRY	(AL) = function code
 13651                                  ;		  6 - Get Input status
 13652                                  ;		  7 - Get Output Status
 13653                                  ;		(BX) = file handle
 13654                                  ;	EXIT	'C' set if error
 13655                                  ;		  (AX) = error code
 13656                                  ;		'C' clear if OK
 13657                                  ;		  (AL) = 00 if not ready
 13658                                  ;		  (AL) = FF if ready
 13659                                  ;	USES	ALL
 13660                                  ;
 13661                                  ;
 13662                                  ;	**  Get Drive Information  **
 13663                                  ;
 13664                                  ;	ENTRY	(AL) = function code
 13665                                  ;		  8 - Check for removable media
 13666                                  ;		  9 - Get device attributes
 13667                                  ;		(BL) = Drive number (0=default, 1='A', 2='B', etc)
 13668                                  ;	EXIT	'C' set if error
 13669                                  ;		  (AX) = error code
 13670                                  ;		'C' clear if OK
 13671                                  ;		  (AX) = 0/1 media is removable/fixed (func. 8)
 13672                                  ;		  (DX) = device attribute word (func. 9)
 13673                                  ;	USES	ALL
 13674                                  ;
 13675                                  ;
 13676                                  ;	**  Get Redirected bit	**
 13677                                  ;
 13678                                  ;	ENTRY	(AL) = function code
 13679                                  ;		  0Ah - Network stuff
 13680                                  ;		(BX) = file handle
 13681                                  ;	EXIT	'C' set if error
 13682                                  ;		  (AX) = error code
 13683                                  ;		'C' clear if OK
 13684                                  ;		  (DX) = SFT flags word, 8000h set if network file
 13685                                  ;	USES	ALL
 13686                                  ;
 13687                                  ;
 13688                                  ;	**  Change sharer retry parameters  **
 13689                                  ;
 13690                                  ;	ENTRY	(AL) = function code
 13691                                  ;		  0Bh - Set retry parameters
 13692                                  ;		(CX) = retry loop count
 13693                                  ;		(DX) = number of retries
 13694                                  ;	EXIT	'C' set if error
 13695                                  ;		  (AX) = error code
 13696                                  ;		'C' clear if OK
 13697                                  ;	USES	ALL
 13698                                  ;
 13699                                  ;
 13700                                  ;   =================================================================
 13701                                  ;
 13702                                  ;	**  New Standard Control  **
 13703                                  ;
 13704                                  ;	ALL NEW IOCTL FACILITIES SHOULD USE THIS FORM.	THE OTHER
 13705                                  ;	FORMS ARE OBSOLETE.
 13706                                  ;
 13707                                  ;   =================================================================
 13708                                  ;
 13709                                  ;	ENTRY	(AL) = function code
 13710                                  ;		  0Ch - Control Function subcode
 13711                                  ;		(BX) = File Handle
 13712                                  ;		(CH) = Category Indicator
 13713                                  ;		(CL) = Function within category
 13714                                  ;		(DS:DX) = address for data, if any
 13715                                  ;		(SI) = Passed to device as argument, use depends upon function
 13716                                  ;		(DI) = Passed to device as argument, use depends upon function
 13717                                  ;	EXIT	'C' set if error
 13718                                  ;		  (AX) = error code
 13719                                  ;		'C' clear if OK
 13720                                  ;		  (SI) = Return value, meaning is function dependent
 13721                                  ;		  (DI) = Return value, meaning is function dependent
 13722                                  ;		  (DS:DX) = Return address, use is function dependent
 13723                                  ;	USES	ALL
 13724                                  ;
 13725                                  ;    ============== Generic IOCTL Definitions for DOS 3.2 ============
 13726                                  ;     (See inc\ioctl.inc for more info)
 13727                                  ;
 13728                                  ;	ENTRY	(AL) = function code
 13729                                  ;		  0Dh - Control Function subcode
 13730                                  ;		(BL) = Drive Number (0 = Default, 1= 'A')
 13731                                  ;		(CH) = Category Indicator
 13732                                  ;		(CL) = Function within category
 13733                                  ;		(DS:DX) = address for data, if any
 13734                                  ;		(SI) = Passed to device as argument, use depends upon function
 13735                                  ;		(DI) = Passed to device as argument, use depends upon function
 13736                                  ;
 13737                                  ;	EXIT	'C' set if error
 13738                                  ;		  (AX) = error code
 13739                                  ;		'C' clear if OK
 13740                                  ;		  (DS:DX) = Return address, use is function dependent
 13741                                  ;	USES	ALL
 13742                                  ;
 13743                                  ;---------------------------------------------------------------------------
 13744                                  	
 13745                                  	; MSDOS 6.0
 13746                                  IOCTLJMPTABLE:	;label	word
 13747                                  	; MSDOS 3.3 (& MSDOS 6.0)
 13748 00002F94 [CC2F]                  	dw	ioctl_getset_data	; 0
 13749 00002F96 [CC2F]                  	dw	ioctl_getset_data   	; 1
 13750 00002F98 [1B30]                  	dw	ioctl_control_string	; 2
 13751 00002F9A [1B30]                  	dw	ioctl_control_string	; 3
 13752 00002F9C [7331]                  	dw	ioctl_get_dev		; 4
 13753 00002F9E [7331]                  	dw	ioctl_get_dev		; 5
 13754 00002FA0 [3630]                  	dw	ioctl_status		; 6
 13755 00002FA2 [3630]                  	dw	ioctl_status		; 7
 13756 00002FA4 [CC30]                  	dw	ioctl_rem_media		; 8
 13757 00002FA6 [0B31]                  	dw	Ioctl_Drive_attr	; 9
 13758 00002FA8 [6231]                  	dw	IOCTL_Handle_Redir	; A
 13759 00002FAA [5530]                  	dw	Set_Retry_Parameters	; B
 13760 00002FAC [6430]                  	dw	GENERICIOCTLHANDLE	; C
 13761 00002FAE [7C30]                  	dw	GENERICIOCTL		; D
 13762                                  	; MSDOS 6.0 (& MSDOS 3.3)
 13763 00002FB0 [2632]                  	dw	ioctl_drive_owner	; E
 13764 00002FB2 [2632]                  	dw	ioctl_drive_owner	; F
 13765                                  	; MSDOS 6.0
 13766                                  	;dw	query_handle_support	; 10h
 13767                                  	;dw	query_device_support	; 11h
 13768                                  
 13769                                  _$IOCTL:
 13770 00002FB4 8CDE                    	MOV	SI,DS			; Stash DS for calls 2,3,4 and 5
 13771 00002FB6 16                      	push	ss
 13772 00002FB7 1F                      	pop	ds			;hkn; SS is DOSDATA
 13773                                  
 13774                                  	; MSDOS 3.3
 13775 00002FB8 3C0F                    	cmp	al,0Fh 
 13776                                  	; MSDOS 6.0
 13777                                  	;cmp	al,11h			; al must be between 0 & 11h
 13778 00002FBA 770D                    	ja	short ioctl_bad_funj2	; if not bad function #
 13779                                  
 13780                                  	; 09/09/2018
 13781                                  	;push	AX			; Need to save AL for generic IOCTL
 13782 00002FBC 89C7                    	mov	di,ax			; di NOT a PARM
 13783 00002FBE 81E7FF00                	and	di,0FFh			; di = al
 13784 00002FC2 D1E7                    	shl	di,1			; di = index into jmp table
 13785                                  	;pop	AX			; Restore AL for generic IOCTL
 13786                                  
 13787 00002FC4 2EFFA5[942F]            	jmp	word [CS:DI+IOCTLJMPTABLE]
 13788                                  
 13789                                  
 13790                                  ioctl_bad_funj2:
 13791 00002FC9 E9F800                  	JMP	ioctl_bad_fun  ; 10/08/2018
 13792                                  
 13793                                  ;--------------------------------------------------------------------------
 13794                                  ;
 13795                                  ; IOCTL: AL= 0,1
 13796                                  ;
 13797                                  ; ENTRY : DS = DOSDATA
 13798                                  ;
 13799                                  ;---------------------------------------------------------------------
 13800                                  
 13801                                  ioctl_getset_data:
 13802                                  	; MSDOS 6.0
 13803 00002FCC E82D38                  	call	SFFromHandle		; ES:DI -> SFT
 13804 00002FCF 7305                    	JNC	short ioctl_check_permissions ; have valid handle
 13805                                  ioctl_bad_handle:
 13806 00002FD1 B006                    	mov	al,error_invalid_handle
 13807                                  ioctl_error:
 13808 00002FD3 E933E7                  	jmp	SYS_RET_ERR
 13809                                  
 13810                                  ioctl_check_permissions:
 13811 00002FD6 3C00                    	CMP	AL,0
 13812 00002FD8 268A4505                	MOV	AL,[ES:DI+SF_ENTRY.sf_flags]; Get low byte of flags
 13813 00002FDC 741B                    	JZ	short ioctl_read	; read the byte
 13814                                  
 13815 00002FDE 08F6                    	or	dh, dh
 13816 00002FE0 7404                    	JZ	short ioctl_check_device ; can I set with this data?
 13817 00002FE2 B00D                    	mov	al,error_invalid_data	; no DH <> 0
 13818                                  	;jmp	SYS_RET_ERR
 13819 00002FE4 EBED                    	jmp	short ioctl_error
 13820                                  
 13821                                  ioctl_check_device:
 13822 00002FE6 A880                    	test	AL,devid_device 	; can I set this handle?
 13823 00002FE8 74DF                    	jz	short ioctl_bad_funj2
 13824 00002FEA 80CA80                  	OR	DL,devid_device 	; Make sure user doesn't turn off the
 13825                                  					;   device bit!! He can muck with the
 13826                                  					;   others at will.
 13827 00002FED C606[D102]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev
 13828 00002FF2 26885505                	MOV	BYTE [ES:DI+SF_ENTRY.sf_flags],DL  ;AC000;MS.; Set flags
 13829                                  
 13830                                  ioctl_ok:
 13831 00002FF6 E904E7                  	jmp	SYS_RET_OK
 13832                                  
 13833                                  ioctl_read:
 13834 00002FF9 C606[D102]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 13835 00002FFE 30E4                    	XOR	AH,AH
 13836 00003000 A880                    	test	AL,devid_device 	; Should I set high byte
 13837 00003002 740D                    	JZ	short ioctl_no_high	; no
 13838 00003004 C606[D102]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev
 13839 00003009 26C47D07                	LES	DI,[ES:DI+SF_ENTRY.sf_devptr] ; Get device pointer
 13840 0000300D 268A6505                	MOV	AH,[ES:DI+SYSDEV.ATT+1] ; Get high byte
 13841                                  ioctl_no_high:
 13842 00003011 89C2                    	MOV	DX,AX
 13843 00003013 E8F5E5                  	call	Get_User_Stack
 13844 00003016 895406                  	MOV	[SI+user_env.user_DX],DX
 13845                                  	;jmp	SYS_RET_OK
 13846 00003019 EBDB                    	jmp	short ioctl_ok
 13847                                  
 13848                                  ;--------------------------------------------------------------------------
 13849                                  ;
 13850                                  ; IOCTL: 2,3
 13851                                  ;
 13852                                  ; ENTRY : DS = DOSDATA
 13853                                  ;	  SI = user's DS
 13854                                  ;
 13855                                  ;--------------------------------------------------------------------------
 13856                                  
 13857                                  ioctl_control_string:
 13858                                  
 13859 0000301B E8DE37                  	call	SFFromHandle		; ES:DI -> SFT
 13860 0000301E 72B1                    	JC	short ioctl_bad_handle	; invalid handle
 13861 00003020 26F745058000            	TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device ; can I?
 13862 00003026 74A1                    	jz	short ioctl_bad_funj2			; No it is a file
 13863 00003028 C606[D102]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev
 13864 0000302D 26C47D07                	LES	DI,[ES:DI+SF_ENTRY.sf_devptr] ; Get device pointer
 13865 00003031 30DB                    	XOR	BL,BL			; Unit number of char dev = 0
 13866 00003033 E94201                  	JMP	ioctl_do_string
 13867                                  
 13868                                  ;--------------------------------------------------------------------------
 13869                                  ;
 13870                                  ; IOCTL: AL = 6,7
 13871                                  ;
 13872                                  ; ENTRY: DS = DOSDATA
 13873                                  ;
 13874                                  ;--------------------------------------------------------------------------
 13875                                  
 13876                                  ioctl_status:
 13877                                  
 13878 00003036 B401                    	MOV	AH,1
 13879 00003038 2C06                    	SUB	AL,6			; 6=0,7=1
 13880 0000303A 7402                    	JZ	short ioctl_get_status
 13881 0000303C B403                    	MOV	AH,3
 13882                                  ioctl_get_status:
 13883 0000303E 50                      	PUSH	AX
 13884 0000303F E87810                  	call	GET_IO_SFT
 13885 00003042 58                      	POP	AX
 13886 00003043 7302                    	JNC	short DO_IOFUNC
 13887 00003045 EB8A                    	JMP	short ioctl_bad_handle	; invalid SFT
 13888                                  
 13889                                  DO_IOFUNC:
 13890 00003047 E8031D                  	call	IOFUNC
 13891 0000304A 88C4                    	MOV	AH,AL
 13892 0000304C B0FF                    	MOV	AL,0FFH
 13893 0000304E 7502                    	JNZ	short ioctl_status_ret
 13894 00003050 FEC0                    	INC	AL
 13895                                  ioctl_status_ret:
 13896 00003052 E9A8E6                  	jmp	SYS_RET_OK
 13897                                  
 13898                                  ;------------------------------------------------------------------------
 13899                                  ;
 13900                                  ; IOCTL: AL = B
 13901                                  ;
 13902                                  ; ENTRY: DS = DOSDATA
 13903                                  ;
 13904                                  ;-------------------------------------------------------------------------
 13905                                  
 13906                                  Set_Retry_Parameters:
 13907                                  	; 09/09/2018
 13908 00003055 890E[1C00]              	MOV	[RetryLoop],CX		; 0 retry loop count allowed
 13909 00003059 09D2                    	OR	DX,DX			; zero retries not allowed
 13910 0000305B 7467                    	JZ	short ioctl_bad_fun
 13911 0000305D 8916[1A00]              	MOV	[RetryCount],DX		; Set new retry count
 13912                                  doneok:
 13913 00003061 E999E6                  	jmp	SYS_RET_OK		; Done
 13914                                  
 13915                                  ;--------------------------------------------------------------------------
 13916                                  ;
 13917                                  ; Generic IOCTL entry point. AL = C, D, 10h, 11h
 13918                                  ;
 13919                                  ;	here we invoke the Generic IOCTL using the IOCTL_Req structure.
 13920                                  ;	SI:DX -> Users Device Parameter Table
 13921                                  ;	IOCALL -> IOCTL_Req structure
 13922                                  ;
 13923                                  ; 	If on entry AL >= IOCTL_QUERY_HANDLE the function is a
 13924                                  ;	QueryIOCtlSupport call ELSE it's a standard generic IOCtl
 13925                                  ;	call.
 13926                                  ;
 13927                                  ; BUGBUG: Don't push anything on the stack between GENERIOCTL: and 
 13928                                  ;         the call to Check_If_Net because Check_If_Net gets our
 13929                                  ;         return address off the stack if the drive is invalid.
 13930                                  ;
 13931                                  ;----------------------------------------------------------------------------
 13932                                  
 13933                                  query_handle_support:	; Entry point for handles
 13934                                  GENERICIOCTLHANDLE:
 13935                                  
 13936 00003064 E89537                  	call	SFFromHandle		; Get SFT for device.
 13937 00003067 7260                    	jc	short ioctl_bad_handlej
 13938                                  
 13939 00003069 26F745050080            	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet	; M031;
 13940 0000306F 7553                    	jnz	short ioctl_bad_fun	; Cannot do this over net.
 13941                                  
 13942 00003071 C606[D102]04            	mov	byte [EXTERR_LOCUS],errLOC_SerDev
 13943 00003076 26C47D07                	les	di,[es:di+SF_ENTRY.sf_devptr]	; Get pointer to device.
 13944 0000307A EB0F                    	jmp	short Do_GenIOCTL
 13945                                  
 13946                                  query_device_support:	; Entry point for devices:
 13947                                  GENERICIOCTL:
 13948                                  
 13949 0000307C C606[D102]02            	mov	byte [EXTERR_LOCUS],errLOC_Disk
 13950 00003081 80FD08                  	cmp	ch,IOC_DC		; Only disk devices are allowed to use
 13951 00003084 753E                    	jne	short ioctl_bad_fun	; no handles with Generic IOCTL.
 13952                                  
 13953 00003086 E88001                  	CALL	Check_If_Net		; ES:DI := Get_hdr_block of device in BL
 13954 00003089 7539                    	JNZ	short ioctl_bad_fun	; There are no "net devices", and they
 13955                                  
 13956                                  Do_GenIOCTL:
 13957                                  	;TEST	word [ES:DI+SYSDEV.ATT],DEV320 ; Can device handle Generic IOCTL funcs
 13958                                  	; 09/09/2018
 13959 0000308B 26F6450440              	TEST	byte [ES:DI+SYSDEV.ATT],DEV320 ; 0040h
 13960 00003090 7432                    	jz	short ioctl_bad_fun
 13961                                  
 13962                                  	; MSDOS 6.0
 13963                                  	;mov	byte [IOCALL_REQFUNC],GENIOCTL ;Assume real Request
 13964                                  	;cmp	AL,IOCTL_QUERY_HANDLE	; See if this is just a query
 13965                                  	;jl	short SetIOCtlBlock
 13966                                  	;
 13967                                  	;TEST	word [ES:DI+SYSDEV.ATT],IOQUERY ; See if device supports a query
 13968                                  	;jz	short ioctl_bad_fun	; No support for query 
 13969                                  	;
 13970                                  	;mov	byte [IOCALL_REQFUNC],IOCTL_QUERY ; Just a query (5.00)
 13971                                  
 13972                                  ;SetIOCtlBlock:
 13973 00003092 06                      	PUSH	ES			; DEVIOCALL2 expects Device header block
 13974 00003093 57                      	PUSH	DI			; in DS:SI
 13975                                  					; Setup Generic IOCTL Request Block
 13976 00003094 C606[2403]17            	mov	byte [IOCALL_REQLEN],IOCTL_REQ.size
 13977                                  	; 07/09/2018 (MSDOS 3.3)
 13978                                  	;mov	byte [IOCALL_REQFUNC],19
 13979 00003099 C606[2603]13            	mov	byte [IOCALL_REQFUNC],GENIOCTL ; 07/09/2018
 13980                                  	;
 13981 0000309E 881E[2503]              	MOV	byte [IOCALL_REQUNIT],BL
 13982 000030A2 882E[3103]              	MOV	byte [IOCALL+IOCTL_REQ.MAJORFUNCTION],CH
 13983 000030A6 880E[3203]              	MOV	byte [IOCALL+IOCTL_REQ.MINORFUNCTION],CL
 13984 000030AA 8936[3303]              	MOV	word [IOCALL+IOCTL_REQ.REG_SI],SI
 13985 000030AE 893E[3503]              	MOV	word [IOCALL+IOCTL_REQ.REG_DI],DI
 13986 000030B2 8916[3703]              	MOV	word [IOCALL+IOCTL_REQ.GENERICIOCTL_PACKET],DX
 13987 000030B6 8936[3903]              	MOV	word [IOCALL+IOCTL_REQ.GENERICIOCTL_PACKET+2],SI
 13988                                  
 13989                                  ;hkn; IOCALL is in DOSDATA
 13990 000030BA BB[2403]                	MOV	BX,IOCALL
 13991                                  
 13992 000030BD 16                      	PUSH	SS
 13993 000030BE 07                      	POP	ES
 13994                                  					; DS:SI -> Device header.
 13995 000030BF 5E                      	POP	SI
 13996 000030C0 1F                      	POP	DS
 13997                                  	; 10/08/2018
 13998 000030C1 E9EE00                  	jmp	ioctl_do_IO		; Perform Call to device driver
 13999                                  
 14000                                  ioctl_bad_fun:
 14001 000030C4 B001                    	mov	al, error_invalid_function
 14002 000030C6 E940E6                  	jmp	SYS_RET_ERR	
 14003                                  
 14004                                  ioctl_bad_handlej:
 14005 000030C9 E905FF                  	jmp	ioctl_bad_handle
 14006                                  
 14007                                  ;---------------------------------------------------------------------------
 14008                                  ;
 14009                                  ; IOCTL AL = 8
 14010                                  ;
 14011                                  ; ENTRY:  DS = DOSDATA
 14012                                  ;
 14013                                  ; BUGBUG: Don't push anything on the stack between ioctl_rem_media: and 
 14014                                  ;         the call to Check_If_Net because Check_If_Net gets our
 14015                                  ;         return address off the stack if the drive is invalid.
 14016                                  ;
 14017                                  ;-------------------------------------------------------------------------
 14018                                  
 14019                                  ioctl_rem_media:
 14020                                  	; MSDOS 3.3 (& MSDOS 6.0)
 14021 000030CC E83A01                  	CALL	Check_If_Net
 14022 000030CF 75F3                    	JNZ	short ioctl_bad_fun	; There are no "net devices", and they
 14023                                  					;   certainly don't know how to do this
 14024                                  					;   call.
 14025 000030D1 26F745040008            	TEST	word [ES:DI+SYSDEV.ATT],DEVOPCL ; See if device can
 14026 000030D7 74EB                    	JZ	short ioctl_bad_fun		; NO
 14027                                  
 14028                                  ;hkn; SS override for IOCALL
 14029 000030D9 36C606[2603]0F          	MOV	byte [SS:IOCALL_REQFUNC],DEVRMD
 14030 000030DF B00D                    	MOV	AL,REMHL
 14031 000030E1 88DC                    	MOV	AH,BL			; Unit number
 14032 000030E3 36A3[2403]              	MOV	[SS:IOCALL_REQLEN],AX
 14033 000030E7 31C0                    	XOR	AX,AX
 14034 000030E9 36A3[2703]              	MOV	[SS:IOCALL_REQSTAT],AX
 14035 000030ED 06                      	PUSH	ES
 14036 000030EE 1F                      	POP	DS
 14037 000030EF 89FE                    	MOV	SI,DI			; DS:SI -> driver
 14038 000030F1 16                      	PUSH	SS
 14039 000030F2 07                      	POP	ES
 14040                                  
 14041                                  ;hkn; IOCALL is in DOSDATA (msconst.asm)
 14042 000030F3 BB[2403]                	MOV	BX,IOCALL		; ES:BX -> Call header
 14043 000030F6 1E                      	push	ds
 14044 000030F7 56                      	push	si
 14045 000030F8 E8FF1D                  	call	DEVIOCALL2
 14046 000030FB 5E                      	pop	si
 14047 000030FC 1F                      	pop	ds
 14048                                  
 14049                                  ;hkn; SS override
 14050 000030FD 36A1[2703]              	MOV	AX,[SS:IOCALL_REQSTAT]	; Get Status word
 14051 00003101 250002                  	AND	AX,STBUI		; Mask to busy bit
 14052 00003104 B109                    	MOV	CL,9
 14053 00003106 D3E8                    	SHR	AX,CL			; Busy bit to bit 0
 14054 00003108 E9F2E5                  	jmp	SYS_RET_OK
 14055                                  
 14056                                  ;-------------------------------------------------------------------------
 14057                                  ;
 14058                                  ; IOCTL: AL = 9
 14059                                  ;
 14060                                  ; ENTRY: DS = DOSDATA
 14061                                  ;
 14062                                  ;-------------------------------------------------------------------------
 14063                                  
 14064                                  Ioctl_Drive_attr:
 14065                                  	; MSDOS 3.3 (& MSDOS 6.0)
 14066 0000310B 88D8                    	mov	al, bl
 14067 0000310D E86138                  	call	GETTHISDRV
 14068 00003110 724B                    	jc	short ioctl_drv_err
 14069 00003112 E8C500                  	call	Get_Driver_BL
 14070                                  	; MSDOS 6.0
 14071 00003115 7246                    	JC	short ioctl_drv_err	; drive not valid
 14072                                  
 14073 00003117 268B5504                	mov	dx,[es:di+SYSDEV.ATT]	
 14074                                  					; get device attribute word
 14075 0000311B 88C3                    	MOV	BL,AL			; Phys letter to BL (A=0)
 14076                                  
 14077                                  ;hkn; SS override
 14078 0000311D 36C43E[3A05]            	LES	DI,[SS:THISCDS]
 14079 00003122 26F745430080            	TEST	word [ES:DI+curdir.flags],curdir_isnet
 14080 00003128 7403                    	JZ	short IOCTLShare
 14081                                  
 14082                                  	;or	dx,1000h ; msdos 3.3
 14083                                  
 14084                                  ;	Net devices don't return a device attribute word.
 14085                                  ;	Bit 12 = 1, meaning net device, all others = 0.
 14086                                  
 14087 0000312A BA0010                  	MOV	DX,1000h ;  MSDOS 6.0
 14088                                  IOCTLShare:
 14089 0000312D 16                      	push	ss
 14090 0000312E 1F                      	pop	ds
 14091 0000312F BE[6003]                	MOV	SI,OPENBUF
 14092 00003132 80C341                  	ADD	BL,"A"
 14093 00003135 881C                    	MOV	[SI],BL
 14094 00003137 C744013A00              	MOV	WORD [SI+1],003AH ; ":",0
 14095 0000313C B80003                  	MOV	AX,0300h
 14096 0000313F F8                      	CLC
 14097                                  	;INT	int_IBM
 14098 00003140 CD2A                    	int     2Ah	; Microsoft Networks - CHECK DIRECT I/O
 14099                                  			; DS:SI -> ASCIZ disk device name (may be full path or only drive
 14100                                  			; specifier--must include the colon)
 14101                                  			; Return: CF clear if absolute disk access allowed
 14102 00003142 7304                    	JNC	short IOCTLLocal	; Not shared
 14103 00003144 81CA0002                	OR	DX,0200H		; Shared, bit 9
 14104                                  IOCTLLocal:
 14105 00003148 26F745430010            	TEST	word [ES:DI+curdir.flags],curdir_local
 14106 0000314E 7404                    	JZ	short ioctl_set_DX
 14107 00003150 81CA0080                	OR	DX,8000h
 14108                                  ioctl_set_DX:
 14109 00003154 E8B4E4                  	call	Get_User_Stack
 14110 00003157 895406                  	MOV	[SI+user_env.user_DX],DX
 14111 0000315A E9A0E5                  	jmp	SYS_RET_OK
 14112                                  
 14113                                  ioctl_drv_err:
 14114 0000315D B00F                    	mov	al, error_invalid_drive
 14115 0000315F E9A7E5                  	jmp	SYS_RET_ERR
 14116                                  
 14117                                  ;--------------------------------------------------------------------------
 14118                                  ; IOCTL: AL = A
 14119                                  ;
 14120                                  ; ENTRY: DS = DOSDATA
 14121                                  ;
 14122                                  ;--------------------------------------------------------------------------
 14123                                  
 14124                                  IOCTL_Handle_Redir:
 14125 00003162 E89736                  	call	SFFromHandle		; ES:DI -> SFT
 14126 00003165 7303                    	JNC	short ioctl_got_sft	; have valid handle
 14127 00003167 E967FE                  	jmp	ioctl_bad_handle ; 10/08/2018
 14128                                  
 14129                                  ioctl_got_sft:
 14130 0000316A 268B5505                	MOV	DX,[ES:DI+SF_ENTRY.sf_flags] ; Get flags
 14131 0000316E EBE4                    	JMP	short ioctl_set_DX	; pass dx to user and return
 14132                                  
 14133                                  ioctl_bad_funj:
 14134 00003170 E951FF                  	JMP	ioctl_bad_fun
 14135                                  
 14136                                  ;--------------------------------------------------------------------------
 14137                                  ;
 14138                                  ; IOCTL: AL= 4,5
 14139                                  ;
 14140                                  ; ENTRY: DS = DOSDATA
 14141                                  ;	 SI = user's DS
 14142                                  ;
 14143                                  ;
 14144                                  ; BUGBUG: Don't push anything on the stack between ioctl_get_dev: and 
 14145                                  ;         the call to Check_If_Net because Check_If_Net gets our
 14146                                  ;         return address off the stack if the drive is invalid.
 14147                                  ;
 14148                                  ;-------------------------------------------------------------------------
 14149                                  
 14150                                  ioctl_get_dev:
 14151 00003173 E89300                  	CALL	Check_If_Net
 14152 00003176 75F8                    	JNZ	short ioctl_bad_funj	; There are no "net devices", and they
 14153                                  					;   certainly don't know how to do this
 14154                                  					;   call.
 14155                                  ioctl_do_string:
 14156 00003178 26F745040040            	TEST	word [ES:DI+SYSDEV.ATT],DEVIOCTL; See if device accepts control
 14157 0000317E 74F0                    	JZ	short ioctl_bad_funj		; NO
 14158                                  					; assume IOCTL read
 14159 00003180 C606[2603]03            	MOV	byte [IOCALL_REQFUNC],DEVRDIOCTL
 14160                                  
 14161 00003185 A801                    	TEST	AL,1			; is it func. 4/5 or 2/3
 14162 00003187 7405                    	JZ	short ioctl_control_call ; it is read. goto ioctl_control_call
 14163                                  
 14164                                  					; it is an IOCTL write
 14165 00003189 C606[2603]0C            	MOV	byte [IOCALL_REQFUNC],DEVWRIOCTL
 14166                                  
 14167                                  ioctl_control_call:
 14168 0000318E B016                    	MOV	AL,DRDWRHL
 14169                                  ioctl_setup_pkt:
 14170 00003190 88DC                    	MOV	AH,BL			; Unit number
 14171 00003192 A3[2403]                	MOV	[IOCALL_REQLEN],AX
 14172 00003195 31C0                    	XOR	AX,AX
 14173 00003197 A3[2703]                	MOV	[IOCALL_REQSTAT],AX
 14174 0000319A A2[3103]                	MOV	[IOMED],AL
 14175 0000319D 890E[3603]              	MOV	[IOSCNT],CX
 14176 000031A1 8916[3203]              	MOV	[IOXAD],DX
 14177 000031A5 8936[3403]              	MOV	[IOXAD+2],SI
 14178 000031A9 06                      	PUSH	ES
 14179 000031AA 1F                      	POP	DS
 14180 000031AB 89FE                    	MOV	SI,DI			; DS:SI -> driver
 14181 000031AD 16                      	PUSH	SS
 14182 000031AE 07                      	POP	ES
 14183                                  
 14184 000031AF BB[2403]                	MOV	BX,IOCALL		; ES:BX -> Call header
 14185                                  ioctl_do_IO:
 14186 000031B2 E8451D                  	call	DEVIOCALL2
 14187                                  
 14188                                  ;hkn; SS override for IOCALL
 14189 000031B5 36F706[2703]0080        	TEST	word [SS:IOCALL_REQSTAT],STERR ;Error?
 14190 000031BC 7507                    	JNZ	short ioctl_string_err
 14191                                  
 14192                                  ;hkn; SS override
 14193 000031BE 36A1[3603]              	MOV	AX,[SS:IOSCNT]		; Get actual bytes transferred
 14194 000031C2 E938E5                  	jmp	SYS_RET_OK
 14195                                  
 14196                                  ioctl_string_err:
 14197 000031C5 368B3E[2703]            	MOV	DI,[SS:IOCALL_REQSTAT]	;Get Error
 14198                                  device_err:
 14199 000031CA 81E7FF00                	AND	DI,STECODE		; mask out irrelevant bits
 14200 000031CE 89F8                    	MOV	AX,DI
 14201 000031D0 E84128                  	call	SET_I24_EXTENDED_ERROR
 14202                                  
 14203                                  ;hkn; use SS override
 14204                                  ;hkn;	mov	ax,[CS:EXTERR]
 14205 000031D3 36A1[D202]              	mov	ax,[SS:EXTERR]
 14206 000031D7 E92FE5                  	jmp	SYS_RET_ERR
 14207                                  
 14208                                  ;--------------------------------------------------------------------------
 14209                                  ; Proc name : Get_Driver_BL
 14210                                  ;
 14211                                  ;	DS is DOSDATA
 14212                                  ;	BL is drive number (0=default)
 14213                                  ;	Returns pointer to device in ES:DI, unit number in BL if carry clear
 14214                                  ;	No regs modified
 14215                                  ;
 14216                                  ;---------------------------------------------------------------------------
 14217                                  
 14218                                  Get_Driver_BL:
 14219 000031DA 50                      	PUSH	AX
 14220 000031DB 88D8                    	MOV	AL,BL			; Drive
 14221 000031DD E89137                  	call	GETTHISDRV
 14222 000031E0 7225                    	jc	short ioctl_bad_drv
 14223 000031E2 30DB                    	XOR	BL,BL			; Unit zero on Net device
 14224 000031E4 C606[D102]03            	MOV	byte [EXTERR_LOCUS],errLOC_Net
 14225 000031E9 C43E[3A05]              	LES	DI,[THISCDS]
 14226 000031ED 26F745430080            	TEST	word [ES:DI+curdir.flags],curdir_isnet
 14227 000031F3 26C47D45                	LES	DI,[ES:DI+curdir.devptr]; ES:DI -> Dpb or net dev
 14228 000031F7 750D                    	JNZ	short got_dev_ptr	; Is net
 14229 000031F9 C606[D102]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 14230 000031FE 268A5D01                	MOV	BL,[ES:DI+DPB.UNIT]	; Unit number
 14231 00003202 26C47D12                	LES	DI,[ES:DI+DPB.DRIVER_ADDR] ; Driver addr
 14232                                  got_dev_ptr:
 14233 00003206 F8                      	CLC
 14234                                  ioctl_bad_drv:
 14235 00003207 58                      	POP	AX
 14236 00003208 C3                      	retn
 14237                                  
 14238                                  ;-------------------------------------------------------------------------
 14239                                  ; Proc Name : Check_If_Net:
 14240                                  ;
 14241                                  ;
 14242                                  ; Checks if the device is over the net or not. Returns result in ZERO flag.
 14243                                  ; If no device is found, the return address is popped off the stack, and a
 14244                                  ; jump is made to ioctl_drv_err.
 14245                                  ;
 14246                                  ; On Entry:
 14247                                  ; Registers same as those for Get_Driver_BL
 14248                                  ;
 14249                                  ; On Exit:
 14250                                  ; ZERO flag	- set if not a net device
 14251                                  ;		- reset if net device
 14252                                  ; ES:DI -> the device
 14253                                  ;
 14254                                  ;
 14255                                  ; BUGBUG: This function assumes the following stack setup on entry
 14256                                  ;
 14257                                  ;	  SP+2 -> Error return address
 14258                                  ;	  SP   -> Normal return address
 14259                                  ;
 14260                                  ;-------------------------------------------------------------------------
 14261                                  
 14262                                  Check_If_Net:
 14263                                  	; MSDOS 3.3 (& MSDOS 6.0)
 14264 00003209 E8CEFF                  	CALL	Get_Driver_BL
 14265 0000320C 720F                    	JC	short ioctl_drv_err_pop	; invalid drive letter
 14266 0000320E 06                      	PUSH	ES
 14267 0000320F 57                      	PUSH	DI
 14268 00003210 C43E[3A05]              	LES	DI,[THISCDS]
 14269 00003214 26F745430080            	TEST	word [ES:DI+curdir.flags],curdir_isnet
 14270 0000321A 5F                      	POP	DI
 14271 0000321B 07                      	POP	ES
 14272 0000321C C3                      	retn
 14273                                  
 14274                                  ioctl_drv_err_pop:
 14275 0000321D 58                      	pop	ax			; pop off return address
 14276 0000321E E93CFF                  	jmp	ioctl_drv_err
 14277                                  
 14278                                  ioctl_bad_funj3:
 14279 00003221 E9A0FE                  	jmp	ioctl_bad_fun
 14280                                  
 14281                                  ioctl_string_errj:
 14282 00003224 EB9F                    	jmp	ioctl_string_err
 14283                                  
 14284                                  ;--------------------------------------------------------------------------
 14285                                  ;
 14286                                  ; IOCTL: AL = E, F
 14287                                  ;
 14288                                  ; ENTRY: DS = DOSDATA
 14289                                  ;
 14290                                  ;
 14291                                  ; BUGBUG: Don't push anything on the stack between ioctl_drive_owner: and 
 14292                                  ;         the call to Check_If_Net because Check_If_Net gets our
 14293                                  ;         return address off the stack if the drive is invalid.
 14294                                  ;
 14295                                  ;--------------------------------------------------------------------------
 14296                                  
 14297                                  ioctl_drive_owner:
 14298                                  	; MSDOS 3.3 (& MSDOS 6.0)
 14299 00003226 E8E0FF                  	Call	Check_If_Net
 14300 00003229 75F6                    	JNZ	short ioctl_bad_funj3 	; There are no "net devices", and they
 14301                                  					;   certainly don't know how to do this
 14302                                  					;   call.
 14303                                  	;TEST	word [ES:DI+SYSDEV.ATT],DEV320	; See if device can handle this
 14304                                  	; 09/09/2018
 14305 0000322B 26F6450440              	TEST	byte [ES:DI+SYSDEV.ATT],DEV320 ; 0040h
 14306 00003230 74EF                    	JZ	short ioctl_bad_funj3 	; NO
 14307 00003232 C606[2603]17            	mov	byte [IOCALL_REQFUNC],DEVGETOWN	; default to get owner
 14308 00003237 3C0E                    	cmp	al,0Eh			; Get Owner ?
 14309 00003239 7405                    	jz	short GetOwner
 14310                                  SetOwner:
 14311 0000323B C606[2603]18            	MOV	byte [IOCALL_REQFUNC],DEVSETOWN
 14312                                  GetOwner:
 14313 00003240 B00D                    	MOV	AL,OWNHL
 14314 00003242 88DC                    	MOV	AH,BL			; Unit number
 14315 00003244 A3[2403]                	MOV	[IOCALL_REQLEN],AX
 14316 00003247 31C0                    	XOR	AX,AX
 14317 00003249 A3[2703]                	MOV	[IOCALL_REQSTAT],AX
 14318 0000324C 06                      	PUSH	ES
 14319 0000324D 1F                      	POP	DS
 14320 0000324E 89FE                    	MOV	SI,DI			; DS:SI -> driver
 14321 00003250 16                      	PUSH	SS
 14322 00003251 07                      	POP	ES
 14323 00003252 BB[2403]                	MOV	BX,IOCALL		; ES:BX -> Call header
 14324 00003255 1E                      	push	ds
 14325 00003256 56                      	push	si
 14326 00003257 E8A01C                  	call	DEVIOCALL2
 14327 0000325A 5E                      	pop	si
 14328 0000325B 1F                      	pop	ds
 14329                                  ;hkn; SS override
 14330 0000325C 36F706[2703]0080        	TEST	word [SS:IOCALL_REQSTAT],STERR
 14331 00003263 75BF                    	jnz	short ioctl_string_errj
 14332 00003265 36A0[2503]              	MOV	AL,[SS:IOCALL_REQUNIT]	; Get owner returned by device
 14333                                  					; owner returned is 1-based.
 14334 00003269 E991E4                  	jmp	SYS_RET_OK
 14335                                  
 14336                                  
 14337                                  ;============================================================================
 14338                                  ; DELETE.ASM, MSDOS 6.0, 1991
 14339                                  ;============================================================================
 14340                                  ; 07/08/2018 - Retro DOS v3.0
 14341                                  
 14342                                  ;	TITLE	DOS_DELETE - Internal DELETE call for MS-DOS
 14343                                  ;	NAME	DOS_DELETE
 14344                                  
 14345                                  ;
 14346                                  ;	Microsoft Confidential
 14347                                  ;	Copyright (C) Microsoft Corporation 1991
 14348                                  ;	All Rights Reserved.
 14349                                  ;
 14350                                  
 14351                                  ;**	DELETE.ASM - Low level routine for deleting files
 14352                                  ;
 14353                                  ;		DOS_DELETE
 14354                                  ;		REN_DEL_Check
 14355                                  ;		FastOpen_Delete	       ; DOS 3.3
 14356                                  ;		FastOpen_Update	       ; DOS 3.3
 14357                                  
 14358                                  
 14359                                  ;   Revision history:
 14360                                  ;
 14361                                  ;   A000  version 4.00	Jan. 1988
 14362                                  ;   A001  Fastopen Rename fix	April 1989
 14363                                  
 14364                                  
 14365                                  ;Installed = TRUE
 14366                                  
 14367                                  ;	i_need	NoSetDir,BYTE
 14368                                  ;	i_need	Creating,BYTE
 14369                                  ;	i_need	DELALL,BYTE
 14370                                  ;	i_need	THISDPB,DWORD
 14371                                  ;	i_need	THISSFT,DWORD
 14372                                  ;	i_need	THISCDS,DWORD
 14373                                  ;	i_need	CURBUF,DWORD
 14374                                  ;	i_need	ATTRIB,BYTE
 14375                                  ;	i_need	SATTRIB,BYTE
 14376                                  ;	i_need	WFP_START,WORD
 14377                                  ;	i_need	REN_WFP,WORD			 ;BN001
 14378                                  ;	i_need	NAME1,BYTE			 ;BN001
 14379                                  ;	i_need	FoundDel,BYTE
 14380                                  ;	i_need	AUXSTACK,BYTE
 14381                                  ;	i_need	VOLCHNG_FLAG,BYTE
 14382                                  ;	i_need	JShare,DWORD
 14383                                  ;	i_need	FastOpenTable,BYTE		  ; DOS 3.3
 14384                                  ;	i_need	FastTable,BYTE			  ; DOS 4.00
 14385                                  ;
 14386                                  ;	i_need	Del_ExtCluster,WORD		  ; DOS 4.00
 14387                                  ;
 14388                                  ;	i_need	SAVE_BX,WORD			  ; DOS 4.00
 14389                                  ;	i_need	DMAADD,DWORD
 14390                                  ;	i_need	RENAMEDMA,BYTE
 14391                                  
 14392                                  ;---------------------------------------------------------------------------
 14393                                  ;
 14394                                  ; Procedure Name : DOS_DELETE
 14395                                  ;
 14396                                  ; Inputs:
 14397                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 14398                                  ;		terminated)
 14399                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 14400                                  ;		( = -1 if current dir not involved, else
 14401                                  ;		 Points to first char after last "/" of current dir part)
 14402                                  ;	[THISCDS] Points to CDS being used
 14403                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 14404                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 14405                                  ; Function:
 14406                                  ;	Delete the specified file(s)
 14407                                  ; Outputs:
 14408                                  ;	CARRY CLEAR
 14409                                  ;		OK
 14410                                  ;	CARRY SET
 14411                                  ;	    AX is error code
 14412                                  ;		error_file_not_found
 14413                                  ;			Last element of path not found
 14414                                  ;		error_path_not_found
 14415                                  ;			Bad path (not in curr dir part if present)
 14416                                  ;		error_bad_curr_dir
 14417                                  ;			Bad path in current directory part of path
 14418                                  ;		error_access_denied
 14419                                  ;			Attempt to delete device or directory
 14420                                  ;		***error_sharing_violation***
 14421                                  ;			Deny both access required, generates an INT 24.
 14422                                  ;			This error is NOT returned. The INT 24H is generated,
 14423                                  ;			  and the file is ignored (not deleted). Delete will
 14424                                  ;			  simply continue on looking for more files.
 14425                                  ;			  Carry will NOT be set in this case.
 14426                                  ; DS preserved, others destroyed
 14427                                  ;
 14428                                  ;---------------------------------------------------------------------------
 14429                                  
 14430                                  FILEFOUND   equ 01h
 14431                                  FILEDELETED equ 10h
 14432                                  
 14433                                  DOS_DELETE:
 14434                                  
 14435                                  ;hkn; DOS_Delete is called from file.asm and fcbio.asm. DS has been set up 
 14436                                  ;hkn; appropriately at this point.
 14437                                  
 14438 0000326C E85FED                  	call	TestNet
 14439 0000326F 7306                    	JNC	short LOCAL_DELETE
 14440                                  
 14441                                  ;IF NOT Installed
 14442                                  ;	transfer NET_DELETE
 14443                                  ;ELSE
 14444                                  	;MOV	AX,(MultNET SHL 8) | 19
 14445                                  	;INT	2FH
 14446                                  	;return
 14447                                  
 14448 00003271 B81311                  	mov	ax,1113h
 14449 00003274 CD2F                    	int     2Fh 	; Multiplex - NETWORK REDIRECTOR - DELETE REMOTE FILE
 14450                                  			; SS = DS = DOS CS, SDA first filename pointer -> 
 14451                                  			;		fully-qualified filename in DOS CS
 14452                                  			; SDA CDS pointer -> current directory structure for drive with file
 14453                                  			; Return: CF set on error
 14454 00003276 C3                      	retn
 14455                                  
 14456                                  ;ENDIF
 14457                                  
 14458                                  LOCAL_DELETE:
 14459 00003277 C606[0A05]00            	MOV	byte [FOUNDDEL],0	; No files found and no files deleted
 14460 0000327C E8EDED                  	call	EcritDisk
 14461 0000327F C706[1805]00E5          	MOV	WORD [CREATING],DIRFREE*256+0 ; Assume not del *.*
 14462 00003285 8B36[4A05]              	MOV	SI,[WFP_START]
 14463                                  SKPNUL:
 14464 00003289 AC                      	LODSB
 14465 0000328A 08C0                    	OR	AL,AL
 14466 0000328C 75FB                    	JNZ	short SKPNUL		; go to end
 14467 0000328E 83EE04                  	SUB	SI,4			; Back over possible "*.*"
 14468 00003291 813C2A2E                	CMP	WORD [SI],2E2Ah ; "*."
 14469 00003295 7506                    	JNZ	short TEST_QUEST
 14470 00003297 807C022A                	CMP	BYTE [SI+2],"*"
 14471 0000329B 741F                    	JZ	short CHECK_ATTS
 14472                                  TEST_QUEST:
 14473 0000329D 83EE09                  	SUB	SI,9		; Back over possible "????????.???"
 14474 000032A0 87FE                    	XCHG	DI,SI
 14475                                  
 14476 000032A2 16                      	push	ss
 14477                                  	;pop	ds ; ! Retro DOS v3.0 BUG !
 14478 000032A3 07                      	pop	es ; 17/05/2019 (BugFix)
 14479                                  
 14480 000032A4 B83F3F                  	MOV	AX,"??"
 14481 000032A7 B90400                  	MOV	CX,4		; four sets of "??"
 14482 000032AA F3AF                    	REPE	SCASW
 14483 000032AC 751C                    	JNZ	short NOT_ALL
 14484 000032AE 87FE                    	XCHG	DI,SI
 14485 000032B0 AD                      	LODSW
 14486 000032B1 3D2E3F                  	CMP	AX,3F2Eh ; ".?"
 14487 000032B4 7514                    	JNZ	short NOT_ALL
 14488 000032B6 AD                      	LODSW
 14489 000032B7 3D3F3F                  	CMP	AX,"??"
 14490 000032BA 750E                    	JNZ	short NOT_ALL
 14491                                  CHECK_ATTS:
 14492 000032BC A0[0805]                	MOV	AL,[SATTRIB]
 14493 000032BF 241F                    	AND	AL,attr_hidden+attr_system+attr_directory+attr_volume_id+attr_read_only
 14494                                  					; Look only at hidden bits
 14495 000032C1 3C1F                    	CMP	AL,attr_hidden+attr_system+attr_directory+attr_volume_id+attr_read_only
 14496                                  					; All must be set
 14497 000032C3 7505                    	JNZ	short NOT_ALL
 14498                                  
 14499                                  ; NOTE WARNING DANGER-----
 14500                                  ;    This DELALL stuff is not safe. It allows directories to be deleted.
 14501                                  ;	It should ONLY be used by FORMAT in the ROOT directory.
 14502                                  
 14503 000032C5 C606[1905]00            	MOV	byte [DELALL],0		; DEL *.* - flag deleting all
 14504                                  NOT_ALL:
 14505 000032CA C606[F802]01            	MOV	byte [NoSetDir],1
 14506 000032CF E86915                  	call	GetPathNoSet
 14507 000032D2 7313                    	JNC	short Del_found
 14508 000032D4 750C                    	JNZ	short _bad_path
 14509 000032D6 08C9                    	OR	CL,CL
 14510 000032D8 7408                    	JZ	short _bad_path
 14511                                  No_file:
 14512 000032DA B80200                  	MOV	AX,error_file_not_found
 14513                                  ErrorReturn:
 14514 000032DD F9                      	STC
 14515 000032DE E893ED                  	call	LcritDisk
 14516 000032E1 C3                      	retn
 14517                                  
 14518                                  _bad_path:
 14519 000032E2 B80300                  	MOV	AX,error_path_not_found
 14520 000032E5 EBF6                    	JMP	short ErrorReturn
 14521                                  
 14522                                  Del_found:
 14523 000032E7 750C                    	JNZ	short NOT_DIR		; Check for dir specified
 14524 000032E9 803E[1905]00            	CMP	byte [DELALL],0		; DelAll = 0 allows delete of dir.
 14525 000032EE 7405                    	JZ	short NOT_DIR
 14526                                  Del_access_err:
 14527 000032F0 B80500                  	MOV	AX,error_access_denied
 14528 000032F3 EBE8                    	JMP	short ErrorReturn
 14529                                  
 14530                                  NOT_DIR:
 14531 000032F5 08E4                    	OR	AH,AH			; Check if device name
 14532 000032F7 78F7                    	JS	short Del_access_err	; Can't delete I/O devices
 14533                                  
 14534                                  ; Main delete loop. CURBUF+2:BX points to a matching directory entry.
 14535                                  
 14536                                  DELFILE:
 14537 000032F9 800E[0A05]01            	OR	byte [FOUNDDEL],FILEFOUND ; file found, not deleted yet
 14538                                  
 14539                                  ; If we are deleting the Volume ID, then we set VOLUME_CHNG flag to make
 14540                                  ; DOS issue a build BPB call the next time this drive is accessed.
 14541                                  
 14542 000032FE 1E                      	PUSH	DS
 14543 000032FF 8A26[1905]              	MOV	AH,[DELALL]
 14544 00003303 C53E[7405]              	LDS	DI,[CURBUF]
 14545                                  	
 14546                                  ;hkn; SS override
 14547 00003307 36F606[0605]01          	TEST	byte [SS:ATTRIB],attr_read_only ; are we deleting RO files too?
 14548 0000330D 7509                    	JNZ	short DoDelete		; yes
 14549                                  
 14550 0000330F F6470B01                	TEST	byte [BX+dir_entry.dir_attr],attr_read_only
 14551 00003313 7403                    	JZ	short DoDelete		; not read only
 14552                                  
 14553 00003315 1F                      	POP	DS
 14554 00003316 EB29                    	JMP	SHORT DELNXT		; Skip it (Note ES:BP not set)
 14555                                  
 14556                                  DoDelete:
 14557 00003318 E87700                  	call	REN_DEL_Check		; Sets ES:BP = [THISDPB]
 14558 0000331B 7303                    	JNC	short DEL_SHARE_OK
 14559 0000331D 1F                      	POP	DS
 14560 0000331E EB21                    	JMP	SHORT DELNXT		; Skip it
 14561                                  
 14562                                  DEL_SHARE_OK:
 14563                                  	; MSDOS 6.0
 14564                                  	;TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty 
 14565                                  	;				;LB. if already dirty		  ;AN000;
 14566                                  	;JNZ	short yesdirty		;LB.  don't increment dirty count ;AN000;
 14567                                  	;call	INC_DIRTY_COUNT		;LB.				  ;AN000;
 14568 00003320 804D0540                	OR	byte [DI+BUFFINFO.buf_flags],buf_dirty
 14569                                  ;yesdirty:
 14570                                  	;MOV	[BX+dir_entry.dir_name],AH ; Put in E5H or 0
 14571 00003324 8827                    	mov	[bx],ah ; 05/07/2019	
 14572 00003326 8B1C                    	MOV	BX,[SI] 		; Get firclus pointer
 14573 00003328 1F                      	POP	DS
 14574 00003329 800E[0A05]10            	OR	byte [FOUNDDEL],FILEDELETED ; Deleted file
 14575                                  
 14576 0000332E 83FB02                  	CMP	BX,2
 14577 00003331 720E                    	JB	short DELNXT		; File has invalid FIRCLUS (too small)
 14578 00003333 263B5E0D                	CMP	BX,[ES:BP+DPB.MAX_CLUSTER]
 14579 00003337 7708                    	JA	short DELNXT		; File has invalid FIRCLUS (too big)
 14580                                  
 14581 00003339 E8AD21                  	call	RELEASE 		; Free file data
 14582 0000333C 724E                    	JC	short No_fileJ
 14583                                  
 14584                                  ; DOS 3.3  FastOpen
 14585                                  
 14586 0000333E E8BA00                  	CALL	FastOpen_Delete 	; delete the dir info in fastopen
 14587                                  
 14588                                  ; DOS 3.3  FastOpen
 14589                                  
 14590                                  DELNXT:
 14591 00003341 C42E[2405]              	LES	BP,[THISDPB]		; Possible to get here without this set
 14592 00003345 E86714                  	call	GETENTRY		; Registers need to be reset
 14593 00003348 7242                    	JC	short No_fileJ
 14594 0000334A E8A913                  	call	NEXTENT
 14595 0000334D 73AA                    	JNC	short DELFILE
 14596 0000334F C42E[2405]              	LES	BP,[THISDPB]		; NEXTENT sets ES=DOSGROUP
 14597                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 14598 00003353 268A4600                	MOV	AL,[ES:BP]
 14599 00003357 E8D32B                  	call	FLUSHBUF
 14600 0000335A 7230                    	JC	short No_fileJ
 14601                                  ;
 14602                                  ; Now we need to test FoundDel for our flags. The cases to consider are:
 14603                                  ;
 14604                                  ;   not found not deleted		file not found
 14605                                  ;   not found	  deleted		*** impossible ***
 14606                                  ;	found not deleted		access denied (read-only)
 14607                                  ;	found	  deleted		no error
 14608                                  ;
 14609 0000335C F606[0A05]10            	TEST	byte [FOUNDDEL],FILEDELETED ; did we delete a file?
 14610 00003361 7422                    	JZ	short DelError		; no, figure out what's wrong.
 14611                                  ; We set VOLCHNG_FLAG to indicate that we have changed the volume label
 14612                                  ; and to force the DOS to issue a media check.
 14613 00003363 F606[0605]08            	TEST	byte [ATTRIB],attr_volume_id
 14614 00003368 7417                    	jz	short No_Set_Flag
 14615 0000336A 50                      	PUSH	AX
 14616 0000336B 06                      	PUSH	ES
 14617 0000336C 57                      	PUSH	DI
 14618 0000336D C43E[3A05]              	LES	DI,[THISCDS]
 14619 00003371 268A25                  	MOV	AH,[ES:DI]		; Get drive
 14620 00003374 80EC41                  	SUB	AH,'A'                  ; Convert to 0-based
 14621 00003377 8826[070A]              	mov	[VOLCHNG_FLAG],AH
 14622                                  	
 14623                                  	; MSDOS 6.0
 14624                                  	;XOR	BH,BH			;>32mb delete volume id from boot record ;AN000;
 14625                                  	;call	Set_Media_ID		;>32mb set volumme id to boot record	 ;AN000;
 14626                                  	 
 14627 0000337B E83D28                  	call	FATREAD_CDS		; force media check
 14628 0000337E 5F                      	POP	DI
 14629 0000337F 07                      	POP	ES
 14630 00003380 58                      	POP	AX
 14631                                  No_Set_Flag:
 14632 00003381 E8F0EC                  	call	LcritDisk		; carry is clear
 14633 00003384 C3                      	retn
 14634                                  DelError:
 14635 00003385 F606[0A05]01            	TEST	byte [FOUNDDEL],FILEFOUND ; not deleted. Did we find file?
 14636 0000338A 7503                    	JNZ	short Del_access_errJ 	; yes. Access denied
 14637                                  No_fileJ:
 14638 0000338C E94BFF                  	JMP	No_file ; 10/08/2018 		; Nope
 14639                                  Del_access_errJ:
 14640 0000338F E95EFF                  	JMP	Del_access_err ; 10/08/2018
 14641                                  
 14642                                  ; 08/08/2018 - Retro DOS v3.0
 14643                                  
 14644                                  ;Break	<REN_DEL_Check - check for access for rename and delete>
 14645                                  ;---------------------------------------------------------------------------
 14646                                  ; Procedure Name : REN_DEL_Check
 14647                                  ;
 14648                                  ; Inputs:
 14649                                  ;	[THISDPB] set
 14650                                  ;	[CURBUF+2]:BX points to entry
 14651                                  ;	[CURBUF+2]:SI points to firclus field of entry
 14652                                  ;	[WFP_Start] points to name
 14653                                  ; Function:
 14654                                  ;	Check for Exclusive access on given file.
 14655                                  ;	  Used by RENAME, SET_FILE_INFO, and DELETE.
 14656                                  ; Outputs:
 14657                                  ;	ES:BP = [THISDPB]
 14658                                  ;	NOTE: The WFP string pointed to by [WFP_Start] Will be Modified.  The
 14659                                  ;		last element will be loaded from the directory entry.  This is
 14660                                  ;		so the name given to the sharer doesn't have any meta chars in
 14661                                  ;		it.
 14662                                  ;	Carry set if sharing violation, INT 24H generated
 14663                                  ;	    NOTE THAT AX IS NOT error_sharing_violation.
 14664                                  ;		This is because input AX is preserved.
 14665                                  ;		Caller must set the error if needed.
 14666                                  ;	Carry clear
 14667                                  ;		OK
 14668                                  ; AX,DS,BX,SI,DI preserved
 14669                                  ;---------------------------------------------------------------------------
 14670                                  
 14671                                  REN_DEL_Check:
 14672                                  
 14673 00003392 1E                      	PUSH	DS
 14674 00003393 57                      	PUSH	DI
 14675 00003394 50                      	PUSH	AX
 14676 00003395 53                      	PUSH	BX
 14677 00003396 56                      	PUSH	SI		; Save CURBUF pointers
 14678                                  	
 14679 00003397 16                      	push	ss
 14680 00003398 07                      	pop	es
 14681                                  
 14682                                  ;hkn; context ES will assume ES to DOSDATA
 14683                                  ;hkn; ASSUME	ES:DOSGROUP
 14684                                  
 14685                                  ;hkn; SS override
 14686 00003399 368B3E[4A05]            	MOV	DI,[SS:WFP_START] ; ES:DI -> WFP
 14687 0000339E 89DE                    	MOV	SI,BX
 14688                                  
 14689                                  ;hkn; SS override
 14690 000033A0 368E1E[7605]            	MOV	DS,[SS:CURBUF+2] ; DS:SI -> entry (FCB style name)
 14691 000033A5 89FB                    	MOV	BX,DI		; Set backup limit for skipback
 14692 000033A7 83C302                  	ADD	BX,2		; Skip over d: to point to leading '\'
 14693 000033AA E8BDEB                  	call	StrLen		; CX is length of ES:DI including NUL
 14694 000033AD 49                      	DEC	CX		; Don't include nul in count
 14695 000033AE 01CF                    	ADD	DI,CX		; Point to NUL at end of string
 14696 000033B0 E88138                  	call	SkipBack	; Back up one element
 14697 000033B3 47                      	INC	DI		; Point to start of last element
 14698                                  
 14699                                  ;hkn; SS override
 14700                                  	; MSDOS 6.0
 14701                                  	;MOV	[SS:SAVE_BX],DI	;IFS. save for DOS_RENAME   ;AN000;
 14702                                  	;
 14703 000033B4 E860FA                  	call	PackName	; Transfer name from entry to ASCIZ tail.
 14704 000033B7 5E                      	POP	SI		; Get back entry pointers
 14705 000033B8 5B                      	POP	BX
 14706 000033B9 53                      	PUSH	BX
 14707 000033BA 56                      	PUSH	SI		; Back on stack
 14708                                  	
 14709 000033BB 16                      	push	ss
 14710 000033BC 1F                      	pop	ds
 14711                                  
 14712                                  ;hkn; context DS will assume ES to DOSDATA
 14713                                  ;hkn; ASSUME	DS:DOSGROUP
 14714                                  
 14715                                  ;
 14716                                  ; Close the file if possible by us.
 14717                                  ;
 14718                                  ;if installed
 14719 000033BD FF1E[9000]              	Call	far [JShare+(13*4)] ; 13 = ShCloseFile
 14720                                  ;else
 14721                                  ;	Call	ShCloseFile
 14722                                  ;endif
 14723 000033C1 8C1E[3805]              	MOV	[THISSFT+2],DS
 14724                                  
 14725                                  ;hkn; AUXSTACK is in DOSDATA
 14726 000033C5 C706[3605][D106]        	MOV	word [THISSFT],AUXSTACK-SF_ENTRY.size
 14727                                  				; Scratch space
 14728 000033CB 30E4                    	XOR	AH,AH		; Indicate file to DOOPEN (high bit off)
 14729 000033CD E8F01D                  	call	DOOPEN		; Fill in SFT for share check
 14730 000033D0 C43E[3605]              	LES	DI,[THISSFT]
 14731 000033D4 26C745021000            	MOV	word [ES:DI+SF_ENTRY.sf_mode],SHARING_DENY_BOTH
 14732                                  				; requires exclusive access
 14733                                  	;MOV	word [ES:DI+SF_ENTRY.sf_ref_count],1 ; Pretend open
 14734 000033DA 26C7050100              	mov	word [ES:DI],1
 14735 000033DF E8783F                  	call	ShareEnter
 14736 000033E2 720D                    	jc	short CheckDone
 14737 000033E4 C43E[3605]              	LES	DI,[THISSFT]
 14738                                  	;MOV	word [ES:DI+SF_ENTRY.sf_ref_count],0
 14739 000033E8 26C7050000              	mov	word [ES:DI],0	; Pretend closed and free
 14740                                  	
 14741 000033ED E8643F                  	call	ShareEnd	; Tell sharer we're done with THISSFT
 14742 000033F0 F8                      	CLC
 14743                                  CheckDone:
 14744 000033F1 C42E[2405]              	LES	BP,[THISDPB]
 14745 000033F5 5E                      	POP	SI
 14746 000033F6 5B                      	POP	BX
 14747 000033F7 58                      	POP	AX
 14748 000033F8 5F                      	POP	DI
 14749 000033F9 1F                      	POP	DS
 14750 000033FA C3                      	retn
 14751                                  
 14752                                  ;Break	<FastOpen_Delete - delete dir info in fastopen>
 14753                                  ;---------------------------------------------------------------------------
 14754                                  ; Procedure Name : FastOpen_Delete
 14755                                  ; Inputs:
 14756                                  ;	None
 14757                                  ; Function:
 14758                                  ;	Call FastOpen to delete the dir info.
 14759                                  ; Outputs:
 14760                                  ;	None
 14761                                  ;---------------------------------------------------------------------------
 14762                                  
 14763                                  FastOpen_Delete:
 14764 000033FB 9C                      	PUSHF			; save flag
 14765 000033FC 56                      	PUSH	SI		; save registers
 14766 000033FD 53                      	PUSH	BX
 14767 000033FE 50                      	PUSH	AX
 14768                                  ;hkn; SS override
 14769 000033FF 8B36[4A05]              	MOV	SI,[WFP_START]	; ds:si points to path name
 14770 00003403 B003                    	MOV	AL,FONC_delete	; al = 3
 14771                                  fastinvoke:
 14772                                  ;hkn; FastTable is in DOSDATA
 14773 00003405 BB[450F]                	MOV	BX,FastTable+2
 14774 00003408 FF1F                    	CALL	far [BX]	; call fastopen
 14775 0000340A 58                      	POP	AX		; restore registers
 14776 0000340B 5B                      	POP	BX
 14777 0000340C 5E                      	POP	SI
 14778 0000340D 9D                      	POPF			; restore flag
 14779 0000340E C3                      	retn
 14780                                  
 14781                                  ;Break	<FastOpen_Update - update dir info in fastopen>
 14782                                  ;---------------------------------------------------------------------------
 14783                                  ; Procedure Name : FastOpen_Update
 14784                                  ;
 14785                                  ; Inputs:
 14786                                  ;	DL     drive number (A=0,B=1,,,)
 14787                                  ;	CX     first cluster #
 14788                                  ;	AH     0 updates dir entry
 14789                                  ;	       1 updates CLUSNUM , BP = new CLUSNUM
 14790                                  ;	ES:DI  directory entry
 14791                                  ; Function:
 14792                                  ;	Call FastOpen to update the dir info.
 14793                                  ; Outputs:
 14794                                  ;	None
 14795                                  ;---------------------------------------------------------------------------
 14796                                  
 14797                                  FastOpen_Update:
 14798 0000340F 9C                      	PUSHF			; save flag
 14799 00003410 56                      	PUSH	SI
 14800 00003411 53                      	PUSH	BX		; save regs
 14801 00003412 50                      	PUSH	AX
 14802 00003413 B004                    	MOV	AL,FONC_update	; al = 4
 14803 00003415 EBEE                    	JMP	short fastinvoke
 14804                                  
 14805                                  ;Break	<FastOpen_Rename - Rename directory>	   ; PTR 5622
 14806                                  ;---------------------------------------------------------------------------
 14807                                  ; PROCEDURE Name : FastOpen_Rename
 14808                                  ;
 14809                                  ; Inputs:
 14810                                  ;	 REN_WFP   = Path Name
 14811                                  ;	 NAME1	   = New Name
 14812                                  ; Function:
 14813                                  ;	Call FastOpen to rename the dir entry in the cache
 14814                                  ; Outputs:
 14815                                  ;	None
 14816                                  ;---------------------------------------------------------------------------
 14817                                  
 14818                                  FastOpen_Rename:
 14819                                  	; 08/08/2018 - Retro DOS v3.0
 14820                                  	; MSDOS 6.0
 14821                                  	;PUSHF			;AN001 save flag
 14822                                  	;PUSH	SI		;AN001 save registers
 14823                                  	;PUSH	DI		;AN001
 14824                                  	;PUSH	BX		;AN001
 14825                                  	;PUSH	AX		;AN001
 14826                                  	;
 14827                                  ;hkn; SS override
 14828                                  	;;MOV	SI,[SS:REN_WFP]	;AN001	;;AN001  ds:si-->Path name addrs
 14829                                  	;
 14830                                  	; ? - 08/08/2018 - Retro DOS v3.0
 14831                                  	;push	ss
 14832                                  	;pop	ds
 14833                                  	;mov	si,[REN_WFP]
 14834                                  	;
 14835                                  ;hkn; NAME1 is in DOSDATA
 14836                                  	;MOV	DI,NAME1	;;AN001  ds:di-->New name addrs
 14837                                  	;MOV	AL,FONC_Rename	;;AN001  al = 6
 14838                                  	;
 14839                                  ;hkn; FastTable is in DOSDATA
 14840                                  	;MOV	BX,FastTable+2
 14841                                  	;CALL	far [BX]	;;AN001  call fastopen
 14842                                  	;
 14843                                  	;POP	AX		; restore registers  ;AN001
 14844                                  	;POP	BX				     ;AN001
 14845                                  	;POP	DI				     ;AN001
 14846                                  	;POP	SI				     ;AN001
 14847                                  	;POPF			; restore flag	     ;AN001
 14848                                  	;retn					     ;AN001
 14849                                  
 14850                                  	; MSDOS 6.0
 14851                                  ;entry Fast_Dispatch		; future fastxxxx entry	;AN000;
 14852                                  Fast_Dispatch:
 14853                                  ;hkn; FastTable is in DOSDATA
 14854                                  	;MOV	SI,FastTable+2	; index to the	     ;AN000;
 14855                                  ;hkn; use SS override
 14856                                  	;CALL	far [SS:SI]	; RMFD call fastopen
 14857                                  	;retn
 14858                                  
 14859                                  ;============================================================================
 14860                                  ; RENAME.ASM, MSDOS 6.0, 1991
 14861                                  ;============================================================================
 14862                                  ; 08/08/2018 - Retro DOS v3.0
 14863                                  
 14864                                  ;	TITLE	DOS_RENAME - Internal RENAME call for MS-DOS
 14865                                  ;	NAME	DOS_RENAME
 14866                                  
 14867                                  ;**	Low level routine for renaming files
 14868                                  ;
 14869                                  ;	DOS_RENAME
 14870                                  ;
 14871                                  ;	Modification history:
 14872                                  ;
 14873                                  ;	    Created: ARR 30 March 1983
 14874                                  
 14875                                  ;----------------------------------------------------------------------------
 14876                                  ;
 14877                                  ; Procedure Name : DOS_RENAME
 14878                                  ;
 14879                                  ; Inputs:
 14880                                  ;	[WFP_START] Points to SOURCE WFP string ("d:/" must be first 3
 14881                                  ;		chars, NUL terminated)
 14882                                  ;	[CURR_DIR_END] Points to end of Current dir part of string [SOURCE]
 14883                                  ;		( = -1 if current dir not involved, else
 14884                                  ;		 Points to first char after last "/" of current dir part)
 14885                                  ;	[REN_WFP] Points to DEST WFP string ("d:/" must be first 3
 14886                                  ;		chars, NUL terminated)
 14887                                  ;	[THISCDS] Points to CDS being used
 14888                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 14889                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 14890                                  ; Function:
 14891                                  ;	Rename the specified file(s)
 14892                                  ;	NOTE: This routine uses most of AUXSTACK as a temp buffer.
 14893                                  ; Outputs:
 14894                                  ;	CARRY CLEAR
 14895                                  ;	    OK
 14896                                  ;	CARRY SET
 14897                                  ;	    AX is error code
 14898                                  ;		error_file_not_found
 14899                                  ;			No match for source, or dest path invalid
 14900                                  ;		error_not_same_device
 14901                                  ;			Source and dest are on different devices
 14902                                  ;		error_access_denied
 14903                                  ;			Directory specified (not simple rename),
 14904                                  ;			Device name given, Destination exists.
 14905                                  ;			NOTE: In third case some renames may have
 14906                                  ;			 been done if metas.
 14907                                  ;		error_path_not_found
 14908                                  ;			Bad path (not in curr dir part if present)
 14909                                  ;			SOURCE ONLY
 14910                                  ;		error_bad_curr_dir
 14911                                  ;			Bad path in current directory part of path
 14912                                  ;			SOURCE ONLY
 14913                                  ;		error_sharing_violation
 14914                                  ;			Deny both access required, generates an INT 24.
 14915                                  ; DS preserved, others destroyed
 14916                                  ;
 14917                                  ;----------------------------------------------------------------------------
 14918                                  
 14919                                  DOS_RENAME:
 14920                                  
 14921                                  ;hkn; DOS_RENAME is called from file.asm and fcbio.asm. DS has been set up
 14922                                  ;hkn; at this point to DOSDATA.
 14923                                  
 14924 00003417 E8B4EB                  	call	TestNet
 14925 0000341A 7306                    	JNC	short LOCAL_RENAME
 14926                                  
 14927                                  ;IF NOT Installed
 14928                                  ;	transfer NET_RENAME
 14929                                  ;ELSE
 14930                                  	;MOV	AX,(MultNET SHL 8) OR 17
 14931                                  	;INT	2FH
 14932                                  	;return
 14933                                  
 14934 0000341C B81111                  	mov     ax, 1111h
 14935 0000341F CD2F                    	int     2Fh 	; Multiplex - NETWORK REDIRECTOR - RENAME REMOTE FILE
 14936                                  			; SS = DS = DOS CS, 
 14937                                  			; SDA first filename pointer = offset of fully-qualified old name
 14938                                  			; SDA CDS pointer -> current directory
 14939                                  			; Return: CF set on error
 14940 00003421 C3                      	retn
 14941                                  ;ENDIF
 14942                                  
 14943                                  LOCAL_RENAME:
 14944 00003422 C606[D102]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 14945 00003427 8B36[4A05]              	MOV	SI,[WFP_START]
 14946 0000342B 8B3E[4C05]              	MOV	DI,[REN_WFP]
 14947 0000342F 8A04                    	MOV	AL,[SI]
 14948 00003431 8A25                    	MOV	AH,[DI]
 14949 00003433 0D2020                  	OR	AX,2020H		; Lower case
 14950 00003436 38E0                    	CMP	AL,AH
 14951 00003438 7405                    	JZ	short SAMEDRV
 14952 0000343A B81100                  	MOV	AX,error_not_same_device
 14953 0000343D F9                      	STC
 14954 0000343E C3                      	retn
 14955                                  
 14956                                  SAMEDRV:
 14957 0000343F FF36[DC02]              	PUSH	WORD [DMAADD+2]
 14958 00003443 FF36[DA02]              	PUSH	WORD [DMAADD]
 14959 00003447 8C1E[DC02]              	MOV	[DMAADD+2],DS
 14960                                  
 14961                                  ;hkn; RENAMEDMA is in DOSDATA
 14962 0000344B C706[DA02][8605]        	MOV	WORD [DMAADD],RENAMEDMA
 14963 00003451 C606[0B05]00            	MOV	byte [FOUND_DEV],0	; Rename fails on DEVS, assume not a dev
 14964 00003456 E813EC                  	call	EcritDisk
 14965 00003459 E8B804                  	call	DOS_SEARCH_FIRST	; Sets [NoSetDir] to 1, [CURBUF+2]:BX
 14966                                  					;    points to entry
 14967 0000345C 7315                    	JNC	short Check_Dev
 14968 0000345E 83F812                  	CMP	AX,error_no_more_files
 14969 00003461 7503                    	JNZ	short GOTERR
 14970 00003463 B80200                  	MOV	AX,error_file_not_found
 14971                                  GOTERR:
 14972 00003466 F9                      	STC
 14973                                  RENAME_POP:
 14974 00003467 8F06[DA02]              	POP	WORD [DMAADD]
 14975 0000346B 8F06[DC02]              	POP	WORD [DMAADD+2]
 14976 0000346F E802EC                  	call	LcritDisk
 14977 00003472 C3                      	retn
 14978                                  
 14979                                  Check_Dev:
 14980 00003473 B80500                  	MOV	AX,error_access_denied	; Assume error
 14981                                  	;
 14982                                  	; MSDOS 6.0
 14983                                  	;PUSH	DS			      ;PTM.			    ;AN000;
 14984                                  	;LDS	SI,[DMAADD]		      ;PTM.  chek if source a dir   ;AN000;
 14985                                  	;!?;ADD	SI,find_buf.attr	      ;PTM.			    ;AN000;
 14986                                  	;!?;TEST byte [SI+dir_entry.dir_attr],attr_directory  ;PTM.	    ;AN000;
 14987                                  	;JZ	short notdir		      ;PTM.			    ;AN000;
 14988                                  	;MOV	SI,[REN_WFP]		      ;PTM.  if yes, make sure path ;AN000;
 14989                                  	;call	Check_Pathlen2		      ;PTM.   length < 67	    ;AN000;
 14990                                  ;notdir:
 14991                                  	;POP	DS			      ;PTM.			    ;AN000;
 14992                                  	;JA	short GOTERR		      ;PTM.			    ;AN000;
 14993                                  	;
 14994                                  	; MSDOS 3.3 (& MSDOS 6.0)
 14995 00003476 803E[0B05]00            	CMP	byte [FOUND_DEV],0
 14996 0000347B 75E9                    	JNZ	short GOTERR
 14997                                  ; At this point a source has been found. There is search continuation info (a
 14998                                  ; la DOS_SEARCH_NEXT) for the source at RENAMEDMA, together with the first
 14999                                  ; directory entry found.
 15000                                  ; [THISCDS], [THISDPB], and [THISDRV] are set and will remain correct
 15001                                  ; throughout the RENAME since it is known at this point that the source and
 15002                                  ; destination are both on the same device.
 15003                                  ; [SATTRIB] is also set.
 15004 0000347D 89DE                    	MOV	SI,BX
 15005 0000347F 83C61A                  	ADD	SI,dir_entry.dir_first
 15006 00003482 E80DFF                  	call	REN_DEL_Check
 15007 00003485 7305                    	JNC	short REN_OK1
 15008 00003487 B82000                  	MOV	AX,error_sharing_violation
 15009 0000348A EBDB                    	JMP	short RENAME_POP
 15010                                  
 15011                                  ;------------------------------------------------------------------------------
 15012                                  ; Check if the source is a file or directory. If file, delete the entry
 15013                                  ; from the Fastopen cache. If directory, rename it later
 15014                                  ;------------------------------------------------------------------------------
 15015                                  REN_OK1:				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 15016                                  	; MSDOS 6.0
 15017                                  	;PUSH	SI
 15018                                  	;LDS	SI,[DMAADD]		;BN00X; PTM. check if source a dir ;AN000;
 15019                                  	;!?;ADD	SI,find_buf.attr	;;BN00XPTM.P5520		   ;AN000;
 15020                                  	;!?;TEST byte [SI+dir_entry.dir_attr],attr_directory ;;BN00XPTM.   ;AN000;
 15021                                  	;JZ	short NOT_DIR1		;;BN00XPTM.			   ;AN000;
 15022                                  	;POP	SI			;BN00X
 15023                                  	;JMP	SHORT SWAP_SOURCE	;BN00X
 15024                                  	;
 15025                                  ;NOT_DIR1:				;;BN00X it is a file, delete the entry
 15026                                  	;POP	SI
 15027                                  	;
 15028                                  	; MSDOS 3.3 (& MSDOS 6.0)	
 15029 0000348C E86CFF                  	call	FastOpen_Delete 	; delete dir info in fastopen DOS 3.3
 15030                                  
 15031                                  ;SWAP_SOURCE:
 15032                                  	; MSDOS 3.3
 15033                                  	;MOV	SI,[REN_WFP]
 15034                                  	;MOV	[WFP_START],SI
 15035                                  	; MSDOS 6.0
 15036 0000348F A1[4A05]                	MOV	AX,[WFP_START]		; Swap source and destination
 15037 00003492 8B36[4C05]              	MOV	SI,[REN_WFP]		; Swap source and destination
 15038 00003496 8936[4A05]              	MOV	[WFP_START],SI		; WFP_START = Destination path
 15039 0000349A A3[4C05]                	MOV	[REN_WFP],AX		; REN_WFP   = Source path
 15040                                  	; MSDOS 3.3 (& MSDOS 6.0)
 15041 0000349D C706[4E05]FFFF          	MOV	word [CURR_DIR_END],-1	; No current dir on dest
 15042 000034A3 C706[1805]FFE5          	MOV	WORD [CREATING],DIRFREE*256+0FFh  ; Creating, not DEL *.*
 15043                                  					; A rename is like a CREATE_NEW as far
 15044                                  					; as the destination is concerned.
 15045 000034A9 E88F13                  	call	GetPathNoSet
 15046                                  ;   If this GETPATH fails due to file not found, we know all renames will work
 15047                                  ;   since no files match the destination name. If it fails for any other
 15048                                  ;   reason, the rename fails on a path not found, or whatever (also fails if
 15049                                  ;   we find a device or directory). If the GETPATH succeeds, we aren't sure
 15050                                  ;   if the rename should fail because we haven't built an explicit name by
 15051                                  ;   substituting for the meta chars in it. In this case the destination file
 15052                                  ;   spec with metas is in [NAME1] and the explicit source name is at RENAMEDMA
 15053                                  ;   in the directory entry part.
 15054 000034AC 7223                    	JC	short NODEST
 15055                                  	;; MSDOS 6.0
 15056                                  	;; JZ	short BAD_ACC 		; Dest string is a directory	;AC000;
 15057                                  	; !! MSDOS 3.3 !!
 15058 000034AE 7404                    	JZ	short BAD_ACC ; !!	; Dest string is a directory
 15059                                  	;
 15060 000034B0 08E4                    	OR	AH,AH			; Device?
 15061 000034B2 7930                    	JNS	short SAVEDEST		; No, continue
 15062                                  BAD_ACC:
 15063 000034B4 B80500                  	MOV	AX,error_access_denied
 15064 000034B7 F9                      	STC
 15065                                  RENAME_CLEAN:
 15066 000034B8 9C                      	PUSHF				; Save carry state
 15067 000034B9 50                      	PUSH	AX			; and error code (if carry set)
 15068 000034BA A0[1105]                	MOV	AL,[THISDRV]
 15069 000034BD E86D2A                  	call	FLUSHBUF
 15070 000034C0 58                      	POP	AX
 15071 000034C1 803E[F602]00            	CMP	byte [FAILERR],0
 15072 000034C6 7503                    	JNZ	short BAD_ERR		; User FAILed to I 24
 15073 000034C8 9D                      	POPF
 15074 000034C9 EB9C                    	JMP	short RENAME_POP
 15075                                  
 15076                                  BAD_ERR:
 15077 000034CB 58                      	POP	AX			; Saved flags
 15078 000034CC B80300                  	MOV	AX,error_path_not_found
 15079 000034CF EB95                    	JMP	short GOTERR
 15080                                  
 15081                                  NODEST:
 15082 000034D1 750B                    	JNZ	short BAD_PATH
 15083 000034D3 803E[F602]00            	CMP	byte [FAILERR],0
 15084 000034D8 7504                    	JNZ	short BAD_PATH	; Search for dest failed because user FAILed on
 15085                                  				;	I 24
 15086 000034DA 08C9                    	OR	CL,CL
 15087 000034DC 7506                    	JNZ	short SAVEDEST
 15088                                  BAD_PATH:
 15089 000034DE B80300                  	MOV	AX,error_path_not_found
 15090 000034E1 F9                      	STC
 15091 000034E2 EB83                    	JMP	short RENAME_POP
 15092                                  
 15093                                  SAVEDEST:
 15094 000034E4 16                      	push	ss
 15095 000034E5 07                      	pop	es
 15096                                  
 15097                                  ;hkn; NAME1 & NAME2 is in DOSDATA
 15098 000034E6 BF[F204]                	MOV	DI,NAME2
 15099 000034E9 BE[E604]                	MOV	SI,NAME1
 15100                                  
 15101 000034EC B90B00                  	MOV	CX,11
 15102 000034EF F3A4                    	REP	MOVSB			; Save dest with metas at NAME2
 15103 000034F1 A1[5805]                	MOV	AX,[DIRSTART]
 15104 000034F4 A3[FF04]                	MOV	[DESTSTART],AX
 15105                                  BUILDDEST:
 15106 000034F7 16                      	push	ss
 15107 000034F8 07                      	pop	es			; needed due to JMP BUILDDEST below
 15108                                  
 15109                                  ;hkn; RENAMEDMA, NAME1, NAME2 in DOSDATA
 15110 000034F9 BB[9B05]                	MOV	BX,RENAMEDMA+21		; Source of replace chars
 15111 000034FC BF[E604]                	MOV	DI,NAME1		; Real dest name goes here
 15112 000034FF BE[F204]                	MOV	SI,NAME2		; Raw dest
 15113                                  
 15114 00003502 B90B00                  	MOV	CX,11
 15115                                  	
 15116                                  	; MSDOS 6.0
 15117                                  	;CALL	NEW_RENAME		;IFS. replace ? chars	;AN000;
 15118                                  
 15119                                  	; MSDOS 3.3
 15120                                  
 15121                                  ; 08/08/2018 - Retro DOS v3.0
 15122                                  ; MSDOS 6.0 
 15123                                  ;---------------------------------------------------------------------------
 15124                                  ;Procedure: NEW_RENAME
 15125                                  ;
 15126                                  ;Input: DS:SI -> raw string with ?
 15127                                  ;	ES:DI -> destination string
 15128                                  ;	DS:BX -> source string
 15129                                  ;Function: replace ? chars of raw string with chars in source string and
 15130                                  ;	   put in destination string
 15131                                  ;Output: ES:DI-> new string
 15132                                  ;---------------------------------------------------------------------------
 15133                                  
 15134                                  NEW_RENAME:
 15135                                  NEWNAM:
 15136                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 341Ah
 15137 00003505 AC                      	LODSB
 15138 00003506 3C3F                    	CMP	AL,"?"
 15139 00003508 7502                    	JNZ	short NOCHG
 15140 0000350A 8A07                    	MOV	AL,[BX] 		; Get replace char
 15141                                  NOCHG:
 15142 0000350C AA                      	STOSB
 15143 0000350D 43                      	INC	BX			; Next replace char
 15144 0000350E E2F5                    	LOOP	NEWNAM
 15145                                  	; MSSOS 6.0
 15146                                  	;retn
 15147                                  
 15148                                  	; MSDOS 3.3 (& MSDOS 6.0)
 15149 00003510 C606[0605]16            	MOV	byte [ATTRIB],attr_all	; Stop duplicates with any attributes
 15150 00003515 C606[1805]FF            	MOV	byte [CREATING],0FFH
 15151 0000351A E8C315                  	call	DEVNAME 		; Check if we built a device name
 15152 0000351D 7395                    	JNC	short BAD_ACC
 15153 0000351F 8B1E[FF04]              	MOV	BX,[DESTSTART]
 15154 00003523 C42E[2405]              	LES	BP,[THISDPB]
 15155 00003527 E8B612                  	call	SETDIRSRCH		; Reset search to start of dir
 15156 0000352A 7288                    	JC	short BAD_ACC 		; Screw up
 15157 0000352C E87611                  	call	FINDENTRY		; See if new name already exists
 15158 0000352F 7383                    	JNC	short BAD_ACC 		; Error if found
 15159 00003531 803E[F602]00            	CMP	byte [FAILERR],0
 15160 00003536 752A                    	JNZ	short BAD_ACCJ		; Find failed because user FAILed to I 24
 15161 00003538 A1[FF04]                	MOV	AX,[DESTSTART]		; DIRSTART of dest
 15162 0000353B 3B06[9505]              	CMP	AX,[RENAMEDMA+15]	; DIRSTART of source
 15163 0000353F 7453                    	JZ	short SIMPLE_RENAME	; If =, just give new name
 15164                                  
 15165 00003541 A0[A605]                	MOV	AL,[RENAMEDMA+21+dir_entry.dir_attr]
 15166 00003544 A810                    	TEST	AL,attr_directory
 15167 00003546 751A                    	JNZ	short BAD_ACCJ		; Can only do a simple rename on dirs,
 15168                                  					; otherwise the . and .. entries get
 15169                                  					; wiped.
 15170 00003548 A2[0605]                	MOV	[ATTRIB],AL
 15171 0000354B 8C1E[3805]              	MOV	[THISSFT+2],DS
 15172                                  
 15173                                  ;hkn; AUXSTACK is in DOSDATA
 15174 0000354F BE[D106]                	MOV	SI,AUXSTACK-SF_ENTRY.size
 15175 00003552 8936[3605]              	MOV	[THISSFT],SI
 15176 00003556 C744020200              	MOV	word [SI+SF_ENTRY.sf_mode],SHARING_COMPAT+open_for_both
 15177 0000355B 31C9                    	XOR	CX,CX			; Set "device ID" for call into makenode
 15178 0000355D E8F21A                  	call	RENAME_MAKE		; This is in mknode
 15179 00003560 7303                    	JNC	short GOT_DEST
 15180                                  BAD_ACCJ:
 15181 00003562 E94FFF                  	JMP	BAD_ACC
 15182                                  
 15183                                  GOT_DEST:
 15184 00003565 53                      	push	bx
 15185 00003566 C43E[3605]              	LES	DI,[THISSFT]		; RENAME_MAKE entered this into sharing
 15186 0000356A E8E73D                  	call	ShareEnd		; we need to remove it.
 15187 0000356D 5B                      	pop	bx
 15188                                  ; A zero length entry with the correct new name has now been made at
 15189                                  ;   [CURBUF+2]:BX.
 15190 0000356E C43E[7405]              	LES	DI,[CURBUF]
 15191                                  
 15192                                  	; MSDOS 6.0
 15193                                  	;TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 15194                                  	;				;LB. if already dirty		  ;AN000;
 15195                                  	;JNZ	short yesdirty		;LB.  don't increment dirty count ;AN000;
 15196                                  	;call	INC_DIRTY_COUNT 	;LB.				  ;AN000;
 15197                                  	
 15198 00003572 26804D0540              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 15199                                  ;yesdirty:
 15200 00003577 89DF                    	MOV	DI,BX
 15201 00003579 83C70B                  	ADD	DI,dir_entry.dir_attr	; Skip name
 15202                                  
 15203                                  ;hkn; RENAMEDMA is in DOSDATA
 15204 0000357C BE[A605]                	MOV	SI,RENAMEDMA+21+dir_entry.dir_attr
 15205 0000357F B91500                  	MOV	CX,dir_entry.size-dir_entry.dir_attr ; mov cx,21
 15206 00003582 F3A4                    	REP	MOVSB
 15207 00003584 E85100                  	CALL	GET_SOURCE
 15208 00003587 724B                    	JC	short RENAME_OVER
 15209 00003589 89DF                    	MOV	DI,BX
 15210 0000358B 8E06[7605]              	MOV	ES,[CURBUF+2]
 15211 0000358F B0E5                    	MOV	AL,DIRFREE
 15212 00003591 AA                      	STOSB				; "free" the source
 15213 00003592 EB13                    	JMP	SHORT DIRTY_IT
 15214                                  
 15215                                  SIMPLE_RENAME:
 15216 00003594 E84100                  	CALL	GET_SOURCE		; Get the source back
 15217 00003597 723B                    	JC	short RENAME_OVER
 15218 00003599 89DF                    	MOV	DI,BX
 15219 0000359B 8E06[7605]              	MOV	ES,[CURBUF+2]
 15220                                  
 15221                                  ;hkn; NAME1 is in DOSDATA
 15222 0000359F BE[E604]                	MOV	SI,NAME1		; New Name
 15223 000035A2 B90B00                  	MOV	CX,11
 15224 000035A5 F3A4                    	REP	MOVSB
 15225                                  DIRTY_IT:
 15226 000035A7 8B3E[7405]              	MOV	DI,[CURBUF]
 15227                                  
 15228                                  	; MSDOS 6.0
 15229                                  	;TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 15230                                  	;				;LB. if already dirty		  ;AN000;
 15231                                  	;JNZ	short Yesdirty2		;LB.  don't increment dirty count ;AN000;
 15232                                  	;call	INC_DIRTY_COUNT 	;LB.				  ;AN000;
 15233                                  	
 15234 000035AB 26804D0540              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 15235                                  ;------------------------------------------------------------------------------
 15236                                  ; Check if the source is a directory of file. If directory rename it to the
 15237                                  ; the new name in the Fastopen cache buffer.  If file name it has been
 15238                                  ; previously deleted.
 15239                                  ;------------------------------------------------------------------------------
 15240                                  ;Yesdirty2:
 15241                                  	; MSDOS 6.0
 15242                                  	;PUSH	SI
 15243                                  	;LDS	SI,[DMAADD]		;;BN00XPTM. chek if source a dir ;AN000;
 15244                                  	;ADD	SI,find_buf.attr	;;BN00XPTM.P5520		;AN000;
 15245                                  	;TEST	byte [SI+dir_entry.dir_attr],attr_directory ;;BN00XPTM.	;AN000;
 15246                                  	;JZ	short NOT_DIR2		;;BN00XPTM.			;AN000;
 15247                                  	;call	FASTOPEN_RENAME		;;BN00X rename dir entry in fastopen
 15248                                  	;POP	SI
 15249                                  	;JMP	SHORT NOT_DIRTY1
 15250                                  ;NOT_DIR2:				;;BN00X it is a file, delete the entry
 15251                                  	;POP	SI
 15252                                  ;NOT_DIRTY1:				;;BN00X
 15253                                  NEXT_SOURCE:
 15254                                  ;hkn; RENAMEDMA is in DOSDATA
 15255 000035B0 BE[8705]                	MOV	SI,RENAMEDMA+1		;Name
 15256                                  ;
 15257                                  ; WARNING! Rename_Next leaves the disk critical section *ALWAYS*. We need
 15258                                  ; to enter it before going to RENAME_Next.
 15259                                  ;
 15260 000035B3 E8B6EA                  	call	EcritDisk
 15261 000035B6 C606[1805]00            	MOV	byte [CREATING],0 ; Correct setting for search (we changed it
 15262                                  				  ;  to FF when we made the prev new file).
 15263 000035BB E85704                  	call	RENAME_NEXT
 15264                                  ;
 15265                                  ; Note, now, that we have exited the previous ENTER and so are back to where
 15266                                  ; we were before.
 15267                                  ;
 15268 000035BE 7214                    	JC	short RENAME_OVER
 15269 000035C0 8D771A                  	LEA	SI,[BX+dir_entry.dir_first]
 15270 000035C3 E8CCFD                  	call	REN_DEL_Check
 15271 000035C6 7306                    	JNC	short REN_OK2
 15272 000035C8 B82000                  	MOV	AX,error_sharing_violation
 15273 000035CB E9EAFE                  	JMP	RENAME_CLEAN ; 10/08/2018
 15274                                  
 15275                                  ;------------------------------------------------------------------------------
 15276                                  ; Check if file or directory. If file, delete file from the Fastopen cache,
 15277                                  ; if directory, rename directory name in the Fastopen cache.
 15278                                  ;-----------------------------------------------------------------------------
 15279                                  REN_OK2:
 15280                                  	; MSDOS 6.0
 15281                                  	;MOV	AL,[RENAMEDMA+21+dir_entry.dir_attr] ; PTR P5622
 15282                                  	;TEST	AL,attr_directory	;;BN00X directory
 15283                                  	;JZ	short Ren_Directory	;;BN00X no - file, delete it
 15284                                  	
 15285                                  	; MSDOS 3.3 (& MSDOS 6.0)
 15286 000035CE E82AFE                  	call	FastOpen_Delete 	;;BN00X delete dir info in fastopen DOS 3.3
 15287 000035D1 E923FF                  	JMP	BUILDDEST		;;BN00X
 15288                                  
 15289                                  	; MSDOS 6.0
 15290                                  ;Ren_Directory:
 15291                                  	;call	FASTOPEN_RENAME 	;;BN00X delete dir info in fastopen DOS 3.3
 15292                                  	;JMP	BUILDDEST
 15293                                  
 15294                                  RENAME_OVER:
 15295 000035D4 F8                      	CLC
 15296 000035D5 E9E0FE                  	JMP	RENAME_CLEAN ; 10/08/2018
 15297                                  
 15298                                  ;----------------------------------------------------------------------------
 15299                                  ; Procedure: GET_SOURCE
 15300                                  ;
 15301                                  ; Inputs:
 15302                                  ;	RENAMEDMA has source info
 15303                                  ; Function:
 15304                                  ;	Re-find the source
 15305                                  ; Output:
 15306                                  ;	[CURBUF] set
 15307                                  ;	[CURBUF+2]:BX points to entry
 15308                                  ;	Carry set if error (currently user FAILed to I 24)
 15309                                  ; DS preserved, others destroyed
 15310                                  ;----------------------------------------------------------------------------
 15311                                  
 15312                                  GET_SOURCE:
 15313 000035D8 8B1E[9505]              	MOV	BX,[RENAMEDMA+15]	; DirStart
 15314 000035DC C42E[2405]              	LES	BP,[THISDPB]
 15315 000035E0 E8FD11                  	call	SETDIRSRCH
 15316 000035E3 7209                    	JC	short gs_ret_label	; retc
 15317 000035E5 E8D714                  	call	STARTSRCH
 15318 000035E8 A1[9305]                	MOV	AX,[RENAMEDMA+13]	; Lastent
 15319 000035EB E8C411                  	call	GETENT
 15320                                  
 15321                                  gs_ret_label:
 15322 000035EE C3                      	retn
 15323                                  
 15324                                  ;============================================================================
 15325                                  ; FINFO.ASM, MSDOS 6.0, 1991
 15326                                  ;============================================================================
 15327                                  ; 08/08/2018 - Retro DOS v3.0
 15328                                  
 15329                                  ;**	Low level routines for returning file information and setting file
 15330                                  ;	attributes
 15331                                  ;
 15332                                  ;	GET_FILE_INFO
 15333                                  ;	SET_FILE_ATTRIBUTE
 15334                                  ;
 15335                                  ;	Modification history:
 15336                                  ;
 15337                                  ;	    Created: ARR 30 March 1983
 15338                                  ;
 15339                                  ;	M025: Return access_denied if attempting to set
 15340                                  ;	      attribute of root directory.
 15341                                  ;
 15342                                  
 15343                                  ;SUBTTL GET_FILE_INFO -- Get File Information
 15344                                  
 15345                                  ;---------------------------------------------------------------------------
 15346                                  ; Procedure Name : GET_FILE_INFO
 15347                                  ;
 15348                                  ; Inputs:
 15349                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 15350                                  ;		terminated)
 15351                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 15352                                  ;		( = -1 if current dir not involved, else
 15353                                  ;		 Points to first char after last "/" of current dir part)
 15354                                  ;	[THISCDS] Points to CDS being used
 15355                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 15356                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 15357                                  ; Function:
 15358                                  ;	Get Information about a file
 15359                                  ; Returns:
 15360                                  ;	CARRY CLEAR
 15361                                  ;	    AX = Attribute of file
 15362                                  ;	    CX = Time stamp of file
 15363                                  ;	    DX = Date stamp of file
 15364                                  ;	    BX:DI = Size of file (32 bit)
 15365                                  ;	CARRY SET
 15366                                  ;	    AX is error code
 15367                                  ;		error_file_not_found
 15368                                  ;			Last element of path not found
 15369                                  ;		error_path_not_found
 15370                                  ;			Bad path (not in curr dir part if present)
 15371                                  ;		error_bad_curr_dir
 15372                                  ;			Bad path in current directory part of path
 15373                                  ; DS preserved, others destroyed
 15374                                  ;---------------------------------------------------------------------------
 15375                                  
 15376                                  GET_FILE_INFO:
 15377                                  
 15378                                  ;hkn; get_file_info is called from file.asm and fcbio.asm. DS has been set 
 15379                                  ;hkn; to DOSDATA at this point. So DOSassume is OK.
 15380                                  
 15381 000035EF E8DCE9                  	call	TestNet
 15382 000035F2 7306                    	JNC	short LOCAL_INFO
 15383                                  
 15384                                  ;IF NOT Installed
 15385                                  ;	transfer NET_GET_FILE_INFO
 15386                                  ;ELSE
 15387                                  ;	MOV	AX,(MultNET SHL 8) OR 15
 15388                                  ;	INT	2FH
 15389                                  ;	return
 15390                                  
 15391 000035F4 B80F11                  	mov     ax, 110Fh
 15392 000035F7 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - GET REMOTE FILE'S ATTRIBUTES
 15393                                  			; SS = DOS CS, SDA first filename pointer -> fully-qualified name of file
 15394                                  			; SDA CDS pointer -> current directory
 15395                                  			; Return: CF set on error, AX = file attributes
 15396 000035F9 C3                      	retn
 15397                                  ;ENDIF
 15398                                  
 15399                                  LOCAL_INFO:
 15400 000035FA E86FEA                  	call	EcritDisk
 15401 000035FD C606[F802]01            	MOV	byte [NoSetDir],1	; if we find a dir, don't change to it
 15402                                  	; MSDOS 6.0
 15403                                  	;call	Get_FAST_PATH
 15404                                  	; MSDOS 3.3
 15405 00003602 E83012                  	call	GETPATH
 15406                                  info_check:
 15407 00003605 7313                    	JNC	short info_check_dev
 15408                                  NO_PATH:
 15409 00003607 750C                    	JNZ	short bad_path1
 15410 00003609 08C9                    	OR	CL,CL
 15411 0000360B 7408                    	JZ	short bad_path1
 15412                                  info_no_file:
 15413 0000360D B80200                  	MOV	AX,error_file_not_found
 15414                                  BadRet:
 15415 00003610 F9                      	STC
 15416                                  JustRet:
 15417 00003611 E860EA                  	call	LcritDisk
 15418 00003614 C3                      	retn
 15419                                  
 15420                                  bad_path1:
 15421 00003615 B80300                  	MOV	AX,error_path_not_found
 15422 00003618 EBF6                    	jmp	short BadRet
 15423                                  
 15424                                  info_check_dev:
 15425 0000361A 08E4                    	OR	AH,AH
 15426 0000361C 78EF                    	JS	short info_no_file	; device
 15427                                  
 15428                                  	; MSDOS 6.0
 15429                                  ;SR;
 15430                                  ; If root dir then CurBuf == -1. Check for this case and return subdir attr
 15431                                  ;for a root dir
 15432                                  ;
 15433 0000361E 833E[7405]FF            	cmp	word [CURBUF],-1	;is it a root dir?
 15434 00003623 7507                    	jne	short not_root		;no, CurBuf ptr is valid
 15435                                  
 15436 00003625 30E4                    	xor	ah,ah
 15437 00003627 B010                    	mov	al,attr_directory
 15438 00003629 F8                      	clc
 15439 0000362A EBE5                    	jmp	short JustRet
 15440                                  
 15441                                  not_root:
 15442                                  	; MSDOS 3.3 (& MSDOS 6.0)
 15443 0000362C 1E                      	PUSH	DS
 15444 0000362D 8E1E[7605]              	MOV	DS,[CURBUF+2]
 15445 00003631 89DE                    	MOV	SI,BX
 15446 00003633 31DB                    	XOR	BX,BX			; Assume size=0 (dir)
 15447 00003635 89DF                    	MOV	DI,BX
 15448 00003637 8B4C16                  	MOV	CX,[SI+dir_entry.dir_time]
 15449 0000363A 8B5418                  	MOV	DX,[SI+dir_entry.dir_date]
 15450 0000363D 30E4                    	XOR	AH,AH
 15451 0000363F 8A440B                  	MOV	AL,[SI+dir_entry.dir_attr]
 15452 00003642 A810                    	TEST	AL,attr_directory
 15453 00003644 7506                    	JNZ	short NO_SIZE
 15454 00003646 8B7C1C                  	MOV	DI,[SI+dir_entry.dir_size_l]
 15455 00003649 8B5C1E                  	MOV	BX,[SI+dir_entry.dir_size_h]
 15456                                  NO_SIZE:
 15457 0000364C 1F                      	POP	DS
 15458 0000364D F8                      	CLC
 15459 0000364E EBC1                    	jmp	short JustRet
 15460                                  
 15461                                  ;Break	<SET_FILE_ATTRIBUTE -- Set File Attribute>
 15462                                  ;-------------------------------------------------------------------------------
 15463                                  ; Procedure Name : SET_FILE_ATTRIBUTE
 15464                                  ; Inputs:
 15465                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 15466                                  ;		terminated)
 15467                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 15468                                  ;		( = -1 if current dir not involved, else
 15469                                  ;		 Points to first char after last "/" of current dir part)
 15470                                  ;	[THISCDS] Points to CDS being used
 15471                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 15472                                  ;	[SATTRIB] is attribute of search (determines what files may be found)
 15473                                  ;	AX is new attributes to give to file
 15474                                  ; Function:
 15475                                  ;	Set File Attributes
 15476                                  ; Returns:
 15477                                  ;	CARRY CLEAR
 15478                                  ;	    No error
 15479                                  ;	CARRY SET
 15480                                  ;	    AX is error code
 15481                                  ;		error_file_not_found
 15482                                  ;			Last element of path not found
 15483                                  ;		error_path_not_found
 15484                                  ;			Bad path (not in curr dir part if present)
 15485                                  ;		error_bad_curr_dir
 15486                                  ;			Bad path in current directory part of path
 15487                                  ;		error_access_denied
 15488                                  ;			Attempt to set an attribute which cannot be set
 15489                                  ;			(attr_directory, attr_volume_ID)
 15490                                  ;		error_sharing_violation
 15491                                  ;			Sharing mode of file did not allow the change
 15492                                  ;			(this request requires exclusive write/read access)
 15493                                  ;			(INT 24H generated)
 15494                                  ; DS preserved, others destroyed
 15495                                  ;----------------------------------------------------------------------------
 15496                                  
 15497                                  SET_FILE_ATTRIBUTE:
 15498                                  
 15499                                  ;hkn; set_file_attr is called from file.asm. DS has been set 
 15500                                  ;hkn; to DOSDATA at this point. So DOSassume is OK.
 15501                                  
 15502 00003650 A9D8FF                  	TEST	AX,~attr_changeable ; 0FFD8h
 15503 00003653 7414                    	JZ	short set_look
 15504                                  _BAD_ACC:
 15505 00003655 C606[D102]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk
 15506 0000365A C606[D502]07            	MOV	byte [EXTERR_CLASS],errCLASS_Apperr
 15507 0000365F C606[D402]04            	MOV	byte [EXTERR_ACTION],errACT_Abort
 15508 00003664 B80500                  	MOV	AX,error_access_denied
 15509 00003667 F9                      	STC
 15510 00003668 C3                      	retn
 15511                                  
 15512                                  set_look:
 15513 00003669 E862E9                  	call	TestNet
 15514 0000366C 7308                    	JNC	short LOCAL_SET
 15515                                  
 15516                                  ;IF NOT Installed
 15517                                  ;	transfer NET_SEQ_SET_FILE_ATTRIBUTE
 15518                                  ;ELSE
 15519 0000366E 50                      	PUSH	AX
 15520                                  	
 15521                                  	;MOV	AX,(MultNET SHL 8) OR 14
 15522                                  	;INT	2FH
 15523                                  
 15524 0000366F B80E11                  	mov     ax, 110Eh
 15525 00003672 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - SET REMOTE FILE'S ATTRIBUTES
 15526                                  			; SS = DOS CS, SDA first filename pointer -> fully-qualified name of file
 15527                                  			; SDA CDS pointer -> current directory
 15528                                  			; STACK: WORD new file attributes
 15529                                  			; Return: CF set on error
 15530                                  
 15531 00003674 5B                      	POP	BX			; clean stack
 15532 00003675 C3                      	retn
 15533                                  ;ENDIF
 15534                                  
 15535                                  LOCAL_SET:
 15536 00003676 E8F3E9                  	call	EcritDisk
 15537 00003679 50                      	PUSH	AX			; Save new attributes
 15538 0000367A C606[F802]01            	MOV	byte [NoSetDir],1	; if we find a dir, don't change to it
 15539 0000367F E8B311                  	call	GETPATH 		; get path through fastopen if there	 ;AC000;
 15540 00003682 7303                    	JNC	short set_check_device
 15541 00003684 5B                      	POP	BX			; Clean stack (don't zap AX)
 15542 00003685 EB80                    	JMP	short NO_PATH
 15543                                  
 15544                                  set_check_device:
 15545 00003687 08E4                    	OR	AH,AH
 15546 00003689 7906                    	JNS	short set_check_share
 15547 0000368B 58                      	POP	AX
 15548 0000368C E8E5E9                  	call	LcritDisk
 15549 0000368F EBC4                    	JMP	short _BAD_ACC 		; device
 15550                                  
 15551                                  set_check_share:
 15552 00003691 58                      	POP	AX			; Get new attributes
 15553                                  
 15554                                  	; MSDOS 6.0
 15555 00003692 833E[7405]FF            	cmp	word [CURBUF], -1	; M025: Q: is this the root dir
 15556 00003697 740A                    	je	short cannot_set_root	; M025: Y: return error
 15557                                  
 15558                                  	; MSDOS 3.3 (& MSDOS 6.0)
 15559 00003699 E8F6FC                  	call	REN_DEL_Check
 15560 0000369C 730B                    	JNC	short set_do
 15561 0000369E B82000                  	MOV	AX,error_sharing_violation
 15562 000036A1 EB30                    	jmp	short OK_BYE
 15563                                  
 15564                                  	; MSDOS 6.0
 15565                                  cannot_set_root:			; M025:
 15566 000036A3 B80500                  	mov	ax, error_access_denied	; M025: return error is attempting
 15567 000036A6 F9                      	stc				; M025: to set attr. of root
 15568 000036A7 EB2A                    	jmp	short OK_BYE		; M025:
 15569                                  
 15570                                  set_do:
 15571                                  	; MSDOS 3.3 (& MSDOS 6.0)
 15572 000036A9 C43E[7405]              	LES	DI,[CURBUF]
 15573 000036AD 2680670BD8              	AND	BYTE [ES:BX+dir_entry.dir_attr],~attr_changeable ; 0D8h
 15574 000036B2 2608470B                	OR	BYTE [ES:BX+dir_entry.dir_attr],AL
 15575                                  
 15576                                  	; MSDOS 6.0
 15577                                  	;TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 15578                                  	;				;LB. if already dirty		  ;AN000;
 15579                                  	;JNZ	short yesdirty3		;LB.  don't increment dirty count ;AN000;
 15580                                  	;call	INC_DIRTY_COUNT 	;LB.				  ;AN000;
 15581                                  	
 15582 000036B6 26804D0540              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 15583                                  ;yesdirty3:
 15584 000036BB A0[1105]                	MOV	AL,[THISDRV]
 15585                                  ;;;; 10/1/86 F.C update fastopen cache
 15586 000036BE 52                      	PUSH	DX
 15587 000036BF 57                      	PUSH	DI
 15588 000036C0 B400                    	MOV	AH,0		  ; dir entry update
 15589 000036C2 88C2                    	MOV	DL,AL		  ; drive number A=0,B=1,,
 15590 000036C4 89DF                    	MOV	DI,BX		  ; ES:DI -> dir entry
 15591 000036C6 E846FD                  	call	FastOpen_Update
 15592 000036C9 5F                      	POP	DI
 15593 000036CA 5A                      	POP	DX
 15594                                  ;;;; 9/11/86 F.C update fastopen cache
 15595 000036CB E85F28                  	call	FLUSHBUF
 15596 000036CE 7303                    	JNC	short OK_BYE
 15597 000036D0 B80200                  	MOV	AX,error_file_not_found
 15598                                  OK_BYE:
 15599 000036D3 E89EE9                  	call	LcritDisk
 15600 000036D6 C3                      	retn
 15601                                  
 15602                                  	; MSDOS 6.0
 15603                                  ;GET_FAST_PATH:
 15604                                  ;hkn; use SS override for FastOpenFlg
 15605                                  	;OR	byte [FastOpenFlg],FastOpen_Set
 15606                                  	;				;FO. trigger fastopen	;AN000;
 15607                                  	;call	GETPATH
 15608                                  	;PUSHF			 	;FO.			;AN000;
 15609                                  	;AND	byte [FastOpenFlg],Fast_yes 
 15610                                  	;				;FO. clear all fastopen flags ;AN000;
 15611                                  	;POPF				;FO.			;AN000;
 15612                                  	;retn
 15613                                  
 15614                                  ;============================================================================
 15615                                  ; DUP.ASM, MSDOS 6.0, 1991
 15616                                  ;============================================================================
 15617                                  ; 08/08/2018 - Retro DOS v3.0
 15618                                  
 15619                                  ;**	Low level DUP routine for use by EXEC when creating a new process. Exports
 15620                                  ;	  the DUP to the server machine and increments the SFT ref count
 15621                                  ;
 15622                                  ;	DOS_DUP
 15623                                  ;
 15624                                  ;	Modification history:
 15625                                  ;
 15626                                  ;	  Created: ARR 30 March 1983
 15627                                  
 15628                                  ;BREAK <DOS_DUP -- DUP SFT across network>
 15629                                  ;---------------------------------------------------------------------------
 15630                                  ; Procedure Name : DOS_DUP
 15631                                  ;
 15632                                  ; Inputs:
 15633                                  ;	[THISSFT] set to the SFT for the file being DUPed
 15634                                  ;		(a non net SFT is OK, in this case the ref
 15635                                  ;		 count is simply incremented)
 15636                                  ; Function:
 15637                                  ;	Signal to the devices that a logical open is occurring
 15638                                  ; Returns:
 15639                                  ;	ES:DI point to SFT
 15640                                  ;    Carry clear
 15641                                  ;	SFT ref_count is incremented
 15642                                  ; Registers modified: None.
 15643                                  ; NOTE:
 15644                                  ;	This routine is called from $CREATE_PROCESS_DATA_BLOCK at DOSINIT
 15645                                  ;	time with SS NOT DOSGROUP. There will be no Network handles at
 15646                                  ;	that time.
 15647                                  ;---------------------------------------------------------------------------
 15648                                  
 15649                                  DOS_DUP:
 15650 000036D7 2EC43E[3605]            	LES	DI,[CS:THISSFT]
 15651                                  
 15652                                  	;Entry	Dos_Dup_Direct
 15653                                  DOS_Dup_Direct:
 15654 000036DC E804E9                  	call	IsSFTNet
 15655 000036DF 7503                    	JNZ	short DO_INC
 15656 000036E1 E89117                  	call	DEV_OPEN_SFT
 15657                                  DO_INC:
 15658                                  
 15659                                  	;INC	word [ES:DI+SF_ENTRY.sf_ref_count]
 15660 000036E4 26FF05                  	inc	word [ES:DI]		; Clears carry (if this ever wraps
 15661                                  					;   we're in big trouble anyway)
 15662 000036E7 C3                      	retn
 15663                                  
 15664                                  ;============================================================================
 15665                                  ; CREATE.ASM, MSDOS 6.0, 1991
 15666                                  ;============================================================================
 15667                                  ; 08/08/2018 - Retro DOS v3.0
 15668                                  
 15669                                  ;TITLE	DOS_CREATE/DOS_CREATE_NEW - Internal CREATE calls for MS-DOS
 15670                                  ;NAME	DOS_CREATE
 15671                                  
 15672                                  ;**	Internal Create and Create new to create a local or NET file and SFT.
 15673                                  ;
 15674                                  ;	DOS_CREATE
 15675                                  ;	DOS_CREATE_NEW
 15676                                  ;	SET_MKND_ERR
 15677                                  ;	SET_Media_ID
 15678                                  ;	SET_EXT_Mode
 15679                                  ;
 15680                                  ;	Revision history:
 15681                                  ;
 15682                                  ;	    A000 version 4.00	  Jan. 1988
 15683                                  ;	    A001  D490 -- Change IOCTL subfunctios from 63h,43h to 66h, 46h
 15684                                  
 15685                                  ;Installed = TRUE
 15686                                  
 15687                                  ;	i_need	THISSFT,DWORD
 15688                                  ;	i_need	THISCDS,DWORD
 15689                                  ;	I_need	EXTERR,WORD
 15690                                  ;	I_Need	ExtErr_locus,BYTE
 15691                                  ;	I_need	JShare,DWORD
 15692                                  ;	I_need	VOLCHNG_FLAG,BYTE
 15693                                  ;	I_need	SATTRIB,BYTE
 15694                                  ;	I_need	CALLVIDM,DWORD
 15695                                  ;	I_need	EXTOPEN_ON,BYTE 		  ;AN000; extended open
 15696                                  ;	I_need	NAME1,BYTE			  ;AN000;
 15697                                  ;	I_need	NO_NAME_ID,BYTE 		  ;AN000;
 15698                                  ;	I_need	Packet_Temp,WORD		  ;AN000;
 15699                                  ;	I_need	DOS34_FLAG,WORD 		  ;AN000;
 15700                                  ;	I_need	SAVE_BX,WORD			  ;AN000;
 15701                                  
 15702                                  ;***	DOS_CREATE - Create a File
 15703                                  ;----------------------------------------------------------------------------
 15704                                  ;	DOS_Create is called to create the specified file, truncating
 15705                                  ;	the old one if it exists.
 15706                                  ;
 15707                                  ;
 15708                                  ;	ENTRY	AX is Attribute to create
 15709                                  ;		(ds) = DOSDATA
 15710                                  ;		[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 15711                                  ;			terminated)
 15712                                  ;		[CURR_DIR_END] Points to end of Current dir part of string
 15713                                  ;			( = -1 if current dir not involved, else
 15714                                  ;			 Points to first char after last "/" of current dir part)
 15715                                  ;		[THISCDS] Points to CDS being used
 15716                                  ;			(Low word = -1 if NUL CDS (Net direct request))
 15717                                  ;		[THISSFT] Points to SFT to fill in if file created
 15718                                  ;			(sf_mode field set so that FCB may be detected)
 15719                                  ;		[SATTRIB] Is attribute of search, determines what files can be found
 15720                                  ;
 15721                                  ;	EXIT	sf_ref_count is NOT altered
 15722                                  ;		CARRY CLEAR
 15723                                  ;		    THISSFT filled in.
 15724                                  ;			sf_mode = unchanged for FCB, sharing_compat + open_for_both
 15725                                  ;		CARRY SET
 15726                                  ;		    AX is error code
 15727                                  ;			error_path_not_found
 15728                                  ;				Bad path (not in curr dir part if present)
 15729                                  ;			error_bad_curr_dir
 15730                                  ;				Bad path in current directory part of path
 15731                                  ;			error_access_denied
 15732                                  ;				Attempt to re-create read only file , or
 15733                                  ;				create a second volume id or create a dir
 15734                                  ;			error_sharing_violation
 15735                                  ;				The sharing mode was correct but not allowed
 15736                                  ;				generates an INT 24
 15737                                  ;	USES	all but DS
 15738                                  ;----------------------------------------------------------------------------
 15739                                  
 15740                                  DOS_CREATE:
 15741                                  
 15742                                  ;hkn; dispatched to from file.asm and fcbio.asm. DS set up to DOSDATA at 
 15743                                  ;hkn; this point.
 15744                                  
 15745 000036E8 30E4                    	XOR	AH,AH		; Truncate is OK
 15746                                  
 15747                                  ;	Enter here from Dos_Create_New
 15748                                  ;
 15749                                  ;	(ah) = 0 iff truncate OK
 15750                                  
 15751                                  Create_inter:
 15752 000036EA A8C0                    	TEST	AL,~(attr_all+attr_ignore+attr_volume_id) ; 80h
 15753                                  				; Mask out any meaningless bits
 15754 000036EC 750C                    	JNZ	short AttErr
 15755 000036EE A808                    	TEST	AL,attr_volume_id
 15756 000036F0 7402                    	JZ	short NoReset
 15757                                  	;
 15758                                  	; MSDOS 6.0
 15759                                  	;OR	[DOS34_FLAG],DBCS_VOLID      ;AN000;FOR dbcs volid
 15760                                  	;
 15761 000036F2 B008                    	MOV	AL,attr_volume_id
 15762                                  NoReset:
 15763 000036F4 0C20                    	OR	AL,attr_archive ; File changed
 15764 000036F6 A850                    	TEST	AL,attr_directory+attr_device
 15765 000036F8 740A                    	JZ	short ATT_OK
 15766                                  AttErr:
 15767 000036FA B80500                  	MOV	AX,5		; Attribute problem
 15768 000036FD C606[D102]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk
 15769 00003702 EB3D                    	JMP	SHORT SET_MKND_ERR ; Gotta use MKDIR to make dirs, NEVER allow
 15770                                  				   ;	attr_device to be set.
 15771                                  ATT_OK:
 15772 00003704 C43E[3605]              	LES	DI,[THISSFT]
 15773 00003708 06                      	PUSH	ES
 15774 00003709 C436[3A05]              	LES	SI,[THISCDS]
 15775 0000370D 83FEFF                  	CMP	SI,-1
 15776 00003710 7509                    	JNE	short TEST_RE_NET
 15777                                  
 15778                                  ;	No CDS, it must be redirected.
 15779                                  
 15780 00003712 07                      	POP	ES
 15781                                  
 15782                                  	; MSDOS 6.0
 15783                                  ;Extended open hooks
 15784                                  	;TEST	byte [EXTOPEN_ON],ext_open_on ;AN000;EO. from extended open
 15785                                  	;JZ	short NOEXTOP 		    ;AN000;EO. no, do normal
 15786                                  ;IFS_extopen:				    ;AN000;EO.
 15787                                  	;PUSH	AX			    ;AN000;EO. pass create attr
 15788                                  	;;MOV	AX,(MultNET SHL 8) OR 46    ;AN000;EO. issue extended open verb
 15789                                  	;mov	ax,112Eh
 15790                                  	;INT	2FH			    ;AN000;EO.
 15791                                  	;POP	BX			    ;AN000;EO. trash bx
 15792                                  	;MOV	byte [EXTOPEN_ON],0	    ;AN000;EO.
 15793                                  	;retn				    ;AN000;EO.
 15794                                  ;NOEXTOP:				    ;AN000;
 15795                                  ;Extended open hooks
 15796                                  
 15797                                  ;IF NOT Installed
 15798                                  ;	transfer NET_SEQ_CREATE
 15799                                  ;ELSE
 15800 00003713 50                      	PUSH	AX
 15801                                  
 15802                                  	;MOV	AX,(MultNET SHL 8) OR 24
 15803                                  	;INT	2FH
 15804                                  
 15805 00003714 B81811                  	mov     ax,1118h
 15806 00003717 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - CREATE/TRUNCATE FILE
 15807                                  			; ES:DI -> uninitialized SFT, SS = DOS CS
 15808                                  			; SDA first filename pointer -> fully-qualified name of file
 15809                                  			; STACK: WORD file creation mode???
 15810                                  
 15811 00003719 5B                      	POP	BX			; BX is trashed anyway
 15812 0000371A C3                      	retn
 15813                                  ;ENDIF
 15814                                  
 15815                                  ;	We have a CDS. See if it's network
 15816                                  
 15817                                  TEST_RE_NET:
 15818 0000371B 26F744430080            	TEST	word [ES:SI+curdir.flags],curdir_isnet
 15819 00003721 07                      	POP	ES
 15820 00003722 7408                    	JZ	short LOCAL_CREATE
 15821                                  
 15822                                  	; MSDOS 6.0
 15823                                  	;CALL	Set_EXT_mode		    ;AN000;EO.
 15824                                  	;JC	SHORT dochk		    ;AN000;EO.
 15825                                  	;OR	word [ES:DI+SF_ENTRY.sf_mode],SHARING_COMPAT+open_for_both ;IFS.
 15826                                  
 15827                                  ;Extended open hooks
 15828                                  ;dochk:
 15829                                  	;TEST	byte [EXTOPEN_ON],ext_open_on ;AN000;EO. from extended open
 15830                                  	;JNZ	short IFS_extopen	    ;AN000;EO. yes, issue extended open
 15831                                  ;Extended open hooks
 15832                                  
 15833                                  ;IF NOT Installed
 15834                                  ;	transfer NET_CREATE
 15835                                  ;ELSE
 15836 00003724 50                      	PUSH	AX
 15837                                  	
 15838                                  	;MOV	AX,(MultNET SHL 8) OR 23
 15839                                  	;INT	2FH
 15840                                  	
 15841 00003725 B81711                  	mov     ax, 1117h
 15842 00003728 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - CREATE/TRUNCATE REMOTE FILE
 15843                                  			; ES:DI -> uninitialized SFT, SS = DOS CS
 15844                                  			; SDA first filename pointer -> fully-qualified name of file to open
 15845                                  			; SDA CDS pointer -> current directory
 15846                                  			; Return: CF set on error
 15847                                  
 15848 0000372A 5B                      	POP	BX			; BX is trashed anyway
 15849                                  ;nomore:
 15850 0000372B C3                      	retn
 15851                                  ;ENDIF
 15852                                  
 15853                                  
 15854                                  ;**	It's a local create.  We have a local CDS for it.
 15855                                  
 15856                                  LOCAL_CREATE:
 15857                                  	; MSDOS 6.0
 15858                                  	;CALL	Set_EXT_mode	;AN000;EO. set mode if from extended open
 15859                                  	;JC	short setdone	;AN000;EO.
 15860                                  	
 15861                                  	; MSDOS 3.3 (& MSDOS 6.0)
 15862 0000372C 26834D0202              	OR	word [ES:DI+SF_ENTRY.sf_mode],SHARING_COMPAT+open_for_both
 15863                                  ;setdone:
 15864 00003731 E838E9                  	call	EcritDisk
 15865 00003734 E8F518                  	call	MakeNode
 15866 00003737 730E                    	JNC	short Create_ok
 15867 00003739 C606[070A]FF            	mov	byte [VOLCHNG_FLAG],-1	; indicate no change in volume label
 15868 0000373E E833E9                  	call	LcritDisk
 15869                                  
 15870                                  	;entry	SET_MKND_ERR
 15871                                  SET_MKND_ERR:
 15872                                  
 15873                                  ;	Looks up MakeNode errors and converts them. AL is MakeNode
 15874                                  ;	error, SI is GETPATH bad spot return if path_not_found error.
 15875                                  
 15876                                  ;hkn; CRTERRTAB is in TABLE seg (DOSCODE)
 15877 00003741 BB[FD12]                	MOV     BX,CRTERRTAB
 15878 00003744 D7                      	XLAT
 15879                                  	;XLAT	byte [CS:BX]
 15880                                  CreatBadRet:
 15881 00003745 F9                      	STC
 15882 00003746 C3                      	retn
 15883                                  
 15884                                  ; We have just created a new file. This results in the truncation of old
 15885                                  ; files. We must inform the sharer to slash all the open SFT's for this
 15886                                  ; file to the current size.
 15887                                  
 15888                                  ; If we created a volume id on the diskette, set the VOLCHNG_FLAG to logical
 15889                                  ; drive number to force a Build BPB after Media Check.
 15890                                  
 15891                                  ;;; FASTOPEN 8/29/86
 15892                                  Create_ok:
 15893 00003747 E8B1FC                  	call	FastOpen_Delete
 15894                                  ;;; FASTOPEN 8/29/86
 15895 0000374A A0[0805]                	mov	al,[SATTRIB]
 15896 0000374D A808                    	test	al,attr_volume_id
 15897 0000374F 7417                    	jz	short NoVolLabel
 15898 00003751 C43E[3A05]              	LES	DI,[THISCDS]
 15899                                  	;mov	ah,[ES:DI+curdir.text]	; get drive letter
 15900 00003755 268A25                  	mov	ah,[ES:DI] ; 09/08/2018
 15901 00003758 80EC41                  	sub	ah,'A'                  ; convert to drive letter
 15902 0000375B 8826[070A]              	mov	[VOLCHNG_FLAG],ah	;Set flag to indicate volid change
 15903                                  	
 15904                                  	; MSDOS 6.0
 15905                                  	;MOV	BH,1			;AN000;>32mb set volume id to boot record
 15906                                  	;CALL	Set_Media_ID		;AN000;>32mb
 15907                                  	
 15908 0000375F E80AE9                  	call	EcritDisk
 15909 00003762 E85624                  	call	FATREAD_CDS		; force a media check
 15910 00003765 E80CE9                  	call	LcritDisk
 15911                                  
 15912                                  NoVolLabel:
 15913 00003768 B80200                  	MOV	ax,2
 15914 0000376B C43E[3605]              	LES	DI,[THISSFT]
 15915                                  ;if installed
 15916                                  	;call	JShare + 14 * 4
 15917 0000376F FF1E[9400]              	call	far [JShare+(14*4)] ; 14 = ShSU
 15918                                  ;else
 15919                                  ;	Call	ShSU
 15920                                  ;endif
 15921 00003773 E8FEE8                  	call	LcritDisk
 15922 00003776 E9D800                  	jmp	SET_SFT_MODE
 15923                                  
 15924                                  ;---------------------------------------------------------------------------
 15925                                  ; Procedure Name : Dos_Create_New
 15926                                  ;
 15927                                  ; Inputs:
 15928                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 15929                                  ;		terminated)
 15930                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 15931                                  ;		( = -1 if current dir not involved, else
 15932                                  ;		 Points to first char after last "/" of current dir part)
 15933                                  ;	[THISCDS] Points to CDS being used
 15934                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 15935                                  ;	[THISSFT] Points to SFT to fill in if file created
 15936                                  ;		(sf_mode field set so that FCB may be detected)
 15937                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 15938                                  ;	AX is Attribute to create
 15939                                  ; Function:
 15940                                  ;	Try to create the specified file truncating an old one that exists
 15941                                  ; Outputs:
 15942                                  ;	sf_ref_count is NOT altered
 15943                                  ;	CARRY CLEAR
 15944                                  ;	    THISSFT filled in.
 15945                                  ;		sf_mode = sharing_compat + open_for_both for Non-FCB SFT
 15946                                  ;	CARRY SET
 15947                                  ;	    AX is error code
 15948                                  ;		error_path_not_found
 15949                                  ;			Bad path (not in curr dir part if present)
 15950                                  ;		error_bad_curr_dir
 15951                                  ;			Bad path in current directory part of path
 15952                                  ;		error_access_denied
 15953                                  ;			Create a second volume id or create a dir
 15954                                  ;		error_file_exists
 15955                                  ;			Already a file by this name
 15956                                  ; DS preserved, others destroyed
 15957                                  ;---------------------------------------------------------------------------
 15958                                  
 15959                                  DOS_Create_New:
 15960 00003779 B401                    	MOV	AH,1		; Truncate is NOT OK
 15961 0000377B E96CFF                  	JMP	Create_inter
 15962                                  
 15963                                  ; MSDOS 6.0
 15964                                  ;---------------------------------------------------------------------------
 15965                                  ; Procedure Name : Set_Media_ID
 15966                                  ;
 15967                                  ; Inputs:
 15968                                  ;	NAME1= Volume ID
 15969                                  ;	BH= 0, delete volume id
 15970                                  ;	    1, set new volume id
 15971                                  ;	DS= DOSGROUP
 15972                                  ; Function:
 15973                                  ;	Set Volume ID to DOS 4.00 Boot record.
 15974                                  ; Outputs:
 15975                                  ;	CARRY CLEAR
 15976                                  ;	    volume id set
 15977                                  ;	CARRY SET
 15978                                  ;	    AX is error code
 15979                                  ;---------------------------------------------------------------------------
 15980                                  ;
 15981                                  ;procedure   Set_Media_ID,NEAR
 15982                                  ;	DOSAssume   <DS>,"SetMedID"
 15983                                  ;
 15984                                  ;	PUSH	AX		;AN000;;>32mb
 15985                                  ;	PUSH	ES		;AN000;;>32mb
 15986                                  ;	PUSH	DI		;AN000;;>32mb
 15987                                  ;
 15988                                  ;	INC	AH		;AN000;;>32mb  bl=drive #
 15989                                  ;	MOV	BL,AH		;AN000;;>32mb  bl=drive # (A=1,B=2,,,)
 15990                                  ;	MOV	AL,0DH		;AN000;;>32mb  generic IOCTL
 15991                                  ;	MOV	CX,0866H	;AN001;;>32mb  get media id
 15992                                  ;
 15993                                  ;hkn; PACKET_TEMP is in DOSDATA
 15994                                  ;	MOV	DX,OFFSET DOSDATA:PACKET_TEMP	;AN000;>32mb
 15995                                  ;
 15996                                  ;	PUSH	BX		;AN000;;>32mb
 15997                                  ;	PUSH	DX		;AN000;;>32mb
 15998                                  ;	XOR	BH,BH		;AN000;;>32mb
 15999                                  ;
 16000                                  ;	invoke	$IOCTL		;AN000;;>32mb
 16001                                  ;	POP	DX		;AN000;;>32mb
 16002                                  ;	POP	BX		;AN000;;>32mb
 16003                                  ;	JC	geterr		;AN000;;>32mb
 16004                                  ;
 16005                                  ;	OR	BH,BH		;AN000;;>32mb delete volume id
 16006                                  ;	JZ	NoName		;AN000;>32mb yes
 16007                                  ;
 16008                                  ;hkn; NAME1 is in DOSDATA
 16009                                  ;	MOV	SI,OFFSET DOSDATA:NAME1   ;AN000;>32mb
 16010                                  ;
 16011                                  ;	JMP	SHORT doset	;AN000;>32mb yes
 16012                                  ;Noname: 			;AN000;
 16013                                  ;
 16014                                  ;hkn; NO_NAME_ID is in DOSDATA
 16015                                  ;	MOV	SI,OFFSET DOSDATA:NO_NAME_ID  ;AN000;>32mb
 16016                                  ;
 16017                                  ;doset:					       ;AN000;
 16018                                  ;	MOV	DI,DX		;AN000;;>32mb
 16019                                  ;	ADD	DI,MEDIA_LABEL	;AN000;;>32mb
 16020                                  ;
 16021                                  ;hkn; ES & DS must point to SS
 16022                                  ;hkn;	PUSH	CS		;AN000;;>32mb  move new volume id to packet
 16023                                  ;	PUSH	SS		;AN000;;>32mb  move new volume id to packet
 16024                                  ;
 16025                                  ;	POP	DS		;AN000;;>32mb
 16026                                  ;
 16027                                  ;hkn;	PUSH	CS		;AN000;;>32mb
 16028                                  ;	PUSH	SS		;AN000;;>32mb
 16029                                  ;
 16030                                  ;	POP	ES		;AN000;;>32mb
 16031                                  ;	MOV	CX,11		;AN000;;>32mb
 16032                                  ;	REP	MOVSB		;AN000;;>32mb
 16033                                  ;	MOV	CX,0846H	;AN001;;>32mb
 16034                                  ;	MOV	AL,0DH		;AN000;;>32mb
 16035                                  ;	XOR	BH,BH		;AN000;;>32mb
 16036                                  ;	invoke	$IOCTL		;AN000;;>32mb  set volume id
 16037                                  ;geterr: 			;AN000;
 16038                                  ;
 16039                                  ;hkn;	PUSH	CS		;AN000;>32mb
 16040                                  ;	PUSH	SS		;AN000;>32mb
 16041                                  ;
 16042                                  ;	POP	DS		;AN000;>32mb   ds= dosgroup
 16043                                  ;
 16044                                  ;	POP	DI		;AN000;;>32mb
 16045                                  ;	POP	ES		;AN000;;>32mb
 16046                                  ;	POP	AX		;AN000;;>32mb
 16047                                  ;	return			;AN000;>32mb
 16048                                  ;
 16049                                  ;EndProc Set_Media_ID		;AN000;
 16050                                  
 16051                                  ; MSDOS 6.0
 16052                                  ;---------------------------------------------------------------------------
 16053                                  ; Procedure Name : Set_EXT_mode
 16054                                  ;
 16055                                  ; Inputs:
 16056                                  ;	[EXTOPEN_ON]= flag for extended open
 16057                                  ;	SAVE_BX= mode specified in Extended Open
 16058                                  ; Function:
 16059                                  ;	Set mode in ThisSFT
 16060                                  ; Outputs:
 16061                                  ;	carry set,mode is set if from Extended Open
 16062                                  ;	carry clear, mode not set yet
 16063                                  ;---------------------------------------------------------------------------
 16064                                  ;
 16065                                  ;procedure   Set_EXT_mode,NEAR
 16066                                  ;
 16067                                  ;hkn; SS override
 16068                                  ;	TEST	[EXTOPEN_ON],ext_open_on    ;AN000;EO. from extended open
 16069                                  ;	JZ	NOTEX			    ;AN000;EO. no, do normal
 16070                                  ;	PUSH	AX			    ;AN000;EO.
 16071                                  ;
 16072                                  ;hkn; SS override
 16073                                  ;	MOV	AX,[SAVE_BX]		    ;AN000;EO.
 16074                                  ;	OR	ES:[DI.sf_mode],AX	    ;AN000;EO.
 16075                                  ;	POP	AX			    ;AN000;EO.
 16076                                  ;	STC				    ;AN000;EO.
 16077                                  ;NOTEX:					    ;AN000;
 16078                                  ;	return				    ;AN000;EO.
 16079                                  ;
 16080                                  ;EndProc Set_EXT_mode			    ;AN000;
 16081                                  
 16082                                  ;============================================================================
 16083                                  ; OPEN.ASM, MSDOS 6.0, 1991
 16084                                  ;============================================================================
 16085                                  ; 08/08/2018 - Retro DOS v3.0
 16086                                  
 16087                                  ;	TITLE	DOS_OPEN - Internal OPEN call for MS-DOS
 16088                                  ;	NAME	DOS_OPEN
 16089                                  
 16090                                  ;**	OPEN.ASM - File Open
 16091                                  ;----------------------------------------------------------------------------
 16092                                  ;	Low level routines for openning a file from a file spec.
 16093                                  ;	Also misc routines for sharing errors
 16094                                  ;
 16095                                  ;	DOS_Open
 16096                                  ;	Check_Access_AX
 16097                                  ;	SHARE_ERROR
 16098                                  ;	SET_SFT_MODE
 16099                                  ;	Code_Page_Mismatched_Error		   ; DOS 4.00
 16100                                  ;
 16101                                  ;	Revision history:
 16102                                  ;
 16103                                  ;	    Created: ARR 30 March 1983
 16104                                  ;	    A000	version 4.00   Jan. 1988
 16105                                  ;
 16106                                  ;	M034 - The value in save_bx must be pushed on to the stack for
 16107                                  ; 	       remote extended opens and not save_cx.
 16108                                  ;
 16109                                  ;	M035 - if open made from exec then we must set the appropriate bits
 16110                                  ;	       on the stack before calling off to the redir.
 16111                                  ;	M042 - Bit 11 of DOS34_FLAG set indicates that the redir knows how 
 16112                                  ;	       to handle open from exec. In this case set the appropriate bit
 16113                                  ;	       else do not.
 16114                                  ;----------------------------------------------------------------------------	
 16115                                  
 16116                                  ;Installed = TRUE
 16117                                  
 16118                                  ;	i_need	NoSetDir,BYTE
 16119                                  ;	i_need	THISSFT,DWORD
 16120                                  ;	i_need	THISCDS,DWORD
 16121                                  ;	i_need	CURBUF,DWORD
 16122                                  ;	i_need	CurrentPDB,WORD
 16123                                  ;	i_need	CURR_DIR_END,WORD
 16124                                  ;	I_need	RetryCount,WORD
 16125                                  ;	I_need	Open_Access,BYTE
 16126                                  ;	I_need	fSharing,BYTE
 16127                                  ;	i_need	JShare,DWORD
 16128                                  ;	I_need	FastOpenFlg,byte
 16129                                  ;	I_need	EXTOPEN_ON,BYTE 		  ;AN000;; DOS 4.00
 16130                                  ;	I_need	ALLOWED,BYTE			  ;AN000;; DOS 4.00
 16131                                  ;	I_need	EXTERR,WORD			  ;AN000;; DOS 4.00
 16132                                  ;	I_need	EXTERR_LOCUS,BYTE		  ;AN000;; DOS 4.00
 16133                                  ;	I_need	EXTERR_ACTION,BYTE		  ;AN000;; DOS 4.00
 16134                                  ;	I_need	EXTERR_CLASS,BYTE		  ;AN000;; DOS 4.00
 16135                                  ;	I_need	CPSWFLAG,BYTE			  ;AN000;; DOS 4.00
 16136                                  ;	I_need	EXITHOLD,DWORD			  ;AN000;; DOS 4.00
 16137                                  ;	I_need	THISDPB,DWORD			  ;AN000;; DOS 4.00
 16138                                  ;	I_need	SAVE_CX,WORD			  ;AN000;; DOS 4.00
 16139                                  ;	I_need	SAVE_BX,WORD			  ;M034
 16140                                  ;
 16141                                  ;	I_need	DOS_FLAG,BYTE
 16142                                  ;	I_need	DOS34_FLAG,WORD			  ;M042
 16143                                  
 16144                                  ;Break	<DOS_Open - internal file access>
 16145                                  ;---------------------------------------------------------------------------
 16146                                  ; Procedure Name : DOS_Open
 16147                                  ;
 16148                                  ; Inputs:
 16149                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 16150                                  ;		terminated)
 16151                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 16152                                  ;		( = -1 if current dir not involved, else
 16153                                  ;		 Points to first char after last "/" of current dir part)
 16154                                  ;	[THISCDS] Points to CDS being used
 16155                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 16156                                  ;	[THISSFT] Points to SFT to fill in if file found
 16157                                  ;		(sf_mode field set so that FCB may be detected)
 16158                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 16159                                  ;	AX is Access and Sharing mode
 16160                                  ;	  High NIBBLE of AL (Sharing Mode)
 16161                                  ;		sharing_compat	   file is opened in compatibility mode
 16162                                  ;		sharing_deny_none  file is opened Multi reader, Multi writer
 16163                                  ;		sharing_deny_read  file is opened Only reader, Multi writer
 16164                                  ;		sharing_deny_write file is opened Multi reader, Only writer
 16165                                  ;		sharing_deny_both  file is opened Only reader, Only writer
 16166                                  ;	  Low NIBBLE of AL (Access Mode)
 16167                                  ;		open_for_read	file is opened for reading
 16168                                  ;		open_for_write	file is opened for writing
 16169                                  ;		open_for_both	file is opened for both reading and writing.
 16170                                  ;
 16171                                  ;	  For FCB SFTs AL should = sharing_compat + open_for_both
 16172                                  ;		(not checked)
 16173                                  ; Function:
 16174                                  ;	Try to open the specified file
 16175                                  ; Outputs:
 16176                                  ;	sf_ref_count is NOT altered
 16177                                  ;	CARRY CLEAR
 16178                                  ;	    THISSFT filled in.
 16179                                  ;	CARRY SET
 16180                                  ;	    AX is error code
 16181                                  ;		error_file_not_found
 16182                                  ;			Last element of path not found
 16183                                  ;		error_path_not_found
 16184                                  ;			Bad path (not in curr dir part if present)
 16185                                  ;		error_bad_curr_dir
 16186                                  ;			Bad path in current directory part of path
 16187                                  ;		error_invalid_access
 16188                                  ;			Bad sharing mode or bad access mode or bad combination
 16189                                  ;		error_access_denied
 16190                                  ;			Attempt to open read only file for writting, or
 16191                                  ;			open a directory
 16192                                  ;		error_sharing_violation
 16193                                  ;			The sharing mode was correct but not allowed
 16194                                  ;			generates an INT 24 on compatibility mode SFTs
 16195                                  ; DS preserved, others destroyed
 16196                                  ;----------------------------------------------------------------------------
 16197                                  
 16198                                  DOS_OPEN:
 16199                                  	; DS has been set up to DOSDATA in file.asm and fcbio2.asm. 
 16200                                  
 16201 0000377E C606[F802]00            	MOV	byte [NoSetDir],0
 16202 00003783 E80001                  	CALL	Check_Access_AX
 16203 00003786 721C                    	JC	short do_ret_label		    ; retc
 16204                                  
 16205 00003788 C43E[3605]              	LES	DI,[THISSFT]
 16206 0000378C 30E4                    	XOR	AH,AH
 16207                                  
 16208                                  	; sleaze! move only access/sharing mode in. Leave sf_isFCB unchanged
 16209                                  
 16210 0000378E 26884502                	MOV	[ES:DI+SF_ENTRY.sf_mode],AL ; For moment do this on FCBs too
 16211 00003792 06                      	PUSH	ES
 16212 00003793 C436[3A05]              	LES	SI,[THISCDS]
 16213                                  	; 18/08/2018
 16214 00003797 83FEFF                  	CMP	SI,-1
 16215 0000379A 7509                    	JNZ	short TEST_RE_NET1
 16216 0000379C 07                      	POP	ES
 16217                                  
 16218                                  	; MSDOS 6.0
 16219                                  ;Extended open hooks
 16220                                  	;TEST	byte [EXTOPEN_ON],ext_open_on	;FT. from extnded open		;AN000;
 16221                                  	;JZ	short NOEXTOP 		    ;FT. no, do normal			;AN000;
 16222                                  IFS_extopen:									;AN000;
 16223                                  	;MOV	AL,[SAVE_BX]		    ; M034 - save_bx has original bx  
 16224                                  	;				    ; with which call was made. This
 16225                                  	;				    ; has the open access bits. 
 16226                                  	;;;MOV	AL,[SAVE_CX]		    ; M034 - FT. al= create attribute
 16227                                  	;
 16228                                  	;PUSH	AX			    ;FT. pass create attr to IFS	;AN000;
 16229                                  	;;MOV	AX,(MultNET SHL 8) OR 46    ;FT. issue extended open verb	;AN000;
 16230                                  	;mov	ax,(MultNET*256)+46 
 16231                                  	;INT	2FH			    ;FT.				;AN000;
 16232                                  	;POP	BX			    ;FT. trash bx			;AN000;
 16233                                  	;MOV	byte [EXTOPEN_ON],0	    ;FT.				;AN000;
 16234                                  
 16235                                  ;do_ret_label:
 16236                                  	;retn				    ;FT.				;AN000;
 16237                                  ;NOEXTOP:
 16238                                  ;Extended open hooks
 16239                                  	;
 16240                                  ;IF NOT Installed
 16241                                  	;transfer NET_SEQ_OPEN
 16242                                  ;ELSE
 16243                                  	;
 16244                                  do_net_int2f:
 16245                                  	;
 16246                                  	;test	byte [DOS_FLAG],EXECOPEN ; Q: was this open call made from exec
 16247                                  	;jz	short not_exec_open	; N: just do net open
 16248                                  	;				; Y: check to see if redir is aware
 16249                                  	;				;    of this 
 16250                                  	;
 16251                                  	;				; M042 - start
 16252                                  	;test	word [DOS34_FLAG],EXEC_AWARE_REDIR
 16253                                  	;				; Q: does this redir know how to 
 16254                                  	;				;    this
 16255                                  	;jz	short not_exec_open	; N: just do net open
 16256                                  	;				; Y: set bit 3 of access byte and 
 16257                                  	;				;    set sharing mode to DENY_WRITE
 16258                                  	;				; M042 - end
 16259                                  	;
 16260                                  	; NOTE: This specific mode has not been set for the code assembled
 16261                                  	; under the "NOT Installed" conditional. Currently Installed is 
 16262                                  	; always one.
 16263                                  	;				; M035 - set the bits on the stack
 16264                                  	;mov	AL,SHARING_DENY_WRITE+EXEC_OPEN
 16265                                  	;
 16266                                  ;not_exec_open:
 16267                                  
 16268                                  	; MSDOS 3.3 (& MSDOS 6.0)
 16269 0000379D 50                      	PUSH	AX
 16270                                  
 16271                                  	;MOV	AX,(MultNET SHL 8) OR 22
 16272                                  	;INT	2FH
 16273                                  
 16274 0000379E B81611                  	mov     ax,1116h
 16275 000037A1 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - OPEN EXISTING REMOTE FILE
 16276                                  			; ES:DI -> uninitialized SFT, SS = DOS CS
 16277                                  			; SDA first filename pointer -> fully-qualified name of file to open
 16278                                  			; STACK: WORD file open mode
 16279                                  			; Return: CF set on error
 16280                                  
 16281 000037A3 5B                      	POP	BX			; clean stack
 16282                                  do_ret_label: ; 09/08/2018
 16283 000037A4 C3                      	retn
 16284                                  ;ENDIF
 16285                                  
 16286                                  TEST_RE_NET1:
 16287 000037A5 26F744430080            	TEST	word [ES:SI+curdir.flags],curdir_isnet
 16288                                  	; 18/08/2018
 16289 000037AB 07                      	POP	ES
 16290                                  	;JZ	short LOCAL_OPEN
 16291                                  
 16292 000037AC 75EF                    	jnz	short do_net_int2f ; (*)
 16293                                  
 16294                                  ;Extended open hooks
 16295                                  	; MSDOS 6.0
 16296                                  	;TEST	byte [EXTOPEN_ON],ext_open_on ;FT. from extended open	;AN000;
 16297                                  	;JNZ	short IFS_extopen	      ;FT. isuue extended open	;AN000;
 16298                                  ;Extended open hooks
 16299                                  
 16300                                  ;IF NOT Installed
 16301                                  ;	transfer NET_OPEN
 16302                                  ;ELSE
 16303                                  	;jmp	short do_net_int2f (*)
 16304                                  ;ENDIF
 16305                                  
 16306                                  LOCAL_OPEN:
 16307                                  	; MSDOS 3.3 (& MSDOS 6.0)
 16308 000037AE E8BBE8                  	call	EcritDisk
 16309                                  
 16310                                  ; DOS 3.3 FastOPen 6/16/86
 16311                                  
 16312 000037B1 800E[6E0F]05            	OR	byte [FastOpenFlg],FastOpen_Set+Special_Fill_Set ; only open can
 16313                                  
 16314 000037B6 E87C10                  	call	GETPATH
 16315                                  
 16316                                  ; DOS 3.3 FastOPen 6/16/86
 16317                                  
 16318 000037B9 731E                    	JNC	short Open_found
 16319 000037BB 7512                    	JNZ	short bad_path2
 16320 000037BD 08C9                    	OR	CL,CL
 16321 000037BF 740E                    	JZ	short bad_path2
 16322                                  
 16323                                  OpenFNF:
 16324 000037C1 B80200                  	MOV	AX,error_file_not_found
 16325                                  
 16326                                  OpenBadRet:
 16327                                  ;hkn; FastOpenFlg is in DOSDATA use SS override
 16328                                  	; 12/08/2018
 16329                                  	;mov	byte [cs:FastOpenFlg],0 ; IBMDOS.COM (MSDOS 3.3) offset 36CAh
 16330                                  	; MSDOS 6.0
 16331 000037C4 368026[6E0F]80          	AND	BYTE [SS:FastOpenFlg],Fast_yes    ;; DOS 3.3
 16332 000037CA F9                      	STC
 16333 000037CB E8A6E8                  	call	LcritDisk
 16334                                  	;JMP	Clear_FastOpen ; 10/08/2018
 16335 000037CE C3                      	retn 	; 08/09/2018
 16336                                  
 16337                                  bad_path2:
 16338 000037CF B80300                  	MOV	AX,error_path_not_found
 16339 000037D2 EBF0                    	JMP	short OpenBadRet
 16340                                  
 16341                                  Open_Bad_Access:
 16342 000037D4 B80500                  	MOV	AX,error_access_denied
 16343 000037D7 EBEB                    	JMP	short OpenBadRet
 16344                                  
 16345                                  Open_found:
 16346 000037D9 74F9                    	JZ	short Open_Bad_Access 	; test for directories
 16347 000037DB 08E4                    	OR	AH,AH
 16348 000037DD 783F                    	JS	short open_ok		; Devices don't have attributes
 16349 000037DF 8E06[7605]              	MOV	ES,[CURBUF+2]		; get buffer location
 16350 000037E3 268A470B                	MOV	AL,[ES:BX+dir_entry.dir_attr]
 16351 000037E7 A808                    	TEST	AL,attr_volume_id	; can't open volume ids
 16352 000037E9 75E9                    	JNZ	short Open_Bad_Access
 16353 000037EB A801                    	TEST	AL,attr_read_only	; check write on read only
 16354 000037ED 742F                    	JZ	short open_ok
 16355                                  ;
 16356                                  ; The file is marked READ-ONLY. We verify that the open mode allows access to
 16357                                  ; the read-only file. Unfortunately, with FCB's and net-FCB's we cannot
 16358                                  ; determine at the OPEN time if such access is allowed. Thus, we defer such
 16359                                  ; processing until the actual write operation:
 16360                                  ;
 16361                                  ; If FCB, then we change the mode to be read_only.
 16362                                  ; If net_FCB, then we change the mode to be read_only.
 16363                                  ; If not open for read then error.
 16364                                  ;
 16365 000037EF 1E                      	push	ds
 16366 000037F0 56                      	push	si
 16367 000037F1 C536[3605]              	LDS	SI,[THISSFT]
 16368 000037F5 8B4C02                  	MOV	CX,[SI+SF_ENTRY.sf_mode]
 16369 000037F8 F7C10080                	TEST	CX,sf_isFCB		; is it FCB?
 16370 000037FC 750A                    	JNZ	short ResetAccess	; yes, reset the access
 16371 000037FE 88CA                    	MOV	DL,CL
 16372 00003800 80E2F0                  	AND	DL,SHARING_MASK
 16373 00003803 80FA70                  	CMP	DL,SHARING_NET_FCB	; is it net FCB?
 16374 00003806 7508                    	JNZ	short NormalOpen	; no
 16375                                  ResetAccess:
 16376 00003808 83E1F0                  	AND	CX,~access_mask	;0FFF0h	; clear access
 16377                                  ;	OR	CX,open_for_read	; stick in open_for_read
 16378 0000380B 894C02                  	MOV	[SI+SF_ENTRY.sf_mode],CX
 16379 0000380E EB0C                    	JMP	SHORT FillSFT
 16380                                  ;
 16381                                  ; The SFT is normal.  See if the requested access is open_for_read
 16382                                  ;
 16383                                  NormalOpen:
 16384 00003810 80E10F                  	AND	CL,access_mask	;0Fh	; remove extras
 16385 00003813 80F900                  	CMP	CL,open_for_read	; is it open for read?
 16386 00003816 7404                    	JZ	short FillSFT
 16387 00003818 5E                      	pop	si
 16388 00003819 1F                      	pop	ds
 16389 0000381A EBB8                    	JMP	short Open_Bad_Access
 16390                                  ;
 16391                                  ; All done, restore registers and fill the SFT.
 16392                                  ;
 16393                                  FillSFT:
 16394 0000381C 5E                      	pop	si
 16395 0000381D 1F                      	pop	ds
 16396                                  open_ok:
 16397 0000381E E89F19                  	call	DOOPEN			; Fill in SFT
 16398                                  
 16399                                  ;hkn; FastOpenFlg is in DOSDATA. use SS override
 16400                                  	;12/08/2018
 16401                                  	;AND	BYTE [SS:FastOpenFlg],Fast_yes    ;; DOS 3.3
 16402 00003821 8026[6E0F]80            	and	byte [FastOpenFlg],Fast_yes	
 16403                                  
 16404                                  	; MSDOS 6.0
 16405                                  	;CALL	DO_SHARE_CHECK
 16406                                  	;JNC	short SHARE_OK
 16407                                  	;call	LcritDisk
 16408                                  	;JMP	short Clear_FastOpen	
 16409                                  
 16410                                  	; MSDOS 3.3
 16411                                  DO_SHARE_CHECK:
 16412 00003826 8B0E[1A00]              	MOV	CX,[RetryCount]		; Get # tries to do
 16413                                  OpenShareRetry:
 16414 0000382A 51                      	push	cx			; Save number left to do
 16415 0000382B E8FA3A                  	call	SHARE_CHECK		; Final Check
 16416 0000382E 59                      	pop	cx			; CX = # left
 16417 0000382F 7312                    	JNC	short SHARE_OK		; No problem with access
 16418 00003831 E855E7                  	call	Idle
 16419 00003834 E2F4                    	LOOP	OpenShareRetry		; One more retry used up
 16420                                  OpenShareFail:
 16421 00003836 C43E[3605]              	LES	DI,[THISSFT]
 16422 0000383A E82B00                  	call	SHARE_ERROR
 16423 0000383D 73E7                    	JNC	short DO_SHARE_CHECK	; User wants more retry
 16424                                  	
 16425                                  	;12/08/2018
 16426                                  	;mov	byte [ss:FastOpenFlg],0
 16427                                  	;08/09/2018
 16428                                  	;mov	byte [FastOpenFlg],0
 16429 0000383F E832E8                  	call	LcritDisk
 16430                                  	;JMP	short Clear_FastOpen
 16431 00003842 C3                      	retn
 16432                                  
 16433                                  SHARE_OK:
 16434                                  	; MSDOS 3.3 (& MSDOS 6.0)
 16435 00003843 B80300                  	MOV	AX,3
 16436 00003846 C43E[3605]              	LES	DI,[THISSFT]
 16437                                  ;if installed
 16438                                  	;call	JShare + 14 * 4
 16439 0000384A FF1E[9400]              	call	far [JShare+(14*4)]  ; 14 = ShSU
 16440                                  ;else
 16441                                  ;	Call	ShSU
 16442                                  ;endif
 16443 0000384E E823E8                  	call	LcritDisk
 16444                                  	
 16445                                  	;FallThru Set_SFT_Mode
 16446                                  
 16447                                  ;----------------------------------------------------------------------------
 16448                                  ; Procedure Name : SET_SFT_MODE
 16449                                  ;
 16450                                  ; Finish SFT initialization for new reference. Set the correct mode.
 16451                                  ;
 16452                                  ;   Inputs:
 16453                                  ;	ThisSFT points to SFT
 16454                                  ;
 16455                                  ;   Outputs:
 16456                                  ;	Carry clear
 16457                                  ;   Registers modified: AX.
 16458                                  ;---------------------------------------------------------------------------
 16459                                  
 16460                                  ;hkn; called from create. DS already set up to DOSDATA.
 16461                                  
 16462                                  SET_SFT_MODE:
 16463 00003851 C43E[3605]              	LES	DI,[THISSFT]
 16464 00003855 E81D16                  	call	DEV_OPEN_SFT
 16465 00003858 26F745020080            	TEST	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB ; Clears carry
 16466 0000385E 7407                    	JZ	short Clear_FastOpen	; sf_mode correct (retz)
 16467 00003860 A1[DE02]                	MOV	AX,[CurrentPDB]
 16468 00003863 26894531                	MOV	[ES:DI+SF_ENTRY.sf_PID],AX ; For FCB sf_PID=PDB
 16469                                  
 16470                                  Clear_FastOpen:
 16471 00003867 C3                      	retn			       ;;;;; DOS 3.3
 16472                                  
 16473                                  ;----------------------------------------------------------------------------
 16474                                  ; Procedure Name : SHARE_ERROR
 16475                                  ;
 16476                                  ; Called on sharing violations. ES:DI points to SFT. AX has error code
 16477                                  ; If SFT is FCB or compatibility mode gens INT 24 error.
 16478                                  ; Returns carry set AX=error_sharing_violation if user says ignore (can't
 16479                                  ; really ignore).  Carry clear
 16480                                  ; if user wants a retry. ES, DI, DS preserved
 16481                                  ;---------------------------------------------------------------------------
 16482                                  
 16483                                  SHARE_ERROR:
 16484 00003868 26F745020080            	TEST	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB
 16485 0000386E 750C                    	JNZ	short _HARD_ERR
 16486 00003870 268A4D02                	MOV	CL,[ES:DI+SF_ENTRY.sf_mode]
 16487 00003874 80E1F0                  	AND	CL,SHARING_MASK
 16488 00003877 80F900                  	CMP	CL,SHARING_COMPAT
 16489 0000387A 7505                    	JNE	short _NO_HARD_ERR
 16490                                  _HARD_ERR:
 16491 0000387C E8AF3A                  	call	SHARE_VIOLATION
 16492                                  	;retnc				; User wants retry
 16493 0000387F 73E6                    	jnc	short Clear_FastOpen
 16494                                  _NO_HARD_ERR:
 16495 00003881 B82000                  	MOV	AX,error_sharing_violation
 16496 00003884 F9                      	STC
 16497 00003885 C3                      	retn
 16498                                  
 16499                                  ; MSDOS 6.0
 16500                                  ;----------------------------------------------------------------------------
 16501                                  ; Procedure Name : DO_SHARE_CHECK
 16502                                  ;
 16503                                  ; Input: THISDPB, WFP_Start, THISSFT set
 16504                                  ; Functions: check file sharing mode is valid
 16505                                  ; Output: carry set, error
 16506                                  ;	  carry clear, share ok
 16507                                  ;----------------------------------------------------------------------------
 16508                                  ;
 16509                                  ;DO_SHARE_CHECK:
 16510                                  ;	call	EcritDisk		; enter critical section
 16511                                  ;OPN_RETRY:
 16512                                  ;	MOV	CX,[RetryCount]		; Get # tries to do
 16513                                  ;OpenShareRetry:
 16514                                  ;	push	cx			; Save number left to do
 16515                                  ;	call	SHARE_CHECK		; Final Check
 16516                                  ;	pop	cx			; CX = # left
 16517                                  ;	JNC	short Share_Ok2		; No problem with access
 16518                                  ;	call	Idle
 16519                                  ;	LOOP	OpenShareRetry		; One more retry used up
 16520                                  ;OpenShareFail:
 16521                                  ;	LES	DI,[THISSFT]
 16522                                  ;	call	SHARE_ERROR
 16523                                  ;	JNC	short OPN_RETRY		; User wants more retry
 16524                                  ;Share_Ok2:
 16525                                  ;	call	LcritDisk		; leave critical section
 16526                                  ;	retn
 16527                                  
 16528                                  ;-----------------------------------------------------------------------------
 16529                                  ; Procedure Name : Check_Access
 16530                                  ;
 16531                                  ; Inputs:
 16532                                  ;	AX is mode
 16533                                  ;	  High NIBBLE of AL (Sharing Mode)
 16534                                  ;		sharing_compat	   file is opened in compatibility mode
 16535                                  ;		sharing_deny_none  file is opened Multi reader, Multi writer
 16536                                  ;		sharing_deny_read  file is opened Only reader, Multi writer
 16537                                  ;		sharing_deny_write file is opened Multi reader, Only writer
 16538                                  ;		sharing_deny_both  file is opened Only reader, Only writer
 16539                                  ;	  Low NIBBLE of AL (Access Mode)
 16540                                  ;		open_for_read	file is opened for reading
 16541                                  ;		open_for_write	file is opened for writing
 16542                                  ;		open_for_both	file is opened for both reading and writing.
 16543                                  ; Function:
 16544                                  ;	Check this access mode for correctness
 16545                                  ; Outputs:
 16546                                  ;	[open_access] = AL input
 16547                                  ;	Carry Clear
 16548                                  ;		Mode is correct
 16549                                  ;		AX unchanged
 16550                                  ;	Carry Set
 16551                                  ;		Mode is bad
 16552                                  ;		AX = error_invalid_access
 16553                                  ; No other registers effected
 16554                                  ;----------------------------------------------------------------------------
 16555                                  
 16556                                  Check_Access_AX:
 16557                                  
 16558 00003886 A2[0905]                	MOV	[OPEN_ACCESS],AL
 16559 00003889 53                      	PUSH	BX
 16560                                  
 16561                                  ;	If sharing, then test for special sharing mode for FCBs
 16562                                  
 16563 0000388A 88C3                    	MOV	BL,AL
 16564 0000388C 80E3F0                  	AND	BL,SHARING_MASK
 16565 0000388F 803E[0D05]FF            	CMP	byte [FSHARING],-1
 16566 00003894 7505                    	JNZ	short CheckShareMode	; not through server call, must be ok
 16567 00003896 80FB70                  	CMP	BL,SHARING_NET_FCB
 16568 00003899 7405                    	JZ	short CheckAccessMode	; yes, we have an FCB
 16569                                  CheckShareMode:
 16570 0000389B 80FB40                  	CMP	BL,40h			; is this a good sharing mode?
 16571 0000389E 770D                    	JA	short Make_Bad_Access
 16572                                  CheckAccessMode:
 16573 000038A0 88C3                    	MOV	BL,AL
 16574 000038A2 80E30F                  	AND	BL,access_mask
 16575 000038A5 80FB02                  	CMP	BL,2
 16576 000038A8 7703                    	JA	short Make_Bad_Access
 16577 000038AA 5B                      	POP	BX
 16578 000038AB F8                      	CLC
 16579 000038AC C3                      	retn
 16580                                  
 16581                                  Make_Bad_Access:
 16582 000038AD B80C00                  	MOV	AX,error_invalid_access
 16583 000038B0 5B                      	POP	BX
 16584 000038B1 F9                      	STC
 16585 000038B2 C3                      	retn
 16586                                  
 16587                                  ;============================================================================
 16588                                  ; DINFO.ASM, MSDOS 6.0, 1991
 16589                                  ;============================================================================
 16590                                  ; 08/08/2018 - Retro DOS v3.0
 16591                                  
 16592                                  ;**	Low level routine for returning disk drive information from a local
 16593                                  ;	  or NET device
 16594                                  ;
 16595                                  ;	DISK_INFO
 16596                                  ;
 16597                                  ;	  Modification history:
 16598                                  ;
 16599                                  ;		Created: ARR 30 March 1983
 16600                                  
 16601                                  ;	Break	<DISK_INFO -- Get Disk Drive Information>
 16602                                  ;---------------------------------------------------------------------------
 16603                                  ; Procedure Name : DISK_INFO
 16604                                  ;
 16605                                  ; Inputs:
 16606                                  ;	[THISCDS] Points to the Macro List Structure of interest
 16607                                  ;		(It MAY NOT be NUL, error not detected)
 16608                                  ; Function:
 16609                                  ;	Get Interesting Drive Information
 16610                                  ; Returns:
 16611                                  ;	DX = Number of free allocation units
 16612                                  ;	BX = Total Number of allocation units on disk
 16613                                  ;	CX = Sector size
 16614                                  ;	AL = Sectors per allocation unit
 16615                                  ;	AH = FAT ID BYTE
 16616                                  ;	Carry set if error (currently user FAILed to I 24)
 16617                                  ; Segs except ES preserved, others destroyed
 16618                                  ;----------------------------------------------------------------------------
 16619                                  
 16620                                  ;hkn; called from getset.asm and misc.asm. DS has already been set up to 
 16621                                  ;hkn; DOSDATA. 
 16622                                  
 16623                                  DISK_INFO:
 16624                                  	; 08/08/2018 - Retro DOS v3.0
 16625                                  	; IBM DOS.COM (MSDOS 3.3, 1987) - Offset 37C5h
 16626                                  
 16627 000038B3 E818E7                  	call	TestNet
 16628 000038B6 7306                    	JNC	short LOCAL_DSK_INFO
 16629                                  
 16630                                  ;IF NOT Installed
 16631                                  ;	transfer NET_DISK_INFO
 16632                                  ;ELSE
 16633                                  	;MOV	AX,(MultNET SHL 8) OR 12
 16634                                  	;INT	2FH
 16635                                  	;return
 16636                                  
 16637 000038B8 B80C11                  	mov     ax,110Ch
 16638 000038BB CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - GET DISK SPACE
 16639                                  			; ES:DI -> current directory
 16640                                  			; Return: AL = sectors per cluster, BX = total clusters
 16641                                  			; CX = bytes per sector, DX = number of available clusters
 16642 000038BD C3                      	retn
 16643                                  ;ENDIF
 16644                                  
 16645                                  LOCAL_DSK_INFO:
 16646 000038BE C606[D102]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 16647 000038C3 E8A6E7                  	call	EcritDisk
 16648 000038C6 E8F222                  	call	FATREAD_CDS		; perform media check.
 16649 000038C9 7241                    	JC	short CRIT_LEAVE
 16650 000038CB BB0200                  	MOV	BX,2
 16651 000038CE E87C21                  	call	UNPACK			; Get first FAT sector into CURBUF
 16652 000038D1 7239                    	JC	short CRIT_LEAVE
 16653 000038D3 C536[7405]              	LDS	SI,[CURBUF]
 16654 000038D7 8A6410                  	MOV	AH,[SI+BUFINSIZ]	; get FAT ID BYTE
 16655                                  
 16656                                  ;hkn; SS is DOSDATA
 16657 000038DA 16                      	push	ss
 16658 000038DB 1F                      	pop	ds
 16659 000038DC 268B4E0D                	MOV	CX,[ES:BP+DPB.MAX_CLUSTER]
 16660                                  ;
 16661                                  ; Examine the current free count.  If it indicates that we have an invalid
 16662                                  ; count, do the expensive calculation.
 16663                                  ;
 16664 000038E0 268B561E                	MOV	DX,[ES:BP+DPB.FREE_CNT] ; get free count
 16665 000038E4 83FAFF                  	CMP	DX,-1			; is it valid?
 16666 000038E7 7404                    	JZ	short DoScan
 16667                                  ;
 16668                                  ; Check to see if it is in a reasonalbe range.	If so, trust it and return.
 16669                                  ; Otherwise, we need to blast out an internal error message and then recompute
 16670                                  ; the count.
 16671                                  ;
 16672 000038E9 39CA                    	CMP	DX,CX			; is it in a reasonable range?
 16673 000038EB 7223                    	JB	short GotVal		; yes, trust it.
 16674                                  DoScan:
 16675 000038ED 31D2                    	XOR	DX,DX
 16676 000038EF 49                      	DEC	CX
 16677                                  SCANFREE:
 16678 000038F0 E85A21                  	call	UNPACK
 16679 000038F3 7217                    	JC	short CRIT_LEAVE
 16680 000038F5 7501                    	JNZ	short NOTFREECLUS
 16681 000038F7 42                      	INC	DX			; A free one
 16682                                  NOTFREECLUS:
 16683 000038F8 43                      	INC	BX			; Next cluster
 16684 000038F9 E2F5                    	LOOP	SCANFREE
 16685 000038FB 4B                      	DEC	BX			; BX was next cluster.	Convert to
 16686                                  ReturnVals:
 16687 000038FC 4B                      	DEC	BX			; count
 16688 000038FD 268A4604                	MOV	AL,[ES:BP+DPB.CLUSTER_MASK] 
 16689 00003901 FEC0                    	INC	AL			; Sectors/cluster
 16690 00003903 268B4E02                	MOV	CX,[ES:BP+DPB.SECTOR_SIZE] ; Bytes/sector
 16691 00003907 2689561E                	MOV	[ES:BP+DPB.FREE_CNT],DX
 16692 0000390B F8                      	CLC
 16693                                  CRIT_LEAVE:
 16694 0000390C E865E7                  	call	LcritDisk
 16695 0000390F C3                      	retn
 16696                                  ;
 16697                                  ; We have correctly computed everything previously. Load up registers for
 16698                                  ; return.
 16699                                  ;
 16700                                  GotVal: 
 16701 00003910 89CB                    	MOV	BX,CX			; get cluster count
 16702 00003912 EBE8                    	JMP	short ReturnVals
 16703                                  
 16704                                  ;============================================================================
 16705                                  ; ISEARCH.ASM, MSDOS 6.0, 1991
 16706                                  ;============================================================================
 16707                                  ; 22/07/2018 - Retro DOS v3.0
 16708                                  
 16709                                  ;	TITLE	DOS_SEARCH - Internal SEARCH calls for MS-DOS
 16710                                  ;	NAME	DOS_SEARCH
 16711                                  
 16712                                  ;**	Low level routines for doing local and NET directory searches
 16713                                  ;
 16714                                  ;	DOS_SEARCH_FIRST
 16715                                  ;	DOS_SEARCH_NEXT
 16716                                  ;	RENAME_NEXT
 16717                                  ;
 16718                                  ;	Revision history:
 16719                                  ;
 16720                                  ;	    Created: ARR 30 March 1983
 16721                                  ;	    A000	version 4.00  Jan. 1988
 16722                                  ;	    A001	PTM 3564 -- search for fastopen
 16723                                  
 16724                                  ;Installed = TRUE
 16725                                  
 16726                                  ;--------------------------------------------------------------------------
 16727                                  ;
 16728                                  ; Procedure Name : DOS_SEARCH_FIRST
 16729                                  ;
 16730                                  ; Inputs:
 16731                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 16732                                  ;		terminated)
 16733                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 16734                                  ;		( = -1 if current dir not involved, else
 16735                                  ;		 Points to first char after last "/" of current dir part)
 16736                                  ;	[THISCDS] Points to CDS being used
 16737                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 16738                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 16739                                  ;	[DMAADD] Points to 53 byte buffer
 16740                                  ; Function:
 16741                                  ;	Initiate a search for the given file spec
 16742                                  ; Outputs:
 16743                                  ;	CARRY CLEAR
 16744                                  ;	    The 53 bytes ot DMAADD are filled in as follows:
 16745                                  ;
 16746                                  ;	LOCAL
 16747                                  ;	    Drive Byte (A=1, B=2, ...) High bit clear
 16748                                  ;		NEVER STORE DRIVE BYTE AFTER  found_it
 16749                                  ;	    11 byte search name with Meta chars in it
 16750                                  ;	    Search Attribute Byte, attribute of search
 16751                                  ;	    WORD LastEnt value
 16752                                  ;	    WORD DirStart
 16753                                  ;	    4 byte pad
 16754                                  ;	    32 bytes of the directory entry found
 16755                                  ;	NET
 16756                                  ;	    21 bytes First byte has high bit set
 16757                                  ;	    32 bytes of the directory entry found
 16758                                  ;
 16759                                  ;	CARRY SET
 16760                                  ;	    AX = error code
 16761                                  ;		error_no_more_files
 16762                                  ;			No match for this file
 16763                                  ;		error_path_not_found
 16764                                  ;			Bad path (not in curr dir part if present)
 16765                                  ;		error_bad_curr_dir
 16766                                  ;			Bad path in current directory part of path
 16767                                  ; DS preserved, others destroyed
 16768                                  ;---------------------------------------------------------------------------
 16769                                  
 16770                                  DOS_SEARCH_FIRST:
 16771                                  	; IBMDOS.COM (MSDOS 3.3 kernel) - Offset 3826h
 16772                                  
 16773 00003914 C43E[3A05]              	LES	DI,[THISCDS]
 16774 00003918 83FFFF                  	CMP	DI,-1
 16775 0000391B 7506                    	JNZ	short TEST_RE_NET2
 16776                                  
 16777                                  ;IF NOT Installed
 16778                                  ;	transfer NET_SEQ_SEARCH_FIRST
 16779                                  ;ELSE
 16780                                  	;mov	ax,1119h
 16781 0000391D B81911                  	MOV	AX,(MultNET<<8)|25
 16782 00003920 CD2F                    	INT	2Fh
 16783 00003922 C3                      	retn
 16784                                  ;ENDIF
 16785                                  
 16786                                  TEST_RE_NET2:
 16787                                  	;test	word [es:di+43h],8000h
 16788 00003923 26F745430080            	TEST	word [ES:DI+curdir.flags],curdir_isnet
 16789 00003929 7406                    	JZ	short LOCAL_SEARCH_FIRST
 16790                                  
 16791                                  ;IF NOT Installed
 16792                                  ;	transfer NET_SEARCH_FIRST
 16793                                  ;ELSE
 16794                                  	;mov	ax,111Bh
 16795 0000392B B81B11                  	MOV	AX,(MultNET<<8)|27
 16796 0000392E CD2F                    	INT	2FH
 16797 00003930 C3                      	retn
 16798                                  ;ENDIF
 16799                                  
 16800                                  LOCAL_SEARCH_FIRST:
 16801 00003931 E838E7                  	call	EcritDisk
 16802                                  	; MSDOS 6.0
 16803                                  	;TEST	word [DOS34_FLAG],SEARCH_FASTOPEN ;AN000;
 16804                                  	;JZ	short NOFN			;AN000;
 16805                                  	;OR	byte [FastOpenflg],Fastopen_Set	;AN000;
 16806                                  ;NOFN:						;AN000;
 16807 00003934 C606[F802]01            	MOV	byte [NoSetDir],1	; if we find a dir, don't change to it
 16808                                  	; MSDOS 6.0
 16809                                  	;CALL	CHECK_QUESTION		;AN000;;FO. is '?' in path
 16810                                  	;JNC	short norm_GETPATH	;AN000;;FO. no
 16811                                  	;AND	byte [FastOpenflg],Fast_yes ;AN000;;FO. reset fastopen
 16812                                  ;norm_GETPATH:
 16813 00003939 E8F90E                  	call	GETPATH
 16814                                  	; BX = offset NAME1
 16815                                  ;_getdone:
 16816 0000393C 7313                    	JNC	short find_check_dev
 16817 0000393E 750C                    	JNZ	short bad_path3
 16818 00003940 08C9                    	OR	CL,CL
 16819 00003942 7408                    	JZ	short bad_path3
 16820                                  find_no_more:
 16821                                  	;mov	ax,12h
 16822 00003944 B81200                  	MOV	AX,error_no_more_files
 16823                                  BadBye:
 16824                                  	; MSDOS 6.0
 16825                                  	;AND	[SS:FastOpenflg],Fast_yes  ;AN000;;FO. reset fastopen
 16826                                  
 16827 00003947 F9                      	STC
 16828 00003948 E829E7                  	call	LcritDisk
 16829 0000394B C3                      	retn
 16830                                  
 16831                                  bad_path3:
 16832                                  	;mov	ax,3
 16833 0000394C B80300                  	MOV	AX,error_path_not_found
 16834 0000394F EBF6                    	JMP	short BadBye
 16835                                  
 16836                                  find_check_dev:
 16837 00003951 08E4                    	OR	AH,AH
 16838 00003953 790A                    	JNS	short found_entry
 16839 00003955 C706[F402]FFFF          	MOV	word [LASTENT],-1	; Cause DOS_SEARCH_NEXT to fail
 16840 0000395B FE06[0B05]              	INC	byte [FOUND_DEV]	; Tell DOS_RENAME we found a device
 16841                                  found_entry:
 16842                                  ;
 16843                                  ; We set the physical drive byte here Instead of after found_it; Doing
 16844                                  ; a search-next may not have wfp_start set correctly
 16845                                  ;
 16846 0000395F C43E[DA02]              	LES	DI,[DMAADD]
 16847 00003963 8B36[4A05]              	MOV	SI,[WFP_START]		; get pointer to beginning
 16848 00003967 AC                      	LODSB
 16849 00003968 2C40                    	SUB	AL,'A'-1                ; logical drive
 16850 0000396A AA                      	STOSB				; High bit not set (local)
 16851                                  found_it:
 16852 0000396B C43E[DA02]              	LES	DI,[DMAADD]
 16853 0000396F 47                      	INC	DI
 16854                                  
 16855                                  	; MSDOS 6.0
 16856                                  	;PUSH	DS				  ;FO.;AN001; save ds
 16857                                  	;TEST	byte [Fastopenflg],Set_For_Search ;FO.;AN001; from fastopen
 16858                                  	;JZ	short notfast 			  ;FO.;AN001;
 16859                                  	;MOV	SI,BX				  ;FO.;AN001;
 16860                                  	;MOV	DS,[CURBUF+2]			  ;FO.;AN001;
 16861                                  	;JMP	SHORT movmov			  ;FO.;AN001;
 16862                                  
 16863                                  notfast:
 16864 00003970 BE[E604]                	MOV	SI,NAME1		; find_buf 2 = formatted name
 16865                                  movmov:
 16866                                  ; Special E5 code
 16867 00003973 A4                      	MOVSB
 16868 00003974 26807DFF05              	CMP	BYTE [ES:DI-1],5
 16869 00003979 7505                    	JNZ	short NOTKANJB
 16870 0000397B 26C645FFE5              	MOV	BYTE [ES:DI-1],0E5H
 16871                                  NOTKANJB:
 16872 00003980 B90A00                  	MOV	CX,10
 16873 00003983 F3A4                    	REP	MOVSB
 16874                                  
 16875                                  	; 08/09/2018
 16876                                  	;POP	DS			;FO.;AN001; restore ds
 16877                                  
 16878 00003985 A0[0605]                	MOV	AL,[ATTRIB]
 16879 00003988 AA                      	STOSB
 16880 00003989 50                      	PUSH	AX			; Save AH device info
 16881 0000398A A1[F402]                	MOV	AX,[LASTENT]
 16882 0000398D AB                      	STOSW
 16883 0000398E A1[5805]                	MOV	AX,[DIRSTART]
 16884 00003991 AB                      	STOSW
 16885                                  ; 4 bytes of 21 byte cont structure left for NET stuff
 16886 00003992 83C704                  	ADD	DI,4
 16887 00003995 58                      	POP	AX			; Recover AH device info
 16888 00003996 08E4                    	OR	AH,AH
 16889 00003998 7813                    	JS	short DOSREL		; Device entry is DOSGROUP relative
 16890 0000399A 833E[7405]FF            	CMP	WORD [CURBUF],-1
 16891 0000399F 7508                    	JNZ	short OKSTORE
 16892                                  
 16893                                  	; MSDOS 6.0
 16894                                  	;TEST	byte [FastOPenFlg],Set_For_Search
 16895                                  					;AN000;;FO. from fastopen and is good
 16896                                  	;JNZ	short OKSTORE		;AN000;;FO.
 16897                                  
 16898                                  	; The user has specified the root directory itself, rather than some
 16899                                  	; contents of it. We can't "find" that.
 16900 000039A1 26C745F8FFFF            	MOV	WORD [ES:DI-8],-1	; Cause DOS_SEARCH_NEXT to fail by
 16901                                  					;   stuffing a -1 at Lastent
 16902 000039A7 EB9B                    	JMP	short find_no_more
 16903                                  
 16904                                  OKSTORE:
 16905 000039A9 8E1E[7605]              	MOV	DS,[CURBUF+2]
 16906                                  DOSREL:
 16907                                  	; BX = offset NAME1 (from GETPATH)
 16908 000039AD 89DE                    	MOV	SI,BX			; SI-> start of entry
 16909                                  
 16910                                  ; NOTE: DOS_RENAME depends on BX not being altered after this point
 16911                                  
 16912                                  	;mov	cx,32
 16913 000039AF B92000                  	MOV	CX,dir_entry.size
 16914                                  ;;;;; 7/29/86
 16915 000039B2 89F8                    	MOV	AX,DI			; save the 1st byte addr
 16916 000039B4 F3A4                    	REP	MOVSB
 16917 000039B6 89C7                    	MOV	DI,AX			; restore 1st byte addr
 16918 000039B8 26803D05                	CMP	BYTE [ES:DI],05H	; special char check
 16919 000039BC 7504                    	JNZ	short NO05
 16920 000039BE 26C605E5                	MOV	BYTE [ES:DI],0E5H	; convert it back to E5
 16921                                  NO05:
 16922                                  
 16923                                  ;;;;; 7/29/86
 16924                                  
 16925                                  ;hkn; FastOpenflg is in DOSDATA use SS
 16926                                  	; MSDOS 6.0
 16927                                  	;AND	byte [SS:FastOpenflg],Fast_yes ;AN000;;FO. reset fastopen
 16928                                  	;push	ss
 16929                                  	;pop	ds
 16930                                  	;AND	byte [FastOpenflg],Fast_yes
 16931                                  
 16932                                  ;hkn; SS is DOSDATA
 16933 000039C2 16                      	push	ss
 16934 000039C3 1F                      	pop	ds
 16935 000039C4 F8                      	CLC
 16936 000039C5 E8ACE6                  	call	LcritDisk
 16937 000039C8 C3                      	retn
 16938                                  
 16939                                  ;BREAK <DOS_SEARCH_NEXT - scan for subsequent matches>
 16940                                  ;----------------------------------------------------------------------------
 16941                                  ;
 16942                                  ; Procedure Name : DOS_SEARCH_NEXT
 16943                                  ;
 16944                                  ; Inputs:
 16945                                  ;	[DMAADD] Points to 53 byte buffer returned by DOS_SEARCH_FIRST
 16946                                  ;	    (only first 21 bytes must have valid information)
 16947                                  ; Function:
 16948                                  ;	Look for subsequent matches
 16949                                  ; Outputs:
 16950                                  ;	CARRY CLEAR
 16951                                  ;	    The 53 bytes at DMAADD are updated for next call
 16952                                  ;		(see DOS_SEARCH_FIRST)
 16953                                  ;	CARRY SET
 16954                                  ;	    AX = error code
 16955                                  ;		error_no_more_files
 16956                                  ;			No more files to find
 16957                                  ; DS preserved, others destroyed
 16958                                  ;---------------------------------------------------------------------------
 16959                                  
 16960                                  ;hkn; called from search.asm. DS already set up at this point.
 16961                                  
 16962                                  DOS_SEARCH_NEXT:
 16963 000039C9 C43E[DA02]              	LES	DI,[DMAADD]
 16964 000039CD 268A05                  	MOV	AL,[ES:DI]
 16965 000039D0 A880                    	TEST	AL,80H			; Test for NET
 16966 000039D2 7406                    	JZ	short LOCAL_SEARCH_NEXT
 16967                                  ;IF NOT Installed
 16968                                  ;	transfer NET_SEARCH_NEXT
 16969                                  ;ELSE
 16970                                  	;mov	ax,111Ch
 16971 000039D4 B81C11                  	MOV	AX,(MultNET<<8)|28
 16972 000039D7 CD2F                    	INT	2FH  ; Multiplex - NETWORK REDIRECTOR - FINDNEXT
 16973                                  		     ; SS = DS = DOS CS, [DTA] = 21-byte findfirst search data
 16974                                  		     ; Return: CF set on error, AX = DOS error code
 16975                                  		     ; CF clear if successful
 16976 000039D9 C3                      	retn
 16977                                  ;ENDIF
 16978                                  
 16979                                  LOCAL_SEARCH_NEXT:
 16980                                  	;AL is drive A=1
 16981                                  	;mov	byte [EXTERR_LOCUS],2
 16982 000039DA C606[D102]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 16983 000039DF E88AE6                  	call	EcritDisk
 16984                                  
 16985                                  ;hkn; DummyCDS is in DOSDATA
 16986 000039E2 C706[3A05][9504]        	MOV     word [THISCDS],DUMMYCDS
 16987                                  ;hkn; Segment address is DOSDATA - use ds
 16988                                  ;hkn;	MOV     WORD [THISCDS+2],CS
 16989 000039E8 8C1E[3C05]              	mov	[THISCDS+2],DS
 16990                                  
 16991 000039EC 0440                    	ADD	AL,'A'-1
 16992 000039EE E8C62E                  	call	InitCDS
 16993                                  
 16994                                  ;	call	GETTHISDRV		; Set CDS pointer
 16995                                  
 16996 000039F1 7236                    	JC	short No_files		; Bogus drive letter
 16997 000039F3 C43E[3A05]              	LES	DI,[THISCDS]		; Get CDS pointer
 16998                                  	;les	bp,[es:di+45h]
 16999 000039F7 26C46D45                	LES	BP,[ES:DI+curdir.devptr]; Get DPB pointer
 17000 000039FB E8F6DC                  	call	GOTDPB			; [THISDPB] = ES:BP
 17001                                  
 17002 000039FE 268A4600                	mov	al,[ES:BP]
 17003                                  	;mov	AL,[ES:BP+DPB.DRIVE] ; mov al,[ES:BP+0]
 17004 00003A02 A2[1105]                	mov	[THISDRV],AL
 17005                                  	;mov	word [CREATING], 0E500h
 17006 00003A05 C706[1805]00E5          	MOV	WORD [CREATING],(DIRFREE*256)+0
 17007 00003A0B C606[F802]01            	MOV	byte [NoSetDir],1	; if we find a dir, don't change to it
 17008 00003A10 C536[DA02]              	LDS	SI,[DMAADD]
 17009 00003A14 AC                      	LODSB				; Drive Byte
 17010                                  
 17011                                  	;entry	RENAME_NEXT		; Entry used by DOS_RENAME
 17012                                  RENAME_NEXT:
 17013                                  	;context ES
 17014 00003A15 16                      	push	ss
 17015 00003A16 07                      	pop	es			; THIS BLOWS ES:BP POINTER TO DPB
 17016                                  
 17017                                  ;hkn; NAME1 is in DOSDATA
 17018 00003A17 BF[E604]                	MOV	DI,NAME1
 17019                                  
 17020 00003A1A B90B00                  	MOV	CX,11
 17021 00003A1D F3A4                    	REP	MOVSB			; Search name
 17022 00003A1F AC                      	LODSB				; Attribute
 17023                                  
 17024                                  ;hkn; SS override
 17025 00003A20 36A2[0605]              	MOV	[SS:ATTRIB],AL
 17026 00003A24 AD                      	LODSW				; LastEnt
 17027 00003A25 09C0                    	OR	AX,AX
 17028 00003A27 7903                    	JNS	short cont_load
 17029                                  No_files:
 17030 00003A29 E918FF                  	JMP	find_no_more
 17031                                  
 17032                                  cont_load:
 17033 00003A2C 50                      	PUSH	AX			; Save LastEnt
 17034 00003A2D AD                      	LODSW				; DirStart
 17035 00003A2E 89C3                    	MOV	BX,AX
 17036                                  
 17037                                  ;hkn; SS is DOSDATA
 17038                                  	;context DS
 17039 00003A30 16                      	push	ss
 17040 00003A31 1F                      	pop	ds
 17041 00003A32 C42E[2405]              	LES	BP,[THISDPB]		; Recover ES:BP
 17042                                  	;invoke	SetDirSrch
 17043 00003A36 E8A70D                  	call	SETDIRSRCH
 17044 00003A39 7303                    	JNC	short SEARCH_GOON
 17045 00003A3B 58                      	POP	AX			; Clean stack
 17046 00003A3C EBEB                    	JMP	short No_files
 17047                                  
 17048                                  SEARCH_GOON:
 17049 00003A3E E87E10                  	call	STARTSRCH
 17050 00003A41 58                      	POP	AX
 17051 00003A42 E86D0D                  	call	GETENT
 17052 00003A45 72E2                    	JC	short No_files
 17053 00003A47 E8AC0C                  	call	NEXTENT
 17054 00003A4A 72DD                    	JC	short No_files
 17055 00003A4C 30E4                    	XOR	AH,AH			; If Search_Next, can't be a DEV
 17056 00003A4E E91AFF                  	JMP	found_it ; 10/08/2018
 17057                                  
 17058                                  ; MSDOS6.0
 17059                                  ;---------------------------------------------------------------------------
 17060                                  ;
 17061                                  ; Procedure Name : CHECK_QUESTION
 17062                                  ;
 17063                                  ; Input: [WFP_START]= pointer to final path
 17064                                  ; Function: check '?' char
 17065                                  ; Output: carry clear, if no '?'
 17066                                  ;	 carry set, if '?' exists
 17067                                  ;---------------------------------------------------------------------------
 17068                                  
 17069                                  ;CHECK_QUESTION:
 17070                                  ;;hkn;	wfp_start is in DOSDATA;hkn;	MOV     WORD PTR ThisCDS+2,CS
 17071                                  ;;hkn;	PUSH	CS			;AN000;;FO.
 17072                                  ;	push	ss
 17073                                  ;
 17074                                  ;	POP	DS			;AN000;;FO. ds:si -> final path
 17075                                  ;	MOV	SI,[WFP_START]		;AN000;;FO.
 17076                                  ;getnext:				;AN000;
 17077                                  ;	LODSB				;AN000;;FO. get char
 17078                                  ;	OR	AL,AL			;AN000;;FO. is it null
 17079                                  ;	JZ	short NO_Question	;AN000;;FO. yes
 17080                                  ;	CMP	AL,'?'                  ;AN000;;FO. is '?'
 17081                                  ;	JNZ	short getnext 		;AN000;;FO. no
 17082                                  ;	STC				;AN000;;FO.
 17083                                  ;NO_Question:				;AN000;
 17084                                  ;	retn				;AN000;;FO.
 17085                                  
 17086                                  ;============================================================================
 17087                                  ; ABORT.ASM, MSDOS 6.0, 1991
 17088                                  ;============================================================================
 17089                                  ; 23/07/2018 - Retro DOS v3.0
 17090                                  
 17091                                  ;**
 17092                                  ;
 17093                                  ; Internal Abort call closes all handles and FCBs associated with a process.
 17094                                  ;  If process has NET resources a close all is sent out over the net.
 17095                                  ;
 17096                                  ;   DOS_ABORT
 17097                                  ;
 17098                                  ;   Modification history:
 17099                                  ;
 17100                                  ;       Created: ARR 30 March 1983
 17101                                  ;
 17102                                  ;	M038	SR	10/16/90	Free SFT with the PSP of the process
 17103                                  ;				being terminated only if it is busy.
 17104                                  ;
 17105                                  
 17106                                  ;Break   <DOS_ABORT -- CLOSE all files for process>
 17107                                  ;--------------------------------------------------------------------------
 17108                                  ;
 17109                                  ; Procedure Name : DOS_ABORT
 17110                                  ;
 17111                                  ; Inputs:
 17112                                  ;       [CurrentPDB] set to PID of process aborting
 17113                                  ; Function:
 17114                                  ;       Close all files and free all SFTs for this PID
 17115                                  ; Returns:
 17116                                  ;       None
 17117                                  ; All destroyed except stack
 17118                                  ;---------------------------------------------------------------------------
 17119                                  
 17120                                  DOS_ABORT:
 17121 00003A51 368E06[DE02]            	MOV     ES,[SS:CurrentPDB]	; SS override
 17122 00003A56 268B0E3200              	MOV     CX,[ES:PDB.JFN_Length]  ; Number of JFNs
 17123                                  reset_free_jfn:
 17124 00003A5B 89CB                    	MOV     BX,CX
 17125 00003A5D 51                      	PUSH    CX
 17126 00003A5E 4B                      	DEC     BX                      ; get jfn (start with last one)
 17127                                  
 17128 00003A5F E86133                  	CALL	_$CLOSE
 17129 00003A62 59                      	POP     CX
 17130 00003A63 E2F6                    	LOOP    reset_free_jfn          ; and do 'em all
 17131                                  ;
 17132                                  ; Note:  We do need to explicitly close FCBs. Reasons are as follows: If we
 17133                                  ; are running in the no-sharing no-network environment, we are simulating the
 17134                                  ; 2.0 world and thus if the user doesn't close the file, that is his problem
 17135                                  ; BUT...  the cache remains in a state with garbage that may be reused by the
 17136                                  ; next process.  We scan the set and blast the ref counts of the FCBs we own.
 17137                                  ;
 17138                                  ; If sharing is loaded, then the following call to close process will
 17139                                  ; correctly close all FCBs.  We will then need to walk the list AFTER here.
 17140                                  ;
 17141                                  ; Finally, the following call to NET_Abort will cause an EOP to be sent to all
 17142                                  ; known network resources.  These resources are then responsible for cleaning
 17143                                  ; up after this process.
 17144                                  ;
 17145                                  ; Sleazy, eh?
 17146                                  ;
 17147                                  	;context DS			; SS is DOSDATA
 17148 00003A65 16                      	push	ss
 17149 00003A66 1F                      	pop	ds  ; 09/09/2018
 17150                                  
 17151                                  	;CallInstall Net_Abort, MultNET, 29
 17152 00003A67 B81D11                  	mov	ax, 111Dh
 17153 00003A6A CD2F                    	int     2Fh 	; Multiplex - NETWORK REDIRECTOR 
 17154                                  			;	    - CLOSE ALL REMOTE FILES FOR PROCESS
 17155                                  			; DS???, SS = DOS CS
 17156                                  ;if installed
 17157 00003A6C FF1E[6C00]              	call	far [JShare+(4*4)]	; 4 = MFTCloseP
 17158                                  ;else
 17159                                  ;	call 	mftCloseP
 17160                                  ;endif
 17161                                  
 17162                                  ; Scan the FCB cache for guys that belong to this process and zap their ref
 17163                                  ; counts.
 17164                                  					; SS override
 17165 00003A70 36C43E[4000]            	les     di,[ss:SFTFCB]		; grab the pointer to the table
 17166                                  	;mov	cx,[es:di+4]
 17167 00003A75 268B4D04                	mov     cx,[es:di+SFT.SFCount]
 17168 00003A79 E317                    	jcxz    FCBScanDone
 17169                                  	;lea	di,[di+6]
 17170 00003A7B 8D7D06                  	LEA     DI,[DI+SFT.SFTable]	; point at table
 17171 00003A7E 36A1[E802]              	mov     ax,[SS:PROC_ID]		; SS override
 17172                                  FCBTest:
 17173                                  	;cmp	[es:di+31h],ax
 17174 00003A82 26394531                	cmp	[es:di+SF_ENTRY.sf_PID],ax ; is this one of ours
 17175 00003A86 7505                    	jnz	short FCBNext		; no, skip it
 17176 00003A88 26C7050000              	mov	word [es:di],0
 17177                                  	;mov	word [es:di+SF_ENTRY.sf_ref_count],0  ; yes, blast ref count
 17178                                  FCBNext:
 17179 00003A8D 83C735                  	add     di,SF_ENTRY.size
 17180 00003A90 E2F0                    	loop    FCBTest
 17181                                  FCBScanDone:
 17182                                  
 17183                                  ;
 17184                                  ; Walk the SFT to eliminate all busy SFT's for this process.
 17185                                  ;
 17186 00003A92 31DB                    	XOR     BX,BX
 17187                                  Scan:
 17188 00003A94 53                      	push    bx
 17189 00003A95 E87A2D                  	call	SFFromSFN
 17190 00003A98 5B                      	pop     bx
 17191 00003A99 7301                    	jnc     short Scan1
 17192 00003A9B C3                      	retn
 17193                                  
 17194                                  ;M038
 17195                                  ; Do what the comment above says, check for busy state
 17196                                  ;
 17197                                  Scan1:
 17198                                  	;cmp	word [es:di],0
 17199                                  	;jz	short scan_next  ; MSDOS 3.3
 17200                                  	; MSDOS6.0
 17201 00003A9C 26833DFF                	cmp	word [es:di],sf_busy ; -1
 17202                                  	;cmp	word [es:di+SF_ENTRY.sf_ref_count],sf_busy
 17203                                  				; Is Sft busy? ;M038
 17204 00003AA0 7519                    	jnz	short scan_next
 17205                                  ;
 17206                                  ; we have a SFT that is busy. See if it is for the current process
 17207                                  ;
 17208 00003AA2 36A1[E802]              	mov     ax,[SS:PROC_ID]		; SS override
 17209                                  	;cmp	[es:di+31h],ax
 17210 00003AA6 26394531                	cmp	[es:di+SF_ENTRY.sf_PID],ax
 17211 00003AAA 750F                    	jnz	short scan_next
 17212 00003AAC 36A1[EA02]              	mov     ax,[SS:USER_ID]		; SS override
 17213                                  	;cmp	[es:di+2Fh],ax
 17214 00003AB0 2639452F                	cmp	[es:di+SF_ENTRY.sf_UID],ax
 17215 00003AB4 7505                    	jnz	short scan_next
 17216                                  ;
 17217                                  ; This SFT is labelled as ours.
 17218                                  ;
 17219 00003AB6 26C7050000              	mov	word [es:di],0
 17220                                  	;mov	word [es:di+SF_ENTRY.sf_ref_count],0
 17221                                  scan_next:
 17222 00003ABB 43                      	inc     bx
 17223 00003ABC EBD6                    	jmp     short Scan
 17224                                  
 17225                                  
 17226                                  ;============================================================================
 17227                                  ; CLOSE.ASM, MSDOS 6.0, 1991
 17228                                  ;============================================================================
 17229                                  ; 23/07/2018 - Retro DOS v3.0
 17230                                  
 17231                                  ;**	Internal Close and Commit calls to close a local or NET SFT.
 17232                                  ;
 17233                                  ;	DOS_CLOSE
 17234                                  ;	DOS_COMMIT
 17235                                  ;	FREE_SFT
 17236                                  ;	SetSFTTimes
 17237                                  ;
 17238                                  ;	Revision history:
 17239                                  ;
 17240                                  ;	   AN000  version 4.00	Jan. 1988
 17241                                  ;	   A005   PTM 3718 --- lost clusters when fastopen installed
 17242                                  ;	   A011   PTM 4766 --- C2 fastopen problem
 17243                                  
 17244                                  ;Installed = TRUE
 17245                                  
 17246                                  ;Break <DOS_CLOSE -- CLOSE FILE from SFT>
 17247                                  ;---------------------------------------------------------------------------
 17248                                  ;
 17249                                  ; Procedure Name : DOS_CLOSE
 17250                                  ;
 17251                                  ; Inputs:
 17252                                  ;	[THISSFT] set to the SFT for the file being used
 17253                                  ; Function:
 17254                                  ;	Close the indicated file via the SFT
 17255                                  ; Returns:
 17256                                  ;	sf_ref_count decremented otherwise
 17257                                  ;	ES:DI point to SFT
 17258                                  ;	Carry set if error
 17259                                  ;	    AX has error code
 17260                                  ; DS preserved, others destroyed
 17261                                  ;---------------------------------------------------------------------------
 17262                                  
 17263                                  ;hkn; DOS_CLOSE called from fcbio.asm and handle.asm. DS alreday set up.
 17264                                  
 17265                                  ; 23/07/2018 - IBMDOS.COM (MSDOS 3.3), 1987 - Offset 39D0h
 17266                                  
 17267                                  DOS_CLOSE:
 17268 00003ABE C43E[3605]              	LES	DI,[THISSFT]
 17269                                  	;mov	bx,[ES:DI+5]
 17270 00003AC2 268B5D05                	MOV	BX,[ES:DI+SF_ENTRY.sf_flags]
 17271                                  
 17272                                  ;	Network closes are handled entirely by the net code.
 17273                                  
 17274                                  	;test	bx,8000h
 17275 00003AC6 F7C30080                	TEST	BX,sf_isnet
 17276 00003ACA 7406                    	JZ	short LocalClose
 17277                                  
 17278                                  	;CallInstall Net_Close,MultNET,6
 17279 00003ACC B80611                  	mov     ax, 1106h
 17280 00003ACF CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - CLOSE REMOTE FILE
 17281                                  			; ES:DI -> SFT
 17282                                  			; SFT DPB field -> DPB of drive containing file
 17283                                  			; Return: CF set on error, AX = DOS error code
 17284                                  			; CF clear if successful
 17285 00003AD1 C3                      	retn
 17286                                  
 17287                                  ;
 17288                                  ; All closes release the sharing information.
 17289                                  ; No commit releases sharing information
 17290                                  ;
 17291                                  ; All closes decrement the ref count.
 17292                                  ; No commit decrements the ref count.
 17293                                  ;
 17294                                  LocalClose:
 17295 00003AD2 E897E5                  	call	EcritDisk
 17296 00003AD5 E80E01                  	CALL	SetSFTTimes
 17297 00003AD8 E89D00                  	CALL	FREE_SFT		; dec ref count or mark as busy
 17298                                  
 17299                                  ;hkn; SS is DOSDATA
 17300                                  	;Context DS
 17301 00003ADB 16                      	push	ss
 17302 00003ADC 1F                      	pop	ds
 17303                                  
 17304 00003ADD 50                      	push	ax
 17305 00003ADE 53                      	push	bx
 17306 00003ADF E87238                  	call	ShareEnd
 17307 00003AE2 5B                      	pop	bx
 17308 00003AE3 58                      	pop	ax
 17309                                  ;
 17310                                  ; Commit enters here. AX from commit MUST be <> 1, BX is flags word
 17311                                  ;
 17312                                  CloseEntry:
 17313 00003AE4 50                      	PUSH	AX
 17314                                  ;
 17315                                  ; File clean or device does not get stamped nor disk looked at.
 17316                                  ;
 17317                                  	;test	bx,0C0h
 17318 00003AE5 F7C3C000                	TEST	BX,devid_file_clean+devid_device
 17319                                  	;JZ	short rdir
 17320                                  	;JMP	FREE_SFT_OK		; either clean or device
 17321 00003AE9 757A                    	jnz	short FREE_SFT_OK
 17322                                  ;
 17323                                  ; Retrieve the directory entry for the file
 17324                                  ;
 17325                                  rdir:
 17326 00003AEB E89700                  	CALL	DirFromSFT
 17327                                  	;mov	al,5
 17328 00003AEE B005                    	MOV	AL,error_access_denied
 17329                                  	;JNC	short clook
 17330                                  	;JMP	CloseFinish		; pretend the close worked.
 17331 00003AF0 7274                    	jc	short CloseFinish
 17332                                  clook:
 17333                                  ;
 17334                                  ; ES:DI points to entry
 17335                                  ; DS:SI points to SFT
 17336                                  ; ES:BX points to buffer header
 17337                                  ;
 17338 00003AF2 57                      	push	di
 17339 00003AF3 56                      	push	si
 17340                                  	;lea	si,[si+20h] ; MSDOS 3.3
 17341 00003AF4 8D7420                  	LEA	SI,[SI+SF_ENTRY.sf_name]
 17342                                  ;
 17343                                  ; ES:DI point to directory entry
 17344                                  ; DS:SI point to unpacked name
 17345                                  ;
 17346 00003AF7 E888E4                  	call	XCHGP
 17347                                  ;
 17348                                  ; ES:DI point to unpacked name
 17349                                  ; DS:SI point to directory entry
 17350                                  ;
 17351 00003AFA E8570C                  	call	MetaCompare
 17352 00003AFD E882E4                  	call	XCHGP
 17353 00003B00 5E                      	pop	si
 17354 00003B01 5F                      	pop	di
 17355 00003B02 740B                    	JZ	short CLOSE_GO		; Name OK
 17356                                  Bye:	
 17357 00003B04 89F7                    	MOV	DI,SI
 17358 00003B06 1E                      	PUSH	DS
 17359 00003B07 07                      	POP	ES			; ES:DI points to SFT
 17360 00003B08 16                      	PUSH	SS
 17361 00003B09 1F                      	POP	DS
 17362 00003B0A F9                      	STC
 17363                                  	;mov	al,2
 17364 00003B0B B002                    	MOV	AL,error_file_not_found
 17365 00003B0D EB57                    	JMP	short CloseFinish
 17366                                  
 17367                                  CLOSE_GO:
 17368                                  	; MSDOS 6.0
 17369                                  	;TEST	[SI+SF_ENTRY.sf_mode],sf_isFCB	; FCB ?
 17370                                  	;JZ	short nofcb		; no, set dir attr, sf_attr
 17371                                  	; MSDOS 3.3 (& MSDOS 6.0)
 17372                                  	;mov	ch,[es:di+0Bh]
 17373 00003B0F 268A6D0B                	MOV	CH,[ES:DI+dir_entry.dir_attr]
 17374                                  	;mov	al,[si+4]
 17375 00003B13 8A4404                  	MOV	AL,[SI+SF_ENTRY.sf_attr]
 17376                                  
 17377                                  ;hkn; SS override
 17378 00003B16 36A2[0605]              	MOV	[SS:ATTRIB],AL
 17379                                  	; MSDOS 3.3
 17380 00003B1A E8B60F                  	call	MatchAttributes
 17381 00003B1D 75E5                    	JNZ	short Bye		; attributes do not match
 17382                                  	;JMP	SHORT setattr		;FT.
 17383                                  	; MSDOS 6.0
 17384                                  ;nofcb:
 17385                                  	;MOV	AL,[SI+SF_ENTRY.sf_attr] ;FT.		;AN000;
 17386                                  	;MOV	[ES:DI+dir_entry.dir_attr],AL ;FT.	;AN000;
 17387                                  setattr:
 17388                                  	; MSDOS 3.3 (& MSDOS6.0)
 17389                                  	;or	byte [es:di+0Bh],20h
 17390 00003B1F 26804D0B20              	OR	BYTE [ES:DI+dir_entry.dir_attr],attr_archive ;Set archive
 17391                                  	; MSDOS6.0
 17392                                  	;MOV	AX,[ES:DI+dir_entry.dir_first] ;AN011
 17393                                  					;F.O. save old first cluster
 17394                                  ;hkn; SS override
 17395                                  	;MOV	[SS:OLD_FIRSTCLUS],AX	;AN011;F.O. save old first cluster
 17396                                  
 17397                                  	;mov	ax,[si+0Bh]
 17398 00003B24 8B440B                  	MOV	AX,[SI+SF_ENTRY.sf_firclus]
 17399                                  	;mov	[es:di+1Ah],ax
 17400 00003B27 2689451A                	MOV	[ES:DI+dir_entry.dir_first],AX	;Set firclus pointer
 17401                                  	;mov	ax,[si+11h]
 17402 00003B2B 8B4411                  	MOV	AX,[SI+SF_ENTRY.sf_size]
 17403                                  	;mov	[es:di+1Ch],ax
 17404 00003B2E 2689451C                	MOV	[ES:DI+dir_entry.dir_size_l],AX	;Set size
 17405                                  	;mov	ax,[si+13h]
 17406 00003B32 8B4413                  	MOV	AX,[SI+SF_ENTRY.sf_size+2]
 17407                                  	;mov	[es:di+1Eh],ax
 17408 00003B35 2689451E                	MOV	[ES:DI+dir_entry.dir_size_h],AX
 17409                                  	;mov	ax,[si+0Fh]
 17410 00003B39 8B440F                  	MOV	AX,[SI+SF_ENTRY.sf_date]
 17411                                  	;mov	[es:di+18h],ax
 17412 00003B3C 26894518                	MOV	[ES:DI+dir_entry.dir_date],AX	;Set date
 17413                                  	;mov	ax,[si+0Dh]
 17414 00003B40 8B440D                  	MOV	AX,[SI+SF_ENTRY.sf_time]
 17415                                  	;mov	[es:di+16h],ax
 17416 00003B43 26894516                	MOV	[ES:DI+dir_entry.dir_time],AX	;Set time
 17417                                  
 17418                                  	; MSDOS 6.0
 17419                                  ;; File Tagging
 17420                                  	;TEST	byte [ES:BX+BUFFINFO.buf_flags],buf_dirty  
 17421                                  	;			  ;LB. if already dirty		    ;AN000;
 17422                                  	;JNZ	short yesdirty	  ;LB.  don't increment dirty count ;AN000;
 17423                                  	;call	INC_DIRTY_COUNT   ;LB.				    ;AN000;
 17424                                  	; MSDOS 3.3 (& MSDOS6.0)
 17425                                  	;or	byte [es:bx+5],40h
 17426 00003B47 26804F0540              	OR	byte [ES:BX+BUFFINFO.buf_flags],buf_dirty ;Buffer dirty
 17427                                  yesdirty:
 17428 00003B4C 1E                      	push	ds
 17429 00003B4D 56                      	push	si
 17430                                  	; MSDOS 6.0
 17431                                  	;MOV	CX,[SI.sf_firclus]	; do this for Fastopen
 17432                                  
 17433                                  ;hkn; SS override
 17434                                  	;MOV	AL,[SS:THISDRV]
 17435                                  	; MSDOS3.3 
 17436 00003B4E 16                      	push	ss
 17437 00003B4F 1F                      	pop	ds
 17438 00003B50 A0[1105]                	MOV	AL,[THISDRV]
 17439                                  ;;; 10/1/86  update fastopen cache
 17440                                  	; MSDOS 3.3 (& MSDOS6.0)
 17441 00003B53 52                      	PUSH	DX
 17442 00003B54 B400                    	MOV	AH,0			; dir entry update
 17443 00003B56 88C2                    	MOV	DL,AL			; drive number A=0, B=1,,,
 17444                                  	; MSDOS 6.0
 17445                                  	;OR	CX,CX			;AN005; first cluster 0; may be truncated
 17446                                  	;JNZ	short do_update2	;AN005; no, do update
 17447                                  	;MOV	AH,3			;AN005; do a delete cache entry
 17448                                  	;MOV	DI,[SI+SF_ENTRY.sf_dirsec]   ;AN005; cx:di = dir sector
 17449                                  	;MOV	CX,[SI+SF_ENTRY.sf_dirsec+2] ;AN005;
 17450                                  	;MOV	DH,[SI+SF_ENTRY.sf_dirpos]   ;AN005; dh= dir pos
 17451                                  	;JMP	SHORT do_update 	;AN011;F.O.
 17452                                  ;do_update2:				;AN011;F.O.
 17453                                  ;hkn; SS override fort OLD_FIRSTCLUS
 17454                                  	;CMP	CX,[SS:OLD_FIRSTCLUS]	;AN011;F.O. same as old first clusetr?
 17455                                  	;JZ	short do_update		;AN011;F.O. yes
 17456                                  	;MOV	AH,2			;AN011;F.O. delete the old entry
 17457                                  	;MOV	CX,[SS:OLD_FIRSTCLUS]	;AN011;F.O.
 17458                                  do_update:				;AN005;
 17459                                  ;hkn; SS is DOSDATA
 17460                                  	;Context DS
 17461                                  	;push	ss
 17462                                  	;pop	ds	
 17463                                  	; MSDOS 3.3 (& MSDOS6.0)
 17464 00003B58 E8B4F8                  	call	FastOpen_Update 	; invoke fastopen
 17465 00003B5B 5A                      	POP	DX
 17466                                  
 17467                                  ;;; 10/1/86  update fastopen cache
 17468 00003B5C E8CE23                  	call	FLUSHBUF		; flush all relevant buffers
 17469 00003B5F 5F                      	pop	di
 17470 00003B60 07                      	pop	es
 17471                                  	;mov	al,5
 17472 00003B61 B005                    	MOV	AL,error_access_denied
 17473 00003B63 7201                    	JC	short CloseFinish
 17474                                  FREE_SFT_OK:
 17475 00003B65 F8                      	CLC				; signal no error.
 17476                                  CloseFinish:
 17477                                  ;
 17478                                  ; Indicate to the device that the SFT is being closed.
 17479                                  ;
 17480                                  ;;;; 7/21/86
 17481 00003B66 9C                      	PUSHF				; save flag from DirFromSFT
 17482 00003B67 E81213                  	call	DEV_CLOSE_SFT
 17483 00003B6A 9D                      	POPF
 17484                                  ;;;; 7/21/86
 17485                                  ;
 17486                                  ; See if the ref count indicates that we have busied the SFT. If so, mark the
 17487                                  ; SFT as being free. Note that we do NOT need to be in critSFT as we are ONLY
 17488                                  ; going to be moving from busy to free.
 17489                                  ;
 17490 00003B6B 59                      	POP	CX			; get old ref count
 17491 00003B6C 9C                      	PUSHF
 17492 00003B6D 49                      	DEC	CX			; if cx != 1
 17493 00003B6E 7503                    	JNZ	short NoFree		; then do NOT free SFT
 17494 00003B70 26890D                  	mov	[es:di],cx
 17495                                  	;MOV	[ES:DI+SF_ENTRY.sf_ref_Count],CX ; mov [es:di+0],cx
 17496                                  NoFree:
 17497 00003B73 E8FEE4                  	call	LcritDisk
 17498 00003B76 9D                      	POPF
 17499 00003B77 C3                      	retn
 17500                                  
 17501                                  ;---------------------------------------------------------------------------
 17502                                  ;
 17503                                  ; Procedure Name : FREE_SFT
 17504                                  ;
 17505                                  ; ES:DI -> SFT. Decs sft_ref_count. If the count goes to 0, mark it as busy.
 17506                                  ; Flags preserved. Return old ref count in AX
 17507                                  ;
 17508                                  ; Note that busy is indicated by the SFT ref count being -1.
 17509                                  ;
 17510                                  ;---------------------------------------------------------------------------
 17511                                  
 17512                                  FREE_SFT:
 17513 00003B78 9C                      	PUSHF		; Save carry state
 17514 00003B79 268B05                  	mov	ax,[es:di]
 17515                                  	;MOV	AX,[ES:DI+SF_ENTRY.sf_ref_count]
 17516 00003B7C 48                      	DEC	AX
 17517 00003B7D 7501                    	JNZ	short SetCount
 17518 00003B7F 48                      	DEC	AX
 17519                                  SetCount:
 17520 00003B80 268705                  	xchg	ax,[es:di]
 17521                                  	;XCHG	AX,[ES:DI+SF_ENTRY.sf_ref_count]
 17522 00003B83 9D                      	POPF
 17523 00003B84 C3                      	retn
 17524                                  
 17525                                  ;----------------------------------------------------------------------------
 17526                                  ;
 17527                                  ; Procedure Name : DirFromSFT
 17528                                  ;
 17529                                  ;   DirFromSFT - locate a directory entry given an SFT.
 17530                                  ;
 17531                                  ;   Inputs:	ES:DI point to SFT
 17532                                  ;		DS = DOSDATA
 17533                                  ;   Outputs:
 17534                                  ;		EXTERR_LOCUS = errLOC_Disk
 17535                                  ;		CurBuf points to buffer
 17536                                  ;		Carry Clear -> operation OK
 17537                                  ;		    ES:DI point to entry
 17538                                  ;		    ES:BX point to buffer
 17539                                  ;		    DS:SI point to SFT
 17540                                  ;		Carry SET   -> operation failed
 17541                                  ;		    registers trashified
 17542                                  ;   Registers modified: ALL
 17543                                  ;----------------------------------------------------------------------------
 17544                                  
 17545                                  DirFromSFT:
 17546                                  	;mov	byte [EXTERR_LOCUS],2
 17547 00003B85 C606[D102]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 17548 00003B8A 06                      	push	es
 17549 00003B8B 57                      	push	di
 17550                                  	; MSDOS 3.3
 17551                                  	;mov	dx,[es:di+1Dh]
 17552 00003B8C 268B551D                	MOV	dx,[ES:DI+SF_ENTRY.sf_dirsec]
 17553                                  	; MSDOS 6.0
 17554                                  	;MOV	DX,[ES:DI+SF_ENTRY.sf_dirsec+2]  ;F.C. >32mb
 17555                                  	;MOV	[HIGH_SECTOR],DX		 ;F.C. >32mb
 17556                                  	;MOV	DX,[ES:DI+SF_ENTRY.sf_dirsec]
 17557                                  	;PUSH	word [HIGH_SECTOR]	;F.C. >32mb
 17558                                  	; MSDOS 3.3 (& MSDOS6.0)
 17559 00003B90 52                      	PUSH	DX
 17560 00003B91 E81520                  	call	FATREAD_SFT		; ES:BP points to DPB, [THISDRV] set
 17561                                  					; [THISDPB] set
 17562 00003B94 5A                      	POP	DX
 17563                                  	;POP	word [HIGH_SECTOR]	;F.C. >32mb
 17564 00003B95 7225                    	JC	short PopDone
 17565 00003B97 30C0                    	XOR	AL,AL			; Pre read
 17566                                  	;mov	byte [ALLOWED],18h
 17567 00003B99 C606[F702]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 17568 00003B9E E8E422                  	call	GETBUFFR
 17569 00003BA1 7219                    	JC	short PopDone
 17570 00003BA3 5E                      	pop	si
 17571 00003BA4 1F                      	pop	ds			; Get back SFT pointer
 17572                                  
 17573                                  ;hkn; SS override
 17574 00003BA5 36C43E[7405]            	LES	DI,[SS:CURBUF]
 17575                                  	;or	byte [es:di+5],4
 17576 00003BAA 26804D0504              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_isDIR
 17577 00003BAF 89FB                    	MOV	BX,DI			; ES:BX point to buffer header
 17578                                  	;lea	di,[di+10h]
 17579 00003BB1 8D7D10                  	LEA	DI,[DI+BUFINSIZ] 	; Point to buffer
 17580                                  	;mov	al,32
 17581 00003BB4 B020                    	MOV	AL,dir_entry.size
 17582 00003BB6 F6641F                  	MUL	byte [SI+SF_ENTRY.sf_dirpos]
 17583 00003BB9 01C7                    	ADD	DI,AX			; Point at the entry
 17584 00003BBB C3                      	retn				; carry is clear
 17585                                  
 17586                                  PopDone:
 17587 00003BBC 5F                      	pop	di
 17588 00003BBD 07                      	pop	es
 17589                                  PopDone_retn:
 17590 00003BBE C3                      	retn
 17591                                  
 17592                                  ;----------------------------------------------------------------------------
 17593                                  ;
 17594                                  ;**	DOS_Commit - UPdate Directory Entries
 17595                                  ;
 17596                                  ;	ENTRY	same as DOS_CLOSE (??? BUGBUG - update this jgl)
 17597                                  ;		(DS) = DOSGROUP
 17598                                  ;	EXIT	Same as DOS_CLOSE except ref_count field is not altered
 17599                                  ;	USES	all but DS
 17600                                  ;
 17601                                  ;----------------------------------------------------------------------------
 17602                                  ;
 17603                                  
 17604                                  DOS_COMMIT:
 17605                                  	;hkn; called from srvcall. DS already set up.
 17606 00003BBF C43E[3605]              	LES	DI,[THISSFT]
 17607                                  	;mov	bx,[es:di+5]
 17608 00003BC3 268B5D05                	MOV	BX,[ES:DI+SF_ENTRY.sf_flags]
 17609                                  	;test	bx,0C0h
 17610 00003BC7 F7C3C000                	TEST	BX,devid_file_clean+devid_device ;Clears carry
 17611 00003BCB 75F1                    	jnz	short PopDone_retn
 17612                                  	;test	bx,8000h
 17613 00003BCD F7C30080                	TEST	BX,sf_isnet
 17614 00003BD1 7406                    	JZ	short LOCAL_COMMIT
 17615                                  
 17616                                  ;IF NOT Installed
 17617                                  ;	transfer NET_COMMIT
 17618                                  ;ELSE
 17619                                  	;mov	ax,1107h
 17620 00003BD3 B80711                  	MOV	AX,(MultNET<<8)|7
 17621 00003BD6 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - COMMIT REMOTE FILE
 17622                                  			; ES:DI -> SFT
 17623                                  			; SFT DPB field -> DPB of drive containing file
 17624                                  			; Return: CF set on error, AX = DOS error code
 17625                                  			; CF clear if successful
 17626 00003BD8 C3                      	retn
 17627                                  ;ENDIF
 17628                                  
 17629                                  ;
 17630                                  ; Perform local commit operation by doing a close but not releaseing the SFT.
 17631                                  ; There are three ways we can do this.	One is to enter a critical section to
 17632                                  ; protect a potential free.  The second is to increment the ref count to mask
 17633                                  ; the close decrementing.
 17634                                  ;
 17635                                  ; The proper way is to let the caller's of close decide if a decrement should
 17636                                  ; be done.  We do this by providing another entry into close after the
 17637                                  ; decrement and after the share information release.
 17638                                  ;
 17639                                  LOCAL_COMMIT:
 17640 00003BD9 E890E4                  	call	EcritDisk
 17641                                  	; MSDOS6.0
 17642                                  	;call	EcritDisk	;PTM.
 17643 00003BDC E80700                  	call	SetSFTTimes
 17644 00003BDF B8FFFF                  	MOV	AX,-1
 17645 00003BE2 E8FFFE                  	call	CloseEntry
 17646                                  	; MSDOS 6.0
 17647                                  	;PUSHF			;PTM.				;AN000;
 17648                                  	;call	DEV_OPEN_SFT	;PTM.  increment device count	;AN000;
 17649                                  	;POPF			;PTM.				;AN000;
 17650                                  	;call	LcritDisk	;PTM.				;AN000;
 17651                                  localcommit_retn:
 17652 00003BE5 C3                      	retn
 17653                                  
 17654                                  ;Break	<SetSFTTimes - signal a change in the times for an SFT>
 17655                                  ;----------------------------------------------------------------------------
 17656                                  ;
 17657                                  ; Procedure Name : SetSFTTimes
 17658                                  ;
 17659                                  ;   SetSFTTimes - Examine the flags for a SFT and set the time appropriately.
 17660                                  ;   Reflect these times in other SFT's for the same file.
 17661                                  ;
 17662                                  ;   Inputs:	ES:DI point to SFT
 17663                                  ;		BX = sf_flags set apprpriately
 17664                                  ;   Outputs:	Set sft times to current time iff File & dirty & !nodate
 17665                                  ;   Registers modified: All except ES:DI, BX, AX
 17666                                  ;
 17667                                  ;----------------------------------------------------------------------------
 17668                                  
 17669                                  SetSFTTimes:
 17670                                  ;	File clean or device does not get stamped nor disk looked at.
 17671                                  	
 17672                                  	;test	bx,0C0h
 17673 00003BE6 F7C3C000                	TEST	BX,devid_file_clean+devid_device
 17674                                  	;retnz				; clean or device => no timestamp
 17675 00003BEA 75F9                    	jnz	short localcommit_retn
 17676                                  
 17677                                  ;	file and dirty. See if date is good
 17678                                  
 17679                                  	;test	bx,4000h
 17680 00003BEC F7C30040                	TEST	BX,sf_close_nodate
 17681                                  	;retnz				; nodate => no timestamp
 17682 00003BF0 75F3                    	jnz	short localcommit_retn
 17683                                  
 17684 00003BF2 50                      	push	ax
 17685 00003BF3 53                      	push	bx
 17686 00003BF4 E8C2DC                  	call	DATE16			; Date/Time to AX/DX
 17687                                  	;mov	[es:di+0Fh],ax
 17688 00003BF7 2689450F                	MOV	[ES:DI+SF_ENTRY.sf_date],AX
 17689                                  	;mov	[es:di+0Dh],dx
 17690 00003BFB 2689550D                	MOV	[ES:DI+SF_ENTRY.sf_time],DX
 17691 00003BFF 31C0                    	XOR	AX,AX
 17692                                  ;if installed
 17693                                  	;call	JShare + 14 * 4
 17694 00003C01 FF1E[9400]              	call	far [JShare+(14*4)]	; 14 = ShSU
 17695                                  ;else
 17696                                  ;	call	ShSU
 17697                                  ;endif
 17698 00003C05 5B                      	pop	bx
 17699 00003C06 58                      	pop	ax
 17700 00003C07 C3                      	retn
 17701                                  
 17702                                  ;============================================================================
 17703                                  ; DIRCALL.ASM, MSDOS 6.0, 1991
 17704                                  ;============================================================================
 17705                                  ; 23/07/2018 - Retro DOS v3.0
 17706                                  
 17707                                  ;TITLE DIRCALL - Directory manipulation internal calls
 17708                                  ;NAME  DIRCALL
 17709                                  
 17710                                  ;**	Low level directory manipulation routines for making removing and
 17711                                  ;	  verifying local or NET directories
 17712                                  ;
 17713                                  ;	DOS_MKDIR
 17714                                  ;	DOS_CHDIR
 17715                                  ;	DOS_RMDIR
 17716                                  ;
 17717                                  ;	Modification history:
 17718                                  ;
 17719                                  ;		Created: ARR 30 March 1983
 17720                                  
 17721                                  ;BREAK <DOS_MkDir - Make a directory entry>
 17722                                  ;---------------------------------------------------------------------------
 17723                                  ;
 17724                                  ; Procedure Name : DOS_MkDir
 17725                                  ;
 17726                                  ; Inputs:
 17727                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 17728                                  ;		terminated)
 17729                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 17730                                  ;		( = -1 if current dir not involved, else
 17731                                  ;		 Points to first char after last "/" of current dir part)
 17732                                  ;	[THISCDS] Points to CDS being used
 17733                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 17734                                  ; Function:
 17735                                  ;	Make a new directory
 17736                                  ; Returns:
 17737                                  ;	Carry Clear
 17738                                  ;		No error
 17739                                  ;	Carry Set
 17740                                  ;	    AX is error code
 17741                                  ;		error_path_not_found
 17742                                  ;			Bad path (not in curr dir part if present)
 17743                                  ;		error_bad_curr_dir
 17744                                  ;			Bad path in current directory part of path
 17745                                  ;		error_access_denied
 17746                                  ;			Already exists, device name
 17747                                  ; DS preserved, Others destroyed
 17748                                  ;---------------------------------------------------------------------------
 17749                                  
 17750                                  ;hkn; called from path.asm. DS already set up.
 17751                                  
 17752                                  DOS_MKDIR:
 17753 00003C08 E8C3E3                  	call	TestNet
 17754 00003C0B 7314                    	JNC	short LOCAL_MKDIR
 17755                                  
 17756                                  ;IF NOT Installed
 17757                                  ;	transfer NET_MKDIR
 17758                                  ;ELSE
 17759                                  	;mov	ax,1103h
 17760 00003C0D B80311                  	MOV	AX,(MultNET<<8)|3
 17761 00003C10 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - MAKE REMOTE DIRECTORY
 17762                                  			; SS = DOS CS
 17763                                  			; SDA first filename pointer -> fully-qualified directory name
 17764                                  			; SDA CDS pointer -> current directory
 17765                                  			; Return: CF set on error, AX = DOS error code
 17766                                  			; CF clear if successful
 17767 00003C12 C3                      	retn
 17768                                  ;ENDIF
 17769                                  
 17770                                  NODEACCERRJ:
 17771                                  	;mov	ax,5
 17772 00003C13 B80500                  	MOV	AX,error_access_denied
 17773                                  _BadRet:
 17774 00003C16 F9                      	STC
 17775 00003C17 E85AE4                  	call	LcritDisk
 17776 00003C1A C3                      	retn
 17777                                  
 17778                                  PATHNFJ:
 17779 00003C1B E856E4                  	call	LcritDisk
 17780 00003C1E E920FB                  	jmp	SET_MKND_ERR	; Map the MakeNode error and return
 17781                                  
 17782                                  LOCAL_MKDIR:
 17783 00003C21 E848E4                  	call	EcritDisk
 17784                                  ;
 17785                                  ; MakeNode requires an SFT to fiddle with. We Use a temp spot (RENBUF)
 17786                                  ;
 17787 00003C24 8C16[3805]              	MOV	[THISSFT+2],SS
 17788                                  
 17789                                  ;hkn; DOSDATA
 17790 00003C28 C706[3605][E003]        	MOV	WORD [THISSFT],RENBUF
 17791                                  ;
 17792                                  ;  NOTE: Need WORD PTR because MASM takes type of
 17793                                  ;   TempSFT (byte) instead of type of sf_mft (word).
 17794                                  ;
 17795 00003C2E C706[1304]0000          	MOV	WORD [RENBUF+SF_ENTRY.sf_MFT],0
 17796                                  				; make sure SHARER won't complain.
 17797                                  	;mov	al,10h
 17798 00003C34 B010                    	MOV	AL,attr_directory
 17799 00003C36 E8F313                  	call	MakeNode
 17800 00003C39 72E0                    	JC	short PATHNFJ
 17801 00003C3B 83F803                  	CMP	AX,3
 17802 00003C3E 74D3                    	JZ	short NODEACCERRJ ; Can't make a device into a directory
 17803 00003C40 C42E[2405]              	LES	BP,[THISDPB]	; Makenode zaps this
 17804 00003C44 C53E[7405]              	LDS	DI,[CURBUF]
 17805 00003C48 29FE                    	SUB	SI,DI
 17806 00003C4A 56                      	PUSH	SI		; Pointer to dir_first
 17807                                  	; MSDOS 6.0
 17808                                  	;PUSH	WORD [DI+BUFFINFO.buf_sector+2]	;F.C. >32mb
 17809                                  	; MSDOS 3.3 (& MSDOS 6.0)
 17810                                  	;push	word [di+6]
 17811 00003C4B FF7506                  	PUSH	WORD [DI+BUFFINFO.buf_sector] ; Sector of new node
 17812 00003C4E 16                      	push	ss
 17813 00003C4F 1F                      	pop	ds
 17814 00003C50 FF36[5805]              	PUSH	word [DIRSTART]	; Parent for .. entry
 17815 00003C54 31C0                    	XOR	AX,AX
 17816 00003C56 A3[5805]                	MOV	[DIRSTART],AX	; Null directory
 17817 00003C59 E81413                  	call	NEWDIR
 17818 00003C5C 7260                    	JC	short NODEEXISTSPOPDEL ; No room
 17819 00003C5E E8510B                  	call	GETENT		; First entry
 17820 00003C61 725B                    	JC	short NODEEXISTSPOPDEL ; Screw up
 17821 00003C63 C43E[7405]              	LES	DI,[CURBUF]
 17822                                  
 17823                                  	; MSDOS 6.0
 17824                                  	;TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 17825                                  	;			 ;LB. if already dirty		    ;AN000;
 17826                                  	;JNZ	short yesdirty_	 ;LB.   don't increment dirty count ;AN000;
 17827                                  	;call	INC_DIRTY_COUNT  ;LB.				    ;AN000;
 17828                                  	
 17829                                  	; MSDOS 3.3 (& MSDOS 6.0)
 17830                                  	;or	byte [es:di+5],40h
 17831 00003C67 26804D0540              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 17832                                  ;yesdirty_:
 17833                                  	;add	di,16
 17834 00003C6C 83C710                  	ADD	DI,BUFINSIZ	; Point at buffer
 17835 00003C6F B82E20                  	MOV	AX,202EH	; ". "
 17836 00003C72 8B16[5805]              	MOV	DX,[DIRSTART]	; Point at itself
 17837 00003C76 E88F13                  	call	SETDOTENT
 17838 00003C79 B82E2E                  	MOV	AX,2E2EH	; ".."
 17839 00003C7C 5A                      	POP	DX		; Parent
 17840 00003C7D E88813                  	call	SETDOTENT
 17841 00003C80 C42E[2405]              	LES	BP,[THISDPB]
 17842                                  	;mov	byte [ALLOWED],18h
 17843 00003C84 C606[F702]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 17844 00003C89 5A                      	POP	DX		; Entry sector
 17845                                  	; MSDOS 6.0
 17846                                  	;POP	word [HIGH_SECTOR] ;F.C. >32mb
 17847                                  
 17848 00003C8A 30C0                    	XOR	AL,AL		; Pre read
 17849 00003C8C E8F621                  	call	GETBUFFR
 17850 00003C8F 7256                    	JC	short NODEEXISTSP
 17851 00003C91 8B16[5805]              	MOV	DX,[DIRSTART]
 17852 00003C95 C53E[7405]              	LDS	DI,[CURBUF]
 17853                                  	;or	byte [di+5],4
 17854 00003C99 804D0504                	OR	byte [DI+BUFFINFO.buf_flags],buf_isDIR
 17855 00003C9D 5E                      	POP	SI		; dir_first pointer
 17856 00003C9E 01FE                    	ADD	SI,DI
 17857 00003CA0 8914                    	MOV	[SI],DX
 17858 00003CA2 31D2                    	XOR	DX,DX
 17859 00003CA4 895402                  	MOV	[SI+2],DX	; Zero size
 17860 00003CA7 895404                  	MOV	[SI+4],DX
 17861                                  DIRUP:
 17862                                  	; MSDOS 6.0
 17863                                  	;TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty  
 17864                                  	;			 ;LB. if already dirty 		   ;AN000;
 17865                                  	;JNZ	short yesdirty2	 ;LB.  don't increment dirty count ;AN000;
 17866                                  	;call	INC_DIRTY_COUNT  ;LB.				   ;AN000;
 17867                                  	
 17868                                  	; MSDOS 3.3 (& MSDOS 6.0)
 17869                                  	;or	byte [di+5],40h
 17870 00003CAA 804D0540                	OR	byte [DI+BUFFINFO.buf_flags],buf_dirty	; Dirty buffer
 17871                                  ;yesdirty2:
 17872 00003CAE 16                      	push	ss
 17873 00003CAF 1F                      	pop	ds
 17874 00003CB0 268A4600                	mov	al,[es:bp]
 17875                                  	; 18/05/2019
 17876                                  	;MOV	AL,[ES:BP+DPB.DRIVE]  ; mov al,[es:bp+0]
 17877 00003CB4 E87622                  	call	FLUSHBUF
 17878                                  	;mov	ax,5
 17879 00003CB7 B80500                  	MOV	AX,error_access_denied
 17880 00003CBA E8B7E3                  	call	LcritDisk
 17881 00003CBD C3                      	retn
 17882                                  
 17883                                  NODEEXISTSPOPDEL:
 17884 00003CBE 5A                      	POP	DX		; Parent
 17885 00003CBF 5A                      	POP	DX		; Entry sector
 17886                                  	; MSDOS 6.0 
 17887                                  	;POP	word [HIGH_SECTOR] ; F.C. >32mb
 17888 00003CC0 C42E[2405]              	LES	BP,[THISDPB]
 17889                                  	;mov	byte [ALLOWED],18h
 17890 00003CC4 C606[F702]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 17891 00003CC9 30C0                    	XOR	AL,AL		; Pre read
 17892 00003CCB E8B721                  	call	GETBUFFR
 17893 00003CCE 7217                    	JC	short NODEEXISTSP
 17894 00003CD0 C53E[7405]              	LDS	DI,[CURBUF]
 17895                                  	;or	byte [di+5],4
 17896 00003CD4 804D0504                	OR	byte [DI+BUFFINFO.buf_flags],buf_isDIR
 17897 00003CD8 5E                      	POP	SI		; dir_first pointer
 17898 00003CD9 01FE                    	ADD	SI,DI
 17899                                  	;sub	si,1Ah ; 26
 17900 00003CDB 83EE1A                  	SUB	SI,dir_entry.dir_first	;Point back to start of dir entry
 17901 00003CDE C604E5                  	MOV	BYTE [SI],0E5H	; Free the entry
 17902 00003CE1 E8C6FF                  	CALL	DIRUP		; Error doesn't matter since erroring anyway
 17903                                  NODEEXISTS:
 17904 00003CE4 E92CFF                  	JMP	NODEACCERRJ ; 10/08/2018
 17905                                  
 17906                                  NODEEXISTSP:
 17907 00003CE7 5E                      	POP	SI		; Clean stack
 17908 00003CE8 EBFA                    	JMP	short NODEEXISTS
 17909                                  
 17910                                  ;BREAK <DOS_ChDir -- Verify a directory>
 17911                                  ;----------------------------------------------------------------------------
 17912                                  ;
 17913                                  ; Procedure Name : DOS_ChDir
 17914                                  ;
 17915                                  ; Inputs:
 17916                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 17917                                  ;		terminated)
 17918                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 17919                                  ;		( = -1 if current dir not involved, else
 17920                                  ;		 Points to first char after last "/" of current dir part)
 17921                                  ;	[THISCDS] Points to CDS being used May not be NUL
 17922                                  ; Function:
 17923                                  ;	Validate the path for potential new current directory
 17924                                  ; Returns:
 17925                                  ;	NOTE:
 17926                                  ;	    [SATTRIB] is modified by this call
 17927                                  ;	Carry Clear
 17928                                  ;	    CX is cluster number of the DIR, LOCAL CDS ONLY
 17929                                  ;		Caller must NOT set ID fields on a NET CDS.
 17930                                  ;	Carry Set
 17931                                  ;	    AX is error code
 17932                                  ;		error_path_not_found
 17933                                  ;			Bad path
 17934                                  ;		error_access_denied
 17935                                  ;			device or file name
 17936                                  ; DS preserved, Others destroyed
 17937                                  ;----------------------------------------------------------------------------
 17938                                  
 17939                                  ;hkn; called from path.asm and dir2.asm. DS already set up.
 17940                                  
 17941                                  DOS_CHDIR:
 17942 00003CEA E8E1E2                  	call	TestNet
 17943 00003CED 7306                    	JNC	short LOCAL_CHDIR
 17944                                  
 17945                                  ;IF NOT Installed
 17946                                  ;	transfer NET_CHDIR
 17947                                  ;ELSE
 17948                                  	;mov	ax,1105h
 17949 00003CEF B80511                  	MOV	AX,(MultNET<<8)|5
 17950 00003CF2 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - CHDIR
 17951                                  			; SS = DOS CS
 17952                                  			; SDA first filename pointer -> fully-qualified directory name
 17953                                  			; SDA CDS pointer -> current directory
 17954                                  			; Return: CF set on error, AX = DOS error code
 17955                                  			; CF clear if successful
 17956 00003CF4 C3                      	retn
 17957                                  ;ENDIF
 17958                                  
 17959                                  LOCAL_CHDIR:
 17960 00003CF5 E874E3                  	call	EcritDisk
 17961                                  	; MSDOS 6.0
 17962                                  	;TEST	word [ES:DI+curdir.flags],curdir_splice ;PTM.
 17963                                  	;JZ	short nojoin			   ;PTM.
 17964                                  	;MOV	word [ES:DI+curdir.ID],0FFFFH	   ;PTM.
 17965                                  ;nojoin:
 17966                                  	; MSDOS 3.3 (& MSDOS 6.0)
 17967 00003CF8 C606[F802]00            	MOV	byte [NoSetDir],0 ; FALSE
 17968                                  	;mov	byte [SATTRIB],16h
 17969 00003CFD C606[0805]16            	MOV	byte [SATTRIB],attr_directory+attr_system+attr_hidden
 17970                                  				; Dir calls can find these
 17971                                  ; DOS 3.3  6/24/86 FastOpen
 17972 00003D02 800E[6E0F]01            	OR	byte [FastOpenFlg],FastOpen_Set	   ; set fastopen flag
 17973 00003D07 E82B0B                  	call	GETPATH
 17974                                  	;PUSHF							;AN000;
 17975                                  	;AND	byte [FastOpenFlg],Fast_yes	   ; clear it all ;AC000;
 17976                                  	;POPF							;AN000;
 17977                                  ; DOS 3.3  6/24/86 FastOpen
 17978                                  
 17979                                  	; MSDOS 3.3
 17980 00003D0A C606[6E0F]00            	mov	byte [FastOpenFlg],0
 17981                                  	;mov	ax,3
 17982 00003D0F B80300                  	MOV	AX,error_path_not_found
 17983 00003D12 7207                    	JC	short ChDirDone
 17984 00003D14 753A                    	JNZ	short NOTDIRPATH	; Path not a DIR
 17985 00003D16 8B0E[5805]              	MOV	CX,[DIRSTART]		; Get cluster number
 17986 00003D1A F8                      	CLC
 17987                                  ChDirDone:
 17988 00003D1B E856E3                  	call	LcritDisk
 17989 00003D1E C3                      	retn
 17990                                  
 17991                                  ;BREAK <DOS_RmDir -- Remove a directory>
 17992                                  ;----------------------------------------------------------------------------
 17993                                  ;
 17994                                  ; Procedure Name : DOS_RmDir
 17995                                  ;
 17996                                  ; Inputs:
 17997                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 17998                                  ;		terminated)
 17999                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 18000                                  ;		( = -1 if current dir not involved, else
 18001                                  ;		 Points to first char after last "/" of current dir part)
 18002                                  ;	[THISCDS] Points to CDS being used
 18003                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 18004                                  ; Function:
 18005                                  ;	Remove a directory
 18006                                  ;	NOTE: Attempt to remove current directory must be detected by caller
 18007                                  ; Returns:
 18008                                  ;	NOTE:
 18009                                  ;	    [SATTRIB] is modified by this call
 18010                                  ;	Carry Clear
 18011                                  ;		No error
 18012                                  ;	Carry Set
 18013                                  ;	    AX is error code
 18014                                  ;		error_path_not_found
 18015                                  ;			Bad path (not in curr dir part if present)
 18016                                  ;		error_bad_curr_dir
 18017                                  ;			Bad path in current directory part of path
 18018                                  ;		error_access_denied
 18019                                  ;			device or file name, root directory
 18020                                  ;			Bad directory ('.' '..' messed up)
 18021                                  ; DS preserved, Others destroyed
 18022                                  ;----------------------------------------------------------------------------
 18023                                  
 18024                                  ;hkn; called from path.asm. DS already set up.
 18025                                  
 18026                                  DOS_RMDIR:
 18027 00003D1F E8ACE2                  	call	TestNet
 18028 00003D22 7306                    	JNC	short LOCAL_RMDIR
 18029                                  
 18030                                  ;IF NOT Installed
 18031                                  ;	transfer NET_RMDIR
 18032                                  ;ELSE
 18033                                  	;mov	ax,1101h
 18034 00003D24 B80111                  	MOV	AX,(MultNET<<8)|1
 18035 00003D27 CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - REMOVE REMOTE DIRECTORY
 18036                                  			; SS = DOS CS
 18037                                  			; SDA first filename pointer -> fully-qualified directory name
 18038                                  			; SDA CDS pointer -> current directory
 18039                                  			; Return: CF set on error, AX = DOS error code
 18040                                  			; CF clear if successful
 18041 00003D29 C3                      	retn
 18042                                  ;ENDIF
 18043                                  
 18044                                  LOCAL_RMDIR:
 18045 00003D2A E83FE3                  	call	EcritDisk
 18046 00003D2D C606[F802]00            	MOV	byte [NoSetDir],0
 18047                                  	;mov	byte [SATTRIB],16h
 18048 00003D32 C606[0805]16            	MOV	byte [SATTRIB],attr_directory+attr_system+attr_hidden
 18049                                  					; Dir calls can find these
 18050 00003D37 E8FB0A                  	call	GETPATH
 18051 00003D3A 720C                    	JC	short NOPATH		; Path not found
 18052 00003D3C 7512                    	JNZ	short NOTDIRPATH	; Path not a DIR
 18053 00003D3E 8B3E[5805]              	MOV	DI,[DIRSTART]
 18054 00003D42 09FF                    	OR	DI,DI			; Root ?
 18055 00003D44 750D                    	JNZ	short rmdir_get_buf	; No
 18056 00003D46 EB08                    	JMP	SHORT NOTDIRPATH
 18057                                  
 18058                                  NOPATH:
 18059                                  	;mov	ax,3
 18060 00003D48 B80300                  	MOV	AX,error_path_not_found
 18061 00003D4B E9C8FE                  	JMP	_BadRet
 18062                                  
 18063                                  NOTDIRPATHPOP:
 18064                                  	; MSDOS 6.0
 18065                                  	;POP	AX			  ;F.C. >32mb
 18066 00003D4E 58                      	POP	AX
 18067                                  NOTDIRPATHPOP2:
 18068 00003D4F 58                      	POP	AX
 18069                                  NOTDIRPATH:
 18070 00003D50 E9C0FE                  	JMP	NODEACCERRJ
 18071                                  
 18072                                  rmdir_get_buf:
 18073 00003D53 C53E[7405]              	LDS	DI,[CURBUF]
 18074 00003D57 29FB                    	SUB	BX,DI		; Compute true offset
 18075 00003D59 53                      	PUSH	BX		; Save entry pointer
 18076                                  	
 18077                                  	; MSDOS 6.0
 18078                                  	;PUSH	WORD [DI+BUFFINFO.buf_sector+2] ;F.C. >32mb
 18079                                  	
 18080                                  	; MSDOS 3.3 (& MSDOS 6.0)
 18081                                  	;push	word [di+6]
 18082 00003D5A FF7506                  	PUSH	WORD [DI+BUFFINFO.buf_sector] ; Save sector number
 18083                                  
 18084                                  ;hkn; SS is DOSDATA
 18085                                  	;context DS
 18086 00003D5D 16                      	push	ss
 18087 00003D5E 1F                      	pop	ds
 18088                                  	;context ES
 18089 00003D5F 16                      	push	ss
 18090 00003D60 07                      	pop	es
 18091                                  
 18092                                  ;hkn; NAME1 is in DOSDATA
 18093 00003D61 BF[E604]                	MOV	DI,NAME1
 18094 00003D64 B03F                    	MOV	AL,'?'
 18095 00003D66 B90B00                  	MOV	CX,11
 18096 00003D69 F3AA                    	REP	STOSB
 18097 00003D6B 30C0                    	XOR	AL,AL
 18098 00003D6D AA                      	STOSB				; Nul terminate it
 18099 00003D6E E84E0D                  	call	STARTSRCH		; Set search
 18100 00003D71 E83B0A                  	call	GETENTRY		; Get start of directory
 18101 00003D74 72D8                    	JC	short NOTDIRPATHPOP	; Screw up
 18102 00003D76 8E1E[7605]              	MOV	DS,[CURBUF+2]
 18103 00003D7A 89DE                    	MOV	SI,BX
 18104 00003D7C AD                      	LODSW
 18105                                  	;CMP	AX,(' ' SHL 8) OR '.'   ; First entry '.'?
 18106 00003D7D 3D2E20                  	cmp	ax,202Eh ; ". "
 18107 00003D80 75CC                    	JNZ	short NOTDIRPATHPOP	; Nope
 18108                                  	;add     si,30
 18109 00003D82 83C61E                  	ADD	SI,dir_entry.size-2 ; Next entry
 18110 00003D85 AD                      	LODSW
 18111                                  	;CMP	AX,('.' SHL 8) OR '.'   ; Second entry '..'?
 18112                                  	;cmp	ax, '..'
 18113 00003D86 3D2E2E                  	cmp	ax,2E2Eh
 18114 00003D89 75C3                    	JNZ	short NOTDIRPATHPOP	; Nope
 18115                                  
 18116                                  ;hkn; SS is DOSDATA
 18117                                  	;context DS
 18118 00003D8B 16                      	push	ss
 18119 00003D8C 1F                      	pop	ds
 18120 00003D8D C706[F402]0200          	MOV	word [LASTENT],2	; Skip . and ..
 18121 00003D93 E8190A                  	call	GETENTRY		; Get next entry
 18122 00003D96 72B6                    	JC	short NOTDIRPATHPOP	; Screw up
 18123                                  	;mov	byte [ATTRIB],16h
 18124 00003D98 C606[0605]16            	MOV	byte [ATTRIB],attr_directory+attr_hidden+attr_system
 18125 00003D9D E81C09                  	call	SRCH			; Do a search
 18126 00003DA0 73AC                    	JNC	short NOTDIRPATHPOP	; Found another entry!
 18127 00003DA2 803E[F602]00            	CMP	byte [FAILERR],0
 18128 00003DA7 75A5                    	JNZ	short NOTDIRPATHPOP	; Failure of search due to I 24 FAIL
 18129 00003DA9 C42E[2405]              	LES	BP,[THISDPB]
 18130 00003DAD 8B1E[5805]              	MOV	BX,[DIRSTART]
 18131 00003DB1 E83517                  	call	RELEASE 		; Release data in sub dir
 18132 00003DB4 7298                    	JC	short NOTDIRPATHPOP	; Screw up
 18133 00003DB6 5A                      	POP	DX			; Sector # of entry
 18134                                  	;POP	word [HIGH_SECTOR]	; F.C. >32mb
 18135                                  	;mov	byte [ALLOWED],18h
 18136 00003DB7 C606[F702]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 18137 00003DBC 30C0                    	XOR	AL,AL			; Pre read
 18138 00003DBE E8C420                  	call	GETBUFFR		; Get sector back
 18139 00003DC1 728C                    	JC	short NOTDIRPATHPOP2	; Screw up
 18140 00003DC3 C53E[7405]              	LDS	DI,[CURBUF]
 18141                                  	;or	byte [di+5],4
 18142 00003DC7 804D0504                	OR	byte [DI+BUFFINFO.buf_flags],buf_isDIR
 18143 00003DCB 5B                      	POP	BX			; Pointer to start of entry
 18144 00003DCC 01FB                    	ADD	BX,DI			; Corrected
 18145 00003DCE C607E5                  	MOV	BYTE [BX],0E5H		; Free the entry
 18146                                  
 18147                                  ;DOS 3.3 FastOpen  6/16/86  F.C.
 18148 00003DD1 1E                      	PUSH	DS
 18149                                  
 18150                                  ;hkn; SS is DOSDATA
 18151                                  	;context DS
 18152 00003DD2 16                      	push	ss
 18153 00003DD3 1F                      	pop	ds
 18154                                  
 18155                                  	; MSDOS 6.0
 18156                                  	;call	FastOpen_Delete 	; call fastopen to delete an entry
 18157                                  
 18158                                  	; MSDOS 3.3
 18159                                  _FastOpen_Delete:
 18160 00003DD4 50                      	push	ax
 18161 00003DD5 8B36[4A05]              	mov	si,[WFP_START]
 18162 00003DD9 BB[430F]                	mov	bx,FastTable
 18163                                  	;mov	al,3  ; FONC_delete
 18164 00003DDC B003                    	mov	al,FONC_delete
 18165 00003DDE FF5F02                  	call	far [BX+2]  ; FastTable+2
 18166 00003DE1 58                      	pop	ax
 18167                                  
 18168 00003DE2 1F                      	POP	DS
 18169                                  ;DOS 3.3 FastOpen  6/16/86  F.C.
 18170                                  
 18171 00003DE3 E9C4FE                  	JMP	DIRUP			; In MKDIR, dirty buffer and flush
 18172                                  
 18173                                  ;============================================================================
 18174                                  ; DISK.ASM, MSDOS 6.0, 1991
 18175                                  ;============================================================================
 18176                                  ; 23/07/2018 - Retro DOS v3.0 
 18177                                  
 18178                                  ;	TITLE	DISK - Disk utility routines
 18179                                  ;	NAME	Disk
 18180                                  
 18181                                  ;**	Low level Read and write routines for local SFT I/O on files and devs
 18182                                  ;
 18183                                  ;	SWAPCON
 18184                                  ;	SWAPBACK
 18185                                  ;	DOS_READ
 18186                                  ;	DOS_WRITE
 18187                                  ;	get_io_sft
 18188                                  ;	DirRead
 18189                                  ;	FIRSTCLUSTER
 18190                                  ;	SET_BUF_AS_DIR
 18191                                  ;	FATSecRd
 18192                                  ;	DREAD
 18193                                  ;	CHECK_WRITE_LOCK
 18194                                  ;	CHECK_READ_LOCK
 18195                                  ;
 18196                                  ;	Revision history:
 18197                                  ;
 18198                                  ;		A000   version 4.00  Jan. 1988
 18199                                  ;
 18200                                  ;----------------------------------------------------------------------------
 18201                                  ;
 18202                                  ; M065 : B#5276. On raw read/write of a block of characters if a critical
 18203                                  ;		error happens, DOS retries the entire block assuming that
 18204                                  ;		zero characters were transferred. Modified the code to take
 18205                                  ;		into account the number of characters transfered before
 18206                                  ;		retrying the operation.
 18207                                  ;
 18208                                  ;----------------------------------------------------------------------------
 18209                                  ;
 18210                                  
 18211                                  ;Installed = TRUE
 18212                                  
 18213                                  ;Break	<SwapCon, Swap Back - Old-style I/O to files>
 18214                                  
 18215                                  ; **** Drivers for file input from devices ****
 18216                                  ;----------------------------------------------------------------------------
 18217                                  ;   Indicate that there is no more I/O occurring through another SFT outside
 18218                                  ;   of handles 0 and 1
 18219                                  ;
 18220                                  ;   Inputs:	DS is DOSDATA
 18221                                  ;   Outputs:	CONSWAP is set to false.
 18222                                  ;   Registers modified: none
 18223                                  ;----------------------------------------------------------------------------
 18224                                  
 18225                                  ; IBMDOS.COM (MSDOS 3.3) - Offset 3CF8h
 18226                                  
 18227                                  SWAPBACK:
 18228 00003DE6 C606[0303]00            	MOV	BYTE [CONSWAP],0	; signal no conswaps
 18229 00003DEB C3                      	retn
 18230                                  
 18231                                  ;----------------------------------------------------------------------------
 18232                                  ;
 18233                                  ; Procedure Name : SWAPCON
 18234                                  ;
 18235                                  ;   Copy ThisSFT to CONSFT for use by the 1-12 primitives.
 18236                                  ;
 18237                                  ;   Inputs:	ThisSFT as the sft of the desired file
 18238                                  ;		DS is DOSDATA
 18239                                  ;   Outputs:	CONSWAP is set.  CONSFT = ThisSFT.
 18240                                  ;   Registers modified: none
 18241                                  ;--------------------------------------------------------------------------
 18242                                  
 18243                                  SWAPCON:
 18244                                  	; MSDOS 3.3
 18245                                  	;push	es
 18246                                  	;push	di
 18247                                  	;mov	byte [CONSWAP],1
 18248                                  	;les	di,[THISSFT]
 18249                                  	;mov	word [CONSFT],di
 18250                                  	;mov	word [CONSFT+2],es
 18251                                  	;pop	di
 18252                                  	;pop	es
 18253                                  	;retn
 18254                                  
 18255                                  	; MSDOS 6.0
 18256 00003DEC C606[0303]01            	mov	byte [CONSWAP],1	; ConSwap = TRUE
 18257 00003DF1 50                      	push	ax
 18258 00003DF2 A1[3605]                	mov	ax,[THISSFT]
 18259 00003DF5 A3[7805]                	mov	[CONSFT],ax
 18260 00003DF8 A1[3805]                	mov	ax,[THISSFT+2]
 18261 00003DFB A3[7A05]                	mov	[CONSFT+2],ax
 18262 00003DFE 58                      	pop	ax
 18263 00003DFF C3                      	retn
 18264                                  
 18265                                  
 18266                                  ;Break	<DOS_READ -- MAIN READ ROUTINE AND DEVICE IN ROUTINES>
 18267                                  ;-----------------------------------------------------------------------------
 18268                                  ;
 18269                                  ; Inputs:
 18270                                  ;	ThisSFT set to the SFT for the file being used
 18271                                  ;	[DMAADD] contains transfer address
 18272                                  ;	CX = No. of bytes to read
 18273                                  ;	DS = DOSDATA
 18274                                  ; Function:
 18275                                  ;	Perform read operation
 18276                                  ; Outputs:
 18277                                  ;    Carry clear
 18278                                  ;	SFT Position and cluster pointers updated
 18279                                  ;	CX = No. of bytes read
 18280                                  ;	ES:DI point to SFT
 18281                                  ;    Carry set
 18282                                  ;	AX is error code
 18283                                  ;	CX = 0
 18284                                  ;	ES:DI point to SFT
 18285                                  ; DS preserved, all other registers destroyed
 18286                                  ;
 18287                                  ;-----------------------------------------------------------------------------
 18288                                  
 18289                                  ;hkn; called from fcbio.asm, handle.asm and dev.asm. DS is be set up.
 18290                                  
 18291                                  DOS_READ:
 18292 00003E00 C43E[3605]              	LES	DI,[THISSFT]
 18293                                  
 18294                                  ; Verify that the sft has been opened in a mode that allows reading.
 18295                                  
 18296                                  	;mov	al,[es:di+2]
 18297 00003E04 268A4502                	MOV	AL,[ES:DI+SF_ENTRY.sf_mode]
 18298                                  	;and	al,0Fh
 18299 00003E08 240F                    	AND	AL,access_mask
 18300                                  	;cmp	al,1
 18301 00003E0A 3C01                    	CMP	AL,open_for_write
 18302 00003E0C 7503                    	JNE	short READ_NO_MODE		;Is read or both
 18303 00003E0E E94205                  	jmp	SET_ACC_ERR
 18304                                  
 18305                                  READ_NO_MODE:
 18306 00003E11 E81904                  	call	SETUP
 18307 00003E14 E30B                    	JCXZ	NoIORet 		; no bytes to read - fast return
 18308 00003E16 E8CAE1                  	call	IsSFTNet
 18309 00003E19 7408                    	JZ	short LOCAL_READ
 18310                                  
 18311                                  ;IF NOT Installed
 18312                                  ;	transfer NET_READ
 18313                                  ;ELSE
 18314                                  	;mov	ax,1108h
 18315 00003E1B B80811                  	MOV	AX,(MultNET<<8)|8
 18316 00003E1E CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - READ FROM REMOTE FILE
 18317                                  			; ES:DI -> SFT
 18318                                  			; SFT DPB field -> DPB of drive containing file
 18319                                  			; CX = number of bytes, SS = DOS CS, SDA DTA field -> user buffer
 18320                                  			; Return: CF set on error, CX = bytes read
 18321 00003E20 C3                      	retn
 18322                                  ;ENDIF
 18323                                  
 18324                                  ; The user ended up requesting 0 bytes of input.  We do nothing for this case
 18325                                  ; except return immediately.
 18326                                  
 18327                                  NoIORet:
 18328 00003E21 F8                      	CLC
 18329 00003E22 C3                      	retn
 18330                                  
 18331                                  LOCAL_READ:
 18332                                  	;test	word [es:di+5],80h
 18333 00003E23 26F745058000            	TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device  ; Check for named device I/O
 18334 00003E29 750F                    	JNZ	short READDEV
 18335                                  	;mov	byte [EXTERR_LOCUS],2
 18336 00003E2B C606[D102]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 18337 00003E30 E839E2                  	call	EcritDisk
 18338 00003E33 E8D804                  	call	DISKREAD
 18339                                  
 18340                                  critexit:
 18341 00003E36 E83BE2                  	call	LcritDisk
 18342 00003E39 C3                      	retn
 18343                                  
 18344                                  ; We are reading from a device. Examine the status of the device to see if we
 18345                                  ; can short-circuit the I/O. If the device in the EOF state or if it is the
 18346                                  ; null device, we can safely indicate no transfer.
 18347                                  
 18348                                  READDEV:
 18349                                  	;mov	byte [EXTERR_LOCUS],4
 18350 00003E3A C606[D102]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev
 18351                                  	;mov	bl,[es:di+5]
 18352 00003E3F 268A5D05                	MOV	BL,[ES:DI+SF_ENTRY.sf_flags]
 18353 00003E43 C43E[DA02]              	LES	DI,[DMAADD]
 18354                                  	;test	bl,40h
 18355 00003E47 F6C340                  	test	BL,devid_device_EOF	; End of file?
 18356 00003E4A 7407                    	JZ	short ENDRDDEVJ3
 18357                                  	;test	bl,4
 18358 00003E4C F6C304                  	test	BL,devid_device_null	; NUL device?
 18359 00003E4F 7405                    	JZ	short TESTRAW 		; NO
 18360 00003E51 30C0                    	XOR	AL,AL			; Indicate EOF by setting zero
 18361                                  ENDRDDEVJ3:
 18362 00003E53 E9BC00                  	JMP	ENDRDDEVJ2
 18363                                  
 18364                                  ;
 18365                                  ; We need to hit the device.  Figure out if we do a raw read or we do the
 18366                                  ; bizarre std_con_string_input.
 18367                                  ;
 18368                                  TESTRAW:
 18369                                  	;test	bl,20h
 18370 00003E56 F6C320                  	test	BL,devid_device_raw	; Raw mode?
 18371 00003E59 7508                    	JNZ	short DVRDRAW 		; Yes, let the device do all local editing
 18372                                  	;test	bl,1
 18373 00003E5B F6C301                  	test	BL,devid_device_con_in	; Is it console device?
 18374 00003E5E 7447                    	JZ	short NOTRDCON
 18375 00003E60 E9E500                  	JMP	READCON
 18376                                  
 18377                                  DVRDRAW:
 18378 00003E63 06                      	PUSH	ES
 18379 00003E64 1F                      	POP	DS			; Xaddr to DS:DI
 18380                                  
 18381                                  	; MSDOS 6.0
 18382                                  ;SR;
 18383                                  ;Check for win386 presence -- if present, do polled read of characters
 18384                                  ;
 18385                                  	;test	byte [ss:IsWIN386],1
 18386                                  	;jz	short ReadRawRetry	;not present
 18387                                  	;test	bl,devid_device_con_in	;is it console device
 18388                                  	;jz	short ReadRawRetry	;no, do normal read
 18389                                  	;jmp	do_polling		;yes, do win386 polling loop
 18390                                  
 18391                                  ReadRawRetry:
 18392 00003E65 89FB                    	MOV	BX,DI			; DS:BX transfer addr
 18393 00003E67 31C0                    	XOR	AX,AX			; Media Byte, unit = 0
 18394 00003E69 89C2                    	MOV	DX,AX			; Start at 0
 18395 00003E6B E8B010                  	call	SETREAD
 18396 00003E6E 1E                      	PUSH	DS			; Save Seg part of Xaddr
 18397                                  
 18398                                  ;hkn; SS override
 18399 00003E6F 36C536[3605]            	LDS	SI,[SS:THISSFT]
 18400 00003E74 E88010                  	call	DEVIOCALL
 18401 00003E77 89FA                    	MOV	DX,DI			; DS:DX is preserved by INT 24
 18402 00003E79 B486                    	MOV	AH,86H			; Read error
 18403                                  
 18404                                  ;hkn; SS override
 18405 00003E7B 368B3E[0903]            	MOV	DI,[SS:DEVCALL_REQSTAT]
 18406                                  	; MSDOS 3.3
 18407                                  	;test	di,8000h
 18408                                  	;jz	short CRDROK
 18409                                  	; MSDOS 6.0
 18410 00003E80 09FF                    	or	di,di
 18411 00003E82 7919                    	jns	short CRDROK		; no errors
 18412                                  	; MSDOS 3.3 (& MSDOS 6.0)
 18413 00003E84 E8A319                  	call	CHARHARD
 18414 00003E87 89D7                    	MOV	DI,DX			; DS:DI is Xaddr
 18415                                  
 18416                                  	; MSDOS 6.0
 18417                                  	;add	di,[ss:callscnt]	; update ptr and count to reflect the	M065
 18418                                  	;sub	cx,[ss:callscnt]	; number of chars xferred		M065
 18419                                  
 18420                                  	; MSDOS 3.3 (& MSDOS 6.0)
 18421 00003E89 08C0                    	OR	AL,AL
 18422 00003E8B 7410                    	JZ	short CRDROK		; Ignore
 18423 00003E8D 3C03                    	CMP	AL,3
 18424 00003E8F 7403                    	JZ	short CRDFERR 		; fail.
 18425 00003E91 1F                      	POP	DS			; Recover saved seg part of Xaddr
 18426                                  	; 19/05/2019
 18427 00003E92 EBD1                    	JMP	short ReadRawRetry	; Retry
 18428                                  
 18429                                  ;
 18430                                  ; We have encountered a device-driver error.  We have informed the user of it
 18431                                  ; and he has said for us to fail the system call.
 18432                                  ;
 18433                                  CRDFERR:
 18434 00003E94 5F                      	POP	DI			; Clean stack
 18435                                  DEVIOFERR:
 18436                                  
 18437                                  ;hkn; SS override
 18438 00003E95 36C43E[3605]            	LES	DI,[SS:THISSFT]
 18439 00003E9A E9B404                  	jmp	SET_ACC_ERR_DS
 18440                                  
 18441                                  CRDROK:
 18442 00003E9D 5F                      	POP	DI			; Chuck saved seg of Xaddr
 18443 00003E9E 89D7                    	MOV	DI,DX
 18444                                  
 18445                                  ;hkn; SS override
 18446 00003EA0 36033E[1803]            	ADD	DI,[ss:CALLSCNT]	; Amount transferred
 18447 00003EA5 EBAC                    	JMP	SHORT ENDRDDEVJ3
 18448                                  
 18449                                  ; We are going to do a cooked read on some character device. There is a
 18450                                  ; problem here, what does the data look like? Is it a terminal device, line
 18451                                  ; CR line CR line CR, or is it file data, line CR LF line CR LF? Does it have
 18452                                  ; a ^Z at the end which is data, or is the ^Z not data?  In any event we're
 18453                                  ; going to do this: Read in pieces up to CR (CRs included in data) or ^z (^z
 18454                                  ; included in data). this "simulates" the way con works in cooked mode
 18455                                  ; reading one line at a time. With file data, however, the lines will look
 18456                                  ; like, LF line CR. This is a little weird.
 18457                                  
 18458                                  NOTRDCON:
 18459 00003EA7 8CC0                    	MOV	AX,ES
 18460 00003EA9 8ED8                    	MOV	DS,AX
 18461 00003EAB 89FB                    	MOV	BX,DI
 18462 00003EAD 31D2                    	XOR	DX,DX
 18463 00003EAF 89D0                    	MOV	AX,DX
 18464 00003EB1 51                      	PUSH	CX
 18465 00003EB2 B90100                  	MOV	CX,1
 18466 00003EB5 E86610                  	call	SETREAD
 18467 00003EB8 59                      	POP	CX
 18468                                  
 18469                                  ;hkn; SS override
 18470 00003EB9 36C536[3605]            	LDS	SI,[SS:THISSFT]
 18471                                  	;lds	si,[si+7]
 18472 00003EBE C57407                  	LDS	SI,[SI+SF_ENTRY.sf_devptr]
 18473                                  DVRDLP:
 18474 00003EC1 E89117                  	call	DSKSTATCHK
 18475 00003EC4 E83310                  	call	DEVIOCALL2
 18476 00003EC7 57                      	PUSH	DI		; Save "count" done
 18477 00003EC8 B486                    	MOV	AH,86H
 18478                                  
 18479                                  ;hkn; SS override
 18480 00003ECA 368B3E[0903]            	MOV	DI,[SS:DEVCALL_REQSTAT]
 18481                                  	
 18482                                  	; MSDOS 3.3
 18483                                  	;test	di, 8000h
 18484                                  	;jz	short CRDOK
 18485                                  	; MSDOS 6.0
 18486 00003ECF 09FF                    	or	di,di
 18487 00003ED1 7917                    	jns	short CRDOK
 18488                                  	
 18489 00003ED3 E85419                  	call	CHARHARD
 18490 00003ED6 5F                      	POP	DI
 18491                                  
 18492                                  ;hkn; SS override
 18493 00003ED7 36C706[1803]0100        	MOV	word [SS:CALLSCNT],1
 18494 00003EDE 3C01                    	CMP	AL,1
 18495 00003EE0 74DF                    	JZ	short DVRDLP		;Retry
 18496 00003EE2 3C03                    	CMP	AL,3
 18497 00003EE4 74AF                    	JZ	short DEVIOFERR		; FAIL
 18498 00003EE6 30C0                    	XOR	AL,AL			; Ignore, Pick some random character
 18499 00003EE8 EB12                    	JMP	SHORT DVRDIGN
 18500                                  
 18501                                  CRDOK:
 18502 00003EEA 5F                      	POP	DI
 18503                                  
 18504                                  ;hkn; SS override
 18505 00003EEB 36833E[1803]01          	CMP	word [SS:CALLSCNT],1
 18506 00003EF1 751F                    	JNZ	short ENDRDDEVJ2
 18507 00003EF3 1E                      	PUSH	DS
 18508                                  
 18509                                  ;hkn; SS override
 18510 00003EF4 368E1E[1603]            	MOV	DS,[SS:CALLXAD+2]
 18511 00003EF9 8A05                    	MOV	AL,[DI]			; Get the character we just read
 18512 00003EFB 1F                      	POP	DS
 18513                                  DVRDIGN:
 18514                                  
 18515                                  ;hkn; SS override
 18516 00003EFC 36FF06[1403]            	INC	WORD [SS:CALLXAD]	; Next character
 18517 00003F01 36C706[0903]0000        	MOV	word [SS:DEVCALL_REQSTAT],0
 18518 00003F08 47                      	INC	DI			; Next character
 18519 00003F09 3C1A                    	CMP	AL,1AH			; ^Z?
 18520 00003F0B 7405                    	JZ	short ENDRDDEVJ2	; Yes, done zero set (EOF)
 18521 00003F0D 3C0D                    	CMP	AL,c_CR 		; CR?
 18522 00003F0F E0B0                    	LOOPNZ	DVRDLP			; Loop if no, else done
 18523 00003F11 40                      	INC	AX			; Resets zero flag so NOT EOF, unless
 18524                                  					;  AX=FFFF which is not likely
 18525                                  ENDRDDEVJ2:
 18526 00003F12 EB1F                    	JMP	short ENDRDDEV		;changed short to long for win386
 18527                                  
 18528                                  	;  MSDOS 6.0
 18529                                  ;;SR;
 18530                                  ;;Polling code for raw read on CON when WIN386 is present
 18531                                  ;;
 18532                                  ;;At this point -- ds:di is transfer address
 18533                                  ;;		  cx is count
 18534                                  ;;
 18535                                  ;
 18536                                  ;do_polling:
 18537                                  ;	mov	bx,di			;ds:bx is Xfer address
 18538                                  ;	xor	ax,ax
 18539                                  ;	mov	dx,ax
 18540                                  ;	call	setread			;prepare device packet
 18541                                  ;
 18542                                  ;do_io:
 18543                                  ;;
 18544                                  ;;Change read to a NON-DESTRUCTIVE READ, NO WAIT
 18545                                  ;;
 18546                                  ;	mov	byte ptr es:[bx+2],DEVRDND	;Change command code
 18547                                  ;	push	ds
 18548                                  ;	lds	si,[THISSFT]		;get device header
 18549                                  ;	call	deviocall		;call device driver
 18550                                  ;	pop	ds
 18551                                  ;	
 18552                                  ;	test	es:[bx.REQSTAT],STERR	;check if error
 18553                                  ;	jz	check_busy		;no
 18554                                  ;
 18555                                  ;	push	ds
 18556                                  ;	mov	dx,di
 18557                                  ;	invoke 	charhard		;invoke int 24h handler
 18558                                  ;	mov	di,dx
 18559                                  ;	or	al,al
 18560                                  ;	jz	pop_done_read		;ignore by user, assume read done
 18561                                  ;	cmp	al,3
 18562                                  ;	jz	devrderr		;user asked to fail
 18563                                  ;	pop	ds
 18564                                  ;	jmp	do_io			;user asked to retry
 18565                                  ;
 18566                                  ;check_busy:
 18567                                  ;	test	es:[bx.REQSTAT],0200h	;see if busy bit set
 18568                                  ;	jnz	no_char			;yes, no character available
 18569                                  ;;
 18570                                  ;;Character is available. Read in 1 character at a time until all characters
 18571                                  ;;are read in or no character is available
 18572                                  ;;
 18573                                  ;	mov	byte ptr es:[bx+2],DEVRD	;command code is READ now
 18574                                  ;	mov	word ptr es:[bx+18],1		;change count to 1 character
 18575                                  ;	push	ds
 18576                                  ;	lds	si,[THISSFT]
 18577                                  ;	call	deviocall
 18578                                  ;
 18579                                  ;	mov	dx,di
 18580                                  ;	mov	ah,86h
 18581                                  ;	mov	di,es:[bx.REQSTAT]	;get returned status
 18582                                  ;	test	di,STERR		;was there an error during read?
 18583                                  ;	jz	next_char		;no,read next character
 18584                                  ;
 18585                                  ;	invoke	charhard		;invoke int 24h handler
 18586                                  ;	mov	di,dx			;restore di
 18587                                  ;	or	al,al			;
 18588                                  ;	jz	pop_done_read		;ignore by user,assume read is done
 18589                                  ;	cmp	al,3
 18590                                  ;	jz	devrderr		;user issued a 'fail',indicate error
 18591                                  ;	pop	ds
 18592                                  ;	jmp	do_io			;user issued a retry
 18593                                  ;
 18594                                  ;next_char:
 18595                                  ;	pop	ds
 18596                                  ;	mov	di,dx
 18597                                  ;	dec	cx			;decrement count
 18598                                  ;	jcxz	done_read		;all characters read in
 18599                                  ;	inc	word ptr es:[bx+14]	;update transfer address
 18600                                  ;	jmp	do_io			;read next character in
 18601                                  ;
 18602                                  ;devrderr:
 18603                                  ;	pop	di			;discard segment address
 18604                                  ;	les	di,[THISSFT]
 18605                                  ;	transfer SET_ACC_ERR_DS		;indicate error
 18606                                  ;
 18607                                  ;no_char:
 18608                                  ;;
 18609                                  ;;Since no character is available, we let win386 switch the VM out
 18610                                  ;;
 18611                                  ;	push	ax
 18612                                  ;	mov	ah,84h
 18613                                  ;	int	2ah			;indicate idle to WIN386
 18614                                  ;;
 18615                                  ;;When control returns from WIN386, we continue the raw read
 18616                                  ;;
 18617                                  ;	pop	ax
 18618                                  ;	jmp	do_io
 18619                                  ;
 18620                                  ;pop_done_read:
 18621                                  ;	pop	ds
 18622                                  ;done_read:
 18623                                  ;	add	di,[CALLSCNT]
 18624                                  ;	jmp	ENDRDDEVJ3	;jump back to normal DOS raw read exit
 18625                                  
 18626                                  TRANBUF:
 18627 00003F14 AC                      	LODSB
 18628 00003F15 AA                      	STOSB
 18629 00003F16 3C0D                    	CMP	AL,c_CR 	; Check for carriage return
 18630 00003F18 7503                    	JNZ	short NORMCH
 18631 00003F1A C6040A                  	MOV	BYTE [SI],c_LF
 18632                                  NORMCH:
 18633 00003F1D 3C0A                    	CMP	AL,c_LF
 18634 00003F1F E0F3                    	LOOPNZ	TRANBUF
 18635 00003F21 7507                    	JNZ	short ENDRDCON
 18636 00003F23 31F6                    	XOR	SI,SI		; Cause a new buffer to be read
 18637 00003F25 E85CE4                  	call	OUTT		; Transmit linefeed
 18638 00003F28 0C01                    	OR	AL,1		; Clear zero flag--not end of file
 18639                                  ENDRDCON:
 18640                                  
 18641                                  ;hkn; SS is DOSDATA
 18642 00003F2A 16                      	push	ss
 18643 00003F2B 1F                      	pop	ds
 18644 00003F2C E8B7FE                  	CALL	SWAPBACK
 18645 00003F2F 8936[2200]              	MOV	[CONTPOS],SI
 18646                                  ENDRDDEV:
 18647                                  
 18648                                  ;hkn; SS is DOSDATA
 18649 00003F33 16                      	push	ss
 18650 00003F34 1F                      	pop	ds
 18651                                  
 18652 00003F35 893E[5005]              	MOV	[NEXTADD],DI
 18653 00003F39 7509                    	JNZ	short SETSFTC 	; Zero set if Ctrl-Z found in input
 18654 00003F3B C43E[3605]              	LES	DI,[THISSFT]
 18655                                  	;and	byte [es:di+5],0BFh
 18656 00003F3F 26806505BF              	AND	BYTE [ES:DI+SF_ENTRY.sf_flags],~devid_device_EOF 
 18657                                  					; Mark as no more data available
 18658                                  SETSFTC:
 18659 00003F44 E8EA04                  	call	SETSFT
 18660 00003F47 C3                      	retn
 18661                                  
 18662                                  READCON:
 18663 00003F48 E8A1FE                  	CALL	SWAPCON
 18664 00003F4B 8B36[2200]              	MOV	SI,[CONTPOS]
 18665 00003F4F 09F6                    	OR	SI,SI
 18666 00003F51 75C1                    	JNZ	short TRANBUF
 18667 00003F53 803E[2902]80            	CMP	BYTE [CONBUF],128
 18668 00003F58 7406                    	JZ	short GETBUF
 18669 00003F5A C706[2902]80FF          	MOV	WORD [CONBUF],0FF80H ; Set up 128-byte buffer with no template
 18670                                  GETBUF:
 18671 00003F60 51                      	PUSH	CX
 18672 00003F61 06                      	PUSH	ES
 18673 00003F62 57                      	PUSH	DI
 18674                                  
 18675                                  ;hkn; CONBUF is in DOSDATA
 18676 00003F63 BA[2902]                	MOV	DX,CONBUF
 18677                                  
 18678 00003F66 E89BE1                  	call	_$STD_CON_STRING_INPUT	; Get input buffer
 18679 00003F69 5F                      	POP	DI
 18680 00003F6A 07                      	POP	ES
 18681 00003F6B 59                      	POP	CX
 18682                                  
 18683                                  ;hkn; CONBUF is in DOSDATA
 18684 00003F6C BE[2B02]                	MOV	SI,CONBUF+2
 18685                                  
 18686 00003F6F 803C1A                  	CMP	BYTE [SI],1AH	; Check for Ctrl-Z in first character
 18687 00003F72 75A0                    	JNZ	short TRANBUF
 18688 00003F74 B01A                    	MOV	AL,1AH
 18689 00003F76 AA                      	STOSB
 18690 00003F77 4F                      	DEC	DI
 18691 00003F78 B00A                    	MOV	AL,c_LF
 18692 00003F7A E807E4                  	call	OUTT		; Send linefeed
 18693 00003F7D 31F6                    	XOR	SI,SI
 18694 00003F7F EBA9                    	JMP	ENDRDCON
 18695                                  
 18696                                  ; 24/07/2018 - Retro DOS v3.0
 18697                                  
 18698                                  ;Break	<DOS_WRITE -- MAIN WRITE ROUTINE AND DEVICE OUT ROUTINES>
 18699                                  ;---------------------------------------------------------------------------
 18700                                  ;
 18701                                  ; Procedure Name : DOS_WRITE
 18702                                  ;
 18703                                  ; Inputs:
 18704                                  ;	ThisSFT set to the SFT for the file being used
 18705                                  ;	[DMAADD] contains transfer address
 18706                                  ;	CX = No. of bytes to write
 18707                                  ; Function:
 18708                                  ;	Perform write operation
 18709                                  ;	NOTE: If CX = 0 on input, file is truncated or grown
 18710                                  ;		to current sf_position
 18711                                  ; Outputs:
 18712                                  ;    Carry clear
 18713                                  ;	SFT Position and cluster pointers updated
 18714                                  ;	CX = No. of bytes written
 18715                                  ;	ES:DI point to SFT
 18716                                  ;    Carry set
 18717                                  ;	AX is error code
 18718                                  ;	CX = 0
 18719                                  ;	ES:DI point to SFT
 18720                                  ; DS preserved, all other registers destroyed
 18721                                  ;---------------------------------------------------------------------------
 18722                                  
 18723                                  ;hkn; called from fcbio2.asm, handle.asm and dev.asm. DS is set up at this 
 18724                                  ;hkn; point to DOSDATA.
 18725                                  
 18726                                  DOS_WRITE:
 18727 00003F81 C43E[3605]              	LES	DI,[THISSFT]
 18728                                  	;mov	al,[ES:DI+2]
 18729 00003F85 268A4502                	MOV	AL,[ES:DI+SF_ENTRY.sf_mode]
 18730                                  	;and	al,0Fh
 18731 00003F89 240F                    	AND	AL,access_mask
 18732                                  	;cmp	al,0
 18733 00003F8B 3C00                    	CMP	AL,open_for_read
 18734 00003F8D 7503                    	JNE	short Check_FCB_RO		 ;Is write or both
 18735                                  BadMode:
 18736 00003F8F E9C103                  	jmp	SET_ACC_ERR
 18737                                  
 18738                                  ;
 18739                                  ; NOTE: The following check for writting to a Read Only File is performed
 18740                                  ;	    ONLY on FCBs!!!!
 18741                                  ;	We ALLOW writes to Read Only files via handles to allow a CREATE
 18742                                  ;	    of a read only file which can then be written to.
 18743                                  ;	This is OK because we are NOT ALLOWED to OPEN a RO file via handles
 18744                                  ;	    for writting, or RE-CREATE an EXISTING RO file via handles. Thus,
 18745                                  ;	    CREATing a NEW RO file, or RE-CREATing an existing file which
 18746                                  ;	    is NOT RO to be RO, via handles are the only times we can write
 18747                                  ;	    to a read-only file.
 18748                                  ;
 18749                                  Check_FCB_RO:
 18750                                  	;test	word [es:di+2],8000h
 18751 00003F92 26F745020080            	TEST	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB
 18752 00003F98 7407                    	JZ	short WRITE_NO_MODE	; Not an FCB
 18753                                  	;test	byte [es:di+4],1
 18754 00003F9A 26F6450401              	TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_read_only
 18755 00003F9F 75EE                    	JNZ	short BadMode 		; Can't write to Read_Only files via FCB
 18756                                  WRITE_NO_MODE:
 18757 00003FA1 E88902                  	call	SETUP
 18758 00003FA4 E83CE0                  	call	IsSFTNet
 18759 00003FA7 7406                    	JZ	short LOCAL_WRITE
 18760                                  
 18761                                  ;IF NOT Installed
 18762                                  ;	transfer NET_WRITE
 18763                                  ;ELSE
 18764                                  	;mov	ax,1109h
 18765 00003FA9 B80911                  	MOV	AX,(MultNET<<8)|9
 18766 00003FAC CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - WRITE TO REMOTE FILE
 18767                                  			; ES:DI -> SFT
 18768                                  			; SFT DPB field -> DPB of drive containing file
 18769                                  			; CX = number of bytes, SS = DOS CS, SDA DTA field -> user buffer
 18770                                  			; Return: CF set on error, CX = bytes written
 18771 00003FAE C3                      	retn
 18772                                  ;ENDIF
 18773                                  
 18774                                  LOCAL_WRITE:
 18775                                  	;test	word [es:di+5],80h
 18776 00003FAF 26F745058000            	TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device ; Check for named device I/O
 18777 00003FB5 7552                    	jnz	short WRTDEV
 18778                                  	;mov	byte [EXTERR_LOCUS],2
 18779 00003FB7 C606[D102]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 18780 00003FBC E8ADE0                  	call	EcritDisk
 18781                                  
 18782 00003FBF E89E04                  	call	DISKWRITE
 18783                                  
 18784                                  	; MSDOS 6.0
 18785                                  ;; Extended Open
 18786                                  	;JC	short nocommit
 18787                                  	;LES	DI,[THISSFT]
 18788                                  	;TEST	word [ES:DI+SF_ENTRY.sf_mode],auto_commit_write
 18789                                  	;JZ	short nocommit
 18790                                  	;PUSH	CX
 18791                                  	;call	DOS_COMMIT
 18792                                  	;POP	CX
 18793                                  ;nocommit:
 18794                                  ;; Extended Open
 18795 00003FC2 E8AFE0                  	call	LcritDisk
 18796 00003FC5 C3                      	retn
 18797                                  
 18798                                  DVWRTRAW:
 18799 00003FC6 31C0                    	XOR	AX,AX			; Media Byte, unit = 0
 18800 00003FC8 E8860F                  	call	SETWRITE
 18801 00003FCB 1E                      	PUSH	DS			; Save seg of transfer
 18802                                  
 18803                                  ;hkn; SS override
 18804 00003FCC 36C536[3605]            	LDS	SI,[SS:THISSFT]
 18805 00003FD1 E8230F                  	call	DEVIOCALL		; DS:SI -> DEVICE
 18806                                  
 18807 00003FD4 89FA                    	MOV	DX,DI			; Offset part of Xaddr saved in DX
 18808 00003FD6 B487                    	MOV	AH,87H
 18809                                  
 18810                                  ;hkn; SS override
 18811 00003FD8 368B3E[0903]            	MOV	DI,[SS:DEVCALL_REQSTAT]
 18812                                  
 18813                                  	; MSDOS 3.3
 18814                                  	;test	di,8000h
 18815                                  	;jz	short CWRTROK
 18816                                  
 18817                                  	; MSDOS 6.0
 18818 00003FDD 09FF                    	or	di,di
 18819 00003FDF 7914                    	jns	short CWRTROK
 18820                                  	
 18821                                  	; MSDOS 3.3 (& MSDOS 6.0)
 18822 00003FE1 E84618                  	call	CHARHARD
 18823                                  
 18824                                  	; MSDOS 6.0
 18825                                  	;sub	cx,[ss:callscnt]	; update ptr & count to reflect	M065
 18826                                  	;mov	bx,dx			; number of chars xferred	M065
 18827                                  	;add	bx,[ss:callscnt]		;				M065
 18828                                  	;mov	di,bx			;				M065
 18829                                  	
 18830                                  	; MSDOS 3.3
 18831 00003FE4 89D3                    	MOV	BX,DX			; Recall transfer addr		M065
 18832                                  
 18833                                  	; MSDOS 3.3 (& MSDOS 6.0)
 18834 00003FE6 08C0                    	OR	AL,AL
 18835 00003FE8 740B                    	JZ	short CWRTROK 		; Ignore
 18836 00003FEA 3C03                    	CMP	AL,3
 18837 00003FEC 7403                    	JZ	short CWRFERR
 18838 00003FEE 1F                      	POP	DS			; Recover saved seg of transfer
 18839 00003FEF EBD5                    	JMP	short DVWRTRAW		; Try again
 18840                                  
 18841                                  CWRFERR:
 18842 00003FF1 58                      	POP	AX			; Chuck saved seg of transfer
 18843 00003FF2 E99FFE                  	JMP	CRDFERR 		; Will pop one more stack element
 18844                                  
 18845                                  CWRTROK:
 18846 00003FF5 58                      	POP	AX			; Chuck saved seg of transfer
 18847 00003FF6 1F                      	POP	DS
 18848 00003FF7 A1[1803]                	MOV	AX,[CALLSCNT]		; Get actual number of bytes transferred
 18849                                  ENDWRDEV:
 18850 00003FFA C43E[3605]              	LES	DI,[THISSFT]
 18851 00003FFE 89C1                    	MOV	CX,AX
 18852 00004000 E85004                  	call	ADDREC
 18853 00004003 C3                      	retn
 18854                                  
 18855                                  WRTNUL:
 18856 00004004 89CA                    	MOV	DX,CX			;Entire transfer done
 18857                                  WRTCOOKJ:
 18858 00004006 E98D00                  	JMP	WRTCOOKDONE
 18859                                  
 18860                                  WRTDEV:
 18861                                  	;mov	byte [EXTERR_LOCUS],4
 18862 00004009 C606[D102]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev
 18863                                  	;or	byte [es:di+5],40h
 18864 0000400E 26804D0540              	OR	BYTE [ES:DI+SF_ENTRY.sf_flags],devid_device_EOF
 18865                                  					; Reset EOF for input
 18866                                  	;mov	bl,[es:di+5]
 18867 00004013 268A5D05                	MOV	BL,[ES:DI+SF_ENTRY.sf_flags]
 18868 00004017 31C0                    	XOR	AX,AX
 18869 00004019 E3DF                    	JCXZ	ENDWRDEV		; problem of creating on a device.
 18870 0000401B 1E                      	PUSH	DS
 18871 0000401C 88D8                    	MOV	AL,BL
 18872 0000401E C51E[DA02]              	LDS	BX,[DMAADD]		; Xaddr to DS:BX
 18873 00004022 89DF                    	MOV	DI,BX			; Xaddr to DS:DI
 18874 00004024 31D2                    	XOR	DX,DX			; Set starting point
 18875                                  	;test	al,20h
 18876 00004026 A820                    	test	AL,devid_device_raw	; Raw?
 18877                                  	;JZ	short TEST_DEV_CON
 18878                                  	;JMP	DVWRTRAW
 18879 00004028 759C                    	jnz	short DVWRTRAW
 18880                                  
 18881                                  TEST_DEV_CON:
 18882                                  	;test	al,2
 18883 0000402A A802                    	test	AL,devid_device_con_out ; Console output device?
 18884 0000402C 756E                    	jnz	short WRITECON
 18885                                  	;test	al,4
 18886 0000402E A804                    	test	AL,devid_device_null
 18887 00004030 75D2                    	JNZ	short WRTNUL
 18888 00004032 89D0                    	MOV	AX,DX
 18889 00004034 803F1A                  	CMP	BYTE [BX],1Ah		; ^Z?
 18890 00004037 74CD                    	JZ	short WRTCOOKJ		; Yes, transfer nothing
 18891 00004039 51                      	PUSH	CX
 18892 0000403A B90100                  	MOV	CX,1
 18893 0000403D E8110F                  	call	SETWRITE
 18894 00004040 59                      	POP	CX
 18895                                  
 18896                                  ;hkn; SS override
 18897 00004041 36C536[3605]            	LDS	SI,[SS:THISSFT]
 18898                                  ;
 18899                                  ;SR; Removed X25 support from here
 18900                                  ;
 18901                                  	;lds	si,[si+7]
 18902 00004046 C57407                  	LDS	SI,[SI+SF_ENTRY.sf_devptr]
 18903                                  DVWRTLP:
 18904 00004049 E80916                  	call	DSKSTATCHK
 18905 0000404C E8AB0E                  	call	DEVIOCALL2
 18906 0000404F 57                      	PUSH	DI
 18907 00004050 B487                    	MOV	AH,87H
 18908                                  
 18909                                  ;hkn; SS override
 18910 00004052 368B3E[0903]            	MOV	DI,[SS:DEVCALL_REQSTAT]
 18911                                  	
 18912                                  	; MSDOS 3.3
 18913                                  	;test	di,8000h
 18914                                  	;jz	short CWROK
 18915                                  
 18916                                  	; MSDOS 6.0
 18917 00004057 09FF                    	or	di,di
 18918 00004059 7916                    	jns	short CWROK
 18919                                  	
 18920                                  	; MSDOS 3.3 (& MSDOS 6.0)
 18921 0000405B E8CC17                  	call	CHARHARD
 18922 0000405E 5F                      	POP	DI
 18923                                  
 18924                                  ;hkn; SS override
 18925 0000405F 36C706[1803]0100        	MOV	word [SS:CALLSCNT],1
 18926 00004066 3C01                    	CMP	AL,1
 18927 00004068 74DF                    	JZ	short DVWRTLP 	; Retry
 18928 0000406A 08C0                    	OR	AL,AL
 18929 0000406C 740C                    	JZ	short DVWRTIGN	; Ignore
 18930                                  	; 10/08/2018
 18931 0000406E E923FE                  	JMP	CRDFERR 	; Fail, pops one stack element
 18932                                  
 18933                                  CWROK:
 18934 00004071 5F                      	POP	DI
 18935                                  
 18936                                  ;hkn; SS override
 18937 00004072 36833E[1803]00          	CMP	word [SS:CALLSCNT],0
 18938 00004078 741C                    	JZ	short WRTCOOKDONE
 18939                                  DVWRTIGN:
 18940 0000407A 42                      	INC	DX
 18941                                  
 18942                                  ;hkn; SS override for CALLXAD
 18943 0000407B 36FF06[1403]            	INC	WORD [SS:CALLXAD]
 18944 00004080 47                      	INC	DI
 18945 00004081 1E                      	PUSH	DS
 18946 00004082 368E1E[1603]            	MOV	DS,[SS:CALLXAD+2]
 18947 00004087 803D1A                  	CMP	BYTE [DI],1Ah	; ^Z?
 18948 0000408A 1F                      	POP	DS
 18949 0000408B 7409                    	JZ	short WRTCOOKDONE
 18950                                  
 18951                                  ;hkn; SS override
 18952 0000408D 36C706[0903]0000        	MOV	word [SS:DEVCALL_REQSTAT],0
 18953 00004094 E2B3                    	LOOP	DVWRTLP
 18954                                  WRTCOOKDONE:
 18955 00004096 89D0                    	MOV	AX,DX
 18956 00004098 1F                      	POP	DS
 18957 00004099 E95EFF                  	JMP	ENDWRDEV ; 10/08/2018
 18958                                  
 18959                                  WRITECON:
 18960 0000409C 1E                      	PUSH	DS
 18961                                  
 18962                                  ;hkn; SS is DOSDATA
 18963 0000409D 16                      	push	ss
 18964 0000409E 1F                      	pop	ds
 18965 0000409F E84AFD                  	CALL	SWAPCON
 18966 000040A2 1F                      	POP	DS
 18967 000040A3 89DE                    	MOV	SI,BX
 18968 000040A5 51                      	PUSH	CX
 18969                                  WRCONLP:
 18970 000040A6 AC                      	LODSB
 18971 000040A7 3C1A                    	CMP	AL,1Ah		; ^Z?
 18972 000040A9 7405                    	JZ	short CONEOF
 18973 000040AB E8D6E2                  	call	OUTT
 18974 000040AE E2F6                    	LOOP	WRCONLP
 18975                                  CONEOF:
 18976 000040B0 58                      	POP	AX			; Count
 18977 000040B1 29C8                    	SUB	AX,CX			; Amount actually written
 18978 000040B3 1F                      	POP	DS
 18979 000040B4 E82FFD                  	CALL	SWAPBACK
 18980 000040B7 E940FF                  	JMP	ENDWRDEV
 18981                                  
 18982                                  ;---------------------------------------------------------------------------
 18983                                  ;
 18984                                  ; Procedure Name : get_io_sft
 18985                                  ;
 18986                                  ;   Convert JFN number in BX to sf_entry in DS:SI We get the normal SFT if
 18987                                  ;   CONSWAP is FALSE or if the handle desired is 2 or more.  Otherwise, we
 18988                                  ;   retrieve the sft from ConSFT which is set by SwapCon.
 18989                                  ;
 18990                                  ;---------------------------------------------------------------------------
 18991                                  
 18992                                  GET_IO_SFT:
 18993                                  	;test	byte [SS:CONSWAP],0FFh
 18994 000040BA 36803E[0303]00          	cmp	byte [SS:CONSWAP],0			;smr;SS Override
 18995 000040C0 7512                    	JNZ	short GetRedir
 18996                                  GetNormal:
 18997 000040C2 16                      	push	ss
 18998 000040C3 1F                      	pop	ds
 18999 000040C4 06                      	PUSH	ES
 19000 000040C5 57                      	PUSH	DI
 19001 000040C6 E83327                  	call	SFFromHandle
 19002 000040C9 7206                    	JC	short RET44P
 19003 000040CB 8CC6                    	MOV	SI,ES
 19004 000040CD 8EDE                    	MOV	DS,SI
 19005 000040CF 89FE                    	MOV	SI,DI
 19006                                  RET44P:
 19007 000040D1 5F                      	POP	DI
 19008 000040D2 07                      	POP	ES
 19009 000040D3 C3                      	retn
 19010                                  GetRedir:
 19011 000040D4 83FB01                  	CMP	BX,1
 19012 000040D7 77E9                    	JA	short GetNormal
 19013 000040D9 36C536[7805]            	LDS	SI,[SS:CONSFT]
 19014 000040DE F8                      	CLC
 19015                                  get_io_sft_retn:
 19016 000040DF C3                      	retn
 19017                                  
 19018                                  ;Break	<DIRREAD -- READ A DIRECTORY SECTOR>
 19019                                  ;---------------------------------------------------------------------------
 19020                                  ;
 19021                                  ; Procedure Name : DIRREAD
 19022                                  ;
 19023                                  ; Inputs:
 19024                                  ;	AX = Directory block number (relative to first block of directory)
 19025                                  ;	ES:BP = Base of drive parameters
 19026                                  ;	[DIRSEC] = First sector of first cluster of directory
 19027                                  ;	[CLUSNUM] = Next cluster
 19028                                  ;	[CLUSFAC] = Sectors/Cluster
 19029                                  ; Function:
 19030                                  ;	Read the directory block into [CURBUF].
 19031                                  ; Outputs:
 19032                                  ;	[NXTCLUSNUM] = Next cluster (after the one skipped to)
 19033                                  ;	[SECCLUSPOS] Set
 19034                                  ;	ES:BP unchanged
 19035                                  ;	[CURBUF] Points to Buffer with dir sector
 19036                                  ;	Carry set if error (user said FAIL to I 24)
 19037                                  ; DS preserved, all other registers destroyed.
 19038                                  ;---------------------------------------------------------------------------
 19039                                  
 19040                                  ;hkn; called from dir.asm. DS already set up to DOSDATA.
 19041                                  
 19042                                  DIRREAD:
 19043                                  
 19044                                  ; Note that ClusFac is the sectors per cluster. This is NOT necessarily
 19045                                  ; the same as what is in the DPB! In the case of the root directory, we have
 19046                                  ; ClusFac = # sectors in the root directory. The root directory is detected
 19047                                  ; by DIRStart = 0.
 19048                                  
 19049 000040E0 31D2                    	XOR	DX,DX
 19050 000040E2 833E[5805]00            	CMP	word [DIRSTART],0
 19051 000040E7 7503                    	jnz	short SubDir
 19052 000040E9 92                      	XCHG	AX,DX
 19053 000040EA EB0C                    	JMP	short DoRead
 19054                                  
 19055                                  ; Convert the sector number in AX into cluster and sector-within-cluster pair
 19056                                  
 19057                                  SubDir:
 19058 000040EC 88C2                    	MOV	DL,AL
 19059                                  	;and	dl,[es:bp+4]
 19060 000040EE 26225604                	AND	DL,[ES:BP+DPB.CLUSTER_MASK]
 19061                                  
 19062                                  ;	(DX) = sector-in-cluster
 19063                                  
 19064                                  	;mov	cl,[es:bp+5]
 19065 000040F2 268A4E05                	MOV	CL,[ES:BP+DPB.CLUSTER_SHIFT]
 19066 000040F6 D3E8                    	SHR	AX,CL
 19067                                  
 19068                                  ;	(DX) = position in cluster
 19069                                  ;	(AX) = number of clusters to skip
 19070                                  
 19071                                  DoRead:
 19072 000040F8 8816[0E05]              	MOV	[SECCLUSPOS],DL
 19073 000040FC 89C1                    	MOV	CX,AX
 19074 000040FE 88D4                    	MOV	AH,DL
 19075                                  
 19076                                  ;	(CX) = number of clusters to skip.
 19077                                  ;	(AH) = remainder
 19078                                  
 19079                                  	; MSDOS 6.0
 19080                                  	;MOV	DX,[DIRSEC+2]	     	  ;>32mb
 19081                                  	;MOV	[HIGH_SECTOR],DX	  ;>32mb
 19082 00004100 8B16[5605]              	MOV	DX,[DIRSEC]
 19083 00004104 00E2                    	ADD	DL,AH
 19084 00004106 80D600                  	ADC	DH,0
 19085                                  	;ADC	word [HIGH_SECTOR],0	  ;>32mb
 19086                                  
 19087 00004109 8B1E[5405]              	MOV	BX,[CLUSNUM]
 19088 0000410D 891E[6E05]              	MOV	[NXTCLUSNUM],BX
 19089 00004111 E319                    	JCXZ	FIRSTCLUSTER
 19090                                  SKPCLLP:
 19091 00004113 E83719                  	call	UNPACK
 19092 00004116 72C7                    	jc	short get_io_sft_retn
 19093 00004118 87DF                    	XCHG	BX,DI
 19094 0000411A E81919                  	call	IsEOF			; test for eof based on fat size
 19095 0000411D 7302                    	JAE	short HAVESKIPPED
 19096 0000411F E2F2                    	LOOP	SKPCLLP
 19097                                  HAVESKIPPED:
 19098 00004121 891E[6E05]              	MOV	[NXTCLUSNUM],BX
 19099 00004125 89FA                    	MOV	DX,DI
 19100 00004127 88E3                    	MOV	BL,AH
 19101 00004129 E80513                  	call	FIGREC
 19102                                  
 19103                                  	;entry	FIRSTCLUSTER
 19104                                  
 19105                                  FIRSTCLUSTER:
 19106                                  	;mov	byte [ALLOWED],18h
 19107 0000412C C606[F702]18            	MOV	byte [ALLOWED],Allowed_RETRY+Allowed_FAIL
 19108 00004131 30C0                    	XOR	AL,AL		; Indicate pre-read
 19109 00004133 E84F1D                  	call	GETBUFFR
 19110 00004136 72A7                    	jc	short get_io_sft_retn
 19111                                  
 19112                                  	;entry	SET_BUF_AS_DIR
 19113                                  
 19114                                  SET_BUF_AS_DIR:
 19115                                  
 19116                                  ;	Set the type of CURBUF to be a directory sector.
 19117                                  ;	Only flags are modified.
 19118                                  
 19119 00004138 1E                      	PUSH	DS
 19120 00004139 56                      	PUSH	SI
 19121 0000413A C536[7405]              	LDS	SI,[CURBUF]
 19122                                  	;or	byte [si+5],4
 19123 0000413E 804C0504                	OR	byte [SI+BUFFINFO.buf_flags],buf_isDIR	; Clears carry
 19124 00004142 5E                      	POP	SI
 19125 00004143 1F                      	POP	DS
 19126                                  dirread_retn:
 19127 00004144 C3                      	retn
 19128                                  
 19129                                  ;Break	<FATSECRD -- READ A FAT SECTOR>
 19130                                  ;----------------------------------------------------------------------------
 19131                                  ;
 19132                                  ; Procedure Name : FATSECRD
 19133                                  ; Inputs:
 19134                                  ;	Same as DREAD
 19135                                  ;	DS:BX = Transfer address
 19136                                  ;	CX = Number of sectors
 19137                                  ;	DX = Absolute record number
 19138                                  ;	ES:BP = Base of drive parameters
 19139                                  ; Function:
 19140                                  ;	Calls BIOS to perform FAT read.
 19141                                  ; Outputs:
 19142                                  ;	Same as DREAD
 19143                                  ;---------------------------------------------------------------------------
 19144                                  
 19145                                  FATSECRD:
 19146                                  ;hkn; SS override
 19147                                  	;mov	byte [ss:ALLOWED],18h
 19148 00004145 36C606[F702]18          	MOV	byte [SS:ALLOWED],Allowed_RETRY+Allowed_FAIL
 19149 0000414B 89CF                    	MOV	DI,CX
 19150                                  	;mov	cl,[es:bp+8]
 19151 0000414D 268A4E08                	MOV	CL,[ES:BP+DPB.FAT_COUNT]
 19152                                  	; MSDOS 6.0
 19153                                  	;MOV	AX,[ES:BP+DPB.FAT_SIZE] 	;>32mb
 19154                                  	; MSDOS 3.3
 19155                                  	;mov	al,[es:bp+0Fh]
 19156 00004151 268A460F                	MOV	AL,[ES:BP+DPB.FAT_SIZE] 
 19157 00004155 30E4                    	XOR	AH,AH
 19158 00004157 30ED                    	XOR	CH,CH				;>32mb
 19159 00004159 52                      	PUSH	DX
 19160                                  NXTFAT:
 19161                                  	; MSDOS 6.0
 19162                                  ;hkn; SS override
 19163                                  	;MOV	word [SS:HIGH_SECTOR],0	;>32mb FAT sectors cannot exceed
 19164 0000415A 51                      	PUSH	CX			;32mb
 19165 0000415B 50                      	PUSH	AX
 19166 0000415C 89F9                    	MOV	CX,DI
 19167 0000415E E85A00                  	call	DSKREAD
 19168 00004161 58                      	POP	AX
 19169 00004162 59                      	POP	CX
 19170 00004163 7420                    	JZ	short RET41P		; Carry clear
 19171 00004165 01C2                    	ADD	DX,AX
 19172 00004167 E2F1                    	LOOP	NXTFAT
 19173 00004169 5A                      	POP	DX
 19174 0000416A 89F9                    	MOV	CX,DI
 19175                                  
 19176                                  ; NOTE FALL THROUGH
 19177                                  
 19178                                  ;Break	<DREAD -- DO A DISK READ>
 19179                                  ;---------------------------------------------------------------------------
 19180                                  ;
 19181                                  ; Procedure Name : DREAD
 19182                                  ;
 19183                                  ; Inputs:
 19184                                  ;	DS:BX = Transfer address
 19185                                  ;	CX = Number of sectors
 19186                                  ;	DX = Absolute record number	      (LOW)
 19187                                  ;	[HIGH_SECTOR]= Absolute record number (HIGH)
 19188                                  ;	ES:BP = Base of drive parameters
 19189                                  ;	[ALLOWED] must be set in case call to HARDERR needed
 19190                                  ; Function:
 19191                                  ;	Calls BIOS to perform disk read. If BIOS reports
 19192                                  ;	errors, will call HARDERRRW for further action.
 19193                                  ; Outputs:
 19194                                  ;	Carry set if error (currently user FAILED to INT 24)
 19195                                  ; DS,ES:BP preserved. All other registers destroyed.
 19196                                  ;---------------------------------------------------------------------------
 19197                                  
 19198                                  	;entry	DREAD
 19199                                  DREAD:
 19200 0000416C E84C00                  	call	DSKREAD
 19201 0000416F 74D3                    	jz	short dirread_retn	; Carry clear
 19202                                  ;hkn; SS override
 19203 00004171 36C606[1005]00          	MOV	BYTE [SS:READOP],0
 19204 00004177 E89900                  	call	HARDERRRW
 19205 0000417A 3C01                    	CMP	AL,1		; Check for retry
 19206 0000417C 74EE                    	JZ	short DREAD
 19207 0000417E 3C03                    	CMP	AL,3		; Check for FAIL
 19208 00004180 F8                      	CLC
 19209 00004181 7501                    	JNZ	short NO_CAR		; Ignore
 19210 00004183 F9                      	STC
 19211                                  NO_CAR:
 19212 00004184 C3                      	retn
 19213                                  RET41P: 
 19214 00004185 5A                      	POP	DX
 19215 00004186 C3                      	retn
 19216                                  
 19217                                  ; 24/07/2018 - Retro DOS v3.0
 19218                                  
 19219                                  ;Break	<CHECK_WRITE_LOCK>
 19220                                  ;---------------------------------------------------------------------------
 19221                                  ;
 19222                                  ; Procedure Name : CHECK_WRITE_LOCK
 19223                                  ;
 19224                                  ; Inputs:
 19225                                  ;	output of SETUP
 19226                                  ;	ES:DI -> SFT
 19227                                  ; Function:
 19228                                  ;	check write lock
 19229                                  ; Outputs:
 19230                                  ;	Carry set if error
 19231                                  ;	Carry clear if ok
 19232                                  ;
 19233                                  ;----------------------------------------------------------------------------
 19234                                  
 19235                                  CHECK_WRITE_LOCK:
 19236                                  	; MSDOS 6.0
 19237                                  	;test	byte [es:di+4],8
 19238 00004187 26F6450408              	TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_volume_id ;volume id
 19239                                  	;JZ	short write_cont			     ;no
 19240                                  	;call	SET_ACC_ERR_DS		;
 19241                                  	;retn
 19242                                  	;jnz	SET_ACC_ERR_DS
 19243                                  	; 19/08/2018
 19244 0000418C 7403                    	jz	short write_cont
 19245 0000418E E9C001                  	jmp	SET_ACC_ERR_DS
 19246                                  write_cont:				;
 19247 00004191 51                      	PUSH	CX			;save reg
 19248 00004192 09C9                    	OR	CX,CX			;
 19249 00004194 7501                    	JNZ	short Not_Truncate	;
 19250 00004196 49                      	dec	cx			;(cx) = -1; check for lock on whole file
 19251                                  Not_Truncate:				;
 19252 00004197 B080                    	MOV	AL,80H			;check write access
 19253 00004199 E84A31                  	call	LOCK_CHECK		;check lock
 19254 0000419C 59                      	POP	CX			;restore reg
 19255 0000419D 7305                    	JNC	short WRITE_OK		;lock ok
 19256 0000419F E86501                  	call	WRITE_LOCK_VIOLATION	;issue I24
 19257 000041A2 73ED                    	JNC	short write_cont	;retry
 19258                                  WRITE_OK:				;
 19259 000041A4 C3                      	retn				;
 19260                                  
 19261                                  ;Break	<CHECK_READ_LOCK>
 19262                                  ;---------------------------------------------------------------------------
 19263                                  ;
 19264                                  ; Procedure Name : CHECK_READ_LOC
 19265                                  ;
 19266                                  ; Inputs:
 19267                                  ;	ES:DI -> SFT
 19268                                  ;	output of SETUP
 19269                                  ; Function:
 19270                                  ;	check read lock
 19271                                  ; Outputs:
 19272                                  ;	Carry set if error
 19273                                  ;	Carry clear if ok
 19274                                  ;----------------------------------------------------------------------------
 19275                                  
 19276                                  CHECK_READ_LOCK:
 19277                                  	; MSDOS 6.0
 19278                                  	;test	byte [es:di+4],8
 19279 000041A5 26F6450408              	TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_volume_id ;volume id
 19280                                  	;JZ	short do_retry			   	     ; no
 19281                                  	;call	SET_ACC_ERR		;
 19282                                  	;retn
 19283 000041AA 0F85A501                	jnz	SET_ACC_ERR		;
 19284                                  do_retry:				;
 19285 000041AE 30C0                    	xor	al,al			;check read access
 19286 000041B0 E83331                  	call	LOCK_CHECK		;check lock
 19287 000041B3 7305                    	JNC	short READLOCK_OK 	;lock ok
 19288 000041B5 E82801                  	call	READ_LOCK_VIOLATION	;issue I24
 19289 000041B8 73F4                    	JNC	short do_retry		;retry
 19290                                  READLOCK_OK:				;
 19291 000041BA C3                      	retn				;
 19292                                  
 19293                                  ;============================================================================
 19294                                  ; DISK2.ASM, MSDOS 6.0, 1991
 19295                                  ;============================================================================
 19296                                  ; 24/07/2018 - Retro DOS v3.0 
 19297                                  
 19298                                  ;	TITLE	DISK2 - Disk utility routines
 19299                                  ;	NAME	Disk2
 19300                                  
 19301                                  ;**	Low level Read and write routines for local SFT I/O on files and devs
 19302                                  ;
 19303                                  ;	DskRead
 19304                                  ;	DWRITE
 19305                                  ;	DSKWRITE
 19306                                  ;	HarderrRW
 19307                                  ;	SETUP
 19308                                  ;	BREAKDOWN
 19309                                  ;	READ_LOCK_VIOLATION
 19310                                  ;	WRITE_LOCK_VIOLATION
 19311                                  ;	DISKREAD
 19312                                  ;	SET_ACC_ERR_DS
 19313                                  ;	SET_ACC_ERR
 19314                                  ;	SETSFT
 19315                                  ;	SETCLUS
 19316                                  ;	AddRec
 19317                                  ;
 19318                                  ;	Revision history:
 19319                                  ;
 19320                                  ;		AN000 version 4.00 Jan. 1988
 19321                                  ;		M039 DB 10/17/90 - Disk read/write optimization
 19322                                  
 19323                                  ;Break	<DSKREAD -- PHYSICAL DISK READ>
 19324                                  ;---------------------------------------------------------------------------
 19325                                  ;
 19326                                  ; Procedure Name : DSKREAD
 19327                                  ;
 19328                                  ; Inputs:
 19329                                  ;	DS:BX = Transfer addr
 19330                                  ;	CX = Number of sectors
 19331                                  ;	[HIGH_SECTOR] = Absolute record number (HIGH)
 19332                                  ;	DX = Absolute record number	       (LOW)
 19333                                  ;	ES:BP = Base of drive parameters
 19334                                  ; Function:
 19335                                  ;	Call BIOS to perform disk read
 19336                                  ; Outputs:
 19337                                  ;	DI = CX on entry
 19338                                  ;	CX = Number of sectors unsuccessfully transfered
 19339                                  ;	AX = Status word as returned by BIOS (error code in AL if error)
 19340                                  ;	Zero set if OK (from BIOS) (carry clear)
 19341                                  ;	Zero clear if error (carry clear)
 19342                                  ; SI Destroyed, others preserved
 19343                                  ;---------------------------------------------------------------------------
 19344                                  
 19345                                  DSKREAD:
 19346 000041BB 51                      	PUSH	CX
 19347                                  	;mov	ah,[es:bp+16h]
 19348 000041BC 268A6616                	MOV	AH,[ES:BP+DPB.MEDIA]
 19349                                  	;mov	al,[es:bp+1]
 19350 000041C0 268A4601                	MOV	AL,[ES:BP+DPB.UNIT]
 19351 000041C4 53                      	PUSH	BX
 19352 000041C5 06                      	PUSH	ES
 19353 000041C6 E8550D                  	call	SETREAD
 19354 000041C9 EB27                    	JMP	short DODSKOP
 19355                                  
 19356                                  ;Break	<DWRITE -- SEE ABOUT WRITING>
 19357                                  ;--------------------------------------------------------------------------
 19358                                  ;
 19359                                  ; Procedure Name : DWRITE
 19360                                  ;
 19361                                  ; Inputs:
 19362                                  ;	DS:BX = Transfer address
 19363                                  ;	CX = Number of sectors
 19364                                  ;	[HIGH_SECTOR] = Absolute record number (HIGH)
 19365                                  ;	DX = Absolute record number	       (LOW)
 19366                                  ;	ES:BP = Base of drive parameters
 19367                                  ;	[ALLOWED] must be set in case HARDERR called
 19368                                  ; Function:
 19369                                  ;	Calls BIOS to perform disk write. If BIOS reports
 19370                                  ;	errors, will call HARDERRRW for further action.
 19371                                  ; Output:
 19372                                  ;	Carry set if error (currently, user FAILed to I 24)
 19373                                  ; BP preserved. All other registers destroyed.
 19374                                  ;----------------------------------------------------------------------------
 19375                                  
 19376                                  
 19377                                  	;entry	DWRITE
 19378                                  DWRITE:
 19379 000041CB E81600                  	CALL	DSKWRITE
 19380 000041CE 7413                    	jz	short dw_ret_label	; Carry clear (retz)
 19381                                  
 19382                                  ;hkn; SS override
 19383 000041D0 36C606[1005]01          	MOV	BYTE [SS:READOP],1
 19384 000041D6 E83A00                  	call	HARDERRRW
 19385 000041D9 3C01                    	CMP	AL,1		; Check for retry
 19386 000041DB 74EE                    	JZ	short DWRITE
 19387 000041DD 3C03                    	CMP	AL,3		; Check for FAIL
 19388 000041DF F8                      	CLC
 19389 000041E0 7501                    	JNZ	short NO_CAR2 	; Ignore
 19390 000041E2 F9                      	STC
 19391                                  NO_CAR2:
 19392                                  dw_ret_label:
 19393 000041E3 C3                      	retn
 19394                                  
 19395                                  ;Break	<DSKWRITE -- PHYSICAL DISK WRITE>
 19396                                  ;---------------------------------------------------------------------------
 19397                                  ;
 19398                                  ; Procedure Name : DSKWRITE
 19399                                  ;
 19400                                  ; Inputs:
 19401                                  ;	DS:BX = Transfer addr
 19402                                  ;	CX = Number of sectors
 19403                                  ;	DX = Absolute record number	       (LOW)
 19404                                  ;	[HIGH_SECTOR] = Absolute record number (HIGH)
 19405                                  ;	ES:BP = Base of drive parameters
 19406                                  ; Function:
 19407                                  ;	Call BIOS to perform disk read
 19408                                  ; Outputs:
 19409                                  ;	DI = CX on entry
 19410                                  ;	CX = Number of sectors unsuccessfully transfered
 19411                                  ;	AX = Status word as returned by BIOS (error code in AL if error)
 19412                                  ;	Zero set if OK (from BIOS) (carry clear)
 19413                                  ;	Zero clear if error (carry clear)
 19414                                  ; SI Destroyed, others preserved
 19415                                  ;
 19416                                  ;----------------------------------------------------------------------------
 19417                                  
 19418                                  	;entry	DSKWRITE
 19419                                  DSKWRITE:
 19420 000041E4 51                      	PUSH	CX
 19421                                  	;mov	ah,[es:bp+16h]
 19422 000041E5 268A6616                	MOV	AH,[ES:BP+DPB.MEDIA]
 19423                                  	;mov	al,[es:bp+1]
 19424 000041E9 268A4601                	MOV	AL,[ES:BP+DPB.UNIT]
 19425 000041ED 53                      	PUSH	BX
 19426 000041EE 06                      	PUSH	ES
 19427 000041EF E85F0D                  	call	SETWRITE
 19428                                  DODSKOP:
 19429 000041F2 8CD9                    	MOV	CX,DS		; Save DS
 19430 000041F4 1F                      	POP	DS		; DS:BP points to DPB
 19431 000041F5 1E                      	PUSH	DS
 19432                                  	;lds	si,[ds:bp+12h]
 19433 000041F6 3EC57612                	LDS	SI,[ds:BP+DPB.DRIVER_ADDR] ; 07/09/2018
 19434 000041FA E8FD0C                  	call	DEVIOCALL2
 19435 000041FD 8ED9                    	MOV	DS,CX		; Restore DS
 19436 000041FF 07                      	POP	ES		; Restore ES
 19437 00004200 5B                      	POP	BX
 19438                                  
 19439                                  ;hkn; SS override
 19440 00004201 368B0E[1803]            	MOV	CX,[SS:CALLSCNT] ; Number of sectors transferred
 19441 00004206 5F                      	POP	DI
 19442 00004207 29F9                    	SUB	CX,DI
 19443 00004209 F7D9                    	NEG	CX		; Number of sectors not transferred
 19444                                  
 19445                                  ;hkn; SS override
 19446 0000420B 36A1[0903]              	MOV	AX,[SS:DEVCALL_REQSTAT]
 19447                                  	;test	ax,8000h
 19448 0000420F A90080                  	test	AX,STERR
 19449 00004212 C3                      	retn
 19450                                  
 19451                                  ;Break	<HardErrRW - map extended errors and call harderr>
 19452                                  ;---------------------------------------------------------------------------
 19453                                  ;
 19454                                  ; Procedure Name : HardErrRW
 19455                                  ;
 19456                                  ; Inputs:
 19457                                  ;	AX is error code from read or write
 19458                                  ;	Other registers set as per HARDERR
 19459                                  ; Function:
 19460                                  ;	Checks the error code for special extended
 19461                                  ;	errors and maps them if needed. Then invokes
 19462                                  ;	Harderr
 19463                                  ; Outputs:
 19464                                  ;	Of HARDERR
 19465                                  ; AX may be modified prior to call to HARDERR.
 19466                                  ; No other registers altered.
 19467                                  ;
 19468                                  ;---------------------------------------------------------------------------
 19469                                  
 19470                                  HARDERRRW:
 19471                                  	;cmp	al,0Fh
 19472 00004213 3C0F                    	CMP	AL,error_I24_wrong_disk
 19473 00004215 7512                    	JNZ	short DO_ERR				; Nothing to do
 19474                                  
 19475                                  	; MSDOS 3.3
 19476                                  	;push	ds
 19477                                  	;push	si
 19478                                  	;lds	si,[ss:CALLVIDRW]
 19479                                  	;mov	[ss:EXTERRPT+2], ds
 19480                                  	;mov	[ss:EXTERRPT], si
 19481                                  	;pop	si
 19482                                  	;pop	ds
 19483                                  
 19484                                  	; MSDOS 6.0
 19485 00004217 50                      	push	ax
 19486 00004218 36A1[1C03]              	mov	ax,[SS:CALLVIDRW]		; get ptr lo  ;smr;SS Override
 19487 0000421C 36A3[D602]              	mov	[ss:EXTERRPT],ax		; set ext err ptr lo
 19488 00004220 36A1[1E03]              	mov	ax,[SS:CALLVIDRW+2]		; get ptr hi from dev
 19489 00004224 36A3[D802]              	mov	[ss:EXTERRPT+2],ax		; set ext err ptr hi
 19490 00004228 58                      	pop	ax
 19491                                  DO_ERR:
 19492 00004229 E81C16                  	call	HARDERR
 19493 0000422C C3                      	retn
 19494                                  
 19495                                  ; 24/07/2018 - Retro DOS v3.0
 19496                                  
 19497                                  ;Break	<SETUP -- SETUP A DISK READ OR WRITE FROM USER>
 19498                                  ;----------------------------------------------------------------------------
 19499                                  ;
 19500                                  ; Procedure Name : SETUP
 19501                                  ;
 19502                                  ; Inputs:
 19503                                  ;	ES:DI point to SFT (value also in THISSFT)
 19504                                  ;	DMAAdd contains transfer address
 19505                                  ;	CX = Byte count
 19506                                  ;	DS = DOSDATA
 19507                                  ;   WARNING Stack must be clean, two ret addrs on stack, 1st of caller,
 19508                                  ;		2nd of caller of caller.
 19509                                  ; Outputs:
 19510                                  ;	    CX = byte count
 19511                                  ;	    [THISDPB] = Base of drive parameters if file
 19512                                  ;		      = Pointer to device header if device or NET
 19513                                  ;	    ES:DI Points to SFT
 19514                                  ;	    [NEXTADD] = Displacement of disk transfer within segment
 19515                                  ;	    [TRANS] = 0 (No transfers yet)
 19516                                  ;	    BytPos = Byte position in file
 19517                                  ;
 19518                                  ;	The following fields are relevant to local files (not devices) only:
 19519                                  ;
 19520                                  ;	    SecPos = Position of first sector (local files only)
 19521                                  ;	    [BYTSECPOS] = Byte position in first sector (local files only)
 19522                                  ;	    [CLUSNUM] = First cluster (local files only)
 19523                                  ;	    [SECCLUSPOS] = Sector within first cluster (local files only)
 19524                                  ;	    [THISDRV] = Physical unit number (local files only)
 19525                                  ;
 19526                                  ;      RETURNS ONE LEVEL UP WITH:
 19527                                  ;	   CX = 0
 19528                                  ;	   CARRY = Clear
 19529                                  ;	IF AN ERROR IS DETECTED
 19530                                  ; All other registers destroyed
 19531                                  ;----------------------------------------------------------------------------
 19532                                  
 19533                                  ;hkn; called from disk.asm. DS has been set up to DOSDATA.
 19534                                  
 19535                                  SETUP:
 19536                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 411Bh
 19537                                  
 19538                                  	;lds 	si,[es:di+7]
 19539 0000422D 26C57507                	LDS	SI,[ES:DI+SF_ENTRY.sf_devptr]
 19540                                  
 19541                                  ;hkn; SS override
 19542 00004231 368C1E[2605]            	MOV	[SS:THISDPB+2],DS
 19543                                  
 19544                                  ;hkn; SS is DOSDATA
 19545 00004236 16                      	push	ss
 19546 00004237 1F                      	pop	ds
 19547                                  
 19548 00004238 8936[2405]              	MOV	[THISDPB],SI
 19549                                  
 19550 0000423C 8B1E[DA02]              	MOV	BX,[DMAADD]
 19551 00004240 891E[5005]              	MOV	[NEXTADD],BX		;Set NEXTADD to start of Xaddr
 19552 00004244 C606[0F05]00            	MOV	BYTE [TRANS],0		;No transferes
 19553                                  	;mov	ax,[es:di+15h]
 19554 00004249 268B4515                	MOV	AX,[ES:DI+SF_ENTRY.sf_position]
 19555                                  	;mov	dx,[es:di+17h]
 19556 0000424D 268B5517                	MOV	DX,[ES:DI+SF_ENTRY.sf_position+2]
 19557 00004251 8916[6205]              	MOV	[BYTPOS+2],DX	;Set it
 19558 00004255 A3[6005]                	MOV	[BYTPOS],AX
 19559                                  	;test	word [es:di+5],8080h
 19560 00004258 26F745058080            	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet+devid_device
 19561 0000425E 7536                    	JNZ	short NOSETSTUFF	;Following not done on devs or NET
 19562 00004260 06                      	PUSH	ES
 19563 00004261 C42E[2405]              	LES	BP,[THISDPB]		;Point at the DPB
 19564                                  	;mov	bl,[es:bp+0]
 19565                                  	;MOV	BL,[ES:BP+DPB.drive]
 19566 00004265 268A5E00                	mov	bl,[es:bp]
 19567 00004269 881E[1105]              	MOV	[THISDRV],BL		;Set THISDRV
 19568                                  	;mov	bx,[es:bp+2]
 19569 0000426D 268B5E02                	MOV	BX,[ES:BP+DPB.SECTOR_SIZE]
 19570                                  
 19571                                  	; MSDOS 3.3
 19572 00004271 39DA                    	cmp	dx, bx
 19573 00004273 7336                    	jnb	short EOFERR
 19574 00004275 F7F3                    	div	bx
 19575 00004277 A3[5A05]                	mov	[SECPOS],ax
 19576 0000427A 8916[5E05]              	mov	[BYTSECPOS],dx
 19577 0000427E 89C2                    	mov	dx,ax
 19578                                  	;and	al,[es:bp+4]
 19579 00004280 26224604                	AND	AL,[ES:BP+DPB.CLUSTER_MASK]
 19580 00004284 A2[0E05]                	mov	[SECCLUSPOS],al
 19581 00004287 89C8                    	mov	ax,cx
 19582                                  	;mov	cl,[es:bp+5]
 19583 00004289 268A4E05                	MOV	CL,[ES:BP+DPB.CLUSTER_SHIFT]
 19584 0000428D D3EA                    	shr	dx,cl
 19585 0000428F 8916[5405]              	mov	[CLUSNUM],dx
 19586 00004293 07                      	pop	es
 19587 00004294 89C1                    	mov	cx,ax
 19588                                  
 19589                                  	; MSDOS 6.0
 19590                                  ;M039: Optimized this section.
 19591                                          ;PUSH    CX                            ;SHR32 and DIV32 use CX.
 19592                                  	;call	DIV32			      ;DX:AX/BX = CX:AX + DX (rem)
 19593                                  	;MOV	[BYTSECPOS],DX
 19594                                  	;MOV	[SecPos],AX
 19595                                  	;MOV	[SecPos+2],CX
 19596                                  	;MOV	DX,CX
 19597                                  
 19598                                  	;MOV	BX,AX
 19599                                  	;;and	bl,[es:bp+4]
 19600                                  	;AND	BL,[ES:BP+DPB.CLUSTER_MASK]
 19601                                  	;MOV	[SECCLUSPOS],BL
 19602                                  
 19603                                  	;call	SHR32			     ;(DX:AX SHR dpb_cluster_shift)
 19604                                  	;POP	CX			     ;CX = byte count.
 19605                                  	;JNZ	short EOFERR		     ;cluster number above 64k
 19606                                  	;CMP	AX,[ES:BP+DPB.MAX_CLUSTER]   ;>32mb    if > disk size ;AN000;
 19607                                  	;JA	short EOFERR		     ;>32mb    then EOF       ;AN000;
 19608                                  
 19609                                  	;MOV	[CLUSNUM],AX
 19610                                  	;POP	ES			     ; ES:DI point to SFT
 19611                                  ;M039
 19612                                  
 19613                                  NOSETSTUFF:
 19614 00004296 89C8                    	MOV	AX,CX		; AX = Byte count.
 19615 00004298 0306[DA02]              	ADD	AX,[DMAADD]	 ; See if it will fit in one segment
 19616 0000429C 730C                    	JNC	short setup_OK		; Must be less than 64K
 19617 0000429E A1[DA02]                	MOV	AX,[DMAADD]
 19618 000042A1 F7D8                    	NEG	AX		; Amount of room left in segment (know
 19619                                  				;    less than 64K since max value of CX
 19620                                  				;    is FFFF).
 19621 000042A3 7501                    	JNZ	short NoDec
 19622 000042A5 48                      	DEC	AX
 19623                                  NoDec:
 19624 000042A6 89C1                    	MOV	CX,AX		; Can do this much
 19625 000042A8 E309                    	JCXZ	NOROOM		; Silly user gave Xaddr of FFFF in segment
 19626                                  setup_OK:
 19627 000042AA C3                      	retn
 19628                                  
 19629                                  EOFERR:
 19630 000042AB 07                      	POP	ES		; ES:DI point to SFT
 19631 000042AC 31C9                    	XOR	CX,CX		; No bytes read
 19632                                  ;;;;;;;;;;; 7/18/86
 19633                                  	; MSDOS 3.3
 19634 000042AE C606[8C0F]01            	MOV	BYTE [DISK_FULL],1 ; set disk full flag
 19635                                  ;;;;;;;;;;;
 19636                                  NOROOM:
 19637 000042B3 5B                      	POP	BX		; Kill return address
 19638 000042B4 F8                      	CLC
 19639 000042B5 C3                      	retn			; RETURN TO CALLER OF CALLER
 19640                                  
 19641                                  ;Break	<BREAKDOWN -- CUT A USER READ OR WRITE INTO PIECES>
 19642                                  ;---------------------------------------------------------------------------
 19643                                  ;
 19644                                  ; Procedure Name : BREAKDOWN
 19645                                  ;
 19646                                  ; Inputs:
 19647                                  ;	CX = Length of disk transfer in bytes
 19648                                  ;	ES:BP = Base of drive parameters
 19649                                  ;	[BYTSECPOS] = Byte position within first sector
 19650                                  ;	DS = DOSDATA
 19651                                  ; Outputs:
 19652                                  ;	[BYTCNT1] = Bytes to transfer in first sector
 19653                                  ;	[SECCNT] = No. of whole sectors to transfer
 19654                                  ;	[BYTCNT2] = Bytes to transfer in last sector
 19655                                  ; AX, BX, DX destroyed. No other registers affected.
 19656                                  ;---------------------------------------------------------------------------
 19657                                  
 19658                                  BREAKDOWN:
 19659 000042B6 A1[5E05]                	MOV	AX,[BYTSECPOS]
 19660 000042B9 89CB                    	MOV	BX,CX
 19661 000042BB 09C0                    	OR	AX,AX
 19662 000042BD 740E                    	JZ	short SAVFIR	; Partial first sector?
 19663                                  	;sub	ax,[es:bp+2]
 19664 000042BF 262B4602                	SUB	AX,[ES:BP+DPB.SECTOR_SIZE]
 19665 000042C3 F7D8                    	NEG	AX		; Max number of bytes left in first sector
 19666 000042C5 29C3                    	SUB	BX,AX		; Subtract from total length
 19667 000042C7 7304                    	JAE	short SAVFIR
 19668 000042C9 01D8                    	ADD	AX,BX		; Don't use all of the rest of the sector
 19669 000042CB 31DB                    	XOR	BX,BX		; And no bytes are left
 19670                                  SAVFIR:
 19671 000042CD A3[6405]                	MOV	[BYTCNT1],AX
 19672 000042D0 89D8                    	MOV	AX,BX
 19673 000042D2 31D2                    	XOR	DX,DX
 19674                                  	;div	word [ES:BP+2]
 19675 000042D4 26F77602                	DIV	word [ES:BP+DPB.SECTOR_SIZE]  ; How many whole sectors?
 19676 000042D8 A3[6805]                	MOV	[SECCNT],AX
 19677 000042DB 8916[6605]              	MOV	[BYTCNT2],DX	; Bytes remaining for last sector
 19678                                  	; MSDOS 3.3
 19679                                  ;	OR	DX,[BYTCNT1]	; SMR ONESECTORFIX BUGBUG
 19680                                  ;	retnz			; NOT (BYTCNT1 = BYTCNT2 = 0)
 19681                                  ;	CMP	AX,1
 19682                                  ;	retnz
 19683                                  ;	MOV	AX,[ES:BP+DPB.SECTOR_SIZE] ; Buffer EXACT one sector I/O
 19684                                  ;	MOV	[BYTCNT2],AX
 19685                                  ;	MOV	[SECCNT],DX	; DX = 0
 19686                                  _RET45:
 19687 000042DF C3                      	retn
 19688                                  
 19689                                  ;----------------------------------------------------------------------------
 19690                                  ;
 19691                                  ; Procedure Name : READ_LOCK_VIOLATION
 19692                                  ;
 19693                                  ; ES:DI points to SFT. This entry used by NET_READ
 19694                                  ; Carry set if to return error (CX=0,AX=error_sharing_violation).
 19695                                  ; Else do retrys.
 19696                                  ; ES:DI,DS,CX preserved
 19697                                  ;
 19698                                  ;----------------------------------------------------------------------------
 19699                                  
 19700                                  READ_LOCK_VIOLATION:
 19701 000042E0 C606[1005]00            	MOV	byte [READOP],0
 19702                                  ERR_ON_CHECK:
 19703                                  	;test	word [es:di+2],8000h
 19704 000042E5 26F745020080            	TEST	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB
 19705 000042EB 750E                    	JNZ	short HARD_ERR
 19706 000042ED 51                      	PUSH	CX
 19707 000042EE 268A4D02                	MOV	CL,[ES:DI+SF_ENTRY.sf_mode]
 19708                                  	;and	cl,0F0h
 19709 000042F2 80E1F0                  	AND	CL,SHARING_MASK
 19710                                  	;cmp	cl,0
 19711 000042F5 80F900                  	CMP	CL,SHARING_COMPAT
 19712 000042F8 59                      	POP	CX
 19713 000042F9 7505                    	JNE	short NO_HARD_ERR
 19714                                  HARD_ERR:
 19715 000042FB E8FD2F                  	call	LOCK_VIOLATION
 19716 000042FE 73DF                    	jnc	short _RET45		; User wants Retrys
 19717                                  NO_HARD_ERR:
 19718 00004300 31C9                    	XOR	CX,CX			;No bytes transferred
 19719                                  	;mov	ax, 21h
 19720 00004302 B82100                  	MOV	AX,error_lock_violation
 19721 00004305 F9                      	STC
 19722 00004306 C3                      	retn
 19723                                  
 19724                                  ;----------------------------------------------------------------------------
 19725                                  ;
 19726                                  ; Procedure Name : WRITE_LOCK_VIOLATION
 19727                                  ;
 19728                                  ; Same as READ_LOCK_VIOLATION except for READOP.
 19729                                  ; This entry used by NET_WRITE
 19730                                  ;
 19731                                  ;----------------------------------------------------------------------------
 19732                                  
 19733                                  WRITE_LOCK_VIOLATION:
 19734 00004307 C606[1005]01            	MOV	byte [READOP],1
 19735 0000430C EBD7                    	JMP	short ERR_ON_CHECK
 19736                                  
 19737                                  ;Break	<DISKREAD -- PERFORM USER DISK READ>
 19738                                  ;----------------------------------------------------------------------------
 19739                                  ;
 19740                                  ; Procedure Name : DISKREAD
 19741                                  ;
 19742                                  ; Inputs:
 19743                                  ;	Outputs of SETUP
 19744                                  ; Function:
 19745                                  ;	Perform disk read
 19746                                  ; Outputs:
 19747                                  ;    Carry clear
 19748                                  ;	CX = No. of bytes read
 19749                                  ;	ES:DI point to SFT
 19750                                  ;	SFT offset and cluster pointers updated
 19751                                  ;    Carry set
 19752                                  ;	CX = 0
 19753                                  ;	ES:DI point to SFT
 19754                                  ;	AX has error code
 19755                                  ;----------------------------------------------------------------------------
 19756                                  
 19757                                  ;hkn; called from disk.asm. DS already set up.
 19758                                  
 19759                                  DISKREAD:
 19760                                  	;mov	ax,[es:di+11h]
 19761 0000430E 268B4511                	MOV	AX,[ES:DI+SF_ENTRY.sf_size]
 19762                                  	;mov	bx,[es:di+13h]
 19763 00004312 268B5D13                	MOV	BX,[ES:DI+SF_ENTRY.sf_size+2]
 19764 00004316 2B06[6005]              	SUB	AX,[BYTPOS]
 19765 0000431A 1B1E[6205]              	SBB	BX,[BYTPOS+2]
 19766 0000431E 7226                    	JB	short RDERR		;Read starts past EOF
 19767 00004320 750A                    	JNZ	short ENUF		;More than 64k to EOF
 19768 00004322 09C0                    	OR	AX,AX
 19769 00004324 7420                    	JZ	short RDERR		;Read starts at EOF
 19770 00004326 39C8                    	CMP	AX,CX
 19771 00004328 7302                    	JAE	short ENUF		;I/O fits
 19772 0000432A 89C1                    	MOV	CX,AX			;Limit read to up til EOF
 19773                                  ENUF:
 19774                                  	; MSDOS 3.3
 19775                                  	;test	byte [es:di+4],8
 19776                                  	;TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_volume_id
 19777                                  	;jnz	short SET_ACC_ERR
 19778                                  	;call	LOCK_CHECK
 19779                                  	;jnb	short _READ_OK
 19780                                  	;call	READ_LOCK_VIOLATION
 19781                                  	;jnb	short ENUF
 19782                                  	;retn
 19783                                  
 19784                                  	; MSDOS 6.0
 19785 0000432C E876FE                  	call	CHECK_READ_LOCK		;IFS. check read lock	;AN000;
 19786 0000432F 7301                    	JNC	short _READ_OK 		; There are no locks
 19787 00004331 C3                      	retn
 19788                                  
 19789                                  _READ_OK:
 19790 00004332 C42E[2405]              	LES	BP,[THISDPB]
 19791 00004336 E87DFF                  	CALL	BREAKDOWN
 19792 00004339 8B0E[5405]              	MOV	CX,[CLUSNUM]
 19793 0000433D E86E0F                  	call	FNDCLUS
 19794                                       	; MSDOS 6.0			;M022 conditional removed here
 19795 00004340 720F                    	JC	short SET_ACC_ERR_DS	; fix to take care of I24 fail
 19796                                  					; migrated from 330a - HKN
 19797 00004342 09C9                    	OR	CX,CX
 19798 00004344 7414                    	JZ	short SKIPERR
 19799                                  RDERR:
 19800 00004346 B40E                    	MOV	AH,0EH			;MS. read/data/fail ;AN000;
 19801 00004348 E99E01                  	jmp	WRTERR22
 19802                                  
 19803                                  ;RDLASTJ: 
 19804                                  	;JMP	RDLAST                  ;M039
 19805                                  
 19806                                  SETSFTJ2: 
 19807 0000434B E9E300                  	JMP	SETSFT
 19808                                  
 19809                                  CANOT_READ:
 19810                                  	; MSDOS 3.3
 19811 0000434E 59                      	POP	CX		;M039.
 19812                                  	; MSDOS 3.3 (& MSDOS 6.0)
 19813 0000434F 59                      	POP	CX              ;Clean stack.
 19814 00004350 5B                      	POP	BX
 19815                                  
 19816                                  	;entry	SET_ACC_ERR_DS
 19817                                  SET_ACC_ERR_DS:
 19818                                  ;hkn; SS is DOSDATA
 19819                                  	;Context DS
 19820 00004351 16                      	push	ss
 19821 00004352 1F                      	pop	ds
 19822                                  
 19823                                  	;entry	SET_ACC_ERR
 19824                                  SET_ACC_ERR:
 19825 00004353 31C9                    	XOR	CX,CX
 19826                                  	;mov	ax,5
 19827 00004355 B80500                  	MOV	AX,error_access_denied
 19828 00004358 F9                      	STC
 19829 00004359 C3                      	retn
 19830                                  
 19831                                  SKIPERR:
 19832 0000435A 8916[5205]              	MOV	[LASTPOS],DX
 19833 0000435E 891E[5405]              	MOV	[CLUSNUM],BX
 19834 00004362 833E[6405]00            	CMP	word [BYTCNT1],0
 19835 00004367 7405                    	JZ	short RDMID
 19836 00004369 E8B80F                  	call	BUFRD
 19837 0000436C 72E3                    	JC	short SET_ACC_ERR_DS
 19838                                  RDMID:
 19839 0000436E 833E[6805]00            	CMP	word [SECCNT],0
 19840 00004373 0F849D00                	JZ	RDLAST ; 10/08/2018
 19841 00004377 E82610                  	call	NEXTSEC
 19842 0000437A 72CF                    	JC	short SETSFTJ2
 19843 0000437C C606[0F05]01            	MOV	BYTE [TRANS],1		; A transfer is taking place
 19844                                  ONSEC:
 19845 00004381 8A16[0E05]              	MOV	DL,[SECCLUSPOS]	; (dx/DL = Extent start) ((dh = ?))
 19846 00004385 8B0E[6805]              	MOV	CX,[SECCNT]
 19847 00004389 8B1E[5405]              	MOV	BX,[CLUSNUM]
 19848                                  RDLP:
 19849 0000438D E84110                  	call	OPTIMIZE
 19850 00004390 72BF                    	JC	short SET_ACC_ERR_DS
 19851 00004392 57                      	PUSH	DI                      ;DI = Next physical cluster.
 19852 00004393 50                      	PUSH	AX                      ;AX = # of sectors remaining.
 19853 00004394 53                      	PUSH	BX			;[DMAADD+2]:BX = Transfer address.
 19854                                  	;mov	byte [ALLOWED],38h
 19855 00004395 C606[F702]38            	MOV	byte [ALLOWED],Allowed_RETRY+Allowed_FAIL+Allowed_IGNORE
 19856 0000439A 8E1E[DC02]              	MOV	DS,[DMAADD+2]
 19857                                  
 19858 0000439E 52                      	PUSH	DX                      ;[HIGH_SECTOR]:DX = phys. sector #.
 19859 0000439F 51                      	PUSH	CX                      ;CX = # of contiguous sectors to read.
 19860                                  
 19861                                  	; MSDOS 6.0
 19862                                  	;call	SET_RQ_SC_PARMS 	 ;LB. do this for SC ;AN000;
 19863                                  
 19864                                  	; MSDOS 3.3 (& MSDOS 6.0)
 19865 000043A0 E8C9FD                  	call	DREAD
 19866                                  
 19867                                  	; MSDOS 3.3 
 19868 000043A3 5B                      	pop	bx
 19869 000043A4 5A                      	pop	dx
 19870 000043A5 72A7                    	jc	short CANOT_READ
 19871 000043A7 01D3                    	add	bx,dx	; (bx = Extent end)
 19872 000043A9 268A4600                	mov	al,[es:bp] ; mov al,[es:bp+0]
 19873                                  	;mov	al,[ES:BP+DPB.DRIVE] 
 19874 000043AD E8F119                  	call	SETVISIT
 19875                                  	; ->***
 19876                                  
 19877                                  ;M039
 19878                                  	; MSDOS 6.0 
 19879                                  	;pop	cx
 19880                                  	;pop	dx
 19881                                  	;pop	WORD [TEMP_VAR]
 19882                                  	;jc	short CANOT_READ
 19883                                  
 19884                                  	;mov	[TEMP_VAR2],ds
 19885                                  
 19886                                  ;       CX = # of contiguous sectors read.  (These constitute a block of
 19887                                  ;            sectors, also termed an "Extent".)
 19888                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
 19889                                  ;       [TEMP_VAR2]:[TEMP_VAR] = Transfer address (destination data address).
 19890                                  ;       ES:BP -> Drive Parameter Block (DPB).
 19891                                  ;
 19892                                  ;	The Buffer Queue must now be scanned: the contents of any dirty
 19893                                  ;	buffers must be "read" into the transfer memory block, so that the
 19894                                  ;       transfer memory reflects the most recent data.
 19895                                  
 19896                                  	;call    DskRdBufScan
 19897                                  
 19898                                  	;;Context DS
 19899                                  	;push	ss
 19900                                  	;pop	ds
 19901                                          
 19902                                  	;pop	cx
 19903                                          ;pop	bx
 19904                                  
 19905                                  ;       CX = # of sector remaining.
 19906                                  ;       BX = Next physical cluster.
 19907                                  ;M039
 19908                                  	; 25/07/2018 - Retro DOS v3.0
 19909                                  	; ***->
 19910                                  	; MSDOS 3.3
 19911                                  	; IBMDOS.COM (1987) - Offset 42BDh
 19912                                  bufq:
 19913                                  ;	DX = Extent start.
 19914                                  ;	BX = Extent end.
 19915                                  ;	 AL = Drive #.
 19916                                  ;     DS:DI-> 1st buffer in queue.
 19917                                  
 19918                                  	;or	byte [di+5],20h
 19919 000043B0 804D0520                	or	byte [DI+BUFFINFO.buf_flags],buf_visit ; Bit 5 = reserved
 19920                                  	;cmp	al,[di+4]	
 19921 000043B4 3A4504                  	cmp	al,[DI+BUFFINFO.buf_ID]
 19922 000043B7 7541                    	jnz	short bufq3
 19923                                  	;cmp	[di+6],dx
 19924 000043B9 395506                  	cmp	[DI+BUFFINFO.buf_sector],dx
 19925 000043BC 723C                    	jb	short bufq3	; Jump if Extent start > buffer sector.
 19926                                  	;cmp	[di+6],bx
 19927 000043BE 395D06                  	cmp	[DI+BUFFINFO.buf_sector],bx
 19928 000043C1 7337                    	jnb	short bufq3	; Jump if Extent end >= buffer sector.
 19929                                  	
 19930                                  	; Buffer sector is in the Extent (contiguous sectors to read)
 19931                                  
 19932                                  ;       Buffer's sector is in Extent: if it is dirty, copy its contents to
 19933                                  ;	transfer memory; otherwise, just re-position it in the buffer queue
 19934                                  ;       as MRU (Most Recently Used).
 19935                                  
 19936                                  	;test	byte [di+5],40h
 19937 000043C3 F6450540                	test	byte [DI+BUFFINFO.buf_flags],buf_dirty ; Bit 6 = dirty flag
 19938 000043C7 742E                    	jz	short bufq2	; clear buffer, check the next buff sec
 19939 000043C9 58                      	pop	ax ; transfer address
 19940 000043CA 50                      	push	ax
 19941 000043CB 57                      	push	di
 19942 000043CC 52                      	push	dx
 19943                                  	;sub	dx,[di+6]
 19944 000043CD 2B5506                  	sub	dx,[DI+BUFFINFO.buf_sector]
 19945 000043D0 F7DA                    	neg	dx
 19946                                  
 19947                                  ;       DX = offset (in sectors) of buffer sector within Transfer memory
 19948                                  ;            block.
 19949                                  
 19950 000043D2 89FE                    	mov	si,di
 19951 000043D4 89C7                    	mov	di,ax
 19952 000043D6 89D0                    	mov	ax,dx
 19953                                  	;mov	cx,[es:bp+6]	
 19954 000043D8 268B4E02                	mov     cx,[ES:BP+DPB.SECTOR_SIZE] ; CX = sector size (in bytes).
 19955 000043DC F7E1                    	mul	cx
 19956 000043DE 01C7                    	add	di,ax
 19957                                  
 19958                                  	; 06/07/2019
 19959                                  	;lea	si,[si+16]
 19960 000043E0 8D7410                  	lea	si,[SI+BUFINSIZ] ;DS:SI -> buffer data.
 19961 000043E3 D1E9                           	shr	cx,1
 19962 000043E5 06                      	push	es
 19963 000043E6 368E06[DC02]            	mov	es,[SS:DMAADD+2]
 19964                                  
 19965                                  ;	   CX = sector size (in WORDs) ; CF=1 if odd # of bytes.
 19966                                  ;       DS:SI-> Buffer sector data.
 19967                                  ;       ES:DI-> Destination within Transfer memory block.
 19968                                  
 19969 000043EB F3A5                    	rep	movsw			;Copy buffer sector to Transfer memory
 19970                                  	;adc	cx,0                    ;CX=1 if odd # of bytes, else CX=0.
 19971                                  	;rep	movsb                   ;Copy last byte.
 19972 000043ED 7301                    	jnc	short bufq1
 19973 000043EF A4                      	movsb
 19974                                  bufq1:
 19975 000043F0 07                      	pop	es
 19976 000043F1 5A                      	pop	dx
 19977 000043F2 5F                      	pop	di
 19978 000043F3 268A4600                	mov	al,[es:bp]  ; mov al,[es:bp+0]
 19979                                  	;mov	al,[ES:BP+DPB.DRIVE]
 19980                                  bufq2:
 19981 000043F7 E8D419                  	call	SCANPLACE
 19982                                  bufq3:
 19983 000043FA E8BD19                  	call	SKIPVISIT
 19984 000043FD 75B1                    	jnz	short bufq
 19985                                  	
 19986 000043FF 16                      	push	ss
 19987 00004400 1F                      	pop	ds
 19988 00004401 59                      	pop	cx
 19989 00004402 59                      	pop	cx
 19990 00004403 5B                      	pop	bx	
 19991                                  bufq4:
 19992 00004404 E30E                    	JCXZ	RDLAST
 19993 00004406 E82D16                  	call	IsEOF			; test for eof on fat size
 19994 00004409 7326                    	JAE	short SETSFT
 19995 0000440B B200                    	MOV	DL,0
 19996 0000440D FF06[5205]              	INC	word [LASTPOS]		; We'll be using next cluster
 19997 00004411 E979FF                  	JMP	RDLP
 19998                                  
 19999                                  RDLAST:
 20000 00004414 A1[6605]                	MOV	AX,[BYTCNT2]
 20001 00004417 09C0                    	OR	AX,AX
 20002 00004419 7416                    	JZ	short SETSFT
 20003 0000441B A3[6405]                	MOV	[BYTCNT1],AX
 20004 0000441E E87F0F                  	call	NEXTSEC
 20005 00004421 720E                    	JC	short SETSFT
 20006 00004423 C706[5E05]0000          	MOV	word [BYTSECPOS],0
 20007 00004429 E8F80E                  	call	BUFRD
 20008                                  	; 10/08/2018
 20009 0000442C 7303                    	JNC	short SETSFT
 20010 0000442E E920FF                  	JMP	SET_ACC_ERR_DS
 20011                                  
 20012                                  ;------------------------------------------------------------------------------
 20013                                  ;
 20014                                  ; Procedure Name : SETSFT
 20015                                  ; Inputs:
 20016                                  ;	[NEXTADD],[CLUSNUM],[LASTPOS] set to determine transfer size
 20017                                  ;		and set cluster fields
 20018                                  ; Function:
 20019                                  ;	Update [THISSFT] based on the transfer
 20020                                  ; Outputs:
 20021                                  ;	sf_position, sf_lstclus, and sf_cluspos updated
 20022                                  ;	ES:DI points to [THISSFT]
 20023                                  ;	CX No. of bytes transferred
 20024                                  ;	Carry clear
 20025                                  ;
 20026                                  ;----------------------------------------------------------------------------
 20027                                  
 20028                                  	;entry	SETSFT
 20029                                  
 20030                                  ; 26/07/2018 - Retro DOS v3.0
 20031                                  SETSFT:
 20032 00004431 C43E[3605]              	LES	DI,[THISSFT]
 20033                                  
 20034                                  ; Same as SETSFT except ES:DI already points to SFT
 20035                                  	;entry	SETCLUS
 20036                                  SETCLUS:	
 20037 00004435 8B0E[5005]              	MOV	CX,[NEXTADD]
 20038 00004439 2B0E[DA02]              	SUB	CX,[DMAADD]		; Number of bytes transfered
 20039                                  	;test	word [es:di+5],80h
 20040 0000443D 26F745058000            	TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 20041 00004443 750E                    	JNZ	short ADDREC		; don't set clusters if device
 20042 00004445 A1[5405]                	MOV	AX,[CLUSNUM]
 20043                                  	;mov	[es:di+1Bh],ax
 20044 00004448 2689451B                	MOV	[ES:DI+SF_ENTRY.sf_lstclus],AX
 20045 0000444C A1[5205]                	MOV	AX,[LASTPOS]
 20046                                  	;mov	[es:di+19h],ax
 20047 0000444F 26894519                	MOV	[ES:DI+SF_ENTRY.sf_cluspos],AX
 20048                                  
 20049                                  ;----------------------------------------------------------------------------
 20050                                  ;
 20051                                  ; Procedure : AddRec
 20052                                  ; Inputs:
 20053                                  ;	ES:DI points to SFT
 20054                                  ;	CX is No. Bytes transferred
 20055                                  ; Function:
 20056                                  ;	Update the SFT offset based on the transfer
 20057                                  ; Outputs:
 20058                                  ;	sf_position updated to point to first byte after transfer
 20059                                  ;	ES:DI points to SFT
 20060                                  ;	CX No. of bytes transferred
 20061                                  ;	Carry clear
 20062                                  ;----------------------------------------------------------------------------
 20063                                  
 20064                                  	;entry	AddRec
 20065                                  ADDREC:
 20066 00004453 E309                    	JCXZ	RET28		; If no records read,  don't change position
 20067                                  	;add	[es:di+15h],cx
 20068 00004455 26014D15                	ADD	[ES:DI+SF_ENTRY.sf_position],CX  ; Update current position
 20069                                  	;adc	word [es:di+17h], 0
 20070 00004459 2683551700              	ADC	WORD [ES:DI+SF_ENTRY.sf_position+2],0
 20071                                  RET28:	
 20072 0000445E F8                      	CLC
 20073 0000445F C3                      	retn
 20074                                  
 20075                                  ; 25/07/2018
 20076                                  ; MSDOS 6.0
 20077                                  ;Break   <DskRdBufScan -- Disk Read Buffer Scan>
 20078                                  ;----------------------------------------------------------------------------
 20079                                  ;
 20080                                  ; Procedure Name : DskRdBufScan
 20081                                  ;
 20082                                  ; Inputs:
 20083                                  ;       CX = # of contiguous sectors read.  (These constitute a block of
 20084                                  ;            sectors, also termed an "Extent".)
 20085                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
 20086                                  ;       [TEMP_VAR2]:[TEMP_VAR] = Transfer address (destination data address).
 20087                                  ;       ES:BP -> Drive Parameter Block (DPB).
 20088                                  ;
 20089                                  ; Function:
 20090                                  ;	The Buffer Queue is scanned: the contents of any dirty buffers are
 20091                                  ;	"read" into the transfer memory block, so that the transfer memory
 20092                                  ;	reflects the most recent data.
 20093                                  ;
 20094                                  ; Outputs:
 20095                                  ;       Transfer memory updated as required.
 20096                                  ;
 20097                                  ; Uses:
 20098                                  ;       DS,AX,BX,CX,SI,DI destroyed.
 20099                                  ;       SS override for all global variables.
 20100                                  ;
 20101                                  ; Notes:
 20102                                  ;       FIRST_BUFF_ADDR is set-up to contain the LAST buffer to check, rather
 20103                                  ;	than the FIRST.
 20104                                  ;----------------------------------------------------------------------------
 20105                                  ;M039: Created
 20106                                  
 20107                                  ;procedure   DskRdBufScan,NEAR
 20108                                  ;
 20109                                  ;ASSUME  DS:NOTHING
 20110                                  ;
 20111                                  ;	cmp	[DirtyBufferCount],0	;Any dirty buffers?
 20112                                  ;	je	bufx			; -no, skip all work.
 20113                                  ;
 20114                                  ;       mov     bx,[HIGH_SECTOR]
 20115                                  ;       mov     si,bx
 20116                                  ;       add     cx,dx
 20117                                  ;       adc     si,0
 20118                                  ;
 20119                                  ;	call	GETCURHEAD		;DS:DI -> 1st buf in queue.
 20120                                  ;       mov     ax,[di].buf_prev
 20121                                  ;       mov     [FIRST_BUFF_ADDR],ax
 20122                                  ;
 20123                                  ;       Assert  ISDPB,<ES,BP>,"DISKREAD/bufchk"
 20124                                  ;	mov	al,es:[bp].dpb_drive
 20125                                  ;
 20126                                  ;;            BX:DX = Extent start.
 20127                                  ;;            SI:CX = Extent end + 1.
 20128                                  ;;               AL = Drive #.
 20129                                  ;;            DS:DI-> 1st buffer in queue.
 20130                                  ;;[FIRST_BUFF_ADDR] = Address offset of last buffer in queue.
 20131                                  ;
 20132                                  ;bufq:	cmp     al,BYTE PTR [di.buf_ID] ;Same drive?
 20133                                  ;	jne     bufq1        		;  -no, jump.
 20134                                  ;
 20135                                  ;       Cmp32   bx,dx,<WORD PTR [di.buf_sector+2]>,<WORD PTR [di.buf_sector]>
 20136                                  ;       ja	bufq1			;Jump if Extent start > buffer sector.
 20137                                  ;       Cmp32   si,cx,<WORD PTR [di.buf_sector+2]>,<WORD PTR [di.buf_sector]>
 20138                                  ;       ja	bufq2                   ;Jump if Extent end >= buffer sector.
 20139                                  ;
 20140                                  ;bufq1:	cmp     di,[FIRST_BUFF_ADDR]    ;Scanned entire buffer queue?
 20141                                  ;       mov     di,[di].buf_next        ; Set-up for next buffer.
 20142                                  ;       jne     bufq                    ; -no, do next buffer
 20143                                  ;
 20144                                  ;bufx:   return                          ;Exit.
 20145                                  ;
 20146                                  ;;       Buffer's sector is in Extent: if it is dirty, copy its contents to
 20147                                  ;;	transfer memory; otherwise, just re-position it in the buffer queue
 20148                                  ;;       as MRU (Most Recently Used).
 20149                                  ;
 20150                                  ;bufq2:	SaveReg <ax>
 20151                                  ;	testb   [di.buf_flags],buf_dirty ;Buffer dirty?
 20152                                  ;	jz      bufq3                    ; -no, jump.
 20153                                  ;
 20154                                  ;        SaveReg <cx,dx,si,di,es>
 20155                                  ;
 20156                                  ;	mov     ax,dx
 20157                                  ;	sub	ax, word ptr [di].buf_sector
 20158                                  ;	neg	ax
 20159                                  ;
 20160                                  ;;       AX = offset (in sectors) of buffer sector within Transfer memory
 20161                                  ;;            block.  (Note: the upper word of the sector # may be ignored
 20162                                  ;;	     since no more than 64k bytes will ever be read.  This 64k limit
 20163                                  ;;            is imposed by the input parameters of the disk read operation.)
 20164                                  ;
 20165                                  ;	lea	si,[di].BUFINSIZ	;DS:SI -> buffer data.
 20166                                  ;	mov     cx,es:[bp].dpb_sector_size ;CX = sector size (in bytes).
 20167                                  ;	mul     cx			;AX = offset (in bytes) of buf. sector
 20168                                  ;	mov     di,WORD PTR [TEMP_VAR]
 20169                                  ;	add	di,ax
 20170                                  ;	mov	es,WORD PTR [TEMP_VAR2]
 20171                                  ;	shr	cx,1
 20172                                  ;
 20173                                  ;;	   CX = sector size (in WORDs); CF=1 if odd # of bytes.
 20174                                  ;;       DS:SI-> Buffer sector data.
 20175                                  ;;       ES:DI-> Destination within Transfer memory block.
 20176                                  ;
 20177                                  ;	rep	movsw			;Copy buffer sector to Transfer memory
 20178                                  ;	adc	cx,0                    ;CX=1 if odd # of bytes, else CX=0.
 20179                                  ;	rep	movsb                   ;Copy last byte.
 20180                                  ;	RestoreReg <es,di,si,dx,cx>
 20181                                  ;
 20182                                  ;       DS:DI -> current buffer.
 20183                                  ;
 20184                                  ;bufq3:	mov     ax,di			;DS:AX -> Current buffer.
 20185                                  ;       invoke  SCANPLACE
 20186                                  ;       cmp	ax,[FIRST_BUFF_ADDR]    ;Last buffer?
 20187                                  ;       RestoreReg <ax>
 20188                                  ;       jnz    	bufq                   	; -no, jump.
 20189                                  ;       jmp     short bufx              ; -yes, exit.
 20190                                  ;
 20191                                  ;EndProc DskRdBufScan
 20192                                  
 20193                                  ;Break   <DISKWRITE -- PERFORM USER DISK WRITE>
 20194                                  ;----------------------------------------------------------------------------
 20195                                  ;
 20196                                  ; Procedure Name : DISKWRITE
 20197                                  ;
 20198                                  ; Inputs:
 20199                                  ;       Outputs of SETUP
 20200                                  ; Function:
 20201                                  ;       Perform disk write
 20202                                  ; Outputs:
 20203                                  ;    Carry clear
 20204                                  ;       CX = No. of bytes read
 20205                                  ;       ES:DI point to SFT
 20206                                  ;       SFT offset and cluster pointers updated
 20207                                  ;    Carry set
 20208                                  ;       CX = 0
 20209                                  ;       ES:DI point to SFT
 20210                                  ;       AX has error code
 20211                                  ;----------------------------------------------------------------------------
 20212                                  
 20213                                  ;hkn; called by DOS_WRITE. DS already set up at this point.
 20214                                  
 20215                                  DISKWRITE:
 20216                                  	; MSDOS 3.3
 20217                                  	; IBMDOS.COM - Offset 436Dh
 20218                                  	;;test	byte [es:di+4],8
 20219                                  	;TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_volume_id
 20220                                  	;jz	short write_cont
 20221                                  	;jmp	SET_ACC_ERR_DS
 20222                                  ;write_cont:
 20223                                  	;push	cx
 20224                                  	;or	cx, cx
 20225                                  	;jnz	short Not_Truncate
 20226                                  	;;mov	cx,-1
 20227                                  	;dec	cx
 20228                                  ;Not_Truncate:
 20229                                  	;call	LOCK_CHECK
 20230                                  	;pop	cx
 20231                                  	;jnb	short _WRITE_OK
 20232                                  	;call	WRITE_LOCK_VIOLATION
 20233                                  	;jnb	short DISKWRITE
 20234                                  	;retn
 20235                                  
 20236                                  	; MSDOS 6.0
 20237 00004460 E824FD                  	call	CHECK_WRITE_LOCK	;IFS. check write lock	;AN000;
 20238                                  	; 19/08/2018
 20239 00004463 7304                    	JNC	short _WRITE_OK		;IFS. lock check ok	;AN000;
 20240 00004465 C3                      	retn
 20241                                  
 20242                                  WRTEOFJ:
 20243 00004466 E99501                  	JMP     WRTEOF
 20244                                  
 20245                                  _WRITE_OK:
 20246                                   	; 27/07/2018
 20247                                  	; IBMDOS.COM - Offset 438Eh
 20248                                  	
 20249                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20250                                  	;and	word [es:di+5],0BFBFh
 20251 00004469 26816505BFBF            	AND     word [ES:DI+SF_ENTRY.sf_flags],~(sf_close_nodate|devid_file_clean)
 20252                                  				; Mark file as dirty, clear no date on close
 20253                                  	; MSDOS 6.0
 20254                                  	;MOV	AX,[ES:DI+SF_ENTRY.sf_size]		;M039
 20255                                          ;MOV	[TEMP_VAR],AX                           ;M039
 20256                                  	;MOV	AX,[ES:DI+SF_ENTRY.sf_size+2]		;M039
 20257                                          ;MOV	[TEMP_VAR2],AX                          ;M039
 20258                                  
 20259                                  ;	TEMP_VAR2:TEMP_VAR = Current file size (sf_size);M039
 20260                                  
 20261                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20262 0000446F C42E[2405]              	LES     BP,[THISDPB]
 20263                                  
 20264 00004473 E840FE                  	call	BREAKDOWN
 20265                                  
 20266 00004476 A1[6005]                	MOV     AX,[BYTPOS]
 20267 00004479 8B16[6205]              	MOV     DX,[BYTPOS+2]
 20268 0000447D E3E7                    	JCXZ    WRTEOFJ                 ;Make the file length = sf_position
 20269 0000447F 01C8                    	ADD     AX,CX
 20270 00004481 83D200                  	ADC     DX,0                    ;DX:AX = last byte to write + 1.
 20271                                  
 20272                                  	;mov	bx,[es:bp+2]
 20273 00004484 268B5E02                	MOV     BX,[ES:BP+DPB.SECTOR_SIZE]
 20274                                  
 20275                                  	; MSDOS 6.0
 20276                                  	;CALL	DIV32                   ;DX:AX/BX = CX:AX + DX (rem.).
 20277                                  	;MOV	SI,AX
 20278                                          ;MOV	[HIGH_SECTOR],CX
 20279                                  
 20280                                  ;       [HIGH_SECTOR]:SI = Last full sector to write.
 20281                                  
 20282                                  	;OR	DX,DX
 20283                                  	;PUSH	DX			;M039: Free DX for use by SHR32
 20284                                  	;MOV	DX,CX			;M039
 20285                                  	;JNZ	short CALCLUS
 20286                                  	;SUB	AX,1                    ;AX must be zero base indexed	;AC000;
 20287                                  	;SBB	DX,0			;M039 ;F.C. >32mb		;AN000;
 20288                                  
 20289                                  	; MSDOS 3.3
 20290 00004488 39DA                    	cmp	dx,bx
 20291 0000448A 7360                    	jnb	short WRTERR33
 20292 0000448C F7F3                    	div	bx
 20293 0000448E 89C3                    	mov	bx,ax
 20294 00004490 09D2                    	OR	DX,DX
 20295 00004492 7501                    	JNZ	short CALCLUS
 20296 00004494 48                      	dec	ax
 20297                                  
 20298                                  CALCLUS:
 20299                                  	; MSDOS 3.3
 20300                                  	;mov	cl,[es:bp+5]
 20301 00004495 268A4E05                	MOV	CL,[ES:BP+DPB.CLUSTER_SHIFT]
 20302 00004499 D3E8                    	shr	ax,cl
 20303 0000449B 50                      	push	ax
 20304 0000449C 52                      	push	dx
 20305 0000449D 06                      	push	es
 20306 0000449E C43E[3605]              	les	di,[THISSFT]
 20307                                  	;mov	ax,[es:di+11h]
 20308                                  	;mov	dx,[es:di+13h]
 20309 000044A2 268B4511                	mov	ax,[ES:DI+SF_ENTRY.sf_size]
 20310 000044A6 268B5513                	mov	dx,[ES:DI+SF_ENTRY.sf_size+2]
 20311 000044AA 07                      	pop	es
 20312                                  	;DX:AX = current file size (in bytes).
 20313                                  	;div	word [es:bp+2]
 20314 000044AB 26F77602                	div	word [ES:BP+DPB.SECTOR_SIZE]
 20315 000044AF 89C1                    	mov	cx,ax
 20316 000044B1 09D2                    	or	dx,dx
 20317 000044B3 7401                    	jz	short NORND
 20318 000044B5 40                      	inc	ax
 20319                                  
 20320                                  	; MSDOS 6.0
 20321                                  	;CALL	SHR32                   ;F.C. >32mb			;AN000;
 20322                                  	;POP	DX
 20323                                  
 20324                                  ;       AX = Last cluster to write.
 20325                                  ;       DX = # of bytes in last sector to write (the "tail").
 20326                                  ;       BX = ES:[BP.dpb_sector_size]
 20327                                  
 20328                                  	;PUSH	AX
 20329                                  	;PUSH	DX
 20330                                  ;M039
 20331                                  	;mov	dx,[TEMP_VAR2]
 20332                                  	;mov	ax,[TEMP_VAR]           ;DX:AX = current file size (in bytes).
 20333                                  	;call	DIV32           	;DX:AX/BX = CX:AX + DX (rem.)
 20334                                  	;mov	[TEMP_VAR2],cx
 20335                                  	;mov	[VALSEC+2],cx
 20336                                  	;mov	cx,ax
 20337                                  	;mov	bx,si
 20338                                  
 20339                                  ;       [HIGH_SECTOR]:BX = Last full sector to write.
 20340                                  ;          [VALSEC+2]:CX = Last full sector of current file.
 20341                                  ;         [TEMP_VAR2]:CX = Last full sector of current file.
 20342                                  ;                     DX = # of bytes in last sector of current file.
 20343                                  ;M039
 20344                                  	;OR	DX,DX
 20345                                  	;JZ	short NORND
 20346                                  	;ADD	AX,1            	;Round up if any remainder	;AC000;
 20347                                  	;ADC	word [VALSEC+2],0
 20348                                  NORND:	
 20349                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20350 000044B6 A3[5C05]                	MOV     [VALSEC],AX
 20351                                  
 20352                                  ;       [VALSEC] = Last sector of current file.
 20353                                  
 20354 000044B9 31C0                    	XOR     AX,AX
 20355 000044BB A3[7005]                	MOV     [GROWCNT],AX
 20356 000044BE A3[7205]                	MOV     [GROWCNT+2],AX
 20357 000044C1 58                      	POP     AX
 20358                                  
 20359                                  	; MSDOS 6.0
 20360                                  	;MOV	DI,[HIGH_SECTOR]        ;F.C. >32mb			;AN000;
 20361                                  	;CMP	DI,[TEMP_VAR2]		;M039; F.C. >32mb			;AN000;
 20362                                  	;JB	short NOGROW		;F.C. >32mb                             ;AN000;
 20363                                  	;JZ	short lowsec		;F.C. >32mb                             ;AN000;
 20364                                  	;SUB	BX,CX                   ;F.C. >32mb                             ;AN000;
 20365                                  	;SBB	DI,[TEMP_VAR2]   	;M039; F.C. >32mb di:bx no. of sectors	;AN000;
 20366                                  	;JMP	short yesgrow           ;F.C. >32mb                             ;AN000;
 20367                                  ;lowsec:
 20368                                  	;MOV	DI,0			;F.C. >32mb
 20369                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20370 000044C2 29CB                    	SUB	BX,CX			; Number of full sectors
 20371 000044C4 723D                    	JB	short NOGROW
 20372 000044C6 742E                    	JZ	short TESTTAIL
 20373                                  ;yesgrow:
 20374                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20375 000044C8 89D1                    	MOV     CX,DX
 20376 000044CA 93                      	XCHG    AX,BX
 20377                                  	;mul	word [es:bp+2]
 20378 000044CB 26F76602                	MUL	word [ES:BP+DPB.SECTOR_SIZE]  ; Bytes of full sector growth
 20379                                  	
 20380                                  	; MSDOS 6.0
 20381                                  	;MOV	[HIGH_SECTOR],DX         ;F.C. >32mb save dx                    ;AN000;
 20382                                  	;MOV	[TEMP_VAR2],AX    	 ;M039; F.C. >32mb save ax		;AN000;
 20383                                  	;MOV	AX,DI                    ;F.C. >32mb                            ;AN000;
 20384                                  	;;mul	word [es:bp+2]
 20385                                  	;MUL	word [ES:BP+DPB.SECTOR_SIZE] ;F.C. >32mb do higher word multiply ;AN000;
 20386                                  	
 20387                                  	;ADD	AX,[HIGH_SECTOR]         ;F.C. >32mb add lower value            ;AN000;
 20388                                  	;MOV	DX,AX                    ;F.C. >32mb DX:AX is the result of     ;AN000;
 20389                                  	;MOV	AX,[TEMP_VAR2]    	 ;M039; F.C. >32mb a 32 bit multiply	;AN000;
 20390                                  
 20391                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20392 000044CF 29C8                    	SUB     AX,CX           ; Take off current "tail"
 20393 000044D1 83DA00                  	SBB     DX,0            ; 32-bit extension
 20394 000044D4 01D8                    	ADD     AX,BX           ; Add on new "tail"
 20395 000044D6 83D200                  	ADC     DX,0            ; ripple tim's head off
 20396 000044D9 EB21                    	JMP     SHORT SETGRW
 20397                                  
 20398                                  HAVSTART:
 20399                                  	;int 3
 20400 000044DB 89C1                    	MOV     CX,AX
 20401 000044DD E8EE0D                  	call	SKPCLP
 20402                                  	;JCXZ	DOWRTJ
 20403 000044E0 E357                    	jcxz	DOWRT
 20404                                  
 20405 000044E2 E85D0F                  	call	ALLOCATE
 20406                                  	;JNC	short DOWRTJ
 20407 000044E5 7352                    	jnc	short DOWRT
 20408                                  
 20409                                  	;entry   WRTERR
 20410                                  WRTERR:
 20411 000044E7 B40F                    	MOV     AH,0FH                          ;MS. write/data/fail/abort      ;AN000;
 20412                                  
 20413                                  	;entry WRTERR22
 20414                                  WRTERR22:
 20415 000044E9 A0[1105]                	MOV     AL,[THISDRV]                    ;MS.                            ;AN000;
 20416                                  
 20417                                  	; 27/07/2018
 20418                                  WRTERR33:
 20419                                  	;MOV	CX,0                    	;No bytes transferred
 20420 000044EC 31C9                    	XOR     CX,CX
 20421                                  					
 20422 000044EE C43E[3605]              	LES     DI,[THISSFT]
 20423                                  	;CLC	; 19/05/2019
 20424 000044F2 C3                      	retn
 20425                                  
 20426                                  ;DOWRTJ: 
 20427                                  ;	JMP     short DOWRT
 20428                                  
 20429                                  ACC_ERRWJ:
 20430                                  	; 10/08/2018
 20431                                  	;JMP	SET_ACC_ERRW
 20432 000044F3 E95BFE                  	jmp	SET_ACC_ERR_DS
 20433                                  
 20434                                  TESTTAIL:
 20435 000044F6 29D0                    	SUB     AX,DX
 20436 000044F8 7609                    	JBE	short NOGROW
 20437 000044FA 31D2                    	XOR     DX,DX
 20438                                  SETGRW:
 20439 000044FC A3[7005]                	MOV	[GROWCNT],AX
 20440 000044FF 8916[7205]              	MOV	[GROWCNT+2],DX
 20441                                  NOGROW:
 20442 00004503 58                      	POP     AX
 20443 00004504 8B0E[5405]              	MOV     CX,[CLUSNUM]    ; First cluster accessed
 20444 00004508 E8A30D                  	call	FNDCLUS
 20445 0000450B 72E6                    	JC	short ACC_ERRWJ
 20446 0000450D 891E[5405]              	MOV     [CLUSNUM],BX
 20447 00004511 8916[5205]              	MOV     [LASTPOS],DX
 20448                                  
 20449 00004515 29D0                    	SUB     AX,DX           ; Last cluster minus current cluster
 20450 00004517 7420                    	JZ	short DOWRT	; If we have last clus, we must have first
 20451 00004519 E3C0                    	JCXZ    HAVSTART        ; See if no more data
 20452 0000451B 51                      	PUSH    CX              ; No. of clusters short of first
 20453 0000451C 89C1                    	MOV     CX,AX
 20454 0000451E E8210F                  	call	ALLOCATE
 20455 00004521 59                      	POP     CX
 20456 00004522 72C3                    	JC	short WRTERR
 20457 00004524 8B16[5205]              	MOV     DX,[LASTPOS]
 20458 00004528 42                      	INC     DX
 20459 00004529 49                      	DEC     CX
 20460 0000452A 7405                    	JZ	short NOSKIP
 20461 0000452C E89F0D                  	call	SKPCLP
 20462 0000452F 72C2                    	JC	short ACC_ERRWJ
 20463                                  NOSKIP:
 20464 00004531 891E[5405]              	MOV     [CLUSNUM],BX
 20465 00004535 8916[5205]              	MOV     [LASTPOS],DX
 20466                                  DOWRT:
 20467 00004539 833E[6405]00            	CMP     word [BYTCNT1],0
 20468 0000453E 7409                    	JZ	short WRTMID
 20469 00004540 8B1E[5405]              	MOV     BX,[CLUSNUM]
 20470 00004544 E8140E                  	call	BUFWRT
 20471 00004547 72AA                    	JC	short ACC_ERRWJ
 20472                                  	;JC	short SET_ACC_ERRW
 20473                                  WRTMID:
 20474 00004549 A1[6805]                	MOV     AX,[SECCNT]
 20475 0000454C 09C0                    	OR      AX,AX
 20476 0000454E 7471                    	JZ	short WRTLAST		;M039
 20477 00004550 0106[5A05]              	ADD     [SECPOS],AX
 20478                                  	; MSDOS 6.0
 20479                                  	;ADC	WORD [SECPOS+2],0	;F.C. >32mb 	;AN000;
 20480 00004554 E8490E                  	call	NEXTSEC
 20481 00004557 729A                    	JC	short ACC_ERRWJ
 20482                                  	;JC	short SET_ACC_ERRW	;M039
 20483 00004559 C606[0F05]01            	MOV     BYTE [TRANS],1		; A transfer is taking place
 20484 0000455E 8A16[0E05]              	MOV     DL,[SECCLUSPOS] 	; (dx/DL = Extent start) ((dh = ?))
 20485 00004562 8B1E[5405]              	MOV     BX,[CLUSNUM]
 20486 00004566 8B0E[6805]              	MOV     CX,[SECCNT]
 20487                                  WRTLP:
 20488 0000456A E8640E                  	call	OPTIMIZE
 20489 0000456D 7284                    	JC	short ACC_ERRWJ
 20490                                  	;JC	short SET_ACC_ERRW
 20491                                  
 20492                                  ;M039
 20493                                  ;       DI = Next physical cluster.
 20494                                  ;       AX = # sectors remaining.
 20495                                  ;       [DMAADD+2]:BX = transfer address (source data address).
 20496                                  ;       CX = # of contiguous sectors to write. (These constitute a block of
 20497                                  ;	     sectors, also termed an "Extent".)
 20498                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
 20499                                  ;       ES:BP -> Drive Parameter Block (DPB).
 20500                                  ;
 20501                                  ;       Purge the Buffer Queue and the Secondary Cache of any buffers which
 20502                                  ;	are in Extent; they are being over-written.
 20503                                  
 20504 0000456F 57                      	push    di
 20505 00004570 50                      	push    ax
 20506                                  
 20507                                          ; MSDOS 6.0
 20508                                  	;call	DskWrtBufPurge          ;DS trashed.
 20509                                  ;ASSUME DS:NOTHING
 20510                                  ;M039
 20511                                  	; MSDOS 3.3
 20512                                  	; IBMDOS.COM (1987) - Offset 4497h
 20513 00004571 52                      	push	dx
 20514 00004572 53                      	push	bx
 20515 00004573 268A4600                	mov	al,[es:bp]
 20516                                  	;mov	AL,[ES:BP+DPB.DRIVE] ; mov al,[es:bp+0]
 20517 00004577 89CB                    	mov	bx,cx
 20518 00004579 01D3                    	add	bx,dx	; (bx = Extent end)
 20519                                  
 20520                                  ;	DX = Extent start.
 20521                                  ;	BX = Extent end.
 20522                                  ;	 AL = Drive #.
 20523                                  
 20524 0000457B E82318                  	call	SETVISIT
 20525                                  
 20526                                  wbufq1:
 20527                                  	;or	byte [di+5],20h
 20528 0000457E 804D0520                	or	byte [DI+BUFFINFO.buf_flags],buf_visit ; Bit 5 = reserved
 20529                                  	;cmp	al,[di+4]	
 20530 00004582 3A4504                  	cmp	al,[DI+BUFFINFO.buf_ID]
 20531 00004585 7512                    	jnz	short wbufq2	; Jump if Extent start > buffer sector.
 20532                                  	;cmp	[di+6],dx
 20533 00004587 395506                  	cmp	[DI+BUFFINFO.buf_sector],dx
 20534 0000458A 720D                    	jb	short wbufq2
 20535                                  	;cmp	[di+6],bx
 20536 0000458C 395D06                  	cmp	[DI+BUFFINFO.buf_sector],bx
 20537 0000458F 7308                    	jnb	short wbufq2	; Jump if Extent end >= buffer sector.
 20538                                  
 20539                                  	; Buffer sector is in the Extent
 20540                                  
 20541                                  	;mov	word [di+4],20FFh
 20542 00004591 C74504FF20              	mov	word [DI+BUFFINFO.buf_ID],20FFh
 20543                                  					; .buf_ID,    AL = FFh (Free buffer)
 20544                                  					; .buf_flags, AH = 0, reset/clear
 20545 00004596 E83518                  	call	SCANPLACE
 20546                                  wbufq2:
 20547 00004599 E81E18                  	call	SKIPVISIT
 20548 0000459C 75E0                    	jnz	short wbufq1
 20549 0000459E 5B                      	pop	bx
 20550 0000459F 5A                      	pop	dx
 20551                                  	
 20552                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20553                                  ;hkn; SS override for DMAADD and ALLOWED
 20554 000045A0 368E1E[DC02]            	MOV     DS,[SS:DMAADD+2]
 20555                                  	;mov	byte [ss:ALLOWED],38h
 20556 000045A5 36C606[F702]38          	MOV	byte [SS:ALLOWED],Allowed_RETRY+Allowed_FAIL+Allowed_IGNORE
 20557                                  
 20558                                  ;	put logic from DWRITE in-line here so we can modify it
 20559                                  ;	for DISK FULL conditions.
 20560                                  
 20561                                  DWRITE_LUP:
 20562                                  	; MSDOS 6.0
 20563                                  	;call	DSKWRITE
 20564                                  	;jz	short DWRITE_OKAY
 20565                                  
 20566                                  ;;	int	3
 20567                                  	;cmp	al,error_handle_Disk_Full	; compressed volume full?
 20568                                  	;jz	short DWRITE_DISK_FULL
 20569                                  
 20570                                  ;;hkn; SS override
 20571                                  	;MOV	BYTE [SS:READOP],1
 20572                                  	;call	HARDERRRW
 20573                                  	;CMP	AL,1		; Check for retry
 20574                                  	;JZ	short DWRITE_LUP
 20575                                  	;CMP	AL,3		; Check for FAIL
 20576                                  	;CLC
 20577                                  	;JNZ	short DWRITE_OKAY ; Ignore
 20578                                  	;STC
 20579                                  
 20580                                  	; MSDOS 3.3
 20581 000045AB E81DFC                  	call	DWRITE
 20582                                  
 20583                                  DWRITE_OKAY:
 20584                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20585                                  
 20586 000045AE 59                      	POP     CX
 20587 000045AF 5B                      	POP     BX
 20588                                  
 20589                                  ;       CX = # sectors remaining.
 20590                                  ;       BX = Next physical cluster.
 20591                                  
 20592                                  ;hkn; SS override
 20593                                          ;Context DS
 20594 000045B0 16                      	push	ss
 20595 000045B1 1F                      	pop	ds
 20596                                  
 20597 000045B2 720A                    	JC      SET_ACC_ERRW
 20598 000045B4 E30B                    	JCXZ    WRTLAST
 20599 000045B6 B200                    	MOV     DL,0
 20600 000045B8 FF06[5205]              	INC     word [LASTPOS]	; We'll be using next cluster
 20601 000045BC EBAC                    	JMP     short WRTLP
 20602                                  
 20603                                  	; 09/08/2018
 20604                                  	; MSDOS 6.0
 20605                                  ;DWRITE_DISK_FULL:
 20606                                  	;;Context DS		;SQ 3-5-93 DS must be setup on return!
 20607                                  	;push	ss
 20608                                  	;pop	ds
 20609                                  	;pop	cx		; unjunk stack
 20610                                  	;pop	bx
 20611                                  	;mov	byte [DISK_FULL],1
 20612                                  	;stc
 20613                                  	;jmp	short WRTERR	; go to disk full exit
 20614                                  
 20615                                  SET_ACC_ERRW:
 20616 000045BE E990FD                  	jmp	SET_ACC_ERR_DS
 20617                                  
 20618                                  WRTLAST:
 20619 000045C1 A1[6605]                	MOV     AX,[BYTCNT2]
 20620 000045C4 09C0                    	OR      AX,AX
 20621 000045C6 7413                    	JZ	short FINWRT
 20622 000045C8 A3[6405]                	MOV     [BYTCNT1],AX
 20623 000045CB E8D20D                  	call	NEXTSEC
 20624 000045CE 72EE                    	JC	short SET_ACC_ERRW
 20625 000045D0 C706[5E05]0000          	MOV     word [BYTSECPOS],0
 20626 000045D6 E8820D                  	call	BUFWRT
 20627 000045D9 72E3                    	JC	short SET_ACC_ERRW
 20628                                  FINWRT:
 20629 000045DB C43E[3605]              	LES     DI,[THISSFT]
 20630 000045DF A1[7005]                	MOV     AX,[GROWCNT]
 20631 000045E2 8B0E[7205]              	MOV     CX,[GROWCNT+2]
 20632 000045E6 09C0                    	OR      AX,AX
 20633 000045E8 7502                    	JNZ	short UPDATE_size
 20634 000045EA E30F                    	JCXZ    SAMSIZ
 20635                                  UPDATE_size:
 20636                                  	;add	[es:di+11h],ax
 20637 000045EC 26014511                	ADD     [ES:DI+SF_ENTRY.sf_size],AX
 20638                                  	;adc	[es:di+13h],cx
 20639 000045F0 26114D13                	ADC     [ES:DI+SF_ENTRY.sf_size+2],CX
 20640                                  ;
 20641                                  ; Make sure that all other SFT's see this growth also.
 20642                                  ;
 20643 000045F4 B80100                  	MOV     AX,1
 20644                                  ;if installed
 20645                                  	;Call	JShare + 14 * 4
 20646 000045F7 FF1E[9400]              	call    far [JShare+(14*4)]	; 14 = ShSU
 20647                                  ;else
 20648                                  ;	Call    ShSU
 20649                                  ;endif
 20650                                  
 20651                                  SAMSIZ:
 20652 000045FB E937FE                  	jmp	SETCLUS	; ES:DI already points to SFT
 20653                                  
 20654                                  WRTEOF:
 20655 000045FE 89C1                    	MOV     CX,AX
 20656 00004600 09D1                    	OR      CX,DX
 20657 00004602 7464                    	JZ	short KILLFIL
 20658 00004604 83E801                  	SUB     AX,1
 20659 00004607 83DA00                  	SBB     DX,0
 20660                                  
 20661                                  	; MSDOS 3.3
 20662                                  	;div	word [es:bp+2]
 20663 0000460A 26F77602                	div	word [ES:BP+DPB.SECTOR_SIZE]
 20664                                  	;mov	cl,[es:bp+5]
 20665 0000460E 268A4E05                	mov	cl,[ES:BP+DPB.CLUSTER_SHIFT] 
 20666 00004612 D3E8                    	shr     ax,cl
 20667                                  
 20668                                  	; MSDOS 6.0
 20669                                  	;PUSH	BX
 20670                                  	;MOV	BX,[ES:BP+DPB.SECTOR_SIZE]    ;F.C. >32mb                       ;AN000;
 20671                                  	;CALL	DIV32                         ;F.C. >32mb                       ;AN000;
 20672                                  	;POP	BX			      ;F.C. >32mb			;AN000;
 20673                                  	;MOV	DX,CX			      ;M039
 20674                                          ;MOV	[HIGH_SECTOR],CX              ;M039: Probably extraneous, but not sure.
 20675                                  	;CALL	SHR32                         ;F.C. >32mb                       ;AN000;
 20676                                  
 20677 00004614 89C1                    	MOV     CX,AX
 20678 00004616 E8950C                  	call	FNDCLUS
 20679                                  SET_ACC_ERRWJ2:
 20680 00004619 72A3                    	JC	short SET_ACC_ERRW
 20681                                  
 20682 0000461B E326                    	JCXZ    RELFILE
 20683 0000461D E8220E                  	call	ALLOCATE
 20684 00004620 721E                    	JC	short WRTERRJ              ;;;;;;;;; disk full
 20685                                  
 20686                                  UPDATE:
 20687 00004622 C43E[3605]              	LES	DI,[THISSFT]
 20688 00004626 A1[6005]                	MOV	AX,[BYTPOS]
 20689                                  	;mov	[es:di+11h],ax
 20690 00004629 26894511                	MOV	[ES:DI+SF_ENTRY.sf_size],AX
 20691 0000462D A1[6205]                	MOV	AX,[BYTPOS+2]
 20692                                  	;mov	[es:di+13h],ax
 20693 00004630 26894513                	MOV	[ES:DI+SF_ENTRY.sf_size+2],AX
 20694                                  ;
 20695                                  ; Make sure that all other SFT's see this growth also.
 20696                                  ;
 20697 00004634 B80200                  	MOV     AX,2
 20698                                  ;if installed
 20699                                  	;Call	JShare + 14 * 4
 20700 00004637 FF1E[9400]              	call    far [JShare+(14*4)]	; 14 = ShSU
 20701                                  ;else
 20702                                  ;	Call    ShSU
 20703                                  ;endif
 20704 0000463B 31C9                    	XOR     CX,CX
 20705 0000463D E913FE                  	jmp	ADDREC
 20706                                  
 20707                                  WRTERRJ: 
 20708 00004640 E9A4FE                  	JMP     WRTERR
 20709                                  
 20710                                  ;;;;;;;;;;;;;;;; 7/18/86
 20711                                  ;;;;;;;;;;;;;;;;
 20712                                  
 20713                                  RELFILE:
 20714                                  	; MSDOS 6.0
 20715 00004643 06                      	PUSH    ES                    ;AN002; BL Reset Lstclus and cluspos to
 20716 00004644 C43E[3605]              	LES     DI,[THISSFT]          ;AN002; BL beginning of file if current
 20717 00004648 263B5519                	CMP     DX,[ES:DI+SF_ENTRY.sf_cluspos]	;AN002; BL cluspos is past EOF.
 20718 0000464C 730E                    	JAE	short SKIPRESET	      		;AN002; BL
 20719 0000464E 26C745190000            	MOV     word [ES:DI+SF_ENTRY.sf_cluspos],0 ;AN002; BL
 20720 00004654 268B550B                	MOV     DX,[ES:DI+SF_ENTRY.sf_firclus]	;AN002; BL
 20721 00004658 2689551B                	MOV     [ES:DI+SF_ENTRY.sf_lstclus],DX	;AN002; BL
 20722                                  SKIPRESET:                            		;AN002; BL
 20723 0000465C 07                      	POP     ES                    		;AN002; BL
 20724                                  ;
 20725 0000465D BAFFFF                  	MOV     DX,0FFFFH
 20726 00004660 E8880E                  	call	RELBLKS
 20727 00004663 73BD                    	jnc	short UPDATE
 20728                                  SET_ACC_ERRWJJ:
 20729                                  	;JC	short SET_ACC_ERRWJ2
 20730                                  	;JMP	SHORT UPDATE
 20731 00004665 E9E9FC                  	jmp	SET_ACC_ERR_DS
 20732                                  
 20733                                  KILLFIL:
 20734 00004668 31DB                    	XOR     BX,BX
 20735 0000466A 06                      	PUSH    ES
 20736 0000466B C43E[3605]              	LES     DI,[THISSFT]
 20737 0000466F 26895D19                	mov	[es:di+19h],bx
 20738 00004673 26895D19                	MOV	[ES:DI+SF_ENTRY.sf_cluspos],BX
 20739                                  	;mov	[es:di+1Bh],bx
 20740 00004677 26895D1B                	MOV	[ES:DI+SF_ENTRY.sf_lstclus],BX
 20741                                  	;xchg	bx,[es:di+0Bh]
 20742 0000467B 26875D0B                	XCHG    BX,[ES:DI+SF_ENTRY.sf_firclus]
 20743 0000467F 07                      	POP	ES
 20744                                  
 20745 00004680 09DB                    	OR	BX,BX
 20746                                  	;JZ	short UPDATEJ
 20747 00004682 749E                    	jz	short UPDATE
 20748                                  ;; 10/23/86 FastOpen update
 20749 00004684 06                      	PUSH	ES              ; since first cluster # is 0
 20750 00004685 55                      	PUSH	BP              ; we must delete the old cache entry
 20751 00004686 50                      	PUSH	AX
 20752 00004687 51                      	PUSH	CX
 20753 00004688 52                      	PUSH	DX
 20754 00004689 C42E[2405]              	LES	BP,[THISDPB]             ; get current DPB
 20755 0000468D 268A5600                	mov	dl,[ES:BP] ; mov al,[es:bp+0]
 20756                                  	;MOV	DL,[ES:BP+DPB.DRIVE]	; get current drive
 20757 00004691 89D9                    	MOV	CX,BX                    ; first cluster #
 20758 00004693 B402                    	MOV	AH,2                     ; delete cache entry by drive:firclus
 20759 00004695 E877ED                  	call	FastOpen_Update          ; call fastopen
 20760 00004698 5A                      	POP	DX
 20761 00004699 59                      	POP	CX
 20762 0000469A 58                      	POP	AX
 20763 0000469B 5D                      	POP	BP
 20764 0000469C 07                      	POP	ES
 20765                                  ;; 10/23/86 FastOpen update
 20766                                  
 20767 0000469D E8490E                  	call	RELEASE
 20768 000046A0 72C3                    	JC	short SET_ACC_ERRWJJ
 20769                                  UpDateJ:
 20770 000046A2 E97DFF                  	JMP	UPDATE ; 10/08/2018
 20771                                  
 20772                                  ;Break   <DskWrtBufPurge -- Disk Write Buffer Purge>
 20773                                  ;----------------------------------------------------------------------------
 20774                                  ;
 20775                                  ; Procedure Name : DskWrtBufPurge
 20776                                  ;
 20777                                  ; Inputs:
 20778                                  ;       CX = # of contiguous sectors to write. (These constitute a block of
 20779                                  ;	     sectors, also termed an "Extent".)
 20780                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
 20781                                  ;       ES:BP -> Drive Parameter Block (DPB).
 20782                                  ;
 20783                                  ; Function:
 20784                                  ;       Purge the Buffer Queue and the Secondary Cache of any buffers which
 20785                                  ;	are in Extent; they are being over-written.
 20786                                  ;
 20787                                  ; Outputs:
 20788                                  ;       (Same as Input.)
 20789                                  ; Uses:
 20790                                  ;       All registers except DS,AX,SI,DI preserved.
 20791                                  ;       SS override for all global variables.
 20792                                  ;----------------------------------------------------------------------------
 20793                                  ;M039: Created
 20794                                  
 20795                                  ;procedure   DskWrtBufPurge,NEAR
 20796                                  ;
 20797                                  ;ASSUME  DS:NOTHING
 20798                                  ;
 20799                                  ;       SaveReg <bx,cx>
 20800                                  ;       mov	bx,[HIGH_SECTOR]	;BX:DX = Extent start (sector #).
 20801                                  ;       mov     si,bx
 20802                                  ;       add     cx,dx
 20803                                  ;       adc     si,0                    ;SI:CX = Extent end + 1.
 20804                                  ;
 20805                                  ;	Assert  ISDPB,<ES,BP>,"DskWrtBufPurge"
 20806                                  ;	mov     al,es:[bp.dpb_drive]
 20807                                  ;
 20808                                  ;;      BX:DX = Extent start.
 20809                                  ;;      SI:CX = Extent end + 1.
 20810                                  ;;      AL = Drive #
 20811                                  ;
 20812                                  ;	cmp     [SC_CACHE_COUNT],0      ;Secondary cache in-use?
 20813                                  ;	je      nosc                    ; -no, jump.
 20814                                  ;
 20815                                  ;;      If any of the sectors to be written are in the secondary cache (SC),
 20816                                  ;;      invalidate the entire SC. (This is an optimization; we really only
 20817                                  ;;	need to invalidate those sectors which intersect, but that's slower.)
 20818                                  ;
 20819                                  ;       cmp     al,[CURSC_DRIVE]        ;Same drive?
 20820                                  ;       jne     nosc                    ; -no, jump.
 20821                                  ;
 20822                                  ;       push    ax
 20823                                  ;       mov     ax,[CURSC_SECTOR]
 20824                                  ;       mov     di,[CURSC_SECTOR+2]     ;DI:AX = SC start.
 20825                                  ;       Cmp32   si,cx,di,ax             ;Extent end < SC start?
 20826                                  ;       jbe     sc5                     ; -yes, jump.
 20827                                  ;       add     ax,[SC_CACHE_COUNT]
 20828                                  ;       adc     di,0                    ;DI:AX = SC end + 1.
 20829                                  ;       Cmp32   bx,dx,di,ax             ;Extent start > SC end?
 20830                                  ;       jae     sc5                     ; -yes, jump.
 20831                                  ;       mov     [SC_STATUS],0           ;Extent intersects SC: invalidate SC.
 20832                                  ;sc5:	pop     ax
 20833                                  ;
 20834                                  ;;	Free any buffered sectors which are in Extent; they are being over-
 20835                                  ;;	written.
 20836                                  ;
 20837                                  ;nosc:	invoke  GETCURHEAD              ;DS:DI -> first buffer in queue.
 20838                                  ;
 20839                                  ;bufq:	cmp     al,BYTE PTR [di.buf_ID] ;Same drive?
 20840                                  ;	jne     bufq5                   ; -no, jump.
 20841                                  ;
 20842                                  ;       Cmp32   bx,dx,<WORD PTR [di.buf_sector+2]>,<WORD PTR [di.buf_sector]>
 20843                                  ;       ja	bufq5			;Jump if Extent start > buffer sector.
 20844                                  ;       Cmp32   si,cx,<WORD PTR [di.buf_sector+2]>,<WORD PTR [di.buf_sector]>
 20845                                  ;       jbe	bufq5                   ;Jump if Extent end < buffer sector.
 20846                                  ;
 20847                                  ;;      Buffer's sector is in Extent, so free it; it is being over-written.
 20848                                  ;
 20849                                  ;       testb   [di.buf_flags],buf_dirty ;Buffer dirty?
 20850                                  ;       jz      bufq2                    ; -no, jump.
 20851                                  ;       invoke  DEC_DIRTY_COUNT          ; -yes, decrement dirty count.
 20852                                  ;bufq2: mov     WORD PTR [di.buf_ID],((buf_visit SHL 8) OR 0FFh)
 20853                                  ;
 20854                                  ;       invoke  SCANPLACE
 20855                                  ;       jmp     short bufq6
 20856                                  ;
 20857                                  ;bufq5: mov     di,[di.buf_next]
 20858                                  ;bufq6: cmp     di,[FIRST_BUFF_ADDR]    ;Scanned entire buffer queue?
 20859                                  ;       jne     bufq	                ; --no, go do next buffer.
 20860                                  ;
 20861                                  ;       RestoreReg <cx,bx>
 20862                                  ;       return
 20863                                  ;
 20864                                  ;EndProc DskWrtBufPurge
 20865                                  
 20866                                  
 20867                                  ;Break   <DIV32 -- PERFORM 32 BIT DIVIDE>
 20868                                  ;----------------------------------------------------------------------------
 20869                                  ;
 20870                                  ; Procedure Name : DIV32
 20871                                  ;
 20872                                  ; Inputs:
 20873                                  ;       DX:AX = 32 bit dividend   BX= divisor
 20874                                  ; Function:
 20875                                  ;       Perform 32 bit division:  DX:AX/BX = CX:AX + DX (rem.)
 20876                                  ; Outputs:
 20877                                  ;       CX:AX = quotient , DX= remainder
 20878                                  ; Uses:
 20879                                  ;       All registers except AX,CX,DX preserved.
 20880                                  ;----------------------------------------------------------------------------
 20881                                  ;M039: DIV32 optimized for divisor of 512 (common sector size).
 20882                                  
 20883                                  ;DIV32:
 20884                                  ;
 20885                                  ;       cmp     bx,512
 20886                                  ;       jne    	short div5
 20887                                  ;
 20888                                  ;	mov     cx,dx
 20889                                  ;       mov     dx,ax           ; CX:AX = Dividend
 20890                                  ;       and     dx,(512-1)      ; DX = Remainder
 20891                                  ;       mov     al,ah
 20892                                  ;       mov     ah,cl
 20893                                  ;       mov     cl,ch
 20894                                  ;       xor     ch,ch
 20895                                  ;       shr     cx,1
 20896                                  ;       rcr     ax,1
 20897                                  ;       retn
 20898                                  ;
 20899                                  ;div5:	mov     cx,ax
 20900                                  ;       mov     ax,dx
 20901                                  ;       xor     dx,dx
 20902                                  ;       div     bx              ; 0:AX/BX
 20903                                  ;       xchg    cx,ax
 20904                                  ;       div     bx              ; DX:AX/BX
 20905                                  ;       retn
 20906                                  
 20907                                  ;Break   <SHR32 -- PERFORM 32 BIT SHIFT RIGHT>
 20908                                  ;----------------------------------------------------------------------------
 20909                                  ;
 20910                                  ; Procedure Name : SHR32
 20911                                  ;
 20912                                  ; Inputs:
 20913                                  ;	DX:AX = 32 bit sector number
 20914                                  ; Function:
 20915                                  ;       Perform 32 bit shift right
 20916                                  ; Outputs:
 20917                                  ;	AX = cluster number
 20918                                  ;	ZF = 1 if no error
 20919                                  ;	   = 0 if error (cluster number > 64k)
 20920                                  ; Uses:
 20921                                  ;       DX,CX
 20922                                  ;---------------------------------------------------------------------------
 20923                                  ; M017	- SHR32 rewritten for better performance
 20924                                  ; M039	- Additional optimization
 20925                                  
 20926                                  ;SHR32:
 20927                                  ;
 20928                                  ;	mov     cl,[ES:BP+DPB.CLUSTER_SHIFT]
 20929                                  ;	xor	ch,ch	    ;ZF=1
 20930                                  ;	jcxz	norota
 20931                                  ;
 20932                                  ;rotashft2:
 20933                                  ;	shr	dx,1	    ;ZF reflects state of DX.
 20934                                  ;	rcr	ax,1	    ;ZF not affected.
 20935                                  ;	loop	rotashft2
 20936                                  ;
 20937                                  ;norota:
 20938                                  ;	retn
 20939                                  
 20940                                  ;============================================================================
 20941                                  ; DIR.ASM, MSDOS 6.0, 1991
 20942                                  ;============================================================================
 20943                                  ; 27/07/2018 - Retro DOS v3.0 
 20944                                  
 20945                                  ;	TITLE	DIR - Directory and path cracking
 20946                                  ;	NAME	Dir
 20947                                  
 20948                                  ;Break	<FINDENTRY -- LOOK FOR AN ENTRY>
 20949                                  ;---------------------------------------------------------------------------
 20950                                  ;
 20951                                  ; Procedure Name : FINDENTRY,SEARCH
 20952                                  ;
 20953                                  ; Inputs:
 20954                                  ;	[THISDPB] set
 20955                                  ;	[SECCLUSPOS] = 0
 20956                                  ;	[DIRSEC] = Starting directory sector number
 20957                                  ;	[CLUSNUM] = Next cluster of directory
 20958                                  ;	[CLUSFAC] = Sectors/Cluster
 20959                                  ;	[NAME1] = Name to look for
 20960                                  ; Function:
 20961                                  ;	Find file name in disk directory.
 20962                                  ;	"?" matches any character.
 20963                                  ; Outputs:
 20964                                  ;	Carry set if name not found
 20965                                  ;	ELSE
 20966                                  ;	Zero set if attributes match (always except when creating)
 20967                                  ;	AH = Device ID (bit 7 set if not disk)
 20968                                  ;	[THISDPB] = Base of drive parameters
 20969                                  ;	DS = DOSGROUP
 20970                                  ;	ES = DOSGROUP
 20971                                  ;	[CURBUF+2]:BX = Pointer into directory buffer
 20972                                  ;	[CURBUF+2]:SI = Pointer to First Cluster field in directory entry
 20973                                  ;	[CURBUF] has directory record with match
 20974                                  ;	[NAME1] has file name
 20975                                  ;	[LASTENT] is entry number of the entry
 20976                                  ; All other registers destroyed.
 20977                                  ;----------------------------------------------------------------------------
 20978                                  
 20979                                  ;hkn; called from rename.asm and dir2.asm. DS must be already set up at
 20980                                  ;hkn; this point.
 20981                                  
 20982                                  SEARCH:
 20983                                  	; 27/07/2018 - Retro DOS v3.0
 20984                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 45B3h 
 20985                                  	; 15/03/2018 - Retro DOS v2.0
 20986                                  
 20987                                  	;entry	FindEntry
 20988                                  FINDENTRY:
 20989 000046A5 E81704                  	call	STARTSRCH
 20990 000046A8 A0[0605]                	MOV	AL,[ATTRIB]
 20991                                  	;and	al,9Eh
 20992 000046AB 24DE                    	AND	AL,~attr_ignore		; Ignore useless bits
 20993                                  	;cmp	al,8
 20994 000046AD 3C08                    	CMP	AL,attr_volume_id	; Looking for vol ID only ?
 20995 000046AF 7503                    	JNZ	short NOTVOLSRCH	; No
 20996 000046B1 E86201                  	CALL	SETROOTSRCH		; Yes force search of root
 20997                                  NOTVOLSRCH:
 20998 000046B4 E8F800                  	CALL	GETENTRY
 20999 000046B7 7303                    	JNC	short SRCH
 21000 000046B9 E99500                  	JMP	SETESRET
 21001                                  
 21002                                  	;entry	Srch
 21003                                  SRCH:
 21004 000046BC 1E                      	PUSH	DS
 21005 000046BD 8E1E[7605]              	MOV	DS,[CURBUF+2]
 21006                                  
 21007                                  ;	(DS:BX) = directory entry address
 21008                                  
 21009 000046C1 8A27                    	mov	ah,[BX]
 21010                                  	;MOV	AH,[BX+dir_entry.dir_name] ; mov ah,[bx+0]
 21011 000046C3 08E4                    	OR	AH,AH			; End of directory?
 21012 000046C5 743A                    	JZ	short FREE
 21013                                  
 21014                                  ;hkn; SS override
 21015 000046C7 363A26[1905]            	CMP	AH,[SS:DELALL]		; Free entry?
 21016 000046CC 7433                    	JZ	short FREE
 21017                                  	;test	byte [bx+0Bh],8
 21018 000046CE F6470B08                	TEST	byte [BX+dir_entry.dir_attr],attr_volume_id
 21019                                  					; Volume ID file?
 21020 000046D2 7405                    	JZ	short CHKFNAM 		; NO
 21021                                  
 21022                                  ;hkn; SS override
 21023 000046D4 36FE06[1605]            	INC	BYTE [SS:VOLID]
 21024                                  CHKFNAM:
 21025                                  ;	Context ES
 21026 000046D9 8CD6                    	MOV	SI,SS
 21027 000046DB 8EC6                    	MOV	ES,SI
 21028 000046DD 89DE                    	MOV	SI,BX
 21029                                  
 21030                                  ;hkn; NAME1 is in DOSDATA
 21031 000046DF BF[E604]                	MOV	DI,NAME1
 21032                                  ;;;;; 7/29/86
 21033                                  
 21034                                  ;hkn; SS override for NAME1
 21035 000046E2 36803E[E604]E5          	CMP	BYTE [SS:NAME1],0E5H	; special char check
 21036 000046E8 7506                    	JNZ	short NO_E5
 21037 000046EA 36C606[E604]05          	MOV	BYTE [SS:NAME1],05H
 21038                                  NO_E5:
 21039                                  ;;;;; 7/29/86
 21040 000046F0 E86100                  	CALL	MetaCompare
 21041 000046F3 7428                    	JZ	short FOUND
 21042 000046F5 1F                      	POP	DS
 21043                                  
 21044                                  	;entry	NEXTENT
 21045                                  NEXTENT:
 21046 000046F6 C42E[2405]              	LES	BP,[THISDPB]
 21047 000046FA E86600                  	CALL	NEXTENTRY
 21048 000046FD 73BD                    	JNC	short SRCH
 21049 000046FF EB50                    	JMP	SHORT SETESRET
 21050                                  
 21051                                  FREE:
 21052 00004701 1F                      	POP	DS
 21053 00004702 8B0E[F402]              	MOV	CX,[LASTENT]
 21054 00004706 3B0E[6A05]              	CMP	CX,[ENTFREE]
 21055 0000470A 7304                    	JAE	short TSTALL
 21056 0000470C 890E[6A05]              	MOV	[ENTFREE],CX
 21057                                  TSTALL:
 21058 00004710 3A26[1905]              	CMP	AH,[DELALL]		; At end of directory?
 21059                                  NEXTENTJ:
 21060 00004714 74E0                    	je	short NEXTENT 		; No - continue search
 21061 00004716 890E[6C05]              	MOV	[ENTLAST],CX
 21062 0000471A F9                      	STC
 21063 0000471B EB34                    	JMP	SHORT SETESRET
 21064                                  
 21065                                  FOUND:
 21066                                  ;
 21067                                  ; We have a file with a matching name.	We must now consider the attributes:
 21068                                  ; ATTRIB	Action
 21069                                  ; ------	------
 21070                                  ; Volume_ID	Is Volume_ID in test?
 21071                                  ; Otherwise	If no create then Is ATTRIB+extra superset of test?
 21072                                  ;		If create then Is ATTRIB equal to test?
 21073                                  ;
 21074 0000471D 8A2C                    	MOV	CH,[SI] 		; Attributes of file
 21075 0000471F 1F                      	POP	DS
 21076 00004720 8A26[0605]              	MOV	AH,[ATTRIB]		; Attributes of search
 21077                                  	;and	ah,9Eh
 21078 00004724 80E4DE                  	AND	AH,~attr_ignore
 21079                                  	;lea	si,[si+15]
 21080 00004727 8D740F                  	LEA	SI,[SI+dir_entry.dir_first-dir_entry.dir_attr]
 21081                                  					; point to first cluster field
 21082                                  	;test	ch,8
 21083 0000472A F6C508                  	TEST	CH,attr_volume_id	; Volume ID file?
 21084 0000472D 7409                    	JZ	short check_one_volume_id ; Nope check other attributes
 21085                                  	;test	ah,8
 21086 0000472F F6C408                  	TEST	AH,attr_volume_id	; Can we find Volume ID?
 21087                                  	;JZ	short NEXTENTJ		; Nope, (not even $FCB_CREATE)
 21088 00004732 74C2                    	jz	short NEXTENT ; 19/05/2019
 21089 00004734 30E4                    	XOR	AH,AH			; Set zero flag for $FCB_CREATE
 21090 00004736 EB11                    	JMP	SHORT RETFF		; Found Volume ID
 21091                                  check_one_volume_id:
 21092                                  	;CMP	ah,8
 21093 00004738 80FC08                  	CMP	AH,attr_volume_id	; Looking only for Volume ID?
 21094                                  	;JZ	short NEXTENTJ		; Yes, continue search
 21095 0000473B 74B9                    	je	short NEXTENT ; 19/05/2019
 21096 0000473D E89303                  	CALL	MatchAttributes
 21097 00004740 7407                    	JZ	SHORT RETFF
 21098 00004742 F606[1805]FF            	TEST	BYTE [CREATING],-1	; Pass back mismatch if creating
 21099                                  	;JZ	short NEXTENTJ		; Otherwise continue searching
 21100 00004747 74AD                    	jz	short NEXTENT ; 19/05/2019
 21101                                  RETFF:
 21102 00004749 C42E[2405]              	LES	BP,[THISDPB]
 21103 0000474D 268A6600                	MOV	AH,[ES:BP]
 21104                                  	;MOV	AH,[ES:BP+DPB.DRIVE]  ; mov ah,[es:bp+0]
 21105                                  SETESRET:
 21106 00004751 16                      	PUSH	SS
 21107 00004752 07                      	POP	ES
 21108 00004753 C3                      	retn
 21109                                  
 21110                                  ;----------------------------------------------------------------------------
 21111                                  ;
 21112                                  ; Procedure Name : MetaCompare
 21113                                  ;
 21114                                  ; Inputs:
 21115                                  ;	DS:SI -> 11 character FCB style name NO '?'
 21116                                  ;	    Typically this is a directory entry.  It MUST be in upper case
 21117                                  ;	ES:DI -> 11 character FCB style name with possible '?'
 21118                                  ;	    Typically this is a FCB or SFT.  It MUST be in upper case
 21119                                  ; Function:
 21120                                  ;	Compare FCB style names allowing for ? match to any char
 21121                                  ; Outputs:
 21122                                  ;	Zero if match else NZ
 21123                                  ; Destroys CX,SI,DI all others preserved
 21124                                  ;----------------------------------------------------------------------------
 21125                                  
 21126                                  MetaCompare:
 21127 00004754 B90B00                  	MOV	CX,11
 21128                                  WILDCRD:
 21129 00004757 F3A6                    	REPE	CMPSB
 21130 00004759 7407                    	JZ	short MetaRet 		; most of the time we will fail.
 21131                                  CHECK_META:
 21132 0000475B 26807DFF3F              	CMP	BYTE [ES:DI-1],"?"
 21133 00004760 74F5                    	JZ	short WILDCRD
 21134                                  MetaRet:
 21135 00004762 C3                       	retn				; Zero set, Match
 21136                                  
 21137                                  ;Break	<NEXTENTRY -- STEP THROUGH DIRECTORY>
 21138                                  ;----------------------------------------------------------------------------
 21139                                  ;
 21140                                  ; Procedure Name : NEXTENTRY
 21141                                  ;
 21142                                  ; Inputs:
 21143                                  ;	Same as outputs of GETENTRY, above
 21144                                  ; Function:
 21145                                  ;	Update BX, and [LASTENT] for next directory entry.
 21146                                  ;	Carry set if no more.
 21147                                  ;----------------------------------------------------------------------------
 21148                                  
 21149                                  NEXTENTRY:
 21150                                  	; 27/07/2018 - Retro DOS v3.0
 21151                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 4671h 
 21152                                  	; 15/03/2018 - Retro DOS v2.0
 21153                                  
 21154 00004763 A1[F402]                	MOV	AX,[LASTENT]
 21155 00004766 3B06[6C05]              	CMP	AX,[ENTLAST]
 21156 0000476A 7424                    	JZ	short NONE
 21157 0000476C 40                      	INC	AX
 21158                                  	;ADD	BX,32
 21159 0000476D 8D5F20                  	LEA	BX,[BX+32]
 21160 00004770 39D3                    	CMP	BX,DX
 21161 00004772 721E                    	JB	short HAVIT
 21162 00004774 8A1E[0E05]              	MOV	BL,[SECCLUSPOS]
 21163 00004778 FEC3                    	INC	BL
 21164 0000477A 3A1E[1205]              	CMP	BL,[CLUSFAC]
 21165 0000477E 7217                    	JB	short SAMECLUS
 21166 00004780 8B1E[6E05]              	MOV	BX,[NXTCLUSNUM]
 21167 00004784 E8AF12                  	call	IsEOF
 21168 00004787 7307                    	JAE	short NONE
 21169 00004789 83FB02                  	CMP	BX,2
 21170 0000478C 7202                    	JB	short NONE
 21171 0000478E EB22                    	JMP	short GETENT
 21172                                  NONE:
 21173 00004790 F9                      	STC
 21174 00004791 C3                      	retn
 21175                                  HAVIT:
 21176 00004792 A3[F402]                	MOV	[LASTENT],AX
 21177 00004795 F8                      	CLC
 21178                                  nextentry_retn:
 21179 00004796 C3                      	retn
 21180                                  SAMECLUS:
 21181 00004797 881E[0E05]              	MOV	[SECCLUSPOS],BL
 21182 0000479B A3[F402]                	MOV	[LASTENT],AX
 21183 0000479E 1E                      	PUSH	DS
 21184 0000479F C53E[7405]              	LDS	DI,[CURBUF]
 21185                                  	;MOV	DX,[DI+BUFFINFO.buf_sector+2]	;AN000; >32mb
 21186                                  ;hkn; SS override
 21187                                  	;MOV	[HIGH_SECTOR],DX		;AN000; >32mb
 21188                                  	;mov	dx,[di+6]
 21189 000047A3 8B5506                  	MOV	DX,[DI+BUFFINFO.buf_sector]	;AN000; >32mb
 21190                                  	;ADD	DX,1				;AN000; >32mb
 21191                                  	;ADC	word [HIGH_SECTOR],0 		;AN000; >32mb
 21192 000047A6 42                      	inc	dx
 21193 000047A7 1F                      	POP	DS
 21194 000047A8 E881F9                  	call	FIRSTCLUSTER
 21195 000047AB 31DB                    	XOR	BX,BX
 21196 000047AD EB23                    	JMP	short SETENTRY
 21197                                  
 21198                                  ;----------------------------------------------------------------------------
 21199                                  ;
 21200                                  ; Procedure Name : GETENTRY
 21201                                  ;
 21202                                  ; Inputs:
 21203                                  ;	[LASTENT] has directory entry
 21204                                  ;	ES:BP points to drive parameters
 21205                                  ;	[DIRSEC],[CLUSNUM],[CLUSFAC],[ENTLAST] set for DIR involved
 21206                                  ; Function:
 21207                                  ;	Locates directory entry in preparation for search
 21208                                  ;	GETENT provides entry for passing desired entry in AX
 21209                                  ; Outputs:
 21210                                  ;	[CURBUF+2]:BX = Pointer to next directory entry in CURBUF
 21211                                  ;	[CURBUF+2]:DX = Pointer to first byte after end of CURBUF
 21212                                  ;	[LASTENT] = New directory entry number
 21213                                  ;	[NXTCLUSNUM],[SECCLUSPOS] set via DIRREAD
 21214                                  ;	Carry set if error (currently user FAILed to I 24)
 21215                                  ;----------------------------------------------------------------------------
 21216                                  
 21217                                  GETENTRY:
 21218                                  	; 27/07/2018 - Retro DOS v3.0
 21219 000047AF A1[F402]                	MOV	AX,[LASTENT]
 21220                                  
 21221                                  	;entry	GETENT
 21222                                  GETENT:
 21223 000047B2 A3[F402]                	MOV	[LASTENT],AX
 21224                                  ;
 21225                                  ; Convert the entry number in AX into a byte offset from the beginning of the
 21226                                  ; directory.
 21227                                  ;
 21228 000047B5 B105                    	mov	cl,5			; shift left by 5 = mult by 32
 21229 000047B7 D3C0                    	rol	ax,cl			; keep hight order bits
 21230 000047B9 89C2                    	mov	dx,ax
 21231                                  	;and	ax,0FFE0h
 21232                                  	;;and	ax,~(32-1)		; mask off high order bits
 21233 000047BB 24E0                    	and	al,0E0h ; ~31 ; 19/05/2019
 21234 000047BD 83E21F                  	and	dx,1Fh
 21235                                  	;and	dx,32-1			; mask off low order bits
 21236                                  ;
 21237                                  ; DX:AX contain the byte offset of the required directory entry from the
 21238                                  ; beginning of the directory. Convert this to a sector number. Round the
 21239                                  ; sector size down to a multiple of 32.
 21240                                  ;
 21241                                  	;mov	bx,[es:bp+2]
 21242 000047C0 268B5E02                	MOV	BX,[ES:BP+DPB.SECTOR_SIZE]
 21243 000047C4 80E3E0                  	and	bl,0E0h
 21244                                  	;AND	BL,255-31		; Must be multiple of 32
 21245 000047C7 F7F3                    	DIV	BX
 21246 000047C9 89D3                    	MOV	BX,DX			; Position within sector
 21247 000047CB 53                      	PUSH	BX
 21248 000047CC E811F9                  	call	DIRREAD
 21249 000047CF 5B                      	POP	BX
 21250                                  	;retc
 21251 000047D0 72C4                    	jc	short nextentry_retn	
 21252                                  SETENTRY:
 21253 000047D2 8B16[7405]              	MOV	DX,[CURBUF]
 21254                                  	;add	dx,16
 21255 000047D6 83C210                  	ADD	DX,BUFINSIZ
 21256 000047D9 01D3                    	ADD	BX,DX
 21257                                  	;add	dx,[es:bp+2]
 21258 000047DB 26035602                	ADD	DX,[ES:BP+DPB.SECTOR_SIZE]  ; Always clears carry
 21259 000047DF C3                      	retn
 21260                                  
 21261                                  ;Break	<SETDIRSRCH SETROOTSRCH -- Set Search environments>
 21262                                  ;----------------------------------------------------------------------------
 21263                                  ;
 21264                                  ; Procedure Name : SETDIRSRCH,SETROOTSRCH
 21265                                  ;
 21266                                  ; Inputs:
 21267                                  ;	BX cluster number of start of directory
 21268                                  ;	ES:BP Points to DPB
 21269                                  ;	DI next cluster number from fastopen extended info. DOS 3.3 only
 21270                                  ; Function:
 21271                                  ;	Set up a directory search
 21272                                  ; Outputs:
 21273                                  ;	[DIRSTART] = BX
 21274                                  ;	[CLUSFAC],[CLUSNUM],[SECCLUSPOS],[DIRSEC] set
 21275                                  ;	Carry set if error (currently user FAILed to I 24)
 21276                                  ; destroys AX,DX,BX
 21277                                  ;----------------------------------------------------------------------------
 21278                                  
 21279                                  SETDIRSRCH:
 21280 000047E0 09DB                    	OR	BX,BX
 21281 000047E2 7432                    	JZ	short SETROOTSRCH
 21282 000047E4 891E[5805]              	MOV	[DIRSTART],BX
 21283                                  	;mov	al,[es:bp+4]
 21284 000047E8 268A4604                	MOV	AL,[ES:BP+DPB.CLUSTER_MASK]
 21285 000047EC FEC0                    	INC	AL
 21286 000047EE A2[1205]                	MOV	[CLUSFAC],AL
 21287                                  
 21288                                  ; DOS 3.3 for FastOPen	F.C. 6/12/86
 21289                                  	;SAVE	<SI>
 21290 000047F1 56                      	push	si
 21291                                  	;test	byte [FastOpenFlg],2
 21292 000047F2 F606[6E0F]02            	TEST	byte [FastOpenFlg],Lookup_Success
 21293 000047F7 7507                    	JNZ	short UNP_OK
 21294                                  
 21295                                  ; DOS 3.3 for FastOPen	F.C. 6/12/86
 21296                                  	;invoke	UNPACK
 21297 000047F9 E85112                  	call	UNPACK
 21298 000047FC 7302                    	JNC	short UNP_OK
 21299                                  	;RESTORE <SI>
 21300 000047FE 5E                      	pop	si
 21301                                  	;return
 21302 000047FF C3                      	retn
 21303                                  
 21304                                  UNP_OK:
 21305 00004800 893E[5405]              	MOV	[CLUSNUM],DI
 21306 00004804 89DA                    	MOV	DX,BX
 21307 00004806 30DB                    	XOR	BL,BL
 21308 00004808 881E[0E05]              	MOV	[SECCLUSPOS],BL
 21309                                  	;invoke	FIGREC
 21310 0000480C E8220C                  	call	FIGREC
 21311                                  	;RESTORE <SI>
 21312 0000480F 5E                      	pop	si
 21313                                  	
 21314                                  	; MSDOS 6.0
 21315                                  	;PUSH	DX			   ;AN000; >32mb
 21316                                  	;MOV	DX,[HIGH_SECTOR]	   ;AN000; >32mb
 21317                                  	;MOV	[DIRSEC+2],DX		   ;AN000; >32mb
 21318                                  	;POP	DX			   ;AN000; >32mb
 21319                                  	
 21320 00004810 8916[5605]              	MOV	[DIRSEC],DX
 21321 00004814 F8                      	CLC
 21322 00004815 C3                      	retn
 21323                                  
 21324                                  	;entry	SETROOTSRCH
 21325                                  SETROOTSRCH:
 21326 00004816 31C0                    	XOR	AX,AX
 21327 00004818 A3[5805]                	MOV	[DIRSTART],AX
 21328 0000481B A2[0E05]                	MOV	[SECCLUSPOS],AL
 21329 0000481E 48                      	DEC	AX
 21330 0000481F A3[5405]                	MOV	[CLUSNUM],AX
 21331                                  	;mov	ax,[es:bp+0Bh]
 21332 00004822 268B460B                	MOV	AX,[ES:BP+DPB.FIRST_SECTOR]
 21333                                  	;mov	dx,[es:bp+10h]
 21334 00004826 268B5610                	MOV	DX,[ES:BP+DPB.DIR_SECTOR]
 21335 0000482A 29D0                    	SUB	AX,DX
 21336 0000482C A2[1205]                	MOV	[CLUSFAC],AL
 21337 0000482F 8916[5605]              	MOV	[DIRSEC],DX		      ;F.C. >32mb
 21338                                  	; MSDOS 6.0
 21339                                  	;MOV	WORD [DIRSEC+2],0	      ;F.C. >32mb
 21340 00004833 F8                      	CLC
 21341 00004834 C3                      	retn
 21342                                  
 21343                                  ;============================================================================
 21344                                  ; DIR2.ASM, MSDOS 6.0, 1991
 21345                                  ;============================================================================
 21346                                  ; 27/07/2018 - Retro DOS v3.0 
 21347                                  
 21348                                  ;	TITLE	DIR2 - Directory and path cracking
 21349                                  ;	NAME	Dir2
 21350                                  
 21351                                  ;Break	<GETPATH -- PARSE A WFP>
 21352                                  ;----------------------------------------------------------------------------
 21353                                  ;
 21354                                  ; Procedure Name : GETPATH
 21355                                  ;
 21356                                  ; Inputs:
 21357                                  ;	[WFP_START] Points to WFP string ("d:\" must be first 3 chars, NUL
 21358                                  ;		terminated; d:/ (note forward slash) indicates a real device).
 21359                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 21360                                  ;		( = -1 if current dir not involved, else
 21361                                  ;		 Points to first char after last "/" of current dir part)
 21362                                  ;	[THISCDS] Points to CDS being used
 21363                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 21364                                  ;	[NoSetDir] set
 21365                                  ;	[THISDPB] set to DPB if disk otherwise garbage.
 21366                                  ; Function:
 21367                                  ;	Crack the path
 21368                                  ; Outputs:
 21369                                  ;	Sets EXTERR_LOCUS = errLOC_Disk if disk file
 21370                                  ;	Sets EXTERR_LOCUS = errLOC_Unk if char device
 21371                                  ;	ID1 field of [THISCDS] updated appropriately
 21372                                  ;	[ATTRIB] = [SATTRIB]
 21373                                  ;	ES:BP Points to DPB
 21374                                  ;	Carry set if bad path
 21375                                  ;	   SI Points to path element causing failure
 21376                                  ;	   Zero set
 21377                                  ;	      [DIRSTART],[DIRSEC],[CLUSNUM], and [CLUSFAC] are set up to
 21378                                  ;	      start a search on the last directory
 21379                                  ;	      CL is zero if there is a bad name in the path
 21380                                  ;	      CL is non-zero if the name was simply not found
 21381                                  ;		 [ENTFREE] may have free spot in directory
 21382                                  ;		 [NAME1] is the name.
 21383                                  ;		 CL = 81H if '*'s or '?' in NAME1, 80H otherwise
 21384                                  ;	   Zero reset
 21385                                  ;	      File in middle of path or bad name in path or attribute mismatch
 21386                                  ;		or path too long or malformed path
 21387                                  ;	ELSE
 21388                                  ;	   [CurBuf] = -1 if root directory
 21389                                  ;	   [CURBUF] contains directory record with match
 21390                                  ;	   [CURBUF+2]:BX Points into [CURBUF] to start of entry
 21391                                  ;	   [CURBUF+2]:SI Points into [CURBUF] to dir_first field for entry
 21392                                  ;	   AH = device ID
 21393                                  ;	      bit 7 of AH set if device SI and BX
 21394                                  ;	      will point DOSGROUP relative The firclus
 21395                                  ;	      field of the device entry contains the device pointer
 21396                                  ;	   [NAME1] Has name looked for
 21397                                  ;	   If last element is a directory zero is set and:
 21398                                  ;	      [DIRSTART],[SECCLUSPOS],[DIRSEC],[CLUSNUM], and [CLUSFAC]
 21399                                  ;	      are set up to start a search on it.
 21400                                  ;	      unless [NoSetDir] is non zero in which case the return is
 21401                                  ;	      like that for a file (except for zero flag)
 21402                                  ;	   If last element is a file zero is reset
 21403                                  ;	      [DIRSEC],[CLUSNUM],[CLUSFAC],[NXTCLUSNUM],[SECCLUSPOS],
 21404                                  ;	      [LASTENT], [ENTLAST] are set to continue search of last
 21405                                  ;	      directory for furthur matches on NAME1 via the NEXTENT
 21406                                  ;	      entry point in FindEntry (or GETENT entry in GETENTRY in
 21407                                  ;	      which case [NXTCLUSNUM] and [SECCLUSPOS] need not be valid)
 21408                                  ; DS preserved, Others destroyed
 21409                                  ;---------------------------------------------------------------------------
 21410                                  
 21411                                  ;hkn; called from delete.asm, finfo.asm, mknode.asm and rename.asm.
 21412                                  ;hkn; DS already set up at this point.
 21413                                  
 21414                                  GETPATH:
 21415                                  	;mov	word [CREATING],0E500h
 21416 00004835 C706[1805]00E5          	MOV	WORD [CREATING],DIRFREE*256+0 ; Not Creating, not DEL *.*
 21417                                  
 21418                                  ; Same as GetPath only CREATING and DELALL already set
 21419                                  
 21420                                  	;entry	GetPathNoSet
 21421                                  GetPathNoSet:
 21422                                  	;mov	byte [EXTERR_LOCUS],2	
 21423 0000483B C606[D102]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 21424 00004840 C706[7405]FFFF          	MOV	word [CURBUF],-1	; initial setting
 21425                                  
 21426                                  ; See if the input indicates a device that has already been detected. If so,
 21427                                  ; go build the guy quickly. Otherwise, let findpath find the device.
 21428                                  
 21429 00004846 8B3E[4A05]              	MOV	DI,[WFP_START]		; point to the beginning of the name
 21430                                  	;cmp	word [DI+1],5C3Ah
 21431                                  	;CMP	WORD [DI+1],'\' << 8 + ':'
 21432 0000484A 817D013A5C              	cmp	word [DI+1],':\'
 21433 0000484F 7438                    	JZ	short CrackIt
 21434                                  
 21435                                  ; Let ChkDev find it in the device list
 21436                                  
 21437 00004851 83C703                  	ADD	DI,3
 21438                                  	; 18/08/2018
 21439                                  	;MOV	SI,DI			; let CHKDEV see the original name
 21440 00004854 E8B000                  	CALL	CHKDEV
 21441 00004857 722E                    	JC	short InternalError
 21442                                  Build_devJ:
 21443                                  
 21444 00004859 A0[0805]                	MOV	AL,[SATTRIB]
 21445 0000485C A2[0605]                	MOV	[ATTRIB],AL
 21446                                  	;mov	byte [EXTERR_LOCUS],1
 21447 0000485F C606[D102]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk ; In the particular case of
 21448                                  					; "finding" a char device
 21449                                  					; set LOCUS to Unknown. This makes
 21450                                  					; certain idiotic problems reported
 21451                                  					; by a certain 3 letter OEM go away.
 21452                                  
 21453                                  ; Take name in name1 and pack it back into where wfp_start points. This
 21454                                  ; guarantees wfp_start pointing to a canonical representation of a device.
 21455                                  ; We are allowed to do this as GetPath is *ALWAYS* called before entering a
 21456                                  ; wfp into the share set.
 21457                                  ;
 21458                                  ; We copy chars from name1 to wfp_start remembering the position of the last
 21459                                  ; non-space seen +1.  This position is kept in DX.
 21460                                  
 21461                                  ;hkn; SS is DOSDATA
 21462 00004864 16                      	push	ss
 21463 00004865 07                      	pop	es
 21464                                  
 21465                                  ;hkn; NAME1 is in DOSDATA
 21466 00004866 BE[E604]                	mov	si,NAME1
 21467 00004869 8B3E[4A05]              	mov	di,[WFP_START]
 21468 0000486D 89FA                    	mov	dx,di
 21469 0000486F B90800                  	mov	cx,8			; 8 chars in device name
 21470                                  MoveLoop:
 21471 00004872 AC                      	lodsb
 21472 00004873 AA                      	stosb
 21473 00004874 3C20                    	cmp	al," "
 21474 00004876 7402                    	jz	short NoSave
 21475                                  
 21476 00004878 89FA                    	mov	dx,di
 21477                                  NoSave:
 21478 0000487A E2F6                    	loop	MoveLoop
 21479                                  ;
 21480                                  ; DX is the position of the last seen non-space + 1. We terminate the name
 21481                                  ; at this point.
 21482                                  ;
 21483 0000487C 89D7                    	mov	di,dx
 21484 0000487E C60500                  	mov	byte [di],0		; end of string
 21485 00004881 E8BC02                  	call	Build_device_ent	; Clears carry sets zero
 21486 00004884 FEC0                    	INC	AL			; reset zero
 21487 00004886 C3                      	retn
 21488                                  
 21489                                  InternalError:
 21490                                  InternalError_loop:
 21491 00004887 EBFE                    	JMP	short InternalError_loop	; freeze
 21492                                  
 21493                                  ; Start off at the correct spot. Optimize if the current dir part is valid.
 21494                                  
 21495                                  CrackIt:
 21496 00004889 8B36[4E05]              	MOV	SI,[CURR_DIR_END]	; get current directory pointer
 21497 0000488D 83FEFF                  	CMP	SI,-1			; valid?
 21498 00004890 7503                    	JNZ	short LOOK_SING		; Yes, use it.
 21499 00004892 8D7503                  	LEA	SI,[DI+3]		; skip D:\.
 21500                                  LOOK_SING:
 21501                                  	;mov	byte [ATTRIB],16h
 21502 00004895 C606[0605]16            	MOV	byte [ATTRIB],attr_directory+attr_system+attr_hidden
 21503                                  					; Attributes to search through Dirs
 21504 0000489A C43E[3A05]              	LES	DI,[THISCDS]
 21505 0000489E B8FFFF                  	MOV	AX,-1
 21506                                  	;mov	bx,[es:di+73]
 21507 000048A1 268B5D49                	MOV	BX,[ES:DI+curdir.ID]
 21508 000048A5 8B36[4E05]              	MOV	SI,[CURR_DIR_END]
 21509                                  
 21510                                  ; AX = -1
 21511                                  ; BX = cluster number of current directory.  THis number is -1 if the media
 21512                                  ;      has been uncertainly changed.
 21513                                  ; SI = offset in DOSGroup into path to end of current directory text.  This
 21514                                  ;      may be -1 if no current directory part has been used.
 21515                                  
 21516 000048A9 39C6                    	CMP	SI,AX			; if Current directory is not part
 21517 000048AB 7440                    	JZ	short NO_CURR_D		; then we must crack from root
 21518 000048AD 39C3                    	CMP	BX,AX			; is the current directory cluster valid
 21519                                  
 21520                                  ; DOS 3.3  6/25/86
 21521 000048AF 743C                    	JZ	short NO_CURR_D		; no, crack form the root
 21522                                  	;test	byte [FastOpenFlg],1
 21523 000048B1 F606[6E0F]01            	TEST	byte [FastOpenFlg],FastOpen_Set ; for fastopen ?
 21524 000048B6 7442                    	JZ	short GOT_SEARCH_CLUSTER	; no
 21525 000048B8 06                      	PUSH	ES			; save registers
 21526 000048B9 57                      	PUSH	DI
 21527 000048BA 51                      	PUSH	CX
 21528 000048BB FF74FF                  	PUSH	word [SI-1]		; save \ and 1st char of next element
 21529 000048BE 56                      	PUSH	SI
 21530 000048BF 53                      	PUSH	BX
 21531                                  
 21532 000048C0 C644FF00                	MOV	BYTE [SI-1],0		; call fastopen to look up cur dir info
 21533 000048C4 8B36[4A05]              	MOV	SI,[WFP_START]
 21534                                  
 21535                                  ;hkn; FastOpenTable, Dir_Info_Buff & FastOpen_Ext_Info are in DOSDATA
 21536 000048C8 BB[430F]                	MOV	BX,FastOpenTable
 21537 000048CB BF[4E0F]                	MOV	DI,Dir_Info_Buff
 21538 000048CE B9[490F]                	MOV	CX,FastOpen_Ext_Info
 21539                                  	;mov	al,1
 21540 000048D1 B001                    	MOV	AL,FONC_Look_up
 21541 000048D3 1E                      	PUSH	DS
 21542 000048D4 07                      	POP	ES
 21543                                  	;call	far [BX+2]
 21544 000048D5 FF5F02                  	CALL	far [BX+fastopen_entry.name_caching]
 21545 000048D8 7208                    	JC	short GO_Chk_end1 	;fastopen not installed, or wrong drive.
 21546                                  					; Go to Got_Srch_cluster
 21547 000048DA 803C00                  	CMP	BYTE [SI],0		;fastopen has current dir info?
 21548 000048DD 7404                    	JE	short GO_Chk_end	;yes. Go to got_search_cluster
 21549 000048DF F9                      	stc
 21550 000048E0 EB01                    	jmp	short GO_Chk_end	;Go to No_Curr_D
 21551                                  GO_Chk_end1:
 21552 000048E2 F8                      	clc
 21553                                  GO_Chk_end:				; restore registers
 21554 000048E3 5B                      	POP	BX
 21555 000048E4 5E                      	POP	SI
 21556 000048E5 8F44FF                  	POP	word [SI-1]
 21557 000048E8 59                      	POP	CX
 21558 000048E9 5F                      	POP	DI
 21559 000048EA 07                      	POP	ES
 21560 000048EB 730D                    	JNC	short GOT_SEARCH_CLUSTER ; crack based on cur dir
 21561                                  
 21562                                  ; DOS 3.3  6/25/86
 21563                                  ;
 21564                                  ; We must cract the path beginning at the root. Advance pointer to beginning
 21565                                  ; of path and go crack from root.
 21566                                  
 21567                                  NO_CURR_D:
 21568 000048ED 8B36[4A05]              	MOV	SI,[WFP_START]
 21569 000048F1 8D7403                  	LEA	SI,[SI+3]		; Skip "d:/"
 21570 000048F4 C42E[2405]              	LES	BP,[THISDPB]		; Get ES:BP
 21571 000048F8 EB3D                    	JMP	short ROOTPATH
 21572                                  
 21573                                  ; We are able to crack from the current directory part. Go set up for search
 21574                                  ; of specified cluster.
 21575                                  
 21576                                  GOT_SEARCH_CLUSTER:
 21577 000048FA C42E[2405]              	LES	BP,[THISDPB]		; Get ES:BP
 21578 000048FE E8DFFE                  	call	SETDIRSRCH
 21579                                  	;JC	short SETFERR
 21580                                  	;JMP	short FINDPATH
 21581 00004901 7345                    	jnc	short FINDPATH ; 17/08/2018
 21582                                  SETFERR:
 21583 00004903 30C9                    	XOR	CL,CL			; set zero
 21584 00004905 F9                      	STC
 21585 00004906 C3                      	retn
 21586                                  
 21587                                  ;---------------------------------------------------------------------------
 21588                                  ;
 21589                                  ; Procedure Name : ChkDev
 21590                                  ;
 21591                                  ; Check to see if the name at DS:DI is a device. Returns carry set if not a
 21592                                  ;   device.
 21593                                  ; Blasts CX,SI,DI,AX,BX
 21594                                  ;---------------------------------------------------------------------------
 21595                                  
 21596                                  CHKDEV:
 21597 00004907 89FE                    	MOV	SI,DI
 21598 00004909 8CD7                    	MOV	DI,SS
 21599 0000490B 8EC7                    	MOV	ES,DI
 21600                                  
 21601 0000490D BF[E604]                	MOV	DI,NAME1
 21602 00004910 B90900                  	MOV	CX,9
 21603                                  TESTLOOP:
 21604 00004913 E8F50C                  	call	GETLET
 21605                                  
 21606 00004916 3C2E                    	CMP	AL,'.'
 21607 00004918 740E                    	JZ	short TESTDEVICE
 21608 0000491A E82B0D                  	call	PATHCHRCMP
 21609 0000491D 7407                    	JZ	short NOTDEV
 21610 0000491F 08C0                    	OR	AL,AL
 21611 00004921 7405                    	JZ	short TESTDEVICE
 21612                                  
 21613 00004923 AA                      	STOSB
 21614 00004924 E2ED                    	LOOP	TESTLOOP
 21615                                  NOTDEV:
 21616 00004926 F9                      	STC
 21617 00004927 C3                      	retn
 21618                                  
 21619                                  TESTDEVICE:
 21620 00004928 83C102                  	ADD	CX,2
 21621 0000492B B020                    	MOV	AL,' '
 21622 0000492D F3AA                    	REP	STOSB
 21623 0000492F 8CD0                    	MOV	AX,SS
 21624 00004931 8ED8                    	MOV	DS,AX
 21625 00004933 E8AA01                  	call	DEVNAME
 21626 00004936 C3                      	retn
 21627                                  
 21628                                  ;Break	<ROOTPATH, FINDPATH -- PARSE A PATH>
 21629                                  ;----------------------------------------------------------------------------
 21630                                  ;
 21631                                  ; Procedure Name : ROOTPATH,FINDPATH
 21632                                  ;
 21633                                  ; Inputs:
 21634                                  ;	Same as FINDPATH but,
 21635                                  ;	SI Points to asciz string of path which is assumed to start at
 21636                                  ;		the root (no leading '/').
 21637                                  ; Function:
 21638                                  ;	Search from root for path
 21639                                  ; Outputs:
 21640                                  ;	Same as FINDPATH but:
 21641                                  ;	If root directory specified, [CURBUF] and [NAME1] are NOT set, and
 21642                                  ;	[NoSetDir] is ignored.
 21643                                  ;----------------------------------------------------------------------------
 21644                                  
 21645                                  ROOTPATH:
 21646 00004937 E8DCFE                  	call	SETROOTSRCH
 21647 0000493A 803C00                  	CMP	BYTE [SI],0
 21648 0000493D 7509                    	JNZ	short FINDPATH
 21649                                  
 21650                                  ; Root dir specified
 21651 0000493F A0[0805]                	MOV	AL,[SATTRIB]
 21652 00004942 A2[0605]                	MOV	[ATTRIB],AL
 21653 00004945 30E4                    	XOR	AH,AH			; Sets "device ID" byte, sets zero
 21654                                  					; (dir), clears carry.
 21655 00004947 C3                      	retn
 21656                                  
 21657                                  ; Inputs:
 21658                                  ;	[ATTRIB] Set to get through directories
 21659                                  ;	[SATTRIB] Set to find last element
 21660                                  ;	ES:BP Points to DPB
 21661                                  ;	SI Points to asciz string of path (no leading '/').
 21662                                  ;	[SECCLUSPOS] = 0
 21663                                  ;	[DIRSEC] = Phys sec # of first sector of directory
 21664                                  ;	[CLUSNUM] = Cluster # of next cluster
 21665                                  ;	[CLUSFAC] = Sectors per cluster
 21666                                  ;	[NoSetDir] set
 21667                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 21668                                  ;		( = -1 if current dir not involved, else
 21669                                  ;		 Points to first char after last "/" of current dir part)
 21670                                  ;	[THISCDS] Points to CDS being used
 21671                                  ;	[CREATING] and [DELALL] set
 21672                                  ; Function:
 21673                                  ;	Parse path name
 21674                                  ; Outputs:
 21675                                  ;	ID1 field of [THISCDS] updated appropriately
 21676                                  ;	[ATTRIB] = [SATTRIB]
 21677                                  ;	ES:BP Points to DPB
 21678                                  ;	[THISDPB] = ES:BP
 21679                                  ;	Carry set if bad path
 21680                                  ;	   SI Points to path element causing failure
 21681                                  ;	   Zero set
 21682                                  ;	      [DIRSTART],[DIRSEC],[CLUSNUM], and [CLUSFAC] are set up to
 21683                                  ;	      start a search on the last directory
 21684                                  ;	      CL is zero if there is a bad name in the path
 21685                                  ;	      CL is non-zero if the name was simply not found
 21686                                  ;		 [ENTFREE] may have free spot in directory
 21687                                  ;		 [NAME1] is the name.
 21688                                  ;		 CL = 81H if '*'s or '?' in NAME1, 80H otherwise
 21689                                  ;	   Zero reset
 21690                                  ;	      File in middle of path or bad name in path
 21691                                  ;		or path too long or malformed path
 21692                                  ;	ELSE
 21693                                  ;	   [CURBUF] contains directory record with match
 21694                                  ;	   [CURBUF+2]:BX Points into [CURBUF] to start of entry
 21695                                  ;	   [CURBUF+2]:SI Points to fcb_FIRCLUS field for entry
 21696                                  ;	   [NAME1] Has name looked for
 21697                                  ;	   AH = device ID
 21698                                  ;	      bit 7 of AH set if device SI and BX
 21699                                  ;	      will point DOSGROUP relative The firclus
 21700                                  ;	      field of the device entry contains the device pointer
 21701                                  ;	   If last element is a directory zero is set and:
 21702                                  ;	      [DIRSTART],[SECCLUSPOS],[DIRSEC],[CLUSNUM], and [CLUSFAC]
 21703                                  ;	      are set up to start a search on it,
 21704                                  ;	      unless [NoSetDir] is non zero in which case the return is
 21705                                  ;	      like that for a file (except for zero flag)
 21706                                  ;	   If last element is a file zero is reset
 21707                                  ;	      [DIRSEC],[CLUSNUM],[CLUSFAC],[NXTCLUSNUM],[SECCLUSPOS],
 21708                                  ;	      [LASTENT], [ENTLAST] are set to continue search of last
 21709                                  ;	      directory for furthur matches on NAME1 via the NEXTENT
 21710                                  ;	      entry point in FindEntry (or GETENT entry in GETENTRY in
 21711                                  ;	      which case [NXTCLUSNUM] and [SECCLUSPOS] need not be valid)
 21712                                  ; Destroys all other registers
 21713                                  
 21714                                      	;entry	FINDPATH
 21715                                  FINDPATH:
 21716 00004948 06                      	PUSH	ES			; Save ES:BP
 21717 00004949 56                      	PUSH	SI
 21718 0000494A 89F7                    	MOV	DI,SI
 21719 0000494C 8B0E[5805]              	MOV	CX,[DIRSTART]		; Get start clus of dir being searched
 21720 00004950 833E[4E05]FF            	CMP	word [CURR_DIR_END],-1
 21721 00004955 740E                    	JZ	short NOIDS		; No current dir part
 21722 00004957 3B3E[4E05]              	CMP	DI,[CURR_DIR_END]
 21723 0000495B 7508                    	JNZ	short NOIDS		; Not to current dir end yet
 21724 0000495D C43E[3A05]              	LES	DI,[THISCDS]
 21725                                  	;mov	[es:di+73],cx
 21726 00004961 26894D49                	MOV	[ES:DI+curdir.ID],CX	; Set current directory currency
 21727                                  NOIDS:
 21728                                  
 21729                                  ; Parse the name off of DS:SI into NAME1. AL = 1 if there was a meta
 21730                                  ; character in the string. CX,DI may be destroyed.
 21731                                  ;
 21732                                  ;	invoke	NAMETRANS
 21733                                  ;	MOV	CL,AL
 21734                                  ;
 21735                                  ; The above is the slow method. The name has *already* been munged by
 21736                                  ; TransPath so no special casing needs to be done. All we do is try to copy
 21737                                  ; the name until ., \ or 0 is hit.
 21738                                  
 21739 00004965 8CD0                    	MOV	AX,SS
 21740 00004967 8EC0                    	MOV	ES,AX
 21741                                  
 21742                                  ;hkn; Name1 is in DOSDATA
 21743 00004969 BF[E604]                	MOV	DI,NAME1
 21744 0000496C B82020                  	MOV	AX,'  ' ; 2020h
 21745 0000496F AA                      	STOSB
 21746 00004970 AB                      	STOSW
 21747 00004971 AB                      	STOSW
 21748 00004972 AB                      	STOSW
 21749 00004973 AB                      	STOSW
 21750 00004974 AB                      	STOSW
 21751                                  
 21752                                  ;hkn; Name1 is in DOSDATA
 21753 00004975 BF[E604]                	MOV	DI,NAME1
 21754 00004978 30E4                    	XOR	AH,AH			; bits for CL
 21755                                  GetNam:
 21756                                  	;INC	CL			;AN000; KK incrment volid count
 21757 0000497A AC                      	LODSB
 21758 0000497B 3C2E                    	CMP	AL,'.'
 21759 0000497D 7412                    	JZ	short _SetExt
 21760 0000497F 08C0                    	OR	AL,AL
 21761 00004981 7424                    	JZ	short _GetDone
 21762 00004983 3C5C                    	CMP	AL,'\'
 21763 00004985 7420                    	JZ	short _GetDone
 21764 00004987 3C3F                    	CMP	AL,'?'
 21765 00004989 7503                    	JNZ	short StoNam
 21766 0000498B 80CC01                  	OR	AH,1
 21767                                  StoNam: 
 21768 0000498E AA                      	STOSB
 21769 0000498F EBE9                    	JMP	short GetNam
 21770                                  _SetExt:
 21771 00004991 BF[EE04]                	MOV	DI,NAME1+8
 21772                                  GetExt:
 21773 00004994 AC                      	LODSB
 21774 00004995 08C0                    	OR	AL,AL
 21775 00004997 740E                    	JZ	short _GetDone
 21776 00004999 3C5C                    	CMP	AL,'\'
 21777 0000499B 740A                    	JZ	short _GetDone
 21778 0000499D 3C3F                    	CMP	AL,'?'
 21779 0000499F 7503                    	JNZ	short StoExt
 21780 000049A1 80CC01                  	OR	AH,1
 21781                                  StoExt: 
 21782 000049A4 AA                      	STOSB
 21783 000049A5 EBED                    	JMP	short GetExt
 21784                                  _GetDone:
 21785 000049A7 4E                      	DEC	SI
 21786 000049A8 88E1                    	MOV	CL,AH
 21787 000049AA 80C980                  	OR	CL,80H
 21788 000049AD 5F                      	POP	DI			; Start of this element
 21789 000049AE 07                      	POP	ES			; Restore ES:BP
 21790 000049AF 39FE                    	CMP	SI,DI
 21791 000049B1 7503                    	JNZ	short check_device
 21792 000049B3 E9D100                  	JMP	_BADPATH		; NUL parse (two delims most likely)
 21793                                  check_device:
 21794 000049B6 56                      	PUSH	SI			; Start of next element
 21795 000049B7 8A04                    	MOV	AL,[SI]
 21796 000049B9 08C0                    	OR	AL,AL
 21797 000049BB 7508                    	JNZ	short NOT_LAST
 21798                                  
 21799                                  ; for last element of the path switch to the correct search attributes
 21800                                  
 21801 000049BD 8A3E[0805]              	MOV	BH,[SATTRIB]
 21802 000049C1 883E[0605]              	MOV	[ATTRIB],BH
 21803                                  
 21804                                  NOT_LAST:
 21805                                  
 21806                                  ; check name1 to see if we have a device...
 21807                                  
 21808 000049C5 06                      	PUSH	ES			; Save ES:BP
 21809                                  
 21810                                  ;hkn; SS is DOSDATA
 21811                                  	;context ES
 21812 000049C6 16                      	push	ss
 21813 000049C7 07                      	pop	es
 21814 000049C8 E81501                  	call	DEVNAME 		; blast BX
 21815 000049CB 07                      	POP	ES			; Restore ES:BP
 21816 000049CC 720B                    	JC	short FindFile		; Not a device
 21817 000049CE 08C0                    	OR	AL,AL			; Test next char again
 21818 000049D0 7403                    	JZ	short GO_BDEV
 21819 000049D2 E9B600                  	JMP	FILEINPATH		; Device name in middle of path
 21820                                  
 21821                                  GO_BDEV:
 21822 000049D5 5E                      	POP	SI			; Points to NUL at end of path
 21823 000049D6 E980FE                  	JMP	Build_devJ
 21824                                  
 21825                                  FindFile:
 21826                                  ;;;; 7/28/86
 21827 000049D9 803E[E604]E5            	CMP	BYTE [NAME1],0E5H	; if 1st char = E5
 21828 000049DE 7505                    	JNZ	short NOE5		; no
 21829 000049E0 C606[E604]05            	MOV	BYTE [NAME1],05H	; change it to 05
 21830                                  NOE5:
 21831                                  ;;;; 7/28/86
 21832 000049E5 57                      	PUSH	DI			; Start of this element
 21833 000049E6 06                      	PUSH	ES			; Save ES:BP
 21834 000049E7 51                      	PUSH	CX			; CL return from NameTrans
 21835                                  ;DOS 3.3 FastOPen 6/12/86 F.C.
 21836                                  
 21837 000049E8 E87C02                  	CALL	LookupPath		; call fastopen to get dir entry
 21838 000049EB 7303                    	JNC	short DIR_FOUND		; found dir entry
 21839                                  
 21840                                  ;DOS 3.3 FastOPen 6/12/86 F.C.
 21841 000049ED E8B5FC                  	call	FINDENTRY
 21842                                  DIR_FOUND:
 21843 000049F0 59                      	POP	CX
 21844 000049F1 07                      	POP	ES
 21845 000049F2 5F                      	POP	DI
 21846 000049F3 7303                    	JNC	short LOAD_BUF
 21847 000049F5 E9B800                  	JMP	BADPATHPOP
 21848                                  
 21849                                  LOAD_BUF:
 21850 000049F8 C53E[7405]              	LDS	DI,[CURBUF]
 21851                                  	;test	byte [bx+0Bh],10h
 21852 000049FC F6470B10                	TEST	BYTE [BX+dir_entry.dir_attr],attr_directory
 21853 00004A00 7503                    	JNZ	short GO_NEXT 		; DOS 3.3
 21854 00004A02 E98600                  	JMP	FILEINPATH		; Error or end of path
 21855                                  
 21856                                  ; if we are not setting the directory, then check for end of string
 21857                                  
 21858                                  GO_NEXT:
 21859                                  ;hkn; SS override
 21860 00004A05 36803E[F802]00          	CMP	BYTE [SS:NoSetDir],0
 21861 00004A0B 7412                    	JZ	short SetDir
 21862 00004A0D 89FA                    	MOV	DX,DI			; Save pointer to entry
 21863 00004A0F 8CD9                    	MOV	CX,DS
 21864                                  
 21865                                  ;hkn; SS is DOSDATA
 21866                                  	;context DS
 21867 00004A11 16                      	push	ss
 21868 00004A12 1F                      	pop	ds
 21869 00004A13 5F                      	POP	DI			; Start of next element
 21870                                  	; MSDOS 6.0
 21871                                  	;TEST	byte [FastOpenFlg],FastOpen_Set ;only DOSOPEN can take advantage of
 21872                                  	;JZ	short nofast			; the FastOpen
 21873                                  	;TEST	byte [FastOpenFlg],Lookup_Success ; Lookup just happened
 21874                                  	;JZ	short nofast			; no
 21875                                  	;MOV	DI,[Next_Element_Start]	; no need to insert it again
 21876                                  ;nofast:
 21877 00004A14 803D00                  	CMP	BYTE [DI],0
 21878 00004A17 7501                    	JNZ	short NEXT_ONE		; DOS 3.3
 21879                                  	;JMP	_SETRET			; Got it
 21880 00004A19 C3                      	retn	; 05/09/2018
 21881                                  NEXT_ONE:
 21882 00004A1A 57                      	PUSH	DI			; Put start of next element back on stack
 21883 00004A1B 89D7                    	MOV	DI,DX
 21884 00004A1D 8ED9                    	MOV	DS,CX			; Get back pointer to entry
 21885                                  SetDir:
 21886 00004A1F 8B14                    	MOV	DX,[SI] 		; Dir_first
 21887                                  
 21888                                  ;DOS 3.3 FastOPen 6/12/86 F.C.
 21889 00004A21 1E                      	PUSH	DS		      ; save [curbuf+2]
 21890                                  ;hkn; SS is DOSDATA
 21891 00004A22 16                      	push	ss
 21892 00004A23 1F                      	pop	ds		      ; set DS Dosgroup
 21893                                  	;test	byte [FastOpenFlg],2
 21894 00004A24 F606[6E0F]02            	TEST	byte [FastOpenFlg],Lookup_Success
 21895 00004A29 7410                    	JZ	short DO_NORMAL	      ; fastopen not in memory or path not
 21896 00004A2B 89D3                    	MOV	BX,DX		      ; not found
 21897 00004A2D 8B3E[5405]              	MOV	DI,[CLUSNUM]	      ; clusnum was set in LookupPath
 21898 00004A31 50                      	PUSH	AX		      ; save device id (AH)
 21899 00004A32 E8ABFD                  	call	SETDIRSRCH
 21900 00004A35 58                      	POP	AX		      ; restore device id (AH)
 21901 00004A36 83C402                  	ADD	SP,2		      ; pop ds in stack
 21902 00004A39 EB36                    	JMP	short FAST_OPEN_SKIP
 21903                                  
 21904                                  DO_NORMAL:
 21905 00004A3B 1F                      	POP	DS			; DS = [curbuf + 2]
 21906                                  ;DOS 3.3 FastOPen 6/12/86 F.C.
 21907                                  
 21908 00004A3C 29FB                    	SUB	BX,DI			; Offset into sector of start of entry
 21909 00004A3E 29FE                    	SUB	SI,DI			; Offset into sector of dir_first
 21910 00004A40 53                      	PUSH	BX
 21911 00004A41 50                      	PUSH	AX
 21912 00004A42 56                      	PUSH	SI
 21913 00004A43 51                      	PUSH	CX
 21914                                  	;push	word [di+6]
 21915 00004A44 FF7506                  	PUSH	WORD [DI+BUFFINFO.buf_sector]	;AN000;>32mb
 21916                                  	; MSDOS 6.0
 21917                                  	;PUSH	WORD [DI+BUFFINFO.buf_sector+2]	;AN000;>32mb
 21918 00004A47 89D3                    	MOV	BX,DX
 21919                                  
 21920                                  ;hkn; SS is DOSDATA
 21921                                  	;context DS
 21922 00004A49 16                      	push	ss
 21923 00004A4A 1F                      	pop	ds
 21924                                  	;invoke	SETDIRSRCH		; This uses UNPACK which might blow
 21925 00004A4B E892FD                  	call	SETDIRSRCH		; the entry sector buffer
 21926                                  	; MSDOS 6.0
 21927                                  	;POP	word [HIGH_SECTOR]
 21928 00004A4E 5A                      	POP	DX
 21929 00004A4F 720A                    	JC	short SKIP_GETB
 21930                                  	;mov	byte [ALLOWED],18h
 21931 00004A51 C606[F702]18            	MOV	byte [ALLOWED],Allowed_RETRY+Allowed_FAIL
 21932 00004A56 30C0                    	XOR	AL,AL
 21933                                  	;invoke	GETBUFFR		; Get the entry buffer back
 21934 00004A58 E82A14                  	call	GETBUFFR
 21935                                  SKIP_GETB:
 21936 00004A5B 59                      	POP	CX
 21937 00004A5C 5E                      	POP	SI
 21938 00004A5D 58                      	POP	AX
 21939 00004A5E 5B                      	POP	BX
 21940 00004A5F 7305                    	JNC	short SET_THE_BUF ; 19/05/2019
 21941 00004A61 5F                      	POP	DI			; Start of next element
 21942 00004A62 89FE                    	MOV	SI,DI			; Point with SI
 21943 00004A64 EB21                    	JMP	SHORT _BADPATH
 21944                                  
 21945                                  SET_THE_BUF:
 21946 00004A66 E8CFF6                  	call	SET_BUF_AS_DIR
 21947 00004A69 8B3E[7405]              	MOV	DI,[CURBUF]
 21948 00004A6D 01FE                    	ADD	SI,DI			; Get the offsets back
 21949 00004A6F 01FB                    	ADD	BX,DI
 21950                                  ; DOS 3.3 FastOpen 6/12/86  F.C.
 21951                                  FAST_OPEN_SKIP:
 21952 00004A71 5F                      	POP	DI			; Start of next element
 21953 00004A72 E86802                  	CALL	InsertPath		; insert dir entry info
 21954                                  ; DOS 3.3 FastOpen 6/12/86  F.C.
 21955 00004A75 8A05                    	MOV	AL,[DI]
 21956 00004A77 08C0                    	OR	AL,AL
 21957 00004A79 7434                    	JZ	short _SETRET		; At end
 21958 00004A7B 47                      	INC	DI			; Skip over "/"
 21959 00004A7C 89FE                    	MOV	SI,DI			; Point with SI
 21960 00004A7E E8C70B                  	call	PATHCHRCMP
 21961 00004A81 7503                    	JNZ	short find_bad_name	; oops
 21962 00004A83 E9C2FE                  	JMP	FINDPATH		; Next element
 21963                                  
 21964                                  find_bad_name:
 21965 00004A86 4E                      	DEC	SI			; Undo above INC to get failure point
 21966                                  _BADPATH:
 21967 00004A87 30C9                    	XOR	CL,CL			; Set zero
 21968 00004A89 EB2C                    	JMP	SHORT BADPRET
 21969                                  
 21970                                  FILEINPATH:
 21971 00004A8B 5F                      	POP	DI			; Start of next element
 21972                                  
 21973                                  ;hkn; SS is DOSDATA
 21974                                  	;context DS			; Got to from one place with DS gone
 21975 00004A8C 16                      	push	ss
 21976 00004A8D 1F                      	pop	ds
 21977                                  
 21978                                  ; DOS 3.3 FastOpen
 21979                                  	;test	byte [FastOpenFlg],1
 21980 00004A8E F606[6E0F]01            	TEST	byte [FastOpenFlg],FastOpen_Set  ; do this here is we don't want to
 21981 00004A93 740B                    	JZ	short NO_FAST		; device info to fastopen
 21982                                  	;test	byte [FastOpenFlg],2
 21983 00004A95 F606[6E0F]02            	TEST	byte [FastOpenFlg],Lookup_Success
 21984 00004A9A 7404                    	JZ	short NO_FAST
 21985 00004A9C 8B3E[6F0F]              	MOV	DI,[Next_Element_Start]  ; This takes care of one time lookup
 21986                                  					 ; success
 21987                                  NO_FAST:
 21988                                  ; DOS 3.3 FastOpen
 21989                                  
 21990 00004AA0 8A05                    	MOV	AL,[DI]
 21991 00004AA2 08C0                    	OR	AL,AL
 21992 00004AA4 7404                    	JZ	short INCRET
 21993 00004AA6 89FE                    	MOV	SI,DI			; Path too long
 21994 00004AA8 EB0D                    	JMP	SHORT BADPRET
 21995                                  
 21996                                  INCRET:
 21997                                  ; DOS 3.3 FasOpen 6/12/86  F.C.
 21998                                  
 21999 00004AAA E83002                  	CALL   InsertPath		; insert dir entry info
 22000                                  
 22001                                  ; DOS 3.3 FasOpen 6/12/86  F.C.
 22002 00004AAD FEC0                    	INC	AL			; Reset zero
 22003                                  _SETRET:
 22004 00004AAF C3                      	retn
 22005                                  
 22006                                  BADPATHPOP:
 22007 00004AB0 5E                      	POP	SI			; Start of next element
 22008 00004AB1 8A04                    	MOV	AL,[SI]
 22009 00004AB3 89FE                    	MOV	SI,DI			; Start of bad element
 22010 00004AB5 08C0                    	OR	AL,AL			; zero if bad element is last, non-zero if path too long
 22011                                  BADPRET:
 22012 00004AB7 A0[0805]                	MOV	AL,[SATTRIB]
 22013 00004ABA A2[0605]                	MOV	[ATTRIB],AL		; Make sure return correct
 22014 00004ABD F9                      	STC
 22015 00004ABE C3                      	retn
 22016                                  
 22017                                  ;Break	<STARTSRCH -- INITIATE DIRECTORY SEARCH>
 22018                                  ;---------------------------------------------------------------------------
 22019                                  ;
 22020                                  ; Procedure Name : STARTSRCH
 22021                                  ;
 22022                                  ; Inputs:
 22023                                  ;	[THISDPB] Set
 22024                                  ; Function:
 22025                                  ;	Set up a search for GETENTRY and NEXTENTRY
 22026                                  ; Outputs:
 22027                                  ;	ES:BP = Drive parameters
 22028                                  ;	Sets up LASTENT, ENTFREE=ENTLAST=-1, VOLID=0
 22029                                  ; Destroys ES,BP,AX
 22030                                  ;--------------------------------------------------------------------------
 22031                                  
 22032                                  STARTSRCH:
 22033 00004ABF C42E[2405]              	LES	BP,[THISDPB]
 22034 00004AC3 31C0                    	XOR	AX,AX
 22035 00004AC5 A3[F402]                	MOV	[LASTENT],AX
 22036 00004AC8 A2[1605]                	MOV	[VOLID],AL		; No volume ID found
 22037 00004ACB 48                      	DEC	AX
 22038 00004ACC A3[6A05]                	MOV	[ENTFREE],AX
 22039 00004ACF A3[6C05]                	MOV	[ENTLAST],AX
 22040 00004AD2 C3                      	retn
 22041                                  
 22042                                  ;BREAK <MatchAttributes - the final check for attribute matching>
 22043                                  ;----------------------------------------------------------------------------
 22044                                  ; Procedure Name : MatchAttributes
 22045                                  ;
 22046                                  ; Input:    [Attrib] = attribute to search for
 22047                                  ;	    CH = found attribute
 22048                                  ; Output:   JZ <match>
 22049                                  ;	    JNZ <nomatch>
 22050                                  ; Registers modified: noneski
 22051                                  ;----------------------------------------------------------------------------
 22052                                  
 22053                                  MatchAttributes:
 22054 00004AD3 50                      	PUSH	AX
 22055                                  
 22056                                  ;hkn; SS override
 22057 00004AD4 36A0[0605]              	MOV	AL,[ss:ATTRIB]		; AL <- SearchSet
 22058 00004AD8 F6D0                    	NOT	AL			; AL <- SearchSet'
 22059 00004ADA 20E8                    	AND	AL,CH			; AL <- SearchSet' and FoundSet
 22060                                  	;and	al,16h
 22061 00004ADC 2416                    	AND	AL,attr_all	; AL <- SearchSet' and FoundSet and Important
 22062                                  ;
 22063                                  ; the result is non-zero if an attribute is not in the search set
 22064                                  ; and in the found set and in the important set. This means that we do not
 22065                                  ; have a match. Do a JNZ <nomatch> or JZ <match>
 22066                                  ;
 22067 00004ADE 58                      	POP	AX
 22068 00004ADF C3                      	retn
 22069                                  
 22070                                  ;Break <DevName - Look for name of device>
 22071                                  ;---------------------------------------------------------------------------
 22072                                  ;
 22073                                  ; Procedure Name : DevName
 22074                                  ;
 22075                                  ; Inputs:
 22076                                  ;	DS,ES:DOSDATA
 22077                                  ;	Filename in NAME1
 22078                                  ;	ATTRIB set so that we can error out if looking for Volume IDs
 22079                                  ; Function:
 22080                                  ;	Determine if file is in list of I/O drivers
 22081                                  ; Outputs:
 22082                                  ;	Carry set if not a device
 22083                                  ;	ELSE
 22084                                  ;	Zero flag set
 22085                                  ;	BH = Bit 7,6 = 1, bit 5 = 0 (cooked mode)
 22086                                  ;	     bits 0-4 set from low byte of attribute word
 22087                                  ;	DEVPT = DWORD pointer to Device header of device
 22088                                  ; BX destroyed, others preserved
 22089                                  ;---------------------------------------------------------------------------
 22090                                  
 22091                                  DEVNAME:
 22092                                  	; 28/07/2018 - Retro DOS v3.0
 22093                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 49FBh
 22094                                  
 22095 00004AE0 56                      	PUSH	SI
 22096 00004AE1 57                      	PUSH	DI
 22097 00004AE2 51                      	PUSH	CX
 22098 00004AE3 50                      	PUSH	AX
 22099                                  
 22100                                  ; E5 special code
 22101 00004AE4 FF36[E604]              	PUSH	WORD [NAME1]
 22102 00004AE8 803E[E604]05            	CMP	byte [NAME1],5
 22103 00004AED 7505                    	JNZ	short NOKTR
 22104 00004AEF C606[E604]E5            	MOV	byte [NAME1],0E5h
 22105                                  NOKTR:
 22106                                  	;test	byte [ATTRIB],8
 22107 00004AF4 F606[0605]08            	TEST	byte [ATTRIB],attr_volume_id
 22108                                  					; If looking for VOL id don't find devs
 22109 00004AF9 7522                    	JNZ	short RET31
 22110                                  
 22111                                  ;hkn; NULDEV is in DOSDATA
 22112 00004AFB BE[4800]                	MOV	SI,NULDEV
 22113                                  LOOKIO:
 22114                                  	;test	word [si+4],8000h
 22115 00004AFE F744040080              	TEST	word [SI+SYSDEV.ATT],DEVTYP
 22116 00004B03 7411                    	JZ	short SKIPDEV 		; Skip block devices (NET and LOCAL)
 22117 00004B05 89F0                    	MOV	AX,SI
 22118                                  	;add	si,10
 22119 00004B07 83C60A                  	ADD	SI,SYSDEV.NAME
 22120                                  
 22121                                  ;hkn; NAME1 is in DOSDATA
 22122 00004B0A BF[E604]                	MOV	DI,NAME1
 22123 00004B0D B90400                  	MOV	CX,4			; All devices are 8 letters
 22124 00004B10 F3A7                    	REPE	CMPSW			; Check for name in list
 22125 00004B12 89C6                    	MOV	SI,AX
 22126 00004B14 7415                    	JZ	short IOCHK		; Found it?
 22127                                  SKIPDEV:
 22128 00004B16 C534                    	LDS	SI,[SI]			; Get address of next device
 22129 00004B18 83FEFF                  	CMP	SI,-1			; At end of list?
 22130 00004B1B 75E1                    	JNZ	short LOOKIO
 22131                                  RET31:	
 22132 00004B1D F9                      	STC				; Not found
 22133                                  RETNV:	
 22134 00004B1E 8CD1                    	MOV	CX,SS
 22135 00004B20 8ED9                    	MOV	DS,CX
 22136                                  
 22137 00004B22 8F06[E604]              	POP	WORD [NAME1]
 22138 00004B26 58                      	POP	AX
 22139 00004B27 59                      	POP	CX
 22140 00004B28 5F                      	POP	DI
 22141 00004B29 5E                      	POP	SI
 22142 00004B2A C3                      	RETN
 22143                                  
 22144                                  IOCHK:
 22145                                  ;hkn; SS override for DEVPT
 22146 00004B2B 368C1E[3405]            	MOV	[SS:DEVPT+2],DS		; Save pointer to device
 22147                                  	;mov	bh,[si+4]
 22148 00004B30 8A7C04                  	MOV	BH,[SI+SYSDEV.ATT]
 22149 00004B33 80CFC0                  	OR	BH,0C0h
 22150 00004B36 80E7DF                  	and	bh,0DFh
 22151                                  	;AND	BH,~(020h)		; Clears Carry
 22152 00004B39 368936[3205]            	MOV	[SS:DEVPT],SI
 22153 00004B3E EBDE                    	JMP	short RETNV
 22154                                  
 22155                                  ;BREAK <Build_device_ent - Make a Directory entry>
 22156                                  ;---------------------------------------------------------------------------
 22157                                  ; Procedure Name : Build_device_ent
 22158                                  ;
 22159                                  ; Inputs:
 22160                                  ;	[NAME1] has name
 22161                                  ;	BH is attribute field (supplied by DEVNAME)
 22162                                  ;	[DEVPT] points to device header (supplied by DEVNAME)
 22163                                  ; Function:
 22164                                  ;	Build a directory entry for a device at DEVFCB
 22165                                  ; Outputs:
 22166                                  ;	BX points to DEVFCB
 22167                                  ;	SI points to dir_first field
 22168                                  ;	AH = input BH
 22169                                  ;	AL = 0
 22170                                  ;	dir_first = DEVPT
 22171                                  ;	Zero Set, Carry Clear
 22172                                  ; DS,ES,BP preserved, others destroyed
 22173                                  ;--------------------------------------------------------------------------
 22174                                  
 22175                                  Build_device_ent:
 22176 00004B40 B82020                  	MOV	AX,"  " ; 2020h
 22177                                  
 22178                                  ;hkn; DEVFCB is in DOSDATA
 22179 00004B43 BF[EE04]                	MOV	DI,DEVFCB+8		; Point to extent field
 22180                                  
 22181                                  ;	Fill dir_ext	BUGBUG - use ERRNZs for this stuff!
 22182                                  
 22183 00004B46 AB                      	STOSW
 22184 00004B47 AA                      	STOSB				; Blank out extent field
 22185                                  	;mov	al,40h
 22186 00004B48 B040                    	MOV	AL,attr_device
 22187                                  
 22188                                  ;	Fill Dir_attr
 22189                                  
 22190 00004B4A AA                      	STOSB				; Set attribute field
 22191 00004B4B 31C0                    	XOR	AX,AX
 22192 00004B4D B90A00                  	MOV	CX,10
 22193                                  
 22194                                  ; Fill dir_pad
 22195                                  
 22196 00004B50 F3AB                    	REP	STOSW			; Fill rest with zeros
 22197 00004B52 E864CD                  	call	DATE16
 22198                                  
 22199                                  ;hkn; DEVFCB is in DOSDATA
 22200 00004B55 BF[FC04]                	MOV	DI,DEVFCB+dir_entry.dir_time ; 09/08/2018
 22201 00004B58 92                      	XCHG	AX,DX
 22202                                  
 22203                                  ; Fill dir_time
 22204                                  
 22205 00004B59 AB                      	STOSW
 22206 00004B5A 92                      	XCHG	AX,DX
 22207                                  
 22208                                  ; Fill dir_date
 22209                                  
 22210 00004B5B AB                      	STOSW
 22211 00004B5C 89FE                    	MOV	SI,DI			; SI points to dir_first field
 22212 00004B5E A1[3205]                	MOV	AX,[DEVPT]
 22213                                  
 22214                                  ; Fill dir_first
 22215                                  
 22216 00004B61 AB                      	STOSW				; Dir_first points to device
 22217 00004B62 A1[3405]                	MOV	AX,[DEVPT+2]
 22218                                  ;
 22219                                  ; Fill dir_size_l
 22220                                  ;
 22221 00004B65 AB                      	STOSW
 22222 00004B66 88FC                    	MOV	AH,BH			; Put device atts in AH
 22223                                  
 22224                                  ;hkn; DEVFCB is in DOSDATA
 22225 00004B68 BB[E604]                	MOV	BX,DEVFCB
 22226 00004B6B 30C0                    	XOR	AL,AL			; Set zero, clear carry
 22227 00004B6D C3                      	retn
 22228                                  
 22229                                  ;Break	<ValidateCDS - given a CDS, validate the media and the current directory>
 22230                                  ;----------------------------------------------------------------------------
 22231                                  ;
 22232                                  ;   ValidateCDS - Get current CDS. Splice it. Call FatReadCDS to check
 22233                                  ;   media. If media has been changed, do DOS_Chdir to validate path.
 22234                                  ;   If invalid, reset original CDS to root.
 22235                                  ;
 22236                                  ;   Inputs:	ThisCDS points to CDS of interest
 22237                                  ;		SS:DI points to temp buffer
 22238                                  ;   Outputs:	The current directory string is validated on the appropriate
 22239                                  ;		    drive
 22240                                  ;		ThisDPB changed
 22241                                  ;		ES:DI point to CDS
 22242                                  ;		Carry set if error (currently user FAILed to I 24)
 22243                                  ;   Registers modified: all
 22244                                  ;----------------------------------------------------------------------------
 22245                                  
 22246                                  ValidateCDS:
 22247                                  	; 28/07/2018 - Retro DOS v3.0
 22248                                  
 22249                                     %define  Temp	[bp-2]	; word
 22250                                     %define  SaveCDS	[bp-6]	; dword
 22251                                     %define  SaveCDSL	[bp-6]	; word
 22252                                     %define  SaveCDSH	[bp-4]	; word
 22253                                  
 22254                                  	;Enter
 22255 00004B6E 55                      	push	bp
 22256 00004B6F 89E5                    	mov	bp,sp
 22257 00004B71 83EC06                  	sub	sp,6
 22258                                  
 22259 00004B74 897EFE                  	MOV	Temp,DI
 22260                                  
 22261                                  ;hkn; SS override
 22262 00004B77 36C536[3A05]            	LDS	SI,[SS:THISCDS]
 22263 00004B7C 8976FA                  	MOV	SaveCDSL,SI
 22264 00004B7F 8C5EFC                  	MOV	SaveCDSH,DS
 22265                                  	;EnterCrit critDisk
 22266 00004B82 E8E7D4                  	call	EcritDisk
 22267                                  	;test	word [si+67],8000h
 22268 00004B85 F744430080              	TEST	word [SI+curdir.flags],curdir_isnet	; Clears carry
 22269 00004B8A 7403                    	JZ	short _DoSplice
 22270 00004B8C E98900                  	JMP	FatFail
 22271                                  _DoSplice:
 22272 00004B8F 30D2                    	XOR	DL,DL
 22273 00004B91 368616[F802]            	XCHG	DL,[SS:NoSetDir]
 22274                                  
 22275                                  ;hkn; SS is DOSDATA
 22276                                  	;Context ES
 22277 00004B96 16                      	push	ss
 22278 00004B97 07                      	pop	es
 22279                                  	;Invoke	FStrcpy
 22280 00004B98 E8C6D3                  	call	FStrCpy
 22281 00004B9B 8B76FE                  	MOV	SI,Temp
 22282                                  
 22283                                  ;hkn; SS is DOSDATA
 22284                                  	;Context DS
 22285 00004B9E 16                      	push	ss
 22286 00004B9F 1F                      	pop	ds	
 22287                                  	;Invoke	Splice
 22288 00004BA0 E83221                  	call	Splice
 22289                                  
 22290                                   ;hkn; SS is DOSDATA
 22291                                  	;Context DS			;   FatReadCDS (ThisCDS);
 22292 00004BA3 16                      	push	ss
 22293 00004BA4 1F                      	pop	ds
 22294 00004BA5 8816[F802]              	MOV	[NoSetDir],DL
 22295 00004BA9 C43E[3A05]              	LES	DI,[THISCDS]
 22296                                  	;SAVE	<BP>
 22297 00004BAD 55                      	push	bp
 22298                                  	;Invoke	FATREAD_CDS
 22299 00004BAE E80A10                  	call	FATREAD_CDS	
 22300                                  	;RESTORE <BP>
 22301 00004BB1 5D                      	pop	bp
 22302 00004BB2 7264                    	JC	short FatFail
 22303                                  
 22304 00004BB4 C536[3A05]              	LDS	SI,[THISCDS]		;   if (ThisCDS->ID == -1) {
 22305                                  	;cmp	word [si+73], -1
 22306 00004BB8 837C49FF                	CMP	word [SI+curdir.ID],-1
 22307 00004BBC 754C                    	JNZ	short RestoreCDS
 22308                                  
 22309                                  ;hkn; SS is DOSDATA
 22310                                  	;Context ES
 22311 00004BBE 16                      	push	ss
 22312 00004BBF 07                      	pop	es
 22313                                  
 22314                                  ;hkn; SS override
 22315                                  	;SAVE	<wfp_Start>		;	t = wfp_Start;
 22316 00004BC0 36FF36[4A05]            	push	word [SS:WFP_START]
 22317                                  	;cmp	si,[bp-6]
 22318 00004BC5 3B76FA                  	CMP	SI,SaveCDSL		; if not spliced
 22319 00004BC8 750B                    	JNZ	short DoChdir
 22320                                  	;mov	di,[bp-2]
 22321 00004BCA 8B7EFE                  	MOV	DI,Temp
 22322                                  
 22323                                  ;hkn; SS override
 22324 00004BCD 36893E[4A05]            	MOV	[SS:WFP_START],DI	;	wfp_start = d;
 22325                                  	;Invoke	FStrCpy 		;	strcpy (d, ThisCDS->Text);
 22326 00004BD2 E88CD3                  	call	FStrCpy
 22327                                  DoChdir:
 22328                                  ;hkn; SS is DOSDATA
 22329                                  	;Context DS
 22330 00004BD5 16                      	push	ss
 22331 00004BD6 1F                      	pop	ds
 22332                                  	;SAVE	<<WORD PTR SAttrib>,BP> ;	c = DOSChDir ();
 22333 00004BD7 FF36[0805]              	push	word [SATTRIB]
 22334 00004BDB 55                      	push	bp
 22335                                  	;Invoke	DOS_ChDir
 22336 00004BDC E80BF1                  	call	DOS_CHDIR
 22337                                  	;RESTORE <BP,BX,wfp_start>	;	wfp_Start = t;
 22338 00004BDF 5D                      	pop	bp
 22339 00004BE0 5B                      	pop	bx
 22340 00004BE1 8F06[4A05]              	pop	word [WFP_START]
 22341 00004BE5 881E[0805]              	MOV	[SATTRIB],BL
 22342 00004BE9 C576FA                  	LDS	SI,SaveCDS
 22343 00004BEC 730F                    	JNC	short SetCluster	;	if (c == -1) {
 22344                                  
 22345                                  ;hkn; SS override for THISCDS
 22346 00004BEE 368936[3A05]            	MOV	[SS:THISCDS],SI		;	    ThisCDS = TmpCDS;
 22347 00004BF3 368C1E[3C05]            	MOV	[SS:THISCDS+2],DS
 22348 00004BF8 31C9                    	XOR	CX,CX			;	    TmpCDS->text[3] = c = 0;
 22349 00004BFA 884C03                  	MOV	[SI+3],CL		;	    }
 22350                                  SetCluster:
 22351                                  	;mov	word [si+73],0FFFFh
 22352 00004BFD C74449FFFF              	MOV	word [SI+curdir.ID],-1	;	TmpCDS->ID = -1;
 22353 00004C02 36C536[3A05]            	LDS	SI,[SS:THISCDS]		;	ThisCDS->ID = c;
 22354                                  	; MSDOS 6.0
 22355                                  	;TEST	word [SI+curdir.flags],curdir_splice ;AN000;;MS. for Join and Subst
 22356                                  	;JZ	short setdirclus		     ;AN000;;MS.
 22357                                  	;MOV	CX,-1				     ;AN000;;MS.
 22358                                  setdirclus:
 22359                                  	;mov	[si+73],cx
 22360 00004C07 894C49                  	MOV	[SI+curdir.ID],CX	;	}
 22361                                  RestoreCDS:
 22362 00004C0A C47EFA                  	LES	DI,SaveCDS
 22363 00004C0D 36893E[3A05]            	MOV	[SS:THISCDS],DI
 22364 00004C12 368C06[3C05]            	MOV	[SS:THISCDS+2],ES
 22365 00004C17 F8                      	CLC
 22366                                  FatFail:
 22367                                  	;LeaveCrit critDisk
 22368 00004C18 E859D4                  	call	LcritDisk
 22369                                  
 22370                                  	;les	di,[bp-6]
 22371 00004C1B C47EFA                  	LES	DI,SaveCDS
 22372                                  	;Leave
 22373 00004C1E 89EC                    	mov	sp,bp
 22374 00004C20 5D                      	pop	bp
 22375 00004C21 C3                      	retn
 22376                                  
 22377                                  ; 28/07/2018 - Retro DOS v3.0
 22378                                  ; IBMDOS.COM (MSDOS 3.3, 1987) - offset 43BDh
 22379                                  
 22380                                  ;Break	<CheckThisDevice - Check for being a device>
 22381                                  ;---------------------------------------------------------------------------
 22382                                  ;
 22383                                  ;   CheckThisDevice - Examine the area at DS:SI to see if there is a valid
 22384                                  ;   device specified. We will return carry if there is a device present. 
 22385                                  ;   The forms of devices we will recognize are:
 22386                                  ;
 22387                                  ;	[path]device
 22388                                  ;
 22389                                  ;   Note that the drive letter has *already* been removed. All other forms
 22390                                  ;   are not considered to be devices. If such a device is found we change
 22391                                  ;   the source pointer to point to the device component.
 22392                                  ;
 22393                                  ;   Inputs:	ES is DOSDATA
 22394                                  ;		DS:SI contains name
 22395                                  ;   Outputs:	ES is DOSDATA
 22396                                  ;		DS:SI point to name or device
 22397                                  ;		Carry flag set if device was found
 22398                                  ;		Carry flag reset otherwise
 22399                                  ;   Registers Modified: all except ES:DI, DS
 22400                                  ;----------------------------------------------------------------------------
 22401                                  
 22402                                  CheckThisDevice:
 22403 00004C22 57                      	push	di
 22404 00004C23 56                      	push	si
 22405 00004C24 89F7                    	MOV	DI,SI
 22406                                  ;
 22407                                  ; Check for presence of \dev\ (Dam multiplan!)
 22408                                  ;
 22409 00004C26 8A04                    	MOV	AL,[SI]
 22410 00004C28 E81D0A                  	call	PATHCHRCMP		; is it a path char?
 22411 00004C2B 7517                    	JNZ	short ParseDev		; no, go attempt to parse device
 22412 00004C2D 46                      	INC	SI			; simulate LODSB
 22413                                  ;
 22414                                  ; We have the leading path separator. Look for DEV part.
 22415                                  ;
 22416 00004C2E AD                      	LODSW
 22417 00004C2F 0D2020                  	OR	AX,2020h
 22418 00004C32 3D6465                  	cmp	ax,"de"
 22419                                  	;CMP	AX,"e"<< 8 + "d"
 22420 00004C35 752D                    	JNZ	short NotDevice		; not "de", assume not device
 22421 00004C37 AC                      	LODSB
 22422 00004C38 0C20                    	OR	AL,20h
 22423 00004C3A 3C76                    	CMP	AL,"v"                  ; Not "v", assume not device
 22424 00004C3C 7526                    	JNZ	short NotDevice
 22425 00004C3E AC                      	LODSB
 22426 00004C3F E8060A                  	call	PATHCHRCMP		; do we have the last path separator?
 22427 00004C42 7520                    	JNZ	short NotDevice		; no. go for it.
 22428                                  ;
 22429                                  ; DS:SI now points to a potential drive. Preserve them as NameTrans advances
 22430                                  ; SI and DevName may destroy DS.
 22431                                  ;
 22432                                  ParseDev:
 22433 00004C44 1E                      	push	ds
 22434 00004C45 56                      	push	si			; preserve the source pointer
 22435 00004C46 E89509                  	call	NameTrans		; advance DS:SI
 22436 00004C49 803C00                  	CMP	BYTE [SI],0		; parse entire string?
 22437 00004C4C F9                      	STC				; simulate a Carry return from DevName
 22438 00004C4D 750B                    	JNZ	short SkipSearch	; no parse. simulate a file return.
 22439                                  
 22440                                  ;hkn; SS is DOSDATA
 22441 00004C4F 16                      	push	ss
 22442 00004C50 1F                      	pop	ds
 22443                                  
 22444                                  ; M026 - start - fix ported from ROMDOS2 for bug # 2849
 22445                                  ;
 22446                                  ; SR;
 22447                                  ; We have to set Attrib before invoking DevName. Otherwise, the value from
 22448                                  ; a previous DOS call is used and DevName thinks it is not a device if the
 22449                                  ; old call set the volume attribute bit.
 22450                                  ;
 22451 00004C51 A0[0805]                	mov	al,[SATTRIB]
 22452 00004C54 A2[0605]                	mov	[ATTRIB],al		;set Attrib for DevName
 22453                                  
 22454                                  ; M026 - end
 22455                                  
 22456 00004C57 E886FE                  	call	DEVNAME
 22457                                  
 22458                                  SkipSearch:
 22459 00004C5A 5E                      	pop	si
 22460 00004C5B 1F                      	pop	ds
 22461                                  ;
 22462                                  ; SI points to the beginning of the potential device. If we have a device
 22463                                  ; then we do not change SI. If we have a file, then we reset SI back to the
 22464                                  ; original value. At this point Carry set indicates FILE.
 22465                                  ;
 22466                                  CheckReturn:
 22467 00004C5C 5F                      	pop	di			; get original SI
 22468 00004C5D 7302                    	JNC	short Check_Done	; if device then do not reset pointer
 22469 00004C5F 89FE                    	MOV	SI,DI
 22470                                  Check_Done:
 22471 00004C61 5F                      	pop	di
 22472 00004C62 F5                      	CMC				; invert carry. Carry => device
 22473 00004C63 C3                      	retn
 22474                                  NotDevice:
 22475 00004C64 F9                      	STC
 22476 00004C65 EBF5                    	JMP	short CheckReturn
 22477                                  
 22478                                  ;BREAK <LookupPath - call fastopen to get dir entry info>
 22479                                  ;-----------------------------------------------------------------------------
 22480                                  ;
 22481                                  ; Procedure Name : LookupPath
 22482                                  ;
 22483                                  ; Output  DS:SI -> path name,
 22484                                  ;	  ES:DI -> dir entry info buffer
 22485                                  ;	  ES:CX -> extended dir info buffer
 22486                                  ;
 22487                                  ;	  carry flag clear : tables pointed by ES:DI and ES:CX are filled by
 22488                                  ;			     FastOpen, DS:SI points to char just one after
 22489                                  ;			     the last char of path name which is fully or
 22490                                  ;			     partially found in FastOPen
 22491                                  ;	  carry flag set : FastOpen not in memory or path name not found
 22492                                  ;
 22493                                  ;----------------------------------------------------------------------------
 22494                                  
 22495                                  LookupPath:
 22496                                  ;	PUSH	AX
 22497                                  
 22498                                  ;hkn; SS override
 22499                                  	;test	byte [ss:FastOpenFlg],1
 22500 00004C67 36F606[6E0F]01          	TEST	byte [ss:FastOpenFlg],FastOpen_Set  ; flg is set in DOSPEN
 22501 00004C6D 7502                    	JNZ	short FASTINST			    ; and this routine is
 22502                                  NOLOOK:
 22503 00004C6F EB6A                    	JMP	NOLOOKUP			    ; executed once
 22504                                  
 22505                                  FASTINST:
 22506                                  ;hkn; SS override
 22507                                  	;test	byte [ss:FastOpenFlg],8
 22508 00004C71 36F606[6E0F]08          	TEST	byte [ss:FastOpenFlg],No_Lookup	    ; no more lookup?
 22509 00004C77 75F6                    	JNZ	short NOLOOK			    ; yes
 22510                                  
 22511 00004C79 BB[430F]                	MOV	BX,FastOpenTable		    ; get fastopen related tab
 22512                                  
 22513                                  ;hkn; SS override
 22514 00004C7C 368B36[4A05]            	MOV	SI,[SS:WFP_START]		    ; si points to path name
 22515 00004C81 BF[4E0F]                	MOV	DI,Dir_Info_Buff
 22516 00004C84 B9[490F]                	MOV	CX,FastOpen_Ext_Info
 22517 00004C87 B001                    	MOV	AL,FONC_Look_up 		    ; al = 1
 22518 00004C89 1E                      	PUSH	DS
 22519 00004C8A 07                      	POP	ES
 22520                                  
 22521                                  ;hkn; SS override
 22522                                  	;call	far [bx+2]
 22523 00004C8B FF5F02                  	CALL	far [BX+fastopen_entry.name_caching] ;call fastopen
 22524 00004C8E 723A                    	JC	short NOTFOUND			    ; fastopen not in memory
 22525                                  
 22526 00004C90 8D5CFE                  	LEA	BX,[SI-2]
 22527                                  
 22528                                  ;hkn; SS override
 22529 00004C93 363B1E[4A05]            	CMP	BX,[SS:WFP_START]		    ; path found ?
 22530 00004C98 7430                    	JZ	short NOTFOUND			    ; no
 22531                                  
 22532                                  	; MSDOSD 6.0				    ; fully or partially found
 22533                                  	;CMP	BYTE [SI],0			    ;AN000;FO.
 22534                                  	;JNZ	short parfnd			    ;AN000;FO.; partiallyfound
 22535                                  	;PUSH	CX				    ;AN000;FO.; is attribute matched ?
 22536                                  
 22537                                  ;hkn; SS override for attrib/sattrib
 22538                                  	;MOV	CL,[ss:ATTRIB]			    ;AN000;FO.;
 22539                                  	;MOV	CH,[ss:SATTRIB]			    ;AN000;FO.; attrib=sattrib
 22540                                  	;MOV	[ss:ATTRIB],CH			    ;AN000;FO.;
 22541                                  	;MOV	CH,[ES:DI+dir_entry.dir_attr]	    ;AN000;FO.;
 22542                                  	;call	Matchattributes 		    ;AN000;FO.;
 22543                                  ;;;	MOV	[ss:ATTRIB],CL			    ;AN001;FO.; restore attrib
 22544                                  	;POP	CX				    ;AN000;FO.;
 22545                                  	;JNZ	short NOLOOKUP			    ;AN000;FO.; not matched
 22546                                  ;parfnd:
 22547                                  
 22548                                  ;hkn; SS override
 22549 00004C9A 368936[6F0F]            	MOV	[SS:Next_Element_Start],SI	    ; save si
 22550 00004C9F 89CB                    	MOV	BX,CX
 22551                                  	; MSDOS 6.0
 22552                                  	;MOV	AX,[BX+FEI.lastent]		    ;AN000;;FO. restore lastentry
 22553                                  ;hkn; SS override for LASTENT, DIRSTART, CLUSNUM
 22554                                  	;MOV	[SS:LASTENT],AX			    ;AN000;;FO.
 22555                                  	;MOV	AX,[BX+FEI.dirstart]		    ;AN001;;FO. restore dirstart
 22556                                  	;MOV	[SS:DIRSTART],AX			    ;AN001;;FO.
 22557                                  	; MSDOS 3.3 (& MSDOS 6.0)
 22558                                  	;mov	ax,[bx+3] ; MSDOS 3.3
 22559 00004CA1 8B4703                  	MOV	AX,[BX+FEI.clusnum]		    ; restore next cluster num
 22560 00004CA4 36A3[5405]              	MOV	[SS:CLUSNUM],AX			    ;
 22561                                  
 22562 00004CA8 06                      	PUSH	ES				    ; save ES
 22563                                  ;hkn; SS override
 22564 00004CA9 36C41E[2405]            	LES	BX,[SS:THISDPB]			    ; put drive id
 22565 00004CAE 268A27                  	mov	ah,[ES:BX] ; 15/08/2018
 22566                                  	;MOV	AH,[ES:BX+DPB.DRIVE]		    ; in AH for DOOPEN
 22567 00004CB1 07                      	POP	ES				    ; pop ES
 22568                                  ;SR;
 22569                                  ; We cannot have a root dir if we have come here. So, we zero out CurBuf to
 22570                                  ;indicate it is not a root dir
 22571                                  ;
 22572 00004CB2 36C706[7405]0000        	mov	word [SS:CURBUF],0		    ; indicate not root dir
 22573                                  
 22574 00004CB9 368C06[7605]            	MOV	WORD [SS:CURBUF+2],ES		    ; [curbuf+2].bx points to
 22575 00004CBE 89FB                    	MOV	BX,DI				    ; start of entry
 22576                                  	;lea	si,[di+1Ah]
 22577 00004CC0 8D751A                  	LEA	SI,[DI+dir_entry.dir_first]	    ; [curbuf+2]:si points to
 22578                                  						    ; dir_first field in the
 22579                                  						    ; dir entry
 22580                                  ;hkn; SS override for FastOpenFlg
 22581                                  	;or	byte [ss:FastOpenFlg],2
 22582 00004CC3 36800E[6E0F]12          	OR	byte [SS:FastOpenFlg],Lookup_Success+Set_For_Search
 22583                                  ;	POP	AX
 22584 00004CC9 C3                      	RETN
 22585                                  NOTFOUND:
 22586 00004CCA 83F8FF                  	CMP	AX,-1				    ; not in memory ?
 22587 00004CCD 7506                    	JNZ	short Partial_Success 		    ; yes, in memory
 22588 00004CCF 36C606[6E0F]00          	MOV	byte [SS:FastOpenFlg],0		    ; no more fastopen
 22589                                  Partial_Success:
 22590                                  	;and	byte [SS:FastOpenFlg],0FBh
 22591 00004CD5 368026[6E0F]FB          	AND	byte [SS:FastOpenFlg],Special_Fill_Reset
 22592                                  NOLOOKUP:
 22593                                  ;	POP	AX
 22594 00004CDB F9                      	STC
 22595 00004CDC C3                      	RETN
 22596                                  
 22597                                  ;BREAK <InsertPath - call fastopen to insert dir entry info>
 22598                                  ;-----------------------------------------------------------------------------
 22599                                  ;
 22600                                  ; Procedure Name : InsertPath
 22601                                  ; Input:  FastOpen_Set flag set when from DOSOPEN otherwise 0
 22602                                  ;	  Lookup_Success flag set when got dir entry info from FASTOPEN
 22603                                  ;	  DS = DOSDATA
 22604                                  ; Output: FastOPen_Ext_Info is set and path dir info is inserted
 22605                                  ;
 22606                                  ;-----------------------------------------------------------------------------
 22607                                  
 22608                                  InsertPath:
 22609 00004CDD 9C                      	PUSHF
 22610                                  ;hkn; SS override for FastOpenFlag
 22611                                  	;test	byte [SS:FastOpenFlg], 1
 22612 00004CDE 36F606[6E0F]01          	TEST	byte [SS:FastOpenFlg],FastOpen_Set ;only DOSOPEN can take advantage of
 22613 00004CE4 7465                    	JZ	short GET_NEXT_ELEMENT		; the FastOpen
 22614                                  	;test	byte [ss:FastOpenFlg],2
 22615 00004CE6 36F606[6E0F]02          	TEST	byte [SS:FastOpenFlg],Lookup_Success ; Lookup just happened
 22616 00004CEC 740D                    	JZ	short INSERT_DIR_INFO		; no
 22617                                  	;and	byte [ss:FastOpenFlg],0FDh
 22618 00004CEE 368026[6E0F]FD          	AND	byte [SS:FastOpenFlg],Lookup_Reset  ; we got dir info from fastopen so
 22619 00004CF4 368B3E[6F0F]            	MOV	DI,[SS:Next_Element_Start]	; no need to insert it again
 22620 00004CF9 EB4A                    	JMP	short GET_NEXT2
 22621                                  INSERT_DIR_INFO:				; save registers
 22622 00004CFB 1E                      	PUSH	DS
 22623 00004CFC 06                      	PUSH	ES
 22624 00004CFD 53                      	PUSH	BX
 22625 00004CFE 56                      	PUSH	SI
 22626 00004CFF 57                      	PUSH	DI
 22627 00004D00 51                      	PUSH	CX
 22628 00004D01 50                      	PUSH	AX
 22629                                  
 22630                                  ;hkn; SS override
 22631 00004D02 36C53E[7405]            	LDS	DI,[SS:CURBUF]			; DS:DI -> buffer header
 22632 00004D07 BE[490F]                	MOV	SI,FastOpen_Ext_Info
 22633                                  	;mov	ax,[di+6]
 22634 00004D0A 8B4506                  	MOV	AX,[DI+BUFFINFO.buf_sector]	; get directory sector
 22635                                  	; 22/07/2019
 22636                                  	; MSDOS 6.0
 22637                                  	;MOV	[SS:SI+FEI.dirsec],AX 		;AN000; >32mb save dir sector
 22638                                  	;MOV	AX,[DI+BUFFINFO.buf_sector+2]	;AN000; >32mb
 22639                                  
 22640                                  ;hkn; SS is DOSDATA
 22641 00004D0D 16                      	push	ss
 22642 00004D0E 1F                      	pop	ds
 22643                                  	; MSDOS 6.0
 22644                                  	;MOV	[SI+FEI.dirsec+2],AX  ;AN000;>32mb save high dir sector
 22645                                  	; MSDOS 3.3	
 22646                                  	;mov	[si+1],ax	
 22647 00004D0F 894401                  	MOV	[SI+FEI.dirsec],AX
 22648                                  	; MSDOS 3.3 (& MSDOS 6.0)
 22649 00004D12 A1[5405]                	MOV	AX,[CLUSNUM]		; save next cluster number
 22650                                  	;;mov	[si+5],ax ; MSDOS 6.0
 22651                                  	;mov	[si+3],ax ; MSDOS 3.3
 22652 00004D15 894403                  	MOV	[SI+FEI.clusnum],AX
 22653                                  	; MSDOS 6.0
 22654                                  	;MOV	AX,[LASTENT]		;AN000;FO. save lastentry for search first
 22655                                  	;MOV	[SI+FEI.lastent],AX	;AN000;FO.
 22656                                  	;MOV	AX,[DIRSTART]		;AN001;FO. save  for search first
 22657                                  	;MOV	[SI+FEI.dirstart],AX	;AN001;FO.
 22658                                  	; MSDOS 3.3 (& MSDOS 6.0)
 22659 00004D18 89D8                    	MOV	AX,BX
 22660                                  	;add	di,16
 22661 00004D1A 83C710                  	ADD	DI,BUFINSIZ		; DS:DI -> start of data in buffer
 22662 00004D1D 29F8                    	SUB	AX,DI			; AX=BX relative to start of sector
 22663                                  	;mov	cl,32
 22664 00004D1F B120                    	MOV	CL,dir_entry.size
 22665 00004D21 F6F1                    	DIV	CL
 22666                                  	;MOV	[SI+FEI.dirpos],AL	; save directory entry # in buffer
 22667 00004D23 8804                    	mov	[si],al
 22668                                  
 22669 00004D25 1E                      	PUSH	DS
 22670 00004D26 07                      	POP	ES
 22671                                  
 22672 00004D27 8E1E[7605]              	MOV	DS,[CURBUF+2]
 22673 00004D2B 89DF                    	MOV	DI,BX			; DS:DI -> dir entry info
 22674                                  	;cmp	word [di+1Ah],0
 22675 00004D2D 837D1A00                	CMP	word [DI+dir_entry.dir_first],0 
 22676                                  					; never insert info when file is empty
 22677 00004D31 740B                    	JZ	short SKIP_INSERT	; e.g. newly created file
 22678                                  
 22679 00004D33 56                      	PUSH	SI			; ES:BX -> extended info
 22680 00004D34 5B                      	POP	BX
 22681                                  
 22682                                  	;mov	al,2
 22683 00004D35 B002                    	MOV	AL,FONC_insert		; call fastopen insert operation
 22684 00004D37 BE[430F]                	MOV	SI,FastOpenTable
 22685                                  	;call	far [es:si+2]
 22686 00004D3A FF5C02                  	CALL	far [SI+fastopen_entry.name_caching]
 22687                                  
 22688 00004D3D F8                      	CLC
 22689                                  SKIP_INSERT:
 22690 00004D3E 58                      	POP	AX
 22691 00004D3F 59                      	POP	CX			; restore registers
 22692 00004D40 5F                      	POP	DI
 22693 00004D41 5E                      	POP	SI
 22694 00004D42 5B                      	POP	BX
 22695 00004D43 07                      	POP	ES
 22696 00004D44 1F                      	POP	DS
 22697                                  GET_NEXT2:
 22698                                  	;or	[ss:FastOpenFlg],8
 22699 00004D45 36800E[6E0F]08          	OR	byte [SS:FastOpenFlg],No_Lookup
 22700                                  					; we got dir info from fastopen so
 22701                                  GET_NEXT_ELEMENT:
 22702 00004D4B 9D                      	POPF
 22703 00004D4C C3                      	RETN
 22704                                  
 22705                                  ;============================================================================
 22706                                  ; DEV.ASM, MSDOS 6.0, 1991
 22707                                  ;============================================================================
 22708                                  ; 28/07/2018 - Retro DOS v3.0
 22709                                  
 22710                                  ; DEV.ASM: Retro DOS v2.0 - 14/03/2018
 22711                                  
 22712                                  ;TITLE   DEV - Device call routines
 22713                                  ;NAME    Dev
 22714                                  
 22715                                  ;Break	<IOFUNC -- DO FUNCTION 1-12 I/O>
 22716                                  ;----------------------------------------------------------------------------
 22717                                  ;
 22718                                  ; Procedure Name : IOFUNC
 22719                                  ;
 22720                                  ; Inputs:
 22721                                  ;	DS:SI Points to SFT
 22722                                  ;	AH is function code
 22723                                  ;		= 0 Input
 22724                                  ;		= 1 Input Status
 22725                                  ;		= 2 Output
 22726                                  ;		= 3 Output Status
 22727                                  ;		= 4 Flush
 22728                                  ;		= 5 Input Status - System WAIT invoked for K09 if no char
 22729                                  ;				   present.
 22730                                  ;	AL = character if output
 22731                                  ; Function:
 22732                                  ;	Perform indicated I/O to device or file
 22733                                  ; Outputs:
 22734                                  ;	AL is character if input
 22735                                  ;	If a status call
 22736                                  ;		zero set if not ready
 22737                                  ;		zero reset if ready (character in AL for input status)
 22738                                  ; For regular files:
 22739                                  ;	Input Status
 22740                                  ;		Gets character but restores position
 22741                                  ;		Zero set on EOF
 22742                                  ;	Input
 22743                                  ;		Gets character advances position
 22744                                  ;		Returns ^Z on EOF
 22745                                  ;	Output Status
 22746                                  ;		Always ready
 22747                                  ; AX altered, all other registers preserved
 22748                                  ;----------------------------------------------------------------------------
 22749                                  
 22750                                  IOFUNC:
 22751 00004D4D 368C16[3403]            	MOV	[SS:IOXAD+2],SS		; SS override for IOXAD, IOSCNT, 
 22752                                  					; DEVIOBUF
 22753 00004D52 36C706[3203][5E03]      	MOV	WORD [SS:IOXAD],DEVIOBUF
 22754 00004D59 36C706[3603]0100        	MOV	WORD [SS:IOSCNT],1
 22755 00004D60 36A3[5E03]              	MOV	WORD [SS:DEVIOBUF],AX
 22756                                  	;test	word [si+5],8000h
 22757 00004D64 F744050080              	TEST	word [SI+SF_ENTRY.sf_flags],sf_isnet
 22758 00004D69 7403                    	JZ	short IOTO22		;AN000;
 22759 00004D6B E98500                  	JMP	IOTOFILE		;AN000;
 22760                                  IOTO22:
 22761                                  	;test	word [si+5],80h ; 17/05/2019
 22762 00004D6E F744058000              	TEST	word [SI+SF_ENTRY.sf_flags],devid_device 
 22763 00004D73 7502                    	JNZ	short IOTO33		;AN000;
 22764 00004D75 EB7C                    	JMP	IOTOFILE		;AN000;
 22765                                  IOTO33:
 22766 00004D77 E87EC8                  	call	save_world
 22767 00004D7A 8CDA                    	MOV	DX,DS
 22768 00004D7C 8CD3                    	MOV	BX,SS
 22769 00004D7E 8EDB                    	MOV	DS,BX
 22770 00004D80 8EC3                    	MOV	ES,BX
 22771 00004D82 31DB                    	XOR	BX,BX
 22772 00004D84 80FC05                  	cmp	ah,5		    ; system wait enabled?
 22773 00004D87 7504                    	jnz	short _no_sys_wait
 22774 00004D89 81CB0004                	or	bx,0400H	    ; Set bit 10 in status word for driver
 22775                                  				    ; It is up to device driver to carry out
 22776                                  				    ; appropriate action.
 22777                                  _no_sys_wait:
 22778 00004D8D 891E[2703]              	MOV	[IOCALL_REQSTAT],BX
 22779 00004D91 31DB                    	XOR	BX,BX
 22780 00004D93 881E[3103]              	MOV	[IOMED],BL
 22781                                  
 22782 00004D97 88E3                    	MOV	BL,AH		 	; get function
 22783 00004D99 8AA7[0413]              	MOV	AH,[BX+LenTab]
 22784 00004D9D D1E3                    	SHL	BX,1
 22785 00004D9F 8B8F[0A13]              	MOV	CX,[BX+CmdTab]
 22786 00004DA3 BB[2403]                	MOV	BX,IOCALL
 22787 00004DA6 8826[2403]              	MOV	[IOCALL_REQLEN],AH
 22788 00004DAA 882E[2603]              	MOV	[IOCALL_REQFUNC],CH
 22789                                  
 22790 00004DAE 8EDA                    	MOV	DS,DX
 22791 00004DB0 E84401                  	CALL	DEVIOCALL
 22792 00004DB3 368B3E[2703]            	MOV	DI,[SS:IOCALL_REQSTAT]	; SS override
 22793                                  	;test	di,8000h
 22794                                  	;jnz	short DevErr
 22795 00004DB8 21FF                    	and	di,di
 22796 00004DBA 7820                    	js	short DevErr
 22797                                  
 22798                                  OKDevIO:
 22799 00004DBC 8CD0                    	MOV	AX,SS
 22800 00004DBE 8ED8                    	MOV	DS,AX
 22801                                  
 22802                                  	;cmp	ch, 5
 22803 00004DC0 80FD05                  	CMP	CH,DEVRDND
 22804 00004DC3 7506                    	JNZ	short DNODRD
 22805 00004DC5 A0[3103]                	MOV	AL,[IORCHR]
 22806 00004DC8 A2[5E03]                	MOV	[DEVIOBUF],AL
 22807                                  
 22808                                  DNODRD: 
 22809 00004DCB 8A26[2803]              	MOV	AH,[IOCALL_REQSTAT+1]
 22810 00004DCF F6D4                    	NOT	AH			; Zero = busy, not zero = ready
 22811                                  	;and	ah,2
 22812 00004DD1 80E402                  	AND	AH,STBUI>>8
 22813                                  
 22814                                  QuickReturn:				;AN000; 2/13/KK
 22815 00004DD4 E80EC8                  	call	restore_world
 22816                                  
 22817                                  	; SR;
 22818                                  	; We return ax = -1 if the user failed on I24. This is the case if 
 22819                                  	; IoStatFail = -1 (set after return from the I24)
 22820                                  	;
 22821                                  
 22822                                  	; MSDOS 6.0
 22823                                  	;pushf
 22824                                  	;mov	al,[ss:IoStatFail]	;assume fail error
 22825                                  	;cbw				;sign extend to word
 22826                                  	;cmp	ax,-1
 22827                                  	;jne	short not_fail_ret
 22828                                  	;inc	byte [ss:IoStatFail]
 22829                                  	;popf
 22830                                  	;retn
 22831                                  
 22832                                  ;not_fail_ret:
 22833 00004DD7 36A1[5E03]              	MOV	AX,[SS:DEVIOBUF]	;ss override
 22834                                  	;popf
 22835 00004DDB C3                      	retn
 22836                                  
 22837                                  ;IOTOFILEJ:
 22838                                  ;	JMP	SHORT IOTOFILE
 22839                                  
 22840                                  DevErr:
 22841 00004DDC 88CC                    	MOV	AH,CL
 22842 00004DDE E8490A                  	call	CHARHARD
 22843 00004DE1 3C01                    	CMP	AL,1
 22844 00004DE3 7506                    	JNZ	short NO_RETRY
 22845 00004DE5 E8FDC7                  	call	restore_world		
 22846 00004DE8 E962FF                  	JMP	IOFUNC	; 10/08/2018
 22847                                  
 22848                                  NO_RETRY:
 22849                                  
 22850                                  	; Know user must have wanted Ignore OR Fail. Make sure device shows ready
 22851                                  	; ready so that DOS doesn't get caught in a status loop when user 
 22852                                  	; simply wants to ignore the error.
 22853                                  	;
 22854                                  	; SR; If fail wanted by user set ax to special value (ax = -1). This 
 22855                                  	; should be checked by the caller on return
 22856                                  	;
 22857                                  
 22858                                  					; SS override
 22859 00004DEB 368026[2803]FD          	and	byte [SS:IOCALL_REQSTAT+1],0FDh
 22860                                  	;AND	BYTE [SS:IOCALL_REQSTAT+1],~(STBUI >> 8)
 22861                                  
 22862                                  	; SR;
 22863                                  	; Check if user failed
 22864                                  	;
 22865                                  
 22866                                  	; MSDOS 6.0
 22867                                  	;cmp	al,3
 22868                                  	;jnz	short not_fail
 22869                                  	;dec	byte [ss:IoStatFail]	;set flag indicating fail on I24
 22870                                  ;not_fail:
 22871 00004DF1 EBC9                    	JMP	short OKDevIO
 22872                                  
 22873                                  IOTOFILE:
 22874 00004DF3 08E4                    	OR	AH,AH
 22875 00004DF5 7423                    	JZ	short IOIN
 22876 00004DF7 FECC                    	DEC	AH
 22877 00004DF9 7405                    	JZ	short IOIST
 22878 00004DFB FECC                    	DEC	AH
 22879 00004DFD 7411                    	JZ	short IOUT
 22880 00004DFF C3                      	retn				; NON ZERO FLAG FOR OUTPUT STATUS
 22881                                  
 22882                                  IOIST:
 22883                                  	;push	word [si+15h]
 22884 00004E00 FF7415                  	PUSH	WORD [SI+SF_ENTRY.sf_position]   ; Save position
 22885                                  	;push	word [si+17h]
 22886 00004E03 FF7417                  	PUSH	WORD [SI+SF_ENTRY.sf_position+2]
 22887 00004E06 E81100                  	CALL	IOIN
 22888                                  	;pop	word [si+17h]
 22889 00004E09 8F4417                  	POP	WORD [SI+SF_ENTRY.sf_position+2] ; Restore position
 22890                                  	;pop	word [si+15h]
 22891 00004E0C 8F4415                  	POP	WORD [SI+SF_ENTRY.sf_position]
 22892 00004E0F C3                      	retn
 22893                                  
 22894                                  IOUT:
 22895 00004E10 E81B00                  	CALL	SETXADDR
 22896 00004E13 E86BF1                  	call	DOS_WRITE
 22897 00004E16 E84800                  	CALL	RESTXADDR	; If you change this into a jmp don't
 22898                                  IOUT_retn:
 22899 00004E19 C3                      	retn			; come crying to me when things don't
 22900                                  				; work ARR
 22901                                  IOIN:
 22902 00004E1A E81100                  	CALL	SETXADDR
 22903                                  					; SS override for DOS34_FLAG
 22904                                  	;OR	word [SS:DOS34_FLAG],Disable_EOF_I24	;AN000;
 22905 00004E1D E8E0EF                  	CALL	DOS_READ
 22906                                  	;AND	word [SS:DOS34_FLAG],NO_Disable_EOF_I24 ;AN000;
 22907 00004E20 09C9                    	OR	CX,CX			; Check EOF
 22908 00004E22 E83C00                  	CALL	RESTXADDR
 22909                                  					; SS override
 22910 00004E25 36A0[5E03]              	MOV	AL,[SS:DEVIOBUF]	; Get byte from trans addr
 22911 00004E29 75EE                    	jnz	short IOUT_retn	
 22912 00004E2B B01A                    	MOV	AL,1AH			; ^Z if no bytes
 22913 00004E2D C3                      	retn
 22914                                  
 22915                                  SETXADDR:
 22916                                  					; SS override
 22917 00004E2E 368F06[1803]            	POP	WORD [SS:CALLSCNT]	; Return address
 22918                                  
 22919 00004E33 E8C2C7                  	call	save_world
 22920                                  
 22921                                  					; SS override for DMAADD and THISSFT
 22922 00004E36 36FF36[DA02]            	PUSH	WORD [SS:DMAADD]	; Save Disk trans addr
 22923 00004E3B 36FF36[DC02]            	PUSH	WORD [SS:DMAADD+2]
 22924 00004E40 368C1E[3805]            	MOV	[SS:THISSFT+2],DS
 22925                                  
 22926 00004E45 16                      	push	ss
 22927 00004E46 1F                      	pop	ds
 22928                                  
 22929 00004E47 8936[3605]              	MOV	[THISSFT],SI		; Finish setting SFT pointer
 22930 00004E4B 8B0E[3403]              	MOV	CX,[IOXAD+2]
 22931 00004E4F 890E[DC02]              	MOV	[DMAADD+2],CX
 22932 00004E53 8B0E[3203]              	MOV	CX,[IOXAD]
 22933 00004E57 890E[DA02]              	MOV	[DMAADD],CX		; Set byte trans addr
 22934 00004E5B 8B0E[3603]              	MOV	CX,[IOSCNT]		; ioscnt specifies length of buffer
 22935 00004E5F EB0F                    	JMP	SHORT RESTRET		; RETURN ADDRESS
 22936                                  
 22937                                  RESTXADDR:
 22938 00004E61 8F06[1803]              	POP	WORD [CALLSCNT]		; Return address
 22939 00004E65 8F06[DC02]              	POP	WORD [DMAADD+2]		; Restore Disk trans addr
 22940 00004E69 8F06[DA02]              	POP	WORD [DMAADD]
 22941                                  
 22942 00004E6D E875C7                  	call	restore_world
 22943                                  					; SS override
 22944                                  RESTRET:
 22945 00004E70 36FF26[1803]            	JMP	WORD [SS:CALLSCNT]	; Return address
 22946                                  
 22947                                  
 22948                                  ; 29/07/2018 - Retro DOS v3.0
 22949                                  ; IBMDOS.COM (1987) - Offset 4D82h
 22950                                  
 22951                                  ;Break <DEV_OPEN_SFT, DEV_CLOSE_SFT - OPEN or CLOSE A DEVICE>
 22952                                  
 22953                                  ;----------------------------------------------------------------------------
 22954                                  ;**	Dev_Open_SFT - Open the Device for an SFT
 22955                                  ;
 22956                                  ;	Dev_Open_SFT issues an open call to the device associated with
 22957                                  ;	the SFT.
 22958                                  ;
 22959                                  ;	ENTRY	(ES:DI) = SFT
 22960                                  ;	EXIT	none
 22961                                  ;	USES	all
 22962                                  ;----------------------------------------------------------------------------
 22963                                  
 22964                                  DEV_OPEN_SFT:
 22965 00004E75 E880C7                  	call	save_world
 22966                                  	;mov	al,0Dh	
 22967 00004E78 B00D                    	MOV	AL,DEVOPN
 22968 00004E7A EB05                    	JMP	SHORT DO_OPCLS
 22969                                  
 22970                                  ;----------------------------------------------------------------------------
 22971                                  ; Procedure Name : DEV_CLOSE_SFT
 22972                                  ;
 22973                                  ; Inputs:
 22974                                  ;	ES:DI Points to SFT
 22975                                  ; Function:
 22976                                  ;	Issue a CLOSE call to the correct device
 22977                                  ; Outputs:
 22978                                  ;	None
 22979                                  ; ALL preserved
 22980                                  ;----------------------------------------------------------------------------
 22981                                  
 22982                                  DEV_CLOSE_SFT:
 22983 00004E7C E879C7                  	call	save_world
 22984                                  	;mov	al,0Eh	
 22985 00004E7F B00E                    	MOV	AL,DEVCLS
 22986                                  
 22987                                  	; Main entry for device open and close. AL contains the function 
 22988                                  	; requested. Subtlety: if Sharing is NOT loaded then we do NOT issue 
 22989                                  	; open/close to block devices. This allows networks to function but 
 22990                                  	; does NOT hang up with bogus change-line code.
 22991                                  
 22992                                  	;entry	DO_OPCLS
 22993                                  DO_OPCLS:
 22994                                  	; Is the SFT for the net?  If so, no action necessary.
 22995                                  
 22996                                  	; MSDOS 3.3
 22997                                  	;call	IsSFTNet
 22998                                  	;jnz	short OPCLS_DONE
 22999                                  
 23000                                  	; MSDOS 6.0
 23001                                  	;test	word [es:di+5],8000h
 23002 00004E81 26F745050080            	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 23003 00004E87 756A                    	JNZ	short OPCLS_DONE	; NOP on net SFTs
 23004 00004E89 30E4                    	XOR	AH,AH			; Unit
 23005                                  	;test	word [es:di+5],80h
 23006 00004E8B 26F745058000            	TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 23007                                  	;les	di,[es:di+7]
 23008 00004E91 26C47D07                	LES	DI,[ES:DI+SF_ENTRY.sf_devptr] ; Get DPB or device
 23009 00004E95 7513                    	JNZ	short GOT_DEV_ADDR
 23010                                  
 23011                                  	; We are about to call device open/close on a block driver. If no 
 23012                                  	; sharing then just short circuit to done.
 23013                                  	
 23014                                  ;;;;;	invoke	CheckShare
 23015                                  
 23016                                  	; MSDOS 3.3
 23017                                  	;call	CheckShare	; cmp byte [cs:fShare],0
 23018                                  	;jz	short OPCLS_DONE
 23019                                  
 23020                                  	; MSDOS 6.0
 23021                                  					; SS override
 23022 00004E97 36803E[B102]01          	CMP	byte [ss:fShare],1	;AN010; /NC or no SHARE
 23023 00004E9D 7654                    	JBE	short OPCLS_DONE	;AN010; yes
 23024                                  
 23025                                  	; MSDOS 3.3 (& MSDOS 6.0)
 23026                                  	;mov	ah,[es:di+1]
 23027 00004E9F 268A6501                	MOV	AH,[ES:DI+DPB.UNIT]	; (ah) = unit
 23028 00004EA3 268A0D                  	mov	cl,[es:di]
 23029                                  	;MOV	CL,[ES:DI+DPB.DRIVE]	; (cl) = drive
 23030                                  	;les	di,[es:di+12h]
 23031 00004EA6 26C47D12                	LES	DI,[ES:DI+DPB.DRIVER_ADDR] ; Get device
 23032                                  GOT_DEV_ADDR:				; ES:DI -> device
 23033                                  	;test	word [es:di+4],800h
 23034 00004EAA 26F745040008            	TEST	word [ES:DI+SYSDEV.ATT],DEVOPCL
 23035 00004EB0 7441                    	JZ	short OPCLS_DONE	; Device can't
 23036 00004EB2 06                      	PUSH	ES
 23037 00004EB3 1F                      	POP	DS
 23038 00004EB4 89FE                    	MOV	SI,DI			; DS:SI -> device
 23039                                  OPCLS_RETRY:
 23040                                  	;Context ES
 23041 00004EB6 16                      	push	ss
 23042 00004EB7 07                      	pop	es
 23043                                  					; DEVCALL is in DOSDATA
 23044 00004EB8 BF[0603]                	MOV	DI,DEVCALL
 23045                                  
 23046 00004EBB 89FB                    	MOV	BX,DI
 23047 00004EBD 50                      	PUSH	AX
 23048                                  	;mov	al,13
 23049 00004EBE B00D                    	MOV	AL,DOPCLHL
 23050 00004EC0 AA                      	STOSB				; Length
 23051 00004EC1 58                      	POP	AX
 23052 00004EC2 86E0                    	XCHG	AH,AL
 23053 00004EC4 AA                      	STOSB				; Unit
 23054 00004EC5 86E0                    	XCHG	AH,AL
 23055 00004EC7 AA                      	STOSB				; Command
 23056 00004EC8 26C7050000              	MOV	WORD [ES:DI],0		; Status
 23057 00004ECD 50                      	PUSH	AX			; Save Unit,Command
 23058                                  	;invoke	DEVIOCALL2
 23059 00004ECE E82900                  	call	DEVIOCALL2
 23060                                  
 23061                                  	;mov	di,[es:bx+3]
 23062 00004ED1 268B7F03                	MOV	DI,[ES:BX+SRHEAD.REQSTAT]
 23063                                  	;test	di,8000h
 23064                                  	;jz	short OPCLS_DONEP	
 23065 00004ED5 21FF                    	and	di,di
 23066 00004ED7 7919                    	jns	short OPCLS_DONEP	; No error
 23067                                  	;test	word [si+4],8000h
 23068                                  	; 22/11/2022 (!BugFix!)
 23069 00004ED9 F744040080              	TEST	word [SI+SYSDEV.ATT],DEVTYP
 23070 00004EDE 7404                    	JZ	short BLKDEV
 23071 00004EE0 B486                    	MOV	AH,86H			; Read error in data, Char dev
 23072 00004EE2 EB04                    	JMP	SHORT HRDERR
 23073                                  
 23074                                  BLKDEV:
 23075 00004EE4 88C8                    	MOV	AL,CL			; Drive # in AL
 23076 00004EE6 B406                    	MOV	AH,6			; Read error in data, Blk dev
 23077                                  HRDERR:
 23078                                  	;invoke	CHARHARD
 23079 00004EE8 E83F09                  	call	CHARHARD
 23080 00004EEB 3C01                    	CMP	AL,1
 23081 00004EED 7503                    	JNZ	short OPCLS_DONEP	; IGNORE or FAIL
 23082                                  					;  Note that FAIL is essentually IGNORED
 23083 00004EEF 58                      	POP	AX			; Get back Unit, Command
 23084 00004EF0 EBC4                    	JMP	short OPCLS_RETRY
 23085                                  
 23086                                  OPCLS_DONEP:
 23087 00004EF2 58                      	POP	AX			; Clean stack
 23088                                  OPCLS_DONE:
 23089 00004EF3 E8EFC6                  	call	restore_world
 23090 00004EF6 C3                      	retn
 23091                                  
 23092                                  ;Break	<DEVIOCALL, DEVIOCALL2 - CALL A DEVICE>
 23093                                  ;----------------------------------------------------------------------------
 23094                                  ;**	DevIoCall  - Call Device
 23095                                  ;
 23096                                  ;	ENTRY	DS:SI Points to device SFT
 23097                                  ;		ES:BX Points to request data
 23098                                  ;	EXIT	DS:SI -> Device driver
 23099                                  ;	USES	DS:SI,AX
 23100                                  ;----------------------------------------------------------------------------
 23101                                  ;**	DevIoCall2 - Call Device
 23102                                  ;
 23103                                  ;	ENTRY	DS:SI Points to DPB
 23104                                  ;		ES:BX Points to request data
 23105                                  ;	EXIT	DS:SI -> Device driver
 23106                                  ;	USES	DS:SI,AX
 23107                                  ;----------------------------------------------------------------------------
 23108                                  
 23109                                  DEVIOCALL:
 23110                                  					; SS override for CALLSSEC, 
 23111                                  	;lds	si,[si+7]		; CALLNEWSC, HIGH_SECTOR & CALLDEVAD
 23112 00004EF7 C57407                  	LDS	SI,[SI+SF_ENTRY.sf_devptr]
 23113                                  
 23114                                  	;entry	DEVIOCALL2
 23115                                  DEVIOCALL2:
 23116                                  	;EnterCrit critDevice
 23117 00004EFA E87FD1                  	call	EcritDevice
 23118                                  
 23119                                  	; MSDOS 6.0
 23120                                  	;TEST	word [SI+SYSDEV.ATT],DevTyp ;AN000; >32mb   block device ?
 23121                                  	;JNZ	short chardev2		;AN000; >32mb   no
 23122                                  	;CMP	byte [ES:BX+SRHEAD.REQFUNC],DEVRD  ;AN000; >32mb   read ?
 23123                                  	;JZ	short chkext		;AN000; >32mb   yes
 23124                                  	;CMP	byte [ES:BX+SRHEAD.REQFUNC],DEVWRT ;AN000; >32mb   write ?
 23125                                  	;JZ	short chkex		;AN000; >32mb   yes
 23126                                  	;CMP	byte [ES:BX+SRHEAD.REQFUNC],DEVWRTV
 23127                                  	;				;AN000; >32mb   write/verify ?
 23128                                  	;JNZ	short chardev2		;AN000; >32mb   no
 23129                                  ;chkext:
 23130                                  	;CALL	RW_SC			;AN000;LB. use secondary cache if there
 23131                                  	;JC	short dev_exit		;AN000;LB. done
 23132                                  	;
 23133                                  	;TEST	word [SI+SYSDEV.ATT],EXTDRVR ;AN000;>32mb   extended driver?
 23134                                  	;JZ	short chksector		;AN000;>32mb   no
 23135                                  	;ADD	BYTE [ES:BX],8		;AN000;>32mb   make length to 30
 23136                                  	;MOV	AX,[SS:CALLSSEC]	;AN000;>32mb
 23137                                  	;MOV	[SS:CALLSSEC],-1	;AN000;>32mb   old sector  =-1
 23138                                  	;MOV	[SS:CALLNEWSC],AX	;AN000;>32mb   new sector  =
 23139                                  	;MOV	AX,[SS:HIGH_SECTOR]	;AN000; >32mb  low sector,high sector
 23140                                  	;MOV	[SS:CALLNEWSC+2],AX	;AN000; >32mb
 23141                                  	;JMP	short chardev2		;AN000; >32mb
 23142                                  ;chksector:				;AN000; >32mb
 23143                                  	;CMP	word [SS:HIGH_SECTOR],0	;AN000; >32mb   if >32mb
 23144                                  	;JZ	short chardev2		;AN000; >32mb   then fake error
 23145                                  	;MOV	word [ES:BX+SRHEAD.REQSTAT],STERR+STDON+ERROR_I24_NOT_DOS_DISK 
 23146                                  	;				;AN000; >32mb
 23147                                  	;JMP	SHORT dev_exit		;AN000; >32mb
 23148                                  
 23149                                  ;chardev2:				;AN000;
 23150                                  
 23151                                  	; As above only DS:SI points to device header on entry, and DS:SI is 
 23152                                  	; preserved
 23153                                  
 23154                                  	;mov	ax,[si+6]
 23155 00004EFD 8B4406                  	MOV	AX,[SI+SYSDEV.STRAT]
 23156 00004F00 36A3[2003]              	MOV	[SS:CALLDEVAD],AX
 23157 00004F04 368C1E[2203]            	MOV	[SS:CALLDEVAD+2],DS
 23158 00004F09 36FF1E[2003]            	CALL	far [SS:CALLDEVAD]
 23159                                  	;mov	ax,[si+8]
 23160 00004F0E 8B4408                  	MOV	AX,[SI+SYSDEV.INT]
 23161 00004F11 36A3[2003]              	MOV	[SS:CALLDEVAD],AX
 23162 00004F15 36FF1E[2003]            	CALL	far [SS:CALLDEVAD]
 23163                                  	; MSDOS 6.0
 23164                                  	;CALL	VIRREAD 		;AN000;LB. move data from SC to buffer
 23165                                  	;JC	short chardev2		;AN000;LB. bad sector or exceeds max sec
 23166                                  dev_exit:
 23167                                  	;LeaveCrit critDevice
 23168 00004F1A E867D1                  	call	LcritDevice
 23169 00004F1D C3                      	retn
 23170                                  
 23171                                  ;Break	<SETREAD, SETWRITE -- SET UP HEADER BLOCK>
 23172                                  ;---------------------------------------------------------------------------
 23173                                  ;
 23174                                  ; Procedure Name : SETREAD, SETWRITE
 23175                                  ;
 23176                                  ; Inputs:
 23177                                  ;	DS:BX = Transfer Address
 23178                                  ;	CX = Record Count
 23179                                  ;	DX = Starting Record
 23180                                  ;	AH = Media Byte
 23181                                  ;	AL = Unit Code
 23182                                  ; Function:
 23183                                  ;	Set up the device call header at DEVCALL
 23184                                  ; Output:
 23185                                  ;	ES:BX Points to DEVCALL
 23186                                  ; No other registers effected
 23187                                  ;
 23188                                  ;---------------------------------------------------------------------------
 23189                                  
 23190                                  SETREAD:
 23191 00004F1E 57                      	PUSH	DI
 23192 00004F1F 51                      	PUSH	CX
 23193 00004F20 50                      	PUSH	AX
 23194 00004F21 B104                    	MOV	CL,DEVRD ; mov cl,4
 23195                                  SETCALLHEAD:
 23196 00004F23 B016                    	MOV	AL,DRDWRHL ; mov al,16h
 23197 00004F25 16                      	PUSH	SS
 23198 00004F26 07                      	POP	ES
 23199                                  					; DEVCALL is in DOSDATA
 23200 00004F27 BF[0603]                	MOV	DI,DEVCALL
 23201                                  
 23202 00004F2A AA                      	STOSB				; length
 23203 00004F2B 58                      	POP	AX
 23204 00004F2C AA                      	STOSB				; Unit
 23205 00004F2D 50                      	PUSH	AX
 23206 00004F2E 88C8                    	MOV	AL,CL
 23207 00004F30 AA                      	STOSB				; Command code
 23208 00004F31 31C0                    	XOR	AX,AX
 23209 00004F33 AB                      	STOSW				; Status
 23210 00004F34 83C708                  	ADD	DI,8			; Skip link fields
 23211 00004F37 58                      	POP	AX
 23212 00004F38 86E0                    	XCHG	AH,AL
 23213 00004F3A AA                      	STOSB				; Media byte
 23214 00004F3B 86C4                    	XCHG	AL,AH
 23215 00004F3D 50                      	PUSH	AX
 23216 00004F3E 89D8                    	MOV	AX,BX
 23217 00004F40 AB                      	STOSW
 23218 00004F41 8CD8                    	MOV	AX,DS
 23219 00004F43 AB                      	STOSW				; Transfer addr
 23220 00004F44 59                      	POP	CX			; Real AX
 23221 00004F45 58                      	POP	AX			; Real CX
 23222 00004F46 AB                      	STOSW				; Count
 23223 00004F47 92                      	XCHG	AX,DX			; AX=Real DX, DX=real CX, CX=real AX
 23224 00004F48 AB                      	STOSW				; Start
 23225 00004F49 91                      	XCHG	AX,CX
 23226 00004F4A 87D1                    	XCHG	DX,CX
 23227 00004F4C 5F                      	POP	DI
 23228                                  					; DEVCALL is in DOSDATA
 23229 00004F4D BB[0603]                	MOV	BX,DEVCALL
 23230 00004F50 C3                      	retn
 23231                                  
 23232                                  	;entry	SETWRITE
 23233                                  SETWRITE:
 23234                                  
 23235                                  ; Inputs:
 23236                                  ;	DS:BX = Transfer Address
 23237                                  ;	CX = Record Count
 23238                                  ;	DX = Starting Record
 23239                                  ;	AH = Media Byte
 23240                                  ;	AL = Unit Code
 23241                                  ; Function:
 23242                                  ;	Set up the device call header at DEVCALL
 23243                                  ; Output:
 23244                                  ;	ES:BX Points to DEVCALL
 23245                                  ; No other registers effected
 23246                                  
 23247 00004F51 57                      	PUSH	DI
 23248 00004F52 51                      	PUSH	CX
 23249 00004F53 50                      	PUSH	AX
 23250 00004F54 B108                    	MOV	CL,DEVWRT ; mov cl,8
 23251 00004F56 36020E[AD02]            	ADD	CL,[SS:VERFLG]		; SS override
 23252 00004F5B EBC6                    	JMP	SHORT SETCALLHEAD
 23253                                  
 23254                                  ;Break	<RW_SC -- Read Write Secondary Cache>
 23255                                  ;---------------------------------------------------------------------------
 23256                                  ;
 23257                                  ; Procedure Name : RW_SC
 23258                                  ;
 23259                                  ; Inputs:
 23260                                  ;	 [SC_CACHE_COUNT]= secondary cache count
 23261                                  ;	 [SC_STATUS]= SC validity status
 23262                                  ;	 [SEQ_SECTOR]= last sector read
 23263                                  ; Function:
 23264                                  ;	Read from or write through secondary cache
 23265                                  ; Output:
 23266                                  ;	ES:BX Points to DEVCALL
 23267                                  ;	carry clear, I/O is not done
 23268                                  ;		     [SC_FLAG]=1 if continuos sectors will be read
 23269                                  ;	carry set, I/O is done
 23270                                  ;
 23271                                  ;----------------------------------------------------------------------------
 23272                                  
 23273                                  ;procedure   RW_SC,NEAR		;AN000;
 23274                                  ;
 23275                                  ;	; SS override for all variables used.
 23276                                  ;
 23277                                  ;	CMP	[SC_CACHE_COUNT],0	;AN000;LB. secondary cache exists?
 23278                                  ;	JZ	scexit4 		;AN000;LB. no, do nothing
 23279                                  ;	CMP	[CALLSCNT],1		;AN000;LB. sector count = 1 (buffer I/O)
 23280                                  ;	JNZ	scexit4 		;AN000;LB. no, do nothing
 23281                                  ;	PUSH	CX			    ;AN000;;LB.
 23282                                  ;	PUSH	DX			    ;AN000;;LB. yes
 23283                                  ;	PUSH	DS			    ;AN000;;LB. save registers
 23284                                  ;	PUSH	SI			    ;AN000;;LB.
 23285                                  ;	PUSH	ES			    ;AN000;;LB.
 23286                                  ;	PUSH	DI			    ;AN000;;LB.
 23287                                  ;	MOV	DX,WORD PTR [CALLSSEC]	    ;AN000;;LB.  starting sector
 23288                                  ;	CMP	BYTE PTR [DEVCALL.REQFUNC],DEVRD ;AN000;LB. read ?
 23289                                  ;	JZ	doread			    ;AN000;LB. yes
 23290                                  ;	CALL	INVALIDATE_SC		    ;AN000;LB. invalidate SC
 23291                                  ;	JMP	scexit2 		    ;AN000;LB. back to normal
 23292                                  ;scexit4:				    ;AN000;
 23293                                  ;	CLC				    ;AN000;LB. I/O not done yet
 23294                                  ;	return				    ;AN000;LB.
 23295                                  ;doread: 				    ;AN000;
 23296                                  ;	CALL	SC2BUF			    ;AN000;LB. check if in SC
 23297                                  ;	JC	readSC			    ;AN000;LB.
 23298                                  ;	MOV	[DEVCALL.REQSTAT],STDON     ;AN000;LB. fake done and ok
 23299                                  ;	STC				    ;AN000;LB. set carry
 23300                                  ;	JMP	short saveseq 		    ;AN000;LB. save seq. sector #
 23301                                  ;readSC: 				    ;AN000;
 23302                                  ;	MOV	AX,WORD PTR [HIGH_SECTOR]   ;AN000;;LB. subtract sector num from
 23303                                  ;	MOV	CX,WORD PTR [CALLSSEC]	    ;AN000;;LB. saved sequential sector
 23304                                  ;	SUB	CX,WORD PTR [SEQ_SECTOR]    ;AN000;;LB. number
 23305                                  ;	SBB	AX,WORD PTR [SEQ_SECTOR+2]  ;AN000;;LB.
 23306                                  ;	CMP	AX,0			    ;AN000;;LB. greater than 64K
 23307                                  ;	JNZ	saveseq2		    ;AN000;;LB. yes,save seq. sector #
 23308                                  ;chklow: 						
 23309                                  ;	CMP	CX,1			    ;AN000;;LB. <= 1
 23310                                  ;	JA	saveseq2		    ;AN000;;LB. no, not sequential
 23311                                  ;	MOV	[SC_STATUS],-1		    ;AN000;;LB. prsume all SC valid
 23312                                  ;	MOV	AX,[SC_CACHE_COUNT]	    ;AN000;;LB. yes, sequential
 23313                                  ;	MOV	[CALLSCNT],AX		    ;AN000;;LB. read continuous sectors
 23314                                  ;readsr:
 23315                                  ;	MOV	AX,WORD PTR [CALLXAD+2]     ;AN000;;LB. save buffer addr
 23316                                  ;	MOV	[TEMP_VAR2],AX		    ;AN000;;LB. in temp vars
 23317                                  ;	MOV	AX,WORD PTR [CALLXAD]	    ;AN000;;LB.
 23318                                  ;	MOV	[TEMP_VAR],AX		    ;AN000;;LB.
 23319                                  ;						
 23320                                  ;	MOV	AX,WORD PTR [SC_CACHE_PTR]  ;AN000;LB. use SC cache addr as
 23321                                  ;	MOV	WORD PTR [CALLXAD],AX	    ;AN000;LB. transfer addr
 23322                                  ;	MOV	AX,WORD PTR [SC_CACHE_PTR+2] ;AN000;LB.
 23323                                  ;	MOV	WORD PTR [CALLXAD+2],AX     ;AN000;LB.
 23324                                  ;	MOV	[SC_FLAG],1		    ;AN000;LB. flag it for later;
 23325                                  ;	MOV	AL,[SC_DRIVE]		    ;AN000;;LB. current drive
 23326                                  ;	MOV	[CURSC_DRIVE],AL	    ;AN000;;LB. set current drive
 23327                                  ;	MOV	AX,WORD PTR [CALLSSEC]	    ;AN000;;LB. current sector
 23328                                  ;	MOV	[CURSC_SECTOR],AX	    ;AN000;;LB. set current sector
 23329                                  ;	MOV	AX,WORD PTR [HIGH_SECTOR]   ;AN000;;LB.
 23330                                  ;	MOV	[CURSC_SECTOR+2],AX	    ;AN000;;LB.
 23331                                  ;saveseq2:				    ;AN000;
 23332                                  ;	CLC				    ;AN000;LB. clear carry
 23333                                  ;saveseq:				    ;AN000;	
 23334                                  ;	MOV	AX,[HIGH_SECTOR]	    ;AN000;LB. save current sector #
 23335                                  ;	MOV	WORD PTR [SEQ_SECTOR+2],AX  ;AN000;LB. for access mode ref.
 23336                                  ;	MOV	AX,[CALLSSEC]		    ;AN000;LB.	
 23337                                  ;	MOV	WORD PTR [SEQ_SECTOR],AX    ;AN000;LB.	
 23338                                  ;	JMP	short scexit 		    ;AN000;LB.	
 23339                                  ;						
 23340                                  ;scexit2:				    ;AN000;LB.
 23341                                  ;	CLC				    ;AN000;LB.	clear carry
 23342                                  ;scexit: 				    ;AN000;		
 23343                                  ;	POP	DI			    ;AN000;;LB.
 23344                                  ;	POP	ES			    ;AN000;;LB. restore registers
 23345                                  ;	POP	SI			    ;AN000;;LB.
 23346                                  ;	POP	DS			    ;AN000;;LB.
 23347                                  ;	POP	DX			    ;AN000;;LB.
 23348                                  ;	POP	CX			    ;AN000;;LB.
 23349                                  ;	return				    ;AN000;;LB.
 23350                                  ;							
 23351                                  ;EndProc RW_SC				    ;AN000;
 23352                                  
 23353                                  ;Break	<IN_SC -- check if in secondary cache>
 23354                                  ;--------------------------------------------------------------------------
 23355                                  ;
 23356                                  ; Procedure Name : IN_SC
 23357                                  ;
 23358                                  ; Inputs:  [SC_DRIVE]= requesting drive
 23359                                  ;	   [CURSC_DRIVE]= current SC drive
 23360                                  ;	   [CURSC_SECTOR] = starting scetor # of SC
 23361                                  ;	   [SC_CACHE_COUNT] = SC count
 23362                                  ;	   [HIGH_SECTOR]:DX= sector number
 23363                                  ; Function:
 23364                                  ;	Check if the sector is in secondary cache
 23365                                  ; Output:
 23366                                  ;	carry clear, in SC
 23367                                  ;	   CX= the index in the secondary cache
 23368                                  ;	carry set, not in SC
 23369                                  ;
 23370                                  ;---------------------------------------------------------------------------
 23371                                  
 23372                                  ;procedure   IN_SC,NEAR		    ;AN000;
 23373                                  ;
 23374                                  ;	; SS override for all variables used
 23375                                  ;
 23376                                  ;	MOV	AL,[SC_DRIVE]		    ;AN000;;LB. current drive
 23377                                  ;	CMP	AL,[CURSC_DRIVE]	    ;AN000;;LB. same as SC drive
 23378                                  ;	JNZ	outrange2		    ;AN000;;LB. no
 23379                                  ;	MOV	AX,WORD PTR [HIGH_SECTOR]   ;AN000;;LB. subtract sector num from
 23380                                  ;	MOV	CX,DX			    ;AN000;;LB. secondary starting sector
 23381                                  ;	SUB	CX,WORD PTR [CURSC_SECTOR]    ;AN000;;LB. number
 23382                                  ;	SBB	AX,WORD PTR [CURSC_SECTOR+2]  ;AN000;;LB.
 23383                                  ;	CMP	AX,0			    ;AN000;;LB. greater than 64K
 23384                                  ;	JNZ	outrange2		    ;AN000;;LB. yes
 23385                                  ;	CMP	CX,[SC_CACHE_COUNT]	    ;AN000;;LB. greater than SC count
 23386                                  ;	JAE	outrange2		    ;AN000;;LB. yes
 23387                                  ;	CLC				    ;AN000;;LB. clear carry
 23388                                  ;	JMP	short inexit		    ;AN000;;LB. in SC
 23389                                  ;outrange2:				    ;AN000;;LB. set carry
 23390                                  ;	STC				    ;AN000;;LB.
 23391                                  ;inexit: 				    ;AN000;;LB.
 23392                                  ;	return				    ;AN000;;LB.
 23393                                  ;
 23394                                  ;EndProc IN_SC				    ;AN000;
 23395                                  
 23396                                  ;Break	<INVALIDATE_SC - invalide secondary cache>
 23397                                  ;---------------------------------------------------------------------------
 23398                                  ;
 23399                                  ; Procedure Name : Invalidate_Sc
 23400                                  ;
 23401                                  ; Inputs:  [SC_DRIVE]= requesting drive
 23402                                  ;	   [CURSC_DRIVE]= current SC drive
 23403                                  ;	   [CURSC_SECTOR] = starting scetor # of SC
 23404                                  ;	   [SC_CACHE_COUNT] = SC count
 23405                                  ;	   [SC_STAUS] = SC status word
 23406                                  ;	   [HIGH_SECTOR]:DX= sector number
 23407                                  ;
 23408                                  ; Function:
 23409                                  ;	invalidate secondary cache if in there
 23410                                  ; Output:
 23411                                  ;	[SC_STATUS] is updated
 23412                                  ;---------------------------------------------------------------------------
 23413                                  
 23414                                  ;procedure   INVALIDATE_SC,NEAR	    ;AN000;
 23415                                  ;
 23416                                  ;	; SS override for all variables used
 23417                                  ;
 23418                                  ;	CALL	IN_SC			    ;AN000;;LB. in secondary cache
 23419                                  ;	JC	outrange		    ;AN000;;LB. no
 23420                                  ;	MOV	AX,1			    ;AN000;;LB. invalidate the sector
 23421                                  ;	SHL	AX,CL			    ;AN000;;LB. in the secondary cache
 23422                                  ;	NOT	AX			    ;AN000;;LB.
 23423                                  ;	AND	[SC_STATUS],AX		    ;AN000;;LB. save the status
 23424                                  ;outrange:				    ;AN000;;LB.
 23425                                  ;	return				    ;AN000;;LB.
 23426                                  ;
 23427                                  ;EndProc INVALIDATE_SC			    ;AN000;
 23428                                  
 23429                                  
 23430                                  ;Break	<VIRREAD- virtually read data into buffer>
 23431                                  ;--------------------------------------------------------------------------
 23432                                  ;
 23433                                  ; Procedure Name : SC_FLAG
 23434                                  ;
 23435                                  ; Inputs:  SC_FLAG = 0 , no sectors were read into SC
 23436                                  ;		     1, continous sectors were read into SC
 23437                                  ; Function:
 23438                                  ;	   Move data from SC to buffer
 23439                                  ; Output:
 23440                                  ;	 carry clear, data is moved to buffer
 23441                                  ;	 carry set, bad sector or exceeds maximum sector
 23442                                  ;	   SC_FLAG =0
 23443                                  ;	   CALLSCNT=1
 23444                                  ;	   SC_STATUS= -1 if succeeded
 23445                                  ;     
 23446                                  ;		       0 if failed
 23447                                  ;--------------------------------------------------------------------------
 23448                                  
 23449                                  ;procedure   VIRREAD,NEAR	    ;AN000;
 23450                                  ;
 23451                                  ;	; SS override for all variables used
 23452                                  ;
 23453                                  ;	CMP	[SC_FLAG],0		    ;AN000;;LB.  from SC fill
 23454                                  ;	JZ	sc2end			    ;AN000;;LB.  no
 23455                                  ;	MOV	AX,[TEMP_VAR2]		    ;AN000;;LB. restore buffer addr
 23456                                  ;	MOV	WORD PTR [CALLXAD+2],AX     ;AN000;;LB.
 23457                                  ;	MOV	AX,[TEMP_VAR]		    ;AN000;;LB.
 23458                                  ;	MOV	WORD PTR [CALLXAD],AX	    ;AN000;;LB.
 23459                                  ;	MOV	[SC_FLAG],0		    ;AN000;;LB.  reset sc_flag
 23460                                  ;	MOV	[CALLSCNT],1		    ;AN000;;LB.  one sector transferred
 23461                                  ;
 23462                                  ;	TESTB	[DEVCALL.REQSTAT],STERR     ;AN000;;LB.  error?
 23463                                  ;	JNZ	scerror 		    ;AN000;;LB. yes
 23464                                  ;	PUSH	DS			    ;AN000;;LB.
 23465                                  ;	PUSH	SI			    ;AN000;;LB.
 23466                                  ;	PUSH	ES			    ;AN000;;LB.
 23467                                  ;	PUSH	DI			    ;AN000;;LB.
 23468                                  ;	PUSH	DX			    ;AN000;;LB.
 23469                                  ;	PUSH	CX			    ;AN000;;LB.
 23470                                  ;	XOR	CX,CX			    ;AN000;;LB. we want first sector in SC
 23471                                  ;	CALL	SC2BUF2 		    ;AN000;;LB. move data from SC to buffer
 23472                                  ;	POP	CX			    ;AN000;;LB.
 23473                                  ;	POP	DX			    ;AN000;;LB.
 23474                                  ;	POP	DI			    ;AN000;;LB.
 23475                                  ;	POP	ES			    ;AN000;;LB.
 23476                                  ;	POP	SI			    ;AN000;;LB.
 23477                                  ;	POP	DS			    ;AN000;;LB.
 23478                                  ;	JMP	SHORT sc2end		    ;AN000;;LB. return
 23479                                  ;
 23480                                  ;scerror:				    ;AN000;
 23481                                  ;	MOV	[CALLSCNT],1		    ;AN000;;LB. reset sector count to 1
 23482                                  ;	MOV	[SC_STATUS],0		    ;AN000;;LB. invalidate all SC sectors
 23483                                  ;	MOV	[CURSC_DRIVE],-1	    ;AN000;;LB. invalidate drive
 23484                                  ;	STC				    ;AN000;;LB. carry set
 23485                                  ;	return				    ;AN000;;LB.
 23486                                  ;
 23487                                  ;sc2end: 				    ;AN000;
 23488                                  ;	CLC				    ;AN000;;LB. carry clear
 23489                                  ;	return				    ;AN000;;LB.
 23490                                  ;
 23491                                  ;EndProc VIRREAD 			    ;AN000;
 23492                                  
 23493                                  ;Break	<SC2BUF- move data from SC to buffer>
 23494                                  ;----------------------------------------------------------------------------
 23495                                  ;
 23496                                  ; Procedure Name : SC2BUF
 23497                                  ;
 23498                                  ; Inputs:  [SC_STATUS] = SC validity status
 23499                                  ;	   [SC_SECTOR_SIZE] = request sector size
 23500                                  ;	   [SC_CACHE_PTR] = pointer to SC
 23501                                  ; Function:
 23502                                  ;	   Move data from SC to buffer
 23503                                  ; Output:
 23504                                  ;	   carry clear, in SC  and data is moved
 23505                                  ;	   carry set, not in SC and data is not moved
 23506                                  ;---------------------------------------------------------------------------
 23507                                  
 23508                                  ;procedure   SC2BUF,NEAR 	    ;AN000;
 23509                                  ;
 23510                                  ;	; SS override for all variables used
 23511                                  ;
 23512                                  ;	CALL	IN_SC			    ;AN000;;LB. in secondary cache
 23513                                  ;	JC	noSC			    ;AN000;;LB. no
 23514                                  ;	MOV	AX,1			    ;AN000;;LB. check if valid sector
 23515                                  ;	SHL	AX,CL			    ;AN000;;LB. in the secondary cache
 23516                                  ;	TEST	[SC_STATUS],AX		    ;AN000;;LB.
 23517                                  ;	JZ	noSC			    ;AN000;;LB. invalid
 23518                                  ;entry SC2BUF2				    ;AN000;
 23519                                  ;	MOV	AX,CX			    ;AN000;;LB. times index with
 23520                                  ;	MUL	[SC_SECTOR_SIZE]	    ;AN000;;LB. sector size
 23521                                  ;	ADD	AX,WORD PTR [SC_CACHE_PTR]  ;AN000;;LB. add SC starting addr
 23522                                  ;	ADC	DX,WORD PTR [SC_CACHE_PTR+2];AN000;;LB.
 23523                                  ;	MOV	DS,DX			    ;AN000;    ;LB. DS:SI-> SC sector addr
 23524                                  ;	MOV	SI,AX			    ;AN000;    ;LB.
 23525                                  ;	MOV	ES,WORD PTR [CALLXAD+2]     ;AN000;    ;LB. ES:DI-> buffer addr
 23526                                  ;	MOV	DI,WORD PTR [CALLXAD]	    ;AN000;    ;LB.
 23527                                  ;	MOV	CX,[SC_SECTOR_SIZE]	    ;AN000;    ;LB. count= sector size
 23528                                  ;	SHR	CX,1			    ;AN000;    ;LB. may use DWORD move for 386
 23529                                  ;entry MOVWORDS				    ;AN000;
 23530                                  ;	CMP	[DDMOVE],0		    ;AN000;    ;LB. 386 ?
 23531                                  ;	JZ	nodd			    ;AN000;    ;LB. no
 23532                                  ;	SHR	CX,1			    ;AN000;    ;LB. words/2
 23533                                  ;	DB	66H			    ;AN000;    ;LB. use double word move
 23534                                  ;nodd:
 23535                                  ;	REP	MOVSW			    ;AN000;    ;LB. move to buffer
 23536                                  ;	CLC				    ;AN000;    ;LB. clear carry
 23537                                  ;	return				    ;AN000;    ;LB. exit
 23538                                  ;noSC:					    ;AN000;
 23539                                  ;	STC				    ;AN000;    ;LB. set carry
 23540                                  ;sexit:					    ;AN000;
 23541                                  ;	return				    ;AN000;    ;LB.
 23542                                  ;
 23543                                  ;EndProc SC2BUF
 23544                                  
 23545                                  
 23546                                  ;============================================================================
 23547                                  ; MKNODE.ASM, MSDOS 6.0, 1991
 23548                                  ;============================================================================
 23549                                  ; 29/07/2018 - Retro DOS v3.0
 23550                                  
 23551                                  ;	TITLE	MKNODE - Node maker
 23552                                  ;	NAME	MKNODE
 23553                                  
 23554                                  ;**	MKNODE.ASM
 23555                                  ;
 23556                                  ;	Low level routines for making a new local file system node
 23557                                  ;	and filling in an SFT from a directory entry
 23558                                  ;
 23559                                  ;	BUILDDIR
 23560                                  ;	SETDOTENT
 23561                                  ;	MakeNode
 23562                                  ;	NEWENTRY
 23563                                  ;	FREEENT
 23564                                  ;	NEWDIR
 23565                                  ;	DOOPEN
 23566                                  ;	RENAME_MAKE
 23567                                  ;	CHECK_VIRT_OPEN
 23568                                  ;
 23569                                  ;	Revision history:
 23570                                  ;
 23571                                  ;	 AN000	version 4.0  Jan. 1988
 23572                                  ;	 A004	PTM 3680  --- Make SFT NAME field offset same as 3.30
 23573                                  
 23574                                  ;Break   <BUILDDIR,NEWDIR -- ALLOCATE DIRECTORIES>
 23575                                  ;----------------------------------------------------------------------------
 23576                                  ;
 23577                                  ; Procedure Name : BUILDDIR,NEWDIR
 23578                                  ;
 23579                                  ; Inputs:
 23580                                  ;       ES:BP Points to DPB
 23581                                  ;       [THISSFT] Set if using NEWDIR entry point
 23582                                  ;               (used by ALLOCATE)
 23583                                  ;       [LASTENT] current last valid entry number in directory if no free
 23584                                  ;               entries
 23585                                  ;       [DIRSTART] Points to first cluster of dir (0 means root)
 23586                                  ; Function:
 23587                                  ;       Grow directory if no free entries and not root
 23588                                  ; Outputs:
 23589                                  ;       CARRY SET IF FAILURE
 23590                                  ;       ELSE
 23591                                  ;          AX entry number of new entry
 23592                                  ;          If a new dir [DIRSTART],[CLUSFAC],[CLUSNUM],[DIRSEC] set
 23593                                  ;               AX = first entry of new dir
 23594                                  ;       GETENT should be called to set [LASTENT]
 23595                                  ;
 23596                                  ;----------------------------------------------------------------------------
 23597                                  
 23598                                  BUILDDIR:
 23599                                  	; 29/07/2018 - Retro DOS v3.0
 23600                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 4E66h
 23601                                  
 23602 00004F5D A1[6A05]                        MOV     AX,[ENTFREE]
 23603 00004F60 83F8FF                          CMP     AX,-1
 23604 00004F63 7402                            JZ	short CHECK_IF_ROOT
 23605 00004F65 F8                              CLC
 23606 00004F66 C3                              retn
 23607                                  
 23608                                  CHECK_IF_ROOT:
 23609 00004F67 833E[5805]00                    CMP     word [DIRSTART],0
 23610 00004F6C 7502                            JNZ	short NEWDIR
 23611 00004F6E F9                              STC
 23612                                  builddir_retn:
 23613 00004F6F C3                              retn				; Can't grow root
 23614                                  
 23615                                  	;entry   NEWDIR
 23616                                  NEWDIR:        
 23617 00004F70 8B1E[5805]              	MOV     BX,[DIRSTART]
 23618 00004F74 09DB                            OR      BX,BX
 23619 00004F76 7405                            JZ	short NULLDIR
 23620 00004F78 E89A05                  	call	GETEOF
 23621 00004F7B 72F2                            jc	short builddir_retn	; Screw up
 23622                                  NULLDIR:
 23623 00004F7D B90100                          MOV     CX,1
 23624 00004F80 E8BF04                  	call	ALLOCATE
 23625 00004F83 72EA                            jc	short  builddir_retn
 23626 00004F85 8B16[5805]                      MOV     DX,[DIRSTART]
 23627 00004F89 09D2                            OR      DX,DX
 23628 00004F8B 750D                            JNZ	short ADDINGDIR
 23629 00004F8D E850F8                  	call	SETDIRSRCH
 23630 00004F90 72DD                            jc	short  builddir_retn
 23631 00004F92 C706[F402]FFFF                  MOV     word [LASTENT],-1
 23632 00004F98 EB2B                            JMP     SHORT GOTDIRREC
 23633                                  ADDINGDIR:
 23634 00004F9A 53                              PUSH    BX
 23635 00004F9B 8B1E[5405]                      MOV     BX,[CLUSNUM]
 23636 00004F9F E8940A                          call	IsEOF
 23637 00004FA2 5B                              POP     BX
 23638 00004FA3 7219                            JB	short NOTFIRSTGROW
 23639                                  ;;;; 10/17/86 update CLUSNUM in the fastopen cache
 23640 00004FA5 891E[5405]                      MOV     [CLUSNUM],BX
 23641 00004FA9 51                              PUSH    CX
 23642 00004FAA 50                              PUSH    AX
 23643 00004FAB 55                              PUSH    BP
 23644 00004FAC B401                            MOV     AH,1			; CLUSNUM update
 23645                                  	;mov	dl,[es:bp+0]
 23646 00004FAE 268A5600                	mov	dl,[ES:BP] ; 09/09/2018
 23647                                          ;MOV	DL,[ES:BP+DPB.DRIVE]	; drive #
 23648 00004FB2 8B0E[5805]                      MOV     CX,[DIRSTART]		; first cluster #
 23649 00004FB6 89DD                            MOV     BP,BX 			; CLUSNUM
 23650 00004FB8 E854E4                  	call	FastOpen_Update
 23651 00004FBB 5D                              POP     BP
 23652 00004FBC 58                              POP     AX
 23653 00004FBD 59                              POP     CX
 23654                                  
 23655                                  ;;;; 10/17/86 update CLUSNUM in the fastopen cache
 23656                                  NOTFIRSTGROW:
 23657 00004FBE 89DA                            MOV     DX,BX
 23658 00004FC0 30DB                            XOR     BL,BL
 23659 00004FC2 E86C04                  	call	FIGREC
 23660                                  GOTDIRREC:
 23661                                  	;mov	cl,[es:bp+4]
 23662 00004FC5 268A4E04                        MOV     CL,[ES:BP+DPB.CLUSTER_MASK]
 23663 00004FC9 FEC1                            INC     CL
 23664 00004FCB 30ED                            XOR     CH,CH
 23665                                  ZERODIR:
 23666 00004FCD 51                              PUSH    CX
 23667                                  	;mov	byte [ALLOWED],18h
 23668 00004FCE C606[F702]18                    MOV     byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 23669 00004FD3 B0FF                            MOV     AL,0FFH
 23670 00004FD5 E8AD0E                          call	GETBUFFR
 23671 00004FD8 7302                            JNC	short GET_SSIZE
 23672 00004FDA 59                              POP     CX
 23673 00004FDB C3                              retn
 23674                                  
 23675                                  GET_SSIZE:
 23676                                  	;mov	cx,[es:bp+2]
 23677 00004FDC 268B4E02                        MOV     CX,[ES:BP+DPB.SECTOR_SIZE]
 23678 00004FE0 06                              PUSH    ES
 23679 00004FE1 C43E[7405]                      LES     DI,[CURBUF]
 23680                                  	;or	byte [es:di+5],4
 23681 00004FE5 26804D0504                      OR      byte [ES:DI+BUFFINFO.buf_flags],buf_isDIR
 23682 00004FEA 57                              PUSH    DI
 23683                                  	;add	di,16
 23684 00004FEB 83C710                          ADD     DI,BUFINSIZ
 23685 00004FEE 31C0                            XOR     AX,AX
 23686 00004FF0 D1E9                            SHR     CX,1
 23687 00004FF2 F3AB                            REP     STOSW
 23688 00004FF4 7301                            JNC	short EVENZ
 23689 00004FF6 AA                              STOSB
 23690                                  EVENZ:
 23691 00004FF7 5F                              POP     DI
 23692                                  
 23693                                  	; MSDOS 6.0
 23694                                  	;TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 23695                                  	;				;LB. if already dirty		  ;AN000;
 23696                                          ;JNZ	short _yesdirty_	;LB.  don't increment dirty count ;AN000;
 23697                                          ;call	INC_DIRTY_COUNT		;LB. 				  ;AN000;
 23698                                          
 23699                                  	;or	byte [es:di+5],40h
 23700 00004FF8 26804D0540              	OR      byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 23701                                  ;_yesdirty_:
 23702 00004FFD 07                              POP	ES
 23703 00004FFE 59                              POP	CX
 23704                                  
 23705                                  	; MSDOS 6.0
 23706                                  	;add	dx, 1
 23707                                  	;adc	word [HIGH_SECTOR],0
 23708                                  
 23709 00004FFF 42                      	INC	DX
 23710 00005000 E2CB                            LOOP    ZERODIR
 23711                                  
 23712 00005002 A1[F402]                        MOV     AX,[LASTENT]
 23713 00005005 40                              INC     AX
 23714 00005006 F8                              CLC
 23715 00005007 C3                              retn
 23716                                  
 23717                                  ;--------------------------------------------------------------------------
 23718                                  ;
 23719                                  ; Procedure Name : SETDOTENT
 23720                                  ;
 23721                                  ; set up a . or .. directory entry for a directory.
 23722                                  ;
 23723                                  ;   Inputs:     ES:DI point to the beginning of a directory entry.
 23724                                  ;               AX contains ". " or ".."
 23725                                  ;               DX contains first cluster of entry
 23726                                  ;
 23727                                  ;----------------------------------------------------------------------------
 23728                                  
 23729                                  SETDOTENT:
 23730                                  ;	Fill in name field
 23731 00005008 AB                              STOSW
 23732 00005009 B90400                          MOV     CX,4
 23733 0000500C B82020                          MOV     AX,"  " ; 2020h
 23734 0000500F F3AB                            REP     STOSW
 23735 00005011 AA                              STOSB
 23736                                  
 23737                                  ;	Set up attribute
 23738                                  	;mov	al, 10h
 23739 00005012 B010                            MOV     AL,attr_directory
 23740 00005014 AA                              STOSB
 23741                                  
 23742                                  ;	Initialize time and date of creation
 23743 00005015 83C70A                          ADD     DI,10
 23744 00005018 8B36[3605]                      MOV     SI,[THISSFT]
 23745                                  	;mov	ax,[si+0Dh]
 23746 0000501C 8B440D                          MOV     AX,[SI+SF_ENTRY.sf_time]
 23747 0000501F AB                              STOSW
 23748                                  	;mov	ax,[si+0Fh]
 23749 00005020 8B440F                          MOV     AX,[SI+SF_ENTRY.sf_date]
 23750 00005023 AB                      	STOSW
 23751                                  
 23752                                  ;	Set up first cluster field
 23753 00005024 89D0                            MOV     AX,DX
 23754 00005026 AB                              STOSW
 23755                                  
 23756                                  ;	0 file size
 23757 00005027 31C0                            XOR     AX,AX
 23758 00005029 AB                              STOSW
 23759 0000502A AB                              STOSW
 23760 0000502B C3                              retn
 23761                                  
 23762                                  ;Break   <MAKENODE -- CREATE A NEW NODE>
 23763                                  ;---------------------------------------------------------------------------
 23764                                  ;
 23765                                  ; Procedure Name : MakeNode
 23766                                  ;
 23767                                  ; Inputs:
 23768                                  ;       AL - attribute to create
 23769                                  ;       AH = 0 if it is ok to truncate a file already by this name
 23770                                  ;	AH != 0 if truncation not allowed (prexisting file is an error)
 23771                                  ;               (AH ignored on dirs and devices)
 23772                                  ;
 23773                                  ;        NOTE: When making a DIR or volume ID, AH need not be set since
 23774                                  ;               a name already existant is ALWAYS an error in these cases.
 23775                                  ;
 23776                                  ;       [WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 23777                                  ;               terminated)
 23778                                  ;       [CURR_DIR_END] Points to end of Current dir part of string
 23779                                  ;               ( = -1 if current dir not involved, else
 23780                                  ;                Points to first char after last "/" of current dir part)
 23781                                  ;       [THISCDS] Points to CDS being used
 23782                                  ;       [THISSFT] Points to an empty SFT. EXCEPT sf_mode filled in.
 23783                                  ; Function:
 23784                                  ;       Make a new node
 23785                                  ; Outputs:
 23786                                  ;       Sets EXTERR_LOCUS = errLOC_Disk or errLOC_Unk via GetPathNoset
 23787                                  ;       CARRY SET IF ERROR
 23788                                  ;          AX = 1 A node by this name exists and is a directory
 23789                                  ;          AX = 2 A new node could not be created
 23790                                  ;          AX = 3 A node by this name exists and is a disk file
 23791                                  ;               (AH was NZ on input)
 23792                                  ;          AX = 4 Bad Path
 23793                                  ;               SI return from GetPath maintained
 23794                                  ;          AX = 5 Attribute mismatch
 23795                                  ;          AX = 6 Sharing Violation
 23796                                  ;               (INT 24 generated ALWAYS since create is always compat mode
 23797                                  ;          AX = 7 file not found for Extended Open (not exists and fails)
 23798                                  ;       ELSE
 23799                                  ;          AX = 0       Disk Node
 23800                                  ;          AX = 3       Device Node (error in some cases)
 23801                                  ;          [DIRSTART],[DIRSEC],[CLUSFAC],[CLUSNUM] set to directory
 23802                                  ;               containing new node.
 23803                                  ;          [CURBUF+2]:BX Points to entry
 23804                                  ;          [CURBUF+2]:SI Points to entry.dir_first
 23805                                  ;          [THISSFT] is filled in
 23806                                  ;               sf_mode = unchanged.
 23807                                  ;          Attribute byte in entry is input AL
 23808                                  ; DS preserved, others destroyed
 23809                                  ;
 23810                                  ;-------------------------------------------------------------------------
 23811                                  
 23812                                  MakeNode:
 23813                                  	;mov	word [CREATING],0E5FFh
 23814 0000502C C706[1805]FFE5          	MOV	WORD [CREATING],DIRFREE*256 + 0FFh ; Creating, not DEL *.*
 23815 00005032 50                              PUSH    AX              ; Save AH value
 23816 00005033 C606[F802]00            	MOV	byte [NoSetDir],0
 23817 00005038 A2[0805]                	MOV	[SATTRIB],AL
 23818 0000503B E8FDF7                  	call	GetPathNoSet
 23819 0000503E 88CA                            MOV     DL,CL           ; Save CL info
 23820 00005040 89C1                            MOV     CX,AX           ; Device ID to CH
 23821 00005042 58                              POP     AX              ; Get back AH
 23822 00005043 7316                            JNC	short make_exists ; File existed
 23823 00005045 7505                            JNZ	short make_err_4 ; Path bad
 23824 00005047 80FA80                          CMP     DL,80h          ; Check "CL" return from GETPATH
 23825 0000504A 7406                            JZ	short make_type	; Name simply not found, and no metas
 23826                                  make_err_4:
 23827 0000504C B004                            MOV     AL,4            ; case 1 bad path
 23828                                  make_err_ret:
 23829 0000504E 30E4                            XOR     AH,AH
 23830 00005050 F9                              STC
 23831                                  make_retn:
 23832 00005051 C3                              retn
 23833                                  
 23834                                          ;entry	RENAME_MAKE     ; Used by DOS_RENAME to "copy" a node
 23835                                  RENAME_MAKE:
 23836                                  make_type:
 23837                                  ;Extended Open hooks
 23838                                  	; MSDOS 6.0
 23839                                  	;TESTB	EXTOPEN_ON,ext_open_on	;FT. from extended open		;AN000;
 23840                                  	;JZ	make_type2		;FT. no				;AN000;
 23841                                  	;OR	EXTOPEN_ON,ext_file_not_exists ;FT. set for extended open ;AN000;
 23842                                  	;TESTB	EXTOPEN_FLAG,0F0H	;FT. not exists and fails	;AN000;
 23843                                  	;JNZ    make_type2		;FT. no				;AN000;
 23844                                  	;STC				;FT. set carry			;AN000;
 23845                                  	;MOV    AX,7			;FT. file not found		;AN000;
 23846                                  	;return				;FT.				;AN000;
 23847                                  ;	Extended Open hooks
 23848                                  
 23849                                  make_type2:
 23850 00005052 C43E[3605]                      LES     DI,[THISSFT]
 23851 00005056 31C0                            XOR     AX,AX           ; nothing exists Disk Node
 23852 00005058 F9                              STC                     ; Not found
 23853 00005059 EB5A                            JMP     short make_new
 23854                                  
 23855                                  ; The node exists.  It may be either a device, directory or file:
 23856                                  ;   Zero set => directory
 23857                                  ;   High bit of CH on => device
 23858                                  ;   else => file
 23859                                  make_exists:
 23860 0000505B 7448                            JZ	short make_exists_dir
 23861 0000505D B003                            MOV     AL,3            ; file exists type 3  (error or device node)
 23862                                  	;test	byte [ATTRIB],18h
 23863 0000505F F606[0605]18            	TEST	byte [ATTRIB],attr_volume_id+attr_directory
 23864 00005064 753B                            JNZ	short make_err_ret_5
 23865                                  				; Cannot already exist as Disk or Device Node
 23866                                                                  ;       if making DIR or Volume ID
 23867 00005066 08ED                            OR      CH,CH
 23868 00005068 781A                            JS	short make_share ; No further checks on attributes if device
 23869 0000506A 08E4                            OR      AH,AH
 23870 0000506C 75E0                            JNZ	short make_err_ret ; truncating NOT OK (AL = 3)
 23871 0000506E 51                              PUSH    CX              ; Save device ID
 23872 0000506F 8E06[7605]                      MOV     ES,[CURBUF+2]
 23873                                  	;mov	ch,[es:bx+0Bh]
 23874 00005073 268A6F0B                        MOV     CH,[ES:BX+dir_entry.dir_attr] ; Get file attributes
 23875                                  	;test	ch,1
 23876 00005077 F6C501                  	test	CH,attr_read_only
 23877 0000507A 7524                            JNZ	short make_err_ret_5P ; Cannot create on read only files
 23878 0000507C E854FA                  	call	MatchAttributes
 23879 0000507F 59                              POP     CX              ; Devid back in CH
 23880 00005080 751F                            JNZ	short make_err_ret_5 ; Attributes not ok
 23881 00005082 30C0                            XOR     AL,AL           ; AL = 0, Disk Node
 23882                                  make_share:
 23883 00005084 30E4                            XOR     AH,AH
 23884 00005086 50                              PUSH    AX              ; Save Disk or Device node
 23885 00005087 51                              PUSH    CX              ; Save Device ID
 23886 00005088 88EC                            MOV     AH,CH           ; Device ID to AH
 23887 0000508A E83301                          CALL    DOOPEN          ; Fill in SFT for share check
 23888 0000508D C43E[3605]                      LES     DI,[THISSFT]
 23889 00005091 56                      	push	si
 23890 00005092 53                      	push	bx		; Save CURBUF pointers
 23891 00005093 E8C422                  	call	ShareEnter
 23892 00005096 7350                            jnc	short MakeEndShare
 23893                                  
 23894                                  ; User failed request.
 23895 00005098 5B                      	pop	bx
 23896 00005099 5E                      	pop	si
 23897 0000509A 59                      	pop	cx
 23898 0000509B 58                      	pop	ax
 23899                                  
 23900                                  Make_Share_ret:
 23901 0000509C B006                            MOV     AL,6
 23902 0000509E EBAE                            JMP	short make_err_ret
 23903                                  
 23904                                  make_err_ret_5P:
 23905 000050A0 59                              POP     CX              ; Get back device ID
 23906                                  make_err_ret_5:
 23907 000050A1 B005                            MOV     AL,5            ; Attribute mismatch
 23908 000050A3 EBA9                            JMP     make_err_ret
 23909                                  
 23910                                  make_exists_dir:
 23911 000050A5 B001                            MOV     AL,1            ; exists as directory, always an error
 23912 000050A7 EBA5                            JMP     make_err_ret
 23913                                  
 23914                                  make_save:
 23915 000050A9 50                              PUSH    AX              ; Save whether Disk or File
 23916 000050AA 89C8                            MOV     AX,CX           ; Device ID to AH
 23917 000050AC E86A00                          CALL    NEWENTRY
 23918 000050AF 58                              POP     AX              ; 0 if Disk, 3 if File
 23919 000050B0 739F                            jnc	short make_retn
 23920 000050B2 B002                            MOV     AL,2            ; create failed case 2
 23921                                  make_save_retn:
 23922 000050B4 C3                              retn
 23923                                  
 23924                                  make_new:
 23925 000050B5 E8F1FF                          call    make_save
 23926 000050B8 72FA                            jc	short make_save_retn	; case 2 fail
 23927 000050BA F606[0605]10            	test	BYTE [ATTRIB],attr_directory
 23928 000050BF 75F3                            jnz	short make_save_retn	; Don't "open" directories, so don't
 23929                                                                  ;   tell the sharer about them
 23930 000050C1 50                      	push	ax
 23931 000050C2 53                      	push	bx
 23932 000050C3 56                      	push	si		
 23933 000050C4 E89322                          call	ShareEnter
 23934 000050C7 5E                      	pop	si
 23935 000050C8 5B                      	pop	bx
 23936 000050C9 58                      	pop	ax
 23937 000050CA 73E8                    	jnc	short make_save_retn
 23938                                  ;
 23939                                  ; We get here by having the user FAIL a share problem. Typically a failure of
 23940                                  ; this nature is an out-of-space or an internal error. We clean up as best as
 23941                                  ; possible: delete the newly created directory entry and return share_error.
 23942                                  ;
 23943 000050CC 50                              PUSH    AX
 23944 000050CD C43E[7405]                      LES     DI,[CURBUF]
 23945                                  	;mov	byte [es:bx],0E5h
 23946 000050D1 26C607E5                	MOV	BYTE [ES:BX],DIRFREE	; nuke newly created entry.
 23947                                  	
 23948                                  	; MSDOS 6.0
 23949                                  	;TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 23950                                  	;				;LB. if already dirty		  ;AN000;
 23951                                          ;JNZ	short yesdirty3		;LB.  don't increment dirty count ;AN000;
 23952                                  	;call	INC_DIRTY_COUNT		;LB.				  ;AN000;
 23953                                  	;or	byte [es:di+5],40h
 23954 000050D5 26804D0540                      OR      byte [ES:DI+BUFFINFO.buf_flags],buf_dirty ; flag buffer as dirty
 23955                                  ;yesdirty3:
 23956 000050DA C42E[2405]                      LES     BP,[THISDPB]
 23957 000050DE 268A4600                        mov	al,[ES:BP]
 23958                                  	;MOV	AL,[ES:BP+DPB.DRIVE]	; get drive for flush
 23959 000050E2 E8480E                          call	FLUSHBUF		; write out buffer.
 23960 000050E5 58                              POP     AX
 23961 000050E6 EBB4                            jmp	short Make_Share_ret
 23962                                  ;
 23963                                  ; We have found an existing file. We have also entered it into the share set.
 23964                                  ; At this point we need to call newentry to correctly address the problem of
 23965                                  ; getting rid of old data (create an existing file) or creating a new
 23966                                  ; directory entry (create a new file). Unfortunately, this operation may
 23967                                  ; result in an INT 24 that the user doesn't return from, thus locking the file
 23968                                  ; irretrievably into the share set. The correct solution is for us to LEAVE
 23969                                  ; the share set now, do the operation and then reassert the share access.
 23970                                  ;
 23971                                  ; We are allowed to do this! There is no window! After all, we are in
 23972                                  ; critDisk here and for someone else to get in, they must enter critDisk also.
 23973                                  ;
 23974                                  MakeEndShare:
 23975 000050E8 C43E[3605]                      LES     DI,[THISSFT]		; grab SFT
 23976 000050EC 31C0                            XOR     AX,AX
 23977 000050EE E87BCF                  	call	EcritSFT
 23978 000050F1 268705                  	xchg	AX,[ES:DI]
 23979                                  	;XCHG	AX,[ES:DI+SF_ENTRY.sf_ref_count]
 23980 000050F4 50                      	push	ax
 23981 000050F5 57                      	push	di
 23982 000050F6 06                      	push	es
 23983 000050F7 9C                              PUSHF
 23984 000050F8 E85922                          call	ShareEnd                ; remove sharing
 23985 000050FB 9D                              POPF
 23986 000050FC 07                      	pop	es
 23987 000050FD 5F                      	pop	di
 23988 000050FE 268F05                          pop	word [ES:DI]	
 23989                                  	;pop	word [ES:DI+SF_ENTRY.sf_ref_count]
 23990 00005101 E870CF                  	call	LcritSFT
 23991 00005104 5B                      	pop	bx
 23992 00005105 5E                      	pop	si
 23993 00005106 59                      	pop	cx
 23994 00005107 58                      	pop	ax
 23995 00005108 E89EFF                          CALL    make_save
 23996                                  
 23997                                  ; If the user failed, we do not reenter into the sharing set.
 23998                                  
 23999 0000510B 72A7                            jc	short make_save_retn	; bye if error
 24000 0000510D 50                      	push	ax
 24001 0000510E 53                      	push	bx
 24002 0000510F 56                      	push	si
 24003 00005110 9C                              PUSHF
 24004 00005111 E84622                          call	ShareEnter
 24005 00005114 9D                              POPF
 24006 00005115 5E                      	pop	si
 24007 00005116 5B                      	pop	bx
 24008 00005117 58                      	pop	ax
 24009                                  
 24010                                  ; If Share_check fails, then we have an internal ERROR!!!!!
 24011                                  
 24012                                  makeendshare_retn:
 24013 00005118 C3                              retn
 24014                                  
 24015                                  ;---------------------------------------------------------------------------
 24016                                  ;
 24017                                  ; Procedure Name : NEWENTRY
 24018                                  ;
 24019                                  ; Inputs:
 24020                                  ;       [THISSFT] set
 24021                                  ;       [THISDPB] set
 24022                                  ;       [LASTENT] current last valid entry number in directory if no free
 24023                                  ;               entries
 24024                                  ;       [VOLID] set if a volume ID was found during search
 24025                                  ;	Attrib Contains attributes for new file
 24026                                  ;       [DIRSTART] Points to first cluster of dir (0 means root)
 24027                                  ;       CARRY FLAG INDICATES STATUS OF SEARCH FOR FILE
 24028                                  ;               NC means file existed (device)
 24029                                  ;               C  means file did not exist
 24030                                  ;       AH = Device ID byte
 24031                                  ;       If FILE
 24032                                  ;           [CURBUF+2]:BX points to start of directory entry
 24033                                  ;           [CURBUF+2]:SI points to dir_first of directory entry
 24034                                  ;       If device
 24035                                  ;           DS:BX points to start of "fake" directory entry
 24036                                  ;           DS:SI points to dir_first of "fake" directory entry
 24037                                  ;               (has DWORD pointer to device header)
 24038                                  ; Function:
 24039                                  ;       Make a new directory entry
 24040                                  ;       If an old one existed it is truncated first
 24041                                  ; Outputs:
 24042                                  ;       Carry set if error
 24043                                  ;               Can't grow dir, atts didn't match, attempt to make 2nd
 24044                                  ;               vol ID, user FAILed to I 24
 24045                                  ;       else
 24046                                  ;               outputs of DOOPEN
 24047                                  ; DS, BX, SI preserved (meaning on SI BX, not value), others destroyed
 24048                                  ;
 24049                                  ;----------------------------------------------------------------------------
 24050                                  
 24051                                  NEWENTRY:
 24052 00005119 C42E[2405]                      LES     BP,[THISDPB]
 24053 0000511D 7316                            JNC	short EXISTENT	
 24054 0000511F 803E[F602]00                    CMP     byte [FAILERR],0
 24055 00005124 F9                              STC
 24056 00005125 75F1                            jnz	short makeendshare_retn	; User FAILed, node might exist
 24057 00005127 E833FE                          CALL    BUILDDIR        ; Try to build dir
 24058 0000512A 72EC                            jc	short makeendshare_retn	; Failed
 24059 0000512C E883F6                          call	GETENT          ; Point at that free entry
 24060 0000512F 72E7                            jc	short makeendshare_retn	; Failed
 24061 00005131 EB0E                            JMP     SHORT FREESPOT
 24062                                  
 24063                                  ERRRET3:
 24064 00005133 F9                              STC
 24065                                  newentry_retn:
 24066 00005134 C3                              retn
 24067                                  
 24068                                  EXISTENT:
 24069 00005135 08E4                            OR      AH,AH           ; Check if file is I/O device
 24070 00005137 7903                            JNS	short NOT_DEV1
 24071 00005139 E98400                          JMP     DOOPEN          ; If so, proceed with open
 24072                                  
 24073                                  NOT_DEV1:
 24074 0000513C E81401                          call	FREEENT		; Free cluster chain
 24075 0000513F 72F3                            jc	short newentry_retn ; Failed
 24076                                  FREESPOT:
 24077                                  	;test	byte [ATTRIB],8
 24078 00005141 F606[0605]08            	test	BYTE [ATTRIB],attr_volume_id
 24079 00005146 7407                            JZ	short NOTVOLID
 24080 00005148 803E[1605]00                    CMP     BYTE [VOLID],0
 24081 0000514D 75E4                            JNZ	short ERRRET3	; Can't create a second volume ID
 24082                                  NOTVOLID:
 24083 0000514F 8E06[7605]                      MOV     ES,[CURBUF+2]
 24084 00005153 89DF                            MOV     DI,BX
 24085                                  
 24086 00005155 BE[E604]                        MOV     SI,NAME1
 24087                                  
 24088 00005158 B90500                          MOV     CX,5
 24089 0000515B F3A5                            REP     MOVSW
 24090 0000515D A4                              MOVSB                   ; Move name into dir entry
 24091 0000515E A0[0605]                	MOV	AL,[ATTRIB]
 24092 00005161 AA                      	STOSB                   ; Attributes
 24093                                  
 24094                                  ;; File Tagging for Create DOS 4.00
 24095 00005162 B105                            MOV     CL,5            ;FT. assume normal FBUGBUG	;AN000;
 24096                                  ;; File Tagging for Create DOS 4.00
 24097                                  
 24098 00005164 31C0                            XOR     AX,AX
 24099 00005166 F3AB                            REP     STOSW           ; Zero pad
 24100 00005168 E84EC7                          call	DATE16
 24101 0000516B 92                              XCHG    AX,DX
 24102 0000516C AB                              STOSW                   ; dir_time
 24103 0000516D 92                              XCHG    AX,DX
 24104 0000516E AB                              STOSW                   ; dir_date
 24105 0000516F 31C0                            XOR     AX,AX
 24106 00005171 57                              PUSH    DI              ; Correct SI input value
 24107                                  				; 	(recomputed for new buffer)
 24108 00005172 AB                              STOSW                   ; Zero dir_first and size
 24109 00005173 AB                              STOSW
 24110 00005174 AB                              STOSW
 24111                                  updnxt:
 24112 00005175 8B36[7405]              	MOV	SI,[CURBUF]
 24113                                  
 24114                                  	; MSDOS 6.0
 24115                                  	;TEST	byte [ES:SI+BUFFINFO.buf_flags],buf_dirty
 24116                                  	;			;LB. if already dirty		  ;AN000;
 24117                                          ;JNZ	short yesdirty4	;LB.  don't increment dirty count ;AN000;
 24118                                          ;call	INC_DIRTY_COUNT	;LB.				  ;AN000;
 24119                                          
 24120                                  	;or	byte [es:si+5],40h
 24121 00005179 26804C0540              	OR      byte [ES:SI+BUFFINFO.buf_flags],buf_dirty
 24122                                  ;yesdirty4:
 24123 0000517E C42E[2405]                      LES     BP,[THISDPB]
 24124 00005182 268A4600                	MOV	AL,[ES:BP]	; mov al,[es:bp+0] 
 24125                                          ;MOV	AL,[ES:BP+DPB.DRIVE] ; Sets AH value again (in AL)
 24126 00005186 50                              PUSH    AX
 24127 00005187 53                              PUSH    BX
 24128                                  ; If we have a file, we need to increment the open ref. count so that
 24129                                  ; we have some protection against invalid media changes if an Int 24
 24130                                  ; error occurs.
 24131                                  ; Do nothing for a device.
 24132 00005188 06                      	push	es
 24133 00005189 57                      	push	di
 24134 0000518A C43E[3605]                      LES     DI,[THISSFT]
 24135                                  	;test	word [es:di+5],80h
 24136 0000518E 26F745058000            	TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 24137 00005194 751A                            jnz	short GotADevice
 24138 00005196 1E                      	push	ds
 24139 00005197 53                      	push	bx
 24140 00005198 C51E[2405]                      LDS     BX,[THISDPB]
 24141                                  	;mov	[es:di+7],bx
 24142 0000519C 26895D07                        MOV     [ES:DI+SF_ENTRY.sf_devptr],BX
 24143 000051A0 8CDB                            MOV     BX,DS
 24144                                  	;mov	[es:di+9],bx
 24145 000051A2 26895D09                        MOV     [ES:DI+SF_ENTRY.sf_devptr+2],BX
 24146 000051A6 5B                      	pop	bx
 24147 000051A7 1F                      	pop	ds ; need to use DS for segment later on
 24148 000051A8 E8CAFC                  	call	DEV_OPEN_SFT    ; increment ref. count
 24149 000051AB C606[080A]01                    mov	byte [VIRTUAL_OPEN],1; set flag
 24150                                  GotADevice:
 24151 000051B0 5F                      	pop	di
 24152 000051B1 07                      	pop	es
 24153                                  
 24154 000051B2 E8780D                          call	FLUSHBUF
 24155 000051B5 E8DA00                          Call    CHECK_VIRT_OPEN ; decrement ref. count                          ;AN000;
 24156 000051B8 5B                              POP     BX
 24157 000051B9 58                              POP     AX
 24158 000051BA 5E                              POP     SI              ; Get SI input back
 24159 000051BB 88C4                            MOV     AH,AL           ; Get I/O driver number back
 24160 000051BD 7301                            jnc	short DOOPEN    ; Failed
 24161 000051BF C3                      	retn
 24162                                  
 24163                                  ;NOTE FALL THROUGH
 24164                                  
 24165                                  ; Inputs:
 24166                                  ;       [THISDPB] points to DPB if file
 24167                                  ;       [THISSFT] points to SFT being used
 24168                                  ;       AH = Device ID byte
 24169                                  ;       If FILE
 24170                                  ;           [CURBUF+2]:BX points to start of directory entry
 24171                                  ;           [CURBUF+2]:SI points to dir_first of directory entry
 24172                                  ;       If device
 24173                                  ;           DS:BX points to start of "fake" directory entry
 24174                                  ;           DS:SI points to dir_first of "fake" directory entry
 24175                                  ;               (has DWORD pointer to device header)
 24176                                  ; Function:
 24177                                  ;       Fill in SFT from dir entry
 24178                                  ; Outputs:
 24179                                  ;       CARRY CLEAR
 24180                                  ;       sf_ref_count and sf_mode fields not altered
 24181                                  ;       sf_flags high byte = 0
 24182                                  ;       sf_flags low byte = AH except
 24183                                  ;       sf_flags Bit 6 set (not dirty or not EOF)
 24184                                  ;       sf_attr sf_date sf_time sf_name set from entry
 24185                                  ;       sf_position = 0
 24186                                  ;       If device
 24187                                  ;           sf_devptr = dword at dir_first (pointer to device header)
 24188                                  ;           sf_size = 0
 24189                                  ;       If file
 24190                                  ;           sf_firclus sf_size set from entry
 24191                                  ;           sf_devptr = [THISDPB]
 24192                                  ;           sf_cluspos = 0
 24193                                  ;           sf_lstclus = sf_firclus
 24194                                  ;           sf_dirsec sf_dirpos set
 24195                                  ; DS,SI,BX preserved, others destroyed
 24196                                  
 24197                                  	;entry	DOOPEN
 24198                                  DOOPEN:
 24199                                  ;	Generate and store attribute
 24200                                  
 24201 000051C0 88E6                            MOV     DH,AH           ; AH to different place
 24202 000051C2 C43E[3605]                      LES     DI,[THISSFT]
 24203                                  	;add	di,4
 24204 000051C6 83C704                          ADD     DI,SF_ENTRY.sf_attr ; Skip ref_count and mode fields
 24205 000051C9 30C0                            XOR     AL,AL           ; Assume it's a device, devices have an
 24206                                                                  ;   attribute of 0 (for R/O testing etc).
 24207 000051CB 08F6                            OR      DH,DH           ; See if our assumption good.
 24208 000051CD 7807                            JS	short DEV_SFT1	; If device DS=DOSGROUP
 24209 000051CF 8E1E[7605]                      MOV     DS,[CURBUF+2]
 24210                                  	;mov	al,[BX+0Bh]
 24211 000051D3 8A470B                          MOV     AL,[BX+dir_entry.dir_attr]
 24212                                  				; If file, get attrib from dir entry
 24213                                  DEV_SFT1:
 24214 000051D6 AA                              STOSB                   ; sf_attr, ES:DI -> sf_flags
 24215                                  
 24216                                  ;	Generate and store flags word
 24217                                  
 24218 000051D7 31C0                            XOR     AX,AX
 24219 000051D9 88F0                            MOV     AL,DH
 24220                                  	;or	al,40h
 24221 000051DB 0C40                            OR      AL,devid_file_clean
 24222 000051DD AB                              STOSW                   ; sf_flags, ES:DI -> sf_devptr
 24223                                  
 24224                                  ;	Generate and store device pointer
 24225                                  
 24226 000051DE 1E                              PUSH    DS
 24227                                  	;lds	ax,[bx+1Ah]
 24228 000051DF C5471A                          LDS     AX,[BX+dir_entry.dir_first] ; Assume device
 24229 000051E2 08F6                            OR      DH,DH
 24230 000051E4 7805                            JS	short DEV_SFT2
 24231                                  
 24232                                  ;hkn; SS override
 24233 000051E6 36C506[2405]                    LDS     AX,[SS:THISDPB]	; Was file
 24234                                  DEV_SFT2:
 24235 000051EB AB                              STOSW 			; store offset
 24236 000051EC 8CD8                            MOV     AX,DS
 24237 000051EE 1F                              POP     DS
 24238 000051EF AB                      	STOSW			; store segment
 24239                                  				; ES:DI -> sf_firclus
 24240                                  
 24241                                  ;	Generate pointer to, generate and store first cluster 
 24242                                  ;	(irrelevant for devices)
 24243                                  
 24244 000051F0 56                              PUSH    SI              ; Save pointer to dir_first
 24245 000051F1 A5                              MOVSW                   ; dir_first -> sf_firclus
 24246                                                                  ; DS:SI -> dir_size_l, ES:DI -> sf_time
 24247                                  
 24248                                  ;	Copy time/date of last modification
 24249                                  
 24250                                  	;sub	si,6
 24251 000051F2 83EE06                          SUB     SI,dir_entry.dir_size_l - dir_entry.dir_time 
 24252                                  				; DS:SI->dir_time
 24253 000051F5 A5                              MOVSW                   ; dir_time -> sf_time
 24254                                                                  ; DS:SI -> dir_date, ES:DI -> sf_date
 24255 000051F6 A5                              MOVSW                   ; dir_date -> sf_date
 24256                                                                  ; DS:SI -> dir_first, ES:DI -> sf_size
 24257                                  
 24258                                  ;	Generate and store file size (0 for devices)
 24259                                  
 24260 000051F7 AD                              LODSW                   ; skip dir_first, DS:SI -> dir_size_l
 24261 000051F8 AD                              LODSW                   ; dir_size_l in AX , DS:SI -> dir_size_h
 24262 000051F9 89C1                            MOV     CX,AX           ; dir_size_l in CX
 24263 000051FB AD                              LODSW                   ; dir_size_h (size AX:CX), DS:SI -> ????
 24264 000051FC 08F6                            OR      DH,DH
 24265 000051FE 7904                            JNS	short FILE_SFT1
 24266 00005200 31C0                            XOR     AX,AX
 24267 00005202 89C1                            MOV     CX,AX           ; Devices are open ended
 24268                                  FILE_SFT1:
 24269 00005204 91                              XCHG    AX,CX
 24270 00005205 AB                              STOSW                   ; Low word of sf_size
 24271 00005206 91                              XCHG    AX,CX
 24272 00005207 AB                              STOSW                   ; High word of sf_size
 24273                                                                  ; ES:DI -> sf_position
 24274                                  ; Initialize position to 0
 24275                                  
 24276 00005208 31C0                            XOR     AX,AX
 24277 0000520A AB                              STOSW
 24278 0000520B AB                              STOSW                   ; sf_position
 24279                                                                  ; ES:DI -> sf_cluspos
 24280                                  
 24281                                  ; Generate cluster optimizations for files
 24282                                  
 24283 0000520C 08F6                            OR      DH,DH
 24284 0000520E 7834                            JS	short DEV_SFT3
 24285 00005210 AB                              STOSW                   ; sf_cluspos
 24286                                  	;mov	ax,[bx+1Ah]
 24287 00005211 8B471A                          MOV     AX,[BX+dir_entry.dir_first]
 24288                                  	; MSDOS 3.3
 24289 00005214 AB                      	STOSW                   ; sf_lstclus
 24290                                  	; MSDOS 6.0
 24291                                          ;PUSH	DI              ;AN004; save dirsec offset
 24292                                          ;SUB	DI,SF_ENTRY.sf_dirsec	;AN004; es:di -> SFT
 24293                                          ;MOV	[ES:DI.sf_lstclus],AX	;AN004; save it
 24294                                          ;POP	DI              ;AN004; restore dirsec offset
 24295                                  
 24296                                  ; DOS 3.3  FastOpen  6/13/86
 24297                                  
 24298 00005215 1E                      	PUSH	DS
 24299                                  
 24300                                  ;hkn; SS is DOSDATA
 24301 00005216 16                      	push	ss
 24302 00005217 1F                      	pop	ds
 24303                                  	;test	byte [FastOpenFlg],4
 24304 00005218 F606[6E0F]04            	TEST	byte [FastOpenFlg],Special_Fill_Set
 24305 0000521D 740D                    	JZ	short Not_FastOpen
 24306                                  
 24307                                  ;hkn; FastOpen_Ext_Info is in DOSDATA
 24308 0000521F BE[490F]                        MOV     SI,FastOpen_Ext_Info
 24309                                  
 24310 00005222 8B4401                          MOV     AX,[SI+FEI.dirsec]
 24311 00005225 AB                              STOSW                   ; sf_dirsec
 24312                                  	; MSDOS 6.0
 24313                                          ;MOV	AX,[SI+FEI.dirsec+2]
 24314                                  				;;; changed for >32mb
 24315                                          ;STOSW                   ; sf_dirsec
 24316                                  	; 19/08//2018
 24317 00005226 8A04                    	mov	al,[SI]
 24318                                          ;MOV	AL,[SI+FEI.dirpos] ; mov al,[SI+0]
 24319 00005228 AA                              STOSB                   ; sf_dirpos
 24320 00005229 1F                              POP	DS
 24321 0000522A EB16                            JMP     short Next_Name
 24322                                  
 24323                                  ; DOS 3.3  FastOpen  6/13/86
 24324                                  
 24325                                  Not_FastOpen:
 24326 0000522C 1F                              POP     DS		; normal path
 24327                                  
 24328                                  ;hkn; SS override
 24329 0000522D 368B36[7405]                    MOV     SI,[SS:CURBUF]	; DS:SI->buffer header
 24330                                  
 24331 00005232 8B4406                          MOV     AX,[SI+BUFFINFO.buf_sector]     ;F.C. >32mb ;AN000;
 24332 00005235 AB                              STOSW                   ; sf_dirsec     ;F.C. >32mb ;AN000;
 24333                                          ; MSDOS 6.0
 24334                                  	;MOV	AX,[SI+BUFFINFO.buf_sector+2]	;F.C. >32mb ;AN000;
 24335                                          ;STOSW                   ; sf_dirsec     ;F.C. >32mb ;AN000;
 24336                                          
 24337 00005236 89D8                    	MOV     AX,BX
 24338                                  	;add	si,16
 24339 00005238 83C610                          ADD     SI,BUFINSIZ     ; DS:SI-> start of data in buffer
 24340 0000523B 29F0                            SUB     AX,SI           ; AX = BX relative to start of sector
 24341                                          ;mov	cl,32
 24342 0000523D B120                    	MOV     CL,dir_entry.size
 24343 0000523F F6F1                            DIV     CL
 24344 00005241 AA                              STOSB                   ; sf_dirpos
 24345                                  
 24346                                  Next_Name:
 24347 00005242 EB03                            JMP     SHORT FILE_SFT2
 24348                                  
 24349                                  DEV_SFT3:
 24350                                  	;add	di,7
 24351 00005244 83C707                          ADD     DI,SF_ENTRY.sf_name-SF_ENTRY.sf_cluspos
 24352                                  FILE_SFT2:
 24353                                  ;
 24354                                  ; Copy in the object's name
 24355                                  ;
 24356 00005247 89DE                            MOV     SI,BX           ; DS:SI points to dir_name
 24357 00005249 B90B00                          MOV     CX,11
 24358 0000524C F3A4                            REP     MOVSB           ; sf_name
 24359 0000524E 5E                              POP     SI              ; recover DS:SI -> dir_first
 24360                                  
 24361                                  ;hkn; SS is DOSDATA
 24362 0000524F 16                              push	ss
 24363 00005250 1F                      	pop	ds
 24364 00005251 F8                              CLC
 24365 00005252 C3                              retn
 24366                                  
 24367                                  ;---------------------------------------------------------------------------
 24368                                  ;
 24369                                  ; Procedure Name : FREEENT
 24370                                  ;
 24371                                  ; Inputs:
 24372                                  ;       ES:BP -> DPB
 24373                                  ;       [CURBUF] Set
 24374                                  ;       [CURBUF+2]:BX points to directory entry
 24375                                  ;       [CURBUF+2]:SI points to above dir_first
 24376                                  ; Function:
 24377                                  ;       Free the cluster chain for the entry if present
 24378                                  ; Outputs:
 24379                                  ;       Carry set if error (currently user FAILed to I 24)
 24380                                  ;       (NOTE dir_firclus and dir_size_l/h are wrong)
 24381                                  ; DS BX SI ES BP preserved (BX,SI in meaning, not value) others destroyed
 24382                                  ;---------------------------------------------------------------------------
 24383                                  
 24384                                  FREEENT:
 24385 00005253 1E                              PUSH    DS
 24386 00005254 C53E[7405]                      LDS     DI,[CURBUF]
 24387 00005258 8B0C                            MOV     CX,[SI]         ; Get pointer to clusters
 24388                                  	; 19/05/2019
 24389                                  	; MSDOS 6.0
 24390                                  	;MOV	DX,[DI+BUFFINFO.buf_sector+2]  ;F.C. >32mb	;AN000;
 24391                                  ;hkn; SS override
 24392                                          ;MOV	[SS:HIGH_SECTOR],DX		;F.C. >32mb	;AN000;
 24393 0000525A 8B5506                          MOV     DX,[DI+BUFFINFO.buf_sector]
 24394 0000525D 1F                              POP     DS
 24395 0000525E 83F902                  	CMP	CX,2
 24396 00005261 722D                            JB	short RET1	; Was 0 length file (or mucked Firclus if CX=1)
 24397                                  	;cmp	cx,[es:bp+0Dh]
 24398 00005263 263B4E0D                        CMP     CX,[ES:BP+DPB.MAX_CLUSTER]
 24399 00005267 7727                            JA	short RET1	; Treat like zero length file (firclus mucked)
 24400 00005269 29FB                            SUB     BX,DI
 24401 0000526B 53                              PUSH    BX              ; Save offset
 24402                                  	;PUSH	word [HIGH_SECTOR] ;F.C. >32mb	;AN000;
 24403 0000526C 52                              PUSH    DX              ; Save sector number
 24404 0000526D 89CB                            MOV     BX,CX
 24405 0000526F E87702                          call	RELEASE         ; Free any data allocated
 24406 00005272 5A                              POP     DX
 24407                                          ;POP	word [HIGH_SECTOR] ;F.C. >32mb	;AN000;
 24408 00005273 7302                            JNC	short GET_BUF_BACK
 24409 00005275 5B                              POP     BX
 24410                                  freeent_retn:
 24411 00005276 C3                              retn			; Screw up
 24412                                  
 24413                                  GET_BUF_BACK:
 24414                                  	;mov	byte [ALLOWED],18h
 24415 00005277 C606[F702]18                    MOV     byte [ALLOWED],Allowed_RETRY+Allowed_FAIL
 24416 0000527C 30C0                            XOR     AL,AL
 24417 0000527E E8040C                  	call	GETBUFFR        ; Get sector back
 24418 00005281 5B                              POP     BX              ; Get offset back
 24419 00005282 72F2                            jc	short freeent_retn
 24420 00005284 E8B1EE                  	call	SET_BUF_AS_DIR
 24421 00005287 031E[7405]                      ADD     BX,[CURBUF]	; Correct it for new buffer
 24422 0000528B 89DE                            MOV     SI,BX
 24423                                  	;add	si,1Ah
 24424 0000528D 83C61A                          ADD     SI,dir_entry.dir_first	; Get corrected SI
 24425                                  RET1:
 24426 00005290 F8                              CLC
 24427 00005291 C3                              retn
 24428                                  
 24429                                  ;---------------------------------------------------------------------------
 24430                                  ;
 24431                                  ; Procedure Name : CHECK_VIRT_OPEN
 24432                                  ;
 24433                                  ; CHECK_VIRT_OPEN checks to see if we had performed a "virtual open" (by
 24434                                  ; examining the flag [VIRTUAL_OPEN] to see if it is 1). If we did, then
 24435                                  ; it calls Dev_Close_SFT to decrement the ref. count. It also resets the
 24436                                  ; flag [VIRTUAL_OPEN].
 24437                                  ; No registers affected (including flags).
 24438                                  ; On input, [THISSFT] points to current SFT.
 24439                                  ;
 24440                                  ;---------------------------------------------------------------------------
 24441                                  
 24442                                  CHECK_VIRT_OPEN:
 24443 00005292 50                      	        PUSH    AX
 24444 00005293 9F                              lahf                    ; preserve flags
 24445 00005294 803E[080A]00                    CMP     byte [VIRTUAL_OPEN],0
 24446 00005299 7410                            JZ	short ALL_CLOSED
 24447 0000529B C606[080A]00                    mov     byte [VIRTUAL_OPEN],0	; reset flag
 24448 000052A0 06                      	push	es
 24449 000052A1 57                      	push	di
 24450 000052A2 C43E[3605]                      LES     DI,[THISSFT]
 24451 000052A6 E8D3FB                          call	DEV_CLOSE_SFT
 24452 000052A9 5F                      	pop	di
 24453 000052AA 07                      	pop	es
 24454                                  
 24455                                  ALL_CLOSED:
 24456 000052AB 9E                              sahf                    ; restore flags
 24457 000052AC 58                              POP     AX
 24458 000052AD C3                              retn
 24459                                  
 24460                                  ;============================================================================
 24461                                  ; ROM.ASM, MSDOS 6.0, 1991
 24462                                  ;============================================================================
 24463                                  ; 29/07/2018 - Retro DOS v3.0
 24464                                  
 24465                                  ;	TITLE	ROM - Miscellaneous routines
 24466                                  ;	NAME	ROM
 24467                                  
 24468                                  ;**	Misc Low level routines for doing simple FCB computations, Cache
 24469                                  ;       reads and writes, I/O optimization, and FAT allocation/deallocation
 24470                                  ;
 24471                                  ;	SKPCLP
 24472                                  ;	FNDCLUS
 24473                                  ;	BUFSEC
 24474                                  ;	BUFRD
 24475                                  ;	BUFWRT
 24476                                  ;	NEXTSEC
 24477                                  ;	OPTIMIZE
 24478                                  ;	FIGREC
 24479                                  ;	ALLOCATE
 24480                                  ;	RESTFATBYT
 24481                                  ;	RELEASE
 24482                                  ;	RELBLKS
 24483                                  ;	GETEOF
 24484                                  ;
 24485                                  ;	Modification history:
 24486                                  ;
 24487                                  ;		Created: ARR 30 March 1983
 24488                                  ;               M039: DB 10/25/90 - Disk read/write optimization.
 24489                                  
 24490                                  ;Break   <FNDCLUS -- Skip over allocation units>
 24491                                  ;--------------------------------------------------------------------------
 24492                                  ;
 24493                                  ; Procedure Name : FNDCLUS
 24494                                  ;
 24495                                  ; Inputs:
 24496                                  ;       CX = No. of clusters to skip
 24497                                  ;       ES:BP = Base of drive parameters
 24498                                  ;       [THISSFT] point to SFT
 24499                                  ; Outputs:
 24500                                  ;       BX = Last cluster skipped to
 24501                                  ;       CX = No. of clusters remaining (0 unless EOF)
 24502                                  ;       DX = Position of last cluster
 24503                                  ;       Carry set if error (currently user FAILed to I 24)
 24504                                  ; DI destroyed. No other registers affected.
 24505                                  ;--------------------------------------------------------------------------
 24506                                  
 24507                                  FNDCLUS:
 24508 000052AE 06                      	PUSH	ES
 24509 000052AF C43E[3605]                      LES     DI,[THISSFT]		; setup addressability to SFT
 24510                                  	;mov	bx,[es:di+1Bh]
 24511 000052B3 268B5D1B                	MOV	BX,[ES:DI+SF_ENTRY.sf_lstclus]
 24512                                  	;mov	dx,[es:di+19h]
 24513 000052B7 268B5519                        MOV     DX,[ES:DI+SF_ENTRY.sf_cluspos]
 24514 000052BB 09DB                    	OR	BX,BX
 24515 000052BD 7424                    	JZ	short NOCLUS
 24516                                  
 24517 000052BF 29D1                            SUB     CX,DX
 24518 000052C1 7308                            JNB	short FINDIT
 24519                                  
 24520 000052C3 01D1                            ADD     CX,DX
 24521 000052C5 31D2                            XOR     DX,DX
 24522                                  	;mov	bx,[es:di+0Bh]
 24523 000052C7 268B5D0B                        MOV     BX,[ES:DI+SF_ENTRY.sf_firclus]
 24524                                  FINDIT:
 24525 000052CB 07                              POP	ES
 24526 000052CC E313                    	JCXZ	RET9
 24527                                  
 24528                                  	;entry	SKPCLP
 24529                                  SKPCLP:
 24530 000052CE E87C07                  	call	UNPACK
 24531 000052D1 7214                            jc	short fndclus_retn	; retc
 24532                                  	
 24533                                  	; 09/09/2018
 24534                                  
 24535                                  	; MSDOS 6.0
 24536                                  	;xchg	bx,di
 24537                                  	;call	IsEOF
 24538                                  	;pop	bx
 24539                                  	;xchg	bx,di
 24540                                  	;jae	short RET9
 24541                                  
 24542                                  	; MSDOS 3.3
 24543 000052D3 53                      	push	bx
 24544 000052D4 89FB                    	mov	bx,di
 24545 000052D6 E85D07                  	call	IsEOF
 24546 000052D9 5B                      	pop	bx	
 24547 000052DA 7305                    	jae	short RET9
 24548                                  
 24549 000052DC 87DF                            XCHG    BX,DI
 24550 000052DE 42                              INC     DX
 24551 000052DF E2ED                    	LOOP	SKPCLP			; RMFS
 24552                                  RET9:	
 24553 000052E1 F8                      	CLC
 24554 000052E2 C3                              retn
 24555                                  NOCLUS:
 24556 000052E3 07                              POP	ES
 24557 000052E4 41                              INC	CX
 24558 000052E5 4A                              DEC	DX
 24559 000052E6 F8                              CLC
 24560                                  
 24561                                  fndclus_retn:
 24562 000052E7 C3                              retn
 24563                                  
 24564                                  ;Break  <BUFSEC -- BUFFER A SECTOR AND SET UP A TRANSFER>
 24565                                  ;--------------------------------------------------------------------------
 24566                                  ;
 24567                                  ; Procedure Name : BUFSEC
 24568                                  ;
 24569                                  ; Inputs:
 24570                                  ;       AH = priority of buffer
 24571                                  ;       AL = 0 if buffer must be read, 1 if no pre-read needed
 24572                                  ;       ES:BP = Base of drive parameters
 24573                                  ;       [CLUSNUM] = Physical cluster number
 24574                                  ;       [SECCLUSPOS] = Sector position of transfer within cluster
 24575                                  ;       [BYTCNT1] = Size of transfer
 24576                                  ; Function:
 24577                                  ;       Insure specified sector is in buffer, flushing buffer before
 24578                                  ;       read if necessary.
 24579                                  ; Outputs:
 24580                                  ;       ES:DI = Pointer to buffer
 24581                                  ;       SI = Pointer to transfer address
 24582                                  ;       CX = Number of bytes
 24583                                  ;       [NEXTADD] updated
 24584                                  ;       [TRANS] set to indicate a transfer will occur
 24585                                  ;       Carry set if error (user FAILed to I 24)
 24586                                  ;--------------------------------------------------------------------------
 24587                                  
 24588                                  BUFSEC:
 24589 000052E8 8B16[5405]                      MOV     DX,[CLUSNUM]
 24590 000052EC 8A1E[0E05]                      MOV     BL,[SECCLUSPOS]
 24591                                  	;mov	byte [ALLOWED],38h
 24592 000052F0 C606[F702]38                    MOV     byte [ALLOWED],Allowed_FAIL+Allowed_RETRY+Allowed_IGNORE
 24593 000052F5 E83901                          CALL    FIGREC
 24594 000052F8 E88A0B                  	call	GETBUFFR
 24595 000052FB 72EA                            jc	short fndclus_retn
 24596                                  
 24597 000052FD C606[0F05]01                    MOV     BYTE [TRANS],1	; A transfer is taking place
 24598 00005302 8B36[5005]                      MOV     SI,[NEXTADD]
 24599 00005306 89F7                            MOV     DI,SI
 24600 00005308 8B0E[6405]                      MOV     CX,[BYTCNT1]
 24601 0000530C 01CF                            ADD     DI,CX
 24602 0000530E 893E[5005]                      MOV     [NEXTADD],DI
 24603 00005312 C43E[7405]                      LES     DI,[CURBUF]
 24604                                  	;or	byte [es:di+5],8
 24605 00005316 26804D0508                      OR      byte [ES:DI+BUFFINFO.buf_flags],buf_isDATA
 24606                                  	;lea	di,[di+16]
 24607 0000531B 8D7D10                          LEA     DI,[DI+BUFINSIZ]        ; Point to buffer
 24608 0000531E 033E[5E05]                      ADD     DI,[BYTSECPOS]
 24609 00005322 F8                              CLC
 24610 00005323 C3                              retn
 24611                                  
 24612                                  ;Break   <BUFRD, BUFWRT -- PERFORM BUFFERED READ AND WRITE>
 24613                                  
 24614                                  ;---------------------------------------------------------------------------
 24615                                  ;
 24616                                  ; Procedure Name : BUFRD
 24617                                  ;
 24618                                  ; Do a partial sector read via one of the system buffers
 24619                                  ; ES:BP Points to DPB
 24620                                  ; Carry set if error (currently user FAILed to I 24)
 24621                                  ;
 24622                                  ; DS - set to DOSDATA
 24623                                  ;
 24624                                  ;----------------------------------------------------------------------------
 24625                                  
 24626                                  BUFRD:
 24627 00005324 06                              PUSH	ES
 24628 00005325 31C0                            xor	ax, ax			; pre-read sector
 24629 00005327 E8BEFF                          CALL    BUFSEC
 24630 0000532A 7303                            JNC	short BUF_OK
 24631                                  
 24632                                  BUF_IO_FAIL:				; this label used by BUFWRT also
 24633 0000532C 07                              POP	ES
 24634 0000532D EB29                            JMP     SHORT RBUFPLACED
 24635                                  
 24636                                  BUF_OK:
 24637 0000532F 8CC3                            MOV     BX,ES
 24638 00005331 8E06[DC02]                      MOV     ES,[DMAADD+2]
 24639 00005335 8EDB                            MOV     DS,BX
 24640 00005337 87FE                    	XCHG    DI,SI
 24641 00005339 D1E9                            SHR     CX,1
 24642                                  ;M039
 24643                                  	; MSDOS 3.3
 24644 0000533B 7301                    	JNC	short EVENRD
 24645 0000533D A4                      	MOVSB
 24646                                  EVENRD:
 24647 0000533E F3A5                    	REP     MOVSW
 24648                                  
 24649                                  ;	   CX = # of whole WORDs; CF=1 if odd # of bytes.
 24650                                  ;       DS:SI-> Source within Buffer.
 24651                                  ;       ES:DI-> Destination within Transfer memory block.
 24652                                  
 24653                                  	; MSDOS 6.0
 24654                                  ;	rep	movsw			;Copy Buffer to Transfer memory.
 24655                                  ;	adc	cx,0                    ;CX=1 if odd # of bytes, else CX=0.
 24656                                  ;	rep	movsb                   ;Copy last byte.
 24657                                  ;M039
 24658                                  
 24659 00005340 07                              POP	ES
 24660                                  ;hkn; SS override
 24661 00005341 36C53E[7405]                    LDS     DI,[SS:CURBUF]
 24662                                  	;lea	bx,[di+16]
 24663 00005346 8D5D10                  	LEA     BX,[DI+BUFINSIZ]
 24664 00005349 29DE                            SUB     SI,BX                   ; Position in buffer
 24665 0000534B E88C0A                          call	PLACEBUF
 24666                                  	;cmp	si,[es:bp+2]
 24667 0000534E 263B7602                	CMP	SI,[ES:BP+DPB.SECTOR_SIZE] ; Read Last byte?
 24668 00005352 7203                            JB	short RBUFPLACEDC	; No, leave buf where it is
 24669                                  
 24670                                  ;M039
 24671                                  	; MSDOS 3.3
 24672 00005354 E8E50A                  	call	PLACEHEAD               ; Make it prime candidate for chucking
 24673                                                                          ;  even though it is MRU.
 24674                                          ; MSDOS 6.0
 24675                                  	;MOV	[BufferQueue],DI	; Make it prime candidate for
 24676                                  ;M039					; chucking even though it is MRU.
 24677                                  
 24678                                  RBUFPLACEDC:
 24679 00005357 F8                              CLC
 24680                                  RBUFPLACED:
 24681 00005358 16                      	push	ss
 24682 00005359 1F                      	pop	ds
 24683 0000535A C3                              retn
 24684                                  
 24685                                  ;----------------------------------------------------------------------------
 24686                                  ;
 24687                                  ; Procedure : BUFWRT
 24688                                  ;
 24689                                  ; Do a partial sector write via one of the system buffers
 24690                                  ; ES:BP Points to DPB
 24691                                  ; Carry set if error (currently user FAILed to I 24)
 24692                                  ;
 24693                                  ; DS - set to DOSDATA
 24694                                  ;
 24695                                  ;----------------------------------------------------------------------------
 24696                                  
 24697                                  BUFWRT:
 24698 0000535B A1[5A05]                        MOV     AX,[SECPOS]
 24699                                          ; MSDOS 6.0
 24700                                  	;ADD	AX,1            	; Set for next sector
 24701                                          ;MOV	[SECPOS],AX 		;F.C. >32mb	;AN000;
 24702                                          ;ADC	[SECPOS+2],0		;F.C. >32mb	;AN000;
 24703                                          ;MOV	AX,[SECPOS+2]		;F.C. >32mb	;AN000;
 24704                                          ;CMP	AX,[VALSEC+2]		;F.C. >32mb	;AN000;
 24705                                          ;MOV	AL,1			;F.C. >32mb	;AN000;
 24706                                          ;JA	short NOREAD		;F.C. >32mb	;AN000;
 24707                                          ;JB	short doread		;F.C. >32mb	;AN000;
 24708                                          ;MOV	AX,[SECPOS]		;F.C. >32mb	;AN000;
 24709                                  	; MSDOS 3.3
 24710 0000535E 40                      	INC	AX
 24711 0000535F A3[5A05]                	MOV	[SECPOS],AX ; 09/09/2018
 24712                                  	; MSDOS 3.3 (& MSDOS 6.0)
 24713 00005362 3B06[5C05]                      CMP     AX,[VALSEC]		; Has sector been written before?
 24714 00005366 B001                            MOV     AL,1
 24715 00005368 7702                            JA	short NOREAD		; Skip preread if SECPOS>VALSEC
 24716                                  ;doread:
 24717 0000536A 30C0                            XOR     AL,AL
 24718                                  NOREAD:
 24719 0000536C 06                              PUSH	ES
 24720 0000536D E878FF                          CALL    BUFSEC
 24721 00005370 72BA                    	JC	short BUF_IO_FAIL
 24722 00005372 8E1E[DC02]                      MOV     DS,[DMAADD+2]
 24723 00005376 D1E9                            SHR     CX,1
 24724                                  
 24725                                  ;M039
 24726                                  	; MSDOS 3.3
 24727 00005378 7301                    	JNC     short EVENWRT ; 09/09/2018
 24728 0000537A A4                      	MOVSB
 24729                                  EVENWRT:
 24730 0000537B F3A5                    	REP     MOVSW
 24731                                  
 24732                                  ;	   CX = # of whole WORDs; CF=1 if odd # of bytes.
 24733                                  ;       DS:SI-> Source within Transfer memory block.
 24734                                  ;       ES:DI-> Destination within Buffer.
 24735                                  
 24736                                  	; MSDOS 6.0
 24737                                  	;rep	movsw			;Copy Transfer memory to Buffer.
 24738                                  	;adc	cx,0                    ;CX=1 if odd # of bytes, else CX=0.
 24739                                  	;rep	movsb                   ;Copy last byte.
 24740                                  ;M039
 24741 0000537D 07                              POP	ES
 24742                                  
 24743                                  ;hkn; SS override
 24744 0000537E 36C51E[7405]                    LDS     BX,[SS:CURBUF]
 24745                                  
 24746                                  	; MSDOS 6.0
 24747                                          ;TEST	byte [BX+BUFFINFO.buf_flags],buf_dirty
 24748                                  	;				;LB. if already dirty		  ;AN000;
 24749                                          ;JNZ	short yesdirty5		;LB.  don't increment dirty count ;AN000;
 24750                                  	;call	INC_DIRTY_COUNT		;LB.				  ;AN000;
 24751                                  	
 24752                                  	;or	byte [bx+5],40h
 24753 00005383 804F0540                        OR	byte [BX+BUFFINFO.buf_flags],buf_dirty
 24754                                  ;yesdirty5:
 24755                                  	;lea	si,[bx+16]
 24756 00005387 8D7710                          LEA     SI,[BX+BUFINSIZ]
 24757 0000538A 29F7                            SUB     DI,SI                   ; Position in buffer
 24758                                  ;M039
 24759                                  	; MSDOS 3.3
 24760 0000538C 89FE                    	MOV     SI,DI
 24761 0000538E 89DF                    	MOV     DI,BX
 24762 00005390 E8470A                  	call	PLACEBUF
 24763                                  	;cmp	si,[es:bp+2]
 24764 00005393 263B7602                	CMP     SI,[ES:BP+DPB.SECTOR_SIZE] ; Written last byte?
 24765 00005397 7203                    	JB	short WBUFPLACED	; No, leave buf where it is
 24766 00005399 E8A00A                  	call	PLACEHEAD               ; Make it prime candidate for chucking
 24767                                                                          ;  even though it is MRU.
 24768                                  	; MSDOS 6.0
 24769                                  	;CMP	SI,[ES:BP+DPB.SECTOR_SIZE] ; Written last byte?
 24770                                          ;JB	short WBUFPLACED	; No, leave buf where it is
 24771                                          ;MOV	[BufferQueue],BX	; Make it prime candidate for
 24772                                  					; chucking even though it is MRU.
 24773                                  ;M039
 24774                                  
 24775                                  WBUFPLACED:
 24776 0000539C F8                              CLC
 24777 0000539D 16                      	push	ss
 24778 0000539E 1F                      	pop	ds
 24779 0000539F C3                              retn
 24780                                  
 24781                                  ;Break   <NEXTSEC -- Compute next sector to read or write>
 24782                                  ;---------------------------------------------------------------------------
 24783                                  ;
 24784                                  ; Procedure Name : NEXTSEC
 24785                                  ;
 24786                                  ; Compute the next sector to read or write
 24787                                  ; ES:BP Points to DPB
 24788                                  ;
 24789                                  ;---------------------------------------------------------------------------
 24790                                  
 24791                                  NEXTSEC:
 24792 000053A0 F606[0F05]FF            	test	byte [TRANS],0FFh ; -1 
 24793 000053A5 7426                            JZ	short CLRET
 24794                                  
 24795 000053A7 A0[0E05]                        MOV     AL,[SECCLUSPOS]
 24796 000053AA FEC0                            INC     AL
 24797                                  	;cmp	al,[es:bp+4]
 24798 000053AC 263A4604                        CMP     AL,[ES:BP+DPB.CLUSTER_MASK]
 24799 000053B0 7618                            JBE	short SAVPOS
 24800                                  
 24801 000053B2 8B1E[5405]                      MOV     BX,[CLUSNUM]
 24802 000053B6 E87D06                          call	IsEOF
 24803 000053B9 7314                            JAE	short NONEXT
 24804                                  
 24805 000053BB E88F06                          call	UNPACK
 24806 000053BE 720F                            JC	short NONEXT
 24807                                  clusgot:
 24808 000053C0 893E[5405]                      MOV     [CLUSNUM],DI
 24809 000053C4 FF06[5205]                      INC     word [LASTPOS]
 24810 000053C8 B000                            MOV     AL,0
 24811                                  SAVPOS:
 24812 000053CA A2[0E05]                        MOV     [SECCLUSPOS],AL
 24813                                  CLRET:
 24814 000053CD F8                              CLC
 24815 000053CE C3                              retn
 24816                                  NONEXT:
 24817 000053CF F9                              STC
 24818 000053D0 C3                              retn
 24819                                  
 24820                                  ;Break	<OPTIMIZE -- DO A USER DISK REQUEST WELL>
 24821                                  ;----------------------------------------------------------------------------
 24822                                  ;
 24823                                  ; Procedure Name : OPTIMIZE
 24824                                  ;
 24825                                  ; Inputs:
 24826                                  ;       BX = Physical cluster
 24827                                  ;       CX = No. of records
 24828                                  ;       DL = sector within cluster
 24829                                  ;       ES:BP = Base of drives parameters
 24830                                  ;       [NEXTADD] = transfer address
 24831                                  ; Outputs:
 24832                                  ;       AX = No. of records remaining
 24833                                  ;       BX = Transfer address
 24834                                  ;       CX = No. or records to be transferred
 24835                                  ;       DX = Physical sector address            (LOW)
 24836                                  ;       [HIGH_SECTOR] = Physical sector address (HIGH)
 24837                                  ;       DI = Next cluster
 24838                                  ;       [CLUSNUM] = Last cluster accessed
 24839                                  ;       [NEXTADD] updated
 24840                                  ;       Carry set if error (currently user FAILed to I 24)
 24841                                  ; ES:BP unchanged. Note that segment of transfer not set.
 24842                                  ;
 24843                                  ;---------------------------------------------------------------------------
 24844                                  
 24845                                  OPTIMIZE:
 24846 000053D1 52                      	PUSH    DX
 24847 000053D2 53                              PUSH    BX
 24848                                  	;mov	al,[es:bp+4]
 24849 000053D3 268A4604                        MOV     AL,[ES:BP+DPB.CLUSTER_MASK]
 24850 000053D7 FEC0                            INC     AL              ; Number of sectors per cluster
 24851 000053D9 88C4                            MOV     AH,AL
 24852 000053DB 28D0                            SUB     AL,DL           ; AL = Number of sectors left in first cluster
 24853 000053DD 89CA                            MOV     DX,CX
 24854 000053DF B90000                          MOV     CX,0
 24855                                  OPTCLUS:
 24856                                  ; AL has number of sectors available in current cluster
 24857                                  ; AH has number of sectors available in next cluster
 24858                                  ; BX has current physical cluster
 24859                                  ; CX has number of sequential sectors found so far
 24860                                  ; DX has number of sectors left to transfer
 24861                                  ; ES:BP Points to DPB
 24862                                  ; ES:SI has FAT pointer
 24863                                  
 24864                                  do_norm3:
 24865 000053E2 E86806                          call	UNPACK
 24866 000053E5 7237                            JC	short OP_ERR
 24867                                  clusgot2:
 24868 000053E7 00C1                    	ADD	CL,AL
 24869 000053E9 80D500                          ADC     CH,0
 24870 000053EC 39D1                            CMP     CX,DX
 24871 000053EE 7333                            JAE	short BLKDON
 24872 000053F0 88E0                            MOV     AL,AH
 24873 000053F2 43                              INC     BX
 24874 000053F3 39DF                            CMP     DI,BX
 24875 000053F5 74EB                            JZ	short OPTCLUS
 24876 000053F7 4B                              DEC     BX
 24877                                  FINCLUS:
 24878 000053F8 891E[5405]                      MOV     [CLUSNUM],BX    ; Last cluster accessed
 24879 000053FC 29CA                            SUB     DX,CX           ; Number of sectors still needed
 24880 000053FE 52                              PUSH    DX
 24881 000053FF 89C8                            MOV     AX,CX
 24882                                  	;mul	word[ES:BP+2]
 24883 00005401 26F76602                        MUL	word [ES:BP+DPB.SECTOR_SIZE] 
 24884                                  				; Number of sectors times sector size
 24885 00005405 8B36[5005]                      MOV     SI,[NEXTADD]
 24886 00005409 01F0                            ADD     AX,SI           ; Adjust by size of transfer
 24887 0000540B A3[5005]                        MOV     [NEXTADD],AX
 24888 0000540E 58                              POP     AX              ; Number of sectors still needed
 24889 0000540F 5A                              POP     DX              ; Starting cluster
 24890 00005410 29D3                            SUB     BX,DX           ; Number of new clusters accessed
 24891 00005412 011E[5205]                      ADD     [LASTPOS],BX
 24892 00005416 5B                              POP     BX              ; BL = sector postion within cluster
 24893 00005417 E81700                  	call	FIGREC
 24894 0000541A 89F3                            MOV     BX,SI
 24895 0000541C F8                      	CLC
 24896 0000541D C3                              retn
 24897                                  
 24898                                  OP_ERR:
 24899 0000541E 83C404                          ADD     SP,4
 24900 00005421 F9                      	STC
 24901 00005422 C3                              retn
 24902                                  
 24903                                  BLKDON:
 24904 00005423 29D1                            SUB     CX,DX           ; Number of sectors in cluster we don't want
 24905 00005425 28CC                            SUB     AH,CL           ; Number of sectors in cluster we accepted
 24906 00005427 FECC                            DEC     AH              ; Adjust to mean position within cluster
 24907 00005429 8826[0E05]                      MOV     [SECCLUSPOS],AH
 24908 0000542D 89D1                            MOV     CX,DX           ; Anyway, make the total equal to the request
 24909 0000542F EBC7                            JMP     SHORT FINCLUS
 24910                                  
 24911                                  ;Break	<FIGREC -- Figure sector in allocation unit>
 24912                                  ;---------------------------------------------------------------------------
 24913                                  ;
 24914                                  ; Procedure Name : FIGREC
 24915                                  ;
 24916                                  ; Inputs:
 24917                                  ;       DX = Physical cluster number
 24918                                  ;       BL = Sector position within cluster
 24919                                  ;       ES:BP = Base of drive parameters
 24920                                  ; Outputs:
 24921                                  ;       DX = physical sector number           (LOW)
 24922                                  ;       [HIGH_SECTOR] Physical sector address (HIGH)
 24923                                  ; No other registers affected.
 24924                                  ;
 24925                                  ;---------------------------------------------------------------------------
 24926                                  
 24927                                  FIGREC:
 24928 00005431 51                              PUSH    CX
 24929                                  	;mov	cl,[es:bp+5]
 24930 00005432 268A4E05                        MOV     CL,[ES:BP+DPB.CLUSTER_SHIFT]
 24931 00005436 4A                              DEC     DX
 24932 00005437 4A                              DEC     DX
 24933                                  
 24934                                  ;hkn; SS override HIGH_SECTOR
 24935                                  	; MSDOS 6.0
 24936                                  	;MOV	word [SS:HIGH_SECTOR],0		;F.C. >32mb
 24937                                  	;OR	CL,CL				;F.C. >32mb
 24938                                  	;JZ	short noshift			;F.C. >32mb
 24939                                  	;XOR	CH,CH 				;F.C. >32mb
 24940                                  ;rotleft:					;F.C. >32mb
 24941                                  	;CLC					;F.C. >32mb
 24942                                  	;RCL	DX,1				;F.C. >32mb
 24943                                  	;RCL	word [HIGH_SECTOR],1		;F.C. >32mb
 24944                                  	;LOOP	rotleft				;F.C. >32mb
 24945                                  ;noshift:
 24946                                  
 24947                                  	; MSDOS 3.3
 24948 00005438 D3E2                    	SHL     DX,CL
 24949                                  	; MSDOS 3.3 (& MSDOS 6.0)
 24950 0000543A 08DA                            OR      DL,BL
 24951                                  	;add	dx,[es:bp+0Bh]
 24952 0000543C 2603560B                        ADD     DX,[ES:BP+DPB.FIRST_SECTOR]
 24953                                  	; MSDOS 6.0
 24954                                          ;ADC	word [HIGH_SECTOR],0		;F.C. >32mb
 24955                                  	; MSDOS 3.3 (& MSDOS 6.0)        
 24956 00005440 59                      	POP     CX
 24957                                  figrec_retn:
 24958 00005441 C3                              retn
 24959                                  
 24960                                  ; 30/07/2018 - Retro DOS v3.0
 24961                                  ; IBMDOS.COM (MSDOS3.3, 1987) - Offset 
 24962                                  
 24963                                  ;Break   <ALLOCATE -- Assign disk space>
 24964                                  ;---------------------------------------------------------------------------
 24965                                  ;
 24966                                  ; Procedure Name : ALLOCATE - Allocate Disk Space
 24967                                  ;
 24968                                  ;   ALLOCATE is called to allocate disk clusters. The new clusters are
 24969                                  ;   FAT-chained onto the end of the existing file.
 24970                                  ;
 24971                                  ;   The DPB contains the cluster # of the last free cluster allocated
 24972                                  ;   (dpb_next_free). We start at this cluster and scan towards higher
 24973                                  ;   numbered clusters, looking for the necessary free blocks.
 24974                                  ;
 24975                                  ;   Once again, fancy terminology gets in the way of corrct coding. When
 24976                                  ;   using next_free, start scanning AT THAT POINT and not the one following it.
 24977                                  ;   This fixes the boundary condition bug when only free = next_free = 2.
 24978                                  ;
 24979                                  ;       If we get to the end of the disk without satisfaction:
 24980                                  ;
 24981                                  ;           if (dpb_next_free == 2) then we've scanned the whole disk.
 24982                                  ;               return (insufficient_disk_space)
 24983                                  ;           ELSE
 24984                                  ;               dpb_next_free = 2; start scan over from the beginning.
 24985                                  ;
 24986                                  ;   Note that there is no multitasking interlock. There is no race when
 24987                                  ;   examining the entrys in an in-core FAT block since there will be no
 24988                                  ;   context switch. When UNPACK context switches while waiting for a FAT read
 24989                                  ;   we are done with any in-core FAT blocks, so again there is no race. The
 24990                                  ;   only special concern is that V2 and V3 MSDOS left the last allocated
 24991                                  ;   cluster as "00"; marking it EOF only when the entire alloc request was
 24992                                  ;   satisfied. We can't allow another activation to think this cluster is
 24993                                  ;   free, so we give it a special temporary mark to show that it is, indeed,
 24994                                  ;   allocated.
 24995                                  ;
 24996                                  ;   Note that when we run out of space this algorithem will scan from
 24997                                  ;   dpb_next_free to the end, then scan from cluster 2 through the end,
 24998                                  ;   redundantly scanning the later part of the disk. This only happens when
 24999                                  ;   we run out of space, so sue me.
 25000                                  ;
 25001                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
 25002                                  ;            C  A  V  E  A  T     P  A  T  T  E  R  S  O  N                ;
 25003                                  ;                                                                          ;
 25004                                  ;   The use of FATBYT and RESTFATBYT is somewhat mysterious. Here is the
 25005                                  ;   explanation:
 25006                                  ;
 25007                                  ;   In the NUL file case (sf_firclus currently 0) ALLOCATE is called with
 25008                                  ;   entry BX = 0. What needs to be done in this case is to stuff the cluster
 25009                                  ;   number of the first cluster allocated in sf_firclus when the ALLOCATE is
 25010                                  ;   complete. THIS VALUE IS SAVED TEMPORARILY IN CLUSTER 0, HENCE THE CURRENT
 25011                                  ;   VALUE IN CLUSTER 0 MUST BE SAVED AND RESTORED. This is a side effect of
 25012                                  ;   the fact that PACK and UNPACK don't treat requests for clusters 0 and 1 as
 25013                                  ;   errors. This "stuff" is done by the call to PACK which is right before
 25014                                  ;   the
 25015                                  ;           LOOP   findfre         ; alloc more if needed
 25016                                  ;   instruction when the first cluster is allocated to the nul file. The
 25017                                  ;   value is recalled from cluster 0 and stored at sf_firclus at ads4:
 25018                                  ;
 25019                                  ;   This method is obviously useless (because it is non-reentrant) for
 25020                                  ;   multitasking, and will have to be changed. Storing the required value on
 25021                                  ;   the stack is recommended. Setting sf_firclus at the PACK of cluster 0
 25022                                  ;   (instead of actually doing the PACK) is BAD because it doesn't handle
 25023                                  ;   problems with INT 24 well.
 25024                                  ;
 25025                                  ;            C  A  V  E  A  T     P  A  T  T  E  R  S  O  N                ;
 25026                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
 25027                                  ;                                                                          ;
 25028                                  ;       ENTRY   BX = Last cluster of file (0 if null file)
 25029                                  ;               CX = No. of clusters to allocate
 25030                                  ;               ES:BP = Base of drive parameters
 25031                                  ;               [THISSFT] = Points to SFT
 25032                                  ;
 25033                                  ;       EXIT    'C' set if insufficient space
 25034                                  ;                 [FAILERR] can be tested to see the reason for failure
 25035                                  ;                 CX = max. no. of clusters that could be added to file
 25036                                  ;               'C' clear if space allocated
 25037                                  ;                 BX = First cluster allocated
 25038                                  ;                 FAT is fully updated
 25039                                  ;                 sf_FIRCLUS field of SFT set if file was null
 25040                                  ;
 25041                                  ;       USES    ALL but SI, BP
 25042                                  
 25043                                  ;callmagic  proc near
 25044                                  ;       push    ds                             ;push segment of routine 
 25045                                  ;       push    Offset MagicPatch              ;push offset for routine
 25046                                  ;       retf                                   ;simulate jmp far
 25047                                  ;                                              ;far return address is on
 25048                                  ;                                              ;stack, so far return from
 25049                                  ;                                              ;call will return this routine
 25050                                  ;callmagic  endp
 25051                                  
 25052                                  ALLOCATE:
 25053                                  	; 10/09/2018
 25054                                  ;BEGIN MAGICDRV MODIFICATIONS
 25055                                  ;
 25056                                  ;7/5/92 scottq
 25057                                  ;
 25058                                  ;This is the disk compression patch location which allows
 25059                                  ;the disk compression software to fail allocations if the
 25060                                  ;FAT would allows allocation, but the free space for compressed
 25061                                  ;data would not.
 25062                                  ;        
 25063                                  ;;;	call    far ptr MAGICPATCH
 25064                                  ;;; We cannot do a far call since we cannot have fix-ups[romdos,hidos],
 25065                                  ;;; but we do know the segment and offset of the routine
 25066                                  ;;; so simulate a far call to dosdata:magicpatch
 25067                                  ;;; note dosassume above, so DS -> dosdata
 25068                                  
 25069                                  	; MSDOS 6.0
 25070                                          ;clc				;clear carry so we fall through
 25071                                  	;				;if no patch is present
 25072                                  	;push	cs			;push segment for far return
 25073                                          ;call	callmagic		;this is a near call
 25074                                          ;jnc	short Regular_Allocate_Path
 25075                                  	;jmp	Disk_Full_Return
 25076                                  
 25077                                  	; MSDOS 6.0
 25078                                          ;clc				;clear carry so we fall through
 25079                                  	;				;if no patch is present
 25080                                  	;push	cs			;push segment for far return
 25081                                          ;call	callmagic		;this is a near call
 25082                                          ;jnc	short Regular_Allocate_Path
 25083                                  	;jmp	Disk_Full_Return ; 10/09/2018 !
 25084                                  
 25085                                  ;Regular_Allocate_Path:
 25086                                  ;END MAGICDRV MODIFICATIONS
 25087                                  
 25088 00005442 53                              PUSH    BX                      ; save (bx)
 25089 00005443 31DB                            XOR     BX,BX
 25090 00005445 E80506                  	call	UNPACK
 25091 00005448 893E[2E05]                      MOV     [FATBYT],DI             ; save correct cluster 0 value
 25092 0000544C 5B                              POP     BX
 25093 0000544D 72F2                            jc	short figrec_retn	; abort if error   [INTERR?]
 25094                                  
 25095 0000544F 51                              PUSH    CX
 25096 00005450 53                              PUSH    BX
 25097                                  
 25098 00005451 89DA                            MOV     DX,BX
 25099                                  	;mov	bx,[es:bp+1Ch]
 25100 00005453 268B5E1C                        mov     bx,[ES:BP+DPB.NEXT_FREE]
 25101 00005457 83FB02                          cmp     bx,2
 25102 0000545A 7709                            ja	short FINDFRE
 25103                                  
 25104                                  ;   couldn't find enough free space beyond dpb_next_free, or dpb_next_free is
 25105                                  ;   <2 or >dpb_max_clus. Reset it and restart the scan
 25106                                  
 25107                                  ads1:
 25108                                  	;mov	word [es:bp+1Ch],2
 25109 0000545C 26C7461C0200                    mov     word [ES:BP+DPB.NEXT_FREE],2
 25110 00005462 BB0100                          mov     bx,1                    ; Counter next instruction so first
 25111                                                                          ;       cluster examined is 2
 25112                                  
 25113                                  ;   Scanning both forwards and backwards for a free cluster
 25114                                  ;
 25115                                  ;       (BX) = forwards scan pointer
 25116                                  ;       (CX) = clusters remaining to be allocated
 25117                                  ;       (DX) = current last cluster in file
 25118                                  ;       (TOS) = last cluster of file
 25119                                  
 25120                                  FINDFRE:
 25121 00005465 43                              INC     BX
 25122                                  	;cmp	bx,[es:bp+0Dh]
 25123 00005466 263B5E0D                        CMP	BX,[ES:BP+DPB.MAX_CLUSTER]
 25124 0000546A 7757                    	ja	short ads7	; at end of disk
 25125 0000546C E8DE05                          call	UNPACK          ; check out this cluster
 25126 0000546F 722F                            jc	short ads4	; FAT error             [INTERR?]
 25127 00005471 75F2                            jnz	short FINDFRE	; not free, keep on truckin
 25128                                  
 25129                                  ;   Have found a free cluster. Chain it to the file
 25130                                  ;
 25131                                  ;       (BX) = found free cluster #
 25132                                  ;       (DX) = current last cluster in file
 25133                                  
 25134                                  	;mov	[es:bp+1Ch],bx
 25135 00005473 26895E1C                        mov	[ES:BP+DPB.NEXT_FREE],bx ; next time start search here
 25136 00005477 92                              xchg    ax,dx           ; save (dx) in ax
 25137 00005478 BA0100                          mov     dx,1            ; mark this free guy as "1"
 25138 0000547B E81806                  	call	PACK            ; set special "temporary" mark
 25139 0000547E 7220                            jc	short ads4	; FAT error             [INTERR?]
 25140                                  	;cmp	word [es:bp+1Eh],-1
 25141 00005480 26837E1EFF                      CMP	word [ES:BP+DPB.FREE_CNT],-1 ; Free count valid?
 25142 00005485 7404                            JZ	short NO_ALLOC	; No
 25143                                  	;dec	word [es:bp+1Eh]
 25144 00005487 26FF4E1E                        DEC     word [ES:BP+DPB.FREE_CNT] ; Reduce free count by 1
 25145                                  NO_ALLOC:
 25146 0000548B 92                              xchg    ax,dx           ; (dx) = current last cluster in file
 25147 0000548C 87DA                            XCHG    BX,DX
 25148 0000548E 89D0                            MOV     AX,DX
 25149 00005490 E80306                  	call	PACK            ; link free cluster onto file
 25150                                                                  ;  CAVEAT.. On Nul file, first pass stuffs
 25151                                                                  ;    cluster 0 with FIRCLUS value.
 25152 00005493 720B                            jc	short ads4	; FAT error [INTERR?]
 25153 00005495 93                              xchg    BX,AX           ; (BX) = last one we looked at
 25154 00005496 89DA                            mov     dx,bx           ; (dx) = current end of file
 25155 00005498 E2CB                            LOOP    FINDFRE         ; alloc more if needed
 25156                                  
 25157                                  ;   We've successfully extended the file. Clean up and exit
 25158                                  ;
 25159                                  ;       (BX) = last cluster in file
 25160                                  
 25161 0000549A BAFFFF                          MOV     DX,0FFFFH
 25162 0000549D E8F605                  	call	PACK            ; mark last cluster EOF
 25163                                  
 25164                                  ;   Note that FAT errors jump here to clean the stack and exit. This saves us
 25165                                  ;   2 whole bytes.  Hope its worth it...
 25166                                  ;
 25167                                  ;       'C' set iff error
 25168                                  ;       calling (BX) and (CX) pushed on stack
 25169                                  
 25170                                  ads4:   
 25171 000054A0 5B                      	POP     BX
 25172 000054A1 59                              POP     CX              ; Don't need this stuff since we're successful
 25173 000054A2 729D                            jc	short figrec_retn
 25174 000054A4 E8A605                          call	UNPACK          ; Get first cluster allocated for return
 25175                                                                  ; CAVEAT... In nul file case, UNPACKs cluster 0.
 25176 000054A7 7298                            jc	short figrec_retn
 25177 000054A9 E82D00                  	call	RESTFATBYT      ; Restore correct cluster 0 value
 25178 000054AC 7293                            jc	short figrec_retn
 25179 000054AE 87DF                            XCHG    BX,DI           ; (DI) = last cluster in file upon our entry
 25180 000054B0 09FF                            OR      DI,DI           ; clear 'C'
 25181 000054B2 758D                    	jnz	short figrec_retn ; we were extending an existing file
 25182                                  
 25183                                  ;   We were doing the first allocation for a new file. Update the SFT cluster
 25184                                  ;   info
 25185                                  dofastk:
 25186 000054B4 06                              PUSH	ES
 25187 000054B5 C43E[3605]                      LES     DI,[THISSFT]
 25188                                  	;mov	[es:di+0Bh],bx
 25189 000054B9 26895D0B                        MOV     [ES:DI+SF_ENTRY.sf_firclus],BX
 25190                                  	;mov	[es:di+1Bh],bx
 25191 000054BD 26895D1B                        MOV     [ES:DI+SF_ENTRY.sf_lstclus],BX
 25192 000054C1 07                              POP	ES
 25193 000054C2 C3                              retn
 25194                                  
 25195                                  ;** we're at the end of the disk, and not satisfied. See if we've scanned ALL
 25196                                  ;   of the disk...
 25197                                  
 25198                                  ads7:   
 25199 000054C3 26837E1C02              	cmp	word [ES:BP+DPB.NEXT_FREE],2
 25200 000054C8 7592                    	jnz	short ads1	; start scan from front of disk
 25201                                  
 25202                                  ;   Sorry, we've gone over the whole disk, with insufficient luck. Lets give
 25203                                  ;   the space back to the free list and tell the caller how much he could have
 25204                                  ;   had.  We have to make sure we remove the "special mark" we put on the last
 25205                                  ;   cluster we were able to allocate, so it doesn't become orphaned.
 25206                                  ;
 25207                                  ;       (CX) = clusters remaining to be allocated
 25208                                  ;       (TOS) = last cluster of file (before call to ALLOCATE)
 25209                                  ;       (TOS+1) = # of clusters wanted to allocate
 25210                                  
 25211 000054CA 5B                              POP     BX              ; (BX) = last cluster of file
 25212 000054CB BAFFFF                          MOV     DX,0FFFFH
 25213 000054CE E81A00                  	call	RELBLKS         ; give back any clusters just alloced
 25214 000054D1 58                              POP     AX              ; No. of clusters requested
 25215                                                                  ; Don't "retc". We are setting Carry anyway,
 25216                                                                  ;   Alloc failed, so proceed with return CX
 25217                                                                  ;   setup.
 25218 000054D2 29C8                            SUB     AX,CX           ; AX=No. of clusters allocated
 25219 000054D4 E80200                  	call	RESTFATBYT      ; Don't "retc". We are setting Carry anyway,
 25220                                                                  ;   Alloc failed.
 25221                                  Disk_Full_Return:               ;label added for magic patch 8-6-92 scottq
 25222                                          ; MSDOS 6.0
 25223                                  	;MOV	byte [DISK_FULL],1 ;MS. indicating disk full
 25224 000054D7 F9                              STC
 25225 000054D8 C3                              retn
 25226                                  
 25227                                  ;-----------------------------------------------------------------------
 25228                                  ;
 25229                                  ; Procedure Name : RESTFATBYT
 25230                                  ;
 25231                                  ; SEE ALLOCATE CAVEAT
 25232                                  ;       Carry set if error (currently user FAILed to I 24)
 25233                                  ;-----------------------------------------------------------------------
 25234                                  
 25235                                  RESTFATBYT:
 25236 000054D9 53                              PUSH    BX
 25237 000054DA 52                              PUSH    DX
 25238 000054DB 57                              PUSH    DI
 25239 000054DC 31DB                            XOR     BX,BX
 25240 000054DE 8B16[2E05]                      MOV     DX,[FATBYT]
 25241 000054E2 E8B105                  	call	PACK
 25242 000054E5 5F                              POP     DI
 25243 000054E6 5A                              POP     DX
 25244 000054E7 5B                              POP     BX
 25245                                  RELEASE_flush:
 25246 000054E8 C3                      	retn
 25247                                  
 25248                                  ;Break	<RELEASE -- DEASSIGN DISK SPACE>
 25249                                  ;---------------------------------------------------------------------------
 25250                                  ;
 25251                                  ; Procedure Name : RELEASE
 25252                                  ;
 25253                                  ; Inputs:
 25254                                  ;       BX = Cluster in file
 25255                                  ;       ES:BP = Base of drive parameters
 25256                                  ; Function:
 25257                                  ;       Frees cluster chain starting with [BX]
 25258                                  ;       Carry set if error (currently user FAILed to I 24)
 25259                                  ; AX,BX,DX,DI all destroyed. Other registers unchanged.
 25260                                  ;
 25261                                  ;-----------------------------------------------------------------------------
 25262                                  
 25263                                  RELEASE:
 25264 000054E9 31D2                            XOR     DX,DX
 25265                                  
 25266                                  	;entry	RELBLKS
 25267                                  RELBLKS:
 25268                                  
 25269                                  ;   Enter here with DX=0FFFFH to put an end-of-file mark in the first cluster
 25270                                  ;   and free the rest in the chain.
 25271                                  
 25272 000054EB E85F05                  	call	UNPACK
 25273 000054EE 72F8                    	jc	short RELEASE_flush
 25274 000054F0 74F6                    	jz	short RELEASE_flush
 25275 000054F2 89F8                            MOV     AX,DI
 25276 000054F4 52                              PUSH    DX
 25277 000054F5 E89E05                  	call	PACK
 25278 000054F8 5A                              POP     DX
 25279 000054F9 72ED                    	jc	short RELEASE_flush
 25280 000054FB 09D2                            OR      DX,DX
 25281 000054FD 750B                            JNZ	short NO_DEALLOC	; Was putting EOF mark
 25282                                  	;cmp	word [es:bp+1Eh],-1
 25283 000054FF 26837E1EFF              	CMP     word [ES:BP+DPB.FREE_CNT],-1 ; Free count valid?
 25284 00005504 7404                            JZ	short NO_DEALLOC	; No
 25285 00005506 26FF461E                        INC	word [ES:BP+DPB.FREE_CNT] ; Increase free count by 1
 25286                                  NO_DEALLOC:
 25287 0000550A 89C3                            MOV     BX,AX
 25288 0000550C 48                              dec     ax              ; check for "1"
 25289 0000550D 74D9                    	jz	short RELEASE_flush	; is last cluster of incomplete chain
 25290 0000550F E82405                  	call	IsEOF
 25291 00005512 72D5                            JB	short RELEASE	; Carry clear if JMP not taken
 25292                                  
 25293                                  ;RELEASE_flush:
 25294                                  	; MSDOS 6.0
 25295                                  	;mov	al,[es:bp]
 25296                                  	;;MOV	AL,[ES:BP+DPB.DRIVE]
 25297                                  	;push	si		; FLUSHBUF may trash these and we guarantee
 25298                                  	;push	cx		;  them to be preserved.
 25299                                  	;push	es
 25300                                  	;push	bp
 25301                                  	;call	FLUSHBUF	; commit buffers for this drive
 25302                                  	;pop	bp
 25303                                  	;pop	es
 25304                                  	;pop	cx
 25305                                  	;pop	si
 25306                                  RET12:
 25307 00005514 C3                      	retn
 25308                                  
 25309                                  ;Break	<GETEOF -- Find the end of a file>
 25310                                  ;------------------------------------------------------------------------
 25311                                  ;
 25312                                  ; Procedure Name : GETEOF
 25313                                  ;
 25314                                  ; Inputs:
 25315                                  ;       ES:BP Points to DPB
 25316                                  ;       BX = Cluster in a file
 25317                                  ;       DS = CS
 25318                                  ; Outputs:
 25319                                  ;       BX = Last cluster in the file
 25320                                  ;       Carry set if error (currently user FAILed to I 24)
 25321                                  ; DI destroyed. No other registers affected.
 25322                                  ;
 25323                                  ;--------------------------------------------------------------------------
 25324                                  
 25325                                  GETEOF:
 25326 00005515 E83505                  	call	UNPACK
 25327 00005518 72FA                            jc	short RET12
 25328 0000551A 53                              PUSH    BX
 25329 0000551B 89FB                            MOV     BX,DI
 25330 0000551D E81605                  	call	IsEOF
 25331 00005520 5B                              POP     BX
 25332 00005521 73F1                            JAE     short RET12
 25333 00005523 89FB                            MOV     BX,DI
 25334 00005525 EBEE                            JMP     short GETEOF
 25335                                  
 25336                                  ;============================================================================
 25337                                  ; FCB.ASM, MSDOS 6.0, 1991
 25338                                  ;============================================================================
 25339                                  ; 30/07/2018 - Retro DOS v3.0
 25340                                  
 25341                                  ;	TITLE	FCB - FCB parse calls for MSDOS
 25342                                  ;	NAME	FCB
 25343                                  
 25344                                  ;**	FCB.ASM -  Low level routines for parsing names into FCBs and analyzing
 25345                                  ;		   filename characters
 25346                                  ;
 25347                                  ;	MakeFcb
 25348                                  ;	NameTrans
 25349                                  ;	PATHCHRCMP
 25350                                  ;	GetLet
 25351                                  ;	UCase
 25352                                  ;	GetLet3
 25353                                  ;	GetCharType
 25354                                  ;	TESTKANJ
 25355                                  ;	NORMSCAN
 25356                                  ;	DELIM
 25357                                  ;
 25358                                  ;	Revision history:
 25359                                  ;
 25360                                  ;		A000  version 4.00  Jan. 1988
 25361                                  ;	
 25362                                  ;	M048 - access FILE_UCASE_TAB using DS rather than SS.
 25363                                  
 25364                                  TableLook	EQU -1
 25365                                  
 25366                                  SCANSEPARATOR	EQU	1
 25367                                  DRVBIT		EQU	2
 25368                                  NAMBIT		EQU	4
 25369                                  EXTBIT		EQU	8
 25370                                  
 25371                                  ;
 25372                                  ;----------------------------------------------------------------------------
 25373                                  ;
 25374                                  ; Procedure : MakeFcb
 25375                                  ;
 25376                                  ;----------------------------------------------------------------------------
 25377                                  ;
 25378                                  
 25379                                  MAKEFCB:
 25380                                  ;hkn; SS override
 25381 00005527 36C606[FA02]00          	MOV	BYTE [SS:SpaceFlag],0
 25382 0000552D 30D2                    	XOR	DL,DL		; Flag--not ambiguous file name
 25383                                  	;test	al,2
 25384 0000552F A802                    	test	AL,DRVBIT	; Use current drive field if default?
 25385 00005531 7504                    	JNZ	short DEFDRV
 25386 00005533 26C60500                	MOV	BYTE [ES:DI],0	; No - use default drive
 25387                                  DEFDRV:
 25388 00005537 47                      	INC	DI
 25389 00005538 B90800                  	MOV	CX,8
 25390                                  	;test	al,4
 25391 0000553B A804                    	test	AL,NAMBIT	; Use current name fields as default?
 25392 0000553D 93                      	XCHG	AX,BX		; Save bits in BX
 25393 0000553E B020                    	MOV	AL," "
 25394 00005540 7404                    	JZ	short FILLB	; If not, go fill with blanks
 25395 00005542 01CF                    	ADD	DI,CX
 25396 00005544 31C9                    	XOR	CX,CX		; Don't fill any
 25397                                  FILLB:
 25398 00005546 F3AA                    	REP	STOSB
 25399 00005548 B103                    	MOV	CL,3
 25400 0000554A F6C308                  	test	BL,EXTBIT	; Use current extension as default
 25401 0000554D 7404                    	JZ	short FILLB2
 25402 0000554F 01CF                    	ADD	DI,CX
 25403 00005551 31C9                    	XOR	CX,CX
 25404                                  FILLB2:
 25405 00005553 F3AA                    	REP	STOSB
 25406 00005555 91                      	XCHG	AX,CX		; Put zero in AX
 25407 00005556 AB                      	STOSW
 25408 00005557 AB                      	STOSW			; Initialize two words after to zero
 25409 00005558 83EF10                  	SUB	DI,16		; Point back at start
 25410                                  	;test	bl,1
 25411 0000555B F6C301                  	test	BL,SCANSEPARATOR; Scan off separators if not zero
 25412 0000555E 7409                    	JZ	short SKPSPC
 25413 00005560 E87300                  	CALL	SCANB		; Peel off blanks and tabs
 25414 00005563 E8CA00                  	CALL	DELIM		; Is it a one-time-only delimiter?
 25415 00005566 7504                    	JNZ	short NOSCAN
 25416 00005568 46                      	INC	SI		; Skip over the delimiter
 25417                                  SKPSPC:
 25418 00005569 E86A00                  	CALL	SCANB		; Always kill preceding blanks and tabs
 25419                                  NOSCAN:
 25420 0000556C E89C00                  	CALL	GETLET
 25421 0000556F 7616                    	JBE	short NODRV	; Quit if termination character
 25422 00005571 803C3A                  	CMP	BYTE [SI],":"	; Check for potential drive specifier
 25423 00005574 7511                    	JNZ	short NODRV
 25424 00005576 46                      	INC	SI		; Skip over colon
 25425 00005577 2C40                    	SUB	AL,"@"          ; Convert drive letter to drive number (A=1)
 25426 00005579 7607                    	JBE	short BADDRV	; Drive letter out of range
 25427                                  
 25428 0000557B 50                      	PUSH	AX
 25429 0000557C E8DB13                  	call	GetVisDrv
 25430 0000557F 58                      	POP	AX
 25431 00005580 7302                    	JNC	short HAVDRV
 25432                                  
 25433                                  	; MSDOS 6.0
 25434                                  ;hkn; SS override
 25435                                  	;CMP	byte [SS:DrvErr],error_not_DOS_disk
 25436                                  	;				; if not FAT drive ;AN000;
 25437                                  	;JZ	short HAVDRV		; assume ok	   ;AN000;
 25438                                  BADDRV:
 25439 00005582 B2FF                    	MOV	DL,-1
 25440                                  HAVDRV:
 25441 00005584 AA                      	STOSB			; Put drive specifier in first byte
 25442 00005585 46                      	INC	SI
 25443 00005586 4F                      	DEC	DI		; Counteract next two instructions
 25444                                  NODRV:
 25445 00005587 4E                      	DEC	SI		; Back up
 25446 00005588 47                      	INC	DI		; Skip drive byte
 25447                                  
 25448                                  	;entry	NORMSCAN
 25449                                  NORMSCAN:
 25450 00005589 B90800                  	MOV	CX,8
 25451 0000558C E81300                  	CALL	GETWORD 	; Get 8-letter file name
 25452 0000558F 803C2E                  	CMP	BYTE [SI],"."
 25453 00005592 7507                    	JNZ	short NODOT
 25454 00005594 46                      	INC	SI		; Skip over dot if present
 25455                                  
 25456                                  	; MSDOS6.0
 25457                                  ;hkn; SS override
 25458                                  	;TEST	word [SS:DOS34_FLAG],DBCS_VOLID2	;AN000;
 25459                                  	;JZ	short VOLOK				;AN000;
 25460                                  	;MOVSB			; 2nd byte of DBCS	;AN000;
 25461                                  	;MOV	CX,2					;AN000;
 25462                                  	;JMP	SHORT contvol				;AN000;
 25463                                  ;VOLOK:
 25464 00005595 B90300                  	MOV	CX,3		; Get 3-letter extension
 25465                                  contvol:
 25466 00005598 E80D00                  	CALL	MUSTGETWORD
 25467                                  NODOT:
 25468 0000559B 88D0                    	MOV	AL,DL
 25469                                  
 25470                                  	; MSDOS 6.0
 25471                                  	;and	word [ss:DOS34_FLAG],~DBCS_VOLID2 ; ### BUG FIX ###
 25472                                  
 25473 0000559D C3                      	retn
 25474                                  
 25475                                  NONAM:
 25476 0000559E 01CF                    	ADD	DI,CX
 25477 000055A0 4E                      	DEC	SI
 25478 000055A1 C3                      	retn
 25479                                  
 25480                                  GETWORD:
 25481 000055A2 E86600                  	CALL	GETLET		
 25482 000055A5 76F7                    	JBE	short NONAM	; Exit if invalid character
 25483 000055A7 4E                      	DEC	SI
 25484                                  
 25485                                  ;	UGH!!! Horrible bug here that should be fixed at some point:
 25486                                  ;	If the name we are scanning is longer than CX, we keep on reading!
 25487                                  
 25488                                  MUSTGETWORD:
 25489 000055A8 E86000                  	CALL	GETLET
 25490                                  
 25491                                  ;	If spaceFlag is set then we allow spaces in a pathname
 25492                                  
 25493                                  ;IF NOT TABLELOOK
 25494 000055AB 7223                    	JB	short FILLNAM
 25495                                  ;ENDIF
 25496 000055AD 750C                    	JNZ	short MustCheckCX
 25497                                  
 25498                                  ;hkn; SS override
 25499 000055AF 36F606[FA02]FF          	test	BYTE [SS:SpaceFlag],0FFh
 25500 000055B5 7419                    	JZ	short FILLNAM
 25501 000055B7 3C20                    	CMP	AL," "
 25502 000055B9 7515                    	JNZ	short FILLNAM
 25503                                  
 25504                                  MustCheckCX:
 25505 000055BB E3EB                    	JCXZ	MUSTGETWORD
 25506 000055BD 49                      	DEC	CX
 25507 000055BE 3C2A                    	CMP	AL,"*"          ; Check for ambiguous file specifier
 25508 000055C0 7504                    	JNZ	short NOSTAR
 25509 000055C2 B03F                    	MOV	AL,"?"
 25510 000055C4 F3AA                    	REP	STOSB
 25511                                  NOSTAR:
 25512 000055C6 AA                      	STOSB
 25513 000055C7 3C3F                    	CMP	AL,"?"
 25514 000055C9 75DD                    	JNZ	short MUSTGETWORD
 25515 000055CB 80CA01                  	OR	DL,1		; Flag ambiguous file name
 25516 000055CE EBD8                    	JMP	short MUSTGETWORD
 25517                                  FILLNAM:
 25518 000055D0 B020                    	MOV	AL," "
 25519 000055D2 F3AA                    	REP	STOSB
 25520 000055D4 4E                      	DEC	SI
 25521 000055D5 C3                      	retn
 25522                                  
 25523                                  SCANB:
 25524 000055D6 AC                      	LODSB
 25525 000055D7 E86200                  	CALL	SPCHK
 25526 000055DA 74FA                    	JZ	short SCANB
 25527 000055DC 4E                      	DEC	SI
 25528                                  scanb_retn:
 25529 000055DD C3                      	retn
 25530                                  
 25531                                  ;----------------------------------------------------------------------------
 25532                                  ;
 25533                                  ; Procedure Name : NameTrans
 25534                                  ;
 25535                                  ; NameTrans is used by FindPath to scan off an element of a path. We must
 25536                                  ; allow spaces in pathnames
 25537                                  ;
 25538                                  ;   Inputs:	DS:SI points to start of path element
 25539                                  ;   Outputs:	Name1 has unpacked name, uppercased
 25540                                  ;		ES = DOSGroup
 25541                                  ;		DS:SI advanced after name
 25542                                  ;   Registers modified: DI,AX,DX,CX
 25543                                  ;
 25544                                  ;----------------------------------------------------------------------------
 25545                                  
 25546                                  NameTrans:
 25547                                  ;hkn; SS override
 25548 000055DE 36C606[FA02]01          	MOV	BYTE [SS:SpaceFlag],1
 25549 000055E4 16                      	push	ss
 25550 000055E5 07                      	pop	es
 25551                                  
 25552                                  ;hkn; NAME1 is in DOSDATA
 25553 000055E6 BF[E604]                	MOV	DI,NAME1
 25554 000055E9 57                      	PUSH	DI
 25555 000055EA B82020                  	MOV	AX,'  '
 25556 000055ED B90500                  	MOV	CX,5
 25557 000055F0 AA                      	STOSB
 25558 000055F1 F3AB                    	REP	STOSW		; Fill "FCB" at NAME1 with spaces
 25559 000055F3 30C0                    	XOR	AL,AL		; Set stuff for NORMSCAN
 25560 000055F5 88C2                    	MOV	DL,AL
 25561 000055F7 AA                      	STOSB
 25562 000055F8 5F                      	POP	DI
 25563                                  
 25564 000055F9 E88DFF                  	CALL	NORMSCAN
 25565                                  
 25566                                  ;hkn; SS override for NAME1
 25567 000055FC 36803E[E604]E5          	CMP	byte [SS:NAME1],0E5H
 25568 00005602 75D9                    	jnz	short scanb_retn
 25569 00005604 36C606[E604]05          	MOV	byte [SS:NAME1],5 ; Magic name translation
 25570 0000560A C3                      	retn
 25571                                  
 25572                                  ;Break	<GETLET, DELIM -- CHECK CHARACTERS AND CONVERT>
 25573                                  
 25574                                  ;----------------------------------------------------------------------------
 25575                                  ;
 25576                                  ; Procedure Names : GetLet, UCase, GetLet3
 25577                                  ;
 25578                                  ; These routines take a character, convert it to upper case, and check
 25579                                  ; for delimiters.  Three different entry points:
 25580                                  ;	GetLet -  DS:[SI] = character to convert
 25581                                  ;	UCase  -  AL = character to convert
 25582                                  ;	GetLet3 - AL = character
 25583                                  ;		  [BX] = translation table to use
 25584                                  ;
 25585                                  ;	Exit (in all cases) : AL = upper case character
 25586                                  ;			      CY set if char is control char other than TAB
 25587                                  ;			      ZF set if char is a delimiter
 25588                                  ;	Uses : AX, flags
 25589                                  ;
 25590                                  ; NOTE: This routine exists in a fast table lookup version, and a slow
 25591                                  ; inline version.  Return with carry set is only possible in the inline
 25592                                  ; version.  The table lookup version is the one in use.
 25593                                  ;
 25594                                  ;----------------------------------------------------------------------------
 25595                                  
 25596                                  
 25597                                  ; This entry point has character at [SI]
 25598                                  
 25599                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5517h
 25600                                  GETLET:	
 25601 0000560B AC                      	LODSB
 25602                                  
 25603                                  ; This entry point has character in AL
 25604                                  
 25605                                  	;entry	UCase
 25606                                  UCase:	
 25607                                  	; 09/08/2018
 25608                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5518h
 25609                                  _UCase:
 25610 0000560C 53                      	PUSH	BX
 25611 0000560D BB[0A11]                	MOV	BX,FILE_UCASE_TAB+2
 25612                                  
 25613                                  ; Convert the character in AL to upper case
 25614                                  
 25615                                  gl_0:
 25616 00005610 3C61                    	CMP	AL,"a"
 25617 00005612 720E                    	JB	short gl_2	; Already upper case, go check type
 25618 00005614 3C7A                    	CMP	AL,"z"
 25619 00005616 7702                    	JA	short gl_1
 25620 00005618 2C20                    	SUB	AL,20H		; Convert to upper case
 25621                                  
 25622                                  ; Map European character to upper case
 25623                                  
 25624                                  gl_1:
 25625 0000561A 3C80                    	CMP	AL,80H
 25626 0000561C 7204                    	JB	short gl_2	; Not EuroChar, go check type
 25627 0000561E 2C80                    	SUB	AL,80H		; translate to upper case with this index
 25628                                  
 25629                                  	; M048 - Start 
 25630                                  	; Lantastic call Ucase thru int 2f without setting SS to DOSDATA.
 25631                                  	; So we shall set up DS and to access FILE_UCASE_TAB in BX and also 
 25632                                  	; preserve it.
 25633                                  	;
 25634                                  
 25635                                  	;push	ds
 25636                                  	;push	cs
 25637                                  	;pop	ds
 25638                                  
 25639                                  	; 09/08/2018
 25640                                  	;XLAT	BYTE [CS:BX]	; ds as file_ucase_tab is in DOSDATA
 25641 00005620 2ED7                    	CS	XLAT
 25642                                  
 25643                                  	;pop	ds
 25644                                  
 25645                                  	; M048 - End
 25646                                  
 25647                                  ; Now check the type
 25648                                  
 25649                                  ;If TableLook
 25650                                  
 25651                                  gl_2:
 25652 00005622 50                      	PUSH	AX
 25653                                  	
 25654                                  	; MSDOS 6.0
 25655                                  	;CALL	GetCharType	; returns type flags in AL
 25656                                  	
 25657                                  	; MSDOS 3.3
 25658 00005623 BB[1613]                	mov	bx,CharType
 25659                                  	; 09/08/2018
 25660                                  	;xlat	byte [cs:bx]
 25661 00005626 2ED7                    	cs	xlat	
 25662                                  
 25663                                  	;test	al,1	
 25664 00005628 A801                    	TEST	AL,FCHK 	; test for normal character
 25665 0000562A 58                      	POP	AX
 25666 0000562B 5B                      	POP	BX
 25667 0000562C C3                      	RETN
 25668                                  
 25669                                  ; This entry has character in AL and lookup table in BX
 25670                                  
 25671                                  	; MSDOS 6.0
 25672                                  ;	;entry GetLet3
 25673                                  GETLET3: ; 10/08/2018
 25674 0000562D 53                      	PUSH	BX
 25675 0000562E EBE0                    	JMP	short gl_0
 25676                                  
 25677                                  ;ELSE
 25678                                  ;
 25679                                  ;gl_2:
 25680                                  ;	POP	BX
 25681                                  ;	CMP	AL,"."
 25682                                  ;	retz
 25683                                  ;	CMP	AL,'"'
 25684                                  ;	retz
 25685                                  ;	CALL	PATHCHRCMP
 25686                                  ;	retz
 25687                                  ;	CMP	AL,"["
 25688                                  ;	retz
 25689                                  ;	CMP	AL,"]"
 25690                                  ;	retz
 25691                                  ;ENDIF
 25692                                  
 25693                                  ;---------------------------------------------------------------------
 25694                                  ;
 25695                                  ; DELIM - check if character is a delimiter
 25696                                  ;	Entry : AX = character to check
 25697                                  ;	Exit  : ZF set if character is not a delimiter
 25698                                  ;	Uses  : Flags
 25699                                  ;
 25700                                  ;--------------------------------------------------------------------
 25701                                  
 25702                                  	;entry	DELIM
 25703                                  DELIM:
 25704                                  ;IF TableLook
 25705 00005630 50                      	PUSH	AX
 25706                                  
 25707                                  	; MSDOS 6.0
 25708                                  	;CALL	GetCharType
 25709                                  	
 25710                                  	; MSDOS 3.3
 25711 00005631 53                      	push	bx
 25712 00005632 BB[1613]                	mov	bx,CharType
 25713                                  	;09/08/2018
 25714                                  	;xlat	byte [cs:bx]
 25715 00005635 2ED7                    	cs	xlat
 25716 00005637 5B                      	pop	bx
 25717                                  
 25718                                  	;test	al,2
 25719 00005638 A802                    	TEST	AL,FDELIM
 25720 0000563A 58                      	POP	AX
 25721 0000563B C3                      	RETN
 25722                                  ;ELSE
 25723                                  ;	CMP	AL,":"
 25724                                  ;	retz
 25725                                  ;
 25726                                  ;	CMP	AL,"<"
 25727                                  ;	retz
 25728                                  ;	CMP	AL,"|"
 25729                                  ;	retz
 25730                                  ;	CMP	AL,">"
 25731                                  ;	retz
 25732                                  ;
 25733                                  ;	CMP	AL,"+"
 25734                                  ;	retz
 25735                                  ;	CMP	AL,"="
 25736                                  ;	retz
 25737                                  ;	CMP	AL,";"
 25738                                  ;	retz
 25739                                  ;	CMP	AL,","
 25740                                  ;	retz
 25741                                  ;ENDIF
 25742                                  
 25743                                  ;-------------------------------------------------------------------------
 25744                                  ;
 25745                                  ;  SPCHK - checks to see if a character is a space or equivalent
 25746                                  ;	Entry : AL = character to check
 25747                                  ;	Exit  : ZF set if character is a space
 25748                                  ;	Uses  : flags
 25749                                  ;
 25750                                  ;-------------------------------------------------------------------------
 25751                                  
 25752                                  	;entry SPCHK
 25753                                  SPCHK:
 25754                                  ;IF TableLook
 25755 0000563C 50                      	PUSH	AX
 25756                                  
 25757                                  	; MSDOS 6.0
 25758                                  	;CALL	GetCharType
 25759                                  	
 25760                                  	; MSDOS 3.3
 25761 0000563D 53                      	push	bx
 25762 0000563E BB[1613]                	mov	bx,CharType
 25763                                  	; 09/08/2018
 25764                                  	;xlat	byte [cs:bx]
 25765 00005641 2ED7                    	cs	xlat
 25766 00005643 5B                      	pop	bx
 25767                                  
 25768                                  	;test	al,4
 25769 00005644 A804                    	TEST	AL,FSPCHK
 25770 00005646 58                      	POP	AX
 25771 00005647 C3                      	RETN
 25772                                  ;ELSE
 25773                                  ;	CMP	AL,9		; Filter out tabs too
 25774                                  ;	retz
 25775                                  ;; WARNING! " " MUST be the last compare
 25776                                  ;	CMP	AL," "
 25777                                  ;	return
 25778                                  ;ENDIF
 25779                                  
 25780                                  ; MSDOS 6.0
 25781                                  ;-------------------------------------------------------------------------
 25782                                  ;
 25783                                  ;  GetCharType - return flag bits indicating character type
 25784                                  ;	Bits are defined in DOSSYM.INC. Uses lookup table
 25785                                  ;	defined above at label CharType.
 25786                                  ;
 25787                                  ;	Entry : AL = character to return type flags for
 25788                                  ;	Exit  : AL = type flags
 25789                                  ;	Uses  : AL, flags
 25790                                  ;
 25791                                  ;-------------------------------------------------------------------------
 25792                                  ;
 25793                                  ;GetCharType:
 25794                                  ;	cmp	al,CharType_last	; beyond end of table?
 25795                                  ;	jae	short gct_90		; return standard value
 25796                                  ;
 25797                                  ;	push	bx
 25798                                  ;	mov	bx,CharType		; load lookup table
 25799                                  ;	shr	al,1			; adjust for half-byte table entry size
 25800                                  ;	;xlat	cs:[bx] 		; get flags
 25801                                  ;	cs	xlat	
 25802                                  ;	pop	bx
 25803                                  ;
 25804                                  ; carry clear from previous shift means we want the low nibble.  Otherwise
 25805                                  ; we have to shift the flags down to the low nibble
 25806                                  ;
 25807                                  ;	jnc	short gct_80		; carry clear, no shift needed
 25808                                  ;
 25809                                  ;	shr	al,1			; we want high nibble, shift it down
 25810                                  ;	shr	al,1
 25811                                  ;	shr	al,1
 25812                                  ;	shr	al,1
 25813                                  ;
 25814                                  ;gct_80:
 25815                                  ;	and	al,0Fh			; clear the unused nibble
 25816                                  ;	retn
 25817                                  ;
 25818                                  ;gct_90:
 25819                                  ;	mov	al,0Fh			; set all flags
 25820                                  ;	retn
 25821                                  
 25822                                  ;----------------------------------------------------------------------------
 25823                                  ;
 25824                                  ; Procedure : PATHCHRCMP
 25825                                  ;
 25826                                  ;----------------------------------------------------------------------------
 25827                                  
 25828                                  PATHCHRCMP:
 25829 00005648 3C2F                    	CMP	AL,'/'
 25830 0000564A 7606                    	JBE	short PathRet
 25831 0000564C 3C5C                    	CMP	AL,'\'
 25832 0000564E C3                      	retn
 25833                                  GotFor:
 25834 0000564F B05C                    	MOV	AL,'\'
 25835 00005651 C3                      	retn
 25836                                  PathRet:
 25837 00005652 74FB                    	JZ	short GotFor
 25838 00005654 C3                      	retn
 25839                                  
 25840                                  
 25841                                  ;============================================================================
 25842                                  ; MSCRTLC.ASM, MSDOS 6.0, 1991
 25843                                  ;============================================================================
 25844                                  ; 30/07/2018 - Retro DOS v3.0
 25845                                  
 25846                                  ; 15/03/2018 - Retro DOS v2.0 (MSDOS 2.11, CTRLC.ASM, 1983)
 25847                                  
 25848                                  ;**	MSCTRLC.ASM - ^C and error handler for MSDOS
 25849                                  
 25850                                  ;	TITLE	Control C detection, Hard error and EXIT routines
 25851                                  ;	NAME	IBMCTRLC
 25852                                  
 25853                                  ;**	Low level routines for detecting special characters on CON input,
 25854                                  ;	the ^C exit/int code, the Hard error INT 24 code, the
 25855                                  ;	process termination code, and the INT 0 divide overflow handler.
 25856                                  ;
 25857                                  ;	FATAL
 25858                                  ;	FATAL1
 25859                                  ;	reset_environment
 25860                                  ;	DSKSTATCHK
 25861                                  ;	SPOOLINT
 25862                                  ;	STATCHK
 25863                                  ;	CNTCHAND
 25864                                  ;	DIVOV
 25865                                  ;	CHARHARD
 25866                                  ;	HardErr
 25867                                  ;
 25868                                  ;	Revision history:
 25869                                  ;
 25870                                  ;	    AN000	version 4.0   Jan 1988
 25871                                  ;	    A002	PTM    -- dir >lpt3 hangs
 25872                                  ;	    A003	PTM 3957- fake version for IBMCAHE.COM
 25873                                  ;
 25874                                  ; 	M011: NEC's 8086 clone chip uses Intel's undocumented bit number in
 25875                                  ;	      flags register. In order to return to user normally DOS used to
 25876                                  ;	      move F202 into flags, which sets bit number 1 in flags uncondit-
 25877                                  ;	      ionally. Now it is modified to maintain the state of bit 1.
 25878                                  ;
 25879                                  ; 	M024: suppressed fail and ignore options if not in the middle of int 
 25880                                  ;	      24 and if Ctrl P or ctrl printscrn is pressed in routine 
 25881                                  ;	      charhard.
 25882                                  
 25883                                  
 25884                                  	; MSDOS 6.0
 25885                                  ;		public	LowInt23Addr		
 25886                                  ;LowInt23Addr	LABEL	DWORD
 25887                                  ;	DW	offset DOSDATA:LowInt23, 0
 25888                                  ;
 25889                                  ;		public	LowInt24Addr
 25890                                  ;LowInt24Addr	LABEL	DWORD
 25891                                  ;	DW	offset DOSDATA:LowInt24, 0
 25892                                  ;
 25893                                  ;		public	LowInt28Addr
 25894                                  ;LowInt28Addr	LABEL	DWORD
 25895                                  ;	DW	offset DOSDATA:LowInt28, 0
 25896                                  
 25897                                  ;Break	<Checks for ^C in CON I/O>
 25898                                  
 25899                                  ;---------------------------------------------------------------------------
 25900                                  ;
 25901                                  ; Procedure Name : DSKSTATCHK
 25902                                  ;
 25903                                  ; Check for ^C if only one level in
 25904                                  ;
 25905                                  ;---------------------------------------------------------------------------
 25906                                  
 25907                                          ;procedure   DSKSTATCHK,NEAR ; Check for ^C if only one level in
 25908                                  
 25909                                  DSKSTATCHK:        
 25910                                  	;CMP	BYTE [INDOS],1
 25911 00005655 36803E[CF02]01                  CMP     BYTE [SS:INDOS],1 ; 15/03/2018
 25912                                  	;retnz			; Do NOTHING
 25913 0000565B 7535                    	JNZ	SHORT _RET37 ; Retro DOS v2.0 - 04/03/2018         
 25914                                  
 25915 0000565D 51                      	PUSH    CX
 25916 0000565E 06                              PUSH    ES
 25917 0000565F 53                              PUSH    BX
 25918 00005660 1E                              PUSH    DS
 25919 00005661 56                              PUSH    SI
 25920                                          
 25921                                  	;PUSH	CS
 25922                                          ;POP	ES
 25923                                          ;PUSH	CS
 25924                                          ;POP	DS
 25925                                  
 25926 00005662 8CD3                    	MOV	BX, SS		; SS is DOSDATA. ES:BX must be set up
 25927 00005664 8EC3                    	MOV	ES, BX		; for deviocall2
 25928 00005666 8EDB                    	MOV	DS, BX
 25929                                  
 25930                                  	; 09/09/2018
 25931 00005668 C606[3C03]05                    MOV     BYTE [DSKSTCOM],DEVRDND
 25932 0000566D C606[3A03]0E                    MOV     BYTE [DSKSTCALL],DRDNDHL
 25933 00005672 C706[3D03]0000          	mov	word [DSKSTST],0
 25934                                  
 25935 00005678 BB[3A03]                        MOV     BX,DSKSTCALL
 25936 0000567B C536[3200]                      LDS     SI,[BCON]
 25937 0000567F E878F8                          CALL	DEVIOCALL2
 25938                                   	; 15/03/2018
 25939                                  	;test	word [ss:DSKSTST],200h
 25940 00005682 36F706[3D03]0002                TEST    WORD [SS:DSKSTST],STBUI
 25941                                  	;JNZ	SHORT ZRET		; No characters available
 25942                                  	; 30/07/2018
 25943 00005689 7408                    	jz	short _GotCh
 25944                                  ;ZRET:
 25945 0000568B 30C0                            XOR     AL,AL                   ; Set zero
 25946                                  RET36:
 25947 0000568D 5E                              POP     SI
 25948 0000568E 1F                              POP     DS
 25949 0000568F 5B                              POP     BX
 25950 00005690 07                              POP     ES
 25951 00005691 59                              POP     CX
 25952                                  _RET37:
 25953 00005692 C3                              RETN
 25954                                  
 25955                                  _GotCh:
 25956 00005693 36A0[4703]                      MOV     AL,[SS:DSKCHRET]	; SS override
 25957                                  
 25958 00005697 3C03                            CMP     AL,"C"-"@" ; cmp al,3
 25959 00005699 75F2                            JNZ     SHORT RET36
 25960 0000569B 36C606[3C03]04                  MOV     BYTE [SS:DSKSTCOM],DEVRD
 25961 000056A1 36C606[3A03]16                  MOV     BYTE [SS:DSKSTCALL],DRDWRHL
 25962 000056A7 36880E[4703]                    MOV     [SS:DSKCHRET],CL
 25963                                  	; 09/09/2018
 25964 000056AC 36C706[3D03]0000        	MOV	word [SS:DSKSTST],0
 25965 000056B3 36C706[4C03]0100        	MOV	word [SS:DSKSTCNT],1
 25966 000056BA E83DF8                  	CALL	DEVIOCALL2              ; Eat the ^C
 25967 000056BD 5E                              POP     SI
 25968 000056BE 1F                              POP     DS
 25969 000056BF 5B                              POP     BX                      ; Clean stack
 25970 000056C0 07                              POP     ES
 25971 000056C1 59                              POP     CX
 25972 000056C2 E9BF00                          JMP	CNTCHAND ; 10/08/2018
 25973                                  
 25974                                  NOSTOP:
 25975                                  	; MSDOS 6.0
 25976                                  	;CMP	AL,"P"-"@"
 25977                                  	;JNZ	short check_next
 25978                                  				    	; SS override
 25979                                  	;CMP	BYTE [SS:Scan_Flag],0	; ALT_Q ?
 25980                                  	;JZ	short INCHKJ		; no
 25981                                  	;retn
 25982                                  ;check_next:
 25983                                  	;;IF	NOT TOGLPRN
 25984                                  	;CMP	AL,"N"-"@"
 25985                                  	;JZ	short INCHKJ
 25986                                  	;;ENDIF
 25987                                  
 25988                                  	;CMP	AL,"C"-"@"
 25989                                  	;JZ	short INCHKJ
 25990                                  ;check_end:
 25991                                  	;retn
 25992                                  
 25993                                  	; MSDOS 3.3
 25994 000056C5 3C10                            CMP     AL,"P"-"@"  ; cmp al,16	
 25995 000056C7 7405                            JZ	short INCHKJ
 25996                                  
 25997                                  	; 15/04/2018
 25998                                          ;;IF	NOT TOGLPRN
 25999                                          ;CMP	AL,"N"-"@"
 26000                                          ;JZ	SHORT INCHKJ
 26001                                          ;;ENDIF
 26002                                  
 26003 000056C9 3C03                            CMP     AL,"C"-"@"  ; cmp al,3	
 26004 000056CB 7401                            JZ	short INCHKJ
 26005 000056CD C3                      	RETN
 26006                                  
 26007                                  	; 08/09/2018
 26008                                  INCHKJ:	; 10/08/2018
 26009 000056CE E98F00                  	JMP	INCHK
 26010                                  
 26011                                  ;----------------------------------------------------------------------------
 26012                                  ;
 26013                                  ; Procedure Name : SpoolInt
 26014                                  ;
 26015                                  ; SpoolInt - signal processes that the DOS is truly idle.  We are allowed to
 26016                                  ; do this ONLY if we are working on a 1-12 system call AND if we are not in
 26017                                  ; the middle of an INT 24.
 26018                                  ;
 26019                                  ;----------------------------------------------------------------------------
 26020                                  
 26021                                  SPOOLINT:
 26022 000056D1 9C                              PUSHF
 26023                                  	; 15/03/2018
 26024 000056D2 36803E[0403]00                  CMP     BYTE [SS:IDLEINT],0	; SS override
 26025 000056D8 7414                            JZ      SHORT POPFRET
 26026 000056DA 36803E[CE02]00                  CMP     BYTE [SS:ERRORMODE],0
 26027 000056E0 750C                            JNZ     SHORT POPFRET		;No spool ints in error mode
 26028                                  
 26029                                  	; 30/07/2018
 26030                                  
 26031                                  	; Note that we are going to allow an external program to issue system 
 26032                                  	; calls at this time.  We MUST preserve IdleInt across this.
 26033                                  
 26034                                  
 26035 000056E2 36FF36[0403]            	PUSH	WORD [SS:IDLEINT]
 26036                                   
 26037                                  	; MSDOS 6.0
 26038                                  	;cmp	byte [SS:DosHasHMA],0	; Q: is dos running in HMA (M021)
 26039                                  	;jne	short do_low_int28	; Y: the int must be done from low mem
 26040                                  	;INT	int_spooler		; N: Execute user int 28 handler
 26041                                  	;jmp	short spool_ret_addr
 26042                                  
 26043                                  ;do_low_int28:
 26044                                  	;call	far [SS:LowInt28Addr]
 26045                                  
 26046                                  ;spool_ret_addr:
 26047                                  
 26048 000056E7 CD28                            INT     int_spooler		; INT 28h
 26049                                  
 26050 000056E9 368F06[0403]            	POP	WORD [SS:IDLEINT]
 26051                                  
 26052                                  POPFRET:
 26053 000056EE 9D                              POPF
 26054                                  _RET18:  
 26055 000056EF C3                      	RETN
 26056                                  
 26057                                  ;----------------------------------------------------------------------------
 26058                                  ;
 26059                                  ; Procedure Name : STATCHK
 26060                                  ;
 26061                                  ;----------------------------------------------------------------------------
 26062                                  
 26063                                  STATCHK:
 26064 000056F0 E862FF                          CALL	DSKSTATCHK              ; Allows ^C to be detected under
 26065                                                                          ; input redirection
 26066 000056F3 53                              PUSH    BX
 26067 000056F4 31DB                            XOR     BX,BX
 26068 000056F6 E8C1E9                          CALL	GET_IO_SFT
 26069 000056F9 5B                              POP     BX
 26070 000056FA 72F3                            JC      SHORT _RET18
 26071 000056FC B401                            MOV     AH,1
 26072 000056FE E84CF6                          CALL	IOFUNC
 26073 00005701 74CE                            JZ      SHORT SPOOLINT
 26074 00005703 3C13                            CMP     AL,'S'-'@'
 26075 00005705 75BE                            JNZ     SHORT NOSTOP
 26076                                  
 26077                                  	; MSDOS 6.0			; SS override
 26078                                  	;CMP	BYTE [SS:Scan_Flag],0	; AN000; ALT_R ?
 26079                                  	;JNZ	short check_end		; AN000; yes
 26080                                  
 26081 00005707 30E4                            XOR     AH,AH
 26082 00005709 E841F6                          CALL	IOFUNC                  ; Eat Cntrl-S
 26083 0000570C EB4B                            JMP     SHORT PAUSOSTRT
 26084                                  
 26085                                  PRINTOFF:
 26086                                  PRINTON:
 26087 0000570E 36F616[AC02]            	NOT	BYTE [SS:PFLAG] ; 14/03/2018
 26088                                  
 26089                                  	; 30/07/2018 - Retro DOS v3.0
 26090 00005713 53                      	PUSH	BX
 26091 00005714 BB0400                  	MOV	BX,4
 26092 00005717 E8A0E9                  	call	GET_IO_SFT
 26093 0000571A 5B                      	POP	BX
 26094 0000571B 72D2                    	jc	short _RET18
 26095 0000571D 06                      	PUSH	ES
 26096 0000571E 57                      	PUSH	DI
 26097 0000571F 1E                      	PUSH	DS
 26098 00005720 07                      	POP	ES
 26099 00005721 89F7                    	MOV	DI,SI			; ES:DI -> SFT
 26100                                  	;test	word [es:di+5],800h
 26101 00005723 26F745050008            	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_net_spool
 26102 00005729 7418                    	JZ	short NORM_PR 		; Not redirected, echo is OK
 26103                                  
 26104                                  	;Callinstall NetSpoolEchoCheck,MultNet,38,<AX>,<AX> 
 26105                                  					; See if allowed
 26106 0000572B 50                      	push	ax
 26107 0000572C B82611                  	mov	ax, 1126h
 26108 0000572F CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - ???
 26109                                  			; Return: CF set on error, AX = error code
 26110                                  			; STACK unchanged
 26111 00005731 58                      	pop	ax
 26112                                  
 26113 00005732 730F                    	JNC	short NORM_PR 		; Echo is OK
 26114                                  
 26115                                  					; SS override
 26116 00005734 36C606[AC02]00          	MOV	BYTE [SS:PFLAG],0	; If not allowed, disable echo
 26117                                  
 26118                                  	;Callinstall NetSpoolClose,MultNet,36,<AX>,<AX> ; and close
 26119                                  
 26120 0000573A 50                      	push    ax
 26121 0000573B B82411                  	mov     ax, 1124h
 26122 0000573E CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - ???
 26123                                  			; ES:DI -> SFT, SS = DOS CS
 26124 00005740 58                      	pop     ax
 26125                                  
 26126 00005741 EB10                    	JMP	SHORT RETP6
 26127                                  
 26128                                  NORM_PR:
 26129 00005743 36803E[AC02]00          	CMP	BYTE [SS:PFLAG],0	; SS override
 26130 00005749 7505                    	JNZ	short PRNOPN
 26131 0000574B E82EF7                  	call	DEV_CLOSE_SFT
 26132 0000574E EB03                    	JMP	SHORT RETP6
 26133                                  
 26134                                  PRNOPN:
 26135 00005750 E822F7                  	call	DEV_OPEN_SFT
 26136                                  RETP6:
 26137 00005753 5F                      	POP	DI
 26138 00005754 07                      	POP	ES
 26139                                  
 26140                                  STATCHK_RETN:
 26141 00005755 C3                              RETN
 26142                                  
 26143                                  PAUSOLP:
 26144 00005756 E878FF                          CALL    SPOOLINT
 26145                                  PAUSOSTRT:
 26146 00005759 B401                            MOV     AH,1
 26147 0000575B E8EFF5                          CALL	IOFUNC
 26148 0000575E 74F6                            JZ      SHORT PAUSOLP
 26149                                  INCHK:
 26150 00005760 53                              PUSH    BX
 26151 00005761 31DB                            XOR     BX,BX
 26152 00005763 E854E9                          CALL	GET_IO_SFT
 26153 00005766 5B                              POP     BX
 26154 00005767 72EC                            JC      SHORT STATCHK_RETN ; 30/07/2018
 26155 00005769 30E4                            XOR     AH,AH
 26156 0000576B E8DFF5                          CALL	IOFUNC
 26157                                  	; 30/07/2018
 26158                                  	; MSDOS 3.3
 26159 0000576E 3C10                            CMP     AL,'P'-'@' ;cmp al,16
 26160 00005770 750E                            JNZ	SHORT NOPRINT
 26161                                  
 26162 00005772 36803E[8B0F]00          	cmp	byte [SS:SCAN_FLAG],0
 26163 00005778 7494                    	JZ	SHORT PRINTON	
 26164 0000577A 36C606[8B0F]00          	mov	byte [ss:SCAN_FLAG],0
 26165                                  
 26166                                  	; MSDOS 6.0
 26167                                  	;CMP	AL,"P"-"@"
 26168                                  	;;;;;  7/14/86	ALT_Q key fix
 26169                                  	;JZ	short PRINTON		; no! must be CTRL_P
 26170                                  
 26171                                  NOPRINT:	
 26172                                  	;IF	NOT TOGLPRN
 26173                                  	;CMP	AL,"N"-"@"
 26174                                  	;JZ	short PRINTOFF
 26175                                  	;ENDIF
 26176 00005780 3C03                    	CMP	AL,"C"-"@" ; cmp al,3 
 26177                                  	;retnz
 26178 00005782 75D1                    	jnz	short STATCHK_RETN
 26179                                  
 26180                                  ;	!! NOTE: FALL THROUGH !!
 26181                                  
 26182                                  ;---------------------------------------------------------------------------
 26183                                  ;
 26184                                  ; Procedure Name : CNTHAND ( CTRLC_C HANDLER )
 26185                                  ;
 26186                                  ; "^C" and CR/LF is printed.  Then the user registers are restored and the
 26187                                  ; user CTRL-C handler is executed.  At this point the top of the stack has 1)
 26188                                  ; the interrupt return address should the user CTRL-C handler wish to allow
 26189                                  ; processing to continue; 2) the original interrupt return address to the code
 26190                                  ; that performed the function call in the first place.	If the user CTRL-C
 26191                                  ; handler wishes to continue, it must leave all registers unchanged and RET
 26192                                  ; (not IRET) with carry CLEAR.	If carry is SET then an terminate system call
 26193                                  ; is simulated.
 26194                                  ;
 26195                                  ;---------------------------------------------------------------------------
 26196                                  
 26197                                  CNTCHAND:
 26198                                  	; MSDOS 6.0			; SS override
 26199                                  					; AN002; from RAWOUT
 26200                                  	;TEST	word [SS:Dos34_Flag],CTRL_BREAK_FLAG  
 26201                                  	;JNZ	short around_deadlock 	; AN002;
 26202                                  
 26203 00005784 B003                            MOV     AL,3			; Display "^C"
 26204 00005786 E895CC                          CALL	BUFOUT
 26205 00005789 E835CB                          CALL	CRLF
 26206                                  ;around_deadlock:
 26207 0000578C 16                              PUSH    SS
 26208 0000578D 1F                              POP     DS
 26209 0000578E 803E[0303]00                    CMP     BYTE [CONSWAP],0
 26210 00005793 7403                            JZ      SHORT NOSWAP
 26211 00005795 E84EE6                          CALL	SWAPBACK
 26212                                  NOSWAP:
 26213 00005798 FA                      	CLI				; Prepare to play with stack
 26214 00005799 8E16[2005]              	MOV	SS,[USER_SS]		; User stack now restored
 26215 0000579D 8B26[1E05]              	MOV	SP,[USER_SP]
 26216 000057A1 E841BE                          CALL	restore_world       ; User registers now restored
 26217                                  
 26218                                  	; 30/07/2018 - Retro DOS v3.0 
 26219                                  	; MSDOS 3.3 (IBMDOS.COM - Offset 56ACh)
 26220                                          ; 14/03/2018 - Retro DOS v2.0
 26221 000057A4 2EC606[CF02]00          	MOV     BYTE [CS:INDOS],0	
 26222 000057AA 2EC606[CE02]00                  MOV     BYTE [CS:ERRORMODE],0
 26223 000057B0 2E8926[E002]                    MOV     [CS:ConC_Spsave],SP
 26224 000057B5 F8                      	clc	;30/07/2018
 26225 000057B6 CD23                            INT     int_ctrl_c ; 23h    ; Execute user Ctrl-C handler
 26226                                  	;int	23h	; DOS - CONTROL "C" EXIT ADDRESS
 26227                                  			; Return: return via RETF 2 with CF set
 26228                                  			; DOS will abort program with errorlevel 0
 26229                                  			; else
 26230                                  			; interrupted DOS call continues
 26231                                  
 26232                                  	; 30/07/2018 
 26233                                  
 26234                                  	; MSDOS 3.3 (IBMDOS.COM - Offset 56C0h)
 26235                                  
 26236                                  ; The user has returned to us.	The circumstances we allow are:
 26237                                  ;
 26238                                  ;   IRET	We retry the operation by redispatching the system call
 26239                                  ;   CLC/RETF	POP the stack and retry
 26240                                  ;   ... 	Exit the current process with ^C exit
 26241                                  ;
 26242                                  ; User's may RETURN to us and leave interrupts on. 
 26243                                  ; Turn 'em off just to be sure
 26244                                  
 26245 000057B8 FA                      	CLI
 26246                                  
 26247 000057B9 2EA3[E602]              	MOV	[CS:USER_IN_AX],ax	; save the AX
 26248 000057BD 9C                      	PUSHF				; and the flags (maybe new call)
 26249 000057BE 58                      	POP	AX
 26250                                  
 26251                                  ; See if the input stack is identical to the output stack
 26252                                  
 26253 000057BF 2E3B26[E002]                    CMP	SP,[CS:ConC_Spsave]
 26254 000057C4 7507                    	JNZ     SHORT ctrlc_try_new ; current SP not the same as saved SP
 26255                                  
 26256                                  ; Repeat the operation by redispatching the system call.
 26257                                  
 26258                                  ctrlc_repeat:
 26259 000057C6 2EA1[E602]                      MOV     AX,[CS:USER_IN_AX]
 26260                                  	;transfer COMMAND           ; Repeat command otherwise
 26261                                  COMMANDJ:
 26262 000057CA E9DDBC                  	JMP	COMMAND
 26263                                  
 26264                                  ; The current SP is NOT the same as the input SP. Presume that he 
 26265                                  ; RETF'd leaving some flags on the stack and examine the input
 26266                                  
 26267                                  ctrlc_try_new:
 26268 000057CD 83C402                  	ADD	SP,2			; pop those flags
 26269                                  	;test	ax,1
 26270 000057D0 A90100                  	TEST	AX,f_Carry		; did he return with carry?
 26271 000057D3 74F1                    	JZ	short ctrlc_repeat	; no carry set, just retry
 26272                                  
 26273                                  	; Well...  time to abort the user.  
 26274                                  	; Signal a ^C exit and use the EXIT system call..
 26275                                  
 26276                                  ctrlc_abort:
 26277                                          ;MOV	AX,(EXIT SHL 8) + 0
 26278 000057D5 B8004C                          MOV	AX, (EXIT*256) + 0  ; 4C00h
 26279 000057D8 2EC606[F902]FF          	mov	byte [CS:DidCTRLC],0FFh ; 14/03/2018
 26280                                          ;transfer COMMAND	    ; give up by faking $EXIT
 26281                                  	;JMP	SHORT COMMANDJ
 26282 000057DE E9C9BC                  	JMP	COMMAND
 26283                                  
 26284                                  ;Break	<DIVISION OVERFLOW INTERRUPT>
 26285                                  ;----------------------------------------------------------------------------
 26286                                  ;
 26287                                  ; Procedure Name : DIVOV
 26288                                  ;
 26289                                  ; Default handler for division overflow trap
 26290                                  ;
 26291                                  ;----------------------------------------------------------------------------
 26292                                  
 26293                                  DIVOV: 
 26294                                  	; 30/07/2018
 26295                                  	; 07/07/2018 - Retro DOS v3.0
 26296 000057E1 BE[BC12]                	mov	si,DIVMES
 26297 000057E4 2E8B1E[CF12]            	mov	bx,[cs:DivMesLen]
 26298 000057E9 8CC8                    	mov     ax,cs
 26299 000057EB 8ED0                    	mov	ss,ax
 26300 000057ED BC[0607]                	mov     sp,AUXSTACK
 26301 000057F0 E80200                  	call	RealDivOv
 26302                                  	;call	_outmes ; MSDOS 6.0
 26303 000057F3 EBE0                    	jmp	short ctrlc_abort  ; Use Ctrl-C abort on divide overflow
 26304                                  
 26305                                  ; 30/07/2018
 26306                                  
 26307                                  ; MSDOS 6.0
 26308                                  ;---------------------------------------------------------------------------
 26309                                  ;
 26310                                  ; Procedure Name : OutMes
 26311                                  ;
 26312                                  ;
 26313                                  ; OutMes: perform message output
 26314                                  ; Inputs:   SS:SI points to message
 26315                                  ;	    BX has message length
 26316                                  ; Outputs:  message to BCON
 26317                                  ;
 26318                                  ;Actually, cs:si points to the message now. The segment address is filled in
 26319                                  ;at init. time ([dskchret+2]). This will be temporarily changed to DOSCODE. 
 26320                                  ;NB. This procedure is called only from DIVOV. -SR
 26321                                  ;
 26322                                  ;---------------------------------------------------------------------------
 26323                                  
 26324                                  ;MSDOS 3.3
 26325                                  ;---------------------------------------------------------------------------
 26326                                  ; RealDivOv: perform actual divide overflow stuff.
 26327                                  ; Inputs:   none
 26328                                  ; Outputs:  message to BCON
 26329                                  ;---------------------------------------------------------------------------
 26330                                  
 26331                                  	; 30/07/2018
 26332                                  	; MSDOS 6.0
 26333                                  ;_OUTMES:
 26334                                  	;MSDOS 3.3
 26335                                  RealDivOv:
 26336                                  	 
 26337                                  	; 07/07/2018 - Retro DOS v3.0
 26338                                          ;Context ES
 26339                                          ;push	ss ; 30/07/2018
 26340 000057F5 0E                      	PUSH	CS			; get ES addressability
 26341 000057F6 07                      	POP	ES
 26342                                          ;Context DS
 26343                                  	;push	ss ; 30/07/2018
 26344 000057F7 0E                      	PUSH	CS			; get DS addressability
 26345 000057F8 1F                      	POP	DS
 26346 000057F9 C606[3C03]08                    MOV     BYTE [DSKSTCOM],DEVWRT
 26347 000057FE C606[3A03]16                    MOV     BYTE [DSKSTCALL],DRDWRHL
 26348 00005803 C706[3D03]0000                  MOV     WORD [DSKSTST],0
 26349                                  	; BX = [DivMesLen] = 19
 26350 00005809 891E[4C03]                      MOV     [DSKSTCNT],BX
 26351 0000580D BB[3A03]                        MOV     BX,DSKSTCALL
 26352                                          ;MOV     [DSKCHRET+1],SI	; transfer address (need an EQU)
 26353                                  	; 08/09/2018
 26354 00005810 8936[4803]              	mov	[DEVIOBUF_PTR],si
 26355                                  	; MSDOS 6.0
 26356                                  					; CS is used for string, fill in 
 26357                                  					; segment address 
 26358                                  	;MOV	[DskChRet+3],CS
 26359                                  
 26360 00005814 C536[3200]                      LDS     SI,[BCON]
 26361 00005818 E8DFF6                          CALL	DEVIOCALL2
 26362                                  	; 14/03/2018
 26363                                          ;MOV     WORD [CS:DSKCHRET+1],DEVIOBUF
 26364                                  	; 08/09/2018
 26365 0000581B 2EC706[4803][5E03]      	mov	word [CS:DEVIOBUF_PTR],DEVIOBUF
 26366 00005822 2EC706[4C03]0100                MOV     WORD [CS:DSKSTCNT],1
 26367 00005829 C3                              RETN
 26368                                  
 26369                                  ;Break	<CHARHRD,HARDERR,ERROR -- HANDLE DISK ERRORS AND RETURN TO USER>
 26370                                  ;---------------------------------------------------------------------------
 26371                                  ;
 26372                                  ; Procedure Name : CHARHARD
 26373                                  ;
 26374                                  ;
 26375                                  ; Character device error handler
 26376                                  ; Same function as HARDERR
 26377                                  ;
 26378                                  ;---------------------------------------------------------------------------
 26379                                  
 26380                                  CHARHARD:
 26381                                  	; 30/07/2018
 26382                                  	; 08/07/2018 - Retro DOS v3.0
 26383                                  
 26384                                  	; MSDOS 6.0
 26385                                  ;		   			; M024 - start
 26386                                  ;	cmp	byte ptr [ERRORMODE], 0	; Q: are we in the middle of int 24
 26387                                  ;	jne	@f			; Y: allow fail
 26388                                  ;
 26389                                  ;	OR	AH, Allowed_RETRY	; assume ctrl p
 26390                                  ;
 26391                                  ;	test	byte ptr [PFLAG], -1	; Q: has ctrl p been pressed
 26392                                  ;	jnz	ctrlp			; Y: 
 26393                                  ;@@:					; M024 - end
 26394                                  
 26395                                  ; Character device error handler
 26396                                  ; Same function as HARDERR
 26397                                  
 26398                                  	;or	ah,38h
 26399 0000582A 80CC38                  	or	ah,Allowed_IGNORE+Allowed_RETRY+Allowed_FAIL
 26400                                  ;ctrlp:			; SS override for Allowed and EXITHOLD
 26401 0000582D 368826[F702]            	mov	[SS:ALLOWED],ah
 26402                                  
 26403                                  	; 15/03/2018
 26404 00005832 368C06[1C05]                    MOV     [SS:EXITHOLD+2],ES
 26405 00005837 36892E[1A05]                    MOV     [SS:EXITHOLD],BP
 26406 0000583C 56                              PUSH    SI
 26407                                  	;and	di,0FFh
 26408 0000583D 81E7FF00                        AND     DI,STECODE
 26409 00005841 8CDD                            MOV     BP,DS                   ;Device pointer is BP:SI
 26410 00005843 E86400                          CALL    FATALC
 26411 00005846 5E                              POP     SI
 26412                                  	;return
 26413 00005847 C3                              RETN
 26414                                  
 26415                                  ;---------------------------------------------------------------------------
 26416                                  ;
 26417                                  ; Procedure Name : HardErr
 26418                                  ;
 26419                                  ; Hard disk error handler. Entry conditions:
 26420                                  ;	DS:BX = Original disk transfer address
 26421                                  ;	DX = Original logical sector number
 26422                                  ;	CX = Number of sectors to go (first one gave the error)
 26423                                  ;	AX = Hardware error code
 26424                                  ;	DI = Original sector transfer count	
 26425                                  ;	ES:BP = Base of drive parameters
 26426                                  ;	[READOP] = 0 for read, 1 for write
 26427                                  ;	Allowed Set with allowed responses to this error (other bits MUST BE 0)
 26428                                  ; Output:
 26429                                  ;	[FAILERR] will be set if user responded FAIL
 26430                                  ;
 26431                                  ;--------------------------------------------------------------------------
 26432                                  
 26433                                  HARDERR:
 26434                                  	; 30/07/2018
 26435                                  	; 08/07/2018 - Retro DOS v3.0
 26436 00005848 97                      	XCHG    AX,DI                   ; Error code in DI, count in AX
 26437                                          ;and	di,0FFh
 26438 00005849 81E7FF00                	AND     DI,STECODE              ; And off status bits
 26439                                          ;CMP	DI,WRECODE		; Write Protect Error?
 26440                                  	;cmp	di,0
 26441 0000584D 83FF00                  	cmp	DI,error_I24_write_protect ; Write Protect Error?
 26442 00005850 750A                            JNZ     short NOSETWRPERR
 26443 00005852 50                              PUSH    AX
 26444                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 26445                                          ;MOV	AL,[ES:BP+0]
 26446 00005853 268A4600                	mov	al,[ES:BP]
 26447                                          	; 15/03/2018
 26448 00005857 36A2[D002]                      MOV     [SS:WPERR],AL		; Flag drive with WP error
 26449 0000585B 58                              POP     AX
 26450                                  NOSETWRPERR:
 26451 0000585C 29C8                            SUB     AX,CX                   ; Number of sectors successfully transferred
 26452 0000585E 01C2                            ADD     DX,AX                   ; First sector number to retry
 26453 00005860 52                              PUSH    DX
 26454                                  	; 08/07/2018
 26455                                          ;MUL	word [ES:BP+2] 		; Number of bytes transferred
 26456 00005861 26F76602                	MUL	word [ES:BP+DPB.SECTOR_SIZE]
 26457 00005865 5A                              POP     DX
 26458 00005866 01C3                            ADD     BX,AX                   ; First address for retry
 26459 00005868 30E4                            XOR     AH,AH                   ; Flag disk section in error
 26460                                          ;CMP	DX,[ES:BP+6] 		; In reserved area?
 26461 0000586A 263B5606                	CMP	DX,[ES:BP+DPB.FIRST_FAT]
 26462 0000586E 721A                            JB      SHORT ERRINT
 26463 00005870 FEC4                            INC     AH                      ; Flag for FAT
 26464                                          ;CMP	DX,[ES:BP+10H] 		; In FAT?
 26465 00005872 263B5610                	CMP	DX,[ES:BP+DPB.DIR_SECTOR]   
 26466 00005876 7308                    	JAE	short TESTDIR 		; No
 26467                                  		 ; Err in FAT must force recomp of freespace
 26468                                  	;mov	word[ES:BP+1Eh],-1
 26469 00005878 26C7461EFFFF            	MOV	word [ES:BP+DPB.FREE_CNT],-1
 26470 0000587E EB0A                    	JMP	SHORT ERRINT
 26471                                  TESTDIR:
 26472 00005880 FEC4                            INC     AH
 26473                                          ;CMP	DX,[ES:BP+0BH]		; In directory?
 26474 00005882 263B560B                	CMP	DX,[ES:BP+DPB.FIRST_SECTOR] 
 26475 00005886 7202                            JB      SHORT ERRINT
 26476 00005888 FEC4                            INC     AH                      ; Must be in data area
 26477                                  ERRINT:
 26478 0000588A D0E4                            SHL     AH,1                    ; Make room for read/write bit
 26479 0000588C 360A26[1005]                    OR      AH,[SS:READOP] ; 15/03/2018
 26480                                  
 26481                                  	; 15/08/2018
 26482                                  					; SS override for allowed and EXITHOLD
 26483 00005891 360A26[F702]            	OR	AH,[SS:ALLOWED]		; Set the allowed_ bits
 26484                                  
 26485                                          ;entry   FATAL
 26486                                  FATAL:
 26487                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 26488                                          ;MOV	AL,[ES:BP+0]		; Get drive number
 26489 00005896 268A4600                	MOV	AL,[ES:BP]        
 26490                                  
 26491                                  	;entry   FATAL1
 26492                                  FATAL1:  
 26493                                  	; 15/03/2018      
 26494 0000589A 368C06[1C05]            	MOV     [SS:EXITHOLD+2],ES
 26495 0000589F 36892E[1A05]                    MOV     [SS:EXITHOLD],BP	; The only things we preserve	
 26496                                  	;LES	SI,[ES:BP+12H]
 26497 000058A4 26C47612                	LES	SI,[ES:BP+DPB.DRIVER_ADDR]
 26498 000058A8 8CC5                            MOV     BP,ES                   ; BP:SI points to the device involved
 26499                                  
 26500                                  	; DI has the INT-24-style extended error. We now map the error code 
 26501                                  	; for this into the normalized get extended error set by using the 
 26502                                  	; ErrMap24 table as a translate table. Note that we translate ONLY 
 26503                                  	; the device returned codes and leave all others beyond the look up 
 26504                                  	; table alone.
 26505                                  
 26506                                  	; 08/07/2018 - Retro DOS v3.0
 26507                                  FATALC:
 26508 000058AA E86701                  	call	SET_I24_EXTENDED_ERROR
 26509                                  	;cmp	di,0Ch
 26510 000058AD 83FF0C                  	CMP	DI,error_I24_gen_failure
 26511 000058B0 7603                    	JBE	short GOT_RIGHT_CODE	; Error codes above gen_failure get
 26512 000058B2 BF0C00                  	MOV	DI,error_I24_gen_failure; mapped to gen_failure. Real codes
 26513                                  					;  Only come via GetExtendedError
 26514                                  ;**
 26515                                  ;
 26516                                  ; Entry point used by REDIRector on Network I 24 errors.
 26517                                  ;
 26518                                  ;	ASSUME	DS:NOTHING,ES:NOTHING,SS:DOSDATA
 26519                                  ;
 26520                                  ; ALL I 24 regs set up. ALL Extended error info SET. ALLOWED Set.
 26521                                  ;     EXITHOLD set for restore of ES:BP.
 26522                                  ;
 26523                                  	;entry	NET_I24_ENTRY
 26524                                  NET_I24_ENTRY:
 26525                                  GOT_RIGHT_CODE:
 26526 000058B5 36803E[CE02]00          	CMP     BYTE [SS:ERRORMODE],0	; No INT 24s if already INT 24
 26527 000058BB 7404                            JZ	SHORT NoSetFail
 26528 000058BD B003                    	MOV	AL,3
 26529 000058BF EB51                    	JMP	short FailRet
 26530                                  NoSetFail:
 26531 000058C1 368926[2205]                    MOV     [SS:CONTSTK],SP		; SS override
 26532 000058C6 16                              PUSH	SS
 26533 000058C7 07                              POP	ES
 26534                                      
 26535                                  	; Wango!!! We may need to free some user state info... In 
 26536                                  	; particular, we may have locked down a JFN for a user and he may 
 26537                                  	; NEVER return to us. Thus,we need to free it here and then 
 26538                                  	; reallocate it when we come back.
 26539                                  
 26540 000058C8 36833E[4205]FF          	CMP	word [SS:SFN],-1
 26541 000058CE 740C                    	JZ	short _NoFree
 26542 000058D0 1E                      	push	ds
 26543 000058D1 56                      	push	si
 26544 000058D2 36C536[4605]            	LDS	SI,[SS:PJFN]
 26545 000058D7 C604FF                  	MOV	BYTE [SI],0FFH
 26546 000058DA 5E                      	pop	si
 26547 000058DB 1F                      	pop	ds
 26548                                  
 26549                                  _NoFree:
 26550 000058DC FA                      	CLI
 26551                                  					; Prepare to play with stack
 26552 000058DD 36FE06[CE02]                    INC     BYTE [SS:ERRORMODE]	; Flag INT 24 in progress
 26553 000058E2 36FE0E[CF02]                    DEC     BYTE [SS:INDOS]		; INT 24 handler might not return
 26554 000058E7 368E16[2005]                    MOV     SS,[SS:USER_SS]
 26555 000058EC 268B26[1E05]                    MOV     SP,[ES:USER_SP]         ; User stack pointer restored
 26556                                  	;int	24h	
 26557 000058F1 CD24                            INT     int_fatal_abort         ; Fatal error interrupt vector, must preserve ES
 26558 000058F3 268926[1E05]                    MOV     [ES:USER_SP],SP         ; restore our stack
 26559 000058F8 268C16[2005]                    MOV     [ES:USER_SS],SS
 26560 000058FD 8CC5                            MOV     BP,ES
 26561 000058FF 8ED5                            MOV     SS,BP
 26562 00005901 368B26[2205]                    MOV     SP,[SS:CONTSTK]
 26563 00005906 36FE06[CF02]                    INC     BYTE [SS:INDOS]		; Back in the DOS
 26564 0000590B 36C606[CE02]00                  MOV     BYTE [SS:ERRORMODE],0	; Back from INT 24
 26565 00005911 FB                              STI
 26566                                  FailRet:
 26567 00005912 36C42E[1A05]                    LES     BP,[SS:EXITHOLD]
 26568                                  	
 26569                                  	; 08/07/2018
 26570                                  
 26571                                  	; Triage the user's reply.
 26572                                  
 26573 00005917 3C01                    	CMP	AL,1
 26574 00005919 7235                    	JB	short CheckIgnore	; 0 => ignore
 26575 0000591B 743D                    	JZ	short CheckRetry	; 1 => retry
 26576 0000591D 3C03                    	CMP	AL,3			; 3 => fail
 26577 0000591F 7543                    	JNZ	short DoAbort 		; 2, invalid => abort
 26578                                  
 26579                                  	; The reply was fail.  See if we are allowed to fail.
 26580                                  
 26581                                  				; SS override for ALLOWED, EXTOPEN_ON, 
 26582                                  				; ALLOWED, FAILERR, WPERR, SFN, pJFN
 26583                                  	;test	byte [ss:ALLOWED],8
 26584 00005921 36F606[F702]08          	test	byte [ss:ALLOWED],Allowed_FAIL ; Can we?
 26585 00005927 743B                    	jz	short DoAbort	; No, do abort
 26586                                  DoFail:
 26587 00005929 B003                    	MOV	AL,3		; just in case...
 26588                                  				; AN000;EO. I24 error disabled
 26589                                  	;(MSDOS 6.0, MSCTRLC.ASM, 1991)
 26590                                  	;test	byte [ss:EXTOPEN_ON],EXT_OPEN_I24_OFF 
 26591                                  	;jnz	short Cleanup 		; AN000;EO. no
 26592                                  	
 26593 0000592B 36FE06[F602]            	inc	byte [SS:FAILERR]	; Tell everybody
 26594                                  
 26595                                  CleanUp:
 26596 00005930 36C606[D002]FF          	MOV	byte [SS:WPERR],-1
 26597 00005936 36833E[4205]FF          	CMP	word [SS:SFN],-1
 26598                                  	;jnz	short CleanUp2
 26599                                  	;retn
 26600 0000593C 7411                    	jz	short Cleanup_retn ; 08/07/2018 - Retro DOS v3.0
 26601                                  ;CleanUp2:
 26602 0000593E 1E                      	push	ds
 26603 0000593F 56                      	push	si
 26604 00005940 50                      	push	ax
 26605 00005941 36A1[4205]              	MOV	AX,[ss:SFN]
 26606 00005945 36C536[4605]            	LDS	SI,[ss:PJFN]
 26607 0000594A 8804                    	MOV	[SI],AL
 26608 0000594C 58                      	pop	ax
 26609 0000594D 5E                      	pop	si
 26610 0000594E 1F                      	pop	ds
 26611                                  Cleanup_retn:
 26612 0000594F C3                      	retn
 26613                                  
 26614                                  	; The reply was IGNORE. See if we are allowed to ignore.
 26615                                  
 26616                                  CheckIgnore:
 26617                                  	;test	byte [ss:ALLOWED],20h
 26618 00005950 36F606[F702]20          	test	byte [ss:ALLOWED],Allowed_IGNORE ; Can we?
 26619 00005956 74D1                    	jz	short DoFail			 ; No, do fail
 26620 00005958 EBD6                    	jmp	short CleanUp
 26621                                  
 26622                                  	; The reply was RETRY. See if we are allowed to retry.
 26623                                  
 26624                                  CheckRetry:
 26625                                  	;test	byte [ss:ALLOWED],10h
 26626 0000595A 36F606[F702]10          	test	byte [ss:ALLOWED],Allowed_RETRY	; Can we?
 26627 00005960 74C7                    	jz	short DoFail			; No, do fail
 26628 00005962 EBCC                    	JMP	short CleanUp
 26629                                  
 26630                                  	; The reply was ABORT.
 26631                                  
 26632                                  DoAbort:
 26633 00005964 16                      	push	ss
 26634 00005965 1F                      	pop	ds
 26635                                  
 26636 00005966 803E[0303]00            	CMP	byte [CONSWAP],0
 26637 0000596B 7403                    	JZ	short NOSWAP2
 26638 0000596D E876E4                  	call	SWAPBACK
 26639                                  NOSWAP2:
 26640                                  	; See if we are to truly abort. If we are in the process of aborting, 
 26641                                  	; turn this abort into a fail.
 26642                                  
 26643                                  	;test	byte [fAborting],0FFh
 26644                                  	;jnz	short DoFail
 26645                                  
 26646 00005970 803E[0503]00            	cmp	byte [fAborting],0
 26647 00005975 75B2                    	JNZ	short DoFail
 26648                                  
 26649                                  	; Set return code
 26650                                  
 26651 00005977 C606[1705]02            	MOV	BYTE [EXIT_TYPE],EXIT_HARD_ERROR
 26652 0000597C 30C0                    	XOR	AL,AL
 26653                                  
 26654                                  	; we are truly aborting the process. Go restore information from 
 26655                                  	; the PDB as necessary.
 26656                                  
 26657 0000597E E93B0B                  	jmp	exit_inner
 26658                                  
 26659                                  ;**
 26660                                  ;
 26661                                  ; reset_environment checks the DS value against the CurrentPDB. If they are
 26662                                  ; different, then an old-style return is performed. If they are the same,
 26663                                  ; then we release jfns and restore to parent. We still use the PDB at DS:0 as
 26664                                  ; the source of the terminate addresses.
 26665                                  ;
 26666                                  ; Some subtlety: We are about to issue a bunch of calls that *may* generate
 26667                                  ; INT 24s. We *cannot* allow the user to restart the abort process; we may
 26668                                  ; end up aborting the wrong process or turn a terminate/stay/resident into a
 26669                                  ; normal abort and leave interrupt handlers around. What we do is to set a
 26670                                  ; flag that will indicate that if any abort code is seen, we just continue the
 26671                                  ; operation. In essence, we dis-allow the abort response.
 26672                                  ;
 26673                                  ; output:   none.
 26674                                  ;
 26675                                  	;entry	reset_environment
 26676                                  	
 26677                                  reset_environment:
 26678                                  	; 30/07/2018 - Retro DOS v3.0
 26679                                  	; IBMDOS.COM (MSDOS3.3) - Offset 588Ah 
 26680                                  
 26681                                  ;***	invoke	Reset_Version		; AN007 ;MS. reset version number
 26682                                  
 26683 00005981 1E                      	PUSH	DS			; save PDB of process
 26684                                  
 26685                                  	; There are no critical sections in force. Although we may enter 
 26686                                  	; here with critical sections locked down, they are no longer 
 26687                                  	; relevant. We may safely free all allocated resources.
 26688                                  
 26689 00005982 B482                    	MOV	AH,82h
 26690                                  		; Microsoft Networks - END DOS CRITICAL SECTIONS 0 THROUGH 7
 26691                                  	;int	2Ah 	
 26692 00005984 CD2A                    	INT	int_IBM
 26693                                  
 26694                                  					; SS override
 26695 00005986 36C606[0503]FF          	MOV	byte [SS:fAborting],-1	; signal abort in progress
 26696                                  
 26697                                  					; DOS 4.00 doesn't need it
 26698                                  	;CallInstall NetResetEnvironment, MultNET, 34  
 26699                                  					; Allow REDIR to clear some stuff
 26700                                  					; On process exit.
 26701 0000598C B82211                  	mov     ax, 1122h
 26702 0000598F CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - PROCESS TERMINATION HOOK
 26703                                  			; SS = DOS CS
 26704                                  	;mov	al,22h	
 26705 00005991 B022                    	MOV	AL,int_terminate
 26706 00005993 E8CBC2                  	call	_$GET_INTERRUPT_VECTOR	; and who to go to
 26707                                  
 26708 00005996 59                      	POP	CX			; get ThisPDB
 26709 00005997 06                      	push	es
 26710 00005998 53                      	push	bx			; save return address
 26711                                  
 26712 00005999 368B1E[DE02]            	MOV	BX,[SS:CurrentPDB] 	; get currentPDB
 26713 0000599E 8EDB                    	MOV	DS,BX
 26714 000059A0 A11600                  	MOV	AX,[PDB.PARENT_PID]	; get parentPDB
 26715                                  
 26716                                  	; AX = parentPDB, BX = CurrentPDB, CX = ThisPDB
 26717                                  	; Only free handles if AX <> BX and BX = CX and [exit_code].upper 
 26718                                  	; is not Exit_keep_process
 26719                                  	
 26720 000059A3 39D8                    	CMP	AX,BX
 26721 000059A5 7418                    	JZ	short reset_return	; parentPDB = CurrentPDB
 26722 000059A7 39CB                    	CMP	BX,CX
 26723 000059A9 7514                    	JNZ	short reset_return	; CurrentPDB <> ThisPDB
 26724 000059AB 50                      	PUSH	AX			; save parent
 26725                                  
 26726                                  					; SS override
 26727                                  	;cmp	byte [SS:EXIT_TYPE],3
 26728 000059AC 36803E[1705]03          	CMP	BYTE [SS:EXIT_TYPE],EXIT_KEEP_PROCESS ; 15/08/2018
 26729 000059B2 7406                    	JZ	short reset_to_parent 	; keeping this process
 26730                                  
 26731                                  	; We are truly removing a process. Free all allocation blocks 
 26732                                  	; belonging to this PDB
 26733                                  
 26734                                  	;invoke	arena_free_process
 26735 000059B4 E83C0B                  	call	arena_free_process
 26736                                  
 26737                                  	; Kill off remainder of this process. Close file handles and signal 
 26738                                  	; to relevant network folks that this process is dead. Remember that 
 26739                                  	; CurrentPDB is STILL the current process!
 26740                                  
 26741                                  	;invoke	DOS_ABORT
 26742 000059B7 E897E0                  	call	DOS_ABORT
 26743                                  
 26744                                  reset_to_parent:
 26745                                  					; SS override
 26746 000059BA 368F06[DE02]            	POP	word [SS:CurrentPDB]	; set up process as parent
 26747                                  
 26748                                  reset_return:				; come here for normal return
 26749                                  	;Context DS			; DS is used to refer to DOSDATA  
 26750 000059BF 16                      	push	ss
 26751 000059C0 1F                      	pop	ds	
 26752                                  
 26753 000059C1 B0FF                    	MOV	AL,-1
 26754                                  
 26755                                  	; make sure that everything is clean In this case ignore any errors, 
 26756                                  	; we cannot "FAIL" the abort, the program being aborted is dead.
 26757                                  
 26758                                  	;EnterCrit critDisk
 26759 000059C3 E8A6C6                  	call	EcritDisk
 26760                                  	;invoke	FLUSHBUF
 26761 000059C6 E86405                  	call	FLUSHBUF
 26762                                  	;LeaveCrit critDisk
 26763 000059C9 E8A8C6                  	call	LcritDisk
 26764                                  
 26765                                  	; Decrement open ref. count if we had done a virtual open earlier.
 26766                                  
 26767 000059CC E8C3F8                  	call	CHECK_VIRT_OPEN
 26768 000059CF FA                      	CLI
 26769 000059D0 C606[CF02]00            	MOV	BYTE [INDOS],0		; Go to known state
 26770 000059D5 C606[D002]FF            	MOV	BYTE [WPERR],-1		; Forget about WP error
 26771 000059DA C606[0503]00            	MOV	byte [fAborting],0	; let aborts occur
 26772 000059DF 8F06[1A05]              	POP	WORD [EXITHOLD]
 26773 000059E3 8F06[1C05]              	POP	WORD [EXITHOLD+2]
 26774                                  
 26775                                  	; Snake into multitasking... Get stack from CurrentPDB person
 26776                                  
 26777 000059E7 8E1E[DE02]              	MOV	DS,[CurrentPDB]
 26778 000059EB 8E163000                	MOV	SS,[PDB.USER_STACK+2]
 26779 000059EF 8B262E00                	MOV	SP,[PDB.USER_STACK]
 26780                                  
 26781 000059F3 E8EFBB                  	call	restore_world
 26782                                  
 26783                                  	; MSDOS 6.0
 26784                                  	;push	ax			; set up ds, but save ds in TEMPSEG 
 26785                                  	;mov	ax, ds			; and not on stack.
 26786                                  	;getdseg <ds>			; ds -> dosdata
 26787                                  	;mov	TempSeg, ax
 26788                                  	;pop	ax
 26789                                  					; set up ds to DOSDATA
 26790 000059F6 2EA3[1E05]              	MOV	[CS:USER_SP],AX
 26791                                  
 26792 000059FA 58                      	POP	AX			; suck off CS:IP of interrupt...
 26793 000059FB 58                      	POP	AX
 26794 000059FC 58                      	POP	AX
 26795                                  
 26796                                  ; M011 : BEGIN
 26797                                  
 26798                                  	; MSDOS 3.3
 26799                                  ;	MOV	AX,0F202h	; STI
 26800                                  
 26801                                  	; MSDOS 6.0
 26802 000059FD 9F                      	LAHF
 26803 000059FE 86E0                    	XCHG	AH, AL
 26804 00005A00 2402                    	AND	AL, 02
 26805 00005A02 B4F2                    	MOV	AH, 0F2h
 26806                                  
 26807                                  ; M011 : END
 26808                                  
 26809                                  	; MSDOS 3.3 (& MSDOS 6.0)
 26810 00005A04 50                      	PUSH	AX
 26811                                   
 26812 00005A05 2EFF36[1C05]            	PUSH	word [CS:EXITHOLD+2]
 26813 00005A0A 2EFF36[1A05]            	PUSH	word [CS:EXITHOLD]
 26814                                  
 26815 00005A0F 2EA1[1E05]              	MOV	AX,[CS:USER_SP]
 26816                                  
 26817                                  	; MSDOS 6.0
 26818                                  	;mov	ds,TempSeg	; restore ds
 26819                                  
 26820 00005A13 CF                      	IRET			; Long return back to user terminate address
 26821                                  
 26822                                  ;---------------------------------------------------------------------------
 26823                                  ;
 26824                                  ; Procedure Name : SET_I24_EXTENDED_ERROR
 26825                                  ;
 26826                                  ; This routine handles extended error codes.
 26827                                  ; Input : DI = error code from device
 26828                                  ; Output: All EXTERR fields are set
 26829                                  ;
 26830                                  ;--------------------------------------------------------------------------
 26831                                  
 26832                                  SET_I24_EXTENDED_ERROR:
 26833 00005A14 50                      	PUSH	AX
 26834                                  					; ErrMap24End is in DOSDATA
 26835 00005A15 B8[030E]                	MOV	AX,ErrMap24End
 26836 00005A18 2D[F30D]                	SUB	AX,ErrMap24
 26837                                  					; Change to dosdata to access 
 26838                                  					; ErrMap24 and EXTERR -SR
 26839                                  	; MSDOS 6.0
 26840                                  	;push	ds
 26841                                  	;getdseg <ds>			; ds ->dosdata
 26842                                  
 26843                                  	; AX is the index of the first unavailable error. Do not translate 
 26844                                  	; if greater or equal to AX.
 26845                                  
 26846 00005A1B 39C7                    	CMP	DI,AX
 26847 00005A1D 89F8                    	MOV	AX,DI
 26848 00005A1F 7307                    	JAE	short NoTrans
 26849                                  
 26850 00005A21 2E8A85[F30D]            	MOV	AL,[CS:DI+ErrMap24]
 26851 00005A26 30E4                    	XOR	AH,AH
 26852                                  NoTrans:
 26853 00005A28 2EA3[D202]              	MOV	[CS:EXTERR],AX
 26854                                  	;pop	ds
 26855                                  	;assume	ds:nothing
 26856 00005A2C 58                      	POP	AX
 26857                                  
 26858                                  	; Now Extended error is set correctly. Translate it to get correct 
 26859                                  	; error locus class and recommended action.
 26860                                  
 26861 00005A2D 56                      	PUSH	SI
 26862                                  					; ERR_TABLE_24 is in DOSCODE 
 26863 00005A2E BE[A30D]                	MOV	SI,ERR_TABLE_24
 26864 00005A31 E80FBD                  	call	CAL_LK			; Set other extended error fields
 26865 00005A34 5E                      	POP	SI
 26866 00005A35 C3                      	retn
 26867                                  
 26868                                  ;============================================================================
 26869                                  ; FAT.ASM, MSDOS 6.0, 1991
 26870                                  ;============================================================================
 26871                                  ; 30/07/2018 - Retro DOS v3.0
 26872                                  
 26873                                  ;	TITLE	FAT - FAT maintenance routines
 26874                                  ;	NAME	FAT
 26875                                  
 26876                                  ;**	FAT.ASM
 26877                                  ;
 26878                                  ;	Low level local device routines for performing disk change sequence,
 26879                                  ;	setting cluster validity, and manipulating the FAT
 26880                                  ;
 26881                                  ;	IsEof
 26882                                  ;	UNPACK
 26883                                  ;	PACK
 26884                                  ;	MAPCLUSTER
 26885                                  ;	FATREAD_SFT
 26886                                  ;	FATREAD_CDS
 26887                                  ;	FAT_operation
 26888                                  ;
 26889                                  ;	Revision history:
 26890                                  ;
 26891                                  ;	  AN000  version Jan. 1988
 26892                                  ;	   A001  PTM	      -- disk changed for look ahead buffers
 26893                                  ;
 26894                                  ;	M014 - if a request for pack\unpack cluster 0 is made we write\read
 26895                                  ;	       from CL0FATENTRY rather than disk.
 26896                                  ;
 26897                                  
 26898                                  ;Break <IsEOF - check the quantity in BX for EOF>
 26899                                  ;----------------------------------------------------------------------------
 26900                                  ;
 26901                                  ; Procedure Name : IsEOF
 26902                                  ;
 26903                                  ; IsEOF - check the fat value in BX for eof.
 26904                                  ;
 26905                                  ;   Inputs:	ES:BP point to DPB
 26906                                  ;		BX has fat value
 26907                                  ;   Outputs:	JAE eof
 26908                                  ;   Registers modified: none
 26909                                  ;
 26910                                  ;---------------------------------------------------------------------------
 26911                                  
 26912                                  IsEOF:
 26913                                  	;cmp	word [es:bp+0Dh],0FF6h
 26914 00005A36 26817E0DF60F            	CMP	word [ES:BP+DPB.MAX_CLUSTER],4096-10 ; is this 16 bit fat?
 26915 00005A3C 730B                    	JAE	short EOF16			; yes, check for eof there
 26916                                  
 26917                                  ;J.K. 8/27/86
 26918                                  ;Modified to accept 0FF0h as an eof. This is to handle the diskfull case
 26919                                  ;of any media that has "F0"(Other) as a MediaByte.
 26920                                  ;Hopely, this does not create any side effect for those who may use any value
 26921                                  ;other than "FF8-FFF" as an EOF for their own file.
 26922                                  
 26923 00005A3E 81FBF00F                	cmp	bx,0FF0h
 26924 00005A42 7404                    	je	short IsEOF_other
 26925                                  
 26926 00005A44 81FBF80F                	CMP	BX,0FF8h		; do the 12 bit compare
 26927                                  IsEOF_other:
 26928 00005A48 C3                      	retn
 26929                                  EOF16:
 26930 00005A49 83FBF8                  	CMP	BX,0FFF8h		; 16 bit compare
 26931 00005A4C C3                      	retn
 26932                                  
 26933                                  ;Break	<UNPACK -- UNPACK FAT ENTRIES>
 26934                                  ;---------------------------------------------------------------------------
 26935                                  ;
 26936                                  ; Procedur Name : UNPACK
 26937                                  ;
 26938                                  ; Inputs:
 26939                                  ;	BX = Cluster number (may be full 16-bit quantity)
 26940                                  ;	ES:BP = Base of drive parameters
 26941                                  ; Outputs:
 26942                                  ;	DI = Contents of FAT for given cluster (may be full 16-bit quantity)
 26943                                  ;	Zero set means DI=0 (free cluster)
 26944                                  ;	Carry set means error (currently user FAILed to I 24)
 26945                                  ; SI Destroyed, No other registers affected. Fatal error if cluster too big.
 26946                                  ;
 26947                                  ; NOTE: if BX = 0 then DI = contents of CL0FATENTRY
 26948                                  ;
 26949                                  ;----------------------------------------------------------------------------
 26950                                  
 26951                                  UNPACK:
 26952                                  	; MSDOS 6.0			; M014 - Start
 26953                                  	;or	bx, bx			; Q: are we unpacking cluster 0
 26954                                  	;jnz	short up_cont		; N: proceed with normal unpack
 26955                                  	;mov	di,[CL0FATENTRY]	; Y: return value in CL0FATENTRY
 26956                                  	;or	di,di 			; return z if di=0
 26957                                  	;retn				; done
 26958                                  ;up_cont:				; M014 - End
 26959                                  	;cmp	bx,[es:bp+0Dh]
 26960 00005A4D 263B5E0D                	CMP	BX,[ES:BP+DPB.MAX_CLUSTER]
 26961 00005A51 7726                    	JA	short HURTFAT
 26962 00005A53 E8B900                  	CALL	MAPCLUSTER
 26963 00005A56 721E                    	jc	short _DoContext
 26964 00005A58 8B3D                    	MOV	DI,[DI]
 26965 00005A5A 750E                    	JNZ	short High12		; MZ if high 12 bits, go get 'em
 26966 00005A5C 268B760D                	MOV	SI,[ES:BP+DPB.MAX_CLUSTER] ; MZ is this 16-bit fat?
 26967 00005A60 81FEF60F                	CMP	SI,4096-10
 26968 00005A64 720C                    	JB	short Unpack12		; MZ No, go 'AND' off bits
 26969 00005A66 09FF                    	OR	DI,DI			; MZ set zero condition code, clears carry
 26970 00005A68 EB0C                    	JMP	SHORT _DoContext 	; MZ go do context
 26971                                  
 26972                                  High12:
 26973 00005A6A D1EF                    	SHR	DI,1
 26974 00005A6C D1EF                    	SHR	DI,1
 26975 00005A6E D1EF                    	SHR	DI,1
 26976 00005A70 D1EF                    	SHR	DI,1
 26977                                  Unpack12:
 26978 00005A72 81E7FF0F                	AND	DI,0FFFh		; Clears carry
 26979                                  _DoContext:
 26980 00005A76 16                      	PUSH	SS
 26981 00005A77 1F                      	POP	DS
 26982 00005A78 C3                      	retn
 26983                                  
 26984                                  HURTFAT:
 26985                                  	;mov	word [es:bp+1Eh],0FFFFh
 26986 00005A79 26C7461EFFFF            	MOV	word [ES:BP+DPB.FREE_CNT],-1 ; Err in FAT must force recomp of freespace
 26987 00005A7F 50                      	PUSH	AX
 26988 00005A80 B488                    	MOV	AH,Allowed_FAIL+80h ; 88h
 26989                                  
 26990                                  ;hkn; SS override
 26991 00005A82 36C606[F702]08          	MOV	byte [SS:ALLOWED],Allowed_FAIL ; 8
 26992                                  ;
 26993                                  ; Signal Bad FAT to INT int_fatal_abort handler. We have an invalid cluster.
 26994                                  ;
 26995 00005A88 BFFF0F                  	MOV	DI,0FFFh		; In case INT int_fatal_abort returns (it shouldn't)
 26996 00005A8B E808FE                  	call	FATAL
 26997 00005A8E 3C03                    	CMP	AL,3
 26998 00005A90 F8                      	CLC
 26999 00005A91 7501                    	JNZ	short OKU_RET 		; Try to ignore bad FAT
 27000 00005A93 F9                      	STC				; User said FAIL
 27001                                  OKU_RET:
 27002 00005A94 58                      	POP	AX
 27003                                  hurtfat_retn:
 27004 00005A95 C3                      	retn
 27005                                  
 27006                                  ;Break	<PACK -- PACK FAT ENTRIES>
 27007                                  ;----------------------------------------------------------------------------
 27008                                  ;
 27009                                  ; Procedure Name : PACK
 27010                                  ;
 27011                                  ; Inputs:
 27012                                  ;	BX = Cluster number
 27013                                  ;	DX = Data
 27014                                  ;	ES:BP = Pointer to drive DPB
 27015                                  ; Outputs:
 27016                                  ;	The data is stored in the FAT at the given cluster.
 27017                                  ;	SI,DX,DI all destroyed
 27018                                  ;	Carry set means error (currently user FAILed to I 24)
 27019                                  ;	No other registers affected
 27020                                  ;
 27021                                  ; NOTE: if BX = 0 then data in DX is atored in CL0FATENTRY.
 27022                                  ;
 27023                                  ;---------------------------------------------------------------------------
 27024                                  
 27025                                  PACK:
 27026                                  	; MSDOS 6.0			; M014 - start
 27027                                  	;or	bx, bx			; Q: are we packing cluster 0
 27028                                  	;jnz	short p_cont		; N: proceed with normal pack
 27029                                  	;mov	[CL0FATENTRY],dx	; Y: place value in CL0FATENTRY
 27030                                  	;retn				; done
 27031                                  ;p_cont:				; M014 - end
 27032 00005A96 E87600                  	CALL	MAPCLUSTER
 27033 00005A99 72DB                    	JC	short _DoContext
 27034 00005A9B 8B35                    	MOV	SI,[DI]
 27035 00005A9D 740B                    	JZ	short ALIGNED 		; byte (not nibble) aligned
 27036 00005A9F 51                      	PUSH	CX			; move data to upper 12 bits
 27037 00005AA0 B104                    	MOV	CL,4
 27038 00005AA2 D3E2                    	SHL	DX,CL
 27039 00005AA4 59                      	POP	CX
 27040 00005AA5 83E60F                  	AND	SI,0FH			; leave in original low 4 bits
 27041 00005AA8 EB14                    	JMP	SHORT PACKIN
 27042                                  ALIGNED:
 27043                                  	;cmp	word [es:bp+0Dh],0FF6h
 27044 00005AAA 26817E0DF60F            	CMP	word [ES:BP+DPB.MAX_CLUSTER],4096-10 ; MZ 16 bit fats?
 27045 00005AB0 730A                    	JAE	short Pack16		; MZ yes, go clobber original data
 27046 00005AB2 81E600F0                	AND	SI,0F000h		; MZ leave in upper 4 bits of original
 27047 00005AB6 81E2FF0F                	AND	DX,0FFFh		; MZ store only 12 bits
 27048 00005ABA EB02                    	JMP	SHORT PACKIN		; MZ go store
 27049                                  Pack16:
 27050 00005ABC 31F6                    	XOR	SI,SI			; MZ no original data
 27051                                  PACKIN:
 27052 00005ABE 09D6                    	OR	SI,DX
 27053 00005AC0 8935                    	MOV	[DI],SI
 27054                                  
 27055                                  ;hkn; SS override
 27056 00005AC2 36C536[7405]            	LDS	SI,[SS:CURBUF]
 27057                                  	; MSDOS 6.0
 27058                                  	;TEST	byte [SI+BUFFINFO.buf_flags],buf_dirty  
 27059                                  					;LB. if already dirty		  ;AN000;
 27060                                  	;JNZ	short yesdirty6		;LB.  don't increment dirty count ;AN000;
 27061                                  	;call	INC_DIRTY_COUNT		;LB.				  ;AN000;
 27062                                  	
 27063                                  	;or	byte [si+5],40h
 27064 00005AC7 804C0540                	OR	byte [SI+BUFFINFO.buf_flags],buf_dirty  
 27065                                  ;yesdirty6:				;LB.				  ;AN000;
 27066                                  ;hkn; SS override
 27067 00005ACB 36803E[1305]00          	CMP	BYTE [SS:CLUSSPLIT],0	; 15/08/2018
 27068                                  ;hkn; SS is DOSDATA
 27069 00005AD1 16                      	push	ss
 27070 00005AD2 1F                      	pop	ds
 27071 00005AD3 74C0                    	jz	short hurtfat_retn	; Carry clear
 27072 00005AD5 50                      	PUSH	AX
 27073 00005AD6 53                      	PUSH	BX
 27074 00005AD7 51                      	PUSH	CX
 27075 00005AD8 A1[2805]                	MOV	AX,[CLUSSAVE]
 27076 00005ADB 8E1E[7605]              	MOV	DS,[CURBUF+2]
 27077 00005ADF 83C610                  	ADD	SI,BUFINSIZ  ; add si,16
 27078 00005AE2 8824                    	MOV	[SI],AH
 27079                                  ;hkn; SS is DOSDATA
 27080                                  	;Context DS
 27081 00005AE4 16                      	push	ss
 27082 00005AE5 1F                      	pop	ds	
 27083 00005AE6 50                      	PUSH	AX
 27084                                  	; MSDOS 6.0
 27085                                  	;MOV	DX,[CLUSSEC+2]		;F.C. >32mb			;AN000;
 27086                                  	;MOV	[HIGH_SECTOR],DX	;F.C. >32mb			;AN000;
 27087                                  
 27088 00005AE7 8B16[2A05]              	MOV	DX,[CLUSSEC]
 27089 00005AEB BE0100                  	MOV	SI,1
 27090 00005AEE 30C0                    	XOR	AL,AL
 27091 00005AF0 E89403                  	call	GETBUFFRB
 27092 00005AF3 58                      	POP	AX
 27093 00005AF4 7213                    	JC	short POPP_RET
 27094 00005AF6 C53E[7405]              	LDS	DI,[CURBUF]
 27095                                  	; MSDOS 6.0
 27096                                  	;TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty  
 27097                                  	;				;LB. if already dirty		  ;AN000;
 27098                                  	;JNZ	short yesdirty7		;LB.  don't increment dirty count ;AN000;
 27099                                  	;call	INC_DIRTY_COUNT 	;LB.				  ;AN000;
 27100                                  	
 27101                                  	;or	byte [di+5],40h
 27102 00005AFA 804D0540                	OR	byte [DI+BUFFINFO.buf_flags],buf_dirty 
 27103                                  yesdirty7:
 27104 00005AFE 83C710                  	ADD	DI,BUFINSIZ ; add di,16
 27105 00005B01 4F                      	DEC	DI
 27106                                  	;add	di,[es:bp+2]
 27107 00005B02 26037E02                	ADD	DI,[ES:BP+DPB.SECTOR_SIZE]
 27108 00005B06 8805                    	MOV	[DI],AL
 27109 00005B08 F8                      	CLC
 27110                                  POPP_RET:
 27111 00005B09 16                      	PUSH	SS
 27112 00005B0A 1F                      	POP	DS
 27113 00005B0B 59                      	POP	CX
 27114 00005B0C 5B                      	POP	BX
 27115 00005B0D 58                      	POP	AX
 27116 00005B0E C3                      	retn
 27117                                  
 27118                                  ; 31/07/2018 - Retro DOS v3.0
 27119                                  
 27120                                  ;Break	<MAPCLUSTER - BUFFER A FAT SECTOR>
 27121                                  ;---------------------------------------------------------------------------
 27122                                  ;
 27123                                  ; Procedure Name : MAPCLUSTER
 27124                                  ;
 27125                                  ; Inputs:
 27126                                  ;	ES:BP Points to DPB
 27127                                  ;	BX Is cluster number
 27128                                  ; Function:
 27129                                  ;	Get a pointer to the cluster
 27130                                  ; Outputs:
 27131                                  ;	DS:DI Points to contents of FAT for given cluster
 27132                                  ;	DS:SI Points to start of buffer
 27133                                  ;	Zero Not set if cluster data is in high 12 bits of word
 27134                                  ;	Zero set if cluster data is in low 12 or 16 bits
 27135                                  ;	Carry set if failed.
 27136                                  ; SI is destroyed.
 27137                                  ;
 27138                                  ;---------------------------------------------------------------------------
 27139                                  
 27140                                  MAPCLUSTER:
 27141                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5A15h
 27142 00005B0F C606[1305]00            	MOV	BYTE [CLUSSPLIT],0
 27143                                  	;SAVE	<AX,BX,CX,DX>
 27144 00005B14 50                      	push	ax
 27145 00005B15 53                      	push	bx
 27146 00005B16 51                      	push	cx
 27147 00005B17 52                      	push	dx
 27148 00005B18 89D8                    	MOV	AX,BX			; AX = BX
 27149 00005B1A 26817E0DF60F            	CMP	word [ES:BP+DPB.MAX_CLUSTER],4096-10  ; MZ 16 bit fat?
 27150 00005B20 7302                    	JAE	short Map16		; MZ yes, do 16 bit algorithm
 27151 00005B22 D1E8                    	SHR	AX,1			; AX = BX/2
 27152                                  Map16:	
 27153                                  	; MSDOS 6.0			; MZ skip prev => AX=2*BX
 27154                                  	;XOR	DI,DI			; >32mb fat ;AN000;
 27155                                  	
 27156 00005B24 01D8                    	ADD	AX,BX			; AX = 1.5*fat = byte offset in fat
 27157                                  	;ADC	DI,DI			; >32mb fat ;DI is zero before op;AN000;
 27158 00005B26 268B4E02                	MOV	CX,[ES:BP+DPB.SECTOR_SIZE]
 27159                                  
 27160                                  ;IF FastDiv
 27161                                  ;
 27162                                  ; Gross hack: 99% of all disks have 512 bytes per sector. We test for this
 27163                                  ; case and apply a really fast algorithm to get the desired results
 27164                                  ;
 27165                                  ; Divide method takes 157+4*4=173 (MOV and DIV)
 27166                                  ; Fast method takes 39+20*4=119
 27167                                  ;
 27168                                  ; This saves a bunch.
 27169                                  ;
 27170 00005B2A 81F90002                	CMP	CX,512			; 4	Is this 512 byte sector?
 27171 00005B2E 750E                    	jne	short _DoDiv		; 4     for no jump
 27172 00005B30 89C2                    	MOV	DX,AX			; 2	get set for remainder
 27173 00005B32 81E2FF01                	AND	DX,512-1		; 4	Form remainder
 27174 00005B36 88E0                    	MOV	AL,AH			; 2     Quotient in formation in AL
 27175                                  	; MDOS 6.0
 27176                                  	;shr	di,1			; 2
 27177                                  	;rcr	al,1			; 2
 27178                                  	; MDOS 3.3
 27179 00005B38 D0E8                    	shr	al,1	
 27180                                  	; MDOS 3.3 (& MSDOS 6.0)
 27181 00005B3A 30E4                    	xor	ah,ah			; 3
 27182 00005B3C EB04                    	jmp	short DivDone		; 16
 27183                                  _DoDiv:
 27184                                  ;ENDIF
 27185                                  	; MSDOS 6.0
 27186                                  	;mov	dx,di			; 2
 27187                                  	; MSDOS 3.3
 27188 00005B3E 31D2                    	xor	dx,dx
 27189                                  	; MSDOS 3.3 (& MSDOS 6.0)	
 27190 00005B40 F7F1                    	DIV	CX			; 155 AX is FAT sector # DX is sector index
 27191                                  ;IF FastDiv
 27192                                  DivDone:
 27193                                  ;ENDIF
 27194 00005B42 26034606                	ADD	AX,[ES:BP+DPB.FIRST_FAT]
 27195 00005B46 49                      	DEC	CX			; CX is sector size - 1
 27196                                  	;SAVE	<AX,DX,CX>
 27197 00005B47 50                      	push	ax
 27198 00005B48 52                      	push	dx
 27199 00005B49 51                      	push	cx
 27200 00005B4A 89C2                    	MOV	DX,AX
 27201                                  	; MSDOS 6.0
 27202                                  	;MOV	word [HIGH_SECTOR],0 	;F.C. >32mb  low sector #
 27203 00005B4C 30C0                    	XOR	AL,AL
 27204 00005B4E BE0100                  	MOV	SI,1
 27205                                  	;invoke	GETBUFFRB
 27206 00005B51 E83303                  	call	GETBUFFRB
 27207                                  	;RESTORE <CX,AX,DX>		; CX is sec siz-1, AX is offset in sec
 27208 00005B54 59                      	pop	cx
 27209 00005B55 58                      	pop	ax
 27210 00005B56 5A                      	pop	dx
 27211 00005B57 724B                    	JC	short MAP_POP
 27212 00005B59 C536[7405]              	LDS	SI,[CURBUF]
 27213 00005B5D 8D7C10                  	LEA	DI,[SI+BUFINSIZ]  ; [si+16]
 27214 00005B60 01C7                    	ADD	DI,AX
 27215 00005B62 39C8                    	CMP	AX,CX
 27216 00005B64 752B                    	JNZ	short MAPRET
 27217 00005B66 8A05                    	MOV	AL,[DI]
 27218                                  	;Context DS		 	;hkn; SS is DOSDATA
 27219 00005B68 16                      	push	ss
 27220 00005B69 1F                      	pop	ds	
 27221 00005B6A FE06[1305]              	INC	BYTE [CLUSSPLIT]
 27222 00005B6E A2[2805]                	MOV	[CLUSSAVE],AL
 27223 00005B71 8916[2A05]              	MOV	[CLUSSEC],DX
 27224                                  	; MSDOS 6.0
 27225                                  	;MOV	WORD [CLUSSEC+2],0      ;F.C. >32mb		;AN000;
 27226 00005B75 42                      	INC	DX
 27227                                  	;MOV	word [HIGH_SECTOR],0	;F.C. >32mb FAT sector <32mb ;AN000;
 27228 00005B76 30C0                    	XOR	AL,AL
 27229 00005B78 BE0100                  	MOV	SI,1
 27230                                  	;invoke	GETBUFFRB
 27231 00005B7B E80903                  	call	GETBUFFRB
 27232 00005B7E 7224                    	JC	short MAP_POP
 27233 00005B80 C536[7405]              	LDS	SI,[CURBUF]
 27234 00005B84 8D7C10                  	LEA	DI,[SI+BUFINSIZ]
 27235 00005B87 8A05                    	MOV	AL,[DI]
 27236                                  	;Context DS			;hkn; SS is DOSDATA
 27237 00005B89 16                      	push	ss
 27238 00005B8A 1F                      	pop	ds
 27239 00005B8B A2[2905]                	MOV	[CLUSSAVE+1],AL
 27240                                  
 27241                                  ;hkn; CLUSSAVE is in DOSDATA
 27242 00005B8E BF[2805]                	MOV	DI,CLUSSAVE
 27243                                  MAPRET:
 27244                                  	;RESTORE <DX,CX,BX>
 27245 00005B91 5A                      	pop	dx
 27246 00005B92 59                      	pop	cx
 27247 00005B93 5B                      	pop	bx
 27248 00005B94 31C0                    	XOR	AX,AX			; MZ allow shift to clear carry
 27249 00005B96 26817E0DF60F            	CMP	word [ES:BP+DPB.MAX_CLUSTER],4096-10 ; MZ is this 16-bit fat?
 27250 00005B9C 7302                    	JAE	short MapSet		; MZ no, set flags
 27251 00005B9E 89D8                    	MOV	AX,BX
 27252                                  MapSet:
 27253 00005BA0 A801                    	TEST	AL,1			; set zero flag if not on boundary
 27254                                  	;RESTORE <AX>
 27255 00005BA2 58                      	pop	ax
 27256 00005BA3 C3                      	retn
 27257                                  
 27258                                  MAP_POP:
 27259                                  	;RESTORE <DX,CX,BX,AX>
 27260 00005BA4 5A                      	pop	dx
 27261 00005BA5 59                      	pop	cx
 27262 00005BA6 5B                      	pop	bx
 27263 00005BA7 58                      	pop	ax
 27264 00005BA8 C3                      	retn
 27265                                  
 27266                                  ;Break	<FATREAD_SFT/FATREAD_CDS -- CHECK DRIVE GET FAT>
 27267                                  ;----------------------------------------------------------------------------
 27268                                  ;
 27269                                  ; Procedure Name : FATREAD_SFT
 27270                                  ;
 27271                                  ; Inputs:
 27272                                  ;	ES:DI points to an SFT for the drive of intrest (local only,
 27273                                  ;		giving a NET SFT will produce system crashing results).
 27274                                  ;	DS DOSDATA
 27275                                  ; Function:
 27276                                  ;	Can be used by an SFT routine (like CLOSE) to invalidate buffers
 27277                                  ;	if disk changed.
 27278                                  ;	In other respects, same as FATREAD_CDS.
 27279                                  ;	(note ES:DI destroyed!)
 27280                                  ; Outputs:
 27281                                  ;	Carry set if error (currently user FAILed to I 24)
 27282                                  ; NOTE: This routine may cause FATREAD_CDS to "miss" a disk change
 27283                                  ;	as far as invalidating curdir_ID is concerned.
 27284                                  ;	Since getting a true disk changed on this call is a screw up
 27285                                  ;	anyway, that's the way it goes.
 27286                                  ;
 27287                                  ;---------------------------------------------------------------------------
 27288                                  
 27289                                  FATREAD_SFT:
 27290 00005BA9 26C46D07                	LES	BP,[ES:DI+SF_ENTRY.sf_devptr]
 27291                                  	;MOV	AL,[ES:BP+DPB.DRIVE] ; [es:bp+0]
 27292 00005BAD 268A4600                	mov	AL,[ES:BP]
 27293 00005BB1 A2[1105]                	MOV	[THISDRV],AL
 27294 00005BB4 E83DBB                  	call	GOTDPB			;Set THISDPB
 27295 00005BB7 E87A00                  	CALL	FAT_GOT_DPB
 27296                                  fatread_sft_retn:
 27297 00005BBA C3                      	retn
 27298                                  
 27299                                  ;----------------------------------------------------------------------------
 27300                                  ;
 27301                                  ; Procedure Name : FATREAD_CDS
 27302                                  ;
 27303                                  ; Inputs:
 27304                                  ;	DS:DOSDATA
 27305                                  ;	ES:DI points to an CDS for the drive of intrest (local only,
 27306                                  ;		giving a NET or NUL CDS will produce system crashing results).
 27307                                  ; Function:
 27308                                  ;	If disk may have been changed, media is determined and buffers are
 27309                                  ;	flagged invalid. If not, no action is taken.
 27310                                  ; Outputs:
 27311                                  ;	ES:BP = Drive parameter block
 27312                                  ;	THISDPB = ES:BP
 27313                                  ;	THISDRV set
 27314                                  ;	Carry set if error (currently user FAILed to I 24)
 27315                                  ; DS preserved , all other registers destroyed
 27316                                  ;
 27317                                  ;---------------------------------------------------------------------------
 27318                                  
 27319                                  FATREAD_CDS:
 27320 00005BBB 06                      	PUSH	ES
 27321 00005BBC 57                      	PUSH	DI
 27322                                  	;les	bp,[es:di+45h]
 27323 00005BBD 26C46D45                	LES	BP,[ES:DI+curdir.devptr]
 27324                                  	;MOV	AL,[ES:BP+DPB.DRIVE] ; [es:bp+0]
 27325 00005BC1 268A4600                	mov	AL,[ES:BP]
 27326 00005BC5 A2[1105]                	MOV	[THISDRV],AL
 27327 00005BC8 E829BB                  	call	GOTDPB			;Set THISDPB
 27328 00005BCB E86600                  	CALL	FAT_GOT_DPB
 27329 00005BCE 5F                      	POP	DI			;Get back CDS pointer
 27330 00005BCF 07                      	POP	ES
 27331 00005BD0 72E8                    	jc	short fatread_sft_retn
 27332 00005BD2 7539                    	JNZ	short NO_CHANGE		;Media NOT changed
 27333                                  
 27334                                  ;	Media changed. We now need to find all CDS structures which use this
 27335                                  ;	DPB and invalidate their ID pointers.
 27336                                  
 27337                                  MED_CHANGE:
 27338 00005BD4 31C0                    	XOR	AX,AX
 27339 00005BD6 48                      	DEC	AX			; AX = -1
 27340 00005BD7 1E                      	PUSH	DS
 27341 00005BD8 8A0E[4700]              	MOV	CL,[CDSCOUNT]
 27342 00005BDC 30ED                    	XOR	CH,CH			; CX is number of structures
 27343                                  	;lds	si,[es:di+45h]
 27344 00005BDE 26C57545                	LDS	SI,[ES:DI+curdir.devptr] ; Find all CDS with this devptr
 27345                                  
 27346                                  ;hkn; SS override
 27347                                  
 27348                                  ;	Find all CDSs with this DevPtr
 27349                                  ;
 27350                                  ;	(ax) = -1
 27351                                  ;	(ds:si) = DevPtr
 27352                                  
 27353 00005BE2 36C43E[3C00]            	LES	DI,[SS:CDSADDR]		; (es:di) = CDS pointer
 27354                                  frcd20: 
 27355                                  	;test	word [es:di+43h],8000h
 27356 00005BE7 26F745430080            	TEST	word [ES:DI+curdir.flags],curdir_isnet
 27357 00005BED 7518                    	JNZ	short frcd25		; Leave NET guys alone!!
 27358                                  
 27359                                  	; MSDOS 3.3
 27360                                  	;push	es
 27361                                  	;push	di
 27362                                  	;les	di,[es:di+45h]
 27363                                  	;;les	di,[ES:DI+curdir.devptr]
 27364                                  	;call	POINTCOMP
 27365                                  	;pop	di
 27366                                  	;pop	es
 27367                                  	;jnz	short frcd25
 27368                                  
 27369                                  	; MSDOS 6.0
 27370 00005BEF 263B7545                	cmp	si,[ES:DI+curdir.devptr]
 27371 00005BF3 7512                    	jne	short frcd25		; no match
 27372 00005BF5 8CDB                    	mov	bx,ds
 27373 00005BF7 263B5D47                	cmp	bx,[ES:DI+curdir.devptr+2]
 27374 00005BFB 750A                    	jne	short frcd25		; CDS not for this drive
 27375                                  
 27376                                  	; MSDOS 3.3 (& MSDOS 6.0)
 27377                                  	;test	[es:di+49h],ax
 27378 00005BFD 26854549                	test	[ES:DI+curdir.ID],AX
 27379 00005C01 7404                    	JZ	short frcd25		; If root (0), leave root
 27380                                  	;mov	[es:di+49h],ax
 27381 00005C03 26894549                	MOV	[ES:DI+curdir.ID],AX	; else invalid
 27382                                  frcd25:	
 27383                                  	;add	di,81
 27384 00005C07 83C751                  	ADD	DI,curdir.size		; Point to next CDS
 27385 00005C0A E2DB                    	LOOP	frcd20
 27386 00005C0C 1F                      	POP	DS
 27387                                  NO_CHANGE:
 27388 00005C0D C42E[2405]              	LES	BP,[THISDPB]
 27389 00005C11 F8                      	CLC
 27390 00005C12 C3                      	retn
 27391                                  
 27392                                  ;Break	<Fat_Operation - miscellaneous fat stuff>
 27393                                  ;----------------------------------------------------------------------------
 27394                                  ;
 27395                                  ; Procedure Name : FAT_operation
 27396                                  ;
 27397                                  ;----------------------------------------------------------------------------
 27398                                  FAT_operation:
 27399                                  	; 31/07/2018 - Retro DOS v3.0
 27400                                  FATERR:
 27401                                  	;mov	word [es:bp+1Eh],-1
 27402 00005C13 26C7461EFFFF            	MOV	word [ES:BP+DPB.FREE_CNT],-1 
 27403                                  					; Err in FAT must force recomp of freespace
 27404                                  	;and	di,0FFh
 27405 00005C19 81E7FF00                	AND	DI,STECODE		; Put error code in DI
 27406                                  	;mov	byte [ALLOWED],18h
 27407 00005C1D C606[F702]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 27408                                  	;mov	ah,1Ah
 27409 00005C22 B41A                    	MOV	AH,2+Allowed_FAIL+Allowed_RETRY ; While trying to read FAT
 27410 00005C24 A0[1105]                	MOV	AL,[THISDRV]		; Tell which drive
 27411 00005C27 E870FC                  	call	FATAL1
 27412 00005C2A C42E[2405]              	LES	BP,[THISDPB]
 27413 00005C2E 3C03                    	CMP	AL,3
 27414 00005C30 7502                    	JNZ	short FAT_GOT_DPB	; User said retry
 27415 00005C32 F9                      	STC				; User said FAIL
 27416 00005C33 C3                      	retn
 27417                                  
 27418                                  FAT_GOT_DPB:
 27419                                  	;Context DS			;hkn; SS is DOSDATA
 27420 00005C34 16                      	push	ss			
 27421 00005C35 1F                      	pop	ds
 27422                                  	;mov	al,0Fh
 27423 00005C36 B00F                    	MOV	AL,DMEDHL
 27424                                  	;mov	al,[es:bp+1]
 27425 00005C38 268A6601                	MOV	AH,[ES:BP+DPB.UNIT] 
 27426 00005C3C A3[0603]                	MOV	[DEVCALL_REQLEN],AX ; 09/09/2018 
 27427 00005C3F C606[0803]01            	MOV	BYTE [DEVCALL_REQFUNC],DEVMDCH
 27428 00005C44 C706[0903]0000          	MOV	word [DEVCALL_REQSTAT],0
 27429                                  	;mov	al,[es:bp+16h]
 27430 00005C4A 268A4616                	MOV	AL,[ES:BP+DPB.MEDIA]
 27431 00005C4E A2[1303]                	MOV	[CALLMED],AL
 27432 00005C51 06                      	PUSH	ES
 27433 00005C52 1E                      	PUSH	DS
 27434                                  
 27435                                  ;hkn; DEVCALL is in DOSDATA
 27436 00005C53 BB[0603]                	MOV	BX,DEVCALL
 27437                                  	;lds	si,[es:bp+12h]
 27438 00005C56 26C57612                	LDS	SI,[ES:BP+DPB.DRIVER_ADDR] ; DS:SI Points to device header
 27439 00005C5A 07                      	POP	ES			; ES:BX Points to call header
 27440 00005C5B E89CF2                  	call	DEVIOCALL2
 27441                                  	;Context DS		 	;hkn; SS is DOSDATA
 27442 00005C5E 16                      	push	ss
 27443 00005C5F 1F                      	pop	ds
 27444 00005C60 07                      	POP	ES			; Restore ES:BP
 27445 00005C61 8B3E[0903]              	MOV	DI,[DEVCALL_REQSTAT]
 27446                                  	;test	di,8000h
 27447                                  	;jnz	short FATERR
 27448 00005C65 09FF                    	or	di,di
 27449 00005C67 78AA                    	js	short FATERR		; have error
 27450 00005C69 30E4                    	XOR	AH,AH
 27451                                  	;xchg	ah,[es:bp+17h]
 27452 00005C6B 26866617                	XCHG	AH,[ES:BP+DPB.FIRST_ACCESS] ; Reset dpb_first_access
 27453 00005C6F A0[1105]                	MOV	AL,[THISDRV]		; Use physical unit number
 27454                                  ; See if we had changed volume id by creating one on the diskette
 27455 00005C72 3806[070A]              	cmp	[VOLCHNG_FLAG],AL
 27456 00005C76 7508                    	jnz	short CHECK_BYT
 27457 00005C78 C606[070A]FF            	mov	byte [VOLCHNG_FLAG],-1
 27458 00005C7D E98800                  	jmp	GOGETBPB		; Need to get device driver to read in
 27459                                  					; new volume label.
 27460                                  CHECK_BYT:
 27461 00005C80 0A26[1403]              	OR	AH,[CALLRBYT]
 27462                                  	;JNS	short CHECK_ZR		; ns = 0 or 1
 27463                                  	;JMP	short NEWDSK
 27464 00005C84 785D                    	js	short NEWDSK
 27465                                  
 27466                                  CHECK_ZR:
 27467 00005C86 743D                    	JZ	short CHKBUFFDIRT	; jump if I don't know
 27468 00005C88 F8                      	CLC
 27469 00005C89 C3                      	retn				; If Media not changed (NZ)
 27470                                  
 27471                                  DISK_CHNG_ERR:
 27472 00005C8A 06                      	PUSH	ES
 27473 00005C8B 55                      	PUSH	BP
 27474                                  	;les	bp,[es:bp+12h]
 27475 00005C8C 26C46E12                	LES	BP,[ES:BP+DPB.DRIVER_ADDR] ; Get device pointer
 27476                                  	;test	word [es:bp+4],800h
 27477 00005C90 26F746040008            	TEST	word [ES:BP+SYSDEV.ATT],DEVOPCL ; Did it set vol id?
 27478 00005C96 5D                      	POP	BP
 27479 00005C97 07                      	POP	ES
 27480 00005C98 7426                    	JZ	short FAIL_OPJ2		; Nope, FAIL
 27481 00005C9A 1E                      	PUSH	DS			; Save buffer pointer for ignore
 27482 00005C9B 57                      	PUSH	DI
 27483 00005C9C 16                      	push	ss			;hkn; SS is DOSDATA
 27484 00005C9D 1F                      	pop	ds
 27485                                  	;mov	byte [ALLOWED],18h
 27486 00005C9E C606[F702]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 27487 00005CA3 06                      	PUSH	ES
 27488 00005CA4 C43E[1503]              	LES	DI,[CALLVIDM]		; Get volume ID pointer
 27489 00005CA8 8C06[D802]              	MOV	[EXTERRPT+2],ES
 27490 00005CAC 07                      	POP	ES
 27491 00005CAD 893E[D602]              	MOV	[EXTERRPT],DI
 27492                                  	;mov	ax,0Fh
 27493 00005CB1 B80F00                  	MOV	AX,error_I24_wrong_disk
 27494 00005CB4 C606[1005]01            	MOV	byte [READOP],1		; Write
 27495                                  	;invoke	HARDERR
 27496 00005CB9 E88CFB                  	call	HARDERR
 27497 00005CBC 5F                      	POP	DI			; Get back buffer for ignore
 27498 00005CBD 1F                      	POP	DS
 27499 00005CBE 3C03                    	CMP	AL,3
 27500                                  FAIL_OPJ2:
 27501 00005CC0 7416                    	JZ	short FAIL_OP
 27502 00005CC2 E96FFF                  	JMP	FAT_GOT_DPB		; Retry
 27503                                  
 27504                                  CHKBUFFDIRT:
 27505                                  	; MSDOS 6.0
 27506                                  	;cmp	word [DirtyBufferCount],0	; any dirty buffers ? ;hkn;
 27507                                  	;je	short NEWDSK			; no, skip the check
 27508                                  	;call	GetCurHead			; get pointer to first buffer
 27509                                  
 27510                                  	; MSDOS 3.3
 27511 00005CC5 C53E[3800]              	lds	di,[BUFFHEAD]
 27512                                  nbuffer:
 27513                                  	;cmp	al,[di+4]
 27514 00005CC9 384504                  	cmp	[di+BUFFINFO.buf_ID],al	; Unit OK ?
 27515 00005CCC 750E                    	jne	short lfnxt			; no, go for next buffer
 27516                                  	;test   byte [di+5],40h
 27517 00005CCE F6450540                	TEST	byte [di+BUFFINFO.buf_flags],buf_dirty	; is the buffer dirty ?
 27518 00005CD2 7408                    	jz	short lfnxt			; no, go for next buffer
 27519                                  	;Context DS
 27520 00005CD4 16                      	push	ss
 27521 00005CD5 1F                      	pop	ds
 27522 00005CD6 F8                      	clc
 27523 00005CD7 C3                      	retn
 27524                                  
 27525                                  FAIL_OP:					; This label & code is here
 27526                                  	;Context DS				;  for reachability
 27527 00005CD8 16                      	push	ss
 27528 00005CD9 1F                      	pop	ds
 27529 00005CDA F9                      	STC
 27530 00005CDB C3                      	retn
 27531                                  
 27532                                  lfnxt:
 27533                                  	; 15/08/2018
 27534                                  	;mov	di,[di]
 27535                                  	;mov	di,[di+BUFFINFO.buf_next]	; get next buffer
 27536                                  	;
 27537 00005CDC C53D                    	lds	di,[di]
 27538                                  	;
 27539                                  	; MSDOS 6.0
 27540                                  	;cmp	[FIRST_BUFF_ADDR],di		; is this where we started ?;hkn;
 27541                                  	;jne	short nbuffer			; no, check this guy also
 27542                                  	; MSDOS 3.3
 27543 00005CDE 83FFFF                  	cmp	di,-1
 27544 00005CE1 75E6                    	jne	short nbuffer
 27545                                  
 27546                                  ; If no dirty buffers, assume Media changed
 27547                                  NEWDSK:
 27548                                  	;mov	word [es:bp+1Eh],0FFFFh
 27549 00005CE3 26C7461EFFFF            	mov	word [ES:BP+DPB.FREE_CNT],-1	; Media changed, must
 27550                                  	; MSDOS 6.0				;  recompute
 27551                                  	;call	GetCurHead
 27552                                  	; MSDOS 3.3
 27553 00005CE9 E8B500                  	call	SETVISIT
 27554                                  nxbuffer:
 27555                                  	; MSDOS 3.3
 27556 00005CEC 804D0520                	or 	byte [di+5],20h
 27557                                  	; MSDOS 3.3 (& MSDOS 6.0)
 27558                                  	;cmp	[di+4],al
 27559 00005CF0 384504                  	cmp	[DI+BUFFINFO.buf_ID],al		; This drive ?
 27560 00005CF3 750E                    	jne	short lfnxt2
 27561                                  	;test	byte [di+5],40h
 27562 00005CF5 F6450540                	TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty
 27563 00005CF9 758F                    	jnz	short DISK_CHNG_ERR
 27564                                  	;mov	word [di+4],20FFh
 27565 00005CFB C74504FF20              	mov	word [DI+BUFFINFO.buf_ID],(buf_visit*256)+0FFh ; free up
 27566 00005D00 E8CB00                  	call	SCANPLACE
 27567                                  	; MSDOS 6.0
 27568                                  	;jmp	short skpbuff
 27569                                  ;lfnxt2:
 27570                                  	;;mov	di,[di+BUFFINFO.buf_next]
 27571                                  	;mov	di,[di]
 27572                                  ;skpbuff:
 27573                                  	;cmp	di,[FIRST_BUFF_ADDR]					;hkn;
 27574                                  	;jne	short nxbuffer
 27575                                  
 27576                                  	;CMP	word [SC_CACHE_COUNT],0	;LB.  look ahead buffers ?	;AN001;
 27577                                  	;JZ	short GOGETBPB		;LB.  no			;AN001;
 27578                                  	;CMP	AL,[CURSC_DRIVE]	;LB.  same as changed drive	;AN001;
 27579                                  	;JNZ	short GOGETBPB		;LB.  no			;AN001;
 27580                                  	;MOV	byte [CURSC_DRIVE],-1	;LB.  invalidate look ahead buffers ;AN000;
 27581                                  lfnxt2:
 27582                                  	; MSDOS 3.3
 27583 00005D03 E8B400                  	call	SKIPVISIT
 27584 00005D06 75E4                    	jnz	short nxbuffer
 27585                                  GOGETBPB:
 27586                                  	;lds	di,[es:bp+12h]
 27587 00005D08 26C57E12                	LDS	DI,[ES:BP+DPB.DRIVER_ADDR]
 27588                                  	;test	word [di+4],2000h
 27589 00005D0C F745040020              	TEST	word [DI+SYSDEV.ATT],ISFATBYDEV
 27590 00005D11 7510                    	JNZ	short GETFREEBUF
 27591                                  	;context DS	    		;hkn; SS is DOSDATA
 27592 00005D13 16                      	push	ss
 27593 00005D14 1F                      	pop	ds
 27594 00005D15 BB0200                  	MOV	BX,2
 27595 00005D18 E832FD                  	CALL	UNPACK			; Read the first FAT sector into CURBUF
 27596                                  FAIL_OPJ:
 27597 00005D1B 72BB                    	JC	short FAIL_OP
 27598 00005D1D C53E[7405]              	LDS	DI,[CURBUF]
 27599 00005D21 EB0E                    	JMP	SHORT GOTGETBUF
 27600                                  
 27601                                  GETFREEBUF:
 27602 00005D23 06                      	PUSH	ES			; Get a free buffer for BIOS to use
 27603 00005D24 55                      	PUSH	BP
 27604                                  	; MSDOS 3.3
 27605 00005D25 36C53E[3800]            	LDS	DI,[SS:BUFFHEAD] ; 15/08/2018
 27606                                  	; MSDOS 6.0
 27607                                  	;XOR	DX,DX			;LB.  fake to get 1st	  ;AN000;
 27608                                  ;hkn; SS override
 27609                                  	;MOV	[SS:HIGH_SECTOR],DX	;LB.  buffer addr	  ;AN000;
 27610                                  	;call	GETCURHEAD		;LB.			  ;AN000;
 27611                                  	; MSDOS 3.3 (& MSDOS 6.0)
 27612 00005D2A E84F02                  	call	BUFWRITE
 27613 00005D2D 5D                      	POP	BP
 27614 00005D2E 07                      	POP	ES
 27615                                  	;JC	short FAIL_OPJ
 27616 00005D2F 72A7                    	jc	short FAIL_OP
 27617                                  GOTGETBUF:
 27618                                  	;add	di,16
 27619 00005D31 83C710                  	ADD	DI,BUFINSIZ
 27620                                  
 27621                                  ;hkn; SS override
 27622 00005D34 368C1E[1603]            	MOV	[SS:CALLXAD+2],DS
 27623                                  	;Context DS			;hkn; SS is DOSDATA
 27624 00005D39 16                      	push	ss
 27625 00005D3A 1F                      	pop	ds
 27626 00005D3B 893E[1403]              	MOV	[CALLXAD],DI
 27627                                  	;mov	al,16h
 27628 00005D3F B016                    	MOV	AL,DBPBHL
 27629                                  	;mov	ah,[es:bp+1]
 27630 00005D41 268A6601                	MOV	AH,[ES:BP+DPB.UNIT]
 27631 00005D45 A3[0603]                	MOV	[DEVCALL_REQLEN],AX ; 09/09/2018
 27632 00005D48 C606[0803]02            	MOV	BYTE [DEVCALL_REQFUNC],DEVBPB
 27633 00005D4D C706[0903]0000          	MOV	word [DEVCALL_REQSTAT],0
 27634                                  	;mov	al,[es:bp+16h]
 27635 00005D53 268A4616                	MOV	AL,[ES:BP+DPB.MEDIA]
 27636 00005D57 A2[1303]                	MOV	[CALLMED],AL
 27637 00005D5A 06                      	PUSH	ES
 27638 00005D5B 1E                      	PUSH	DS
 27639                                  	;push	word [es:bp+14h]
 27640 00005D5C 26FF7614                	PUSH	WORD [ES:BP+DPB.DRIVER_ADDR+2]
 27641                                  	;push	word [es:bp+12h]
 27642 00005D60 26FF7612                	PUSH	WORD [ES:BP+DPB.DRIVER_ADDR]
 27643                                  
 27644                                  ;hkn; DEVCALL is in DOSDATA
 27645 00005D64 BB[0603]                	MOV	BX,DEVCALL
 27646 00005D67 5E                      	POP	SI
 27647 00005D68 1F                      	POP	DS			; DS:SI Points to device header
 27648 00005D69 07                      	POP	ES			; ES:BX Points to call header
 27649                                  	;invoke	DEVIOCALL2
 27650 00005D6A E88DF1                  	call	DEVIOCALL2
 27651 00005D6D 07                      	POP	ES			; Restore ES:BP
 27652                                  	;Context DS
 27653 00005D6E 16                      	push	ss		 	;hkn; SS is DOSDATA
 27654 00005D6F 1F                      	pop	ds
 27655 00005D70 8B3E[0903]              	MOV	DI,[DEVCALL_REQSTAT]
 27656                                  	; MSDOS 3.3
 27657                                  	;test	di,8000h
 27658                                  	;jnz	short FATERRJ
 27659                                  	; MSDOS 6.0
 27660 00005D74 09FF                    	or	di,di
 27661 00005D76 7826                    	js	short FATERRJ 		; have error
 27662                                  	;;mov	al,[es:bp+16h]
 27663 00005D78 268A4616                	MOV	AL,[ES:BP+DPB.MEDIA]
 27664 00005D7C C536[1803]              	LDS	SI,[CALLBPB]
 27665                                  	;mov	word [es:bp+1Ch],0
 27666 00005D80 26C7461C0000            	MOV	word [ES:BP+DPB.NEXT_FREE],0 ; recycle scanning pointer
 27667                                  	;invoke	$SETDPB
 27668 00005D86 E803C0                  	call	_$SETDPB
 27669                                  
 27670                                  ;hkn; SS override
 27671 00005D89 36C53E[1403]            	LDS	DI,[SS:CALLXAD]		; Get back buffer pointer
 27672                                  	;mov	al,[es:bp+8]
 27673 00005D8E 268A4608                	MOV	AL,[ES:BP+DPB.FAT_COUNT]
 27674                                  
 27675                                  	; MSDOS 6.0
 27676                                  	;MOV	[DI+BUFFINFO.buf_wrtcnt-BUFINSIZ],AL ;>32mb		  ;AN000;
 27677                                  	;MOV	AX,[ES:BP+DPB.FAT_SIZE]		;>32mb			  ;AC000;
 27678                                  	;MOV	[DI.buf_wrtcntinc-BUFINSIZ],AX ;>32mb Correct buffer info ;AC000;
 27679                                  
 27680                                  	; MSDOS 3.3
 27681                                  	;mov	ah,[es:bp+0Fh]
 27682 00005D92 268A660F                	MOV	AH,[ES:BP+DPB.FAT_SIZE]
 27683                                  	;mov	[DI-8],ax
 27684 00005D96 8945F8                  	MOV	[DI+BUFFINFO.buf_wrtcnt-BUFINSIZ],AX
 27685                                  
 27686                                  	;Context DS			;hkn; SS is DOSDATA
 27687 00005D99 16                      	push	ss
 27688 00005D9A 1F                      	pop	ds
 27689 00005D9B 30C0                    	XOR	AL,AL			;Media changed (Z), Carry clear
 27690 00005D9D C3                      	retn
 27691                                  
 27692                                  FATERRJ: 
 27693 00005D9E E972FE                  	JMP	FATERR
 27694                                  
 27695                                  
 27696                                  ;============================================================================
 27697                                  ; STDBUF.ASM
 27698                                  ;============================================================================
 27699                                  ; Retro DOS v2.0 - 12/03/2018
 27700                                  
 27701                                  ;
 27702                                  ; Standard buffer management for MSDOS
 27703                                  ;
 27704                                  
 27705                                  ;.xlist
 27706                                  ;.xcref
 27707                                  ;INCLUDE STDSW.ASM
 27708                                  ;.cref
 27709                                  ;.list
 27710                                  
 27711                                  ;TITLE	STDBUF - MSDOS buffer management
 27712                                  ;NAME	STDBUF
 27713                                  
 27714                                  ;INCLUDE BUF.ASM
 27715                                  
 27716                                  ;============================================================================
 27717                                  ; BUF.ASM
 27718                                  ;============================================================================
 27719                                  ; 31/07/2018 - Retro DOS v3.0
 27720                                  ; Retro DOS v2.0 - 12/03/2018
 27721                                  
 27722                                  ;
 27723                                  ; buffer management for MSDOS
 27724                                  ;
 27725                                  
 27726                                  ;CODE	SEGMENT BYTE PUBLIC  'CODE'
 27727                                  ;       ASSUME  SS:DOSGROUP,CS:DOSGROUP
 27728                                  
 27729                                  ;SUBTTL SETVISIT,SKIPVISIT -- MANAGE BUFFER SCANS
 27730                                  
 27731                                  SETVISIT:
 27732                                  	; 31/07/2018 - Retro DOS v3.0
 27733                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5CAFh
 27734                                  ; Inputs:
 27735                                  ;       None
 27736                                  ; Function:
 27737                                  ;       Set up a scan of I/O buffers
 27738                                  ; Outputs:
 27739                                  ;       All visit flags = 0
 27740                                  ;               NOTE: This pre-scan is needed because a hard disk error
 27741                                  ;                     may cause a scan to stop in the middle leaving some
 27742                                  ;                     visit flags set, and some not set.
 27743                                  ;       DS:DI Points to [BUFFHEAD]
 27744                                  ; No other registers altered
 27745                                  
 27746 00005DA1 36C53E[3800]                    LDS     DI,[SS:BUFFHEAD] ; 15/03/2018
 27747 00005DA6 50                      	PUSH    AX
 27748                                          ;;XOR	AX,AX	  ;; MSDOS 2.11
 27749                                  	;mov	al,0DFh
 27750 00005DA7 B0DF                    	mov	al,~buf_visit
 27751                                  SETLOOP:
 27752                                          ;;MOV	[DI+7],AL ;; MSDOS 2.11
 27753                                  	;and	[DI+5],al
 27754 00005DA9 204505                  	AND	[DI+BUFFINFO.buf_flags],AL
 27755 00005DAC C53D                            LDS     DI,[DI]
 27756 00005DAE 83FFFF                          CMP     DI,-1
 27757 00005DB1 75F6                            JNZ     SHORT SETLOOP
 27758 00005DB3 58                              POP     AX ; 09/09/2018
 27759 00005DB4 36C53E[3800]            	LDS     DI,[SS:BUFFHEAD] ; 15/03/2018
 27760                                  SVISIT_RETN:
 27761 00005DB9 C3                              RETN
 27762                                  
 27763                                  SKIPVISIT:
 27764                                  	; 31/07/2018 - Retro DOS v3.0
 27765                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5CC8h
 27766                                  
 27767                                  ; Inputs:
 27768                                  ;       DS:DI Points to a buffer
 27769                                  ; Function:
 27770                                  ;       Skip visited buffers
 27771                                  ; Outputs:
 27772                                  ;       DS:DI Points to next unvisited buffer
 27773                                  ;       Zero is set if skip to LAST buffer
 27774                                  ; No other registers altered
 27775                                  
 27776 00005DBA 83FFFF                          CMP     DI,-1
 27777                                          ;retz
 27778 00005DBD 74FA                            JZ	SHORT SVISIT_RETN
 27779                                  
 27780                                  	;;CMP	BYTE [DI+7],1 ;; MSDOS 2.11
 27781                                          ;;;retnz
 27782                                          ;;JNZ	SHORT SVISIT_RETN
 27783                                  
 27784                                  	;test	byte [di+5],20h
 27785 00005DBF F6450520                	TEST	byte [DI+BUFFINFO.buf_flags],buf_visit	
 27786 00005DC3 7505                    	JNZ	short SKIPLOOP
 27787                                  	
 27788 00005DC5 50                      	push	ax
 27789 00005DC6 0C01                    	or	al,1
 27790 00005DC8 58                      	pop	ax
 27791 00005DC9 C3                      	retn	
 27792                                  
 27793                                  SKIPLOOP:
 27794 00005DCA C53D                    	LDS     DI,[DI]
 27795 00005DCC EBEC                            JMP     SHORT SKIPVISIT
 27796                                  
 27797                                  ;============================================================================
 27798                                  ; BUF.ASM, MSDOS 6.0, 1991
 27799                                  ;============================================================================
 27800                                  ; 31/07/2018 - Retro DOS v3.0
 27801                                  
 27802                                  ;	TITLE	BUF - MSDOS buffer management
 27803                                  ;	NAME	BUF
 27804                                  
 27805                                  ;**	BUF.ASM - Low level routines for buffer cache management
 27806                                  ;
 27807                                  ;	GETCURHEAD
 27808                                  ;	ScanPlace
 27809                                  ;	PLACEBUF
 27810                                  ;	PLACEHEAD
 27811                                  ;	PointComp
 27812                                  ;	GETBUFFR
 27813                                  ;	GETBUFFRB
 27814                                  ;	FlushBuf
 27815                                  ;	BufWrite
 27816                                  ;	SET_RQ_SC_PARMS
 27817                                  ;
 27818                                  ;	Revision history:
 27819                                  ;
 27820                                  ;		AN000  version 4.00  Jan. 1988
 27821                                  ;		A004   PTM 3765 -- Disk reset failed
 27822                                  ;		M039 DB 10/17/90 - Disk write optimization
 27823                                  ;		I001   5.0 PTR 722211 - Preserve CY when in buffer in HMA
 27824                                  
 27825                                  ;Break	<GETCURHEAD -- Get current buffer header>
 27826                                  ;----------------------------------------------------------------------------
 27827                                  ; Procedure Name : GetCurHead
 27828                                  ; Inputs:
 27829                                  ;	 No Inputs
 27830                                  ; Function:
 27831                                  ;	Returns the pointer to the first buffer in Queue
 27832                                  ;	and updates FIRST_BUFF_ADDR
 27833                                  ;       and invalidates LASTBUFFER (recency pointer)
 27834                                  ; Outputs:
 27835                                  ;	DS:DI = pointer to the first buffer in Queue
 27836                                  ;	FIRST_BUFF_ADDR = offset ( DI ) of First buffer in Queue
 27837                                  ;       LASTBUFFER = -1
 27838                                  ; No other registers altered
 27839                                  ;----------------------------------------------------------------------------
 27840                                  
 27841                                  ;procedure   GETCURHEAD,NEAR
 27842                                  ;
 27843                                  ;	lds	di, BufferQueue		; Pointer to the first buffer;smr;SS Override
 27844                                  ;	mov	word ptr [LastBuffer],-1; invalidate last buffer;smr;SS Override
 27845                                  ;	mov	[FIRST_BUFF_ADDR],di	;save first buffer addr;smr;SS Override
 27846                                  ;	ret
 27847                                  ;
 27848                                  ;EndProc GETCURHEAD
 27849                                  
 27850                                  ;Break	<SCANPLACE, PLACEBUF -- PUT A BUFFER BACK IN THE POOL>
 27851                                  ;----------------------------------------------------------------------------
 27852                                  ; Procedure Name : ScanPlace
 27853                                  ; Inputs:
 27854                                  ;	Same as PLACEBUF
 27855                                  ; Function:
 27856                                  ;	Save scan location and call PLACEBUF
 27857                                  ; Outputs:
 27858                                  ;	DS:DI Points to saved scan location
 27859                                  ; All registers, except DS:DI, preserved.
 27860                                  ;----------------------------------------------------------------------------
 27861                                  ;M039: Rewritten to preserve registers.
 27862                                  
 27863                                  SCANPLACE:
 27864                                  	; 31/07/2018 - Retro DOS v3.0
 27865                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5DDCh
 27866 00005DCE 06                      	push	es
 27867 00005DCF C435                    	les	si,[di]
 27868                                  	;les	si,[DI+BUFFINFO.buf_link]
 27869 00005DD1 E80600                  	call	PLACEBUF
 27870 00005DD4 06                      	push	es
 27871 00005DD5 1F                      	pop	ds
 27872 00005DD6 89F7                    	mov	di,si
 27873 00005DD8 07                      	pop	es
 27874                                  scanplace_retn:
 27875 00005DD9 C3                      	retn	
 27876                                  	
 27877                                  	; MSDOS 6.0
 27878                                  ;ScanPlace:
 27879                                  	;push	[di].buf_next		;Save scan location
 27880                                  	;call	PLACEBUF
 27881                                  	;pop	di
 27882                                  	;retn
 27883                                  
 27884                                  ;----------------------------------------------------------------------------
 27885                                  ; Procedure Name : PlaceBuf
 27886                                  ; Input:
 27887                                  ;	DS:DI points to buffer (DS->BUFFINFO array, DI=offset in array)
 27888                                  ; Function:
 27889                                  ;	Remove buffer from queue and re-insert it in proper place.
 27890                                  ; NO registers altered
 27891                                  ;----------------------------------------------------------------------------
 27892                                  
 27893                                  ;procedure   PLACEBUF,NEAR
 27894                                  
 27895                                  ;PLACEBUF:
 27896                                  	; 31/07/2018 - Retro DOS v3.0
 27897                                  
 27898                                  	; MSDOS 6.0
 27899                                  	;push	AX			;Save only regs we modify	;AN000;
 27900                                  	;push	BX							;AN000;
 27901                                  	;push	SI							;AN000;
 27902                                  	;mov	ax, [di].BUF_NEXT
 27903                                  	;mov	bx, word ptr[BufferQueue]	; bx = offset of head of list;smr;SS Override
 27904                                  	;
 27905                                  	;cmp	ax,bx				;Buf = last?		;AN000;
 27906                                  	;je	nret				;Yes, special case	;AN000;
 27907                                  	;cmp	di,bx				;Buf = first?		;AN000;
 27908                                  	;jne	not_first 			;Yes, special case	;AN000;
 27909                                  	;mov	word ptr [BufferQueue],ax	;smr;SS Override
 27910                                  	;jmp	short nret 			;Continue with repositioning;AN000;
 27911                                  ;not_first:
 27912                                  	;mov	SI,[DI].BUF_PREV		;No, SI = prior Buf	;AN000;
 27913                                  	;mov	[SI].BUF_NEXT,AX		; ax has di->buf_next	;AN000;
 27914                                  	;xchg	si, ax
 27915                                  	;mov	[SI].BUF_PREV,AX		;			;AN000;
 27916                                  	;
 27917                                  	;mov	SI,[BX].BUF_PREV		;SI-> last buffer	;AN000;
 27918                                  	;mov	[SI].BUF_NEXT,DI		;Add Buf to end of list ;AN000;
 27919                                  	;mov	[BX].BUF_PREV,DI					;AN000;
 27920                                  	;mov	[DI].BUF_PREV,SI		;Update link in Buf too	;AN000;
 27921                                  	;mov	[DI].BUF_NEXT,BX					;AN000;
 27922                                  ;nret:									;AN000;
 27923                                  	;pop	SI							;AN000;
 27924                                  	;pop	BX							;AN000;
 27925                                  	;pop	AX							;AN000;
 27926                                  	;								;AN000;
 27927                                  	;cmp	[di.buf_ID],-1			; Buffer FREE?		;AN000;
 27928                                          ;jne	pbx                             ; M039: -no, jump.
 27929                                  	;mov	WORD PTR [BufferQueue],di	; M039: -yes, make it LRU.
 27930                                  ;pbx:	
 27931                                  ;	ret								;AN000;
 27932                                  
 27933                                  	; 31/07/2018 - Retro DOS v3.0
 27934                                  
 27935                                  	; MSDOS 3.3
 27936                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5DDCh
 27937                                  
 27938                                  PLACEBUF:
 27939                                  	; 15/03/2018 - Retro DOS v2.0 (MSDOS 2.11)
 27940                                  	
 27941 00005DDA E81BB8                          CALL	save_world
 27942 00005DDD C40D                            LES     CX,[DI]
 27943 00005DDF 83F9FF                          CMP     CX,-1           	; Buf is LAST?
 27944 00005DE2 744B                            JZ      SHORT NRET		; Buffer already last
 27945 00005DE4 8CC5                            MOV     BP,ES           	; Pointsave = Buf.nextbuf
 27946 00005DE6 1E                              PUSH    DS
 27947 00005DE7 07                              POP     ES              	; Buf is ES:DI
 27948                                  	; 15/03/2018
 27949 00005DE8 36C536[3800]                    LDS     SI,[SS:BUFFHEAD] 	; Curbuf = HEAD
 27950 00005DED E88600                          CALL    POINTCOMP       	; Buf == HEAD?
 27951 00005DF0 750C                            JNZ     SHORT BUFLOOP
 27952 00005DF2 36890E[3800]                    MOV     [SS:BUFFHEAD],CX
 27953 00005DF7 36892E[3A00]                    MOV     [SS:BUFFHEAD+2],BP	; HEAD = Pointsave
 27954 00005DFC EB14                            JMP     SHORT LOOKEND
 27955                                  
 27956                                  BUFLOOP:
 27957                                  	; 31/07/2018
 27958 00005DFE 8CD8                    	mov	ax,ds
 27959 00005E00 89F3                    	mov	bx,si
 27960                                  	;lds	si,[SI+BUFFINFO.buf_link]
 27961 00005E02 C534                            LDS     SI,[SI]
 27962 00005E04 E86F00                          CALL    POINTCOMP
 27963 00005E07 75F5                            jnz	short BUFLOOP
 27964                                  	;
 27965 00005E09 8ED8                    	mov	ds,ax
 27966 00005E0B 89DE                    	mov	si,bx
 27967 00005E0D 890C                    	mov	[SI],cx
 27968                                  	;mov	[SI+BUFFINFO.buf_link],cx   ; If Curbuf.nextbuf == buf
 27969 00005E0F 896C02                  	mov	[SI+2],bp
 27970                                  	;mov	[BX+BUFFINFO.buf_link+2],bp ; Curbuf.nextbuf = Pointsave
 27971                                  LOOKEND:
 27972 00005E12 8CD8                    	mov	ax,ds
 27973 00005E14 89F3                    	mov	bx,si
 27974 00005E16 C534                            LDS     SI,[SI]
 27975 00005E18 83FEFF                          CMP     SI,-1
 27976 00005E1B 75F5                            jnz     short LOOKEND
 27977                                  
 27978                                  GOTHEEND:
 27979 00005E1D 8ED8                            mov	ds,ax
 27980 00005E1F 893F                    	mov	[BX],di
 27981 00005E21 8C4702                          MOV     [BX+2],ES 		; Curbuf.nextbuf = Buf
 27982 00005E24 26C705FFFF                      MOV     WORD [ES:DI],-1
 27983                                  	;mov	word [ES:DI+BUFFINFO.buf_link],-1
 27984 00005E29 26C74502FFFF                    MOV     WORD [ES:DI+2],-1 	; Buf is LAST
 27985                                  	;mov	word [ES:DI+BUFFINFO.buf_link+2],-1
 27986                                  NRET:
 27987 00005E2F E8B3B7                          CALL	restore_world
 27988                                  	
 27989                                  	;cmp	byte [di+4],-1
 27990 00005E32 807D04FF                	cmp	byte [DI+BUFFINFO.buf_ID],-1  ; Free buffer ?
 27991 00005E36 75A1                    	jnz     short scanplace_retn
 27992 00005E38 E80100                  	call    PLACEHEAD
 27993 00005E3B C3                      	retn
 27994                                  
 27995                                  ;EndProc PLACEBUF
 27996                                  
 27997                                  ;M039 - Removed PLACEHEAD.
 27998                                  ;----------------------------------------------------------------------------
 27999                                  ; places buffer at head
 28000                                  ;  NOTE:::::: ASSUMES THAT BUFFER IS CURRENTLY THE LAST
 28001                                  ;	ONE IN THE LIST!!!!!!!
 28002                                  ; BUGBUG ---- this routine can be removed because it has only
 28003                                  ; BUGBUG ---- one instruction. This routine is called from
 28004                                  ; BUGBUG ---- 3 places. ( Size = 3*3+6 = 15 bytes )
 28005                                  ; BUGBUG ---- if coded in line = 3 * 5 = 15 bytes
 28006                                  ; BUGBUG ---- But kept as it is for modularity
 28007                                  ;----------------------------------------------------------------------------
 28008                                  ;procedure   PLACEHEAD,NEAR
 28009                                  ;	mov	word ptr [BufferQueue], di
 28010                                  ;	ret
 28011                                  ;EndProc PLACEHEAD
 28012                                  ;M039
 28013                                  
 28014                                  ;----------------------------------------------------------------------------
 28015                                  ; Procedure Name : PLACEHEAD
 28016                                  ;
 28017                                  ; SAME AS PLACEBUF except places buffer at head
 28018                                  ;----------------------------------------------------------------------------
 28019                                  
 28020                                  	; MSDOS 3.3 (Retro DOS v3.0)
 28021                                  	; 05/09/2018
 28022                                  	; MSDOS 2.11 (Retro DOS v2.0)
 28023                                  PLACEHEAD:
 28024                                  	; 31/07/2018 - Retro DOS v3.0
 28025                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5D4Ah
 28026                                  
 28027 00005E3C E8B9B7                          CALL	save_world
 28028 00005E3F 1E                              PUSH	DS
 28029 00005E40 07                              POP	ES
 28030                                  	; 15/03/2018 - Retro DOS v2.0 (MSDOS 2.11)
 28031 00005E41 36C536[3800]                    LDS     SI,[SS:BUFFHEAD]
 28032                                  	; 31/07/2018 - Retro DOS v3.0 (MSDOS 3.3)
 28033 00005E46 E82D00                  	CALL    POINTCOMP
 28034 00005E49 7427                            JZ      SHORT GOTHEEND2
 28035 00005E4B 268935                  	MOV	[ES:DI],SI
 28036                                  	;mov	[ES:DI+BUFFINFO.buf_link],si
 28037 00005E4E 268C5D02                        MOV	[ES:DI+2],DS
 28038                                  	;mov	[ES:DI+BUFFINFO.buf_link+2],ds
 28039 00005E52 36893E[3800]                    MOV	[SS:BUFFHEAD],DI
 28040 00005E57 368C06[3A00]                    MOV	[SS:BUFFHEAD+2],ES
 28041                                  LOOKEND2:
 28042 00005E5C 8CD8                            mov	ax,ds
 28043 00005E5E 89F3                    	mov	bx,si
 28044                                  	;lds	si,[SI+BUFFINFO.buf_link]
 28045 00005E60 C534                            LDS     SI,[SI]
 28046 00005E62 E81100                          CALL    POINTCOMP
 28047 00005E65 75F5                            JNZ	SHORT LOOKEND2 ; 05/09/2018
 28048 00005E67 8ED8                            mov	ds,ax
 28049 00005E69 C707FFFF                	mov	word [bx],-1
 28050                                  	;mov	word [BX+BUFFINFO.buf_link],-1
 28051 00005E6D C74702FFFF              	mov	word [bx+2],-1
 28052                                  	;mov	word [BX+BUFFINFO.buf_link+2],-1
 28053                                  GOTHEEND2:
 28054 00005E72 E870B7                         	call	restore_world
 28055                                  placehead_retn:
 28056 00005E75 C3                      	retn
 28057                                  
 28058                                  ;Break	<POINTCOMP -- 20 BIT POINTER COMPARE>
 28059                                  ;----------------------------------------------------------------------------
 28060                                  ;
 28061                                  ; Procedure Name : PointComp
 28062                                  ; Inputs:
 28063                                  ;         DS:SI & ES:DI
 28064                                  ; Function:
 28065                                  ;          Checks for ((SI==DI) && (ES==DS))
 28066                                  ;	   Assumes that pointers are normalized for the
 28067                                  ;	   same segment
 28068                                  ;
 28069                                  ; Compare DS:SI to ES:DI (or DS:DI to ES:SI) for equality
 28070                                  ; DO NOT USE FOR < or >
 28071                                  ; No Registers altered
 28072                                  ;
 28073                                  ;----------------------------------------------------------------------------
 28074                                  
 28075                                  POINTCOMP:
 28076                                  	; 31/07/2018 - Retro DOS v3.0
 28077                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5D84h
 28078 00005E76 39FE                    	CMP	SI,DI
 28079                                  	;jnz	short _ret_label	; return if nz
 28080 00005E78 75FB                    	jnz	short placehead_retn 
 28081 00005E7A 51                      	PUSH	CX
 28082 00005E7B 52                      	PUSH	DX
 28083 00005E7C 8CD9                    	MOV	CX,DS
 28084 00005E7E 8CC2                    	MOV	DX,ES
 28085 00005E80 39D1                    	CMP	CX,DX
 28086 00005E82 5A                      	POP	DX
 28087 00005E83 59                      	POP	CX
 28088                                  ;_ret_label:
 28089 00005E84 C3                      	retn
 28090                                  
 28091                                  
 28092                                  ; 01/08/2018 - Retro DOS v3.0
 28093                                  ; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5D93h 
 28094                                  
 28095                                  ;Break	<GETBUFFR, GETBUFFRB -- GET A SECTOR INTO A BUFFER>
 28096                                  
 28097                                  ;**	GetBuffr - Get a non-FAT Sector into a Buffer
 28098                                  ;----------------------------------------------------------------------------
 28099                                  ;	GetBuffr does normal ( non-FAT ) sector buffering
 28100                                  ;	It gets the specified local sector into one of the I/O buffers
 28101                                  ;	and shuffles the queue
 28102                                  ; 
 28103                                  ;	ENTRY	(AL) = 0 means sector must be pre-read
 28104                                  ;		       ELSE no pre-read
 28105                                  ;		(DX) = Desired physical sector number	      (LOW)
 28106                                  ;		HIGH_SECTOR = Desired physical sector number (HIGH)
 28107                                  ;		(ES:BP) = Pointer to drive parameters
 28108                                  ;		ALLOWED set in case of INT 24
 28109                                  ;	EXIT	'C' set if error (user FAIL response to INT24)
 28110                                  ;		'C' clear if OK
 28111                                  ;		CURBUF Points to the Buffer for the sector
 28112                                  ;		    the buffer type bits OF buf_flags = 0, caller must set it
 28113                                  ;	USES	AX, BX, CX, SI, DI, Flags
 28114                                  ;----------------------------------------------------------------------------
 28115                                  
 28116                                  ;**	GetBuffrb - Get a FAT Sector into a Buffer
 28117                                  ;----------------------------------------------------------------------------
 28118                                  ;	GetBuffr reads a sector from the FAT file system's FAT table.
 28119                                  ;	It gets the specified sector into one of the I/O buffers
 28120                                  ;	and shuffles the queue. We need a special entry point so that
 28121                                  ;	we can read the alternate FAT sector if the first read fails, also
 28122                                  ;	so we can mark the buffer as a FAT sector.
 28123                                  ; 
 28124                                  ;	ENTRY	(AL) = 0 means sector must be pre-read
 28125                                  ;		       ELSE no pre-read
 28126                                  ;		(DX) = Desired physical sector number	      (LOW)
 28127                                  ;		(SI) != 0
 28128                                  ;		HIGH_SECTOR = Desired physical sector number (HIGH)
 28129                                  ;		(ES:BP) = Pointer to drive parameters
 28130                                  ;		ALLOWED set in case of INT 24
 28131                                  ;	EXIT	'C' set if error (user FAIL response to INT24)
 28132                                  ;		'C' clear if OK
 28133                                  ;		CUR ddBUF Points to the Buffer for the sector
 28134                                  ;		    the buffer type bits OF buf_flags = 0, caller must set it
 28135                                  ;	USES	AX, BX, CX, SI, DI, Flags
 28136                                  ;----------------------------------------------------------------------------
 28137                                  
 28138                                  GETBUFFR:
 28139 00005E85 31F6                    	XOR	SI,SI
 28140                                  
 28141                                  ;	This entry point is called for FAT buffering with SI != 0
 28142                                  
 28143                                  GETBUFFRB:
 28144 00005E87 A3[2C05]                	MOV	[PREREAD],AX			; save pre-read flag
 28145 00005E8A 268A4600                	mov	al,[ES:BP]
 28146                                  	;MOV	AL,[ES:BP+DPB.DRIVE] ; mov al,[es:bp+0]
 28147 00005E8E C53E[1E00]              	LDS	DI,[LastBuffer]			; Get the recency pointer
 28148                                  	; MSDOS 6.0
 28149                                  ;hkn; SS override
 28150                                  	;MOV	CX,[SS:HIGH_SECTOR]		; F.C. >32mb		;AN000;
 28151                                  
 28152                                  ;	See if this is the buffer that was most recently returned.
 28153                                  ;	A big performance win if it is.
 28154                                  
 28155 00005E92 83FFFF                  	CMP	DI,-1				; Recency pointer valid?
 28156 00005E95 740A                    	je	short getb5			; No
 28157                                  	;cmp	dx,[di+6]
 28158 00005E97 3B5506                  	CMP	DX,[DI+BUFFINFO.buf_sector]
 28159 00005E9A 7505                    	JNZ	short getb5			; Wrong sector
 28160                                  	
 28161                                  	; MSDOS 6.0
 28162                                  	;CMP	CX,[DI+BUFFINFO.buf_sector+2]	; F.C. >32mb		;AN000;
 28163                                  	;JNZ	short getb5			; F.C. >32mb		;AN000;
 28164                                  	
 28165                                  	;cmp	al,[di+4]
 28166 00005E9C 3A4504                  	CMP	AL,[DI+BUFFINFO.buf_ID]
 28167 00005E9F 7474                    	JZ	getb35				; Just asked for same buffer
 28168                                  
 28169                                  ;	It's not the buffer most recently returned.  See if it's in the
 28170                                  ;	cache.
 28171                                  ;
 28172                                  ;	(cx:dx) = sector #
 28173                                  ;	(al) = drive #
 28174                                  ;	(si) = 0 iff non fat sector, != 0 if FAT sector read
 28175                                  ;	??? list may be incomplete ???
 28176                                  
 28177                                  getb5:	
 28178                                  	; MSDOS 6.0
 28179                                  	;CALL	GETCURHEAD			; get Q Head
 28180                                  	; MSDOS 3.3
 28181 00005EA1 36C53E[3800]            	lds	di,[SS:BUFFHEAD]
 28182                                  getb10:	
 28183                                  	;cmp	dx,[di+6]
 28184 00005EA6 3B5506                  	CMP	DX,[DI+BUFFINFO.buf_sector]
 28185 00005EA9 7505                    	jne	short getb12			; wrong sector lo
 28186                                  	
 28187                                  	; MSDOS 6.0
 28188                                  	;CMP	CX,[DI+BUFFINFO.buf_sector+2]
 28189                                  	;jne	short getb12			; wrong sector hi
 28190                                  	
 28191                                  	;cmp	al,[di+4]
 28192 00005EAB 3A4504                  	CMP	AL,[DI+BUFFINFO.buf_ID]
 28193 00005EAE 7450                    	je	short getb25 ; 05/09/2018	; Found the requested sector
 28194                                  getb12:	
 28195                                  	; MSDOS 6.0
 28196                                  	;mov	DI,[DI+BUFFINFO.BUF_NEXT]
 28197                                  	;cmp	DI,[SS:FIRST_BUFF_ADDR]		; back at the front again?
 28198                                  	;jne	short getb10			; no, continue looking
 28199                                  
 28200                                  	; MSDOS 3.3
 28201                                  	;mov	di,[DI]
 28202                                  	;mov	di,[DI+BUFFINFO.buf_link]
 28203                                  	;
 28204                                  	; 15/08/2018
 28205 00005EB0 C53D                    	lds	di,[di]
 28206                                  	;
 28207 00005EB2 83FFFF                  	cmp	di,-1 ; 0FFFFh
 28208 00005EB5 75EF                    	jne	short getb10
 28209 00005EB7 36C53E[3800]            	lds	di,[SS:BUFFHEAD]		
 28210                                  
 28211                                  ;	The requested sector is not available in the buffers. DS:DI now points
 28212                                  ;	to the first buffer in the Queue. Flush the first buffer & read in the
 28213                                  ;	new sector into it.
 28214                                  ;
 28215                                  ;	BUGBUG - what goes on here? Isn't the first guy the most recently
 28216                                  ;	used guy? Shuld be for fast lookup. If he is, we shouldn't take
 28217                                  ;	him, we should take LRU. And the above lookup shouldn't be
 28218                                  ;	down a chain, but should be hashed.
 28219                                  ;
 28220                                  ;	(DS:DI) = first buffer in the queue
 28221                                  ;	(CX:DX) = sector # we want
 28222                                  ;	(si) = 0 iff non fat sector, != 0 if FAT sector read
 28223                                  
 28224                                  ;hkn; SS override
 28225                                  	;PUSH	cx
 28226 00005EBC 56                      	push	si
 28227 00005EBD 52                      	push	dx
 28228 00005EBE 55                      	push	bp
 28229 00005EBF 06                      	push	es
 28230 00005EC0 E8B900                  	CALL	BUFWRITE			; Write out the dirty buffer
 28231 00005EC3 07                      	pop	es
 28232 00005EC4 5D                      	pop	bp
 28233 00005EC5 5A                      	pop	dx
 28234 00005EC6 5E                      	pop	si
 28235                                  	;POP	word [SS:HIGH_SECTOR]
 28236 00005EC7 7261                    	jc	short getbx			; if got hard error
 28237                                  
 28238                                  	; MSDOS 6.0
 28239                                  	;CALL	SET_RQ_SC_PARMS 		; set parms for secondary cache
 28240                                  
 28241                                  ;	We're ready to read in the buffer, if need be. If the caller
 28242                                  ;	wanted to just *write* the buffer then we'll skip reading it in.
 28243                                  
 28244 00005EC9 30E4                    	XOR	AH,AH				; initial flags
 28245                                  ;hkn; SS override
 28246                                  	;test	byte [ss:PREREAD],0FFh
 28247                                  	;jnz	short getb20
 28248 00005ECB 363826[2C05]            	CMP	[SS:PREREAD],ah ; 0		; am to Read in the new sector?
 28249 00005ED0 751E                    	JNZ	short getb20			; no, we're done
 28250 00005ED2 8D5D10                  	LEA	BX,[DI+BUFINSIZ] ; [DI+16]	; (ds:bx) = data address
 28251 00005ED5 B90100                  	MOV	CX,1
 28252 00005ED8 56                      	push	si
 28253 00005ED9 57                      	push	di
 28254 00005EDA 52                      	push	dx
 28255                                  	; MSDOS 6.0
 28256                                  	;push	es
 28257                                  ; Note:  As far as I can tell, all disk reads into buffers go through
 28258                                  ;	 this point.  -mrw 10/88
 28259                                  	;cmp	BuffInHMA, 0		; is buffers in HMA?
 28260                                  	;jz	@f
 28261                                  	;push	ds
 28262                                  	;push	bx
 28263                                  	;lds	bx, dword ptr LoMemBuff	; Then let's read it into scratch buff
 28264                                  ;@@:
 28265                                  ;M039: Eliminated redundant HMA code.
 28266                                  
 28267                                  	; MSDOS 3.3 (& MSDOS 6.0)
 28268 00005EDB 09F6                    	OR	SI,SI			; FAT sector ?
 28269 00005EDD 7407                    	JZ	short getb15		
 28270                                  
 28271 00005EDF E863E2                  	call	FATSECRD
 28272                                  	;mov	ah,2
 28273 00005EE2 B402                    	MOV	AH,buf_isFAT		; Set buf_flags
 28274                                  
 28275 00005EE4 EB05                    	JMP	SHORT getb17		; Buffer is marked free if read barfs
 28276                                  
 28277                                  getb15:
 28278 00005EE6 E883E2                  	call	DREAD			; Buffer is marked free if read barfs
 28279 00005EE9 B400                    	MOV	AH,0			; Set buf_flags to no type, DO NOT XOR!
 28280                                  getb17:	
 28281                                  	; MSDOS 6.0							  ;I001
 28282                                  	;pushf								  ;I001
 28283                                  	;cmp	byte [SS:BuffInHMA],0	; did we read into scratch buff ? ;I001
 28284                                  	;jz	short not_in_hma	; no				  ;I001
 28285                                  	;mov	cx,[ES:BP+DPB.SECTOR_SIZE]				  ;I001
 28286                                  	;shr	cx,1							  ;I001
 28287                                  	;popf				; Retreive possible CY from DREAD ;I001
 28288                                  	;mov	si,bx							  ;I001
 28289                                  	;pop	di							  ;I001
 28290                                  	;pop	es							  ;I001
 28291                                  	;cld								  ;I001
 28292                                  	;pushf				; Preserve possible CY from DREAD ;I001
 28293                                  	;rep	movsw			; move the contents of scratch buf;I001
 28294                                  	;push	es							  ;I001
 28295                                  	;pop	ds							  ;I001
 28296                                  ;not_in_hma:								  ;I001
 28297                                  	;popf							 	  ;I001
 28298                                  	;pop	es
 28299                                  	;
 28300 00005EEB 5A                      	pop	dx
 28301 00005EEC 5F                      	pop	di
 28302 00005EED 5E                      	pop	si
 28303 00005EEE 723A                    	JC	short getbx
 28304                                  
 28305                                  ;	The buffer has the data setup in it (if we were to read)
 28306                                  ;	Setup the various buffer fields
 28307                                  ;
 28308                                  ;	(ds:di) = buffer address
 28309                                  ;	(es:bp) = DPB address
 28310                                  ;	(HIGH_SECTOR:DX) = sector #
 28311                                  ;	(ah) = BUF_FLAGS value
 28312                                  ;	(si) = 0 if non fat sector, != 0 if FAT sector read
 28313                                  
 28314                                  ;hkn; SS override
 28315                                  getb20:	; MSDOS 6.0
 28316                                  	;MOV	CX,[SS:HIGH_SECTOR]
 28317                                  	;MOV	WORD [DI+BUFFINFO.buf_sector+2],CX
 28318                                  	; MSDOS 3.3 (& MSDOS 6.0)	
 28319                                   	;mov	[di+6],dx
 28320 00005EF0 895506                  	MOV	[DI+BUFFINFO.buf_sector],DX
 28321                                  	;mov	[di+0Ah],bp
 28322 00005EF3 896D0A                  	MOV	[DI+BUFFINFO.buf_DPB],BP
 28323                                  	;mov	[di+0Ch], es
 28324 00005EF6 8C450C                  	MOV	[DI+BUFFINFO.buf_DPB+2],ES
 28325 00005EF9 268A4600                	mov	al,[es:bp]
 28326                                  	;mov	al,[es:bp+0]
 28327                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 28328                                  	;mov	[di+4],ax
 28329 00005EFD 894504                  	MOV	[DI+BUFFINFO.buf_ID],AX		; Set ID and Flags
 28330                                  getb25:	
 28331                                  	; MSDOS 6.0
 28332                                  	;MOV	[DI+BUFFINFO.buf_wrtcnt],1	; Default to not a FAT sector ;AC000;
 28333                                  	;XOR	AX,AX
 28334                                  
 28335                                  	; MSDOS 3.3
 28336 00005F00 B80100                  	mov     ax,1
 28337                                  
 28338 00005F03 09F6                    	OR	SI,SI				; FAT sector ?
 28339 00005F05 7408                    	JZ	short getb30
 28340                                  
 28341                                  	;mov	al,[es:bp+8]
 28342 00005F07 268A4608                	MOV	AL,[ES:BP+DPB.FAT_COUNT]	; update number of copies of
 28343                                  	; MSDOS 6.0
 28344                                  	;MOV	[DI+BUFFINFO.buf_wrtcnt],AL	;  this sector present on disk
 28345                                  	;MOV	AX,[ES:BP+DPB.FAT_SIZE]		; offset of identical FAT
 28346                                  						;  sectors
 28347                                  	; MSDOS 3.3
 28348                                  	;mov	ah,[es:bp+0Fh]
 28349 00005F0B 268A660F                	MOV	AH,[ES:BP+DPB.FAT_SIZE]
 28350                                  
 28351                                  ;	BUGBUG - dos 6 can clean this up by not setting wrtcntinc unless wrtcnt
 28352                                  ;		is set
 28353                                  
 28354                                  getb30:	
 28355                                  	; MSDOS 6.0
 28356                                  	;MOV	[DI+BUFFINFO.buf_wrtcntinc],AX
 28357                                  
 28358                                  	; MSDOS 3.3
 28359                                  	;mov	[di+8],ax ; 15/08/2018	
 28360 00005F0F 894508                  	MOV	[DI+BUFFINFO.buf_wrtcnt],AX
 28361                                  
 28362 00005F12 E8C5FE                  	CALL	PLACEBUF
 28363                                  
 28364                                  ;hkn; SS override for next 4
 28365                                  getb35: 
 28366 00005F15 368C1E[7605]            	MOV	[SS:CURBUF+2],DS
 28367 00005F1A 368C1E[2000]            	MOV	[SS:LastBuffer+2],DS
 28368 00005F1F 36893E[7405]            	MOV	[SS:CURBUF],DI
 28369 00005F24 36893E[1E00]            	MOV	[SS:LastBuffer],DI
 28370 00005F29 F8                      	CLC
 28371                                  
 28372                                  ;	Return with 'C' set appropriately
 28373                                  ;
 28374                                  ;	(dx) = caller's original value
 28375                                  
 28376                                  getbx:	
 28377 00005F2A 16                      	push	ss
 28378 00005F2B 1F                      	pop	ds
 28379 00005F2C C3                      	retn
 28380                                  
 28381                                  
 28382                                  
 28383                                  ;Break	<FLUSHBUF -- WRITE OUT DIRTY BUFFERS>
 28384                                  ;----------------------------------------------------------------------------
 28385                                  ; Input:
 28386                                  ;	DS = DOSGROUP
 28387                                  ;	AL = Physical unit number local buffers only
 28388                                  ;	   = -1 for all units and all remote buffers
 28389                                  ; Function:
 28390                                  ;	Write out all dirty buffers for unit, and flag them as clean
 28391                                  ;	Carry set if error (user FAILed to I 24)
 28392                                  ;	    Flush operation completed.
 28393                                  ; DS Preserved, all others destroyed (ES too)
 28394                                  ;----------------------------------------------------------------------------
 28395                                  
 28396                                  FLUSHBUF:
 28397                                  	; MSDOS 6.0
 28398                                  	;call	GetCurHead
 28399                                  	;TEST	word [DOS34_FLAG],FROM_DISK_RESET ; from disk reset ? ;hkn;
 28400                                  	;jnz	short scan_buf_queue
 28401                                  	;cmp	word [DirtyBufferCount], 0			;hkn;
 28402                                  	;je	short end_scan
 28403                                  	
 28404                                  	; MSDOS 3.3
 28405                                  	;mov	ah,-1 ; 01/08/2018 - Retro DOS v3.0
 28406 00005F2D C53E[3800]              	lds	di,[BUFFHEAD]
 28407                                  scan_buf_queue:
 28408 00005F31 E81F00                  	call	CHECKFLUSH
 28409                                  	;push	ax  ; MSDOS 3.3
 28410                                  	; MSDOS 6.0
 28411 00005F34 8A6504                  	mov	ah,[DI+BUFFINFO.buf_ID]
 28412 00005F37 363826[D002]            	cmp	[SS:WPERR],ah					;hkn;
 28413                                  	;je	short free_the_buf
 28414                                  	;TEST	word [DOS34_FLAG],FROM_DISK_RESET ; from disk reset ? ;hkn;
 28415                                  	;jz	short dont_free_the_buf
 28416                                  	; MSDOS 3.3
 28417                                  	;mov	al,[di+4]
 28418                                  	;mov	al,[DI+BUFFINFO.buf_ID]
 28419                                  	;cmp	[SS:WPERR],al					;hkn;
 28420                                  	; 15/08/2018
 28421 00005F3C 7505                    	jne	short dont_free_the_buf	
 28422                                  free_the_buf:
 28423                                  	; MSDOS 6.0 (& MSDOS 3.3)
 28424 00005F3E C74504FF00              	mov	word [DI+BUFFINFO.buf_ID],00FFh
 28425                                  dont_free_the_buf:
 28426                                  	;pop	ax  ; MSDOS 3.3 	   	
 28427                                  	
 28428                                  	; MSDOS 6.0
 28429                                  	;mov	di,[DI+BUFFINFO.buf_next] ; .buf_link
 28430                                  	;cmp	di,[SS:FIRST_BUFF_ADDR]				;hkn;
 28431                                  	;jne	short scan_buf_queue
 28432                                  
 28433                                  	; MSDOS 3.3
 28434                                  	;mov	di,[DI]
 28435                                  	;mov	di,[DI+BUFFINFO.buf_link] ; .buf_next
 28436                                  	;
 28437                                  	; 15/08/2018
 28438 00005F43 C53D                    	lds	di,[di]
 28439                                  	;
 28440 00005F45 83FFFF                  	cmp	di,-1 ; 0FFFFh
 28441 00005F48 75E7                    	jnz	short scan_buf_queue 
 28442                                  
 28443                                  end_scan:
 28444 00005F4A 16                      	push	ss
 28445 00005F4B 1F                      	pop	ds
 28446                                  	; 01/08/2018 - Retro DOS v3.0
 28447                                  	;cmp	byte [FAILERR],0
 28448                                  	;jne	short bad_flush
 28449                                  	;retn
 28450                                  ;bad_flush:
 28451                                  	;stc
 28452                                  	;retn
 28453                                  	; 01/08/2018 - Retro DOS v3.0
 28454 00005F4C 803E[F602]01            	cmp	byte [FAILERR],1
 28455 00005F51 F5                      	cmc
 28456                                  flushbuf_retn:
 28457 00005F52 C3                      	retn
 28458                                  
 28459                                  ;----------------------------------------------------------------------------
 28460                                  ;
 28461                                  ; Procedure Name : CHECKFLUSH
 28462                                  ;
 28463                                  ; Inputs : AL - Drive number, -1 means do not check for drive
 28464                                  ;	   DS:DI - pointer to buffer
 28465                                  ;
 28466                                  ; Function : Write out a buffer if it is dirty
 28467                                  ;
 28468                                  ; Carry set if problem (currently user FAILed to I 24)
 28469                                  ;
 28470                                  ;----------------------------------------------------------------------------
 28471                                  
 28472                                  CHECKFLUSH:
 28473                                  	; MSDOS 6.0
 28474 00005F53 B4FF                    	mov	ah, -1 ; 01/08/2018 Retro DOS v3.0
 28475                                  	;cmp	[di+4],ah
 28476 00005F55 386504                  	CMP	[DI+BUFFINFO.buf_ID],AH
 28477 00005F58 74F8                    	jz	short flushbuf_retn	; Skip free buffer, carry clear
 28478 00005F5A 38C4                    	CMP	AH,AL			; 
 28479 00005F5C 7406                    	JZ	short DOBUFFER		; do this buffer
 28480                                  	;cmp	al,[di+4]
 28481 00005F5E 3A4504                  	CMP	AL,[DI+BUFFINFO.buf_ID]
 28482 00005F61 F8                      	CLC
 28483 00005F62 75EE                    	jnz	short flushbuf_retn	; Buffer not for this unit or SFT
 28484                                  DOBUFFER:
 28485                                  	;test	byte [di+5],40h
 28486 00005F64 F6450540                	TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty
 28487 00005F68 74E8                    	jz	short flushbuf_retn	; Buffer not dirty, carry clear by TEST
 28488 00005F6A 50                      	PUSH	AX
 28489                                  	;push	word [di+4]
 28490 00005F6B FF7504                  	PUSH	WORD [DI+BUFFINFO.buf_ID]
 28491 00005F6E E80B00                  	CALL	BUFWRITE
 28492 00005F71 58                      	POP	AX
 28493 00005F72 7206                    	JC	short LEAVE_BUF		; Leave buffer marked free (lost).
 28494                                  	;and	ah,0BFh
 28495 00005F74 80E4BF                  	AND	AH,~buf_dirty		; Buffer is clean, clears carry
 28496                                  	;mov	[di+4],ax
 28497 00005F77 894504                  	MOV	[DI+BUFFINFO.buf_ID],AX
 28498                                  LEAVE_BUF:
 28499 00005F7A 58                      	POP	AX			; Search info
 28500                                  checkflush_retn:
 28501 00005F7B C3                      	retn
 28502                                  
 28503                                  ;Break	<BUFWRITE -- WRITE OUT A BUFFER IF DIRTY>
 28504                                  ;----------------------------------------------------------------------------
 28505                                  ;
 28506                                  ;	BufWrite writes a buffer to the disk, iff it's dirty.
 28507                                  ;
 28508                                  ;	ENTRY	DS:DI Points to the buffer
 28509                                  ;
 28510                                  ;	EXIT	Buffer marked free
 28511                                  ;		Carry set if error (currently user FAILed to I 24)
 28512                                  ;
 28513                                  ;	USES	All buf DS:DI
 28514                                  ;		HIGH_SECTOR
 28515                                  ;----------------------------------------------------------------------------
 28516                                  
 28517                                  BUFWRITE:
 28518                                  	; 10/09/2018
 28519                                  	; 01/08/2018 - Retro DOS v3.0
 28520                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5E94h
 28521 00005F7C B8FF00                  	MOV	AX,00FFH
 28522                                  	;xchg	ax,[di+4]
 28523 00005F7F 874504                  	XCHG	AX,[DI+BUFFINFO.buf_ID]	; Free, in case write barfs
 28524 00005F82 3CFF                    	CMP	AL,0FFH
 28525 00005F84 74F5                    	jz      short checkflush_retn	; Buffer is free, carry clear.
 28526                                  	;test	ah,40h
 28527 00005F86 F6C440                  	test	AH,buf_dirty
 28528 00005F89 74F0                    	jz      short checkflush_retn	; Buffer is clean, carry clear.
 28529                                  	; MSDOS 6.0
 28530                                  	;call	DEC_DIRTY_COUNT 	; LB. decrement dirty count
 28531                                  
 28532                                  ;hkn; SS override
 28533 00005F8B 363A06[D002]            	CMP	AL,[SS:WPERR]
 28534 00005F90 74E9                    	jz      short checkflush_retn	; If in WP error zap buffer
 28535                                  
 28536                                  ;hkn; SS override
 28537                                  	; MSDOS 6.0
 28538                                  	;MOV	[SS:SC_DRIVE],AL	;LB. set it for invalidation ;AN000;
 28539                                  	
 28540                                  	;les	bp,[di+10]
 28541 00005F92 C46D0A                  	LES	BP,[DI+BUFFINFO.buf_DPB]
 28542                                  	;lea	bx,[di+16]
 28543 00005F95 8D5D10                  	LEA	BX,[DI+BUFINSIZ]	; Point at buffer
 28544                                  	;mov	dx,[di+6]
 28545 00005F98 8B5506                  	MOV	DX,[DI+BUFFINFO.buf_sector] ;F.C. >32mb		;AN000;
 28546                                  	; MSDOS 6.0
 28547                                  	;MOV	CX,[DI+BUFFINFO.buf_sector+2] ;F.C. >32mb	;AN000;
 28548                                  
 28549                                  ;hkn; SS override
 28550                                  	;MOV	[SS:HIGH_SECTOR],CX	;F.C. >32mb		;AN000;
 28551                                  	;MOV	CL,[DI+BUFFINFO.buf_wrtcnt] ;>32mb		;AC000;
 28552                                  	; MSDOS 3.3
 28553                                  	; mov	cx,[DI+8]
 28554 00005F9B 8B4D08                  	mov	cx,[DI+BUFFINFO.buf_wrtcnt]
 28555 00005F9E 88E8                    	MOV	AL,CH			; [DI+BUFFINFO.buf_wrtcntinc]
 28556 00005FA0 30ED                    	XOR	CH,CH
 28557                                  	;mov	ah,ch ; MSDOS 3.3
 28558                                  
 28559                                  ;hkn; SS override for ALLOWED
 28560                                  	;mov	byte [SS:ALLOWED],18h
 28561 00005FA2 36C606[F702]18          	MOV	byte [SS:ALLOWED],Allowed_RETRY+Allowed_FAIL
 28562                                  	;test	byte [di+5],8
 28563                                  	;test	ah,8
 28564 00005FA8 F6C408                  	test	AH,buf_isDATA
 28565 00005FAB 7406                    	JZ	short NO_IGNORE
 28566                                  	;or	byte [SS:ALLOWED],20h
 28567 00005FAD 36800E[F702]20          	OR	byte [SS:ALLOWED],Allowed_IGNORE
 28568                                  NO_IGNORE:
 28569 00005FB3 30E4                    	xor	ah,ah ; 10/09/2018 (MSDOS 3.3, Retro DOS v3.0)
 28570                                  	; MSDOS 6.0
 28571                                  	;MOV	AX,[DI+BUFFINFO.buf_wrtcntinc]	;>32mb		;AC000;
 28572                                  
 28573 00005FB5 57                      	PUSH	DI		; Save buffer pointer
 28574 00005FB6 31FF                    	XOR	DI,DI		; Indicate failure
 28575                                  
 28576                                  	;push	ds
 28577                                  	;push	bx
 28578                                  WRTAGAIN:
 28579 00005FB8 57                      	push	di
 28580 00005FB9 51                      	push	cx
 28581 00005FBA 50                      	push	ax
 28582 00005FBB B90100                  	MOV	CX,1
 28583 00005FBE 53                      	push	bx
 28584 00005FBF 52                      	push	dx
 28585 00005FC0 1E                      	push	ds
 28586                                  
 28587                                  ; Note:  As far as I can tell, all disk reads into buffers go through this point.  -mrw 10/88
 28588                                  
 28589                                  	; MSDOS 6.0
 28590                                  	;cmp	byte [BuffInHMA], 0
 28591                                  	;jz	short NBUFFINHMA
 28592                                  	;push	cx
 28593                                  	;push	es
 28594                                  	;mov	si,bx
 28595                                  	;mov	cx,[es:bp+DPB.SECTOR_SIZE]
 28596                                  	;shr	cx,1
 28597                                  	;les	di,[LoMemBuff]
 28598                                  	;mov	bx,di
 28599                                  	;cld
 28600                                  	;rep	movsw
 28601                                  	;push	es
 28602                                  	;pop	ds
 28603                                  	;pop	es
 28604                                  	;pop	cx
 28605                                  ;NBUFFINHMA:
 28606 00005FC1 E807E2                  	call	DWRITE		; Write out the dirty buffer
 28607 00005FC4 1F                      	pop	ds
 28608 00005FC5 5A                      	pop	dx
 28609 00005FC6 5B                      	pop	bx
 28610 00005FC7 58                      	pop	ax
 28611 00005FC8 59                      	pop	cx
 28612 00005FC9 5F                      	pop	di
 28613 00005FCA 7201                    	JC	short NOSET
 28614 00005FCC 47                      	INC	DI		; If at least ONE write succeedes, the operation
 28615                                  NOSET:				;	succeedes.
 28616 00005FCD 01C2                    	ADD	DX,AX
 28617 00005FCF E2E7                    	LOOP	WRTAGAIN
 28618                                  	;pop	bx
 28619                                  	;pop	ds
 28620 00005FD1 09FF                    	OR	DI,DI		; Clears carry
 28621 00005FD3 7501                    	JNZ	short BWROK	; At least one write worked
 28622 00005FD5 F9                      	STC			; DI never got INCed, all writes failed.
 28623                                  BWROK:	
 28624 00005FD6 5F                      	POP	DI
 28625 00005FD7 C3                      	retn
 28626                                  
 28627                                  ;**	Set_RQ_SC_Parms - Set Secondary Cache Parameters
 28628                                  ;----------------------------------------------------------------------------
 28629                                  ;	Set_RQ_SC_Parms sets the sector size and drive number value
 28630                                  ;	for the secondary cache. This updates SC_SECTOR_SIZE &
 28631                                  ;	SC_DRIVE even if SC is disabled to save the testing
 28632                                  ;	code and time
 28633                                  ;
 28634                                  ;	ENTRY	ES:BP = drive parameter block
 28635                                  ;
 28636                                  ;	EXIT	[SC_SECTOR_SIZE]= drive sector size
 28637                                  ;		[SC_DRIVE]= drive #
 28638                                  ;
 28639                                  ;	USES	Flags
 28640                                  ;----------------------------------------------------------------------------
 28641                                  
 28642                                  ;procedure   SET_RQ_SC_PARMS,NEAR
 28643                                  ;
 28644                                  ;;hkn; SS override for all variables used in this procedure.
 28645                                  ;
 28646                                  ;	SAVE	<ax>
 28647                                  ;
 28648                                  ;	MOV	ax,ES:[BP].DPB_SECTOR_SIZE	; save sector size
 28649                                  ;	MOV	SC_SECTOR_SIZE,ax
 28650                                  ;
 28651                                  ;	MOV	al,ES:[BP].DPB_DRIVE		; save drive #
 28652                                  ;	MOV	SC_DRIVE,al
 28653                                  ;
 28654                                  ;	RESTORE <ax>
 28655                                  ;
 28656                                  ;srspx:	return
 28657                                  ;
 28658                                  ;EndProc SET_RQ_SC_PARMS 			;LB. return
 28659                                  
 28660                                  ;Break	<INC_DIRTY_COUNT-increment dirty count>
 28661                                  ;----------------------------------------------------------------------------
 28662                                  ; Input:
 28663                                  ;	none
 28664                                  ; Function:
 28665                                  ;	increment dirty buffers count
 28666                                  ; Output:
 28667                                  ;	dirty buffers count is incremented
 28668                                  ;
 28669                                  ; All registers preserved
 28670                                  ;----------------------------------------------------------------------------
 28671                                  
 28672                                  ;procedure   INC_DIRTY_COUNT,NEAR
 28673                                  ;
 28674                                  ;; BUGBUG  ---- remove this routine
 28675                                  ;; BUGBUG ---- only one instruction is needed   (speed win, space loose)
 28676                                  ;	inc	[DirtyBufferCount]			;hkn;
 28677                                  ;	ret
 28678                                  ;EndProc INC_DIRTY_COUNT
 28679                                  
 28680                                  ;Break	<DEC_DIRTY_COUNT-decrement dirty count>
 28681                                  ;----------------------------------------------------------------------------
 28682                                  ; Input:
 28683                                  ;	none
 28684                                  ; Function:
 28685                                  ;	decrement dirty buffers count
 28686                                  ; Output:
 28687                                  ;	dirty buffers count is decremented
 28688                                  ;
 28689                                  ; All registers preserved
 28690                                  ;----------------------------------------------------------------------------
 28691                                  
 28692                                  ;procedure   DEC_DIRTY_COUNT,NEAR
 28693                                  ;	cmp	[DirtyBufferCount], 0	;hkn;
 28694                                  ;	jz	ddcx			; BUGBUG - shouldn't it be an
 28695                                  ;	dec	[DirtyBufferCount]	; error condition to underflow here? ;hkn;
 28696                                  ;ddcx:	ret
 28697                                  ;
 28698                                  ;EndProc DEC_DIRTY_COUNT
 28699                                  
 28700                                  ;============================================================================
 28701                                  ; MSPROC.ASM, MSDOS 6.0, 1991
 28702                                  ;============================================================================
 28703                                  ; 02/08/2018 - Retro DOS v3.0
 28704                                  
 28705                                  ; (15/04/2018 - RetrO DOS v2.0, MSDOS 2.11 - PROC.ASM - 1983)
 28706                                  
 28707                                  ; Pseudo EXEC system call for DOS
 28708                                  
 28709                                  ;	TITLE	MSPROC - process maintenance
 28710                                  ;	NAME	MSPROC
 28711                                  
 28712                                  ; =========================================================================
 28713                                  ;**	Process related system calls and low level routines for DOS 2.X.
 28714                                  ;	I/O specs are defined in DISPATCH.
 28715                                  ;
 28716                                  ;	$WAIT
 28717                                  ;	$EXEC
 28718                                  ;	$Keep_process
 28719                                  ;	Stay_resident
 28720                                  ;	$EXIT
 28721                                  ;	$ABORT
 28722                                  ;	abort_inner
 28723                                  ;
 28724                                  ;	Modification history:
 28725                                  ;
 28726                                  ;		Created: ARR 30 March 1983
 28727                                  ;		AN000	version 4.0 jan. 1988
 28728                                  ;		A007	PTM 3957 - fake vesrion for IBMCACHE.COM
 28729                                  ;		A008	PTM 4070 - fake version for MS WINDOWS
 28730                                  ;
 28731                                  ;		M000	added support for loading programs into UMBs 7/9/90
 28732                                  ;
 28733                                  ;		M004 - MS PASCAL 3.2 support. Please see under tag M003 in 
 28734                                  ;		       dossym.inc. 7/30/90
 28735                                  ;		M005 - Support for EXE programs with out STACK segment and 
 28736                                  ;		       with resident size < 64K - 256 bytes. A 256 byte 
 28737                                  ;		       stack is provided at the end of the program. Note that
 28738                                  ;		       only SP is changed.
 28739                                  ;		M020 - Fix for Rational bug for details see exepatch.asm
 28740                                  ;
 28741                                  ;		M028 - 4b04 implementation
 28742                                  ;
 28743                                  ;		M029 - Support for EXEs without stack rewritten. If EXE is
 28744                                  ;			in memory block >= 64K, sp = 0. If memory block
 28745                                  ;			obtained is <64K, point sp at the end of the memory
 28746                                  ;			block. For EXEs smaller than 64K, 256 bytes are still
 28747                                  ;			added for a stack segment which may be needed if it
 28748                                  ;			is loaded in low memory situations.
 28749                                  ;
 28750                                  ;		M030 - Fixing bug in EXEPACPATCH & changing 4b04 to 4b05
 28751                                  ;
 28752                                  ;		M040 - Bug #3052. The environment sizing code would flag a
 28753                                  ;			a bad environment if it reached 32767 bytes. Changed
 28754                                  ;			to allow 32768 bytes of environment.
 28755                                  ;
 28756                                  ;		M047 - Release the allocated UMB when we failed to load a 
 28757                                  ;		       COM file high. Also ensure that if the biggest block
 28758                                  ;		       into which we load the com file is less than 64K then
 28759                                  ;		       we provide atleast 256 bytes of stack to the user.
 28760                                  ;
 28761                                  ;		M050 - Made Lie table search CASE insensitive
 28762                                  ;
 28763                                  ;		M060 - Removed special version table from the kernal and
 28764                                  ;                      put it in a device drive which puts the address
 28765                                  ;                      in the DOS DATA area location UU_IFS_DOS_CALL
 28766                                  ;		       as a DWORD.
 28767                                  ;
 28768                                  ;		M063 - Modified UMB support. If the HIGH_ONLY bit is set on
 28769                                  ;		       entry do not try to load low if there is no space in
 28770                                  ;		       UMBs.
 28771                                  ;
 28772                                  ;		M068 - Support for copy protect apps. Call ChkCopyProt to 
 28773                                  ;		       set a20off_count. Set bit EXECA20BIT in DOS_FLAG. Also
 28774                                  ;		       change return address to LeaveDos if AL=5.
 28775                                  ;
 28776                                  ;               20-Jul-1992 bens    Added ifdef RESTRICTED_BUILD code that
 28777                                  ;                      controls building a version of MSDOS.SYS that only
 28778                                  ;                      runs programs from a fixed list (defined in the
 28779                                  ;                      file RESTRICT.INC).  Search for "RESTRICTED_BUILD"
 28780                                  ;                      for details.  This feature is used to build a
 28781                                  ;                      "special" version of DOS that can be handed out to
 28782                                  ;                      OEM/ISV customers as part of a "service" disk.
 28783                                  ;
 28784                                  ; =========================================================================
 28785                                  
 28786                                  ;SAVEXIT 	EQU	10
 28787                                  
 28788                                  ;BREAK	<$WAIT - return previous process error code>
 28789                                  ; =========================================================================
 28790                                  ;	$WAIT - Return previous process error code.
 28791                                  ;
 28792                                  ;	Assembler usage:
 28793                                  ;
 28794                                  ;	    MOV     AH, WaitProcess
 28795                                  ;	    INT     int_command
 28796                                  ;
 28797                                  ;	ENTRY	none
 28798                                  ;	EXIT	(ax) = exit code
 28799                                  ;	USES	all
 28800                                  ; =========================================================================
 28801                                  
 28802                                  _$WAIT:
 28803                                  	; 02/08/2018 - Retro DOS v3.0
 28804                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5E1h
 28805                                  
 28806 00005FD8 31C0                    	xor	AX,AX
 28807 00005FDA 368706[E202]            	xchg	AX,[ss:exit_code]
 28808 00005FDF E91BB7                  	jmp	SYS_RET_OK
 28809                                  
 28810                                  ; =========================================================================
 28811                                  ;BREAK <$exec - load/go a program>
 28812                                  ;	EXEC.ASM - EXEC System Call
 28813                                  ;
 28814                                  ;
 28815                                  ; Assembler usage:
 28816                                  ;	    lds     DX, Name
 28817                                  ;	    les     BX, Blk
 28818                                  ;	    mov     AH, Exec
 28819                                  ;	    mov     AL, FUNC
 28820                                  ;	    int     INT_COMMAND
 28821                                  ;
 28822                                  ;	AL  Function
 28823                                  ;	--  --------
 28824                                  ;	 0  Load and execute the program.
 28825                                  ;	 1  Load, create  the  program	header	but  do  not
 28826                                  ;	    begin execution.
 28827                                  ;	 3  Load overlay. No header created.
 28828                                  ;
 28829                                  ;	    AL = 0 -> load/execute program
 28830                                  ;
 28831                                  ;	    +---------------------------+
 28832                                  ;	    | WORD segment address of	|
 28833                                  ;	    | environment.		|
 28834                                  ;	    +---------------------------+
 28835                                  ;	    | DWORD pointer to ASCIZ	|
 28836                                  ;	    | command line at 80h	|
 28837                                  ;	    +---------------------------+
 28838                                  ;	    | DWORD pointer to default	|
 28839                                  ;	    | FCB to be passed at 5Ch	|
 28840                                  ;	    +---------------------------+
 28841                                  ;	    | DWORD pointer to default	|
 28842                                  ;	    | FCB to be passed at 6Ch	|
 28843                                  ;	    +---------------------------+
 28844                                  ;
 28845                                  ;	    AL = 1 -> load program
 28846                                  ;
 28847                                  ;	    +---------------------------+
 28848                                  ;	    | WORD segment address of	|
 28849                                  ;	    | environment.		|
 28850                                  ;	    +---------------------------+
 28851                                  ;	    | DWORD pointer to ASCIZ	|
 28852                                  ;	    | command line at 80h	|
 28853                                  ;	    +---------------------------+
 28854                                  ;	    | DWORD pointer to default	|
 28855                                  ;	    | FCB to be passed at 5Ch	|
 28856                                  ;	    +---------------------------+
 28857                                  ;	    | DWORD pointer to default	|
 28858                                  ;	    | FCB to be passed at 6Ch	|
 28859                                  ;	    +---------------------------+
 28860                                  ;	    | DWORD returned value of	|
 28861                                  ;	    | CS:IP			|
 28862                                  ;	    +---------------------------+
 28863                                  ;	    | DWORD returned value of	|
 28864                                  ;	    | SS:IP			|
 28865                                  ;	    +---------------------------+
 28866                                  ;
 28867                                  ;	    AL = 3 -> load overlay
 28868                                  ;
 28869                                  ;	    +---------------------------+
 28870                                  ;	    | WORD segment address where|
 28871                                  ;	    | file will be loaded.	|
 28872                                  ;	    +---------------------------+
 28873                                  ;	    | WORD relocation factor to |
 28874                                  ;	    | be applied to the image.	|
 28875                                  ;	    +---------------------------+
 28876                                  ;
 28877                                  ; Returns:
 28878                                  ;	    AX = error_invalid_function
 28879                                  ;	       = error_bad_format
 28880                                  ;	       = error_bad_environment
 28881                                  ;	       = error_not_enough_memory
 28882                                  ;	       = error_file_not_found
 28883                                  ; =========================================================================
 28884                                  ;
 28885                                  ;   Revision history:
 28886                                  ;
 28887                                  ;	 A000	version 4.00  Jan. 1988
 28888                                  ;
 28889                                  ; =========================================================================
 28890                                  
 28891                                  Exec_Internal_Buffer		EQU	OPENBUF
 28892                                  Exec_Internal_Buffer_Size	EQU	(128+128+53+curdirLen)
 28893                                  
 28894                                  ; =========================================================================
 28895                                  
 28896                                  ;IF1		; warning message on buffers
 28897                                  ;%out	Please make sure that the following are contiguous and of the
 28898                                  ;%out	following sizes:
 28899                                  ;%out
 28900                                  ;%out	OpenBuf     128
 28901                                  ;%out	RenBuf	    128
 28902                                  ;%out	SearchBuf    53
 28903                                  ;%out	DummyCDS    curdirLen
 28904                                  ;ENDIF
 28905                                  
 28906                                  ; =========================================================================
 28907                                  
 28908                                  ; =========================================================================
 28909                                  ;
 28910                                  ; =========================================================================
 28911                                  
 28912                                  _$EXEC:
 28913                                  	; 02/08/2018 - Retro DOS v3.0
 28914                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5EF1h
 28915                                  
 28916                                  EXEC001S:
 28917                                  
 28918                                  	;LocalVar    Exec_Blk		,DWORD
 28919                                  	;LocalVar    Exec_Func		,BYTE
 28920                                  	;LocalVar    Exec_Load_High	,BYTE
 28921                                  	;LocalVar    Exec_FH		,WORD
 28922                                  	;LocalVar    Exec_Rel_Fac	,WORD
 28923                                  	;LocalVar    Exec_Res_Len_Para	,WORD
 28924                                  	;LocalVar    Exec_Environ	,WORD
 28925                                  	;LocalVar    Exec_Size		,WORD
 28926                                  	;LocalVar    Exec_Load_Block	,WORD
 28927                                  	;LocalVar    Exec_DMA		,WORD
 28928                                  	;LocalVar    ExecNameLen 	,WORD
 28929                                  	;LocalVar    ExecName		,DWORD
 28930                                  	;
 28931                                  	;LocalVar    Exec_DMA_Save	,WORD
 28932                                  	;LocalVar    Exec_NoStack	,BYTE
 28933                                  
 28934                                  	; MSDOS 3.3 (& MSDOS 6.0)
 28935                                  	;%define	Exec_Blk	dword [bp-4]
 28936                                  	%define		Exec_Blk	[bp-4] ; 09/08/2018
 28937                                  	%define		Exec_BlkL	word [bp-4]	
 28938                                  	%define		Exec_BlkH	word [bp-2]
 28939                                  	%define		Exec_Func	byte [bp-5]
 28940                                  	%define		Exec_Load_High	byte [bp-6]
 28941                                  	%define		Exec_FH		word [bp-8]
 28942                                  	%define		Exec_Rel_Fac	word [bp-10]
 28943                                  	%define		Exec_Res_Len_Para word [bp-12]
 28944                                  	%define		Exec_Environ	word [bp-14]
 28945                                  	%define		Exec_Size	word [bp-16]
 28946                                  	%define		Exec_Load_Block	word [bp-18]
 28947                                  	%define		Exec_DMA	word [bp-20]
 28948                                  	%define		ExecNameLen	word [bp-22]
 28949                                  	;%define	ExecName	dword [bp-26]
 28950                                  	%define		ExecName	[bp-26] ; 09/08/2018
 28951                                  	%define		ExecNameL	word [bp-26]	
 28952                                  	%define		ExecNameH	word [bp-24]
 28953                                  	; MSDOS 6.0
 28954                                  	%define		Exec_DMA_Save	word [bp-28]
 28955                                  	%define		Exec_NoStack	byte [bp-29]
 28956                                  	
 28957                                  	; ==================================================================
 28958                                  	; validate function
 28959                                  	; ==================================================================
 28960                                  		      	
 28961                                  	;
 28962                                  	; M068 - Start
 28963                                  	;
 28964                                  	; Reset the A20OFF_COUNT to 0. This is done as there is a 
 28965                                  	; possibility that the count may not be decremented all the way to
 28966                                  	; 0. A typical case is if the program for which we intended to keep 
 28967                                  	; the A20  off for a sufficiently long time (A20OFF_COUNT int 21 
 28968                                  	; calls), exits pre-maturely due to error conditions.
 28969                                  	;
 28970                                  
 28971                                  	; MSDOS 6.0
 28972                                  	;mov	byte [SS:A20OFF_COUNT], 0
 28973                                  
 28974                                  	;
 28975                                  	; If al=5 (ExecReady) we'll change the return address on the stack	
 28976                                  	; to be LeaveDos in msdisp.asm. This ensures that the EXECA20OFF
 28977                                  	; bit set in DOS_FLAG by ExceReady is not cleared in msdisp.asm
 28978                                  	;
 28979                                  	
 28980                                  	;cmp	al, 5			; Q: is this ExecReady call
 28981                                  	;jne	@f			; N: continue
 28982                                  					; Y: change ret addr. to LeaveDos.
 28983                                  	;pop	cx			; Note CX is not input to ExecReady
 28984                                  	;mov	cx, offset DOSCODE:LeaveDos
 28985                                  	;push	cx
 28986                                  ;@@:
 28987                                  	;
 28988                                  	; M068 - End
 28989                                  	;
 28990                                  
 28991                                  	;Enter
 28992                                  
 28993 00005FE2 55                      	push	bp
 28994 00005FE3 89E5                    	mov	bp,sp
 28995 00005FE5 83EC1E                  	sub	sp,30 ; MSDOS 6.0
 28996                                  	;sub	sp,26 ; MSDOS 3.3
 28997                                  
 28998                                  	; MSDOS 6.0
 28999                                  	;cmp	AL,5			; only 0, 1, 3 or 5 are allowed ;M028
 29000                                  					; M030
 29001                                  	;jna	short Exec_Check_2
 29002                                  
 29003                                  	; MSDOS 3.3
 29004 00005FE8 3C03                    	cmp	AL,3
 29005 00005FEA 760E                    	jna	short Exec_Check_2
 29006                                  
 29007                                  Exec_Bad_Fun:
 29008 00005FEC 36C606[D102]01          	mov	byte [ss:EXTERR_LOCUS],errLOC_Unk 
 29009                                  					; Extended Error Locus	;smr;SS Override
 29010                                  	;mov	al,1
 29011 00005FF2 B001                    	mov	al,error_invalid_function
 29012                                  
 29013                                  Exec_Ret_Err:
 29014                                  	;Leave
 29015 00005FF4 89EC                    	mov	sp,bp
 29016 00005FF6 5D                      	pop	bp
 29017                                  	;transfer SYS_RET_ERR
 29018 00005FF7 E90FB7                  	jmp	SYS_RET_ERR
 29019                                  
 29020                                  	; MSDOS 6.0
 29021                                  ;ExecReadyJ:
 29022                                  	;call	ExecReady		; M028
 29023                                  	;jmp	norm_ovl		; do a Leave & xfer sysret_OK ; M028
 29024                                  
 29025                                  Exec_Check_2:
 29026 00005FFA 3C02                    	cmp	AL,2			
 29027 00005FFC 74EE                    	jz	short Exec_Bad_Fun
 29028                                  
 29029                                  	; MSDOS 6.0
 29030                                  	;cmp	al,4			; 2 & 4 are not allowed
 29031                                  	;je	short Exec_Bad_Fun
 29032                                  	;
 29033                                  	;cmp	al,5			; M028 ; M030
 29034                                  	;je	short ExecReadyJ		; M028
 29035                                  
 29036                                  	;mov	[bp-4],bx
 29037 00005FFE 895EFC                  	mov	Exec_BlkL,BX		; stash args
 29038                                  	;mov	[bp-2],es
 29039 00006001 8C46FE                  	mov	Exec_BlkH,ES
 29040                                  	;mov	[bp-5],al
 29041 00006004 8846FB                  	mov	Exec_Func,AL
 29042                                  	;mov	byte [bp-6],0
 29043 00006007 C646FA00                	mov	Exec_Load_High,0
 29044                                  
 29045                                  	;mov	[bp-26],dx
 29046 0000600B 8956E6                  	mov	ExecNameL,DX		; set up length of exec name
 29047                                  	;mov	[bp-24],ds
 29048 0000600E 8C5EE8                  	mov	ExecNameH,DS
 29049 00006011 89D6                    	mov	SI,DX			; move pointer to convenient place
 29050                                  	;invoke	DStrLen
 29051 00006013 E862BF                  	call	DStrLen
 29052                                  	;mov	[bp-22],cx
 29053 00006016 894EEA                  	mov	ExecNameLen,CX		; save length
 29054                                  
 29055                                  	; MSDOS 6.0
 29056                                  	;mov	al, [AllocMethod]	; M063: save alloc method in 
 29057                                  	;mov	[AllocMsave], al	; M063: AllocMsave
 29058                                  
 29059 00006019 30C0                    	xor	AL,AL			; open for reading
 29060 0000601B 55                      	push	BP
 29061                                  
 29062                                  	; MSDOS 6.0
 29063                                  	;or	byte [DOS_FLAG], EXECOPEN ; this flag is set to indicate to 
 29064                                  					; the redir that this open call is
 29065                                  					; due to an exec.
 29066                                  
 29067                                  	;invoke	$OPEN			; is the file there?
 29068 0000601C E81710                  	call	_$OPEN
 29069                                  
 29070                                  	; MSDOS 6.0
 29071                                  	;pushf
 29072                                  	;and	byte [DOS_FLAG],~EXECOPEN; reset flag
 29073                                  	;popf
 29074                                  
 29075 0000601F 5D                      	pop	BP
 29076                                  	;MSDOS 3.3
 29077 00006020 72D2                    	jc	short Exec_Ret_Err
 29078                                  
 29079                                  	;mov	[bp-8],ax
 29080 00006022 8946F8                  	mov	Exec_FH,AX
 29081 00006025 89C3                    	mov	BX,AX
 29082 00006027 30C0                    	xor	AL,AL
 29083                                  	;invoke	$Ioctl
 29084 00006029 E888CF                  	call	_$IOCTL
 29085 0000602C 7207                    	jc	short Exec_BombJ
 29086                                  
 29087                                  	;test	dl,80h
 29088 0000602E F6C280                  	test	DL,devid_ISDEV
 29089 00006031 740A                    	jz	short Exec_Check_Environ
 29090                                  
 29091                                  	;mov	al,2
 29092 00006033 B002                    	mov	AL,error_file_not_found
 29093                                  Exec_BombJ:
 29094 00006035 E9CC00                  	jmp	Exec_Bomb
 29095                                  
 29096                                  BadEnv:
 29097                                  	;mov	al,0Ah
 29098 00006038 B00A                    	mov	AL,error_bad_environment
 29099 0000603A E9C700                  	jmp	Exec_Bomb
 29100                                  
 29101                                  Exec_Check_Environ:
 29102                                  	;mov	word [bp-18],0
 29103 0000603D C746EE0000              	mov	Exec_Load_Block,0
 29104                                  	;mov	word [bp-14],0
 29105 00006042 C746F20000              	mov	Exec_Environ,0
 29106                                  					; overlays... no environment
 29107                                  	;test	byte [bp-5],2
 29108 00006047 F646FB02                	test	Exec_Func,exec_func_overlay
 29109 0000604B 7554                    	jnz	short Exec_Read_Header
 29110                                  
 29111                                  	;lds	si,[bp-4]
 29112 0000604D C576FC                  	lds	SI,Exec_Blk		; get block
 29113 00006050 8B04                    	mov	ax,[SI]
 29114                                  	;mov	AX,[SI+EXEC1.ENVIRON]	; address of environ
 29115 00006052 09C0                    	or	AX,AX
 29116 00006054 750C                    	jnz	short Exec_Scan_Env
 29117                                  
 29118 00006056 368E1E[DE02]            	mov	DS,[SS:CurrentPDB]	;smr;SS Override
 29119                                  	;mov	ax,[44]
 29120 0000605B A12C00                  	mov	AX,[PDB.ENVIRON]
 29121                                  
 29122                                  ; MSDOS 6.0
 29123                                  ;---------------------------------------------BUG 92 4/30/90-----------------
 29124                                  ;
 29125                                  ; Exec_environ is being correctly initialized after the environment has been
 29126                                  ; allocated and copied form the parent's env. It must not be initialized here.
 29127                                  ; Because if the call to $alloc below fails Exec_dealloc will deallocate the
 29128                                  ; parent's environment.
 29129                                  ;	mov	Exec_Environ,AX
 29130                                  ;
 29131                                  ;----------------------------------------------------------------------------
 29132                                  
 29133                                  	;mov	[bp-14],ax
 29134                                  	;mov	Exec_Environ,ax
 29135                                  
 29136 0000605E 09C0                    	or	AX,AX
 29137 00006060 743F                    	jz	short Exec_Read_Header
 29138                                  
 29139                                  Exec_Scan_Env:
 29140 00006062 8EC0                    	mov	ES,AX
 29141 00006064 31FF                    	xor	DI,DI
 29142                                  	;mov	cx,7FFFh ; MSDOS 3.3
 29143 00006066 B90080                  	mov	CX,8000h ; MSDOS 6.0	; at most 32k of environment ;M040
 29144 00006069 30C0                    	xor	AL,AL
 29145                                  
 29146                                  Exec_Get_Environ_Len:
 29147 0000606B F2AE                    	repnz	scasb			; find that nul byte
 29148 0000606D 75C9                    	jnz	short BadEnv
 29149                                  
 29150 0000606F 49                      	dec	CX			; Dec CX for the next nul byte test
 29151 00006070 78C6                    	js	short BadEnv		; gone beyond the end of the environment
 29152                                  
 29153 00006072 AE                      	scasb				; is there another nul byte?
 29154 00006073 75F6                    	jnz	short Exec_Get_Environ_Len ; no, scan some more
 29155                                  
 29156 00006075 57                      	push	DI
 29157                                  	;lea	bx,[DI+11h]
 29158 00006076 8D5D11                  	lea	BX,[DI+0Fh+2]
 29159                                  	;add	bx,[bp-22]
 29160 00006079 035EEA                  	add	BX,ExecNameLen		; BX <- length of environment
 29161                                  					; remember argv[0] length
 29162                                  					; round up and remember argc
 29163 0000607C B104                    	mov	CL,4
 29164 0000607E D3EB                    	shr	BX,CL			; number of paragraphs needed
 29165 00006080 06                      	push	ES
 29166                                  	;invoke	$Alloc			; can we get the space?
 29167 00006081 E8CA04                  	call	_$ALLOC
 29168 00006084 1F                      	pop	DS
 29169 00006085 59                      	pop	CX
 29170 00006086 7302                    	jnc	short Exec_Save_Environ
 29171                                  
 29172 00006088 EB74                    	jmp	SHORT Exec_No_Mem	; nope... cry and sob
 29173                                  
 29174                                  Exec_Save_Environ:
 29175 0000608A 8EC0                    	mov	ES,AX
 29176                                  	;mov	[bp-14],ax
 29177 0000608C 8946F2                  	mov	Exec_Environ,AX 	; save him for a rainy day
 29178 0000608F 31F6                    	xor	SI,SI
 29179 00006091 89F7                    	mov	DI,SI
 29180 00006093 F3A4                    	rep	movsb			; copy the environment
 29181 00006095 B80100                  	mov	AX,1
 29182 00006098 AB                      	stosw
 29183                                  	;lds	si,[bp-26]
 29184 00006099 C576E6                  	lds	SI,ExecName
 29185                                  	;mov	cx,[bp-22]
 29186 0000609C 8B4EEA                  	mov	CX,ExecNameLen
 29187 0000609F F3A4                    	rep	movsb
 29188                                  
 29189                                  Exec_Read_Header:
 29190                                  	; We read in the program header into the above data area and
 29191                                  	; determine where in this memory the image will be located.
 29192                                  
 29193                                  	;Context DS
 29194 000060A1 16                      	push	ss
 29195 000060A2 1F                      	pop	ds
 29196                                  	;mov	cx,26
 29197 000060A3 B91A00                  	mov	CX,Exec_Header_Len	; header size
 29198 000060A6 BA[1E14]                	mov	DX,exec_signature
 29199 000060A9 06                      	push	ES
 29200 000060AA 1E                      	push	DS
 29201 000060AB E87803                  	call	ExecRead
 29202 000060AE 1F                      	pop	DS
 29203 000060AF 07                      	pop	ES
 29204 000060B0 7250                    	jc	short Exec_Bad_File
 29205                                  
 29206 000060B2 09C0                    	or	AX,AX
 29207 000060B4 744C                    	jz	short Exec_Bad_File
 29208                                  	;cmp	ax,26
 29209 000060B6 83F81A                  	cmp	AX,Exec_Header_Len	; did we read the right number?
 29210 000060B9 7519                    	jnz	short Exec_Com_Filej	; yep... continue
 29211                                  
 29212 000060BB F706[2A14]FFFF          	test	word [exec_max_BSS],-1 	; indicate load high?
 29213 000060C1 7504                    	jnz	short Exec_Check_Sig
 29214                                  
 29215                                  	;mov	byte [bp-6],0FFh
 29216 000060C3 C646FAFF                	mov	Exec_Load_High,-1
 29217                                  
 29218                                  Exec_Check_Sig:
 29219 000060C7 A1[1E14]                	mov	AX,[exec_signature]	; rms;NSS
 29220                                  	;cmp	ax,5A4Dh ; 'MZ'
 29221 000060CA 3D4D5A                  	cmp	AX,exe_valid_signature	; zibo arises!
 29222 000060CD 7408                    	jz	short Exec_Save_Start 	; assume com file if no signature
 29223                                  
 29224                                  	;cmp	ax,4D5Ah ; 'ZM'
 29225 000060CF 3D5A4D                  	cmp	AX,exe_valid_old_signature  ; zibo arises!
 29226 000060D2 7403                    	jz	short Exec_Save_Start 	; assume com file if no signature
 29227                                  
 29228                                  Exec_Com_Filej:
 29229 000060D4 E9A201                  	jmp	Exec_Com_File
 29230                                  
 29231                                  	; We have the program header... determine memory requirements
 29232                                  
 29233                                  Exec_Save_Start:
 29234 000060D7 A1[2214]                	mov	AX,[exec_pages]		; get 512-byte pages	;rms;NSS
 29235 000060DA B105                    	mov	CL,5			; convert to paragraphs
 29236 000060DC D3E0                    	shl	AX,CL
 29237 000060DE 2B06[2614]              	sub	AX,[exec_par_dir] 	; AX = size in paragraphs;rms;NSS
 29238                                  	;mov	[bp-12],ax
 29239 000060E2 8946F4                  	mov	Exec_Res_Len_Para,AX
 29240                                  
 29241                                  		; Do we need to allocate memory?
 29242                                  		; Yes if function is not load-overlay
 29243                                  
 29244                                  	;test	byte [bp-5],2
 29245 000060E5 F646FB02                	test	Exec_Func,exec_func_overlay
 29246 000060E9 742C                    	jz	short Exec_Allocate	; allocation of space
 29247                                  
 29248                                  		; get load address from block
 29249                                  
 29250                                  	;les	di,[bp-4]
 29251 000060EB C47EFC                  	les	DI,Exec_Blk
 29252 000060EE 268B05                  	mov	ax,[es:di]
 29253                                  	;mov	AX,[ES:DI+EXEC3.load_addr]
 29254                                  	;mov	[bp-20],ax
 29255 000060F1 8946EC                  	mov	Exec_DMA,AX
 29256 000060F4 268B4502                	mov	AX,[ES:DI+EXEC3.reloc_fac]
 29257                                  	;mov	[bp-10],ax
 29258 000060F8 8946F6                  	mov	Exec_Rel_Fac,AX
 29259                                  	; 10/08/2018
 29260 000060FB E9AB00                  	jmp	Exec_Find_Res		; M000
 29261                                  
 29262                                  Exec_No_Mem:
 29263                                  	;mov	al,8
 29264 000060FE B008                    	mov	AL,error_not_enough_memory
 29265 00006100 EB02                    	jmp	short Exec_Bomb
 29266                                  
 29267                                  Exec_Bad_File:
 29268                                  	;mov	al,0Bh
 29269 00006102 B00B                    	mov	AL,error_bad_format
 29270                                  
 29271                                  Exec_Bomb:
 29272                                  	;mov	bx,[bp-8]
 29273 00006104 8B5EF8                  	mov	BX,Exec_FH
 29274 00006107 E82B03                  	call	Exec_Dealloc
 29275                                  	;LeaveCrit CritMem
 29276 0000610A E867BF                  	call	LcritMem
 29277                                  	;save	<AX,BP>
 29278 0000610D 50                      	push	ax
 29279 0000610E 55                      	push	bp
 29280                                  	;invoke	$CLOSE
 29281 0000610F E8B10C                  	call	_$CLOSE
 29282                                  	;restore <BP,AX>
 29283 00006112 5D                      	pop	bp
 29284 00006113 58                      	pop	ax
 29285 00006114 E9DDFE                  	jmp	Exec_Ret_Err
 29286                                  
 29287                                  Exec_Chk_Mem: 
 29288                                  	; MSDOS 6.0    			; M063 - Start
 29289                                  	;mov	al,[AllocMethod]	; save current alloc method in ax
 29290                                  	;mov	bl,[AllocMsave]
 29291                                  	;mov	[AllocMethod], bl	; restore original allocmethod
 29292                                  	;test	bl,HIGH_ONLY 		; Q: was the HIGH_ONLY bit already set
 29293                                  	;jnz	short Exec_No_Mem	; Y: no space in UMBs. Quit
 29294                                  	;				; N: continue
 29295                                  	;
 29296                                  	;test	al,HIGH_ONLY		; Q: did we set the HIGH_ONLY bit
 29297                                  	;jz	short Exec_No_Mem	; N: no memory 
 29298                                  	;mov	ax,[save_AX]		; Y: restore ax and
 29299                                  	;jmp	short Exec_Norm_Alloc	;    Try again
 29300                                  	;				; M063 - End
 29301                                  
 29302                                  Exec_Allocate:
 29303                                  	; 09/09/2018
 29304                                  
 29305                                  	; M005 - START
 29306                                  	; If there is no STACK segment for this exe file and if this
 29307                                  	; not an overlay and the resident size is less than 64K - 
 29308                                  	; 256 bytes we shall add 256bytes bytes to the programs 
 29309                                  	; resident memory requirement and set Exec_SP to this value.
 29310                                  
 29311                                  	; MSDOS 6.0
 29312 00006117 C646E300                	mov	Exec_NoStack,0
 29313 0000611B 833E[2C14]00            	cmp	word [exec_SS],0	; Q: is there a stack seg
 29314 00006120 7512                    	jne	short ea1		; Y: continue normal processing
 29315 00006122 833E[2E14]00            	cmp	word [exec_SP],0	; Q: is there a stack ptr
 29316 00006127 750B                    	jne	short ea1		; Y: continue normal processing
 29317                                  
 29318 00006129 FE46E3                  	inc	Exec_NoStack
 29319 0000612C 3DF00F                  	cmp	ax,1000h-10h		; Q: is this >= 64K-256 bytes
 29320 0000612F 7303                    	jae	short ea1		; Y: don't set Exec_SP
 29321                                  
 29322 00006131 83C010                  	add	ax,10h			; add 10h paras to mem requirement
 29323                                  ea1:
 29324                                  	; M005 - END
 29325                                  
 29326                                  	; MSDOS 6.0			; M000 - start
 29327                                  	;test	byte [AllocMethod],HIGH_FIRST
 29328                                  	;				; Q: is the alloc strat high_first
 29329                                  	;jz	short Exec_Norm_Alloc	; N: normal allocate
 29330                                  	;				; Y: set high_only bit
 29331                                  	;or	byte [AllocMethod],HIGH_ONLY
 29332                                  	;				; M000 - end
 29333                                  
 29334                                  ;Exec_Norm_Alloc:
 29335                                  	;mov	[save_ax],ax		; M000: save ax for possible 2nd  
 29336                                  					; M000: attempt at allocating memory
 29337                                  	;;push	ax			; M000
 29338                                  
 29339                                  	; MSDOS 3.3
 29340 00006134 50                      	push	ax	
 29341                                  
 29342 00006135 BBFFFF                  	mov	BX,0FFFFh		; see how much room in arena
 29343 00006138 1E                      	push	DS
 29344                                  	;invoke	$Alloc			; should have carry set and BX has max
 29345 00006139 E81204                  	call	_$ALLOC
 29346 0000613C 1F                      	pop	DS
 29347                                  
 29348                                  	; MSDOS 6.0
 29349                                  	;mov	ax,[save_ax]		; M000
 29350                                  	;;pop	AX			; M000
 29351                                  
 29352                                  	; MSDOS 3.3
 29353 0000613D 58                      	pop	ax
 29354                                  
 29355 0000613E 83C010                  	add	AX,10h			; room for header
 29356 00006141 83FB11                  	cmp	BX,11h			; enough room for a header
 29357                                  	; MSDOS 6.0
 29358                                  	;jb	short Exec_Chk_Mem	; M000
 29359                                  	; MSDOS 3.3	
 29360 00006144 72B8                    	jb	short Exec_No_Mem
 29361                                  
 29362 00006146 39D8                    	cmp	AX,BX			; is there enough for bare image?
 29363                                  	; MSDOS 6.0
 29364                                  	;ja	short Exec_Chk_Mem	; M000
 29365                                  	; MSDOS 3.3
 29366 00006148 77B4                    	ja	short Exec_No_Mem
 29367                                  
 29368                                  	;test	byte [bp-6],0FFh
 29369 0000614A F646FAFF                	test	Exec_Load_High,-1	; if load high, use max
 29370 0000614E 7518                    	jnz	short Exec_BX_Max	; use max
 29371                                  
 29372                                  	; 09/09/2018
 29373                                  
 29374 00006150 0306[2814]              	add	AX,[exec_min_BSS] 	; go for min allocation;rms;NSS
 29375                                  	; MSDOS 6.0
 29376                                  	;jc	short Exec_Chk_Mem		; M000
 29377                                  	; MSDOS 3.3
 29378 00006154 72A8                    	jc	short Exec_No_Mem
 29379                                  
 29380 00006156 39D8                    	cmp	AX,BX			; enough space?
 29381                                  	; MSDOS 6.0
 29382                                  	;ja	short Exec_Chk_Mem	; M000: nope...	
 29383                                  	; MSDOS 3.3
 29384 00006158 77A4                    	ja	short Exec_No_Mem
 29385                                  
 29386 0000615A 2B06[2814]              	sub	AX,[exec_min_BSS] 	; rms;NSS
 29387 0000615E 0306[2A14]              	add	AX,[exec_max_BSS] 	; go for the MAX
 29388 00006162 7204                    	jc	short Exec_BX_Max
 29389                                  
 29390 00006164 39D8                    	cmp	AX,BX
 29391 00006166 7602                    	jbe	short Exec_Got_Block
 29392                                  
 29393                                  Exec_BX_Max:
 29394 00006168 89D8                    	mov	AX,BX
 29395                                  
 29396                                  Exec_Got_Block:
 29397                                  	; 03/08/2018 - Retro DOS v3.0
 29398                                  
 29399 0000616A 1E                      	push	DS
 29400 0000616B 89C3                    	mov	BX,AX
 29401                                  	;mov	[bp-16],bx
 29402 0000616D 895EF0                  	mov	Exec_Size,BX
 29403                                  	;invoke	$Alloc			; get the space
 29404 00006170 E8DB03                  	call	_$ALLOC
 29405 00006173 1F                      	pop	DS
 29406                                  	; MSDOS 6.0
 29407                                  	;jc	short Exec_Chk_Mem	; M000
 29408                                  	; MSDOS 3.3
 29409 00006174 7288                    	jc	short Exec_No_Mem
 29410                                  
 29411                                  	; MSDOS 6.0
 29412                                  	;mov	cl,[AllocMsave]		; M063: 
 29413                                  	;mov	[AllocMethod],cl	; M063: restore allocmethod
 29414                                  
 29415                                  ;M029; Begin changes
 29416                                  ; This code does special handling for programs with no stack segment. If so,
 29417                                  ;check if the current block is larger than 64K. If so, we do not modify
 29418                                  ;Exec_SP. If smaller than 64K, we make Exec_SP = top of block. In either
 29419                                  ;case Exec_SS is not changed.
 29420                                  ;
 29421                                  	; MSDOS 6.0
 29422 00006176 807EE300                	cmp	Exec_NoStack,0
 29423                                  	;je	@f
 29424 0000617A 7412                    	je	short ea2
 29425                                  
 29426 0000617C 81FB0010                	cmp	bx,1000h		; Q: >= 64K memory block
 29427                                  	;jae	@f			; Y: Exec_SP = 0
 29428 00006180 730C                    	jae	short ea2
 29429                                  ;
 29430                                  ;Make Exec_SP point at the top of the memory block
 29431                                  ;
 29432 00006182 B104                    	mov	cl,4
 29433 00006184 D3E3                    	shl	bx,cl			; get byte offset
 29434 00006186 81EB0001                	sub	bx,100h			; take care of PSP
 29435 0000618A 891E[2E14]              	mov	[exec_SP],bx		; Exec_SP = top of block
 29436                                  ea2:
 29437                                  ;@@:
 29438                                  ;
 29439                                  ;M029; end changes
 29440                                  ;
 29441                                  	;mov	[bp-18],ax
 29442 0000618E 8946EE                  	mov	Exec_Load_Block,AX
 29443 00006191 83C010                  	add	AX,10h
 29444                                  	;test	byte [bp-6],0FFh
 29445 00006194 F646FAFF                	test	Exec_Load_High,-1
 29446 00006198 7409                    	jz	short Exec_Use_AX	; use ax for load info
 29447                                  
 29448                                  	;add	ax,[bp-16]
 29449 0000619A 0346F0                  	add	AX,Exec_Size		; go to end
 29450                                  	;sub	ax,[bp-12]
 29451 0000619D 2B46F4                  	sub	AX,Exec_Res_Len_Para	; drop off header
 29452 000061A0 83E810                  	sub	AX,10h			; drop off pdb
 29453                                  
 29454                                  Exec_Use_AX:
 29455                                  	;mov	[bp-10],ax
 29456 000061A3 8946F6                  	mov	Exec_Rel_Fac,AX 	; new segment
 29457                                  	;mov	[bp-20],ax
 29458 000061A6 8946EC                  	mov	Exec_DMA,AX		; beginning of dma
 29459                                  
 29460                                  	; Determine the location in the file of the beginning of
 29461                                  	; the resident
 29462                                  
 29463                                  Exec_Find_Res:
 29464                                  	; MSDOS 6.0
 29465                                  	;mov	dx,[bp-20]
 29466 000061A9 8B56EC                  	mov	DX,Exec_DMA
 29467                                  	;mov	[bp-28],dx
 29468 000061AC 8956E4                  	mov	Exec_DMA_Save,DX
 29469                                  
 29470                                  	; MSDOS 3.3 (& MSDOS 6.0)
 29471 000061AF 8B16[2614]              	mov	DX,[exec_par_dir]
 29472 000061B3 52                      	push	DX
 29473 000061B4 B104                    	mov	CL,4
 29474 000061B6 D3E2                    	shl	DX,CL			; low word of location
 29475 000061B8 58                      	pop	AX
 29476 000061B9 B10C                    	mov	CL,12
 29477 000061BB D3E8                    	shr	AX,CL			; high word of location
 29478 000061BD 89C1                    	mov	CX,AX			; CX <- high
 29479                                  
 29480                                  		; Read in the resident image (first, seek to it)
 29481                                  	;mov	bx,[bp-8]
 29482 000061BF 8B5EF8                  	mov	BX,Exec_FH
 29483 000061C2 1E                      	push	DS
 29484 000061C3 30C0                    	xor	AL,AL
 29485                                  	;invoke	$Lseek			; Seek to resident
 29486 000061C5 E86D0D                  	call	_$LSEEK
 29487 000061C8 1F                      	pop	DS
 29488 000061C9 7303                    	jnc	short Exec_Big_Read
 29489                                  
 29490 000061CB E936FF                  	jmp	Exec_Bomb
 29491                                  
 29492                                  Exec_Big_Read:				; Read resident into memory
 29493                                  	;mov	bx,[bp-12]
 29494 000061CE 8B5EF4                  	mov	BX,Exec_Res_Len_Para
 29495 000061D1 81FB0010                	cmp	BX,1000h		; Too many bytes to read?
 29496 000061D5 7203                    	jb	short Exec_Read_OK
 29497                                  
 29498 000061D7 BBE00F                  	mov	BX,0FE0h		; Max in one chunk FE00 bytes
 29499                                  
 29500                                  Exec_Read_OK:
 29501                                  	;sub	[bp-12],bx
 29502 000061DA 295EF4                  	sub	Exec_Res_Len_Para,BX	; We read (soon) this many
 29503 000061DD 53                      	push	BX
 29504 000061DE B104                    	mov	CL,4
 29505 000061E0 D3E3                    	shl	BX,CL			; Get count in bytes from paras
 29506 000061E2 89D9                    	mov	CX,BX			; Count in correct register
 29507 000061E4 1E                      	push	DS
 29508                                  	;mov	ds,[bp-20]
 29509 000061E5 8E5EEC                  	mov	DS,Exec_DMA		; Set up read buffer
 29510                                  
 29511 000061E8 31D2                    	xor	DX,DX
 29512 000061EA 51                      	push	CX			; Save our count
 29513 000061EB E83802                  	call	ExecRead
 29514 000061EE 59                      	pop	CX			; Get old count to verify
 29515 000061EF 1F                      	pop	DS
 29516 000061F0 7248                    	jc	short Exec_Bad_FileJ
 29517                                  
 29518 000061F2 39C1                    	cmp	CX,AX			; Did we read enough?
 29519 000061F4 5B                      	pop	BX			; Get paragraph count back
 29520 000061F5 7408                    	jz	short ExecCheckEnd	; and do reloc if no more to read
 29521                                  
 29522                                  	; The read did not match the request. If we are off by 512
 29523                                  	; bytes or more then the header lied and we have an error.
 29524                                  
 29525 000061F7 29C1                    	sub	CX,AX
 29526 000061F9 81F90002                	cmp	CX,512
 29527 000061FD 733B                    	jae	short Exec_Bad_FileJ
 29528                                  
 29529                                  	; We've read in CX bytes... bump DTA location
 29530                                  
 29531                                  ExecCheckEnd:
 29532                                  	;add	[bp-20],bx
 29533 000061FF 015EEC                  	add	Exec_DMA,BX		; Bump dma address
 29534                                  	;test	word [bp-12],0FFFFh
 29535 00006202 F746F4FFFF              	test	Exec_Res_Len_Para,-1
 29536 00006207 75C5                    	jnz	short Exec_Big_Read
 29537                                  
 29538                                  	; The image has now been read in. We must perform relocation
 29539                                  	; to the current location.
 29540                                  
 29541                                  exec_do_reloc:
 29542                                  	;mov	cx,[bp-10]
 29543 00006209 8B4EF6                  	mov	CX,Exec_Rel_Fac
 29544 0000620C A1[2C14]                	mov	AX,[exec_SS]		; get initial SS ;rms;NSS
 29545 0000620F 01C8                    	add	AX,CX			; and relocate him
 29546 00006211 A3[1814]                	mov	[exec_init_SS],AX 	; rms;NSS
 29547                                  
 29548 00006214 A1[2E14]                	mov	AX,[exec_SP]		; initial SP ;rms;NSS
 29549 00006217 A3[1614]                	mov	[exec_init_SP],AX 	; rms;NSS
 29550                                  
 29551 0000621A C406[3214]              	les	AX,[exec_IP]		; rms;NSS
 29552 0000621E A3[1A14]                	mov	[exec_init_IP],AX 	; rms;NSS
 29553 00006221 8CC0                    	mov	AX,ES			; rms;NSS
 29554 00006223 01C8                    	add	AX,CX			; relocated...
 29555 00006225 A3[1C14]                	mov	[exec_init_CS],AX 	; rms;NSS
 29556                                  
 29557 00006228 31C9                    	xor	CX,CX
 29558 0000622A 8B16[3614]              	mov	DX,[exec_rle_table]	; rms;NSS
 29559                                  	;mov	bx,[bp-8]
 29560 0000622E 8B5EF8                  	mov	BX,Exec_FH
 29561 00006231 1E                      	push	DS
 29562 00006232 31C0                    	xor	AX,AX
 29563                                  	;invoke	$Lseek
 29564 00006234 E8FE0C                  	call	_$LSEEK
 29565 00006237 1F                      	pop	DS
 29566 00006238 7303                    	jnc	short exec_get_entries
 29567                                  
 29568                                  Exec_Bad_FileJ:
 29569 0000623A E9C5FE                  	jmp	Exec_Bad_File
 29570                                  
 29571                                  exec_get_entries:
 29572 0000623D 8B16[2414]              	mov	DX,[exec_rle_count]	; Number of entries left ;rms;NSS
 29573                                  
 29574                                  exec_read_reloc:
 29575 00006241 52                      	push	DX
 29576                                  	;mov	dx,OPENBUF
 29577 00006242 BA[6003]                	mov	DX,Exec_Internal_Buffer
 29578                                  	;mov	cx,388
 29579 00006245 B98401                  	mov	CX,((Exec_Internal_Buffer_Size)/4)*4 ; (390>>2)<<2
 29580 00006248 1E                      	push	DS
 29581 00006249 E8DA01                  	call	ExecRead
 29582 0000624C 07                      	pop	ES
 29583 0000624D 5A                      	pop	DX
 29584 0000624E 72EA                    	jc	short Exec_Bad_FileJ
 29585                                  
 29586                                  	;mov	cx,97
 29587 00006250 B96100                  	mov	CX,(Exec_Internal_Buffer_Size)/4 ; (390>>2)
 29588                                  					; Pointer to byte location in header
 29589                                  	;mov	di,OPENBUF
 29590 00006253 BF[6003]                	mov	DI,Exec_Internal_Buffer
 29591                                  	;mov	si,[bp-10]
 29592 00006256 8B76F6                  	mov	SI,Exec_Rel_Fac 	; Relocate a single address
 29593                                  
 29594                                  exec_reloc_one:
 29595 00006259 09D2                    	or	DX,DX			; Any more entries?
 29596 0000625B 7416                    	jz	short Exec_Set_PDBJ
 29597                                  
 29598                                  exec_get_addr:
 29599 0000625D 26C51D                  	lds	BX,[ES:DI]		; Get ra/sa of entry
 29600 00006260 8CD8                    	mov	AX,DS			; Relocate address of item
 29601                                  
 29602                                  	; MSDOS 6.0
 29603                                  ;;;;;;	add	AX,SI  ; MSDOS 3.3
 29604                                  	;add	ax,[bp-28]
 29605 00006262 0346E4                  	add	AX,Exec_DMA_Save
 29606                                  
 29607 00006265 8ED8                    	mov	DS,AX
 29608 00006267 0137                    	add	[BX],SI
 29609 00006269 83C704                  	add	DI,4
 29610 0000626C 4A                      	dec	DX
 29611 0000626D E2EA                    	loop	exec_reloc_one		; End of internal buffer?
 29612                                  
 29613                                  	; We've exhausted a single buffer's worth. Read in the next
 29614                                  	; piece of the relocation table.
 29615                                  
 29616 0000626F 06                      	push	ES
 29617 00006270 1F                      	pop	DS
 29618 00006271 EBCE                    	jmp	short exec_read_reloc
 29619                                  
 29620                                  Exec_Set_PDBJ:
 29621                                  
 29622                                  	; MSDOS 6.0
 29623                                  	;
 29624                                  	; We now determine if this is a buggy exe packed file and if 
 29625                                  	; so we patch in the right code. Note that fixexepatch will
 29626                                  	; point to a ret if dos loads low. The load segment as 
 29627                                  	; determined above will be in exec_dma_save
 29628                                  	;
 29629                                  	;push	es
 29630                                  	;push	ax			; M030
 29631                                  	;push	cx			; M030
 29632                                  	;mov	es,Exec_DMA_Save
 29633                                  	;mov	ax,[exec_init_CS]	; M030
 29634                                  	;mov	cx,[exec_init_IP]	; M030
 29635                                  	;call	word [fixexepatch]
 29636                                  	;call	word [Rational386PatchPtr]
 29637                                  	;pop	cx			; M030
 29638                                  	;pop	ax			; M030
 29639                                  	;pop	es
 29640                                  
 29641 00006273 E99D00                  	jmp	Exec_Set_PDB
 29642                                  
 29643                                  Exec_No_Memj:
 29644 00006276 E985FE                  	jmp	Exec_No_Mem
 29645                                  
 29646                                  	; we have a .COM file.	First, determine if we are merely
 29647                                  	; loading an overlay.
 29648                                  
 29649                                  Exec_Com_File:
 29650                                  	;test	byte [bp-5],2
 29651 00006279 F646FB02                	test	Exec_Func,exec_func_overlay
 29652 0000627D 740C                    	jz	short Exec_Alloc_Com_File
 29653                                  	;lds	si,[bp-4]
 29654 0000627F C576FC                  	lds	SI,Exec_Blk		; get arg block
 29655 00006282 AD                      	lodsw				; get load address
 29656                                  	;mov	[bp-20],ax
 29657 00006283 8946EC                  	mov	Exec_DMA,AX
 29658 00006286 B8FFFF                  	mov	AX,0FFFFh
 29659 00006289 EB34                    	jmp	SHORT Exec_Read_Block	; read it all!
 29660                                  
 29661                                  Exec_Chk_Com_Mem:			
 29662                                  	; MSDOS 6.0	     		; M063 - Start
 29663                                  	;mov	al,[AllocMethod]	; save current alloc method in ax
 29664                                  	;mov	bl,[AllocMsave]
 29665                                  	;mov	[AllocMethod],bl	; restore original allocmethod
 29666                                  	;test	bl,HIGH_ONLY 		; Q: was the HIGH_ONLY bit already set
 29667                                  	;jnz	short Exec_No_Memj	; Y: no space in UMBs. Quit
 29668                                  	;				; N: continue
 29669                                  	;
 29670                                  	;test	al,HIGH_ONLY		; Q: did we set the HIGH_ONLY bit
 29671                                  	;jz	short Exec_No_Memj	; N: no memory 
 29672                                  	;
 29673                                  	;mov	ax,Exec_Load_Block	; M047: ax = block we just allocated	
 29674                                  	;xor	bx,bx			; M047: bx => free arena
 29675                                  	;call	ChangeOwner		; M047: free this block
 29676                                  	;
 29677                                  	;jmp	short Exec_Norm_Com_Alloc
 29678                                  	;				; M063 - End
 29679                                  	
 29680                                  	; We must allocate the max possible size block (ick!)
 29681                                  	; and set up CS=DS=ES=SS=PDB pointer, IP=100, SP=max
 29682                                  	; size of block.
 29683                                  
 29684                                  Exec_Alloc_Com_File:
 29685                                  
 29686                                  	; MSDOS 6.0			; M000 -start
 29687                                  	;test	byte [AllocMethod],HIGH_FIRST
 29688                                  	;				; Q: is the alloc strat high_first
 29689                                  	;jz	short Exec_Norm_Com_Alloc ; N: normal allocate
 29690                                  	;				; Y: set high_only bit
 29691                                  	;or	byte [AllocMethod],HIGH_ONLY
 29692                                  	;				; M000 - end
 29693                                  ;Exec_Norm_Com_Alloc:			; M000
 29694                                  	; MSDOS 3.3 (& MSDOS 6.0)
 29695 0000628B BBFFFF                  	mov	BX,0FFFFh
 29696                                  	;invoke	$Alloc			; largest piece available as error
 29697 0000628E E8BD02                  	call	_$ALLOC
 29698 00006291 09DB                    	or	BX,BX
 29699                                  	; MSDOS 6.0
 29700                                  	;jz	short Exec_Chk_Com_Mem	; M000
 29701                                  	; MSDOS 3.3
 29702 00006293 74E1                    	jz	short Exec_No_Memj
 29703                                  
 29704                                  	;mov	[bp-16],bx
 29705 00006295 895EF0                  	mov	Exec_Size,BX		; save size of allocation block
 29706 00006298 53                      	push	BX
 29707                                  	;invoke	$ALLOC			; largest piece available as error
 29708 00006299 E8B202                  	call	_$ALLOC
 29709 0000629C 5B                      	pop	BX			; get size of block...
 29710                                  	;mov	[bp-18],ax
 29711 0000629D 8946EE                  	mov	Exec_Load_Block,AX
 29712 000062A0 83C010                  	add	AX,10h			; increment for header
 29713                                  	;mov	[bp-20],ax
 29714 000062A3 8946EC                  	mov	Exec_DMA,AX
 29715 000062A6 31C0                    	xor	AX,AX			; presume 64K read...
 29716 000062A8 81FB0010                	cmp	BX,1000h		; 64k or more in block?
 29717 000062AC 730E                    	jae	short Exec_Read_Com	; yes, read only 64k
 29718                                  
 29719 000062AE 89D8                    	mov	AX,BX			; convert size to bytes
 29720 000062B0 B104                    	mov	CL,4
 29721 000062B2 D3E0                    	shl	AX,CL
 29722                                  	; MSDOS 6.0
 29723 000062B4 3D0002                          cmp     AX,200h                 ; enough memory for PSP and stack?
 29724                                  ;	jbe	short Exec_Chk_Com_Mem	; M000: jump if not
 29725                                  ;	;jbe	short Exec_No_Memj	; M000: jump if not
 29726                                  	; Retro DOS v3.0 modification (on MSDOS 6.0 code) -03/08/2018-
 29727                                  	;jbe	short Exec_Chk_Com_Mem	; M000: jump if not
 29728 000062B7 76BD                    	jbe	short Exec_No_Memj	; M000: jump if not
 29729                                  
 29730                                  					; M047: size of the block is < 64K
 29731 000062B9 2D0001                  	sub	ax,100h			; M047: reserve 256 bytes for stack
 29732                                  
 29733                                  Exec_Read_Com:
 29734                                  	; MSDOS 3.3 (& MSDOS 6.0)
 29735 000062BC 2D0001                  	sub	AX,100h 		; remember size of psp
 29736                                  
 29737                                  Exec_Read_Block:
 29738 000062BF 50                      	push	AX			; save number to read
 29739                                  	;mov	bx,[bp-8]
 29740 000062C0 8B5EF8                  	mov	BX,Exec_FH		; of com file
 29741 000062C3 31C9                    	xor	CX,CX			; but seek to 0:0
 29742 000062C5 89CA                    	mov	DX,CX
 29743 000062C7 31C0                    	xor	AX,AX			; seek relative to beginning
 29744                                  	;invoke	$Lseek			; back to beginning of file
 29745 000062C9 E8690C                  	call	_$LSEEK
 29746 000062CC 59                      	pop	CX			; number to read
 29747                                  	;mov	ds,[bp-20]
 29748 000062CD 8E5EEC                  	mov	DS,Exec_DMA
 29749 000062D0 31D2                    	xor	DX,DX
 29750 000062D2 51                      	push	CX
 29751 000062D3 E85001                  	call	ExecRead
 29752 000062D6 5E                      	pop	SI			; get number of bytes to read
 29753 000062D7 7303                    	jnc	short OkRead
 29754                                  
 29755 000062D9 E926FE                  	jmp	Exec_Bad_File
 29756                                  
 29757                                  	; 10/09/2018
 29758                                  OkRead:
 29759 000062DC 39F0                    	cmp	AX,SI			; did we read them all?
 29760                                  	; MSDOS 6.0
 29761                                  	;jz	short Exec_Chk_Com_Mem	; M00: exactly the wrong number...no 
 29762                                  	; MSDOS 3.3
 29763 000062DE 7496                    	jz	short Exec_No_Memj	; M00: exactly the wrong number...
 29764                                  	
 29765                                  	; MSDOS 6.0
 29766                                  	;mov	bl,[AllocMsave]		; M063
 29767                                  	;mov	[AllocMethod],bl	; M063: restore allocmethod
 29768                                  
 29769                                  	; MSDOS 3.3 (& MSDOS 6.0)
 29770                                  	;test	byte [bp-5],2
 29771 000062E0 F646FB02                	test	Exec_Func,exec_func_overlay
 29772 000062E4 752D                    	jnz	short Exec_Set_PDB	; no starto, chumo!
 29773                                  
 29774                                  	;mov	ax,[bp-20]
 29775 000062E6 8B46EC                  	mov	AX,Exec_DMA
 29776 000062E9 83E810                  	sub	AX,10h
 29777 000062EC 36A3[1C14]              	mov	[SS:exec_init_CS],AX
 29778 000062F0 36C706[1A14]0001        	mov	word [SS:exec_init_IP],100h ; initial IP is 100h
 29779                                  
 29780                                  	; SI is AT MOST FF00h. Add FE to account for PSP - word
 29781                                  	; of 0 on stack.
 29782                                  
 29783 000062F7 81C6FE00                	add	SI,0FEh 		; make room for stack
 29784                                  
 29785                                  	; MSDOS 6.0
 29786 000062FB 83FEFE                  	cmp	si,0FFFEh		; M047: Q: was there >= 64K available
 29787 000062FE 7404                    	je	short Exec_St_Ok	; M047: Y: stack is fine
 29788 00006300 81C60001                	add	si,100h			; M047: N: add the xtra 100h for stack
 29789                                  
 29790                                  Exec_St_Ok:
 29791                                  	; MSDOS 3.3 (& MSDOS 6.0)
 29792 00006304 368936[1614]            	mov	[SS:exec_init_SP],SI 	; max value for read is also SP!;smr;SS Override
 29793 00006309 36A3[1814]              	mov	[SS:exec_init_SS],AX 					;smr;SS Override
 29794 0000630D 8ED8                    	mov	DS,AX
 29795 0000630F C7040000                	mov	WORD [SI],0		; 0 for return
 29796                                  
 29797                                  	; MSDOS 6.0
 29798                                  	;
 29799                                  	; M068
 29800                                  	;
 29801                                  	; We now determine if this is a Copy Protected App. If so the 
 29802                                  	; A20OFF_COUNT is set to 6. Note that ChkCopyProt will point to a 
 29803                                  	; a ret if DOS is loaded low. Also DS contains the load segment.
 29804                                  
 29805                                  	;call	word ptr [ChkCopyProt]	
 29806                                  
 29807                                  Exec_Set_PDB:
 29808                                  	; MSDOS 3.3 (& MSDOS 6.0)
 29809                                  	;mov	bx,[bp-8]
 29810 00006313 8B5EF8                  	mov	BX,Exec_FH		; we are finished with the file.
 29811 00006316 E81C01                  	call	Exec_Dealloc
 29812 00006319 55                      	push	BP
 29813                                  	;invoke	$Close			; release the jfn
 29814 0000631A E8A60A                  	call	_$CLOSE
 29815 0000631D 5D                      	pop	BP
 29816 0000631E E81F01                  	call	Exec_Alloc
 29817                                  	;test	byte [bp-5],2
 29818 00006321 F646FB02                	test	Exec_Func,exec_func_overlay
 29819 00006325 7406                    	jz	short Exec_Build_Header
 29820                                  
 29821                                  	; MSDOS 6.0
 29822                                  	;call	Scan_Execname
 29823                                  	;call	Scan_Special_Entries
 29824                                  	;
 29825                                  ;SR;
 29826                                  ;The current lie strategy uses the PSP to store the lie version. However,
 29827                                  ;device drivers are loaded as overlays and have no PSP. To handle them, we
 29828                                  ;use the Sysinit flag provided by the BIOS as part of a structure pointed at
 29829                                  ;by BiosDataPtr. If this flag is set, the overlay call has been issued from
 29830                                  ;Sysinit and therefore must be a device driver load. We then get the lie 
 29831                                  ;version for this driver and put it into the Sysinit PSP. When the driver
 29832                                  ;issues the version check, it gets the lie version until the next overlay
 29833                                  ;call is issued.
 29834                                  ;
 29835                                  	;cmp	DriverLoad,0		;was Sysinit processing done?
 29836                                  	;je	norm_ovl		;yes, no special handling
 29837                                  	;push	si
 29838                                  	;push	es
 29839                                  	;les	si,BiosDataPtr		;get ptr to BIOS data block
 29840                                  	;cmp	byte ptr es:[si],0		;in Sysinit?
 29841                                  	;je	sysinit_done		;no, Sysinit is finished
 29842                                  	;
 29843                                  	;mov	es,CurrentPDB		;es = current PSP (Sysinit PSP)
 29844                                  	;push	Special_Version
 29845                                  	;pop	es:PDB_Version		;store lie version in Sysinit PSP
 29846                                  		;;; PDB.VERSION
 29847                                  	;jmp	short setver_done
 29848                                  ;sysinit_done:
 29849                                  	;mov	DriverLoad,0		;Sysinit done,special handling off
 29850                                  ;setver_done:
 29851                                  	;pop	es
 29852                                  	;pop	si
 29853                                  ;norm_ovl:
 29854                                  
 29855                                  	;leave
 29856 00006327 89EC                    	mov	sp,bp		
 29857 00006329 5D                      	pop	bp
 29858                                  
 29859                                  	;transfer SYS_RET_OK		; overlay load -> done
 29860 0000632A E9D0B3                  	jmp	SYS_RET_OK
 29861                                  
 29862                                  Exec_Build_Header:
 29863                                  	;mov	dx,[bp-18]
 29864 0000632D 8B56EE                  	mov	DX,Exec_Load_Block
 29865                                  					; assign the space to the process
 29866                                  	;mov	si,1
 29867 00006330 BE0100                  	mov	SI,ARENA.OWNER		; pointer to owner field
 29868                                  	;mov	ax,[bp-14]
 29869 00006333 8B46F2                  	mov	AX,Exec_Environ 	; get environ pointer
 29870 00006336 09C0                    	or	AX,AX
 29871 00006338 7405                    	jz	short No_Owner		; no environment
 29872                                  
 29873 0000633A 48                      	dec	AX			; point to header
 29874 0000633B 8ED8                    	mov	DS,AX
 29875 0000633D 8914                    	mov	[SI],DX 		; assign ownership
 29876                                  
 29877                                  No_Owner:
 29878                                  	;mov	ax,[bp-18]
 29879 0000633F 8B46EE                  	mov	AX,Exec_Load_Block	; get load block pointer
 29880 00006342 48                      	dec	AX
 29881 00006343 8ED8                    	mov	DS,AX			; point to header
 29882 00006345 8914                    	mov	[SI],DX 		; assign ownership
 29883                                  
 29884                                  	; MSDOS 6.0
 29885                                  	;push	DS			;AN000;MS. make ES=DS
 29886                                  	;pop	ES			;AN000;MS.
 29887                                  	;mov	DI,Arena_Name		;AN000;MS. ES:DI points to destination
 29888                                  	;call	Scan_Execname		;AN007;MS. parse execname
 29889                                  	;				;	   ds:si->name, cx=name length
 29890                                  	;push	CX			;AN007;;MS. save for fake version
 29891                                  	;push	SI			;AN007;;MS. save for fake version
 29892                                  	;
 29893                                  ;MoveName:				;AN000;
 29894                                  	;lodsb				;AN000;;MS. get char
 29895                                  	;cmp	AL,'.'			;AN000;;MS. is '.' ,may be name.exe
 29896                                  	;jz	Mem_Done		;AN000;;MS. no, move to header
 29897                                  	;				;AN000;
 29898                                  	;stosb				;AN000;;MS. move char
 29899                                  	;				; MSKK bug fix - limit length copied
 29900                                  	;cmp	di,16			; end of memory arena block?
 29901                                  	;jae	mem_done		; jump if so
 29902                                  	;
 29903                                  	;loop	movename		;AN000;;MS. continue
 29904                                  ;Mem_Done:				;AN000;
 29905                                  	;xor	AL,AL			;AN000;;MS. make ASCIIZ
 29906                                  	;cmp	DI,SIZE ARENA		;AN000;MS. if not all filled
 29907                                  	;jae	Fill8			;AN000;MS.
 29908                                  	;
 29909                                  	;stosb				;AN000;MS.
 29910                                  	;
 29911                                  ;Fill8:					;AN000;
 29912                                  	;pop	SI			;AN007;MS. ds:si -> file name
 29913                                  	;pop	CX			;AN007;MS.
 29914                                  	;
 29915                                  	;call	Scan_Special_Entries	;AN007;MS.
 29916                                  
 29917                                  	; MSDOS 3.3 (& MSDOS 6.0)
 29918 00006347 52                      	push	DX
 29919                                  	;mov	si,[bp-16]
 29920 00006348 8B76F0                  	mov	SI,Exec_Size
 29921 0000634B 01D6                    	add	SI,DX
 29922                                  	;Invoke	$Dup_PDB		; ES is now PDB
 29923 0000634D E8E6BA                  	call	_$DUP_PDB
 29924 00006350 5A                      	pop	DX
 29925                                  
 29926                                  	;push	word [bp-14]
 29927 00006351 FF76F2                  	push	Exec_Environ
 29928                                  	;pop	WORD [ES:2Ch]
 29929 00006354 268F062C00              	pop	word [ES:PDB.ENVIRON]
 29930                                  
 29931                                  	; MSDOS 6.0			; *** Added for DOS 5.00
 29932                                  					; version number in PSP
 29933                                   	;push	word [Special_Version]	; Set the DOS version number to
 29934                                  	;pop	word [ES:PDB_Version]	; to be used for this application
 29935                                  		; PDB.VERSION
 29936                                  
 29937                                  	; MSDOS 3.3 (& MSDOS 6.0)	; set up proper command line stuff
 29938                                  	;lds	si,[bp-4]
 29939 00006359 C576FC                  	lds	SI,Exec_Blk		; get the block
 29940 0000635C 1E                      	push	DS			; save its location
 29941 0000635D 56                      	push	SI
 29942                                  	;lds	si, [si+6]
 29943 0000635E C57406                  	lds	SI,[SI+EXEC0.5C_FCB]	; get the 5c fcb
 29944                                  
 29945                                  	; DS points to user space 5C FCB
 29946                                  
 29947 00006361 B90C00                  	mov	CX,12			; copy drive, name and ext
 29948 00006364 51                      	push	CX
 29949 00006365 BF5C00                  	mov	DI,5Ch
 29950 00006368 8A1C                    	mov	BL,[SI]
 29951 0000636A F3A4                    	rep	movsb
 29952                                  
 29953                                  	; DI = 5Ch + 12 = 5Ch + 0Ch = 68h
 29954                                  
 29955 0000636C 31C0                    	xor	AX,AX			; zero extent, etc for CPM
 29956 0000636E AB                      	stosw
 29957 0000636F AB                      	stosw
 29958                                  
 29959                                  	; DI = 5Ch + 12 + 4 = 5Ch + 10h = 6Ch
 29960                                  
 29961 00006370 59                      	pop	CX
 29962 00006371 5E                      	pop	SI			; get block
 29963 00006372 1F                      	pop	DS
 29964 00006373 1E                      	push	DS			; save (again)
 29965 00006374 56                      	push	SI
 29966                                  	;lds	si,[si+0Ah]
 29967 00006375 C5740A                  	lds	SI,[SI+EXEC0.6C_FCB]	; get 6C FCB
 29968                                  
 29969                                  	; DS points to user space 6C FCB
 29970                                  
 29971 00006378 8A3C                    	mov	BH,[SI] 		; do same as above
 29972 0000637A F3A4                    	rep	movsb
 29973 0000637C AB                      	stosw
 29974 0000637D AB                      	stosw
 29975 0000637E 5E                      	pop	SI			; get block (last time)
 29976 0000637F 1F                      	pop	DS
 29977                                  	;ld	si,[si+2]
 29978 00006380 C57402                  	lds	SI,[SI+EXEC0.COM_LINE]	; command line
 29979                                  
 29980                                  	; DS points to user space 80 command line
 29981                                  
 29982 00006383 80C980                  	or	CL,80h
 29983 00006386 89CF                    	mov	DI,CX
 29984 00006388 F3A4                    	rep	movsb			; Wham!
 29985                                  
 29986                                  	; Process BX into default AX (validity of drive specs on args).
 29987                                  	; We no longer care about DS:SI.
 29988                                  
 29989 0000638A FEC9                    	dec	CL			; get 0FFh in CL
 29990 0000638C 88F8                    	mov	AL,BH
 29991 0000638E 30FF                    	xor	BH,BH
 29992                                  	;invoke	GetVisDrv
 29993 00006390 E8C705                  	call	GetVisDrv
 29994 00006393 7302                    	jnc	short Exec_BL
 29995                                  
 29996 00006395 88CF                    	mov	BH,CL
 29997                                  
 29998                                  Exec_BL:
 29999 00006397 88D8                    	mov	AL,BL
 30000 00006399 30DB                    	xor	BL,BL
 30001                                  	;invoke	GetVisDrv
 30002 0000639B E8BC05                  	call	GetVisDrv
 30003 0000639E 7302                    	jnc	short Exec_Set_Return
 30004                                  
 30005 000063A0 88CB                    	mov	BL,CL
 30006                                  
 30007                                  Exec_Set_Return:
 30008                                  	;invoke	Get_User_Stack			; get his return address
 30009 000063A2 E866B2                  	call	Get_User_Stack
 30010                                  
 30011                                  	;push	word [si+14h]
 30012 000063A5 FF7414                  	push	word [SI+user_env.user_CS]	; suck out the CS and IP
 30013                                  	;push	word [si+12h]
 30014 000063A8 FF7412                  	push	word [SI+user_env.user_IP]
 30015                                  	;push	word [si+14h]
 30016 000063AB FF7414                  	push	word [SI+user_env.user_CS]	; suck out the CS and IP
 30017                                  	;push	word [si+12h]
 30018 000063AE FF7412                  	push	word [SI+user_env.user_IP]
 30019                                  	;pop	word [ES:0Ah]
 30020 000063B1 268F060A00              	pop	WORD [ES:PDB.EXIT]
 30021                                  	;pop	word [ES:0Ch]
 30022 000063B6 268F060C00              	pop	WORD [ES:PDB.EXIT+2]
 30023                                  
 30024 000063BB 31C0                    	xor	AX,AX
 30025 000063BD 8ED8                    	mov	DS,AX
 30026                                  					; save them where we can get them
 30027                                  					; later when the child exits.
 30028                                  	;pop	word [88h]
 30029 000063BF 8F068800                	pop	word [addr_int_terminate] ; 22h*4
 30030                                  	;pop	word [90h]
 30031 000063C3 8F068A00                	pop	word [addr_int_terminate+2] ; (22h*4)+2
 30032                                  
 30033 000063C7 36C706[DA02]8000        	mov	WORD [SS:DMAADD],80h	; SS Override
 30034 000063CE 368E1E[DE02]            	mov	DS,[SS:CurrentPDB]	; SS Override
 30035 000063D3 368C1E[DC02]            	mov	[SS:DMAADD+2],DS	; SS Override
 30036                                  
 30037                                  	;test	byte [bp-5],1
 30038 000063D8 F646FB01                	test	Exec_Func,exec_func_no_execute
 30039 000063DC 7427                    	jz	short exec_go
 30040                                  
 30041 000063DE 36C536[1614]            	lds	SI,[SS:exec_init_SP]	; get stack SS Override
 30042                                  	;les	di,[bp-4]
 30043 000063E3 C47EFC                  	les	DI,Exec_Blk		; and block for return
 30044                                  	;mov	[es:di+10h],ds
 30045 000063E6 268C5D10                	mov	[ES:DI+EXEC1.SS],DS	; return SS
 30046                                  
 30047 000063EA 4E                      	dec	SI			; 'push' default AX
 30048 000063EB 4E                      	dec	SI
 30049 000063EC 891C                    	mov	[SI],BX 		; save default AX reg
 30050                                  	;mov	[es:di+0Eh], si
 30051 000063EE 2689750E                	mov	[ES:DI+EXEC1.SP],SI	; return 'SP'
 30052                                  
 30053 000063F2 36C506[1A14]            	lds	AX,[SS:exec_init_IP]	; SS Override
 30054                                  	;mov	[es:di+14h],ds
 30055 000063F7 268C5D14                	mov	[ES:DI+EXEC1.CS],DS	; initial entry stuff
 30056                                  	;mov	[es:di+12h],ax
 30057 000063FB 26894512                	mov	[ES:DI+EXEC1.IP],AX
 30058                                  	
 30059                                  	;leave
 30060 000063FF 89EC                    	mov	sp,bp
 30061 00006401 5D                      	pop	bp	
 30062                                  
 30063                                  	;transfer SYS_RET_OK
 30064 00006402 E9F8B2                  	jmp	SYS_RET_OK
 30065                                  
 30066                                  exec_go:
 30067 00006405 36C536[1A14]            	lds	SI,[SS:exec_init_IP]	; get entry point SS Override
 30068 0000640A 36C43E[1614]            	les	DI,[SS:exec_init_SP]	; new stack SS Override
 30069 0000640F 8CC0                    	mov	AX,ES
 30070                                  
 30071                                  	; MSDOS 6.0
 30072                                  	;cmp	byte [SS:DosHasHMA],0	; Q: is dos in HMA (M021)
 30073                                  	;je	short Xfer_To_User	; N: transfer control to user
 30074                                  
 30075                                  	;push	ds			; Y: control must go to low mem stub
 30076                                  	;	
 30077                                  	;push	cs			;    where we disable a20 and Xfer 
 30078                                  	;pop	ds			;    control to user 
 30079                                  	;
 30080                                  	;or	byte [DOS_FLAG],EXECA20OFF ; M068:
 30081                                  	;				; M004: Set bit to signal int 21
 30082                                  	;				; ah = 25 & ah= 49. See dossym.inc 
 30083                                  	;				; under TAG M003 & M009 for 
 30084                                  	;				; explanation
 30085                                  	;mov	[A20OFF_PSP],dx		; M068: set the PSP for which A20 is
 30086                                  	;				; M068: going to be turned OFF.
 30087                                  	;
 30088                                  	;mov	ax,ds			; ax = segment of low mem stub
 30089                                  	;pop	ds
 30090                                  	;
 30091                                  	;push	ax			; ret far into the low mem stub
 30092                                  	;mov	ax,Disa20_Xfer
 30093                                  	;push	ax
 30094                                  	;mov	AX,ES			; restore ax
 30095                                  	;retf
 30096                                  
 30097                                  Xfer_To_User:
 30098                                  	; DS:SI points to entry point
 30099                                  	; AX:DI points to initial stack
 30100                                  	; DX has PDB pointer
 30101                                  	; BX has initial AX value
 30102                                  
 30103 00006411 FA                      	cli
 30104                                  	; 15/08/2018
 30105 00006412 36C606[CF02]00          	mov	BYTE [SS:INDOS],0	; SS Override
 30106                                  
 30107 00006418 8ED0                    	mov	SS,AX			; set up user's stack
 30108 0000641A 89FC                    	mov	SP,DI			; and SP
 30109 0000641C FB                      	sti
 30110                                  
 30111 0000641D 1E                      	push	DS			; fake long call to entry
 30112 0000641E 56                      	push	SI
 30113 0000641F 8EC2                    	mov	ES,DX			; set up proper seg registers
 30114 00006421 8EDA                    	mov	DS,DX
 30115 00006423 89D8                    	mov	AX,BX			; set up proper AX
 30116                                  
 30117 00006425 CB                      	retf
 30118                                  
 30119                                  ; 04/08/2018 - Retro DOS v3.0
 30120                                  
 30121                                  ;----------------------------------------------------------------------------
 30122                                  ;
 30123                                  ;----------------------------------------------------------------------------
 30124                                  
 30125                                  ExecRead:
 30126 00006426 E80C00                  	CALL	Exec_Dealloc
 30127                                  	;mov	bx,[bp-8]
 30128 00006429 8B5EF8                  	MOV	bx,Exec_FH
 30129 0000642C 55                      	PUSH	BP
 30130 0000642D E8AB0A                  	call	_$READ
 30131 00006430 5D                      	POP	BP
 30132 00006431 E80C00                  	CALL	Exec_Alloc
 30133 00006434 C3                      	retn
 30134                                  
 30135                                  ;----------------------------------------------------------------------------
 30136                                  ;
 30137                                  ;----------------------------------------------------------------------------
 30138                                  
 30139                                  Exec_Dealloc:
 30140 00006435 53                      	push	BX
 30141                                  	;mov	bx,0
 30142 00006436 29DB                    	sub	BX,BX		; (bx) = ARENA_OWNER_SYSTEM
 30143 00006438 E831BC                  	call	EcritMem
 30144 0000643B E81000                  	call	ChangeOwners
 30145 0000643E 5B                      	pop	BX
 30146 0000643F C3                      	retn
 30147                                  
 30148                                  ;----------------------------------------------------------------------------
 30149                                  ;
 30150                                  ;----------------------------------------------------------------------------
 30151                                  
 30152                                  Exec_Alloc:
 30153 00006440 53                      	push	BX
 30154                                  	;mov	bx,[SS:CurrentPDB]	; SS Override
 30155 00006441 2E8B1E[DE02]            	mov	BX,[CS:CurrentPDB]  ; MSDOS 3.3
 30156 00006446 E80500                  	call	ChangeOwners
 30157 00006449 E828BC                  	call	LcritMem
 30158 0000644C 5B                      	pop	BX
 30159 0000644D C3                      	retn
 30160                                  
 30161                                  ;----------------------------------------------------------------------------
 30162                                  ;
 30163                                  ;----------------------------------------------------------------------------
 30164                                  
 30165                                  ChangeOwners:
 30166 0000644E 9C                      	pushf
 30167 0000644F 50                      	push	AX
 30168                                  	;mov	ax,[bp-14]
 30169 00006450 8B46F2                  	mov	AX,Exec_Environ
 30170 00006453 E80900                  	call	ChangeOwner
 30171                                  	;mov	ax,[bp-18]
 30172 00006456 8B46EE                  	mov	AX,Exec_Load_Block
 30173 00006459 E80300                  	call	ChangeOwner
 30174 0000645C 58                      	pop	AX
 30175 0000645D 9D                      	popf
 30176                                  chgown_retn:
 30177 0000645E C3                      	retn
 30178                                  
 30179                                  ;----------------------------------------------------------------------------
 30180                                  ;
 30181                                  ;----------------------------------------------------------------------------
 30182                                  
 30183                                  ChangeOwner:
 30184 0000645F 09C0                    	or	AX,AX			; is area allocated?
 30185 00006461 74FB                    	jz	short chgown_retn	; no, do nothing
 30186 00006463 48                      	dec	AX
 30187 00006464 1E                      	push	DS
 30188 00006465 8ED8                    	mov	DS,AX
 30189 00006467 891E0100                	mov	[ARENA.OWNER],BX
 30190 0000646B 1F                      	pop	DS
 30191 0000646C C3                      	retn
 30192                                  
 30193                                  
 30194                                  ; MSDOS 6.0
 30195                                  ;----------------------------------------------------------------------------
 30196                                  ;
 30197                                  ;----------------------------------------------------------------------------
 30198                                  
 30199                                  ;Procedure	Scan_Execname,near
 30200                                  ;	ASSUME	SS:DosData
 30201                                  ;
 30202                                  ;	lds	SI,ExecName		; DS:SI points to name
 30203                                  ;Entry	Scan_Execname1			; M028
 30204                                  ;Save_Begin:				;
 30205                                  ;	mov	CX,SI			; CX= starting addr
 30206                                  ;Scan0:					;
 30207                                  ;	lodsb				; get char
 30208                                  ;
 30209                                  ;	cmp	AL,':'			; is ':' , may be A:name
 30210                                  ;	jz	save_begin		; yes, save si
 30211                                  ;	cmp	AL,'\'                  ; is '\', may be A:\name
 30212                                  ;	jz	save_begin		; yes, save si
 30213                                  ;	cmp	AL,0			; is end of name
 30214                                  ;	jnz	scan0			; no, continue scanning
 30215                                  ;	sub	SI,CX			; get name's length
 30216                                  ;	xchg	SI,CX			; cx= length, si= starting addr
 30217                                  ;
 30218                                  ;	return
 30219                                  ;
 30220                                  ;EndProc Scan_Execname
 30221                                  
 30222                                  ; MSDOS 6.0
 30223                                  ;----------------------------------------------------------------------------
 30224                                  ;
 30225                                  ;----------------------------------------------------------------------------
 30226                                  
 30227                                  ;Procedure    Scan_Special_Entries,near
 30228                                  ;	assume	SS:DOSDATA
 30229                                  ;
 30230                                  ;	dec	CX			; cx= name length
 30231                                  ;;M060	mov	DI,[Special_Entries]	; es:di -> addr of special entries
 30232                                  ;					;reset to current version
 30233                                  ;	mov    [Special_Version],(Minor_Version SHL 8) + Major_Version
 30234                                  ;;***	call	Reset_Version
 30235                                  ;
 30236                                  ;;M060	push	SS
 30237                                  ;;M060	pop	ES
 30238                                  ;
 30239                                  ;	les	DI,SS:UU_IFS_DOS_CALL	;M060; ES:DI --> Table in SETVER.SYS
 30240                                  ;	mov	AX,ES			;M060; First do a NULL ptr check to
 30241                                  ;	or	AX,DI			;M060; be sure the table exists
 30242                                  ;	jz	End_List		;M060; If ZR then no table
 30243                                  ;
 30244                                  ;GetEntries:
 30245                                  ;	mov	AL,ES:[DI]		; end of list
 30246                                  ;	or	AL,AL
 30247                                  ;	jz	End_List		; yes
 30248                                  ;
 30249                                  ;	mov	[Temp_Var2],DI		; save di
 30250                                  ;	cmp	AL,CL			; same length ?
 30251                                  ;	jnz	SkipOne 		; no
 30252                                  ;
 30253                                  ;	inc	DI			; es:di -> special name
 30254                                  ;	push	CX			; save length and name addr
 30255                                  ;	push	SI
 30256                                  ;
 30257                                  ;;
 30258                                  ;; M050 - BEGIN
 30259                                  ;;
 30260                                  ;	push	ax			; save len
 30261                                  ;sse_next_char:
 30262                                  ;	lodsb
 30263                                  ;	call	UCase
 30264                                  ;	scasb
 30265                                  ;	jne	Not_Matched
 30266                                  ;	loop	sse_next_char
 30267                                  ;	
 30268                                  ;;
 30269                                  ;;	repz	cmpsb			; same name ?
 30270                                  ;;
 30271                                  ;;	jnz	Not_Matched		; no
 30272                                  ;;
 30273                                  ;	pop	ax			; take len off the stack
 30274                                  ;;
 30275                                  ;; M050 - END
 30276                                  ;;
 30277                                  ;	mov	AX,ES:[DI]		; get special version
 30278                                  ;	mov	[Special_Version],AX	; save it
 30279                                  ;
 30280                                  ;;***	mov	AL,ES:[DI+2]		; get fake count
 30281                                  ;;***	mov	[Fake_Count],AL 	; save it
 30282                                  ;
 30283                                  ;	pop	SI
 30284                                  ;	pop	CX
 30285                                  ;	jmp	SHORT end_list
 30286                                  ;
 30287                                  ;Not_Matched:
 30288                                  ;	pop	ax			; get len from stack ; M050
 30289                                  ;	pop	SI			; restore si,cx
 30290                                  ;	pop	CX
 30291                                  ;
 30292                                  ;SkipOne:
 30293                                  ;	mov	DI,[Temp_Var2]		; restore old di use SS Override
 30294                                  ;	xor	AH,AH			; position to next entry
 30295                                  ;	add	DI,AX
 30296                                  ;
 30297                                  ;	add	DI,3			; DI -> next entry length
 30298                                  ;;***	add	DI,4			; DI -> next entry length
 30299                                  ;
 30300                                  ;	jmp	Getentries
 30301                                  ;
 30302                                  ;End_List:
 30303                                  ;	return
 30304                                  ;
 30305                                  ;EndProc Scan_Special_Entries
 30306                                  
 30307                                  
 30308                                  ; 04/08/2018 - Retro DOS v3.0
 30309                                  ; IBMDOS.COm (MSDOS 3.3, 1987) - Offset 633Dh
 30310                                  
 30311                                  ;----------------------------------------------------------------------------
 30312                                  ;SUBTTL Terminate and stay resident handler
 30313                                  ;
 30314                                  ; Input:    DX is  an  offset  from  CurrentPDB  at which to
 30315                                  ;	    truncate the current block.
 30316                                  ;
 30317                                  ; output:   The current block is truncated (expanded) to be [DX+15]/16
 30318                                  ;	    paragraphs long.  An exit is simulated via resetting CurrentPDB
 30319                                  ;	    and restoring the vectors.
 30320                                  ;
 30321                                  ;----------------------------------------------------------------------------
 30322                                  
 30323                                  _$KEEP_PROCESS:
 30324 0000646D 50                      	push	AX			; keep exit code around
 30325                                  	;mov	byte [SS:EXIT_TYPE],3
 30326 0000646E 36C606[1705]03          	mov	BYTE [SS:EXIT_TYPE],EXIT_KEEP_PROCESS
 30327 00006474 368E06[DE02]            	mov	ES,[SS:CurrentPDB]
 30328 00006479 83FA06                  	cmp	DX,6h			; keep enough space around for system
 30329 0000647C 7303                    	jae	short Keep_Shrink	; info
 30330                                  
 30331 0000647E BA0600                  	mov	DX,6h
 30332                                  
 30333                                  Keep_Shrink:
 30334 00006481 89D3                    	mov	BX,DX
 30335 00006483 53                      	push	BX
 30336 00006484 06                      	push	ES
 30337 00006485 E8BF01                  	call	_$SETBLOCK		; ignore return codes.
 30338 00006488 1F                      	pop	DS
 30339 00006489 5B                      	pop	BX
 30340 0000648A 7207                    	jc	short Keep_Done		; failed on modification
 30341                                  
 30342 0000648C 8CD8                    	mov	AX,DS
 30343 0000648E 01D8                    	add	AX,BX
 30344                                  	;mov	[2],ax
 30345 00006490 A30200                  	mov	[PDB.BLOCK_LEN],AX	;PBUGBUG
 30346                                  
 30347                                  Keep_Done:
 30348 00006493 58                      	pop	AX
 30349 00006494 EB26                    	jmp	SHORT exit_inner	; and let abort take care of the rest
 30350                                  
 30351                                  ;----------------------------------------------------------------------------
 30352                                  ;
 30353                                  ;----------------------------------------------------------------------------
 30354                                  
 30355                                  STAY_RESIDENT:
 30356                                  	;mov	ax,3100h
 30357 00006496 B80031                  	mov	AX,(KEEP_PROCESS<<8)+0 ; Lower part is return code;PBUGBUG
 30358 00006499 83C20F                  	add	DX,15
 30359 0000649C D1DA                    	rcr	DX,1
 30360 0000649E B103                    	mov	CL,3
 30361 000064A0 D3EA                    	shr	DX,CL
 30362                                  
 30363 000064A2 E905B0                  	jmp	COMMAND
 30364                                  
 30365                                  ;----------------------------------------------------------------------------
 30366                                  ;SUBTTL $EXIT - return to parent process
 30367                                  ;   Assembler usage:
 30368                                  ;	    MOV     AL, code
 30369                                  ;	    MOV     AH, Exit
 30370                                  ;	    INT     int_command
 30371                                  ;   Error return:
 30372                                  ;	    None.
 30373                                  ;
 30374                                  ;----------------------------------------------------------------------------
 30375                                  
 30376                                  _$EXIT:
 30377                                  	; 04/08/2018 - Retro DOS v3.0
 30378                                  	; IBMDOSDOS.COM (MSDOS 3.3, 1987) - Offset 6375h
 30379 000064A5 30E4                    	xor	AH,AH
 30380 000064A7 368626[F902]            	xchg	AH,[SS:DidCTRLC]
 30381 000064AC 08E4                    	or	AH,AH
 30382                                  	;mov	BYTE [SS:EXIT_TYPE],0
 30383 000064AE 36C606[1705]00          	mov	BYTE [SS:EXIT_TYPE],EXIT_TERMINATE
 30384 000064B4 7406                    	jz	short exit_inner
 30385                                  	;mov	BYTE [SS:EXIT_TYPE],1
 30386 000064B6 36C606[1705]01          	mov	BYTE [SS:EXIT_TYPE],EXIT_CTRL_C
 30387                                  
 30388                                  	;entry	Exit_inner
 30389                                  exit_inner:
 30390 000064BC E84CB1                  	call	Get_User_Stack		;PBUGBUG
 30391                                  
 30392 000064BF 36FF36[DE02]            	push	word [ss:CurrentPDB]
 30393                                  	;pop	word [si+14h]
 30394 000064C4 8F4414                  	pop	word [SI+user_env.user_CS] ;PBUGBUG
 30395 000064C7 EB08                    	jmp	short abort_inner
 30396                                  
 30397                                  ;BREAK <$ABORT -- Terminate a process>
 30398                                  ;----------------------------------------------------------------------------
 30399                                  ; Inputs:
 30400                                  ;	user_CS:00 must point to valid program header block
 30401                                  ; Function:
 30402                                  ;	Restore terminate and Cntrl-C addresses, flush buffers and transfer
 30403                                  ;	to the terminate address
 30404                                  ; Returns:
 30405                                  ;	TO THE TERMINATE ADDRESS
 30406                                  ;----------------------------------------------------------------------------
 30407                                  
 30408                                  _$ABORT:
 30409 000064C9 30C0                    	xor	AL,AL
 30410                                  	;mov	byte [SS:EXIT_TYPE],0
 30411                                  	;mov	byte [SS:EXIT_TYPE],AL ; = 0
 30412 000064CB 36C606[1705]00          	mov	byte [SS:EXIT_TYPE],EXIT_ABORT
 30413                                  
 30414                                  	; abort_inner must have AL set as the exit code! The exit type
 30415                                  	; is retrieved from exit_type. Also, the PDB at user_CS needs
 30416                                  	; to be correct as the one that is terminating.
 30417                                  
 30418                                  abort_inner:
 30419 000064D1 368A26[1705]            	mov	AH,[SS:EXIT_TYPE]
 30420 000064D6 36A3[E202]              	mov	[SS:exit_code],AX
 30421 000064DA E82EB1                  	call	Get_User_Stack
 30422                                  
 30423                                  	;mov	ds,[si+14h]
 30424 000064DD 8E5C14                  	mov	DS,[SI+user_env.user_CS] ; set up old interrupts ;PBUGBUG
 30425 000064E0 31C0                    	xor	AX,AX
 30426 000064E2 8EC0                    	mov	ES,AX
 30427                                  	;mov	si,10
 30428 000064E4 BE0A00                  	mov	SI,SAVEXIT
 30429                                  	;mov	di,88h
 30430 000064E7 BF8800                  	mov	DI,addr_int_terminate
 30431 000064EA A5                      	movsw
 30432 000064EB A5                      	movsw
 30433 000064EC A5                      	movsw
 30434 000064ED A5                      	movsw
 30435 000064EE A5                      	movsw
 30436 000064EF A5                      	movsw
 30437 000064F0 E98EF4                  	jmp	reset_environment
 30438                                  
 30439                                  ; MSDOS 6.0
 30440                                  ;----------------------------------------------------------------------------
 30441                                  ;
 30442                                  ; fixexepatch will point to this is DOS loads low. 
 30443                                  ;
 30444                                  ;----------------------------------------------------------------------------
 30445                                  
 30446                                  ;retexepatch	proc	near
 30447                                  ;	
 30448                                  ;	ret
 30449                                  ;
 30450                                  ;retexepatch 	endp
 30451                                  
 30452                                  
 30453                                  ;============================================================================
 30454                                  ; ALLOC.ASM, MSDOS 6.0, 1991
 30455                                  ;============================================================================
 30456                                  ; 04/08/2018 - Retro DOS v3.0
 30457                                  
 30458                                  ;	TITLE ALLOC.ASM - memory arena manager	NAME Alloc
 30459                                  
 30460                                  ;**
 30461                                  ;	Microsoft Confidential
 30462                                  ;	Copyright (C) Microsoft Corporation 1991
 30463                                  ;	All Rights Reserved.
 30464                                  ;
 30465                                  ;	Memory related system calls and low level routines for MSDOS 2.X.
 30466                                  ;	I/O specs are defined in DISPATCH.
 30467                                  ;
 30468                                  ;	$ALLOC
 30469                                  ;	$SETBLOCK
 30470                                  ;	$DEALLOC
 30471                                  ;	$AllocOper
 30472                                  ;	arena_free_process
 30473                                  ;	arena_next
 30474                                  ;	check_signature
 30475                                  ;	Coalesce
 30476                                  ;
 30477                                  ;	Modification history:
 30478                                  ;
 30479                                  ;	    Created: ARR 30 March 1983
 30480                                  ;
 30481                                  ;	    Revision: M000 - added support for allocing UMBs. 7/9/90
 30482                                  ;		      M003 - added support for link/unlink UMBs from
 30483                                  ;			     DOS arena chain. 7/18/90
 30484                                  ;		      M009 - Added error returns invalid function and 
 30485                                  ;			     arena trashed in set link state call.
 30486                                  ;		      M010 - Release UMB arenas allocated to current PDB
 30487                                  ;			     if UMB_HEAD is initialized.
 30488                                  ;
 30489                                  ;		      M016 - MACE utilities mkeyrate.com version 1.0 
 30490                                  ;			     support. Please see under M009 in 
 30491                                  ;			     ..\inc\dossym.inc. 8/31/90.
 30492                                  ;
 30493                                  ;		      M061 - In GetLastArena, if linking in UMBs check to make
 30494                                  ;			     sure that umb_head arena is valid and also make
 30495                                  ;			     sure that the previous arena is pointing to 
 30496                                  ;			     umb_head.
 30497                                  ;
 30498                                  ;		      M064 - allow HIGH_ONLY bit to be set by a call to 
 30499                                  ;			     set allloc strategy.
 30500                                  ;			     use STRAT_MASK to mask out bits 6 & 7 of 
 30501                                  ;			     bx in AllocSetStrat.
 30502                                  ;
 30503                                  ;		      M068 - use a count value (A20OFF_COUNT) rather than
 30504                                  ;			     a bit to indicate to dos dispatcher to turn
 30505                                  ;			     a20 off before iret. See M016.
 30506                                  ;
 30507                                  
 30508                                  ;	BREAK	<memory allocation utility routines>
 30509                                  
 30510                                  
 30511                                  ; 15/04/2018 - Retro DOS v2.0
 30512                                  ;----------------------------------------------------------------------------
 30513                                  ; xenix memory calls for MSDOS
 30514                                  ;
 30515                                  ; CAUTION: The following routines rely on the fact that arena_signature and
 30516                                  ; arena_owner_system are all equal to zero and are contained in DI.
 30517                                  ;
 30518                                  ;INCLUDE DOSSEG.ASM
 30519                                  
 30520                                  ;CODE	SEGMENT BYTE PUBLIC  'CODE'
 30521                                  ;       ASSUME  SS:DOSGROUP,CS:DOSGROUP
 30522                                  
 30523                                  ;.xlist
 30524                                  ;.xcref
 30525                                  ;INCLUDE DOSSYM.ASM
 30526                                  ;INCLUDE DEVSYM.ASM
 30527                                  ;.cref
 30528                                  ;.list
 30529                                  
 30530                                  ;TITLE ALLOC.ASM - memory arena manager
 30531                                  ;NAME Alloc
 30532                                  
 30533                                  ;SUBTTL memory allocation utility routines
 30534                                  ;PAGE
 30535                                  ;
 30536                                  ; arena data
 30537                                  ;
 30538                                  ;       i_need  arena_head,WORD         ; seg address of start of arena
 30539                                  ;       i_need  CurrentPDB,WORD         ; current process data block addr
 30540                                  ;       i_need  FirstArena,WORD         ; first free block found
 30541                                  ;       i_need  BestArena,WORD          ; best free block found
 30542                                  ;       i_need  LastArena,WORD          ; last free block found
 30543                                  ;       i_need  AllocMethod,BYTE        ; how to alloc first(best)last
 30544                                  
 30545                                  ;**	Arena_Free_Process
 30546                                  ;----------------------------------------------------------------------------
 30547                                  ;	Free all arena blocks allocated to a prOcess
 30548                                  ;
 30549                                  ;	ENTRY	(bx) = PID of process
 30550                                  ;	EXIT	none
 30551                                  ;	USES	????? BUGBUG
 30552                                  ;----------------------------------------------------------------------------
 30553                                  
 30554                                  arena_free_process:
 30555                                  	; 04/08/2018 - Retro DOS v3.0
 30556 000064F3 36A1[2400]                      MOV	AX,[SS:arena_head]
 30557                                  arena_free_process_start:
 30558 000064F7 BF0000                  	MOV     DI,ARENA.SIGNATURE ; 0
 30559                                  	;MOV	AX,[SS:arena_head] ; 15/04/2018  
 30560 000064FA E81F00                          CALL    check_signature         ; ES <- AX, check for valid block
 30561                                  
 30562                                  arena_free_process_loop:
 30563                                          ;retc
 30564 000064FD 722C                            JC	SHORT AFP_RETN	; Retro DOS v2.0 - 05/03/2018
 30565 000064FF 06                      	PUSH    ES
 30566 00006500 1F                              POP     DS
 30567                                  	;cmp	[1],bx 
 30568 00006501 391E0100                        CMP     [ARENA.OWNER],BX	; is block owned by pid?
 30569 00006505 7504                            JNZ     SHORT arena_free_next	; no, skip to next
 30570                                  	; 20/05/2019
 30571                                  	;mov	[1],di
 30572 00006507 893E0100                        MOV     [ARENA.OWNER],DI	; yes... free him
 30573                                  
 30574                                  arena_free_next:
 30575                                  	;cmp	byte [di],5Ah ;'Z'
 30576 0000650B 803D5A                          CMP     BYTE [DI],arena_signature_end
 30577                                                                          ; end of road, Jack?
 30578                                          ;retz				; never come back no more
 30579 0000650E 741B                    	JZ	SHORT AFP_RETN  ;msdos 3.3 (& MSDOS 2.11)
 30580                                  	; MSDOS 6.0
 30581                                  	;jz	short arena_chk_umbs
 30582                                          
 30583 00006510 E80200                  	CALL    arena_next              ; next item in ES/AX carry set if trash
 30584 00006513 EBE8                            JMP     SHORT arena_free_process_loop
 30585                                  
 30586                                  	; MSDOS 6.0
 30587                                  ;arena_chk_umbs:			; M010 - Start
 30588                                  	;mov	ax,[umb_head]		; ax = umb_head
 30589                                  	;cmp	ax,0FFFFh		; Q: is umb_head initialized
 30590                                  	;je	short ret_label		; N: we're done
 30591                                  	;
 30592                                  	;mov	di,ds			; di = last arena
 30593                                  	;cmp	di,ax			; Q: is last arena above umb_head
 30594                                  	;jae	short ret_label		; Y: we've scanned umbs also. done.
 30595                                  	;jmp	short arena_free_process_start
 30596                                  					; M010 - End
 30597                                  
 30598                                  ;AFP_RETN:
 30599                                  ;	RETN
 30600                                  
 30601                                  ;	BREAK	<Arena Helper Routines>
 30602                                  
 30603                                  ;**	Arena_Next - Find Next item in Arena
 30604                                  ;----------------------------------------------------------------------------
 30605                                  ;	ENTRY	DS - pointer to block head
 30606                                  ;		(di) = 0
 30607                                  ;	EXIT	AX,ES - pointers to next head
 30608                                  ;		'C' set iff arena damaged
 30609                                  ;----------------------------------------------------------------------------
 30610                                  
 30611                                  arena_next:
 30612 00006515 8CD8                            MOV     AX,DS                   ; AX <- current block
 30613 00006517 03060300                        ADD     AX,[ARENA.SIZE]		; AX <- AX + current block length
 30614 0000651B 40                              INC     AX                      ; remember that header!
 30615                                  ;
 30616                                  ;       fall into check_signature and return
 30617                                  ;
 30618                                  ;       CALL    check_signature         ; ES <- AX, carry set if error
 30619                                  ;       RET
 30620                                  
 30621                                  ;**	Check_Signature - Check Memory Block Signature
 30622                                  ;----------------------------------------------------------------------------
 30623                                  ;	ENTRY	(AX) = address of block header
 30624                                  ;		(di) = 0
 30625                                  ;	EXIT	 ES = AX
 30626                                  ;		'C' clear if signature good
 30627                                  ;		'C' set if signature bad
 30628                                  ;	USES	ES, Flags
 30629                                  ;----------------------------------------------------------------------------
 30630                                  
 30631                                  check_signature:        
 30632                                  
 30633 0000651C 8EC0                    	MOV     ES,AX                   ; ES <- AX
 30634                                  	;cmp	byte [es:di],4Dh ; 'M'
 30635 0000651E 26803D4D                        CMP     BYTE [ES:DI],arena_signature_normal
 30636                                                                          ; IF next signature = not_end THEN
 30637 00006522 7407                            JZ      SHORT check_signature_ok ;   GOTO ok
 30638                                  	;cmp 	byte [es:di],5Ah ; 'Z'
 30639 00006524 26803D5A                        CMP     BYTE [ES:DI],arena_signature_end
 30640                                                                          ; IF next signature = end then
 30641 00006528 7401                            JZ      SHORT check_signature_ok ;   GOTO ok
 30642 0000652A F9                              STC                             ; set error
 30643                                  ;ret_label: ; MSDOS 6.0
 30644                                  AFP_RETN:
 30645                                   	;  Retro DOS v.20 - 05/03/2018
 30646                                  check_signature_ok:
 30647                                  COALESCE_RETN:
 30648 0000652B C3                      	RETN
 30649                                  
 30650                                  ;**	Coalesce - Combine free blocks ahead with current block
 30651                                  ;----------------------------------------------------------------------------
 30652                                  ;	Coalesce adds the block following the argument to the argument block,
 30653                                  ;	iff it's free.  Coalesce is usually used to join free blocks, but
 30654                                  ;	some callers (such as $setblock) use it to join a free block to it's
 30655                                  ;	preceeding allocated block.
 30656                                  ;
 30657                                  ;	ENTRY	(ds) = pointer to the head of a free block
 30658                                  ;		(di) = 0
 30659                                  ;	EXIT	'C' clear if OK
 30660                                  ;		  (ds) unchanged, this block updated
 30661                                  ;		  (ax) = address of next block, IFF not at end
 30662                                  ;		'C' set if arena trashed
 30663                                  ;	USES	(cx)
 30664                                  ;----------------------------------------------------------------------------
 30665                                          
 30666                                  Coalesce:
 30667                                  	;cmp	byte [di],5Ah ; 'Z'
 30668 0000652C 803D5A                  	CMP     BYTE [DI],arena_signature_end
 30669                                                                          ; IF current signature = END THEN
 30670                                          ;retz				;   GOTO ok
 30671 0000652F 74FA                            jz	short COALESCE_RETN
 30672 00006531 E8E1FF                  	CALL    arena_next              ; ES, AX <- next block, Carry set if error
 30673                                          ;retc				; IF no error THEN GOTO check
 30674 00006534 72F5                    	jc	short COALESCE_RETN
 30675                                  
 30676                                  coalesce_check:
 30677                                  	;cmp	[es:1],di
 30678 00006536 26393E0100                      CMP     [ES:ARENA.OWNER],DI
 30679                                          ;retnz				; IF next block isnt free THEN return
 30680 0000653B 75EE                            JNZ	SHORT COALESCE_RETN
 30681                                  	;mov	cx,[ES:3]
 30682 0000653D 268B0E0300              	MOV     CX,[ES:ARENA.SIZE]	; CX <- next block size
 30683 00006542 41                              INC     CX                      ; CX <- CX + 1 (for header size)
 30684                                          ;ADD	[3],CX
 30685 00006543 010E0300                	ADD     [ARENA.SIZE],CX		; current size <- current size + CX
 30686 00006547 268A0D                          MOV     CL,[ES:DI]              ; move up signature
 30687 0000654A 880D                            MOV     [DI],CL
 30688 0000654C EBDE                            JMP     SHORT Coalesce		; try again
 30689                                  
 30690                                  ; 04/08/2018 - Retro DOS v3.0
 30691                                  ; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 641Fh
 30692                                  
 30693                                  ;	BREAK  <$Alloc - allocate space in memory>
 30694                                  
 30695                                  ; MSDOS 6.0
 30696                                  ;----------------------------------------------------------------------------
 30697                                  ;**	$Alloc - Allocate Memory Space
 30698                                  ;
 30699                                  ;	$Alloc services the INT21 that allocates memory space to a program.
 30700                                  ;	Alloc returns a pointer to a free block of memory that
 30701                                  ;	has the requested size in paragraphs.
 30702                                  ;
 30703                                  ;	If the allocation strategy is HIGH_FIRST or HIGH_ONLY memory is 
 30704                                  ;	scanned from umb_head if not from arena_head. If the strategy is
 30705                                  ; 	HIGH_FIRST the scan is continued from arena_head if a block of 
 30706                                  ;	appropriate size is not found in the UMBs. If the strategy is 
 30707                                  ;	HIGH_FIRST+HIGH_ONLY only the UMBs are scanned for memory.
 30708                                  ;
 30709                                  ;	In either case if bit 0 of UmbFlag is not initialized then the scan
 30710                                  ;	starts from arena_head.
 30711                                  ;
 30712                                  ;	Assembler usage:
 30713                                  ;           MOV     BX,size
 30714                                  ;           MOV     AH,Alloc
 30715                                  ;           INT     21h
 30716                                  ;
 30717                                  ;	BUGBUG - a lot can be done to improve performance. We can set marks
 30718                                  ;	so that we start searching the arena at it's first non-trivial free
 30719                                  ;	block, we can peephole the code, etc. (We can move some subr calls
 30720                                  ;	inline, etc.) I assume that this is called rarely and that the arena
 30721                                  ;	doesn't have too many memory objects in it beyond the first free one.
 30722                                  ;	verify that this is true; if so, this can stay as is
 30723                                  ;
 30724                                  ;	ENTRY	(bx) = requested size, in bytes
 30725                                  ;		(DS) = (ES) = DOSGROUP
 30726                                  ;	EXIT	'C' clear if memory allocated
 30727                                  ;		  (ax:0) = address of requested memory
 30728                                  ;		'C' set if request failed
 30729                                  ;		  (AX) = error_not_enough_memory
 30730                                  ;		    (bx) = max size we could have allocated
 30731                                  ;		  (ax) = error_arena_trashed
 30732                                  ;	USES	All
 30733                                  ;----------------------------------------------------------------------------
 30734                                  
 30735                                  ; MSDOS 2.11 (& MSDOS 3.3)
 30736                                  ;----------------------------------------------------------------------------
 30737                                  ;SUBTTL $Alloc - allocate space in memory
 30738                                  ;
 30739                                  ;   Assembler usage:
 30740                                  ;           MOV     BX,size
 30741                                  ;           MOV     AH,Alloc
 30742                                  ;           INT     21h
 30743                                  ;         AX:0 is pointer to allocated memory
 30744                                  ;         BX is max size if not enough memory
 30745                                  ;
 30746                                  ;   Description:
 30747                                  ;           Alloc returns  a  pointer  to  a  free  block of
 30748                                  ;       memory that has the requested  size  in  paragraphs.
 30749                                  ;
 30750                                  ;   Error return:
 30751                                  ;           AX = error_not_enough_memory
 30752                                  ;              = error_arena_trashed
 30753                                  ;----------------------------------------------------------------------------
 30754                                  
 30755                                  _$ALLOC:
 30756                                  	; 04/08/2018 - Retro DOS v3.0
 30757                                  	;EnterCrit critMem
 30758 0000654E E81BBB                  	call	EcritMem ; MSDOS 3.3 & MSDOS 6.0
 30759                                  
 30760                                  	; MSDOS 6.0
 30761                                  	;mov	ax,[arena_head]
 30762                                  	;mov	[start_arena],ax	; assume LOW_FIRST
 30763                                  	;			
 30764                                  	;test	byte [AllocMethod],HIGH_FIRST+HIGH_ONLY
 30765                                  	;				; Q: should we start scanning from 
 30766                                  	;				;    UMB's
 30767                                  	;jz	short norm_alloc	; N: scan from arena_head
 30768                                  	;	
 30769                                  	;;cmp	word [umb_head],-1	; Q: Has umb_head been initialized
 30770                                  	;;je	short norm_alloc	; N: scan from arena_head
 30771                                  	;test	byte [UmbFlag],LINKSTATE ; Q: are umb's linked
 30772                                  	;jz	short norm_alloc	; N: scan from arena_head
 30773                                  	;
 30774                                  	;mov	ax,[umb_head]
 30775                                  	;mov	[start_arena],ax	; start_arena = umb_head
 30776                                  	;
 30777                                  					; M000 - end
 30778                                  ;norm_alloc:
 30779 00006551 31C0                            XOR     AX,AX
 30780 00006553 89C7                            MOV     DI,AX
 30781                                  	; 15/03/2018
 30782 00006555 36A3[EC02]                      MOV     [SS:FirstArena],AX	; init the options
 30783 00006559 36A3[EE02]                      MOV     [SS:BestArena],AX
 30784 0000655D 36A3[F002]                      MOV     [SS:LastArena],AX
 30785 00006561 50                              PUSH    AX                      ; alloc_max <- 0
 30786                                  	; 04/08/2018
 30787                                  start_scan:
 30788                                  	; MSDOS 6.0
 30789                                  	;mov	ax,[SS:start_arena]	; M000: AX <- beginning of arena
 30790                                  	;
 30791 00006562 36A1[2400]              	MOV     AX,[SS:arena_head]	; AX <- beginning of arena
 30792 00006566 E8B3FF                  	CALL    check_signature         ; ES <- AX, carry set if error
 30793 00006569 7212                            JC      SHORT alloc_err		; IF error THEN GOTO err
 30794                                  
 30795                                  alloc_scan:
 30796 0000656B 06                              PUSH    ES
 30797 0000656C 1F                              POP     DS                      ; DS <- ES
 30798 0000656D 393E0100                        CMP     [ARENA.OWNER],DI
 30799 00006571 742A                            JZ      SHORT alloc_free	; IF current block is free THEN examine
 30800                                  
 30801                                  alloc_next:
 30802                                  	; MSDOS 6.0			; M000 - start 
 30803                                  	;test	byte [UmbFlag],LINKSTATE ; Q: are umb's linked
 30804                                  	;jz	short norm_strat	; N: see if we reached last arena
 30805                                  	;
 30806                                  	;test	byte [AllocMethod],HIGH_FIRST
 30807                                  	;				; Q: is alloc strategy high_first
 30808                                  	;jz	short norm_strat	; N: see if we reached last arena
 30809                                  	;mov	ax,[start_arena]
 30810                                  	;cmp	ax,[arena_head]		; Q: did we start scan from 
 30811                                  					;    arena_head
 30812                                  	;jne	short norm_strat	; N: see if we reached last arena
 30813                                  	;mov	ax,ds			; ax = current block
 30814                                  	;cmp	ax,[umb_head]		; Q: check against umb_head 
 30815                                  	;jmp	short alloc_chk_end
 30816                                  
 30817                                  ;norm_strat:
 30818                                  	;cmp	byte [di],5Ah ; 'Z'
 30819 00006573 803D5A                          CMP     BYTE [DI],arena_signature_end
 30820                                                                          ; IF current block is last THEN
 30821 00006576 740E                            JZ      SHORT alloc_end		;   GOTO end
 30822 00006578 E89AFF                          CALL    arena_next              ; AX, ES <- next block, Carry set if error
 30823 0000657B 73EE                            JNC     SHORT alloc_scan	; IF no error THEN GOTO scan
 30824                                  
 30825                                  alloc_err:
 30826 0000657D 58                              POP     AX
 30827                                  
 30828                                  alloc_trashed:
 30829                                  	;LeaveCrit critMem
 30830 0000657E E8F3BA                  	call    LcritMem ; MSDOS 3.3 & MSDOS 6.0	
 30831                                          ;error	error_arena_trashed
 30832                                  	;mov	al,7
 30833 00006581 B007                    	MOV	AL,error_arena_trashed
 30834                                  alloc_errj:
 30835 00006583 E983B1                  	JMP	SYS_RET_ERR
 30836                                  
 30837                                  alloc_end:
 30838 00006586 36833E[EC02]00                  CMP	WORD [SS:FirstArena],0	; 15/03/2018
 30839 0000658C 756B                    	JNZ     SHORT alloc_do_split
 30840                                  
 30841                                  	; MSDOS 6.0
 30842                                  	;mov	ax,[arena_head]
 30843                                  	;cmp	ax,[start_arena]	; Q: started scanning from arena_head
 30844                                  	;je	short alloc_fail	; Y: not enough memory
 30845                                  	;				; N:
 30846                                  	;				; Q: is the alloc strat HIGH_ONLY
 30847                                  	;test 	byte [AllocMethod],HIGH_ONLY
 30848                                  	;jnz	short alloc_fail	; Y: return size of largest UMB
 30849                                  	;
 30850                                  	;mov	[start_arena],ax	; N: start scanning from arena_head
 30851                                  	;jmp	short start_scan
 30852                                  	;				; M000 - end
 30853                                  
 30854                                  alloc_fail:
 30855                                          ;invoke Get_User_Stack
 30856 0000658E E87AB0                          CALL	Get_User_Stack
 30857 00006591 5B                      	POP     BX
 30858                                          ;MOV	[SI].user_BX,BX
 30859                                  	;MOV	[SI+2],BX
 30860 00006592 895C02                  	mov	[SI+user_env.user_BX],bx
 30861                                  	;LeaveCrit critMem
 30862 00006595 E8DCBA                  	call    LcritMem ; MSDOS 3.3 & MSDOS 6.0
 30863                                  	;error	error_not_enough_memory
 30864                                  	;mov	al,8
 30865 00006598 B008                    	MOV	AL,error_not_enough_memory
 30866                                  	;jmp	short alloc_errj
 30867 0000659A E96CB1                  	JMP	SYS_RET_ERR
 30868                                  
 30869                                  alloc_free:
 30870 0000659D E88CFF                          CALL    Coalesce		; add following free block to current
 30871 000065A0 72DB                            JC	SHORT alloc_err		; IF error THEN GOTO err
 30872 000065A2 8B0E0300                        MOV     CX,[ARENA.SIZE]
 30873 000065A6 5A                              POP     DX                      ; check for max found size
 30874 000065A7 39D1                            CMP     CX,DX
 30875 000065A9 7602                            JNA     SHORT alloc_test
 30876 000065AB 89CA                            MOV     DX,CX
 30877                                  
 30878                                  alloc_test:
 30879 000065AD 52                              PUSH    DX
 30880 000065AE 39CB                            CMP     BX,CX                   ; IF BX > size of current block THEN
 30881 000065B0 77C1                            JA      SHORT alloc_next	;   GOTO next
 30882                                  
 30883                                  	; 15/03/2018
 30884 000065B2 36833E[EC02]00                  CMP     WORD [SS:FirstArena],0
 30885 000065B8 7505                    	JNZ	SHORT alloc_best
 30886 000065BA 368C1E[EC02]                    MOV     [SS:FirstArena],DS	; save first one found	
 30887                                  alloc_best:
 30888 000065BF 36833E[EE02]00                  CMP     WORD [SS:BestArena],0
 30889 000065C5 740E                            JZ      SHORT alloc_make_best	; initial best
 30890 000065C7 06                              PUSH	ES
 30891 000065C8 368E06[EE02]                    MOV     ES,[SS:BestArena]
 30892 000065CD 26390E0300                      CMP     [ES:ARENA.SIZE],CX	; is size of best larger than found?
 30893 000065D2 07                              POP	ES
 30894 000065D3 7605                            JBE     SHORT alloc_last
 30895                                  alloc_make_best:
 30896 000065D5 368C1E[EE02]                    MOV     [SS:BestArena],DS	; assign best
 30897                                  alloc_last:
 30898 000065DA 368C1E[F002]                    MOV     [SS:LastArena],DS 	; assign last
 30899 000065DF EB92                            JMP     SHORT alloc_next
 30900                                  ;
 30901                                  ; split the block high
 30902                                  ;
 30903                                  alloc_do_split_high:
 30904 000065E1 368E1E[F002]                    MOV     DS,[SS:LastArena]
 30905 000065E6 8B0E0300                        MOV     CX,[ARENA.SIZE]
 30906 000065EA 29D9                            SUB     CX,BX
 30907 000065EC 8CDA                            MOV     DX,DS
 30908 000065EE 7444                            JE      SHORT alloc_set_owner	; sizes are equal, no split
 30909 000065F0 01CA                            ADD     DX,CX                   ; point to next block
 30910 000065F2 8EC2                            MOV     ES,DX                   ; no decrement!
 30911 000065F4 49                              DEC     CX
 30912 000065F5 87D9                            XCHG    BX,CX                   ; bx has size of lower block
 30913 000065F7 EB26                            JMP     SHORT alloc_set_sizes	; cx has upper (requested) size
 30914                                  ;
 30915                                  ; we have scanned memory and have found all appropriate blocks
 30916                                  ; check for the type of allocation desired; first and best are identical
 30917                                  ; last must be split high
 30918                                  ;
 30919                                  alloc_do_split:
 30920                                  	; 04/08/2018
 30921                                  	; MSDOS 6.0			; M000 - start
 30922                                  	;xor	cx,cx
 30923                                  	;mov	cl,[AllocMethod]
 30924                                  	;and	cx,STRAT_MASK		; mask off bit 7
 30925                                  	;cmp	cx,BEST_FIT		; Q; is the alloc strategy best_fit
 30926                                  
 30927                                  	; 15/03/2018
 30928                                          ;CMP     BYTE [SS:AllocMethod], 1
 30929                                  	; 04/08/2018
 30930 000065F9 36803E[B002]01          	CMP     BYTE [SS:AllocMethod],BEST_FIT
 30931 000065FF 77E0                            JA      SHORT alloc_do_split_high
 30932 00006601 368E1E[EC02]                    MOV     DS,[SS:FirstArena]        
 30933 00006606 7205                    	JB      SHORT alloc_get_size
 30934 00006608 368E1E[EE02]            	MOV     DS,[SS:BestArena]
 30935                                  
 30936                                  alloc_get_size:
 30937 0000660D 8B0E0300                        MOV     CX,[ARENA.SIZE]
 30938 00006611 29D9                            SUB     CX,BX                   ; get room left over
 30939 00006613 8CD8                            MOV     AX,DS
 30940 00006615 89C2                            MOV     DX,AX                   ; save for owner setting
 30941 00006617 741B                            JE      SHORT alloc_set_owner	; IF BX = size THEN (don't split)
 30942 00006619 01D8                            ADD     AX,BX
 30943 0000661B 40                              INC     AX                      ; remember the header
 30944 0000661C 8EC0                            MOV     ES,AX                   ; ES <- DS + BX (new header location)
 30945 0000661E 49                              DEC     CX                      ; CX <- size of split block
 30946                                  alloc_set_sizes:
 30947 0000661F 891E0300                        MOV     [ARENA.SIZE],BX		; current size <- BX
 30948 00006623 26890E0300                      MOV     [ES:ARENA.SIZE],CX      ; split size <- CX
 30949                                  	;mov	bl,4Dh ; 'M'
 30950 00006628 B34D                            MOV     BL,arena_signature_normal
 30951 0000662A 861D                            XCHG    BL,[DI]			; current signature <- 4D
 30952 0000662C 26881D                          MOV     [ES:DI],BL		; new block sig <- old block sig
 30953 0000662F 26893E0100                      MOV     [ES:ARENA.OWNER],DI
 30954                                  
 30955                                  alloc_set_owner:
 30956 00006634 8EDA                            MOV     DS,DX
 30957 00006636 36A1[DE02]                      MOV     AX,[SS:CurrentPDB] ; 15/03/2018
 30958 0000663A A30100                          MOV     [ARENA.OWNER],AX
 30959 0000663D 8CD8                            MOV     AX,DS
 30960 0000663F 40                              INC     AX
 30961 00006640 5B                              POP     BX
 30962                                  	;LeaveCrit critMem
 30963 00006641 E830BA                  	call    LcritMem ; MSDOS 3.3 & MSDOS 6.0
 30964                                          ;transfer SYS_RET_OK
 30965 00006644 E9B6B0                  	JMP	SYS_RET_OK
 30966                                  
 30967                                  
 30968                                  ;	BREAK $SETBLOCK - change size of an allocated block (if possible)
 30969                                  
 30970                                  ; MSDOS 6.0
 30971                                  ;----------------------------------------------------------------------------
 30972                                  ;**	$SETBLOCK - Change size of an Alocated Block
 30973                                  ;
 30974                                  ;	Setblock changes the size of an allocated block.  First, we coalesce
 30975                                  ;	any following free space onto this block; then we try to trim the
 30976                                  ;	block down to the size requested.
 30977                                  ;
 30978                                  ;	Note that if the guy wants to grow the block but that growth fails,
 30979                                  ;	we still go ahead and coalesce any trailing free blocks onto it.
 30980                                  ;	Thus the maximum-size-possible value that we return has already
 30981                                  ;	been allocated!  This is a bug, dare we fix it?  BUGBUG
 30982                                  ;
 30983                                  ;	NOTE - $SETBLOCK is in bed with $ALLOC and jumps into $ALLOC to
 30984                                  ;		finish it's work.  FOr this reason we build the allocsf
 30985                                  ;		structure on the frame, to make us compatible with $ALLOCs
 30986                                  ;		code.
 30987                                  ;
 30988                                  ;	ENTRY	(es) = segment of old block
 30989                                  ;		(bx) = newsize
 30990                                  ;		(ah) = SETBLOCK
 30991                                  ;
 30992                                  ;	EXIT	'C' clear if OK
 30993                                  ;		'C' set if error
 30994                                  ;		  (ax) = error_invalid_block
 30995                                  ;		       = error_arena_trashed
 30996                                  ;		       = error_not_enough_memory
 30997                                  ;		       = error_invalid_function
 30998                                  ;		  (bx) = maximum size possible, iff (ax) = error_not_enough_memory
 30999                                  ;	USES	???? BUGBUG
 31000                                  ;----------------------------------------------------------------------------
 31001                                  
 31002                                  ; MSDOS 2.11 (& MSDOS 3.3)
 31003                                  ;----------------------------------------------------------------------------
 31004                                  ;SUBTTL $SETBLOCK - change size of an allocated block (if possible)
 31005                                  ;
 31006                                  ;   Assembler usage:
 31007                                  ;           MOV     ES,block
 31008                                  ;           MOV     BX,newsize
 31009                                  ;           MOV     AH,setblock
 31010                                  ;           INT     21h
 31011                                  ;         if setblock fails for growing, BX will have the maximum
 31012                                  ;         size possible
 31013                                  ;   Error return:
 31014                                  ;           AX = error_invalid_block
 31015                                  ;              = error_arena_trashed
 31016                                  ;              = error_not_enough_memory
 31017                                  ;              = error_invalid_function
 31018                                  ;----------------------------------------------------------------------------
 31019                                  
 31020                                  _$SETBLOCK:        
 31021                                  	; 04/08/2018 - Retro DOS v3.0
 31022                                  	;EnterCrit   critMem
 31023 00006647 E822BA                  	call	EcritMem ; MSDOS 3.3 & MSDOS 6.0
 31024                                  
 31025 0000664A BF0000                  	MOV     DI,ARENA.SIGNATURE
 31026 0000664D 8CC0                            MOV     AX,ES
 31027 0000664F 48                              DEC     AX
 31028 00006650 E8C9FE                          CALL    check_signature
 31029 00006653 7303                            JNC     SHORT setblock_grab
 31030                                  
 31031                                  setblock_bad:
 31032 00006655 E926FF                          JMP     alloc_trashed
 31033                                  
 31034                                  setblock_grab:
 31035 00006658 8ED8                            MOV     DS,AX
 31036 0000665A E8CFFE                          CALL    Coalesce
 31037 0000665D 72F6                            JC      SHORT setblock_bad
 31038 0000665F 8B0E0300                        MOV     CX,[ARENA.SIZE]
 31039 00006663 51                              PUSH    CX
 31040 00006664 39CB                            CMP     BX,CX
 31041 00006666 76A5                            JBE     SHORT alloc_get_size
 31042 00006668 E923FF                          JMP     alloc_fail
 31043                                  
 31044                                  ;	BREAK $DEALLOC - free previously allocated piece of memory
 31045                                  
 31046                                  ; MSDOS 6.0
 31047                                  ;----------------------------------------------------------------------------
 31048                                  ;**	$DEALLOC - Free Heap Memory
 31049                                  ;
 31050                                  ;	ENTRY	(es) = address of item
 31051                                  ;
 31052                                  ;	EXIT	'C' clear of OK
 31053                                  ;		'C' set if error
 31054                                  ;		  (AX) = error_invalid_block
 31055                                  ;	USES	???? BUGBUG
 31056                                  
 31057                                  ; MSDOS 2.11 (& MSDOS 3.3)
 31058                                  ;----------------------------------------------------------------------------
 31059                                  ;SUBTTL $DEALLOC - free previously allocated piece of memory
 31060                                  ;
 31061                                  ;   Assembler usage:
 31062                                  ;           MOV     ES,block
 31063                                  ;           MOV     AH,dealloc
 31064                                  ;           INT     21h
 31065                                  ;
 31066                                  ;   Error return:
 31067                                  ;           AX = error_invalid_block
 31068                                  ;              = error_arena_trashed
 31069                                  ;---------------------------------------------------------------------------- 
 31070                                  
 31071                                  _$DEALLOC:    
 31072                                  	; 04/08/2018 - Retro DOS v3.0
 31073                                  	;EnterCrit   critMem
 31074 0000666B E8FEB9                  	call	EcritMem ; MSDOS 3.3 & MSDOS 6.0
 31075                                  
 31076                                  	; MSDOS 6.0			; M016, M068 - Start
 31077                                  	;test	byte [DOS_FLAG],EXECA20OFF
 31078                                  					; Q: was the previous call an int 21
 31079                                  					;    exec call
 31080                                  	;jz	short deallocate	; N: continue
 31081                                  	;cmp	byte [A20OFF_COUNT], 0	; Q: is count 0
 31082                                  	;jne	short deallocate	; N: continue
 31083                                  	;mov	byte [A20OFF_COUNT], 1	; Y: set count to 1
 31084                                  ;deallocate:				; M016, M068 - End
 31085                                      
 31086 0000666E BF0000                  	MOV     DI,ARENA.SIGNATURE ; = 0
 31087 00006671 8CC0                            MOV     AX,ES
 31088 00006673 48                              DEC     AX
 31089 00006674 E8A5FE                          CALL    check_signature
 31090 00006677 720B                            JC      SHORT dealloc_err
 31091 00006679 26893E0100                      MOV     [ES:ARENA.OWNER],DI
 31092                                  	;LeaveCrit critMem
 31093 0000667E E8F3B9                  	call    LcritMem ; MSDOS 3.3 & MSDOS 6.0
 31094                                          ;transfer SYS_RET_OK
 31095 00006681 E979B0                  	JMP	SYS_RET_OK
 31096                                  
 31097                                  dealloc_err:
 31098                                  	;LeaveCrit critMem
 31099 00006684 E8EDB9                  	call    LcritMem ; MSDOS 3.3 & MSDOS 6.0
 31100                                          ;error	error_invalid_block
 31101                                  	;mov	al,9
 31102 00006687 B009                    	MOV	AL,error_invalid_block
 31103 00006689 E97DB0                  	JMP	SYS_RET_ERR
 31104                                  
 31105                                  ;	BREAK $AllocOper - get/set allocation mechanism
 31106                                  
 31107                                  ; MSDOS 6.0
 31108                                  ;----------------------------------------------------------------------------
 31109                                  ;**	$AllocOper - Get/Set Allocation Mechanism
 31110                                  ;
 31111                                  ;	Assembler usage:
 31112                                  ;           MOV     AH,AllocOper
 31113                                  ;           MOV     BX,method
 31114                                  ;           MOV     AL,func
 31115                                  ;           INT     21h
 31116                                  ;
 31117                                  ;	ENTRY	
 31118                                  ;		(al) = 0
 31119                                  ;		  Get allocation Strategy in (ax)
 31120                                  ;
 31121                                  ;		(al) = 1, (bx) = method = zw0000xy
 31122                                  ;		  Set allocation strategy.
 31123                                  ;		   w  = 1  => HIGH_ONLY
 31124                                  ;		   z  = 1  => HIGH_FIRST
 31125                                  ;		   xy = 00 => FIRST_FIT
 31126                                  ;		      = 01 => BEST_FIT
 31127                                  ;		      = 10 => LAST_FIT
 31128                                  ;
 31129                                  ;		(al) = 2
 31130                                  ;		  Get UMB link state in (al)
 31131                                  ;
 31132                                  ;		(al) = 3
 31133                                  ;		  Set UMB link state
 31134                                  ;		   (bx) = 0 => Unlink UMBs
 31135                                  ;		   (bx) = 1 => Link UMBs
 31136                                  ;
 31137                                  ;
 31138                                  ;	EXIT	'C' clear if OK
 31139                                  ;
 31140                                  ;		 if (al) = 0
 31141                                  ;		  (ax) = existing method
 31142                                  ;		 if (al) = 1
 31143                                  ;		  Sets allocation strategy
 31144                                  ;		 if (al) = 2
 31145                                  ;		  (al) = 0 => UMBs not linked
 31146                                  ;		  (al) = 1 => UMBs linked in
 31147                                  ;		 if (al) = 3
 31148                                  ;		  Links/Unlinks the UMBs into DOS chain
 31149                                  ;
 31150                                  ;		'C' set if error
 31151                                  ;		  AX = error_invalid_function
 31152                                  ;
 31153                                  ;	Rev. M000 - added support for HIGH_FIRST in (al) = 1. 7/9/90
 31154                                  ; 	Rev. M003 - added functions (al) = 2 and (al) = 3. 7/18/90
 31155                                  ;	Rev. M009 - (al) = 3 will return 'invalid function' in ax if
 31156                                  ;		    umbhead has'nt been initialized by sysinit and 'trashed
 31157                                  ;		    arena' if an arena sig is damaged.
 31158                                  ;----------------------------------------------------------------------------
 31159                                  
 31160                                  ; MSDOS 2.11 (& MSDOS 3.3)
 31161                                  ;----------------------------------------------------------------------------
 31162                                  ;SUBTTL $AllocOper - get/set allocation mechanism
 31163                                  ;
 31164                                  ;   Assembler usage:
 31165                                  ;           MOV     AH,AllocOper
 31166                                  ;           MOV     BX,method
 31167                                  ;           MOV     AL,func
 31168                                  ;           INT     21h
 31169                                  ;
 31170                                  ;   Error return:
 31171                                  ;           AX = error_invalid_function
 31172                                  ;----------------------------------------------------------------------------
 31173                                  
 31174                                  _$ALLOCOPER:
 31175                                  	; MSDOS 6.0
 31176                                  	;or	al, al
 31177                                  	;jz	short AllocGetStrat
 31178                                  	;cmp	al, 1
 31179                                  	;jz	short AllocSetStrat
 31180                                  	;cmp	al, 2
 31181                                  	;jz	short AllocGetLink
 31182                                  	;cmp	al, 3
 31183                                  	;jz	short AllocSetLink
 31184                                  
 31185                                  	; 15/04/2018
 31186 0000668C 3C01                    	CMP     AL,1
 31187 0000668E 720D                            JB      SHORT AllocOperGet
 31188 00006690 7414                            JZ      SHORT AllocOperSet
 31189                                  
 31190                                  AllocOperError:
 31191                                  	; 04/08/2018 - Retro DOS v3.0
 31192                                  	; MSDOS 3.3 (& MSDOS 6.0)	; Extended Error Locus	
 31193                                  	;mov	byte [ss:EXTERR_LOCUS],5
 31194 00006692 36C606[D102]05                  MOV     byte [SS:EXTERR_LOCUS],errLOC_Mem
 31195                                  	;error	error_invalid_function
 31196                                  	;mov	al,1
 31197 00006698 B001                    	MOV	AL,error_invalid_function
 31198                                  AllocOperErrj:
 31199 0000669A E96CB0                  	JMP	SYS_RET_ERR
 31200                                  
 31201                                  ;AllocArenaError:
 31202                                  	; MSDOS 6.0
 31203                                  	;MOV     byte [SS:EXTERR_LOCUS],errLOC_Mem
 31204                                  	;				; M009: Extended Error Locus
 31205                                  	;;error   error_arena_trashed	; M009:
 31206                                  	;MOV	AL,error_arena_trashed
 31207                                  	;;JMP	SYS_RET_ERR
 31208                                  	;jmp	short AllocOperErrj
 31209                                  
 31210                                  ;AllocGetStrat: 
 31211                                  	; MSDOS 6.0
 31212                                  AllocOperGet:
 31213 0000669D 36A0[B002]                      MOV     AL,[SS:AllocMethod]
 31214 000066A1 30E4                            XOR     AH,AH
 31215                                          ;transfer SYS_RET_OK
 31216 000066A3 E957B0                  	JMP	SYS_RET_OK
 31217                                  
 31218                                  ;AllocSetStrat: 
 31219                                  	; MSDOS 6.0
 31220                                  	;push	bx			; M000 - start
 31221                                  	;and	bx,STRAT_MASK 		; M064: mask off bit 6 & 7
 31222                                  	;cmp	bx,2			; BX must be 0-2
 31223                                  	;pop	bx			; M000 - end
 31224                                  	;ja	short AllocOperError
 31225                                  
 31226                                  AllocOperSet:
 31227 000066A6 36881E[B002]                    MOV     [SS:AllocMethod],BL
 31228                                          ;transfer SYS_RET_OK
 31229 000066AB E94FB0                  	JMP	SYS_RET_OK
 31230                                  
 31231                                  ;AllocGetLink:
 31232                                  	; MSDOS 6.0
 31233                                  	;mov	al,[UmbFlag]		; return link state in al
 31234                                  	;and 	al,LINKSTATE		
 31235                                  	;;transfer SYS_RET_OK
 31236                                  	;jmp	SYS_RET_OK
 31237                                  
 31238                                  ;AllocSetLink:
 31239                                  	; MSDOS 6.0			; M009 - start
 31240                                  	;mov	cx,[umb_head]		; cx = umb_head
 31241                                  	;cmp	cx,0FFFFh		; Q: has umb_head been initialized
 31242                                  	;je	short AllocOperError	; N: error
 31243                                  	;				; Y: continue
 31244                                  	;				; M009 - end
 31245                                  	;cmp	bx,1			
 31246                                  	;jb	short UnlinkUmbs
 31247                                  	;jz	short LinkUmbs
 31248                                  	;
 31249                                  	;jmp	short AllocOperError
 31250                                  	;
 31251                                  ;UnlinkUmbs:
 31252                                  	;test	byte[UmbFlag],LINKSTATE	; Q: umbs unlinked?
 31253                                  	;jz	short unlinked		; Y: return 
 31254                                  	;
 31255                                  	;call	GetLastArena		; get arena before umb_head in DS
 31256                                  	;jc	short AllocArenaError	; M009: arena trashed
 31257                                  	;
 31258                                  	;				; make it last
 31259                                  	;mov	byte [0],arena_signature_end
 31260                                  	;
 31261                                  	;and	byte [UmbFlag],~LINKSTATE ; indicate unlink'd state in umbflag
 31262                                  	;
 31263                                  ;unlinked:
 31264                                  	;;transfer SYS_RET_OK
 31265                                  	;jmp	SYS_RET_OK
 31266                                  
 31267                                  ;LinkUmbs:
 31268                                  	;test	byte [UmbFlag],LINKSTATE ; Q: umbs linked?
 31269                                  	;jnz	short linked		; Y: return
 31270                                  	;
 31271                                  	;call	GetLastArena		; get arena before umb_head
 31272                                  	;jc	short AllocArenaError	; M009: arena trashed
 31273                                  	;
 31274                                  	;				; make it normal. M061: ds points to
 31275                                  	;				; arena before umb_head
 31276                                  	;mov	byte [0],arena_signature_normal
 31277                                  	;
 31278                                  	;or	byte [UmbFlag],LINKSTATE ; indicate link'd state in umbflag
 31279                                  ;linked:
 31280                                  	;;transfer SYS_RET_OK
 31281                                  	;jmp	SYS_RET_OK
 31282                                  
 31283                                  ; MSDOS 6.0
 31284                                  ;--------------------------------------------------------------------------
 31285                                  ; Procedure Name : GetLastArena		-  M003
 31286                                  ;
 31287                                  ; Inputs	 : cx = umb_head
 31288                                  ;
 31289                                  ;
 31290                                  ; Outputs	 : If UMBs are linked
 31291                                  ;			ES = umb_head
 31292                                  ;			DS = arena before umb_head
 31293                                  ;		   else
 31294                                  ;			DS = last arena
 31295                                  ;			ES = next arena. will be umb_head if NC.
 31296                                  ;
 31297                                  ;		   CY if error
 31298                                  ;
 31299                                  ; Uses		 : DS, ES, DI, BX
 31300                                  ;--------------------------------------------------------------------------
 31301                                  	
 31302                                  ;Procedure	GetLastArena, NEAR
 31303                                  ;
 31304                                  ;	push	ax			; save ax
 31305                                  ;
 31306                                  ;	mov	ax, [arena_head]
 31307                                  ;	mov	es, ax			; es = arena_head
 31308                                  ;	xor	di, di
 31309                                  ;
 31310                                  ;	cmp     byte ptr es:[di],arena_signature_end
 31311                                  ;					; Q: is this the last arena
 31312                                  ;	je	GLA_done		; Y: return last arena in ES		
 31313                                  ;					
 31314                                  ;
 31315                                  ;GLA_next:
 31316                                  ;	mov	ds, ax
 31317                                  ;	call	arena_next		; ax, es -> next arena
 31318                                  ;	jc	GLA_err
 31319                                  ;
 31320                                  ;	test	[UmbFlag], LINKSTATE	; Q: are UMBs linked
 31321                                  ;	jnz	GLA_chkumb		; Y: terminating condition is 
 31322                                  ;					;    umb_head
 31323                                  ;					; N: terminating condition is 05Ah
 31324                                  ;
 31325                                  ;	cmp     byte ptr es:[di],arena_signature_end
 31326                                  ;					; Q: is this the last arena
 31327                                  ;	jmp	short @f
 31328                                  ;GLA_chkumb:
 31329                                  ;	cmp	ax, cx			; Q: is this umb_head
 31330                                  ;@@:
 31331                                  ;	jne	GLA_next		; N: get next arena
 31332                                  ;
 31333                                  ;GLA_done:
 31334                                  ;					; M061 - Start
 31335                                  ;	test	[UmbFlag], LINKSTATE	; Q: are UMBs linked
 31336                                  ;	jnz	GLA_ret			; Y: we're done
 31337                                  ;					; N: let us confirm that the next 
 31338                                  ;					;    arena is umb_head
 31339                                  ;	mov	ds, ax
 31340                                  ;	call	arena_next		; ax, es -> next arena
 31341                                  ;	jc	GLA_err
 31342                                  ;	cmp	ax, cx			; Q: is this umb_head
 31343                                  ;	jne	GLA_err			; N: error
 31344                                  ;					; M061 - End
 31345                                  ;
 31346                                  ;GLA_ret:				
 31347                                  ;	clc
 31348                                  ;	pop	ax			; M061
 31349                                  ;	ret				; M061
 31350                                  ;
 31351                                  ;GLA_err:
 31352                                  ;	stc				; M061
 31353                                  ;	pop	ax
 31354                                  ;	ret
 31355                                  ;
 31356                                  ;EndProc GetLastArena
 31357                                  
 31358                                  ;============================================================================
 31359                                  ; SRVCALL.ASM, MSDOS 6.0, 1991
 31360                                  ;============================================================================
 31361                                  ; 04/08/2018 - Retro DOS v3.0
 31362                                  
 31363                                  ;	TITLE SRVCALL - Server DOS call
 31364                                  ;	NAME  SRVCALL
 31365                                  
 31366                                  ;**	SRVCALL.ASM - Server DOS call functions
 31367                                  ;
 31368                                  ;
 31369                                  ;	$ServerCall
 31370                                  ;
 31371                                  ;	Modification history:
 31372                                  ;
 31373                                  ;	    Created: ARR 08 August 1983
 31374                                  
 31375                                  ;AsmVars <Installed>
 31376                                  
 31377                                  ;include dpl.asm
 31378                                  
 31379                                  ;Installed = TRUE
 31380                                  
 31381                                  ;BREAK <ServerCall -- Server DOS call>
 31382                                  ;----------------------------------------------------------------------------
 31383                                  ;
 31384                                  ; Procedure Name : $ServerCall
 31385                                  ;
 31386                                  ; Inputs:
 31387                                  ;	DS:DX -> DPL  (except calls 7,8,9)
 31388                                  ; Function:
 31389                                  ;	AL=0	Server DOS call
 31390                                  ;	AL=1	Commit All files
 31391                                  ;	AL=2	Close file by name (SHARING LOADED ONLY) DS:DX in DPL -> name
 31392                                  ;	AL=3	Close all files for DPL_UID
 31393                                  ;	AL=4	Close all files for DPL_UID/PID_PID
 31394                                  ;	AL=5	Get open file list entry
 31395                                  ;		    IN: BX File Index
 31396                                  ;			CX User Index
 31397                                  ;		    OUT:ES:DI -> Name
 31398                                  ;			BX = UID
 31399                                  ;		    CX = # locked blocks held by this UID
 31400                                  ;	AL=6	Get DOS data area
 31401                                  ;		    OUT: DS:SI -> Start
 31402                                  ;			CX size in bytes of swap if indos
 31403                                  ;			DX size in bytes of swap always
 31404                                  ;	AL=7	Get truncate flag
 31405                                  ;	AL=8	Set truncate flag
 31406                                  ;	AL=9	Close all spool files
 31407                                  ;	AL=10	SetExtendedError
 31408                                  ;
 31409                                  ;----------------------------------------------------------------------------
 31410                                  
 31411                                  _$ServerCall:
 31412                                  	; 05/08/2018 - Retro DOS v3.0
 31413                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 657Bh
 31414 000066AE 3C07                    	CMP	AL,7
 31415 000066B0 7204                    	JB	short SET_STUFF
 31416 000066B2 3C09                    	CMP	AL,9
 31417 000066B4 7612                    	JBE	short NO_SET_ID		; No DPL on calls 7,8,9
 31418                                  SET_STUFF:
 31419 000066B6 89D6                    	MOV	SI,DX			; Point to DPL with DS:SI
 31420                                  	;mov	bx,[si+12h]
 31421 000066B8 8B5C12                  	MOV	BX,[SI+DPL.UID]
 31422                                  
 31423                                  	; MSDOS 6.0
 31424                                  ;SR;
 31425                                  ; WIN386 updates the USER_ID itself. If WIN386 is present we skip the updating
 31426                                  ; of USER_ID
 31427                                  ;
 31428                                  	;test	byte [SS:IsWin386],1
 31429                                  	;jnz	short skip_win386
 31430                                  
 31431                                  ;hkn; SS override for user_id and proc_id
 31432                                  	; 15/08/2018
 31433 000066BB 36891E[EA02]            	MOV	[SS:USER_ID],BX		; Set UID
 31434                                  
 31435                                  ;skip_win386:
 31436                                  
 31437 000066C0 8B5C14                  	MOV	BX,[SI+DPL.PID]
 31438 000066C3 36891E[E802]            	MOV	[SS:PROC_ID],BX		; Set process ID
 31439                                  NO_SET_ID:
 31440 000066C8 36FF36[3A14]            	PUSH	word [SS:SERVERLEAVE]	; push return address
 31441 000066CD 36FF36[3814]            	PUSH	word [SS:SERVERTAB]	; push table address
 31442 000066D2 50                      	PUSH	AX
 31443 000066D3 E8CDB8                  	call	TableDispatch
 31444                                  
 31445                                  ;hkn; SS override
 31446                                  	;mov 	byte [SS:EXETERR_LOCUS],1
 31447 000066D6 36C606[D102]01          	MOV	byte [SS:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 31448                                  	;error	error_invalid_function
 31449                                  	;mov	al,1
 31450 000066DC B001                    	MOV	AL,error_invalid_function
 31451                                  servercall_error:
 31452 000066DE E928B0                  	JMP	SYS_RET_ERR
 31453                                  
 31454                                  SERVERRETURN:
 31455 000066E1 C3                      	retn
 31456                                  
 31457                                  ; Commit - iterate through the open file list and make sure that the
 31458                                  ; directory entries are correctly updated.
 31459                                  
 31460                                  COMMIT_ALL:
 31461 000066E2 31DB                    	XOR	BX,BX			;   for (i=0; ThisSFT=getSFT(i); i++)
 31462 000066E4 16                      	push	ss
 31463 000066E5 1F                      	pop	ds
 31464 000066E6 E883B9                  	call	EcritSFT		; Gonna scan SFT cache, lock it down
 31465                                  CommitLoop:
 31466 000066E9 53                      	push	bx
 31467 000066EA E82501                  	call	SFFromSFN
 31468 000066ED 7223                    	JC	short CommitDone
 31469 000066EF 26833D00                	cmp	word [es:di],0
 31470                                  	;CMP	word [ES:DI+SF_ENTRY.sf_Ref_Count],0
 31471                                  					; if (ThisSFT->refcount != 0)
 31472 000066F3 7419                    	JZ	short CommitNext
 31473                                  	;cmp	word [es:di],0FFFFh ; -1
 31474 000066F5 26833DFF                	cmp	word [ES:DI],sf_busy
 31475                                  	;CMP	word [ES:DI+SF_ENTRY.sf_Ref_Count],sf_busy  
 31476                                  					; BUSY SFTs have god knows what
 31477 000066F9 7413                    	JZ	short CommitNext	;   in them.
 31478 000066FB 26F745050080            	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 31479 00006701 750B                    	JNZ	short CommitNext	;  Skip Network SFTs so the SERVER
 31480                                  					;	doesn't deadlock
 31481 00006703 893E[3605]              	MOV	[THISSFT],DI
 31482 00006707 8C06[3805]              	MOV	[THISSFT+2],ES
 31483 0000670B E8B1D4                  	call	DOS_COMMIT		;	DOSCommit ();
 31484                                  CommitNext:
 31485 0000670E 5B                      	pop	bx
 31486 0000670F 43                      	INC	BX
 31487 00006710 EBD7                    	JMP	short CommitLoop
 31488                                  CommitDone:
 31489 00006712 E85FB9                  	call	LcritSFT
 31490 00006715 5B                      	pop	bx
 31491 00006716 E9E4AF                  	jmp	SYS_RET_OK
 31492                                  
 31493                                  CLOSE_NAME:
 31494                                  
 31495                                  ;if installed
 31496                                  
 31497                                  ;hkn; SS override
 31498 00006719 36FF1E[7000]            	Call	far [SS:JShare+(5*4)] ; 5 = MFTcloN
 31499                                  ;else
 31500                                  ;	Call	MFTcloN
 31501                                  ;endif
 31502                                  
 31503                                  CheckReturns:
 31504 0000671E 7203                    	JC	short func_err
 31505 00006720 E9DAAF                  	jmp	SYS_RET_OK
 31506                                  func_err:
 31507                                  	;transfer SYS_RET_ERR
 31508                                  	;jmp	SYS_RET_ERR
 31509 00006723 EBB9                    	jmp	short servercall_error
 31510                                  
 31511                                  CLOSE_UID:
 31512                                  
 31513                                  ;if installed
 31514                                  ;hkn; SS override
 31515 00006725 36FF1E[6800]            	Call	far [SS:JShare+(3*4)] ; 3 = MTFTclu
 31516                                  ;else
 31517                                  ;	Call	MFTclU
 31518                                  ;endif
 31519 0000672A EBF2                    	JMP	short CheckReturns
 31520                                  
 31521                                  CLOSE_UID_PID:
 31522                                  
 31523                                  ;if installed
 31524                                  ;hkn; SS override
 31525 0000672C 36FF1E[6C00]            	Call	far [SS:JShare+(4*4)] ; 4 = MFTCloseP 
 31526                                  ;else
 31527                                  ;	Call	MFTCloseP
 31528                                  ;endif
 31529 00006731 EBEB                    	JMP	CheckReturns
 31530                                  
 31531                                  GET_LIST:
 31532                                  
 31533                                  ;if installed
 31534                                  ;hkn; SS override
 31535 00006733 36FF1E[8000]            	Call	far [SS:JShare+(9*4)] ; 9 = MFT_get
 31536                                  ;else
 31537                                  ;	Call	MFT_get
 31538                                  ;endif
 31539 00006738 72E9                    	JC	short func_err
 31540 0000673A E8CEAE                  	call	Get_User_Stack
 31541                                  	;mov	[si+2],bx
 31542 0000673D 895C02                  	MOV	[SI+user_env.user_BX],BX
 31543                                  	;mov	[si+10],di
 31544 00006740 897C0A                  	MOV	[SI+user_env.user_DI],DI
 31545                                  	;mov	[si+16],es
 31546 00006743 8C4410                  	MOV	[SI+user_env.user_ES],ES
 31547                                  SetCXOK:
 31548                                  	;mov	[si+4],cx
 31549 00006746 894C04                  	MOV	[SI+user_env.user_CX],CX
 31550 00006749 E9B1AF                  	jmp	SYS_RET_OK
 31551                                  
 31552                                  SRV_CALL:
 31553 0000674C 58                      	POP	AX			; get rid of call to $srvcall
 31554 0000674D 1E                      	push	ds
 31555 0000674E 56                      	push	si
 31556 0000674F E8B9AE                  	call	Get_User_Stack
 31557 00006752 5F                      	pop	di
 31558 00006753 07                      	pop	es
 31559                                  ;
 31560                                  ; DS:SI point to stack
 31561                                  ; ES:DI point to DPL
 31562                                  ;
 31563 00006754 E82BB8                  	call	XCHGP
 31564                                  ;
 31565                                  ; DS:SI point to DPL
 31566                                  ; ES:DI point to stack
 31567                                  ;
 31568                                  ; We now copy the registers from DPL to save stack
 31569                                  ;
 31570 00006757 56                      	push	si
 31571 00006758 B90600                  	MOV	CX,6
 31572 0000675B F3A5                    	REP	MOVSW			; Put in AX,BX,CX,DX,SI,DI
 31573 0000675D 47                      	INC	DI
 31574 0000675E 47                      	INC	DI			; Skip user_BP
 31575 0000675F A5                      	MOVSW				; DS
 31576 00006760 A5                      	MOVSW				; ES
 31577 00006761 5E                      	pop	si			; DS:SI -> DPL
 31578 00006762 8B04                    	mov	ax,[SI]
 31579                                  	;MOV	AX,[SI+DPL.AX]
 31580                                  	;mov	bx,[si+2]
 31581 00006764 8B5C02                  	MOV	BX,[SI+DPL.BX]
 31582                                  	;mov	cx,[si+4]
 31583 00006767 8B4C04                  	MOV	CX,[SI+DPL.CX]
 31584                                  	;mov	dx,[si+6]
 31585 0000676A 8B5406                  	MOV	DX,[SI+DPL.DX]
 31586                                  	;mov	di,[si+10]
 31587 0000676D 8B7C0A                  	MOV	DI,[SI+DPL.DI]
 31588                                  	;mov	es,[si+14]
 31589 00006770 8E440E                  	MOV	ES,[SI+DPL.ES]
 31590                                  	;push	word [si+8]
 31591 00006773 FF7408                  	PUSH	word [SI+DPL.SI]
 31592                                  	;mov	ds,[si+12]
 31593 00006776 8E5C0C                  	MOV	DS,[SI+DPL.DS]
 31594 00006779 5E                      	POP	SI
 31595                                  
 31596                                  ;hkn; SS override for next 3
 31597 0000677A 368C1E[7E05]            	MOV	[SS:SAVEDS],DS
 31598 0000677F 36891E[7C05]            	MOV	[SS:SAVEBX],BX
 31599 00006784 36C606[0D05]FF          	MOV	byte [SS:FSHARING],-1	; set no redirect flag
 31600 0000678A E9B8AD                  	jmp	REDISP
 31601                                  
 31602                                  GET_DOS_DATA:
 31603 0000678D 16                      	push	ss
 31604 0000678E 07                      	pop	es
 31605 0000678F BF[CE02]                	MOV     DI,SWAP_START
 31606 00006792 B9[090A]                	MOV     CX,SWAP_END
 31607 00006795 BA[E602]                	MOV     DX,SWAP_ALWAYS
 31608 00006798 29F9                    	SUB     CX,DI
 31609 0000679A 29FA                    	SUB     DX,DI
 31610 0000679C D1E9                    	SHR     CX,1                    ; div by 2, remainder in carry
 31611 0000679E 83D100                  	ADC     CX,0                    ; div by 2 + round up
 31612 000067A1 D1E1                    	SHL     CX,1                    ; round up to 2 boundary.
 31613 000067A3 E865AE                  	call	Get_User_Stack
 31614                                  	;mov	[si+14],es
 31615 000067A6 8C440E                  	MOV     [SI+user_env.user_DS],ES
 31616                                  	;mov	[si+8],di
 31617 000067A9 897C08                  	MOV     [SI+user_env.user_SI],DI
 31618                                  	;mov	[si+6],dx
 31619 000067AC 895406                  	MOV     [SI+user_env.user_DX],DX
 31620 000067AF EB95                    	JMP	short SetCXOK
 31621                                  
 31622                                  SPOOL_OPER:
 31623                                  	;CallInstall NETSpoolOper,MultNET,37,AX,BX
 31624                                  
 31625 000067B1 50                      	push    ax
 31626 000067B2 B82511                  	mov     ax, 1125h
 31627 000067B5 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - REDIRECTED PRINTER MODE
 31628                                  			; STACK: WORD subfunction
 31629                                  			; Return: CF set on error, AX = error code
 31630                                  			; STACK unchanged
 31631 000067B7 5B                      	pop	bx
 31632 000067B8 7203                    	JC	short func_err2
 31633 000067BA E940AF                  	jmp	SYS_RET_OK
 31634                                  func_err2:
 31635 000067BD E949AF                  	jmp	SYS_RET_ERR
 31636                                  
 31637                                  ;Break	<$SetExtendedError - set extended error for later retrieval>
 31638                                  ;--------------------------------------------------------------------------
 31639                                  ;
 31640                                  ; Procedure Name : $SetExtendedError
 31641                                  ;
 31642                                  ; $SetExtendedError takes extended error information and loads it up for the
 31643                                  ; next extended error call.  This is used by interrupt-level proccessors to
 31644                                  ; mask their actions.
 31645                                  ;
 31646                                  ;   Inputs: DS:SI points to DPL which contains all registers
 31647                                  ;   Outputs: none
 31648                                  ;
 31649                                  ;---------------------------------------------------------------------------
 31650                                  
 31651                                  _$SetExtendedError:
 31652                                  
 31653                                  ;hkn; SS override for all variables used
 31654                                  
 31655 000067C0 8B04                    	mov	ax,[si]
 31656                                  	;MOV	AX,[SI+DPL.AX]
 31657 000067C2 36A3[D202]              	MOV	[SS:EXTERR],AX
 31658                                  	;mov	ax,[si+10]
 31659 000067C6 8B440A                  	MOV	AX,[SI+DPL.DI]
 31660 000067C9 36A3[D602]              	MOV	[SS:EXTERRPT],AX
 31661                                  	;mov	ax,[si+14]
 31662 000067CD 8B440E                  	MOV	AX,[SI+DPL.ES]
 31663 000067D0 36A3[D802]              	MOV	[SS:EXTERRPT+2],AX
 31664                                  	;mov	ax,[si+2]
 31665 000067D4 8B4402                  	MOV	AX,[SI+DPL.BX]
 31666 000067D7 36A3[D402]              	MOV	[SS:EXTERR_ACTION],AX
 31667                                  	;mov	ax,[si+4]
 31668 000067DB 8B4404                  	MOV	AX,[SI+DPL.CX]
 31669 000067DE 368826[D102]            	MOV	[SS:EXTERR_LOCUS],AH
 31670 000067E3 C3                      	retn
 31671                                  
 31672                                  ;============================================================================
 31673                                  ; UTIL.ASM, MSDOS 6.0, 1991
 31674                                  ;============================================================================
 31675                                  ; 05/08/2018 - Retro DOS v3.0
 31676                                  
 31677                                  ;**	Handle related utilities for MSDOS 2.X.
 31678                                  ;
 31679                                  ;	pJFNFromHandle	written
 31680                                  ;	SFFromHandle	written
 31681                                  ;	SFFromSFN	written
 31682                                  ;	JFNFree 	written
 31683                                  ;	SFNFree 	written
 31684                                  ;
 31685                                  ;	Modification history:
 31686                                  ;
 31687                                  ;	    Created: MZ 1 April 1983
 31688                                  
 31689                                  ;	BREAK	<pJFNFromHandle - return pointer to JFN table entry>
 31690                                  
 31691                                  ;**	pJFNFromHandle - Translate Handle to Pointer to JFN
 31692                                  ;----------------------------------------------------------------------------
 31693                                  ;	pJFNFromHandle takes a file handle and turns that into a pointer to
 31694                                  ;	the JFN entry (i.e., to a byte holding the internal file handle #)
 31695                                  ;
 31696                                  ;	NOTE:
 31697                                  ;	  This routine is called from $CREATE_PROCESS_DATA_BLOCK which is called
 31698                                  ;	  at DOSINIT time with SS NOT DOSGROUP
 31699                                  ;
 31700                                  ;	ENTRY	(bx) = handle
 31701                                  ;	EXIT	'C' clear if ok
 31702                                  ;		  (es:di) = address of JFN value
 31703                                  ;		'C' set if error
 31704                                  ;		  (ax) = error code
 31705                                  ;	USES	AX, DI, ES, Flags
 31706                                  ;----------------------------------------------------------------------------
 31707                                  
 31708                                  pJFNFromHandle:
 31709                                  
 31710 000067E4 2E8E06[DE02]            	MOV	ES,[cs:CurrentPDB]	; get user process data block
 31711                                  	;cmp	bx,[ES:32h]
 31712 000067E9 263B1E3200              	CMP	BX,[ES:PDB.JFN_Length]	; is handle greater than allocated
 31713 000067EE 7204                    	JB	short pjfn10		; no, get offset
 31714                                  ReturnCarry_inv_hndl: ; 05/08/2018 - Retro DOS v3.0
 31715                                  	;mov	al,6
 31716 000067F0 B006                    	MOV     AL,error_invalid_handle ; appropriate error
 31717                                  ReturnCarry:
 31718 000067F2 F9                      	STC                             ; signal error
 31719 000067F3 C3                      	retn				; go back
 31720                                  pjfn10: 
 31721                                  	;les	di,[es:34h]
 31722 000067F4 26C43E3400              	LES	DI,[ES:PDB.JFN_Pointer]	; get pointer to beginning of table
 31723 000067F9 01DF                    	ADD	DI,BX			; add in offset, clear 'C'
 31724                                  	;clc
 31725                                  pJFNFromHandle_error:
 31726 000067FB C3                      	retn
 31727                                  
 31728                                  ;BREAK <SFFromHandle - return pointer (or error) to SF entry from handle>
 31729                                  ;----------------------------------------------------------------------------
 31730                                  ;
 31731                                  ; Procedure Name : SFFromHandle
 31732                                  ;
 31733                                  ; SFFromHandle - Given a handle, get JFN and then index into SF table
 31734                                  ;
 31735                                  ;   Input:      BX has handle
 31736                                  ;   Output:     Carry Set
 31737                                  ;                   AX has error code
 31738                                  ;               Carry Reset
 31739                                  ;                   ES:DI has pointer to SF entry
 31740                                  ;   Registers modified: If error, AX,ES, else ES:DI
 31741                                  ; NOTE:
 31742                                  ;   This routine is called from $CREATE_PROCESS_DATA_BLOCK which is called
 31743                                  ;       at DOSINIT time with SS NOT DOSGROUP
 31744                                  ;
 31745                                  ;----------------------------------------------------------------------------
 31746                                  
 31747                                  SFFromHandle:
 31748 000067FC E8E5FF                  	CALL    pJFNFromHandle          ; get jfn pointer
 31749                                  	;retc				; return if error
 31750 000067FF 72FA                    	jc	short pJFNFromHandle_error
 31751 00006801 26803DFF                	CMP     BYTE [ES:DI],-1		; unused handle
 31752                                  	;JNZ	short GetSF		; nope, suck out SF
 31753                                  	;;mov	al,6
 31754                                  	;MOV	AL,error_invalid_handle ; appropriate error
 31755                                  	;jmp	short ReturnCarry	; signal it
 31756 00006805 74E9                    	jz	short ReturnCarry_inv_hndl ; Retro DOS v3.0 modification
 31757                                  GetSF:
 31758 00006807 53                      	push	bx			; save handle
 31759 00006808 268A1D                  	MOV     BL,[ES:DI]		; get SFN
 31760 0000680B 30FF                    	XOR     BH,BH                   ; ignore upper half
 31761 0000680D E80200                  	CALL    SFFromSFN               ; get real sf spot
 31762 00006810 5B                      	pop	bx			; restore
 31763 00006811 C3                      	retn                          ; say goodbye
 31764                                  
 31765                                  ;BREAK <SFFromSFN - index into SF table for SFN>
 31766                                  
 31767                                  ;**	SFFromSFN - Get an SF Table entry from an SFN
 31768                                  ;----------------------------------------------------------------------------
 31769                                  ;	SFFromSfn uses an SFN to index an entry into the SF table.  This
 31770                                  ;	is more than just a simple index instruction because the SF table
 31771                                  ;	can be made up of multiple pieces chained together. We follow the
 31772                                  ;	chain to the right piece and then do the index operation.
 31773                                  ;
 31774                                  ;   NOTE:
 31775                                  ;	This routine is called from SFFromHandle which is called
 31776                                  ;       at DOSINIT time with SS NOT DOSGROUP
 31777                                  ;
 31778                                  ;	ENTRY	BX has SF index
 31779                                  ;	EXIT	'C' clear if OK
 31780                                  ;		  ES:DI points to SF entry
 31781                                  ;		'C' set if index too large
 31782                                  ;	USES	BX, DI, ES
 31783                                  ;----------------------------------------------------------------------------
 31784                                  
 31785                                  SFFromSFN:
 31786 00006812 2EC43E[2A00]            	LES	DI,[CS:SFT_ADDR]	; (es:di) = start of SFT table
 31787                                  sfsfn5:	
 31788                                  	;cmp	bx,[es:di+4]
 31789 00006817 263B5D04                	CMP	BX,[ES:DI+SFT.SFCount]	; is handle in this table?
 31790 0000681B 720E                    	JB	short sfsfn7		; yes, go grab it
 31791                                  	;sub	bx,[es:di+4]
 31792 0000681D 262B5D04                	SUB     BX,[ES:DI+SFT.SFCount]
 31793 00006821 26C43D                  	les	di,[es:di] ; 14/08/2018
 31794                                  	;LES	DI,[ES:DI+SFT.SFLink]	; get next table segment
 31795 00006824 83FFFF                  	CMP     DI,-1                   ; end of tables?
 31796 00006827 75EE                    	JNZ	short sfsfn5		; no, try again
 31797 00006829 F9                      	STC
 31798 0000682A C3                      	retn				; return with error, not found
 31799                                  
 31800                                  sfsfn7:
 31801 0000682B 50                      	push	ax
 31802                                  	;mov	ax,53
 31803 0000682C B83500                  	MOV     AX,SF_ENTRY.size	; put it in a nice place
 31804 0000682F F6E3                    	MUL	BL			; (ax) = offset into this SF block
 31805 00006831 01C7                    	ADD	DI,AX			; add base of SF block
 31806 00006833 58                      	pop	ax
 31807                                  	;add	di,6
 31808 00006834 83C706                  	ADD	DI,SFT.SFTable		; offset into structure, 'C' cleared
 31809 00006837 C3                      	retn				; return with 'C' clear
 31810                                  
 31811                                  ;	BREAK <JFNFree - return a jfn pointer if one is free>
 31812                                  
 31813                                  ;**	JFNFree - Find a Free JFN Slot
 31814                                  ;----------------------------------------------------------------------------
 31815                                  ;	JFNFree scansthrough the JFN table and returnsa pointer to a free slot
 31816                                  ;
 31817                                  ;	ENTRY	(ss) = DOSDATA
 31818                                  ;	EXIT	'C' clear if OK
 31819                                  ;		  (bx) = new handle
 31820                                  ;		  (es:di) = pointer to JFN slot
 31821                                  ;		'C' set if error
 31822                                  ;		  (al) = error code
 31823                                  ;	USES	bx, di, es, flags
 31824                                  ;----------------------------------------------------------------------------
 31825                                  
 31826                                  JFNFree:
 31827 00006838 31DB                    	XOR	BX,BX			; (bx) = initial JFN to try
 31828                                  jfnf1:	
 31829 0000683A E8A7FF                  	CALL	pJFNFromHandle		; get the appropriate handle
 31830 0000683D 7209                    	JC	short jfnf5		; no more handles
 31831 0000683F 26803DFF                	CMP     BYTE [ES:DI],-1		; free?
 31832 00006843 7405                    	je	short jfnfx		; yes, carry is clear
 31833 00006845 43                      	INC     BX                      ; no, next handle
 31834 00006846 EBF2                    	JMP	short jfnf1		; and try again
 31835                                  
 31836                                  ;	Error.	'C' set
 31837                                  jfnf5:	
 31838                                  	;mov	al,4
 31839 00006848 B004                    	MOV	AL,error_too_many_open_files
 31840                                  jfnfx:	
 31841 0000684A C3                      	retn				; bye
 31842                                  
 31843                                  ;	BREAK <SFNFree - Allocate a free SFN>
 31844                                  
 31845                                  ;**	SFNFree - Allocate a Free SFN/SFT
 31846                                  ;----------------------------------------------------------------------------
 31847                                  ;	SFNFree scans through the sf table looking for a free entry
 31848                                  ;	If it finds one it partially allocates it by setting SFT_REF_COUNT = -1
 31849                                  ;
 31850                                  ;	The problem is that we want to mark the SFT busy so that other threads
 31851                                  ;	can't allocate the SFT before we're finished marking it up.  However,
 31852                                  ;	we can't just mark it busy because we may get blown out of our open
 31853                                  ;	by INT24 and leave the thing orphaned.	To solve this we mark it
 31854                                  ;	"allocation in progress" by setting SFT_REF_COUNT = -1.  If we see
 31855                                  ;	an SFT with this value we look to see if it belongs to this user
 31856                                  ;	and process.  If it does belong to us then it must be an orphan
 31857                                  ;	and we reclaim it.
 31858                                  ;
 31859                                  ;	BUGBUG - improve the performance. I guess it's smaller to call SFFromSFN
 31860                                  ;		over and over, but we could at least set a high water mark...
 31861                                  ;		cause an N^2 loop calling slow SFFromSFN is real slow, too slow
 31862                                  ;		even though this is not a frequently called routine - jgl
 31863                                  ;
 31864                                  ;	ENTRY	(ss) = DOSDATA
 31865                                  ;	EXIT	'C' clear if no error
 31866                                  ;		  (bx) = SFN
 31867                                  ;		  (es:di) = pointer to SFT
 31868                                  ;		  es:[di].SFT_REF_COUNT = -1
 31869                                  ;		'C' set if error
 31870                                  ;		  (al) = error code
 31871                                  ;	USES	bx, di, es, Flags
 31872                                  ;----------------------------------------------------------------------------
 31873                                  
 31874                                  SFNFree:
 31875                                  	;12/08/2018
 31876                                  	;05/08/2018 - Retro DOS v3.0
 31877                                  	; MSDOS 6.0
 31878 0000684B 50                      	push	ax
 31879 0000684C 31DB                    	xor	bx,bx			; (bx) = SFN to consider
 31880                                  sfnf5:	
 31881 0000684E 53                      	push	bx
 31882 0000684F E8C0FF                  	call	SFFromSFN		; get the potential handle
 31883 00006852 5B                      	pop	bx
 31884 00006853 723A                    	jc	short sfnf95		; no more free SFNs
 31885 00006855 26833D00                	cmp	word [ES:DI],0
 31886                                  	;cmp	word [ES:DI+SF_ENTRY.sf_Ref_Count],0 ; free?
 31887 00006859 741D                    	je	short sfnf20			; yep, got one
 31888                                  	
 31889                                  	;cmp	word [es:di],0FFFFh ; -1
 31890 0000685B 26833DFF                	cmp	word [ES:DI],sf_busy
 31891                                  	;cmp	word [ES:DI+SF_ENTRY.sf_ref_count],sf_busy
 31892 0000685F 7403                    	je	short sfnf10		; special busy mark
 31893                                  sfnf7:	
 31894 00006861 43                      	inc	bx			; try the next one
 31895 00006862 EBEA                    	jmp	short sfnf5
 31896                                  
 31897                                  ;	The SFT has the special "busy" mark; if it belongs to us then
 31898                                  ;	it was abandoned during a earlier call and we can use it.
 31899                                  ;
 31900                                  ;	(bx)	= SFN
 31901                                  ;	(es:di) = pointer to SFT
 31902                                  ;	(TOS)	= caller's (ax)
 31903                                  
 31904                                  sfnf10:	
 31905 00006864 36A1[EA02]              	mov	ax,[SS:USER_ID]
 31906                                  	;cmp	[es:di+2Fh],ax
 31907 00006868 2639452F                	cmp	[ES:DI+SF_ENTRY.sf_UID],ax
 31908 0000686C 75F3                    	jnz	short sfnf7		; not ours
 31909 0000686E 36A1[E802]              	mov	ax,[SS:PROC_ID]
 31910                                  	;cmp	[es:di+31h],ax
 31911 00006872 26394531                	cmp	[ES:DI+SF_ENTRY.sf_PID],ax
 31912 00006876 75E9                    	jnz	short sfnf7		; can't use this one, try the next
 31913                                  
 31914                                  ;	We have an SFT to allocate
 31915                                  ;
 31916                                  ;	(bx)	= SFN
 31917                                  ;	(es:di) = pointer to SFT
 31918                                  ;	(TOS)	= caller's (ax)
 31919                                  
 31920                                  sfnf20:
 31921                                  	; cf = 0 ;; Retro DOS v3.0
 31922                                  
 31923                                  	;mov	word [es:di],0FFFFh
 31924 00006878 26C705FFFF              	mov	word [ES:DI],sf_busy
 31925                                  					; make sure that this is allocated
 31926                                  	;mov	word [ES:DI+SF_ENTRY.sf_ref_count],sf_busy
 31927                                  
 31928 0000687D 36A1[EA02]              	mov	ax,[SS:USER_ID]
 31929                                  	;mov	[es:di+2Fh],ax
 31930 00006881 2689452F                	mov	[ES:DI+SF_ENTRY.sf_UID],ax
 31931 00006885 36A1[E802]              	mov	ax,[SS:PROC_ID]
 31932                                  	;mov	[es:di+31h],ax
 31933 00006889 26894531                	mov	[es:DI+SF_ENTRY.sf_PID],ax
 31934                                  sfnf21: ;; Retro DOS v3.0
 31935 0000688D 58                      	pop	ax
 31936                                  	;clc
 31937 0000688E C3                      	retn				; return with no error
 31938                                  
 31939                                  ;**	Error - no more free SFNs
 31940                                  ;
 31941                                  ;	'C' set
 31942                                  ;	(TOS) = saved ax
 31943                                  
 31944                                  sfnf95: 
 31945 0000688F 58                      	pop	ax
 31946                                  	;mov	al,4
 31947 00006890 B004                    	mov	al,error_too_many_open_files
 31948 00006892 C3                      	retn				; return with 'C' and error
 31949                                  
 31950                                  ;============================================================================
 31951                                  ; MACRO.ASM, MSDOS 6.0, 1991
 31952                                  ;============================================================================
 31953                                  ; Retro	DOS v3.0 - 11/07/2018
 31954                                  
 31955                                  ;	TITLE	MACRO - Pathname and macro related internal routines
 31956                                  ;	NAME	MACRO
 31957                                  
 31958                                  ;	Microsoft Confidential
 31959                                  ;	Copyright (C) Microsoft Corporation 1991
 31960                                  ;	All Rights Reserved.
 31961                                  
 31962                                  ;**	MACRO.ASM
 31963                                  ;
 31964                                  ;	$AssignOper
 31965                                  ;	FIND_DPB
 31966                                  ;	InitCDS
 31967                                  ;	$UserOper
 31968                                  ;	GetVisDrv
 31969                                  ;	GetThisDrv
 31970                                  ;	GetCDSFromDrv
 31971                                  ;
 31972                                  ;   Revision history:
 31973                                  ;
 31974                                  ;	Created: MZ 4 April 1983
 31975                                  ;		 MZ 18 April 1983   Make TransFCB handle extended FCBs
 31976                                  ;		 AR 2 June 1983     Define/Delete macro for NET redir.
 31977                                  ;		 MZ 3 Nov 83	    Fix InitCDS to reset length to 2
 31978                                  ;		 MZ 4 Nov 83	    Fix NetAssign to use STRLEN only
 31979                                  ;		 MZ 18 Nov 83	    Rewrite string processing for subtree
 31980                                  ;				    aliasing.
 31981                                  ;
 31982                                  ;   MSDOS performs several types of name translation. First, we maintain for
 31983                                  ;   each valid drive letter the text of the current directory on that drive.
 31984                                  ;   For invalid drive letters, there is no current directory so we pretend to
 31985                                  ;   be at the root. A current directory is either the raw local directory
 31986                                  ;   (consisting of drive:\path) or a local network directory (consisting of
 31987                                  ;   \\machine\path. There is a limit on the point to which a .. is allowed.
 31988                                  ;
 31989                                  ;   Given a path, MSDOS will transform this into a real from-the-root path
 31990                                  ;   without . or .. entries. Any component that is > 8.3 is truncated to
 31991                                  ;   this and all * are expanded into ?'s.
 31992                                  ;
 31993                                  ;   The second part of name translation involves subtree aliasing. A list of
 31994                                  ;   subtree pairs is maintained by the external utility SUBST. The results of
 31995                                  ;   the previous 'canonicalization' are then examined to see if any of the
 31996                                  ;   subtree pairs is a prefix of the user path. If so, then this prefix is
 31997                                  ;   replaced with the other subtree in the pair.
 31998                                  ;
 31999                                  ;   A third part involves mapping this "real" path into a "physical" path.  A
 32000                                  ;   list of drive/subtree pairs are maintained by the external utility JOIN.
 32001                                  ;   The output of the previous translation is examined to see if any of the
 32002                                  ;   subtrees in this list are a prefix of the string. If so, then the prefix
 32003                                  ;   is replaced by the appropriate drive letter. In this manner, we can
 32004                                  ;   'mount' one device under another.
 32005                                  ;
 32006                                  ;   The final form of name translation involves the mapping of a user's
 32007                                  ;   logical drive number into the internal physical drive. This is
 32008                                  ;   accomplished by converting the drive number into letter:CON, performing
 32009                                  ;   the above translation and then converting the character back into a drive
 32010                                  ;   number.
 32011                                  ;
 32012                                  ;   There are two main entry points: TransPath and TransFCB. TransPath will
 32013                                  ;   take a path and form the real text of the pathname with all . and ..
 32014                                  ;   removed. TransFCB will translate an FCB into a path and then invoke
 32015                                  ;   TransPath.
 32016                                  ;
 32017                                  ;	A000	version 4.00  Jan. 1988
 32018                                  
 32019                                  ;Installed = TRUE
 32020                                  
 32021                                  ;	I_need	ThisCDS,DWORD		; pointer to CDS used
 32022                                  ;	I_need	CDSAddr,DWORD		; pointer to CDS table
 32023                                  ;	I_need	CDSCount,BYTE		; number of CDS entries
 32024                                  ;	I_need	CurDrv,BYTE		; current macro assignment (old
 32025                                  ;					; current drive)
 32026                                  ;	I_need	NUMIO,BYTE		; Number of physical drives
 32027                                  ;	I_need	fSharing,BYTE		; TRUE => no redirection allowed
 32028                                  ;	I_need	DummyCDS,80h		; buffer for dummy cds
 32029                                  ;	I_need	DIFFNAM,BYTE		; flag for MyName being set
 32030                                  ;	I_need	MYNAME,16		; machine name
 32031                                  ;	I_need	MYNUM,WORD		; machine number
 32032                                  ;	I_need	DPBHEAD,DWORD		; beginning of DPB chain
 32033                                  ;	I_need	EXTERR_LOCUS,BYTE	; Extended Error Locus
 32034                                  ;	I_need	DrvErr,BYTE		; drive error
 32035                                  
 32036                                  ;BREAK <$AssignOper -- Set up a Macro>
 32037                                  ;----------------------------------------------------------------------------
 32038                                  ; Inputs:
 32039                                  ;	AL = 00 get assign mode 		    (ReturnMode)
 32040                                  ;	AL = 01 set assign mode 		    (SetMode)
 32041                                  ;	AL = 02 get attach list entry		    (GetAsgList)
 32042                                  ;	AL = 03 Define Macro (attch start)
 32043                                  ;	    BL = Macro type
 32044                                  ;	       = 0 alias
 32045                                  ;	       = 1 file/device
 32046                                  ;	       = 2 drive
 32047                                  ;	       = 3 Char device -> network
 32048                                  ;	       = 4 File device -> network
 32049                                  ;	    DS:SI -> ASCIZ source name
 32050                                  ;	    ES:DI -> ASCIZ destination name
 32051                                  ;	AL = 04 Cancel Macro
 32052                                  ;	    DS:SI -> ASCIZ source name
 32053                                  ;	AL = 05 Modified get attach list entry
 32054                                  ;	AL = 06 Get ifsfunc item
 32055                                  ;	AL = 07 set in_use of a drive's CDS
 32056                                  ;	     DL = drive number, 0=default  0=A,,
 32057                                  ;	AL = 08 reset in_use of a drive's CDS
 32058                                  ;	     DL = drive number, 0=A, 1=B,,,
 32059                                  ; Function:
 32060                                  ;	Do macro stuff
 32061                                  ; Returns:
 32062                                  ;	Std Xenix style error return
 32063                                  ;----------------------------------------------------------------------------
 32064                                  
 32065                                  _$AssignOper:
 32066                                  	; MSDOS 6.0
 32067                                  	;CMP	AL,7			      ; set in_use ?		;AN000;
 32068                                  	;JNZ	short chk08		      ; no			;AN000;
 32069                                  ;srinuse:								;AN000;
 32070                                  	;PUSH	AX			      ; save al 		;AN000;
 32071                                  	;MOV	AL,DL			      ; AL= drive id		;AN000;
 32072                                  	;CALL	GetCDSFromDrv		      ; ds:si -> cds		;AN000;
 32073                                  	;POP	AX			      ; 			;AN000;
 32074                                  	;JC	short baddrv		      ; bad drive		;AN000;
 32075                                  	;CMP	WORD [SI+curdir.devptr],0     ; dpb ptr =0 ?		;AN000;
 32076                                  	;JZ	short baddrv		      ;     no			;AN000;
 32077                                  	;CMP	AL,7			      ; set ?			;AN000;
 32078                                  	;JNZ	short resetdrv		      ; no			;AN000;
 32079                                  	;OR	word [SI+curdir.flags],curdir_inuse; set in_use		;AN000;
 32080                                  	;JMP	SHORT okdone		      ; 			;AN000;
 32081                                  ;resetdrv:								;AN000;
 32082                                  	;AND	word [SI+curdir_flags],~curdir_inuse ; reset in_use	;AN000;
 32083                                  	;JMP	SHORT okdone			; 			;AN000;
 32084                                  ;baddrv: 								;AN000;
 32085                                  	;MOV	AX,error_invalid_drive	      ; error			;AN000;
 32086                                  	;JMP	SHORT ASS_ERR		      ; 			;AN000;
 32087                                  ;chk08:									;AN000;
 32088                                  	;CMP	AL,8			      ; reset inuse ?		;AN000;
 32089                                  	;JZ	short srinuse 		      ; yes			;AN000;
 32090                                  
 32091                                  	;IF	NOT INSTALLED
 32092                                  	;transfer NET_ASSOPER
 32093                                  	;ELSE
 32094                                  
 32095                                  	; MSDOS 3.3 (& MSDOS 6.0)
 32096 00006893 50                      	PUSH	AX
 32097                                  	;mov	ax,111Eh
 32098                                  	;MOV	AX,(MultNET SHL 8) OR 30
 32099 00006894 B81E11                  	mov	ax,(MultNET*256)+30
 32100 00006897 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - DO REDIRECTION
 32101                                  			; SS = DOS CS
 32102                                  			; STACK: WORD function to execute
 32103                                  			; Return: CF set on error, AX = error code
 32104                                  			; STACK unchanged
 32105 00006899 5B                      	POP	BX			; Don't zap error code in AX
 32106 0000689A 7203                    	JC	short ASS_ERR
 32107                                  okdone:
 32108 0000689C E95EAE                  	jmp	SYS_RET_OK
 32109                                  
 32110                                  ASS_ERR:
 32111 0000689F E967AE                  	jmp	SYS_RET_ERR
 32112                                  
 32113                                  	;ENDIF
 32114                                  
 32115                                  ;Break <FIND_DPB - Find a DPB from a drive number>
 32116                                  ;----------------------------------------------------------------------------
 32117                                  ;**	FIND_DPB - Find a DPB from a Drive #
 32118                                  ;
 32119                                  ;	ENTRY	AL has drive number A = 0
 32120                                  ;	EXIT	'C' set
 32121                                  ;		    No DPB for this drive number
 32122                                  ;		'C' clear
 32123                                  ;		    DS:SI points to DPB for drive
 32124                                  ;	USES	SI, DS, Flags
 32125                                  ;----------------------------------------------------------------------------
 32126                                  
 32127                                  FIND_DPB:
 32128 000068A2 36C536[2600]            	LDS	SI,[SS:DPBHEAD]		;smr;SS Override
 32129                                  fdpb5:	
 32130 000068A7 83FEFF                  	CMP	SI,-1
 32131 000068AA 7409                    	JZ	short fdpb10
 32132 000068AC 3A04                    	cmp	al,[si]
 32133                                  	;CMP	AL,[SI+DPB.DRIVE]
 32134 000068AE 7406                    	jz	short ret_label15	; Carry clear (retz)
 32135                                  	;lds	si,[si+18h]
 32136 000068B0 C57418                  	LDS	SI,[SI+DPB.NEXT_DPB]
 32137 000068B3 EBF2                    	JMP	short fdpb5
 32138                                  
 32139                                  fdpb10:	
 32140 000068B5 F9                      	STC
 32141                                  
 32142                                  ret_label15:
 32143 000068B6 C3                      	retn
 32144                                  
 32145                                  ;	Break <InitCDS - set up an empty CDS>
 32146                                  ;----------------------------------------------------------------------------
 32147                                  ;**	InitCDS - Setup an Empty CDS
 32148                                  ;
 32149                                  ;	ENTRY	ThisCDS points to CDS
 32150                                  ;		AL has uppercase drive letter
 32151                                  ;	EXIT	ThisCDS is now empty
 32152                                  ;		(ES:DI) = CDS
 32153                                  ;		'C' set if no DPB associated with drive
 32154                                  ;	USES	AH,ES,DI, Flags
 32155                                  ;----------------------------------------------------------------------------
 32156                                  
 32157                                  InitCDS:
 32158                                  	; 19/08/2018
 32159                                  	; 05/08/2018 - Retro DOS v3.0
 32160                                  	; MSDOS 6.0
 32161 000068B7 50                      	push	ax			; save (AL) for caller
 32162 000068B8 36C43E[3A05]            	LES	DI,[SS:THISCDS]		; (es:di) = CDS address
 32163                                  	;mov	word [es:di+67],0
 32164 000068BD 26C745430000            	MOV	word [ES:DI+curdir.flags],0 ; "free" CDS
 32165 000068C3 2C40                    	SUB	AL,"A"-1                ; A = 1
 32166 000068C5 363806[4600]            	CMP	[SS:NUMIO],AL		;smr;SS Override
 32167 000068CA 7236                    	JC	short icdsx		; Drive does not map a physical drive
 32168 000068CC 48                      	dec	ax			; (AL) = 0 if A, 1 if B, etc.
 32169 000068CD 50                      	PUSH	AX			; save drive number for later
 32170 000068CE 0441                    	add	al,"A"
 32171 000068D0 B43A                    	MOV	AH,':'
 32172 000068D2 268905                  	mov	[ES:DI],ax
 32173                                  	;MOV	[ES:DI+curdir.text],AX 	; set "x:"
 32174                                  	;mov	ax,"\"
 32175                                  	;mov	[es:di+2],ax
 32176                                  	;MOV	word [ES:DI+curdir.text+2],"\"	; NUL terminate
 32177 000068D5 26C745025C00            	mov	word [ES:DI+curdir.text+2],005Ch ; 19/08/2018
 32178                                  	;or	word [es:di+67],4000h
 32179                                  	;or	byte [es:di+68],40h
 32180 000068DB 26804D4440              	OR	byte [ES:DI+curdir.flags+1],curdir_inuse>>8
 32181 000068E0 29C0                    	sub	ax,ax
 32182                                  	;MOV	[es:di+73],ax ; 0
 32183 000068E2 26894549                	MOV	[ES:DI+curdir.ID],ax
 32184                                  	;mov	[es:di+75],ax ; 0
 32185 000068E6 2689454B                	MOV	[ES:DI+curdir.ID+2],ax
 32186 000068EA B002                    	mov	al,2
 32187                                  	;mov	[es:di+79],aX ; 2
 32188 000068EC 2689454F                	MOV	[ES:DI+curdir.end],ax
 32189 000068F0 58                      	POP	AX			; (al) = drive number
 32190 000068F1 1E                      	push	ds
 32191 000068F2 56                      	push	si
 32192 000068F3 E8ACFF                  	call	FIND_DPB
 32193 000068F6 7208                    	JC	short icds5		; OOOOPPPPPSSSS!!!!
 32194                                  	;mov	[es:di+69],si
 32195 000068F8 26897545                	MOV	[ES:DI+curdir.devptr],SI
 32196                                  	;mov	[es:di+71],ds
 32197 000068FC 268C5D47                	MOV	[ES:DI+curdir.devptr+2],DS
 32198                                  icds5:	
 32199 00006900 5E                      	pop	si
 32200 00006901 1F                      	pop	ds
 32201                                  icdsx:	
 32202 00006902 58                      	pop	ax
 32203                                  RET45:
 32204 00006903 C3                      	retn
 32205                                  
 32206                                  ;Break <$UserOper - get/set current user ID (for net)>
 32207                                  ;----------------------------------------------------------------------------
 32208                                  ;   $UserOper - retrieve or initiate a user id string.	MSDOS will only
 32209                                  ;	maintain this string and do no verifications.
 32210                                  ;
 32211                                  ;   Inputs:	AL has function type (0-get 1-set 2-printer-set 3-printer-get
 32212                                  ;				      4-printer-set-flags,5-printer-get-flags)
 32213                                  ;		DS:DX is user string pointer (calls 1,2)
 32214                                  ;		ES:DI is user buffer (call 3)
 32215                                  ;		BX is assign index (calls 2,3,4,5)
 32216                                  ;		CX is user number (call 1)
 32217                                  ;		DX is flag word (call 4)
 32218                                  ;   Outputs:	If AL = 0 then the current user string is written to DS:DX
 32219                                  ;			and user CX is set to the user number
 32220                                  ;		If AL = 3 then CX bytes have been put at input ES:DI
 32221                                  ;		If AL = 5 then DX is flag word
 32222                                  ;----------------------------------------------------------------------------
 32223                                  
 32224                                  _$UserOper:
 32225                                  	; 05/08/2018 - Retro DOS v3.0
 32226                                  	; MSDOS 6.0 (& MSDOS 3.3)
 32227 00006904 50                      	PUSH	AX
 32228 00006905 2C01                    	SUB	AL,1			; quick dispatch on 0,1
 32229 00006907 58                      	POP	AX
 32230 00006908 7211                    	JB	short UserGet 		; return to user the string
 32231 0000690A 742E                    	JZ	short UserSet 		; set the current user
 32232 0000690C 3C05                    	CMP	AL,5			; test for 2,3,4 or 5
 32233 0000690E 763D                    	JBE	short UserPrint		; yep
 32234                                  	;mov	byte [ss:EXTERR_LOCUS],1
 32235 00006910 36C606[D102]01          	MOV	byte [SS:EXTERR_LOCUS],errLOC_Unk ;smr;SS Override 
 32236                                  					; Extended Error Locus
 32237                                  	;error	error_invalid_function	; not 0,1,2,3
 32238                                  	;mov	al,1
 32239 00006916 B001                    	MOV	AL,error_invalid_function
 32240                                  useroper_error:
 32241 00006918 E9EEAD                  	JMP	SYS_RET_ERR
 32242                                  
 32243                                  UserGet:
 32244                                  ; Transfer MYNAME to DS:DX
 32245                                  ; Set Return CX to MYNUM
 32246 0000691B 1E                      	PUSH	DS			; switch registers
 32247 0000691C 07                      	POP	ES
 32248 0000691D 89D7                    	MOV	DI,DX			; destination
 32249 0000691F 368B0E[0E00]            	MOV	CX,[SS:MYNUM]		; Get number	;smr;SS Override
 32250 00006924 E8E4AC                  	call	Get_User_Stack
 32251 00006927 894C04                  	MOV	[SI+user_env.user_CX],CX ; Set number return
 32252 0000692A 16                      	push	ss			; point to DOSDATA
 32253 0000692B 1F                      	pop	ds
 32254 0000692C BE[B302]                	MOV	SI,MYNAME		; point source to user string
 32255                                  UserMove:
 32256 0000692F B90F00                  	MOV	CX,15
 32257 00006932 F3A4                    	REP	MOVSB			; blam.
 32258 00006934 31C0                    	XOR	AX,AX			; 16th byte is 0
 32259 00006936 AA                      	STOSB
 32260                                  UserBye:
 32261 00006937 E9C3AD                  	jmp	SYS_RET_OK		; no errors here
 32262                                  
 32263                                  UserSet:
 32264                                  ; Transfer DS:DX to MYNAME
 32265                                  ; CX to MYNUM
 32266 0000693A 36890E[0E00]            	MOV	[SS:MYNUM],CX				;smr;SS Override
 32267 0000693F 89D6                    	MOV	SI,DX			; user space has source
 32268 00006941 16                      	push	ss
 32269 00006942 07                      	pop	es
 32270 00006943 BF[B302]                	MOV	DI,MYNAME		; point dest to user string
 32271 00006946 36FE06[B202]            	INC	byte [SS:DIFFNAM]	; signal change ;smr;SS Override
 32272 0000694B EBE2                    	JMP	short UserMove
 32273                                  
 32274                                  UserPrint:
 32275                                  
 32276                                  ;IF NOT Installed
 32277                                  ;	transfer PRINTER_GETSET_STRING
 32278                                  ;ELSE
 32279 0000694D 50                      	PUSH	AX
 32280                                  	;mov	ax,111Fh
 32281                                  	;MOV	AX,(MultNET SHL 8) OR 31
 32282 0000694E B81F11                  	mov	ax,(MultNET<<8)|31
 32283 00006951 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - PRINTER SETUP
 32284                                  			; STACK: WORD function
 32285                                  			; Return: CF set on error, AX = error code
 32286                                  			; STACK unchanged
 32287 00006953 5A                      	POP	DX			; Clean stack
 32288 00006954 7302                    	JNC	short OKPA
 32289 00006956 EBC0                    	jmp	short useroper_error
 32290                                  OKPA:
 32291 00006958 EBDD                    	jmp	short UserBye
 32292                                  ;ENDIF
 32293                                  
 32294                                  
 32295                                  ;Break	<GetVisDrv - return visible drive>
 32296                                  ;----------------------------------------------------------------------------
 32297                                  ;   GetVisDrv - correctly map non-spliced inuse drives
 32298                                  ;
 32299                                  ;   Inputs:	AL has drive identifier (0=default)
 32300                                  ;   Outputs:	Carry Set - invalid drive/macro
 32301                                  ;		Carry Clear - AL has physical drive (0=A)
 32302                                  ;		    ThisCDS points to CDS
 32303                                  ;   Registers modified: AL
 32304                                  ;----------------------------------------------------------------------------
 32305                                  
 32306                                  GetVisDrv:
 32307                                  	; 05/08/2018 - Retro DOS v3.0
 32308                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 6839h
 32309 0000695A E81400                  	CALL	GETTHISDRV		; get inuse drive
 32310 0000695D 72A4                    	jc	short RET45
 32311 0000695F 1E                      	push	ds
 32312 00006960 56                      	push	si
 32313 00006961 36C536[3A05]            	LDS	SI,[SS:THISCDS]			;smr;SS Override
 32314                                  	;test	word [si+67],2000h
 32315 00006966 F744430020              	TEST	word [SI+curdir.flags],curdir_splice
 32316 0000696B 5E                      	pop	si
 32317 0000696C 1F                      	pop	ds
 32318 0000696D 7494                    	jz	short RET45		; if not spliced, return OK
 32319                                  	; MSDOS 6.0
 32320                                  	;MOV	[SS:DrvErr],error_invalid_drive ;IFS. ;AN000;smr;SS Override
 32321                                  	;
 32322 0000696F F9                      	STC				; signal error
 32323 00006970 C3                      	retn
 32324                                  
 32325                                  ;Break <Getthisdrv - map a drive designator (0=def, 1=A...)>
 32326                                  ;----------------------------------------------------------------------------
 32327                                  ;   GetThisDrv - look through a set of macros and return the current drive and
 32328                                  ;	macro pointer
 32329                                  ;
 32330                                  ;   Inputs:	AL has drive identifier (1=A, 0=default)
 32331                                  ;   Outputs:
 32332                                  ;		Carry Set - invalid drive/macro
 32333                                  ;		Carry Clear - AL has physical drive (0=A)
 32334                                  ;		   ThisCDS points to macro
 32335                                  ;   Registers modified: AL
 32336                                  ;----------------------------------------------------------------------------
 32337                                  
 32338                                  GETTHISDRV:
 32339                                  	; 05/08/2018
 32340                                  	; 12/07/2018 - Retro DOS v3.0
 32341                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 6850h
 32342                                  	; MSDOS 3.3 (& MSDOS 6.0)
 32343 00006971 08C0                    	OR	AL,AL			; are we using default drive?
 32344 00006973 7506                    	JNZ	SHORT GTD10		; no, go get the CDS pointers
 32345 00006975 36A0[E402]              	MOV	AL,[SS:CURDRV]		; get the current drive
 32346                                  	;INC	ax			; Counteract next instruction
 32347                                  	; 04/09/2018
 32348 00006979 FEC0                    	inc	al
 32349                                  GTD10:	
 32350                                  	;DEC	ax			; 0 = A
 32351 0000697B FEC8                    	dec	al
 32352 0000697D 1E                      	PUSH	DS			; save world
 32353 0000697E 56                      	PUSH	SI
 32354                                  	;mov	byte [ss:EXTERR_LOCUS],2
 32355 0000697F 36C606[D102]02          	MOV	BYTE [SS:EXTERR_LOCUS],errLOC_Disk		;smr;SS Override
 32356 00006985 36F606[0D05]FF          	TEST	BYTE [SS:FSHARING],-1	; Logical or Physical?	;smr;SS Override
 32357 0000698B 7421                    	JZ	SHORT GTD20		; Logical
 32358 0000698D 50                      	PUSH	AX
 32359 0000698E 06                      	PUSH	ES
 32360 0000698F 57                      	PUSH	DI
 32361 00006990 36C706[3A05][9504]      	MOV	WORD [SS:THISCDS],DUMMYCDS ;smr;SS Override
 32362 00006997 368C0E[3C05]            	mov	[SS:THISCDS+2],CS ; MSDOS 3.3
 32363                                  	;MOV	[SS:THISCDS+2],SS	;ThisCDS = &DummyCDS;smr;
 32364 0000699C 0441                    	ADD	AL,'A'
 32365 0000699E E816FF                  	CALL	InitCDS			;	InitCDS(c);
 32366                                  	;test	word [es:di+67],4000h
 32367 000069A1 26F745430040            	TEST	WORD [ES:DI+curdir.flags],curdir_inuse	; Clears carry
 32368 000069A7 5F                      	POP	DI
 32369 000069A8 07                      	POP	ES
 32370 000069A9 58                      	POP	AX
 32371 000069AA 740E                    	JZ	SHORT GTD30		; Not a physical drive.
 32372 000069AC EB13                    	JMP	SHORT GTDX		; carry clear
 32373                                  GTD20:
 32374 000069AE E81300                  	CALL	GetCDSFromDrv
 32375 000069B1 7207                    	JC	SHORT GTD30	; Unassigned CDS -> return error already set
 32376                                  	;test	word [si+43h],4000h
 32377 000069B3 F744430040              	TEST	WORD [SI+curdir.flags],curdir_inuse ; Clears Carry
 32378 000069B8 7507                    	JNZ	SHORT GTDX		; carry clear
 32379                                  GTD30:	
 32380                                  	; 14/08/2018
 32381                                  	;MOV	AL,error_invalid_drive	; invalid FAT drive
 32382                                  	;MOV	BYTE [ss:DrvErr],AL	; save this for IOCTL
 32383 000069BA 36C606[D102]01          	MOV	BYTE [ss:EXTERR_LOCUS],errLOC_Unk
 32384 000069C0 F9                      	STC
 32385                                  GTDX:	
 32386 000069C1 5E                      	POP	SI			; restore world
 32387 000069C2 1F                      	POP	DS
 32388 000069C3 C3                      	RETN
 32389                                   
 32390                                  
 32391                                  ;Break <GetCDSFromDrv - convert a drive number to a CDS pointer>
 32392                                  ;----------------------------------------------------------------------------
 32393                                  ;   GetCDSFromDrv - given a physical drive number, convert it to a CDS
 32394                                  ;	pointer, returning an error if the drive number is greater than the
 32395                                  ;	number of CDS's
 32396                                  ;
 32397                                  ;   Inputs:	AL is physical unit # A=0...
 32398                                  ;   Outputs:	Carry Set if Bad Drive
 32399                                  ;		Carry Clear
 32400                                  ;		    DS:SI -> CDS
 32401                                  ;		    [THISCDS] = DS:SI
 32402                                  ;   Registers modified: DS,SI
 32403                                  ;----------------------------------------------------------------------------
 32404                                  
 32405                                  GetCDSFromDrv:
 32406 000069C4 363A06[4700]            	CMP	AL,[SS:CDSCOUNT]	; is this a valid designator;smr;SS Override
 32407 000069C9 7202                    	JB	SHORT GetCDS		; yes, go get the macro
 32408 000069CB F9                      	STC				; signal error
 32409 000069CC C3                      	RETN				; bye
 32410                                  GetCDS:
 32411 000069CD 53                      	PUSH	BX
 32412 000069CE 50                      	PUSH	AX
 32413 000069CF 36C536[3C00]            	LDS	SI,[SS:CDSADDR]		; get pointer to table	;smr;SS Override
 32414                                  	;mov	bl,81
 32415 000069D4 B351                    	MOV	BL,curdir.size		; size in convenient spot
 32416 000069D6 F6E3                    	MUL	BL			; get net offset
 32417 000069D8 01C6                    	ADD	SI,AX			; convert to true pointer
 32418 000069DA 368936[3A05]            	MOV	[SS:THISCDS],SI		; store convenient offset;smr;SS Override
 32419 000069DF 368C1E[3C05]            	MOV	[SS:THISCDS+2],DS	; store convenient segment;smr;SS Override
 32420 000069E4 58                      	POP	AX
 32421 000069E5 5B                      	POP	BX
 32422 000069E6 F8                      	CLC				; no error
 32423 000069E7 C3                      	RETN				; bye!
 32424                                  
 32425                                  ;============================================================================
 32426                                  ; MACRO2.ASM, MSDOS 6.0, 1991
 32427                                  ;============================================================================
 32428                                  ; Retro	DOS v3.0 - 12/07/2018
 32429                                  
 32430                                  ;BREAK <TransFCB - convert an FCB into a path, doing substitution>
 32431                                  ;----------------------------------------------------------------------------
 32432                                  ;   TransFCB - Copy an FCB from DS:DX into a reserved area doing all of the
 32433                                  ;       gritty substitution.
 32434                                  ;
 32435                                  ;   Inputs:     DS:DX - pointer to FCB
 32436                                  ;               ES:DI - point to destination
 32437                                  ;   Outputs:    Carry Set - invalid path in final map
 32438                                  ;               Carry Clear - FCB has been mapped into ES:DI
 32439                                  ;                   Sattrib is set from possibly extended FCB
 32440                                  ;                   ExtFCB set if extended FCB found
 32441                                  ;   Registers modified: most
 32442                                  ;----------------------------------------------------------------------------
 32443                                  
 32444                                  TransFCB:
 32445                                  	; 12/07/2018 - Retro DOS v3.0
 32446                                  	;LocalVar FCBTmp,16
 32447                                  	;ENTER
 32448 000069E8 55                      	push	bp
 32449 000069E9 89E5                    	mov	bp,sp
 32450                                  	;sub	sp,15	; MSDOS 3.3
 32451 000069EB 83EC10                  	sub	sp,16	; MSDOS 6.0
 32452 000069EE 16                      	push	ss
 32453 000069EF 07                      	pop	es
 32454 000069F0 06                      	push	es
 32455 000069F1 57                      	push	di
 32456                                  	;lea	di,[bp-15] ; MSDOS 3.3
 32457                                  	;LEA	DI,FCBTmp 
 32458 000069F2 8D7EF0                  	lea	di,[bp-16]		; point to FCB temp area
 32459 000069F5 36C606[0705]00          	mov	byte [SS:EXTFCB],0	; no extended FCB found ;smr;SS Override
 32460 000069FB 36C606[0805]00          	mov	byte [SS:SATTRIB],0	; default search attributes;smr;SS Override
 32461 00006A01 E8C5BF                  	call	GetExtended             ; get FCB, extended or not
 32462 00006A04 740D                    	jz	short GetDrive		; not an extended FCB, get drive
 32463 00006A06 8A44FF                  	mov	AL,[SI-1]               ; get attributes
 32464 00006A09 36A2[0805]              	mov	[SS:SATTRIB],AL		; store search attributes;smr;SS Override
 32465 00006A0D 36C606[0705]FF          	mov	byte [SS:EXTFCB],-1	; signal extended FCB  ;smr;SS Override
 32466                                  GetDrive:
 32467 00006A13 AC                      	lodsb				; get drive byte
 32468 00006A14 E85AFF                  	call	GETTHISDRV
 32469 00006A17 722C                    	jc	short BadPack
 32470 00006A19 E87C03                  	call	TextFromDrive           ; convert 0-based drive to text
 32471                                  ;
 32472                                  ; Scan the source to see if there are any illegal chars
 32473                                  ;
 32474 00006A1C BB[1613]                	mov	bx,CharType		; load lookup table
 32475 00006A1F B90B00                  	mov	cx,11
 32476 00006A22 56                      	push	si			; back over name, ext
 32477                                  FCBScan:
 32478 00006A23 AC                      	lodsb				; get a byte
 32479                                  	; 09/08/2018
 32480                                  	;xlat	byte [es:bx]
 32481 00006A24 26D7                    	es	xlat			; get flags
 32482                                  	;test	al,8	
 32483 00006A26 A808                    	test	al,FFCB
 32484 00006A28 741B                    	jz	short BadPack
 32485                                  NextCh: 
 32486 00006A2A E2F7                    	loop	FCBScan
 32487 00006A2C 5E                      	pop	si
 32488 00006A2D 89FB                    	mov	bx,di
 32489 00006A2F E8E5C3                  	call	PackName                ; crunch the path
 32490 00006A32 5F                      	pop	di			; get original destination
 32491 00006A33 07                      	pop	es
 32492 00006A34 16                      	push	ss			; get DS addressability
 32493 00006A35 1F                      	pop	ds
 32494                                  	;lea	si,[bp-15] ; MSDOS 3.3
 32495                                  	;LEA	SI,FCBTmp		; point at new pathname
 32496 00006A36 8D76F0                  	lea	si,[bp-16]
 32497 00006A39 803F00                  	cmp	byte [bx],0
 32498 00006A3C 7407                    	jz	short BadPack
 32499 00006A3E 55                      	push	bp
 32500 00006A3F E80E00                  	call	TransPathSet            ; convert the path
 32501 00006A42 5D                      	pop	bp
 32502 00006A43 7303                    	jnc	short FCBRet		; bye with transPath error code
 32503                                  BadPack:
 32504 00006A45 F9                      	STC
 32505                                  	;mov	al,3
 32506 00006A46 B003                    	MOV     AL,error_path_not_found
 32507                                  FCBRet: 
 32508                                  	;LEAVE
 32509 00006A48 89EC                    	mov	sp,bp
 32510 00006A4A 5D                      	pop	bp
 32511                                  TransPath_retn:
 32512 00006A4B C3                      	retn
 32513                                  
 32514                                  ; 12/07/2018 - Retro DOS v3.0
 32515                                  
 32516                                  ;BREAK <TransPath - copy a path, do string sub and put in current dir>
 32517                                  ;----------------------------------------------------------------------------
 32518                                  ;
 32519                                  ;   TransPath - copy a path from DS:SI to ES:DI, performing component string
 32520                                  ;       substitution, insertion of current directory and fixing . and ..
 32521                                  ;       entries. Perform splicing. Allow input string to match splice
 32522                                  ;       exactly.
 32523                                  ;
 32524                                  ;   TransPathSet - Same as above except No splicing is performed if input path
 32525                                  ;       matches splice.
 32526                                  ;
 32527                                  ;   TransPathNoSet - No splicing/local using is performed at all.
 32528                                  ;
 32529                                  ;   The following anomalous behaviour is required:
 32530                                  ;
 32531                                  ;       Drive letters on devices are ignored. (set up DummyCDS)
 32532                                  ;       Paths on devices are ignored. (truncate to 0-length)
 32533                                  ;       Raw net I/O sets ThisCDS => NULL.
 32534                                  ;       fSharing => dummyCDS and no subst/splice. Only canonicalize.
 32535                                  ;
 32536                                  ;   Other behaviour:
 32537                                  ;
 32538                                  ;       ThisCDS set up.
 32539                                  ;       FatRead done on local CDS.
 32540                                  ;       ValidateCDS done on local CDS.
 32541                                  ;
 32542                                  ;   Brief flowchart:
 32543                                  ;
 32544                                  ;       if fSharing then
 32545                                  ;           set up DummyCDS (ThisCDS)
 32546                                  ;           canonicalize (sets cMeta)
 32547                                  ;           splice
 32548                                  ;           fatRead
 32549                                  ;           return
 32550                                  ;       if \\ or d:\\ lead then
 32551                                  ;           set up null CDS (ThisCDS)
 32552                                  ;           canonicalize (sets cMeta)
 32553                                  ;           return
 32554                                  ;       if device then
 32555                                  ;           set up dummyCDS (ThisCDS)
 32556                                  ;           canonicalize (sets cMeta)
 32557                                  ;           return
 32558                                  ;       if file then
 32559                                  ;           getCDS (sets (ThisCDS) from name)
 32560                                  ;           validateCDS (may reset current dir)
 32561                                  ;           Copy current dir
 32562                                  ;           canonicalize (set cMeta)
 32563                                  ;           splice
 32564                                  ;           generate correct CDS (ThisCDS)
 32565                                  ;           if local then
 32566                                  ;               fatread
 32567                                  ;           return
 32568                                  ;
 32569                                  ;   Inputs:     DS:SI - point to ASCIZ string path
 32570                                  ;               DI - point to buffer in DOSDATA
 32571                                  ;   Outputs:    Carry Set - invalid path specification: too many .., bad
 32572                                  ;                   syntax, etc. or user FAILed to I 24.
 32573                                  ;               WFP_Start - points to beginning of buffer
 32574                                  ;               Curr_Dir_End - points to end of current dir in path
 32575                                  ;               DS - DOSDATA
 32576                                  ;   Registers modified: most
 32577                                  ;
 32578                                  ;----------------------------------------------------------------------------
 32579                                  
 32580                                  TransPath:
 32581 00006A4C 30C0                    	XOR     AL,AL
 32582 00006A4E EB02                    	JMP     SHORT SetSplice
 32583                                  TransPathSet:
 32584 00006A50 B0FF                    	MOV     AL,-1
 32585                                  SetSplice:
 32586 00006A52 36A2[F802]              	MOV	[SS:NoSetDir],AL	;   NoSetDir = !fExact; ;smr;SS Override
 32587 00006A56 B0FF                    	MOV     AL,-1
 32588                                  TransPathNoSet:
 32589 00006A58 36A2[0C05]              	MOV	[SS:FSPLICE],AL		;   fSplice = TRUE;     ;smr;SS Override
 32590 00006A5C 36C606[1505]FF          	MOV	byte [ss:CMETA],-1      			;smr;SS Override
 32591 00006A62 36893E[4A05]            	MOV     [SS:WFP_START],DI 				;smr;SS Override
 32592 00006A67 36C706[4E05]FFFF        	MOV	word [SS:CURR_DIR_END],-1 ; crack from start	;smr;SS Override
 32593 00006A6E 16                      	push	ss
 32594 00006A6F 07                      	pop	es
 32595                                  	;lea	bp,[di+134]
 32596 00006A70 8DAD8600                	LEA     BP,[DI+TEMPLEN]         ; end of buffer
 32597                                  ;
 32598                                  ; if this is through the server dos call, fsharing is set. We set up a
 32599                                  ; dummy cds and let the operation go.
 32600                                  ;
 32601 00006A74 36F606[0D05]FF          	TEST	byte [SS:FSHARING],-1	; if no sharing		;smr;SS Override
 32602 00006A7A 7435                    	JZ	short CheckUNC		; skip to UNC check
 32603                                  ;
 32604                                  ; ES:DI point to buffer
 32605                                  ;
 32606 00006A7C E80203                  	CALL	DriveFromText           ; get drive and advance DS:SI
 32607 00006A7F E8EFFE                  	call	GETTHISDRV              ; Set ThisCDS and convert to 0-based
 32608 00006A82 722A                    	jc	short NoPath
 32609 00006A84 E81103                  	CALL	TextFromDrive		; drop in new
 32610 00006A87 8D5D01                  	LEA	BX,[DI+1]               ; backup limit
 32611 00006A8A E83801                  	CALL	Canonicalize            ; copy and canonicalize
 32612 00006A8D 72BC                    	jc	short TransPath_retn	; errors
 32613                                  ;
 32614                                  ; Perform splices for net guys.
 32615                                  ;
 32616 00006A8F 16                      	push	ss
 32617 00006A90 1F                      	pop	ds
 32618 00006A91 8B36[4A05]              	MOV     SI,[WFP_START] 		; point to name
 32619 00006A95 F606[0C05]FF            	TEST	byte [FSPLICE],-1
 32620 00006A9A 7403                    	JZ	short NoServerSplice
 32621 00006A9C E83602                  	CALL    Splice
 32622                                  NoServerSplice:
 32623 00006A9F 16                      	push	ss
 32624 00006AA0 1F                      	pop	ds                      ; for FATREAD
 32625 00006AA1 C43E[3A05]              	LES     DI,[THISCDS]		; for fatread
 32626 00006AA5 E8C4B5                  	call	EcritDisk
 32627 00006AA8 E810F1                  	call	FATREAD_CDS
 32628 00006AAB E8C6B5                  	call	LcritDisk
 32629                                  NoPath:
 32630                                  	;mov	al,3
 32631 00006AAE B003                    	MOV     AL,error_path_not_found ; Set up for possible bad path error
 32632 00006AB0 C3                      	retn				; any errors are in Carry flag
 32633                                  
 32634                                  ;
 32635                                  ; Let the network decide if the name is for a spooled device. It will map
 32636                                  ; the name if so.
 32637                                  ;
 32638                                  CheckUNC:
 32639 00006AB1 36C706[3A05]FFFF        	MOV     WORD [SS:THISCDS],-1	; NULL thisCDS		;smr;SS Override
 32640                                  	;CallInstall NetSpoolCheck,MultNET,35
 32641 00006AB8 B82311                  	mov	ax,1123h
 32642 00006ABB CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - QUALIFY REMOTE FILENAME
 32643                                  			; DS:SI -> ASCIZ filename to canonicalize
 32644                                  			; ES:DI -> 128-byte buffer for qualified name
 32645                                  			; Return: CF set if not resolved
 32646 00006ABD 7329                    	JNC	short UNCDone
 32647                                  ;
 32648                                  ; At this point the name is either a UNC-style name (prefixed with two leading
 32649                                  ; \\s) or is a local file/device. Remember that if a net-spooled device was
 32650                                  ; input, then the name has been changed to the remote spooler by the above net
 32651                                  ; call. Also, there may be a drive in front of the \\.
 32652                                  ;
 32653                                  NO_CHECK:
 32654 00006ABF E8BF02                  	CALL    DriveFromText		; eat drive letter
 32655 00006AC2 50                      	PUSH    AX                      ; save it
 32656 00006AC3 8B04                    	MOV     AX,[SI]			; get first two bytes of path
 32657 00006AC5 E880EB                  	call    PATHCHRCMP              ; convert to normal form
 32658 00006AC8 86E0                    	XCHG    AH,AL                   ; swap for second byte
 32659 00006ACA E87BEB                  	call    PATHCHRCMP              ; convert to normal form
 32660 00006ACD 751F                    	JNZ	short CheckDevice	; not a path char
 32661 00006ACF 38C4                    	CMP     AH,AL                   ; are they same?
 32662 00006AD1 751B                    	JNZ	short CheckDevice	; nope
 32663                                  ;
 32664                                  ; We have a UNC request. We must copy the string up to the beginning of the
 32665                                  ; local machine root path
 32666                                  ;
 32667                                  
 32668 00006AD3 58                      	POP     AX
 32669 00006AD4 A5                      	MOVSW                           ; get the lead \\.
 32670                                  UNCCpy:
 32671 00006AD5 AC                      	LODSB                           ; get a byte
 32672 00006AD6 E833EB                   	call	UCase                   ;AN000;; convert the char
 32673 00006AD9 08C0                    	OR      AL,AL
 32674 00006ADB 740E                    	JZ	short UNCTerm		; end of string. All done.
 32675 00006ADD E868EB                  	call    PATHCHRCMP              ; is it a path char?
 32676 00006AE0 89FB                    	MOV     BX,DI                   ; backup position
 32677 00006AE2 AA                      	STOSB
 32678 00006AE3 75F0                    	JNZ	short UNCCpy		; no, go copy
 32679 00006AE5 E8DD00                  	CALL    Canonicalize            ; wham (and set cMeta)
 32680                                  UNCDone:
 32681 00006AE8 16                      	push	ss
 32682 00006AE9 1F                      	pop	ds
 32683 00006AEA C3                       	retn				; return error code
 32684                                  UNCTerm:
 32685 00006AEB AA                      	STOSB                           ;AN000;
 32686 00006AEC EBFA                    	JMP	short UNCDone		;AN000;
 32687                                  
 32688                                  CheckDevice:
 32689                                  ;
 32690                                  ; Check DS:SI for device. First eat any path stuff
 32691                                  ;
 32692 00006AEE 58                      	POP     AX                      ; retrieve drive info
 32693 00006AEF 803C00                  	CMP     BYTE [SI],0		; check for null file
 32694 00006AF2 7504                    	JNZ	short CheckPath
 32695                                  	;mov	al,2 
 32696 00006AF4 B002                    	MOV     AL,error_file_not_found ; bad file error
 32697 00006AF6 F9                      	STC                             ; signal error on null input
 32698 00006AF7 C3                      	RETN				; bye!
 32699                                  CheckPath:
 32700 00006AF8 50                      	push	ax
 32701 00006AF9 55                      	push	bp			; save drive number
 32702                                  
 32703                                  	; MSDOS 6.0
 32704                                  ;;;BUGBUG BUG 10-26-1992 scottq
 32705                                  ;;;This is a hack for the CDROM extensions (2.1) who scan looking
 32706                                  ;;;for the following POP BP == 5Dh (restore <bp,ax>).
 32707                                  ;;;The problem is that a direct call to CheckThisDevice can (and did)
 32708                                  ;;;end up having a 5D in the opcode's displacement field. The
 32709                                  ;;;scanning code would choke on this thinking it was a POP BP instruction.
 32710                                  ;;;
 32711                                  ;;;What we do here is do a call to a function that is less than 5Dh
 32712                                  ;;;bytes away (and assert its not exactly 5D away) that jmps (transfers)
 32713                                  ;;;to the correct function. This cannot accidently insert a 5Dh.
 32714                                  ;;;
 32715                                  ;;;More info:
 32716                                  ;;;  This particular scan is begun at the UNCdone label for 32 bytes
 32717                                  ;;;looking for pop BP, so you cannot put a 5D between here and there.
 32718                                  ;;;
 32719 00006AFA E82000                  	call	no5Dshere
 32720                                  start5Dhack:
 32721                                  ;following is replaced with 5Dhack code--Invoke  CheckThisDevice         
 32722                                  backfrom5Dhack:
 32723 00006AFD 5D                      	pop	bp
 32724 00006AFE 58                      	pop	ax			; get drive letter back
 32725 00006AFF 731F                    	JNC	short DoFile		; yes we have a file.
 32726                                  ;
 32727                                  ; We have a device. AX has drive letter. At this point we may fake a CDS ala
 32728                                  ; sharing DOS call. We know by getting here that we are NOT in a sharing DOS
 32729                                  ; call.
 32730                                  ;
 32731 00006B01 36C606[0D05]FF          	MOV	byte [SS:FSHARING],-1	; simulate sharing dos call;smr;SS Override
 32732 00006B07 E867FE                  	call	GETTHISDRV              ; set ThisCDS and init DUMMYCDS
 32733 00006B0A 36C606[0D05]00          	MOV     byte [SS:FSHARING],0	;                       ;smr;SS Override
 32734                                  ;
 32735                                  ; Now that we have noted that we have a device, we put it into a form that
 32736                                  ; getpath can understand. Normally getpath requires d:\ to begin the input
 32737                                  ; string. We relax this to state that if the d:\ is present then the path
 32738                                  ; may be a file. If D:/ (note the forward slash) is present then we have
 32739                                  ; a device.
 32740                                  ;
 32741 00006B10 E88502                  	CALL    TextFromDrive
 32742 00006B13 B02F                    	MOV     AL,'/'                  ; path sep.
 32743 00006B15 AA                      	STOSB
 32744 00006B16 E839B4                  	call	StrCpy			; move remainder of string
 32745                                  
 32746 00006B19 F8                      	CLC                             ; everything OK.
 32747 00006B1A 16                      	push	ss
 32748 00006B1B 1F                      	pop	ds                      ; remainder of OK stuff
 32749                                  DoFile_retn:
 32750 00006B1C C3                      	retn
 32751                                  
 32752                                  no5Dshere:
 32753                                  	; 10/08/2018
 32754 00006B1D E902E1                  	jmp	CheckThisDevice		; snoop for device
 32755                                  
 32756                                  ;.erre (no5Dshere - start5Dhack - 5D)
 32757                                  
 32758                                  ;
 32759                                  ; We have a file. Get the raw CDS.
 32760                                  ;
 32761                                  
 32762                                  DoFile:
 32763                                  	; MSDOS 3.3 (& MSDOS 6.0)
 32764                                  
 32765 00006B20 E837FE                  	call	GetVisDrv               ; get proper CDS
 32766                                  	;mov	al,3 
 32767 00006B23 B003                    	MOV     AL,error_path_not_found ; Set up for possible bad file error
 32768 00006B25 72F5                    	jc	short DoFile_retn  ; CARRY set -> bogus drive/spliced
 32769                                  ;
 32770                                  ; ThisCDS has correct CDS. DS:SI advanced to point to beginning of path/file.
 32771                                  ; Make sure that CDS has valid directory; ValidateCDS requires a temp buffer
 32772                                  ; Use the one that we are going to use (ES:DI).
 32773                                  ;
 32774                                  	;SAVE    <DS,SI,ES,DI>		; save all string pointers.
 32775 00006B27 1E                      	push	ds
 32776 00006B28 56                      	push	si
 32777 00006B29 06                      	push	es
 32778 00006B2A 57                      	push	di
 32779 00006B2B E840E0                  	call	ValidateCDS             ; poke CDS and make everything OK
 32780                                  	;RESTORE <DI,ES,SI,DS>		; get back pointers
 32781 00006B2E 5F                      	pop	di
 32782 00006B2F 07                      	pop	es
 32783 00006B30 5E                      	pop	si
 32784 00006B31 1F                      	pop	ds
 32785                                  	;mov	al,3
 32786 00006B32 B003                    	MOV     AL,error_path_not_found ; Set up for possible bad path error
 32787                                  	;retc				; someone failed an operation
 32788 00006B34 72E6                    	jc	short DoFile_retn
 32789                                  ;
 32790                                  ; ThisCDS points to correct CDS. It contains the correct text of the
 32791                                  ; current directory. Copy it in.
 32792                                  ;
 32793 00006B36 1E                      	push	ds
 32794 00006B37 56                      	push	si
 32795 00006B38 36C536[3A05]            	LDS     SI,[SS:THISCDS]		; point to CDS	;smr;SS Override
 32796 00006B3D 89FB                    	MOV     BX,DI                   ; point to destination
 32797 00006B3F 035C4F                  	ADD     BX,[SI+curdir.end]	; point to backup limit
 32798                                  ;       LEA     SI,[SI+curdir.text]	; point to text
 32799                                  	;lea	bp,[di+134]
 32800 00006B42 8DAD8600                	LEA     BP,[DI+TEMPLEN]         ; regenerate end of buffer
 32801                                  					;AN000;
 32802 00006B46 E818B4                  	call	FStrCpy                 ; copy string. ES:DI point to end
 32803 00006B49 4F                      	DEC     DI                      ; point to NUL byte
 32804                                  
 32805                                  ;
 32806                                  ; Make sure that there is a path char at end.
 32807                                  ;
 32808 00006B4A B05C                    	MOV     AL,'\'
 32809 00006B4C 263845FF                	CMP     [ES:DI-1],AL
 32810 00006B50 7401                    	JZ	short GetOrig
 32811 00006B52 AA                      	STOSB
 32812                                  ;
 32813                                  ; Now get original string.
 32814                                  ;
 32815                                  GetOrig:
 32816 00006B53 4F                      	DEC     DI                      ; point to path char
 32817 00006B54 5E                      	pop	si
 32818 00006B55 1F                      	pop	ds
 32819                                  ;
 32820                                  ; BX points to the end of the root part of the CDS (at where a path char
 32821                                  ; should be). Now, we decide whether we use this root or extend it with the
 32822                                  ; current directory.  See if the input string begins with a leading ;
 32824 00006B56 E8D100                  	CALL    PathSep                 ; is DS:SI a path sep?
 32825 00006B59 7511                    	JNZ	short PathAssure	; no, DI is correct. Assure a path char
 32826 00006B5B 08C0                    	OR      AL,AL                   ; end of string?
 32827 00006B5D 7410                    	JZ	short DoCanon		; yes, skip.
 32828                                  ;
 32829                                  ; The string does begin with a \. Reset the beginning of the canonicalization
 32830                                  ; to this root. Make sure that there is a path char there and advance the
 32831                                  ; source string over all leading \'s.
 32832                                  ;
 32833 00006B5F 89DF                    	MOV     DI,BX                   ; back up to root point.
 32834                                  SkipPath:
 32835 00006B61 AC                      	LODSB
 32836 00006B62 E8E3EA                  	call    PATHCHRCMP
 32837 00006B65 74FA                    	JZ	short SkipPath
 32838 00006B67 4E                      	DEC     SI
 32839 00006B68 08C0                    	OR      AL,AL
 32840 00006B6A 7403                    	JZ	short DoCanon
 32841                                  ;
 32842                                  ; DS:SI start at some file name. ES:DI points at some path char. Drop one in
 32843                                  ; for yucks.
 32844                                  ;
 32845                                  PathAssure:
 32846 00006B6C B05C                    	MOV     AL,'\'
 32847 00006B6E AA                      	STOSB
 32848                                  ;
 32849                                  ; ES:DI point to the correct spot for canonicalization to begin.
 32850                                  ; BP is the max extent to advance DI
 32851                                  ; BX is the backup limit for ..
 32852                                  ;
 32853                                  DoCanon:
 32854 00006B6F E85300                  	CALL    Canonicalize            ; wham.
 32855                                  	;retc				; badly formatted path.
 32856 00006B72 72A8                    	jc	short DoFile_retn
 32857                                  
 32858                                  ;
 32859                                  ; The string has been moved to ES:DI. Reset world to DOS context, pointers
 32860                                  ; to wfp_start and do string substitution. BP is still the max position in
 32861                                  ; buffer.
 32862                                  ;
 32863 00006B74 16                      	push	ss
 32864 00006B75 1F                      	pop	ds
 32865 00006B76 8B3E[4A05]              	MOV     DI,[WFP_START]		; DS:SI point to string
 32866 00006B7A C536[3A05]              	LDS     SI,[THISCDS]		; point to CDS
 32867                                  ;       LEA     SI,[SI+curdir.text]	; point to text
 32868 00006B7E E81F02                  	CALL    PathPref                ; is there a prefix?
 32869 00006B81 7514                    	JNZ	short DoSplice		; no, do splice
 32870                                  ;
 32871                                  ; We have a match. Check to see if we ended in a path char.
 32872                                  ;
 32873 00006B83 8A44FF                  	MOV     AL,[SI-1]		; last char to match
 32874 00006B86 E8BFEA                  	call    PATHCHRCMP              ; did we end on a path char? (root)
 32875 00006B89 740C                    	JZ	short DoSplice		; yes, no current dir here.
 32876                                  Pathline:                               ; 2/13/KK
 32877 00006B8B 26803D00                	CMP     BYTE [ES:DI],0		; end at NUL?
 32878 00006B8F 7406                    	JZ	short DoSplice
 32879 00006B91 47                      	INC     DI                      ; point to after current path char
 32880 00006B92 36893E[4E05]            	MOV     [SS:CURR_DIR_END],DI	; point to correct spot ;smr;SS Override
 32881                                  ;
 32882                                  ; Splice the result.
 32883                                  ;
 32884                                  DoSplice:
 32885 00006B97 16                      	push	ss
 32886 00006B98 1F                      	pop	ds			; back to DOSDATA
 32887 00006B99 8B36[4A05]              	MOV     SI,[WFP_START]		; point to beginning of string
 32888 00006B9D 31C9                    	XOR     CX,CX
 32889 00006B9F F606[0C05]FF            	TEST	byte [FSPLICE],-1
 32890 00006BA4 7403                    	JZ	short SkipSplice
 32891 00006BA6 E82C01                  	CALL    Splice                  ; replaces in place.
 32892                                  SkipSplice:
 32893                                  ;
 32894                                  ; The final thing is to assure ourselves that a FATREAD is done on the local
 32895                                  ; device.
 32896                                  ;
 32897 00006BA9 16                      	push	ss
 32898 00006BAA 1F                      	pop	ds
 32899 00006BAB C43E[3A05]              	LES     DI,[THISCDS]		; point to correct drive
 32900                                  	;test	word [es:di+67],8000h
 32901 00006BAF 26F745430080            	TEST	word [ES:DI+curdir.flags],curdir_isnet
 32902 00006BB5 750D                    	JNZ	short Done		; net, no fatread necessary (retnz)
 32903 00006BB7 E30B                    	JCXZ    Done
 32904 00006BB9 E8B0B4                  	call	EcritDisk
 32905 00006BBC E8FCEF                  	call	FATREAD_CDS
 32906 00006BBF E8B2B4                  	call	LcritDisk
 32907                                  	;mov	al, 3
 32908 00006BC2 B003                    	MOV     AL,error_path_not_found ; Set up for possible bad path error
 32909                                  Done:   
 32910 00006BC4 C3                      	retn                         ; any errors in carry flag.
 32911                                  
 32912                                  ; 13/07/2018
 32913                                  
 32914                                  ;BREAK <Canonicalize - copy a path and remove . and .. entries>
 32915                                  ;----------------------------------------------------------------------------
 32916                                  ;   Canonicalize - copy path removing . and .. entries.
 32917                                  ;
 32918                                  ;   Inputs:     DS:SI - point to ASCIZ string path
 32919                                  ;               ES:DI - point to buffer
 32920                                  ;               BX - backup limit (offset from ES) points to slash
 32921                                  ;               BP - end of buffer
 32922                                  ;   Outputs:    Carry Set - invalid path specification: too many .., bad
 32923                                  ;                   syntax, etc.
 32924                                  ;               Carry Clear -
 32925                                  ;                   DS:DI - advanced to end of string
 32926                                  ;                   ES:DI - advanced to end of canonicalized form after nul
 32927                                  ;   Registers modified: AX CX DX (in addition to those above)
 32928                                  ;----------------------------------------------------------------------------
 32929                                  
 32930                                  Canonicalize:
 32931                                  ;
 32932                                  ; We copy all leading path separators.
 32933                                  ;
 32934 00006BC5 AC                      	LODSB                           ;   while (PathChr (*s))
 32935 00006BC6 E87FEA                  	call    PATHCHRCMP
 32936 00006BC9 7507                    	JNZ	short CanonDec
 32937 00006BCB 39EF                    	CMP     DI,BP                   ;       if (d > dlim)
 32938 00006BCD 7319                    	JAE	short CanonBad		;           goto error;
 32939 00006BCF AA                      	STOSB
 32940 00006BD0 EBF3                    	JMP	short Canonicalize	;           *d++ = *s++;
 32941                                  CanonDec:
 32942 00006BD2 4E                      	DEC     SI
 32943                                  ;
 32944                                  ; Main canonicalization loop.  We come here with DS:SI pointing to a textual
 32945                                  ; component (no leading path separators) and ES:DI being the destination
 32946                                  ; buffer.
 32947                                  ;
 32948                                  CanonLoop:
 32949                                  ;
 32950                                  ; If we are at the end of the source string, then we need to check to see that
 32951                                  ; a potential drive specifier is correctly terminated with a path sep char.
 32952                                  ; Otherwise, do nothing
 32953                                  ;
 32954 00006BD3 31C0                    	XOR     AX,AX
 32955 00006BD5 3804                    	CMP     [SI],AL                 ;       if (*s == 0) {
 32956 00006BD7 751A                    	JNZ	short DoComponent
 32957 00006BD9 26807DFF3A              	CMP     BYTE [ES:DI-1],':'	;           if (d[-1] == ':')
 32958 00006BDE 7505                    	JNZ	short DoTerminate
 32959 00006BE0 B05C                    	MOV     AL,'\'                  ;               *d++ = '\';
 32960 00006BE2 AA                      	STOSB
 32961 00006BE3 88E0                    	MOV     AL,AH
 32962                                  DoTerminate:
 32963 00006BE5 AA                      	STOSB                           ;           *d++ = 0;
 32964 00006BE6 F8                      	CLC                             ;           return (0);
 32965 00006BE7 C3                      	retn
 32966                                  
 32967                                  CanonBad:
 32968 00006BE8 E8CE01                  	CALL	ScanPathChar            ; check for path chars in rest of string
 32969                                  	;mov	al,3
 32970 00006BEB B003                    	MOV     AL,error_path_not_found ; Set up for bad path error
 32971 00006BED 7402                    	JZ	short PathEnc		; path character encountered in string
 32972                                  	;mov	al,2
 32973 00006BEF B002                    	MOV     AL,error_file_not_found ; Set bad file error
 32974                                  PathEnc:
 32975 00006BF1 F9                      	STC
 32976                                  CanonBad_retn:
 32977 00006BF2 C3                      	retn
 32978                                  ;
 32979                                  ; We have a textual component that we must copy.  We uppercase it and truncate
 32980                                  ; it to 8.3
 32981                                  ;
 32982                                  DoComponent:                            ;           }
 32983 00006BF3 E85100                  	CALL    CopyComponent		;       if (!CopyComponent (s, d))
 32984 00006BF6 72FA                    	jc	short CanonBad_retn	;           return (-1);
 32985                                  ;
 32986                                  ; We special case the . and .. cases.  These will be backed up.
 32987                                  ;
 32988                                  	;CMP	WORD PTR ES:[DI],'.' + (0 SHL 8)
 32989 00006BF8 26833D2E                	CMP	WORD [ES:DI],002Eh
 32990 00006BFC 7408                    	JZ	short Skip1
 32991                                  	;CMP	WORD PTR ES:[DI],'..'
 32992 00006BFE 26813D2E2E              	CMP     WORD [ES:DI],2E2Eh
 32993 00006C03 750A                    	JNZ	short CanonNormal
 32994 00006C05 4F                      	DEC     DI                      ;           d--;
 32995                                  Skip1:  
 32996 00006C06 E82B00                  	CALL    SkipBack                ;           SkipBack ();
 32997                                  	;mov	al,3
 32998 00006C09 B003                    	MOV     AL,error_path_not_found ; Set up for possible bad path error
 32999 00006C0B 72E5                    	jc	short CanonBad_retn
 33000 00006C0D EB02                    	JMP     short CanonPath         ;           }
 33001                                  ;
 33002                                  ; We have a normal path.  Advance destination pointer over it.
 33003                                  ;
 33004                                  CanonNormal:                            ;       else
 33005 00006C0F 01CF                    	ADD     DI,CX                   ;           d += ct;
 33006                                  ;
 33007                                  ; We have successfully copied a component.  We are now pointing at a path
 33008                                  ; sep char or are pointing at a nul or are pointing at something else.
 33009                                  ; If we point at something else, then we have an error.
 33010                                  ;
 33011                                  CanonPath:
 33012 00006C11 E81600                  	CALL    PathSep
 33013 00006C14 75D2                    	JNZ	short CanonBad		; something else...
 33014                                  ;
 33015                                  ; Copy the first path char we see.
 33016                                  ;
 33017 00006C16 AC                      	LODSB                           ; get the char
 33018 00006C17 E82EEA                  	call    PATHCHRCMP              ; is it path char?
 33019 00006C1A 75B6                    	JNZ	short CanonDec		; no, go test for nul
 33020 00006C1C 39EF                    	CMP     DI,BP                   ; beyond buffer end?
 33021 00006C1E 73C8                    	JAE	short CanonBad		; yep, error.
 33022 00006C20 AA                      	STOSB                           ; copy the one byte
 33023                                  ;
 33024                                  ; Skip all remaining path chars
 33025                                  ;
 33026                                  CanonPathLoop:
 33027 00006C21 AC                      	LODSB                           ; get next byte
 33028 00006C22 E823EA                  	call    PATHCHRCMP              ; path char again?
 33029 00006C25 74FA                    	JZ	short CanonPathLoop	; yep, grab another
 33030 00006C27 4E                      	DEC     SI                      ; back up
 33031 00006C28 EBA9                    	JMP	short  CanonLoop	; go copy component
 33032                                  
 33033                                  ;BREAK <PathSep - determine if char is a path separator>
 33034                                  ;----------------------------------------------------------------------------
 33035                                  ;   PathSep - look at DS:SI and see if char is / \ or NUL
 33036                                  ;   Inputs:     DS:SI - point to a char
 33037                                  ;   Outputs:    AL has char from DS:SI (/ => \)
 33038                                  ;               Zero set if AL is / \ or NUL
 33039                                  ;               Zero reset otherwise
 33040                                  ;   Registers modified: AL
 33041                                  ;----------------------------------------------------------------------------
 33042                                  
 33043                                  PathSep:
 33044 00006C2A 8A04                    	MOV     AL,[SI]                 ; get the character
 33045                                  PathSepGotCh:				; already have character
 33046 00006C2C 08C0                    	OR      AL,AL                   ; test for zero
 33047 00006C2E 74C2                    	jz	short CanonBad_retn	; return if equal to zero (NUL)
 33048 00006C30 E815EA                  	call    PATHCHRCMP              ; check for path character
 33049 00006C33 C3                      	retn				; and return HIS determination
 33050                                  
 33051                                  ;BREAK <SkipBack - move backwards to a path separator>
 33052                                  ;----------------------------------------------------------------------------
 33053                                  ;   SkipBack - look at ES:DI and backup until it points to a / ;   Inputs:     ES:DI - point to a char
 33055                                  ;               BX has current directory back up limit (point to a / \)
 33056                                  ;   Outputs:    ES:DI backed up to point to a path char
 33057                                  ;               AL has char from output ES:DI (path sep if carry clear)
 33058                                  ;               Carry set if illegal backup
 33059                                  ;               Carry Clear if ok
 33060                                  ;   Registers modified: DI,AL
 33061                                  ;----------------------------------------------------------------------------
 33062                                  
 33063                                  SkipBack:
 33064 00006C34 39DF                    	CMP     DI,BX                   ;   while (TRUE) {
 33065 00006C36 720B                    	JB	short SkipBad		;       if (d < dlim)
 33066 00006C38 4F                      	DEC     DI                      ;           goto err;
 33067 00006C39 268A05                  	MOV     AL,[ES:DI]		;       if (pathchr (*--d))
 33068 00006C3C E809EA                  	call    PATHCHRCMP              ;           break;
 33069 00006C3F 75F3                    	JNZ	short SkipBack		;       }
 33070 00006C41 F8                      	CLC                             ;   return (0);
 33071 00006C42 C3                      	retn				;
 33072                                  SkipBad:                                ;err:
 33073                                  	;mov	al,3
 33074 00006C43 B003                    	MOV     AL,error_path_not_found ; bad path error
 33075 00006C45 F9                      	STC                             ;   return (-1);
 33076 00006C46 C3                      	retn                          ;
 33077                                  
 33078                                  ;Break <CopyComponent - copy out a file path component>
 33079                                  ;----------------------------------------------------------------------------
 33080                                  ;   CopyComponent - copy a file component from a path string (DS:SI) into ES:DI
 33081                                  ;
 33082                                  ;   Inputs:     DS:SI - source path
 33083                                  ;               ES:DI - destination
 33084                                  ;               ES:BP - end of buffer
 33085                                  ;   Outputs:    Carry Set - too long
 33086                                  ;               Carry Clear - DS:SI moved past component
 33087                                  ;                   CX has length of destination
 33088                                  ;   Registers modified: AX,CX,DX
 33089                                  ;----------------------------------------------------------------------------
 33090                                  
 33091                                  CopyComponent:
 33092                                  
 33093                                  %define CopyBP	 [BP]		; word
 33094                                  %define CopyD	 [BP+2]		; dword
 33095                                  %define CopyDoff [BP+2]		; word
 33096                                  %define CopyS	 [BP+6]		; dword
 33097                                  %define CopySoff [BP+6]		; word
 33098                                  %define CopyTemp [BP+10]	; byte
 33099                                  
 33100 00006C47 83EC0E                  	SUB     SP,14                   ; room for temp buffer
 33101 00006C4A 1E                      	push	ds
 33102 00006C4B 56                      	push	si
 33103 00006C4C 06                      	push	es
 33104 00006C4D 57                      	push	di
 33105 00006C4E 55                      	push	bp
 33106 00006C4F 89E5                    	MOV     BP,SP
 33107 00006C51 B42E                    	MOV     AH,'.'
 33108 00006C53 AC                      	LODSB
 33109 00006C54 AA                      	STOSB
 33110 00006C55 38E0                    	CMP     AL,AH                   ;   if ((*d++=*s++) == '.') {
 33111 00006C57 7518                    	JNZ	short NormalComp
 33112 00006C59 E8CEFF                  	CALL    PathSep                 ;       if (!pathsep(*s))
 33113 00006C5C 740B                    	JZ	short NulTerm
 33114                                  TryTwoDot:
 33115 00006C5E AC                      	LODSB                           ;           if ((*d++=*s++) != '.'
 33116 00006C5F AA                      	STOSB
 33117 00006C60 38E0                    	CMP     AL,AH
 33118 00006C62 7557                    	JNZ	short CopyBad
 33119 00006C64 E8C3FF                  	CALL    PathSep
 33120 00006C67 7552                    	JNZ	short CopyBad		;               || !pathsep (*s))
 33121                                  NulTerm:                                ;               return -1;
 33122 00006C69 30C0                    	XOR     AL,AL                   ;       *d++ = 0;
 33123 00006C6B AA                      	STOSB
 33124 00006C6C 897606                  	MOV     CopySoff,SI
 33125 00006C6F EB47                    	JMP     SHORT _GoodRet		;       }
 33126                                  NormalComp:                             ;   else {
 33127 00006C71 8B7606                  	MOV     SI,CopySoff ; [bp+6]
 33128 00006C74 E867E9                  	call	NameTrans               ;       s = NameTrans (s, Name1);
 33129 00006C77 3B7606                  	CMP     SI,CopySoff             ;       if (s == CopySOff)
 33130 00006C7A 743F                    	JZ	short CopyBad		;           return (-1);
 33131 00006C7C 36F606[0D05]FF          	TEST	byte [SS:FSHARING],-1	;       if (!fSharing) {;smr;SS Override
 33132 00006C82 7510                    	JNZ	short DoPack
 33133 00006C84 80E201                  	AND     DL,1                    ;           cMeta += fMeta;
 33134 00006C87 360016[1505]            	ADD	[ss:CMETA],DL		;           if (cMeta > 0);smr;SS Override
 33135 00006C8C 7F2D                    	JG	short CopyBad		;               return (-1);
 33136 00006C8E 7504                    	JNZ	short DoPack		;           else
 33137 00006C90 08D2                    	OR      DL,DL                   ;           if (cMeta == 0 && fMeta == 0)
 33138 00006C92 742F                    	JZ	short CopyBadPath	;               return (-1);
 33139                                  DoPack:                                 ;           }
 33140 00006C94 897606                  	MOV     CopySoff,SI ; [bp+6]
 33141 00006C97 16                      	push	ss
 33142 00006C98 1F                      	pop	ds
 33143 00006C99 BE[E604]                	MOV     SI,NAME1
 33144 00006C9C 8D7E0A                  	LEA     DI,CopyTemp ; [bp+10]
 33145 00006C9F 57                      	push	di
 33146 00006CA0 E874C1                  	call	PackName                ;       PackName (Name1, temp);
 33147 00006CA3 5F                      	pop	di
 33148 00006CA4 E8C3B2                  	call	StrLen                  ;       if (strlen(temp)+d > bp)
 33149 00006CA7 49                      	DEC     CX
 33150 00006CA8 034E02                  	ADD     CX,CopyDoff ; [bp+2]
 33151 00006CAB 3B4E00                  	CMP     CX,CopyBP   ; [bp+0]
 33152 00006CAE 730B                    	JAE	short CopyBad		;           return (-1);
 33153 00006CB0 89FE                    	MOV     SI,DI                   ;       strcpy (d, temp);
 33154 00006CB2 C47E02                  	LES     DI,CopyD    ; [bp+2]	
 33155 00006CB5 E8A9B2                  	call	FStrCpy
 33156                                  _GoodRet:				;       }
 33157 00006CB8 F8                      	CLC
 33158 00006CB9 EB0B                    	JMP     SHORT CopyEnd           ;   return 0;
 33159                                  CopyBad:
 33160 00006CBB F9                      	STC
 33161 00006CBC E8FA00                  	CALL    ScanPathChar            ; check for path chars in rest of string
 33162                                  	;mov	al,2
 33163 00006CBF B002                    	MOV     AL,error_file_not_found ; Set up for bad file error
 33164 00006CC1 7503                    	JNZ	short CopyEnd
 33165                                  CopyBadPath:
 33166 00006CC3 F9                      	STC
 33167                                  	;mov	al,3
 33168 00006CC4 B003                    	MOV     AL,error_path_not_found ; Set bad path error
 33169                                  CopyEnd:
 33170 00006CC6 5D                      	pop	bp
 33171 00006CC7 5F                      	pop	di
 33172 00006CC8 07                      	pop	es
 33173 00006CC9 5E                      	pop	si
 33174 00006CCA 1F                      	pop	ds
 33175 00006CCB 9F                      	LAHF
 33176 00006CCC 83C40E                  	ADD     SP,14                   ; reclaim temp buffer
 33177 00006CCF E898B2                  	call	StrLen
 33178 00006CD2 49                      	DEC     CX
 33179 00006CD3 9E                      	SAHF
 33180 00006CD4 C3                      	retn
 33181                                  
 33182                                  ;Break <Splice - pseudo mount by string substitution>
 33183                                  ;----------------------------------------------------------------------------
 33184                                  ;   Splice - take a string and substitute a prefix if one exists. Change
 33185                                  ;       ThisCDS to point to physical drive CDS.
 33186                                  ;   Inputs:     DS:SI point to string
 33187                                  ;               NoSetDir = TRUE => exact matches with splice fail
 33188                                  ;   Outputs:    DS:SI points to thisCDS
 33189                                  ;               ES:DI points to DPB
 33190                                  ;               String at DS:SI may be reduced in length by removing prefix
 33191                                  ;               and substituting drive letter.
 33192                                  ;               CX = 0 If no splice done
 33193                                  ;               CX <> 0 otherwise
 33194                                  ;               ThisCDS points to proper CDS if spliced, otherwise it is
 33195                                  ;                   left alone
 33196                                  ;               ThisDPB points to proper DPB
 33197                                  ;   Registers modified: DS:SI, ES:DI, BX,AX,CX
 33198                                  ;----------------------------------------------------------------------------
 33199                                  
 33200                                  Splice:
 33201 00006CD5 36F606[5A00]FF          	TEST	byte [SS:SPLICES],-1	;smr;SS Override
 33202 00006CDB 746A                    	JZ	short AllDone
 33203 00006CDD 36FF36[3A05]            	push	word [SS:THISCDS]
 33204 00006CE2 36FF36[3C05]            	push	word [SS:THISCDS+2]	; TmpCDS = ThisCDS;smr;SS Override
 33205 00006CE7 1E                      	push	ds
 33206 00006CE8 56                      	push	si
 33207 00006CE9 5F                      	pop	di
 33208 00006CEA 07                      	pop	es
 33209 00006CEB 31C0                    	XOR     AX,AX                   ;   for (i=1; s = GetCDSFromDrv (i); i++)
 33210                                  SpliceScan:
 33211 00006CED E8D4FC                  	call	GetCDSFromDrv
 33212 00006CF0 724B                    	JC	short SpliceDone
 33213 00006CF2 FEC0                    	INC     AL
 33214                                  	;test	word [si+67],2000h
 33215 00006CF4 F744430020              	TEST    word [SI+curdir.flags],curdir_splice
 33216 00006CF9 74F2                    	JZ	short SpliceScan 	;       if ( Spliced (i) ) {
 33217 00006CFB 57                      	push	di
 33218 00006CFC E8A100                  	CALL    PathPref                ;           if (!PathPref (s, d))
 33219 00006CFF 7403                    	JZ	short SpliceFound	;
 33220                                  SpliceSkip:
 33221 00006D01 5F                      	pop	di
 33222 00006D02 EBE9                    	JMP	short SpliceScan	;               continue;
 33223                                  SpliceFound:
 33224 00006D04 26803D00                	CMP     BYTE [ES:DI],0		;           if (*s || NoSetDir) {
 33225 00006D08 7508                    	JNZ	short SpliceDo
 33226 00006D0A 36F606[F802]FF          	TEST	byte [ss:NoSetDir],-1			;smr;SS Override
 33227 00006D10 75EF                    	JNZ	short SpliceSkip
 33228                                  SpliceDo:
 33229 00006D12 89FE                    	MOV     SI,DI                   ;               p = src + strlen (p);
 33230 00006D14 06                      	push	es
 33231 00006D15 1F                      	pop	ds
 33232 00006D16 5F                      	pop	di
 33233 00006D17 E88000                  	CALL    TextFromDrive1          ;               src = TextFromDrive1(src,i);
 33234 00006D1A 36A1[4E05]              	MOV     AX,[SS:CURR_DIR_END]			;smr;SS Override
 33235 00006D1E 09C0                    	OR      AX,AX
 33236 00006D20 7808                    	JS	short NoPoke
 33237 00006D22 01F8                    	ADD     AX,DI                   ;               curdirend += src-p;
 33238 00006D24 29F0                    	SUB     AX,SI
 33239 00006D26 36A3[4E05]              	MOV     [SS:CURR_DIR_END],AX			;smr;SS Override
 33240                                  NoPoke:
 33241 00006D2A 803C00                  	CMP     BYTE [SI],0		;               if (*p)
 33242 00006D2D 7503                    	JNZ	short SpliceCopy	;                   *src++ = '\\';
 33243 00006D2F B05C                    	MOV     AL,"\"
 33244 00006D31 AA                      	STOSB
 33245                                  SpliceCopy:                             ;               strcpy (src, p);
 33246 00006D32 E82CB2                  	call	FStrCpy
 33247 00006D35 83C404                  	ADD     SP,4                    ; throw away saved stuff
 33248 00006D38 80C901                  	OR      CL,1                    ; signal splice done.
 33249 00006D3B EB0C                    	JMP     SHORT DoSet             ;               return;
 33250                                  SpliceDone:                             ;               }
 33251 00006D3D 368F06[3C05]            	pop	word [SS:THISCDS+2]     ;   ThisCDS = TmpCDS;
 33252 00006D42 368F06[3A05]            	pop	word [SS:THISCDS]			;smr;SS Override
 33253                                  AllDone:
 33254 00006D47 31C9                    	XOR     CX,CX
 33255                                  DoSet:
 33256 00006D49 36C536[3A05]            	LDS     SI,[SS:THISCDS]		;   ThisDPB = ThisCDS->devptr;;smr;SS Override
 33257                                  	;les	di,[si+69]
 33258 00006D4E C47C45                  	LES     DI,[SI+curdir.devptr]	
 33259 00006D51 36893E[2405]            	MOV	[SS:THISDPB],DI				;smr;SS Override
 33260 00006D56 368C06[2605]            	MOV	[SS:THISDPB+2],ES			;smr;SS Override
 33261                                  Splice_retn:
 33262 00006D5B C3                      	retn
 33263                                  
 33264                                  ;Break <$NameTrans - partially process a name>
 33265                                  ;----------------------------------------------------------------------------
 33266                                  ;   $NameTrans - allow users to see what names get mapped to. This call
 33267                                  ;   performs only string substitution and canonicalization, not splicing.  Due
 33268                                  ;   to Transpath playing games with devices, we need to insure that the output
 33269                                  ;   has drive letter and : in it.
 33270                                  ;
 33271                                  ;   Inputs:     DS:SI - source string for translation
 33272                                  ;               ES:DI - pointer to buffer
 33273                                  ;   Outputs:
 33274                                  ;       Carry Clear
 33275                                  ;               Buffer at ES:DI is filled in with data
 33276                                  ;               ES:DI point byte after nul byte at end of dest string in buffer
 33277                                  ;       Carry Set
 33278                                  ;               AX = error_path_not_found
 33279                                  ;   Registers modified: all
 33280                                  ;----------------------------------------------------------------------------
 33281                                  
 33282                                  _$NameTrans:
 33283 00006D5C 1E                      	push	ds
 33284 00006D5D 56                      	push	si
 33285 00006D5E 06                      	push	es
 33286 00006D5F 57                      	push	di
 33287 00006D60 51                      	push	cx ; MSDOS 6.0
 33288                                  	
 33289                                  	; MSDOS 6.0	
 33290                                  ; M027 - Start
 33291                                  ;
 33292                                  ; Sattrib must be set up with default values here. Otherwise, the value from
 33293                                  ; a previous DOS call is used for attrib and DevName thinks it is not a 
 33294                                  ; device if the old call set the volume attribute bit. Note that devname in
 33295                                  ; dir2.asm gets ultimately called by Transpath. See also M026. Also save
 33296                                  ; and restore CX.
 33297                                  ;
 33298 00006D61 B516                    	mov     ch,attr_hidden+attr_system+attr_directory
 33299 00006D63 E81C05                  	call	SetAttrib
 33300                                  
 33301                                  ; M027 - End
 33302                                  
 33303                                  	; MSDOS 3.3 (& MSDOS 6.0)
 33304 00006D66 BF[6003]                	MOV     DI,OPENBUF
 33305 00006D69 E8E0FC                  	CALL    TransPath               ; to translation (everything)
 33306 00006D6C 59                      	pop	cx ; MSDOS 6.0
 33307 00006D6D 5F                      	pop     di
 33308 00006D6E 07                      	pop	es
 33309 00006D6F 5E                      	pop     si
 33310 00006D70 1F                      	pop     ds
 33311 00006D71 7303                    	JNC	short TransOK
 33312 00006D73 E993A9                  	jmp	SYS_RET_ERR
 33313                                  TransOK:
 33314 00006D76 BE[6003]                	MOV     SI,OPENBUF
 33315 00006D79 16                      	push	ss
 33316 00006D7A 1F                      	pop	ds
 33317                                  GotText:
 33318 00006D7B E8E3B1                  	call	FStrCpy
 33319 00006D7E E97CA9                  	jmp	SYS_RET_OK
 33320                                  
 33321                                  ;Break   <DriveFromText - return drive number from a text string>
 33322                                  ;----------------------------------------------------------------------------
 33323                                  ;   DriveFromText - examine DS:SI and remove a drive letter, advancing the
 33324                                  ;   pointer.
 33325                                  ;
 33326                                  ;   Inputs:     DS:SI point to a text string
 33327                                  ;   Outputs:    AL has drive number
 33328                                  ;               DS:SI advanced
 33329                                  ;   Registers modified: AX,SI.
 33330                                  ;----------------------------------------------------------------------------
 33331                                  
 33332                                  DriveFromText:
 33333 00006D81 30C0                    	XOR     AL,AL                   ;       drive = 0;
 33334 00006D83 803C00                  	CMP     BYTE [SI],0		;       if (*s &&
 33335 00006D86 74D3                    	jz	short Splice_retn
 33336 00006D88 807C013A                	CMP     BYTE [SI+1],':'		;           s[1] == ':') {
 33337 00006D8C 75CD                    	jnz	short Splice_retn
 33338 00006D8E AD                      	LODSW                           ;           drive = (*s | 020) - 'a'+1;
 33339 00006D8F 0C20                    	OR      AL,20h
 33340                                  	;sub	al,60h
 33341 00006D91 2C60                    	SUB     AL,'a'-1                ;           s += 2;
 33342 00006D93 75C6                    	jnz	short Splice_retn
 33343 00006D95 B0FF                    	MOV     AL,-1                   ; nuke AL...
 33344 00006D97 C3                      	retn				;           }
 33345                                  
 33346                                  ;Break   <TextFromDrive - convert a drive number to a text string>
 33347                                  ;----------------------------------------------------------------------------
 33348                                  ;   TextFromDrive - turn AL into a drive letter: and put it at es:di with
 33349                                  ;   trailing :. TextFromDrive1 takes a 1-based number.
 33350                                  ;
 33351                                  ;   Inputs:     AL has 0-based drive number
 33352                                  ;   Outputs:    ES:DI advanced
 33353                                  ;   Registers modified: AX
 33354                                  ;----------------------------------------------------------------------------
 33355                                  
 33356                                  TextFromDrive:
 33357 00006D98 FEC0                    	INC     AL
 33358                                  TextFromDrive1:
 33359                                  	;add	al,40h
 33360 00006D9A 0440                    	ADD     AL,'A'-1                ;   *d++ = drive-1+'A';
 33361 00006D9C B43A                    	MOV     AH,":"                  ;   strcat (d, ":");
 33362 00006D9E AB                      	STOSW
 33363                                  PathPref_retn:
 33364 00006D9F C3                      	retn
 33365                                  
 33366                                  ;Break   <PathPref - see if one path is a prefix of another>
 33367                                  ;----------------------------------------------------------------------------
 33368                                  ;   PathPref - compare DS:SI with ES:DI to see if one is the prefix of the
 33369                                  ;   other.  Remember that only at a pathchar break are we allowed to have a
 33370                                  ;   prefix: A:\ and A:\FOO
 33371                                  ;
 33372                                  ;   Inputs:     DS:SI potential prefix
 33373                                  ;               ES:DI string
 33374                                  ;   Outputs:    Zero set => prefix found
 33375                                  ;                   DI/SI advanced past matching part
 33376                                  ;               Zero reset => no prefix, DS/SI garbage
 33377                                  ;   Registers modified: CX
 33378                                  ;----------------------------------------------------------------------------
 33379                                  
 33380                                  PathPref:
 33381 00006DA0 E8D5B1                  	call	DStrLen                 ; get length
 33382 00006DA3 49                      	DEC     CX                      ; do not include nul byte
 33383 00006DA4 F3A6                    	REPZ    CMPSB                   ; compare
 33384 00006DA6 75F7                    	jnz	short PathPref_retn	; if NZ then return NZ
 33385 00006DA8 50                      	push	ax			; save char register
 33386 00006DA9 8A44FF                  	MOV     AL,[SI-1]               ; get last byte to match
 33387 00006DAC E899E8                  	call    PATHCHRCMP              ; is it a path char (Root!)
 33388 00006DAF 7406                    	JZ	short Prefix		; yes, match root (I hope)
 33389                                  NotSep:                                 ; 2/13/KK
 33390 00006DB1 268A05                  	MOV     AL,[ES:DI]		; get next char to match
 33391 00006DB4 E875FE                  	CALL    PathSepGotCh            ; was it a pathchar?
 33392                                  Prefix:
 33393 00006DB7 58                      	pop	ax			; get back original
 33394 00006DB8 C3                      	retn
 33395                                  
 33396                                  ;Break   <ScanPathChar - see if there is a path character in a string>
 33397                                  ;----------------------------------------------------------------------------
 33398                                  ;     ScanPathChar - search through the string (pointed to by DS:SI) for
 33399                                  ;     a path separator.
 33400                                  ;
 33401                                  ;     Input:    DS:SI target string (null terminated)
 33402                                  ;     Output:   Zero set => path separator encountered in string
 33403                                  ;               Zero clear => null encountered
 33404                                  ;     Registers modified: SI
 33405                                  ;----------------------------------------------------------------------------
 33406                                  
 33407                                  ScanPathChar:
 33408 00006DB9 AC                      	LODSB                           ; fetch a character
 33409 00006DBA E86FFE                  	call    PathSepGotCh
 33410 00006DBD 75FA                    	JNZ	short ScanPathChar	; not \, / or NUL => go back for more
 33411 00006DBF E886E8                  	call    PATHCHRCMP              ; path separator?
 33412 00006DC2 C3                      	retn
 33413                                  
 33414                                  ;============================================================================
 33415                                  ; HANDLE.ASM, MSDOS 6.0, 1991
 33416                                  ;============================================================================
 33417                                  ; 13/07/2018 - Retro DOS v3.0
 33418                                  
 33419                                  ;	BREAK <$Close - return a handle to the system>
 33420                                  ;----------------------------------------------------------------------------
 33421                                  ;
 33422                                  ;**	$Close - Close a file Handle
 33423                                  ;
 33424                                  ;	BUGBUG - close gets called a LOT with invalid handles - sizzle that
 33425                                  ;		path
 33426                                  ;
 33427                                  ;	Assembler usage:
 33428                                  ;	    MOV     BX, handle
 33429                                  ;	    MOV     AH, Close
 33430                                  ;	    INT     int_command
 33431                                  ;
 33432                                  ;	ENTRY	(bx) = handle
 33433                                  ;	EXIT	<normal INT21 return convention>
 33434                                  ;	USES	all
 33435                                  ;
 33436                                  ;----------------------------------------------------------------------------
 33437                                  
 33438                                  _$CLOSE:
 33439                                  ;	Grab the SFT pointer from the JFN.
 33440                                  
 33441 00006DC3 E85B02                  	call	CheckOwner		; get system file entry
 33442 00006DC6 722B                    	jc	short CloseError	; error return
 33443 00006DC8 16                      	push	ss
 33444 00006DC9 1F                      	pop	ds			; For DOS_CLOSE
 33445 00006DCA 893E[3605]              	MOV	[THISSFT],DI		; save offset of pointer
 33446 00006DCE 8C06[3805]              	MOV	[THISSFT+2],ES		; save segment value
 33447                                  
 33448                                  ; DS:SI point to JFN table entry.
 33449                                  ; ES:DI point to SFT
 33450                                  ;
 33451                                  ; We now examine the user's JFN entry; If the file was a 70-mode file (network
 33452                                  ; FCB, we examine the ref count on the SFT;  if it was 1, we free the JFN.
 33453                                  ; If the file was not a net FCB, we free the JFN too.
 33454                                  
 33455                                  	;CMP	word [ES:DI+SF_ENTRY.sf_ref_count],1
 33456 00006DD2 26833D01                	cmp	word [ES:DI],1		; will the SFT become free?
 33457 00006DD6 740A                    	jz	short FreeJFN 		; yes, free JFN anyway.
 33458                                  	;mov	al,[ES:DI+2]
 33459 00006DD8 268A4502                	MOV	AL,[ES:DI+SF_ENTRY.sf_mode]
 33460                                  	;and	al,0F0h
 33461 00006DDC 24F0                    	AND	AL,SHARING_MASK
 33462                                  	;cmp	al,70h
 33463 00006DDE 3C70                    	CMP	AL,SHARING_NET_FCB
 33464 00006DE0 7407                    	JZ	short PostFree		; 70-mode and big ref count => free it
 33465                                  
 33466                                  ; The JFN must be freed.  Get the pointer to it and replace the contents with
 33467                                  ; -1.
 33468                                  
 33469                                  FreeJFN:
 33470 00006DE2 E8FFF9                  	call	pJFNFromHandle		;   d = pJFN (handle);
 33471 00006DE5 26C605FF                	MOV	BYTE [ES:DI],0FFh	; release the JFN
 33472                                  PostFree:
 33473                                  
 33474                                  ; ThisSFT is correctly set, we have DS = DOSDATA.  Looks OK for a DOS_CLOSE!
 33475                                  
 33476 00006DE9 E8D2CC                  	call	DOS_CLOSE
 33477                                  
 33478                                  ; DOS_Close may return an error.  If we see such an error, we report it but
 33479                                  ; the JFN stays closed because DOS_Close always frees the SFT!
 33480                                  
 33481 00006DEC 7205                    	JC	short CloseError
 33482                                  	;mov	ah,3Eh
 33483 00006DEE B43E                    	MOV	AH,CLOSE		; MZ Bogus multiplan fix
 33484 00006DF0 E90AA9                  	jmp	SYS_RET_OK
 33485                                  CloseError:
 33486 00006DF3 E913A9                  	jmp	SYS_RET_ERR
 33487                                  
 33488                                  
 33489                                  ;	BREAK <$Commit - commit the file>
 33490                                  ;----------------------------------------------------------------------------
 33491                                  ;
 33492                                  ;**	$Commit - Commit a File
 33493                                  ;
 33494                                  ;	$Commit "commits" a file to disk - all of it's buffers are
 33495                                  ;	flushed out.  BUGBUG - I'm pretty sure that $Commit doesn't update
 33496                                  ;	the directory entry, etc., so this commit is pretty useless.  check
 33497                                  ;	and fix this!! jgl
 33498                                  ;
 33499                                  ;	Assembler usage:
 33500                                  ;	    MOV     BX, handle
 33501                                  ;	    MOV     AH, Commit
 33502                                  ;	    INT     int_command
 33503                                  ;
 33504                                  ;	ENTRY	(bx) = handle
 33505                                  ;	EXIT	none
 33506                                  ;	USES	all
 33507                                  ;;----------------------------------------------------------------------------
 33508                                  
 33509                                  _$COMMIT:
 33510                                  ;	Grab the SFT pointer from the JFN.
 33511                                  
 33512 00006DF6 E82802                  	call	CheckOwner		; get system file entry
 33513 00006DF9 7214                    	JC	short CommitError	; error return
 33514 00006DFB 16                      	push	ss
 33515 00006DFC 1F                      	pop	ds			; For DOS_COMMIT
 33516 00006DFD 893E[3605]              	MOV	[THISSFT],DI		; save offset of pointer
 33517 00006E01 8C06[3805]              	MOV	[THISSFT+2],ES		; save segment value
 33518                                  
 33519                                  ;	ThisSFT is correctly set, we have DS = DOSDATA.  Looks OK for a DOS_COMMIT
 33520                                  ;
 33521                                  ;	ES:DI point to SFT
 33522                                  
 33523 00006E05 E8B7CD                  	call	DOS_COMMIT
 33524 00006E08 7205                    	JC	short CommitError
 33525                                  	;mov	ah,68h
 33526 00006E0A B468                    	MOV	AH,COMMIT		;
 33527 00006E0C E9EEA8                  	jmp	SYS_RET_OK
 33528                                  CommitError:
 33529 00006E0F E9F7A8                  	jmp	SYS_RET_ERR
 33530                                  
 33531                                  ;	BREAK <$ExtHandle - extend handle count>
 33532                                  
 33533                                  ;**	$ExtHandle - Extend Handle Count
 33534                                  ;----------------------------------------------------------------------------
 33535                                  ;	Assembler usage:
 33536                                  ;	    MOV     BX, Number of Opens Allowed (MAX=65534;66535 is
 33537                                  ;	    MOV     AX, 6700H			 reserved to mark SFT
 33538                                  ;	    INT     int_command 		 busy )
 33539                                  ;
 33540                                  ;	ENTRY	(bx) = new number of handles
 33541                                  ;	EXIT	'C' clear if OK
 33542                                  ;		'C' set iff err
 33543                                  ;		  (ax) = error code
 33544                                  ;			 AX = error_not_enough_memory
 33545                                  ;			      error_too_many_open_files
 33546                                  ;	USES	all
 33547                                  ;----------------------------------------------------------------------------
 33548                                  
 33549                                  _$ExtHandle:
 33550 00006E12 31ED                    	XOR	BP,BP			; 0: enlarge   1: shrink  2:psp
 33551                                  	;cmp	bx,20
 33552 00006E14 83FB14                  	CMP	BX,FILPERPROC
 33553 00006E17 7303                    	JAE	short exth2		; Don't set less than FilPerProc no
 33554 00006E19 BB1400                  	MOV	BX,FILPERPROC
 33555                                  exth2:	
 33556 00006E1C 368E06[DE02]            	MOV	ES,[ss:CurrentPDB]	; get user process data block;smr;SS Override
 33557                                  	;mov	cx,[ES:32h]
 33558 00006E21 268B0E3200              	MOV	CX,[ES:PDB.JFN_Length]	; get number of handle allowed
 33559 00006E26 39CB                    	CMP	BX,CX			; the requested == current
 33560 00006E28 7452                    	JE	short ok_done 		; yes and exit
 33561 00006E2A 7722                    	JA	short larger		; go allocate new table
 33562                                  
 33563                                  ;	We're going to shrink the # of handles available
 33564                                  
 33565 00006E2C BD0100                  	MOV	BP,1			; shrink
 33566                                  	;mov	ds,[ES:36h]
 33567 00006E2F 268E1E3600              	MOV	DS,[ES:PDB.JFN_Pointer+2] ;
 33568 00006E34 89DE                    	MOV	SI,BX			;
 33569 00006E36 29D9                    	SUB	CX,BX			; get difference
 33570                                  
 33571                                  ;	BUGBUG - code a SCASB here, should be a bit smaller
 33572                                  chck_handles:
 33573 00006E38 803CFF                  	CMP	BYTE [SI],-1		; scan through handles to ensure close
 33574 00006E3B 7542                    	JNZ	short too_many_files	; status
 33575 00006E3D 46                      	INC	SI
 33576 00006E3E E2F8                    	LOOP	chck_handles
 33577 00006E40 83FB14                  	CMP	BX,FILPERPROC		; = 20
 33578 00006E43 7709                    	JA	short larger		; no
 33579                                  
 33580 00006E45 BD0200                  	MOV	BP,2			; psp
 33581                                  	;mov	di,24
 33582 00006E48 BF1800                  	MOV	DI,PDB.JFN_TABLE	; es:di -> jfn table in psp
 33583 00006E4B 53                      	PUSH	BX
 33584 00006E4C EB1F                    	JMP	short movhandl
 33585                                  
 33586                                  larger:
 33587 00006E4E 83FBFF                  	CMP	BX,-1			; 65535 is not allowed
 33588 00006E51 0F848100                	JZ	invalid_func ; 10/08/2018
 33589 00006E55 F8                      	CLC
 33590 00006E56 53                      	PUSH	BX			; save requested number
 33591 00006E57 83C30F                  	ADD	BX,0FH			; adjust to paragraph boundary
 33592 00006E5A B104                    	MOV	CL,4
 33593                                  	;ror	bx,cl			; MSDOS 3.3
 33594 00006E5C D3DB                    	RCR	BX,CL			; DOS 4.00 fix		;AC000;
 33595 00006E5E 81E3FF1F                	AND	BX,1FFFH		; clear most 3 bits
 33596                                  
 33597 00006E62 55                      	PUSH	BP
 33598 00006E63 E8E8F6                  	call	_$ALLOC			; allocate memory
 33599 00006E66 5D                      	POP	BP
 33600 00006E67 7267                    	JC	short no_memory		; not enough meory
 33601                                  
 33602 00006E69 8EC0                    	MOV	ES,AX			; es:di points to new table memory
 33603 00006E6B 31FF                    	XOR	DI,DI
 33604                                  movhandl:
 33605 00006E6D 368E1E[DE02]            	MOV	DS,[ss:CurrentPDB] 	; get user PDB address	;smr;SS Override
 33606                                  
 33607 00006E72 F7C50300                	test	BP,3			; enlarge ?
 33608 00006E76 740C                    	JZ	short enlarge 		; yes
 33609 00006E78 59                      	POP	CX			; cx = the amount you shrink
 33610 00006E79 51                      	PUSH	CX
 33611 00006E7A EB0C                    	JMP	short copy_hand
 33612                                  
 33613                                  ;	Done.  'C' clear
 33614                                  
 33615                                  ok_done:
 33616 00006E7C E97EA8                  	jmp	SYS_RET_OK
 33617                                  
 33618                                  too_many_files:
 33619                                  	;mov	al,4
 33620 00006E7F B004                    	MOV	AL,error_too_many_open_files
 33621 00006E81 E985A8                  	jmp	SYS_RET_ERR
 33622                                  
 33623                                  enlarge:
 33624                                  	;mov	cx,[32h]
 33625 00006E84 8B0E3200                	MOV	CX,[PDB.JFN_Length]	; get number of old handles
 33626                                  copy_hand:
 33627 00006E88 89CA                    	MOV	DX,CX
 33628                                  	;lds	si,[34h]
 33629 00006E8A C5363400                	LDS	SI,[PDB.JFN_Pointer]	; get old table pointer
 33630 00006E8E F3A4                    	REP	MOVSB			; copy infomation to new table
 33631 00006E90 59                      	POP	CX			; get new number of handles
 33632 00006E91 51                      	PUSH	CX			; save it again
 33633 00006E92 29D1                    	SUB	CX,DX			; get the difference
 33634 00006E94 B0FF                    	MOV	AL,-1			; set availability to handles
 33635 00006E96 F3AA                    	REP	STOSB
 33636 00006E98 368E1E[DE02]            	MOV	DS,[ss:CurrentPDB] 	; get user process data block;smr;SS Override
 33637                                  	;cmp	word [34h],0
 33638 00006E9D 833E340000              	CMP	WORD [PDB.JFN_Pointer],0 ; check if original table pointer
 33639 00006EA2 750D                    	JNZ	short update_info	; yes, go update PDB entries
 33640 00006EA4 55                      	PUSH	BP
 33641 00006EA5 1E                      	PUSH	DS			; save old table segment
 33642 00006EA6 06                      	PUSH	ES			; save new table segment
 33643 00006EA7 8E063600                	MOV	ES,[PDB.JFN_Pointer+2]	; get old table segment
 33644 00006EAB E8BDF7                  	call	_$DEALLOC		; deallocate old table meomory
 33645 00006EAE 07                      	POP	ES			; restore new table segment
 33646 00006EAF 1F                      	POP	DS			; restore old table segment
 33647 00006EB0 5D                      	POP	BP
 33648                                  
 33649                                  update_info:
 33650 00006EB1 F7C50200                	test	BP,2			; psp?
 33651 00006EB5 7408                    	JZ	short non_psp 		; no
 33652                                  	;mov	word [34h],18h ; 24
 33653 00006EB7 C70634001800            	MOV	WORD [PDB.JFN_Pointer],PDB.JFN_TABLE ; restore
 33654 00006EBD EB06                    	JMP	short final
 33655                                  non_psp:
 33656                                  	;mov	word [34h],0
 33657 00006EBF C70634000000            	MOV	WORD [PDB.JFN_Pointer],0 ; new table pointer offset always 0
 33658                                  final:
 33659                                  	;mov	word [36h],es	
 33660 00006EC5 8C063600                	MOV	[PDB.JFN_Pointer+2],ES	; update table pointer segment
 33661                                  	;pop	word [32h]
 33662 00006EC9 8F063200                	POP	word [PDB.JFN_Length]	; restore new number of handles
 33663 00006ECD E92DA8                  	jmp	SYS_RET_OK
 33664                                  
 33665                                  no_memory:
 33666 00006ED0 5B                      	POP	BX			; clean stack
 33667                                  	;mov	al,8
 33668 00006ED1 B008                    	MOV	AL,error_not_enough_memory
 33669 00006ED3 E933A8                  	jmp	SYS_RET_ERR
 33670                                  invalid_func:
 33671                                  	;mov	al,1
 33672 00006ED6 B001                    	MOV	AL,error_invalid_function
 33673 00006ED8 E92EA8                  	jmp	SYS_RET_ERR
 33674                                  
 33675                                  
 33676                                  ;	BREAK <$READ - Read from a file handle>
 33677                                  ;----------------------------------------------------------------------------
 33678                                  ;
 33679                                  ;**	$Read - Read from a File Handle
 33680                                  ;
 33681                                  ;   Assembler usage:
 33682                                  ;
 33683                                  ;	LDS	DX, buf
 33684                                  ;	MOV	CX, count
 33685                                  ;	MOV	BX, handle
 33686                                  ;	MOV	AH, Read
 33687                                  ;	INT	int_command
 33688                                  ;	  AX has number of bytes read
 33689                                  ;
 33690                                  ;	ENTRY	(bx) = file handle
 33691                                  ;		(cx) = byte count
 33692                                  ;		(ds:dx) = buffer address
 33693                                  ;	EXIT	Through system call return so that to user:
 33694                                  ;		  'C' clear if OK
 33695                                  ;		    (ax) = bytes read
 33696                                  ;		  'C' set if error
 33697                                  ;		    (ax) = error code
 33698                                  ;
 33699                                  ;----------------------------------------------------------------------------
 33700                                  
 33701                                  _$READ:
 33702 00006EDB BE[003E]                	MOV	SI,DOS_READ
 33703                                  ReadDo:
 33704 00006EDE E803F9                  	call	pJFNFromHandle
 33705 00006EE1 7208                    	JC	short ReadError
 33706 00006EE3 268A05                  	MOV	AL,[ES:DI]
 33707 00006EE6 E83801                  	call	CheckOwner		; get the handle
 33708 00006EE9 7303                    	JNC	short ReadSetup		; no errors do the operation
 33709                                  
 33710                                  ;	Have an error.	'C' set
 33711                                  
 33712                                  ReadError:
 33713 00006EEB E91BA8                  	jmp	SYS_RET_ERR		; go to error traps
 33714                                  
 33715                                  ReadSetup:
 33716 00006EEE 36893E[3605]            	MOV	[SS:THISSFT],DI		; save offset of pointer;smr;SS Override
 33717 00006EF3 368C06[3805]            	MOV	[ss:THISSFT+2],ES	; save segment value	;smr;SS Override
 33718                                  	;;; MSDOS 6.0 
 33719                                  ;; Extended Open
 33720                                  	;;;testb [ES:DI+SF_ENTRY.sf_mode],INT_24_ERROR  ;AN000;;EO. need i24
 33721                                  	;;;JZ	short needi24 		      ;AN000;;EO. yes
 33722                                  	;;;OR	byte [EXTOPEN_ON],EXT_OPEN_I24_OFF 
 33723                                  					;AN000;;EO. set it off;smr;SS Override
 33724                                  needi24:				;AN000;
 33725                                  ;; Extended Open
 33726 00006EF8 36FF36[DA02]            	push	word [SS:DMAADD]
 33727 00006EFD 36FF36[DC02]            	push	word [SS:DMAADD+2]	;smr;SS Override
 33728                                  ;;;;;	BAD SPOT FOR 286!!! SEGMENT ARITHMETIC!!!
 33729                                  	;;; MSDOS 6.0
 33730                                  	;;; CALL Align_Buffer		;AN000;MS. align user's buffer
 33731                                  	; MSDOS 3.3
 33732 00006F02 89D3                    	MOV	BX,DX			; copy offset
 33733 00006F04 51                      	push	cx			; don't stomp on count
 33734 00006F05 B104                    	MOV	CL,4			; bits to shift bytes->para
 33735 00006F07 D3EB                    	SHR	BX,CL			; get number of paragraphs
 33736 00006F09 59                      	pop	cx			; get count back
 33737 00006F0A 8CD8                    	MOV	AX,DS			; get original segment
 33738 00006F0C 01D8                    	ADD	AX,BX			; get new segment
 33739 00006F0E 8ED8                    	MOV	DS,AX			; in seg register
 33740 00006F10 83E20F                  	AND	DX,0Fh			; normalize offset
 33741 00006F13 368916[DA02]            	MOV	[ss:DMAADD],DX		; use user DX as offset	;smr;SS Override
 33742 00006F18 368C1E[DC02]            	MOV	[ss:DMAADD+2],DS 	; use user DS as segment for DMA
 33743                                  						;smr;SS Override
 33744                                  ;;;;;	END BAD SPOT FOR 286!!! SEGMENT ARITHMETIC!!!
 33745 00006F1D 16                      	push	ss			; go for DOS addressability
 33746 00006F1E 1F                      	pop	ds
 33747 00006F1F FFD6                    	CALL	SI ; DOS_READ		; indirect call to operation
 33748 00006F21 8F06[DC02]              	pop	word [DMAADD+2]
 33749 00006F25 8F06[DA02]              	pop	word [DMAADD]
 33750                                  	;JNC	short READ_OK		;AN002;
 33751                                  	;JMP	ReadError		;AN002; if error, say bye bye
 33752 00006F29 72C0                    	jc	short ReadError
 33753                                  READ_OK:
 33754 00006F2B 89C8                    	MOV	AX,CX			; get correct return in correct reg
 33755 00006F2D E9CDA7                  	jmp	SYS_RET_OK		; successful return
 33756                                  
 33757                                  
 33758                                  
 33759                                  ; 13/07/2018 - Retro DOS v3.0
 33760                                  
 33761                                  ;
 33762                                  ;   Input: DS:DX points to user's buffer addr
 33763                                  ;   Function: rearrange segment and offset for READ/WRITE buffer
 33764                                  ;   Output: [DMAADD] set
 33765                                  ;
 33766                                  
 33767                                  ;Align_Buffer:
 33768                                  ;	MOV	BX,DX			; copy offset
 33769                                  ;	push	cx			; don't stomp on count
 33770                                  ;	MOV	CL,4			; bits to shift bytes->para
 33771                                  ;	SHR	BX,CL			; get number of paragraphs
 33772                                  ;	pop	cx			; get count back
 33773                                  ;	MOV	AX,DS			; get original segment
 33774                                  ;	ADD	AX,BX			; get new segment
 33775                                  ;	MOV	DS,AX			; in seg register
 33776                                  ;	AND	DX,0Fh			; normalize offset
 33777                                  ;	MOV	[ss:DMAADD],DX		; use user DX as offset	;smr;SS Override
 33778                                  ;	MOV	[ss:DMAADD+2],DS 	; use user DS as segment for DMA
 33779                                  ;						;smr;SS Override
 33780                                  ;	retn
 33781                                  
 33782                                  ;BREAK <$WRITE - write to a file handle>
 33783                                  ;----------------------------------------------------------------------------
 33784                                  ;
 33785                                  ;   Assembler usage:
 33786                                  ;	    LDS     DX, buf
 33787                                  ;	    MOV     CX, count
 33788                                  ;	    MOV     BX, handle
 33789                                  ;	    MOV     AH, Write
 33790                                  ;	    INT     int_command
 33791                                  ;	  AX has number of bytes written
 33792                                  ;   Errors:
 33793                                  ;	    AX = write_invalid_handle
 33794                                  ;	       = write_access_denied
 33795                                  ;
 33796                                  ;   Returns in register AX
 33797                                  ;
 33798                                  ;----------------------------------------------------------------------------
 33799                                  
 33800                                  _$WRITE:
 33801 00006F30 BE[813F]                	MOV	SI,DOS_WRITE
 33802 00006F33 EBA9                    	JMP	short ReadDo
 33803                                  
 33804                                  ;BREAK <$LSEEK - move r/w pointer>
 33805                                  ;----------------------------------------------------------------------------
 33806                                  ;
 33807                                  ;   Assembler usage:
 33808                                  ;	    MOV     DX, offsetlow
 33809                                  ;	    MOV     CX, offsethigh
 33810                                  ;	    MOV     BX, handle
 33811                                  ;	    MOV     AL, method
 33812                                  ;	    MOV     AH, LSeek
 33813                                  ;	    INT     int_command
 33814                                  ;	  DX:AX has the new location of the pointer
 33815                                  ;   Error returns:
 33816                                  ;	    AX = error_invalid_handle
 33817                                  ;	       = error_invalid_function
 33818                                  ;   Returns in registers DX:AX
 33819                                  ;
 33820                                  ;----------------------------------------------------------------------------
 33821                                  
 33822                                  _$LSEEK:
 33823 00006F35 E8E900                  	call	CheckOwner		; get system file entry
 33824                                  LSeekError:
 33825 00006F38 7302                    	JNC	short CHKOWN_OK		;AN002;
 33826 00006F3A EBAF                    	JMP	short ReadError		;AN002; error return
 33827                                  
 33828                                  CHKOWN_OK:				;AN002;
 33829 00006F3C 3C02                    	CMP	AL,2			; is the seek value correct?
 33830 00006F3E 760A                    	JBE	short LSeekDisp		; yes, go dispatch
 33831                                  	;mov	byte [ss:EXTERR_LOCUS],1 
 33832 00006F40 36C606[D102]01          	MOV	byte [ss:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 33833                                  					;smr;SS Override
 33834                                  	;mov	al,1
 33835 00006F46 B001                    	mov	al, error_invalid_function ; invalid method
 33836 00006F48 EBA1                    	jmp	short ReadError
 33837                                  LSeekDisp:
 33838 00006F4A 3C01                    	CMP	AL,1			; best way to dispatch; check middle
 33839 00006F4C 720A                    	JB	short LSeekStore	; just store CX:DX
 33840 00006F4E 771C                    	JA	short LSeekEOF		; seek from end of file
 33841                                  	;add	dx,[es:di+21]
 33842 00006F50 26035515                	ADD	DX,[ES:DI+SF_ENTRY.sf_position]
 33843                                  	;adc	cx,[es:di+23]
 33844 00006F54 26134D17                	ADC	CX,[ES:DI+SF_ENTRY.sf_position+2]
 33845                                  LSeekStore:
 33846 00006F58 89C8                    	MOV	AX,CX			; AX:DX
 33847 00006F5A 92                      	XCHG	AX,DX			; DX:AX is the correct value
 33848                                  LSeekSetpos:
 33849                                  	;mov	[es:di+21],ax
 33850 00006F5B 26894515                	MOV	[ES:DI+SF_ENTRY.sf_position],AX
 33851                                  	;mov	[es:di+23],dx
 33852 00006F5F 26895517                	MOV	[ES:DI+SF_ENTRY.sf_position+2],DX
 33853 00006F63 E8A5A6                  	call	Get_User_Stack
 33854                                  	;mov	[si+6],dx
 33855 00006F66 895406                  	MOV	[SI+user_env.user_DX],DX ; return DX:AX
 33856 00006F69 E991A7                  	jmp	SYS_RET_OK		; successful return
 33857                                  
 33858                                  LSeekEOF:
 33859                                  	;test	word [es:di+5],8000h
 33860 00006F6C 26F745050080            	test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 33861 00006F72 750A                    	JNZ	short Check_LSeek_Mode	; Is Net
 33862                                  LOCAL_LSeek:
 33863                                  	;add	dx,[es:di+17]
 33864 00006F74 26035511                	ADD	DX,[ES:DI+SF_ENTRY.sf_size]
 33865                                  	;adc	cx,[es:di+19]
 33866 00006F78 26134D13                	ADC	CX,[ES:DI+SF_ENTRY.sf_size+2]
 33867 00006F7C EBDA                    	JMP	short LSeekStore	; go and set the position
 33868                                  
 33869                                  Check_LSeek_Mode:
 33870                                  	;test	word [es:di+2],8000h
 33871 00006F7E 26F745020080            	test	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB
 33872 00006F84 75EE                    	JNZ	short LOCAL_LSeek	; FCB treated like local file
 33873                                  	;mov	ax,[es:di+2]
 33874 00006F86 268B4502                	MOV	AX,[ES:DI+SF_ENTRY.sf_mode]
 33875                                  	;and	ax, 0F0h
 33876 00006F8A 25F000                  	AND	AX,SHARING_MASK
 33877                                  	;cmp	ax,40h
 33878 00006F8D 83F840                  	CMP	AX,SHARING_DENY_NONE
 33879 00006F90 7405                    	JZ	short NET_LSEEK		; LSEEK exported in this mode
 33880                                  	;cmp	ax,30h
 33881 00006F92 83F830                  	CMP	AX,SHARING_DENY_READ
 33882 00006F95 75DD                    	JNZ	short LOCAL_LSeek	; Treated like local Lseek
 33883                                  NET_LSEEK:
 33884                                  ;	JMP	short LOCAL_LSeek
 33885                                  ; REMOVE ABOVE INSTRUCTION TO ENABLE DCR 142
 33886                                  	;CallInstall Net_Lseek,MultNET,33
 33887                                  	;JNC	short LSeekSetPos
 33888                                  
 33889 00006F97 B82111                  	mov     ax, 1121h
 33890 00006F9A CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - SEEK FROM END OF REMOTE FILE
 33891                                  			; CX:DX = offset (in bytes) from end
 33892                                  			; ES:DI -> SFT, SFT DPB field -> DPB of drive with file
 33893                                  			; SS = DOS CS
 33894                                  			; Return: CF set on error
 33895                                  			; CF clear if successful, DX:AX = new file position
 33896 00006F9C 73BD                    	jnb     short LSeekSetpos
 33897 00006F9E E968A7                  	jmp	SYS_RET_ERR
 33898                                  
 33899                                  ;BREAK <FileTimes - modify write times on a handle>
 33900                                  ;----------------------------------------------------------------------------
 33901                                  ;
 33902                                  ;   Assembler usage:
 33903                                  ;	    MOV AH, FileTimes (57H)
 33904                                  ;	    MOV AL, func
 33905                                  ;	    MOV BX, handle
 33906                                  ;	; if AL = 1 then then next two are mandatory
 33907                                  ;	    MOV CX, time
 33908                                  ;	    MOV DX, date
 33909                                  ;	    INT 21h
 33910                                  ;	; if AL = 0 then CX/DX has the last write time/date
 33911                                  ;	; for the handle.
 33912                                  ;
 33913                                  ;	AL=02		 get extended attributes
 33914                                  ;	   BX=handle
 33915                                  ;	   CX=size of buffer (0, return max size )
 33916                                  ;	   DS:SI query list (si=-1, selects all EA)
 33917                                  ;	   ES:DI buffer to hold EA list
 33918                                  ;
 33919                                  ;	AL=03		 get EA name list
 33920                                  ;	   BX=handle
 33921                                  ;	   CX=size of buffer (0, return max size )
 33922                                  ;	   ES:DI buffer to hold name list
 33923                                  ;
 33924                                  ;	AL=04		 set extended attributes
 33925                                  ;	   BX=handle
 33926                                  ;	   ES:DI buffer of EA list
 33927                                  ;
 33928                                  ;
 33929                                  ;   Error returns:
 33930                                  ;	    AX = error_invalid_function
 33931                                  ;	       = error_invalid_handle
 33932                                  ;
 33933                                  ;----------------------------------------------------------------------------
 33934                                  
 33935                                  _$FILE_TIMES:
 33936                                  	; 13/07/2018 - Retro DOS v3.0
 33937                                  
 33938                                  	; MSDOS 3.3
 33939 00006FA1 3C02                    	cmp	al,2			; correct subfunction ?
 33940 00006FA3 720B                    	jb	short ft1
 33941                                  
 33942                                          ;mov	byte [ss:EXTERR_LOCUS], 1
 33943 00006FA5 36C606[D102]01          	mov	byte [ss:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 33944                                  						;SS Overr
 33945                                  	;mov	al,1
 33946 00006FAB B001                    	mov	al,error_invalid_function ; give bad return
 33947 00006FAD E959A7                  	jmp     SYS_RET_ERR
 33948                                  
 33949                                  	; MSDOS 6.0
 33950                                  	;cmp	al,2			; correct subfunction ?
 33951                                  	;jae	short inval_func
 33952                                  ft1:
 33953 00006FB0 E86E00                  	call	CheckOwner		; get sft
 33954 00006FB3 7283                    	jc	short LSeekError	; bad handle
 33955                                  
 33956 00006FB5 08C0                    	or	al,al			; get time/date ?
 33957 00006FB7 7515                    	jnz	short ft_set_time
 33958                                  
 33959                                  ;------ here we get the time & date from the sft for the user
 33960                                  
 33961 00006FB9 FA                      	cli				; is this cli/sti reqd ? BUGBUG
 33962                                  	;mov	cx,[es:di+13]
 33963 00006FBA 268B4D0D                	mov	cx,[es:di+SF_ENTRY.sf_time] ; get the time
 33964                                  	;mov	dx,[es:di+15]
 33965 00006FBE 268B550F                	mov	dx,[es:di+SF_ENTRY.sf_date] ;  & date
 33966 00006FC2 FB                      	sti
 33967 00006FC3 E845A6                  	call	Get_User_Stack
 33968                                  	;mov	[si+4],cx
 33969 00006FC6 894C04                  	mov	[si+user_env.user_CX],cx
 33970                                  	;mov	[si+6],dx
 33971 00006FC9 895406                  	mov	[si+user_env.user_DX],dx
 33972 00006FCC EB20                    	jmp	short ok_ret
 33973                                  
 33974                                  ;------ here we set the time in sft
 33975                                  
 33976                                  ft_set_time:
 33977 00006FCE E89BB0                  	call    EcritSFT
 33978                                  	;mov	[es:di+13],cx
 33979 00006FD1 26894D0D                	mov	[es:di+SF_ENTRY.sf_time],cx ; drop in new time
 33980                                  	;mov	[es:di+15],dx
 33981 00006FD5 2689550F                	mov	[es:di+SF_ENTRY.sf_date],dx ;  and date	
 33982                                  
 33983 00006FD9 31C0                    	xor	ax, ax
 33984 00006FDB 36FF1E[9400]            	call	far [ss:JShare+(14*4)] ; 14 = ShSU	; SS Override
 33985                                  
 33986                                  ;------ set the flags in SFT entry
 33987                                  	;and	word [es:di+5],0FFBFh
 33988 00006FE0 26836505BF              	and	word [es:di+SF_ENTRY.sf_flags],~devid_file_clean 
 33989                                  							; mark file as dirty
 33990                                  	;or	word [es:di+5],4000h
 33991 00006FE5 26814D050040            	or	word [es:di+SF_ENTRY.sf_flags],sf_close_nodate
 33992                                  							; ask close not to
 33993                                  							;   bother about date
 33994                                  							;   and time
 33995 00006FEB E886B0                  	call	LcritSFT
 33996                                  ok_ret:
 33997 00006FEE E90CA7                  	jmp	SYS_RET_OK
 33998                                  
 33999                                  ;inval_func:
 34000                                  ;	mov	byte [ss:EXTERR_LOCUS], 1
 34001                                  ;	mov	byte [ss:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 34002                                  ;						;SS Overr
 34003                                  ;	;mov	al,1
 34004                                  ;	mov	al,error_invalid_function ; give bad return
 34005                                  ;	jmp     SYS_RET_ERR
 34006                                  
 34007                                  ;BREAK <$DUP - duplicate a jfn>
 34008                                  ;----------------------------------------------------------------------------
 34009                                  ;
 34010                                  ;   Assembler usage:
 34011                                  ;	    MOV     BX, fh
 34012                                  ;	    MOV     AH, Dup
 34013                                  ;	    INT     int_command
 34014                                  ;	  AX has the returned handle
 34015                                  ;   Errors:
 34016                                  ;	    AX = dup_invalid_handle
 34017                                  ;	       = dup_too_many_open_files
 34018                                  ;
 34019                                  ;----------------------------------------------------------------------------
 34020                                  
 34021                                  _$DUP:
 34022 00006FF1 89D8                    	MOV	AX,BX			; save away old handle in AX
 34023 00006FF3 E842F8                  	call	JFNFree 		; free handle? into ES:DI, new in BX
 34024                                  DupErrorCheck:
 34025 00006FF6 7218                    	JC	short DupErr		; nope, bye
 34026 00006FF8 06                      	push	es
 34027 00006FF9 57                      	push	di			; save away SFT
 34028 00006FFA 5E                      	pop	si			; into convenient place DS:SI
 34029 00006FFB 1F                      	pop	ds
 34030 00006FFC 93                      	XCHG	AX,BX			; get back old handle
 34031 00006FFD E82100                  	call	CheckOwner		; get sft in ES:DI
 34032 00007000 720E                    	JC	short DupErr		; errors go home
 34033 00007002 E8D7C6                  	call	DOS_Dup_Direct
 34034 00007005 E8DCF7                  	call	pJFNFromHandle		; get pointer
 34035 00007008 268A1D                  	MOV	BL,[ES:DI]		; get SFT number
 34036 0000700B 881C                    	MOV	[SI],BL			; stuff in new SFT
 34037 0000700D E9EDA6                  	jmp	SYS_RET_OK		; and go home
 34038                                  DupErr:
 34039 00007010 E9F6A6                  	jmp	SYS_RET_ERR
 34040                                  
 34041                                  ;BREAK <$DUP2 - force a dup on a particular jfn>
 34042                                  ;----------------------------------------------------------------------------
 34043                                  ;
 34044                                  ;   Assembler usage:
 34045                                  ;	    MOV     BX, fh
 34046                                  ;	    MOV     CX, newfh
 34047                                  ;	    MOV     AH, Dup2
 34048                                  ;	    INT     int_command
 34049                                  ;   Error returns:
 34050                                  ;	    AX = error_invalid_handle
 34051                                  ;
 34052                                  ;----------------------------------------------------------------------------
 34053                                  
 34054                                  _$DUP2:
 34055 00007013 53                      	push	bx
 34056 00007014 51                      	push	cx			; save source
 34057 00007015 89CB                    	MOV	BX,CX			; get one to close
 34058 00007017 E8A9FD                  	call	_$CLOSE			; close destination handle
 34059 0000701A 5B                      	pop	bx
 34060 0000701B 58                      	pop	ax			; old in AX, new in BX
 34061 0000701C E8C5F7                  	call	pJFNFromHandle		; get pointer
 34062 0000701F EBD5                    	JMP	short DupErrorCheck	; check error and do dup
 34063                                  
 34064                                  ;Break	<CheckOwner - verify ownership of handles from server>
 34065                                  ;----------------------------------------------------------------------------
 34066                                  ;   CheckOwner - Due to the ability of the server to close file handles for a
 34067                                  ;   process without the process knowing it (delete/rename of open files, for
 34068                                  ;   example), it is possible for the redirector to issue a call to a handle
 34069                                  ;   that it soes not rightfully own.  We check here to make sure that the
 34070                                  ;   issuing process is the owner of the SFT.  At the same time, we do a
 34071                                  ;   SFFromHandle to really make sure that the SFT is good.
 34072                                  ;
 34073                                  ;	ENTRY	BX has the handle
 34074                                  ;		User_ID is the current user
 34075                                  ;	EXIT	Carry Clear => ES:DI points to SFT
 34076                                  ;		Carry Set => AX has error code
 34077                                  ;	USES	none
 34078                                  ;----------------------------------------------------------------------------
 34079                                  
 34080                                  CheckOwner:
 34081                                  	; 13/07/2018 - Retro DOS v3.0
 34082                                  
 34083 00007021 E8D8F7                  	call	SFFromHandle
 34084 00007024 720F                    	jc	short co_ret_label	; retc
 34085                                  
 34086 00007026 50                      	push	ax
 34087                                  
 34088                                  	; MSDOS 6.0
 34089                                  ;SR;
 34090                                  ;SR; WIN386 patch - Do not check for USER_ID for using handles since these 
 34091                                  ;SR; are shared across multiple VMs in win386.
 34092                                  ;SR;
 34093                                  	;test	byte [IsWin386],1
 34094                                  	;jz	short no_win386		;win386 is not present
 34095                                  	;xor	ax,ax			;set the zero flag
 34096                                  	;jmp	short skip_win386	
 34097                                  
 34098                                  ;no_win386:
 34099 00007027 36A1[EA02]              	mov	ax,[SS:USER_ID]		;smr;SS Override
 34100                                  	;cmp	ax,[es:di+47]
 34101 0000702B 263B452F                	cmp	ax,[es:di+SF_ENTRY.sf_UID]
 34102                                  
 34103                                  ;skip_win386:
 34104 0000702F 58                      	pop	ax
 34105                                  	
 34106 00007030 7403                    	jz	short co_ret_label
 34107                                  	
 34108                                  	;mov	al,6
 34109 00007032 B006                    	mov	al,error_invalid_handle
 34110 00007034 F9                      	stc
 34111                                  
 34112                                  co_ret_label:
 34113 00007035 C3                      	retn
 34114                                  
 34115                                  ;============================================================================
 34116                                  ; FILE.ASM, MSDOS 6.0, 1991
 34117                                  ;============================================================================
 34118                                  ; 14/07/2018 - Retro DOS v3.0
 34119                                  
 34120                                  ; MSDOS 2.11
 34121                                  ;BREAK <$Open - open a file handle>
 34122                                  ;----------------------------------------------------------------------------
 34123                                  ;   Assembler usage:
 34124                                  ;           LDS     DX, Name
 34125                                  ;           MOV     AH, Open
 34126                                  ;           MOV     AL, access
 34127                                  ;           INT     int_command
 34128                                  ;
 34129                                  ;       ACCESS          Function
 34130                                  ;       ------          --------
 34131                                  ;       open_for_read   file is opened for reading
 34132                                  ;       open_for_write  file is opened for writing
 34133                                  ;       open_for_both   file is opened for both reading and writing.
 34134                                  ;
 34135                                  ;   Error returns:
 34136                                  ;           AX = error_invalid_access
 34137                                  ;              = error_file_not_found
 34138                                  ;              = error_access_denied
 34139                                  ;              = error_too_many_open_files
 34140                                  ;----------------------------------------------------------------------------
 34141                                  
 34142                                  ; MSDOS 6.0
 34143                                  ;	BREAK <$Open - open a file from a path string>
 34144                                  ;----------------------------------------------------------------------------
 34145                                  ;
 34146                                  ;**	$OPen - Open a File
 34147                                  ;
 34148                                  ;	given a path name in DS:DX and an open mode in AL, $Open opens the
 34149                                  ;	file and and returns a handle
 34150                                  ;
 34151                                  ;	ENTRY	(DS:DX) = pointer to asciz name
 34152                                  ;		(AL) = open mode
 34153                                  ;	EXIT	'C' clear if OK
 34154                                  ;		  (ax) = file handle
 34155                                  ;		'C' set if error
 34156                                  ;		  (ax) = error code
 34157                                  ;	USES	all
 34158                                  ;
 34159                                  ;----------------------------------------------------------------------------
 34160                                  
 34161                                  _$OPEN:       
 34162 00007036 30E4                    	xor	ah,ah  ; MSDOS 6.0	
 34163                                  _$Open2:
 34164                                  	;mov	ch,16h
 34165 00007038 B516                    	mov	ch,attr_hidden+attr_system+attr_directory
 34166 0000703A E84502                  	call	SetAttrib
 34167 0000703D B9[7E37]                	mov	cx,DOS_OPEN
 34168                                  
 34169                                  	;xor	ah,ah  ; MSDOS 3.3
 34170                                  
 34171 00007040 50                      	push	ax
 34172                                  
 34173                                  ;*	General file open/create code. The $CREATE call and the various
 34174                                  ;	$OPEN calls all come here.
 34175                                  ;
 34176                                  ;	We'll share a lot of the standard stuff of allocating SFTs, cracking
 34177                                  ;	path names, etc., and then dispatch to our individual handlers.
 34178                                  ;	WARNING - this info and list is just a guess, not definitive - jgl
 34179                                  ;
 34180                                  ;	(TOS) = create mode
 34181                                  ;	(CX) = address of routine to call to do actual function
 34182                                  ;	(DS:DX) = ASCIZ name
 34183                                  ;	SAttrib = Attribute mask
 34184                                  
 34185                                  ;	Get a free SFT and mark it "being allocated"
 34186                                  
 34187                                  AccessFile:
 34188 00007041 E828B0                  	call	EcritSFT
 34189 00007044 E804F8                  	call	SFNFree			; get a free sfn
 34190 00007047 E82AB0                  	call	LcritSFT
 34191 0000704A 7214                    	jc	short OpenFailJ		; oops, no free sft's
 34192 0000704C 36891E[4205]            	MOV	[SS:SFN],BX		; save the SFN for later;smr;SS Override
 34193 00007051 36893E[3605]            	MOV	[SS:THISSFT],DI		; save the SF offset	;smr;SS Override
 34194 00007056 368C06[3805]            	MOV	[SS:THISSFT+2],ES	; save the SF segment	;smr;SS Override
 34195                                  
 34196                                  ;	Find a free area in the user's JFN table.
 34197                                  
 34198 0000705B E8DAF7                  	call	JFNFree			; get a free jfn
 34199 0000705E 7303                    	jnc	short SaveJFN
 34200                                  OpenFailJ:
 34201 00007060 E98100                  	JMP	OpenFail		; there were free JFNs... try SFN
 34202                                  
 34203                                  SaveJFN:
 34204 00007063 36893E[4605]            	mov	[ss:PJFN],DI		; save the jfn offset	;smr;SS Override
 34205 00007068 368C06[4805]            	MOV	[ss:PJFN+2],ES		; save the jfn segment	;smr;SS Override
 34206 0000706D 36891E[4405]            	MOV	[ss:JFN],BX		; save the jfn itself	;smr;SS Override
 34207                                  
 34208                                  ;	We have been given an JFN. We lock it down to prevent other tasks from
 34209                                  ;	reusing the same JFN.
 34210                                  
 34211 00007072 368B1E[4205]            	MOV	BX,[ss:SFN]					;smr;SS Override
 34212 00007077 26881D                  	MOV	[ES:DI],BL		; assign the JFN
 34213 0000707A 89D6                    	MOV	SI,DX			; get name in appropriate place
 34214 0000707C BF[6003]                	MOV	DI,OPENBUF		; appropriate buffer
 34215 0000707F 51                      	push	cx			; save routine to call
 34216 00007080 E8C9F9                  	call	TransPath		; convert the path
 34217 00007083 5B                      	pop	bx			; (bx) = routine to call
 34218                                  
 34219 00007084 36C536[3605]            	LDS	SI,[SS:THISSFT]					;smr;SS Override
 34220 00007089 720A                    	JC	short OpenCleanJ	; no error, go and open file
 34221 0000708B 36803E[1505]FF          	CMP	byte [ss:CMETA],-1				;smr;SS Override
 34222 00007091 7404                    	JZ	short SetSearch
 34223                                  	;mov	al,2
 34224 00007093 B002                    	MOV	AL,error_file_not_found ; no meta chars allowed
 34225                                  OpenCleanJ:
 34226 00007095 EB3E                    	JMP	short OpenClean
 34227                                  
 34228                                  SetSearch:
 34229 00007097 58                      	pop	ax			; Mode (Open), Attributes (Create)
 34230                                  
 34231                                  ;	We need to get the new inheritance bits.
 34232                                  
 34233 00007098 31C9                    	xor	cx,cx
 34234                                  	; MSDOS 6.0
 34235                                  	;mov	[si+2],cx ; 0
 34236 0000709A 894C02                  	MOV	[SI+SF_ENTRY.sf_mode],cx ; initialize mode field to 0
 34237                                  	;mov    [si+51],cx ; 0
 34238 0000709D 894C33                  	MOV	[SI+SF_ENTRY.sf_MFT],cx	 ; clean out sharing info
 34239                                  	;
 34240 000070A0 81FB[7E37]              	CMP	BX,DOS_OPEN
 34241 000070A4 7509                    	JNZ	short _DoOper
 34242                                  	;test   al,80h
 34243 000070A6 A880                    	test	AL,SHARING_NO_INHERIT	; look for no inher
 34244 000070A8 7405                    	JZ	short _DoOper ; 10/08/2018
 34245 000070AA 247F                    	AND	AL,7Fh			; mask off inherit bit
 34246                                  	;mov	cx,1000h
 34247 000070AC B90010                  	MOV	CX,sf_no_inherit
 34248                                  _DoOper:
 34249                                  	;; MSDOS 3.3
 34250                                  	;;mov	word [si+2], 0
 34251                                  	;;mov	word [si+33h], 0
 34252                                  	;MOV	word [SI+SF_ENTRY.sf_mode],0
 34253                                  	;MOV	word [SI+SF_ENTRY.sf_MFT],0
 34254                                  
 34255                                  	; MSDOS 6.0
 34256                                  ;**	Check if this is an extended open. If so you must set the
 34257                                  ;	modes in sf_mode. Call Set_EXT_mode to do all this. See
 34258                                  ;	Set_EXT_mode in creat.asm
 34259                                  
 34260                                  	; MSDOS 6.0
 34261                                  	;;SAVE	<di, es>                ;M022 conditional removed here
 34262                                  	;push	di
 34263                                  	;push	es
 34264                                  	;push	ds
 34265                                  	;pop	es
 34266                                  	;push	si
 34267                                  	;pop	di			; (es:di) = SFT address
 34268                                  	;call	Set_EXT_mode
 34269                                  	;;RESTORE <es, di>
 34270                                  	;pop	es
 34271                                  	;pop	di
 34272                                  
 34273                                  	;Context DS
 34274 000070AF 16                      	push	ss
 34275 000070B0 1F                      	pop	ds	
 34276                                  
 34277 000070B1 51                      	push	cx
 34278 000070B2 FFD3                    	CALL	BX			; blam!
 34279 000070B4 59                      	pop	cx
 34280 000070B5 C536[3605]              	LDS	SI,[THISSFT]
 34281                                  	;JC	short OpenE2		;AN000;FT. chek extended open hooks first
 34282 000070B9 721B                    	jc	short OpenE ; MSDOS 3.3
 34283                                  
 34284                                  ;	The SFT was successfully opened. Remove busy mark.
 34285                                  
 34286                                  OpenOK:
 34287                                  	;MOV	word [SI+SF_ENTRY.sf_ref_count],1
 34288 000070BB C7040100                	mov	word [SI],1
 34289                                  	;or	[SI+5],cx
 34290 000070BF 094C05                  	OR	[SI+SF_ENTRY.sf_flags],CX ; set no inherit bit if necessary
 34291                                  
 34292                                  ; If the open mode is 70, we scan the system for other SFT's with the same
 34293                                  ; contents. If we find one, then we can 'collapse' thissft onto the already
 34294                                  ; opened one. Otherwise we use this new one. We compare uid/pid/mode/mft
 34295                                  ;
 34296                                  ; Since this is only relevant on sharer systems, we stick this code into the
 34297                                  ; sharer.
 34298                                  
 34299 000070C2 36A1[4405]              	MOV	AX,[ss:JFN]				;smr;SS Override
 34300 000070C6 36FF1E[8C00]            	Call	far [ss:JShare+(12*4)]	; 12 = ShCol	;smr;SS Override
 34301                                  
 34302 000070CB 36C706[4205]FFFF        	MOV	word [ss:SFN],-1	; clear out sfn pointer	;smr;SS Override
 34303 000070D2 E928A6                  	jmp	SYS_RET_OK		; bye with no errors
 34304                                  
 34305                                  	; MSDOS 6.0
 34306                                  ;Extended Open hooks check
 34307                                  ;OpenE2:					;AN000;;EO.
 34308                                  ;	CMP	AX,error_invalid_parameter ;AN000;;EO. IFS extended open ?
 34309                                  ;	JNZ	short OpenE		;AN000;;EO. no.
 34310                                  ;	JMP	short OpenCritLeave	;AN000;;EO. keep handle
 34311                                  
 34312                                  ;	Extended Open hooks check
 34313                                  ;
 34314                                  ;	AL has error code.  Stack has argument to dos_open/dos_create.
 34315                                  
 34316                                  OpenClean:
 34317 000070D5 5B                      	pop	bx			; clean off stack
 34318                                  OpenE:
 34319                                  	;MOV	word [SI+SF_ENTRY.sf_ref_count],0 ; release SFT
 34320 000070D6 C7040000                	mov	word [SI],0
 34321 000070DA 36C536[4605]            	LDS	SI,[ss:PJFN]				;smr;SS Override
 34322 000070DF C604FF                  	MOV	BYTE [SI],0FFh		; free the SFN...
 34323 000070E2 EB02                    	JMP	SHORT OpenCritLeave
 34324                                  
 34325                                  OpenFail:
 34326 000070E4 FB                      	STI
 34327 000070E5 59                      	pop	cx			; Clean stack
 34328                                  OpenCritLeave:
 34329 000070E6 36C706[4205]FFFF        	MOV	word [SS:SFN],-1	; remove mark.
 34330                                  
 34331                                  	; MSDOS 6.0
 34332                                  ;; File Tagging DOS 4.00
 34333                                  ;	CMP	[SS:EXTERR],error_Code_Page_Mismatched 
 34334                                  ;				;AN000;;FT. code page mismatch;smr;SS Override
 34335                                  ;	JNZ	short NORERR	  	;AN000;;FT. no
 34336                                  ;	jmp	From_GetSet		;AN000;;FT. yes
 34337                                  ;NORERR: 				;AN000;
 34338                                  ;; File Tagging DOS 4.00
 34339                                  
 34340 000070ED E919A6                  	jmp	SYS_RET_ERR		; no free, return error
 34341                                  
 34342                                  ; MSDOS 2.11
 34343                                  ;BREAK <$CREAT - creat a new file and open him for input>
 34344                                  ;----------------------------------------------------------------------------
 34345                                  ;   Assembler usage:
 34346                                  ;           LDS     DX, name
 34347                                  ;           MOV     AH, Creat
 34348                                  ;           MOV     CX, access
 34349                                  ;           INT     21h
 34350                                  ;       ; AX now has the handle
 34351                                  ;
 34352                                  ;   Error returns:
 34353                                  ;           AX = error_access_denied
 34354                                  ;              = error_path_not_found
 34355                                  ;              = error_too_many_open_files
 34356                                  ;----------------------------------------------------------------------------
 34357                                  
 34358                                  ; MSDOS 6.0
 34359                                  ;	BREAK <$Creat - create a brand-new file>
 34360                                  ;----------------------------------------------------------------------------
 34361                                  ;
 34362                                  ;**	$Creat - Create a File
 34363                                  ;
 34364                                  ;	$Creat creates the directory entry specified in DS:DX and gives it the
 34365                                  ;	initial attributes contained in CX
 34366                                  ;
 34367                                  ;	ENTRY	(DS:DX) = ASCIZ path name
 34368                                  ;		(CX) = initial attributes
 34369                                  ;	EXIT	'C' set if error
 34370                                  ;		  (ax) = error code
 34371                                  ;		'C' clear if OK
 34372                                  ;		  (ax) = file handle
 34373                                  ;	USES	all
 34374                                  ;
 34375                                  ;----------------------------------------------------------------------------
 34376                                  
 34377                                  _$CREAT:
 34378 000070F0 51                      	push	cx			; Save attributes on stack
 34379 000070F1 B9[E836]                	mov	CX,DOS_CREATE		; routine to call
 34380                                  AccessSet:
 34381                                  	;mov	byte [ss:SATTRIB],6
 34382 000070F4 36C606[0805]06          	mov	byte [ss:SATTRIB],attr_hidden+attr_system ;smr;SS Override
 34383                                  	; 10/08/2018
 34384 000070FA E944FF                  	JMP	AccessFile		; use good ol' open
 34385                                  
 34386                                  
 34387                                  ; MSDOS 6.0 (MSDOS 3.3)
 34388                                  ;	BREAK <$CHMOD - change file attributes>
 34389                                  ;----------------------------------------------------------------------------
 34390                                  ;
 34391                                  ;**	$CHMOD - Change File Attributes
 34392                                  ;
 34393                                  ;   Assembler usage:
 34394                                  ;	    LDS     DX, name
 34395                                  ;	    MOV     CX, attributes
 34396                                  ;	    MOV     AL,func (0=get, 1=set)
 34397                                  ;	    INT     21h
 34398                                  ;   Error returns:
 34399                                  ;	    AX = error_path_not_found
 34400                                  ;	    AX = error_access_denied
 34401                                  ;
 34402                                  ;----------------------------------------------------------------------------
 34403                                  
 34404                                  _$CHMOD:
 34405                                  	; 05/08/2018 - Retro DOS v3.0
 34406                                  	;IBMDOS.COM (MSDOS 3.3, 1987) - Offset 6FCCh ,
 34407 000070FD BF[6003]                	MOV	DI,OPENBUF		; appropriate buffer
 34408 00007100 50                      	push	ax
 34409 00007101 51                      	push	cx			; save function and attributes
 34410 00007102 89D6                    	MOV	SI,DX			; get things in appropriate places
 34411 00007104 E849F9                  	call	TransPathSet		; get correct path
 34412 00007107 59                      	pop	cx
 34413 00007108 58                      	pop	ax			; and get function and attrs back
 34414 00007109 7235                    	JC	short ChModErr		; errors get mapped to path not found
 34415 0000710B 16                      	push	ss			; set up for later possible calls
 34416 0000710C 1F                      	pop	ds
 34417 0000710D 803E[1505]FF            	CMP	byte [CMETA],-1
 34418 00007112 752C                    	JNZ	short ChModErr
 34419                                  	;mov	byte [SATTRIB],16h
 34420 00007114 C606[0805]16            	MOV	byte [SATTRIB],attr_hidden+attr_system+attr_directory
 34421 00007119 2C01                    	SUB	AL,1			; fast way to discriminate
 34422 0000711B 720B                    	JB	short ChModGet		; 0 -> go get value
 34423 0000711D 7417                    	JZ	short ChModSet		; 1 -> go set value
 34424                                  	;mov	byte [EXTERR_LOCUS],1
 34425 0000711F C606[D102]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 34426                                  	;mov	al,1
 34427 00007124 B001                    	mov	al,error_invalid_function ; bad value
 34428                                  	;jmp	SYS_RET_ERR
 34429 00007126 EB1A                    	jmp	short ChModE	
 34430                                  ChModGet:
 34431 00007128 E8C4C4                  	call	GET_FILE_INFO		; suck out the ol' info
 34432 0000712B 7215                    	JC	short ChModE		; error codes are already set for ret
 34433 0000712D E8DBA4                  	call	Get_User_Stack		; point to user saved vaiables
 34434                                  	;mov	[SI+4],ax
 34435 00007130 894404                  	MOV	[SI+user_env.user_CX],AX  ; return the attributes
 34436 00007133 E9C7A5                  	jmp	SYS_RET_OK		; say sayonara
 34437                                  ChModSet:
 34438 00007136 89C8                    	MOV	AX,CX			; get attrs in position
 34439 00007138 E815C5                  	call	SET_FILE_ATTRIBUTE	; go set
 34440 0000713B 7205                    	JC	short ChModE		; errors are set
 34441 0000713D E9BDA5                  	jmp	SYS_RET_OK
 34442                                  ChModErr:
 34443                                  	;mov	al, 3
 34444 00007140 B003                    	mov	al,error_path_not_found
 34445                                  ChModE:
 34446 00007142 E9C4A5                  	jmp	SYS_RET_ERR
 34447                                  
 34448                                  ;	BREAK <$UNLINK - delete a file entry>
 34449                                  ;----------------------------------------------------------------------------
 34450                                  ;
 34451                                  ;**	$UNLINK - Delete a File
 34452                                  ;
 34453                                  ;
 34454                                  ;	Assembler usage:
 34455                                  ;	    LDS     DX, name
 34456                                  ;	    IF VIA SERVER DOS CALL
 34457                                  ;	     MOV     CX,SEARCH_ATTRIB
 34458                                  ;	    MOV     AH, Unlink
 34459                                  ;	    INT     21h
 34460                                  ;
 34461                                  ;	ENTRY	(ds:dx) = path name
 34462                                  ;		(cx) = search_attribute, if via server_dos
 34463                                  ;	EXIT	'C' clear if no error
 34464                                  ;		'C' set if error
 34465                                  ;		  (ax) = error code
 34466                                  ;			= error_file_not_found
 34467                                  ;			= error_access_denied
 34468                                  ;
 34469                                  ;----------------------------------------------------------------------------
 34470                                  
 34471                                  _$UNLINK:
 34472 00007145 51                      	push	cx			; Save possible CX input parm
 34473 00007146 89D6                    	MOV	SI,DX			; Point at input string
 34474 00007148 BF[6003]                	MOV	DI,OPENBUF		; temp spot for path
 34475 0000714B E802F9                  	call	TransPathSet		; go get normalized path
 34476 0000714E 59                      	pop	cx
 34477 0000714F 72EF                    	JC	short ChModErr		; badly formed path
 34478 00007151 36803E[1505]FF          	CMP	byte [ss:CMETA],-1	; meta chars?	;smr;SS Override
 34479 00007157 750F                    	JNZ	short NotFound
 34480 00007159 16                      	push	ss
 34481 0000715A 1F                      	pop	ds
 34482                                  	;mov	ch,6
 34483 0000715B B506                    	mov	ch,attr_hidden+attr_system ; unlink appropriate files
 34484 0000715D E82201                  	call	SetAttrib
 34485 00007160 E809C1                  	call	DOS_DELETE		; remove that file
 34486 00007163 7205                    	JC	short UnlinkE 		; error is there
 34487 00007165 E995A5                  	jmp	SYS_RET_OK		; okey doksy
 34488                                  NotFound:
 34489                                  	;mov	al, 3
 34490 00007168 B003                    	MOV	AL,error_path_not_found
 34491                                  UnlinkE:
 34492 0000716A E99CA5                  	jmp	SYS_RET_ERR		; bye
 34493                                  
 34494                                  ;BREAK <$RENAME - move directory entries around>
 34495                                  ;----------------------------------------------------------------------------
 34496                                  ;
 34497                                  ;   Assembler usage:
 34498                                  ;	    LDS     DX, source
 34499                                  ;	    LES     DI, dest
 34500                                  ;	    IF VIA SERVER DOS CALL
 34501                                  ;	     MOV     CX,SEARCH_ATTRIB
 34502                                  ;	    MOV     AH, Rename
 34503                                  ;	    INT     21h
 34504                                  ;
 34505                                  ;   Error returns:
 34506                                  ;	    AX = error_file_not_found
 34507                                  ;	       = error_not_same_device
 34508                                  ;	       = error_access_denied
 34509                                  ;
 34510                                  ;----------------------------------------------------------------------------
 34511                                  
 34512                                  _$RENAME:
 34513                                  	; MSDOS 3.3 (& MSDOS 6.0)
 34514 0000716D 51                      	push	cx
 34515 0000716E 1E                      	push	ds
 34516 0000716F 52                      	push	dx			; save source and possible CX arg
 34517 00007170 06                      	PUSH	ES
 34518 00007171 1F                      	POP	DS			; move dest to source
 34519 00007172 89FE                    	MOV	SI,DI			; save for offsets
 34520 00007174 BF[E003]                	MOV	DI,RENBUF
 34521 00007177 E8D6F8                  	call	TransPathSet		; munge the paths
 34522 0000717A 36FF36[4A05]            	PUSH	word [ss:WFP_START]	; get pointer	;smr;SS Override
 34523 0000717F 368F06[4C05]            	POP	word [ss:REN_WFP]	; stash it	;smr;SS Override
 34524 00007184 5E                      	pop	si
 34525 00007185 1F                      	pop	ds
 34526 00007186 59                      	pop	cx			; get back source and possible CX arg
 34527                                  epjc2:	
 34528 00007187 72B7                    	JC	short ChModErr		; get old error
 34529 00007189 36803E[1505]FF          	CMP	byte [ss:CMETA],-1			;smr;SS Override
 34530 0000718F 75D7                    	JNZ	short NotFound
 34531 00007191 51                      	push	cx			; Save possible CX arg
 34532 00007192 BF[6003]                	MOV	DI,OPENBUF		; appropriate buffer
 34533 00007195 E8B8F8                  	call	TransPathSet		; wham
 34534 00007198 59                      	pop	cx
 34535 00007199 72EC                    	JC	short epjc2
 34536 0000719B 16                      	push	ss
 34537 0000719C 1F                      	pop	ds
 34538 0000719D 803E[1505]FF            	CMP	byte [CMETA],-1
 34539 000071A2 72C4                    	JB	short NotFound
 34540                                  
 34541                                  	; MSDOS 6.0
 34542 000071A4 FF36[3A05]              	PUSH	WORD [THISCDS]		   ;AN000;;MS.save thiscds
 34543 000071A8 FF36[3C05]              	PUSH	WORD [THISCDS+2]	   ;AN000;;MS.
 34544 000071AC BF[6003]                	MOV	DI,OPENBUF		   ;AN000;;MS.
 34545 000071AF 16                      	PUSH	SS			   ;AN000;;MS.
 34546 000071B0 07                      	POP	ES			   ;AN000;;MS.es:di-> source
 34547 000071B1 30C0                    	XOR	AL,AL			   ;AN000;;MS.scan all CDS
 34548                                  rnloop: 				   ;AN000;
 34549 000071B3 E80EF8                  	call	GetCDSFromDrv		   ;AN000;;MS.
 34550 000071B6 7211                    	JC	short dorn		   ;AN000;;MS.	end of CDS
 34551 000071B8 E879AD                  	call	StrCmp			   ;AN000;;MS.	current dir ?
 34552 000071BB 7404                    	JZ	short rnerr		   ;AN000;;MS.	yes
 34553 000071BD FEC0                    	INC	AL			   ;AN000;;MS.	next
 34554 000071BF EBF2                    	JMP	short rnloop		   ;AN000;;MS.
 34555                                  rnerr:					   ;AN000;
 34556 000071C1 83C404                  	ADD	SP,4			   ;AN000;;MS. pop thiscds
 34557                                  	;error	error_current_directory    ;AN000;;MS.
 34558 000071C4 B010                    	mov	al,error_current_directory 
 34559 000071C6 E940A5                  	jmp	SYS_RET_ERR
 34560                                  dorn:					   ;AN000;
 34561 000071C9 368F06[3C05]            	POP	WORD [SS:THISCDS+2]	   ;AN000;;MS.;PBUGBUG;SS REQD??
 34562 000071CE 368F06[3A05]            	POP	WORD [SS:THISCDS]	   ;AN000;;MS.;PBUGBUG;SS REQD??
 34563                                  
 34564 000071D3 16                      	push	ss
 34565 000071D4 1F                      	pop	ds
 34566                                  
 34567                                  	; MSDOS 3.3 (& MSDOS 6.0)
 34568                                  	;mov	ch,16h
 34569 000071D5 B516                    	mov	ch,attr_directory+attr_hidden+attr_system
 34570                                  					; rename appropriate files
 34571 000071D7 E8A800                  	call	SetAttrib
 34572 000071DA E83AC2                  	call	DOS_RENAME		; do the deed
 34573 000071DD 728B                    	JC	short UnlinkE 		; errors
 34574                                  
 34575 000071DF E91BA5                  	jmp	SYS_RET_OK
 34576                                  
 34577                                  
 34578                                  ; 14/07/2018 - Retro DOS v3.0
 34579                                  ; MSDOS 3.3 (& MSDOS 6.0)
 34580                                  
 34581                                  ;Break <$CreateNewFile - Create a new directory entry>
 34582                                  ;----------------------------------------------------------------------------
 34583                                  ;   CreateNew - Create a new directory entry.  Return a file handle if there
 34584                                  ;	was no previous directory entry, and fail if a directory entry with
 34585                                  ;	the same name existed previously.
 34586                                  ;
 34587                                  ;   Inputs:	DS:DX point to an ASCIZ file name
 34588                                  ;		CX contains default file attributes
 34589                                  ;   Outputs:	Carry Clear:
 34590                                  ;		    AX has file handle opened for read/write
 34591                                  ;		Carry Set:
 34592                                  ;		    AX has error code
 34593                                  ;   Registers modified: All
 34594                                  ;----------------------------------------------------------------------------
 34595                                  
 34596                                  _$CreateNewFile:
 34597 000071E2 51                      	push	cx			; Save attributes on stack
 34598 000071E3 B9[7937]                	MOV	CX,DOS_Create_New	; routine to call
 34599 000071E6 E90BFF                  	JMP	AccessSet		; use good ol' open
 34600                                  
 34601                                  ;**	BinToAscii - convert a number to a string.
 34602                                  ;----------------------------------------------------------------------------
 34603                                  ;	BinToAscii converts a 16 bit number into a 4 ascii characters.
 34604                                  ;	This routine is used to generate temp file names so we don't spend
 34605                                  ;	the time and code needed for a true hex number, we just use
 34606                                  ;	A thorugh O.
 34607                                  ;
 34608                                  ;	ENTRY	(ax) = value
 34609                                  ;		(es:di) = destination
 34610                                  ;	EXIT	(es:di) updated by 4
 34611                                  ;	USES	cx, di, flags
 34612                                  ;----------------------------------------------------------------------------
 34613                                  
 34614                                  ; MSDOS 3.3
 34615                                  ;BinToAscii:
 34616                                  ;	mov     cx,4
 34617                                  ;bta5:
 34618                                  ;	push    cx
 34619                                  ;	mov     cl,4
 34620                                  ;	rol     ax,cl
 34621                                  ;	push    ax
 34622                                  ;	and     al,0Fh
 34623                                  ;	add     al,'0'
 34624                                  ;	cmp     al,'9'
 34625                                  ;	jbe     short bta6
 34626                                  ;	add     al,7
 34627                                  ;bta6: 
 34628                                  ;	stosb
 34629                                  ;	pop     ax
 34630                                  ;	pop     cx
 34631                                  ;	loop    bta5
 34632                                  ;	retn
 34633                                  
 34634                                  ; MSDOS 6.0
 34635                                  BinToAscii:
 34636 000071E9 B90404                  	mov	cx,404h			; (ch) = digit counter, (cl) = shift cnt
 34637                                  bta5:	
 34638 000071EC D3C0                    	ROL	AX,CL			; move leftmost nibble into rightmost
 34639 000071EE 50                      	push	ax			; preserve remainder of digits
 34640 000071EF 240F                    	AND	AL,0Fh			; grab low nibble
 34641 000071F1 0441                    	ADD	AL,'A'			; turn into ascii
 34642 000071F3 AA                      	STOSB				; drop in the character
 34643 000071F4 58                      	pop	ax			; (ax) = shifted number
 34644 000071F5 FECD                    	dec	ch
 34645 000071F7 75F3                    	jnz	short bta5		; process 4 digits
 34646 000071F9 C3                      	retn
 34647                                  
 34648                                  ;Break	<$CreateTempFile - create a unique name>
 34649                                  ;----------------------------------------------------------------------------
 34650                                  ;   $CreateTemp - given a directory, create a unique name in that directory.
 34651                                  ;	Method used is to get the current time, convert to a name and attempt
 34652                                  ;	a create new.  Repeat until create new succeeds.
 34653                                  ;
 34654                                  ;   Inputs:	DS:DX point to a null terminated directory name.
 34655                                  ;		CX  contains default attributes
 34656                                  ;   Outputs:	Unique name is appended to DS:DX directory.
 34657                                  ;		AX has handle
 34658                                  ;   Registers modified: all
 34659                                  ;----------------------------------------------------------------------------
 34660                                  
 34661                                  _$CreateTempFile:
 34662                                  	;Enter
 34663 000071FA 55                      	push	bp
 34664 000071FB 89E5                    	mov	bp,sp
 34665                                  
 34666                                  	;LocalVar    EndPtr,DWORD
 34667                                  	;LocalVar    FilPtr,DWORD
 34668                                  	;LocalVar    Attr,WORD
 34669                                  
 34670 000071FD 83EC0A                  	sub	sp,10
 34671                                  
 34672                                  	;test	cx,0FFD8h
 34673 00007200 F7C1D8FF                	test	CX,~attr_changeable
 34674 00007204 7405                    	JZ	short OKatts		; Ok if no non-changeable bits set
 34675                                  ;
 34676                                  ; We need this "hook" here to detect these cases (like user sets one both of
 34677                                  ; vol_id and dir bits) because of the structure of the or $CreateNewFile loop
 34678                                  ; below.  The code loops on error_access_denied, but if one of the non
 34679                                  ; changeable attributes is specified, the loop COULD be infinite or WILL be
 34680                                  ; infinite because CreateNewFile will fail with access_denied always.  Thus we
 34681                                  ; need to detect these cases before getting to the loop.
 34682                                  ;
 34683                                  	;mov	ax, 5
 34684 00007206 B80500                  	MOV	AX,error_access_denied
 34685 00007209 EB6B                    	JMP	SHORT SETTMPERR
 34686                                  
 34687                                  OKatts:
 34688                                  	;MOV	attr,CX 		; save attribute
 34689 0000720B 894EF6                  	mov     [bp-10],cx
 34690                                  	;MOV	FilPtrL,DX		; pointer to file
 34691 0000720E 8956F8                  	mov	[bp-8],dx
 34692                                  	;MOV	FilPtrH,DS
 34693 00007211 8C5EFA                  	mov	[bp-6],ds
 34694                                  	;MOV	EndPtrH,DS		; seg pointer to end of dir
 34695 00007214 8C5EFE                  	mov	[bp-2],ds
 34696 00007217 1E                      	PUSH	DS
 34697 00007218 07                      	POP	ES			; destination for nul search
 34698 00007219 89D7                    	MOV	DI,DX
 34699 0000721B 89F9                    	MOV	CX,DI
 34700 0000721D F7D9                    	NEG	CX			; number of bytes remaining in segment
 34701                                  	; MSDOS 6.0
 34702 0000721F 09C9                    	OR	CX,CX			;AN000;MS. cx=0 ? ds:dx on segment boundary
 34703 00007221 7501                    	JNZ	short okok		;AN000;MS. no
 34704                                  	;MOV	CX,-1			;AN000;MS.
 34705 00007223 49                      	dec	cx  ; mov cx,-1
 34706                                  	;
 34707                                  okok:					;AN000;
 34708 00007224 31C0                    	XOR	AX,AX			;AN000;
 34709 00007226 F2AE                    	REPNZ	SCASB			;AN000;
 34710                                  					;AN000;
 34711 00007228 4F                      	DEC	DI			; point back to the null
 34712 00007229 268A45FF                	MOV	AL,[ES:DI-1]		; Get char before the NUL
 34713 0000722D E818E4                  	call	PATHCHRCMP		; Is it a path separator?
 34714 00007230 7403                    	JZ	short SETENDPTR		; Yes
 34715                                  STOREPTH:
 34716 00007232 B05C                    	MOV	AL,'\'
 34717 00007234 AA                      	STOSB				; Add a path separator (and INC DI)
 34718                                  SETENDPTR:
 34719                                  	;MOV	EndPtrL,DI		; pointer to the tail
 34720                                  	; 10/07/2024 (Retro DOS v3-v4 BugFix - Erdogan Tan - Istanbul)
 34721                                  	;mov	[bp-4],dl ; (Retro DOS v3-v4 !Bug!)
 34722 00007235 897EFC                  	mov	[bp-4],di ; !Fix!
 34723                                  CreateLoop:
 34724 00007238 16                      	push	ss			; let ReadTime see variables
 34725 00007239 1F                      	pop	ds
 34726 0000723A 55                      	push	bp
 34727 0000723B E8A2A6                  	call	READTIME		; go get time
 34728 0000723E 5D                      	pop	bp
 34729                                  ;
 34730                                  ; Time is in CX:DX.  Go drop it into the string.
 34731                                  ;
 34732                                  	;les	di,EndPtr		; point to the string
 34733 0000723F C47EFC                  	les	di,[BP-4]
 34734 00007242 89C8                    	mov	ax,cx
 34735 00007244 E8A2FF                  	call	BinToAscii		; store upper word
 34736 00007247 89D0                    	mov	ax,dx
 34737 00007249 E89DFF                  	call	BinToAscii		; store lower word
 34738 0000724C 30C0                    	xor	al,al
 34739 0000724E AA                      	STOSB				; nul terminate
 34740                                  	;LDS	DX,FilPtr		; get name
 34741 0000724F C556F8                  	lds	dx,[bp-8]
 34742                                  	;MOV	CX,Attr 		; get attr
 34743 00007252 8B4EF6                  	mov	cx,[bp-10]
 34744 00007255 55                      	push	bp
 34745 00007256 E889FF                  	CALL	_$CreateNewFile		; try to create a new file
 34746 00007259 5D                      	pop	bp
 34747 0000725A 731B                    	JNC	short CreateDone	; failed, go try again
 34748                                  ;
 34749                                  ; The operation failed and the error has been mapped in AX.  Grab the extended
 34750                                  ; error and figure out what to do.
 34751                                  ;
 34752                                  	;; MSDOS 3.3			; M049 - start
 34753                                  ;;	mov	ax,[ss:EXTERR]				;smr;SS Override
 34754                                  ;;	cmp	al,error_file_exists
 34755                                  ;;	jz	short CreateLoop	; file existed => try with new name
 34756                                  ;;	cmp	al,error_access_denied
 34757                                  ;;	jz	short CreateLoop	; access denied (attr mismatch)
 34758                                  
 34759                                  	; MSDOS 6.0
 34760                                  	;cmp	al,50h
 34761 0000725C 3C50                    	CMP	AL,error_file_exists	; Q: did file already exist
 34762 0000725E 74D8                    	JZ	short CreateLoop	; Y: try again
 34763                                  	;cmp	al,5
 34764 00007260 3C05                    	CMP	AL,error_access_denied	; Q: was it access denied
 34765 00007262 7512                    	JNZ	short SETTMPERR		; N: Error out
 34766                                  					; Y: Check to see if we got this due
 34767                                  					;    to the network drive. Note that
 34768                                  					;    the redir will set the exterr
 34769                                  					;    to error_cannot_make if this is 
 34770                                  					;    so. 
 34771 00007264 36803E[D202]41          	CMP	byte [SS:EXTERR],error_net_access_denied ; M069
 34772                                  					; See if it's REALLY an att mismatch
 34773 0000726A 740A                    	je	short SETTMPERR		; no, network error, stop
 34774                                  ;M070
 34775                                  ; If the user failed on an I24, we do not want to try again
 34776                                  ;
 34777 0000726C 36803E[D202]53          	cmp	byte [SS:EXTERR],error_FAIL_I24 ;User failed on I24? ;M070
 34778 00007272 7402                    	je	short SETTMPERR		;yes, do not try again ;M070
 34779                                  
 34780 00007274 EBC2                    	jmp	short CreateLoop	;attr mismatch, try again ;M070
 34781                                  
 34782                                  ;;	MOV	AL,error_access_denied	; Return this "extended" error
 34783                                  					; M049 - end
 34784                                  SETTMPERR:
 34785 00007276 F9                      	STC
 34786                                  CreateDone:
 34787                                  	;Leave
 34788 00007277 89EC                    	mov	sp,bp
 34789 00007279 5D                      	pop	bp
 34790 0000727A 7203                    	JC	short CreateFail
 34791 0000727C E97EA4                  	jmp	SYS_RET_OK		; success!
 34792                                  CreateFail:
 34793 0000727F E987A4                  	jmp	SYS_RET_ERR
 34794                                  
 34795                                  ;
 34796                                  ;   SetAttrib will set the search attribute (SAttrib) either to the normal
 34797                                  ;   (CH) or to the value in CL if the current system call is through
 34798                                  ;   serverdoscall.
 34799                                  ;
 34800                                  ;   Inputs:	fSharing == FALSE => set sattrib to CH
 34801                                  ;		fSharing == TRUE => set sattrib to CL
 34802                                  ;   Outputs:	none
 34803                                  ;   Registers changed:	CX
 34804                                  
 34805                                  SetAttrib:
 34806 00007282 36F606[0D05]FF          	test	byte [SS:FSHARING],-1		;smr;SS Override
 34807 00007288 7502                    	jnz	short Set
 34808 0000728A 88E9                    	mov	cl,ch
 34809                                  Set:
 34810 0000728C 36880E[0805]            	mov	byte [ss:SATTRIB],cl		;smr;SS Override
 34811 00007291 C3                      	retn
 34812                                  
 34813                                  ; 14/07/2018 - Retro DOS v3.0
 34814                                  ; MSDOS 6.0
 34815                                  
 34816                                  ;Break	<Extended_Open- Extended open the file>
 34817                                  ;----------------------------------------------------------------------------
 34818                                  ; Input: AL= 0 reserved  AH=6CH
 34819                                  ;	 BX= mode
 34820                                  ;	 CL= create attribute  CH=search attribute (from server)
 34821                                  ;	 DX= flag
 34822                                  ;	 DS:SI = file name
 34823                                  ;	 ES:DI = parm list
 34824                                  ;			   DD  SET EA list (-1) null
 34825                                  ;			   DW  n  parameters
 34826                                  ;			   DB  type (TTTTTTLL)
 34827                                  ;			   DW  IOMODE
 34828                                  ; Function: Extended Open
 34829                                  ; Output: carry clear
 34830                                  ;		     AX= handle
 34831                                  ;		     CX=1 file opened
 34832                                  ;			2 file created/opened
 34833                                  ;			3 file replaced/opened
 34834                                  ;	  carry set: AX has error code
 34835                                  ;----------------------------------------------------------------------------
 34836                                  
 34837                                  ;_$Extended_Open:			  ;AN000;
 34838                                  ;	;ASSUME	CS:DOSCODE,SS:DOSDATA	  ;AN000;
 34839                                  ;	MOV	[SS:EXTOPEN_FLAG],DX	  ;AN000;EO. save ext. open flag;smr;SS Override
 34840                                  ;	MOV	word [SS:EXTOPEN_IO_MODE],0 ;AN000;EO. initialize IO mode;smr;SS Override
 34841                                  ;	TEST	DX,reserved_bits_mask	  ;AN000;EO. reserved bits 0  ?
 34842                                  ;	JNZ	short ext_inval2	  ;AN000;EO. no
 34843                                  ;	MOV	AH,DL			  ;AN000;EO. make sure flag is right
 34844                                  ;	CMP	DL,0			  ;AN000;EO. all fail ?
 34845                                  ;	JZ	short ext_inval2	  ;AN000;EO. yes, error
 34846                                  ;	AND	DL,exists_mask		  ;AN000;EO. get exists action byte
 34847                                  ;	CMP	DL,2			  ;AN000;EO, > 02
 34848                                  ;	JA	short ext_inval2	  ;AN000;EO. yes ,error
 34849                                  ;	AND	AH,not_exists_mask	  ;AN000;EO. get no exists action byte
 34850                                  ;	CMP	AH,10H			  ;AN000;EO. > 10
 34851                                  ;	JA	short ext_inval2	  ;AN000;EO. yes error
 34852                                  ;
 34853                                  ;	MOV	[SS:SAVE_ES],ES		  ;AN000;EO. save API parms;smr;SS Override
 34854                                  ;	MOV	[SS:SAVE_DI],DI		  ;AN000;EO.;smr;SS Override
 34855                                  ;	PUSH	word [SS:EXTOPEN_FLAG]	  ;AN000;EO.;smr;SS Override
 34856                                  ;	POP	word [SS:SAVE_DX]	  ;AN000;EO.;smr;SS Override
 34857                                  ;	MOV	[SS:SAVE_CX],CX		  ;AN000;EO.;smr;SS Override
 34858                                  ;	MOV	[SS:SAVE_BX],BX		  ;AN000;EO.;smr;SS Override
 34859                                  ;	MOV	[SS:SAVE_DS],DS		  ;AN000;EO.;smr;SS Override
 34860                                  ;	MOV	[SS:SAVE_SI],SI		  ;AN000;EO.;smr;SS Override
 34861                                  ;	MOV	DX,SI			  ;AN000;EO. ds:dx points to file name
 34862                                  ;	MOV	AX,BX			  ;AN000;EO. ax= mode
 34863                                  ;	JMP	SHORT goopen2		  ;AN000;;EO. do normal
 34864                                  ;ext_inval2:				  ;AN000;;EO.
 34865                                  ;	mov	al,error_invalid_function ;AN000;EO.. invalid function
 34866                                  ;	jmp	SYS_RET_ERR
 34867                                  ;error_return:				  ;AN000;EO.
 34868                                  ;	retn				  ;AN000;EO.. return with error
 34869                                  ;goopen2:				  ;AN000;
 34870                                  ;	TEST	BX,int_24_error 	  ;AN000;EO.. disable INT 24 error ?
 34871                                  ;	JZ	short goopen		  ;AN000;EO.. no
 34872                                  ;	OR	byte [SS:EXTOPEN_ON],EXT_OPEN_I24_OFF ;AN000;EO.. set bit to disable;smr;SS Override
 34873                                  ;goopen:					  ;AN000;
 34874                                  ;	OR	byte [SS:EXTOPEN_ON],EXT_OPEN_ON  ;AN000;EO.. set Extended Open active;smr;SS Override
 34875                                  ;	AND	word [SS:EXTOPEN_FLAG],0FFH  ;AN000;EO.create new ?;smr;SS Override
 34876                                  ;	CMP	word [SS:EXTOPEN_FLAG],ext_exists_fail + ext_nexists_create ;AN000;FT.;smr;SS Override
 34877                                  ;	JNZ	short chknext 		  ;AN000;;EO. no
 34878                                  ;	call	_$CreateNewFile		  ;AN000;;EO. yes
 34879                                  ;	JC	short error_return	  ;AN000;;EO. error
 34880                                  ;	CMP	byte [SS:EXTOPEN_ON],0	  ;AN000;;EO. IFS does it;smr;SS Override
 34881                                  ;	JZ	short ok_return2	  ;AN000;;EO. yes
 34882                                  ;	MOV	word [SS:EXTOPEN_FLAG],action_created_opened ;AN000;EO. creted/opened;smr;SS Override
 34883                                  ;	JMP	short setXAttr		  ;AN000;;EO. set XAs
 34884                                  ;ok_return2:
 34885                                  ;	jmp	SYS_RET_OK		  ;AN000;;EO.
 34886                                  ;chknext:
 34887                                  ;	TEST	word [SS:EXTOPEN_FLAG],ext_exists_open ;AN000;;EO. exists open;smr;SS Override
 34888                                  ;	JNZ	short exist_open	  ;AN000;;EO. yes
 34889                                  ;	call	_$CREAT			  ;AN000;;EO. must be replace open
 34890                                  ;	JC	short error_return	  ;AN000;;EO. return with error
 34891                                  ;	CMP	byte [SS:EXTOPEN_ON],0	  ;AN000;;EO. IFS does it;smr;SS Override
 34892                                  ;	JZ	short ok_return2	  ;AN000;;EO. yes
 34893                                  ;	MOV	word [SS:EXTOPEN_FLAG],action_created_opened ;AN000;EO. prsume create/open;smr;SS Override
 34894                                  ;	TEST	byte [SS:EXTOPEN_ON],ext_file_not_exists ;AN000;;EO. file not exists ?;smr;SS Override
 34895                                  ;	JNZ	short setXAttr		  ;AN000;;EO. no
 34896                                  ;	MOV	word [SS:EXTOPEN_FLAG],action_replaced_opened ;AN000;;EO. replaced/opened;smr;SS Override
 34897                                  ;	JMP	SHORT setXAttr		  ;AN000;;EO. set XAs
 34898                                  ;error_return2:
 34899                                  ;	STC 				  ; Set Carry again to flag error ;AN001;
 34900                                  ;	retn				  ;AN000;;EO. return with error
 34901                                  ;					  ;AN000;
 34902                                  ;exist_open:				  ;AN000;
 34903                                  ;	test	byte [SS:FSHARING],-1	  ;AN000;;EO. server doscall?;smr;SS Override
 34904                                  ;	jz	short noserver		  ;AN000;;EO. no
 34905                                  ;	MOV	CL,CH			  ;AN000;;EO. cl=search attribute
 34906                                  ;noserver:
 34907                                  ;	call	_$Open2			  ;AN000;;EO. do open
 34908                                  ;	JNC	short ext_ok		  ;AN000;;EO.
 34909                                  ;	CMP	byte [SS:EXTOPEN_ON],0	  ;AN000;;EO. error and IFS call;smr;SS Override
 34910                                  ;	JZ	short error_return2	  ;AN000;;EO. return with error
 34911                                  ;local_extopen:
 34912                                  ;	CMP	AX,error_file_not_found   ;AN000;;EO. file not found error
 34913                                  ;	JNZ	short error_return2	  ;AN000;;EO. no,
 34914                                  ;	TEST	word [SS:EXTOPEN_FLAG],ext_nexists_create;AN000;;EO. want to fail;smr;SS Override
 34915                                  ;	JNZ	short do_creat		  ;AN000;;EO. yes
 34916                                  ;	JMP	short extexit 		  ;AN000;;EO. yes
 34917                                  ;do_creat:
 34918                                  ;	MOV	CX,[SS:SAVE_CX]		  ;AN000;;EO. get ds:dx for file name;smr;SS Override
 34919                                  ;	LDS	SI,[SS:SAVE_SI]		  ;AN000;;EO. cx = attribute;smr;SS Override
 34920                                  ;	MOV	DX,SI			  ;AN000;;EO.
 34921                                  ;	call	_$CREAT			  ;AN000;;EO. do create
 34922                                  ;	JC	short extexit 		  ;AN000;;EO. error
 34923                                  ;	MOV	word [SS:EXTOPEN_FLAG],action_created_opened 
 34924                                  ;					  ;AN000;;EO. is created/opened;smr;SS Override
 34925                                  ;	JMP	SHORT setXAttr		  ;AN000;;EO. set XAs
 34926                                  ;
 34927                                  ;ext_ok:
 34928                                  ;	CMP	byte [SS:EXTOPEN_ON],0	  ;AN000;;EO. IFS call ?;smr;SS Override
 34929                                  ;	JZ	short ok_return		  ;AN000;;EO. yes
 34930                                  ;	MOV	[SS:EXTOPEN_FLAG],action_opened ;AN000;;EO.  opened;smr;SS Override
 34931                                  ;setXAttr:
 34932                                  ;	call	Get_User_Stack		  ;AN000;;EO.
 34933                                  ;	MOV	AX,[SS:EXTOPEN_FLAG]	  ;AN000;;EO.;smr;SS Override
 34934                                  ;	MOV	[SI+user_env.user_CX],AX  ;AN000;;EO. set action code for cx
 34935                                  ;	POP	AX			  ;AN000;;EO.
 34936                                  ;	MOV	[SI+user_env.user_AX],AX  ;AN000;;EO. set handle for ax
 34937                                  ;
 34938                                  ;ok_return:				  ;AN000;
 34939                                  ;	jmp	SYS_RET_OK		  ;AN000;;EO.
 34940                                  ;
 34941                                  ;extexit2:				  ;AN000; ERROR RECOVERY
 34942                                  ;	POP	BX			  ;AN000;EO. close the handle
 34943                                  ;	PUSH	AX			  ;AN000;EO. save error code from set XA
 34944                                  ;	CMP	word [SS:EXTOPEN_FLAG],action_created_opened 
 34945                                  ;					  ;AN000;EO. from create;smr;SS Override
 34946                                  ;	JNZ	short justopen		  ;AN000;EO.
 34947                                  ;	LDS	SI,[SS:SAVE_SI]		  ;AN000;EO. cx = attribute;smr;SS Override
 34948                                  ;	LDS	DX,[SI]			  ;AN000;EO.
 34949                                  ;	call	_$UNLINK 		  ;AN000;EO. delete the file
 34950                                  ;	JMP	SHORT reserror		  ;AN000;EO.
 34951                                  ;
 34952                                  ;justopen:				  ;AN000;
 34953                                  ;	call	$CLOSE			  ;AN000;EO. pretend never happend
 34954                                  ;reserror:				  ;AN000;
 34955                                  ;	POP	AX			  ;AN000;EO. restore error code from set XA
 34956                                  ;	JMP	SHORT extexit		  ;AN000;EO.
 34957                                  ;
 34958                                  ;ext_file_unfound:			  ;AN000;
 34959                                  ;	MOV	AX,error_file_not_found   ;AN000;EO.
 34960                                  ;	JMP	SHORT extexit		  ;AN000;EO.
 34961                                  ;ext_inval:				  ;AN000;
 34962                                  ;	MOV	AX,error_invalid_function ;AN000;EO.
 34963                                  ;extexit:
 34964                                  ;	jmp	SYS_RET_ERR		  ;AN000;EO.
 34965                                  
 34966                                  ;============================================================================
 34967                                  ; LOCK.ASM, MSDOS 6.0, 1991
 34968                                  ;============================================================================
 34969                                  ; 14/07/2018 - Retro DOS v3.0
 34970                                  
 34971                                  ;BREAK <$LockOper - Lock Calls>
 34972                                  
 34973                                  ;
 34974                                  ;   Assembler usage:
 34975                                  ;	    MOV     BX, Handle	       (DOS 3.3)
 34976                                  ;	    MOV     CX, OffsetHigh
 34977                                  ;	    MOV     DX, OffsetLow
 34978                                  ;	    MOV     SI, LengthHigh
 34979                                  ;	    MOV     DI, LengthLow
 34980                                  ;	    MOV     AH, LockOper
 34981                                  ;	    MOV     AL, Request
 34982                                  ;	    INT     21h
 34983                                  ;
 34984                                  ;   Error returns:
 34985                                  ;	    AX = error_invalid_handle
 34986                                  ;	       = error_invalid_function
 34987                                  ;	       = error_lock_violation
 34988                                  ;
 34989                                  ;   Assembler usage:
 34990                                  ;	    MOV     AX, 5C??	       (DOS 4.00)
 34991                                  ;
 34992                                  ;				    0? lock all
 34993                                  ;				    8? lock write
 34994                                  ;				    ?2 lock multiple
 34995                                  ;				    ?3 unlock multiple
 34996                                  ;				    ?4 lock/read
 34997                                  ;				    ?5 write/unlock
 34998                                  ;				    ?6 add (lseek EOF/lock/write/unlock)
 34999                                  ;	    MOV     BX, Handle
 35000                                  ;	    MOV     CX, count or size
 35001                                  ;	    LDS     DX, buffer
 35002                                  ;	    INT     21h
 35003                                  ;
 35004                                  ;   Error returns:
 35005                                  ;	    AX = error_invalid_handle
 35006                                  ;	       = error_invalid_function
 35007                                  ;	       = error_lock_violation
 35008                                  
 35009                                  _$LockOper:
 35010 00007292 3C01                    	CMP	AL,1
 35011 00007294 770C                    	JA	short lock_bad_func
 35012                                  
 35013 00007296 57                      	PUSH	DI			       ; Save LengthLow
 35014 00007297 E862F5                  	call	SFFromHandle		       ; ES:DI -> SFT
 35015 0000729A 7311                    	JNC	short lock_do 		       ; have valid handle
 35016 0000729C 5F                      	POP	DI			       ; Clean stack
 35017                                  	;mov	al,6
 35018 0000729D B006                    	mov	al,error_invalid_handle
 35019 0000729F E967A4                  	jmp	SYS_RET_ERR
 35020                                  
 35021                                  lock_bad_func:
 35022                                  	;mov	byte [ss:EXTERR_LOCUS],1
 35023 000072A2 36C606[D102]01          	MOV	byte [SS:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus;smr;SS Override
 35024                                  	;mov	al,1
 35025 000072A8 B001                    	mov	al,error_invalid_function
 35026 000072AA E95CA4                  	jmp	SYS_RET_ERR
 35027                                  
 35028                                  	; MSDOS 6.0 
 35029                                  ; Align_buffer call has been deleted, since it corrupts the DTA (6/5/88) P5013
 35030                                  ; Dead code deleted, MD, 23 Mar 90
 35031                                  
 35032                                  lock_do:
 35033                                  	; MSDOS 3.3
 35034 000072AD 08C0                    	or	al,al
 35035 000072AF 58                      	pop	ax
 35036 000072B0 741E                    	jz	short DOS_Lock
 35037                                  DOS_Unlock:
 35038                                   	;test	word [es:di+5],8000h
 35039 000072B2 26F745050080            	test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 35040 000072B8 7409                    	JZ	short LOCAL_UNLOCK
 35041 000072BA 50                      	push    ax
 35042 000072BB B80B11                  	mov     ax,110Bh
 35043 000072BE CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - UNLOCK REGION OF FILE
 35044                                  			; BX = file handle, CX:DX = starting offset, SI = high word of size
 35045                                  			; STACK: WORD low word of size, ES:DI -> SFT for file
 35046                                  			; SFT DPB field -> DPB of drive containing file
 35047                                  			; Return: CF set error
 35048 000072C0 5B                      	pop     bx
 35049 000072C1 EB05                    	jmp     short ValChk
 35050                                  
 35051                                  LOCAL_UNLOCK:
 35052 000072C3 36FF1E[7800]            	Call	far [ss:JShare+(7*4)]	; 7 = clr_block ;smr;SS Override
 35053                                  ValChk:
 35054 000072C8 7303                    	JNC	short Lock_OK
 35055                                  lockerror:
 35056 000072CA E93CA4                  	jmp	SYS_RET_ERR
 35057                                  Lock_OK:
 35058                                  	;MOV	AX,[SS:Temp_VAR] ;AN000;;MS. AX= number of bytes ;smr;SS Override
 35059 000072CD E92DA4                  	jmp	SYS_RET_OK
 35060                                  DOS_Lock:
 35061                                  	;test	word [es:di+5],8000h
 35062 000072D0 26F745050080            	test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 35063 000072D6 7407                    	JZ	short LOCAL_LOCK
 35064                                  	;CallInstall NET_XLock,MultNET,10
 35065 000072D8 B80A11                  	mov     ax, 110Ah
 35066 000072DB CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - LOCK REGION OF FILE
 35067                                  			; BX = file handle, CX:DX = starting offset, SI = high word of size
 35068                                  			; STACK: WORD low word of size, ES:DI -> SFT
 35069                                  			; SFT DPB field -> DPB of drive containing file, SS = DOS CS
 35070                                  			; Return: CF set error
 35071 000072DD EBE9                    	JMP	short ValChk
 35072                                  
 35073                                  LOCAL_LOCK:
 35074 000072DF 36FF1E[7400]            	Call	far [ss:JShare+(6*4)]	; 6 = Set_Block ;smr;SS Override
 35075 000072E4 EBE2                    	JMP	short ValChk
 35076                                  
 35077                                  ;lock_do:
 35078                                  ;	; MSDOS 6.0
 35079                                  ;	MOV	BX,AX				; save AX
 35080                                  ;	MOV	BP,Lock_Buffer			; get DOS LOCK buffer
 35081                                  ;	MOV	[BP+LockBuf.Lock_position],DX	; set low offset
 35082                                  ;	MOV	[BP+LockBuf.Lock_position+2],CX; set high offset
 35083                                  ;	POP	CX				; get low length
 35084                                  ;	MOV	[BP+LockBuf.Lock_length],CX	; set low length
 35085                                  ;	MOV	[BP+LockBuf.Lock_length+2],SI	; set high length
 35086                                  ;	MOV	CX,1				; one range
 35087                                  ;
 35088                                  ;;	PUSH	CS				;
 35089                                  ;;	POP	DS				; DS:DX points to
 35090                                  ;
 35091                                  ;	push	ss
 35092                                  ;	pop	ds
 35093                                  ;
 35094                                  ;	MOV	DX,BP				;   Lock_Buffer
 35095                                  ;	TEST	AL,Unlock_all			; function 1
 35096                                  ;	JNZ	short DOS_Unlock		; yes
 35097                                  ;	JMP	short DOS_Lock			; function 0
 35098                                  ;
 35099                                  ;DOS_Unlock:
 35100                                  ;	;test	word [es:di+5],8000h
 35101                                  ;	test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 35102                                  ;	JZ	short LOCAL_UNLOCK
 35103                                  ;	;CallInstall Net_Xlock,MultNET,10
 35104                                  ;	mov     ax, 110Bh
 35105                                  ;	int     2Fh	; Multiplex - NETWORK REDIRECTOR - UNLOCK REGION OF FILE
 35106                                  ;			; BX = file handle, CX:DX = starting offset, SI = high word of size
 35107                                  ;			; STACK: WORD low word of size, ES:DI -> SFT for file
 35108                                  ;			; SFT DPB field -> DPB of drive containing file
 35109                                  ;			; Return: CF set error
 35110                                  ;
 35111                                  ;	JMP	SHORT ValChk
 35112                                  ;LOCAL_UNLOCK:
 35113                                  ;	Call	far [ss:JShare+(7*4)]	; 7 = clr_block ;smr;SS Override
 35114                                  ;ValChk:
 35115                                  ;	JNC	short Lock_OK
 35116                                  ;lockerror:
 35117                                  ;	jmp	SYS_RET_ERR
 35118                                  ;Lock_OK:
 35119                                  ;	MOV	AX,[SS:Temp_VAR] ;AN000;;MS. AX= number of bytes ;smr;SS Override
 35120                                  ;	jmp	SYS_RET_OK
 35121                                  ;DOS_Lock:
 35122                                  ;	;test	word [es:di+5],8000h
 35123                                  ;	test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 35124                                  ;	JZ	short LOCAL_LOCK
 35125                                  ;	;CallInstall NET_XLock,MultNET,10
 35126                                  ;	mov     ax,110Ah
 35127                                  ;	int     2Fh	; Multiplex - NETWORK REDIRECTOR - LOCK REGION OF FILE
 35128                                  ;			; BX = file handle, CX:DX = starting offset, SI = high word of size
 35129                                  ;			; STACK: WORD low word of size, ES:DI -> SFT
 35130                                  ;			; SFT DPB field -> DPB of drive containing file, SS = DOS CS
 35131                                  ;			; Return: CF set error
 35132                                  ;	JMP	short ValChk
 35133                                  ;
 35134                                  ;LOCAL_LOCK:
 35135                                  ;	Call	far [ss:JShare+(6*4)]	; 6 = Set_Block ;smr;SS Override
 35136                                  ;	JMP	short ValChk
 35137                                  
 35138                                  ; 14/07/2018 - Retro DOS v3.0
 35139                                  ; LOC_CHECK
 35140                                  ;MSDOS6.0 (& MSDOS3.3)
 35141                                  
 35142                                  ; Inputs:
 35143                                  ;	Outputs of SETUP
 35144                                  ;	[USER_ID] Set
 35145                                  ;	[PROC_ID] Set
 35146                                  ; Function:
 35147                                  ;	Check for lock violations on local I/O
 35148                                  ;	Retries are attempted with sleeps in between
 35149                                  ; Outputs:
 35150                                  ;    Carry clear
 35151                                  ;	Operation is OK
 35152                                  ;    Carry set
 35153                                  ;	A lock violation detected
 35154                                  ; Outputs of SETUP preserved
 35155                                  
 35156                                  LOCK_CHECK:
 35157 000072E6 8B1E[1A00]              	MOV	BX,[RetryCount]	; Number retries
 35158                                  LockRetry:
 35159 000072EA 53                      	push	bx		; save regs
 35160                                  	;push	ax ; MSDOS 6.0
 35161                                  	;;MSDOS 3.3
 35162                                  	;;Call	far [JShare+(8*4)]
 35163 000072EB 36FF1E[7C00]            	Call	far [ss:JShare+(8*4)]	; 8 = chk_block
 35164                                  	;pop	ax ; MSDOS 6.0
 35165 000072F0 5B                      	pop	bx		; restrore regs
 35166 000072F1 7307                    	jnc	short lc_ret_label ; There are no locks (retnc)
 35167                                  LockN:
 35168 000072F3 E893AC                  	call	Idle		; wait a while
 35169 000072F6 4B                      	DEC	BX		; remember a retry
 35170 000072F7 75F1                    	JNZ	short LockRetry	; more retries left...
 35171 000072F9 F9                      	STC
 35172                                  lc_ret_label:
 35173 000072FA C3                      	retn
 35174                                  
 35175                                  ; 14/07/2018 - Retro DOS v3.0
 35176                                  ; LOCK_VIOLATION
 35177                                  ;MSDOS6.0 (& MSDOS3.3)
 35178                                  
 35179                                  ; Inputs:
 35180                                  ;	[THISDPB] set
 35181                                  ;	[READOP] indicates whether error on read or write
 35182                                  ; Function:
 35183                                  ;	Handle Lock violation on compatibility (FCB) mode SFTs
 35184                                  ; Outputs:
 35185                                  ;	Carry set if user says FAIL, causes error_lock_violation
 35186                                  ;	Carry clear if user wants a retry
 35187                                  ;
 35188                                  ; DS, ES, DI, CX preserved, others destroyed
 35189                                  
 35190                                  LOCK_VIOLATION:
 35191 000072FB 1E                      	PUSH	DS
 35192 000072FC 06                      	PUSH	ES
 35193 000072FD 57                      	PUSH	DI
 35194 000072FE 51                      	PUSH	CX
 35195                                  	;mov	ax,21h
 35196 000072FF B82100                  	MOV	AX,error_lock_violation
 35197                                  	;mov	byte [ALLOWED],18h
 35198 00007302 C606[F702]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 35199 00007307 C42E[2405]              	LES	BP,[THISDPB]
 35200 0000730B BF0100                  	MOV	DI,1		; Fake some registers
 35201 0000730E 89F9                    	MOV	CX,DI
 35202                                  	;mov	dx,[es:bp+11]
 35203 00007310 268B560B                	MOV	DX,[ES:BP+DPB.FIRST_SECTOR]
 35204 00007314 E831E5                  	call	HARDERR
 35205 00007317 59                      	POP	CX
 35206 00007318 5F                      	POP	DI
 35207 00007319 07                      	POP	ES
 35208 0000731A 1F                      	POP	DS
 35209 0000731B 3C01                    	CMP	AL,1
 35210 0000731D 74DB                    	jz	short lc_ret_label ; 1 = retry, carry clear
 35211 0000731F F9                      	STC
 35212 00007320 C3                      	retn
 35213                                  
 35214                                  ; 14/07/2018 - Retro DOS v3.0
 35215                                  
 35216                                  ;	do a retz to return error
 35217                                  
 35218                                  CheckShare:
 35219                                  	; MSDOS 6.0
 35220                                  	;push	ds			;smr;
 35221                                  	;;getdseg <ds>			; ds -> dosdata
 35222                                  	;push	cs
 35223                                  	;pop	ds
 35224                                  	;CMP	byte [fShare],0
 35225                                  	;pop	ds			;smr;
 35226                                  	;retn
 35227                                  	
 35228                                  	; MSDOS 3.3
 35229 00007321 2E803E[B102]00          	cmp	byte [cs:fShare],0
 35230 00007327 C3                      	retn
 35231                                  
 35232                                  ;============================================================================
 35233                                  ; SHARE.ASM, MSDOS 6.0, 1991
 35234                                  ;============================================================================
 35235                                  ; 14/07/2018 - Retro DOS v3.0
 35236                                  
 35237                                  ; SHARE_CHECK
 35238                                  
 35239                                  ; Inputs:
 35240                                  ;       [THISSFT] Points to filled in local file/device SFT for new
 35241                                  ;               instance of file sf_mode ALWAYS has mode (even on FCB SFTs)
 35242                                  ;       [WFP_START] has full path of name
 35243                                  ;       [USER_ID] Set
 35244                                  ;       [PROC_ID] Set
 35245                                  ; Function:
 35246                                  ;       Check for sharing violations on local file/device access
 35247                                  ; Outputs:
 35248                                  ;    Carry clear
 35249                                  ;       Sharing approved
 35250                                  ;    Carry set
 35251                                  ;       A sharing violation detected
 35252                                  ;           AX is error code
 35253                                  ; USES    ALL but DS
 35254                                  
 35255                                  SHARE_CHECK:
 35256                                  	;call	far [JShare+(1*4)] 	; MSDOS 3.3
 35257 00007328 36FF1E[6000]            	call	far [ss:JShare+(1*4)]	; 1 = MFT_Enter
 35258                                  shchk_retn:
 35259 0000732D C3                      	retn
 35260                                  
 35261                                  ; SHARE_VIOLATION
 35262                                  
 35263                                  ; Inputs:
 35264                                  ;       [THISDPB] Set
 35265                                  ;       AX has error code
 35266                                  ; Function:
 35267                                  ;       Handle Sharing errors
 35268                                  ; Outputs:
 35269                                  ;       Carry set if user says FAIL, causes error_sharing_violation
 35270                                  ;       Carry clear if user wants a retry
 35271                                  ;
 35272                                  ; DS, ES, DI preserved, others destroyed
 35273                                  
 35274                                  SHARE_VIOLATION:
 35275 0000732E 1E                      	PUSH    DS
 35276 0000732F 06                      	PUSH	ES
 35277 00007330 57                      	PUSH    DI
 35278 00007331 C606[1005]00            	MOV     byte [READOP],0		; All share errors are reading
 35279                                  	;mov	byte [ALLOWED],18h
 35280 00007336 C606[F702]18            	MOV     byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 35281 0000733B C42E[2405]              	LES     BP,[THISDPB]
 35282 0000733F BF0100                  	MOV     DI,1			; Fake some registers
 35283 00007342 89F9                    	MOV     CX,DI
 35284                                  	;mov	dx,[es:bp+16]
 35285 00007344 268B5610                	MOV     DX,[ES:BP+DPB.DIR_SECTOR]
 35286 00007348 E8FDE4                  	call	HARDERR
 35287 0000734B 5F                      	POP     DI
 35288 0000734C 07                      	POP	ES
 35289 0000734D 1F                      	POP     DS
 35290 0000734E 3C01                    	CMP     AL,1
 35291 00007350 74DB                    	jz	short shchk_retn	; 1 = retry, carry clear
 35292 00007352 F9                      	STC
 35293 00007353 C3                      	retn
 35294                                  
 35295                                  ;   ShareEnd - terminate sharing info on a particular SFT/UID/PID.  This does
 35296                                  ;       NOT perform a close, it merely asserts that the sharing information
 35297                                  ;       for the SFT/UID/PID may be safely released.
 35298                                  ;
 35299                                  ;   Inputs:     ES:DI points to an SFT
 35300                                  ;   Outputs:    None
 35301                                  ;   Registers modified: all except DS,ES,DI
 35302                                  
 35303                                  ShareEnd:
 35304                                  	;call	far [JShare+(2*4)]	; MSDOS 3.3
 35305 00007354 36FF1E[6400]            	call	far [ss:JShare+(2*4)]	; 2 = MFTClose
 35306 00007359 C3                      	retn
 35307                                  
 35308                                  ;Break <ShareEnter - attempt to enter a node into the sharing set>
 35309                                  
 35310                                  ;
 35311                                  ;   ShareEnter - perform a retried entry of a nodde into the sharing set.  If
 35312                                  ;   the max number of retries is exceeded, we notify the user via int 24.
 35313                                  ;
 35314                                  ;   Inputs:     ThisSFT points to the SFT
 35315                                  ;               WFP_Start points to the WFP
 35316                                  ;   Outputs:    Carry clear => successful entry
 35317                                  ;               Carry set => failed system call
 35318                                  ;   Registers modified: all
 35319                                  
 35320                                  ShareEnter:
 35321 0000735A 51                      	push	cx
 35322                                  retry:
 35323 0000735B 8B0E[1A00]              	mov     cx,[RetryCount]
 35324                                  attempt:
 35325 0000735F C43E[3605]              	les     di,[THISSFT]		; grab sft
 35326 00007363 31C0                    	XOR     AX,AX
 35327                                   	;mov	[es:di+51],ax
 35328 00007365 26894533                	MOV     [ES:DI+SF_ENTRY.sf_MFT],AX ; indicate free SFT
 35329 00007369 51                      	push	cx
 35330 0000736A E8BBFF                  	call    SHARE_CHECK             ; attempt to enter into the sharing set
 35331 0000736D 59                      	pop	cx
 35332 0000736E 730A                    	jnc	short done		; success, let the user see this
 35333 00007370 E816AC                  	call	Idle                    ; wait a while
 35334 00007373 E2EA                    	loop    attempt                 ; go back for another attempt
 35335 00007375 E8B6FF                  	call    SHARE_VIOLATION         ; signal the problem to the user
 35336 00007378 73E1                    	jnc	short retry		; user said to retry, go do it
 35337                                  done:
 35338 0000737A 59                      	pop	cx
 35339 0000737B C3                      	retn
 35340                                  
 35341                                  ;----------------------------------------------------------------------------
 35342                                  
 35343                                  ;align 2 ; 05/09/2018 (Error!)
 35344                                  
 35345 0000737C 90<rep 4h>              align 16 ; 08/09/2018 (OK.)
 35346                                  
 35347                                  ; 06/08/2018 - Retro DOS v3.0
 35348                                  
 35349                                  ;============================================================================
 35350                                  ; MSINIT.ASM
 35351                                  ;============================================================================
 35352                                  ;
 35353                                  ; MAIN ENTRY FOR DOS INITIALIZATION
 35354                                  ;
 35355                                  	; 15/07/2018 - RetroDOS v3.0
 35356                                  	; (MSDOS 3.3, IBMDOS.COM, 1987)
 35357                                  
 35358                                  SYSBUF:
 35359                                  IRETT:
 35360 00007380 CF                      	iret
 35361                                  
 35362                                  	; 07/07/2018 - Retro DOS v3.0
 35363                                  	; Retro DOS v2.0 - 03/03/2018
 35364                                  DOSINIT:
 35365                                  	; Far call from SYSINIT
 35366                                  	; DX = Memory size in paragraphs
 35367                                  	; DS:SI = [DEVICE_LIST] (SYSINIT.S) 
 35368                                  	;	  (Retro DOS v2.0, 16/03/2018)
 35369 00007381 FA                              CLI
 35370 00007382 FC                              CLD
 35371 00007383 2E8916[F202]                    MOV     [CS:ENDMEM],DX
 35372 00007388 2E8926[6804]                    MOV     [CS:INITSP],SP
 35373 0000738D 2E8C16[6A04]                    MOV     [CS:INITSS],SS
 35374 00007392 8CC8                            MOV     AX,CS
 35375 00007394 8ED0                            MOV     SS,AX
 35376 00007396 BC[8476]                        MOV     SP,INITSTACK
 35377                                  	; 08/08/2018
 35378 00007399 368C1E[4A00]            	MOV     [SS:NULDEV+2],DS
 35379 0000739E 368936[4800]                    MOV     [SS:NULDEV],SI	; DS:SI Points to CONSOLE Device
 35380                                  	; 15/07/2018
 35381                                  	; MSDOS 3.3 (IBMDOS.COM, 1987)
 35382                                  	; (Set INT 2Ah handler address to an 'IRET')
 35383 000073A3 1E                      	push    ds
 35384 000073A4 31C0                    	xor     ax,ax
 35385 000073A6 8ED8                    	mov     ds,ax
 35386 000073A8 B8[8073]                	mov     ax,IRETT
 35387 000073AB A3A800                  	mov     [2Ah*4],ax ; 00A8h
 35388 000073AE 8CC8                    	mov     ax,cs
 35389 000073B0 A3AA00                  	mov     [(2Ah*4)+2],ax ; 00AAh
 35390 000073B3 1F                      	pop     ds
 35391                                  	;
 35392 000073B4 E81C02                          CALL    CHARINIT	; initialize console driver
 35393                                  
 35394 000073B7 56                              PUSH	SI		; save pointer to header	
 35395 000073B8 0E                      	PUSH	CS
 35396 000073B9 07                              POP	ES
 35397                                          ; 07/07/2018
 35398 000073BA BF[9E00]                	MOV     DI,SFTABL+SFT.SFTable	; Point to sft 0
 35399 000073BD B80300                          MOV     AX,3
 35400 000073C0 AB                              STOSW           	; Refcount
 35401 000073C1 FEC8                            DEC     AL
 35402 000073C3 AB                              STOSW           	; Access rd/wr, compatibility
 35403 000073C4 30C0                            XOR     AL,AL
 35404 000073C6 AA                              STOSB           	; attribute
 35405                                  	;mov	al,0C3h
 35406 000073C7 B0C3                    	mov	al,devid_device_EOF|devid_device|ISCIN|ISCOUT
 35407 000073C9 AB                      	STOSw			; flags
 35408 000073CA 89F0                            mov	ax,si
 35409 000073CC AB                              stosw			; device pointer in devptr	
 35410 000073CD 8CD8                            mov	ax,ds
 35411 000073CF AB                      	stosw
 35412 000073D0 31C0                    	xor	ax,ax	; 0
 35413 000073D2 AB                      	stosw			; firclus
 35414 000073D3 AB                      	stosw			; time
 35415 000073D4 AB                      	stosw			; date
 35416 000073D5 48                      	dec	ax	; -1
 35417 000073D6 AB                      	stosw			; size
 35418 000073D7 AB                      	stosw
 35419 000073D8 40                      	inc	ax	; 0
 35420 000073D9 AB                      	stosw			; position
 35421 000073DA AB                      	stosw
 35422                                  	;add	di,7
 35423 000073DB 83C707                  	add	di,SF_ENTRY.sf_name - SF_ENTRY.sf_cluspos
 35424                                  				; point at name
 35425                                  	;add	si,10
 35426 000073DE 83C60A                  	add	si,SYSDEV.NAME	; sdevname
 35427                                  				; point to name
 35428 000073E1 B90400                  	mov	cx,4
 35429 000073E4 F3A5                    	rep	movsw		; name
 35430 000073E6 B103                    	mov	cl,3
 35431 000073E8 B020                    	mov	al," "
 35432 000073EA F3AA                    	rep	stosb		; extension
 35433 000073EC 5E                      	POP	SI		; get back pointer to header
 35434                                  
 35435                                  				; mark device as CON I/O
 35436                                  	; 15/07/2018
 35437                                          ;OR	BYTE [SI+4],ISCIN|ISCOUT ; or byte [si+4],3
 35438 000073ED 804C0403                	OR	BYTE [SI+SYSDEV.ATT],ISCIN|ISCOUT
 35439                                  	; 12/03/2018
 35440 000073F1 368936[3200]            	MOV     [SS:BCON],SI
 35441 000073F6 368C1E[3400]                    MOV     [SS:BCON+2],DS
 35442                                  
 35443                                  CHAR_INIT_LOOP:
 35444 000073FB C534                            LDS     SI,[SI]				; AUX device
 35445 000073FD E8D301                          CALL    CHARINIT
 35446                                         	;15/07/2018
 35447                                  	;test	byte [SI+4],8
 35448 00007400 F6440408                	TEST    BYTE [SI+SYSDEV.ATT],ISCLOCK
 35449 00007404 74F5                            JZ      SHORT CHAR_INIT_LOOP
 35450                                  	; 12/03/2018
 35451 00007406 368936[2E00]                    MOV     [SS:BCLOCK],SI
 35452 0000740B 368C1E[3000]                    MOV     [SS:BCLOCK+2],DS
 35453 00007410 BD[8676]                        MOV     BP,MEMSTRT			; ES:BP points to DPB
 35454                                  PERDRV:
 35455                                  	;lds	si,[SI+SYSDEV.NEXT] ; 15/07/2018
 35456 00007413 C534                            LDS     SI,[SI]				; Next device
 35457 00007415 83FEFF                          CMP     SI,-1
 35458 00007418 7468                    	JZ      SHORT CONTINIT
 35459                                  
 35460 0000741A E8B601                          CALL    CHARINIT
 35461                                  
 35462                                  	; Retro DOS v2.0 - 16/03/2018 (NOTE for 'CHARINIT' return):
 35463                                  	; [CALLUNIT] = Number of drives for (Disk) Block Dev Driver ([DRVMAX])
 35464                                  	;           (..When the command is 'DSK$INIT', as in 'CHARINIT')
 35465                                  	; [CALLBPB] = [DEVCALL.COUNT] = Address of the BPB (DEVCALL offset 18) 
 35466                                  	; (REF: MSDOS 3.3 MSBIO2.ASM, MSDATA.INC, MSDISK.ASM, MSBIO1.ASM)
 35467                                  	; (.. !DSK$IN' in MSBIO1.ASM)
 35468                                  	; DEVCALL.MEDIA = CALLUNIT (DEVCALL offset 13)
 35469                                  
 35470                                          ; 15/07/2018
 35471                                  	;test	word [SI+4],8000h		; DEVTYP
 35472 0000741D F744040080                      TEST    word [SI+SYSDEV.ATT],DEVTYP
 35473 00007422 75EF                    	JNZ     SHORT PERDRV			; Skip any other character devs
 35474                                  
 35475 00007424 368A0E[1303]                    MOV	CL,[SS:CALLUNIT] ; 12/03/2018
 35476 00007429 30ED                    	XOR     CH,CH
 35477                                          ; 07/07/2018
 35478                                  	;MOV	[SI+10],CL		; Number of units in name field
 35479 0000742B 884C0A                  	mov	[si+SYSDEV.NAME],cl	; sdevname        
 35480 0000742E 368A16[4600]            	MOV     DL,[SS:NUMIO]	; 15/03/2018
 35481 00007433 30F6                    	XOR     DH,DH
 35482 00007435 36000E[4600]            	ADD	[SS:NUMIO],CL	; 12/03/2018
 35483 0000743A 1E                      	PUSH    DS
 35484 0000743B 56                              PUSH    SI
 35485 0000743C 36C51E[1803]            	LDS	BX,[SS:CALLBPB]	; 12/03/2018
 35486                                  PERUNIT:
 35487 00007441 8B37                            MOV     SI,[BX]                 ; DS:SI Points to BPB
 35488 00007443 43                              INC     BX
 35489 00007444 43                              INC     BX                      ; On to next BPB
 35490                                  	;07/07/2018
 35491                                          ;mov	[ES:BP+DPB.DRIVE],dl
 35492 00007445 26885600                	MOV     [ES:BP],DL
 35493                                  	;MOV	[ES:BP+1],DH
 35494 00007449 26887601                	MOV	[ES:BP+DPB.UNIT],DH
 35495 0000744D 53                              PUSH    BX
 35496 0000744E 51                              PUSH    CX
 35497 0000744F 52                              PUSH    DX
 35498                                  
 35499                                          ;invoke	$SETDPB
 35500 00007450 E839A9                          CALL	_$SETDPB
 35501                                  
 35502                                  	; 07/07/2018
 35503                                  	;MOV	AX,[ES:BP+2]
 35504 00007453 268B4602                	mov	ax,[ES:BP+DPB.SECTOR_SIZE]
 35505                                          ; 12/03/2018
 35506 00007457 363B06[3600]            	CMP	AX,[SS:MAXSEC]
 35507 0000745C 7604                    	JBE     SHORT NOTMAX
 35508 0000745E 36A3[3600]              	MOV	[SS:MAXSEC],AX
 35509                                  NOTMAX:
 35510 00007462 5A                              POP     DX
 35511 00007463 59                              POP     CX
 35512 00007464 5B                              POP     BX
 35513 00007465 8CD8                            MOV     AX,DS                   ; save segment of bpb array
 35514 00007467 5E                              POP     SI
 35515 00007468 1F                              POP     DS
 35516                                  					; ds:si -> device header
 35517                                  					; store it in the corresponding dpb
 35518                                  	; 07/07/2018
 35519                                          ;MOV	[ES:BP+18],SI
 35520 00007469 26897612                	mov	[ES:BP+DPB.DRIVER_ADDR],si
 35521                                          ;MOV	[ES:BP+20],DS
 35522 0000746D 268C5E14                	mov	[ES:BP+DPB.DRIVER_ADDR+2],ds
 35523                                  
 35524 00007471 1E                              PUSH    DS			; save pointer to device header
 35525 00007472 56                              PUSH    SI
 35526 00007473 FEC6                            INC     DH			; inc unit #
 35527 00007475 FEC2                            INC     DL			; inc drive #
 35528 00007477 8ED8                            MOV     DS,AX			; restore segment of BPB array
 35529                                          ;add	bp,32 ;15/07/2018
 35530 00007479 83C520                  	ADD     BP,DPBSIZ		; advance pointer to next dpb
 35531 0000747C E2C3                    	LOOP    PERUNIT			; process all units in each driver
 35532                                          
 35533 0000747E 5E                      	POP     SI			; restore pointer to device header
 35534 0000747F 1F                              POP     DS
 35535 00007480 EB91                    	JMP	SHORT PERDRV		; process all drivers in chain
 35536                                  
 35537                                  CONTINIT:
 35538 00007482 0E                              PUSH    CS
 35539 00007483 1F                              POP     DS
 35540                                  ; Calculate true address of buffers, FATs, free space
 35541 00007484 89EF                            MOV     DI,BP           ; First byte after current DPBs
 35542 00007486 8B2E[3600]                      MOV     BP,[MAXSEC]
 35543 0000748A B8[8073]                        MOV     AX,SYSBUF	; = IRETT (15/07/2018)
 35544                                          ; 07/07/2018
 35545                                  	;MOV	[BUFFSTRT],AX
 35546 0000748D 01E8                            ADD     AX,BP           ; One I/O buffer
 35547 0000748F 83C010                          ADD     AX,BUFINSIZ ; = 16
 35548 00007492 A3[2600]                        MOV     [DPBHEAD],AX	; True start of DPBs
 35549 00007495 89C2                            MOV     DX,AX
 35550 00007497 81EA[8073]                      SUB     DX,SYSBUF	; = IRETT (15/07/2018)
 35551 0000749B 89D5                            MOV     BP,DX
 35552 0000749D 01FD                            ADD     BP,DI           ; Allocate buffer space
 35553                                  	;sub	bp,918 ; = ADJFAC for current DOSINIT (07/07/2018)
 35554 0000749F 81ED0603                        SUB     BP,ADJFAC       ; True address of free memory
 35555 000074A3 55                              PUSH    BP ; ###		
 35556 000074A4 BF[8676]                        MOV     DI,MEMSTRT	; Current start of DPBs
 35557                                  	;add	di,24
 35558 000074A7 83C718                          ADD     DI,DPB.NEXT_DPB	; Point at dpb.next_dpb field
 35559 000074AA 8A0E[4600]                      MOV     CL,[NUMIO]
 35560 000074AE 30ED                            XOR     CH,CH
 35561                                  TRUEDPBAD:
 35562                                  	;add	ax,32
 35563 000074B0 83C020                          ADD     AX,DPBSIZ       ; Compute address of next DPB
 35564 000074B3 AB                              STOSW                   ; Set the link to next DPB
 35565 000074B4 83C71E                          ADD     DI,DPBSIZ-2     ; Point at next address
 35566 000074B7 E2F7                            LOOP    TRUEDPBAD
 35567 000074B9 83EF20                          SUB     DI,DPBSIZ       ; Point at last dpb.next_dpb field
 35568 000074BC B8FFFF                          MOV     AX,-1
 35569 000074BF AB                              STOSW                   ; End of list
 35570 000074C0 83C50F                          ADD     BP,15           ; True start of free space (round up to segment)
 35571                                  	; 15/07/2018
 35572                                  	;MOV	CL,4
 35573                                          ;SHR	BP,CL           ; Number of segments for DOS resources
 35574 000074C3 D1DD                            rcr	bp,1
 35575 000074C5 B103                    	mov	cl,3
 35576 000074C7 D3ED                    	shr	bp,cl
 35577                                  	;
 35578 000074C9 8CCA                    	MOV     DX,CS
 35579 000074CB 01EA                            ADD     DX,BP           ; First free segment
 35580                                  	
 35581                                  	; 06/07/2019
 35582                                  	;MOV	BX,15 ; 0Fh
 35583                                  	;MOV	CX,[ENDMEM]
 35584                                  
 35585 000074CD 8CCD                            MOV     BP,CS
 35586                                  
 35587                                  ; BP has segment of DOS (whether to load high or run in place)
 35588                                  ; DX has program segment (whether after DOS or overlaying DOS)
 35589                                  ; CX has size of memory in paragraphs (reduced by DOS size if HIGHMEM)
 35590                                          
 35591                                  	;MOV	[ENDMEM],CX ; 06/07/2019
 35592                                          
 35593 000074CF 8EC5                    	MOV     ES,BP
 35594 000074D1 268C06[4A03]                    MOV     [ES:DSKCHRET+3],ES ; mov [ES:DOSEG_INIT],es
 35595 000074D6 31C0                            XOR     AX,AX
 35596 000074D8 8ED8                            MOV     DS,AX
 35597 000074DA 8EC0                            MOV     ES,AX
 35598                                  	;mov	di,82h 
 35599 000074DC BF8200                          MOV     DI,INTBASE+2
 35600                                  	; 15/07/2018
 35601 000074DF 89E8                            MOV     AX,BP
 35602                                  	; Set INT 0 (divide by zero) handler
 35603 000074E1 C7060000[E157]          	mov     word [0],DIVOV
 35604 000074E7 A30200                  	mov     word [2],ax  ; = cs
 35605                                  	; Set INT 20h to INT 28h handler segments 
 35606                                  	;mov	cx,17
 35607 000074EA B111                    	mov	cl,17 ; 06/07/2019
 35608 000074EC F3AB                    	rep	stosw
 35609                                  	; DI points to INT 29h vector, offset
 35610 000074EE 83C706                  	add	di,6 
 35611                                  	; DI points to INT 2Ah vector, segment
 35612                                  	;Set  INT 2Ah to INT 3Fh handler segments		
 35613                                  	;mov	cx,43
 35614 000074F1 B12B                    	mov	cl,43 ; 06/07/2019
 35615                                  	
 35616 000074F3 F3AB                    	rep	stosw
 35617                                  	; DI points to INT 40h vector, segment
 35618 000074F5 BF8000                  	mov	di,80h
 35619                                  	; Set INT 20h to INT 28h vectors to their default handler offsets
 35620 000074F8 B8[9114]                	mov	ax,_IRET
 35621                                  	;mov	cx,9
 35622 000074FB B109                    	mov	cl,9 ; 06/07/2019
 35623                                  iset1:
 35624 000074FD AB                      	stosw
 35625 000074FE 83C702                  	add	di,2
 35626 00007501 E2FA                    	loop	iset1
 35627 00007503 83C704                  	add	di,4
 35628                                  	; Set INT 2Ah to INT 3Fh vectors to their default handler offsets
 35629                                  	;mov	cx,22
 35630 00007506 B116                    	mov	cl,22 ; 06/07/2019
 35631                                  iset2:
 35632 00007508 AB                      	stosw
 35633 00007509 83C702                  	add	di,2
 35634 0000750C E2FA                    	loop	iset2
 35635                                  	
 35636 0000750E 89E8                    	mov	ax,bp
 35637                                  	; Set	INT 2Fh handler offset to INT2F
 35638 00007510 C706BC00[C117]          	mov	word [2Fh*4],INT2F  ; 00BCh
 35639                                  
 35640                                  	; set up entry point call at vectors 30-31h
 35641                                  
 35642 00007516 C606C000EA                      MOV     BYTE [ENTRYPOINT],mi_Long_JMP
 35643 0000751B C706C100[9214]                  MOV     WORD [ENTRYPOINT+1],CALL_ENTRY
 35644 00007521 A3C300                          MOV    [ENTRYPOINT+3],AX
 35645                                  
 35646                                  	; Set	INT 20h, 21h, 22h, 23h handler offsets
 35647 00007524 C7068000[8B14]                  MOV     WORD [addr_int_abort],QUIT
 35648 0000752A C7068400[AA14]                  MOV     WORD [addr_int_command],COMMAND
 35649 00007530 C70688000001                    MOV     WORD [addr_int_terminate],100H
 35650 00007536 89168A00                        MOV     [addr_int_terminate+2],DX
 35651                                  	; 15/07/2018 - Retro DOS v3.0
 35652 0000753A C7069400[7316]                  MOV     WORD [addr_int_disk_read],ABSDRD   ; INT 25h
 35653 00007540 C7069800[B616]                  MOV     WORD [addr_int_disk_write],ABSDWRT ; INT 26h
 35654 00007546 C7069C00[9664]                  MOV     WORD [addr_int_keep_process],STAY_RESIDENT ; INT 27h
 35655                                  
 35656                                  	; 15/07/2018
 35657                                  	; MSDOS 3.3 (IBMDOS.COM, 1987)
 35658 0000754C 0E                      	push	cs
 35659 0000754D 1F                      	pop	ds
 35660 0000754E 0E                      	push	cs
 35661 0000754F 07                      	pop	es
 35662                                  	; initialize the jump table for the sharer..
 35663                                  	;	(MSDOS 6.0, MSINIT.ASM, 1991, "patch_misc_segments")
 35664                                  	; MSDOS 3.3
 35665                                  	; (set JSharer jump table segments)
 35666 00007550 BF[5C00]                	mov	di,JShare
 35667 00007553 8CC8                    	mov	ax,cs
 35668 00007555 B90F00                  	mov	cx,15
 35669                                  iset3:
 35670 00007558 83C702                  	add	di,2
 35671 0000755B AB                      	stosw
 35672 0000755C E2FA                    	loop	iset3
 35673                                  
 35674                                  	; MSDOS 2.11, MSDOS 3.3
 35675 0000755E B8[5803]                        MOV     AX,INITBLOCK
 35676 00007561 83C00F                          ADD	AX,0Fh		; round to a paragraph
 35677 00007564 B104                            MOV     CL,4
 35678 00007566 D3E8                            SHR     AX,CL
 35679 00007568 8CDF                            MOV     DI,DS
 35680 0000756A 01C7                            ADD     DI,AX
 35681 0000756C 47                              INC     DI
 35682 0000756D 893E[DE02]                      MOV     [CurrentPDB],DI
 35683 00007571 55                              PUSH    BP ; ##
 35684 00007572 52                              PUSH    DX ; #		; Save COMMAND address
 35685 00007573 A1[F202]                        MOV     AX,[ENDMEM]
 35686 00007576 89FA                            MOV     DX,DI
 35687                                  
 35688                                          ;invoke	SETMEM          ; Basic Header
 35689 00007578 E844A9                  	CALL	SETMEM
 35690 0000757B 0E                              PUSH	CS
 35691 0000757C 1F                              POP	DS
 35692                                  	;mov	di,24
 35693 0000757D BF1800                          MOV     DI,PDB.JFN_TABLE
 35694 00007580 31C0                            XOR     AX,AX
 35695 00007582 AB                              STOSW
 35696 00007583 AA                              STOSB                   ; 0,1 and 2 are CON device
 35697 00007584 B0FF                            MOV     AL,0FFH
 35698                                  	;mov	cx,17
 35699                                  	;MOV     CX,FILPERPROC - 3 ; 17
 35700 00007586 B111                    	mov	cl,FILPERPROC-3 ; 06/07/2019
 35701 00007588 F3AA                            REP     STOSB           ; Rest are unused
 35702 0000758A 0E                              PUSH	CS
 35703 0000758B 07                              POP	ES
 35704 0000758C 8C1E[2C00]                      MOV     [SFT_ADDR+2],DS	; Must be set to print messages
 35705                                  
 35706                                  	; 15/07/2018 - Retro DOS v3.0
 35707                                  	; MSDOS 3.3
 35708                                  	; (set country cdpg table segments)
 35709 00007590 BE[FD0F]                	mov	si,COUNTRY_CDPG ; country_tab
 35710                                  	;mov	[es:si+79],es	; Ucase table segment
 35711                                  	;mov	[es:si+84],es	; File ucase table segment
 35712                                  	;mov	[es:si+89],es	; File char list segment
 35713                                  	;mov	[es:si+94],es	; Collate table segment
 35714                                  	;mov	[es:si+123],es	; Monocase routine segment
 35715 00007593 8C444F                  	mov	[si+79],es
 35716 00007596 8C4454                  	mov	[si+84],es
 35717 00007599 8C4459                  	mov	[Si+89],es
 35718 0000759C 8C445E                  	mov	[si+94],es
 35719 0000759F 8C447B                  	mov	[si+123],es
 35720                                  	; (set SysInitTable -sysinitvars and country_cdpg- segments)
 35721 000075A2 BE[3B0F]                	mov     si,SysInitTable
 35722                                  	;;mov	[es:si+6], es
 35723                                  	;;mov	[es:si+2], es
 35724                                  	;mov	[es:si+SYSI_EXT.Country_Tab+2],es
 35725                                  	;mov	[es:si+SYSI_EXT.SysInitVars+2],es
 35726 000075A5 8C4406                  	mov	[si+SYSI_EXT.Country_Tab+2],es
 35727 000075A8 8C4402                  	mov	[si+SYSI_EXT.SysInitVars+2],es
 35728                                  
 35729                                  	; (set FastOpen table FastRet segment)
 35730 000075AB BE[430F]                	mov     si,FastTable
 35731                                  	;mov	[es:si+4],es
 35732                                  	;;mov	[es:si+8],es
 35733 000075AE 8C4404                  	mov     [si+4],es
 35734                                  	;mov	[si+8],es
 35735                                  	; IBMDOS.COM (Offset 7259h), IBM PC DOS 3.30
 35736 000075B1 C706[8F0F]7258          	mov	word [FETCHI_TAG],5872h ; ? ('Xr')
 35737                                  
 35738                                  	; 10/08/2018 - Retro DOS v3.0
 35739                                  
 35740                                  	; MSDOS 2.11 (Retro DOS v2.0), MSDOS 3.3
 35741                                  
 35742                                  ; After this points the char device functions for CON will work for
 35743                                  ; printing messages
 35744                                  
 35745                                  	;;IF	NOT IBM
 35746                                  	;;IF	NOT ALTVECT
 35747                                  	;MOV	SI,HEADER
 35748                                  	;;invoke OUTMES
 35749                                  	;CALL	OUTMES
 35750                                  	;;PUSH	CS		; Outmes stomps on segments
 35751                                  	;;POP	DS
 35752                                  	;;PUSH	CS
 35753                                  	;;POP	ES
 35754                                  	;;ENDIF
 35755                                  	;;ENDIF
 35756                                  
 35757                                  ; Move the FATs into position
 35758 000075B7 5A                              POP     DX ; #			; Restore COMMAND address
 35759 000075B8 5D                              POP     BP ; ##
 35760 000075B9 59                              POP     CX ; ###		; True address of free memory
 35761 000075BA BE[8676]                        MOV     SI,MEMSTRT		; Place to move DPBs from
 35762 000075BD 8B3E[2600]                      MOV     DI,[DPBHEAD]		; Place to move DPBs to
 35763 000075C1 29F9                            SUB     CX,DI                   ; Total length of DPBs
 35764 000075C3 39F7                            CMP     DI,SI
 35765 000075C5 7607                            JBE     SHORT MOVJMP		; Are we moving to higher or 
 35766                                  					; lower memory?
 35767 000075C7 49                              DEC     CX                      ; Move backwards to higher memory
 35768 000075C8 01CF                            ADD     DI,CX
 35769 000075CA 01CE                            ADD     SI,CX
 35770 000075CC 41                              INC     CX
 35771 000075CD FD                              STD
 35772                                  MOVJMP:
 35773 000075CE 8EC5                            MOV     ES,BP
 35774 000075D0 E9998E                          JMP     MOVDPB
 35775                                  
 35776                                  CHARINIT:
 35777                                  	; 07/07/2018 - Retro DOS v3.0
 35778 000075D3 36C606[0603]1A                  MOV	BYTE [SS:DEVCALL_REQLEN],DINITHL
 35779 000075D9 36C606[0703]00                  MOV	BYTE [SS:DEVCALL_REQUNIT],0
 35780 000075DF 36C606[0803]00                  MOV	BYTE [SS:DEVCALL_REQFUNC],DEVINIT
 35781 000075E5 36C706[0903]0000                MOV	WORD [SS:DEVCALL_REQSTAT],0
 35782 000075EC 06                              PUSH	ES
 35783 000075ED 53                              PUSH	BX
 35784 000075EE 50                              PUSH	AX
 35785 000075EF BB[0603]                        MOV	BX,DEVCALL
 35786 000075F2 0E                              PUSH	CS
 35787 000075F3 07                              POP	ES
 35788 000075F4 E803D9                          CALL	DEVIOCALL2	
 35789 000075F7 58                      	POP	AX
 35790 000075F8 5B                              POP	BX
 35791 000075F9 07                              POP	ES
 35792 000075FA C3                              RETN
 35793                                  
 35794 000075FB 90                      align 2
 35795                                          ;;DB	80H DUP(?)
 35796                                  	;TIMES 	64 dw 0 ; 05/09/2018
 35797                                  	; 10/08/2018
 35798                                  	;times	128 dw 0
 35799                                  	; 12/08/2018
 35800                                  	;times	132 dW 0 ; ADJFAC = 918 ; 08/09/2018 (OK.)
 35801                                  	; 08/09/2018 
 35802 000075FC 00<rep 88h>             	times	136 db 0 ; ADJFAC = 790	; 08/09/2018 (OK.) 
 35803                                  
 35804                                  INITSTACK:	; INITSTACK LABEL BYTE
 35805 00007684 0000                    	DW	0 ; DW ?
 35806                                  
 35807                                  ;MEMSTRT LABEL	WORD
 35808                                  MEMSTRT EQU	$
 35809                                  
 35810                                  ADJFAC  EQU     MEMSTRT-SYSBUF
 35811                                  
 35812 00007686 00                      	db 0
 35813 00007687 00                      	db 0
 35814 00007688 00                      	db 0
 35815 00007689 00                      	db 0
 35816 0000768A 00                      	db 0
 35817 0000768B 00                      	db 0
 35818 0000768C 00                      	db 0
 35819 0000768D 00                      	db 0
 35820 0000768E 00                      	db 0
 35821 0000768F 00                      	db 0
 35822                                  PcDosVersion:
 35823 00007690 1A4040402323232050-     	db 1Ah,'@@@### PC-DOS Version 3.30',0Dh,0Ah
 35823 00007699 432D444F5320566572-
 35823 000076A2 73696F6E20332E3330-
 35823 000076AB 0D0A               
 35824 000076AD 1A00                    	db 1Ah,0
 35825                                  
 35826                                          ;do_ext
 35827                                  ;LAST	ENDS
