     1                                  ; ****************************************************************************
     2                                  ; MSDOS3.BIN (MSDOS 3.3 Kernel) - RETRO DOS v3.0 by ERDOGAN TAN
     3                                  ; ----------------------------------------------------------------------------
     4                                  ; Last Update: 22/01/2024 (BugFix)
     5                                  ;	BugFix: 16/01/2024
     6                                  ;	BugFix: 22/11/2022
     7                                  ;	BugFix: 20/05/2019
     8                                  ;	Optimization: 06-22/07/2019
     9                                  ;	Completion: 10/09/2018
    10                                  ; ----------------------------------------------------------------------------
    11                                  ; Beginning: 24/02/2018 (Retro DOS 2.0), 07/07/2018 (Retro DOS 3.0)
    12                                  ; ----------------------------------------------------------------------------
    13                                  ; Assembler: NASM version 2.11 (2.15)
    14                                  ; ----------------------------------------------------------------------------
    15                                  ;	    ((nasm msdos3.s -l msdos3.lst -o MSDOS3.BIN)) 	
    16                                  ; ----------------------------------------------------------------------------
    17                                  ; Derived from 'msdos2.s' file of Retro DOS 2.0 source code (04/05/2018)
    18                                  ; ----------------------------------------------------------------------------
    19                                  ; Derived from 'MSCODE.ASM' file of MSDOS 2.0 (IBM PCDOS v2.0) source code
    20                                  ; by Microsoft, 25/08/1983 (DOSLINK - 'MSDOS.ASM')
    21                                  ; ****************************************************************************
    22                                  ; main file: 'retrodos3.s'
    23                                  ; incbin 'MSDOS3.BIN' ; (DOSGROUP CODE SEGMENT)
    24                                  ; ----------------------------------------------------------------------------
    25                                  ; 07/07/2018 - Erdogan Tan
    26                                  ; (Note: I have not got MSDOS 3.3 kernel source files; so, I need to continue
    27                                  ; by using disassembled MSDOS.SYS -v3.3- and MSDOS 6.0 kernel source files.)
    28                                  ; ----------------------------------------------------------------------------
    29                                  ; MSDOS 6.0 Kernel source files:
    30                                  ;	MSDATA.ASM, 
    31                                  ; 		(MSHEAD.ASM, MSCONST.ASM,CONST2.ASM, MS_DATA.ASM,
    32                                  ;		DOSTAB.ASM, LMSTUB.ASM, WPATCH.INC)
    33                                  ;	MSTABLE.ASM, MSCODE.ASM, MSDOSME.ASM (DOSMES.INC), TIME.ASM,
    34                                  ;	GETSET.ASM, PARSE.ASM, MISC.ASM, MISC2.ASM, CRIT.ASM, CPMIO.ASM,
    35                                  ;	CPMIO2.ASM, FCBIO.ASM, FCBIO2.ASM, SEARCH.ASM, PATH.ASM, IOCTL.ASM,
    36                                  ;	DELETE.ASM, RENAME.ASM, FINFO.ASM, DUP.ASM, CREATE.ASM, OPEN.ASM,
    37                                  ;	DINFO.ASM, ISEARCH.ASM, BUF.ASM, ABORT.ASM,CLOSE.ASM, DIRCALL.ASM,
    38                                  ;	DISK.ASM, DISK2.ASM, DISK3.ASM, DIR.ASM, DIR2.ASM, DEV.ASM,
    39                                  ;	MKNODE.ASM, ROM.ASM, FCB.ASM, MSCTRLC.ASM, FAT.ASM, MSPROC.ASM
    40                                  ;	ALLOC.ASM, SRVCALL.ASM, UTIL.ASM, MACRO.ASM, MACRO2.ASM, HANDLE.ASM
    41                                  ;	FILE.ASM, LOCK.ASM, ROMFIND.ASM, SHARE.ASM, MSINIT.ASM, ORIGIN.ASM
    42                                  ;
    43                                  ; MSDOS 2.0 Kernel source files:
    44                                  ; 	MSDOS.ASM (STDSW.ASM + MSHEAD.ASM + MSDATA.ASM)
    45                                  ;	MSCODE.ASM
    46                                  ;	DOSMES.ASM ... STDIO.ASM, TIME.ASM, XENIX.ASM, XENIX2.ASM
    47                                  
    48                                  ;============================================================================
    49                                  ; DOSLINK
    50                                  ;============================================================================
    51                                  ;msdos mscode dosmes misc getset dircall alloc dev dir +
    52                                  ;disk fat rom stdbuf stdcall stdctrlc stdfcb stdproc +
    53                                  ;stdio time xenix xenix2
    54                                  
    55                                  ;============================================================================
    56                                  ; This MSDOS source code is verified & modified by using IDA Pro Disassembler
    57                                  ; output in TASM syntax (July 2018 -> NASM syntax) [ IBMDOS.COM, 17/03/1987 ]
    58                                  ;============================================================================
    59                                  ;
    60                                  ; ###########################################################################
    61                                  ; #	This file is generated by The Interactive Disassembler (IDA)	    #
    62                                  ; #	Copyright (c) 2010 by Hex-Rays SA, <support@hex-rays.com>	    #
    63                                  ; #			 Licensed to: Freeware version			    #
    64                                  ; ###########################################################################
    65                                  ;
    66                                  ; Input	MD5   :	EF2ADCA1CB3882118FD247DD4C672C81
    67                                  
    68                                  ; ---------------------------------------------------------------------------
    69                                  ; File Name   :	D:\Documents and Settings\Erdoðan Tan\Desktop\MSDOS33.BIN
    70                                  ; Format      :	Binary file
    71                                  ; Base Address:	0000h Range: 0000h - 75CFh Loaded length: 75CFh
    72                                  ;============================================================================
    73                                  ; MSDOS33.BIN = IBMDOS.COM, 17/03/1987, 30159 bytes (IBM PC DOS 3.30 kernel)
    74                                  
    75                                  ;============================================================================
    76                                  ; MSDOS.ASM
    77                                  ;============================================================================
    78                                  
    79                                  ;TITLE   Standard MSDOS
    80                                  ;NAME    MSDOS_2
    81                                  
    82                                  ; Number of disk I/O buffers
    83                                  
    84                                  ;	INCLUDE STDSW.ASM
    85                                  ;       INCLUDE MSHEAD.ASM
    86                                  ;       INCLUDE MSDATA.ASM
    87                                  
    88                                  ;	END
    89                                  
    90                                  ;============================================================================
    91                                  ; STDSW.ASM
    92                                  ;============================================================================
    93                                  
    94                                  TRUE    EQU     0FFFFH
    95                                  FALSE   EQU     ~TRUE ; NOT TRUE
    96                                  
    97                                  ; Use the switches below to produce the standard Microsoft version or the IBM
    98                                  ; version of the operating system
    99                                  ;MSVER   EQU     false
   100                                  ;IBM     EQU     true
   101                                  ;WANG    EQU     FALSE
   102                                  ;ALTVECT EQU     FALSE
   103                                  
   104                                  ; Set this switch to cause DOS to move itself to the end of memory
   105                                  ;HIGHMEM EQU     FALSE
   106                                  
   107                                  ;	IF      IBM
   108                                  ESCCH   EQU     0			; character to begin escape seq.
   109                                  CANCEL  EQU     27			;Cancel with escape
   110                                  TOGLINS EQU     TRUE			;One key toggles insert mode
   111                                  TOGLPRN EQU     TRUE			;One key toggles printer echo
   112                                  ZEROEXT EQU     TRUE
   113                                  ;       ELSE
   114                                  ;       IF      WANG			;Are we assembling for WANG?
   115                                  ;ESCCH   EQU     1FH			;Yes. Use 1FH for escape character
   116                                  ;       ELSE
   117                                  ;ESCCH   EQU     1BH
   118                                  ;       ENDIF
   119                                  ;CANCEL  EQU     "X"-"@"		;Cancel with Ctrl-X
   120                                  ;TOGLINS EQU     WANG			;Separate keys for insert mode on
   121                                  					;and off if not WANG
   122                                  ;TOGLPRN EQU     FALSE			;Separate keys for printer echo on
   123                                  					;and off
   124                                  ;ZEROEXT EQU     TRUE
   125                                  ;        ENDIF
   126                                  
   127                                  ;============================================================================
   128                                  ; MSHEAD.ASM
   129                                  ;============================================================================
   130                                  
   131                                  ;--------------------------------------------------------------
   132                                  ; TITLE   MSHEAD.ASM -- MS-DOS DEFINITIONS
   133                                  ;--------------------------------------------------------------
   134                                  
   135                                  ; MS-DOS High-performance operating system for the 8086  version 1.28
   136                                  ;        by Microsoft MSDOS development group:
   137                                  ;           Tim Paterson (Ret.)
   138                                  ;           Aaron Reynolds
   139                                  ;           Nancy Panners (Parenting)
   140                                  ;           Mark Zbikowski
   141                                  ;           Chris Peters (BIOS) (ret.)
   142                                  
   143                                  ; ****************** Revision History *************************
   144                                  ;          >> EVERY change must noted below!! <<
   145                                  ;
   146                                  ; 0.34 12/29/80 General release, updating all past customers
   147                                  ; 0.42 02/25/81 32-byte directory entries added
   148                                  ; 0.56 03/23/81 Variable record and sector sizes
   149                                  ; 0.60 03/27/81 Ctrl-C exit changes, including register save on user stack
   150                                  ; 0.74 04/15/81 Recognize I/O devices with file names
   151                                  ; 0.75 04/17/81 Improve and correct buffer handling
   152                                  ; 0.76 04/23/81 Correct directory size when not 2^N entries
   153                                  ; 0.80 04/27/81 Add console input without echo, Functions 7 & 8
   154                                  ; 1.00 04/28/81 Renumber for general release
   155                                  ; 1.01 05/12/81 Fix bug in `STORE'
   156                                  ; 1.10 07/21/81 Fatal error trapping, NUL device, hidden files, date & time,
   157                                  ;               RENAME fix, general cleanup
   158                                  ; 1.11 09/03/81 Don't set CURRENT BLOCK to 0 on open; fix SET FILE SIZE
   159                                  ; 1.12 10/09/81 Zero high half of CURRENT BLOCK after all (CP/M programs don't)
   160                                  ; 1.13 10/29/81 Fix classic "no write-through" error in buffer handling
   161                                  ; 1.20 12/31/81 Add time to FCB; separate FAT from DPT; Kill SMALLDIR; Add
   162                                  ;               FLUSH and MAPDEV calls; allow disk mapping in DSKCHG; Lots
   163                                  ;               of smaller improvements
   164                                  ; 1.21 01/06/82 HIGHMEM switch to run DOS in high memory
   165                                  ; 1.22 01/12/82 Add VERIFY system call to enable/disable verify after write
   166                                  ; 1.23 02/11/82 Add defaulting to parser; use variable escape character Don't
   167                                  ;               zero extent field in IBM version (back to 1.01!)
   168                                  ; 1.24 03/01/82 Restore fcn. 27 to 1.0 level; add fcn. 28
   169                                  ; 1.25 03/03/82 Put marker (00) at end of directory to speed searches
   170                                  ; 1.26 03/03/82 Directory buffers searched as a circular queue, current buffer
   171                                  ;               is searched first when possible to minimize I/O
   172                                  ;      03/03/82 STORE routine optimized to tack on partial sector tail as
   173                                  ;               full sector write when file is growing
   174                                  ;      03/09/82 Multiple I/O buffers
   175                                  ;      03/29/82 Two bugs:  Delete all case resets search to start at beginning
   176                                  ;               of directory (infinite loop possible otherwise), DSKRESET
   177                                  ;               must invalidate all buffers (disk and directory).
   178                                  ; 1.27 03/31/82 Installable device drivers
   179                                  ;                 Function call 47 - Get pointer to device table list
   180                                  ;                 Function call 48 - Assign CON AUX LIST
   181                                  ;      04/01/82 Spooler interrupt (INT 28) added.
   182                                  ; 1.28 04/15/82 DOS retructured to use ASSUMEs and PROC labels around system
   183                                  ;               call entries.  Most CS relative references changed to SS
   184                                  ;               relative with an eye toward putting a portion of the DOS in
   185                                  ;               ROM.  DOS source also broken into header, data and code pieces
   186                                  ;      04/15/82 GETDMA and GETVECT calls added as 24 and 32.  These calls
   187                                  ;               return the current values.
   188                                  ;      04/15/82 INDOS flag implemented for interrupt processing along with
   189                                  ;               call to return flag location (call 29)
   190                                  ;      04/15/82 Volume ID attribute added
   191                                  ;      04/17/82 Changed ABORT return to user to a long ret from a long jump to
   192                                  ;               avoid a CS relative reference.
   193                                  ;      04/17/82 Put call to STATCHK in dispatcher to catch ^C more often
   194                                  ;      04/20/82 Added INT int_upooler into loop ^S wait
   195                                  ;      04/22/82 Dynamic disk I/O buffer allocation and call to manage them
   196                                  ;               call 49.
   197                                  ;      04/23/82 Added GETDSKPTDL as call 50, similar to GETFATPT(DL), returns
   198                                  ;               address of DPB
   199                                  ;      04/29/82 Mod to WRTDEV to look for ^C or ^S at console input when
   200                                  ;               writting to console device via file I/O.  Added a console
   201                                  ;               output attribute to devices.
   202                                  ;      04/30/82 Call to en/dis able ^C check in dispatcher Call 51
   203                                  ;      04/30/82 Code to allow assignment of func 1-12 to disk files as well
   204                                  ;               as devices....  pipes, redirection now possible
   205                                  ;      04/30/82 Expanded GETLIST call to 2.0 standard
   206                                  ;      05/04/82 Change to INT int_fatal_abort callout int HARDERR.  DOS SS
   207                                  ;               (data segment) stashed in ES, INT int_fatal_abort routines must
   208                                  ;               preserve ES.  This mod so HARDERR can be ROMed.
   209                                  ; 1.29 06/01/82 Installable block and character devices as per 2.0 spec
   210                                  ;      06/04/82 Fixed Bug in CLOSE regarding call to CHKFATWRT.  It got left
   211                                  ;               out back about 1.27 or so (oops).  ARR
   212                                  ; 1.30 06/07/82 Directory sector buffering added to main DOS buffer queue
   213                                  ; 1.40 06/15/82 Tree structured directories.  XENIX Path Parser MKDIR CHDIR
   214                                  ;               RMDIR Xenix calls
   215                                  ; 1.41 06/13/82 Made GETBUFFR call PLACEBUF
   216                                  ; 1.50 06/17/82 FATs cached in buffer pool, get FAT pointer calls disappear
   217                                  ;               Frees up lots of memory.
   218                                  ; 1.51 06/24/82 BREAKDOWN modified to do EXACT one sector read/write through
   219                                  ;               system buffers
   220                                  ; 1.52 06/30/82 OPEN, CLOSE, READ, WRITE, DUP, DUP2, LSEEK implemented
   221                                  ; 1.53 07/01/82 OPEN CLOSE mod for Xenix calls, saves and gets remote dir
   222                                  ; 1.54 07/11/82 Function calls 1-12 make use of new 2.0 PDB. Init code
   223                                  ;               changed to set file handle environment.
   224                                  ; 2.00 08/01/82 Number for IBM release
   225                                  ;      01/19/83 No environ bug in EXEC
   226                                  ;      01/19/83 MS-DOS OEM INT 21 extensions (SET_OEM_HANDLER)
   227                                  ;      01/19/83 Performance bug fix in cooked write to NUL
   228                                  ;      01/27/83 Growcnt fixed for 32-bits
   229                                  ;      01/27/83 Find-first problem after create
   230                                  ; 2.01 02/17/83 International DOS
   231                                  ; 2.11 08/12/83 Dos split into several more modules for assembly on
   232                                  ;               an IBM PC
   233                                  ; 08/07/2018 - Retro DOS v3.0 by Erdogan Tan
   234                                  ; (MSHEAD.ASM, MSDOS6.0, 1991) - mshead.asm 1.1 85/04/10 -
   235                                  ; 2.10 03/09/83 Start of NETWORK support
   236                                  ;		New Buffer structure
   237                                  ;		New Sytem file table structure
   238                                  ;		FCB moved to internal representation
   239                                  ;		DOS re-organized
   240                                  ; 2.11 04/21/83 Continuation of 2.10, preliminary Network
   241                                  ;		device interface.
   242                                  ; 2.11 08/12/83 Dos split into several more modules for assembly on
   243                                  ;               an IBM PC
   244                                  ; 2.50 09/12/83 More network stuff
   245                                  ;
   246                                  ; *************************************************************
   247                                  
   248                                  ; ----------------------------------------------------------------------------
   249                                  ; EQUATES
   250                                  
   251                                  ; Interrupt Entry Points:
   252                                  
   253                                  ; INTBASE:      ABORT
   254                                  ; INTBASE+4:    COMMAND
   255                                  ; INTBASE+8:    BASE EXIT ADDRESS
   256                                  ; INTBASE+C:    CONTROL-C ABORT
   257                                  ; INTBASE+10H:  FATAL ERROR ABORT
   258                                  ; INTBASE+14H:  BIOS DISK READ
   259                                  ; INTBASE+18H:  BIOS DISK WRITE
   260                                  ; INTBASE+1CH:  END BUT STAY RESIDENT (NOT SET BY DOS)
   261                                  ; INTBASE+20H:  SPOOLER INTERRUPT
   262                                  ; INTBASE+40H:  Long jump to CALL entry point
   263                                  
   264                                  ENTRYPOINTSEG   EQU     0CH
   265                                  MAXDIF          EQU     0FFFH
   266                                  SAVEXIT         EQU     10
   267                                  ;08/07/2018 - Retro DOS v3.0
   268                                  ;WRAPOFFSET	EQU	0FEF0h  ; (MISC.ASM, MSDOS 6.0, 1991)
   269                                  
   270                                         ; INCLUDE DOSSYM.ASM
   271                                         ; INCLUDE DEVSYM.ASM
   272                                  
   273                                  ; SUBTTL ^C, terminate/abort/exit and Hard error actions
   274                                  ; PAGE
   275                                  ; There are three kinds of context resets that can occur during normal DOS
   276                                  ; functioning:  ^C trap, terminate/abort/exit, and Hard-disk error.  These must
   277                                  ; be handles in a clean fashion that allows nested executions along with the
   278                                  ; ability to trap one's own errors.
   279                                  ;
   280                                  ; ^C trap - A process may elect to catch his own ^Cs.  This is achieved by
   281                                  ;           using the $GET_INTERRUPT_VECTOR and $SET_INTERRUPT_VECTOR as
   282                                  ;           follows:
   283                                  ;
   284                                  ;           $GET_INTERRUPT_VECTOR for INT int_ctrl_c
   285                                  ;           Save it in static memory.
   286                                  ;           $SET_INTERRUPT_VECTOR for INT int_ctrl_c
   287                                  ;
   288                                  ;           The interrupt service routine must preserve all registers and
   289                                  ;           return carry set iff the operation is to be aborted (via abort
   290                                  ;           system call), otherwise, carry is reset and the operation is
   291                                  ;           restarted.  ANY DEVIATION FROM THIS WILL LEAD TO UNRELIABLE
   292                                  ;           RESULTS.
   293                                  ;
   294                                  ;           To restore original ^C processing (done on terminate/abort/exit),
   295                                  ;           restore INT int_ctrl_c from the saved vector.
   296                                  ;
   297                                  ; Hard-disk error -- The interrupt service routine for INT int_fatal_abort must
   298                                  ;           also preserve registers and return one of three values in AL: 0 and
   299                                  ;           1 imply retry and ignore (???)  and 2 indicates an abort.  The user
   300                                  ;           himself is not to issue the abort, rather, the dos will do it for
   301                                  ;           him by simulating a normal abort/exit system call.  ANY DEVIATION
   302                                  ;           FROM THIS WILL LEAD TO UNRELIABLE RESULTS.
   303                                  ;
   304                                  ; terminate/abort/exit -- The user may not, under any circumstances trap an
   305                                  ;           abort call.  This is reserved for knowledgeable system programs.
   306                                  ;           ANY DEVIATION FROM THIS WILL LEAD TO UNRELIABLE RESULTS.
   307                                  
   308                                  ;SUBTTL SEGMENT DECLARATIONS
   309                                  
   310                                  ; The following are all of the segments used.  They are declared in the order
   311                                  ; that they should be placed in the executable
   312                                  
   313                                  ;
   314                                  ; segment ordering for MSDOS
   315                                  ;
   316                                  
   317                                  ;START           SEGMENT BYTE PUBLIC 'START'
   318                                  ;START           ENDS
   319                                  
   320                                  ;CONSTANTS       SEGMENT BYTE PUBLIC 'CONST'
   321                                  ;CONSTANTS       ENDS
   322                                  
   323                                  ;DATA            SEGMENT WORD PUBLIC 'DATA'
   324                                  ;DATA            ENDS
   325                                  
   326                                  ;CODE            SEGMENT BYTE PUBLIC 'CODE'
   327                                  ;CODE            ENDS
   328                                  
   329                                  ;LAST            SEGMENT BYTE PUBLIC 'LAST'
   330                                  ;LAST            ENDS
   331                                  
   332                                  ;DOSGROUP    GROUP   CODE,CONSTANTS,DATA,LAST
   333                                  
   334                                  ; The following segment is defined such that the data/const classes appear
   335                                  ; before the code class for ROMification
   336                                  
   337                                  ;START		SEGMENT BYTE PUBLIC 'START'
   338                                  ;           	ASSUME  CS:DOSGROUP,DS:NOTHING,ES:NOTHING,SS:NOTHING
   339                                  ;		JMP     DOSINIT
   340                                  ;START		ENDS
   341                                  
   342                                  ;============================================================================
   343                                  ; DOSSYM.ASM
   344                                  ;============================================================================
   345                                  
   346                                  ;<Control character definitions>
   347                                  
   348                                  c_DEL       EQU     7Fh         ;    ASCII rubout or delete previous char
   349                                  c_BS        EQU     08h         ; ^H ASCII backspace
   350                                  c_CR        EQU     0Dh         ; ^M ASCII carriage return
   351                                  c_LF        EQU     0Ah         ; ^J ASCII linefeed
   352                                  c_ETB       EQU     17h         ; ^W ASCII end of transmission
   353                                  c_NAK       EQU     15h         ; ^U ASCII negative acknowledge
   354                                  c_ETX       EQU     03h         ; ^C ASCII end of text
   355                                  c_HT        EQU     09h         ; ^I ASCII tab
   356                                  
   357                                  ;============================================================================
   358                                  ; BPB.INC, MSDOS 3.3, 1987
   359                                  ;============================================================================
   360                                  ; 09/07/2018 - Retro DOS v3.0
   361                                  
   362                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   363                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   364                                  ;									   ;
   365                                  
   366                                  ; BIOS PARAMETER BLOCK DEFINITION
   367                                  ; THIS STRUCTURE IS USED TO BUILD A FULL DPB
   368                                  
   369                                  struc BPBLOCK
   370 00000000 ????                    .SECSZ: resw 1		; Size in bytes of physical sector
   371 00000002 ??                      .CLUS:  resb 1		; Sectors/Alloc unit
   372 00000003 ????                    .RES:   resw 1		; Number of reserved sectors
   373 00000005 ??                      .FTCNT: resb 1		; Number of FATs
   374 00000006 ????                    .DRCNT: resw 1		; Number of directory entries
   375 00000008 ????                    .SCCNT: resw 1		; Total number of sectors
   376 0000000A ??                      .MEDIA: resb 1		; Media descriptor byte
   377 0000000B ????                    .FTSEC:	resw 1		; Number of sectors taken up by one FAT
   378                                  .size:
   379                                  endstruc
   380                                  
   381                                  ; 09/07/2018 - Retro DOS v3.0
   382                                  ; (BPB.INC, MSDOS 6.0, 1991)
   383                                  
   384                                  ;**	BIOS PARAMETER BLOCK DEFINITION
   385                                  ;
   386                                  ;	The BPB contains information about the disk structure.  It dates
   387                                  ;	back to the earliest FAT systems and so FAT information is
   388                                  ;	intermingled with physical driver information.
   389                                  ;
   390                                  ;	A boot sector contains a BPB for its device; for other disks
   391                                  ;	the driver creates a BPB.  DOS keeps copies of some of this
   392                                  ;	information in the DPB.
   393                                  ;
   394                                  ;	The BDS structure contains a BPB within it. 
   395                                  
   396                                  struc A_BPB
   397 00000000 ????                    .BPB_BYTESPERSECTOR:	resw	1
   398 00000002 ??                      .BPB_SECTORSPERCLUSTER:	resb	1
   399 00000003 ????                    .BPB_RESERVEDSECTORS:	resw	1
   400 00000005 ??                      .BPB_NUMBEROFFATS:	resb	1
   401 00000006 ????                    .BPB_ROOTENTRIES: 	resw	1
   402 00000008 ????                    .BPB_TOTALSECTORS:	resw	1
   403 0000000A ??                      .BPB_MEDIADESCRIPTOR:	resb	1
   404 0000000B ????                    .BPB_SECTORSPERFAT:	resw	1
   405 0000000D ????                    .BPB_SECTORSPERTRACK:	resw	1
   406 0000000F ????                    .BPB_HEADS:		resw	1
   407 00000011 ????                    .BPB_HIDDENSECTORS:	resw	1
   408 00000013 ????                    			resw	1
   409 00000015 ????                    .BPB_BIGTOTALSECTORS:	resw	1
   410 00000017 ????                    			resw	1
   411 00000019 ????????????            			resb	6	; NOTE:  many times these
   412                                  ;					; 	 6 bytes are omitted
   413                                  ;					;	 when BPB manipulations
   414                                  ;					;	 are performed!
   415                                  .size:
   416                                  endstruc
   417                                  
   418                                  ;                                                                          ;
   419                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   420                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   421                                  
   422                                  ;============================================================================
   423                                  ; BUFFER.INC, MSDOS 3.3, 1987
   424                                  ;============================================================================
   425                                  ; 09/07/2018 - Retro DOS v3.0
   426                                  
   427                                  ; <Disk I/O Buffer Header>
   428                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   429                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   430                                  ;                                                                          ;
   431                                  
   432                                  ; Field definition for I/O buffer information
   433                                  
   434                                  struc BUFFINFO
   435 00000000 ????????                .buf_link:	resd 1		; Pointer to next buffer in list
   436 00000004 ??                      .buf_ID:	resb 1		; Drive of buffer (bit 7 = 0)
   437                                  				; SFT table index (bit 7 = 1)
   438                                  				; = FFH if buffer free
   439 00000005 ??                      .buf_flags:	resb 1		; Bit 7 = 1 if Remote file buffer
   440                                  				;	= 0 if Local device buffer
   441                                  				; Bit 6 = 1 if buffer dirty
   442                                  				; Bit 5 = Reserved
   443                                  				; Bit 4 = Search bit (bit 7 = 1)
   444                                  				; Bit 3 = 1 if buffer is DATA
   445                                  				; Bit 2 = 1 if buffer is DIR
   446                                  				; Bit 1 = 1 if buffer is FAT
   447                                  				; Bit 0 = Reserved
   448 00000006 ????                    .buf_sector:	resw 1		; Sector number of buffer (bit 7 = 0)
   449                                  ; The next two items are often refed as a word (bit 7 = 0)
   450 00000008 ??                      .buf_wrtcnt:	resb 1		; For FAT sectors, # times sector written out
   451 00000009 ??                      .buf_wrtcntinc:	resb 1		; "   "     "   , # sectors between each write
   452 0000000A ????????                .buf_DPB:	resd 1		; Pointer to drive parameters
   453 0000000E ????                    .buf_fill:	resw 1		; How full buffer is (bit 7 = 1)
   454                                  .size:
   455                                  endstruc
   456                                  
   457                                  %define buf_offset dword [buf_sector]
   458                                  				;For bit 7 = 1, this is the byte
   459                                  				;offset of the start of the buffer in
   460                                  				;the file pointed to by buf_ID.  Thus
   461                                  				;the buffer starts at location
   462                                  				;buf_offset in the file and contains
   463                                  				;buf_fill bytes.
   464                                  
   465                                  BUFINSIZ        EQU     BUFFINFO.size
   466                                  
   467                                  buf_Free	EQU	0FFh	; buf_id of free buffer
   468                                  
   469                                  ;Flag byte masks
   470                                  buf_isnet	EQU	10000000B
   471                                  buf_dirty	EQU	01000000B
   472                                  ;***
   473                                  buf_visit	EQU	00100000B
   474                                  ;***
   475                                  buf_snbuf	EQU	00010000B
   476                                  
   477                                  buf_isDATA	EQU	00001000B
   478                                  buf_isDIR	EQU	00000100B
   479                                  buf_isFAT	EQU	00000010B
   480                                  buf_type_0	EQU	11110001B	; AND sets type to "none"
   481                                  
   482                                  buf_NetID	EQU	BUFINSIZ
   483                                  
   484                                  ;                                                                          ;
   485                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   486                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   487                                  
   488                                  ; <User stack inside of system call>
   489                                  ; Location of user registers relative user stack pointer
   490                                  
   491                                  struc	user_env   ; user_environ
   492 00000000 ????                    .user_AX: resw 1
   493 00000002 ????                    .user_BX: resw 1
   494 00000004 ????                    .user_CX: resw 1
   495 00000006 ????                    .user_DX: resw 1
   496 00000008 ????                    .user_SI: resw 1
   497 0000000A ????                    .user_DI: resw 1
   498 0000000C ????                    .user_BP: resw 1
   499 0000000E ????                    .user_DS: resw 1
   500 00000010 ????                    .user_ES: resw 1
   501 00000012 ????                    .user_IP: resw 1
   502 00000014 ????                    .user_CS: resw 1
   503 00000016 ????                    .user_F:  resw 1
   504                                  .size:
   505                                  endstruc
   506                                  
   507                                  ; 09/07/2018 - Retro DOS v3.0
   508                                  ; (VECTOR.INC, MSDOS 3.3, 1987)
   509                                  ; ----------------------------------------------------------------------------
   510                                  
   511                                  ; <interrupt definitions>
   512                                  
   513                                  INTTAB          EQU     20H
   514                                  INTBASE         EQU     4 * INTTAB
   515                                  ENTRYPOINT      EQU     INTBASE+40H
   516                                  
   517                                  ;	IF      ALTVECT
   518                                  ;ALTTAB  EQU     0F0H
   519                                  ;ALTBASE EQU     4 * ALTTAB
   520                                  ;	ENDIF
   521                                  
   522                                  ;
   523                                  ; interrupt assignments
   524                                  ;
   525                                  ;	IF	NOT ALTVECT
   526                                  int_abort	    EQU     INTTAB	; abort process
   527                                  int_command	    EQU     int_abort+1 ; call MSDOS
   528                                  int_terminate	    EQU     int_abort+2 ; int to terminate address
   529                                  int_ctrl_c	    EQU     int_abort+3 ; ^c trapper
   530                                  int_fatal_abort     EQU     int_abort+4 ; hard disk error
   531                                  int_disk_read	    EQU     int_abort+5 ; logical sector disk read
   532                                  int_disk_write	    EQU     int_abort+6 ; logical sector disk write
   533                                  int_keep_process    EQU     int_abort+7 ; terminate program and stay
   534                                  					; resident
   535                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   536                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   537                                  ;									   ;
   538                                  int_spooler	    EQU     int_abort+8 ; spooler call
   539                                  int_fastcon	    EQU     int_abort+9 ; fast CON interrupt
   540                                  int_IBM 	    EQU     int_abort+10; critical section maintenance
   541                                  ;									   ;
   542                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   543                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   544                                  ;	ELSE
   545                                  ;int_abort	    EQU     INTTAB	; abort process
   546                                  ;int_command	    EQU     int_abort+1 ; call MSDOS
   547                                  ;int_terminate	    EQU     ALTTAB	; int to terminate address
   548                                  ;int_ctrl_c	    EQU     int_terminate+1 ; ^c trapper
   549                                  ;int_fatal_abort    EQU     int_terminate+2 ; hard disk error
   550                                  ;int_disk_read	    EQU     int_abort+5 ; logical sector disk read
   551                                  ;int_disk_write	    EQU     int_abort+6 ; logical sector disk write
   552                                  ;int_keep_process   EQU     int_abort+7 ; terminate program and stay resident
   553                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   554                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   555                                  ;									   ;
   556                                  ;int_spooler	    EQU     int_terminate+3 ; spooler call
   557                                  ;int_fastcon	    EQU     int_abort+9 ; fast CON interrupt
   558                                  ;									   ;
   559                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   560                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   561                                  ;	ENDIF
   562                                  
   563                                  addr_int_abort		EQU    4 * int_abort
   564                                  addr_int_command	EQU    4 * int_command
   565                                  addr_int_terminate	EQU    4 * int_terminate
   566                                  addr_int_ctrl_c 	EQU    4 * int_ctrl_c
   567                                  addr_int_fatal_abort	EQU    4 * int_fatal_abort
   568                                  addr_int_disk_read	EQU    4 * int_disk_read
   569                                  addr_int_disk_write	EQU    4 * int_disk_write
   570                                  addr_int_keep_process	EQU    4 * int_keep_process
   571                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   572                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   573                                  ;									   ;
   574                                  addr_int_spooler	EQU    4 * int_spooler
   575                                  addr_int_fastcon	EQU    4 * int_fastcon
   576                                  addr_int_IBM		EQU    4 * int_IBM
   577                                  ;									   ;
   578                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   579                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   580                                  
   581                                  
   582                                  ; <Disk map>
   583                                  ;  MSDOS partitions the disk into 4 sections:
   584                                  ;
   585                                  ;  phys sector 0:   +-------------------+
   586                                  ;       |           | boot/reserved     |
   587                                  ;       |           +-------------------+
   588                                  ;       |           |  File allocation  |
   589                                  ;       v           |      table(s)     |
   590                                  ;                   |  (multiple copies |
   591                                  ;                   |     are kept)     |
   592                                  ;                   +-------------------+
   593                                  ;                   |     Directory     |
   594                                  ;                   +-------------------+
   595                                  ;                   |     File space    |
   596                                  ;                   +-------------------+
   597                                  ;                   |   Unaddressable   |
   598                                  ;                   |  (to end of disk) |
   599                                  ;                   +-------------------+
   600                                  ;
   601                                  ; All partition boundaries are sector boundaries.  The size of the FAT is
   602                                  ; adjusted to maximize the file space addressable.
   603                                  
   604                                  ; BREAK <Directory entry>
   605                                  
   606                                  ;
   607                                  ;       +---------------------------+
   608                                  ;       |  (12 BYTE) filename/ext   |       0       0
   609                                  ;       +---------------------------+
   610                                  ;       |     (BYTE) attributes     |       11      B
   611                                  ;       +---------------------------+
   612                                  ;       |    (10 BYTE) reserved     |       12      C
   613                                  ;       +---------------------------+
   614                                  ;       | (WORD) time of last write |       22      16
   615                                  ;       +---------------------------+
   616                                  ;       | (WORD) date of last write |       24      18
   617                                  ;       +---------------------------+
   618                                  ;       |   (WORD) First cluster    |       26      1A
   619                                  ;       +---------------------------+
   620                                  ;       |     (DWORD) file size     |       28      1C
   621                                  ;       +---------------------------+
   622                                  ;
   623                                  ;   First byte of filename  = E5 -> free directory entry
   624                                  ;                           = 00 -> end of allocated directory
   625                                  ;   Time:   Bits 0-4=seconds/2, bits 5-10=minute, 11-15=hour
   626                                  ;   Date:   Bits 0-4=day, bits 5-8=month, bits 9-15=year-1980
   627                                  ;
   628                                  struc dir_entry
   629 00000000 <res Bh>                .dir_name:	resb 11			; file name
   630 0000000B ??                      .dir_attr:	resb 1			; attribute bits
   631 0000000C <res Ah>                .dir_pad:	resb 10			; reserved for expansion
   632 00000016 ????                    .dir_time:	resw 1			; time of last write
   633 00000018 ????                    .dir_date:	resw 1			; date of last write
   634 0000001A ????                    .dir_first:	resw 1			; first allocation unit of file
   635 0000001C ????                    .dir_size_l:	resw 1			; low 16 bits of file size
   636 0000001E ????                    .dir_size_h:	resw 1			; high 16 bits of file size
   637                                  .size:
   638                                  endstruc
   639                                  
   640                                  attr_read_only      EQU      1h
   641                                  attr_hidden         EQU      2h
   642                                  attr_system         EQU      4h
   643                                  attr_volume_id      EQU      8h
   644                                  attr_directory      EQU     10h
   645                                  attr_archive        EQU     20h
   646                                  ;09/07/2018 - Retro DOS v3.0
   647                                  ;(DIRENT.INC, MSDOS 3.3, 1987)
   648                                  attr_device	    EQU     40h	; This is a VERY special bit.
   649                                  				;   NO directory entry on a disk EVER
   650                                  				;   has this bit set. It is set non-zero
   651                                  				;   when a device is found by GETPATH
   652                                  
   653                                  attr_all            EQU     attr_hidden+attr_system+attr_directory
   654                                                                          ; OR of hard attributes for FINDENTRY
   655                                  
   656                                  attr_ignore         EQU     attr_read_only+attr_archive
   657                                                                          ; ignore this(ese) attribute(s)
   658                                                                          ; during search first/next
   659                                  
   660                                  attr_changeable     EQU     attr_read_only+attr_hidden+attr_system+attr_archive
   661                                                                          ; changeable via CHMOD
   662                                  
   663                                  ; 09/08/2018 - Retro DOS v3.0
   664                                  ; (DIRENT.INC, MSDOS 6,0, 1991)
   665                                  DIRFREE 	equ	0E5h	; stored in dir_name[0] to indicate free slot
   666                                  
   667                                  ; <File allocation Table information>
   668                                  ;
   669                                  ; The File Allocation Table uses a 12-bit entry for each allocation unit on the
   670                                  ; disk.  These entries are packed, two for every three bytes.  The contents of
   671                                  ; entry number N is found by 1) multiplying N by 1.5; 2) adding the result to
   672                                  ; the base address of the Allocation Table; 3) fetching the 16-bit word at this
   673                                  ; address; 4) If N was odd (so that N*1.5 was not an integer), shift the word
   674                                  ; right four bits; 5) mask to 12 bits (AND with 0FFF hex).  Entry number zero
   675                                  ; is used as an end-of-file trap in the OS and is passed to the BIOS to help
   676                                  ; determine disk format.  Entry 1 is reserved for future use.  The first
   677                                  ; available allocation unit is assigned entry number two, and even though it is
   678                                  ; the first, is called cluster 2.  Entries greater than 0FF8H are end of file
   679                                  ; marks; entries of zero are unallocated.  Otherwise, the contents of a FAT
   680                                  ; entry is the number of the next cluster in the file.
   681                                  ;
   682                                  ; Clusters with bad sectors are tagged with FF7H.  Any non-zero number would do
   683                                  ; because these clusters show as allocated, but are not part of any allocation
   684                                  ; chain and thus will never be allocated to a file.  A particular number is
   685                                  ; selected so that disk checking programs know what to do (ie.  a cluster with
   686                                  ; entry FF7H which is not in a chain is not an error).
   687                                  
   688                                  ;DIRSTRLEN       EQU     64	; Max length in bytes of directory strings
   689                                  
   690                                  ; 19/07/2018
   691                                  ; (DPB.INC, MSDOS 3.3, 1987)
   692                                  ; 07/07/2018 - Retro DOS v3.0
   693                                  ; (DPB.INC, MSDOS 6.0, 1991)
   694                                  ; ----------------------------------------------------------------------------
   695                                  ;**	DPB - Drive Parameter Block
   696                                  ;
   697                                  ;	BUGBUG - this isn't authorative - it's my probably incomplete and
   698                                  ;	possibly inaccurate deductions from code study... - jgl
   699                                  ;
   700                                  ;	The DPB is DOS's main structure for describing block devices.
   701                                  ;	It contains info about the "Drive" intermingled with info about
   702                                  ;	the FAT file system which is presumably on the drive.  I don't know
   703                                  ;	how those fields are used if it's not the FAT file system - BUGBUG
   704                                  ;
   705                                  ;	The DPBs are statically allocated and chained off of DPBHead.
   706                                  ;	Users scan this chain looking for a match on DPB_DRIVE.
   707                                  ;	The DPBs are built at init time from info in the SYSDEV structure.
   708                                  
   709                                  struc	DPB
   710 00000000 ??                      .DRIVE:		resb 1		; Logical drive # assoc with DPB (A=0,B=1,...)
   711 00000001 ??                      .UNIT:		resb 1		; Driver unit number of DPB
   712 00000002 ????                    .SECTOR_SIZE:	resw 1		; Size of physical sector in bytes
   713 00000004 ??                      .CLUSTER_MASK:	resb 1		; Sectors/cluster - 1
   714 00000005 ??                      .CLUSTER_SHIFT:	resb 1		; Log2 of sectors/cluster
   715 00000006 ????                    .FIRST_FAT:	resw 1		; Starting record of FATs
   716 00000008 ??                      .FAT_COUNT:	resb 1		; Number of FATs for this drive
   717 00000009 ????                    .ROOT_ENTRIES:	resw 1		; Number of directory entries
   718 0000000B ????                    .FIRST_SECTOR:	resw 1		; First sector of first cluster
   719 0000000D ????                    .MAX_CLUSTER:	resw 1		; Number of clusters on drive + 1
   720                                  ; MSDOS 3.3
   721 0000000F ??                      .FAT_SIZE:	resb 1		; Number of records occupied by FAT
   722                                  ; MSDOS 6.0
   723                                  ;.FAT_SIZE:	resw 1		; Number of records occupied by FAT
   724 00000010 ????                    .DIR_SECTOR:	resw 1		; Starting record of directory
   725 00000012 ????????                .DRIVER_ADDR:	resd 1		; Pointer to driver
   726 00000016 ??                      .MEDIA:		resb 1		; Media byte
   727 00000017 ??                      .FIRST_ACCESS:	resb 1		; This is initialized to -1 to force a media
   728                                  				; check the first time this DPB is used
   729 00000018 ????????                .NEXT_DPB:	resd 1		; Pointer to next Drive parameter block
   730 0000001C ????                    .NEXT_FREE:	resw 1		; Cluster # of last allocated cluster
   731 0000001E ????                    .FREE_CNT:	resw 1		; Count of free clusters, -1 if unknown
   732                                  .size:
   733                                  endstruc
   734                                  
   735                                  DPBSIZ  EQU     DPB.size	; Size of the structure in bytes
   736                                  
   737                                  DSKSIZ  EQU	DPB.MAX_CLUSTER	; Size of disk (temp used during init only)
   738                                  
   739                                  ;                                                                          ;
   740                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   741                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   742                                  
   743                                  ; 12/07/2018 - Retro DOS v3.0 
   744                                  ; (DOSSYM.INC, MSDOS 6.0, 1991)
   745                                  
   746                                  ;**	Character Type Flags
   747                                  ;
   748                                  ;	These flags are used in a lookup table indexed by the character code.
   749                                  ;	They're used to quickly classify characters when parsing paths.
   750                                  ;	I think that these are only used to parse FCBs - jgl
   751                                  
   752                                  FCHK	equ 1		; I think this means "normal name char, no chks needed" -jgl
   753                                  FDELIM	equ 2		; is a delimiter
   754                                  FSPCHK	equ 4		; set if character is not a space or equivalent
   755                                  FFCB	equ 8		; is valid in an FCB
   756                                  
   757                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   758                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   759                                  ;                                                                          ;
   760                                  devid_file_clean        EQU     40h     ; true if file and not written
   761                                  devid_file_mask_drive   EQU     3Fh     ; mask for drive number
   762                                  
   763                                  devid_device            EQU     80h     ; true if a device
   764                                  devid_device_EOF        EQU     40h     ; true if end of file reached
   765                                  devid_device_raw        EQU     20h     ; true if in raw mode
   766                                  devid_device_special    EQU     10h     ; true if special device
   767                                  devid_device_clock      EQU     08h     ; true if clock device
   768                                  devid_device_null       EQU     04h     ; true if null device
   769                                  devid_device_con_out    EQU     02h     ; true if console output
   770                                  devid_device_con_in     EQU     01h     ; true if consle input
   771                                  
   772                                  ;
   773                                  ; structure of devid field as returned by IOCTL is:
   774                                  ;
   775                                  ;       BIT     7   6   5   4   3   2   1   0
   776                                  ;             |---|---|---|---|---|---|---|---|
   777                                  ;             | I | E | R | S | I | I | I | I |
   778                                  ;             | S | O | A | P | S | S | S | S |
   779                                  ;             | D | F | W | E | C | N | C | C |
   780                                  ;             | E |   |   | C | L | U | O | I |
   781                                  ;             | V |   |   | L | K | L | T | N |
   782                                  ;             |---|---|---|---|---|---|---|---|
   783                                  ;       ISDEV = 1 if this channel is a device
   784                                  ;             = 0 if this channel is a disk file
   785                                  ;
   786                                  ;       If ISDEV = 1
   787                                  ;
   788                                  ;             EOF = 0 if End Of File on input
   789                                  ;             RAW = 1 if this device is in Raw mode
   790                                  ;                 = 0 if this device is cooked
   791                                  ;             ISCLK = 1 if this device is the clock device
   792                                  ;             ISNUL = 1 if this device is the null device
   793                                  ;             ISCOT = 1 if this device is the console output
   794                                  ;             ISCIN = 1 if this device is the console input
   795                                  ;
   796                                  ;       If ISDEV = 0
   797                                  ;             EOF = 0 if channel has been written
   798                                  ;             Bits 0-5  are  the  block  device  number  for
   799                                  ;                 the channel (0 = A, 1 = B, ...)
   800                                  ;
   801                                  devid_ISDEV     EQU     80h
   802                                  devid_EOF       EQU     40h
   803                                  devid_RAW       EQU     20h
   804                                  devid_SPECIAL   EQU     10H
   805                                  devid_ISCLK     EQU     08h
   806                                  devid_ISNUL     EQU     04h
   807                                  devid_ISCOT     EQU     02h
   808                                  devid_ISCIN     EQU     01h
   809                                  
   810                                  devid_block_dev EQU     1Fh             ; mask for block device number
   811                                  
   812                                  ; 08/07/2018 - Retro DOS v3.0
   813                                  ; (PDB.INC, MSDOS 6.0, 1991)
   814                                  ; ----------------------------------------------------------------------------
   815                                  ; BREAK <Process data block>
   816                                  ;
   817                                  ;**	Process data block (otherwise known as program header)
   818                                  ;
   819                                  
   820                                  ;	These offset are documented in the MSDOS Encyclopedia, so nothing
   821                                  ;	can be rearranged here, ever.  Reserved areas are probably safe
   822                                  ;	for use.
   823                                  
   824                                  FILPERPROC	EQU     20
   825                                  
   826                                  struc PDB	; Process_data_block
   827 00000000 ????                    .EXIT_CALL:	resw 1   	; INT int_abort system terminate
   828 00000002 ????                    .BLOCK_LEN:	resw 1		; size of execution block
   829 00000004 ??                                      resb 1
   830 00000005 ??????????              .CPM_CALL:	resb 5		; ancient call to system
   831 0000000A ????????                .EXIT:		resd 1		; pointer to exit routine
   832 0000000E ????????                .CTRL_C:	resd 1		; pointer to ^C routine
   833 00000012 ????????                .FATAL_ABORT:	resd 1		; pointer to fatal error
   834 00000016 ????                    .PARENT_PID:	resw 1		; PID of parent (terminate PID)
   835 00000018 <res 14h>               .JFN_TABLE:     resb FILPERPROC ; indices into system table
   836 0000002C ????                    .ENVIRON:	resw 1		; seg addr of environment
   837 0000002E ????????                .USER_STACK:	resd 1		; stack of self during system calls
   838 00000032 ????                    .JFN_Length:	resw 1		; number of handles allowed
   839 00000034 ????????                .JFN_Pointer:	resd 1		; pointer to JFN table
   840 00000038 ????????                .Next_PDB:	resd 1		; pointer to nested PDB's
   841 0000003C ??                      .InterCon:	resb 1	; MSDOS 6.0 ; *** jh-3/28/90 *** 
   842 0000003D ??                      .Append:	resb 1	; MSDOS 6.0 ; *** Not sure if still used ***
   843 0000003E ????                    .Novell_Used:	resb 2	; MSDOS 6.0 ; Novell shell (redir) uses these
   844 00000040 ????                    .Version:	resw 1	; MSDOS 6.0 ; DOS version reported to this app
   845 00000042 <res Eh>                .PAD1:		resb 14 ; 0Eh
   846 00000050 ??????????              .CALL_SYSTEM:	resb 5		; portable method of system call
   847 00000055 ??????????????          .PAD2:		resb 7		; reserved so FCB 1 can be used as
   848                                  				;  an extended FCB
   849                                  ;endstruc 	; MSDOS 3.3
   850                                  	  	; MSDOS 6.0
   851 0000005C <res 10h>               .FCB1:		resb 16 ; 10h	; default FCB 1
   852 0000006C <res 10h>               .FCB2:		resb 16 ; 10h	; default FCB 2
   853 0000007C ????????                .PAD3:		resb 4		; not sure if this is used by PDB_FCB2
   854 00000080 <res 80h>               .TAIL:		resb 128	; command tail and default DTA
   855                                  endstruc
   856                                  
   857                                  ; BREAK <EXEC and EXE file structures>
   858                                  ;
   859                                  ; EXEC arg block - load/go program
   860                                  ;
   861                                  
   862                                  ;
   863                                  ; The following get used as arguments to the EXEC system call.  They indicate
   864                                  ; whether or not the program is executed or whether or not a program header
   865                                  ; gets created.
   866                                  ;
   867                                  exec_func_no_execute    EQU 1           ; no execute bit
   868                                  exec_func_overlay       EQU 2           ; overlay bit
   869                                  
   870                                  struc EXEC0
   871 00000000 ????                    .ENVIRON:	resw 1		; seg addr of environment
   872 00000002 ????????                .COM_LINE:	resd 1		; pointer to asciz command line
   873 00000006 ????????                .5C_FCB:	resd 1		; default fcb at 5C
   874 0000000A ????????                .6C_FCB:	resd 1		; default fcb at 6C
   875                                  .size:
   876                                  endstruc
   877                                  
   878                                  struc EXEC1
   879 00000000 ????                    .ENVIRON:	resw 1		; seg addr of environment
   880 00000002 ????????                .COM_LINE:	resd 1		; pointer to asciz command line
   881 00000006 ????????                .5C_FCB:	resd 1		; default fcb at 5C
   882 0000000A ????????                .6C_FCB:	resd 1		; default fcb at 6C
   883 0000000E ????                    .SP:		resw 1		; stack pointer of program
   884 00000010 ????                    .SS:		resw 1		; stack seg register of program
   885 00000012 ????                    .IP:		resw 1		; entry point IP
   886 00000014 ????                    .CS:		resw 1		; entry point CS
   887                                  .size:
   888                                  endstruc
   889                                  
   890                                  struc EXEC3
   891 00000000 ????                    .load_addr:	resw 1		; seg address of load point
   892 00000002 ????                    .reloc_fac:	resw 1		; relocation factor
   893                                  endstruc
   894                                  
   895                                  ; 02/08/2018 (MSDOS 6.0, EXEC.INC, 1991)
   896                                  ;**	Exit codes (in upper byte) for terminating programs
   897                                  
   898                                  EXIT_TERMINATE		EQU	0
   899                                  EXIT_ABORT		EQU	0
   900                                  EXIT_CTRL_C		EQU	1
   901                                  EXIT_HARD_ERROR 	EQU	2
   902                                  EXIT_KEEP_PROCESS	EQU	3
   903                                  
   904                                  ;
   905                                  ; EXE file header
   906                                  ;
   907                                  
   908                                  struc EXE
   909 00000000 ????                    .signature:   resw 1		; must contain 4D5A (yay zibo!)
   910 00000002 ????                    .len_mod_512: resw 1		; low 9 bits of length
   911 00000004 ????                    .pages:       resw 1		; number of 512b pages in file
   912 00000006 ????                    .rle_count:   resw 1		; count of reloc entries
   913 00000008 ????                    .par_dir:     resw 1		; number of paragraphs before image
   914 0000000A ????                    .min_BSS:     resw 1		; minimum number of para of BSS
   915 0000000C ????                    .max_BSS:     resw 1		; max number of para of BSS
   916 0000000E ????                    .SS:          resw 1		; stack of image
   917 00000010 ????                    .SP:          resw 1		; SP of image
   918 00000012 ????                    .chksum:      resw 1		; checksum of file (ignored)
   919 00000014 ????                    .IP:          resw 1		; IP of entry
   920 00000016 ????                    .CS:          resw 1		; CS of entry
   921 00000018 ????                    .rle_table:   resw 1		; byte offset of reloc table
   922 0000001A ????                    .iov:         resw 1		; overlay number (0 for root)
   923 0000001C ????????                .sym_tab:     resd 1		; offset of symbol table in file
   924                                  .size:
   925                                  endstruc
   926                                  
   927                                  exe_valid_signature     EQU 5A4Dh
   928                                  exe_valid_old_signature EQU 4D5Ah
   929                                  
   930                                  struc symbol_entry
   931 00000000 ????????                .value:	resd 1
   932 00000004 ????                    .type:	resw 1
   933 00000006 ??                      .len:	resb 1
   934 00000007 <res FFh>               .name:	resb 255
   935                                  endstruc
   936                                  
   937                                  ; 07/07/2018 - Retro DOS v3.0
   938                                  ; MSDOS 6.0 (SF.INC, 1991)
   939                                  ; ----------------------------------------------------------------------------
   940                                  ;**	SF.INC - System File Table
   941                                  ;
   942                                  ;   AN000   version 4.00   Jan. 1988
   943                                  ;   AN003   PTM 3680 --  make NAME offset the same as before (<=3.30)
   944                                  ;   AN009   PTM 3839	 reorder SFT for MS WINDOWS
   945                                  
   946                                  ;**	System File Table SuperStructure
   947                                  ;
   948                                  ;	The system file table entries are allocated in contiguous groups.
   949                                  ;	There may be more than one such groups; the SF "superstructure"
   950                                  ;	tracks the groups.
   951                                  
   952                                  struc	SFT
   953 00000000 ????????                .SFLink:	resd 1
   954 00000004 ????                    .SFCount:	resw 1		; number of entries
   955 00000006 ????                    .SFTable:	resw 1		; beginning of array of the following
   956                                  .size:
   957                                  endstruc
   958                                  
   959                                  ; 07/07/2018 - Retro DOS v3.0
   960                                  ; MSDOS 6.0 (SF.INC, 1991)
   961                                  ; ----------------------------------------------------------------------------
   962                                  ;**	System file table entry
   963                                  ;
   964                                  ;	These are the structures which are at SFTABLE in the SF structure.
   965                                  
   966                                  struc SF_ENTRY
   967 00000000 ????                    .sf_ref_count:	resw 1		; number of processes sharing entry
   968                                  				;   if FCB then ref count
   969 00000002 ????                    .sf_mode:	resw 1		; mode of access or high bit on if FCB
   970 00000004 ??                      .sf_attr:	resb 1		; attribute of file
   971 00000005 ????                    .sf_flags:	resw 1		;Bits 8-15
   972                                  				; Bit 15 = 1 if remote file
   973                                  				;	 = 0 if local file or device
   974                                  				; Bit 14 = 1 if date/time is not to be
   975                                  				;   set from clock at CLOSE.  Set by
   976                                  				;   FILETIMES and FCB_CLOSE.  Reset by
   977                                  				;   other reseters of the dirty bit
   978                                  				;   (WRITE)
   979                                  				; Bit 13 = Pipe bit (reserved)
   980                                  				;
   981                                  				; Bits 0-7 (old FCB_devid bits)
   982                                  				; If remote file or local file, bit
   983                                  				; 6=0 if dirty Device ID number, bits
   984                                  				; 0-5 if local file.
   985                                  				; bit 7=0 for local file, bit 7
   986                                  				;      =1 for local I/O device
   987                                  				; If local I/O device, bit 6=0 if EOF (input)
   988                                  				;		Bit 5=1 if Raw mode
   989                                  				;		Bit 0=1 if console input device
   990                                  				;		Bit 1=1 if console output device
   991                                  				;		Bit 2=1 if null device
   992                                  				;		Bit 3=1 if clock device
   993 00000007 ????????                .sf_devptr:	resd	1	; Points to DPB if local file, points
   994                                  				; to device header if local device,
   995                                  				; points to net device header if
   996                                  				; remote
   997 0000000B ????                    .sf_firclus:	resw	1	; First cluster of file (bit 15 = 0)
   998 0000000D ????                    .sf_time:	resw	1	; Time associated with file
   999 0000000F ????                    .sf_date:	resw	1	; Date associated with file
  1000 00000011 ????????                .sf_size:	resd 	1	; Size associated with file
  1001 00000015 ????????                .sf_position:	resd	1	; Read/Write pointer or LRU count for FCBs
  1002                                  
  1003                                  ; Starting here, the next 7 bytes may be used by the file system to store an
  1004                                  ; ID
  1005                                  
  1006                                  ; 09/07/2018 - Retro DOS v3.0
  1007                                  
  1008                                  ; MSDOS 3.3 SF.INC, 1987
  1009 00000019 ????                    .sf_cluspos:	resw	1	; Position of last cluster accessed
  1010 0000001B ????                    .sf_lstclus	resw	1	; Last cluster accessed
  1011 0000001D ????                    .sf_dirsec:	resw	1	; Sector number of directory sector
  1012                                  				; for this file
  1013 0000001F ??                      .sf_dirpos:	resb	1	; Offset of this entry in the above
  1014                                  
  1015                                  ; MSDOS 6.0, SF.INC, 1991
  1016                                  ;.sf_cluspos:	resw	1	; Position of last cluster accessed
  1017                                  ;.sf_dirsec:	resd	1	; Sector number of directory sector
  1018                                  ;				; for this file
  1019                                  ;.sf_dirpos:	resb	1	; Offset of this entry in the above
  1020                                  
  1021                                  ; End of 7 bytes of file-system specific info.
  1022                                  
  1023 00000020 <res Bh>                .sf_name:	resb	11	; 11 character name that is in the
  1024                                  				; directory entry.  This is used by
  1025                                  				; close to detect file deleted and
  1026                                  				; disk changed errors.
  1027                                  ; SHARING INFO
  1028 0000002B ????????                .sf_chain:	resd	1	; link to next SF
  1029 0000002F ????                    .sf_UID:	resw	1
  1030 00000031 ????                    .sf_PID:	resw	1
  1031 00000033 ????                    .sf_MFT:	resw	1
  1032                                  
  1033                                  ; MSDOS 6.0, SF.INC, 1991
  1034                                  ;.sf_lstclus:	resw	1	;AN009; Last cluster accessed
  1035                                  ;.sf_IFS_HDR:	resd	1
  1036                                  
  1037                                  .size:
  1038                                  endstruc
  1039                                  
  1040                                  ; 20/07/2018
  1041                                  ; MSDOS 3.3, SF.INC, 1987
  1042                                  %define sf_netid   SF_ENTRY.sf_cluspos    ; byte
  1043                                  %define sf_OpenAge SF_ENTRY.sf_position+2 ; word
  1044                                  %define sf_LRU	   SF_ENTRY.sf_position	  ; word
  1045                                  ; MSDOS 6.0, SDF.INC, 1991
  1046                                  %define sf_fsda	     SF_ENTRRY.sf_cluspos ; byte ;DOS 4.00
  1047                                  %define sf_serial_ID SF_ENTRY.sf_firclus  ; word ;DOS 4.00
  1048                                  
  1049                                  ; 19/07/2018
  1050                                  
  1051                                  ; MSDOS 3.3, SF.INC, 1987
  1052                                  
  1053                                  sf_default_number  EQU	5
  1054                                  
  1055                                  ; Note that we need to mark an SFT as being busy for OPEN/CREATE.  This is
  1056                                  ; because an INT 24 may prevent us from 'freeing' it.  We mark this as such
  1057                                  ; by placing a -1 in the ref_count field.
  1058                                  
  1059                                  sf_busy EQU -1
  1060                                  
  1061                                  ; mode mask for FCB detection
  1062                                  sf_isFCB		EQU	1000000000000000B
  1063                                  
  1064                                  ; Flag word masks
  1065                                  sf_isnet		EQU	1000000000000000B
  1066                                  sf_close_nodate 	EQU	0100000000000000B
  1067                                  sf_pipe 		EQU	0010000000000000B
  1068                                  sf_no_inherit		EQU	0001000000000000B
  1069                                  sf_net_spool		EQU	0000100000000000B
  1070                                  
  1071                                  ; 19/04/2018
  1072                                  sf_entry_size equ SF_ENTRY.size ; 53
  1073                                  
  1074                                  ;                                                                          ;
  1075                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1076                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1077                                  
  1078                                  ; 09/07/2018 - Retro DOS v3.0
  1079                                  ; (ARENA.INC, MSDOS 3.3, 1987)
  1080                                  ; ----------------------------------------------------------------------------
  1081                                  ;BREAK <Memory arena structure>
  1082                                  
  1083                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1084                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1085                                  ;                                                                          ;
  1086                                  ;
  1087                                  ; arena item
  1088                                  ;
  1089                                  
  1090                                  struc ARENA
  1091 00000000 ??                      .SIGNATURE:	resb 1		; 4D for valid item, 5A for last item
  1092 00000001 ????                    .OWNER:		resw 1		; owner of arena item
  1093 00000003 ????                    .SIZE:		resw 1		; size in paragraphs of item
  1094                                  endstruc
  1095                                  
  1096                                  ; CAUTION: The routines in ALLOC.ASM rely on the fact that arena_signature
  1097                                  ; and arena_owner_system are all equal to zero and are contained in DI.
  1098                                  ; Change them and change ALLOC.ASM.
  1099                                  
  1100                                  arena_owner_system  EQU 0               ; free block indication
  1101                                  
  1102                                  arena_signature_normal	EQU 4Dh		; valid signature, not end of arena
  1103                                  arena_signature_end     EQU 5Ah         ; valid signature, last block in arena
  1104                                  
  1105                                  ; 04/08/2018 - Retro DOS v3.0
  1106                                  ; (ARENA.INC, MSDOS 6.0, 1991)
  1107                                  
  1108                                  FIRST_FIT	EQU	00000000B
  1109                                  BEST_FIT	EQU	00000001B
  1110                                  LAST_FIT	EQU	00000010B
  1111                                  
  1112                                  ; MSDOS 6.0
  1113                                  ;LOW_FIRST	EQU	00000000B	; M001
  1114                                  ;HIGH_FIRST	EQU	10000000B	; M001
  1115                                  ;HIGH_ONLY	EQU	01000000B	; M001
  1116                                  
  1117                                  ;LINKSTATE	EQU	00000001B	; M002
  1118                                  
  1119                                  ;HF_MASK		EQU	~HIGH_FIRST	; M001
  1120                                  ;HO_MASK		EQU	~HIGH_ONLY	; M001
  1121                                  
  1122                                  ;STRAT_MASK	EQU	HF_MASK & HO_MASK	; M001;
  1123                                  						; M026: used to mask of bits
  1124                                  						; M026: 6 & 7 of AllocMethod
  1125                                  
  1126                                  ; 07/07/2018 - Retro DOS v3.0
  1127                                  ; (MI.INC, MSDOS 6.0, 1991)
  1128                                  ; ----------------------------------------------------------------------------
  1129                                  ;BREAK <Machine instruction, flag definitions and character types>
  1130                                  
  1131                                  mi_INT		EQU	0CDh
  1132                                  mi_Long_JMP	EQU	0EAh
  1133                                  mi_Long_CALL	EQU	09Ah
  1134                                  mi_Long_RET	EQU	0CBh
  1135                                  mi_Near_RET	EQU	0C3h
  1136                                  
  1137                                  ;			xxxxoditszxaxpxc
  1138                                  f_Overflow	EQU	0000100000000000B
  1139                                  f_Direction	EQU	0000010000000000B
  1140                                  f_Interrupt	EQU	0000001000000000B
  1141                                  f_Trace 	EQU	0000000100000000B
  1142                                  f_Sign		EQU	0000000010000000B
  1143                                  f_Zero		EQU	0000000001000000B
  1144                                  f_Aux		EQU	0000000000010000B
  1145                                  f_Parity	EQU	0000000000000100B
  1146                                  f_Carry 	EQU	0000000000000001B
  1147                                  
  1148                                  ; <Standard I/O assignments>
  1149                                  
  1150                                  stdin       EQU     0
  1151                                  stdout      EQU     1
  1152                                  stderr      EQU     2
  1153                                  stdaux      EQU     3
  1154                                  stdprn      EQU     4
  1155                                  
  1156                                  ; <Xenix subfunction assignments>
  1157                                  
  1158                                  open_for_read   EQU 0
  1159                                  open_for_write  EQU 1
  1160                                  open_for_both   EQU 2
  1161                                  
  1162                                  ; 13/07/2018 - Retro DOS v3.0
  1163                                  ; (FILEMODE.INC, MSDOS 6.0, 1991)
  1164                                  
  1165                                  access_mask	EQU 0Fh ; 09/08/2018
  1166                                  
  1167                                  EXEC_OPEN	EQU 3		; access code of 3 indicates that open was 
  1168                                  				; made from exec
  1169                                  SHARING_MASK	    equ 0F0h
  1170                                  SHARING_COMPAT	    equ 000h
  1171                                  SHARING_DENY_BOTH   equ 010h
  1172                                  SHARING_DENY_WRITE  equ 020h
  1173                                  SHARING_DENY_READ   equ 030h
  1174                                  SHARING_DENY_NONE   equ 040h
  1175                                  SHARING_NET_FCB     equ 070h
  1176                                  SHARING_NO_INHERIT  equ 080h
  1177                                  
  1178                                  ; 09/07/2018 - Retro DOS v3.0
  1179                                  ; (SYSCALL.INC, MSDOS 3.3, 1987)
  1180                                  ; ----------------------------------------------------------------------------
  1181                                  
  1182                                  ; <system call definitions>
  1183                                  
  1184                                  ABORT                           EQU 0   ;  0      0
  1185                                  STD_CON_INPUT                   EQU 1   ;  1      1
  1186                                  STD_CON_OUTPUT                  EQU 2   ;  2      2
  1187                                  STD_AUX_INPUT                   EQU 3   ;  3      3
  1188                                  STD_AUX_OUTPUT                  EQU 4   ;  4      4
  1189                                  STD_PRINTER_OUTPUT              EQU 5   ;  5      5
  1190                                  RAW_CON_IO                      EQU 6   ;  6      6
  1191                                  RAW_CON_INPUT                   EQU 7   ;  7      7
  1192                                  STD_CON_INPUT_NO_ECHO           EQU 8   ;  8      8
  1193                                  STD_CON_STRING_OUTPUT           EQU 9   ;  9      9
  1194                                  STD_CON_STRING_INPUT            EQU 10  ; 10      A
  1195                                  STD_CON_INPUT_STATUS            EQU 11  ; 11      B
  1196                                  STD_CON_INPUT_FLUSH             EQU 12  ; 12      C
  1197                                  DISK_RESET                      EQU 13  ; 13      D
  1198                                  SET_DEFAULT_DRIVE               EQU 14  ; 14      E
  1199                                  FCB_OPEN                        EQU 15  ; 15      F
  1200                                  FCB_CLOSE                       EQU 16  ; 16     10
  1201                                  DIR_SEARCH_FIRST                EQU 17  ; 17     11
  1202                                  DIR_SEARCH_NEXT                 EQU 18  ; 18     12
  1203                                  FCB_DELETE                      EQU 19  ; 19     13
  1204                                  FCB_SEQ_READ                    EQU 20  ; 20     14
  1205                                  FCB_SEQ_WRITE                   EQU 21  ; 21     15
  1206                                  FCB_CREATE                      EQU 22  ; 22     16
  1207                                  FCB_RENAME                      EQU 23  ; 23     17
  1208                                  GET_DEFAULT_DRIVE               EQU 25  ; 25     19
  1209                                  SET_DMA                         EQU 26  ; 26     1A
  1210                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1211                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1212                                  ;                                                                          ;
  1213                                  GET_DEFAULT_DPB                 EQU 31  ; 31     1F
  1214                                  ;                                                                          ;
  1215                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1216                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1217                                  FCB_RANDOM_READ                 EQU 33  ; 33     21
  1218                                  FCB_RANDOM_WRITE                EQU 34  ; 34     22
  1219                                  GET_FCB_FILE_LENGTH             EQU 35  ; 35     23
  1220                                  GET_FCB_POSITION                EQU 36  ; 36     24
  1221                                  SET_INTERRUPT_VECTOR            EQU 37  ; 37     25
  1222                                  CREATE_PROCESS_DATA_BLOCK       EQU 38  ; 38     26
  1223                                  FCB_RANDOM_READ_BLOCK           EQU 39  ; 39     27
  1224                                  FCB_RANDOM_WRITE_BLOCK          EQU 40  ; 40     28
  1225                                  PARSE_FILE_DESCRIPTOR           EQU 41  ; 41     29
  1226                                  GET_DATE                        EQU 42  ; 42     2A
  1227                                  SET_DATE                        EQU 43  ; 43     2B
  1228                                  GET_TIME                        EQU 44  ; 44     2C
  1229                                  SET_TIME                        EQU 45  ; 45     2D
  1230                                  SET_VERIFY_ON_WRITE             EQU 46  ; 46     2E
  1231                                  ; Extended functionality group
  1232                                  GET_DMA                         EQU 47  ; 47     2F
  1233                                  GET_VERSION                     EQU 48  ; 48     30
  1234                                  KEEP_PROCESS                    EQU 49  ; 49     31
  1235                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1236                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1237                                  ;                                                                          ;
  1238                                  GET_DPB                         EQU 50  ; 50     32
  1239                                  ;                                                                          ;
  1240                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1241                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1242                                  SET_CTRL_C_TRAPPING             EQU 51  ; 51     33
  1243                                  GET_INDOS_FLAG                  EQU 52  ; 52     34
  1244                                  GET_INTERRUPT_VECTOR            EQU 53  ; 53     35
  1245                                  GET_DRIVE_FREESPACE             EQU 54  ; 54     36
  1246                                  CHAR_OPER                       EQU 55  ; 55     37
  1247                                  INTERNATIONAL                   EQU 56  ; 56     38
  1248                                  ; XENIX CALLS
  1249                                  ;   Directory Group
  1250                                  MKDIR                           EQU 57  ; 57     39
  1251                                  RMDIR                           EQU 58  ; 58     3A
  1252                                  CHDIR                           EQU 59  ; 59     3B
  1253                                  ;   File Group
  1254                                  CREAT                           EQU 60  ; 60     3C
  1255                                  OPEN                            EQU 61  ; 61     3D
  1256                                  CLOSE                           EQU 62  ; 62     3E
  1257                                  READ                            EQU 63  ; 63     3F
  1258                                  WRITE                           EQU 64  ; 64     40
  1259                                  UNLINK                          EQU 65  ; 65     41
  1260                                  LSEEK                           EQU 66  ; 66     42
  1261                                  CHMOD                           EQU 67  ; 67     43
  1262                                  IOCTL                           EQU 68  ; 68     44
  1263                                  XDUP                            EQU 69  ; 69     45
  1264                                  XDUP2                           EQU 70  ; 70     46
  1265                                  CURRENT_DIR                     EQU 71  ; 71     47
  1266                                  ;    Memory Group
  1267                                  ALLOC                           EQU 72  ; 72     48
  1268                                  DEALLOC                         EQU 73  ; 73     49
  1269                                  SETBLOCK                        EQU 74  ; 74     4A
  1270                                  ;    Process Group
  1271                                  EXEC                            EQU 75  ; 75     4B
  1272                                  EXIT                            EQU 76  ; 76     4C
  1273                                  _WAIT				EQU 77  ; 77     4D
  1274                                  FIND_FIRST                      EQU 78  ; 78     4E
  1275                                  ;   Special Group
  1276                                  FIND_NEXT                       EQU 79  ; 79     4F
  1277                                  ; SPECIAL SYSTEM GROUP
  1278                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1279                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1280                                  ;                                                                          ;
  1281                                  SET_CURRENT_PDB                 EQU 80  ; 80     50
  1282                                  GET_CURRENT_PDB                 EQU 81  ; 81     51
  1283                                  GET_IN_VARS                     EQU 82  ; 82     52
  1284                                  SETDPB                          EQU 83  ; 83     53
  1285                                  ;                                                                          ;
  1286                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1287                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1288                                  GET_VERIFY_ON_WRITE             EQU 84  ; 84     54
  1289                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1290                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1291                                  ;                                                                          ;
  1292                                  DUP_PDB                         EQU 85  ; 85     55
  1293                                  ;                                                                          ;
  1294                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1295                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1296                                  RENAME                          EQU 86  ; 86     56
  1297                                  FILE_TIMES                      EQU 87  ; 87     57
  1298                                  ALLOCOPER			EQU 88	; 88	 58
  1299                                  ; Network extention system calls
  1300                                  GETEXTENDEDERROR		EQU 89	; 89	 59
  1301                                  CREATETEMPFILE			EQU 90	; 90	 5A
  1302                                  CREATENEWFILE			EQU 91	; 91	 5B
  1303                                  LOCKOPER			EQU 92	; 92	 5C Lock and Unlock
  1304                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1305                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  1306                                  ;									   ;
  1307                                  SERVERCALL			EQU 93	; 93	 5D CommitAll, ServerDOSCall,
  1308                                  					;	    CloseByName, CloseUser,
  1309                                  					;	    CloseUserProcess,
  1310                                  					;	    GetOpenFileList
  1311                                  ;									   ;
  1312                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  1313                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1314                                  USEROPER			EQU 94	; 94	 5E Get and Set
  1315                                  ASSINGOPER			EQU 95	; 95	 5F On, Off, Get, Set, Cancel
  1316                                  XNAMETRANS			EQU 96	; 96	 60
  1317                                  PATHPARSE			EQU 97	; 97	 61
  1318                                  GETCURRENTPSP			EQU 98	; 98	 62
  1319                                  HONGEUL 			EQU 99	; 99	 63
  1320                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1321                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  1322                                  ;									   ;
  1323                                  SET_PRINTER_FLAG		EQU 100 ; 100	 64
  1324                                  ;									   ;
  1325                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  1326                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1327                                  GETEXTCNTRY			EQU 101 ; 101	 65 
  1328                                  GETSETCDPG			EQU 102 ; 102	 66
  1329                                  EXTHANDLE			EQU 103 ; 103	 67
  1330                                  COMMIT				EQU 104 ; 104	 68
  1331                                  
  1332                                  ; 09/07/2018 - Retro DOS v3.0
  1333                                  ; (MSDOS 6.0, SYSCALL.INC, 1987)
  1334                                  
  1335                                  ;GetSetMediaID			EQU 105 ; 105	 69
  1336                                  ;IFS_IOCTL			EQU 107 ; 107	 6B
  1337                                  ;ExtOpen 			EQU 108 ; 108	 6C
  1338                                  
  1339                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1340                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1341                                  ;                                                                          ;
  1342                                  ;ifdef ROMEXEC
  1343                                  ;ROM_FIND_FIRST			EQU 109 ; 109    6D
  1344                                  ;ROM_FIND_NEXT			EQU 110 ; 110    6E
  1345                                  ;ROM_EXCLUDE			EQU 111 ; 111	 6F		; M035
  1346                                  ;endif
  1347                                  ;                                                                          ;
  1348                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1349                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1350                                  
  1351                                  SET_OEM_HANDLER			EQU 248 ; 248    F8
  1352                                  ;OEM_C1				EQU 249 ; 249    F9
  1353                                  ;OEM_C2				EQU 250 ; 250    FA
  1354                                  ;OEM_C3				EQU 251 ; 251    FB
  1355                                  ;OEM_C4				EQU 252 ; 252    FC
  1356                                  ;OEM_C5				EQU 253 ; 253    FD
  1357                                  ;OEM_C6				EQU 254 ; 254    FE
  1358                                  ;OEM_C7				EQU 255 ; 255    FF
  1359                                  
  1360                                  ;============================================================================
  1361                                  ; VERSIONA.INC (MSDOS 3.3, 24/07/1987)
  1362                                  ;============================================================================
  1363                                  ; 08/07/2018 - Retro DOS 3.0
  1364                                  
  1365                                  MAJOR_VERSION   EQU     3
  1366                                  MINOR_VERSION   EQU     30
  1367                                  
  1368                                  ;============================================================================
  1369                                  ; DOSSYM_V211.ASM (-*-)
  1370                                  ;============================================================================
  1371                                  
  1372                                  ;DOS_MAJOR_VERSION   EQU      2
  1373                                  ;DOS_MINOR_VERSION   EQU     11
  1374                                  
  1375                                  ;============================================================================
  1376                                  ; INTNAT.INC, MSDOS 3.3, 1987
  1377                                  ;============================================================================
  1378                                  ; 09/07/2018 - Retro DOS 3.0
  1379                                  
  1380                                  ;
  1381                                  ; Current structure of the data returned by the international call
  1382                                  ;
  1383                                  
  1384                                  struc	INTERNAT_BLOCK		; (-*-) Same with MSDOS 2.11 & MSDOS 6.0
  1385                                  .Date_tim_format:
  1386 00000000 ????                    		RESW 1		; 0-USA, 1-EUR, 2-JAP
  1387                                  .Currency_sym:
  1388 00000002 ??????????              		RESB 5		; Currency Symbol 5 bytes
  1389                                  .Thous_sep:
  1390 00000007 ????                    		RESB 2		; Thousands separator 2 bytes
  1391                                  .Decimal_sep:
  1392 00000009 ????                    		RESB 2		; Decimal separator 2 bytes
  1393                                  .Date_sep:
  1394 0000000B ????                    		RESB 2		; Date separator 2 bytes
  1395                                  .Time_sep:
  1396 0000000D ????                    		RESB 2		; Time separator 2 bytes
  1397                                  .Bit_field:	
  1398 0000000F ??                      		RESB 1		; Bit values
  1399                                                                     ;   Bit 0 = 0 if currency symbol first
  1400                                                                     ;         = 1 if currency symbol last
  1401                                                                     ;   Bit 1 = 0 if No space after currency symbol
  1402                                                                     ;         = 1 if space after currency symbol
  1403                                  .Currency_cents:
  1404 00000010 ??                      		RESB 	1	; Number of places after currency dec point
  1405                                  .Time_24:
  1406 00000011 ??                      		RESB 	1	; 1 if 24 hour time, 0 if 12 hour time
  1407                                  .Map_call:
  1408 00000012 ????                    		RESW	1	; Address of case mapping call (DWORD)
  1409 00000014 ????                                    RESW	1       ; THIS IS TWO WORDS SO IT CAN BE INITIALIZED
  1410                                  				;  in pieces.
  1411                                  .Data_sep:
  1412 00000016 ????                    		RESB	2	; Data list separator character
  1413                                  .size:		
  1414                                  endstruc
  1415                                  
  1416                                  ;
  1417                                  ; Max size of the block returned by the INTERNATIONAL call
  1418                                  ;
  1419                                  internat_block_max	EQU	32
  1420                                  
  1421                                  ;============================================================================
  1422                                  ; SYSVAR.INC (MSDOS 6.0, 1991)
  1423                                  ;============================================================================
  1424                                  ; 08/07/2018 - Retro DOS v3.0
  1425                                  
  1426                                  ;SysInitVars STRUC
  1427                                  struc SYSI
  1428 00000000 ????????                .DPB:	    resd 1		; DPB chain
  1429 00000004 ????????                .SFT:	    resd 1		; SFT chain
  1430 00000008 ????????                .CLOCK:	    resd 1		; CLOCK device
  1431 0000000C ????????                .CON:	    resd 1		; CON device
  1432 00000010 ????                    .MAXSEC:    resw 1		; maximum sector size
  1433 00000012 ????????                .BUF:	    resd 1		; points to Hashinitvar
  1434 00000016 ????????                .CDS:	    resd 1		; CDS list
  1435 0000001A ????????                .FCB:	    resd 1		; FCB chain
  1436 0000001E ????                    .Keep:	    resw 1		; keep count
  1437 00000020 ??                      .NUMIO:	    resb 1		; Number of block devices
  1438 00000021 ??                      .NCDS:	    resb 1		; number of CDS's
  1439 00000022 ????????                .DEV:	    resd 1		; device list
  1440                                  ; 09/07/2018
  1441                                  ; Above parameters are described in MSDOS 3.3 SYSVAR.INC (85/04/10)
  1442                                  ; Following parameters are used with MDSOS 6.0 (Retro DOS v4.0)
  1443 00000026 ????                    .ATTR:	    resw 1		; null device attribute word
  1444 00000028 ????                    .STRAT:	    resw 1		; null device strategy entry point
  1445 0000002A ????                    .INTER:	    resw 1		; null device interrupt entry point
  1446 0000002C ????????????????        .NAME:	    resb 8		; null device name
  1447 00000034 ??                      .SPLICE:    resb 1		; TRUE -> splicees being done
  1448 00000035 ????                    .IBMDOS_SIZE: resw 1		; DOS size in paragraphs
  1449 00000037 ????????                .IFS_DOSCALL@: resd 1		; IFS DOS service rountine entry
  1450 0000003B ????????                .IFS:	    resd 1		; IFS header chain
  1451 0000003F ????????                .BUFFERS:   resw 2		; BUFFERS= values (m,n)
  1452 00000043 ??                      .BOOT_DRIVE: resb 1		; boot drive A=1 B=2,..
  1453 00000044 ??                      .DWMOVE:    resb 1		; 1 if 386 machine
  1454 00000045 ????                    .EXT_MEM:   resw 1		; Extended memory size in KB.
  1455                                  endstruc
  1456                                  ;SysInitVars ENDS
  1457                                  
  1458                                  ;This is added for more information exchange between DOS, BIOS.
  1459                                  ;DOS will give the pointer to SysInitTable in ES:DI. - J.K. 5/29/86
  1460                                  
  1461                                  ;SysInitVars_Ext struc
  1462                                  struc SYSI_EXT
  1463 00000000 ????????                .SysInitVars:	resd 1		; Points to the above structure.
  1464 00000004 ????????                .Country_Tab:	resd 1		; DOS_Country_cdpg_info
  1465                                  endstruc
  1466                                  ;SysInitVars_Ext ends
  1467                                  
  1468                                  ;============================================================================
  1469                                  ; IOCTL.INC - MSDOS 6.0 - 1991
  1470                                  ;============================================================================
  1471                                  ; 09/07/2018 - Retro DOS v3.0
  1472                                  
  1473                                  ;*** J.K.
  1474                                  ;General Guide -
  1475                                  ;Category Code:
  1476                                  ; 0... .... DOS Defined
  1477                                  ; 1... .... User defined
  1478                                  ; .xxx xxxx Code
  1479                                  
  1480                                  ;Function Code:
  1481                                  ; 0... .... Return error if unsupported
  1482                                  ; 1... .... Ignore if unsupported
  1483                                  ; .0.. .... Intercepted by DOS
  1484                                  ; .1.. .... Passed to driver
  1485                                  ; ..0. .... Sends data/commands to device
  1486                                  ; ..1. .... Quries data/info from device
  1487                                  ; ...x .... Subfunction
  1488                                  ;
  1489                                  ; Note that "Sends/queries" data bit is intended only to regularize the
  1490                                  ; function set.  It plays no critical role; some functions may contain both
  1491                                  ; command and query elements. The convention is that such commands are
  1492                                  ; defined as "sends data".
  1493                                  
  1494                                  ;*****************************;*
  1495                                  ; BLOCK DRIVERS 	      ;*
  1496                                  ;*****************************;*
  1497                                  
  1498                                  ; IOCTL SUB-FUNCTIONS
  1499                                  ; (MSDOS 3.3 + MSDOS 6.0)
  1500                                  IOCTL_GET_DEVICE_INFO	EQU	0
  1501                                  IOCTL_SET_DEVICE_INFO	EQU	1
  1502                                  IOCTL_READ_HANDLE	EQU	2
  1503                                  IOCTL_WRITE_HANDLE	EQU	3
  1504                                  IOCTL_READ_DRIVE	EQU	4
  1505                                  IOCTL_WRITE_DRIVE	EQU	5
  1506                                  IOCTL_GET_INPUT_STATUS	EQU	6
  1507                                  IOCTL_GET_OUTPUT_STATUS EQU	7
  1508                                  IOCTL_CHANGEABLE?	EQU	8
  1509                                  IOCTL_DeviceLocOrRem?	EQU	9
  1510                                  IOCTL_HandleLocOrRem?	EQU	0Ah   ;10
  1511                                  IOCTL_SHARING_RETRY	EQU	0Bh   ;11
  1512                                  GENERIC_IOCTL_HANDLE	EQU	0Ch   ;12
  1513                                  GENERIC_IOCTL		EQU	0Dh   ;13
  1514                                  ; (MSDOS 6.0 + MSDOS 3.3)
  1515                                  IOCTL_GET_DRIVE_MAP 	EQU	0Eh   ;14
  1516                                  IOCTL_SET_DRIVE_MAP	EQU	0Fh   ;15
  1517                                  ; (MSDOS 6.0)
  1518                                  IOCTL_QUERY_HANDLE	EQU	10h   ;16
  1519                                  IOCTL_QUERY_BLOCK	EQU	11h   ;17
  1520                                  
  1521                                  ; GENERIC IOCTL CATEGORY CODES
  1522                                  IOC_OTHER		EQU	0	; Other device control J.K. 4/29/86
  1523                                  IOC_SE			EQU	1	; SERIAL DEVICE CONTROL
  1524                                  IOC_TC			EQU	2	; TERMINAL CONTROL
  1525                                  IOC_SC			EQU	3	; SCREEN CONTROL
  1526                                  IOC_KC			EQU	4	; KEYBOARD CONTROL
  1527                                  IOC_PC			EQU	5	; PRINTER CONTROL
  1528                                  IOC_DC			EQU	8	; DISK CONTROL (SAME AS RAWIO)
  1529                                  
  1530                                  ; GENERIC IOCTL SUB-FUNCTIONS
  1531                                  RAWIO			EQU	8
  1532                                  
  1533                                  ; RAWIO SUB-FUNCTIONS
  1534                                  ; (MSDOS 3.3 + MSDOS 6.0)
  1535                                  GET_DEVICE_PARAMETERS	EQU	60H
  1536                                  SET_DEVICE_PARAMETERS	EQU	40H
  1537                                  READ_TRACK		EQU	61H
  1538                                  WRITE_TRACK		EQU	41H
  1539                                  VERIFY_TRACK		EQU	62H
  1540                                  FORMAT_TRACK		EQU	42H
  1541                                  ; (MSDOS 6.0)
  1542                                  GET_MEDIA_ID		EQU	66h	;AN000;AN003;changed from 63h
  1543                                  SET_MEDIA_ID		EQU	46h	;AN000;AN003;changed from 43h
  1544                                  GET_ACCESS_FLAG 	EQU	67h	;AN002;AN003;Unpublished function.Changed from 64h
  1545                                  SET_ACCESS_FLAG 	EQU	47h	;AN002;AN003;Unpublished function.Changed from 44h
  1546                                  SENSE_MEDIA_TYPE	EQU	68H	;Added for 5.00
  1547                                  
  1548                                  ; SPECIAL FUNCTION FOR GET DEVICE PARAMETERS
  1549                                  BUILD_DEVICE_BPB	EQU	000000001B
  1550                                  
  1551                                  ; SPECIAL FUNCTIONS FOR SET DEVICE PARAMETERS
  1552                                  INSTALL_FAKE_BPB	EQU	000000001B
  1553                                  ONLY_SET_TRACKLAYOUT	EQU	000000010B
  1554                                  TRACKLAYOUT_IS_GOOD	EQU	000000100B
  1555                                  
  1556                                  ; SPECIAL FUNCTION FOR FORMAT TRACK
  1557                                  ; (MSDOS 3.3 + MSDOS 6.0)
  1558                                  STATUS_FOR_FORMAT	EQU	000000001B
  1559                                  ; (MSDOS 6.0)
  1560                                  DO_FAST_FORMAT		EQU	000000010B ;AN001;
  1561                                  
  1562                                  ; CODES RETURNED FROM FORMAT STATUS CALL
  1563                                  FORMAT_NO_ROM_SUPPORT	EQU	000000001B
  1564                                  FORMAT_COMB_NOT_SUPPORTED EQU	000000010B
  1565                                  
  1566                                  ; DEVICETYPE VALUES
  1567                                  ; (MSDOS 3.3 + MSDOS 6.0)
  1568                                  MAX_SECTORS_IN_TRACK	EQU	63	; MAXIMUM SECTORS ON A DISK.(Was 40 in DOS 3.2)
  1569                                  DEV_5INCH		EQU	0
  1570                                  DEV_5INCH96TPI		EQU	1
  1571                                  DEV_3INCH720KB		EQU	2
  1572                                  DEV_8INCHSS		EQU	3
  1573                                  DEV_8INCHDS		EQU	4
  1574                                  DEV_HARDDISK		EQU	5
  1575                                  DEV_OTHER		EQU	7
  1576                                  ; (MSDOS 6.0)
  1577                                  ;DEV_3INCH1440KB	EQU	7
  1578                                  DEV_3INCH2880KB		EQU	9
  1579                                  ; Retro DOS v2.0 - 26/03/2018
  1580                                  ;;DEV_TAPE		EQU	6
  1581                                  ;;DEV_ERIMO		EQU	8
  1582                                  ;DEV_3INCH2880KB	EQU	9
  1583                                  DEV_3INCH1440KB		EQU	10
  1584                                  
  1585                                  ; (MSDOS 3.3)
  1586                                  ;MAX_DEV_TYPE		EQU	7
  1587                                  
  1588                                  ; (MSDOS 6.0)
  1589                                  MAX_DEV_TYPE		EQU	10	; MAXIMUM DEVICE TYPE THAT WE
  1590                                  					; CURRENTLY SUPPORT.
  1591                                  
  1592                                  struc A_SECTORTABLE
  1593 00000000 ????                    .ST_SECTORNUMBER:	resw	1
  1594 00000002 ????                    .ST_SECTORSIZE:		resw	1
  1595                                  .size:
  1596                                  endstruc
  1597                                  
  1598                                  ;============================================================================
  1599                                  ; DEVSYM.ASM
  1600                                  ;============================================================================
  1601                                  
  1602                                  ;SUBTTL DEVICE TABLE AND SRH DEFINITION
  1603                                  ;PAGE
  1604                                  
  1605                                  ; 07/07/2018 - Retro DOS v3.0
  1606                                  ; (DEVSYM.INC, MSDOS 6.0, 1991)
  1607                                  
  1608                                  ;**	DevSym.inc - Device Symbols
  1609                                  
  1610                                  ; The device table list has the form:
  1611                                  struc	SYSDEV
  1612 00000000 ????????                .NEXT:		resd 1		;Pointer to next device header
  1613 00000004 ????                    .ATT:		resw 1		;Attributes of the device
  1614 00000006 ????                    .STRAT:		resw 1		;Strategy entry point
  1615 00000008 ????                    .INT:		resw 1		;Interrupt entry point
  1616 0000000A ????????????????        .NAME:		resb 8		;Name of device (only first byte used for block)
  1617                                  .size:
  1618                                  endstruc
  1619                                  
  1620                                  ;
  1621                                  ; ATTRIBUTE BIT MASKS
  1622                                  ;
  1623                                  ; CHARACTER DEVICES:
  1624                                  ;
  1625                                  ; BIT 15 -> MUST BE 1
  1626                                  ;     14 -> 1 IF THE DEVICE UNDERSTANDS IOCTL CONTROL STRINGS
  1627                                  ;     13 -> 1 IF THE DEVICE SUPPORTS OUTPUT-UNTIL-BUSY
  1628                                  ;     12 -> UNUSED
  1629                                  ;     11 -> 1 IF THE DEVICE UNDERSTANDS OPEN/CLOSE
  1630                                  ;     10 -> MUST BE 0
  1631                                  ;      9 -> MUST BE 0
  1632                                  ;      8 -> UNUSED
  1633                                  ;      7 -> UNUSED
  1634                                  ;      6 -> UNUSED
  1635                                  ;      5 -> UNUSED
  1636                                  ;      4 -> 1 IF DEVICE IS RECIPIENT OF INT 29H
  1637                                  ;      3 -> 1 IF DEVICE IS CLOCK DEVICE
  1638                                  ;      2 -> 1 IF DEVICE IS NULL DEVICE
  1639                                  ;      1 -> 1 IF DEVICE IS CONSOLE OUTPUT
  1640                                  ;      0 -> 1 IF DEVICE IS CONSOLE INPUT
  1641                                  ;
  1642                                  ; BLOCK DEVICES:
  1643                                  ;
  1644                                  ; BIT 15 -> MUST BE 0
  1645                                  ;     14 -> 1 IF THE DEVICE UNDERSTANDS IOCTL CONTROL STRINGS
  1646                                  ;     13 -> 1 IF THE DEVICE DETERMINES MEDIA BY EXAMINING THE FAT ID BYTE.
  1647                                  ;	    THIS REQUIRES THE FIRST SECTOR OF THE FAT TO *ALWAYS* RESIDE IN
  1648                                  ;	    THE SAME PLACE.
  1649                                  ;     12 -> UNUSED
  1650                                  ;     11 -> 1 IF THE DEVICE UNDERSTANDS OPEN/CLOSE/REMOVABLE MEDIA
  1651                                  ;     10 -> MUST BE 0
  1652                                  ;      9 -> MUST BE 0
  1653                                  ;      8 -> UNUSED
  1654                                  ;      7 -> UNUSED
  1655                                  ;      6 -> IF DEVICE HAS SUPPORT FOR GETMAP/SETMAP OF LOGICAL DRIVES.
  1656                                  ;	    IF THE DEVICE UNDERSTANDS GENERIC IOCTL FUNCTION CALLS.
  1657                                  ;      5 -> UNUSED
  1658                                  ;      4 -> UNUSED
  1659                                  ;      3 -> UNUSED
  1660                                  ;      2 -> UNUSED
  1661                                  ;      1 -> UNUSED
  1662                                  ;      0 -> UNUSED
  1663                                  ;
  1664                                  
  1665                                  ;Attribute bit masks
  1666                                  DEVTYP  EQU     8000H           ;Bit 15 - 1  if Char, 0 if block
  1667                                  DEVIOCTL EQU    4000H           ;Bit 14 - CONTROL mode bit
  1668                                  ISFATBYDEV EQU  2000H           ;Bit 13 - Device uses FAT ID bytes, comp media.
  1669                                  
  1670                                  ; 09/07/2018 - Retro DOS
  1671                                  ; (DEVSYM.INC, MSDOS 3.3, 1987) 
  1672                                  
  1673                                  OUTTILBUSY EQU	2000H		; OUTPUT UNTIL BUSY IS ENABLED
  1674                                  ISNET	   EQU	1000H		; BIT 12 - 1 IF A NET DEVICE, 0 IF
  1675                                  				;  NOT.  CURRENTLY BLOCK ONLY.
  1676                                  DEVOPCL    EQU	0800H		; BIT 11 - 1 IF THIS DEVICE HAS
  1677                                  				;  OPEN,CLOSE AND REMOVABLE MEDIA
  1678                                  				;  ENTRY POINTS, 0 IF NOT
  1679                                  
  1680                                  EXTENTBIT  EQU	0400H		; BIT 10 - CURRENTLY 0 ON ALL DEVS
  1681                                  				;  THIS BIT IS RESERVED FOR FUTURE USE
  1682                                  				;  TO EXTEND THE DEVICE HEADER BEYOND
  1683                                  				;  ITS CURRENT FORM.
  1684                                  
  1685                                  ; NOTE BIT 9 IS CURRENTLY USED ON IBM SYSTEMS TO INDICATE "DRIVE IS SHARED".
  1686                                  ;    SEE IOCTL FUNCTION 9. THIS USE IS NOT DOCUMENTED, IT IS USED BY SOME
  1687                                  ;    OF THE UTILITIES WHICH ARE SUPPOSED TO FAIL ON SHARED DRIVES ON SERVER
  1688                                  ;    MACHINES (FORMAT,CHKDSK,RECOVER,..).
  1689                                  
  1690                                  DEV320	EQU	0040H		;BIT 6 - FOR BLOCK DEVICES, THIS
  1691                                  				;DEVICE SUPPORTS SET/GET MAP OF
  1692                                  				;LOGICAL DRIVES, AND SUPPORTS
  1693                                  				;GENERIC IOCTL CALLS.
  1694                                  				;FOR CHARACTER DEVICES, THIS
  1695                                  				;DEVICE SUPPORTS GENERIC IOCTL.
  1696                                  				;THIS IS A DOS 3.2 DEVICE DRIVER.
  1697                                  
  1698                                  ISSPEC	EQU     0010H		;Bit 4 - This device is special ; 15/03/2018
  1699                                  ;ISIBM	EQU     0010H		;Bit 4 - This device is special
  1700                                  ISCLOCK EQU     0008H           ;Bit 3 - This device is the clock device.
  1701                                  ISNULL  EQU     0004H           ;Bit 2 - This device is the null device.
  1702                                  ISCOUT  EQU     0002H           ;Bit 1 - This device is the console output.
  1703                                  ISCIN   EQU     0001H           ;Bit 0 - This device is the console input.
  1704                                  
  1705                                  ;Static Reguest Header
  1706                                  struc	SRHEAD
  1707 00000000 ??                      .REQLEN:	resb 1		;Length in bytes of request block
  1708 00000001 ??                      .REQUNIT:	resb 1		;Device unit number
  1709 00000002 ??                      .REQFUNC:	resb 1		;Type of request
  1710 00000003 ????                    .REQSTAT:	resw 1		;Status Word
  1711 00000005 ????????????????                	resb 8		;Reserved for queue links
  1712                                  .size:
  1713                                  endstruc
  1714                                  
  1715                                  ;Status word masks
  1716                                  STERR   EQU     8000H           ;Bit 15 - Error
  1717                                  STBUI   EQU     0200H           ;Bit 9 - Buisy
  1718                                  STDON   EQU     0100H           ;Bit 8 - Done
  1719                                  STECODE EQU     00FFH           ;Error code
  1720                                  WRECODE EQU     0
  1721                                  
  1722                                  ;Function codes
  1723                                  DEVINIT EQU     0               ;Initialization
  1724                                  DINITHL EQU     26              ;Size of init header
  1725                                  DEVMDCH EQU     1               ;Media check
  1726                                  DMEDHL  EQU     15              ;Size of media check header
  1727                                  DEVBPB  EQU     2               ;Get BPB
  1728                                  DEVRDIOCTL EQU  3               ;IOCTL read
  1729                                  DBPBHL  EQU     22              ;Size of Get BPB header
  1730                                  DEVRD   EQU     4               ;Read
  1731                                  DRDWRHL EQU     22              ;Size of RD/WR header
  1732                                  DEVRDND EQU     5               ;Non destructive read no wait (character devs)
  1733                                  DRDNDHL EQU     14              ;Size of non destructive read header
  1734                                  DEVIST  EQU     6               ;Input status
  1735                                  DSTATHL EQU     13              ;Size of status header
  1736                                  DEVIFL  EQU     7               ;Input flush
  1737                                  DFLSHL  EQU     15              ;Size of flush header
  1738                                  DEVWRT  EQU     8               ;Write
  1739                                  DEVWRTV EQU     9               ;Write with verify
  1740                                  DEVOST  EQU     10              ;Output status
  1741                                  DEVOFL  EQU     11              ;Output flush
  1742                                  DEVWRIOCTL EQU  12              ;IOCTL write
  1743                                  
  1744                                  ; 09/07/2018 - Retro DOS v3.0
  1745                                  ; (DEVSYM.INC, MSDOS 3.3, 1987) 
  1746                                  
  1747                                  DEVOPN	EQU	13		;DEVICE OPEN
  1748                                  DEVCLS	EQU	14		;DEVICE CLOSE
  1749                                  DOPCLHL EQU	13		;SIZE OF OPEN/CLOSE HEADER
  1750                                  DEVRMD	EQU	15		;REMOVABLE MEDIA
  1751                                  ; 07/08/2018 - Retro DOS v3.0
  1752                                  REMHL	EQU	13		;SIZE OF REMOVABLE MEDIA HEADER
  1753                                  GENIOCTL EQU	19
  1754                                  
  1755                                  ; THE NEXT THREE ARE USED IN DOS 4.0
  1756                                  ;		     20
  1757                                  ;		     21
  1758                                  ;		     22
  1759                                  DEVGETOWN      EQU   23		;GET DEVICE OWNER
  1760                                  DEVSETOWN      EQU   24		;SET DEVICE OWNER
  1761                                  OWNHL	       EQU   13		;SIZE OF DEVICE OWNER HEADER
  1762                                  
  1763                                  DEVOUT	       EQU   16		; OUTPUT UNTIL BUSY.
  1764                                  DEVOUTL        EQU   DEVWRT	; LENGTH OF OUTPUT UNTIL BUSY
  1765                                  
  1766                                  ; GENERIC IOCTL REQUEST STRUCTURE
  1767                                  ;	SEE THE DOS 4.0 DEVICE DRIVER SPEC FOR FURTHER ELABORATION.
  1768                                  ;
  1769                                  
  1770                                  struc IOCTL_REQ
  1771 00000000 <res Dh>                .SRHEAD:	resb SRHEAD.size
  1772                                  				; GENERIC IOCTL ADDITION.
  1773 0000000D ??                      .MAJORFUNCTION: resb 1		;FUNCTION CODE
  1774 0000000E ??                      .MINORFUNCTION: resb 1		;FUNCTION CATEGORY
  1775 0000000F ????                    .REG_SI:	resw 1
  1776 00000011 ????                    .REG_DI:	resw 1
  1777 00000013 ????????                .GENERICIOCTL_PACKET: resd 1	; POINTER TO DATA BUFFER
  1778                                  .size: ; 07/08/2018
  1779                                  endstruc
  1780                                  
  1781                                  ; DEFINITIONS FOR IOCTL_REQ.MINORFUNCTION
  1782                                  GEN_IOCTL_WRT_TRK EQU	40H
  1783                                  GEN_IOCTL_RD_TRK  EQU	60H
  1784                                  GEN_IOCTL_FN_TST  EQU	20H	; USED TO DIFF. BET READS AND WRTS
  1785                                  
  1786                                  ;============================================================================
  1787                                  ; ERROR.INC (MSDOS 6.0, 1991)
  1788                                  ;============================================================================
  1789                                  ; 16/07/2018 - Retro DOS v3.0 
  1790                                  
  1791                                  ;**	ERROR.INC - DOS Error Codes
  1792                                  ;
  1793                                  ;    The newer (DOS 2.0 and above) "XENIX-style" calls
  1794                                  ;    return error codes through AX. If an error occurred then
  1795                                  ;    the carry bit will be set and the error code is in AX. If no error
  1796                                  ;    occurred then the carry bit is reset and AX contains returned info.
  1797                                  ;
  1798                                  ;    Since the set of error codes is being extended as we extend the operating
  1799                                  ;    system, we have provided a means for applications to ask the system for a
  1800                                  ;    recommended course of action when they receive an error.
  1801                                  ;
  1802                                  ;    The GetExtendedError system call returns a universal error, an error
  1803                                  ;    location and a recommended course of action. The universal error code is
  1804                                  ;    a symptom of the error REGARDLESS of the context in which GetExtendedError
  1805                                  ;    is issued.
  1806                                  
  1807                                  
  1808                                  ;	2.0 error codes
  1809                                  
  1810                                  error_invalid_function		EQU	1
  1811                                  error_file_not_found		EQU	2
  1812                                  error_path_not_found		EQU	3
  1813                                  error_too_many_open_files	EQU	4
  1814                                  error_access_denied		EQU	5
  1815                                  error_invalid_handle		EQU	6
  1816                                  error_arena_trashed		EQU	7
  1817                                  error_not_enough_memory 	EQU	8
  1818                                  error_invalid_block		EQU	9
  1819                                  error_bad_environment		EQU	10
  1820                                  error_bad_format		EQU	11
  1821                                  error_invalid_access		EQU	12
  1822                                  error_invalid_data		EQU	13
  1823                                  ;**** reserved			EQU	14	; *****
  1824                                  error_invalid_drive		EQU	15
  1825                                  error_current_directory 	EQU	16
  1826                                  error_not_same_device		EQU	17
  1827                                  error_no_more_files		EQU	18
  1828                                  
  1829                                  ;	These are the universal int 24 mappings for the old INT 24 set of errors
  1830                                  
  1831                                  error_write_protect		EQU	19
  1832                                  error_bad_unit			EQU	20
  1833                                  error_not_ready 		EQU	21
  1834                                  error_bad_command		EQU	22
  1835                                  error_CRC			EQU	23
  1836                                  error_bad_length		EQU	24
  1837                                  error_seek			EQU	25
  1838                                  error_not_DOS_disk		EQU	26
  1839                                  error_sector_not_found		EQU	27
  1840                                  error_out_of_paper		EQU	28
  1841                                  error_write_fault		EQU	29
  1842                                  error_read_fault		EQU	30
  1843                                  error_gen_failure		EQU	31
  1844                                  
  1845                                  ;	the new 3.0 error codes reported through INT 24
  1846                                  
  1847                                  error_sharing_violation 	EQU	32
  1848                                  error_lock_violation		EQU	33
  1849                                  error_wrong_disk		EQU	34
  1850                                  error_FCB_unavailable		EQU	35
  1851                                  error_sharing_buffer_exceeded	EQU	36
  1852                                  error_Code_Page_Mismatched	EQU	37    ; DOS 4.00  ;AN000;
  1853                                  error_handle_EOF		EQU	38    ; DOS 4.00  ;AN000;
  1854                                  error_handle_Disk_Full		EQU	39    ; DOS 4.00  ;AN000;
  1855                                  
  1856                                  ;	New OEM network-related errors are 50-79
  1857                                  
  1858                                  error_not_supported		EQU	50
  1859                                  
  1860                                  error_net_access_denied		EQU	65	;M028
  1861                                  
  1862                                  ;	End of INT 24 reportable errors
  1863                                  
  1864                                  error_file_exists		EQU	80
  1865                                  error_DUP_FCB			EQU	81	; *****
  1866                                  error_cannot_make		EQU	82
  1867                                  error_FAIL_I24			EQU	83
  1868                                  
  1869                                  ;	New 3.0 network related error codes
  1870                                  
  1871                                  error_out_of_structures 	EQU	84
  1872                                  error_already_assigned		EQU	85
  1873                                  error_invalid_password		EQU	86
  1874                                  error_invalid_parameter 	EQU	87
  1875                                  error_NET_write_fault		EQU	88
  1876                                  error_sys_comp_not_loaded	EQU	90    ; DOS 4.00  ;AN000;
  1877                                  
  1878                                  ;	BREAK <Interrupt 24 error codes>
  1879                                  
  1880                                  ;**	Int24 Error Codes
  1881                                  
  1882                                  error_I24_write_protect 	EQU	0
  1883                                  error_I24_bad_unit		EQU	1
  1884                                  error_I24_not_ready		EQU	2
  1885                                  error_I24_bad_command		EQU	3
  1886                                  error_I24_CRC			EQU	4
  1887                                  error_I24_bad_length		EQU	5
  1888                                  error_I24_Seek			EQU	6
  1889                                  error_I24_not_DOS_disk		EQU	7
  1890                                  error_I24_sector_not_found	EQU	8
  1891                                  error_I24_out_of_paper		EQU	9
  1892                                  error_I24_write_fault		EQU	0Ah
  1893                                  error_I24_read_fault		EQU	0Bh
  1894                                  error_I24_gen_failure		EQU	0Ch
  1895                                  ; NOTE: Code 0DH is used by MT-DOS.
  1896                                  error_I24_wrong_disk		EQU	0Fh
  1897                                  
  1898                                  ;	THE FOLLOWING ARE MASKS FOR THE AH REGISTER ON Int 24
  1899                                  ;
  1900                                  ;	NOTE: ABORT is ALWAYS allowed
  1901                                  
  1902                                  Allowed_FAIL			EQU	00001000B
  1903                                  Allowed_RETRY			EQU	00010000B
  1904                                  Allowed_IGNORE			EQU	00100000B
  1905                                  
  1906                                  I24_operation			EQU	00000001B  ;Z if READ,NZ if Write
  1907                                  I24_area			EQU	00000110B  ; 00 if DOS
  1908                                  						   ; 01 if FAT
  1909                                  						   ; 10 if root DIR
  1910                                  						   ; 11 if DATA
  1911                                  I24_class			EQU	10000000B  ;Z if DISK, NZ if FAT or char
  1912                                  
  1913                                  ;	BREAK <GetExtendedError CLASSes ACTIONs LOCUSs>
  1914                                  
  1915                                  ;**	The GetExtendedError call takes an error code and returns CLASS,
  1916                                  ;	ACTION and LOCUS codes to help programs determine the proper action
  1917                                  ;	to take for error codes that they don't explicitly understand.
  1918                                  
  1919                                  ;	Values for error CLASS
  1920                                  
  1921                                  errCLASS_OutRes 	EQU	1	; Out of Resource
  1922                                  errCLASS_TempSit	EQU	2	; Temporary Situation
  1923                                  errCLASS_Auth		EQU	3	; Permission problem
  1924                                  errCLASS_Intrn		EQU	4	; Internal System Error
  1925                                  errCLASS_HrdFail	EQU	5	; Hardware Failure
  1926                                  errCLASS_SysFail	EQU	6	; System Failure
  1927                                  errCLASS_Apperr 	EQU	7	; Application Error
  1928                                  errCLASS_NotFnd 	EQU	8	; Not Found
  1929                                  errCLASS_BadFmt 	EQU	9	; Bad Format
  1930                                  errCLASS_Locked 	EQU	10	; Locked
  1931                                  errCLASS_Media		EQU	11	; Media Failure
  1932                                  errCLASS_Already	EQU	12	; Collision with Existing Item
  1933                                  errCLASS_Unk		EQU	13	; Unknown/other
  1934                                  
  1935                                  ;	Values for error ACTION
  1936                                  
  1937                                  errACT_Retry		EQU	1	; Retry
  1938                                  errACT_DlyRet		EQU	2	; Delay Retry, retry after pause
  1939                                  errACT_User		EQU	3	; Ask user to regive info
  1940                                  errACT_Abort		EQU	4	; abort with clean up
  1941                                  errACT_Panic		EQU	5	; abort immediately
  1942                                  errACT_Ignore		EQU	6	; ignore
  1943                                  errACT_IntRet		EQU	7	; Retry after User Intervention
  1944                                  
  1945                                  ;	Values for error LOCUS
  1946                                  
  1947                                  errLOC_Unk		EQU	1	; No appropriate value
  1948                                  errLOC_Disk		EQU	2	; Random Access Mass Storage
  1949                                  errLOC_Net		EQU	3	; Network
  1950                                  errLOC_SerDev		EQU	4	; Serial Device
  1951                                  errLOC_Mem		EQU	5	; Memory
  1952                                  
  1953                                  ;============================================================================
  1954                                  ; MULT.INC (MSDOS 3.3, 1987)
  1955                                  ;============================================================================
  1956                                  
  1957                                  ;Break <Critical section and Multiplex channels>
  1958                                  
  1959                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1960                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  1961                                  ;									   ;
  1962                                  ; Critical section definitions
  1963                                  ;
  1964                                  ; These below are subject to leave-all sections
  1965                                  critDisk    EQU     1			; Disk I/O critical section
  1966                                  critDevice  EQU     2			; Device I/O critical section
  1967                                  critShare   EQU     1			; Sharer I/O critical section
  1968                                  critMem     EQU     1			; memory maintenance critical section
  1969                                  critNet     EQU     5			; network critical section
  1970                                  critSFT     EQU     1			; sft table allocation
  1971                                  ; These below are not subject to leave-all sections
  1972                                  critASSIGN  EQU     8			; Assign has munged a system call
  1973                                  ;									   ;
  1974                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  1975                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1976                                  
  1977                                  ;
  1978                                  ; The current set of defined multiplex channels is (* means documented):
  1979                                  ;
  1980                                  ;   Channel(h)	Issuer		Receiver    Function
  1981                                  ;      00	server		PSPRINT     print job control
  1982                                  ;     *01	print/apps	PRINT	    Queueing of files
  1983                                  ;      02	BIOS		REDIR	    signal open/close of printers
  1984                                  ;
  1985                                  ;      05	command 	REDIR	    obtain text of net int 24 message
  1986                                  ;     *06	server/assign	ASSIGN	    Install check
  1987                                  ;
  1988                                  ;      08	external driver IBMBIO	    interface to internal routines
  1989                                  ;
  1990                                  ;      10	sharer/server	Sharer	    install check
  1991                                  ;      11	DOS/server	Redir	    install check/redirection funcs
  1992                                  ;      12	sharer/redir	DOS	    dos functions and structure maint
  1993                                  ;      13	MSNET		MSNET	    movement of NCBs
  1994                                  ;      14	DOS		NLSFUNC     down load NLS country info,DOS 3.3
  1995                                  ;      14	Apps		Popup	    DOS 4.XX popup screen functions
  1996                                  ;	  ***> NOTE <***  Yes there are 2 users of 14h but since DOS 4.XX
  1997                                  ;			  doesn't use NLSFUNC, there is no conflict
  1998                                  ;      15	Apps		MSCDEX	    CD-ROM redirector interface
  1999                                  ;      16	Winoldap (?)	WIN386	    Private Windows communication
  2000                                  ;      17	Winoldap (?)	WIN386	    Win386 clipboard interface
  2001                                  ;      18	Apps		MS-Manager  Toggle interface to manager
  2002                                  ;      19,(13h) external driver IBMBIO	    Reset_Int_13, allows installation
  2003                                  ;					    of alternative INT_13 drivers after
  2004                                  ;					    boot_up
  2005                                  ;      B0	GRAFTABL	GRAFTABL
  2006                                  ;
  2007                                  
  2008                                  MultSHARE   EQU     10h 		; sharer
  2009                                      ;	1   MFT_enter
  2010                                      ;	2   MFTClose
  2011                                      ;	3   MFTclU
  2012                                      ;	4   MFTCloseP
  2013                                      ;	5   MFTCloN
  2014                                      ;	6   set_block
  2015                                      ;	7   clr_block
  2016                                      ;	8   chk_block
  2017                                      ;	9   MFT_get
  2018                                      ;	10  ShSave
  2019                                      ;	11  ShChk
  2020                                      ;	12  ShCol
  2021                                      ;	13  ShCloseFile
  2022                                  
  2023                                  MultNET     EQU     11h 		; Network support
  2024                                      ;	1   NET_RMDIR
  2025                                      ;	2   NET_SEQ_RMDIR
  2026                                      ;	3   NET_MKDIR
  2027                                      ;	4   NET_SEQ_MKDIR
  2028                                      ;	5   NET_CHDIR
  2029                                      ;	6   NET_CLOSE
  2030                                      ;	7   NET_COMMIT
  2031                                      ;	8   NET_READ
  2032                                      ;	9   NET_WRITE
  2033                                      ;	10  NET_LOCK
  2034                                      ;	11  NET_UNLOCK
  2035                                      ;	12  NET_DISK_INFO
  2036                                      ;	13  NET_SET_FILE_ATTRIBUTE
  2037                                      ;	14  NET_SEQ_SET_FILE_ATTRIBUTE
  2038                                      ;	15  NET_GET_FILE_INFO
  2039                                      ;	16  NET_SEQ_GET_FILE_INFO
  2040                                      ;	17  NET_RENAME
  2041                                      ;	18  NET_SEQ_RENAME
  2042                                      ;	19  NET_DELETE
  2043                                      ;	20  NET_SEQ_DELETE
  2044                                      ;	21  NET_OPEN
  2045                                      ;	22  NET_SEQ_OPEN
  2046                                      ;	23  NET_CREATE
  2047                                      ;	24  NET_SEQ_CREATE
  2048                                      ;	25  NET_SEQ_SEARCH_FIRST
  2049                                      ;	26  NET_SEQ_SEARCH_NEXT
  2050                                      ;	27  NET_SEARCH_FIRST
  2051                                      ;	28  NET_SEARCH_NEXT
  2052                                      ;	29  NET_ABORT
  2053                                      ;	30  NET_ASSOPER
  2054                                      ;	31  Printer_SET_STRING
  2055                                      ;	32  NetFlushBuf
  2056                                      ;	33  NetBufWrite
  2057                                      ;	34  NetResetEnvironment
  2058                                      ;	35  NetSpoolCheck
  2059                                      ;	36  NetSpoolClose
  2060                                  
  2061                                  MultDOS     EQU     12h 		; DOS call back
  2062                                      ;	1   DOS_CLOSE
  2063                                      ;	2   RECSET
  2064                                      ;	3   Get DOSGROUP
  2065                                      ;	4   PATHCHRCMP
  2066                                      ;	5   OUT
  2067                                      ;	6   NET_I24_ENTRY
  2068                                      ;	7   PLACEBUF
  2069                                      ;	8   FREE_SFT
  2070                                      ;	9   BUFWRITE
  2071                                      ;	10  SHARE_VIOLATION
  2072                                      ;	11  SHARE_ERROR
  2073                                      ;	12  SET_SFT_MODE
  2074                                      ;	13  DATE16
  2075                                      ;	14  SETVISIT
  2076                                      ;	15  SCANPLACE
  2077                                      ;	16  SKIPVISIT
  2078                                      ;	17  StrCpy
  2079                                      ;	18  StrLen
  2080                                      ;	19  UCase
  2081                                      ;	20  POINTCOMP
  2082                                      ;	21  CHECKFLUSH
  2083                                      ;	22  SFFromSFN
  2084                                      ;	23  GetCDSFromDrv
  2085                                      ;	24  Get_User_Stack
  2086                                      ;	25  GetThisDrv
  2087                                      ;	26  DriveFromText
  2088                                      ;	27  SETYEAR
  2089                                      ;	28  DSUM
  2090                                      ;	29  DSLIDE
  2091                                      ;	30  StrCmp
  2092                                      ;	31  initcds
  2093                                      ;	32  pjfnfromhandle
  2094                                      ;	33  $NameTrans
  2095                                      ;	34  CAL_LK
  2096                                      ;	35  DEVNAME
  2097                                      ;	36  Idle
  2098                                      ;
  2099                                  NLSFUNC     EQU     14h 		; NLSFUNC CALL , DOS 3.3
  2100                                      ;	0   NLSInstall
  2101                                      ;	1   ChgCodePage
  2102                                      ;	2   GetExtInfo
  2103                                      ;	3   SetCodePage
  2104                                      ;	4   GetCntry
  2105                                      ;
  2106                                  ;FASTOPEN is not chained through INT 2F   ; DOS 3.3 F.C.
  2107                                  ;	  it calls Multdos 42 to set up an entry routine address
  2108                                      ;	0   Install status  (reserved)
  2109                                      ;	1   Lookup
  2110                                      ;	2   Insert
  2111                                      ;	3   Delete
  2112                                      ;	4   Purge	    (reserved)
  2113                                  
  2114                                  ;============================================================================
  2115                                  ; FIND.INC (MSDOS 3.3, 1987)
  2116                                  ;============================================================================
  2117                                  ; 09/07/2018 - Retro DOS v3.0
  2118                                  
  2119                                  ;Break	<find first/next buffer>
  2120                                  
  2121                                  struc find_buf
  2122 00000000 ??                      .drive:	    resb 1		; drive of search
  2123 00000001 <res Bh>                .name:	    resb 11		; formatted name
  2124 0000000C ??                      .sattr:	    resb 1		; attribute of search
  2125 0000000D ????                    .LastEnt:   resw 1		; LastEnt
  2126 0000000F ????                    .DirStart:  resw 1		; DirStart
  2127 00000011 ??                      .attr:	    resb 1		; attribute found
  2128 00000012 ????                    .time:	    resw 1		; time
  2129 00000014 ????                    .date:	    resw 1		; date
  2130 00000016 ????                    .size_l:    resw 1		; low(size)
  2131 00000018 ????                    .size_h:    resw 1		; high(size)
  2132 0000001A <res Dh>                .pname:	    resb 13		; packed name
  2133                                  .size:
  2134                                  endstruc
  2135                                  
  2136                                  ;============================================================================
  2137                                  ; DOSCNTRY.INC (MSDOS 3.3, 1987)
  2138                                  ;============================================================================
  2139                                  ; 09/07/2018 - Retro DOS v3.0
  2140                                  
  2141                                  ;Equates for COUNTRY INFORMATION.
  2142                                  SetCountryInfo	EQU	1	;country info
  2143                                  SetUcase	EQU	2	;uppercase table
  2144                                  SetLcase	EQU	3	;lowercase table (Reserved)
  2145                                  SetUcaseFile	EQU	4	;uppercase file spec table
  2146                                  SetFileList	EQU	5	;valid file character list
  2147                                  SetCollate	EQU	6	;collating sequence
  2148                                  SetDBCS 	EQU	7	;double byte character set
  2149                                  SetALL		EQU	-1	;all the entries
  2150                                  
  2151                                  
  2152                                  ;DOS country and code page information table structure.
  2153                                  ;Internally, IBMDOS gives a pointer to this table.
  2154                                  ;IBMBIO, MODE and NLSFUNC modules communicate with IBMDOS through
  2155                                  ;this structure.
  2156                                  struc  DOS_CCDPG	; DOS_country_cdpg_info
  2157 00000000 ????????????????        .ccInfo_reserved: 	resb 8	;reserved for internal use
  2158 00000008 <res 40h>               .ccPath_CountrySys:	resb 64 ;path and filename for country info
  2159 00000048 ????                    .ccSysCodePage:		resw 1	;system code page id
  2160 0000004A ????                    .ccNumber_of_entries:	resw 1  ; (default value = 5)
  2161 0000004C ??                      .ccSetUcase:		resb 1  ; (default value = SetUcase)
  2162 0000004D ????????                .ccUcase_ptr:		resd 1	;pointer to Ucase table
  2163                                  
  2164 00000051 ??                      .ccSetUcaseFile:	resb 1	; (default value = SetUcaseFile)
  2165 00000052 ????????                .ccFileUcase_ptr: 	resd 1	;pointer to File Ucase table
  2166                                  
  2167 00000056 ??                      .ccSetFileList:		resb 1 	; (default value = SetFileList)
  2168 00000057 ????????                .ccFileChar_ptr:	resd 1	;pointer to File char list table
  2169                                  
  2170 0000005B ??                      .ccSetCollate:		resb 1	; (default value = SetCollate)
  2171 0000005C ????????                .ccCollate_ptr:		resd 1	;pointer to collate table
  2172                                  
  2173 00000060 ??                      .ccSetCountryInfo:	resb 1  ; (default value = SetCountryInfo)
  2174 00000061 ????                    .ccCountryInfoLen:	resw 1	;length of country info
  2175 00000063 ????                    .ccDosCountry:		resw 1	;system country code id
  2176 00000065 ????                    .ccDosCodePage:		resw 1	;system code page id
  2177 00000067 ????                    .ccDFormat:		resw 1	;date format
  2178 00000069 ??????????              .ccCurSymbol:		resb 5	;5 byte of (currency symbol+0)
  2179 0000006E ????                    .cc1000Sep:		resb 2	;2 byte of (1000 sep. + 0)
  2180 00000070 ????                    .ccDecSep:		resb 2	;2 byte of (Decimal sep. + 0)
  2181 00000072 ????                    .ccDateSep:		resb 2	;2 byte of (date sep. + 0)
  2182 00000074 ????                    .ccTimeSep:		resb 2	;2 byte of (time sep. + 0)
  2183 00000076 ??                      .ccCFormat:		resb 1	;currency format flags
  2184 00000077 ??                      .ccCSigDigits:		resb 1	;# of digits in currency
  2185 00000078 ??                      .ccTFormat:		resb 1	;time format
  2186 00000079 ????????                .ccMono_Ptr:		resd 1	;monocase routine entry point
  2187 0000007D ????                    .ccListSep:		resb 2	;data list separator
  2188 0000007F <res Ah>                .ccReserved_area: 	resw 5	;reserved
  2189                                  .size:
  2190                                  endstruc
  2191                                  
  2192                                  ;Ucase table
  2193                                  struc CC_UCASE_TAB
  2194 00000000 ????                    .ccUcase_leng:		resw 1	; (default value = 128)
  2195 00000002 <res 80h>               .ccUcase_data:		resb 128
  2196                                  endstruc
  2197                                  
  2198                                  ;File Ucase table
  2199                                  struc CC_FILE_UCASE_TAB
  2200 00000000 ????                    .ccFileucase_leng:	resw 1	; (default value = 128)
  2201 00000002 <res 80h>               .ccFileucase_data:	resb 128
  2202                                  endstruc
  2203                                  
  2204                                  ;File char list
  2205                                  struc CC_FILE_CHAR_TAB
  2206 00000000 ????                    .ccFilechar_leng:	resw 1
  2207 00000002 <res 2Eh>               .ccFilechar_data:	resb 46
  2208                                  endstruc
  2209                                  
  2210                                  ;collate table
  2211                                  struc CC_COLLATE_TAB
  2212 00000000 ????                    .ccCollate_leng:	resw 1	; (default value = 128)
  2213 00000002 <res 100h>              .ccCollate_data:	resb 256
  2214                                  endstruc
  2215                                  
  2216                                  OLD_COUNTRY_SIZE  equ	(DOS_CCDPG.size - DOS_CCDPG.ccDFormat - 10)
  2217                                  NEW_COUNTRY_SIZE  equ	(DOS_CCDPG.size - DOS_CCDPG.ccDosCountry) 
  2218                                  
  2219                                  ; 06/08/2018
  2220                                  ; DOSCNTRY.INC (MSDOS 6.0, 1991)
  2221                                  
  2222                                  ;CAPITALIZATION equates
  2223                                  CAP_ONE_CHAR	equ	20H
  2224                                  CAP_STRING	equ	21H
  2225                                  CAP_ASCIIZ	equ	22H
  2226                                  CHECK_YES_NO	equ	23H
  2227                                  UPPER_TABLE	equ	80H
  2228                                  
  2229                                  ;NLS_YES	equ	59H  ; 'Y'
  2230                                  ;NLS_yes2	equ	79H  ; 'y' 	
  2231                                  ;NLS_NO		equ	4EH  ; 'N'	
  2232                                  ;NLS_no2	equ	6EH  ; 'n'	
  2233                                  
  2234                                  ;============================================================================
  2235                                  ; CURDIR.INC (MSDOS 3.3, 1987)
  2236                                  ;============================================================================
  2237                                  ; 09/07/2018 - Retro DOS v3.0
  2238                                  
  2239                                  ;BREAK <Current directory list structure>
  2240                                  
  2241                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2242                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2243                                  ;									   ;
  2244                                  ; CDS items are used bu the internal routines to store cluster numbers and ;
  2245                                  ; network identifiers for each logical name.  The ID field is used dually, ;
  2246                                  ; both as net ID and for a cluster number for local devices.  In the case  ;
  2247                                  ; of local devices, the cluster number will be -1 if there is a potential  ;
  2248                                  ; of the disk being changed or if the path must be recracked.  The END	   ;
  2249                                  ; field is the location of the end of the definition.  No .. is allowed    ;
  2250                                  ; past this point							   ;
  2251                                  
  2252                                  DIRSTRLEN	EQU	64+3		; Max length in bytes of directory strings
  2253                                  TEMPLEN 	EQU	DIRSTRLEN*2
  2254                                  
  2255                                  struc curdir	; curdir_list
  2256 00000000 <res 43h>               .text:		resb DIRSTRLEN		; text of assignment and curdir
  2257 00000043 ????                    .flags:		resw 1			; various flags
  2258 00000045 ????????                .devptr:	resd 1			; local pointer to DPB or net device
  2259 00000049 ????                    .ID:		resw 1			; cluster of current dir (net ID)
  2260 0000004B ????                    		resw 1
  2261 0000004D ????                    .user_word:	resw 1
  2262 0000004F ????                    .end:		resw 1			; end of assignment
  2263                                  .size:
  2264                                  endstruc
  2265                                  
  2266                                  curdirLen	EQU curdir.size		; Needed for screwed up
  2267                                  
  2268                                  %define curdir_netID curdir_ID  ; dword
  2269                                  
  2270                                  ;Flag word masks
  2271                                  curdir_isnet	EQU	1000000000000000B
  2272                                  curdir_inuse	EQU	0100000000000000B
  2273                                  curdir_splice	EQU	0010000000000000B
  2274                                  curdir_local	EQU	0001000000000000B
  2275                                  ;									   ;
  2276                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2277                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2278                                  
  2279                                  ;============================================================================
  2280                                  ; CPMFCB.INC (MSDOS 3.3, 1987)
  2281                                  ;============================================================================
  2282                                  ; 09/07/2018 - Retro DOS v3.0
  2283                                  
  2284                                  ;BREAK <File Control Block definition>
  2285                                  
  2286                                  ;
  2287                                  ; Field definition for FCBs
  2288                                  ; The FCB has the following structure:
  2289                                  ;
  2290                                  ;	+---------------------------+
  2291                                  ;	|   Drive indicator(byte)   |
  2292                                  ;	+---------------------------+
  2293                                  ;	|    Filename (8 chars)     |
  2294                                  ;	+---------------------------+
  2295                                  ;	|    Extension (3 chars)    |
  2296                                  ;	+---------------------------+
  2297                                  ;	|   Current Extent(word)    |
  2298                                  ;	+---------------------------+
  2299                                  ;	|    Record size (word)     |
  2300                                  ;	+---------------------------+
  2301                                  ;	|    File Size (2 words)    |
  2302                                  ;	+---------------------------+
  2303                                  ;	|	Date of write	    |
  2304                                  ;	+---------------------------+
  2305                                  ;	|	Time of write	    |
  2306                                  ;	+---------------------------+
  2307                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2308                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2309                                  ;									   ;
  2310                                  ;	+---------------------------+
  2311                                  ;	|   8 bytes reserved	    |
  2312                                  ;	+---------------------------+
  2313                                  ;									   ;
  2314                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2315                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2316                                  ;	|    next record number     |
  2317                                  ;	+---------------------------+
  2318                                  ;	|   random record number    |
  2319                                  ;	+---------------------------+
  2320                                  ;
  2321                                  
  2322                                  struc	SYS_FCB
  2323 00000000 ??                      .drive:	resb 1
  2324 00000001 ????????????????        .name:	resb 8
  2325 00000009 ??????                  .ext:	resb 3
  2326 0000000C ????                    .EXTENT: resw 1
  2327 0000000E ????                    .RECSIZ: resw 1			; Size of record (user settable)
  2328 00000010 ????                    .FILSIZ: resw 1			; Size of file in bytes; used with the
  2329                                  				; following word
  2330 00000012 ????                    .DRVBP:	resw 1			; BP for SEARCH FIRST and SEARCH NEXT
  2331 00000014 ????                    .FDATE:	resw 1			; Date of last writing
  2332 00000016 ????                    .FTIME:	resw 1			; Time of last writing
  2333                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2334                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2335                                  ;									   ;
  2336 00000018 ????????????????        .reserved: resb 8		; RESERVED
  2337                                  ;									   ;
  2338                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2339                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2340 00000020 ??                      .NR:	resb 1			; Next record
  2341 00000021 ????????                .RR:	resb 4			; Random record
  2342                                  endstruc
  2343                                  
  2344                                  FILDIRENT EQU SYS_FCB.FILSIZ	; Used only by SEARCH FIRST and SEARCH
  2345                                  				; NEXT
  2346                                  ; 20/07/2018
  2347                                  %define fcb_sfn	SYS_FCB.reserved ; byte
  2348                                  
  2349                                  ; Note that fcb_net_handle, fcb_nsl_drive, fcb_nsld_drive and fcb_l_drive
  2350                                  ; all must point to the same byte.  Otherwise, the FCBRegen will fail.
  2351                                  ; NOTE about this byte (fcb_nsl_drive)
  2352                                  ;   The high two bits of this byte are used as follows to indicate the FCB type
  2353                                  ;	00 means a local file or device with sharing loaded
  2354                                  ;	10 means a remote (network) file
  2355                                  ;	01 means a local file with no sharing loaded
  2356                                  ;	11 means a local device with no sharing loaded
  2357                                  
  2358                                  ; 20/07/2018
  2359                                  
  2360                                  ;
  2361                                  ; Network FCB
  2362                                  ;
  2363                                  
  2364                                  %define fcb_net_drive	SYS_FCB.reserved+1  ; byte
  2365                                  %define fcb_net_handle	SYS_FCB.reserved+2  ; word
  2366                                  %define fcb_netID	SYS_FCB.reserved+4  ; dword		
  2367                                  
  2368                                  ;
  2369                                  ; No sharing local file FCB
  2370                                  ;
  2371                                  
  2372                                  %define fcb_nsl_drive	SYS_FCB.reserved+1  ; byte
  2373                                  %define fcb_nsl_bits	SYS_FCB.reserved+2  ; byte	
  2374                                  %define fcb_nsl_firclus SYS_FCB.reserved+3  ; word	
  2375                                  %define fcb_nsl_dirsec	SYS_FCB.reserved+5  ; word
  2376                                  %define fcb_nsl_dirpos  SYS_FCB.reserved+7  ; byte
  2377                                  
  2378                                  ;
  2379                                  ; No sharing local device FCB
  2380                                  ;
  2381                                  
  2382                                  %define fcb_nsld_drive	SYS_FCB.reserved+1  ; byte	
  2383                                  %define fcb_nsld_drvptr SYS_FCB.reserved+2  ; dword
  2384                                  
  2385                                  ;
  2386                                  ; Sharing local FCB
  2387                                  ;
  2388                                  
  2389                                  %define fcb_l_drive	SYS_FCB.reserved+1  ; byte
  2390                                  %define fcb_l_firclus	SYS_FCB.reserved+2  ; word
  2391                                  %define fcb_l_mfs	SYS_FCB.reserved+4  ; word
  2392                                  %define fcb_l_attr	SYS_FCB.reserved+6  ; byte
  2393                                  
  2394                                  ;
  2395                                  ; Bogusness:  the four cases are:
  2396                                  ;
  2397                                  ;   local file	    00
  2398                                  ;   local device    40
  2399                                  ;   local sharing   C0
  2400                                  ;   network	    80
  2401                                  ;
  2402                                  ; Since sharing and network collide, we cannot use a test instruction for
  2403                                  ; deciding whether a network or a share check in involved
  2404                                  ;
  2405                                  FCBDEVICE   EQU 040h
  2406                                  FCBNETWORK  EQU 080h
  2407                                  FCBSHARE    EQU 0C0h
  2408                                  
  2409                                  ; FCBSPECIAL must be able to mask off both net and share
  2410                                  FCBSPECIAL  EQU 080h
  2411                                  FCBMASK     EQU 0C0h
  2412                                  
  2413                                  ;============================================================================
  2414                                  ; FASTOPEN.INC, MSDOS 6.0, 1991
  2415                                  ;============================================================================
  2416                                  ; 11/07/2018 - Retro DOS v3.0
  2417                                  
  2418                                  struc	FEI	; FASTOPEN_EXTENDED_INFO
  2419 00000000 ??                      .dirpos:	resb 1
  2420                                  ;.dirsec:	resd 1 ; MSDOS 6.0
  2421 00000001 ????                    .dirsec:	resw 1 ; MSDOS 3.3
  2422 00000003 ????                    .clusnum:	resw 1
  2423                                  ;.lastent:	resw 1	; for search first ; MSDOS 6.0
  2424                                  ;.dirstart:	resw 1	; for search first ; MSDOS 6.0
  2425                                  .size:
  2426                                  endstruc
  2427                                  
  2428                                  ; 23/07/2018
  2429                                  ;FASTOPEN NAME CACHING Subfunctions
  2430                                  FONC_Look_up	equ	1
  2431                                  FONC_insert	equ	2
  2432                                  FONC_delete	equ	3
  2433                                  FONC_update	equ	4
  2434                                  FONC_purge	equ	5	;reserved for the future use.
  2435                                  FONC_Rename	equ	6	;AN001
  2436                                  
  2437                                  ; 27/07/2018
  2438                                  ;FastOpen Data Structure
  2439                                  struc fastopen_entry	;Fastopen Entry pointer in DOS
  2440 00000000 ????                    .entry_size:	resw 1	; = 4	; size of the following
  2441 00000002 ????????                .name_caching:	resd 1
  2442                                  ; MSDOS 6.0
  2443                                  ;.fatchain_caching: resd 1	;reserved for future use
  2444                                  .size:
  2445                                  endstruc
  2446                                  
  2447                                  ; 27/07/2018
  2448                                  ;Equates used in DOS.
  2449                                  FastOpen_Set	       equ     00000001b
  2450                                  FastOpen_Reset	       equ     11111110b
  2451                                  Lookup_Success	       equ     00000010b
  2452                                  Lookup_Reset	       equ     11111101b
  2453                                  Special_Fill_Set       equ     00000100b
  2454                                  Special_Fill_Reset     equ     11111011b
  2455                                  No_Lookup	       equ     00001000b
  2456                                  Set_For_Search	       equ     00010000b	;DCR 167
  2457                                  
  2458                                  ; 09/08/2018 
  2459                                  ; (FASTXXXX.INC, MSDOS 6.0, 1991)
  2460                                  ; Fastxxx equates
  2461                                  FastOpen_ID	   equ	   1
  2462                                  FastSeek_ID	   equ	   2
  2463                                  Fast_yes	   equ	   10000000B	 ; fastxxx flag
  2464                                  
  2465                                  ;Structure definitions
  2466                                  ;
  2467                                  struc Fasttable_Entry	 ; Fastxxx  Entry pointer in DOS
  2468 00000000 ????                    .Fast_Entry_Num: resw 1	 ; number of entries
  2469 00000002 ????????                .FastOpen_Seek:	 resd 1	 ; fastopen & fastseek entry address
  2470                                  endstruc
  2471                                  
  2472                                  ;============================================================================
  2473                                  ; LOCK.INC, MSDOS 6.0, 1991
  2474                                  ;============================================================================
  2475                                  ; 14/07/2018 - Retro DOS v3.0
  2476                                  
  2477                                  ;**	LOCK.INC - Definitions for Record Locking
  2478                                  
  2479                                  ;**	LOCK functions
  2480                                  
  2481                                  LOCK_ALL	    equ    0
  2482                                  UNLOCK_ALL	    equ    1
  2483                                  LOCK_MUL_RANGE	    equ    2
  2484                                  UNLOCK_MUL_RANGE    equ    3
  2485                                  LOCK_READ	    equ    4
  2486                                  WRITE_UNLOCK	    equ    5
  2487                                  LOCK_ADD	    equ    6
  2488                                  
  2489                                  ;**	Structure for Lock buffer
  2490                                  
  2491                                  struc LockBuf
  2492 00000000 ????????                .Lock_position:	resd 1		; file position for LOCK
  2493 00000004 ????????                .Lock_length:	resd 1		; number of bytes to LOCK
  2494                                  endstruc
  2495                                  
  2496                                  ;============================================================================
  2497                                  ; DPL.ASM, MSDOS 6.0, 1991
  2498                                  ;============================================================================
  2499                                  ; 04/08/2018 - Retro DOS v3.0
  2500                                  
  2501                                  ; (SRVCALL.ASM)
  2502                                  
  2503                                  struc DPL
  2504 00000000 ????                    .AX:	resw	1	; AX register
  2505 00000002 ????                    .BX:	resw	1	; BX register
  2506 00000004 ????                    .CX:	resw	1	; CX register
  2507 00000006 ????                    .DX:	resw	1	; DX register
  2508 00000008 ????                    .SI:	resw	1	; SI register
  2509 0000000A ????                    .DI:	resw	1	; DI register
  2510 0000000C ????                    .DS:	resw	1	; DS register
  2511 0000000E ????                    .ES:	resw	1	; ES register
  2512 00000010 ????                    .rsrvd: resw	1	; Reserved
  2513 00000012 ????                    .UID:	resw	1	; User (Machine) ID (0 = local macine)
  2514 00000014 ????                    .PID:	resw	1	; Process ID (0 = local user PID)
  2515                                  .size:
  2516                                  endstruc
  2517                                   
  2518                                  ;============================================================================
  2519                                  ; MSDATA.ASM
  2520                                  ;============================================================================
  2521                                  ;============================================================================
  2522                                  ; MS_DATA.ASM (MSDOS 6.0, 1991) (1)
  2523                                  ;============================================================================
  2524                                  ; 16/07/2018 - Retro DOS 3.0	
  2525                                  
  2526                                  ;Break <Uninitialized data overlayed by initialization code>
  2527                                  
  2528                                  ;DOSDATA    SEGMENT WORD PUBLIC 'DATA'
  2529                                  ; Init code overlaps with data area below
  2530                                  
  2531                                  		; Offset 0358h in IBMDOS.COM (MSDOS 3.3)
  2532                                  
  2533                                  ;	I_am    TIMEBUF,6               ; Time read from clock device
  2534                                  ;	I_am    DEVIOBUF,2              ; Buffer for I/O under file assignment
  2535                                  
  2536                                  TIMEBUF		EQU 	DATASEGMENT	; Offset 0358h (in IBMDOS.COM 3.3)
  2537                                  DEVIOBUF	EQU	TIMEBUF+6
  2538                                  ;
  2539                                  ; The following areas are used as temp buffer in EXEC system call
  2540                                  ;
  2541                                  ;       I_am    OPENBUF,128             ; buffer for name operations
  2542                                  ;       I_am    RenBuf,128              ; buffer for rename destination
  2543                                  
  2544                                  OPENBUF		EQU	DEVIOBUF+2	; DATASEGMENT+8 
  2545                                  RENBUF		EQU	OPENBUF+128	; DATASEGMENT+136
  2546                                  
  2547                                  ; Buffer for search calls
  2548                                  ;        I_am    SEARCHBUF,53		; internal search buffer
  2549                                  ;        I_am    DummyCDS,curdirLen
  2550                                  
  2551                                  SEARCHBUF	EQU	RENBUF+128	; DATASEGMENT+264
  2552                                  DUMMYCDS	EQU	SEARCHBUF+53	; DATASEGMENT+317 
  2553                                  						; Offset 495h in MSDOS 3.3
  2554                                  ;
  2555                                  ; End of contiguous buffer
  2556                                  ;
  2557                                  
  2558                                  ; Temporary directory entry for use by many routines.  Device directory
  2559                                  ; entries (bogus) are built here.
  2560                                  ;
  2561                                  ;        PUBLIC  DevFCB
  2562                                  ;DEVFCB  LABEL   BYTE                    ; Uses NAME1, NAME2, combined
  2563                                  ; WARNING.. do not alter position of NAME1 relative to DEVFCB
  2564                                  ; without first examining BUILD_DEVICE_ENT. Look carefully at DOS_RENAME
  2565                                  ; as well as it is the only guy who uses NAME2 and DESTSTART.
  2566                                  
  2567                                  DEVFCB		EQU	DUMMYCDS+curdirLen ; DATASEGMENT+398
  2568                                  
  2569                                  ;	I_am    NAME1,12                ; File name buffer
  2570                                  ;       I_am    NAME2,13                ;
  2571                                  ;	I_am    DESTSTART,WORD          ;
  2572                                  ;	DB      ((SIZE DIR_ENTRY) - ($ - DEVFCB)) DUP (?)
  2573                                  
  2574                                  NAME1		EQU	DEVFCB		; Offset 04E6h in IBMDOS.COM 3.3
  2575                                  NAME2		EQU	NAME1+12	; DATASEGMENT+410
  2576                                  DESTSTART	EQU	NAME2+13	; DATASEGMENT+423
  2577                                  
  2578                                  ;
  2579                                  ; End Temporary directory entry.
  2580                                  ;
  2581                                  
  2582                                  ;       I_am    ATTRIB,BYTE             ; storage for file attributes
  2583                                  ;	I_am    EXTFCB,BYTE             ; TRUE => extended FCB in use
  2584                                  
  2585                                  ATTRIB		EQU	DEVFCB + dir_entry.size ; Offset 0506h
  2586                                  	; Offset 0507h in IBMDOS.COM (MSDOS 3.3) 
  2587                                  EXTFCB		EQU	ATTRIB+1	; DATASEGMENT+431
  2588                                  
  2589                                  ;       I_am    SATTRIB,BYTE            ; Storage for search attributes
  2590                                  ;       I_AM    open_access,BYTE        ; access of open system call
  2591                                  ;       I_am    FoundDel,BYTE           ; true => file was deleted
  2592                                  ;       I_am    Found_dev,BYTE          ; true => search found a device
  2593                                  ;       I_am    fSplice,BYTE            ; true => do a splice in transpath
  2594                                  ;       I_am    fSharing,BYTE           ; TRUE => no redirection
  2595                                  ;       I_am    SECCLUSPOS,BYTE         ; Position of first sector within cluster
  2596                                  ;       I_am    TRANS,BYTE              ;
  2597                                  ;       I_am    READOP,BYTE             ;
  2598                                  ;       I_am    THISDRV,BYTE            ;
  2599                                  ;       I_am    CLUSFAC,BYTE            ;
  2600                                  ;       I_am    CLUSSPLIT,BYTE          ;
  2601                                  ;       I_am    INSMODE,BYTE            ; true => insert mode in buffered read
  2602                                  ;       I_am    cMeta,BYTE              ; count of meta'ed components found
  2603                                  ;       I_am    VOLID,BYTE              ;
  2604                                  ;       I_am    exit_type,BYTE          ; type of exit...
  2605                                  
  2606                                  SATTRIB		EQU	EXTFCB+1	; DATASEGMENT+432
  2607                                  OPEN_ACCESS	EQU	SATTRIB+1	; DATASEGMENT+433
  2608                                  FOUNDDEL	EQU	OPEN_ACCESS+1	; DATASEGMENT+434
  2609                                  FOUND_DEV	EQU	FOUNDDEL+1	; DATASEGMENT+435
  2610                                  FSPLICE		EQU	FOUND_DEV+1	; DATASEGMENT+436
  2611                                  FSHARING	EQU	FSPLICE+1	; DATASEGMENT+437
  2612                                  SECCLUSPOS	EQU	FSHARING+1	; DATASEGMENT+438
  2613                                  TRANS		EQU	SECCLUSPOS+1	; DATASEGMENT+439
  2614                                  READOP		EQU	TRANS+1		; DATASEGMENT+440	
  2615                                  THISDRV		EQU	READOP+1	; DATASEGMENT+441
  2616                                  CLUSFAC		EQU	THISDRV+1	; DATASEGMENT+442
  2617                                  CLUSSPLIT	EQU	CLUSFAC+1	; DATASEGMENT+443
  2618                                  INSMODE		EQU	CLUSSPLIT+1	; DATASEGMENT+444
  2619                                  CMETA		EQU	INSMODE+1	; DATASEGMENT+445
  2620                                  VOLID		EQU	CMETA+1		; DATASEGMENT+446
  2621                                  EXIT_TYPE	EQU	VOLID+1		; DATASEGMENT+447
  2622                                          
  2623                                  ;	EVEN
  2624                                  
  2625                                  ; WARNING - the following two items are accessed as a word
  2626                                  
  2627                                  ;	I_am    CREATING,BYTE           ; true => creating a file
  2628                                  ;	I_am	DELALL,BYTE		; = 0 iff BUGBUG
  2629                                  ;					; = DIRFREE iff BUGBUG
  2630                                  ;	I_am    EXITHOLD,DWORD          ; Temp location for proc terminate
  2631                                  ;	I_am    user_SP,WORD            ; User SP for system call
  2632                                  ;	I_am    user_SS,WORD            ; User SS for system call
  2633                                  ;	I_am    CONTSTK,WORD            ;
  2634                                  ;	I_am    THISDPB,DWORD           ;
  2635                                  ;	I_am    CLUSSAVE,WORD           ;
  2636                                  ; MSDOS 3.3
  2637                                  ;	I_am    CLUSSEC,WORD		;	
  2638                                  ;; MSDOS 6.0
  2639                                  ;;	I_am    CLUSSEC,DWORD           ;>32mb         ; AC0000
  2640                                  
  2641                                  	; Offset 0518h in IBMDOS.COM (MSDOS 3.3) 
  2642                                  
  2643                                  CREATING	EQU	EXIT_TYPE+1 	; DATASEGMENT+448
  2644                                  	; (End of 'MOVDPB' (in MSINIT) - Offset 0519h (just after 'retf'))
  2645                                  DELALL		EQU	CREATING+1	; DATASEGMENT+449
  2646                                  EXITHOLD	EQU	DELALL+1	; DATASEGMENT+450
  2647                                  USER_SP		EQU	EXITHOLD+4	; DATASEGMENT+454
  2648                                  USER_SS		EQU	USER_SP+2	; DATASEGMENT+456
  2649                                  CONTSTK		EQU	USER_SS+2	; DATASEGMENT+458	
  2650                                  THISDPB		EQU	CONTSTK+2	; DATASEGMENT+460
  2651                                  CLUSSAVE	EQU	THISDPB+4	; DATASEGMENT+464
  2652                                  CLUSSEC		EQU	CLUSSAVE+2	; Offset 052Ah ; DATASEGENT+466
  2653                                  
  2654                                  ;       I_am    PREREAD,WORD            ; 0 means preread; 1 means optional
  2655                                  ;       I_am    FATBYT,WORD             ; Used by ALLOCATE
  2656                                  ;       I_am    FATBYTE,WORD            ; Used by $SLEAZEFUNC
  2657                                  ;       I_am    DEVPT,DWORD             ;
  2658                                  ;       I_am    THISSFT,DWORD           ; Address of user SFT
  2659                                  ;       I_am    THISCDS,DWORD           ; Address of current CDS
  2660                                  ;       I_am    THISFCB,DWORD           ; Address of user FCB
  2661                                  
  2662                                  ; MSDOS 3.3
  2663                                  PREREAD		EQU	CLUSSEC+2	; OffseT 052Ch ; DATASEGMENT+468
  2664                                  
  2665                                  ; MSDOS 6.0
  2666                                  ; PREREAD	EQU	CLUSSEC+4
  2667                                  
  2668                                  FATBYT		EQU	PREREAD+2	; DATASEGMENT+470
  2669                                  FATBYTE		EQU	FATBYT+2	; Offset 0530h ; DATASEGMENT+472
  2670                                  DEVPT		EQU	FATBYTE+2	; DATASEGMENT+474	
  2671                                  THISSFT		EQU	DEVPT+4		; Offset 0536h ; DATASEGMENT+478
  2672                                  THISCDS		EQU	THISSFT+4	; DATASEGMENT+482	
  2673                                  THISFCB		EQU	THISCDS+4	; DATASEGMENT+486
  2674                                  
  2675                                  ; DATASEGMENT+490 :  ; *!!!*
  2676                                  	; Here is offset 0542h in IBMDOS.COM, 1987 (MSDOS 3.3 kernel) 
  2677                                  ;SFN		EQU	THISFCB+4	; DATASEGMENT + 0542h - 0358h
  2678                                  
  2679                                  ;       I_am    SFN,WORD,<-1>           ; SystemFileNumber found for accessfile
  2680                                  ;       I_am    JFN,WORD                ; JobFileNumber found for accessfile
  2681                                  ;       I_am    PJFN,DWORD              ; PointerJobFileNumber found for accessfile
  2682                                  ;       I_am    WFP_START,WORD          ;
  2683                                  ;       I_am    REN_WFP,WORD            ;
  2684                                  ;       I_am    CURR_DIR_END,WORD       ;
  2685                                  ;       I_am    NEXTADD,WORD            ;
  2686                                  ;       I_am    LASTPOS,WORD            ;
  2687                                  ;       I_am    CLUSNUM,WORD            ;
  2688                                  ;       I_am    DIRSEC,DWORD            ;>32mb 		; AC0000
  2689                                  ;       I_am    DIRSTART,WORD           ;
  2690                                  ;       I_am    SECPOS,DWORD		;>32mb Position of first sector accessed
  2691                                  ;       I_am    VALSEC,DWORD		;>32mb Number of valid (previously written)
  2692                                  ;                                       ; sectors
  2693                                  ;       I_am    BYTSECPOS,WORD          ; Position of first byte within sector
  2694                                  ;       I_am    BYTPOS,4                ; Byte position in file of access
  2695                                  ;       I_am    BYTCNT1,WORD            ; No. of bytes in first sector
  2696                                  ;       I_am    BYTCNT2,WORD            ; No. of bytes in last sector
  2697                                  ;       I_am    SECCNT,WORD             ; No. of whole sectors
  2698                                  ;       I_am    ENTFREE,WORD            ;
  2699                                  ;       I_am    ENTLAST,WORD            ;
  2700                                  ;       I_am    NXTCLUSNUM,WORD         ;
  2701                                  ;       I_am    GROWCNT,DWORD           ;
  2702                                  ;       I_am    CURBUF,DWORD            ;
  2703                                  ;       I_am    CONSft,DWORD            ; SFT of console swapped guy.
  2704                                  ;       I_am    SAVEBX,WORD             ;
  2705                                  ;       I_am    SAVEDS,WORD             ;
  2706                                  ;       I_am    restore_tmp,WORD        ; return address for restore world
  2707                                  ;       I_am    NSS,WORD
  2708                                  ;       I_am    NSP,WORD	
  2709                                  
  2710                                  ;	....  [ MS_DATA.ASM (MSDOS 6.0, 1991) (2) ] ; $$$
  2711                                  
  2712                                  ;DOSDATA ENDS
  2713                                  
  2714                                  ;============================================================================
  2715                                  ; MSHEAD.ASM
  2716                                  ;============================================================================
  2717                                  
  2718                                  [BITS 16]
  2719                                  [ORG 0]
  2720                                  
  2721                                  START:
  2722 00000000 E97E73                          JMP     DOSINIT
  2723                                  
  2724                                  ;============================================================================
  2725                                  ; MSHEAD.ASM (MSDOS 6.0, 1991)
  2726                                  ;============================================================================
  2727                                  ; 16/07/2018 - Retro DOS 3.0
  2728                                  
  2729                                  	; MSDOS 6.0
  2730                                  ;	dw	PARASTART	; PARASTART = 3DE0h for MSDOS 6.0, 6.22
  2731                                  ;BioDataSeg:
  2732                                  ;	dw	0070h		; Bios data segment fixed at 70h
  2733                                  
  2734                                  	; MSDOS 3.3
  2735 00000003 0000                    	dw	0
  2736 00000005 00                      	db	0 ; 12/08/2018
  2737 00000006 42554720                	db	"BUG "
  2738 0000000A 0000                    	dw	0
  2739 0000000C 0000                    	dw	0
  2740                                  
  2741                                  ;============================================================================
  2742                                  ; MSCONST.ASM (MSDOS 6.0, 1991)
  2743                                  ;============================================================================
  2744                                  ; 16/07/2018 - Retro DOS 3.0	
  2745                                  
  2746                                  	; MSDOS 3.3
  2747                                  MYNUM:			; Offset 000Eh
  2748 0000000E 0000                    	dw	0	
  2749                                  FCBLRU: 
  2750 00000010 0000                    	dw	0
  2751                                  OpenLRU:
  2752 00000012 0000                    	dw	0
  2753                                  OEM_HANDLER: 		; Pointer to OEM handler code	
  2754 00000014 FFFFFFFF                	dd	-1
  2755                                  LeaveAddr:
  2756                                  	;dd	LeaveDOS
  2757 00000018 [BC15]                  	dw	LeaveDOS ; 12/08/2018
  2758                                  RetryCount:		; Share retries
  2759 0000001A 0300                    	dw	3
  2760                                  RetryLoop:
  2761 0000001C 0100                    	dw	1
  2762                                  LastBuffer:
  2763 0000001E FFFFFFFF                	dd	-1	; Buffer queue recency pointer
  2764                                  CONTPOS:
  2765 00000022 0000                    	dw	0	; location in buffer of next read
  2766                                  arena_head:
  2767 00000024 0000                    	dw	0	; Segment # of first arena in memory
  2768                                  
  2769                                  ;; 16/07/2018
  2770                                  ;;****************************************************************************
  2771                                  ;; NOTE: INT 21H AH=52H !  (http://stanislavs.org/helppc/int_21-52.html)
  2772                                  ;;****************************************************************************
  2773                                  ;; INT 21,52 - Get Pointer to DOS "INVARS" (Undocumented)
  2774                                  ;;
  2775                                  ;;	AH = 52h
  2776                                  ;;
  2777                                  ;;	on return:
  2778                                  ;;	ES:BX = pointer to DOS "invars", a table of pointers used by DOS.
  2779                                  ;;		Known "invars" fields follow (varies with DOS version):
  2780                                  ;;
  2781                                  ;;	Offset Size		 Description
  2782                                  ;;
  2783                                  ;;	 -12   word   sharing retry count (DOS 3.1-3.3)
  2784                                  ;;	 -10   word   sharing retry delay  (DOS 3.1-3.3)
  2785                                  ;;	  -8   dword  pointer to current disk buffer (DOS 3.x)
  2786                                  ;;	  -4   word   pointer in DOS code segment of unread CON input;
  2787                                  ;;		      0 indicates no unread input (DOS 3.x)
  2788                                  ;;	  -2   word   segment of first Memory Control Block (MCB)
  2789                                  ;;	  00   dword  pointer to first DRIVE PARAMETER TABLE (A:) in chain
  2790                                  ;;	  04   dword  pointer to DOS System File Table (SFT)
  2791                                  ;;	  08   dword  pointer to $CLOCK device driver
  2792                                  ;;	  0C   dword  pointer to CON device driver
  2793                                  ;;	  10   byte   number of logical drives in system
  2794                                  ;;	  11   word   maximum bytes/block of any block device
  2795                                  ;;	  13   dword  pointer to DOS cache buffer header
  2796                                  ;;	  17 18bytes  NUL device header, first 4 bytes of device header
  2797                                  ;;		      point to the next device in device chain
  2798                                  ;;
  2799                                  ;;****************************************************************************
  2800                                  
  2801                                  ; The following block of data is used by SYSINIT.  Do not change the order or
  2802                                  ; size of this block
  2803                                  
  2804                                  
  2805                                  ; The following block of data is used by SYSINIT. 
  2806                                  ; Do not change the order or size of this block
  2807                                  
  2808                                  ;SYSINITVAR:
  2809                                  SYSINITVARS:
  2810                                  DPBHEAD:
  2811 00000026 00000000                	dd	0	; Pointer to head of DPB-FAT list
  2812                                  SFT_ADDR:
  2813 0000002A [98000000]              	dd	SFTABL	; Pointer to first SFT table
  2814                                  BCLOCK:
  2815 0000002E 00000000                	dd	0	; The CLOCK device
  2816                                  BCON:
  2817 00000032 00000000                	dd	0	; Console device entry points
  2818                                  MAXSEC:
  2819 00000036 8000                    	dw	128	; Maximum allowed sector size
  2820                                  BUFFHEAD:
  2821 00000038 00000000                	dd	0	; Pointer to head of buffer queue
  2822                                  CDSADDR:
  2823 0000003C 00000000                	dd	0	; Pointer to curdir structure table
  2824                                  SFTFCB:
  2825 00000040 00000000                	dd	0	; pointer to FCB cache table
  2826                                  KEEPCOUNT:
  2827 00000044 0000                    	dw	0	; count of FCB opens to keep
  2828                                  NUMIO:
  2829 00000046 00                      	db	0	; Number of disk tables
  2830                                  CDSCOUNT:
  2831 00000047 00                      	db	0	; Number of CDS structures in above
  2832                                  ; A fake header for the NUL device
  2833                                  NULDEV:
  2834 00000048 00000000                	dd	0	; Link to rest of device list
  2835                                  	;dw	8004h
  2836 0000004C 0480                    	dw	DEVTYP | ISNULL	; Null device attributes
  2837 0000004E [2C16]                  	dw	SNULDEV	; Strategy entry point
  2838 00000050 [3216]                  	dw	INULDEV	; Interrupt entry point
  2839 00000052 4E554C2020202020        	db	"NUL     " ; Name of null device
  2840                                  SPLICES:
  2841 0000005A 00                      	db	0	; TRUE => splices being done
  2842                                  
  2843                                  	; MSDOS 6.0 
  2844                                  ;Special_Entries:
  2845                                  ;	dw	0	; address of special entries	;AN000;
  2846                                  ;UU_IFS_DOS_CALL:
  2847                                  ;	dd	0	; entry for IFS DOS service	;AN000;
  2848                                  ;; 
  2849                                  ;; UU_IFS_HEADER:
  2850                                  ;; 	dd	0	; IFS header chain		;AN000;
  2851                                  ;;
  2852                                  ;ChkCopyProt:
  2853                                  ;	dw	0	; M068
  2854                                  ;A20OFF_PSP:
  2855                                  ;	dw	0	; M068
  2856                                  ;BUFFERS_PARM1:
  2857                                  ;	dw	0	; value of BUFFERS= ,m 	;AN000;
  2858                                  ;BUFFERS_PARM2:
  2859                                  ;	dw	0	; value of BUFFERS= ,n 	;AN000
  2860                                  ;BOOTDRIVE:
  2861                                  ;	db	0	; the boot drive	;AN000;
  2862                                  ;DDMOVE:
  2863                                  ;	db	0 	; 1 if we need DWORD move ;AN000;
  2864                                  ;EXT_MEM_SIZE:
  2865                                  ;	dw	0	; extended memory size 	;AN000;
  2866                                  
  2867                                  ;HASHINITVAR: ; LABEL   WORD	; AN000;
  2868                                  ;;
  2869                                  ;; Replaced by next two declarations
  2870                                  ;;
  2871                                  ;;UU_BUF_HASH_PTR:
  2872                                  ;;	dd	0	; buffer Hash table addr
  2873                                  ;;UU_BUF_HASH_COUNT:
  2874                                  ;;	dw	1	; number of Hash entries
  2875                                  ;
  2876                                  ;BufferQueue:
  2877                                  ;	dd	0	; Head of the buffer Queue
  2878                                  ;DirtyBufferCount:
  2879                                  ;	dw	0	; Count of Dirty buffers in the Que
  2880                                  ;			; BUGBUG ---- change to byte
  2881                                  ;SC_CACHE_PTR:
  2882                                  ;	dd	0	; secondary cache pointer
  2883                                  ;SC_CACHE_COUNT:
  2884                                  ;	dw	0 	; secondary cache count
  2885                                  ;BuffInHMA:
  2886                                  ;	db	0	; Flag to indicate that buffs are in HMA
  2887                                  ;LoMemBuff:
  2888                                  ;	dd	0	; Ptr to intermediate buffer
  2889                                  ;			;  in Low mem when buffs are in HMA
  2890                                  ;;
  2891                                  ;; All variables which have UU_ as prefix can be reused for other
  2892                                  ;; purposes and can be renamed. All these variables were used for
  2893                                  ;; EMS support of Buffer Manager. Now they are useless for Buffer
  2894                                  ;; manager ---- MOHANS
  2895                                  ;;
  2896                                  ;
  2897                                  ;	I_am	UU_BUF_EMS_FIRST_PAGE,3,<0,0,0>  
  2898                                  ;UU_BUF_EMS_FIRST_PAGE:	
  2899                                  ;	db	0,0,0	; holds the first page above 640K
  2900                                  ;
  2901                                  ;;	I_am	UU_BUF_EMS_NPA640,WORD,<0> ; holds the number of pages 
  2902                                  ;;					   ; above 640K
  2903                                  ;;UU_BUF_EMS_NPA640:
  2904                                  ;;	dw	0			
  2905                                  ;
  2906                                  ;CL0FATENTRY:
  2907                                  ;	dw	-1	; M014:	Holds the data that
  2908                                  ;			; is used in pack/unpack rts.
  2909                                  ;			; in fat.asm if cluster 0 is specified.
  2910                                  ;			; SR;
  2911                                  ;IoStatFail:
  2912                                  ;	db	0	; IoStatFail has been added to 
  2913                                  ;			; record a fail on an I24 
  2914                                  ;			; issued from IOFUNC on a status call. 
  2915                                  ;
  2916                                  ;;***	I_am	UU_BUF_EMS_MODE,BYTE,<-1>	; EMS mode 	;AN000;
  2917                                  ;;***	I_am	UU_BUF_EMS_HANDLE,BYTE		; buffer EMS handle ;AN000;
  2918                                  ;;***	I_am	UU_BUF_EMS_PAGE_FRAME,WORD ,<-1>; EMS page frame # ;AN000;
  2919                                  ;;***	I_am	UU_BUF_EMS_SEG_CNT,WORD,<1>	; EMS seg count	;AN000;
  2920                                  ;;***	I_am	UU_BUF_EMS_PFRAME,WORD		; EMS page frame seg address ;AN000;
  2921                                  ;;***	I_am	UU_BUF_EMS_RESERV,WORD,<0> 	; reserved	;AN000;
  2922                                  ;
  2923                                  ;;***	I_am	UU_BUF_EMS_MAP_BUFF,1,<0>	; this is not used to save the 
  2924                                  ;						; state of the 	buffers page.
  2925                                  ;						; This one byte is retained to 
  2926                                  ;						; keep the size of this data 
  2927                                  ;						; block the same.;
  2928                                  ;ALLOCMSAVE:
  2929                                  ;	db	0	; M063: temp var. used to 
  2930                                  ;			; M063: save alloc method in
  2931                                  ;			; M063: msproc.asm
  2932                                  ;A20OFF_COUNT:
  2933                                  ;	db	0	; M068: indiactes the # of 
  2934                                  ;			; M068: int 21 calls for 
  2935                                  ;			; M068: which A20 is off
  2936                                  ;DOS_FLAG:
  2937                                  ;	db	0	; see DOSSYM.INC for Bit 
  2938                                  ;			; definitions
  2939                                  ;UNPACK_OFFSET:
  2940                                  ;	dw	0	; saves pointer to the start
  2941                                  ;			; of unpack code in exepatch.
  2942                                  ;			; asm.
  2943                                  ;UMBFLAG:
  2944                                  ;	db	0 	; M003: bit 0 indicates the 
  2945                                  ;			; M003: link state of the UMBs
  2946                                  ;			; M003: whether linked or not 
  2947                                  ;			; M003: to the DOS arena chain
  2948                                  ;SAVE_AX:
  2949                                  ;	dw	0	; M000: temp varibale to store ax
  2950                                  ;			; M000: in msproc.asm
  2951                                  ;UMB_HEAD:
  2952                                  ;	dw	-1	; M000: this is initialized to  
  2953                                  ;			; M000: the first umb arena by 
  2954                                  ;			; M000: BIOS sysinit.
  2955                                  ;START_ARENA:
  2956                                  ;	dw	1	; M000: this is the first arena 
  2957                                  ;			; M000: from which DOS will 
  2958                                  ;			; M000: start its scan for alloc.
  2959                                  
  2960                                  ; End of SYSINITVar block
  2961                                  
  2962                                  ; 16/07/2018
  2963                                  ; MSDOS 3.3 (& MDOS 6.0)
  2964                                  
  2965                                  ;
  2966                                  ; Sharer jump table
  2967                                  ;
  2968                                  
  2969                                  ;PUBLIC	JShare
  2970                                  	;EVEN
  2971 0000005B 90                      align 2
  2972                                  
  2973                                  JShare: ; LABEL	DWORD
  2974 0000005C [BB17]0000              		DW	BadCall,0
  2975 00000060 [BF17]0000              MFT_enter	DW	OKCall, 0  ; 1   MFT_enter
  2976 00000064 [BF17]0000              MFTClose	DW	OKCall, 0  ; 2   MFTClose
  2977 00000068 [BB17]0000              MFTclU		DW	BadCall,0  ; 3   MFTclU
  2978 0000006C [BB17]0000              MFTCloseP	DW	BadCall,0  ; 4   MFTCloseP
  2979 00000070 [BB17]0000              MFTCloN		DW	BadCall,0  ; 5   MFTCloN
  2980 00000074 [BB17]0000              set_block	DW	BadCall,0  ; 6   set_block
  2981 00000078 [BB17]0000              clr_block	DW	BadCall,0  ; 7   clr_block
  2982 0000007C [BF17]0000              chk_block	DW	OKCall, 0  ; 8   chk_block
  2983 00000080 [BB17]0000              MFT_get		DW	BadCall,0  ; 9   MFT_get
  2984 00000084 [BB17]0000              ShSave		DW	BadCall,0  ; 10  ShSave
  2985 00000088 [BB17]0000              ShChk		DW	BadCall,0  ; 11  ShChk
  2986 0000008C [BF17]0000              ShCol		DW	OKCall, 0  ; 12  ShCol
  2987 00000090 [BB17]0000              ShCloseFile	DW	BadCall,0  ; 13  ShCloseFile
  2988 00000094 [BB17]0000              ShSU		DW	BadCall,0  ; 14  ShSU
  2989                                  
  2990                                  ;============================================================================
  2991                                  ; CONST2.ASM (MSDOS 6.0, 1991)
  2992                                  ;============================================================================
  2993                                  ; 16/07/2018 - Retro DOS 3.0	
  2994                                  
  2995                                  ;Break <Initialized data and data used at DOS initialization>
  2996                                  
  2997                                  ;
  2998                                  ; We need to identify the parts of the data area that are relevant to tasks
  2999                                  ; and those that are relevant to the system as a whole.  Under 3.0, the system
  3000                                  ; data will be gathered with the system code.  The process data under 2.x will
  3001                                  ; be available for swapping and under 3.0 it will be allocated per-process.
  3002                                  ;
  3003                                  ; The data that is system data will be identified by [SYSTEM] in the comments
  3004                                  ; describing that data item.
  3005                                  
  3006                                  ;	AsmVars <Debug, Redirector, ShareF>
  3007                                  
  3008                                  ;DOSDATA SEGMENT WORD PUBLIC 'DATA'
  3009                                  
  3010                                  ;
  3011                                  ; Table of routines for assignable devices
  3012                                  ;
  3013                                  ; MSDOS allows assignment if the following standard devices:
  3014                                  ;   stdin  (usually CON input)
  3015                                  ;   stdout (usually CON output)
  3016                                  ;   auxin  (usually AUX input)
  3017                                  ;   auxout (usually AUX output)
  3018                                  ;   stdlpt (usually PRN output)
  3019                                  ;
  3020                                  ; SPECIAL NOTE:
  3021                                  ;   Status of a file is a strange idea. We choose to handle it in this manner:
  3022                                  ;   If we're not at end-of-file, then we always say that we have a character.
  3023                                  ;   Otherwise, we return ^Z as the character and set the ZERO flag. In this
  3024                                  ;   manner we can support program written under the old DOS (they use ^Z as EOF
  3025                                  ;   on devices) and programs written under the new DOS (they use the ZERO flag
  3026                                  ;   as EOF).
  3027                                  
  3028                                  ; Default SFTs for boot up
  3029                                  
  3030                                  		;PUBLIC	SFTABL
  3031                                  
  3032                                  SFTABL:	   ; LABEL   DWORD		; file table
  3033 00000098 FFFF                    		DW -1			; link to next table
  3034 0000009A FFFF                    		DW -1			; link seg to next table
  3035 0000009C 0500                    		DW sf_default_number	; Number of entries in table
  3036 0000009E 00<rep 109h>            		times (sf_default_number*sf_entry_size) db 0
  3037                                  
  3038                                  ; the next two variables relate to the position of the logical stdout/stdin
  3039                                  ; cursor. They are only meaningful when stdin/stdout are assigned to the
  3040                                  ; console.
  3041                                  
  3042                                  		; Offset 01A7h in IBMDOS.COM (MSDOS 3.3)
  3043 000001A7 00                      CARPOS:		db 0			; cursor position in stdin
  3044 000001A8 00                      STARTPOS:	db 0			; position of cursor at beginning
  3045 000001A9 00<rep 80h>             INBUF:		times 128 db 0		; general device input buffer
  3046 00000229 00<rep 83h>             CONBUF:		times 131 db 0		; The rest of INBUF and console buffer
  3047                                  		; Offset 02ACh in IBMDOS.COM (MSDOS 3.3)
  3048 000002AC 00                      PFLAG:		db 0			; printer echoing flag
  3049 000002AD 00                      VERFLG:		db 0			; Initialize with verify off
  3050 000002AE 03                      CHARCO:		db 00000011b		; Allows statchks every 4 chars...
  3051                                  switch_character:
  3052 000002AF 2F                      chSwitch:	db '/'			; UNUSED - obsolete datum, can be reused
  3053 000002B0 00                      AllocMethod:	db 0			; how to alloc first(best)last
  3054 000002B1 00                      fShare:		db 0			; TRUE => sharing installed
  3055 000002B2 01                      DIFFNAM:	db 1			; Indicates when MYNAME has changed                                        ; of buffered input call
  3056 000002B3 20<rep 10h>             MYNAME:		times 16 db 20h		; My network name
  3057                                  
  3058                                  ;
  3059                                  ; The following table is a list of addresses that the sharer patches to be
  3060                                  ; PUSH AX to enable the critical sections
  3061                                  ;
  3062                                  		; Offset 02C3h in IBMDOS.COM (MSDOS 3.3)
  3063                                  
  3064                                  ;PUBLIC	CritPatch
  3065                                  
  3066                                  CritPatch:	; LABEL WORD
  3067                                  
  3068                                  ;IRP sect,<critDisk,critDevice>
  3069                                  
  3070                                  ;IF (NOT REDIRECTOR) AND (NOT SHAREF)
  3071                                  ;
  3072                                  ;SR; Change code patch address to a variable in data segment
  3073                                  ;
  3074                                  ;       dw OFFSET DOSDATA: redir_patch
  3075                                  ;       dw OFFSET DOSDATA: redir_patch
  3076                                  ;
  3077                                  ;;hkn	Short_Addr  E&sect
  3078                                  ;;hkn	Short_Addr  L&sect
  3079                                  ;
  3080                                  ;ELSE
  3081                                  ;	DW	0
  3082                                  ;	DW	0
  3083                                  ;ENDIF
  3084                                  ;ENDM
  3085                                  ;	DW	0
  3086                                  
  3087                                  	; 16/07/2018 - Retro DOS v3.0
  3088                                  	; IBMDOS.COM (MSDOS 3.3), offset 02C3h
  3089                                   
  3090 000002C3 [6C20]                  	dw 	EcritDisk
  3091 000002C5 [7420]                  	dw 	LcritDisk			
  3092 000002C7 [7C20]                  	dw	EcritDevice
  3093 000002C9 [8420]                  	dw 	LcritDevice
  3094                                  
  3095 000002CB 0000                    	dw	0
  3096                                  
  3097                                  ;
  3098                                  ; WARNING!!!  PRINT and PSPRINT *REQUIRE* ErrorMode to precede INDOS.
  3099                                  ; Also, IBM server 1.0 requires this also.
  3100                                  ;
  3101                                  	;EVEN			; Force swap area to start on word boundry
  3102 000002CD 90                      align 2
  3103                                  	;PUBLIC	SWAP_START
  3104                                  SWAP_START:	; LABEL BYTE
  3105 000002CE 00                      ERRORMODE:	db 0		; Flag for INT 24 processing
  3106 000002CF 00                      INDOS:		db 0		; DOS status for interrupt processing
  3107 000002D0 FF                      WPERR:		db -1		; Write protect error flag
  3108 000002D1 00                      EXTERR_LOCUS:	db 0		; Extended Error Locus
  3109 000002D2 0000                    EXTERR:		dw 0		; Extended Error code
  3110                                  
  3111                                  ;WARNING Following two bytes Accessed as word in $GetExtendedError
  3112 000002D4 00                      EXTERR_ACTION:	db 0		; Extended Error Action
  3113 000002D5 00                      EXTERR_CLASS:	db 0		; Extended Error Class
  3114                                  ; end warning
  3115                                   
  3116 000002D6 00000000                EXTERRPT:	dd 0		; Extended Error pointer
  3117                                  
  3118 000002DA 8000                    DMAADD:		dw 80H		; User's disk transfer address (disp/seg)
  3119 000002DC 0000                                    dw 0	
  3120 000002DE 0000                    CurrentPDB:	dw 0		; Current process identifier
  3121 000002E0 0000                    ConC_Spsave:	dw 0		; saved SP before ^C
  3122 000002E2 0000                    exit_code:	dw 0		; exit code of last proc.
  3123 000002E4 00                      CURDRV:		db 0		; Default drive (init A)
  3124 000002E5 00                      CNTCFLAG:	db 0		; ^C check in dispatch disabled
  3125                                  ;				; F.C. 2/17/86
  3126                                  ;CPSWFLAG:	db 0		; Code Page Switching Flag  DOS 4.00
  3127                                  ;CPSWSAVE:	db 0		; copy of above in case of ABORT
  3128                                  SWAP_ALWAYS:	; 05/08/2018
  3129 000002E6 0000                    USER_IN_AX:	dw 0		; User INPUT AX value (used for
  3130                                  				;   extended error type stuff.
  3131                                  				;   NOTE: does not have Correct value on
  3132                                  				;   1-12, OEM, Get/Set CurrentPDB,
  3133                                  				;   GetExtendedError system calls)
  3134 000002E8 0000                    PROC_ID:	dw 0		; PID for sharing (0 = local)
  3135 000002EA 0000                    USER_ID:	dw 0		; Machine for sharing (0 = local)
  3136 000002EC 0000                    FirstArena:	dw 0		; first free block found
  3137 000002EE 0000                    BestArena:	dw 0		; best free block found
  3138 000002F0 0000                    LastArena:	dw 0		; last free block found
  3139 000002F2 0000                    ENDMEM:		dw 0		; End of memory used in DOSINIT
  3140 000002F4 0000                    LASTENT:	dw 0		; Last entry for directory search
  3141 000002F6 00                      FAILERR:	db 0		; NZ if user did FAIL on I 24
  3142 000002F7 00                      ALLOWED:	db 0		; Allowed I 24 answers (see allowed_)
  3143 000002F8 00                      NoSetDir:	db 0		; true -> do not set directory
  3144 000002F9 00                      DidCTRLC:	db 0		; true -> we did a ^C exit
  3145 000002FA 00                      SpaceFlag:	db 0		; true -> embedded spaces are allowed in FC
  3146                                  
  3147                                  ; Warning!  The following items are accessed as a WORD in TIME.ASM
  3148                                  	;EVEN
  3149 000002FB 90                      align 2
  3150                                  	; Offset 02FCh in IBMDOS.COM (MSDOS 3.3); 
  3151 000002FC 00                      DAY:		db 0		; Day of month
  3152 000002FD 00                      MONTH:		db 0		; Month of year
  3153 000002FE 0000                    YEAR:		dw 0		; Year (with century)
  3154 00000300 FFFF                    DAYCNT:		dw -1		; Day count from beginning of year
  3155 00000302 00                      WEEKDAY:	db 0		; Day of week
  3156                                  ; end warning
  3157                                  
  3158 00000303 00                      CONSWAP:	db 0		; TRUE => console was swapped during device read
  3159 00000304 01                      IDLEINT:	db 1		; TRUE => idle int is allowed
  3160 00000305 00                      fAborting:	db 0		; TRUE => abort in progress
  3161                                  
  3162                                  ; Combination of all device call parameters
  3163                                  	;PUBLIC	DEVCALL 	;
  3164                                  ;DEVCALL SRHEAD	<>		; basic header for disk packet
  3165                                  DEVCALL: ; 08/08/2018
  3166 00000306 00                      DEVCALL_REQLEN:  db 0 		;Length in bytes of request block
  3167 00000307 00                      DEVCALL_REQUNIT: db 0		;Device unit number
  3168 00000308 00                      DEVCALL_REQFUNC: db 0		;Type of request
  3169 00000309 0000                    DEVCALL_REQSTAT: dw 0		;Status Word
  3170 0000030B 00<rep 8h>                       times 8 db 0		;Reserved for queue links
  3171                                  
  3172                                  	;PUBLIC	CALLUNIT
  3173                                  CALLUNIT: ; LABEL   BYTE	; unit number for disk
  3174                                  CALLFLSH: ; LABEL   WORD	;
  3175 00000313 00                      CALLMED:	db 0		; media byte
  3176                                  CALLBR:	  ; LABEL   DWORD	;
  3177                                  	;PUBLIC	CALLXAD 	;
  3178                                  CALLXAD:  ; LABEL   DWORD	;
  3179 00000314 00                      CALLRBYT:	db 0		;
  3180                                  	;PUBLIC	CALLVIDM	;
  3181                                  CALLVIDM: ; LABEL   DWORD	;
  3182 00000315 00<rep 3h>              	times 3 db 0	;
  3183                                  	;PUBLIC CallBPB		;
  3184                                  CALLBPB:  ; LABEL   DWORD	;
  3185                                  CALLSCNT:			;
  3186 00000318 0000                    		dw 0		;
  3187                                  	;PUBLIC	CALLSSEC	;
  3188                                  CALLSSEC: ; LABEL   WORD	;
  3189 0000031A 0000                    		dw 0		;
  3190 0000031C 00000000                CALLVIDRW:	dd 0		;
  3191                                  ;*MSDOS 6.0
  3192                                  ;*CALLNEWSC:	dd 0		; starting sector for >32mb
  3193 00000320 00000000                CALLDEVAD:	dd 0		; stash for device entry point
  3194                                  
  3195                                  ; Same as above for I/O calls	;
  3196                                  				;
  3197                                  	;PUBLIC	IOCall		;
  3198                                  ;IOCALL	SRHEAD	<>		;
  3199                                  IOCALL:	; 07/08/2018
  3200 00000324 00                      IOCALL_REQLEN:	db 0		;Length in bytes of request block	
  3201 00000325 00                      IOCALL_REQUNIT:	db 0		;Device unit number
  3202 00000326 00                      IOCALL_REQFUNC: db 0		;Type of request
  3203 00000327 0000                    IOCALL_REQSTAT: dw 0		;Status Word
  3204 00000329 00<rep 8h>              	times 8	db 0		;Reserved for queue links
  3205                                  IOFLSH:	  ; LABEL   WORD	;
  3206                                          ;PUBLIC  IORCHR		;
  3207                                  IORCHR:	  ; LABEL   BYTE	;
  3208 00000331 00                      IOMED:		db 0		;
  3209 00000332 00000000                IOXAD:		dd 0		;
  3210 00000336 0000                    IOSCNT:		dw 0		;	
  3211 00000338 0000                    IOSSEC:		dw 0		;
  3212                                  
  3213                                  ; Call struct for DSKSTATCHK	;
  3214 0000033A 0E                      DSKSTCALL:	db DRDNDHL 	; = 14
  3215 0000033B 00                      		db 0
  3216 0000033C 05                      DSKSTCOM:	db DEVRDND	; = 5
  3217 0000033D 0000                    DSKSTST:	dw 0		;
  3218 0000033F 00<rep 8h>              	times 8	db 0		;
  3219 00000347 00                      DSKCHRET:	db 0		;
  3220                                  
  3221                                  ;hkn; short_addr has been changed to provide offset in DOSCODE.
  3222                                  ;hkn; deviobuf is in DATA seg (DOSDATA)
  3223                                  ;hkn   short_addr  DEVIOBUF	;
  3224                                  	
  3225 00000348 [5E03]                  DEVIOBUF_PTR	dw DEVIOBUF
  3226 0000034A 0000                    DOSSEG_INIT	dw 0		; DOS segment set at Init
  3227 0000034C 0100                    DSKSTCNT:	dw 1		;
  3228 0000034E 0000                    		dw 0		;
  3229                                  
  3230 00000350 00                      CreatePDB:	db 0		; flag for creating a process
  3231                                  
  3232                                  ;* MSDOS 6.0
  3233                                  ;*	;PUBLIC	Lock_Buffer	;
  3234                                  ;*Lock_Buffer: ; LABEL  DWORD	;MS. DOS Lock Buffer for Ext Lock
  3235                                  ;*	    	dd 0		;MS. position
  3236                                  ;*	 	dd 0		;MS. length
  3237                                  
  3238                                  ;hkn; the foll. was moved from dosmes.asm.
  3239                                  
  3240                                  	;EVEN
  3241 00000351 90                      align 2				; needed to maintain offsets
  3242                                  
  3243                                  	; Offset 0352h in IBMDOS.COM (MSDOS 3.3)
  3244                                  	;PUBLIC  UserNum, OEMNum
  3245                                  USERNUM:
  3246 00000352 0000                     		dw 0		; 24 bit user number
  3247 00000354 00                      		db 0
  3248                                  ;IF IBM
  3249                                  ;IF IBMCOPYRIGHT
  3250 00000355 00                      OEMNUM:		DB 0		; 8 bit OEM number
  3251                                  ;ELSE
  3252                                  ;OEMNUM:	DB 0FFh		; 8 bit OEM number
  3253                                  ;ENDIF
  3254                                  ;ELSE
  3255                                  ;OEMNUM:	DB 0FFh
  3256                                  ;ENDIF
  3257                                  
  3258                                  ; 17/07/2018
  3259                                  ;----------------------------------------------------------------------------
  3260                                  ; (MSDOS 3.3, DOSMES.INC, 1987)
  3261                                  
  3262                                  ; The next variable points to the country table for the current country
  3263                                  ;	(the table returned by the AL=0 INTERNATIONAL call).
  3264                                  
  3265 00000356 [E40F]                  CurrentCounry:	dw USTABLE			
  3266                                  
  3267                                  
  3268                                  ;DOSDATA ENDS
  3269                                  
  3270                                  ;----------------------------------------------------------------------------
  3271                                  
  3272                                  ; 16/07/2018 - Retro DOS v3.0
  3273                                  
  3274                                  align 2
  3275                                  
  3276                                  DATASEGMENT EQU $ ; 17/04/2018
  3277                                  
  3278                                  ;============================================================================
  3279                                  ; MSINIT.ASM
  3280                                  ;============================================================================
  3281                                  ; 16/07/2018 - Retro DOS v3.0
  3282                                  ;	      (MSINIT code order/reference: MSDOS 3.3, IBMDOS.COM, 1987)
  3283                                  	
  3284                                  ; 15/04/2018 - Retro DOS v2.0 (DATA adaption for NASM)
  3285                                  
  3286                                  ; TITLE MSINIT.ASM -- MS-DOS INITIALIZATION CODE
  3287                                  
  3288                                  ;       ORG     0                       ; reset to beginning of data segment
  3289                                  ; Init code below overlaps with data area
  3290                                  
  3291                                  	
  3292                                  	; Offset 0358h in IBMDOS.COM (MSDOS 3.3)
  3293                                  
  3294                                  ;INITBLOCK DB    110H DUP(0)     ; Allow for segment round up
  3295 00000358 00<rep 110h>            INITBLOCK:	TIMES 272 DB 0
  3296                                  
  3297                                  	; Offset 0468h in IBMDOS.COM (MSDOS 3.3)
  3298                                  
  3299 00000468 0000                    INITSP:		DW 0
  3300 0000046A 0000                    INITSS:		DW 0
  3301                                  ;BUFFSTRT:	DW 0
  3302                                  
  3303                                  	; Offset 046Ch in IBMDOS.COM (MSDOS 3.3)	
  3304                                  
  3305                                  ;ASSUME  CS:DOSGROUP,DS:DOSGROUP,ES:DOSGROUP,SS:NOTHING
  3306                                  ;
  3307                                  ;        EXTRN   QUIT:NEAR,IRET:NEAR,ABSDRD:FAR,ABSDWRT:FAR
  3308                                  ;        EXTRN   COMMAND:NEAR,CALL_ENTRY:NEAR
  3309                                  ;        IF      NOT IBM
  3310                                  ;        EXTRN   HEADER:BYTE
  3311                                  ;        ENDIF
  3312                                  
  3313                                  MOVDPB:
  3314                                  	; 08/07/2018 - Retro DOS v3.0
  3315                                  ; This section of code is safe from being overwritten by block move
  3316                                          ;MOV     SP,[CS:INITSP]
  3317                                          ;MOV     SS,[CS:INITSS]
  3318                                          ; 30/03/2018
  3319 0000046C 8B26[6804]              	MOV     SP,[INITSP]
  3320 00000470 8E16[6A04]                      MOV     SS,[INITSS]
  3321 00000474 F3A4                    	REP     MOVSB
  3322 00000476 FC                              CLD
  3323                                          ; 15/07/2018
  3324                                  	;MOV	[ES:DMAADD+2],DX
  3325 00000477 8916[DC02]              	MOV	[DMAADD+2],DX
  3326 0000047B 8B36[2600]                      MOV     SI,[DPBHEAD]	; Address of first DPB
  3327                                  	;MOV	[ES:DPBHEAD+2],ES
  3328 0000047F 8C06[2800]                      MOV	[DPBHEAD+2],ES
  3329                                  	;MOV	[ES:SFT_ADDR+2],ES
  3330 00000483 8C06[2C00]              	MOV     [SFT_ADDR+2],ES
  3331 00000487 8A0E[4600]                      MOV     CL,[NUMIO]	; Number of DPBs
  3332 0000048B 30ED                            XOR     CH,CH
  3333                                  SETFINDPB:
  3334                                          ; 06/07/2019
  3335                                          ;MOV	[ES:SI+1AH],ES
  3336 0000048D 8C441A                  	mov	[si+1Ah],es
  3337                                          ;MOV	BYTE [ES:SI+17H],-1  ; Never accessed before
  3338 00000490 C64417FF                	mov	byte [si+17h],-1
  3339 00000494 83C620                          ADD     SI,DPBSIZ ; 32	; Point to next DPB
  3340 00000497 E2F4                            LOOP    SETFINDPB
  3341 00000499 83EE20                          SUB     SI,DPBSIZ ; sub si,32
  3342                                  	;MOV	WORD [ES:SI+1AH],-1
  3343 0000049C C7441AFFFF              	mov	word [SI+1Ah],-1
  3344                                  
  3345                                          ; 15/07/2018 - Retro DOS v3.0
  3346                                  	;; MSDOS 2.11
  3347                                          ;MOV	DI,[BUFFSTRT]		; Set up one default buffer
  3348                                  	;MOV	[ES:BUFFHEAD+2],ES
  3349                                          ;MOV	[ES:BUFFHEAD],DI
  3350                                  	; MSDOS 3.3
  3351 000004A1 06                      	push	es ; *
  3352 000004A2 BF[8F73]                	mov	di,SYSBUF+15 
  3353 000004A5 D1DF                    	rcr	di,1
  3354 000004A7 D1EF                    	shr	di,1
  3355 000004A9 D1EF                    	shr	di,1
  3356 000004AB D1EF                    	shr	di,1
  3357 000004AD 8CC0                    	mov	ax,es
  3358 000004AF 01F8                    	add	ax,di
  3359 000004B1 8EC0                    	mov	es,ax
  3360 000004B3 31FF                    	xor	di,di
  3361 000004B5 8C06[3A00]              	mov     [BUFFHEAD+2],es
  3362 000004B9 893E[3800]              	mov     [BUFFHEAD],di
  3363                                  	;	
  3364 000004BD 26C74504FF00                    MOV     WORD [ES:DI+4],00FFH
  3365 000004C3 26C705FFFF                      MOV     WORD [ES:DI],-1
  3366 000004C8 26C74502FFFF                    MOV     WORD [ES:DI+2],-1
  3367 000004CE 07                      	pop	es; * ; 15/07/2018
  3368 000004CF 06                              PUSH    ES
  3369 000004D0 42                              INC     DX ; **			; Leave enough room for the ARENA
  3370 000004D1 8B36[F202]              	mov	si,[ENDMEM] ; 15/07/2018
  3371                                  
  3372                                  	; 11/08/2018 - Retro DOS v3.0
  3373                                          ;invoke _$DUP_PDB		; create jfns and set CurrentPDB
  3374 000004D5 E85E19                  	CALL	_$DUP_PDB
  3375 000004D8 07                              POP	ES
  3376                                  
  3377                                  	; [CurrentPDB] = dx ; **
  3378                                  	; ds = previous [CurrentPDB]
  3379                                  	; es = cs
  3380                                  ;
  3381                                  ; set up memory arena
  3382                                  ;SPECIAL NOTE FOR HIGHMEM VERSION
  3383                                  ; At this point a process header has been built where the start of the 
  3384                                  ; CONSTANTS segment as refed by CS is. From this point until the return 
  3385                                  ; below be careful about references off of CS.
  3386                                  ;
  3387                                  	; 13/04/2018 ; *
  3388                                          ;PUSH	AX ; *
  3389                                  	;MOV	AX,[CurrentPDB]
  3390                                  
  3391                                        	; 06/07/2019
  3392                                  	;MOV	AX,[CS:CurrentPDB] ; 15/03/2018
  3393                                  	;MOV    [ES:CurrentPDB],AX	; Put it in the REAL location
  3394                                          ;MOV	BYTE [ES:CreatePDB],0	; reset flag in REAL location
  3395                                          
  3396 000004D9 2EA1[DE02]              	mov	ax,[cs:CurrentPDB]  ; es = cs
  3397                                  
  3398 000004DD 48                              DEC     AX
  3399 000004DE 26A3[2400]                      MOV     [ES:arena_head],AX
  3400 000004E2 1E                              PUSH    DS
  3401 000004E3 8ED8                            MOV     DS,AX
  3402 000004E5 C60600005A                      MOV     BYTE [ARENA.SIGNATURE],arena_signature_end
  3403 000004EA C70601000000                    MOV     WORD [ARENA.OWNER],arena_owner_system
  3404 000004F0 262B06[F202]                    SUB     AX,[ES:ENDMEM]
  3405 000004F5 F7D8                            NEG     AX
  3406 000004F7 48                              DEC     AX
  3407 000004F8 A30300                          MOV     [ARENA.SIZE],AX
  3408 000004FB 1F                              POP     DS
  3409                                          ;POP	AX ; *
  3410                                  
  3411 000004FC BF[9E00]                        MOV     DI,SFTABL+SFT.SFTable	; Point to sft 0
  3412                                  	; 15/07/2018
  3413 000004FF B80300                          MOV     AX,3
  3414 00000502 AB                              STOSW		; Adjust Refcount
  3415                                  	;MOV	DI,SYSINITVAR	; 16/03/2018 (Retro DOS v2.0)
  3416 00000503 BF[3B0F]                	MOV     DI,SysInitTable ; 15/07/2018 (Retro DOS v3.0)
  3417 00000506 CB                              RETF
  3418                                  	
  3419                                  	; 18/04/2018
  3420                                  FILL1	equ	$ - DATASEGMENT
  3421                                  ; ---------------------------------------------------------------------------
  3422                                  ; 16/07/2018 - Retro DOS v3.0
  3423 00000507 00<rep 3Bh>             	times (490-FILL1) db 0	; *!!!*
  3424                                  
  3425                                  ;============================================================================
  3426                                  ; MS_DATA.ASM (MSDOS 6.0, 1991)  (2)
  3427                                  ;============================================================================
  3428                                  ; 16/07/2018 - Retro DOS 3.0	
  3429                                  
  3430                                  ;  MS_DATA.ASM (MSDOS 6.0, 1991) (1) ... $$$
  3431                                   
  3432                                  ; (continues from 'SFN' ..) - from offset 0542h in IBMDOS.COM, 1987 -
  3433                                  
  3434                                  ; DATASEGMENT + 490
  3435                                  
  3436                                  ;       I_am    SFN,WORD,<-1>           ; SystemFileNumber found for accessfile
  3437                                  ;       I_am    JFN,WORD                ; JobFileNumber found for accessfile
  3438                                  ;       I_am    PJFN,DWORD              ; PointerJobFileNumber found for accessfile
  3439                                  ;       I_am    WFP_START,WORD          ;
  3440                                  ;       I_am    REN_WFP,WORD            ;
  3441                                  ;       I_am    CURR_DIR_END,WORD       ;
  3442                                  ;       I_am    NEXTADD,WORD            ;
  3443                                  ;       I_am    LASTPOS,WORD            ;
  3444                                  ;       I_am    CLUSNUM,WORD            ;
  3445                                  ; MSDOS 3.3
  3446                                  ;	I_am	DIRSEC,WORD
  3447                                  ;; MSDOS 6.0
  3448                                  ;;      I_am    DIRSEC,DWORD            ;>32mb		; AC0000
  3449                                  ;       I_am    DIRSTART,WORD           ;
  3450                                  ;       I_am    SECPOS,DWORD		;>32mb Position of first sector accessed
  3451                                  ;       I_am    VALSEC,DWORD		;>32mb Number of valid (previously written)
  3452                                  ;                                       ; sectors
  3453                                  ;       I_am    BYTSECPOS,WORD          ; Position of first byte within sector
  3454                                  ;       I_am    BYTPOS,4                ; Byte position in file of access
  3455                                  ;       I_am    BYTCNT1,WORD            ; No. of bytes in first sector
  3456                                  ;       I_am    BYTCNT2,WORD            ; No. of bytes in last sector
  3457                                  ;       I_am    SECCNT,WORD             ; No. of whole sectors
  3458                                  
  3459 00000542 FFFF                    SFN:		dw -1
  3460 00000544 0000                    JFN:		dw 0
  3461 00000546 00000000                PJFN:		dd 0
  3462 0000054A 0000                    WFP_START: 	dw 0
  3463 0000054C 0000                    REN_WFP: 	dw 0
  3464 0000054E 0000                    CURR_DIR_END: 	dw 0
  3465 00000550 0000                    NEXTADD: 	dw 0
  3466 00000552 0000                    LASTPOS: 	dw 0
  3467 00000554 0000                    CLUSNUM: 	dw 0
  3468                                  ; MSDOS 3.3
  3469 00000556 0000                    DIRSEC: 	dw 0
  3470                                  ; MSDOS 6.0
  3471                                  ;DIRSEC:	dd 0
  3472 00000558 0000                    DIRSTART: 	dw 0
  3473                                  ; MSDOS 3.3
  3474 0000055A 0000                    SECPOS: 	dw 0
  3475                                  ; MSDOS 6.0
  3476                                  ;SECPOS: 	dd 0
  3477                                  ; MSDOS 3.3
  3478 0000055C 0000                    VALSEC: 	dw 0
  3479                                  ; MSDOS 6.0
  3480                                  ;VALSEC: 	dd 0
  3481 0000055E 0000                    BYTSECPOS: 	dw 0
  3482 00000560 00000000                BYTPOS:		dd 0
  3483 00000564 0000                    BYTCNT1: 	dw 0
  3484 00000566 0000                    BYTCNT2: 	dw 0
  3485 00000568 0000                    SECCNT: 	dw 0
  3486                                  
  3487                                  	; Offset 056Ah in IBMDOS.COM (MSDOS 3.3)
  3488                                  ; DATASEGMENT + 530 (in Retro DOS v3.0)
  3489                                  
  3490                                  ;       I_am    ENTFREE,WORD            ;
  3491                                  ;       I_am    ENTLAST,WORD            ;
  3492                                  ;       I_am    NXTCLUSNUM,WORD         ;
  3493                                  ;       I_am    GROWCNT,DWORD           ;
  3494                                  ;       I_am    CURBUF,DWORD            ;
  3495                                  ;       I_am    CONSft,DWORD            ; SFT of console swapped guy.
  3496                                  ;       I_am    SAVEBX,WORD             ;
  3497                                  ;       I_am    SAVEDS,WORD             ;
  3498                                  ;       I_am    restore_tmp,WORD        ; return address for restore world
  3499                                  ;       I_am    NSS,WORD
  3500                                  ;       I_am    NSP,WORD
  3501                                  
  3502 0000056A 0000                    ENTFREE:	dw 0
  3503 0000056C 0000                    ENTLAST:	dw 0
  3504 0000056E 0000                    NXTCLUSNUM:	dw 0
  3505 00000570 00000000                GROWCNT:	dd 0
  3506 00000574 00000000                CURBUF:		dd 0
  3507 00000578 00000000                CONSFT:		dd 0
  3508 0000057C 0000                    SAVEBX:		dw 0
  3509 0000057E 0000                    SAVEDS:		dw 0
  3510 00000580 0000                    RESTORE_TMP:	dw 0
  3511 00000582 0000                    NSS:		dw 0
  3512 00000584 0000                    NSP:		dw 0	 ; Offset 0584h in IBMDOS.COM (MSDOS 3.3)
  3513                                  
  3514                                  ; DATASEGMENT+558 :  ; *!!!*
  3515                                  	; Here is offset 0586h in IBMDOS.COM, 1987 (MSDOS 3.3 kernel) 
  3516                                  
  3517                                  ; MSDOS 6.0
  3518                                  ;       I_am    EXTOPEN_FLAG,WORD,<0>   ;FT. extended open input flag       ;AN000;
  3519                                  ;       I_am    EXTOPEN_ON,BYTE,<0>     ;FT. extended open conditional flag ;AN000;
  3520                                  ;       I_am    EXTOPEN_IO_MODE,WORD,<0>;FT. extended open io mode          ;AN000;
  3521                                  ;       I_am    SAVE_DI,WORD            ;FT. extended open saved DI         ;AN000;
  3522                                  ;       I_am    SAVE_ES,WORD            ;FT. extended open saved ES         ;AN000;
  3523                                  ;       I_am    SAVE_DX,WORD            ;FT. extended open saved DX         ;AN000;
  3524                                  ;       I_am    SAVE_CX,WORD            ;FT. extended open saved CX         ;AN000;
  3525                                  ;       I_am    SAVE_BX,WORD            ;FT. extended open saved BX         ;AN000;
  3526                                  ;       I_am    SAVE_SI,WORD            ;FT. extended open saved SI         ;AN000;
  3527                                  ;       I_am    SAVE_DS,WORD            ;FT. extended open saved DS         ;AN000;
  3528                                  
  3529                                  ;	HIGH_SECTOR is a hack to allow passing 32-bit sector numbers where
  3530                                  ;	we used to just pass 16 bits in a register.  Now High_SECTOR holds
  3531                                  ;	the high 16, the low 16 are still in the register.
  3532                                  ;
  3533                                  ;       I_am    HIGH_SECTOR,WORD,<0>    ;>32mb higher sector #		    ;AN000;
  3534                                  ;
  3535                                  ;       ;I_am    UU_HIGH_SECTOR_TEMP,WORD,<0> ;M019: Unused
  3536                                  ;       I_am    OffsetMagicPatch,WORD,<offset MagicPatch> ;scottq 8/6/92
  3537                                  ;                                                         ;see dos\mpatch.asm
  3538                                  ;
  3539                                  ;       I_am    DISK_FULL,BYTE          ;>32mb indicating disk full when 1  ;AN000;
  3540                                  ;       I_am    TEMP_VAR,WORD           ; temporary variable for everyone   ;AN000;
  3541                                  ;       I_am    TEMP_VAR2,WORD          ; temporary variable 2 for everyone ;AN000;
  3542                                  ;       I_am    DrvErr,BYTE             ; used to save drive error          ;AN000;
  3543                                  ;       I_am    DOS34_FLAG,WORD,<0>     ; common flag for DOS 3.4           ;AN000;
  3544                                  ;       I_am    NO_FILTER_PATH,DWORD    ; pointer to orignal path           ;AN000;
  3545                                  ;       I_am    NO_FILTER_DPATH,DWORD   ; pointer to orignal path of destination;AN000;
  3546                                  ;; M008
  3547                                  ;       I_am   AbsRdWr_SS,WORD         ; INT 25/26 user stack segment
  3548                                  ;       I_am   AbsRdWr_SP,WORD         ; INT 25/26 user stack offset
  3549                                  ;       I_am   UU_Callback_flag,BYTE,<0>  ; Unused
  3550                                  ;; M008
  3551                                   
  3552                                  ; make those pushes fast!!!
  3553                                  	;.EVEN
  3554                                  align 2
  3555                                  
  3556                                  ; MSDOS 3.3 ($ MSDOS 6.0)
  3557                                  StackSize equ 180h			; gross but effective
  3558                                  
  3559                                  ;;;StackSize = 300h			; This is a "trial" change IBM hasn't
  3560                                  ;;;					; made up their minds about
  3561                                   
  3562                                  ;
  3563                                  ; WARNING!!!! DskStack may grow into AUXSTACK due to interrupt service.
  3564                                  ; This is NO problem as long as AUXSTACK comes immediately before DSKSTACK
  3565                                  ;
  3566                                   
  3567                                          ;PUBLIC  RENAMEDMA,AuxStack,DskStack,IOStack
  3568                                  RENAMEDMA:  ; LABEL   BYTE		; See DOS_RENAME
  3569                                  	;DB	StackSize DUP (?)       ;
  3570 00000586 00<rep 180h>            	times	StackSize db 0
  3571                                  
  3572                                  AUXSTACK:   ; LABEL   BYTE		;  Offset 0706h in IBMDOS.COM, 1987
  3573                                   	;DB	StackSize DUP (?)       ;
  3574 00000706 00<rep 180h>            	times	StackSize db 0
  3575                                  DSKSTACK:   ; LABEL   BYTE		;  Offset 0886h in IBMDOS.COM, 1987
  3576                                   	;DB	StackSize DUP (?)       ;
  3577 00000886 00<rep 180h>            	times	StackSize db 0
  3578                                  IOSTACK:    ; LABEL   BYTE		;  Offset 0A06h in IBMDOS.COM, 1987
  3579                                   
  3580                                  ; patch space for Boca folks.
  3581                                  ; Say What????!!! This does NOT go into the swappable area!
  3582                                  ; NOTE: We include the decl of ibmpatch in ms-dos even though it is not needed.
  3583                                  ;       This allows the REDIRector to work on either IBM or MS-DOS.
  3584                                   
  3585                                  ;PUBLIC  IBMPATCH
  3586                                  ;IBMPATCH label byte
  3587                                  ;	I_am    PRINTER_FLAG,BYTE,<0>   ; status of PRINT utility
  3588                                  ;	I_am    VOLCHNG_FLAG,BYTE,<0>   ; true if volume label created
  3589                                  ;	I_am    VIRTUAL_OPEN,BYTE,<0>   ; non-zero if we opened a virtual file
  3590                                  
  3591                                  IBMPATCH:
  3592 00000A06 00                      PRINTER_FLAG:	db 0
  3593 00000A07 00                      VOLCHNG_FLAG:	db 0
  3594 00000A08 00                      VIRTUAL_OPEN:	db 0
  3595                                  
  3596                                  ; MSDOS 6.0
  3597                                  ;; Following 4 variables moved to MSDATA.asm from MSTABLE.asm (P4986)
  3598                                  ;      I_am     FSeek_drive,BYTE        ;AN000; fastseek drive #
  3599                                  ;      I_am     FSeek_firclus,WORD      ;AN000; fastseek first cluster #
  3600                                  ;      I_am     FSeek_logclus,WORD      ;AN000; fastseek logical cluster #
  3601                                  ;      I_am     FSeek_logsave,WORD      ;AN000; fastseek returned log clus #
  3602                                  ;      I_am     UU_ACT_PAGE,WORD,<-1>   ;;;;;;; ;BL ; active EMS page ;AN000;
  3603                                  ;      I_am     TEMP_DOSLOC,WORD,<-1>   ;stores the temporary location of dos
  3604                                  					;at SYSINIT time.
  3605                                  ;SWAP_END LABEL   BYTE
  3606                                  ;PUBLIC  SWAP_END
  3607                                  
  3608                                  SWAP_END:
  3609                                   
  3610                                  ;; THE FOLLOWING BYTE MUST BE HERE, IMMEDIATELY FOLLOWING SWAP_END. IT CANNOT
  3611                                  ;;   BE USED. If the size of the swap data area is ODD, it will be rounded up
  3612                                  ;;   to include this byte.
  3613                                  ;       DB      ?
  3614                                  
  3615 00000A09 00                      	db	0
  3616                                   
  3617                                  ;;hkn;	DB      (512+80+32-(SWAP_END-ibmpatch)) DUP (?)
  3618                                  
  3619                                  ;DOSDATA    ENDS
  3620                                  
  3621                                  ; 08/09/2018
  3622 00000A0A 00<rep 243h>            	times 579 db 0
  3623                                  
  3624                                  ;12/08/2018 - Retro DOS v3.0
  3625                                  ;15/07/2018
  3626                                  ;============================================================================
  3627                                  ; 	Retro DOS v3.0
  3628                                  ;============================================================================
  3629 00000C4D 00                      	db 	0
  3630                                  RETRODOSMSG:
  3631 00000C4E 0D0A                    	db	13,10
  3632                                  	;;db	"Retro DOS v3.0 by Erdogan Tan [2018]"
  3633                                  	; 22/11/2022
  3634                                  	;db	"Retro DOS v3.0 by Erdogan Tan [2018-2022]"
  3635                                  	; 16/01/2024
  3636 00000C50 526574726F20444F53-     	db	"Retro DOS v3.0 by Erdogan Tan [2018-2024]"
  3636 00000C59 2076332E3020627920-
  3636 00000C62 4572646F67616E2054-
  3636 00000C6B 616E205B323031382D-
  3636 00000C74 323032345D         
  3637 00000C79 0D0A2400                	db	13,10,"$", 0 
  3638                                  
  3639                                  ;============================================================================
  3640                                  ; MSTABLE.ASM (MSDOS 6.0, 1991)
  3641                                  ;============================================================================
  3642                                  ; 16/07/2018 - Retro DOS 3.0
  3643                                  
  3644                                  	; Offset 0C78h in IBMDOS.COM (MSDOS 3.3, 1987)
  3645                                  MSVERS:				; MS-DOS version in hex for $GET_VERSION
  3646 00000C7D 03                      MSMAJOR: DB	MAJOR_VERSION	; DOS_MAJOR_VERSION
  3647 00000C7E 1E                      MSMINOR: DB	MINOR_VERSION	; DOS_MINOR_VERSION  
  3648                                  
  3649                                  ;;hkn YRTAB & MONTAB moved to DOSDATA in ms_data.asm
  3650                                  ;        I_am    YRTAB,8,<200,166,200,165,200,165,200,165>   ; [SYSTEM]
  3651                                  ;        I_am    MONTAB,12,<31,28,31,30,31,30,31,31,30,31,30,31> ; [SYSTEM]
  3652                                  
  3653                                  ; DOSTAB.ASM (MSDOS 6.0, 1991)
  3654                                  ; YRTAB & MONTAB moved from TABLE segment in ms_table.asm
  3655                                  ;
  3656                                  ;	I_am    YRTAB,8,<200,166,200,165,200,165,200,165>   
  3657                                  ;	I_am    MONTAB,12,<31,28,31,30,31,30,31,31,30,31,30,31> 
  3658                                  
  3659                                  ; Days in year
  3660                                  
  3661                                  YRTAB:   
  3662 00000C7F C8A6                    	DB	200,166			; Leap year
  3663 00000C81 C8A5                    	DB	200,165
  3664 00000C83 C8A5                    	DB	200,165
  3665 00000C85 C8A5                    	DB	200,165
  3666                                  
  3667                                  ; Days of each month
  3668                                  
  3669                                  MONTAB:        
  3670 00000C87 1F                      	DB      31                      ; January
  3671                                  february:
  3672 00000C88 1C                      	DB	28 			; February--reset each 
  3673                                  					; time year changes
  3674 00000C89 1F                              DB      31                      ; March
  3675 00000C8A 1E                              DB      30                      ; April
  3676 00000C8B 1F                              DB      31                      ; May
  3677 00000C8C 1E                              DB      30                      ; June
  3678 00000C8D 1F                              DB      31                      ; July
  3679 00000C8E 1F                              DB      31                      ; August
  3680 00000C8F 1E                              DB      30                      ; September
  3681 00000C90 1F                              DB      31                      ; October
  3682 00000C91 1E                              DB      30                      ; November
  3683 00000C92 1F                              DB      31                      ; December
  3684                                  
  3685                                  ;
  3686                                  ; This is the error code mapping table for INT 21 errors.  This table defines
  3687                                  ; those error codes which are "allowed" for each system call.  If the error
  3688                                  ; code ABOUT to be returned is not "allowed" for the call, the correct action
  3689                                  ; is to return the "real" error via Extended error, and one of the allowed
  3690                                  ; errors on the actual call.
  3691                                  ;
  3692                                  ; The table is organized as follows:
  3693                                  ;
  3694                                  ;    Each entry in the table is of variable size, but the first
  3695                                  ;       two bytes are always:
  3696                                  ;
  3697                                  ;       Call#,Cnt of bytes following this byte
  3698                                  ;
  3699                                  ; EXAMPLE:
  3700                                  ;       Call 61 (OPEN)
  3701                                  ;
  3702                                  ;       DB      61,5,12,3,2,4,5
  3703                                  ;
  3704                                  ;       61 is the AH INT 21 call value for OPEN.
  3705                                  ;        5 indicates that there are 5 bytes after this byte (12,3,2,4,5).
  3706                                  ;       Next five bytes are those error codes which are "allowed" on OPEN.
  3707                                  ;       The order of these values is not important EXCEPT FOR THE LAST ONE (in
  3708                                  ;       this case 5).  The last value will be the one returned on the call if
  3709                                  ;       the "real" error is not one of the allowed ones.
  3710                                  ;
  3711                                  ; There are a number of calls (for instance all of the FCB calls) for which
  3712                                  ;   there is NO entry.  This means that NO error codes are returned on this
  3713                                  ;   call, so set up an Extended error and leave the current error code alone.
  3714                                  ;
  3715                                  ; The table is terminated by a call value of 0FFh
  3716                                  
  3717                                  ;PUBLIC I21_MAP_E_TAB
  3718                                  	; 10/08/2018
  3719                                  I21_MAP_E_TAB:	; LABEL	BYTE
  3720 00000C93 38020102                    DB  INTERNATIONAL,2,error_invalid_function,error_file_not_found
  3721 00000C97 3903030205                  DB  MKDIR,3,error_path_not_found,error_file_not_found,error_access_denied
  3722 00000C9C 3A041003                    DB  RMDIR,4,error_current_directory,error_path_not_found
  3723 00000CA0 0205                        DB          error_file_not_found,error_access_denied
  3724 00000CA2 3B020203                    DB  CHDIR,2,error_file_not_found,error_path_not_found
  3725 00000CA6 3C040302                    DB  CREAT,4,error_path_not_found,error_file_not_found
  3726 00000CAA 04                          DB          error_too_many_open_files
  3727 00000CAB 05                          DB          error_access_denied
  3728                                      ; MSDOS 6.0
  3729                                      ;DB  OPEN,6,error_path_not_found,error_file_not_found,error_invalid_access
  3730                                      ;DB          error_too_many_open_files
  3731                                      ;DB          error_not_dos_disk,error_access_denied
  3732                                      ; MSDOS 3.3
  3733 00000CAC 3D0503020C                  DB  OPEN,5,error_path_not_found,error_file_not_found,error_invalid_access
  3734 00000CB1 0405                        DB          error_too_many_open_files,error_access_denied
  3735 00000CB3 3E0106                      DB  CLOSE,1,error_invalid_handle
  3736 00000CB6 3F020605                    DB  READ,2,error_invalid_handle,error_access_denied
  3737 00000CBA 40020605                    DB  WRITE,2,error_invalid_handle,error_access_denied
  3738 00000CBE 4103030205                  DB  UNLINK,3,error_path_not_found,error_file_not_found,error_access_denied
  3739 00000CC3 42020601                    DB  LSEEK,2,error_invalid_handle,error_invalid_function
  3740 00000CC7 4304030201                  DB  CHMOD,4,error_path_not_found,error_file_not_found,error_invalid_function
  3741 00000CCC 05                          DB          error_access_denied
  3742 00000CCD 44050F0D01                  DB  IOCTL,5,error_invalid_drive,error_invalid_data,error_invalid_function
  3743 00000CD2 0605                        DB          error_invalid_handle,error_access_denied
  3744 00000CD4 45020604                    DB  XDUP,2,error_invalid_handle,error_too_many_open_files
  3745 00000CD8 46020604                    DB  XDUP2,2,error_invalid_handle,error_too_many_open_files
  3746                                      ; MSDOS 6.0	
  3747                                      ;DB  CURRENT_DIR,2,error_not_DOS_disk,error_invalid_drive
  3748                                      ; MSDOS 3.3	
  3749 00000CDC 47010F                      DB  CURRENT_DIR,1,error_invalid_drive
  3750 00000CDF 48020708                    DB  ALLOC,2,error_arena_trashed,error_not_enough_memory
  3751 00000CE3 49020709                    DB  DEALLOC,2,error_arena_trashed,error_invalid_block
  3752 00000CE7 4A03070908                  DB  SETBLOCK,3,error_arena_trashed,error_invalid_block,error_not_enough_memory
  3753 00000CEC 4B08030102                  DB  EXEC,8,error_path_not_found,error_invalid_function,error_file_not_found
  3754 00000CF1 040B0A                      DB          error_too_many_open_files,error_bad_format,error_bad_environment
  3755 00000CF4 0805                        DB          error_not_enough_memory,error_access_denied
  3756 00000CF6 4E03030212                  DB  FIND_FIRST,3,error_path_not_found,error_file_not_found,error_no_more_files
  3757 00000CFB 4F0112                      DB  FIND_NEXT,1,error_no_more_files
  3758                                      ; MSDOS 6.0
  3759                                      ;DB  RENAME,5,error_not_same_device,error_path_not_found,error_file_not_found
  3760                                      ;DB          error_current_directory,error_access_denied
  3761                                      ; MSDOS 3.3
  3762 00000CFE 5604110302                  DB  RENAME,4,error_not_same_device,error_path_not_found,error_file_not_found
  3763 00000D03 05                          DB          error_access_denied
  3764                                      ; MSDOS 6.0	
  3765                                      ;DB  FILE_TIMES,4,error_invalid_handle,error_not_enough_memory
  3766                                      ;DB             error_invalid_data,error_invalid_function
  3767                                      ; MSDOS 3.03	
  3768 00000D04 57020601                    DB  FILE_TIMES,2,error_invalid_handle,error_invalid_function
  3769 00000D08 580101                      DB  ALLOCOPER,1,error_invalid_function
  3770 00000D0B 5A040302                    DB  CREATETEMPFILE,4,error_path_not_found,error_file_not_found
  3771 00000D0F 0405                        DB          error_too_many_open_files,error_access_denied
  3772 00000D11 5B055003                    DB  CREATENEWFILE,5,error_file_exists,error_path_not_found
  3773 00000D15 020405                      DB          error_file_not_found,error_too_many_open_files,error_access_denied
  3774 00000D18 5C040601                    DB  LOCKOPER,4,error_invalid_handle,error_invalid_function
  3775 00000D1C 2421                        DB          error_sharing_buffer_exceeded,error_lock_violation
  3776 00000D1E 65020102                    DB  GETEXTCNTRY,2,error_invalid_function,error_file_not_found	;DOS 3.3
  3777 00000D22 66020102                    DB  GETSETCDPG,2,error_invalid_function,error_file_not_found        ;DOS 3.3
  3778 00000D26 680106                      DB  COMMIT,1,error_invalid_handle                                   ;DOS 3.3
  3779 00000D29 67030408                    DB  EXTHANDLE,3,error_too_many_open_files,error_not_enough_memory
  3780 00000D2D 01                          DB              error_invalid_function
  3781                                      ; MSDOS 6.0		
  3782                                      ;DB	ExtOpen,10
  3783                                      ;DB   error_path_not_found,error_file_not_found,error_invalid_access
  3784                                      ;DB         error_too_many_open_files,error_file_exists,error_not_enough_memory
  3785                                      ;DB         error_not_dos_disk,error_invalid_data
  3786                                      ;DB             error_invalid_function,error_access_denied
  3787                                      ;DB GetSetMediaID,4,error_invalid_drive,error_invalid_data
  3788                                      ;DB         error_invalid_function,error_access_denied
  3789 00000D2E FF                          DB  0FFh
  3790                                  
  3791                                  ;============================================================================
  3792                                  ; DOSTAB.ASM (MSDOS 6.0, 1991)
  3793                                  ;============================================================================
  3794                                  ; 16/07/2018 - Retro DOS 3.0
  3795                                  
  3796                                  ;**
  3797                                  ;
  3798                                  ; The following table defines CLASS ACTION and LOCUS info for the INT 21H
  3799                                  ; errors.  Each entry is 4 bytes long:
  3800                                  ;
  3801                                  ;       Err#,Class,Action,Locus
  3802                                  ;
  3803                                  ; A value of 0FFh indicates a call specific value (ie.  should already
  3804                                  ; be set).  AN ERROR CODE NOT IN THE TABLE FALLS THROUGH TO THE CATCH ALL AT
  3805                                  ; THE END, IT IS ASSUMES THAT CLASS, ACTION, LOCUS IS ALREADY SET.
  3806                                  ;
  3807                                  
  3808                                  ;PUBLIC  ERR_TABLE_21
  3809                                  ERR_TABLE_21: ; LABEL   BYTE
  3810 00000D2F 010704FF                    DB  error_invalid_function,       errCLASS_Apperr,    errACT_Abort,     0FFh
  3811 00000D33 02080302                    DB  error_file_not_found,         errCLASS_NotFnd,    errACT_User,      errLOC_Disk
  3812 00000D37 03080302                    DB  error_path_not_found,         errCLASS_NotFnd,    errACT_User,      errLOC_Disk
  3813 00000D3B 04010401                    DB  error_too_many_open_files,    errCLASS_OutRes,    errACT_Abort,     errLOC_Unk
  3814 00000D3F 050303FF                    DB  error_access_denied,          errCLASS_Auth,      errACT_User,      0FFh
  3815 00000D43 06070401                    DB  error_invalid_handle,         errCLASS_Apperr,    errACT_Abort,     errLOC_Unk
  3816 00000D47 07070505                    DB  error_arena_trashed,          errCLASS_Apperr,    errACT_Panic,     errLOC_Mem
  3817 00000D4B 08010405                    DB  error_not_enough_memory,      errCLASS_OutRes,    errACT_Abort,     errLOC_Mem
  3818 00000D4F 09070405                    DB  error_invalid_block,          errCLASS_Apperr,    errACT_Abort,     errLOC_Mem
  3819 00000D53 0A070405                    DB  error_bad_environment,        errCLASS_Apperr,    errACT_Abort,     errLOC_Mem
  3820 00000D57 0B090301                    DB  error_bad_format,             errCLASS_BadFmt,    errACT_User,      errLOC_Unk
  3821 00000D5B 0C070401                    DB  error_invalid_access,         errCLASS_Apperr,    errACT_Abort,     errLOC_Unk
  3822 00000D5F 0D090401                    DB  error_invalid_data,           errCLASS_BadFmt,    errACT_Abort,     errLOC_Unk
  3823 00000D63 0F080302                    DB  error_invalid_drive,          errCLASS_NotFnd,    errACT_User,      errLOC_Disk
  3824 00000D67 10030302                    DB  error_current_directory,      errCLASS_Auth,      errACT_User,      errLOC_Disk
  3825 00000D6B 110D0302                    DB  error_not_same_device,        errCLASS_Unk,       errACT_User,      errLOC_Disk
  3826 00000D6F 12080302                    DB  error_no_more_files,          errCLASS_NotFnd,    errACT_User,      errLOC_Disk
  3827 00000D73 500C0302                    DB  error_file_exists,            errCLASS_Already,   errACT_User,      errLOC_Disk
  3828 00000D77 200A0202                    DB  error_sharing_violation,      errCLASS_Locked,    errACT_DlyRet,    errLOC_Disk
  3829 00000D7B 210A0202                    DB  error_lock_violation,         errCLASS_Locked,    errACT_DlyRet,    errLOC_Disk
  3830 00000D7F 540104FF                    DB  error_out_of_structures,      errCLASS_OutRes,    errACT_Abort,     0FFh
  3831 00000D83 56030301                    DB  error_invalid_password,       errCLASS_Auth,      errACT_User,      errLOC_Unk
  3832 00000D87 52010402                    DB  error_cannot_make,            errCLASS_OutRes,    errACT_Abort,     errLOC_Disk
  3833 00000D8B 32090303                    DB  error_not_supported,          errCLASS_BadFmt,    errACT_User,      errLOC_Net
  3834 00000D8F 550C0303                    DB  error_already_assigned,       errCLASS_Already,   errACT_User,      errLOC_Net
  3835 00000D93 57090301                    DB  error_invalid_parameter,      errCLASS_BadFmt,    errACT_User,      errLOC_Unk
  3836 00000D97 530D0401                    DB  error_FAIL_I24,               errCLASS_Unk,       errACT_Abort,     errLOC_Unk
  3837 00000D9B 24010405                    DB  error_sharing_buffer_exceeded,errCLASS_OutRes,    errACT_Abort,     errLOC_Mem
  3838                                      ; MSDOS 6.0
  3839                                      ;DB  error_handle_EOF,            errCLASS_OutRes,    errACT_Abort,     errLOC_Unk ;AN000;
  3840                                      ;DB  error_handle_Disk_Full,      errCLASS_OutRes,    errACT_Abort,     errLOC_Unk ;AN000;
  3841                                      ;DB  error_sys_comp_not_loaded,   errCLASS_Unk,       errACT_Abort,     errLOC_Disk ;AN001;
  3842 00000D9F FFFFFFFF                    DB  0FFh,                         0FFH,       	  0FFH,       	    0FFh
  3843                                  
  3844                                  ; MSDOS 3.3 (IBMDOS.COM, 1987) - Offset 0D2Ah
  3845                                  ;ERR_TABLE_21:	db 1,7,4,0FFh
  3846                                  ;		db 2,8,3,2
  3847                                  ;		db 3,8,3,2
  3848                                  ;		db 4,1,4,1
  3849                                  ;		db 5,3,3,0FFh
  3850                                  ;		db 6,7,4,1
  3851                                  ;		db 7,7,5,5
  3852                                  ;		db 8,1,4,5
  3853                                  ;		db 9,7,4,5
  3854                                  ;		db 0Ah,7,4,5
  3855                                  ;		db 0Bh,9,3,1
  3856                                  ;		db 0Ch,7,4,1
  3857                                  ;		db 0Dh,9,4,1
  3858                                  ;		db 0Fh,8,3,2
  3859                                  ;		db 10h,3,3,2
  3860                                  ;		db 11h,0Dh,3,2
  3861                                  ;		db 12h,8,3,2
  3862                                  ;		db 50h,0Ch,3,2
  3863                                  ;		db 20h,0Ah,2,2
  3864                                  ;		db 21h,0Ah,2,2
  3865                                  ;		db 54h,1,4,0FFh
  3866                                  ;		db 56h,3,3,1
  3867                                  ;		db 52h,1,4,2
  3868                                  ;		db 32h,9,3,3
  3869                                  ;		db 55h,0Ch,3,3
  3870                                  ;		db 57h,9,3,1
  3871                                  ;		db 53h,0Dh,4,1
  3872                                  ;		db 24h,1,4,5
  3873                                  ;		db 0FFh,0FFh,0FFh,0FFh
  3874                                  
  3875                                  ;
  3876                                  ; The following table defines CLASS ACTION and LOCUS info for the INT 24H
  3877                                  ; errors.  Each entry is 4 bytes long:
  3878                                  ;
  3879                                  ;       Err#,Class,Action,Locus
  3880                                  ;
  3881                                  ; A Locus value of 0FFh indicates a call specific value (ie.  should already
  3882                                  ; be set).  AN ERROR CODE NOT IN THE TABLE FALLS THROUGH TO THE CATCH ALL AT
  3883                                  ; THE END.
  3884                                  
  3885                                  ;PUBLIC  ERR_TABLE_24
  3886                                  ERR_TABLE_24: ; LABEL   BYTE
  3887 00000DA3 130B0702                    DB  error_write_protect,          errCLASS_Media,     errACT_IntRet,    errLOC_Disk
  3888 00000DA7 14040501                    DB  error_bad_unit,               errCLASS_Intrn,     errACT_Panic,     errLOC_Unk
  3889 00000DAB 150507FF                    DB  error_not_ready,              errCLASS_HrdFail,   errACT_IntRet,    0FFh
  3890 00000DAF 16040501                    DB  error_bad_command,            errCLASS_Intrn,     errACT_Panic,     errLOC_Unk
  3891 00000DB3 170B0402                    DB  error_CRC,                    errCLASS_Media,     errACT_Abort,     errLOC_Disk
  3892 00000DB7 18040501                    DB  error_bad_length,             errCLASS_Intrn,     errACT_Panic,     errLOC_Unk
  3893 00000DBB 19050102                    DB  error_seek,                   errCLASS_HrdFail,   errACT_Retry,     errLOC_Disk
  3894 00000DBF 1A0B0702                    DB  error_not_DOS_disk,           errCLASS_Media,     errACT_IntRet,    errLOC_Disk
  3895 00000DC3 1B0B0402                    DB  error_sector_not_found,       errCLASS_Media,     errACT_Abort,     errLOC_Disk
  3896 00000DC7 1C020704                    DB  error_out_of_paper,           errCLASS_TempSit,   errACT_IntRet,    errLOC_SerDev
  3897 00000DCB 1D0504FF                    DB  error_write_fault,            errCLASS_HrdFail,   errACT_Abort,     0FFh
  3898 00000DCF 1E0504FF                    DB  error_read_fault,             errCLASS_HrdFail,   errACT_Abort,     0FFh
  3899 00000DD3 1F0D04FF                    DB  error_gen_failure,            errCLASS_Unk,       errACT_Abort,     0FFh
  3900 00000DD7 200A0202                    DB  error_sharing_violation,      errCLASS_Locked,    errACT_DlyRet,    errLOC_Disk
  3901 00000DDB 210A0202                    DB  error_lock_violation,         errCLASS_Locked,    errACT_DlyRet,    errLOC_Disk
  3902 00000DDF 220B0702                    DB  error_wrong_disk,             errCLASS_Media,     errACT_IntRet,    errLOC_Disk
  3903 00000DE3 32090303                    DB  error_not_supported,          errCLASS_BadFmt,    errACT_User,      errLOC_Net
  3904 00000DE7 23070401                    DB  error_FCB_unavailable,        errCLASS_Apperr,    errACT_Abort,     errLOC_Unk
  3905 00000DEB 24010405                    DB  error_sharing_buffer_exceeded,errCLASS_OutRes,    errACT_Abort,     errLOC_Mem
  3906 00000DEF FF0D05FF                    DB	0FFh,                         errCLASS_Unk,       errACT_Panic,     0FFh
  3907                                  
  3908                                  
  3909                                  ; MSDOS 3.3 (IBMDOS.COM, 1987) - Offset 0D9Eh
  3910                                  ;ERR_TABLE_24:	db 13h,0Bh,7,2
  3911                                  ;		db 14h,4,5,1
  3912                                  ;		db 15h,5,7,0FFh
  3913                                  ;		db 16h,4,5,1
  3914                                  ;		db 17h,0Bh,4,2
  3915                                  ;		db 18h,4,5,1
  3916                                  ;		db 19h,5,1,2
  3917                                  ;		db 1Ah,0Bh,7,2
  3918                                  ;		db 1Bh,0Bh,4,2
  3919                                  ;		db 1Ch,2,7,4
  3920                                  ;		db 1Dh,5,4,0FFh
  3921                                  ;		db 1Eh,5,4,0FFh
  3922                                  ;		db 1Fh,0Dh,4,0FFh
  3923                                  ;		db 20h,0Ah,2,2
  3924                                  ;		db 21h,0Ah,2,2
  3925                                  ;		db 22h,0Bh,7,2
  3926                                  ;		db 32h,9,3,3
  3927                                  ;		db 23h,7,4,1
  3928                                  ;		db 24h,1,4,5
  3929                                  ;		db 0FFh,0Dh,5,0FFh
  3930                                  
  3931                                  ;
  3932                                  ; We need to map old int 24 errors and device driver errors into the new set
  3933                                  ; of errors.  The following table is indexed by the new errors
  3934                                  ;
  3935                                  
  3936                                  ;Public  ErrMap24
  3937                                  ErrMap24: ; Label   BYTE
  3938 00000DF3 13                          DB  error_write_protect	; 0
  3939 00000DF4 14                          DB  error_bad_unit		; 1
  3940 00000DF5 15                          DB  error_not_ready		; 2
  3941 00000DF6 16                          DB  error_bad_command	; 3
  3942 00000DF7 17                          DB  error_CRC		; 4
  3943 00000DF8 18                          DB  error_bad_length	; 5
  3944 00000DF9 19                          DB  error_seek		; 6
  3945 00000DFA 1A                          DB  error_not_DOS_disk	; 7
  3946 00000DFB 1B                          DB  error_sector_not_found	; 8
  3947 00000DFC 1C                          DB  error_out_of_paper	; 9
  3948 00000DFD 1D                          DB  error_write_fault	; A
  3949 00000DFE 1E                          DB  error_read_fault	; B
  3950 00000DFF 1F                          DB  error_gen_failure	; C
  3951 00000E00 1F                          DB  error_gen_failure	; D  RESERVED
  3952 00000E01 1F                          DB  error_gen_failure	; E  RESERVED
  3953 00000E02 22                          DB  error_wrong_disk	; F
  3954                                  
  3955                                  ;Public  ErrMap24End
  3956                                  ErrMap24End: ; LABEL   BYTE
  3957                                  
  3958                                  ; 16/07/2018 - Retro DOS v3.0
  3959                                  ;_MAXCALL:	db 	36
  3960                                  ;_MAXCOM:	db	104
  3961                                  
  3962                                  ; 08/09/2018
  3963 00000E03 24                          db  36
  3964 00000E04 68                          db  104
  3965                                  
  3966                                  ;============================================================================
  3967                                  ; MSTABLE.ASM, MSDOS 6.0, 1991
  3968                                  ;============================================================================
  3969                                  ; 11/07/2018 - Retro DOS v3.0
  3970                                  
  3971                                  	%define short_addr dw  ; 03/03/2018 - Retro DOS v2.0
  3972                                  
  3973 00000E05 90                      align 2
  3974                                  
  3975                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 0E00h
  3976                                  
  3977                                  ; Standard Functions
  3978                                  ;DISPATCH    LABEL WORD
  3979                                  DISPATCH:
  3980                                  	; 16/07/2018 - Retro DOS v3.0
  3981                                  	; (MSDOS 3.3)
  3982                                  
  3983 00000E06 [C964]                          short_addr  _$ABORT			    ;  0      0
  3984 00000E08 [7923]                          short_addr  _$STD_CON_INPUT		    ;  1      1
  3985 00000E0A [8223]                          short_addr  _$STD_CON_OUTPUT		    ;  2      2
  3986 00000E0C [3B24]                          short_addr  _$STD_AUX_INPUT		    ;  3      3
  3987 00000E0E [5824]                          short_addr  _$STD_AUX_OUTPUT		    ;  4      4
  3988 00000E10 [5E24]                          short_addr  _$STD_PRINTER_OUTPUT	    ;  5      5
  3989 00000E12 [CB22]                          short_addr  _$RAW_CON_IO		    ;  6      6
  3990 00000E14 [F722]                          short_addr  _$RAW_CON_INPUT		    ;  7      7
  3991 00000E16 [8C20]                          short_addr  _$STD_CON_INPUT_NO_ECHO	    ;  8      8
  3992 00000E18 [F820]                          short_addr  _$STD_CON_STRING_OUTPUT	    ;  9      9
  3993 00000E1A [0421]                          short_addr  _$STD_CON_STRING_INPUT	    ; 10      A
  3994 00000E1C [7224]                          short_addr  _$STD_CON_INPUT_STATUS	    ; 11      B
  3995 00000E1E [7C24]                          short_addr  _$STD_CON_INPUT_FLUSH	    ; 12      C
  3996 00000E20 [531D]                          short_addr  _$DISK_RESET		    ; 13      D
  3997 00000E22 [4F1C]                          short_addr  _$SET_DEFAULT_DRIVE		    ; 14      E
  3998 00000E24 [832B]                          short_addr  _$FCB_OPEN			    ; 15      F
  3999 00000E26 [2525]                          short_addr  _$FCB_CLOSE			    ; 16     10
  4000 00000E28 [832C]                          short_addr  _$DIR_SEARCH_FIRST		    ; 17     11
  4001 00000E2A [182D]                          short_addr  _$DIR_SEARCH_NEXT		    ; 18     12
  4002 00000E2C [C124]                          short_addr  _$FCB_DELETE		    ; 19     13
  4003 00000E2E [6F2C]                          short_addr  _$FCB_SEQ_READ		    ; 20     14
  4004 00000E30 [742C]                          short_addr  _$FCB_SEQ_WRITE	            ; 21     15
  4005 00000E32 [552C]                          short_addr  _$FCB_CREATE		    ; 22     16
  4006 00000E34 [9625]                          short_addr  _$FCB_RENAME		    ; 23     17
  4007                                  	; 16/07/2018
  4008                                          ;short_addr _CPMFUNC			    ; 24     18	
  4009 00000E36 [1C17]                          short_addr  NO_OP			    ; 24     18
  4010 00000E38 [4A1C]                          short_addr  _$GET_DEFAULT_DRIVE		    ; 25     19
  4011 00000E3A [3F1C]                          short_addr  _$SET_DMA			    ; 26     1A
  4012                                  
  4013                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  4014                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  4015                                  ;                                                                          ;
  4016 00000E3C [DC1C]                          short_addr  _$SLEAZEFUNC		    ; 27     1B
  4017 00000E3E [DE1C]                          short_addr  _$SLEAZEFUNCDL		    ; 28     1C
  4018                                  ;                                                                          ;
  4019                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  4020                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  4021                                  
  4022                                          ;short_addr  _CPMFUNC			    ; 29     1D
  4023                                          ;short_addr  _CPMFUNC			    ; 30     1E
  4024                                  
  4025                                  ; 08/07/2018 - Retro DOS v3.0
  4026                                  ; MSDOS 6.0 - MSTABLE.ASM, 1991
  4027                                  
  4028 00000E40 [1C17]                  	short_addr  NO_OP			    ; 29     1D
  4029 00000E42 [1C17]                  	short_addr  NO_OP			    ; 30     1E
  4030                                  
  4031                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  4032                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  4033                                  ;                                                                          ;
  4034 00000E44 [221D]                          short_addr  _$GET_DEFAULT_DPB               ; 31     1F
  4035                                  ;                                                                          ;
  4036                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  4037                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  4038                                          ;short_addr _CPMFUNC			    ; 32     20
  4039                                  
  4040                                  ; 08/07/2018 - Retro DOS v3.0
  4041                                  ; MSDOS 6.0 - MSTABLE.ASM, 1991
  4042                                  
  4043 00000E46 [1C17]                  	short_addr  NO_OP			    ; 32     20
  4044                                  
  4045 00000E48 [792C]                          short_addr  _$FCB_RANDOM_READ               ; 33     21
  4046 00000E4A [7E2C]                          short_addr  _$FCB_RANDOM_WRITE              ; 34     22
  4047 00000E4C [D624]                          short_addr  _$GET_FCB_FILE_LENGTH	    ; 35     23
  4048 00000E4E [A924]                          short_addr  _$GET_FCB_POSITION		    ; 36     24
  4049                                  
  4050                                  ;MAXCALL = ($-DISPATCH)/2 - 1
  4051                                  MAXCALL EQU ($-DISPATCH)/2 - 1
  4052                                  
  4053                                  ; Extended Functions
  4054 00000E50 [711C]                          short_addr  _$SET_INTERRUPT_VECTOR	    ; 37     25
  4055                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  4056                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  4057                                  ;                                                                          ;
  4058 00000E52 [441E]                          short_addr  _$CREATE_PROCESS_DATA_BLOCK	    ; 38     26
  4059                                  ;                                                                          ;
  4060                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  4061                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  4062 00000E54 [6A2C]                          short_addr  _$FCB_RANDOM_READ_BLOCK	    ; 39     27
  4063 00000E56 [652C]                          short_addr  _$FCB_RANDOM_WRITE_BLOCK        ; 40     28
  4064 00000E58 [D11C]                          short_addr  _$PARSE_FILE_DESCRIPTOR	    ; 41     29
  4065 00000E5A [2418]                          short_addr  _$GET_DATE                      ; 42     2A
  4066 00000E5C [4118]                          short_addr  _$SET_DATE                      ; 43     2B
  4067 00000E5E [6118]                          short_addr  _$GET_TIME                      ; 44     2C
  4068 00000E60 [7218]                          short_addr  _$SET_TIME                      ; 45     2D
  4069 00000E62 [1F1A]                          short_addr  _$SET_VERIFY_ON_WRITE           ; 46     2E
  4070                                  
  4071                                  ; Extended functionality group
  4072 00000E64 [2B1C]                          short_addr  _$GET_DMA                       ; 47     2F
  4073 00000E66 [011A]                          short_addr  _$GET_VERSION                   ; 48     30
  4074 00000E68 [6D64]                          short_addr  _$KEEP_PROCESS		    ; 49     31
  4075                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  4076                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  4077                                  ;                                                                          ;
  4078 00000E6A [241D]                          short_addr  _$GET_DPB			    ; 50     32
  4079                                  ;                                                                          ;
  4080                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  4081                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  4082 00000E6C [5F14]                          short_addr  _$SET_CTRL_C_TRAPPING           ; 51     33
  4083 00000E6E [0A1D]                          short_addr  _$GET_INDOS_FLAG                ; 52     34
  4084 00000E70 [611C]                          short_addr  _$GET_INTERRUPT_VECTOR          ; 53     35
  4085 00000E72 [001C]                          short_addr  _$GET_DRIVE_FREESPACE           ; 54     36
  4086 00000E74 [891C]                          short_addr  _$CHAR_OPER                     ; 55     37
  4087 00000E76 [261A]                          short_addr  _$INTERNATIONAL                 ; 56     38
  4088                                  ; XENIX CALLS
  4089                                  ;   Directory Group
  4090 00000E78 [572F]                          short_addr  _$MKDIR			    ; 57     39
  4091 00000E7A [A92E]                          short_addr  _$RMDIR			    ; 58     3A
  4092 00000E7C [E52E]                          short_addr  _$CHDIR			    ; 59     3B
  4093                                  ;   File Group
  4094 00000E7E [F070]                          short_addr  _$CREAT			    ; 60     3C
  4095 00000E80 [3670]                          short_addr  _$OPEN			    ; 61     3D
  4096 00000E82 [C36D]                          short_addr  _$CLOSE		 	    ; 62     3E
  4097 00000E84 [DB6E]                          short_addr  _$READ			    ; 63     3F
  4098 00000E86 [306F]                          short_addr  _$WRITE			    ; 64     40
  4099 00000E88 [4571]                          short_addr  _$UNLINK			    ; 65     41
  4100 00000E8A [356F]                          short_addr  _$LSEEK			    ; 66     42
  4101 00000E8C [FD70]                          short_addr  _$CHMOD			    ; 67     43
  4102 00000E8E [B42F]                          short_addr  _$IOCTL			    ; 68     44
  4103 00000E90 [F16F]                          short_addr  _$DUP			    ; 69     45
  4104 00000E92 [1370]                          short_addr  _$DUP2			    ; 70     46
  4105 00000E94 [4C2E]                          short_addr  _$CURRENT_DIR		    ; 71     47
  4106                                  ;   Memory Group
  4107 00000E96 [4E65]                          short_addr  _$ALLOC			    ; 72     48
  4108 00000E98 [6B66]                          short_addr  _$DEALLOC                       ; 73     49
  4109 00000E9A [4766]                          short_addr  _$SETBLOCK                      ; 74     4A
  4110                                  ;   Process Group
  4111 00000E9C [E25F]                          short_addr  _$EXEC			    ; 75     4B
  4112 00000E9E [A564]                          short_addr  _$EXIT			    ; 76     4C
  4113 00000EA0 [D85F]                          short_addr  _$WAIT			    ; 77     4D
  4114 00000EA2 [8B2D]                          short_addr  _$FIND_FIRST		    ; 78     4E
  4115                                  ;   Special Group
  4116 00000EA4 [E42D]                          short_addr  _$FIND_NEXT			    ; 79     4F
  4117                                  ; SPECIAL SYSTEM GROUP
  4118                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  4119                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  4120                                  ;                                                                          ;
  4121 00000EA6 [5314]                          short_addr  _$SET_CURRENT_PDB		    ; 80     50
  4122 00000EA8 [5914]                          short_addr  _$GET_CURRENT_PDB               ; 81     51
  4123 00000EAA [161D]                          short_addr  _$GET_IN_VARS                   ; 82     52
  4124 00000EAC [8C1D]                          short_addr  _$SETDPB			    ; 83     53
  4125                                  ;                                                                          ;
  4126                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  4127                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  4128 00000EAE [1A1A]                          short_addr  _$GET_VERIFY_ON_WRITE	    ; 84     54
  4129                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  4130                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  4131                                  ;                                                                          ;
  4132 00000EB0 [361E]                          short_addr  _$DUP_PDB                       ; 85     55
  4133                                  ;                                                                          ;
  4134                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  4135                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  4136 00000EB2 [6D71]                          short_addr  _$RENAME			    ; 86     56
  4137 00000EB4 [A16F]                          short_addr  _$FILE_TIMES                    ; 87     57
  4138 00000EB6 [8C66]                          short_addr  _$ALLOCOPER                     ; 88     58
  4139                                  
  4140                                  ; 08/07/2018 - Retro DOS v3.0
  4141                                  ; -------------------------------------------------------------------------;
  4142                                  ; MSDOS 6.0 - MSTABLE.ASM, 1991
  4143                                  
  4144                                  ; Network extention system calls
  4145 00000EB8 [AE1C]                          short_addr  _$GetExtendedError              ; 89     59
  4146 00000EBA [FA71]                          short_addr  _$CreateTempFile                ; 90     5A
  4147 00000EBC [E271]                          short_addr  _$CreateNewFile                 ; 91     5B
  4148 00000EBE [9272]                          short_addr  _$LockOper                      ; 92     5C
  4149 00000EC0 [AE66]                          short_addr  _$ServerCall                    ; 93     5D
  4150 00000EC2 [0469]                          short_addr  _$UserOper                      ; 94     5E
  4151 00000EC4 [9368]                          short_addr  _$AssignOper                    ; 95     5F
  4152 00000EC6 [5C6D]                          short_addr  _$NameTrans                     ; 96     60
  4153 00000EC8 [1C17]                  	short_addr  NO_OP			    ; 97     61
  4154 00000ECA [5914]                          short_addr  _$GET_CURRENT_PDB		    ; 98     62
  4155                                  ; the next call is reserved for hangool sys call
  4156                                  	; 16/07/2018
  4157                                  	;short_addr  _$ECS_Call			    ; 99     63
  4158 00000ECC [1C17]                  	short_addr  NO_OP			    ; 99     63
  4159                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  4160                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  4161                                  ;                                                                          ;
  4162 00000ECE [8614]                          short_addr  _$SET_PRINTER_FLAG              ; 100    64
  4163                                  ;                                                                          ;
  4164                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  4165                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  4166 00000ED0 [AC1A]                          short_addr  _$GetExtCntry                   ; 101    65
  4167 00000ED2 [A91B]                          short_addr  _$GetSetCdPg                    ; 102    66
  4168 00000ED4 [126E]                          short_addr  _$ExtHandle                     ; 103    67
  4169 00000ED6 [F66D]                          short_addr  _$COMMIT                        ; 104    68
  4170                                  
  4171                                  ; 08/07/2018
  4172                                  ; Above system calls are valid for Retro DOS v3.0 (MSDOS 3.3) 
  4173                                  ; Following system calls are valid for Retro DOS v4.0 (MSDOS 6.0)
  4174                                  
  4175                                  ;	short_addr  _$GSetMediaID                   ; 105    69   ;AN000;
  4176                                  ;	short_addr  _$COMMIT                        ; 106    6A   ;AN000;
  4177                                  ;	short_addr  NO_OP                           ; 107    6B   
  4178                                  ;						    ; IFS_IOCTL no longer 
  4179                                  ;						    ; supported
  4180                                  ;	short_addr  _$Extended_Open                 ; 108    6C   ;AN000;
  4181                                  
  4182                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  4183                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  4184                                  ;                                                                          ;
  4185                                  ;ifdef ROMEXEC
  4186                                  ;       short_addr  $ROM_FIND_FIRST	   	    ; 109    6D
  4187                                  ;       short_addr  $ROM_FIND_NEXT	   	    ; 110    6E
  4188                                  ;	short_addr  $ROM_EXCLUDE		    ; 111    6F	  ; M078
  4189                                  ;endif
  4190                                  ;                                                                          ;
  4191                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  4192                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  4193                                  
  4194                                  ;MAXCOM  = ($-DISPATCH)/2 - 1
  4195                                  
  4196                                  MAXCOM  EQU ($-DISPATCH)/2 - 1
  4197                                  
  4198                                  ; 08/07/2018 - Retro DOS v3.0
  4199                                  ; MSDOS 6.0 - MSTABLE.ASM, 1991
  4200                                  
  4201                                  ;	If	Installed
  4202                                  
  4203                                  align 2
  4204                                  
  4205                                  ;PUBLIC FOO
  4206                                  
  4207                                  FOO:	; LABEL WORD
  4208 00000ED8 [CE17]                          short_addr  Leave2F
  4209                                  
  4210 00000EDA [DC0E]                  DTab:	DW  DOSTable
  4211                                  
  4212                                  	;PUBLIC FOO,DTAB
  4213                                  
  4214                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 0ED6h
  4215                                         
  4216                                  DOSTable:  ; LABEL  WORD
  4217 00000EDC 2F                              DB      (DOSTableEnd-DOSTable-1)/2 ; db  46
  4218 00000EDD [FB17]                          short_addr  DOSInstall          ;   0 install check
  4219 00000EDF [BE3A]                          short_addr  DOS_CLOSE           ;   1   DOS_CLOSE
  4220 00000EE1 [7E1C]                          short_addr  RECSET              ;   2   RECSET
  4221 00000EE3 [F817]                          short_addr  DosGetGroup         ;   3   Get DOSGROUP
  4222 00000EE5 [4856]                          short_addr  PATHCHRCMP          ;   4   PATHCHRCMP
  4223 00000EE7 [8423]                          short_addr  OUTT                ;   5   OUT
  4224 00000EE9 [B558]                          short_addr  NET_I24_ENTRY       ;   6   NET_I24_ENTRY
  4225 00000EEB [DA5D]                          short_addr  PLACEBUF            ;   7   PLACEBUF
  4226 00000EED [783B]                          short_addr  FREE_SFT            ;   8   FREE_SFT
  4227 00000EEF [7C5F]                          short_addr  BUFWRITE            ;   9   BUFWRITE
  4228 00000EF1 [2E73]                          short_addr  SHARE_VIOLATION     ;   10  SHARE_VIOLATION
  4229 00000EF3 [6838]                          short_addr  SHARE_ERROR         ;   11  SHARE_ERROR
  4230 00000EF5 [5138]                          short_addr  SET_SFT_MODE        ;   12  SET_SFT_MODE
  4231 00000EF7 [B918]                          short_addr  DATE16              ;   13  DATE16
  4232 00000EF9 [891F]                          short_addr  Idle		;   14      empty slot
  4233 00000EFB [CE5D]                          short_addr  SCANPLACE           ;   15  SCANPLACE
  4234 00000EFD [891F]                          short_addr  Idle		;   16      empty slot
  4235 00000EFF [521F]                          short_addr  StrCpy              ;   17  StrCpy
  4236 00000F01 [6A1F]                          short_addr  StrLen              ;   18  StrLen
  4237 00000F03 [0C56]                          short_addr  UCase		;   19  UCase
  4238 00000F05 [765E]                          short_addr  POINTCOMP           ;   20  POINTCOMP
  4239 00000F07 [535F]                          short_addr  CHECKFLUSH          ;   21  CHECKFLUSH
  4240 00000F09 [1268]                          short_addr  SFFromSFN           ;   22  SFFromSFN
  4241 00000F0B [C469]                          short_addr  GetCDSFromDrv       ;   23  GetCDSFromDrv
  4242 00000F0D [0B16]                          short_addr  Get_User_Stack      ;   24  Get_User_Stack
  4243 00000F0F [7169]                          short_addr  GETTHISDRV          ;   25  GetThisDrv
  4244 00000F11 [816D]                          short_addr  DriveFromText       ;   26  DriveFromText
  4245 00000F13 [6019]                          short_addr  SETYEAR             ;   27  SETYEAR
  4246 00000F15 [F719]                          short_addr  DSUM                ;   28  DSUM
  4247 00000F17 [5419]                          short_addr  DSLIDE              ;   29  DSLIDE
  4248 00000F19 [341F]                          short_addr  StrCmp              ;   30  StrCmp
  4249 00000F1B [B768]                          short_addr  InitCDS             ;   31  initcds
  4250 00000F1D [E467]                          short_addr  pJFNFromHandle      ;   32  pJfnFromHandle
  4251 00000F1F [5C6D]                          short_addr  _$NameTrans		;   33  $NameTrans
  4252 00000F21 [4317]                          short_addr  CAL_LK              ;   34  CAL_LK
  4253 00000F23 [E04A]                          short_addr  DEVNAME             ;   35  DEVNAME
  4254 00000F25 [891F]                          short_addr  Idle                ;   36  Idle
  4255 00000F27 [781F]                          short_addr  DStrLen             ;   37  DStrLen
  4256 00000F29 [0B20]                          short_addr  NLS_OPEN            ;   38  NLS_OPEN      DOS 3.3
  4257 00000F2B [C36D]                          short_addr  _$CLOSE		;   39  $CLOSE        DOS 3.3
  4258 00000F2D [1120]                          short_addr  NLS_LSEEK           ;   40  NLS_LSEEK     DOS 3.3
  4259 00000F2F [DB6E]                          short_addr  _$READ		;   41  $READ         DOS 3.3
  4260 00000F31 [EA1F]                          short_addr  FastInit            ;   42  FastInit      DOS 3.4  ;AN000;
  4261 00000F33 [4A20]                          short_addr  NLS_IOCTL           ;   43  NLS_IOCTL     DOS 3.3
  4262 00000F35 [3D20]                          short_addr  GetDevList          ;   44  GetDevList    DOS 3.3
  4263 00000F37 [6720]                          short_addr  NLS_GETEXT          ;   45  NLS_GETEXT    DOS 3.3
  4264                                          
  4265                                  	; 10/08/2018
  4266                                  	;short_addr  MSG_RETRIEVAL	;   46  MSG_RETRIEVAL DOS 4.0  ;AN000;
  4267                                  
  4268 00000F39 [1C17]                  	short_addr  NO_OP		;   M006: 47  no longer supported
  4269                                  ;*** 	short_addr  Fake_Version	;   47  Fake_Version  DOS 4.0  ;AN006;
  4270                                  
  4271                                  DOSTableEnd:  ; LABEL BYTE
  4272                                  
  4273                                  	;ENDIF
  4274                                  
  4275                                  ;============================================================================
  4276                                  ; DOSTAB.ASM, MSDOS 6.0, 1991
  4277                                  ;============================================================================
  4278                                  ; 16/07/2018 - Retro DOS v3.0
  4279                                  
  4280                                  ;----------------THE FOLL. BLOCK MOVED FROM TABLE SEG IN MS_TABLE.ASM-------
  4281                                  
  4282                                  ; SYS init extended table,   DOS 3.3   F.C. 5/29/86
  4283                                  ;
  4284                                  	;PUBLIC	SysInitTable
  4285                                  
  4286                                  SysInitTable:	; label  byte
  4287 00000F3B [2600]                  	dw      SYSINITVARS			; pointer to sysinit var
  4288 00000F3D 0000                            dw      0                             	; segment
  4289 00000F3F [FD0F]                          dw      COUNTRY_CDPG		   	; pointer to country tabl
  4290 00000F41 0000                            dw      0                            	; segment of pointer
  4291                                  
  4292                                  ; DOS 3.3 F.C. 6/12/86
  4293                                  ; FASTOPEN communications area DOS 3.3   F.C. 5/29/86
  4294                                  ;
  4295                                  	;PUBLIC	FastOpenTable
  4296                                  	;PUBLIC	FastTable		; a better name
  4297                                  	;EXTRN	FastRet:FAR		; defined in misc2.asm
  4298                                  
  4299                                  ; MSDOS 6.0
  4300                                  ;FastTable:     ;label  byte		; a better name
  4301                                  ;FastOpenTable: ;label  byte
  4302                                  ;	dw      2                       ; number of entries
  4303                                  ;	dw      FastRet			; pointer to ret instr.
  4304                                  ;	dw      0                       ; and will be modified by
  4305                                  ;	dw      FastRet			; FASTxxx when loaded in
  4306                                  ;	dw      0                       
  4307                                  
  4308                                  ;
  4309                                  ; DOS 3.3 F.C. 6/12/86
  4310                                  ;
  4311                                  
  4312                                  ;	PUBLIC	FastFlg                 ; flags
  4313                                  ;FastFlg:	;label  byte		; don't change the foll: order
  4314                                  ;FastOpenFlg:
  4315                                  ;	db	0  ; I_am    FastOpenFlg,BYTE,<0>
  4316                                  
  4317                                  ; MSDOS 3.3
  4318                                  FastTable:
  4319                                  FastOpenTable:
  4320 00000F43 0400                    	dw      4 
  4321 00000F45 [0720]                  	dw      FastRet
  4322 00000F47 0000                    	dw      0  ; (('FastRet' segment will be set to CS by DOSINIT))
  4323                                  
  4324                                  	;PUBLIC	FastOpen_Ext_Info
  4325                                  
  4326                                  ; FastOpen_Ext_Info is used as a temporary storage for saving dirpos,dirsec
  4327                                  ; and clusnum  which are filled by DOS 3.ncwhen calling FastOpen Insert
  4328                                  ; or filled by FastOPen when calling FastOpen Lookup
  4329                                  
  4330                                  FastOpen_Ext_Info: ;label  byte		;dirpos
  4331 00000F49 00<rep 5h>              	times	FEI.size db 0	; 5 (for MSDOS 3.3), 11 (for MSDOS 6.0)
  4332                                  
  4333                                  ; Dir_Info_Buff is a dir entry buffer which is filled by FastOPen
  4334                                  ; when calling FastOpen Lookup
  4335                                  
  4336                                  	;PUBLIC	Dir_Info_Buff
  4337                                  
  4338                                  Dir_Info_Buff:	; label  byte
  4339 00000F4E 00<rep 20h>             	times	dir_entry.size db 0 ; 32 ; segment of pointer
  4340                                  
  4341                                  ; MSDOS 3.3 (IBMDOS.COM, 1987)
  4342                                  FastFlg:
  4343                                  FastOpenFlg:
  4344 00000F6E 00                      	db	0
  4345                                  
  4346                                  	;I_am	Next_Element_Start,WORD	; save next element start offset
  4347                                  Next_Element_Start:
  4348 00000F6F 0000                    	dw	0
  4349                                  
  4350                                  	; MSDOS 6.0
  4351                                  	;I_am    Del_ExtCluster,WORD     ; for dos_delete                       
  4352                                  
  4353                                  ; 17/07/2018
  4354                                  
  4355                                  ; The following is a stack and its pointer for interrupt 2F which is uesd
  4356                                  ; by NLSFUNC.  There is no significant use of this stack, we are just trying
  4357                                  ; not to destroy the INT 21 stack saved for the user.
  4358                                  
  4359                                  	;PUBLIC	USER_SP_2F
  4360                                  
  4361                                  USER_SP_2F:	; LABEL  WORD
  4362 00000F71 [730F]                  	dw	FAKE_STACK_2F
  4363                                  
  4364                                  	;PUBLIC	Packet_Temp
  4365                                  ;Packet_Temp	label  word		; temporary packet used by readtime
  4366                                  	;PUBLIC  DOS_TEMP		; temporary word
  4367                                  ;DOS_TEMP	label  word
  4368                                  FAKE_STACK_2F:
  4369                                  	;dw	14 dup (0)
  4370 00000F73 0000<rep Ch>            	times	12 dw 0			; 12 register temporary storage
  4371                                  
  4372                                  	;PUBLIC	Hash_Temp		; temporary word
  4373                                  ;Hash_Temp	label  word              
  4374                                  	;dw	4 dup (0)		; temporary hash table during config.sys
  4375                                  
  4376                                  	;PUBLIC  SCAN_FLAG             	; flag to indicate key ALT_Q
  4377                                  SCAN_FLAG:	; label  byte
  4378 00000F8B 00                      	db	0
  4379                                  
  4380                                  ; MSDOS 3.3
  4381                                  DISK_FULL:
  4382 00000F8C 00                      	db	0
  4383                                  
  4384                                  	;PUBLIC  DATE_FLAG
  4385                                  DATE_FLAG:   	;label  word 		; flag to
  4386 00000F8D 0000                    	dw     0                	; to update the date
  4387                                  
  4388                                  FETCHI_TAG:	;label  word		; OBSOLETE - no longer used
  4389 00000F8F 0000                    	dw     0			; formerly part of IBM's piracy protection
  4390                                  
  4391                                  ; MSDOS 6.0
  4392                                  ;      PUBLIC	MSG_EXTERROR 		; for system message addr              
  4393                                  ;MSG_EXTERROR	label  DWORD                                                     
  4394                                  ;               dd     0                ; for extended error                   
  4395                                  ;               dd     0                ; for parser                           
  4396                                  ;              	dd     0                ; for critical errror                  
  4397                                  ;              	dd     0                ; for IFS                              
  4398                                  ;              	dd     0                ; for code reduction                   
  4399                                  ;
  4400                                  ;      PUBLIC  	SEQ_SECTOR              ; last sector read                     
  4401                                  ;SEQ_SECTOR    	label  DWORD                                                     
  4402                                  ;              	dd     -1                                                        
  4403                                  ;
  4404                                  ;;      I_am    ACT_PAGE,WORD,<-1>      ; active EMS page                       
  4405                                  ;	I_am    SC_SECTOR_SIZE,WORD     ; sector size for SC                 
  4406                                  ;       I_am    SC_DRIVE,BYTE           ; drive # for secondary cache        
  4407                                  ;       I_am    CurSC_DRIVE,BYTE,<-1>   ; current SC drive                   
  4408                                  ;       I_am    CurSC_SECTOR,DWORD      ; current SC starting sector         
  4409                                  ;       I_am    SC_STATUS,WORD,<0>      ; SC status word                     
  4410                                  ;       I_am    SC_FLAG,BYTE,<0>        ; SC flag                            
  4411                                  ;       I_am    AbsDskErr,WORD,<0>	; Storage for Abs dsk read/write err
  4412                                  ;
  4413                                  ;	PUBLIC 	NO_NAME_ID                                                           
  4414                                  ;NO_NAME_ID	label byte                                                           
  4415                                  ;		db   'NO NAME    '	; null media id                      
  4416                                  ;
  4417                                  ;;hkn; moved from TABLE segment in kstrin.asm
  4418                                  ;
  4419                                  ;Public	KISTR001S,KISTR001E,LOOKSIZ	; 2/17/KK
  4420                                  ;KISTR001S	label	byte		; 2/17/KK
  4421                                  ;LOOKSIZ DB	0			; 0 if byte, NZ if word	2/17/KK
  4422                                  ;KISTR001E	label	byte		; 2/17/KK
  4423                                  ;
  4424                                  ;; the nul device driver used to be part of the code.  However, since the 
  4425                                  ;; header is in the data, and the entry points are only given as an offset,
  4426                                  ;; the strategy and interrupt entry points must also be in the data now.
  4427                                  ;;
  4428                                  ;
  4429                                  ;procedure   snuldev,far
  4430                                  ;assume ds:nothing,es:nothing,ss:nothing, cs:dosdata
  4431                                  ; 	or	es:[bx.reqstat],stdon	; set done bit
  4432                                  ;entry inuldev
  4433                                  ;	ret				; must not be a return!
  4434                                  ;endproc snuldev
  4435                                  ;
  4436                                  
  4437                                  ;============================================================================
  4438                                  ; MSTABLE.ASM, MSDOS 6.0, 1991
  4439                                  ;============================================================================
  4440                                  ; 17/07/2018 - Retro DOS v3.0
  4441                                  
  4442                                  ; ----------------------------------------------------------------------------
  4443                                  ; BREAK   <Copyright notice and version>
  4444                                  ; ----------------------------------------------------------------------------
  4445                                  
  4446                                  ;CODSTRT EQU     $
  4447                                  
  4448                                  ; 08/07/2018 - Retro DOS v3.0 by Erdogan Tan
  4449                                  ; (MSTABLE.ASM, MSDOS 6.0, 1991)
  4450                                  
  4451                                  ; NOTE WARNING: This declaration of HEADER must be THE LAST thing in this
  4452                                  ;       module. The reason is so that the data alignments are the same in
  4453                                  ;       IBM-DOS and MS-DOS up through header.
  4454                                  
  4455                                  	;PUBLIC	HEADER
  4456                                  
  4457                                  HEADER:	; LABEL	BYTE
  4458                                          ;IF	DEBUG
  4459                                          ;DB	13,10,"Debugging DOS version "
  4460                                          ;DB	MAJOR_VERSION + "0"
  4461                                          ;DB	"."
  4462                                          ;DB	(MINOR_VERSION / 10) + "0"
  4463                                          ;DB	(MINOR_VERSION MOD 10) + "0"
  4464                                          ;ENDIF
  4465                                  
  4466                                          ;IF	NOT IBM
  4467 00000F91 0D0A4D532D444F5320-             DB	13,10,"MS-DOS version "
  4467 00000F9A 76657273696F6E20   
  4468 00000FA2 33                              DB	MAJOR_VERSION + "0"
  4469 00000FA3 2E                              DB	"."
  4470 00000FA4 33                              DB	(MINOR_VERSION / 10) + "0"
  4471                                          ;DB	(MINOR_VERSION MOD 10) + "0"
  4472 00000FA5 30                              DB	(MINOR_VERSION % 10) + "0"
  4473                                  
  4474                                          ;IF	HIGHMEM
  4475                                          ;DB	"H"
  4476                                          ;ENDIF
  4477                                  
  4478 00000FA6 0D0A436F7079726967-     	DB	13,10,"Copyright 1981,82,83,84,88 Microsoft Corp.",13,10,"$"
  4478 00000FAF 687420313938312C38-
  4478 00000FB8 322C38332C38342C38-
  4478 00000FC1 38204D6963726F736F-
  4478 00000FCA 667420436F72702E0D-
  4478 00000FD3 0A24               
  4479                                  	;ENDIF
  4480                                  
  4481                                  ;IF DEBUG
  4482                                  ;	DB	13,10,"$"
  4483                                  ;ENDIF
  4484                                  
  4485                                  ;include copyrigh.inc
  4486                                  
  4487                                  	;DB	"MS DOS Version 6 (C)Copyright 1981-1993 Microsoft Corp "
  4488                                  	;DB	"Licensed Material - Property of Microsoft "
  4489                                  	;DB	"All rights reserved "
  4490                                  
  4491                                  ;============================================================================
  4492                                  ; MCODE.ASM, MSDOS 6.0, 1991
  4493                                  ;============================================================================
  4494                                  ; 17/07/2018 - Retro DOS v3.0
  4495                                  
  4496                                  ;	TITLE	MISC DOS ROUTINES - Int 25 and 26 handlers and other
  4497                                  ;	NAME	IBMCODE
  4498                                  
  4499                                  ;BREAK <NullDev -- Driver for null device>
  4500                                  
  4501                                  ; ROMDOS note:
  4502                                  ;	NUL device driver used to be here, but it was removed and placed in
  4503                                  ;	DOSDATA, because the entry points have to be in the segment as the
  4504                                  ;	header, which is also in DOSDATA.
  4505                                  
  4506                                  ;BREAK <AbsDRD, AbsDWRT -- INT int_disk_read, int_disk_write handlers>
  4507                                  
  4508                                  ;Public MSC001S,MSC001E
  4509                                  ;MSC001S label byte
  4510                                  	;IF	IBM
  4511                                  ; Codes returned by BIOS
  4512                                  ERRIN:
  4513 00000FD5 02                      	DB	2			; NO RESPONSE
  4514 00000FD6 06                      	DB	6			; SEEK FAILURE
  4515 00000FD7 0C                      	DB	12			; GENERAL ERROR
  4516 00000FD8 04                      	DB	4			; BAD CRC
  4517 00000FD9 08                      	DB	8			; SECTOR NOT FOUND
  4518 00000FDA 00                      	DB	0			; WRITE ATTEMPT ON WRITE-PROTECT DISK
  4519                                  ERROUT:
  4520                                  ; DISK ERRORS RETURNED FROM INT 25 and 26
  4521 00000FDB 80                      	DB	80H			; NO RESPONSE
  4522 00000FDC 40                      	DB	40H			; Seek failure
  4523 00000FDD 02                      	DB	2			; Address Mark not found
  4524 00000FDE 10                      	DB	10H			; BAD CRC
  4525 00000FDF 04                      	DB	4			; SECTOR NOT FOUND
  4526 00000FE0 03                      	DB	3			; WRITE ATTEMPT TO WRITE-PROTECT DISK
  4527                                  
  4528                                  NUMERR	EQU	$-ERROUT
  4529                                  	;ENDIF
  4530                                  ;MSC001E label byte
  4531                                  
  4532                                  ;============================================================================
  4533                                  ; DOSMES.INC (MSDOS 3.3, 1987)
  4534                                  ;============================================================================
  4535                                  ; 17/07/2018 - Retro DOS v3.0
  4536                                  
  4537                                  ;TABLE	SEGMENT BYTE PUBLIC 'TABLE'
  4538                                  
  4539                                  ; The international table(s). Used for DOS 3.x  (x < 3)
  4540                                  ; This is simply a sequence of tables of the following form:
  4541                                  ;
  4542                                  ; Offset
  4543                                  ;		BYTE  Size of this table excluding this byte and the next
  4544                                  ;		WORD  Country code represented by this table
  4545                                  ;			A sequence of n bytes, where n is the number specified
  4546                                  ;			by the first byte above and is not > internat_block_max,
  4547                                  ;			in the correct order for being returned by the
  4548                                  ;			INTERNATIONAL call as follows:
  4549                                  ;		WORD	Date format 0=mdy, 1=dmy, 2=ymd
  4550                                  ;		5 BYTE	Currency symbol null terminated
  4551                                  ;		2 BYTE	thousands separator null terminated
  4552                                  ;		2 BYTE	Decimal point null terminated
  4553                                  ;		2 BYTE	Date separator null terminated
  4554                                  ;		2 BYTE	Time separator null terminated
  4555                                  ;		1 BYTE	Bit field.  Currency format.
  4556                                  ;			Bit 0.	=0 $ before #  =1 $ after #
  4557                                  ;			Bit 1.	no. of spaces between # and $ (0 or 1)
  4558                                  ;			Bit 2.	=1 imbedded at decimal point, & no spaces;
  4559                                  ;		1 BYTE	No. of significant decimal digits in currency
  4560                                  ;		1 BYTE	Bit field.  Time format.
  4561                                  ;			Bit 0.	=0 12 hour clock  =1 24 hour
  4562                                  ;		WORD	Segment offset for address of case conversion routine
  4563                                  ;		WORD	RESERVED. Filled in by DOS. Segment value for above routine
  4564                                  ;		2 BYTE	Data list separator null terminated.
  4565                                  ;		   NOTE: The segment part of the DWORD Map_call is set
  4566                                  ;			by the INTERNATIONAL call. Do not try to initialize
  4567                                  ;			it to anything meaningful.
  4568                                  ;
  4569                                  ; The list of tables is terminated by putting a byte of -1 after the last
  4570                                  ;	table (a table with length -1).
  4571                                  
  4572                                  	; PUBLIC  international_table
  4573                                  
  4574                                  ; Offset 0F95h in IBMDOS.COM (MSDOS 3.3), 1987
  4575                                  
  4576                                  international_table:	; LABEL BYTE
  4577                                  
  4578 00000FE1 18                      	DB 	INTERNAT_BLOCK.size  ; = 24 ; Size in bytes of this table
  4579 00000FE2 0100                    	DW 	1		; Country code
  4580                                  USTABLE:
  4581 00000FE4 0000                    	dw	0		; 0-USA, 1-EUR, 2-JAP
  4582 00000FE6 2400000000              	db	'$',0,0,0,0	; Currency Symbol 5 bytes
  4583 00000FEB 2C00                    	db	',',0		; Thousands separator 2 bytes
  4584 00000FED 2E00                    	db	'.',0		; Decimal separator 2 bytes
  4585 00000FEF 2D00                    	db	'-',0		; Date separator 2 bytes
  4586 00000FF1 3A00                    	db	':',0		; Time separator 2 bytes
  4587 00000FF3 00                      	db	0		; Bit values
  4588                                                                 	;   Bit 0 = 0 if currency symbol first
  4589                                                                 	;         = 1 if currency symbol last
  4590                                                                 	;   Bit 1 = 0 if No space after currency symbol
  4591                                                                 	;         = 1 if space after currency symbol
  4592 00000FF4 02                      	db	2		; Number of places after currency dec point
  4593 00000FF5 00                      	db	0		; if 24 hour time, 0 if 12 hour time
  4594 00000FF6 [FE17]                  	dw	MAP_CASE	; Address of case mapping call (DWORD)
  4595 00000FF8 0000                            dw	0		; THIS IS TWO WORDS SO IT CAN BE INITIALIZED
  4596                                  				;  in pieces.
  4597 00000FFA 2C00                    	db	',',0		; Data list separator character
  4598                                  
  4599                                  ;	Tables for the IBM PC character set follow. The values
  4600                                  ;	associated with some of the currency symbols may change with
  4601                                  ;	other character sets. You may wish to add or delete country
  4602                                  ;	entries. NOTE: It is not a mistake that the JAPANESE entry
  4603                                  ;	has different currency symbols for the KANJI and
  4604                                  ;	non-KANJI versions.
  4605                                  	
  4606 00000FFC FF                      	DB	-1		; end of table
  4607                                  
  4608                                  ; The following table is used for DOS 3.3
  4609                                  ;DOS country and code page information is defined here for DOS 3.3.
  4610                                  ;The initial value for ccDosCountry is 1 (USA).
  4611                                  ;The initial value for ccDosCodepage is 850.
  4612                                  ;
  4613                                  ;
  4614                                  	;PUBLIC  COUNTRY_CDPG,UCASE_TAB,FILE_UCASE_TAB
  4615                                  	;PUBLIC  FILE_CHAR_TAB
  4616                                  
  4617                                  ; country and code page infomation
  4618                                  
  4619                                  COUNTRY_CDPG:	; label  byte
  4620 00000FFD 0000000000000000        	db	0,0,0,0,0,0,0,0		; reserved words
  4621 00001005 5C434F554E5452592E-     	db	'\COUNTRY.SYS',0	; path name of country.sys
  4621 0000100E 53595300           
  4622 00001012 00<rep 33h>             	times	51 db 0
  4623 00001045 B501                    	dw	437			; system code page id
  4624 00001047 0500                    	dw	5			; number of entries
  4625 00001049 02                      	db	SetUcase		; Ucase type
  4626 0000104A [8610]                  	dw	UCASE_TAB		; pointer to upper case table
  4627 0000104C 0000                    	dw	0			; segment of poiter
  4628 0000104E 04                      	db	SetUcaseFile		; Ucase file char type
  4629 0000104F [0811]                  	dw	FILE_UCASE_TAB		; pointer to file upper case table
  4630 00001051 0000                    	dw	0			; segment of poiter
  4631 00001053 05                      	db	SetFileList		; valid file chars type
  4632 00001054 [8A11]                  	dw	FILE_CHAR_TAB		; pointer to valid file char tab
  4633 00001056 0000                    	dw	0			; segment of poiter
  4634 00001058 06                      	db	SetCollate		; collate type
  4635 00001059 [BA11]                  	dw	COLLATE_TAB		; pointer to collate table
  4636 0000105B 0000                    	dw	0			; segment of pointer
  4637 0000105D 01                      	db	SetCountryInfo		; country info type
  4638 0000105E 2600                    	dw	NEW_COUNTRY_SIZE	; extended country info size
  4639 00001060 0100                    	dw	1			; USA country id
  4640 00001062 B501                    	dw	437			; USA system code page id
  4641 00001064 0000                    	dw	0			; date format
  4642 00001066 2400000000              	db	'$',0,0,0,0		; currency symbol
  4643 0000106B 2C00                    	db	',',0			; thousand separator
  4644 0000106D 2E00                    	db	'.',0			; decimal separator
  4645 0000106F 2D00                    	db	'-',0			; date separator
  4646 00001071 3A00                    	db	':',0			; time separator
  4647 00001073 00                      	db	0			; currency format flag
  4648 00001074 02                      	db	2			; # of disgit in currency
  4649 00001075 00                      	db	0			; time format
  4650 00001076 [FE17]                  	dw	MAP_CASE		;mono case routine entry point
  4651 00001078 0000                    	dw	0			; segment of entry point
  4652 0000107A 2C00                    	db	',',0			; data list separator
  4653 0000107C 000000000000000000-     	dw	0,0,0,0,0		; reserved
  4653 00001085 00                 
  4654                                  
  4655                                  ; upper case table
  4656                                  
  4657                                  UCASE_TAB: 	; label   byte
  4658 00001086 8000                    	dw	128
  4659 00001088 809A45418E418F80        	db	128,154,069,065,142,065,143,128
  4660 00001090 4545454949498E8F        	db	069,069,069,073,073,073,142,143
  4661 00001098 9092924F994F5555        	db	144,146,146,079,153,079,085,085
  4662 000010A0 59999A9B9C9D9E9F        	db	089,153,154,155,156,157,158,159
  4663 000010A8 41494F55A5A5A6A7        	db	065,073,079,085,165,165,166,167
  4664 000010B0 A8A9AAABACADAEAF        	db	168,169,170,171,172,173,174,175
  4665 000010B8 B0B1B2B3B4B5B6B7        	db	176,177,178,179,180,181,182,183
  4666 000010C0 B8B9BABBBCBDBEBF        	db	184,185,186,187,188,189,190,191
  4667 000010C8 C0C1C2C3C4C5C6C7        	db	192,193,194,195,196,197,198,199
  4668 000010D0 C8C9CACBCCCDCECF        	db	200,201,202,203,204,205,206,207
  4669 000010D8 D0D1D2D3D4D5D6D7        	db	208,209,210,211,212,213,214,215
  4670 000010E0 D8D9DADBDCDDDEDF        	db	216,217,218,219,220,221,222,223
  4671 000010E8 E0E1E2E3E4E5E6E7        	db	224,225,226,227,228,229,230,231
  4672 000010F0 E8E9EAEBECEDEEEF        	db	232,233,234,235,236,237,238,239
  4673 000010F8 F0F1F2F3F4F5F6F7        	db	240,241,242,243,244,245,246,247
  4674 00001100 F8F9FAFBFCFDFEFF        	db	248,249,250,251,252,253,254,255
  4675                                  
  4676                                  ; file upper case table
  4677                                  
  4678                                  FILE_UCASE_TAB: ; label  byte
  4679 00001108 8000                    	dw	128
  4680 0000110A 809A45418E418F80        	db	128,154,069,065,142,065,143,128
  4681 00001112 4545454949498E8F        	db	069,069,069,073,073,073,142,143
  4682 0000111A 9092924F994F5555        	db	144,146,146,079,153,079,085,085
  4683 00001122 59999A9B9C9D9E9F        	db	089,153,154,155,156,157,158,159
  4684 0000112A 41494F55A5A5A6A7        	db	065,073,079,085,165,165,166,167
  4685 00001132 A8A9AAABACADAEAF        	db	168,169,170,171,172,173,174,175
  4686 0000113A B0B1B2B3B4B5B6B7        	db	176,177,178,179,180,181,182,183
  4687 00001142 B8B9BABBBCBDBEBF        	db	184,185,186,187,188,189,190,191
  4688 0000114A C0C1C2C3C4C5C6C7        	db	192,193,194,195,196,197,198,199
  4689 00001152 C8C9CACBCCCDCECF        	db	200,201,202,203,204,205,206,207
  4690 0000115A D0D1D2D3D4D5D6D7        	db	208,209,210,211,212,213,214,215
  4691 00001162 D8D9DADBDCDDDEDF        	db	216,217,218,219,220,221,222,223
  4692 0000116A E0E1E2E3E4E5E6E7        	db	224,225,226,227,228,229,230,231
  4693 00001172 E8E9EAEBECEDEEEF        	db	232,233,234,235,236,237,238,239
  4694 0000117A F0F1F2F3F4F5F6F7        	db	240,241,242,243,244,245,246,247
  4695 00001182 F8F9FAFBFCFDFEFF        	db	248,249,250,251,252,253,254,255
  4696                                  
  4697                                  ; file char list
  4698                                  
  4699                                  FILE_CHAR_TAB:	; label  byte
  4700 0000118A 1600                    	dw	22				; length
  4701 0000118C 0100FF                  	db	1,0,255 			; include all
  4702 0000118F 000020                  	db	0,0,20h 			; exclude 0 - 20h
  4703 00001192 020E2E222F5C5B5D3A-     	db	2,14,'."/\[]:|<>+=;,'           ; exclude 14 special
  4703 0000119B 7C3C3E2B3D3B2C     
  4704                                  	;db	24 dup (?)			; reserved
  4705 000011A2 00<rep 18h>             	times	24 db 0
  4706                                  
  4707                                  ; collate table
  4708                                  
  4709                                  COLLATE_TAB:	; label   byte
  4710 000011BA 0001                    	dw	256
  4711 000011BC 0001020304050607        	db	0,1,2,3,4,5,6,7
  4712 000011C4 08090A0B0C0D0E0F        	db	8,9,10,11,12,13,14,15
  4713 000011CC 1011121314151617        	db	16,17,18,19,20,21,22,23
  4714 000011D4 18191A1B1C1D1E1F        	db	24,25,26,27,28,29,30,31
  4715 000011DC 2021222324252627        	db	" ","!",'"',"#","$","%","&","'"
  4716 000011E4 28292A2B2C2D2E2F        	db	"(",")","*","+",",","-",".","/"
  4717 000011EC 3031323334353637        	db	"0","1","2","3","4","5","6","7"
  4718 000011F4 38393A3B3C3D3E3F        	db	"8","9",":",";","<","=",">","?"
  4719 000011FC 4041424344454647        	db	"@","A","B","C","D","E","F","G"
  4720 00001204 48494A4B4C4D4E4F        	db	"H","I","J","K","L","M","N","O"
  4721 0000120C 5051525354555657        	db	"P","Q","R","S","T","U","V","W"
  4722 00001214 58595A5B5C5D5E5F        	db	"X","Y","Z","[","\","]","^","_"
  4723 0000121C 6041424344454647        	db	"`","A","B","C","D","E","F","G"
  4724 00001224 48494A4B4C4D4E4F        	db	"H","I","J","K","L","M","N","O"
  4725 0000122C 5051525354555657        	db	"P","Q","R","S","T","U","V","W"
  4726 00001234 58595A7B7C7D7E7F        	db	"X","Y","Z","{","|","}","~",127
  4727 0000123C 4355454141414143        	db	"C","U","E","A","A","A","A","C"
  4728 00001244 4545454949494141        	db	"E","E","E","I","I","I","A","A"
  4729 0000124C 4541414F4F4F5555        	db	"E","A","A","O","O","O","U","U"
  4730 00001254 594F552424242424        	db	"Y","O","U","$","$","$","$","$"
  4731 0000125C 41494F554E4EA6A7        	db	"A","I","O","U","N","N",166,167
  4732 00001264 3FA9AAABAC212222        	db	"?",169,170,171,172,"!",'"','"'
  4733 0000126C B0B1B2B3B4B5B6B7        	db	176,177,178,179,180,181,182,183
  4734 00001274 B8B9BABBBCBDBEBF        	db	184,185,186,187,188,189,190,191
  4735 0000127C C0C1C2C3C4C5C6C7        	db	192,193,194,195,196,197,198,199
  4736 00001284 C8C9CACBCCCDCECF        	db	200,201,202,203,204,205,206,207
  4737 0000128C D0D1D2D3D4D5D6D7        	db	208,209,210,211,212,213,214,215
  4738 00001294 D8D9DADBDCDDDEDF        	db	216,217,218,219,220,221,222,223
  4739 0000129C E053                    	db	224,"S"
  4740 0000129E E2E3E4E5E6E7            	db	226,227,228,229,230,231
  4741 000012A4 E8E9EAEBECEDEEEF        	db	232,233,234,235,236,237,238,239
  4742 000012AC F0F1F2F3F4F5F6F7        	db	240,241,242,243,244,245,246,247
  4743 000012B4 F8F9FAFBFCFDFEFF        	db	248,249,250,251,252,253,254,255
  4744                                  
  4745                                  ;include divmes.inc
  4746                                  
  4747                                  ; THIS IS THE ONLY DOS "MESSAGE". IT DOES NOT NEED A TERMINATOR.
  4748                                  	;PUBLIC	DIVMES
  4749                                  
  4750 000012BC 0D0A44697669646520-     DIVMES:	DB	13,10,"Divide overflow",13,10
  4750 000012C5 6F766572666C6F770D-
  4750 000012CE 0A                 
  4751                                  
  4752                                  	;PUBLIC	DivMesLen
  4753                                  DivMesLen:
  4754 000012CF 1300                    	DW	$-DIVMES	; Length of the above message in bytes
  4755                                  
  4756                                  ;SUBTTL EDIT FUNCTION ASSIGNMENTS AND HEADERS
  4757                                  
  4758                                  ; The following two tables implement the current buffered input editing
  4759                                  ; routines. The tables are pairwise associated in reverse order for ease
  4760                                  ; in indexing. That is; The first entry in ESCTAB corresponds to the last
  4761                                  ; entry in ESCFUNC, and the last entry in ESCTAB to the first entry in ESCFUNC.
  4762                                  
  4763                                  	;PUBLIC	CANCHAR
  4764                                  CANCHAR:
  4765 000012D1 1B                      	DB	CANCEL	; 1Bh	;Cancel line character
  4766                                  	
  4767                                  	;PUBLIC	ESCCHAR
  4768                                  ESCCHAR:
  4769 000012D2 00                      	DB	ESCCH	; 0	;Lead-in character for escape sequences
  4770                                  	
  4771                                  	;IF	NOT Rainbow
  4772                                  
  4773                                  ESCTAB:	; LABEL BYTE
  4774                                  
  4775                                  	;IF	IBM
  4776 000012D3 40                      	DB	64		; Ctrl-Z - F6
  4777 000012D4 4D                      	DB	77		; Copy one char - -->
  4778 000012D5 3B                      	DB	59		; Copy one char - F1
  4779 000012D6 53                      	DB	83		; Skip one char - DEL
  4780 000012D7 3C                      	DB	60		; Copy to char - F2
  4781 000012D8 3E                      	DB	62		; Skip to char - F4
  4782 000012D9 3D                      	DB	61		; Copy line - F3
  4783 000012DA 3D                      	DB	61		; Kill line (no change to template ) - Not used
  4784 000012DB 3F                      	DB	63		; Reedit line (new template) - F5
  4785 000012DC 4B                      	DB	75		; Backspace - <--
  4786 000012DD 52                      	DB	82		; Enter insert mode - INS (toggle)
  4787 000012DE 52                      	DB	82		; Exit insert mode - INS (toggle)
  4788 000012DF 41                      	DB	65		; Escape character - F7
  4789 000012E0 41                      	DB	65		; End of table
  4790                                  	;ENDIF
  4791                                  
  4792                                  ESCEND: ; LABEL BYTE
  4793                                  
  4794                                  ESCTABLEN EQU ESCEND-ESCTAB
  4795                                  
  4796                                  ESCFUNC: ; LABEL WORD
  4797                                  	
  4798 000012E1 [3F21]                  	short_addr  GETCH	; Ignore the escape sequence
  4799 000012E3 [2C22]                  	short_addr  TWOESC
  4800 000012E5 [B422]                  	short_addr  EXITINS
  4801 000012E7 [B422]                  	short_addr  ENTERINS
  4802 000012E9 [B621]                  	short_addr  BACKSP
  4803 000012EB [A022]                  	short_addr  REEDIT
  4804 000012ED [A321]                  	short_addr  KILNEW
  4805 000012EF [3322]                  	short_addr  COPYLIN
  4806 000012F1 [6622]                  	short_addr  SKIPSTR
  4807 000012F3 [3922]                  	short_addr  COPYSTR
  4808 000012F5 [5C22]                  	short_addr  SKIPONE
  4809 000012F7 [3E22]                  	short_addr  COPYONE
  4810 000012F9 [3E22]                  	short_addr  COPYONE
  4811 000012FB [BC22]                  	short_addr  CTRLZ
  4812                                  
  4813                                  	;ENDIF
  4814                                  
  4815                                  ;TABLE	ENDS
  4816                                  
  4817                                  ; 17/07/2018
  4818                                  ; Offset 12B1h of IBMDOS.COM (MSDOS 3.3), 1987
  4819                                  
  4820                                  ;CRTERRTAB: ; 19/07/2018	
  4821                                  ;	db	0,5,52h,50h,3,5,20h
  4822                                  
  4823                                  ; 08/08/2018
  4824                                  
  4825                                  CRTERRTAB:	;LABEL BYTE	; Lookup table for MakeNode returns
  4826 000012FD 00                      	DB	0			; none
  4827 000012FE 05                      	DB	error_access_denied	; MakeNode error 1
  4828 000012FF 52                      	DB	error_cannot_make	; MakeNode error 2
  4829 00001300 50                      	DB	error_file_exists	; MakeNode error 3
  4830 00001301 03                      	DB	error_path_not_found	; MakeNode error 4
  4831 00001302 05                      	DB	error_access_denied	; MakeNode error 5
  4832 00001303 20                      	DB	error_sharing_violation ; MakeNode error 6
  4833                                  	; MSDOS 6.0
  4834                                  	;DB	error_file_not_found	; MakeNode error 7
  4835                                  
  4836                                  ;============================================================================
  4837                                  ; DEV.ASM (MSDOS 6.0, 1987)
  4838                                  ;============================================================================
  4839                                  ; 17/07/2018 - Retro DOS v3.0
  4840                                  
  4841                                  ; Offset 12B8h of IBMDOS.COM (MSDOS 3.3), 1987
  4842                                  
  4843                                  ;Public DEV001S, DEV001E 		; Pathgen labels
  4844                                  ;DEV001s:
  4845                                  ;		length of packets
  4846 00001304 160E160D0F0E            LenTab:		DB	DRDWRHL, DRDNDHL, DRDWRHL, DSTATHL, DFLSHL, DRDNDHL
  4847                                  ;LenTab:	db	22,14,22,13,15,14
  4848                                  
  4849                                  ;	       Error Function
  4850                                  
  4851                                  CmdTab:
  4852 0000130A 8604                    	DB	86h, DEVRD	; 0 input
  4853 0000130C 8605                    	DB	86h, DEVRDND	; 1 input status
  4854 0000130E 8708                    	DB	87h, DEVWRT	; 2 output
  4855 00001310 870A                    	DB	87h, DEVOST	; 3 output status
  4856 00001312 8607                    	DB	86h, DEVIFL	; 4 input flush
  4857 00001314 8605                    	DB	86H, DEVRDND	; 5 input status with system WAIT
  4858                                  
  4859                                  ; Offset 12BEh of IBMDOS.COM (MSDOS 3.3), 1987
  4860                                  
  4861                                  ;CmdTab:
  4862                                  ;	db	86h, 4
  4863                                  ;	db	86h, 5
  4864                                  ;	db	87h, 8
  4865                                  ;	db	87h, 10
  4866                                  ;	db	86h, 7
  4867                                  ;	db	86h, 5
  4868                                  
  4869                                  ;DEV001E:
  4870                                  
  4871                                  ;============================================================================
  4872                                  ; FCB.ASM (MSDOS 6.0, 1987)
  4873                                  ;============================================================================
  4874                                  ; 17/07/2018 - Retro DOS v3.0
  4875                                  
  4876                                  ; Character type table for file name scanning
  4877                                  ; Table provides a mapping of characters to validity bits.
  4878                                  ; Four bits are provided for each character.  Values 7Dh and above
  4879                                  ; have all bits set, so that part of the table is chopped off, and
  4880                                  ; the translation routine is responsible for screening these values.
  4881                                  ; The bit values are defined in DOSSYM.INC
  4882                                  
  4883                                  ;	      ; ^A and NUL
  4884                                  ;CharType:
  4885                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
  4886                                  ;
  4887                                  ;	      ; ^C and ^B
  4888                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
  4889                                  ;
  4890                                  ;	      ; ^E and ^D
  4891                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
  4892                                  ;
  4893                                  ;	      ; ^G and ^F
  4894                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
  4895                                  ;
  4896                                  ;	      ; TAB and BS
  4897                                  ;	 db   LOW ((NOT FFCB+FCHK+FDELIM+FSPCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
  4898                                  ;
  4899                                  ;	      ; ^K and ^J
  4900                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
  4901                                  ;
  4902                                  ;	      ; ^M and ^L
  4903                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
  4904                                  ;
  4905                                  ;	      ; ^O and ^N
  4906                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
  4907                                  ;
  4908                                  ;	      ; ^Q and ^P
  4909                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
  4910                                  ;
  4911                                  ;	      ; ^S and ^R
  4912                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
  4913                                  ;
  4914                                  ;	      ; ^U and ^T
  4915                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
  4916                                  ;
  4917                                  ;	      ; ^W and ^V
  4918                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
  4919                                  ;
  4920                                  ;	      ; ^Y and ^X
  4921                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
  4922                                  ;
  4923                                  ;	      ; ESC and ^Z
  4924                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
  4925                                  ;
  4926                                  ;	      ; ^] and ^;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
  4928                                  ;
  4929                                  ;	      ; ^_ and ^^
  4930                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
  4931                                  ;
  4932                                  ;	      ; ! and SPACE
  4933                                  ;	 db   LOW (NOT FCHK+FDELIM+FSPCHK)
  4934                                  ;
  4935                                  ;	      ; # and "
  4936                                  ;	 db   LOW (NOT FFCB+FCHK)
  4937                                  ;
  4938                                  ;	      ; $ - )
  4939                                  ;	 db   3 dup (0FFh)
  4940                                  ;
  4941                                  ;	      ; + and *
  4942                                  ;	 db   LOW ((NOT FFCB+FCHK+FDELIM) SHL 4) OR 0Fh
  4943                                  ;
  4944                                  ;	      ; - and '
  4945                                  ;	 db   NOT (FFCB+FCHK+FDELIM)
  4946                                  ;
  4947                                  ;	      ; / and .
  4948                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FCHK) AND 0Fh
  4949                                  ;
  4950                                  ;	      ; 0 - 9
  4951                                  ;	 db   5 dup (0FFh)
  4952                                  ;
  4953                                  ;	      ; ; and :
  4954                                  ;	 db   LOW ((NOT FFCB+FCHK+FDELIM) SHL 4) OR LOW (NOT FFCB+FCHK+FDELIM) AND 0Fh
  4955                                  ;
  4956                                  ;	      ; = and <
  4957                                  ;	 db   LOW ((NOT FFCB+FCHK+FDELIM) SHL 4) OR LOW (NOT FFCB+FCHK+FDELIM) AND 0Fh
  4958                                  ;
  4959                                  ;	      ; ? and >
  4960                                  ;	 db   NOT FFCB+FCHK+FDELIM
  4961                                  ;
  4962                                  ;	      ; A - Z
  4963                                  ;	 db   13 dup (0FFh)
  4964                                  ;
  4965                                  ;	      ; \ and [
  4966                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR 0Fh
  4967                                  ;
  4968                                  ;	      ; ^ and ]
  4969                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
  4970                                  ;
  4971                                  ;	      ; _ - {
  4972                                  ;	 db   15 dup (0FFh)
  4973                                  ;
  4974                                  ;	      ; } and |
  4975                                  ;	 db   NOT FFCB+FCHK+FDELIM
  4976                                  
  4977                                  ;CharType_last equ ($ - CharType) * 2	; This is the value of the last
  4978                                  ;					; character in the table
  4979                                  
  4980                                  ; Offset 12CAh of IBMDOS.COM (MSDOS 3.3), 1987
  4981                                  
  4982                                  CharType:
  4983 00001316 F6F6F6F6F6F6F6F6                db 0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h
  4984 0000131E F6F0F6F6F6F6F6F6        	db 0F6h,0F0h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h
  4985 00001326 F6F6F6F6F6F6F6F6        	db 0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h
  4986 0000132E F6F6F6F6F6F6F6F6        	db 0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h
  4987 00001336 F8FFF6FFFFFFFFFF        	db 0F8h,0FFh,0F6h,0FFh,0FFh,0FFh,0FFh,0FFh
  4988 0000133E FFFFFFF4F4FFFEF6        	db 0FFh,0FFh,0FFh,0F4h,0F4h,0FFh,0FEh,0F6h
  4989 00001346 FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  4990 0000134E FFFFF4F4F4F4F4FF        	db 0FFh,0FFh,0F4h,0F4h,0F4h,0F4h,0F4h,0FFh
  4991 00001356 FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  4992 0000135E FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  4993 00001366 FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  4994 0000136E FFFFFFF6F6F6FFFF        	db 0FFh,0FFh,0FFh,0F6h,0F6h,0F6h,0FFh,0FFh
  4995 00001376 FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  4996 0000137E FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  4997 00001386 FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  4998 0000138E FFFFFFFFF4FFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0F4h,0FFh,0FFh,0FFh
  4999 00001396 FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  5000 0000139E FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  5001 000013A6 FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  5002 000013AE FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  5003 000013B6 FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  5004 000013BE FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  5005 000013C6 FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  5006 000013CE FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  5007 000013D6 FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  5008 000013DE FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  5009 000013E6 FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  5010 000013EE FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  5011 000013F6 FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  5012 000013FE FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  5013 00001406 FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  5014 0000140E FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
  5015                                  
  5016                                  ; 02/08/2018 - Retro DOS v3.0
  5017                                  ; DOSTAB.ASM - MSDOS 6.0 - 1991
  5018                                  
  5019                                  ; Offset 13CAh of IBMDOS.COM (MSDOS 3.3), 1987
  5020                                  
  5021 00001416 0000                    exec_init_SP:	dw 0
  5022 00001418 0000                    exec_init_SS:	dw 0
  5023 0000141A 0000                    exec_init_IP:	dw 0
  5024 0000141C 0000                    exec_init_CS:	dw 0
  5025                                  
  5026 0000141E 0000                    exec_signature:	dw 0	; must contain 4D5A  (yay zibo!)
  5027 00001420 0000                    exec_len_mod_512: dw 0	; low 9 bits of length
  5028 00001422 0000                    exec_pages:	dw 0	; number of 512b pages in file
  5029 00001424 0000                    exec_rle_count:	dw 0	; count of reloc entries
  5030 00001426 0000                    exec_par_dir:	dw 0	; number of paragraphs before image
  5031 00001428 0000                    exec_min_BSS:	dw 0	; minimum number of para of BSS
  5032 0000142A 0000                    exec_max_BSS:	dw 0	; max number of para of BSS
  5033 0000142C 0000                    exec_SS:	dw 0	; stack of image
  5034 0000142E 0000                    exec_SP:	dw 0	; SP of image
  5035 00001430 0000                    exec_chksum:	dw 0	; checksum  of file (ignored)
  5036 00001432 0000                    exec_IP:	dw 0	; IP of entry
  5037 00001434 0000                    exec_CS:	dw 0	; CS of entry
  5038 00001436 0000                    exec_rle_table:	dw 0	; byte offset of reloc table
  5039                                  
  5040                                  Exec_Header_Len	EQU $-exec_signature
  5041                                  
  5042                                  ; 02/08/2018 - Retro DOS v3.0
  5043                                  ; SRVCALL.ASM - MSDOS 6.0 - 1991
  5044                                  ;** Server DOS call functions
  5045                                  
  5046 00001438 [3C14]                  SERVERTAB:      dw SERVER_DISP
  5047 0000143A [E166]                  SERVERLEAVE:	dw SERVERRETURN
  5048 0000143C 0B                      SERVER_DISP:	db (SERVER_DISP_END-SERVER_DISP-1)/2
  5049 0000143D [4C67]                  		dw SRV_CALL	; 0
  5050 0000143F [E266]                  		dw COMMIT_ALL	; 1
  5051 00001441 [1967]                  		dw CLOSE_NAME	; 2
  5052 00001443 [2567]                  		dw CLOSE_UID	; 3
  5053 00001445 [2C67]                  		dw CLOSE_UID_PID ; 4
  5054 00001447 [3367]                  		dw GET_LIST	; 5
  5055 00001449 [8D67]                  		dw GET_DOS_DATA	; 6
  5056 0000144B [B167]                  		dw SPOOL_OPER	; 7
  5057 0000144D [B167]                  		dw SPOOL_OPER	; 8
  5058 0000144F [B167]                  		dw SPOOL_OPER	; 9
  5059 00001451 [C067]                  		dw _$SetExtendedError ; 10
  5060                                  SERVER_DISP_END:
  5061                                  
  5062                                  ;============================================================================
  5063                                  ; MSCODE.ASM
  5064                                  ;============================================================================
  5065                                  
  5066                                  ; Retro DOS v2.0 (NASM 2.11) source code modifications by Erdogan Tan
  5067                                  ; 03/03/2018
  5068                                  
  5069                                  ;
  5070                                  ; MSCODE.ASM -- MSDOS code
  5071                                  ;
  5072                                  
  5073                                  ;INCLUDE DOSSEG.ASM
  5074                                  ;INCLUDE STDSW.ASM
  5075                                  
  5076                                  ;CODE    SEGMENT BYTE PUBLIC  'CODE'
  5077                                  ;ASSUME  CS:DOSGROUP,DS:NOTHING,ES:NOTHING,SS:NOTHING
  5078                                  
  5079                                  ;.xcref
  5080                                  ;INCLUDE DOSSYM.ASM
  5081                                  ;INCLUDE DEVSYM.ASM
  5082                                  ;.cref
  5083                                  ;.list
  5084                                  
  5085                                  ;IFNDEF  KANJI
  5086                                  ;KANJI   EQU     0       ; FALSE
  5087                                  ;ENDIF
  5088                                  
  5089                                  ;IFNDEF  IBM
  5090                                  ;IBM     EQU     0
  5091                                  ;ENDIF
  5092                                  
  5093                                  ;IFNDEF  HIGHMEM
  5094                                  ;HIGHMEM  EQU     0
  5095                                  ;ENDIF
  5096                                  
  5097                                          ;i_need  USER_SP,WORD
  5098                                          ;i_need  USER_SS,WORD
  5099                                          ;i_need  SAVEDS,WORD
  5100                                          ;i_need  SAVEBX,WORD
  5101                                          ;i_need  INDOS,BYTE
  5102                                          ;i_need  NSP,WORD
  5103                                          ;i_need  NSS,WORD
  5104                                          ;i_need  CURRENTPDB,WORD
  5105                                          ;i_need  AUXSTACK,BYTE
  5106                                          ;i_need  CONSWAP,BYTE
  5107                                          ;i_need  IDLEINT,BYTE
  5108                                          ;i_need  NOSETDIR,BYTE
  5109                                          ;i_need  ERRORMODE,BYTE
  5110                                          ;i_need  IOSTACK,BYTE
  5111                                          ;i_need  WPERR,BYTE
  5112                                          ;i_need  DSKSTACK,BYTE
  5113                                          ;i_need  CNTCFLAG,BYTE
  5114                                          ;i_need  LEAVEADDR,WORD
  5115                                          ;i_need  NULLDEVPT,DWORD
  5116                                  
  5117                                          ;IF NOT IBM
  5118                                          ;i_need  OEM_HANDLER,DWORD
  5119                                          ;ENDIF
  5120                                  
  5121                                          ;EXTRN   DSKSTATCHK:NEAR,GETBP:NEAR,DSKREAD:NEAR,DSKWRITE:NEAR
  5122                                  
  5123                                  ;============================================================================
  5124                                  ; MSDISP.ASM, MSDOS 6.0, 1991
  5125                                  ;============================================================================
  5126                                  ; 11/07/2018 - Retro DOS v3.0
  5127                                  
  5128                                  ; 18/07/2018
  5129                                  
  5130                                  ; The following two routines are dispatched to directly with ints disabled
  5131                                  ; immediately after the int 21h entry.	no DIS state is set.
  5132                                  
  5133                                  ; ---------------------------------------------------------------------------
  5134                                  ; $Set_current_PDB takes BX and sets it to be the current process
  5135                                  ;   *** THIS FUNCTION CALL IS SUBJECT TO CHANGE!!! ***
  5136                                  ;
  5137                                         ;procedure   $SET_CURRENT_PDB,NEAR
  5138                                  _$SET_CURRENT_PDB:
  5139                                          ;ASSUME	DS:NOTHING,SS:NOTHING
  5140 00001453 2E891E[DE02]                    MOV     [CS:CurrentPDB],BX ; 12/03/2018
  5141 00001458 CF                      	iret ; 08/07/2018 - Retro DOS v3.0
  5142                                  ;$SET_CURRENT_PDB    ENDP
  5143                                  
  5144                                  ; ---------------------------------------------------------------------------
  5145                                  ; $get_current_PDB returns in BX the current process
  5146                                  ;   *** THIS FUNCTION CALL IS SUBJECT TO CHANGE!!! ***
  5147                                  ;
  5148                                          ;procedure $GET_CURRENT_PDB,NEAR
  5149                                  _$GET_CURRENT_PDB:
  5150                                          ;ASSUME	DS:NOTHING,SS:NOTHING
  5151 00001459 2E8B1E[DE02]            	mov	BX,[CS:CurrentPDB] ; 11/07/2018
  5152 0000145E CF                      	iret ; 08/07/2018 - Retro DOS v3.0
  5153                                  ;$GET_CURRENT_PDB    ENDP
  5154                                  ; ---------------------------------------------------------------------------
  5155                                  
  5156                                  ; 11/07/2018 - Retro DOS v3.0
  5157                                  
  5158                                  ;BREAK <$Set_CTRL_C_Trapping -- En/Disable ^C check in dispatcher>
  5159                                  
  5160                                  _$SET_CTRL_C_TRAPPING:
  5161                                  
  5162                                  ; Inputs:
  5163                                  ;       AL = 0 read ^C status
  5164                                  ;       AL = 1 Set ^C status, DL = 0/1 for ^C off/on
  5165                                  ;	AL = 2 Set ^C status to contents of DL.	Output is old state.
  5166                                  ;	     (MSDISP.ASM,MSDOS 6.0, 1991)
  5167                                  ; Function:
  5168                                  ;       Enable disable ^C checking in dispatcher
  5169                                  ; Outputs:
  5170                                  ;       If AL = 0 then DL = 0/1 for ^C off/on
  5171                                  
  5172                                  	; 08/07/2018 - Retro DOS v3.0
  5173                                  
  5174 0000145F 08C0                            OR      AL,AL
  5175 00001461 7506                            JNZ     SHORT CTRL_C_set
  5176                                  
  5177                                  	; 11/07/2018
  5178 00001463 2E8A16[E502]            	mov	dl,[CS:CNTCFLAG]
  5179 00001468 CF                      	iret
  5180                                  
  5181                                  CTRL_C_set:
  5182                                  	; 08/07/2018
  5183 00001469 3C02                    	cmp	al,2
  5184 0000146B 7716                    	ja	short bad_val
  5185 0000146D 740B                    	je	short scct_3
  5186                                  
  5187 0000146F 52                      	push    dx
  5188 00001470 80E201                  	and     dl,1
  5189 00001473 2E8816[E502]            	mov     [cs:CNTCFLAG],dl
  5190 00001478 5A                      	pop     dx
  5191 00001479 CF                      	iret
  5192                                  
  5193                                  scct_3:
  5194 0000147A 80E201                  	and	dl,1
  5195 0000147D 2E8616[E502]                    xchg	dl,[CS:CNTCFLAG]
  5196 00001482 CF                              iret
  5197                                  
  5198                                  bad_val:
  5199 00001483 B0FF                    	MOV	AL,0FFH
  5200 00001485 CF                      	iret
  5201                                  
  5202                                  ; 11/07/2018
  5203                                  
  5204                                  _$SET_PRINTER_FLAG:
  5205                                  	; 08/07/2018 - Retro DOS v3.0
  5206                                  	;mov 	[cs:IOSTACK],al
  5207 00001486 2EA2[060A]              	mov	[cs:PRINTER_FLAG],al
  5208 0000148A CF                      	iret
  5209                                  
  5210                                  ; 08/07/2018 - Retro DOS v3.0
  5211                                  ; (MSDISP.ASM, MSDOS 6.0, 1991)
  5212                                  
  5213                                  ; ----------------------------------------------------------------------------
  5214                                  ; BREAK   <System call entry points and dispatcher>
  5215                                  ; ----------------------------------------------------------------------------
  5216                                  ;ASSUME  CS:DOSGROUP,DS:NOTHING,ES:NOTHING,SS:NOTHING
  5217                                  
  5218                                          ;procedure   SYSTEM_CALL,NEAR
  5219                                  SYSTEM_CALL:
  5220                                  ;entry	QUIT				; INT 20H entry point
  5221                                  QUIT:
  5222                                  	;MOV	AH,0
  5223 0000148B 30E4                    	xor	ah,ah ; 08/07/2018
  5224 0000148D EB47                    	JMP     SHORT SAVREGS
  5225                                  
  5226                                  ; ---------------------------------------------------------------------------
  5227                                  
  5228                                  ;COMMAND:
  5229                                  ;	;IF	NOT IBM
  5230                                  ;       CMP	AH,SET_OEM_HANDLER
  5231                                  ;       JB      SHORT NOTOEM
  5232                                  ;	; 18/07/2018
  5233                                  ;	je	_$SET_OEM_HANDLER	
  5234                                  ;
  5235                                  ;	; 20/04/2018
  5236                                  ;       ;JMP	_$SET_OEM_HANDLER
  5237                                  ;
  5238                                  ;	; Retro DOS v2.0 - 20/04/2018
  5239                                  ;	CMP	AX, 0FFFFh
  5240                                  ;	;JNE	_$SET_OEM_HANDLER
  5241                                  ;	; 18/07/2018
  5242                                  ;	jne	DO_OEM_FUNC
  5243                                  ;
  5244                                  ;	PUSHA
  5245                                  ;	MOV     SI,RETRODOSMSG
  5246                                  ;       ;CALL	OUTMES
  5247                                  ;wrdosmsg:
  5248                                  ;	mov	ah, 0Eh
  5249                                  ;	mov	bx, 7
  5250                                  ;wrdosmsg_nxt:
  5251                                  ;	cs	lodsb
  5252                                  ;	cmp	al, '$'
  5253                                  ;	je	short wrdosmsg_ok		
  5254                                  ;	int	10h
  5255                                  ;	jmp	short wrdosmsg_nxt
  5256                                  ;wrdosmsg_ok:
  5257                                  ;	POPA
  5258                                  ;	JMP	SHORT BADCALL 
  5259                                  ;	;
  5260                                  ;NOTOEM:
  5261                                  ;	;ENDIF
  5262                                  ;
  5263                                  ;       CMP     AH,MAXCOM
  5264                                  ;       JBE     SHORT SAVREGS
  5265                                  
  5266                                  	; The system call in AH is out of the range that we know how
  5267                                  	; to handle. We arbitrarily set the contents of AL to 0 and
  5268                                  	; IRET. Note that we CANNOT set the carry flag to indicate an
  5269                                  	; error as this may break some programs compatability.
  5270                                  
  5271                                  BADCALL:
  5272                                          ;MOV	AL,0
  5273 0000148F 30C0                    	xor	al,al ; 08/07/2018
  5274                                  ;entry	IRET
  5275                                  _IRET:
  5276 00001491 CF                              IRET
  5277                                  
  5278                                  ; ---------------------------------------------------------------------------
  5279                                  
  5280                                  ;entry	CALL_ENTRY                      ; System call entry point and dispatcher
  5281                                  CALL_ENTRY:
  5282 00001492 58                              POP     AX                      ; IP from the long call at 5
  5283 00001493 58                              POP     AX                      ; Segment from the long call at 5
  5284                                          ;POP	WORD [USER_SP]		; IP from the CALL 5
  5285 00001494 2E8F06[1E05]                    POP	WORD [CS:USER_SP] ; 12/03/2018
  5286 00001499 9C                      	PUSHF                           ; Start re-ordering the stack
  5287 0000149A FA                              CLI
  5288 0000149B 50                              PUSH    AX                      ; Save segment
  5289                                          ;PUSH	WORD [USER_SP]		; Stack now ordered as if INT had been used
  5290 0000149C 2EFF36[1E05]                    PUSH	WORD [CS:USER_SP] ; 12/03/2018
  5291 000014A1 80F924                          CMP     CL,MAXCALL              ; This entry point doesn't get as many calls
  5292 000014A4 77E9                            JA      SHORT BADCALL
  5293 000014A6 88CC                            MOV     AH,CL
  5294                                  	; 08/07/2018
  5295 000014A8 EB2C                    	jmp	short SAVREGS 
  5296                                  
  5297                                  COMMAND:
  5298                                  	; 08/07/2018 - Retro DOS v3.0
  5299                                  
  5300                                  	;IF	NOT IBM
  5301 000014AA 80FCF8                          CMP	AH,SET_OEM_HANDLER
  5302 000014AD 7221                            JB      SHORT NOTOEM
  5303                                  	; 18/07/2018
  5304 000014AF 0F845E01                	je	_$SET_OEM_HANDLER	
  5305                                  
  5306                                  	; 20/04/2018
  5307                                          ;JMP	_$SET_OEM_HANDLER
  5308                                  
  5309                                  	; Retro DOS v2.0 - 20/04/2018
  5310 000014B3 83F8FF                  	CMP	AX,0FFFFh
  5311                                  	;JNE	_$SET_OEM_HANDLER
  5312                                  	; 18/07/2018
  5313 000014B6 0F856201                	jne	DO_OEM_FUNC
  5314                                  
  5315 000014BA 60                      	PUSHA
  5316 000014BB BE[4E0C]                	MOV     SI,RETRODOSMSG
  5317                                          ;CALL	OUTMES
  5318                                  wrdosmsg:
  5319 000014BE B40E                    	mov	ah, 0Eh
  5320 000014C0 BB0700                  	mov	bx, 7
  5321                                  wrdosmsg_nxt:
  5322 000014C3 2EAC                    	cs	lodsb
  5323 000014C5 3C24                    	cmp	al, '$'
  5324 000014C7 7404                    	je	short wrdosmsg_ok		
  5325 000014C9 CD10                    	int	10h
  5326 000014CB EBF6                    	jmp	short wrdosmsg_nxt
  5327                                  wrdosmsg_ok:
  5328 000014CD 61                      	POPA
  5329 000014CE EBBF                    	JMP	SHORT BADCALL 
  5330                                  	;
  5331                                  
  5332                                  NOTOEM:
  5333                                  	;ENDIF
  5334                                  
  5335 000014D0 FA                      	cli	; 08/07/2018
  5336                                  
  5337                                  _COMMAND: ; MSDOS 3.3 (IBM)
  5338                                  
  5339 000014D1 80FC68                          CMP     AH,MAXCOM
  5340                                  	;JBE	SHORT SAVREGS
  5341 000014D4 77B9                            JA	SHORT BADCALL ; 08/07/2018
  5342                                  
  5343                                  SAVREGS:
  5344                                  	; 10/08/2018
  5345                                  	; 08/07/2018 - Retro DOS v3.0
  5346 000014D6 80FC33                  	cmp	ah,33h
  5347 000014D9 7484                    	jz	short _$SET_CTRL_C_TRAPPING
  5348 000014DB 721C                    	jb	short SaveAllRegs
  5349 000014DD 80FC64                  	cmp	ah,64h
  5350 000014E0 7717                    	ja	short SaveAllRegs
  5351 000014E2 74A2                    	jz	short _$SET_PRINTER_FLAG
  5352 000014E4 80FC51                  	cmp	ah,51h
  5353 000014E7 0F846EFF                	jz	_$GET_CURRENT_PDB
  5354 000014EB 80FC62                  	cmp	ah,62h
  5355 000014EE 0F8467FF                	jz	_$GET_CURRENT_PDB
  5356 000014F2 80FC50                  	cmp     ah,50h
  5357 000014F5 0F845AFF                	jz	_$SET_CURRENT_PDB
  5358                                  SaveAllRegs:
  5359 000014F9 E8FC00                          CALL    save_world
  5360 000014FC 2E8C1E[7E05]                    MOV	[CS:SAVEDS],DS	; 12/03/2018
  5361 00001501 2E891E[7C05]                    MOV	[CS:SAVEBX],BX	; 12/03/2018
  5362 00001506 8CCB                            MOV     BX,CS
  5363 00001508 8EDB                            MOV     DS,BX
  5364                                  ;ASSUME  DS:DOSGROUP
  5365 0000150A FE06[CF02]                      INC     BYTE [INDOS]		; Flag that we're in the DOS
  5366                                  	
  5367                                  	; 08/07/2018 - Retro DOS v3.0        
  5368 0000150E 31C0                    	xor     ax, ax
  5369 00001510 A3[EA02]                	mov     [USER_ID],ax
  5370 00001513 A1[DE02]                	mov     ax,[CurrentPDB]
  5371 00001516 A3[E802]                	mov     [PROC_ID],ax
  5372                                  
  5373 00001519 A1[1E05]                	MOV     AX,[USER_SP]
  5374 0000151C A3[8405]                        MOV     [NSP],AX
  5375 0000151F A1[2005]                        MOV     AX,[USER_SS]
  5376 00001522 A3[8205]                        MOV     [NSS],AX
  5377 00001525 58                              POP     AX
  5378 00001526 50                              PUSH    AX
  5379 00001527 8926[1E05]                      MOV     [USER_SP],SP
  5380 0000152B 8C16[2005]                      MOV     [USER_SS],SS
  5381                                  ;
  5382                                  ; save user stack in his area for later returns (possibly from EXEC)
  5383                                  ; Here comes multitasking!!!
  5384                                  ;
  5385 0000152F 8E1E[DE02]                      MOV     DS,[CurrentPDB]
  5386 00001533 89262E00                        MOV     [PDB.USER_STACK],SP
  5387 00001537 8C163000                        MOV     [PDB.USER_STACK+2],SS
  5388                                  	; 18/07/2018
  5389 0000153B 2EC606[0D05]00          	mov	byte [CS:FSHARING], 0
  5390                                  
  5391 00001541 8CCB                            MOV     BX,CS                   ; no holes here.
  5392 00001543 8ED3                            MOV     SS,BX
  5393                                  ;ASSUME  SS:DOSGROUP
  5394                                  
  5395                                  ;entry	REDISP
  5396                                  REDISP:
  5397 00001545 BC[0607]                        MOV     SP,AUXSTACK		; Enough stack for interrupts
  5398 00001548 FB                              STI                             ; Stack OK now
  5399                                  	; 08/07/2018
  5400                                          ;PUSH	CS
  5401                                          ;POP	DS
  5402 00001549 8CCB                    	mov	bx,cs
  5403 0000154B 8EDB                    	mov	ds,bx
  5404 0000154D 30FF                            XOR     BH,BH
  5405 0000154F 883E[0303]                      MOV     [CONSWAP],BH
  5406 00001553 C606[0403]01                    MOV     BYTE [IDLEINT],1
  5407 00001558 883E[F802]                      MOV     BYTE [NoSetDir],bh ; 0	; set directories on search
  5408 0000155C 883E[F602]                      mov	byte [FAILERR],bh ; 0	
  5409 00001560 88E3                    	MOV     BL,AH
  5410 00001562 D1E3                            SHL     BX,1
  5411 00001564 FC                              CLD
  5412 00001565 08E4                            OR      AH,AH
  5413 00001567 7416                            JZ      SHORT DSKROUT		; ABORT
  5414                                  
  5415                                          ;CMP	AH,12
  5416                                          ;JBE	SHORT IOROUT		; Character I/O
  5417                                          ;CMP	AH,GET_CURRENT_PDB      ; INT 24 needs GET,SET PDB
  5418                                          ;JZ	SHORT IOROUT
  5419                                          ;CMP	AH,SET_CURRENT_PDB
  5420                                          ;JNZ	SHORT DSKROUT
  5421                                  
  5422                                  	; 10/08/2018
  5423 00001569 80FC59                  	cmp     ah,GETEXTENDEDERROR ; 59h
  5424 0000156C 743D                    	jz      short DISPCALL
  5425 0000156E 80FC0C                  	cmp     ah,STD_CON_INPUT_FLUSH ; 0Ch
  5426 00001571 770C                    	ja      short DSKROUT
  5427                                  
  5428                                  IOROUT:
  5429 00001573 803E[CE02]00                    CMP     BYTE [ERRORMODE],0
  5430 00001578 7531                            JNZ     SHORT DISPCALL		; Stay on AUXSTACK if INT 24
  5431 0000157A BC[060A]                        MOV     SP,IOSTACK
  5432 0000157D EB2C                            JMP     SHORT DISPCALL
  5433                                  
  5434                                  DSKROUT:
  5435                                  	; 08/07/2018 - Retro DOS v3.0
  5436 0000157F A3[E602]                        mov     [USER_IN_AX],ax
  5437 00001582 C606[D102]01            	mov     byte [EXTERR_LOCUS],1	; errLOC_Unk  (Default)
  5438                                  
  5439 00001587 C606[CE02]00                    MOV     BYTE [ERRORMODE],0	; Cannot make non 1-12 calls in
  5440 0000158C C606[D002]FF                    MOV     BYTE [WPERR],-1		; error mode, so good place to
  5441                                                                          ; make sure flags are reset
  5442 00001591 50                      	push    ax
  5443 00001592 B482                    	mov     ah, 82h
  5444 00001594 CD2A                    	int     2Ah 		; Microsoft Networks 
  5445                                  				; END DOS CRITICAL SECTIONS 0 THROUGH 7
  5446 00001596 58                      	pop     ax
  5447 00001597 C606[0403]00            	mov     byte [IDLEINT],0
  5448                                  
  5449 0000159C BC[8608]                        MOV     SP,DSKSTACK
  5450 0000159F F606[E502]FF                    TEST    BYTE [CNTCFLAG],-1
  5451 000015A4 7405                            JZ      SHORT DISPCALL
  5452 000015A6 50                              PUSH    AX
  5453                                          ;invoke	DSKSTATCHK
  5454 000015A7 E8AB40                          CALL	DSKSTATCHK
  5455 000015AA 58                      	POP     AX
  5456                                  DISPCALL:
  5457                                  	; 08/07/2018 -Retro DOS v3.0
  5458                                  	;;;PUSH	WORD [LEAVEADDR] ; (***)
  5459                                          ;;;PUSH	WORD [CS:BX+DISPATCH]
  5460                                          ;;;;PUSH WORD [BX+DISPATCH]
  5461                                  
  5462                                  	; 11/07/2018	
  5463                                  	;mov	bx,[CS:BX+DISPATCH]
  5464 000015AB 8B9F[060E]               	mov	bx,[bx+DISPATCH] 
  5465                                  
  5466                                  	;;;MOV	BX,[SAVEBX]
  5467 000015AF 871E[7C05]              	xchg    bx,[SAVEBX]        
  5468                                  
  5469 000015B3 8E1E[7E05]              	MOV     DS,[SAVEDS]
  5470                                  ;ASSUME	DS:NOTHING
  5471                                          ;return
  5472                                  ;;;	RETN	
  5473                                  
  5474 000015B7 36FF16[7C05]            	call	word [SS:SAVEBX]
  5475                                  
  5476                                  ;entry LEAVE
  5477                                  ;;;_LEAVE:				; Exit from a system call
  5478                                  LeaveDOS: ; 18/07/2018 
  5479                                  ;ASSUME	SS:NOTHING			; User routines may misbehave
  5480 000015BC FA                      	CLI
  5481                                          ; 12/03/2018
  5482 000015BD 2EFE0E[CF02]            	DEC     BYTE [CS:INDOS]
  5483 000015C2 2E8B26[1E05]                    MOV     SP,[CS:USER_SP]
  5484 000015C7 2E8E16[2005]                    MOV     SS,[CS:USER_SS]
  5485 000015CC 89E5                    	MOV     BP,SP
  5486                                  	;MOV	[BP.user_AX],AL	
  5487                                          ;MOV	[BP+user_env.user_AX],AL  ; user_env.user_AX = 0
  5488 000015CE 884600                          MOV     [BP],AL
  5489 000015D1 2EA1[8405]              	MOV     AX,[CS:NSP]
  5490 000015D5 2EA3[1E05]                      MOV     [CS:USER_SP],AX
  5491 000015D9 2EA1[8205]                      MOV     AX,[CS:NSS]
  5492 000015DD 2EA3[2005]                      MOV     [CS:USER_SS],AX
  5493 000015E1 E80100                  	CALL    restore_world
  5494                                  
  5495 000015E4 CF                              IRET
  5496                                  
  5497                                  ;SYSTEM_CALL ENDP
  5498                                  
  5499                                  ;
  5500                                  ; restore_world restores all registers ('cept SS:SP, CS:IP, flags) from
  5501                                  ; the stack prior to giving the user control
  5502                                  ;
  5503                                  
  5504                                  ; 11/07/2018 - Retro DOS v3.0
  5505                                          ;ASSUME  DS:NOTHING,ES:NOTHING
  5506                                  ;;restore_tmp DW  ?
  5507                                  ;restore_tmp: 
  5508                                  ;	dw	0
  5509                                          ;procedure restore_world,NEAR
  5510                                  restore_world:
  5511 000015E5 2E8F06[8005]                    POP	WORD [CS:RESTORE_TMP] ; 12/03/2018
  5512 000015EA 58                              POP     AX              ; PUSH    ES
  5513 000015EB 5B                              POP     BX              ; PUSH    DS
  5514 000015EC 59                              POP     CX              ; PUSH    BP
  5515 000015ED 5A                              POP     DX              ; PUSH    DI
  5516 000015EE 5E                              POP     SI              ; PUSH    SI
  5517 000015EF 5F                              POP     DI              ; PUSH    DX
  5518 000015F0 5D                              POP     BP              ; PUSH    CX
  5519 000015F1 1F                              POP     DS              ; PUSH    BX
  5520 000015F2 07                              POP     ES              ; PUSH    AX
  5521                                  	; 07/07/2018 - Retro DOS v3.0
  5522 000015F3 2EFF26[8005]                   	jmp	word [CS:RESTORE_TMP]
  5523                                  
  5524                                  ;restore_world	ENDP
  5525                                  
  5526                                  ;
  5527                                  ; save_world saves complete registers on the stack
  5528                                  ;
  5529                                          ;procedure save_world,NEAR
  5530                                  save_world:
  5531 000015F8 2E8F06[8005]                    POP	WORD [CS:RESTORE_TMP] ; 12/03/2018
  5532 000015FD 06                              PUSH    ES
  5533 000015FE 1E                              PUSH    DS
  5534 000015FF 55                              PUSH    BP
  5535 00001600 57                              PUSH    DI
  5536 00001601 56                              PUSH    SI
  5537 00001602 52                              PUSH    DX
  5538 00001603 51                              PUSH    CX
  5539 00001604 53                              PUSH    BX
  5540 00001605 50                              PUSH    AX
  5541                                  	; 07/07/2018 - Retro DOS v3.0
  5542 00001606 2EFF26[8005]                   	jmp	word [CS:RESTORE_TMP]
  5543                                  
  5544                                  ;save_world	ENDP
  5545                                  
  5546                                  ;
  5547                                  ; get_user_stack returns the user's stack (and hence registers) in DS:SI
  5548                                  ;
  5549                                          ;procedure get_user_stack,NEAR
  5550                                  Get_User_Stack:
  5551                                          ;LDS	SI,DWORD PTR [USER_SP]
  5552                                          ;LDS	SI,[USER_SP]
  5553 0000160B 2EC536[1E05]                    LDS	SI,[CS:USER_SP] ; 12/03/2018
  5554                                  	;return
  5555 00001610 C3                      	RETN
  5556                                  
  5557                                  ;get_user_stack  ENDP
  5558                                  
  5559                                  ; ---------------------------------------------------------------------------
  5560                                  ;
  5561                                  ; Set_OEM_Handler -- Set OEM sys call address and handle OEM Calls
  5562                                  ; Inputs:
  5563                                  ;	User registers, User Stack, INTS disabled
  5564                                  ;	If CALL F8, DS:DX is new handler address
  5565                                  ; Function:
  5566                                  ;	Process OEM INT 21 extensions
  5567                                  ; Outputs:
  5568                                  ;	Jumps to OEM_HANDLER if appropriate
  5569                                  ;
  5570                                  ; ---------------------------------------------------------------------------
  5571                                  
  5572                                  ;IF	NOT IBM
  5573                                  
  5574                                  _$SET_OEM_HANDLER:
  5575                                  	; 18/07/2018
  5576                                  
  5577                                  	;JNE	short DO_OEM_FUNC	; If above F8 try to jump to handler
  5578 00001611 2E8916[1400]            	MOV     [CS:OEM_HANDLER],DX	; Set Handler
  5579 00001616 2E8C1E[1600]            	MOV     [CS:OEM_HANDLER+2],DS
  5580 0000161B CF                      	IRET                            ; Quick return, Have altered no registers
  5581                                  
  5582                                  DO_OEM_FUNC:
  5583 0000161C 2E833E[1400]FF          	CMP     WORD [CS:OEM_HANDLER],-1
  5584 00001622 7503                    	JNZ     short OEM_JMP
  5585 00001624 E968FE                  	JMP     BADCALL                 ; Handler not initialized
  5586                                  
  5587                                  OEM_JMP:
  5588 00001627 2EFF2E[1400]            	JMP     FAR [CS:OEM_HANDLER]
  5589                                  
  5590                                  ;       ENDIF
  5591                                  
  5592                                  ;============================================================================
  5593                                  ; DOSTAB.ASM - MSDOS 6.0 - 1991
  5594                                  ;============================================================================
  5595                                  ; 11/07/2018 - Retro DOS v3.0
  5596                                  
  5597                                  ; the nul device driver used to be part of the code.  However, since the 
  5598                                  ; header is in the data, and the entry points are only given as an offset,
  5599                                  ; the strategy and interrupt entry points must also be in the data now.
  5600                                  ;
  5601                                  
  5602                                  ;procedure	snuldev,far
  5603                                  SNULDEV:
  5604                                  ;assume ds:nothing,es:nothing,ss:nothing, cs:dosdata
  5605                                  ; Offset 1599h in IBMDOS.COM (MSDOS 3.3), 1987
  5606                                  	;or	word [ES:BX+3],0100h
  5607 0000162C 26814F030001             	OR	word [ES:BX+SRHEAD.REQSTAT],STDON ; set done bit
  5608                                  ;entry inuldev
  5609                                  INULDEV:
  5610 00001632 CB                      	retf				; must not be a return!
  5611                                  ;endproc snuldev
  5612                                  
  5613                                  ;============================================================================
  5614                                  ; MSCODE.ASM - MSDOS 6.0 - 1991
  5615                                  ;============================================================================
  5616                                  ; 18/07/2018 - Retro DOS v3.0
  5617                                  
  5618                                  ;BREAK <AbsDRD, AbsDWRT -- INT int_disk_read, int_disk_write handlers>>
  5619                                  
  5620                                  
  5621                                  ;   AbsSetup - setup for abs disk functions
  5622                                  ;----------------------------------------------------------------------------
  5623                                  
  5624                                  AbsSetup:
  5625 00001633 36FE06[CF02]            	INC	byte [SS:INDOS]		; SS override
  5626 00001638 FB                      	STI
  5627 00001639 FC                      	CLD
  5628 0000163A 1E                      	PUSH	DS
  5629 0000163B 16                      	push	ss
  5630 0000163C 1F                      	pop	ds
  5631 0000163D E89100                  	CALL	GETBP
  5632 00001640 7206                    	JC	short errdriv 		; PM. error drive ;AN000;
  5633 00001642 26C7461EFFFF            	MOV	WORD [ES:BP+DPB.FREE_CNT],-1 ; do not trust user at all.
  5634                                  errdriv:
  5635 00001648 1F                      	POP	DS
  5636 00001649 7301                    	jnc	short AbsSetup2
  5637                                  AbsSetup_retn:
  5638 0000164B C3                      	retn
  5639                                  
  5640                                  AbsSetup2:
  5641                                  	; MSDOS 6.0
  5642                                  	;				; SS override
  5643                                  	;MOV	word [SS:HIGH_SECTOR],0 ;>32mb	from API		;AN000;
  5644                                  	;CALL	RW32_CONVERT		;>32mb convert 32bit format to 16bit ;AN000;
  5645 0000164C 72FD                    	jc	short AbsSetup_retn
  5646                                  	;call	SET_RQ_SC_PARMS 	;LB. set up SC parms		;AN000;
  5647                                  
  5648                                  	; MSDOS 3.3 (& MSDOS 6.0)
  5649 0000164E 1E                      	PUSH	DS
  5650 0000164F 56                      	PUSH	SI
  5651 00001650 50                      	PUSH	AX
  5652                                  
  5653 00001651 16                      	push	ss
  5654 00001652 1F                      	pop	ds
  5655                                  	
  5656 00001653 BE[6003]                	MOV	SI,OPENBUF
  5657 00001656 8804                    	MOV	[SI],AL
  5658 00001658 800441                  	ADD	BYTE [SI],"A"
  5659 0000165B C744013A00              	MOV	WORD [SI+1],003AH ; ":",0
  5660 00001660 B80003                  	MOV	AX,0300H
  5661 00001663 F8                      	CLC
  5662 00001664 CD2A                    	INT	int_IBM 		; Will set carry if shared
  5663 00001666 58                      	POP	AX
  5664 00001667 5E                      	POP	SI
  5665 00001668 1F                      	POP	DS
  5666 00001669 73E0                    	jnc	short AbsSetup_retn
  5667                                  
  5668                                  	;mov	word [ss:EXTERR],32h
  5669 0000166B 36C706[D202]3200        	MOV	word [ss:EXTERR],error_not_supported
  5670 00001672 C3                      	retn
  5671                                  
  5672                                  ;---------------------------------------------------------------------------
  5673                                  ;
  5674                                  ; Procedure Name : ABSDRD
  5675                                  ;
  5676                                  ; Interrupt 25 handler.  Performs absolute disk read.
  5677                                  ; Inputs:	AL - 0-based drive number
  5678                                  ;		DS:BX point to destination buffer
  5679                                  ;		CX number of logical sectors to read
  5680                                  ;		DX starting  logical sector number (0-based)
  5681                                  ; Outputs:	Original flags still on stack
  5682                                  ;		Carry set
  5683                                  ;		    AH error from BIOS
  5684                                  ;		    AL same as low byte of DI from INT 24
  5685                                  ;
  5686                                  ;---------------------------------------------------------------------------
  5687                                          ;procedure   ABSDRD,FAR
  5688                                  ABSDRD:
  5689                                  	; 15/07/2018
  5690                                  ;ASSUME  DS:NOTHING,ES:NOTHING,SS:NOTHING
  5691 00001673 FA                              CLI
  5692                                          ;MOV	[USER_SS],SS
  5693                                          ;MOV	[USER_SP],SP
  5694                                  	; 15/03/2018
  5695 00001674 2E8C16[2005]                    MOV	[CS:USER_SS],SS
  5696 00001679 2E8926[1E05]                    MOV	[CS:USER_SP],SP        
  5697 0000167E 0E                      	PUSH    CS
  5698 0000167F 17                              POP     SS
  5699                                  ;ASSUME  SS:DOSGROUP
  5700 00001680 BC[8608]                        MOV	SP,DSKSTACK
  5701                                  
  5702                                  	;; MSDOS 2.11
  5703                                  
  5704                                          ;;;INC	BYTE [INDOS]
  5705                                          ;;INC	BYTE [SS:INDOS]
  5706                                  	;;STI
  5707                                          ;;CLD
  5708                                          ;;PUSH	ES
  5709                                          ;;PUSH	DS
  5710                                          ;;PUSH	SS
  5711                                          ;;POP	DS
  5712                                  ;;;ASSUME DS:DOSGROUP
  5713                                          ;;;invoke GETBP
  5714                                  	;;CALL	GETBP
  5715                                          ;;POP	DS
  5716                                  ;;;ASSUME DS:NOTHING
  5717                                  
  5718                                  	; 15/07/2018 - Retro DOS v3.0
  5719                                  	; MSDOS 3.3 (& MSDOS 6.0, MSCODE.ASM, 1991)
  5720 00001683 06                              PUSH    ES
  5721 00001684 E8ACFF                  	call    AbsSetup
  5722                                  	;	
  5723 00001687 721A                            JC      SHORT ILEAVE
  5724                                          ;invoke	DSKREAD
  5725 00001689 E82F2B                  	CALL	DSKREAD
  5726                                  TLEAVE:
  5727 0000168C 7415                            JZ      SHORT ILEAVE
  5728                                  
  5729                                  	; 15/07/2018 - Retro DOS v3.0
  5730                                          ;IF	IBM
  5731                                  ; Translate the error code to ancient 1.1 codes
  5732 0000168E 06                              PUSH    ES
  5733 0000168F 0E                              PUSH    CS
  5734 00001690 07                              POP     ES
  5735 00001691 30E4                            XOR     AH,AH			; Nul error code
  5736                                  	;mov	cx,6
  5737 00001693 B90600                          MOV     CX,NUMERR		; Number of possible error conditions
  5738 00001696 BF[D50F]                        MOV     DI,ERRIN		; Point to error conditions
  5739 00001699 F2AE                            REPNE   SCASB
  5740 0000169B 7504                            JNZ     SHORT LEAVECODE		; Not found
  5741                                  	;mov	ah,[ES:DI+5]
  5742 0000169D 268A6505                        MOV     AH,[ES:DI+NUMERR-1]	; Get translation
  5743                                  LEAVECODE:
  5744 000016A1 07                              POP     ES
  5745                                          ;ENDIF
  5746                                  
  5747 000016A2 F9                              STC
  5748                                  ILEAVE:
  5749 000016A3 07                              POP     ES
  5750 000016A4 FA                              CLI
  5751                                          ;DEC	BYTE [INDOS]
  5752                                          ;15/03/2018
  5753 000016A5 36FE0E[CF02]            	DEC	BYTE [SS:INDOS]
  5754                                  	; 15/08/2018
  5755                                          ;MOV	SS,[CS:USER_SS]
  5756                                  	;MOV	SP,[CS:USER_SP]
  5757 000016AA 368B26[1E05]            	MOV     SP,[SS:USER_SP]
  5758 000016AF 368E16[2005]                    MOV     SS,[SS:USER_SS]
  5759                                  ;ASSUME  SS:NOTHING
  5760 000016B4 FB                              STI
  5761                                          ;return
  5762 000016B5 CB                      	RETF   ; ! FAR return !
  5763                                  
  5764                                  ;ABSDRD	ENDP
  5765                                  
  5766                                  ;---------------------------------------------------------------------------
  5767                                  ;
  5768                                  ; Procedure Name : ABSDWRT
  5769                                  ;
  5770                                  ; Interrupt 26 handler.  Performs absolute disk write.
  5771                                  ; Inputs:	AL - 0-based drive number
  5772                                  ;		DS:BX point to source buffer
  5773                                  ;		CX number of logical sectors to write
  5774                                  ;		DX starting  logical sector number (0-based)
  5775                                  ; Outputs:	Original flags still on stack
  5776                                  ;		Carry set
  5777                                  ;		    AH error from BIOS
  5778                                  ;		    AL same as low byte of DI from INT 24
  5779                                  ;
  5780                                  ;---------------------------------------------------------------------------
  5781                                          ;procedure   ABSDWRT,FAR
  5782                                  ABSDWRT:
  5783                                  	; 15/07/2018
  5784                                  ;ASSUME	DS:NOTHING,ES:NOTHING,SS:NOTHING
  5785                                  
  5786 000016B6 FA                              CLI
  5787                                  	; 15/08/2018
  5788                                  	; 15/03/2018
  5789 000016B7 2E8C16[2005]            	MOV	[CS:USER_SS],SS
  5790 000016BC 2E8926[1E05]                    MOV	[CS:USER_SP],SP
  5791 000016C1 0E                              PUSH    CS
  5792 000016C2 17                              POP     SS
  5793                                  ;ASSUME	SS:DOSGROUP
  5794                                          ;MOV	SP,OFFSET DOSGROUP:DSKSTACK
  5795 000016C3 BC[8608]                        MOV	SP,DSKSTACK
  5796                                  
  5797                                  	;; MSDOS 2.11
  5798                                  
  5799                                          ;;;INC	BYTE [INDOS]
  5800                                          ;;INC	BYTE [SS:INDOS]
  5801                                  	;;STI
  5802                                          ;;CLD
  5803                                          ;;PUSH	ES
  5804                                          ;;PUSH	DS
  5805                                          ;;PUSH	SS
  5806                                          ;;POP	DS
  5807                                  ;;;ASSUME DS:DOSGROUP
  5808                                          ;;;invoke GETBP
  5809                                  	;;CALL	GETBP
  5810                                          ;;POP	DS
  5811                                  ;;;ASSUME DS:NOTHING
  5812                                  
  5813                                  	; 15/07/2018 - Retro DOS v3.0
  5814                                  	; MSDOS 3.3 (& MSDOS 6.0, MSCODE.ASM, 1991)
  5815 000016C6 06                              PUSH    ES
  5816 000016C7 E869FF                  	call    AbsSetup
  5817                                  	;
  5818 000016CA 72D7                            JC      SHORT ILEAVE
  5819                                          ;invoke DSKWRITE
  5820 000016CC E8152B                          CALL	DSKWRITE
  5821 000016CF EBBB                    	JMP     SHORT TLEAVE
  5822                                  
  5823                                  ;ABSDWRT ENDP
  5824                                  
  5825                                  ;----------------------------------------------------------------------------
  5826                                  ;
  5827                                  ; Procedure Name : GETBP
  5828                                  ;
  5829                                  ; Inputs:
  5830                                  ;	AL = Logical unit number (A = 0)
  5831                                  ; Function:
  5832                                  ;	Find Drive Parameter Block
  5833                                  ; Outputs:
  5834                                  ;	ES:BP points to DPB
  5835                                  ;	[THISDPB] = ES:BP
  5836                                  ;	Carry set if unit number bad or unit is a NET device.
  5837                                  ;		Later case sets extended error error_I24_not_supported
  5838                                  ; No other registers altered
  5839                                  ;
  5840                                  ;----------------------------------------------------------------------------
  5841                                  
  5842                                  GETBP:
  5843                                  	; 11/07/2018 - Retro DOS v3.0
  5844 000016D1 50                      	PUSH	AX
  5845 000016D2 0401                    	ADD	AL, 1		; No increment; need carry flag
  5846 000016D4 7203                    	JC	SHORT SKIPGET
  5847 000016D6 E89852                  	CALL	GETTHISDRV
  5848                                  	; MSDOS 6.0
  5849                                  	;JNC	SHORT SKIPGET		;PM. good drive		;AN000;
  5850                                  	;XOR	AH,AH			;DCR. ax= error code 	;AN000;
  5851                                  	;CMP	AX,error_not_dos_disk	;DCR. is unknown media ? ;AN000;
  5852                                  	;JZ	SHORT SKIPGET 		;DCR. yes, let it go 	;AN000;
  5853                                  	;STC				;DCR.			;AN000;
  5854                                  	;MOV	[EXTERR],AX	;PM. invalid drive or Non DOS drive ;AN000;
  5855                                  	;MOV	WORD [AbsDskErr],201h
  5856                                  SKIPGET:
  5857 000016D9 58                      	POP	AX
  5858 000016DA 7213                    	JC	SHORT GETBP_RETN
  5859 000016DC C42E[3A05]              	LES	BP,[THISCDS]
  5860                                  	;TEST	WORD [ES:BP+43H],8000H
  5861 000016E0 26F746430080            	TEST	WORD [ES:BP+curdir.flags],curdir_isnet ; Clears carry
  5862 000016E6 7408                    	JZ	SHORT GETBP_CDS
  5863 000016E8 C706[D202]3200          	MOV	WORD [EXTERR],error_not_supported  ; 32
  5864 000016EE F9                      	STC
  5865                                  GETBP_RETN:
  5866 000016EF C3                      	RETN
  5867                                  
  5868                                  GETBP_CDS:
  5869                                  	;LES	BP,[ES:BP+45H]
  5870 000016F0 26C46E45                	LES	BP,[ES:BP+curdir.devptr]
  5871                                  
  5872                                  GOTDPB:
  5873                                  	; Load THISDPB from ES:BP
  5874 000016F4 892E[2405]              	MOV	[THISDPB],BP
  5875 000016F8 8C06[2605]              	MOV	[THISDPB+2],ES
  5876 000016FC C3                      	RETN
  5877                                  
  5878                                  ;BREAK <SYS_RET_OK SYS_RET_ERR CAL_LK ETAB_LK set system call returns>
  5879                                  
  5880                                  ;----------------------------------------------------------------------------
  5881                                  ;
  5882                                  ; Procedure Name : SYS_RETURN
  5883                                  ;
  5884                                  ; These are the general system call exit mechanisms. All internal system
  5885                                  ; calls will transfer (jump) to one of these at the end. Their sole purpose
  5886                                  ; is to set the user's flags and set his AX register for return.
  5887                                  ;
  5888                                  ;----------------------------------------------------------------------------
  5889                                  
  5890                                          ;procedure   SYS_RETURN,NEAR
  5891                                  SYS_RETURN:        
  5892                                          ;entry	SYS_RET_OK
  5893                                  SYS_RET_OK:   
  5894                                  	; 18/07/2018
  5895                                  	; Offset 1666h in IBMDOS.COM (MSDOS 3.3), 1987
  5896 000016FD E82508                  	call    FETCHI_CHECK ; MSDOS 3.3 ! IBMDOS feature ! 	     
  5897 00001700 E808FF                  	call    Get_User_Stack
  5898                                  		; turn off user's carry flag 
  5899                                          ;and	word [SI+16h],0FFFEh 
  5900 00001703 836416FE                        and	word [SI+user_env.user_F],~f_Carry 
  5901 00001707 EB10                            JMP     SHORT DO_RET
  5902                                  
  5903                                          ;entry   SYS_RET_ERR
  5904                                  SYS_RET_ERR:        
  5905 00001709 30E4                    	XOR     AH,AH 		; hack to allow for smaller error rets
  5906 0000170B E86900                  	call	ETAB_LK 	; Make sure code is OK, EXTERR gets set
  5907 0000170E E81A00                  	CALL	ErrorMap
  5908                                  
  5909                                  	;entry	From_GetSet
  5910                                  From_GetSet:
  5911 00001711 E8F7FE                          call    Get_User_Stack
  5912                                  		 ; signal carry to user
  5913                                  	;or	word [SI+16h],1
  5914 00001714 834C1601                	OR	word [SI+user_env.user_F],f_Carry
  5915 00001718 F9                      	STC			; also, signal internal error
  5916                                  DO_RET:
  5917                                          ;MOV	[SI+user_env.user_AX], AX ; Really only sets AH
  5918 00001719 8904                    	MOV	[SI],AX
  5919 0000171B C3                      	RETN
  5920                                  
  5921                                  	;entry	FCB_RET_OK
  5922                                  FCB_RET_OK:
  5923                                  	;entry	NO_OP		; obsolete system calls dispatch to here
  5924                                  NO_OP:
  5925 0000171C 30C0                    	XOR	AL,AL
  5926 0000171E C3                      	retn
  5927                                  
  5928                                  	;entry	FCB_RET_ERR
  5929                                  FCB_RET_ERR:
  5930 0000171F 30E4                    	XOR	AH,AH
  5931 00001721 36A3[D202]              	mov	[ss:EXTERR],AX
  5932 00001725 E80300                  	CALL	ErrorMap
  5933 00001728 B0FF                    	MOV	AL,-1
  5934 0000172A C3                      	retn
  5935                                  
  5936                                  	;entry	ErrorMap
  5937                                  ErrorMap:
  5938 0000172B 56                      	PUSH	SI
  5939                                  				; ERR_TABLE_21 is now in DOSDATA
  5940 0000172C BE[2F0D]                	MOV	SI,ERR_TABLE_21
  5941                                  				; SS override for FAILERR and EXTERR
  5942 0000172F 36803E[F602]00          	CMP	byte [SS:FAILERR],0 ; Check for SPECIAL case.
  5943 00001735 7407                    	JZ	short EXTENDED_NORMAL ; All is OK.
  5944                                  		 ; Ooops, this is the REAL reason
  5945                                  	;mov	word [SS:EXTERR],53h
  5946 00001737 36C706[D202]5300        	MOV	word [SS:EXTERR],error_FAIL_I24
  5947                                  EXTENDED_NORMAL:
  5948 0000173E E80200                  	call	CAL_LK		; Set CLASS,ACTION,LOCUS for EXTERR
  5949 00001741 5E                      	POP	SI
  5950 00001742 C3                      	retn
  5951                                  
  5952                                  	;EndProc SYS_RETURN
  5953                                  
  5954                                  ;---------------------------------------------------------------------------
  5955                                  ;
  5956                                  ; Procedure Name : CAL_LK
  5957                                  ;
  5958                                  ; Inputs:
  5959                                  ;	SI is OFFSET in DOSDATA of CLASS,ACTION,LOCUS Table to use
  5960                                  ;		(DS NEED not be DOSDATA)
  5961                                  ;	[EXTERR] is set with error
  5962                                  ; Function:
  5963                                  ;	Look up and set CLASS ACTION and LOCUS values for GetExtendedError
  5964                                  ; Outputs:
  5965                                  ;	[EXTERR_CLASS] set
  5966                                  ;	[EXTERR_ACTION] set
  5967                                  ;	[EXTERR_LOCUS] set  (EXCEPT on certain errors as determined by table)
  5968                                  ; Destroys SI, FLAGS
  5969                                  ;
  5970                                  ;---------------------------------------------------------------------------
  5971                                  
  5972                                  	;procedure CAL_LK,NEAR
  5973                                  CAL_LK:
  5974 00001743 1E                      	PUSH	DS
  5975 00001744 50                      	PUSH	AX
  5976 00001745 53                      	PUSH	BX
  5977                                  
  5978                                  ;M048	Context DS		; DS:SI -> Table
  5979                                  ;
  5980                                  ; Since this function can be called thru int 2f we shall not assume that SS
  5981                                  ; is DOSDATA
  5982                                  
  5983                                  	;getdseg	<ds>	; M048: DS:SI -> Table
  5984                                  
  5985                                  	; 18/07/2018
  5986 00001746 16                      	push	ss
  5987 00001747 1F                      	pop	ds
  5988                                  
  5989 00001748 8B1E[D202]              	MOV	BX,[EXTERR]	; Get error in BL
  5990                                  TABLK1:
  5991 0000174C AC                      	LODSB
  5992                                  
  5993 0000174D 3CFF                    	CMP	AL,0FFH
  5994 0000174F 7409                    	JZ	short GOT_VALS	; End of table
  5995 00001751 38D8                    	CMP	AL,BL
  5996 00001753 7405                    	JZ	short GOT_VALS	; Got entry
  5997 00001755 83C603                  	ADD	SI,3		; Next table entry
  5998                                  	; 15/08/2018
  5999 00001758 EBF2                    	JMP	short TABLK1
  6000                                  
  6001                                  GOT_VALS:
  6002 0000175A AD                      	LODSW			; AL is CLASS, AH is ACTION
  6003                                  
  6004 0000175B 80FCFF                  	CMP	AH,0FFH
  6005 0000175E 7404                    	JZ	short NO_SET_ACT
  6006 00001760 8826[D402]              	MOV	[EXTERR_ACTION],AH	; Set ACTION
  6007                                  NO_SET_ACT:
  6008 00001764 3CFF                    	CMP	AL,0FFH
  6009 00001766 7403                    	JZ	short NO_SET_CLS
  6010 00001768 A2[D502]                	MOV	[EXTERR_CLASS],AL	; Set CLASS
  6011                                  NO_SET_CLS:
  6012 0000176B AC                      	LODSB			; Get LOCUS
  6013                                  
  6014 0000176C 3CFF                    	CMP	AL,0FFH
  6015 0000176E 7403                    	JZ	short NO_SET_LOC
  6016 00001770 A2[D102]                	MOV	[EXTERR_LOCUS],AL
  6017                                  NO_SET_LOC:
  6018 00001773 5B                      	POP	BX
  6019 00001774 58                      	POP	AX
  6020 00001775 1F                      	POP	DS
  6021 00001776 C3                      	retn
  6022                                  
  6023                                  	;EndProc CAL_LK
  6024                                  
  6025                                  ;---------------------------------------------------------------------------
  6026                                  ;
  6027                                  ; Procedure Name : ETAB_LK
  6028                                  ;
  6029                                  ; Inputs:
  6030                                  ;	AX is error code
  6031                                  ;	[USER_IN_AX] has AH value of system call involved
  6032                                  ; Function:
  6033                                  ;	Make sure error code is appropriate to this call.
  6034                                  ; Outputs:
  6035                                  ;	AX MAY be mapped error code
  6036                                  ;	[EXTERR] = Input AX
  6037                                  ; Destroys ONLY AX and FLAGS
  6038                                  ;
  6039                                  ;---------------------------------------------------------------------------
  6040                                  
  6041                                  	;procedure ETAB_LK,NEAR
  6042                                  
  6043                                  ETAB_LK: ; 10/08/2018
  6044 00001777 1E                      	PUSH	DS
  6045 00001778 56                      	PUSH	SI
  6046 00001779 51                      	PUSH	CX
  6047 0000177A 53                      	PUSH	BX
  6048                                  
  6049                                  	;Context DS			; SS is DOSDATA
  6050                                  
  6051 0000177B 16                      	push	ss
  6052 0000177C 1F                      	pop	ds
  6053                                  
  6054 0000177D A3[D202]                	MOV	[EXTERR],AX		; Set EXTERR with "real" error
  6055                                  
  6056                                  					; I21_MAP_E_TAB is now in DOSCODE
  6057 00001780 BE[930C]                	MOV	SI,I21_MAP_E_TAB
  6058 00001783 88C7                    	MOV	BH,AL			; Real code to BH
  6059 00001785 8A1E[E702]              	MOV	BL,[USER_IN_AX+1]	; Sys call to BL
  6060                                  TABLK2:
  6061                                  ;;hkn;	LODSW
  6062                                  ;	LODS	word ptr cs:[si] ; MSDOS 6.0
  6063                                  	
  6064                                  	; 18/07/2018
  6065 00001789 AD                      	lodsw		; IBMDOS.COM (MSDOS 3.3) - Offset 16F7h
  6066                                  
  6067 0000178A 3CFF                    	CMP	AL,0FFH 		; End of table?
  6068 0000178C 740C                    	JZ	short NOT_IN_TABLE	; Yes
  6069 0000178E 38D8                    	CMP	AL,BL			; Found call?
  6070 00001790 740C                    	JZ	short GOT_CALL		; Yes
  6071 00001792 86E0                    	XCHG	AH,AL			; Count to AL
  6072 00001794 30E4                    	XOR	AH,AH			; Make word for add
  6073 00001796 01C6                    	ADD	SI,AX			; Next table entry
  6074 00001798 EBEF                    	JMP	short TABLK2
  6075                                  
  6076                                  NOT_IN_TABLE:
  6077 0000179A 88F8                    	MOV	AL,BH			; Restore original code
  6078 0000179C EB0B                    	JMP	SHORT NO_MAP
  6079                                  
  6080                                  GOT_CALL:
  6081 0000179E 88E1                    	MOV	CL,AH
  6082 000017A0 30ED                    	XOR	CH,CH			; Count of valid err codes to CX
  6083                                  CHECK_CODE:
  6084                                  ;;hkn;	LODSB
  6085                                  ;	LODS	byte ptr cs:[si]
  6086                                  
  6087                                  	; 18/07/2018
  6088 000017A2 AC                      	lodsb		; IBMDOS.COM (MSDOS 3.3) - Offset 1710h
  6089                                  
  6090 000017A3 38F8                    	CMP	AL,BH			; Code OK?
  6091 000017A5 7402                    	JZ	short NO_MAP		; Yes
  6092 000017A7 E2F9                    	LOOP	CHECK_CODE
  6093                                  NO_MAP:
  6094 000017A9 30E4                    	XOR	AH,AH			; AX is now valid code
  6095 000017AB 5B                      	POP	BX
  6096 000017AC 59                      	POP	CX
  6097 000017AD 5E                      	POP	SI
  6098 000017AE 1F                      	POP	DS
  6099 000017AF C3                      	retn
  6100                                  
  6101                                  	;EndProc ETAB_LK
  6102                                  
  6103                                  ; 18/07/2018 - Retro DOS v3.0
  6104                                  ;---------------------------------------------------------------------------
  6105                                  ; BREAK <DOS 2F Handler and default NET 2F handler>
  6106                                  
  6107                                  ;IF installed
  6108                                  ;---------------------------------------------------------------------------
  6109                                  ;
  6110                                  ; Procedure Name : SetBad
  6111                                  ;
  6112                                  ; SetBad sets up info for bad functions
  6113                                  ;
  6114                                  ;---------------------------------------------------------------------------
  6115                                  
  6116                                  SetBad:
  6117                                  	;mov	ax,1
  6118 000017B0 B80100                  	MOV	AX,error_invalid_function ; ALL NET REQUESTS get inv func
  6119                                  
  6120                                  ;	set up ds to point to DOSDATA
  6121                                  
  6122                                  	; MSDOS 6.0
  6123                                  	;push	ds
  6124                                  
  6125                                  	;getdseg <ds>
  6126                                  	;MOV	[EXTERR_LOCUS],errLOC_Unk	
  6127                                  
  6128                                  	; MSDOS 3.3
  6129                                  	;mov	byte [cs:EXTERR_LOCUS],1
  6130 000017B3 2EC606[D102]01          	MOV	byte [CS:EXTERR_LOCUS],errLOC_Unk
  6131                                  
  6132                                  	;pop	ds	  		;hkn; restore ds
  6133                                  
  6134 000017B9 F9                      	STC
  6135 000017BA C3                      	retn
  6136                                  
  6137                                  ;--------------------------------------------------------------------------
  6138                                  ;
  6139                                  ; Procedure Name : BadCall
  6140                                  ;
  6141                                  ; BadCall is the initial routine for bad function calls
  6142                                  ;
  6143                                  ;--------------------------------------------------------------------------
  6144                                  
  6145                                  BadCall:
  6146 000017BB E8F2FF                  	call	SetBad
  6147 000017BE CB                      	retf
  6148                                  
  6149                                  ;--------------------------------------------------------------------------
  6150                                  ;
  6151                                  ; OKCall always sets carry to off.
  6152                                  ;
  6153                                  ;-----------------------------------------------------------------------
  6154                                  
  6155                                  OKCall:
  6156 000017BF F8                      	CLC
  6157 000017C0 CB                      	retf
  6158                                  
  6159                                  ;---------------------------------------------------------------------------
  6160                                  ;
  6161                                  ; Procedure Name : INT2F
  6162                                  ;
  6163                                  ; INT 2F handler works as follows:
  6164                                  ;   PUSH    AX
  6165                                  ;   MOV     AX,multiplex:function
  6166                                  ;   INT     2F
  6167                                  ;   POP     ...
  6168                                  ; The handler itself needs to make the AX available for the various routines.
  6169                                  ;
  6170                                  ;----------------------------------------------------------------------------
  6171                                  
  6172                                  ;PUBLIC	Int2F
  6173                                  ;INT2F	PROC	FAR
  6174                                  
  6175                                  	; 18/07/2018 - Retro DOS v3.0
  6176                                  
  6177                                  INT2F:
  6178                                  	; Offset 172Fh in IBMDOS.COM (MSDOS 3.3), 1987
  6179                                  INT2FNT:
  6180                                  	;ASSUME	CS:DOSCODE,DS:NOTHING,ES:NOTHING,SS:NOTHING
  6181 000017C1 FB                      	STI
  6182                                  	;cmp	ah,11h
  6183 000017C2 80FC11                  	CMP	AH,MultNET
  6184 000017C5 750A                    	JNZ	short INT2FSHR
  6185                                  TestInstall:
  6186 000017C7 08C0                    	OR	AL,AL
  6187 000017C9 7403                    	JZ	short Leave2F
  6188                                  BadFunc:
  6189 000017CB E8E2FF                  	CALL	SetBad
  6190                                  
  6191                                  	;entry	Leave2F
  6192                                  Leave2F:
  6193 000017CE CA0200                  	RETF	2			; long return + clear flags off stack
  6194                                  
  6195                                  INT2FSHR:
  6196                                  	;cmp	ah,10h
  6197 000017D1 80FC10                  	CMP	AH,MultSHARE		; is this a share request
  6198 000017D4 74F1                    	JZ	short TestInstall	; yes, check for installation
  6199                                  INT2FNLS:
  6200                                  	;cmp	ah,14h
  6201 000017D6 80FC14                  	CMP	AH,NLSFUNC		; is this a DOS 3.3 NLSFUNC request
  6202 000017D9 74EC                    	JZ	short TestInstall	; yes check for installation
  6203                                  INT2FDOS:
  6204                                  	;ASSUME	CS:DOSCODE,DS:NOTHING,ES:NOTHING,SS:NOTHING
  6205                                  
  6206                                  	; 18/07/2018
  6207                                  	; MSDOS 6.0
  6208                                  	;CMP	AH,MultDOS
  6209                                  	;JNZ	check_win		;check if win386 broadcast
  6210                                  	;jmp	DispatchDOS
  6211                                  
  6212                                  	; .... win386 .... 
  6213                                  	
  6214                                  	; 18/07/2018
  6215                                  	; MSDOS 3.3
  6216                                  	;cmp	ah,12h	
  6217 000017DB 80FC12                  	CMP	AH,MultDOS
  6218 000017DE 7401                    	jz	short DispatchDOS
  6219 000017E0 CF                      	iret
  6220                                  
  6221                                  ;INT2F	ENDP
  6222                                  	
  6223                                  DispatchDOS:
  6224 000017E1 2EFF36[D80E]            	PUSH	word [CS:FOO]		; push return address
  6225 000017E6 2EFF36[DA0E]            	PUSH	word [CS:DTab]		; push table address
  6226 000017EB 50                      	PUSH	AX			; push index
  6227 000017EC 55                      	PUSH	BP
  6228 000017ED 89E5                    	MOV	BP,SP
  6229                                  		; stack looks like:
  6230                                  		;   0	BP
  6231                                  		;   2	DISPATCH
  6232                                  		;   4	TABLE
  6233                                  		;   6	RETURN
  6234                                  		;   8	LONG-RETURN
  6235                                  		;   c	FLAGS
  6236                                  		;   e	AX
  6237                                  	
  6238 000017EF 8B460E                  	MOV	AX,[BP+0Eh]		; get AX value
  6239 000017F2 5D                      	POP	BP
  6240 000017F3 E8AD07                  	call	TableDispatch
  6241 000017F6 EBD3                    	JMP	short BadFunc 		; return indicates invalid function
  6242                                  
  6243                                  INT2F_etcetera:
  6244                                  	;entry	DosGetGroup
  6245                                  DosGetGroup:
  6246                                  	; MSDOS 6.0
  6247                                  ;SR; Cannot use CS now
  6248                                  ;
  6249                                  ;	PUSH	CS
  6250                                  ;	POP	DS
  6251                                  
  6252                                  	;getdseg <ds>
  6253                                  	;retn
  6254                                  
  6255                                  	; MSDOS 3.3
  6256 000017F8 0E                      	push	cs
  6257 000017F9 1F                      	pop	ds
  6258 000017FA C3                      	retn
  6259                                  
  6260                                  	;entry	DOSInstall
  6261                                  DOSInstall:
  6262 000017FB B0FF                    	MOV	AL,0FFh
  6263 000017FD C3                      	retn
  6264                                  
  6265                                  ;ENDIF
  6266                                  
  6267                                  ;============================================================================
  6268                                  ; DOSTAB.ASM (MSDOS 6.0, 1991)
  6269                                  ;============================================================================
  6270                                  ; 18/07/2018 - Retro DOS 3.0
  6271                                  
  6272                                  ;CASE MAPPER ROUTINE FOR 80H-FFH character range, DOS 3.3
  6273                                  ;     ENTRY: AL = Character to map
  6274                                  ;     EXIT:  AL = The converted character
  6275                                  ; Alters no registers except AL and flags.
  6276                                  ; The routine should do nothing to chars below 80H.
  6277                                  ;
  6278                                  ; Example:
  6279                                  
  6280                                  ;Procedure   MAP_CASE,FAR
  6281                                  
  6282                                  MAP_CASE:
  6283                                  	; Offset 176Ch in IBMDOS.COM (MSDOS 3.3), 1987
  6284                                  	
  6285 000017FE 3C80                    	CMP	AL,80H
  6286 00001800 7301                    	JAE	short Map1	;Map no chars below 80H ever
  6287 00001802 CB                      	RETF
  6288                                  Map1:
  6289 00001803 2C80                    	SUB	AL,80H		;Turn into index value
  6290 00001805 1E                      	PUSH	DS
  6291 00001806 53                      	PUSH	BX
  6292 00001807 BB[8810]                	MOV	BX,UCASE_TAB+2
  6293                                  FINISH:
  6294 0000180A 0E                      	PUSH	CS		;Move to DS
  6295 0000180B 1F                      	POP	DS
  6296 0000180C D7                      	XLAT			; Get upper case character
  6297 0000180D 5B                      	POP	BX
  6298 0000180E 1F                      	POP	DS
  6299                                  L_RET:	
  6300 0000180F CB                      	RETF
  6301                                  
  6302                                  ;EndProc MAP_CASE
  6303                                  
  6304                                  ;============================================================================
  6305                                  ; DOSMES.INC (MSDOS 6.0, 1991)
  6306                                  ;============================================================================
  6307                                  ; 18/07/2018 - Retro DOS v3.0
  6308                                  
  6309                                  ; DOSMES.ASM (MSDOS 2.11, 1983)
  6310                                  
  6311                                  ; OEMFunction key is expected to process a single function
  6312                                  ;   key input from a device and dispatch to the proper
  6313                                  ;   routines leaving all registers UNTOUCHED.
  6314                                  ;
  6315                                  ; Inputs:   CS, SS are DOSGROUP
  6316                                  ; Outputs:  None. This function is expected to JMP to onw of
  6317                                  ;           the following labels:
  6318                                  ;
  6319                                  ;           GetCh       - ignore the sequence
  6320                                  ;           TwoEsc      - insert an ESCChar in the buffer
  6321                                  ;           ExitIns     - toggle insert mode
  6322                                  ;           EnterIns    - toggle insert mode
  6323                                  ;           BackSp      - move backwards one space
  6324                                  ;           ReEdit      - reedit the line with a new template
  6325                                  ;           KilNew      - discard the current line and start from scratch
  6326                                  ;           CopyLin     - copy the rest of the template into the line
  6327                                  ;           SkipStr     - read the next character and skip to it in the template
  6328                                  ;           CopyStr     - read next char and copy from template to line until char
  6329                                  ;           SkipOne     - advance position in template one character
  6330                                  ;           CopyOne     - copy next character in template into line
  6331                                  ;           CtrlZ       - place a ^Z into the template
  6332                                  ; Registers that are allowed to be modified by this function are:
  6333                                  ;           AX, CX, BP
  6334                                  
  6335                                  OEMFunctionKey:
  6336 00001810 E87908                  	CALL	_$STD_CON_INPUT_NO_ECHO  ; Get the second byte of the sequence
  6337 00001813 B10E                    	MOV     CL,ESCTABLEN ; 14	; length of table for scan
  6338 00001815 57                      	PUSH    DI                      ; save DI (cannot change it!)
  6339 00001816 BF[D312]                	MOV     DI,ESCTAB		; offset of second byte table
  6340 00001819 F2AE                    	REPNE   SCASB                   ; Look it up in the table
  6341 0000181B 5F                      	POP     DI                      ; restore DI
  6342 0000181C D1E1                    	SHL     CX,1                    ; convert byte offset to word
  6343 0000181E 89CD                    	MOV     BP,CX                   ; move to indexable register
  6344                                  	;JMP	word [SS:BP+ESCFUNC]	; Go to the right routine
  6345 00001820 FFA6[E112]              	JMP	word [BP+ESCFUNC]
  6346                                  	
  6347                                  ;============================================================================
  6348                                  ; TIME.ASM (MSDOS 6.0, 1991)
  6349                                  ;============================================================================
  6350                                  ; Retro DOS v3.0 - 18/07/2018
  6351                                  
  6352                                  ; SYSCALL.ASM (MSDOS 2.11, 1983)
  6353                                  ;----------------------------------------------------------------------------
  6354                                  ; Retro DOS v2.0 - 13/03/2018
  6355                                  
  6356                                  ;**	TIME.ASM - System Calls and low level routines for DATE and TIME
  6357                                  
  6358                                  	;BREAK <DATE AND TIME - SYSTEM CALLS 42,43,44,45>
  6359                                  
  6360                                  ;**	$GET_DATE - Get Current Date
  6361                                  ;
  6362                                  ;	ENTRY	none
  6363                                  ;	EXIT	(cx:dx) = current date
  6364                                  ;	USES	all
  6365                                  
  6366                                  _$GET_DATE:	;System call 42
  6367                                  
  6368 00001824 16                              PUSH    SS
  6369 00001825 1F                              POP     DS
  6370 00001826 E8B700                          CALL	READTIME        ;Check for rollover to next day
  6371 00001829 A1[FE02]                        MOV     AX,[YEAR]
  6372                                  
  6373                                  ;	WARNING!!!! DAY and MONTH must be adjacently allocated!
  6374                                  
  6375 0000182C 8B1E[FC02]                      MOV     BX,[DAY]	; fetch both day and month
  6376 00001830 E8D8FD                  	CALL	Get_User_Stack	;Get pointer to user registers
  6377                                          ;MOV    [SI+6],BX  	;DH=month, DL=day
  6378 00001833 895C06                  	MOV	[SI+user_env.user_DX],BX
  6379 00001836 05BC07                          ADD     AX,1980         ;Put bias back
  6380                                          ;MOV    [SI+4],AX  	;CX=year
  6381 00001839 894404                  	MOV	[SI+user_env.user_CX],AX
  6382                                          ;MOV	AL,[WEEKDAY]
  6383 0000183C 36A0[0203]                      MOV	AL,[SS:WEEKDAY]	;hkn; SS override
  6384 00001840 C3                      	RETN
  6385                                  
  6386                                  ;**	$SET_DATE - Set Current Date
  6387                                  ;
  6388                                  ;	ENTRY	(cx:dx) = current date
  6389                                  ;	EXIT	(al) = -1 iff bad date
  6390                                  ;		(al) = 0 if ok
  6391                                  ;	USES	all
  6392                                  
  6393                                  _$SET_DATE:			;System call 43
  6394                                  
  6395 00001841 B0FF                            MOV     AL,-1           ;Be ready to flag error
  6396 00001843 81E9BC07                        SUB     CX,1980         ;Fix bias in year
  6397 00001847 7217                            JC      SHORT RET24	;Error if not big enough
  6398 00001849 83F977                          CMP     CX,119          ;Year must be less than 2100
  6399 0000184C 7712                            JA      SHORT RET24
  6400 0000184E 08F6                            OR      DH,DH
  6401 00001850 740E                            JZ      SHORT RET24
  6402 00001852 08D2                            OR      DL,DL
  6403 00001854 740A                            JZ      SHORT RET24	;Error if either month or day is 0
  6404 00001856 80FE0C                          CMP     DH,12           ;Check against max. month
  6405 00001859 7705                            JA      SHORT RET24
  6406 0000185B 16                              PUSH    SS
  6407 0000185C 1F                              POP     DS
  6408 0000185D E81301                  	CALL	DODATE
  6409                                  RET24:  
  6410 00001860 C3                      	RETN
  6411                                  
  6412                                  
  6413                                  ;**	$GET_TIME - Get Current Time
  6414                                  ;
  6415                                  ;	ENTRY	none
  6416                                  ;	EXIT	(cx:dx) = current time
  6417                                  ;	USES	all
  6418                                  
  6419                                  _$GET_TIME:			;System call 44
  6420                                  
  6421 00001861 16                              PUSH    SS
  6422 00001862 1F                              POP     DS
  6423 00001863 E87A00                  	CALL	READTIME
  6424 00001866 E8A2FD                  	CALL	Get_User_Stack           ;Get pointer to user registers
  6425                                         ;MOV     [SI+6],DX
  6426 00001869 895406                  	MOV	[SI+user_env.user_DX],DX
  6427                                         ;MOV     [SI+4],CX
  6428 0000186C 894C04                  	MOV	[SI+user_env.user_CX],CX
  6429 0000186F 30C0                            XOR     AL,AL
  6430                                  RET26:  
  6431 00001871 C3                      	RETN
  6432                                  
  6433                                  ;**	$SET_TIME - Set Current Time
  6434                                  ;
  6435                                  ;	ENTRY	(cx:dx) = time
  6436                                  ;	EXIT	(al) = 0 if 0k
  6437                                  ;		(al) = -1 if invalid
  6438                                  ;	USES	ALL
  6439                                  
  6440                                  _$SET_TIME:			;System call 45
  6441                                  
  6442 00001872 B0FF                            MOV     AL,-1           ;Flag in case of error
  6443 00001874 80FD18                          CMP     CH,24           ;Check hours
  6444 00001877 73F8                            JAE     SHORT RET26
  6445 00001879 80F93C                          CMP     CL,60           ;Check minutes
  6446 0000187C 73F3                            JAE     SHORT RET26
  6447 0000187E 80FE3C                          CMP     DH,60           ;Check seconds
  6448 00001881 73EE                            JAE     SHORT RET26
  6449 00001883 80FA64                          CMP     DL,100          ;Check 1/100's
  6450 00001886 73E9                            JAE     SHORT RET26
  6451 00001888 51                              PUSH    CX
  6452 00001889 52                              PUSH    DX
  6453 0000188A 16                              PUSH    SS
  6454 0000188B 1F                              POP     DS
  6455 0000188C BB[5803]                        MOV     BX,TIMEBUF
  6456 0000188F B90600                          MOV     CX,6
  6457 00001892 31D2                            XOR     DX,DX
  6458 00001894 89D0                            MOV     AX,DX
  6459 00001896 53                              PUSH    BX
  6460 00001897 E88436                  	CALL	SETREAD
  6461 0000189A 1E                              PUSH    DS
  6462 0000189B C536[2E00]                      LDS     SI,[BCLOCK]
  6463 0000189F E85836                  	CALL	DEVIOCALL2      ;Get correct day count
  6464 000018A2 1F                              POP     DS
  6465 000018A3 5B                              POP     BX
  6466 000018A4 E8AA36                  	CALL	SETWRITE
  6467 000018A7 8F06[5C03]                      POP     WORD [TIMEBUF+4]
  6468 000018AB 8F06[5A03]                      POP     WORD [TIMEBUF+2]
  6469 000018AF C536[2E00]                      LDS     SI,[BCLOCK]
  6470 000018B3 E84436                  	CALL	DEVIOCALL2      ;Set the time
  6471 000018B6 30C0                            XOR     AL,AL
  6472 000018B8 C3                              RETN
  6473                                  
  6474                                  ; 11/07/2018 - Retro DOS v3.0
  6475                                  ; Retro DOS v2.0 - 14/03/2018
  6476                                  
  6477                                  FOURYEARS EQU 3*365 + 366  ; = 1461 
  6478                                  
  6479                                  ;SUBTTL DATE16, READTIME, DODATE -- GUTS OF TIME AND DATE
  6480                                  
  6481                                  ;
  6482                                  ; Date16 returns the current date in AX, current time in DX
  6483                                  ;   AX - YYYYYYYMMMMDDDDD  years months days
  6484                                  ;   DX - HHHHHMMMMMMSSSSS  hours minutes seconds/2
  6485                                  ;
  6486                                  
  6487                                  DATE16:
  6488                                  	
  6489                                  ;M048	Context DS
  6490                                  ;
  6491                                  ; Since this function can be called thru int 2f we shall not assume that SS
  6492                                  ; is DOSDATA
  6493                                  
  6494                                  	;getdseg	<ds>			; M048
  6495                                  
  6496                                  	;PUSH	SS
  6497 000018B9 0E                      	PUSH	CS
  6498 000018BA 1F                      	POP	DS
  6499                                  
  6500 000018BB 51                              PUSH    CX
  6501 000018BC 06                              PUSH    ES
  6502 000018BD E82000                          CALL    READTIME
  6503 000018C0 07                              POP     ES
  6504 000018C1 D0E1                            SHL     CL,1            ;Minutes to left part of byte
  6505 000018C3 D0E1                            SHL     CL,1
  6506 000018C5 D1E1                            SHL     CX,1            ;Push hours and minutes to left end
  6507 000018C7 D1E1                            SHL     CX,1
  6508 000018C9 D1E1                            SHL     CX,1
  6509 000018CB D0EE                            SHR     DH,1            ;Count every two seconds
  6510 000018CD 08F1                            OR      CL,DH           ;Combine seconds with hours and minutes
  6511 000018CF 89CA                            MOV     DX,CX
  6512                                  
  6513                                  ;	WARNING!  MONTH and YEAR must be adjacently allocated
  6514                                  
  6515 000018D1 A1[FD02]                        MOV     AX,[MONTH]	;Fetch month and year
  6516 000018D4 B104                            MOV     CL,4
  6517 000018D6 D2E0                            SHL     AL,CL		;Push month to left to make room for day
  6518 000018D8 D1E0                            SHL     AX,1
  6519 000018DA 59                              POP     CX
  6520 000018DB 0A06[FC02]                      OR      AL,[DAY]
  6521                                  RET21:
  6522 000018DF C3                              RETN
  6523                                  
  6524                                  READTIME:
  6525                                  ;Gets time in CX:DX. Figures new date if it has changed.
  6526                                  ;Uses AX, CX, DX.
  6527                                  
  6528 000018E0 C706[8D0F]0000          	MOV	word [DATE_FLAG],0 ; reset date flag for CPMIO
  6529 000018E6 56                              PUSH    SI
  6530 000018E7 53                              PUSH    BX
  6531                                  
  6532 000018E8 BB[5803]                        MOV     BX,TIMEBUF
  6533                                  
  6534 000018EB B90600                          MOV     CX,6
  6535 000018EE 31D2                            XOR     DX,DX
  6536 000018F0 89D0                            MOV     AX,DX
  6537 000018F2 E82936                  	CALL	SETREAD
  6538 000018F5 1E                              PUSH    DS
  6539 000018F6 C536[2E00]                      LDS     SI,[BCLOCK]
  6540 000018FA E8FD35                  	CALL	DEVIOCALL2      ;Get correct date and time
  6541 000018FD 1F                              POP     DS
  6542 000018FE 5B                              POP     BX
  6543 000018FF 5E                              POP     SI
  6544 00001900 A1[5803]                        MOV     AX,[TIMEBUF]
  6545 00001903 8B0E[5A03]                      MOV     CX,[TIMEBUF+2]
  6546 00001907 8B16[5C03]                      MOV     DX,[TIMEBUF+4]
  6547 0000190B 3B06[0003]                      CMP     AX,[DAYCNT]     ;See if day count is the same
  6548                                          ;JZ	SHORT RET22
  6549 0000190F 74CE                    	JZ	SHORT RET21 ; 18/07/2018
  6550                                  	;cmp	ax,43830
  6551 00001911 3D36AB                          CMP     AX,FOURYEARS*30 ;Number of days in 120 years
  6552 00001914 733D                            JAE     SHORT RET22	;Ignore if too large
  6553 00001916 A3[0003]                        MOV     [DAYCNT],AX
  6554 00001919 56                              PUSH    SI
  6555 0000191A 51                              PUSH    CX
  6556 0000191B 52                              PUSH    DX              ;Save time
  6557 0000191C 31D2                            XOR     DX,DX
  6558                                  	;mov	cx,1461
  6559 0000191E B9B505                          MOV     CX,FOURYEARS    ;Number of days in 4 years
  6560 00001921 F7F1                            DIV     CX              ;Compute number of 4-year units
  6561 00001923 D1E0                            SHL     AX,1
  6562 00001925 D1E0                            SHL     AX,1
  6563 00001927 D1E0                            SHL     AX,1            ;Multiply by 8 (no. of half-years)
  6564 00001929 89C1                            MOV     CX,AX           ;<240 implies AH=0
  6565                                  
  6566 0000192B BE[7F0C]                        MOV     SI,YRTAB        ;Table of days in each year
  6567                                  
  6568 0000192E E82300                          CALL    DSLIDE          ;Find out which of four years we're in
  6569 00001931 D1E9                            SHR     CX,1            ;Convert half-years to whole years
  6570 00001933 7304                            JNC     SHORT SK	;Extra half-year?
  6571 00001935 81C2C800                        ADD     DX,200
  6572                                  SK:
  6573 00001939 E82400                          CALL    SETYEAR
  6574 0000193C B101                            MOV     CL,1            ;At least at first month in year
  6575                                  
  6576 0000193E BE[870C]                        MOV     SI,MONTAB       ;Table of days in each month
  6577                                          
  6578 00001941 E81000                  	CALL    DSLIDE          ;Find out which month we're in
  6579 00001944 880E[FD02]                      MOV     [MONTH],CL
  6580 00001948 42                              INC     DX              ;Remainder is day of month (start with one)
  6581 00001949 8816[FC02]                      MOV     [DAY],DL
  6582 0000194D E89400                          CALL    WKDAY           ;Set day of week
  6583 00001950 5A                              POP     DX
  6584 00001951 59                              POP     CX
  6585 00001952 5E                              POP     SI
  6586                                  RET22:  
  6587 00001953 C3                      	RETN
  6588                                  
  6589                                  DSLIDE:
  6590 00001954 B400                            MOV     AH,0
  6591                                  DSLIDE1:
  6592 00001956 AC                              LODSB			;Get count of days
  6593 00001957 39C2                            CMP     DX,AX           ;See if it will fit
  6594 00001959 7217                            JB      SHORT RET23	;If not, done
  6595 0000195B 29C2                            SUB     DX,AX
  6596 0000195D 41                              INC     CX              ;Count one more month/year
  6597 0000195E EBF6                            JMP     SHORT DSLIDE1
  6598                                  
  6599                                  SETYEAR:
  6600                                  ;Set year with value in CX. Adjust length of February for this year.
  6601                                  
  6602                                  ; NOTE: This can also be called thru int 2f. If this is called then it will
  6603                                  ;       set DS to DOSDATA. Since the only guy calling this should be the DOS
  6604                                  ;	redir, DS will be DOSDATA anyway. It is going to be in-efficient to
  6605                                  ;	preserve DS as CHKYR is also called as a routine.
  6606                                  
  6607                                  
  6608                                  	; MSDOS 6.0 (18/07/2018) ; *
  6609                                  
  6610                                  	;GETDSEG DS
  6611                                  
  6612 00001960 0E                      	PUSH	CS  ; *
  6613 00001961 1F                      	POP	DS  ; *
  6614                                  
  6615                                  	; Offset 18CEh in IBMDOS.COM (MSDOS 3.3), 1987 
  6616                                  
  6617 00001962 880E[FE02]                      MOV     [YEAR],CL
  6618                                  CHKYR:
  6619 00001966 F6C103                          TEST    CL,3            ;Check for leap year
  6620 00001969 B01C                            MOV     AL,28
  6621 0000196B 7502                            JNZ     SHORT SAVFEB	;28 days if no leap year
  6622 0000196D FEC0                            INC     AL              ;Add leap day
  6623                                  SAVFEB:
  6624                                  	;mov	[february],al
  6625 0000196F A2[880C]                        MOV     [MONTAB+1],AL   ;Store for February
  6626                                  RET23:  
  6627 00001972 C3                      	RETN
  6628                                  
  6629                                  DODATE:
  6630 00001973 E8F0FF                          CALL    CHKYR           ;Set Feb. up for new year
  6631 00001976 88F0                            MOV     AL,DH
  6632                                  
  6633 00001978 BB[860C]                        MOV     BX,MONTAB-1
  6634                                  
  6635 0000197B D7                              XLAT                    ;Look up days in month
  6636 0000197C 38D0                            CMP     AL,DL
  6637 0000197E B0FF                            MOV     AL,-1           ;Restore error flag, just in case
  6638                                          ;JB	SHORT RET25	;Error if too many days
  6639 00001980 72F0                            jb	short RET23 ; 18/07/2018
  6640 00001982 E8DBFF                  	CALL    SETYEAR
  6641                                  ;
  6642                                  ; WARNING!  DAY and MONTH must be adjacently allocated
  6643                                  ;
  6644 00001985 8916[FC02]                      MOV     [DAY],DX	;Set both day and month
  6645 00001989 D1E9                            SHR     CX,1
  6646 0000198B D1E9                            SHR     CX,1
  6647                                  	;mov	ax,1461
  6648 0000198D B8B505                          MOV     AX,FOURYEARS
  6649 00001990 89D3                            MOV     BX,DX
  6650 00001992 F7E1                            MUL     CX
  6651 00001994 8A0E[FE02]                      MOV     CL,[YEAR]
  6652 00001998 80E103                          AND     CL,3
  6653                                  
  6654 0000199B BE[7F0C]                        MOV     SI,YRTAB
  6655                                  
  6656 0000199E 89C2                            MOV     DX,AX
  6657 000019A0 D1E1                            SHL     CX,1            ;Two entries per year, so double count
  6658 000019A2 E85200                          CALL    DSUM            ;Add up the days in each year
  6659 000019A5 88F9                            MOV     CL,BH           ;Month of year
  6660                                  
  6661 000019A7 BE[870C]                        MOV     SI,MONTAB
  6662                                  
  6663 000019AA 49                              DEC     CX              ;Account for months starting with one
  6664 000019AB E84900                          CALL    DSUM            ;Add up days in each month
  6665 000019AE 88D9                            MOV     CL,BL           ;Day of month
  6666 000019B0 49                              DEC     CX              ;Account for days starting with one
  6667 000019B1 01CA                            ADD     DX,CX           ;Add in to day total
  6668 000019B3 92                              XCHG    AX,DX           ;Get day count in AX
  6669 000019B4 A3[0003]                        MOV     [DAYCNT],AX
  6670 000019B7 56                              PUSH    SI
  6671 000019B8 53                              PUSH    BX
  6672 000019B9 50                              PUSH    AX
  6673                                  
  6674 000019BA BB[5803]                        MOV     BX,TIMEBUF
  6675                                  
  6676 000019BD B90600                          MOV     CX,6
  6677 000019C0 31D2                            XOR     DX,DX
  6678 000019C2 89D0                            MOV     AX,DX
  6679 000019C4 53                              PUSH    BX
  6680 000019C5 E85635                  	CALL	SETREAD
  6681                                  
  6682 000019C8 1E                              PUSH    DS
  6683 000019C9 C536[2E00]                      LDS     SI,[BCLOCK]
  6684 000019CD E82A35                  	CALL	DEVIOCALL2	;Get correct date and time
  6685 000019D0 1F                              POP     DS
  6686 000019D1 5B                              POP     BX
  6687 000019D2 E87C35                  	CALL	SETWRITE
  6688 000019D5 8F06[5803]                      POP     WORD [TIMEBUF]
  6689 000019D9 1E                              PUSH    DS
  6690 000019DA C536[2E00]                      LDS     SI,[BCLOCK]
  6691 000019DE E81935                  	CALL	DEVIOCALL2      ;Set the date
  6692 000019E1 1F                              POP     DS
  6693 000019E2 5B                              POP     BX
  6694 000019E3 5E                              POP     SI
  6695                                  WKDAY:
  6696 000019E4 A1[0003]                        MOV     AX,[DAYCNT]
  6697 000019E7 31D2                            XOR     DX,DX
  6698 000019E9 B90700                          MOV     CX,7
  6699 000019EC 40                              INC     AX
  6700 000019ED 40                              INC     AX              ;First day was Tuesday
  6701 000019EE F7F1                            DIV     CX              ;Compute day of week
  6702 000019F0 8816[0203]                      MOV     [WEEKDAY],DL
  6703 000019F4 30C0                            XOR     AL,AL           ;Flag OK
  6704                                  RET25:
  6705 000019F6 C3                      	RETN
  6706                                  
  6707                                  ;**	DSUM - Compute the sum of a string of bytes
  6708                                  ;
  6709                                  ;	ENTRY	(cx) = byte count
  6710                                  ;		(ds:si) = byte address
  6711                                  ;		(dx) = sum register, initialized by caller
  6712                                  ;	EXIT	(dx) updated
  6713                                  ;	USES	ax, cx, dx, si, flags
  6714                                  
  6715                                  DSUM:
  6716 000019F7 B400                            MOV     AH,0
  6717                                  	;JCXZ	DSUM9
  6718 000019F9 E3FB                            JCXZ	RET25 ; 18/07/2018
  6719                                  DSUM1:
  6720 000019FB AC                              LODSB
  6721 000019FC 01C2                            ADD     DX,AX
  6722 000019FE E2FB                            LOOP    DSUM1
  6723                                  DSUM9:
  6724 00001A00 C3                              RETN
  6725                                  
  6726                                  
  6727                                  ;============================================================================
  6728                                  ; GETSET.ASM
  6729                                  ;============================================================================
  6730                                  ; 18/07/2018 - Retro DOS v3.0 (GETSET.ASM, MSDOS 6.0, 1991)
  6731                                  ; Retro DOS v2.0 - 12/03/2018
  6732                                  
  6733                                  ;TITLE	GETSET - GETting and SETting MS-DOS system calls
  6734                                  ;NAME	GETSET
  6735                                  
  6736                                  ;CODE	SEGMENT BYTE PUBLIC  'CODE'
  6737                                  ;       ASSUME  SS:DOSGROUP,CS:DOSGROUP
  6738                                  
  6739                                  ;USERNUM:
  6740                                  ;	DW	0			; 24 bit user number
  6741                                  ;       DB      0
  6742                                  ;;	IF      IBM
  6743                                  ;;OEMNUM: DB    0			; 8 bit OEM number
  6744                                  ;;	ELSE
  6745                                  ;OEMNUM: DB     0FFH			; 8 bit OEM number
  6746                                  ;;	ENDIF
  6747                                  
  6748                                  ;MSVERS:		; MS-DOS version in hex for $GET_VERSION
  6749                                  ;; 08/07/2018 - Retro DOS v3.0
  6750                                  ;MSMAJOR: DB	MAJOR_VERSION	; DOS_MAJOR_VERSION
  6751                                  ;MSMINOR: DB	MINOR_VERSION	; DOS_MINOR_VERSION  
  6752                                  
  6753                                  
  6754                                  ;BREAK <$Get_Version -- Return MSDOS version number>
  6755                                  
  6756                                  _$GET_VERSION:
  6757                                  
  6758                                  ; Inputs:
  6759                                  ;       None
  6760                                  ; Function:
  6761                                  ;       Return MS-DOS version number
  6762                                  ; Outputs:
  6763                                  ;       OEM number in BH
  6764                                  ;       User number in BL:CX (24 bits)
  6765                                  ;       Version number as AL.AH in binary
  6766                                  ;       NOTE: On pre 1.28 DOSs AL will be zero
  6767                                  
  6768                                  ; MSDOS 6.0
  6769                                  ;		if input al = 00
  6770                                  ;		  (bh) = OEM number			
  6771                                  ;		else if input al = 01
  6772                                  ;		  (bh) = version flags
  6773                                  ;		 
  6774                                  ;		       	 bits 0-2 = DOS internal revision
  6775                                  ;		       	 bits 3-7 = DOS type flags
  6776                                  ;		              bit 3    = DOS is in ROM
  6777                                  ;		              bit 4    = DOS in in HMA
  6778                                  ;		              bits 5-7 = reserved
  6779                                  ;               M007 change - only bit 3 is now valid.  Other bits
  6780                                  ;               are 0 when AL = 1
  6781                                  
  6782                                  	
  6783                                  	; MSDOS 3.3 (IBMDOS.COM, offset 196Dh)
  6784                                  
  6785 00001A01 16                              PUSH    SS
  6786 00001A02 1F                              POP     DS
  6787 00001A03 8B1E[5403]                      MOV     BX,[USERNUM+2]
  6788 00001A07 8B0E[5203]                      MOV     CX,[USERNUM]
  6789 00001A0B A1[7D0C]                        MOV     AX,[MSVERS]
  6790 00001A0E E8FAFB                          call	Get_User_Stack
  6791                                          ;MOV	[SI+2],BX
  6792 00001A11 895C02                  	mov	[SI+user_env.user_BX],BX
  6793                                          ;MOV	[SI+4],CX
  6794 00001A14 894C04                  	mov	[SI+user_env.user_CX],CX
  6795                                          ;MOV	[SI+user_env.user_AX],AX  ; Really only sets AH
  6796 00001A17 8904                            MOV	[SI],AX ; 31/03/2018
  6797 00001A19 C3                      	RETN
  6798                                  
  6799                                  ; 18/07/2018 - Retro DOS v3.0
  6800                                  
  6801                                  ;BREAK <$Get/Set_Verify_on_Write - return/set verify-after-write flag>
  6802                                  
  6803                                  ;**	$Get_Verify_On_Write - Get Status of Verify on write flag
  6804                                  ;
  6805                                  ;	ENTRY	none
  6806                                  ;	EXIT	(al) = value of VERIFY flag
  6807                                  ;	USES	all
  6808                                  
  6809                                  
  6810                                  _$GET_VERIFY_ON_WRITE:
  6811                                  
  6812                                  ;hkn; SS override
  6813 00001A1A 36A0[AD02]              	MOV	AL,[SS:VERFLG]	; Retro DOS v2.0 - 12/03/2018
  6814 00001A1E C3                      	retn
  6815                                  
  6816                                  ;**	$Set_Verify_On_Write - Set Status of Verify on write flag
  6817                                  ;
  6818                                  ;	ENTRY	(al) = value of VERIFY flag
  6819                                  ;	EXIT	none
  6820                                  ;	USES	all
  6821                                  
  6822                                  _$SET_VERIFY_ON_WRITE:
  6823                                  
  6824 00001A1F 2401                    	AND	AL,1
  6825                                  ;hkn; SS override
  6826 00001A21 36A2[AD02]              	MOV	[SS:VERFLG],AL	; Retro DOS v2.0 - 12/03/2018
  6827                                  RET27:	; 18/07/2018
  6828 00001A25 C3                      	retn
  6829                                  
  6830                                  ; 19/07/2018 - Retro DOS v3.0
  6831                                  
  6832                                  ;BREAK <$International - return country-dependent information>
  6833                                  
  6834                                  ;----------------------------------------------------------------------------
  6835                                  ;
  6836                                  ; Procedure Name : $INTERNATIONAL
  6837                                  ;
  6838                                  ; Inputs:
  6839                                  ;	MOV	AH,International
  6840                                  ;	MOV	AL,country	(al = 0 => current country)
  6841                                  ;      [MOV	BX,country]
  6842                                  ;	LDS	DX,block
  6843                                  ;	INT	21
  6844                                  ; Function:
  6845                                  ;	give users an idea of what country the application is running
  6846                                  ; Outputs:
  6847                                  ;	IF DX != -1 on input (get country)
  6848                                  ;	  AL = 0 means return current country table.
  6849                                  ;	  0<AL<0FFH means return country table for country AL
  6850                                  ;	  AL = 0FF means return country table for country BX
  6851                                  ;	  No Carry:
  6852                                  ;	     Register BX will contain the 16-bit country code.
  6853                                  ;	     Register AL will contain the low 8 bits of the country code.
  6854                                  ;	     The block pointed to by DS:DX is filled in with the information
  6855                                  ;	     for the particular country.
  6856                                  ;		BYTE  Size of this table excluding this byte and the next
  6857                                  ;		BYTE  Country code represented by this table
  6858                                  ;			A sequence of n bytes, where n is the number specified
  6859                                  ;			by the first byte above and is not > internat_block_max,
  6860                                  ;			in the correct order for being returned by the
  6861                                  ;			INTERNATIONAL call as follows:
  6862                                  ;		WORD	Date format 0=mdy, 1=dmy, 2=ymd
  6863                                  ;		5 BYTE	Currency symbol null terminated
  6864                                  ;		2 BYTE	thousands separator null terminated
  6865                                  ;		2 BYTE	Decimal point null terminated
  6866                                  ;		2 BYTE	Date separator null terminated
  6867                                  ;		2 BYTE	Time separator null terminated
  6868                                  ;		1 BYTE	Bit field.  Currency format.
  6869                                  ;			Bit 0.	=0 $ before #  =1 $ after #
  6870                                  ;			Bit 1.	no. of spaces between # and $ (0 or 1)
  6871                                  ;		1 BYTE	No. of significant decimal digits in currency
  6872                                  ;		1 BYTE	Bit field.  Time format.
  6873                                  ;			Bit 0.	=0 12 hour clock  =1 24 hour
  6874                                  ;		DWORD	Call address of case conversion routine
  6875                                  ;		2 BYTE	Data list separator null terminated.
  6876                                  ;	  Carry:
  6877                                  ;	     Register AX has the error code.
  6878                                  ;	IF DX = -1 on input (set current country)
  6879                                  ;	  AL = 0 is an error
  6880                                  ;	  0<AL<0FFH means set current country to country AL
  6881                                  ;	  AL = 0FF means set current country to country BX
  6882                                  ;	  No Carry:
  6883                                  ;	    Current country SET
  6884                                  ;	    Register AL will contain the low 8 bits of the country code.
  6885                                  ;	  Carry:
  6886                                  ;	     Register AX has the error code.
  6887                                  ;-----------------------------------------------------------------------------
  6888                                  
  6889                                  ;procedure   $INTERNATIONAL,NEAR   ; DOS 3.3
  6890                                  
  6891                                  _$INTERNATIONAL:  ; IBMDOS.COM (MSDOS 3.3), offset 1992h
  6892                                  	 
  6893 00001A26 3CFF                    	CMP	AL,0FFH
  6894 00001A28 7404                    	JZ	short BX_HAS_CODE	; -1 means country code is in BX
  6895 00001A2A 88C3                    	MOV	BL,AL			; Put AL country code in BX
  6896 00001A2C 30FF                    	XOR	BH,BH
  6897                                  BX_HAS_CODE:
  6898 00001A2E 1E                      	PUSH	DS
  6899 00001A2F 07                      	POP	ES
  6900 00001A30 52                      	PUSH	DX
  6901 00001A31 5F                      	POP	DI			; User buffer to ES:DI
  6902                                  
  6903                                  ;hkn; SS is DOSDATA
  6904                                  ;	context DS
  6905                                  
  6906 00001A32 16                      	push	ss
  6907 00001A33 1F                      	pop	ds
  6908                                  
  6909 00001A34 83FFFF                  	CMP	DI,-1
  6910 00001A37 745F                    	JZ	short international_set
  6911 00001A39 09DB                    	OR	BX,BX
  6912 00001A3B 7505                    	JNZ	short international_find
  6913                                  
  6914                                  ;hkn; country_cdpg is in DOSDATA segment.
  6915 00001A3D BE[FD0F]                	MOV	SI,COUNTRY_CDPG
  6916                                  
  6917 00001A40 EB40                    	JMP	SHORT international_copy
  6918                                  
  6919                                  international_find:
  6920 00001A42 BD0000                  	MOV	BP,0			 ; flag it for GetCntry only
  6921 00001A45 E80B00                  	CALL	international_get
  6922 00001A48 7256                    	JC	short errtn
  6923 00001A4A 83FB00                  	CMP	BX,0			 ; nlsfunc finished it ?
  6924 00001A4D 7533                    	JNZ	SHORT international_copy ; no, copy by myself
  6925 00001A4F 89D3                    	MOV	BX,DX			 ; put country back
  6926 00001A51 EB3A                    	JMP	SHORT international_ok3
  6927                                  
  6928                                  international_get:
  6929                                  
  6930                                  ;hkn; country_cdpg is in DOSDATA segment.
  6931                                  ;hkn; use ss override to access COUNTRY_CDPG fields
  6932 00001A53 BE[FD0F]                	MOV	SI,COUNTRY_CDPG
  6933                                  
  6934                                  	; MSDOS 6.0
  6935                                  	;CMP	BX,ss:[SI.ccDosCountry]	 ; = current country id;smr;SS Override
  6936                                  	;retz				 ; return if equal
  6937                                  
  6938                                  	; MSDOS 3.3
  6939                                  	;cmp	bx,[SI+63h]
  6940 00001A56 3B5C63                  	CMP	BX,[SI+DOS_CCDPG.ccDosCountry]
  6941 00001A59 74CA                    	jz	short RET27
  6942                                  
  6943 00001A5B 89DA                    	MOV	DX,BX
  6944 00001A5D 31DB                    	XOR	BX,BX			; bx = 0, default code page
  6945                                  	;CallInstall NLSInstall,NLSFUNC,0 ; check if NLSFUNC in memory
  6946                                  
  6947 00001A5F B80014                  	mov	ax,1400h
  6948 00001A62 CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - INSTALLATION CHECK
  6949                                  			; Return: AL = 00h not installed, OK to install
  6950                                  			; 01h not installed, not OK
  6951                                  			; FFh installed
  6952                                  	
  6953 00001A64 3CFF                    	CMP	AL,0FFH
  6954 00001A66 7516                    	JNZ	short interr		; not in memory
  6955                                  	;cmp	bp,0
  6956 00001A68 09ED                    	or	bp,bp			; GetCntry ?
  6957 00001A6A 7507                    	JNZ	short stcdpg
  6958                                  	;CallInstall GetCntry,NLSFUNC,4	; get country info
  6959                                  
  6960 00001A6C B80414                  	mov     ax,1404h
  6961 00001A6F CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - GET COUNTRY INFO
  6962                                  			; BX = code page, DX = country code,
  6963                                  			; DS:SI -> internal code page structure
  6964                                  			; ES:DI -> user buffer
  6965                                  			; Return: AL = status
  6966                                  
  6967 00001A71 EB05                    	JMP	short chkok
  6968                                  	
  6969                                  	;nop
  6970                                  
  6971                                  stcdpg:
  6972                                  	;CallInstall SetCodePage,NLSFUNC,3  ; set country info
  6973                                  
  6974 00001A73 B80314                  	mov     ax,1403h
  6975 00001A76 CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - SET COUNTRY INFO
  6976                                  			; DS:SI -> internal code page structure
  6977                                  			; BX = code page, DX = country code
  6978                                  			; Return: AL = status
  6979                                  chkok:
  6980 00001A78 08C0                    	or	al,al			; success ?
  6981                                  	;retz				; yes
  6982 00001A7A 74A9                    	jz	short RET27
  6983                                  
  6984                                  setcarry:
  6985 00001A7C F9                      	STC				; set carry
  6986 00001A7D C3                      	retn
  6987                                  interr:
  6988 00001A7E B0FF                    	MOV	AL,0FFH			; flag nlsfunc error
  6989 00001A80 EBFA                    	JMP	short setcarry
  6990                                  
  6991                                  international_copy:
  6992                                  
  6993                                  ;hkn; country_cdpg is in DOSDATA segment.
  6994                                  ;hkn; use ss override to access COUNTRY_CDPG fields
  6995                                  	; MSDOS 6.0
  6996                                  	;MOV	BX,ss:[SI.ccDosCountry]	 ; = current country id;smr;SS Override
  6997                                  	;MOV	SI,OFFSET DOSDATA:COUNTRY_CDPG.ccDFormat
  6998                                  
  6999                                  	; MSDOS 3.3
  7000                                  	;mov	bx,[SI+63h]
  7001 00001A82 8B5C63                  	mov	BX,[SI+DOS_CCDPG.ccDosCountry]
  7002 00001A85 BE[6410]                	mov	SI,COUNTRY_CDPG+DOS_CCDPG.ccDFormat ; 08/09/2018
  7003                                  
  7004                                  	;mov	cx,24
  7005 00001A88 B91800                  	MOV	CX,OLD_COUNTRY_SIZE
  7006                                  
  7007                                  	; MSDOS 6.0
  7008                                  ;hkn;	must set up DS to SS so that international info can be copied
  7009                                  	;push	ds
  7010                                  	;push	ss					; cs -> ss
  7011                                  	;pop	ds
  7012                                  
  7013 00001A8B F3A4                    	REP	MOVSB			;copy country info
  7014                                  
  7015                                  	; MSDOS 6.0
  7016                                  ;hkn;	restore ds
  7017                                  	;pop	ds
  7018                                  
  7019                                  international_ok3:
  7020 00001A8D E87BFB                  	call	Get_User_Stack
  7021                                  ;ASSUME	DS:NOTHING
  7022                                  	;MOV	[SI+2],BX
  7023 00001A90 895C02                  	MOV	[SI+user_env.user_BX],BX
  7024                                  international_ok:
  7025 00001A93 89D8                    	MOV	AX,BX			; Return country code in AX too.
  7026 00001A95 E965FC                  	jmp	SYS_RET_OK
  7027                                  
  7028                                  international_set:
  7029                                  
  7030                                  ;hkn; ASSUME	DS:DOSGROUP
  7031                                  ;ASSUME	DS:DOSDATA
  7032                                  
  7033 00001A98 BD0100                  	MOV	BP,1			; flag it for SetCodePage only
  7034 00001A9B E8B5FF                  	CALL	international_get
  7035 00001A9E 73F3                    	JNC	short international_ok
  7036                                  errtn:
  7037 00001AA0 3CFF                    	CMP	AL,0FFH
  7038 00001AA2 7403                    	JZ	short errtn2
  7039                                  errtn1:
  7040 00001AA4 E962FC                  	jmp	SYS_RET_ERR		; return what we got from NLSFUNC
  7041                                  errtn2:
  7042                                  	;error	error_invalid_function	; NLSFUNC not existent
  7043                                  
  7044                                  	;mov	al,1
  7045 00001AA7 B001                    	mov	al,error_invalid_function 
  7046                                  	;jmp	short errtn1
  7047                                  errtn3:
  7048 00001AA9 E95DFC                  	jmp	SYS_RET_ERR
  7049                                  
  7050                                  ;EndProc $INTERNATIONAL
  7051                                  
  7052                                  ; 19/07/2018
  7053                                  
  7054                                  ;BREAK <$GetExtCntry - return extended country-dependent information>
  7055                                  
  7056                                  ;---------------------------------------------------------------------------
  7057                                  ;
  7058                                  ; Procedure Name : $GetExtCntry
  7059                                  ;
  7060                                  ; Inputs:
  7061                                  ;	if AL >= 20H
  7062                                  ;	  AL= 20H    capitalize single char, DL= char
  7063                                  ;	      21H    capitalize string, CX= string length
  7064                                  ;	      22H    capitalize ASCIIZ string
  7065                                  ;	      23H    YES/NO check, DL=1st char DH= 2nd char (DBCS)
  7066                                  ;	      80H bit 0 = use normal upper case table
  7067                                  ;		      1 = use file upper case table
  7068                                  ;	   DS:DX points to string
  7069                                  ;
  7070                                  ;	else
  7071                                  ;
  7072                                  ;	MOV	AH,GetExtCntry	 ; DOS 3.3
  7073                                  ;	MOV	AL,INFO_ID	( info type,-1 selects all )
  7074                                  ;	MOV	BX,CODE_PAGE	( -1 = active code page )
  7075                                  ;	MOV	DX,COUNTRY_ID	( -1 = active country )
  7076                                  ;	MOV	CX,SIZE 	( amount of data to return )
  7077                                  ;	LES	DI,COUNTRY_INFO ( buffer for returned data )
  7078                                  ;	INT	21
  7079                                  ; Function:
  7080                                  ;	give users extended country dependent information
  7081                                  ;	or capitalize chars
  7082                                  ; Outputs:
  7083                                  ;	  No Carry:
  7084                                  ;	     extended country info is succesfully returned
  7085                                  ;	  Carry:
  7086                                  ;	     Register AX has the error code.
  7087                                  ;	     AX=0, NO	 for YES/NO CHECK
  7088                                  ;		1, YES
  7089                                  ;-------------------------------------------------------------------------------
  7090                                  
  7091                                  ;procedure   $GetExtCntry,NEAR	; DOS 3.3
  7092                                  
  7093                                  	; MSDOS 6.0
  7094                                  _$GetExtCntry:
  7095 00001AAC 3C20                    	CMP	AL,CAP_ONE_CHAR 	; < 20H ?
  7096 00001AAE 7262                    	JB	short notcap
  7097                                  capcap: 				;
  7098 00001AB0 A880                    	TEST	AL,UPPER_TABLE		; which upper case table
  7099 00001AB2 7505                    	JNZ	short fileupper		; file upper case
  7100                                  
  7101                                  ;hkn; UCASE_TAB in DOSDATA
  7102 00001AB4 BB[8810]                	MOV	BX,UCASE_TAB+2		; get normal upper case
  7103 00001AB7 EB03                    	JMP	SHORT capit
  7104                                  
  7105                                  fileupper:
  7106                                  ;hkn; FILE_UCASE_TAB in DOSDATA
  7107 00001AB9 BB[0A11]                	MOV	BX,FILE_UCASE_TAB+2 ; get file upper case
  7108                                  capit:					;
  7109 00001ABC 3C20                    	CMP	AL,CAP_ONE_CHAR 	; cap one char ?
  7110 00001ABE 750D                    	JNZ	short chkyes		; no
  7111 00001AC0 88D0                    	MOV	AL,DL			; set up AL
  7112 00001AC2 E8683B                  	call	GETLET3 		; upper case it
  7113 00001AC5 E843FB                  	call	Get_User_Stack		; get user stack
  7114 00001AC8 884406                  	MOV	[SI+user_env.user_DX],AL ; user's DL=AL
  7115 00001ACB EB1C                    	JMP	SHORT nono		; done
  7116                                  chkyes: 				;
  7117 00001ACD 3C23                    	CMP	AL,CHECK_YES_NO		; check YES or NO ?
  7118 00001ACF 751B                    	JNZ	short capstring		; no
  7119 00001AD1 31C0                    	XOR	AX,AX			; presume NO
  7120                                  		      
  7121                                  ;hkn; NLS_YES, NLS_NO, NLS_yes2, NLS_no2 is defined in msdos.cl3 which is
  7122                                  ;hkn; included in yesno.asm in the DOSCODE segment.
  7123                                  
  7124                                  	; 06/08/2018 - Retro DOS v3.0
  7125                                  	;CMP	DL,[cs:NLS_YES]		; is 'Y' ?
  7126 00001AD3 80FA59                  	cmp	DL,'Y'
  7127 00001AD6 7410                    	JZ	short yesyes		; yes
  7128                                  	;CMP	DL,[cs:NLS_yes2]	; is 'y' ?
  7129 00001AD8 80FA79                  	cmp	dl,'y'
  7130 00001ADB 740B                    	JZ	short yesyes		; yes
  7131 00001ADD 80FA4E                  	cmp	dl,'N'
  7132                                  	;CMP	DL,[cs:NLS_NO]		; is  'N'?
  7133 00001AE0 7407                    	JZ	short nono		; no
  7134 00001AE2 80FA6E                  	CMP	DL,'n'
  7135                                  	;CMP	DL,[cs:NLS_no2]		; is 'n' ?
  7136 00001AE5 7402                    	JZ	short nono		; no
  7137                                  ;dbcs_char:				;
  7138 00001AE7 40                      	INC	AX			; not YES or NO
  7139                                  yesyes: 				;
  7140 00001AE8 40                      	INC	AX			; return 1
  7141                                  nono:					;
  7142 00001AE9 E911FC                  	jmp	SYS_RET_OK		; done
  7143                                  capstring:				;
  7144 00001AEC 89D6                    	MOV	SI,DX			; si=dx
  7145 00001AEE 3C21                    	CMP	AL,CAP_STRING		; cap string ?
  7146 00001AF0 750F                    	JNZ	short capascii		; no
  7147 00001AF2 09C9                    	OR	CX,CX			; check count 0
  7148 00001AF4 74F3                    	JZ	short nono		; yes finished
  7149                                  concap: 				;
  7150 00001AF6 AC                      	LODSB				; get char
  7151 00001AF7 E8333B                  	call	GETLET3 		; upper case it
  7152 00001AFA 8844FF                  	MOV	byte [SI-1],AL		; store back
  7153                                  next99: 				;
  7154 00001AFD E2F7                    	LOOP	concap			; continue
  7155 00001AFF EBE8                    	JMP	short nono		; done
  7156                                  capascii:				;
  7157 00001B01 3C22                    	CMP	AL,CAP_ASCIIZ		; cap ASCIIZ string ?
  7158 00001B03 7545                    	JNZ	short capinval		; no
  7159                                  concap2:				;
  7160 00001B05 AC                      	LODSB				; get char
  7161 00001B06 08C0                    	or	al,al			; end of string ?
  7162 00001B08 74DF                    	JZ	short nono		; yes
  7163 00001B0A E8203B                  	call	GETLET3 		; upper case it
  7164 00001B0D 8844FF                  	MOV	[SI-1],AL		; store back
  7165 00001B10 EBF3                    	JMP	short concap2 		; continue
  7166                                  
  7167                                  	; MSDOS 3.3 ($ MSDOS 6.0)
  7168                                  
  7169                                  ; Offset 1A19h in IBMDOS.COM (MSDOS 3.3), 1987 	
  7170                                  ; _$GetExtCntry:
  7171                                  
  7172                                  notcap:
  7173 00001B12 83F905                  	CMP	CX,5			; minimum size is 5
  7174 00001B15 7279                    	jb	short sizeerror
  7175                                  
  7176                                  GEC_CONT:
  7177                                  ;hkn; SS is DOSDATA
  7178                                  	;context DS
  7179                                  
  7180 00001B17 16                      	push	ss
  7181                                  	;pop	es  ; ! (Retro DOS v3.0 BUG) !
  7182 00001B18 1F                      	pop	ds  ; 17/05/2019 - BugFix
  7183                                  	
  7184                                  ;hkn; COUNTRY_CDPG is in DOSDATA
  7185 00001B19 BE[FD0F]                	MOV	SI,COUNTRY_CDPG
  7186                                  
  7187 00001B1C 83FAFF                  	CMP	DX,-1			; active country ?
  7188 00001B1F 7503                    	JNZ	short GETCDPG 		; no
  7189                                  
  7190                                  ;hkn; use DS override to accesss country_cdpg fields
  7191                                  	;mov	dx,[si+63h]
  7192 00001B21 8B5463                  	MOV	DX,[SI+DOS_CCDPG.ccDosCountry]
  7193                                  					; get active country id;smr;use DS
  7194                                  GETCDPG:
  7195 00001B24 83FBFF                  	CMP	BX,-1			; active code page?
  7196 00001B27 7503                    	JNZ	short CHKAGAIN		; no, check again
  7197                                  
  7198                                  ;hkn; use DS override to accesss country_cdpg fields
  7199                                  	;mov	bx,[si+65h]
  7200 00001B29 8B5C65                  	MOV	BX,[SI+DOS_CCDPG.ccDosCodePage]
  7201                                  					; get active code page id;smr;Use DS
  7202                                  CHKAGAIN:
  7203                                  	;cmp	dx,[si+63h]
  7204 00001B2C 3B5463                  	CMP	DX,[SI+DOS_CCDPG.ccDosCountry]
  7205                                  					; same as active country id?;smr;use DS
  7206 00001B2F 7552                    	JNZ	short CHKNLS		; no
  7207                                  	;cmp	bx,[si+65h]
  7208 00001B31 3B5C65                  	CMP	BX,[SI+DOS_CCDPG.ccDosCodePage]	
  7209                                  					; same as active code pg id?;smr;use DS
  7210 00001B34 754D                    	JNZ	short CHKNLS		; no
  7211                                  CHKTYPE:
  7212                                  	;mov	bx,[si+48h]
  7213 00001B36 8B5C48                  	MOV	BX,[SI+DOS_CCDPG.ccSysCodePage]	
  7214                                  					; bx = sys code page id;smr;use DS
  7215                                  ;	CMP	AL,SetALL		; select all?
  7216                                  ;	JNZ	short SELONE
  7217                                  ;	MOV	SI,COUNTRY_CDPG+DOS_CCDPG.ccNumber_of_entries
  7218                                  ;SELONE:
  7219 00001B39 51                      	PUSH	CX			; save cx
  7220                                  	;mov	cx,[si+4Ah]
  7221 00001B3A 8B4C4A                  	MOV	CX,[SI+DOS_CCDPG.ccNumber_of_entries]	;smr;use DS
  7222 00001B3D BE[4910]                	MOV	SI,COUNTRY_CDPG+DOS_CCDPG.ccSetUcase   ;smr;CDPG in DOSDATA
  7223                                  NXTENTRY:
  7224 00001B40 3A04                    	CMP	AL,[SI] 		; compare info type;smr;use DS
  7225 00001B42 740B                    	JZ	short FOUNDIT
  7226 00001B44 83C605                  	ADD	SI,5			; next entry
  7227 00001B47 E2F7                    	LOOP	NXTENTRY
  7228 00001B49 59                      	POP	CX
  7229                                  capinval:
  7230                                  	;error	error_invalid_function	; info type not found
  7231                                  	;mov	al,1
  7232 00001B4A B001                    	mov	al,error_invalid_function
  7233 00001B4C E9BAFB                  	jmp	SYS_RET_ERR
  7234                                  
  7235                                  FOUNDIT:
  7236 00001B4F A4                      	MOVSB				; move info id byte
  7237 00001B50 59                      	POP	CX			; retsore char count
  7238                                  	;cmp	al,1
  7239 00001B51 3C01                    	CMP	AL,SetCountryInfo	; select country info type ?
  7240 00001B53 7415                    	JZ	short setsize
  7241 00001B55 B90400                  	MOV	CX,4			; 4 bytes will be moved
  7242 00001B58 B80500                  	MOV	AX,5			; 5 bytes will be returned in CX
  7243                                  OK_RETN:
  7244 00001B5B F3A4                    	REP	MOVSB			; copy info
  7245 00001B5D 89C1                    	MOV	CX,AX			; CX = actual length returned
  7246 00001B5F 89D8                    	MOV	AX,BX			; return sys code page in ax
  7247                                  GETDONE:
  7248 00001B61 E8A7FA                  	call	Get_User_Stack		; return actual length to user's CX
  7249                                  	;mov	[si+4],cx 
  7250 00001B64 894C04                  	MOV	[SI+user_env.user_CX],CX
  7251 00001B67 E993FB                  	jmp	SYS_RET_OK
  7252                                  setsize:
  7253 00001B6A 83E903                  	SUB	CX,3			; size after length field
  7254 00001B6D 390C                    	CMP	[SI],CX			; less than table size ;smr;use ds
  7255 00001B6F 7302                    	JAE	short setsize2		; no
  7256 00001B71 8B0C                    	MOV	CX,[SI]			; truncate to table size ;smr;use ds
  7257                                  setsize2:
  7258 00001B73 26890D                  	MOV	[ES:DI],CX		; copy actual length to user's
  7259 00001B76 83C702                  	ADD	DI,2			; update index
  7260 00001B79 83C602                  	ADD	SI,2
  7261 00001B7C 89C8                    	MOV	AX,CX
  7262 00001B7E 83C003                  	ADD	AX,3			; AX has the actual length
  7263 00001B81 EBD8                    	JMP	short OK_RETN 		; go move it
  7264                                  CHKNLS:
  7265 00001B83 30E4                    	XOR	AH,AH
  7266 00001B85 50                      	PUSH	AX			; save info type
  7267 00001B86 5D                      	POP	BP			; bp = info type
  7268                                  	
  7269                                  	;CallInstall NLSInstall,NLSFUNC,0 ; check if NLSFUNC in memory
  7270                                  
  7271 00001B87 B80014                  	mov     ax, 1400h
  7272 00001B8A CD2F                    	int     2Fh     ; - Multiplex - NLSFUNC.COM - INSTALLATION CHECK
  7273                                  			; Return: AL = 00h not installed, OK to install
  7274                                  			; 01h not installed, not OK
  7275                                  			; FFh installed
  7276                                  	
  7277 00001B8C 3CFF                    	CMP	AL,0FFH
  7278 00001B8E 7405                    	JZ	short NLSNXT		; in memory
  7279                                  
  7280                                  sizeerror:
  7281                                  	;error	error_invalid_function
  7282                                  	;mov	al,1
  7283 00001B90 B001                    	mov	al,error_invalid_function
  7284 00001B92 E974FB                  	jmp	SYS_RET_ERR
  7285                                  
  7286                                  NLSNXT: 
  7287                                  	;CallInstall GetExtInfo,NLSFUNC,2 ;get extended info
  7288                                  
  7289 00001B95 B80214                  	mov     ax, 1402h
  7290 00001B98 CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - GET COUNTRY INFO
  7291                                  			; BP = subfunction, BX = code page
  7292                                  			; DX = country code, DS:SI -> internal code page structure
  7293                                  			; ES:DI -> user buffer, CX = size of user buffer
  7294                                  			; Return: AL = status
  7295                                  			; 00h successful
  7296                                  			; else DOS error code
  7297                                  
  7298 00001B9A 3C00                    	CMP	AL,0			; success ?
  7299 00001B9C 7508                    	JNZ	short NLSERROR
  7300 00001B9E 8B4448                  	mov     ax,[si+48h]
  7301 00001BA1 8B4448                  	MOV	AX,[SI+DOS_CCDPG.ccSysCodePage]	
  7302                                  			; ax = sys code page id;smr;use ds;
  7303                                  			;BUGBUG;check whether DS is OK after the above calls
  7304 00001BA4 EBBB                    	JMP	short GETDONE
  7305                                  NLSERROR:
  7306 00001BA6 E960FB                  	jmp	SYS_RET_ERR		; return what is got from NLSFUNC
  7307                                  
  7308                                  ;EndProc $GetExtCntry
  7309                                  
  7310                                  ;BREAK <$GetSetCdPg - get or set global code page>
  7311                                  
  7312                                  ;**	$GetSetCdPg - Get or Set Global Code Page
  7313                                  ;
  7314                                  ;   System call format:
  7315                                  ;
  7316                                  ;	MOV	AH,GetSetCdPg	; DOS 3.3
  7317                                  ;	MOV	AL,n		; n = 1 : get code page, n = 2 : set code page
  7318                                  ;	MOV	BX,CODE_PAGE	( set code page only)
  7319                                  ;	INT	21
  7320                                  ;
  7321                                  ;	ENTRY	(al) = n
  7322                                  ;		(bx) = code page
  7323                                  ;	EXIT	'C' clear
  7324                                  ;		  global code page is set	(set global code page)
  7325                                  ;		  (BX) = active code page id	(get global code page)
  7326                                  ;		  (DX) = system code page id	(get global code page)
  7327                                  ;		'C' set
  7328                                  ;		  (AX) = error code
  7329                                  
  7330                                  ;procedure  $GetSetCdPg,NEAR   ; DOS 3.3
  7331                                  
  7332                                  _$GetSetCdPg:
  7333                                  
  7334                                  ;hkn; SS is DOSDATA
  7335                                  	;context DS
  7336                                  
  7337 00001BA9 16                      	push	ss
  7338 00001BAA 1F                      	pop	ds
  7339                                  
  7340                                  ;hkn; COUNTRY_CDPG is in DOSDATA
  7341 00001BAB BE[FD0F]                	MOV	SI,COUNTRY_CDPG
  7342                                  
  7343 00001BAE 3C01                    	CMP	AL,1		       ; get global code page
  7344 00001BB0 7512                    	JNZ	short setglpg 	       ; set global cod epage
  7345                                  	;mov	bx,[si+65h]
  7346 00001BB2 8B5C65                  	MOV	BX,[SI+DOS_CCDPG.ccDosCodePage]
  7347                                  					; get active code page id;smr;use ds
  7348                                  	;mov	dx,[si+48h]
  7349 00001BB5 8B5448                  	MOV	DX,[SI+DOS_CCDPG.ccSysCodePage]
  7350                                  				  	; get sys code page id;smr;use ds
  7351 00001BB8 E850FA                  	call	Get_User_Stack
  7352                                  ;ASSUME DS:NOTHING
  7353                                  	;mov	[si+2],bx
  7354 00001BBB 895C02                  	MOV	[SI+user_env.user_BX],BX ; update returned bx
  7355                                  	;mov	[si+6],dx
  7356 00001BBE 895406                  	MOV	[SI+user_env.user_DX],DX ; update returned dx
  7357                                  OK_RETURN:
  7358                                  	;transfer SYS_RET_OK
  7359 00001BC1 E939FB                  	jmp	SYS_RET_OK
  7360                                  
  7361                                  ;hkn; ASSUME DS:DOSGROUP
  7362                                  ;ASSUME	DS:DOSDATA
  7363                                  
  7364                                  setglpg:
  7365 00001BC4 3C02                    	CMP	AL,2
  7366 00001BC6 7534                    	JNZ	short nomem
  7367                                  ;;;;;;; CMP	BX,[SI+DOS_CCDPG.ccDosCodePage] ; same as active code page
  7368                                  ;;;;;;; JZ	short OK_RETURN		; yes
  7369                                  	;mov	dx,[si+63h]
  7370 00001BC8 8B5463                  	MOV	DX,[SI+DOS_CCDPG.ccDosCountry]	;smr;use ds
  7371                                  	;CallInstall NLSInstall,NLSFUNC,0 ; check if NLSFUNC in memory
  7372 00001BCB B80014                  	mov     ax, 1400h
  7373 00001BCE CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - INSTALLATION CHECK
  7374                                  			; Return: AL = 00h not installed, OK to install
  7375                                  			; 01h not installed, not OK
  7376                                  			; FFh installed
  7377 00001BD0 3CFF                    	CMP	AL,0FFH
  7378 00001BD2 7528                    	JNZ	short nomem		; not in memory
  7379                                  	;CallInstall SetCodePage,NLSFUNC,1  ;set the code page
  7380 00001BD4 B80114                  	mov     ax, 1401h
  7381 00001BD7 CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - CHANGE CODE PAGE
  7382                                  			; DS:SI -> internal code page structure
  7383                                  			; BX = new code page, DX = country code???
  7384                                  			; Return: AL = status
  7385                                  			; 00h successful
  7386                                  			; else DOS error code
  7387                                  	;cmp	al,0
  7388 00001BD9 08C0                    	or	al,al			   ; success ?
  7389 00001BDB 74E4                    	JZ	short OK_RETURN		   ; yes
  7390 00001BDD 3C41                    	CMP	AL,65			   ; set device code page failed
  7391 00001BDF 7518                    	JNZ	short seterr
  7392 00001BE1 B84100                  	MOV	AX,65
  7393 00001BE4 A3[D202]                	MOV	[EXTERR],AX
  7394                                  	;mov	byte [EXTERR_ACTION],6
  7395                                  	;mov	byte [EXTERR_CLASS],5
  7396                                  	;mov	byte [EXTERR_LOCUS],4
  7397 00001BE7 C606[D402]06            	MOV	byte [EXTERR_ACTION],errACT_Ignore
  7398 00001BEC C606[D502]05            	MOV	byte [EXTERR_CLASS],errCLASS_HrdFail
  7399 00001BF1 C606[D102]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev
  7400                                  	;transfer From_GetSet
  7401 00001BF6 E918FB                  	jmp	From_GetSet
  7402                                  
  7403                                  seterr:
  7404                                  	;transfer SYS_RET_ERR
  7405 00001BF9 E90DFB                  	jmp	SYS_RET_ERR
  7406                                  
  7407                                  nomem:
  7408                                  	;error	error_invalid_function ; function not defined
  7409                                  	;mov	al,1
  7410 00001BFC B001                    	mov	al,error_invalid_function
  7411 00001BFE EBF9                    	jmp	short seterr
  7412                                  
  7413                                  ;EndProc $GetSetCdPg
  7414                                  
  7415                                  
  7416                                  ;BREAK <$Get_Drive_Freespace -- Return bytes of free disk space on a drive>
  7417                                  
  7418                                  ;**	$Get_Drive_Freespace - Return amount of drive free space
  7419                                  ;
  7420                                  ;	$Get_Drive_Freespace returns the # of free allocation units on a
  7421                                  ;		drive.
  7422                                  ;
  7423                                  ;	This call returns the same info in the same registers (except for the
  7424                                  ;	FAT pointer) as the old FAT pointer calls
  7425                                  ;
  7426                                  ;	ENTRY	DL = Drive number
  7427                                  ;	EXIT	AX = Sectors per allocation unit
  7428                                  ;		   = -1 if bad drive specified
  7429                                  ;		On User Stack
  7430                                  ;		    BX = Number of free allocation units
  7431                                  ;		    DX = Total Number of allocation units on disk
  7432                                  ;		    CX = Sector size
  7433                                  
  7434                                  ;procedure   $GET_DRIVE_FREESPACE,NEAR
  7435                                  
  7436                                  _$GET_DRIVE_FREESPACE:
  7437                                  
  7438                                  ;hkn; SS is DOSDATA
  7439                                  	;context DS
  7440 00001C00 16                      	push	ss
  7441 00001C01 1F                      	pop	ds
  7442                                  
  7443 00001C02 88D0                    	MOV	AL,DL
  7444                                  	;invoke	GetThisDrv		; Get drive
  7445 00001C04 E86A4D                  	call	GETTHISDRV
  7446                                  SET_AX_RET:
  7447 00001C07 7218                    	JC	short BADFDRV
  7448                                  	;invoke	DISK_INFO
  7449 00001C09 E8A71C                  	call	DISK_INFO
  7450 00001C0C 87D3                    	XCHG	DX,BX
  7451 00001C0E 72F7                    	JC	short SET_AX_RET	; User FAILed to I 24
  7452 00001C10 30E4                    	XOR	AH,AH			; Chuck Fat ID byte
  7453                                  DoSt:
  7454 00001C12 E8F6F9                  	call	Get_User_Stack
  7455                                  ;ASSUME	DS:NOTHING
  7456                                  	;mov	[si+6],dx
  7457                                  	;mov	[si+4],cx
  7458                                  	;mov	[si+2],bx
  7459 00001C15 895406                  	MOV	[SI+user_env.user_DX],DX
  7460 00001C18 894C04                  	MOV	[SI+user_env.user_CX],CX
  7461 00001C1B 895C02                  	MOV	[SI+user_env.user_BX],BX
  7462                                  	;MOV	[SI+user_env.user_AX],AX
  7463 00001C1E 8904                    	mov     [si],ax
  7464                                  	;return
  7465 00001C20 C3                      	retn
  7466                                  
  7467                                  BADFDRV:
  7468                                  	; MSDOS 6.0
  7469                                  	;;mov	al,0Fh
  7470                                  	;MOV	AL,error_invalid_drive	; Assume error
  7471                                  	
  7472                                  	; MSDOS 3.3
  7473                                  	;mov	al,0Fh
  7474 00001C21 B00F                    	mov	al,error_invalid_drive	; Assume error
  7475                                  
  7476                                  	;invoke	FCB_RET_ERR
  7477 00001C23 E8F9FA                  	call	FCB_RET_ERR
  7478 00001C26 B8FFFF                  	MOV	AX,-1
  7479 00001C29 EBE7                    	JMP	short DoSt
  7480                                  
  7481                                  ;EndProc $GET_DRIVE_FREESPACE
  7482                                  
  7483                                  
  7484                                  ;	BREAK <$Get_DMA, $Set_DMA -- Get/Set current DMA address>
  7485                                  
  7486                                  ;**	$Get_DMA - Get Disk Transfer Address
  7487                                  ;
  7488                                  ;	ENTRY	none
  7489                                  ;	EXIT	ES:BX is current transfer address
  7490                                  ;	USES	all
  7491                                  
  7492                                  _$GET_DMA:
  7493 00001C2B 368B1E[DA02]            	MOV	BX,[SS:DMAADD]
  7494 00001C30 368B0E[DC02]            	MOV	CX,[SS:DMAADD+2]
  7495 00001C35 E8D3F9                  	call	Get_User_Stack
  7496                                  	;mov	[si+2],bx
  7497                                  	;mov	[si+10h],cx
  7498 00001C38 895C02                  	MOV	[SI+user_env.user_BX],BX
  7499 00001C3B 894C10                  	MOV	[SI+user_env.user_ES],CX
  7500 00001C3E C3                      	retn
  7501                                  
  7502                                  ;**	$Set_DMA - Set Disk Transfer Address
  7503                                  ;
  7504                                  ;	ENTRY	DS:DX is current transfer address
  7505                                  ;	EXIT	none
  7506                                  ;	USES	all
  7507                                  
  7508                                  _$SET_DMA:
  7509 00001C3F 368916[DA02]            	MOV	[SS:DMAADD],DX
  7510 00001C44 368C1E[DC02]            	MOV	[SS:DMAADD+2],DS
  7511 00001C49 C3                      	retn
  7512                                  
  7513                                  ;	BREAK <$Get_Default_Drive, $Set_Default_Drive -- Set/Get default drive>
  7514                                  
  7515                                  ;**	$Get_Default_Drive - Get Current Default Drive
  7516                                  ;
  7517                                  ;	ENTRY	none
  7518                                  ;	EXIT	(AL) = drive number
  7519                                  ;	USES	all
  7520                                  
  7521                                  _$GET_DEFAULT_DRIVE:
  7522 00001C4A 36A0[E402]              	MOV	AL,[SS:CURDRV]
  7523 00001C4E C3                      	retn
  7524                                  
  7525                                  ;**	$Set_Default_Drive - Specify new Default Drive
  7526                                  ;
  7527                                  ;	ENTRY	(DL) = Drive number for new default drive
  7528                                  ;	EXIT	(AL) = Number of drives, NO ERROR RETURN IF DRIVE NUMBER BAD
  7529                                  
  7530                                  _$SET_DEFAULT_DRIVE:
  7531 00001C4F 88D0                    	MOV	AL,DL
  7532 00001C51 FEC0                    	INC	AL			; A=1, B=2...
  7533 00001C53 E8044D                  	call	GetVisDrv		; see if visible drive
  7534 00001C56 7204                    	JC	short SETRET		; errors do not set
  7535 00001C58 36A2[E402]              	MOV	[SS:CURDRV],AL		; no, set
  7536                                  
  7537                                  SETRET:
  7538 00001C5C 36A0[4700]              	MOV	AL,[SS:CDSCOUNT]	; let user see what the count really is
  7539 00001C60 C3                      	retn
  7540                                  
  7541                                  
  7542                                  ;BREAK <$Get/Set_Interrupt_Vector - Get/Set interrupt vectors>
  7543                                  
  7544                                  ;**	$Get_Interrupt_Vector - Get Interrupt Vector
  7545                                  ;
  7546                                  ;	$Get_Interrupt_Vector is the official way for user pgms to get the
  7547                                  ;	contents of an interrupt vector.
  7548                                  ;
  7549                                  ;	ENTRY	(AL) = interrupt number
  7550                                  ;	EXIT	(ES:BX) = current interrupt vector
  7551                                  
  7552                                  _$GET_INTERRUPT_VECTOR:
  7553 00001C61 E81A00                  	CALL	RECSET
  7554 00001C64 26C41F                  	LES	BX,[ES:BX]
  7555 00001C67 E8A1F9                  	call	Get_User_Stack
  7556                                  	;mov	[si+2],bx
  7557                                  	;mov	[si+10h],es
  7558 00001C6A 895C02                  	MOV	[SI+user_env.user_BX],BX
  7559 00001C6D 8C4410                  	MOV	[SI+user_env.user_ES],ES
  7560 00001C70 C3                      	retn
  7561                                  
  7562                                  ;**	$Set_Interrupt_Vector - Set Interrupt Vector
  7563                                  ;
  7564                                  ;	$Set_Interrupt_Vector is the official way for user pgms to set the
  7565                                  ;	contents of an interrupt vector.
  7566                                  ;
  7567                                  ;	M004, M068: Also set A20OFF_COUNT to 1 if EXECA20OFF bit has been set 
  7568                                  ;	and if A20OFF_COUNT is non-zero. See under tag M003 in inc\dossym.inc 
  7569                                  ;	for explanation.
  7570                                  ;
  7571                                  ;	ENTRY	(AL) = interrupt number
  7572                                  ;		(ds:dx) = desired new vector value
  7573                                  ;	EXIT	none
  7574                                  ;	USES	all
  7575                                  
  7576                                  _$SET_INTERRUPT_VECTOR:
  7577 00001C71 E80A00                  	CALL	RECSET
  7578 00001C74 FA                      	CLI				; Watch out!!!!! Folks sometimes use
  7579 00001C75 268917                  	MOV	[ES:BX],DX		;   this for hardware ints (like timer).
  7580 00001C78 268C5F02                	MOV	[ES:BX+2],DS
  7581 00001C7C FB                      	STI
  7582                                  					; M004, M068 - Start
  7583                                  	; MSDOS 6.0
  7584                                  	;test	byte [DOS_FLAG],EXECA20OFF
  7585                                  					; Q: was the previous call an int 21
  7586                                  					;    exec call
  7587                                  	;jnz	short siv_1		; Y: go set count
  7588 00001C7D C3                      	retn				; N: return
  7589                                  
  7590                                  ;siv_1:	
  7591                                  	;cmp	byte [A20OFF_COUNT],0	; Q: is count 0
  7592                                  	;jne	short siv_2		; N: done 
  7593                                  	;mov	byte [A20OFF_COUNT],1	; Y: set it to 1 to indicate to dos 
  7594                                  					; dispatcher to turn A20 Off before 
  7595                                  					; returning to user.
  7596                                  ;siv_2:
  7597                                  	;retn				; M004, M068 - End
  7598                                  	
  7599                                  RECSET:
  7600 00001C7E 31DB                    	XOR	BX,BX
  7601 00001C80 8EC3                    	MOV	ES,BX
  7602 00001C82 88C3                    	MOV	BL,AL
  7603 00001C84 D1E3                    	SHL	BX,1
  7604 00001C86 D1E3                    	SHL	BX,1
  7605 00001C88 C3                      	retn
  7606                                  
  7607                                  
  7608                                  ;	BREAK <$Char_Oper - hack on paths, switches so that xenix can look like PCDOS>
  7609                                  
  7610                                  ;**	$Char_Oper - Manipulate Switch Character
  7611                                  ;
  7612                                  ;	This function was put in to facilitate XENIX path/switch compatibility
  7613                                  ;
  7614                                  ;	ENTRY	AL = function:
  7615                                  ;		    0 - read switch char
  7616                                  ;		    1 - set switch char (char in DL)
  7617                                  ;		    2 - read device availability
  7618                                  ;			Always returns available
  7619                                  ;		    3 - set device availability
  7620                                  ;			No longer supported (NOP)
  7621                                  ;	EXIT	(al) = 0xff iff error
  7622                                  ;		(al) != 0xff if ok
  7623                                  ;		  (dl) = character/flag, iff "read switch char" subfunction
  7624                                  ;	USES	AL, DL
  7625                                  ;
  7626                                  ;	NOTE	This already obsolete function has been deactivated in DOS 5.0
  7627                                  ;		The character / is always returned for subfunction 0,
  7628                                  ;		subfunction 2 always returns -1, all other subfunctions are ignored.
  7629                                  
  7630                                  _$CHAR_OPER:
  7631                                  	; MSDOS 6.0
  7632                                  	;or	al,al				; get switch?
  7633                                  	;mov	dl,'/'				; assume yes
  7634                                  	;jz	short chop_1			; jump if yes
  7635                                  	;cmp	al,2				; check device availability?
  7636                                  	;mov	dl,-1				; assume yes
  7637                                  	;jz	short chop_1				; jump if yes
  7638                                  	;retn					; otherwise just quit
  7639                                  
  7640                                  ; subfunctions requiring return of value to user come here.  DL holds
  7641                                  ; value to return
  7642                                  
  7643                                  ;chop_1:
  7644                                  	;call	Get_User_Stack
  7645                                  	;mov	[SI+user_env.user_DX],dx	; store value for user
  7646                                  	;retn
  7647                                  
  7648                                  	; MSDOS 3.3
  7649                                  	; Offset 1B87h in IBMDOS.COM (MSDOS 3.3), 1987
  7650 00001C89 16                      	push    ss
  7651 00001C8A 1F                      	pop     ds
  7652 00001C8B 3C01                    	cmp     al, 1
  7653 00001C8D 720B                    	jb      short chop_1
  7654 00001C8F 740F                    	jz      short chop_2
  7655 00001C91 3C03                    	cmp     al, 3
  7656 00001C93 7210                    	jb      short chop_3
  7657 00001C95 7416                    	jz      short chop_5
  7658 00001C97 B0FF                    	mov     al, 0FFh
  7659 00001C99 C3                      	retn
  7660                                  chop_1:
  7661 00001C9A 8A16[AF02]              	mov     dl,[chSwitch]
  7662 00001C9E EB07                    	jmp     short chop_4
  7663                                  chop_2:
  7664 00001CA0 8816[AF02]              	mov     [chSwitch], dl
  7665 00001CA4 C3                      	retn
  7666                                  chop_3:
  7667 00001CA5 B2FF                    	mov     dl, 0FFh
  7668                                  chop_4:
  7669 00001CA7 E861F9                  	call    Get_User_Stack
  7670 00001CAA 895406                  	mov     [si+6],dx
  7671                                  chop_5:
  7672 00001CAD C3                      	retn
  7673                                  
  7674                                  
  7675                                  ;**	$GetExtendedError - Return Extended error code
  7676                                  ;
  7677                                  ;	This function reads up the extended error info from the static
  7678                                  ;	variables where it was stored.
  7679                                  ;
  7680                                  ;	ENTRY	none
  7681                                  ;	EXIT	AX = Extended error code (0 means no extended error)
  7682                                  ;		BL = recommended action
  7683                                  ;		BH = class of error
  7684                                  ;		CH = locus of error
  7685                                  ;		ES:DI = may be pointer
  7686                                  ;	USES	ALL
  7687                                  
  7688                                  _$GetExtendedError:
  7689 00001CAE 16                      	push	ss
  7690 00001CAF 1F                      	pop	ds
  7691 00001CB0 A1[D202]                	MOV	AX,[EXTERR]
  7692 00001CB3 C43E[D602]              	LES	DI,[EXTERRPT]
  7693 00001CB7 8B1E[D402]              	MOV	BX,[EXTERR_ACTION]	; BL = Action, BH = Class
  7694 00001CBB 8A2E[D102]              	MOV	CH,[EXTERR_LOCUS]
  7695 00001CBF E849F9                  	call	Get_User_Stack
  7696                                  	;mov	[si+0Ah],di
  7697 00001CC2 897C0A                  	MOV	[SI+user_env.user_DI],DI
  7698                                  	;mov	[si+10h],es
  7699 00001CC5 8C4410                  	MOV	[SI+user_env.user_ES],ES
  7700                                  	;mov	[si+2],bx
  7701 00001CC8 895C02                  	MOV	[SI+user_env.user_BX],BX
  7702                                  	;mov	[si+4],cx
  7703 00001CCB 894C04                  	MOV	[SI+user_env.user_CX],CX
  7704 00001CCE E92CFA                  	jmp	SYS_RET_OK
  7705                                  
  7706                                  
  7707                                  ;============================================================================
  7708                                  ; PARSE.ASM, MSDOS 6.0, 1991
  7709                                  ;============================================================================
  7710                                  ; 19/07/2018 - Retro DOS v3.0
  7711                                  
  7712                                  ; System calls for parsing command lines
  7713                                  ;
  7714                                  ;   $PARSE_FILE_DESCRIPTOR
  7715                                  ;
  7716                                  ;   Modification history:
  7717                                  ;
  7718                                  ;       Created: ARR 30 March 1983
  7719                                  ;               EE PathParse 10 Sept 1983
  7720                                  ;
  7721                                  
  7722                                  ;BREAK <$Parse_File_Descriptor -- Parse an arbitrary string into an FCB>
  7723                                  ;---------------------------------------------------------------------------
  7724                                  ; Inputs:
  7725                                  ;       DS:SI Points to a command line
  7726                                  ;       ES:DI Points to an empty FCB
  7727                                  ;       Bit 0 of AL = 1 At most one leading separator scanned off
  7728                                  ;                   = 0 Parse stops if separator encountered
  7729                                  ;       Bit 1 of AL = 1 If drive field blank in command line - leave FCB
  7730                                  ;                   = 0  "    "    "     "         "      "  - put 0 in FCB
  7731                                  ;       Bit 2 of AL = 1 If filename field blank - leave FCB
  7732                                  ;                   = 0  "       "      "       - put blanks in FCB
  7733                                  ;       Bit 3 of AL = 1 If extension field blank - leave FCB
  7734                                  ;                   = 0  "       "      "        - put blanks in FCB
  7735                                  ; Function:
  7736                                  ;       Parse command line into FCB
  7737                                  ; Returns:
  7738                                  ;       AL = 1 if '*' or '?' in filename or extension, 0 otherwise
  7739                                  ;       DS:SI points to first character after filename
  7740                                  ;---------------------------------------------------------------------------
  7741                                  
  7742                                  _$PARSE_FILE_DESCRIPTOR:
  7743 00001CD1 E85338                  	call	MAKEFCB
  7744 00001CD4 56                      	PUSH    SI
  7745 00001CD5 E833F9                  	call	Get_User_Stack
  7746                                  	;pop	word [si+8]
  7747 00001CD8 8F4408                  	POP     word [SI+user_env.user_SI]
  7748 00001CDB C3                      	retn
  7749                                  
  7750                                  ;============================================================================
  7751                                  ; MISC.ASM, MSDOS 6.0, 1991
  7752                                  ;============================================================================
  7753                                  ; 19/07/2018 - Retro DOS v3.0
  7754                                  
  7755                                  ;ENTRYPOINTSEG	EQU	0CH
  7756                                  ;MAXDIF		EQU	0FFFH
  7757                                  ;SAVEXIT 	EQU	10
  7758                                  ;WRAPOFFSET	EQU	0FEF0h
  7759                                  
  7760                                  ;
  7761                                  ;----------------------------------------------------------------------------
  7762                                  ;
  7763                                  ;**	$SLEAZEFUNC - Get a Pointer to the Media Byte
  7764                                  ;
  7765                                  ;	Return Stuff sort of like old get fat call
  7766                                  ;
  7767                                  ;	ENTRY	none
  7768                                  ;	EXIT	DS:BX = Points to FAT ID byte (IBM only)
  7769                                  ;			GOD help anyone who tries to do ANYTHING except
  7770                                  ;			READ this ONE byte.
  7771                                  ;		DX = Total Number of allocation units on disk
  7772                                  ;		CX = Sector size
  7773                                  ;		AL = Sectors per allocation unit
  7774                                  ;		   = -1 if bad drive specified
  7775                                  ;	USES	all
  7776                                  ;
  7777                                  ;**	$SLEAZEFUNCDL - Get a Pointer to the Media Byte
  7778                                  ;
  7779                                  ;	Identical to $SLEAZEFUNC except (dl) = drive
  7780                                  ;
  7781                                  ;	ENTRY	(dl) = drive (0=default, 1=A, 2=B, etc.)
  7782                                  ;	EXIT	DS:BX = Points to FAT ID byte (IBM only)
  7783                                  ;			GOD help anyone who tries to do ANYTHING except
  7784                                  ;			READ this ONE byte.
  7785                                  ;		DX = Total Number of allocation units on disk
  7786                                  ;		CX = Sector size
  7787                                  ;		AL = Sectors per allocation unit
  7788                                  ;		   = -1 if bad drive specified
  7789                                  ;	USES	all
  7790                                  ;
  7791                                  ;----------------------------------------------------------------------------
  7792                                  ;
  7793                                  
  7794                                  _$SLEAZEFUNC:
  7795 00001CDC B200                    	MOV	DL,0
  7796                                  
  7797                                  _$SLEAZEFUNCDL:
  7798 00001CDE 16                      	push	ss
  7799 00001CDF 1F                      	pop	ds
  7800                                  	
  7801 00001CE0 88D0                    	MOV	AL,DL
  7802 00001CE2 E88C4C                  	call	GETTHISDRV		; Get CDS structure
  7803                                  SET_AL_RET:
  7804                                  	; MSDOS 6.0
  7805                                  	;;mov	al, 0Fh
  7806                                  	;MOV	AL,error_invalid_drive	; Assume error	;AC000;
  7807                                  	
  7808                                  	; MSDOS 3.3
  7809                                  	;mov	al, 0Fh
  7810 00001CE5 B00F                    	MOV	AL,error_invalid_drive	; Assume error	;AC000;
  7811                                  
  7812 00001CE7 721E                    	JC	short BADSLDRIVE
  7813                                  
  7814 00001CE9 E8C71B                  	call	DISK_INFO
  7815 00001CEC 72F7                    	JC	short SET_AL_RET	; User FAILed to I 24
  7816 00001CEE 8826[3005]              	MOV	[FATBYTE],AH
  7817                                  
  7818                                  ; NOTE THAT A FIXED MEMORY CELL IS USED --> THIS CALL IS NOT
  7819                                  ; RE-ENTRANT. USERS BETTER GET THE ID BYTE BEFORE THEY MAKE THE
  7820                                  ; CALL AGAIN
  7821                                  
  7822 00001CF2 BF[3005]                	MOV	DI,FATBYTE
  7823 00001CF5 30E4                    	XOR	AH,AH			; AL has sectors/cluster
  7824 00001CF7 E811F9                  	call	Get_User_Stack
  7825                                  	;mov	[si+4],cx
  7826                                  	;mov	[si+6],bx
  7827                                  	;mov	[si+2],di
  7828 00001CFA 894C04                  	MOV	[SI+user_env.user_CX],CX
  7829 00001CFD 895C06                  	MOV	[SI+user_env.user_DX],BX
  7830 00001D00 897C02                  	MOV	[SI+user_env.user_BX],DI
  7831                                  	
  7832                                  	;mov	[si+0Eh],cs
  7833                                  	;mov	[SI+user_env.user_DS],SS
  7834 00001D03 8C4C0E                  	MOV     [SI+user_env.user_DS],CS ; stash correct pointer
  7835                                  
  7836 00001D06 C3                      	retn
  7837                                  
  7838                                  BADSLDRIVE:
  7839 00001D07 E915FA                  	jmp	FCB_RET_ERR
  7840                                  
  7841                                  ;
  7842                                  ;----------------------------------------------------------------------------
  7843                                  ;
  7844                                  ;**	$Get_INDOS_Flag - Return location of DOS Critical Section Flag
  7845                                  ;
  7846                                  ;	Returns location of DOS status for interrupt routines
  7847                                  ;									   ;
  7848                                  ;	ENTRY	none
  7849                                  ;	EXIT	(es:bx) = flag location
  7850                                  ;	USES	all
  7851                                  ;
  7852                                  ;----------------------------------------------------------------------------
  7853                                  ;
  7854                                  
  7855                                  _$GET_INDOS_FLAG:
  7856 00001D0A E8FEF8                          CALL	Get_User_Stack
  7857                                          ;MOV	WORD [SI+2],INDOS
  7858 00001D0D C74402[CF02]            	MOV     word [SI+user_env.user_BX],INDOS
  7859                                          ;MOV	[SI+10H],SS
  7860 00001D12 8C5410                  	MOV	[SI+user_env.user_ES],SS
  7861 00001D15 C3                      	RETN 
  7862                                  
  7863                                  ;
  7864                                  ;----------------------------------------------------------------------------
  7865                                  ;
  7866                                  ;**	$Get_IN_Vars - Return Pointer to DOS Variables
  7867                                  ;
  7868                                  ;	Return a pointer to interesting DOS variables This call is version
  7869                                  ;	dependent and is subject to change without notice in future versions.
  7870                                  ;	Use at risk.
  7871                                  ;
  7872                                  ;	ENTRY	none
  7873                                  ;	EXIT	(es:bx) = address of SYSINITVAR
  7874                                  ;	uses	ALL
  7875                                  ;
  7876                                  ;----------------------------------------------------------------------------
  7877                                  ;
  7878                                  
  7879                                  _$GET_IN_VARS:
  7880 00001D16 E8F2F8                          CALL	Get_User_Stack
  7881                                          ;MOV	WORD [SI+2],SYSINITVAR
  7882                                  	;MOV	word [SI+user_env.user_BX],SYSINITVAR
  7883 00001D19 C74402[2600]            	MOV	word [SI+user_env.user_BX],SYSINITVARS
  7884                                          ;MOV	[SI+10H],SS
  7885 00001D1E 8C5410                  	MOV	[SI+user_env.user_ES],SS
  7886 00001D21 C3                      	RETN
  7887                                  
  7888                                  ;
  7889                                  ;----------------------------------------------------------------------------
  7890                                  ;
  7891                                  ;**	$Get_Default_DPB - Return a pointer to the Default DPB
  7892                                  ;
  7893                                  ;	Return pointer to drive parameter table for default drive
  7894                                  ;
  7895                                  ;	ENTRY	none
  7896                                  ;	EXIT	(ds:bx) = DPB address
  7897                                  ;	USES	all
  7898                                  ;
  7899                                  ;**	$Get_DPB - Return a pointer to a specified DPB
  7900                                  ;
  7901                                  ;	Return pointer to a specified drive parameter table
  7902                                  ;
  7903                                  ;	ENTRY	(dl) = drive # (0 = default, 1=A, 2=B, etc.)
  7904                                  ;	EXIT	(al) = 0 iff ok
  7905                                  ;		  (ds:bx) = DPB address
  7906                                  ;		(al) = -1 if bad drive
  7907                                  ;	USES	all
  7908                                  ;
  7909                                  ;----------------------------------------------------------------------------
  7910                                  ;
  7911                                  
  7912                                  _$GET_DEFAULT_DPB:
  7913 00001D22 B200                    	MOV	DL,0
  7914                                  _$GET_DPB:
  7915 00001D24 16                      	push	ss
  7916 00001D25 1F                      	pop	ds
  7917                                  
  7918 00001D26 88D0                    	MOV	AL,DL
  7919 00001D28 E8464C                  	call	GETTHISDRV		; Get CDS structure
  7920 00001D2B 7223                    	JC	short ISNODRV 		; no valid drive
  7921 00001D2D C43E[3A05]              	LES	DI,[THISCDS]		; check for net CDS
  7922                                  	;test	word [es:di+43h],8000h
  7923 00001D31 26F745430080            	TEST	word [ES:DI+curdir.flags],curdir_isnet
  7924 00001D37 7517                    	JNZ	short ISNODRV 		; No DPB to point at on NET stuff
  7925 00001D39 E83003                  	call	EcritDisk
  7926 00001D3C E87C3E                  	call	FATREAD_CDS		; Force Media Check and return DPB
  7927 00001D3F E83203                  	call	LcritDisk
  7928 00001D42 720C                    	JC	short ISNODRV 		; User FAILed to I 24, only error we
  7929                                  					;   have.
  7930 00001D44 E8C4F8                  	call	Get_User_Stack
  7931                                  	;mov	[si+2],bp
  7932                                  	;mov	[si+0Eh],es
  7933 00001D47 896C02                  	MOV	[SI+user_env.user_BX],BP
  7934 00001D4A 8C440E                  	MOV	[SI+user_env.user_DS],ES
  7935 00001D4D 30C0                    	XOR	AL,AL
  7936 00001D4F C3                      	retn
  7937                                  ISNODRV:
  7938 00001D50 B0FF                    	MOV	AL,-1
  7939 00001D52 C3                      	retn
  7940                                  
  7941                                  ;
  7942                                  ;----------------------------------------------------------------------------
  7943                                  ;
  7944                                  ;**	$Disk_Reset - Flush out Dirty Buffers
  7945                                  ;
  7946                                  ;	$DiskReset flushes and invalidates all buffers.  BUGBUG - do
  7947                                  ;		we really invalidate?  SHould we?  THis screws non-removable
  7948                                  ;		caching.  Maybe CHKDSK relies upon it, though....
  7949                                  ;
  7950                                  ;	ENTRY	none
  7951                                  ;	EXIT	none
  7952                                  ;	USES	all
  7953                                  ;
  7954                                  ;----------------------------------------------------------------------------
  7955                                  ;
  7956                                  
  7957                                  _$DISK_RESET:
  7958 00001D53 16                      	push	ss
  7959 00001D54 1F                      	pop	ds
  7960 00001D55 B0FF                    	MOV	AL,-1
  7961 00001D57 E81203                  	call	EcritDisk
  7962                                  	; MSDOS 6.0
  7963                                  	;or	word [DOS34_FLAG],FROM_DISK_RESET    ;AN000;
  7964 00001D5A E8D041                  	call	FLUSHBUF
  7965                                  	; MSDOS 6.0
  7966                                  	;AND	word [DOS34_FLAG],NO_FROM_DISK_RESET ;AN000;
  7967                                  	;mov	word [SC_STATUS],0	; Throw out secondary cache M041
  7968                                  ;
  7969                                  ; We will "ignore" any errors on the flush, and go ahead and invalidate.  This
  7970                                  ; call doesn't return any errors and it is supposed to FORCE a known state, so
  7971                                  ; let's do it.
  7972                                  ;
  7973                                  ; Invalidate 'last-buffer' used
  7974                                  ;
  7975 00001D5D BBFFFF                  	MOV	BX,-1
  7976 00001D60 891E[2000]              	MOV	[LastBuffer+2],BX
  7977 00001D64 891E[1E00]              	MOV	[LastBuffer],BX
  7978                                  
  7979                                  	; MSDOS 3.3 
  7980                                  	; IBMDOS.COM, Offset 1C66h
  7981                                  	;;;;
  7982 00001D68 C536[3800]              	lds     si,[BUFFHEAD]
  7983 00001D6C B8FF20                  	mov	ax,20FFh	; .buf_ID,    AL = FFh (Free buffer)
  7984                                  				; .buf_flags, AH = 0, reset/clear
  7985                                  DRST_1:
  7986                                  	;mov	[si+4],ax
  7987 00001D6F 894404                  	mov	[si+BUFFINFO.buf_ID],ax
  7988 00001D72 C534                    	lds	si,[SI]
  7989 00001D74 39DE                    	cmp	si,bx ; -1
  7990 00001D76 7409                    	je	short DRST_2
  7991                                  	;mov	[si+4],ax
  7992 00001D78 894404                  	mov	[si+BUFFINFO.buf_ID],ax
  7993 00001D7B C534                    	lds	si,[SI]
  7994 00001D7D 39DE                    	cmp	si,bx
  7995 00001D7F 75EE                    	jne	short DRST_1
  7996                                  	;;;;
  7997                                  DRST_2:
  7998 00001D81 E8F002                  	call	LcritDisk
  7999                                  
  8000                                  	; 20/05/2019
  8001                                  	;MOV	AX,-1
  8002                                  	;CallInstall NetFlushBuf,MultNET,32,AX,AX
  8003                                  	;mov	ax,0FFFFh
  8004                                  
  8005 00001D84 B82011                  	mov     ax,1120h
  8006 00001D87 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - FLUSH ALL DISK BUFFERS
  8007                                  			; DS = DOS CS
  8008                                  			; Return: CF clear (successful)
  8009 00001D89 C3                      	retn
  8010                                  
  8011                                  	; 19/07/2018 - Retro DOS v3.0
  8012                                  
  8013                                  ;
  8014                                  ;	BREAK <$SetDPB - Create a valid DPB from a user-specified BPB>
  8015                                  ;
  8016                                  ;----------------------------------------------------------------------------
  8017                                  ;
  8018                                  ;**	$SetDPB - Create a DPB
  8019                                  ;
  8020                                  ;	SetDPB Creates a valid DPB from a user-specified BPB
  8021                                  ;
  8022                                  ;	ENTRY	ES:BP Points to DPB
  8023                                  ;		DS:SI Points to BPB
  8024                                  ;	EXIT	DPB setup
  8025                                  ;	USES	ALL but BP, DS, ES
  8026                                  ;
  8027                                  ;----------------------------------------------------------------------------
  8028                                  ;
  8029                                  
  8030                                  ; MSDOS 6.0
  8031 00001D8A 0300                    word3:	dw	3			; M008 -- word value for divides
  8032                                  
  8033                                  ;procedure   $SETDPB,NEAR
  8034                                  
  8035                                  _$SETDPB:
  8036 00001D8C 89EF                    	MOV	DI,BP
  8037 00001D8E 83C702                  	ADD	DI,2			; Skip over dpb_drive and dpb_UNIT
  8038 00001D91 AD                      	LODSW
  8039 00001D92 AB                      	STOSW				; dpb_sector_size
  8040                                  	; MSDOS 6.0
  8041 00001D93 807C0300                	CMP	BYTE [SI+A_BPB.BPB_NUMBEROFFATS-2],0 ; FAT file system drive ;AN000;
  8042 00001D97 7507                    	JNZ	short yesfat			     ; yes		;AN000;
  8043 00001D99 26C6450400              	MOV	BYTE [ES:DI+DPB.FAT_COUNT-4],0
  8044 00001D9E EB50                    	JMP	short setend			     ; NO		;AN000;
  8045                                  yesfat: ; 10/08/2018
  8046 00001DA0 89C2                    	MOV	DX,AX
  8047 00001DA2 AC                      	LODSB
  8048 00001DA3 FEC8                    	DEC	AL
  8049 00001DA5 AA                      	STOSB				; dpb_cluster_mask
  8050 00001DA6 FEC0                    	INC	AL
  8051 00001DA8 30E4                    	XOR	AH,AH
  8052                                  LOG2LOOP:
  8053 00001DAA A801                    	test	AL,1
  8054 00001DAC 7506                    	JNZ	short SAVLOG
  8055 00001DAE FEC4                    	INC	AH
  8056 00001DB0 D0E8                    	SHR	AL,1
  8057 00001DB2 EBF6                    	JMP	SHORT LOG2LOOP
  8058                                  SAVLOG:
  8059 00001DB4 88E0                    	MOV	AL,AH
  8060 00001DB6 AA                      	STOSB				; dpb_cluster_shift
  8061 00001DB7 88C3                    	MOV	BL,AL
  8062 00001DB9 A5                      	MOVSW				; dpb_first_FAT Start of FAT (# of reserved sectors)
  8063 00001DBA AC                      	LODSB
  8064 00001DBB AA                      	STOSB				; dpb_FAT_count Number of FATs
  8065                                  ;	OR	AL,AL			; NONFAT ?				;AN000;
  8066                                  ;	JZ	short setend		; yes, don't do anything                ;AN000;
  8067 00001DBC 88C7                    	MOV	BH,AL
  8068 00001DBE AD                      	LODSW
  8069 00001DBF AB                      	STOSW				; dpb_root_entries Number of directory entries
  8070 00001DC0 B105                    	MOV	CL,5
  8071 00001DC2 D3EA                    	SHR	DX,CL			; Directory entries per sector
  8072 00001DC4 48                      	DEC	AX
  8073 00001DC5 01D0                    	ADD	AX,DX			; Cause Round Up
  8074 00001DC7 89D1                    	MOV	CX,DX
  8075 00001DC9 31D2                    	XOR	DX,DX
  8076 00001DCB F7F1                    	DIV	CX
  8077 00001DCD 89C1                    	MOV	CX,AX			; Number of directory sectors
  8078 00001DCF 47                      	INC	DI
  8079 00001DD0 47                      	INC	DI			; Skip dpb_first_sector
  8080 00001DD1 A5                      	MOVSW			; Total number of sectors in DSKSIZ (temp as dpb_max_cluster)
  8081 00001DD2 AC                      	LODSB
  8082                                  	;mov	[es:bp+16h],al
  8083 00001DD3 26884616                	MOV	[ES:BP+DPB.MEDIA],AL	; Media byte
  8084 00001DD7 AD                      	LODSW				; Number of sectors in a FAT
  8085                                  	;;;
  8086                                  	;MSDOS 6.0
  8087                                  	;
  8088                                  	;STOSW		; DPB.FAT_SIZE	;AC000;;>32mb dpb_FAT_size
  8089                                  	;MOV	DL,BH			;AN000;;>32mb
  8090                                  	;XOR	DH,DH			;AN000;;>32mb
  8091                                  	;MUL	DX			;AC000;;>32mb Space occupied by all FATs
  8092                                  	
  8093                                  	;MSDOS 3.3
  8094                                  	;
  8095 00001DD8 AA                      	STOSB		; DPB.FAT_SIZE
  8096 00001DD9 F6E7                    	MUL	BH
  8097                                  	;;;
  8098                                  	;add	ax,[es:bp+6]
  8099 00001DDB 26034606                	ADD	AX,[ES:BP+DPB.FIRST_FAT]
  8100 00001DDF AB                      	STOSW				; dpb_dir_sector
  8101 00001DE0 01C8                    	ADD	AX,CX			; Add number of directory sectors
  8102                                  	;mov	[es:bp+0Bh],ax
  8103 00001DE2 2689460B                	MOV	[ES:BP+DPB.FIRST_SECTOR],AX
  8104                                  	
  8105                                  	; MSDOS 6.0
  8106 00001DE6 88D9                    	MOV	CL,BL			;F.C. >32mb				;AN000;
  8107                                  	;CMP	WORD [ES:BP+DSKSIZ],0	;F.C. >32mb				;AN000;
  8108                                  	;JNZ	short normal_dpb	;F.C. >32mb				;AN000;
  8109                                  	;XOR	CH,CH			;F.C. >32mb				;AN000;
  8110                                  	;MOV	BX,[SI+A_BPB.BPB_BIGTOTALSECTORS-A_BPB.BPB_SECTORSPERTRACK]	;AN000;
  8111                                  	;MOV	DX,[SI+A_BPB.BPB_BIGTOTALSECTORS-A_BPB.BPB_SECTORSPERTRACK+2]	;AN000;
  8112                                  	;SUB	BX,AX			;AN000;;F.C. >32mb
  8113                                  	;SBB	DX,0			;AN000;;F.C. >32mb
  8114                                  	;OR	CX,CX			;AN000;;F.C. >32mb
  8115                                  	;JZ	short norot		;AN000;;F.C. >32mb
  8116                                  ;rott:					;AN000;;F.C. >32mb
  8117                                  	;CLC				;AN000;;F.C. >32mb
  8118                                  	;RCR	DX,1			;AN000;;F.C. >32mb
  8119                                  	;RCR	BX,1			;AN000;;F.C. >32mb
  8120                                  	;LOOP	rott			;AN000;;F.C. >32mb
  8121                                  ;norot:					;AN000;
  8122                                  	;MOV	AX,BX			;AN000;;F.C. >32mb
  8123                                  	;JMP	short setend		;AN000;;F.C. >32mb
  8124                                  normal_dpb:
  8125                                  	;sub	ax,[es:bp+0Dh]
  8126 00001DE8 262B460D                	SUB	AX,[ES:BP+DSKSIZ]
  8127 00001DEC F7D8                    	NEG	AX			; Sectors in data area
  8128                                  ;;	MOV	CL,BL			; dpb_cluster_shift
  8129 00001DEE D3E8                    	SHR	AX,CL			; Div by sectors/cluster
  8130                                  setend:
  8131                                  
  8132                                  ;	M008 - CAS
  8133                                  ;
  8134 00001DF0 40                      	INC	AX			; +2 (reserved), -1 (count -> max)
  8135                                  ;
  8136                                  ;	There has been a bug in our fatsize calculation for so long
  8137                                  ;	  that we can't correct it now without causing some user to
  8138                                  ;	  experience data loss. There are even cases where allowing
  8139                                  ;	  the number of clusters to exceed the fats is the optimal
  8140                                  ;	  case -- where adding 2 more fat sectors would make the
  8141                                  ;	  data field smaller so that there's nothing to use the extra
  8142                                  ;	  fat sectors for.
  8143                                  ;
  8144                                  ;	Note that this bug had very minor known symptoms. CHKDSK would
  8145                                  ;	  still report that there was a cluster left when the disk was
  8146                                  ;	  actually full. Very graceful failure for a corrupt system
  8147                                  ;	  configuration. There may be worse cases that were never
  8148                                  ;	  properly traced back to this bug. The problem cases only
  8149                                  ;	  occurred when partition sizes were very near FAT sector
  8150                                  ;	  rounding boundaries, which were rare cases.
  8151                                  ;
  8152                                  ;	Also, it's possible that some third-party partition program might
  8153                                  ;	  create a partition that had a less-than-perfect FAT calculation
  8154                                  ;	  scheme. In this hypothetical case, the number of allocation
  8155                                  ;	  clusters which don't actually have FAT entries to represent
  8156                                  ;	  them might be larger and might create a more catastrophic
  8157                                  ;	  failure. So we'll provide the safeguard of limiting the
  8158                                  ;	  max_cluster to the amount that will fit in the FATs.
  8159                                  ;
  8160                                  ;	ax = maximum legal cluster, ES:BP -> dpb
  8161                                  
  8162                                  ;	make sure the number of fat sectors is actually enough to
  8163                                  ;	  hold that many clusters. otherwise, back the number of
  8164                                  ;	  clusters down
  8165                                  
  8166                                  	; 19/07/2018 - Retro DOS v3.0
  8167                                  	; MSDOS 6.0
  8168 00001DF1 89C3                    	mov	bx,ax			; remember calculated # clusters
  8169                                  	;;mov	ax,[ES:BP+0Fh]
  8170                                  	;mov	ax,[ES:BP+DPB.FAT_SIZE]
  8171                                  	; 01/08/2018 (MSDOS 3.3)
  8172 00001DF3 268A460F                	mov	al,[ES:BP+DPB.FAT_SIZE]
  8173 00001DF7 30E4                    	xor	ah,ah 	
  8174 00001DF9 26F76602                	mul	word [ES:BP+DPB.SECTOR_SIZE] ; how big is the FAT?
  8175 00001DFD 81FBF60F                	cmp	bx,4096-10		; test for 12 vs. 16 bit fat
  8176 00001E01 720D                    	jb	short setend_fat12
  8177 00001E03 D1EA                    	shr	dx,1
  8178                                  ;cs3 7/2/92
  8179 00001E05 751C                    	jnz	short setend_faterr	; some bonehead gave us more fatspace
  8180                                  ;					; than enough for the maximum FAT,
  8181                                  ;					; so go ahead and use the calculated
  8182                                  ;					; number of clusters.
  8183                                  ;cs3 7/2/92
  8184                                  
  8185 00001E07 D1D8                    	rcr	ax,1			; find number of entries
  8186 00001E09 3DF70F                  	cmp	ax,4096-10+1		; would this truncation move us
  8187                                  ;					;  into 12-bit fatland?
  8188 00001E0C 7215                    	jb	short setend_faterr	; then go ahead and let the
  8189                                  ;					;  inconsistency pass through
  8190                                  ;					;  rather than lose data by
  8191                                  ;					;  correcting the fat type
  8192 00001E0E EB0E                    	jmp	short setend_fat16
  8193                                  
  8194                                  setend_fat12:
  8195 00001E10 01C0                    	add	ax,ax			; (fatsiz*2)/3 = # of fat entries
  8196 00001E12 11D2                    	adc	dx,dx
  8197                                  ;cs3 7/2/92
  8198 00001E14 83FA03                  	cmp	dx,3			; if our fatspace is WAY more than
  8199 00001E17 730A                    	jnb	short setend_faterr	; we need, we may get an overflow
  8200                                  ;					; here.  Check for it and use
  8201                                  ;					; the calcuated size in this case.
  8202                                  ;cs3 7/2/92
  8203 00001E19 2EF736[8A1D]            	div	word [cs:word3]
  8204                                  
  8205                                  setend_fat16:
  8206 00001E1E 48                      	dec	ax			; limit at 1
  8207 00001E1F 39D8                    	cmp	ax,bx			; is fat big enough?
  8208 00001E21 7602                    	jbe	short setend_fat	; use max value that'll fit
  8209                                  
  8210                                  setend_faterr:
  8211 00001E23 89D8                    	mov	ax,bx			; use calculated value
  8212                                  
  8213                                  setend_fat:
  8214                                  
  8215                                  ;	now ax = maximum legal cluster
  8216                                  
  8217                                  ;	end M008
  8218                                  
  8219                                  	;mov	[es:bp+0Dh], ax
  8220 00001E25 2689460D                	MOV	[ES:BP+DPB.MAX_CLUSTER],AX
  8221                                  	;mov	word [es:bp+1Ch],0  ; MSDOS 3.3
  8222 00001E29 26C7461C0000            	MOV	word [ES:BP+DPB.NEXT_FREE],0 
  8223                                  					; Init so first ALLOC starts at
  8224                                  					; begining of FAT
  8225                                  	;mov	word [es:bp+1Eh],-1 ; MSDOS 3.3
  8226 00001E2F 26C7461EFFFF            	MOV	word [ES:BP+DPB.FREE_CNT],-1 ; current count is invalid.
  8227                                  
  8228 00001E35 C3                      	retn
  8229                                  
  8230                                  ;EndProc $SETDPB
  8231                                  
  8232                                  
  8233                                  ;BREAK <$Create_Process_Data_Block,SetMem -- Set up process data block>
  8234                                  
  8235                                  ;
  8236                                  ;----------------------------------------------------------------------------
  8237                                  ;
  8238                                  ;**	$Dup_PDB
  8239                                  ;
  8240                                  ; Inputs:   DX is new segment address of process
  8241                                  ;	    SI is end of new allocation block
  8242                                  ;
  8243                                  ;----------------------------------------------------------------------------
  8244                                  ;
  8245                                  
  8246                                  _$DUP_PDB:
  8247                                  
  8248                                  ;hkn;	CreatePDB would have a CS override. This is not valid.
  8249                                  ;hkn;	Must set up ds in order to access CreatePDB. Also SS is 
  8250                                  ;hkn;	has been assumed to be NOTHING. It may not have DOSDATA.
  8251                                  
  8252 00001E36 2EC606[5003]FF          	MOV	byte [CS:CreatePDB],0FFH  ; indicate a new process
  8253 00001E3C 2E8E1E[DE02]            	MOV	DS,[CS:CurrentPDB]
  8254 00001E41 56                      	PUSH	SI
  8255 00001E42 EB0A                    	JMP	SHORT CreateCopy
  8256                                  
  8257                                  ;
  8258                                  ;----------------------------------------------------------------------------
  8259                                  ;
  8260                                  ; Inputs:
  8261                                  ;	DX = Segment number of new base
  8262                                  ; Function:
  8263                                  ;	Set up program base and copy term and ^C from int area
  8264                                  ; Returns:
  8265                                  ;	None
  8266                                  ; Called at DOS init
  8267                                  ;
  8268                                  ;----------------------------------------------------------------------------
  8269                                  ;
  8270                                  
  8271                                  _$CREATE_PROCESS_DATA_BLOCK:
  8272                                  			; Offset 1D02h in IBMDOS.COM (MSDOS 3.3), 1987
  8273 00001E44 E8C4F7                  	CALL	Get_User_Stack
  8274                                  	;mov	ds,[si+14h]
  8275 00001E47 8E5C14                  	MOV	DS,[SI+user_env.user_CS]
  8276                                  	;push	word [2]
  8277 00001E4A FF360200                	PUSH	word [PDB.BLOCK_LEN]
  8278                                  CreateCopy:
  8279 00001E4E 8EC2                    	MOV	ES,DX
  8280                                  
  8281 00001E50 31F6                    	XOR	SI,SI			; copy entire PDB
  8282 00001E52 89F7                    	MOV	DI,SI
  8283 00001E54 B98000                  	MOV	CX,80H
  8284 00001E57 F3A5                    	REP	MOVSW
  8285                                  
  8286                                  ; DOS 3.3 7/9/86
  8287                                  
  8288                                  	;mov	cx,20
  8289                                  	;MOV	CX,FILPERPROC		; copy handles in case of
  8290 00001E59 B114                    	mov	cl,FILPERPROC ; 06/07/2019
  8291                                  	;mov	di,18h
  8292 00001E5B BF1800                  	MOV	DI,PDB.JFN_TABLE	; Set Handle Count has been issued
  8293 00001E5E 1E                      	PUSH	DS
  8294                                  	;lds	si,[34h]
  8295 00001E5F C5363400                	LDS	SI,[PDB.JFN_Pointer]
  8296 00001E63 F3A4                    	REP	MOVSB
  8297 00001E65 1F                      	POP	DS
  8298                                  
  8299                                  ; DOS 3.3 7/9/86
  8300                                  
  8301                                  	;test	byte [cs:CreatePDB],0FFh
  8302 00001E66 2E803E[5003]00          	cmp	byte [CS:CreatePDB],0	; Shall we create a process?
  8303 00001E6C 744A                    	JZ	short Create_PDB_cont 	; nope, old style call
  8304                                  ;
  8305                                  ; Here we set up for a new process...
  8306                                  ;
  8307                                  
  8308 00001E6E 0E                      	PUSH    CS                      ; Called at DOSINIT time, NO SS
  8309 00001E6F 1F                      	POP     DS
  8310                                  
  8311 00001E70 31DB                    	XOR	BX,BX			; dup all jfns
  8312                                  	;mov	cx,20
  8313                                  	;MOV	CX,FILPERPROC		; only 20 of them
  8314 00001E72 B114                    	mov	cl,FILPERPROC ; 06/07/2019
  8315                                  
  8316                                  Create_dup_jfn:
  8317 00001E74 06                      	PUSH	ES			; save new PDB
  8318 00001E75 E88449                  	call	SFFromHandle		; get sf pointer
  8319 00001E78 B0FF                    	MOV	AL,-1			; unassigned JFN
  8320 00001E7A 7225                    	JC	short CreateStash	; file was not really open
  8321                                  	;test	word [es:di+5],1000h
  8322 00001E7C 26F745050010            	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_no_inherit
  8323 00001E82 751D                    	JNZ	short CreateStash	; if no-inherit bit is set, skip dup.
  8324                                  ;
  8325                                  ; We do not inherit network file handles.
  8326                                  ;
  8327                                  	;mov	ah,[es:di+2]
  8328 00001E84 268A6502                	MOV	AH,[ES:DI+SF_ENTRY.sf_mode]
  8329                                  	;and	ah,0F0h
  8330 00001E88 80E4F0                  	AND	AH,SHARING_MASK
  8331                                  	;cmp	ah,70h
  8332 00001E8B 80FC70                  	CMP	AH,SHARING_NET_FCB
  8333 00001E8E 7411                    	jz	short CreateStash
  8334                                  ;
  8335                                  ; The handle we have found is duplicatable (and inheritable). Perform
  8336                                  ; duplication operation.
  8337                                  ;
  8338 00001E90 893E[3605]              	MOV	[THISSFT],DI
  8339 00001E94 8C06[3805]              	MOV	[THISSFT+2],ES
  8340 00001E98 E83C18                  	call	DOS_DUP 		; signal duplication
  8341                                  ;
  8342                                  ; get the old sfn for copy
  8343                                  ;
  8344 00001E9B E84649                  	call	pJFNFromHandle		; ES:DI is jfn
  8345 00001E9E 268A05                  	MOV	AL,[ES:DI]		; get sfn
  8346                                  ;
  8347                                  ; Take AL (old sfn or -1) and stash it into the new position
  8348                                  ;
  8349                                  CreateStash:
  8350 00001EA1 07                      	POP	ES
  8351                                  	;mov	[es:bx+18h],al
  8352 00001EA2 26884718                	MOV	[ES:BX+PDB.JFN_TABLE],AL ; copy into new place!
  8353 00001EA6 43                      	INC	BX			; next jfn...
  8354 00001EA7 E2CB                    	LOOP	Create_dup_jfn
  8355                                  
  8356 00001EA9 8B1E[DE02]              	MOV	BX,[CurrentPDB]		; get current process
  8357                                  	;mov	[es:bx+16h]
  8358 00001EAD 26891E1600              	MOV	[ES:PDB.PARENT_PID],BX	; stash in child
  8359 00001EB2 8C06[DE02]              	MOV	[CurrentPDB],ES
  8360 00001EB6 8EDB                    	MOV	DS,BX
  8361                                  ;
  8362                                  ; end of new process create
  8363                                  ;
  8364                                  Create_PDB_cont:
  8365 00001EB8 2EC606[5003]00          	MOV     BYTE [CS:CreatePDB],0	; reset flag
  8366 00001EBE 58                      	POP	AX
  8367                                  
  8368                                  	;entry	SETMEM
  8369                                  
  8370                                  ;---------------------------------------------------------------------------
  8371                                  ; Inputs:
  8372                                  ;	AX = Size of memory in paragraphs
  8373                                  ;	DX = Segment
  8374                                  ; Function:
  8375                                  ;	Completely prepares a program base at the
  8376                                  ;	specified segment.
  8377                                  ; Called at DOS init
  8378                                  ; Outputs:
  8379                                  ;	DS = DX
  8380                                  ;	ES = DX
  8381                                  ;	[0] has INT int_abort
  8382                                  ;	[2] = First unavailable segment
  8383                                  ;	[5] to [9] form a long call to the entry point
  8384                                  ;	[10] to [13] have exit address (from int_terminate)
  8385                                  ;	[14] to [17] have ctrl-C exit address (from int_ctrl_c)
  8386                                  ;	[18] to [21] have fatal error address (from int_fatal_abort)
  8387                                  ; DX,BP unchanged. All other registers destroyed.
  8388                                  ;---------------------------------------------------------------------------
  8389                                  
  8390                                  SETMEM:
  8391 00001EBF 31C9                    	XOR	CX,CX
  8392 00001EC1 8ED9                    	MOV	DS,CX
  8393 00001EC3 8EC2                    	MOV	ES,DX
  8394                                  	;mov	si,88h
  8395 00001EC5 BE8800                  	MOV	SI,addr_int_terminate
  8396                                  	;mov	di,10
  8397 00001EC8 BF0A00                  	MOV	DI,SAVEXIT
  8398                                  	;MOV	CX,6
  8399 00001ECB B106                    	mov	cl,6 ; 06/07/2019
  8400 00001ECD F3A5                    	REP	MOVSW
  8401 00001ECF 26A30200                	MOV	[ES:2],AX
  8402 00001ED3 29D0                    	SUB	AX,DX
  8403 00001ED5 3DFF0F                  	CMP	AX,MAXDIF ; 0FFFh
  8404 00001ED8 7603                    	JBE	short HAVDIF
  8405 00001EDA B8FF0F                  	MOV	AX,MAXDIF
  8406                                  HAVDIF:
  8407 00001EDD 83E810                  	SUB	AX,10H			; Allow for 100h byte "stack"
  8408 00001EE0 BB0C00                  	MOV	BX,ENTRYPOINTSEG	;	in .COM files
  8409 00001EE3 29C3                    	SUB	BX,AX
  8410 00001EE5 B104                    	MOV	CL,4
  8411 00001EE7 D3E0                    	SHL	AX,CL
  8412 00001EE9 8EDA                    	MOV	DS,DX
  8413                                  
  8414                                  	; (MSDOS 6.0 note)
  8415                                  	;
  8416                                  	; The address in BX:AX will be F01D:FEF0 if there is 64K or more 
  8417                                  	; memory in the system. This is equivalent to 0:c0 if A20 is OFF.
  8418                                  	; If DOS is in HMA this equivalence is no longer valid as A20 is ON.
  8419                                  	; But the BIOS which now resides in FFFF:30 has 5 bytes in FFFF:D0
  8420                                  	; (F01D:FEF0) which is the same as the ones in 0:C0, thereby 
  8421                                  	; making this equvalnce valid for this particular case. If however
  8422                                  	; there is less than 64K remaining the address in BX:AX will not 
  8423                                  	; be the same as above. We will then stuff 0:c0, the call 5 address
  8424                                  	; into the PSP.
  8425                                  	;
  8426                                  	; Therefore for the case where there is less than 64K remaining in 
  8427                                  	; the system old CPM Apps that look at PSP:6 to determine memory
  8428                                  	; requirements will not work. Call 5, however will continue to work
  8429                                  	; for all cases.
  8430                                  	;
  8431                                  
  8432                                  	;mov	[6],ax
  8433                                  	;mov	[8],bx
  8434                                  
  8435 00001EEB A30600                  	MOV	[PDB.CPM_CALL+1],AX
  8436 00001EEE 891E0800                	MOV	[PDB.CPM_CALL+3],BX
  8437                                  
  8438                                  	;cmp	ax,WRAPOFFSET		; Q: does the system have >= 64k of
  8439                                  	;				;    memory left
  8440                                  	;je	short addr_ok		; Y: the above calculated address is
  8441                                  	;				;    OK
  8442                                  	;				; N: 
  8443                                  
  8444                                  	;MOV	WORD [PDB.CPM_CALL+1],0c0h
  8445                                  	;MOV	WORD [PDB.CPM_CALL+3],0
  8446                                  
  8447                                  ;addr_ok:
  8448                                  
  8449                                  	;mov	word [0],20CDh
  8450 00001EF2 C7060000CD20            	MOV	word [PDB.EXIT_CALL],(int_abort*256) + mi_INT
  8451                                  	;mov	byte [5],9Ah
  8452 00001EF8 C60605009A              	MOV	BYTE [PDB.CPM_CALL],mi_Long_CALL
  8453                                  	;mov	word [50h],21CDh
  8454 00001EFD C7065000CD21            	MOV	WORD [PDB.CALL_SYSTEM],(int_command*256) + mi_INT
  8455                                  	;mov	byte [52h],0CBh
  8456 00001F03 C6065200CB              	MOV	BYTE [PDB.CALL_SYSTEM+2],mi_Long_RET
  8457                                  	;mov	word [34h],18h
  8458 00001F08 C70634001800            	MOV	WORD [PDB.JFN_Pointer],PDB.JFN_TABLE
  8459                                  	;mov	word [36h],ds
  8460 00001F0E 8C1E3600                	MOV	WORD [PDB.JFN_Pointer+2],DS
  8461                                  	;mov	word [32h],20
  8462 00001F12 C70632001400            	MOV	WORD [PDB.JFN_Length],FILPERPROC
  8463                                  ;
  8464                                  ; The server runs several PDB's without creating them VIA EXEC.  We need to
  8465                                  ; enumerate all PDB's at CPS time in order to find all references to a
  8466                                  ; particular SFT.  We perform this by requiring that the server link together
  8467                                  ; for us all sub-PDB's that he creates.  The requirement for us, now, is to
  8468                                  ; initialize this pointer.
  8469                                  ;
  8470                                   	;mov	word [38h],-1
  8471 00001F18 C7063800FFFF            	MOV	word [PDB.Next_PDB],-1
  8472                                  	;mov	word [3Ah],-1
  8473 00001F1E C7063A00FFFF            	MOV	word [PDB.Next_PDB+2],-1
  8474                                  
  8475                                  			; Set the real version number in the PSP - 5.00
  8476                                  	;mov	[ES:PDB.Version],(MINOR_VERSION*256)+MAJOR_VERSION
  8477                                  
  8478 00001F24 C3                      	retn
  8479                                  
  8480                                  ;============================================================================
  8481                                  ; IBMDOS.COM (MSDOS 3.3 KERNEL), 1987 - Offset 1DE6h
  8482                                  ;============================================================================
  8483                                  ; 19/07/2018 - Retro DOS v3.0
  8484                                  
  8485                                  FETCHI_CHECK:
  8486 00001F25 9C                      	pushf
  8487 00001F26 2E813E[8F0F]7258        	cmp	word [cs:FETCHI_TAG], 5872h
  8488 00001F2D 7403                    	jz      short FETCHI_CHK_RETN
  8489 00001F2F E84F54                  	call    DOSINIT
  8490                                  FETCHI_CHK_RETN:
  8491 00001F32 9D                      	popf
  8492 00001F33 C3                      	retn
  8493                                  
  8494                                  ;============================================================================
  8495                                  ; MISC2.ASM, MSDOS 6.0, 1991
  8496                                  ;============================================================================
  8497                                  ; 20/07/2018 - Retro DOS v3.0
  8498                                  
  8499                                  ; Break <STRCMP - compare two ASCIZ strings DS:SI to ES:DI>
  8500                                  ;----------------------------------------------------------------------------
  8501                                  ;
  8502                                  ;   Strcmp - compare ASCIZ DS:SI to ES:DI. Case INSENSITIVE. '/' = '\'
  8503                                  ;		Strings of different lengths don't match.
  8504                                  ;   Inputs:	DS:SI - pointer to source string  ES:DI - pointer to dest string
  8505                                  ;   Outputs:	Z if strings same, NZ if different
  8506                                  ;   Registers modified: NONE
  8507                                  ;----------------------------------------------------------------------------
  8508                                  
  8509                                  StrCmp:
  8510 00001F34 56                      	push	si
  8511 00001F35 57                      	push	di
  8512 00001F36 50                      	push	ax
  8513                                  
  8514                                  Cmplp:
  8515 00001F37 AC                      	LODSB
  8516 00001F38 E8D136                  	call	UCase			; convert to upper case
  8517 00001F3B E80A37                  	call	PATHCHRCMP		; convert / to 	MOV	AH,AL
  8519 00001F3E 268A05                  	MOV	AL,[ES:DI]
  8520 00001F41 47                      	INC	DI
  8521 00001F42 E8C736                  	call	UCase			; convert to upper case
  8522 00001F45 E80037                  	call	PATHCHRCMP		; convert / to 	CMP	AH,AL
  8524 00001F48 7504                    	JNZ	short PopRet		; Strings dif
  8525                                  Tend:
  8526 00001F4A 08C0                    	OR	AL,AL
  8527 00001F4C 75E9                    	JNZ	short Cmplp		; More string
  8528                                  PopRet:
  8529 00001F4E 58                      	pop	ax
  8530 00001F4F 5F                      	pop	di
  8531 00001F50 5E                      	pop	si
  8532 00001F51 C3                      	retn
  8533                                  
  8534                                  ;Break <STRCPY - copy ASCIZ string from DS:SI to ES:DI>
  8535                                  ;----------------------------------------------------------------------------
  8536                                  ;
  8537                                  ;   Strcpy - copy an ASCIZ string from DS:SI to ES:DI and make uppercase
  8538                                  ;   FStrcpy - copy an ASCIZ string from DS:SI to ES:DI.  no modification of
  8539                                  ;	characters.
  8540                                  ;
  8541                                  ;   Inputs:	DS:SI - pointer to source string
  8542                                  ;		ES:DI - pointer to destination string
  8543                                  ;   Outputs:	ES:DI point byte after nul byte at end of dest string
  8544                                  ;		DS:SI point byte after nul byte at end of source string
  8545                                  ;   Registers modified: SI,DI
  8546                                  ;----------------------------------------------------------------------------
  8547                                  
  8548                                  StrCpy:
  8549 00001F52 50                      	push	ax
  8550                                  CPYLoop:
  8551 00001F53 AC                      	LODSB
  8552 00001F54 E8B536                  	call	UCase			; convert to upper case
  8553 00001F57 E8EE36                  	call	PATHCHRCMP		; convert / to \ ;
  8554 00001F5A AA                      	STOSB
  8555                                  Tend2:
  8556 00001F5B 08C0                    	OR	AL,AL
  8557 00001F5D 75F4                    	JNZ	short CPYLoop
  8558 00001F5F 58                      	pop	ax
  8559 00001F60 C3                      	retn
  8560                                  
  8561                                  ;----------------------------------------------------------------------------
  8562                                  ; Procedure Name : FStrCpy
  8563                                  ;----------------------------------------------------------------------------
  8564                                  
  8565                                  FStrCpy:
  8566 00001F61 50                      	push	ax
  8567                                  FCPYLoop:
  8568 00001F62 AC                      	LODSB
  8569 00001F63 AA                      	STOSB
  8570 00001F64 08C0                    	OR	AL,AL
  8571 00001F66 75FA                    	JNZ	short FCPYLoop
  8572 00001F68 58                      	pop	ax
  8573 00001F69 C3                      	retn
  8574                                  
  8575                                  ; 20/07/2018 - Retro DOS v3.0
  8576                                  ;----------------------------------------------------------------------------
  8577                                  ; UCase, IBMDOS.COM (MSDOS 3.3), 1987 - Offset 1E2Fh
  8578                                  ;----------------------------------------------------------------------------
  8579                                  ;
  8580                                  ;UCase:	
  8581                                  ;	call	_UCase	 ; Offset 5518h (GetLet, Offset 5517h)
  8582                                  ;	retn
  8583                                  
  8584                                  ;Break <StrLen - compute length of string ES:DI>
  8585                                  ;----------------------------------------------------------------------------
  8586                                  ;**	StrLen - Compute Length of String
  8587                                  ;
  8588                                  ;	StrLen computes the length of a string, including the trailing 00
  8589                                  ;
  8590                                  ;	ENTRY	(es:di) = address of string
  8591                                  ;	EXIT	(cx) = size of string
  8592                                  ;	USES	cx, flags
  8593                                  ;----------------------------------------------------------------------------
  8594                                  
  8595                                  StrLen:
  8596 00001F6A 57                      	push	di
  8597 00001F6B 50                      	push	ax
  8598                                  	;MOV	CX,-1
  8599 00001F6C B9FFFF                  	mov	cx,65535
  8600 00001F6F 30C0                    	XOR	AL,AL
  8601 00001F71 F2AE                    	REPNE	SCASB
  8602 00001F73 F7D1                    	NOT	CX
  8603 00001F75 58                      	pop	ax
  8604 00001F76 5F                      	pop	di
  8605 00001F77 C3                      	retn
  8606                                  
  8607                                  ;----------------------------------------------------------------------------
  8608                                  ;**	DStrLen - Compute Length of String
  8609                                  ;
  8610                                  ;	ENTRY	(ds:si) = address of string
  8611                                  ;	EXIT	(cx) = size of string, including trailing NUL
  8612                                  ;	USES	cx, flags
  8613                                  ;----------------------------------------------------------------------------
  8614                                  
  8615                                  DStrLen:	; BUGBUG - this guy is a pig, who uses him?
  8616 00001F78 E80700                  	CALL	XCHGP
  8617 00001F7B E8ECFF                  	CALL	StrLen
  8618 00001F7E E80100                  	CALL	XCHGP
  8619 00001F81 C3                      	retn
  8620                                  
  8621                                  ;----------------------------------------------------------------------------
  8622                                  ;**	XCHGP - Exchange Source and Destination Pointers
  8623                                  ;
  8624                                  ;	XCHGP exchanges (DS:SI) and (ES:DI)
  8625                                  ;
  8626                                  ;	ENTRY	none
  8627                                  ;	EXIT	pairs exchanged
  8628                                  ;	USES	SI, DI, DS, ES
  8629                                  ;----------------------------------------------------------------------------
  8630                                  
  8631                                  XCHGP:
  8632 00001F82 1E                      	push	ds
  8633 00001F83 06                      	push	es
  8634 00001F84 1F                      	pop	ds
  8635 00001F85 07                      	pop	es
  8636 00001F86 87F7                    	XCHG	SI,DI
  8637                                  xchgp_retn:
  8638 00001F88 C3                      	retn
  8639                                  
  8640                                  ;Break	<Idle - wait for a specified amount of time>
  8641                                  ;----------------------------------------------------------------------------
  8642                                  ;
  8643                                  ;   Idle - when retrying an operation due to a lock/sharing violation,
  8644                                  ;   	   we spin until RetryLoop is exhausted.
  8645                                  ;
  8646                                  ;   Inputs:	RetryLoop is the number of times we spin
  8647                                  ;   Outputs:	Wait
  8648                                  ;   Registers modified: none
  8649                                  ;----------------------------------------------------------------------------
  8650                                  
  8651                                  Idle:
  8652                                  	;test	byte [SS:FSHARING],0FFh
  8653 00001F89 36803E[0D05]00          	cmp	byte [SS:FSHARING],0	;hkn; SS override
  8654                                  	;retnz
  8655 00001F8F 75F7                    	jnz	short xchgp_retn
  8656                                  	;SAVE	<CX>
  8657 00001F91 51                      	push	cx
  8658 00001F92 368B0E[1C00]            	MOV	CX,[ss:RetryLoop]	;hkn; SS override
  8659 00001F97 E308                    	JCXZ	Idle3
  8660                                  Idle1:	
  8661 00001F99 51                      	PUSH	CX
  8662 00001F9A 31C9                    	XOR	CX,CX
  8663                                  Idle2:	
  8664 00001F9C E2FE                    	LOOP	Idle2
  8665 00001F9E 59                      	POP	CX
  8666 00001F9F E2F8                    	LOOP	Idle1
  8667                                  Idle3:	
  8668                                  	;RESTORE <CX>
  8669 00001FA1 59                      	pop	cx
  8670 00001FA2 C3                      	retn
  8671                                  
  8672                                  ;Break	<TableDispatch - dispatch to a table>
  8673                                  ;----------------------------------------------------------------------------
  8674                                  ;
  8675                                  ;   TableDispatch - given a table and an index, jmp to the approptiate
  8676                                  ;   routine.  Preserve all input registers to the routine.
  8677                                  ;
  8678                                  ;   Inputs:	Push	return address
  8679                                  ;		Push	Table address
  8680                                  ;		Push	index (byte)
  8681                                  ;   Outputs:	appropriate routine gets jumped to.
  8682                                  ;		return indicates invalid index
  8683                                  ;   Registers modified: none.
  8684                                  ;----------------------------------------------------------------------------
  8685                                  
  8686                                  struc TFrame	 ; TableFrame
  8687 00000000 ????                    .OldBP:	 resw 1  ; 0
  8688 00000002 ????                    .OldRet: resw 1  ; 2
  8689 00000004 ??                      .Index:	 resb 1  ; 4
  8690 00000005 ??                      .Pad:	 resb 1  ; 5  
  8691 00000006 ????                    .Tab:	 resw 1  ; 6
  8692 00000008 ????                    .NewRet: resw 1  ; 8
  8693                                  endstruc
  8694                                  
  8695                                  TableDispatch:
  8696 00001FA3 55                      	PUSH	BP
  8697 00001FA4 89E5                    	MOV	BP,SP
  8698 00001FA6 53                      	PUSH	BX			; save BX
  8699                                  	;mov	bx,[bp+6]
  8700 00001FA7 8B5E06                  	MOV	BX,[BP+TFrame.Tab]	; get pointer to table
  8701 00001FAA 2E8A1F                  	MOV	BL,[CS:BX]		; maximum index
  8702                                  	;cmp	[bp+4],bl
  8703 00001FAD 385E04                  	CMP	[BP+TFrame.Index],BL	; table error?
  8704 00001FB0 7317                    	JAE	short TableError	; yes
  8705                                  	;mov	bl,[bp+4]
  8706 00001FB2 8A5E04                  	MOV	BL,[BP+TFrame.Index]	; get desired table index
  8707 00001FB5 30FF                    	XOR	BH,BH			; convert to word
  8708 00001FB7 D1E3                    	SHL	BX,1			; convert to word pointer
  8709 00001FB9 43                      	INC	BX			; point past first length byte
  8710                                  	; 17/08/2018
  8711                                  	;add	bx,[bp+6]
  8712 00001FBA 035E06                  	ADD	BX,[BP+TFrame.Tab]	; get real offset
  8713 00001FBD 2E8B1F                  	MOV	BX,[CS:BX]		; get contents of table entry
  8714                                  	;mov	[bp+6],bx
  8715 00001FC0 895E06                  	MOV	[BP+TFrame.Tab],BX	; put table entry into return address
  8716 00001FC3 5B                      	POP	BX			; restore BX
  8717 00001FC4 5D                      	POP	BP			; restore BP
  8718 00001FC5 83C404                  	ADD	SP,4			; clean off Index and our return addr
  8719 00001FC8 C3                      	retn				; do operation
  8720                                  TableError:
  8721 00001FC9 5B                      	POP	BX			; restore BX
  8722 00001FCA 5D                      	POP	BP			; restore BP
  8723 00001FCB C20600                  	RETN	6			; clean off Index, Table and RetAddr
  8724                                  
  8725                                  
  8726                                  ;Break	<TestNet - determine if a CDS is for the network>
  8727                                  ;----------------------------------------------------------------------------
  8728                                  ;
  8729                                  ;   TestNet - examine CDS pointed to by ThisCDS and see if it indicates a
  8730                                  ;	network CDS.  This will handle NULL cds also.
  8731                                  ;
  8732                                  ;   Inputs:	ThisCDS points to CDS or NULL
  8733                                  ;   Outputs:	ES:DI = ThisCDS
  8734                                  ;		carry Set => network
  8735                                  ;		carry Clear => local
  8736                                  ;   Registers modified: none.
  8737                                  ;----------------------------------------------------------------------------
  8738                                  
  8739                                  TestNet:
  8740 00001FCE 2EC43E[3A05]            	LES	DI,[CS:THISCDS]
  8741 00001FD3 83FFFF                  	CMP	DI,-1
  8742 00001FD6 7409                    	JZ	short CMCRet		; UNC? carry is clear
  8743                                  	;test	word [es:di+43h],8000h
  8744 00001FD8 26F745430080            	TEST	word [ES:DI+curdir.flags],curdir_isnet
  8745 00001FDE 7501                    	JNZ	short CMCRet		; jump has carry clear
  8746 00001FE0 C3                      	retn				; carry is clear
  8747                                  CMCRet: 
  8748 00001FE1 F5                      	CMC
  8749 00001FE2 C3                      	retn
  8750                                  
  8751                                  ;Break	<IsSFTNet - see if an sft is for the network>
  8752                                  ;----------------------------------------------------------------------------
  8753                                  ;
  8754                                  ;   IsSFTNet - examine SF pointed to by ES:DI and see if it indicates a
  8755                                  ;	network file.
  8756                                  ;
  8757                                  ;   Inputs:	ES:DI point to SFT
  8758                                  ;   Outputs:	Zero set if not network sft
  8759                                  ;		zero reset otherwise
  8760                                  ;		Carry CLEAR!!!
  8761                                  ;   Registers modified: none.
  8762                                  ;----------------------------------------------------------------------------
  8763                                  
  8764                                  IsSFTNet:
  8765                                  	;test	word [es:di+5],8000h
  8766 00001FE3 26F745050080            	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
  8767 00001FE9 C3                      	retn
  8768                                  
  8769                                  ;Break	<FastInit - Initialize FastTable entries >
  8770                                  ;----------------------------------------------------------------------------
  8771                                  ;   DOS 4.00   2/9/87
  8772                                  ;   FastInit  - initialize the FASTXXX routine entry
  8773                                  ;		  in the FastTable
  8774                                  ;
  8775                                  ;   Inputs:	BX = FASTXXX ID ( 1=fastopen )
  8776                                  ;		DS:SI = address of FASTXXX routine entry
  8777                                  ;		   SI = -1 for query only
  8778                                  ;   Outputs:	Carry flag clear, if success
  8779                                  ;		Carry flag set,   if failure
  8780                                  ;
  8781                                  ;
  8782                                  ;----------------------------------------------------------------------------
  8783                                  
  8784                                  ;Procedure FastInit,NEAR
  8785                                  ;	ASSUME	CS:DOSCODE,SS:NOTHING
  8786                                  ;FastInit:
  8787                                  	; MSDOS 6.0
  8788                                  	;hkn; set up es to dosdataseg.
  8789                                  	;push	es
  8790                                  	;getdseg <es>			; es -> dosdata
  8791                                  
  8792                                  	;hkn; FastTable is in DOSDATA
  8793                                  	;MOV	DI,OFFSET DOSDATA:FastTable + 2 ;AN000;FO. points to fastxxx entry
  8794                                  	;DEC	BX				;AN000;FO.;; decrement index
  8795                                  	;MOV	DX,BX				;AN000;FO.;; save bx
  8796                                  	;SHL	BX,1				;AN000;FO.;; times 4 , each entry is DWORD
  8797                                  	;SHL	BX,1				;AN000;FO.
  8798                                  	;ADD	DI,BX				;AN000;FO. index to the entry
  8799                                  	;MOV	AX,WORD PTR ES:[DI+2]		;AN000;FO. get entry segment
  8800                                  ;fcheck: 					;AN000;
  8801                                  	;MOV	CX,CS				;AN000;FO.;; get DOS segment
  8802                                  	;CMP	AX,CX				;AN000;FO.;; first time installed ?
  8803                                  	;JZ	short ok_install			;AN000;FO.;; yes
  8804                                  	;OR	AX,AX				;AN000;FO.;
  8805                                  	;JZ	short ok_install		;AN000;FO.;
  8806                                  	;STC					;AN000;FO.;; already installed !
  8807                                  	;JMP	SHORT FSret			;AN000;FO. set carry
  8808                                  ;ok_install:					;AN000;
  8809                                  	;CMP	SI,-1				;AN000;FO.; Query only ?
  8810                                  	;JZ	short FSret			;AN000;FO.; yes
  8811                                  	;MOV	CX,DS				;AN000;FO.; get FASTXXX entry segment
  8812                                  	;MOV	WORD PTR ES:[DI+2],CX		;AN000;FO.; initialize routine entry
  8813                                  	;MOV	WORD PTR ES:[DI],SI		;AN000;FO.; initialize routine offset
  8814                                  
  8815                                  ;hkn; FastFlg moved to DOSDATA
  8816                                  	;MOV	DI,OFFSET DOSDATA:FastFlg	;AN000;FO.; get addr of FASTXXX flags
  8817                                  	;ADD	DI,DX				;AN000;FO.; index to a FASTXXX flag
  8818                                  	;OR	byte ptr ES:[DI],Fast_yes	;AN000;FO.; indicate installed
  8819                                  FSret:						;AN000;
  8820                                  	;pop	es
  8821                                  	;return					;AN000;FO.
  8822                                  ;EndProc FastInit				;AN000;FO.
  8823                                  
  8824                                  	; MSDOS 3.3
  8825                                  	; IBMDOS.COM (1987) - Offset 1EB3h
  8826                                  FastInit:
  8827 00001FEA BF[430F]                	mov	di,FastTable ; FastOpenTable
  8828 00001FED 2E8B4504                	mov	ax,[cs:di+4]		; Entry segment
  8829 00001FF1 8CCB                    	mov	bx,cs			; get DOS segment
  8830 00001FF3 39D8                    	cmp	ax,bx			; first time installed ?	
  8831 00001FF5 7402                    	je	short ok_install	; yes
  8832 00001FF7 F9                      	stc				; set carry
  8833 00001FF8 C3                      	retn				; (cf=1 means) already installed !
  8834                                  
  8835                                  ok_install:
  8836 00001FF9 BB[430F]                	mov	bx,FastTable ; FastOpenTable
  8837 00001FFC 8CD9                    	mov	cx,ds
  8838                                  	; set address of FASTXXX (FASTOPEN) routine entry
  8839 00001FFE 2E894F04                	mov	[cs:bx+4],cx
  8840 00002002 2E897702                	mov	[cs:bx+2],si
  8841 00002006 C3                      	retn
  8842                                  
  8843                                  ;Break	<FastRet - initial routine in FastOpenTable >
  8844                                  ;----------------------------------------------------------------------------
  8845                                  ;   DOS 3.3   6/10/86
  8846                                  ;   FastRet	- indicate FASTXXXX  not in memory
  8847                                  ;
  8848                                  ;   Inputs:	None
  8849                                  ;   Outputs:	AX = -1 and carry flag set
  8850                                  ;
  8851                                  ;   Registers modified: none.
  8852                                  ;----------------------------------------------------------------------------
  8853                                  
  8854                                  FastRet:
  8855                                  	;mov	ax,-1
  8856                                  	;stc
  8857                                  	;retf
  8858 00002007 F9                      	STC
  8859 00002008 19C0                    	sbb	ax,ax		; (ax) = -1, 'C' set
  8860 0000200A CB                      	RETF
  8861                                  
  8862                                  ;Break	<NLS_OPEN - do $open for NLSFUNC>
  8863                                  ;----------------------------------------------------------------------------
  8864                                  ;   DOS 3.3   6/10/86
  8865                                  ;   NLS_OPEN	- call $OPEN for NLSFUNC
  8866                                  ;
  8867                                  ;   Inputs:	Same input as $OPEN except CL = mode
  8868                                  ;   Outputs:	same output as $OPEN
  8869                                  ;
  8870                                  ;----------------------------------------------------------------------------
  8871                                  
  8872                                  ;hkn; NOTE! SS MUST HAVE BEEN SET UP TO DOSDATA BY THE TIME THESE
  8873                                  ;hkn; NLS FUNCTIONS ARE CALLED!!! THERE FORE WE WILL USE SS OVERRIDES
  8874                                  ;hkn; IN ORDER TO ACCESS DOS DATA VARIABLES!
  8875                                  
  8876                                  NLS_OPEN:
  8877                                  ;	MOV	BL,[CPSWFLAG]	 ; disable code page matching logic
  8878                                  ;	MOV	BYTE [CPSWFLAG],0
  8879                                  ;	PUSH	BX		 ; save current state
  8880                                  
  8881 0000200B 88C8                    	MOV	AL,CL		 ; set up correct interface for $OPEN
  8882 0000200D E82650                  	call	_$OPEN
  8883                                  
  8884                                   ;	POP	BX		 ; restore current state
  8885                                   ;	MOV	[CPSWFLAG],BL
  8886 00002010 C3                      	RETN
  8887                                  
  8888                                  ;Break	<NLS_LSEEK - do $LSEEK for NLSFUNC>
  8889                                  ;----------------------------------------------------------------------------
  8890                                  ;   DOS 3.3   6/10/86
  8891                                  ;   NLS_LSEEK	- call $LSEEK for NLSFUNC
  8892                                  ;
  8893                                  ;   Inputs:	BP = open mode
  8894                                  ;   Outputs:	same output as $LSEEK
  8895                                  ;
  8896                                  ;----------------------------------------------------------------------------
  8897                                  
  8898                                  NLS_LSEEK:
  8899                                  	;PUSH	word [SS:USER_SP] ; save user stack
  8900                                  	;PUSH	word [SS:USER_SS]
  8901 00002011 2EFF36[1E05]            	PUSH	word [CS:USER_SP] ; save user stack
  8902 00002016 2EFF36[2005]            	PUSH	word [CS:USER_SS]
  8903 0000201B E81000                  	CALL	Fake_User_Stack
  8904 0000201E 89E8                    	MOV	AX,BP		; set up correct interface for $LSEEK
  8905 00002020 E8124F                  	call	_$LSEEK
  8906                                  	;POP	word [SS:USER_SS] ; restore user stack
  8907                                  	;POP	word [SS:USER_SP]
  8908 00002023 2E8F06[2005]            	POP	word [cs:USER_SS] ; restore user stack
  8909 00002028 2E8F06[1E05]            	POP	word [cs:USER_SP]
  8910 0000202D C3                      	RETN
  8911                                  
  8912                                  ;Break	<Fake_User_Stack - save user stack>
  8913                                  ;----------------------------------------------------------------------------
  8914                                  ;   DOS 3.3   6/10/86
  8915                                  ;   Fake_User_Stack - save user stack pointer
  8916                                  ;
  8917                                  ;----------------------------------------------------------------------------
  8918                                  
  8919                                  Fake_User_Stack:
  8920                                  	;MOV	AX,[ss:USER_SP_2F] ; replace with INT 2F stack
  8921 0000202E 2EA1[710F]              	MOV	AX,[cs:USER_SP_2F]
  8922                                  	;MOV	[SS:USER_SP],AX
  8923 00002032 2EA3[1E05]              	MOV	[CS:USER_SP],AX
  8924 00002036 8CC8                    	MOV	AX,CS
  8925                                  	;mov	ax,ss
  8926                                  	;MOV	[SS:USER_SS],AX
  8927 00002038 2EA3[2005]              	MOV	[CS:USER_SS],AX
  8928 0000203C C3                      	RETN
  8929                                  
  8930                                  ;Break	<GetDevList - get device header list pointer>
  8931                                  ;----------------------------------------------------------------------------
  8932                                  ;   DOS 3.3   7/25/86
  8933                                  ;   GetDevList - get device header list pointer
  8934                                  ;
  8935                                  ;   Output: AX:BX points to the device header list
  8936                                  ;----------------------------------------------------------------------------
  8937                                  
  8938                                  GetDevList:
  8939 0000203D BE[3B0F]                	MOV	SI,SysInitTable
  8940                                  	;LDS	SI,[CS:SI+SYSINITVARS]
  8941 00002040 2EC534                  	LDS	SI,[CS:SI]
  8942                                  	;mov	ax,[si+34]  ; SSYSINITVARS offset 34 = [SI+SYSI.DEV]
  8943                                  	;mov	bx,[si+36]  ; SSYSINITVARS offset 36 = [SI+SYSI.DEV+2]
  8944 00002043 8B4422                  	MOV	AX,[SI+SYSI.DEV]
  8945 00002046 8B5C24                  	MOV	BX,[SI+SYSI.DEV+2]
  8946 00002049 C3                      	RETN
  8947                                  
  8948                                  ;Break	<NLS_IOCTL - do $IOCTL for NLSFUNC   >
  8949                                  ;----------------------------------------------------------------------------
  8950                                  ;   DOS 3.3   7/25/86
  8951                                  ;   NLS_IOCTL	- call $IOCTL for NLSFUNC
  8952                                  ;
  8953                                  ;   Inputs:	BP = function code 0CH
  8954                                  ;   Outputs:	same output as generic $IOCTL
  8955                                  ;
  8956                                  ;----------------------------------------------------------------------------
  8957                                  
  8958                                  NLS_IOCTL:
  8959                                  	;PUSH	word [SS:USER_SP] ; save user stack
  8960                                  	;PUSH	word [SS:USER_SS]
  8961 0000204A 2EFF36[1E05]            	PUSH	word [CS:USER_SP] ; save user stack
  8962 0000204F 2EFF36[2005]            	PUSH	word [CS:USER_SS]
  8963 00002054 E8D7FF                  	CALL	Fake_User_Stack
  8964 00002057 89E8                    	MOV	AX,BP	     ; set up correct interface for $LSEEK
  8965 00002059 E8580F                  	call	_$IOCTL
  8966                                  	;POP	word [SS:USER_SS] ; restore user stack
  8967                                  	;POP	word [SS:USER_SP]
  8968 0000205C 2E8F06[2005]            	POP	word [CS:USER_SS] ; restore user stack
  8969 00002061 2E8F06[1E05]            	POP	word [CS:USER_SP]
  8970 00002066 C3                      	RETN
  8971                                  
  8972                                  ;Break	<NLS_GETEXT- get extended error for NLSFUNC>
  8973                                  ;----------------------------------------------------------------------------
  8974                                  ;   DOS 3.3   7/25/86
  8975                                  ;   NLS_GETEXT	-
  8976                                  ;
  8977                                  ;   Inputs:	none
  8978                                  ;   Outputs:	AX = extended error
  8979                                  ;
  8980                                  ;----------------------------------------------------------------------------
  8981                                  
  8982                                  NLS_GETEXT:
  8983                                  	;MOV	AX,[SS:EXTERR]	 ; return extended error
  8984 00002067 2EA1[D202]              	mov	AX,[CS:EXTERR]
  8985 0000206B C3                      	RETN
  8986                                  
  8987                                  ;============================================================================
  8988                                  ; EcritDisk, LcritDisk, EcritDevice, LCritDevice
  8989                                  ; IBMDOS.COM (MSDOS 3.3), 1987 - Offset 1F36h
  8990                                  ;============================================================================
  8991                                  ; 20/07/2018 - Retro DOS v3.0
  8992                                  
  8993                                  	; MSDOS 3.3
  8994                                  	; 08/08/2018 - Retro DSOS v3.0
  8995                                  EcritMem:
  8996                                  EcritSFT:
  8997                                  	;
  8998                                  EcritDisk:
  8999                                  	;push	ax
  9000 0000206C C3                      	retn
  9001                                  	
  9002 0000206D B80180                  	mov	ax,8001h
  9003 00002070 CD2A                    	int	2Ah	; Microsoft Networks - BEGIN DOS CRITICAL SECTION
  9004                                  			; AL = critical section number (00h-0Fh)
  9005 00002072 58                      	pop	ax
  9006 00002073 C3                      	retn
  9007                                  
  9008                                  	; MSDOS 3.3
  9009                                  	; 08/08/2018 - Retro DSOS v3.0
  9010                                  LcritMem:
  9011                                  LcritSFT:
  9012                                  	;
  9013                                  LcritDisk:
  9014                                  	;push	ax
  9015 00002074 C3                      	retn
  9016                                  	
  9017 00002075 B80181                  	mov	ax,8101h
  9018 00002078 CD2A                    	int	2Ah	; Microsoft Networks - END DOS CRITICAL SECTION
  9019                                  			; AL = critical section number (00h-0Fh)
  9020 0000207A 58                      	pop	ax
  9021 0000207B C3                      	retn
  9022                                  
  9023                                  EcritDevice:
  9024                                  	;push	ax
  9025 0000207C C3                      	retn
  9026                                  	
  9027 0000207D B80280                  	mov	ax,8002h
  9028 00002080 CD2A                    	int	2Ah	; Microsoft Networks - BEGIN DOS CRITICAL SECTION
  9029                                  			; AL = critical section number (00h-0Fh)
  9030 00002082 58                      	pop	ax
  9031 00002083 C3                      	retn
  9032                                  
  9033                                  LcritDevice:
  9034                                  	;push	ax
  9035 00002084 C3                      	retn
  9036                                  	
  9037 00002085 B80281                  	mov	ax,8102h
  9038 00002088 CD2A                    	int	2Ah	; Microsoft Networks - END DOS CRITICAL SECTION
  9039                                  			; AL = critical section number (00h-0Fh)
  9040 0000208A 58                      	pop	ax
  9041 0000208B C3                      	retn
  9042                                  
  9043                                  ;============================================================================
  9044                                  ; CRIT.ASM, MSDOS 6.0, 1991
  9045                                  ;============================================================================
  9046                                  ; 20/07/2018 - Retro DOS v3.0
  9047                                  
  9048                                  ; (DOSMAC.INC, MSDOS 6.0, 1991)
  9049                                  
  9050                                  ; Some old versions of the 80286 have a bug in the chip.  The popf
  9051                                  ; instruction will enable interrupts.  Therefore in a section of code with
  9052                                  ; interrupts disabled and you need a popf instruction use the 'popff'
  9053                                  ; macro instead.
  9054                                  ;
  9055                                  
  9056                                  ;%macro POPFF 0
  9057                                  ;	jmp	$+3
  9058                                  ;	iret
  9059                                  ;	push	cs
  9060                                  ;	call	$-2
  9061                                  ;%endmacro
  9062                                  
  9063                                  ;**	CRIT.ASM - Critical Section Routines
  9064                                  ;
  9065                                  ;	Critical section handlers
  9066                                  ;
  9067                                  ;	Modification history:
  9068                                  ;
  9069                                  ;	    Created: ARR 30 March 1983
  9070                                  
  9071                                  ;
  9072                                  ;SR; This variable is set when the redir installs itself
  9073                                  ;
  9074                                  	;I_need redir_patch,BYTE
  9075                                  
  9076                                  ; Break	<Critical section handlers>
  9077                                  
  9078                                  ;   Each handler must leave everything untouched; including flags!
  9079                                  ;
  9080                                  ;   Sleaze for time savings:  first instruction is a return.  This is patched
  9081                                  ;   by the sharer to be a PUSH AX to complete the correct routines.
  9082                                  
  9083                                  ;Procedure  EcritDisk,NEAR
  9084                                  	;public  EcritMem
  9085                                  	;public  EcritSFT
  9086                                  ;ECritMEM    LABEL   NEAR
  9087                                  ;ECritSFT    LABEL   NEAR
  9088                                  
  9089                                  ;
  9090                                  ;SR; Check if critical section is to be entered
  9091                                  ;
  9092                                  
  9093                                  ;	pushf
  9094                                  ;	cmp	ss:[redir_patch],0
  9095                                  ;	jz	@f
  9096                                  ;	popff
  9097                                  ;
  9098                                  ;       PUSH    AX
  9099                                  ;	MOV     AX,8000h+critDisk
  9100                                  ;	INT     int_ibm
  9101                                  ;	POP     AX
  9102                                  ;	return
  9103                                  ;@@:
  9104                                  ;	popff
  9105                                  ;	ret
  9106                                  ;EndProc EcritDisk
  9107                                  
  9108                                  ;Procedure   LcritDisk,NEAR
  9109                                  ;	public  LcritMem
  9110                                  ;	public  LcritSFT
  9111                                  ;LCritMEM    LABEL   NEAR
  9112                                  ;LCritSFT    LABEL   NEAR
  9113                                  
  9114                                  ;
  9115                                  ;SR; Check if critical section is to be entered
  9116                                  ;
  9117                                  
  9118                                  ;	pushf
  9119                                  ;	cmp	ss:[redir_patch],0
  9120                                  ;	jz	@f
  9121                                  ;	popff
  9122                                  
  9123                                  ;       PUSH    AX
  9124                                  ;	MOV     AX,8100h+critDisk
  9125                                  ;	INT     int_ibm
  9126                                  ;	POP     AX
  9127                                  ;	return
  9128                                  ;@@:
  9129                                  ;	popff
  9130                                  ;	ret
  9131                                  
  9132                                  ;EndProc LcritDisk
  9133                                  
  9134                                  ;Procedure   EcritDevice,NEAR
  9135                                  ;
  9136                                  ;SR; Check if critical section is to be entered
  9137                                  ;
  9138                                  
  9139                                  ;	pushf
  9140                                  ;	cmp	ss:[redir_patch],0
  9141                                  ;	jz	@f
  9142                                  ;	popff
  9143                                  
  9144                                  ;       PUSH    AX
  9145                                  ;	MOV     AX,8000h+critDevice
  9146                                  ;	INT     int_ibm
  9147                                  ;	POP     AX
  9148                                  ;	return
  9149                                  ;@@:
  9150                                  ;	popff
  9151                                  ;	ret
  9152                                  
  9153                                  ;EndProc EcritDevice
  9154                                  
  9155                                  ;Procedure   LcritDevice,NEAR
  9156                                  ;
  9157                                  ;SR; Check if critical section is to be entered
  9158                                  ;
  9159                                  
  9160                                  ;	pushf
  9161                                  ;	cmp	ss:[redir_patch],0
  9162                                  ;	jz	@f
  9163                                  ;	popff
  9164                                  
  9165                                  ;       PUSH    AX
  9166                                  ;	MOV     AX,8100h+critDevice
  9167                                  ;	INT     int_ibm
  9168                                  ;	POP     AX
  9169                                  ;	return
  9170                                  ;@@:
  9171                                  ;	popff
  9172                                  ;	ret
  9173                                  
  9174                                  ;EndProc LcritDevice
  9175                                  
  9176                                  
  9177                                  ;============================================================================
  9178                                  ; CPMIO.ASM, MSDOS 6.0, 1991
  9179                                  ;============================================================================
  9180                                  ; 20/07/2018 - Retro DOS v3.0
  9181                                  
  9182                                  ;============================================================================
  9183                                  ; STDIO.ASM - (MSDOS 2.0)
  9184                                  ;============================================================================
  9185                                  
  9186                                  ;
  9187                                  ; Standard device IO for MSDOS (first 12 function calls)
  9188                                  ;
  9189                                  
  9190                                  ;.xlist
  9191                                  ;.xcref
  9192                                  ;INCLUDE STDSW.ASM
  9193                                  ;INCLUDE DOSSEG.ASM
  9194                                  ;.cref
  9195                                  ;.list
  9196                                  
  9197                                  ;TITLE   STDIO - device IO for MSDOS
  9198                                  ;NAME    STDIO
  9199                                  
  9200                                  ;INCLUDE IO.ASM
  9201                                  
  9202                                  ; ---------------------------------------------------------------------------
  9203                                  ;
  9204                                  ; NOTE for Retro DOS v2.0 :  (ERDOGAN TAN - 13/03/2018)
  9205                                  ;	  I0.ASM is missing in MSDOS 2.0 kernel source code files !!!
  9206                                  ;	  INSTEAD of IO.ASM, I have disassembled IBMDOS.COM (MSDOS 2.0)
  9207                                  ;			    and I have used CPMIO.ASM (MSDOS 6.0 source code)
  9208                                  ;			    to restore MSDOS 2.0 device IO source code 
  9209                                  ;
  9210                                  ;		(STRIN.ASM has '$STD_CON_STRING_INPUT' code.)	
  9211                                  	
  9212                                  ;============================================================================
  9213                                  ; STDIO.ASM - (MSDOS 2.0)
  9214                                  ;============================================================================
  9215                                  
  9216                                  ;
  9217                                  ; Standard device IO for MSDOS (first 12 function calls)
  9218                                  ;
  9219                                  
  9220                                  ;.xlist
  9221                                  ;.xcref
  9222                                  ;INCLUDE STDSW.ASM
  9223                                  ;INCLUDE DOSSEG.ASM
  9224                                  ;.cref
  9225                                  ;.list
  9226                                  
  9227                                  ;TITLE   STDIO - device IO for MSDOS
  9228                                  ;NAME    STDIO
  9229                                  
  9230                                  ;INCLUDE IO.ASM
  9231                                  
  9232                                  ; ---------------------------------------------------------------------------
  9233                                  ;
  9234                                  ; NOTE for Retro DOS v2.0 :  (ERDOGAN TAN - 13/03/2018)
  9235                                  ;	  I0.ASM is missing in MSDOS 2.0 kernel source code files !!!
  9236                                  ;	  INSTEAD of IO.ASM, I have disassembled IBMDOS.COM (MSDOS 2.0)
  9237                                  ;			    and I have used CPMIO.ASM (MSDOS 6.0 source code)
  9238                                  ;			    to restore MSDOS 2.0 device IO source code 
  9239                                  ;
  9240                                  ;		(STRIN.ASM has '$STD_CON_STRING_INPUT' code.)		
  9241                                  ;
  9242                                  ;============================================================================
  9243                                  ; IO.ASM (MSDOS 2.0) (IBMDOS.COM 2.0) - STRIN.ASM (MSDOS 2.0, 19/08/1983)
  9244                                  ;============================================================================
  9245                                  ; Retro DOS v2.0 by Erdogan Tan, 13/03/2018 - 14/03/2018
  9246                                  
  9247                                  ; (Disassembled code of IBMDOS.COM, 08/03/1983) - Dissassembler: IDA Pro Free
  9248                                  ; (Comments are from CPMIO.ASM - 1991, MSDOS 6.0) 
  9249                                  
  9250                                  ;**	Standard device IO for MSDOS (first 12 function calls)
  9251                                  ;
  9252                                  ;	TITLE	IBMCPMIO - device IO for MSDOS
  9253                                  ;	NAME	IBMCPMIO
  9254                                  
  9255                                  ;	Old style CP/M 1-12 system calls to talk to reserved devices
  9256                                  ;
  9257                                  ;	$Std_Con_Input_No_Echo
  9258                                  ;	$Std_Con_String_Output
  9259                                  ;	$Std_Con_String_Input
  9260                                  ;	$RawConIO
  9261                                  ;	$RawConInput
  9262                                  ;	RAWOUT
  9263                                  ;	RAWOUT2
  9264                                  ;
  9265                                  
  9266                                  ; The following routines form the console I/O group (funcs 1,2,6,7,8,9,10,11).
  9267                                  ; They assume ES and DS NOTHING, while not strictly correct, this forces data
  9268                                  ; references to be SS or CS relative which is desired.
  9269                                  
  9270                                  ; ---------------------------------------------------------------------------
  9271                                  
  9272                                  ;	TITLE	CPMIO2 - device IO for MSDOS
  9273                                  ;	NAME	CPMIO2
  9274                                  
  9275                                  ;
  9276                                  ;	Microsoft Confidential
  9277                                  ;	Copyright (C) Microsoft Corporation 1991
  9278                                  ;	All Rights Reserved.
  9279                                  ;
  9280                                  
  9281                                  ;**	Old style CP/M 1-12 system calls to talk to reserved devices
  9282                                  ;
  9283                                  ;	$Std_Con_Input
  9284                                  ;	$Std_Con_Output
  9285                                  ;	OUTT
  9286                                  ;	TAB
  9287                                  ;	BUFOUT
  9288                                  ;	$Std_Aux_Input
  9289                                  ;	$Std_Aux_Output
  9290                                  ;	$Std_Printer_Output
  9291                                  ;	$Std_Con_Input_Status
  9292                                  ;	$Std_Con_Input_Flush
  9293                                  ;
  9294                                  ;	Revision History:
  9295                                  ;
  9296                                  ;	  AN000	 version 4.00 - Jan. 1988
  9297                                  
  9298                                  ; The following routines form the console I/O group (funcs 1,2,6,7,8,9,10,11).
  9299                                  ; They assume ES and DS NOTHING, while not strictly correct, this forces data
  9300                                  ; references to be SS or CS relative which is desired.
  9301                                  
  9302                                  ;DOSCODE SEGMENT
  9303                                  ;	ASSUME	SS:DOSDATA,CS:DOSCODE
  9304                                  
  9305                                  
  9306                                  ;hkn; 	All the variables use SS override or DS. Therefore there is
  9307                                  ;hkn;	no need to specifically set up any seg regs unless SS assumption is
  9308                                  ;hkn;	not valid. 
  9309                                  
  9310                                  ;
  9311                                  ;----------------------------------------------------------------------------
  9312                                  ;
  9313                                  ; Procedure : $Std_Con_Input_No_Echo
  9314                                  ;
  9315                                  ;----------------------------------------------------------------------------
  9316                                  ;
  9317                                  
  9318                                  _$STD_CON_INPUT_NO_ECHO:   ;System call 8
  9319                                  
  9320                                  ; Inputs:
  9321                                  ;	None
  9322                                  ; Function:
  9323                                  ;	Input character from console, no echo
  9324                                  ; Returns:
  9325                                  ;	AL = character
  9326                                  
  9327 0000208C 1E                      	push	ds
  9328 0000208D 56                      	push	si
  9329                                  INTEST:
  9330 0000208E E85F36                  	call	STATCHK
  9331 00002091 754D                    	jnz	short GET ; 08/09/2018
  9332                                  ;*************************************************************************
  9333                                  ;hkn; SS override
  9334 00002093 36803E[060A]00          	cmp	byte [SS:PRINTER_FLAG],0  ; is printer idle?
  9335 00002099 7505                    	jnz	short no_sys_wait
  9336 0000209B B405                    	mov	ah,5			; get input status with system wait
  9337 0000209D E8AD2C                  	call	IOFUNC
  9338                                  no_sys_wait:
  9339                                  ;**************************************************************************
  9340 000020A0 B484                    	MOV	AH,84h
  9341 000020A2 CD2A                    	INT	int_IBM	 ; int 2Ah
  9342                                  
  9343                                  ;;; 7/15/86  update the date in the idle loop
  9344                                  ;;; Dec 19, 1986 D.C.L. changed following CMP to Byte Ptr from Word Ptr
  9345                                  ;;;;		 to shorten loop in consideration of the PC Convertible
  9346                                  
  9347                                  ;hkn; SS override
  9348 000020A4 36803E[8D0F]FF          	CMP	byte [SS:DATE_FLAG],-1	; date is updated may be every
  9349 000020AA 752D                    	JNZ	short NoUpdate		; 65535 x ? ms if no one calls
  9350 000020AC 50                      	PUSH	AX
  9351 000020AD 53                      	PUSH	BX			; following is tricky,
  9352 000020AE 51                      	PUSH	CX			; it may be called by critical handler
  9353 000020AF 52                      	PUSH	DX			; at that time, DEVCALL is used by
  9354                                  					; other's READ or WRITE
  9355 000020B0 1E                      	PUSH	DS			; save DS = SFT's sgement
  9356                                  
  9357                                  ;hkn; READTIME must use ds = DOSDATA
  9358                                  ;hkn;	PUSH	CS			; READTIME must use DS=CS
  9359                                  
  9360                                  	;push	ss
  9361 000020B1 0E                      	PUSH	CS
  9362 000020B2 1F                      	POP	DS
  9363                                  
  9364 000020B3 B80000                  	MOV	AX,0			; therefore, we save DEVCALL
  9365 000020B6 E89F02                  	CALL	Save_Restore_Packet	; save DEVCALL packet
  9366                                  	;invoke	READTIME		; readtime
  9367 000020B9 E824F8                  	call	READTIME
  9368 000020BC B80100                  	MOV	AX,1
  9369 000020BF E89602                  	CALL	Save_Restore_Packet	; restore DEVCALL packet
  9370                                  	;
  9371                                  	; MSDOS 3.3 (IBMDOS.COM, Offset 1F8Ch)
  9372                                  	; (MSDOS 6.0 code does not contain IBM DOS FETCHI_TAG check)
  9373 000020C2 53                      	push	bx
  9374 000020C3 BB[8D0F]                	mov	bx,DATE_FLAG
  9375 000020C6 83C302                  	add	bx,2  ; mov bx,FETCHI_FLAG
  9376 000020C9 2E813F7258              	cmp	word [cs:bx],5872h
  9377 000020CE 7403                    	jz	short FETCHI_TAG_chk_ok
  9378 000020D0 E8AE52                  	call	DOSINIT
  9379                                  FETCHI_TAG_chk_ok:
  9380 000020D3 5B                      	pop	bx
  9381                                  	;
  9382 000020D4 1F                      	POP	DS			; restore DS
  9383 000020D5 5A                      	POP	DX
  9384 000020D6 59                      	POP	CX
  9385 000020D7 5B                      	POP	BX
  9386 000020D8 58                      	POP	AX
  9387                                  NoUpdate:
  9388                                  
  9389                                  ;hkn; SS override
  9390 000020D9 36FF06[8D0F]            	INC	word [SS:DATE_FLAG]
  9391                                  
  9392                                  ;;; 7/15/86 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  9393 000020DE EBAE                    	JMP	short INTEST
  9394                                  GET:
  9395 000020E0 30E4                    	XOR	AH,AH
  9396 000020E2 E8682C                  	call	IOFUNC
  9397 000020E5 5E                      	POP	SI
  9398 000020E6 1F                      	POP	DS
  9399                                  ;;; 7/15/86
  9400                                  
  9401                                  ;hkn; SS override
  9402                                  	; MSDOS 6.0
  9403 000020E7 36C606[8B0F]00          	MOV	BYTE [SS:SCAN_FLAG],0
  9404                                  	;
  9405 000020ED 3C00                    	CMP	AL,0	    ; extended code ( AL )
  9406 000020EF 7506                    	JNZ	short noscan
  9407                                  
  9408                                  ;hkn; SS override
  9409 000020F1 36C606[8B0F]01          	MOV	BYTE [SS:SCAN_FLAG],1 ; set this flag for ALT_Q key
  9410                                  
  9411                                  noscan:
  9412 000020F7 C3                      	retn
  9413                                  ;
  9414                                  ;----------------------------------------------------------------------------
  9415                                  ;
  9416                                  ;**	$STD_CON_STRING_OUTPUT - Console String Output
  9417                                  ;
  9418                                  ;
  9419                                  ;	ENTRY	(DS:DX) Point to output string '$' terminated
  9420                                  ;	EXIT	none
  9421                                  ;	USES	ALL
  9422                                  ;
  9423                                  ;----------------------------------------------------------------------------
  9424                                  ;
  9425                                  
  9426                                  _$STD_CON_STRING_OUTPUT:	;System call 9
  9427                                  
  9428 000020F8 89D6                    	mov	si,dx
  9429                                  STRING_OUT1:	
  9430 000020FA AC                      	lodsb
  9431 000020FB 3C24                    	cmp	al,'$'
  9432 000020FD 74F8                    	jz	short noscan
  9433                                  NEXT_STR1:
  9434 000020FF E88202                  	call	OUTT
  9435 00002102 EBF6                    	jmp	short STRING_OUT1
  9436                                  
  9437                                  ;----------------------------------------------------------------------------
  9438                                  ;
  9439                                  ;**	$STD_CON_STRING_INPUT - Input Line from Console
  9440                                  ;
  9441                                  ;	$STD_CON_STRING_INPUT Fills a buffer from console input until CR
  9442                                  ;
  9443                                  ;	ENTRY	(ds:dx) = input buffer
  9444                                  ;	EXIT	none
  9445                                  ;	USES	ALL
  9446                                  ;
  9447                                  ;----------------------------------------------------------------------------
  9448                                  
  9449                                  _$STD_CON_STRING_INPUT:		;System call 10
  9450                                  
  9451 00002104 8CD0                    	mov	ax,ss
  9452 00002106 8EC0                    	mov	es,ax
  9453 00002108 89D6                    	mov	si,dx
  9454 0000210A 30ED                    	xor	ch,ch
  9455 0000210C AD                      	lodsw
  9456                                  
  9457                                  ;	(AL) = the buffer length
  9458                                  ;	(AH) = the template length
  9459                                  
  9460 0000210D 08C0                            or	al,al
  9461 0000210F 74E6                            jz	short noscan	;Buffer is 0 length!!?
  9462 00002111 88E3                    	mov	bl,ah		;Init template counter
  9463 00002113 88EF                            mov	bh,ch		;Init template counter
  9464                                  
  9465                                  ;	(BL) = the number of bytes in the template
  9466                                  
  9467 00002115 38D8                            cmp	al,bl
  9468 00002117 7605                            jbe	short NOEDIT	;If length of buffer inconsistent with contents
  9469 00002119 80380D                          cmp	byte [bx+si],c_CR ; 0Dh
  9470 0000211C 7402                            jz	short EDITON	;If CR correctly placed EDIT is OK
  9471                                  
  9472                                  ; The number of chars in the template is >= the number of chars in buffer or
  9473                                  ; there is no CR at the end of the template.  This is an inconsistant state
  9474                                  ; of affairs.  Pretend that the template was empty:
  9475                                  ;
  9476                                  
  9477                                  NOEDIT:	
  9478 0000211E 88EB                    	mov	bl,ch		;Reset buffer
  9479                                  EDITON: 
  9480 00002120 88C2                    	mov	dl,al
  9481 00002122 4A                      	dec	dx		;DL is # of bytes we can put in the buffer
  9482                                  
  9483                                  ;	Top level.  We begin to read a line in.
  9484                                  
  9485                                  NEWLIN: 
  9486 00002123 36A0[A701]              	mov	al,[SS:CARPOS]
  9487 00002127 36A2[A801]              	mov	[SS:STARTPOS],al ;Remember position in raw buffer
  9488                                  
  9489 0000212B 56                      	push	si
  9490 0000212C BF[A901]                	mov	di,INBUF ;Build the new line here
  9491 0000212F 36882E[1405]            	mov	byte [SS:INSMODE],ch ;Insert mode off
  9492 00002134 88EF                    	mov	bh,ch		;No chars from template yet
  9493 00002136 88EE                    	mov	dh,ch		;No chars to new line yet
  9494 00002138 E851FF                  	call	_$STD_CON_INPUT_NO_ECHO ;Get first char
  9495 0000213B 3C0A                    	cmp	al,c_LF		; 0Ah	;Linefeed 
  9496 0000213D 7503                    	jnz	short GOTCH
  9497                                  
  9498                                  ;	This is the main loop of reading in a character and processing it.
  9499                                  ;
  9500                                  ;	(BH) = the index of the next byte in the template
  9501                                  ;	(BL) = the length of the template
  9502                                  ;	(DH) = the number of bytes in the buffer
  9503                                  ;	(DL) = the length of the buffer
  9504                                  
  9505                                  GETCH:
  9506 0000213F E84AFF                  	call	_$STD_CON_INPUT_NO_ECHO
  9507                                  GOTCH:
  9508                                  ;
  9509                                  ; Brain-damaged Tim Patterson ignored ^F in case his BIOS did not flush the
  9510                                  ; input queue.
  9511                                  ;
  9512 00002142 3C06                            cmp	al,"F"-"@"  ; CMP AL, 6  ; Ignore ^F
  9513 00002144 74F9                    	jz	short GETCH
  9514                                  
  9515                                  ;	If the leading char is the function-key lead byte
  9516                                  
  9517 00002146 363A06[D212]                    cmp	al,[SS:ESCCHAR]
  9518 0000214B 7438                            jz	short ESCAPE	;change reserved keyword DBM 5-7-87
  9519                                  
  9520                                  ;	Rubout and ^H are both destructive backspaces.
  9521                                  
  9522 0000214D 3C7F                            cmp	al,c_DEL ; 7FH
  9523 0000214F 742B                            jz	short BACKSPJ
  9524 00002151 3C08                            cmp	al,c_BS  ; 8
  9525 00002153 7427                            jz	short BACKSPJ
  9526                                  
  9527                                  	; MSDOS 6.0
  9528                                  ;;	^W deletes backward once and then backs up until a letter is before the
  9529                                  ;;	cursor
  9530                                  ;
  9531                                  ;	CMP     AL,"W"-"@" ; 17h
  9532                                  ;
  9533                                  ;;	The removal of the comment characters before the jump statement will
  9534                                  ;;	cause ^W to backup a word.
  9535                                  ;
  9536                                  ;;***	JZ	short WordDel
  9537                                  ;	NOP
  9538                                  ;	NOP
  9539                                  ;	CMP     AL,"U"-"@" ; 15h
  9540                                  ;
  9541                                  ;;	The removal of the comment characters before the jump statement will
  9542                                  ;;	cause ^U to clear a line.
  9543                                  ;
  9544                                  ;;***	JZ	short LineDel
  9545                                  ;	NOP
  9546                                  ;	NOP
  9547                                  
  9548                                  ;	CR terminates the line.
  9549                                  
  9550 00002155 3C0D                            cmp	al,c_CR ; 0Dh
  9551 00002157 742F                            jz	short ENDLIN
  9552                                  
  9553                                  ;	LF goes to a new line and keeps on reading.
  9554                                  
  9555 00002159 3C0A                            cmp	al,c_LF ; 0Ah
  9556 0000215B 7441                    	jz	short PHYCRLF
  9557                                  
  9558                                  ;	^X (or ESC) deletes the line and starts over
  9559                                  
  9560                                  	; MSDOS 3.3
  9561                                  	;cmp	al,[ss:CANCHAR] ; 1Bh
  9562                                  	;jz	short KILNEW
  9563                                  	;MSDOS 6.0
  9564 0000215D 3C1B                    	cmp	al,CANCEL ; 1Bh
  9565 0000215F 7442                    	jz	short KILNEW
  9566                                  
  9567                                  ; Otherwise, we save the input character.
  9568                                  
  9569                                  SAVCH:	
  9570 00002161 38D6                    	cmp	dh,dl
  9571 00002163 7319                    	jnb	short BUFFUL		; buffer is full.
  9572 00002165 AA                              stosb
  9573 00002166 FEC6                    	inc	dh                      ; increment count in buffer.
  9574 00002168 E8B302                  	call	BUFOUT			;Print control chars nicely
  9575                                  
  9576 0000216B 36803E[1405]00                  cmp	byte [SS:INSMODE], 0
  9577 00002171 75CC                    	jnz	short GETCH		; insertmode => don't advance template
  9578 00002173 38DF                            cmp	bh,bl
  9579 00002175 73C8                            jnb	short GETCH		; no more characters in template
  9580 00002177 46                              inc	si                      ; Skip to next char in template
  9581 00002178 FEC7                            inc	bh                      ; remember position in template
  9582 0000217A EBC3                            jmp	short GETCH
  9583                                  
  9584                                  BACKSPJ: 
  9585 0000217C EB38                    	jmp	short BACKSP
  9586                                  
  9587                                  BUFFUL: 
  9588 0000217E B007                    	mov	al, 7			; Bell to signal full buffer
  9589 00002180 E80102                  	call	OUTT
  9590 00002183 EBBA                    	jmp	short GETCH
  9591                                  
  9592                                  ESCAPE: 
  9593                                  	;transfer OEMFunctionKey
  9594 00002185 E988F6                  	JMP	OEMFunctionKey
  9595                                  
  9596                                  ENDLIN:
  9597 00002188 AA                              stosb				; Put the CR in the buffer
  9598 00002189 E8F801                  	call	OUTT                    ; Echo it
  9599 0000218C 5F                              pop	di                      ; Get start of user buffer
  9600 0000218D 8875FF                          mov	[di-1], dh		; Tell user how many bytes
  9601 00002190 FEC6                            inc	dh			; DH is length including CR
  9602                                  
  9603                                  COPYNEW:
  9604                                  	; (IBMDOS.COM, MSDOS 2.0, STRIN.ASM)
  9605                                  	;mov	bp, es
  9606                                  	;mov	bx, ds
  9607                                  	;mov	es, bx
  9608                                  	;mov	ds, bp
  9609                                  	;mov	si, INBUF
  9610                                  	;mov	cl, dh
  9611                                  	;rep	movsb
  9612                                  	;retn
  9613                                  
  9614                                  	; CPMIO.ASM (MSDOS 6.0)
  9615                                  	; (IBMDOS.COM, MSDOS 3.3, Offset 2061h) 
  9616                                  	;SAVE	<DS,ES>
  9617 00002192 1E                      	PUSH	DS
  9618 00002193 06                      	PUSH	ES
  9619                                  	;RESTORE <DS,ES>		; XCHG ES,DS
  9620 00002194 1F                      	POP	DS
  9621 00002195 07                      	POP	ES
  9622                                  
  9623                                  ;;hkn; INBUF is in DOSDATA
  9624 00002196 BE[A901]                        MOV     SI,INBUF
  9625 00002199 88F1                            MOV     CL,DH                   ; set up count
  9626 0000219B F3A4                            REP     MOVSB                   ; Copy final line to user buffer
  9627                                  OLDBAK_RETN:
  9628 0000219D C3                              RETN
  9629                                  
  9630                                  ;	Output a CRLF to the user screen and do NOT store it into the buffer
  9631                                  
  9632                                  PHYCRLF:
  9633 0000219E E82001                  	CALL	CRLF
  9634 000021A1 EB9C                            JMP	short GETCH
  9635                                  
  9636                                  	; MSDOS 6.0 (& MSDOS 3.3, IBMDOS.COM, 1987)
  9637                                  
  9638                                  	; Note: Following routines were not used in IBMDOS.COM
  9639                                  	;	-CRTL+W, CRTL+U is not activated-
  9640                                  	;	but they were in the kernel code!?)
  9641                                  ;
  9642                                  ; Delete the previous line
  9643                                  ;
  9644                                  ;LineDel:
  9645                                  ;	OR      DH,DH
  9646                                  ;	JZ	short GetCh
  9647                                  ;	Call    BackSpace
  9648                                  ;	JMP	short LineDel
  9649                                  
  9650                                  ;
  9651                                  ; delete the previous word.
  9652                                  ;
  9653                                  ;WordDel:
  9654                                  ;WordLoop:
  9655                                  ;	Call    BackSpace               ; backspace the one spot
  9656                                  ;	OR      DH,DH
  9657                                  ;	JZ	short GetChJ
  9658                                  ;	MOV     AL,[ES:DI-1]
  9659                                  ;	cmp     al,'0'
  9660                                  ;	jb	short GetChj
  9661                                  ;	cmp     al,'9'
  9662                                  ;	jbe	short WordLoop
  9663                                  ;	OR      AL,20h
  9664                                  ;	CMP     AL,'a'
  9665                                  ;	JB	short GetChJ
  9666                                  ;	CMP     AL,'z'
  9667                                  ;	JBE	short WordLoop
  9668                                  ;getchj: 
  9669                                  ;	JMP	GetCh
  9670                                  
  9671                                  ; The user wants to throw away what he's typed in and wants to start over.
  9672                                  ; We print the backslash and then go to the next line and tab to the correct
  9673                                  ; spot to begin the buffered input.
  9674                                  
  9675                                  KILNEW:
  9676 000021A3 B05C                            mov	al,'\'
  9677 000021A5 E8DC01                          call	OUTT            ;Print the CANCEL indicator
  9678 000021A8 5E                              pop	si		;Remember start of edit buffer
  9679                                  PUTNEW:
  9680 000021A9 E81501                  	call	CRLF            ;Go to next line on screen
  9681 000021AC 36A0[A801]              	mov	al,[SS:STARTPOS]
  9682 000021B0 E84702                  	call	TAB             ;Tab over
  9683 000021B3 E96DFF                          JMP     NEWLIN		;Start over again
  9684                                  
  9685                                  ;	Destructively back up one character position
  9686                                  
  9687                                  BACKSP:
  9688                                  	; 09/09/2018
  9689 000021B6 E80200                  	Call    BackSpace
  9690 000021B9 EB84                    	JMP     GETCH
  9691                                  
  9692                                  BackSpace:
  9693 000021BB 08F6                    	or	dh,dh
  9694 000021BD 7419                    	jz	short OLDBAK	;No chars in line, do nothing to line
  9695 000021BF E85800                  	call	BACKUP          ;Do the backup
  9696 000021C2 268A05                  	mov	al,[es:di]	;Get the deleted char
  9697 000021C5 3C20                            cmp	al,20h	; ' '
  9698 000021C7 730F                    	jnb	short OLDBAK	;Was a normal char
  9699 000021C9 3C09                            cmp	al,c_HT ; 9
  9700 000021CB 741B                    	jz	short BAKTAB	;Was a tab, fix up users display
  9701                                  ;; 9/27/86 fix for ctrl-U backspace
  9702 000021CD 3C15                    	CMP     AL,"U"-"@" ; 15h ; ctrl-U is a section symbol not ^U
  9703 000021CF 7407                    	JZ	short OLDBAK
  9704 000021D1 3C14                           	CMP     AL,"T"-"@" ; 14h ; ctrl-T is a paragraphs symbol not ^T
  9705 000021D3 7403                    	JZ	short OLDBAK
  9706                                  ;; 9/27/86 fix for ctrl-U backspace
  9707 000021D5 E84500                          call	BACKMES         ;Was a control char, zap the '^'
  9708                                  OLDBAK:
  9709 000021D8 36803E[1405]00                  cmp	byte [SS:INSMODE], 0
  9710 000021DE 75BD                    	jnz	short OLDBAK_RETN ;In insert mode, done
  9711 000021E0 08FF                    	or	bh,bh
  9712 000021E2 74B9                            jz	short OLDBAK_RETN 
  9713                                  				;Not advanced in template, stay where we are
  9714 000021E4 FECF                    	dec	bh		;Go back in template
  9715 000021E6 4E                              dec	si
  9716 000021E7 C3                      	retn
  9717                                  
  9718                                  BAKTAB:
  9719 000021E8 57                              push	di
  9720 000021E9 4F                              dec	di		;Back up one char
  9721 000021EA FD                              std			;Go backward
  9722 000021EB 88F1                            mov	cl,dh		;Number of chars currently in line
  9723 000021ED B020                            mov	al,20h	; ' '
  9724 000021EF 53                              push	bx
  9725 000021F0 B307                            mov	bl,7		;Max
  9726 000021F2 E30E                            jcxz	FIGTAB		;At start, do nothing
  9727                                  FNDPOS:
  9728 000021F4 AE                              scasb			;Look back
  9729 000021F5 7609                    	jbe	short CHKCNT
  9730 000021F7 26807D0109              	cmp	byte [es:di+1],9
  9731 000021FC 7409                    	jz	short HAVTAB	;Found a tab
  9732 000021FE FECB                    	dec	bl		;Back one char if non tab control char
  9733                                  CHKCNT:
  9734 00002200 E2F2                            loop	FNDPOS
  9735                                  FIGTAB:		
  9736 00002202 362A1E[A801]            	sub	bl,[SS:STARTPOS]
  9737                                  HAVTAB:
  9738 00002207 28F3                    	sub	bl,dh
  9739 00002209 00D9                    	add	cl,bl
  9740 0000220B 80E107                  	and	cl,7		;CX has correct number to erase
  9741 0000220E FC                      	cld			;Back to normal
  9742 0000220F 5B                      	pop	bx
  9743 00002210 5F                      	pop	di
  9744 00002211 74C5                    	jz	short OLDBAK	;Nothing to erase
  9745                                  TABBAK:
  9746 00002213 E80700                  	call	BACKMES
  9747 00002216 E2FB                    	loop	TABBAK		;Erase correct number of chars
  9748 00002218 EBBE                    	jmp	short OLDBAK
  9749                                  
  9750                                  BACKUP:
  9751 0000221A FECE                            dec	dh             ;Back up in line
  9752 0000221C 4F                              dec	di
  9753                                  BACKMES:
  9754 0000221D B008                            mov	al,c_BS ; 8	;Backspace
  9755 0000221F E86201                          call	OUTT
  9756 00002222 B020                            mov	al,20h ; ' '	;Erase
  9757 00002224 E85D01                          call	OUTT
  9758 00002227 B008                            mov	al,c_BS ; 8	;Backspace
  9759 00002229 E95801                  	jmp	OUTT		;Done
  9760                                  
  9761                                  ;User really wants an ESC character in his line
  9762                                  TWOESC:	
  9763 0000222C 36A0[D212]              	mov	al,[SS:ESCCHAR]
  9764 00002230 E92EFF                  	jmp	SAVCH
  9765                                  
  9766                                  ;Copy the rest of the template
  9767                                  COPYLIN:
  9768 00002233 88D9                            mov	cl,bl		;Total size of template
  9769 00002235 28F9                    	sub	cl,bh		;Minus position in template, is number to move
  9770 00002237 EB07                            jmp	short COPYEACH
  9771                                  
  9772                                  COPYSTR:
  9773 00002239 E83400                  	call	FINDOLD         ;Find the char
  9774 0000223C EB02                    	jmp	short COPYEACH  ;Copy up to it
  9775                                  
  9776                                  ;Copy one char from template to line
  9777                                  COPYONE:
  9778 0000223E B101                            mov	cl,1
  9779                                  ;Copy CX chars from template to line
  9780                                  COPYEACH:
  9781 00002240 36C606[1405]00                  mov	byte [SS:INSMODE],0	;All copies turn off insert mode
  9782 00002246 38D6                    	cmp	dh,dl
  9783 00002248 740F                            jz	short GETCH2		;At end of line, can't do anything
  9784 0000224A 38DF                            cmp	bh,bl
  9785 0000224C 740B                            jz	short GETCH2		;At end of template, can't do anything
  9786 0000224E AC                              lodsb
  9787 0000224F AA                              stosb
  9788 00002250 E8CB01                  	call	BUFOUT
  9789 00002253 FEC7                            inc	bh			;Ahead in template
  9790 00002255 FEC6                            inc	dh			;Ahead in line
  9791 00002257 E2E7                            loop	COPYEACH
  9792                                  GETCH2:
  9793 00002259 E9E3FE                          jmp	GETCH
  9794                                  
  9795                                  ;Skip one char in template
  9796                                  SKIPONE:
  9797 0000225C 38DF                    	cmp	bh,bl
  9798 0000225E 74F9                    	jz	short GETCH2		;At end of template
  9799 00002260 FEC7                    	inc	bh			;Ahead in templat
  9800 00002262 46                      	inc	si
  9801 00002263 E9D9FE                  	jmp	GETCH
  9802                                  
  9803                                  SKIPSTR:
  9804 00002266 E80700                  	call	FINDOLD                 ;Find out how far to go
  9805 00002269 01CE                            add	si,cx			;Go there
  9806 0000226B 00CF                            add	bh,cl
  9807 0000226D E9CFFE                          jmp	GETCH
  9808                                  
  9809                                  ;Get the next user char, and look ahead in template for a match
  9810                                  ;CX indicates how many chars to skip to get there on output
  9811                                  ;NOTE: WARNING: If the operation cannot be done, the return
  9812                                  ;       address is popped off and a jump to GETCH is taken.
  9813                                  ;       Make sure nothing extra on stack when this routine
  9814                                  ;       is called!!! (no PUSHes before calling it).
  9815                                  FINDOLD:
  9816 00002270 E819FE                          call	_$STD_CON_INPUT_NO_ECHO
  9817                                  	; STRIN.ASM (MSDOS 2.11, 19/07/2018) 
  9818 00002273 363A06[D212]            	CMP     AL,[SS:ESCCHAR]	; did he type a function key?
  9819                                  ;hkn; ESCCHAR is in TABLE seg (DOSCODE), so CS override
  9820                                  	;CMP	AL,[CS:ESCCHAR]
  9821 00002278 7505                    	JNZ     SHORT FINDSETUP		; no, set up for scan
  9822 0000227A E80FFE                          CALL	_$STD_CON_INPUT_NO_ECHO	; eat next char
  9823 0000227D EB1D                            JMP     SHORT NOTFND		; go try again
  9824                                  FINDSETUP:
  9825 0000227F 88D9                    	mov	cl,bl
  9826 00002281 28F9                            sub	cl,bh		;CX is number of chars to end of template
  9827 00002283 7417                    	jz	short NOTFND	;At end of template
  9828 00002285 49                              dec	cx		;Cannot point past end, limit search
  9829 00002286 7414                            jz	short NOTFND	 ;If only one char in template, forget it
  9830 00002288 06                      	push	es
  9831 00002289 1E                      	push	ds
  9832 0000228A 07                      	pop	es
  9833 0000228B 57                      	push	di
  9834 0000228C 89F7                    	mov	di,si		;Template to ES:DI
  9835 0000228E 47                      	inc	di
  9836 0000228F F2AE                    	repne	scasb		;Look
  9837 00002291 5F                      	pop	di
  9838 00002292 07                      	pop	es
  9839 00002293 7507                    	jnz	short NOTFND	;Didn't find the char
  9840 00002295 F6D1                            not	cl		;Turn how far to go into how far we went
  9841 00002297 00D9                            add	cl,bl		;Add size of template
  9842 00002299 28F9                            sub	cl,bh		;Subtract current pos, result distance to skip
  9843                                  FINDOLD_RETN:
  9844 0000229B C3                      	retn
  9845                                  
  9846                                  NOTFND:
  9847 0000229C 5D                              pop	bp              ;Chuck return address
  9848 0000229D E99FFE                          jmp	GETCH
  9849                                  
  9850                                  REEDIT:
  9851 000022A0 B040                    	mov	al,'@'		;Output re-edit character
  9852 000022A2 E8DF00                  	call	OUTT
  9853 000022A5 5F                      	pop	di
  9854 000022A6 57                      	push	di
  9855 000022A7 06                      	push	es
  9856 000022A8 1E                      	push	ds
  9857 000022A9 E8E6FE                  	call	COPYNEW		;Copy current line into template
  9858 000022AC 1F                      	pop	ds
  9859 000022AD 07                      	pop	es
  9860 000022AE 5E                      	pop	si
  9861 000022AF 88F3                    	mov	bl,dh		;Size of line is new size template
  9862 000022B1 E9F5FE                  	jmp	PUTNEW		;Start over again
  9863                                  
  9864                                  EXITINS:
  9865                                  ENTERINS:
  9866 000022B4 36F616[1405]            	not	byte [SS:INSMODE]
  9867 000022B9 E983FE                  	jmp	GETCH
  9868                                  
  9869                                  ;Put a real live ^Z in the buffer (embedded)
  9870                                  CTRLZ:
  9871 000022BC B01A                    	mov	al,"Z"-"@" ; 1Ah
  9872 000022BE E9A0FE                          jmp	SAVCH
  9873                                  
  9874                                  ;Output a CRLF
  9875                                  CRLF:
  9876 000022C1 B00D                    	mov	al,c_CR ; 0Dh 
  9877 000022C3 E8BE00                  	call	OUTT
  9878 000022C6 B00A                    	mov	al,c_LF ; 0Ah
  9879 000022C8 E9B900                  	jmp	OUTT
  9880                                  
  9881                                  ;
  9882                                  ;----------------------------------------------------------------------------
  9883                                  ;
  9884                                  ;**	$RAW_CON_IO - Do Raw Console I/O
  9885                                  ;
  9886                                  ;	Input or output raw character from console, no echo
  9887                                  ;
  9888                                  ;	ENTRY	DL = -1 if input
  9889                                  ;		   =  output character if output
  9890                                  ;	EXIT	(AL) = input character if input
  9891                                  ;	USES	all
  9892                                  ;
  9893                                  ;----------------------------------------------------------------------------
  9894                                  ; 20/07/2018 - Retro DOS v3.0
  9895                                  
  9896                                  _$RAW_CON_IO:			; System call 6
  9897                                  
  9898 000022CB 88D0                            MOV     AL,DL
  9899 000022CD 3CFF                            CMP     AL,-1
  9900 000022CF 7542                            JNZ     SHORT RAWOUT
  9901                                          ;LES 	DI,[USER_SP]	; Get pointer to register save area
  9902 000022D1 36C43E[1E05]                    LES     DI,[SS:USER_SP] ; 12/03/2018
  9903 000022D6 31DB                    	XOR     BX,BX
  9904                                      	;CALL	GET_IO_FCB	; MSDOS 2.11 (Retro DOS v2.0)
  9905 000022D8 E8DF1D                  	CALL	GET_IO_SFT	; MSDOS 3.3 & MSDOS 6.0
  9906                                          ;JC	SHORT RET17
  9907 000022DB 72BE                            jc	short FINDOLD_RETN
  9908 000022DD B401                    	MOV     AH,1
  9909 000022DF E86B2A                          CALL	IOFUNC
  9910 000022E2 750B                            JNZ     SHORT RESFLG
  9911 000022E4 E8EA33                          CALL	SPOOLINT
  9912                                          ;OR	BYTE [ES:DI+16H],40H
  9913 000022E7 26804D1640              	OR	BYTE [ES:DI+user_env.user_F],40H ; Set user's zero flag
  9914 000022EC 30C0                            XOR     AL,AL
  9915                                  RET17:
  9916 000022EE C3                              RETN
  9917                                  
  9918                                  RESFLG:
  9919                                  	;AND	BYTE [ES:DI+16H],0FFH-40H  ; 0BFh
  9920 000022EF 26806516BF              	AND	BYTE [ES:DI+user_env.user_F],0FFH-40H
  9921                                  				; Reset user's zero flag
  9922                                  ;RILP:
  9923                                  rci0:
  9924 000022F4 E8DA33                       	CALL	SPOOLINT
  9925                                  
  9926                                  ;
  9927                                  ;----------------------------------------------------------------------------
  9928                                  ;
  9929                                  ;**	$Raw_CON_INPUT - Raw Console Input
  9930                                  ;
  9931                                  ;	Input raw character from console, no echo
  9932                                  ;
  9933                                  ;	ENTRY	none
  9934                                  ;	EXIT	(al) = character
  9935                                  ;	USES	all
  9936                                  ;
  9937                                  ;----------------------------------------------------------------------------
  9938                                  ;
  9939                                  
  9940                                  ;rci0:	invoke	SPOOLINT
  9941                                  
  9942                                  	;entry	$RAW_CON_INPUT
  9943                                  
  9944                                  _$RAW_CON_INPUT:		; System call 7
  9945 000022F7 53                      	push	bx
  9946 000022F8 31DB                            XOR     BX,BX
  9947                                          ;CALL	GET_IO_FCB	; MSDOS 2.11 (Retro DOS v2.0)
  9948 000022FA E8BD1D                  	CALL	GET_IO_SFT	; MSDOS 3.3 & MSDOS 6.0
  9949 000022FD 5B                              pop	bx
  9950 000022FE 72EE                    	JC	SHORT RET17
  9951 00002300 B401                            MOV     AH,1
  9952 00002302 E8482A                          CALL	IOFUNC
  9953                                  	;JZ	SHORT RILP	; MSDOS 2.11
  9954                                  	;XOR     AH,AH
  9955                                          ;CALL	IOFUNC
  9956                                          ;RETN
  9957 00002305 7506                    	jnz	short rci5	; MSDOS 3.3 & MSDOS 6.0
  9958 00002307 B484                    	MOV	AH,84h
  9959 00002309 CD2A                    	INT	int_IBM  ; int 2Ah
  9960 0000230B EBE7                    	JMP	short rci0
  9961                                  rci5:	
  9962 0000230D 30E4                            XOR     AH,AH
  9963 0000230F E83B2A                          CALL	IOFUNC
  9964 00002312 C3                              RETN
  9965                                  
  9966                                  ;
  9967                                  ;       Output the character in AL to stdout
  9968                                  ;
  9969                                  	;entry   RAWOUT
  9970                                  
  9971                                  RAWOUT:
  9972 00002313 53                              PUSH    BX
  9973 00002314 BB0100                          MOV     BX,1
  9974                                  
  9975                                          ;CALL	GET_IO_FCB	; MSDOS 2.11 (Retro DOS v2.0)
  9976 00002317 E8A01D                  	CALL	GET_IO_SFT	; MSDOS 3.3 & MSDOS 6.0
  9977 0000231A 721B                            JC      SHORT RAWRET1
  9978                                  	;
  9979                                  	; MSDOS 2.11
  9980                                          ;TEST	BYTE [SI+18H],080H	; output to file?
  9981                                          ;JZ	SHORT RAWNORM		; if so, do normally
  9982                                          ;PUSH	DS
  9983                                          ;PUSH	SI
  9984                                          ;LDS	SI,[SI+19H]		; output to special?
  9985                                  	;TEST	BYTE [SI+4],ISSPEC
  9986                                  	;POP	SI
  9987                                  	;
  9988                                          
  9989                                  	; MSDOS 3.3 & MSDOS 6.0
  9990                                  	;mov	bx,[si+5]
  9991 0000231C 8B5C05                  	MOV	BX,[SI+SF_ENTRY.sf_flags] ;hkn; DS set up by get_io_sft
  9992                                   ;
  9993                                   ; If we are a network handle OR if we are not a local device then go do the
  9994                                   ; output the hard way.
  9995                                   ;	
  9996                                  	;and	bx,8080h
  9997 0000231F 81E38080                	AND	BX,sf_isnet+devid_device
  9998                                  	;cmp	bx,80h
  9999 00002323 81FB8000                	CMP	BX,devid_device
 10000 00002327 7510                    	jnz     short RAWNORM
 10001 00002329 1E                      	push    ds
 10002                                  	;lds	bx,[si+7]
 10003 0000232A C55C07                  	LDS	BX,[SI+SF_ENTRY.sf_devptr] ; output to special?
 10004                                  	;test	byte [bx+4],10h
 10005 0000232D F6470410                	TEST	BYTE [BX+SYSDEV.ATT],ISSPEC
 10006                                  	;
 10007                                  
 10008 00002331 1F                              POP     DS
 10009 00002332 7405                            JZ      SHORT RAWNORM		; if not, do normally
 10010 00002334 CD29                            INT     int_fastcon   ; int 29h	; quickly output the char
 10011                                  
 10012                                          ;JMP     SHORT RAWRET
 10013                                  ;RAWNORM:
 10014                                  ;	CALL    RAWOUT3
 10015                                  
 10016                                  RAWRET: 
 10017 00002336 F8                      	CLC
 10018                                  RAWRET1:
 10019 00002337 5B                              POP     BX
 10020                                  RAWRET2:
 10021 00002338 C3                      	RETN
 10022                                  
 10023                                  RAWNORM:
 10024 00002339 E80700                  	CALL    RAWOUT3
 10025 0000233C EBF8                    	jmp	short RAWRET
 10026                                  
 10027                                  ;
 10028                                  ;       Output the character in AL to handle in BX
 10029                                  ;
 10030                                  ;	entry   RAWOUT2
 10031                                  
 10032                                  RAWOUT2:
 10033                                  	;CALL	GET_IO_FCB	; MSDOS 2.11 (Retro DOS v2.0)
 10034                                  	;JC	SHORT RET18
 10035 0000233E E8791D                  	CALL	GET_IO_SFT	; MSDOS 3.3 & MSDOS 6.0
 10036 00002341 72F5                    	JC	SHORT RAWRET2
 10037                                  RAWOUT3:
 10038 00002343 50                              PUSH    AX
 10039 00002344 EB03                            JMP     SHORT RAWOSTRT
 10040                                  ROLP:
 10041 00002346 E88833                          CALL	SPOOLINT
 10042                                  
 10043                                  	; MSDOS 6.0
 10044                                  	;OR	word [DOS34_FLAG],CTRL_BREAK_FLAG ; 001000000000b
 10045                                  				;AN002; set control break
 10046                                  	;;invoke DSKSTATCHK
 10047                                  	;call	DSKSTATCHK	;AN002; check control break
 10048                                  
 10049                                  RAWOSTRT:
 10050 00002349 B403                            MOV     AH,3
 10051 0000234B E8FF29                          CALL    IOFUNC
 10052 0000234E 74F6                            JZ      SHORT ROLP
 10053                                  
 10054                                  	; MSDOS 6.0
 10055                                  ;SR;
 10056                                  ; IOFUNC now returns ax = 0ffffh if there was an I24 on a status call and
 10057                                  ;the user failed. We do not send a char if this happens. We however return 
 10058                                  ;to the caller with carry clear because this DOS call does not return any
 10059                                  ;status. 
 10060                                  ;
 10061                                  	;inc	ax		;fail on I24 if ax = -1
 10062                                  	;POP	AX
 10063                                  	;jz	short nosend	;yes, do not send char
 10064                                  	;MOV	AH,2
 10065                                  	;call	IOFUNC
 10066                                  ;nosend:
 10067                                  	;CLC			; Clear carry indicating successful
 10068                                  	;retn
 10069                                  
 10070                                  	; MSDOS 3.3 & MSDOS 2.11
 10071 00002350 58                              POP     AX
 10072 00002351 B402                            MOV     AH,2
 10073 00002353 E8F729                          CALL    IOFUNC
 10074 00002356 F8                              CLC                     ; Clear carry indicating successful
 10075                                  RET18:    
 10076 00002357 C3                      	RETN
 10077                                  
 10078                                  ;;10/08/2018
 10079                                  ; 20/07/2018 - Retro DOS v3.0
 10080                                  ; ---------------------------------------------------------------------------
 10081                                  ; Retro DOS v2.0 (MSDOS 2.11) - OUTMES
 10082                                  ; ---------------------------------------------------------------------------
 10083                                  
 10084                                  ; This routine is called at DOS init
 10085                                  
 10086                                  ;;	;procedure OUTMES,NEAR ; String output for internal messages
 10087                                  ;;OUTMES:
 10088                                  ;;	;LODS	CS:BYTE PTR [SI]
 10089                                  ;;	CS	LODSB
 10090                                  ;;	CMP     AL,"$" ; 24h
 10091                                  ;;	JZ	SHORT RET18
 10092                                  ;;	CALL	OUTT
 10093                                  ;;	JMP     SHORT OUTMES
 10094                                  
 10095                                  ; ---------------------------------------------------------------------------
 10096                                  
 10097                                  ; 20/07/2018 - Retro DOS v3.0
 10098                                  
 10099                                  ; IBMDOS.COM (MSDOS 3.3 kernel) - Offset 2252h
 10100                                  
 10101                                  ;
 10102                                  ;----------------------------------------------------------------------------
 10103                                  ;
 10104                                  ; Inputs:
 10105                                  ;	AX=0 save the DEVCALL request packet
 10106                                  ;	  =1 restore the DEVCALL request packet
 10107                                  ; Function:
 10108                                  ;	save or restore the DEVCALL packet
 10109                                  ; Returns:
 10110                                  ;	none
 10111                                  ;
 10112                                  ;----------------------------------------------------------------------------
 10113                                  ;
 10114                                  
 10115                                  Save_Restore_Packet:
 10116 00002358 1E                      	PUSH	DS
 10117 00002359 06                      	PUSH	ES
 10118 0000235A 56                      	PUSH	SI
 10119 0000235B 57                      	PUSH	DI
 10120                                  
 10121                                  	; 09/09/2018
 10122 0000235C BF[730F]                	mov	di,FAKE_STACK_2F 
 10123 0000235F BE[0603]                	mov	si,DEVCALL
 10124                                  	;
 10125 00002362 83F800                  	CMP	AX,0		; save packet
 10126                                  	;JZ	short save_packet
 10127 00002365 7402                    	je	short set_seg 
 10128                                  
 10129                                  	; MSDOS 6.0
 10130                                  restore_packet:
 10131                                  ;	MOV	SI,OFFSET DOSDATA:Packet_Temp	 ;sourec
 10132                                  ;	MOV	DI,OFFSET DOSDATA:DEVCALL	 ;destination
 10133                                  	; MSDOS 3.3
 10134                                  	;mov	si,FAKE_STACK_2F ; DOS_TEMP ; Packed_Temp 
 10135                                  	;mov	di,DEVCALL  ; 09/09/2018
 10136                                  	;
 10137                                  	;JMP	short set_seg
 10138                                  	
 10139                                  	; 09/09/2018
 10140 00002367 87F7                    	xchg	si,di  ; DI = offset DEVCALL, SI = offset FAKE_STACK_2F
 10141                                  
 10142                                  	; MSDOS 6.0
 10143                                  save_packet:
 10144                                  ;	MOV	DI,OFFSET DOSDATA:Packet_Temp	 ;destination
 10145                                  ;	MOV	SI,OFFSET DOSDATA:DEVCALL	 ;source
 10146                                  	; 09/09/2018
 10147                                  	; MSDOS 3.3
 10148                                  	;mov	di,FAKE_STACK_2F ; DOS_TEMP ; Packed_Temp 
 10149                                  	;mov	si,DEVCALL ; 09/09/2018
 10150                                  
 10151                                  set_seg:
 10152                                  	; MSDOS 6.0
 10153                                  	;MOV	AX,SS		; set DS,ES to DOSDATA
 10154                                  	; MSDOS 3.3
 10155 00002369 8CC8                    	mov	ax,cs
 10156                                  	;
 10157 0000236B 8ED8                    	MOV	DS,AX
 10158 0000236D 8EC0                    	MOV	ES,AX
 10159 0000236F B90B00                  	MOV	CX,11		; 11 words to move
 10160 00002372 F3A5                    	REP	MOVSW
 10161                                  
 10162 00002374 5F                      	POP	DI
 10163 00002375 5E                      	POP	SI
 10164 00002376 07                      	POP	ES
 10165 00002377 1F                      	POP	DS
 10166 00002378 C3                      	retn
 10167                                  
 10168                                  ;============================================================================
 10169                                  ; CPMIO2.ASM, MSDOS 6.0, 1991
 10170                                  ;============================================================================
 10171                                  ; 20/07/2018 - Retro DOS v3.0
 10172                                  
 10173                                  ;hkn; 	All the variables use SS override or DS. Therefore there is
 10174                                  ;hkn;	no need to specifically set up any seg regs unless SS assumption is
 10175                                  ;hkn;	not valid. 
 10176                                  
 10177                                  ;
 10178                                  ;----------------------------------------------------------------------------
 10179                                  ;
 10180                                  ;**	$STD_CON_INPUT - System Call 1
 10181                                  ;
 10182                                  ;	Input character from console, echo
 10183                                  ;
 10184                                  ;	ENTRY	none
 10185                                  ;	EXIT	(al) = character
 10186                                  ;	USES	ALL
 10187                                  ;
 10188                                  ;----------------------------------------------------------------------------
 10189                                  ;
 10190                                  
 10191                                  _$STD_CON_INPUT:	;System call 1
 10192                                  	
 10193 00002379 E810FD                  	CALL	_$STD_CON_INPUT_NO_ECHO
 10194 0000237C 50                      	PUSH	AX
 10195 0000237D E80400                  	CALL	OUTT
 10196 00002380 58                      	POP	AX
 10197                                  CON_INPUT_RETN:	
 10198 00002381 C3                      	RETN
 10199                                  
 10200                                  ;
 10201                                  ;----------------------------------------------------------------------------
 10202                                  ;
 10203                                  ;**	$STD_CON_OUTPUT - System Call 2
 10204                                  ;
 10205                                  ;	Output character to console
 10206                                  ;
 10207                                  ;	ENTRY	(dl) = character
 10208                                  ;	EXIT	none
 10209                                  ;	USES	all
 10210                                  ;
 10211                                  ;----------------------------------------------------------------------------
 10212                                  ;
 10213                                  
 10214                                  _$STD_CON_OUTPUT:	;System call 2
 10215                                  
 10216 00002382 88D0                    	MOV	AL,DL
 10217                                  
 10218                                  OUTT:
 10219 00002384 3C20                    	CMP	AL,20H ; " "
 10220 00002386 725E                    	JB	SHORT CTRLOUT
 10221 00002388 3C7F                    	CMP	AL,c_DEL ; 7Fh
 10222 0000238A 7405                    	JZ	SHORT OUTCH
 10223                                  OUTCHA:	
 10224                                  	;INC	BYTE PTR [CARPOS]
 10225 0000238C 36FE06[A701]            	INC	BYTE [SS:CARPOS]
 10226                                  OUTCH:
 10227 00002391 1E                      	PUSH	DS
 10228 00002392 56                      	PUSH	SI
 10229                                  	;INC	BYTE PTR [CHARCO]		;invoke  statchk...
 10230                                  	;AND	BYTE PTR [CHARCO],00111111B	;AN000; every 64th char
 10231 00002393 36FE06[AE02]            	INC	BYTE [SS:CHARCO]	
 10232                                  	;AND	BYTE [SS:CHARCO],00111111B
 10233                                  	; 14/03/2018
 10234 00002398 368026[AE02]03          	and	byte [SS:CHARCO],3  ; IBMDOS.COM, MSDOS 3.3, MSDOS 2.11
 10235 0000239E 7505                    	JNZ	SHORT OUTSKIP
 10236 000023A0 50                      	PUSH	AX
 10237 000023A1 E84C33                  	CALL	STATCHK
 10238 000023A4 58                      	POP	AX
 10239                                  OUTSKIP:
 10240 000023A5 E86BFF                  	CALL	RAWOUT				;output the character
 10241 000023A8 5E                      	POP	SI
 10242 000023A9 1F                      	POP	DS
 10243                                  
 10244                                  	;TEST	BYTE PTR [PFLAG],-1
 10245                                  	;retz
 10246 000023AA 36F606[AC02]FF          	TEST	BYTE [SS:PFLAG],0FFh
 10247 000023B0 74CF                    	JZ	SHORT CON_INPUT_RETN
 10248                                  
 10249 000023B2 53                      	PUSH	BX
 10250 000023B3 1E                      	PUSH	DS
 10251 000023B4 56                      	PUSH	SI
 10252 000023B5 BB0100                  	MOV	BX,1
 10253                                  	; 20/07/2018 - Retro DOS v3.0
 10254                                  	; MSDOS 3.3
 10255                                  	; MSDOS 6.0 (CPMIO2.ASM)
 10256 000023B8 E8FF1C                  	CALL	GET_IO_SFT		;hkn; GET_IO_SFT will set up DS:SI 
 10257                                  					;hkn; to sft entry
 10258 000023BB 7226                    	JC	SHORT TRIPOPJ
 10259                                  	;mov	bx,[si+5]
 10260 000023BD 8B5C05                  	MOV	BX,[SI+SF_ENTRY.sf_flags]
 10261                                  	;test	bx,8000h
 10262 000023C0 F7C30080                	TEST	BX,sf_isnet	; 8000H		; output to NET?
 10263 000023C4 751D                    	JNZ	short TRIPOPJ 			; if so, no echo
 10264                                  	;test	bx,80h
 10265 000023C6 F7C38000                	TEST	BX,devid_device ; 80H		; output to file?
 10266 000023CA 7417                    	JZ	SHORT TRIPOPJ 			; if so, no echo
 10267                                  	; 14/03/2018
 10268                                  	;call	GET_IO_FCB	 	; IBMDOS.COM, MSDOS 2.11
 10269                                  	;jc	short TRIPOPJ
 10270                                  	; MSDOS 2.11
 10271                                  	;test	byte [SI+18H], 80h
 10272                                  	;jz	short TRIPOPJ
 10273 000023CC BB0400                  	MOV	BX,4
 10274 000023CF E8E81C                  	CALL	GET_IO_SFT
 10275 000023D2 720F                    	JC	SHORT TRIPOPJ
 10276                                  	;test	word [si+5], 800h
 10277 000023D4 F744050008              	TEST	word [SI+SF_ENTRY.sf_flags],sf_net_spool ; 800H 
 10278                                  						; StdPrn redirected?
 10279                                  	;JZ	SHORT LISSTRT2J			; No, OK to echo
 10280 000023D9 0F848E00                	jz	LISSTRT2 ; 10/08/2018 
 10281                                  	;MOV	BYTE [PFLAG],0			
 10282 000023DD 36C606[AC02]00          	MOV	BYTE [SS:PFLAG],0		; If a spool, NEVER echo
 10283                                  	; MSDOS 2.11
 10284                                  	;mov	bx,4
 10285                                  	;jmp	short LISSTRT2
 10286                                  	
 10287                                  TRIPOPJ:
 10288                                  	; 20/07/2018
 10289 000023E3 E98800                  	JMP	TRIPOP
 10290                                  
 10291                                  ;LISSTRT2J:
 10292                                  ;	JMP	LISSTRT2
 10293                                  
 10294                                  CTRLOUT:
 10295 000023E6 3C0D                    	CMP	AL,c_CR ; 0Dh
 10296 000023E8 7420                    	JZ	SHORT ZERPOS
 10297 000023EA 3C08                    	CMP	AL,c_BS ; 8
 10298 000023EC 7428                    	JZ	SHORT BACKPOS
 10299 000023EE 3C09                    	CMP	AL,c_HT ; 9
 10300 000023F0 759F                    	JNZ	SHORT OUTCH
 10301                                  	;MOV	AL,[CARPOS]
 10302 000023F2 36A0[A701]              	MOV	AL,[SS:CARPOS]
 10303 000023F6 0CF8                    	OR	AL,0F8H
 10304 000023F8 F6D8                    	NEG	AL
 10305                                  
 10306                                  TAB:
 10307 000023FA 51                      	PUSH	CX
 10308 000023FB 88C1                    	MOV	CL,AL
 10309 000023FD B500                    	MOV	CH,0
 10310 000023FF E307                    	JCXZ	POPTAB
 10311                                  TABLP:
 10312 00002401 B020                    	MOV	AL," "
 10313 00002403 E87EFF                  	CALL	OUTT
 10314 00002406 E2F9                    	LOOP	TABLP
 10315                                  POPTAB:
 10316 00002408 59                      	POP	CX
 10317 00002409 C3                      	RETN
 10318                                  
 10319                                  ZERPOS:
 10320                                  	;MOV	BYTE PTR [CARPOS],0
 10321 0000240A 36C606[A701]00          	MOV	BYTE [SS:CARPOS],0
 10322                                  	; 10/08/2018
 10323 00002410 E97EFF                  	JMP	OUTCH
 10324                                  OUTJ:	
 10325 00002413 E96EFF                  	JMP	OUTT
 10326                                  
 10327                                  BACKPOS:
 10328                                  	;DEC	BYTE PTR [CARPOS]
 10329 00002416 36FE0E[A701]            	DEC	BYTE [SS:CARPOS]
 10330 0000241B E973FF                  	JMP	OUTCH
 10331                                  
 10332                                  BUFOUT:
 10333 0000241E 3C20                    	CMP	AL," "
 10334 00002420 73F1                    	JAE	SHORT OUTJ		;Normal char
 10335 00002422 3C09                    	CMP	AL,9
 10336 00002424 74ED                    	JZ	SHORT OUTJ		;OUT knows how to expand tabs
 10337                                  	;DOS 3.3  7/14/86
 10338 00002426 3C15                    	CMP	AL,"U"-"@" ; 15h	; turn ^U to section symbol
 10339 00002428 740D                    	JZ	short CTRLU
 10340 0000242A 3C14                    	CMP	AL,"T"-"@" ; 14h	; turn ^T to paragraph symbol
 10341 0000242C 7409                    	JZ	short CTRLU
 10342                                  NOT_CTRLU:
 10343                                  	;DOS 3.3  7/14/86
 10344 0000242E 50                      	PUSH	AX
 10345 0000242F B05E                    	MOV	AL,"^"
 10346 00002431 E850FF                  	CALL	OUTT		;Print '^' before control chars
 10347 00002434 58                      	POP	AX
 10348 00002435 0C40                    	OR	AL,40H		;Turn it into Upper case mate
 10349                                  CTRLU:
 10350 00002437 E84AFF                  	CALL	OUTT
 10351                                  BUFOUT_RETN:
 10352 0000243A C3                      	RETN
 10353                                  
 10354                                  ;
 10355                                  ;----------------------------------------------------------------------------
 10356                                  ;
 10357                                  ;**	$STD_AUX_INPUT - System Call 3
 10358                                  ;
 10359                                  ;	$STD_AUX_INPUT returns a character from Aux Input
 10360                                  ;
 10361                                  ;	ENTRY	none
 10362                                  ;	EXIT	(al) = character
 10363                                  ;	USES	all
 10364                                  ;
 10365                                  ;----------------------------------------------------------------------------
 10366                                  ;
 10367                                  
 10368                                  _$STD_AUX_INPUT:	;System call 3
 10369                                  
 10370 0000243B E8B232                  	CALL	STATCHK
 10371 0000243E BB0300                  	MOV	BX,3
 10372 00002441 E8761C                  	CALL	GET_IO_SFT	; 20/07/2018 - MSDOS 3.3 (MSDOS 6.0)
 10373                                  	;CALL	GET_IO_FCB	; 14/03/2018 - MSDOS 2.11
 10374                                  	;retc
 10375 00002444 72F4                    	JC	SHORT BUFOUT_RETN
 10376 00002446 EB03                    	JMP	SHORT TAISTRT
 10377                                  AUXILP:
 10378 00002448 E88632                  	CALL	SPOOLINT
 10379                                  TAISTRT:
 10380 0000244B B401                    	MOV	AH,1
 10381 0000244D E8FD28                  	CALL	IOFUNC
 10382 00002450 74F6                    	JZ	SHORT AUXILP
 10383 00002452 30E4                    	XOR	AH,AH
 10384 00002454 E8F628                  	CALL	IOFUNC
 10385 00002457 C3                      	RETN
 10386                                  
 10387                                  ;
 10388                                  ;----------------------------------------------------------------------------
 10389                                  ;
 10390                                  ;**	$STD_AUX_OUTPUT - Output character to AUX
 10391                                  ;
 10392                                  ;	ENTRY	(dl) = character
 10393                                  ;	EXIT	none
 10394                                  ;	USES	all
 10395                                  ;
 10396                                  ;----------------------------------------------------------------------------
 10397                                  ;
 10398                                  
 10399                                  _$STD_AUX_OUTPUT:	;System call 4
 10400                                  
 10401 00002458 53                      	PUSH	BX
 10402 00002459 BB0300                  	MOV	BX,3
 10403 0000245C EB04                    	JMP	SHORT SENDOUT
 10404                                  
 10405                                  ;
 10406                                  ;----------------------------------------------------------------------------
 10407                                  ;
 10408                                  ;**	$STD_PRINTER_OUTPUT - Output character to printer
 10409                                  ;
 10410                                  ;	ENTRY	(dl) = character
 10411                                  ;	EXIT	none
 10412                                  ;	USES	all
 10413                                  ;
 10414                                  ;----------------------------------------------------------------------------
 10415                                  ;
 10416                                  
 10417                                  _$STD_PRINTER_OUTPUT:	;System call 5
 10418                                  
 10419 0000245E 53                      	PUSH	BX
 10420 0000245F BB0400                  	MOV	BX,4
 10421                                  
 10422                                  SENDOUT:
 10423 00002462 88D0                    	MOV	AL,DL
 10424 00002464 50                      	PUSH	AX
 10425 00002465 E88832                  	CALL	STATCHK
 10426 00002468 58                      	POP	AX
 10427 00002469 1E                      	PUSH	DS
 10428 0000246A 56                      	PUSH	SI
 10429                                  LISSTRT2:
 10430 0000246B E8D0FE                  	CALL	RAWOUT2
 10431                                  TRIPOP:
 10432 0000246E 5E                      	POP	SI
 10433 0000246F 1F                      	POP	DS
 10434 00002470 5B                      	POP	BX
 10435                                  SCIS_RETN:	; 20/07/2018
 10436 00002471 C3                      	RETN
 10437                                  ;
 10438                                  ;----------------------------------------------------------------------------
 10439                                  ;
 10440                                  ;**	$STD_CON_INPUT_STATUS - System Call 11
 10441                                  ;
 10442                                  ;	Check console input status
 10443                                  ;
 10444                                  ;	ENTRY	none
 10445                                  ;	EXIT	AL = -1 character available, = 0 no character
 10446                                  ;	USES	all
 10447                                  ;
 10448                                  ;----------------------------------------------------------------------------
 10449                                  ;
 10450                                  
 10451                                  _$STD_CON_INPUT_STATUS:		 ;System call 11
 10452                                  
 10453 00002472 E87B32                  	CALL	STATCHK
 10454 00002475 B000                    	MOV	AL,0			; no xor!!
 10455                                  	;retz
 10456 00002477 74F8                    	JZ	SHORT SCIS_RETN ; 15/04/2018
 10457 00002479 0CFF                    	OR	AL,-1
 10458                                  ;SCIS_RETN:
 10459 0000247B C3                      	RETN
 10460                                  
 10461                                  ;
 10462                                  ;----------------------------------------------------------------------------
 10463                                  ;
 10464                                  ;**	$STD_CON_INPUT_FLUSH - System Call 12
 10465                                  ;
 10466                                  ;	Flush console input buffer and perform call in AL
 10467                                  ;
 10468                                  ;	ENTRY	(AL) = DOS function to be called after flush (1,6,7,8,10)
 10469                                  ;	EXIT	(al) = 0 iff (al) was not one of the supported fcns
 10470                                  ;		return arguments for the fcn supplied in (AL)
 10471                                  ;	USES	all
 10472                                  ;
 10473                                  ;----------------------------------------------------------------------------
 10474                                  ;
 10475                                  
 10476                                  _$STD_CON_INPUT_FLUSH:		;System call 12
 10477                                  
 10478 0000247C 50                      	PUSH	AX
 10479 0000247D 52                      	PUSH	DX
 10480 0000247E 31DB                    	XOR	BX,BX
 10481 00002480 E8371C                  	CALL	GET_IO_SFT	; 20/07/2018 - MSDOS 3.3 (MSDOS 6.0)
 10482                                  	;CALL	GET_IO_FCB	; 14/03/2018 - MSDOS 2.11
 10483 00002483 7205                    	JC	SHORT BADJFNCON
 10484 00002485 B404                    	MOV	AH,4
 10485 00002487 E8C328                  	CALL	IOFUNC
 10486                                  
 10487                                  BADJFNCON:
 10488 0000248A 5A                      	POP	DX
 10489 0000248B 58                      	POP	AX
 10490 0000248C 88C4                    	MOV	AH,AL
 10491 0000248E 3C01                    	CMP	AL,1
 10492 00002490 7413                    	JZ	SHORT REDISPJ
 10493 00002492 3C06                    	CMP	AL,6
 10494 00002494 740F                    	JZ	SHORT REDISPJ
 10495 00002496 3C07                    	CMP	AL,7
 10496 00002498 740B                    	JZ	SHORT REDISPJ
 10497 0000249A 3C08                    	CMP	AL,8
 10498 0000249C 7407                    	JZ	SHORT REDISPJ
 10499 0000249E 3C0A                    	CMP	AL,10
 10500 000024A0 7403                    	JZ	SHORT REDISPJ
 10501 000024A2 B000                    	MOV	AL,0
 10502 000024A4 C3                      	RETN
 10503                                  
 10504                                  REDISPJ:
 10505 000024A5 FA                      	CLI
 10506                                  	;transfer REDISP
 10507 000024A6 E99CF0                  	JMP	REDISP
 10508                                  
 10509                                  ;============================================================================
 10510                                  ; FCBIO.ASM, MSDOS 6.0, 1991
 10511                                  ;============================================================================
 10512                                  ; 20/07/2018 - Retro DOS v3.0
 10513                                  
 10514                                  ;**	FCBIO.ASM - Ancient 1.0 1.1 FCB system calls
 10515                                  ;
 10516                                  ;	$GET_FCB_POSITION
 10517                                  ;	$FCB_DELETE
 10518                                  ;	$GET_FCB_FILE_LENGTH
 10519                                  ;	$FCB_CLOSE
 10520                                  ;	$FCB_RENAME
 10521                                  ;	SaveFCBInfo
 10522                                  ;	ResetLRU
 10523                                  ;	SetOpenAge
 10524                                  ;	LRUFCB
 10525                                  ;	FCBRegen
 10526                                  ;	BlastSFT
 10527                                  ;	CheckFCB
 10528                                  ;	SFTFromFCB
 10529                                  ;	FCBHardErr
 10530                                  ;
 10531                                  ;	Revision history:
 10532                                  ;
 10533                                  ;		Created: ARR 4 April 1983"
 10534                                  ;			 MZ  6 June  1983 completion of functions
 10535                                  ;			 MZ 15 Dec   1983 Brain damaged programs close FCBs multiple
 10536                                  ;					  times.  Change so successive closes work by
 10537                                  ;					  always returning OK.	Also, detect I/O to
 10538                                  ;					  already closed FCB and return EOF.
 10539                                  ;			 MZ 16 Jan   1984 More braindamage.  Need to separate info
 10540                                  ;					  out of sft into FCB for reconnection
 10541                                  ;
 10542                                  ;		A000	 version 4.00  Jan. 1988
 10543                                  
 10544                                  ;Break <$Get_FCB_Position - set random record fields to current pos>
 10545                                  ;----------------------------------------------------------------------------
 10546                                  ;
 10547                                  ;   $Get_FCB_Position - look at an FCB, retrieve the current position from the
 10548                                  ;	extent and next record field and set the random record field to point
 10549                                  ;	to that record
 10550                                  ;
 10551                                  ;   Inputs:	DS:DX point to a possible extended FCB
 10552                                  ;   Outputs:	The random record field of the FCB is set to the current record
 10553                                  ;   Registers modified: all
 10554                                  ;
 10555                                  ;----------------------------------------------------------------------------
 10556                                  ;
 10557                                  
 10558                                  _$GET_FCB_POSITION:
 10559 000024A9 E81D05                  	call	GetExtended		; point to FCB
 10560 000024AC E8ED04                  	call	GetExtent		; DX:AX is current record
 10561                                  	;mov	[si+21h],ax
 10562 000024AF 894421                  	MOV	[SI+SYS_FCB.RR],AX ; drop in low order piece
 10563                                  	;mov	[si+23h],dl
 10564 000024B2 885423                  	MOV	[SI+SYS_FCB.RR+2],DL	; drop in high order piece
 10565                                  	;cmp	word [si+0Eh],64
 10566 000024B5 837C0E40                	CMP	word [SI+SYS_FCB.RECSIZ],64
 10567 000024B9 7303                    	JAE	short GetFCBBye
 10568                                  	;mov	[si+24h],dh
 10569 000024BB 887424                  	MOV	[SI+SYS_FCB.RR+2+1],DH	; Set 4th byte only if record size < 64
 10570                                  GetFCBBye:
 10571 000024BE E95BF2                  	jmp	FCB_RET_OK
 10572                                  
 10573                                  
 10574                                  ;Break <$FCB_Delete - remove several files that match the input FCB>
 10575                                  ;----------------------------------------------------------------------------
 10576                                  ;
 10577                                  ;**	$FCB_Delete - Delete from FCB Template
 10578                                  ;
 10579                                  ;	given an FCB, remove all directory entries in the current
 10580                                  ;	directory that have names that match the FCB's ?  marks.
 10581                                  ;
 10582                                  ;	ENTRY	(DS:DX) = address of FCB
 10583                                  ;	EXIT	entries matching the FCB are deleted
 10584                                  ;		(al) = ff iff no entries were deleted
 10585                                  ;	USES	all
 10586                                  ;
 10587                                  ;----------------------------------------------------------------------------
 10588                                  ;
 10589                                  
 10590                                  _$FCB_DELETE:		; System call 19
 10591                                  					; OpenBuf is in DOSDATA
 10592 000024C1 BF[6003]                	MOV	DI,OPENBUF 		; appropriate place 
 10593                                  
 10594 000024C4 E82145                  	call	TransFCB		; convert FCB to path
 10595 000024C7 720A                    	JC	short BadPath 		; signal no deletions
 10596                                  
 10597 000024C9 16                      	push	SS
 10598 000024CA 1F                      	pop	DS			; SS is DOSDATA
 10599                                  
 10600 000024CB E89E0D                  	call	DOS_DELETE		; wham
 10601 000024CE 7203                    	JC	short BadPath
 10602                                  GoodPath:
 10603 000024D0 E949F2                  	jmp	FCB_RET_OK		; do a good return
 10604                                  BadPath:
 10605                                  	; Error code is in AX
 10606                                  
 10607 000024D3 E949F2                  	jmp	FCB_RET_ERR		; let someone else signal the error
 10608                                  
 10609                                  
 10610                                  ;Break <$Get_FCB_File_Length - return the length of a file>
 10611                                  ;----------------------------------------------------------------------------
 10612                                  ;
 10613                                  ;   $Get_FCB_File_Length - set the random record field to the length of the
 10614                                  ;	file in records (rounded up if partial).
 10615                                  ;
 10616                                  ;   Inputs:	DS:DX - point to a possible extended FCB
 10617                                  ;   Outputs:	Random record field updated to reflect the number of records
 10618                                  ;   Registers modified: all
 10619                                  ;
 10620                                  ;----------------------------------------------------------------------------
 10621                                  ;
 10622                                  
 10623                                  _$GET_FCB_FILE_LENGTH:
 10624                                  
 10625 000024D6 E8F004                  	call	GetExtended		; get real FCB pointer
 10626                                  					; DX points to Input FCB
 10627                                  
 10628                                  					; OpenBuf is in DOSDATA
 10629 000024D9 BF[6003]                	MOV	DI,OPENBUF		; appropriate buffer
 10630                                  
 10631 000024DC 1E                      	push	ds			; save pointer to true FCB
 10632 000024DD 56                      	push	si
 10633 000024DE E80745                  	call	TransFCB		; Trans name DS:DX, sets SATTRIB
 10634 000024E1 5E                      	pop	si
 10635 000024E2 1F                      	pop	ds
 10636 000024E3 72EE                    	JC	short BadPath
 10637 000024E5 1E                      	push	ds			; save pointer
 10638 000024E6 56                      	push	si
 10639 000024E7 16                      	push	ss		
 10640 000024E8 1F                      	pop	ds
 10641 000024E9 E80311                  	call	GET_FILE_INFO		; grab the info
 10642 000024EC 5E                      	pop	si			; get pointer back
 10643 000024ED 1F                      	pop	ds
 10644 000024EE 72E3                    	JC	short BadPath 		; invalid something
 10645 000024F0 89DA                    	MOV	DX,BX			; get high order size
 10646 000024F2 89F8                    	MOV	AX,DI			; get low order size
 10647                                  	;mov	 bx,[si+0Eh]
 10648 000024F4 8B5C0E                  	MOV	BX,[SI+SYS_FCB.RECSIZ]	; get his record size
 10649 000024F7 09DB                    	OR	BX,BX			; empty record => 0 size for file
 10650 000024F9 7503                    	JNZ	short GetSize 		; not empty
 10651 000024FB BB8000                  	MOV	BX,128
 10652                                  GetSize:
 10653 000024FE 89C7                    	MOV	DI,AX			; save low order word
 10654 00002500 89D0                    	MOV	AX,DX			; move high order for divide
 10655 00002502 31D2                    	XOR	DX,DX			; clear out high
 10656 00002504 F7F3                    	DIV	BX			; wham
 10657 00002506 50                      	PUSH	AX			; save dividend
 10658 00002507 89F8                    	MOV	AX,DI			; get low order piece
 10659 00002509 F7F3                    	DIV	BX			; wham
 10660 0000250B 89D1                    	MOV	CX,DX			; save remainder
 10661 0000250D 5A                      	POP	DX			; get high order dividend
 10662 0000250E E306                    	JCXZ	LengthStore		; no roundup
 10663 00002510 83C001                  	ADD	AX,1
 10664 00002513 83D200                  	ADC	DX,0			; 32-bit increment
 10665                                  LengthStore:
 10666                                  	;mov	[si+21h],ax
 10667 00002516 894421                  	MOV	[SI+SYS_FCB.RR],AX	; store low order
 10668                                  	;mov	[si+23h],dl
 10669 00002519 885423                  	MOV	[SI+SYS_FCB.RR+2],DL	; store high order
 10670 0000251C 08F6                    	OR	DH,DH
 10671 0000251E 74B0                    	JZ	short GoodPath		; not storing insignificant zero
 10672                                  	;mov	[si+24h],dh
 10673 00002520 887424                  	MOV	[SI+SYS_FCB.RR+3],DH	; save that high piece
 10674                                  GoodRet:
 10675                                  	;jmp	FCB_RET_OK
 10676 00002523 EBAB                    	jmp	short GoodPath
 10677                                  
 10678                                  ;Break <$FCB_Close - close a file>
 10679                                  ;----------------------------------------------------------------------------
 10680                                  ;
 10681                                  ;   $FCB_Close - given an FCB, look up the SFN and close it.  Do not free it
 10682                                  ;	as the FCB may be used for further I/O
 10683                                  ;
 10684                                  ;   Inputs:	DS:DX point to FCB
 10685                                  ;   Outputs:	AL = FF if file was not found on disk
 10686                                  ;   Registers modified: all
 10687                                  ;
 10688                                  ;----------------------------------------------------------------------------
 10689                                  ;
 10690                                  
 10691                                  _$FCB_CLOSE:		; System call 16
 10692                                  
 10693 00002525 30C0                    	XOR	AL,AL			; default search attributes
 10694 00002527 E89F04                  	call	GetExtended		; DS:SI point to real FCB
 10695 0000252A 7403                    	JZ	short NoAttr		; not extended
 10696 0000252C 8A44FF                  	MOV	AL,[SI-1]		; get attributes
 10697                                  NoAttr:
 10698                                  					; SS override
 10699 0000252F 36A2[0605]              	MOV	[SS:ATTRIB],AL		; stash away found attributes
 10700 00002533 E80804                  	call	SFTFromFCB
 10701 00002536 72EB                    	JC	short GoodRet 		; MZ 16 Jan Assume death
 10702                                  
 10703                                  	;
 10704                                  	; If the sharer is present, then the SFT is not regenable. Thus, 
 10705                                  	; there is no need to set the SFT's attribute.
 10706                                  	;
 10707                                  
 10708                                  	;;; 9/8/86 F.C. save SFT attribute and restore it back when close is 
 10709                                  	;;; done
 10710                                  
 10711                                  	;mov	al,[es:di+4]
 10712 00002538 268A4504                	MOV	AL,[ES:DI+SF_ENTRY.sf_attr]
 10713 0000253C 30E4                    	XOR	AH,AH
 10714 0000253E 50                      	PUSH	AX
 10715                                  
 10716                                  	;;; 9/8/86 F.C. save SFT attribute and restore it back when close is 
 10717                                  	;;; done
 10718                                  
 10719 0000253F E8DF4D                  	call	CheckShare
 10720 00002542 7508                    	JNZ	short NoStash
 10721 00002544 36A0[0605]              	MOV	AL,[SS:ATTRIB]
 10722                                  	;mov	[es:di+4],al
 10723 00002548 26884504                	MOV	[ES:DI+SF_ENTRY.sf_attr],AL ; attempted attribute for close
 10724                                  NoStash:
 10725                                  	;mov	ax,[si+14h]
 10726 0000254C 8B4414                  	MOV	AX,[SI+SYS_FCB.FDATE] ; move in the time and date
 10727                                  	;mov	[es:di+0Fh],ax
 10728 0000254F 2689450F                	MOV	[ES:DI+SF_ENTRY.sf_date],AX
 10729                                  	;mov	ax,[si+16h]
 10730 00002553 8B4416                  	MOV	AX,[SI+SYS_FCB.FTIME]
 10731                                  	;mov	[es:di+0Dh],ax
 10732 00002556 2689450D                	MOV	[ES:DI+SF_ENTRY.sf_time],AX
 10733                                  	;mov	ax,[si+10h]
 10734 0000255A 8B4410                  	MOV	AX,[SI+SYS_FCB.FILSIZ]
 10735                                  	;mov	[es:di+11h],ax
 10736 0000255D 26894511                	MOV	[ES:DI+SF_ENTRY.sf_size],AX
 10737                                  	;mov	ax,[si+12h]
 10738 00002561 8B4412                  	MOV	AX,[SI+SYS_FCB.FILSIZ+2]
 10739                                  	;mov	[es:di+13h],ax
 10740 00002564 26894513                	MOV	[ES:DI+SF_ENTRY.sf_size+2],AX
 10741                                  	;or	word [es:di+5],4000h
 10742 00002568 26814D050040            	OR	word [ES:DI+SF_ENTRY.sf_flags],sf_close_nodate
 10743 0000256E 16                      	push	ss
 10744 0000256F 1F                      	pop	ds
 10745 00002570 E84B15                  	call	DOS_CLOSE	; wham
 10746 00002573 C43E[3605]              	LES	DI,[THISSFT]
 10747                                  
 10748                                  	;;; 9/8/86 F.C. restore SFT attribute
 10749 00002577 59                      	POP	CX
 10750                                  	;mov	[es:di+4],cl
 10751 00002578 26884D04                	MOV	[ES:DI+SF_ENTRY.sf_attr],CL
 10752                                  	;;; 9/8/86 F.C. restore SFT attribute
 10753                                  
 10754 0000257C 9C                      	PUSHF
 10755                                  	;test	word [es:di],0FFFFh
 10756                                  	;cmp	word [ES:DI+SF_ENTRY.sf_ref_count],0
 10757                                  				; zero ref count gets blasted
 10758 0000257D 26833D00                	cmp	word [ES:DI],0
 10759 00002581 7507                    	jnz     short CloseOK
 10760 00002583 50                      	PUSH	AX
 10761 00002584 B04D                    	MOV	AL,'M'
 10762 00002586 E8DA02                  	call	BlastSFT
 10763 00002589 58                      	POP	AX
 10764                                  CloseOK:
 10765 0000258A 9D                      	POPF
 10766 0000258B 7396                    	JNC	short GoodRet
 10767                                  	;cmp	al,6
 10768 0000258D 3C06                    	CMP	AL,error_invalid_handle
 10769 0000258F 7492                    	JZ	short GoodRet
 10770                                  	;mov	al,2
 10771 00002591 B002                    	MOV	AL,error_file_not_found
 10772                                  fcb_close_err:
 10773 00002593 E989F1                  	jmp	FCB_RET_ERR
 10774                                  
 10775                                  ;
 10776                                  ;----------------------------------------------------------------------------
 10777                                  ;
 10778                                  ;**	$FCB_Rename - Rename a File
 10779                                  ;
 10780                                  ;	$FCB_Rename - rename a file in place within a directory.  Renames
 10781                                  ;	multiple files copying from the meta characters.
 10782                                  ;
 10783                                  ;	ENTRY	DS:DX point to an FCB.	The normal name field is the source
 10784                                  ;		    name of the files to be renamed.  Starting at offset 11h
 10785                                  ;		    in the FCB is the destination name.
 10786                                  ;	EXIT	AL = 0 -> no error occurred and all files were renamed
 10787                                  ;		AL = FF -> some files may have been renamed but:
 10788                                  ;			rename to existing file or source file not found
 10789                                  ;	USES	ALL
 10790                                  ;
 10791                                  ;----------------------------------------------------------------------------
 10792                                  ;
 10793                                  
 10794                                  _$FCB_RENAME:		; System call 23
 10795                                  
 10796 00002596 E83004                  	call	GetExtended		; get pointer to real FCB
 10797 00002599 52                      	push	dx
 10798 0000259A 8A04                    	MOV	AL,[SI] 		; get drive byte
 10799 0000259C 83C610                  	ADD	SI,10h			; point to destination
 10800                                  
 10801                                  					; RenBuf is in DOSDATA
 10802 0000259F BF[E003]                	MOV	DI,RENBUF		; point to destination buffer
 10803 000025A2 FF34                    	push	word [SI]
 10804 000025A4 1E                      	push	ds
 10805                                  	;push	di			; save source pointer for TransFCB
 10806                                  	; 16/01/2024 - BugFix !
 10807 000025A5 56                      	push	si
 10808 000025A6 8804                    	MOV	[SI],AL			; drop in real drive
 10809 000025A8 89F2                    	MOV	DX,SI			; let TransFCB know where the FCB is
 10810 000025AA E83B44                  	call	TransFCB		; munch this pathname
 10811 000025AD 5E                      	pop	si
 10812 000025AE 1F                      	pop	ds	
 10813 000025AF 8F04                    	pop	WORD [SI]		; get path back
 10814 000025B1 5A                      	pop	dx			; Original FCB pointer
 10815 000025B2 721A                    	JC	short fren90		; bad path -> error
 10816                                  
 10817                                  					; SS override for WFP_Start & Ren_WFP
 10818 000025B4 368B36[4A05]            	MOV	SI,[ss:WFP_START]	; get pointer
 10819 000025B9 368936[4C05]            	MOV	[ss:REN_WFP],SI		; stash it
 10820                                  
 10821                                  					; OpenBuf is in DOSDATA
 10822 000025BE BF[6003]                	MOV	DI,OPENBUF		; appropriate spot
 10823 000025C1 E82444                  	call	TransFCB		; wham
 10824                                  					; NOTE that this call is pointing
 10825                                  					;  back to the ORIGINAL FCB so
 10826                                  					;  SATTRIB gets set correctly
 10827 000025C4 7208                    	JC	short fren90		; error
 10828 000025C6 E84E0E                  	call	DOS_RENAME
 10829 000025C9 7203                    	JC	short fren90
 10830 000025CB E94EF1                  	jmp	FCB_RET_OK
 10831                                  
 10832                                  ;	Error -
 10833                                  ;
 10834                                  ;	(al) = error code
 10835                                  
 10836                                  fren90:	
 10837 000025CE E94EF1                  	jmp	FCB_RET_ERR
 10838                                  
 10839                                  
 10840                                  ;Break <Misbehavior fixers>
 10841                                  ;
 10842                                  ;   FCBs suffer from several problems.	First, they are maintained in the
 10843                                  ;   user's space so he may move them at will.  Second, they have a small
 10844                                  ;   reserved area that may be used for system information.  Third, there was
 10845                                  ;   never any "rules for behavior" for FCBs; there was no protocol for their
 10846                                  ;   usage.
 10847                                  ;
 10848                                  ;   This results in the following misbehavior:
 10849                                  ;
 10850                                  ;	infinite opens of the same file:
 10851                                  ;
 10852                                  ;	While (TRUE) {			While (TRUE) {
 10853                                  ;	    FCBOpen (FCB);		    FCBOpen (FCB);
 10854                                  ;	    Read (FCB); 		    Write (FCB);
 10855                                  ;	    }				    }
 10856                                  ;
 10857                                  ;	infinite opens of different files:
 10858                                  ;
 10859                                  ;	While (TRUE) {			While (TRUE) {
 10860                                  ;	    FCBOpen (FCB[i++]); 	    FCBOpen (FCB[i++]);
 10861                                  ;	    Read (FCB); 		    Write (FCB);
 10862                                  ;	    }				    }
 10863                                  ;
 10864                                  ;	multiple closes of the same file:
 10865                                  ;
 10866                                  ;	FCBOpen (FCB);
 10867                                  ;	while (TRUE)
 10868                                  ;	    FCBClose (FCB);
 10869                                  ;
 10870                                  ;	I/O after closing file:
 10871                                  ;
 10872                                  ;	FCBOpen (FCB);
 10873                                  ;	while (TRUE) {
 10874                                  ;	    FCBWrite (FCB);
 10875                                  ;	    FCBClose (FCB);
 10876                                  ;	    }
 10877                                  ;
 10878                                  ;   The following is am implementation of a methodology for emulating the
 10879                                  ;   above with the exception of I/O after close.  We are NOT attempting to
 10880                                  ;   resolve that particular misbehavior.  We will enforce correct behaviour in
 10881                                  ;   FCBs when they refer to a network file or when there is file sharing on
 10882                                  ;   the local machine.
 10883                                  ;
 10884                                  ;   The reserved fields of the FCB (10 bytes worth) is divided up into various
 10885                                  ;   structures depending on the file itself and the state of operations of the
 10886                                  ;   OS.  The information contained in this reserved field is enough to
 10887                                  ;   regenerate the SFT for the local non-shared file.  It is assumed that this
 10888                                  ;   regeneration procedure may be expensive.  The SFT for the FCB is
 10889                                  ;   maintained in a LRU cache as the ONLY performance inprovement.
 10890                                  ;
 10891                                  ;   No regeneration of SFTs is attempted for network FCBs.
 10892                                  ;
 10893                                  ;   To regenerate the SFT for a local FCB, it is necessary to determine if the
 10894                                  ;   file sharer is working.  If the file sharer is present then the SFT is not
 10895                                  ;   regenerated.
 10896                                  ;
 10897                                  ;   Finally, if there is no local sharing, the full name of the file is no
 10898                                  ;   longer available.  We can make up for this by using the following
 10899                                  ;   information:
 10900                                  ;
 10901                                  ;	The Drive number (from the DPB).
 10902                                  ;	The physical sector of the directory that contains the entry.
 10903                                  ;	The relative position of the entry in the sector.
 10904                                  ;	The first cluster field.
 10905                                  ;	The last used SFT.
 10906                                  ;      OR In the case of a device FCB
 10907                                  ;	The low 6 bits of sf_flags (indicating device type)
 10908                                  ;	The pointer to the device header
 10909                                  ;
 10910                                  ;
 10911                                  ;   We read in the particular directory sector and examine the indicated
 10912                                  ;   directory entry.  If it matches, then we are kosher; otherwise, we fail.
 10913                                  ;
 10914                                  ;   Some key items need to be remembered:
 10915                                  ;
 10916                                  ;	Even though we are caching SFTs, they may contain useful sharing
 10917                                  ;	information.  We enforce good behavior on the FCBs.
 10918                                  ;
 10919                                  ;	Network support must not treat FCBs as impacting the ref counts on
 10920                                  ;	open VCs.  The VCs may be closed only at process termination.
 10921                                  ;
 10922                                  ;	If this is not an installed version of the DOS, file sharing will
 10923                                  ;	always be present.
 10924                                  ;
 10925                                  ;	We MUST always initialize lstclus to = firclus when regenerating a
 10926                                  ;	file. Otherwise we start allocating clusters up the wazoo.
 10927                                  ;
 10928                                  ;	Always initialize, during regeneration, the mode field to both isFCB
 10929                                  ;	and open_for_both.  This is so the FCB code in the sharer can find the
 10930                                  ;	proper OI record.
 10931                                  ;
 10932                                  ;   The test bits are:
 10933                                  ;
 10934                                  ;	00 -> local file
 10935                                  ;	40 -> sharing local
 10936                                  ;	80 -> network
 10937                                  ;	C0 -> local device
 10938                                  
 10939                                  ;Break	<SaveFCBInfo - store pertinent information from an SFT into the FCB>
 10940                                  ;----------------------------------------------------------------------------
 10941                                  ;
 10942                                  ;   SaveFCBInfo - given an FCB and its associated SFT, copy the relevant
 10943                                  ;	pieces of information into the FCB to allow for subsequent
 10944                                  ;	regeneration. Poke LRU also.
 10945                                  ;
 10946                                  ;   Inputs:	ThisSFT points to a complete SFT.
 10947                                  ;		DS:SI point to the FCB (not an extended one)
 10948                                  ;   Outputs:	The relevant reserved fields in the FCB are filled in.
 10949                                  ;		DS:SI preserved
 10950                                  ;		ES:DI point to sft
 10951                                  ;   Registers modified: All
 10952                                  ;
 10953                                  ;
 10954                                  ;----------------------------------------------------------------------------
 10955                                  ;
 10956                                  
 10957                                  SaveFCBInfo:
 10958                                  
 10959 000025D1 36C43E[3605]            	LES	DI,[SS:THISSFT]		; SS override
 10960 000025D6 E80AFA                  	call	IsSFTNet
 10961 000025D9 7419                    	JZ	short SaveLocal		; if not network then save local info
 10962                                  ;
 10963                                  ;----- In net support -----
 10964                                  ;
 10965                                  	; MSDOS 6.0
 10966                                  	;MOV	AX,[ES:DI+sf_serial_ID] ;AN000;;IFS. save IFS ID
 10967                                  	;MOV	[SI+fcb_netID],ax	;AN000;;IFS.
 10968                                  	; MSDOS 3.3
 10969                                  	;mov	ax,[es:di+1Dh]
 10970 000025DB 268B451D                	mov	ax,[es:di+SF_ENTRY.sf_dirsec]
 10971                                  	;mov	[si+1Ah],ax
 10972 000025DF 89441A                  	mov	[si+fcb_net_handle],ax
 10973                                  
 10974                                  	; MSDOS 3.3
 10975 000025E2 06                      	push	es
 10976 000025E3 57                      	push	di
 10977                                  	;les	di,[es:di+19h]
 10978 000025E4 26C47D19                	LES	DI,[ES:DI+sf_netid]
 10979                                  	;mov	[si+1Ch],di
 10980 000025E8 897C1C                  	MOV	[SI+fcb_netID],DI	; save net ID
 10981                                  	;mov 	[si+1Eh],es
 10982 000025EB 8C441E                  	MOV	[SI+fcb_netID+2],ES
 10983 000025EE 5F                      	pop	di
 10984 000025EF 07                      	pop	es
 10985                                  
 10986                                  	;mov	bl,80h
 10987 000025F0 B380                    	MOV	BL,FCBNETWORK
 10988                                  ;
 10989                                  ;----- END In net support -----
 10990                                  ;
 10991 000025F2 EB4C                    	jmp	SHORT SaveSFN
 10992                                  
 10993                                  SaveLocal:
 10994                                  	;IF	Installed
 10995 000025F4 E82A4D                  	call	CheckShare
 10996 000025F7 7402                    	JZ	short SaveNoShare	; no sharer
 10997 000025F9 EB40                    	JMP	short SaveShare		; sharer present
 10998                                  
 10999                                  SaveNoShare:
 11000                                  	;test 	word [es:di+5],80h
 11001 000025FB 26F745058000            	TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 11002 00002601 7526                    	JNZ	short SaveNoShareDev	; Device
 11003                                  	;
 11004                                  	; Save no sharing local file information
 11005                                  	;
 11006                                  	;mov	ax,[es:di+1Dh]
 11007 00002603 268B451D                	MOV	AX,[ES:DI+SF_ENTRY.sf_dirsec] ; get directory sector F.C.
 11008                                  	;mov	[si+1Dh],ax
 11009 00002607 89441D                  	MOV	[SI+fcb_nsl_dirsec],AX
 11010                                  
 11011                                  	; MSDOS 6.0
 11012                                  	;SR; Store high byte of directory sector
 11013                                  	;mov	ax,[es:di+SF_ENTRY.sf_dirsec+2] ; get high word
 11014                                  	;
 11015                                  	; SR;
 11016                                  	; We have to store the read-only and archive attributes of the file.
 11017                                  	; We extract it from the SFT and store it in the top two bits of the 
 11018                                  	; sector number ( sector number == 22 bits only )
 11019                                  	;
 11020                                  	;mov	bl,[es:di+SF_ENTRY.sf_attr]
 11021                                  	;mov	bh,bl
 11022                                  	;ror	bl,1
 11023                                  	;shl	bh,1
 11024                                  	;or	bl,bh
 11025                                  	;and	bl,0C0h
 11026                                  	;
 11027                                  	;or	al,bl
 11028                                  	;mov	[si+fcb_sfn],al	;sector number = 22-bits
 11029                                  
 11030                                  	; MSDOS 3.3 ($ MSDOS 6.0)
 11031                                  	;mov	al,[es:di+1Fh]
 11032 0000260A 268A451F                	MOV	AL,[ES:DI+SF_ENTRY.sf_dirpos] ; location in sector
 11033                                  	;mov	[si+1Fh],al
 11034 0000260E 88441F                  	MOV	[SI+fcb_nsl_dirpos],AL
 11035                                  	;mov	ax,[es:di+0Bh]
 11036 00002611 268B450B                	MOV	AX,[ES:DI+SF_ENTRY.sf_firclus] ; first cluster
 11037                                  	;mov	[si+1Bh],ax
 11038 00002615 89441B                  	MOV	[SI+fcb_nsl_firclus],AX
 11039 00002618 B300                    	MOV	BL,0
 11040                                  
 11041                                  	; Create the bits field from the dirty/device bits of the flags word 
 11042                                  	; and the mode byte
 11043                                  
 11044                                  SetFCBBits:
 11045                                  	;mov	ax,[es:di+5]
 11046 0000261A 268B4505                	MOV	AX,[ES:DI+SF_ENTRY.sf_flags]
 11047 0000261E 24C0                    	AND	AL,0C0h 		; mask off drive bits
 11048                                  	;or	al,[es:di+2]
 11049 00002620 260A4502                	OR	AL,[ES:DI+SF_ENTRY.sf_mode] ; stick in open mode
 11050                                  	;mov	[si+1Ah], al
 11051 00002624 88441A                  	MOV	[SI+fcb_nsl_bits],AL	; save dirty info
 11052                                  
 11053                                  	; MSDOS 6.0
 11054                                  	; SR;
 11055                                  	; Check if we came here for local file or device. If for local file, 
 11056                                  	; skip setting of SFT index
 11057                                  	;
 11058                                  	;or	bl,bl
 11059                                  	;jz	short SaveNoSFN		; do not save SFN if local file
 11060                                  
 11061 00002627 EB17                    	JMP	short SaveSFN 		; go and save SFN
 11062                                  
 11063                                  	; Save no sharing local device information
 11064                                  
 11065                                  SaveNoShareDev:
 11066                                  	;mov	ax,[es:di+7]
 11067 00002629 268B4507                	MOV	AX,[ES:DI+SF_ENTRY.sf_devptr]
 11068                                  	;mov	[si+1Ah],ax
 11069 0000262D 89441A                  	MOV	[SI+fcb_nsld_drvptr],AX
 11070                                  	;mov	ax,[es:di+9]
 11071 00002630 268B4509                	MOV	AX,[ES:DI+SF_ENTRY.sf_devptr+2]
 11072 00002634 89441C                  	MOV	[SI+fcb_nsld_drvptr+2],AX
 11073                                  	;mov	bl,40h
 11074 00002637 B340                    	MOV	BL,FCBDEVICE
 11075 00002639 EBDF                    	JMP	SetFCBBits		; go and save SFN
 11076                                  
 11077                                  SaveShare:
 11078                                  	;ENDIF
 11079                                  ;
 11080                                  ;----- In share support -----
 11081                                  ;
 11082                                  	;call	far [ss:ShSave]
 11083 0000263B 36FF1E[8400]            	Call	far [ss:JShare+(10*4)] ; 10 = ShSave ; SS Override
 11084                                  ;
 11085                                  ;----- end in share support -----
 11086                                  ;
 11087                                  SaveSFN:
 11088                                  	; MSDOS 3.3
 11089                                  	;mov	ax,[es:di+5]
 11090                                  	;and	al,3Fh
 11091                                  	;or	al,bl
 11092                                  	;mov	[si+19h],al
 11093                                  
 11094                                  	;lea	ax, [di-6]
 11095 00002640 8D45FA                  	LEA	AX,[DI-SFT.SFTable]
 11096                                  	
 11097                                  	; Adjust for offset to table.
 11098                                  	
 11099 00002643 362B06[4000]            	SUB	AX,[SS:SFTFCB]		; SS override for SftFCB
 11100                                  
 11101 00002648 53                      	push	bx			;bx = FCB type (net/Share or local)
 11102 00002649 B335                    	mov	bl,53
 11103 0000264B B335                    	MOV	BL,SF_ENTRY.size
 11104 0000264D F6F3                    	DIV	BL
 11105 0000264F 884418                  	MOV	[SI+fcb_sfn],AL		; last used SFN
 11106 00002652 5B                      	pop	bx			;restore bx
 11107                                  
 11108                                  SaveNoSFN:
 11109                                  	;mov	ax,[es:di+5]
 11110 00002653 268B4505                	MOV	AX,[ES:DI+SF_ENTRY.sf_flags]
 11111 00002657 243F                    	AND	AL,3Fh			; get real drive
 11112 00002659 08D8                    	OR	AL,BL
 11113                                  	;mov	[si+19h],al
 11114 0000265B 884419                  	MOV	[SI+fcb_l_drive],AL
 11115                                  
 11116 0000265E 36A1[1000]              	MOV	AX,[SS:FCBLRU]		; get lru count
 11117 00002662 40                      	INC	AX
 11118                                  	;mov	[es:di+15h],ax
 11119 00002663 26894515                	MOV	[ES:DI+sf_LRU],AX
 11120 00002667 7506                    	JNZ	short SimpleStuff
 11121                                  	
 11122                                  	; lru flag overflowed.	Run through all FCB sfts and adjust:  
 11123                                  	; LRU < 8000H get set to 0.  Others -= 8000h.  This LRU = 8000h
 11124                                  	
 11125                                  	;mov	bx,15h
 11126 00002669 BB1500                  	MOV	BX,SF_ENTRY.sf_position
 11127 0000266C E80500                  	call	ResetLRU
 11128                                  
 11129                                  	;	Set new LRU to AX
 11130                                  SimpleStuff:
 11131 0000266F 36A3[1000]              	MOV	[SS:FCBLRU],AX
 11132 00002673 C3                      	retn
 11133                                  
 11134                                  ;Break	<ResetLRU - reset overflowed lru counts>
 11135                                  ;----------------------------------------------------------------------------
 11136                                  ;
 11137                                  ;   ResetLRU - during lru updates, we may wrap at 64K.	We must walk the
 11138                                  ;   entire set of SFTs and subtract 8000h from their lru counts and truncate
 11139                                  ;   at 0.
 11140                                  ;
 11141                                  ;   Inputs:	BX is offset into SFT field where lru firld is kept
 11142                                  ;		ES:DI point to SFT currently being updated
 11143                                  ;   Outputs:	All FCB SFTs have their lru fields truncated
 11144                                  ;		AX has 8000h
 11145                                  ;   Registers modified: none
 11146                                  ;
 11147                                  ;----------------------------------------------------------------------------
 11148                                  ;
 11149                                  
 11150                                  ResetLRU:
 11151                                  
 11152                                  	; ResetLRU is only called from fcbio.asm. So SS can be assumed to be 
 11153                                  	; DOSDATA
 11154                                  
 11155 00002674 B80080                  	MOV	AX,8000h
 11156 00002677 06                      	push	es
 11157 00002678 57                      	push	di
 11158 00002679 2EC43E[4000]            	LES	DI,[CS:SFTFCB]		; get pointer to head
 11159                                  	;mov	cx,[es:di+4]
 11160 0000267E 268B4D04                	MOV	CX,[ES:DI+SFT.SFCount]
 11161                                  	;lea	di,[di+6]
 11162 00002682 8D7D06                  	LEA	DI,[DI+SFT.SFTable] 	; point at table
 11163                                  ovScan:
 11164 00002685 262901                  	SUB	[ES:DI+BX],AX		; decrement lru count
 11165 00002688 7703                    	JA	short ovLoop
 11166 0000268A 268901                  	MOV	[ES:DI+BX],AX		; truncate at 0
 11167                                  ovLoop:
 11168                                  	;add	di,53
 11169 0000268D 83C735                  	ADD	DI,SF_ENTRY.size	; advance to next
 11170 00002690 E2F3                    	LOOP	ovScan
 11171 00002692 5F                      	pop	di
 11172 00002693 07                      	pop	es
 11173 00002694 268901                  	MOV	[ES:DI+BX],AX
 11174 00002697 C3                      	retn
 11175                                  
 11176                                  ;IF  0  ; We dont need this routine any more.
 11177                                  
 11178                                  ;Break	<SetOpenAge - update the open age of a SFT>
 11179                                  ;----------------------------------------------------------------------------
 11180                                  ;
 11181                                  ;   SetOpenAge - In order to maintain the first N open files in the FCB cache,
 11182                                  ;   we keep the 'open age' or an LRU count based on opens.  We update the
 11183                                  ;   count here and fill in the appropriate field.
 11184                                  ;
 11185                                  ;   Inputs:	ES:DI point to SFT
 11186                                  ;   Outputs:	ES:DI has the open age field filled in.
 11187                                  ;		If open age has wraparound, we will have subtracted 8000h
 11188                                  ;		    from all open ages.
 11189                                  ;   Registers modified: AX
 11190                                  ;
 11191                                  ;----------------------------------------------------------------------------
 11192                                  ;
 11193                                  
 11194                                  SetOpenAge:
 11195                                  
 11196                                  	; 20/07/2018 - Retro DOS v3.0
 11197                                  	; MSDOS 3.3 - IBMDOS.COM, Offset 2597h 
 11198                                  	; (& MSDOS 6.0, FCBIO.ASM)
 11199                                  
 11200                                  	; SetOpenAge is called from fcbio2.asm. SS can be assumed to be valid.
 11201                                  
 11202 00002698 2EA1[1200]              	MOV	AX,[CS:OpenLRU]	; SS override
 11203 0000269C 40                      	INC	AX
 11204                                  	;mov	[es:di+17h],ax
 11205 0000269D 26894517                	MOV	[ES:DI+sf_OpenAge],AX
 11206 000026A1 7506                    	JNZ	short SetDone
 11207                                  	;mov	bx,17h
 11208 000026A3 BB1700                  	MOV	BX,SF_ENTRY.sf_position+2 ; mov bx,sf_OpenAge
 11209 000026A6 E8CBFF                  	call	ResetLRU
 11210                                  SetDone:
 11211 000026A9 2EA3[1200]              	MOV	[CS:OpenLRU],AX
 11212 000026AD C3                      	retn
 11213                                  
 11214                                  ;ENDIF	; SetOpenAge no longer needed
 11215                                  
 11216                                  
 11217                                  ; 21/07/2018 - Retro DOS v3.0
 11218                                  
 11219                                  ; LRUFCB for MSDOS 3.3 !
 11220                                  
 11221                                  ;Break	<LRUFCB - perform LRU on FCB sfts>
 11222                                  ;----------------------------------------------------------------------------
 11223                                  ;
 11224                                  ;   LRUFCB - find LRU fcb in cache.  Set ThisSFT and return it.  We preserve
 11225                                  ;	the first keepcount sfts if they are network sfts or if sharing is
 11226                                  ;	loaded.  If carry is set then NO BLASTING is NECESSARY.
 11227                                  ;
 11228                                  ;   Inputs:	none
 11229                                  ;   Outputs:	ES:DI point to SFT
 11230                                  ;		ThisSFT points to SFT
 11231                                  ;		SFT is zeroed
 11232                                  ;		Carry set of closes failed
 11233                                  ;   Registers modified: none
 11234                                  ;
 11235                                  ;----------------------------------------------------------------------------
 11236                                  ;
 11237                                  
 11238                                  ; MSDOS 6.0
 11239                                  ;IF 0	; rewritten this routine
 11240                                  
 11241                                  LRUFCB: ; MSDOS 3.3 - IBMDOS.COM (1987) - Offset 25ADh
 11242 000026AE E847EF                  	call	save_world
 11243                                  	
 11244                                  ; Find nth oldest NET/SHARE FCB.  We want to find its age for the second scan
 11245                                  ; to find the lease recently used one that is younger than the open age.  We
 11246                                  ; operate be scanning the list n times finding the least age that is greater
 11247                                  ; or equal to the previous minimum age.
 11248                                  ;
 11249                                  ;   BP is the count of times we need to go through this loop.
 11250                                  ;   AX is the current acceptable minimum age to consider
 11251                                  ;
 11252 000026B1 2E8B2E[4400]            	mov	bp,[CS:KEEPCOUNT]	; k = keepcount;
 11253 000026B6 31C0                    	XOR	AX,AX			; low = 0;
 11254                                  ;
 11255                                  ; If we've scanned the table n times, then we are done.
 11256                                  ;
 11257                                  lru1:
 11258 000026B8 83FD00                  	CMP	bp,0			; while (k--) {
 11259 000026BB 7451                    	JZ	short lru75
 11260 000026BD 4D                      	DEC	bp
 11261                                  ;
 11262                                  ; Set up for scan.
 11263                                  ;
 11264                                  ;   AX is the minimum age for consideration
 11265                                  ;   BX is the minimum age found during the scan
 11266                                  ;   SI is the position of the entry that corresponds to BX
 11267                                  ;
 11268 000026BE BBFFFF                  	MOV	BX,-1			;     min = 0xffff;
 11269 000026C1 89DE                    	MOV	si,BX			;     pos = 0xffff;
 11270 000026C3 2EC43E[4000]            	LES	DI,[CS:SFTFCB]		;     for (CX=FCBCount; CX>0; CX--)
 11271                                  	;mov	cx,[es:di+4]
 11272 000026C8 268B4D04                	MOV	CX,[ES:DI+SFT.SFCount]
 11273                                  	;lea	di,[di+6]
 11274 000026CC 8D7D06                  	LEA	DI,[DI+SFT.SFTable]
 11275                                  ;
 11276                                  ; Innermost loop.  If the current entry is free, then we are done.  Or, if the
 11277                                  ; current entry is busy (indicating a previous aborted allocation), then we
 11278                                  ; are done.  In both cases, we use the found entry.
 11279                                  ;
 11280                                  lru2:
 11281 000026CF 26833D00                	cmp	word [es:di],0
 11282                                  	;cmp	word [es:di+SF_ENTRY.sf_ref_count],0
 11283 000026D3 7406                    	jz	short lru25
 11284                                  	;cmp	word [es:di],-1
 11285                                  	;cmp	word [es:di+SFT_ENTRY.sf_ref_count],sf_busy
 11286 000026D5 26833DFF                	cmp	word [es:di],sf_busy
 11287 000026D9 7504                    	jnz	short lru3
 11288                                  ;
 11289                                  ; The entry is usable without further scan.  Go and use it.
 11290                                  ;
 11291                                  lru25:
 11292 000026DB 89FE                    	MOV	si,DI			;	      pos = i;
 11293 000026DD EB69                    	JMP	short lru11		;	      goto got;
 11294                                  ;
 11295                                  ; See if the entry is for the network or for the sharer.
 11296                                  ;
 11297                                  ;  If for the sharer or network then
 11298                                  ;	if the age < current minimum AND >= allowed minimum then
 11299                                  ;	    this entry becomes current minimum
 11300                                  ;
 11301                                  lru3:
 11302                                  	;test	word [es:di+5],8000h
 11303 000026DF 26F745050080            	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet 
 11304                                  					;	  if (!net[i]
 11305 000026E5 7505                    	JNZ	short lru35
 11306                                  ;if installed
 11307 000026E7 E8374C                  	call	CheckShare		;		&& !sharing)
 11308 000026EA 7410                    	JZ	short lru5		;	  else
 11309                                  ;ENDIF
 11310                                  ;
 11311                                  ; This SFT is for the net or is for the sharer.  See if it less than the
 11312                                  ; current minimum.
 11313                                  ;
 11314                                  lru35:
 11315                                  	;mov	dx,[es:di+17h]
 11316 000026EC 268B5517                	MOV	DX,[ES:DI+sf_OpenAge]
 11317 000026F0 39C2                    	CMP	DX,AX			;	  if (age[i] >= low &&
 11318 000026F2 7208                    	JB	short lru5
 11319 000026F4 39DA                    	CMP	DX,BX
 11320 000026F6 7304                    	JAE	short lru5		;	      age[i] < min) {
 11321                                  ;
 11322                                  ; entry is new minimum.  Remember his age.
 11323                                  ;
 11324 000026F8 89D3                    	mov	bx,DX			;	      min = age[i];
 11325 000026FA 89FE                    	mov	si,di			;	      pos = i;
 11326                                  ;
 11327                                  ; End of loop.	gp back for more
 11328                                  ;
 11329                                  lru5:
 11330                                  	;add	di,53
 11331 000026FC 83C735                  	add	di,SF_ENTRY.size
 11332 000026FF E2CE                    	loop	lru2			;	      }
 11333                                  ;
 11334                                  ; The scan is complete.  If we have successfully found a new minimum (pos != -1)
 11335                                  ; set then threshold value to this new minimum + 1.  Otherwise, the scan is
 11336                                  ; complete.  Go find LRU.
 11337                                  ;
 11338                                  lru6:	
 11339 00002701 83FEFF                  	cmp	si,-1			; position not -1?
 11340 00002704 7408                    	jz	short lru75		; no, done with everything
 11341 00002706 8D4701                  	lea	ax,[bx+1]		; set new threshold age
 11342 00002709 EBAD                    	jmp	short lru1		; go and loop for more
 11343                                  lru65:	
 11344 0000270B F9                      	stc
 11345 0000270C EB70                    	jmp	short LRUDead		;	  return -1;
 11346                                  ;
 11347                                  ; Main loop is done.  We have AX being the age+1 of the nth oldest sharer or
 11348                                  ; network entry.  We now make a second pass through to find the LRU entry
 11349                                  ; that is local-no-share or has age >= AX
 11350                                  ;
 11351                                  lru75:
 11352 0000270E BBFFFF                  	mov	bx,-1			; min = 0xffff;
 11353 00002711 89DE                    	mov	si,bx			; pos = 0xffff;
 11354 00002713 2EC43E[4000]            	LES	DI,[CS:SFTFCB]		; for (CX=FCBCount; CX>0; CX--)
 11355                                  	;mov	cx,[es:di+4]
 11356 00002718 268B4D04                	MOV	CX,[ES:DI+SFT.SFCount]
 11357                                  	;lea	di,[di+6]
 11358 0000271C 8D7D06                  	LEA	DI,[DI+SFT.SFTable]
 11359                                  ;
 11360                                  ; If this is is local-no-share then go check for LRU else if age >= threshold
 11361                                  ; then check for lru.
 11362                                  ;
 11363                                  lru8:
 11364                                  	;test	word [es:di+5],8000h
 11365 0000271F 26F745050080            	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 11366 00002725 7505                    	jnz	short lru85		; is for network, go check age
 11367 00002727 E8F74B                  	call	CheckShare		; sharer here?
 11368 0000272A 7406                    	jz	short lru86		; no, go check lru
 11369                                  ;
 11370                                  ; Network or sharer.  Check age
 11371                                  ;
 11372                                  lru85:
 11373                                  	;cmp	[es:di+17h],ax
 11374 0000272C 26394517                	cmp	[es:di+sf_OpenAge],ax
 11375 00002730 720C                    	jb	short lru9		; age is before threshold, skip it
 11376                                  ;
 11377                                  ; Check LRU
 11378                                  ;
 11379                                  lru86:
 11380                                  	;cmp	[es:di+15h],bx
 11381 00002732 26395D15                	cmp	[es:di+sf_LRU],bx	; is LRU less than current LRU?
 11382 00002736 7306                    	jae	short lru9		; no, skip this
 11383 00002738 89FE                    	mov	si,di			; remember position
 11384                                  	;mov	bx,[es:di+15h]
 11385 0000273A 268B5D15                	mov	bx,[es:di+sf_LRU]	; remember new minimum LRU
 11386                                  ;
 11387                                  ; Done with this entry, go back for more.
 11388                                  ;
 11389                                  lru9:
 11390                                  	;add	di, 53
 11391 0000273E 83C735                  	add	di,SF_ENTRY.size
 11392 00002741 E2DC                    	loop	lru8
 11393                                  ;
 11394                                  ; Scan is complete.  If we found NOTHING that satisfied us then we bomb
 11395                                  ; out.	The conditions here are:
 11396                                  ;
 11397                                  ;   No local-no-shares AND all net/share entries are older than threshold
 11398                                  ;
 11399                                  lru10:
 11400 00002743 83FEFF                  	cmp	si,-1			; if no one f
 11401 00002746 74C3                    	jz	short lru65		;     return -1;
 11402                                  lru11:
 11403 00002748 89F7                    	mov	di,si
 11404 0000274A 2E893E[3605]            	MOV	[CS:THISSFT],DI		; set thissft
 11405 0000274F 2E8C06[3805]            	MOV	[CS:THISSFT+2],ES
 11406                                  ;
 11407                                  ; If we have sharing or thisSFT is a net sft, then close it until ref count
 11408                                  ; is 0.
 11409                                  ;
 11410                                  	;test	word [es:di+5],8000h
 11411 00002754 26F745050080            	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 11412 0000275A 7505                    	JNZ	short LRUClose
 11413                                  ;IF INSTALLED
 11414 0000275C E8C24B                  	call	CheckShare
 11415 0000275F 7418                    	JZ	short LRUDone
 11416                                  ;ENDIF
 11417                                  ;
 11418                                  ; Repeat close until ref count is 0
 11419                                  ;
 11420                                  LRUClose:
 11421 00002761 16                      	push	ss
 11422 00002762 1F                      	pop	ds
 11423 00002763 C43E[3605]              	LES	DI,[THISSFT]
 11424 00002767 26833D00                	cmp     word [es:di],0
 11425                                  	;CMP	word [ES:DI+SFT.sf_ref_count],0 ; is ref count still <> 0?
 11426 0000276B 740C                    	JZ	short LRUDone 		; nope, all done
 11427 0000276D E84E13                  	call	DOS_CLOSE
 11428 00002770 73EF                    	jnc	short LRUClose		; no error => clean up
 11429                                  	;cmp	al,6
 11430 00002772 3C06                    	cmp	al,error_invalid_handle
 11431 00002774 74EB                    	jz	short LRUClose
 11432 00002776 F9                      	stc
 11433 00002777 EB05                    	JMP	short LRUDead
 11434                                  LRUDone:
 11435 00002779 30C0                    	XOR	AL,AL
 11436 0000277B E8E500                  	call	BlastSFT		; fill SFT with 0 (AL), 'C' cleared
 11437                                  
 11438                                  LRUDead:
 11439 0000277E E864EE                  	call	restore_world
 11440 00002781 2EC43E[3605]             	LES     DI,[CS:THISSFT]
 11441 00002786 7302                    	jnc	short LRUFCB_retn
 11442                                  LRUFCB_err:
 11443                                  	; mov	al, 23h	
 11444 00002788 B023                    	MOV	AL,error_FCB_unavailable
 11445                                  LRUFCB_retn:	
 11446                                  	retn:
 11447                                  
 11448                                  ;ENDIF
 11449                                  
 11450                                  FCBRegen:
 11451                                  	; called from SFTFromFCB. SS already DOSDATA
 11452                                  
 11453                                  	; General data filling. Mode is sf_isFCB + open_for_both, date/time 
 11454                                  	; we do not fill, size we do no fill, position we do not fill,
 11455                                  	; bit 14 of flags = TRUE, other bits = FALSE
 11456                                  
 11457                                  	;mov	al,[si+19h]
 11458 0000278A 8A4419                  	MOV	AL,[SI+fcb_l_drive]
 11459                                  
 11460                                  	; We discriminate based on the first two bits in the reserved field.
 11461                                  	
 11462                                  	;test	al,80h
 11463 0000278D A880                    	test	AL,FCBSPECIAL		; check for no sharing test
 11464 0000278F 741C                    	JZ	short RegenNoSharing	; yes, go regen from no sharing
 11465                                  
 11466                                  	;
 11467                                  	; The FCB is for a network or a sharing based system.  At this point 
 11468                                  	; we have already closed the SFT for this guy and reconnection is 
 11469                                  	; impossible.
 11470                                  	;
 11471                                  	; Remember that he may have given us a FCB with bogus information in
 11472                                  	; it. Check to see if sharing is present or if the redir is present.
 11473                                  	; If either is around, presume that we have cycled out the FCB and 
 11474                                  	; give the hard error. Otherwise, just return with carry set.
 11475                                  	;
 11476                                  
 11477 00002791 E88D4B                  	call	CheckShare		; test for sharer
 11478 00002794 7509                    	JNZ	short RegenFail		; yep, fail this.
 11479                                  	;mov	ax,1100h
 11480 00002796 B80011                  	MOV	AX,MultNET<<8		; install check on multnet
 11481 00002799 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - INSTALLATION CHECK
 11482                                  			; Return: AL = 00h  not installed, OK to install
 11483                                  			; 01h  not installed, not OK to install
 11484                                  			; FFh  installed
 11485 0000279B 08C0                    	OR	AL,AL			; is it there?
 11486 0000279D 740C                    	JZ	short RegenDead		; no, just fail the operation
 11487                                  RegenFail:
 11488 0000279F 2EA1[E602]              	MOV     AX,[CS:USER_IN_AX]	; SS override
 11489                                  	;cmp	ah,10h
 11490 000027A3 80FC10                  	cmp	AH,FCB_CLOSE
 11491 000027A6 7403                    	jz	short RegenDead
 11492 000027A8 E8C701                  	call	FCBHardErr		; massive hard error.
 11493                                  RegenDead:
 11494 000027AB F9                      	STC				; carry set
 11495                                  FCBRegen_retn:
 11496 000027AC C3                      	retn
 11497                                  
 11498                                  	;
 11499                                  	; Local FCB without sharing. Check to see if sharing is loaded. If 
 11500                                  	; so fail the operation.
 11501                                  	;
 11502                                  RegenNoSharing:
 11503 000027AD E8714B                  	call	CheckShare		; Sharing around?
 11504 000027B0 75ED                    	JNZ	short RegenFail
 11505                                  	
 11506                                  	; Find an SFT for this guy.
 11507                                  	
 11508                                  	; MSDOS 6.0
 11509                                  	;push	ax
 11510                                  	;mov	al,0			;indicate it is a regen operation
 11511                                  	;call	LRUFCB
 11512                                  	;pop	ax
 11513                                  	;jc	short FCBRegen_retn
 11514                                  
 11515                                  	; MSDOS 3.3
 11516 000027B2 E8F9FE                  	call	LRUFCB
 11517 000027B5 72F5                    	jc	short FCBRegen_retn
 11518                                  
 11519                                  	;mov	word [es:di+2],8002h
 11520 000027B7 26C745020280            	MOV	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB+open_for_both+SHARING_COMPAT
 11521 000027BD 243F                    	AND	AL,3Fh			; get drive number for flags
 11522 000027BF 98                      	CBW
 11523                                  	;or	ax,4000h
 11524 000027C0 0D0040                  	OR	AX,sf_close_nodate	; normal FCB operation
 11525                                  
 11526                                  	;
 11527                                  	; The bits field consists of the upper two bits (dirty and device) 
 11528                                  	; from the SFT and the low 4 bits from the open mode.
 11529                                  	;
 11530                                  
 11531                                  	;mov	cl,[si+1Ah]
 11532 000027C3 8A4C1A                  	MOV	CL,[SI+fcb_nsl_bits]	; stick in dirty bits.
 11533 000027C6 88CD                    	MOV	CH,CL
 11534 000027C8 80E5C0                  	AND	CH,0C0h 		; mask off the dirty/device bits
 11535 000027CB 08E8                    	OR	AL,CH
 11536                                  	;and	cl,0Fh
 11537 000027CD 80E10F                  	AND	CL,access_mask		; get the mode bits
 11538                                  	;mov	[es:di+2],cl
 11539 000027D0 26884D02                	MOV	[ES:DI+SF_ENTRY.sf_mode],CL
 11540                                  	;mov	[es:di+5],ax
 11541 000027D4 26894505                	MOV	[ES:DI+SF_ENTRY.sf_flags],AX ; initial flags
 11542 000027D8 2EA1[E802]              	MOV     AX,[CS:PROC_ID]		; SS override
 11543                                  	;mov	[es:di+31h],ax
 11544 000027DC 26894531                	MOV	[ES:DI+SF_ENTRY.sf_PID],AX
 11545 000027E0 1E                      	push	ds
 11546 000027E1 56                      	push	si
 11547 000027E2 06                      	push	es
 11548 000027E3 57                      	push	di
 11549 000027E4 16                      	push	ss
 11550 000027E5 07                      	pop	es
 11551 000027E6 BF[E604]                	MOV	DI,NAME1		; NAME1 is in DOSDATA
 11552                                  
 11553 000027E9 B90800                  	MOV	CX,8
 11554 000027EC 46                      	INC	SI			; Skip past drive byte to name in FCB
 11555                                  
 11556                                  	; MSDOS 6.0
 11557                                  	;call	RegenCopyName		;copy the name to NAME1
 11558                                  
 11559                                  	; MSDOS 3.3
 11560                                  RegenCopyName:
 11561 000027ED AC                      	lodsb
 11562 000027EE E81B2E                  	call	UCase
 11563 000027F1 AA                      	stosb
 11564 000027F2 E2F9                    	loop	RegenCopyName
 11565                                  
 11566 000027F4 16                      	push	ss	; SS is DOSDATA
 11567 000027F5 1F                      	pop	ds
 11568                                  
 11569                                  	;mov	byte [ATTRIB],16h
 11570 000027F6 C606[0605]16            	MOV	byte [ATTRIB],attr_hidden+attr_system+attr_directory
 11571                                  					; Must set this to something interesting
 11572                                  					; to call DEVNAME.
 11573 000027FB E8E222                  	call	DEVNAME 		; check for device
 11574 000027FE 5E                      	pop	si
 11575 000027FF 07                      	pop	es
 11576 00002800 5E                      	pop	si
 11577 00002801 1F                      	pop	ds
 11578 00002802 7219                    	JC	short RegenFileNoSharing ; not found on device list => file
 11579                                  
 11580                                  	;
 11581                                  	; Device found.  We can ignore disk-specific info
 11582                                  	;
 11583                                  
 11584                                  	;mov	[es:di+5],bh
 11585 00002804 26887D05                	MOV	[ES:DI+SF_ENTRY.sf_flags],BH ; device parms
 11586                                  	;mov	byte [es:di+4],0
 11587 00002808 26C6450400              	MOV	byte [ES:DI+SF_ENTRY.sf_attr],0 ; attribute
 11588                                  					; SS override
 11589 0000280D 2EC536[3205]            	LDS	SI,[CS:DEVPT]		; get device driver
 11590                                  	;mov	[es:di+7],si
 11591 00002812 26897507                	MOV	[ES:DI+SF_ENTRY.sf_devptr],SI
 11592                                  	;mov	[es:di+9],ds
 11593 00002816 268C5D09                	MOV	[ES:DI+SF_ENTRY.sf_devptr+2],DS
 11594 0000281A C3                      	retn				; carry is clear
 11595                                  
 11596                                  RegenDeadJ:
 11597 0000281B EB8E                    	JMP	RegenDead
 11598                                  
 11599                                  	;
 11600                                  	; File found.  Just copy in the remaining pieces.
 11601                                  	;
 11602                                  
 11603                                  RegenFileNoSharing:
 11604                                  	;mov	ax,[es:di+5]
 11605 0000281D 268B4505                	MOV	AX,[ES:DI+SF_ENTRY.sf_flags]
 11606 00002821 83E03F                  	AND	AX,03Fh
 11607 00002824 1E                      	push	ds
 11608 00002825 56                      	push	si
 11609 00002826 E87940                  	call	FIND_DPB
 11610                                  	;mov	[es:di+7],si
 11611 00002829 26897507                	MOV	[ES:DI+SF_ENTRY.sf_devptr],SI
 11612                                  	;mov	[es:di+9],ds
 11613 0000282D 268C5D09                	MOV	[ES:DI+SF_ENTRY.sf_devptr+2],DS
 11614 00002831 5E                      	pop	si
 11615 00002832 1F                      	pop	ds
 11616 00002833 72E6                    	jc	short RegenDeadJ	; if find DPB fails, then drive
 11617                                  					; indicator was bogus
 11618                                  	;mov	ax,[si+1Dh]
 11619 00002835 8B441D                  	MOV	AX,[SI+fcb_nsl_dirsec]
 11620                                  	;mov	[es:di+1Dh],ax
 11621 00002838 2689451D                	MOV	[ES:DI+SF_ENTRY.sf_dirsec],AX
 11622                                  
 11623                                  	;MSDOS6.0
 11624                                  	; SR;
 11625                                  	; Update the higher word of the directory sector from the FCB
 11626                                  	;
 11627                                  
 11628                                  	;MOV	word [ES:DI+SF_ENTRY.sf_dirsec+2],0	;AN000;>32mb
 11629                                  
 11630                                  	; SR;
 11631                                  	; Extract the read-only and archive bits from the top 2 bits of the sector
 11632                                  	; number
 11633                                  	;
 11634                                  
 11635                                  	;mov	al,[si+fcb_sfn]
 11636                                  	;and	al,0C0h		;get the 2 attribute bits
 11637                                  	;mov	ah,al
 11638                                  	;rol	ah,1
 11639                                  	;shr	al,1
 11640                                  	;or	al,ah
 11641                                  	;and	al,03Fh		;mask off unused bits
 11642                                  	;mov	[es:di+SF_ENTRY.sf_attr],al
 11643                                  
 11644                                  	;mov	al,[si+fcb_sfn]
 11645                                  	;and	al,03Fh		;mask off top 2 bits -- attr bits
 11646                                  	;sub	ah,ah
 11647                                  	;mov	[es:di+SF_ENTRY.sf_dirsec+2],ax ;update high word
 11648                                  
 11649                                  	; MSDOS 3.3(& MSDOS 6.0)
 11650                                  	;mov	ax,[si+1Bh]
 11651 0000283C 8B441B                  	MOV	AX,[SI+fcb_nsl_firclus]
 11652                                  	;mov	[es:di+0Bh],ax
 11653 0000283F 2689450B                	MOV	[ES:DI+SF_ENTRY.sf_firclus],AX
 11654                                  	;mov	[es:di+1Bh],ax
 11655 00002843 2689451B                	MOV	[ES:DI+SF_ENTRY.sf_lstclus],AX
 11656                                  	;mov	al,[si+1Fh]
 11657 00002847 8A441F                  	MOV	AL,[SI+fcb_nsl_dirpos]
 11658                                  	;mov  	[es:di+1Fh], al
 11659 0000284A 2688451F                	MOV	[ES:DI+SF_ENTRY.sf_dirpos],AL
 11660                                  	;INC	word [ES:DI+SF_ENTRY.sf_ref_count]
 11661 0000284E 26FF05                  	inc	word [ES:DI]		; Increment reference count.
 11662                                  					; Existing FCB entries would be
 11663                                  					; flushed unnecessarily because of
 11664                                  					; check in CheckFCB of the ref_count.
 11665                                  					; July 22/85 - BAS
 11666                                  	;lea	si,[si+1]
 11667 00002851 8D7401                  	LEA	SI,[SI+SYS_FCB.name]
 11668                                  	;lea	di,[di+20h] ; MSDOS 3.3 
 11669 00002854 8D7D20                  	LEA	DI,[DI+SF_ENTRY.sf_name]
 11670                                  	;mov	cx,11
 11671 00002857 B90B00                  	MOV	CX,SYS_FCB.EXTENT-SYS_FCB.name ; 12-1
 11672                                  	
 11673                                  	; 17/05/2019
 11674                                  	; MSDOS 6.0
 11675                                  	;call	RegenCopyName	;copy name to SFT 
 11676                                  	;
 11677                                  	; MSDOS3.3
 11678                                  RegenCopyName2:
 11679 0000285A AC                      	lodsb
 11680 0000285B E8AE2D                  	call    UCase
 11681 0000285E AA                      	stosb
 11682 0000285F E2F9                    	loop    RegenCopyName2
 11683                                  
 11684 00002861 F8                      	clc
 11685 00002862 C3                      	retn
 11686                                  
 11687                                  ;**	BlastSFT - FIll SFT with Garbage
 11688                                  ;
 11689                                  ;	BlastSFT is used when an SFT is no longer needed; it's called with
 11690                                  ;	various garbage values to put into the SFT.  I don't know why,
 11691                                  ;	presumably to help with debugging (jgl).  We clear the few fields
 11692                                  ;	necessary to show that the SFT is free after filling it.
 11693                                  ;
 11694                                  ;	ENTRY	(es:di) = address of SFT
 11695                                  ;		(al) = fill character
 11696                                  ;	EXIT	(ax) = -1
 11697                                  ;		'C' clear
 11698                                  ;	USES	AX, CX, Flags
 11699                                  
 11700                                  BlastSFT:
 11701 00002863 57                      	push	di
 11702                                  	;mov	cx,53
 11703 00002864 B93500                  	mov	cx,SF_ENTRY.size
 11704 00002867 F3AA                    	rep	stosb
 11705 00002869 5F                      	pop	di
 11706 0000286A 29C0                    	sub	ax,ax	; 0		; clear 'C'-----------------;
 11707 0000286C 268905                  	mov	[es:di],ax
 11708                                  	;mov	[es:di+SFT_ENTRY.sf_ref_count],ax ; set ref count   ;
 11709                                  	;mov	[es:di+15h],ax
 11710 0000286F 26894515                	mov	[es:di+sf_LRU],ax	; set lru		    ;
 11711 00002873 48                      	dec	ax	; -1					    ;
 11712                                  	;mov	[es:di+17h],ax ; 0FFFFh ; -1
 11713 00002874 26894517                	mov	[es:di+sf_OpenAge],ax	; set open age to -1	    ;
 11714                                  BlastSFT_retn:
 11715 00002878 C3                      	retn				; return with 'C' clear     ;
 11716                                  
 11717                                  
 11718                                  ;Break	<CheckFCB - see if the SFT pointed to by the FCB is still OK>
 11719                                  ;----------------------------------------------------------------------------
 11720                                  ;
 11721                                  ;   CheckFCB - examine an FCB and its contents to see if it needs to be
 11722                                  ;   regenerated.
 11723                                  ;
 11724                                  ;   Inputs:	DS:SI point to FCB (not extended)
 11725                                  ;		AL is SFT index
 11726                                  ;   Outputs:	Carry Set - FCB needs to be regened
 11727                                  ;		Carry clear - FCB is OK. ES:DI point to SFT
 11728                                  ;   Registers modified: AX and BX
 11729                                  ;
 11730                                  ;----------------------------------------------------------------------------
 11731                                  ;
 11732                                  
 11733                                  CheckFCB:
 11734                                  		
 11735                                  	; called from $fcb_open and sftfromfcb. SS already set up to DOSDATA
 11736                                  
 11737                                  	; MSDOS6.0
 11738                                  	; SR;
 11739                                  	; We check if the given FCB is for a local file. If so, we return a 
 11740                                  	; bad SFT status forcing the caller to regenerate the SFT.
 11741                                  
 11742                                  	;test	byte [si+fcb_l_drive],FCBNETWORK|FCBSHARE|FCBDEVICE
 11743                                  	;jz	short BadSFT		;Local file, return bad SFT
 11744                                  
 11745                                  	; MSDOS 3.3 (& MSDOS6.0)
 11746 00002879 2EC43E[4000]            	LES     DI,[CS:SFTFCB]		; SS override
 11747                                  	;cmp	[es:di+4],al
 11748 0000287E 26384504                	CMP	[ES:DI+SFT.SFCount],AL
 11749 00002882 7248                    	JC	short BadSFT
 11750 00002884 B335                    	MOV	BL,SF_ENTRY.size
 11751 00002886 F6E3                    	MUL	BL
 11752                                  	;lea	di,[di+6]
 11753 00002888 8D7D06                  	LEA	DI,[DI+SFT.SFTable]
 11754 0000288B 01C7                    	ADD	DI,AX
 11755 0000288D 2EA1[E802]              	MOV     AX,[CS:PROC_ID]		; SS override
 11756                                  	;cmp	[es:di+31h],ax
 11757 00002891 26394531                	CMP	[ES:DI+SF_ENTRY.sf_PID],AX
 11758 00002895 7535                    	JNZ	short BadSFT		; must match process
 11759 00002897 26833D00                	cmp	word [es:di],0
 11760                                  	;CMP	word [ES:DI+SF_ENTRY.sf_ref_count],0
 11761 0000289B 742F                    	JZ	short BadSFT		; must also be in use
 11762                                  	;mov	al,[si+19h]
 11763 0000289D 8A4419                  	MOV	AL,[SI+fcb_l_drive]
 11764                                  	;test	al,80h
 11765 000028A0 A880                    	test	AL,FCBSPECIAL		; a special FCB?
 11766 000028A2 7443                    	JZ	short CheckNoShare	; No. try local or device
 11767                                  
 11768                                  	; Since we are a special FCB, try NOT to use a bogus test instruction.
 11769                                  	; FCBSHARE is a superset of FCBNETWORK.
 11770                                  
 11771 000028A4 50                      	PUSH	AX
 11772                                  	;and	al,0C0h
 11773 000028A5 24C0                    	AND	AL,FCBMASK
 11774                                  	;cmp	al,0C0h
 11775 000028A7 3CC0                    	CMP	AL,FCBSHARE		; net FCB?
 11776 000028A9 58                      	POP	AX
 11777 000028AA 7522                    	JNZ	short CheckNet		; yes
 11778                                  ;
 11779                                  ;----- In share support -----
 11780                                  ;
 11781                                  	;call	far [cs:jShare+(11*4)]
 11782 000028AC 36FF1E[8800]            	Call    far [ss:JShare+(11*4)] ; 11 = ShChk ; SS Override
 11783 000028B1 7219                    	JC	short BadSFT
 11784 000028B3 EB0A                    	JMP	SHORT CheckD
 11785                                  ;
 11786                                  ;----- End in share support -----
 11787                                  ;
 11788                                  CheckFirClus:
 11789 000028B5 263B5D0B                	cmp     bx,[es:di+0Bh]
 11790 000028B9 263B5D0B                	CMP	BX,[ES:DI+SF_ENTRY.sf_firclus]
 11791 000028BD 750D                    	JNZ	short BadSFT
 11792                                  CheckD: 
 11793 000028BF 243F                    	AND	AL,3Fh
 11794                                  	;mov	ah,[es:di+5]
 11795 000028C1 268A6505                	MOV	AH,[ES:DI+SF_ENTRY.sf_flags]
 11796 000028C5 80E43F                  	AND	AH,3Fh
 11797 000028C8 38C4                    	CMP	AH,AL
 11798 000028CA 74AC                    	jz	short BlastSFT_retn	; carry is clear
 11799                                  BadSFT: 
 11800 000028CC F9                      	STC
 11801 000028CD C3                      	retn				; carry is clear
 11802                                  CheckNet:
 11803                                  ;
 11804                                  ;----- In net support -----
 11805                                  ;
 11806                                  	; MSDOS 6.0
 11807                                  	;MOV	AX,[SI+fcb_netID]	;AN000;IFS.DOS 4.00
 11808                                  	;CMP	AX,[ES:DI+sf_serial_ID]	;AN000;IFS.DOS 4.00
 11809                                  	;JNZ	short BadSFT
 11810                                  
 11811                                  	; MSDOS 3.3
 11812                                  	;mov	ax,[si+1Ah]
 11813 000028CE 8B441A                  	mov	ax,[si+fcb_net_handle]
 11814                                  	;cmp	ax,[es:di+1Dh]
 11815 000028D1 263B451D                	cmp	ax,[ES:DI+SF_ENTRY.sf_dirsec]
 11816 000028D5 75F5                    	jnz	short BadSFT
 11817                                  	;cmp	ax,[es:di+19h]
 11818 000028D7 263B4519                	cmp	ax,[ES:DI+sf_netid]
 11819 000028DB 75EF                    	jnz     short BadSFT
 11820                                  	;mov	ax,[si+1Eh]
 11821 000028DD 8B441E                  	mov	ax,[si+fcb_l_attr]
 11822                                  	;cmp	ax,[es:di+1Bh]
 11823 000028E0 263B451B                	cmp	ax,[es:di+SF_ENTRY.sf_lstclus]
 11824 000028E4 75E6                    	jnz     short BadSFT
 11825                                  ;
 11826                                  ;----- END In net support -----
 11827                                  ;
 11828                                  CheckNet_retn:
 11829 000028E6 C3                      	retn
 11830                                  
 11831                                  CheckNoShare:
 11832                                  	;test	al,40h
 11833 000028E7 A840                    	test	AL,FCBDEVICE		; Device?
 11834 000028E9 753F                    	JNZ	short CheckNoShareDev 	; Yes
 11835                                  
 11836                                  	; MSDOS6.0
 11837                                  	; SR;
 11838                                  	; The code below to match a local FCB with its SFT can no longer be
 11839                                  	; used. We just return a no-match status. This check is done right
 11840                                  	; at the top.
 11841                                  	;
 11842                                  
 11843                                  	; MSDOS 3.3 - IBMDOS.COM - Offset 27EFh
 11844                                  	;mov	bx,[si+1Dh]
 11845 000028EB 8B5C1D                  	MOV	BX,[SI+fcb_nsl_dirsec]
 11846                                  	;cmp	bx,[es:di+1Dh]
 11847 000028EE 263B5D1D                	cmp	bx,[ES:DI+SF_ENTRY.sf_dirsec]
 11848 000028F2 75D8                    	jnz	short BadSFT
 11849                                  	;mov	bl,[si+1Fh]
 11850 000028F4 8A5C1F                  	MOV	bl,[SI+fcb_nsl_dirpos]
 11851                                  	;cmp	bl,[es:di+1Fh]
 11852 000028F7 263A5D1F                	cmp	bl,[ES:DI+SF_ENTRY.sf_dirpos]
 11853 000028FB 75CF                    	jnz     short BadSFT
 11854                                  	;mov	bl,[si+1Ah]
 11855 000028FD 8A5C1A                  	MOV	bl,[SI+fcb_nsl_bits]
 11856                                  	;mov	bh,[es:di+5]
 11857 00002900 268A7D05                	MOV	bh,[ES:DI+SF_ENTRY.sf_flags]
 11858 00002904 30DF                    	xor     bh,bl
 11859 00002906 80E7C0                  	and     bh,0C0h
 11860 00002909 75C1                    	jnz     short BadSFT
 11861                                  	;xor	bl,[es:di+2]
 11862 0000290B 26325D02                	xor	bl,[ES:DI+SF_ENTRY.sf_mode]
 11863 0000290F 80E30F                  	and     bl,0Fh
 11864 00002912 75B8                    	jnz     short BadSFT
 11865 00002914 57                      	push    di
 11866 00002915 56                      	push    si
 11867                                  	;lea	di,[di+20h]  ; MSDOS 3.3
 11868 00002916 8D7D20                  	LEA	DI,[DI+SF_ENTRY.sf_name]
 11869                                  	;lea	si,[si+1]
 11870 00002919 8D7401                  	LEA	SI,[SI+SYS_FCB.name]
 11871                                  	;mov	cx,11
 11872 0000291C B90B00                  	MOV	CX,SYS_FCB.EXTENT-SYS_FCB.name ; 12-1
 11873 0000291F F3A6                    	repe	cmpsb
 11874 00002921 5E                      	pop     si
 11875 00002922 5F                      	pop     di
 11876 00002923 75A7                    	jnz     short BadSFT
 11877                                  	;mov	bx,[si+1Bh]
 11878 00002925 8B5C1B                  	MOV	bX,[SI+fcb_nsl_firclus]
 11879 00002928 EB8B                    	jmp     short CheckFirClus
 11880                                  
 11881                                  CheckNoShareDev:
 11882                                  	;mov	bx,[si+1Ah]
 11883 0000292A 8B5C1A                  	MOV	BX,[SI+fcb_nsld_drvptr]
 11884                                  	;cmp	bx,[es:di+7]
 11885 0000292D 263B5D07                	CMP	BX,[ES:DI+SF_ENTRY.sf_devptr]
 11886 00002931 7599                    	JNZ	short BadSFT
 11887                                  	;mov	bx,[si+1Ch]
 11888 00002933 8B5C1C                  	MOV	BX,[SI+fcb_nsld_drvptr+2]
 11889                                  	;cmp	bx,[es:di+9]
 11890 00002936 263B5D09                	CMP	BX,[ES:DI+SF_ENTRY.sf_devptr+2]
 11891 0000293A 7590                    	JNZ	short BadSFT
 11892 0000293C EB81                    	JMP	CheckD
 11893                                  
 11894                                  ;Break	<SFTFromFCB - take a FCB and obtain a SFT from it>
 11895                                  ;----------------------------------------------------------------------------
 11896                                  ;
 11897                                  ;   SFTFromFCB - the workhorse of this compatability crap.  Check to see if
 11898                                  ;	the SFT for the FCB is Good.  If so, make ThisSFT point to it.	If not
 11899                                  ;	good, get one from the cache and regenerate it.  Overlay the LRU field
 11900                                  ;	with PID
 11901                                  ;
 11902                                  ;   Inputs:	DS:SI point to FCB
 11903                                  ;   Outputs:	ThisSFT point to appropriate SFT
 11904                                  ;		Carry clear -> OK ES:DI -> SFT
 11905                                  ;		Carry set -> error in ax
 11906                                  ;   Registers modified: ES,DI, AX
 11907                                  ;
 11908                                  ;----------------------------------------------------------------------------
 11909                                  
 11910                                  SFTFromFCB:
 11911                                  
 11912                                  	; called from fcbio and $fcb_close. SS already set up to DOSDATA
 11913                                  
 11914 0000293E 50                      	push	ax
 11915 0000293F 53                      	push	bx
 11916                                  	;mov	al,[si+18h]
 11917 00002940 8A4418                  	MOV	AL,[SI+fcb_sfn] 	; set SFN for check
 11918 00002943 E833FF                  	call	CheckFCB
 11919 00002946 5B                      	pop	bx
 11920 00002947 58                      	pop	ax
 11921 00002948 2E893E[3605]            	MOV	[CS:THISSFT],DI		; SS override
 11922 0000294D 2E8C06[3805]            	MOV	[CS:THISSFT+2],ES
 11923 00002952 730F                    	JNC	short Set_SFT		; no problems, just set thissft
 11924 00002954 E8A1EC                  	call	save_world
 11925 00002957 E830FE                  	call	FCBRegen
 11926 0000295A E888EC                  	call	restore_world		; use macro restore world
 11927 0000295D 2EA1[D202]              	MOV     AX,[CS:EXTERR]		; SS override
 11928 00002961 7283                    	jc	short CheckNet_retn
 11929                                  
 11930                                  Set_SFT: 
 11931 00002963 2EC43E[3605]            	LES     DI,[CS:THISSFT]		; SS override for THISSFT & PROC_ID
 11932 00002968 2EFF36[E802]            	PUSH    word [CS:PROC_ID]	; set process id
 11933                                  	;pop	word [es:di+31h]
 11934 0000296D 268F4531                	POP     word [ES:DI+SF_ENTRY.sf_PID]
 11935 00002971 C3                      	retn				; carry is clear
 11936                                  
 11937                                  ;Break	<FCBHardErr - generate INT 24 for hard errors on FCBS>
 11938                                  ;----------------------------------------------------------------------------
 11939                                  ;
 11940                                  ;   FCBHardErr - signal to a user app that he is trying to use an
 11941                                  ;	unavailable FCB.
 11942                                  ;
 11943                                  ;   Inputs:	none.
 11944                                  ;   Outputs:	none.
 11945                                  ;   Registers modified: all
 11946                                  ;
 11947                                  ;----------------------------------------------------------------------------
 11948                                  ;
 11949                                  
 11950                                  FCBHardErr:
 11951                                  	;mov	ax,23h
 11952 00002972 B82300                  	MOV	AX,error_FCB_unavailable
 11953                                  	;mov	byte [cs:ALLOWED],8
 11954 00002975 2EC606[F702]08          	MOV	byte [CS:ALLOWED],Allowed_FAIL
 11955 0000297B 2EC42E[2405]            	LES	BP,[CS:THISDPB]
 11956 00002980 BF0100                  	MOV	DI,1			; Fake some registers
 11957 00002983 89F9                    	MOV	CX,DI
 11958                                  	;mov	dx,[es:bp+0Bh]
 11959 00002985 268B560B                	MOV	DX,[ES:BP+DPB.FIRST_SECTOR]
 11960 00002989 E8BC2E                  	call	HARDERR
 11961 0000298C F9                      	STC
 11962 0000298D C3                      	retn
 11963                                  
 11964                                  ;============================================================================
 11965                                  ; FCBIO2.ASM, MSDOS 6.0, 1991
 11966                                  ;============================================================================
 11967                                  ; 21/07/2018 - Retro DOS v3.0
 11968                                  
 11969                                  ;**	FCBIO2.ASM - Ancient 1.0 1.1 FCB system calls
 11970                                  ;
 11971                                  ;	GetRR
 11972                                  ;	GetExtent
 11973                                  ;	SetExtent
 11974                                  ;	GetExtended
 11975                                  ;	GetRecSize
 11976                                  ;	FCBIO
 11977                                  ;	$FCB_OPEN
 11978                                  ;	$FCB_CREATE
 11979                                  ;	$FCB_RANDOM_WRITE_BLOCK
 11980                                  ;	$FCB_RANDOM_READ_BLOCK
 11981                                  ;	$FCB_SEQ_READ
 11982                                  ;	$FCB_SEQ_WRITE
 11983                                  ;	$FCB_RANDOM_READ
 11984                                  ;	$FCB_RANDOM_WRITE
 11985                                  ;
 11986                                  ;	Revision history:
 11987                                  ;
 11988                                  ;		Created: ARR 4 April 1983
 11989                                  ;			 MZ  6 June  1983 completion of functions
 11990                                  ;			 MZ 15 Dec   1983 Brain damaged programs close FCBs multiple
 11991                                  ;				  times.  Change so successive closes work by
 11992                                  ;				  always returning OK.	Also, detect I/O to
 11993                                  ;				  already closed FCB and return EOF.
 11994                                  ;		 MZ 16 Jan   1984 More braindamage.  Need to separate info
 11995                                  ;				  out of sft into FCB for reconnection
 11996                                  ;
 11997                                  ;	    A000   version 4.00	Jan. 1988
 11998                                  
 11999                                  ; Defintions for FCBOp flags
 12000                                  
 12001                                  RANDOM	equ 2				; random operation
 12002                                  FCBREAD equ 4				; doing a read
 12003                                  BLOCK	equ 8				; doing a block I/O
 12004                                  
 12005                                  ;Break <GetRR - return the random record field in DX:AX>
 12006                                  ;---------------------------------------------------------------------------
 12007                                  ;
 12008                                  ;   GetRR - correctly load DX:AX with the random record field (3 or 4 bytes)
 12009                                  ;	from the FCB pointed to by DS:SI
 12010                                  ;
 12011                                  ;   Inputs:	DS:SI point to an FCB
 12012                                  ;		BX has record size
 12013                                  ;   Outputs:	DX:AX contain the contents of the random record field
 12014                                  ;   Registers modified: none
 12015                                  ;---------------------------------------------------------------------------
 12016                                  
 12017                                  GetRR:
 12018                                  	;mov	ax,[si+21h]
 12019 0000298E 8B4421                  	MOV	AX,[SI+SYS_FCB.RR]	; get low order part
 12020                                  	;mov	dx,[si+23h]
 12021 00002991 8B5423                  	MOV	DX,[SI+SYS_FCB.RR+2]	; get high order part
 12022 00002994 83FB40                  	CMP	BX,64			; ignore MSB of RR if recsiz > 64
 12023 00002997 7202                    	JB	short GetRRBye
 12024 00002999 30F6                    	XOR	DH,DH
 12025                                  GetRRBye:
 12026 0000299B C3                      	retn
 12027                                  
 12028                                  ;Break <GetExtent - retrieve next location for sequential IO>
 12029                                  ;---------------------------------------------------------------------------
 12030                                  ;
 12031                                  ;   GetExtent - Construct the next record to perform I/O from the EXTENT and
 12032                                  ;	NR fields in the FCB.
 12033                                  ;
 12034                                  ;   Inputs:	DS:SI - point to FCB
 12035                                  ;   Outputs:	DX:AX contain the contents of the random record field
 12036                                  ;   Registers modified: none
 12037                                  ;---------------------------------------------------------------------------
 12038                                  
 12039                                  GetExtent:
 12040                                  	;mov	al,[si+20h]
 12041 0000299C 8A4420                  	MOV	AL,[SI+SYS_FCB.NR]	; get low order piece
 12042                                  	;mov	dx,[si+0Ch]
 12043 0000299F 8B540C                  	MOV	DX,[SI+SYS_FCB.EXTENT]	; get high order piece
 12044 000029A2 D0E0                    	SHL	AL,1
 12045 000029A4 D1EA                    	SHR	DX,1
 12046 000029A6 D0D8                    	RCR	AL,1	; move low order bit of DL to high order of AH
 12047 000029A8 88D4                    	MOV	AH,DL
 12048 000029AA 88F2                    	MOV	DL,DH
 12049 000029AC 30F6                    	XOR	DH,DH
 12050 000029AE C3                      	retn
 12051                                  
 12052                                  ;Break <SetExtent - update the extent/NR field>
 12053                                  ;---------------------------------------------------------------------------
 12054                                  ;
 12055                                  ;   SetExtent - change the position of an FCB by filling in the extent/NR
 12056                                  ;	fields
 12057                                  ;
 12058                                  ;   Inputs:	DS:SI point to FCB
 12059                                  ;		DX:AX is a record location in file
 12060                                  ;   Outputs:	Extent/NR fields are filled in
 12061                                  ;   Registers modified: CX
 12062                                  ;---------------------------------------------------------------------------
 12063                                  
 12064                                  SetExtent:
 12065 000029AF 50                      	push	ax
 12066 000029B0 52                      	push	dx
 12067 000029B1 89C1                    	MOV	CX,AX
 12068 000029B3 247F                    	AND	AL,7FH			; next rec field
 12069                                  	;mov	[si+20h],al
 12070 000029B5 884420                  	MOV	[SI+SYS_FCB.NR],AL
 12071 000029B8 80E180                  	AND	CL,80H			; save upper bit
 12072 000029BB D1E1                    	SHL	CX,1
 12073 000029BD D1D2                    	RCL	DX,1			; move high bit of CX to low bit of DX
 12074 000029BF 88E8                    	MOV	AL,CH
 12075 000029C1 88D4                    	MOV	AH,DL
 12076                                  	;mov	[si+0Ch], ax
 12077 000029C3 89440C                  	MOV	[SI+SYS_FCB.EXTENT],AX	; all done
 12078 000029C6 5A                      	pop	dx
 12079 000029C7 58                      	pop	ax
 12080 000029C8 C3                      	retn
 12081                                  
 12082                                  ;Break <GetExtended - find FCB in potential extended fcb>
 12083                                  ;---------------------------------------------------------------------------
 12084                                  ;
 12085                                  ;   GetExtended - Make DS:SI point to FCB from DS:DX
 12086                                  ;
 12087                                  ;   Inputs:	DS:DX point to a possible extended FCB
 12088                                  ;   Outputs:	DS:SI point to the FCB part
 12089                                  ;		zeroflag set if not extended fcb
 12090                                  ;   Registers modified: SI
 12091                                  ;---------------------------------------------------------------------------
 12092                                  
 12093                                  GetExtended:
 12094 000029C9 89D6                    	MOV	SI,DX			; point to Something
 12095 000029CB 803CFF                  	CMP	BYTE [SI],-1		; look for extention
 12096 000029CE 7503                    	JNZ	short GetBye		; not there
 12097 000029D0 83C607                  	ADD	SI,7			; point to FCB
 12098                                  GetBye:
 12099 000029D3 39D6                    	CMP	SI,DX			; set condition codes
 12100                                  getextd_retn:
 12101 000029D5 C3                      	retn
 12102                                  
 12103                                  ;Break <GetRecSize - return in BX the FCB record size>
 12104                                  ;---------------------------------------------------------------------------
 12105                                  ;
 12106                                  ;   GetRecSize - return in BX the record size from the FCB at DS:SI
 12107                                  ;
 12108                                  ;   Inputs:	DS:SI point to a non-extended FCB
 12109                                  ;   Outputs:	BX contains the record size
 12110                                  ;   Registers modified: None
 12111                                  ;---------------------------------------------------------------------------
 12112                                  
 12113                                  	; 22/01/2024
 12114                                  GetRecSize:
 12115                                  	;mov	bx,[si+0Eh]
 12116 000029D6 8B5C0E                  	MOV	BX,[SI+SYS_FCB.RECSIZ]	; get his record size
 12117 000029D9 09DB                    	OR	BX,BX			; is it nul?
 12118                                  	;jz	short getextd_retn
 12119                                  	; 22/01/2024 (BugFix)
 12120 000029DB 75F8                    	jnz	short getextd_retn
 12121                                  	;MOV	BX,128			; use default size
 12122 000029DD B380                    	mov	bl,128
 12123                                  	;mov	[si+0Eh],bx
 12124 000029DF 895C0E                  	MOV	[SI+SYS_FCB.RECSIZ],BX	; stuff it back
 12125 000029E2 C3                      	retn
 12126                                  
 12127                                  ;BREAK <FCBIO - do internal FCB I/O>
 12128                                  ;---------------------------------------------------------------------------
 12129                                  ;
 12130                                  ;   FCBIO - look at FCBOP and merge all FCB operations into a single routine.
 12131                                  ;
 12132                                  ;   Inputs:	FCBOP flags which operations need to be performed
 12133                                  ;		DS:DX point to FCB
 12134                                  ;		CX may have count of number of records to xfer
 12135                                  ;   Outputs:	AL has error code
 12136                                  ;   Registers modified: all
 12137                                  ;---------------------------------------------------------------------------
 12138                                  
 12139                                  FCBIO:
 12140                                  
 12141                                  FEOF	EQU	1
 12142                                  FTRIM	EQU	2
 12143                                  
 12144                                  %define	FCBErr	byte [bp-1]  ; byte	
 12145                                  %define	cRec	word [bp-3]  ; word	
 12146                                  ;%define RecPos	word [bp-7]  ; dword
 12147                                  %define RecPosL	word [bp-7]  ; word
 12148                                  %define RecPosH	word [bp-5]  ; word
 12149                                  %define	RecSize	word [bp-9]  ; word
 12150                                  ;%define bPos	word [bp-13] ; dword
 12151                                  %define bPosL	word [bp-13] ; word
 12152                                  %define bPosH	word [bp-11] ; word
 12153                                  %define cByte	word [bp-15] ; word	
 12154                                  %define cResult word [bp-17] ; word	
 12155                                  %define	cRecRes	word [bp-19] ; word
 12156                                  %define	FCBOp	byte [bp-20] ; byte
 12157                                  
 12158                                  	;Enter
 12159                                  
 12160 000029E3 55                      	push	bp
 12161 000029E4 89E5                    	mov	bp,sp
 12162 000029E6 83EC14                  	sub	sp,20
 12163                                  	;mov	[bp-20],al
 12164 000029E9 8846EC                  	MOV	FCBOp,AL
 12165                                  	;mov	byte [bp-1],0
 12166 000029EC C646FF00                	MOV	FCBErr,0		;   FCBErr = 0;
 12167 000029F0 E8D6FF                  	call	GetExtended		;   FCB = GetExtended ();
 12168                                  	;test	byte [bp-20],8
 12169 000029F3 F646EC08                	TEST	FCBOp,BLOCK		;   if ((OP&BLOCK) == 0)
 12170 000029F7 7503                    	JNZ	short GetPos
 12171 000029F9 B90100                  	MOV	CX,1			;	cRec = 1;
 12172                                  GetPos:
 12173                                  	;mov	[bp-3],cx
 12174 000029FC 894EFD                  	MOV	cRec,CX 		;*Tail coalesce
 12175 000029FF E89AFF                  	call	GetExtent		;   RecPos = GetExtent ();
 12176 00002A02 E8D1FF                  	call	GetRecSize		;   RecSize = GetRecSize ();
 12177                                  	;mov	[bp-9],bx
 12178 00002A05 895EF7                  	MOV	RecSize,BX
 12179                                  	;test	byte [bp-20],2
 12180 00002A08 F646EC02                	TEST	FCBOp,RANDOM		;   if ((OP&RANDOM) <> 0)
 12181 00002A0C 7403                    	JZ	short GetRec
 12182 00002A0E E87DFF                  	call	GetRR			;	RecPos = GetRR ();
 12183                                  GetRec:
 12184                                  	;mov	[bp-7],ax
 12185 00002A11 8946F9                  	MOV	RecPosL,AX		;*Tail coalesce
 12186                                  	;mov	[bp-5],dx
 12187 00002A14 8956FB                  	MOV	RecPosH,DX
 12188 00002A17 E895FF                  	call	SetExtent		;   SetExtent (RecPos);
 12189                                  	;mov	ax,[bp-5]
 12190 00002A1A 8B46FB                  	MOV	AX,RecPosH		;   bPos = RecPos * RecSize;
 12191 00002A1D F7E3                    	MUL	BX
 12192 00002A1F 89C7                    	MOV	DI,AX
 12193                                  	;mov	ax,[bp-7]
 12194 00002A21 8B46F9                  	MOV	AX,RecPosL
 12195 00002A24 F7E3                    	MUL	BX
 12196 00002A26 01FA                    	ADD	DX,DI
 12197                                  	;mov	[bp-13],ax
 12198 00002A28 8946F3                  	MOV	bPosL,AX
 12199                                  	;mov	[bp-11],dx
 12200 00002A2B 8956F5                  	MOV	bPosH,DX
 12201                                  	;mov	ax,[bp-3]
 12202 00002A2E 8B46FD                  	MOV	AX,cRec 		;   cByte = cRec * RecSize;
 12203 00002A31 F7E3                    	MUL	BX
 12204                                  	;mov	[bp-15],ax
 12205 00002A33 8946F1                  	MOV	cByte,AX
 12206                                  
 12207                                  ;hkn; 	SS override
 12208 00002A36 360306[DA02]            	ADD	AX,[SS:DMAADD]		;   if (cByte+DMA > 64K) {
 12209 00002A3B 83D200                  	ADC	DX,0
 12210 00002A3E 7419                    	JZ	short DoOper
 12211                                  	;mov	byte [bp-1],2
 12212 00002A40 C646FF02                	MOV	FCBErr,FTRIM		;	FCBErr = FTRIM;
 12213                                  
 12214                                  ;hkn; 	SS override
 12215 00002A44 36A1[DA02]              	MOV	AX,[SS:DMAADD]		;	cRec = (64K-DMA)/RecSize;
 12216 00002A48 F7D8                    	NEG	AX
 12217 00002A4A 7501                    	JNZ	short DoDiv
 12218 00002A4C 48                      	DEC	AX
 12219                                  DoDiv:
 12220 00002A4D 31D2                    	XOR	DX,DX
 12221 00002A4F F7F3                    	DIV	BX
 12222                                  	;mov	[bp-3],ax
 12223 00002A51 8946FD                  	MOV	cRec,AX
 12224 00002A54 F7E3                    	MUL	BX			;	cByte = cRec * RecSize;
 12225                                  	;mov	[bp-15],ax
 12226 00002A56 8946F1                  	MOV	cByte,AX		;	}
 12227                                  DoOper:
 12228 00002A59 31DB                    	XOR	BX,BX
 12229                                  	;mov	[bp-17],bx
 12230 00002A5B 895EEF                  	MOV	cResult,BX		;   cResult = 0;
 12231                                  	;cmp	[bp-15],bx
 12232 00002A5E 395EF1                  	CMP	cByte,BX		;   if (cByte <> 0 ||
 12233 00002A61 7506                    	JNZ	short DoGetExt
 12234                                  	;test	byte [bp-1],2
 12235 00002A63 F646FF02                	TEST	FCBErr,FTRIM		;	(FCBErr&FTRIM) == 0) {
 12236                                  	;JZ	short DoGetExt
 12237                                  	;JMP	short SkipOp
 12238 00002A67 7576                    	jnz	short SkipOp
 12239                                  DoGetExt:
 12240 00002A69 E8D2FE                  	call	SFTFromFCB		;	if (!SFTFromFCB (SFT,FCB))
 12241 00002A6C 730F                    	JNC	short ContinueOp
 12242                                  FCBDeath:
 12243 00002A6E E8AEEC                  	call	FCB_RET_ERR		; signal error, map for extended
 12244                                  	;mov	word [bp-19],0
 12245 00002A71 C746ED0000              	MOV	cRecRes,0		; no bytes transferred
 12246                                  	;mov	byte [bp-1],1
 12247 00002A76 C646FF01                	MOV	FCBErr,FEOF		;	    return FTRIM;
 12248 00002A7A E9F000                  	JMP	FCBSave 		; bam!
 12249                                  ContinueOp:
 12250                                  	;mov	di,offset DOS_READ
 12251                                  	;test	byte [bp-14h],4
 12252                                  	;jnz	short DoContext
 12253                                  	;mov	di,DOS_WRITE
 12254                                  
 12255                                  	;mov	ax,[si+10h]
 12256 00002A7D 8B4410                  	MOV	AX,[SI+SYS_FCB.FILSIZ]
 12257                                  	;mov	[es:di+11h],ax
 12258 00002A80 26894511                	MOV	[ES:DI+SF_ENTRY.sf_size],AX
 12259                                  	;mov	ax,[si+12h]
 12260 00002A84 8B4412                  	MOV	AX,[SI+SYS_FCB.FILSIZ+2]
 12261                                  	;mov	[es:di+13h],ax
 12262 00002A87 26894513                	MOV	[ES:DI+SF_ENTRY.sf_size+2],AX
 12263                                  	;mov	ax,[bp-13]
 12264 00002A8B 8B46F3                  	MOV	AX,bPosL
 12265                                  	;mov	dx,[bp-11]
 12266 00002A8E 8B56F5                  	MOV	DX,bPosH
 12267                                  	;mov	[es:di+15h],ax
 12268 00002A91 26894515                	MOV	[ES:DI+SF_ENTRY.sf_position],AX
 12269                                  	;xchg	dx,[es:di+17h]
 12270 00002A95 26875517                	XCHG	[ES:DI+SF_ENTRY.sf_position+2],DX
 12271 00002A99 52                      	PUSH	DX			; save away Open age.
 12272                                  	;mov	cx,[bp-15]
 12273 00002A9A 8B4EF1                  	MOV	CX,cByte		;	cResult =
 12274                                  
 12275                                  ;hkn; DOS_Read is in DOSCODE
 12276 00002A9D BF[003E]                	MOV	DI,DOS_READ		;	    *(OP&FCBRead ? DOS_Read
 12277                                  	;test	byte [bp-20],4
 12278 00002AA0 F646EC04                	TEST	FCBOp,FCBREAD		;		 : DOS_Write)(cRec);
 12279 00002AA4 7503                    	JNZ	short DoContext
 12280                                  
 12281                                  ;hkn; DOS_Write is in DOSCODE
 12282 00002AA6 BF[813F]                	MOV	DI,DOS_WRITE
 12283                                  DoContext:
 12284 00002AA9 55                      	push	bp
 12285 00002AAA 1E                      	push	ds
 12286 00002AAB 56                      	push	si
 12287                                  
 12288                                  ;hkn; SS is DOSDATA
 12289 00002AAC 16                      	push	ss
 12290 00002AAD 1F                      	pop	ds
 12291                                  
 12292                                  ;; Fix for disk full
 12293 00002AAE FFD7                    	CALL	DI
 12294                                  	
 12295 00002AB0 5E                      	pop	si
 12296 00002AB1 1F                      	pop	ds
 12297 00002AB2 5D                      	pop	bp
 12298 00002AB3 72B9                    	JC	short FCBDeath
 12299                                  	
 12300 00002AB5 36803E[8C0F]00          	CMP	BYTE [SS:DISK_FULL],0	; treat disk full as error
 12301 00002ABB 740A                    	JZ	short NODSKFULL
 12302 00002ABD 36C606[8C0F]00          	MOV	BYTE [SS:DISK_FULL],0	; clear the flag
 12303                                  	;mov	byte [bp-1],1 
 12304 00002AC3 C646FF01                	MOV	FCBErr,FEOF		; set disk full flag
 12305                                  NODSKFULL:
 12306                                  ;; Fix for disk full
 12307                                  	;mov	[bp-17],cx
 12308 00002AC7 894EEF                  	MOV	cResult,CX
 12309 00002ACA E804FB                  	call	SaveFCBInfo		;	SaveFCBInfo (FCB);
 12310                                  	;pop	word [es:di+17h]	
 12311 00002ACD 268F4517                	POP	WORD [ES:DI+SF_ENTRY.sf_position+2] ; restore open age
 12312                                  			       ; (sf_OpenAge = SF_ENTRY.sf_position+2)			
 12313                                  	;mov	ax,[es:di+11h]
 12314 00002AD1 268B4511                	MOV	AX,[ES:DI+SF_ENTRY.sf_size]
 12315                                  	;mov	[si+10h],ax
 12316 00002AD5 894410                  	MOV	[SI+SYS_FCB.FILSIZ],AX
 12317                                  	;mov	ax,[es:di+13h]
 12318 00002AD8 268B4513                	MOV	AX,[ES:DI+SF_ENTRY.sf_size+2]
 12319                                  	;mov	[si+12h],ax
 12320 00002ADC 894412                  	MOV	[SI+SYS_FCB.FILSIZ+2],AX
 12321                                  					;	}
 12322                                  SkipOp:
 12323                                  	;mov	ax,[bp-17]
 12324 00002ADF 8B46EF                  	MOV	AX,cResult		;   cRecRes = cResult / RecSize;
 12325 00002AE2 31D2                    	XOR	DX,DX
 12326                                  	;div	word [bp-9]
 12327 00002AE4 F776F7                  	DIV	RecSize
 12328                                  	;mov	[bp-19],ax
 12329 00002AE7 8946ED                  	MOV	cRecRes,AX
 12330                                  	;add	[bp-7],ax
 12331 00002AEA 0146F9                  	ADD	RecPosL,AX		;   RecPos += cRecResult;
 12332                                  	;adc	word [bp-5],0
 12333 00002AED 8356FB00                	ADC	RecPosH,0
 12334                                  ;
 12335                                  ; If we have not gotten the expected number of records, we signal an EOF
 12336                                  ; condition.  On input, this is EOF.  On output this is usually disk full.
 12337                                  ; BUT...  Under 2.0 and before, all device output IGNORED this condition.  So
 12338                                  ; do we.
 12339                                  ;
 12340                                  	;cmp	ax,[bp-3]
 12341 00002AF1 3B46FD                  	CMP	AX,cRec 		;   if (cRecRes <> cRec)
 12342 00002AF4 7412                    	JZ	short TryBlank
 12343                                  	;test	byte [bp-20],4
 12344 00002AF6 F646EC04                	TEST	FCBOp,FCBREAD		;	if (OP&FCBRead || !DEVICE)
 12345 00002AFA 7508                    	JNZ	short SetEOF
 12346                                  	;test	word [es:di+5],80h
 12347 00002AFC 26F745058000            	TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 12348 00002B02 7504                    	JNZ	short TryBlank
 12349                                  SetEOF:
 12350                                  	;mov	byte [bp-1],1
 12351 00002B04 C646FF01                	MOV	FCBErr,FEOF		;	FCBErr = FEOF;
 12352                                  TryBlank:				;
 12353 00002B08 09D2                    	OR	DX,DX			;   if (cResult%RecSize <> 0) {
 12354 00002B0A 7426                    	JZ	short SetExt
 12355                                  	;add	word [bp-7],1
 12356 00002B0C 8346F901                	ADD	RecPosL,1		;	RecPos++;
 12357                                  	;adc	word [bp-5],0
 12358 00002B10 8356FB00                	ADC	RecPosH,0
 12359                                  	;test	byte [bp-20],4
 12360 00002B14 F646EC04                	TEST	FCBOp,FCBREAD		;	if(OP&FCBRead) <> 0) {
 12361 00002B18 7418                    	JZ	short SetExt
 12362                                  	;inc	word [bp-19]
 12363 00002B1A FF46ED                  	INC	cRecRes 		;	cRecRes++;
 12364                                  	;mov	byte [bp-1],3
 12365 00002B1D C646FF03                	MOV	FCBErr,FTRIM+FEOF	;	FCBErr = FTRIM | FEOF;
 12366                                  	;mov	cx,[bp-9]
 12367 00002B21 8B4EF7                  	MOV	CX,RecSize		;	Blank (RecSize-cResult%RecSize,
 12368 00002B24 29D1                    	SUB	CX,DX			;	       DMA+cResult);
 12369 00002B26 30C0                    	XOR	AL,AL
 12370                                  ;hkn; 	SS override
 12371 00002B28 36C43E[DA02]            	les     di,[ss:DMAADD]
 12372                                  	;add	di,[bp-17]
 12373 00002B2D 037EEF                  	ADD	DI,cResult
 12374 00002B30 F3AA                    	REP	STOSB			;   }	}
 12375                                  SetExt:
 12376                                  	;mov	dx,[bp-5]
 12377 00002B32 8B56FB                  	MOV	DX,RecPosH
 12378                                  	;mov	ax,[bp-7]
 12379 00002B35 8B46F9                  	MOV	AX,RecPosL
 12380                                  	;test	byte [bp-20],2
 12381 00002B38 F646EC02                	TEST	FCBOp,RANDOM		;   if ((OP&Random) == 0 ||
 12382 00002B3C 7406                    	JZ	short DoSetExt
 12383                                  	;test	byte [bp-20],8
 12384 00002B3E F646EC08                	TEST	FCBOp,BLOCK		;	(OP&BLOCK) <> 0)
 12385 00002B42 7403                    	JZ	short TrySetRR
 12386                                  DoSetExt:
 12387 00002B44 E868FE                  	call	SetExtent		;	SetExtent (RecPos, FCB);
 12388                                  TrySetRR:
 12389                                  	;test	byte [bp-20],8
 12390 00002B47 F646EC08                	TEST	FCBOp,BLOCK		;   if ((op&BLOCK) <> 0)
 12391 00002B4B 740F                    	JZ	short TryReturn
 12392                                  	;mov	[si+21h],ax
 12393 00002B4D 894421                  	MOV	[SI+SYS_FCB.RR],AX	;	FCB->RR = RecPos;
 12394                                  	;mov	[si+23h],dl
 12395 00002B50 885423                  	MOV	[SI+SYS_FCB.RR+2],DL
 12396                                  	;cmp	word [si+0Eh],64
 12397 00002B53 837C0E40                	CMP	word [SI+SYS_FCB.RECSIZ],64
 12398 00002B57 7303                    	JAE	short TryReturn
 12399                                  	;mov	[si+24h],dh
 12400 00002B59 887424                  	MOV	[SI+SYS_FCB.RR+2+1],DH	; Set 4th byte only if record size < 64
 12401                                  TryReturn: 
 12402                                  	;test	byte [bp-20],4
 12403 00002B5C F646EC04                	TEST	FCBOp,FCBREAD		;   if (!(FCBOP & FCBREAD)) {
 12404 00002B60 750B                    	JNZ	short FCBSave
 12405 00002B62 1E                      	push	ds			;	FCB->FDate = date;
 12406 00002B63 E853ED                  	call	DATE16			;	FCB->FTime = time;
 12407 00002B66 1F                      	pop	ds
 12408                                  	;mov	[si+14h],ax
 12409 00002B67 894414                  	MOV	[SI+SYS_FCB.FDATE],AX
 12410                                  	;mov	[si+16h],dx
 12411 00002B6A 895416                  	MOV	[SI+SYS_FCB.FTIME],DX	;	}
 12412                                  FCBSave: 
 12413                                  	;test	byte [bp-20],8
 12414 00002B6D F646EC08                	TEST	FCBOp,BLOCK		;   if ((op&BLOCK) <> 0)
 12415 00002B71 7409                    	jz	short DoReturn
 12416                                  	;mov	cx,[bp-19]
 12417 00002B73 8B4EED                  	MOV	CX,cRecRes		;	user_CX = cRecRes;
 12418 00002B76 E892EA                  	call    Get_User_Stack
 12419                                  	;mov	[si+4],cx
 12420 00002B79 894C04                  	MOV	[SI+user_env.user_CX],CX
 12421                                  DoReturn:
 12422                                  	;mov	al,[bp-1]
 12423 00002B7C 8A46FF                  	MOV	AL,FCBErr		;   return (FCBERR);
 12424                                  	;Leave	
 12425 00002B7F 89EC                    	mov     sp,bp
 12426 00002B81 5D                      	pop     bp
 12427 00002B82 C3                      	retn
 12428                                  
 12429                                  ; 22/07/2018 - Retro DOS v3.0
 12430                                  
 12431                                  ;Break <$FCB_Open - open an old-style FCB>
 12432                                  ;---------------------------------------------------------------------------
 12433                                  ;
 12434                                  ;   $FCB_Open - CPM compatability file open. The user has formatted an FCB
 12435                                  ;	for us and asked to have the rest filled in.
 12436                                  ;
 12437                                  ;   Inputs:	DS:DX point to an unopenned FCB
 12438                                  ;   Outputs:	AL indicates status 0 is ok FF is error
 12439                                  ;		FCB has the following fields filled in:
 12440                                  ;		    Time/Date Extent/NR Size
 12441                                  ;---------------------------------------------------------------------------
 12442                                  
 12443                                  _$FCB_OPEN:			; System call 15
 12444                                  
 12445 00002B83 B80200                  	MOV	AX,SHARING_COMPAT+open_for_both
 12446                                  
 12447                                  ;hkn; DOS_Open is in DOSCODE
 12448 00002B86 B9[7E37]                	MOV	CX,DOS_OPEN
 12449                                  ;
 12450                                  ; The following is common code for Creation and openning of FCBs.  AX is
 12451                                  ; either attributes (for create) or open mode (for open)...  DS:DX points to
 12452                                  ; the FCB
 12453                                  ;
 12454                                  DoAccess:
 12455 00002B89 3E                      	pushj	ds
 12456 00002B8A 52                      	push	dx
 12457 00002B8B 51                      	push	cx
 12458 00002B8C 50                      	push	ax			; save FCB pointer away
 12459                                  
 12460                                  ;hkn; 	OpenBuf is in DOSDATA
 12461 00002B8D BF[6003]                	MOV	DI,OPENBUF
 12462 00002B90 E8553E                  	call	TransFCB		; crunch the fcb
 12463 00002B93 58                      	pop	ax
 12464 00002B94 59                      	pop	cx
 12465 00002B95 5A                      	pop	dx
 12466 00002B96 1F                      	pop	ds			; get fcb
 12467 00002B97 7303                    	JNC	short FindFCB		; everything seems ok
 12468                                  FCBOpenErr:
 12469                                  ;
 12470                                  ; AL has error code
 12471                                  ;
 12472 00002B99 E983EB                  	jmp	FCB_RET_ERR
 12473                                  FindFCB:
 12474 00002B9C E82AFE                  	call	GetExtended		; DS:SI will point to FCB
 12475                                  
 12476                                  	; MSDOS 6.0
 12477                                  	;push	ax
 12478                                  	;mov	al,1			;indicate Open/Create operation
 12479                                  	;call	LRUFCB			; get a sft entry (no error)
 12480                                  	;pop	ax
 12481                                  	;jc	short HardMessage
 12482                                  	
 12483                                  	; MSDOS 3.3
 12484 00002B9F E80CFB                  	call	LRUFCB
 12485 00002BA2 722A                    	JC	short HardMessage
 12486                                  
 12487                                  	;mov	word [es:di+2],8000h
 12488 00002BA4 26C745020080            	mov	word [es:di+SF_ENTRY.sf_mode],sf_isFCB
 12489 00002BAA 1E                      	push	ds
 12490 00002BAB 56                      	push	si
 12491 00002BAC 53                      	push	bx			; save fcb pointer
 12492 00002BAD 89CE                    	MOV	SI,CX
 12493                                  
 12494                                  ;hkn; SS is DOSDATA
 12495 00002BAF 16                      	push	ss
 12496 00002BB0 1F                      	pop	ds			; let DOS_Open see variables
 12497 00002BB1 FFD6                    	CALL	SI			; go open the file
 12498 00002BB3 5B                      	pop	bx
 12499 00002BB4 5E                      	pop	si
 12500 00002BB5 1F                      	pop	ds			; get fcb
 12501                                  
 12502                                  ;hkn; SS override
 12503 00002BB6 36C43E[3605]            	LES	DI,[SS:THISSFT]		; get sf pointer
 12504 00002BBB 7319                    	JNC	short FCBOK		; operation succeeded
 12505                                  failopen:
 12506 00002BBD 50                      	PUSH	AX
 12507 00002BBE B052                    	MOV	AL,"R"                  ; clear out field (free sft)
 12508 00002BC0 E8A0FC                  	call	BlastSFT
 12509 00002BC3 58                      	POP	AX
 12510                                  	;cmp	ax,4
 12511 00002BC4 83F804                  	CMP	AX,error_too_many_open_files
 12512 00002BC7 7405                    	JZ	short HardMessage
 12513                                  	;cmp	ax,24h
 12514 00002BC9 83F824                  	CMP	AX,error_sharing_buffer_exceeded
 12515 00002BCC 7505                    	jnz	short DeadFCB
 12516                                  HardMessage:
 12517 00002BCE 50                      	PUSH	AX
 12518 00002BCF E8A0FD                  	call	FCBHardErr
 12519 00002BD2 58                      	POP	AX
 12520                                  DeadFCB:
 12521 00002BD3 E949EB                  	jmp	FCB_RET_ERR
 12522                                  FCBOK:
 12523                                  	; MSDOS 6.0
 12524                                  	;call	IsSFTNet		       ;AN007;F.C. >32mb  Non Fat file?
 12525                                  	;JNZ	short FCBOK2		       ;AN007;F.C. >32mb  yes
 12526                                  	;call	CheckShare		       ;AN000;F.C. >32mb  share around?
 12527                                  	;JNZ	short FCBOK2		       ;AN000;F.C. >32mb  yes
 12528                                  ;SR;
 12529                                  ; If we reach here, we know we have got a local SFT. Let's update the 
 12530                                  ; LocalSFT variable to reflect this.
 12531                                  ;
 12532                                  	;mov	[cs:LocalSFT],di	;
 12533                                  	;mov	[cs:LocalSFT+2],es; Store the SFT address
 12534                                  ;;SR;
 12535                                  ;; The check below is not valid anymore since we regenerate for media > 32M.
 12536                                  ;;
 12537                                  ;;	CMP	WORD [ES:DI+SF_ENTRY.sf_dirsec+2],0 
 12538                                  ;;					       ;AN000;F.C. >32mb  if dirsec >32mb
 12539                                  ;;	JZ	short FCBOK2		       ;AN000;F.C. >32mb    then error
 12540                                  ;;	MOV	AX,error_sys_comp_not_loaded   ;AN000;F.C. >32mb
 12541                                  ;;	JMP	short failopen		       ;AN000;F.C. >32mb
 12542                                  
 12543                                  FCBOK2:
 12544                                  	; MSDOS 3.3 (& MSDOS 6.0)
 12545 00002BD6 26FF05                  	inc	word [es:di]
 12546                                  	;INC	word [ES:DI+SF_ENTRY.sf_ref_count] ; increment reference count
 12547 00002BD9 E8F5F9                  	call	SaveFCBInfo
 12548                                  	; MSDOS 3.3
 12549 00002BDC E8B9FA                  	call	SetOpenAge
 12550                                  	; MSDOS 3.3 (& MSDOS 6.0)
 12551                                  	;test	word [es:di+5],80h
 12552 00002BDF 26F745058000            	TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 12553 00002BE5 7509                    	JNZ	short FCBNoDrive	; do not munge drive on devices
 12554 00002BE7 8A04                    	MOV	AL,[SI]			; get drive byte
 12555 00002BE9 E8853D                  	call	GETTHISDRV		; convert
 12556 00002BEC FEC0                    	INC	AL
 12557 00002BEE 8804                    	MOV	[SI],AL			; stash in good drive letter
 12558                                  FCBNoDrive:
 12559                                  	;mov	word [si+0Eh],128
 12560 00002BF0 C7440E8000              	MOV	word [SI+SYS_FCB.RECSIZ],80h ; stuff in default record size
 12561                                  
 12562                                  	;mov	ax,[es:di+0Dh]
 12563 00002BF5 268B450D                	MOV	AX,[ES:DI+SF_ENTRY.sf_time] ; set time
 12564                                  	;mov	[si+16h],ax
 12565 00002BF9 894416                  	MOV	[SI+SYS_FCB.FTIME],AX
 12566                                  	;mov	ax,[es:di+0Fh]
 12567 00002BFC 268B450F                	MOV	AX,[ES:DI+SF_ENTRY.sf_date] ; set date
 12568                                  	;mov	[si+14h],ax
 12569 00002C00 894414                  	MOV	[SI+SYS_FCB.FDATE],AX
 12570                                  	;mov	ax,[es:di+11h]
 12571 00002C03 268B4511                	MOV	AX,[ES:DI+SF_ENTRY.sf_size] ; set sizes
 12572                                  	;mov	[si+10h],ax
 12573 00002C07 894410                  	MOV	[SI+SYS_FCB.FILSIZ],AX
 12574                                  	;mov	ax,[es:di+13h]
 12575 00002C0A 268B4513                	MOV	AX,[ES:DI+SF_ENTRY.sf_size+2]
 12576                                  	;mov	[si+12h],ax
 12577 00002C0E 894412                  	MOV	[SI+SYS_FCB.FILSIZ+2],AX
 12578 00002C11 31C0                    	XOR	AX,AX			; convenient zero
 12579                                  	;mov	[si+0Ch],ax
 12580 00002C13 89440C                  	MOV	[SI+SYS_FCB.EXTENT],AX	; point to beginning of file
 12581                                  ;
 12582                                  ; We must scan the set of FCB SFTs for one that appears to match the current
 12583                                  ; one.	We cheat and use CheckFCB to match the FCBs.
 12584                                  ;
 12585                                  
 12586                                  ;hkn; 	SS override
 12587 00002C16 36C43E[4000]            	LES	DI,[SS:SFTFCB]		; get the pointer to head of the list
 12588                                  	;mov	ah,[es:di+4]
 12589 00002C1B 268A6504                	MOV	AH,[ES:DI+SFT.SFCount]	; get number of SFTs to scan
 12590                                  OpenScan:
 12591                                  	;cmp	al,[si+18h]
 12592 00002C1F 3A4418                  	CMP	AL,[SI+fcb_sfn]		; don't compare ourselves
 12593 00002C22 7407                    	JZ	short SkipCheck
 12594 00002C24 50                      	push	ax			; preserve count
 12595 00002C25 E851FC                  	call	CheckFCB		; do they match
 12596 00002C28 58                      	pop	ax			; get count back
 12597 00002C29 7309                    	JNC	short OpenFound		; found a match!
 12598                                  SkipCheck:
 12599 00002C2B FEC0                    	INC	AL			; advance to next FCB
 12600 00002C2D 38E0                    	CMP	AL,AH			; table full?
 12601 00002C2F 75EE                    	JNZ	short OpenScan		; no, go for more
 12602                                  OpenDone:
 12603 00002C31 30C0                    	xor	al,al			; return success
 12604 00002C33 C3                      	retn
 12605                                  ;
 12606                                  ; The SFT at ES:DI is the one that is already in use for this FCB. We set the
 12607                                  ; FCB to use this one. We increment its ref count. We do NOT close it at all.
 12608                                  ; Consider:
 12609                                  ;
 12610                                  ;   open (foo)	delete (foo) open (bar)
 12611                                  ;
 12612                                  ; This causes us to recycle (potentially) bar through the same local SFT as
 12613                                  ; foo even though foo is no longer needed; this is due to the server closing
 12614                                  ; foo for us when we delete it. Unfortunately, we cannot see this closure.
 12615                                  ; If we were to CLOSE bar, the server would then close the only reference to
 12616                                  ; bar and subsequent I/O would be lost to the redirector.
 12617                                  ;
 12618                                  ; This gets solved by NOT closing the sft, but zeroing the ref count
 12619                                  ; (effectively freeing the SFT) and informing the sharer (if relevant) that
 12620                                  ; the SFT is no longer in use. Note that the SHARER MUST keep its ref counts
 12621                                  ; around.  This will allow us to access the same file through multiple network
 12622                                  ; connections and NOT prematurely terminate when the ref count on one
 12623                                  ; connection goes to zero.
 12624                                  ;
 12625                                  OpenFound:
 12626                                  	;mov	[si+18h],al
 12627 00002C34 884418                  	MOV	[SI+fcb_sfn],AL 	; assign with this
 12628 00002C37 26FF05                  	inc	word [es:di]
 12629                                  	;INC	word [ES:DI+SF_ENTRY.sf_ref_count] 
 12630                                  					; remember this new invocation
 12631 00002C3A 36A1[1000]              	MOV	AX,[SS:FCBLRU]		; update LRU counts
 12632                                  	;mov	[es:di+15h],ax
 12633 00002C3E 26894515                	MOV	[ES:DI+sf_LRU],AX
 12634                                  ;
 12635                                  ; We have an FCB sft that is now of no use.  We release sharing info and then
 12636                                  ; blast it to prevent other reuse.
 12637                                  ;
 12638 00002C42 16                      	push	ss
 12639 00002C43 1F                      	pop	ds
 12640 00002C44 C43E[3605]              	LES	DI,[THISSFT]
 12641 00002C48 26FF0D                  	dec	word [es:di]
 12642                                  	;DEC	word [ES:DI+SF_ENTRY.sf_ref_count]
 12643                                  					; free the newly allocated SFT
 12644 00002C4B E80647                  	call	ShareEnd
 12645 00002C4E B043                    	MOV	AL,'C'
 12646 00002C50 E810FC                  	call	BlastSFT
 12647 00002C53 EBDC                    	JMP	short OpenDone
 12648                                  
 12649                                  ;BREAK	<$FCB_Create - create a new directory entry>
 12650                                  ;----------------------------------------------------------------------------
 12651                                  ;
 12652                                  ;   $FCB_Create - CPM compatability file create. The user has formatted an
 12653                                  ;	FCB for us and asked to have the rest filled in.
 12654                                  ;
 12655                                  ;   Inputs:	DS:DX point to an unopenned FCB
 12656                                  ;   Outputs:	AL indicates status 0 is ok FF is error
 12657                                  ;		FCB has the following fields filled in:
 12658                                  ;		    Time/Date Extent/NR Size
 12659                                  ;----------------------------------------------------------------------------
 12660                                  
 12661                                  _$FCB_CREATE:		; System call 22
 12662                                  
 12663                                  ;hkn; DOS_Create is in DOSCODE
 12664 00002C55 B9[E836]                	MOV	CX,DOS_CREATE		; routine to call
 12665 00002C58 31C0                    	XOR	AX,AX			; attributes to create
 12666 00002C5A E86CFD                  	call	GetExtended		; get extended FCB
 12667 00002C5D 7403                    	JZ	short DoAccessJ		; not an extended FCB
 12668 00002C5F 8A44FF                  	MOV	AL,[SI-1]		; get attributes
 12669                                  DoAccessJ:
 12670 00002C62 E924FF                  	JMP	DoAccess		; do dirty work
 12671                                  
 12672                                  ; 22/07/2018 - Retro DOS v3.0
 12673                                  
 12674                                  ;BREAK <$FCB_Random_write_Block - write a block of records to a file >
 12675                                  ;----------------------------------------------------------------------------
 12676                                  ;
 12677                                  ;   $FCB_Random_Write_Block - retrieve a location from the FCB, seek to it
 12678                                  ;	and write a number of blocks from it.
 12679                                  ;
 12680                                  ;   Inputs:	DS:DX point to an FCB
 12681                                  ;   Outputs:	AL = 0 write was successful and the FCB position is updated
 12682                                  ;		AL <> 0 Not enough room on disk for the output
 12683                                  ;
 12684                                  ;----------------------------------------------------------------------------
 12685                                  
 12686                                  _$FCB_RANDOM_WRITE_BLOCK:
 12687                                  	;mov	AL,0Ah	
 12688 00002C65 B00A                    	MOV	AL,RANDOM+BLOCK
 12689 00002C67 E979FD                  	JMP	FCBIO
 12690                                  
 12691                                  ;BREAK <$FCB_Random_Read_Block - read a block of records to a file >
 12692                                  ;----------------------------------------------------------------------------
 12693                                  ;
 12694                                  ;   $FCB_Random_Read_Block - retrieve a location from the FCB, seek to it
 12695                                  ;	and read a number of blocks from it.
 12696                                  ;
 12697                                  ;   Inputs:	DS:DX point to an FCB
 12698                                  ;   Outputs:	AL = error codes defined above
 12699                                  ;
 12700                                  ;----------------------------------------------------------------------------
 12701                                  
 12702                                  _$FCB_RANDOM_READ_BLOCK:
 12703                                  	;mov	AL,0Eh	
 12704 00002C6A B00E                    	MOV	AL,RANDOM+FCBREAD+BLOCK
 12705 00002C6C E974FD                  	JMP	FCBIO
 12706                                  
 12707                                  ;BREAK <$FCB_Seq_Read - read the next record from a file >
 12708                                  ;----------------------------------------------------------------------------
 12709                                  ;
 12710                                  ;   $FCB_Seq_Read - retrieve the next record from an FCB and read it into
 12711                                  ;	memory
 12712                                  ;
 12713                                  ;   Inputs:	DS:DX point to an FCB
 12714                                  ;   Outputs:	AL = error codes defined above
 12715                                  ;
 12716                                  ;----------------------------------------------------------------------------
 12717                                  
 12718                                  _$FCB_SEQ_READ:
 12719                                  	;mov	AL,4	
 12720 00002C6F B004                    	MOV	AL,FCBREAD
 12721 00002C71 E96FFD                  	JMP	FCBIO
 12722                                  
 12723                                  ;BREAK <$FCB_Seq_Write - write the next record to a file >
 12724                                  ;----------------------------------------------------------------------------
 12725                                  ;
 12726                                  ;   $FCB_Seq_Write - retrieve the next record from an FCB and write it to the
 12727                                  ;	file
 12728                                  ;
 12729                                  ;   Inputs:	DS:DX point to an FCB
 12730                                  ;   Outputs:	AL = error codes defined above
 12731                                  ;
 12732                                  ;----------------------------------------------------------------------------
 12733                                  
 12734                                  _$FCB_SEQ_WRITE:
 12735 00002C74 B000                    	MOV	AL,0
 12736 00002C76 E96AFD                  	jmp	FCBIO
 12737                                  
 12738                                  ;BREAK <$FCB_Random_Read - Read a single record from a file >
 12739                                  ;----------------------------------------------------------------------------
 12740                                  ;
 12741                                  ;   $FCB_Random_Read - retrieve a location from the FCB, seek to it and read a
 12742                                  ;	record from it.
 12743                                  ;
 12744                                  ;   Inputs:	DS:DX point to an FCB
 12745                                  ;   Outputs:	AL = error codes defined above
 12746                                  ;
 12747                                  ;----------------------------------------------------------------------------
 12748                                  
 12749                                  _$FCB_RANDOM_READ:
 12750                                  	;mov	AL,6	
 12751 00002C79 B006                    	MOV	AL,RANDOM+FCBREAD
 12752 00002C7B E965FD                  	jmp	FCBIO			; single block
 12753                                  
 12754                                  ;BREAK <$FCB_Random_Write - write a single record to a file >
 12755                                  ;----------------------------------------------------------------------------
 12756                                  ;
 12757                                  ;   $FCB_Random_Write - retrieve a location from the FCB, seek to it and write
 12758                                  ;	a record to it.
 12759                                  ;
 12760                                  ;   Inputs:	DS:DX point to an FCB
 12761                                  ;   Outputs:	AL = error codes defined above
 12762                                  ;
 12763                                  ;----------------------------------------------------------------------------
 12764                                  
 12765                                  _$FCB_RANDOM_WRITE:
 12766                                  	;mov	AL,2	
 12767 00002C7E B002                    	MOV	AL,RANDOM
 12768 00002C80 E960FD                  	jmp	FCBIO
 12769                                  
 12770                                  ;============================================================================
 12771                                  ; SEARCH.ASM, MSDOS 6.0, 1991
 12772                                  ;============================================================================
 12773                                  ; 22/07/2018 - Retro DOS v3.0
 12774                                  
 12775                                  ;**	Search.asm
 12776                                  ;
 12777                                  ;	Directory search system calls.
 12778                                  ;	These will be passed direct text of the pathname from the user. 
 12779                                  ;	They will need to be passed through the macro expander prior to
 12780                                  ;	being sent through the low-level stuff. 
 12781                                  ;	I/O specs are defined in DISPATCH. The system calls are:
 12782                                  ;
 12783                                  ;	$Dir_Search_First	  written
 12784                                  ;	$Dir_Search_Next	  written
 12785                                  ;	$Find_First	  written
 12786                                  ;	$Find_Next		  written
 12787                                  ;	PackName		  written
 12788                                  ;
 12789                                  ;	Modification history:
 12790                                  ;
 12791                                  ;	  Created: ARR 4 April 1983
 12792                                  
 12793                                  ;----------------------------------------------------------------------------
 12794                                  ; Procedure Name : $DIR_SEARCH_FIRST
 12795                                  ;
 12796                                  ; Inputs:
 12797                                  ;	DS:DX Points to unopenned FCB
 12798                                  ; Function:
 12799                                  ;	Directory is searched for first matching entry and the directory
 12800                                  ;	entry is loaded at the disk transfer address
 12801                                  ; Returns:
 12802                                  ;	AL = -1 if no entries matched, otherwise 0
 12803                                  ;----------------------------------------------------------------------------
 12804                                  
 12805                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 2B88h
 12806                                  
 12807                                  _$DIR_SEARCH_FIRST:
 12808 00002C83 368916[3E05]            	MOV	[SS:THISFCB],DX
 12809 00002C88 368C1E[4005]            	MOV	[SS:THISFCB+2],DS
 12810 00002C8D 89D6                    	MOV	SI,DX
 12811 00002C8F 803CFF                  	CMP	BYTE [SI],0FFH
 12812 00002C92 7503                    	JNZ	short NORMFCB4
 12813 00002C94 83C607                  	ADD	SI,7			; Point to drive select byte
 12814                                  NORMFCB4:
 12815 00002C97 FF34                    	push	word [SI]		; Save original drive byte for later
 12816                                  
 12817 00002C99 16                      	push	ss
 12818 00002C9A 07                      	pop	es			; get es to address DOSGroup
 12819                                  
 12820 00002C9B BF[6003]                	MOV	DI,OPENBUF		; appropriate buffer
 12821 00002C9E E8473D                  	call	TransFCB		; convert the FCB, set SATTRIB EXTFCB
 12822 00002CA1 7304                    	JNC	short SearchIt		; no error, go and look
 12823 00002CA3 5B                      	pop	bx			; Clean stack
 12824                                  ;
 12825                                  ; Error code is in AX
 12826                                  ;
 12827 00002CA4 E978EA                  	jmp	FCB_RET_ERR		; error
 12828                                  
 12829                                  SearchIt:
 12830 00002CA7 16                      	push	ss
 12831 00002CA8 1F                      	pop	ds			; get ready for search
 12832 00002CA9 FF36[DA02]              	push	word [DMAADD]
 12833 00002CAD FF36[DC02]              	push	word [DMAADD+2]
 12834 00002CB1 C706[DA02][6004]        	MOV	WORD [DMAADD],SEARCHBUF
 12835 00002CB7 8C1E[DC02]              	MOV	WORD [DMAADD+2],DS
 12836                                  	; MSDOS 6.0
 12837                                  	;call	GET_FAST_SEARCH 	; search
 12838                                  	; MSDOS 3.3
 12839 00002CBB E8560C                  	call	DOS_SEARCH_FIRST
 12840 00002CBE 8F06[DC02]              	pop	word [DMAADD+2]
 12841 00002CC2 8F06[DA02]              	pop	word [DMAADD]
 12842 00002CC6 7304                    	JNC	short SearchSet		; no error, transfer info
 12843 00002CC8 5B                      	pop	bx			; Clean stack
 12844                                  ;
 12845                                  ; Error code is in AX
 12846                                  ;
 12847 00002CC9 E953EA                  	jmp	FCB_RET_ERR
 12848                                  
 12849                                  ;
 12850                                  ; The search was successful (or the search-next).  We store the information
 12851                                  ; into the user's FCB for continuation.
 12852                                  ;
 12853                                  SearchSet:
 12854 00002CCC BE[6004]                	MOV	SI,SEARCHBUF
 12855 00002CCF C43E[3E05]              	LES	DI,[THISFCB]		; point to the FCB
 12856 00002CD3 F606[0705]FF            	TEST	byte [EXTFCB],0FFh		;
 12857 00002CD8 7403                    	JZ	short NORMFCB1
 12858 00002CDA 83C707                  	ADD	DI,7			; Point past the extension
 12859                                  NORMFCB1:
 12860 00002CDD 5B                      	pop	bx			; Get original drive byte
 12861 00002CDE 08DB                    	OR	BL,BL
 12862 00002CE0 7506                    	JNZ	short SearchDrv
 12863 00002CE2 8A1E[E402]              	MOV	BL,[CURDRV]
 12864 00002CE6 FEC3                    	INC	BL
 12865                                  SearchDrv:
 12866 00002CE8 AC                      	LODSB				; Get correct search contin drive byte
 12867 00002CE9 86C3                    	XCHG	AL,BL			; Search byte to BL, user byte to AL
 12868 00002CEB 47                      	INC	DI
 12869                                  	;STOSB				; Store the correct "user" drive byte
 12870                                  					;  at the start of the search info
 12871 00002CEC B90A00                  	MOV	CX,20/2
 12872 00002CEF F3A5                    	REP	MOVSW			; Rest of search cont info, SI -> entry
 12873 00002CF1 86C3                    	XCHG	AL,BL			; User drive byte back to BL, search
 12874                                  					;   byte to AL
 12875 00002CF3 AA                      	STOSB				; Search contin drive byte at end of
 12876                                  					;   contin info
 12877 00002CF4 C43E[DA02]              	LES	DI,[DMAADD]
 12878 00002CF8 F606[0705]FF            	TEST	byte [EXTFCB],0FFh
 12879 00002CFD 740E                    	JZ	short NORMFCB2
 12880 00002CFF B0FF                    	MOV	AL,0FFh
 12881 00002D01 AA                      	STOSB
 12882 00002D02 FEC0                    	INC	AL
 12883 00002D04 B90500                  	MOV	CX,5
 12884 00002D07 F3AA                    	REP	STOSB
 12885 00002D09 A0[0805]                	MOV	AL,[SATTRIB]
 12886 00002D0C AA                      	STOSB
 12887                                  NORMFCB2:
 12888 00002D0D 88D8                    	MOV	AL,BL			; User Drive byte
 12889 00002D0F AA                      	STOSB
 12890 00002D10 B91000                  	MOV	CX,16			; 32 / 2 words of dir entry
 12891 00002D13 F3A5                    	REP	MOVSW
 12892 00002D15 E904EA                  	jmp	FCB_RET_OK
 12893                                  
 12894                                  ;----------------------------------------------------------------------------
 12895                                  ;
 12896                                  ; Procedure Name : $DIR_SEARCH_NEXT
 12897                                  ;
 12898                                  ; Inputs:
 12899                                  ;	DS:DX points to unopenned FCB returned by $DIR_SEARCH_FIRST
 12900                                  ; Function:
 12901                                  ;	Directory is searched for the next matching entry and the directory
 12902                                  ;	entry is loaded at the disk transfer address
 12903                                  ; Returns:
 12904                                  ;	AL = -1 if no entries matched, otherwise 0
 12905                                  ;----------------------------------------------------------------------------
 12906                                  
 12907                                  _$DIR_SEARCH_NEXT:
 12908 00002D18 368916[3E05]            	MOV	[SS:THISFCB],DX
 12909 00002D1D 368C1E[4005]            	MOV	[SS:THISFCB+2],DS
 12910 00002D22 36C606[0805]00          	MOV	byte [SS:SATTRIB],0
 12911 00002D28 36C606[0705]00          	MOV	byte [SS:EXTFCB],0
 12912                                  
 12913 00002D2E 16                      	push	ss
 12914 00002D2F 07                      	pop	es
 12915                                  
 12916 00002D30 BF[6004]                	MOV	DI,SEARCHBUF
 12917                                  
 12918 00002D33 89D6                    	MOV	SI,DX
 12919 00002D35 803CFF                  	CMP	BYTE [SI],0FFh
 12920 00002D38 750D                    	JNZ	short NORMFCB6
 12921 00002D3A 83C606                  	ADD	SI,6
 12922 00002D3D AC                      	LODSB
 12923                                  
 12924 00002D3E 36A2[0805]              	MOV	[SS:SATTRIB],AL
 12925 00002D42 36FE0E[0705]            	DEC	byte [SS:EXTFCB]
 12926                                  NORMFCB6:
 12927 00002D47 AC                      	LODSB				; Get original user drive byte
 12928 00002D48 50                      	push	ax			; Put it on stack
 12929 00002D49 8A4414                  	MOV	AL,[SI+20]		; Get correct search contin drive byte
 12930 00002D4C AA                      	STOSB				; Put in correct place
 12931 00002D4D B90A00                  	MOV	CX,20/2
 12932 00002D50 F3A5                    	REP	MOVSW			; Transfer in rest of search contin info
 12933                                  
 12934 00002D52 16                      	push	ss
 12935 00002D53 1F                      	pop	ds
 12936                                  
 12937 00002D54 FF36[DA02]              	push	word [DMAADD]
 12938 00002D58 FF36[DC02]              	push	word [DMAADD+2]
 12939 00002D5C C706[DA02][6004]        	MOV	WORD [DMAADD],SEARCHBUF
 12940 00002D62 8C1E[DC02]              	MOV	WORD [DMAADD+2],DS
 12941 00002D66 E8600C                  	call	DOS_SEARCH_NEXT 	; Find it
 12942 00002D69 8F06[DC02]              	pop	word [DMAADD+2]
 12943 00002D6D 8F06[DA02]              	pop	word [DMAADD]
 12944 00002D71 7203                    	JC	short SearchNoMore
 12945 00002D73 E956FF                  	JMP	SearchSet		; Ok set return
 12946                                  
 12947                                  SearchNoMore:
 12948 00002D76 C43E[3E05]              	LES	DI,[THISFCB]
 12949 00002D7A F606[0705]FF            	TEST	byte [EXTFCB],0FFh
 12950 00002D7F 7403                    	JZ	short NORMFCB8
 12951 00002D81 83C707                  	ADD	DI,7			; Point past the extension
 12952                                  NORMFCB8:
 12953 00002D84 5B                      	pop	bx			; Get original drive byte
 12954 00002D85 26881D                  	MOV	[ES:DI],BL		; Store the correct "user" drive byte
 12955                                  					;  at the right spot
 12956                                  ;
 12957                                  ; error code is in AX
 12958                                  ;
 12959 00002D88 E994E9                  	jmp	FCB_RET_ERR
 12960                                  
 12961                                  ;---------------------------------------------------------------------------
 12962                                  ;
 12963                                  ;   Procedure Name : $FIND_FIRST
 12964                                  ; 
 12965                                  ;   Assembler usage:
 12966                                  ;	    MOV AH, FindFirst
 12967                                  ;	    LDS DX, name
 12968                                  ;	    MOV CX, attr
 12969                                  ;	    INT 21h
 12970                                  ;	; DMA address has datablock
 12971                                  ;
 12972                                  ;   Error Returns:
 12973                                  ;	    AX = error_path_not_found
 12974                                  ;	       = error_no_more_files
 12975                                  ;---------------------------------------------------------------------------
 12976                                  
 12977                                  _$FIND_FIRST:
 12978 00002D8B 89D6                    	MOV	SI,DX			; get name in appropriate place
 12979 00002D8D 36880E[0805]            	MOV	[SS:SATTRIB],CL		; Search attribute to correct loc
 12980                                  
 12981 00002D92 BF[6003]                	MOV	DI,OPENBUF		; appropriate buffer
 12982                                  
 12983 00002D95 E8B83C                  	call	TransPathSet		; convert the path
 12984 00002D98 7305                    	JNC	short Find_it 		; no error, go and look
 12985                                  FindError:
 12986                                  	;mov	al,3
 12987 00002D9A B003                    	mov	al, error_path_not_found ; error and map into one.
 12988 00002D9C E96AE9                  	jmp	SYS_RET_ERR
 12989                                  Find_it:
 12990 00002D9F 16                      	push	ss
 12991 00002DA0 1F                      	pop	ds
 12992                                  
 12993 00002DA1 FF36[DA02]              	push	word [DMAADD]
 12994 00002DA5 FF36[DC02]              	push	word [DMAADD+2]
 12995 00002DA9 C706[DA02][6004]        	MOV	WORD [DMAADD],SEARCHBUF
 12996 00002DAF 8C1E[DC02]              	MOV	WORD [DMAADD+2],DS
 12997                                  	; MSDOS 6.0
 12998                                  	;call	GET_FAST_SEARCH 	; search
 12999                                  	; MSDOS 3.3
 13000 00002DB3 E85E0B                  	call	DOS_SEARCH_FIRST
 13001 00002DB6 8F06[DC02]              	pop	word [DMAADD+2]
 13002 00002DBA 8F06[DA02]              	pop	word [DMAADD]
 13003 00002DBE 7303                    	JNC	short FindSet 		; no error, transfer info
 13004 00002DC0 E946E9                  	jmp	SYS_RET_ERR
 13005                                  
 13006                                  FindSet:
 13007 00002DC3 BE[6004]                	MOV	SI,SEARCHBUF
 13008 00002DC6 C43E[DA02]              	LES	DI,[DMAADD]
 13009 00002DCA B91500                  	MOV	CX,21
 13010 00002DCD F3A4                    	REP	MOVSB
 13011 00002DCF 56                      	PUSH	SI			; Save pointer to start of entry
 13012                                  	;mov	al,[si+0Bh]
 13013 00002DD0 8A440B                  	MOV	AL,[SI+dir_entry.dir_attr]
 13014 00002DD3 AA                      	STOSB
 13015                                  	;add	si,16h
 13016 00002DD4 83C616                  	ADD	SI,dir_entry.dir_time
 13017 00002DD7 A5                      	MOVSW				; dir_time
 13018 00002DD8 A5                      	MOVSW				; dir_date
 13019 00002DD9 46                      	INC	SI
 13020 00002DDA 46                      	INC	SI			; Skip dir_first
 13021 00002DDB A5                      	MOVSW				; dir_size (2 words)
 13022 00002DDC A5                      	MOVSW
 13023 00002DDD 5E                      	POP	SI			; Point back to dir_name
 13024 00002DDE E83600                   	CALL	PackName
 13025 00002DE1 E919E9                  	jmp	SYS_RET_OK		; bye with no errors
 13026                                  
 13027                                  ;---------------------------------------------------------------------------
 13028                                  ;
 13029                                  ;   Procedure Name : $FIND_NEXT
 13030                                  ;
 13031                                  ;   Assembler usage:
 13032                                  ;	; dma points at area returned by find_first
 13033                                  ;	    MOV AH, findnext
 13034                                  ;	    INT 21h
 13035                                  ;	; next entry is at dma
 13036                                  ;
 13037                                  ;   Error Returns:
 13038                                  ;	    AX = error_no_more_files
 13039                                  ;---------------------------------------------------------------------------
 13040                                  
 13041                                  _$FIND_NEXT:
 13042 00002DE4 16                      	push	ss
 13043 00002DE5 07                      	pop	es
 13044                                  
 13045 00002DE6 BF[6004]                	MOV	DI,SEARCHBUF
 13046                                  
 13047 00002DE9 36C536[DA02]            	LDS	SI,[SS:DMAADD]
 13048                                  
 13049 00002DEE B91500                  	MOV	CX,21
 13050 00002DF1 F3A4                    	REP	MOVSB			; Put the search continuation info
 13051                                  					;  in the right place
 13052 00002DF3 16                      	push	ss
 13053 00002DF4 1F                      	pop	ds			; get ready for search
 13054                                  	
 13055 00002DF5 FF36[DA02]              	push	word [DMAADD]
 13056 00002DF9 FF36[DC02]              	push	word [DMAADD+2]
 13057 00002DFD C706[DA02][6004]        	MOV	WORD [DMAADD],SEARCHBUF
 13058 00002E03 8C1E[DC02]              	MOV	WORD [DMAADD+2],DS
 13059 00002E07 E8BF0B                  	call	DOS_SEARCH_NEXT 	; Find it
 13060 00002E0A 8F06[DC02]              	pop	word [DMAADD+2]
 13061 00002E0E 8F06[DA02]              	pop	word [DMAADD]
 13062 00002E12 73AF                    	JNC	short FindSet 		; No error, set info
 13063 00002E14 E9F2E8                  	jmp	SYS_RET_ERR
 13064                                  
 13065                                  ;---------------------------------------------------------------------------
 13066                                  ;**	PackName - Convert file names from FCB to ASCIZ format.
 13067                                  ;
 13068                                  ;	PackName transfers a file name from DS:SI to ES:DI and converts it to
 13069                                  ;	the ASCIZ format.
 13070                                  ;
 13071                                  ;	ENTRY	(DS:SI) = 11 character FCB or dir entry name
 13072                                  ;		(ES:DI) = destination area (13 bytes)
 13073                                  ;	EXIT	(ds:SI) and (es:DI) advanced
 13074                                  ;	USES	al, CX, SI, DI, Flags  (BUGBUG - not verified - jgl)
 13075                                  ;---------------------------------------------------------------------------
 13076                                  
 13077                                  PackName:
 13078                                  ;	Move over 8 characters to cover the name component, then trim it's
 13079                                  ;	trailing blanks.
 13080                                  
 13081 00002E17 B90800                  	MOV	CX,8			; Pack the name
 13082 00002E1A F3A4                    	REP	MOVSB			; Move all of it
 13083                                  main_kill_tail:
 13084 00002E1C 26807DFF20              	CMP	BYTE [ES:DI-1]," "
 13085 00002E21 7507                    	JNZ	short find_check_dot
 13086 00002E23 4F                      	DEC	DI			; Back up over trailing space
 13087 00002E24 41                      	INC	CX
 13088 00002E25 83F908                  	CMP	CX,8
 13089 00002E28 72F2                    	JB	short main_kill_tail
 13090                                  find_check_dot:
 13091                                  	;CMP	WORD [SI],(" " << 8) | " "
 13092 00002E2A 813C2020                	cmp     word [si],2020h 
 13093 00002E2E 7506                    	JNZ	short got_ext 		; Some chars in extension
 13094 00002E30 807C0220                	CMP	BYTE [SI+2]," "
 13095 00002E34 7412                    	JZ	short find_done		; No extension
 13096                                  got_ext:
 13097 00002E36 B02E                    	MOV	AL,"."
 13098 00002E38 AA                      	STOSB
 13099 00002E39 B90300                  	MOV	CX,3
 13100 00002E3C F3A4                    	REP	MOVSB
 13101                                  ext_kill_tail:
 13102 00002E3E 26807DFF20              	CMP	BYTE [ES:DI-1]," "
 13103 00002E43 7503                    	JNZ	short find_done
 13104 00002E45 4F                      	DEC	DI			; Back up over trailing space
 13105 00002E46 EBF6                    	JMP	short ext_kill_tail
 13106                                  find_done:
 13107 00002E48 31C0                    	XOR	AX,AX
 13108 00002E4A AA                      	STOSB				; NUL terminate
 13109 00002E4B C3                      	retn
 13110                                  
 13111                                  ;GET_FAST_SEARCH:
 13112                                  ;	; 22/07/2018
 13113                                  ;	; MSDOS 6.0
 13114                                  ;	OR	word [DOS34_FLAG],SEARCH_FASTOPEN 
 13115                                  ;					;FO.trigger fastopen ;AN000;
 13116                                  ;	call	DOS_SEARCH_FIRST
 13117                                  ;	retn
 13118                                  
 13119                                  
 13120                                  ;============================================================================
 13121                                  ; PATH.ASM, MSDOS 6.0, 1991
 13122                                  ;============================================================================
 13123                                  ; 06/08/2018 - Retro DOS v3.0
 13124                                  
 13125                                  ;**	Directory related system calls. These will be passed direct text of the
 13126                                  ;	pathname from the user. They will need to be passed through the macro
 13127                                  ;	expander prior to being sent through the low-level stuff. I/O specs are
 13128                                  ;	defined in DISPATCH. The system calls are:
 13129                                  ;
 13130                                  ;	$CURRENT_DIR  Written
 13131                                  ;	$RMDIR	  Written
 13132                                  ;	$CHDIR	  Written
 13133                                  ;	$MKDIR	  Written
 13134                                  ;
 13135                                  ;
 13136                                  ;	Modification history:
 13137                                  ;
 13138                                  ;	    Created: ARR 4 April 1983
 13139                                  ;		 MZ 10 May 1983     CurrentDir implemented
 13140                                  ;		 MZ 11 May 1983     RmDir, ChDir, MkDir implemented
 13141                                  ;		 EE 19 Oct 1983     RmDir no longer allows you to delete a
 13142                                  ;				    current directory.
 13143                                  ;		 MZ 19 Jan 1983     Brain damaged applications rely on success
 13144                                  
 13145                                  ;	I_Need	ThisCDS,DWORD		; pointer to Current CDS
 13146                                  ;	I_Need	WFP_Start,WORD		; pointer to beginning of directory text
 13147                                  ;	I_Need	Curr_Dir_End,WORD	; offset to end of directory part
 13148                                  ;	I_Need	OpenBuf,128		; temp spot for translated name
 13149                                  ;	I_need	fSplice,BYTE		; TRUE => do splice
 13150                                  ;	I_Need	NoSetDir,BYTE		; TRUE => no exact match on splice
 13151                                  ;	I_Need	cMeta,BYTE
 13152                                  ;	I_Need	DrvErr,BYTE					;AN000;
 13153                                  
 13154                                  
 13155                                  ;BREAK <$CURRENT_DIR - dump the current directory into user space>
 13156                                  ;---------------------------------------------------------------------------
 13157                                  ;
 13158                                  ;   Procedure Name : $CURRENT_DIR
 13159                                  ;
 13160                                  ;   Assembler usage:
 13161                                  ;		LDS	SI,area
 13162                                  ;		MOV	DL,drive
 13163                                  ;		INT	21h
 13164                                  ;	    ; DS:SI is a pointer to 64 byte area that contains drive
 13165                                  ;	    ; current directory.
 13166                                  ;   Error returns:
 13167                                  ;	    AX = error_invalid_drive
 13168                                  ;
 13169                                  ;---------------------------------------------------------------------------
 13170                                  
 13171                                  _$CURRENT_DIR:
 13172                                  	;06/08/2018 - Retro DOS v3.0
 13173                                  	;IBMDOS.COM (MSDOS 3.3, 1987) - Offset 2D4Eh
 13174 00002E4C E81DF2                  	call	EcritDisk
 13175 00002E4F 88D0                    	MOV	AL,DL			; get drive number (0=def, 1=A)
 13176 00002E51 E8063B                  	call	GetVisDrv		; grab it
 13177 00002E54 7308                    	JNC	short CurrentValidate 	; no error -> go and validate dir
 13178                                  CurdirErr:
 13179 00002E56 E81BF2                  	call	LcritDisk
 13180                                  	
 13181                                  	; MSDOS 6.0
 13182                                  	;MOV	AL,[CS:DrvErr]		;IFS.			;AN000;
 13183                                  
 13184                                  	; MSDOS 3.3
 13185 00002E59 B00F                    	mov	al,0Fh
 13186                                  
 13187                                  curdir_errj:
 13188 00002E5B E9ABE8                  	jmp	SYS_RET_ERR		;IFS. make noise	;AN000;
 13189                                  
 13190                                  CurrentValidate:
 13191 00002E5E 1E                      	push	ds		; save destination
 13192 00002E5F 56                      	push	si
 13193 00002E60 2EC536[3A05]            	LDS	SI,[CS:THISCDS]
 13194                                  	;TEST	word [SI+curdir.flags],curdir_isnet
 13195                                  	;JNZ	short DoCheck
 13196                                  ; Random optimization nuked due to some utilities using GetCurrentDir to do
 13197                                  ; media check.
 13198                                  ;	CMP	word [SI+curdir.ID],0
 13199                                  ;	JZ	short GetDst
 13200                                  DoCheck:
 13201 00002E65 2EC606[F802]00          	MOV	byte [cs:NoSetDir],0	; interested only in contents
 13202                                  
 13203 00002E6B BF[6003]                	MOV	DI,OPENBUF
 13204                                  
 13205 00002E6E E8FD1C                  	call	ValidateCDS		; output is ES:DI -> CDS
 13206 00002E71 06                      	push	es	 		; swap source and destination
 13207 00002E72 57                      	push	di
 13208 00002E73 5E                      	pop	si
 13209 00002E74 1F                      	pop	ds
 13210                                  GetDst:
 13211 00002E75 5F                      	pop	di
 13212 00002E76 07                      	pop	es			; get real destination
 13213 00002E77 72DD                    	JC	short CurdirErr
 13214                                  	;ADD	SI,curdir.text ; add si,0 ; 09/08/2018
 13215 00002E79 03744F                  	ADD	SI,[SI+curdir.end]
 13216 00002E7C 803C5C                  	CMP	BYTE [SI],'\'		; root or subdirs present?
 13217 00002E7F 7501                    	JNZ	short CurrentCopy
 13218 00002E81 46                      	INC	SI
 13219                                  CurrentCopy:
 13220                                  ;	call	FStrCpy
 13221                                  ;; 10/29/86 E5 char
 13222 00002E82 50                      	PUSH	AX
 13223 00002E83 AC                      	LODSB				; get char
 13224 00002E84 08C0                    	OR	AL,AL
 13225 00002E86 7413                    	JZ	short FOK
 13226 00002E88 3C05                    	CMP	AL,05
 13227 00002E8A 740D                    	JZ	short FCHANGE
 13228 00002E8C EB01                    	JMP	short FFF
 13229                                  FCPYNEXT:
 13230 00002E8E AC                      	LODSB				; get char
 13231                                  FFF:
 13232 00002E8F 3C5C                    	CMP	AL,'\'			; beginning of directory
 13233 00002E91 7508                    	JNZ	short FOK		; no
 13234 00002E93 AA                      	STOSB				; put into user's buffer
 13235 00002E94 AC                      	LODSB				; 1st char of dir is 05?
 13236 00002E95 3C05                    	CMP	AL,05H
 13237 00002E97 7502                    	JNZ	short FOK		; no
 13238                                  FCHANGE:
 13239 00002E99 B0E5                    	MOV	AL,0E5H			; make it E5
 13240                                  FOK:
 13241 00002E9B AA                      	STOSB				; put into user's buffer
 13242 00002E9C 08C0                    	OR	AL,AL			; final char
 13243 00002E9E 75EE                    	JNZ	short FCPYNEXT		; no
 13244 00002EA0 58                      	POP	AX
 13245                                  
 13246                                  ;; 10/29/86 E5 char
 13247 00002EA1 30C0                    	xor	AL,AL			; MZ 19 Jan 84
 13248 00002EA3 E8CEF1                  	call	LcritDisk
 13249 00002EA6 E954E8                  	jmp	SYS_RET_OK		; no more, bye!
 13250                                  
 13251                                  
 13252                                  ;BREAK <$RmDir -- Remove a directory>
 13253                                  ;---------------------------------------------------------------------------
 13254                                  ;
 13255                                  ; Procedure Name : $RmDir
 13256                                  ;
 13257                                  ; Inputs:
 13258                                  ;	DS:DX Points to asciz name
 13259                                  ; Function:
 13260                                  ;	Delete directory if empty
 13261                                  ; Returns:
 13262                                  ;	STD XENIX Return
 13263                                  ;	AX = error_path_not_found If path bad
 13264                                  ;	AX = error_access_denied If
 13265                                  ;		Directory not empty
 13266                                  ;		Path not directory
 13267                                  ;		Root directory specified
 13268                                  ;		Directory malformed (. and .. not first two entries)
 13269                                  ;		User tries to delete a current directory
 13270                                  ;	AX = error_current_directory
 13271                                  ;
 13272                                  ;----------------------------------------------------------------------------
 13273                                  
 13274                                  _$RMDIR:
 13275 00002EA9 52                      	push	dx			; Save ptr to name
 13276 00002EAA 1E                      	push	ds
 13277 00002EAB 89D6                    	mov	si,dx			; Load ptr into si
 13278 00002EAD BF[6003]                	mov	di,OPENBUF		; di = ptr to buf for trans name
 13279 00002EB0 57                      	push	di
 13280 00002EB1 E8A43B                  	call	TransPathNoSet		; Translate the name
 13281 00002EB4 5F                      	pop	di			; di = ptr to buf for trans name
 13282 00002EB5 7307                    	jnc	short rmlset		; If transpath succeeded, continue
 13283 00002EB7 1F                      	pop	ds
 13284 00002EB8 5A                      	pop	dx			; Restore the	 name
 13285 00002EB9 B003                    	mov	al,error_path_not_found ; Otherwise, return an error
 13286                                  	;jmp	short curdir_errj
 13287                                  rmdir_errj: ; 10/08/2018
 13288 00002EBB E94BE8                  	jmp	SYS_RET_ERR
 13289                                  rmlset:
 13290 00002EBE 36803E[1505]FF          	CMP	byte [ss:CMETA],-1	;   if (cMeta >= 0)
 13291 00002EC4 7512                    	Jnz	short rmerr		;	return (-1);
 13292 00002EC6 16                      	push	ss
 13293 00002EC7 07                      	pop	es
 13294 00002EC8 30C0                    	xor	al,al			; al = 0 , ie drive a:
 13295                                  rmloop: 
 13296 00002ECA E8F73A                  	call	GetCDSFromDrv		; Get curdir for drive in al
 13297 00002ECD 720F                    	jc	short rmcont		; If error, exit loop & cont normally
 13298 00002ECF E862F0                  	call	StrCmp			; Are the 2 paths the same?
 13299 00002ED2 7404                    	jz	short rmerr		; Yes, report error.
 13300 00002ED4 FEC0                    	inc	al			; No, inc al to next drive number
 13301 00002ED6 EBF2                    	jmp	short rmloop		; Go check next drive.
 13302                                  rmerr:
 13303 00002ED8 1F                      	pop	ds
 13304 00002ED9 5A                      	pop	dx			; Restore the name
 13305 00002EDA B010                    	mov	al,error_current_directory ;  error
 13306                                  	;jmp	short curdir_errj
 13307 00002EDC EBDD                    	jmp	short rmdir_errj
 13308                                  rmcont:
 13309 00002EDE 1F                      	pop	ds
 13310 00002EDF 5A                      	pop	dx			; Restore the name
 13311 00002EE0 BE[1F3D]                	MOV	SI,DOS_RMDIR
 13312 00002EE3 EB75                    	JMP	short DoDirCall ; 07/09/2018
 13313                                  
 13314                                  ;BREAK <$ChDir -- Change current directory on a drive>
 13315                                  ;----------------------------------------------------------------------------
 13316                                  ;
 13317                                  ; $ChDir - Top-level change directory system call.  This call is responsible
 13318                                  ; for setting up the CDS for the specified drive appropriately.  There are
 13319                                  ; several cases to consider:
 13320                                  ;
 13321                                  ;   o	Local, simple CDS.  In this case, we take the input path and convert
 13322                                  ;	it into a WFP.	We verify the existance of this directory and then
 13323                                  ;	copy the WFP into the CDS and set up the ID field to point to the
 13324                                  ;	directory cluster.
 13325                                  ;   o	Net CDS.  We form the path from the root (including network prefix)
 13326                                  ;	and verify its existance (via DOS_Chdir).  If successful, we copy the
 13327                                  ;	WFP back into the CDS.
 13328                                  ;   o	SUBST'ed CDS.  This is no different than the local, simple CDS.
 13329                                  ;   o	JOIN'ed CDS.  This is trouble as there are two CDS's at work.  If we
 13330                                  ;	call TransPath, we will get the PHYSICAL CDS that the path refers to
 13331                                  ;	and the PHYSICAL WFP that the input path refers to.  This is perfectly
 13332                                  ;	good for the validation but not for currency.  We call TransPathNoSet
 13333                                  ;	to process the path but to return the logical CDS and the logical
 13334                                  ;	path.  We then copy the logical path into the logical CDS.
 13335                                  ;
 13336                                  ; Inputs:
 13337                                  ;	DS:DX Points to asciz name
 13338                                  ; Returns:
 13339                                  ;	STD XENIX Return
 13340                                  ;	AX = chdir_path_not_found if error
 13341                                  ;
 13342                                  ;----------------------------------------------------------------------------
 13343                                  
 13344                                  _$CHDIR:
 13345 00002EE5 BF[6003]                	MOV	DI,OPENBUF		; spot for translated name
 13346 00002EE8 89D6                    	MOV	SI,DX			; get source
 13347 00002EEA E85F3B                  	call	TransPath		; go munge the path and get real CDS
 13348 00002EED 7305                    	JNC	short ChDirCrack	; no errors, try path
 13349                                  ChDirErrP:
 13350 00002EEF B003                    	MOV	AL,error_path_not_found
 13351                                  ChDirErr:
 13352 00002EF1 E915E8                  	jmp	SYS_RET_ERR 	; oops!
 13353                                  
 13354                                  ChDirCrack:
 13355 00002EF4 803E[1505]FF            	CMP	byte [CMETA],-1		; No meta chars allowed.
 13356 00002EF9 75F4                    	JNZ	short ChDirErrP
 13357                                  ;
 13358                                  ; We cannot do a ChDir (yet) on a raw CDS.  This is treated as a path not
 13359                                  ; found.
 13360                                  ;
 13361 00002EFB C43E[3A05]              	LES	DI,[THISCDS]
 13362 00002EFF 83FFFF                  	CMP	DI,-1			;   if (ThisCDS == NULL)
 13363 00002F02 74EB                    	JZ	short ChDirErrP		;	error ();
 13364                                   ;
 13365                                   ; Find out if the directory exists.
 13366                                   ;
 13367 00002F04 E8E30D                  	call	DOS_CHDIR
 13368 00002F07 72E8                    	Jc	short ChDirErr
 13369                                  ;
 13370                                  ; Get back CDS to see if a join as seen.  Set the currency pointer (only if
 13371                                  ; not network).  If one was seen, all we need to do is copy in the text
 13372                                  ;
 13373 00002F09 C43E[3A05]              	LES	DI,[THISCDS]
 13374 00002F0D 26F745430020            	TEST	word [ES:DI+curdir.flags],curdir_splice
 13375 00002F13 7425                    	JZ	short GotCDS
 13376                                  ;
 13377                                  ; The CDS was joined.  Let's go back and grab the logical CDS.
 13378                                  ;
 13379 00002F15 06                      	push	es	
 13380 00002F16 57                      	push	di
 13381 00002F17 51                      	push	cx			; save CDS and cluster...
 13382 00002F18 E8F0E6                  	call	Get_User_Stack		; get original text
 13383 00002F1B 8B7C06                  	MOV	DI,[SI+user_env.user_DX]
 13384 00002F1E 8E5C0E                  	MOV	DS,[SI+user_env.user_DS]
 13385 00002F21 BE[6003]                	MOV	SI,OPENBUF		; spot for translated name
 13386 00002F24 87F7                    	XCHG	SI,DI
 13387 00002F26 30C0                    	XOR	AL,AL			; do no splicing
 13388 00002F28 57                      	push	di
 13389 00002F29 E82C3B                  	call	TransPathNoSet		; Munge path
 13390 00002F2C 5E                      	pop	si
 13391                                  ;
 13392                                  ; There should NEVER be an error here.
 13393                                  ;
 13394                                  
 13395                                  ;IF FALSE
 13396                                  ;	JNC SKipErr
 13397                                  ;	fmt <>,<>,<"$p: Internal CHDIR error\n">
 13398                                  ;SkipErr:
 13399                                  ;ENDIF
 13400 00002F2D C43E[3A05]              	LES	DI,[THISCDS]		; get new CDS
 13401 00002F31 26C74549FFFF            	MOV	word [ES:DI+curdir.ID],-1
 13402                                  					; no valid cluster here...
 13403 00002F37 59                      	pop	cx
 13404 00002F38 5F                      	pop	di
 13405 00002F39 07                      	pop	es
 13406                                  ;
 13407                                  ; ES:DI point to the physical CDS, CX is the ID (local only)
 13408                                  ;
 13409                                  GotCDS:
 13410                                  ;
 13411                                  ; wfp_start points to the text.  See if it is long enough
 13412                                  ;
 13413                                  	; MSDOS 3.3
 13414                                  	;push	ss
 13415                                  	;pop	ds
 13416                                  	;mov	si,[WFP_START]
 13417                                  	;push	cx
 13418                                  	;call	DStrLen
 13419                                  	;cmp	cx,67 ; cmp cx,DIRSTRLEN
 13420                                  	;pop	cx
 13421                                  	;ja	short ChDirErrP
 13422                                  
 13423                                  	; MSDOS 6.0
 13424 00002F3A E84800                  	CALL	Check_PathLen		;PTM.		;AN000;
 13425 00002F3D 77B0                    	JA	short ChDirErrP
 13426                                  	; MSDOS 3.3 (& MSDOS 6.0)
 13427 00002F3F 26F745430080            	TEST	word [ES:DI+curdir.flags],curdir_isnet
 13428 00002F45 7508                    	JNZ	short SkipRecency
 13429                                  	; MSDOS 6.0
 13430                                  	;TEST	word [ES:DI+curdir.flags],curdir_splice 
 13431                                  	;				;PTM. for Join and Subst ;AN000;
 13432                                  	;JZ	short setdirclus	;PTM.		;AN000;
 13433                                  	;MOV	CX,-1			;PTM.		;AN000;
 13434                                  ;setdirclus:
 13435 00002F47 26894D49                	MOV	[ES:DI+curdir.ID],CX
 13436 00002F4B C43E[3A05]              	LES	DI,[THISCDS]		; get logical CDS
 13437                                  SkipRecency:
 13438 00002F4F E80FF0                  	call	FStrCpy
 13439 00002F52 30C0                    	XOR	AL,AL
 13440                                  mkdir_ok:
 13441 00002F54 E9A6E7                  	jmp	SYS_RET_OK
 13442                                  
 13443                                  
 13444                                  ;BREAK <$MkDir - Make a directory entry>
 13445                                  ;---------------------------------------------------------------------------
 13446                                  ;
 13447                                  ; Procedure Name : $MkDir
 13448                                  ; Inputs:
 13449                                  ;	DS:DX Points to asciz name
 13450                                  ; Function:
 13451                                  ;	Make a new directory
 13452                                  ; Returns:
 13453                                  ;	STD XENIX Return
 13454                                  ;	AX = mkdir_path_not_found if path bad
 13455                                  ;	AX = mkdir_access_denied  If
 13456                                  ;		Directory cannot be created
 13457                                  ;		Node already exists
 13458                                  ;		Device name given
 13459                                  ;		Disk or directory(root) full
 13460                                  ;---------------------------------------------------------------------------
 13461                                  
 13462                                  _$MKDIR:
 13463 00002F57 BE[083C]                	MOV	SI,DOS_MKDIR
 13464                                  DoDirCall:
 13465 00002F5A BF[6003]                	MOV	DI,OPENBUF		; spot for translated name
 13466                                  
 13467 00002F5D 56                      	push	si
 13468 00002F5E 89D6                    	MOV	SI,DX			; get source
 13469 00002F60 E8E93A                  	call	TransPath		; go munge the path
 13470 00002F63 5E                      	pop	si
 13471 00002F64 7305                    	JNC	short MkDirCrack	; no errors, try path
 13472                                  MkErrP:
 13473 00002F66 B003                    	MOV	AL,error_path_not_found	; oops!
 13474                                  MkErr:
 13475 00002F68 E99EE7                  	jmp	SYS_RET_ERR
 13476                                  MkDirCrack:
 13477 00002F6B 36803E[1505]FF          	CMP	byte [SS:CMETA],-1
 13478 00002F71 75F3                    	JNZ	short MkErrP
 13479                                  
 13480                                  	; MSDOS 3.3
 13481                                  	;push	ss
 13482                                  	;pop	ds
 13483                                  	;call	si
 13484                                  	;jb	short MkErr
 13485                                  	;;jmp	short mkdir_ok
 13486                                  	;jmp	SYS_RET_OK
 13487                                  
 13488                                  	; MSDOS 6.0
 13489 00002F73 56                      	PUSH	SI			;PTM.			;AN000;
 13490 00002F74 E80E00                  	CALL	Check_PathLen		;PTM. check path len > 67 ? ;AN000;
 13491 00002F77 5E                      	POP	SI			;PTM.			;AN000;
 13492 00002F78 7604                    	JBE	short pathok		;PTM.			;AN000;
 13493 00002F7A B005                    	MOV	AL,error_access_denied	;PTM. ops!
 13494                                  	;jmp	SYS_RET_ERR		;PTM.
 13495 00002F7C EBEA                    	jmp	short MkErr
 13496                                  pathok:
 13497 00002F7E FFD6                    	CALL	SI			; go get file
 13498 00002F80 72E6                    	JC	short MkErr		; no errors
 13499                                  	;jmp	short mkdir_ok
 13500 00002F82 E978E7                  	jmp	SYS_RET_OK
 13501                                  
 13502                                  ;----------------------------------------------------------------------------
 13503                                  ;
 13504                                  ; Procedure Name : Check_PathLen
 13505                                  ;
 13506                                  ; Inputs:
 13507                                  ;	nothing
 13508                                  ; Function:
 13509                                  ;	check if final path length greater than 67
 13510                                  ; Returns:
 13511                                  ;	Above flag set if > 67
 13512                                  ;
 13513                                  ;---------------------------------------------------------------------------
 13514                                  
 13515                                  Check_PathLen:
 13516                                  	; 09/09/2018
 13517                                  	;;MOV	SI,[WFP_START]
 13518                                  	;MOV	SI,[SS:WFP_START] ; MSDOS 6.0
 13519                                  ;check_PathLen2:
 13520 00002F85 16                      	push	ss
 13521 00002F86 1F                      	pop	ds
 13522 00002F87 8B36[4A05]              	mov	SI,[WFP_START] ; MSDOS 3.3
 13523 00002F8B 51                      	push	CX	
 13524 00002F8C E8E9EF                  	CALL	DStrLen
 13525 00002F8F 83F943                  	CMP	CX,DIRSTRLEN
 13526 00002F92 59                      	POP	CX
 13527 00002F93 C3                      	retn
 13528                                  
 13529                                  ;============================================================================
 13530                                  ; IOCTL.ASM, MSDOS 6.0, 1991
 13531                                  ;============================================================================
 13532                                  ; 07/08/2018 - Retro DOS v3.0
 13533                                  
 13534                                  ;**	IOCTL system call.
 13535                                  ;
 13536                                  ;	$IOCTL
 13537                                  ;
 13538                                  ;	  Revision history:
 13539                                  ;
 13540                                  ;		Created: ARR 4 April 1983
 13541                                  ;
 13542                                  ;		GenericIOCTL added:		KGS	22 April 1985
 13543                                  ;
 13544                                  ;		A000	version 4.00	Jan. 1988
 13545                                  ;
 13546                                  ;		Used jump table to dispatch IOCTL functions. HKN 3/12/90
 13547                                  ;
 13548                                  
 13549                                  ;BREAK <IOCTL - munge on a handle to do device specific stuff>
 13550                                  ;---------------------------------------------------------------------------
 13551                                  ;
 13552                                  ;   Assembler usage:
 13553                                  ;	    MOV     BX, Handle
 13554                                  ;	    MOV     DX, Data
 13555                                  ;
 13556                                  ;	(or LDS     DX,BUF
 13557                                  ;	    MOV     CX,COUNT)
 13558                                  ;
 13559                                  ;	    MOV     AH, Ioctl
 13560                                  ;	    MOV     AL, Request
 13561                                  ;	    INT     21h
 13562                                  ;
 13563                                  ;   AH = 0  Return a combination of low byte of sf_flags and device driver
 13564                                  ;	    attribute word in DX, handle in BX:
 13565                                  ;	    DH = high word of device driver attributes
 13566                                  ;	    DL = low byte of sf_flags
 13567                                  ;	 1  Set the bits contained in DX to sf_flags.  DH MUST be 0.  Handle
 13568                                  ;	    in BX.
 13569                                  ;	 2  Read CX bytes from the device control channel for handle in BX
 13570                                  ;	    into DS:DX.  Return number read in AX.
 13571                                  ;	 3  Write CX bytes to the device control channel for handle in BX from
 13572                                  ;	    DS:DX.  Return bytes written in AX.
 13573                                  ;	 4  Read CX bytes from the device control channel for drive in BX
 13574                                  ;	    into DS:DX.  Return number read in AX.
 13575                                  ;	 5  Write CX bytes to the device control channel for drive in BX from
 13576                                  ;	    DS:DX.  Return bytes written in AX.
 13577                                  ;	 6  Return input status of handle in BX. If a read will go to the
 13578                                  ;	    device, AL = 0FFh, otherwise 0.
 13579                                  ;	 7  Return output status of handle in BX. If a write will go to the
 13580                                  ;	    device, AL = 0FFh, otherwise 0.
 13581                                  ;	 8  Given a drive in BX, return 1 if the device contains non-
 13582                                  ;	    removable media, 0 otherwise.
 13583                                  ;	 9  Return the contents of the device attribute word in DX for the
 13584                                  ;	    drive in BX.  0200h is the bit for shared.	1000h is the bit for
 13585                                  ;	    network. 8000h is the bit for local use.
 13586                                  ;	 A  Return 8000h if the handle in BX is for the network or not.
 13587                                  ;	 B  Change the retry delay and the retry count for the system. BX is
 13588                                  ;	    the count and CX is the delay.
 13589                                  ;
 13590                                  ;   Error returns:
 13591                                  ;	    AX = error_invalid_handle
 13592                                  ;	       = error_invalid_function
 13593                                  ;	       = error_invalid_data
 13594                                  ;
 13595                                  ;-------------------------------------------------------------------------------
 13596                                  ;
 13597                                  ;   This is the documentation copied from DOS 4.0 it is much better
 13598                                  ;   than the above
 13599                                  ;
 13600                                  ;	There are several basic forms of IOCTL calls:
 13601                                  ;
 13602                                  ;
 13603                                  ;	** Get/Set device information:	**
 13604                                  ;
 13605                                  ;	ENTRY	(AL) = function code
 13606                                  ;		  0 - Get device information
 13607                                  ;		  1 - Set device information
 13608                                  ;		(BX) = file handle
 13609                                  ;		(DX) = info for "Set Device Information"
 13610                                  ;	EXIT	'C' set if error
 13611                                  ;		  (AX) = error code
 13612                                  ;		'C' clear if OK
 13613                                  ;		  (DX) = info for "Get Device Information"
 13614                                  ;	USES	ALL
 13615                                  ;
 13616                                  ;
 13617                                  ;	**  Read/Write Control Data From/To Handle  **
 13618                                  ;
 13619                                  ;	ENTRY	(AL) = function code
 13620                                  ;		  2 - Read device control info
 13621                                  ;		  3 - Write device control info
 13622                                  ;		(BX) = file handle
 13623                                  ;		(CX) = transfer count
 13624                                  ;		(DS:DX) = address for data
 13625                                  ;	EXIT	'C' set if error
 13626                                  ;		  (AX) = error code
 13627                                  ;		'C' clear if OK
 13628                                  ;		  (AX) = count of bytes transfered
 13629                                  ;	USES	ALL
 13630                                  ;
 13631                                  ;
 13632                                  ;	**  Read/Write Control Data From/To Block Device  **
 13633                                  ;
 13634                                  ;	ENTRY	(AL) = function code
 13635                                  ;		  4 - Read device control info
 13636                                  ;		  5 - Write device control info
 13637                                  ;		(BL) = Drive number (0=default, 1='A', 2='B', etc)
 13638                                  ;		(CX) = transfer count
 13639                                  ;		(DS:DX) = address for data
 13640                                  ;	EXIT	'C' set if error
 13641                                  ;		  (AX) = error code
 13642                                  ;		'C' clear if OK
 13643                                  ;		  (AX) = count of bytes transfered
 13644                                  ;	USES	ALL
 13645                                  ;
 13646                                  ;
 13647                                  ;	**  Get Input/Output Status  **
 13648                                  ;
 13649                                  ;	ENTRY	(AL) = function code
 13650                                  ;		  6 - Get Input status
 13651                                  ;		  7 - Get Output Status
 13652                                  ;		(BX) = file handle
 13653                                  ;	EXIT	'C' set if error
 13654                                  ;		  (AX) = error code
 13655                                  ;		'C' clear if OK
 13656                                  ;		  (AL) = 00 if not ready
 13657                                  ;		  (AL) = FF if ready
 13658                                  ;	USES	ALL
 13659                                  ;
 13660                                  ;
 13661                                  ;	**  Get Drive Information  **
 13662                                  ;
 13663                                  ;	ENTRY	(AL) = function code
 13664                                  ;		  8 - Check for removable media
 13665                                  ;		  9 - Get device attributes
 13666                                  ;		(BL) = Drive number (0=default, 1='A', 2='B', etc)
 13667                                  ;	EXIT	'C' set if error
 13668                                  ;		  (AX) = error code
 13669                                  ;		'C' clear if OK
 13670                                  ;		  (AX) = 0/1 media is removable/fixed (func. 8)
 13671                                  ;		  (DX) = device attribute word (func. 9)
 13672                                  ;	USES	ALL
 13673                                  ;
 13674                                  ;
 13675                                  ;	**  Get Redirected bit	**
 13676                                  ;
 13677                                  ;	ENTRY	(AL) = function code
 13678                                  ;		  0Ah - Network stuff
 13679                                  ;		(BX) = file handle
 13680                                  ;	EXIT	'C' set if error
 13681                                  ;		  (AX) = error code
 13682                                  ;		'C' clear if OK
 13683                                  ;		  (DX) = SFT flags word, 8000h set if network file
 13684                                  ;	USES	ALL
 13685                                  ;
 13686                                  ;
 13687                                  ;	**  Change sharer retry parameters  **
 13688                                  ;
 13689                                  ;	ENTRY	(AL) = function code
 13690                                  ;		  0Bh - Set retry parameters
 13691                                  ;		(CX) = retry loop count
 13692                                  ;		(DX) = number of retries
 13693                                  ;	EXIT	'C' set if error
 13694                                  ;		  (AX) = error code
 13695                                  ;		'C' clear if OK
 13696                                  ;	USES	ALL
 13697                                  ;
 13698                                  ;
 13699                                  ;   =================================================================
 13700                                  ;
 13701                                  ;	**  New Standard Control  **
 13702                                  ;
 13703                                  ;	ALL NEW IOCTL FACILITIES SHOULD USE THIS FORM.	THE OTHER
 13704                                  ;	FORMS ARE OBSOLETE.
 13705                                  ;
 13706                                  ;   =================================================================
 13707                                  ;
 13708                                  ;	ENTRY	(AL) = function code
 13709                                  ;		  0Ch - Control Function subcode
 13710                                  ;		(BX) = File Handle
 13711                                  ;		(CH) = Category Indicator
 13712                                  ;		(CL) = Function within category
 13713                                  ;		(DS:DX) = address for data, if any
 13714                                  ;		(SI) = Passed to device as argument, use depends upon function
 13715                                  ;		(DI) = Passed to device as argument, use depends upon function
 13716                                  ;	EXIT	'C' set if error
 13717                                  ;		  (AX) = error code
 13718                                  ;		'C' clear if OK
 13719                                  ;		  (SI) = Return value, meaning is function dependent
 13720                                  ;		  (DI) = Return value, meaning is function dependent
 13721                                  ;		  (DS:DX) = Return address, use is function dependent
 13722                                  ;	USES	ALL
 13723                                  ;
 13724                                  ;    ============== Generic IOCTL Definitions for DOS 3.2 ============
 13725                                  ;     (See inc\ioctl.inc for more info)
 13726                                  ;
 13727                                  ;	ENTRY	(AL) = function code
 13728                                  ;		  0Dh - Control Function subcode
 13729                                  ;		(BL) = Drive Number (0 = Default, 1= 'A')
 13730                                  ;		(CH) = Category Indicator
 13731                                  ;		(CL) = Function within category
 13732                                  ;		(DS:DX) = address for data, if any
 13733                                  ;		(SI) = Passed to device as argument, use depends upon function
 13734                                  ;		(DI) = Passed to device as argument, use depends upon function
 13735                                  ;
 13736                                  ;	EXIT	'C' set if error
 13737                                  ;		  (AX) = error code
 13738                                  ;		'C' clear if OK
 13739                                  ;		  (DS:DX) = Return address, use is function dependent
 13740                                  ;	USES	ALL
 13741                                  ;
 13742                                  ;---------------------------------------------------------------------------
 13743                                  	
 13744                                  	; MSDOS 6.0
 13745                                  IOCTLJMPTABLE:	;label	word
 13746                                  	; MSDOS 3.3 (& MSDOS 6.0)
 13747 00002F94 [CC2F]                  	dw	ioctl_getset_data	; 0
 13748 00002F96 [CC2F]                  	dw	ioctl_getset_data   	; 1
 13749 00002F98 [1B30]                  	dw	ioctl_control_string	; 2
 13750 00002F9A [1B30]                  	dw	ioctl_control_string	; 3
 13751 00002F9C [7331]                  	dw	ioctl_get_dev		; 4
 13752 00002F9E [7331]                  	dw	ioctl_get_dev		; 5
 13753 00002FA0 [3630]                  	dw	ioctl_status		; 6
 13754 00002FA2 [3630]                  	dw	ioctl_status		; 7
 13755 00002FA4 [CC30]                  	dw	ioctl_rem_media		; 8
 13756 00002FA6 [0B31]                  	dw	Ioctl_Drive_attr	; 9
 13757 00002FA8 [6231]                  	dw	IOCTL_Handle_Redir	; A
 13758 00002FAA [5530]                  	dw	Set_Retry_Parameters	; B
 13759 00002FAC [6430]                  	dw	GENERICIOCTLHANDLE	; C
 13760 00002FAE [7C30]                  	dw	GENERICIOCTL		; D
 13761                                  	; MSDOS 6.0 (& MSDOS 3.3)
 13762 00002FB0 [2632]                  	dw	ioctl_drive_owner	; E
 13763 00002FB2 [2632]                  	dw	ioctl_drive_owner	; F
 13764                                  	; MSDOS 6.0
 13765                                  	;dw	query_handle_support	; 10h
 13766                                  	;dw	query_device_support	; 11h
 13767                                  
 13768                                  _$IOCTL:
 13769 00002FB4 8CDE                    	MOV	SI,DS			; Stash DS for calls 2,3,4 and 5
 13770 00002FB6 16                      	push	ss
 13771 00002FB7 1F                      	pop	ds			;hkn; SS is DOSDATA
 13772                                  
 13773                                  	; MSDOS 3.3
 13774 00002FB8 3C0F                    	cmp	al,0Fh 
 13775                                  	; MSDOS 6.0
 13776                                  	;cmp	al,11h			; al must be between 0 & 11h
 13777 00002FBA 770D                    	ja	short ioctl_bad_funj2	; if not bad function #
 13778                                  
 13779                                  	; 09/09/2018
 13780                                  	;push	AX			; Need to save AL for generic IOCTL
 13781 00002FBC 89C7                    	mov	di,ax			; di NOT a PARM
 13782 00002FBE 81E7FF00                	and	di,0FFh			; di = al
 13783 00002FC2 D1E7                    	shl	di,1			; di = index into jmp table
 13784                                  	;pop	AX			; Restore AL for generic IOCTL
 13785                                  
 13786 00002FC4 2EFFA5[942F]            	jmp	word [CS:DI+IOCTLJMPTABLE]
 13787                                  
 13788                                  
 13789                                  ioctl_bad_funj2:
 13790 00002FC9 E9F800                  	JMP	ioctl_bad_fun  ; 10/08/2018
 13791                                  
 13792                                  ;--------------------------------------------------------------------------
 13793                                  ;
 13794                                  ; IOCTL: AL= 0,1
 13795                                  ;
 13796                                  ; ENTRY : DS = DOSDATA
 13797                                  ;
 13798                                  ;---------------------------------------------------------------------
 13799                                  
 13800                                  ioctl_getset_data:
 13801                                  	; MSDOS 6.0
 13802 00002FCC E82D38                  	call	SFFromHandle		; ES:DI -> SFT
 13803 00002FCF 7305                    	JNC	short ioctl_check_permissions ; have valid handle
 13804                                  ioctl_bad_handle:
 13805 00002FD1 B006                    	mov	al,error_invalid_handle
 13806                                  ioctl_error:
 13807 00002FD3 E933E7                  	jmp	SYS_RET_ERR
 13808                                  
 13809                                  ioctl_check_permissions:
 13810 00002FD6 3C00                    	CMP	AL,0
 13811 00002FD8 268A4505                	MOV	AL,[ES:DI+SF_ENTRY.sf_flags]; Get low byte of flags
 13812 00002FDC 741B                    	JZ	short ioctl_read	; read the byte
 13813                                  
 13814 00002FDE 08F6                    	or	dh, dh
 13815 00002FE0 7404                    	JZ	short ioctl_check_device ; can I set with this data?
 13816 00002FE2 B00D                    	mov	al,error_invalid_data	; no DH <> 0
 13817                                  	;jmp	SYS_RET_ERR
 13818 00002FE4 EBED                    	jmp	short ioctl_error
 13819                                  
 13820                                  ioctl_check_device:
 13821 00002FE6 A880                    	test	AL,devid_device 	; can I set this handle?
 13822 00002FE8 74DF                    	jz	short ioctl_bad_funj2
 13823 00002FEA 80CA80                  	OR	DL,devid_device 	; Make sure user doesn't turn off the
 13824                                  					;   device bit!! He can muck with the
 13825                                  					;   others at will.
 13826 00002FED C606[D102]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev
 13827 00002FF2 26885505                	MOV	BYTE [ES:DI+SF_ENTRY.sf_flags],DL  ;AC000;MS.; Set flags
 13828                                  
 13829                                  ioctl_ok:
 13830 00002FF6 E904E7                  	jmp	SYS_RET_OK
 13831                                  
 13832                                  ioctl_read:
 13833 00002FF9 C606[D102]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 13834 00002FFE 30E4                    	XOR	AH,AH
 13835 00003000 A880                    	test	AL,devid_device 	; Should I set high byte
 13836 00003002 740D                    	JZ	short ioctl_no_high	; no
 13837 00003004 C606[D102]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev
 13838 00003009 26C47D07                	LES	DI,[ES:DI+SF_ENTRY.sf_devptr] ; Get device pointer
 13839 0000300D 268A6505                	MOV	AH,[ES:DI+SYSDEV.ATT+1] ; Get high byte
 13840                                  ioctl_no_high:
 13841 00003011 89C2                    	MOV	DX,AX
 13842 00003013 E8F5E5                  	call	Get_User_Stack
 13843 00003016 895406                  	MOV	[SI+user_env.user_DX],DX
 13844                                  	;jmp	SYS_RET_OK
 13845 00003019 EBDB                    	jmp	short ioctl_ok
 13846                                  
 13847                                  ;--------------------------------------------------------------------------
 13848                                  ;
 13849                                  ; IOCTL: 2,3
 13850                                  ;
 13851                                  ; ENTRY : DS = DOSDATA
 13852                                  ;	  SI = user's DS
 13853                                  ;
 13854                                  ;--------------------------------------------------------------------------
 13855                                  
 13856                                  ioctl_control_string:
 13857                                  
 13858 0000301B E8DE37                  	call	SFFromHandle		; ES:DI -> SFT
 13859 0000301E 72B1                    	JC	short ioctl_bad_handle	; invalid handle
 13860 00003020 26F745058000            	TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device ; can I?
 13861 00003026 74A1                    	jz	short ioctl_bad_funj2			; No it is a file
 13862 00003028 C606[D102]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev
 13863 0000302D 26C47D07                	LES	DI,[ES:DI+SF_ENTRY.sf_devptr] ; Get device pointer
 13864 00003031 30DB                    	XOR	BL,BL			; Unit number of char dev = 0
 13865 00003033 E94201                  	JMP	ioctl_do_string
 13866                                  
 13867                                  ;--------------------------------------------------------------------------
 13868                                  ;
 13869                                  ; IOCTL: AL = 6,7
 13870                                  ;
 13871                                  ; ENTRY: DS = DOSDATA
 13872                                  ;
 13873                                  ;--------------------------------------------------------------------------
 13874                                  
 13875                                  ioctl_status:
 13876                                  
 13877 00003036 B401                    	MOV	AH,1
 13878 00003038 2C06                    	SUB	AL,6			; 6=0,7=1
 13879 0000303A 7402                    	JZ	short ioctl_get_status
 13880 0000303C B403                    	MOV	AH,3
 13881                                  ioctl_get_status:
 13882 0000303E 50                      	PUSH	AX
 13883 0000303F E87810                  	call	GET_IO_SFT
 13884 00003042 58                      	POP	AX
 13885 00003043 7302                    	JNC	short DO_IOFUNC
 13886 00003045 EB8A                    	JMP	short ioctl_bad_handle	; invalid SFT
 13887                                  
 13888                                  DO_IOFUNC:
 13889 00003047 E8031D                  	call	IOFUNC
 13890 0000304A 88C4                    	MOV	AH,AL
 13891 0000304C B0FF                    	MOV	AL,0FFH
 13892 0000304E 7502                    	JNZ	short ioctl_status_ret
 13893 00003050 FEC0                    	INC	AL
 13894                                  ioctl_status_ret:
 13895 00003052 E9A8E6                  	jmp	SYS_RET_OK
 13896                                  
 13897                                  ;------------------------------------------------------------------------
 13898                                  ;
 13899                                  ; IOCTL: AL = B
 13900                                  ;
 13901                                  ; ENTRY: DS = DOSDATA
 13902                                  ;
 13903                                  ;-------------------------------------------------------------------------
 13904                                  
 13905                                  Set_Retry_Parameters:
 13906                                  	; 09/09/2018
 13907 00003055 890E[1C00]              	MOV	[RetryLoop],CX		; 0 retry loop count allowed
 13908 00003059 09D2                    	OR	DX,DX			; zero retries not allowed
 13909 0000305B 7467                    	JZ	short ioctl_bad_fun
 13910 0000305D 8916[1A00]              	MOV	[RetryCount],DX		; Set new retry count
 13911                                  doneok:
 13912 00003061 E999E6                  	jmp	SYS_RET_OK		; Done
 13913                                  
 13914                                  ;--------------------------------------------------------------------------
 13915                                  ;
 13916                                  ; Generic IOCTL entry point. AL = C, D, 10h, 11h
 13917                                  ;
 13918                                  ;	here we invoke the Generic IOCTL using the IOCTL_Req structure.
 13919                                  ;	SI:DX -> Users Device Parameter Table
 13920                                  ;	IOCALL -> IOCTL_Req structure
 13921                                  ;
 13922                                  ; 	If on entry AL >= IOCTL_QUERY_HANDLE the function is a
 13923                                  ;	QueryIOCtlSupport call ELSE it's a standard generic IOCtl
 13924                                  ;	call.
 13925                                  ;
 13926                                  ; BUGBUG: Don't push anything on the stack between GENERIOCTL: and 
 13927                                  ;         the call to Check_If_Net because Check_If_Net gets our
 13928                                  ;         return address off the stack if the drive is invalid.
 13929                                  ;
 13930                                  ;----------------------------------------------------------------------------
 13931                                  
 13932                                  query_handle_support:	; Entry point for handles
 13933                                  GENERICIOCTLHANDLE:
 13934                                  
 13935 00003064 E89537                  	call	SFFromHandle		; Get SFT for device.
 13936 00003067 7260                    	jc	short ioctl_bad_handlej
 13937                                  
 13938 00003069 26F745050080            	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet	; M031;
 13939 0000306F 7553                    	jnz	short ioctl_bad_fun	; Cannot do this over net.
 13940                                  
 13941 00003071 C606[D102]04            	mov	byte [EXTERR_LOCUS],errLOC_SerDev
 13942 00003076 26C47D07                	les	di,[es:di+SF_ENTRY.sf_devptr]	; Get pointer to device.
 13943 0000307A EB0F                    	jmp	short Do_GenIOCTL
 13944                                  
 13945                                  query_device_support:	; Entry point for devices:
 13946                                  GENERICIOCTL:
 13947                                  
 13948 0000307C C606[D102]02            	mov	byte [EXTERR_LOCUS],errLOC_Disk
 13949 00003081 80FD08                  	cmp	ch,IOC_DC		; Only disk devices are allowed to use
 13950 00003084 753E                    	jne	short ioctl_bad_fun	; no handles with Generic IOCTL.
 13951                                  
 13952 00003086 E88001                  	CALL	Check_If_Net		; ES:DI := Get_hdr_block of device in BL
 13953 00003089 7539                    	JNZ	short ioctl_bad_fun	; There are no "net devices", and they
 13954                                  
 13955                                  Do_GenIOCTL:
 13956                                  	;TEST	word [ES:DI+SYSDEV.ATT],DEV320 ; Can device handle Generic IOCTL funcs
 13957                                  	; 09/09/2018
 13958 0000308B 26F6450440              	TEST	byte [ES:DI+SYSDEV.ATT],DEV320 ; 0040h
 13959 00003090 7432                    	jz	short ioctl_bad_fun
 13960                                  
 13961                                  	; MSDOS 6.0
 13962                                  	;mov	byte [IOCALL_REQFUNC],GENIOCTL ;Assume real Request
 13963                                  	;cmp	AL,IOCTL_QUERY_HANDLE	; See if this is just a query
 13964                                  	;jl	short SetIOCtlBlock
 13965                                  	;
 13966                                  	;TEST	word [ES:DI+SYSDEV.ATT],IOQUERY ; See if device supports a query
 13967                                  	;jz	short ioctl_bad_fun	; No support for query 
 13968                                  	;
 13969                                  	;mov	byte [IOCALL_REQFUNC],IOCTL_QUERY ; Just a query (5.00)
 13970                                  
 13971                                  ;SetIOCtlBlock:
 13972 00003092 06                      	PUSH	ES			; DEVIOCALL2 expects Device header block
 13973 00003093 57                      	PUSH	DI			; in DS:SI
 13974                                  					; Setup Generic IOCTL Request Block
 13975 00003094 C606[2403]17            	mov	byte [IOCALL_REQLEN],IOCTL_REQ.size
 13976                                  	; 07/09/2018 (MSDOS 3.3)
 13977                                  	;mov	byte [IOCALL_REQFUNC],19
 13978 00003099 C606[2603]13            	mov	byte [IOCALL_REQFUNC],GENIOCTL ; 07/09/2018
 13979                                  	;
 13980 0000309E 881E[2503]              	MOV	byte [IOCALL_REQUNIT],BL
 13981 000030A2 882E[3103]              	MOV	byte [IOCALL+IOCTL_REQ.MAJORFUNCTION],CH
 13982 000030A6 880E[3203]              	MOV	byte [IOCALL+IOCTL_REQ.MINORFUNCTION],CL
 13983 000030AA 8936[3303]              	MOV	word [IOCALL+IOCTL_REQ.REG_SI],SI
 13984 000030AE 893E[3503]              	MOV	word [IOCALL+IOCTL_REQ.REG_DI],DI
 13985 000030B2 8916[3703]              	MOV	word [IOCALL+IOCTL_REQ.GENERICIOCTL_PACKET],DX
 13986 000030B6 8936[3903]              	MOV	word [IOCALL+IOCTL_REQ.GENERICIOCTL_PACKET+2],SI
 13987                                  
 13988                                  ;hkn; IOCALL is in DOSDATA
 13989 000030BA BB[2403]                	MOV	BX,IOCALL
 13990                                  
 13991 000030BD 16                      	PUSH	SS
 13992 000030BE 07                      	POP	ES
 13993                                  					; DS:SI -> Device header.
 13994 000030BF 5E                      	POP	SI
 13995 000030C0 1F                      	POP	DS
 13996                                  	; 10/08/2018
 13997 000030C1 E9EE00                  	jmp	ioctl_do_IO		; Perform Call to device driver
 13998                                  
 13999                                  ioctl_bad_fun:
 14000 000030C4 B001                    	mov	al, error_invalid_function
 14001 000030C6 E940E6                  	jmp	SYS_RET_ERR	
 14002                                  
 14003                                  ioctl_bad_handlej:
 14004 000030C9 E905FF                  	jmp	ioctl_bad_handle
 14005                                  
 14006                                  ;---------------------------------------------------------------------------
 14007                                  ;
 14008                                  ; IOCTL AL = 8
 14009                                  ;
 14010                                  ; ENTRY:  DS = DOSDATA
 14011                                  ;
 14012                                  ; BUGBUG: Don't push anything on the stack between ioctl_rem_media: and 
 14013                                  ;         the call to Check_If_Net because Check_If_Net gets our
 14014                                  ;         return address off the stack if the drive is invalid.
 14015                                  ;
 14016                                  ;-------------------------------------------------------------------------
 14017                                  
 14018                                  ioctl_rem_media:
 14019                                  	; MSDOS 3.3 (& MSDOS 6.0)
 14020 000030CC E83A01                  	CALL	Check_If_Net
 14021 000030CF 75F3                    	JNZ	short ioctl_bad_fun	; There are no "net devices", and they
 14022                                  					;   certainly don't know how to do this
 14023                                  					;   call.
 14024 000030D1 26F745040008            	TEST	word [ES:DI+SYSDEV.ATT],DEVOPCL ; See if device can
 14025 000030D7 74EB                    	JZ	short ioctl_bad_fun		; NO
 14026                                  
 14027                                  ;hkn; SS override for IOCALL
 14028 000030D9 36C606[2603]0F          	MOV	byte [SS:IOCALL_REQFUNC],DEVRMD
 14029 000030DF B00D                    	MOV	AL,REMHL
 14030 000030E1 88DC                    	MOV	AH,BL			; Unit number
 14031 000030E3 36A3[2403]              	MOV	[SS:IOCALL_REQLEN],AX
 14032 000030E7 31C0                    	XOR	AX,AX
 14033 000030E9 36A3[2703]              	MOV	[SS:IOCALL_REQSTAT],AX
 14034 000030ED 06                      	PUSH	ES
 14035 000030EE 1F                      	POP	DS
 14036 000030EF 89FE                    	MOV	SI,DI			; DS:SI -> driver
 14037 000030F1 16                      	PUSH	SS
 14038 000030F2 07                      	POP	ES
 14039                                  
 14040                                  ;hkn; IOCALL is in DOSDATA (msconst.asm)
 14041 000030F3 BB[2403]                	MOV	BX,IOCALL		; ES:BX -> Call header
 14042 000030F6 1E                      	push	ds
 14043 000030F7 56                      	push	si
 14044 000030F8 E8FF1D                  	call	DEVIOCALL2
 14045 000030FB 5E                      	pop	si
 14046 000030FC 1F                      	pop	ds
 14047                                  
 14048                                  ;hkn; SS override
 14049 000030FD 36A1[2703]              	MOV	AX,[SS:IOCALL_REQSTAT]	; Get Status word
 14050 00003101 250002                  	AND	AX,STBUI		; Mask to busy bit
 14051 00003104 B109                    	MOV	CL,9
 14052 00003106 D3E8                    	SHR	AX,CL			; Busy bit to bit 0
 14053 00003108 E9F2E5                  	jmp	SYS_RET_OK
 14054                                  
 14055                                  ;-------------------------------------------------------------------------
 14056                                  ;
 14057                                  ; IOCTL: AL = 9
 14058                                  ;
 14059                                  ; ENTRY: DS = DOSDATA
 14060                                  ;
 14061                                  ;-------------------------------------------------------------------------
 14062                                  
 14063                                  Ioctl_Drive_attr:
 14064                                  	; MSDOS 3.3 (& MSDOS 6.0)
 14065 0000310B 88D8                    	mov	al, bl
 14066 0000310D E86138                  	call	GETTHISDRV
 14067 00003110 724B                    	jc	short ioctl_drv_err
 14068 00003112 E8C500                  	call	Get_Driver_BL
 14069                                  	; MSDOS 6.0
 14070 00003115 7246                    	JC	short ioctl_drv_err	; drive not valid
 14071                                  
 14072 00003117 268B5504                	mov	dx,[es:di+SYSDEV.ATT]	
 14073                                  					; get device attribute word
 14074 0000311B 88C3                    	MOV	BL,AL			; Phys letter to BL (A=0)
 14075                                  
 14076                                  ;hkn; SS override
 14077 0000311D 36C43E[3A05]            	LES	DI,[SS:THISCDS]
 14078 00003122 26F745430080            	TEST	word [ES:DI+curdir.flags],curdir_isnet
 14079 00003128 7403                    	JZ	short IOCTLShare
 14080                                  
 14081                                  	;or	dx,1000h ; msdos 3.3
 14082                                  
 14083                                  ;	Net devices don't return a device attribute word.
 14084                                  ;	Bit 12 = 1, meaning net device, all others = 0.
 14085                                  
 14086 0000312A BA0010                  	MOV	DX,1000h ;  MSDOS 6.0
 14087                                  IOCTLShare:
 14088 0000312D 16                      	push	ss
 14089 0000312E 1F                      	pop	ds
 14090 0000312F BE[6003]                	MOV	SI,OPENBUF
 14091 00003132 80C341                  	ADD	BL,"A"
 14092 00003135 881C                    	MOV	[SI],BL
 14093 00003137 C744013A00              	MOV	WORD [SI+1],003AH ; ":",0
 14094 0000313C B80003                  	MOV	AX,0300h
 14095 0000313F F8                      	CLC
 14096                                  	;INT	int_IBM
 14097 00003140 CD2A                    	int     2Ah	; Microsoft Networks - CHECK DIRECT I/O
 14098                                  			; DS:SI -> ASCIZ disk device name (may be full path or only drive
 14099                                  			; specifier--must include the colon)
 14100                                  			; Return: CF clear if absolute disk access allowed
 14101 00003142 7304                    	JNC	short IOCTLLocal	; Not shared
 14102 00003144 81CA0002                	OR	DX,0200H		; Shared, bit 9
 14103                                  IOCTLLocal:
 14104 00003148 26F745430010            	TEST	word [ES:DI+curdir.flags],curdir_local
 14105 0000314E 7404                    	JZ	short ioctl_set_DX
 14106 00003150 81CA0080                	OR	DX,8000h
 14107                                  ioctl_set_DX:
 14108 00003154 E8B4E4                  	call	Get_User_Stack
 14109 00003157 895406                  	MOV	[SI+user_env.user_DX],DX
 14110 0000315A E9A0E5                  	jmp	SYS_RET_OK
 14111                                  
 14112                                  ioctl_drv_err:
 14113 0000315D B00F                    	mov	al, error_invalid_drive
 14114 0000315F E9A7E5                  	jmp	SYS_RET_ERR
 14115                                  
 14116                                  ;--------------------------------------------------------------------------
 14117                                  ; IOCTL: AL = A
 14118                                  ;
 14119                                  ; ENTRY: DS = DOSDATA
 14120                                  ;
 14121                                  ;--------------------------------------------------------------------------
 14122                                  
 14123                                  IOCTL_Handle_Redir:
 14124 00003162 E89736                  	call	SFFromHandle		; ES:DI -> SFT
 14125 00003165 7303                    	JNC	short ioctl_got_sft	; have valid handle
 14126 00003167 E967FE                  	jmp	ioctl_bad_handle ; 10/08/2018
 14127                                  
 14128                                  ioctl_got_sft:
 14129 0000316A 268B5505                	MOV	DX,[ES:DI+SF_ENTRY.sf_flags] ; Get flags
 14130 0000316E EBE4                    	JMP	short ioctl_set_DX	; pass dx to user and return
 14131                                  
 14132                                  ioctl_bad_funj:
 14133 00003170 E951FF                  	JMP	ioctl_bad_fun
 14134                                  
 14135                                  ;--------------------------------------------------------------------------
 14136                                  ;
 14137                                  ; IOCTL: AL= 4,5
 14138                                  ;
 14139                                  ; ENTRY: DS = DOSDATA
 14140                                  ;	 SI = user's DS
 14141                                  ;
 14142                                  ;
 14143                                  ; BUGBUG: Don't push anything on the stack between ioctl_get_dev: and 
 14144                                  ;         the call to Check_If_Net because Check_If_Net gets our
 14145                                  ;         return address off the stack if the drive is invalid.
 14146                                  ;
 14147                                  ;-------------------------------------------------------------------------
 14148                                  
 14149                                  ioctl_get_dev:
 14150 00003173 E89300                  	CALL	Check_If_Net
 14151 00003176 75F8                    	JNZ	short ioctl_bad_funj	; There are no "net devices", and they
 14152                                  					;   certainly don't know how to do this
 14153                                  					;   call.
 14154                                  ioctl_do_string:
 14155 00003178 26F745040040            	TEST	word [ES:DI+SYSDEV.ATT],DEVIOCTL; See if device accepts control
 14156 0000317E 74F0                    	JZ	short ioctl_bad_funj		; NO
 14157                                  					; assume IOCTL read
 14158 00003180 C606[2603]03            	MOV	byte [IOCALL_REQFUNC],DEVRDIOCTL
 14159                                  
 14160 00003185 A801                    	TEST	AL,1			; is it func. 4/5 or 2/3
 14161 00003187 7405                    	JZ	short ioctl_control_call ; it is read. goto ioctl_control_call
 14162                                  
 14163                                  					; it is an IOCTL write
 14164 00003189 C606[2603]0C            	MOV	byte [IOCALL_REQFUNC],DEVWRIOCTL
 14165                                  
 14166                                  ioctl_control_call:
 14167 0000318E B016                    	MOV	AL,DRDWRHL
 14168                                  ioctl_setup_pkt:
 14169 00003190 88DC                    	MOV	AH,BL			; Unit number
 14170 00003192 A3[2403]                	MOV	[IOCALL_REQLEN],AX
 14171 00003195 31C0                    	XOR	AX,AX
 14172 00003197 A3[2703]                	MOV	[IOCALL_REQSTAT],AX
 14173 0000319A A2[3103]                	MOV	[IOMED],AL
 14174 0000319D 890E[3603]              	MOV	[IOSCNT],CX
 14175 000031A1 8916[3203]              	MOV	[IOXAD],DX
 14176 000031A5 8936[3403]              	MOV	[IOXAD+2],SI
 14177 000031A9 06                      	PUSH	ES
 14178 000031AA 1F                      	POP	DS
 14179 000031AB 89FE                    	MOV	SI,DI			; DS:SI -> driver
 14180 000031AD 16                      	PUSH	SS
 14181 000031AE 07                      	POP	ES
 14182                                  
 14183 000031AF BB[2403]                	MOV	BX,IOCALL		; ES:BX -> Call header
 14184                                  ioctl_do_IO:
 14185 000031B2 E8451D                  	call	DEVIOCALL2
 14186                                  
 14187                                  ;hkn; SS override for IOCALL
 14188 000031B5 36F706[2703]0080        	TEST	word [SS:IOCALL_REQSTAT],STERR ;Error?
 14189 000031BC 7507                    	JNZ	short ioctl_string_err
 14190                                  
 14191                                  ;hkn; SS override
 14192 000031BE 36A1[3603]              	MOV	AX,[SS:IOSCNT]		; Get actual bytes transferred
 14193 000031C2 E938E5                  	jmp	SYS_RET_OK
 14194                                  
 14195                                  ioctl_string_err:
 14196 000031C5 368B3E[2703]            	MOV	DI,[SS:IOCALL_REQSTAT]	;Get Error
 14197                                  device_err:
 14198 000031CA 81E7FF00                	AND	DI,STECODE		; mask out irrelevant bits
 14199 000031CE 89F8                    	MOV	AX,DI
 14200 000031D0 E84128                  	call	SET_I24_EXTENDED_ERROR
 14201                                  
 14202                                  ;hkn; use SS override
 14203                                  ;hkn;	mov	ax,[CS:EXTERR]
 14204 000031D3 36A1[D202]              	mov	ax,[SS:EXTERR]
 14205 000031D7 E92FE5                  	jmp	SYS_RET_ERR
 14206                                  
 14207                                  ;--------------------------------------------------------------------------
 14208                                  ; Proc name : Get_Driver_BL
 14209                                  ;
 14210                                  ;	DS is DOSDATA
 14211                                  ;	BL is drive number (0=default)
 14212                                  ;	Returns pointer to device in ES:DI, unit number in BL if carry clear
 14213                                  ;	No regs modified
 14214                                  ;
 14215                                  ;---------------------------------------------------------------------------
 14216                                  
 14217                                  Get_Driver_BL:
 14218 000031DA 50                      	PUSH	AX
 14219 000031DB 88D8                    	MOV	AL,BL			; Drive
 14220 000031DD E89137                  	call	GETTHISDRV
 14221 000031E0 7225                    	jc	short ioctl_bad_drv
 14222 000031E2 30DB                    	XOR	BL,BL			; Unit zero on Net device
 14223 000031E4 C606[D102]03            	MOV	byte [EXTERR_LOCUS],errLOC_Net
 14224 000031E9 C43E[3A05]              	LES	DI,[THISCDS]
 14225 000031ED 26F745430080            	TEST	word [ES:DI+curdir.flags],curdir_isnet
 14226 000031F3 26C47D45                	LES	DI,[ES:DI+curdir.devptr]; ES:DI -> Dpb or net dev
 14227 000031F7 750D                    	JNZ	short got_dev_ptr	; Is net
 14228 000031F9 C606[D102]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 14229 000031FE 268A5D01                	MOV	BL,[ES:DI+DPB.UNIT]	; Unit number
 14230 00003202 26C47D12                	LES	DI,[ES:DI+DPB.DRIVER_ADDR] ; Driver addr
 14231                                  got_dev_ptr:
 14232 00003206 F8                      	CLC
 14233                                  ioctl_bad_drv:
 14234 00003207 58                      	POP	AX
 14235 00003208 C3                      	retn
 14236                                  
 14237                                  ;-------------------------------------------------------------------------
 14238                                  ; Proc Name : Check_If_Net:
 14239                                  ;
 14240                                  ;
 14241                                  ; Checks if the device is over the net or not. Returns result in ZERO flag.
 14242                                  ; If no device is found, the return address is popped off the stack, and a
 14243                                  ; jump is made to ioctl_drv_err.
 14244                                  ;
 14245                                  ; On Entry:
 14246                                  ; Registers same as those for Get_Driver_BL
 14247                                  ;
 14248                                  ; On Exit:
 14249                                  ; ZERO flag	- set if not a net device
 14250                                  ;		- reset if net device
 14251                                  ; ES:DI -> the device
 14252                                  ;
 14253                                  ;
 14254                                  ; BUGBUG: This function assumes the following stack setup on entry
 14255                                  ;
 14256                                  ;	  SP+2 -> Error return address
 14257                                  ;	  SP   -> Normal return address
 14258                                  ;
 14259                                  ;-------------------------------------------------------------------------
 14260                                  
 14261                                  Check_If_Net:
 14262                                  	; MSDOS 3.3 (& MSDOS 6.0)
 14263 00003209 E8CEFF                  	CALL	Get_Driver_BL
 14264 0000320C 720F                    	JC	short ioctl_drv_err_pop	; invalid drive letter
 14265 0000320E 06                      	PUSH	ES
 14266 0000320F 57                      	PUSH	DI
 14267 00003210 C43E[3A05]              	LES	DI,[THISCDS]
 14268 00003214 26F745430080            	TEST	word [ES:DI+curdir.flags],curdir_isnet
 14269 0000321A 5F                      	POP	DI
 14270 0000321B 07                      	POP	ES
 14271 0000321C C3                      	retn
 14272                                  
 14273                                  ioctl_drv_err_pop:
 14274 0000321D 58                      	pop	ax			; pop off return address
 14275 0000321E E93CFF                  	jmp	ioctl_drv_err
 14276                                  
 14277                                  ioctl_bad_funj3:
 14278 00003221 E9A0FE                  	jmp	ioctl_bad_fun
 14279                                  
 14280                                  ioctl_string_errj:
 14281 00003224 EB9F                    	jmp	ioctl_string_err
 14282                                  
 14283                                  ;--------------------------------------------------------------------------
 14284                                  ;
 14285                                  ; IOCTL: AL = E, F
 14286                                  ;
 14287                                  ; ENTRY: DS = DOSDATA
 14288                                  ;
 14289                                  ;
 14290                                  ; BUGBUG: Don't push anything on the stack between ioctl_drive_owner: and 
 14291                                  ;         the call to Check_If_Net because Check_If_Net gets our
 14292                                  ;         return address off the stack if the drive is invalid.
 14293                                  ;
 14294                                  ;--------------------------------------------------------------------------
 14295                                  
 14296                                  ioctl_drive_owner:
 14297                                  	; MSDOS 3.3 (& MSDOS 6.0)
 14298 00003226 E8E0FF                  	Call	Check_If_Net
 14299 00003229 75F6                    	JNZ	short ioctl_bad_funj3 	; There are no "net devices", and they
 14300                                  					;   certainly don't know how to do this
 14301                                  					;   call.
 14302                                  	;TEST	word [ES:DI+SYSDEV.ATT],DEV320	; See if device can handle this
 14303                                  	; 09/09/2018
 14304 0000322B 26F6450440              	TEST	byte [ES:DI+SYSDEV.ATT],DEV320 ; 0040h
 14305 00003230 74EF                    	JZ	short ioctl_bad_funj3 	; NO
 14306 00003232 C606[2603]17            	mov	byte [IOCALL_REQFUNC],DEVGETOWN	; default to get owner
 14307 00003237 3C0E                    	cmp	al,0Eh			; Get Owner ?
 14308 00003239 7405                    	jz	short GetOwner
 14309                                  SetOwner:
 14310 0000323B C606[2603]18            	MOV	byte [IOCALL_REQFUNC],DEVSETOWN
 14311                                  GetOwner:
 14312 00003240 B00D                    	MOV	AL,OWNHL
 14313 00003242 88DC                    	MOV	AH,BL			; Unit number
 14314 00003244 A3[2403]                	MOV	[IOCALL_REQLEN],AX
 14315 00003247 31C0                    	XOR	AX,AX
 14316 00003249 A3[2703]                	MOV	[IOCALL_REQSTAT],AX
 14317 0000324C 06                      	PUSH	ES
 14318 0000324D 1F                      	POP	DS
 14319 0000324E 89FE                    	MOV	SI,DI			; DS:SI -> driver
 14320 00003250 16                      	PUSH	SS
 14321 00003251 07                      	POP	ES
 14322 00003252 BB[2403]                	MOV	BX,IOCALL		; ES:BX -> Call header
 14323 00003255 1E                      	push	ds
 14324 00003256 56                      	push	si
 14325 00003257 E8A01C                  	call	DEVIOCALL2
 14326 0000325A 5E                      	pop	si
 14327 0000325B 1F                      	pop	ds
 14328                                  ;hkn; SS override
 14329 0000325C 36F706[2703]0080        	TEST	word [SS:IOCALL_REQSTAT],STERR
 14330 00003263 75BF                    	jnz	short ioctl_string_errj
 14331 00003265 36A0[2503]              	MOV	AL,[SS:IOCALL_REQUNIT]	; Get owner returned by device
 14332                                  					; owner returned is 1-based.
 14333 00003269 E991E4                  	jmp	SYS_RET_OK
 14334                                  
 14335                                  
 14336                                  ;============================================================================
 14337                                  ; DELETE.ASM, MSDOS 6.0, 1991
 14338                                  ;============================================================================
 14339                                  ; 07/08/2018 - Retro DOS v3.0
 14340                                  
 14341                                  ;	TITLE	DOS_DELETE - Internal DELETE call for MS-DOS
 14342                                  ;	NAME	DOS_DELETE
 14343                                  
 14344                                  ;
 14345                                  ;	Microsoft Confidential
 14346                                  ;	Copyright (C) Microsoft Corporation 1991
 14347                                  ;	All Rights Reserved.
 14348                                  ;
 14349                                  
 14350                                  ;**	DELETE.ASM - Low level routine for deleting files
 14351                                  ;
 14352                                  ;		DOS_DELETE
 14353                                  ;		REN_DEL_Check
 14354                                  ;		FastOpen_Delete	       ; DOS 3.3
 14355                                  ;		FastOpen_Update	       ; DOS 3.3
 14356                                  
 14357                                  
 14358                                  ;   Revision history:
 14359                                  ;
 14360                                  ;   A000  version 4.00	Jan. 1988
 14361                                  ;   A001  Fastopen Rename fix	April 1989
 14362                                  
 14363                                  
 14364                                  ;Installed = TRUE
 14365                                  
 14366                                  ;	i_need	NoSetDir,BYTE
 14367                                  ;	i_need	Creating,BYTE
 14368                                  ;	i_need	DELALL,BYTE
 14369                                  ;	i_need	THISDPB,DWORD
 14370                                  ;	i_need	THISSFT,DWORD
 14371                                  ;	i_need	THISCDS,DWORD
 14372                                  ;	i_need	CURBUF,DWORD
 14373                                  ;	i_need	ATTRIB,BYTE
 14374                                  ;	i_need	SATTRIB,BYTE
 14375                                  ;	i_need	WFP_START,WORD
 14376                                  ;	i_need	REN_WFP,WORD			 ;BN001
 14377                                  ;	i_need	NAME1,BYTE			 ;BN001
 14378                                  ;	i_need	FoundDel,BYTE
 14379                                  ;	i_need	AUXSTACK,BYTE
 14380                                  ;	i_need	VOLCHNG_FLAG,BYTE
 14381                                  ;	i_need	JShare,DWORD
 14382                                  ;	i_need	FastOpenTable,BYTE		  ; DOS 3.3
 14383                                  ;	i_need	FastTable,BYTE			  ; DOS 4.00
 14384                                  ;
 14385                                  ;	i_need	Del_ExtCluster,WORD		  ; DOS 4.00
 14386                                  ;
 14387                                  ;	i_need	SAVE_BX,WORD			  ; DOS 4.00
 14388                                  ;	i_need	DMAADD,DWORD
 14389                                  ;	i_need	RENAMEDMA,BYTE
 14390                                  
 14391                                  ;---------------------------------------------------------------------------
 14392                                  ;
 14393                                  ; Procedure Name : DOS_DELETE
 14394                                  ;
 14395                                  ; Inputs:
 14396                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 14397                                  ;		terminated)
 14398                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 14399                                  ;		( = -1 if current dir not involved, else
 14400                                  ;		 Points to first char after last "/" of current dir part)
 14401                                  ;	[THISCDS] Points to CDS being used
 14402                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 14403                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 14404                                  ; Function:
 14405                                  ;	Delete the specified file(s)
 14406                                  ; Outputs:
 14407                                  ;	CARRY CLEAR
 14408                                  ;		OK
 14409                                  ;	CARRY SET
 14410                                  ;	    AX is error code
 14411                                  ;		error_file_not_found
 14412                                  ;			Last element of path not found
 14413                                  ;		error_path_not_found
 14414                                  ;			Bad path (not in curr dir part if present)
 14415                                  ;		error_bad_curr_dir
 14416                                  ;			Bad path in current directory part of path
 14417                                  ;		error_access_denied
 14418                                  ;			Attempt to delete device or directory
 14419                                  ;		***error_sharing_violation***
 14420                                  ;			Deny both access required, generates an INT 24.
 14421                                  ;			This error is NOT returned. The INT 24H is generated,
 14422                                  ;			  and the file is ignored (not deleted). Delete will
 14423                                  ;			  simply continue on looking for more files.
 14424                                  ;			  Carry will NOT be set in this case.
 14425                                  ; DS preserved, others destroyed
 14426                                  ;
 14427                                  ;---------------------------------------------------------------------------
 14428                                  
 14429                                  FILEFOUND   equ 01h
 14430                                  FILEDELETED equ 10h
 14431                                  
 14432                                  DOS_DELETE:
 14433                                  
 14434                                  ;hkn; DOS_Delete is called from file.asm and fcbio.asm. DS has been set up 
 14435                                  ;hkn; appropriately at this point.
 14436                                  
 14437 0000326C E85FED                  	call	TestNet
 14438 0000326F 7306                    	JNC	short LOCAL_DELETE
 14439                                  
 14440                                  ;IF NOT Installed
 14441                                  ;	transfer NET_DELETE
 14442                                  ;ELSE
 14443                                  	;MOV	AX,(MultNET SHL 8) | 19
 14444                                  	;INT	2FH
 14445                                  	;return
 14446                                  
 14447 00003271 B81311                  	mov	ax,1113h
 14448 00003274 CD2F                    	int     2Fh 	; Multiplex - NETWORK REDIRECTOR - DELETE REMOTE FILE
 14449                                  			; SS = DS = DOS CS, SDA first filename pointer -> 
 14450                                  			;		fully-qualified filename in DOS CS
 14451                                  			; SDA CDS pointer -> current directory structure for drive with file
 14452                                  			; Return: CF set on error
 14453 00003276 C3                      	retn
 14454                                  
 14455                                  ;ENDIF
 14456                                  
 14457                                  LOCAL_DELETE:
 14458 00003277 C606[0A05]00            	MOV	byte [FOUNDDEL],0	; No files found and no files deleted
 14459 0000327C E8EDED                  	call	EcritDisk
 14460 0000327F C706[1805]00E5          	MOV	WORD [CREATING],DIRFREE*256+0 ; Assume not del *.*
 14461 00003285 8B36[4A05]              	MOV	SI,[WFP_START]
 14462                                  SKPNUL:
 14463 00003289 AC                      	LODSB
 14464 0000328A 08C0                    	OR	AL,AL
 14465 0000328C 75FB                    	JNZ	short SKPNUL		; go to end
 14466 0000328E 83EE04                  	SUB	SI,4			; Back over possible "*.*"
 14467 00003291 813C2A2E                	CMP	WORD [SI],2E2Ah ; "*."
 14468 00003295 7506                    	JNZ	short TEST_QUEST
 14469 00003297 807C022A                	CMP	BYTE [SI+2],"*"
 14470 0000329B 741F                    	JZ	short CHECK_ATTS
 14471                                  TEST_QUEST:
 14472 0000329D 83EE09                  	SUB	SI,9		; Back over possible "????????.???"
 14473 000032A0 87FE                    	XCHG	DI,SI
 14474                                  
 14475 000032A2 16                      	push	ss
 14476                                  	;pop	ds ; ! Retro DOS v3.0 BUG !
 14477 000032A3 07                      	pop	es ; 17/05/2019 (BugFix)
 14478                                  
 14479 000032A4 B83F3F                  	MOV	AX,"??"
 14480 000032A7 B90400                  	MOV	CX,4		; four sets of "??"
 14481 000032AA F3AF                    	REPE	SCASW
 14482 000032AC 751C                    	JNZ	short NOT_ALL
 14483 000032AE 87FE                    	XCHG	DI,SI
 14484 000032B0 AD                      	LODSW
 14485 000032B1 3D2E3F                  	CMP	AX,3F2Eh ; ".?"
 14486 000032B4 7514                    	JNZ	short NOT_ALL
 14487 000032B6 AD                      	LODSW
 14488 000032B7 3D3F3F                  	CMP	AX,"??"
 14489 000032BA 750E                    	JNZ	short NOT_ALL
 14490                                  CHECK_ATTS:
 14491 000032BC A0[0805]                	MOV	AL,[SATTRIB]
 14492 000032BF 241F                    	AND	AL,attr_hidden+attr_system+attr_directory+attr_volume_id+attr_read_only
 14493                                  					; Look only at hidden bits
 14494 000032C1 3C1F                    	CMP	AL,attr_hidden+attr_system+attr_directory+attr_volume_id+attr_read_only
 14495                                  					; All must be set
 14496 000032C3 7505                    	JNZ	short NOT_ALL
 14497                                  
 14498                                  ; NOTE WARNING DANGER-----
 14499                                  ;    This DELALL stuff is not safe. It allows directories to be deleted.
 14500                                  ;	It should ONLY be used by FORMAT in the ROOT directory.
 14501                                  
 14502 000032C5 C606[1905]00            	MOV	byte [DELALL],0		; DEL *.* - flag deleting all
 14503                                  NOT_ALL:
 14504 000032CA C606[F802]01            	MOV	byte [NoSetDir],1
 14505 000032CF E86915                  	call	GetPathNoSet
 14506 000032D2 7313                    	JNC	short Del_found
 14507 000032D4 750C                    	JNZ	short _bad_path
 14508 000032D6 08C9                    	OR	CL,CL
 14509 000032D8 7408                    	JZ	short _bad_path
 14510                                  No_file:
 14511 000032DA B80200                  	MOV	AX,error_file_not_found
 14512                                  ErrorReturn:
 14513 000032DD F9                      	STC
 14514 000032DE E893ED                  	call	LcritDisk
 14515 000032E1 C3                      	retn
 14516                                  
 14517                                  _bad_path:
 14518 000032E2 B80300                  	MOV	AX,error_path_not_found
 14519 000032E5 EBF6                    	JMP	short ErrorReturn
 14520                                  
 14521                                  Del_found:
 14522 000032E7 750C                    	JNZ	short NOT_DIR		; Check for dir specified
 14523 000032E9 803E[1905]00            	CMP	byte [DELALL],0		; DelAll = 0 allows delete of dir.
 14524 000032EE 7405                    	JZ	short NOT_DIR
 14525                                  Del_access_err:
 14526 000032F0 B80500                  	MOV	AX,error_access_denied
 14527 000032F3 EBE8                    	JMP	short ErrorReturn
 14528                                  
 14529                                  NOT_DIR:
 14530 000032F5 08E4                    	OR	AH,AH			; Check if device name
 14531 000032F7 78F7                    	JS	short Del_access_err	; Can't delete I/O devices
 14532                                  
 14533                                  ; Main delete loop. CURBUF+2:BX points to a matching directory entry.
 14534                                  
 14535                                  DELFILE:
 14536 000032F9 800E[0A05]01            	OR	byte [FOUNDDEL],FILEFOUND ; file found, not deleted yet
 14537                                  
 14538                                  ; If we are deleting the Volume ID, then we set VOLUME_CHNG flag to make
 14539                                  ; DOS issue a build BPB call the next time this drive is accessed.
 14540                                  
 14541 000032FE 1E                      	PUSH	DS
 14542 000032FF 8A26[1905]              	MOV	AH,[DELALL]
 14543 00003303 C53E[7405]              	LDS	DI,[CURBUF]
 14544                                  	
 14545                                  ;hkn; SS override
 14546 00003307 36F606[0605]01          	TEST	byte [SS:ATTRIB],attr_read_only ; are we deleting RO files too?
 14547 0000330D 7509                    	JNZ	short DoDelete		; yes
 14548                                  
 14549 0000330F F6470B01                	TEST	byte [BX+dir_entry.dir_attr],attr_read_only
 14550 00003313 7403                    	JZ	short DoDelete		; not read only
 14551                                  
 14552 00003315 1F                      	POP	DS
 14553 00003316 EB29                    	JMP	SHORT DELNXT		; Skip it (Note ES:BP not set)
 14554                                  
 14555                                  DoDelete:
 14556 00003318 E87700                  	call	REN_DEL_Check		; Sets ES:BP = [THISDPB]
 14557 0000331B 7303                    	JNC	short DEL_SHARE_OK
 14558 0000331D 1F                      	POP	DS
 14559 0000331E EB21                    	JMP	SHORT DELNXT		; Skip it
 14560                                  
 14561                                  DEL_SHARE_OK:
 14562                                  	; MSDOS 6.0
 14563                                  	;TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty 
 14564                                  	;				;LB. if already dirty		  ;AN000;
 14565                                  	;JNZ	short yesdirty		;LB.  don't increment dirty count ;AN000;
 14566                                  	;call	INC_DIRTY_COUNT		;LB.				  ;AN000;
 14567 00003320 804D0540                	OR	byte [DI+BUFFINFO.buf_flags],buf_dirty
 14568                                  ;yesdirty:
 14569                                  	;MOV	[BX+dir_entry.dir_name],AH ; Put in E5H or 0
 14570 00003324 8827                    	mov	[bx],ah ; 05/07/2019	
 14571 00003326 8B1C                    	MOV	BX,[SI] 		; Get firclus pointer
 14572 00003328 1F                      	POP	DS
 14573 00003329 800E[0A05]10            	OR	byte [FOUNDDEL],FILEDELETED ; Deleted file
 14574                                  
 14575 0000332E 83FB02                  	CMP	BX,2
 14576 00003331 720E                    	JB	short DELNXT		; File has invalid FIRCLUS (too small)
 14577 00003333 263B5E0D                	CMP	BX,[ES:BP+DPB.MAX_CLUSTER]
 14578 00003337 7708                    	JA	short DELNXT		; File has invalid FIRCLUS (too big)
 14579                                  
 14580 00003339 E8AD21                  	call	RELEASE 		; Free file data
 14581 0000333C 724E                    	JC	short No_fileJ
 14582                                  
 14583                                  ; DOS 3.3  FastOpen
 14584                                  
 14585 0000333E E8BA00                  	CALL	FastOpen_Delete 	; delete the dir info in fastopen
 14586                                  
 14587                                  ; DOS 3.3  FastOpen
 14588                                  
 14589                                  DELNXT:
 14590 00003341 C42E[2405]              	LES	BP,[THISDPB]		; Possible to get here without this set
 14591 00003345 E86714                  	call	GETENTRY		; Registers need to be reset
 14592 00003348 7242                    	JC	short No_fileJ
 14593 0000334A E8A913                  	call	NEXTENT
 14594 0000334D 73AA                    	JNC	short DELFILE
 14595 0000334F C42E[2405]              	LES	BP,[THISDPB]		; NEXTENT sets ES=DOSGROUP
 14596                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 14597 00003353 268A4600                	MOV	AL,[ES:BP]
 14598 00003357 E8D32B                  	call	FLUSHBUF
 14599 0000335A 7230                    	JC	short No_fileJ
 14600                                  ;
 14601                                  ; Now we need to test FoundDel for our flags. The cases to consider are:
 14602                                  ;
 14603                                  ;   not found not deleted		file not found
 14604                                  ;   not found	  deleted		*** impossible ***
 14605                                  ;	found not deleted		access denied (read-only)
 14606                                  ;	found	  deleted		no error
 14607                                  ;
 14608 0000335C F606[0A05]10            	TEST	byte [FOUNDDEL],FILEDELETED ; did we delete a file?
 14609 00003361 7422                    	JZ	short DelError		; no, figure out what's wrong.
 14610                                  ; We set VOLCHNG_FLAG to indicate that we have changed the volume label
 14611                                  ; and to force the DOS to issue a media check.
 14612 00003363 F606[0605]08            	TEST	byte [ATTRIB],attr_volume_id
 14613 00003368 7417                    	jz	short No_Set_Flag
 14614 0000336A 50                      	PUSH	AX
 14615 0000336B 06                      	PUSH	ES
 14616 0000336C 57                      	PUSH	DI
 14617 0000336D C43E[3A05]              	LES	DI,[THISCDS]
 14618 00003371 268A25                  	MOV	AH,[ES:DI]		; Get drive
 14619 00003374 80EC41                  	SUB	AH,'A'                  ; Convert to 0-based
 14620 00003377 8826[070A]              	mov	[VOLCHNG_FLAG],AH
 14621                                  	
 14622                                  	; MSDOS 6.0
 14623                                  	;XOR	BH,BH			;>32mb delete volume id from boot record ;AN000;
 14624                                  	;call	Set_Media_ID		;>32mb set volumme id to boot record	 ;AN000;
 14625                                  	 
 14626 0000337B E83D28                  	call	FATREAD_CDS		; force media check
 14627 0000337E 5F                      	POP	DI
 14628 0000337F 07                      	POP	ES
 14629 00003380 58                      	POP	AX
 14630                                  No_Set_Flag:
 14631 00003381 E8F0EC                  	call	LcritDisk		; carry is clear
 14632 00003384 C3                      	retn
 14633                                  DelError:
 14634 00003385 F606[0A05]01            	TEST	byte [FOUNDDEL],FILEFOUND ; not deleted. Did we find file?
 14635 0000338A 7503                    	JNZ	short Del_access_errJ 	; yes. Access denied
 14636                                  No_fileJ:
 14637 0000338C E94BFF                  	JMP	No_file ; 10/08/2018 		; Nope
 14638                                  Del_access_errJ:
 14639 0000338F E95EFF                  	JMP	Del_access_err ; 10/08/2018
 14640                                  
 14641                                  ; 08/08/2018 - Retro DOS v3.0
 14642                                  
 14643                                  ;Break	<REN_DEL_Check - check for access for rename and delete>
 14644                                  ;---------------------------------------------------------------------------
 14645                                  ; Procedure Name : REN_DEL_Check
 14646                                  ;
 14647                                  ; Inputs:
 14648                                  ;	[THISDPB] set
 14649                                  ;	[CURBUF+2]:BX points to entry
 14650                                  ;	[CURBUF+2]:SI points to firclus field of entry
 14651                                  ;	[WFP_Start] points to name
 14652                                  ; Function:
 14653                                  ;	Check for Exclusive access on given file.
 14654                                  ;	  Used by RENAME, SET_FILE_INFO, and DELETE.
 14655                                  ; Outputs:
 14656                                  ;	ES:BP = [THISDPB]
 14657                                  ;	NOTE: The WFP string pointed to by [WFP_Start] Will be Modified.  The
 14658                                  ;		last element will be loaded from the directory entry.  This is
 14659                                  ;		so the name given to the sharer doesn't have any meta chars in
 14660                                  ;		it.
 14661                                  ;	Carry set if sharing violation, INT 24H generated
 14662                                  ;	    NOTE THAT AX IS NOT error_sharing_violation.
 14663                                  ;		This is because input AX is preserved.
 14664                                  ;		Caller must set the error if needed.
 14665                                  ;	Carry clear
 14666                                  ;		OK
 14667                                  ; AX,DS,BX,SI,DI preserved
 14668                                  ;---------------------------------------------------------------------------
 14669                                  
 14670                                  REN_DEL_Check:
 14671                                  
 14672 00003392 1E                      	PUSH	DS
 14673 00003393 57                      	PUSH	DI
 14674 00003394 50                      	PUSH	AX
 14675 00003395 53                      	PUSH	BX
 14676 00003396 56                      	PUSH	SI		; Save CURBUF pointers
 14677                                  	
 14678 00003397 16                      	push	ss
 14679 00003398 07                      	pop	es
 14680                                  
 14681                                  ;hkn; context ES will assume ES to DOSDATA
 14682                                  ;hkn; ASSUME	ES:DOSGROUP
 14683                                  
 14684                                  ;hkn; SS override
 14685 00003399 368B3E[4A05]            	MOV	DI,[SS:WFP_START] ; ES:DI -> WFP
 14686 0000339E 89DE                    	MOV	SI,BX
 14687                                  
 14688                                  ;hkn; SS override
 14689 000033A0 368E1E[7605]            	MOV	DS,[SS:CURBUF+2] ; DS:SI -> entry (FCB style name)
 14690 000033A5 89FB                    	MOV	BX,DI		; Set backup limit for skipback
 14691 000033A7 83C302                  	ADD	BX,2		; Skip over d: to point to leading '\'
 14692 000033AA E8BDEB                  	call	StrLen		; CX is length of ES:DI including NUL
 14693 000033AD 49                      	DEC	CX		; Don't include nul in count
 14694 000033AE 01CF                    	ADD	DI,CX		; Point to NUL at end of string
 14695 000033B0 E88138                  	call	SkipBack	; Back up one element
 14696 000033B3 47                      	INC	DI		; Point to start of last element
 14697                                  
 14698                                  ;hkn; SS override
 14699                                  	; MSDOS 6.0
 14700                                  	;MOV	[SS:SAVE_BX],DI	;IFS. save for DOS_RENAME   ;AN000;
 14701                                  	;
 14702 000033B4 E860FA                  	call	PackName	; Transfer name from entry to ASCIZ tail.
 14703 000033B7 5E                      	POP	SI		; Get back entry pointers
 14704 000033B8 5B                      	POP	BX
 14705 000033B9 53                      	PUSH	BX
 14706 000033BA 56                      	PUSH	SI		; Back on stack
 14707                                  	
 14708 000033BB 16                      	push	ss
 14709 000033BC 1F                      	pop	ds
 14710                                  
 14711                                  ;hkn; context DS will assume ES to DOSDATA
 14712                                  ;hkn; ASSUME	DS:DOSGROUP
 14713                                  
 14714                                  ;
 14715                                  ; Close the file if possible by us.
 14716                                  ;
 14717                                  ;if installed
 14718 000033BD FF1E[9000]              	Call	far [JShare+(13*4)] ; 13 = ShCloseFile
 14719                                  ;else
 14720                                  ;	Call	ShCloseFile
 14721                                  ;endif
 14722 000033C1 8C1E[3805]              	MOV	[THISSFT+2],DS
 14723                                  
 14724                                  ;hkn; AUXSTACK is in DOSDATA
 14725 000033C5 C706[3605][D106]        	MOV	word [THISSFT],AUXSTACK-SF_ENTRY.size
 14726                                  				; Scratch space
 14727 000033CB 30E4                    	XOR	AH,AH		; Indicate file to DOOPEN (high bit off)
 14728 000033CD E8F01D                  	call	DOOPEN		; Fill in SFT for share check
 14729 000033D0 C43E[3605]              	LES	DI,[THISSFT]
 14730 000033D4 26C745021000            	MOV	word [ES:DI+SF_ENTRY.sf_mode],SHARING_DENY_BOTH
 14731                                  				; requires exclusive access
 14732                                  	;MOV	word [ES:DI+SF_ENTRY.sf_ref_count],1 ; Pretend open
 14733 000033DA 26C7050100              	mov	word [ES:DI],1
 14734 000033DF E8783F                  	call	ShareEnter
 14735 000033E2 720D                    	jc	short CheckDone
 14736 000033E4 C43E[3605]              	LES	DI,[THISSFT]
 14737                                  	;MOV	word [ES:DI+SF_ENTRY.sf_ref_count],0
 14738 000033E8 26C7050000              	mov	word [ES:DI],0	; Pretend closed and free
 14739                                  	
 14740 000033ED E8643F                  	call	ShareEnd	; Tell sharer we're done with THISSFT
 14741 000033F0 F8                      	CLC
 14742                                  CheckDone:
 14743 000033F1 C42E[2405]              	LES	BP,[THISDPB]
 14744 000033F5 5E                      	POP	SI
 14745 000033F6 5B                      	POP	BX
 14746 000033F7 58                      	POP	AX
 14747 000033F8 5F                      	POP	DI
 14748 000033F9 1F                      	POP	DS
 14749 000033FA C3                      	retn
 14750                                  
 14751                                  ;Break	<FastOpen_Delete - delete dir info in fastopen>
 14752                                  ;---------------------------------------------------------------------------
 14753                                  ; Procedure Name : FastOpen_Delete
 14754                                  ; Inputs:
 14755                                  ;	None
 14756                                  ; Function:
 14757                                  ;	Call FastOpen to delete the dir info.
 14758                                  ; Outputs:
 14759                                  ;	None
 14760                                  ;---------------------------------------------------------------------------
 14761                                  
 14762                                  FastOpen_Delete:
 14763 000033FB 9C                      	PUSHF			; save flag
 14764 000033FC 56                      	PUSH	SI		; save registers
 14765 000033FD 53                      	PUSH	BX
 14766 000033FE 50                      	PUSH	AX
 14767                                  ;hkn; SS override
 14768 000033FF 8B36[4A05]              	MOV	SI,[WFP_START]	; ds:si points to path name
 14769 00003403 B003                    	MOV	AL,FONC_delete	; al = 3
 14770                                  fastinvoke:
 14771                                  ;hkn; FastTable is in DOSDATA
 14772 00003405 BB[450F]                	MOV	BX,FastTable+2
 14773 00003408 FF1F                    	CALL	far [BX]	; call fastopen
 14774 0000340A 58                      	POP	AX		; restore registers
 14775 0000340B 5B                      	POP	BX
 14776 0000340C 5E                      	POP	SI
 14777 0000340D 9D                      	POPF			; restore flag
 14778 0000340E C3                      	retn
 14779                                  
 14780                                  ;Break	<FastOpen_Update - update dir info in fastopen>
 14781                                  ;---------------------------------------------------------------------------
 14782                                  ; Procedure Name : FastOpen_Update
 14783                                  ;
 14784                                  ; Inputs:
 14785                                  ;	DL     drive number (A=0,B=1,,,)
 14786                                  ;	CX     first cluster #
 14787                                  ;	AH     0 updates dir entry
 14788                                  ;	       1 updates CLUSNUM , BP = new CLUSNUM
 14789                                  ;	ES:DI  directory entry
 14790                                  ; Function:
 14791                                  ;	Call FastOpen to update the dir info.
 14792                                  ; Outputs:
 14793                                  ;	None
 14794                                  ;---------------------------------------------------------------------------
 14795                                  
 14796                                  FastOpen_Update:
 14797 0000340F 9C                      	PUSHF			; save flag
 14798 00003410 56                      	PUSH	SI
 14799 00003411 53                      	PUSH	BX		; save regs
 14800 00003412 50                      	PUSH	AX
 14801 00003413 B004                    	MOV	AL,FONC_update	; al = 4
 14802 00003415 EBEE                    	JMP	short fastinvoke
 14803                                  
 14804                                  ;Break	<FastOpen_Rename - Rename directory>	   ; PTR 5622
 14805                                  ;---------------------------------------------------------------------------
 14806                                  ; PROCEDURE Name : FastOpen_Rename
 14807                                  ;
 14808                                  ; Inputs:
 14809                                  ;	 REN_WFP   = Path Name
 14810                                  ;	 NAME1	   = New Name
 14811                                  ; Function:
 14812                                  ;	Call FastOpen to rename the dir entry in the cache
 14813                                  ; Outputs:
 14814                                  ;	None
 14815                                  ;---------------------------------------------------------------------------
 14816                                  
 14817                                  FastOpen_Rename:
 14818                                  	; 08/08/2018 - Retro DOS v3.0
 14819                                  	; MSDOS 6.0
 14820                                  	;PUSHF			;AN001 save flag
 14821                                  	;PUSH	SI		;AN001 save registers
 14822                                  	;PUSH	DI		;AN001
 14823                                  	;PUSH	BX		;AN001
 14824                                  	;PUSH	AX		;AN001
 14825                                  	;
 14826                                  ;hkn; SS override
 14827                                  	;;MOV	SI,[SS:REN_WFP]	;AN001	;;AN001  ds:si-->Path name addrs
 14828                                  	;
 14829                                  	; ? - 08/08/2018 - Retro DOS v3.0
 14830                                  	;push	ss
 14831                                  	;pop	ds
 14832                                  	;mov	si,[REN_WFP]
 14833                                  	;
 14834                                  ;hkn; NAME1 is in DOSDATA
 14835                                  	;MOV	DI,NAME1	;;AN001  ds:di-->New name addrs
 14836                                  	;MOV	AL,FONC_Rename	;;AN001  al = 6
 14837                                  	;
 14838                                  ;hkn; FastTable is in DOSDATA
 14839                                  	;MOV	BX,FastTable+2
 14840                                  	;CALL	far [BX]	;;AN001  call fastopen
 14841                                  	;
 14842                                  	;POP	AX		; restore registers  ;AN001
 14843                                  	;POP	BX				     ;AN001
 14844                                  	;POP	DI				     ;AN001
 14845                                  	;POP	SI				     ;AN001
 14846                                  	;POPF			; restore flag	     ;AN001
 14847                                  	;retn					     ;AN001
 14848                                  
 14849                                  	; MSDOS 6.0
 14850                                  ;entry Fast_Dispatch		; future fastxxxx entry	;AN000;
 14851                                  Fast_Dispatch:
 14852                                  ;hkn; FastTable is in DOSDATA
 14853                                  	;MOV	SI,FastTable+2	; index to the	     ;AN000;
 14854                                  ;hkn; use SS override
 14855                                  	;CALL	far [SS:SI]	; RMFD call fastopen
 14856                                  	;retn
 14857                                  
 14858                                  ;============================================================================
 14859                                  ; RENAME.ASM, MSDOS 6.0, 1991
 14860                                  ;============================================================================
 14861                                  ; 08/08/2018 - Retro DOS v3.0
 14862                                  
 14863                                  ;	TITLE	DOS_RENAME - Internal RENAME call for MS-DOS
 14864                                  ;	NAME	DOS_RENAME
 14865                                  
 14866                                  ;**	Low level routine for renaming files
 14867                                  ;
 14868                                  ;	DOS_RENAME
 14869                                  ;
 14870                                  ;	Modification history:
 14871                                  ;
 14872                                  ;	    Created: ARR 30 March 1983
 14873                                  
 14874                                  ;----------------------------------------------------------------------------
 14875                                  ;
 14876                                  ; Procedure Name : DOS_RENAME
 14877                                  ;
 14878                                  ; Inputs:
 14879                                  ;	[WFP_START] Points to SOURCE WFP string ("d:/" must be first 3
 14880                                  ;		chars, NUL terminated)
 14881                                  ;	[CURR_DIR_END] Points to end of Current dir part of string [SOURCE]
 14882                                  ;		( = -1 if current dir not involved, else
 14883                                  ;		 Points to first char after last "/" of current dir part)
 14884                                  ;	[REN_WFP] Points to DEST WFP string ("d:/" must be first 3
 14885                                  ;		chars, NUL terminated)
 14886                                  ;	[THISCDS] Points to CDS being used
 14887                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 14888                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 14889                                  ; Function:
 14890                                  ;	Rename the specified file(s)
 14891                                  ;	NOTE: This routine uses most of AUXSTACK as a temp buffer.
 14892                                  ; Outputs:
 14893                                  ;	CARRY CLEAR
 14894                                  ;	    OK
 14895                                  ;	CARRY SET
 14896                                  ;	    AX is error code
 14897                                  ;		error_file_not_found
 14898                                  ;			No match for source, or dest path invalid
 14899                                  ;		error_not_same_device
 14900                                  ;			Source and dest are on different devices
 14901                                  ;		error_access_denied
 14902                                  ;			Directory specified (not simple rename),
 14903                                  ;			Device name given, Destination exists.
 14904                                  ;			NOTE: In third case some renames may have
 14905                                  ;			 been done if metas.
 14906                                  ;		error_path_not_found
 14907                                  ;			Bad path (not in curr dir part if present)
 14908                                  ;			SOURCE ONLY
 14909                                  ;		error_bad_curr_dir
 14910                                  ;			Bad path in current directory part of path
 14911                                  ;			SOURCE ONLY
 14912                                  ;		error_sharing_violation
 14913                                  ;			Deny both access required, generates an INT 24.
 14914                                  ; DS preserved, others destroyed
 14915                                  ;
 14916                                  ;----------------------------------------------------------------------------
 14917                                  
 14918                                  DOS_RENAME:
 14919                                  
 14920                                  ;hkn; DOS_RENAME is called from file.asm and fcbio.asm. DS has been set up
 14921                                  ;hkn; at this point to DOSDATA.
 14922                                  
 14923 00003417 E8B4EB                  	call	TestNet
 14924 0000341A 7306                    	JNC	short LOCAL_RENAME
 14925                                  
 14926                                  ;IF NOT Installed
 14927                                  ;	transfer NET_RENAME
 14928                                  ;ELSE
 14929                                  	;MOV	AX,(MultNET SHL 8) OR 17
 14930                                  	;INT	2FH
 14931                                  	;return
 14932                                  
 14933 0000341C B81111                  	mov     ax, 1111h
 14934 0000341F CD2F                    	int     2Fh 	; Multiplex - NETWORK REDIRECTOR - RENAME REMOTE FILE
 14935                                  			; SS = DS = DOS CS, 
 14936                                  			; SDA first filename pointer = offset of fully-qualified old name
 14937                                  			; SDA CDS pointer -> current directory
 14938                                  			; Return: CF set on error
 14939 00003421 C3                      	retn
 14940                                  ;ENDIF
 14941                                  
 14942                                  LOCAL_RENAME:
 14943 00003422 C606[D102]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 14944 00003427 8B36[4A05]              	MOV	SI,[WFP_START]
 14945 0000342B 8B3E[4C05]              	MOV	DI,[REN_WFP]
 14946 0000342F 8A04                    	MOV	AL,[SI]
 14947 00003431 8A25                    	MOV	AH,[DI]
 14948 00003433 0D2020                  	OR	AX,2020H		; Lower case
 14949 00003436 38E0                    	CMP	AL,AH
 14950 00003438 7405                    	JZ	short SAMEDRV
 14951 0000343A B81100                  	MOV	AX,error_not_same_device
 14952 0000343D F9                      	STC
 14953 0000343E C3                      	retn
 14954                                  
 14955                                  SAMEDRV:
 14956 0000343F FF36[DC02]              	PUSH	WORD [DMAADD+2]
 14957 00003443 FF36[DA02]              	PUSH	WORD [DMAADD]
 14958 00003447 8C1E[DC02]              	MOV	[DMAADD+2],DS
 14959                                  
 14960                                  ;hkn; RENAMEDMA is in DOSDATA
 14961 0000344B C706[DA02][8605]        	MOV	WORD [DMAADD],RENAMEDMA
 14962 00003451 C606[0B05]00            	MOV	byte [FOUND_DEV],0	; Rename fails on DEVS, assume not a dev
 14963 00003456 E813EC                  	call	EcritDisk
 14964 00003459 E8B804                  	call	DOS_SEARCH_FIRST	; Sets [NoSetDir] to 1, [CURBUF+2]:BX
 14965                                  					;    points to entry
 14966 0000345C 7315                    	JNC	short Check_Dev
 14967 0000345E 83F812                  	CMP	AX,error_no_more_files
 14968 00003461 7503                    	JNZ	short GOTERR
 14969 00003463 B80200                  	MOV	AX,error_file_not_found
 14970                                  GOTERR:
 14971 00003466 F9                      	STC
 14972                                  RENAME_POP:
 14973 00003467 8F06[DA02]              	POP	WORD [DMAADD]
 14974 0000346B 8F06[DC02]              	POP	WORD [DMAADD+2]
 14975 0000346F E802EC                  	call	LcritDisk
 14976 00003472 C3                      	retn
 14977                                  
 14978                                  Check_Dev:
 14979 00003473 B80500                  	MOV	AX,error_access_denied	; Assume error
 14980                                  	;
 14981                                  	; MSDOS 6.0
 14982                                  	;PUSH	DS			      ;PTM.			    ;AN000;
 14983                                  	;LDS	SI,[DMAADD]		      ;PTM.  chek if source a dir   ;AN000;
 14984                                  	;!?;ADD	SI,find_buf.attr	      ;PTM.			    ;AN000;
 14985                                  	;!?;TEST byte [SI+dir_entry.dir_attr],attr_directory  ;PTM.	    ;AN000;
 14986                                  	;JZ	short notdir		      ;PTM.			    ;AN000;
 14987                                  	;MOV	SI,[REN_WFP]		      ;PTM.  if yes, make sure path ;AN000;
 14988                                  	;call	Check_Pathlen2		      ;PTM.   length < 67	    ;AN000;
 14989                                  ;notdir:
 14990                                  	;POP	DS			      ;PTM.			    ;AN000;
 14991                                  	;JA	short GOTERR		      ;PTM.			    ;AN000;
 14992                                  	;
 14993                                  	; MSDOS 3.3 (& MSDOS 6.0)
 14994 00003476 803E[0B05]00            	CMP	byte [FOUND_DEV],0
 14995 0000347B 75E9                    	JNZ	short GOTERR
 14996                                  ; At this point a source has been found. There is search continuation info (a
 14997                                  ; la DOS_SEARCH_NEXT) for the source at RENAMEDMA, together with the first
 14998                                  ; directory entry found.
 14999                                  ; [THISCDS], [THISDPB], and [THISDRV] are set and will remain correct
 15000                                  ; throughout the RENAME since it is known at this point that the source and
 15001                                  ; destination are both on the same device.
 15002                                  ; [SATTRIB] is also set.
 15003 0000347D 89DE                    	MOV	SI,BX
 15004 0000347F 83C61A                  	ADD	SI,dir_entry.dir_first
 15005 00003482 E80DFF                  	call	REN_DEL_Check
 15006 00003485 7305                    	JNC	short REN_OK1
 15007 00003487 B82000                  	MOV	AX,error_sharing_violation
 15008 0000348A EBDB                    	JMP	short RENAME_POP
 15009                                  
 15010                                  ;------------------------------------------------------------------------------
 15011                                  ; Check if the source is a file or directory. If file, delete the entry
 15012                                  ; from the Fastopen cache. If directory, rename it later
 15013                                  ;------------------------------------------------------------------------------
 15014                                  REN_OK1:				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 15015                                  	; MSDOS 6.0
 15016                                  	;PUSH	SI
 15017                                  	;LDS	SI,[DMAADD]		;BN00X; PTM. check if source a dir ;AN000;
 15018                                  	;!?;ADD	SI,find_buf.attr	;;BN00XPTM.P5520		   ;AN000;
 15019                                  	;!?;TEST byte [SI+dir_entry.dir_attr],attr_directory ;;BN00XPTM.   ;AN000;
 15020                                  	;JZ	short NOT_DIR1		;;BN00XPTM.			   ;AN000;
 15021                                  	;POP	SI			;BN00X
 15022                                  	;JMP	SHORT SWAP_SOURCE	;BN00X
 15023                                  	;
 15024                                  ;NOT_DIR1:				;;BN00X it is a file, delete the entry
 15025                                  	;POP	SI
 15026                                  	;
 15027                                  	; MSDOS 3.3 (& MSDOS 6.0)	
 15028 0000348C E86CFF                  	call	FastOpen_Delete 	; delete dir info in fastopen DOS 3.3
 15029                                  
 15030                                  ;SWAP_SOURCE:
 15031                                  	; MSDOS 3.3
 15032                                  	;MOV	SI,[REN_WFP]
 15033                                  	;MOV	[WFP_START],SI
 15034                                  	; MSDOS 6.0
 15035 0000348F A1[4A05]                	MOV	AX,[WFP_START]		; Swap source and destination
 15036 00003492 8B36[4C05]              	MOV	SI,[REN_WFP]		; Swap source and destination
 15037 00003496 8936[4A05]              	MOV	[WFP_START],SI		; WFP_START = Destination path
 15038 0000349A A3[4C05]                	MOV	[REN_WFP],AX		; REN_WFP   = Source path
 15039                                  	; MSDOS 3.3 (& MSDOS 6.0)
 15040 0000349D C706[4E05]FFFF          	MOV	word [CURR_DIR_END],-1	; No current dir on dest
 15041 000034A3 C706[1805]FFE5          	MOV	WORD [CREATING],DIRFREE*256+0FFh  ; Creating, not DEL *.*
 15042                                  					; A rename is like a CREATE_NEW as far
 15043                                  					; as the destination is concerned.
 15044 000034A9 E88F13                  	call	GetPathNoSet
 15045                                  ;   If this GETPATH fails due to file not found, we know all renames will work
 15046                                  ;   since no files match the destination name. If it fails for any other
 15047                                  ;   reason, the rename fails on a path not found, or whatever (also fails if
 15048                                  ;   we find a device or directory). If the GETPATH succeeds, we aren't sure
 15049                                  ;   if the rename should fail because we haven't built an explicit name by
 15050                                  ;   substituting for the meta chars in it. In this case the destination file
 15051                                  ;   spec with metas is in [NAME1] and the explicit source name is at RENAMEDMA
 15052                                  ;   in the directory entry part.
 15053 000034AC 7223                    	JC	short NODEST
 15054                                  	;; MSDOS 6.0
 15055                                  	;; JZ	short BAD_ACC 		; Dest string is a directory	;AC000;
 15056                                  	; !! MSDOS 3.3 !!
 15057 000034AE 7404                    	JZ	short BAD_ACC ; !!	; Dest string is a directory
 15058                                  	;
 15059 000034B0 08E4                    	OR	AH,AH			; Device?
 15060 000034B2 7930                    	JNS	short SAVEDEST		; No, continue
 15061                                  BAD_ACC:
 15062 000034B4 B80500                  	MOV	AX,error_access_denied
 15063 000034B7 F9                      	STC
 15064                                  RENAME_CLEAN:
 15065 000034B8 9C                      	PUSHF				; Save carry state
 15066 000034B9 50                      	PUSH	AX			; and error code (if carry set)
 15067 000034BA A0[1105]                	MOV	AL,[THISDRV]
 15068 000034BD E86D2A                  	call	FLUSHBUF
 15069 000034C0 58                      	POP	AX
 15070 000034C1 803E[F602]00            	CMP	byte [FAILERR],0
 15071 000034C6 7503                    	JNZ	short BAD_ERR		; User FAILed to I 24
 15072 000034C8 9D                      	POPF
 15073 000034C9 EB9C                    	JMP	short RENAME_POP
 15074                                  
 15075                                  BAD_ERR:
 15076 000034CB 58                      	POP	AX			; Saved flags
 15077 000034CC B80300                  	MOV	AX,error_path_not_found
 15078 000034CF EB95                    	JMP	short GOTERR
 15079                                  
 15080                                  NODEST:
 15081 000034D1 750B                    	JNZ	short BAD_PATH
 15082 000034D3 803E[F602]00            	CMP	byte [FAILERR],0
 15083 000034D8 7504                    	JNZ	short BAD_PATH	; Search for dest failed because user FAILed on
 15084                                  				;	I 24
 15085 000034DA 08C9                    	OR	CL,CL
 15086 000034DC 7506                    	JNZ	short SAVEDEST
 15087                                  BAD_PATH:
 15088 000034DE B80300                  	MOV	AX,error_path_not_found
 15089 000034E1 F9                      	STC
 15090 000034E2 EB83                    	JMP	short RENAME_POP
 15091                                  
 15092                                  SAVEDEST:
 15093 000034E4 16                      	push	ss
 15094 000034E5 07                      	pop	es
 15095                                  
 15096                                  ;hkn; NAME1 & NAME2 is in DOSDATA
 15097 000034E6 BF[F204]                	MOV	DI,NAME2
 15098 000034E9 BE[E604]                	MOV	SI,NAME1
 15099                                  
 15100 000034EC B90B00                  	MOV	CX,11
 15101 000034EF F3A4                    	REP	MOVSB			; Save dest with metas at NAME2
 15102 000034F1 A1[5805]                	MOV	AX,[DIRSTART]
 15103 000034F4 A3[FF04]                	MOV	[DESTSTART],AX
 15104                                  BUILDDEST:
 15105 000034F7 16                      	push	ss
 15106 000034F8 07                      	pop	es			; needed due to JMP BUILDDEST below
 15107                                  
 15108                                  ;hkn; RENAMEDMA, NAME1, NAME2 in DOSDATA
 15109 000034F9 BB[9B05]                	MOV	BX,RENAMEDMA+21		; Source of replace chars
 15110 000034FC BF[E604]                	MOV	DI,NAME1		; Real dest name goes here
 15111 000034FF BE[F204]                	MOV	SI,NAME2		; Raw dest
 15112                                  
 15113 00003502 B90B00                  	MOV	CX,11
 15114                                  	
 15115                                  	; MSDOS 6.0
 15116                                  	;CALL	NEW_RENAME		;IFS. replace ? chars	;AN000;
 15117                                  
 15118                                  	; MSDOS 3.3
 15119                                  
 15120                                  ; 08/08/2018 - Retro DOS v3.0
 15121                                  ; MSDOS 6.0 
 15122                                  ;---------------------------------------------------------------------------
 15123                                  ;Procedure: NEW_RENAME
 15124                                  ;
 15125                                  ;Input: DS:SI -> raw string with ?
 15126                                  ;	ES:DI -> destination string
 15127                                  ;	DS:BX -> source string
 15128                                  ;Function: replace ? chars of raw string with chars in source string and
 15129                                  ;	   put in destination string
 15130                                  ;Output: ES:DI-> new string
 15131                                  ;---------------------------------------------------------------------------
 15132                                  
 15133                                  NEW_RENAME:
 15134                                  NEWNAM:
 15135                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 341Ah
 15136 00003505 AC                      	LODSB
 15137 00003506 3C3F                    	CMP	AL,"?"
 15138 00003508 7502                    	JNZ	short NOCHG
 15139 0000350A 8A07                    	MOV	AL,[BX] 		; Get replace char
 15140                                  NOCHG:
 15141 0000350C AA                      	STOSB
 15142 0000350D 43                      	INC	BX			; Next replace char
 15143 0000350E E2F5                    	LOOP	NEWNAM
 15144                                  	; MSSOS 6.0
 15145                                  	;retn
 15146                                  
 15147                                  	; MSDOS 3.3 (& MSDOS 6.0)
 15148 00003510 C606[0605]16            	MOV	byte [ATTRIB],attr_all	; Stop duplicates with any attributes
 15149 00003515 C606[1805]FF            	MOV	byte [CREATING],0FFH
 15150 0000351A E8C315                  	call	DEVNAME 		; Check if we built a device name
 15151 0000351D 7395                    	JNC	short BAD_ACC
 15152 0000351F 8B1E[FF04]              	MOV	BX,[DESTSTART]
 15153 00003523 C42E[2405]              	LES	BP,[THISDPB]
 15154 00003527 E8B612                  	call	SETDIRSRCH		; Reset search to start of dir
 15155 0000352A 7288                    	JC	short BAD_ACC 		; Screw up
 15156 0000352C E87611                  	call	FINDENTRY		; See if new name already exists
 15157 0000352F 7383                    	JNC	short BAD_ACC 		; Error if found
 15158 00003531 803E[F602]00            	CMP	byte [FAILERR],0
 15159 00003536 752A                    	JNZ	short BAD_ACCJ		; Find failed because user FAILed to I 24
 15160 00003538 A1[FF04]                	MOV	AX,[DESTSTART]		; DIRSTART of dest
 15161 0000353B 3B06[9505]              	CMP	AX,[RENAMEDMA+15]	; DIRSTART of source
 15162 0000353F 7453                    	JZ	short SIMPLE_RENAME	; If =, just give new name
 15163                                  
 15164 00003541 A0[A605]                	MOV	AL,[RENAMEDMA+21+dir_entry.dir_attr]
 15165 00003544 A810                    	TEST	AL,attr_directory
 15166 00003546 751A                    	JNZ	short BAD_ACCJ		; Can only do a simple rename on dirs,
 15167                                  					; otherwise the . and .. entries get
 15168                                  					; wiped.
 15169 00003548 A2[0605]                	MOV	[ATTRIB],AL
 15170 0000354B 8C1E[3805]              	MOV	[THISSFT+2],DS
 15171                                  
 15172                                  ;hkn; AUXSTACK is in DOSDATA
 15173 0000354F BE[D106]                	MOV	SI,AUXSTACK-SF_ENTRY.size
 15174 00003552 8936[3605]              	MOV	[THISSFT],SI
 15175 00003556 C744020200              	MOV	word [SI+SF_ENTRY.sf_mode],SHARING_COMPAT+open_for_both
 15176 0000355B 31C9                    	XOR	CX,CX			; Set "device ID" for call into makenode
 15177 0000355D E8F21A                  	call	RENAME_MAKE		; This is in mknode
 15178 00003560 7303                    	JNC	short GOT_DEST
 15179                                  BAD_ACCJ:
 15180 00003562 E94FFF                  	JMP	BAD_ACC
 15181                                  
 15182                                  GOT_DEST:
 15183 00003565 53                      	push	bx
 15184 00003566 C43E[3605]              	LES	DI,[THISSFT]		; RENAME_MAKE entered this into sharing
 15185 0000356A E8E73D                  	call	ShareEnd		; we need to remove it.
 15186 0000356D 5B                      	pop	bx
 15187                                  ; A zero length entry with the correct new name has now been made at
 15188                                  ;   [CURBUF+2]:BX.
 15189 0000356E C43E[7405]              	LES	DI,[CURBUF]
 15190                                  
 15191                                  	; MSDOS 6.0
 15192                                  	;TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 15193                                  	;				;LB. if already dirty		  ;AN000;
 15194                                  	;JNZ	short yesdirty		;LB.  don't increment dirty count ;AN000;
 15195                                  	;call	INC_DIRTY_COUNT 	;LB.				  ;AN000;
 15196                                  	
 15197 00003572 26804D0540              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 15198                                  ;yesdirty:
 15199 00003577 89DF                    	MOV	DI,BX
 15200 00003579 83C70B                  	ADD	DI,dir_entry.dir_attr	; Skip name
 15201                                  
 15202                                  ;hkn; RENAMEDMA is in DOSDATA
 15203 0000357C BE[A605]                	MOV	SI,RENAMEDMA+21+dir_entry.dir_attr
 15204 0000357F B91500                  	MOV	CX,dir_entry.size-dir_entry.dir_attr ; mov cx,21
 15205 00003582 F3A4                    	REP	MOVSB
 15206 00003584 E85100                  	CALL	GET_SOURCE
 15207 00003587 724B                    	JC	short RENAME_OVER
 15208 00003589 89DF                    	MOV	DI,BX
 15209 0000358B 8E06[7605]              	MOV	ES,[CURBUF+2]
 15210 0000358F B0E5                    	MOV	AL,DIRFREE
 15211 00003591 AA                      	STOSB				; "free" the source
 15212 00003592 EB13                    	JMP	SHORT DIRTY_IT
 15213                                  
 15214                                  SIMPLE_RENAME:
 15215 00003594 E84100                  	CALL	GET_SOURCE		; Get the source back
 15216 00003597 723B                    	JC	short RENAME_OVER
 15217 00003599 89DF                    	MOV	DI,BX
 15218 0000359B 8E06[7605]              	MOV	ES,[CURBUF+2]
 15219                                  
 15220                                  ;hkn; NAME1 is in DOSDATA
 15221 0000359F BE[E604]                	MOV	SI,NAME1		; New Name
 15222 000035A2 B90B00                  	MOV	CX,11
 15223 000035A5 F3A4                    	REP	MOVSB
 15224                                  DIRTY_IT:
 15225 000035A7 8B3E[7405]              	MOV	DI,[CURBUF]
 15226                                  
 15227                                  	; MSDOS 6.0
 15228                                  	;TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 15229                                  	;				;LB. if already dirty		  ;AN000;
 15230                                  	;JNZ	short Yesdirty2		;LB.  don't increment dirty count ;AN000;
 15231                                  	;call	INC_DIRTY_COUNT 	;LB.				  ;AN000;
 15232                                  	
 15233 000035AB 26804D0540              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 15234                                  ;------------------------------------------------------------------------------
 15235                                  ; Check if the source is a directory of file. If directory rename it to the
 15236                                  ; the new name in the Fastopen cache buffer.  If file name it has been
 15237                                  ; previously deleted.
 15238                                  ;------------------------------------------------------------------------------
 15239                                  ;Yesdirty2:
 15240                                  	; MSDOS 6.0
 15241                                  	;PUSH	SI
 15242                                  	;LDS	SI,[DMAADD]		;;BN00XPTM. chek if source a dir ;AN000;
 15243                                  	;ADD	SI,find_buf.attr	;;BN00XPTM.P5520		;AN000;
 15244                                  	;TEST	byte [SI+dir_entry.dir_attr],attr_directory ;;BN00XPTM.	;AN000;
 15245                                  	;JZ	short NOT_DIR2		;;BN00XPTM.			;AN000;
 15246                                  	;call	FASTOPEN_RENAME		;;BN00X rename dir entry in fastopen
 15247                                  	;POP	SI
 15248                                  	;JMP	SHORT NOT_DIRTY1
 15249                                  ;NOT_DIR2:				;;BN00X it is a file, delete the entry
 15250                                  	;POP	SI
 15251                                  ;NOT_DIRTY1:				;;BN00X
 15252                                  NEXT_SOURCE:
 15253                                  ;hkn; RENAMEDMA is in DOSDATA
 15254 000035B0 BE[8705]                	MOV	SI,RENAMEDMA+1		;Name
 15255                                  ;
 15256                                  ; WARNING! Rename_Next leaves the disk critical section *ALWAYS*. We need
 15257                                  ; to enter it before going to RENAME_Next.
 15258                                  ;
 15259 000035B3 E8B6EA                  	call	EcritDisk
 15260 000035B6 C606[1805]00            	MOV	byte [CREATING],0 ; Correct setting for search (we changed it
 15261                                  				  ;  to FF when we made the prev new file).
 15262 000035BB E85704                  	call	RENAME_NEXT
 15263                                  ;
 15264                                  ; Note, now, that we have exited the previous ENTER and so are back to where
 15265                                  ; we were before.
 15266                                  ;
 15267 000035BE 7214                    	JC	short RENAME_OVER
 15268 000035C0 8D771A                  	LEA	SI,[BX+dir_entry.dir_first]
 15269 000035C3 E8CCFD                  	call	REN_DEL_Check
 15270 000035C6 7306                    	JNC	short REN_OK2
 15271 000035C8 B82000                  	MOV	AX,error_sharing_violation
 15272 000035CB E9EAFE                  	JMP	RENAME_CLEAN ; 10/08/2018
 15273                                  
 15274                                  ;------------------------------------------------------------------------------
 15275                                  ; Check if file or directory. If file, delete file from the Fastopen cache,
 15276                                  ; if directory, rename directory name in the Fastopen cache.
 15277                                  ;-----------------------------------------------------------------------------
 15278                                  REN_OK2:
 15279                                  	; MSDOS 6.0
 15280                                  	;MOV	AL,[RENAMEDMA+21+dir_entry.dir_attr] ; PTR P5622
 15281                                  	;TEST	AL,attr_directory	;;BN00X directory
 15282                                  	;JZ	short Ren_Directory	;;BN00X no - file, delete it
 15283                                  	
 15284                                  	; MSDOS 3.3 (& MSDOS 6.0)
 15285 000035CE E82AFE                  	call	FastOpen_Delete 	;;BN00X delete dir info in fastopen DOS 3.3
 15286 000035D1 E923FF                  	JMP	BUILDDEST		;;BN00X
 15287                                  
 15288                                  	; MSDOS 6.0
 15289                                  ;Ren_Directory:
 15290                                  	;call	FASTOPEN_RENAME 	;;BN00X delete dir info in fastopen DOS 3.3
 15291                                  	;JMP	BUILDDEST
 15292                                  
 15293                                  RENAME_OVER:
 15294 000035D4 F8                      	CLC
 15295 000035D5 E9E0FE                  	JMP	RENAME_CLEAN ; 10/08/2018
 15296                                  
 15297                                  ;----------------------------------------------------------------------------
 15298                                  ; Procedure: GET_SOURCE
 15299                                  ;
 15300                                  ; Inputs:
 15301                                  ;	RENAMEDMA has source info
 15302                                  ; Function:
 15303                                  ;	Re-find the source
 15304                                  ; Output:
 15305                                  ;	[CURBUF] set
 15306                                  ;	[CURBUF+2]:BX points to entry
 15307                                  ;	Carry set if error (currently user FAILed to I 24)
 15308                                  ; DS preserved, others destroyed
 15309                                  ;----------------------------------------------------------------------------
 15310                                  
 15311                                  GET_SOURCE:
 15312 000035D8 8B1E[9505]              	MOV	BX,[RENAMEDMA+15]	; DirStart
 15313 000035DC C42E[2405]              	LES	BP,[THISDPB]
 15314 000035E0 E8FD11                  	call	SETDIRSRCH
 15315 000035E3 7209                    	JC	short gs_ret_label	; retc
 15316 000035E5 E8D714                  	call	STARTSRCH
 15317 000035E8 A1[9305]                	MOV	AX,[RENAMEDMA+13]	; Lastent
 15318 000035EB E8C411                  	call	GETENT
 15319                                  
 15320                                  gs_ret_label:
 15321 000035EE C3                      	retn
 15322                                  
 15323                                  ;============================================================================
 15324                                  ; FINFO.ASM, MSDOS 6.0, 1991
 15325                                  ;============================================================================
 15326                                  ; 08/08/2018 - Retro DOS v3.0
 15327                                  
 15328                                  ;**	Low level routines for returning file information and setting file
 15329                                  ;	attributes
 15330                                  ;
 15331                                  ;	GET_FILE_INFO
 15332                                  ;	SET_FILE_ATTRIBUTE
 15333                                  ;
 15334                                  ;	Modification history:
 15335                                  ;
 15336                                  ;	    Created: ARR 30 March 1983
 15337                                  ;
 15338                                  ;	M025: Return access_denied if attempting to set
 15339                                  ;	      attribute of root directory.
 15340                                  ;
 15341                                  
 15342                                  ;SUBTTL GET_FILE_INFO -- Get File Information
 15343                                  
 15344                                  ;---------------------------------------------------------------------------
 15345                                  ; Procedure Name : GET_FILE_INFO
 15346                                  ;
 15347                                  ; Inputs:
 15348                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 15349                                  ;		terminated)
 15350                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 15351                                  ;		( = -1 if current dir not involved, else
 15352                                  ;		 Points to first char after last "/" of current dir part)
 15353                                  ;	[THISCDS] Points to CDS being used
 15354                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 15355                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 15356                                  ; Function:
 15357                                  ;	Get Information about a file
 15358                                  ; Returns:
 15359                                  ;	CARRY CLEAR
 15360                                  ;	    AX = Attribute of file
 15361                                  ;	    CX = Time stamp of file
 15362                                  ;	    DX = Date stamp of file
 15363                                  ;	    BX:DI = Size of file (32 bit)
 15364                                  ;	CARRY SET
 15365                                  ;	    AX is error code
 15366                                  ;		error_file_not_found
 15367                                  ;			Last element of path not found
 15368                                  ;		error_path_not_found
 15369                                  ;			Bad path (not in curr dir part if present)
 15370                                  ;		error_bad_curr_dir
 15371                                  ;			Bad path in current directory part of path
 15372                                  ; DS preserved, others destroyed
 15373                                  ;---------------------------------------------------------------------------
 15374                                  
 15375                                  GET_FILE_INFO:
 15376                                  
 15377                                  ;hkn; get_file_info is called from file.asm and fcbio.asm. DS has been set 
 15378                                  ;hkn; to DOSDATA at this point. So DOSassume is OK.
 15379                                  
 15380 000035EF E8DCE9                  	call	TestNet
 15381 000035F2 7306                    	JNC	short LOCAL_INFO
 15382                                  
 15383                                  ;IF NOT Installed
 15384                                  ;	transfer NET_GET_FILE_INFO
 15385                                  ;ELSE
 15386                                  ;	MOV	AX,(MultNET SHL 8) OR 15
 15387                                  ;	INT	2FH
 15388                                  ;	return
 15389                                  
 15390 000035F4 B80F11                  	mov     ax, 110Fh
 15391 000035F7 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - GET REMOTE FILE'S ATTRIBUTES
 15392                                  			; SS = DOS CS, SDA first filename pointer -> fully-qualified name of file
 15393                                  			; SDA CDS pointer -> current directory
 15394                                  			; Return: CF set on error, AX = file attributes
 15395 000035F9 C3                      	retn
 15396                                  ;ENDIF
 15397                                  
 15398                                  LOCAL_INFO:
 15399 000035FA E86FEA                  	call	EcritDisk
 15400 000035FD C606[F802]01            	MOV	byte [NoSetDir],1	; if we find a dir, don't change to it
 15401                                  	; MSDOS 6.0
 15402                                  	;call	Get_FAST_PATH
 15403                                  	; MSDOS 3.3
 15404 00003602 E83012                  	call	GETPATH
 15405                                  info_check:
 15406 00003605 7313                    	JNC	short info_check_dev
 15407                                  NO_PATH:
 15408 00003607 750C                    	JNZ	short bad_path1
 15409 00003609 08C9                    	OR	CL,CL
 15410 0000360B 7408                    	JZ	short bad_path1
 15411                                  info_no_file:
 15412 0000360D B80200                  	MOV	AX,error_file_not_found
 15413                                  BadRet:
 15414 00003610 F9                      	STC
 15415                                  JustRet:
 15416 00003611 E860EA                  	call	LcritDisk
 15417 00003614 C3                      	retn
 15418                                  
 15419                                  bad_path1:
 15420 00003615 B80300                  	MOV	AX,error_path_not_found
 15421 00003618 EBF6                    	jmp	short BadRet
 15422                                  
 15423                                  info_check_dev:
 15424 0000361A 08E4                    	OR	AH,AH
 15425 0000361C 78EF                    	JS	short info_no_file	; device
 15426                                  
 15427                                  	; MSDOS 6.0
 15428                                  ;SR;
 15429                                  ; If root dir then CurBuf == -1. Check for this case and return subdir attr
 15430                                  ;for a root dir
 15431                                  ;
 15432 0000361E 833E[7405]FF            	cmp	word [CURBUF],-1	;is it a root dir?
 15433 00003623 7507                    	jne	short not_root		;no, CurBuf ptr is valid
 15434                                  
 15435 00003625 30E4                    	xor	ah,ah
 15436 00003627 B010                    	mov	al,attr_directory
 15437 00003629 F8                      	clc
 15438 0000362A EBE5                    	jmp	short JustRet
 15439                                  
 15440                                  not_root:
 15441                                  	; MSDOS 3.3 (& MSDOS 6.0)
 15442 0000362C 1E                      	PUSH	DS
 15443 0000362D 8E1E[7605]              	MOV	DS,[CURBUF+2]
 15444 00003631 89DE                    	MOV	SI,BX
 15445 00003633 31DB                    	XOR	BX,BX			; Assume size=0 (dir)
 15446 00003635 89DF                    	MOV	DI,BX
 15447 00003637 8B4C16                  	MOV	CX,[SI+dir_entry.dir_time]
 15448 0000363A 8B5418                  	MOV	DX,[SI+dir_entry.dir_date]
 15449 0000363D 30E4                    	XOR	AH,AH
 15450 0000363F 8A440B                  	MOV	AL,[SI+dir_entry.dir_attr]
 15451 00003642 A810                    	TEST	AL,attr_directory
 15452 00003644 7506                    	JNZ	short NO_SIZE
 15453 00003646 8B7C1C                  	MOV	DI,[SI+dir_entry.dir_size_l]
 15454 00003649 8B5C1E                  	MOV	BX,[SI+dir_entry.dir_size_h]
 15455                                  NO_SIZE:
 15456 0000364C 1F                      	POP	DS
 15457 0000364D F8                      	CLC
 15458 0000364E EBC1                    	jmp	short JustRet
 15459                                  
 15460                                  ;Break	<SET_FILE_ATTRIBUTE -- Set File Attribute>
 15461                                  ;-------------------------------------------------------------------------------
 15462                                  ; Procedure Name : SET_FILE_ATTRIBUTE
 15463                                  ; Inputs:
 15464                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 15465                                  ;		terminated)
 15466                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 15467                                  ;		( = -1 if current dir not involved, else
 15468                                  ;		 Points to first char after last "/" of current dir part)
 15469                                  ;	[THISCDS] Points to CDS being used
 15470                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 15471                                  ;	[SATTRIB] is attribute of search (determines what files may be found)
 15472                                  ;	AX is new attributes to give to file
 15473                                  ; Function:
 15474                                  ;	Set File Attributes
 15475                                  ; Returns:
 15476                                  ;	CARRY CLEAR
 15477                                  ;	    No error
 15478                                  ;	CARRY SET
 15479                                  ;	    AX is error code
 15480                                  ;		error_file_not_found
 15481                                  ;			Last element of path not found
 15482                                  ;		error_path_not_found
 15483                                  ;			Bad path (not in curr dir part if present)
 15484                                  ;		error_bad_curr_dir
 15485                                  ;			Bad path in current directory part of path
 15486                                  ;		error_access_denied
 15487                                  ;			Attempt to set an attribute which cannot be set
 15488                                  ;			(attr_directory, attr_volume_ID)
 15489                                  ;		error_sharing_violation
 15490                                  ;			Sharing mode of file did not allow the change
 15491                                  ;			(this request requires exclusive write/read access)
 15492                                  ;			(INT 24H generated)
 15493                                  ; DS preserved, others destroyed
 15494                                  ;----------------------------------------------------------------------------
 15495                                  
 15496                                  SET_FILE_ATTRIBUTE:
 15497                                  
 15498                                  ;hkn; set_file_attr is called from file.asm. DS has been set 
 15499                                  ;hkn; to DOSDATA at this point. So DOSassume is OK.
 15500                                  
 15501 00003650 A9D8FF                  	TEST	AX,~attr_changeable ; 0FFD8h
 15502 00003653 7414                    	JZ	short set_look
 15503                                  _BAD_ACC:
 15504 00003655 C606[D102]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk
 15505 0000365A C606[D502]07            	MOV	byte [EXTERR_CLASS],errCLASS_Apperr
 15506 0000365F C606[D402]04            	MOV	byte [EXTERR_ACTION],errACT_Abort
 15507 00003664 B80500                  	MOV	AX,error_access_denied
 15508 00003667 F9                      	STC
 15509 00003668 C3                      	retn
 15510                                  
 15511                                  set_look:
 15512 00003669 E862E9                  	call	TestNet
 15513 0000366C 7308                    	JNC	short LOCAL_SET
 15514                                  
 15515                                  ;IF NOT Installed
 15516                                  ;	transfer NET_SEQ_SET_FILE_ATTRIBUTE
 15517                                  ;ELSE
 15518 0000366E 50                      	PUSH	AX
 15519                                  	
 15520                                  	;MOV	AX,(MultNET SHL 8) OR 14
 15521                                  	;INT	2FH
 15522                                  
 15523 0000366F B80E11                  	mov     ax, 110Eh
 15524 00003672 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - SET REMOTE FILE'S ATTRIBUTES
 15525                                  			; SS = DOS CS, SDA first filename pointer -> fully-qualified name of file
 15526                                  			; SDA CDS pointer -> current directory
 15527                                  			; STACK: WORD new file attributes
 15528                                  			; Return: CF set on error
 15529                                  
 15530 00003674 5B                      	POP	BX			; clean stack
 15531 00003675 C3                      	retn
 15532                                  ;ENDIF
 15533                                  
 15534                                  LOCAL_SET:
 15535 00003676 E8F3E9                  	call	EcritDisk
 15536 00003679 50                      	PUSH	AX			; Save new attributes
 15537 0000367A C606[F802]01            	MOV	byte [NoSetDir],1	; if we find a dir, don't change to it
 15538 0000367F E8B311                  	call	GETPATH 		; get path through fastopen if there	 ;AC000;
 15539 00003682 7303                    	JNC	short set_check_device
 15540 00003684 5B                      	POP	BX			; Clean stack (don't zap AX)
 15541 00003685 EB80                    	JMP	short NO_PATH
 15542                                  
 15543                                  set_check_device:
 15544 00003687 08E4                    	OR	AH,AH
 15545 00003689 7906                    	JNS	short set_check_share
 15546 0000368B 58                      	POP	AX
 15547 0000368C E8E5E9                  	call	LcritDisk
 15548 0000368F EBC4                    	JMP	short _BAD_ACC 		; device
 15549                                  
 15550                                  set_check_share:
 15551 00003691 58                      	POP	AX			; Get new attributes
 15552                                  
 15553                                  	; MSDOS 6.0
 15554 00003692 833E[7405]FF            	cmp	word [CURBUF], -1	; M025: Q: is this the root dir
 15555 00003697 740A                    	je	short cannot_set_root	; M025: Y: return error
 15556                                  
 15557                                  	; MSDOS 3.3 (& MSDOS 6.0)
 15558 00003699 E8F6FC                  	call	REN_DEL_Check
 15559 0000369C 730B                    	JNC	short set_do
 15560 0000369E B82000                  	MOV	AX,error_sharing_violation
 15561 000036A1 EB30                    	jmp	short OK_BYE
 15562                                  
 15563                                  	; MSDOS 6.0
 15564                                  cannot_set_root:			; M025:
 15565 000036A3 B80500                  	mov	ax, error_access_denied	; M025: return error is attempting
 15566 000036A6 F9                      	stc				; M025: to set attr. of root
 15567 000036A7 EB2A                    	jmp	short OK_BYE		; M025:
 15568                                  
 15569                                  set_do:
 15570                                  	; MSDOS 3.3 (& MSDOS 6.0)
 15571 000036A9 C43E[7405]              	LES	DI,[CURBUF]
 15572 000036AD 2680670BD8              	AND	BYTE [ES:BX+dir_entry.dir_attr],~attr_changeable ; 0D8h
 15573 000036B2 2608470B                	OR	BYTE [ES:BX+dir_entry.dir_attr],AL
 15574                                  
 15575                                  	; MSDOS 6.0
 15576                                  	;TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 15577                                  	;				;LB. if already dirty		  ;AN000;
 15578                                  	;JNZ	short yesdirty3		;LB.  don't increment dirty count ;AN000;
 15579                                  	;call	INC_DIRTY_COUNT 	;LB.				  ;AN000;
 15580                                  	
 15581 000036B6 26804D0540              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 15582                                  ;yesdirty3:
 15583 000036BB A0[1105]                	MOV	AL,[THISDRV]
 15584                                  ;;;; 10/1/86 F.C update fastopen cache
 15585 000036BE 52                      	PUSH	DX
 15586 000036BF 57                      	PUSH	DI
 15587 000036C0 B400                    	MOV	AH,0		  ; dir entry update
 15588 000036C2 88C2                    	MOV	DL,AL		  ; drive number A=0,B=1,,
 15589 000036C4 89DF                    	MOV	DI,BX		  ; ES:DI -> dir entry
 15590 000036C6 E846FD                  	call	FastOpen_Update
 15591 000036C9 5F                      	POP	DI
 15592 000036CA 5A                      	POP	DX
 15593                                  ;;;; 9/11/86 F.C update fastopen cache
 15594 000036CB E85F28                  	call	FLUSHBUF
 15595 000036CE 7303                    	JNC	short OK_BYE
 15596 000036D0 B80200                  	MOV	AX,error_file_not_found
 15597                                  OK_BYE:
 15598 000036D3 E89EE9                  	call	LcritDisk
 15599 000036D6 C3                      	retn
 15600                                  
 15601                                  	; MSDOS 6.0
 15602                                  ;GET_FAST_PATH:
 15603                                  ;hkn; use SS override for FastOpenFlg
 15604                                  	;OR	byte [FastOpenFlg],FastOpen_Set
 15605                                  	;				;FO. trigger fastopen	;AN000;
 15606                                  	;call	GETPATH
 15607                                  	;PUSHF			 	;FO.			;AN000;
 15608                                  	;AND	byte [FastOpenFlg],Fast_yes 
 15609                                  	;				;FO. clear all fastopen flags ;AN000;
 15610                                  	;POPF				;FO.			;AN000;
 15611                                  	;retn
 15612                                  
 15613                                  ;============================================================================
 15614                                  ; DUP.ASM, MSDOS 6.0, 1991
 15615                                  ;============================================================================
 15616                                  ; 08/08/2018 - Retro DOS v3.0
 15617                                  
 15618                                  ;**	Low level DUP routine for use by EXEC when creating a new process. Exports
 15619                                  ;	  the DUP to the server machine and increments the SFT ref count
 15620                                  ;
 15621                                  ;	DOS_DUP
 15622                                  ;
 15623                                  ;	Modification history:
 15624                                  ;
 15625                                  ;	  Created: ARR 30 March 1983
 15626                                  
 15627                                  ;BREAK <DOS_DUP -- DUP SFT across network>
 15628                                  ;---------------------------------------------------------------------------
 15629                                  ; Procedure Name : DOS_DUP
 15630                                  ;
 15631                                  ; Inputs:
 15632                                  ;	[THISSFT] set to the SFT for the file being DUPed
 15633                                  ;		(a non net SFT is OK, in this case the ref
 15634                                  ;		 count is simply incremented)
 15635                                  ; Function:
 15636                                  ;	Signal to the devices that a logical open is occurring
 15637                                  ; Returns:
 15638                                  ;	ES:DI point to SFT
 15639                                  ;    Carry clear
 15640                                  ;	SFT ref_count is incremented
 15641                                  ; Registers modified: None.
 15642                                  ; NOTE:
 15643                                  ;	This routine is called from $CREATE_PROCESS_DATA_BLOCK at DOSINIT
 15644                                  ;	time with SS NOT DOSGROUP. There will be no Network handles at
 15645                                  ;	that time.
 15646                                  ;---------------------------------------------------------------------------
 15647                                  
 15648                                  DOS_DUP:
 15649 000036D7 2EC43E[3605]            	LES	DI,[CS:THISSFT]
 15650                                  
 15651                                  	;Entry	Dos_Dup_Direct
 15652                                  DOS_Dup_Direct:
 15653 000036DC E804E9                  	call	IsSFTNet
 15654 000036DF 7503                    	JNZ	short DO_INC
 15655 000036E1 E89117                  	call	DEV_OPEN_SFT
 15656                                  DO_INC:
 15657                                  
 15658                                  	;INC	word [ES:DI+SF_ENTRY.sf_ref_count]
 15659 000036E4 26FF05                  	inc	word [ES:DI]		; Clears carry (if this ever wraps
 15660                                  					;   we're in big trouble anyway)
 15661 000036E7 C3                      	retn
 15662                                  
 15663                                  ;============================================================================
 15664                                  ; CREATE.ASM, MSDOS 6.0, 1991
 15665                                  ;============================================================================
 15666                                  ; 08/08/2018 - Retro DOS v3.0
 15667                                  
 15668                                  ;TITLE	DOS_CREATE/DOS_CREATE_NEW - Internal CREATE calls for MS-DOS
 15669                                  ;NAME	DOS_CREATE
 15670                                  
 15671                                  ;**	Internal Create and Create new to create a local or NET file and SFT.
 15672                                  ;
 15673                                  ;	DOS_CREATE
 15674                                  ;	DOS_CREATE_NEW
 15675                                  ;	SET_MKND_ERR
 15676                                  ;	SET_Media_ID
 15677                                  ;	SET_EXT_Mode
 15678                                  ;
 15679                                  ;	Revision history:
 15680                                  ;
 15681                                  ;	    A000 version 4.00	  Jan. 1988
 15682                                  ;	    A001  D490 -- Change IOCTL subfunctios from 63h,43h to 66h, 46h
 15683                                  
 15684                                  ;Installed = TRUE
 15685                                  
 15686                                  ;	i_need	THISSFT,DWORD
 15687                                  ;	i_need	THISCDS,DWORD
 15688                                  ;	I_need	EXTERR,WORD
 15689                                  ;	I_Need	ExtErr_locus,BYTE
 15690                                  ;	I_need	JShare,DWORD
 15691                                  ;	I_need	VOLCHNG_FLAG,BYTE
 15692                                  ;	I_need	SATTRIB,BYTE
 15693                                  ;	I_need	CALLVIDM,DWORD
 15694                                  ;	I_need	EXTOPEN_ON,BYTE 		  ;AN000; extended open
 15695                                  ;	I_need	NAME1,BYTE			  ;AN000;
 15696                                  ;	I_need	NO_NAME_ID,BYTE 		  ;AN000;
 15697                                  ;	I_need	Packet_Temp,WORD		  ;AN000;
 15698                                  ;	I_need	DOS34_FLAG,WORD 		  ;AN000;
 15699                                  ;	I_need	SAVE_BX,WORD			  ;AN000;
 15700                                  
 15701                                  ;***	DOS_CREATE - Create a File
 15702                                  ;----------------------------------------------------------------------------
 15703                                  ;	DOS_Create is called to create the specified file, truncating
 15704                                  ;	the old one if it exists.
 15705                                  ;
 15706                                  ;
 15707                                  ;	ENTRY	AX is Attribute to create
 15708                                  ;		(ds) = DOSDATA
 15709                                  ;		[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 15710                                  ;			terminated)
 15711                                  ;		[CURR_DIR_END] Points to end of Current dir part of string
 15712                                  ;			( = -1 if current dir not involved, else
 15713                                  ;			 Points to first char after last "/" of current dir part)
 15714                                  ;		[THISCDS] Points to CDS being used
 15715                                  ;			(Low word = -1 if NUL CDS (Net direct request))
 15716                                  ;		[THISSFT] Points to SFT to fill in if file created
 15717                                  ;			(sf_mode field set so that FCB may be detected)
 15718                                  ;		[SATTRIB] Is attribute of search, determines what files can be found
 15719                                  ;
 15720                                  ;	EXIT	sf_ref_count is NOT altered
 15721                                  ;		CARRY CLEAR
 15722                                  ;		    THISSFT filled in.
 15723                                  ;			sf_mode = unchanged for FCB, sharing_compat + open_for_both
 15724                                  ;		CARRY SET
 15725                                  ;		    AX is error code
 15726                                  ;			error_path_not_found
 15727                                  ;				Bad path (not in curr dir part if present)
 15728                                  ;			error_bad_curr_dir
 15729                                  ;				Bad path in current directory part of path
 15730                                  ;			error_access_denied
 15731                                  ;				Attempt to re-create read only file , or
 15732                                  ;				create a second volume id or create a dir
 15733                                  ;			error_sharing_violation
 15734                                  ;				The sharing mode was correct but not allowed
 15735                                  ;				generates an INT 24
 15736                                  ;	USES	all but DS
 15737                                  ;----------------------------------------------------------------------------
 15738                                  
 15739                                  DOS_CREATE:
 15740                                  
 15741                                  ;hkn; dispatched to from file.asm and fcbio.asm. DS set up to DOSDATA at 
 15742                                  ;hkn; this point.
 15743                                  
 15744 000036E8 30E4                    	XOR	AH,AH		; Truncate is OK
 15745                                  
 15746                                  ;	Enter here from Dos_Create_New
 15747                                  ;
 15748                                  ;	(ah) = 0 iff truncate OK
 15749                                  
 15750                                  Create_inter:
 15751 000036EA A8C0                    	TEST	AL,~(attr_all+attr_ignore+attr_volume_id) ; 80h
 15752                                  				; Mask out any meaningless bits
 15753 000036EC 750C                    	JNZ	short AttErr
 15754 000036EE A808                    	TEST	AL,attr_volume_id
 15755 000036F0 7402                    	JZ	short NoReset
 15756                                  	;
 15757                                  	; MSDOS 6.0
 15758                                  	;OR	[DOS34_FLAG],DBCS_VOLID      ;AN000;FOR dbcs volid
 15759                                  	;
 15760 000036F2 B008                    	MOV	AL,attr_volume_id
 15761                                  NoReset:
 15762 000036F4 0C20                    	OR	AL,attr_archive ; File changed
 15763 000036F6 A850                    	TEST	AL,attr_directory+attr_device
 15764 000036F8 740A                    	JZ	short ATT_OK
 15765                                  AttErr:
 15766 000036FA B80500                  	MOV	AX,5		; Attribute problem
 15767 000036FD C606[D102]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk
 15768 00003702 EB3D                    	JMP	SHORT SET_MKND_ERR ; Gotta use MKDIR to make dirs, NEVER allow
 15769                                  				   ;	attr_device to be set.
 15770                                  ATT_OK:
 15771 00003704 C43E[3605]              	LES	DI,[THISSFT]
 15772 00003708 06                      	PUSH	ES
 15773 00003709 C436[3A05]              	LES	SI,[THISCDS]
 15774 0000370D 83FEFF                  	CMP	SI,-1
 15775 00003710 7509                    	JNE	short TEST_RE_NET
 15776                                  
 15777                                  ;	No CDS, it must be redirected.
 15778                                  
 15779 00003712 07                      	POP	ES
 15780                                  
 15781                                  	; MSDOS 6.0
 15782                                  ;Extended open hooks
 15783                                  	;TEST	byte [EXTOPEN_ON],ext_open_on ;AN000;EO. from extended open
 15784                                  	;JZ	short NOEXTOP 		    ;AN000;EO. no, do normal
 15785                                  ;IFS_extopen:				    ;AN000;EO.
 15786                                  	;PUSH	AX			    ;AN000;EO. pass create attr
 15787                                  	;;MOV	AX,(MultNET SHL 8) OR 46    ;AN000;EO. issue extended open verb
 15788                                  	;mov	ax,112Eh
 15789                                  	;INT	2FH			    ;AN000;EO.
 15790                                  	;POP	BX			    ;AN000;EO. trash bx
 15791                                  	;MOV	byte [EXTOPEN_ON],0	    ;AN000;EO.
 15792                                  	;retn				    ;AN000;EO.
 15793                                  ;NOEXTOP:				    ;AN000;
 15794                                  ;Extended open hooks
 15795                                  
 15796                                  ;IF NOT Installed
 15797                                  ;	transfer NET_SEQ_CREATE
 15798                                  ;ELSE
 15799 00003713 50                      	PUSH	AX
 15800                                  
 15801                                  	;MOV	AX,(MultNET SHL 8) OR 24
 15802                                  	;INT	2FH
 15803                                  
 15804 00003714 B81811                  	mov     ax,1118h
 15805 00003717 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - CREATE/TRUNCATE FILE
 15806                                  			; ES:DI -> uninitialized SFT, SS = DOS CS
 15807                                  			; SDA first filename pointer -> fully-qualified name of file
 15808                                  			; STACK: WORD file creation mode???
 15809                                  
 15810 00003719 5B                      	POP	BX			; BX is trashed anyway
 15811 0000371A C3                      	retn
 15812                                  ;ENDIF
 15813                                  
 15814                                  ;	We have a CDS. See if it's network
 15815                                  
 15816                                  TEST_RE_NET:
 15817 0000371B 26F744430080            	TEST	word [ES:SI+curdir.flags],curdir_isnet
 15818 00003721 07                      	POP	ES
 15819 00003722 7408                    	JZ	short LOCAL_CREATE
 15820                                  
 15821                                  	; MSDOS 6.0
 15822                                  	;CALL	Set_EXT_mode		    ;AN000;EO.
 15823                                  	;JC	SHORT dochk		    ;AN000;EO.
 15824                                  	;OR	word [ES:DI+SF_ENTRY.sf_mode],SHARING_COMPAT+open_for_both ;IFS.
 15825                                  
 15826                                  ;Extended open hooks
 15827                                  ;dochk:
 15828                                  	;TEST	byte [EXTOPEN_ON],ext_open_on ;AN000;EO. from extended open
 15829                                  	;JNZ	short IFS_extopen	    ;AN000;EO. yes, issue extended open
 15830                                  ;Extended open hooks
 15831                                  
 15832                                  ;IF NOT Installed
 15833                                  ;	transfer NET_CREATE
 15834                                  ;ELSE
 15835 00003724 50                      	PUSH	AX
 15836                                  	
 15837                                  	;MOV	AX,(MultNET SHL 8) OR 23
 15838                                  	;INT	2FH
 15839                                  	
 15840 00003725 B81711                  	mov     ax, 1117h
 15841 00003728 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - CREATE/TRUNCATE REMOTE FILE
 15842                                  			; ES:DI -> uninitialized SFT, SS = DOS CS
 15843                                  			; SDA first filename pointer -> fully-qualified name of file to open
 15844                                  			; SDA CDS pointer -> current directory
 15845                                  			; Return: CF set on error
 15846                                  
 15847 0000372A 5B                      	POP	BX			; BX is trashed anyway
 15848                                  ;nomore:
 15849 0000372B C3                      	retn
 15850                                  ;ENDIF
 15851                                  
 15852                                  
 15853                                  ;**	It's a local create.  We have a local CDS for it.
 15854                                  
 15855                                  LOCAL_CREATE:
 15856                                  	; MSDOS 6.0
 15857                                  	;CALL	Set_EXT_mode	;AN000;EO. set mode if from extended open
 15858                                  	;JC	short setdone	;AN000;EO.
 15859                                  	
 15860                                  	; MSDOS 3.3 (& MSDOS 6.0)
 15861 0000372C 26834D0202              	OR	word [ES:DI+SF_ENTRY.sf_mode],SHARING_COMPAT+open_for_both
 15862                                  ;setdone:
 15863 00003731 E838E9                  	call	EcritDisk
 15864 00003734 E8F518                  	call	MakeNode
 15865 00003737 730E                    	JNC	short Create_ok
 15866 00003739 C606[070A]FF            	mov	byte [VOLCHNG_FLAG],-1	; indicate no change in volume label
 15867 0000373E E833E9                  	call	LcritDisk
 15868                                  
 15869                                  	;entry	SET_MKND_ERR
 15870                                  SET_MKND_ERR:
 15871                                  
 15872                                  ;	Looks up MakeNode errors and converts them. AL is MakeNode
 15873                                  ;	error, SI is GETPATH bad spot return if path_not_found error.
 15874                                  
 15875                                  ;hkn; CRTERRTAB is in TABLE seg (DOSCODE)
 15876 00003741 BB[FD12]                	MOV     BX,CRTERRTAB
 15877 00003744 D7                      	XLAT
 15878                                  	;XLAT	byte [CS:BX]
 15879                                  CreatBadRet:
 15880 00003745 F9                      	STC
 15881 00003746 C3                      	retn
 15882                                  
 15883                                  ; We have just created a new file. This results in the truncation of old
 15884                                  ; files. We must inform the sharer to slash all the open SFT's for this
 15885                                  ; file to the current size.
 15886                                  
 15887                                  ; If we created a volume id on the diskette, set the VOLCHNG_FLAG to logical
 15888                                  ; drive number to force a Build BPB after Media Check.
 15889                                  
 15890                                  ;;; FASTOPEN 8/29/86
 15891                                  Create_ok:
 15892 00003747 E8B1FC                  	call	FastOpen_Delete
 15893                                  ;;; FASTOPEN 8/29/86
 15894 0000374A A0[0805]                	mov	al,[SATTRIB]
 15895 0000374D A808                    	test	al,attr_volume_id
 15896 0000374F 7417                    	jz	short NoVolLabel
 15897 00003751 C43E[3A05]              	LES	DI,[THISCDS]
 15898                                  	;mov	ah,[ES:DI+curdir.text]	; get drive letter
 15899 00003755 268A25                  	mov	ah,[ES:DI] ; 09/08/2018
 15900 00003758 80EC41                  	sub	ah,'A'                  ; convert to drive letter
 15901 0000375B 8826[070A]              	mov	[VOLCHNG_FLAG],ah	;Set flag to indicate volid change
 15902                                  	
 15903                                  	; MSDOS 6.0
 15904                                  	;MOV	BH,1			;AN000;>32mb set volume id to boot record
 15905                                  	;CALL	Set_Media_ID		;AN000;>32mb
 15906                                  	
 15907 0000375F E80AE9                  	call	EcritDisk
 15908 00003762 E85624                  	call	FATREAD_CDS		; force a media check
 15909 00003765 E80CE9                  	call	LcritDisk
 15910                                  
 15911                                  NoVolLabel:
 15912 00003768 B80200                  	MOV	ax,2
 15913 0000376B C43E[3605]              	LES	DI,[THISSFT]
 15914                                  ;if installed
 15915                                  	;call	JShare + 14 * 4
 15916 0000376F FF1E[9400]              	call	far [JShare+(14*4)] ; 14 = ShSU
 15917                                  ;else
 15918                                  ;	Call	ShSU
 15919                                  ;endif
 15920 00003773 E8FEE8                  	call	LcritDisk
 15921 00003776 E9D800                  	jmp	SET_SFT_MODE
 15922                                  
 15923                                  ;---------------------------------------------------------------------------
 15924                                  ; Procedure Name : Dos_Create_New
 15925                                  ;
 15926                                  ; Inputs:
 15927                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 15928                                  ;		terminated)
 15929                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 15930                                  ;		( = -1 if current dir not involved, else
 15931                                  ;		 Points to first char after last "/" of current dir part)
 15932                                  ;	[THISCDS] Points to CDS being used
 15933                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 15934                                  ;	[THISSFT] Points to SFT to fill in if file created
 15935                                  ;		(sf_mode field set so that FCB may be detected)
 15936                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 15937                                  ;	AX is Attribute to create
 15938                                  ; Function:
 15939                                  ;	Try to create the specified file truncating an old one that exists
 15940                                  ; Outputs:
 15941                                  ;	sf_ref_count is NOT altered
 15942                                  ;	CARRY CLEAR
 15943                                  ;	    THISSFT filled in.
 15944                                  ;		sf_mode = sharing_compat + open_for_both for Non-FCB SFT
 15945                                  ;	CARRY SET
 15946                                  ;	    AX is error code
 15947                                  ;		error_path_not_found
 15948                                  ;			Bad path (not in curr dir part if present)
 15949                                  ;		error_bad_curr_dir
 15950                                  ;			Bad path in current directory part of path
 15951                                  ;		error_access_denied
 15952                                  ;			Create a second volume id or create a dir
 15953                                  ;		error_file_exists
 15954                                  ;			Already a file by this name
 15955                                  ; DS preserved, others destroyed
 15956                                  ;---------------------------------------------------------------------------
 15957                                  
 15958                                  DOS_Create_New:
 15959 00003779 B401                    	MOV	AH,1		; Truncate is NOT OK
 15960 0000377B E96CFF                  	JMP	Create_inter
 15961                                  
 15962                                  ; MSDOS 6.0
 15963                                  ;---------------------------------------------------------------------------
 15964                                  ; Procedure Name : Set_Media_ID
 15965                                  ;
 15966                                  ; Inputs:
 15967                                  ;	NAME1= Volume ID
 15968                                  ;	BH= 0, delete volume id
 15969                                  ;	    1, set new volume id
 15970                                  ;	DS= DOSGROUP
 15971                                  ; Function:
 15972                                  ;	Set Volume ID to DOS 4.00 Boot record.
 15973                                  ; Outputs:
 15974                                  ;	CARRY CLEAR
 15975                                  ;	    volume id set
 15976                                  ;	CARRY SET
 15977                                  ;	    AX is error code
 15978                                  ;---------------------------------------------------------------------------
 15979                                  ;
 15980                                  ;procedure   Set_Media_ID,NEAR
 15981                                  ;	DOSAssume   <DS>,"SetMedID"
 15982                                  ;
 15983                                  ;	PUSH	AX		;AN000;;>32mb
 15984                                  ;	PUSH	ES		;AN000;;>32mb
 15985                                  ;	PUSH	DI		;AN000;;>32mb
 15986                                  ;
 15987                                  ;	INC	AH		;AN000;;>32mb  bl=drive #
 15988                                  ;	MOV	BL,AH		;AN000;;>32mb  bl=drive # (A=1,B=2,,,)
 15989                                  ;	MOV	AL,0DH		;AN000;;>32mb  generic IOCTL
 15990                                  ;	MOV	CX,0866H	;AN001;;>32mb  get media id
 15991                                  ;
 15992                                  ;hkn; PACKET_TEMP is in DOSDATA
 15993                                  ;	MOV	DX,OFFSET DOSDATA:PACKET_TEMP	;AN000;>32mb
 15994                                  ;
 15995                                  ;	PUSH	BX		;AN000;;>32mb
 15996                                  ;	PUSH	DX		;AN000;;>32mb
 15997                                  ;	XOR	BH,BH		;AN000;;>32mb
 15998                                  ;
 15999                                  ;	invoke	$IOCTL		;AN000;;>32mb
 16000                                  ;	POP	DX		;AN000;;>32mb
 16001                                  ;	POP	BX		;AN000;;>32mb
 16002                                  ;	JC	geterr		;AN000;;>32mb
 16003                                  ;
 16004                                  ;	OR	BH,BH		;AN000;;>32mb delete volume id
 16005                                  ;	JZ	NoName		;AN000;>32mb yes
 16006                                  ;
 16007                                  ;hkn; NAME1 is in DOSDATA
 16008                                  ;	MOV	SI,OFFSET DOSDATA:NAME1   ;AN000;>32mb
 16009                                  ;
 16010                                  ;	JMP	SHORT doset	;AN000;>32mb yes
 16011                                  ;Noname: 			;AN000;
 16012                                  ;
 16013                                  ;hkn; NO_NAME_ID is in DOSDATA
 16014                                  ;	MOV	SI,OFFSET DOSDATA:NO_NAME_ID  ;AN000;>32mb
 16015                                  ;
 16016                                  ;doset:					       ;AN000;
 16017                                  ;	MOV	DI,DX		;AN000;;>32mb
 16018                                  ;	ADD	DI,MEDIA_LABEL	;AN000;;>32mb
 16019                                  ;
 16020                                  ;hkn; ES & DS must point to SS
 16021                                  ;hkn;	PUSH	CS		;AN000;;>32mb  move new volume id to packet
 16022                                  ;	PUSH	SS		;AN000;;>32mb  move new volume id to packet
 16023                                  ;
 16024                                  ;	POP	DS		;AN000;;>32mb
 16025                                  ;
 16026                                  ;hkn;	PUSH	CS		;AN000;;>32mb
 16027                                  ;	PUSH	SS		;AN000;;>32mb
 16028                                  ;
 16029                                  ;	POP	ES		;AN000;;>32mb
 16030                                  ;	MOV	CX,11		;AN000;;>32mb
 16031                                  ;	REP	MOVSB		;AN000;;>32mb
 16032                                  ;	MOV	CX,0846H	;AN001;;>32mb
 16033                                  ;	MOV	AL,0DH		;AN000;;>32mb
 16034                                  ;	XOR	BH,BH		;AN000;;>32mb
 16035                                  ;	invoke	$IOCTL		;AN000;;>32mb  set volume id
 16036                                  ;geterr: 			;AN000;
 16037                                  ;
 16038                                  ;hkn;	PUSH	CS		;AN000;>32mb
 16039                                  ;	PUSH	SS		;AN000;>32mb
 16040                                  ;
 16041                                  ;	POP	DS		;AN000;>32mb   ds= dosgroup
 16042                                  ;
 16043                                  ;	POP	DI		;AN000;;>32mb
 16044                                  ;	POP	ES		;AN000;;>32mb
 16045                                  ;	POP	AX		;AN000;;>32mb
 16046                                  ;	return			;AN000;>32mb
 16047                                  ;
 16048                                  ;EndProc Set_Media_ID		;AN000;
 16049                                  
 16050                                  ; MSDOS 6.0
 16051                                  ;---------------------------------------------------------------------------
 16052                                  ; Procedure Name : Set_EXT_mode
 16053                                  ;
 16054                                  ; Inputs:
 16055                                  ;	[EXTOPEN_ON]= flag for extended open
 16056                                  ;	SAVE_BX= mode specified in Extended Open
 16057                                  ; Function:
 16058                                  ;	Set mode in ThisSFT
 16059                                  ; Outputs:
 16060                                  ;	carry set,mode is set if from Extended Open
 16061                                  ;	carry clear, mode not set yet
 16062                                  ;---------------------------------------------------------------------------
 16063                                  ;
 16064                                  ;procedure   Set_EXT_mode,NEAR
 16065                                  ;
 16066                                  ;hkn; SS override
 16067                                  ;	TEST	[EXTOPEN_ON],ext_open_on    ;AN000;EO. from extended open
 16068                                  ;	JZ	NOTEX			    ;AN000;EO. no, do normal
 16069                                  ;	PUSH	AX			    ;AN000;EO.
 16070                                  ;
 16071                                  ;hkn; SS override
 16072                                  ;	MOV	AX,[SAVE_BX]		    ;AN000;EO.
 16073                                  ;	OR	ES:[DI.sf_mode],AX	    ;AN000;EO.
 16074                                  ;	POP	AX			    ;AN000;EO.
 16075                                  ;	STC				    ;AN000;EO.
 16076                                  ;NOTEX:					    ;AN000;
 16077                                  ;	return				    ;AN000;EO.
 16078                                  ;
 16079                                  ;EndProc Set_EXT_mode			    ;AN000;
 16080                                  
 16081                                  ;============================================================================
 16082                                  ; OPEN.ASM, MSDOS 6.0, 1991
 16083                                  ;============================================================================
 16084                                  ; 08/08/2018 - Retro DOS v3.0
 16085                                  
 16086                                  ;	TITLE	DOS_OPEN - Internal OPEN call for MS-DOS
 16087                                  ;	NAME	DOS_OPEN
 16088                                  
 16089                                  ;**	OPEN.ASM - File Open
 16090                                  ;----------------------------------------------------------------------------
 16091                                  ;	Low level routines for openning a file from a file spec.
 16092                                  ;	Also misc routines for sharing errors
 16093                                  ;
 16094                                  ;	DOS_Open
 16095                                  ;	Check_Access_AX
 16096                                  ;	SHARE_ERROR
 16097                                  ;	SET_SFT_MODE
 16098                                  ;	Code_Page_Mismatched_Error		   ; DOS 4.00
 16099                                  ;
 16100                                  ;	Revision history:
 16101                                  ;
 16102                                  ;	    Created: ARR 30 March 1983
 16103                                  ;	    A000	version 4.00   Jan. 1988
 16104                                  ;
 16105                                  ;	M034 - The value in save_bx must be pushed on to the stack for
 16106                                  ; 	       remote extended opens and not save_cx.
 16107                                  ;
 16108                                  ;	M035 - if open made from exec then we must set the appropriate bits
 16109                                  ;	       on the stack before calling off to the redir.
 16110                                  ;	M042 - Bit 11 of DOS34_FLAG set indicates that the redir knows how 
 16111                                  ;	       to handle open from exec. In this case set the appropriate bit
 16112                                  ;	       else do not.
 16113                                  ;----------------------------------------------------------------------------	
 16114                                  
 16115                                  ;Installed = TRUE
 16116                                  
 16117                                  ;	i_need	NoSetDir,BYTE
 16118                                  ;	i_need	THISSFT,DWORD
 16119                                  ;	i_need	THISCDS,DWORD
 16120                                  ;	i_need	CURBUF,DWORD
 16121                                  ;	i_need	CurrentPDB,WORD
 16122                                  ;	i_need	CURR_DIR_END,WORD
 16123                                  ;	I_need	RetryCount,WORD
 16124                                  ;	I_need	Open_Access,BYTE
 16125                                  ;	I_need	fSharing,BYTE
 16126                                  ;	i_need	JShare,DWORD
 16127                                  ;	I_need	FastOpenFlg,byte
 16128                                  ;	I_need	EXTOPEN_ON,BYTE 		  ;AN000;; DOS 4.00
 16129                                  ;	I_need	ALLOWED,BYTE			  ;AN000;; DOS 4.00
 16130                                  ;	I_need	EXTERR,WORD			  ;AN000;; DOS 4.00
 16131                                  ;	I_need	EXTERR_LOCUS,BYTE		  ;AN000;; DOS 4.00
 16132                                  ;	I_need	EXTERR_ACTION,BYTE		  ;AN000;; DOS 4.00
 16133                                  ;	I_need	EXTERR_CLASS,BYTE		  ;AN000;; DOS 4.00
 16134                                  ;	I_need	CPSWFLAG,BYTE			  ;AN000;; DOS 4.00
 16135                                  ;	I_need	EXITHOLD,DWORD			  ;AN000;; DOS 4.00
 16136                                  ;	I_need	THISDPB,DWORD			  ;AN000;; DOS 4.00
 16137                                  ;	I_need	SAVE_CX,WORD			  ;AN000;; DOS 4.00
 16138                                  ;	I_need	SAVE_BX,WORD			  ;M034
 16139                                  ;
 16140                                  ;	I_need	DOS_FLAG,BYTE
 16141                                  ;	I_need	DOS34_FLAG,WORD			  ;M042
 16142                                  
 16143                                  ;Break	<DOS_Open - internal file access>
 16144                                  ;---------------------------------------------------------------------------
 16145                                  ; Procedure Name : DOS_Open
 16146                                  ;
 16147                                  ; Inputs:
 16148                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 16149                                  ;		terminated)
 16150                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 16151                                  ;		( = -1 if current dir not involved, else
 16152                                  ;		 Points to first char after last "/" of current dir part)
 16153                                  ;	[THISCDS] Points to CDS being used
 16154                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 16155                                  ;	[THISSFT] Points to SFT to fill in if file found
 16156                                  ;		(sf_mode field set so that FCB may be detected)
 16157                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 16158                                  ;	AX is Access and Sharing mode
 16159                                  ;	  High NIBBLE of AL (Sharing Mode)
 16160                                  ;		sharing_compat	   file is opened in compatibility mode
 16161                                  ;		sharing_deny_none  file is opened Multi reader, Multi writer
 16162                                  ;		sharing_deny_read  file is opened Only reader, Multi writer
 16163                                  ;		sharing_deny_write file is opened Multi reader, Only writer
 16164                                  ;		sharing_deny_both  file is opened Only reader, Only writer
 16165                                  ;	  Low NIBBLE of AL (Access Mode)
 16166                                  ;		open_for_read	file is opened for reading
 16167                                  ;		open_for_write	file is opened for writing
 16168                                  ;		open_for_both	file is opened for both reading and writing.
 16169                                  ;
 16170                                  ;	  For FCB SFTs AL should = sharing_compat + open_for_both
 16171                                  ;		(not checked)
 16172                                  ; Function:
 16173                                  ;	Try to open the specified file
 16174                                  ; Outputs:
 16175                                  ;	sf_ref_count is NOT altered
 16176                                  ;	CARRY CLEAR
 16177                                  ;	    THISSFT filled in.
 16178                                  ;	CARRY SET
 16179                                  ;	    AX is error code
 16180                                  ;		error_file_not_found
 16181                                  ;			Last element of path not found
 16182                                  ;		error_path_not_found
 16183                                  ;			Bad path (not in curr dir part if present)
 16184                                  ;		error_bad_curr_dir
 16185                                  ;			Bad path in current directory part of path
 16186                                  ;		error_invalid_access
 16187                                  ;			Bad sharing mode or bad access mode or bad combination
 16188                                  ;		error_access_denied
 16189                                  ;			Attempt to open read only file for writting, or
 16190                                  ;			open a directory
 16191                                  ;		error_sharing_violation
 16192                                  ;			The sharing mode was correct but not allowed
 16193                                  ;			generates an INT 24 on compatibility mode SFTs
 16194                                  ; DS preserved, others destroyed
 16195                                  ;----------------------------------------------------------------------------
 16196                                  
 16197                                  DOS_OPEN:
 16198                                  	; DS has been set up to DOSDATA in file.asm and fcbio2.asm. 
 16199                                  
 16200 0000377E C606[F802]00            	MOV	byte [NoSetDir],0
 16201 00003783 E80001                  	CALL	Check_Access_AX
 16202 00003786 721C                    	JC	short do_ret_label		    ; retc
 16203                                  
 16204 00003788 C43E[3605]              	LES	DI,[THISSFT]
 16205 0000378C 30E4                    	XOR	AH,AH
 16206                                  
 16207                                  	; sleaze! move only access/sharing mode in. Leave sf_isFCB unchanged
 16208                                  
 16209 0000378E 26884502                	MOV	[ES:DI+SF_ENTRY.sf_mode],AL ; For moment do this on FCBs too
 16210 00003792 06                      	PUSH	ES
 16211 00003793 C436[3A05]              	LES	SI,[THISCDS]
 16212                                  	; 18/08/2018
 16213 00003797 83FEFF                  	CMP	SI,-1
 16214 0000379A 7509                    	JNZ	short TEST_RE_NET1
 16215 0000379C 07                      	POP	ES
 16216                                  
 16217                                  	; MSDOS 6.0
 16218                                  ;Extended open hooks
 16219                                  	;TEST	byte [EXTOPEN_ON],ext_open_on	;FT. from extnded open		;AN000;
 16220                                  	;JZ	short NOEXTOP 		    ;FT. no, do normal			;AN000;
 16221                                  IFS_extopen:									;AN000;
 16222                                  	;MOV	AL,[SAVE_BX]		    ; M034 - save_bx has original bx  
 16223                                  	;				    ; with which call was made. This
 16224                                  	;				    ; has the open access bits. 
 16225                                  	;;;MOV	AL,[SAVE_CX]		    ; M034 - FT. al= create attribute
 16226                                  	;
 16227                                  	;PUSH	AX			    ;FT. pass create attr to IFS	;AN000;
 16228                                  	;;MOV	AX,(MultNET SHL 8) OR 46    ;FT. issue extended open verb	;AN000;
 16229                                  	;mov	ax,(MultNET*256)+46 
 16230                                  	;INT	2FH			    ;FT.				;AN000;
 16231                                  	;POP	BX			    ;FT. trash bx			;AN000;
 16232                                  	;MOV	byte [EXTOPEN_ON],0	    ;FT.				;AN000;
 16233                                  
 16234                                  ;do_ret_label:
 16235                                  	;retn				    ;FT.				;AN000;
 16236                                  ;NOEXTOP:
 16237                                  ;Extended open hooks
 16238                                  	;
 16239                                  ;IF NOT Installed
 16240                                  	;transfer NET_SEQ_OPEN
 16241                                  ;ELSE
 16242                                  	;
 16243                                  do_net_int2f:
 16244                                  	;
 16245                                  	;test	byte [DOS_FLAG],EXECOPEN ; Q: was this open call made from exec
 16246                                  	;jz	short not_exec_open	; N: just do net open
 16247                                  	;				; Y: check to see if redir is aware
 16248                                  	;				;    of this 
 16249                                  	;
 16250                                  	;				; M042 - start
 16251                                  	;test	word [DOS34_FLAG],EXEC_AWARE_REDIR
 16252                                  	;				; Q: does this redir know how to 
 16253                                  	;				;    this
 16254                                  	;jz	short not_exec_open	; N: just do net open
 16255                                  	;				; Y: set bit 3 of access byte and 
 16256                                  	;				;    set sharing mode to DENY_WRITE
 16257                                  	;				; M042 - end
 16258                                  	;
 16259                                  	; NOTE: This specific mode has not been set for the code assembled
 16260                                  	; under the "NOT Installed" conditional. Currently Installed is 
 16261                                  	; always one.
 16262                                  	;				; M035 - set the bits on the stack
 16263                                  	;mov	AL,SHARING_DENY_WRITE+EXEC_OPEN
 16264                                  	;
 16265                                  ;not_exec_open:
 16266                                  
 16267                                  	; MSDOS 3.3 (& MSDOS 6.0)
 16268 0000379D 50                      	PUSH	AX
 16269                                  
 16270                                  	;MOV	AX,(MultNET SHL 8) OR 22
 16271                                  	;INT	2FH
 16272                                  
 16273 0000379E B81611                  	mov     ax,1116h
 16274 000037A1 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - OPEN EXISTING REMOTE FILE
 16275                                  			; ES:DI -> uninitialized SFT, SS = DOS CS
 16276                                  			; SDA first filename pointer -> fully-qualified name of file to open
 16277                                  			; STACK: WORD file open mode
 16278                                  			; Return: CF set on error
 16279                                  
 16280 000037A3 5B                      	POP	BX			; clean stack
 16281                                  do_ret_label: ; 09/08/2018
 16282 000037A4 C3                      	retn
 16283                                  ;ENDIF
 16284                                  
 16285                                  TEST_RE_NET1:
 16286 000037A5 26F744430080            	TEST	word [ES:SI+curdir.flags],curdir_isnet
 16287                                  	; 18/08/2018
 16288 000037AB 07                      	POP	ES
 16289                                  	;JZ	short LOCAL_OPEN
 16290                                  
 16291 000037AC 75EF                    	jnz	short do_net_int2f ; (*)
 16292                                  
 16293                                  ;Extended open hooks
 16294                                  	; MSDOS 6.0
 16295                                  	;TEST	byte [EXTOPEN_ON],ext_open_on ;FT. from extended open	;AN000;
 16296                                  	;JNZ	short IFS_extopen	      ;FT. isuue extended open	;AN000;
 16297                                  ;Extended open hooks
 16298                                  
 16299                                  ;IF NOT Installed
 16300                                  ;	transfer NET_OPEN
 16301                                  ;ELSE
 16302                                  	;jmp	short do_net_int2f (*)
 16303                                  ;ENDIF
 16304                                  
 16305                                  LOCAL_OPEN:
 16306                                  	; MSDOS 3.3 (& MSDOS 6.0)
 16307 000037AE E8BBE8                  	call	EcritDisk
 16308                                  
 16309                                  ; DOS 3.3 FastOPen 6/16/86
 16310                                  
 16311 000037B1 800E[6E0F]05            	OR	byte [FastOpenFlg],FastOpen_Set+Special_Fill_Set ; only open can
 16312                                  
 16313 000037B6 E87C10                  	call	GETPATH
 16314                                  
 16315                                  ; DOS 3.3 FastOPen 6/16/86
 16316                                  
 16317 000037B9 731E                    	JNC	short Open_found
 16318 000037BB 7512                    	JNZ	short bad_path2
 16319 000037BD 08C9                    	OR	CL,CL
 16320 000037BF 740E                    	JZ	short bad_path2
 16321                                  
 16322                                  OpenFNF:
 16323 000037C1 B80200                  	MOV	AX,error_file_not_found
 16324                                  
 16325                                  OpenBadRet:
 16326                                  ;hkn; FastOpenFlg is in DOSDATA use SS override
 16327                                  	; 12/08/2018
 16328                                  	;mov	byte [cs:FastOpenFlg],0 ; IBMDOS.COM (MSDOS 3.3) offset 36CAh
 16329                                  	; MSDOS 6.0
 16330 000037C4 368026[6E0F]80          	AND	BYTE [SS:FastOpenFlg],Fast_yes    ;; DOS 3.3
 16331 000037CA F9                      	STC
 16332 000037CB E8A6E8                  	call	LcritDisk
 16333                                  	;JMP	Clear_FastOpen ; 10/08/2018
 16334 000037CE C3                      	retn 	; 08/09/2018
 16335                                  
 16336                                  bad_path2:
 16337 000037CF B80300                  	MOV	AX,error_path_not_found
 16338 000037D2 EBF0                    	JMP	short OpenBadRet
 16339                                  
 16340                                  Open_Bad_Access:
 16341 000037D4 B80500                  	MOV	AX,error_access_denied
 16342 000037D7 EBEB                    	JMP	short OpenBadRet
 16343                                  
 16344                                  Open_found:
 16345 000037D9 74F9                    	JZ	short Open_Bad_Access 	; test for directories
 16346 000037DB 08E4                    	OR	AH,AH
 16347 000037DD 783F                    	JS	short open_ok		; Devices don't have attributes
 16348 000037DF 8E06[7605]              	MOV	ES,[CURBUF+2]		; get buffer location
 16349 000037E3 268A470B                	MOV	AL,[ES:BX+dir_entry.dir_attr]
 16350 000037E7 A808                    	TEST	AL,attr_volume_id	; can't open volume ids
 16351 000037E9 75E9                    	JNZ	short Open_Bad_Access
 16352 000037EB A801                    	TEST	AL,attr_read_only	; check write on read only
 16353 000037ED 742F                    	JZ	short open_ok
 16354                                  ;
 16355                                  ; The file is marked READ-ONLY. We verify that the open mode allows access to
 16356                                  ; the read-only file. Unfortunately, with FCB's and net-FCB's we cannot
 16357                                  ; determine at the OPEN time if such access is allowed. Thus, we defer such
 16358                                  ; processing until the actual write operation:
 16359                                  ;
 16360                                  ; If FCB, then we change the mode to be read_only.
 16361                                  ; If net_FCB, then we change the mode to be read_only.
 16362                                  ; If not open for read then error.
 16363                                  ;
 16364 000037EF 1E                      	push	ds
 16365 000037F0 56                      	push	si
 16366 000037F1 C536[3605]              	LDS	SI,[THISSFT]
 16367 000037F5 8B4C02                  	MOV	CX,[SI+SF_ENTRY.sf_mode]
 16368 000037F8 F7C10080                	TEST	CX,sf_isFCB		; is it FCB?
 16369 000037FC 750A                    	JNZ	short ResetAccess	; yes, reset the access
 16370 000037FE 88CA                    	MOV	DL,CL
 16371 00003800 80E2F0                  	AND	DL,SHARING_MASK
 16372 00003803 80FA70                  	CMP	DL,SHARING_NET_FCB	; is it net FCB?
 16373 00003806 7508                    	JNZ	short NormalOpen	; no
 16374                                  ResetAccess:
 16375 00003808 83E1F0                  	AND	CX,~access_mask	;0FFF0h	; clear access
 16376                                  ;	OR	CX,open_for_read	; stick in open_for_read
 16377 0000380B 894C02                  	MOV	[SI+SF_ENTRY.sf_mode],CX
 16378 0000380E EB0C                    	JMP	SHORT FillSFT
 16379                                  ;
 16380                                  ; The SFT is normal.  See if the requested access is open_for_read
 16381                                  ;
 16382                                  NormalOpen:
 16383 00003810 80E10F                  	AND	CL,access_mask	;0Fh	; remove extras
 16384 00003813 80F900                  	CMP	CL,open_for_read	; is it open for read?
 16385 00003816 7404                    	JZ	short FillSFT
 16386 00003818 5E                      	pop	si
 16387 00003819 1F                      	pop	ds
 16388 0000381A EBB8                    	JMP	short Open_Bad_Access
 16389                                  ;
 16390                                  ; All done, restore registers and fill the SFT.
 16391                                  ;
 16392                                  FillSFT:
 16393 0000381C 5E                      	pop	si
 16394 0000381D 1F                      	pop	ds
 16395                                  open_ok:
 16396 0000381E E89F19                  	call	DOOPEN			; Fill in SFT
 16397                                  
 16398                                  ;hkn; FastOpenFlg is in DOSDATA. use SS override
 16399                                  	;12/08/2018
 16400                                  	;AND	BYTE [SS:FastOpenFlg],Fast_yes    ;; DOS 3.3
 16401 00003821 8026[6E0F]80            	and	byte [FastOpenFlg],Fast_yes	
 16402                                  
 16403                                  	; MSDOS 6.0
 16404                                  	;CALL	DO_SHARE_CHECK
 16405                                  	;JNC	short SHARE_OK
 16406                                  	;call	LcritDisk
 16407                                  	;JMP	short Clear_FastOpen	
 16408                                  
 16409                                  	; MSDOS 3.3
 16410                                  DO_SHARE_CHECK:
 16411 00003826 8B0E[1A00]              	MOV	CX,[RetryCount]		; Get # tries to do
 16412                                  OpenShareRetry:
 16413 0000382A 51                      	push	cx			; Save number left to do
 16414 0000382B E8FA3A                  	call	SHARE_CHECK		; Final Check
 16415 0000382E 59                      	pop	cx			; CX = # left
 16416 0000382F 7312                    	JNC	short SHARE_OK		; No problem with access
 16417 00003831 E855E7                  	call	Idle
 16418 00003834 E2F4                    	LOOP	OpenShareRetry		; One more retry used up
 16419                                  OpenShareFail:
 16420 00003836 C43E[3605]              	LES	DI,[THISSFT]
 16421 0000383A E82B00                  	call	SHARE_ERROR
 16422 0000383D 73E7                    	JNC	short DO_SHARE_CHECK	; User wants more retry
 16423                                  	
 16424                                  	;12/08/2018
 16425                                  	;mov	byte [ss:FastOpenFlg],0
 16426                                  	;08/09/2018
 16427                                  	;mov	byte [FastOpenFlg],0
 16428 0000383F E832E8                  	call	LcritDisk
 16429                                  	;JMP	short Clear_FastOpen
 16430 00003842 C3                      	retn
 16431                                  
 16432                                  SHARE_OK:
 16433                                  	; MSDOS 3.3 (& MSDOS 6.0)
 16434 00003843 B80300                  	MOV	AX,3
 16435 00003846 C43E[3605]              	LES	DI,[THISSFT]
 16436                                  ;if installed
 16437                                  	;call	JShare + 14 * 4
 16438 0000384A FF1E[9400]              	call	far [JShare+(14*4)]  ; 14 = ShSU
 16439                                  ;else
 16440                                  ;	Call	ShSU
 16441                                  ;endif
 16442 0000384E E823E8                  	call	LcritDisk
 16443                                  	
 16444                                  	;FallThru Set_SFT_Mode
 16445                                  
 16446                                  ;----------------------------------------------------------------------------
 16447                                  ; Procedure Name : SET_SFT_MODE
 16448                                  ;
 16449                                  ; Finish SFT initialization for new reference. Set the correct mode.
 16450                                  ;
 16451                                  ;   Inputs:
 16452                                  ;	ThisSFT points to SFT
 16453                                  ;
 16454                                  ;   Outputs:
 16455                                  ;	Carry clear
 16456                                  ;   Registers modified: AX.
 16457                                  ;---------------------------------------------------------------------------
 16458                                  
 16459                                  ;hkn; called from create. DS already set up to DOSDATA.
 16460                                  
 16461                                  SET_SFT_MODE:
 16462 00003851 C43E[3605]              	LES	DI,[THISSFT]
 16463 00003855 E81D16                  	call	DEV_OPEN_SFT
 16464 00003858 26F745020080            	TEST	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB ; Clears carry
 16465 0000385E 7407                    	JZ	short Clear_FastOpen	; sf_mode correct (retz)
 16466 00003860 A1[DE02]                	MOV	AX,[CurrentPDB]
 16467 00003863 26894531                	MOV	[ES:DI+SF_ENTRY.sf_PID],AX ; For FCB sf_PID=PDB
 16468                                  
 16469                                  Clear_FastOpen:
 16470 00003867 C3                      	retn			       ;;;;; DOS 3.3
 16471                                  
 16472                                  ;----------------------------------------------------------------------------
 16473                                  ; Procedure Name : SHARE_ERROR
 16474                                  ;
 16475                                  ; Called on sharing violations. ES:DI points to SFT. AX has error code
 16476                                  ; If SFT is FCB or compatibility mode gens INT 24 error.
 16477                                  ; Returns carry set AX=error_sharing_violation if user says ignore (can't
 16478                                  ; really ignore).  Carry clear
 16479                                  ; if user wants a retry. ES, DI, DS preserved
 16480                                  ;---------------------------------------------------------------------------
 16481                                  
 16482                                  SHARE_ERROR:
 16483 00003868 26F745020080            	TEST	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB
 16484 0000386E 750C                    	JNZ	short _HARD_ERR
 16485 00003870 268A4D02                	MOV	CL,[ES:DI+SF_ENTRY.sf_mode]
 16486 00003874 80E1F0                  	AND	CL,SHARING_MASK
 16487 00003877 80F900                  	CMP	CL,SHARING_COMPAT
 16488 0000387A 7505                    	JNE	short _NO_HARD_ERR
 16489                                  _HARD_ERR:
 16490 0000387C E8AF3A                  	call	SHARE_VIOLATION
 16491                                  	;retnc				; User wants retry
 16492 0000387F 73E6                    	jnc	short Clear_FastOpen
 16493                                  _NO_HARD_ERR:
 16494 00003881 B82000                  	MOV	AX,error_sharing_violation
 16495 00003884 F9                      	STC
 16496 00003885 C3                      	retn
 16497                                  
 16498                                  ; MSDOS 6.0
 16499                                  ;----------------------------------------------------------------------------
 16500                                  ; Procedure Name : DO_SHARE_CHECK
 16501                                  ;
 16502                                  ; Input: THISDPB, WFP_Start, THISSFT set
 16503                                  ; Functions: check file sharing mode is valid
 16504                                  ; Output: carry set, error
 16505                                  ;	  carry clear, share ok
 16506                                  ;----------------------------------------------------------------------------
 16507                                  ;
 16508                                  ;DO_SHARE_CHECK:
 16509                                  ;	call	EcritDisk		; enter critical section
 16510                                  ;OPN_RETRY:
 16511                                  ;	MOV	CX,[RetryCount]		; Get # tries to do
 16512                                  ;OpenShareRetry:
 16513                                  ;	push	cx			; Save number left to do
 16514                                  ;	call	SHARE_CHECK		; Final Check
 16515                                  ;	pop	cx			; CX = # left
 16516                                  ;	JNC	short Share_Ok2		; No problem with access
 16517                                  ;	call	Idle
 16518                                  ;	LOOP	OpenShareRetry		; One more retry used up
 16519                                  ;OpenShareFail:
 16520                                  ;	LES	DI,[THISSFT]
 16521                                  ;	call	SHARE_ERROR
 16522                                  ;	JNC	short OPN_RETRY		; User wants more retry
 16523                                  ;Share_Ok2:
 16524                                  ;	call	LcritDisk		; leave critical section
 16525                                  ;	retn
 16526                                  
 16527                                  ;-----------------------------------------------------------------------------
 16528                                  ; Procedure Name : Check_Access
 16529                                  ;
 16530                                  ; Inputs:
 16531                                  ;	AX is mode
 16532                                  ;	  High NIBBLE of AL (Sharing Mode)
 16533                                  ;		sharing_compat	   file is opened in compatibility mode
 16534                                  ;		sharing_deny_none  file is opened Multi reader, Multi writer
 16535                                  ;		sharing_deny_read  file is opened Only reader, Multi writer
 16536                                  ;		sharing_deny_write file is opened Multi reader, Only writer
 16537                                  ;		sharing_deny_both  file is opened Only reader, Only writer
 16538                                  ;	  Low NIBBLE of AL (Access Mode)
 16539                                  ;		open_for_read	file is opened for reading
 16540                                  ;		open_for_write	file is opened for writing
 16541                                  ;		open_for_both	file is opened for both reading and writing.
 16542                                  ; Function:
 16543                                  ;	Check this access mode for correctness
 16544                                  ; Outputs:
 16545                                  ;	[open_access] = AL input
 16546                                  ;	Carry Clear
 16547                                  ;		Mode is correct
 16548                                  ;		AX unchanged
 16549                                  ;	Carry Set
 16550                                  ;		Mode is bad
 16551                                  ;		AX = error_invalid_access
 16552                                  ; No other registers effected
 16553                                  ;----------------------------------------------------------------------------
 16554                                  
 16555                                  Check_Access_AX:
 16556                                  
 16557 00003886 A2[0905]                	MOV	[OPEN_ACCESS],AL
 16558 00003889 53                      	PUSH	BX
 16559                                  
 16560                                  ;	If sharing, then test for special sharing mode for FCBs
 16561                                  
 16562 0000388A 88C3                    	MOV	BL,AL
 16563 0000388C 80E3F0                  	AND	BL,SHARING_MASK
 16564 0000388F 803E[0D05]FF            	CMP	byte [FSHARING],-1
 16565 00003894 7505                    	JNZ	short CheckShareMode	; not through server call, must be ok
 16566 00003896 80FB70                  	CMP	BL,SHARING_NET_FCB
 16567 00003899 7405                    	JZ	short CheckAccessMode	; yes, we have an FCB
 16568                                  CheckShareMode:
 16569 0000389B 80FB40                  	CMP	BL,40h			; is this a good sharing mode?
 16570 0000389E 770D                    	JA	short Make_Bad_Access
 16571                                  CheckAccessMode:
 16572 000038A0 88C3                    	MOV	BL,AL
 16573 000038A2 80E30F                  	AND	BL,access_mask
 16574 000038A5 80FB02                  	CMP	BL,2
 16575 000038A8 7703                    	JA	short Make_Bad_Access
 16576 000038AA 5B                      	POP	BX
 16577 000038AB F8                      	CLC
 16578 000038AC C3                      	retn
 16579                                  
 16580                                  Make_Bad_Access:
 16581 000038AD B80C00                  	MOV	AX,error_invalid_access
 16582 000038B0 5B                      	POP	BX
 16583 000038B1 F9                      	STC
 16584 000038B2 C3                      	retn
 16585                                  
 16586                                  ;============================================================================
 16587                                  ; DINFO.ASM, MSDOS 6.0, 1991
 16588                                  ;============================================================================
 16589                                  ; 08/08/2018 - Retro DOS v3.0
 16590                                  
 16591                                  ;**	Low level routine for returning disk drive information from a local
 16592                                  ;	  or NET device
 16593                                  ;
 16594                                  ;	DISK_INFO
 16595                                  ;
 16596                                  ;	  Modification history:
 16597                                  ;
 16598                                  ;		Created: ARR 30 March 1983
 16599                                  
 16600                                  ;	Break	<DISK_INFO -- Get Disk Drive Information>
 16601                                  ;---------------------------------------------------------------------------
 16602                                  ; Procedure Name : DISK_INFO
 16603                                  ;
 16604                                  ; Inputs:
 16605                                  ;	[THISCDS] Points to the Macro List Structure of interest
 16606                                  ;		(It MAY NOT be NUL, error not detected)
 16607                                  ; Function:
 16608                                  ;	Get Interesting Drive Information
 16609                                  ; Returns:
 16610                                  ;	DX = Number of free allocation units
 16611                                  ;	BX = Total Number of allocation units on disk
 16612                                  ;	CX = Sector size
 16613                                  ;	AL = Sectors per allocation unit
 16614                                  ;	AH = FAT ID BYTE
 16615                                  ;	Carry set if error (currently user FAILed to I 24)
 16616                                  ; Segs except ES preserved, others destroyed
 16617                                  ;----------------------------------------------------------------------------
 16618                                  
 16619                                  ;hkn; called from getset.asm and misc.asm. DS has already been set up to 
 16620                                  ;hkn; DOSDATA. 
 16621                                  
 16622                                  DISK_INFO:
 16623                                  	; 08/08/2018 - Retro DOS v3.0
 16624                                  	; IBM DOS.COM (MSDOS 3.3, 1987) - Offset 37C5h
 16625                                  
 16626 000038B3 E818E7                  	call	TestNet
 16627 000038B6 7306                    	JNC	short LOCAL_DSK_INFO
 16628                                  
 16629                                  ;IF NOT Installed
 16630                                  ;	transfer NET_DISK_INFO
 16631                                  ;ELSE
 16632                                  	;MOV	AX,(MultNET SHL 8) OR 12
 16633                                  	;INT	2FH
 16634                                  	;return
 16635                                  
 16636 000038B8 B80C11                  	mov     ax,110Ch
 16637 000038BB CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - GET DISK SPACE
 16638                                  			; ES:DI -> current directory
 16639                                  			; Return: AL = sectors per cluster, BX = total clusters
 16640                                  			; CX = bytes per sector, DX = number of available clusters
 16641 000038BD C3                      	retn
 16642                                  ;ENDIF
 16643                                  
 16644                                  LOCAL_DSK_INFO:
 16645 000038BE C606[D102]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 16646 000038C3 E8A6E7                  	call	EcritDisk
 16647 000038C6 E8F222                  	call	FATREAD_CDS		; perform media check.
 16648 000038C9 7241                    	JC	short CRIT_LEAVE
 16649 000038CB BB0200                  	MOV	BX,2
 16650 000038CE E87C21                  	call	UNPACK			; Get first FAT sector into CURBUF
 16651 000038D1 7239                    	JC	short CRIT_LEAVE
 16652 000038D3 C536[7405]              	LDS	SI,[CURBUF]
 16653 000038D7 8A6410                  	MOV	AH,[SI+BUFINSIZ]	; get FAT ID BYTE
 16654                                  
 16655                                  ;hkn; SS is DOSDATA
 16656 000038DA 16                      	push	ss
 16657 000038DB 1F                      	pop	ds
 16658 000038DC 268B4E0D                	MOV	CX,[ES:BP+DPB.MAX_CLUSTER]
 16659                                  ;
 16660                                  ; Examine the current free count.  If it indicates that we have an invalid
 16661                                  ; count, do the expensive calculation.
 16662                                  ;
 16663 000038E0 268B561E                	MOV	DX,[ES:BP+DPB.FREE_CNT] ; get free count
 16664 000038E4 83FAFF                  	CMP	DX,-1			; is it valid?
 16665 000038E7 7404                    	JZ	short DoScan
 16666                                  ;
 16667                                  ; Check to see if it is in a reasonalbe range.	If so, trust it and return.
 16668                                  ; Otherwise, we need to blast out an internal error message and then recompute
 16669                                  ; the count.
 16670                                  ;
 16671 000038E9 39CA                    	CMP	DX,CX			; is it in a reasonable range?
 16672 000038EB 7223                    	JB	short GotVal		; yes, trust it.
 16673                                  DoScan:
 16674 000038ED 31D2                    	XOR	DX,DX
 16675 000038EF 49                      	DEC	CX
 16676                                  SCANFREE:
 16677 000038F0 E85A21                  	call	UNPACK
 16678 000038F3 7217                    	JC	short CRIT_LEAVE
 16679 000038F5 7501                    	JNZ	short NOTFREECLUS
 16680 000038F7 42                      	INC	DX			; A free one
 16681                                  NOTFREECLUS:
 16682 000038F8 43                      	INC	BX			; Next cluster
 16683 000038F9 E2F5                    	LOOP	SCANFREE
 16684 000038FB 4B                      	DEC	BX			; BX was next cluster.	Convert to
 16685                                  ReturnVals:
 16686 000038FC 4B                      	DEC	BX			; count
 16687 000038FD 268A4604                	MOV	AL,[ES:BP+DPB.CLUSTER_MASK] 
 16688 00003901 FEC0                    	INC	AL			; Sectors/cluster
 16689 00003903 268B4E02                	MOV	CX,[ES:BP+DPB.SECTOR_SIZE] ; Bytes/sector
 16690 00003907 2689561E                	MOV	[ES:BP+DPB.FREE_CNT],DX
 16691 0000390B F8                      	CLC
 16692                                  CRIT_LEAVE:
 16693 0000390C E865E7                  	call	LcritDisk
 16694 0000390F C3                      	retn
 16695                                  ;
 16696                                  ; We have correctly computed everything previously. Load up registers for
 16697                                  ; return.
 16698                                  ;
 16699                                  GotVal: 
 16700 00003910 89CB                    	MOV	BX,CX			; get cluster count
 16701 00003912 EBE8                    	JMP	short ReturnVals
 16702                                  
 16703                                  ;============================================================================
 16704                                  ; ISEARCH.ASM, MSDOS 6.0, 1991
 16705                                  ;============================================================================
 16706                                  ; 22/07/2018 - Retro DOS v3.0
 16707                                  
 16708                                  ;	TITLE	DOS_SEARCH - Internal SEARCH calls for MS-DOS
 16709                                  ;	NAME	DOS_SEARCH
 16710                                  
 16711                                  ;**	Low level routines for doing local and NET directory searches
 16712                                  ;
 16713                                  ;	DOS_SEARCH_FIRST
 16714                                  ;	DOS_SEARCH_NEXT
 16715                                  ;	RENAME_NEXT
 16716                                  ;
 16717                                  ;	Revision history:
 16718                                  ;
 16719                                  ;	    Created: ARR 30 March 1983
 16720                                  ;	    A000	version 4.00  Jan. 1988
 16721                                  ;	    A001	PTM 3564 -- search for fastopen
 16722                                  
 16723                                  ;Installed = TRUE
 16724                                  
 16725                                  ;--------------------------------------------------------------------------
 16726                                  ;
 16727                                  ; Procedure Name : DOS_SEARCH_FIRST
 16728                                  ;
 16729                                  ; Inputs:
 16730                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 16731                                  ;		terminated)
 16732                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 16733                                  ;		( = -1 if current dir not involved, else
 16734                                  ;		 Points to first char after last "/" of current dir part)
 16735                                  ;	[THISCDS] Points to CDS being used
 16736                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 16737                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 16738                                  ;	[DMAADD] Points to 53 byte buffer
 16739                                  ; Function:
 16740                                  ;	Initiate a search for the given file spec
 16741                                  ; Outputs:
 16742                                  ;	CARRY CLEAR
 16743                                  ;	    The 53 bytes ot DMAADD are filled in as follows:
 16744                                  ;
 16745                                  ;	LOCAL
 16746                                  ;	    Drive Byte (A=1, B=2, ...) High bit clear
 16747                                  ;		NEVER STORE DRIVE BYTE AFTER  found_it
 16748                                  ;	    11 byte search name with Meta chars in it
 16749                                  ;	    Search Attribute Byte, attribute of search
 16750                                  ;	    WORD LastEnt value
 16751                                  ;	    WORD DirStart
 16752                                  ;	    4 byte pad
 16753                                  ;	    32 bytes of the directory entry found
 16754                                  ;	NET
 16755                                  ;	    21 bytes First byte has high bit set
 16756                                  ;	    32 bytes of the directory entry found
 16757                                  ;
 16758                                  ;	CARRY SET
 16759                                  ;	    AX = error code
 16760                                  ;		error_no_more_files
 16761                                  ;			No match for this file
 16762                                  ;		error_path_not_found
 16763                                  ;			Bad path (not in curr dir part if present)
 16764                                  ;		error_bad_curr_dir
 16765                                  ;			Bad path in current directory part of path
 16766                                  ; DS preserved, others destroyed
 16767                                  ;---------------------------------------------------------------------------
 16768                                  
 16769                                  DOS_SEARCH_FIRST:
 16770                                  	; IBMDOS.COM (MSDOS 3.3 kernel) - Offset 3826h
 16771                                  
 16772 00003914 C43E[3A05]              	LES	DI,[THISCDS]
 16773 00003918 83FFFF                  	CMP	DI,-1
 16774 0000391B 7506                    	JNZ	short TEST_RE_NET2
 16775                                  
 16776                                  ;IF NOT Installed
 16777                                  ;	transfer NET_SEQ_SEARCH_FIRST
 16778                                  ;ELSE
 16779                                  	;mov	ax,1119h
 16780 0000391D B81911                  	MOV	AX,(MultNET<<8)|25
 16781 00003920 CD2F                    	INT	2Fh
 16782 00003922 C3                      	retn
 16783                                  ;ENDIF
 16784                                  
 16785                                  TEST_RE_NET2:
 16786                                  	;test	word [es:di+43h],8000h
 16787 00003923 26F745430080            	TEST	word [ES:DI+curdir.flags],curdir_isnet
 16788 00003929 7406                    	JZ	short LOCAL_SEARCH_FIRST
 16789                                  
 16790                                  ;IF NOT Installed
 16791                                  ;	transfer NET_SEARCH_FIRST
 16792                                  ;ELSE
 16793                                  	;mov	ax,111Bh
 16794 0000392B B81B11                  	MOV	AX,(MultNET<<8)|27
 16795 0000392E CD2F                    	INT	2FH
 16796 00003930 C3                      	retn
 16797                                  ;ENDIF
 16798                                  
 16799                                  LOCAL_SEARCH_FIRST:
 16800 00003931 E838E7                  	call	EcritDisk
 16801                                  	; MSDOS 6.0
 16802                                  	;TEST	word [DOS34_FLAG],SEARCH_FASTOPEN ;AN000;
 16803                                  	;JZ	short NOFN			;AN000;
 16804                                  	;OR	byte [FastOpenflg],Fastopen_Set	;AN000;
 16805                                  ;NOFN:						;AN000;
 16806 00003934 C606[F802]01            	MOV	byte [NoSetDir],1	; if we find a dir, don't change to it
 16807                                  	; MSDOS 6.0
 16808                                  	;CALL	CHECK_QUESTION		;AN000;;FO. is '?' in path
 16809                                  	;JNC	short norm_GETPATH	;AN000;;FO. no
 16810                                  	;AND	byte [FastOpenflg],Fast_yes ;AN000;;FO. reset fastopen
 16811                                  ;norm_GETPATH:
 16812 00003939 E8F90E                  	call	GETPATH
 16813                                  	; BX = offset NAME1
 16814                                  ;_getdone:
 16815 0000393C 7313                    	JNC	short find_check_dev
 16816 0000393E 750C                    	JNZ	short bad_path3
 16817 00003940 08C9                    	OR	CL,CL
 16818 00003942 7408                    	JZ	short bad_path3
 16819                                  find_no_more:
 16820                                  	;mov	ax,12h
 16821 00003944 B81200                  	MOV	AX,error_no_more_files
 16822                                  BadBye:
 16823                                  	; MSDOS 6.0
 16824                                  	;AND	[SS:FastOpenflg],Fast_yes  ;AN000;;FO. reset fastopen
 16825                                  
 16826 00003947 F9                      	STC
 16827 00003948 E829E7                  	call	LcritDisk
 16828 0000394B C3                      	retn
 16829                                  
 16830                                  bad_path3:
 16831                                  	;mov	ax,3
 16832 0000394C B80300                  	MOV	AX,error_path_not_found
 16833 0000394F EBF6                    	JMP	short BadBye
 16834                                  
 16835                                  find_check_dev:
 16836 00003951 08E4                    	OR	AH,AH
 16837 00003953 790A                    	JNS	short found_entry
 16838 00003955 C706[F402]FFFF          	MOV	word [LASTENT],-1	; Cause DOS_SEARCH_NEXT to fail
 16839 0000395B FE06[0B05]              	INC	byte [FOUND_DEV]	; Tell DOS_RENAME we found a device
 16840                                  found_entry:
 16841                                  ;
 16842                                  ; We set the physical drive byte here Instead of after found_it; Doing
 16843                                  ; a search-next may not have wfp_start set correctly
 16844                                  ;
 16845 0000395F C43E[DA02]              	LES	DI,[DMAADD]
 16846 00003963 8B36[4A05]              	MOV	SI,[WFP_START]		; get pointer to beginning
 16847 00003967 AC                      	LODSB
 16848 00003968 2C40                    	SUB	AL,'A'-1                ; logical drive
 16849 0000396A AA                      	STOSB				; High bit not set (local)
 16850                                  found_it:
 16851 0000396B C43E[DA02]              	LES	DI,[DMAADD]
 16852 0000396F 47                      	INC	DI
 16853                                  
 16854                                  	; MSDOS 6.0
 16855                                  	;PUSH	DS				  ;FO.;AN001; save ds
 16856                                  	;TEST	byte [Fastopenflg],Set_For_Search ;FO.;AN001; from fastopen
 16857                                  	;JZ	short notfast 			  ;FO.;AN001;
 16858                                  	;MOV	SI,BX				  ;FO.;AN001;
 16859                                  	;MOV	DS,[CURBUF+2]			  ;FO.;AN001;
 16860                                  	;JMP	SHORT movmov			  ;FO.;AN001;
 16861                                  
 16862                                  notfast:
 16863 00003970 BE[E604]                	MOV	SI,NAME1		; find_buf 2 = formatted name
 16864                                  movmov:
 16865                                  ; Special E5 code
 16866 00003973 A4                      	MOVSB
 16867 00003974 26807DFF05              	CMP	BYTE [ES:DI-1],5
 16868 00003979 7505                    	JNZ	short NOTKANJB
 16869 0000397B 26C645FFE5              	MOV	BYTE [ES:DI-1],0E5H
 16870                                  NOTKANJB:
 16871 00003980 B90A00                  	MOV	CX,10
 16872 00003983 F3A4                    	REP	MOVSB
 16873                                  
 16874                                  	; 08/09/2018
 16875                                  	;POP	DS			;FO.;AN001; restore ds
 16876                                  
 16877 00003985 A0[0605]                	MOV	AL,[ATTRIB]
 16878 00003988 AA                      	STOSB
 16879 00003989 50                      	PUSH	AX			; Save AH device info
 16880 0000398A A1[F402]                	MOV	AX,[LASTENT]
 16881 0000398D AB                      	STOSW
 16882 0000398E A1[5805]                	MOV	AX,[DIRSTART]
 16883 00003991 AB                      	STOSW
 16884                                  ; 4 bytes of 21 byte cont structure left for NET stuff
 16885 00003992 83C704                  	ADD	DI,4
 16886 00003995 58                      	POP	AX			; Recover AH device info
 16887 00003996 08E4                    	OR	AH,AH
 16888 00003998 7813                    	JS	short DOSREL		; Device entry is DOSGROUP relative
 16889 0000399A 833E[7405]FF            	CMP	WORD [CURBUF],-1
 16890 0000399F 7508                    	JNZ	short OKSTORE
 16891                                  
 16892                                  	; MSDOS 6.0
 16893                                  	;TEST	byte [FastOPenFlg],Set_For_Search
 16894                                  					;AN000;;FO. from fastopen and is good
 16895                                  	;JNZ	short OKSTORE		;AN000;;FO.
 16896                                  
 16897                                  	; The user has specified the root directory itself, rather than some
 16898                                  	; contents of it. We can't "find" that.
 16899 000039A1 26C745F8FFFF            	MOV	WORD [ES:DI-8],-1	; Cause DOS_SEARCH_NEXT to fail by
 16900                                  					;   stuffing a -1 at Lastent
 16901 000039A7 EB9B                    	JMP	short find_no_more
 16902                                  
 16903                                  OKSTORE:
 16904 000039A9 8E1E[7605]              	MOV	DS,[CURBUF+2]
 16905                                  DOSREL:
 16906                                  	; BX = offset NAME1 (from GETPATH)
 16907 000039AD 89DE                    	MOV	SI,BX			; SI-> start of entry
 16908                                  
 16909                                  ; NOTE: DOS_RENAME depends on BX not being altered after this point
 16910                                  
 16911                                  	;mov	cx,32
 16912 000039AF B92000                  	MOV	CX,dir_entry.size
 16913                                  ;;;;; 7/29/86
 16914 000039B2 89F8                    	MOV	AX,DI			; save the 1st byte addr
 16915 000039B4 F3A4                    	REP	MOVSB
 16916 000039B6 89C7                    	MOV	DI,AX			; restore 1st byte addr
 16917 000039B8 26803D05                	CMP	BYTE [ES:DI],05H	; special char check
 16918 000039BC 7504                    	JNZ	short NO05
 16919 000039BE 26C605E5                	MOV	BYTE [ES:DI],0E5H	; convert it back to E5
 16920                                  NO05:
 16921                                  
 16922                                  ;;;;; 7/29/86
 16923                                  
 16924                                  ;hkn; FastOpenflg is in DOSDATA use SS
 16925                                  	; MSDOS 6.0
 16926                                  	;AND	byte [SS:FastOpenflg],Fast_yes ;AN000;;FO. reset fastopen
 16927                                  	;push	ss
 16928                                  	;pop	ds
 16929                                  	;AND	byte [FastOpenflg],Fast_yes
 16930                                  
 16931                                  ;hkn; SS is DOSDATA
 16932 000039C2 16                      	push	ss
 16933 000039C3 1F                      	pop	ds
 16934 000039C4 F8                      	CLC
 16935 000039C5 E8ACE6                  	call	LcritDisk
 16936 000039C8 C3                      	retn
 16937                                  
 16938                                  ;BREAK <DOS_SEARCH_NEXT - scan for subsequent matches>
 16939                                  ;----------------------------------------------------------------------------
 16940                                  ;
 16941                                  ; Procedure Name : DOS_SEARCH_NEXT
 16942                                  ;
 16943                                  ; Inputs:
 16944                                  ;	[DMAADD] Points to 53 byte buffer returned by DOS_SEARCH_FIRST
 16945                                  ;	    (only first 21 bytes must have valid information)
 16946                                  ; Function:
 16947                                  ;	Look for subsequent matches
 16948                                  ; Outputs:
 16949                                  ;	CARRY CLEAR
 16950                                  ;	    The 53 bytes at DMAADD are updated for next call
 16951                                  ;		(see DOS_SEARCH_FIRST)
 16952                                  ;	CARRY SET
 16953                                  ;	    AX = error code
 16954                                  ;		error_no_more_files
 16955                                  ;			No more files to find
 16956                                  ; DS preserved, others destroyed
 16957                                  ;---------------------------------------------------------------------------
 16958                                  
 16959                                  ;hkn; called from search.asm. DS already set up at this point.
 16960                                  
 16961                                  DOS_SEARCH_NEXT:
 16962 000039C9 C43E[DA02]              	LES	DI,[DMAADD]
 16963 000039CD 268A05                  	MOV	AL,[ES:DI]
 16964 000039D0 A880                    	TEST	AL,80H			; Test for NET
 16965 000039D2 7406                    	JZ	short LOCAL_SEARCH_NEXT
 16966                                  ;IF NOT Installed
 16967                                  ;	transfer NET_SEARCH_NEXT
 16968                                  ;ELSE
 16969                                  	;mov	ax,111Ch
 16970 000039D4 B81C11                  	MOV	AX,(MultNET<<8)|28
 16971 000039D7 CD2F                    	INT	2FH  ; Multiplex - NETWORK REDIRECTOR - FINDNEXT
 16972                                  		     ; SS = DS = DOS CS, [DTA] = 21-byte findfirst search data
 16973                                  		     ; Return: CF set on error, AX = DOS error code
 16974                                  		     ; CF clear if successful
 16975 000039D9 C3                      	retn
 16976                                  ;ENDIF
 16977                                  
 16978                                  LOCAL_SEARCH_NEXT:
 16979                                  	;AL is drive A=1
 16980                                  	;mov	byte [EXTERR_LOCUS],2
 16981 000039DA C606[D102]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 16982 000039DF E88AE6                  	call	EcritDisk
 16983                                  
 16984                                  ;hkn; DummyCDS is in DOSDATA
 16985 000039E2 C706[3A05][9504]        	MOV     word [THISCDS],DUMMYCDS
 16986                                  ;hkn; Segment address is DOSDATA - use ds
 16987                                  ;hkn;	MOV     WORD [THISCDS+2],CS
 16988 000039E8 8C1E[3C05]              	mov	[THISCDS+2],DS
 16989                                  
 16990 000039EC 0440                    	ADD	AL,'A'-1
 16991 000039EE E8C62E                  	call	InitCDS
 16992                                  
 16993                                  ;	call	GETTHISDRV		; Set CDS pointer
 16994                                  
 16995 000039F1 7236                    	JC	short No_files		; Bogus drive letter
 16996 000039F3 C43E[3A05]              	LES	DI,[THISCDS]		; Get CDS pointer
 16997                                  	;les	bp,[es:di+45h]
 16998 000039F7 26C46D45                	LES	BP,[ES:DI+curdir.devptr]; Get DPB pointer
 16999 000039FB E8F6DC                  	call	GOTDPB			; [THISDPB] = ES:BP
 17000                                  
 17001 000039FE 268A4600                	mov	al,[ES:BP]
 17002                                  	;mov	AL,[ES:BP+DPB.DRIVE] ; mov al,[ES:BP+0]
 17003 00003A02 A2[1105]                	mov	[THISDRV],AL
 17004                                  	;mov	word [CREATING], 0E500h
 17005 00003A05 C706[1805]00E5          	MOV	WORD [CREATING],(DIRFREE*256)+0
 17006 00003A0B C606[F802]01            	MOV	byte [NoSetDir],1	; if we find a dir, don't change to it
 17007 00003A10 C536[DA02]              	LDS	SI,[DMAADD]
 17008 00003A14 AC                      	LODSB				; Drive Byte
 17009                                  
 17010                                  	;entry	RENAME_NEXT		; Entry used by DOS_RENAME
 17011                                  RENAME_NEXT:
 17012                                  	;context ES
 17013 00003A15 16                      	push	ss
 17014 00003A16 07                      	pop	es			; THIS BLOWS ES:BP POINTER TO DPB
 17015                                  
 17016                                  ;hkn; NAME1 is in DOSDATA
 17017 00003A17 BF[E604]                	MOV	DI,NAME1
 17018                                  
 17019 00003A1A B90B00                  	MOV	CX,11
 17020 00003A1D F3A4                    	REP	MOVSB			; Search name
 17021 00003A1F AC                      	LODSB				; Attribute
 17022                                  
 17023                                  ;hkn; SS override
 17024 00003A20 36A2[0605]              	MOV	[SS:ATTRIB],AL
 17025 00003A24 AD                      	LODSW				; LastEnt
 17026 00003A25 09C0                    	OR	AX,AX
 17027 00003A27 7903                    	JNS	short cont_load
 17028                                  No_files:
 17029 00003A29 E918FF                  	JMP	find_no_more
 17030                                  
 17031                                  cont_load:
 17032 00003A2C 50                      	PUSH	AX			; Save LastEnt
 17033 00003A2D AD                      	LODSW				; DirStart
 17034 00003A2E 89C3                    	MOV	BX,AX
 17035                                  
 17036                                  ;hkn; SS is DOSDATA
 17037                                  	;context DS
 17038 00003A30 16                      	push	ss
 17039 00003A31 1F                      	pop	ds
 17040 00003A32 C42E[2405]              	LES	BP,[THISDPB]		; Recover ES:BP
 17041                                  	;invoke	SetDirSrch
 17042 00003A36 E8A70D                  	call	SETDIRSRCH
 17043 00003A39 7303                    	JNC	short SEARCH_GOON
 17044 00003A3B 58                      	POP	AX			; Clean stack
 17045 00003A3C EBEB                    	JMP	short No_files
 17046                                  
 17047                                  SEARCH_GOON:
 17048 00003A3E E87E10                  	call	STARTSRCH
 17049 00003A41 58                      	POP	AX
 17050 00003A42 E86D0D                  	call	GETENT
 17051 00003A45 72E2                    	JC	short No_files
 17052 00003A47 E8AC0C                  	call	NEXTENT
 17053 00003A4A 72DD                    	JC	short No_files
 17054 00003A4C 30E4                    	XOR	AH,AH			; If Search_Next, can't be a DEV
 17055 00003A4E E91AFF                  	JMP	found_it ; 10/08/2018
 17056                                  
 17057                                  ; MSDOS6.0
 17058                                  ;---------------------------------------------------------------------------
 17059                                  ;
 17060                                  ; Procedure Name : CHECK_QUESTION
 17061                                  ;
 17062                                  ; Input: [WFP_START]= pointer to final path
 17063                                  ; Function: check '?' char
 17064                                  ; Output: carry clear, if no '?'
 17065                                  ;	 carry set, if '?' exists
 17066                                  ;---------------------------------------------------------------------------
 17067                                  
 17068                                  ;CHECK_QUESTION:
 17069                                  ;;hkn;	wfp_start is in DOSDATA;hkn;	MOV     WORD PTR ThisCDS+2,CS
 17070                                  ;;hkn;	PUSH	CS			;AN000;;FO.
 17071                                  ;	push	ss
 17072                                  ;
 17073                                  ;	POP	DS			;AN000;;FO. ds:si -> final path
 17074                                  ;	MOV	SI,[WFP_START]		;AN000;;FO.
 17075                                  ;getnext:				;AN000;
 17076                                  ;	LODSB				;AN000;;FO. get char
 17077                                  ;	OR	AL,AL			;AN000;;FO. is it null
 17078                                  ;	JZ	short NO_Question	;AN000;;FO. yes
 17079                                  ;	CMP	AL,'?'                  ;AN000;;FO. is '?'
 17080                                  ;	JNZ	short getnext 		;AN000;;FO. no
 17081                                  ;	STC				;AN000;;FO.
 17082                                  ;NO_Question:				;AN000;
 17083                                  ;	retn				;AN000;;FO.
 17084                                  
 17085                                  ;============================================================================
 17086                                  ; ABORT.ASM, MSDOS 6.0, 1991
 17087                                  ;============================================================================
 17088                                  ; 23/07/2018 - Retro DOS v3.0
 17089                                  
 17090                                  ;**
 17091                                  ;
 17092                                  ; Internal Abort call closes all handles and FCBs associated with a process.
 17093                                  ;  If process has NET resources a close all is sent out over the net.
 17094                                  ;
 17095                                  ;   DOS_ABORT
 17096                                  ;
 17097                                  ;   Modification history:
 17098                                  ;
 17099                                  ;       Created: ARR 30 March 1983
 17100                                  ;
 17101                                  ;	M038	SR	10/16/90	Free SFT with the PSP of the process
 17102                                  ;				being terminated only if it is busy.
 17103                                  ;
 17104                                  
 17105                                  ;Break   <DOS_ABORT -- CLOSE all files for process>
 17106                                  ;--------------------------------------------------------------------------
 17107                                  ;
 17108                                  ; Procedure Name : DOS_ABORT
 17109                                  ;
 17110                                  ; Inputs:
 17111                                  ;       [CurrentPDB] set to PID of process aborting
 17112                                  ; Function:
 17113                                  ;       Close all files and free all SFTs for this PID
 17114                                  ; Returns:
 17115                                  ;       None
 17116                                  ; All destroyed except stack
 17117                                  ;---------------------------------------------------------------------------
 17118                                  
 17119                                  DOS_ABORT:
 17120 00003A51 368E06[DE02]            	MOV     ES,[SS:CurrentPDB]	; SS override
 17121 00003A56 268B0E3200              	MOV     CX,[ES:PDB.JFN_Length]  ; Number of JFNs
 17122                                  reset_free_jfn:
 17123 00003A5B 89CB                    	MOV     BX,CX
 17124 00003A5D 51                      	PUSH    CX
 17125 00003A5E 4B                      	DEC     BX                      ; get jfn (start with last one)
 17126                                  
 17127 00003A5F E86133                  	CALL	_$CLOSE
 17128 00003A62 59                      	POP     CX
 17129 00003A63 E2F6                    	LOOP    reset_free_jfn          ; and do 'em all
 17130                                  ;
 17131                                  ; Note:  We do need to explicitly close FCBs. Reasons are as follows: If we
 17132                                  ; are running in the no-sharing no-network environment, we are simulating the
 17133                                  ; 2.0 world and thus if the user doesn't close the file, that is his problem
 17134                                  ; BUT...  the cache remains in a state with garbage that may be reused by the
 17135                                  ; next process.  We scan the set and blast the ref counts of the FCBs we own.
 17136                                  ;
 17137                                  ; If sharing is loaded, then the following call to close process will
 17138                                  ; correctly close all FCBs.  We will then need to walk the list AFTER here.
 17139                                  ;
 17140                                  ; Finally, the following call to NET_Abort will cause an EOP to be sent to all
 17141                                  ; known network resources.  These resources are then responsible for cleaning
 17142                                  ; up after this process.
 17143                                  ;
 17144                                  ; Sleazy, eh?
 17145                                  ;
 17146                                  	;context DS			; SS is DOSDATA
 17147 00003A65 16                      	push	ss
 17148 00003A66 1F                      	pop	ds  ; 09/09/2018
 17149                                  
 17150                                  	;CallInstall Net_Abort, MultNET, 29
 17151 00003A67 B81D11                  	mov	ax, 111Dh
 17152 00003A6A CD2F                    	int     2Fh 	; Multiplex - NETWORK REDIRECTOR 
 17153                                  			;	    - CLOSE ALL REMOTE FILES FOR PROCESS
 17154                                  			; DS???, SS = DOS CS
 17155                                  ;if installed
 17156 00003A6C FF1E[6C00]              	call	far [JShare+(4*4)]	; 4 = MFTCloseP
 17157                                  ;else
 17158                                  ;	call 	mftCloseP
 17159                                  ;endif
 17160                                  
 17161                                  ; Scan the FCB cache for guys that belong to this process and zap their ref
 17162                                  ; counts.
 17163                                  					; SS override
 17164 00003A70 36C43E[4000]            	les     di,[ss:SFTFCB]		; grab the pointer to the table
 17165                                  	;mov	cx,[es:di+4]
 17166 00003A75 268B4D04                	mov     cx,[es:di+SFT.SFCount]
 17167 00003A79 E317                    	jcxz    FCBScanDone
 17168                                  	;lea	di,[di+6]
 17169 00003A7B 8D7D06                  	LEA     DI,[DI+SFT.SFTable]	; point at table
 17170 00003A7E 36A1[E802]              	mov     ax,[SS:PROC_ID]		; SS override
 17171                                  FCBTest:
 17172                                  	;cmp	[es:di+31h],ax
 17173 00003A82 26394531                	cmp	[es:di+SF_ENTRY.sf_PID],ax ; is this one of ours
 17174 00003A86 7505                    	jnz	short FCBNext		; no, skip it
 17175 00003A88 26C7050000              	mov	word [es:di],0
 17176                                  	;mov	word [es:di+SF_ENTRY.sf_ref_count],0  ; yes, blast ref count
 17177                                  FCBNext:
 17178 00003A8D 83C735                  	add     di,SF_ENTRY.size
 17179 00003A90 E2F0                    	loop    FCBTest
 17180                                  FCBScanDone:
 17181                                  
 17182                                  ;
 17183                                  ; Walk the SFT to eliminate all busy SFT's for this process.
 17184                                  ;
 17185 00003A92 31DB                    	XOR     BX,BX
 17186                                  Scan:
 17187 00003A94 53                      	push    bx
 17188 00003A95 E87A2D                  	call	SFFromSFN
 17189 00003A98 5B                      	pop     bx
 17190 00003A99 7301                    	jnc     short Scan1
 17191 00003A9B C3                      	retn
 17192                                  
 17193                                  ;M038
 17194                                  ; Do what the comment above says, check for busy state
 17195                                  ;
 17196                                  Scan1:
 17197                                  	;cmp	word [es:di],0
 17198                                  	;jz	short scan_next  ; MSDOS 3.3
 17199                                  	; MSDOS6.0
 17200 00003A9C 26833DFF                	cmp	word [es:di],sf_busy ; -1
 17201                                  	;cmp	word [es:di+SF_ENTRY.sf_ref_count],sf_busy
 17202                                  				; Is Sft busy? ;M038
 17203 00003AA0 7519                    	jnz	short scan_next
 17204                                  ;
 17205                                  ; we have a SFT that is busy. See if it is for the current process
 17206                                  ;
 17207 00003AA2 36A1[E802]              	mov     ax,[SS:PROC_ID]		; SS override
 17208                                  	;cmp	[es:di+31h],ax
 17209 00003AA6 26394531                	cmp	[es:di+SF_ENTRY.sf_PID],ax
 17210 00003AAA 750F                    	jnz	short scan_next
 17211 00003AAC 36A1[EA02]              	mov     ax,[SS:USER_ID]		; SS override
 17212                                  	;cmp	[es:di+2Fh],ax
 17213 00003AB0 2639452F                	cmp	[es:di+SF_ENTRY.sf_UID],ax
 17214 00003AB4 7505                    	jnz	short scan_next
 17215                                  ;
 17216                                  ; This SFT is labelled as ours.
 17217                                  ;
 17218 00003AB6 26C7050000              	mov	word [es:di],0
 17219                                  	;mov	word [es:di+SF_ENTRY.sf_ref_count],0
 17220                                  scan_next:
 17221 00003ABB 43                      	inc     bx
 17222 00003ABC EBD6                    	jmp     short Scan
 17223                                  
 17224                                  
 17225                                  ;============================================================================
 17226                                  ; CLOSE.ASM, MSDOS 6.0, 1991
 17227                                  ;============================================================================
 17228                                  ; 23/07/2018 - Retro DOS v3.0
 17229                                  
 17230                                  ;**	Internal Close and Commit calls to close a local or NET SFT.
 17231                                  ;
 17232                                  ;	DOS_CLOSE
 17233                                  ;	DOS_COMMIT
 17234                                  ;	FREE_SFT
 17235                                  ;	SetSFTTimes
 17236                                  ;
 17237                                  ;	Revision history:
 17238                                  ;
 17239                                  ;	   AN000  version 4.00	Jan. 1988
 17240                                  ;	   A005   PTM 3718 --- lost clusters when fastopen installed
 17241                                  ;	   A011   PTM 4766 --- C2 fastopen problem
 17242                                  
 17243                                  ;Installed = TRUE
 17244                                  
 17245                                  ;Break <DOS_CLOSE -- CLOSE FILE from SFT>
 17246                                  ;---------------------------------------------------------------------------
 17247                                  ;
 17248                                  ; Procedure Name : DOS_CLOSE
 17249                                  ;
 17250                                  ; Inputs:
 17251                                  ;	[THISSFT] set to the SFT for the file being used
 17252                                  ; Function:
 17253                                  ;	Close the indicated file via the SFT
 17254                                  ; Returns:
 17255                                  ;	sf_ref_count decremented otherwise
 17256                                  ;	ES:DI point to SFT
 17257                                  ;	Carry set if error
 17258                                  ;	    AX has error code
 17259                                  ; DS preserved, others destroyed
 17260                                  ;---------------------------------------------------------------------------
 17261                                  
 17262                                  ;hkn; DOS_CLOSE called from fcbio.asm and handle.asm. DS alreday set up.
 17263                                  
 17264                                  ; 23/07/2018 - IBMDOS.COM (MSDOS 3.3), 1987 - Offset 39D0h
 17265                                  
 17266                                  DOS_CLOSE:
 17267 00003ABE C43E[3605]              	LES	DI,[THISSFT]
 17268                                  	;mov	bx,[ES:DI+5]
 17269 00003AC2 268B5D05                	MOV	BX,[ES:DI+SF_ENTRY.sf_flags]
 17270                                  
 17271                                  ;	Network closes are handled entirely by the net code.
 17272                                  
 17273                                  	;test	bx,8000h
 17274 00003AC6 F7C30080                	TEST	BX,sf_isnet
 17275 00003ACA 7406                    	JZ	short LocalClose
 17276                                  
 17277                                  	;CallInstall Net_Close,MultNET,6
 17278 00003ACC B80611                  	mov     ax, 1106h
 17279 00003ACF CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - CLOSE REMOTE FILE
 17280                                  			; ES:DI -> SFT
 17281                                  			; SFT DPB field -> DPB of drive containing file
 17282                                  			; Return: CF set on error, AX = DOS error code
 17283                                  			; CF clear if successful
 17284 00003AD1 C3                      	retn
 17285                                  
 17286                                  ;
 17287                                  ; All closes release the sharing information.
 17288                                  ; No commit releases sharing information
 17289                                  ;
 17290                                  ; All closes decrement the ref count.
 17291                                  ; No commit decrements the ref count.
 17292                                  ;
 17293                                  LocalClose:
 17294 00003AD2 E897E5                  	call	EcritDisk
 17295 00003AD5 E80E01                  	CALL	SetSFTTimes
 17296 00003AD8 E89D00                  	CALL	FREE_SFT		; dec ref count or mark as busy
 17297                                  
 17298                                  ;hkn; SS is DOSDATA
 17299                                  	;Context DS
 17300 00003ADB 16                      	push	ss
 17301 00003ADC 1F                      	pop	ds
 17302                                  
 17303 00003ADD 50                      	push	ax
 17304 00003ADE 53                      	push	bx
 17305 00003ADF E87238                  	call	ShareEnd
 17306 00003AE2 5B                      	pop	bx
 17307 00003AE3 58                      	pop	ax
 17308                                  ;
 17309                                  ; Commit enters here. AX from commit MUST be <> 1, BX is flags word
 17310                                  ;
 17311                                  CloseEntry:
 17312 00003AE4 50                      	PUSH	AX
 17313                                  ;
 17314                                  ; File clean or device does not get stamped nor disk looked at.
 17315                                  ;
 17316                                  	;test	bx,0C0h
 17317 00003AE5 F7C3C000                	TEST	BX,devid_file_clean+devid_device
 17318                                  	;JZ	short rdir
 17319                                  	;JMP	FREE_SFT_OK		; either clean or device
 17320 00003AE9 757A                    	jnz	short FREE_SFT_OK
 17321                                  ;
 17322                                  ; Retrieve the directory entry for the file
 17323                                  ;
 17324                                  rdir:
 17325 00003AEB E89700                  	CALL	DirFromSFT
 17326                                  	;mov	al,5
 17327 00003AEE B005                    	MOV	AL,error_access_denied
 17328                                  	;JNC	short clook
 17329                                  	;JMP	CloseFinish		; pretend the close worked.
 17330 00003AF0 7274                    	jc	short CloseFinish
 17331                                  clook:
 17332                                  ;
 17333                                  ; ES:DI points to entry
 17334                                  ; DS:SI points to SFT
 17335                                  ; ES:BX points to buffer header
 17336                                  ;
 17337 00003AF2 57                      	push	di
 17338 00003AF3 56                      	push	si
 17339                                  	;lea	si,[si+20h] ; MSDOS 3.3
 17340 00003AF4 8D7420                  	LEA	SI,[SI+SF_ENTRY.sf_name]
 17341                                  ;
 17342                                  ; ES:DI point to directory entry
 17343                                  ; DS:SI point to unpacked name
 17344                                  ;
 17345 00003AF7 E888E4                  	call	XCHGP
 17346                                  ;
 17347                                  ; ES:DI point to unpacked name
 17348                                  ; DS:SI point to directory entry
 17349                                  ;
 17350 00003AFA E8570C                  	call	MetaCompare
 17351 00003AFD E882E4                  	call	XCHGP
 17352 00003B00 5E                      	pop	si
 17353 00003B01 5F                      	pop	di
 17354 00003B02 740B                    	JZ	short CLOSE_GO		; Name OK
 17355                                  Bye:	
 17356 00003B04 89F7                    	MOV	DI,SI
 17357 00003B06 1E                      	PUSH	DS
 17358 00003B07 07                      	POP	ES			; ES:DI points to SFT
 17359 00003B08 16                      	PUSH	SS
 17360 00003B09 1F                      	POP	DS
 17361 00003B0A F9                      	STC
 17362                                  	;mov	al,2
 17363 00003B0B B002                    	MOV	AL,error_file_not_found
 17364 00003B0D EB57                    	JMP	short CloseFinish
 17365                                  
 17366                                  CLOSE_GO:
 17367                                  	; MSDOS 6.0
 17368                                  	;TEST	[SI+SF_ENTRY.sf_mode],sf_isFCB	; FCB ?
 17369                                  	;JZ	short nofcb		; no, set dir attr, sf_attr
 17370                                  	; MSDOS 3.3 (& MSDOS 6.0)
 17371                                  	;mov	ch,[es:di+0Bh]
 17372 00003B0F 268A6D0B                	MOV	CH,[ES:DI+dir_entry.dir_attr]
 17373                                  	;mov	al,[si+4]
 17374 00003B13 8A4404                  	MOV	AL,[SI+SF_ENTRY.sf_attr]
 17375                                  
 17376                                  ;hkn; SS override
 17377 00003B16 36A2[0605]              	MOV	[SS:ATTRIB],AL
 17378                                  	; MSDOS 3.3
 17379 00003B1A E8B60F                  	call	MatchAttributes
 17380 00003B1D 75E5                    	JNZ	short Bye		; attributes do not match
 17381                                  	;JMP	SHORT setattr		;FT.
 17382                                  	; MSDOS 6.0
 17383                                  ;nofcb:
 17384                                  	;MOV	AL,[SI+SF_ENTRY.sf_attr] ;FT.		;AN000;
 17385                                  	;MOV	[ES:DI+dir_entry.dir_attr],AL ;FT.	;AN000;
 17386                                  setattr:
 17387                                  	; MSDOS 3.3 (& MSDOS6.0)
 17388                                  	;or	byte [es:di+0Bh],20h
 17389 00003B1F 26804D0B20              	OR	BYTE [ES:DI+dir_entry.dir_attr],attr_archive ;Set archive
 17390                                  	; MSDOS6.0
 17391                                  	;MOV	AX,[ES:DI+dir_entry.dir_first] ;AN011
 17392                                  					;F.O. save old first cluster
 17393                                  ;hkn; SS override
 17394                                  	;MOV	[SS:OLD_FIRSTCLUS],AX	;AN011;F.O. save old first cluster
 17395                                  
 17396                                  	;mov	ax,[si+0Bh]
 17397 00003B24 8B440B                  	MOV	AX,[SI+SF_ENTRY.sf_firclus]
 17398                                  	;mov	[es:di+1Ah],ax
 17399 00003B27 2689451A                	MOV	[ES:DI+dir_entry.dir_first],AX	;Set firclus pointer
 17400                                  	;mov	ax,[si+11h]
 17401 00003B2B 8B4411                  	MOV	AX,[SI+SF_ENTRY.sf_size]
 17402                                  	;mov	[es:di+1Ch],ax
 17403 00003B2E 2689451C                	MOV	[ES:DI+dir_entry.dir_size_l],AX	;Set size
 17404                                  	;mov	ax,[si+13h]
 17405 00003B32 8B4413                  	MOV	AX,[SI+SF_ENTRY.sf_size+2]
 17406                                  	;mov	[es:di+1Eh],ax
 17407 00003B35 2689451E                	MOV	[ES:DI+dir_entry.dir_size_h],AX
 17408                                  	;mov	ax,[si+0Fh]
 17409 00003B39 8B440F                  	MOV	AX,[SI+SF_ENTRY.sf_date]
 17410                                  	;mov	[es:di+18h],ax
 17411 00003B3C 26894518                	MOV	[ES:DI+dir_entry.dir_date],AX	;Set date
 17412                                  	;mov	ax,[si+0Dh]
 17413 00003B40 8B440D                  	MOV	AX,[SI+SF_ENTRY.sf_time]
 17414                                  	;mov	[es:di+16h],ax
 17415 00003B43 26894516                	MOV	[ES:DI+dir_entry.dir_time],AX	;Set time
 17416                                  
 17417                                  	; MSDOS 6.0
 17418                                  ;; File Tagging
 17419                                  	;TEST	byte [ES:BX+BUFFINFO.buf_flags],buf_dirty  
 17420                                  	;			  ;LB. if already dirty		    ;AN000;
 17421                                  	;JNZ	short yesdirty	  ;LB.  don't increment dirty count ;AN000;
 17422                                  	;call	INC_DIRTY_COUNT   ;LB.				    ;AN000;
 17423                                  	; MSDOS 3.3 (& MSDOS6.0)
 17424                                  	;or	byte [es:bx+5],40h
 17425 00003B47 26804F0540              	OR	byte [ES:BX+BUFFINFO.buf_flags],buf_dirty ;Buffer dirty
 17426                                  yesdirty:
 17427 00003B4C 1E                      	push	ds
 17428 00003B4D 56                      	push	si
 17429                                  	; MSDOS 6.0
 17430                                  	;MOV	CX,[SI.sf_firclus]	; do this for Fastopen
 17431                                  
 17432                                  ;hkn; SS override
 17433                                  	;MOV	AL,[SS:THISDRV]
 17434                                  	; MSDOS3.3 
 17435 00003B4E 16                      	push	ss
 17436 00003B4F 1F                      	pop	ds
 17437 00003B50 A0[1105]                	MOV	AL,[THISDRV]
 17438                                  ;;; 10/1/86  update fastopen cache
 17439                                  	; MSDOS 3.3 (& MSDOS6.0)
 17440 00003B53 52                      	PUSH	DX
 17441 00003B54 B400                    	MOV	AH,0			; dir entry update
 17442 00003B56 88C2                    	MOV	DL,AL			; drive number A=0, B=1,,,
 17443                                  	; MSDOS 6.0
 17444                                  	;OR	CX,CX			;AN005; first cluster 0; may be truncated
 17445                                  	;JNZ	short do_update2	;AN005; no, do update
 17446                                  	;MOV	AH,3			;AN005; do a delete cache entry
 17447                                  	;MOV	DI,[SI+SF_ENTRY.sf_dirsec]   ;AN005; cx:di = dir sector
 17448                                  	;MOV	CX,[SI+SF_ENTRY.sf_dirsec+2] ;AN005;
 17449                                  	;MOV	DH,[SI+SF_ENTRY.sf_dirpos]   ;AN005; dh= dir pos
 17450                                  	;JMP	SHORT do_update 	;AN011;F.O.
 17451                                  ;do_update2:				;AN011;F.O.
 17452                                  ;hkn; SS override fort OLD_FIRSTCLUS
 17453                                  	;CMP	CX,[SS:OLD_FIRSTCLUS]	;AN011;F.O. same as old first clusetr?
 17454                                  	;JZ	short do_update		;AN011;F.O. yes
 17455                                  	;MOV	AH,2			;AN011;F.O. delete the old entry
 17456                                  	;MOV	CX,[SS:OLD_FIRSTCLUS]	;AN011;F.O.
 17457                                  do_update:				;AN005;
 17458                                  ;hkn; SS is DOSDATA
 17459                                  	;Context DS
 17460                                  	;push	ss
 17461                                  	;pop	ds	
 17462                                  	; MSDOS 3.3 (& MSDOS6.0)
 17463 00003B58 E8B4F8                  	call	FastOpen_Update 	; invoke fastopen
 17464 00003B5B 5A                      	POP	DX
 17465                                  
 17466                                  ;;; 10/1/86  update fastopen cache
 17467 00003B5C E8CE23                  	call	FLUSHBUF		; flush all relevant buffers
 17468 00003B5F 5F                      	pop	di
 17469 00003B60 07                      	pop	es
 17470                                  	;mov	al,5
 17471 00003B61 B005                    	MOV	AL,error_access_denied
 17472 00003B63 7201                    	JC	short CloseFinish
 17473                                  FREE_SFT_OK:
 17474 00003B65 F8                      	CLC				; signal no error.
 17475                                  CloseFinish:
 17476                                  ;
 17477                                  ; Indicate to the device that the SFT is being closed.
 17478                                  ;
 17479                                  ;;;; 7/21/86
 17480 00003B66 9C                      	PUSHF				; save flag from DirFromSFT
 17481 00003B67 E81213                  	call	DEV_CLOSE_SFT
 17482 00003B6A 9D                      	POPF
 17483                                  ;;;; 7/21/86
 17484                                  ;
 17485                                  ; See if the ref count indicates that we have busied the SFT. If so, mark the
 17486                                  ; SFT as being free. Note that we do NOT need to be in critSFT as we are ONLY
 17487                                  ; going to be moving from busy to free.
 17488                                  ;
 17489 00003B6B 59                      	POP	CX			; get old ref count
 17490 00003B6C 9C                      	PUSHF
 17491 00003B6D 49                      	DEC	CX			; if cx != 1
 17492 00003B6E 7503                    	JNZ	short NoFree		; then do NOT free SFT
 17493 00003B70 26890D                  	mov	[es:di],cx
 17494                                  	;MOV	[ES:DI+SF_ENTRY.sf_ref_Count],CX ; mov [es:di+0],cx
 17495                                  NoFree:
 17496 00003B73 E8FEE4                  	call	LcritDisk
 17497 00003B76 9D                      	POPF
 17498 00003B77 C3                      	retn
 17499                                  
 17500                                  ;---------------------------------------------------------------------------
 17501                                  ;
 17502                                  ; Procedure Name : FREE_SFT
 17503                                  ;
 17504                                  ; ES:DI -> SFT. Decs sft_ref_count. If the count goes to 0, mark it as busy.
 17505                                  ; Flags preserved. Return old ref count in AX
 17506                                  ;
 17507                                  ; Note that busy is indicated by the SFT ref count being -1.
 17508                                  ;
 17509                                  ;---------------------------------------------------------------------------
 17510                                  
 17511                                  FREE_SFT:
 17512 00003B78 9C                      	PUSHF		; Save carry state
 17513 00003B79 268B05                  	mov	ax,[es:di]
 17514                                  	;MOV	AX,[ES:DI+SF_ENTRY.sf_ref_count]
 17515 00003B7C 48                      	DEC	AX
 17516 00003B7D 7501                    	JNZ	short SetCount
 17517 00003B7F 48                      	DEC	AX
 17518                                  SetCount:
 17519 00003B80 268705                  	xchg	ax,[es:di]
 17520                                  	;XCHG	AX,[ES:DI+SF_ENTRY.sf_ref_count]
 17521 00003B83 9D                      	POPF
 17522 00003B84 C3                      	retn
 17523                                  
 17524                                  ;----------------------------------------------------------------------------
 17525                                  ;
 17526                                  ; Procedure Name : DirFromSFT
 17527                                  ;
 17528                                  ;   DirFromSFT - locate a directory entry given an SFT.
 17529                                  ;
 17530                                  ;   Inputs:	ES:DI point to SFT
 17531                                  ;		DS = DOSDATA
 17532                                  ;   Outputs:
 17533                                  ;		EXTERR_LOCUS = errLOC_Disk
 17534                                  ;		CurBuf points to buffer
 17535                                  ;		Carry Clear -> operation OK
 17536                                  ;		    ES:DI point to entry
 17537                                  ;		    ES:BX point to buffer
 17538                                  ;		    DS:SI point to SFT
 17539                                  ;		Carry SET   -> operation failed
 17540                                  ;		    registers trashified
 17541                                  ;   Registers modified: ALL
 17542                                  ;----------------------------------------------------------------------------
 17543                                  
 17544                                  DirFromSFT:
 17545                                  	;mov	byte [EXTERR_LOCUS],2
 17546 00003B85 C606[D102]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 17547 00003B8A 06                      	push	es
 17548 00003B8B 57                      	push	di
 17549                                  	; MSDOS 3.3
 17550                                  	;mov	dx,[es:di+1Dh]
 17551 00003B8C 268B551D                	MOV	dx,[ES:DI+SF_ENTRY.sf_dirsec]
 17552                                  	; MSDOS 6.0
 17553                                  	;MOV	DX,[ES:DI+SF_ENTRY.sf_dirsec+2]  ;F.C. >32mb
 17554                                  	;MOV	[HIGH_SECTOR],DX		 ;F.C. >32mb
 17555                                  	;MOV	DX,[ES:DI+SF_ENTRY.sf_dirsec]
 17556                                  	;PUSH	word [HIGH_SECTOR]	;F.C. >32mb
 17557                                  	; MSDOS 3.3 (& MSDOS6.0)
 17558 00003B90 52                      	PUSH	DX
 17559 00003B91 E81520                  	call	FATREAD_SFT		; ES:BP points to DPB, [THISDRV] set
 17560                                  					; [THISDPB] set
 17561 00003B94 5A                      	POP	DX
 17562                                  	;POP	word [HIGH_SECTOR]	;F.C. >32mb
 17563 00003B95 7225                    	JC	short PopDone
 17564 00003B97 30C0                    	XOR	AL,AL			; Pre read
 17565                                  	;mov	byte [ALLOWED],18h
 17566 00003B99 C606[F702]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 17567 00003B9E E8E422                  	call	GETBUFFR
 17568 00003BA1 7219                    	JC	short PopDone
 17569 00003BA3 5E                      	pop	si
 17570 00003BA4 1F                      	pop	ds			; Get back SFT pointer
 17571                                  
 17572                                  ;hkn; SS override
 17573 00003BA5 36C43E[7405]            	LES	DI,[SS:CURBUF]
 17574                                  	;or	byte [es:di+5],4
 17575 00003BAA 26804D0504              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_isDIR
 17576 00003BAF 89FB                    	MOV	BX,DI			; ES:BX point to buffer header
 17577                                  	;lea	di,[di+10h]
 17578 00003BB1 8D7D10                  	LEA	DI,[DI+BUFINSIZ] 	; Point to buffer
 17579                                  	;mov	al,32
 17580 00003BB4 B020                    	MOV	AL,dir_entry.size
 17581 00003BB6 F6641F                  	MUL	byte [SI+SF_ENTRY.sf_dirpos]
 17582 00003BB9 01C7                    	ADD	DI,AX			; Point at the entry
 17583 00003BBB C3                      	retn				; carry is clear
 17584                                  
 17585                                  PopDone:
 17586 00003BBC 5F                      	pop	di
 17587 00003BBD 07                      	pop	es
 17588                                  PopDone_retn:
 17589 00003BBE C3                      	retn
 17590                                  
 17591                                  ;----------------------------------------------------------------------------
 17592                                  ;
 17593                                  ;**	DOS_Commit - UPdate Directory Entries
 17594                                  ;
 17595                                  ;	ENTRY	same as DOS_CLOSE (??? BUGBUG - update this jgl)
 17596                                  ;		(DS) = DOSGROUP
 17597                                  ;	EXIT	Same as DOS_CLOSE except ref_count field is not altered
 17598                                  ;	USES	all but DS
 17599                                  ;
 17600                                  ;----------------------------------------------------------------------------
 17601                                  ;
 17602                                  
 17603                                  DOS_COMMIT:
 17604                                  	;hkn; called from srvcall. DS already set up.
 17605 00003BBF C43E[3605]              	LES	DI,[THISSFT]
 17606                                  	;mov	bx,[es:di+5]
 17607 00003BC3 268B5D05                	MOV	BX,[ES:DI+SF_ENTRY.sf_flags]
 17608                                  	;test	bx,0C0h
 17609 00003BC7 F7C3C000                	TEST	BX,devid_file_clean+devid_device ;Clears carry
 17610 00003BCB 75F1                    	jnz	short PopDone_retn
 17611                                  	;test	bx,8000h
 17612 00003BCD F7C30080                	TEST	BX,sf_isnet
 17613 00003BD1 7406                    	JZ	short LOCAL_COMMIT
 17614                                  
 17615                                  ;IF NOT Installed
 17616                                  ;	transfer NET_COMMIT
 17617                                  ;ELSE
 17618                                  	;mov	ax,1107h
 17619 00003BD3 B80711                  	MOV	AX,(MultNET<<8)|7
 17620 00003BD6 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - COMMIT REMOTE FILE
 17621                                  			; ES:DI -> SFT
 17622                                  			; SFT DPB field -> DPB of drive containing file
 17623                                  			; Return: CF set on error, AX = DOS error code
 17624                                  			; CF clear if successful
 17625 00003BD8 C3                      	retn
 17626                                  ;ENDIF
 17627                                  
 17628                                  ;
 17629                                  ; Perform local commit operation by doing a close but not releaseing the SFT.
 17630                                  ; There are three ways we can do this.	One is to enter a critical section to
 17631                                  ; protect a potential free.  The second is to increment the ref count to mask
 17632                                  ; the close decrementing.
 17633                                  ;
 17634                                  ; The proper way is to let the caller's of close decide if a decrement should
 17635                                  ; be done.  We do this by providing another entry into close after the
 17636                                  ; decrement and after the share information release.
 17637                                  ;
 17638                                  LOCAL_COMMIT:
 17639 00003BD9 E890E4                  	call	EcritDisk
 17640                                  	; MSDOS6.0
 17641                                  	;call	EcritDisk	;PTM.
 17642 00003BDC E80700                  	call	SetSFTTimes
 17643 00003BDF B8FFFF                  	MOV	AX,-1
 17644 00003BE2 E8FFFE                  	call	CloseEntry
 17645                                  	; MSDOS 6.0
 17646                                  	;PUSHF			;PTM.				;AN000;
 17647                                  	;call	DEV_OPEN_SFT	;PTM.  increment device count	;AN000;
 17648                                  	;POPF			;PTM.				;AN000;
 17649                                  	;call	LcritDisk	;PTM.				;AN000;
 17650                                  localcommit_retn:
 17651 00003BE5 C3                      	retn
 17652                                  
 17653                                  ;Break	<SetSFTTimes - signal a change in the times for an SFT>
 17654                                  ;----------------------------------------------------------------------------
 17655                                  ;
 17656                                  ; Procedure Name : SetSFTTimes
 17657                                  ;
 17658                                  ;   SetSFTTimes - Examine the flags for a SFT and set the time appropriately.
 17659                                  ;   Reflect these times in other SFT's for the same file.
 17660                                  ;
 17661                                  ;   Inputs:	ES:DI point to SFT
 17662                                  ;		BX = sf_flags set apprpriately
 17663                                  ;   Outputs:	Set sft times to current time iff File & dirty & !nodate
 17664                                  ;   Registers modified: All except ES:DI, BX, AX
 17665                                  ;
 17666                                  ;----------------------------------------------------------------------------
 17667                                  
 17668                                  SetSFTTimes:
 17669                                  ;	File clean or device does not get stamped nor disk looked at.
 17670                                  	
 17671                                  	;test	bx,0C0h
 17672 00003BE6 F7C3C000                	TEST	BX,devid_file_clean+devid_device
 17673                                  	;retnz				; clean or device => no timestamp
 17674 00003BEA 75F9                    	jnz	short localcommit_retn
 17675                                  
 17676                                  ;	file and dirty. See if date is good
 17677                                  
 17678                                  	;test	bx,4000h
 17679 00003BEC F7C30040                	TEST	BX,sf_close_nodate
 17680                                  	;retnz				; nodate => no timestamp
 17681 00003BF0 75F3                    	jnz	short localcommit_retn
 17682                                  
 17683 00003BF2 50                      	push	ax
 17684 00003BF3 53                      	push	bx
 17685 00003BF4 E8C2DC                  	call	DATE16			; Date/Time to AX/DX
 17686                                  	;mov	[es:di+0Fh],ax
 17687 00003BF7 2689450F                	MOV	[ES:DI+SF_ENTRY.sf_date],AX
 17688                                  	;mov	[es:di+0Dh],dx
 17689 00003BFB 2689550D                	MOV	[ES:DI+SF_ENTRY.sf_time],DX
 17690 00003BFF 31C0                    	XOR	AX,AX
 17691                                  ;if installed
 17692                                  	;call	JShare + 14 * 4
 17693 00003C01 FF1E[9400]              	call	far [JShare+(14*4)]	; 14 = ShSU
 17694                                  ;else
 17695                                  ;	call	ShSU
 17696                                  ;endif
 17697 00003C05 5B                      	pop	bx
 17698 00003C06 58                      	pop	ax
 17699 00003C07 C3                      	retn
 17700                                  
 17701                                  ;============================================================================
 17702                                  ; DIRCALL.ASM, MSDOS 6.0, 1991
 17703                                  ;============================================================================
 17704                                  ; 23/07/2018 - Retro DOS v3.0
 17705                                  
 17706                                  ;TITLE DIRCALL - Directory manipulation internal calls
 17707                                  ;NAME  DIRCALL
 17708                                  
 17709                                  ;**	Low level directory manipulation routines for making removing and
 17710                                  ;	  verifying local or NET directories
 17711                                  ;
 17712                                  ;	DOS_MKDIR
 17713                                  ;	DOS_CHDIR
 17714                                  ;	DOS_RMDIR
 17715                                  ;
 17716                                  ;	Modification history:
 17717                                  ;
 17718                                  ;		Created: ARR 30 March 1983
 17719                                  
 17720                                  ;BREAK <DOS_MkDir - Make a directory entry>
 17721                                  ;---------------------------------------------------------------------------
 17722                                  ;
 17723                                  ; Procedure Name : DOS_MkDir
 17724                                  ;
 17725                                  ; Inputs:
 17726                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 17727                                  ;		terminated)
 17728                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 17729                                  ;		( = -1 if current dir not involved, else
 17730                                  ;		 Points to first char after last "/" of current dir part)
 17731                                  ;	[THISCDS] Points to CDS being used
 17732                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 17733                                  ; Function:
 17734                                  ;	Make a new directory
 17735                                  ; Returns:
 17736                                  ;	Carry Clear
 17737                                  ;		No error
 17738                                  ;	Carry Set
 17739                                  ;	    AX is error code
 17740                                  ;		error_path_not_found
 17741                                  ;			Bad path (not in curr dir part if present)
 17742                                  ;		error_bad_curr_dir
 17743                                  ;			Bad path in current directory part of path
 17744                                  ;		error_access_denied
 17745                                  ;			Already exists, device name
 17746                                  ; DS preserved, Others destroyed
 17747                                  ;---------------------------------------------------------------------------
 17748                                  
 17749                                  ;hkn; called from path.asm. DS already set up.
 17750                                  
 17751                                  DOS_MKDIR:
 17752 00003C08 E8C3E3                  	call	TestNet
 17753 00003C0B 7314                    	JNC	short LOCAL_MKDIR
 17754                                  
 17755                                  ;IF NOT Installed
 17756                                  ;	transfer NET_MKDIR
 17757                                  ;ELSE
 17758                                  	;mov	ax,1103h
 17759 00003C0D B80311                  	MOV	AX,(MultNET<<8)|3
 17760 00003C10 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - MAKE REMOTE DIRECTORY
 17761                                  			; SS = DOS CS
 17762                                  			; SDA first filename pointer -> fully-qualified directory name
 17763                                  			; SDA CDS pointer -> current directory
 17764                                  			; Return: CF set on error, AX = DOS error code
 17765                                  			; CF clear if successful
 17766 00003C12 C3                      	retn
 17767                                  ;ENDIF
 17768                                  
 17769                                  NODEACCERRJ:
 17770                                  	;mov	ax,5
 17771 00003C13 B80500                  	MOV	AX,error_access_denied
 17772                                  _BadRet:
 17773 00003C16 F9                      	STC
 17774 00003C17 E85AE4                  	call	LcritDisk
 17775 00003C1A C3                      	retn
 17776                                  
 17777                                  PATHNFJ:
 17778 00003C1B E856E4                  	call	LcritDisk
 17779 00003C1E E920FB                  	jmp	SET_MKND_ERR	; Map the MakeNode error and return
 17780                                  
 17781                                  LOCAL_MKDIR:
 17782 00003C21 E848E4                  	call	EcritDisk
 17783                                  ;
 17784                                  ; MakeNode requires an SFT to fiddle with. We Use a temp spot (RENBUF)
 17785                                  ;
 17786 00003C24 8C16[3805]              	MOV	[THISSFT+2],SS
 17787                                  
 17788                                  ;hkn; DOSDATA
 17789 00003C28 C706[3605][E003]        	MOV	WORD [THISSFT],RENBUF
 17790                                  ;
 17791                                  ;  NOTE: Need WORD PTR because MASM takes type of
 17792                                  ;   TempSFT (byte) instead of type of sf_mft (word).
 17793                                  ;
 17794 00003C2E C706[1304]0000          	MOV	WORD [RENBUF+SF_ENTRY.sf_MFT],0
 17795                                  				; make sure SHARER won't complain.
 17796                                  	;mov	al,10h
 17797 00003C34 B010                    	MOV	AL,attr_directory
 17798 00003C36 E8F313                  	call	MakeNode
 17799 00003C39 72E0                    	JC	short PATHNFJ
 17800 00003C3B 83F803                  	CMP	AX,3
 17801 00003C3E 74D3                    	JZ	short NODEACCERRJ ; Can't make a device into a directory
 17802 00003C40 C42E[2405]              	LES	BP,[THISDPB]	; Makenode zaps this
 17803 00003C44 C53E[7405]              	LDS	DI,[CURBUF]
 17804 00003C48 29FE                    	SUB	SI,DI
 17805 00003C4A 56                      	PUSH	SI		; Pointer to dir_first
 17806                                  	; MSDOS 6.0
 17807                                  	;PUSH	WORD [DI+BUFFINFO.buf_sector+2]	;F.C. >32mb
 17808                                  	; MSDOS 3.3 (& MSDOS 6.0)
 17809                                  	;push	word [di+6]
 17810 00003C4B FF7506                  	PUSH	WORD [DI+BUFFINFO.buf_sector] ; Sector of new node
 17811 00003C4E 16                      	push	ss
 17812 00003C4F 1F                      	pop	ds
 17813 00003C50 FF36[5805]              	PUSH	word [DIRSTART]	; Parent for .. entry
 17814 00003C54 31C0                    	XOR	AX,AX
 17815 00003C56 A3[5805]                	MOV	[DIRSTART],AX	; Null directory
 17816 00003C59 E81413                  	call	NEWDIR
 17817 00003C5C 7260                    	JC	short NODEEXISTSPOPDEL ; No room
 17818 00003C5E E8510B                  	call	GETENT		; First entry
 17819 00003C61 725B                    	JC	short NODEEXISTSPOPDEL ; Screw up
 17820 00003C63 C43E[7405]              	LES	DI,[CURBUF]
 17821                                  
 17822                                  	; MSDOS 6.0
 17823                                  	;TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 17824                                  	;			 ;LB. if already dirty		    ;AN000;
 17825                                  	;JNZ	short yesdirty_	 ;LB.   don't increment dirty count ;AN000;
 17826                                  	;call	INC_DIRTY_COUNT  ;LB.				    ;AN000;
 17827                                  	
 17828                                  	; MSDOS 3.3 (& MSDOS 6.0)
 17829                                  	;or	byte [es:di+5],40h
 17830 00003C67 26804D0540              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 17831                                  ;yesdirty_:
 17832                                  	;add	di,16
 17833 00003C6C 83C710                  	ADD	DI,BUFINSIZ	; Point at buffer
 17834 00003C6F B82E20                  	MOV	AX,202EH	; ". "
 17835 00003C72 8B16[5805]              	MOV	DX,[DIRSTART]	; Point at itself
 17836 00003C76 E88F13                  	call	SETDOTENT
 17837 00003C79 B82E2E                  	MOV	AX,2E2EH	; ".."
 17838 00003C7C 5A                      	POP	DX		; Parent
 17839 00003C7D E88813                  	call	SETDOTENT
 17840 00003C80 C42E[2405]              	LES	BP,[THISDPB]
 17841                                  	;mov	byte [ALLOWED],18h
 17842 00003C84 C606[F702]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 17843 00003C89 5A                      	POP	DX		; Entry sector
 17844                                  	; MSDOS 6.0
 17845                                  	;POP	word [HIGH_SECTOR] ;F.C. >32mb
 17846                                  
 17847 00003C8A 30C0                    	XOR	AL,AL		; Pre read
 17848 00003C8C E8F621                  	call	GETBUFFR
 17849 00003C8F 7256                    	JC	short NODEEXISTSP
 17850 00003C91 8B16[5805]              	MOV	DX,[DIRSTART]
 17851 00003C95 C53E[7405]              	LDS	DI,[CURBUF]
 17852                                  	;or	byte [di+5],4
 17853 00003C99 804D0504                	OR	byte [DI+BUFFINFO.buf_flags],buf_isDIR
 17854 00003C9D 5E                      	POP	SI		; dir_first pointer
 17855 00003C9E 01FE                    	ADD	SI,DI
 17856 00003CA0 8914                    	MOV	[SI],DX
 17857 00003CA2 31D2                    	XOR	DX,DX
 17858 00003CA4 895402                  	MOV	[SI+2],DX	; Zero size
 17859 00003CA7 895404                  	MOV	[SI+4],DX
 17860                                  DIRUP:
 17861                                  	; MSDOS 6.0
 17862                                  	;TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty  
 17863                                  	;			 ;LB. if already dirty 		   ;AN000;
 17864                                  	;JNZ	short yesdirty2	 ;LB.  don't increment dirty count ;AN000;
 17865                                  	;call	INC_DIRTY_COUNT  ;LB.				   ;AN000;
 17866                                  	
 17867                                  	; MSDOS 3.3 (& MSDOS 6.0)
 17868                                  	;or	byte [di+5],40h
 17869 00003CAA 804D0540                	OR	byte [DI+BUFFINFO.buf_flags],buf_dirty	; Dirty buffer
 17870                                  ;yesdirty2:
 17871 00003CAE 16                      	push	ss
 17872 00003CAF 1F                      	pop	ds
 17873 00003CB0 268A4600                	mov	al,[es:bp]
 17874                                  	; 18/05/2019
 17875                                  	;MOV	AL,[ES:BP+DPB.DRIVE]  ; mov al,[es:bp+0]
 17876 00003CB4 E87622                  	call	FLUSHBUF
 17877                                  	;mov	ax,5
 17878 00003CB7 B80500                  	MOV	AX,error_access_denied
 17879 00003CBA E8B7E3                  	call	LcritDisk
 17880 00003CBD C3                      	retn
 17881                                  
 17882                                  NODEEXISTSPOPDEL:
 17883 00003CBE 5A                      	POP	DX		; Parent
 17884 00003CBF 5A                      	POP	DX		; Entry sector
 17885                                  	; MSDOS 6.0 
 17886                                  	;POP	word [HIGH_SECTOR] ; F.C. >32mb
 17887 00003CC0 C42E[2405]              	LES	BP,[THISDPB]
 17888                                  	;mov	byte [ALLOWED],18h
 17889 00003CC4 C606[F702]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 17890 00003CC9 30C0                    	XOR	AL,AL		; Pre read
 17891 00003CCB E8B721                  	call	GETBUFFR
 17892 00003CCE 7217                    	JC	short NODEEXISTSP
 17893 00003CD0 C53E[7405]              	LDS	DI,[CURBUF]
 17894                                  	;or	byte [di+5],4
 17895 00003CD4 804D0504                	OR	byte [DI+BUFFINFO.buf_flags],buf_isDIR
 17896 00003CD8 5E                      	POP	SI		; dir_first pointer
 17897 00003CD9 01FE                    	ADD	SI,DI
 17898                                  	;sub	si,1Ah ; 26
 17899 00003CDB 83EE1A                  	SUB	SI,dir_entry.dir_first	;Point back to start of dir entry
 17900 00003CDE C604E5                  	MOV	BYTE [SI],0E5H	; Free the entry
 17901 00003CE1 E8C6FF                  	CALL	DIRUP		; Error doesn't matter since erroring anyway
 17902                                  NODEEXISTS:
 17903 00003CE4 E92CFF                  	JMP	NODEACCERRJ ; 10/08/2018
 17904                                  
 17905                                  NODEEXISTSP:
 17906 00003CE7 5E                      	POP	SI		; Clean stack
 17907 00003CE8 EBFA                    	JMP	short NODEEXISTS
 17908                                  
 17909                                  ;BREAK <DOS_ChDir -- Verify a directory>
 17910                                  ;----------------------------------------------------------------------------
 17911                                  ;
 17912                                  ; Procedure Name : DOS_ChDir
 17913                                  ;
 17914                                  ; Inputs:
 17915                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 17916                                  ;		terminated)
 17917                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 17918                                  ;		( = -1 if current dir not involved, else
 17919                                  ;		 Points to first char after last "/" of current dir part)
 17920                                  ;	[THISCDS] Points to CDS being used May not be NUL
 17921                                  ; Function:
 17922                                  ;	Validate the path for potential new current directory
 17923                                  ; Returns:
 17924                                  ;	NOTE:
 17925                                  ;	    [SATTRIB] is modified by this call
 17926                                  ;	Carry Clear
 17927                                  ;	    CX is cluster number of the DIR, LOCAL CDS ONLY
 17928                                  ;		Caller must NOT set ID fields on a NET CDS.
 17929                                  ;	Carry Set
 17930                                  ;	    AX is error code
 17931                                  ;		error_path_not_found
 17932                                  ;			Bad path
 17933                                  ;		error_access_denied
 17934                                  ;			device or file name
 17935                                  ; DS preserved, Others destroyed
 17936                                  ;----------------------------------------------------------------------------
 17937                                  
 17938                                  ;hkn; called from path.asm and dir2.asm. DS already set up.
 17939                                  
 17940                                  DOS_CHDIR:
 17941 00003CEA E8E1E2                  	call	TestNet
 17942 00003CED 7306                    	JNC	short LOCAL_CHDIR
 17943                                  
 17944                                  ;IF NOT Installed
 17945                                  ;	transfer NET_CHDIR
 17946                                  ;ELSE
 17947                                  	;mov	ax,1105h
 17948 00003CEF B80511                  	MOV	AX,(MultNET<<8)|5
 17949 00003CF2 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - CHDIR
 17950                                  			; SS = DOS CS
 17951                                  			; SDA first filename pointer -> fully-qualified directory name
 17952                                  			; SDA CDS pointer -> current directory
 17953                                  			; Return: CF set on error, AX = DOS error code
 17954                                  			; CF clear if successful
 17955 00003CF4 C3                      	retn
 17956                                  ;ENDIF
 17957                                  
 17958                                  LOCAL_CHDIR:
 17959 00003CF5 E874E3                  	call	EcritDisk
 17960                                  	; MSDOS 6.0
 17961                                  	;TEST	word [ES:DI+curdir.flags],curdir_splice ;PTM.
 17962                                  	;JZ	short nojoin			   ;PTM.
 17963                                  	;MOV	word [ES:DI+curdir.ID],0FFFFH	   ;PTM.
 17964                                  ;nojoin:
 17965                                  	; MSDOS 3.3 (& MSDOS 6.0)
 17966 00003CF8 C606[F802]00            	MOV	byte [NoSetDir],0 ; FALSE
 17967                                  	;mov	byte [SATTRIB],16h
 17968 00003CFD C606[0805]16            	MOV	byte [SATTRIB],attr_directory+attr_system+attr_hidden
 17969                                  				; Dir calls can find these
 17970                                  ; DOS 3.3  6/24/86 FastOpen
 17971 00003D02 800E[6E0F]01            	OR	byte [FastOpenFlg],FastOpen_Set	   ; set fastopen flag
 17972 00003D07 E82B0B                  	call	GETPATH
 17973                                  	;PUSHF							;AN000;
 17974                                  	;AND	byte [FastOpenFlg],Fast_yes	   ; clear it all ;AC000;
 17975                                  	;POPF							;AN000;
 17976                                  ; DOS 3.3  6/24/86 FastOpen
 17977                                  
 17978                                  	; MSDOS 3.3
 17979 00003D0A C606[6E0F]00            	mov	byte [FastOpenFlg],0
 17980                                  	;mov	ax,3
 17981 00003D0F B80300                  	MOV	AX,error_path_not_found
 17982 00003D12 7207                    	JC	short ChDirDone
 17983 00003D14 753A                    	JNZ	short NOTDIRPATH	; Path not a DIR
 17984 00003D16 8B0E[5805]              	MOV	CX,[DIRSTART]		; Get cluster number
 17985 00003D1A F8                      	CLC
 17986                                  ChDirDone:
 17987 00003D1B E856E3                  	call	LcritDisk
 17988 00003D1E C3                      	retn
 17989                                  
 17990                                  ;BREAK <DOS_RmDir -- Remove a directory>
 17991                                  ;----------------------------------------------------------------------------
 17992                                  ;
 17993                                  ; Procedure Name : DOS_RmDir
 17994                                  ;
 17995                                  ; Inputs:
 17996                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 17997                                  ;		terminated)
 17998                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 17999                                  ;		( = -1 if current dir not involved, else
 18000                                  ;		 Points to first char after last "/" of current dir part)
 18001                                  ;	[THISCDS] Points to CDS being used
 18002                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 18003                                  ; Function:
 18004                                  ;	Remove a directory
 18005                                  ;	NOTE: Attempt to remove current directory must be detected by caller
 18006                                  ; Returns:
 18007                                  ;	NOTE:
 18008                                  ;	    [SATTRIB] is modified by this call
 18009                                  ;	Carry Clear
 18010                                  ;		No error
 18011                                  ;	Carry Set
 18012                                  ;	    AX is error code
 18013                                  ;		error_path_not_found
 18014                                  ;			Bad path (not in curr dir part if present)
 18015                                  ;		error_bad_curr_dir
 18016                                  ;			Bad path in current directory part of path
 18017                                  ;		error_access_denied
 18018                                  ;			device or file name, root directory
 18019                                  ;			Bad directory ('.' '..' messed up)
 18020                                  ; DS preserved, Others destroyed
 18021                                  ;----------------------------------------------------------------------------
 18022                                  
 18023                                  ;hkn; called from path.asm. DS already set up.
 18024                                  
 18025                                  DOS_RMDIR:
 18026 00003D1F E8ACE2                  	call	TestNet
 18027 00003D22 7306                    	JNC	short LOCAL_RMDIR
 18028                                  
 18029                                  ;IF NOT Installed
 18030                                  ;	transfer NET_RMDIR
 18031                                  ;ELSE
 18032                                  	;mov	ax,1101h
 18033 00003D24 B80111                  	MOV	AX,(MultNET<<8)|1
 18034 00003D27 CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - REMOVE REMOTE DIRECTORY
 18035                                  			; SS = DOS CS
 18036                                  			; SDA first filename pointer -> fully-qualified directory name
 18037                                  			; SDA CDS pointer -> current directory
 18038                                  			; Return: CF set on error, AX = DOS error code
 18039                                  			; CF clear if successful
 18040 00003D29 C3                      	retn
 18041                                  ;ENDIF
 18042                                  
 18043                                  LOCAL_RMDIR:
 18044 00003D2A E83FE3                  	call	EcritDisk
 18045 00003D2D C606[F802]00            	MOV	byte [NoSetDir],0
 18046                                  	;mov	byte [SATTRIB],16h
 18047 00003D32 C606[0805]16            	MOV	byte [SATTRIB],attr_directory+attr_system+attr_hidden
 18048                                  					; Dir calls can find these
 18049 00003D37 E8FB0A                  	call	GETPATH
 18050 00003D3A 720C                    	JC	short NOPATH		; Path not found
 18051 00003D3C 7512                    	JNZ	short NOTDIRPATH	; Path not a DIR
 18052 00003D3E 8B3E[5805]              	MOV	DI,[DIRSTART]
 18053 00003D42 09FF                    	OR	DI,DI			; Root ?
 18054 00003D44 750D                    	JNZ	short rmdir_get_buf	; No
 18055 00003D46 EB08                    	JMP	SHORT NOTDIRPATH
 18056                                  
 18057                                  NOPATH:
 18058                                  	;mov	ax,3
 18059 00003D48 B80300                  	MOV	AX,error_path_not_found
 18060 00003D4B E9C8FE                  	JMP	_BadRet
 18061                                  
 18062                                  NOTDIRPATHPOP:
 18063                                  	; MSDOS 6.0
 18064                                  	;POP	AX			  ;F.C. >32mb
 18065 00003D4E 58                      	POP	AX
 18066                                  NOTDIRPATHPOP2:
 18067 00003D4F 58                      	POP	AX
 18068                                  NOTDIRPATH:
 18069 00003D50 E9C0FE                  	JMP	NODEACCERRJ
 18070                                  
 18071                                  rmdir_get_buf:
 18072 00003D53 C53E[7405]              	LDS	DI,[CURBUF]
 18073 00003D57 29FB                    	SUB	BX,DI		; Compute true offset
 18074 00003D59 53                      	PUSH	BX		; Save entry pointer
 18075                                  	
 18076                                  	; MSDOS 6.0
 18077                                  	;PUSH	WORD [DI+BUFFINFO.buf_sector+2] ;F.C. >32mb
 18078                                  	
 18079                                  	; MSDOS 3.3 (& MSDOS 6.0)
 18080                                  	;push	word [di+6]
 18081 00003D5A FF7506                  	PUSH	WORD [DI+BUFFINFO.buf_sector] ; Save sector number
 18082                                  
 18083                                  ;hkn; SS is DOSDATA
 18084                                  	;context DS
 18085 00003D5D 16                      	push	ss
 18086 00003D5E 1F                      	pop	ds
 18087                                  	;context ES
 18088 00003D5F 16                      	push	ss
 18089 00003D60 07                      	pop	es
 18090                                  
 18091                                  ;hkn; NAME1 is in DOSDATA
 18092 00003D61 BF[E604]                	MOV	DI,NAME1
 18093 00003D64 B03F                    	MOV	AL,'?'
 18094 00003D66 B90B00                  	MOV	CX,11
 18095 00003D69 F3AA                    	REP	STOSB
 18096 00003D6B 30C0                    	XOR	AL,AL
 18097 00003D6D AA                      	STOSB				; Nul terminate it
 18098 00003D6E E84E0D                  	call	STARTSRCH		; Set search
 18099 00003D71 E83B0A                  	call	GETENTRY		; Get start of directory
 18100 00003D74 72D8                    	JC	short NOTDIRPATHPOP	; Screw up
 18101 00003D76 8E1E[7605]              	MOV	DS,[CURBUF+2]
 18102 00003D7A 89DE                    	MOV	SI,BX
 18103 00003D7C AD                      	LODSW
 18104                                  	;CMP	AX,(' ' SHL 8) OR '.'   ; First entry '.'?
 18105 00003D7D 3D2E20                  	cmp	ax,202Eh ; ". "
 18106 00003D80 75CC                    	JNZ	short NOTDIRPATHPOP	; Nope
 18107                                  	;add     si,30
 18108 00003D82 83C61E                  	ADD	SI,dir_entry.size-2 ; Next entry
 18109 00003D85 AD                      	LODSW
 18110                                  	;CMP	AX,('.' SHL 8) OR '.'   ; Second entry '..'?
 18111                                  	;cmp	ax, '..'
 18112 00003D86 3D2E2E                  	cmp	ax,2E2Eh
 18113 00003D89 75C3                    	JNZ	short NOTDIRPATHPOP	; Nope
 18114                                  
 18115                                  ;hkn; SS is DOSDATA
 18116                                  	;context DS
 18117 00003D8B 16                      	push	ss
 18118 00003D8C 1F                      	pop	ds
 18119 00003D8D C706[F402]0200          	MOV	word [LASTENT],2	; Skip . and ..
 18120 00003D93 E8190A                  	call	GETENTRY		; Get next entry
 18121 00003D96 72B6                    	JC	short NOTDIRPATHPOP	; Screw up
 18122                                  	;mov	byte [ATTRIB],16h
 18123 00003D98 C606[0605]16            	MOV	byte [ATTRIB],attr_directory+attr_hidden+attr_system
 18124 00003D9D E81C09                  	call	SRCH			; Do a search
 18125 00003DA0 73AC                    	JNC	short NOTDIRPATHPOP	; Found another entry!
 18126 00003DA2 803E[F602]00            	CMP	byte [FAILERR],0
 18127 00003DA7 75A5                    	JNZ	short NOTDIRPATHPOP	; Failure of search due to I 24 FAIL
 18128 00003DA9 C42E[2405]              	LES	BP,[THISDPB]
 18129 00003DAD 8B1E[5805]              	MOV	BX,[DIRSTART]
 18130 00003DB1 E83517                  	call	RELEASE 		; Release data in sub dir
 18131 00003DB4 7298                    	JC	short NOTDIRPATHPOP	; Screw up
 18132 00003DB6 5A                      	POP	DX			; Sector # of entry
 18133                                  	;POP	word [HIGH_SECTOR]	; F.C. >32mb
 18134                                  	;mov	byte [ALLOWED],18h
 18135 00003DB7 C606[F702]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 18136 00003DBC 30C0                    	XOR	AL,AL			; Pre read
 18137 00003DBE E8C420                  	call	GETBUFFR		; Get sector back
 18138 00003DC1 728C                    	JC	short NOTDIRPATHPOP2	; Screw up
 18139 00003DC3 C53E[7405]              	LDS	DI,[CURBUF]
 18140                                  	;or	byte [di+5],4
 18141 00003DC7 804D0504                	OR	byte [DI+BUFFINFO.buf_flags],buf_isDIR
 18142 00003DCB 5B                      	POP	BX			; Pointer to start of entry
 18143 00003DCC 01FB                    	ADD	BX,DI			; Corrected
 18144 00003DCE C607E5                  	MOV	BYTE [BX],0E5H		; Free the entry
 18145                                  
 18146                                  ;DOS 3.3 FastOpen  6/16/86  F.C.
 18147 00003DD1 1E                      	PUSH	DS
 18148                                  
 18149                                  ;hkn; SS is DOSDATA
 18150                                  	;context DS
 18151 00003DD2 16                      	push	ss
 18152 00003DD3 1F                      	pop	ds
 18153                                  
 18154                                  	; MSDOS 6.0
 18155                                  	;call	FastOpen_Delete 	; call fastopen to delete an entry
 18156                                  
 18157                                  	; MSDOS 3.3
 18158                                  _FastOpen_Delete:
 18159 00003DD4 50                      	push	ax
 18160 00003DD5 8B36[4A05]              	mov	si,[WFP_START]
 18161 00003DD9 BB[430F]                	mov	bx,FastTable
 18162                                  	;mov	al,3  ; FONC_delete
 18163 00003DDC B003                    	mov	al,FONC_delete
 18164 00003DDE FF5F02                  	call	far [BX+2]  ; FastTable+2
 18165 00003DE1 58                      	pop	ax
 18166                                  
 18167 00003DE2 1F                      	POP	DS
 18168                                  ;DOS 3.3 FastOpen  6/16/86  F.C.
 18169                                  
 18170 00003DE3 E9C4FE                  	JMP	DIRUP			; In MKDIR, dirty buffer and flush
 18171                                  
 18172                                  ;============================================================================
 18173                                  ; DISK.ASM, MSDOS 6.0, 1991
 18174                                  ;============================================================================
 18175                                  ; 23/07/2018 - Retro DOS v3.0 
 18176                                  
 18177                                  ;	TITLE	DISK - Disk utility routines
 18178                                  ;	NAME	Disk
 18179                                  
 18180                                  ;**	Low level Read and write routines for local SFT I/O on files and devs
 18181                                  ;
 18182                                  ;	SWAPCON
 18183                                  ;	SWAPBACK
 18184                                  ;	DOS_READ
 18185                                  ;	DOS_WRITE
 18186                                  ;	get_io_sft
 18187                                  ;	DirRead
 18188                                  ;	FIRSTCLUSTER
 18189                                  ;	SET_BUF_AS_DIR
 18190                                  ;	FATSecRd
 18191                                  ;	DREAD
 18192                                  ;	CHECK_WRITE_LOCK
 18193                                  ;	CHECK_READ_LOCK
 18194                                  ;
 18195                                  ;	Revision history:
 18196                                  ;
 18197                                  ;		A000   version 4.00  Jan. 1988
 18198                                  ;
 18199                                  ;----------------------------------------------------------------------------
 18200                                  ;
 18201                                  ; M065 : B#5276. On raw read/write of a block of characters if a critical
 18202                                  ;		error happens, DOS retries the entire block assuming that
 18203                                  ;		zero characters were transferred. Modified the code to take
 18204                                  ;		into account the number of characters transfered before
 18205                                  ;		retrying the operation.
 18206                                  ;
 18207                                  ;----------------------------------------------------------------------------
 18208                                  ;
 18209                                  
 18210                                  ;Installed = TRUE
 18211                                  
 18212                                  ;Break	<SwapCon, Swap Back - Old-style I/O to files>
 18213                                  
 18214                                  ; **** Drivers for file input from devices ****
 18215                                  ;----------------------------------------------------------------------------
 18216                                  ;   Indicate that there is no more I/O occurring through another SFT outside
 18217                                  ;   of handles 0 and 1
 18218                                  ;
 18219                                  ;   Inputs:	DS is DOSDATA
 18220                                  ;   Outputs:	CONSWAP is set to false.
 18221                                  ;   Registers modified: none
 18222                                  ;----------------------------------------------------------------------------
 18223                                  
 18224                                  ; IBMDOS.COM (MSDOS 3.3) - Offset 3CF8h
 18225                                  
 18226                                  SWAPBACK:
 18227 00003DE6 C606[0303]00            	MOV	BYTE [CONSWAP],0	; signal no conswaps
 18228 00003DEB C3                      	retn
 18229                                  
 18230                                  ;----------------------------------------------------------------------------
 18231                                  ;
 18232                                  ; Procedure Name : SWAPCON
 18233                                  ;
 18234                                  ;   Copy ThisSFT to CONSFT for use by the 1-12 primitives.
 18235                                  ;
 18236                                  ;   Inputs:	ThisSFT as the sft of the desired file
 18237                                  ;		DS is DOSDATA
 18238                                  ;   Outputs:	CONSWAP is set.  CONSFT = ThisSFT.
 18239                                  ;   Registers modified: none
 18240                                  ;--------------------------------------------------------------------------
 18241                                  
 18242                                  SWAPCON:
 18243                                  	; MSDOS 3.3
 18244                                  	;push	es
 18245                                  	;push	di
 18246                                  	;mov	byte [CONSWAP],1
 18247                                  	;les	di,[THISSFT]
 18248                                  	;mov	word [CONSFT],di
 18249                                  	;mov	word [CONSFT+2],es
 18250                                  	;pop	di
 18251                                  	;pop	es
 18252                                  	;retn
 18253                                  
 18254                                  	; MSDOS 6.0
 18255 00003DEC C606[0303]01            	mov	byte [CONSWAP],1	; ConSwap = TRUE
 18256 00003DF1 50                      	push	ax
 18257 00003DF2 A1[3605]                	mov	ax,[THISSFT]
 18258 00003DF5 A3[7805]                	mov	[CONSFT],ax
 18259 00003DF8 A1[3805]                	mov	ax,[THISSFT+2]
 18260 00003DFB A3[7A05]                	mov	[CONSFT+2],ax
 18261 00003DFE 58                      	pop	ax
 18262 00003DFF C3                      	retn
 18263                                  
 18264                                  
 18265                                  ;Break	<DOS_READ -- MAIN READ ROUTINE AND DEVICE IN ROUTINES>
 18266                                  ;-----------------------------------------------------------------------------
 18267                                  ;
 18268                                  ; Inputs:
 18269                                  ;	ThisSFT set to the SFT for the file being used
 18270                                  ;	[DMAADD] contains transfer address
 18271                                  ;	CX = No. of bytes to read
 18272                                  ;	DS = DOSDATA
 18273                                  ; Function:
 18274                                  ;	Perform read operation
 18275                                  ; Outputs:
 18276                                  ;    Carry clear
 18277                                  ;	SFT Position and cluster pointers updated
 18278                                  ;	CX = No. of bytes read
 18279                                  ;	ES:DI point to SFT
 18280                                  ;    Carry set
 18281                                  ;	AX is error code
 18282                                  ;	CX = 0
 18283                                  ;	ES:DI point to SFT
 18284                                  ; DS preserved, all other registers destroyed
 18285                                  ;
 18286                                  ;-----------------------------------------------------------------------------
 18287                                  
 18288                                  ;hkn; called from fcbio.asm, handle.asm and dev.asm. DS is be set up.
 18289                                  
 18290                                  DOS_READ:
 18291 00003E00 C43E[3605]              	LES	DI,[THISSFT]
 18292                                  
 18293                                  ; Verify that the sft has been opened in a mode that allows reading.
 18294                                  
 18295                                  	;mov	al,[es:di+2]
 18296 00003E04 268A4502                	MOV	AL,[ES:DI+SF_ENTRY.sf_mode]
 18297                                  	;and	al,0Fh
 18298 00003E08 240F                    	AND	AL,access_mask
 18299                                  	;cmp	al,1
 18300 00003E0A 3C01                    	CMP	AL,open_for_write
 18301 00003E0C 7503                    	JNE	short READ_NO_MODE		;Is read or both
 18302 00003E0E E94205                  	jmp	SET_ACC_ERR
 18303                                  
 18304                                  READ_NO_MODE:
 18305 00003E11 E81904                  	call	SETUP
 18306 00003E14 E30B                    	JCXZ	NoIORet 		; no bytes to read - fast return
 18307 00003E16 E8CAE1                  	call	IsSFTNet
 18308 00003E19 7408                    	JZ	short LOCAL_READ
 18309                                  
 18310                                  ;IF NOT Installed
 18311                                  ;	transfer NET_READ
 18312                                  ;ELSE
 18313                                  	;mov	ax,1108h
 18314 00003E1B B80811                  	MOV	AX,(MultNET<<8)|8
 18315 00003E1E CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - READ FROM REMOTE FILE
 18316                                  			; ES:DI -> SFT
 18317                                  			; SFT DPB field -> DPB of drive containing file
 18318                                  			; CX = number of bytes, SS = DOS CS, SDA DTA field -> user buffer
 18319                                  			; Return: CF set on error, CX = bytes read
 18320 00003E20 C3                      	retn
 18321                                  ;ENDIF
 18322                                  
 18323                                  ; The user ended up requesting 0 bytes of input.  We do nothing for this case
 18324                                  ; except return immediately.
 18325                                  
 18326                                  NoIORet:
 18327 00003E21 F8                      	CLC
 18328 00003E22 C3                      	retn
 18329                                  
 18330                                  LOCAL_READ:
 18331                                  	;test	word [es:di+5],80h
 18332 00003E23 26F745058000            	TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device  ; Check for named device I/O
 18333 00003E29 750F                    	JNZ	short READDEV
 18334                                  	;mov	byte [EXTERR_LOCUS],2
 18335 00003E2B C606[D102]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 18336 00003E30 E839E2                  	call	EcritDisk
 18337 00003E33 E8D804                  	call	DISKREAD
 18338                                  
 18339                                  critexit:
 18340 00003E36 E83BE2                  	call	LcritDisk
 18341 00003E39 C3                      	retn
 18342                                  
 18343                                  ; We are reading from a device. Examine the status of the device to see if we
 18344                                  ; can short-circuit the I/O. If the device in the EOF state or if it is the
 18345                                  ; null device, we can safely indicate no transfer.
 18346                                  
 18347                                  READDEV:
 18348                                  	;mov	byte [EXTERR_LOCUS],4
 18349 00003E3A C606[D102]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev
 18350                                  	;mov	bl,[es:di+5]
 18351 00003E3F 268A5D05                	MOV	BL,[ES:DI+SF_ENTRY.sf_flags]
 18352 00003E43 C43E[DA02]              	LES	DI,[DMAADD]
 18353                                  	;test	bl,40h
 18354 00003E47 F6C340                  	test	BL,devid_device_EOF	; End of file?
 18355 00003E4A 7407                    	JZ	short ENDRDDEVJ3
 18356                                  	;test	bl,4
 18357 00003E4C F6C304                  	test	BL,devid_device_null	; NUL device?
 18358 00003E4F 7405                    	JZ	short TESTRAW 		; NO
 18359 00003E51 30C0                    	XOR	AL,AL			; Indicate EOF by setting zero
 18360                                  ENDRDDEVJ3:
 18361 00003E53 E9BC00                  	JMP	ENDRDDEVJ2
 18362                                  
 18363                                  ;
 18364                                  ; We need to hit the device.  Figure out if we do a raw read or we do the
 18365                                  ; bizarre std_con_string_input.
 18366                                  ;
 18367                                  TESTRAW:
 18368                                  	;test	bl,20h
 18369 00003E56 F6C320                  	test	BL,devid_device_raw	; Raw mode?
 18370 00003E59 7508                    	JNZ	short DVRDRAW 		; Yes, let the device do all local editing
 18371                                  	;test	bl,1
 18372 00003E5B F6C301                  	test	BL,devid_device_con_in	; Is it console device?
 18373 00003E5E 7447                    	JZ	short NOTRDCON
 18374 00003E60 E9E500                  	JMP	READCON
 18375                                  
 18376                                  DVRDRAW:
 18377 00003E63 06                      	PUSH	ES
 18378 00003E64 1F                      	POP	DS			; Xaddr to DS:DI
 18379                                  
 18380                                  	; MSDOS 6.0
 18381                                  ;SR;
 18382                                  ;Check for win386 presence -- if present, do polled read of characters
 18383                                  ;
 18384                                  	;test	byte [ss:IsWIN386],1
 18385                                  	;jz	short ReadRawRetry	;not present
 18386                                  	;test	bl,devid_device_con_in	;is it console device
 18387                                  	;jz	short ReadRawRetry	;no, do normal read
 18388                                  	;jmp	do_polling		;yes, do win386 polling loop
 18389                                  
 18390                                  ReadRawRetry:
 18391 00003E65 89FB                    	MOV	BX,DI			; DS:BX transfer addr
 18392 00003E67 31C0                    	XOR	AX,AX			; Media Byte, unit = 0
 18393 00003E69 89C2                    	MOV	DX,AX			; Start at 0
 18394 00003E6B E8B010                  	call	SETREAD
 18395 00003E6E 1E                      	PUSH	DS			; Save Seg part of Xaddr
 18396                                  
 18397                                  ;hkn; SS override
 18398 00003E6F 36C536[3605]            	LDS	SI,[SS:THISSFT]
 18399 00003E74 E88010                  	call	DEVIOCALL
 18400 00003E77 89FA                    	MOV	DX,DI			; DS:DX is preserved by INT 24
 18401 00003E79 B486                    	MOV	AH,86H			; Read error
 18402                                  
 18403                                  ;hkn; SS override
 18404 00003E7B 368B3E[0903]            	MOV	DI,[SS:DEVCALL_REQSTAT]
 18405                                  	; MSDOS 3.3
 18406                                  	;test	di,8000h
 18407                                  	;jz	short CRDROK
 18408                                  	; MSDOS 6.0
 18409 00003E80 09FF                    	or	di,di
 18410 00003E82 7919                    	jns	short CRDROK		; no errors
 18411                                  	; MSDOS 3.3 (& MSDOS 6.0)
 18412 00003E84 E8A319                  	call	CHARHARD
 18413 00003E87 89D7                    	MOV	DI,DX			; DS:DI is Xaddr
 18414                                  
 18415                                  	; MSDOS 6.0
 18416                                  	;add	di,[ss:callscnt]	; update ptr and count to reflect the	M065
 18417                                  	;sub	cx,[ss:callscnt]	; number of chars xferred		M065
 18418                                  
 18419                                  	; MSDOS 3.3 (& MSDOS 6.0)
 18420 00003E89 08C0                    	OR	AL,AL
 18421 00003E8B 7410                    	JZ	short CRDROK		; Ignore
 18422 00003E8D 3C03                    	CMP	AL,3
 18423 00003E8F 7403                    	JZ	short CRDFERR 		; fail.
 18424 00003E91 1F                      	POP	DS			; Recover saved seg part of Xaddr
 18425                                  	; 19/05/2019
 18426 00003E92 EBD1                    	JMP	short ReadRawRetry	; Retry
 18427                                  
 18428                                  ;
 18429                                  ; We have encountered a device-driver error.  We have informed the user of it
 18430                                  ; and he has said for us to fail the system call.
 18431                                  ;
 18432                                  CRDFERR:
 18433 00003E94 5F                      	POP	DI			; Clean stack
 18434                                  DEVIOFERR:
 18435                                  
 18436                                  ;hkn; SS override
 18437 00003E95 36C43E[3605]            	LES	DI,[SS:THISSFT]
 18438 00003E9A E9B404                  	jmp	SET_ACC_ERR_DS
 18439                                  
 18440                                  CRDROK:
 18441 00003E9D 5F                      	POP	DI			; Chuck saved seg of Xaddr
 18442 00003E9E 89D7                    	MOV	DI,DX
 18443                                  
 18444                                  ;hkn; SS override
 18445 00003EA0 36033E[1803]            	ADD	DI,[ss:CALLSCNT]	; Amount transferred
 18446 00003EA5 EBAC                    	JMP	SHORT ENDRDDEVJ3
 18447                                  
 18448                                  ; We are going to do a cooked read on some character device. There is a
 18449                                  ; problem here, what does the data look like? Is it a terminal device, line
 18450                                  ; CR line CR line CR, or is it file data, line CR LF line CR LF? Does it have
 18451                                  ; a ^Z at the end which is data, or is the ^Z not data?  In any event we're
 18452                                  ; going to do this: Read in pieces up to CR (CRs included in data) or ^z (^z
 18453                                  ; included in data). this "simulates" the way con works in cooked mode
 18454                                  ; reading one line at a time. With file data, however, the lines will look
 18455                                  ; like, LF line CR. This is a little weird.
 18456                                  
 18457                                  NOTRDCON:
 18458 00003EA7 8CC0                    	MOV	AX,ES
 18459 00003EA9 8ED8                    	MOV	DS,AX
 18460 00003EAB 89FB                    	MOV	BX,DI
 18461 00003EAD 31D2                    	XOR	DX,DX
 18462 00003EAF 89D0                    	MOV	AX,DX
 18463 00003EB1 51                      	PUSH	CX
 18464 00003EB2 B90100                  	MOV	CX,1
 18465 00003EB5 E86610                  	call	SETREAD
 18466 00003EB8 59                      	POP	CX
 18467                                  
 18468                                  ;hkn; SS override
 18469 00003EB9 36C536[3605]            	LDS	SI,[SS:THISSFT]
 18470                                  	;lds	si,[si+7]
 18471 00003EBE C57407                  	LDS	SI,[SI+SF_ENTRY.sf_devptr]
 18472                                  DVRDLP:
 18473 00003EC1 E89117                  	call	DSKSTATCHK
 18474 00003EC4 E83310                  	call	DEVIOCALL2
 18475 00003EC7 57                      	PUSH	DI		; Save "count" done
 18476 00003EC8 B486                    	MOV	AH,86H
 18477                                  
 18478                                  ;hkn; SS override
 18479 00003ECA 368B3E[0903]            	MOV	DI,[SS:DEVCALL_REQSTAT]
 18480                                  	
 18481                                  	; MSDOS 3.3
 18482                                  	;test	di, 8000h
 18483                                  	;jz	short CRDOK
 18484                                  	; MSDOS 6.0
 18485 00003ECF 09FF                    	or	di,di
 18486 00003ED1 7917                    	jns	short CRDOK
 18487                                  	
 18488 00003ED3 E85419                  	call	CHARHARD
 18489 00003ED6 5F                      	POP	DI
 18490                                  
 18491                                  ;hkn; SS override
 18492 00003ED7 36C706[1803]0100        	MOV	word [SS:CALLSCNT],1
 18493 00003EDE 3C01                    	CMP	AL,1
 18494 00003EE0 74DF                    	JZ	short DVRDLP		;Retry
 18495 00003EE2 3C03                    	CMP	AL,3
 18496 00003EE4 74AF                    	JZ	short DEVIOFERR		; FAIL
 18497 00003EE6 30C0                    	XOR	AL,AL			; Ignore, Pick some random character
 18498 00003EE8 EB12                    	JMP	SHORT DVRDIGN
 18499                                  
 18500                                  CRDOK:
 18501 00003EEA 5F                      	POP	DI
 18502                                  
 18503                                  ;hkn; SS override
 18504 00003EEB 36833E[1803]01          	CMP	word [SS:CALLSCNT],1
 18505 00003EF1 751F                    	JNZ	short ENDRDDEVJ2
 18506 00003EF3 1E                      	PUSH	DS
 18507                                  
 18508                                  ;hkn; SS override
 18509 00003EF4 368E1E[1603]            	MOV	DS,[SS:CALLXAD+2]
 18510 00003EF9 8A05                    	MOV	AL,[DI]			; Get the character we just read
 18511 00003EFB 1F                      	POP	DS
 18512                                  DVRDIGN:
 18513                                  
 18514                                  ;hkn; SS override
 18515 00003EFC 36FF06[1403]            	INC	WORD [SS:CALLXAD]	; Next character
 18516 00003F01 36C706[0903]0000        	MOV	word [SS:DEVCALL_REQSTAT],0
 18517 00003F08 47                      	INC	DI			; Next character
 18518 00003F09 3C1A                    	CMP	AL,1AH			; ^Z?
 18519 00003F0B 7405                    	JZ	short ENDRDDEVJ2	; Yes, done zero set (EOF)
 18520 00003F0D 3C0D                    	CMP	AL,c_CR 		; CR?
 18521 00003F0F E0B0                    	LOOPNZ	DVRDLP			; Loop if no, else done
 18522 00003F11 40                      	INC	AX			; Resets zero flag so NOT EOF, unless
 18523                                  					;  AX=FFFF which is not likely
 18524                                  ENDRDDEVJ2:
 18525 00003F12 EB1F                    	JMP	short ENDRDDEV		;changed short to long for win386
 18526                                  
 18527                                  	;  MSDOS 6.0
 18528                                  ;;SR;
 18529                                  ;;Polling code for raw read on CON when WIN386 is present
 18530                                  ;;
 18531                                  ;;At this point -- ds:di is transfer address
 18532                                  ;;		  cx is count
 18533                                  ;;
 18534                                  ;
 18535                                  ;do_polling:
 18536                                  ;	mov	bx,di			;ds:bx is Xfer address
 18537                                  ;	xor	ax,ax
 18538                                  ;	mov	dx,ax
 18539                                  ;	call	setread			;prepare device packet
 18540                                  ;
 18541                                  ;do_io:
 18542                                  ;;
 18543                                  ;;Change read to a NON-DESTRUCTIVE READ, NO WAIT
 18544                                  ;;
 18545                                  ;	mov	byte ptr es:[bx+2],DEVRDND	;Change command code
 18546                                  ;	push	ds
 18547                                  ;	lds	si,[THISSFT]		;get device header
 18548                                  ;	call	deviocall		;call device driver
 18549                                  ;	pop	ds
 18550                                  ;	
 18551                                  ;	test	es:[bx.REQSTAT],STERR	;check if error
 18552                                  ;	jz	check_busy		;no
 18553                                  ;
 18554                                  ;	push	ds
 18555                                  ;	mov	dx,di
 18556                                  ;	invoke 	charhard		;invoke int 24h handler
 18557                                  ;	mov	di,dx
 18558                                  ;	or	al,al
 18559                                  ;	jz	pop_done_read		;ignore by user, assume read done
 18560                                  ;	cmp	al,3
 18561                                  ;	jz	devrderr		;user asked to fail
 18562                                  ;	pop	ds
 18563                                  ;	jmp	do_io			;user asked to retry
 18564                                  ;
 18565                                  ;check_busy:
 18566                                  ;	test	es:[bx.REQSTAT],0200h	;see if busy bit set
 18567                                  ;	jnz	no_char			;yes, no character available
 18568                                  ;;
 18569                                  ;;Character is available. Read in 1 character at a time until all characters
 18570                                  ;;are read in or no character is available
 18571                                  ;;
 18572                                  ;	mov	byte ptr es:[bx+2],DEVRD	;command code is READ now
 18573                                  ;	mov	word ptr es:[bx+18],1		;change count to 1 character
 18574                                  ;	push	ds
 18575                                  ;	lds	si,[THISSFT]
 18576                                  ;	call	deviocall
 18577                                  ;
 18578                                  ;	mov	dx,di
 18579                                  ;	mov	ah,86h
 18580                                  ;	mov	di,es:[bx.REQSTAT]	;get returned status
 18581                                  ;	test	di,STERR		;was there an error during read?
 18582                                  ;	jz	next_char		;no,read next character
 18583                                  ;
 18584                                  ;	invoke	charhard		;invoke int 24h handler
 18585                                  ;	mov	di,dx			;restore di
 18586                                  ;	or	al,al			;
 18587                                  ;	jz	pop_done_read		;ignore by user,assume read is done
 18588                                  ;	cmp	al,3
 18589                                  ;	jz	devrderr		;user issued a 'fail',indicate error
 18590                                  ;	pop	ds
 18591                                  ;	jmp	do_io			;user issued a retry
 18592                                  ;
 18593                                  ;next_char:
 18594                                  ;	pop	ds
 18595                                  ;	mov	di,dx
 18596                                  ;	dec	cx			;decrement count
 18597                                  ;	jcxz	done_read		;all characters read in
 18598                                  ;	inc	word ptr es:[bx+14]	;update transfer address
 18599                                  ;	jmp	do_io			;read next character in
 18600                                  ;
 18601                                  ;devrderr:
 18602                                  ;	pop	di			;discard segment address
 18603                                  ;	les	di,[THISSFT]
 18604                                  ;	transfer SET_ACC_ERR_DS		;indicate error
 18605                                  ;
 18606                                  ;no_char:
 18607                                  ;;
 18608                                  ;;Since no character is available, we let win386 switch the VM out
 18609                                  ;;
 18610                                  ;	push	ax
 18611                                  ;	mov	ah,84h
 18612                                  ;	int	2ah			;indicate idle to WIN386
 18613                                  ;;
 18614                                  ;;When control returns from WIN386, we continue the raw read
 18615                                  ;;
 18616                                  ;	pop	ax
 18617                                  ;	jmp	do_io
 18618                                  ;
 18619                                  ;pop_done_read:
 18620                                  ;	pop	ds
 18621                                  ;done_read:
 18622                                  ;	add	di,[CALLSCNT]
 18623                                  ;	jmp	ENDRDDEVJ3	;jump back to normal DOS raw read exit
 18624                                  
 18625                                  TRANBUF:
 18626 00003F14 AC                      	LODSB
 18627 00003F15 AA                      	STOSB
 18628 00003F16 3C0D                    	CMP	AL,c_CR 	; Check for carriage return
 18629 00003F18 7503                    	JNZ	short NORMCH
 18630 00003F1A C6040A                  	MOV	BYTE [SI],c_LF
 18631                                  NORMCH:
 18632 00003F1D 3C0A                    	CMP	AL,c_LF
 18633 00003F1F E0F3                    	LOOPNZ	TRANBUF
 18634 00003F21 7507                    	JNZ	short ENDRDCON
 18635 00003F23 31F6                    	XOR	SI,SI		; Cause a new buffer to be read
 18636 00003F25 E85CE4                  	call	OUTT		; Transmit linefeed
 18637 00003F28 0C01                    	OR	AL,1		; Clear zero flag--not end of file
 18638                                  ENDRDCON:
 18639                                  
 18640                                  ;hkn; SS is DOSDATA
 18641 00003F2A 16                      	push	ss
 18642 00003F2B 1F                      	pop	ds
 18643 00003F2C E8B7FE                  	CALL	SWAPBACK
 18644 00003F2F 8936[2200]              	MOV	[CONTPOS],SI
 18645                                  ENDRDDEV:
 18646                                  
 18647                                  ;hkn; SS is DOSDATA
 18648 00003F33 16                      	push	ss
 18649 00003F34 1F                      	pop	ds
 18650                                  
 18651 00003F35 893E[5005]              	MOV	[NEXTADD],DI
 18652 00003F39 7509                    	JNZ	short SETSFTC 	; Zero set if Ctrl-Z found in input
 18653 00003F3B C43E[3605]              	LES	DI,[THISSFT]
 18654                                  	;and	byte [es:di+5],0BFh
 18655 00003F3F 26806505BF              	AND	BYTE [ES:DI+SF_ENTRY.sf_flags],~devid_device_EOF 
 18656                                  					; Mark as no more data available
 18657                                  SETSFTC:
 18658 00003F44 E8EA04                  	call	SETSFT
 18659 00003F47 C3                      	retn
 18660                                  
 18661                                  READCON:
 18662 00003F48 E8A1FE                  	CALL	SWAPCON
 18663 00003F4B 8B36[2200]              	MOV	SI,[CONTPOS]
 18664 00003F4F 09F6                    	OR	SI,SI
 18665 00003F51 75C1                    	JNZ	short TRANBUF
 18666 00003F53 803E[2902]80            	CMP	BYTE [CONBUF],128
 18667 00003F58 7406                    	JZ	short GETBUF
 18668 00003F5A C706[2902]80FF          	MOV	WORD [CONBUF],0FF80H ; Set up 128-byte buffer with no template
 18669                                  GETBUF:
 18670 00003F60 51                      	PUSH	CX
 18671 00003F61 06                      	PUSH	ES
 18672 00003F62 57                      	PUSH	DI
 18673                                  
 18674                                  ;hkn; CONBUF is in DOSDATA
 18675 00003F63 BA[2902]                	MOV	DX,CONBUF
 18676                                  
 18677 00003F66 E89BE1                  	call	_$STD_CON_STRING_INPUT	; Get input buffer
 18678 00003F69 5F                      	POP	DI
 18679 00003F6A 07                      	POP	ES
 18680 00003F6B 59                      	POP	CX
 18681                                  
 18682                                  ;hkn; CONBUF is in DOSDATA
 18683 00003F6C BE[2B02]                	MOV	SI,CONBUF+2
 18684                                  
 18685 00003F6F 803C1A                  	CMP	BYTE [SI],1AH	; Check for Ctrl-Z in first character
 18686 00003F72 75A0                    	JNZ	short TRANBUF
 18687 00003F74 B01A                    	MOV	AL,1AH
 18688 00003F76 AA                      	STOSB
 18689 00003F77 4F                      	DEC	DI
 18690 00003F78 B00A                    	MOV	AL,c_LF
 18691 00003F7A E807E4                  	call	OUTT		; Send linefeed
 18692 00003F7D 31F6                    	XOR	SI,SI
 18693 00003F7F EBA9                    	JMP	ENDRDCON
 18694                                  
 18695                                  ; 24/07/2018 - Retro DOS v3.0
 18696                                  
 18697                                  ;Break	<DOS_WRITE -- MAIN WRITE ROUTINE AND DEVICE OUT ROUTINES>
 18698                                  ;---------------------------------------------------------------------------
 18699                                  ;
 18700                                  ; Procedure Name : DOS_WRITE
 18701                                  ;
 18702                                  ; Inputs:
 18703                                  ;	ThisSFT set to the SFT for the file being used
 18704                                  ;	[DMAADD] contains transfer address
 18705                                  ;	CX = No. of bytes to write
 18706                                  ; Function:
 18707                                  ;	Perform write operation
 18708                                  ;	NOTE: If CX = 0 on input, file is truncated or grown
 18709                                  ;		to current sf_position
 18710                                  ; Outputs:
 18711                                  ;    Carry clear
 18712                                  ;	SFT Position and cluster pointers updated
 18713                                  ;	CX = No. of bytes written
 18714                                  ;	ES:DI point to SFT
 18715                                  ;    Carry set
 18716                                  ;	AX is error code
 18717                                  ;	CX = 0
 18718                                  ;	ES:DI point to SFT
 18719                                  ; DS preserved, all other registers destroyed
 18720                                  ;---------------------------------------------------------------------------
 18721                                  
 18722                                  ;hkn; called from fcbio2.asm, handle.asm and dev.asm. DS is set up at this 
 18723                                  ;hkn; point to DOSDATA.
 18724                                  
 18725                                  DOS_WRITE:
 18726 00003F81 C43E[3605]              	LES	DI,[THISSFT]
 18727                                  	;mov	al,[ES:DI+2]
 18728 00003F85 268A4502                	MOV	AL,[ES:DI+SF_ENTRY.sf_mode]
 18729                                  	;and	al,0Fh
 18730 00003F89 240F                    	AND	AL,access_mask
 18731                                  	;cmp	al,0
 18732 00003F8B 3C00                    	CMP	AL,open_for_read
 18733 00003F8D 7503                    	JNE	short Check_FCB_RO		 ;Is write or both
 18734                                  BadMode:
 18735 00003F8F E9C103                  	jmp	SET_ACC_ERR
 18736                                  
 18737                                  ;
 18738                                  ; NOTE: The following check for writting to a Read Only File is performed
 18739                                  ;	    ONLY on FCBs!!!!
 18740                                  ;	We ALLOW writes to Read Only files via handles to allow a CREATE
 18741                                  ;	    of a read only file which can then be written to.
 18742                                  ;	This is OK because we are NOT ALLOWED to OPEN a RO file via handles
 18743                                  ;	    for writting, or RE-CREATE an EXISTING RO file via handles. Thus,
 18744                                  ;	    CREATing a NEW RO file, or RE-CREATing an existing file which
 18745                                  ;	    is NOT RO to be RO, via handles are the only times we can write
 18746                                  ;	    to a read-only file.
 18747                                  ;
 18748                                  Check_FCB_RO:
 18749                                  	;test	word [es:di+2],8000h
 18750 00003F92 26F745020080            	TEST	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB
 18751 00003F98 7407                    	JZ	short WRITE_NO_MODE	; Not an FCB
 18752                                  	;test	byte [es:di+4],1
 18753 00003F9A 26F6450401              	TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_read_only
 18754 00003F9F 75EE                    	JNZ	short BadMode 		; Can't write to Read_Only files via FCB
 18755                                  WRITE_NO_MODE:
 18756 00003FA1 E88902                  	call	SETUP
 18757 00003FA4 E83CE0                  	call	IsSFTNet
 18758 00003FA7 7406                    	JZ	short LOCAL_WRITE
 18759                                  
 18760                                  ;IF NOT Installed
 18761                                  ;	transfer NET_WRITE
 18762                                  ;ELSE
 18763                                  	;mov	ax,1109h
 18764 00003FA9 B80911                  	MOV	AX,(MultNET<<8)|9
 18765 00003FAC CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - WRITE TO REMOTE FILE
 18766                                  			; ES:DI -> SFT
 18767                                  			; SFT DPB field -> DPB of drive containing file
 18768                                  			; CX = number of bytes, SS = DOS CS, SDA DTA field -> user buffer
 18769                                  			; Return: CF set on error, CX = bytes written
 18770 00003FAE C3                      	retn
 18771                                  ;ENDIF
 18772                                  
 18773                                  LOCAL_WRITE:
 18774                                  	;test	word [es:di+5],80h
 18775 00003FAF 26F745058000            	TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device ; Check for named device I/O
 18776 00003FB5 7552                    	jnz	short WRTDEV
 18777                                  	;mov	byte [EXTERR_LOCUS],2
 18778 00003FB7 C606[D102]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 18779 00003FBC E8ADE0                  	call	EcritDisk
 18780                                  
 18781 00003FBF E89E04                  	call	DISKWRITE
 18782                                  
 18783                                  	; MSDOS 6.0
 18784                                  ;; Extended Open
 18785                                  	;JC	short nocommit
 18786                                  	;LES	DI,[THISSFT]
 18787                                  	;TEST	word [ES:DI+SF_ENTRY.sf_mode],auto_commit_write
 18788                                  	;JZ	short nocommit
 18789                                  	;PUSH	CX
 18790                                  	;call	DOS_COMMIT
 18791                                  	;POP	CX
 18792                                  ;nocommit:
 18793                                  ;; Extended Open
 18794 00003FC2 E8AFE0                  	call	LcritDisk
 18795 00003FC5 C3                      	retn
 18796                                  
 18797                                  DVWRTRAW:
 18798 00003FC6 31C0                    	XOR	AX,AX			; Media Byte, unit = 0
 18799 00003FC8 E8860F                  	call	SETWRITE
 18800 00003FCB 1E                      	PUSH	DS			; Save seg of transfer
 18801                                  
 18802                                  ;hkn; SS override
 18803 00003FCC 36C536[3605]            	LDS	SI,[SS:THISSFT]
 18804 00003FD1 E8230F                  	call	DEVIOCALL		; DS:SI -> DEVICE
 18805                                  
 18806 00003FD4 89FA                    	MOV	DX,DI			; Offset part of Xaddr saved in DX
 18807 00003FD6 B487                    	MOV	AH,87H
 18808                                  
 18809                                  ;hkn; SS override
 18810 00003FD8 368B3E[0903]            	MOV	DI,[SS:DEVCALL_REQSTAT]
 18811                                  
 18812                                  	; MSDOS 3.3
 18813                                  	;test	di,8000h
 18814                                  	;jz	short CWRTROK
 18815                                  
 18816                                  	; MSDOS 6.0
 18817 00003FDD 09FF                    	or	di,di
 18818 00003FDF 7914                    	jns	short CWRTROK
 18819                                  	
 18820                                  	; MSDOS 3.3 (& MSDOS 6.0)
 18821 00003FE1 E84618                  	call	CHARHARD
 18822                                  
 18823                                  	; MSDOS 6.0
 18824                                  	;sub	cx,[ss:callscnt]	; update ptr & count to reflect	M065
 18825                                  	;mov	bx,dx			; number of chars xferred	M065
 18826                                  	;add	bx,[ss:callscnt]		;				M065
 18827                                  	;mov	di,bx			;				M065
 18828                                  	
 18829                                  	; MSDOS 3.3
 18830 00003FE4 89D3                    	MOV	BX,DX			; Recall transfer addr		M065
 18831                                  
 18832                                  	; MSDOS 3.3 (& MSDOS 6.0)
 18833 00003FE6 08C0                    	OR	AL,AL
 18834 00003FE8 740B                    	JZ	short CWRTROK 		; Ignore
 18835 00003FEA 3C03                    	CMP	AL,3
 18836 00003FEC 7403                    	JZ	short CWRFERR
 18837 00003FEE 1F                      	POP	DS			; Recover saved seg of transfer
 18838 00003FEF EBD5                    	JMP	short DVWRTRAW		; Try again
 18839                                  
 18840                                  CWRFERR:
 18841 00003FF1 58                      	POP	AX			; Chuck saved seg of transfer
 18842 00003FF2 E99FFE                  	JMP	CRDFERR 		; Will pop one more stack element
 18843                                  
 18844                                  CWRTROK:
 18845 00003FF5 58                      	POP	AX			; Chuck saved seg of transfer
 18846 00003FF6 1F                      	POP	DS
 18847 00003FF7 A1[1803]                	MOV	AX,[CALLSCNT]		; Get actual number of bytes transferred
 18848                                  ENDWRDEV:
 18849 00003FFA C43E[3605]              	LES	DI,[THISSFT]
 18850 00003FFE 89C1                    	MOV	CX,AX
 18851 00004000 E85004                  	call	ADDREC
 18852 00004003 C3                      	retn
 18853                                  
 18854                                  WRTNUL:
 18855 00004004 89CA                    	MOV	DX,CX			;Entire transfer done
 18856                                  WRTCOOKJ:
 18857 00004006 E98D00                  	JMP	WRTCOOKDONE
 18858                                  
 18859                                  WRTDEV:
 18860                                  	;mov	byte [EXTERR_LOCUS],4
 18861 00004009 C606[D102]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev
 18862                                  	;or	byte [es:di+5],40h
 18863 0000400E 26804D0540              	OR	BYTE [ES:DI+SF_ENTRY.sf_flags],devid_device_EOF
 18864                                  					; Reset EOF for input
 18865                                  	;mov	bl,[es:di+5]
 18866 00004013 268A5D05                	MOV	BL,[ES:DI+SF_ENTRY.sf_flags]
 18867 00004017 31C0                    	XOR	AX,AX
 18868 00004019 E3DF                    	JCXZ	ENDWRDEV		; problem of creating on a device.
 18869 0000401B 1E                      	PUSH	DS
 18870 0000401C 88D8                    	MOV	AL,BL
 18871 0000401E C51E[DA02]              	LDS	BX,[DMAADD]		; Xaddr to DS:BX
 18872 00004022 89DF                    	MOV	DI,BX			; Xaddr to DS:DI
 18873 00004024 31D2                    	XOR	DX,DX			; Set starting point
 18874                                  	;test	al,20h
 18875 00004026 A820                    	test	AL,devid_device_raw	; Raw?
 18876                                  	;JZ	short TEST_DEV_CON
 18877                                  	;JMP	DVWRTRAW
 18878 00004028 759C                    	jnz	short DVWRTRAW
 18879                                  
 18880                                  TEST_DEV_CON:
 18881                                  	;test	al,2
 18882 0000402A A802                    	test	AL,devid_device_con_out ; Console output device?
 18883 0000402C 756E                    	jnz	short WRITECON
 18884                                  	;test	al,4
 18885 0000402E A804                    	test	AL,devid_device_null
 18886 00004030 75D2                    	JNZ	short WRTNUL
 18887 00004032 89D0                    	MOV	AX,DX
 18888 00004034 803F1A                  	CMP	BYTE [BX],1Ah		; ^Z?
 18889 00004037 74CD                    	JZ	short WRTCOOKJ		; Yes, transfer nothing
 18890 00004039 51                      	PUSH	CX
 18891 0000403A B90100                  	MOV	CX,1
 18892 0000403D E8110F                  	call	SETWRITE
 18893 00004040 59                      	POP	CX
 18894                                  
 18895                                  ;hkn; SS override
 18896 00004041 36C536[3605]            	LDS	SI,[SS:THISSFT]
 18897                                  ;
 18898                                  ;SR; Removed X25 support from here
 18899                                  ;
 18900                                  	;lds	si,[si+7]
 18901 00004046 C57407                  	LDS	SI,[SI+SF_ENTRY.sf_devptr]
 18902                                  DVWRTLP:
 18903 00004049 E80916                  	call	DSKSTATCHK
 18904 0000404C E8AB0E                  	call	DEVIOCALL2
 18905 0000404F 57                      	PUSH	DI
 18906 00004050 B487                    	MOV	AH,87H
 18907                                  
 18908                                  ;hkn; SS override
 18909 00004052 368B3E[0903]            	MOV	DI,[SS:DEVCALL_REQSTAT]
 18910                                  	
 18911                                  	; MSDOS 3.3
 18912                                  	;test	di,8000h
 18913                                  	;jz	short CWROK
 18914                                  
 18915                                  	; MSDOS 6.0
 18916 00004057 09FF                    	or	di,di
 18917 00004059 7916                    	jns	short CWROK
 18918                                  	
 18919                                  	; MSDOS 3.3 (& MSDOS 6.0)
 18920 0000405B E8CC17                  	call	CHARHARD
 18921 0000405E 5F                      	POP	DI
 18922                                  
 18923                                  ;hkn; SS override
 18924 0000405F 36C706[1803]0100        	MOV	word [SS:CALLSCNT],1
 18925 00004066 3C01                    	CMP	AL,1
 18926 00004068 74DF                    	JZ	short DVWRTLP 	; Retry
 18927 0000406A 08C0                    	OR	AL,AL
 18928 0000406C 740C                    	JZ	short DVWRTIGN	; Ignore
 18929                                  	; 10/08/2018
 18930 0000406E E923FE                  	JMP	CRDFERR 	; Fail, pops one stack element
 18931                                  
 18932                                  CWROK:
 18933 00004071 5F                      	POP	DI
 18934                                  
 18935                                  ;hkn; SS override
 18936 00004072 36833E[1803]00          	CMP	word [SS:CALLSCNT],0
 18937 00004078 741C                    	JZ	short WRTCOOKDONE
 18938                                  DVWRTIGN:
 18939 0000407A 42                      	INC	DX
 18940                                  
 18941                                  ;hkn; SS override for CALLXAD
 18942 0000407B 36FF06[1403]            	INC	WORD [SS:CALLXAD]
 18943 00004080 47                      	INC	DI
 18944 00004081 1E                      	PUSH	DS
 18945 00004082 368E1E[1603]            	MOV	DS,[SS:CALLXAD+2]
 18946 00004087 803D1A                  	CMP	BYTE [DI],1Ah	; ^Z?
 18947 0000408A 1F                      	POP	DS
 18948 0000408B 7409                    	JZ	short WRTCOOKDONE
 18949                                  
 18950                                  ;hkn; SS override
 18951 0000408D 36C706[0903]0000        	MOV	word [SS:DEVCALL_REQSTAT],0
 18952 00004094 E2B3                    	LOOP	DVWRTLP
 18953                                  WRTCOOKDONE:
 18954 00004096 89D0                    	MOV	AX,DX
 18955 00004098 1F                      	POP	DS
 18956 00004099 E95EFF                  	JMP	ENDWRDEV ; 10/08/2018
 18957                                  
 18958                                  WRITECON:
 18959 0000409C 1E                      	PUSH	DS
 18960                                  
 18961                                  ;hkn; SS is DOSDATA
 18962 0000409D 16                      	push	ss
 18963 0000409E 1F                      	pop	ds
 18964 0000409F E84AFD                  	CALL	SWAPCON
 18965 000040A2 1F                      	POP	DS
 18966 000040A3 89DE                    	MOV	SI,BX
 18967 000040A5 51                      	PUSH	CX
 18968                                  WRCONLP:
 18969 000040A6 AC                      	LODSB
 18970 000040A7 3C1A                    	CMP	AL,1Ah		; ^Z?
 18971 000040A9 7405                    	JZ	short CONEOF
 18972 000040AB E8D6E2                  	call	OUTT
 18973 000040AE E2F6                    	LOOP	WRCONLP
 18974                                  CONEOF:
 18975 000040B0 58                      	POP	AX			; Count
 18976 000040B1 29C8                    	SUB	AX,CX			; Amount actually written
 18977 000040B3 1F                      	POP	DS
 18978 000040B4 E82FFD                  	CALL	SWAPBACK
 18979 000040B7 E940FF                  	JMP	ENDWRDEV
 18980                                  
 18981                                  ;---------------------------------------------------------------------------
 18982                                  ;
 18983                                  ; Procedure Name : get_io_sft
 18984                                  ;
 18985                                  ;   Convert JFN number in BX to sf_entry in DS:SI We get the normal SFT if
 18986                                  ;   CONSWAP is FALSE or if the handle desired is 2 or more.  Otherwise, we
 18987                                  ;   retrieve the sft from ConSFT which is set by SwapCon.
 18988                                  ;
 18989                                  ;---------------------------------------------------------------------------
 18990                                  
 18991                                  GET_IO_SFT:
 18992                                  	;test	byte [SS:CONSWAP],0FFh
 18993 000040BA 36803E[0303]00          	cmp	byte [SS:CONSWAP],0			;smr;SS Override
 18994 000040C0 7512                    	JNZ	short GetRedir
 18995                                  GetNormal:
 18996 000040C2 16                      	push	ss
 18997 000040C3 1F                      	pop	ds
 18998 000040C4 06                      	PUSH	ES
 18999 000040C5 57                      	PUSH	DI
 19000 000040C6 E83327                  	call	SFFromHandle
 19001 000040C9 7206                    	JC	short RET44P
 19002 000040CB 8CC6                    	MOV	SI,ES
 19003 000040CD 8EDE                    	MOV	DS,SI
 19004 000040CF 89FE                    	MOV	SI,DI
 19005                                  RET44P:
 19006 000040D1 5F                      	POP	DI
 19007 000040D2 07                      	POP	ES
 19008 000040D3 C3                      	retn
 19009                                  GetRedir:
 19010 000040D4 83FB01                  	CMP	BX,1
 19011 000040D7 77E9                    	JA	short GetNormal
 19012 000040D9 36C536[7805]            	LDS	SI,[SS:CONSFT]
 19013 000040DE F8                      	CLC
 19014                                  get_io_sft_retn:
 19015 000040DF C3                      	retn
 19016                                  
 19017                                  ;Break	<DIRREAD -- READ A DIRECTORY SECTOR>
 19018                                  ;---------------------------------------------------------------------------
 19019                                  ;
 19020                                  ; Procedure Name : DIRREAD
 19021                                  ;
 19022                                  ; Inputs:
 19023                                  ;	AX = Directory block number (relative to first block of directory)
 19024                                  ;	ES:BP = Base of drive parameters
 19025                                  ;	[DIRSEC] = First sector of first cluster of directory
 19026                                  ;	[CLUSNUM] = Next cluster
 19027                                  ;	[CLUSFAC] = Sectors/Cluster
 19028                                  ; Function:
 19029                                  ;	Read the directory block into [CURBUF].
 19030                                  ; Outputs:
 19031                                  ;	[NXTCLUSNUM] = Next cluster (after the one skipped to)
 19032                                  ;	[SECCLUSPOS] Set
 19033                                  ;	ES:BP unchanged
 19034                                  ;	[CURBUF] Points to Buffer with dir sector
 19035                                  ;	Carry set if error (user said FAIL to I 24)
 19036                                  ; DS preserved, all other registers destroyed.
 19037                                  ;---------------------------------------------------------------------------
 19038                                  
 19039                                  ;hkn; called from dir.asm. DS already set up to DOSDATA.
 19040                                  
 19041                                  DIRREAD:
 19042                                  
 19043                                  ; Note that ClusFac is the sectors per cluster. This is NOT necessarily
 19044                                  ; the same as what is in the DPB! In the case of the root directory, we have
 19045                                  ; ClusFac = # sectors in the root directory. The root directory is detected
 19046                                  ; by DIRStart = 0.
 19047                                  
 19048 000040E0 31D2                    	XOR	DX,DX
 19049 000040E2 833E[5805]00            	CMP	word [DIRSTART],0
 19050 000040E7 7503                    	jnz	short SubDir
 19051 000040E9 92                      	XCHG	AX,DX
 19052 000040EA EB0C                    	JMP	short DoRead
 19053                                  
 19054                                  ; Convert the sector number in AX into cluster and sector-within-cluster pair
 19055                                  
 19056                                  SubDir:
 19057 000040EC 88C2                    	MOV	DL,AL
 19058                                  	;and	dl,[es:bp+4]
 19059 000040EE 26225604                	AND	DL,[ES:BP+DPB.CLUSTER_MASK]
 19060                                  
 19061                                  ;	(DX) = sector-in-cluster
 19062                                  
 19063                                  	;mov	cl,[es:bp+5]
 19064 000040F2 268A4E05                	MOV	CL,[ES:BP+DPB.CLUSTER_SHIFT]
 19065 000040F6 D3E8                    	SHR	AX,CL
 19066                                  
 19067                                  ;	(DX) = position in cluster
 19068                                  ;	(AX) = number of clusters to skip
 19069                                  
 19070                                  DoRead:
 19071 000040F8 8816[0E05]              	MOV	[SECCLUSPOS],DL
 19072 000040FC 89C1                    	MOV	CX,AX
 19073 000040FE 88D4                    	MOV	AH,DL
 19074                                  
 19075                                  ;	(CX) = number of clusters to skip.
 19076                                  ;	(AH) = remainder
 19077                                  
 19078                                  	; MSDOS 6.0
 19079                                  	;MOV	DX,[DIRSEC+2]	     	  ;>32mb
 19080                                  	;MOV	[HIGH_SECTOR],DX	  ;>32mb
 19081 00004100 8B16[5605]              	MOV	DX,[DIRSEC]
 19082 00004104 00E2                    	ADD	DL,AH
 19083 00004106 80D600                  	ADC	DH,0
 19084                                  	;ADC	word [HIGH_SECTOR],0	  ;>32mb
 19085                                  
 19086 00004109 8B1E[5405]              	MOV	BX,[CLUSNUM]
 19087 0000410D 891E[6E05]              	MOV	[NXTCLUSNUM],BX
 19088 00004111 E319                    	JCXZ	FIRSTCLUSTER
 19089                                  SKPCLLP:
 19090 00004113 E83719                  	call	UNPACK
 19091 00004116 72C7                    	jc	short get_io_sft_retn
 19092 00004118 87DF                    	XCHG	BX,DI
 19093 0000411A E81919                  	call	IsEOF			; test for eof based on fat size
 19094 0000411D 7302                    	JAE	short HAVESKIPPED
 19095 0000411F E2F2                    	LOOP	SKPCLLP
 19096                                  HAVESKIPPED:
 19097 00004121 891E[6E05]              	MOV	[NXTCLUSNUM],BX
 19098 00004125 89FA                    	MOV	DX,DI
 19099 00004127 88E3                    	MOV	BL,AH
 19100 00004129 E80513                  	call	FIGREC
 19101                                  
 19102                                  	;entry	FIRSTCLUSTER
 19103                                  
 19104                                  FIRSTCLUSTER:
 19105                                  	;mov	byte [ALLOWED],18h
 19106 0000412C C606[F702]18            	MOV	byte [ALLOWED],Allowed_RETRY+Allowed_FAIL
 19107 00004131 30C0                    	XOR	AL,AL		; Indicate pre-read
 19108 00004133 E84F1D                  	call	GETBUFFR
 19109 00004136 72A7                    	jc	short get_io_sft_retn
 19110                                  
 19111                                  	;entry	SET_BUF_AS_DIR
 19112                                  
 19113                                  SET_BUF_AS_DIR:
 19114                                  
 19115                                  ;	Set the type of CURBUF to be a directory sector.
 19116                                  ;	Only flags are modified.
 19117                                  
 19118 00004138 1E                      	PUSH	DS
 19119 00004139 56                      	PUSH	SI
 19120 0000413A C536[7405]              	LDS	SI,[CURBUF]
 19121                                  	;or	byte [si+5],4
 19122 0000413E 804C0504                	OR	byte [SI+BUFFINFO.buf_flags],buf_isDIR	; Clears carry
 19123 00004142 5E                      	POP	SI
 19124 00004143 1F                      	POP	DS
 19125                                  dirread_retn:
 19126 00004144 C3                      	retn
 19127                                  
 19128                                  ;Break	<FATSECRD -- READ A FAT SECTOR>
 19129                                  ;----------------------------------------------------------------------------
 19130                                  ;
 19131                                  ; Procedure Name : FATSECRD
 19132                                  ; Inputs:
 19133                                  ;	Same as DREAD
 19134                                  ;	DS:BX = Transfer address
 19135                                  ;	CX = Number of sectors
 19136                                  ;	DX = Absolute record number
 19137                                  ;	ES:BP = Base of drive parameters
 19138                                  ; Function:
 19139                                  ;	Calls BIOS to perform FAT read.
 19140                                  ; Outputs:
 19141                                  ;	Same as DREAD
 19142                                  ;---------------------------------------------------------------------------
 19143                                  
 19144                                  FATSECRD:
 19145                                  ;hkn; SS override
 19146                                  	;mov	byte [ss:ALLOWED],18h
 19147 00004145 36C606[F702]18          	MOV	byte [SS:ALLOWED],Allowed_RETRY+Allowed_FAIL
 19148 0000414B 89CF                    	MOV	DI,CX
 19149                                  	;mov	cl,[es:bp+8]
 19150 0000414D 268A4E08                	MOV	CL,[ES:BP+DPB.FAT_COUNT]
 19151                                  	; MSDOS 6.0
 19152                                  	;MOV	AX,[ES:BP+DPB.FAT_SIZE] 	;>32mb
 19153                                  	; MSDOS 3.3
 19154                                  	;mov	al,[es:bp+0Fh]
 19155 00004151 268A460F                	MOV	AL,[ES:BP+DPB.FAT_SIZE] 
 19156 00004155 30E4                    	XOR	AH,AH
 19157 00004157 30ED                    	XOR	CH,CH				;>32mb
 19158 00004159 52                      	PUSH	DX
 19159                                  NXTFAT:
 19160                                  	; MSDOS 6.0
 19161                                  ;hkn; SS override
 19162                                  	;MOV	word [SS:HIGH_SECTOR],0	;>32mb FAT sectors cannot exceed
 19163 0000415A 51                      	PUSH	CX			;32mb
 19164 0000415B 50                      	PUSH	AX
 19165 0000415C 89F9                    	MOV	CX,DI
 19166 0000415E E85A00                  	call	DSKREAD
 19167 00004161 58                      	POP	AX
 19168 00004162 59                      	POP	CX
 19169 00004163 7420                    	JZ	short RET41P		; Carry clear
 19170 00004165 01C2                    	ADD	DX,AX
 19171 00004167 E2F1                    	LOOP	NXTFAT
 19172 00004169 5A                      	POP	DX
 19173 0000416A 89F9                    	MOV	CX,DI
 19174                                  
 19175                                  ; NOTE FALL THROUGH
 19176                                  
 19177                                  ;Break	<DREAD -- DO A DISK READ>
 19178                                  ;---------------------------------------------------------------------------
 19179                                  ;
 19180                                  ; Procedure Name : DREAD
 19181                                  ;
 19182                                  ; Inputs:
 19183                                  ;	DS:BX = Transfer address
 19184                                  ;	CX = Number of sectors
 19185                                  ;	DX = Absolute record number	      (LOW)
 19186                                  ;	[HIGH_SECTOR]= Absolute record number (HIGH)
 19187                                  ;	ES:BP = Base of drive parameters
 19188                                  ;	[ALLOWED] must be set in case call to HARDERR needed
 19189                                  ; Function:
 19190                                  ;	Calls BIOS to perform disk read. If BIOS reports
 19191                                  ;	errors, will call HARDERRRW for further action.
 19192                                  ; Outputs:
 19193                                  ;	Carry set if error (currently user FAILED to INT 24)
 19194                                  ; DS,ES:BP preserved. All other registers destroyed.
 19195                                  ;---------------------------------------------------------------------------
 19196                                  
 19197                                  	;entry	DREAD
 19198                                  DREAD:
 19199 0000416C E84C00                  	call	DSKREAD
 19200 0000416F 74D3                    	jz	short dirread_retn	; Carry clear
 19201                                  ;hkn; SS override
 19202 00004171 36C606[1005]00          	MOV	BYTE [SS:READOP],0
 19203 00004177 E89900                  	call	HARDERRRW
 19204 0000417A 3C01                    	CMP	AL,1		; Check for retry
 19205 0000417C 74EE                    	JZ	short DREAD
 19206 0000417E 3C03                    	CMP	AL,3		; Check for FAIL
 19207 00004180 F8                      	CLC
 19208 00004181 7501                    	JNZ	short NO_CAR		; Ignore
 19209 00004183 F9                      	STC
 19210                                  NO_CAR:
 19211 00004184 C3                      	retn
 19212                                  RET41P: 
 19213 00004185 5A                      	POP	DX
 19214 00004186 C3                      	retn
 19215                                  
 19216                                  ; 24/07/2018 - Retro DOS v3.0
 19217                                  
 19218                                  ;Break	<CHECK_WRITE_LOCK>
 19219                                  ;---------------------------------------------------------------------------
 19220                                  ;
 19221                                  ; Procedure Name : CHECK_WRITE_LOCK
 19222                                  ;
 19223                                  ; Inputs:
 19224                                  ;	output of SETUP
 19225                                  ;	ES:DI -> SFT
 19226                                  ; Function:
 19227                                  ;	check write lock
 19228                                  ; Outputs:
 19229                                  ;	Carry set if error
 19230                                  ;	Carry clear if ok
 19231                                  ;
 19232                                  ;----------------------------------------------------------------------------
 19233                                  
 19234                                  CHECK_WRITE_LOCK:
 19235                                  	; MSDOS 6.0
 19236                                  	;test	byte [es:di+4],8
 19237 00004187 26F6450408              	TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_volume_id ;volume id
 19238                                  	;JZ	short write_cont			     ;no
 19239                                  	;call	SET_ACC_ERR_DS		;
 19240                                  	;retn
 19241                                  	;jnz	SET_ACC_ERR_DS
 19242                                  	; 19/08/2018
 19243 0000418C 7403                    	jz	short write_cont
 19244 0000418E E9C001                  	jmp	SET_ACC_ERR_DS
 19245                                  write_cont:				;
 19246 00004191 51                      	PUSH	CX			;save reg
 19247 00004192 09C9                    	OR	CX,CX			;
 19248 00004194 7501                    	JNZ	short Not_Truncate	;
 19249 00004196 49                      	dec	cx			;(cx) = -1; check for lock on whole file
 19250                                  Not_Truncate:				;
 19251 00004197 B080                    	MOV	AL,80H			;check write access
 19252 00004199 E84A31                  	call	LOCK_CHECK		;check lock
 19253 0000419C 59                      	POP	CX			;restore reg
 19254 0000419D 7305                    	JNC	short WRITE_OK		;lock ok
 19255 0000419F E86501                  	call	WRITE_LOCK_VIOLATION	;issue I24
 19256 000041A2 73ED                    	JNC	short write_cont	;retry
 19257                                  WRITE_OK:				;
 19258 000041A4 C3                      	retn				;
 19259                                  
 19260                                  ;Break	<CHECK_READ_LOCK>
 19261                                  ;---------------------------------------------------------------------------
 19262                                  ;
 19263                                  ; Procedure Name : CHECK_READ_LOC
 19264                                  ;
 19265                                  ; Inputs:
 19266                                  ;	ES:DI -> SFT
 19267                                  ;	output of SETUP
 19268                                  ; Function:
 19269                                  ;	check read lock
 19270                                  ; Outputs:
 19271                                  ;	Carry set if error
 19272                                  ;	Carry clear if ok
 19273                                  ;----------------------------------------------------------------------------
 19274                                  
 19275                                  CHECK_READ_LOCK:
 19276                                  	; MSDOS 6.0
 19277                                  	;test	byte [es:di+4],8
 19278 000041A5 26F6450408              	TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_volume_id ;volume id
 19279                                  	;JZ	short do_retry			   	     ; no
 19280                                  	;call	SET_ACC_ERR		;
 19281                                  	;retn
 19282 000041AA 0F85A501                	jnz	SET_ACC_ERR		;
 19283                                  do_retry:				;
 19284 000041AE 30C0                    	xor	al,al			;check read access
 19285 000041B0 E83331                  	call	LOCK_CHECK		;check lock
 19286 000041B3 7305                    	JNC	short READLOCK_OK 	;lock ok
 19287 000041B5 E82801                  	call	READ_LOCK_VIOLATION	;issue I24
 19288 000041B8 73F4                    	JNC	short do_retry		;retry
 19289                                  READLOCK_OK:				;
 19290 000041BA C3                      	retn				;
 19291                                  
 19292                                  ;============================================================================
 19293                                  ; DISK2.ASM, MSDOS 6.0, 1991
 19294                                  ;============================================================================
 19295                                  ; 24/07/2018 - Retro DOS v3.0 
 19296                                  
 19297                                  ;	TITLE	DISK2 - Disk utility routines
 19298                                  ;	NAME	Disk2
 19299                                  
 19300                                  ;**	Low level Read and write routines for local SFT I/O on files and devs
 19301                                  ;
 19302                                  ;	DskRead
 19303                                  ;	DWRITE
 19304                                  ;	DSKWRITE
 19305                                  ;	HarderrRW
 19306                                  ;	SETUP
 19307                                  ;	BREAKDOWN
 19308                                  ;	READ_LOCK_VIOLATION
 19309                                  ;	WRITE_LOCK_VIOLATION
 19310                                  ;	DISKREAD
 19311                                  ;	SET_ACC_ERR_DS
 19312                                  ;	SET_ACC_ERR
 19313                                  ;	SETSFT
 19314                                  ;	SETCLUS
 19315                                  ;	AddRec
 19316                                  ;
 19317                                  ;	Revision history:
 19318                                  ;
 19319                                  ;		AN000 version 4.00 Jan. 1988
 19320                                  ;		M039 DB 10/17/90 - Disk read/write optimization
 19321                                  
 19322                                  ;Break	<DSKREAD -- PHYSICAL DISK READ>
 19323                                  ;---------------------------------------------------------------------------
 19324                                  ;
 19325                                  ; Procedure Name : DSKREAD
 19326                                  ;
 19327                                  ; Inputs:
 19328                                  ;	DS:BX = Transfer addr
 19329                                  ;	CX = Number of sectors
 19330                                  ;	[HIGH_SECTOR] = Absolute record number (HIGH)
 19331                                  ;	DX = Absolute record number	       (LOW)
 19332                                  ;	ES:BP = Base of drive parameters
 19333                                  ; Function:
 19334                                  ;	Call BIOS to perform disk read
 19335                                  ; Outputs:
 19336                                  ;	DI = CX on entry
 19337                                  ;	CX = Number of sectors unsuccessfully transfered
 19338                                  ;	AX = Status word as returned by BIOS (error code in AL if error)
 19339                                  ;	Zero set if OK (from BIOS) (carry clear)
 19340                                  ;	Zero clear if error (carry clear)
 19341                                  ; SI Destroyed, others preserved
 19342                                  ;---------------------------------------------------------------------------
 19343                                  
 19344                                  DSKREAD:
 19345 000041BB 51                      	PUSH	CX
 19346                                  	;mov	ah,[es:bp+16h]
 19347 000041BC 268A6616                	MOV	AH,[ES:BP+DPB.MEDIA]
 19348                                  	;mov	al,[es:bp+1]
 19349 000041C0 268A4601                	MOV	AL,[ES:BP+DPB.UNIT]
 19350 000041C4 53                      	PUSH	BX
 19351 000041C5 06                      	PUSH	ES
 19352 000041C6 E8550D                  	call	SETREAD
 19353 000041C9 EB27                    	JMP	short DODSKOP
 19354                                  
 19355                                  ;Break	<DWRITE -- SEE ABOUT WRITING>
 19356                                  ;--------------------------------------------------------------------------
 19357                                  ;
 19358                                  ; Procedure Name : DWRITE
 19359                                  ;
 19360                                  ; Inputs:
 19361                                  ;	DS:BX = Transfer address
 19362                                  ;	CX = Number of sectors
 19363                                  ;	[HIGH_SECTOR] = Absolute record number (HIGH)
 19364                                  ;	DX = Absolute record number	       (LOW)
 19365                                  ;	ES:BP = Base of drive parameters
 19366                                  ;	[ALLOWED] must be set in case HARDERR called
 19367                                  ; Function:
 19368                                  ;	Calls BIOS to perform disk write. If BIOS reports
 19369                                  ;	errors, will call HARDERRRW for further action.
 19370                                  ; Output:
 19371                                  ;	Carry set if error (currently, user FAILed to I 24)
 19372                                  ; BP preserved. All other registers destroyed.
 19373                                  ;----------------------------------------------------------------------------
 19374                                  
 19375                                  
 19376                                  	;entry	DWRITE
 19377                                  DWRITE:
 19378 000041CB E81600                  	CALL	DSKWRITE
 19379 000041CE 7413                    	jz	short dw_ret_label	; Carry clear (retz)
 19380                                  
 19381                                  ;hkn; SS override
 19382 000041D0 36C606[1005]01          	MOV	BYTE [SS:READOP],1
 19383 000041D6 E83A00                  	call	HARDERRRW
 19384 000041D9 3C01                    	CMP	AL,1		; Check for retry
 19385 000041DB 74EE                    	JZ	short DWRITE
 19386 000041DD 3C03                    	CMP	AL,3		; Check for FAIL
 19387 000041DF F8                      	CLC
 19388 000041E0 7501                    	JNZ	short NO_CAR2 	; Ignore
 19389 000041E2 F9                      	STC
 19390                                  NO_CAR2:
 19391                                  dw_ret_label:
 19392 000041E3 C3                      	retn
 19393                                  
 19394                                  ;Break	<DSKWRITE -- PHYSICAL DISK WRITE>
 19395                                  ;---------------------------------------------------------------------------
 19396                                  ;
 19397                                  ; Procedure Name : DSKWRITE
 19398                                  ;
 19399                                  ; Inputs:
 19400                                  ;	DS:BX = Transfer addr
 19401                                  ;	CX = Number of sectors
 19402                                  ;	DX = Absolute record number	       (LOW)
 19403                                  ;	[HIGH_SECTOR] = Absolute record number (HIGH)
 19404                                  ;	ES:BP = Base of drive parameters
 19405                                  ; Function:
 19406                                  ;	Call BIOS to perform disk read
 19407                                  ; Outputs:
 19408                                  ;	DI = CX on entry
 19409                                  ;	CX = Number of sectors unsuccessfully transfered
 19410                                  ;	AX = Status word as returned by BIOS (error code in AL if error)
 19411                                  ;	Zero set if OK (from BIOS) (carry clear)
 19412                                  ;	Zero clear if error (carry clear)
 19413                                  ; SI Destroyed, others preserved
 19414                                  ;
 19415                                  ;----------------------------------------------------------------------------
 19416                                  
 19417                                  	;entry	DSKWRITE
 19418                                  DSKWRITE:
 19419 000041E4 51                      	PUSH	CX
 19420                                  	;mov	ah,[es:bp+16h]
 19421 000041E5 268A6616                	MOV	AH,[ES:BP+DPB.MEDIA]
 19422                                  	;mov	al,[es:bp+1]
 19423 000041E9 268A4601                	MOV	AL,[ES:BP+DPB.UNIT]
 19424 000041ED 53                      	PUSH	BX
 19425 000041EE 06                      	PUSH	ES
 19426 000041EF E85F0D                  	call	SETWRITE
 19427                                  DODSKOP:
 19428 000041F2 8CD9                    	MOV	CX,DS		; Save DS
 19429 000041F4 1F                      	POP	DS		; DS:BP points to DPB
 19430 000041F5 1E                      	PUSH	DS
 19431                                  	;lds	si,[ds:bp+12h]
 19432 000041F6 3EC57612                	LDS	SI,[ds:BP+DPB.DRIVER_ADDR] ; 07/09/2018
 19433 000041FA E8FD0C                  	call	DEVIOCALL2
 19434 000041FD 8ED9                    	MOV	DS,CX		; Restore DS
 19435 000041FF 07                      	POP	ES		; Restore ES
 19436 00004200 5B                      	POP	BX
 19437                                  
 19438                                  ;hkn; SS override
 19439 00004201 368B0E[1803]            	MOV	CX,[SS:CALLSCNT] ; Number of sectors transferred
 19440 00004206 5F                      	POP	DI
 19441 00004207 29F9                    	SUB	CX,DI
 19442 00004209 F7D9                    	NEG	CX		; Number of sectors not transferred
 19443                                  
 19444                                  ;hkn; SS override
 19445 0000420B 36A1[0903]              	MOV	AX,[SS:DEVCALL_REQSTAT]
 19446                                  	;test	ax,8000h
 19447 0000420F A90080                  	test	AX,STERR
 19448 00004212 C3                      	retn
 19449                                  
 19450                                  ;Break	<HardErrRW - map extended errors and call harderr>
 19451                                  ;---------------------------------------------------------------------------
 19452                                  ;
 19453                                  ; Procedure Name : HardErrRW
 19454                                  ;
 19455                                  ; Inputs:
 19456                                  ;	AX is error code from read or write
 19457                                  ;	Other registers set as per HARDERR
 19458                                  ; Function:
 19459                                  ;	Checks the error code for special extended
 19460                                  ;	errors and maps them if needed. Then invokes
 19461                                  ;	Harderr
 19462                                  ; Outputs:
 19463                                  ;	Of HARDERR
 19464                                  ; AX may be modified prior to call to HARDERR.
 19465                                  ; No other registers altered.
 19466                                  ;
 19467                                  ;---------------------------------------------------------------------------
 19468                                  
 19469                                  HARDERRRW:
 19470                                  	;cmp	al,0Fh
 19471 00004213 3C0F                    	CMP	AL,error_I24_wrong_disk
 19472 00004215 7512                    	JNZ	short DO_ERR				; Nothing to do
 19473                                  
 19474                                  	; MSDOS 3.3
 19475                                  	;push	ds
 19476                                  	;push	si
 19477                                  	;lds	si,[ss:CALLVIDRW]
 19478                                  	;mov	[ss:EXTERRPT+2], ds
 19479                                  	;mov	[ss:EXTERRPT], si
 19480                                  	;pop	si
 19481                                  	;pop	ds
 19482                                  
 19483                                  	; MSDOS 6.0
 19484 00004217 50                      	push	ax
 19485 00004218 36A1[1C03]              	mov	ax,[SS:CALLVIDRW]		; get ptr lo  ;smr;SS Override
 19486 0000421C 36A3[D602]              	mov	[ss:EXTERRPT],ax		; set ext err ptr lo
 19487 00004220 36A1[1E03]              	mov	ax,[SS:CALLVIDRW+2]		; get ptr hi from dev
 19488 00004224 36A3[D802]              	mov	[ss:EXTERRPT+2],ax		; set ext err ptr hi
 19489 00004228 58                      	pop	ax
 19490                                  DO_ERR:
 19491 00004229 E81C16                  	call	HARDERR
 19492 0000422C C3                      	retn
 19493                                  
 19494                                  ; 24/07/2018 - Retro DOS v3.0
 19495                                  
 19496                                  ;Break	<SETUP -- SETUP A DISK READ OR WRITE FROM USER>
 19497                                  ;----------------------------------------------------------------------------
 19498                                  ;
 19499                                  ; Procedure Name : SETUP
 19500                                  ;
 19501                                  ; Inputs:
 19502                                  ;	ES:DI point to SFT (value also in THISSFT)
 19503                                  ;	DMAAdd contains transfer address
 19504                                  ;	CX = Byte count
 19505                                  ;	DS = DOSDATA
 19506                                  ;   WARNING Stack must be clean, two ret addrs on stack, 1st of caller,
 19507                                  ;		2nd of caller of caller.
 19508                                  ; Outputs:
 19509                                  ;	    CX = byte count
 19510                                  ;	    [THISDPB] = Base of drive parameters if file
 19511                                  ;		      = Pointer to device header if device or NET
 19512                                  ;	    ES:DI Points to SFT
 19513                                  ;	    [NEXTADD] = Displacement of disk transfer within segment
 19514                                  ;	    [TRANS] = 0 (No transfers yet)
 19515                                  ;	    BytPos = Byte position in file
 19516                                  ;
 19517                                  ;	The following fields are relevant to local files (not devices) only:
 19518                                  ;
 19519                                  ;	    SecPos = Position of first sector (local files only)
 19520                                  ;	    [BYTSECPOS] = Byte position in first sector (local files only)
 19521                                  ;	    [CLUSNUM] = First cluster (local files only)
 19522                                  ;	    [SECCLUSPOS] = Sector within first cluster (local files only)
 19523                                  ;	    [THISDRV] = Physical unit number (local files only)
 19524                                  ;
 19525                                  ;      RETURNS ONE LEVEL UP WITH:
 19526                                  ;	   CX = 0
 19527                                  ;	   CARRY = Clear
 19528                                  ;	IF AN ERROR IS DETECTED
 19529                                  ; All other registers destroyed
 19530                                  ;----------------------------------------------------------------------------
 19531                                  
 19532                                  ;hkn; called from disk.asm. DS has been set up to DOSDATA.
 19533                                  
 19534                                  SETUP:
 19535                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 411Bh
 19536                                  
 19537                                  	;lds 	si,[es:di+7]
 19538 0000422D 26C57507                	LDS	SI,[ES:DI+SF_ENTRY.sf_devptr]
 19539                                  
 19540                                  ;hkn; SS override
 19541 00004231 368C1E[2605]            	MOV	[SS:THISDPB+2],DS
 19542                                  
 19543                                  ;hkn; SS is DOSDATA
 19544 00004236 16                      	push	ss
 19545 00004237 1F                      	pop	ds
 19546                                  
 19547 00004238 8936[2405]              	MOV	[THISDPB],SI
 19548                                  
 19549 0000423C 8B1E[DA02]              	MOV	BX,[DMAADD]
 19550 00004240 891E[5005]              	MOV	[NEXTADD],BX		;Set NEXTADD to start of Xaddr
 19551 00004244 C606[0F05]00            	MOV	BYTE [TRANS],0		;No transferes
 19552                                  	;mov	ax,[es:di+15h]
 19553 00004249 268B4515                	MOV	AX,[ES:DI+SF_ENTRY.sf_position]
 19554                                  	;mov	dx,[es:di+17h]
 19555 0000424D 268B5517                	MOV	DX,[ES:DI+SF_ENTRY.sf_position+2]
 19556 00004251 8916[6205]              	MOV	[BYTPOS+2],DX	;Set it
 19557 00004255 A3[6005]                	MOV	[BYTPOS],AX
 19558                                  	;test	word [es:di+5],8080h
 19559 00004258 26F745058080            	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet+devid_device
 19560 0000425E 7536                    	JNZ	short NOSETSTUFF	;Following not done on devs or NET
 19561 00004260 06                      	PUSH	ES
 19562 00004261 C42E[2405]              	LES	BP,[THISDPB]		;Point at the DPB
 19563                                  	;mov	bl,[es:bp+0]
 19564                                  	;MOV	BL,[ES:BP+DPB.drive]
 19565 00004265 268A5E00                	mov	bl,[es:bp]
 19566 00004269 881E[1105]              	MOV	[THISDRV],BL		;Set THISDRV
 19567                                  	;mov	bx,[es:bp+2]
 19568 0000426D 268B5E02                	MOV	BX,[ES:BP+DPB.SECTOR_SIZE]
 19569                                  
 19570                                  	; MSDOS 3.3
 19571 00004271 39DA                    	cmp	dx, bx
 19572 00004273 7336                    	jnb	short EOFERR
 19573 00004275 F7F3                    	div	bx
 19574 00004277 A3[5A05]                	mov	[SECPOS],ax
 19575 0000427A 8916[5E05]              	mov	[BYTSECPOS],dx
 19576 0000427E 89C2                    	mov	dx,ax
 19577                                  	;and	al,[es:bp+4]
 19578 00004280 26224604                	AND	AL,[ES:BP+DPB.CLUSTER_MASK]
 19579 00004284 A2[0E05]                	mov	[SECCLUSPOS],al
 19580 00004287 89C8                    	mov	ax,cx
 19581                                  	;mov	cl,[es:bp+5]
 19582 00004289 268A4E05                	MOV	CL,[ES:BP+DPB.CLUSTER_SHIFT]
 19583 0000428D D3EA                    	shr	dx,cl
 19584 0000428F 8916[5405]              	mov	[CLUSNUM],dx
 19585 00004293 07                      	pop	es
 19586 00004294 89C1                    	mov	cx,ax
 19587                                  
 19588                                  	; MSDOS 6.0
 19589                                  ;M039: Optimized this section.
 19590                                          ;PUSH    CX                            ;SHR32 and DIV32 use CX.
 19591                                  	;call	DIV32			      ;DX:AX/BX = CX:AX + DX (rem)
 19592                                  	;MOV	[BYTSECPOS],DX
 19593                                  	;MOV	[SecPos],AX
 19594                                  	;MOV	[SecPos+2],CX
 19595                                  	;MOV	DX,CX
 19596                                  
 19597                                  	;MOV	BX,AX
 19598                                  	;;and	bl,[es:bp+4]
 19599                                  	;AND	BL,[ES:BP+DPB.CLUSTER_MASK]
 19600                                  	;MOV	[SECCLUSPOS],BL
 19601                                  
 19602                                  	;call	SHR32			     ;(DX:AX SHR dpb_cluster_shift)
 19603                                  	;POP	CX			     ;CX = byte count.
 19604                                  	;JNZ	short EOFERR		     ;cluster number above 64k
 19605                                  	;CMP	AX,[ES:BP+DPB.MAX_CLUSTER]   ;>32mb    if > disk size ;AN000;
 19606                                  	;JA	short EOFERR		     ;>32mb    then EOF       ;AN000;
 19607                                  
 19608                                  	;MOV	[CLUSNUM],AX
 19609                                  	;POP	ES			     ; ES:DI point to SFT
 19610                                  ;M039
 19611                                  
 19612                                  NOSETSTUFF:
 19613 00004296 89C8                    	MOV	AX,CX		; AX = Byte count.
 19614 00004298 0306[DA02]              	ADD	AX,[DMAADD]	 ; See if it will fit in one segment
 19615 0000429C 730C                    	JNC	short setup_OK		; Must be less than 64K
 19616 0000429E A1[DA02]                	MOV	AX,[DMAADD]
 19617 000042A1 F7D8                    	NEG	AX		; Amount of room left in segment (know
 19618                                  				;    less than 64K since max value of CX
 19619                                  				;    is FFFF).
 19620 000042A3 7501                    	JNZ	short NoDec
 19621 000042A5 48                      	DEC	AX
 19622                                  NoDec:
 19623 000042A6 89C1                    	MOV	CX,AX		; Can do this much
 19624 000042A8 E309                    	JCXZ	NOROOM		; Silly user gave Xaddr of FFFF in segment
 19625                                  setup_OK:
 19626 000042AA C3                      	retn
 19627                                  
 19628                                  EOFERR:
 19629 000042AB 07                      	POP	ES		; ES:DI point to SFT
 19630 000042AC 31C9                    	XOR	CX,CX		; No bytes read
 19631                                  ;;;;;;;;;;; 7/18/86
 19632                                  	; MSDOS 3.3
 19633 000042AE C606[8C0F]01            	MOV	BYTE [DISK_FULL],1 ; set disk full flag
 19634                                  ;;;;;;;;;;;
 19635                                  NOROOM:
 19636 000042B3 5B                      	POP	BX		; Kill return address
 19637 000042B4 F8                      	CLC
 19638 000042B5 C3                      	retn			; RETURN TO CALLER OF CALLER
 19639                                  
 19640                                  ;Break	<BREAKDOWN -- CUT A USER READ OR WRITE INTO PIECES>
 19641                                  ;---------------------------------------------------------------------------
 19642                                  ;
 19643                                  ; Procedure Name : BREAKDOWN
 19644                                  ;
 19645                                  ; Inputs:
 19646                                  ;	CX = Length of disk transfer in bytes
 19647                                  ;	ES:BP = Base of drive parameters
 19648                                  ;	[BYTSECPOS] = Byte position within first sector
 19649                                  ;	DS = DOSDATA
 19650                                  ; Outputs:
 19651                                  ;	[BYTCNT1] = Bytes to transfer in first sector
 19652                                  ;	[SECCNT] = No. of whole sectors to transfer
 19653                                  ;	[BYTCNT2] = Bytes to transfer in last sector
 19654                                  ; AX, BX, DX destroyed. No other registers affected.
 19655                                  ;---------------------------------------------------------------------------
 19656                                  
 19657                                  BREAKDOWN:
 19658 000042B6 A1[5E05]                	MOV	AX,[BYTSECPOS]
 19659 000042B9 89CB                    	MOV	BX,CX
 19660 000042BB 09C0                    	OR	AX,AX
 19661 000042BD 740E                    	JZ	short SAVFIR	; Partial first sector?
 19662                                  	;sub	ax,[es:bp+2]
 19663 000042BF 262B4602                	SUB	AX,[ES:BP+DPB.SECTOR_SIZE]
 19664 000042C3 F7D8                    	NEG	AX		; Max number of bytes left in first sector
 19665 000042C5 29C3                    	SUB	BX,AX		; Subtract from total length
 19666 000042C7 7304                    	JAE	short SAVFIR
 19667 000042C9 01D8                    	ADD	AX,BX		; Don't use all of the rest of the sector
 19668 000042CB 31DB                    	XOR	BX,BX		; And no bytes are left
 19669                                  SAVFIR:
 19670 000042CD A3[6405]                	MOV	[BYTCNT1],AX
 19671 000042D0 89D8                    	MOV	AX,BX
 19672 000042D2 31D2                    	XOR	DX,DX
 19673                                  	;div	word [ES:BP+2]
 19674 000042D4 26F77602                	DIV	word [ES:BP+DPB.SECTOR_SIZE]  ; How many whole sectors?
 19675 000042D8 A3[6805]                	MOV	[SECCNT],AX
 19676 000042DB 8916[6605]              	MOV	[BYTCNT2],DX	; Bytes remaining for last sector
 19677                                  	; MSDOS 3.3
 19678                                  ;	OR	DX,[BYTCNT1]	; SMR ONESECTORFIX BUGBUG
 19679                                  ;	retnz			; NOT (BYTCNT1 = BYTCNT2 = 0)
 19680                                  ;	CMP	AX,1
 19681                                  ;	retnz
 19682                                  ;	MOV	AX,[ES:BP+DPB.SECTOR_SIZE] ; Buffer EXACT one sector I/O
 19683                                  ;	MOV	[BYTCNT2],AX
 19684                                  ;	MOV	[SECCNT],DX	; DX = 0
 19685                                  _RET45:
 19686 000042DF C3                      	retn
 19687                                  
 19688                                  ;----------------------------------------------------------------------------
 19689                                  ;
 19690                                  ; Procedure Name : READ_LOCK_VIOLATION
 19691                                  ;
 19692                                  ; ES:DI points to SFT. This entry used by NET_READ
 19693                                  ; Carry set if to return error (CX=0,AX=error_sharing_violation).
 19694                                  ; Else do retrys.
 19695                                  ; ES:DI,DS,CX preserved
 19696                                  ;
 19697                                  ;----------------------------------------------------------------------------
 19698                                  
 19699                                  READ_LOCK_VIOLATION:
 19700 000042E0 C606[1005]00            	MOV	byte [READOP],0
 19701                                  ERR_ON_CHECK:
 19702                                  	;test	word [es:di+2],8000h
 19703 000042E5 26F745020080            	TEST	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB
 19704 000042EB 750E                    	JNZ	short HARD_ERR
 19705 000042ED 51                      	PUSH	CX
 19706 000042EE 268A4D02                	MOV	CL,[ES:DI+SF_ENTRY.sf_mode]
 19707                                  	;and	cl,0F0h
 19708 000042F2 80E1F0                  	AND	CL,SHARING_MASK
 19709                                  	;cmp	cl,0
 19710 000042F5 80F900                  	CMP	CL,SHARING_COMPAT
 19711 000042F8 59                      	POP	CX
 19712 000042F9 7505                    	JNE	short NO_HARD_ERR
 19713                                  HARD_ERR:
 19714 000042FB E8FD2F                  	call	LOCK_VIOLATION
 19715 000042FE 73DF                    	jnc	short _RET45		; User wants Retrys
 19716                                  NO_HARD_ERR:
 19717 00004300 31C9                    	XOR	CX,CX			;No bytes transferred
 19718                                  	;mov	ax, 21h
 19719 00004302 B82100                  	MOV	AX,error_lock_violation
 19720 00004305 F9                      	STC
 19721 00004306 C3                      	retn
 19722                                  
 19723                                  ;----------------------------------------------------------------------------
 19724                                  ;
 19725                                  ; Procedure Name : WRITE_LOCK_VIOLATION
 19726                                  ;
 19727                                  ; Same as READ_LOCK_VIOLATION except for READOP.
 19728                                  ; This entry used by NET_WRITE
 19729                                  ;
 19730                                  ;----------------------------------------------------------------------------
 19731                                  
 19732                                  WRITE_LOCK_VIOLATION:
 19733 00004307 C606[1005]01            	MOV	byte [READOP],1
 19734 0000430C EBD7                    	JMP	short ERR_ON_CHECK
 19735                                  
 19736                                  ;Break	<DISKREAD -- PERFORM USER DISK READ>
 19737                                  ;----------------------------------------------------------------------------
 19738                                  ;
 19739                                  ; Procedure Name : DISKREAD
 19740                                  ;
 19741                                  ; Inputs:
 19742                                  ;	Outputs of SETUP
 19743                                  ; Function:
 19744                                  ;	Perform disk read
 19745                                  ; Outputs:
 19746                                  ;    Carry clear
 19747                                  ;	CX = No. of bytes read
 19748                                  ;	ES:DI point to SFT
 19749                                  ;	SFT offset and cluster pointers updated
 19750                                  ;    Carry set
 19751                                  ;	CX = 0
 19752                                  ;	ES:DI point to SFT
 19753                                  ;	AX has error code
 19754                                  ;----------------------------------------------------------------------------
 19755                                  
 19756                                  ;hkn; called from disk.asm. DS already set up.
 19757                                  
 19758                                  DISKREAD:
 19759                                  	;mov	ax,[es:di+11h]
 19760 0000430E 268B4511                	MOV	AX,[ES:DI+SF_ENTRY.sf_size]
 19761                                  	;mov	bx,[es:di+13h]
 19762 00004312 268B5D13                	MOV	BX,[ES:DI+SF_ENTRY.sf_size+2]
 19763 00004316 2B06[6005]              	SUB	AX,[BYTPOS]
 19764 0000431A 1B1E[6205]              	SBB	BX,[BYTPOS+2]
 19765 0000431E 7226                    	JB	short RDERR		;Read starts past EOF
 19766 00004320 750A                    	JNZ	short ENUF		;More than 64k to EOF
 19767 00004322 09C0                    	OR	AX,AX
 19768 00004324 7420                    	JZ	short RDERR		;Read starts at EOF
 19769 00004326 39C8                    	CMP	AX,CX
 19770 00004328 7302                    	JAE	short ENUF		;I/O fits
 19771 0000432A 89C1                    	MOV	CX,AX			;Limit read to up til EOF
 19772                                  ENUF:
 19773                                  	; MSDOS 3.3
 19774                                  	;test	byte [es:di+4],8
 19775                                  	;TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_volume_id
 19776                                  	;jnz	short SET_ACC_ERR
 19777                                  	;call	LOCK_CHECK
 19778                                  	;jnb	short _READ_OK
 19779                                  	;call	READ_LOCK_VIOLATION
 19780                                  	;jnb	short ENUF
 19781                                  	;retn
 19782                                  
 19783                                  	; MSDOS 6.0
 19784 0000432C E876FE                  	call	CHECK_READ_LOCK		;IFS. check read lock	;AN000;
 19785 0000432F 7301                    	JNC	short _READ_OK 		; There are no locks
 19786 00004331 C3                      	retn
 19787                                  
 19788                                  _READ_OK:
 19789 00004332 C42E[2405]              	LES	BP,[THISDPB]
 19790 00004336 E87DFF                  	CALL	BREAKDOWN
 19791 00004339 8B0E[5405]              	MOV	CX,[CLUSNUM]
 19792 0000433D E86E0F                  	call	FNDCLUS
 19793                                       	; MSDOS 6.0			;M022 conditional removed here
 19794 00004340 720F                    	JC	short SET_ACC_ERR_DS	; fix to take care of I24 fail
 19795                                  					; migrated from 330a - HKN
 19796 00004342 09C9                    	OR	CX,CX
 19797 00004344 7414                    	JZ	short SKIPERR
 19798                                  RDERR:
 19799 00004346 B40E                    	MOV	AH,0EH			;MS. read/data/fail ;AN000;
 19800 00004348 E99E01                  	jmp	WRTERR22
 19801                                  
 19802                                  ;RDLASTJ: 
 19803                                  	;JMP	RDLAST                  ;M039
 19804                                  
 19805                                  SETSFTJ2: 
 19806 0000434B E9E300                  	JMP	SETSFT
 19807                                  
 19808                                  CANOT_READ:
 19809                                  	; MSDOS 3.3
 19810 0000434E 59                      	POP	CX		;M039.
 19811                                  	; MSDOS 3.3 (& MSDOS 6.0)
 19812 0000434F 59                      	POP	CX              ;Clean stack.
 19813 00004350 5B                      	POP	BX
 19814                                  
 19815                                  	;entry	SET_ACC_ERR_DS
 19816                                  SET_ACC_ERR_DS:
 19817                                  ;hkn; SS is DOSDATA
 19818                                  	;Context DS
 19819 00004351 16                      	push	ss
 19820 00004352 1F                      	pop	ds
 19821                                  
 19822                                  	;entry	SET_ACC_ERR
 19823                                  SET_ACC_ERR:
 19824 00004353 31C9                    	XOR	CX,CX
 19825                                  	;mov	ax,5
 19826 00004355 B80500                  	MOV	AX,error_access_denied
 19827 00004358 F9                      	STC
 19828 00004359 C3                      	retn
 19829                                  
 19830                                  SKIPERR:
 19831 0000435A 8916[5205]              	MOV	[LASTPOS],DX
 19832 0000435E 891E[5405]              	MOV	[CLUSNUM],BX
 19833 00004362 833E[6405]00            	CMP	word [BYTCNT1],0
 19834 00004367 7405                    	JZ	short RDMID
 19835 00004369 E8B80F                  	call	BUFRD
 19836 0000436C 72E3                    	JC	short SET_ACC_ERR_DS
 19837                                  RDMID:
 19838 0000436E 833E[6805]00            	CMP	word [SECCNT],0
 19839 00004373 0F849D00                	JZ	RDLAST ; 10/08/2018
 19840 00004377 E82610                  	call	NEXTSEC
 19841 0000437A 72CF                    	JC	short SETSFTJ2
 19842 0000437C C606[0F05]01            	MOV	BYTE [TRANS],1		; A transfer is taking place
 19843                                  ONSEC:
 19844 00004381 8A16[0E05]              	MOV	DL,[SECCLUSPOS]	; (dx/DL = Extent start) ((dh = ?))
 19845 00004385 8B0E[6805]              	MOV	CX,[SECCNT]
 19846 00004389 8B1E[5405]              	MOV	BX,[CLUSNUM]
 19847                                  RDLP:
 19848 0000438D E84110                  	call	OPTIMIZE
 19849 00004390 72BF                    	JC	short SET_ACC_ERR_DS
 19850 00004392 57                      	PUSH	DI                      ;DI = Next physical cluster.
 19851 00004393 50                      	PUSH	AX                      ;AX = # of sectors remaining.
 19852 00004394 53                      	PUSH	BX			;[DMAADD+2]:BX = Transfer address.
 19853                                  	;mov	byte [ALLOWED],38h
 19854 00004395 C606[F702]38            	MOV	byte [ALLOWED],Allowed_RETRY+Allowed_FAIL+Allowed_IGNORE
 19855 0000439A 8E1E[DC02]              	MOV	DS,[DMAADD+2]
 19856                                  
 19857 0000439E 52                      	PUSH	DX                      ;[HIGH_SECTOR]:DX = phys. sector #.
 19858 0000439F 51                      	PUSH	CX                      ;CX = # of contiguous sectors to read.
 19859                                  
 19860                                  	; MSDOS 6.0
 19861                                  	;call	SET_RQ_SC_PARMS 	 ;LB. do this for SC ;AN000;
 19862                                  
 19863                                  	; MSDOS 3.3 (& MSDOS 6.0)
 19864 000043A0 E8C9FD                  	call	DREAD
 19865                                  
 19866                                  	; MSDOS 3.3 
 19867 000043A3 5B                      	pop	bx
 19868 000043A4 5A                      	pop	dx
 19869 000043A5 72A7                    	jc	short CANOT_READ
 19870 000043A7 01D3                    	add	bx,dx	; (bx = Extent end)
 19871 000043A9 268A4600                	mov	al,[es:bp] ; mov al,[es:bp+0]
 19872                                  	;mov	al,[ES:BP+DPB.DRIVE] 
 19873 000043AD E8F119                  	call	SETVISIT
 19874                                  	; ->***
 19875                                  
 19876                                  ;M039
 19877                                  	; MSDOS 6.0 
 19878                                  	;pop	cx
 19879                                  	;pop	dx
 19880                                  	;pop	WORD [TEMP_VAR]
 19881                                  	;jc	short CANOT_READ
 19882                                  
 19883                                  	;mov	[TEMP_VAR2],ds
 19884                                  
 19885                                  ;       CX = # of contiguous sectors read.  (These constitute a block of
 19886                                  ;            sectors, also termed an "Extent".)
 19887                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
 19888                                  ;       [TEMP_VAR2]:[TEMP_VAR] = Transfer address (destination data address).
 19889                                  ;       ES:BP -> Drive Parameter Block (DPB).
 19890                                  ;
 19891                                  ;	The Buffer Queue must now be scanned: the contents of any dirty
 19892                                  ;	buffers must be "read" into the transfer memory block, so that the
 19893                                  ;       transfer memory reflects the most recent data.
 19894                                  
 19895                                  	;call    DskRdBufScan
 19896                                  
 19897                                  	;;Context DS
 19898                                  	;push	ss
 19899                                  	;pop	ds
 19900                                          
 19901                                  	;pop	cx
 19902                                          ;pop	bx
 19903                                  
 19904                                  ;       CX = # of sector remaining.
 19905                                  ;       BX = Next physical cluster.
 19906                                  ;M039
 19907                                  	; 25/07/2018 - Retro DOS v3.0
 19908                                  	; ***->
 19909                                  	; MSDOS 3.3
 19910                                  	; IBMDOS.COM (1987) - Offset 42BDh
 19911                                  bufq:
 19912                                  ;	DX = Extent start.
 19913                                  ;	BX = Extent end.
 19914                                  ;	 AL = Drive #.
 19915                                  ;     DS:DI-> 1st buffer in queue.
 19916                                  
 19917                                  	;or	byte [di+5],20h
 19918 000043B0 804D0520                	or	byte [DI+BUFFINFO.buf_flags],buf_visit ; Bit 5 = reserved
 19919                                  	;cmp	al,[di+4]	
 19920 000043B4 3A4504                  	cmp	al,[DI+BUFFINFO.buf_ID]
 19921 000043B7 7541                    	jnz	short bufq3
 19922                                  	;cmp	[di+6],dx
 19923 000043B9 395506                  	cmp	[DI+BUFFINFO.buf_sector],dx
 19924 000043BC 723C                    	jb	short bufq3	; Jump if Extent start > buffer sector.
 19925                                  	;cmp	[di+6],bx
 19926 000043BE 395D06                  	cmp	[DI+BUFFINFO.buf_sector],bx
 19927 000043C1 7337                    	jnb	short bufq3	; Jump if Extent end >= buffer sector.
 19928                                  	
 19929                                  	; Buffer sector is in the Extent (contiguous sectors to read)
 19930                                  
 19931                                  ;       Buffer's sector is in Extent: if it is dirty, copy its contents to
 19932                                  ;	transfer memory; otherwise, just re-position it in the buffer queue
 19933                                  ;       as MRU (Most Recently Used).
 19934                                  
 19935                                  	;test	byte [di+5],40h
 19936 000043C3 F6450540                	test	byte [DI+BUFFINFO.buf_flags],buf_dirty ; Bit 6 = dirty flag
 19937 000043C7 742E                    	jz	short bufq2	; clear buffer, check the next buff sec
 19938 000043C9 58                      	pop	ax ; transfer address
 19939 000043CA 50                      	push	ax
 19940 000043CB 57                      	push	di
 19941 000043CC 52                      	push	dx
 19942                                  	;sub	dx,[di+6]
 19943 000043CD 2B5506                  	sub	dx,[DI+BUFFINFO.buf_sector]
 19944 000043D0 F7DA                    	neg	dx
 19945                                  
 19946                                  ;       DX = offset (in sectors) of buffer sector within Transfer memory
 19947                                  ;            block.
 19948                                  
 19949 000043D2 89FE                    	mov	si,di
 19950 000043D4 89C7                    	mov	di,ax
 19951 000043D6 89D0                    	mov	ax,dx
 19952                                  	;mov	cx,[es:bp+6]	
 19953 000043D8 268B4E02                	mov     cx,[ES:BP+DPB.SECTOR_SIZE] ; CX = sector size (in bytes).
 19954 000043DC F7E1                    	mul	cx
 19955 000043DE 01C7                    	add	di,ax
 19956                                  
 19957                                  	; 06/07/2019
 19958                                  	;lea	si,[si+16]
 19959 000043E0 8D7410                  	lea	si,[SI+BUFINSIZ] ;DS:SI -> buffer data.
 19960 000043E3 D1E9                           	shr	cx,1
 19961 000043E5 06                      	push	es
 19962 000043E6 368E06[DC02]            	mov	es,[SS:DMAADD+2]
 19963                                  
 19964                                  ;	   CX = sector size (in WORDs) ; CF=1 if odd # of bytes.
 19965                                  ;       DS:SI-> Buffer sector data.
 19966                                  ;       ES:DI-> Destination within Transfer memory block.
 19967                                  
 19968 000043EB F3A5                    	rep	movsw			;Copy buffer sector to Transfer memory
 19969                                  	;adc	cx,0                    ;CX=1 if odd # of bytes, else CX=0.
 19970                                  	;rep	movsb                   ;Copy last byte.
 19971 000043ED 7301                    	jnc	short bufq1
 19972 000043EF A4                      	movsb
 19973                                  bufq1:
 19974 000043F0 07                      	pop	es
 19975 000043F1 5A                      	pop	dx
 19976 000043F2 5F                      	pop	di
 19977 000043F3 268A4600                	mov	al,[es:bp]  ; mov al,[es:bp+0]
 19978                                  	;mov	al,[ES:BP+DPB.DRIVE]
 19979                                  bufq2:
 19980 000043F7 E8D419                  	call	SCANPLACE
 19981                                  bufq3:
 19982 000043FA E8BD19                  	call	SKIPVISIT
 19983 000043FD 75B1                    	jnz	short bufq
 19984                                  	
 19985 000043FF 16                      	push	ss
 19986 00004400 1F                      	pop	ds
 19987 00004401 59                      	pop	cx
 19988 00004402 59                      	pop	cx
 19989 00004403 5B                      	pop	bx	
 19990                                  bufq4:
 19991 00004404 E30E                    	JCXZ	RDLAST
 19992 00004406 E82D16                  	call	IsEOF			; test for eof on fat size
 19993 00004409 7326                    	JAE	short SETSFT
 19994 0000440B B200                    	MOV	DL,0
 19995 0000440D FF06[5205]              	INC	word [LASTPOS]		; We'll be using next cluster
 19996 00004411 E979FF                  	JMP	RDLP
 19997                                  
 19998                                  RDLAST:
 19999 00004414 A1[6605]                	MOV	AX,[BYTCNT2]
 20000 00004417 09C0                    	OR	AX,AX
 20001 00004419 7416                    	JZ	short SETSFT
 20002 0000441B A3[6405]                	MOV	[BYTCNT1],AX
 20003 0000441E E87F0F                  	call	NEXTSEC
 20004 00004421 720E                    	JC	short SETSFT
 20005 00004423 C706[5E05]0000          	MOV	word [BYTSECPOS],0
 20006 00004429 E8F80E                  	call	BUFRD
 20007                                  	; 10/08/2018
 20008 0000442C 7303                    	JNC	short SETSFT
 20009 0000442E E920FF                  	JMP	SET_ACC_ERR_DS
 20010                                  
 20011                                  ;------------------------------------------------------------------------------
 20012                                  ;
 20013                                  ; Procedure Name : SETSFT
 20014                                  ; Inputs:
 20015                                  ;	[NEXTADD],[CLUSNUM],[LASTPOS] set to determine transfer size
 20016                                  ;		and set cluster fields
 20017                                  ; Function:
 20018                                  ;	Update [THISSFT] based on the transfer
 20019                                  ; Outputs:
 20020                                  ;	sf_position, sf_lstclus, and sf_cluspos updated
 20021                                  ;	ES:DI points to [THISSFT]
 20022                                  ;	CX No. of bytes transferred
 20023                                  ;	Carry clear
 20024                                  ;
 20025                                  ;----------------------------------------------------------------------------
 20026                                  
 20027                                  	;entry	SETSFT
 20028                                  
 20029                                  ; 26/07/2018 - Retro DOS v3.0
 20030                                  SETSFT:
 20031 00004431 C43E[3605]              	LES	DI,[THISSFT]
 20032                                  
 20033                                  ; Same as SETSFT except ES:DI already points to SFT
 20034                                  	;entry	SETCLUS
 20035                                  SETCLUS:	
 20036 00004435 8B0E[5005]              	MOV	CX,[NEXTADD]
 20037 00004439 2B0E[DA02]              	SUB	CX,[DMAADD]		; Number of bytes transfered
 20038                                  	;test	word [es:di+5],80h
 20039 0000443D 26F745058000            	TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 20040 00004443 750E                    	JNZ	short ADDREC		; don't set clusters if device
 20041 00004445 A1[5405]                	MOV	AX,[CLUSNUM]
 20042                                  	;mov	[es:di+1Bh],ax
 20043 00004448 2689451B                	MOV	[ES:DI+SF_ENTRY.sf_lstclus],AX
 20044 0000444C A1[5205]                	MOV	AX,[LASTPOS]
 20045                                  	;mov	[es:di+19h],ax
 20046 0000444F 26894519                	MOV	[ES:DI+SF_ENTRY.sf_cluspos],AX
 20047                                  
 20048                                  ;----------------------------------------------------------------------------
 20049                                  ;
 20050                                  ; Procedure : AddRec
 20051                                  ; Inputs:
 20052                                  ;	ES:DI points to SFT
 20053                                  ;	CX is No. Bytes transferred
 20054                                  ; Function:
 20055                                  ;	Update the SFT offset based on the transfer
 20056                                  ; Outputs:
 20057                                  ;	sf_position updated to point to first byte after transfer
 20058                                  ;	ES:DI points to SFT
 20059                                  ;	CX No. of bytes transferred
 20060                                  ;	Carry clear
 20061                                  ;----------------------------------------------------------------------------
 20062                                  
 20063                                  	;entry	AddRec
 20064                                  ADDREC:
 20065 00004453 E309                    	JCXZ	RET28		; If no records read,  don't change position
 20066                                  	;add	[es:di+15h],cx
 20067 00004455 26014D15                	ADD	[ES:DI+SF_ENTRY.sf_position],CX  ; Update current position
 20068                                  	;adc	word [es:di+17h], 0
 20069 00004459 2683551700              	ADC	WORD [ES:DI+SF_ENTRY.sf_position+2],0
 20070                                  RET28:	
 20071 0000445E F8                      	CLC
 20072 0000445F C3                      	retn
 20073                                  
 20074                                  ; 25/07/2018
 20075                                  ; MSDOS 6.0
 20076                                  ;Break   <DskRdBufScan -- Disk Read Buffer Scan>
 20077                                  ;----------------------------------------------------------------------------
 20078                                  ;
 20079                                  ; Procedure Name : DskRdBufScan
 20080                                  ;
 20081                                  ; Inputs:
 20082                                  ;       CX = # of contiguous sectors read.  (These constitute a block of
 20083                                  ;            sectors, also termed an "Extent".)
 20084                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
 20085                                  ;       [TEMP_VAR2]:[TEMP_VAR] = Transfer address (destination data address).
 20086                                  ;       ES:BP -> Drive Parameter Block (DPB).
 20087                                  ;
 20088                                  ; Function:
 20089                                  ;	The Buffer Queue is scanned: the contents of any dirty buffers are
 20090                                  ;	"read" into the transfer memory block, so that the transfer memory
 20091                                  ;	reflects the most recent data.
 20092                                  ;
 20093                                  ; Outputs:
 20094                                  ;       Transfer memory updated as required.
 20095                                  ;
 20096                                  ; Uses:
 20097                                  ;       DS,AX,BX,CX,SI,DI destroyed.
 20098                                  ;       SS override for all global variables.
 20099                                  ;
 20100                                  ; Notes:
 20101                                  ;       FIRST_BUFF_ADDR is set-up to contain the LAST buffer to check, rather
 20102                                  ;	than the FIRST.
 20103                                  ;----------------------------------------------------------------------------
 20104                                  ;M039: Created
 20105                                  
 20106                                  ;procedure   DskRdBufScan,NEAR
 20107                                  ;
 20108                                  ;ASSUME  DS:NOTHING
 20109                                  ;
 20110                                  ;	cmp	[DirtyBufferCount],0	;Any dirty buffers?
 20111                                  ;	je	bufx			; -no, skip all work.
 20112                                  ;
 20113                                  ;       mov     bx,[HIGH_SECTOR]
 20114                                  ;       mov     si,bx
 20115                                  ;       add     cx,dx
 20116                                  ;       adc     si,0
 20117                                  ;
 20118                                  ;	call	GETCURHEAD		;DS:DI -> 1st buf in queue.
 20119                                  ;       mov     ax,[di].buf_prev
 20120                                  ;       mov     [FIRST_BUFF_ADDR],ax
 20121                                  ;
 20122                                  ;       Assert  ISDPB,<ES,BP>,"DISKREAD/bufchk"
 20123                                  ;	mov	al,es:[bp].dpb_drive
 20124                                  ;
 20125                                  ;;            BX:DX = Extent start.
 20126                                  ;;            SI:CX = Extent end + 1.
 20127                                  ;;               AL = Drive #.
 20128                                  ;;            DS:DI-> 1st buffer in queue.
 20129                                  ;;[FIRST_BUFF_ADDR] = Address offset of last buffer in queue.
 20130                                  ;
 20131                                  ;bufq:	cmp     al,BYTE PTR [di.buf_ID] ;Same drive?
 20132                                  ;	jne     bufq1        		;  -no, jump.
 20133                                  ;
 20134                                  ;       Cmp32   bx,dx,<WORD PTR [di.buf_sector+2]>,<WORD PTR [di.buf_sector]>
 20135                                  ;       ja	bufq1			;Jump if Extent start > buffer sector.
 20136                                  ;       Cmp32   si,cx,<WORD PTR [di.buf_sector+2]>,<WORD PTR [di.buf_sector]>
 20137                                  ;       ja	bufq2                   ;Jump if Extent end >= buffer sector.
 20138                                  ;
 20139                                  ;bufq1:	cmp     di,[FIRST_BUFF_ADDR]    ;Scanned entire buffer queue?
 20140                                  ;       mov     di,[di].buf_next        ; Set-up for next buffer.
 20141                                  ;       jne     bufq                    ; -no, do next buffer
 20142                                  ;
 20143                                  ;bufx:   return                          ;Exit.
 20144                                  ;
 20145                                  ;;       Buffer's sector is in Extent: if it is dirty, copy its contents to
 20146                                  ;;	transfer memory; otherwise, just re-position it in the buffer queue
 20147                                  ;;       as MRU (Most Recently Used).
 20148                                  ;
 20149                                  ;bufq2:	SaveReg <ax>
 20150                                  ;	testb   [di.buf_flags],buf_dirty ;Buffer dirty?
 20151                                  ;	jz      bufq3                    ; -no, jump.
 20152                                  ;
 20153                                  ;        SaveReg <cx,dx,si,di,es>
 20154                                  ;
 20155                                  ;	mov     ax,dx
 20156                                  ;	sub	ax, word ptr [di].buf_sector
 20157                                  ;	neg	ax
 20158                                  ;
 20159                                  ;;       AX = offset (in sectors) of buffer sector within Transfer memory
 20160                                  ;;            block.  (Note: the upper word of the sector # may be ignored
 20161                                  ;;	     since no more than 64k bytes will ever be read.  This 64k limit
 20162                                  ;;            is imposed by the input parameters of the disk read operation.)
 20163                                  ;
 20164                                  ;	lea	si,[di].BUFINSIZ	;DS:SI -> buffer data.
 20165                                  ;	mov     cx,es:[bp].dpb_sector_size ;CX = sector size (in bytes).
 20166                                  ;	mul     cx			;AX = offset (in bytes) of buf. sector
 20167                                  ;	mov     di,WORD PTR [TEMP_VAR]
 20168                                  ;	add	di,ax
 20169                                  ;	mov	es,WORD PTR [TEMP_VAR2]
 20170                                  ;	shr	cx,1
 20171                                  ;
 20172                                  ;;	   CX = sector size (in WORDs); CF=1 if odd # of bytes.
 20173                                  ;;       DS:SI-> Buffer sector data.
 20174                                  ;;       ES:DI-> Destination within Transfer memory block.
 20175                                  ;
 20176                                  ;	rep	movsw			;Copy buffer sector to Transfer memory
 20177                                  ;	adc	cx,0                    ;CX=1 if odd # of bytes, else CX=0.
 20178                                  ;	rep	movsb                   ;Copy last byte.
 20179                                  ;	RestoreReg <es,di,si,dx,cx>
 20180                                  ;
 20181                                  ;       DS:DI -> current buffer.
 20182                                  ;
 20183                                  ;bufq3:	mov     ax,di			;DS:AX -> Current buffer.
 20184                                  ;       invoke  SCANPLACE
 20185                                  ;       cmp	ax,[FIRST_BUFF_ADDR]    ;Last buffer?
 20186                                  ;       RestoreReg <ax>
 20187                                  ;       jnz    	bufq                   	; -no, jump.
 20188                                  ;       jmp     short bufx              ; -yes, exit.
 20189                                  ;
 20190                                  ;EndProc DskRdBufScan
 20191                                  
 20192                                  ;Break   <DISKWRITE -- PERFORM USER DISK WRITE>
 20193                                  ;----------------------------------------------------------------------------
 20194                                  ;
 20195                                  ; Procedure Name : DISKWRITE
 20196                                  ;
 20197                                  ; Inputs:
 20198                                  ;       Outputs of SETUP
 20199                                  ; Function:
 20200                                  ;       Perform disk write
 20201                                  ; Outputs:
 20202                                  ;    Carry clear
 20203                                  ;       CX = No. of bytes read
 20204                                  ;       ES:DI point to SFT
 20205                                  ;       SFT offset and cluster pointers updated
 20206                                  ;    Carry set
 20207                                  ;       CX = 0
 20208                                  ;       ES:DI point to SFT
 20209                                  ;       AX has error code
 20210                                  ;----------------------------------------------------------------------------
 20211                                  
 20212                                  ;hkn; called by DOS_WRITE. DS already set up at this point.
 20213                                  
 20214                                  DISKWRITE:
 20215                                  	; MSDOS 3.3
 20216                                  	; IBMDOS.COM - Offset 436Dh
 20217                                  	;;test	byte [es:di+4],8
 20218                                  	;TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_volume_id
 20219                                  	;jz	short write_cont
 20220                                  	;jmp	SET_ACC_ERR_DS
 20221                                  ;write_cont:
 20222                                  	;push	cx
 20223                                  	;or	cx, cx
 20224                                  	;jnz	short Not_Truncate
 20225                                  	;;mov	cx,-1
 20226                                  	;dec	cx
 20227                                  ;Not_Truncate:
 20228                                  	;call	LOCK_CHECK
 20229                                  	;pop	cx
 20230                                  	;jnb	short _WRITE_OK
 20231                                  	;call	WRITE_LOCK_VIOLATION
 20232                                  	;jnb	short DISKWRITE
 20233                                  	;retn
 20234                                  
 20235                                  	; MSDOS 6.0
 20236 00004460 E824FD                  	call	CHECK_WRITE_LOCK	;IFS. check write lock	;AN000;
 20237                                  	; 19/08/2018
 20238 00004463 7304                    	JNC	short _WRITE_OK		;IFS. lock check ok	;AN000;
 20239 00004465 C3                      	retn
 20240                                  
 20241                                  WRTEOFJ:
 20242 00004466 E99501                  	JMP     WRTEOF
 20243                                  
 20244                                  _WRITE_OK:
 20245                                   	; 27/07/2018
 20246                                  	; IBMDOS.COM - Offset 438Eh
 20247                                  	
 20248                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20249                                  	;and	word [es:di+5],0BFBFh
 20250 00004469 26816505BFBF            	AND     word [ES:DI+SF_ENTRY.sf_flags],~(sf_close_nodate|devid_file_clean)
 20251                                  				; Mark file as dirty, clear no date on close
 20252                                  	; MSDOS 6.0
 20253                                  	;MOV	AX,[ES:DI+SF_ENTRY.sf_size]		;M039
 20254                                          ;MOV	[TEMP_VAR],AX                           ;M039
 20255                                  	;MOV	AX,[ES:DI+SF_ENTRY.sf_size+2]		;M039
 20256                                          ;MOV	[TEMP_VAR2],AX                          ;M039
 20257                                  
 20258                                  ;	TEMP_VAR2:TEMP_VAR = Current file size (sf_size);M039
 20259                                  
 20260                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20261 0000446F C42E[2405]              	LES     BP,[THISDPB]
 20262                                  
 20263 00004473 E840FE                  	call	BREAKDOWN
 20264                                  
 20265 00004476 A1[6005]                	MOV     AX,[BYTPOS]
 20266 00004479 8B16[6205]              	MOV     DX,[BYTPOS+2]
 20267 0000447D E3E7                    	JCXZ    WRTEOFJ                 ;Make the file length = sf_position
 20268 0000447F 01C8                    	ADD     AX,CX
 20269 00004481 83D200                  	ADC     DX,0                    ;DX:AX = last byte to write + 1.
 20270                                  
 20271                                  	;mov	bx,[es:bp+2]
 20272 00004484 268B5E02                	MOV     BX,[ES:BP+DPB.SECTOR_SIZE]
 20273                                  
 20274                                  	; MSDOS 6.0
 20275                                  	;CALL	DIV32                   ;DX:AX/BX = CX:AX + DX (rem.).
 20276                                  	;MOV	SI,AX
 20277                                          ;MOV	[HIGH_SECTOR],CX
 20278                                  
 20279                                  ;       [HIGH_SECTOR]:SI = Last full sector to write.
 20280                                  
 20281                                  	;OR	DX,DX
 20282                                  	;PUSH	DX			;M039: Free DX for use by SHR32
 20283                                  	;MOV	DX,CX			;M039
 20284                                  	;JNZ	short CALCLUS
 20285                                  	;SUB	AX,1                    ;AX must be zero base indexed	;AC000;
 20286                                  	;SBB	DX,0			;M039 ;F.C. >32mb		;AN000;
 20287                                  
 20288                                  	; MSDOS 3.3
 20289 00004488 39DA                    	cmp	dx,bx
 20290 0000448A 7360                    	jnb	short WRTERR33
 20291 0000448C F7F3                    	div	bx
 20292 0000448E 89C3                    	mov	bx,ax
 20293 00004490 09D2                    	OR	DX,DX
 20294 00004492 7501                    	JNZ	short CALCLUS
 20295 00004494 48                      	dec	ax
 20296                                  
 20297                                  CALCLUS:
 20298                                  	; MSDOS 3.3
 20299                                  	;mov	cl,[es:bp+5]
 20300 00004495 268A4E05                	MOV	CL,[ES:BP+DPB.CLUSTER_SHIFT]
 20301 00004499 D3E8                    	shr	ax,cl
 20302 0000449B 50                      	push	ax
 20303 0000449C 52                      	push	dx
 20304 0000449D 06                      	push	es
 20305 0000449E C43E[3605]              	les	di,[THISSFT]
 20306                                  	;mov	ax,[es:di+11h]
 20307                                  	;mov	dx,[es:di+13h]
 20308 000044A2 268B4511                	mov	ax,[ES:DI+SF_ENTRY.sf_size]
 20309 000044A6 268B5513                	mov	dx,[ES:DI+SF_ENTRY.sf_size+2]
 20310 000044AA 07                      	pop	es
 20311                                  	;DX:AX = current file size (in bytes).
 20312                                  	;div	word [es:bp+2]
 20313 000044AB 26F77602                	div	word [ES:BP+DPB.SECTOR_SIZE]
 20314 000044AF 89C1                    	mov	cx,ax
 20315 000044B1 09D2                    	or	dx,dx
 20316 000044B3 7401                    	jz	short NORND
 20317 000044B5 40                      	inc	ax
 20318                                  
 20319                                  	; MSDOS 6.0
 20320                                  	;CALL	SHR32                   ;F.C. >32mb			;AN000;
 20321                                  	;POP	DX
 20322                                  
 20323                                  ;       AX = Last cluster to write.
 20324                                  ;       DX = # of bytes in last sector to write (the "tail").
 20325                                  ;       BX = ES:[BP.dpb_sector_size]
 20326                                  
 20327                                  	;PUSH	AX
 20328                                  	;PUSH	DX
 20329                                  ;M039
 20330                                  	;mov	dx,[TEMP_VAR2]
 20331                                  	;mov	ax,[TEMP_VAR]           ;DX:AX = current file size (in bytes).
 20332                                  	;call	DIV32           	;DX:AX/BX = CX:AX + DX (rem.)
 20333                                  	;mov	[TEMP_VAR2],cx
 20334                                  	;mov	[VALSEC+2],cx
 20335                                  	;mov	cx,ax
 20336                                  	;mov	bx,si
 20337                                  
 20338                                  ;       [HIGH_SECTOR]:BX = Last full sector to write.
 20339                                  ;          [VALSEC+2]:CX = Last full sector of current file.
 20340                                  ;         [TEMP_VAR2]:CX = Last full sector of current file.
 20341                                  ;                     DX = # of bytes in last sector of current file.
 20342                                  ;M039
 20343                                  	;OR	DX,DX
 20344                                  	;JZ	short NORND
 20345                                  	;ADD	AX,1            	;Round up if any remainder	;AC000;
 20346                                  	;ADC	word [VALSEC+2],0
 20347                                  NORND:	
 20348                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20349 000044B6 A3[5C05]                	MOV     [VALSEC],AX
 20350                                  
 20351                                  ;       [VALSEC] = Last sector of current file.
 20352                                  
 20353 000044B9 31C0                    	XOR     AX,AX
 20354 000044BB A3[7005]                	MOV     [GROWCNT],AX
 20355 000044BE A3[7205]                	MOV     [GROWCNT+2],AX
 20356 000044C1 58                      	POP     AX
 20357                                  
 20358                                  	; MSDOS 6.0
 20359                                  	;MOV	DI,[HIGH_SECTOR]        ;F.C. >32mb			;AN000;
 20360                                  	;CMP	DI,[TEMP_VAR2]		;M039; F.C. >32mb			;AN000;
 20361                                  	;JB	short NOGROW		;F.C. >32mb                             ;AN000;
 20362                                  	;JZ	short lowsec		;F.C. >32mb                             ;AN000;
 20363                                  	;SUB	BX,CX                   ;F.C. >32mb                             ;AN000;
 20364                                  	;SBB	DI,[TEMP_VAR2]   	;M039; F.C. >32mb di:bx no. of sectors	;AN000;
 20365                                  	;JMP	short yesgrow           ;F.C. >32mb                             ;AN000;
 20366                                  ;lowsec:
 20367                                  	;MOV	DI,0			;F.C. >32mb
 20368                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20369 000044C2 29CB                    	SUB	BX,CX			; Number of full sectors
 20370 000044C4 723D                    	JB	short NOGROW
 20371 000044C6 742E                    	JZ	short TESTTAIL
 20372                                  ;yesgrow:
 20373                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20374 000044C8 89D1                    	MOV     CX,DX
 20375 000044CA 93                      	XCHG    AX,BX
 20376                                  	;mul	word [es:bp+2]
 20377 000044CB 26F76602                	MUL	word [ES:BP+DPB.SECTOR_SIZE]  ; Bytes of full sector growth
 20378                                  	
 20379                                  	; MSDOS 6.0
 20380                                  	;MOV	[HIGH_SECTOR],DX         ;F.C. >32mb save dx                    ;AN000;
 20381                                  	;MOV	[TEMP_VAR2],AX    	 ;M039; F.C. >32mb save ax		;AN000;
 20382                                  	;MOV	AX,DI                    ;F.C. >32mb                            ;AN000;
 20383                                  	;;mul	word [es:bp+2]
 20384                                  	;MUL	word [ES:BP+DPB.SECTOR_SIZE] ;F.C. >32mb do higher word multiply ;AN000;
 20385                                  	
 20386                                  	;ADD	AX,[HIGH_SECTOR]         ;F.C. >32mb add lower value            ;AN000;
 20387                                  	;MOV	DX,AX                    ;F.C. >32mb DX:AX is the result of     ;AN000;
 20388                                  	;MOV	AX,[TEMP_VAR2]    	 ;M039; F.C. >32mb a 32 bit multiply	;AN000;
 20389                                  
 20390                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20391 000044CF 29C8                    	SUB     AX,CX           ; Take off current "tail"
 20392 000044D1 83DA00                  	SBB     DX,0            ; 32-bit extension
 20393 000044D4 01D8                    	ADD     AX,BX           ; Add on new "tail"
 20394 000044D6 83D200                  	ADC     DX,0            ; ripple tim's head off
 20395 000044D9 EB21                    	JMP     SHORT SETGRW
 20396                                  
 20397                                  HAVSTART:
 20398                                  	;int 3
 20399 000044DB 89C1                    	MOV     CX,AX
 20400 000044DD E8EE0D                  	call	SKPCLP
 20401                                  	;JCXZ	DOWRTJ
 20402 000044E0 E357                    	jcxz	DOWRT
 20403                                  
 20404 000044E2 E85D0F                  	call	ALLOCATE
 20405                                  	;JNC	short DOWRTJ
 20406 000044E5 7352                    	jnc	short DOWRT
 20407                                  
 20408                                  	;entry   WRTERR
 20409                                  WRTERR:
 20410 000044E7 B40F                    	MOV     AH,0FH                          ;MS. write/data/fail/abort      ;AN000;
 20411                                  
 20412                                  	;entry WRTERR22
 20413                                  WRTERR22:
 20414 000044E9 A0[1105]                	MOV     AL,[THISDRV]                    ;MS.                            ;AN000;
 20415                                  
 20416                                  	; 27/07/2018
 20417                                  WRTERR33:
 20418                                  	;MOV	CX,0                    	;No bytes transferred
 20419 000044EC 31C9                    	XOR     CX,CX
 20420                                  					
 20421 000044EE C43E[3605]              	LES     DI,[THISSFT]
 20422                                  	;CLC	; 19/05/2019
 20423 000044F2 C3                      	retn
 20424                                  
 20425                                  ;DOWRTJ: 
 20426                                  ;	JMP     short DOWRT
 20427                                  
 20428                                  ACC_ERRWJ:
 20429                                  	; 10/08/2018
 20430                                  	;JMP	SET_ACC_ERRW
 20431 000044F3 E95BFE                  	jmp	SET_ACC_ERR_DS
 20432                                  
 20433                                  TESTTAIL:
 20434 000044F6 29D0                    	SUB     AX,DX
 20435 000044F8 7609                    	JBE	short NOGROW
 20436 000044FA 31D2                    	XOR     DX,DX
 20437                                  SETGRW:
 20438 000044FC A3[7005]                	MOV	[GROWCNT],AX
 20439 000044FF 8916[7205]              	MOV	[GROWCNT+2],DX
 20440                                  NOGROW:
 20441 00004503 58                      	POP     AX
 20442 00004504 8B0E[5405]              	MOV     CX,[CLUSNUM]    ; First cluster accessed
 20443 00004508 E8A30D                  	call	FNDCLUS
 20444 0000450B 72E6                    	JC	short ACC_ERRWJ
 20445 0000450D 891E[5405]              	MOV     [CLUSNUM],BX
 20446 00004511 8916[5205]              	MOV     [LASTPOS],DX
 20447                                  
 20448 00004515 29D0                    	SUB     AX,DX           ; Last cluster minus current cluster
 20449 00004517 7420                    	JZ	short DOWRT	; If we have last clus, we must have first
 20450 00004519 E3C0                    	JCXZ    HAVSTART        ; See if no more data
 20451 0000451B 51                      	PUSH    CX              ; No. of clusters short of first
 20452 0000451C 89C1                    	MOV     CX,AX
 20453 0000451E E8210F                  	call	ALLOCATE
 20454 00004521 59                      	POP     CX
 20455 00004522 72C3                    	JC	short WRTERR
 20456 00004524 8B16[5205]              	MOV     DX,[LASTPOS]
 20457 00004528 42                      	INC     DX
 20458 00004529 49                      	DEC     CX
 20459 0000452A 7405                    	JZ	short NOSKIP
 20460 0000452C E89F0D                  	call	SKPCLP
 20461 0000452F 72C2                    	JC	short ACC_ERRWJ
 20462                                  NOSKIP:
 20463 00004531 891E[5405]              	MOV     [CLUSNUM],BX
 20464 00004535 8916[5205]              	MOV     [LASTPOS],DX
 20465                                  DOWRT:
 20466 00004539 833E[6405]00            	CMP     word [BYTCNT1],0
 20467 0000453E 7409                    	JZ	short WRTMID
 20468 00004540 8B1E[5405]              	MOV     BX,[CLUSNUM]
 20469 00004544 E8140E                  	call	BUFWRT
 20470 00004547 72AA                    	JC	short ACC_ERRWJ
 20471                                  	;JC	short SET_ACC_ERRW
 20472                                  WRTMID:
 20473 00004549 A1[6805]                	MOV     AX,[SECCNT]
 20474 0000454C 09C0                    	OR      AX,AX
 20475 0000454E 7471                    	JZ	short WRTLAST		;M039
 20476 00004550 0106[5A05]              	ADD     [SECPOS],AX
 20477                                  	; MSDOS 6.0
 20478                                  	;ADC	WORD [SECPOS+2],0	;F.C. >32mb 	;AN000;
 20479 00004554 E8490E                  	call	NEXTSEC
 20480 00004557 729A                    	JC	short ACC_ERRWJ
 20481                                  	;JC	short SET_ACC_ERRW	;M039
 20482 00004559 C606[0F05]01            	MOV     BYTE [TRANS],1		; A transfer is taking place
 20483 0000455E 8A16[0E05]              	MOV     DL,[SECCLUSPOS] 	; (dx/DL = Extent start) ((dh = ?))
 20484 00004562 8B1E[5405]              	MOV     BX,[CLUSNUM]
 20485 00004566 8B0E[6805]              	MOV     CX,[SECCNT]
 20486                                  WRTLP:
 20487 0000456A E8640E                  	call	OPTIMIZE
 20488 0000456D 7284                    	JC	short ACC_ERRWJ
 20489                                  	;JC	short SET_ACC_ERRW
 20490                                  
 20491                                  ;M039
 20492                                  ;       DI = Next physical cluster.
 20493                                  ;       AX = # sectors remaining.
 20494                                  ;       [DMAADD+2]:BX = transfer address (source data address).
 20495                                  ;       CX = # of contiguous sectors to write. (These constitute a block of
 20496                                  ;	     sectors, also termed an "Extent".)
 20497                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
 20498                                  ;       ES:BP -> Drive Parameter Block (DPB).
 20499                                  ;
 20500                                  ;       Purge the Buffer Queue and the Secondary Cache of any buffers which
 20501                                  ;	are in Extent; they are being over-written.
 20502                                  
 20503 0000456F 57                      	push    di
 20504 00004570 50                      	push    ax
 20505                                  
 20506                                          ; MSDOS 6.0
 20507                                  	;call	DskWrtBufPurge          ;DS trashed.
 20508                                  ;ASSUME DS:NOTHING
 20509                                  ;M039
 20510                                  	; MSDOS 3.3
 20511                                  	; IBMDOS.COM (1987) - Offset 4497h
 20512 00004571 52                      	push	dx
 20513 00004572 53                      	push	bx
 20514 00004573 268A4600                	mov	al,[es:bp]
 20515                                  	;mov	AL,[ES:BP+DPB.DRIVE] ; mov al,[es:bp+0]
 20516 00004577 89CB                    	mov	bx,cx
 20517 00004579 01D3                    	add	bx,dx	; (bx = Extent end)
 20518                                  
 20519                                  ;	DX = Extent start.
 20520                                  ;	BX = Extent end.
 20521                                  ;	 AL = Drive #.
 20522                                  
 20523 0000457B E82318                  	call	SETVISIT
 20524                                  
 20525                                  wbufq1:
 20526                                  	;or	byte [di+5],20h
 20527 0000457E 804D0520                	or	byte [DI+BUFFINFO.buf_flags],buf_visit ; Bit 5 = reserved
 20528                                  	;cmp	al,[di+4]	
 20529 00004582 3A4504                  	cmp	al,[DI+BUFFINFO.buf_ID]
 20530 00004585 7512                    	jnz	short wbufq2	; Jump if Extent start > buffer sector.
 20531                                  	;cmp	[di+6],dx
 20532 00004587 395506                  	cmp	[DI+BUFFINFO.buf_sector],dx
 20533 0000458A 720D                    	jb	short wbufq2
 20534                                  	;cmp	[di+6],bx
 20535 0000458C 395D06                  	cmp	[DI+BUFFINFO.buf_sector],bx
 20536 0000458F 7308                    	jnb	short wbufq2	; Jump if Extent end >= buffer sector.
 20537                                  
 20538                                  	; Buffer sector is in the Extent
 20539                                  
 20540                                  	;mov	word [di+4],20FFh
 20541 00004591 C74504FF20              	mov	word [DI+BUFFINFO.buf_ID],20FFh
 20542                                  					; .buf_ID,    AL = FFh (Free buffer)
 20543                                  					; .buf_flags, AH = 0, reset/clear
 20544 00004596 E83518                  	call	SCANPLACE
 20545                                  wbufq2:
 20546 00004599 E81E18                  	call	SKIPVISIT
 20547 0000459C 75E0                    	jnz	short wbufq1
 20548 0000459E 5B                      	pop	bx
 20549 0000459F 5A                      	pop	dx
 20550                                  	
 20551                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20552                                  ;hkn; SS override for DMAADD and ALLOWED
 20553 000045A0 368E1E[DC02]            	MOV     DS,[SS:DMAADD+2]
 20554                                  	;mov	byte [ss:ALLOWED],38h
 20555 000045A5 36C606[F702]38          	MOV	byte [SS:ALLOWED],Allowed_RETRY+Allowed_FAIL+Allowed_IGNORE
 20556                                  
 20557                                  ;	put logic from DWRITE in-line here so we can modify it
 20558                                  ;	for DISK FULL conditions.
 20559                                  
 20560                                  DWRITE_LUP:
 20561                                  	; MSDOS 6.0
 20562                                  	;call	DSKWRITE
 20563                                  	;jz	short DWRITE_OKAY
 20564                                  
 20565                                  ;;	int	3
 20566                                  	;cmp	al,error_handle_Disk_Full	; compressed volume full?
 20567                                  	;jz	short DWRITE_DISK_FULL
 20568                                  
 20569                                  ;;hkn; SS override
 20570                                  	;MOV	BYTE [SS:READOP],1
 20571                                  	;call	HARDERRRW
 20572                                  	;CMP	AL,1		; Check for retry
 20573                                  	;JZ	short DWRITE_LUP
 20574                                  	;CMP	AL,3		; Check for FAIL
 20575                                  	;CLC
 20576                                  	;JNZ	short DWRITE_OKAY ; Ignore
 20577                                  	;STC
 20578                                  
 20579                                  	; MSDOS 3.3
 20580 000045AB E81DFC                  	call	DWRITE
 20581                                  
 20582                                  DWRITE_OKAY:
 20583                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20584                                  
 20585 000045AE 59                      	POP     CX
 20586 000045AF 5B                      	POP     BX
 20587                                  
 20588                                  ;       CX = # sectors remaining.
 20589                                  ;       BX = Next physical cluster.
 20590                                  
 20591                                  ;hkn; SS override
 20592                                          ;Context DS
 20593 000045B0 16                      	push	ss
 20594 000045B1 1F                      	pop	ds
 20595                                  
 20596 000045B2 720A                    	JC      SET_ACC_ERRW
 20597 000045B4 E30B                    	JCXZ    WRTLAST
 20598 000045B6 B200                    	MOV     DL,0
 20599 000045B8 FF06[5205]              	INC     word [LASTPOS]	; We'll be using next cluster
 20600 000045BC EBAC                    	JMP     short WRTLP
 20601                                  
 20602                                  	; 09/08/2018
 20603                                  	; MSDOS 6.0
 20604                                  ;DWRITE_DISK_FULL:
 20605                                  	;;Context DS		;SQ 3-5-93 DS must be setup on return!
 20606                                  	;push	ss
 20607                                  	;pop	ds
 20608                                  	;pop	cx		; unjunk stack
 20609                                  	;pop	bx
 20610                                  	;mov	byte [DISK_FULL],1
 20611                                  	;stc
 20612                                  	;jmp	short WRTERR	; go to disk full exit
 20613                                  
 20614                                  SET_ACC_ERRW:
 20615 000045BE E990FD                  	jmp	SET_ACC_ERR_DS
 20616                                  
 20617                                  WRTLAST:
 20618 000045C1 A1[6605]                	MOV     AX,[BYTCNT2]
 20619 000045C4 09C0                    	OR      AX,AX
 20620 000045C6 7413                    	JZ	short FINWRT
 20621 000045C8 A3[6405]                	MOV     [BYTCNT1],AX
 20622 000045CB E8D20D                  	call	NEXTSEC
 20623 000045CE 72EE                    	JC	short SET_ACC_ERRW
 20624 000045D0 C706[5E05]0000          	MOV     word [BYTSECPOS],0
 20625 000045D6 E8820D                  	call	BUFWRT
 20626 000045D9 72E3                    	JC	short SET_ACC_ERRW
 20627                                  FINWRT:
 20628 000045DB C43E[3605]              	LES     DI,[THISSFT]
 20629 000045DF A1[7005]                	MOV     AX,[GROWCNT]
 20630 000045E2 8B0E[7205]              	MOV     CX,[GROWCNT+2]
 20631 000045E6 09C0                    	OR      AX,AX
 20632 000045E8 7502                    	JNZ	short UPDATE_size
 20633 000045EA E30F                    	JCXZ    SAMSIZ
 20634                                  UPDATE_size:
 20635                                  	;add	[es:di+11h],ax
 20636 000045EC 26014511                	ADD     [ES:DI+SF_ENTRY.sf_size],AX
 20637                                  	;adc	[es:di+13h],cx
 20638 000045F0 26114D13                	ADC     [ES:DI+SF_ENTRY.sf_size+2],CX
 20639                                  ;
 20640                                  ; Make sure that all other SFT's see this growth also.
 20641                                  ;
 20642 000045F4 B80100                  	MOV     AX,1
 20643                                  ;if installed
 20644                                  	;Call	JShare + 14 * 4
 20645 000045F7 FF1E[9400]              	call    far [JShare+(14*4)]	; 14 = ShSU
 20646                                  ;else
 20647                                  ;	Call    ShSU
 20648                                  ;endif
 20649                                  
 20650                                  SAMSIZ:
 20651 000045FB E937FE                  	jmp	SETCLUS	; ES:DI already points to SFT
 20652                                  
 20653                                  WRTEOF:
 20654 000045FE 89C1                    	MOV     CX,AX
 20655 00004600 09D1                    	OR      CX,DX
 20656 00004602 7464                    	JZ	short KILLFIL
 20657 00004604 83E801                  	SUB     AX,1
 20658 00004607 83DA00                  	SBB     DX,0
 20659                                  
 20660                                  	; MSDOS 3.3
 20661                                  	;div	word [es:bp+2]
 20662 0000460A 26F77602                	div	word [ES:BP+DPB.SECTOR_SIZE]
 20663                                  	;mov	cl,[es:bp+5]
 20664 0000460E 268A4E05                	mov	cl,[ES:BP+DPB.CLUSTER_SHIFT] 
 20665 00004612 D3E8                    	shr     ax,cl
 20666                                  
 20667                                  	; MSDOS 6.0
 20668                                  	;PUSH	BX
 20669                                  	;MOV	BX,[ES:BP+DPB.SECTOR_SIZE]    ;F.C. >32mb                       ;AN000;
 20670                                  	;CALL	DIV32                         ;F.C. >32mb                       ;AN000;
 20671                                  	;POP	BX			      ;F.C. >32mb			;AN000;
 20672                                  	;MOV	DX,CX			      ;M039
 20673                                          ;MOV	[HIGH_SECTOR],CX              ;M039: Probably extraneous, but not sure.
 20674                                  	;CALL	SHR32                         ;F.C. >32mb                       ;AN000;
 20675                                  
 20676 00004614 89C1                    	MOV     CX,AX
 20677 00004616 E8950C                  	call	FNDCLUS
 20678                                  SET_ACC_ERRWJ2:
 20679 00004619 72A3                    	JC	short SET_ACC_ERRW
 20680                                  
 20681 0000461B E326                    	JCXZ    RELFILE
 20682 0000461D E8220E                  	call	ALLOCATE
 20683 00004620 721E                    	JC	short WRTERRJ              ;;;;;;;;; disk full
 20684                                  
 20685                                  UPDATE:
 20686 00004622 C43E[3605]              	LES	DI,[THISSFT]
 20687 00004626 A1[6005]                	MOV	AX,[BYTPOS]
 20688                                  	;mov	[es:di+11h],ax
 20689 00004629 26894511                	MOV	[ES:DI+SF_ENTRY.sf_size],AX
 20690 0000462D A1[6205]                	MOV	AX,[BYTPOS+2]
 20691                                  	;mov	[es:di+13h],ax
 20692 00004630 26894513                	MOV	[ES:DI+SF_ENTRY.sf_size+2],AX
 20693                                  ;
 20694                                  ; Make sure that all other SFT's see this growth also.
 20695                                  ;
 20696 00004634 B80200                  	MOV     AX,2
 20697                                  ;if installed
 20698                                  	;Call	JShare + 14 * 4
 20699 00004637 FF1E[9400]              	call    far [JShare+(14*4)]	; 14 = ShSU
 20700                                  ;else
 20701                                  ;	Call    ShSU
 20702                                  ;endif
 20703 0000463B 31C9                    	XOR     CX,CX
 20704 0000463D E913FE                  	jmp	ADDREC
 20705                                  
 20706                                  WRTERRJ: 
 20707 00004640 E9A4FE                  	JMP     WRTERR
 20708                                  
 20709                                  ;;;;;;;;;;;;;;;; 7/18/86
 20710                                  ;;;;;;;;;;;;;;;;
 20711                                  
 20712                                  RELFILE:
 20713                                  	; MSDOS 6.0
 20714 00004643 06                      	PUSH    ES                    ;AN002; BL Reset Lstclus and cluspos to
 20715 00004644 C43E[3605]              	LES     DI,[THISSFT]          ;AN002; BL beginning of file if current
 20716 00004648 263B5519                	CMP     DX,[ES:DI+SF_ENTRY.sf_cluspos]	;AN002; BL cluspos is past EOF.
 20717 0000464C 730E                    	JAE	short SKIPRESET	      		;AN002; BL
 20718 0000464E 26C745190000            	MOV     word [ES:DI+SF_ENTRY.sf_cluspos],0 ;AN002; BL
 20719 00004654 268B550B                	MOV     DX,[ES:DI+SF_ENTRY.sf_firclus]	;AN002; BL
 20720 00004658 2689551B                	MOV     [ES:DI+SF_ENTRY.sf_lstclus],DX	;AN002; BL
 20721                                  SKIPRESET:                            		;AN002; BL
 20722 0000465C 07                      	POP     ES                    		;AN002; BL
 20723                                  ;
 20724 0000465D BAFFFF                  	MOV     DX,0FFFFH
 20725 00004660 E8880E                  	call	RELBLKS
 20726 00004663 73BD                    	jnc	short UPDATE
 20727                                  SET_ACC_ERRWJJ:
 20728                                  	;JC	short SET_ACC_ERRWJ2
 20729                                  	;JMP	SHORT UPDATE
 20730 00004665 E9E9FC                  	jmp	SET_ACC_ERR_DS
 20731                                  
 20732                                  KILLFIL:
 20733 00004668 31DB                    	XOR     BX,BX
 20734 0000466A 06                      	PUSH    ES
 20735 0000466B C43E[3605]              	LES     DI,[THISSFT]
 20736 0000466F 26895D19                	mov	[es:di+19h],bx
 20737 00004673 26895D19                	MOV	[ES:DI+SF_ENTRY.sf_cluspos],BX
 20738                                  	;mov	[es:di+1Bh],bx
 20739 00004677 26895D1B                	MOV	[ES:DI+SF_ENTRY.sf_lstclus],BX
 20740                                  	;xchg	bx,[es:di+0Bh]
 20741 0000467B 26875D0B                	XCHG    BX,[ES:DI+SF_ENTRY.sf_firclus]
 20742 0000467F 07                      	POP	ES
 20743                                  
 20744 00004680 09DB                    	OR	BX,BX
 20745                                  	;JZ	short UPDATEJ
 20746 00004682 749E                    	jz	short UPDATE
 20747                                  ;; 10/23/86 FastOpen update
 20748 00004684 06                      	PUSH	ES              ; since first cluster # is 0
 20749 00004685 55                      	PUSH	BP              ; we must delete the old cache entry
 20750 00004686 50                      	PUSH	AX
 20751 00004687 51                      	PUSH	CX
 20752 00004688 52                      	PUSH	DX
 20753 00004689 C42E[2405]              	LES	BP,[THISDPB]             ; get current DPB
 20754 0000468D 268A5600                	mov	dl,[ES:BP] ; mov al,[es:bp+0]
 20755                                  	;MOV	DL,[ES:BP+DPB.DRIVE]	; get current drive
 20756 00004691 89D9                    	MOV	CX,BX                    ; first cluster #
 20757 00004693 B402                    	MOV	AH,2                     ; delete cache entry by drive:firclus
 20758 00004695 E877ED                  	call	FastOpen_Update          ; call fastopen
 20759 00004698 5A                      	POP	DX
 20760 00004699 59                      	POP	CX
 20761 0000469A 58                      	POP	AX
 20762 0000469B 5D                      	POP	BP
 20763 0000469C 07                      	POP	ES
 20764                                  ;; 10/23/86 FastOpen update
 20765                                  
 20766 0000469D E8490E                  	call	RELEASE
 20767 000046A0 72C3                    	JC	short SET_ACC_ERRWJJ
 20768                                  UpDateJ:
 20769 000046A2 E97DFF                  	JMP	UPDATE ; 10/08/2018
 20770                                  
 20771                                  ;Break   <DskWrtBufPurge -- Disk Write Buffer Purge>
 20772                                  ;----------------------------------------------------------------------------
 20773                                  ;
 20774                                  ; Procedure Name : DskWrtBufPurge
 20775                                  ;
 20776                                  ; Inputs:
 20777                                  ;       CX = # of contiguous sectors to write. (These constitute a block of
 20778                                  ;	     sectors, also termed an "Extent".)
 20779                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
 20780                                  ;       ES:BP -> Drive Parameter Block (DPB).
 20781                                  ;
 20782                                  ; Function:
 20783                                  ;       Purge the Buffer Queue and the Secondary Cache of any buffers which
 20784                                  ;	are in Extent; they are being over-written.
 20785                                  ;
 20786                                  ; Outputs:
 20787                                  ;       (Same as Input.)
 20788                                  ; Uses:
 20789                                  ;       All registers except DS,AX,SI,DI preserved.
 20790                                  ;       SS override for all global variables.
 20791                                  ;----------------------------------------------------------------------------
 20792                                  ;M039: Created
 20793                                  
 20794                                  ;procedure   DskWrtBufPurge,NEAR
 20795                                  ;
 20796                                  ;ASSUME  DS:NOTHING
 20797                                  ;
 20798                                  ;       SaveReg <bx,cx>
 20799                                  ;       mov	bx,[HIGH_SECTOR]	;BX:DX = Extent start (sector #).
 20800                                  ;       mov     si,bx
 20801                                  ;       add     cx,dx
 20802                                  ;       adc     si,0                    ;SI:CX = Extent end + 1.
 20803                                  ;
 20804                                  ;	Assert  ISDPB,<ES,BP>,"DskWrtBufPurge"
 20805                                  ;	mov     al,es:[bp.dpb_drive]
 20806                                  ;
 20807                                  ;;      BX:DX = Extent start.
 20808                                  ;;      SI:CX = Extent end + 1.
 20809                                  ;;      AL = Drive #
 20810                                  ;
 20811                                  ;	cmp     [SC_CACHE_COUNT],0      ;Secondary cache in-use?
 20812                                  ;	je      nosc                    ; -no, jump.
 20813                                  ;
 20814                                  ;;      If any of the sectors to be written are in the secondary cache (SC),
 20815                                  ;;      invalidate the entire SC. (This is an optimization; we really only
 20816                                  ;;	need to invalidate those sectors which intersect, but that's slower.)
 20817                                  ;
 20818                                  ;       cmp     al,[CURSC_DRIVE]        ;Same drive?
 20819                                  ;       jne     nosc                    ; -no, jump.
 20820                                  ;
 20821                                  ;       push    ax
 20822                                  ;       mov     ax,[CURSC_SECTOR]
 20823                                  ;       mov     di,[CURSC_SECTOR+2]     ;DI:AX = SC start.
 20824                                  ;       Cmp32   si,cx,di,ax             ;Extent end < SC start?
 20825                                  ;       jbe     sc5                     ; -yes, jump.
 20826                                  ;       add     ax,[SC_CACHE_COUNT]
 20827                                  ;       adc     di,0                    ;DI:AX = SC end + 1.
 20828                                  ;       Cmp32   bx,dx,di,ax             ;Extent start > SC end?
 20829                                  ;       jae     sc5                     ; -yes, jump.
 20830                                  ;       mov     [SC_STATUS],0           ;Extent intersects SC: invalidate SC.
 20831                                  ;sc5:	pop     ax
 20832                                  ;
 20833                                  ;;	Free any buffered sectors which are in Extent; they are being over-
 20834                                  ;;	written.
 20835                                  ;
 20836                                  ;nosc:	invoke  GETCURHEAD              ;DS:DI -> first buffer in queue.
 20837                                  ;
 20838                                  ;bufq:	cmp     al,BYTE PTR [di.buf_ID] ;Same drive?
 20839                                  ;	jne     bufq5                   ; -no, jump.
 20840                                  ;
 20841                                  ;       Cmp32   bx,dx,<WORD PTR [di.buf_sector+2]>,<WORD PTR [di.buf_sector]>
 20842                                  ;       ja	bufq5			;Jump if Extent start > buffer sector.
 20843                                  ;       Cmp32   si,cx,<WORD PTR [di.buf_sector+2]>,<WORD PTR [di.buf_sector]>
 20844                                  ;       jbe	bufq5                   ;Jump if Extent end < buffer sector.
 20845                                  ;
 20846                                  ;;      Buffer's sector is in Extent, so free it; it is being over-written.
 20847                                  ;
 20848                                  ;       testb   [di.buf_flags],buf_dirty ;Buffer dirty?
 20849                                  ;       jz      bufq2                    ; -no, jump.
 20850                                  ;       invoke  DEC_DIRTY_COUNT          ; -yes, decrement dirty count.
 20851                                  ;bufq2: mov     WORD PTR [di.buf_ID],((buf_visit SHL 8) OR 0FFh)
 20852                                  ;
 20853                                  ;       invoke  SCANPLACE
 20854                                  ;       jmp     short bufq6
 20855                                  ;
 20856                                  ;bufq5: mov     di,[di.buf_next]
 20857                                  ;bufq6: cmp     di,[FIRST_BUFF_ADDR]    ;Scanned entire buffer queue?
 20858                                  ;       jne     bufq	                ; --no, go do next buffer.
 20859                                  ;
 20860                                  ;       RestoreReg <cx,bx>
 20861                                  ;       return
 20862                                  ;
 20863                                  ;EndProc DskWrtBufPurge
 20864                                  
 20865                                  
 20866                                  ;Break   <DIV32 -- PERFORM 32 BIT DIVIDE>
 20867                                  ;----------------------------------------------------------------------------
 20868                                  ;
 20869                                  ; Procedure Name : DIV32
 20870                                  ;
 20871                                  ; Inputs:
 20872                                  ;       DX:AX = 32 bit dividend   BX= divisor
 20873                                  ; Function:
 20874                                  ;       Perform 32 bit division:  DX:AX/BX = CX:AX + DX (rem.)
 20875                                  ; Outputs:
 20876                                  ;       CX:AX = quotient , DX= remainder
 20877                                  ; Uses:
 20878                                  ;       All registers except AX,CX,DX preserved.
 20879                                  ;----------------------------------------------------------------------------
 20880                                  ;M039: DIV32 optimized for divisor of 512 (common sector size).
 20881                                  
 20882                                  ;DIV32:
 20883                                  ;
 20884                                  ;       cmp     bx,512
 20885                                  ;       jne    	short div5
 20886                                  ;
 20887                                  ;	mov     cx,dx
 20888                                  ;       mov     dx,ax           ; CX:AX = Dividend
 20889                                  ;       and     dx,(512-1)      ; DX = Remainder
 20890                                  ;       mov     al,ah
 20891                                  ;       mov     ah,cl
 20892                                  ;       mov     cl,ch
 20893                                  ;       xor     ch,ch
 20894                                  ;       shr     cx,1
 20895                                  ;       rcr     ax,1
 20896                                  ;       retn
 20897                                  ;
 20898                                  ;div5:	mov     cx,ax
 20899                                  ;       mov     ax,dx
 20900                                  ;       xor     dx,dx
 20901                                  ;       div     bx              ; 0:AX/BX
 20902                                  ;       xchg    cx,ax
 20903                                  ;       div     bx              ; DX:AX/BX
 20904                                  ;       retn
 20905                                  
 20906                                  ;Break   <SHR32 -- PERFORM 32 BIT SHIFT RIGHT>
 20907                                  ;----------------------------------------------------------------------------
 20908                                  ;
 20909                                  ; Procedure Name : SHR32
 20910                                  ;
 20911                                  ; Inputs:
 20912                                  ;	DX:AX = 32 bit sector number
 20913                                  ; Function:
 20914                                  ;       Perform 32 bit shift right
 20915                                  ; Outputs:
 20916                                  ;	AX = cluster number
 20917                                  ;	ZF = 1 if no error
 20918                                  ;	   = 0 if error (cluster number > 64k)
 20919                                  ; Uses:
 20920                                  ;       DX,CX
 20921                                  ;---------------------------------------------------------------------------
 20922                                  ; M017	- SHR32 rewritten for better performance
 20923                                  ; M039	- Additional optimization
 20924                                  
 20925                                  ;SHR32:
 20926                                  ;
 20927                                  ;	mov     cl,[ES:BP+DPB.CLUSTER_SHIFT]
 20928                                  ;	xor	ch,ch	    ;ZF=1
 20929                                  ;	jcxz	norota
 20930                                  ;
 20931                                  ;rotashft2:
 20932                                  ;	shr	dx,1	    ;ZF reflects state of DX.
 20933                                  ;	rcr	ax,1	    ;ZF not affected.
 20934                                  ;	loop	rotashft2
 20935                                  ;
 20936                                  ;norota:
 20937                                  ;	retn
 20938                                  
 20939                                  ;============================================================================
 20940                                  ; DIR.ASM, MSDOS 6.0, 1991
 20941                                  ;============================================================================
 20942                                  ; 27/07/2018 - Retro DOS v3.0 
 20943                                  
 20944                                  ;	TITLE	DIR - Directory and path cracking
 20945                                  ;	NAME	Dir
 20946                                  
 20947                                  ;Break	<FINDENTRY -- LOOK FOR AN ENTRY>
 20948                                  ;---------------------------------------------------------------------------
 20949                                  ;
 20950                                  ; Procedure Name : FINDENTRY,SEARCH
 20951                                  ;
 20952                                  ; Inputs:
 20953                                  ;	[THISDPB] set
 20954                                  ;	[SECCLUSPOS] = 0
 20955                                  ;	[DIRSEC] = Starting directory sector number
 20956                                  ;	[CLUSNUM] = Next cluster of directory
 20957                                  ;	[CLUSFAC] = Sectors/Cluster
 20958                                  ;	[NAME1] = Name to look for
 20959                                  ; Function:
 20960                                  ;	Find file name in disk directory.
 20961                                  ;	"?" matches any character.
 20962                                  ; Outputs:
 20963                                  ;	Carry set if name not found
 20964                                  ;	ELSE
 20965                                  ;	Zero set if attributes match (always except when creating)
 20966                                  ;	AH = Device ID (bit 7 set if not disk)
 20967                                  ;	[THISDPB] = Base of drive parameters
 20968                                  ;	DS = DOSGROUP
 20969                                  ;	ES = DOSGROUP
 20970                                  ;	[CURBUF+2]:BX = Pointer into directory buffer
 20971                                  ;	[CURBUF+2]:SI = Pointer to First Cluster field in directory entry
 20972                                  ;	[CURBUF] has directory record with match
 20973                                  ;	[NAME1] has file name
 20974                                  ;	[LASTENT] is entry number of the entry
 20975                                  ; All other registers destroyed.
 20976                                  ;----------------------------------------------------------------------------
 20977                                  
 20978                                  ;hkn; called from rename.asm and dir2.asm. DS must be already set up at
 20979                                  ;hkn; this point.
 20980                                  
 20981                                  SEARCH:
 20982                                  	; 27/07/2018 - Retro DOS v3.0
 20983                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 45B3h 
 20984                                  	; 15/03/2018 - Retro DOS v2.0
 20985                                  
 20986                                  	;entry	FindEntry
 20987                                  FINDENTRY:
 20988 000046A5 E81704                  	call	STARTSRCH
 20989 000046A8 A0[0605]                	MOV	AL,[ATTRIB]
 20990                                  	;and	al,9Eh
 20991 000046AB 24DE                    	AND	AL,~attr_ignore		; Ignore useless bits
 20992                                  	;cmp	al,8
 20993 000046AD 3C08                    	CMP	AL,attr_volume_id	; Looking for vol ID only ?
 20994 000046AF 7503                    	JNZ	short NOTVOLSRCH	; No
 20995 000046B1 E86201                  	CALL	SETROOTSRCH		; Yes force search of root
 20996                                  NOTVOLSRCH:
 20997 000046B4 E8F800                  	CALL	GETENTRY
 20998 000046B7 7303                    	JNC	short SRCH
 20999 000046B9 E99500                  	JMP	SETESRET
 21000                                  
 21001                                  	;entry	Srch
 21002                                  SRCH:
 21003 000046BC 1E                      	PUSH	DS
 21004 000046BD 8E1E[7605]              	MOV	DS,[CURBUF+2]
 21005                                  
 21006                                  ;	(DS:BX) = directory entry address
 21007                                  
 21008 000046C1 8A27                    	mov	ah,[BX]
 21009                                  	;MOV	AH,[BX+dir_entry.dir_name] ; mov ah,[bx+0]
 21010 000046C3 08E4                    	OR	AH,AH			; End of directory?
 21011 000046C5 743A                    	JZ	short FREE
 21012                                  
 21013                                  ;hkn; SS override
 21014 000046C7 363A26[1905]            	CMP	AH,[SS:DELALL]		; Free entry?
 21015 000046CC 7433                    	JZ	short FREE
 21016                                  	;test	byte [bx+0Bh],8
 21017 000046CE F6470B08                	TEST	byte [BX+dir_entry.dir_attr],attr_volume_id
 21018                                  					; Volume ID file?
 21019 000046D2 7405                    	JZ	short CHKFNAM 		; NO
 21020                                  
 21021                                  ;hkn; SS override
 21022 000046D4 36FE06[1605]            	INC	BYTE [SS:VOLID]
 21023                                  CHKFNAM:
 21024                                  ;	Context ES
 21025 000046D9 8CD6                    	MOV	SI,SS
 21026 000046DB 8EC6                    	MOV	ES,SI
 21027 000046DD 89DE                    	MOV	SI,BX
 21028                                  
 21029                                  ;hkn; NAME1 is in DOSDATA
 21030 000046DF BF[E604]                	MOV	DI,NAME1
 21031                                  ;;;;; 7/29/86
 21032                                  
 21033                                  ;hkn; SS override for NAME1
 21034 000046E2 36803E[E604]E5          	CMP	BYTE [SS:NAME1],0E5H	; special char check
 21035 000046E8 7506                    	JNZ	short NO_E5
 21036 000046EA 36C606[E604]05          	MOV	BYTE [SS:NAME1],05H
 21037                                  NO_E5:
 21038                                  ;;;;; 7/29/86
 21039 000046F0 E86100                  	CALL	MetaCompare
 21040 000046F3 7428                    	JZ	short FOUND
 21041 000046F5 1F                      	POP	DS
 21042                                  
 21043                                  	;entry	NEXTENT
 21044                                  NEXTENT:
 21045 000046F6 C42E[2405]              	LES	BP,[THISDPB]
 21046 000046FA E86600                  	CALL	NEXTENTRY
 21047 000046FD 73BD                    	JNC	short SRCH
 21048 000046FF EB50                    	JMP	SHORT SETESRET
 21049                                  
 21050                                  FREE:
 21051 00004701 1F                      	POP	DS
 21052 00004702 8B0E[F402]              	MOV	CX,[LASTENT]
 21053 00004706 3B0E[6A05]              	CMP	CX,[ENTFREE]
 21054 0000470A 7304                    	JAE	short TSTALL
 21055 0000470C 890E[6A05]              	MOV	[ENTFREE],CX
 21056                                  TSTALL:
 21057 00004710 3A26[1905]              	CMP	AH,[DELALL]		; At end of directory?
 21058                                  NEXTENTJ:
 21059 00004714 74E0                    	je	short NEXTENT 		; No - continue search
 21060 00004716 890E[6C05]              	MOV	[ENTLAST],CX
 21061 0000471A F9                      	STC
 21062 0000471B EB34                    	JMP	SHORT SETESRET
 21063                                  
 21064                                  FOUND:
 21065                                  ;
 21066                                  ; We have a file with a matching name.	We must now consider the attributes:
 21067                                  ; ATTRIB	Action
 21068                                  ; ------	------
 21069                                  ; Volume_ID	Is Volume_ID in test?
 21070                                  ; Otherwise	If no create then Is ATTRIB+extra superset of test?
 21071                                  ;		If create then Is ATTRIB equal to test?
 21072                                  ;
 21073 0000471D 8A2C                    	MOV	CH,[SI] 		; Attributes of file
 21074 0000471F 1F                      	POP	DS
 21075 00004720 8A26[0605]              	MOV	AH,[ATTRIB]		; Attributes of search
 21076                                  	;and	ah,9Eh
 21077 00004724 80E4DE                  	AND	AH,~attr_ignore
 21078                                  	;lea	si,[si+15]
 21079 00004727 8D740F                  	LEA	SI,[SI+dir_entry.dir_first-dir_entry.dir_attr]
 21080                                  					; point to first cluster field
 21081                                  	;test	ch,8
 21082 0000472A F6C508                  	TEST	CH,attr_volume_id	; Volume ID file?
 21083 0000472D 7409                    	JZ	short check_one_volume_id ; Nope check other attributes
 21084                                  	;test	ah,8
 21085 0000472F F6C408                  	TEST	AH,attr_volume_id	; Can we find Volume ID?
 21086                                  	;JZ	short NEXTENTJ		; Nope, (not even $FCB_CREATE)
 21087 00004732 74C2                    	jz	short NEXTENT ; 19/05/2019
 21088 00004734 30E4                    	XOR	AH,AH			; Set zero flag for $FCB_CREATE
 21089 00004736 EB11                    	JMP	SHORT RETFF		; Found Volume ID
 21090                                  check_one_volume_id:
 21091                                  	;CMP	ah,8
 21092 00004738 80FC08                  	CMP	AH,attr_volume_id	; Looking only for Volume ID?
 21093                                  	;JZ	short NEXTENTJ		; Yes, continue search
 21094 0000473B 74B9                    	je	short NEXTENT ; 19/05/2019
 21095 0000473D E89303                  	CALL	MatchAttributes
 21096 00004740 7407                    	JZ	SHORT RETFF
 21097 00004742 F606[1805]FF            	TEST	BYTE [CREATING],-1	; Pass back mismatch if creating
 21098                                  	;JZ	short NEXTENTJ		; Otherwise continue searching
 21099 00004747 74AD                    	jz	short NEXTENT ; 19/05/2019
 21100                                  RETFF:
 21101 00004749 C42E[2405]              	LES	BP,[THISDPB]
 21102 0000474D 268A6600                	MOV	AH,[ES:BP]
 21103                                  	;MOV	AH,[ES:BP+DPB.DRIVE]  ; mov ah,[es:bp+0]
 21104                                  SETESRET:
 21105 00004751 16                      	PUSH	SS
 21106 00004752 07                      	POP	ES
 21107 00004753 C3                      	retn
 21108                                  
 21109                                  ;----------------------------------------------------------------------------
 21110                                  ;
 21111                                  ; Procedure Name : MetaCompare
 21112                                  ;
 21113                                  ; Inputs:
 21114                                  ;	DS:SI -> 11 character FCB style name NO '?'
 21115                                  ;	    Typically this is a directory entry.  It MUST be in upper case
 21116                                  ;	ES:DI -> 11 character FCB style name with possible '?'
 21117                                  ;	    Typically this is a FCB or SFT.  It MUST be in upper case
 21118                                  ; Function:
 21119                                  ;	Compare FCB style names allowing for ? match to any char
 21120                                  ; Outputs:
 21121                                  ;	Zero if match else NZ
 21122                                  ; Destroys CX,SI,DI all others preserved
 21123                                  ;----------------------------------------------------------------------------
 21124                                  
 21125                                  MetaCompare:
 21126 00004754 B90B00                  	MOV	CX,11
 21127                                  WILDCRD:
 21128 00004757 F3A6                    	REPE	CMPSB
 21129 00004759 7407                    	JZ	short MetaRet 		; most of the time we will fail.
 21130                                  CHECK_META:
 21131 0000475B 26807DFF3F              	CMP	BYTE [ES:DI-1],"?"
 21132 00004760 74F5                    	JZ	short WILDCRD
 21133                                  MetaRet:
 21134 00004762 C3                       	retn				; Zero set, Match
 21135                                  
 21136                                  ;Break	<NEXTENTRY -- STEP THROUGH DIRECTORY>
 21137                                  ;----------------------------------------------------------------------------
 21138                                  ;
 21139                                  ; Procedure Name : NEXTENTRY
 21140                                  ;
 21141                                  ; Inputs:
 21142                                  ;	Same as outputs of GETENTRY, above
 21143                                  ; Function:
 21144                                  ;	Update BX, and [LASTENT] for next directory entry.
 21145                                  ;	Carry set if no more.
 21146                                  ;----------------------------------------------------------------------------
 21147                                  
 21148                                  NEXTENTRY:
 21149                                  	; 27/07/2018 - Retro DOS v3.0
 21150                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 4671h 
 21151                                  	; 15/03/2018 - Retro DOS v2.0
 21152                                  
 21153 00004763 A1[F402]                	MOV	AX,[LASTENT]
 21154 00004766 3B06[6C05]              	CMP	AX,[ENTLAST]
 21155 0000476A 7424                    	JZ	short NONE
 21156 0000476C 40                      	INC	AX
 21157                                  	;ADD	BX,32
 21158 0000476D 8D5F20                  	LEA	BX,[BX+32]
 21159 00004770 39D3                    	CMP	BX,DX
 21160 00004772 721E                    	JB	short HAVIT
 21161 00004774 8A1E[0E05]              	MOV	BL,[SECCLUSPOS]
 21162 00004778 FEC3                    	INC	BL
 21163 0000477A 3A1E[1205]              	CMP	BL,[CLUSFAC]
 21164 0000477E 7217                    	JB	short SAMECLUS
 21165 00004780 8B1E[6E05]              	MOV	BX,[NXTCLUSNUM]
 21166 00004784 E8AF12                  	call	IsEOF
 21167 00004787 7307                    	JAE	short NONE
 21168 00004789 83FB02                  	CMP	BX,2
 21169 0000478C 7202                    	JB	short NONE
 21170 0000478E EB22                    	JMP	short GETENT
 21171                                  NONE:
 21172 00004790 F9                      	STC
 21173 00004791 C3                      	retn
 21174                                  HAVIT:
 21175 00004792 A3[F402]                	MOV	[LASTENT],AX
 21176 00004795 F8                      	CLC
 21177                                  nextentry_retn:
 21178 00004796 C3                      	retn
 21179                                  SAMECLUS:
 21180 00004797 881E[0E05]              	MOV	[SECCLUSPOS],BL
 21181 0000479B A3[F402]                	MOV	[LASTENT],AX
 21182 0000479E 1E                      	PUSH	DS
 21183 0000479F C53E[7405]              	LDS	DI,[CURBUF]
 21184                                  	;MOV	DX,[DI+BUFFINFO.buf_sector+2]	;AN000; >32mb
 21185                                  ;hkn; SS override
 21186                                  	;MOV	[HIGH_SECTOR],DX		;AN000; >32mb
 21187                                  	;mov	dx,[di+6]
 21188 000047A3 8B5506                  	MOV	DX,[DI+BUFFINFO.buf_sector]	;AN000; >32mb
 21189                                  	;ADD	DX,1				;AN000; >32mb
 21190                                  	;ADC	word [HIGH_SECTOR],0 		;AN000; >32mb
 21191 000047A6 42                      	inc	dx
 21192 000047A7 1F                      	POP	DS
 21193 000047A8 E881F9                  	call	FIRSTCLUSTER
 21194 000047AB 31DB                    	XOR	BX,BX
 21195 000047AD EB23                    	JMP	short SETENTRY
 21196                                  
 21197                                  ;----------------------------------------------------------------------------
 21198                                  ;
 21199                                  ; Procedure Name : GETENTRY
 21200                                  ;
 21201                                  ; Inputs:
 21202                                  ;	[LASTENT] has directory entry
 21203                                  ;	ES:BP points to drive parameters
 21204                                  ;	[DIRSEC],[CLUSNUM],[CLUSFAC],[ENTLAST] set for DIR involved
 21205                                  ; Function:
 21206                                  ;	Locates directory entry in preparation for search
 21207                                  ;	GETENT provides entry for passing desired entry in AX
 21208                                  ; Outputs:
 21209                                  ;	[CURBUF+2]:BX = Pointer to next directory entry in CURBUF
 21210                                  ;	[CURBUF+2]:DX = Pointer to first byte after end of CURBUF
 21211                                  ;	[LASTENT] = New directory entry number
 21212                                  ;	[NXTCLUSNUM],[SECCLUSPOS] set via DIRREAD
 21213                                  ;	Carry set if error (currently user FAILed to I 24)
 21214                                  ;----------------------------------------------------------------------------
 21215                                  
 21216                                  GETENTRY:
 21217                                  	; 27/07/2018 - Retro DOS v3.0
 21218 000047AF A1[F402]                	MOV	AX,[LASTENT]
 21219                                  
 21220                                  	;entry	GETENT
 21221                                  GETENT:
 21222 000047B2 A3[F402]                	MOV	[LASTENT],AX
 21223                                  ;
 21224                                  ; Convert the entry number in AX into a byte offset from the beginning of the
 21225                                  ; directory.
 21226                                  ;
 21227 000047B5 B105                    	mov	cl,5			; shift left by 5 = mult by 32
 21228 000047B7 D3C0                    	rol	ax,cl			; keep hight order bits
 21229 000047B9 89C2                    	mov	dx,ax
 21230                                  	;and	ax,0FFE0h
 21231                                  	;;and	ax,~(32-1)		; mask off high order bits
 21232 000047BB 24E0                    	and	al,0E0h ; ~31 ; 19/05/2019
 21233 000047BD 83E21F                  	and	dx,1Fh
 21234                                  	;and	dx,32-1			; mask off low order bits
 21235                                  ;
 21236                                  ; DX:AX contain the byte offset of the required directory entry from the
 21237                                  ; beginning of the directory. Convert this to a sector number. Round the
 21238                                  ; sector size down to a multiple of 32.
 21239                                  ;
 21240                                  	;mov	bx,[es:bp+2]
 21241 000047C0 268B5E02                	MOV	BX,[ES:BP+DPB.SECTOR_SIZE]
 21242 000047C4 80E3E0                  	and	bl,0E0h
 21243                                  	;AND	BL,255-31		; Must be multiple of 32
 21244 000047C7 F7F3                    	DIV	BX
 21245 000047C9 89D3                    	MOV	BX,DX			; Position within sector
 21246 000047CB 53                      	PUSH	BX
 21247 000047CC E811F9                  	call	DIRREAD
 21248 000047CF 5B                      	POP	BX
 21249                                  	;retc
 21250 000047D0 72C4                    	jc	short nextentry_retn	
 21251                                  SETENTRY:
 21252 000047D2 8B16[7405]              	MOV	DX,[CURBUF]
 21253                                  	;add	dx,16
 21254 000047D6 83C210                  	ADD	DX,BUFINSIZ
 21255 000047D9 01D3                    	ADD	BX,DX
 21256                                  	;add	dx,[es:bp+2]
 21257 000047DB 26035602                	ADD	DX,[ES:BP+DPB.SECTOR_SIZE]  ; Always clears carry
 21258 000047DF C3                      	retn
 21259                                  
 21260                                  ;Break	<SETDIRSRCH SETROOTSRCH -- Set Search environments>
 21261                                  ;----------------------------------------------------------------------------
 21262                                  ;
 21263                                  ; Procedure Name : SETDIRSRCH,SETROOTSRCH
 21264                                  ;
 21265                                  ; Inputs:
 21266                                  ;	BX cluster number of start of directory
 21267                                  ;	ES:BP Points to DPB
 21268                                  ;	DI next cluster number from fastopen extended info. DOS 3.3 only
 21269                                  ; Function:
 21270                                  ;	Set up a directory search
 21271                                  ; Outputs:
 21272                                  ;	[DIRSTART] = BX
 21273                                  ;	[CLUSFAC],[CLUSNUM],[SECCLUSPOS],[DIRSEC] set
 21274                                  ;	Carry set if error (currently user FAILed to I 24)
 21275                                  ; destroys AX,DX,BX
 21276                                  ;----------------------------------------------------------------------------
 21277                                  
 21278                                  SETDIRSRCH:
 21279 000047E0 09DB                    	OR	BX,BX
 21280 000047E2 7432                    	JZ	short SETROOTSRCH
 21281 000047E4 891E[5805]              	MOV	[DIRSTART],BX
 21282                                  	;mov	al,[es:bp+4]
 21283 000047E8 268A4604                	MOV	AL,[ES:BP+DPB.CLUSTER_MASK]
 21284 000047EC FEC0                    	INC	AL
 21285 000047EE A2[1205]                	MOV	[CLUSFAC],AL
 21286                                  
 21287                                  ; DOS 3.3 for FastOPen	F.C. 6/12/86
 21288                                  	;SAVE	<SI>
 21289 000047F1 56                      	push	si
 21290                                  	;test	byte [FastOpenFlg],2
 21291 000047F2 F606[6E0F]02            	TEST	byte [FastOpenFlg],Lookup_Success
 21292 000047F7 7507                    	JNZ	short UNP_OK
 21293                                  
 21294                                  ; DOS 3.3 for FastOPen	F.C. 6/12/86
 21295                                  	;invoke	UNPACK
 21296 000047F9 E85112                  	call	UNPACK
 21297 000047FC 7302                    	JNC	short UNP_OK
 21298                                  	;RESTORE <SI>
 21299 000047FE 5E                      	pop	si
 21300                                  	;return
 21301 000047FF C3                      	retn
 21302                                  
 21303                                  UNP_OK:
 21304 00004800 893E[5405]              	MOV	[CLUSNUM],DI
 21305 00004804 89DA                    	MOV	DX,BX
 21306 00004806 30DB                    	XOR	BL,BL
 21307 00004808 881E[0E05]              	MOV	[SECCLUSPOS],BL
 21308                                  	;invoke	FIGREC
 21309 0000480C E8220C                  	call	FIGREC
 21310                                  	;RESTORE <SI>
 21311 0000480F 5E                      	pop	si
 21312                                  	
 21313                                  	; MSDOS 6.0
 21314                                  	;PUSH	DX			   ;AN000; >32mb
 21315                                  	;MOV	DX,[HIGH_SECTOR]	   ;AN000; >32mb
 21316                                  	;MOV	[DIRSEC+2],DX		   ;AN000; >32mb
 21317                                  	;POP	DX			   ;AN000; >32mb
 21318                                  	
 21319 00004810 8916[5605]              	MOV	[DIRSEC],DX
 21320 00004814 F8                      	CLC
 21321 00004815 C3                      	retn
 21322                                  
 21323                                  	;entry	SETROOTSRCH
 21324                                  SETROOTSRCH:
 21325 00004816 31C0                    	XOR	AX,AX
 21326 00004818 A3[5805]                	MOV	[DIRSTART],AX
 21327 0000481B A2[0E05]                	MOV	[SECCLUSPOS],AL
 21328 0000481E 48                      	DEC	AX
 21329 0000481F A3[5405]                	MOV	[CLUSNUM],AX
 21330                                  	;mov	ax,[es:bp+0Bh]
 21331 00004822 268B460B                	MOV	AX,[ES:BP+DPB.FIRST_SECTOR]
 21332                                  	;mov	dx,[es:bp+10h]
 21333 00004826 268B5610                	MOV	DX,[ES:BP+DPB.DIR_SECTOR]
 21334 0000482A 29D0                    	SUB	AX,DX
 21335 0000482C A2[1205]                	MOV	[CLUSFAC],AL
 21336 0000482F 8916[5605]              	MOV	[DIRSEC],DX		      ;F.C. >32mb
 21337                                  	; MSDOS 6.0
 21338                                  	;MOV	WORD [DIRSEC+2],0	      ;F.C. >32mb
 21339 00004833 F8                      	CLC
 21340 00004834 C3                      	retn
 21341                                  
 21342                                  ;============================================================================
 21343                                  ; DIR2.ASM, MSDOS 6.0, 1991
 21344                                  ;============================================================================
 21345                                  ; 27/07/2018 - Retro DOS v3.0 
 21346                                  
 21347                                  ;	TITLE	DIR2 - Directory and path cracking
 21348                                  ;	NAME	Dir2
 21349                                  
 21350                                  ;Break	<GETPATH -- PARSE A WFP>
 21351                                  ;----------------------------------------------------------------------------
 21352                                  ;
 21353                                  ; Procedure Name : GETPATH
 21354                                  ;
 21355                                  ; Inputs:
 21356                                  ;	[WFP_START] Points to WFP string ("d:\" must be first 3 chars, NUL
 21357                                  ;		terminated; d:/ (note forward slash) indicates a real device).
 21358                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 21359                                  ;		( = -1 if current dir not involved, else
 21360                                  ;		 Points to first char after last "/" of current dir part)
 21361                                  ;	[THISCDS] Points to CDS being used
 21362                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 21363                                  ;	[NoSetDir] set
 21364                                  ;	[THISDPB] set to DPB if disk otherwise garbage.
 21365                                  ; Function:
 21366                                  ;	Crack the path
 21367                                  ; Outputs:
 21368                                  ;	Sets EXTERR_LOCUS = errLOC_Disk if disk file
 21369                                  ;	Sets EXTERR_LOCUS = errLOC_Unk if char device
 21370                                  ;	ID1 field of [THISCDS] updated appropriately
 21371                                  ;	[ATTRIB] = [SATTRIB]
 21372                                  ;	ES:BP Points to DPB
 21373                                  ;	Carry set if bad path
 21374                                  ;	   SI Points to path element causing failure
 21375                                  ;	   Zero set
 21376                                  ;	      [DIRSTART],[DIRSEC],[CLUSNUM], and [CLUSFAC] are set up to
 21377                                  ;	      start a search on the last directory
 21378                                  ;	      CL is zero if there is a bad name in the path
 21379                                  ;	      CL is non-zero if the name was simply not found
 21380                                  ;		 [ENTFREE] may have free spot in directory
 21381                                  ;		 [NAME1] is the name.
 21382                                  ;		 CL = 81H if '*'s or '?' in NAME1, 80H otherwise
 21383                                  ;	   Zero reset
 21384                                  ;	      File in middle of path or bad name in path or attribute mismatch
 21385                                  ;		or path too long or malformed path
 21386                                  ;	ELSE
 21387                                  ;	   [CurBuf] = -1 if root directory
 21388                                  ;	   [CURBUF] contains directory record with match
 21389                                  ;	   [CURBUF+2]:BX Points into [CURBUF] to start of entry
 21390                                  ;	   [CURBUF+2]:SI Points into [CURBUF] to dir_first field for entry
 21391                                  ;	   AH = device ID
 21392                                  ;	      bit 7 of AH set if device SI and BX
 21393                                  ;	      will point DOSGROUP relative The firclus
 21394                                  ;	      field of the device entry contains the device pointer
 21395                                  ;	   [NAME1] Has name looked for
 21396                                  ;	   If last element is a directory zero is set and:
 21397                                  ;	      [DIRSTART],[SECCLUSPOS],[DIRSEC],[CLUSNUM], and [CLUSFAC]
 21398                                  ;	      are set up to start a search on it.
 21399                                  ;	      unless [NoSetDir] is non zero in which case the return is
 21400                                  ;	      like that for a file (except for zero flag)
 21401                                  ;	   If last element is a file zero is reset
 21402                                  ;	      [DIRSEC],[CLUSNUM],[CLUSFAC],[NXTCLUSNUM],[SECCLUSPOS],
 21403                                  ;	      [LASTENT], [ENTLAST] are set to continue search of last
 21404                                  ;	      directory for furthur matches on NAME1 via the NEXTENT
 21405                                  ;	      entry point in FindEntry (or GETENT entry in GETENTRY in
 21406                                  ;	      which case [NXTCLUSNUM] and [SECCLUSPOS] need not be valid)
 21407                                  ; DS preserved, Others destroyed
 21408                                  ;---------------------------------------------------------------------------
 21409                                  
 21410                                  ;hkn; called from delete.asm, finfo.asm, mknode.asm and rename.asm.
 21411                                  ;hkn; DS already set up at this point.
 21412                                  
 21413                                  GETPATH:
 21414                                  	;mov	word [CREATING],0E500h
 21415 00004835 C706[1805]00E5          	MOV	WORD [CREATING],DIRFREE*256+0 ; Not Creating, not DEL *.*
 21416                                  
 21417                                  ; Same as GetPath only CREATING and DELALL already set
 21418                                  
 21419                                  	;entry	GetPathNoSet
 21420                                  GetPathNoSet:
 21421                                  	;mov	byte [EXTERR_LOCUS],2	
 21422 0000483B C606[D102]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 21423 00004840 C706[7405]FFFF          	MOV	word [CURBUF],-1	; initial setting
 21424                                  
 21425                                  ; See if the input indicates a device that has already been detected. If so,
 21426                                  ; go build the guy quickly. Otherwise, let findpath find the device.
 21427                                  
 21428 00004846 8B3E[4A05]              	MOV	DI,[WFP_START]		; point to the beginning of the name
 21429                                  	;cmp	word [DI+1],5C3Ah
 21430                                  	;CMP	WORD [DI+1],'\' << 8 + ':'
 21431 0000484A 817D013A5C              	cmp	word [DI+1],':\'
 21432 0000484F 7438                    	JZ	short CrackIt
 21433                                  
 21434                                  ; Let ChkDev find it in the device list
 21435                                  
 21436 00004851 83C703                  	ADD	DI,3
 21437                                  	; 18/08/2018
 21438                                  	;MOV	SI,DI			; let CHKDEV see the original name
 21439 00004854 E8B000                  	CALL	CHKDEV
 21440 00004857 722E                    	JC	short InternalError
 21441                                  Build_devJ:
 21442                                  
 21443 00004859 A0[0805]                	MOV	AL,[SATTRIB]
 21444 0000485C A2[0605]                	MOV	[ATTRIB],AL
 21445                                  	;mov	byte [EXTERR_LOCUS],1
 21446 0000485F C606[D102]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk ; In the particular case of
 21447                                  					; "finding" a char device
 21448                                  					; set LOCUS to Unknown. This makes
 21449                                  					; certain idiotic problems reported
 21450                                  					; by a certain 3 letter OEM go away.
 21451                                  
 21452                                  ; Take name in name1 and pack it back into where wfp_start points. This
 21453                                  ; guarantees wfp_start pointing to a canonical representation of a device.
 21454                                  ; We are allowed to do this as GetPath is *ALWAYS* called before entering a
 21455                                  ; wfp into the share set.
 21456                                  ;
 21457                                  ; We copy chars from name1 to wfp_start remembering the position of the last
 21458                                  ; non-space seen +1.  This position is kept in DX.
 21459                                  
 21460                                  ;hkn; SS is DOSDATA
 21461 00004864 16                      	push	ss
 21462 00004865 07                      	pop	es
 21463                                  
 21464                                  ;hkn; NAME1 is in DOSDATA
 21465 00004866 BE[E604]                	mov	si,NAME1
 21466 00004869 8B3E[4A05]              	mov	di,[WFP_START]
 21467 0000486D 89FA                    	mov	dx,di
 21468 0000486F B90800                  	mov	cx,8			; 8 chars in device name
 21469                                  MoveLoop:
 21470 00004872 AC                      	lodsb
 21471 00004873 AA                      	stosb
 21472 00004874 3C20                    	cmp	al," "
 21473 00004876 7402                    	jz	short NoSave
 21474                                  
 21475 00004878 89FA                    	mov	dx,di
 21476                                  NoSave:
 21477 0000487A E2F6                    	loop	MoveLoop
 21478                                  ;
 21479                                  ; DX is the position of the last seen non-space + 1. We terminate the name
 21480                                  ; at this point.
 21481                                  ;
 21482 0000487C 89D7                    	mov	di,dx
 21483 0000487E C60500                  	mov	byte [di],0		; end of string
 21484 00004881 E8BC02                  	call	Build_device_ent	; Clears carry sets zero
 21485 00004884 FEC0                    	INC	AL			; reset zero
 21486 00004886 C3                      	retn
 21487                                  
 21488                                  InternalError:
 21489                                  InternalError_loop:
 21490 00004887 EBFE                    	JMP	short InternalError_loop	; freeze
 21491                                  
 21492                                  ; Start off at the correct spot. Optimize if the current dir part is valid.
 21493                                  
 21494                                  CrackIt:
 21495 00004889 8B36[4E05]              	MOV	SI,[CURR_DIR_END]	; get current directory pointer
 21496 0000488D 83FEFF                  	CMP	SI,-1			; valid?
 21497 00004890 7503                    	JNZ	short LOOK_SING		; Yes, use it.
 21498 00004892 8D7503                  	LEA	SI,[DI+3]		; skip D:\.
 21499                                  LOOK_SING:
 21500                                  	;mov	byte [ATTRIB],16h
 21501 00004895 C606[0605]16            	MOV	byte [ATTRIB],attr_directory+attr_system+attr_hidden
 21502                                  					; Attributes to search through Dirs
 21503 0000489A C43E[3A05]              	LES	DI,[THISCDS]
 21504 0000489E B8FFFF                  	MOV	AX,-1
 21505                                  	;mov	bx,[es:di+73]
 21506 000048A1 268B5D49                	MOV	BX,[ES:DI+curdir.ID]
 21507 000048A5 8B36[4E05]              	MOV	SI,[CURR_DIR_END]
 21508                                  
 21509                                  ; AX = -1
 21510                                  ; BX = cluster number of current directory.  THis number is -1 if the media
 21511                                  ;      has been uncertainly changed.
 21512                                  ; SI = offset in DOSGroup into path to end of current directory text.  This
 21513                                  ;      may be -1 if no current directory part has been used.
 21514                                  
 21515 000048A9 39C6                    	CMP	SI,AX			; if Current directory is not part
 21516 000048AB 7440                    	JZ	short NO_CURR_D		; then we must crack from root
 21517 000048AD 39C3                    	CMP	BX,AX			; is the current directory cluster valid
 21518                                  
 21519                                  ; DOS 3.3  6/25/86
 21520 000048AF 743C                    	JZ	short NO_CURR_D		; no, crack form the root
 21521                                  	;test	byte [FastOpenFlg],1
 21522 000048B1 F606[6E0F]01            	TEST	byte [FastOpenFlg],FastOpen_Set ; for fastopen ?
 21523 000048B6 7442                    	JZ	short GOT_SEARCH_CLUSTER	; no
 21524 000048B8 06                      	PUSH	ES			; save registers
 21525 000048B9 57                      	PUSH	DI
 21526 000048BA 51                      	PUSH	CX
 21527 000048BB FF74FF                  	PUSH	word [SI-1]		; save \ and 1st char of next element
 21528 000048BE 56                      	PUSH	SI
 21529 000048BF 53                      	PUSH	BX
 21530                                  
 21531 000048C0 C644FF00                	MOV	BYTE [SI-1],0		; call fastopen to look up cur dir info
 21532 000048C4 8B36[4A05]              	MOV	SI,[WFP_START]
 21533                                  
 21534                                  ;hkn; FastOpenTable, Dir_Info_Buff & FastOpen_Ext_Info are in DOSDATA
 21535 000048C8 BB[430F]                	MOV	BX,FastOpenTable
 21536 000048CB BF[4E0F]                	MOV	DI,Dir_Info_Buff
 21537 000048CE B9[490F]                	MOV	CX,FastOpen_Ext_Info
 21538                                  	;mov	al,1
 21539 000048D1 B001                    	MOV	AL,FONC_Look_up
 21540 000048D3 1E                      	PUSH	DS
 21541 000048D4 07                      	POP	ES
 21542                                  	;call	far [BX+2]
 21543 000048D5 FF5F02                  	CALL	far [BX+fastopen_entry.name_caching]
 21544 000048D8 7208                    	JC	short GO_Chk_end1 	;fastopen not installed, or wrong drive.
 21545                                  					; Go to Got_Srch_cluster
 21546 000048DA 803C00                  	CMP	BYTE [SI],0		;fastopen has current dir info?
 21547 000048DD 7404                    	JE	short GO_Chk_end	;yes. Go to got_search_cluster
 21548 000048DF F9                      	stc
 21549 000048E0 EB01                    	jmp	short GO_Chk_end	;Go to No_Curr_D
 21550                                  GO_Chk_end1:
 21551 000048E2 F8                      	clc
 21552                                  GO_Chk_end:				; restore registers
 21553 000048E3 5B                      	POP	BX
 21554 000048E4 5E                      	POP	SI
 21555 000048E5 8F44FF                  	POP	word [SI-1]
 21556 000048E8 59                      	POP	CX
 21557 000048E9 5F                      	POP	DI
 21558 000048EA 07                      	POP	ES
 21559 000048EB 730D                    	JNC	short GOT_SEARCH_CLUSTER ; crack based on cur dir
 21560                                  
 21561                                  ; DOS 3.3  6/25/86
 21562                                  ;
 21563                                  ; We must cract the path beginning at the root. Advance pointer to beginning
 21564                                  ; of path and go crack from root.
 21565                                  
 21566                                  NO_CURR_D:
 21567 000048ED 8B36[4A05]              	MOV	SI,[WFP_START]
 21568 000048F1 8D7403                  	LEA	SI,[SI+3]		; Skip "d:/"
 21569 000048F4 C42E[2405]              	LES	BP,[THISDPB]		; Get ES:BP
 21570 000048F8 EB3D                    	JMP	short ROOTPATH
 21571                                  
 21572                                  ; We are able to crack from the current directory part. Go set up for search
 21573                                  ; of specified cluster.
 21574                                  
 21575                                  GOT_SEARCH_CLUSTER:
 21576 000048FA C42E[2405]              	LES	BP,[THISDPB]		; Get ES:BP
 21577 000048FE E8DFFE                  	call	SETDIRSRCH
 21578                                  	;JC	short SETFERR
 21579                                  	;JMP	short FINDPATH
 21580 00004901 7345                    	jnc	short FINDPATH ; 17/08/2018
 21581                                  SETFERR:
 21582 00004903 30C9                    	XOR	CL,CL			; set zero
 21583 00004905 F9                      	STC
 21584 00004906 C3                      	retn
 21585                                  
 21586                                  ;---------------------------------------------------------------------------
 21587                                  ;
 21588                                  ; Procedure Name : ChkDev
 21589                                  ;
 21590                                  ; Check to see if the name at DS:DI is a device. Returns carry set if not a
 21591                                  ;   device.
 21592                                  ; Blasts CX,SI,DI,AX,BX
 21593                                  ;---------------------------------------------------------------------------
 21594                                  
 21595                                  CHKDEV:
 21596 00004907 89FE                    	MOV	SI,DI
 21597 00004909 8CD7                    	MOV	DI,SS
 21598 0000490B 8EC7                    	MOV	ES,DI
 21599                                  
 21600 0000490D BF[E604]                	MOV	DI,NAME1
 21601 00004910 B90900                  	MOV	CX,9
 21602                                  TESTLOOP:
 21603 00004913 E8F50C                  	call	GETLET
 21604                                  
 21605 00004916 3C2E                    	CMP	AL,'.'
 21606 00004918 740E                    	JZ	short TESTDEVICE
 21607 0000491A E82B0D                  	call	PATHCHRCMP
 21608 0000491D 7407                    	JZ	short NOTDEV
 21609 0000491F 08C0                    	OR	AL,AL
 21610 00004921 7405                    	JZ	short TESTDEVICE
 21611                                  
 21612 00004923 AA                      	STOSB
 21613 00004924 E2ED                    	LOOP	TESTLOOP
 21614                                  NOTDEV:
 21615 00004926 F9                      	STC
 21616 00004927 C3                      	retn
 21617                                  
 21618                                  TESTDEVICE:
 21619 00004928 83C102                  	ADD	CX,2
 21620 0000492B B020                    	MOV	AL,' '
 21621 0000492D F3AA                    	REP	STOSB
 21622 0000492F 8CD0                    	MOV	AX,SS
 21623 00004931 8ED8                    	MOV	DS,AX
 21624 00004933 E8AA01                  	call	DEVNAME
 21625 00004936 C3                      	retn
 21626                                  
 21627                                  ;Break	<ROOTPATH, FINDPATH -- PARSE A PATH>
 21628                                  ;----------------------------------------------------------------------------
 21629                                  ;
 21630                                  ; Procedure Name : ROOTPATH,FINDPATH
 21631                                  ;
 21632                                  ; Inputs:
 21633                                  ;	Same as FINDPATH but,
 21634                                  ;	SI Points to asciz string of path which is assumed to start at
 21635                                  ;		the root (no leading '/').
 21636                                  ; Function:
 21637                                  ;	Search from root for path
 21638                                  ; Outputs:
 21639                                  ;	Same as FINDPATH but:
 21640                                  ;	If root directory specified, [CURBUF] and [NAME1] are NOT set, and
 21641                                  ;	[NoSetDir] is ignored.
 21642                                  ;----------------------------------------------------------------------------
 21643                                  
 21644                                  ROOTPATH:
 21645 00004937 E8DCFE                  	call	SETROOTSRCH
 21646 0000493A 803C00                  	CMP	BYTE [SI],0
 21647 0000493D 7509                    	JNZ	short FINDPATH
 21648                                  
 21649                                  ; Root dir specified
 21650 0000493F A0[0805]                	MOV	AL,[SATTRIB]
 21651 00004942 A2[0605]                	MOV	[ATTRIB],AL
 21652 00004945 30E4                    	XOR	AH,AH			; Sets "device ID" byte, sets zero
 21653                                  					; (dir), clears carry.
 21654 00004947 C3                      	retn
 21655                                  
 21656                                  ; Inputs:
 21657                                  ;	[ATTRIB] Set to get through directories
 21658                                  ;	[SATTRIB] Set to find last element
 21659                                  ;	ES:BP Points to DPB
 21660                                  ;	SI Points to asciz string of path (no leading '/').
 21661                                  ;	[SECCLUSPOS] = 0
 21662                                  ;	[DIRSEC] = Phys sec # of first sector of directory
 21663                                  ;	[CLUSNUM] = Cluster # of next cluster
 21664                                  ;	[CLUSFAC] = Sectors per cluster
 21665                                  ;	[NoSetDir] set
 21666                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 21667                                  ;		( = -1 if current dir not involved, else
 21668                                  ;		 Points to first char after last "/" of current dir part)
 21669                                  ;	[THISCDS] Points to CDS being used
 21670                                  ;	[CREATING] and [DELALL] set
 21671                                  ; Function:
 21672                                  ;	Parse path name
 21673                                  ; Outputs:
 21674                                  ;	ID1 field of [THISCDS] updated appropriately
 21675                                  ;	[ATTRIB] = [SATTRIB]
 21676                                  ;	ES:BP Points to DPB
 21677                                  ;	[THISDPB] = ES:BP
 21678                                  ;	Carry set if bad path
 21679                                  ;	   SI Points to path element causing failure
 21680                                  ;	   Zero set
 21681                                  ;	      [DIRSTART],[DIRSEC],[CLUSNUM], and [CLUSFAC] are set up to
 21682                                  ;	      start a search on the last directory
 21683                                  ;	      CL is zero if there is a bad name in the path
 21684                                  ;	      CL is non-zero if the name was simply not found
 21685                                  ;		 [ENTFREE] may have free spot in directory
 21686                                  ;		 [NAME1] is the name.
 21687                                  ;		 CL = 81H if '*'s or '?' in NAME1, 80H otherwise
 21688                                  ;	   Zero reset
 21689                                  ;	      File in middle of path or bad name in path
 21690                                  ;		or path too long or malformed path
 21691                                  ;	ELSE
 21692                                  ;	   [CURBUF] contains directory record with match
 21693                                  ;	   [CURBUF+2]:BX Points into [CURBUF] to start of entry
 21694                                  ;	   [CURBUF+2]:SI Points to fcb_FIRCLUS field for entry
 21695                                  ;	   [NAME1] Has name looked for
 21696                                  ;	   AH = device ID
 21697                                  ;	      bit 7 of AH set if device SI and BX
 21698                                  ;	      will point DOSGROUP relative The firclus
 21699                                  ;	      field of the device entry contains the device pointer
 21700                                  ;	   If last element is a directory zero is set and:
 21701                                  ;	      [DIRSTART],[SECCLUSPOS],[DIRSEC],[CLUSNUM], and [CLUSFAC]
 21702                                  ;	      are set up to start a search on it,
 21703                                  ;	      unless [NoSetDir] is non zero in which case the return is
 21704                                  ;	      like that for a file (except for zero flag)
 21705                                  ;	   If last element is a file zero is reset
 21706                                  ;	      [DIRSEC],[CLUSNUM],[CLUSFAC],[NXTCLUSNUM],[SECCLUSPOS],
 21707                                  ;	      [LASTENT], [ENTLAST] are set to continue search of last
 21708                                  ;	      directory for furthur matches on NAME1 via the NEXTENT
 21709                                  ;	      entry point in FindEntry (or GETENT entry in GETENTRY in
 21710                                  ;	      which case [NXTCLUSNUM] and [SECCLUSPOS] need not be valid)
 21711                                  ; Destroys all other registers
 21712                                  
 21713                                      	;entry	FINDPATH
 21714                                  FINDPATH:
 21715 00004948 06                      	PUSH	ES			; Save ES:BP
 21716 00004949 56                      	PUSH	SI
 21717 0000494A 89F7                    	MOV	DI,SI
 21718 0000494C 8B0E[5805]              	MOV	CX,[DIRSTART]		; Get start clus of dir being searched
 21719 00004950 833E[4E05]FF            	CMP	word [CURR_DIR_END],-1
 21720 00004955 740E                    	JZ	short NOIDS		; No current dir part
 21721 00004957 3B3E[4E05]              	CMP	DI,[CURR_DIR_END]
 21722 0000495B 7508                    	JNZ	short NOIDS		; Not to current dir end yet
 21723 0000495D C43E[3A05]              	LES	DI,[THISCDS]
 21724                                  	;mov	[es:di+73],cx
 21725 00004961 26894D49                	MOV	[ES:DI+curdir.ID],CX	; Set current directory currency
 21726                                  NOIDS:
 21727                                  
 21728                                  ; Parse the name off of DS:SI into NAME1. AL = 1 if there was a meta
 21729                                  ; character in the string. CX,DI may be destroyed.
 21730                                  ;
 21731                                  ;	invoke	NAMETRANS
 21732                                  ;	MOV	CL,AL
 21733                                  ;
 21734                                  ; The above is the slow method. The name has *already* been munged by
 21735                                  ; TransPath so no special casing needs to be done. All we do is try to copy
 21736                                  ; the name until ., \ or 0 is hit.
 21737                                  
 21738 00004965 8CD0                    	MOV	AX,SS
 21739 00004967 8EC0                    	MOV	ES,AX
 21740                                  
 21741                                  ;hkn; Name1 is in DOSDATA
 21742 00004969 BF[E604]                	MOV	DI,NAME1
 21743 0000496C B82020                  	MOV	AX,'  ' ; 2020h
 21744 0000496F AA                      	STOSB
 21745 00004970 AB                      	STOSW
 21746 00004971 AB                      	STOSW
 21747 00004972 AB                      	STOSW
 21748 00004973 AB                      	STOSW
 21749 00004974 AB                      	STOSW
 21750                                  
 21751                                  ;hkn; Name1 is in DOSDATA
 21752 00004975 BF[E604]                	MOV	DI,NAME1
 21753 00004978 30E4                    	XOR	AH,AH			; bits for CL
 21754                                  GetNam:
 21755                                  	;INC	CL			;AN000; KK incrment volid count
 21756 0000497A AC                      	LODSB
 21757 0000497B 3C2E                    	CMP	AL,'.'
 21758 0000497D 7412                    	JZ	short _SetExt
 21759 0000497F 08C0                    	OR	AL,AL
 21760 00004981 7424                    	JZ	short _GetDone
 21761 00004983 3C5C                    	CMP	AL,'\'
 21762 00004985 7420                    	JZ	short _GetDone
 21763 00004987 3C3F                    	CMP	AL,'?'
 21764 00004989 7503                    	JNZ	short StoNam
 21765 0000498B 80CC01                  	OR	AH,1
 21766                                  StoNam: 
 21767 0000498E AA                      	STOSB
 21768 0000498F EBE9                    	JMP	short GetNam
 21769                                  _SetExt:
 21770 00004991 BF[EE04]                	MOV	DI,NAME1+8
 21771                                  GetExt:
 21772 00004994 AC                      	LODSB
 21773 00004995 08C0                    	OR	AL,AL
 21774 00004997 740E                    	JZ	short _GetDone
 21775 00004999 3C5C                    	CMP	AL,'\'
 21776 0000499B 740A                    	JZ	short _GetDone
 21777 0000499D 3C3F                    	CMP	AL,'?'
 21778 0000499F 7503                    	JNZ	short StoExt
 21779 000049A1 80CC01                  	OR	AH,1
 21780                                  StoExt: 
 21781 000049A4 AA                      	STOSB
 21782 000049A5 EBED                    	JMP	short GetExt
 21783                                  _GetDone:
 21784 000049A7 4E                      	DEC	SI
 21785 000049A8 88E1                    	MOV	CL,AH
 21786 000049AA 80C980                  	OR	CL,80H
 21787 000049AD 5F                      	POP	DI			; Start of this element
 21788 000049AE 07                      	POP	ES			; Restore ES:BP
 21789 000049AF 39FE                    	CMP	SI,DI
 21790 000049B1 7503                    	JNZ	short check_device
 21791 000049B3 E9D100                  	JMP	_BADPATH		; NUL parse (two delims most likely)
 21792                                  check_device:
 21793 000049B6 56                      	PUSH	SI			; Start of next element
 21794 000049B7 8A04                    	MOV	AL,[SI]
 21795 000049B9 08C0                    	OR	AL,AL
 21796 000049BB 7508                    	JNZ	short NOT_LAST
 21797                                  
 21798                                  ; for last element of the path switch to the correct search attributes
 21799                                  
 21800 000049BD 8A3E[0805]              	MOV	BH,[SATTRIB]
 21801 000049C1 883E[0605]              	MOV	[ATTRIB],BH
 21802                                  
 21803                                  NOT_LAST:
 21804                                  
 21805                                  ; check name1 to see if we have a device...
 21806                                  
 21807 000049C5 06                      	PUSH	ES			; Save ES:BP
 21808                                  
 21809                                  ;hkn; SS is DOSDATA
 21810                                  	;context ES
 21811 000049C6 16                      	push	ss
 21812 000049C7 07                      	pop	es
 21813 000049C8 E81501                  	call	DEVNAME 		; blast BX
 21814 000049CB 07                      	POP	ES			; Restore ES:BP
 21815 000049CC 720B                    	JC	short FindFile		; Not a device
 21816 000049CE 08C0                    	OR	AL,AL			; Test next char again
 21817 000049D0 7403                    	JZ	short GO_BDEV
 21818 000049D2 E9B600                  	JMP	FILEINPATH		; Device name in middle of path
 21819                                  
 21820                                  GO_BDEV:
 21821 000049D5 5E                      	POP	SI			; Points to NUL at end of path
 21822 000049D6 E980FE                  	JMP	Build_devJ
 21823                                  
 21824                                  FindFile:
 21825                                  ;;;; 7/28/86
 21826 000049D9 803E[E604]E5            	CMP	BYTE [NAME1],0E5H	; if 1st char = E5
 21827 000049DE 7505                    	JNZ	short NOE5		; no
 21828 000049E0 C606[E604]05            	MOV	BYTE [NAME1],05H	; change it to 05
 21829                                  NOE5:
 21830                                  ;;;; 7/28/86
 21831 000049E5 57                      	PUSH	DI			; Start of this element
 21832 000049E6 06                      	PUSH	ES			; Save ES:BP
 21833 000049E7 51                      	PUSH	CX			; CL return from NameTrans
 21834                                  ;DOS 3.3 FastOPen 6/12/86 F.C.
 21835                                  
 21836 000049E8 E87C02                  	CALL	LookupPath		; call fastopen to get dir entry
 21837 000049EB 7303                    	JNC	short DIR_FOUND		; found dir entry
 21838                                  
 21839                                  ;DOS 3.3 FastOPen 6/12/86 F.C.
 21840 000049ED E8B5FC                  	call	FINDENTRY
 21841                                  DIR_FOUND:
 21842 000049F0 59                      	POP	CX
 21843 000049F1 07                      	POP	ES
 21844 000049F2 5F                      	POP	DI
 21845 000049F3 7303                    	JNC	short LOAD_BUF
 21846 000049F5 E9B800                  	JMP	BADPATHPOP
 21847                                  
 21848                                  LOAD_BUF:
 21849 000049F8 C53E[7405]              	LDS	DI,[CURBUF]
 21850                                  	;test	byte [bx+0Bh],10h
 21851 000049FC F6470B10                	TEST	BYTE [BX+dir_entry.dir_attr],attr_directory
 21852 00004A00 7503                    	JNZ	short GO_NEXT 		; DOS 3.3
 21853 00004A02 E98600                  	JMP	FILEINPATH		; Error or end of path
 21854                                  
 21855                                  ; if we are not setting the directory, then check for end of string
 21856                                  
 21857                                  GO_NEXT:
 21858                                  ;hkn; SS override
 21859 00004A05 36803E[F802]00          	CMP	BYTE [SS:NoSetDir],0
 21860 00004A0B 7412                    	JZ	short SetDir
 21861 00004A0D 89FA                    	MOV	DX,DI			; Save pointer to entry
 21862 00004A0F 8CD9                    	MOV	CX,DS
 21863                                  
 21864                                  ;hkn; SS is DOSDATA
 21865                                  	;context DS
 21866 00004A11 16                      	push	ss
 21867 00004A12 1F                      	pop	ds
 21868 00004A13 5F                      	POP	DI			; Start of next element
 21869                                  	; MSDOS 6.0
 21870                                  	;TEST	byte [FastOpenFlg],FastOpen_Set ;only DOSOPEN can take advantage of
 21871                                  	;JZ	short nofast			; the FastOpen
 21872                                  	;TEST	byte [FastOpenFlg],Lookup_Success ; Lookup just happened
 21873                                  	;JZ	short nofast			; no
 21874                                  	;MOV	DI,[Next_Element_Start]	; no need to insert it again
 21875                                  ;nofast:
 21876 00004A14 803D00                  	CMP	BYTE [DI],0
 21877 00004A17 7501                    	JNZ	short NEXT_ONE		; DOS 3.3
 21878                                  	;JMP	_SETRET			; Got it
 21879 00004A19 C3                      	retn	; 05/09/2018
 21880                                  NEXT_ONE:
 21881 00004A1A 57                      	PUSH	DI			; Put start of next element back on stack
 21882 00004A1B 89D7                    	MOV	DI,DX
 21883 00004A1D 8ED9                    	MOV	DS,CX			; Get back pointer to entry
 21884                                  SetDir:
 21885 00004A1F 8B14                    	MOV	DX,[SI] 		; Dir_first
 21886                                  
 21887                                  ;DOS 3.3 FastOPen 6/12/86 F.C.
 21888 00004A21 1E                      	PUSH	DS		      ; save [curbuf+2]
 21889                                  ;hkn; SS is DOSDATA
 21890 00004A22 16                      	push	ss
 21891 00004A23 1F                      	pop	ds		      ; set DS Dosgroup
 21892                                  	;test	byte [FastOpenFlg],2
 21893 00004A24 F606[6E0F]02            	TEST	byte [FastOpenFlg],Lookup_Success
 21894 00004A29 7410                    	JZ	short DO_NORMAL	      ; fastopen not in memory or path not
 21895 00004A2B 89D3                    	MOV	BX,DX		      ; not found
 21896 00004A2D 8B3E[5405]              	MOV	DI,[CLUSNUM]	      ; clusnum was set in LookupPath
 21897 00004A31 50                      	PUSH	AX		      ; save device id (AH)
 21898 00004A32 E8ABFD                  	call	SETDIRSRCH
 21899 00004A35 58                      	POP	AX		      ; restore device id (AH)
 21900 00004A36 83C402                  	ADD	SP,2		      ; pop ds in stack
 21901 00004A39 EB36                    	JMP	short FAST_OPEN_SKIP
 21902                                  
 21903                                  DO_NORMAL:
 21904 00004A3B 1F                      	POP	DS			; DS = [curbuf + 2]
 21905                                  ;DOS 3.3 FastOPen 6/12/86 F.C.
 21906                                  
 21907 00004A3C 29FB                    	SUB	BX,DI			; Offset into sector of start of entry
 21908 00004A3E 29FE                    	SUB	SI,DI			; Offset into sector of dir_first
 21909 00004A40 53                      	PUSH	BX
 21910 00004A41 50                      	PUSH	AX
 21911 00004A42 56                      	PUSH	SI
 21912 00004A43 51                      	PUSH	CX
 21913                                  	;push	word [di+6]
 21914 00004A44 FF7506                  	PUSH	WORD [DI+BUFFINFO.buf_sector]	;AN000;>32mb
 21915                                  	; MSDOS 6.0
 21916                                  	;PUSH	WORD [DI+BUFFINFO.buf_sector+2]	;AN000;>32mb
 21917 00004A47 89D3                    	MOV	BX,DX
 21918                                  
 21919                                  ;hkn; SS is DOSDATA
 21920                                  	;context DS
 21921 00004A49 16                      	push	ss
 21922 00004A4A 1F                      	pop	ds
 21923                                  	;invoke	SETDIRSRCH		; This uses UNPACK which might blow
 21924 00004A4B E892FD                  	call	SETDIRSRCH		; the entry sector buffer
 21925                                  	; MSDOS 6.0
 21926                                  	;POP	word [HIGH_SECTOR]
 21927 00004A4E 5A                      	POP	DX
 21928 00004A4F 720A                    	JC	short SKIP_GETB
 21929                                  	;mov	byte [ALLOWED],18h
 21930 00004A51 C606[F702]18            	MOV	byte [ALLOWED],Allowed_RETRY+Allowed_FAIL
 21931 00004A56 30C0                    	XOR	AL,AL
 21932                                  	;invoke	GETBUFFR		; Get the entry buffer back
 21933 00004A58 E82A14                  	call	GETBUFFR
 21934                                  SKIP_GETB:
 21935 00004A5B 59                      	POP	CX
 21936 00004A5C 5E                      	POP	SI
 21937 00004A5D 58                      	POP	AX
 21938 00004A5E 5B                      	POP	BX
 21939 00004A5F 7305                    	JNC	short SET_THE_BUF ; 19/05/2019
 21940 00004A61 5F                      	POP	DI			; Start of next element
 21941 00004A62 89FE                    	MOV	SI,DI			; Point with SI
 21942 00004A64 EB21                    	JMP	SHORT _BADPATH
 21943                                  
 21944                                  SET_THE_BUF:
 21945 00004A66 E8CFF6                  	call	SET_BUF_AS_DIR
 21946 00004A69 8B3E[7405]              	MOV	DI,[CURBUF]
 21947 00004A6D 01FE                    	ADD	SI,DI			; Get the offsets back
 21948 00004A6F 01FB                    	ADD	BX,DI
 21949                                  ; DOS 3.3 FastOpen 6/12/86  F.C.
 21950                                  FAST_OPEN_SKIP:
 21951 00004A71 5F                      	POP	DI			; Start of next element
 21952 00004A72 E86802                  	CALL	InsertPath		; insert dir entry info
 21953                                  ; DOS 3.3 FastOpen 6/12/86  F.C.
 21954 00004A75 8A05                    	MOV	AL,[DI]
 21955 00004A77 08C0                    	OR	AL,AL
 21956 00004A79 7434                    	JZ	short _SETRET		; At end
 21957 00004A7B 47                      	INC	DI			; Skip over "/"
 21958 00004A7C 89FE                    	MOV	SI,DI			; Point with SI
 21959 00004A7E E8C70B                  	call	PATHCHRCMP
 21960 00004A81 7503                    	JNZ	short find_bad_name	; oops
 21961 00004A83 E9C2FE                  	JMP	FINDPATH		; Next element
 21962                                  
 21963                                  find_bad_name:
 21964 00004A86 4E                      	DEC	SI			; Undo above INC to get failure point
 21965                                  _BADPATH:
 21966 00004A87 30C9                    	XOR	CL,CL			; Set zero
 21967 00004A89 EB2C                    	JMP	SHORT BADPRET
 21968                                  
 21969                                  FILEINPATH:
 21970 00004A8B 5F                      	POP	DI			; Start of next element
 21971                                  
 21972                                  ;hkn; SS is DOSDATA
 21973                                  	;context DS			; Got to from one place with DS gone
 21974 00004A8C 16                      	push	ss
 21975 00004A8D 1F                      	pop	ds
 21976                                  
 21977                                  ; DOS 3.3 FastOpen
 21978                                  	;test	byte [FastOpenFlg],1
 21979 00004A8E F606[6E0F]01            	TEST	byte [FastOpenFlg],FastOpen_Set  ; do this here is we don't want to
 21980 00004A93 740B                    	JZ	short NO_FAST		; device info to fastopen
 21981                                  	;test	byte [FastOpenFlg],2
 21982 00004A95 F606[6E0F]02            	TEST	byte [FastOpenFlg],Lookup_Success
 21983 00004A9A 7404                    	JZ	short NO_FAST
 21984 00004A9C 8B3E[6F0F]              	MOV	DI,[Next_Element_Start]  ; This takes care of one time lookup
 21985                                  					 ; success
 21986                                  NO_FAST:
 21987                                  ; DOS 3.3 FastOpen
 21988                                  
 21989 00004AA0 8A05                    	MOV	AL,[DI]
 21990 00004AA2 08C0                    	OR	AL,AL
 21991 00004AA4 7404                    	JZ	short INCRET
 21992 00004AA6 89FE                    	MOV	SI,DI			; Path too long
 21993 00004AA8 EB0D                    	JMP	SHORT BADPRET
 21994                                  
 21995                                  INCRET:
 21996                                  ; DOS 3.3 FasOpen 6/12/86  F.C.
 21997                                  
 21998 00004AAA E83002                  	CALL   InsertPath		; insert dir entry info
 21999                                  
 22000                                  ; DOS 3.3 FasOpen 6/12/86  F.C.
 22001 00004AAD FEC0                    	INC	AL			; Reset zero
 22002                                  _SETRET:
 22003 00004AAF C3                      	retn
 22004                                  
 22005                                  BADPATHPOP:
 22006 00004AB0 5E                      	POP	SI			; Start of next element
 22007 00004AB1 8A04                    	MOV	AL,[SI]
 22008 00004AB3 89FE                    	MOV	SI,DI			; Start of bad element
 22009 00004AB5 08C0                    	OR	AL,AL			; zero if bad element is last, non-zero if path too long
 22010                                  BADPRET:
 22011 00004AB7 A0[0805]                	MOV	AL,[SATTRIB]
 22012 00004ABA A2[0605]                	MOV	[ATTRIB],AL		; Make sure return correct
 22013 00004ABD F9                      	STC
 22014 00004ABE C3                      	retn
 22015                                  
 22016                                  ;Break	<STARTSRCH -- INITIATE DIRECTORY SEARCH>
 22017                                  ;---------------------------------------------------------------------------
 22018                                  ;
 22019                                  ; Procedure Name : STARTSRCH
 22020                                  ;
 22021                                  ; Inputs:
 22022                                  ;	[THISDPB] Set
 22023                                  ; Function:
 22024                                  ;	Set up a search for GETENTRY and NEXTENTRY
 22025                                  ; Outputs:
 22026                                  ;	ES:BP = Drive parameters
 22027                                  ;	Sets up LASTENT, ENTFREE=ENTLAST=-1, VOLID=0
 22028                                  ; Destroys ES,BP,AX
 22029                                  ;--------------------------------------------------------------------------
 22030                                  
 22031                                  STARTSRCH:
 22032 00004ABF C42E[2405]              	LES	BP,[THISDPB]
 22033 00004AC3 31C0                    	XOR	AX,AX
 22034 00004AC5 A3[F402]                	MOV	[LASTENT],AX
 22035 00004AC8 A2[1605]                	MOV	[VOLID],AL		; No volume ID found
 22036 00004ACB 48                      	DEC	AX
 22037 00004ACC A3[6A05]                	MOV	[ENTFREE],AX
 22038 00004ACF A3[6C05]                	MOV	[ENTLAST],AX
 22039 00004AD2 C3                      	retn
 22040                                  
 22041                                  ;BREAK <MatchAttributes - the final check for attribute matching>
 22042                                  ;----------------------------------------------------------------------------
 22043                                  ; Procedure Name : MatchAttributes
 22044                                  ;
 22045                                  ; Input:    [Attrib] = attribute to search for
 22046                                  ;	    CH = found attribute
 22047                                  ; Output:   JZ <match>
 22048                                  ;	    JNZ <nomatch>
 22049                                  ; Registers modified: noneski
 22050                                  ;----------------------------------------------------------------------------
 22051                                  
 22052                                  MatchAttributes:
 22053 00004AD3 50                      	PUSH	AX
 22054                                  
 22055                                  ;hkn; SS override
 22056 00004AD4 36A0[0605]              	MOV	AL,[ss:ATTRIB]		; AL <- SearchSet
 22057 00004AD8 F6D0                    	NOT	AL			; AL <- SearchSet'
 22058 00004ADA 20E8                    	AND	AL,CH			; AL <- SearchSet' and FoundSet
 22059                                  	;and	al,16h
 22060 00004ADC 2416                    	AND	AL,attr_all	; AL <- SearchSet' and FoundSet and Important
 22061                                  ;
 22062                                  ; the result is non-zero if an attribute is not in the search set
 22063                                  ; and in the found set and in the important set. This means that we do not
 22064                                  ; have a match. Do a JNZ <nomatch> or JZ <match>
 22065                                  ;
 22066 00004ADE 58                      	POP	AX
 22067 00004ADF C3                      	retn
 22068                                  
 22069                                  ;Break <DevName - Look for name of device>
 22070                                  ;---------------------------------------------------------------------------
 22071                                  ;
 22072                                  ; Procedure Name : DevName
 22073                                  ;
 22074                                  ; Inputs:
 22075                                  ;	DS,ES:DOSDATA
 22076                                  ;	Filename in NAME1
 22077                                  ;	ATTRIB set so that we can error out if looking for Volume IDs
 22078                                  ; Function:
 22079                                  ;	Determine if file is in list of I/O drivers
 22080                                  ; Outputs:
 22081                                  ;	Carry set if not a device
 22082                                  ;	ELSE
 22083                                  ;	Zero flag set
 22084                                  ;	BH = Bit 7,6 = 1, bit 5 = 0 (cooked mode)
 22085                                  ;	     bits 0-4 set from low byte of attribute word
 22086                                  ;	DEVPT = DWORD pointer to Device header of device
 22087                                  ; BX destroyed, others preserved
 22088                                  ;---------------------------------------------------------------------------
 22089                                  
 22090                                  DEVNAME:
 22091                                  	; 28/07/2018 - Retro DOS v3.0
 22092                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 49FBh
 22093                                  
 22094 00004AE0 56                      	PUSH	SI
 22095 00004AE1 57                      	PUSH	DI
 22096 00004AE2 51                      	PUSH	CX
 22097 00004AE3 50                      	PUSH	AX
 22098                                  
 22099                                  ; E5 special code
 22100 00004AE4 FF36[E604]              	PUSH	WORD [NAME1]
 22101 00004AE8 803E[E604]05            	CMP	byte [NAME1],5
 22102 00004AED 7505                    	JNZ	short NOKTR
 22103 00004AEF C606[E604]E5            	MOV	byte [NAME1],0E5h
 22104                                  NOKTR:
 22105                                  	;test	byte [ATTRIB],8
 22106 00004AF4 F606[0605]08            	TEST	byte [ATTRIB],attr_volume_id
 22107                                  					; If looking for VOL id don't find devs
 22108 00004AF9 7522                    	JNZ	short RET31
 22109                                  
 22110                                  ;hkn; NULDEV is in DOSDATA
 22111 00004AFB BE[4800]                	MOV	SI,NULDEV
 22112                                  LOOKIO:
 22113                                  	;test	word [si+4],8000h
 22114 00004AFE F744040080              	TEST	word [SI+SYSDEV.ATT],DEVTYP
 22115 00004B03 7411                    	JZ	short SKIPDEV 		; Skip block devices (NET and LOCAL)
 22116 00004B05 89F0                    	MOV	AX,SI
 22117                                  	;add	si,10
 22118 00004B07 83C60A                  	ADD	SI,SYSDEV.NAME
 22119                                  
 22120                                  ;hkn; NAME1 is in DOSDATA
 22121 00004B0A BF[E604]                	MOV	DI,NAME1
 22122 00004B0D B90400                  	MOV	CX,4			; All devices are 8 letters
 22123 00004B10 F3A7                    	REPE	CMPSW			; Check for name in list
 22124 00004B12 89C6                    	MOV	SI,AX
 22125 00004B14 7415                    	JZ	short IOCHK		; Found it?
 22126                                  SKIPDEV:
 22127 00004B16 C534                    	LDS	SI,[SI]			; Get address of next device
 22128 00004B18 83FEFF                  	CMP	SI,-1			; At end of list?
 22129 00004B1B 75E1                    	JNZ	short LOOKIO
 22130                                  RET31:	
 22131 00004B1D F9                      	STC				; Not found
 22132                                  RETNV:	
 22133 00004B1E 8CD1                    	MOV	CX,SS
 22134 00004B20 8ED9                    	MOV	DS,CX
 22135                                  
 22136 00004B22 8F06[E604]              	POP	WORD [NAME1]
 22137 00004B26 58                      	POP	AX
 22138 00004B27 59                      	POP	CX
 22139 00004B28 5F                      	POP	DI
 22140 00004B29 5E                      	POP	SI
 22141 00004B2A C3                      	RETN
 22142                                  
 22143                                  IOCHK:
 22144                                  ;hkn; SS override for DEVPT
 22145 00004B2B 368C1E[3405]            	MOV	[SS:DEVPT+2],DS		; Save pointer to device
 22146                                  	;mov	bh,[si+4]
 22147 00004B30 8A7C04                  	MOV	BH,[SI+SYSDEV.ATT]
 22148 00004B33 80CFC0                  	OR	BH,0C0h
 22149 00004B36 80E7DF                  	and	bh,0DFh
 22150                                  	;AND	BH,~(020h)		; Clears Carry
 22151 00004B39 368936[3205]            	MOV	[SS:DEVPT],SI
 22152 00004B3E EBDE                    	JMP	short RETNV
 22153                                  
 22154                                  ;BREAK <Build_device_ent - Make a Directory entry>
 22155                                  ;---------------------------------------------------------------------------
 22156                                  ; Procedure Name : Build_device_ent
 22157                                  ;
 22158                                  ; Inputs:
 22159                                  ;	[NAME1] has name
 22160                                  ;	BH is attribute field (supplied by DEVNAME)
 22161                                  ;	[DEVPT] points to device header (supplied by DEVNAME)
 22162                                  ; Function:
 22163                                  ;	Build a directory entry for a device at DEVFCB
 22164                                  ; Outputs:
 22165                                  ;	BX points to DEVFCB
 22166                                  ;	SI points to dir_first field
 22167                                  ;	AH = input BH
 22168                                  ;	AL = 0
 22169                                  ;	dir_first = DEVPT
 22170                                  ;	Zero Set, Carry Clear
 22171                                  ; DS,ES,BP preserved, others destroyed
 22172                                  ;--------------------------------------------------------------------------
 22173                                  
 22174                                  Build_device_ent:
 22175 00004B40 B82020                  	MOV	AX,"  " ; 2020h
 22176                                  
 22177                                  ;hkn; DEVFCB is in DOSDATA
 22178 00004B43 BF[EE04]                	MOV	DI,DEVFCB+8		; Point to extent field
 22179                                  
 22180                                  ;	Fill dir_ext	BUGBUG - use ERRNZs for this stuff!
 22181                                  
 22182 00004B46 AB                      	STOSW
 22183 00004B47 AA                      	STOSB				; Blank out extent field
 22184                                  	;mov	al,40h
 22185 00004B48 B040                    	MOV	AL,attr_device
 22186                                  
 22187                                  ;	Fill Dir_attr
 22188                                  
 22189 00004B4A AA                      	STOSB				; Set attribute field
 22190 00004B4B 31C0                    	XOR	AX,AX
 22191 00004B4D B90A00                  	MOV	CX,10
 22192                                  
 22193                                  ; Fill dir_pad
 22194                                  
 22195 00004B50 F3AB                    	REP	STOSW			; Fill rest with zeros
 22196 00004B52 E864CD                  	call	DATE16
 22197                                  
 22198                                  ;hkn; DEVFCB is in DOSDATA
 22199 00004B55 BF[FC04]                	MOV	DI,DEVFCB+dir_entry.dir_time ; 09/08/2018
 22200 00004B58 92                      	XCHG	AX,DX
 22201                                  
 22202                                  ; Fill dir_time
 22203                                  
 22204 00004B59 AB                      	STOSW
 22205 00004B5A 92                      	XCHG	AX,DX
 22206                                  
 22207                                  ; Fill dir_date
 22208                                  
 22209 00004B5B AB                      	STOSW
 22210 00004B5C 89FE                    	MOV	SI,DI			; SI points to dir_first field
 22211 00004B5E A1[3205]                	MOV	AX,[DEVPT]
 22212                                  
 22213                                  ; Fill dir_first
 22214                                  
 22215 00004B61 AB                      	STOSW				; Dir_first points to device
 22216 00004B62 A1[3405]                	MOV	AX,[DEVPT+2]
 22217                                  ;
 22218                                  ; Fill dir_size_l
 22219                                  ;
 22220 00004B65 AB                      	STOSW
 22221 00004B66 88FC                    	MOV	AH,BH			; Put device atts in AH
 22222                                  
 22223                                  ;hkn; DEVFCB is in DOSDATA
 22224 00004B68 BB[E604]                	MOV	BX,DEVFCB
 22225 00004B6B 30C0                    	XOR	AL,AL			; Set zero, clear carry
 22226 00004B6D C3                      	retn
 22227                                  
 22228                                  ;Break	<ValidateCDS - given a CDS, validate the media and the current directory>
 22229                                  ;----------------------------------------------------------------------------
 22230                                  ;
 22231                                  ;   ValidateCDS - Get current CDS. Splice it. Call FatReadCDS to check
 22232                                  ;   media. If media has been changed, do DOS_Chdir to validate path.
 22233                                  ;   If invalid, reset original CDS to root.
 22234                                  ;
 22235                                  ;   Inputs:	ThisCDS points to CDS of interest
 22236                                  ;		SS:DI points to temp buffer
 22237                                  ;   Outputs:	The current directory string is validated on the appropriate
 22238                                  ;		    drive
 22239                                  ;		ThisDPB changed
 22240                                  ;		ES:DI point to CDS
 22241                                  ;		Carry set if error (currently user FAILed to I 24)
 22242                                  ;   Registers modified: all
 22243                                  ;----------------------------------------------------------------------------
 22244                                  
 22245                                  ValidateCDS:
 22246                                  	; 28/07/2018 - Retro DOS v3.0
 22247                                  
 22248                                     %define  Temp	[bp-2]	; word
 22249                                     %define  SaveCDS	[bp-6]	; dword
 22250                                     %define  SaveCDSL	[bp-6]	; word
 22251                                     %define  SaveCDSH	[bp-4]	; word
 22252                                  
 22253                                  	;Enter
 22254 00004B6E 55                      	push	bp
 22255 00004B6F 89E5                    	mov	bp,sp
 22256 00004B71 83EC06                  	sub	sp,6
 22257                                  
 22258 00004B74 897EFE                  	MOV	Temp,DI
 22259                                  
 22260                                  ;hkn; SS override
 22261 00004B77 36C536[3A05]            	LDS	SI,[SS:THISCDS]
 22262 00004B7C 8976FA                  	MOV	SaveCDSL,SI
 22263 00004B7F 8C5EFC                  	MOV	SaveCDSH,DS
 22264                                  	;EnterCrit critDisk
 22265 00004B82 E8E7D4                  	call	EcritDisk
 22266                                  	;test	word [si+67],8000h
 22267 00004B85 F744430080              	TEST	word [SI+curdir.flags],curdir_isnet	; Clears carry
 22268 00004B8A 7403                    	JZ	short _DoSplice
 22269 00004B8C E98900                  	JMP	FatFail
 22270                                  _DoSplice:
 22271 00004B8F 30D2                    	XOR	DL,DL
 22272 00004B91 368616[F802]            	XCHG	DL,[SS:NoSetDir]
 22273                                  
 22274                                  ;hkn; SS is DOSDATA
 22275                                  	;Context ES
 22276 00004B96 16                      	push	ss
 22277 00004B97 07                      	pop	es
 22278                                  	;Invoke	FStrcpy
 22279 00004B98 E8C6D3                  	call	FStrCpy
 22280 00004B9B 8B76FE                  	MOV	SI,Temp
 22281                                  
 22282                                  ;hkn; SS is DOSDATA
 22283                                  	;Context DS
 22284 00004B9E 16                      	push	ss
 22285 00004B9F 1F                      	pop	ds	
 22286                                  	;Invoke	Splice
 22287 00004BA0 E83221                  	call	Splice
 22288                                  
 22289                                   ;hkn; SS is DOSDATA
 22290                                  	;Context DS			;   FatReadCDS (ThisCDS);
 22291 00004BA3 16                      	push	ss
 22292 00004BA4 1F                      	pop	ds
 22293 00004BA5 8816[F802]              	MOV	[NoSetDir],DL
 22294 00004BA9 C43E[3A05]              	LES	DI,[THISCDS]
 22295                                  	;SAVE	<BP>
 22296 00004BAD 55                      	push	bp
 22297                                  	;Invoke	FATREAD_CDS
 22298 00004BAE E80A10                  	call	FATREAD_CDS	
 22299                                  	;RESTORE <BP>
 22300 00004BB1 5D                      	pop	bp
 22301 00004BB2 7264                    	JC	short FatFail
 22302                                  
 22303 00004BB4 C536[3A05]              	LDS	SI,[THISCDS]		;   if (ThisCDS->ID == -1) {
 22304                                  	;cmp	word [si+73], -1
 22305 00004BB8 837C49FF                	CMP	word [SI+curdir.ID],-1
 22306 00004BBC 754C                    	JNZ	short RestoreCDS
 22307                                  
 22308                                  ;hkn; SS is DOSDATA
 22309                                  	;Context ES
 22310 00004BBE 16                      	push	ss
 22311 00004BBF 07                      	pop	es
 22312                                  
 22313                                  ;hkn; SS override
 22314                                  	;SAVE	<wfp_Start>		;	t = wfp_Start;
 22315 00004BC0 36FF36[4A05]            	push	word [SS:WFP_START]
 22316                                  	;cmp	si,[bp-6]
 22317 00004BC5 3B76FA                  	CMP	SI,SaveCDSL		; if not spliced
 22318 00004BC8 750B                    	JNZ	short DoChdir
 22319                                  	;mov	di,[bp-2]
 22320 00004BCA 8B7EFE                  	MOV	DI,Temp
 22321                                  
 22322                                  ;hkn; SS override
 22323 00004BCD 36893E[4A05]            	MOV	[SS:WFP_START],DI	;	wfp_start = d;
 22324                                  	;Invoke	FStrCpy 		;	strcpy (d, ThisCDS->Text);
 22325 00004BD2 E88CD3                  	call	FStrCpy
 22326                                  DoChdir:
 22327                                  ;hkn; SS is DOSDATA
 22328                                  	;Context DS
 22329 00004BD5 16                      	push	ss
 22330 00004BD6 1F                      	pop	ds
 22331                                  	;SAVE	<<WORD PTR SAttrib>,BP> ;	c = DOSChDir ();
 22332 00004BD7 FF36[0805]              	push	word [SATTRIB]
 22333 00004BDB 55                      	push	bp
 22334                                  	;Invoke	DOS_ChDir
 22335 00004BDC E80BF1                  	call	DOS_CHDIR
 22336                                  	;RESTORE <BP,BX,wfp_start>	;	wfp_Start = t;
 22337 00004BDF 5D                      	pop	bp
 22338 00004BE0 5B                      	pop	bx
 22339 00004BE1 8F06[4A05]              	pop	word [WFP_START]
 22340 00004BE5 881E[0805]              	MOV	[SATTRIB],BL
 22341 00004BE9 C576FA                  	LDS	SI,SaveCDS
 22342 00004BEC 730F                    	JNC	short SetCluster	;	if (c == -1) {
 22343                                  
 22344                                  ;hkn; SS override for THISCDS
 22345 00004BEE 368936[3A05]            	MOV	[SS:THISCDS],SI		;	    ThisCDS = TmpCDS;
 22346 00004BF3 368C1E[3C05]            	MOV	[SS:THISCDS+2],DS
 22347 00004BF8 31C9                    	XOR	CX,CX			;	    TmpCDS->text[3] = c = 0;
 22348 00004BFA 884C03                  	MOV	[SI+3],CL		;	    }
 22349                                  SetCluster:
 22350                                  	;mov	word [si+73],0FFFFh
 22351 00004BFD C74449FFFF              	MOV	word [SI+curdir.ID],-1	;	TmpCDS->ID = -1;
 22352 00004C02 36C536[3A05]            	LDS	SI,[SS:THISCDS]		;	ThisCDS->ID = c;
 22353                                  	; MSDOS 6.0
 22354                                  	;TEST	word [SI+curdir.flags],curdir_splice ;AN000;;MS. for Join and Subst
 22355                                  	;JZ	short setdirclus		     ;AN000;;MS.
 22356                                  	;MOV	CX,-1				     ;AN000;;MS.
 22357                                  setdirclus:
 22358                                  	;mov	[si+73],cx
 22359 00004C07 894C49                  	MOV	[SI+curdir.ID],CX	;	}
 22360                                  RestoreCDS:
 22361 00004C0A C47EFA                  	LES	DI,SaveCDS
 22362 00004C0D 36893E[3A05]            	MOV	[SS:THISCDS],DI
 22363 00004C12 368C06[3C05]            	MOV	[SS:THISCDS+2],ES
 22364 00004C17 F8                      	CLC
 22365                                  FatFail:
 22366                                  	;LeaveCrit critDisk
 22367 00004C18 E859D4                  	call	LcritDisk
 22368                                  
 22369                                  	;les	di,[bp-6]
 22370 00004C1B C47EFA                  	LES	DI,SaveCDS
 22371                                  	;Leave
 22372 00004C1E 89EC                    	mov	sp,bp
 22373 00004C20 5D                      	pop	bp
 22374 00004C21 C3                      	retn
 22375                                  
 22376                                  ; 28/07/2018 - Retro DOS v3.0
 22377                                  ; IBMDOS.COM (MSDOS 3.3, 1987) - offset 43BDh
 22378                                  
 22379                                  ;Break	<CheckThisDevice - Check for being a device>
 22380                                  ;---------------------------------------------------------------------------
 22381                                  ;
 22382                                  ;   CheckThisDevice - Examine the area at DS:SI to see if there is a valid
 22383                                  ;   device specified. We will return carry if there is a device present. 
 22384                                  ;   The forms of devices we will recognize are:
 22385                                  ;
 22386                                  ;	[path]device
 22387                                  ;
 22388                                  ;   Note that the drive letter has *already* been removed. All other forms
 22389                                  ;   are not considered to be devices. If such a device is found we change
 22390                                  ;   the source pointer to point to the device component.
 22391                                  ;
 22392                                  ;   Inputs:	ES is DOSDATA
 22393                                  ;		DS:SI contains name
 22394                                  ;   Outputs:	ES is DOSDATA
 22395                                  ;		DS:SI point to name or device
 22396                                  ;		Carry flag set if device was found
 22397                                  ;		Carry flag reset otherwise
 22398                                  ;   Registers Modified: all except ES:DI, DS
 22399                                  ;----------------------------------------------------------------------------
 22400                                  
 22401                                  CheckThisDevice:
 22402 00004C22 57                      	push	di
 22403 00004C23 56                      	push	si
 22404 00004C24 89F7                    	MOV	DI,SI
 22405                                  ;
 22406                                  ; Check for presence of \dev\ (Dam multiplan!)
 22407                                  ;
 22408 00004C26 8A04                    	MOV	AL,[SI]
 22409 00004C28 E81D0A                  	call	PATHCHRCMP		; is it a path char?
 22410 00004C2B 7517                    	JNZ	short ParseDev		; no, go attempt to parse device
 22411 00004C2D 46                      	INC	SI			; simulate LODSB
 22412                                  ;
 22413                                  ; We have the leading path separator. Look for DEV part.
 22414                                  ;
 22415 00004C2E AD                      	LODSW
 22416 00004C2F 0D2020                  	OR	AX,2020h
 22417 00004C32 3D6465                  	cmp	ax,"de"
 22418                                  	;CMP	AX,"e"<< 8 + "d"
 22419 00004C35 752D                    	JNZ	short NotDevice		; not "de", assume not device
 22420 00004C37 AC                      	LODSB
 22421 00004C38 0C20                    	OR	AL,20h
 22422 00004C3A 3C76                    	CMP	AL,"v"                  ; Not "v", assume not device
 22423 00004C3C 7526                    	JNZ	short NotDevice
 22424 00004C3E AC                      	LODSB
 22425 00004C3F E8060A                  	call	PATHCHRCMP		; do we have the last path separator?
 22426 00004C42 7520                    	JNZ	short NotDevice		; no. go for it.
 22427                                  ;
 22428                                  ; DS:SI now points to a potential drive. Preserve them as NameTrans advances
 22429                                  ; SI and DevName may destroy DS.
 22430                                  ;
 22431                                  ParseDev:
 22432 00004C44 1E                      	push	ds
 22433 00004C45 56                      	push	si			; preserve the source pointer
 22434 00004C46 E89509                  	call	NameTrans		; advance DS:SI
 22435 00004C49 803C00                  	CMP	BYTE [SI],0		; parse entire string?
 22436 00004C4C F9                      	STC				; simulate a Carry return from DevName
 22437 00004C4D 750B                    	JNZ	short SkipSearch	; no parse. simulate a file return.
 22438                                  
 22439                                  ;hkn; SS is DOSDATA
 22440 00004C4F 16                      	push	ss
 22441 00004C50 1F                      	pop	ds
 22442                                  
 22443                                  ; M026 - start - fix ported from ROMDOS2 for bug # 2849
 22444                                  ;
 22445                                  ; SR;
 22446                                  ; We have to set Attrib before invoking DevName. Otherwise, the value from
 22447                                  ; a previous DOS call is used and DevName thinks it is not a device if the
 22448                                  ; old call set the volume attribute bit.
 22449                                  ;
 22450 00004C51 A0[0805]                	mov	al,[SATTRIB]
 22451 00004C54 A2[0605]                	mov	[ATTRIB],al		;set Attrib for DevName
 22452                                  
 22453                                  ; M026 - end
 22454                                  
 22455 00004C57 E886FE                  	call	DEVNAME
 22456                                  
 22457                                  SkipSearch:
 22458 00004C5A 5E                      	pop	si
 22459 00004C5B 1F                      	pop	ds
 22460                                  ;
 22461                                  ; SI points to the beginning of the potential device. If we have a device
 22462                                  ; then we do not change SI. If we have a file, then we reset SI back to the
 22463                                  ; original value. At this point Carry set indicates FILE.
 22464                                  ;
 22465                                  CheckReturn:
 22466 00004C5C 5F                      	pop	di			; get original SI
 22467 00004C5D 7302                    	JNC	short Check_Done	; if device then do not reset pointer
 22468 00004C5F 89FE                    	MOV	SI,DI
 22469                                  Check_Done:
 22470 00004C61 5F                      	pop	di
 22471 00004C62 F5                      	CMC				; invert carry. Carry => device
 22472 00004C63 C3                      	retn
 22473                                  NotDevice:
 22474 00004C64 F9                      	STC
 22475 00004C65 EBF5                    	JMP	short CheckReturn
 22476                                  
 22477                                  ;BREAK <LookupPath - call fastopen to get dir entry info>
 22478                                  ;-----------------------------------------------------------------------------
 22479                                  ;
 22480                                  ; Procedure Name : LookupPath
 22481                                  ;
 22482                                  ; Output  DS:SI -> path name,
 22483                                  ;	  ES:DI -> dir entry info buffer
 22484                                  ;	  ES:CX -> extended dir info buffer
 22485                                  ;
 22486                                  ;	  carry flag clear : tables pointed by ES:DI and ES:CX are filled by
 22487                                  ;			     FastOpen, DS:SI points to char just one after
 22488                                  ;			     the last char of path name which is fully or
 22489                                  ;			     partially found in FastOPen
 22490                                  ;	  carry flag set : FastOpen not in memory or path name not found
 22491                                  ;
 22492                                  ;----------------------------------------------------------------------------
 22493                                  
 22494                                  LookupPath:
 22495                                  ;	PUSH	AX
 22496                                  
 22497                                  ;hkn; SS override
 22498                                  	;test	byte [ss:FastOpenFlg],1
 22499 00004C67 36F606[6E0F]01          	TEST	byte [ss:FastOpenFlg],FastOpen_Set  ; flg is set in DOSPEN
 22500 00004C6D 7502                    	JNZ	short FASTINST			    ; and this routine is
 22501                                  NOLOOK:
 22502 00004C6F EB6A                    	JMP	NOLOOKUP			    ; executed once
 22503                                  
 22504                                  FASTINST:
 22505                                  ;hkn; SS override
 22506                                  	;test	byte [ss:FastOpenFlg],8
 22507 00004C71 36F606[6E0F]08          	TEST	byte [ss:FastOpenFlg],No_Lookup	    ; no more lookup?
 22508 00004C77 75F6                    	JNZ	short NOLOOK			    ; yes
 22509                                  
 22510 00004C79 BB[430F]                	MOV	BX,FastOpenTable		    ; get fastopen related tab
 22511                                  
 22512                                  ;hkn; SS override
 22513 00004C7C 368B36[4A05]            	MOV	SI,[SS:WFP_START]		    ; si points to path name
 22514 00004C81 BF[4E0F]                	MOV	DI,Dir_Info_Buff
 22515 00004C84 B9[490F]                	MOV	CX,FastOpen_Ext_Info
 22516 00004C87 B001                    	MOV	AL,FONC_Look_up 		    ; al = 1
 22517 00004C89 1E                      	PUSH	DS
 22518 00004C8A 07                      	POP	ES
 22519                                  
 22520                                  ;hkn; SS override
 22521                                  	;call	far [bx+2]
 22522 00004C8B FF5F02                  	CALL	far [BX+fastopen_entry.name_caching] ;call fastopen
 22523 00004C8E 723A                    	JC	short NOTFOUND			    ; fastopen not in memory
 22524                                  
 22525 00004C90 8D5CFE                  	LEA	BX,[SI-2]
 22526                                  
 22527                                  ;hkn; SS override
 22528 00004C93 363B1E[4A05]            	CMP	BX,[SS:WFP_START]		    ; path found ?
 22529 00004C98 7430                    	JZ	short NOTFOUND			    ; no
 22530                                  
 22531                                  	; MSDOSD 6.0				    ; fully or partially found
 22532                                  	;CMP	BYTE [SI],0			    ;AN000;FO.
 22533                                  	;JNZ	short parfnd			    ;AN000;FO.; partiallyfound
 22534                                  	;PUSH	CX				    ;AN000;FO.; is attribute matched ?
 22535                                  
 22536                                  ;hkn; SS override for attrib/sattrib
 22537                                  	;MOV	CL,[ss:ATTRIB]			    ;AN000;FO.;
 22538                                  	;MOV	CH,[ss:SATTRIB]			    ;AN000;FO.; attrib=sattrib
 22539                                  	;MOV	[ss:ATTRIB],CH			    ;AN000;FO.;
 22540                                  	;MOV	CH,[ES:DI+dir_entry.dir_attr]	    ;AN000;FO.;
 22541                                  	;call	Matchattributes 		    ;AN000;FO.;
 22542                                  ;;;	MOV	[ss:ATTRIB],CL			    ;AN001;FO.; restore attrib
 22543                                  	;POP	CX				    ;AN000;FO.;
 22544                                  	;JNZ	short NOLOOKUP			    ;AN000;FO.; not matched
 22545                                  ;parfnd:
 22546                                  
 22547                                  ;hkn; SS override
 22548 00004C9A 368936[6F0F]            	MOV	[SS:Next_Element_Start],SI	    ; save si
 22549 00004C9F 89CB                    	MOV	BX,CX
 22550                                  	; MSDOS 6.0
 22551                                  	;MOV	AX,[BX+FEI.lastent]		    ;AN000;;FO. restore lastentry
 22552                                  ;hkn; SS override for LASTENT, DIRSTART, CLUSNUM
 22553                                  	;MOV	[SS:LASTENT],AX			    ;AN000;;FO.
 22554                                  	;MOV	AX,[BX+FEI.dirstart]		    ;AN001;;FO. restore dirstart
 22555                                  	;MOV	[SS:DIRSTART],AX			    ;AN001;;FO.
 22556                                  	; MSDOS 3.3 (& MSDOS 6.0)
 22557                                  	;mov	ax,[bx+3] ; MSDOS 3.3
 22558 00004CA1 8B4703                  	MOV	AX,[BX+FEI.clusnum]		    ; restore next cluster num
 22559 00004CA4 36A3[5405]              	MOV	[SS:CLUSNUM],AX			    ;
 22560                                  
 22561 00004CA8 06                      	PUSH	ES				    ; save ES
 22562                                  ;hkn; SS override
 22563 00004CA9 36C41E[2405]            	LES	BX,[SS:THISDPB]			    ; put drive id
 22564 00004CAE 268A27                  	mov	ah,[ES:BX] ; 15/08/2018
 22565                                  	;MOV	AH,[ES:BX+DPB.DRIVE]		    ; in AH for DOOPEN
 22566 00004CB1 07                      	POP	ES				    ; pop ES
 22567                                  ;SR;
 22568                                  ; We cannot have a root dir if we have come here. So, we zero out CurBuf to
 22569                                  ;indicate it is not a root dir
 22570                                  ;
 22571 00004CB2 36C706[7405]0000        	mov	word [SS:CURBUF],0		    ; indicate not root dir
 22572                                  
 22573 00004CB9 368C06[7605]            	MOV	WORD [SS:CURBUF+2],ES		    ; [curbuf+2].bx points to
 22574 00004CBE 89FB                    	MOV	BX,DI				    ; start of entry
 22575                                  	;lea	si,[di+1Ah]
 22576 00004CC0 8D751A                  	LEA	SI,[DI+dir_entry.dir_first]	    ; [curbuf+2]:si points to
 22577                                  						    ; dir_first field in the
 22578                                  						    ; dir entry
 22579                                  ;hkn; SS override for FastOpenFlg
 22580                                  	;or	byte [ss:FastOpenFlg],2
 22581 00004CC3 36800E[6E0F]12          	OR	byte [SS:FastOpenFlg],Lookup_Success+Set_For_Search
 22582                                  ;	POP	AX
 22583 00004CC9 C3                      	RETN
 22584                                  NOTFOUND:
 22585 00004CCA 83F8FF                  	CMP	AX,-1				    ; not in memory ?
 22586 00004CCD 7506                    	JNZ	short Partial_Success 		    ; yes, in memory
 22587 00004CCF 36C606[6E0F]00          	MOV	byte [SS:FastOpenFlg],0		    ; no more fastopen
 22588                                  Partial_Success:
 22589                                  	;and	byte [SS:FastOpenFlg],0FBh
 22590 00004CD5 368026[6E0F]FB          	AND	byte [SS:FastOpenFlg],Special_Fill_Reset
 22591                                  NOLOOKUP:
 22592                                  ;	POP	AX
 22593 00004CDB F9                      	STC
 22594 00004CDC C3                      	RETN
 22595                                  
 22596                                  ;BREAK <InsertPath - call fastopen to insert dir entry info>
 22597                                  ;-----------------------------------------------------------------------------
 22598                                  ;
 22599                                  ; Procedure Name : InsertPath
 22600                                  ; Input:  FastOpen_Set flag set when from DOSOPEN otherwise 0
 22601                                  ;	  Lookup_Success flag set when got dir entry info from FASTOPEN
 22602                                  ;	  DS = DOSDATA
 22603                                  ; Output: FastOPen_Ext_Info is set and path dir info is inserted
 22604                                  ;
 22605                                  ;-----------------------------------------------------------------------------
 22606                                  
 22607                                  InsertPath:
 22608 00004CDD 9C                      	PUSHF
 22609                                  ;hkn; SS override for FastOpenFlag
 22610                                  	;test	byte [SS:FastOpenFlg], 1
 22611 00004CDE 36F606[6E0F]01          	TEST	byte [SS:FastOpenFlg],FastOpen_Set ;only DOSOPEN can take advantage of
 22612 00004CE4 7465                    	JZ	short GET_NEXT_ELEMENT		; the FastOpen
 22613                                  	;test	byte [ss:FastOpenFlg],2
 22614 00004CE6 36F606[6E0F]02          	TEST	byte [SS:FastOpenFlg],Lookup_Success ; Lookup just happened
 22615 00004CEC 740D                    	JZ	short INSERT_DIR_INFO		; no
 22616                                  	;and	byte [ss:FastOpenFlg],0FDh
 22617 00004CEE 368026[6E0F]FD          	AND	byte [SS:FastOpenFlg],Lookup_Reset  ; we got dir info from fastopen so
 22618 00004CF4 368B3E[6F0F]            	MOV	DI,[SS:Next_Element_Start]	; no need to insert it again
 22619 00004CF9 EB4A                    	JMP	short GET_NEXT2
 22620                                  INSERT_DIR_INFO:				; save registers
 22621 00004CFB 1E                      	PUSH	DS
 22622 00004CFC 06                      	PUSH	ES
 22623 00004CFD 53                      	PUSH	BX
 22624 00004CFE 56                      	PUSH	SI
 22625 00004CFF 57                      	PUSH	DI
 22626 00004D00 51                      	PUSH	CX
 22627 00004D01 50                      	PUSH	AX
 22628                                  
 22629                                  ;hkn; SS override
 22630 00004D02 36C53E[7405]            	LDS	DI,[SS:CURBUF]			; DS:DI -> buffer header
 22631 00004D07 BE[490F]                	MOV	SI,FastOpen_Ext_Info
 22632                                  	;mov	ax,[di+6]
 22633 00004D0A 8B4506                  	MOV	AX,[DI+BUFFINFO.buf_sector]	; get directory sector
 22634                                  	; 22/07/2019
 22635                                  	; MSDOS 6.0
 22636                                  	;MOV	[SS:SI+FEI.dirsec],AX 		;AN000; >32mb save dir sector
 22637                                  	;MOV	AX,[DI+BUFFINFO.buf_sector+2]	;AN000; >32mb
 22638                                  
 22639                                  ;hkn; SS is DOSDATA
 22640 00004D0D 16                      	push	ss
 22641 00004D0E 1F                      	pop	ds
 22642                                  	; MSDOS 6.0
 22643                                  	;MOV	[SI+FEI.dirsec+2],AX  ;AN000;>32mb save high dir sector
 22644                                  	; MSDOS 3.3	
 22645                                  	;mov	[si+1],ax	
 22646 00004D0F 894401                  	MOV	[SI+FEI.dirsec],AX
 22647                                  	; MSDOS 3.3 (& MSDOS 6.0)
 22648 00004D12 A1[5405]                	MOV	AX,[CLUSNUM]		; save next cluster number
 22649                                  	;;mov	[si+5],ax ; MSDOS 6.0
 22650                                  	;mov	[si+3],ax ; MSDOS 3.3
 22651 00004D15 894403                  	MOV	[SI+FEI.clusnum],AX
 22652                                  	; MSDOS 6.0
 22653                                  	;MOV	AX,[LASTENT]		;AN000;FO. save lastentry for search first
 22654                                  	;MOV	[SI+FEI.lastent],AX	;AN000;FO.
 22655                                  	;MOV	AX,[DIRSTART]		;AN001;FO. save  for search first
 22656                                  	;MOV	[SI+FEI.dirstart],AX	;AN001;FO.
 22657                                  	; MSDOS 3.3 (& MSDOS 6.0)
 22658 00004D18 89D8                    	MOV	AX,BX
 22659                                  	;add	di,16
 22660 00004D1A 83C710                  	ADD	DI,BUFINSIZ		; DS:DI -> start of data in buffer
 22661 00004D1D 29F8                    	SUB	AX,DI			; AX=BX relative to start of sector
 22662                                  	;mov	cl,32
 22663 00004D1F B120                    	MOV	CL,dir_entry.size
 22664 00004D21 F6F1                    	DIV	CL
 22665                                  	;MOV	[SI+FEI.dirpos],AL	; save directory entry # in buffer
 22666 00004D23 8804                    	mov	[si],al
 22667                                  
 22668 00004D25 1E                      	PUSH	DS
 22669 00004D26 07                      	POP	ES
 22670                                  
 22671 00004D27 8E1E[7605]              	MOV	DS,[CURBUF+2]
 22672 00004D2B 89DF                    	MOV	DI,BX			; DS:DI -> dir entry info
 22673                                  	;cmp	word [di+1Ah],0
 22674 00004D2D 837D1A00                	CMP	word [DI+dir_entry.dir_first],0 
 22675                                  					; never insert info when file is empty
 22676 00004D31 740B                    	JZ	short SKIP_INSERT	; e.g. newly created file
 22677                                  
 22678 00004D33 56                      	PUSH	SI			; ES:BX -> extended info
 22679 00004D34 5B                      	POP	BX
 22680                                  
 22681                                  	;mov	al,2
 22682 00004D35 B002                    	MOV	AL,FONC_insert		; call fastopen insert operation
 22683 00004D37 BE[430F]                	MOV	SI,FastOpenTable
 22684                                  	;call	far [es:si+2]
 22685 00004D3A FF5C02                  	CALL	far [SI+fastopen_entry.name_caching]
 22686                                  
 22687 00004D3D F8                      	CLC
 22688                                  SKIP_INSERT:
 22689 00004D3E 58                      	POP	AX
 22690 00004D3F 59                      	POP	CX			; restore registers
 22691 00004D40 5F                      	POP	DI
 22692 00004D41 5E                      	POP	SI
 22693 00004D42 5B                      	POP	BX
 22694 00004D43 07                      	POP	ES
 22695 00004D44 1F                      	POP	DS
 22696                                  GET_NEXT2:
 22697                                  	;or	[ss:FastOpenFlg],8
 22698 00004D45 36800E[6E0F]08          	OR	byte [SS:FastOpenFlg],No_Lookup
 22699                                  					; we got dir info from fastopen so
 22700                                  GET_NEXT_ELEMENT:
 22701 00004D4B 9D                      	POPF
 22702 00004D4C C3                      	RETN
 22703                                  
 22704                                  ;============================================================================
 22705                                  ; DEV.ASM, MSDOS 6.0, 1991
 22706                                  ;============================================================================
 22707                                  ; 28/07/2018 - Retro DOS v3.0
 22708                                  
 22709                                  ; DEV.ASM: Retro DOS v2.0 - 14/03/2018
 22710                                  
 22711                                  ;TITLE   DEV - Device call routines
 22712                                  ;NAME    Dev
 22713                                  
 22714                                  ;Break	<IOFUNC -- DO FUNCTION 1-12 I/O>
 22715                                  ;----------------------------------------------------------------------------
 22716                                  ;
 22717                                  ; Procedure Name : IOFUNC
 22718                                  ;
 22719                                  ; Inputs:
 22720                                  ;	DS:SI Points to SFT
 22721                                  ;	AH is function code
 22722                                  ;		= 0 Input
 22723                                  ;		= 1 Input Status
 22724                                  ;		= 2 Output
 22725                                  ;		= 3 Output Status
 22726                                  ;		= 4 Flush
 22727                                  ;		= 5 Input Status - System WAIT invoked for K09 if no char
 22728                                  ;				   present.
 22729                                  ;	AL = character if output
 22730                                  ; Function:
 22731                                  ;	Perform indicated I/O to device or file
 22732                                  ; Outputs:
 22733                                  ;	AL is character if input
 22734                                  ;	If a status call
 22735                                  ;		zero set if not ready
 22736                                  ;		zero reset if ready (character in AL for input status)
 22737                                  ; For regular files:
 22738                                  ;	Input Status
 22739                                  ;		Gets character but restores position
 22740                                  ;		Zero set on EOF
 22741                                  ;	Input
 22742                                  ;		Gets character advances position
 22743                                  ;		Returns ^Z on EOF
 22744                                  ;	Output Status
 22745                                  ;		Always ready
 22746                                  ; AX altered, all other registers preserved
 22747                                  ;----------------------------------------------------------------------------
 22748                                  
 22749                                  IOFUNC:
 22750 00004D4D 368C16[3403]            	MOV	[SS:IOXAD+2],SS		; SS override for IOXAD, IOSCNT, 
 22751                                  					; DEVIOBUF
 22752 00004D52 36C706[3203][5E03]      	MOV	WORD [SS:IOXAD],DEVIOBUF
 22753 00004D59 36C706[3603]0100        	MOV	WORD [SS:IOSCNT],1
 22754 00004D60 36A3[5E03]              	MOV	WORD [SS:DEVIOBUF],AX
 22755                                  	;test	word [si+5],8000h
 22756 00004D64 F744050080              	TEST	word [SI+SF_ENTRY.sf_flags],sf_isnet
 22757 00004D69 7403                    	JZ	short IOTO22		;AN000;
 22758 00004D6B E98500                  	JMP	IOTOFILE		;AN000;
 22759                                  IOTO22:
 22760                                  	;test	word [si+5],80h ; 17/05/2019
 22761 00004D6E F744058000              	TEST	word [SI+SF_ENTRY.sf_flags],devid_device 
 22762 00004D73 7502                    	JNZ	short IOTO33		;AN000;
 22763 00004D75 EB7C                    	JMP	IOTOFILE		;AN000;
 22764                                  IOTO33:
 22765 00004D77 E87EC8                  	call	save_world
 22766 00004D7A 8CDA                    	MOV	DX,DS
 22767 00004D7C 8CD3                    	MOV	BX,SS
 22768 00004D7E 8EDB                    	MOV	DS,BX
 22769 00004D80 8EC3                    	MOV	ES,BX
 22770 00004D82 31DB                    	XOR	BX,BX
 22771 00004D84 80FC05                  	cmp	ah,5		    ; system wait enabled?
 22772 00004D87 7504                    	jnz	short _no_sys_wait
 22773 00004D89 81CB0004                	or	bx,0400H	    ; Set bit 10 in status word for driver
 22774                                  				    ; It is up to device driver to carry out
 22775                                  				    ; appropriate action.
 22776                                  _no_sys_wait:
 22777 00004D8D 891E[2703]              	MOV	[IOCALL_REQSTAT],BX
 22778 00004D91 31DB                    	XOR	BX,BX
 22779 00004D93 881E[3103]              	MOV	[IOMED],BL
 22780                                  
 22781 00004D97 88E3                    	MOV	BL,AH		 	; get function
 22782 00004D99 8AA7[0413]              	MOV	AH,[BX+LenTab]
 22783 00004D9D D1E3                    	SHL	BX,1
 22784 00004D9F 8B8F[0A13]              	MOV	CX,[BX+CmdTab]
 22785 00004DA3 BB[2403]                	MOV	BX,IOCALL
 22786 00004DA6 8826[2403]              	MOV	[IOCALL_REQLEN],AH
 22787 00004DAA 882E[2603]              	MOV	[IOCALL_REQFUNC],CH
 22788                                  
 22789 00004DAE 8EDA                    	MOV	DS,DX
 22790 00004DB0 E84401                  	CALL	DEVIOCALL
 22791 00004DB3 368B3E[2703]            	MOV	DI,[SS:IOCALL_REQSTAT]	; SS override
 22792                                  	;test	di,8000h
 22793                                  	;jnz	short DevErr
 22794 00004DB8 21FF                    	and	di,di
 22795 00004DBA 7820                    	js	short DevErr
 22796                                  
 22797                                  OKDevIO:
 22798 00004DBC 8CD0                    	MOV	AX,SS
 22799 00004DBE 8ED8                    	MOV	DS,AX
 22800                                  
 22801                                  	;cmp	ch, 5
 22802 00004DC0 80FD05                  	CMP	CH,DEVRDND
 22803 00004DC3 7506                    	JNZ	short DNODRD
 22804 00004DC5 A0[3103]                	MOV	AL,[IORCHR]
 22805 00004DC8 A2[5E03]                	MOV	[DEVIOBUF],AL
 22806                                  
 22807                                  DNODRD: 
 22808 00004DCB 8A26[2803]              	MOV	AH,[IOCALL_REQSTAT+1]
 22809 00004DCF F6D4                    	NOT	AH			; Zero = busy, not zero = ready
 22810                                  	;and	ah,2
 22811 00004DD1 80E402                  	AND	AH,STBUI>>8
 22812                                  
 22813                                  QuickReturn:				;AN000; 2/13/KK
 22814 00004DD4 E80EC8                  	call	restore_world
 22815                                  
 22816                                  	; SR;
 22817                                  	; We return ax = -1 if the user failed on I24. This is the case if 
 22818                                  	; IoStatFail = -1 (set after return from the I24)
 22819                                  	;
 22820                                  
 22821                                  	; MSDOS 6.0
 22822                                  	;pushf
 22823                                  	;mov	al,[ss:IoStatFail]	;assume fail error
 22824                                  	;cbw				;sign extend to word
 22825                                  	;cmp	ax,-1
 22826                                  	;jne	short not_fail_ret
 22827                                  	;inc	byte [ss:IoStatFail]
 22828                                  	;popf
 22829                                  	;retn
 22830                                  
 22831                                  ;not_fail_ret:
 22832 00004DD7 36A1[5E03]              	MOV	AX,[SS:DEVIOBUF]	;ss override
 22833                                  	;popf
 22834 00004DDB C3                      	retn
 22835                                  
 22836                                  ;IOTOFILEJ:
 22837                                  ;	JMP	SHORT IOTOFILE
 22838                                  
 22839                                  DevErr:
 22840 00004DDC 88CC                    	MOV	AH,CL
 22841 00004DDE E8490A                  	call	CHARHARD
 22842 00004DE1 3C01                    	CMP	AL,1
 22843 00004DE3 7506                    	JNZ	short NO_RETRY
 22844 00004DE5 E8FDC7                  	call	restore_world		
 22845 00004DE8 E962FF                  	JMP	IOFUNC	; 10/08/2018
 22846                                  
 22847                                  NO_RETRY:
 22848                                  
 22849                                  	; Know user must have wanted Ignore OR Fail. Make sure device shows ready
 22850                                  	; ready so that DOS doesn't get caught in a status loop when user 
 22851                                  	; simply wants to ignore the error.
 22852                                  	;
 22853                                  	; SR; If fail wanted by user set ax to special value (ax = -1). This 
 22854                                  	; should be checked by the caller on return
 22855                                  	;
 22856                                  
 22857                                  					; SS override
 22858 00004DEB 368026[2803]FD          	and	byte [SS:IOCALL_REQSTAT+1],0FDh
 22859                                  	;AND	BYTE [SS:IOCALL_REQSTAT+1],~(STBUI >> 8)
 22860                                  
 22861                                  	; SR;
 22862                                  	; Check if user failed
 22863                                  	;
 22864                                  
 22865                                  	; MSDOS 6.0
 22866                                  	;cmp	al,3
 22867                                  	;jnz	short not_fail
 22868                                  	;dec	byte [ss:IoStatFail]	;set flag indicating fail on I24
 22869                                  ;not_fail:
 22870 00004DF1 EBC9                    	JMP	short OKDevIO
 22871                                  
 22872                                  IOTOFILE:
 22873 00004DF3 08E4                    	OR	AH,AH
 22874 00004DF5 7423                    	JZ	short IOIN
 22875 00004DF7 FECC                    	DEC	AH
 22876 00004DF9 7405                    	JZ	short IOIST
 22877 00004DFB FECC                    	DEC	AH
 22878 00004DFD 7411                    	JZ	short IOUT
 22879 00004DFF C3                      	retn				; NON ZERO FLAG FOR OUTPUT STATUS
 22880                                  
 22881                                  IOIST:
 22882                                  	;push	word [si+15h]
 22883 00004E00 FF7415                  	PUSH	WORD [SI+SF_ENTRY.sf_position]   ; Save position
 22884                                  	;push	word [si+17h]
 22885 00004E03 FF7417                  	PUSH	WORD [SI+SF_ENTRY.sf_position+2]
 22886 00004E06 E81100                  	CALL	IOIN
 22887                                  	;pop	word [si+17h]
 22888 00004E09 8F4417                  	POP	WORD [SI+SF_ENTRY.sf_position+2] ; Restore position
 22889                                  	;pop	word [si+15h]
 22890 00004E0C 8F4415                  	POP	WORD [SI+SF_ENTRY.sf_position]
 22891 00004E0F C3                      	retn
 22892                                  
 22893                                  IOUT:
 22894 00004E10 E81B00                  	CALL	SETXADDR
 22895 00004E13 E86BF1                  	call	DOS_WRITE
 22896 00004E16 E84800                  	CALL	RESTXADDR	; If you change this into a jmp don't
 22897                                  IOUT_retn:
 22898 00004E19 C3                      	retn			; come crying to me when things don't
 22899                                  				; work ARR
 22900                                  IOIN:
 22901 00004E1A E81100                  	CALL	SETXADDR
 22902                                  					; SS override for DOS34_FLAG
 22903                                  	;OR	word [SS:DOS34_FLAG],Disable_EOF_I24	;AN000;
 22904 00004E1D E8E0EF                  	CALL	DOS_READ
 22905                                  	;AND	word [SS:DOS34_FLAG],NO_Disable_EOF_I24 ;AN000;
 22906 00004E20 09C9                    	OR	CX,CX			; Check EOF
 22907 00004E22 E83C00                  	CALL	RESTXADDR
 22908                                  					; SS override
 22909 00004E25 36A0[5E03]              	MOV	AL,[SS:DEVIOBUF]	; Get byte from trans addr
 22910 00004E29 75EE                    	jnz	short IOUT_retn	
 22911 00004E2B B01A                    	MOV	AL,1AH			; ^Z if no bytes
 22912 00004E2D C3                      	retn
 22913                                  
 22914                                  SETXADDR:
 22915                                  					; SS override
 22916 00004E2E 368F06[1803]            	POP	WORD [SS:CALLSCNT]	; Return address
 22917                                  
 22918 00004E33 E8C2C7                  	call	save_world
 22919                                  
 22920                                  					; SS override for DMAADD and THISSFT
 22921 00004E36 36FF36[DA02]            	PUSH	WORD [SS:DMAADD]	; Save Disk trans addr
 22922 00004E3B 36FF36[DC02]            	PUSH	WORD [SS:DMAADD+2]
 22923 00004E40 368C1E[3805]            	MOV	[SS:THISSFT+2],DS
 22924                                  
 22925 00004E45 16                      	push	ss
 22926 00004E46 1F                      	pop	ds
 22927                                  
 22928 00004E47 8936[3605]              	MOV	[THISSFT],SI		; Finish setting SFT pointer
 22929 00004E4B 8B0E[3403]              	MOV	CX,[IOXAD+2]
 22930 00004E4F 890E[DC02]              	MOV	[DMAADD+2],CX
 22931 00004E53 8B0E[3203]              	MOV	CX,[IOXAD]
 22932 00004E57 890E[DA02]              	MOV	[DMAADD],CX		; Set byte trans addr
 22933 00004E5B 8B0E[3603]              	MOV	CX,[IOSCNT]		; ioscnt specifies length of buffer
 22934 00004E5F EB0F                    	JMP	SHORT RESTRET		; RETURN ADDRESS
 22935                                  
 22936                                  RESTXADDR:
 22937 00004E61 8F06[1803]              	POP	WORD [CALLSCNT]		; Return address
 22938 00004E65 8F06[DC02]              	POP	WORD [DMAADD+2]		; Restore Disk trans addr
 22939 00004E69 8F06[DA02]              	POP	WORD [DMAADD]
 22940                                  
 22941 00004E6D E875C7                  	call	restore_world
 22942                                  					; SS override
 22943                                  RESTRET:
 22944 00004E70 36FF26[1803]            	JMP	WORD [SS:CALLSCNT]	; Return address
 22945                                  
 22946                                  
 22947                                  ; 29/07/2018 - Retro DOS v3.0
 22948                                  ; IBMDOS.COM (1987) - Offset 4D82h
 22949                                  
 22950                                  ;Break <DEV_OPEN_SFT, DEV_CLOSE_SFT - OPEN or CLOSE A DEVICE>
 22951                                  
 22952                                  ;----------------------------------------------------------------------------
 22953                                  ;**	Dev_Open_SFT - Open the Device for an SFT
 22954                                  ;
 22955                                  ;	Dev_Open_SFT issues an open call to the device associated with
 22956                                  ;	the SFT.
 22957                                  ;
 22958                                  ;	ENTRY	(ES:DI) = SFT
 22959                                  ;	EXIT	none
 22960                                  ;	USES	all
 22961                                  ;----------------------------------------------------------------------------
 22962                                  
 22963                                  DEV_OPEN_SFT:
 22964 00004E75 E880C7                  	call	save_world
 22965                                  	;mov	al,0Dh	
 22966 00004E78 B00D                    	MOV	AL,DEVOPN
 22967 00004E7A EB05                    	JMP	SHORT DO_OPCLS
 22968                                  
 22969                                  ;----------------------------------------------------------------------------
 22970                                  ; Procedure Name : DEV_CLOSE_SFT
 22971                                  ;
 22972                                  ; Inputs:
 22973                                  ;	ES:DI Points to SFT
 22974                                  ; Function:
 22975                                  ;	Issue a CLOSE call to the correct device
 22976                                  ; Outputs:
 22977                                  ;	None
 22978                                  ; ALL preserved
 22979                                  ;----------------------------------------------------------------------------
 22980                                  
 22981                                  DEV_CLOSE_SFT:
 22982 00004E7C E879C7                  	call	save_world
 22983                                  	;mov	al,0Eh	
 22984 00004E7F B00E                    	MOV	AL,DEVCLS
 22985                                  
 22986                                  	; Main entry for device open and close. AL contains the function 
 22987                                  	; requested. Subtlety: if Sharing is NOT loaded then we do NOT issue 
 22988                                  	; open/close to block devices. This allows networks to function but 
 22989                                  	; does NOT hang up with bogus change-line code.
 22990                                  
 22991                                  	;entry	DO_OPCLS
 22992                                  DO_OPCLS:
 22993                                  	; Is the SFT for the net?  If so, no action necessary.
 22994                                  
 22995                                  	; MSDOS 3.3
 22996                                  	;call	IsSFTNet
 22997                                  	;jnz	short OPCLS_DONE
 22998                                  
 22999                                  	; MSDOS 6.0
 23000                                  	;test	word [es:di+5],8000h
 23001 00004E81 26F745050080            	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 23002 00004E87 756A                    	JNZ	short OPCLS_DONE	; NOP on net SFTs
 23003 00004E89 30E4                    	XOR	AH,AH			; Unit
 23004                                  	;test	word [es:di+5],80h
 23005 00004E8B 26F745058000            	TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 23006                                  	;les	di,[es:di+7]
 23007 00004E91 26C47D07                	LES	DI,[ES:DI+SF_ENTRY.sf_devptr] ; Get DPB or device
 23008 00004E95 7513                    	JNZ	short GOT_DEV_ADDR
 23009                                  
 23010                                  	; We are about to call device open/close on a block driver. If no 
 23011                                  	; sharing then just short circuit to done.
 23012                                  	
 23013                                  ;;;;;	invoke	CheckShare
 23014                                  
 23015                                  	; MSDOS 3.3
 23016                                  	;call	CheckShare	; cmp byte [cs:fShare],0
 23017                                  	;jz	short OPCLS_DONE
 23018                                  
 23019                                  	; MSDOS 6.0
 23020                                  					; SS override
 23021 00004E97 36803E[B102]01          	CMP	byte [ss:fShare],1	;AN010; /NC or no SHARE
 23022 00004E9D 7654                    	JBE	short OPCLS_DONE	;AN010; yes
 23023                                  
 23024                                  	; MSDOS 3.3 (& MSDOS 6.0)
 23025                                  	;mov	ah,[es:di+1]
 23026 00004E9F 268A6501                	MOV	AH,[ES:DI+DPB.UNIT]	; (ah) = unit
 23027 00004EA3 268A0D                  	mov	cl,[es:di]
 23028                                  	;MOV	CL,[ES:DI+DPB.DRIVE]	; (cl) = drive
 23029                                  	;les	di,[es:di+12h]
 23030 00004EA6 26C47D12                	LES	DI,[ES:DI+DPB.DRIVER_ADDR] ; Get device
 23031                                  GOT_DEV_ADDR:				; ES:DI -> device
 23032                                  	;test	word [es:di+4],800h
 23033 00004EAA 26F745040008            	TEST	word [ES:DI+SYSDEV.ATT],DEVOPCL
 23034 00004EB0 7441                    	JZ	short OPCLS_DONE	; Device can't
 23035 00004EB2 06                      	PUSH	ES
 23036 00004EB3 1F                      	POP	DS
 23037 00004EB4 89FE                    	MOV	SI,DI			; DS:SI -> device
 23038                                  OPCLS_RETRY:
 23039                                  	;Context ES
 23040 00004EB6 16                      	push	ss
 23041 00004EB7 07                      	pop	es
 23042                                  					; DEVCALL is in DOSDATA
 23043 00004EB8 BF[0603]                	MOV	DI,DEVCALL
 23044                                  
 23045 00004EBB 89FB                    	MOV	BX,DI
 23046 00004EBD 50                      	PUSH	AX
 23047                                  	;mov	al,13
 23048 00004EBE B00D                    	MOV	AL,DOPCLHL
 23049 00004EC0 AA                      	STOSB				; Length
 23050 00004EC1 58                      	POP	AX
 23051 00004EC2 86E0                    	XCHG	AH,AL
 23052 00004EC4 AA                      	STOSB				; Unit
 23053 00004EC5 86E0                    	XCHG	AH,AL
 23054 00004EC7 AA                      	STOSB				; Command
 23055 00004EC8 26C7050000              	MOV	WORD [ES:DI],0		; Status
 23056 00004ECD 50                      	PUSH	AX			; Save Unit,Command
 23057                                  	;invoke	DEVIOCALL2
 23058 00004ECE E82900                  	call	DEVIOCALL2
 23059                                  
 23060                                  	;mov	di,[es:bx+3]
 23061 00004ED1 268B7F03                	MOV	DI,[ES:BX+SRHEAD.REQSTAT]
 23062                                  	;test	di,8000h
 23063                                  	;jz	short OPCLS_DONEP	
 23064 00004ED5 21FF                    	and	di,di
 23065 00004ED7 7919                    	jns	short OPCLS_DONEP	; No error
 23066                                  	;test	word [si+4],8000h
 23067                                  	; 22/11/2022 (!BugFix!)
 23068 00004ED9 F744040080              	TEST	word [SI+SYSDEV.ATT],DEVTYP
 23069 00004EDE 7404                    	JZ	short BLKDEV
 23070 00004EE0 B486                    	MOV	AH,86H			; Read error in data, Char dev
 23071 00004EE2 EB04                    	JMP	SHORT HRDERR
 23072                                  
 23073                                  BLKDEV:
 23074 00004EE4 88C8                    	MOV	AL,CL			; Drive # in AL
 23075 00004EE6 B406                    	MOV	AH,6			; Read error in data, Blk dev
 23076                                  HRDERR:
 23077                                  	;invoke	CHARHARD
 23078 00004EE8 E83F09                  	call	CHARHARD
 23079 00004EEB 3C01                    	CMP	AL,1
 23080 00004EED 7503                    	JNZ	short OPCLS_DONEP	; IGNORE or FAIL
 23081                                  					;  Note that FAIL is essentually IGNORED
 23082 00004EEF 58                      	POP	AX			; Get back Unit, Command
 23083 00004EF0 EBC4                    	JMP	short OPCLS_RETRY
 23084                                  
 23085                                  OPCLS_DONEP:
 23086 00004EF2 58                      	POP	AX			; Clean stack
 23087                                  OPCLS_DONE:
 23088 00004EF3 E8EFC6                  	call	restore_world
 23089 00004EF6 C3                      	retn
 23090                                  
 23091                                  ;Break	<DEVIOCALL, DEVIOCALL2 - CALL A DEVICE>
 23092                                  ;----------------------------------------------------------------------------
 23093                                  ;**	DevIoCall  - Call Device
 23094                                  ;
 23095                                  ;	ENTRY	DS:SI Points to device SFT
 23096                                  ;		ES:BX Points to request data
 23097                                  ;	EXIT	DS:SI -> Device driver
 23098                                  ;	USES	DS:SI,AX
 23099                                  ;----------------------------------------------------------------------------
 23100                                  ;**	DevIoCall2 - Call Device
 23101                                  ;
 23102                                  ;	ENTRY	DS:SI Points to DPB
 23103                                  ;		ES:BX Points to request data
 23104                                  ;	EXIT	DS:SI -> Device driver
 23105                                  ;	USES	DS:SI,AX
 23106                                  ;----------------------------------------------------------------------------
 23107                                  
 23108                                  DEVIOCALL:
 23109                                  					; SS override for CALLSSEC, 
 23110                                  	;lds	si,[si+7]		; CALLNEWSC, HIGH_SECTOR & CALLDEVAD
 23111 00004EF7 C57407                  	LDS	SI,[SI+SF_ENTRY.sf_devptr]
 23112                                  
 23113                                  	;entry	DEVIOCALL2
 23114                                  DEVIOCALL2:
 23115                                  	;EnterCrit critDevice
 23116 00004EFA E87FD1                  	call	EcritDevice
 23117                                  
 23118                                  	; MSDOS 6.0
 23119                                  	;TEST	word [SI+SYSDEV.ATT],DevTyp ;AN000; >32mb   block device ?
 23120                                  	;JNZ	short chardev2		;AN000; >32mb   no
 23121                                  	;CMP	byte [ES:BX+SRHEAD.REQFUNC],DEVRD  ;AN000; >32mb   read ?
 23122                                  	;JZ	short chkext		;AN000; >32mb   yes
 23123                                  	;CMP	byte [ES:BX+SRHEAD.REQFUNC],DEVWRT ;AN000; >32mb   write ?
 23124                                  	;JZ	short chkex		;AN000; >32mb   yes
 23125                                  	;CMP	byte [ES:BX+SRHEAD.REQFUNC],DEVWRTV
 23126                                  	;				;AN000; >32mb   write/verify ?
 23127                                  	;JNZ	short chardev2		;AN000; >32mb   no
 23128                                  ;chkext:
 23129                                  	;CALL	RW_SC			;AN000;LB. use secondary cache if there
 23130                                  	;JC	short dev_exit		;AN000;LB. done
 23131                                  	;
 23132                                  	;TEST	word [SI+SYSDEV.ATT],EXTDRVR ;AN000;>32mb   extended driver?
 23133                                  	;JZ	short chksector		;AN000;>32mb   no
 23134                                  	;ADD	BYTE [ES:BX],8		;AN000;>32mb   make length to 30
 23135                                  	;MOV	AX,[SS:CALLSSEC]	;AN000;>32mb
 23136                                  	;MOV	[SS:CALLSSEC],-1	;AN000;>32mb   old sector  =-1
 23137                                  	;MOV	[SS:CALLNEWSC],AX	;AN000;>32mb   new sector  =
 23138                                  	;MOV	AX,[SS:HIGH_SECTOR]	;AN000; >32mb  low sector,high sector
 23139                                  	;MOV	[SS:CALLNEWSC+2],AX	;AN000; >32mb
 23140                                  	;JMP	short chardev2		;AN000; >32mb
 23141                                  ;chksector:				;AN000; >32mb
 23142                                  	;CMP	word [SS:HIGH_SECTOR],0	;AN000; >32mb   if >32mb
 23143                                  	;JZ	short chardev2		;AN000; >32mb   then fake error
 23144                                  	;MOV	word [ES:BX+SRHEAD.REQSTAT],STERR+STDON+ERROR_I24_NOT_DOS_DISK 
 23145                                  	;				;AN000; >32mb
 23146                                  	;JMP	SHORT dev_exit		;AN000; >32mb
 23147                                  
 23148                                  ;chardev2:				;AN000;
 23149                                  
 23150                                  	; As above only DS:SI points to device header on entry, and DS:SI is 
 23151                                  	; preserved
 23152                                  
 23153                                  	;mov	ax,[si+6]
 23154 00004EFD 8B4406                  	MOV	AX,[SI+SYSDEV.STRAT]
 23155 00004F00 36A3[2003]              	MOV	[SS:CALLDEVAD],AX
 23156 00004F04 368C1E[2203]            	MOV	[SS:CALLDEVAD+2],DS
 23157 00004F09 36FF1E[2003]            	CALL	far [SS:CALLDEVAD]
 23158                                  	;mov	ax,[si+8]
 23159 00004F0E 8B4408                  	MOV	AX,[SI+SYSDEV.INT]
 23160 00004F11 36A3[2003]              	MOV	[SS:CALLDEVAD],AX
 23161 00004F15 36FF1E[2003]            	CALL	far [SS:CALLDEVAD]
 23162                                  	; MSDOS 6.0
 23163                                  	;CALL	VIRREAD 		;AN000;LB. move data from SC to buffer
 23164                                  	;JC	short chardev2		;AN000;LB. bad sector or exceeds max sec
 23165                                  dev_exit:
 23166                                  	;LeaveCrit critDevice
 23167 00004F1A E867D1                  	call	LcritDevice
 23168 00004F1D C3                      	retn
 23169                                  
 23170                                  ;Break	<SETREAD, SETWRITE -- SET UP HEADER BLOCK>
 23171                                  ;---------------------------------------------------------------------------
 23172                                  ;
 23173                                  ; Procedure Name : SETREAD, SETWRITE
 23174                                  ;
 23175                                  ; Inputs:
 23176                                  ;	DS:BX = Transfer Address
 23177                                  ;	CX = Record Count
 23178                                  ;	DX = Starting Record
 23179                                  ;	AH = Media Byte
 23180                                  ;	AL = Unit Code
 23181                                  ; Function:
 23182                                  ;	Set up the device call header at DEVCALL
 23183                                  ; Output:
 23184                                  ;	ES:BX Points to DEVCALL
 23185                                  ; No other registers effected
 23186                                  ;
 23187                                  ;---------------------------------------------------------------------------
 23188                                  
 23189                                  SETREAD:
 23190 00004F1E 57                      	PUSH	DI
 23191 00004F1F 51                      	PUSH	CX
 23192 00004F20 50                      	PUSH	AX
 23193 00004F21 B104                    	MOV	CL,DEVRD ; mov cl,4
 23194                                  SETCALLHEAD:
 23195 00004F23 B016                    	MOV	AL,DRDWRHL ; mov al,16h
 23196 00004F25 16                      	PUSH	SS
 23197 00004F26 07                      	POP	ES
 23198                                  					; DEVCALL is in DOSDATA
 23199 00004F27 BF[0603]                	MOV	DI,DEVCALL
 23200                                  
 23201 00004F2A AA                      	STOSB				; length
 23202 00004F2B 58                      	POP	AX
 23203 00004F2C AA                      	STOSB				; Unit
 23204 00004F2D 50                      	PUSH	AX
 23205 00004F2E 88C8                    	MOV	AL,CL
 23206 00004F30 AA                      	STOSB				; Command code
 23207 00004F31 31C0                    	XOR	AX,AX
 23208 00004F33 AB                      	STOSW				; Status
 23209 00004F34 83C708                  	ADD	DI,8			; Skip link fields
 23210 00004F37 58                      	POP	AX
 23211 00004F38 86E0                    	XCHG	AH,AL
 23212 00004F3A AA                      	STOSB				; Media byte
 23213 00004F3B 86C4                    	XCHG	AL,AH
 23214 00004F3D 50                      	PUSH	AX
 23215 00004F3E 89D8                    	MOV	AX,BX
 23216 00004F40 AB                      	STOSW
 23217 00004F41 8CD8                    	MOV	AX,DS
 23218 00004F43 AB                      	STOSW				; Transfer addr
 23219 00004F44 59                      	POP	CX			; Real AX
 23220 00004F45 58                      	POP	AX			; Real CX
 23221 00004F46 AB                      	STOSW				; Count
 23222 00004F47 92                      	XCHG	AX,DX			; AX=Real DX, DX=real CX, CX=real AX
 23223 00004F48 AB                      	STOSW				; Start
 23224 00004F49 91                      	XCHG	AX,CX
 23225 00004F4A 87D1                    	XCHG	DX,CX
 23226 00004F4C 5F                      	POP	DI
 23227                                  					; DEVCALL is in DOSDATA
 23228 00004F4D BB[0603]                	MOV	BX,DEVCALL
 23229 00004F50 C3                      	retn
 23230                                  
 23231                                  	;entry	SETWRITE
 23232                                  SETWRITE:
 23233                                  
 23234                                  ; Inputs:
 23235                                  ;	DS:BX = Transfer Address
 23236                                  ;	CX = Record Count
 23237                                  ;	DX = Starting Record
 23238                                  ;	AH = Media Byte
 23239                                  ;	AL = Unit Code
 23240                                  ; Function:
 23241                                  ;	Set up the device call header at DEVCALL
 23242                                  ; Output:
 23243                                  ;	ES:BX Points to DEVCALL
 23244                                  ; No other registers effected
 23245                                  
 23246 00004F51 57                      	PUSH	DI
 23247 00004F52 51                      	PUSH	CX
 23248 00004F53 50                      	PUSH	AX
 23249 00004F54 B108                    	MOV	CL,DEVWRT ; mov cl,8
 23250 00004F56 36020E[AD02]            	ADD	CL,[SS:VERFLG]		; SS override
 23251 00004F5B EBC6                    	JMP	SHORT SETCALLHEAD
 23252                                  
 23253                                  ;Break	<RW_SC -- Read Write Secondary Cache>
 23254                                  ;---------------------------------------------------------------------------
 23255                                  ;
 23256                                  ; Procedure Name : RW_SC
 23257                                  ;
 23258                                  ; Inputs:
 23259                                  ;	 [SC_CACHE_COUNT]= secondary cache count
 23260                                  ;	 [SC_STATUS]= SC validity status
 23261                                  ;	 [SEQ_SECTOR]= last sector read
 23262                                  ; Function:
 23263                                  ;	Read from or write through secondary cache
 23264                                  ; Output:
 23265                                  ;	ES:BX Points to DEVCALL
 23266                                  ;	carry clear, I/O is not done
 23267                                  ;		     [SC_FLAG]=1 if continuos sectors will be read
 23268                                  ;	carry set, I/O is done
 23269                                  ;
 23270                                  ;----------------------------------------------------------------------------
 23271                                  
 23272                                  ;procedure   RW_SC,NEAR		;AN000;
 23273                                  ;
 23274                                  ;	; SS override for all variables used.
 23275                                  ;
 23276                                  ;	CMP	[SC_CACHE_COUNT],0	;AN000;LB. secondary cache exists?
 23277                                  ;	JZ	scexit4 		;AN000;LB. no, do nothing
 23278                                  ;	CMP	[CALLSCNT],1		;AN000;LB. sector count = 1 (buffer I/O)
 23279                                  ;	JNZ	scexit4 		;AN000;LB. no, do nothing
 23280                                  ;	PUSH	CX			    ;AN000;;LB.
 23281                                  ;	PUSH	DX			    ;AN000;;LB. yes
 23282                                  ;	PUSH	DS			    ;AN000;;LB. save registers
 23283                                  ;	PUSH	SI			    ;AN000;;LB.
 23284                                  ;	PUSH	ES			    ;AN000;;LB.
 23285                                  ;	PUSH	DI			    ;AN000;;LB.
 23286                                  ;	MOV	DX,WORD PTR [CALLSSEC]	    ;AN000;;LB.  starting sector
 23287                                  ;	CMP	BYTE PTR [DEVCALL.REQFUNC],DEVRD ;AN000;LB. read ?
 23288                                  ;	JZ	doread			    ;AN000;LB. yes
 23289                                  ;	CALL	INVALIDATE_SC		    ;AN000;LB. invalidate SC
 23290                                  ;	JMP	scexit2 		    ;AN000;LB. back to normal
 23291                                  ;scexit4:				    ;AN000;
 23292                                  ;	CLC				    ;AN000;LB. I/O not done yet
 23293                                  ;	return				    ;AN000;LB.
 23294                                  ;doread: 				    ;AN000;
 23295                                  ;	CALL	SC2BUF			    ;AN000;LB. check if in SC
 23296                                  ;	JC	readSC			    ;AN000;LB.
 23297                                  ;	MOV	[DEVCALL.REQSTAT],STDON     ;AN000;LB. fake done and ok
 23298                                  ;	STC				    ;AN000;LB. set carry
 23299                                  ;	JMP	short saveseq 		    ;AN000;LB. save seq. sector #
 23300                                  ;readSC: 				    ;AN000;
 23301                                  ;	MOV	AX,WORD PTR [HIGH_SECTOR]   ;AN000;;LB. subtract sector num from
 23302                                  ;	MOV	CX,WORD PTR [CALLSSEC]	    ;AN000;;LB. saved sequential sector
 23303                                  ;	SUB	CX,WORD PTR [SEQ_SECTOR]    ;AN000;;LB. number
 23304                                  ;	SBB	AX,WORD PTR [SEQ_SECTOR+2]  ;AN000;;LB.
 23305                                  ;	CMP	AX,0			    ;AN000;;LB. greater than 64K
 23306                                  ;	JNZ	saveseq2		    ;AN000;;LB. yes,save seq. sector #
 23307                                  ;chklow: 						
 23308                                  ;	CMP	CX,1			    ;AN000;;LB. <= 1
 23309                                  ;	JA	saveseq2		    ;AN000;;LB. no, not sequential
 23310                                  ;	MOV	[SC_STATUS],-1		    ;AN000;;LB. prsume all SC valid
 23311                                  ;	MOV	AX,[SC_CACHE_COUNT]	    ;AN000;;LB. yes, sequential
 23312                                  ;	MOV	[CALLSCNT],AX		    ;AN000;;LB. read continuous sectors
 23313                                  ;readsr:
 23314                                  ;	MOV	AX,WORD PTR [CALLXAD+2]     ;AN000;;LB. save buffer addr
 23315                                  ;	MOV	[TEMP_VAR2],AX		    ;AN000;;LB. in temp vars
 23316                                  ;	MOV	AX,WORD PTR [CALLXAD]	    ;AN000;;LB.
 23317                                  ;	MOV	[TEMP_VAR],AX		    ;AN000;;LB.
 23318                                  ;						
 23319                                  ;	MOV	AX,WORD PTR [SC_CACHE_PTR]  ;AN000;LB. use SC cache addr as
 23320                                  ;	MOV	WORD PTR [CALLXAD],AX	    ;AN000;LB. transfer addr
 23321                                  ;	MOV	AX,WORD PTR [SC_CACHE_PTR+2] ;AN000;LB.
 23322                                  ;	MOV	WORD PTR [CALLXAD+2],AX     ;AN000;LB.
 23323                                  ;	MOV	[SC_FLAG],1		    ;AN000;LB. flag it for later;
 23324                                  ;	MOV	AL,[SC_DRIVE]		    ;AN000;;LB. current drive
 23325                                  ;	MOV	[CURSC_DRIVE],AL	    ;AN000;;LB. set current drive
 23326                                  ;	MOV	AX,WORD PTR [CALLSSEC]	    ;AN000;;LB. current sector
 23327                                  ;	MOV	[CURSC_SECTOR],AX	    ;AN000;;LB. set current sector
 23328                                  ;	MOV	AX,WORD PTR [HIGH_SECTOR]   ;AN000;;LB.
 23329                                  ;	MOV	[CURSC_SECTOR+2],AX	    ;AN000;;LB.
 23330                                  ;saveseq2:				    ;AN000;
 23331                                  ;	CLC				    ;AN000;LB. clear carry
 23332                                  ;saveseq:				    ;AN000;	
 23333                                  ;	MOV	AX,[HIGH_SECTOR]	    ;AN000;LB. save current sector #
 23334                                  ;	MOV	WORD PTR [SEQ_SECTOR+2],AX  ;AN000;LB. for access mode ref.
 23335                                  ;	MOV	AX,[CALLSSEC]		    ;AN000;LB.	
 23336                                  ;	MOV	WORD PTR [SEQ_SECTOR],AX    ;AN000;LB.	
 23337                                  ;	JMP	short scexit 		    ;AN000;LB.	
 23338                                  ;						
 23339                                  ;scexit2:				    ;AN000;LB.
 23340                                  ;	CLC				    ;AN000;LB.	clear carry
 23341                                  ;scexit: 				    ;AN000;		
 23342                                  ;	POP	DI			    ;AN000;;LB.
 23343                                  ;	POP	ES			    ;AN000;;LB. restore registers
 23344                                  ;	POP	SI			    ;AN000;;LB.
 23345                                  ;	POP	DS			    ;AN000;;LB.
 23346                                  ;	POP	DX			    ;AN000;;LB.
 23347                                  ;	POP	CX			    ;AN000;;LB.
 23348                                  ;	return				    ;AN000;;LB.
 23349                                  ;							
 23350                                  ;EndProc RW_SC				    ;AN000;
 23351                                  
 23352                                  ;Break	<IN_SC -- check if in secondary cache>
 23353                                  ;--------------------------------------------------------------------------
 23354                                  ;
 23355                                  ; Procedure Name : IN_SC
 23356                                  ;
 23357                                  ; Inputs:  [SC_DRIVE]= requesting drive
 23358                                  ;	   [CURSC_DRIVE]= current SC drive
 23359                                  ;	   [CURSC_SECTOR] = starting scetor # of SC
 23360                                  ;	   [SC_CACHE_COUNT] = SC count
 23361                                  ;	   [HIGH_SECTOR]:DX= sector number
 23362                                  ; Function:
 23363                                  ;	Check if the sector is in secondary cache
 23364                                  ; Output:
 23365                                  ;	carry clear, in SC
 23366                                  ;	   CX= the index in the secondary cache
 23367                                  ;	carry set, not in SC
 23368                                  ;
 23369                                  ;---------------------------------------------------------------------------
 23370                                  
 23371                                  ;procedure   IN_SC,NEAR		    ;AN000;
 23372                                  ;
 23373                                  ;	; SS override for all variables used
 23374                                  ;
 23375                                  ;	MOV	AL,[SC_DRIVE]		    ;AN000;;LB. current drive
 23376                                  ;	CMP	AL,[CURSC_DRIVE]	    ;AN000;;LB. same as SC drive
 23377                                  ;	JNZ	outrange2		    ;AN000;;LB. no
 23378                                  ;	MOV	AX,WORD PTR [HIGH_SECTOR]   ;AN000;;LB. subtract sector num from
 23379                                  ;	MOV	CX,DX			    ;AN000;;LB. secondary starting sector
 23380                                  ;	SUB	CX,WORD PTR [CURSC_SECTOR]    ;AN000;;LB. number
 23381                                  ;	SBB	AX,WORD PTR [CURSC_SECTOR+2]  ;AN000;;LB.
 23382                                  ;	CMP	AX,0			    ;AN000;;LB. greater than 64K
 23383                                  ;	JNZ	outrange2		    ;AN000;;LB. yes
 23384                                  ;	CMP	CX,[SC_CACHE_COUNT]	    ;AN000;;LB. greater than SC count
 23385                                  ;	JAE	outrange2		    ;AN000;;LB. yes
 23386                                  ;	CLC				    ;AN000;;LB. clear carry
 23387                                  ;	JMP	short inexit		    ;AN000;;LB. in SC
 23388                                  ;outrange2:				    ;AN000;;LB. set carry
 23389                                  ;	STC				    ;AN000;;LB.
 23390                                  ;inexit: 				    ;AN000;;LB.
 23391                                  ;	return				    ;AN000;;LB.
 23392                                  ;
 23393                                  ;EndProc IN_SC				    ;AN000;
 23394                                  
 23395                                  ;Break	<INVALIDATE_SC - invalide secondary cache>
 23396                                  ;---------------------------------------------------------------------------
 23397                                  ;
 23398                                  ; Procedure Name : Invalidate_Sc
 23399                                  ;
 23400                                  ; Inputs:  [SC_DRIVE]= requesting drive
 23401                                  ;	   [CURSC_DRIVE]= current SC drive
 23402                                  ;	   [CURSC_SECTOR] = starting scetor # of SC
 23403                                  ;	   [SC_CACHE_COUNT] = SC count
 23404                                  ;	   [SC_STAUS] = SC status word
 23405                                  ;	   [HIGH_SECTOR]:DX= sector number
 23406                                  ;
 23407                                  ; Function:
 23408                                  ;	invalidate secondary cache if in there
 23409                                  ; Output:
 23410                                  ;	[SC_STATUS] is updated
 23411                                  ;---------------------------------------------------------------------------
 23412                                  
 23413                                  ;procedure   INVALIDATE_SC,NEAR	    ;AN000;
 23414                                  ;
 23415                                  ;	; SS override for all variables used
 23416                                  ;
 23417                                  ;	CALL	IN_SC			    ;AN000;;LB. in secondary cache
 23418                                  ;	JC	outrange		    ;AN000;;LB. no
 23419                                  ;	MOV	AX,1			    ;AN000;;LB. invalidate the sector
 23420                                  ;	SHL	AX,CL			    ;AN000;;LB. in the secondary cache
 23421                                  ;	NOT	AX			    ;AN000;;LB.
 23422                                  ;	AND	[SC_STATUS],AX		    ;AN000;;LB. save the status
 23423                                  ;outrange:				    ;AN000;;LB.
 23424                                  ;	return				    ;AN000;;LB.
 23425                                  ;
 23426                                  ;EndProc INVALIDATE_SC			    ;AN000;
 23427                                  
 23428                                  
 23429                                  ;Break	<VIRREAD- virtually read data into buffer>
 23430                                  ;--------------------------------------------------------------------------
 23431                                  ;
 23432                                  ; Procedure Name : SC_FLAG
 23433                                  ;
 23434                                  ; Inputs:  SC_FLAG = 0 , no sectors were read into SC
 23435                                  ;		     1, continous sectors were read into SC
 23436                                  ; Function:
 23437                                  ;	   Move data from SC to buffer
 23438                                  ; Output:
 23439                                  ;	 carry clear, data is moved to buffer
 23440                                  ;	 carry set, bad sector or exceeds maximum sector
 23441                                  ;	   SC_FLAG =0
 23442                                  ;	   CALLSCNT=1
 23443                                  ;	   SC_STATUS= -1 if succeeded
 23444                                  ;     
 23445                                  ;		       0 if failed
 23446                                  ;--------------------------------------------------------------------------
 23447                                  
 23448                                  ;procedure   VIRREAD,NEAR	    ;AN000;
 23449                                  ;
 23450                                  ;	; SS override for all variables used
 23451                                  ;
 23452                                  ;	CMP	[SC_FLAG],0		    ;AN000;;LB.  from SC fill
 23453                                  ;	JZ	sc2end			    ;AN000;;LB.  no
 23454                                  ;	MOV	AX,[TEMP_VAR2]		    ;AN000;;LB. restore buffer addr
 23455                                  ;	MOV	WORD PTR [CALLXAD+2],AX     ;AN000;;LB.
 23456                                  ;	MOV	AX,[TEMP_VAR]		    ;AN000;;LB.
 23457                                  ;	MOV	WORD PTR [CALLXAD],AX	    ;AN000;;LB.
 23458                                  ;	MOV	[SC_FLAG],0		    ;AN000;;LB.  reset sc_flag
 23459                                  ;	MOV	[CALLSCNT],1		    ;AN000;;LB.  one sector transferred
 23460                                  ;
 23461                                  ;	TESTB	[DEVCALL.REQSTAT],STERR     ;AN000;;LB.  error?
 23462                                  ;	JNZ	scerror 		    ;AN000;;LB. yes
 23463                                  ;	PUSH	DS			    ;AN000;;LB.
 23464                                  ;	PUSH	SI			    ;AN000;;LB.
 23465                                  ;	PUSH	ES			    ;AN000;;LB.
 23466                                  ;	PUSH	DI			    ;AN000;;LB.
 23467                                  ;	PUSH	DX			    ;AN000;;LB.
 23468                                  ;	PUSH	CX			    ;AN000;;LB.
 23469                                  ;	XOR	CX,CX			    ;AN000;;LB. we want first sector in SC
 23470                                  ;	CALL	SC2BUF2 		    ;AN000;;LB. move data from SC to buffer
 23471                                  ;	POP	CX			    ;AN000;;LB.
 23472                                  ;	POP	DX			    ;AN000;;LB.
 23473                                  ;	POP	DI			    ;AN000;;LB.
 23474                                  ;	POP	ES			    ;AN000;;LB.
 23475                                  ;	POP	SI			    ;AN000;;LB.
 23476                                  ;	POP	DS			    ;AN000;;LB.
 23477                                  ;	JMP	SHORT sc2end		    ;AN000;;LB. return
 23478                                  ;
 23479                                  ;scerror:				    ;AN000;
 23480                                  ;	MOV	[CALLSCNT],1		    ;AN000;;LB. reset sector count to 1
 23481                                  ;	MOV	[SC_STATUS],0		    ;AN000;;LB. invalidate all SC sectors
 23482                                  ;	MOV	[CURSC_DRIVE],-1	    ;AN000;;LB. invalidate drive
 23483                                  ;	STC				    ;AN000;;LB. carry set
 23484                                  ;	return				    ;AN000;;LB.
 23485                                  ;
 23486                                  ;sc2end: 				    ;AN000;
 23487                                  ;	CLC				    ;AN000;;LB. carry clear
 23488                                  ;	return				    ;AN000;;LB.
 23489                                  ;
 23490                                  ;EndProc VIRREAD 			    ;AN000;
 23491                                  
 23492                                  ;Break	<SC2BUF- move data from SC to buffer>
 23493                                  ;----------------------------------------------------------------------------
 23494                                  ;
 23495                                  ; Procedure Name : SC2BUF
 23496                                  ;
 23497                                  ; Inputs:  [SC_STATUS] = SC validity status
 23498                                  ;	   [SC_SECTOR_SIZE] = request sector size
 23499                                  ;	   [SC_CACHE_PTR] = pointer to SC
 23500                                  ; Function:
 23501                                  ;	   Move data from SC to buffer
 23502                                  ; Output:
 23503                                  ;	   carry clear, in SC  and data is moved
 23504                                  ;	   carry set, not in SC and data is not moved
 23505                                  ;---------------------------------------------------------------------------
 23506                                  
 23507                                  ;procedure   SC2BUF,NEAR 	    ;AN000;
 23508                                  ;
 23509                                  ;	; SS override for all variables used
 23510                                  ;
 23511                                  ;	CALL	IN_SC			    ;AN000;;LB. in secondary cache
 23512                                  ;	JC	noSC			    ;AN000;;LB. no
 23513                                  ;	MOV	AX,1			    ;AN000;;LB. check if valid sector
 23514                                  ;	SHL	AX,CL			    ;AN000;;LB. in the secondary cache
 23515                                  ;	TEST	[SC_STATUS],AX		    ;AN000;;LB.
 23516                                  ;	JZ	noSC			    ;AN000;;LB. invalid
 23517                                  ;entry SC2BUF2				    ;AN000;
 23518                                  ;	MOV	AX,CX			    ;AN000;;LB. times index with
 23519                                  ;	MUL	[SC_SECTOR_SIZE]	    ;AN000;;LB. sector size
 23520                                  ;	ADD	AX,WORD PTR [SC_CACHE_PTR]  ;AN000;;LB. add SC starting addr
 23521                                  ;	ADC	DX,WORD PTR [SC_CACHE_PTR+2];AN000;;LB.
 23522                                  ;	MOV	DS,DX			    ;AN000;    ;LB. DS:SI-> SC sector addr
 23523                                  ;	MOV	SI,AX			    ;AN000;    ;LB.
 23524                                  ;	MOV	ES,WORD PTR [CALLXAD+2]     ;AN000;    ;LB. ES:DI-> buffer addr
 23525                                  ;	MOV	DI,WORD PTR [CALLXAD]	    ;AN000;    ;LB.
 23526                                  ;	MOV	CX,[SC_SECTOR_SIZE]	    ;AN000;    ;LB. count= sector size
 23527                                  ;	SHR	CX,1			    ;AN000;    ;LB. may use DWORD move for 386
 23528                                  ;entry MOVWORDS				    ;AN000;
 23529                                  ;	CMP	[DDMOVE],0		    ;AN000;    ;LB. 386 ?
 23530                                  ;	JZ	nodd			    ;AN000;    ;LB. no
 23531                                  ;	SHR	CX,1			    ;AN000;    ;LB. words/2
 23532                                  ;	DB	66H			    ;AN000;    ;LB. use double word move
 23533                                  ;nodd:
 23534                                  ;	REP	MOVSW			    ;AN000;    ;LB. move to buffer
 23535                                  ;	CLC				    ;AN000;    ;LB. clear carry
 23536                                  ;	return				    ;AN000;    ;LB. exit
 23537                                  ;noSC:					    ;AN000;
 23538                                  ;	STC				    ;AN000;    ;LB. set carry
 23539                                  ;sexit:					    ;AN000;
 23540                                  ;	return				    ;AN000;    ;LB.
 23541                                  ;
 23542                                  ;EndProc SC2BUF
 23543                                  
 23544                                  
 23545                                  ;============================================================================
 23546                                  ; MKNODE.ASM, MSDOS 6.0, 1991
 23547                                  ;============================================================================
 23548                                  ; 29/07/2018 - Retro DOS v3.0
 23549                                  
 23550                                  ;	TITLE	MKNODE - Node maker
 23551                                  ;	NAME	MKNODE
 23552                                  
 23553                                  ;**	MKNODE.ASM
 23554                                  ;
 23555                                  ;	Low level routines for making a new local file system node
 23556                                  ;	and filling in an SFT from a directory entry
 23557                                  ;
 23558                                  ;	BUILDDIR
 23559                                  ;	SETDOTENT
 23560                                  ;	MakeNode
 23561                                  ;	NEWENTRY
 23562                                  ;	FREEENT
 23563                                  ;	NEWDIR
 23564                                  ;	DOOPEN
 23565                                  ;	RENAME_MAKE
 23566                                  ;	CHECK_VIRT_OPEN
 23567                                  ;
 23568                                  ;	Revision history:
 23569                                  ;
 23570                                  ;	 AN000	version 4.0  Jan. 1988
 23571                                  ;	 A004	PTM 3680  --- Make SFT NAME field offset same as 3.30
 23572                                  
 23573                                  ;Break   <BUILDDIR,NEWDIR -- ALLOCATE DIRECTORIES>
 23574                                  ;----------------------------------------------------------------------------
 23575                                  ;
 23576                                  ; Procedure Name : BUILDDIR,NEWDIR
 23577                                  ;
 23578                                  ; Inputs:
 23579                                  ;       ES:BP Points to DPB
 23580                                  ;       [THISSFT] Set if using NEWDIR entry point
 23581                                  ;               (used by ALLOCATE)
 23582                                  ;       [LASTENT] current last valid entry number in directory if no free
 23583                                  ;               entries
 23584                                  ;       [DIRSTART] Points to first cluster of dir (0 means root)
 23585                                  ; Function:
 23586                                  ;       Grow directory if no free entries and not root
 23587                                  ; Outputs:
 23588                                  ;       CARRY SET IF FAILURE
 23589                                  ;       ELSE
 23590                                  ;          AX entry number of new entry
 23591                                  ;          If a new dir [DIRSTART],[CLUSFAC],[CLUSNUM],[DIRSEC] set
 23592                                  ;               AX = first entry of new dir
 23593                                  ;       GETENT should be called to set [LASTENT]
 23594                                  ;
 23595                                  ;----------------------------------------------------------------------------
 23596                                  
 23597                                  BUILDDIR:
 23598                                  	; 29/07/2018 - Retro DOS v3.0
 23599                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 4E66h
 23600                                  
 23601 00004F5D A1[6A05]                        MOV     AX,[ENTFREE]
 23602 00004F60 83F8FF                          CMP     AX,-1
 23603 00004F63 7402                            JZ	short CHECK_IF_ROOT
 23604 00004F65 F8                              CLC
 23605 00004F66 C3                              retn
 23606                                  
 23607                                  CHECK_IF_ROOT:
 23608 00004F67 833E[5805]00                    CMP     word [DIRSTART],0
 23609 00004F6C 7502                            JNZ	short NEWDIR
 23610 00004F6E F9                              STC
 23611                                  builddir_retn:
 23612 00004F6F C3                              retn				; Can't grow root
 23613                                  
 23614                                  	;entry   NEWDIR
 23615                                  NEWDIR:        
 23616 00004F70 8B1E[5805]              	MOV     BX,[DIRSTART]
 23617 00004F74 09DB                            OR      BX,BX
 23618 00004F76 7405                            JZ	short NULLDIR
 23619 00004F78 E89A05                  	call	GETEOF
 23620 00004F7B 72F2                            jc	short builddir_retn	; Screw up
 23621                                  NULLDIR:
 23622 00004F7D B90100                          MOV     CX,1
 23623 00004F80 E8BF04                  	call	ALLOCATE
 23624 00004F83 72EA                            jc	short  builddir_retn
 23625 00004F85 8B16[5805]                      MOV     DX,[DIRSTART]
 23626 00004F89 09D2                            OR      DX,DX
 23627 00004F8B 750D                            JNZ	short ADDINGDIR
 23628 00004F8D E850F8                  	call	SETDIRSRCH
 23629 00004F90 72DD                            jc	short  builddir_retn
 23630 00004F92 C706[F402]FFFF                  MOV     word [LASTENT],-1
 23631 00004F98 EB2B                            JMP     SHORT GOTDIRREC
 23632                                  ADDINGDIR:
 23633 00004F9A 53                              PUSH    BX
 23634 00004F9B 8B1E[5405]                      MOV     BX,[CLUSNUM]
 23635 00004F9F E8940A                          call	IsEOF
 23636 00004FA2 5B                              POP     BX
 23637 00004FA3 7219                            JB	short NOTFIRSTGROW
 23638                                  ;;;; 10/17/86 update CLUSNUM in the fastopen cache
 23639 00004FA5 891E[5405]                      MOV     [CLUSNUM],BX
 23640 00004FA9 51                              PUSH    CX
 23641 00004FAA 50                              PUSH    AX
 23642 00004FAB 55                              PUSH    BP
 23643 00004FAC B401                            MOV     AH,1			; CLUSNUM update
 23644                                  	;mov	dl,[es:bp+0]
 23645 00004FAE 268A5600                	mov	dl,[ES:BP] ; 09/09/2018
 23646                                          ;MOV	DL,[ES:BP+DPB.DRIVE]	; drive #
 23647 00004FB2 8B0E[5805]                      MOV     CX,[DIRSTART]		; first cluster #
 23648 00004FB6 89DD                            MOV     BP,BX 			; CLUSNUM
 23649 00004FB8 E854E4                  	call	FastOpen_Update
 23650 00004FBB 5D                              POP     BP
 23651 00004FBC 58                              POP     AX
 23652 00004FBD 59                              POP     CX
 23653                                  
 23654                                  ;;;; 10/17/86 update CLUSNUM in the fastopen cache
 23655                                  NOTFIRSTGROW:
 23656 00004FBE 89DA                            MOV     DX,BX
 23657 00004FC0 30DB                            XOR     BL,BL
 23658 00004FC2 E86C04                  	call	FIGREC
 23659                                  GOTDIRREC:
 23660                                  	;mov	cl,[es:bp+4]
 23661 00004FC5 268A4E04                        MOV     CL,[ES:BP+DPB.CLUSTER_MASK]
 23662 00004FC9 FEC1                            INC     CL
 23663 00004FCB 30ED                            XOR     CH,CH
 23664                                  ZERODIR:
 23665 00004FCD 51                              PUSH    CX
 23666                                  	;mov	byte [ALLOWED],18h
 23667 00004FCE C606[F702]18                    MOV     byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 23668 00004FD3 B0FF                            MOV     AL,0FFH
 23669 00004FD5 E8AD0E                          call	GETBUFFR
 23670 00004FD8 7302                            JNC	short GET_SSIZE
 23671 00004FDA 59                              POP     CX
 23672 00004FDB C3                              retn
 23673                                  
 23674                                  GET_SSIZE:
 23675                                  	;mov	cx,[es:bp+2]
 23676 00004FDC 268B4E02                        MOV     CX,[ES:BP+DPB.SECTOR_SIZE]
 23677 00004FE0 06                              PUSH    ES
 23678 00004FE1 C43E[7405]                      LES     DI,[CURBUF]
 23679                                  	;or	byte [es:di+5],4
 23680 00004FE5 26804D0504                      OR      byte [ES:DI+BUFFINFO.buf_flags],buf_isDIR
 23681 00004FEA 57                              PUSH    DI
 23682                                  	;add	di,16
 23683 00004FEB 83C710                          ADD     DI,BUFINSIZ
 23684 00004FEE 31C0                            XOR     AX,AX
 23685 00004FF0 D1E9                            SHR     CX,1
 23686 00004FF2 F3AB                            REP     STOSW
 23687 00004FF4 7301                            JNC	short EVENZ
 23688 00004FF6 AA                              STOSB
 23689                                  EVENZ:
 23690 00004FF7 5F                              POP     DI
 23691                                  
 23692                                  	; MSDOS 6.0
 23693                                  	;TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 23694                                  	;				;LB. if already dirty		  ;AN000;
 23695                                          ;JNZ	short _yesdirty_	;LB.  don't increment dirty count ;AN000;
 23696                                          ;call	INC_DIRTY_COUNT		;LB. 				  ;AN000;
 23697                                          
 23698                                  	;or	byte [es:di+5],40h
 23699 00004FF8 26804D0540              	OR      byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 23700                                  ;_yesdirty_:
 23701 00004FFD 07                              POP	ES
 23702 00004FFE 59                              POP	CX
 23703                                  
 23704                                  	; MSDOS 6.0
 23705                                  	;add	dx, 1
 23706                                  	;adc	word [HIGH_SECTOR],0
 23707                                  
 23708 00004FFF 42                      	INC	DX
 23709 00005000 E2CB                            LOOP    ZERODIR
 23710                                  
 23711 00005002 A1[F402]                        MOV     AX,[LASTENT]
 23712 00005005 40                              INC     AX
 23713 00005006 F8                              CLC
 23714 00005007 C3                              retn
 23715                                  
 23716                                  ;--------------------------------------------------------------------------
 23717                                  ;
 23718                                  ; Procedure Name : SETDOTENT
 23719                                  ;
 23720                                  ; set up a . or .. directory entry for a directory.
 23721                                  ;
 23722                                  ;   Inputs:     ES:DI point to the beginning of a directory entry.
 23723                                  ;               AX contains ". " or ".."
 23724                                  ;               DX contains first cluster of entry
 23725                                  ;
 23726                                  ;----------------------------------------------------------------------------
 23727                                  
 23728                                  SETDOTENT:
 23729                                  ;	Fill in name field
 23730 00005008 AB                              STOSW
 23731 00005009 B90400                          MOV     CX,4
 23732 0000500C B82020                          MOV     AX,"  " ; 2020h
 23733 0000500F F3AB                            REP     STOSW
 23734 00005011 AA                              STOSB
 23735                                  
 23736                                  ;	Set up attribute
 23737                                  	;mov	al, 10h
 23738 00005012 B010                            MOV     AL,attr_directory
 23739 00005014 AA                              STOSB
 23740                                  
 23741                                  ;	Initialize time and date of creation
 23742 00005015 83C70A                          ADD     DI,10
 23743 00005018 8B36[3605]                      MOV     SI,[THISSFT]
 23744                                  	;mov	ax,[si+0Dh]
 23745 0000501C 8B440D                          MOV     AX,[SI+SF_ENTRY.sf_time]
 23746 0000501F AB                              STOSW
 23747                                  	;mov	ax,[si+0Fh]
 23748 00005020 8B440F                          MOV     AX,[SI+SF_ENTRY.sf_date]
 23749 00005023 AB                      	STOSW
 23750                                  
 23751                                  ;	Set up first cluster field
 23752 00005024 89D0                            MOV     AX,DX
 23753 00005026 AB                              STOSW
 23754                                  
 23755                                  ;	0 file size
 23756 00005027 31C0                            XOR     AX,AX
 23757 00005029 AB                              STOSW
 23758 0000502A AB                              STOSW
 23759 0000502B C3                              retn
 23760                                  
 23761                                  ;Break   <MAKENODE -- CREATE A NEW NODE>
 23762                                  ;---------------------------------------------------------------------------
 23763                                  ;
 23764                                  ; Procedure Name : MakeNode
 23765                                  ;
 23766                                  ; Inputs:
 23767                                  ;       AL - attribute to create
 23768                                  ;       AH = 0 if it is ok to truncate a file already by this name
 23769                                  ;	AH != 0 if truncation not allowed (prexisting file is an error)
 23770                                  ;               (AH ignored on dirs and devices)
 23771                                  ;
 23772                                  ;        NOTE: When making a DIR or volume ID, AH need not be set since
 23773                                  ;               a name already existant is ALWAYS an error in these cases.
 23774                                  ;
 23775                                  ;       [WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 23776                                  ;               terminated)
 23777                                  ;       [CURR_DIR_END] Points to end of Current dir part of string
 23778                                  ;               ( = -1 if current dir not involved, else
 23779                                  ;                Points to first char after last "/" of current dir part)
 23780                                  ;       [THISCDS] Points to CDS being used
 23781                                  ;       [THISSFT] Points to an empty SFT. EXCEPT sf_mode filled in.
 23782                                  ; Function:
 23783                                  ;       Make a new node
 23784                                  ; Outputs:
 23785                                  ;       Sets EXTERR_LOCUS = errLOC_Disk or errLOC_Unk via GetPathNoset
 23786                                  ;       CARRY SET IF ERROR
 23787                                  ;          AX = 1 A node by this name exists and is a directory
 23788                                  ;          AX = 2 A new node could not be created
 23789                                  ;          AX = 3 A node by this name exists and is a disk file
 23790                                  ;               (AH was NZ on input)
 23791                                  ;          AX = 4 Bad Path
 23792                                  ;               SI return from GetPath maintained
 23793                                  ;          AX = 5 Attribute mismatch
 23794                                  ;          AX = 6 Sharing Violation
 23795                                  ;               (INT 24 generated ALWAYS since create is always compat mode
 23796                                  ;          AX = 7 file not found for Extended Open (not exists and fails)
 23797                                  ;       ELSE
 23798                                  ;          AX = 0       Disk Node
 23799                                  ;          AX = 3       Device Node (error in some cases)
 23800                                  ;          [DIRSTART],[DIRSEC],[CLUSFAC],[CLUSNUM] set to directory
 23801                                  ;               containing new node.
 23802                                  ;          [CURBUF+2]:BX Points to entry
 23803                                  ;          [CURBUF+2]:SI Points to entry.dir_first
 23804                                  ;          [THISSFT] is filled in
 23805                                  ;               sf_mode = unchanged.
 23806                                  ;          Attribute byte in entry is input AL
 23807                                  ; DS preserved, others destroyed
 23808                                  ;
 23809                                  ;-------------------------------------------------------------------------
 23810                                  
 23811                                  MakeNode:
 23812                                  	;mov	word [CREATING],0E5FFh
 23813 0000502C C706[1805]FFE5          	MOV	WORD [CREATING],DIRFREE*256 + 0FFh ; Creating, not DEL *.*
 23814 00005032 50                              PUSH    AX              ; Save AH value
 23815 00005033 C606[F802]00            	MOV	byte [NoSetDir],0
 23816 00005038 A2[0805]                	MOV	[SATTRIB],AL
 23817 0000503B E8FDF7                  	call	GetPathNoSet
 23818 0000503E 88CA                            MOV     DL,CL           ; Save CL info
 23819 00005040 89C1                            MOV     CX,AX           ; Device ID to CH
 23820 00005042 58                              POP     AX              ; Get back AH
 23821 00005043 7316                            JNC	short make_exists ; File existed
 23822 00005045 7505                            JNZ	short make_err_4 ; Path bad
 23823 00005047 80FA80                          CMP     DL,80h          ; Check "CL" return from GETPATH
 23824 0000504A 7406                            JZ	short make_type	; Name simply not found, and no metas
 23825                                  make_err_4:
 23826 0000504C B004                            MOV     AL,4            ; case 1 bad path
 23827                                  make_err_ret:
 23828 0000504E 30E4                            XOR     AH,AH
 23829 00005050 F9                              STC
 23830                                  make_retn:
 23831 00005051 C3                              retn
 23832                                  
 23833                                          ;entry	RENAME_MAKE     ; Used by DOS_RENAME to "copy" a node
 23834                                  RENAME_MAKE:
 23835                                  make_type:
 23836                                  ;Extended Open hooks
 23837                                  	; MSDOS 6.0
 23838                                  	;TESTB	EXTOPEN_ON,ext_open_on	;FT. from extended open		;AN000;
 23839                                  	;JZ	make_type2		;FT. no				;AN000;
 23840                                  	;OR	EXTOPEN_ON,ext_file_not_exists ;FT. set for extended open ;AN000;
 23841                                  	;TESTB	EXTOPEN_FLAG,0F0H	;FT. not exists and fails	;AN000;
 23842                                  	;JNZ    make_type2		;FT. no				;AN000;
 23843                                  	;STC				;FT. set carry			;AN000;
 23844                                  	;MOV    AX,7			;FT. file not found		;AN000;
 23845                                  	;return				;FT.				;AN000;
 23846                                  ;	Extended Open hooks
 23847                                  
 23848                                  make_type2:
 23849 00005052 C43E[3605]                      LES     DI,[THISSFT]
 23850 00005056 31C0                            XOR     AX,AX           ; nothing exists Disk Node
 23851 00005058 F9                              STC                     ; Not found
 23852 00005059 EB5A                            JMP     short make_new
 23853                                  
 23854                                  ; The node exists.  It may be either a device, directory or file:
 23855                                  ;   Zero set => directory
 23856                                  ;   High bit of CH on => device
 23857                                  ;   else => file
 23858                                  make_exists:
 23859 0000505B 7448                            JZ	short make_exists_dir
 23860 0000505D B003                            MOV     AL,3            ; file exists type 3  (error or device node)
 23861                                  	;test	byte [ATTRIB],18h
 23862 0000505F F606[0605]18            	TEST	byte [ATTRIB],attr_volume_id+attr_directory
 23863 00005064 753B                            JNZ	short make_err_ret_5
 23864                                  				; Cannot already exist as Disk or Device Node
 23865                                                                  ;       if making DIR or Volume ID
 23866 00005066 08ED                            OR      CH,CH
 23867 00005068 781A                            JS	short make_share ; No further checks on attributes if device
 23868 0000506A 08E4                            OR      AH,AH
 23869 0000506C 75E0                            JNZ	short make_err_ret ; truncating NOT OK (AL = 3)
 23870 0000506E 51                              PUSH    CX              ; Save device ID
 23871 0000506F 8E06[7605]                      MOV     ES,[CURBUF+2]
 23872                                  	;mov	ch,[es:bx+0Bh]
 23873 00005073 268A6F0B                        MOV     CH,[ES:BX+dir_entry.dir_attr] ; Get file attributes
 23874                                  	;test	ch,1
 23875 00005077 F6C501                  	test	CH,attr_read_only
 23876 0000507A 7524                            JNZ	short make_err_ret_5P ; Cannot create on read only files
 23877 0000507C E854FA                  	call	MatchAttributes
 23878 0000507F 59                              POP     CX              ; Devid back in CH
 23879 00005080 751F                            JNZ	short make_err_ret_5 ; Attributes not ok
 23880 00005082 30C0                            XOR     AL,AL           ; AL = 0, Disk Node
 23881                                  make_share:
 23882 00005084 30E4                            XOR     AH,AH
 23883 00005086 50                              PUSH    AX              ; Save Disk or Device node
 23884 00005087 51                              PUSH    CX              ; Save Device ID
 23885 00005088 88EC                            MOV     AH,CH           ; Device ID to AH
 23886 0000508A E83301                          CALL    DOOPEN          ; Fill in SFT for share check
 23887 0000508D C43E[3605]                      LES     DI,[THISSFT]
 23888 00005091 56                      	push	si
 23889 00005092 53                      	push	bx		; Save CURBUF pointers
 23890 00005093 E8C422                  	call	ShareEnter
 23891 00005096 7350                            jnc	short MakeEndShare
 23892                                  
 23893                                  ; User failed request.
 23894 00005098 5B                      	pop	bx
 23895 00005099 5E                      	pop	si
 23896 0000509A 59                      	pop	cx
 23897 0000509B 58                      	pop	ax
 23898                                  
 23899                                  Make_Share_ret:
 23900 0000509C B006                            MOV     AL,6
 23901 0000509E EBAE                            JMP	short make_err_ret
 23902                                  
 23903                                  make_err_ret_5P:
 23904 000050A0 59                              POP     CX              ; Get back device ID
 23905                                  make_err_ret_5:
 23906 000050A1 B005                            MOV     AL,5            ; Attribute mismatch
 23907 000050A3 EBA9                            JMP     make_err_ret
 23908                                  
 23909                                  make_exists_dir:
 23910 000050A5 B001                            MOV     AL,1            ; exists as directory, always an error
 23911 000050A7 EBA5                            JMP     make_err_ret
 23912                                  
 23913                                  make_save:
 23914 000050A9 50                              PUSH    AX              ; Save whether Disk or File
 23915 000050AA 89C8                            MOV     AX,CX           ; Device ID to AH
 23916 000050AC E86A00                          CALL    NEWENTRY
 23917 000050AF 58                              POP     AX              ; 0 if Disk, 3 if File
 23918 000050B0 739F                            jnc	short make_retn
 23919 000050B2 B002                            MOV     AL,2            ; create failed case 2
 23920                                  make_save_retn:
 23921 000050B4 C3                              retn
 23922                                  
 23923                                  make_new:
 23924 000050B5 E8F1FF                          call    make_save
 23925 000050B8 72FA                            jc	short make_save_retn	; case 2 fail
 23926 000050BA F606[0605]10            	test	BYTE [ATTRIB],attr_directory
 23927 000050BF 75F3                            jnz	short make_save_retn	; Don't "open" directories, so don't
 23928                                                                  ;   tell the sharer about them
 23929 000050C1 50                      	push	ax
 23930 000050C2 53                      	push	bx
 23931 000050C3 56                      	push	si		
 23932 000050C4 E89322                          call	ShareEnter
 23933 000050C7 5E                      	pop	si
 23934 000050C8 5B                      	pop	bx
 23935 000050C9 58                      	pop	ax
 23936 000050CA 73E8                    	jnc	short make_save_retn
 23937                                  ;
 23938                                  ; We get here by having the user FAIL a share problem. Typically a failure of
 23939                                  ; this nature is an out-of-space or an internal error. We clean up as best as
 23940                                  ; possible: delete the newly created directory entry and return share_error.
 23941                                  ;
 23942 000050CC 50                              PUSH    AX
 23943 000050CD C43E[7405]                      LES     DI,[CURBUF]
 23944                                  	;mov	byte [es:bx],0E5h
 23945 000050D1 26C607E5                	MOV	BYTE [ES:BX],DIRFREE	; nuke newly created entry.
 23946                                  	
 23947                                  	; MSDOS 6.0
 23948                                  	;TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 23949                                  	;				;LB. if already dirty		  ;AN000;
 23950                                          ;JNZ	short yesdirty3		;LB.  don't increment dirty count ;AN000;
 23951                                  	;call	INC_DIRTY_COUNT		;LB.				  ;AN000;
 23952                                  	;or	byte [es:di+5],40h
 23953 000050D5 26804D0540                      OR      byte [ES:DI+BUFFINFO.buf_flags],buf_dirty ; flag buffer as dirty
 23954                                  ;yesdirty3:
 23955 000050DA C42E[2405]                      LES     BP,[THISDPB]
 23956 000050DE 268A4600                        mov	al,[ES:BP]
 23957                                  	;MOV	AL,[ES:BP+DPB.DRIVE]	; get drive for flush
 23958 000050E2 E8480E                          call	FLUSHBUF		; write out buffer.
 23959 000050E5 58                              POP     AX
 23960 000050E6 EBB4                            jmp	short Make_Share_ret
 23961                                  ;
 23962                                  ; We have found an existing file. We have also entered it into the share set.
 23963                                  ; At this point we need to call newentry to correctly address the problem of
 23964                                  ; getting rid of old data (create an existing file) or creating a new
 23965                                  ; directory entry (create a new file). Unfortunately, this operation may
 23966                                  ; result in an INT 24 that the user doesn't return from, thus locking the file
 23967                                  ; irretrievably into the share set. The correct solution is for us to LEAVE
 23968                                  ; the share set now, do the operation and then reassert the share access.
 23969                                  ;
 23970                                  ; We are allowed to do this! There is no window! After all, we are in
 23971                                  ; critDisk here and for someone else to get in, they must enter critDisk also.
 23972                                  ;
 23973                                  MakeEndShare:
 23974 000050E8 C43E[3605]                      LES     DI,[THISSFT]		; grab SFT
 23975 000050EC 31C0                            XOR     AX,AX
 23976 000050EE E87BCF                  	call	EcritSFT
 23977 000050F1 268705                  	xchg	AX,[ES:DI]
 23978                                  	;XCHG	AX,[ES:DI+SF_ENTRY.sf_ref_count]
 23979 000050F4 50                      	push	ax
 23980 000050F5 57                      	push	di
 23981 000050F6 06                      	push	es
 23982 000050F7 9C                              PUSHF
 23983 000050F8 E85922                          call	ShareEnd                ; remove sharing
 23984 000050FB 9D                              POPF
 23985 000050FC 07                      	pop	es
 23986 000050FD 5F                      	pop	di
 23987 000050FE 268F05                          pop	word [ES:DI]	
 23988                                  	;pop	word [ES:DI+SF_ENTRY.sf_ref_count]
 23989 00005101 E870CF                  	call	LcritSFT
 23990 00005104 5B                      	pop	bx
 23991 00005105 5E                      	pop	si
 23992 00005106 59                      	pop	cx
 23993 00005107 58                      	pop	ax
 23994 00005108 E89EFF                          CALL    make_save
 23995                                  
 23996                                  ; If the user failed, we do not reenter into the sharing set.
 23997                                  
 23998 0000510B 72A7                            jc	short make_save_retn	; bye if error
 23999 0000510D 50                      	push	ax
 24000 0000510E 53                      	push	bx
 24001 0000510F 56                      	push	si
 24002 00005110 9C                              PUSHF
 24003 00005111 E84622                          call	ShareEnter
 24004 00005114 9D                              POPF
 24005 00005115 5E                      	pop	si
 24006 00005116 5B                      	pop	bx
 24007 00005117 58                      	pop	ax
 24008                                  
 24009                                  ; If Share_check fails, then we have an internal ERROR!!!!!
 24010                                  
 24011                                  makeendshare_retn:
 24012 00005118 C3                              retn
 24013                                  
 24014                                  ;---------------------------------------------------------------------------
 24015                                  ;
 24016                                  ; Procedure Name : NEWENTRY
 24017                                  ;
 24018                                  ; Inputs:
 24019                                  ;       [THISSFT] set
 24020                                  ;       [THISDPB] set
 24021                                  ;       [LASTENT] current last valid entry number in directory if no free
 24022                                  ;               entries
 24023                                  ;       [VOLID] set if a volume ID was found during search
 24024                                  ;	Attrib Contains attributes for new file
 24025                                  ;       [DIRSTART] Points to first cluster of dir (0 means root)
 24026                                  ;       CARRY FLAG INDICATES STATUS OF SEARCH FOR FILE
 24027                                  ;               NC means file existed (device)
 24028                                  ;               C  means file did not exist
 24029                                  ;       AH = Device ID byte
 24030                                  ;       If FILE
 24031                                  ;           [CURBUF+2]:BX points to start of directory entry
 24032                                  ;           [CURBUF+2]:SI points to dir_first of directory entry
 24033                                  ;       If device
 24034                                  ;           DS:BX points to start of "fake" directory entry
 24035                                  ;           DS:SI points to dir_first of "fake" directory entry
 24036                                  ;               (has DWORD pointer to device header)
 24037                                  ; Function:
 24038                                  ;       Make a new directory entry
 24039                                  ;       If an old one existed it is truncated first
 24040                                  ; Outputs:
 24041                                  ;       Carry set if error
 24042                                  ;               Can't grow dir, atts didn't match, attempt to make 2nd
 24043                                  ;               vol ID, user FAILed to I 24
 24044                                  ;       else
 24045                                  ;               outputs of DOOPEN
 24046                                  ; DS, BX, SI preserved (meaning on SI BX, not value), others destroyed
 24047                                  ;
 24048                                  ;----------------------------------------------------------------------------
 24049                                  
 24050                                  NEWENTRY:
 24051 00005119 C42E[2405]                      LES     BP,[THISDPB]
 24052 0000511D 7316                            JNC	short EXISTENT	
 24053 0000511F 803E[F602]00                    CMP     byte [FAILERR],0
 24054 00005124 F9                              STC
 24055 00005125 75F1                            jnz	short makeendshare_retn	; User FAILed, node might exist
 24056 00005127 E833FE                          CALL    BUILDDIR        ; Try to build dir
 24057 0000512A 72EC                            jc	short makeendshare_retn	; Failed
 24058 0000512C E883F6                          call	GETENT          ; Point at that free entry
 24059 0000512F 72E7                            jc	short makeendshare_retn	; Failed
 24060 00005131 EB0E                            JMP     SHORT FREESPOT
 24061                                  
 24062                                  ERRRET3:
 24063 00005133 F9                              STC
 24064                                  newentry_retn:
 24065 00005134 C3                              retn
 24066                                  
 24067                                  EXISTENT:
 24068 00005135 08E4                            OR      AH,AH           ; Check if file is I/O device
 24069 00005137 7903                            JNS	short NOT_DEV1
 24070 00005139 E98400                          JMP     DOOPEN          ; If so, proceed with open
 24071                                  
 24072                                  NOT_DEV1:
 24073 0000513C E81401                          call	FREEENT		; Free cluster chain
 24074 0000513F 72F3                            jc	short newentry_retn ; Failed
 24075                                  FREESPOT:
 24076                                  	;test	byte [ATTRIB],8
 24077 00005141 F606[0605]08            	test	BYTE [ATTRIB],attr_volume_id
 24078 00005146 7407                            JZ	short NOTVOLID
 24079 00005148 803E[1605]00                    CMP     BYTE [VOLID],0
 24080 0000514D 75E4                            JNZ	short ERRRET3	; Can't create a second volume ID
 24081                                  NOTVOLID:
 24082 0000514F 8E06[7605]                      MOV     ES,[CURBUF+2]
 24083 00005153 89DF                            MOV     DI,BX
 24084                                  
 24085 00005155 BE[E604]                        MOV     SI,NAME1
 24086                                  
 24087 00005158 B90500                          MOV     CX,5
 24088 0000515B F3A5                            REP     MOVSW
 24089 0000515D A4                              MOVSB                   ; Move name into dir entry
 24090 0000515E A0[0605]                	MOV	AL,[ATTRIB]
 24091 00005161 AA                      	STOSB                   ; Attributes
 24092                                  
 24093                                  ;; File Tagging for Create DOS 4.00
 24094 00005162 B105                            MOV     CL,5            ;FT. assume normal FBUGBUG	;AN000;
 24095                                  ;; File Tagging for Create DOS 4.00
 24096                                  
 24097 00005164 31C0                            XOR     AX,AX
 24098 00005166 F3AB                            REP     STOSW           ; Zero pad
 24099 00005168 E84EC7                          call	DATE16
 24100 0000516B 92                              XCHG    AX,DX
 24101 0000516C AB                              STOSW                   ; dir_time
 24102 0000516D 92                              XCHG    AX,DX
 24103 0000516E AB                              STOSW                   ; dir_date
 24104 0000516F 31C0                            XOR     AX,AX
 24105 00005171 57                              PUSH    DI              ; Correct SI input value
 24106                                  				; 	(recomputed for new buffer)
 24107 00005172 AB                              STOSW                   ; Zero dir_first and size
 24108 00005173 AB                              STOSW
 24109 00005174 AB                              STOSW
 24110                                  updnxt:
 24111 00005175 8B36[7405]              	MOV	SI,[CURBUF]
 24112                                  
 24113                                  	; MSDOS 6.0
 24114                                  	;TEST	byte [ES:SI+BUFFINFO.buf_flags],buf_dirty
 24115                                  	;			;LB. if already dirty		  ;AN000;
 24116                                          ;JNZ	short yesdirty4	;LB.  don't increment dirty count ;AN000;
 24117                                          ;call	INC_DIRTY_COUNT	;LB.				  ;AN000;
 24118                                          
 24119                                  	;or	byte [es:si+5],40h
 24120 00005179 26804C0540              	OR      byte [ES:SI+BUFFINFO.buf_flags],buf_dirty
 24121                                  ;yesdirty4:
 24122 0000517E C42E[2405]                      LES     BP,[THISDPB]
 24123 00005182 268A4600                	MOV	AL,[ES:BP]	; mov al,[es:bp+0] 
 24124                                          ;MOV	AL,[ES:BP+DPB.DRIVE] ; Sets AH value again (in AL)
 24125 00005186 50                              PUSH    AX
 24126 00005187 53                              PUSH    BX
 24127                                  ; If we have a file, we need to increment the open ref. count so that
 24128                                  ; we have some protection against invalid media changes if an Int 24
 24129                                  ; error occurs.
 24130                                  ; Do nothing for a device.
 24131 00005188 06                      	push	es
 24132 00005189 57                      	push	di
 24133 0000518A C43E[3605]                      LES     DI,[THISSFT]
 24134                                  	;test	word [es:di+5],80h
 24135 0000518E 26F745058000            	TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 24136 00005194 751A                            jnz	short GotADevice
 24137 00005196 1E                      	push	ds
 24138 00005197 53                      	push	bx
 24139 00005198 C51E[2405]                      LDS     BX,[THISDPB]
 24140                                  	;mov	[es:di+7],bx
 24141 0000519C 26895D07                        MOV     [ES:DI+SF_ENTRY.sf_devptr],BX
 24142 000051A0 8CDB                            MOV     BX,DS
 24143                                  	;mov	[es:di+9],bx
 24144 000051A2 26895D09                        MOV     [ES:DI+SF_ENTRY.sf_devptr+2],BX
 24145 000051A6 5B                      	pop	bx
 24146 000051A7 1F                      	pop	ds ; need to use DS for segment later on
 24147 000051A8 E8CAFC                  	call	DEV_OPEN_SFT    ; increment ref. count
 24148 000051AB C606[080A]01                    mov	byte [VIRTUAL_OPEN],1; set flag
 24149                                  GotADevice:
 24150 000051B0 5F                      	pop	di
 24151 000051B1 07                      	pop	es
 24152                                  
 24153 000051B2 E8780D                          call	FLUSHBUF
 24154 000051B5 E8DA00                          Call    CHECK_VIRT_OPEN ; decrement ref. count                          ;AN000;
 24155 000051B8 5B                              POP     BX
 24156 000051B9 58                              POP     AX
 24157 000051BA 5E                              POP     SI              ; Get SI input back
 24158 000051BB 88C4                            MOV     AH,AL           ; Get I/O driver number back
 24159 000051BD 7301                            jnc	short DOOPEN    ; Failed
 24160 000051BF C3                      	retn
 24161                                  
 24162                                  ;NOTE FALL THROUGH
 24163                                  
 24164                                  ; Inputs:
 24165                                  ;       [THISDPB] points to DPB if file
 24166                                  ;       [THISSFT] points to SFT being used
 24167                                  ;       AH = Device ID byte
 24168                                  ;       If FILE
 24169                                  ;           [CURBUF+2]:BX points to start of directory entry
 24170                                  ;           [CURBUF+2]:SI points to dir_first of directory entry
 24171                                  ;       If device
 24172                                  ;           DS:BX points to start of "fake" directory entry
 24173                                  ;           DS:SI points to dir_first of "fake" directory entry
 24174                                  ;               (has DWORD pointer to device header)
 24175                                  ; Function:
 24176                                  ;       Fill in SFT from dir entry
 24177                                  ; Outputs:
 24178                                  ;       CARRY CLEAR
 24179                                  ;       sf_ref_count and sf_mode fields not altered
 24180                                  ;       sf_flags high byte = 0
 24181                                  ;       sf_flags low byte = AH except
 24182                                  ;       sf_flags Bit 6 set (not dirty or not EOF)
 24183                                  ;       sf_attr sf_date sf_time sf_name set from entry
 24184                                  ;       sf_position = 0
 24185                                  ;       If device
 24186                                  ;           sf_devptr = dword at dir_first (pointer to device header)
 24187                                  ;           sf_size = 0
 24188                                  ;       If file
 24189                                  ;           sf_firclus sf_size set from entry
 24190                                  ;           sf_devptr = [THISDPB]
 24191                                  ;           sf_cluspos = 0
 24192                                  ;           sf_lstclus = sf_firclus
 24193                                  ;           sf_dirsec sf_dirpos set
 24194                                  ; DS,SI,BX preserved, others destroyed
 24195                                  
 24196                                  	;entry	DOOPEN
 24197                                  DOOPEN:
 24198                                  ;	Generate and store attribute
 24199                                  
 24200 000051C0 88E6                            MOV     DH,AH           ; AH to different place
 24201 000051C2 C43E[3605]                      LES     DI,[THISSFT]
 24202                                  	;add	di,4
 24203 000051C6 83C704                          ADD     DI,SF_ENTRY.sf_attr ; Skip ref_count and mode fields
 24204 000051C9 30C0                            XOR     AL,AL           ; Assume it's a device, devices have an
 24205                                                                  ;   attribute of 0 (for R/O testing etc).
 24206 000051CB 08F6                            OR      DH,DH           ; See if our assumption good.
 24207 000051CD 7807                            JS	short DEV_SFT1	; If device DS=DOSGROUP
 24208 000051CF 8E1E[7605]                      MOV     DS,[CURBUF+2]
 24209                                  	;mov	al,[BX+0Bh]
 24210 000051D3 8A470B                          MOV     AL,[BX+dir_entry.dir_attr]
 24211                                  				; If file, get attrib from dir entry
 24212                                  DEV_SFT1:
 24213 000051D6 AA                              STOSB                   ; sf_attr, ES:DI -> sf_flags
 24214                                  
 24215                                  ;	Generate and store flags word
 24216                                  
 24217 000051D7 31C0                            XOR     AX,AX
 24218 000051D9 88F0                            MOV     AL,DH
 24219                                  	;or	al,40h
 24220 000051DB 0C40                            OR      AL,devid_file_clean
 24221 000051DD AB                              STOSW                   ; sf_flags, ES:DI -> sf_devptr
 24222                                  
 24223                                  ;	Generate and store device pointer
 24224                                  
 24225 000051DE 1E                              PUSH    DS
 24226                                  	;lds	ax,[bx+1Ah]
 24227 000051DF C5471A                          LDS     AX,[BX+dir_entry.dir_first] ; Assume device
 24228 000051E2 08F6                            OR      DH,DH
 24229 000051E4 7805                            JS	short DEV_SFT2
 24230                                  
 24231                                  ;hkn; SS override
 24232 000051E6 36C506[2405]                    LDS     AX,[SS:THISDPB]	; Was file
 24233                                  DEV_SFT2:
 24234 000051EB AB                              STOSW 			; store offset
 24235 000051EC 8CD8                            MOV     AX,DS
 24236 000051EE 1F                              POP     DS
 24237 000051EF AB                      	STOSW			; store segment
 24238                                  				; ES:DI -> sf_firclus
 24239                                  
 24240                                  ;	Generate pointer to, generate and store first cluster 
 24241                                  ;	(irrelevant for devices)
 24242                                  
 24243 000051F0 56                              PUSH    SI              ; Save pointer to dir_first
 24244 000051F1 A5                              MOVSW                   ; dir_first -> sf_firclus
 24245                                                                  ; DS:SI -> dir_size_l, ES:DI -> sf_time
 24246                                  
 24247                                  ;	Copy time/date of last modification
 24248                                  
 24249                                  	;sub	si,6
 24250 000051F2 83EE06                          SUB     SI,dir_entry.dir_size_l - dir_entry.dir_time 
 24251                                  				; DS:SI->dir_time
 24252 000051F5 A5                              MOVSW                   ; dir_time -> sf_time
 24253                                                                  ; DS:SI -> dir_date, ES:DI -> sf_date
 24254 000051F6 A5                              MOVSW                   ; dir_date -> sf_date
 24255                                                                  ; DS:SI -> dir_first, ES:DI -> sf_size
 24256                                  
 24257                                  ;	Generate and store file size (0 for devices)
 24258                                  
 24259 000051F7 AD                              LODSW                   ; skip dir_first, DS:SI -> dir_size_l
 24260 000051F8 AD                              LODSW                   ; dir_size_l in AX , DS:SI -> dir_size_h
 24261 000051F9 89C1                            MOV     CX,AX           ; dir_size_l in CX
 24262 000051FB AD                              LODSW                   ; dir_size_h (size AX:CX), DS:SI -> ????
 24263 000051FC 08F6                            OR      DH,DH
 24264 000051FE 7904                            JNS	short FILE_SFT1
 24265 00005200 31C0                            XOR     AX,AX
 24266 00005202 89C1                            MOV     CX,AX           ; Devices are open ended
 24267                                  FILE_SFT1:
 24268 00005204 91                              XCHG    AX,CX
 24269 00005205 AB                              STOSW                   ; Low word of sf_size
 24270 00005206 91                              XCHG    AX,CX
 24271 00005207 AB                              STOSW                   ; High word of sf_size
 24272                                                                  ; ES:DI -> sf_position
 24273                                  ; Initialize position to 0
 24274                                  
 24275 00005208 31C0                            XOR     AX,AX
 24276 0000520A AB                              STOSW
 24277 0000520B AB                              STOSW                   ; sf_position
 24278                                                                  ; ES:DI -> sf_cluspos
 24279                                  
 24280                                  ; Generate cluster optimizations for files
 24281                                  
 24282 0000520C 08F6                            OR      DH,DH
 24283 0000520E 7834                            JS	short DEV_SFT3
 24284 00005210 AB                              STOSW                   ; sf_cluspos
 24285                                  	;mov	ax,[bx+1Ah]
 24286 00005211 8B471A                          MOV     AX,[BX+dir_entry.dir_first]
 24287                                  	; MSDOS 3.3
 24288 00005214 AB                      	STOSW                   ; sf_lstclus
 24289                                  	; MSDOS 6.0
 24290                                          ;PUSH	DI              ;AN004; save dirsec offset
 24291                                          ;SUB	DI,SF_ENTRY.sf_dirsec	;AN004; es:di -> SFT
 24292                                          ;MOV	[ES:DI.sf_lstclus],AX	;AN004; save it
 24293                                          ;POP	DI              ;AN004; restore dirsec offset
 24294                                  
 24295                                  ; DOS 3.3  FastOpen  6/13/86
 24296                                  
 24297 00005215 1E                      	PUSH	DS
 24298                                  
 24299                                  ;hkn; SS is DOSDATA
 24300 00005216 16                      	push	ss
 24301 00005217 1F                      	pop	ds
 24302                                  	;test	byte [FastOpenFlg],4
 24303 00005218 F606[6E0F]04            	TEST	byte [FastOpenFlg],Special_Fill_Set
 24304 0000521D 740D                    	JZ	short Not_FastOpen
 24305                                  
 24306                                  ;hkn; FastOpen_Ext_Info is in DOSDATA
 24307 0000521F BE[490F]                        MOV     SI,FastOpen_Ext_Info
 24308                                  
 24309 00005222 8B4401                          MOV     AX,[SI+FEI.dirsec]
 24310 00005225 AB                              STOSW                   ; sf_dirsec
 24311                                  	; MSDOS 6.0
 24312                                          ;MOV	AX,[SI+FEI.dirsec+2]
 24313                                  				;;; changed for >32mb
 24314                                          ;STOSW                   ; sf_dirsec
 24315                                  	; 19/08//2018
 24316 00005226 8A04                    	mov	al,[SI]
 24317                                          ;MOV	AL,[SI+FEI.dirpos] ; mov al,[SI+0]
 24318 00005228 AA                              STOSB                   ; sf_dirpos
 24319 00005229 1F                              POP	DS
 24320 0000522A EB16                            JMP     short Next_Name
 24321                                  
 24322                                  ; DOS 3.3  FastOpen  6/13/86
 24323                                  
 24324                                  Not_FastOpen:
 24325 0000522C 1F                              POP     DS		; normal path
 24326                                  
 24327                                  ;hkn; SS override
 24328 0000522D 368B36[7405]                    MOV     SI,[SS:CURBUF]	; DS:SI->buffer header
 24329                                  
 24330 00005232 8B4406                          MOV     AX,[SI+BUFFINFO.buf_sector]     ;F.C. >32mb ;AN000;
 24331 00005235 AB                              STOSW                   ; sf_dirsec     ;F.C. >32mb ;AN000;
 24332                                          ; MSDOS 6.0
 24333                                  	;MOV	AX,[SI+BUFFINFO.buf_sector+2]	;F.C. >32mb ;AN000;
 24334                                          ;STOSW                   ; sf_dirsec     ;F.C. >32mb ;AN000;
 24335                                          
 24336 00005236 89D8                    	MOV     AX,BX
 24337                                  	;add	si,16
 24338 00005238 83C610                          ADD     SI,BUFINSIZ     ; DS:SI-> start of data in buffer
 24339 0000523B 29F0                            SUB     AX,SI           ; AX = BX relative to start of sector
 24340                                          ;mov	cl,32
 24341 0000523D B120                    	MOV     CL,dir_entry.size
 24342 0000523F F6F1                            DIV     CL
 24343 00005241 AA                              STOSB                   ; sf_dirpos
 24344                                  
 24345                                  Next_Name:
 24346 00005242 EB03                            JMP     SHORT FILE_SFT2
 24347                                  
 24348                                  DEV_SFT3:
 24349                                  	;add	di,7
 24350 00005244 83C707                          ADD     DI,SF_ENTRY.sf_name-SF_ENTRY.sf_cluspos
 24351                                  FILE_SFT2:
 24352                                  ;
 24353                                  ; Copy in the object's name
 24354                                  ;
 24355 00005247 89DE                            MOV     SI,BX           ; DS:SI points to dir_name
 24356 00005249 B90B00                          MOV     CX,11
 24357 0000524C F3A4                            REP     MOVSB           ; sf_name
 24358 0000524E 5E                              POP     SI              ; recover DS:SI -> dir_first
 24359                                  
 24360                                  ;hkn; SS is DOSDATA
 24361 0000524F 16                              push	ss
 24362 00005250 1F                      	pop	ds
 24363 00005251 F8                              CLC
 24364 00005252 C3                              retn
 24365                                  
 24366                                  ;---------------------------------------------------------------------------
 24367                                  ;
 24368                                  ; Procedure Name : FREEENT
 24369                                  ;
 24370                                  ; Inputs:
 24371                                  ;       ES:BP -> DPB
 24372                                  ;       [CURBUF] Set
 24373                                  ;       [CURBUF+2]:BX points to directory entry
 24374                                  ;       [CURBUF+2]:SI points to above dir_first
 24375                                  ; Function:
 24376                                  ;       Free the cluster chain for the entry if present
 24377                                  ; Outputs:
 24378                                  ;       Carry set if error (currently user FAILed to I 24)
 24379                                  ;       (NOTE dir_firclus and dir_size_l/h are wrong)
 24380                                  ; DS BX SI ES BP preserved (BX,SI in meaning, not value) others destroyed
 24381                                  ;---------------------------------------------------------------------------
 24382                                  
 24383                                  FREEENT:
 24384 00005253 1E                              PUSH    DS
 24385 00005254 C53E[7405]                      LDS     DI,[CURBUF]
 24386 00005258 8B0C                            MOV     CX,[SI]         ; Get pointer to clusters
 24387                                  	; 19/05/2019
 24388                                  	; MSDOS 6.0
 24389                                  	;MOV	DX,[DI+BUFFINFO.buf_sector+2]  ;F.C. >32mb	;AN000;
 24390                                  ;hkn; SS override
 24391                                          ;MOV	[SS:HIGH_SECTOR],DX		;F.C. >32mb	;AN000;
 24392 0000525A 8B5506                          MOV     DX,[DI+BUFFINFO.buf_sector]
 24393 0000525D 1F                              POP     DS
 24394 0000525E 83F902                  	CMP	CX,2
 24395 00005261 722D                            JB	short RET1	; Was 0 length file (or mucked Firclus if CX=1)
 24396                                  	;cmp	cx,[es:bp+0Dh]
 24397 00005263 263B4E0D                        CMP     CX,[ES:BP+DPB.MAX_CLUSTER]
 24398 00005267 7727                            JA	short RET1	; Treat like zero length file (firclus mucked)
 24399 00005269 29FB                            SUB     BX,DI
 24400 0000526B 53                              PUSH    BX              ; Save offset
 24401                                  	;PUSH	word [HIGH_SECTOR] ;F.C. >32mb	;AN000;
 24402 0000526C 52                              PUSH    DX              ; Save sector number
 24403 0000526D 89CB                            MOV     BX,CX
 24404 0000526F E87702                          call	RELEASE         ; Free any data allocated
 24405 00005272 5A                              POP     DX
 24406                                          ;POP	word [HIGH_SECTOR] ;F.C. >32mb	;AN000;
 24407 00005273 7302                            JNC	short GET_BUF_BACK
 24408 00005275 5B                              POP     BX
 24409                                  freeent_retn:
 24410 00005276 C3                              retn			; Screw up
 24411                                  
 24412                                  GET_BUF_BACK:
 24413                                  	;mov	byte [ALLOWED],18h
 24414 00005277 C606[F702]18                    MOV     byte [ALLOWED],Allowed_RETRY+Allowed_FAIL
 24415 0000527C 30C0                            XOR     AL,AL
 24416 0000527E E8040C                  	call	GETBUFFR        ; Get sector back
 24417 00005281 5B                              POP     BX              ; Get offset back
 24418 00005282 72F2                            jc	short freeent_retn
 24419 00005284 E8B1EE                  	call	SET_BUF_AS_DIR
 24420 00005287 031E[7405]                      ADD     BX,[CURBUF]	; Correct it for new buffer
 24421 0000528B 89DE                            MOV     SI,BX
 24422                                  	;add	si,1Ah
 24423 0000528D 83C61A                          ADD     SI,dir_entry.dir_first	; Get corrected SI
 24424                                  RET1:
 24425 00005290 F8                              CLC
 24426 00005291 C3                              retn
 24427                                  
 24428                                  ;---------------------------------------------------------------------------
 24429                                  ;
 24430                                  ; Procedure Name : CHECK_VIRT_OPEN
 24431                                  ;
 24432                                  ; CHECK_VIRT_OPEN checks to see if we had performed a "virtual open" (by
 24433                                  ; examining the flag [VIRTUAL_OPEN] to see if it is 1). If we did, then
 24434                                  ; it calls Dev_Close_SFT to decrement the ref. count. It also resets the
 24435                                  ; flag [VIRTUAL_OPEN].
 24436                                  ; No registers affected (including flags).
 24437                                  ; On input, [THISSFT] points to current SFT.
 24438                                  ;
 24439                                  ;---------------------------------------------------------------------------
 24440                                  
 24441                                  CHECK_VIRT_OPEN:
 24442 00005292 50                      	        PUSH    AX
 24443 00005293 9F                              lahf                    ; preserve flags
 24444 00005294 803E[080A]00                    CMP     byte [VIRTUAL_OPEN],0
 24445 00005299 7410                            JZ	short ALL_CLOSED
 24446 0000529B C606[080A]00                    mov     byte [VIRTUAL_OPEN],0	; reset flag
 24447 000052A0 06                      	push	es
 24448 000052A1 57                      	push	di
 24449 000052A2 C43E[3605]                      LES     DI,[THISSFT]
 24450 000052A6 E8D3FB                          call	DEV_CLOSE_SFT
 24451 000052A9 5F                      	pop	di
 24452 000052AA 07                      	pop	es
 24453                                  
 24454                                  ALL_CLOSED:
 24455 000052AB 9E                              sahf                    ; restore flags
 24456 000052AC 58                              POP     AX
 24457 000052AD C3                              retn
 24458                                  
 24459                                  ;============================================================================
 24460                                  ; ROM.ASM, MSDOS 6.0, 1991
 24461                                  ;============================================================================
 24462                                  ; 29/07/2018 - Retro DOS v3.0
 24463                                  
 24464                                  ;	TITLE	ROM - Miscellaneous routines
 24465                                  ;	NAME	ROM
 24466                                  
 24467                                  ;**	Misc Low level routines for doing simple FCB computations, Cache
 24468                                  ;       reads and writes, I/O optimization, and FAT allocation/deallocation
 24469                                  ;
 24470                                  ;	SKPCLP
 24471                                  ;	FNDCLUS
 24472                                  ;	BUFSEC
 24473                                  ;	BUFRD
 24474                                  ;	BUFWRT
 24475                                  ;	NEXTSEC
 24476                                  ;	OPTIMIZE
 24477                                  ;	FIGREC
 24478                                  ;	ALLOCATE
 24479                                  ;	RESTFATBYT
 24480                                  ;	RELEASE
 24481                                  ;	RELBLKS
 24482                                  ;	GETEOF
 24483                                  ;
 24484                                  ;	Modification history:
 24485                                  ;
 24486                                  ;		Created: ARR 30 March 1983
 24487                                  ;               M039: DB 10/25/90 - Disk read/write optimization.
 24488                                  
 24489                                  ;Break   <FNDCLUS -- Skip over allocation units>
 24490                                  ;--------------------------------------------------------------------------
 24491                                  ;
 24492                                  ; Procedure Name : FNDCLUS
 24493                                  ;
 24494                                  ; Inputs:
 24495                                  ;       CX = No. of clusters to skip
 24496                                  ;       ES:BP = Base of drive parameters
 24497                                  ;       [THISSFT] point to SFT
 24498                                  ; Outputs:
 24499                                  ;       BX = Last cluster skipped to
 24500                                  ;       CX = No. of clusters remaining (0 unless EOF)
 24501                                  ;       DX = Position of last cluster
 24502                                  ;       Carry set if error (currently user FAILed to I 24)
 24503                                  ; DI destroyed. No other registers affected.
 24504                                  ;--------------------------------------------------------------------------
 24505                                  
 24506                                  FNDCLUS:
 24507 000052AE 06                      	PUSH	ES
 24508 000052AF C43E[3605]                      LES     DI,[THISSFT]		; setup addressability to SFT
 24509                                  	;mov	bx,[es:di+1Bh]
 24510 000052B3 268B5D1B                	MOV	BX,[ES:DI+SF_ENTRY.sf_lstclus]
 24511                                  	;mov	dx,[es:di+19h]
 24512 000052B7 268B5519                        MOV     DX,[ES:DI+SF_ENTRY.sf_cluspos]
 24513 000052BB 09DB                    	OR	BX,BX
 24514 000052BD 7424                    	JZ	short NOCLUS
 24515                                  
 24516 000052BF 29D1                            SUB     CX,DX
 24517 000052C1 7308                            JNB	short FINDIT
 24518                                  
 24519 000052C3 01D1                            ADD     CX,DX
 24520 000052C5 31D2                            XOR     DX,DX
 24521                                  	;mov	bx,[es:di+0Bh]
 24522 000052C7 268B5D0B                        MOV     BX,[ES:DI+SF_ENTRY.sf_firclus]
 24523                                  FINDIT:
 24524 000052CB 07                              POP	ES
 24525 000052CC E313                    	JCXZ	RET9
 24526                                  
 24527                                  	;entry	SKPCLP
 24528                                  SKPCLP:
 24529 000052CE E87C07                  	call	UNPACK
 24530 000052D1 7214                            jc	short fndclus_retn	; retc
 24531                                  	
 24532                                  	; 09/09/2018
 24533                                  
 24534                                  	; MSDOS 6.0
 24535                                  	;xchg	bx,di
 24536                                  	;call	IsEOF
 24537                                  	;pop	bx
 24538                                  	;xchg	bx,di
 24539                                  	;jae	short RET9
 24540                                  
 24541                                  	; MSDOS 3.3
 24542 000052D3 53                      	push	bx
 24543 000052D4 89FB                    	mov	bx,di
 24544 000052D6 E85D07                  	call	IsEOF
 24545 000052D9 5B                      	pop	bx	
 24546 000052DA 7305                    	jae	short RET9
 24547                                  
 24548 000052DC 87DF                            XCHG    BX,DI
 24549 000052DE 42                              INC     DX
 24550 000052DF E2ED                    	LOOP	SKPCLP			; RMFS
 24551                                  RET9:	
 24552 000052E1 F8                      	CLC
 24553 000052E2 C3                              retn
 24554                                  NOCLUS:
 24555 000052E3 07                              POP	ES
 24556 000052E4 41                              INC	CX
 24557 000052E5 4A                              DEC	DX
 24558 000052E6 F8                              CLC
 24559                                  
 24560                                  fndclus_retn:
 24561 000052E7 C3                              retn
 24562                                  
 24563                                  ;Break  <BUFSEC -- BUFFER A SECTOR AND SET UP A TRANSFER>
 24564                                  ;--------------------------------------------------------------------------
 24565                                  ;
 24566                                  ; Procedure Name : BUFSEC
 24567                                  ;
 24568                                  ; Inputs:
 24569                                  ;       AH = priority of buffer
 24570                                  ;       AL = 0 if buffer must be read, 1 if no pre-read needed
 24571                                  ;       ES:BP = Base of drive parameters
 24572                                  ;       [CLUSNUM] = Physical cluster number
 24573                                  ;       [SECCLUSPOS] = Sector position of transfer within cluster
 24574                                  ;       [BYTCNT1] = Size of transfer
 24575                                  ; Function:
 24576                                  ;       Insure specified sector is in buffer, flushing buffer before
 24577                                  ;       read if necessary.
 24578                                  ; Outputs:
 24579                                  ;       ES:DI = Pointer to buffer
 24580                                  ;       SI = Pointer to transfer address
 24581                                  ;       CX = Number of bytes
 24582                                  ;       [NEXTADD] updated
 24583                                  ;       [TRANS] set to indicate a transfer will occur
 24584                                  ;       Carry set if error (user FAILed to I 24)
 24585                                  ;--------------------------------------------------------------------------
 24586                                  
 24587                                  BUFSEC:
 24588 000052E8 8B16[5405]                      MOV     DX,[CLUSNUM]
 24589 000052EC 8A1E[0E05]                      MOV     BL,[SECCLUSPOS]
 24590                                  	;mov	byte [ALLOWED],38h
 24591 000052F0 C606[F702]38                    MOV     byte [ALLOWED],Allowed_FAIL+Allowed_RETRY+Allowed_IGNORE
 24592 000052F5 E83901                          CALL    FIGREC
 24593 000052F8 E88A0B                  	call	GETBUFFR
 24594 000052FB 72EA                            jc	short fndclus_retn
 24595                                  
 24596 000052FD C606[0F05]01                    MOV     BYTE [TRANS],1	; A transfer is taking place
 24597 00005302 8B36[5005]                      MOV     SI,[NEXTADD]
 24598 00005306 89F7                            MOV     DI,SI
 24599 00005308 8B0E[6405]                      MOV     CX,[BYTCNT1]
 24600 0000530C 01CF                            ADD     DI,CX
 24601 0000530E 893E[5005]                      MOV     [NEXTADD],DI
 24602 00005312 C43E[7405]                      LES     DI,[CURBUF]
 24603                                  	;or	byte [es:di+5],8
 24604 00005316 26804D0508                      OR      byte [ES:DI+BUFFINFO.buf_flags],buf_isDATA
 24605                                  	;lea	di,[di+16]
 24606 0000531B 8D7D10                          LEA     DI,[DI+BUFINSIZ]        ; Point to buffer
 24607 0000531E 033E[5E05]                      ADD     DI,[BYTSECPOS]
 24608 00005322 F8                              CLC
 24609 00005323 C3                              retn
 24610                                  
 24611                                  ;Break   <BUFRD, BUFWRT -- PERFORM BUFFERED READ AND WRITE>
 24612                                  
 24613                                  ;---------------------------------------------------------------------------
 24614                                  ;
 24615                                  ; Procedure Name : BUFRD
 24616                                  ;
 24617                                  ; Do a partial sector read via one of the system buffers
 24618                                  ; ES:BP Points to DPB
 24619                                  ; Carry set if error (currently user FAILed to I 24)
 24620                                  ;
 24621                                  ; DS - set to DOSDATA
 24622                                  ;
 24623                                  ;----------------------------------------------------------------------------
 24624                                  
 24625                                  BUFRD:
 24626 00005324 06                              PUSH	ES
 24627 00005325 31C0                            xor	ax, ax			; pre-read sector
 24628 00005327 E8BEFF                          CALL    BUFSEC
 24629 0000532A 7303                            JNC	short BUF_OK
 24630                                  
 24631                                  BUF_IO_FAIL:				; this label used by BUFWRT also
 24632 0000532C 07                              POP	ES
 24633 0000532D EB29                            JMP     SHORT RBUFPLACED
 24634                                  
 24635                                  BUF_OK:
 24636 0000532F 8CC3                            MOV     BX,ES
 24637 00005331 8E06[DC02]                      MOV     ES,[DMAADD+2]
 24638 00005335 8EDB                            MOV     DS,BX
 24639 00005337 87FE                    	XCHG    DI,SI
 24640 00005339 D1E9                            SHR     CX,1
 24641                                  ;M039
 24642                                  	; MSDOS 3.3
 24643 0000533B 7301                    	JNC	short EVENRD
 24644 0000533D A4                      	MOVSB
 24645                                  EVENRD:
 24646 0000533E F3A5                    	REP     MOVSW
 24647                                  
 24648                                  ;	   CX = # of whole WORDs; CF=1 if odd # of bytes.
 24649                                  ;       DS:SI-> Source within Buffer.
 24650                                  ;       ES:DI-> Destination within Transfer memory block.
 24651                                  
 24652                                  	; MSDOS 6.0
 24653                                  ;	rep	movsw			;Copy Buffer to Transfer memory.
 24654                                  ;	adc	cx,0                    ;CX=1 if odd # of bytes, else CX=0.
 24655                                  ;	rep	movsb                   ;Copy last byte.
 24656                                  ;M039
 24657                                  
 24658 00005340 07                              POP	ES
 24659                                  ;hkn; SS override
 24660 00005341 36C53E[7405]                    LDS     DI,[SS:CURBUF]
 24661                                  	;lea	bx,[di+16]
 24662 00005346 8D5D10                  	LEA     BX,[DI+BUFINSIZ]
 24663 00005349 29DE                            SUB     SI,BX                   ; Position in buffer
 24664 0000534B E88C0A                          call	PLACEBUF
 24665                                  	;cmp	si,[es:bp+2]
 24666 0000534E 263B7602                	CMP	SI,[ES:BP+DPB.SECTOR_SIZE] ; Read Last byte?
 24667 00005352 7203                            JB	short RBUFPLACEDC	; No, leave buf where it is
 24668                                  
 24669                                  ;M039
 24670                                  	; MSDOS 3.3
 24671 00005354 E8E50A                  	call	PLACEHEAD               ; Make it prime candidate for chucking
 24672                                                                          ;  even though it is MRU.
 24673                                          ; MSDOS 6.0
 24674                                  	;MOV	[BufferQueue],DI	; Make it prime candidate for
 24675                                  ;M039					; chucking even though it is MRU.
 24676                                  
 24677                                  RBUFPLACEDC:
 24678 00005357 F8                              CLC
 24679                                  RBUFPLACED:
 24680 00005358 16                      	push	ss
 24681 00005359 1F                      	pop	ds
 24682 0000535A C3                              retn
 24683                                  
 24684                                  ;----------------------------------------------------------------------------
 24685                                  ;
 24686                                  ; Procedure : BUFWRT
 24687                                  ;
 24688                                  ; Do a partial sector write via one of the system buffers
 24689                                  ; ES:BP Points to DPB
 24690                                  ; Carry set if error (currently user FAILed to I 24)
 24691                                  ;
 24692                                  ; DS - set to DOSDATA
 24693                                  ;
 24694                                  ;----------------------------------------------------------------------------
 24695                                  
 24696                                  BUFWRT:
 24697 0000535B A1[5A05]                        MOV     AX,[SECPOS]
 24698                                          ; MSDOS 6.0
 24699                                  	;ADD	AX,1            	; Set for next sector
 24700                                          ;MOV	[SECPOS],AX 		;F.C. >32mb	;AN000;
 24701                                          ;ADC	[SECPOS+2],0		;F.C. >32mb	;AN000;
 24702                                          ;MOV	AX,[SECPOS+2]		;F.C. >32mb	;AN000;
 24703                                          ;CMP	AX,[VALSEC+2]		;F.C. >32mb	;AN000;
 24704                                          ;MOV	AL,1			;F.C. >32mb	;AN000;
 24705                                          ;JA	short NOREAD		;F.C. >32mb	;AN000;
 24706                                          ;JB	short doread		;F.C. >32mb	;AN000;
 24707                                          ;MOV	AX,[SECPOS]		;F.C. >32mb	;AN000;
 24708                                  	; MSDOS 3.3
 24709 0000535E 40                      	INC	AX
 24710 0000535F A3[5A05]                	MOV	[SECPOS],AX ; 09/09/2018
 24711                                  	; MSDOS 3.3 (& MSDOS 6.0)
 24712 00005362 3B06[5C05]                      CMP     AX,[VALSEC]		; Has sector been written before?
 24713 00005366 B001                            MOV     AL,1
 24714 00005368 7702                            JA	short NOREAD		; Skip preread if SECPOS>VALSEC
 24715                                  ;doread:
 24716 0000536A 30C0                            XOR     AL,AL
 24717                                  NOREAD:
 24718 0000536C 06                              PUSH	ES
 24719 0000536D E878FF                          CALL    BUFSEC
 24720 00005370 72BA                    	JC	short BUF_IO_FAIL
 24721 00005372 8E1E[DC02]                      MOV     DS,[DMAADD+2]
 24722 00005376 D1E9                            SHR     CX,1
 24723                                  
 24724                                  ;M039
 24725                                  	; MSDOS 3.3
 24726 00005378 7301                    	JNC     short EVENWRT ; 09/09/2018
 24727 0000537A A4                      	MOVSB
 24728                                  EVENWRT:
 24729 0000537B F3A5                    	REP     MOVSW
 24730                                  
 24731                                  ;	   CX = # of whole WORDs; CF=1 if odd # of bytes.
 24732                                  ;       DS:SI-> Source within Transfer memory block.
 24733                                  ;       ES:DI-> Destination within Buffer.
 24734                                  
 24735                                  	; MSDOS 6.0
 24736                                  	;rep	movsw			;Copy Transfer memory to Buffer.
 24737                                  	;adc	cx,0                    ;CX=1 if odd # of bytes, else CX=0.
 24738                                  	;rep	movsb                   ;Copy last byte.
 24739                                  ;M039
 24740 0000537D 07                              POP	ES
 24741                                  
 24742                                  ;hkn; SS override
 24743 0000537E 36C51E[7405]                    LDS     BX,[SS:CURBUF]
 24744                                  
 24745                                  	; MSDOS 6.0
 24746                                          ;TEST	byte [BX+BUFFINFO.buf_flags],buf_dirty
 24747                                  	;				;LB. if already dirty		  ;AN000;
 24748                                          ;JNZ	short yesdirty5		;LB.  don't increment dirty count ;AN000;
 24749                                  	;call	INC_DIRTY_COUNT		;LB.				  ;AN000;
 24750                                  	
 24751                                  	;or	byte [bx+5],40h
 24752 00005383 804F0540                        OR	byte [BX+BUFFINFO.buf_flags],buf_dirty
 24753                                  ;yesdirty5:
 24754                                  	;lea	si,[bx+16]
 24755 00005387 8D7710                          LEA     SI,[BX+BUFINSIZ]
 24756 0000538A 29F7                            SUB     DI,SI                   ; Position in buffer
 24757                                  ;M039
 24758                                  	; MSDOS 3.3
 24759 0000538C 89FE                    	MOV     SI,DI
 24760 0000538E 89DF                    	MOV     DI,BX
 24761 00005390 E8470A                  	call	PLACEBUF
 24762                                  	;cmp	si,[es:bp+2]
 24763 00005393 263B7602                	CMP     SI,[ES:BP+DPB.SECTOR_SIZE] ; Written last byte?
 24764 00005397 7203                    	JB	short WBUFPLACED	; No, leave buf where it is
 24765 00005399 E8A00A                  	call	PLACEHEAD               ; Make it prime candidate for chucking
 24766                                                                          ;  even though it is MRU.
 24767                                  	; MSDOS 6.0
 24768                                  	;CMP	SI,[ES:BP+DPB.SECTOR_SIZE] ; Written last byte?
 24769                                          ;JB	short WBUFPLACED	; No, leave buf where it is
 24770                                          ;MOV	[BufferQueue],BX	; Make it prime candidate for
 24771                                  					; chucking even though it is MRU.
 24772                                  ;M039
 24773                                  
 24774                                  WBUFPLACED:
 24775 0000539C F8                              CLC
 24776 0000539D 16                      	push	ss
 24777 0000539E 1F                      	pop	ds
 24778 0000539F C3                              retn
 24779                                  
 24780                                  ;Break   <NEXTSEC -- Compute next sector to read or write>
 24781                                  ;---------------------------------------------------------------------------
 24782                                  ;
 24783                                  ; Procedure Name : NEXTSEC
 24784                                  ;
 24785                                  ; Compute the next sector to read or write
 24786                                  ; ES:BP Points to DPB
 24787                                  ;
 24788                                  ;---------------------------------------------------------------------------
 24789                                  
 24790                                  NEXTSEC:
 24791 000053A0 F606[0F05]FF            	test	byte [TRANS],0FFh ; -1 
 24792 000053A5 7426                            JZ	short CLRET
 24793                                  
 24794 000053A7 A0[0E05]                        MOV     AL,[SECCLUSPOS]
 24795 000053AA FEC0                            INC     AL
 24796                                  	;cmp	al,[es:bp+4]
 24797 000053AC 263A4604                        CMP     AL,[ES:BP+DPB.CLUSTER_MASK]
 24798 000053B0 7618                            JBE	short SAVPOS
 24799                                  
 24800 000053B2 8B1E[5405]                      MOV     BX,[CLUSNUM]
 24801 000053B6 E87D06                          call	IsEOF
 24802 000053B9 7314                            JAE	short NONEXT
 24803                                  
 24804 000053BB E88F06                          call	UNPACK
 24805 000053BE 720F                            JC	short NONEXT
 24806                                  clusgot:
 24807 000053C0 893E[5405]                      MOV     [CLUSNUM],DI
 24808 000053C4 FF06[5205]                      INC     word [LASTPOS]
 24809 000053C8 B000                            MOV     AL,0
 24810                                  SAVPOS:
 24811 000053CA A2[0E05]                        MOV     [SECCLUSPOS],AL
 24812                                  CLRET:
 24813 000053CD F8                              CLC
 24814 000053CE C3                              retn
 24815                                  NONEXT:
 24816 000053CF F9                              STC
 24817 000053D0 C3                              retn
 24818                                  
 24819                                  ;Break	<OPTIMIZE -- DO A USER DISK REQUEST WELL>
 24820                                  ;----------------------------------------------------------------------------
 24821                                  ;
 24822                                  ; Procedure Name : OPTIMIZE
 24823                                  ;
 24824                                  ; Inputs:
 24825                                  ;       BX = Physical cluster
 24826                                  ;       CX = No. of records
 24827                                  ;       DL = sector within cluster
 24828                                  ;       ES:BP = Base of drives parameters
 24829                                  ;       [NEXTADD] = transfer address
 24830                                  ; Outputs:
 24831                                  ;       AX = No. of records remaining
 24832                                  ;       BX = Transfer address
 24833                                  ;       CX = No. or records to be transferred
 24834                                  ;       DX = Physical sector address            (LOW)
 24835                                  ;       [HIGH_SECTOR] = Physical sector address (HIGH)
 24836                                  ;       DI = Next cluster
 24837                                  ;       [CLUSNUM] = Last cluster accessed
 24838                                  ;       [NEXTADD] updated
 24839                                  ;       Carry set if error (currently user FAILed to I 24)
 24840                                  ; ES:BP unchanged. Note that segment of transfer not set.
 24841                                  ;
 24842                                  ;---------------------------------------------------------------------------
 24843                                  
 24844                                  OPTIMIZE:
 24845 000053D1 52                      	PUSH    DX
 24846 000053D2 53                              PUSH    BX
 24847                                  	;mov	al,[es:bp+4]
 24848 000053D3 268A4604                        MOV     AL,[ES:BP+DPB.CLUSTER_MASK]
 24849 000053D7 FEC0                            INC     AL              ; Number of sectors per cluster
 24850 000053D9 88C4                            MOV     AH,AL
 24851 000053DB 28D0                            SUB     AL,DL           ; AL = Number of sectors left in first cluster
 24852 000053DD 89CA                            MOV     DX,CX
 24853 000053DF B90000                          MOV     CX,0
 24854                                  OPTCLUS:
 24855                                  ; AL has number of sectors available in current cluster
 24856                                  ; AH has number of sectors available in next cluster
 24857                                  ; BX has current physical cluster
 24858                                  ; CX has number of sequential sectors found so far
 24859                                  ; DX has number of sectors left to transfer
 24860                                  ; ES:BP Points to DPB
 24861                                  ; ES:SI has FAT pointer
 24862                                  
 24863                                  do_norm3:
 24864 000053E2 E86806                          call	UNPACK
 24865 000053E5 7237                            JC	short OP_ERR
 24866                                  clusgot2:
 24867 000053E7 00C1                    	ADD	CL,AL
 24868 000053E9 80D500                          ADC     CH,0
 24869 000053EC 39D1                            CMP     CX,DX
 24870 000053EE 7333                            JAE	short BLKDON
 24871 000053F0 88E0                            MOV     AL,AH
 24872 000053F2 43                              INC     BX
 24873 000053F3 39DF                            CMP     DI,BX
 24874 000053F5 74EB                            JZ	short OPTCLUS
 24875 000053F7 4B                              DEC     BX
 24876                                  FINCLUS:
 24877 000053F8 891E[5405]                      MOV     [CLUSNUM],BX    ; Last cluster accessed
 24878 000053FC 29CA                            SUB     DX,CX           ; Number of sectors still needed
 24879 000053FE 52                              PUSH    DX
 24880 000053FF 89C8                            MOV     AX,CX
 24881                                  	;mul	word[ES:BP+2]
 24882 00005401 26F76602                        MUL	word [ES:BP+DPB.SECTOR_SIZE] 
 24883                                  				; Number of sectors times sector size
 24884 00005405 8B36[5005]                      MOV     SI,[NEXTADD]
 24885 00005409 01F0                            ADD     AX,SI           ; Adjust by size of transfer
 24886 0000540B A3[5005]                        MOV     [NEXTADD],AX
 24887 0000540E 58                              POP     AX              ; Number of sectors still needed
 24888 0000540F 5A                              POP     DX              ; Starting cluster
 24889 00005410 29D3                            SUB     BX,DX           ; Number of new clusters accessed
 24890 00005412 011E[5205]                      ADD     [LASTPOS],BX
 24891 00005416 5B                              POP     BX              ; BL = sector postion within cluster
 24892 00005417 E81700                  	call	FIGREC
 24893 0000541A 89F3                            MOV     BX,SI
 24894 0000541C F8                      	CLC
 24895 0000541D C3                              retn
 24896                                  
 24897                                  OP_ERR:
 24898 0000541E 83C404                          ADD     SP,4
 24899 00005421 F9                      	STC
 24900 00005422 C3                              retn
 24901                                  
 24902                                  BLKDON:
 24903 00005423 29D1                            SUB     CX,DX           ; Number of sectors in cluster we don't want
 24904 00005425 28CC                            SUB     AH,CL           ; Number of sectors in cluster we accepted
 24905 00005427 FECC                            DEC     AH              ; Adjust to mean position within cluster
 24906 00005429 8826[0E05]                      MOV     [SECCLUSPOS],AH
 24907 0000542D 89D1                            MOV     CX,DX           ; Anyway, make the total equal to the request
 24908 0000542F EBC7                            JMP     SHORT FINCLUS
 24909                                  
 24910                                  ;Break	<FIGREC -- Figure sector in allocation unit>
 24911                                  ;---------------------------------------------------------------------------
 24912                                  ;
 24913                                  ; Procedure Name : FIGREC
 24914                                  ;
 24915                                  ; Inputs:
 24916                                  ;       DX = Physical cluster number
 24917                                  ;       BL = Sector position within cluster
 24918                                  ;       ES:BP = Base of drive parameters
 24919                                  ; Outputs:
 24920                                  ;       DX = physical sector number           (LOW)
 24921                                  ;       [HIGH_SECTOR] Physical sector address (HIGH)
 24922                                  ; No other registers affected.
 24923                                  ;
 24924                                  ;---------------------------------------------------------------------------
 24925                                  
 24926                                  FIGREC:
 24927 00005431 51                              PUSH    CX
 24928                                  	;mov	cl,[es:bp+5]
 24929 00005432 268A4E05                        MOV     CL,[ES:BP+DPB.CLUSTER_SHIFT]
 24930 00005436 4A                              DEC     DX
 24931 00005437 4A                              DEC     DX
 24932                                  
 24933                                  ;hkn; SS override HIGH_SECTOR
 24934                                  	; MSDOS 6.0
 24935                                  	;MOV	word [SS:HIGH_SECTOR],0		;F.C. >32mb
 24936                                  	;OR	CL,CL				;F.C. >32mb
 24937                                  	;JZ	short noshift			;F.C. >32mb
 24938                                  	;XOR	CH,CH 				;F.C. >32mb
 24939                                  ;rotleft:					;F.C. >32mb
 24940                                  	;CLC					;F.C. >32mb
 24941                                  	;RCL	DX,1				;F.C. >32mb
 24942                                  	;RCL	word [HIGH_SECTOR],1		;F.C. >32mb
 24943                                  	;LOOP	rotleft				;F.C. >32mb
 24944                                  ;noshift:
 24945                                  
 24946                                  	; MSDOS 3.3
 24947 00005438 D3E2                    	SHL     DX,CL
 24948                                  	; MSDOS 3.3 (& MSDOS 6.0)
 24949 0000543A 08DA                            OR      DL,BL
 24950                                  	;add	dx,[es:bp+0Bh]
 24951 0000543C 2603560B                        ADD     DX,[ES:BP+DPB.FIRST_SECTOR]
 24952                                  	; MSDOS 6.0
 24953                                          ;ADC	word [HIGH_SECTOR],0		;F.C. >32mb
 24954                                  	; MSDOS 3.3 (& MSDOS 6.0)        
 24955 00005440 59                      	POP     CX
 24956                                  figrec_retn:
 24957 00005441 C3                              retn
 24958                                  
 24959                                  ; 30/07/2018 - Retro DOS v3.0
 24960                                  ; IBMDOS.COM (MSDOS3.3, 1987) - Offset 
 24961                                  
 24962                                  ;Break   <ALLOCATE -- Assign disk space>
 24963                                  ;---------------------------------------------------------------------------
 24964                                  ;
 24965                                  ; Procedure Name : ALLOCATE - Allocate Disk Space
 24966                                  ;
 24967                                  ;   ALLOCATE is called to allocate disk clusters. The new clusters are
 24968                                  ;   FAT-chained onto the end of the existing file.
 24969                                  ;
 24970                                  ;   The DPB contains the cluster # of the last free cluster allocated
 24971                                  ;   (dpb_next_free). We start at this cluster and scan towards higher
 24972                                  ;   numbered clusters, looking for the necessary free blocks.
 24973                                  ;
 24974                                  ;   Once again, fancy terminology gets in the way of corrct coding. When
 24975                                  ;   using next_free, start scanning AT THAT POINT and not the one following it.
 24976                                  ;   This fixes the boundary condition bug when only free = next_free = 2.
 24977                                  ;
 24978                                  ;       If we get to the end of the disk without satisfaction:
 24979                                  ;
 24980                                  ;           if (dpb_next_free == 2) then we've scanned the whole disk.
 24981                                  ;               return (insufficient_disk_space)
 24982                                  ;           ELSE
 24983                                  ;               dpb_next_free = 2; start scan over from the beginning.
 24984                                  ;
 24985                                  ;   Note that there is no multitasking interlock. There is no race when
 24986                                  ;   examining the entrys in an in-core FAT block since there will be no
 24987                                  ;   context switch. When UNPACK context switches while waiting for a FAT read
 24988                                  ;   we are done with any in-core FAT blocks, so again there is no race. The
 24989                                  ;   only special concern is that V2 and V3 MSDOS left the last allocated
 24990                                  ;   cluster as "00"; marking it EOF only when the entire alloc request was
 24991                                  ;   satisfied. We can't allow another activation to think this cluster is
 24992                                  ;   free, so we give it a special temporary mark to show that it is, indeed,
 24993                                  ;   allocated.
 24994                                  ;
 24995                                  ;   Note that when we run out of space this algorithem will scan from
 24996                                  ;   dpb_next_free to the end, then scan from cluster 2 through the end,
 24997                                  ;   redundantly scanning the later part of the disk. This only happens when
 24998                                  ;   we run out of space, so sue me.
 24999                                  ;
 25000                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
 25001                                  ;            C  A  V  E  A  T     P  A  T  T  E  R  S  O  N                ;
 25002                                  ;                                                                          ;
 25003                                  ;   The use of FATBYT and RESTFATBYT is somewhat mysterious. Here is the
 25004                                  ;   explanation:
 25005                                  ;
 25006                                  ;   In the NUL file case (sf_firclus currently 0) ALLOCATE is called with
 25007                                  ;   entry BX = 0. What needs to be done in this case is to stuff the cluster
 25008                                  ;   number of the first cluster allocated in sf_firclus when the ALLOCATE is
 25009                                  ;   complete. THIS VALUE IS SAVED TEMPORARILY IN CLUSTER 0, HENCE THE CURRENT
 25010                                  ;   VALUE IN CLUSTER 0 MUST BE SAVED AND RESTORED. This is a side effect of
 25011                                  ;   the fact that PACK and UNPACK don't treat requests for clusters 0 and 1 as
 25012                                  ;   errors. This "stuff" is done by the call to PACK which is right before
 25013                                  ;   the
 25014                                  ;           LOOP   findfre         ; alloc more if needed
 25015                                  ;   instruction when the first cluster is allocated to the nul file. The
 25016                                  ;   value is recalled from cluster 0 and stored at sf_firclus at ads4:
 25017                                  ;
 25018                                  ;   This method is obviously useless (because it is non-reentrant) for
 25019                                  ;   multitasking, and will have to be changed. Storing the required value on
 25020                                  ;   the stack is recommended. Setting sf_firclus at the PACK of cluster 0
 25021                                  ;   (instead of actually doing the PACK) is BAD because it doesn't handle
 25022                                  ;   problems with INT 24 well.
 25023                                  ;
 25024                                  ;            C  A  V  E  A  T     P  A  T  T  E  R  S  O  N                ;
 25025                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
 25026                                  ;                                                                          ;
 25027                                  ;       ENTRY   BX = Last cluster of file (0 if null file)
 25028                                  ;               CX = No. of clusters to allocate
 25029                                  ;               ES:BP = Base of drive parameters
 25030                                  ;               [THISSFT] = Points to SFT
 25031                                  ;
 25032                                  ;       EXIT    'C' set if insufficient space
 25033                                  ;                 [FAILERR] can be tested to see the reason for failure
 25034                                  ;                 CX = max. no. of clusters that could be added to file
 25035                                  ;               'C' clear if space allocated
 25036                                  ;                 BX = First cluster allocated
 25037                                  ;                 FAT is fully updated
 25038                                  ;                 sf_FIRCLUS field of SFT set if file was null
 25039                                  ;
 25040                                  ;       USES    ALL but SI, BP
 25041                                  
 25042                                  ;callmagic  proc near
 25043                                  ;       push    ds                             ;push segment of routine 
 25044                                  ;       push    Offset MagicPatch              ;push offset for routine
 25045                                  ;       retf                                   ;simulate jmp far
 25046                                  ;                                              ;far return address is on
 25047                                  ;                                              ;stack, so far return from
 25048                                  ;                                              ;call will return this routine
 25049                                  ;callmagic  endp
 25050                                  
 25051                                  ALLOCATE:
 25052                                  	; 10/09/2018
 25053                                  ;BEGIN MAGICDRV MODIFICATIONS
 25054                                  ;
 25055                                  ;7/5/92 scottq
 25056                                  ;
 25057                                  ;This is the disk compression patch location which allows
 25058                                  ;the disk compression software to fail allocations if the
 25059                                  ;FAT would allows allocation, but the free space for compressed
 25060                                  ;data would not.
 25061                                  ;        
 25062                                  ;;;	call    far ptr MAGICPATCH
 25063                                  ;;; We cannot do a far call since we cannot have fix-ups[romdos,hidos],
 25064                                  ;;; but we do know the segment and offset of the routine
 25065                                  ;;; so simulate a far call to dosdata:magicpatch
 25066                                  ;;; note dosassume above, so DS -> dosdata
 25067                                  
 25068                                  	; MSDOS 6.0
 25069                                          ;clc				;clear carry so we fall through
 25070                                  	;				;if no patch is present
 25071                                  	;push	cs			;push segment for far return
 25072                                          ;call	callmagic		;this is a near call
 25073                                          ;jnc	short Regular_Allocate_Path
 25074                                  	;jmp	Disk_Full_Return
 25075                                  
 25076                                  	; MSDOS 6.0
 25077                                          ;clc				;clear carry so we fall through
 25078                                  	;				;if no patch is present
 25079                                  	;push	cs			;push segment for far return
 25080                                          ;call	callmagic		;this is a near call
 25081                                          ;jnc	short Regular_Allocate_Path
 25082                                  	;jmp	Disk_Full_Return ; 10/09/2018 !
 25083                                  
 25084                                  ;Regular_Allocate_Path:
 25085                                  ;END MAGICDRV MODIFICATIONS
 25086                                  
 25087 00005442 53                              PUSH    BX                      ; save (bx)
 25088 00005443 31DB                            XOR     BX,BX
 25089 00005445 E80506                  	call	UNPACK
 25090 00005448 893E[2E05]                      MOV     [FATBYT],DI             ; save correct cluster 0 value
 25091 0000544C 5B                              POP     BX
 25092 0000544D 72F2                            jc	short figrec_retn	; abort if error   [INTERR?]
 25093                                  
 25094 0000544F 51                              PUSH    CX
 25095 00005450 53                              PUSH    BX
 25096                                  
 25097 00005451 89DA                            MOV     DX,BX
 25098                                  	;mov	bx,[es:bp+1Ch]
 25099 00005453 268B5E1C                        mov     bx,[ES:BP+DPB.NEXT_FREE]
 25100 00005457 83FB02                          cmp     bx,2
 25101 0000545A 7709                            ja	short FINDFRE
 25102                                  
 25103                                  ;   couldn't find enough free space beyond dpb_next_free, or dpb_next_free is
 25104                                  ;   <2 or >dpb_max_clus. Reset it and restart the scan
 25105                                  
 25106                                  ads1:
 25107                                  	;mov	word [es:bp+1Ch],2
 25108 0000545C 26C7461C0200                    mov     word [ES:BP+DPB.NEXT_FREE],2
 25109 00005462 BB0100                          mov     bx,1                    ; Counter next instruction so first
 25110                                                                          ;       cluster examined is 2
 25111                                  
 25112                                  ;   Scanning both forwards and backwards for a free cluster
 25113                                  ;
 25114                                  ;       (BX) = forwards scan pointer
 25115                                  ;       (CX) = clusters remaining to be allocated
 25116                                  ;       (DX) = current last cluster in file
 25117                                  ;       (TOS) = last cluster of file
 25118                                  
 25119                                  FINDFRE:
 25120 00005465 43                              INC     BX
 25121                                  	;cmp	bx,[es:bp+0Dh]
 25122 00005466 263B5E0D                        CMP	BX,[ES:BP+DPB.MAX_CLUSTER]
 25123 0000546A 7757                    	ja	short ads7	; at end of disk
 25124 0000546C E8DE05                          call	UNPACK          ; check out this cluster
 25125 0000546F 722F                            jc	short ads4	; FAT error             [INTERR?]
 25126 00005471 75F2                            jnz	short FINDFRE	; not free, keep on truckin
 25127                                  
 25128                                  ;   Have found a free cluster. Chain it to the file
 25129                                  ;
 25130                                  ;       (BX) = found free cluster #
 25131                                  ;       (DX) = current last cluster in file
 25132                                  
 25133                                  	;mov	[es:bp+1Ch],bx
 25134 00005473 26895E1C                        mov	[ES:BP+DPB.NEXT_FREE],bx ; next time start search here
 25135 00005477 92                              xchg    ax,dx           ; save (dx) in ax
 25136 00005478 BA0100                          mov     dx,1            ; mark this free guy as "1"
 25137 0000547B E81806                  	call	PACK            ; set special "temporary" mark
 25138 0000547E 7220                            jc	short ads4	; FAT error             [INTERR?]
 25139                                  	;cmp	word [es:bp+1Eh],-1
 25140 00005480 26837E1EFF                      CMP	word [ES:BP+DPB.FREE_CNT],-1 ; Free count valid?
 25141 00005485 7404                            JZ	short NO_ALLOC	; No
 25142                                  	;dec	word [es:bp+1Eh]
 25143 00005487 26FF4E1E                        DEC     word [ES:BP+DPB.FREE_CNT] ; Reduce free count by 1
 25144                                  NO_ALLOC:
 25145 0000548B 92                              xchg    ax,dx           ; (dx) = current last cluster in file
 25146 0000548C 87DA                            XCHG    BX,DX
 25147 0000548E 89D0                            MOV     AX,DX
 25148 00005490 E80306                  	call	PACK            ; link free cluster onto file
 25149                                                                  ;  CAVEAT.. On Nul file, first pass stuffs
 25150                                                                  ;    cluster 0 with FIRCLUS value.
 25151 00005493 720B                            jc	short ads4	; FAT error [INTERR?]
 25152 00005495 93                              xchg    BX,AX           ; (BX) = last one we looked at
 25153 00005496 89DA                            mov     dx,bx           ; (dx) = current end of file
 25154 00005498 E2CB                            LOOP    FINDFRE         ; alloc more if needed
 25155                                  
 25156                                  ;   We've successfully extended the file. Clean up and exit
 25157                                  ;
 25158                                  ;       (BX) = last cluster in file
 25159                                  
 25160 0000549A BAFFFF                          MOV     DX,0FFFFH
 25161 0000549D E8F605                  	call	PACK            ; mark last cluster EOF
 25162                                  
 25163                                  ;   Note that FAT errors jump here to clean the stack and exit. This saves us
 25164                                  ;   2 whole bytes.  Hope its worth it...
 25165                                  ;
 25166                                  ;       'C' set iff error
 25167                                  ;       calling (BX) and (CX) pushed on stack
 25168                                  
 25169                                  ads4:   
 25170 000054A0 5B                      	POP     BX
 25171 000054A1 59                              POP     CX              ; Don't need this stuff since we're successful
 25172 000054A2 729D                            jc	short figrec_retn
 25173 000054A4 E8A605                          call	UNPACK          ; Get first cluster allocated for return
 25174                                                                  ; CAVEAT... In nul file case, UNPACKs cluster 0.
 25175 000054A7 7298                            jc	short figrec_retn
 25176 000054A9 E82D00                  	call	RESTFATBYT      ; Restore correct cluster 0 value
 25177 000054AC 7293                            jc	short figrec_retn
 25178 000054AE 87DF                            XCHG    BX,DI           ; (DI) = last cluster in file upon our entry
 25179 000054B0 09FF                            OR      DI,DI           ; clear 'C'
 25180 000054B2 758D                    	jnz	short figrec_retn ; we were extending an existing file
 25181                                  
 25182                                  ;   We were doing the first allocation for a new file. Update the SFT cluster
 25183                                  ;   info
 25184                                  dofastk:
 25185 000054B4 06                              PUSH	ES
 25186 000054B5 C43E[3605]                      LES     DI,[THISSFT]
 25187                                  	;mov	[es:di+0Bh],bx
 25188 000054B9 26895D0B                        MOV     [ES:DI+SF_ENTRY.sf_firclus],BX
 25189                                  	;mov	[es:di+1Bh],bx
 25190 000054BD 26895D1B                        MOV     [ES:DI+SF_ENTRY.sf_lstclus],BX
 25191 000054C1 07                              POP	ES
 25192 000054C2 C3                              retn
 25193                                  
 25194                                  ;** we're at the end of the disk, and not satisfied. See if we've scanned ALL
 25195                                  ;   of the disk...
 25196                                  
 25197                                  ads7:   
 25198 000054C3 26837E1C02              	cmp	word [ES:BP+DPB.NEXT_FREE],2
 25199 000054C8 7592                    	jnz	short ads1	; start scan from front of disk
 25200                                  
 25201                                  ;   Sorry, we've gone over the whole disk, with insufficient luck. Lets give
 25202                                  ;   the space back to the free list and tell the caller how much he could have
 25203                                  ;   had.  We have to make sure we remove the "special mark" we put on the last
 25204                                  ;   cluster we were able to allocate, so it doesn't become orphaned.
 25205                                  ;
 25206                                  ;       (CX) = clusters remaining to be allocated
 25207                                  ;       (TOS) = last cluster of file (before call to ALLOCATE)
 25208                                  ;       (TOS+1) = # of clusters wanted to allocate
 25209                                  
 25210 000054CA 5B                              POP     BX              ; (BX) = last cluster of file
 25211 000054CB BAFFFF                          MOV     DX,0FFFFH
 25212 000054CE E81A00                  	call	RELBLKS         ; give back any clusters just alloced
 25213 000054D1 58                              POP     AX              ; No. of clusters requested
 25214                                                                  ; Don't "retc". We are setting Carry anyway,
 25215                                                                  ;   Alloc failed, so proceed with return CX
 25216                                                                  ;   setup.
 25217 000054D2 29C8                            SUB     AX,CX           ; AX=No. of clusters allocated
 25218 000054D4 E80200                  	call	RESTFATBYT      ; Don't "retc". We are setting Carry anyway,
 25219                                                                  ;   Alloc failed.
 25220                                  Disk_Full_Return:               ;label added for magic patch 8-6-92 scottq
 25221                                          ; MSDOS 6.0
 25222                                  	;MOV	byte [DISK_FULL],1 ;MS. indicating disk full
 25223 000054D7 F9                              STC
 25224 000054D8 C3                              retn
 25225                                  
 25226                                  ;-----------------------------------------------------------------------
 25227                                  ;
 25228                                  ; Procedure Name : RESTFATBYT
 25229                                  ;
 25230                                  ; SEE ALLOCATE CAVEAT
 25231                                  ;       Carry set if error (currently user FAILed to I 24)
 25232                                  ;-----------------------------------------------------------------------
 25233                                  
 25234                                  RESTFATBYT:
 25235 000054D9 53                              PUSH    BX
 25236 000054DA 52                              PUSH    DX
 25237 000054DB 57                              PUSH    DI
 25238 000054DC 31DB                            XOR     BX,BX
 25239 000054DE 8B16[2E05]                      MOV     DX,[FATBYT]
 25240 000054E2 E8B105                  	call	PACK
 25241 000054E5 5F                              POP     DI
 25242 000054E6 5A                              POP     DX
 25243 000054E7 5B                              POP     BX
 25244                                  RELEASE_flush:
 25245 000054E8 C3                      	retn
 25246                                  
 25247                                  ;Break	<RELEASE -- DEASSIGN DISK SPACE>
 25248                                  ;---------------------------------------------------------------------------
 25249                                  ;
 25250                                  ; Procedure Name : RELEASE
 25251                                  ;
 25252                                  ; Inputs:
 25253                                  ;       BX = Cluster in file
 25254                                  ;       ES:BP = Base of drive parameters
 25255                                  ; Function:
 25256                                  ;       Frees cluster chain starting with [BX]
 25257                                  ;       Carry set if error (currently user FAILed to I 24)
 25258                                  ; AX,BX,DX,DI all destroyed. Other registers unchanged.
 25259                                  ;
 25260                                  ;-----------------------------------------------------------------------------
 25261                                  
 25262                                  RELEASE:
 25263 000054E9 31D2                            XOR     DX,DX
 25264                                  
 25265                                  	;entry	RELBLKS
 25266                                  RELBLKS:
 25267                                  
 25268                                  ;   Enter here with DX=0FFFFH to put an end-of-file mark in the first cluster
 25269                                  ;   and free the rest in the chain.
 25270                                  
 25271 000054EB E85F05                  	call	UNPACK
 25272 000054EE 72F8                    	jc	short RELEASE_flush
 25273 000054F0 74F6                    	jz	short RELEASE_flush
 25274 000054F2 89F8                            MOV     AX,DI
 25275 000054F4 52                              PUSH    DX
 25276 000054F5 E89E05                  	call	PACK
 25277 000054F8 5A                              POP     DX
 25278 000054F9 72ED                    	jc	short RELEASE_flush
 25279 000054FB 09D2                            OR      DX,DX
 25280 000054FD 750B                            JNZ	short NO_DEALLOC	; Was putting EOF mark
 25281                                  	;cmp	word [es:bp+1Eh],-1
 25282 000054FF 26837E1EFF              	CMP     word [ES:BP+DPB.FREE_CNT],-1 ; Free count valid?
 25283 00005504 7404                            JZ	short NO_DEALLOC	; No
 25284 00005506 26FF461E                        INC	word [ES:BP+DPB.FREE_CNT] ; Increase free count by 1
 25285                                  NO_DEALLOC:
 25286 0000550A 89C3                            MOV     BX,AX
 25287 0000550C 48                              dec     ax              ; check for "1"
 25288 0000550D 74D9                    	jz	short RELEASE_flush	; is last cluster of incomplete chain
 25289 0000550F E82405                  	call	IsEOF
 25290 00005512 72D5                            JB	short RELEASE	; Carry clear if JMP not taken
 25291                                  
 25292                                  ;RELEASE_flush:
 25293                                  	; MSDOS 6.0
 25294                                  	;mov	al,[es:bp]
 25295                                  	;;MOV	AL,[ES:BP+DPB.DRIVE]
 25296                                  	;push	si		; FLUSHBUF may trash these and we guarantee
 25297                                  	;push	cx		;  them to be preserved.
 25298                                  	;push	es
 25299                                  	;push	bp
 25300                                  	;call	FLUSHBUF	; commit buffers for this drive
 25301                                  	;pop	bp
 25302                                  	;pop	es
 25303                                  	;pop	cx
 25304                                  	;pop	si
 25305                                  RET12:
 25306 00005514 C3                      	retn
 25307                                  
 25308                                  ;Break	<GETEOF -- Find the end of a file>
 25309                                  ;------------------------------------------------------------------------
 25310                                  ;
 25311                                  ; Procedure Name : GETEOF
 25312                                  ;
 25313                                  ; Inputs:
 25314                                  ;       ES:BP Points to DPB
 25315                                  ;       BX = Cluster in a file
 25316                                  ;       DS = CS
 25317                                  ; Outputs:
 25318                                  ;       BX = Last cluster in the file
 25319                                  ;       Carry set if error (currently user FAILed to I 24)
 25320                                  ; DI destroyed. No other registers affected.
 25321                                  ;
 25322                                  ;--------------------------------------------------------------------------
 25323                                  
 25324                                  GETEOF:
 25325 00005515 E83505                  	call	UNPACK
 25326 00005518 72FA                            jc	short RET12
 25327 0000551A 53                              PUSH    BX
 25328 0000551B 89FB                            MOV     BX,DI
 25329 0000551D E81605                  	call	IsEOF
 25330 00005520 5B                              POP     BX
 25331 00005521 73F1                            JAE     short RET12
 25332 00005523 89FB                            MOV     BX,DI
 25333 00005525 EBEE                            JMP     short GETEOF
 25334                                  
 25335                                  ;============================================================================
 25336                                  ; FCB.ASM, MSDOS 6.0, 1991
 25337                                  ;============================================================================
 25338                                  ; 30/07/2018 - Retro DOS v3.0
 25339                                  
 25340                                  ;	TITLE	FCB - FCB parse calls for MSDOS
 25341                                  ;	NAME	FCB
 25342                                  
 25343                                  ;**	FCB.ASM -  Low level routines for parsing names into FCBs and analyzing
 25344                                  ;		   filename characters
 25345                                  ;
 25346                                  ;	MakeFcb
 25347                                  ;	NameTrans
 25348                                  ;	PATHCHRCMP
 25349                                  ;	GetLet
 25350                                  ;	UCase
 25351                                  ;	GetLet3
 25352                                  ;	GetCharType
 25353                                  ;	TESTKANJ
 25354                                  ;	NORMSCAN
 25355                                  ;	DELIM
 25356                                  ;
 25357                                  ;	Revision history:
 25358                                  ;
 25359                                  ;		A000  version 4.00  Jan. 1988
 25360                                  ;	
 25361                                  ;	M048 - access FILE_UCASE_TAB using DS rather than SS.
 25362                                  
 25363                                  TableLook	EQU -1
 25364                                  
 25365                                  SCANSEPARATOR	EQU	1
 25366                                  DRVBIT		EQU	2
 25367                                  NAMBIT		EQU	4
 25368                                  EXTBIT		EQU	8
 25369                                  
 25370                                  ;
 25371                                  ;----------------------------------------------------------------------------
 25372                                  ;
 25373                                  ; Procedure : MakeFcb
 25374                                  ;
 25375                                  ;----------------------------------------------------------------------------
 25376                                  ;
 25377                                  
 25378                                  MAKEFCB:
 25379                                  ;hkn; SS override
 25380 00005527 36C606[FA02]00          	MOV	BYTE [SS:SpaceFlag],0
 25381 0000552D 30D2                    	XOR	DL,DL		; Flag--not ambiguous file name
 25382                                  	;test	al,2
 25383 0000552F A802                    	test	AL,DRVBIT	; Use current drive field if default?
 25384 00005531 7504                    	JNZ	short DEFDRV
 25385 00005533 26C60500                	MOV	BYTE [ES:DI],0	; No - use default drive
 25386                                  DEFDRV:
 25387 00005537 47                      	INC	DI
 25388 00005538 B90800                  	MOV	CX,8
 25389                                  	;test	al,4
 25390 0000553B A804                    	test	AL,NAMBIT	; Use current name fields as default?
 25391 0000553D 93                      	XCHG	AX,BX		; Save bits in BX
 25392 0000553E B020                    	MOV	AL," "
 25393 00005540 7404                    	JZ	short FILLB	; If not, go fill with blanks
 25394 00005542 01CF                    	ADD	DI,CX
 25395 00005544 31C9                    	XOR	CX,CX		; Don't fill any
 25396                                  FILLB:
 25397 00005546 F3AA                    	REP	STOSB
 25398 00005548 B103                    	MOV	CL,3
 25399 0000554A F6C308                  	test	BL,EXTBIT	; Use current extension as default
 25400 0000554D 7404                    	JZ	short FILLB2
 25401 0000554F 01CF                    	ADD	DI,CX
 25402 00005551 31C9                    	XOR	CX,CX
 25403                                  FILLB2:
 25404 00005553 F3AA                    	REP	STOSB
 25405 00005555 91                      	XCHG	AX,CX		; Put zero in AX
 25406 00005556 AB                      	STOSW
 25407 00005557 AB                      	STOSW			; Initialize two words after to zero
 25408 00005558 83EF10                  	SUB	DI,16		; Point back at start
 25409                                  	;test	bl,1
 25410 0000555B F6C301                  	test	BL,SCANSEPARATOR; Scan off separators if not zero
 25411 0000555E 7409                    	JZ	short SKPSPC
 25412 00005560 E87300                  	CALL	SCANB		; Peel off blanks and tabs
 25413 00005563 E8CA00                  	CALL	DELIM		; Is it a one-time-only delimiter?
 25414 00005566 7504                    	JNZ	short NOSCAN
 25415 00005568 46                      	INC	SI		; Skip over the delimiter
 25416                                  SKPSPC:
 25417 00005569 E86A00                  	CALL	SCANB		; Always kill preceding blanks and tabs
 25418                                  NOSCAN:
 25419 0000556C E89C00                  	CALL	GETLET
 25420 0000556F 7616                    	JBE	short NODRV	; Quit if termination character
 25421 00005571 803C3A                  	CMP	BYTE [SI],":"	; Check for potential drive specifier
 25422 00005574 7511                    	JNZ	short NODRV
 25423 00005576 46                      	INC	SI		; Skip over colon
 25424 00005577 2C40                    	SUB	AL,"@"          ; Convert drive letter to drive number (A=1)
 25425 00005579 7607                    	JBE	short BADDRV	; Drive letter out of range
 25426                                  
 25427 0000557B 50                      	PUSH	AX
 25428 0000557C E8DB13                  	call	GetVisDrv
 25429 0000557F 58                      	POP	AX
 25430 00005580 7302                    	JNC	short HAVDRV
 25431                                  
 25432                                  	; MSDOS 6.0
 25433                                  ;hkn; SS override
 25434                                  	;CMP	byte [SS:DrvErr],error_not_DOS_disk
 25435                                  	;				; if not FAT drive ;AN000;
 25436                                  	;JZ	short HAVDRV		; assume ok	   ;AN000;
 25437                                  BADDRV:
 25438 00005582 B2FF                    	MOV	DL,-1
 25439                                  HAVDRV:
 25440 00005584 AA                      	STOSB			; Put drive specifier in first byte
 25441 00005585 46                      	INC	SI
 25442 00005586 4F                      	DEC	DI		; Counteract next two instructions
 25443                                  NODRV:
 25444 00005587 4E                      	DEC	SI		; Back up
 25445 00005588 47                      	INC	DI		; Skip drive byte
 25446                                  
 25447                                  	;entry	NORMSCAN
 25448                                  NORMSCAN:
 25449 00005589 B90800                  	MOV	CX,8
 25450 0000558C E81300                  	CALL	GETWORD 	; Get 8-letter file name
 25451 0000558F 803C2E                  	CMP	BYTE [SI],"."
 25452 00005592 7507                    	JNZ	short NODOT
 25453 00005594 46                      	INC	SI		; Skip over dot if present
 25454                                  
 25455                                  	; MSDOS6.0
 25456                                  ;hkn; SS override
 25457                                  	;TEST	word [SS:DOS34_FLAG],DBCS_VOLID2	;AN000;
 25458                                  	;JZ	short VOLOK				;AN000;
 25459                                  	;MOVSB			; 2nd byte of DBCS	;AN000;
 25460                                  	;MOV	CX,2					;AN000;
 25461                                  	;JMP	SHORT contvol				;AN000;
 25462                                  ;VOLOK:
 25463 00005595 B90300                  	MOV	CX,3		; Get 3-letter extension
 25464                                  contvol:
 25465 00005598 E80D00                  	CALL	MUSTGETWORD
 25466                                  NODOT:
 25467 0000559B 88D0                    	MOV	AL,DL
 25468                                  
 25469                                  	; MSDOS 6.0
 25470                                  	;and	word [ss:DOS34_FLAG],~DBCS_VOLID2 ; ### BUG FIX ###
 25471                                  
 25472 0000559D C3                      	retn
 25473                                  
 25474                                  NONAM:
 25475 0000559E 01CF                    	ADD	DI,CX
 25476 000055A0 4E                      	DEC	SI
 25477 000055A1 C3                      	retn
 25478                                  
 25479                                  GETWORD:
 25480 000055A2 E86600                  	CALL	GETLET		
 25481 000055A5 76F7                    	JBE	short NONAM	; Exit if invalid character
 25482 000055A7 4E                      	DEC	SI
 25483                                  
 25484                                  ;	UGH!!! Horrible bug here that should be fixed at some point:
 25485                                  ;	If the name we are scanning is longer than CX, we keep on reading!
 25486                                  
 25487                                  MUSTGETWORD:
 25488 000055A8 E86000                  	CALL	GETLET
 25489                                  
 25490                                  ;	If spaceFlag is set then we allow spaces in a pathname
 25491                                  
 25492                                  ;IF NOT TABLELOOK
 25493 000055AB 7223                    	JB	short FILLNAM
 25494                                  ;ENDIF
 25495 000055AD 750C                    	JNZ	short MustCheckCX
 25496                                  
 25497                                  ;hkn; SS override
 25498 000055AF 36F606[FA02]FF          	test	BYTE [SS:SpaceFlag],0FFh
 25499 000055B5 7419                    	JZ	short FILLNAM
 25500 000055B7 3C20                    	CMP	AL," "
 25501 000055B9 7515                    	JNZ	short FILLNAM
 25502                                  
 25503                                  MustCheckCX:
 25504 000055BB E3EB                    	JCXZ	MUSTGETWORD
 25505 000055BD 49                      	DEC	CX
 25506 000055BE 3C2A                    	CMP	AL,"*"          ; Check for ambiguous file specifier
 25507 000055C0 7504                    	JNZ	short NOSTAR
 25508 000055C2 B03F                    	MOV	AL,"?"
 25509 000055C4 F3AA                    	REP	STOSB
 25510                                  NOSTAR:
 25511 000055C6 AA                      	STOSB
 25512 000055C7 3C3F                    	CMP	AL,"?"
 25513 000055C9 75DD                    	JNZ	short MUSTGETWORD
 25514 000055CB 80CA01                  	OR	DL,1		; Flag ambiguous file name
 25515 000055CE EBD8                    	JMP	short MUSTGETWORD
 25516                                  FILLNAM:
 25517 000055D0 B020                    	MOV	AL," "
 25518 000055D2 F3AA                    	REP	STOSB
 25519 000055D4 4E                      	DEC	SI
 25520 000055D5 C3                      	retn
 25521                                  
 25522                                  SCANB:
 25523 000055D6 AC                      	LODSB
 25524 000055D7 E86200                  	CALL	SPCHK
 25525 000055DA 74FA                    	JZ	short SCANB
 25526 000055DC 4E                      	DEC	SI
 25527                                  scanb_retn:
 25528 000055DD C3                      	retn
 25529                                  
 25530                                  ;----------------------------------------------------------------------------
 25531                                  ;
 25532                                  ; Procedure Name : NameTrans
 25533                                  ;
 25534                                  ; NameTrans is used by FindPath to scan off an element of a path. We must
 25535                                  ; allow spaces in pathnames
 25536                                  ;
 25537                                  ;   Inputs:	DS:SI points to start of path element
 25538                                  ;   Outputs:	Name1 has unpacked name, uppercased
 25539                                  ;		ES = DOSGroup
 25540                                  ;		DS:SI advanced after name
 25541                                  ;   Registers modified: DI,AX,DX,CX
 25542                                  ;
 25543                                  ;----------------------------------------------------------------------------
 25544                                  
 25545                                  NameTrans:
 25546                                  ;hkn; SS override
 25547 000055DE 36C606[FA02]01          	MOV	BYTE [SS:SpaceFlag],1
 25548 000055E4 16                      	push	ss
 25549 000055E5 07                      	pop	es
 25550                                  
 25551                                  ;hkn; NAME1 is in DOSDATA
 25552 000055E6 BF[E604]                	MOV	DI,NAME1
 25553 000055E9 57                      	PUSH	DI
 25554 000055EA B82020                  	MOV	AX,'  '
 25555 000055ED B90500                  	MOV	CX,5
 25556 000055F0 AA                      	STOSB
 25557 000055F1 F3AB                    	REP	STOSW		; Fill "FCB" at NAME1 with spaces
 25558 000055F3 30C0                    	XOR	AL,AL		; Set stuff for NORMSCAN
 25559 000055F5 88C2                    	MOV	DL,AL
 25560 000055F7 AA                      	STOSB
 25561 000055F8 5F                      	POP	DI
 25562                                  
 25563 000055F9 E88DFF                  	CALL	NORMSCAN
 25564                                  
 25565                                  ;hkn; SS override for NAME1
 25566 000055FC 36803E[E604]E5          	CMP	byte [SS:NAME1],0E5H
 25567 00005602 75D9                    	jnz	short scanb_retn
 25568 00005604 36C606[E604]05          	MOV	byte [SS:NAME1],5 ; Magic name translation
 25569 0000560A C3                      	retn
 25570                                  
 25571                                  ;Break	<GETLET, DELIM -- CHECK CHARACTERS AND CONVERT>
 25572                                  
 25573                                  ;----------------------------------------------------------------------------
 25574                                  ;
 25575                                  ; Procedure Names : GetLet, UCase, GetLet3
 25576                                  ;
 25577                                  ; These routines take a character, convert it to upper case, and check
 25578                                  ; for delimiters.  Three different entry points:
 25579                                  ;	GetLet -  DS:[SI] = character to convert
 25580                                  ;	UCase  -  AL = character to convert
 25581                                  ;	GetLet3 - AL = character
 25582                                  ;		  [BX] = translation table to use
 25583                                  ;
 25584                                  ;	Exit (in all cases) : AL = upper case character
 25585                                  ;			      CY set if char is control char other than TAB
 25586                                  ;			      ZF set if char is a delimiter
 25587                                  ;	Uses : AX, flags
 25588                                  ;
 25589                                  ; NOTE: This routine exists in a fast table lookup version, and a slow
 25590                                  ; inline version.  Return with carry set is only possible in the inline
 25591                                  ; version.  The table lookup version is the one in use.
 25592                                  ;
 25593                                  ;----------------------------------------------------------------------------
 25594                                  
 25595                                  
 25596                                  ; This entry point has character at [SI]
 25597                                  
 25598                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5517h
 25599                                  GETLET:	
 25600 0000560B AC                      	LODSB
 25601                                  
 25602                                  ; This entry point has character in AL
 25603                                  
 25604                                  	;entry	UCase
 25605                                  UCase:	
 25606                                  	; 09/08/2018
 25607                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5518h
 25608                                  _UCase:
 25609 0000560C 53                      	PUSH	BX
 25610 0000560D BB[0A11]                	MOV	BX,FILE_UCASE_TAB+2
 25611                                  
 25612                                  ; Convert the character in AL to upper case
 25613                                  
 25614                                  gl_0:
 25615 00005610 3C61                    	CMP	AL,"a"
 25616 00005612 720E                    	JB	short gl_2	; Already upper case, go check type
 25617 00005614 3C7A                    	CMP	AL,"z"
 25618 00005616 7702                    	JA	short gl_1
 25619 00005618 2C20                    	SUB	AL,20H		; Convert to upper case
 25620                                  
 25621                                  ; Map European character to upper case
 25622                                  
 25623                                  gl_1:
 25624 0000561A 3C80                    	CMP	AL,80H
 25625 0000561C 7204                    	JB	short gl_2	; Not EuroChar, go check type
 25626 0000561E 2C80                    	SUB	AL,80H		; translate to upper case with this index
 25627                                  
 25628                                  	; M048 - Start 
 25629                                  	; Lantastic call Ucase thru int 2f without setting SS to DOSDATA.
 25630                                  	; So we shall set up DS and to access FILE_UCASE_TAB in BX and also 
 25631                                  	; preserve it.
 25632                                  	;
 25633                                  
 25634                                  	;push	ds
 25635                                  	;push	cs
 25636                                  	;pop	ds
 25637                                  
 25638                                  	; 09/08/2018
 25639                                  	;XLAT	BYTE [CS:BX]	; ds as file_ucase_tab is in DOSDATA
 25640 00005620 2ED7                    	CS	XLAT
 25641                                  
 25642                                  	;pop	ds
 25643                                  
 25644                                  	; M048 - End
 25645                                  
 25646                                  ; Now check the type
 25647                                  
 25648                                  ;If TableLook
 25649                                  
 25650                                  gl_2:
 25651 00005622 50                      	PUSH	AX
 25652                                  	
 25653                                  	; MSDOS 6.0
 25654                                  	;CALL	GetCharType	; returns type flags in AL
 25655                                  	
 25656                                  	; MSDOS 3.3
 25657 00005623 BB[1613]                	mov	bx,CharType
 25658                                  	; 09/08/2018
 25659                                  	;xlat	byte [cs:bx]
 25660 00005626 2ED7                    	cs	xlat	
 25661                                  
 25662                                  	;test	al,1	
 25663 00005628 A801                    	TEST	AL,FCHK 	; test for normal character
 25664 0000562A 58                      	POP	AX
 25665 0000562B 5B                      	POP	BX
 25666 0000562C C3                      	RETN
 25667                                  
 25668                                  ; This entry has character in AL and lookup table in BX
 25669                                  
 25670                                  	; MSDOS 6.0
 25671                                  ;	;entry GetLet3
 25672                                  GETLET3: ; 10/08/2018
 25673 0000562D 53                      	PUSH	BX
 25674 0000562E EBE0                    	JMP	short gl_0
 25675                                  
 25676                                  ;ELSE
 25677                                  ;
 25678                                  ;gl_2:
 25679                                  ;	POP	BX
 25680                                  ;	CMP	AL,"."
 25681                                  ;	retz
 25682                                  ;	CMP	AL,'"'
 25683                                  ;	retz
 25684                                  ;	CALL	PATHCHRCMP
 25685                                  ;	retz
 25686                                  ;	CMP	AL,"["
 25687                                  ;	retz
 25688                                  ;	CMP	AL,"]"
 25689                                  ;	retz
 25690                                  ;ENDIF
 25691                                  
 25692                                  ;---------------------------------------------------------------------
 25693                                  ;
 25694                                  ; DELIM - check if character is a delimiter
 25695                                  ;	Entry : AX = character to check
 25696                                  ;	Exit  : ZF set if character is not a delimiter
 25697                                  ;	Uses  : Flags
 25698                                  ;
 25699                                  ;--------------------------------------------------------------------
 25700                                  
 25701                                  	;entry	DELIM
 25702                                  DELIM:
 25703                                  ;IF TableLook
 25704 00005630 50                      	PUSH	AX
 25705                                  
 25706                                  	; MSDOS 6.0
 25707                                  	;CALL	GetCharType
 25708                                  	
 25709                                  	; MSDOS 3.3
 25710 00005631 53                      	push	bx
 25711 00005632 BB[1613]                	mov	bx,CharType
 25712                                  	;09/08/2018
 25713                                  	;xlat	byte [cs:bx]
 25714 00005635 2ED7                    	cs	xlat
 25715 00005637 5B                      	pop	bx
 25716                                  
 25717                                  	;test	al,2
 25718 00005638 A802                    	TEST	AL,FDELIM
 25719 0000563A 58                      	POP	AX
 25720 0000563B C3                      	RETN
 25721                                  ;ELSE
 25722                                  ;	CMP	AL,":"
 25723                                  ;	retz
 25724                                  ;
 25725                                  ;	CMP	AL,"<"
 25726                                  ;	retz
 25727                                  ;	CMP	AL,"|"
 25728                                  ;	retz
 25729                                  ;	CMP	AL,">"
 25730                                  ;	retz
 25731                                  ;
 25732                                  ;	CMP	AL,"+"
 25733                                  ;	retz
 25734                                  ;	CMP	AL,"="
 25735                                  ;	retz
 25736                                  ;	CMP	AL,";"
 25737                                  ;	retz
 25738                                  ;	CMP	AL,","
 25739                                  ;	retz
 25740                                  ;ENDIF
 25741                                  
 25742                                  ;-------------------------------------------------------------------------
 25743                                  ;
 25744                                  ;  SPCHK - checks to see if a character is a space or equivalent
 25745                                  ;	Entry : AL = character to check
 25746                                  ;	Exit  : ZF set if character is a space
 25747                                  ;	Uses  : flags
 25748                                  ;
 25749                                  ;-------------------------------------------------------------------------
 25750                                  
 25751                                  	;entry SPCHK
 25752                                  SPCHK:
 25753                                  ;IF TableLook
 25754 0000563C 50                      	PUSH	AX
 25755                                  
 25756                                  	; MSDOS 6.0
 25757                                  	;CALL	GetCharType
 25758                                  	
 25759                                  	; MSDOS 3.3
 25760 0000563D 53                      	push	bx
 25761 0000563E BB[1613]                	mov	bx,CharType
 25762                                  	; 09/08/2018
 25763                                  	;xlat	byte [cs:bx]
 25764 00005641 2ED7                    	cs	xlat
 25765 00005643 5B                      	pop	bx
 25766                                  
 25767                                  	;test	al,4
 25768 00005644 A804                    	TEST	AL,FSPCHK
 25769 00005646 58                      	POP	AX
 25770 00005647 C3                      	RETN
 25771                                  ;ELSE
 25772                                  ;	CMP	AL,9		; Filter out tabs too
 25773                                  ;	retz
 25774                                  ;; WARNING! " " MUST be the last compare
 25775                                  ;	CMP	AL," "
 25776                                  ;	return
 25777                                  ;ENDIF
 25778                                  
 25779                                  ; MSDOS 6.0
 25780                                  ;-------------------------------------------------------------------------
 25781                                  ;
 25782                                  ;  GetCharType - return flag bits indicating character type
 25783                                  ;	Bits are defined in DOSSYM.INC. Uses lookup table
 25784                                  ;	defined above at label CharType.
 25785                                  ;
 25786                                  ;	Entry : AL = character to return type flags for
 25787                                  ;	Exit  : AL = type flags
 25788                                  ;	Uses  : AL, flags
 25789                                  ;
 25790                                  ;-------------------------------------------------------------------------
 25791                                  ;
 25792                                  ;GetCharType:
 25793                                  ;	cmp	al,CharType_last	; beyond end of table?
 25794                                  ;	jae	short gct_90		; return standard value
 25795                                  ;
 25796                                  ;	push	bx
 25797                                  ;	mov	bx,CharType		; load lookup table
 25798                                  ;	shr	al,1			; adjust for half-byte table entry size
 25799                                  ;	;xlat	cs:[bx] 		; get flags
 25800                                  ;	cs	xlat	
 25801                                  ;	pop	bx
 25802                                  ;
 25803                                  ; carry clear from previous shift means we want the low nibble.  Otherwise
 25804                                  ; we have to shift the flags down to the low nibble
 25805                                  ;
 25806                                  ;	jnc	short gct_80		; carry clear, no shift needed
 25807                                  ;
 25808                                  ;	shr	al,1			; we want high nibble, shift it down
 25809                                  ;	shr	al,1
 25810                                  ;	shr	al,1
 25811                                  ;	shr	al,1
 25812                                  ;
 25813                                  ;gct_80:
 25814                                  ;	and	al,0Fh			; clear the unused nibble
 25815                                  ;	retn
 25816                                  ;
 25817                                  ;gct_90:
 25818                                  ;	mov	al,0Fh			; set all flags
 25819                                  ;	retn
 25820                                  
 25821                                  ;----------------------------------------------------------------------------
 25822                                  ;
 25823                                  ; Procedure : PATHCHRCMP
 25824                                  ;
 25825                                  ;----------------------------------------------------------------------------
 25826                                  
 25827                                  PATHCHRCMP:
 25828 00005648 3C2F                    	CMP	AL,'/'
 25829 0000564A 7606                    	JBE	short PathRet
 25830 0000564C 3C5C                    	CMP	AL,'\'
 25831 0000564E C3                      	retn
 25832                                  GotFor:
 25833 0000564F B05C                    	MOV	AL,'\'
 25834 00005651 C3                      	retn
 25835                                  PathRet:
 25836 00005652 74FB                    	JZ	short GotFor
 25837 00005654 C3                      	retn
 25838                                  
 25839                                  
 25840                                  ;============================================================================
 25841                                  ; MSCRTLC.ASM, MSDOS 6.0, 1991
 25842                                  ;============================================================================
 25843                                  ; 30/07/2018 - Retro DOS v3.0
 25844                                  
 25845                                  ; 15/03/2018 - Retro DOS v2.0 (MSDOS 2.11, CTRLC.ASM, 1983)
 25846                                  
 25847                                  ;**	MSCTRLC.ASM - ^C and error handler for MSDOS
 25848                                  
 25849                                  ;	TITLE	Control C detection, Hard error and EXIT routines
 25850                                  ;	NAME	IBMCTRLC
 25851                                  
 25852                                  ;**	Low level routines for detecting special characters on CON input,
 25853                                  ;	the ^C exit/int code, the Hard error INT 24 code, the
 25854                                  ;	process termination code, and the INT 0 divide overflow handler.
 25855                                  ;
 25856                                  ;	FATAL
 25857                                  ;	FATAL1
 25858                                  ;	reset_environment
 25859                                  ;	DSKSTATCHK
 25860                                  ;	SPOOLINT
 25861                                  ;	STATCHK
 25862                                  ;	CNTCHAND
 25863                                  ;	DIVOV
 25864                                  ;	CHARHARD
 25865                                  ;	HardErr
 25866                                  ;
 25867                                  ;	Revision history:
 25868                                  ;
 25869                                  ;	    AN000	version 4.0   Jan 1988
 25870                                  ;	    A002	PTM    -- dir >lpt3 hangs
 25871                                  ;	    A003	PTM 3957- fake version for IBMCAHE.COM
 25872                                  ;
 25873                                  ; 	M011: NEC's 8086 clone chip uses Intel's undocumented bit number in
 25874                                  ;	      flags register. In order to return to user normally DOS used to
 25875                                  ;	      move F202 into flags, which sets bit number 1 in flags uncondit-
 25876                                  ;	      ionally. Now it is modified to maintain the state of bit 1.
 25877                                  ;
 25878                                  ; 	M024: suppressed fail and ignore options if not in the middle of int 
 25879                                  ;	      24 and if Ctrl P or ctrl printscrn is pressed in routine 
 25880                                  ;	      charhard.
 25881                                  
 25882                                  
 25883                                  	; MSDOS 6.0
 25884                                  ;		public	LowInt23Addr		
 25885                                  ;LowInt23Addr	LABEL	DWORD
 25886                                  ;	DW	offset DOSDATA:LowInt23, 0
 25887                                  ;
 25888                                  ;		public	LowInt24Addr
 25889                                  ;LowInt24Addr	LABEL	DWORD
 25890                                  ;	DW	offset DOSDATA:LowInt24, 0
 25891                                  ;
 25892                                  ;		public	LowInt28Addr
 25893                                  ;LowInt28Addr	LABEL	DWORD
 25894                                  ;	DW	offset DOSDATA:LowInt28, 0
 25895                                  
 25896                                  ;Break	<Checks for ^C in CON I/O>
 25897                                  
 25898                                  ;---------------------------------------------------------------------------
 25899                                  ;
 25900                                  ; Procedure Name : DSKSTATCHK
 25901                                  ;
 25902                                  ; Check for ^C if only one level in
 25903                                  ;
 25904                                  ;---------------------------------------------------------------------------
 25905                                  
 25906                                          ;procedure   DSKSTATCHK,NEAR ; Check for ^C if only one level in
 25907                                  
 25908                                  DSKSTATCHK:        
 25909                                  	;CMP	BYTE [INDOS],1
 25910 00005655 36803E[CF02]01                  CMP     BYTE [SS:INDOS],1 ; 15/03/2018
 25911                                  	;retnz			; Do NOTHING
 25912 0000565B 7535                    	JNZ	SHORT _RET37 ; Retro DOS v2.0 - 04/03/2018         
 25913                                  
 25914 0000565D 51                      	PUSH    CX
 25915 0000565E 06                              PUSH    ES
 25916 0000565F 53                              PUSH    BX
 25917 00005660 1E                              PUSH    DS
 25918 00005661 56                              PUSH    SI
 25919                                          
 25920                                  	;PUSH	CS
 25921                                          ;POP	ES
 25922                                          ;PUSH	CS
 25923                                          ;POP	DS
 25924                                  
 25925 00005662 8CD3                    	MOV	BX, SS		; SS is DOSDATA. ES:BX must be set up
 25926 00005664 8EC3                    	MOV	ES, BX		; for deviocall2
 25927 00005666 8EDB                    	MOV	DS, BX
 25928                                  
 25929                                  	; 09/09/2018
 25930 00005668 C606[3C03]05                    MOV     BYTE [DSKSTCOM],DEVRDND
 25931 0000566D C606[3A03]0E                    MOV     BYTE [DSKSTCALL],DRDNDHL
 25932 00005672 C706[3D03]0000          	mov	word [DSKSTST],0
 25933                                  
 25934 00005678 BB[3A03]                        MOV     BX,DSKSTCALL
 25935 0000567B C536[3200]                      LDS     SI,[BCON]
 25936 0000567F E878F8                          CALL	DEVIOCALL2
 25937                                   	; 15/03/2018
 25938                                  	;test	word [ss:DSKSTST],200h
 25939 00005682 36F706[3D03]0002                TEST    WORD [SS:DSKSTST],STBUI
 25940                                  	;JNZ	SHORT ZRET		; No characters available
 25941                                  	; 30/07/2018
 25942 00005689 7408                    	jz	short _GotCh
 25943                                  ;ZRET:
 25944 0000568B 30C0                            XOR     AL,AL                   ; Set zero
 25945                                  RET36:
 25946 0000568D 5E                              POP     SI
 25947 0000568E 1F                              POP     DS
 25948 0000568F 5B                              POP     BX
 25949 00005690 07                              POP     ES
 25950 00005691 59                              POP     CX
 25951                                  _RET37:
 25952 00005692 C3                              RETN
 25953                                  
 25954                                  _GotCh:
 25955 00005693 36A0[4703]                      MOV     AL,[SS:DSKCHRET]	; SS override
 25956                                  
 25957 00005697 3C03                            CMP     AL,"C"-"@" ; cmp al,3
 25958 00005699 75F2                            JNZ     SHORT RET36
 25959 0000569B 36C606[3C03]04                  MOV     BYTE [SS:DSKSTCOM],DEVRD
 25960 000056A1 36C606[3A03]16                  MOV     BYTE [SS:DSKSTCALL],DRDWRHL
 25961 000056A7 36880E[4703]                    MOV     [SS:DSKCHRET],CL
 25962                                  	; 09/09/2018
 25963 000056AC 36C706[3D03]0000        	MOV	word [SS:DSKSTST],0
 25964 000056B3 36C706[4C03]0100        	MOV	word [SS:DSKSTCNT],1
 25965 000056BA E83DF8                  	CALL	DEVIOCALL2              ; Eat the ^C
 25966 000056BD 5E                              POP     SI
 25967 000056BE 1F                              POP     DS
 25968 000056BF 5B                              POP     BX                      ; Clean stack
 25969 000056C0 07                              POP     ES
 25970 000056C1 59                              POP     CX
 25971 000056C2 E9BF00                          JMP	CNTCHAND ; 10/08/2018
 25972                                  
 25973                                  NOSTOP:
 25974                                  	; MSDOS 6.0
 25975                                  	;CMP	AL,"P"-"@"
 25976                                  	;JNZ	short check_next
 25977                                  				    	; SS override
 25978                                  	;CMP	BYTE [SS:Scan_Flag],0	; ALT_Q ?
 25979                                  	;JZ	short INCHKJ		; no
 25980                                  	;retn
 25981                                  ;check_next:
 25982                                  	;;IF	NOT TOGLPRN
 25983                                  	;CMP	AL,"N"-"@"
 25984                                  	;JZ	short INCHKJ
 25985                                  	;;ENDIF
 25986                                  
 25987                                  	;CMP	AL,"C"-"@"
 25988                                  	;JZ	short INCHKJ
 25989                                  ;check_end:
 25990                                  	;retn
 25991                                  
 25992                                  	; MSDOS 3.3
 25993 000056C5 3C10                            CMP     AL,"P"-"@"  ; cmp al,16	
 25994 000056C7 7405                            JZ	short INCHKJ
 25995                                  
 25996                                  	; 15/04/2018
 25997                                          ;;IF	NOT TOGLPRN
 25998                                          ;CMP	AL,"N"-"@"
 25999                                          ;JZ	SHORT INCHKJ
 26000                                          ;;ENDIF
 26001                                  
 26002 000056C9 3C03                            CMP     AL,"C"-"@"  ; cmp al,3	
 26003 000056CB 7401                            JZ	short INCHKJ
 26004 000056CD C3                      	RETN
 26005                                  
 26006                                  	; 08/09/2018
 26007                                  INCHKJ:	; 10/08/2018
 26008 000056CE E98F00                  	JMP	INCHK
 26009                                  
 26010                                  ;----------------------------------------------------------------------------
 26011                                  ;
 26012                                  ; Procedure Name : SpoolInt
 26013                                  ;
 26014                                  ; SpoolInt - signal processes that the DOS is truly idle.  We are allowed to
 26015                                  ; do this ONLY if we are working on a 1-12 system call AND if we are not in
 26016                                  ; the middle of an INT 24.
 26017                                  ;
 26018                                  ;----------------------------------------------------------------------------
 26019                                  
 26020                                  SPOOLINT:
 26021 000056D1 9C                              PUSHF
 26022                                  	; 15/03/2018
 26023 000056D2 36803E[0403]00                  CMP     BYTE [SS:IDLEINT],0	; SS override
 26024 000056D8 7414                            JZ      SHORT POPFRET
 26025 000056DA 36803E[CE02]00                  CMP     BYTE [SS:ERRORMODE],0
 26026 000056E0 750C                            JNZ     SHORT POPFRET		;No spool ints in error mode
 26027                                  
 26028                                  	; 30/07/2018
 26029                                  
 26030                                  	; Note that we are going to allow an external program to issue system 
 26031                                  	; calls at this time.  We MUST preserve IdleInt across this.
 26032                                  
 26033                                  
 26034 000056E2 36FF36[0403]            	PUSH	WORD [SS:IDLEINT]
 26035                                   
 26036                                  	; MSDOS 6.0
 26037                                  	;cmp	byte [SS:DosHasHMA],0	; Q: is dos running in HMA (M021)
 26038                                  	;jne	short do_low_int28	; Y: the int must be done from low mem
 26039                                  	;INT	int_spooler		; N: Execute user int 28 handler
 26040                                  	;jmp	short spool_ret_addr
 26041                                  
 26042                                  ;do_low_int28:
 26043                                  	;call	far [SS:LowInt28Addr]
 26044                                  
 26045                                  ;spool_ret_addr:
 26046                                  
 26047 000056E7 CD28                            INT     int_spooler		; INT 28h
 26048                                  
 26049 000056E9 368F06[0403]            	POP	WORD [SS:IDLEINT]
 26050                                  
 26051                                  POPFRET:
 26052 000056EE 9D                              POPF
 26053                                  _RET18:  
 26054 000056EF C3                      	RETN
 26055                                  
 26056                                  ;----------------------------------------------------------------------------
 26057                                  ;
 26058                                  ; Procedure Name : STATCHK
 26059                                  ;
 26060                                  ;----------------------------------------------------------------------------
 26061                                  
 26062                                  STATCHK:
 26063 000056F0 E862FF                          CALL	DSKSTATCHK              ; Allows ^C to be detected under
 26064                                                                          ; input redirection
 26065 000056F3 53                              PUSH    BX
 26066 000056F4 31DB                            XOR     BX,BX
 26067 000056F6 E8C1E9                          CALL	GET_IO_SFT
 26068 000056F9 5B                              POP     BX
 26069 000056FA 72F3                            JC      SHORT _RET18
 26070 000056FC B401                            MOV     AH,1
 26071 000056FE E84CF6                          CALL	IOFUNC
 26072 00005701 74CE                            JZ      SHORT SPOOLINT
 26073 00005703 3C13                            CMP     AL,'S'-'@'
 26074 00005705 75BE                            JNZ     SHORT NOSTOP
 26075                                  
 26076                                  	; MSDOS 6.0			; SS override
 26077                                  	;CMP	BYTE [SS:Scan_Flag],0	; AN000; ALT_R ?
 26078                                  	;JNZ	short check_end		; AN000; yes
 26079                                  
 26080 00005707 30E4                            XOR     AH,AH
 26081 00005709 E841F6                          CALL	IOFUNC                  ; Eat Cntrl-S
 26082 0000570C EB4B                            JMP     SHORT PAUSOSTRT
 26083                                  
 26084                                  PRINTOFF:
 26085                                  PRINTON:
 26086 0000570E 36F616[AC02]            	NOT	BYTE [SS:PFLAG] ; 14/03/2018
 26087                                  
 26088                                  	; 30/07/2018 - Retro DOS v3.0
 26089 00005713 53                      	PUSH	BX
 26090 00005714 BB0400                  	MOV	BX,4
 26091 00005717 E8A0E9                  	call	GET_IO_SFT
 26092 0000571A 5B                      	POP	BX
 26093 0000571B 72D2                    	jc	short _RET18
 26094 0000571D 06                      	PUSH	ES
 26095 0000571E 57                      	PUSH	DI
 26096 0000571F 1E                      	PUSH	DS
 26097 00005720 07                      	POP	ES
 26098 00005721 89F7                    	MOV	DI,SI			; ES:DI -> SFT
 26099                                  	;test	word [es:di+5],800h
 26100 00005723 26F745050008            	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_net_spool
 26101 00005729 7418                    	JZ	short NORM_PR 		; Not redirected, echo is OK
 26102                                  
 26103                                  	;Callinstall NetSpoolEchoCheck,MultNet,38,<AX>,<AX> 
 26104                                  					; See if allowed
 26105 0000572B 50                      	push	ax
 26106 0000572C B82611                  	mov	ax, 1126h
 26107 0000572F CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - ???
 26108                                  			; Return: CF set on error, AX = error code
 26109                                  			; STACK unchanged
 26110 00005731 58                      	pop	ax
 26111                                  
 26112 00005732 730F                    	JNC	short NORM_PR 		; Echo is OK
 26113                                  
 26114                                  					; SS override
 26115 00005734 36C606[AC02]00          	MOV	BYTE [SS:PFLAG],0	; If not allowed, disable echo
 26116                                  
 26117                                  	;Callinstall NetSpoolClose,MultNet,36,<AX>,<AX> ; and close
 26118                                  
 26119 0000573A 50                      	push    ax
 26120 0000573B B82411                  	mov     ax, 1124h
 26121 0000573E CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - ???
 26122                                  			; ES:DI -> SFT, SS = DOS CS
 26123 00005740 58                      	pop     ax
 26124                                  
 26125 00005741 EB10                    	JMP	SHORT RETP6
 26126                                  
 26127                                  NORM_PR:
 26128 00005743 36803E[AC02]00          	CMP	BYTE [SS:PFLAG],0	; SS override
 26129 00005749 7505                    	JNZ	short PRNOPN
 26130 0000574B E82EF7                  	call	DEV_CLOSE_SFT
 26131 0000574E EB03                    	JMP	SHORT RETP6
 26132                                  
 26133                                  PRNOPN:
 26134 00005750 E822F7                  	call	DEV_OPEN_SFT
 26135                                  RETP6:
 26136 00005753 5F                      	POP	DI
 26137 00005754 07                      	POP	ES
 26138                                  
 26139                                  STATCHK_RETN:
 26140 00005755 C3                              RETN
 26141                                  
 26142                                  PAUSOLP:
 26143 00005756 E878FF                          CALL    SPOOLINT
 26144                                  PAUSOSTRT:
 26145 00005759 B401                            MOV     AH,1
 26146 0000575B E8EFF5                          CALL	IOFUNC
 26147 0000575E 74F6                            JZ      SHORT PAUSOLP
 26148                                  INCHK:
 26149 00005760 53                              PUSH    BX
 26150 00005761 31DB                            XOR     BX,BX
 26151 00005763 E854E9                          CALL	GET_IO_SFT
 26152 00005766 5B                              POP     BX
 26153 00005767 72EC                            JC      SHORT STATCHK_RETN ; 30/07/2018
 26154 00005769 30E4                            XOR     AH,AH
 26155 0000576B E8DFF5                          CALL	IOFUNC
 26156                                  	; 30/07/2018
 26157                                  	; MSDOS 3.3
 26158 0000576E 3C10                            CMP     AL,'P'-'@' ;cmp al,16
 26159 00005770 750E                            JNZ	SHORT NOPRINT
 26160                                  
 26161 00005772 36803E[8B0F]00          	cmp	byte [SS:SCAN_FLAG],0
 26162 00005778 7494                    	JZ	SHORT PRINTON	
 26163 0000577A 36C606[8B0F]00          	mov	byte [ss:SCAN_FLAG],0
 26164                                  
 26165                                  	; MSDOS 6.0
 26166                                  	;CMP	AL,"P"-"@"
 26167                                  	;;;;;  7/14/86	ALT_Q key fix
 26168                                  	;JZ	short PRINTON		; no! must be CTRL_P
 26169                                  
 26170                                  NOPRINT:	
 26171                                  	;IF	NOT TOGLPRN
 26172                                  	;CMP	AL,"N"-"@"
 26173                                  	;JZ	short PRINTOFF
 26174                                  	;ENDIF
 26175 00005780 3C03                    	CMP	AL,"C"-"@" ; cmp al,3 
 26176                                  	;retnz
 26177 00005782 75D1                    	jnz	short STATCHK_RETN
 26178                                  
 26179                                  ;	!! NOTE: FALL THROUGH !!
 26180                                  
 26181                                  ;---------------------------------------------------------------------------
 26182                                  ;
 26183                                  ; Procedure Name : CNTHAND ( CTRLC_C HANDLER )
 26184                                  ;
 26185                                  ; "^C" and CR/LF is printed.  Then the user registers are restored and the
 26186                                  ; user CTRL-C handler is executed.  At this point the top of the stack has 1)
 26187                                  ; the interrupt return address should the user CTRL-C handler wish to allow
 26188                                  ; processing to continue; 2) the original interrupt return address to the code
 26189                                  ; that performed the function call in the first place.	If the user CTRL-C
 26190                                  ; handler wishes to continue, it must leave all registers unchanged and RET
 26191                                  ; (not IRET) with carry CLEAR.	If carry is SET then an terminate system call
 26192                                  ; is simulated.
 26193                                  ;
 26194                                  ;---------------------------------------------------------------------------
 26195                                  
 26196                                  CNTCHAND:
 26197                                  	; MSDOS 6.0			; SS override
 26198                                  					; AN002; from RAWOUT
 26199                                  	;TEST	word [SS:Dos34_Flag],CTRL_BREAK_FLAG  
 26200                                  	;JNZ	short around_deadlock 	; AN002;
 26201                                  
 26202 00005784 B003                            MOV     AL,3			; Display "^C"
 26203 00005786 E895CC                          CALL	BUFOUT
 26204 00005789 E835CB                          CALL	CRLF
 26205                                  ;around_deadlock:
 26206 0000578C 16                              PUSH    SS
 26207 0000578D 1F                              POP     DS
 26208 0000578E 803E[0303]00                    CMP     BYTE [CONSWAP],0
 26209 00005793 7403                            JZ      SHORT NOSWAP
 26210 00005795 E84EE6                          CALL	SWAPBACK
 26211                                  NOSWAP:
 26212 00005798 FA                      	CLI				; Prepare to play with stack
 26213 00005799 8E16[2005]              	MOV	SS,[USER_SS]		; User stack now restored
 26214 0000579D 8B26[1E05]              	MOV	SP,[USER_SP]
 26215 000057A1 E841BE                          CALL	restore_world       ; User registers now restored
 26216                                  
 26217                                  	; 30/07/2018 - Retro DOS v3.0 
 26218                                  	; MSDOS 3.3 (IBMDOS.COM - Offset 56ACh)
 26219                                          ; 14/03/2018 - Retro DOS v2.0
 26220 000057A4 2EC606[CF02]00          	MOV     BYTE [CS:INDOS],0	
 26221 000057AA 2EC606[CE02]00                  MOV     BYTE [CS:ERRORMODE],0
 26222 000057B0 2E8926[E002]                    MOV     [CS:ConC_Spsave],SP
 26223 000057B5 F8                      	clc	;30/07/2018
 26224 000057B6 CD23                            INT     int_ctrl_c ; 23h    ; Execute user Ctrl-C handler
 26225                                  	;int	23h	; DOS - CONTROL "C" EXIT ADDRESS
 26226                                  			; Return: return via RETF 2 with CF set
 26227                                  			; DOS will abort program with errorlevel 0
 26228                                  			; else
 26229                                  			; interrupted DOS call continues
 26230                                  
 26231                                  	; 30/07/2018 
 26232                                  
 26233                                  	; MSDOS 3.3 (IBMDOS.COM - Offset 56C0h)
 26234                                  
 26235                                  ; The user has returned to us.	The circumstances we allow are:
 26236                                  ;
 26237                                  ;   IRET	We retry the operation by redispatching the system call
 26238                                  ;   CLC/RETF	POP the stack and retry
 26239                                  ;   ... 	Exit the current process with ^C exit
 26240                                  ;
 26241                                  ; User's may RETURN to us and leave interrupts on. 
 26242                                  ; Turn 'em off just to be sure
 26243                                  
 26244 000057B8 FA                      	CLI
 26245                                  
 26246 000057B9 2EA3[E602]              	MOV	[CS:USER_IN_AX],ax	; save the AX
 26247 000057BD 9C                      	PUSHF				; and the flags (maybe new call)
 26248 000057BE 58                      	POP	AX
 26249                                  
 26250                                  ; See if the input stack is identical to the output stack
 26251                                  
 26252 000057BF 2E3B26[E002]                    CMP	SP,[CS:ConC_Spsave]
 26253 000057C4 7507                    	JNZ     SHORT ctrlc_try_new ; current SP not the same as saved SP
 26254                                  
 26255                                  ; Repeat the operation by redispatching the system call.
 26256                                  
 26257                                  ctrlc_repeat:
 26258 000057C6 2EA1[E602]                      MOV     AX,[CS:USER_IN_AX]
 26259                                  	;transfer COMMAND           ; Repeat command otherwise
 26260                                  COMMANDJ:
 26261 000057CA E9DDBC                  	JMP	COMMAND
 26262                                  
 26263                                  ; The current SP is NOT the same as the input SP. Presume that he 
 26264                                  ; RETF'd leaving some flags on the stack and examine the input
 26265                                  
 26266                                  ctrlc_try_new:
 26267 000057CD 83C402                  	ADD	SP,2			; pop those flags
 26268                                  	;test	ax,1
 26269 000057D0 A90100                  	TEST	AX,f_Carry		; did he return with carry?
 26270 000057D3 74F1                    	JZ	short ctrlc_repeat	; no carry set, just retry
 26271                                  
 26272                                  	; Well...  time to abort the user.  
 26273                                  	; Signal a ^C exit and use the EXIT system call..
 26274                                  
 26275                                  ctrlc_abort:
 26276                                          ;MOV	AX,(EXIT SHL 8) + 0
 26277 000057D5 B8004C                          MOV	AX, (EXIT*256) + 0  ; 4C00h
 26278 000057D8 2EC606[F902]FF          	mov	byte [CS:DidCTRLC],0FFh ; 14/03/2018
 26279                                          ;transfer COMMAND	    ; give up by faking $EXIT
 26280                                  	;JMP	SHORT COMMANDJ
 26281 000057DE E9C9BC                  	JMP	COMMAND
 26282                                  
 26283                                  ;Break	<DIVISION OVERFLOW INTERRUPT>
 26284                                  ;----------------------------------------------------------------------------
 26285                                  ;
 26286                                  ; Procedure Name : DIVOV
 26287                                  ;
 26288                                  ; Default handler for division overflow trap
 26289                                  ;
 26290                                  ;----------------------------------------------------------------------------
 26291                                  
 26292                                  DIVOV: 
 26293                                  	; 30/07/2018
 26294                                  	; 07/07/2018 - Retro DOS v3.0
 26295 000057E1 BE[BC12]                	mov	si,DIVMES
 26296 000057E4 2E8B1E[CF12]            	mov	bx,[cs:DivMesLen]
 26297 000057E9 8CC8                    	mov     ax,cs
 26298 000057EB 8ED0                    	mov	ss,ax
 26299 000057ED BC[0607]                	mov     sp,AUXSTACK
 26300 000057F0 E80200                  	call	RealDivOv
 26301                                  	;call	_outmes ; MSDOS 6.0
 26302 000057F3 EBE0                    	jmp	short ctrlc_abort  ; Use Ctrl-C abort on divide overflow
 26303                                  
 26304                                  ; 30/07/2018
 26305                                  
 26306                                  ; MSDOS 6.0
 26307                                  ;---------------------------------------------------------------------------
 26308                                  ;
 26309                                  ; Procedure Name : OutMes
 26310                                  ;
 26311                                  ;
 26312                                  ; OutMes: perform message output
 26313                                  ; Inputs:   SS:SI points to message
 26314                                  ;	    BX has message length
 26315                                  ; Outputs:  message to BCON
 26316                                  ;
 26317                                  ;Actually, cs:si points to the message now. The segment address is filled in
 26318                                  ;at init. time ([dskchret+2]). This will be temporarily changed to DOSCODE. 
 26319                                  ;NB. This procedure is called only from DIVOV. -SR
 26320                                  ;
 26321                                  ;---------------------------------------------------------------------------
 26322                                  
 26323                                  ;MSDOS 3.3
 26324                                  ;---------------------------------------------------------------------------
 26325                                  ; RealDivOv: perform actual divide overflow stuff.
 26326                                  ; Inputs:   none
 26327                                  ; Outputs:  message to BCON
 26328                                  ;---------------------------------------------------------------------------
 26329                                  
 26330                                  	; 30/07/2018
 26331                                  	; MSDOS 6.0
 26332                                  ;_OUTMES:
 26333                                  	;MSDOS 3.3
 26334                                  RealDivOv:
 26335                                  	 
 26336                                  	; 07/07/2018 - Retro DOS v3.0
 26337                                          ;Context ES
 26338                                          ;push	ss ; 30/07/2018
 26339 000057F5 0E                      	PUSH	CS			; get ES addressability
 26340 000057F6 07                      	POP	ES
 26341                                          ;Context DS
 26342                                  	;push	ss ; 30/07/2018
 26343 000057F7 0E                      	PUSH	CS			; get DS addressability
 26344 000057F8 1F                      	POP	DS
 26345 000057F9 C606[3C03]08                    MOV     BYTE [DSKSTCOM],DEVWRT
 26346 000057FE C606[3A03]16                    MOV     BYTE [DSKSTCALL],DRDWRHL
 26347 00005803 C706[3D03]0000                  MOV     WORD [DSKSTST],0
 26348                                  	; BX = [DivMesLen] = 19
 26349 00005809 891E[4C03]                      MOV     [DSKSTCNT],BX
 26350 0000580D BB[3A03]                        MOV     BX,DSKSTCALL
 26351                                          ;MOV     [DSKCHRET+1],SI	; transfer address (need an EQU)
 26352                                  	; 08/09/2018
 26353 00005810 8936[4803]              	mov	[DEVIOBUF_PTR],si
 26354                                  	; MSDOS 6.0
 26355                                  					; CS is used for string, fill in 
 26356                                  					; segment address 
 26357                                  	;MOV	[DskChRet+3],CS
 26358                                  
 26359 00005814 C536[3200]                      LDS     SI,[BCON]
 26360 00005818 E8DFF6                          CALL	DEVIOCALL2
 26361                                  	; 14/03/2018
 26362                                          ;MOV     WORD [CS:DSKCHRET+1],DEVIOBUF
 26363                                  	; 08/09/2018
 26364 0000581B 2EC706[4803][5E03]      	mov	word [CS:DEVIOBUF_PTR],DEVIOBUF
 26365 00005822 2EC706[4C03]0100                MOV     WORD [CS:DSKSTCNT],1
 26366 00005829 C3                              RETN
 26367                                  
 26368                                  ;Break	<CHARHRD,HARDERR,ERROR -- HANDLE DISK ERRORS AND RETURN TO USER>
 26369                                  ;---------------------------------------------------------------------------
 26370                                  ;
 26371                                  ; Procedure Name : CHARHARD
 26372                                  ;
 26373                                  ;
 26374                                  ; Character device error handler
 26375                                  ; Same function as HARDERR
 26376                                  ;
 26377                                  ;---------------------------------------------------------------------------
 26378                                  
 26379                                  CHARHARD:
 26380                                  	; 30/07/2018
 26381                                  	; 08/07/2018 - Retro DOS v3.0
 26382                                  
 26383                                  	; MSDOS 6.0
 26384                                  ;		   			; M024 - start
 26385                                  ;	cmp	byte ptr [ERRORMODE], 0	; Q: are we in the middle of int 24
 26386                                  ;	jne	@f			; Y: allow fail
 26387                                  ;
 26388                                  ;	OR	AH, Allowed_RETRY	; assume ctrl p
 26389                                  ;
 26390                                  ;	test	byte ptr [PFLAG], -1	; Q: has ctrl p been pressed
 26391                                  ;	jnz	ctrlp			; Y: 
 26392                                  ;@@:					; M024 - end
 26393                                  
 26394                                  ; Character device error handler
 26395                                  ; Same function as HARDERR
 26396                                  
 26397                                  	;or	ah,38h
 26398 0000582A 80CC38                  	or	ah,Allowed_IGNORE+Allowed_RETRY+Allowed_FAIL
 26399                                  ;ctrlp:			; SS override for Allowed and EXITHOLD
 26400 0000582D 368826[F702]            	mov	[SS:ALLOWED],ah
 26401                                  
 26402                                  	; 15/03/2018
 26403 00005832 368C06[1C05]                    MOV     [SS:EXITHOLD+2],ES
 26404 00005837 36892E[1A05]                    MOV     [SS:EXITHOLD],BP
 26405 0000583C 56                              PUSH    SI
 26406                                  	;and	di,0FFh
 26407 0000583D 81E7FF00                        AND     DI,STECODE
 26408 00005841 8CDD                            MOV     BP,DS                   ;Device pointer is BP:SI
 26409 00005843 E86400                          CALL    FATALC
 26410 00005846 5E                              POP     SI
 26411                                  	;return
 26412 00005847 C3                              RETN
 26413                                  
 26414                                  ;---------------------------------------------------------------------------
 26415                                  ;
 26416                                  ; Procedure Name : HardErr
 26417                                  ;
 26418                                  ; Hard disk error handler. Entry conditions:
 26419                                  ;	DS:BX = Original disk transfer address
 26420                                  ;	DX = Original logical sector number
 26421                                  ;	CX = Number of sectors to go (first one gave the error)
 26422                                  ;	AX = Hardware error code
 26423                                  ;	DI = Original sector transfer count	
 26424                                  ;	ES:BP = Base of drive parameters
 26425                                  ;	[READOP] = 0 for read, 1 for write
 26426                                  ;	Allowed Set with allowed responses to this error (other bits MUST BE 0)
 26427                                  ; Output:
 26428                                  ;	[FAILERR] will be set if user responded FAIL
 26429                                  ;
 26430                                  ;--------------------------------------------------------------------------
 26431                                  
 26432                                  HARDERR:
 26433                                  	; 30/07/2018
 26434                                  	; 08/07/2018 - Retro DOS v3.0
 26435 00005848 97                      	XCHG    AX,DI                   ; Error code in DI, count in AX
 26436                                          ;and	di,0FFh
 26437 00005849 81E7FF00                	AND     DI,STECODE              ; And off status bits
 26438                                          ;CMP	DI,WRECODE		; Write Protect Error?
 26439                                  	;cmp	di,0
 26440 0000584D 83FF00                  	cmp	DI,error_I24_write_protect ; Write Protect Error?
 26441 00005850 750A                            JNZ     short NOSETWRPERR
 26442 00005852 50                              PUSH    AX
 26443                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 26444                                          ;MOV	AL,[ES:BP+0]
 26445 00005853 268A4600                	mov	al,[ES:BP]
 26446                                          	; 15/03/2018
 26447 00005857 36A2[D002]                      MOV     [SS:WPERR],AL		; Flag drive with WP error
 26448 0000585B 58                              POP     AX
 26449                                  NOSETWRPERR:
 26450 0000585C 29C8                            SUB     AX,CX                   ; Number of sectors successfully transferred
 26451 0000585E 01C2                            ADD     DX,AX                   ; First sector number to retry
 26452 00005860 52                              PUSH    DX
 26453                                  	; 08/07/2018
 26454                                          ;MUL	word [ES:BP+2] 		; Number of bytes transferred
 26455 00005861 26F76602                	MUL	word [ES:BP+DPB.SECTOR_SIZE]
 26456 00005865 5A                              POP     DX
 26457 00005866 01C3                            ADD     BX,AX                   ; First address for retry
 26458 00005868 30E4                            XOR     AH,AH                   ; Flag disk section in error
 26459                                          ;CMP	DX,[ES:BP+6] 		; In reserved area?
 26460 0000586A 263B5606                	CMP	DX,[ES:BP+DPB.FIRST_FAT]
 26461 0000586E 721A                            JB      SHORT ERRINT
 26462 00005870 FEC4                            INC     AH                      ; Flag for FAT
 26463                                          ;CMP	DX,[ES:BP+10H] 		; In FAT?
 26464 00005872 263B5610                	CMP	DX,[ES:BP+DPB.DIR_SECTOR]   
 26465 00005876 7308                    	JAE	short TESTDIR 		; No
 26466                                  		 ; Err in FAT must force recomp of freespace
 26467                                  	;mov	word[ES:BP+1Eh],-1
 26468 00005878 26C7461EFFFF            	MOV	word [ES:BP+DPB.FREE_CNT],-1
 26469 0000587E EB0A                    	JMP	SHORT ERRINT
 26470                                  TESTDIR:
 26471 00005880 FEC4                            INC     AH
 26472                                          ;CMP	DX,[ES:BP+0BH]		; In directory?
 26473 00005882 263B560B                	CMP	DX,[ES:BP+DPB.FIRST_SECTOR] 
 26474 00005886 7202                            JB      SHORT ERRINT
 26475 00005888 FEC4                            INC     AH                      ; Must be in data area
 26476                                  ERRINT:
 26477 0000588A D0E4                            SHL     AH,1                    ; Make room for read/write bit
 26478 0000588C 360A26[1005]                    OR      AH,[SS:READOP] ; 15/03/2018
 26479                                  
 26480                                  	; 15/08/2018
 26481                                  					; SS override for allowed and EXITHOLD
 26482 00005891 360A26[F702]            	OR	AH,[SS:ALLOWED]		; Set the allowed_ bits
 26483                                  
 26484                                          ;entry   FATAL
 26485                                  FATAL:
 26486                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 26487                                          ;MOV	AL,[ES:BP+0]		; Get drive number
 26488 00005896 268A4600                	MOV	AL,[ES:BP]        
 26489                                  
 26490                                  	;entry   FATAL1
 26491                                  FATAL1:  
 26492                                  	; 15/03/2018      
 26493 0000589A 368C06[1C05]            	MOV     [SS:EXITHOLD+2],ES
 26494 0000589F 36892E[1A05]                    MOV     [SS:EXITHOLD],BP	; The only things we preserve	
 26495                                  	;LES	SI,[ES:BP+12H]
 26496 000058A4 26C47612                	LES	SI,[ES:BP+DPB.DRIVER_ADDR]
 26497 000058A8 8CC5                            MOV     BP,ES                   ; BP:SI points to the device involved
 26498                                  
 26499                                  	; DI has the INT-24-style extended error. We now map the error code 
 26500                                  	; for this into the normalized get extended error set by using the 
 26501                                  	; ErrMap24 table as a translate table. Note that we translate ONLY 
 26502                                  	; the device returned codes and leave all others beyond the look up 
 26503                                  	; table alone.
 26504                                  
 26505                                  	; 08/07/2018 - Retro DOS v3.0
 26506                                  FATALC:
 26507 000058AA E86701                  	call	SET_I24_EXTENDED_ERROR
 26508                                  	;cmp	di,0Ch
 26509 000058AD 83FF0C                  	CMP	DI,error_I24_gen_failure
 26510 000058B0 7603                    	JBE	short GOT_RIGHT_CODE	; Error codes above gen_failure get
 26511 000058B2 BF0C00                  	MOV	DI,error_I24_gen_failure; mapped to gen_failure. Real codes
 26512                                  					;  Only come via GetExtendedError
 26513                                  ;**
 26514                                  ;
 26515                                  ; Entry point used by REDIRector on Network I 24 errors.
 26516                                  ;
 26517                                  ;	ASSUME	DS:NOTHING,ES:NOTHING,SS:DOSDATA
 26518                                  ;
 26519                                  ; ALL I 24 regs set up. ALL Extended error info SET. ALLOWED Set.
 26520                                  ;     EXITHOLD set for restore of ES:BP.
 26521                                  ;
 26522                                  	;entry	NET_I24_ENTRY
 26523                                  NET_I24_ENTRY:
 26524                                  GOT_RIGHT_CODE:
 26525 000058B5 36803E[CE02]00          	CMP     BYTE [SS:ERRORMODE],0	; No INT 24s if already INT 24
 26526 000058BB 7404                            JZ	SHORT NoSetFail
 26527 000058BD B003                    	MOV	AL,3
 26528 000058BF EB51                    	JMP	short FailRet
 26529                                  NoSetFail:
 26530 000058C1 368926[2205]                    MOV     [SS:CONTSTK],SP		; SS override
 26531 000058C6 16                              PUSH	SS
 26532 000058C7 07                              POP	ES
 26533                                      
 26534                                  	; Wango!!! We may need to free some user state info... In 
 26535                                  	; particular, we may have locked down a JFN for a user and he may 
 26536                                  	; NEVER return to us. Thus,we need to free it here and then 
 26537                                  	; reallocate it when we come back.
 26538                                  
 26539 000058C8 36833E[4205]FF          	CMP	word [SS:SFN],-1
 26540 000058CE 740C                    	JZ	short _NoFree
 26541 000058D0 1E                      	push	ds
 26542 000058D1 56                      	push	si
 26543 000058D2 36C536[4605]            	LDS	SI,[SS:PJFN]
 26544 000058D7 C604FF                  	MOV	BYTE [SI],0FFH
 26545 000058DA 5E                      	pop	si
 26546 000058DB 1F                      	pop	ds
 26547                                  
 26548                                  _NoFree:
 26549 000058DC FA                      	CLI
 26550                                  					; Prepare to play with stack
 26551 000058DD 36FE06[CE02]                    INC     BYTE [SS:ERRORMODE]	; Flag INT 24 in progress
 26552 000058E2 36FE0E[CF02]                    DEC     BYTE [SS:INDOS]		; INT 24 handler might not return
 26553 000058E7 368E16[2005]                    MOV     SS,[SS:USER_SS]
 26554 000058EC 268B26[1E05]                    MOV     SP,[ES:USER_SP]         ; User stack pointer restored
 26555                                  	;int	24h	
 26556 000058F1 CD24                            INT     int_fatal_abort         ; Fatal error interrupt vector, must preserve ES
 26557 000058F3 268926[1E05]                    MOV     [ES:USER_SP],SP         ; restore our stack
 26558 000058F8 268C16[2005]                    MOV     [ES:USER_SS],SS
 26559 000058FD 8CC5                            MOV     BP,ES
 26560 000058FF 8ED5                            MOV     SS,BP
 26561 00005901 368B26[2205]                    MOV     SP,[SS:CONTSTK]
 26562 00005906 36FE06[CF02]                    INC     BYTE [SS:INDOS]		; Back in the DOS
 26563 0000590B 36C606[CE02]00                  MOV     BYTE [SS:ERRORMODE],0	; Back from INT 24
 26564 00005911 FB                              STI
 26565                                  FailRet:
 26566 00005912 36C42E[1A05]                    LES     BP,[SS:EXITHOLD]
 26567                                  	
 26568                                  	; 08/07/2018
 26569                                  
 26570                                  	; Triage the user's reply.
 26571                                  
 26572 00005917 3C01                    	CMP	AL,1
 26573 00005919 7235                    	JB	short CheckIgnore	; 0 => ignore
 26574 0000591B 743D                    	JZ	short CheckRetry	; 1 => retry
 26575 0000591D 3C03                    	CMP	AL,3			; 3 => fail
 26576 0000591F 7543                    	JNZ	short DoAbort 		; 2, invalid => abort
 26577                                  
 26578                                  	; The reply was fail.  See if we are allowed to fail.
 26579                                  
 26580                                  				; SS override for ALLOWED, EXTOPEN_ON, 
 26581                                  				; ALLOWED, FAILERR, WPERR, SFN, pJFN
 26582                                  	;test	byte [ss:ALLOWED],8
 26583 00005921 36F606[F702]08          	test	byte [ss:ALLOWED],Allowed_FAIL ; Can we?
 26584 00005927 743B                    	jz	short DoAbort	; No, do abort
 26585                                  DoFail:
 26586 00005929 B003                    	MOV	AL,3		; just in case...
 26587                                  				; AN000;EO. I24 error disabled
 26588                                  	;(MSDOS 6.0, MSCTRLC.ASM, 1991)
 26589                                  	;test	byte [ss:EXTOPEN_ON],EXT_OPEN_I24_OFF 
 26590                                  	;jnz	short Cleanup 		; AN000;EO. no
 26591                                  	
 26592 0000592B 36FE06[F602]            	inc	byte [SS:FAILERR]	; Tell everybody
 26593                                  
 26594                                  CleanUp:
 26595 00005930 36C606[D002]FF          	MOV	byte [SS:WPERR],-1
 26596 00005936 36833E[4205]FF          	CMP	word [SS:SFN],-1
 26597                                  	;jnz	short CleanUp2
 26598                                  	;retn
 26599 0000593C 7411                    	jz	short Cleanup_retn ; 08/07/2018 - Retro DOS v3.0
 26600                                  ;CleanUp2:
 26601 0000593E 1E                      	push	ds
 26602 0000593F 56                      	push	si
 26603 00005940 50                      	push	ax
 26604 00005941 36A1[4205]              	MOV	AX,[ss:SFN]
 26605 00005945 36C536[4605]            	LDS	SI,[ss:PJFN]
 26606 0000594A 8804                    	MOV	[SI],AL
 26607 0000594C 58                      	pop	ax
 26608 0000594D 5E                      	pop	si
 26609 0000594E 1F                      	pop	ds
 26610                                  Cleanup_retn:
 26611 0000594F C3                      	retn
 26612                                  
 26613                                  	; The reply was IGNORE. See if we are allowed to ignore.
 26614                                  
 26615                                  CheckIgnore:
 26616                                  	;test	byte [ss:ALLOWED],20h
 26617 00005950 36F606[F702]20          	test	byte [ss:ALLOWED],Allowed_IGNORE ; Can we?
 26618 00005956 74D1                    	jz	short DoFail			 ; No, do fail
 26619 00005958 EBD6                    	jmp	short CleanUp
 26620                                  
 26621                                  	; The reply was RETRY. See if we are allowed to retry.
 26622                                  
 26623                                  CheckRetry:
 26624                                  	;test	byte [ss:ALLOWED],10h
 26625 0000595A 36F606[F702]10          	test	byte [ss:ALLOWED],Allowed_RETRY	; Can we?
 26626 00005960 74C7                    	jz	short DoFail			; No, do fail
 26627 00005962 EBCC                    	JMP	short CleanUp
 26628                                  
 26629                                  	; The reply was ABORT.
 26630                                  
 26631                                  DoAbort:
 26632 00005964 16                      	push	ss
 26633 00005965 1F                      	pop	ds
 26634                                  
 26635 00005966 803E[0303]00            	CMP	byte [CONSWAP],0
 26636 0000596B 7403                    	JZ	short NOSWAP2
 26637 0000596D E876E4                  	call	SWAPBACK
 26638                                  NOSWAP2:
 26639                                  	; See if we are to truly abort. If we are in the process of aborting, 
 26640                                  	; turn this abort into a fail.
 26641                                  
 26642                                  	;test	byte [fAborting],0FFh
 26643                                  	;jnz	short DoFail
 26644                                  
 26645 00005970 803E[0503]00            	cmp	byte [fAborting],0
 26646 00005975 75B2                    	JNZ	short DoFail
 26647                                  
 26648                                  	; Set return code
 26649                                  
 26650 00005977 C606[1705]02            	MOV	BYTE [EXIT_TYPE],EXIT_HARD_ERROR
 26651 0000597C 30C0                    	XOR	AL,AL
 26652                                  
 26653                                  	; we are truly aborting the process. Go restore information from 
 26654                                  	; the PDB as necessary.
 26655                                  
 26656 0000597E E93B0B                  	jmp	exit_inner
 26657                                  
 26658                                  ;**
 26659                                  ;
 26660                                  ; reset_environment checks the DS value against the CurrentPDB. If they are
 26661                                  ; different, then an old-style return is performed. If they are the same,
 26662                                  ; then we release jfns and restore to parent. We still use the PDB at DS:0 as
 26663                                  ; the source of the terminate addresses.
 26664                                  ;
 26665                                  ; Some subtlety: We are about to issue a bunch of calls that *may* generate
 26666                                  ; INT 24s. We *cannot* allow the user to restart the abort process; we may
 26667                                  ; end up aborting the wrong process or turn a terminate/stay/resident into a
 26668                                  ; normal abort and leave interrupt handlers around. What we do is to set a
 26669                                  ; flag that will indicate that if any abort code is seen, we just continue the
 26670                                  ; operation. In essence, we dis-allow the abort response.
 26671                                  ;
 26672                                  ; output:   none.
 26673                                  ;
 26674                                  	;entry	reset_environment
 26675                                  	
 26676                                  reset_environment:
 26677                                  	; 30/07/2018 - Retro DOS v3.0
 26678                                  	; IBMDOS.COM (MSDOS3.3) - Offset 588Ah 
 26679                                  
 26680                                  ;***	invoke	Reset_Version		; AN007 ;MS. reset version number
 26681                                  
 26682 00005981 1E                      	PUSH	DS			; save PDB of process
 26683                                  
 26684                                  	; There are no critical sections in force. Although we may enter 
 26685                                  	; here with critical sections locked down, they are no longer 
 26686                                  	; relevant. We may safely free all allocated resources.
 26687                                  
 26688 00005982 B482                    	MOV	AH,82h
 26689                                  		; Microsoft Networks - END DOS CRITICAL SECTIONS 0 THROUGH 7
 26690                                  	;int	2Ah 	
 26691 00005984 CD2A                    	INT	int_IBM
 26692                                  
 26693                                  					; SS override
 26694 00005986 36C606[0503]FF          	MOV	byte [SS:fAborting],-1	; signal abort in progress
 26695                                  
 26696                                  					; DOS 4.00 doesn't need it
 26697                                  	;CallInstall NetResetEnvironment, MultNET, 34  
 26698                                  					; Allow REDIR to clear some stuff
 26699                                  					; On process exit.
 26700 0000598C B82211                  	mov     ax, 1122h
 26701 0000598F CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - PROCESS TERMINATION HOOK
 26702                                  			; SS = DOS CS
 26703                                  	;mov	al,22h	
 26704 00005991 B022                    	MOV	AL,int_terminate
 26705 00005993 E8CBC2                  	call	_$GET_INTERRUPT_VECTOR	; and who to go to
 26706                                  
 26707 00005996 59                      	POP	CX			; get ThisPDB
 26708 00005997 06                      	push	es
 26709 00005998 53                      	push	bx			; save return address
 26710                                  
 26711 00005999 368B1E[DE02]            	MOV	BX,[SS:CurrentPDB] 	; get currentPDB
 26712 0000599E 8EDB                    	MOV	DS,BX
 26713 000059A0 A11600                  	MOV	AX,[PDB.PARENT_PID]	; get parentPDB
 26714                                  
 26715                                  	; AX = parentPDB, BX = CurrentPDB, CX = ThisPDB
 26716                                  	; Only free handles if AX <> BX and BX = CX and [exit_code].upper 
 26717                                  	; is not Exit_keep_process
 26718                                  	
 26719 000059A3 39D8                    	CMP	AX,BX
 26720 000059A5 7418                    	JZ	short reset_return	; parentPDB = CurrentPDB
 26721 000059A7 39CB                    	CMP	BX,CX
 26722 000059A9 7514                    	JNZ	short reset_return	; CurrentPDB <> ThisPDB
 26723 000059AB 50                      	PUSH	AX			; save parent
 26724                                  
 26725                                  					; SS override
 26726                                  	;cmp	byte [SS:EXIT_TYPE],3
 26727 000059AC 36803E[1705]03          	CMP	BYTE [SS:EXIT_TYPE],EXIT_KEEP_PROCESS ; 15/08/2018
 26728 000059B2 7406                    	JZ	short reset_to_parent 	; keeping this process
 26729                                  
 26730                                  	; We are truly removing a process. Free all allocation blocks 
 26731                                  	; belonging to this PDB
 26732                                  
 26733                                  	;invoke	arena_free_process
 26734 000059B4 E83C0B                  	call	arena_free_process
 26735                                  
 26736                                  	; Kill off remainder of this process. Close file handles and signal 
 26737                                  	; to relevant network folks that this process is dead. Remember that 
 26738                                  	; CurrentPDB is STILL the current process!
 26739                                  
 26740                                  	;invoke	DOS_ABORT
 26741 000059B7 E897E0                  	call	DOS_ABORT
 26742                                  
 26743                                  reset_to_parent:
 26744                                  					; SS override
 26745 000059BA 368F06[DE02]            	POP	word [SS:CurrentPDB]	; set up process as parent
 26746                                  
 26747                                  reset_return:				; come here for normal return
 26748                                  	;Context DS			; DS is used to refer to DOSDATA  
 26749 000059BF 16                      	push	ss
 26750 000059C0 1F                      	pop	ds	
 26751                                  
 26752 000059C1 B0FF                    	MOV	AL,-1
 26753                                  
 26754                                  	; make sure that everything is clean In this case ignore any errors, 
 26755                                  	; we cannot "FAIL" the abort, the program being aborted is dead.
 26756                                  
 26757                                  	;EnterCrit critDisk
 26758 000059C3 E8A6C6                  	call	EcritDisk
 26759                                  	;invoke	FLUSHBUF
 26760 000059C6 E86405                  	call	FLUSHBUF
 26761                                  	;LeaveCrit critDisk
 26762 000059C9 E8A8C6                  	call	LcritDisk
 26763                                  
 26764                                  	; Decrement open ref. count if we had done a virtual open earlier.
 26765                                  
 26766 000059CC E8C3F8                  	call	CHECK_VIRT_OPEN
 26767 000059CF FA                      	CLI
 26768 000059D0 C606[CF02]00            	MOV	BYTE [INDOS],0		; Go to known state
 26769 000059D5 C606[D002]FF            	MOV	BYTE [WPERR],-1		; Forget about WP error
 26770 000059DA C606[0503]00            	MOV	byte [fAborting],0	; let aborts occur
 26771 000059DF 8F06[1A05]              	POP	WORD [EXITHOLD]
 26772 000059E3 8F06[1C05]              	POP	WORD [EXITHOLD+2]
 26773                                  
 26774                                  	; Snake into multitasking... Get stack from CurrentPDB person
 26775                                  
 26776 000059E7 8E1E[DE02]              	MOV	DS,[CurrentPDB]
 26777 000059EB 8E163000                	MOV	SS,[PDB.USER_STACK+2]
 26778 000059EF 8B262E00                	MOV	SP,[PDB.USER_STACK]
 26779                                  
 26780 000059F3 E8EFBB                  	call	restore_world
 26781                                  
 26782                                  	; MSDOS 6.0
 26783                                  	;push	ax			; set up ds, but save ds in TEMPSEG 
 26784                                  	;mov	ax, ds			; and not on stack.
 26785                                  	;getdseg <ds>			; ds -> dosdata
 26786                                  	;mov	TempSeg, ax
 26787                                  	;pop	ax
 26788                                  					; set up ds to DOSDATA
 26789 000059F6 2EA3[1E05]              	MOV	[CS:USER_SP],AX
 26790                                  
 26791 000059FA 58                      	POP	AX			; suck off CS:IP of interrupt...
 26792 000059FB 58                      	POP	AX
 26793 000059FC 58                      	POP	AX
 26794                                  
 26795                                  ; M011 : BEGIN
 26796                                  
 26797                                  	; MSDOS 3.3
 26798                                  ;	MOV	AX,0F202h	; STI
 26799                                  
 26800                                  	; MSDOS 6.0
 26801 000059FD 9F                      	LAHF
 26802 000059FE 86E0                    	XCHG	AH, AL
 26803 00005A00 2402                    	AND	AL, 02
 26804 00005A02 B4F2                    	MOV	AH, 0F2h
 26805                                  
 26806                                  ; M011 : END
 26807                                  
 26808                                  	; MSDOS 3.3 (& MSDOS 6.0)
 26809 00005A04 50                      	PUSH	AX
 26810                                   
 26811 00005A05 2EFF36[1C05]            	PUSH	word [CS:EXITHOLD+2]
 26812 00005A0A 2EFF36[1A05]            	PUSH	word [CS:EXITHOLD]
 26813                                  
 26814 00005A0F 2EA1[1E05]              	MOV	AX,[CS:USER_SP]
 26815                                  
 26816                                  	; MSDOS 6.0
 26817                                  	;mov	ds,TempSeg	; restore ds
 26818                                  
 26819 00005A13 CF                      	IRET			; Long return back to user terminate address
 26820                                  
 26821                                  ;---------------------------------------------------------------------------
 26822                                  ;
 26823                                  ; Procedure Name : SET_I24_EXTENDED_ERROR
 26824                                  ;
 26825                                  ; This routine handles extended error codes.
 26826                                  ; Input : DI = error code from device
 26827                                  ; Output: All EXTERR fields are set
 26828                                  ;
 26829                                  ;--------------------------------------------------------------------------
 26830                                  
 26831                                  SET_I24_EXTENDED_ERROR:
 26832 00005A14 50                      	PUSH	AX
 26833                                  					; ErrMap24End is in DOSDATA
 26834 00005A15 B8[030E]                	MOV	AX,ErrMap24End
 26835 00005A18 2D[F30D]                	SUB	AX,ErrMap24
 26836                                  					; Change to dosdata to access 
 26837                                  					; ErrMap24 and EXTERR -SR
 26838                                  	; MSDOS 6.0
 26839                                  	;push	ds
 26840                                  	;getdseg <ds>			; ds ->dosdata
 26841                                  
 26842                                  	; AX is the index of the first unavailable error. Do not translate 
 26843                                  	; if greater or equal to AX.
 26844                                  
 26845 00005A1B 39C7                    	CMP	DI,AX
 26846 00005A1D 89F8                    	MOV	AX,DI
 26847 00005A1F 7307                    	JAE	short NoTrans
 26848                                  
 26849 00005A21 2E8A85[F30D]            	MOV	AL,[CS:DI+ErrMap24]
 26850 00005A26 30E4                    	XOR	AH,AH
 26851                                  NoTrans:
 26852 00005A28 2EA3[D202]              	MOV	[CS:EXTERR],AX
 26853                                  	;pop	ds
 26854                                  	;assume	ds:nothing
 26855 00005A2C 58                      	POP	AX
 26856                                  
 26857                                  	; Now Extended error is set correctly. Translate it to get correct 
 26858                                  	; error locus class and recommended action.
 26859                                  
 26860 00005A2D 56                      	PUSH	SI
 26861                                  					; ERR_TABLE_24 is in DOSCODE 
 26862 00005A2E BE[A30D]                	MOV	SI,ERR_TABLE_24
 26863 00005A31 E80FBD                  	call	CAL_LK			; Set other extended error fields
 26864 00005A34 5E                      	POP	SI
 26865 00005A35 C3                      	retn
 26866                                  
 26867                                  ;============================================================================
 26868                                  ; FAT.ASM, MSDOS 6.0, 1991
 26869                                  ;============================================================================
 26870                                  ; 30/07/2018 - Retro DOS v3.0
 26871                                  
 26872                                  ;	TITLE	FAT - FAT maintenance routines
 26873                                  ;	NAME	FAT
 26874                                  
 26875                                  ;**	FAT.ASM
 26876                                  ;
 26877                                  ;	Low level local device routines for performing disk change sequence,
 26878                                  ;	setting cluster validity, and manipulating the FAT
 26879                                  ;
 26880                                  ;	IsEof
 26881                                  ;	UNPACK
 26882                                  ;	PACK
 26883                                  ;	MAPCLUSTER
 26884                                  ;	FATREAD_SFT
 26885                                  ;	FATREAD_CDS
 26886                                  ;	FAT_operation
 26887                                  ;
 26888                                  ;	Revision history:
 26889                                  ;
 26890                                  ;	  AN000  version Jan. 1988
 26891                                  ;	   A001  PTM	      -- disk changed for look ahead buffers
 26892                                  ;
 26893                                  ;	M014 - if a request for pack\unpack cluster 0 is made we write\read
 26894                                  ;	       from CL0FATENTRY rather than disk.
 26895                                  ;
 26896                                  
 26897                                  ;Break <IsEOF - check the quantity in BX for EOF>
 26898                                  ;----------------------------------------------------------------------------
 26899                                  ;
 26900                                  ; Procedure Name : IsEOF
 26901                                  ;
 26902                                  ; IsEOF - check the fat value in BX for eof.
 26903                                  ;
 26904                                  ;   Inputs:	ES:BP point to DPB
 26905                                  ;		BX has fat value
 26906                                  ;   Outputs:	JAE eof
 26907                                  ;   Registers modified: none
 26908                                  ;
 26909                                  ;---------------------------------------------------------------------------
 26910                                  
 26911                                  IsEOF:
 26912                                  	;cmp	word [es:bp+0Dh],0FF6h
 26913 00005A36 26817E0DF60F            	CMP	word [ES:BP+DPB.MAX_CLUSTER],4096-10 ; is this 16 bit fat?
 26914 00005A3C 730B                    	JAE	short EOF16			; yes, check for eof there
 26915                                  
 26916                                  ;J.K. 8/27/86
 26917                                  ;Modified to accept 0FF0h as an eof. This is to handle the diskfull case
 26918                                  ;of any media that has "F0"(Other) as a MediaByte.
 26919                                  ;Hopely, this does not create any side effect for those who may use any value
 26920                                  ;other than "FF8-FFF" as an EOF for their own file.
 26921                                  
 26922 00005A3E 81FBF00F                	cmp	bx,0FF0h
 26923 00005A42 7404                    	je	short IsEOF_other
 26924                                  
 26925 00005A44 81FBF80F                	CMP	BX,0FF8h		; do the 12 bit compare
 26926                                  IsEOF_other:
 26927 00005A48 C3                      	retn
 26928                                  EOF16:
 26929 00005A49 83FBF8                  	CMP	BX,0FFF8h		; 16 bit compare
 26930 00005A4C C3                      	retn
 26931                                  
 26932                                  ;Break	<UNPACK -- UNPACK FAT ENTRIES>
 26933                                  ;---------------------------------------------------------------------------
 26934                                  ;
 26935                                  ; Procedur Name : UNPACK
 26936                                  ;
 26937                                  ; Inputs:
 26938                                  ;	BX = Cluster number (may be full 16-bit quantity)
 26939                                  ;	ES:BP = Base of drive parameters
 26940                                  ; Outputs:
 26941                                  ;	DI = Contents of FAT for given cluster (may be full 16-bit quantity)
 26942                                  ;	Zero set means DI=0 (free cluster)
 26943                                  ;	Carry set means error (currently user FAILed to I 24)
 26944                                  ; SI Destroyed, No other registers affected. Fatal error if cluster too big.
 26945                                  ;
 26946                                  ; NOTE: if BX = 0 then DI = contents of CL0FATENTRY
 26947                                  ;
 26948                                  ;----------------------------------------------------------------------------
 26949                                  
 26950                                  UNPACK:
 26951                                  	; MSDOS 6.0			; M014 - Start
 26952                                  	;or	bx, bx			; Q: are we unpacking cluster 0
 26953                                  	;jnz	short up_cont		; N: proceed with normal unpack
 26954                                  	;mov	di,[CL0FATENTRY]	; Y: return value in CL0FATENTRY
 26955                                  	;or	di,di 			; return z if di=0
 26956                                  	;retn				; done
 26957                                  ;up_cont:				; M014 - End
 26958                                  	;cmp	bx,[es:bp+0Dh]
 26959 00005A4D 263B5E0D                	CMP	BX,[ES:BP+DPB.MAX_CLUSTER]
 26960 00005A51 7726                    	JA	short HURTFAT
 26961 00005A53 E8B900                  	CALL	MAPCLUSTER
 26962 00005A56 721E                    	jc	short _DoContext
 26963 00005A58 8B3D                    	MOV	DI,[DI]
 26964 00005A5A 750E                    	JNZ	short High12		; MZ if high 12 bits, go get 'em
 26965 00005A5C 268B760D                	MOV	SI,[ES:BP+DPB.MAX_CLUSTER] ; MZ is this 16-bit fat?
 26966 00005A60 81FEF60F                	CMP	SI,4096-10
 26967 00005A64 720C                    	JB	short Unpack12		; MZ No, go 'AND' off bits
 26968 00005A66 09FF                    	OR	DI,DI			; MZ set zero condition code, clears carry
 26969 00005A68 EB0C                    	JMP	SHORT _DoContext 	; MZ go do context
 26970                                  
 26971                                  High12:
 26972 00005A6A D1EF                    	SHR	DI,1
 26973 00005A6C D1EF                    	SHR	DI,1
 26974 00005A6E D1EF                    	SHR	DI,1
 26975 00005A70 D1EF                    	SHR	DI,1
 26976                                  Unpack12:
 26977 00005A72 81E7FF0F                	AND	DI,0FFFh		; Clears carry
 26978                                  _DoContext:
 26979 00005A76 16                      	PUSH	SS
 26980 00005A77 1F                      	POP	DS
 26981 00005A78 C3                      	retn
 26982                                  
 26983                                  HURTFAT:
 26984                                  	;mov	word [es:bp+1Eh],0FFFFh
 26985 00005A79 26C7461EFFFF            	MOV	word [ES:BP+DPB.FREE_CNT],-1 ; Err in FAT must force recomp of freespace
 26986 00005A7F 50                      	PUSH	AX
 26987 00005A80 B488                    	MOV	AH,Allowed_FAIL+80h ; 88h
 26988                                  
 26989                                  ;hkn; SS override
 26990 00005A82 36C606[F702]08          	MOV	byte [SS:ALLOWED],Allowed_FAIL ; 8
 26991                                  ;
 26992                                  ; Signal Bad FAT to INT int_fatal_abort handler. We have an invalid cluster.
 26993                                  ;
 26994 00005A88 BFFF0F                  	MOV	DI,0FFFh		; In case INT int_fatal_abort returns (it shouldn't)
 26995 00005A8B E808FE                  	call	FATAL
 26996 00005A8E 3C03                    	CMP	AL,3
 26997 00005A90 F8                      	CLC
 26998 00005A91 7501                    	JNZ	short OKU_RET 		; Try to ignore bad FAT
 26999 00005A93 F9                      	STC				; User said FAIL
 27000                                  OKU_RET:
 27001 00005A94 58                      	POP	AX
 27002                                  hurtfat_retn:
 27003 00005A95 C3                      	retn
 27004                                  
 27005                                  ;Break	<PACK -- PACK FAT ENTRIES>
 27006                                  ;----------------------------------------------------------------------------
 27007                                  ;
 27008                                  ; Procedure Name : PACK
 27009                                  ;
 27010                                  ; Inputs:
 27011                                  ;	BX = Cluster number
 27012                                  ;	DX = Data
 27013                                  ;	ES:BP = Pointer to drive DPB
 27014                                  ; Outputs:
 27015                                  ;	The data is stored in the FAT at the given cluster.
 27016                                  ;	SI,DX,DI all destroyed
 27017                                  ;	Carry set means error (currently user FAILed to I 24)
 27018                                  ;	No other registers affected
 27019                                  ;
 27020                                  ; NOTE: if BX = 0 then data in DX is atored in CL0FATENTRY.
 27021                                  ;
 27022                                  ;---------------------------------------------------------------------------
 27023                                  
 27024                                  PACK:
 27025                                  	; MSDOS 6.0			; M014 - start
 27026                                  	;or	bx, bx			; Q: are we packing cluster 0
 27027                                  	;jnz	short p_cont		; N: proceed with normal pack
 27028                                  	;mov	[CL0FATENTRY],dx	; Y: place value in CL0FATENTRY
 27029                                  	;retn				; done
 27030                                  ;p_cont:				; M014 - end
 27031 00005A96 E87600                  	CALL	MAPCLUSTER
 27032 00005A99 72DB                    	JC	short _DoContext
 27033 00005A9B 8B35                    	MOV	SI,[DI]
 27034 00005A9D 740B                    	JZ	short ALIGNED 		; byte (not nibble) aligned
 27035 00005A9F 51                      	PUSH	CX			; move data to upper 12 bits
 27036 00005AA0 B104                    	MOV	CL,4
 27037 00005AA2 D3E2                    	SHL	DX,CL
 27038 00005AA4 59                      	POP	CX
 27039 00005AA5 83E60F                  	AND	SI,0FH			; leave in original low 4 bits
 27040 00005AA8 EB14                    	JMP	SHORT PACKIN
 27041                                  ALIGNED:
 27042                                  	;cmp	word [es:bp+0Dh],0FF6h
 27043 00005AAA 26817E0DF60F            	CMP	word [ES:BP+DPB.MAX_CLUSTER],4096-10 ; MZ 16 bit fats?
 27044 00005AB0 730A                    	JAE	short Pack16		; MZ yes, go clobber original data
 27045 00005AB2 81E600F0                	AND	SI,0F000h		; MZ leave in upper 4 bits of original
 27046 00005AB6 81E2FF0F                	AND	DX,0FFFh		; MZ store only 12 bits
 27047 00005ABA EB02                    	JMP	SHORT PACKIN		; MZ go store
 27048                                  Pack16:
 27049 00005ABC 31F6                    	XOR	SI,SI			; MZ no original data
 27050                                  PACKIN:
 27051 00005ABE 09D6                    	OR	SI,DX
 27052 00005AC0 8935                    	MOV	[DI],SI
 27053                                  
 27054                                  ;hkn; SS override
 27055 00005AC2 36C536[7405]            	LDS	SI,[SS:CURBUF]
 27056                                  	; MSDOS 6.0
 27057                                  	;TEST	byte [SI+BUFFINFO.buf_flags],buf_dirty  
 27058                                  					;LB. if already dirty		  ;AN000;
 27059                                  	;JNZ	short yesdirty6		;LB.  don't increment dirty count ;AN000;
 27060                                  	;call	INC_DIRTY_COUNT		;LB.				  ;AN000;
 27061                                  	
 27062                                  	;or	byte [si+5],40h
 27063 00005AC7 804C0540                	OR	byte [SI+BUFFINFO.buf_flags],buf_dirty  
 27064                                  ;yesdirty6:				;LB.				  ;AN000;
 27065                                  ;hkn; SS override
 27066 00005ACB 36803E[1305]00          	CMP	BYTE [SS:CLUSSPLIT],0	; 15/08/2018
 27067                                  ;hkn; SS is DOSDATA
 27068 00005AD1 16                      	push	ss
 27069 00005AD2 1F                      	pop	ds
 27070 00005AD3 74C0                    	jz	short hurtfat_retn	; Carry clear
 27071 00005AD5 50                      	PUSH	AX
 27072 00005AD6 53                      	PUSH	BX
 27073 00005AD7 51                      	PUSH	CX
 27074 00005AD8 A1[2805]                	MOV	AX,[CLUSSAVE]
 27075 00005ADB 8E1E[7605]              	MOV	DS,[CURBUF+2]
 27076 00005ADF 83C610                  	ADD	SI,BUFINSIZ  ; add si,16
 27077 00005AE2 8824                    	MOV	[SI],AH
 27078                                  ;hkn; SS is DOSDATA
 27079                                  	;Context DS
 27080 00005AE4 16                      	push	ss
 27081 00005AE5 1F                      	pop	ds	
 27082 00005AE6 50                      	PUSH	AX
 27083                                  	; MSDOS 6.0
 27084                                  	;MOV	DX,[CLUSSEC+2]		;F.C. >32mb			;AN000;
 27085                                  	;MOV	[HIGH_SECTOR],DX	;F.C. >32mb			;AN000;
 27086                                  
 27087 00005AE7 8B16[2A05]              	MOV	DX,[CLUSSEC]
 27088 00005AEB BE0100                  	MOV	SI,1
 27089 00005AEE 30C0                    	XOR	AL,AL
 27090 00005AF0 E89403                  	call	GETBUFFRB
 27091 00005AF3 58                      	POP	AX
 27092 00005AF4 7213                    	JC	short POPP_RET
 27093 00005AF6 C53E[7405]              	LDS	DI,[CURBUF]
 27094                                  	; MSDOS 6.0
 27095                                  	;TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty  
 27096                                  	;				;LB. if already dirty		  ;AN000;
 27097                                  	;JNZ	short yesdirty7		;LB.  don't increment dirty count ;AN000;
 27098                                  	;call	INC_DIRTY_COUNT 	;LB.				  ;AN000;
 27099                                  	
 27100                                  	;or	byte [di+5],40h
 27101 00005AFA 804D0540                	OR	byte [DI+BUFFINFO.buf_flags],buf_dirty 
 27102                                  yesdirty7:
 27103 00005AFE 83C710                  	ADD	DI,BUFINSIZ ; add di,16
 27104 00005B01 4F                      	DEC	DI
 27105                                  	;add	di,[es:bp+2]
 27106 00005B02 26037E02                	ADD	DI,[ES:BP+DPB.SECTOR_SIZE]
 27107 00005B06 8805                    	MOV	[DI],AL
 27108 00005B08 F8                      	CLC
 27109                                  POPP_RET:
 27110 00005B09 16                      	PUSH	SS
 27111 00005B0A 1F                      	POP	DS
 27112 00005B0B 59                      	POP	CX
 27113 00005B0C 5B                      	POP	BX
 27114 00005B0D 58                      	POP	AX
 27115 00005B0E C3                      	retn
 27116                                  
 27117                                  ; 31/07/2018 - Retro DOS v3.0
 27118                                  
 27119                                  ;Break	<MAPCLUSTER - BUFFER A FAT SECTOR>
 27120                                  ;---------------------------------------------------------------------------
 27121                                  ;
 27122                                  ; Procedure Name : MAPCLUSTER
 27123                                  ;
 27124                                  ; Inputs:
 27125                                  ;	ES:BP Points to DPB
 27126                                  ;	BX Is cluster number
 27127                                  ; Function:
 27128                                  ;	Get a pointer to the cluster
 27129                                  ; Outputs:
 27130                                  ;	DS:DI Points to contents of FAT for given cluster
 27131                                  ;	DS:SI Points to start of buffer
 27132                                  ;	Zero Not set if cluster data is in high 12 bits of word
 27133                                  ;	Zero set if cluster data is in low 12 or 16 bits
 27134                                  ;	Carry set if failed.
 27135                                  ; SI is destroyed.
 27136                                  ;
 27137                                  ;---------------------------------------------------------------------------
 27138                                  
 27139                                  MAPCLUSTER:
 27140                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5A15h
 27141 00005B0F C606[1305]00            	MOV	BYTE [CLUSSPLIT],0
 27142                                  	;SAVE	<AX,BX,CX,DX>
 27143 00005B14 50                      	push	ax
 27144 00005B15 53                      	push	bx
 27145 00005B16 51                      	push	cx
 27146 00005B17 52                      	push	dx
 27147 00005B18 89D8                    	MOV	AX,BX			; AX = BX
 27148 00005B1A 26817E0DF60F            	CMP	word [ES:BP+DPB.MAX_CLUSTER],4096-10  ; MZ 16 bit fat?
 27149 00005B20 7302                    	JAE	short Map16		; MZ yes, do 16 bit algorithm
 27150 00005B22 D1E8                    	SHR	AX,1			; AX = BX/2
 27151                                  Map16:	
 27152                                  	; MSDOS 6.0			; MZ skip prev => AX=2*BX
 27153                                  	;XOR	DI,DI			; >32mb fat ;AN000;
 27154                                  	
 27155 00005B24 01D8                    	ADD	AX,BX			; AX = 1.5*fat = byte offset in fat
 27156                                  	;ADC	DI,DI			; >32mb fat ;DI is zero before op;AN000;
 27157 00005B26 268B4E02                	MOV	CX,[ES:BP+DPB.SECTOR_SIZE]
 27158                                  
 27159                                  ;IF FastDiv
 27160                                  ;
 27161                                  ; Gross hack: 99% of all disks have 512 bytes per sector. We test for this
 27162                                  ; case and apply a really fast algorithm to get the desired results
 27163                                  ;
 27164                                  ; Divide method takes 157+4*4=173 (MOV and DIV)
 27165                                  ; Fast method takes 39+20*4=119
 27166                                  ;
 27167                                  ; This saves a bunch.
 27168                                  ;
 27169 00005B2A 81F90002                	CMP	CX,512			; 4	Is this 512 byte sector?
 27170 00005B2E 750E                    	jne	short _DoDiv		; 4     for no jump
 27171 00005B30 89C2                    	MOV	DX,AX			; 2	get set for remainder
 27172 00005B32 81E2FF01                	AND	DX,512-1		; 4	Form remainder
 27173 00005B36 88E0                    	MOV	AL,AH			; 2     Quotient in formation in AL
 27174                                  	; MDOS 6.0
 27175                                  	;shr	di,1			; 2
 27176                                  	;rcr	al,1			; 2
 27177                                  	; MDOS 3.3
 27178 00005B38 D0E8                    	shr	al,1	
 27179                                  	; MDOS 3.3 (& MSDOS 6.0)
 27180 00005B3A 30E4                    	xor	ah,ah			; 3
 27181 00005B3C EB04                    	jmp	short DivDone		; 16
 27182                                  _DoDiv:
 27183                                  ;ENDIF
 27184                                  	; MSDOS 6.0
 27185                                  	;mov	dx,di			; 2
 27186                                  	; MSDOS 3.3
 27187 00005B3E 31D2                    	xor	dx,dx
 27188                                  	; MSDOS 3.3 (& MSDOS 6.0)	
 27189 00005B40 F7F1                    	DIV	CX			; 155 AX is FAT sector # DX is sector index
 27190                                  ;IF FastDiv
 27191                                  DivDone:
 27192                                  ;ENDIF
 27193 00005B42 26034606                	ADD	AX,[ES:BP+DPB.FIRST_FAT]
 27194 00005B46 49                      	DEC	CX			; CX is sector size - 1
 27195                                  	;SAVE	<AX,DX,CX>
 27196 00005B47 50                      	push	ax
 27197 00005B48 52                      	push	dx
 27198 00005B49 51                      	push	cx
 27199 00005B4A 89C2                    	MOV	DX,AX
 27200                                  	; MSDOS 6.0
 27201                                  	;MOV	word [HIGH_SECTOR],0 	;F.C. >32mb  low sector #
 27202 00005B4C 30C0                    	XOR	AL,AL
 27203 00005B4E BE0100                  	MOV	SI,1
 27204                                  	;invoke	GETBUFFRB
 27205 00005B51 E83303                  	call	GETBUFFRB
 27206                                  	;RESTORE <CX,AX,DX>		; CX is sec siz-1, AX is offset in sec
 27207 00005B54 59                      	pop	cx
 27208 00005B55 58                      	pop	ax
 27209 00005B56 5A                      	pop	dx
 27210 00005B57 724B                    	JC	short MAP_POP
 27211 00005B59 C536[7405]              	LDS	SI,[CURBUF]
 27212 00005B5D 8D7C10                  	LEA	DI,[SI+BUFINSIZ]  ; [si+16]
 27213 00005B60 01C7                    	ADD	DI,AX
 27214 00005B62 39C8                    	CMP	AX,CX
 27215 00005B64 752B                    	JNZ	short MAPRET
 27216 00005B66 8A05                    	MOV	AL,[DI]
 27217                                  	;Context DS		 	;hkn; SS is DOSDATA
 27218 00005B68 16                      	push	ss
 27219 00005B69 1F                      	pop	ds	
 27220 00005B6A FE06[1305]              	INC	BYTE [CLUSSPLIT]
 27221 00005B6E A2[2805]                	MOV	[CLUSSAVE],AL
 27222 00005B71 8916[2A05]              	MOV	[CLUSSEC],DX
 27223                                  	; MSDOS 6.0
 27224                                  	;MOV	WORD [CLUSSEC+2],0      ;F.C. >32mb		;AN000;
 27225 00005B75 42                      	INC	DX
 27226                                  	;MOV	word [HIGH_SECTOR],0	;F.C. >32mb FAT sector <32mb ;AN000;
 27227 00005B76 30C0                    	XOR	AL,AL
 27228 00005B78 BE0100                  	MOV	SI,1
 27229                                  	;invoke	GETBUFFRB
 27230 00005B7B E80903                  	call	GETBUFFRB
 27231 00005B7E 7224                    	JC	short MAP_POP
 27232 00005B80 C536[7405]              	LDS	SI,[CURBUF]
 27233 00005B84 8D7C10                  	LEA	DI,[SI+BUFINSIZ]
 27234 00005B87 8A05                    	MOV	AL,[DI]
 27235                                  	;Context DS			;hkn; SS is DOSDATA
 27236 00005B89 16                      	push	ss
 27237 00005B8A 1F                      	pop	ds
 27238 00005B8B A2[2905]                	MOV	[CLUSSAVE+1],AL
 27239                                  
 27240                                  ;hkn; CLUSSAVE is in DOSDATA
 27241 00005B8E BF[2805]                	MOV	DI,CLUSSAVE
 27242                                  MAPRET:
 27243                                  	;RESTORE <DX,CX,BX>
 27244 00005B91 5A                      	pop	dx
 27245 00005B92 59                      	pop	cx
 27246 00005B93 5B                      	pop	bx
 27247 00005B94 31C0                    	XOR	AX,AX			; MZ allow shift to clear carry
 27248 00005B96 26817E0DF60F            	CMP	word [ES:BP+DPB.MAX_CLUSTER],4096-10 ; MZ is this 16-bit fat?
 27249 00005B9C 7302                    	JAE	short MapSet		; MZ no, set flags
 27250 00005B9E 89D8                    	MOV	AX,BX
 27251                                  MapSet:
 27252 00005BA0 A801                    	TEST	AL,1			; set zero flag if not on boundary
 27253                                  	;RESTORE <AX>
 27254 00005BA2 58                      	pop	ax
 27255 00005BA3 C3                      	retn
 27256                                  
 27257                                  MAP_POP:
 27258                                  	;RESTORE <DX,CX,BX,AX>
 27259 00005BA4 5A                      	pop	dx
 27260 00005BA5 59                      	pop	cx
 27261 00005BA6 5B                      	pop	bx
 27262 00005BA7 58                      	pop	ax
 27263 00005BA8 C3                      	retn
 27264                                  
 27265                                  ;Break	<FATREAD_SFT/FATREAD_CDS -- CHECK DRIVE GET FAT>
 27266                                  ;----------------------------------------------------------------------------
 27267                                  ;
 27268                                  ; Procedure Name : FATREAD_SFT
 27269                                  ;
 27270                                  ; Inputs:
 27271                                  ;	ES:DI points to an SFT for the drive of intrest (local only,
 27272                                  ;		giving a NET SFT will produce system crashing results).
 27273                                  ;	DS DOSDATA
 27274                                  ; Function:
 27275                                  ;	Can be used by an SFT routine (like CLOSE) to invalidate buffers
 27276                                  ;	if disk changed.
 27277                                  ;	In other respects, same as FATREAD_CDS.
 27278                                  ;	(note ES:DI destroyed!)
 27279                                  ; Outputs:
 27280                                  ;	Carry set if error (currently user FAILed to I 24)
 27281                                  ; NOTE: This routine may cause FATREAD_CDS to "miss" a disk change
 27282                                  ;	as far as invalidating curdir_ID is concerned.
 27283                                  ;	Since getting a true disk changed on this call is a screw up
 27284                                  ;	anyway, that's the way it goes.
 27285                                  ;
 27286                                  ;---------------------------------------------------------------------------
 27287                                  
 27288                                  FATREAD_SFT:
 27289 00005BA9 26C46D07                	LES	BP,[ES:DI+SF_ENTRY.sf_devptr]
 27290                                  	;MOV	AL,[ES:BP+DPB.DRIVE] ; [es:bp+0]
 27291 00005BAD 268A4600                	mov	AL,[ES:BP]
 27292 00005BB1 A2[1105]                	MOV	[THISDRV],AL
 27293 00005BB4 E83DBB                  	call	GOTDPB			;Set THISDPB
 27294 00005BB7 E87A00                  	CALL	FAT_GOT_DPB
 27295                                  fatread_sft_retn:
 27296 00005BBA C3                      	retn
 27297                                  
 27298                                  ;----------------------------------------------------------------------------
 27299                                  ;
 27300                                  ; Procedure Name : FATREAD_CDS
 27301                                  ;
 27302                                  ; Inputs:
 27303                                  ;	DS:DOSDATA
 27304                                  ;	ES:DI points to an CDS for the drive of intrest (local only,
 27305                                  ;		giving a NET or NUL CDS will produce system crashing results).
 27306                                  ; Function:
 27307                                  ;	If disk may have been changed, media is determined and buffers are
 27308                                  ;	flagged invalid. If not, no action is taken.
 27309                                  ; Outputs:
 27310                                  ;	ES:BP = Drive parameter block
 27311                                  ;	THISDPB = ES:BP
 27312                                  ;	THISDRV set
 27313                                  ;	Carry set if error (currently user FAILed to I 24)
 27314                                  ; DS preserved , all other registers destroyed
 27315                                  ;
 27316                                  ;---------------------------------------------------------------------------
 27317                                  
 27318                                  FATREAD_CDS:
 27319 00005BBB 06                      	PUSH	ES
 27320 00005BBC 57                      	PUSH	DI
 27321                                  	;les	bp,[es:di+45h]
 27322 00005BBD 26C46D45                	LES	BP,[ES:DI+curdir.devptr]
 27323                                  	;MOV	AL,[ES:BP+DPB.DRIVE] ; [es:bp+0]
 27324 00005BC1 268A4600                	mov	AL,[ES:BP]
 27325 00005BC5 A2[1105]                	MOV	[THISDRV],AL
 27326 00005BC8 E829BB                  	call	GOTDPB			;Set THISDPB
 27327 00005BCB E86600                  	CALL	FAT_GOT_DPB
 27328 00005BCE 5F                      	POP	DI			;Get back CDS pointer
 27329 00005BCF 07                      	POP	ES
 27330 00005BD0 72E8                    	jc	short fatread_sft_retn
 27331 00005BD2 7539                    	JNZ	short NO_CHANGE		;Media NOT changed
 27332                                  
 27333                                  ;	Media changed. We now need to find all CDS structures which use this
 27334                                  ;	DPB and invalidate their ID pointers.
 27335                                  
 27336                                  MED_CHANGE:
 27337 00005BD4 31C0                    	XOR	AX,AX
 27338 00005BD6 48                      	DEC	AX			; AX = -1
 27339 00005BD7 1E                      	PUSH	DS
 27340 00005BD8 8A0E[4700]              	MOV	CL,[CDSCOUNT]
 27341 00005BDC 30ED                    	XOR	CH,CH			; CX is number of structures
 27342                                  	;lds	si,[es:di+45h]
 27343 00005BDE 26C57545                	LDS	SI,[ES:DI+curdir.devptr] ; Find all CDS with this devptr
 27344                                  
 27345                                  ;hkn; SS override
 27346                                  
 27347                                  ;	Find all CDSs with this DevPtr
 27348                                  ;
 27349                                  ;	(ax) = -1
 27350                                  ;	(ds:si) = DevPtr
 27351                                  
 27352 00005BE2 36C43E[3C00]            	LES	DI,[SS:CDSADDR]		; (es:di) = CDS pointer
 27353                                  frcd20: 
 27354                                  	;test	word [es:di+43h],8000h
 27355 00005BE7 26F745430080            	TEST	word [ES:DI+curdir.flags],curdir_isnet
 27356 00005BED 7518                    	JNZ	short frcd25		; Leave NET guys alone!!
 27357                                  
 27358                                  	; MSDOS 3.3
 27359                                  	;push	es
 27360                                  	;push	di
 27361                                  	;les	di,[es:di+45h]
 27362                                  	;;les	di,[ES:DI+curdir.devptr]
 27363                                  	;call	POINTCOMP
 27364                                  	;pop	di
 27365                                  	;pop	es
 27366                                  	;jnz	short frcd25
 27367                                  
 27368                                  	; MSDOS 6.0
 27369 00005BEF 263B7545                	cmp	si,[ES:DI+curdir.devptr]
 27370 00005BF3 7512                    	jne	short frcd25		; no match
 27371 00005BF5 8CDB                    	mov	bx,ds
 27372 00005BF7 263B5D47                	cmp	bx,[ES:DI+curdir.devptr+2]
 27373 00005BFB 750A                    	jne	short frcd25		; CDS not for this drive
 27374                                  
 27375                                  	; MSDOS 3.3 (& MSDOS 6.0)
 27376                                  	;test	[es:di+49h],ax
 27377 00005BFD 26854549                	test	[ES:DI+curdir.ID],AX
 27378 00005C01 7404                    	JZ	short frcd25		; If root (0), leave root
 27379                                  	;mov	[es:di+49h],ax
 27380 00005C03 26894549                	MOV	[ES:DI+curdir.ID],AX	; else invalid
 27381                                  frcd25:	
 27382                                  	;add	di,81
 27383 00005C07 83C751                  	ADD	DI,curdir.size		; Point to next CDS
 27384 00005C0A E2DB                    	LOOP	frcd20
 27385 00005C0C 1F                      	POP	DS
 27386                                  NO_CHANGE:
 27387 00005C0D C42E[2405]              	LES	BP,[THISDPB]
 27388 00005C11 F8                      	CLC
 27389 00005C12 C3                      	retn
 27390                                  
 27391                                  ;Break	<Fat_Operation - miscellaneous fat stuff>
 27392                                  ;----------------------------------------------------------------------------
 27393                                  ;
 27394                                  ; Procedure Name : FAT_operation
 27395                                  ;
 27396                                  ;----------------------------------------------------------------------------
 27397                                  FAT_operation:
 27398                                  	; 31/07/2018 - Retro DOS v3.0
 27399                                  FATERR:
 27400                                  	;mov	word [es:bp+1Eh],-1
 27401 00005C13 26C7461EFFFF            	MOV	word [ES:BP+DPB.FREE_CNT],-1 
 27402                                  					; Err in FAT must force recomp of freespace
 27403                                  	;and	di,0FFh
 27404 00005C19 81E7FF00                	AND	DI,STECODE		; Put error code in DI
 27405                                  	;mov	byte [ALLOWED],18h
 27406 00005C1D C606[F702]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 27407                                  	;mov	ah,1Ah
 27408 00005C22 B41A                    	MOV	AH,2+Allowed_FAIL+Allowed_RETRY ; While trying to read FAT
 27409 00005C24 A0[1105]                	MOV	AL,[THISDRV]		; Tell which drive
 27410 00005C27 E870FC                  	call	FATAL1
 27411 00005C2A C42E[2405]              	LES	BP,[THISDPB]
 27412 00005C2E 3C03                    	CMP	AL,3
 27413 00005C30 7502                    	JNZ	short FAT_GOT_DPB	; User said retry
 27414 00005C32 F9                      	STC				; User said FAIL
 27415 00005C33 C3                      	retn
 27416                                  
 27417                                  FAT_GOT_DPB:
 27418                                  	;Context DS			;hkn; SS is DOSDATA
 27419 00005C34 16                      	push	ss			
 27420 00005C35 1F                      	pop	ds
 27421                                  	;mov	al,0Fh
 27422 00005C36 B00F                    	MOV	AL,DMEDHL
 27423                                  	;mov	al,[es:bp+1]
 27424 00005C38 268A6601                	MOV	AH,[ES:BP+DPB.UNIT] 
 27425 00005C3C A3[0603]                	MOV	[DEVCALL_REQLEN],AX ; 09/09/2018 
 27426 00005C3F C606[0803]01            	MOV	BYTE [DEVCALL_REQFUNC],DEVMDCH
 27427 00005C44 C706[0903]0000          	MOV	word [DEVCALL_REQSTAT],0
 27428                                  	;mov	al,[es:bp+16h]
 27429 00005C4A 268A4616                	MOV	AL,[ES:BP+DPB.MEDIA]
 27430 00005C4E A2[1303]                	MOV	[CALLMED],AL
 27431 00005C51 06                      	PUSH	ES
 27432 00005C52 1E                      	PUSH	DS
 27433                                  
 27434                                  ;hkn; DEVCALL is in DOSDATA
 27435 00005C53 BB[0603]                	MOV	BX,DEVCALL
 27436                                  	;lds	si,[es:bp+12h]
 27437 00005C56 26C57612                	LDS	SI,[ES:BP+DPB.DRIVER_ADDR] ; DS:SI Points to device header
 27438 00005C5A 07                      	POP	ES			; ES:BX Points to call header
 27439 00005C5B E89CF2                  	call	DEVIOCALL2
 27440                                  	;Context DS		 	;hkn; SS is DOSDATA
 27441 00005C5E 16                      	push	ss
 27442 00005C5F 1F                      	pop	ds
 27443 00005C60 07                      	POP	ES			; Restore ES:BP
 27444 00005C61 8B3E[0903]              	MOV	DI,[DEVCALL_REQSTAT]
 27445                                  	;test	di,8000h
 27446                                  	;jnz	short FATERR
 27447 00005C65 09FF                    	or	di,di
 27448 00005C67 78AA                    	js	short FATERR		; have error
 27449 00005C69 30E4                    	XOR	AH,AH
 27450                                  	;xchg	ah,[es:bp+17h]
 27451 00005C6B 26866617                	XCHG	AH,[ES:BP+DPB.FIRST_ACCESS] ; Reset dpb_first_access
 27452 00005C6F A0[1105]                	MOV	AL,[THISDRV]		; Use physical unit number
 27453                                  ; See if we had changed volume id by creating one on the diskette
 27454 00005C72 3806[070A]              	cmp	[VOLCHNG_FLAG],AL
 27455 00005C76 7508                    	jnz	short CHECK_BYT
 27456 00005C78 C606[070A]FF            	mov	byte [VOLCHNG_FLAG],-1
 27457 00005C7D E98800                  	jmp	GOGETBPB		; Need to get device driver to read in
 27458                                  					; new volume label.
 27459                                  CHECK_BYT:
 27460 00005C80 0A26[1403]              	OR	AH,[CALLRBYT]
 27461                                  	;JNS	short CHECK_ZR		; ns = 0 or 1
 27462                                  	;JMP	short NEWDSK
 27463 00005C84 785D                    	js	short NEWDSK
 27464                                  
 27465                                  CHECK_ZR:
 27466 00005C86 743D                    	JZ	short CHKBUFFDIRT	; jump if I don't know
 27467 00005C88 F8                      	CLC
 27468 00005C89 C3                      	retn				; If Media not changed (NZ)
 27469                                  
 27470                                  DISK_CHNG_ERR:
 27471 00005C8A 06                      	PUSH	ES
 27472 00005C8B 55                      	PUSH	BP
 27473                                  	;les	bp,[es:bp+12h]
 27474 00005C8C 26C46E12                	LES	BP,[ES:BP+DPB.DRIVER_ADDR] ; Get device pointer
 27475                                  	;test	word [es:bp+4],800h
 27476 00005C90 26F746040008            	TEST	word [ES:BP+SYSDEV.ATT],DEVOPCL ; Did it set vol id?
 27477 00005C96 5D                      	POP	BP
 27478 00005C97 07                      	POP	ES
 27479 00005C98 7426                    	JZ	short FAIL_OPJ2		; Nope, FAIL
 27480 00005C9A 1E                      	PUSH	DS			; Save buffer pointer for ignore
 27481 00005C9B 57                      	PUSH	DI
 27482 00005C9C 16                      	push	ss			;hkn; SS is DOSDATA
 27483 00005C9D 1F                      	pop	ds
 27484                                  	;mov	byte [ALLOWED],18h
 27485 00005C9E C606[F702]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 27486 00005CA3 06                      	PUSH	ES
 27487 00005CA4 C43E[1503]              	LES	DI,[CALLVIDM]		; Get volume ID pointer
 27488 00005CA8 8C06[D802]              	MOV	[EXTERRPT+2],ES
 27489 00005CAC 07                      	POP	ES
 27490 00005CAD 893E[D602]              	MOV	[EXTERRPT],DI
 27491                                  	;mov	ax,0Fh
 27492 00005CB1 B80F00                  	MOV	AX,error_I24_wrong_disk
 27493 00005CB4 C606[1005]01            	MOV	byte [READOP],1		; Write
 27494                                  	;invoke	HARDERR
 27495 00005CB9 E88CFB                  	call	HARDERR
 27496 00005CBC 5F                      	POP	DI			; Get back buffer for ignore
 27497 00005CBD 1F                      	POP	DS
 27498 00005CBE 3C03                    	CMP	AL,3
 27499                                  FAIL_OPJ2:
 27500 00005CC0 7416                    	JZ	short FAIL_OP
 27501 00005CC2 E96FFF                  	JMP	FAT_GOT_DPB		; Retry
 27502                                  
 27503                                  CHKBUFFDIRT:
 27504                                  	; MSDOS 6.0
 27505                                  	;cmp	word [DirtyBufferCount],0	; any dirty buffers ? ;hkn;
 27506                                  	;je	short NEWDSK			; no, skip the check
 27507                                  	;call	GetCurHead			; get pointer to first buffer
 27508                                  
 27509                                  	; MSDOS 3.3
 27510 00005CC5 C53E[3800]              	lds	di,[BUFFHEAD]
 27511                                  nbuffer:
 27512                                  	;cmp	al,[di+4]
 27513 00005CC9 384504                  	cmp	[di+BUFFINFO.buf_ID],al	; Unit OK ?
 27514 00005CCC 750E                    	jne	short lfnxt			; no, go for next buffer
 27515                                  	;test   byte [di+5],40h
 27516 00005CCE F6450540                	TEST	byte [di+BUFFINFO.buf_flags],buf_dirty	; is the buffer dirty ?
 27517 00005CD2 7408                    	jz	short lfnxt			; no, go for next buffer
 27518                                  	;Context DS
 27519 00005CD4 16                      	push	ss
 27520 00005CD5 1F                      	pop	ds
 27521 00005CD6 F8                      	clc
 27522 00005CD7 C3                      	retn
 27523                                  
 27524                                  FAIL_OP:					; This label & code is here
 27525                                  	;Context DS				;  for reachability
 27526 00005CD8 16                      	push	ss
 27527 00005CD9 1F                      	pop	ds
 27528 00005CDA F9                      	STC
 27529 00005CDB C3                      	retn
 27530                                  
 27531                                  lfnxt:
 27532                                  	; 15/08/2018
 27533                                  	;mov	di,[di]
 27534                                  	;mov	di,[di+BUFFINFO.buf_next]	; get next buffer
 27535                                  	;
 27536 00005CDC C53D                    	lds	di,[di]
 27537                                  	;
 27538                                  	; MSDOS 6.0
 27539                                  	;cmp	[FIRST_BUFF_ADDR],di		; is this where we started ?;hkn;
 27540                                  	;jne	short nbuffer			; no, check this guy also
 27541                                  	; MSDOS 3.3
 27542 00005CDE 83FFFF                  	cmp	di,-1
 27543 00005CE1 75E6                    	jne	short nbuffer
 27544                                  
 27545                                  ; If no dirty buffers, assume Media changed
 27546                                  NEWDSK:
 27547                                  	;mov	word [es:bp+1Eh],0FFFFh
 27548 00005CE3 26C7461EFFFF            	mov	word [ES:BP+DPB.FREE_CNT],-1	; Media changed, must
 27549                                  	; MSDOS 6.0				;  recompute
 27550                                  	;call	GetCurHead
 27551                                  	; MSDOS 3.3
 27552 00005CE9 E8B500                  	call	SETVISIT
 27553                                  nxbuffer:
 27554                                  	; MSDOS 3.3
 27555 00005CEC 804D0520                	or 	byte [di+5],20h
 27556                                  	; MSDOS 3.3 (& MSDOS 6.0)
 27557                                  	;cmp	[di+4],al
 27558 00005CF0 384504                  	cmp	[DI+BUFFINFO.buf_ID],al		; This drive ?
 27559 00005CF3 750E                    	jne	short lfnxt2
 27560                                  	;test	byte [di+5],40h
 27561 00005CF5 F6450540                	TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty
 27562 00005CF9 758F                    	jnz	short DISK_CHNG_ERR
 27563                                  	;mov	word [di+4],20FFh
 27564 00005CFB C74504FF20              	mov	word [DI+BUFFINFO.buf_ID],(buf_visit*256)+0FFh ; free up
 27565 00005D00 E8CB00                  	call	SCANPLACE
 27566                                  	; MSDOS 6.0
 27567                                  	;jmp	short skpbuff
 27568                                  ;lfnxt2:
 27569                                  	;;mov	di,[di+BUFFINFO.buf_next]
 27570                                  	;mov	di,[di]
 27571                                  ;skpbuff:
 27572                                  	;cmp	di,[FIRST_BUFF_ADDR]					;hkn;
 27573                                  	;jne	short nxbuffer
 27574                                  
 27575                                  	;CMP	word [SC_CACHE_COUNT],0	;LB.  look ahead buffers ?	;AN001;
 27576                                  	;JZ	short GOGETBPB		;LB.  no			;AN001;
 27577                                  	;CMP	AL,[CURSC_DRIVE]	;LB.  same as changed drive	;AN001;
 27578                                  	;JNZ	short GOGETBPB		;LB.  no			;AN001;
 27579                                  	;MOV	byte [CURSC_DRIVE],-1	;LB.  invalidate look ahead buffers ;AN000;
 27580                                  lfnxt2:
 27581                                  	; MSDOS 3.3
 27582 00005D03 E8B400                  	call	SKIPVISIT
 27583 00005D06 75E4                    	jnz	short nxbuffer
 27584                                  GOGETBPB:
 27585                                  	;lds	di,[es:bp+12h]
 27586 00005D08 26C57E12                	LDS	DI,[ES:BP+DPB.DRIVER_ADDR]
 27587                                  	;test	word [di+4],2000h
 27588 00005D0C F745040020              	TEST	word [DI+SYSDEV.ATT],ISFATBYDEV
 27589 00005D11 7510                    	JNZ	short GETFREEBUF
 27590                                  	;context DS	    		;hkn; SS is DOSDATA
 27591 00005D13 16                      	push	ss
 27592 00005D14 1F                      	pop	ds
 27593 00005D15 BB0200                  	MOV	BX,2
 27594 00005D18 E832FD                  	CALL	UNPACK			; Read the first FAT sector into CURBUF
 27595                                  FAIL_OPJ:
 27596 00005D1B 72BB                    	JC	short FAIL_OP
 27597 00005D1D C53E[7405]              	LDS	DI,[CURBUF]
 27598 00005D21 EB0E                    	JMP	SHORT GOTGETBUF
 27599                                  
 27600                                  GETFREEBUF:
 27601 00005D23 06                      	PUSH	ES			; Get a free buffer for BIOS to use
 27602 00005D24 55                      	PUSH	BP
 27603                                  	; MSDOS 3.3
 27604 00005D25 36C53E[3800]            	LDS	DI,[SS:BUFFHEAD] ; 15/08/2018
 27605                                  	; MSDOS 6.0
 27606                                  	;XOR	DX,DX			;LB.  fake to get 1st	  ;AN000;
 27607                                  ;hkn; SS override
 27608                                  	;MOV	[SS:HIGH_SECTOR],DX	;LB.  buffer addr	  ;AN000;
 27609                                  	;call	GETCURHEAD		;LB.			  ;AN000;
 27610                                  	; MSDOS 3.3 (& MSDOS 6.0)
 27611 00005D2A E84F02                  	call	BUFWRITE
 27612 00005D2D 5D                      	POP	BP
 27613 00005D2E 07                      	POP	ES
 27614                                  	;JC	short FAIL_OPJ
 27615 00005D2F 72A7                    	jc	short FAIL_OP
 27616                                  GOTGETBUF:
 27617                                  	;add	di,16
 27618 00005D31 83C710                  	ADD	DI,BUFINSIZ
 27619                                  
 27620                                  ;hkn; SS override
 27621 00005D34 368C1E[1603]            	MOV	[SS:CALLXAD+2],DS
 27622                                  	;Context DS			;hkn; SS is DOSDATA
 27623 00005D39 16                      	push	ss
 27624 00005D3A 1F                      	pop	ds
 27625 00005D3B 893E[1403]              	MOV	[CALLXAD],DI
 27626                                  	;mov	al,16h
 27627 00005D3F B016                    	MOV	AL,DBPBHL
 27628                                  	;mov	ah,[es:bp+1]
 27629 00005D41 268A6601                	MOV	AH,[ES:BP+DPB.UNIT]
 27630 00005D45 A3[0603]                	MOV	[DEVCALL_REQLEN],AX ; 09/09/2018
 27631 00005D48 C606[0803]02            	MOV	BYTE [DEVCALL_REQFUNC],DEVBPB
 27632 00005D4D C706[0903]0000          	MOV	word [DEVCALL_REQSTAT],0
 27633                                  	;mov	al,[es:bp+16h]
 27634 00005D53 268A4616                	MOV	AL,[ES:BP+DPB.MEDIA]
 27635 00005D57 A2[1303]                	MOV	[CALLMED],AL
 27636 00005D5A 06                      	PUSH	ES
 27637 00005D5B 1E                      	PUSH	DS
 27638                                  	;push	word [es:bp+14h]
 27639 00005D5C 26FF7614                	PUSH	WORD [ES:BP+DPB.DRIVER_ADDR+2]
 27640                                  	;push	word [es:bp+12h]
 27641 00005D60 26FF7612                	PUSH	WORD [ES:BP+DPB.DRIVER_ADDR]
 27642                                  
 27643                                  ;hkn; DEVCALL is in DOSDATA
 27644 00005D64 BB[0603]                	MOV	BX,DEVCALL
 27645 00005D67 5E                      	POP	SI
 27646 00005D68 1F                      	POP	DS			; DS:SI Points to device header
 27647 00005D69 07                      	POP	ES			; ES:BX Points to call header
 27648                                  	;invoke	DEVIOCALL2
 27649 00005D6A E88DF1                  	call	DEVIOCALL2
 27650 00005D6D 07                      	POP	ES			; Restore ES:BP
 27651                                  	;Context DS
 27652 00005D6E 16                      	push	ss		 	;hkn; SS is DOSDATA
 27653 00005D6F 1F                      	pop	ds
 27654 00005D70 8B3E[0903]              	MOV	DI,[DEVCALL_REQSTAT]
 27655                                  	; MSDOS 3.3
 27656                                  	;test	di,8000h
 27657                                  	;jnz	short FATERRJ
 27658                                  	; MSDOS 6.0
 27659 00005D74 09FF                    	or	di,di
 27660 00005D76 7826                    	js	short FATERRJ 		; have error
 27661                                  	;;mov	al,[es:bp+16h]
 27662 00005D78 268A4616                	MOV	AL,[ES:BP+DPB.MEDIA]
 27663 00005D7C C536[1803]              	LDS	SI,[CALLBPB]
 27664                                  	;mov	word [es:bp+1Ch],0
 27665 00005D80 26C7461C0000            	MOV	word [ES:BP+DPB.NEXT_FREE],0 ; recycle scanning pointer
 27666                                  	;invoke	$SETDPB
 27667 00005D86 E803C0                  	call	_$SETDPB
 27668                                  
 27669                                  ;hkn; SS override
 27670 00005D89 36C53E[1403]            	LDS	DI,[SS:CALLXAD]		; Get back buffer pointer
 27671                                  	;mov	al,[es:bp+8]
 27672 00005D8E 268A4608                	MOV	AL,[ES:BP+DPB.FAT_COUNT]
 27673                                  
 27674                                  	; MSDOS 6.0
 27675                                  	;MOV	[DI+BUFFINFO.buf_wrtcnt-BUFINSIZ],AL ;>32mb		  ;AN000;
 27676                                  	;MOV	AX,[ES:BP+DPB.FAT_SIZE]		;>32mb			  ;AC000;
 27677                                  	;MOV	[DI.buf_wrtcntinc-BUFINSIZ],AX ;>32mb Correct buffer info ;AC000;
 27678                                  
 27679                                  	; MSDOS 3.3
 27680                                  	;mov	ah,[es:bp+0Fh]
 27681 00005D92 268A660F                	MOV	AH,[ES:BP+DPB.FAT_SIZE]
 27682                                  	;mov	[DI-8],ax
 27683 00005D96 8945F8                  	MOV	[DI+BUFFINFO.buf_wrtcnt-BUFINSIZ],AX
 27684                                  
 27685                                  	;Context DS			;hkn; SS is DOSDATA
 27686 00005D99 16                      	push	ss
 27687 00005D9A 1F                      	pop	ds
 27688 00005D9B 30C0                    	XOR	AL,AL			;Media changed (Z), Carry clear
 27689 00005D9D C3                      	retn
 27690                                  
 27691                                  FATERRJ: 
 27692 00005D9E E972FE                  	JMP	FATERR
 27693                                  
 27694                                  
 27695                                  ;============================================================================
 27696                                  ; STDBUF.ASM
 27697                                  ;============================================================================
 27698                                  ; Retro DOS v2.0 - 12/03/2018
 27699                                  
 27700                                  ;
 27701                                  ; Standard buffer management for MSDOS
 27702                                  ;
 27703                                  
 27704                                  ;.xlist
 27705                                  ;.xcref
 27706                                  ;INCLUDE STDSW.ASM
 27707                                  ;.cref
 27708                                  ;.list
 27709                                  
 27710                                  ;TITLE	STDBUF - MSDOS buffer management
 27711                                  ;NAME	STDBUF
 27712                                  
 27713                                  ;INCLUDE BUF.ASM
 27714                                  
 27715                                  ;============================================================================
 27716                                  ; BUF.ASM
 27717                                  ;============================================================================
 27718                                  ; 31/07/2018 - Retro DOS v3.0
 27719                                  ; Retro DOS v2.0 - 12/03/2018
 27720                                  
 27721                                  ;
 27722                                  ; buffer management for MSDOS
 27723                                  ;
 27724                                  
 27725                                  ;CODE	SEGMENT BYTE PUBLIC  'CODE'
 27726                                  ;       ASSUME  SS:DOSGROUP,CS:DOSGROUP
 27727                                  
 27728                                  ;SUBTTL SETVISIT,SKIPVISIT -- MANAGE BUFFER SCANS
 27729                                  
 27730                                  SETVISIT:
 27731                                  	; 31/07/2018 - Retro DOS v3.0
 27732                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5CAFh
 27733                                  ; Inputs:
 27734                                  ;       None
 27735                                  ; Function:
 27736                                  ;       Set up a scan of I/O buffers
 27737                                  ; Outputs:
 27738                                  ;       All visit flags = 0
 27739                                  ;               NOTE: This pre-scan is needed because a hard disk error
 27740                                  ;                     may cause a scan to stop in the middle leaving some
 27741                                  ;                     visit flags set, and some not set.
 27742                                  ;       DS:DI Points to [BUFFHEAD]
 27743                                  ; No other registers altered
 27744                                  
 27745 00005DA1 36C53E[3800]                    LDS     DI,[SS:BUFFHEAD] ; 15/03/2018
 27746 00005DA6 50                      	PUSH    AX
 27747                                          ;;XOR	AX,AX	  ;; MSDOS 2.11
 27748                                  	;mov	al,0DFh
 27749 00005DA7 B0DF                    	mov	al,~buf_visit
 27750                                  SETLOOP:
 27751                                          ;;MOV	[DI+7],AL ;; MSDOS 2.11
 27752                                  	;and	[DI+5],al
 27753 00005DA9 204505                  	AND	[DI+BUFFINFO.buf_flags],AL
 27754 00005DAC C53D                            LDS     DI,[DI]
 27755 00005DAE 83FFFF                          CMP     DI,-1
 27756 00005DB1 75F6                            JNZ     SHORT SETLOOP
 27757 00005DB3 58                              POP     AX ; 09/09/2018
 27758 00005DB4 36C53E[3800]            	LDS     DI,[SS:BUFFHEAD] ; 15/03/2018
 27759                                  SVISIT_RETN:
 27760 00005DB9 C3                              RETN
 27761                                  
 27762                                  SKIPVISIT:
 27763                                  	; 31/07/2018 - Retro DOS v3.0
 27764                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5CC8h
 27765                                  
 27766                                  ; Inputs:
 27767                                  ;       DS:DI Points to a buffer
 27768                                  ; Function:
 27769                                  ;       Skip visited buffers
 27770                                  ; Outputs:
 27771                                  ;       DS:DI Points to next unvisited buffer
 27772                                  ;       Zero is set if skip to LAST buffer
 27773                                  ; No other registers altered
 27774                                  
 27775 00005DBA 83FFFF                          CMP     DI,-1
 27776                                          ;retz
 27777 00005DBD 74FA                            JZ	SHORT SVISIT_RETN
 27778                                  
 27779                                  	;;CMP	BYTE [DI+7],1 ;; MSDOS 2.11
 27780                                          ;;;retnz
 27781                                          ;;JNZ	SHORT SVISIT_RETN
 27782                                  
 27783                                  	;test	byte [di+5],20h
 27784 00005DBF F6450520                	TEST	byte [DI+BUFFINFO.buf_flags],buf_visit	
 27785 00005DC3 7505                    	JNZ	short SKIPLOOP
 27786                                  	
 27787 00005DC5 50                      	push	ax
 27788 00005DC6 0C01                    	or	al,1
 27789 00005DC8 58                      	pop	ax
 27790 00005DC9 C3                      	retn	
 27791                                  
 27792                                  SKIPLOOP:
 27793 00005DCA C53D                    	LDS     DI,[DI]
 27794 00005DCC EBEC                            JMP     SHORT SKIPVISIT
 27795                                  
 27796                                  ;============================================================================
 27797                                  ; BUF.ASM, MSDOS 6.0, 1991
 27798                                  ;============================================================================
 27799                                  ; 31/07/2018 - Retro DOS v3.0
 27800                                  
 27801                                  ;	TITLE	BUF - MSDOS buffer management
 27802                                  ;	NAME	BUF
 27803                                  
 27804                                  ;**	BUF.ASM - Low level routines for buffer cache management
 27805                                  ;
 27806                                  ;	GETCURHEAD
 27807                                  ;	ScanPlace
 27808                                  ;	PLACEBUF
 27809                                  ;	PLACEHEAD
 27810                                  ;	PointComp
 27811                                  ;	GETBUFFR
 27812                                  ;	GETBUFFRB
 27813                                  ;	FlushBuf
 27814                                  ;	BufWrite
 27815                                  ;	SET_RQ_SC_PARMS
 27816                                  ;
 27817                                  ;	Revision history:
 27818                                  ;
 27819                                  ;		AN000  version 4.00  Jan. 1988
 27820                                  ;		A004   PTM 3765 -- Disk reset failed
 27821                                  ;		M039 DB 10/17/90 - Disk write optimization
 27822                                  ;		I001   5.0 PTR 722211 - Preserve CY when in buffer in HMA
 27823                                  
 27824                                  ;Break	<GETCURHEAD -- Get current buffer header>
 27825                                  ;----------------------------------------------------------------------------
 27826                                  ; Procedure Name : GetCurHead
 27827                                  ; Inputs:
 27828                                  ;	 No Inputs
 27829                                  ; Function:
 27830                                  ;	Returns the pointer to the first buffer in Queue
 27831                                  ;	and updates FIRST_BUFF_ADDR
 27832                                  ;       and invalidates LASTBUFFER (recency pointer)
 27833                                  ; Outputs:
 27834                                  ;	DS:DI = pointer to the first buffer in Queue
 27835                                  ;	FIRST_BUFF_ADDR = offset ( DI ) of First buffer in Queue
 27836                                  ;       LASTBUFFER = -1
 27837                                  ; No other registers altered
 27838                                  ;----------------------------------------------------------------------------
 27839                                  
 27840                                  ;procedure   GETCURHEAD,NEAR
 27841                                  ;
 27842                                  ;	lds	di, BufferQueue		; Pointer to the first buffer;smr;SS Override
 27843                                  ;	mov	word ptr [LastBuffer],-1; invalidate last buffer;smr;SS Override
 27844                                  ;	mov	[FIRST_BUFF_ADDR],di	;save first buffer addr;smr;SS Override
 27845                                  ;	ret
 27846                                  ;
 27847                                  ;EndProc GETCURHEAD
 27848                                  
 27849                                  ;Break	<SCANPLACE, PLACEBUF -- PUT A BUFFER BACK IN THE POOL>
 27850                                  ;----------------------------------------------------------------------------
 27851                                  ; Procedure Name : ScanPlace
 27852                                  ; Inputs:
 27853                                  ;	Same as PLACEBUF
 27854                                  ; Function:
 27855                                  ;	Save scan location and call PLACEBUF
 27856                                  ; Outputs:
 27857                                  ;	DS:DI Points to saved scan location
 27858                                  ; All registers, except DS:DI, preserved.
 27859                                  ;----------------------------------------------------------------------------
 27860                                  ;M039: Rewritten to preserve registers.
 27861                                  
 27862                                  SCANPLACE:
 27863                                  	; 31/07/2018 - Retro DOS v3.0
 27864                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5DDCh
 27865 00005DCE 06                      	push	es
 27866 00005DCF C435                    	les	si,[di]
 27867                                  	;les	si,[DI+BUFFINFO.buf_link]
 27868 00005DD1 E80600                  	call	PLACEBUF
 27869 00005DD4 06                      	push	es
 27870 00005DD5 1F                      	pop	ds
 27871 00005DD6 89F7                    	mov	di,si
 27872 00005DD8 07                      	pop	es
 27873                                  scanplace_retn:
 27874 00005DD9 C3                      	retn	
 27875                                  	
 27876                                  	; MSDOS 6.0
 27877                                  ;ScanPlace:
 27878                                  	;push	[di].buf_next		;Save scan location
 27879                                  	;call	PLACEBUF
 27880                                  	;pop	di
 27881                                  	;retn
 27882                                  
 27883                                  ;----------------------------------------------------------------------------
 27884                                  ; Procedure Name : PlaceBuf
 27885                                  ; Input:
 27886                                  ;	DS:DI points to buffer (DS->BUFFINFO array, DI=offset in array)
 27887                                  ; Function:
 27888                                  ;	Remove buffer from queue and re-insert it in proper place.
 27889                                  ; NO registers altered
 27890                                  ;----------------------------------------------------------------------------
 27891                                  
 27892                                  ;procedure   PLACEBUF,NEAR
 27893                                  
 27894                                  ;PLACEBUF:
 27895                                  	; 31/07/2018 - Retro DOS v3.0
 27896                                  
 27897                                  	; MSDOS 6.0
 27898                                  	;push	AX			;Save only regs we modify	;AN000;
 27899                                  	;push	BX							;AN000;
 27900                                  	;push	SI							;AN000;
 27901                                  	;mov	ax, [di].BUF_NEXT
 27902                                  	;mov	bx, word ptr[BufferQueue]	; bx = offset of head of list;smr;SS Override
 27903                                  	;
 27904                                  	;cmp	ax,bx				;Buf = last?		;AN000;
 27905                                  	;je	nret				;Yes, special case	;AN000;
 27906                                  	;cmp	di,bx				;Buf = first?		;AN000;
 27907                                  	;jne	not_first 			;Yes, special case	;AN000;
 27908                                  	;mov	word ptr [BufferQueue],ax	;smr;SS Override
 27909                                  	;jmp	short nret 			;Continue with repositioning;AN000;
 27910                                  ;not_first:
 27911                                  	;mov	SI,[DI].BUF_PREV		;No, SI = prior Buf	;AN000;
 27912                                  	;mov	[SI].BUF_NEXT,AX		; ax has di->buf_next	;AN000;
 27913                                  	;xchg	si, ax
 27914                                  	;mov	[SI].BUF_PREV,AX		;			;AN000;
 27915                                  	;
 27916                                  	;mov	SI,[BX].BUF_PREV		;SI-> last buffer	;AN000;
 27917                                  	;mov	[SI].BUF_NEXT,DI		;Add Buf to end of list ;AN000;
 27918                                  	;mov	[BX].BUF_PREV,DI					;AN000;
 27919                                  	;mov	[DI].BUF_PREV,SI		;Update link in Buf too	;AN000;
 27920                                  	;mov	[DI].BUF_NEXT,BX					;AN000;
 27921                                  ;nret:									;AN000;
 27922                                  	;pop	SI							;AN000;
 27923                                  	;pop	BX							;AN000;
 27924                                  	;pop	AX							;AN000;
 27925                                  	;								;AN000;
 27926                                  	;cmp	[di.buf_ID],-1			; Buffer FREE?		;AN000;
 27927                                          ;jne	pbx                             ; M039: -no, jump.
 27928                                  	;mov	WORD PTR [BufferQueue],di	; M039: -yes, make it LRU.
 27929                                  ;pbx:	
 27930                                  ;	ret								;AN000;
 27931                                  
 27932                                  	; 31/07/2018 - Retro DOS v3.0
 27933                                  
 27934                                  	; MSDOS 3.3
 27935                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5DDCh
 27936                                  
 27937                                  PLACEBUF:
 27938                                  	; 15/03/2018 - Retro DOS v2.0 (MSDOS 2.11)
 27939                                  	
 27940 00005DDA E81BB8                          CALL	save_world
 27941 00005DDD C40D                            LES     CX,[DI]
 27942 00005DDF 83F9FF                          CMP     CX,-1           	; Buf is LAST?
 27943 00005DE2 744B                            JZ      SHORT NRET		; Buffer already last
 27944 00005DE4 8CC5                            MOV     BP,ES           	; Pointsave = Buf.nextbuf
 27945 00005DE6 1E                              PUSH    DS
 27946 00005DE7 07                              POP     ES              	; Buf is ES:DI
 27947                                  	; 15/03/2018
 27948 00005DE8 36C536[3800]                    LDS     SI,[SS:BUFFHEAD] 	; Curbuf = HEAD
 27949 00005DED E88600                          CALL    POINTCOMP       	; Buf == HEAD?
 27950 00005DF0 750C                            JNZ     SHORT BUFLOOP
 27951 00005DF2 36890E[3800]                    MOV     [SS:BUFFHEAD],CX
 27952 00005DF7 36892E[3A00]                    MOV     [SS:BUFFHEAD+2],BP	; HEAD = Pointsave
 27953 00005DFC EB14                            JMP     SHORT LOOKEND
 27954                                  
 27955                                  BUFLOOP:
 27956                                  	; 31/07/2018
 27957 00005DFE 8CD8                    	mov	ax,ds
 27958 00005E00 89F3                    	mov	bx,si
 27959                                  	;lds	si,[SI+BUFFINFO.buf_link]
 27960 00005E02 C534                            LDS     SI,[SI]
 27961 00005E04 E86F00                          CALL    POINTCOMP
 27962 00005E07 75F5                            jnz	short BUFLOOP
 27963                                  	;
 27964 00005E09 8ED8                    	mov	ds,ax
 27965 00005E0B 89DE                    	mov	si,bx
 27966 00005E0D 890C                    	mov	[SI],cx
 27967                                  	;mov	[SI+BUFFINFO.buf_link],cx   ; If Curbuf.nextbuf == buf
 27968 00005E0F 896C02                  	mov	[SI+2],bp
 27969                                  	;mov	[BX+BUFFINFO.buf_link+2],bp ; Curbuf.nextbuf = Pointsave
 27970                                  LOOKEND:
 27971 00005E12 8CD8                    	mov	ax,ds
 27972 00005E14 89F3                    	mov	bx,si
 27973 00005E16 C534                            LDS     SI,[SI]
 27974 00005E18 83FEFF                          CMP     SI,-1
 27975 00005E1B 75F5                            jnz     short LOOKEND
 27976                                  
 27977                                  GOTHEEND:
 27978 00005E1D 8ED8                            mov	ds,ax
 27979 00005E1F 893F                    	mov	[BX],di
 27980 00005E21 8C4702                          MOV     [BX+2],ES 		; Curbuf.nextbuf = Buf
 27981 00005E24 26C705FFFF                      MOV     WORD [ES:DI],-1
 27982                                  	;mov	word [ES:DI+BUFFINFO.buf_link],-1
 27983 00005E29 26C74502FFFF                    MOV     WORD [ES:DI+2],-1 	; Buf is LAST
 27984                                  	;mov	word [ES:DI+BUFFINFO.buf_link+2],-1
 27985                                  NRET:
 27986 00005E2F E8B3B7                          CALL	restore_world
 27987                                  	
 27988                                  	;cmp	byte [di+4],-1
 27989 00005E32 807D04FF                	cmp	byte [DI+BUFFINFO.buf_ID],-1  ; Free buffer ?
 27990 00005E36 75A1                    	jnz     short scanplace_retn
 27991 00005E38 E80100                  	call    PLACEHEAD
 27992 00005E3B C3                      	retn
 27993                                  
 27994                                  ;EndProc PLACEBUF
 27995                                  
 27996                                  ;M039 - Removed PLACEHEAD.
 27997                                  ;----------------------------------------------------------------------------
 27998                                  ; places buffer at head
 27999                                  ;  NOTE:::::: ASSUMES THAT BUFFER IS CURRENTLY THE LAST
 28000                                  ;	ONE IN THE LIST!!!!!!!
 28001                                  ; BUGBUG ---- this routine can be removed because it has only
 28002                                  ; BUGBUG ---- one instruction. This routine is called from
 28003                                  ; BUGBUG ---- 3 places. ( Size = 3*3+6 = 15 bytes )
 28004                                  ; BUGBUG ---- if coded in line = 3 * 5 = 15 bytes
 28005                                  ; BUGBUG ---- But kept as it is for modularity
 28006                                  ;----------------------------------------------------------------------------
 28007                                  ;procedure   PLACEHEAD,NEAR
 28008                                  ;	mov	word ptr [BufferQueue], di
 28009                                  ;	ret
 28010                                  ;EndProc PLACEHEAD
 28011                                  ;M039
 28012                                  
 28013                                  ;----------------------------------------------------------------------------
 28014                                  ; Procedure Name : PLACEHEAD
 28015                                  ;
 28016                                  ; SAME AS PLACEBUF except places buffer at head
 28017                                  ;----------------------------------------------------------------------------
 28018                                  
 28019                                  	; MSDOS 3.3 (Retro DOS v3.0)
 28020                                  	; 05/09/2018
 28021                                  	; MSDOS 2.11 (Retro DOS v2.0)
 28022                                  PLACEHEAD:
 28023                                  	; 31/07/2018 - Retro DOS v3.0
 28024                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5D4Ah
 28025                                  
 28026 00005E3C E8B9B7                          CALL	save_world
 28027 00005E3F 1E                              PUSH	DS
 28028 00005E40 07                              POP	ES
 28029                                  	; 15/03/2018 - Retro DOS v2.0 (MSDOS 2.11)
 28030 00005E41 36C536[3800]                    LDS     SI,[SS:BUFFHEAD]
 28031                                  	; 31/07/2018 - Retro DOS v3.0 (MSDOS 3.3)
 28032 00005E46 E82D00                  	CALL    POINTCOMP
 28033 00005E49 7427                            JZ      SHORT GOTHEEND2
 28034 00005E4B 268935                  	MOV	[ES:DI],SI
 28035                                  	;mov	[ES:DI+BUFFINFO.buf_link],si
 28036 00005E4E 268C5D02                        MOV	[ES:DI+2],DS
 28037                                  	;mov	[ES:DI+BUFFINFO.buf_link+2],ds
 28038 00005E52 36893E[3800]                    MOV	[SS:BUFFHEAD],DI
 28039 00005E57 368C06[3A00]                    MOV	[SS:BUFFHEAD+2],ES
 28040                                  LOOKEND2:
 28041 00005E5C 8CD8                            mov	ax,ds
 28042 00005E5E 89F3                    	mov	bx,si
 28043                                  	;lds	si,[SI+BUFFINFO.buf_link]
 28044 00005E60 C534                            LDS     SI,[SI]
 28045 00005E62 E81100                          CALL    POINTCOMP
 28046 00005E65 75F5                            JNZ	SHORT LOOKEND2 ; 05/09/2018
 28047 00005E67 8ED8                            mov	ds,ax
 28048 00005E69 C707FFFF                	mov	word [bx],-1
 28049                                  	;mov	word [BX+BUFFINFO.buf_link],-1
 28050 00005E6D C74702FFFF              	mov	word [bx+2],-1
 28051                                  	;mov	word [BX+BUFFINFO.buf_link+2],-1
 28052                                  GOTHEEND2:
 28053 00005E72 E870B7                         	call	restore_world
 28054                                  placehead_retn:
 28055 00005E75 C3                      	retn
 28056                                  
 28057                                  ;Break	<POINTCOMP -- 20 BIT POINTER COMPARE>
 28058                                  ;----------------------------------------------------------------------------
 28059                                  ;
 28060                                  ; Procedure Name : PointComp
 28061                                  ; Inputs:
 28062                                  ;         DS:SI & ES:DI
 28063                                  ; Function:
 28064                                  ;          Checks for ((SI==DI) && (ES==DS))
 28065                                  ;	   Assumes that pointers are normalized for the
 28066                                  ;	   same segment
 28067                                  ;
 28068                                  ; Compare DS:SI to ES:DI (or DS:DI to ES:SI) for equality
 28069                                  ; DO NOT USE FOR < or >
 28070                                  ; No Registers altered
 28071                                  ;
 28072                                  ;----------------------------------------------------------------------------
 28073                                  
 28074                                  POINTCOMP:
 28075                                  	; 31/07/2018 - Retro DOS v3.0
 28076                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5D84h
 28077 00005E76 39FE                    	CMP	SI,DI
 28078                                  	;jnz	short _ret_label	; return if nz
 28079 00005E78 75FB                    	jnz	short placehead_retn 
 28080 00005E7A 51                      	PUSH	CX
 28081 00005E7B 52                      	PUSH	DX
 28082 00005E7C 8CD9                    	MOV	CX,DS
 28083 00005E7E 8CC2                    	MOV	DX,ES
 28084 00005E80 39D1                    	CMP	CX,DX
 28085 00005E82 5A                      	POP	DX
 28086 00005E83 59                      	POP	CX
 28087                                  ;_ret_label:
 28088 00005E84 C3                      	retn
 28089                                  
 28090                                  
 28091                                  ; 01/08/2018 - Retro DOS v3.0
 28092                                  ; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5D93h 
 28093                                  
 28094                                  ;Break	<GETBUFFR, GETBUFFRB -- GET A SECTOR INTO A BUFFER>
 28095                                  
 28096                                  ;**	GetBuffr - Get a non-FAT Sector into a Buffer
 28097                                  ;----------------------------------------------------------------------------
 28098                                  ;	GetBuffr does normal ( non-FAT ) sector buffering
 28099                                  ;	It gets the specified local sector into one of the I/O buffers
 28100                                  ;	and shuffles the queue
 28101                                  ; 
 28102                                  ;	ENTRY	(AL) = 0 means sector must be pre-read
 28103                                  ;		       ELSE no pre-read
 28104                                  ;		(DX) = Desired physical sector number	      (LOW)
 28105                                  ;		HIGH_SECTOR = Desired physical sector number (HIGH)
 28106                                  ;		(ES:BP) = Pointer to drive parameters
 28107                                  ;		ALLOWED set in case of INT 24
 28108                                  ;	EXIT	'C' set if error (user FAIL response to INT24)
 28109                                  ;		'C' clear if OK
 28110                                  ;		CURBUF Points to the Buffer for the sector
 28111                                  ;		    the buffer type bits OF buf_flags = 0, caller must set it
 28112                                  ;	USES	AX, BX, CX, SI, DI, Flags
 28113                                  ;----------------------------------------------------------------------------
 28114                                  
 28115                                  ;**	GetBuffrb - Get a FAT Sector into a Buffer
 28116                                  ;----------------------------------------------------------------------------
 28117                                  ;	GetBuffr reads a sector from the FAT file system's FAT table.
 28118                                  ;	It gets the specified sector into one of the I/O buffers
 28119                                  ;	and shuffles the queue. We need a special entry point so that
 28120                                  ;	we can read the alternate FAT sector if the first read fails, also
 28121                                  ;	so we can mark the buffer as a FAT sector.
 28122                                  ; 
 28123                                  ;	ENTRY	(AL) = 0 means sector must be pre-read
 28124                                  ;		       ELSE no pre-read
 28125                                  ;		(DX) = Desired physical sector number	      (LOW)
 28126                                  ;		(SI) != 0
 28127                                  ;		HIGH_SECTOR = Desired physical sector number (HIGH)
 28128                                  ;		(ES:BP) = Pointer to drive parameters
 28129                                  ;		ALLOWED set in case of INT 24
 28130                                  ;	EXIT	'C' set if error (user FAIL response to INT24)
 28131                                  ;		'C' clear if OK
 28132                                  ;		CUR ddBUF Points to the Buffer for the sector
 28133                                  ;		    the buffer type bits OF buf_flags = 0, caller must set it
 28134                                  ;	USES	AX, BX, CX, SI, DI, Flags
 28135                                  ;----------------------------------------------------------------------------
 28136                                  
 28137                                  GETBUFFR:
 28138 00005E85 31F6                    	XOR	SI,SI
 28139                                  
 28140                                  ;	This entry point is called for FAT buffering with SI != 0
 28141                                  
 28142                                  GETBUFFRB:
 28143 00005E87 A3[2C05]                	MOV	[PREREAD],AX			; save pre-read flag
 28144 00005E8A 268A4600                	mov	al,[ES:BP]
 28145                                  	;MOV	AL,[ES:BP+DPB.DRIVE] ; mov al,[es:bp+0]
 28146 00005E8E C53E[1E00]              	LDS	DI,[LastBuffer]			; Get the recency pointer
 28147                                  	; MSDOS 6.0
 28148                                  ;hkn; SS override
 28149                                  	;MOV	CX,[SS:HIGH_SECTOR]		; F.C. >32mb		;AN000;
 28150                                  
 28151                                  ;	See if this is the buffer that was most recently returned.
 28152                                  ;	A big performance win if it is.
 28153                                  
 28154 00005E92 83FFFF                  	CMP	DI,-1				; Recency pointer valid?
 28155 00005E95 740A                    	je	short getb5			; No
 28156                                  	;cmp	dx,[di+6]
 28157 00005E97 3B5506                  	CMP	DX,[DI+BUFFINFO.buf_sector]
 28158 00005E9A 7505                    	JNZ	short getb5			; Wrong sector
 28159                                  	
 28160                                  	; MSDOS 6.0
 28161                                  	;CMP	CX,[DI+BUFFINFO.buf_sector+2]	; F.C. >32mb		;AN000;
 28162                                  	;JNZ	short getb5			; F.C. >32mb		;AN000;
 28163                                  	
 28164                                  	;cmp	al,[di+4]
 28165 00005E9C 3A4504                  	CMP	AL,[DI+BUFFINFO.buf_ID]
 28166 00005E9F 7474                    	JZ	getb35				; Just asked for same buffer
 28167                                  
 28168                                  ;	It's not the buffer most recently returned.  See if it's in the
 28169                                  ;	cache.
 28170                                  ;
 28171                                  ;	(cx:dx) = sector #
 28172                                  ;	(al) = drive #
 28173                                  ;	(si) = 0 iff non fat sector, != 0 if FAT sector read
 28174                                  ;	??? list may be incomplete ???
 28175                                  
 28176                                  getb5:	
 28177                                  	; MSDOS 6.0
 28178                                  	;CALL	GETCURHEAD			; get Q Head
 28179                                  	; MSDOS 3.3
 28180 00005EA1 36C53E[3800]            	lds	di,[SS:BUFFHEAD]
 28181                                  getb10:	
 28182                                  	;cmp	dx,[di+6]
 28183 00005EA6 3B5506                  	CMP	DX,[DI+BUFFINFO.buf_sector]
 28184 00005EA9 7505                    	jne	short getb12			; wrong sector lo
 28185                                  	
 28186                                  	; MSDOS 6.0
 28187                                  	;CMP	CX,[DI+BUFFINFO.buf_sector+2]
 28188                                  	;jne	short getb12			; wrong sector hi
 28189                                  	
 28190                                  	;cmp	al,[di+4]
 28191 00005EAB 3A4504                  	CMP	AL,[DI+BUFFINFO.buf_ID]
 28192 00005EAE 7450                    	je	short getb25 ; 05/09/2018	; Found the requested sector
 28193                                  getb12:	
 28194                                  	; MSDOS 6.0
 28195                                  	;mov	DI,[DI+BUFFINFO.BUF_NEXT]
 28196                                  	;cmp	DI,[SS:FIRST_BUFF_ADDR]		; back at the front again?
 28197                                  	;jne	short getb10			; no, continue looking
 28198                                  
 28199                                  	; MSDOS 3.3
 28200                                  	;mov	di,[DI]
 28201                                  	;mov	di,[DI+BUFFINFO.buf_link]
 28202                                  	;
 28203                                  	; 15/08/2018
 28204 00005EB0 C53D                    	lds	di,[di]
 28205                                  	;
 28206 00005EB2 83FFFF                  	cmp	di,-1 ; 0FFFFh
 28207 00005EB5 75EF                    	jne	short getb10
 28208 00005EB7 36C53E[3800]            	lds	di,[SS:BUFFHEAD]		
 28209                                  
 28210                                  ;	The requested sector is not available in the buffers. DS:DI now points
 28211                                  ;	to the first buffer in the Queue. Flush the first buffer & read in the
 28212                                  ;	new sector into it.
 28213                                  ;
 28214                                  ;	BUGBUG - what goes on here? Isn't the first guy the most recently
 28215                                  ;	used guy? Shuld be for fast lookup. If he is, we shouldn't take
 28216                                  ;	him, we should take LRU. And the above lookup shouldn't be
 28217                                  ;	down a chain, but should be hashed.
 28218                                  ;
 28219                                  ;	(DS:DI) = first buffer in the queue
 28220                                  ;	(CX:DX) = sector # we want
 28221                                  ;	(si) = 0 iff non fat sector, != 0 if FAT sector read
 28222                                  
 28223                                  ;hkn; SS override
 28224                                  	;PUSH	cx
 28225 00005EBC 56                      	push	si
 28226 00005EBD 52                      	push	dx
 28227 00005EBE 55                      	push	bp
 28228 00005EBF 06                      	push	es
 28229 00005EC0 E8B900                  	CALL	BUFWRITE			; Write out the dirty buffer
 28230 00005EC3 07                      	pop	es
 28231 00005EC4 5D                      	pop	bp
 28232 00005EC5 5A                      	pop	dx
 28233 00005EC6 5E                      	pop	si
 28234                                  	;POP	word [SS:HIGH_SECTOR]
 28235 00005EC7 7261                    	jc	short getbx			; if got hard error
 28236                                  
 28237                                  	; MSDOS 6.0
 28238                                  	;CALL	SET_RQ_SC_PARMS 		; set parms for secondary cache
 28239                                  
 28240                                  ;	We're ready to read in the buffer, if need be. If the caller
 28241                                  ;	wanted to just *write* the buffer then we'll skip reading it in.
 28242                                  
 28243 00005EC9 30E4                    	XOR	AH,AH				; initial flags
 28244                                  ;hkn; SS override
 28245                                  	;test	byte [ss:PREREAD],0FFh
 28246                                  	;jnz	short getb20
 28247 00005ECB 363826[2C05]            	CMP	[SS:PREREAD],ah ; 0		; am to Read in the new sector?
 28248 00005ED0 751E                    	JNZ	short getb20			; no, we're done
 28249 00005ED2 8D5D10                  	LEA	BX,[DI+BUFINSIZ] ; [DI+16]	; (ds:bx) = data address
 28250 00005ED5 B90100                  	MOV	CX,1
 28251 00005ED8 56                      	push	si
 28252 00005ED9 57                      	push	di
 28253 00005EDA 52                      	push	dx
 28254                                  	; MSDOS 6.0
 28255                                  	;push	es
 28256                                  ; Note:  As far as I can tell, all disk reads into buffers go through
 28257                                  ;	 this point.  -mrw 10/88
 28258                                  	;cmp	BuffInHMA, 0		; is buffers in HMA?
 28259                                  	;jz	@f
 28260                                  	;push	ds
 28261                                  	;push	bx
 28262                                  	;lds	bx, dword ptr LoMemBuff	; Then let's read it into scratch buff
 28263                                  ;@@:
 28264                                  ;M039: Eliminated redundant HMA code.
 28265                                  
 28266                                  	; MSDOS 3.3 (& MSDOS 6.0)
 28267 00005EDB 09F6                    	OR	SI,SI			; FAT sector ?
 28268 00005EDD 7407                    	JZ	short getb15		
 28269                                  
 28270 00005EDF E863E2                  	call	FATSECRD
 28271                                  	;mov	ah,2
 28272 00005EE2 B402                    	MOV	AH,buf_isFAT		; Set buf_flags
 28273                                  
 28274 00005EE4 EB05                    	JMP	SHORT getb17		; Buffer is marked free if read barfs
 28275                                  
 28276                                  getb15:
 28277 00005EE6 E883E2                  	call	DREAD			; Buffer is marked free if read barfs
 28278 00005EE9 B400                    	MOV	AH,0			; Set buf_flags to no type, DO NOT XOR!
 28279                                  getb17:	
 28280                                  	; MSDOS 6.0							  ;I001
 28281                                  	;pushf								  ;I001
 28282                                  	;cmp	byte [SS:BuffInHMA],0	; did we read into scratch buff ? ;I001
 28283                                  	;jz	short not_in_hma	; no				  ;I001
 28284                                  	;mov	cx,[ES:BP+DPB.SECTOR_SIZE]				  ;I001
 28285                                  	;shr	cx,1							  ;I001
 28286                                  	;popf				; Retreive possible CY from DREAD ;I001
 28287                                  	;mov	si,bx							  ;I001
 28288                                  	;pop	di							  ;I001
 28289                                  	;pop	es							  ;I001
 28290                                  	;cld								  ;I001
 28291                                  	;pushf				; Preserve possible CY from DREAD ;I001
 28292                                  	;rep	movsw			; move the contents of scratch buf;I001
 28293                                  	;push	es							  ;I001
 28294                                  	;pop	ds							  ;I001
 28295                                  ;not_in_hma:								  ;I001
 28296                                  	;popf							 	  ;I001
 28297                                  	;pop	es
 28298                                  	;
 28299 00005EEB 5A                      	pop	dx
 28300 00005EEC 5F                      	pop	di
 28301 00005EED 5E                      	pop	si
 28302 00005EEE 723A                    	JC	short getbx
 28303                                  
 28304                                  ;	The buffer has the data setup in it (if we were to read)
 28305                                  ;	Setup the various buffer fields
 28306                                  ;
 28307                                  ;	(ds:di) = buffer address
 28308                                  ;	(es:bp) = DPB address
 28309                                  ;	(HIGH_SECTOR:DX) = sector #
 28310                                  ;	(ah) = BUF_FLAGS value
 28311                                  ;	(si) = 0 if non fat sector, != 0 if FAT sector read
 28312                                  
 28313                                  ;hkn; SS override
 28314                                  getb20:	; MSDOS 6.0
 28315                                  	;MOV	CX,[SS:HIGH_SECTOR]
 28316                                  	;MOV	WORD [DI+BUFFINFO.buf_sector+2],CX
 28317                                  	; MSDOS 3.3 (& MSDOS 6.0)	
 28318                                   	;mov	[di+6],dx
 28319 00005EF0 895506                  	MOV	[DI+BUFFINFO.buf_sector],DX
 28320                                  	;mov	[di+0Ah],bp
 28321 00005EF3 896D0A                  	MOV	[DI+BUFFINFO.buf_DPB],BP
 28322                                  	;mov	[di+0Ch], es
 28323 00005EF6 8C450C                  	MOV	[DI+BUFFINFO.buf_DPB+2],ES
 28324 00005EF9 268A4600                	mov	al,[es:bp]
 28325                                  	;mov	al,[es:bp+0]
 28326                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 28327                                  	;mov	[di+4],ax
 28328 00005EFD 894504                  	MOV	[DI+BUFFINFO.buf_ID],AX		; Set ID and Flags
 28329                                  getb25:	
 28330                                  	; MSDOS 6.0
 28331                                  	;MOV	[DI+BUFFINFO.buf_wrtcnt],1	; Default to not a FAT sector ;AC000;
 28332                                  	;XOR	AX,AX
 28333                                  
 28334                                  	; MSDOS 3.3
 28335 00005F00 B80100                  	mov     ax,1
 28336                                  
 28337 00005F03 09F6                    	OR	SI,SI				; FAT sector ?
 28338 00005F05 7408                    	JZ	short getb30
 28339                                  
 28340                                  	;mov	al,[es:bp+8]
 28341 00005F07 268A4608                	MOV	AL,[ES:BP+DPB.FAT_COUNT]	; update number of copies of
 28342                                  	; MSDOS 6.0
 28343                                  	;MOV	[DI+BUFFINFO.buf_wrtcnt],AL	;  this sector present on disk
 28344                                  	;MOV	AX,[ES:BP+DPB.FAT_SIZE]		; offset of identical FAT
 28345                                  						;  sectors
 28346                                  	; MSDOS 3.3
 28347                                  	;mov	ah,[es:bp+0Fh]
 28348 00005F0B 268A660F                	MOV	AH,[ES:BP+DPB.FAT_SIZE]
 28349                                  
 28350                                  ;	BUGBUG - dos 6 can clean this up by not setting wrtcntinc unless wrtcnt
 28351                                  ;		is set
 28352                                  
 28353                                  getb30:	
 28354                                  	; MSDOS 6.0
 28355                                  	;MOV	[DI+BUFFINFO.buf_wrtcntinc],AX
 28356                                  
 28357                                  	; MSDOS 3.3
 28358                                  	;mov	[di+8],ax ; 15/08/2018	
 28359 00005F0F 894508                  	MOV	[DI+BUFFINFO.buf_wrtcnt],AX
 28360                                  
 28361 00005F12 E8C5FE                  	CALL	PLACEBUF
 28362                                  
 28363                                  ;hkn; SS override for next 4
 28364                                  getb35: 
 28365 00005F15 368C1E[7605]            	MOV	[SS:CURBUF+2],DS
 28366 00005F1A 368C1E[2000]            	MOV	[SS:LastBuffer+2],DS
 28367 00005F1F 36893E[7405]            	MOV	[SS:CURBUF],DI
 28368 00005F24 36893E[1E00]            	MOV	[SS:LastBuffer],DI
 28369 00005F29 F8                      	CLC
 28370                                  
 28371                                  ;	Return with 'C' set appropriately
 28372                                  ;
 28373                                  ;	(dx) = caller's original value
 28374                                  
 28375                                  getbx:	
 28376 00005F2A 16                      	push	ss
 28377 00005F2B 1F                      	pop	ds
 28378 00005F2C C3                      	retn
 28379                                  
 28380                                  
 28381                                  
 28382                                  ;Break	<FLUSHBUF -- WRITE OUT DIRTY BUFFERS>
 28383                                  ;----------------------------------------------------------------------------
 28384                                  ; Input:
 28385                                  ;	DS = DOSGROUP
 28386                                  ;	AL = Physical unit number local buffers only
 28387                                  ;	   = -1 for all units and all remote buffers
 28388                                  ; Function:
 28389                                  ;	Write out all dirty buffers for unit, and flag them as clean
 28390                                  ;	Carry set if error (user FAILed to I 24)
 28391                                  ;	    Flush operation completed.
 28392                                  ; DS Preserved, all others destroyed (ES too)
 28393                                  ;----------------------------------------------------------------------------
 28394                                  
 28395                                  FLUSHBUF:
 28396                                  	; MSDOS 6.0
 28397                                  	;call	GetCurHead
 28398                                  	;TEST	word [DOS34_FLAG],FROM_DISK_RESET ; from disk reset ? ;hkn;
 28399                                  	;jnz	short scan_buf_queue
 28400                                  	;cmp	word [DirtyBufferCount], 0			;hkn;
 28401                                  	;je	short end_scan
 28402                                  	
 28403                                  	; MSDOS 3.3
 28404                                  	;mov	ah,-1 ; 01/08/2018 - Retro DOS v3.0
 28405 00005F2D C53E[3800]              	lds	di,[BUFFHEAD]
 28406                                  scan_buf_queue:
 28407 00005F31 E81F00                  	call	CHECKFLUSH
 28408                                  	;push	ax  ; MSDOS 3.3
 28409                                  	; MSDOS 6.0
 28410 00005F34 8A6504                  	mov	ah,[DI+BUFFINFO.buf_ID]
 28411 00005F37 363826[D002]            	cmp	[SS:WPERR],ah					;hkn;
 28412                                  	;je	short free_the_buf
 28413                                  	;TEST	word [DOS34_FLAG],FROM_DISK_RESET ; from disk reset ? ;hkn;
 28414                                  	;jz	short dont_free_the_buf
 28415                                  	; MSDOS 3.3
 28416                                  	;mov	al,[di+4]
 28417                                  	;mov	al,[DI+BUFFINFO.buf_ID]
 28418                                  	;cmp	[SS:WPERR],al					;hkn;
 28419                                  	; 15/08/2018
 28420 00005F3C 7505                    	jne	short dont_free_the_buf	
 28421                                  free_the_buf:
 28422                                  	; MSDOS 6.0 (& MSDOS 3.3)
 28423 00005F3E C74504FF00              	mov	word [DI+BUFFINFO.buf_ID],00FFh
 28424                                  dont_free_the_buf:
 28425                                  	;pop	ax  ; MSDOS 3.3 	   	
 28426                                  	
 28427                                  	; MSDOS 6.0
 28428                                  	;mov	di,[DI+BUFFINFO.buf_next] ; .buf_link
 28429                                  	;cmp	di,[SS:FIRST_BUFF_ADDR]				;hkn;
 28430                                  	;jne	short scan_buf_queue
 28431                                  
 28432                                  	; MSDOS 3.3
 28433                                  	;mov	di,[DI]
 28434                                  	;mov	di,[DI+BUFFINFO.buf_link] ; .buf_next
 28435                                  	;
 28436                                  	; 15/08/2018
 28437 00005F43 C53D                    	lds	di,[di]
 28438                                  	;
 28439 00005F45 83FFFF                  	cmp	di,-1 ; 0FFFFh
 28440 00005F48 75E7                    	jnz	short scan_buf_queue 
 28441                                  
 28442                                  end_scan:
 28443 00005F4A 16                      	push	ss
 28444 00005F4B 1F                      	pop	ds
 28445                                  	; 01/08/2018 - Retro DOS v3.0
 28446                                  	;cmp	byte [FAILERR],0
 28447                                  	;jne	short bad_flush
 28448                                  	;retn
 28449                                  ;bad_flush:
 28450                                  	;stc
 28451                                  	;retn
 28452                                  	; 01/08/2018 - Retro DOS v3.0
 28453 00005F4C 803E[F602]01            	cmp	byte [FAILERR],1
 28454 00005F51 F5                      	cmc
 28455                                  flushbuf_retn:
 28456 00005F52 C3                      	retn
 28457                                  
 28458                                  ;----------------------------------------------------------------------------
 28459                                  ;
 28460                                  ; Procedure Name : CHECKFLUSH
 28461                                  ;
 28462                                  ; Inputs : AL - Drive number, -1 means do not check for drive
 28463                                  ;	   DS:DI - pointer to buffer
 28464                                  ;
 28465                                  ; Function : Write out a buffer if it is dirty
 28466                                  ;
 28467                                  ; Carry set if problem (currently user FAILed to I 24)
 28468                                  ;
 28469                                  ;----------------------------------------------------------------------------
 28470                                  
 28471                                  CHECKFLUSH:
 28472                                  	; MSDOS 6.0
 28473 00005F53 B4FF                    	mov	ah, -1 ; 01/08/2018 Retro DOS v3.0
 28474                                  	;cmp	[di+4],ah
 28475 00005F55 386504                  	CMP	[DI+BUFFINFO.buf_ID],AH
 28476 00005F58 74F8                    	jz	short flushbuf_retn	; Skip free buffer, carry clear
 28477 00005F5A 38C4                    	CMP	AH,AL			; 
 28478 00005F5C 7406                    	JZ	short DOBUFFER		; do this buffer
 28479                                  	;cmp	al,[di+4]
 28480 00005F5E 3A4504                  	CMP	AL,[DI+BUFFINFO.buf_ID]
 28481 00005F61 F8                      	CLC
 28482 00005F62 75EE                    	jnz	short flushbuf_retn	; Buffer not for this unit or SFT
 28483                                  DOBUFFER:
 28484                                  	;test	byte [di+5],40h
 28485 00005F64 F6450540                	TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty
 28486 00005F68 74E8                    	jz	short flushbuf_retn	; Buffer not dirty, carry clear by TEST
 28487 00005F6A 50                      	PUSH	AX
 28488                                  	;push	word [di+4]
 28489 00005F6B FF7504                  	PUSH	WORD [DI+BUFFINFO.buf_ID]
 28490 00005F6E E80B00                  	CALL	BUFWRITE
 28491 00005F71 58                      	POP	AX
 28492 00005F72 7206                    	JC	short LEAVE_BUF		; Leave buffer marked free (lost).
 28493                                  	;and	ah,0BFh
 28494 00005F74 80E4BF                  	AND	AH,~buf_dirty		; Buffer is clean, clears carry
 28495                                  	;mov	[di+4],ax
 28496 00005F77 894504                  	MOV	[DI+BUFFINFO.buf_ID],AX
 28497                                  LEAVE_BUF:
 28498 00005F7A 58                      	POP	AX			; Search info
 28499                                  checkflush_retn:
 28500 00005F7B C3                      	retn
 28501                                  
 28502                                  ;Break	<BUFWRITE -- WRITE OUT A BUFFER IF DIRTY>
 28503                                  ;----------------------------------------------------------------------------
 28504                                  ;
 28505                                  ;	BufWrite writes a buffer to the disk, iff it's dirty.
 28506                                  ;
 28507                                  ;	ENTRY	DS:DI Points to the buffer
 28508                                  ;
 28509                                  ;	EXIT	Buffer marked free
 28510                                  ;		Carry set if error (currently user FAILed to I 24)
 28511                                  ;
 28512                                  ;	USES	All buf DS:DI
 28513                                  ;		HIGH_SECTOR
 28514                                  ;----------------------------------------------------------------------------
 28515                                  
 28516                                  BUFWRITE:
 28517                                  	; 10/09/2018
 28518                                  	; 01/08/2018 - Retro DOS v3.0
 28519                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5E94h
 28520 00005F7C B8FF00                  	MOV	AX,00FFH
 28521                                  	;xchg	ax,[di+4]
 28522 00005F7F 874504                  	XCHG	AX,[DI+BUFFINFO.buf_ID]	; Free, in case write barfs
 28523 00005F82 3CFF                    	CMP	AL,0FFH
 28524 00005F84 74F5                    	jz      short checkflush_retn	; Buffer is free, carry clear.
 28525                                  	;test	ah,40h
 28526 00005F86 F6C440                  	test	AH,buf_dirty
 28527 00005F89 74F0                    	jz      short checkflush_retn	; Buffer is clean, carry clear.
 28528                                  	; MSDOS 6.0
 28529                                  	;call	DEC_DIRTY_COUNT 	; LB. decrement dirty count
 28530                                  
 28531                                  ;hkn; SS override
 28532 00005F8B 363A06[D002]            	CMP	AL,[SS:WPERR]
 28533 00005F90 74E9                    	jz      short checkflush_retn	; If in WP error zap buffer
 28534                                  
 28535                                  ;hkn; SS override
 28536                                  	; MSDOS 6.0
 28537                                  	;MOV	[SS:SC_DRIVE],AL	;LB. set it for invalidation ;AN000;
 28538                                  	
 28539                                  	;les	bp,[di+10]
 28540 00005F92 C46D0A                  	LES	BP,[DI+BUFFINFO.buf_DPB]
 28541                                  	;lea	bx,[di+16]
 28542 00005F95 8D5D10                  	LEA	BX,[DI+BUFINSIZ]	; Point at buffer
 28543                                  	;mov	dx,[di+6]
 28544 00005F98 8B5506                  	MOV	DX,[DI+BUFFINFO.buf_sector] ;F.C. >32mb		;AN000;
 28545                                  	; MSDOS 6.0
 28546                                  	;MOV	CX,[DI+BUFFINFO.buf_sector+2] ;F.C. >32mb	;AN000;
 28547                                  
 28548                                  ;hkn; SS override
 28549                                  	;MOV	[SS:HIGH_SECTOR],CX	;F.C. >32mb		;AN000;
 28550                                  	;MOV	CL,[DI+BUFFINFO.buf_wrtcnt] ;>32mb		;AC000;
 28551                                  	; MSDOS 3.3
 28552                                  	; mov	cx,[DI+8]
 28553 00005F9B 8B4D08                  	mov	cx,[DI+BUFFINFO.buf_wrtcnt]
 28554 00005F9E 88E8                    	MOV	AL,CH			; [DI+BUFFINFO.buf_wrtcntinc]
 28555 00005FA0 30ED                    	XOR	CH,CH
 28556                                  	;mov	ah,ch ; MSDOS 3.3
 28557                                  
 28558                                  ;hkn; SS override for ALLOWED
 28559                                  	;mov	byte [SS:ALLOWED],18h
 28560 00005FA2 36C606[F702]18          	MOV	byte [SS:ALLOWED],Allowed_RETRY+Allowed_FAIL
 28561                                  	;test	byte [di+5],8
 28562                                  	;test	ah,8
 28563 00005FA8 F6C408                  	test	AH,buf_isDATA
 28564 00005FAB 7406                    	JZ	short NO_IGNORE
 28565                                  	;or	byte [SS:ALLOWED],20h
 28566 00005FAD 36800E[F702]20          	OR	byte [SS:ALLOWED],Allowed_IGNORE
 28567                                  NO_IGNORE:
 28568 00005FB3 30E4                    	xor	ah,ah ; 10/09/2018 (MSDOS 3.3, Retro DOS v3.0)
 28569                                  	; MSDOS 6.0
 28570                                  	;MOV	AX,[DI+BUFFINFO.buf_wrtcntinc]	;>32mb		;AC000;
 28571                                  
 28572 00005FB5 57                      	PUSH	DI		; Save buffer pointer
 28573 00005FB6 31FF                    	XOR	DI,DI		; Indicate failure
 28574                                  
 28575                                  	;push	ds
 28576                                  	;push	bx
 28577                                  WRTAGAIN:
 28578 00005FB8 57                      	push	di
 28579 00005FB9 51                      	push	cx
 28580 00005FBA 50                      	push	ax
 28581 00005FBB B90100                  	MOV	CX,1
 28582 00005FBE 53                      	push	bx
 28583 00005FBF 52                      	push	dx
 28584 00005FC0 1E                      	push	ds
 28585                                  
 28586                                  ; Note:  As far as I can tell, all disk reads into buffers go through this point.  -mrw 10/88
 28587                                  
 28588                                  	; MSDOS 6.0
 28589                                  	;cmp	byte [BuffInHMA], 0
 28590                                  	;jz	short NBUFFINHMA
 28591                                  	;push	cx
 28592                                  	;push	es
 28593                                  	;mov	si,bx
 28594                                  	;mov	cx,[es:bp+DPB.SECTOR_SIZE]
 28595                                  	;shr	cx,1
 28596                                  	;les	di,[LoMemBuff]
 28597                                  	;mov	bx,di
 28598                                  	;cld
 28599                                  	;rep	movsw
 28600                                  	;push	es
 28601                                  	;pop	ds
 28602                                  	;pop	es
 28603                                  	;pop	cx
 28604                                  ;NBUFFINHMA:
 28605 00005FC1 E807E2                  	call	DWRITE		; Write out the dirty buffer
 28606 00005FC4 1F                      	pop	ds
 28607 00005FC5 5A                      	pop	dx
 28608 00005FC6 5B                      	pop	bx
 28609 00005FC7 58                      	pop	ax
 28610 00005FC8 59                      	pop	cx
 28611 00005FC9 5F                      	pop	di
 28612 00005FCA 7201                    	JC	short NOSET
 28613 00005FCC 47                      	INC	DI		; If at least ONE write succeedes, the operation
 28614                                  NOSET:				;	succeedes.
 28615 00005FCD 01C2                    	ADD	DX,AX
 28616 00005FCF E2E7                    	LOOP	WRTAGAIN
 28617                                  	;pop	bx
 28618                                  	;pop	ds
 28619 00005FD1 09FF                    	OR	DI,DI		; Clears carry
 28620 00005FD3 7501                    	JNZ	short BWROK	; At least one write worked
 28621 00005FD5 F9                      	STC			; DI never got INCed, all writes failed.
 28622                                  BWROK:	
 28623 00005FD6 5F                      	POP	DI
 28624 00005FD7 C3                      	retn
 28625                                  
 28626                                  ;**	Set_RQ_SC_Parms - Set Secondary Cache Parameters
 28627                                  ;----------------------------------------------------------------------------
 28628                                  ;	Set_RQ_SC_Parms sets the sector size and drive number value
 28629                                  ;	for the secondary cache. This updates SC_SECTOR_SIZE &
 28630                                  ;	SC_DRIVE even if SC is disabled to save the testing
 28631                                  ;	code and time
 28632                                  ;
 28633                                  ;	ENTRY	ES:BP = drive parameter block
 28634                                  ;
 28635                                  ;	EXIT	[SC_SECTOR_SIZE]= drive sector size
 28636                                  ;		[SC_DRIVE]= drive #
 28637                                  ;
 28638                                  ;	USES	Flags
 28639                                  ;----------------------------------------------------------------------------
 28640                                  
 28641                                  ;procedure   SET_RQ_SC_PARMS,NEAR
 28642                                  ;
 28643                                  ;;hkn; SS override for all variables used in this procedure.
 28644                                  ;
 28645                                  ;	SAVE	<ax>
 28646                                  ;
 28647                                  ;	MOV	ax,ES:[BP].DPB_SECTOR_SIZE	; save sector size
 28648                                  ;	MOV	SC_SECTOR_SIZE,ax
 28649                                  ;
 28650                                  ;	MOV	al,ES:[BP].DPB_DRIVE		; save drive #
 28651                                  ;	MOV	SC_DRIVE,al
 28652                                  ;
 28653                                  ;	RESTORE <ax>
 28654                                  ;
 28655                                  ;srspx:	return
 28656                                  ;
 28657                                  ;EndProc SET_RQ_SC_PARMS 			;LB. return
 28658                                  
 28659                                  ;Break	<INC_DIRTY_COUNT-increment dirty count>
 28660                                  ;----------------------------------------------------------------------------
 28661                                  ; Input:
 28662                                  ;	none
 28663                                  ; Function:
 28664                                  ;	increment dirty buffers count
 28665                                  ; Output:
 28666                                  ;	dirty buffers count is incremented
 28667                                  ;
 28668                                  ; All registers preserved
 28669                                  ;----------------------------------------------------------------------------
 28670                                  
 28671                                  ;procedure   INC_DIRTY_COUNT,NEAR
 28672                                  ;
 28673                                  ;; BUGBUG  ---- remove this routine
 28674                                  ;; BUGBUG ---- only one instruction is needed   (speed win, space loose)
 28675                                  ;	inc	[DirtyBufferCount]			;hkn;
 28676                                  ;	ret
 28677                                  ;EndProc INC_DIRTY_COUNT
 28678                                  
 28679                                  ;Break	<DEC_DIRTY_COUNT-decrement dirty count>
 28680                                  ;----------------------------------------------------------------------------
 28681                                  ; Input:
 28682                                  ;	none
 28683                                  ; Function:
 28684                                  ;	decrement dirty buffers count
 28685                                  ; Output:
 28686                                  ;	dirty buffers count is decremented
 28687                                  ;
 28688                                  ; All registers preserved
 28689                                  ;----------------------------------------------------------------------------
 28690                                  
 28691                                  ;procedure   DEC_DIRTY_COUNT,NEAR
 28692                                  ;	cmp	[DirtyBufferCount], 0	;hkn;
 28693                                  ;	jz	ddcx			; BUGBUG - shouldn't it be an
 28694                                  ;	dec	[DirtyBufferCount]	; error condition to underflow here? ;hkn;
 28695                                  ;ddcx:	ret
 28696                                  ;
 28697                                  ;EndProc DEC_DIRTY_COUNT
 28698                                  
 28699                                  ;============================================================================
 28700                                  ; MSPROC.ASM, MSDOS 6.0, 1991
 28701                                  ;============================================================================
 28702                                  ; 02/08/2018 - Retro DOS v3.0
 28703                                  
 28704                                  ; (15/04/2018 - RetrO DOS v2.0, MSDOS 2.11 - PROC.ASM - 1983)
 28705                                  
 28706                                  ; Pseudo EXEC system call for DOS
 28707                                  
 28708                                  ;	TITLE	MSPROC - process maintenance
 28709                                  ;	NAME	MSPROC
 28710                                  
 28711                                  ; =========================================================================
 28712                                  ;**	Process related system calls and low level routines for DOS 2.X.
 28713                                  ;	I/O specs are defined in DISPATCH.
 28714                                  ;
 28715                                  ;	$WAIT
 28716                                  ;	$EXEC
 28717                                  ;	$Keep_process
 28718                                  ;	Stay_resident
 28719                                  ;	$EXIT
 28720                                  ;	$ABORT
 28721                                  ;	abort_inner
 28722                                  ;
 28723                                  ;	Modification history:
 28724                                  ;
 28725                                  ;		Created: ARR 30 March 1983
 28726                                  ;		AN000	version 4.0 jan. 1988
 28727                                  ;		A007	PTM 3957 - fake vesrion for IBMCACHE.COM
 28728                                  ;		A008	PTM 4070 - fake version for MS WINDOWS
 28729                                  ;
 28730                                  ;		M000	added support for loading programs into UMBs 7/9/90
 28731                                  ;
 28732                                  ;		M004 - MS PASCAL 3.2 support. Please see under tag M003 in 
 28733                                  ;		       dossym.inc. 7/30/90
 28734                                  ;		M005 - Support for EXE programs with out STACK segment and 
 28735                                  ;		       with resident size < 64K - 256 bytes. A 256 byte 
 28736                                  ;		       stack is provided at the end of the program. Note that
 28737                                  ;		       only SP is changed.
 28738                                  ;		M020 - Fix for Rational bug for details see exepatch.asm
 28739                                  ;
 28740                                  ;		M028 - 4b04 implementation
 28741                                  ;
 28742                                  ;		M029 - Support for EXEs without stack rewritten. If EXE is
 28743                                  ;			in memory block >= 64K, sp = 0. If memory block
 28744                                  ;			obtained is <64K, point sp at the end of the memory
 28745                                  ;			block. For EXEs smaller than 64K, 256 bytes are still
 28746                                  ;			added for a stack segment which may be needed if it
 28747                                  ;			is loaded in low memory situations.
 28748                                  ;
 28749                                  ;		M030 - Fixing bug in EXEPACPATCH & changing 4b04 to 4b05
 28750                                  ;
 28751                                  ;		M040 - Bug #3052. The environment sizing code would flag a
 28752                                  ;			a bad environment if it reached 32767 bytes. Changed
 28753                                  ;			to allow 32768 bytes of environment.
 28754                                  ;
 28755                                  ;		M047 - Release the allocated UMB when we failed to load a 
 28756                                  ;		       COM file high. Also ensure that if the biggest block
 28757                                  ;		       into which we load the com file is less than 64K then
 28758                                  ;		       we provide atleast 256 bytes of stack to the user.
 28759                                  ;
 28760                                  ;		M050 - Made Lie table search CASE insensitive
 28761                                  ;
 28762                                  ;		M060 - Removed special version table from the kernal and
 28763                                  ;                      put it in a device drive which puts the address
 28764                                  ;                      in the DOS DATA area location UU_IFS_DOS_CALL
 28765                                  ;		       as a DWORD.
 28766                                  ;
 28767                                  ;		M063 - Modified UMB support. If the HIGH_ONLY bit is set on
 28768                                  ;		       entry do not try to load low if there is no space in
 28769                                  ;		       UMBs.
 28770                                  ;
 28771                                  ;		M068 - Support for copy protect apps. Call ChkCopyProt to 
 28772                                  ;		       set a20off_count. Set bit EXECA20BIT in DOS_FLAG. Also
 28773                                  ;		       change return address to LeaveDos if AL=5.
 28774                                  ;
 28775                                  ;               20-Jul-1992 bens    Added ifdef RESTRICTED_BUILD code that
 28776                                  ;                      controls building a version of MSDOS.SYS that only
 28777                                  ;                      runs programs from a fixed list (defined in the
 28778                                  ;                      file RESTRICT.INC).  Search for "RESTRICTED_BUILD"
 28779                                  ;                      for details.  This feature is used to build a
 28780                                  ;                      "special" version of DOS that can be handed out to
 28781                                  ;                      OEM/ISV customers as part of a "service" disk.
 28782                                  ;
 28783                                  ; =========================================================================
 28784                                  
 28785                                  ;SAVEXIT 	EQU	10
 28786                                  
 28787                                  ;BREAK	<$WAIT - return previous process error code>
 28788                                  ; =========================================================================
 28789                                  ;	$WAIT - Return previous process error code.
 28790                                  ;
 28791                                  ;	Assembler usage:
 28792                                  ;
 28793                                  ;	    MOV     AH, WaitProcess
 28794                                  ;	    INT     int_command
 28795                                  ;
 28796                                  ;	ENTRY	none
 28797                                  ;	EXIT	(ax) = exit code
 28798                                  ;	USES	all
 28799                                  ; =========================================================================
 28800                                  
 28801                                  _$WAIT:
 28802                                  	; 02/08/2018 - Retro DOS v3.0
 28803                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5E1h
 28804                                  
 28805 00005FD8 31C0                    	xor	AX,AX
 28806 00005FDA 368706[E202]            	xchg	AX,[ss:exit_code]
 28807 00005FDF E91BB7                  	jmp	SYS_RET_OK
 28808                                  
 28809                                  ; =========================================================================
 28810                                  ;BREAK <$exec - load/go a program>
 28811                                  ;	EXEC.ASM - EXEC System Call
 28812                                  ;
 28813                                  ;
 28814                                  ; Assembler usage:
 28815                                  ;	    lds     DX, Name
 28816                                  ;	    les     BX, Blk
 28817                                  ;	    mov     AH, Exec
 28818                                  ;	    mov     AL, FUNC
 28819                                  ;	    int     INT_COMMAND
 28820                                  ;
 28821                                  ;	AL  Function
 28822                                  ;	--  --------
 28823                                  ;	 0  Load and execute the program.
 28824                                  ;	 1  Load, create  the  program	header	but  do  not
 28825                                  ;	    begin execution.
 28826                                  ;	 3  Load overlay. No header created.
 28827                                  ;
 28828                                  ;	    AL = 0 -> load/execute program
 28829                                  ;
 28830                                  ;	    +---------------------------+
 28831                                  ;	    | WORD segment address of	|
 28832                                  ;	    | environment.		|
 28833                                  ;	    +---------------------------+
 28834                                  ;	    | DWORD pointer to ASCIZ	|
 28835                                  ;	    | command line at 80h	|
 28836                                  ;	    +---------------------------+
 28837                                  ;	    | DWORD pointer to default	|
 28838                                  ;	    | FCB to be passed at 5Ch	|
 28839                                  ;	    +---------------------------+
 28840                                  ;	    | DWORD pointer to default	|
 28841                                  ;	    | FCB to be passed at 6Ch	|
 28842                                  ;	    +---------------------------+
 28843                                  ;
 28844                                  ;	    AL = 1 -> load program
 28845                                  ;
 28846                                  ;	    +---------------------------+
 28847                                  ;	    | WORD segment address of	|
 28848                                  ;	    | environment.		|
 28849                                  ;	    +---------------------------+
 28850                                  ;	    | DWORD pointer to ASCIZ	|
 28851                                  ;	    | command line at 80h	|
 28852                                  ;	    +---------------------------+
 28853                                  ;	    | DWORD pointer to default	|
 28854                                  ;	    | FCB to be passed at 5Ch	|
 28855                                  ;	    +---------------------------+
 28856                                  ;	    | DWORD pointer to default	|
 28857                                  ;	    | FCB to be passed at 6Ch	|
 28858                                  ;	    +---------------------------+
 28859                                  ;	    | DWORD returned value of	|
 28860                                  ;	    | CS:IP			|
 28861                                  ;	    +---------------------------+
 28862                                  ;	    | DWORD returned value of	|
 28863                                  ;	    | SS:IP			|
 28864                                  ;	    +---------------------------+
 28865                                  ;
 28866                                  ;	    AL = 3 -> load overlay
 28867                                  ;
 28868                                  ;	    +---------------------------+
 28869                                  ;	    | WORD segment address where|
 28870                                  ;	    | file will be loaded.	|
 28871                                  ;	    +---------------------------+
 28872                                  ;	    | WORD relocation factor to |
 28873                                  ;	    | be applied to the image.	|
 28874                                  ;	    +---------------------------+
 28875                                  ;
 28876                                  ; Returns:
 28877                                  ;	    AX = error_invalid_function
 28878                                  ;	       = error_bad_format
 28879                                  ;	       = error_bad_environment
 28880                                  ;	       = error_not_enough_memory
 28881                                  ;	       = error_file_not_found
 28882                                  ; =========================================================================
 28883                                  ;
 28884                                  ;   Revision history:
 28885                                  ;
 28886                                  ;	 A000	version 4.00  Jan. 1988
 28887                                  ;
 28888                                  ; =========================================================================
 28889                                  
 28890                                  Exec_Internal_Buffer		EQU	OPENBUF
 28891                                  Exec_Internal_Buffer_Size	EQU	(128+128+53+curdirLen)
 28892                                  
 28893                                  ; =========================================================================
 28894                                  
 28895                                  ;IF1		; warning message on buffers
 28896                                  ;%out	Please make sure that the following are contiguous and of the
 28897                                  ;%out	following sizes:
 28898                                  ;%out
 28899                                  ;%out	OpenBuf     128
 28900                                  ;%out	RenBuf	    128
 28901                                  ;%out	SearchBuf    53
 28902                                  ;%out	DummyCDS    curdirLen
 28903                                  ;ENDIF
 28904                                  
 28905                                  ; =========================================================================
 28906                                  
 28907                                  ; =========================================================================
 28908                                  ;
 28909                                  ; =========================================================================
 28910                                  
 28911                                  _$EXEC:
 28912                                  	; 02/08/2018 - Retro DOS v3.0
 28913                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5EF1h
 28914                                  
 28915                                  EXEC001S:
 28916                                  
 28917                                  	;LocalVar    Exec_Blk		,DWORD
 28918                                  	;LocalVar    Exec_Func		,BYTE
 28919                                  	;LocalVar    Exec_Load_High	,BYTE
 28920                                  	;LocalVar    Exec_FH		,WORD
 28921                                  	;LocalVar    Exec_Rel_Fac	,WORD
 28922                                  	;LocalVar    Exec_Res_Len_Para	,WORD
 28923                                  	;LocalVar    Exec_Environ	,WORD
 28924                                  	;LocalVar    Exec_Size		,WORD
 28925                                  	;LocalVar    Exec_Load_Block	,WORD
 28926                                  	;LocalVar    Exec_DMA		,WORD
 28927                                  	;LocalVar    ExecNameLen 	,WORD
 28928                                  	;LocalVar    ExecName		,DWORD
 28929                                  	;
 28930                                  	;LocalVar    Exec_DMA_Save	,WORD
 28931                                  	;LocalVar    Exec_NoStack	,BYTE
 28932                                  
 28933                                  	; MSDOS 3.3 (& MSDOS 6.0)
 28934                                  	;%define	Exec_Blk	dword [bp-4]
 28935                                  	%define		Exec_Blk	[bp-4] ; 09/08/2018
 28936                                  	%define		Exec_BlkL	word [bp-4]	
 28937                                  	%define		Exec_BlkH	word [bp-2]
 28938                                  	%define		Exec_Func	byte [bp-5]
 28939                                  	%define		Exec_Load_High	byte [bp-6]
 28940                                  	%define		Exec_FH		word [bp-8]
 28941                                  	%define		Exec_Rel_Fac	word [bp-10]
 28942                                  	%define		Exec_Res_Len_Para word [bp-12]
 28943                                  	%define		Exec_Environ	word [bp-14]
 28944                                  	%define		Exec_Size	word [bp-16]
 28945                                  	%define		Exec_Load_Block	word [bp-18]
 28946                                  	%define		Exec_DMA	word [bp-20]
 28947                                  	%define		ExecNameLen	word [bp-22]
 28948                                  	;%define	ExecName	dword [bp-26]
 28949                                  	%define		ExecName	[bp-26] ; 09/08/2018
 28950                                  	%define		ExecNameL	word [bp-26]	
 28951                                  	%define		ExecNameH	word [bp-24]
 28952                                  	; MSDOS 6.0
 28953                                  	%define		Exec_DMA_Save	word [bp-28]
 28954                                  	%define		Exec_NoStack	byte [bp-29]
 28955                                  	
 28956                                  	; ==================================================================
 28957                                  	; validate function
 28958                                  	; ==================================================================
 28959                                  		      	
 28960                                  	;
 28961                                  	; M068 - Start
 28962                                  	;
 28963                                  	; Reset the A20OFF_COUNT to 0. This is done as there is a 
 28964                                  	; possibility that the count may not be decremented all the way to
 28965                                  	; 0. A typical case is if the program for which we intended to keep 
 28966                                  	; the A20  off for a sufficiently long time (A20OFF_COUNT int 21 
 28967                                  	; calls), exits pre-maturely due to error conditions.
 28968                                  	;
 28969                                  
 28970                                  	; MSDOS 6.0
 28971                                  	;mov	byte [SS:A20OFF_COUNT], 0
 28972                                  
 28973                                  	;
 28974                                  	; If al=5 (ExecReady) we'll change the return address on the stack	
 28975                                  	; to be LeaveDos in msdisp.asm. This ensures that the EXECA20OFF
 28976                                  	; bit set in DOS_FLAG by ExceReady is not cleared in msdisp.asm
 28977                                  	;
 28978                                  	
 28979                                  	;cmp	al, 5			; Q: is this ExecReady call
 28980                                  	;jne	@f			; N: continue
 28981                                  					; Y: change ret addr. to LeaveDos.
 28982                                  	;pop	cx			; Note CX is not input to ExecReady
 28983                                  	;mov	cx, offset DOSCODE:LeaveDos
 28984                                  	;push	cx
 28985                                  ;@@:
 28986                                  	;
 28987                                  	; M068 - End
 28988                                  	;
 28989                                  
 28990                                  	;Enter
 28991                                  
 28992 00005FE2 55                      	push	bp
 28993 00005FE3 89E5                    	mov	bp,sp
 28994 00005FE5 83EC1E                  	sub	sp,30 ; MSDOS 6.0
 28995                                  	;sub	sp,26 ; MSDOS 3.3
 28996                                  
 28997                                  	; MSDOS 6.0
 28998                                  	;cmp	AL,5			; only 0, 1, 3 or 5 are allowed ;M028
 28999                                  					; M030
 29000                                  	;jna	short Exec_Check_2
 29001                                  
 29002                                  	; MSDOS 3.3
 29003 00005FE8 3C03                    	cmp	AL,3
 29004 00005FEA 760E                    	jna	short Exec_Check_2
 29005                                  
 29006                                  Exec_Bad_Fun:
 29007 00005FEC 36C606[D102]01          	mov	byte [ss:EXTERR_LOCUS],errLOC_Unk 
 29008                                  					; Extended Error Locus	;smr;SS Override
 29009                                  	;mov	al,1
 29010 00005FF2 B001                    	mov	al,error_invalid_function
 29011                                  
 29012                                  Exec_Ret_Err:
 29013                                  	;Leave
 29014 00005FF4 89EC                    	mov	sp,bp
 29015 00005FF6 5D                      	pop	bp
 29016                                  	;transfer SYS_RET_ERR
 29017 00005FF7 E90FB7                  	jmp	SYS_RET_ERR
 29018                                  
 29019                                  	; MSDOS 6.0
 29020                                  ;ExecReadyJ:
 29021                                  	;call	ExecReady		; M028
 29022                                  	;jmp	norm_ovl		; do a Leave & xfer sysret_OK ; M028
 29023                                  
 29024                                  Exec_Check_2:
 29025 00005FFA 3C02                    	cmp	AL,2			
 29026 00005FFC 74EE                    	jz	short Exec_Bad_Fun
 29027                                  
 29028                                  	; MSDOS 6.0
 29029                                  	;cmp	al,4			; 2 & 4 are not allowed
 29030                                  	;je	short Exec_Bad_Fun
 29031                                  	;
 29032                                  	;cmp	al,5			; M028 ; M030
 29033                                  	;je	short ExecReadyJ		; M028
 29034                                  
 29035                                  	;mov	[bp-4],bx
 29036 00005FFE 895EFC                  	mov	Exec_BlkL,BX		; stash args
 29037                                  	;mov	[bp-2],es
 29038 00006001 8C46FE                  	mov	Exec_BlkH,ES
 29039                                  	;mov	[bp-5],al
 29040 00006004 8846FB                  	mov	Exec_Func,AL
 29041                                  	;mov	byte [bp-6],0
 29042 00006007 C646FA00                	mov	Exec_Load_High,0
 29043                                  
 29044                                  	;mov	[bp-26],dx
 29045 0000600B 8956E6                  	mov	ExecNameL,DX		; set up length of exec name
 29046                                  	;mov	[bp-24],ds
 29047 0000600E 8C5EE8                  	mov	ExecNameH,DS
 29048 00006011 89D6                    	mov	SI,DX			; move pointer to convenient place
 29049                                  	;invoke	DStrLen
 29050 00006013 E862BF                  	call	DStrLen
 29051                                  	;mov	[bp-22],cx
 29052 00006016 894EEA                  	mov	ExecNameLen,CX		; save length
 29053                                  
 29054                                  	; MSDOS 6.0
 29055                                  	;mov	al, [AllocMethod]	; M063: save alloc method in 
 29056                                  	;mov	[AllocMsave], al	; M063: AllocMsave
 29057                                  
 29058 00006019 30C0                    	xor	AL,AL			; open for reading
 29059 0000601B 55                      	push	BP
 29060                                  
 29061                                  	; MSDOS 6.0
 29062                                  	;or	byte [DOS_FLAG], EXECOPEN ; this flag is set to indicate to 
 29063                                  					; the redir that this open call is
 29064                                  					; due to an exec.
 29065                                  
 29066                                  	;invoke	$OPEN			; is the file there?
 29067 0000601C E81710                  	call	_$OPEN
 29068                                  
 29069                                  	; MSDOS 6.0
 29070                                  	;pushf
 29071                                  	;and	byte [DOS_FLAG],~EXECOPEN; reset flag
 29072                                  	;popf
 29073                                  
 29074 0000601F 5D                      	pop	BP
 29075                                  	;MSDOS 3.3
 29076 00006020 72D2                    	jc	short Exec_Ret_Err
 29077                                  
 29078                                  	;mov	[bp-8],ax
 29079 00006022 8946F8                  	mov	Exec_FH,AX
 29080 00006025 89C3                    	mov	BX,AX
 29081 00006027 30C0                    	xor	AL,AL
 29082                                  	;invoke	$Ioctl
 29083 00006029 E888CF                  	call	_$IOCTL
 29084 0000602C 7207                    	jc	short Exec_BombJ
 29085                                  
 29086                                  	;test	dl,80h
 29087 0000602E F6C280                  	test	DL,devid_ISDEV
 29088 00006031 740A                    	jz	short Exec_Check_Environ
 29089                                  
 29090                                  	;mov	al,2
 29091 00006033 B002                    	mov	AL,error_file_not_found
 29092                                  Exec_BombJ:
 29093 00006035 E9CC00                  	jmp	Exec_Bomb
 29094                                  
 29095                                  BadEnv:
 29096                                  	;mov	al,0Ah
 29097 00006038 B00A                    	mov	AL,error_bad_environment
 29098 0000603A E9C700                  	jmp	Exec_Bomb
 29099                                  
 29100                                  Exec_Check_Environ:
 29101                                  	;mov	word [bp-18],0
 29102 0000603D C746EE0000              	mov	Exec_Load_Block,0
 29103                                  	;mov	word [bp-14],0
 29104 00006042 C746F20000              	mov	Exec_Environ,0
 29105                                  					; overlays... no environment
 29106                                  	;test	byte [bp-5],2
 29107 00006047 F646FB02                	test	Exec_Func,exec_func_overlay
 29108 0000604B 7554                    	jnz	short Exec_Read_Header
 29109                                  
 29110                                  	;lds	si,[bp-4]
 29111 0000604D C576FC                  	lds	SI,Exec_Blk		; get block
 29112 00006050 8B04                    	mov	ax,[SI]
 29113                                  	;mov	AX,[SI+EXEC1.ENVIRON]	; address of environ
 29114 00006052 09C0                    	or	AX,AX
 29115 00006054 750C                    	jnz	short Exec_Scan_Env
 29116                                  
 29117 00006056 368E1E[DE02]            	mov	DS,[SS:CurrentPDB]	;smr;SS Override
 29118                                  	;mov	ax,[44]
 29119 0000605B A12C00                  	mov	AX,[PDB.ENVIRON]
 29120                                  
 29121                                  ; MSDOS 6.0
 29122                                  ;---------------------------------------------BUG 92 4/30/90-----------------
 29123                                  ;
 29124                                  ; Exec_environ is being correctly initialized after the environment has been
 29125                                  ; allocated and copied form the parent's env. It must not be initialized here.
 29126                                  ; Because if the call to $alloc below fails Exec_dealloc will deallocate the
 29127                                  ; parent's environment.
 29128                                  ;	mov	Exec_Environ,AX
 29129                                  ;
 29130                                  ;----------------------------------------------------------------------------
 29131                                  
 29132                                  	;mov	[bp-14],ax
 29133                                  	;mov	Exec_Environ,ax
 29134                                  
 29135 0000605E 09C0                    	or	AX,AX
 29136 00006060 743F                    	jz	short Exec_Read_Header
 29137                                  
 29138                                  Exec_Scan_Env:
 29139 00006062 8EC0                    	mov	ES,AX
 29140 00006064 31FF                    	xor	DI,DI
 29141                                  	;mov	cx,7FFFh ; MSDOS 3.3
 29142 00006066 B90080                  	mov	CX,8000h ; MSDOS 6.0	; at most 32k of environment ;M040
 29143 00006069 30C0                    	xor	AL,AL
 29144                                  
 29145                                  Exec_Get_Environ_Len:
 29146 0000606B F2AE                    	repnz	scasb			; find that nul byte
 29147 0000606D 75C9                    	jnz	short BadEnv
 29148                                  
 29149 0000606F 49                      	dec	CX			; Dec CX for the next nul byte test
 29150 00006070 78C6                    	js	short BadEnv		; gone beyond the end of the environment
 29151                                  
 29152 00006072 AE                      	scasb				; is there another nul byte?
 29153 00006073 75F6                    	jnz	short Exec_Get_Environ_Len ; no, scan some more
 29154                                  
 29155 00006075 57                      	push	DI
 29156                                  	;lea	bx,[DI+11h]
 29157 00006076 8D5D11                  	lea	BX,[DI+0Fh+2]
 29158                                  	;add	bx,[bp-22]
 29159 00006079 035EEA                  	add	BX,ExecNameLen		; BX <- length of environment
 29160                                  					; remember argv[0] length
 29161                                  					; round up and remember argc
 29162 0000607C B104                    	mov	CL,4
 29163 0000607E D3EB                    	shr	BX,CL			; number of paragraphs needed
 29164 00006080 06                      	push	ES
 29165                                  	;invoke	$Alloc			; can we get the space?
 29166 00006081 E8CA04                  	call	_$ALLOC
 29167 00006084 1F                      	pop	DS
 29168 00006085 59                      	pop	CX
 29169 00006086 7302                    	jnc	short Exec_Save_Environ
 29170                                  
 29171 00006088 EB74                    	jmp	SHORT Exec_No_Mem	; nope... cry and sob
 29172                                  
 29173                                  Exec_Save_Environ:
 29174 0000608A 8EC0                    	mov	ES,AX
 29175                                  	;mov	[bp-14],ax
 29176 0000608C 8946F2                  	mov	Exec_Environ,AX 	; save him for a rainy day
 29177 0000608F 31F6                    	xor	SI,SI
 29178 00006091 89F7                    	mov	DI,SI
 29179 00006093 F3A4                    	rep	movsb			; copy the environment
 29180 00006095 B80100                  	mov	AX,1
 29181 00006098 AB                      	stosw
 29182                                  	;lds	si,[bp-26]
 29183 00006099 C576E6                  	lds	SI,ExecName
 29184                                  	;mov	cx,[bp-22]
 29185 0000609C 8B4EEA                  	mov	CX,ExecNameLen
 29186 0000609F F3A4                    	rep	movsb
 29187                                  
 29188                                  Exec_Read_Header:
 29189                                  	; We read in the program header into the above data area and
 29190                                  	; determine where in this memory the image will be located.
 29191                                  
 29192                                  	;Context DS
 29193 000060A1 16                      	push	ss
 29194 000060A2 1F                      	pop	ds
 29195                                  	;mov	cx,26
 29196 000060A3 B91A00                  	mov	CX,Exec_Header_Len	; header size
 29197 000060A6 BA[1E14]                	mov	DX,exec_signature
 29198 000060A9 06                      	push	ES
 29199 000060AA 1E                      	push	DS
 29200 000060AB E87803                  	call	ExecRead
 29201 000060AE 1F                      	pop	DS
 29202 000060AF 07                      	pop	ES
 29203 000060B0 7250                    	jc	short Exec_Bad_File
 29204                                  
 29205 000060B2 09C0                    	or	AX,AX
 29206 000060B4 744C                    	jz	short Exec_Bad_File
 29207                                  	;cmp	ax,26
 29208 000060B6 83F81A                  	cmp	AX,Exec_Header_Len	; did we read the right number?
 29209 000060B9 7519                    	jnz	short Exec_Com_Filej	; yep... continue
 29210                                  
 29211 000060BB F706[2A14]FFFF          	test	word [exec_max_BSS],-1 	; indicate load high?
 29212 000060C1 7504                    	jnz	short Exec_Check_Sig
 29213                                  
 29214                                  	;mov	byte [bp-6],0FFh
 29215 000060C3 C646FAFF                	mov	Exec_Load_High,-1
 29216                                  
 29217                                  Exec_Check_Sig:
 29218 000060C7 A1[1E14]                	mov	AX,[exec_signature]	; rms;NSS
 29219                                  	;cmp	ax,5A4Dh ; 'MZ'
 29220 000060CA 3D4D5A                  	cmp	AX,exe_valid_signature	; zibo arises!
 29221 000060CD 7408                    	jz	short Exec_Save_Start 	; assume com file if no signature
 29222                                  
 29223                                  	;cmp	ax,4D5Ah ; 'ZM'
 29224 000060CF 3D5A4D                  	cmp	AX,exe_valid_old_signature  ; zibo arises!
 29225 000060D2 7403                    	jz	short Exec_Save_Start 	; assume com file if no signature
 29226                                  
 29227                                  Exec_Com_Filej:
 29228 000060D4 E9A201                  	jmp	Exec_Com_File
 29229                                  
 29230                                  	; We have the program header... determine memory requirements
 29231                                  
 29232                                  Exec_Save_Start:
 29233 000060D7 A1[2214]                	mov	AX,[exec_pages]		; get 512-byte pages	;rms;NSS
 29234 000060DA B105                    	mov	CL,5			; convert to paragraphs
 29235 000060DC D3E0                    	shl	AX,CL
 29236 000060DE 2B06[2614]              	sub	AX,[exec_par_dir] 	; AX = size in paragraphs;rms;NSS
 29237                                  	;mov	[bp-12],ax
 29238 000060E2 8946F4                  	mov	Exec_Res_Len_Para,AX
 29239                                  
 29240                                  		; Do we need to allocate memory?
 29241                                  		; Yes if function is not load-overlay
 29242                                  
 29243                                  	;test	byte [bp-5],2
 29244 000060E5 F646FB02                	test	Exec_Func,exec_func_overlay
 29245 000060E9 742C                    	jz	short Exec_Allocate	; allocation of space
 29246                                  
 29247                                  		; get load address from block
 29248                                  
 29249                                  	;les	di,[bp-4]
 29250 000060EB C47EFC                  	les	DI,Exec_Blk
 29251 000060EE 268B05                  	mov	ax,[es:di]
 29252                                  	;mov	AX,[ES:DI+EXEC3.load_addr]
 29253                                  	;mov	[bp-20],ax
 29254 000060F1 8946EC                  	mov	Exec_DMA,AX
 29255 000060F4 268B4502                	mov	AX,[ES:DI+EXEC3.reloc_fac]
 29256                                  	;mov	[bp-10],ax
 29257 000060F8 8946F6                  	mov	Exec_Rel_Fac,AX
 29258                                  	; 10/08/2018
 29259 000060FB E9AB00                  	jmp	Exec_Find_Res		; M000
 29260                                  
 29261                                  Exec_No_Mem:
 29262                                  	;mov	al,8
 29263 000060FE B008                    	mov	AL,error_not_enough_memory
 29264 00006100 EB02                    	jmp	short Exec_Bomb
 29265                                  
 29266                                  Exec_Bad_File:
 29267                                  	;mov	al,0Bh
 29268 00006102 B00B                    	mov	AL,error_bad_format
 29269                                  
 29270                                  Exec_Bomb:
 29271                                  	;mov	bx,[bp-8]
 29272 00006104 8B5EF8                  	mov	BX,Exec_FH
 29273 00006107 E82B03                  	call	Exec_Dealloc
 29274                                  	;LeaveCrit CritMem
 29275 0000610A E867BF                  	call	LcritMem
 29276                                  	;save	<AX,BP>
 29277 0000610D 50                      	push	ax
 29278 0000610E 55                      	push	bp
 29279                                  	;invoke	$CLOSE
 29280 0000610F E8B10C                  	call	_$CLOSE
 29281                                  	;restore <BP,AX>
 29282 00006112 5D                      	pop	bp
 29283 00006113 58                      	pop	ax
 29284 00006114 E9DDFE                  	jmp	Exec_Ret_Err
 29285                                  
 29286                                  Exec_Chk_Mem: 
 29287                                  	; MSDOS 6.0    			; M063 - Start
 29288                                  	;mov	al,[AllocMethod]	; save current alloc method in ax
 29289                                  	;mov	bl,[AllocMsave]
 29290                                  	;mov	[AllocMethod], bl	; restore original allocmethod
 29291                                  	;test	bl,HIGH_ONLY 		; Q: was the HIGH_ONLY bit already set
 29292                                  	;jnz	short Exec_No_Mem	; Y: no space in UMBs. Quit
 29293                                  	;				; N: continue
 29294                                  	;
 29295                                  	;test	al,HIGH_ONLY		; Q: did we set the HIGH_ONLY bit
 29296                                  	;jz	short Exec_No_Mem	; N: no memory 
 29297                                  	;mov	ax,[save_AX]		; Y: restore ax and
 29298                                  	;jmp	short Exec_Norm_Alloc	;    Try again
 29299                                  	;				; M063 - End
 29300                                  
 29301                                  Exec_Allocate:
 29302                                  	; 09/09/2018
 29303                                  
 29304                                  	; M005 - START
 29305                                  	; If there is no STACK segment for this exe file and if this
 29306                                  	; not an overlay and the resident size is less than 64K - 
 29307                                  	; 256 bytes we shall add 256bytes bytes to the programs 
 29308                                  	; resident memory requirement and set Exec_SP to this value.
 29309                                  
 29310                                  	; MSDOS 6.0
 29311 00006117 C646E300                	mov	Exec_NoStack,0
 29312 0000611B 833E[2C14]00            	cmp	word [exec_SS],0	; Q: is there a stack seg
 29313 00006120 7512                    	jne	short ea1		; Y: continue normal processing
 29314 00006122 833E[2E14]00            	cmp	word [exec_SP],0	; Q: is there a stack ptr
 29315 00006127 750B                    	jne	short ea1		; Y: continue normal processing
 29316                                  
 29317 00006129 FE46E3                  	inc	Exec_NoStack
 29318 0000612C 3DF00F                  	cmp	ax,1000h-10h		; Q: is this >= 64K-256 bytes
 29319 0000612F 7303                    	jae	short ea1		; Y: don't set Exec_SP
 29320                                  
 29321 00006131 83C010                  	add	ax,10h			; add 10h paras to mem requirement
 29322                                  ea1:
 29323                                  	; M005 - END
 29324                                  
 29325                                  	; MSDOS 6.0			; M000 - start
 29326                                  	;test	byte [AllocMethod],HIGH_FIRST
 29327                                  	;				; Q: is the alloc strat high_first
 29328                                  	;jz	short Exec_Norm_Alloc	; N: normal allocate
 29329                                  	;				; Y: set high_only bit
 29330                                  	;or	byte [AllocMethod],HIGH_ONLY
 29331                                  	;				; M000 - end
 29332                                  
 29333                                  ;Exec_Norm_Alloc:
 29334                                  	;mov	[save_ax],ax		; M000: save ax for possible 2nd  
 29335                                  					; M000: attempt at allocating memory
 29336                                  	;;push	ax			; M000
 29337                                  
 29338                                  	; MSDOS 3.3
 29339 00006134 50                      	push	ax	
 29340                                  
 29341 00006135 BBFFFF                  	mov	BX,0FFFFh		; see how much room in arena
 29342 00006138 1E                      	push	DS
 29343                                  	;invoke	$Alloc			; should have carry set and BX has max
 29344 00006139 E81204                  	call	_$ALLOC
 29345 0000613C 1F                      	pop	DS
 29346                                  
 29347                                  	; MSDOS 6.0
 29348                                  	;mov	ax,[save_ax]		; M000
 29349                                  	;;pop	AX			; M000
 29350                                  
 29351                                  	; MSDOS 3.3
 29352 0000613D 58                      	pop	ax
 29353                                  
 29354 0000613E 83C010                  	add	AX,10h			; room for header
 29355 00006141 83FB11                  	cmp	BX,11h			; enough room for a header
 29356                                  	; MSDOS 6.0
 29357                                  	;jb	short Exec_Chk_Mem	; M000
 29358                                  	; MSDOS 3.3	
 29359 00006144 72B8                    	jb	short Exec_No_Mem
 29360                                  
 29361 00006146 39D8                    	cmp	AX,BX			; is there enough for bare image?
 29362                                  	; MSDOS 6.0
 29363                                  	;ja	short Exec_Chk_Mem	; M000
 29364                                  	; MSDOS 3.3
 29365 00006148 77B4                    	ja	short Exec_No_Mem
 29366                                  
 29367                                  	;test	byte [bp-6],0FFh
 29368 0000614A F646FAFF                	test	Exec_Load_High,-1	; if load high, use max
 29369 0000614E 7518                    	jnz	short Exec_BX_Max	; use max
 29370                                  
 29371                                  	; 09/09/2018
 29372                                  
 29373 00006150 0306[2814]              	add	AX,[exec_min_BSS] 	; go for min allocation;rms;NSS
 29374                                  	; MSDOS 6.0
 29375                                  	;jc	short Exec_Chk_Mem		; M000
 29376                                  	; MSDOS 3.3
 29377 00006154 72A8                    	jc	short Exec_No_Mem
 29378                                  
 29379 00006156 39D8                    	cmp	AX,BX			; enough space?
 29380                                  	; MSDOS 6.0
 29381                                  	;ja	short Exec_Chk_Mem	; M000: nope...	
 29382                                  	; MSDOS 3.3
 29383 00006158 77A4                    	ja	short Exec_No_Mem
 29384                                  
 29385 0000615A 2B06[2814]              	sub	AX,[exec_min_BSS] 	; rms;NSS
 29386 0000615E 0306[2A14]              	add	AX,[exec_max_BSS] 	; go for the MAX
 29387 00006162 7204                    	jc	short Exec_BX_Max
 29388                                  
 29389 00006164 39D8                    	cmp	AX,BX
 29390 00006166 7602                    	jbe	short Exec_Got_Block
 29391                                  
 29392                                  Exec_BX_Max:
 29393 00006168 89D8                    	mov	AX,BX
 29394                                  
 29395                                  Exec_Got_Block:
 29396                                  	; 03/08/2018 - Retro DOS v3.0
 29397                                  
 29398 0000616A 1E                      	push	DS
 29399 0000616B 89C3                    	mov	BX,AX
 29400                                  	;mov	[bp-16],bx
 29401 0000616D 895EF0                  	mov	Exec_Size,BX
 29402                                  	;invoke	$Alloc			; get the space
 29403 00006170 E8DB03                  	call	_$ALLOC
 29404 00006173 1F                      	pop	DS
 29405                                  	; MSDOS 6.0
 29406                                  	;jc	short Exec_Chk_Mem	; M000
 29407                                  	; MSDOS 3.3
 29408 00006174 7288                    	jc	short Exec_No_Mem
 29409                                  
 29410                                  	; MSDOS 6.0
 29411                                  	;mov	cl,[AllocMsave]		; M063: 
 29412                                  	;mov	[AllocMethod],cl	; M063: restore allocmethod
 29413                                  
 29414                                  ;M029; Begin changes
 29415                                  ; This code does special handling for programs with no stack segment. If so,
 29416                                  ;check if the current block is larger than 64K. If so, we do not modify
 29417                                  ;Exec_SP. If smaller than 64K, we make Exec_SP = top of block. In either
 29418                                  ;case Exec_SS is not changed.
 29419                                  ;
 29420                                  	; MSDOS 6.0
 29421 00006176 807EE300                	cmp	Exec_NoStack,0
 29422                                  	;je	@f
 29423 0000617A 7412                    	je	short ea2
 29424                                  
 29425 0000617C 81FB0010                	cmp	bx,1000h		; Q: >= 64K memory block
 29426                                  	;jae	@f			; Y: Exec_SP = 0
 29427 00006180 730C                    	jae	short ea2
 29428                                  ;
 29429                                  ;Make Exec_SP point at the top of the memory block
 29430                                  ;
 29431 00006182 B104                    	mov	cl,4
 29432 00006184 D3E3                    	shl	bx,cl			; get byte offset
 29433 00006186 81EB0001                	sub	bx,100h			; take care of PSP
 29434 0000618A 891E[2E14]              	mov	[exec_SP],bx		; Exec_SP = top of block
 29435                                  ea2:
 29436                                  ;@@:
 29437                                  ;
 29438                                  ;M029; end changes
 29439                                  ;
 29440                                  	;mov	[bp-18],ax
 29441 0000618E 8946EE                  	mov	Exec_Load_Block,AX
 29442 00006191 83C010                  	add	AX,10h
 29443                                  	;test	byte [bp-6],0FFh
 29444 00006194 F646FAFF                	test	Exec_Load_High,-1
 29445 00006198 7409                    	jz	short Exec_Use_AX	; use ax for load info
 29446                                  
 29447                                  	;add	ax,[bp-16]
 29448 0000619A 0346F0                  	add	AX,Exec_Size		; go to end
 29449                                  	;sub	ax,[bp-12]
 29450 0000619D 2B46F4                  	sub	AX,Exec_Res_Len_Para	; drop off header
 29451 000061A0 83E810                  	sub	AX,10h			; drop off pdb
 29452                                  
 29453                                  Exec_Use_AX:
 29454                                  	;mov	[bp-10],ax
 29455 000061A3 8946F6                  	mov	Exec_Rel_Fac,AX 	; new segment
 29456                                  	;mov	[bp-20],ax
 29457 000061A6 8946EC                  	mov	Exec_DMA,AX		; beginning of dma
 29458                                  
 29459                                  	; Determine the location in the file of the beginning of
 29460                                  	; the resident
 29461                                  
 29462                                  Exec_Find_Res:
 29463                                  	; MSDOS 6.0
 29464                                  	;mov	dx,[bp-20]
 29465 000061A9 8B56EC                  	mov	DX,Exec_DMA
 29466                                  	;mov	[bp-28],dx
 29467 000061AC 8956E4                  	mov	Exec_DMA_Save,DX
 29468                                  
 29469                                  	; MSDOS 3.3 (& MSDOS 6.0)
 29470 000061AF 8B16[2614]              	mov	DX,[exec_par_dir]
 29471 000061B3 52                      	push	DX
 29472 000061B4 B104                    	mov	CL,4
 29473 000061B6 D3E2                    	shl	DX,CL			; low word of location
 29474 000061B8 58                      	pop	AX
 29475 000061B9 B10C                    	mov	CL,12
 29476 000061BB D3E8                    	shr	AX,CL			; high word of location
 29477 000061BD 89C1                    	mov	CX,AX			; CX <- high
 29478                                  
 29479                                  		; Read in the resident image (first, seek to it)
 29480                                  	;mov	bx,[bp-8]
 29481 000061BF 8B5EF8                  	mov	BX,Exec_FH
 29482 000061C2 1E                      	push	DS
 29483 000061C3 30C0                    	xor	AL,AL
 29484                                  	;invoke	$Lseek			; Seek to resident
 29485 000061C5 E86D0D                  	call	_$LSEEK
 29486 000061C8 1F                      	pop	DS
 29487 000061C9 7303                    	jnc	short Exec_Big_Read
 29488                                  
 29489 000061CB E936FF                  	jmp	Exec_Bomb
 29490                                  
 29491                                  Exec_Big_Read:				; Read resident into memory
 29492                                  	;mov	bx,[bp-12]
 29493 000061CE 8B5EF4                  	mov	BX,Exec_Res_Len_Para
 29494 000061D1 81FB0010                	cmp	BX,1000h		; Too many bytes to read?
 29495 000061D5 7203                    	jb	short Exec_Read_OK
 29496                                  
 29497 000061D7 BBE00F                  	mov	BX,0FE0h		; Max in one chunk FE00 bytes
 29498                                  
 29499                                  Exec_Read_OK:
 29500                                  	;sub	[bp-12],bx
 29501 000061DA 295EF4                  	sub	Exec_Res_Len_Para,BX	; We read (soon) this many
 29502 000061DD 53                      	push	BX
 29503 000061DE B104                    	mov	CL,4
 29504 000061E0 D3E3                    	shl	BX,CL			; Get count in bytes from paras
 29505 000061E2 89D9                    	mov	CX,BX			; Count in correct register
 29506 000061E4 1E                      	push	DS
 29507                                  	;mov	ds,[bp-20]
 29508 000061E5 8E5EEC                  	mov	DS,Exec_DMA		; Set up read buffer
 29509                                  
 29510 000061E8 31D2                    	xor	DX,DX
 29511 000061EA 51                      	push	CX			; Save our count
 29512 000061EB E83802                  	call	ExecRead
 29513 000061EE 59                      	pop	CX			; Get old count to verify
 29514 000061EF 1F                      	pop	DS
 29515 000061F0 7248                    	jc	short Exec_Bad_FileJ
 29516                                  
 29517 000061F2 39C1                    	cmp	CX,AX			; Did we read enough?
 29518 000061F4 5B                      	pop	BX			; Get paragraph count back
 29519 000061F5 7408                    	jz	short ExecCheckEnd	; and do reloc if no more to read
 29520                                  
 29521                                  	; The read did not match the request. If we are off by 512
 29522                                  	; bytes or more then the header lied and we have an error.
 29523                                  
 29524 000061F7 29C1                    	sub	CX,AX
 29525 000061F9 81F90002                	cmp	CX,512
 29526 000061FD 733B                    	jae	short Exec_Bad_FileJ
 29527                                  
 29528                                  	; We've read in CX bytes... bump DTA location
 29529                                  
 29530                                  ExecCheckEnd:
 29531                                  	;add	[bp-20],bx
 29532 000061FF 015EEC                  	add	Exec_DMA,BX		; Bump dma address
 29533                                  	;test	word [bp-12],0FFFFh
 29534 00006202 F746F4FFFF              	test	Exec_Res_Len_Para,-1
 29535 00006207 75C5                    	jnz	short Exec_Big_Read
 29536                                  
 29537                                  	; The image has now been read in. We must perform relocation
 29538                                  	; to the current location.
 29539                                  
 29540                                  exec_do_reloc:
 29541                                  	;mov	cx,[bp-10]
 29542 00006209 8B4EF6                  	mov	CX,Exec_Rel_Fac
 29543 0000620C A1[2C14]                	mov	AX,[exec_SS]		; get initial SS ;rms;NSS
 29544 0000620F 01C8                    	add	AX,CX			; and relocate him
 29545 00006211 A3[1814]                	mov	[exec_init_SS],AX 	; rms;NSS
 29546                                  
 29547 00006214 A1[2E14]                	mov	AX,[exec_SP]		; initial SP ;rms;NSS
 29548 00006217 A3[1614]                	mov	[exec_init_SP],AX 	; rms;NSS
 29549                                  
 29550 0000621A C406[3214]              	les	AX,[exec_IP]		; rms;NSS
 29551 0000621E A3[1A14]                	mov	[exec_init_IP],AX 	; rms;NSS
 29552 00006221 8CC0                    	mov	AX,ES			; rms;NSS
 29553 00006223 01C8                    	add	AX,CX			; relocated...
 29554 00006225 A3[1C14]                	mov	[exec_init_CS],AX 	; rms;NSS
 29555                                  
 29556 00006228 31C9                    	xor	CX,CX
 29557 0000622A 8B16[3614]              	mov	DX,[exec_rle_table]	; rms;NSS
 29558                                  	;mov	bx,[bp-8]
 29559 0000622E 8B5EF8                  	mov	BX,Exec_FH
 29560 00006231 1E                      	push	DS
 29561 00006232 31C0                    	xor	AX,AX
 29562                                  	;invoke	$Lseek
 29563 00006234 E8FE0C                  	call	_$LSEEK
 29564 00006237 1F                      	pop	DS
 29565 00006238 7303                    	jnc	short exec_get_entries
 29566                                  
 29567                                  Exec_Bad_FileJ:
 29568 0000623A E9C5FE                  	jmp	Exec_Bad_File
 29569                                  
 29570                                  exec_get_entries:
 29571 0000623D 8B16[2414]              	mov	DX,[exec_rle_count]	; Number of entries left ;rms;NSS
 29572                                  
 29573                                  exec_read_reloc:
 29574 00006241 52                      	push	DX
 29575                                  	;mov	dx,OPENBUF
 29576 00006242 BA[6003]                	mov	DX,Exec_Internal_Buffer
 29577                                  	;mov	cx,388
 29578 00006245 B98401                  	mov	CX,((Exec_Internal_Buffer_Size)/4)*4 ; (390>>2)<<2
 29579 00006248 1E                      	push	DS
 29580 00006249 E8DA01                  	call	ExecRead
 29581 0000624C 07                      	pop	ES
 29582 0000624D 5A                      	pop	DX
 29583 0000624E 72EA                    	jc	short Exec_Bad_FileJ
 29584                                  
 29585                                  	;mov	cx,97
 29586 00006250 B96100                  	mov	CX,(Exec_Internal_Buffer_Size)/4 ; (390>>2)
 29587                                  					; Pointer to byte location in header
 29588                                  	;mov	di,OPENBUF
 29589 00006253 BF[6003]                	mov	DI,Exec_Internal_Buffer
 29590                                  	;mov	si,[bp-10]
 29591 00006256 8B76F6                  	mov	SI,Exec_Rel_Fac 	; Relocate a single address
 29592                                  
 29593                                  exec_reloc_one:
 29594 00006259 09D2                    	or	DX,DX			; Any more entries?
 29595 0000625B 7416                    	jz	short Exec_Set_PDBJ
 29596                                  
 29597                                  exec_get_addr:
 29598 0000625D 26C51D                  	lds	BX,[ES:DI]		; Get ra/sa of entry
 29599 00006260 8CD8                    	mov	AX,DS			; Relocate address of item
 29600                                  
 29601                                  	; MSDOS 6.0
 29602                                  ;;;;;;	add	AX,SI  ; MSDOS 3.3
 29603                                  	;add	ax,[bp-28]
 29604 00006262 0346E4                  	add	AX,Exec_DMA_Save
 29605                                  
 29606 00006265 8ED8                    	mov	DS,AX
 29607 00006267 0137                    	add	[BX],SI
 29608 00006269 83C704                  	add	DI,4
 29609 0000626C 4A                      	dec	DX
 29610 0000626D E2EA                    	loop	exec_reloc_one		; End of internal buffer?
 29611                                  
 29612                                  	; We've exhausted a single buffer's worth. Read in the next
 29613                                  	; piece of the relocation table.
 29614                                  
 29615 0000626F 06                      	push	ES
 29616 00006270 1F                      	pop	DS
 29617 00006271 EBCE                    	jmp	short exec_read_reloc
 29618                                  
 29619                                  Exec_Set_PDBJ:
 29620                                  
 29621                                  	; MSDOS 6.0
 29622                                  	;
 29623                                  	; We now determine if this is a buggy exe packed file and if 
 29624                                  	; so we patch in the right code. Note that fixexepatch will
 29625                                  	; point to a ret if dos loads low. The load segment as 
 29626                                  	; determined above will be in exec_dma_save
 29627                                  	;
 29628                                  	;push	es
 29629                                  	;push	ax			; M030
 29630                                  	;push	cx			; M030
 29631                                  	;mov	es,Exec_DMA_Save
 29632                                  	;mov	ax,[exec_init_CS]	; M030
 29633                                  	;mov	cx,[exec_init_IP]	; M030
 29634                                  	;call	word [fixexepatch]
 29635                                  	;call	word [Rational386PatchPtr]
 29636                                  	;pop	cx			; M030
 29637                                  	;pop	ax			; M030
 29638                                  	;pop	es
 29639                                  
 29640 00006273 E99D00                  	jmp	Exec_Set_PDB
 29641                                  
 29642                                  Exec_No_Memj:
 29643 00006276 E985FE                  	jmp	Exec_No_Mem
 29644                                  
 29645                                  	; we have a .COM file.	First, determine if we are merely
 29646                                  	; loading an overlay.
 29647                                  
 29648                                  Exec_Com_File:
 29649                                  	;test	byte [bp-5],2
 29650 00006279 F646FB02                	test	Exec_Func,exec_func_overlay
 29651 0000627D 740C                    	jz	short Exec_Alloc_Com_File
 29652                                  	;lds	si,[bp-4]
 29653 0000627F C576FC                  	lds	SI,Exec_Blk		; get arg block
 29654 00006282 AD                      	lodsw				; get load address
 29655                                  	;mov	[bp-20],ax
 29656 00006283 8946EC                  	mov	Exec_DMA,AX
 29657 00006286 B8FFFF                  	mov	AX,0FFFFh
 29658 00006289 EB34                    	jmp	SHORT Exec_Read_Block	; read it all!
 29659                                  
 29660                                  Exec_Chk_Com_Mem:			
 29661                                  	; MSDOS 6.0	     		; M063 - Start
 29662                                  	;mov	al,[AllocMethod]	; save current alloc method in ax
 29663                                  	;mov	bl,[AllocMsave]
 29664                                  	;mov	[AllocMethod],bl	; restore original allocmethod
 29665                                  	;test	bl,HIGH_ONLY 		; Q: was the HIGH_ONLY bit already set
 29666                                  	;jnz	short Exec_No_Memj	; Y: no space in UMBs. Quit
 29667                                  	;				; N: continue
 29668                                  	;
 29669                                  	;test	al,HIGH_ONLY		; Q: did we set the HIGH_ONLY bit
 29670                                  	;jz	short Exec_No_Memj	; N: no memory 
 29671                                  	;
 29672                                  	;mov	ax,Exec_Load_Block	; M047: ax = block we just allocated	
 29673                                  	;xor	bx,bx			; M047: bx => free arena
 29674                                  	;call	ChangeOwner		; M047: free this block
 29675                                  	;
 29676                                  	;jmp	short Exec_Norm_Com_Alloc
 29677                                  	;				; M063 - End
 29678                                  	
 29679                                  	; We must allocate the max possible size block (ick!)
 29680                                  	; and set up CS=DS=ES=SS=PDB pointer, IP=100, SP=max
 29681                                  	; size of block.
 29682                                  
 29683                                  Exec_Alloc_Com_File:
 29684                                  
 29685                                  	; MSDOS 6.0			; M000 -start
 29686                                  	;test	byte [AllocMethod],HIGH_FIRST
 29687                                  	;				; Q: is the alloc strat high_first
 29688                                  	;jz	short Exec_Norm_Com_Alloc ; N: normal allocate
 29689                                  	;				; Y: set high_only bit
 29690                                  	;or	byte [AllocMethod],HIGH_ONLY
 29691                                  	;				; M000 - end
 29692                                  ;Exec_Norm_Com_Alloc:			; M000
 29693                                  	; MSDOS 3.3 (& MSDOS 6.0)
 29694 0000628B BBFFFF                  	mov	BX,0FFFFh
 29695                                  	;invoke	$Alloc			; largest piece available as error
 29696 0000628E E8BD02                  	call	_$ALLOC
 29697 00006291 09DB                    	or	BX,BX
 29698                                  	; MSDOS 6.0
 29699                                  	;jz	short Exec_Chk_Com_Mem	; M000
 29700                                  	; MSDOS 3.3
 29701 00006293 74E1                    	jz	short Exec_No_Memj
 29702                                  
 29703                                  	;mov	[bp-16],bx
 29704 00006295 895EF0                  	mov	Exec_Size,BX		; save size of allocation block
 29705 00006298 53                      	push	BX
 29706                                  	;invoke	$ALLOC			; largest piece available as error
 29707 00006299 E8B202                  	call	_$ALLOC
 29708 0000629C 5B                      	pop	BX			; get size of block...
 29709                                  	;mov	[bp-18],ax
 29710 0000629D 8946EE                  	mov	Exec_Load_Block,AX
 29711 000062A0 83C010                  	add	AX,10h			; increment for header
 29712                                  	;mov	[bp-20],ax
 29713 000062A3 8946EC                  	mov	Exec_DMA,AX
 29714 000062A6 31C0                    	xor	AX,AX			; presume 64K read...
 29715 000062A8 81FB0010                	cmp	BX,1000h		; 64k or more in block?
 29716 000062AC 730E                    	jae	short Exec_Read_Com	; yes, read only 64k
 29717                                  
 29718 000062AE 89D8                    	mov	AX,BX			; convert size to bytes
 29719 000062B0 B104                    	mov	CL,4
 29720 000062B2 D3E0                    	shl	AX,CL
 29721                                  	; MSDOS 6.0
 29722 000062B4 3D0002                          cmp     AX,200h                 ; enough memory for PSP and stack?
 29723                                  ;	jbe	short Exec_Chk_Com_Mem	; M000: jump if not
 29724                                  ;	;jbe	short Exec_No_Memj	; M000: jump if not
 29725                                  	; Retro DOS v3.0 modification (on MSDOS 6.0 code) -03/08/2018-
 29726                                  	;jbe	short Exec_Chk_Com_Mem	; M000: jump if not
 29727 000062B7 76BD                    	jbe	short Exec_No_Memj	; M000: jump if not
 29728                                  
 29729                                  					; M047: size of the block is < 64K
 29730 000062B9 2D0001                  	sub	ax,100h			; M047: reserve 256 bytes for stack
 29731                                  
 29732                                  Exec_Read_Com:
 29733                                  	; MSDOS 3.3 (& MSDOS 6.0)
 29734 000062BC 2D0001                  	sub	AX,100h 		; remember size of psp
 29735                                  
 29736                                  Exec_Read_Block:
 29737 000062BF 50                      	push	AX			; save number to read
 29738                                  	;mov	bx,[bp-8]
 29739 000062C0 8B5EF8                  	mov	BX,Exec_FH		; of com file
 29740 000062C3 31C9                    	xor	CX,CX			; but seek to 0:0
 29741 000062C5 89CA                    	mov	DX,CX
 29742 000062C7 31C0                    	xor	AX,AX			; seek relative to beginning
 29743                                  	;invoke	$Lseek			; back to beginning of file
 29744 000062C9 E8690C                  	call	_$LSEEK
 29745 000062CC 59                      	pop	CX			; number to read
 29746                                  	;mov	ds,[bp-20]
 29747 000062CD 8E5EEC                  	mov	DS,Exec_DMA
 29748 000062D0 31D2                    	xor	DX,DX
 29749 000062D2 51                      	push	CX
 29750 000062D3 E85001                  	call	ExecRead
 29751 000062D6 5E                      	pop	SI			; get number of bytes to read
 29752 000062D7 7303                    	jnc	short OkRead
 29753                                  
 29754 000062D9 E926FE                  	jmp	Exec_Bad_File
 29755                                  
 29756                                  	; 10/09/2018
 29757                                  OkRead:
 29758 000062DC 39F0                    	cmp	AX,SI			; did we read them all?
 29759                                  	; MSDOS 6.0
 29760                                  	;jz	short Exec_Chk_Com_Mem	; M00: exactly the wrong number...no 
 29761                                  	; MSDOS 3.3
 29762 000062DE 7496                    	jz	short Exec_No_Memj	; M00: exactly the wrong number...
 29763                                  	
 29764                                  	; MSDOS 6.0
 29765                                  	;mov	bl,[AllocMsave]		; M063
 29766                                  	;mov	[AllocMethod],bl	; M063: restore allocmethod
 29767                                  
 29768                                  	; MSDOS 3.3 (& MSDOS 6.0)
 29769                                  	;test	byte [bp-5],2
 29770 000062E0 F646FB02                	test	Exec_Func,exec_func_overlay
 29771 000062E4 752D                    	jnz	short Exec_Set_PDB	; no starto, chumo!
 29772                                  
 29773                                  	;mov	ax,[bp-20]
 29774 000062E6 8B46EC                  	mov	AX,Exec_DMA
 29775 000062E9 83E810                  	sub	AX,10h
 29776 000062EC 36A3[1C14]              	mov	[SS:exec_init_CS],AX
 29777 000062F0 36C706[1A14]0001        	mov	word [SS:exec_init_IP],100h ; initial IP is 100h
 29778                                  
 29779                                  	; SI is AT MOST FF00h. Add FE to account for PSP - word
 29780                                  	; of 0 on stack.
 29781                                  
 29782 000062F7 81C6FE00                	add	SI,0FEh 		; make room for stack
 29783                                  
 29784                                  	; MSDOS 6.0
 29785 000062FB 83FEFE                  	cmp	si,0FFFEh		; M047: Q: was there >= 64K available
 29786 000062FE 7404                    	je	short Exec_St_Ok	; M047: Y: stack is fine
 29787 00006300 81C60001                	add	si,100h			; M047: N: add the xtra 100h for stack
 29788                                  
 29789                                  Exec_St_Ok:
 29790                                  	; MSDOS 3.3 (& MSDOS 6.0)
 29791 00006304 368936[1614]            	mov	[SS:exec_init_SP],SI 	; max value for read is also SP!;smr;SS Override
 29792 00006309 36A3[1814]              	mov	[SS:exec_init_SS],AX 					;smr;SS Override
 29793 0000630D 8ED8                    	mov	DS,AX
 29794 0000630F C7040000                	mov	WORD [SI],0		; 0 for return
 29795                                  
 29796                                  	; MSDOS 6.0
 29797                                  	;
 29798                                  	; M068
 29799                                  	;
 29800                                  	; We now determine if this is a Copy Protected App. If so the 
 29801                                  	; A20OFF_COUNT is set to 6. Note that ChkCopyProt will point to a 
 29802                                  	; a ret if DOS is loaded low. Also DS contains the load segment.
 29803                                  
 29804                                  	;call	word ptr [ChkCopyProt]	
 29805                                  
 29806                                  Exec_Set_PDB:
 29807                                  	; MSDOS 3.3 (& MSDOS 6.0)
 29808                                  	;mov	bx,[bp-8]
 29809 00006313 8B5EF8                  	mov	BX,Exec_FH		; we are finished with the file.
 29810 00006316 E81C01                  	call	Exec_Dealloc
 29811 00006319 55                      	push	BP
 29812                                  	;invoke	$Close			; release the jfn
 29813 0000631A E8A60A                  	call	_$CLOSE
 29814 0000631D 5D                      	pop	BP
 29815 0000631E E81F01                  	call	Exec_Alloc
 29816                                  	;test	byte [bp-5],2
 29817 00006321 F646FB02                	test	Exec_Func,exec_func_overlay
 29818 00006325 7406                    	jz	short Exec_Build_Header
 29819                                  
 29820                                  	; MSDOS 6.0
 29821                                  	;call	Scan_Execname
 29822                                  	;call	Scan_Special_Entries
 29823                                  	;
 29824                                  ;SR;
 29825                                  ;The current lie strategy uses the PSP to store the lie version. However,
 29826                                  ;device drivers are loaded as overlays and have no PSP. To handle them, we
 29827                                  ;use the Sysinit flag provided by the BIOS as part of a structure pointed at
 29828                                  ;by BiosDataPtr. If this flag is set, the overlay call has been issued from
 29829                                  ;Sysinit and therefore must be a device driver load. We then get the lie 
 29830                                  ;version for this driver and put it into the Sysinit PSP. When the driver
 29831                                  ;issues the version check, it gets the lie version until the next overlay
 29832                                  ;call is issued.
 29833                                  ;
 29834                                  	;cmp	DriverLoad,0		;was Sysinit processing done?
 29835                                  	;je	norm_ovl		;yes, no special handling
 29836                                  	;push	si
 29837                                  	;push	es
 29838                                  	;les	si,BiosDataPtr		;get ptr to BIOS data block
 29839                                  	;cmp	byte ptr es:[si],0		;in Sysinit?
 29840                                  	;je	sysinit_done		;no, Sysinit is finished
 29841                                  	;
 29842                                  	;mov	es,CurrentPDB		;es = current PSP (Sysinit PSP)
 29843                                  	;push	Special_Version
 29844                                  	;pop	es:PDB_Version		;store lie version in Sysinit PSP
 29845                                  		;;; PDB.VERSION
 29846                                  	;jmp	short setver_done
 29847                                  ;sysinit_done:
 29848                                  	;mov	DriverLoad,0		;Sysinit done,special handling off
 29849                                  ;setver_done:
 29850                                  	;pop	es
 29851                                  	;pop	si
 29852                                  ;norm_ovl:
 29853                                  
 29854                                  	;leave
 29855 00006327 89EC                    	mov	sp,bp		
 29856 00006329 5D                      	pop	bp
 29857                                  
 29858                                  	;transfer SYS_RET_OK		; overlay load -> done
 29859 0000632A E9D0B3                  	jmp	SYS_RET_OK
 29860                                  
 29861                                  Exec_Build_Header:
 29862                                  	;mov	dx,[bp-18]
 29863 0000632D 8B56EE                  	mov	DX,Exec_Load_Block
 29864                                  					; assign the space to the process
 29865                                  	;mov	si,1
 29866 00006330 BE0100                  	mov	SI,ARENA.OWNER		; pointer to owner field
 29867                                  	;mov	ax,[bp-14]
 29868 00006333 8B46F2                  	mov	AX,Exec_Environ 	; get environ pointer
 29869 00006336 09C0                    	or	AX,AX
 29870 00006338 7405                    	jz	short No_Owner		; no environment
 29871                                  
 29872 0000633A 48                      	dec	AX			; point to header
 29873 0000633B 8ED8                    	mov	DS,AX
 29874 0000633D 8914                    	mov	[SI],DX 		; assign ownership
 29875                                  
 29876                                  No_Owner:
 29877                                  	;mov	ax,[bp-18]
 29878 0000633F 8B46EE                  	mov	AX,Exec_Load_Block	; get load block pointer
 29879 00006342 48                      	dec	AX
 29880 00006343 8ED8                    	mov	DS,AX			; point to header
 29881 00006345 8914                    	mov	[SI],DX 		; assign ownership
 29882                                  
 29883                                  	; MSDOS 6.0
 29884                                  	;push	DS			;AN000;MS. make ES=DS
 29885                                  	;pop	ES			;AN000;MS.
 29886                                  	;mov	DI,Arena_Name		;AN000;MS. ES:DI points to destination
 29887                                  	;call	Scan_Execname		;AN007;MS. parse execname
 29888                                  	;				;	   ds:si->name, cx=name length
 29889                                  	;push	CX			;AN007;;MS. save for fake version
 29890                                  	;push	SI			;AN007;;MS. save for fake version
 29891                                  	;
 29892                                  ;MoveName:				;AN000;
 29893                                  	;lodsb				;AN000;;MS. get char
 29894                                  	;cmp	AL,'.'			;AN000;;MS. is '.' ,may be name.exe
 29895                                  	;jz	Mem_Done		;AN000;;MS. no, move to header
 29896                                  	;				;AN000;
 29897                                  	;stosb				;AN000;;MS. move char
 29898                                  	;				; MSKK bug fix - limit length copied
 29899                                  	;cmp	di,16			; end of memory arena block?
 29900                                  	;jae	mem_done		; jump if so
 29901                                  	;
 29902                                  	;loop	movename		;AN000;;MS. continue
 29903                                  ;Mem_Done:				;AN000;
 29904                                  	;xor	AL,AL			;AN000;;MS. make ASCIIZ
 29905                                  	;cmp	DI,SIZE ARENA		;AN000;MS. if not all filled
 29906                                  	;jae	Fill8			;AN000;MS.
 29907                                  	;
 29908                                  	;stosb				;AN000;MS.
 29909                                  	;
 29910                                  ;Fill8:					;AN000;
 29911                                  	;pop	SI			;AN007;MS. ds:si -> file name
 29912                                  	;pop	CX			;AN007;MS.
 29913                                  	;
 29914                                  	;call	Scan_Special_Entries	;AN007;MS.
 29915                                  
 29916                                  	; MSDOS 3.3 (& MSDOS 6.0)
 29917 00006347 52                      	push	DX
 29918                                  	;mov	si,[bp-16]
 29919 00006348 8B76F0                  	mov	SI,Exec_Size
 29920 0000634B 01D6                    	add	SI,DX
 29921                                  	;Invoke	$Dup_PDB		; ES is now PDB
 29922 0000634D E8E6BA                  	call	_$DUP_PDB
 29923 00006350 5A                      	pop	DX
 29924                                  
 29925                                  	;push	word [bp-14]
 29926 00006351 FF76F2                  	push	Exec_Environ
 29927                                  	;pop	WORD [ES:2Ch]
 29928 00006354 268F062C00              	pop	word [ES:PDB.ENVIRON]
 29929                                  
 29930                                  	; MSDOS 6.0			; *** Added for DOS 5.00
 29931                                  					; version number in PSP
 29932                                   	;push	word [Special_Version]	; Set the DOS version number to
 29933                                  	;pop	word [ES:PDB_Version]	; to be used for this application
 29934                                  		; PDB.VERSION
 29935                                  
 29936                                  	; MSDOS 3.3 (& MSDOS 6.0)	; set up proper command line stuff
 29937                                  	;lds	si,[bp-4]
 29938 00006359 C576FC                  	lds	SI,Exec_Blk		; get the block
 29939 0000635C 1E                      	push	DS			; save its location
 29940 0000635D 56                      	push	SI
 29941                                  	;lds	si, [si+6]
 29942 0000635E C57406                  	lds	SI,[SI+EXEC0.5C_FCB]	; get the 5c fcb
 29943                                  
 29944                                  	; DS points to user space 5C FCB
 29945                                  
 29946 00006361 B90C00                  	mov	CX,12			; copy drive, name and ext
 29947 00006364 51                      	push	CX
 29948 00006365 BF5C00                  	mov	DI,5Ch
 29949 00006368 8A1C                    	mov	BL,[SI]
 29950 0000636A F3A4                    	rep	movsb
 29951                                  
 29952                                  	; DI = 5Ch + 12 = 5Ch + 0Ch = 68h
 29953                                  
 29954 0000636C 31C0                    	xor	AX,AX			; zero extent, etc for CPM
 29955 0000636E AB                      	stosw
 29956 0000636F AB                      	stosw
 29957                                  
 29958                                  	; DI = 5Ch + 12 + 4 = 5Ch + 10h = 6Ch
 29959                                  
 29960 00006370 59                      	pop	CX
 29961 00006371 5E                      	pop	SI			; get block
 29962 00006372 1F                      	pop	DS
 29963 00006373 1E                      	push	DS			; save (again)
 29964 00006374 56                      	push	SI
 29965                                  	;lds	si,[si+0Ah]
 29966 00006375 C5740A                  	lds	SI,[SI+EXEC0.6C_FCB]	; get 6C FCB
 29967                                  
 29968                                  	; DS points to user space 6C FCB
 29969                                  
 29970 00006378 8A3C                    	mov	BH,[SI] 		; do same as above
 29971 0000637A F3A4                    	rep	movsb
 29972 0000637C AB                      	stosw
 29973 0000637D AB                      	stosw
 29974 0000637E 5E                      	pop	SI			; get block (last time)
 29975 0000637F 1F                      	pop	DS
 29976                                  	;ld	si,[si+2]
 29977 00006380 C57402                  	lds	SI,[SI+EXEC0.COM_LINE]	; command line
 29978                                  
 29979                                  	; DS points to user space 80 command line
 29980                                  
 29981 00006383 80C980                  	or	CL,80h
 29982 00006386 89CF                    	mov	DI,CX
 29983 00006388 F3A4                    	rep	movsb			; Wham!
 29984                                  
 29985                                  	; Process BX into default AX (validity of drive specs on args).
 29986                                  	; We no longer care about DS:SI.
 29987                                  
 29988 0000638A FEC9                    	dec	CL			; get 0FFh in CL
 29989 0000638C 88F8                    	mov	AL,BH
 29990 0000638E 30FF                    	xor	BH,BH
 29991                                  	;invoke	GetVisDrv
 29992 00006390 E8C705                  	call	GetVisDrv
 29993 00006393 7302                    	jnc	short Exec_BL
 29994                                  
 29995 00006395 88CF                    	mov	BH,CL
 29996                                  
 29997                                  Exec_BL:
 29998 00006397 88D8                    	mov	AL,BL
 29999 00006399 30DB                    	xor	BL,BL
 30000                                  	;invoke	GetVisDrv
 30001 0000639B E8BC05                  	call	GetVisDrv
 30002 0000639E 7302                    	jnc	short Exec_Set_Return
 30003                                  
 30004 000063A0 88CB                    	mov	BL,CL
 30005                                  
 30006                                  Exec_Set_Return:
 30007                                  	;invoke	Get_User_Stack			; get his return address
 30008 000063A2 E866B2                  	call	Get_User_Stack
 30009                                  
 30010                                  	;push	word [si+14h]
 30011 000063A5 FF7414                  	push	word [SI+user_env.user_CS]	; suck out the CS and IP
 30012                                  	;push	word [si+12h]
 30013 000063A8 FF7412                  	push	word [SI+user_env.user_IP]
 30014                                  	;push	word [si+14h]
 30015 000063AB FF7414                  	push	word [SI+user_env.user_CS]	; suck out the CS and IP
 30016                                  	;push	word [si+12h]
 30017 000063AE FF7412                  	push	word [SI+user_env.user_IP]
 30018                                  	;pop	word [ES:0Ah]
 30019 000063B1 268F060A00              	pop	WORD [ES:PDB.EXIT]
 30020                                  	;pop	word [ES:0Ch]
 30021 000063B6 268F060C00              	pop	WORD [ES:PDB.EXIT+2]
 30022                                  
 30023 000063BB 31C0                    	xor	AX,AX
 30024 000063BD 8ED8                    	mov	DS,AX
 30025                                  					; save them where we can get them
 30026                                  					; later when the child exits.
 30027                                  	;pop	word [88h]
 30028 000063BF 8F068800                	pop	word [addr_int_terminate] ; 22h*4
 30029                                  	;pop	word [90h]
 30030 000063C3 8F068A00                	pop	word [addr_int_terminate+2] ; (22h*4)+2
 30031                                  
 30032 000063C7 36C706[DA02]8000        	mov	WORD [SS:DMAADD],80h	; SS Override
 30033 000063CE 368E1E[DE02]            	mov	DS,[SS:CurrentPDB]	; SS Override
 30034 000063D3 368C1E[DC02]            	mov	[SS:DMAADD+2],DS	; SS Override
 30035                                  
 30036                                  	;test	byte [bp-5],1
 30037 000063D8 F646FB01                	test	Exec_Func,exec_func_no_execute
 30038 000063DC 7427                    	jz	short exec_go
 30039                                  
 30040 000063DE 36C536[1614]            	lds	SI,[SS:exec_init_SP]	; get stack SS Override
 30041                                  	;les	di,[bp-4]
 30042 000063E3 C47EFC                  	les	DI,Exec_Blk		; and block for return
 30043                                  	;mov	[es:di+10h],ds
 30044 000063E6 268C5D10                	mov	[ES:DI+EXEC1.SS],DS	; return SS
 30045                                  
 30046 000063EA 4E                      	dec	SI			; 'push' default AX
 30047 000063EB 4E                      	dec	SI
 30048 000063EC 891C                    	mov	[SI],BX 		; save default AX reg
 30049                                  	;mov	[es:di+0Eh], si
 30050 000063EE 2689750E                	mov	[ES:DI+EXEC1.SP],SI	; return 'SP'
 30051                                  
 30052 000063F2 36C506[1A14]            	lds	AX,[SS:exec_init_IP]	; SS Override
 30053                                  	;mov	[es:di+14h],ds
 30054 000063F7 268C5D14                	mov	[ES:DI+EXEC1.CS],DS	; initial entry stuff
 30055                                  	;mov	[es:di+12h],ax
 30056 000063FB 26894512                	mov	[ES:DI+EXEC1.IP],AX
 30057                                  	
 30058                                  	;leave
 30059 000063FF 89EC                    	mov	sp,bp
 30060 00006401 5D                      	pop	bp	
 30061                                  
 30062                                  	;transfer SYS_RET_OK
 30063 00006402 E9F8B2                  	jmp	SYS_RET_OK
 30064                                  
 30065                                  exec_go:
 30066 00006405 36C536[1A14]            	lds	SI,[SS:exec_init_IP]	; get entry point SS Override
 30067 0000640A 36C43E[1614]            	les	DI,[SS:exec_init_SP]	; new stack SS Override
 30068 0000640F 8CC0                    	mov	AX,ES
 30069                                  
 30070                                  	; MSDOS 6.0
 30071                                  	;cmp	byte [SS:DosHasHMA],0	; Q: is dos in HMA (M021)
 30072                                  	;je	short Xfer_To_User	; N: transfer control to user
 30073                                  
 30074                                  	;push	ds			; Y: control must go to low mem stub
 30075                                  	;	
 30076                                  	;push	cs			;    where we disable a20 and Xfer 
 30077                                  	;pop	ds			;    control to user 
 30078                                  	;
 30079                                  	;or	byte [DOS_FLAG],EXECA20OFF ; M068:
 30080                                  	;				; M004: Set bit to signal int 21
 30081                                  	;				; ah = 25 & ah= 49. See dossym.inc 
 30082                                  	;				; under TAG M003 & M009 for 
 30083                                  	;				; explanation
 30084                                  	;mov	[A20OFF_PSP],dx		; M068: set the PSP for which A20 is
 30085                                  	;				; M068: going to be turned OFF.
 30086                                  	;
 30087                                  	;mov	ax,ds			; ax = segment of low mem stub
 30088                                  	;pop	ds
 30089                                  	;
 30090                                  	;push	ax			; ret far into the low mem stub
 30091                                  	;mov	ax,Disa20_Xfer
 30092                                  	;push	ax
 30093                                  	;mov	AX,ES			; restore ax
 30094                                  	;retf
 30095                                  
 30096                                  Xfer_To_User:
 30097                                  	; DS:SI points to entry point
 30098                                  	; AX:DI points to initial stack
 30099                                  	; DX has PDB pointer
 30100                                  	; BX has initial AX value
 30101                                  
 30102 00006411 FA                      	cli
 30103                                  	; 15/08/2018
 30104 00006412 36C606[CF02]00          	mov	BYTE [SS:INDOS],0	; SS Override
 30105                                  
 30106 00006418 8ED0                    	mov	SS,AX			; set up user's stack
 30107 0000641A 89FC                    	mov	SP,DI			; and SP
 30108 0000641C FB                      	sti
 30109                                  
 30110 0000641D 1E                      	push	DS			; fake long call to entry
 30111 0000641E 56                      	push	SI
 30112 0000641F 8EC2                    	mov	ES,DX			; set up proper seg registers
 30113 00006421 8EDA                    	mov	DS,DX
 30114 00006423 89D8                    	mov	AX,BX			; set up proper AX
 30115                                  
 30116 00006425 CB                      	retf
 30117                                  
 30118                                  ; 04/08/2018 - Retro DOS v3.0
 30119                                  
 30120                                  ;----------------------------------------------------------------------------
 30121                                  ;
 30122                                  ;----------------------------------------------------------------------------
 30123                                  
 30124                                  ExecRead:
 30125 00006426 E80C00                  	CALL	Exec_Dealloc
 30126                                  	;mov	bx,[bp-8]
 30127 00006429 8B5EF8                  	MOV	bx,Exec_FH
 30128 0000642C 55                      	PUSH	BP
 30129 0000642D E8AB0A                  	call	_$READ
 30130 00006430 5D                      	POP	BP
 30131 00006431 E80C00                  	CALL	Exec_Alloc
 30132 00006434 C3                      	retn
 30133                                  
 30134                                  ;----------------------------------------------------------------------------
 30135                                  ;
 30136                                  ;----------------------------------------------------------------------------
 30137                                  
 30138                                  Exec_Dealloc:
 30139 00006435 53                      	push	BX
 30140                                  	;mov	bx,0
 30141 00006436 29DB                    	sub	BX,BX		; (bx) = ARENA_OWNER_SYSTEM
 30142 00006438 E831BC                  	call	EcritMem
 30143 0000643B E81000                  	call	ChangeOwners
 30144 0000643E 5B                      	pop	BX
 30145 0000643F C3                      	retn
 30146                                  
 30147                                  ;----------------------------------------------------------------------------
 30148                                  ;
 30149                                  ;----------------------------------------------------------------------------
 30150                                  
 30151                                  Exec_Alloc:
 30152 00006440 53                      	push	BX
 30153                                  	;mov	bx,[SS:CurrentPDB]	; SS Override
 30154 00006441 2E8B1E[DE02]            	mov	BX,[CS:CurrentPDB]  ; MSDOS 3.3
 30155 00006446 E80500                  	call	ChangeOwners
 30156 00006449 E828BC                  	call	LcritMem
 30157 0000644C 5B                      	pop	BX
 30158 0000644D C3                      	retn
 30159                                  
 30160                                  ;----------------------------------------------------------------------------
 30161                                  ;
 30162                                  ;----------------------------------------------------------------------------
 30163                                  
 30164                                  ChangeOwners:
 30165 0000644E 9C                      	pushf
 30166 0000644F 50                      	push	AX
 30167                                  	;mov	ax,[bp-14]
 30168 00006450 8B46F2                  	mov	AX,Exec_Environ
 30169 00006453 E80900                  	call	ChangeOwner
 30170                                  	;mov	ax,[bp-18]
 30171 00006456 8B46EE                  	mov	AX,Exec_Load_Block
 30172 00006459 E80300                  	call	ChangeOwner
 30173 0000645C 58                      	pop	AX
 30174 0000645D 9D                      	popf
 30175                                  chgown_retn:
 30176 0000645E C3                      	retn
 30177                                  
 30178                                  ;----------------------------------------------------------------------------
 30179                                  ;
 30180                                  ;----------------------------------------------------------------------------
 30181                                  
 30182                                  ChangeOwner:
 30183 0000645F 09C0                    	or	AX,AX			; is area allocated?
 30184 00006461 74FB                    	jz	short chgown_retn	; no, do nothing
 30185 00006463 48                      	dec	AX
 30186 00006464 1E                      	push	DS
 30187 00006465 8ED8                    	mov	DS,AX
 30188 00006467 891E0100                	mov	[ARENA.OWNER],BX
 30189 0000646B 1F                      	pop	DS
 30190 0000646C C3                      	retn
 30191                                  
 30192                                  
 30193                                  ; MSDOS 6.0
 30194                                  ;----------------------------------------------------------------------------
 30195                                  ;
 30196                                  ;----------------------------------------------------------------------------
 30197                                  
 30198                                  ;Procedure	Scan_Execname,near
 30199                                  ;	ASSUME	SS:DosData
 30200                                  ;
 30201                                  ;	lds	SI,ExecName		; DS:SI points to name
 30202                                  ;Entry	Scan_Execname1			; M028
 30203                                  ;Save_Begin:				;
 30204                                  ;	mov	CX,SI			; CX= starting addr
 30205                                  ;Scan0:					;
 30206                                  ;	lodsb				; get char
 30207                                  ;
 30208                                  ;	cmp	AL,':'			; is ':' , may be A:name
 30209                                  ;	jz	save_begin		; yes, save si
 30210                                  ;	cmp	AL,'\'                  ; is '\', may be A:\name
 30211                                  ;	jz	save_begin		; yes, save si
 30212                                  ;	cmp	AL,0			; is end of name
 30213                                  ;	jnz	scan0			; no, continue scanning
 30214                                  ;	sub	SI,CX			; get name's length
 30215                                  ;	xchg	SI,CX			; cx= length, si= starting addr
 30216                                  ;
 30217                                  ;	return
 30218                                  ;
 30219                                  ;EndProc Scan_Execname
 30220                                  
 30221                                  ; MSDOS 6.0
 30222                                  ;----------------------------------------------------------------------------
 30223                                  ;
 30224                                  ;----------------------------------------------------------------------------
 30225                                  
 30226                                  ;Procedure    Scan_Special_Entries,near
 30227                                  ;	assume	SS:DOSDATA
 30228                                  ;
 30229                                  ;	dec	CX			; cx= name length
 30230                                  ;;M060	mov	DI,[Special_Entries]	; es:di -> addr of special entries
 30231                                  ;					;reset to current version
 30232                                  ;	mov    [Special_Version],(Minor_Version SHL 8) + Major_Version
 30233                                  ;;***	call	Reset_Version
 30234                                  ;
 30235                                  ;;M060	push	SS
 30236                                  ;;M060	pop	ES
 30237                                  ;
 30238                                  ;	les	DI,SS:UU_IFS_DOS_CALL	;M060; ES:DI --> Table in SETVER.SYS
 30239                                  ;	mov	AX,ES			;M060; First do a NULL ptr check to
 30240                                  ;	or	AX,DI			;M060; be sure the table exists
 30241                                  ;	jz	End_List		;M060; If ZR then no table
 30242                                  ;
 30243                                  ;GetEntries:
 30244                                  ;	mov	AL,ES:[DI]		; end of list
 30245                                  ;	or	AL,AL
 30246                                  ;	jz	End_List		; yes
 30247                                  ;
 30248                                  ;	mov	[Temp_Var2],DI		; save di
 30249                                  ;	cmp	AL,CL			; same length ?
 30250                                  ;	jnz	SkipOne 		; no
 30251                                  ;
 30252                                  ;	inc	DI			; es:di -> special name
 30253                                  ;	push	CX			; save length and name addr
 30254                                  ;	push	SI
 30255                                  ;
 30256                                  ;;
 30257                                  ;; M050 - BEGIN
 30258                                  ;;
 30259                                  ;	push	ax			; save len
 30260                                  ;sse_next_char:
 30261                                  ;	lodsb
 30262                                  ;	call	UCase
 30263                                  ;	scasb
 30264                                  ;	jne	Not_Matched
 30265                                  ;	loop	sse_next_char
 30266                                  ;	
 30267                                  ;;
 30268                                  ;;	repz	cmpsb			; same name ?
 30269                                  ;;
 30270                                  ;;	jnz	Not_Matched		; no
 30271                                  ;;
 30272                                  ;	pop	ax			; take len off the stack
 30273                                  ;;
 30274                                  ;; M050 - END
 30275                                  ;;
 30276                                  ;	mov	AX,ES:[DI]		; get special version
 30277                                  ;	mov	[Special_Version],AX	; save it
 30278                                  ;
 30279                                  ;;***	mov	AL,ES:[DI+2]		; get fake count
 30280                                  ;;***	mov	[Fake_Count],AL 	; save it
 30281                                  ;
 30282                                  ;	pop	SI
 30283                                  ;	pop	CX
 30284                                  ;	jmp	SHORT end_list
 30285                                  ;
 30286                                  ;Not_Matched:
 30287                                  ;	pop	ax			; get len from stack ; M050
 30288                                  ;	pop	SI			; restore si,cx
 30289                                  ;	pop	CX
 30290                                  ;
 30291                                  ;SkipOne:
 30292                                  ;	mov	DI,[Temp_Var2]		; restore old di use SS Override
 30293                                  ;	xor	AH,AH			; position to next entry
 30294                                  ;	add	DI,AX
 30295                                  ;
 30296                                  ;	add	DI,3			; DI -> next entry length
 30297                                  ;;***	add	DI,4			; DI -> next entry length
 30298                                  ;
 30299                                  ;	jmp	Getentries
 30300                                  ;
 30301                                  ;End_List:
 30302                                  ;	return
 30303                                  ;
 30304                                  ;EndProc Scan_Special_Entries
 30305                                  
 30306                                  
 30307                                  ; 04/08/2018 - Retro DOS v3.0
 30308                                  ; IBMDOS.COm (MSDOS 3.3, 1987) - Offset 633Dh
 30309                                  
 30310                                  ;----------------------------------------------------------------------------
 30311                                  ;SUBTTL Terminate and stay resident handler
 30312                                  ;
 30313                                  ; Input:    DX is  an  offset  from  CurrentPDB  at which to
 30314                                  ;	    truncate the current block.
 30315                                  ;
 30316                                  ; output:   The current block is truncated (expanded) to be [DX+15]/16
 30317                                  ;	    paragraphs long.  An exit is simulated via resetting CurrentPDB
 30318                                  ;	    and restoring the vectors.
 30319                                  ;
 30320                                  ;----------------------------------------------------------------------------
 30321                                  
 30322                                  _$KEEP_PROCESS:
 30323 0000646D 50                      	push	AX			; keep exit code around
 30324                                  	;mov	byte [SS:EXIT_TYPE],3
 30325 0000646E 36C606[1705]03          	mov	BYTE [SS:EXIT_TYPE],EXIT_KEEP_PROCESS
 30326 00006474 368E06[DE02]            	mov	ES,[SS:CurrentPDB]
 30327 00006479 83FA06                  	cmp	DX,6h			; keep enough space around for system
 30328 0000647C 7303                    	jae	short Keep_Shrink	; info
 30329                                  
 30330 0000647E BA0600                  	mov	DX,6h
 30331                                  
 30332                                  Keep_Shrink:
 30333 00006481 89D3                    	mov	BX,DX
 30334 00006483 53                      	push	BX
 30335 00006484 06                      	push	ES
 30336 00006485 E8BF01                  	call	_$SETBLOCK		; ignore return codes.
 30337 00006488 1F                      	pop	DS
 30338 00006489 5B                      	pop	BX
 30339 0000648A 7207                    	jc	short Keep_Done		; failed on modification
 30340                                  
 30341 0000648C 8CD8                    	mov	AX,DS
 30342 0000648E 01D8                    	add	AX,BX
 30343                                  	;mov	[2],ax
 30344 00006490 A30200                  	mov	[PDB.BLOCK_LEN],AX	;PBUGBUG
 30345                                  
 30346                                  Keep_Done:
 30347 00006493 58                      	pop	AX
 30348 00006494 EB26                    	jmp	SHORT exit_inner	; and let abort take care of the rest
 30349                                  
 30350                                  ;----------------------------------------------------------------------------
 30351                                  ;
 30352                                  ;----------------------------------------------------------------------------
 30353                                  
 30354                                  STAY_RESIDENT:
 30355                                  	;mov	ax,3100h
 30356 00006496 B80031                  	mov	AX,(KEEP_PROCESS<<8)+0 ; Lower part is return code;PBUGBUG
 30357 00006499 83C20F                  	add	DX,15
 30358 0000649C D1DA                    	rcr	DX,1
 30359 0000649E B103                    	mov	CL,3
 30360 000064A0 D3EA                    	shr	DX,CL
 30361                                  
 30362 000064A2 E905B0                  	jmp	COMMAND
 30363                                  
 30364                                  ;----------------------------------------------------------------------------
 30365                                  ;SUBTTL $EXIT - return to parent process
 30366                                  ;   Assembler usage:
 30367                                  ;	    MOV     AL, code
 30368                                  ;	    MOV     AH, Exit
 30369                                  ;	    INT     int_command
 30370                                  ;   Error return:
 30371                                  ;	    None.
 30372                                  ;
 30373                                  ;----------------------------------------------------------------------------
 30374                                  
 30375                                  _$EXIT:
 30376                                  	; 04/08/2018 - Retro DOS v3.0
 30377                                  	; IBMDOSDOS.COM (MSDOS 3.3, 1987) - Offset 6375h
 30378 000064A5 30E4                    	xor	AH,AH
 30379 000064A7 368626[F902]            	xchg	AH,[SS:DidCTRLC]
 30380 000064AC 08E4                    	or	AH,AH
 30381                                  	;mov	BYTE [SS:EXIT_TYPE],0
 30382 000064AE 36C606[1705]00          	mov	BYTE [SS:EXIT_TYPE],EXIT_TERMINATE
 30383 000064B4 7406                    	jz	short exit_inner
 30384                                  	;mov	BYTE [SS:EXIT_TYPE],1
 30385 000064B6 36C606[1705]01          	mov	BYTE [SS:EXIT_TYPE],EXIT_CTRL_C
 30386                                  
 30387                                  	;entry	Exit_inner
 30388                                  exit_inner:
 30389 000064BC E84CB1                  	call	Get_User_Stack		;PBUGBUG
 30390                                  
 30391 000064BF 36FF36[DE02]            	push	word [ss:CurrentPDB]
 30392                                  	;pop	word [si+14h]
 30393 000064C4 8F4414                  	pop	word [SI+user_env.user_CS] ;PBUGBUG
 30394 000064C7 EB08                    	jmp	short abort_inner
 30395                                  
 30396                                  ;BREAK <$ABORT -- Terminate a process>
 30397                                  ;----------------------------------------------------------------------------
 30398                                  ; Inputs:
 30399                                  ;	user_CS:00 must point to valid program header block
 30400                                  ; Function:
 30401                                  ;	Restore terminate and Cntrl-C addresses, flush buffers and transfer
 30402                                  ;	to the terminate address
 30403                                  ; Returns:
 30404                                  ;	TO THE TERMINATE ADDRESS
 30405                                  ;----------------------------------------------------------------------------
 30406                                  
 30407                                  _$ABORT:
 30408 000064C9 30C0                    	xor	AL,AL
 30409                                  	;mov	byte [SS:EXIT_TYPE],0
 30410                                  	;mov	byte [SS:EXIT_TYPE],AL ; = 0
 30411 000064CB 36C606[1705]00          	mov	byte [SS:EXIT_TYPE],EXIT_ABORT
 30412                                  
 30413                                  	; abort_inner must have AL set as the exit code! The exit type
 30414                                  	; is retrieved from exit_type. Also, the PDB at user_CS needs
 30415                                  	; to be correct as the one that is terminating.
 30416                                  
 30417                                  abort_inner:
 30418 000064D1 368A26[1705]            	mov	AH,[SS:EXIT_TYPE]
 30419 000064D6 36A3[E202]              	mov	[SS:exit_code],AX
 30420 000064DA E82EB1                  	call	Get_User_Stack
 30421                                  
 30422                                  	;mov	ds,[si+14h]
 30423 000064DD 8E5C14                  	mov	DS,[SI+user_env.user_CS] ; set up old interrupts ;PBUGBUG
 30424 000064E0 31C0                    	xor	AX,AX
 30425 000064E2 8EC0                    	mov	ES,AX
 30426                                  	;mov	si,10
 30427 000064E4 BE0A00                  	mov	SI,SAVEXIT
 30428                                  	;mov	di,88h
 30429 000064E7 BF8800                  	mov	DI,addr_int_terminate
 30430 000064EA A5                      	movsw
 30431 000064EB A5                      	movsw
 30432 000064EC A5                      	movsw
 30433 000064ED A5                      	movsw
 30434 000064EE A5                      	movsw
 30435 000064EF A5                      	movsw
 30436 000064F0 E98EF4                  	jmp	reset_environment
 30437                                  
 30438                                  ; MSDOS 6.0
 30439                                  ;----------------------------------------------------------------------------
 30440                                  ;
 30441                                  ; fixexepatch will point to this is DOS loads low. 
 30442                                  ;
 30443                                  ;----------------------------------------------------------------------------
 30444                                  
 30445                                  ;retexepatch	proc	near
 30446                                  ;	
 30447                                  ;	ret
 30448                                  ;
 30449                                  ;retexepatch 	endp
 30450                                  
 30451                                  
 30452                                  ;============================================================================
 30453                                  ; ALLOC.ASM, MSDOS 6.0, 1991
 30454                                  ;============================================================================
 30455                                  ; 04/08/2018 - Retro DOS v3.0
 30456                                  
 30457                                  ;	TITLE ALLOC.ASM - memory arena manager	NAME Alloc
 30458                                  
 30459                                  ;**
 30460                                  ;	Microsoft Confidential
 30461                                  ;	Copyright (C) Microsoft Corporation 1991
 30462                                  ;	All Rights Reserved.
 30463                                  ;
 30464                                  ;	Memory related system calls and low level routines for MSDOS 2.X.
 30465                                  ;	I/O specs are defined in DISPATCH.
 30466                                  ;
 30467                                  ;	$ALLOC
 30468                                  ;	$SETBLOCK
 30469                                  ;	$DEALLOC
 30470                                  ;	$AllocOper
 30471                                  ;	arena_free_process
 30472                                  ;	arena_next
 30473                                  ;	check_signature
 30474                                  ;	Coalesce
 30475                                  ;
 30476                                  ;	Modification history:
 30477                                  ;
 30478                                  ;	    Created: ARR 30 March 1983
 30479                                  ;
 30480                                  ;	    Revision: M000 - added support for allocing UMBs. 7/9/90
 30481                                  ;		      M003 - added support for link/unlink UMBs from
 30482                                  ;			     DOS arena chain. 7/18/90
 30483                                  ;		      M009 - Added error returns invalid function and 
 30484                                  ;			     arena trashed in set link state call.
 30485                                  ;		      M010 - Release UMB arenas allocated to current PDB
 30486                                  ;			     if UMB_HEAD is initialized.
 30487                                  ;
 30488                                  ;		      M016 - MACE utilities mkeyrate.com version 1.0 
 30489                                  ;			     support. Please see under M009 in 
 30490                                  ;			     ..\inc\dossym.inc. 8/31/90.
 30491                                  ;
 30492                                  ;		      M061 - In GetLastArena, if linking in UMBs check to make
 30493                                  ;			     sure that umb_head arena is valid and also make
 30494                                  ;			     sure that the previous arena is pointing to 
 30495                                  ;			     umb_head.
 30496                                  ;
 30497                                  ;		      M064 - allow HIGH_ONLY bit to be set by a call to 
 30498                                  ;			     set allloc strategy.
 30499                                  ;			     use STRAT_MASK to mask out bits 6 & 7 of 
 30500                                  ;			     bx in AllocSetStrat.
 30501                                  ;
 30502                                  ;		      M068 - use a count value (A20OFF_COUNT) rather than
 30503                                  ;			     a bit to indicate to dos dispatcher to turn
 30504                                  ;			     a20 off before iret. See M016.
 30505                                  ;
 30506                                  
 30507                                  ;	BREAK	<memory allocation utility routines>
 30508                                  
 30509                                  
 30510                                  ; 15/04/2018 - Retro DOS v2.0
 30511                                  ;----------------------------------------------------------------------------
 30512                                  ; xenix memory calls for MSDOS
 30513                                  ;
 30514                                  ; CAUTION: The following routines rely on the fact that arena_signature and
 30515                                  ; arena_owner_system are all equal to zero and are contained in DI.
 30516                                  ;
 30517                                  ;INCLUDE DOSSEG.ASM
 30518                                  
 30519                                  ;CODE	SEGMENT BYTE PUBLIC  'CODE'
 30520                                  ;       ASSUME  SS:DOSGROUP,CS:DOSGROUP
 30521                                  
 30522                                  ;.xlist
 30523                                  ;.xcref
 30524                                  ;INCLUDE DOSSYM.ASM
 30525                                  ;INCLUDE DEVSYM.ASM
 30526                                  ;.cref
 30527                                  ;.list
 30528                                  
 30529                                  ;TITLE ALLOC.ASM - memory arena manager
 30530                                  ;NAME Alloc
 30531                                  
 30532                                  ;SUBTTL memory allocation utility routines
 30533                                  ;PAGE
 30534                                  ;
 30535                                  ; arena data
 30536                                  ;
 30537                                  ;       i_need  arena_head,WORD         ; seg address of start of arena
 30538                                  ;       i_need  CurrentPDB,WORD         ; current process data block addr
 30539                                  ;       i_need  FirstArena,WORD         ; first free block found
 30540                                  ;       i_need  BestArena,WORD          ; best free block found
 30541                                  ;       i_need  LastArena,WORD          ; last free block found
 30542                                  ;       i_need  AllocMethod,BYTE        ; how to alloc first(best)last
 30543                                  
 30544                                  ;**	Arena_Free_Process
 30545                                  ;----------------------------------------------------------------------------
 30546                                  ;	Free all arena blocks allocated to a prOcess
 30547                                  ;
 30548                                  ;	ENTRY	(bx) = PID of process
 30549                                  ;	EXIT	none
 30550                                  ;	USES	????? BUGBUG
 30551                                  ;----------------------------------------------------------------------------
 30552                                  
 30553                                  arena_free_process:
 30554                                  	; 04/08/2018 - Retro DOS v3.0
 30555 000064F3 36A1[2400]                      MOV	AX,[SS:arena_head]
 30556                                  arena_free_process_start:
 30557 000064F7 BF0000                  	MOV     DI,ARENA.SIGNATURE ; 0
 30558                                  	;MOV	AX,[SS:arena_head] ; 15/04/2018  
 30559 000064FA E81F00                          CALL    check_signature         ; ES <- AX, check for valid block
 30560                                  
 30561                                  arena_free_process_loop:
 30562                                          ;retc
 30563 000064FD 722C                            JC	SHORT AFP_RETN	; Retro DOS v2.0 - 05/03/2018
 30564 000064FF 06                      	PUSH    ES
 30565 00006500 1F                              POP     DS
 30566                                  	;cmp	[1],bx 
 30567 00006501 391E0100                        CMP     [ARENA.OWNER],BX	; is block owned by pid?
 30568 00006505 7504                            JNZ     SHORT arena_free_next	; no, skip to next
 30569                                  	; 20/05/2019
 30570                                  	;mov	[1],di
 30571 00006507 893E0100                        MOV     [ARENA.OWNER],DI	; yes... free him
 30572                                  
 30573                                  arena_free_next:
 30574                                  	;cmp	byte [di],5Ah ;'Z'
 30575 0000650B 803D5A                          CMP     BYTE [DI],arena_signature_end
 30576                                                                          ; end of road, Jack?
 30577                                          ;retz				; never come back no more
 30578 0000650E 741B                    	JZ	SHORT AFP_RETN  ;msdos 3.3 (& MSDOS 2.11)
 30579                                  	; MSDOS 6.0
 30580                                  	;jz	short arena_chk_umbs
 30581                                          
 30582 00006510 E80200                  	CALL    arena_next              ; next item in ES/AX carry set if trash
 30583 00006513 EBE8                            JMP     SHORT arena_free_process_loop
 30584                                  
 30585                                  	; MSDOS 6.0
 30586                                  ;arena_chk_umbs:			; M010 - Start
 30587                                  	;mov	ax,[umb_head]		; ax = umb_head
 30588                                  	;cmp	ax,0FFFFh		; Q: is umb_head initialized
 30589                                  	;je	short ret_label		; N: we're done
 30590                                  	;
 30591                                  	;mov	di,ds			; di = last arena
 30592                                  	;cmp	di,ax			; Q: is last arena above umb_head
 30593                                  	;jae	short ret_label		; Y: we've scanned umbs also. done.
 30594                                  	;jmp	short arena_free_process_start
 30595                                  					; M010 - End
 30596                                  
 30597                                  ;AFP_RETN:
 30598                                  ;	RETN
 30599                                  
 30600                                  ;	BREAK	<Arena Helper Routines>
 30601                                  
 30602                                  ;**	Arena_Next - Find Next item in Arena
 30603                                  ;----------------------------------------------------------------------------
 30604                                  ;	ENTRY	DS - pointer to block head
 30605                                  ;		(di) = 0
 30606                                  ;	EXIT	AX,ES - pointers to next head
 30607                                  ;		'C' set iff arena damaged
 30608                                  ;----------------------------------------------------------------------------
 30609                                  
 30610                                  arena_next:
 30611 00006515 8CD8                            MOV     AX,DS                   ; AX <- current block
 30612 00006517 03060300                        ADD     AX,[ARENA.SIZE]		; AX <- AX + current block length
 30613 0000651B 40                              INC     AX                      ; remember that header!
 30614                                  ;
 30615                                  ;       fall into check_signature and return
 30616                                  ;
 30617                                  ;       CALL    check_signature         ; ES <- AX, carry set if error
 30618                                  ;       RET
 30619                                  
 30620                                  ;**	Check_Signature - Check Memory Block Signature
 30621                                  ;----------------------------------------------------------------------------
 30622                                  ;	ENTRY	(AX) = address of block header
 30623                                  ;		(di) = 0
 30624                                  ;	EXIT	 ES = AX
 30625                                  ;		'C' clear if signature good
 30626                                  ;		'C' set if signature bad
 30627                                  ;	USES	ES, Flags
 30628                                  ;----------------------------------------------------------------------------
 30629                                  
 30630                                  check_signature:        
 30631                                  
 30632 0000651C 8EC0                    	MOV     ES,AX                   ; ES <- AX
 30633                                  	;cmp	byte [es:di],4Dh ; 'M'
 30634 0000651E 26803D4D                        CMP     BYTE [ES:DI],arena_signature_normal
 30635                                                                          ; IF next signature = not_end THEN
 30636 00006522 7407                            JZ      SHORT check_signature_ok ;   GOTO ok
 30637                                  	;cmp 	byte [es:di],5Ah ; 'Z'
 30638 00006524 26803D5A                        CMP     BYTE [ES:DI],arena_signature_end
 30639                                                                          ; IF next signature = end then
 30640 00006528 7401                            JZ      SHORT check_signature_ok ;   GOTO ok
 30641 0000652A F9                              STC                             ; set error
 30642                                  ;ret_label: ; MSDOS 6.0
 30643                                  AFP_RETN:
 30644                                   	;  Retro DOS v.20 - 05/03/2018
 30645                                  check_signature_ok:
 30646                                  COALESCE_RETN:
 30647 0000652B C3                      	RETN
 30648                                  
 30649                                  ;**	Coalesce - Combine free blocks ahead with current block
 30650                                  ;----------------------------------------------------------------------------
 30651                                  ;	Coalesce adds the block following the argument to the argument block,
 30652                                  ;	iff it's free.  Coalesce is usually used to join free blocks, but
 30653                                  ;	some callers (such as $setblock) use it to join a free block to it's
 30654                                  ;	preceeding allocated block.
 30655                                  ;
 30656                                  ;	ENTRY	(ds) = pointer to the head of a free block
 30657                                  ;		(di) = 0
 30658                                  ;	EXIT	'C' clear if OK
 30659                                  ;		  (ds) unchanged, this block updated
 30660                                  ;		  (ax) = address of next block, IFF not at end
 30661                                  ;		'C' set if arena trashed
 30662                                  ;	USES	(cx)
 30663                                  ;----------------------------------------------------------------------------
 30664                                          
 30665                                  Coalesce:
 30666                                  	;cmp	byte [di],5Ah ; 'Z'
 30667 0000652C 803D5A                  	CMP     BYTE [DI],arena_signature_end
 30668                                                                          ; IF current signature = END THEN
 30669                                          ;retz				;   GOTO ok
 30670 0000652F 74FA                            jz	short COALESCE_RETN
 30671 00006531 E8E1FF                  	CALL    arena_next              ; ES, AX <- next block, Carry set if error
 30672                                          ;retc				; IF no error THEN GOTO check
 30673 00006534 72F5                    	jc	short COALESCE_RETN
 30674                                  
 30675                                  coalesce_check:
 30676                                  	;cmp	[es:1],di
 30677 00006536 26393E0100                      CMP     [ES:ARENA.OWNER],DI
 30678                                          ;retnz				; IF next block isnt free THEN return
 30679 0000653B 75EE                            JNZ	SHORT COALESCE_RETN
 30680                                  	;mov	cx,[ES:3]
 30681 0000653D 268B0E0300              	MOV     CX,[ES:ARENA.SIZE]	; CX <- next block size
 30682 00006542 41                              INC     CX                      ; CX <- CX + 1 (for header size)
 30683                                          ;ADD	[3],CX
 30684 00006543 010E0300                	ADD     [ARENA.SIZE],CX		; current size <- current size + CX
 30685 00006547 268A0D                          MOV     CL,[ES:DI]              ; move up signature
 30686 0000654A 880D                            MOV     [DI],CL
 30687 0000654C EBDE                            JMP     SHORT Coalesce		; try again
 30688                                  
 30689                                  ; 04/08/2018 - Retro DOS v3.0
 30690                                  ; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 641Fh
 30691                                  
 30692                                  ;	BREAK  <$Alloc - allocate space in memory>
 30693                                  
 30694                                  ; MSDOS 6.0
 30695                                  ;----------------------------------------------------------------------------
 30696                                  ;**	$Alloc - Allocate Memory Space
 30697                                  ;
 30698                                  ;	$Alloc services the INT21 that allocates memory space to a program.
 30699                                  ;	Alloc returns a pointer to a free block of memory that
 30700                                  ;	has the requested size in paragraphs.
 30701                                  ;
 30702                                  ;	If the allocation strategy is HIGH_FIRST or HIGH_ONLY memory is 
 30703                                  ;	scanned from umb_head if not from arena_head. If the strategy is
 30704                                  ; 	HIGH_FIRST the scan is continued from arena_head if a block of 
 30705                                  ;	appropriate size is not found in the UMBs. If the strategy is 
 30706                                  ;	HIGH_FIRST+HIGH_ONLY only the UMBs are scanned for memory.
 30707                                  ;
 30708                                  ;	In either case if bit 0 of UmbFlag is not initialized then the scan
 30709                                  ;	starts from arena_head.
 30710                                  ;
 30711                                  ;	Assembler usage:
 30712                                  ;           MOV     BX,size
 30713                                  ;           MOV     AH,Alloc
 30714                                  ;           INT     21h
 30715                                  ;
 30716                                  ;	BUGBUG - a lot can be done to improve performance. We can set marks
 30717                                  ;	so that we start searching the arena at it's first non-trivial free
 30718                                  ;	block, we can peephole the code, etc. (We can move some subr calls
 30719                                  ;	inline, etc.) I assume that this is called rarely and that the arena
 30720                                  ;	doesn't have too many memory objects in it beyond the first free one.
 30721                                  ;	verify that this is true; if so, this can stay as is
 30722                                  ;
 30723                                  ;	ENTRY	(bx) = requested size, in bytes
 30724                                  ;		(DS) = (ES) = DOSGROUP
 30725                                  ;	EXIT	'C' clear if memory allocated
 30726                                  ;		  (ax:0) = address of requested memory
 30727                                  ;		'C' set if request failed
 30728                                  ;		  (AX) = error_not_enough_memory
 30729                                  ;		    (bx) = max size we could have allocated
 30730                                  ;		  (ax) = error_arena_trashed
 30731                                  ;	USES	All
 30732                                  ;----------------------------------------------------------------------------
 30733                                  
 30734                                  ; MSDOS 2.11 (& MSDOS 3.3)
 30735                                  ;----------------------------------------------------------------------------
 30736                                  ;SUBTTL $Alloc - allocate space in memory
 30737                                  ;
 30738                                  ;   Assembler usage:
 30739                                  ;           MOV     BX,size
 30740                                  ;           MOV     AH,Alloc
 30741                                  ;           INT     21h
 30742                                  ;         AX:0 is pointer to allocated memory
 30743                                  ;         BX is max size if not enough memory
 30744                                  ;
 30745                                  ;   Description:
 30746                                  ;           Alloc returns  a  pointer  to  a  free  block of
 30747                                  ;       memory that has the requested  size  in  paragraphs.
 30748                                  ;
 30749                                  ;   Error return:
 30750                                  ;           AX = error_not_enough_memory
 30751                                  ;              = error_arena_trashed
 30752                                  ;----------------------------------------------------------------------------
 30753                                  
 30754                                  _$ALLOC:
 30755                                  	; 04/08/2018 - Retro DOS v3.0
 30756                                  	;EnterCrit critMem
 30757 0000654E E81BBB                  	call	EcritMem ; MSDOS 3.3 & MSDOS 6.0
 30758                                  
 30759                                  	; MSDOS 6.0
 30760                                  	;mov	ax,[arena_head]
 30761                                  	;mov	[start_arena],ax	; assume LOW_FIRST
 30762                                  	;			
 30763                                  	;test	byte [AllocMethod],HIGH_FIRST+HIGH_ONLY
 30764                                  	;				; Q: should we start scanning from 
 30765                                  	;				;    UMB's
 30766                                  	;jz	short norm_alloc	; N: scan from arena_head
 30767                                  	;	
 30768                                  	;;cmp	word [umb_head],-1	; Q: Has umb_head been initialized
 30769                                  	;;je	short norm_alloc	; N: scan from arena_head
 30770                                  	;test	byte [UmbFlag],LINKSTATE ; Q: are umb's linked
 30771                                  	;jz	short norm_alloc	; N: scan from arena_head
 30772                                  	;
 30773                                  	;mov	ax,[umb_head]
 30774                                  	;mov	[start_arena],ax	; start_arena = umb_head
 30775                                  	;
 30776                                  					; M000 - end
 30777                                  ;norm_alloc:
 30778 00006551 31C0                            XOR     AX,AX
 30779 00006553 89C7                            MOV     DI,AX
 30780                                  	; 15/03/2018
 30781 00006555 36A3[EC02]                      MOV     [SS:FirstArena],AX	; init the options
 30782 00006559 36A3[EE02]                      MOV     [SS:BestArena],AX
 30783 0000655D 36A3[F002]                      MOV     [SS:LastArena],AX
 30784 00006561 50                              PUSH    AX                      ; alloc_max <- 0
 30785                                  	; 04/08/2018
 30786                                  start_scan:
 30787                                  	; MSDOS 6.0
 30788                                  	;mov	ax,[SS:start_arena]	; M000: AX <- beginning of arena
 30789                                  	;
 30790 00006562 36A1[2400]              	MOV     AX,[SS:arena_head]	; AX <- beginning of arena
 30791 00006566 E8B3FF                  	CALL    check_signature         ; ES <- AX, carry set if error
 30792 00006569 7212                            JC      SHORT alloc_err		; IF error THEN GOTO err
 30793                                  
 30794                                  alloc_scan:
 30795 0000656B 06                              PUSH    ES
 30796 0000656C 1F                              POP     DS                      ; DS <- ES
 30797 0000656D 393E0100                        CMP     [ARENA.OWNER],DI
 30798 00006571 742A                            JZ      SHORT alloc_free	; IF current block is free THEN examine
 30799                                  
 30800                                  alloc_next:
 30801                                  	; MSDOS 6.0			; M000 - start 
 30802                                  	;test	byte [UmbFlag],LINKSTATE ; Q: are umb's linked
 30803                                  	;jz	short norm_strat	; N: see if we reached last arena
 30804                                  	;
 30805                                  	;test	byte [AllocMethod],HIGH_FIRST
 30806                                  	;				; Q: is alloc strategy high_first
 30807                                  	;jz	short norm_strat	; N: see if we reached last arena
 30808                                  	;mov	ax,[start_arena]
 30809                                  	;cmp	ax,[arena_head]		; Q: did we start scan from 
 30810                                  					;    arena_head
 30811                                  	;jne	short norm_strat	; N: see if we reached last arena
 30812                                  	;mov	ax,ds			; ax = current block
 30813                                  	;cmp	ax,[umb_head]		; Q: check against umb_head 
 30814                                  	;jmp	short alloc_chk_end
 30815                                  
 30816                                  ;norm_strat:
 30817                                  	;cmp	byte [di],5Ah ; 'Z'
 30818 00006573 803D5A                          CMP     BYTE [DI],arena_signature_end
 30819                                                                          ; IF current block is last THEN
 30820 00006576 740E                            JZ      SHORT alloc_end		;   GOTO end
 30821 00006578 E89AFF                          CALL    arena_next              ; AX, ES <- next block, Carry set if error
 30822 0000657B 73EE                            JNC     SHORT alloc_scan	; IF no error THEN GOTO scan
 30823                                  
 30824                                  alloc_err:
 30825 0000657D 58                              POP     AX
 30826                                  
 30827                                  alloc_trashed:
 30828                                  	;LeaveCrit critMem
 30829 0000657E E8F3BA                  	call    LcritMem ; MSDOS 3.3 & MSDOS 6.0	
 30830                                          ;error	error_arena_trashed
 30831                                  	;mov	al,7
 30832 00006581 B007                    	MOV	AL,error_arena_trashed
 30833                                  alloc_errj:
 30834 00006583 E983B1                  	JMP	SYS_RET_ERR
 30835                                  
 30836                                  alloc_end:
 30837 00006586 36833E[EC02]00                  CMP	WORD [SS:FirstArena],0	; 15/03/2018
 30838 0000658C 756B                    	JNZ     SHORT alloc_do_split
 30839                                  
 30840                                  	; MSDOS 6.0
 30841                                  	;mov	ax,[arena_head]
 30842                                  	;cmp	ax,[start_arena]	; Q: started scanning from arena_head
 30843                                  	;je	short alloc_fail	; Y: not enough memory
 30844                                  	;				; N:
 30845                                  	;				; Q: is the alloc strat HIGH_ONLY
 30846                                  	;test 	byte [AllocMethod],HIGH_ONLY
 30847                                  	;jnz	short alloc_fail	; Y: return size of largest UMB
 30848                                  	;
 30849                                  	;mov	[start_arena],ax	; N: start scanning from arena_head
 30850                                  	;jmp	short start_scan
 30851                                  	;				; M000 - end
 30852                                  
 30853                                  alloc_fail:
 30854                                          ;invoke Get_User_Stack
 30855 0000658E E87AB0                          CALL	Get_User_Stack
 30856 00006591 5B                      	POP     BX
 30857                                          ;MOV	[SI].user_BX,BX
 30858                                  	;MOV	[SI+2],BX
 30859 00006592 895C02                  	mov	[SI+user_env.user_BX],bx
 30860                                  	;LeaveCrit critMem
 30861 00006595 E8DCBA                  	call    LcritMem ; MSDOS 3.3 & MSDOS 6.0
 30862                                  	;error	error_not_enough_memory
 30863                                  	;mov	al,8
 30864 00006598 B008                    	MOV	AL,error_not_enough_memory
 30865                                  	;jmp	short alloc_errj
 30866 0000659A E96CB1                  	JMP	SYS_RET_ERR
 30867                                  
 30868                                  alloc_free:
 30869 0000659D E88CFF                          CALL    Coalesce		; add following free block to current
 30870 000065A0 72DB                            JC	SHORT alloc_err		; IF error THEN GOTO err
 30871 000065A2 8B0E0300                        MOV     CX,[ARENA.SIZE]
 30872 000065A6 5A                              POP     DX                      ; check for max found size
 30873 000065A7 39D1                            CMP     CX,DX
 30874 000065A9 7602                            JNA     SHORT alloc_test
 30875 000065AB 89CA                            MOV     DX,CX
 30876                                  
 30877                                  alloc_test:
 30878 000065AD 52                              PUSH    DX
 30879 000065AE 39CB                            CMP     BX,CX                   ; IF BX > size of current block THEN
 30880 000065B0 77C1                            JA      SHORT alloc_next	;   GOTO next
 30881                                  
 30882                                  	; 15/03/2018
 30883 000065B2 36833E[EC02]00                  CMP     WORD [SS:FirstArena],0
 30884 000065B8 7505                    	JNZ	SHORT alloc_best
 30885 000065BA 368C1E[EC02]                    MOV     [SS:FirstArena],DS	; save first one found	
 30886                                  alloc_best:
 30887 000065BF 36833E[EE02]00                  CMP     WORD [SS:BestArena],0
 30888 000065C5 740E                            JZ      SHORT alloc_make_best	; initial best
 30889 000065C7 06                              PUSH	ES
 30890 000065C8 368E06[EE02]                    MOV     ES,[SS:BestArena]
 30891 000065CD 26390E0300                      CMP     [ES:ARENA.SIZE],CX	; is size of best larger than found?
 30892 000065D2 07                              POP	ES
 30893 000065D3 7605                            JBE     SHORT alloc_last
 30894                                  alloc_make_best:
 30895 000065D5 368C1E[EE02]                    MOV     [SS:BestArena],DS	; assign best
 30896                                  alloc_last:
 30897 000065DA 368C1E[F002]                    MOV     [SS:LastArena],DS 	; assign last
 30898 000065DF EB92                            JMP     SHORT alloc_next
 30899                                  ;
 30900                                  ; split the block high
 30901                                  ;
 30902                                  alloc_do_split_high:
 30903 000065E1 368E1E[F002]                    MOV     DS,[SS:LastArena]
 30904 000065E6 8B0E0300                        MOV     CX,[ARENA.SIZE]
 30905 000065EA 29D9                            SUB     CX,BX
 30906 000065EC 8CDA                            MOV     DX,DS
 30907 000065EE 7444                            JE      SHORT alloc_set_owner	; sizes are equal, no split
 30908 000065F0 01CA                            ADD     DX,CX                   ; point to next block
 30909 000065F2 8EC2                            MOV     ES,DX                   ; no decrement!
 30910 000065F4 49                              DEC     CX
 30911 000065F5 87D9                            XCHG    BX,CX                   ; bx has size of lower block
 30912 000065F7 EB26                            JMP     SHORT alloc_set_sizes	; cx has upper (requested) size
 30913                                  ;
 30914                                  ; we have scanned memory and have found all appropriate blocks
 30915                                  ; check for the type of allocation desired; first and best are identical
 30916                                  ; last must be split high
 30917                                  ;
 30918                                  alloc_do_split:
 30919                                  	; 04/08/2018
 30920                                  	; MSDOS 6.0			; M000 - start
 30921                                  	;xor	cx,cx
 30922                                  	;mov	cl,[AllocMethod]
 30923                                  	;and	cx,STRAT_MASK		; mask off bit 7
 30924                                  	;cmp	cx,BEST_FIT		; Q; is the alloc strategy best_fit
 30925                                  
 30926                                  	; 15/03/2018
 30927                                          ;CMP     BYTE [SS:AllocMethod], 1
 30928                                  	; 04/08/2018
 30929 000065F9 36803E[B002]01          	CMP     BYTE [SS:AllocMethod],BEST_FIT
 30930 000065FF 77E0                            JA      SHORT alloc_do_split_high
 30931 00006601 368E1E[EC02]                    MOV     DS,[SS:FirstArena]        
 30932 00006606 7205                    	JB      SHORT alloc_get_size
 30933 00006608 368E1E[EE02]            	MOV     DS,[SS:BestArena]
 30934                                  
 30935                                  alloc_get_size:
 30936 0000660D 8B0E0300                        MOV     CX,[ARENA.SIZE]
 30937 00006611 29D9                            SUB     CX,BX                   ; get room left over
 30938 00006613 8CD8                            MOV     AX,DS
 30939 00006615 89C2                            MOV     DX,AX                   ; save for owner setting
 30940 00006617 741B                            JE      SHORT alloc_set_owner	; IF BX = size THEN (don't split)
 30941 00006619 01D8                            ADD     AX,BX
 30942 0000661B 40                              INC     AX                      ; remember the header
 30943 0000661C 8EC0                            MOV     ES,AX                   ; ES <- DS + BX (new header location)
 30944 0000661E 49                              DEC     CX                      ; CX <- size of split block
 30945                                  alloc_set_sizes:
 30946 0000661F 891E0300                        MOV     [ARENA.SIZE],BX		; current size <- BX
 30947 00006623 26890E0300                      MOV     [ES:ARENA.SIZE],CX      ; split size <- CX
 30948                                  	;mov	bl,4Dh ; 'M'
 30949 00006628 B34D                            MOV     BL,arena_signature_normal
 30950 0000662A 861D                            XCHG    BL,[DI]			; current signature <- 4D
 30951 0000662C 26881D                          MOV     [ES:DI],BL		; new block sig <- old block sig
 30952 0000662F 26893E0100                      MOV     [ES:ARENA.OWNER],DI
 30953                                  
 30954                                  alloc_set_owner:
 30955 00006634 8EDA                            MOV     DS,DX
 30956 00006636 36A1[DE02]                      MOV     AX,[SS:CurrentPDB] ; 15/03/2018
 30957 0000663A A30100                          MOV     [ARENA.OWNER],AX
 30958 0000663D 8CD8                            MOV     AX,DS
 30959 0000663F 40                              INC     AX
 30960 00006640 5B                              POP     BX
 30961                                  	;LeaveCrit critMem
 30962 00006641 E830BA                  	call    LcritMem ; MSDOS 3.3 & MSDOS 6.0
 30963                                          ;transfer SYS_RET_OK
 30964 00006644 E9B6B0                  	JMP	SYS_RET_OK
 30965                                  
 30966                                  
 30967                                  ;	BREAK $SETBLOCK - change size of an allocated block (if possible)
 30968                                  
 30969                                  ; MSDOS 6.0
 30970                                  ;----------------------------------------------------------------------------
 30971                                  ;**	$SETBLOCK - Change size of an Alocated Block
 30972                                  ;
 30973                                  ;	Setblock changes the size of an allocated block.  First, we coalesce
 30974                                  ;	any following free space onto this block; then we try to trim the
 30975                                  ;	block down to the size requested.
 30976                                  ;
 30977                                  ;	Note that if the guy wants to grow the block but that growth fails,
 30978                                  ;	we still go ahead and coalesce any trailing free blocks onto it.
 30979                                  ;	Thus the maximum-size-possible value that we return has already
 30980                                  ;	been allocated!  This is a bug, dare we fix it?  BUGBUG
 30981                                  ;
 30982                                  ;	NOTE - $SETBLOCK is in bed with $ALLOC and jumps into $ALLOC to
 30983                                  ;		finish it's work.  FOr this reason we build the allocsf
 30984                                  ;		structure on the frame, to make us compatible with $ALLOCs
 30985                                  ;		code.
 30986                                  ;
 30987                                  ;	ENTRY	(es) = segment of old block
 30988                                  ;		(bx) = newsize
 30989                                  ;		(ah) = SETBLOCK
 30990                                  ;
 30991                                  ;	EXIT	'C' clear if OK
 30992                                  ;		'C' set if error
 30993                                  ;		  (ax) = error_invalid_block
 30994                                  ;		       = error_arena_trashed
 30995                                  ;		       = error_not_enough_memory
 30996                                  ;		       = error_invalid_function
 30997                                  ;		  (bx) = maximum size possible, iff (ax) = error_not_enough_memory
 30998                                  ;	USES	???? BUGBUG
 30999                                  ;----------------------------------------------------------------------------
 31000                                  
 31001                                  ; MSDOS 2.11 (& MSDOS 3.3)
 31002                                  ;----------------------------------------------------------------------------
 31003                                  ;SUBTTL $SETBLOCK - change size of an allocated block (if possible)
 31004                                  ;
 31005                                  ;   Assembler usage:
 31006                                  ;           MOV     ES,block
 31007                                  ;           MOV     BX,newsize
 31008                                  ;           MOV     AH,setblock
 31009                                  ;           INT     21h
 31010                                  ;         if setblock fails for growing, BX will have the maximum
 31011                                  ;         size possible
 31012                                  ;   Error return:
 31013                                  ;           AX = error_invalid_block
 31014                                  ;              = error_arena_trashed
 31015                                  ;              = error_not_enough_memory
 31016                                  ;              = error_invalid_function
 31017                                  ;----------------------------------------------------------------------------
 31018                                  
 31019                                  _$SETBLOCK:        
 31020                                  	; 04/08/2018 - Retro DOS v3.0
 31021                                  	;EnterCrit   critMem
 31022 00006647 E822BA                  	call	EcritMem ; MSDOS 3.3 & MSDOS 6.0
 31023                                  
 31024 0000664A BF0000                  	MOV     DI,ARENA.SIGNATURE
 31025 0000664D 8CC0                            MOV     AX,ES
 31026 0000664F 48                              DEC     AX
 31027 00006650 E8C9FE                          CALL    check_signature
 31028 00006653 7303                            JNC     SHORT setblock_grab
 31029                                  
 31030                                  setblock_bad:
 31031 00006655 E926FF                          JMP     alloc_trashed
 31032                                  
 31033                                  setblock_grab:
 31034 00006658 8ED8                            MOV     DS,AX
 31035 0000665A E8CFFE                          CALL    Coalesce
 31036 0000665D 72F6                            JC      SHORT setblock_bad
 31037 0000665F 8B0E0300                        MOV     CX,[ARENA.SIZE]
 31038 00006663 51                              PUSH    CX
 31039 00006664 39CB                            CMP     BX,CX
 31040 00006666 76A5                            JBE     SHORT alloc_get_size
 31041 00006668 E923FF                          JMP     alloc_fail
 31042                                  
 31043                                  ;	BREAK $DEALLOC - free previously allocated piece of memory
 31044                                  
 31045                                  ; MSDOS 6.0
 31046                                  ;----------------------------------------------------------------------------
 31047                                  ;**	$DEALLOC - Free Heap Memory
 31048                                  ;
 31049                                  ;	ENTRY	(es) = address of item
 31050                                  ;
 31051                                  ;	EXIT	'C' clear of OK
 31052                                  ;		'C' set if error
 31053                                  ;		  (AX) = error_invalid_block
 31054                                  ;	USES	???? BUGBUG
 31055                                  
 31056                                  ; MSDOS 2.11 (& MSDOS 3.3)
 31057                                  ;----------------------------------------------------------------------------
 31058                                  ;SUBTTL $DEALLOC - free previously allocated piece of memory
 31059                                  ;
 31060                                  ;   Assembler usage:
 31061                                  ;           MOV     ES,block
 31062                                  ;           MOV     AH,dealloc
 31063                                  ;           INT     21h
 31064                                  ;
 31065                                  ;   Error return:
 31066                                  ;           AX = error_invalid_block
 31067                                  ;              = error_arena_trashed
 31068                                  ;---------------------------------------------------------------------------- 
 31069                                  
 31070                                  _$DEALLOC:    
 31071                                  	; 04/08/2018 - Retro DOS v3.0
 31072                                  	;EnterCrit   critMem
 31073 0000666B E8FEB9                  	call	EcritMem ; MSDOS 3.3 & MSDOS 6.0
 31074                                  
 31075                                  	; MSDOS 6.0			; M016, M068 - Start
 31076                                  	;test	byte [DOS_FLAG],EXECA20OFF
 31077                                  					; Q: was the previous call an int 21
 31078                                  					;    exec call
 31079                                  	;jz	short deallocate	; N: continue
 31080                                  	;cmp	byte [A20OFF_COUNT], 0	; Q: is count 0
 31081                                  	;jne	short deallocate	; N: continue
 31082                                  	;mov	byte [A20OFF_COUNT], 1	; Y: set count to 1
 31083                                  ;deallocate:				; M016, M068 - End
 31084                                      
 31085 0000666E BF0000                  	MOV     DI,ARENA.SIGNATURE ; = 0
 31086 00006671 8CC0                            MOV     AX,ES
 31087 00006673 48                              DEC     AX
 31088 00006674 E8A5FE                          CALL    check_signature
 31089 00006677 720B                            JC      SHORT dealloc_err
 31090 00006679 26893E0100                      MOV     [ES:ARENA.OWNER],DI
 31091                                  	;LeaveCrit critMem
 31092 0000667E E8F3B9                  	call    LcritMem ; MSDOS 3.3 & MSDOS 6.0
 31093                                          ;transfer SYS_RET_OK
 31094 00006681 E979B0                  	JMP	SYS_RET_OK
 31095                                  
 31096                                  dealloc_err:
 31097                                  	;LeaveCrit critMem
 31098 00006684 E8EDB9                  	call    LcritMem ; MSDOS 3.3 & MSDOS 6.0
 31099                                          ;error	error_invalid_block
 31100                                  	;mov	al,9
 31101 00006687 B009                    	MOV	AL,error_invalid_block
 31102 00006689 E97DB0                  	JMP	SYS_RET_ERR
 31103                                  
 31104                                  ;	BREAK $AllocOper - get/set allocation mechanism
 31105                                  
 31106                                  ; MSDOS 6.0
 31107                                  ;----------------------------------------------------------------------------
 31108                                  ;**	$AllocOper - Get/Set Allocation Mechanism
 31109                                  ;
 31110                                  ;	Assembler usage:
 31111                                  ;           MOV     AH,AllocOper
 31112                                  ;           MOV     BX,method
 31113                                  ;           MOV     AL,func
 31114                                  ;           INT     21h
 31115                                  ;
 31116                                  ;	ENTRY	
 31117                                  ;		(al) = 0
 31118                                  ;		  Get allocation Strategy in (ax)
 31119                                  ;
 31120                                  ;		(al) = 1, (bx) = method = zw0000xy
 31121                                  ;		  Set allocation strategy.
 31122                                  ;		   w  = 1  => HIGH_ONLY
 31123                                  ;		   z  = 1  => HIGH_FIRST
 31124                                  ;		   xy = 00 => FIRST_FIT
 31125                                  ;		      = 01 => BEST_FIT
 31126                                  ;		      = 10 => LAST_FIT
 31127                                  ;
 31128                                  ;		(al) = 2
 31129                                  ;		  Get UMB link state in (al)
 31130                                  ;
 31131                                  ;		(al) = 3
 31132                                  ;		  Set UMB link state
 31133                                  ;		   (bx) = 0 => Unlink UMBs
 31134                                  ;		   (bx) = 1 => Link UMBs
 31135                                  ;
 31136                                  ;
 31137                                  ;	EXIT	'C' clear if OK
 31138                                  ;
 31139                                  ;		 if (al) = 0
 31140                                  ;		  (ax) = existing method
 31141                                  ;		 if (al) = 1
 31142                                  ;		  Sets allocation strategy
 31143                                  ;		 if (al) = 2
 31144                                  ;		  (al) = 0 => UMBs not linked
 31145                                  ;		  (al) = 1 => UMBs linked in
 31146                                  ;		 if (al) = 3
 31147                                  ;		  Links/Unlinks the UMBs into DOS chain
 31148                                  ;
 31149                                  ;		'C' set if error
 31150                                  ;		  AX = error_invalid_function
 31151                                  ;
 31152                                  ;	Rev. M000 - added support for HIGH_FIRST in (al) = 1. 7/9/90
 31153                                  ; 	Rev. M003 - added functions (al) = 2 and (al) = 3. 7/18/90
 31154                                  ;	Rev. M009 - (al) = 3 will return 'invalid function' in ax if
 31155                                  ;		    umbhead has'nt been initialized by sysinit and 'trashed
 31156                                  ;		    arena' if an arena sig is damaged.
 31157                                  ;----------------------------------------------------------------------------
 31158                                  
 31159                                  ; MSDOS 2.11 (& MSDOS 3.3)
 31160                                  ;----------------------------------------------------------------------------
 31161                                  ;SUBTTL $AllocOper - get/set allocation mechanism
 31162                                  ;
 31163                                  ;   Assembler usage:
 31164                                  ;           MOV     AH,AllocOper
 31165                                  ;           MOV     BX,method
 31166                                  ;           MOV     AL,func
 31167                                  ;           INT     21h
 31168                                  ;
 31169                                  ;   Error return:
 31170                                  ;           AX = error_invalid_function
 31171                                  ;----------------------------------------------------------------------------
 31172                                  
 31173                                  _$ALLOCOPER:
 31174                                  	; MSDOS 6.0
 31175                                  	;or	al, al
 31176                                  	;jz	short AllocGetStrat
 31177                                  	;cmp	al, 1
 31178                                  	;jz	short AllocSetStrat
 31179                                  	;cmp	al, 2
 31180                                  	;jz	short AllocGetLink
 31181                                  	;cmp	al, 3
 31182                                  	;jz	short AllocSetLink
 31183                                  
 31184                                  	; 15/04/2018
 31185 0000668C 3C01                    	CMP     AL,1
 31186 0000668E 720D                            JB      SHORT AllocOperGet
 31187 00006690 7414                            JZ      SHORT AllocOperSet
 31188                                  
 31189                                  AllocOperError:
 31190                                  	; 04/08/2018 - Retro DOS v3.0
 31191                                  	; MSDOS 3.3 (& MSDOS 6.0)	; Extended Error Locus	
 31192                                  	;mov	byte [ss:EXTERR_LOCUS],5
 31193 00006692 36C606[D102]05                  MOV     byte [SS:EXTERR_LOCUS],errLOC_Mem
 31194                                  	;error	error_invalid_function
 31195                                  	;mov	al,1
 31196 00006698 B001                    	MOV	AL,error_invalid_function
 31197                                  AllocOperErrj:
 31198 0000669A E96CB0                  	JMP	SYS_RET_ERR
 31199                                  
 31200                                  ;AllocArenaError:
 31201                                  	; MSDOS 6.0
 31202                                  	;MOV     byte [SS:EXTERR_LOCUS],errLOC_Mem
 31203                                  	;				; M009: Extended Error Locus
 31204                                  	;;error   error_arena_trashed	; M009:
 31205                                  	;MOV	AL,error_arena_trashed
 31206                                  	;;JMP	SYS_RET_ERR
 31207                                  	;jmp	short AllocOperErrj
 31208                                  
 31209                                  ;AllocGetStrat: 
 31210                                  	; MSDOS 6.0
 31211                                  AllocOperGet:
 31212 0000669D 36A0[B002]                      MOV     AL,[SS:AllocMethod]
 31213 000066A1 30E4                            XOR     AH,AH
 31214                                          ;transfer SYS_RET_OK
 31215 000066A3 E957B0                  	JMP	SYS_RET_OK
 31216                                  
 31217                                  ;AllocSetStrat: 
 31218                                  	; MSDOS 6.0
 31219                                  	;push	bx			; M000 - start
 31220                                  	;and	bx,STRAT_MASK 		; M064: mask off bit 6 & 7
 31221                                  	;cmp	bx,2			; BX must be 0-2
 31222                                  	;pop	bx			; M000 - end
 31223                                  	;ja	short AllocOperError
 31224                                  
 31225                                  AllocOperSet:
 31226 000066A6 36881E[B002]                    MOV     [SS:AllocMethod],BL
 31227                                          ;transfer SYS_RET_OK
 31228 000066AB E94FB0                  	JMP	SYS_RET_OK
 31229                                  
 31230                                  ;AllocGetLink:
 31231                                  	; MSDOS 6.0
 31232                                  	;mov	al,[UmbFlag]		; return link state in al
 31233                                  	;and 	al,LINKSTATE		
 31234                                  	;;transfer SYS_RET_OK
 31235                                  	;jmp	SYS_RET_OK
 31236                                  
 31237                                  ;AllocSetLink:
 31238                                  	; MSDOS 6.0			; M009 - start
 31239                                  	;mov	cx,[umb_head]		; cx = umb_head
 31240                                  	;cmp	cx,0FFFFh		; Q: has umb_head been initialized
 31241                                  	;je	short AllocOperError	; N: error
 31242                                  	;				; Y: continue
 31243                                  	;				; M009 - end
 31244                                  	;cmp	bx,1			
 31245                                  	;jb	short UnlinkUmbs
 31246                                  	;jz	short LinkUmbs
 31247                                  	;
 31248                                  	;jmp	short AllocOperError
 31249                                  	;
 31250                                  ;UnlinkUmbs:
 31251                                  	;test	byte[UmbFlag],LINKSTATE	; Q: umbs unlinked?
 31252                                  	;jz	short unlinked		; Y: return 
 31253                                  	;
 31254                                  	;call	GetLastArena		; get arena before umb_head in DS
 31255                                  	;jc	short AllocArenaError	; M009: arena trashed
 31256                                  	;
 31257                                  	;				; make it last
 31258                                  	;mov	byte [0],arena_signature_end
 31259                                  	;
 31260                                  	;and	byte [UmbFlag],~LINKSTATE ; indicate unlink'd state in umbflag
 31261                                  	;
 31262                                  ;unlinked:
 31263                                  	;;transfer SYS_RET_OK
 31264                                  	;jmp	SYS_RET_OK
 31265                                  
 31266                                  ;LinkUmbs:
 31267                                  	;test	byte [UmbFlag],LINKSTATE ; Q: umbs linked?
 31268                                  	;jnz	short linked		; Y: return
 31269                                  	;
 31270                                  	;call	GetLastArena		; get arena before umb_head
 31271                                  	;jc	short AllocArenaError	; M009: arena trashed
 31272                                  	;
 31273                                  	;				; make it normal. M061: ds points to
 31274                                  	;				; arena before umb_head
 31275                                  	;mov	byte [0],arena_signature_normal
 31276                                  	;
 31277                                  	;or	byte [UmbFlag],LINKSTATE ; indicate link'd state in umbflag
 31278                                  ;linked:
 31279                                  	;;transfer SYS_RET_OK
 31280                                  	;jmp	SYS_RET_OK
 31281                                  
 31282                                  ; MSDOS 6.0
 31283                                  ;--------------------------------------------------------------------------
 31284                                  ; Procedure Name : GetLastArena		-  M003
 31285                                  ;
 31286                                  ; Inputs	 : cx = umb_head
 31287                                  ;
 31288                                  ;
 31289                                  ; Outputs	 : If UMBs are linked
 31290                                  ;			ES = umb_head
 31291                                  ;			DS = arena before umb_head
 31292                                  ;		   else
 31293                                  ;			DS = last arena
 31294                                  ;			ES = next arena. will be umb_head if NC.
 31295                                  ;
 31296                                  ;		   CY if error
 31297                                  ;
 31298                                  ; Uses		 : DS, ES, DI, BX
 31299                                  ;--------------------------------------------------------------------------
 31300                                  	
 31301                                  ;Procedure	GetLastArena, NEAR
 31302                                  ;
 31303                                  ;	push	ax			; save ax
 31304                                  ;
 31305                                  ;	mov	ax, [arena_head]
 31306                                  ;	mov	es, ax			; es = arena_head
 31307                                  ;	xor	di, di
 31308                                  ;
 31309                                  ;	cmp     byte ptr es:[di],arena_signature_end
 31310                                  ;					; Q: is this the last arena
 31311                                  ;	je	GLA_done		; Y: return last arena in ES		
 31312                                  ;					
 31313                                  ;
 31314                                  ;GLA_next:
 31315                                  ;	mov	ds, ax
 31316                                  ;	call	arena_next		; ax, es -> next arena
 31317                                  ;	jc	GLA_err
 31318                                  ;
 31319                                  ;	test	[UmbFlag], LINKSTATE	; Q: are UMBs linked
 31320                                  ;	jnz	GLA_chkumb		; Y: terminating condition is 
 31321                                  ;					;    umb_head
 31322                                  ;					; N: terminating condition is 05Ah
 31323                                  ;
 31324                                  ;	cmp     byte ptr es:[di],arena_signature_end
 31325                                  ;					; Q: is this the last arena
 31326                                  ;	jmp	short @f
 31327                                  ;GLA_chkumb:
 31328                                  ;	cmp	ax, cx			; Q: is this umb_head
 31329                                  ;@@:
 31330                                  ;	jne	GLA_next		; N: get next arena
 31331                                  ;
 31332                                  ;GLA_done:
 31333                                  ;					; M061 - Start
 31334                                  ;	test	[UmbFlag], LINKSTATE	; Q: are UMBs linked
 31335                                  ;	jnz	GLA_ret			; Y: we're done
 31336                                  ;					; N: let us confirm that the next 
 31337                                  ;					;    arena is umb_head
 31338                                  ;	mov	ds, ax
 31339                                  ;	call	arena_next		; ax, es -> next arena
 31340                                  ;	jc	GLA_err
 31341                                  ;	cmp	ax, cx			; Q: is this umb_head
 31342                                  ;	jne	GLA_err			; N: error
 31343                                  ;					; M061 - End
 31344                                  ;
 31345                                  ;GLA_ret:				
 31346                                  ;	clc
 31347                                  ;	pop	ax			; M061
 31348                                  ;	ret				; M061
 31349                                  ;
 31350                                  ;GLA_err:
 31351                                  ;	stc				; M061
 31352                                  ;	pop	ax
 31353                                  ;	ret
 31354                                  ;
 31355                                  ;EndProc GetLastArena
 31356                                  
 31357                                  ;============================================================================
 31358                                  ; SRVCALL.ASM, MSDOS 6.0, 1991
 31359                                  ;============================================================================
 31360                                  ; 04/08/2018 - Retro DOS v3.0
 31361                                  
 31362                                  ;	TITLE SRVCALL - Server DOS call
 31363                                  ;	NAME  SRVCALL
 31364                                  
 31365                                  ;**	SRVCALL.ASM - Server DOS call functions
 31366                                  ;
 31367                                  ;
 31368                                  ;	$ServerCall
 31369                                  ;
 31370                                  ;	Modification history:
 31371                                  ;
 31372                                  ;	    Created: ARR 08 August 1983
 31373                                  
 31374                                  ;AsmVars <Installed>
 31375                                  
 31376                                  ;include dpl.asm
 31377                                  
 31378                                  ;Installed = TRUE
 31379                                  
 31380                                  ;BREAK <ServerCall -- Server DOS call>
 31381                                  ;----------------------------------------------------------------------------
 31382                                  ;
 31383                                  ; Procedure Name : $ServerCall
 31384                                  ;
 31385                                  ; Inputs:
 31386                                  ;	DS:DX -> DPL  (except calls 7,8,9)
 31387                                  ; Function:
 31388                                  ;	AL=0	Server DOS call
 31389                                  ;	AL=1	Commit All files
 31390                                  ;	AL=2	Close file by name (SHARING LOADED ONLY) DS:DX in DPL -> name
 31391                                  ;	AL=3	Close all files for DPL_UID
 31392                                  ;	AL=4	Close all files for DPL_UID/PID_PID
 31393                                  ;	AL=5	Get open file list entry
 31394                                  ;		    IN: BX File Index
 31395                                  ;			CX User Index
 31396                                  ;		    OUT:ES:DI -> Name
 31397                                  ;			BX = UID
 31398                                  ;		    CX = # locked blocks held by this UID
 31399                                  ;	AL=6	Get DOS data area
 31400                                  ;		    OUT: DS:SI -> Start
 31401                                  ;			CX size in bytes of swap if indos
 31402                                  ;			DX size in bytes of swap always
 31403                                  ;	AL=7	Get truncate flag
 31404                                  ;	AL=8	Set truncate flag
 31405                                  ;	AL=9	Close all spool files
 31406                                  ;	AL=10	SetExtendedError
 31407                                  ;
 31408                                  ;----------------------------------------------------------------------------
 31409                                  
 31410                                  _$ServerCall:
 31411                                  	; 05/08/2018 - Retro DOS v3.0
 31412                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 657Bh
 31413 000066AE 3C07                    	CMP	AL,7
 31414 000066B0 7204                    	JB	short SET_STUFF
 31415 000066B2 3C09                    	CMP	AL,9
 31416 000066B4 7612                    	JBE	short NO_SET_ID		; No DPL on calls 7,8,9
 31417                                  SET_STUFF:
 31418 000066B6 89D6                    	MOV	SI,DX			; Point to DPL with DS:SI
 31419                                  	;mov	bx,[si+12h]
 31420 000066B8 8B5C12                  	MOV	BX,[SI+DPL.UID]
 31421                                  
 31422                                  	; MSDOS 6.0
 31423                                  ;SR;
 31424                                  ; WIN386 updates the USER_ID itself. If WIN386 is present we skip the updating
 31425                                  ; of USER_ID
 31426                                  ;
 31427                                  	;test	byte [SS:IsWin386],1
 31428                                  	;jnz	short skip_win386
 31429                                  
 31430                                  ;hkn; SS override for user_id and proc_id
 31431                                  	; 15/08/2018
 31432 000066BB 36891E[EA02]            	MOV	[SS:USER_ID],BX		; Set UID
 31433                                  
 31434                                  ;skip_win386:
 31435                                  
 31436 000066C0 8B5C14                  	MOV	BX,[SI+DPL.PID]
 31437 000066C3 36891E[E802]            	MOV	[SS:PROC_ID],BX		; Set process ID
 31438                                  NO_SET_ID:
 31439 000066C8 36FF36[3A14]            	PUSH	word [SS:SERVERLEAVE]	; push return address
 31440 000066CD 36FF36[3814]            	PUSH	word [SS:SERVERTAB]	; push table address
 31441 000066D2 50                      	PUSH	AX
 31442 000066D3 E8CDB8                  	call	TableDispatch
 31443                                  
 31444                                  ;hkn; SS override
 31445                                  	;mov 	byte [SS:EXETERR_LOCUS],1
 31446 000066D6 36C606[D102]01          	MOV	byte [SS:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 31447                                  	;error	error_invalid_function
 31448                                  	;mov	al,1
 31449 000066DC B001                    	MOV	AL,error_invalid_function
 31450                                  servercall_error:
 31451 000066DE E928B0                  	JMP	SYS_RET_ERR
 31452                                  
 31453                                  SERVERRETURN:
 31454 000066E1 C3                      	retn
 31455                                  
 31456                                  ; Commit - iterate through the open file list and make sure that the
 31457                                  ; directory entries are correctly updated.
 31458                                  
 31459                                  COMMIT_ALL:
 31460 000066E2 31DB                    	XOR	BX,BX			;   for (i=0; ThisSFT=getSFT(i); i++)
 31461 000066E4 16                      	push	ss
 31462 000066E5 1F                      	pop	ds
 31463 000066E6 E883B9                  	call	EcritSFT		; Gonna scan SFT cache, lock it down
 31464                                  CommitLoop:
 31465 000066E9 53                      	push	bx
 31466 000066EA E82501                  	call	SFFromSFN
 31467 000066ED 7223                    	JC	short CommitDone
 31468 000066EF 26833D00                	cmp	word [es:di],0
 31469                                  	;CMP	word [ES:DI+SF_ENTRY.sf_Ref_Count],0
 31470                                  					; if (ThisSFT->refcount != 0)
 31471 000066F3 7419                    	JZ	short CommitNext
 31472                                  	;cmp	word [es:di],0FFFFh ; -1
 31473 000066F5 26833DFF                	cmp	word [ES:DI],sf_busy
 31474                                  	;CMP	word [ES:DI+SF_ENTRY.sf_Ref_Count],sf_busy  
 31475                                  					; BUSY SFTs have god knows what
 31476 000066F9 7413                    	JZ	short CommitNext	;   in them.
 31477 000066FB 26F745050080            	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 31478 00006701 750B                    	JNZ	short CommitNext	;  Skip Network SFTs so the SERVER
 31479                                  					;	doesn't deadlock
 31480 00006703 893E[3605]              	MOV	[THISSFT],DI
 31481 00006707 8C06[3805]              	MOV	[THISSFT+2],ES
 31482 0000670B E8B1D4                  	call	DOS_COMMIT		;	DOSCommit ();
 31483                                  CommitNext:
 31484 0000670E 5B                      	pop	bx
 31485 0000670F 43                      	INC	BX
 31486 00006710 EBD7                    	JMP	short CommitLoop
 31487                                  CommitDone:
 31488 00006712 E85FB9                  	call	LcritSFT
 31489 00006715 5B                      	pop	bx
 31490 00006716 E9E4AF                  	jmp	SYS_RET_OK
 31491                                  
 31492                                  CLOSE_NAME:
 31493                                  
 31494                                  ;if installed
 31495                                  
 31496                                  ;hkn; SS override
 31497 00006719 36FF1E[7000]            	Call	far [SS:JShare+(5*4)] ; 5 = MFTcloN
 31498                                  ;else
 31499                                  ;	Call	MFTcloN
 31500                                  ;endif
 31501                                  
 31502                                  CheckReturns:
 31503 0000671E 7203                    	JC	short func_err
 31504 00006720 E9DAAF                  	jmp	SYS_RET_OK
 31505                                  func_err:
 31506                                  	;transfer SYS_RET_ERR
 31507                                  	;jmp	SYS_RET_ERR
 31508 00006723 EBB9                    	jmp	short servercall_error
 31509                                  
 31510                                  CLOSE_UID:
 31511                                  
 31512                                  ;if installed
 31513                                  ;hkn; SS override
 31514 00006725 36FF1E[6800]            	Call	far [SS:JShare+(3*4)] ; 3 = MTFTclu
 31515                                  ;else
 31516                                  ;	Call	MFTclU
 31517                                  ;endif
 31518 0000672A EBF2                    	JMP	short CheckReturns
 31519                                  
 31520                                  CLOSE_UID_PID:
 31521                                  
 31522                                  ;if installed
 31523                                  ;hkn; SS override
 31524 0000672C 36FF1E[6C00]            	Call	far [SS:JShare+(4*4)] ; 4 = MFTCloseP 
 31525                                  ;else
 31526                                  ;	Call	MFTCloseP
 31527                                  ;endif
 31528 00006731 EBEB                    	JMP	CheckReturns
 31529                                  
 31530                                  GET_LIST:
 31531                                  
 31532                                  ;if installed
 31533                                  ;hkn; SS override
 31534 00006733 36FF1E[8000]            	Call	far [SS:JShare+(9*4)] ; 9 = MFT_get
 31535                                  ;else
 31536                                  ;	Call	MFT_get
 31537                                  ;endif
 31538 00006738 72E9                    	JC	short func_err
 31539 0000673A E8CEAE                  	call	Get_User_Stack
 31540                                  	;mov	[si+2],bx
 31541 0000673D 895C02                  	MOV	[SI+user_env.user_BX],BX
 31542                                  	;mov	[si+10],di
 31543 00006740 897C0A                  	MOV	[SI+user_env.user_DI],DI
 31544                                  	;mov	[si+16],es
 31545 00006743 8C4410                  	MOV	[SI+user_env.user_ES],ES
 31546                                  SetCXOK:
 31547                                  	;mov	[si+4],cx
 31548 00006746 894C04                  	MOV	[SI+user_env.user_CX],CX
 31549 00006749 E9B1AF                  	jmp	SYS_RET_OK
 31550                                  
 31551                                  SRV_CALL:
 31552 0000674C 58                      	POP	AX			; get rid of call to $srvcall
 31553 0000674D 1E                      	push	ds
 31554 0000674E 56                      	push	si
 31555 0000674F E8B9AE                  	call	Get_User_Stack
 31556 00006752 5F                      	pop	di
 31557 00006753 07                      	pop	es
 31558                                  ;
 31559                                  ; DS:SI point to stack
 31560                                  ; ES:DI point to DPL
 31561                                  ;
 31562 00006754 E82BB8                  	call	XCHGP
 31563                                  ;
 31564                                  ; DS:SI point to DPL
 31565                                  ; ES:DI point to stack
 31566                                  ;
 31567                                  ; We now copy the registers from DPL to save stack
 31568                                  ;
 31569 00006757 56                      	push	si
 31570 00006758 B90600                  	MOV	CX,6
 31571 0000675B F3A5                    	REP	MOVSW			; Put in AX,BX,CX,DX,SI,DI
 31572 0000675D 47                      	INC	DI
 31573 0000675E 47                      	INC	DI			; Skip user_BP
 31574 0000675F A5                      	MOVSW				; DS
 31575 00006760 A5                      	MOVSW				; ES
 31576 00006761 5E                      	pop	si			; DS:SI -> DPL
 31577 00006762 8B04                    	mov	ax,[SI]
 31578                                  	;MOV	AX,[SI+DPL.AX]
 31579                                  	;mov	bx,[si+2]
 31580 00006764 8B5C02                  	MOV	BX,[SI+DPL.BX]
 31581                                  	;mov	cx,[si+4]
 31582 00006767 8B4C04                  	MOV	CX,[SI+DPL.CX]
 31583                                  	;mov	dx,[si+6]
 31584 0000676A 8B5406                  	MOV	DX,[SI+DPL.DX]
 31585                                  	;mov	di,[si+10]
 31586 0000676D 8B7C0A                  	MOV	DI,[SI+DPL.DI]
 31587                                  	;mov	es,[si+14]
 31588 00006770 8E440E                  	MOV	ES,[SI+DPL.ES]
 31589                                  	;push	word [si+8]
 31590 00006773 FF7408                  	PUSH	word [SI+DPL.SI]
 31591                                  	;mov	ds,[si+12]
 31592 00006776 8E5C0C                  	MOV	DS,[SI+DPL.DS]
 31593 00006779 5E                      	POP	SI
 31594                                  
 31595                                  ;hkn; SS override for next 3
 31596 0000677A 368C1E[7E05]            	MOV	[SS:SAVEDS],DS
 31597 0000677F 36891E[7C05]            	MOV	[SS:SAVEBX],BX
 31598 00006784 36C606[0D05]FF          	MOV	byte [SS:FSHARING],-1	; set no redirect flag
 31599 0000678A E9B8AD                  	jmp	REDISP
 31600                                  
 31601                                  GET_DOS_DATA:
 31602 0000678D 16                      	push	ss
 31603 0000678E 07                      	pop	es
 31604 0000678F BF[CE02]                	MOV     DI,SWAP_START
 31605 00006792 B9[090A]                	MOV     CX,SWAP_END
 31606 00006795 BA[E602]                	MOV     DX,SWAP_ALWAYS
 31607 00006798 29F9                    	SUB     CX,DI
 31608 0000679A 29FA                    	SUB     DX,DI
 31609 0000679C D1E9                    	SHR     CX,1                    ; div by 2, remainder in carry
 31610 0000679E 83D100                  	ADC     CX,0                    ; div by 2 + round up
 31611 000067A1 D1E1                    	SHL     CX,1                    ; round up to 2 boundary.
 31612 000067A3 E865AE                  	call	Get_User_Stack
 31613                                  	;mov	[si+14],es
 31614 000067A6 8C440E                  	MOV     [SI+user_env.user_DS],ES
 31615                                  	;mov	[si+8],di
 31616 000067A9 897C08                  	MOV     [SI+user_env.user_SI],DI
 31617                                  	;mov	[si+6],dx
 31618 000067AC 895406                  	MOV     [SI+user_env.user_DX],DX
 31619 000067AF EB95                    	JMP	short SetCXOK
 31620                                  
 31621                                  SPOOL_OPER:
 31622                                  	;CallInstall NETSpoolOper,MultNET,37,AX,BX
 31623                                  
 31624 000067B1 50                      	push    ax
 31625 000067B2 B82511                  	mov     ax, 1125h
 31626 000067B5 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - REDIRECTED PRINTER MODE
 31627                                  			; STACK: WORD subfunction
 31628                                  			; Return: CF set on error, AX = error code
 31629                                  			; STACK unchanged
 31630 000067B7 5B                      	pop	bx
 31631 000067B8 7203                    	JC	short func_err2
 31632 000067BA E940AF                  	jmp	SYS_RET_OK
 31633                                  func_err2:
 31634 000067BD E949AF                  	jmp	SYS_RET_ERR
 31635                                  
 31636                                  ;Break	<$SetExtendedError - set extended error for later retrieval>
 31637                                  ;--------------------------------------------------------------------------
 31638                                  ;
 31639                                  ; Procedure Name : $SetExtendedError
 31640                                  ;
 31641                                  ; $SetExtendedError takes extended error information and loads it up for the
 31642                                  ; next extended error call.  This is used by interrupt-level proccessors to
 31643                                  ; mask their actions.
 31644                                  ;
 31645                                  ;   Inputs: DS:SI points to DPL which contains all registers
 31646                                  ;   Outputs: none
 31647                                  ;
 31648                                  ;---------------------------------------------------------------------------
 31649                                  
 31650                                  _$SetExtendedError:
 31651                                  
 31652                                  ;hkn; SS override for all variables used
 31653                                  
 31654 000067C0 8B04                    	mov	ax,[si]
 31655                                  	;MOV	AX,[SI+DPL.AX]
 31656 000067C2 36A3[D202]              	MOV	[SS:EXTERR],AX
 31657                                  	;mov	ax,[si+10]
 31658 000067C6 8B440A                  	MOV	AX,[SI+DPL.DI]
 31659 000067C9 36A3[D602]              	MOV	[SS:EXTERRPT],AX
 31660                                  	;mov	ax,[si+14]
 31661 000067CD 8B440E                  	MOV	AX,[SI+DPL.ES]
 31662 000067D0 36A3[D802]              	MOV	[SS:EXTERRPT+2],AX
 31663                                  	;mov	ax,[si+2]
 31664 000067D4 8B4402                  	MOV	AX,[SI+DPL.BX]
 31665 000067D7 36A3[D402]              	MOV	[SS:EXTERR_ACTION],AX
 31666                                  	;mov	ax,[si+4]
 31667 000067DB 8B4404                  	MOV	AX,[SI+DPL.CX]
 31668 000067DE 368826[D102]            	MOV	[SS:EXTERR_LOCUS],AH
 31669 000067E3 C3                      	retn
 31670                                  
 31671                                  ;============================================================================
 31672                                  ; UTIL.ASM, MSDOS 6.0, 1991
 31673                                  ;============================================================================
 31674                                  ; 05/08/2018 - Retro DOS v3.0
 31675                                  
 31676                                  ;**	Handle related utilities for MSDOS 2.X.
 31677                                  ;
 31678                                  ;	pJFNFromHandle	written
 31679                                  ;	SFFromHandle	written
 31680                                  ;	SFFromSFN	written
 31681                                  ;	JFNFree 	written
 31682                                  ;	SFNFree 	written
 31683                                  ;
 31684                                  ;	Modification history:
 31685                                  ;
 31686                                  ;	    Created: MZ 1 April 1983
 31687                                  
 31688                                  ;	BREAK	<pJFNFromHandle - return pointer to JFN table entry>
 31689                                  
 31690                                  ;**	pJFNFromHandle - Translate Handle to Pointer to JFN
 31691                                  ;----------------------------------------------------------------------------
 31692                                  ;	pJFNFromHandle takes a file handle and turns that into a pointer to
 31693                                  ;	the JFN entry (i.e., to a byte holding the internal file handle #)
 31694                                  ;
 31695                                  ;	NOTE:
 31696                                  ;	  This routine is called from $CREATE_PROCESS_DATA_BLOCK which is called
 31697                                  ;	  at DOSINIT time with SS NOT DOSGROUP
 31698                                  ;
 31699                                  ;	ENTRY	(bx) = handle
 31700                                  ;	EXIT	'C' clear if ok
 31701                                  ;		  (es:di) = address of JFN value
 31702                                  ;		'C' set if error
 31703                                  ;		  (ax) = error code
 31704                                  ;	USES	AX, DI, ES, Flags
 31705                                  ;----------------------------------------------------------------------------
 31706                                  
 31707                                  pJFNFromHandle:
 31708                                  
 31709 000067E4 2E8E06[DE02]            	MOV	ES,[cs:CurrentPDB]	; get user process data block
 31710                                  	;cmp	bx,[ES:32h]
 31711 000067E9 263B1E3200              	CMP	BX,[ES:PDB.JFN_Length]	; is handle greater than allocated
 31712 000067EE 7204                    	JB	short pjfn10		; no, get offset
 31713                                  ReturnCarry_inv_hndl: ; 05/08/2018 - Retro DOS v3.0
 31714                                  	;mov	al,6
 31715 000067F0 B006                    	MOV     AL,error_invalid_handle ; appropriate error
 31716                                  ReturnCarry:
 31717 000067F2 F9                      	STC                             ; signal error
 31718 000067F3 C3                      	retn				; go back
 31719                                  pjfn10: 
 31720                                  	;les	di,[es:34h]
 31721 000067F4 26C43E3400              	LES	DI,[ES:PDB.JFN_Pointer]	; get pointer to beginning of table
 31722 000067F9 01DF                    	ADD	DI,BX			; add in offset, clear 'C'
 31723                                  	;clc
 31724                                  pJFNFromHandle_error:
 31725 000067FB C3                      	retn
 31726                                  
 31727                                  ;BREAK <SFFromHandle - return pointer (or error) to SF entry from handle>
 31728                                  ;----------------------------------------------------------------------------
 31729                                  ;
 31730                                  ; Procedure Name : SFFromHandle
 31731                                  ;
 31732                                  ; SFFromHandle - Given a handle, get JFN and then index into SF table
 31733                                  ;
 31734                                  ;   Input:      BX has handle
 31735                                  ;   Output:     Carry Set
 31736                                  ;                   AX has error code
 31737                                  ;               Carry Reset
 31738                                  ;                   ES:DI has pointer to SF entry
 31739                                  ;   Registers modified: If error, AX,ES, else ES:DI
 31740                                  ; NOTE:
 31741                                  ;   This routine is called from $CREATE_PROCESS_DATA_BLOCK which is called
 31742                                  ;       at DOSINIT time with SS NOT DOSGROUP
 31743                                  ;
 31744                                  ;----------------------------------------------------------------------------
 31745                                  
 31746                                  SFFromHandle:
 31747 000067FC E8E5FF                  	CALL    pJFNFromHandle          ; get jfn pointer
 31748                                  	;retc				; return if error
 31749 000067FF 72FA                    	jc	short pJFNFromHandle_error
 31750 00006801 26803DFF                	CMP     BYTE [ES:DI],-1		; unused handle
 31751                                  	;JNZ	short GetSF		; nope, suck out SF
 31752                                  	;;mov	al,6
 31753                                  	;MOV	AL,error_invalid_handle ; appropriate error
 31754                                  	;jmp	short ReturnCarry	; signal it
 31755 00006805 74E9                    	jz	short ReturnCarry_inv_hndl ; Retro DOS v3.0 modification
 31756                                  GetSF:
 31757 00006807 53                      	push	bx			; save handle
 31758 00006808 268A1D                  	MOV     BL,[ES:DI]		; get SFN
 31759 0000680B 30FF                    	XOR     BH,BH                   ; ignore upper half
 31760 0000680D E80200                  	CALL    SFFromSFN               ; get real sf spot
 31761 00006810 5B                      	pop	bx			; restore
 31762 00006811 C3                      	retn                          ; say goodbye
 31763                                  
 31764                                  ;BREAK <SFFromSFN - index into SF table for SFN>
 31765                                  
 31766                                  ;**	SFFromSFN - Get an SF Table entry from an SFN
 31767                                  ;----------------------------------------------------------------------------
 31768                                  ;	SFFromSfn uses an SFN to index an entry into the SF table.  This
 31769                                  ;	is more than just a simple index instruction because the SF table
 31770                                  ;	can be made up of multiple pieces chained together. We follow the
 31771                                  ;	chain to the right piece and then do the index operation.
 31772                                  ;
 31773                                  ;   NOTE:
 31774                                  ;	This routine is called from SFFromHandle which is called
 31775                                  ;       at DOSINIT time with SS NOT DOSGROUP
 31776                                  ;
 31777                                  ;	ENTRY	BX has SF index
 31778                                  ;	EXIT	'C' clear if OK
 31779                                  ;		  ES:DI points to SF entry
 31780                                  ;		'C' set if index too large
 31781                                  ;	USES	BX, DI, ES
 31782                                  ;----------------------------------------------------------------------------
 31783                                  
 31784                                  SFFromSFN:
 31785 00006812 2EC43E[2A00]            	LES	DI,[CS:SFT_ADDR]	; (es:di) = start of SFT table
 31786                                  sfsfn5:	
 31787                                  	;cmp	bx,[es:di+4]
 31788 00006817 263B5D04                	CMP	BX,[ES:DI+SFT.SFCount]	; is handle in this table?
 31789 0000681B 720E                    	JB	short sfsfn7		; yes, go grab it
 31790                                  	;sub	bx,[es:di+4]
 31791 0000681D 262B5D04                	SUB     BX,[ES:DI+SFT.SFCount]
 31792 00006821 26C43D                  	les	di,[es:di] ; 14/08/2018
 31793                                  	;LES	DI,[ES:DI+SFT.SFLink]	; get next table segment
 31794 00006824 83FFFF                  	CMP     DI,-1                   ; end of tables?
 31795 00006827 75EE                    	JNZ	short sfsfn5		; no, try again
 31796 00006829 F9                      	STC
 31797 0000682A C3                      	retn				; return with error, not found
 31798                                  
 31799                                  sfsfn7:
 31800 0000682B 50                      	push	ax
 31801                                  	;mov	ax,53
 31802 0000682C B83500                  	MOV     AX,SF_ENTRY.size	; put it in a nice place
 31803 0000682F F6E3                    	MUL	BL			; (ax) = offset into this SF block
 31804 00006831 01C7                    	ADD	DI,AX			; add base of SF block
 31805 00006833 58                      	pop	ax
 31806                                  	;add	di,6
 31807 00006834 83C706                  	ADD	DI,SFT.SFTable		; offset into structure, 'C' cleared
 31808 00006837 C3                      	retn				; return with 'C' clear
 31809                                  
 31810                                  ;	BREAK <JFNFree - return a jfn pointer if one is free>
 31811                                  
 31812                                  ;**	JFNFree - Find a Free JFN Slot
 31813                                  ;----------------------------------------------------------------------------
 31814                                  ;	JFNFree scansthrough the JFN table and returnsa pointer to a free slot
 31815                                  ;
 31816                                  ;	ENTRY	(ss) = DOSDATA
 31817                                  ;	EXIT	'C' clear if OK
 31818                                  ;		  (bx) = new handle
 31819                                  ;		  (es:di) = pointer to JFN slot
 31820                                  ;		'C' set if error
 31821                                  ;		  (al) = error code
 31822                                  ;	USES	bx, di, es, flags
 31823                                  ;----------------------------------------------------------------------------
 31824                                  
 31825                                  JFNFree:
 31826 00006838 31DB                    	XOR	BX,BX			; (bx) = initial JFN to try
 31827                                  jfnf1:	
 31828 0000683A E8A7FF                  	CALL	pJFNFromHandle		; get the appropriate handle
 31829 0000683D 7209                    	JC	short jfnf5		; no more handles
 31830 0000683F 26803DFF                	CMP     BYTE [ES:DI],-1		; free?
 31831 00006843 7405                    	je	short jfnfx		; yes, carry is clear
 31832 00006845 43                      	INC     BX                      ; no, next handle
 31833 00006846 EBF2                    	JMP	short jfnf1		; and try again
 31834                                  
 31835                                  ;	Error.	'C' set
 31836                                  jfnf5:	
 31837                                  	;mov	al,4
 31838 00006848 B004                    	MOV	AL,error_too_many_open_files
 31839                                  jfnfx:	
 31840 0000684A C3                      	retn				; bye
 31841                                  
 31842                                  ;	BREAK <SFNFree - Allocate a free SFN>
 31843                                  
 31844                                  ;**	SFNFree - Allocate a Free SFN/SFT
 31845                                  ;----------------------------------------------------------------------------
 31846                                  ;	SFNFree scans through the sf table looking for a free entry
 31847                                  ;	If it finds one it partially allocates it by setting SFT_REF_COUNT = -1
 31848                                  ;
 31849                                  ;	The problem is that we want to mark the SFT busy so that other threads
 31850                                  ;	can't allocate the SFT before we're finished marking it up.  However,
 31851                                  ;	we can't just mark it busy because we may get blown out of our open
 31852                                  ;	by INT24 and leave the thing orphaned.	To solve this we mark it
 31853                                  ;	"allocation in progress" by setting SFT_REF_COUNT = -1.  If we see
 31854                                  ;	an SFT with this value we look to see if it belongs to this user
 31855                                  ;	and process.  If it does belong to us then it must be an orphan
 31856                                  ;	and we reclaim it.
 31857                                  ;
 31858                                  ;	BUGBUG - improve the performance. I guess it's smaller to call SFFromSFN
 31859                                  ;		over and over, but we could at least set a high water mark...
 31860                                  ;		cause an N^2 loop calling slow SFFromSFN is real slow, too slow
 31861                                  ;		even though this is not a frequently called routine - jgl
 31862                                  ;
 31863                                  ;	ENTRY	(ss) = DOSDATA
 31864                                  ;	EXIT	'C' clear if no error
 31865                                  ;		  (bx) = SFN
 31866                                  ;		  (es:di) = pointer to SFT
 31867                                  ;		  es:[di].SFT_REF_COUNT = -1
 31868                                  ;		'C' set if error
 31869                                  ;		  (al) = error code
 31870                                  ;	USES	bx, di, es, Flags
 31871                                  ;----------------------------------------------------------------------------
 31872                                  
 31873                                  SFNFree:
 31874                                  	;12/08/2018
 31875                                  	;05/08/2018 - Retro DOS v3.0
 31876                                  	; MSDOS 6.0
 31877 0000684B 50                      	push	ax
 31878 0000684C 31DB                    	xor	bx,bx			; (bx) = SFN to consider
 31879                                  sfnf5:	
 31880 0000684E 53                      	push	bx
 31881 0000684F E8C0FF                  	call	SFFromSFN		; get the potential handle
 31882 00006852 5B                      	pop	bx
 31883 00006853 723A                    	jc	short sfnf95		; no more free SFNs
 31884 00006855 26833D00                	cmp	word [ES:DI],0
 31885                                  	;cmp	word [ES:DI+SF_ENTRY.sf_Ref_Count],0 ; free?
 31886 00006859 741D                    	je	short sfnf20			; yep, got one
 31887                                  	
 31888                                  	;cmp	word [es:di],0FFFFh ; -1
 31889 0000685B 26833DFF                	cmp	word [ES:DI],sf_busy
 31890                                  	;cmp	word [ES:DI+SF_ENTRY.sf_ref_count],sf_busy
 31891 0000685F 7403                    	je	short sfnf10		; special busy mark
 31892                                  sfnf7:	
 31893 00006861 43                      	inc	bx			; try the next one
 31894 00006862 EBEA                    	jmp	short sfnf5
 31895                                  
 31896                                  ;	The SFT has the special "busy" mark; if it belongs to us then
 31897                                  ;	it was abandoned during a earlier call and we can use it.
 31898                                  ;
 31899                                  ;	(bx)	= SFN
 31900                                  ;	(es:di) = pointer to SFT
 31901                                  ;	(TOS)	= caller's (ax)
 31902                                  
 31903                                  sfnf10:	
 31904 00006864 36A1[EA02]              	mov	ax,[SS:USER_ID]
 31905                                  	;cmp	[es:di+2Fh],ax
 31906 00006868 2639452F                	cmp	[ES:DI+SF_ENTRY.sf_UID],ax
 31907 0000686C 75F3                    	jnz	short sfnf7		; not ours
 31908 0000686E 36A1[E802]              	mov	ax,[SS:PROC_ID]
 31909                                  	;cmp	[es:di+31h],ax
 31910 00006872 26394531                	cmp	[ES:DI+SF_ENTRY.sf_PID],ax
 31911 00006876 75E9                    	jnz	short sfnf7		; can't use this one, try the next
 31912                                  
 31913                                  ;	We have an SFT to allocate
 31914                                  ;
 31915                                  ;	(bx)	= SFN
 31916                                  ;	(es:di) = pointer to SFT
 31917                                  ;	(TOS)	= caller's (ax)
 31918                                  
 31919                                  sfnf20:
 31920                                  	; cf = 0 ;; Retro DOS v3.0
 31921                                  
 31922                                  	;mov	word [es:di],0FFFFh
 31923 00006878 26C705FFFF              	mov	word [ES:DI],sf_busy
 31924                                  					; make sure that this is allocated
 31925                                  	;mov	word [ES:DI+SF_ENTRY.sf_ref_count],sf_busy
 31926                                  
 31927 0000687D 36A1[EA02]              	mov	ax,[SS:USER_ID]
 31928                                  	;mov	[es:di+2Fh],ax
 31929 00006881 2689452F                	mov	[ES:DI+SF_ENTRY.sf_UID],ax
 31930 00006885 36A1[E802]              	mov	ax,[SS:PROC_ID]
 31931                                  	;mov	[es:di+31h],ax
 31932 00006889 26894531                	mov	[es:DI+SF_ENTRY.sf_PID],ax
 31933                                  sfnf21: ;; Retro DOS v3.0
 31934 0000688D 58                      	pop	ax
 31935                                  	;clc
 31936 0000688E C3                      	retn				; return with no error
 31937                                  
 31938                                  ;**	Error - no more free SFNs
 31939                                  ;
 31940                                  ;	'C' set
 31941                                  ;	(TOS) = saved ax
 31942                                  
 31943                                  sfnf95: 
 31944 0000688F 58                      	pop	ax
 31945                                  	;mov	al,4
 31946 00006890 B004                    	mov	al,error_too_many_open_files
 31947 00006892 C3                      	retn				; return with 'C' and error
 31948                                  
 31949                                  ;============================================================================
 31950                                  ; MACRO.ASM, MSDOS 6.0, 1991
 31951                                  ;============================================================================
 31952                                  ; Retro	DOS v3.0 - 11/07/2018
 31953                                  
 31954                                  ;	TITLE	MACRO - Pathname and macro related internal routines
 31955                                  ;	NAME	MACRO
 31956                                  
 31957                                  ;	Microsoft Confidential
 31958                                  ;	Copyright (C) Microsoft Corporation 1991
 31959                                  ;	All Rights Reserved.
 31960                                  
 31961                                  ;**	MACRO.ASM
 31962                                  ;
 31963                                  ;	$AssignOper
 31964                                  ;	FIND_DPB
 31965                                  ;	InitCDS
 31966                                  ;	$UserOper
 31967                                  ;	GetVisDrv
 31968                                  ;	GetThisDrv
 31969                                  ;	GetCDSFromDrv
 31970                                  ;
 31971                                  ;   Revision history:
 31972                                  ;
 31973                                  ;	Created: MZ 4 April 1983
 31974                                  ;		 MZ 18 April 1983   Make TransFCB handle extended FCBs
 31975                                  ;		 AR 2 June 1983     Define/Delete macro for NET redir.
 31976                                  ;		 MZ 3 Nov 83	    Fix InitCDS to reset length to 2
 31977                                  ;		 MZ 4 Nov 83	    Fix NetAssign to use STRLEN only
 31978                                  ;		 MZ 18 Nov 83	    Rewrite string processing for subtree
 31979                                  ;				    aliasing.
 31980                                  ;
 31981                                  ;   MSDOS performs several types of name translation. First, we maintain for
 31982                                  ;   each valid drive letter the text of the current directory on that drive.
 31983                                  ;   For invalid drive letters, there is no current directory so we pretend to
 31984                                  ;   be at the root. A current directory is either the raw local directory
 31985                                  ;   (consisting of drive:\path) or a local network directory (consisting of
 31986                                  ;   \\machine\path. There is a limit on the point to which a .. is allowed.
 31987                                  ;
 31988                                  ;   Given a path, MSDOS will transform this into a real from-the-root path
 31989                                  ;   without . or .. entries. Any component that is > 8.3 is truncated to
 31990                                  ;   this and all * are expanded into ?'s.
 31991                                  ;
 31992                                  ;   The second part of name translation involves subtree aliasing. A list of
 31993                                  ;   subtree pairs is maintained by the external utility SUBST. The results of
 31994                                  ;   the previous 'canonicalization' are then examined to see if any of the
 31995                                  ;   subtree pairs is a prefix of the user path. If so, then this prefix is
 31996                                  ;   replaced with the other subtree in the pair.
 31997                                  ;
 31998                                  ;   A third part involves mapping this "real" path into a "physical" path.  A
 31999                                  ;   list of drive/subtree pairs are maintained by the external utility JOIN.
 32000                                  ;   The output of the previous translation is examined to see if any of the
 32001                                  ;   subtrees in this list are a prefix of the string. If so, then the prefix
 32002                                  ;   is replaced by the appropriate drive letter. In this manner, we can
 32003                                  ;   'mount' one device under another.
 32004                                  ;
 32005                                  ;   The final form of name translation involves the mapping of a user's
 32006                                  ;   logical drive number into the internal physical drive. This is
 32007                                  ;   accomplished by converting the drive number into letter:CON, performing
 32008                                  ;   the above translation and then converting the character back into a drive
 32009                                  ;   number.
 32010                                  ;
 32011                                  ;   There are two main entry points: TransPath and TransFCB. TransPath will
 32012                                  ;   take a path and form the real text of the pathname with all . and ..
 32013                                  ;   removed. TransFCB will translate an FCB into a path and then invoke
 32014                                  ;   TransPath.
 32015                                  ;
 32016                                  ;	A000	version 4.00  Jan. 1988
 32017                                  
 32018                                  ;Installed = TRUE
 32019                                  
 32020                                  ;	I_need	ThisCDS,DWORD		; pointer to CDS used
 32021                                  ;	I_need	CDSAddr,DWORD		; pointer to CDS table
 32022                                  ;	I_need	CDSCount,BYTE		; number of CDS entries
 32023                                  ;	I_need	CurDrv,BYTE		; current macro assignment (old
 32024                                  ;					; current drive)
 32025                                  ;	I_need	NUMIO,BYTE		; Number of physical drives
 32026                                  ;	I_need	fSharing,BYTE		; TRUE => no redirection allowed
 32027                                  ;	I_need	DummyCDS,80h		; buffer for dummy cds
 32028                                  ;	I_need	DIFFNAM,BYTE		; flag for MyName being set
 32029                                  ;	I_need	MYNAME,16		; machine name
 32030                                  ;	I_need	MYNUM,WORD		; machine number
 32031                                  ;	I_need	DPBHEAD,DWORD		; beginning of DPB chain
 32032                                  ;	I_need	EXTERR_LOCUS,BYTE	; Extended Error Locus
 32033                                  ;	I_need	DrvErr,BYTE		; drive error
 32034                                  
 32035                                  ;BREAK <$AssignOper -- Set up a Macro>
 32036                                  ;----------------------------------------------------------------------------
 32037                                  ; Inputs:
 32038                                  ;	AL = 00 get assign mode 		    (ReturnMode)
 32039                                  ;	AL = 01 set assign mode 		    (SetMode)
 32040                                  ;	AL = 02 get attach list entry		    (GetAsgList)
 32041                                  ;	AL = 03 Define Macro (attch start)
 32042                                  ;	    BL = Macro type
 32043                                  ;	       = 0 alias
 32044                                  ;	       = 1 file/device
 32045                                  ;	       = 2 drive
 32046                                  ;	       = 3 Char device -> network
 32047                                  ;	       = 4 File device -> network
 32048                                  ;	    DS:SI -> ASCIZ source name
 32049                                  ;	    ES:DI -> ASCIZ destination name
 32050                                  ;	AL = 04 Cancel Macro
 32051                                  ;	    DS:SI -> ASCIZ source name
 32052                                  ;	AL = 05 Modified get attach list entry
 32053                                  ;	AL = 06 Get ifsfunc item
 32054                                  ;	AL = 07 set in_use of a drive's CDS
 32055                                  ;	     DL = drive number, 0=default  0=A,,
 32056                                  ;	AL = 08 reset in_use of a drive's CDS
 32057                                  ;	     DL = drive number, 0=A, 1=B,,,
 32058                                  ; Function:
 32059                                  ;	Do macro stuff
 32060                                  ; Returns:
 32061                                  ;	Std Xenix style error return
 32062                                  ;----------------------------------------------------------------------------
 32063                                  
 32064                                  _$AssignOper:
 32065                                  	; MSDOS 6.0
 32066                                  	;CMP	AL,7			      ; set in_use ?		;AN000;
 32067                                  	;JNZ	short chk08		      ; no			;AN000;
 32068                                  ;srinuse:								;AN000;
 32069                                  	;PUSH	AX			      ; save al 		;AN000;
 32070                                  	;MOV	AL,DL			      ; AL= drive id		;AN000;
 32071                                  	;CALL	GetCDSFromDrv		      ; ds:si -> cds		;AN000;
 32072                                  	;POP	AX			      ; 			;AN000;
 32073                                  	;JC	short baddrv		      ; bad drive		;AN000;
 32074                                  	;CMP	WORD [SI+curdir.devptr],0     ; dpb ptr =0 ?		;AN000;
 32075                                  	;JZ	short baddrv		      ;     no			;AN000;
 32076                                  	;CMP	AL,7			      ; set ?			;AN000;
 32077                                  	;JNZ	short resetdrv		      ; no			;AN000;
 32078                                  	;OR	word [SI+curdir.flags],curdir_inuse; set in_use		;AN000;
 32079                                  	;JMP	SHORT okdone		      ; 			;AN000;
 32080                                  ;resetdrv:								;AN000;
 32081                                  	;AND	word [SI+curdir_flags],~curdir_inuse ; reset in_use	;AN000;
 32082                                  	;JMP	SHORT okdone			; 			;AN000;
 32083                                  ;baddrv: 								;AN000;
 32084                                  	;MOV	AX,error_invalid_drive	      ; error			;AN000;
 32085                                  	;JMP	SHORT ASS_ERR		      ; 			;AN000;
 32086                                  ;chk08:									;AN000;
 32087                                  	;CMP	AL,8			      ; reset inuse ?		;AN000;
 32088                                  	;JZ	short srinuse 		      ; yes			;AN000;
 32089                                  
 32090                                  	;IF	NOT INSTALLED
 32091                                  	;transfer NET_ASSOPER
 32092                                  	;ELSE
 32093                                  
 32094                                  	; MSDOS 3.3 (& MSDOS 6.0)
 32095 00006893 50                      	PUSH	AX
 32096                                  	;mov	ax,111Eh
 32097                                  	;MOV	AX,(MultNET SHL 8) OR 30
 32098 00006894 B81E11                  	mov	ax,(MultNET*256)+30
 32099 00006897 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - DO REDIRECTION
 32100                                  			; SS = DOS CS
 32101                                  			; STACK: WORD function to execute
 32102                                  			; Return: CF set on error, AX = error code
 32103                                  			; STACK unchanged
 32104 00006899 5B                      	POP	BX			; Don't zap error code in AX
 32105 0000689A 7203                    	JC	short ASS_ERR
 32106                                  okdone:
 32107 0000689C E95EAE                  	jmp	SYS_RET_OK
 32108                                  
 32109                                  ASS_ERR:
 32110 0000689F E967AE                  	jmp	SYS_RET_ERR
 32111                                  
 32112                                  	;ENDIF
 32113                                  
 32114                                  ;Break <FIND_DPB - Find a DPB from a drive number>
 32115                                  ;----------------------------------------------------------------------------
 32116                                  ;**	FIND_DPB - Find a DPB from a Drive #
 32117                                  ;
 32118                                  ;	ENTRY	AL has drive number A = 0
 32119                                  ;	EXIT	'C' set
 32120                                  ;		    No DPB for this drive number
 32121                                  ;		'C' clear
 32122                                  ;		    DS:SI points to DPB for drive
 32123                                  ;	USES	SI, DS, Flags
 32124                                  ;----------------------------------------------------------------------------
 32125                                  
 32126                                  FIND_DPB:
 32127 000068A2 36C536[2600]            	LDS	SI,[SS:DPBHEAD]		;smr;SS Override
 32128                                  fdpb5:	
 32129 000068A7 83FEFF                  	CMP	SI,-1
 32130 000068AA 7409                    	JZ	short fdpb10
 32131 000068AC 3A04                    	cmp	al,[si]
 32132                                  	;CMP	AL,[SI+DPB.DRIVE]
 32133 000068AE 7406                    	jz	short ret_label15	; Carry clear (retz)
 32134                                  	;lds	si,[si+18h]
 32135 000068B0 C57418                  	LDS	SI,[SI+DPB.NEXT_DPB]
 32136 000068B3 EBF2                    	JMP	short fdpb5
 32137                                  
 32138                                  fdpb10:	
 32139 000068B5 F9                      	STC
 32140                                  
 32141                                  ret_label15:
 32142 000068B6 C3                      	retn
 32143                                  
 32144                                  ;	Break <InitCDS - set up an empty CDS>
 32145                                  ;----------------------------------------------------------------------------
 32146                                  ;**	InitCDS - Setup an Empty CDS
 32147                                  ;
 32148                                  ;	ENTRY	ThisCDS points to CDS
 32149                                  ;		AL has uppercase drive letter
 32150                                  ;	EXIT	ThisCDS is now empty
 32151                                  ;		(ES:DI) = CDS
 32152                                  ;		'C' set if no DPB associated with drive
 32153                                  ;	USES	AH,ES,DI, Flags
 32154                                  ;----------------------------------------------------------------------------
 32155                                  
 32156                                  InitCDS:
 32157                                  	; 19/08/2018
 32158                                  	; 05/08/2018 - Retro DOS v3.0
 32159                                  	; MSDOS 6.0
 32160 000068B7 50                      	push	ax			; save (AL) for caller
 32161 000068B8 36C43E[3A05]            	LES	DI,[SS:THISCDS]		; (es:di) = CDS address
 32162                                  	;mov	word [es:di+67],0
 32163 000068BD 26C745430000            	MOV	word [ES:DI+curdir.flags],0 ; "free" CDS
 32164 000068C3 2C40                    	SUB	AL,"A"-1                ; A = 1
 32165 000068C5 363806[4600]            	CMP	[SS:NUMIO],AL		;smr;SS Override
 32166 000068CA 7236                    	JC	short icdsx		; Drive does not map a physical drive
 32167 000068CC 48                      	dec	ax			; (AL) = 0 if A, 1 if B, etc.
 32168 000068CD 50                      	PUSH	AX			; save drive number for later
 32169 000068CE 0441                    	add	al,"A"
 32170 000068D0 B43A                    	MOV	AH,':'
 32171 000068D2 268905                  	mov	[ES:DI],ax
 32172                                  	;MOV	[ES:DI+curdir.text],AX 	; set "x:"
 32173                                  	;mov	ax,"\"
 32174                                  	;mov	[es:di+2],ax
 32175                                  	;MOV	word [ES:DI+curdir.text+2],"\"	; NUL terminate
 32176 000068D5 26C745025C00            	mov	word [ES:DI+curdir.text+2],005Ch ; 19/08/2018
 32177                                  	;or	word [es:di+67],4000h
 32178                                  	;or	byte [es:di+68],40h
 32179 000068DB 26804D4440              	OR	byte [ES:DI+curdir.flags+1],curdir_inuse>>8
 32180 000068E0 29C0                    	sub	ax,ax
 32181                                  	;MOV	[es:di+73],ax ; 0
 32182 000068E2 26894549                	MOV	[ES:DI+curdir.ID],ax
 32183                                  	;mov	[es:di+75],ax ; 0
 32184 000068E6 2689454B                	MOV	[ES:DI+curdir.ID+2],ax
 32185 000068EA B002                    	mov	al,2
 32186                                  	;mov	[es:di+79],aX ; 2
 32187 000068EC 2689454F                	MOV	[ES:DI+curdir.end],ax
 32188 000068F0 58                      	POP	AX			; (al) = drive number
 32189 000068F1 1E                      	push	ds
 32190 000068F2 56                      	push	si
 32191 000068F3 E8ACFF                  	call	FIND_DPB
 32192 000068F6 7208                    	JC	short icds5		; OOOOPPPPPSSSS!!!!
 32193                                  	;mov	[es:di+69],si
 32194 000068F8 26897545                	MOV	[ES:DI+curdir.devptr],SI
 32195                                  	;mov	[es:di+71],ds
 32196 000068FC 268C5D47                	MOV	[ES:DI+curdir.devptr+2],DS
 32197                                  icds5:	
 32198 00006900 5E                      	pop	si
 32199 00006901 1F                      	pop	ds
 32200                                  icdsx:	
 32201 00006902 58                      	pop	ax
 32202                                  RET45:
 32203 00006903 C3                      	retn
 32204                                  
 32205                                  ;Break <$UserOper - get/set current user ID (for net)>
 32206                                  ;----------------------------------------------------------------------------
 32207                                  ;   $UserOper - retrieve or initiate a user id string.	MSDOS will only
 32208                                  ;	maintain this string and do no verifications.
 32209                                  ;
 32210                                  ;   Inputs:	AL has function type (0-get 1-set 2-printer-set 3-printer-get
 32211                                  ;				      4-printer-set-flags,5-printer-get-flags)
 32212                                  ;		DS:DX is user string pointer (calls 1,2)
 32213                                  ;		ES:DI is user buffer (call 3)
 32214                                  ;		BX is assign index (calls 2,3,4,5)
 32215                                  ;		CX is user number (call 1)
 32216                                  ;		DX is flag word (call 4)
 32217                                  ;   Outputs:	If AL = 0 then the current user string is written to DS:DX
 32218                                  ;			and user CX is set to the user number
 32219                                  ;		If AL = 3 then CX bytes have been put at input ES:DI
 32220                                  ;		If AL = 5 then DX is flag word
 32221                                  ;----------------------------------------------------------------------------
 32222                                  
 32223                                  _$UserOper:
 32224                                  	; 05/08/2018 - Retro DOS v3.0
 32225                                  	; MSDOS 6.0 (& MSDOS 3.3)
 32226 00006904 50                      	PUSH	AX
 32227 00006905 2C01                    	SUB	AL,1			; quick dispatch on 0,1
 32228 00006907 58                      	POP	AX
 32229 00006908 7211                    	JB	short UserGet 		; return to user the string
 32230 0000690A 742E                    	JZ	short UserSet 		; set the current user
 32231 0000690C 3C05                    	CMP	AL,5			; test for 2,3,4 or 5
 32232 0000690E 763D                    	JBE	short UserPrint		; yep
 32233                                  	;mov	byte [ss:EXTERR_LOCUS],1
 32234 00006910 36C606[D102]01          	MOV	byte [SS:EXTERR_LOCUS],errLOC_Unk ;smr;SS Override 
 32235                                  					; Extended Error Locus
 32236                                  	;error	error_invalid_function	; not 0,1,2,3
 32237                                  	;mov	al,1
 32238 00006916 B001                    	MOV	AL,error_invalid_function
 32239                                  useroper_error:
 32240 00006918 E9EEAD                  	JMP	SYS_RET_ERR
 32241                                  
 32242                                  UserGet:
 32243                                  ; Transfer MYNAME to DS:DX
 32244                                  ; Set Return CX to MYNUM
 32245 0000691B 1E                      	PUSH	DS			; switch registers
 32246 0000691C 07                      	POP	ES
 32247 0000691D 89D7                    	MOV	DI,DX			; destination
 32248 0000691F 368B0E[0E00]            	MOV	CX,[SS:MYNUM]		; Get number	;smr;SS Override
 32249 00006924 E8E4AC                  	call	Get_User_Stack
 32250 00006927 894C04                  	MOV	[SI+user_env.user_CX],CX ; Set number return
 32251 0000692A 16                      	push	ss			; point to DOSDATA
 32252 0000692B 1F                      	pop	ds
 32253 0000692C BE[B302]                	MOV	SI,MYNAME		; point source to user string
 32254                                  UserMove:
 32255 0000692F B90F00                  	MOV	CX,15
 32256 00006932 F3A4                    	REP	MOVSB			; blam.
 32257 00006934 31C0                    	XOR	AX,AX			; 16th byte is 0
 32258 00006936 AA                      	STOSB
 32259                                  UserBye:
 32260 00006937 E9C3AD                  	jmp	SYS_RET_OK		; no errors here
 32261                                  
 32262                                  UserSet:
 32263                                  ; Transfer DS:DX to MYNAME
 32264                                  ; CX to MYNUM
 32265 0000693A 36890E[0E00]            	MOV	[SS:MYNUM],CX				;smr;SS Override
 32266 0000693F 89D6                    	MOV	SI,DX			; user space has source
 32267 00006941 16                      	push	ss
 32268 00006942 07                      	pop	es
 32269 00006943 BF[B302]                	MOV	DI,MYNAME		; point dest to user string
 32270 00006946 36FE06[B202]            	INC	byte [SS:DIFFNAM]	; signal change ;smr;SS Override
 32271 0000694B EBE2                    	JMP	short UserMove
 32272                                  
 32273                                  UserPrint:
 32274                                  
 32275                                  ;IF NOT Installed
 32276                                  ;	transfer PRINTER_GETSET_STRING
 32277                                  ;ELSE
 32278 0000694D 50                      	PUSH	AX
 32279                                  	;mov	ax,111Fh
 32280                                  	;MOV	AX,(MultNET SHL 8) OR 31
 32281 0000694E B81F11                  	mov	ax,(MultNET<<8)|31
 32282 00006951 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - PRINTER SETUP
 32283                                  			; STACK: WORD function
 32284                                  			; Return: CF set on error, AX = error code
 32285                                  			; STACK unchanged
 32286 00006953 5A                      	POP	DX			; Clean stack
 32287 00006954 7302                    	JNC	short OKPA
 32288 00006956 EBC0                    	jmp	short useroper_error
 32289                                  OKPA:
 32290 00006958 EBDD                    	jmp	short UserBye
 32291                                  ;ENDIF
 32292                                  
 32293                                  
 32294                                  ;Break	<GetVisDrv - return visible drive>
 32295                                  ;----------------------------------------------------------------------------
 32296                                  ;   GetVisDrv - correctly map non-spliced inuse drives
 32297                                  ;
 32298                                  ;   Inputs:	AL has drive identifier (0=default)
 32299                                  ;   Outputs:	Carry Set - invalid drive/macro
 32300                                  ;		Carry Clear - AL has physical drive (0=A)
 32301                                  ;		    ThisCDS points to CDS
 32302                                  ;   Registers modified: AL
 32303                                  ;----------------------------------------------------------------------------
 32304                                  
 32305                                  GetVisDrv:
 32306                                  	; 05/08/2018 - Retro DOS v3.0
 32307                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 6839h
 32308 0000695A E81400                  	CALL	GETTHISDRV		; get inuse drive
 32309 0000695D 72A4                    	jc	short RET45
 32310 0000695F 1E                      	push	ds
 32311 00006960 56                      	push	si
 32312 00006961 36C536[3A05]            	LDS	SI,[SS:THISCDS]			;smr;SS Override
 32313                                  	;test	word [si+67],2000h
 32314 00006966 F744430020              	TEST	word [SI+curdir.flags],curdir_splice
 32315 0000696B 5E                      	pop	si
 32316 0000696C 1F                      	pop	ds
 32317 0000696D 7494                    	jz	short RET45		; if not spliced, return OK
 32318                                  	; MSDOS 6.0
 32319                                  	;MOV	[SS:DrvErr],error_invalid_drive ;IFS. ;AN000;smr;SS Override
 32320                                  	;
 32321 0000696F F9                      	STC				; signal error
 32322 00006970 C3                      	retn
 32323                                  
 32324                                  ;Break <Getthisdrv - map a drive designator (0=def, 1=A...)>
 32325                                  ;----------------------------------------------------------------------------
 32326                                  ;   GetThisDrv - look through a set of macros and return the current drive and
 32327                                  ;	macro pointer
 32328                                  ;
 32329                                  ;   Inputs:	AL has drive identifier (1=A, 0=default)
 32330                                  ;   Outputs:
 32331                                  ;		Carry Set - invalid drive/macro
 32332                                  ;		Carry Clear - AL has physical drive (0=A)
 32333                                  ;		   ThisCDS points to macro
 32334                                  ;   Registers modified: AL
 32335                                  ;----------------------------------------------------------------------------
 32336                                  
 32337                                  GETTHISDRV:
 32338                                  	; 05/08/2018
 32339                                  	; 12/07/2018 - Retro DOS v3.0
 32340                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 6850h
 32341                                  	; MSDOS 3.3 (& MSDOS 6.0)
 32342 00006971 08C0                    	OR	AL,AL			; are we using default drive?
 32343 00006973 7506                    	JNZ	SHORT GTD10		; no, go get the CDS pointers
 32344 00006975 36A0[E402]              	MOV	AL,[SS:CURDRV]		; get the current drive
 32345                                  	;INC	ax			; Counteract next instruction
 32346                                  	; 04/09/2018
 32347 00006979 FEC0                    	inc	al
 32348                                  GTD10:	
 32349                                  	;DEC	ax			; 0 = A
 32350 0000697B FEC8                    	dec	al
 32351 0000697D 1E                      	PUSH	DS			; save world
 32352 0000697E 56                      	PUSH	SI
 32353                                  	;mov	byte [ss:EXTERR_LOCUS],2
 32354 0000697F 36C606[D102]02          	MOV	BYTE [SS:EXTERR_LOCUS],errLOC_Disk		;smr;SS Override
 32355 00006985 36F606[0D05]FF          	TEST	BYTE [SS:FSHARING],-1	; Logical or Physical?	;smr;SS Override
 32356 0000698B 7421                    	JZ	SHORT GTD20		; Logical
 32357 0000698D 50                      	PUSH	AX
 32358 0000698E 06                      	PUSH	ES
 32359 0000698F 57                      	PUSH	DI
 32360 00006990 36C706[3A05][9504]      	MOV	WORD [SS:THISCDS],DUMMYCDS ;smr;SS Override
 32361 00006997 368C0E[3C05]            	mov	[SS:THISCDS+2],CS ; MSDOS 3.3
 32362                                  	;MOV	[SS:THISCDS+2],SS	;ThisCDS = &DummyCDS;smr;
 32363 0000699C 0441                    	ADD	AL,'A'
 32364 0000699E E816FF                  	CALL	InitCDS			;	InitCDS(c);
 32365                                  	;test	word [es:di+67],4000h
 32366 000069A1 26F745430040            	TEST	WORD [ES:DI+curdir.flags],curdir_inuse	; Clears carry
 32367 000069A7 5F                      	POP	DI
 32368 000069A8 07                      	POP	ES
 32369 000069A9 58                      	POP	AX
 32370 000069AA 740E                    	JZ	SHORT GTD30		; Not a physical drive.
 32371 000069AC EB13                    	JMP	SHORT GTDX		; carry clear
 32372                                  GTD20:
 32373 000069AE E81300                  	CALL	GetCDSFromDrv
 32374 000069B1 7207                    	JC	SHORT GTD30	; Unassigned CDS -> return error already set
 32375                                  	;test	word [si+43h],4000h
 32376 000069B3 F744430040              	TEST	WORD [SI+curdir.flags],curdir_inuse ; Clears Carry
 32377 000069B8 7507                    	JNZ	SHORT GTDX		; carry clear
 32378                                  GTD30:	
 32379                                  	; 14/08/2018
 32380                                  	;MOV	AL,error_invalid_drive	; invalid FAT drive
 32381                                  	;MOV	BYTE [ss:DrvErr],AL	; save this for IOCTL
 32382 000069BA 36C606[D102]01          	MOV	BYTE [ss:EXTERR_LOCUS],errLOC_Unk
 32383 000069C0 F9                      	STC
 32384                                  GTDX:	
 32385 000069C1 5E                      	POP	SI			; restore world
 32386 000069C2 1F                      	POP	DS
 32387 000069C3 C3                      	RETN
 32388                                   
 32389                                  
 32390                                  ;Break <GetCDSFromDrv - convert a drive number to a CDS pointer>
 32391                                  ;----------------------------------------------------------------------------
 32392                                  ;   GetCDSFromDrv - given a physical drive number, convert it to a CDS
 32393                                  ;	pointer, returning an error if the drive number is greater than the
 32394                                  ;	number of CDS's
 32395                                  ;
 32396                                  ;   Inputs:	AL is physical unit # A=0...
 32397                                  ;   Outputs:	Carry Set if Bad Drive
 32398                                  ;		Carry Clear
 32399                                  ;		    DS:SI -> CDS
 32400                                  ;		    [THISCDS] = DS:SI
 32401                                  ;   Registers modified: DS,SI
 32402                                  ;----------------------------------------------------------------------------
 32403                                  
 32404                                  GetCDSFromDrv:
 32405 000069C4 363A06[4700]            	CMP	AL,[SS:CDSCOUNT]	; is this a valid designator;smr;SS Override
 32406 000069C9 7202                    	JB	SHORT GetCDS		; yes, go get the macro
 32407 000069CB F9                      	STC				; signal error
 32408 000069CC C3                      	RETN				; bye
 32409                                  GetCDS:
 32410 000069CD 53                      	PUSH	BX
 32411 000069CE 50                      	PUSH	AX
 32412 000069CF 36C536[3C00]            	LDS	SI,[SS:CDSADDR]		; get pointer to table	;smr;SS Override
 32413                                  	;mov	bl,81
 32414 000069D4 B351                    	MOV	BL,curdir.size		; size in convenient spot
 32415 000069D6 F6E3                    	MUL	BL			; get net offset
 32416 000069D8 01C6                    	ADD	SI,AX			; convert to true pointer
 32417 000069DA 368936[3A05]            	MOV	[SS:THISCDS],SI		; store convenient offset;smr;SS Override
 32418 000069DF 368C1E[3C05]            	MOV	[SS:THISCDS+2],DS	; store convenient segment;smr;SS Override
 32419 000069E4 58                      	POP	AX
 32420 000069E5 5B                      	POP	BX
 32421 000069E6 F8                      	CLC				; no error
 32422 000069E7 C3                      	RETN				; bye!
 32423                                  
 32424                                  ;============================================================================
 32425                                  ; MACRO2.ASM, MSDOS 6.0, 1991
 32426                                  ;============================================================================
 32427                                  ; Retro	DOS v3.0 - 12/07/2018
 32428                                  
 32429                                  ;BREAK <TransFCB - convert an FCB into a path, doing substitution>
 32430                                  ;----------------------------------------------------------------------------
 32431                                  ;   TransFCB - Copy an FCB from DS:DX into a reserved area doing all of the
 32432                                  ;       gritty substitution.
 32433                                  ;
 32434                                  ;   Inputs:     DS:DX - pointer to FCB
 32435                                  ;               ES:DI - point to destination
 32436                                  ;   Outputs:    Carry Set - invalid path in final map
 32437                                  ;               Carry Clear - FCB has been mapped into ES:DI
 32438                                  ;                   Sattrib is set from possibly extended FCB
 32439                                  ;                   ExtFCB set if extended FCB found
 32440                                  ;   Registers modified: most
 32441                                  ;----------------------------------------------------------------------------
 32442                                  
 32443                                  TransFCB:
 32444                                  	; 12/07/2018 - Retro DOS v3.0
 32445                                  	;LocalVar FCBTmp,16
 32446                                  	;ENTER
 32447 000069E8 55                      	push	bp
 32448 000069E9 89E5                    	mov	bp,sp
 32449                                  	;sub	sp,15	; MSDOS 3.3
 32450 000069EB 83EC10                  	sub	sp,16	; MSDOS 6.0
 32451 000069EE 16                      	push	ss
 32452 000069EF 07                      	pop	es
 32453 000069F0 06                      	push	es
 32454 000069F1 57                      	push	di
 32455                                  	;lea	di,[bp-15] ; MSDOS 3.3
 32456                                  	;LEA	DI,FCBTmp 
 32457 000069F2 8D7EF0                  	lea	di,[bp-16]		; point to FCB temp area
 32458 000069F5 36C606[0705]00          	mov	byte [SS:EXTFCB],0	; no extended FCB found ;smr;SS Override
 32459 000069FB 36C606[0805]00          	mov	byte [SS:SATTRIB],0	; default search attributes;smr;SS Override
 32460 00006A01 E8C5BF                  	call	GetExtended             ; get FCB, extended or not
 32461 00006A04 740D                    	jz	short GetDrive		; not an extended FCB, get drive
 32462 00006A06 8A44FF                  	mov	AL,[SI-1]               ; get attributes
 32463 00006A09 36A2[0805]              	mov	[SS:SATTRIB],AL		; store search attributes;smr;SS Override
 32464 00006A0D 36C606[0705]FF          	mov	byte [SS:EXTFCB],-1	; signal extended FCB  ;smr;SS Override
 32465                                  GetDrive:
 32466 00006A13 AC                      	lodsb				; get drive byte
 32467 00006A14 E85AFF                  	call	GETTHISDRV
 32468 00006A17 722C                    	jc	short BadPack
 32469 00006A19 E87C03                  	call	TextFromDrive           ; convert 0-based drive to text
 32470                                  ;
 32471                                  ; Scan the source to see if there are any illegal chars
 32472                                  ;
 32473 00006A1C BB[1613]                	mov	bx,CharType		; load lookup table
 32474 00006A1F B90B00                  	mov	cx,11
 32475 00006A22 56                      	push	si			; back over name, ext
 32476                                  FCBScan:
 32477 00006A23 AC                      	lodsb				; get a byte
 32478                                  	; 09/08/2018
 32479                                  	;xlat	byte [es:bx]
 32480 00006A24 26D7                    	es	xlat			; get flags
 32481                                  	;test	al,8	
 32482 00006A26 A808                    	test	al,FFCB
 32483 00006A28 741B                    	jz	short BadPack
 32484                                  NextCh: 
 32485 00006A2A E2F7                    	loop	FCBScan
 32486 00006A2C 5E                      	pop	si
 32487 00006A2D 89FB                    	mov	bx,di
 32488 00006A2F E8E5C3                  	call	PackName                ; crunch the path
 32489 00006A32 5F                      	pop	di			; get original destination
 32490 00006A33 07                      	pop	es
 32491 00006A34 16                      	push	ss			; get DS addressability
 32492 00006A35 1F                      	pop	ds
 32493                                  	;lea	si,[bp-15] ; MSDOS 3.3
 32494                                  	;LEA	SI,FCBTmp		; point at new pathname
 32495 00006A36 8D76F0                  	lea	si,[bp-16]
 32496 00006A39 803F00                  	cmp	byte [bx],0
 32497 00006A3C 7407                    	jz	short BadPack
 32498 00006A3E 55                      	push	bp
 32499 00006A3F E80E00                  	call	TransPathSet            ; convert the path
 32500 00006A42 5D                      	pop	bp
 32501 00006A43 7303                    	jnc	short FCBRet		; bye with transPath error code
 32502                                  BadPack:
 32503 00006A45 F9                      	STC
 32504                                  	;mov	al,3
 32505 00006A46 B003                    	MOV     AL,error_path_not_found
 32506                                  FCBRet: 
 32507                                  	;LEAVE
 32508 00006A48 89EC                    	mov	sp,bp
 32509 00006A4A 5D                      	pop	bp
 32510                                  TransPath_retn:
 32511 00006A4B C3                      	retn
 32512                                  
 32513                                  ; 12/07/2018 - Retro DOS v3.0
 32514                                  
 32515                                  ;BREAK <TransPath - copy a path, do string sub and put in current dir>
 32516                                  ;----------------------------------------------------------------------------
 32517                                  ;
 32518                                  ;   TransPath - copy a path from DS:SI to ES:DI, performing component string
 32519                                  ;       substitution, insertion of current directory and fixing . and ..
 32520                                  ;       entries. Perform splicing. Allow input string to match splice
 32521                                  ;       exactly.
 32522                                  ;
 32523                                  ;   TransPathSet - Same as above except No splicing is performed if input path
 32524                                  ;       matches splice.
 32525                                  ;
 32526                                  ;   TransPathNoSet - No splicing/local using is performed at all.
 32527                                  ;
 32528                                  ;   The following anomalous behaviour is required:
 32529                                  ;
 32530                                  ;       Drive letters on devices are ignored. (set up DummyCDS)
 32531                                  ;       Paths on devices are ignored. (truncate to 0-length)
 32532                                  ;       Raw net I/O sets ThisCDS => NULL.
 32533                                  ;       fSharing => dummyCDS and no subst/splice. Only canonicalize.
 32534                                  ;
 32535                                  ;   Other behaviour:
 32536                                  ;
 32537                                  ;       ThisCDS set up.
 32538                                  ;       FatRead done on local CDS.
 32539                                  ;       ValidateCDS done on local CDS.
 32540                                  ;
 32541                                  ;   Brief flowchart:
 32542                                  ;
 32543                                  ;       if fSharing then
 32544                                  ;           set up DummyCDS (ThisCDS)
 32545                                  ;           canonicalize (sets cMeta)
 32546                                  ;           splice
 32547                                  ;           fatRead
 32548                                  ;           return
 32549                                  ;       if \\ or d:\\ lead then
 32550                                  ;           set up null CDS (ThisCDS)
 32551                                  ;           canonicalize (sets cMeta)
 32552                                  ;           return
 32553                                  ;       if device then
 32554                                  ;           set up dummyCDS (ThisCDS)
 32555                                  ;           canonicalize (sets cMeta)
 32556                                  ;           return
 32557                                  ;       if file then
 32558                                  ;           getCDS (sets (ThisCDS) from name)
 32559                                  ;           validateCDS (may reset current dir)
 32560                                  ;           Copy current dir
 32561                                  ;           canonicalize (set cMeta)
 32562                                  ;           splice
 32563                                  ;           generate correct CDS (ThisCDS)
 32564                                  ;           if local then
 32565                                  ;               fatread
 32566                                  ;           return
 32567                                  ;
 32568                                  ;   Inputs:     DS:SI - point to ASCIZ string path
 32569                                  ;               DI - point to buffer in DOSDATA
 32570                                  ;   Outputs:    Carry Set - invalid path specification: too many .., bad
 32571                                  ;                   syntax, etc. or user FAILed to I 24.
 32572                                  ;               WFP_Start - points to beginning of buffer
 32573                                  ;               Curr_Dir_End - points to end of current dir in path
 32574                                  ;               DS - DOSDATA
 32575                                  ;   Registers modified: most
 32576                                  ;
 32577                                  ;----------------------------------------------------------------------------
 32578                                  
 32579                                  TransPath:
 32580 00006A4C 30C0                    	XOR     AL,AL
 32581 00006A4E EB02                    	JMP     SHORT SetSplice
 32582                                  TransPathSet:
 32583 00006A50 B0FF                    	MOV     AL,-1
 32584                                  SetSplice:
 32585 00006A52 36A2[F802]              	MOV	[SS:NoSetDir],AL	;   NoSetDir = !fExact; ;smr;SS Override
 32586 00006A56 B0FF                    	MOV     AL,-1
 32587                                  TransPathNoSet:
 32588 00006A58 36A2[0C05]              	MOV	[SS:FSPLICE],AL		;   fSplice = TRUE;     ;smr;SS Override
 32589 00006A5C 36C606[1505]FF          	MOV	byte [ss:CMETA],-1      			;smr;SS Override
 32590 00006A62 36893E[4A05]            	MOV     [SS:WFP_START],DI 				;smr;SS Override
 32591 00006A67 36C706[4E05]FFFF        	MOV	word [SS:CURR_DIR_END],-1 ; crack from start	;smr;SS Override
 32592 00006A6E 16                      	push	ss
 32593 00006A6F 07                      	pop	es
 32594                                  	;lea	bp,[di+134]
 32595 00006A70 8DAD8600                	LEA     BP,[DI+TEMPLEN]         ; end of buffer
 32596                                  ;
 32597                                  ; if this is through the server dos call, fsharing is set. We set up a
 32598                                  ; dummy cds and let the operation go.
 32599                                  ;
 32600 00006A74 36F606[0D05]FF          	TEST	byte [SS:FSHARING],-1	; if no sharing		;smr;SS Override
 32601 00006A7A 7435                    	JZ	short CheckUNC		; skip to UNC check
 32602                                  ;
 32603                                  ; ES:DI point to buffer
 32604                                  ;
 32605 00006A7C E80203                  	CALL	DriveFromText           ; get drive and advance DS:SI
 32606 00006A7F E8EFFE                  	call	GETTHISDRV              ; Set ThisCDS and convert to 0-based
 32607 00006A82 722A                    	jc	short NoPath
 32608 00006A84 E81103                  	CALL	TextFromDrive		; drop in new
 32609 00006A87 8D5D01                  	LEA	BX,[DI+1]               ; backup limit
 32610 00006A8A E83801                  	CALL	Canonicalize            ; copy and canonicalize
 32611 00006A8D 72BC                    	jc	short TransPath_retn	; errors
 32612                                  ;
 32613                                  ; Perform splices for net guys.
 32614                                  ;
 32615 00006A8F 16                      	push	ss
 32616 00006A90 1F                      	pop	ds
 32617 00006A91 8B36[4A05]              	MOV     SI,[WFP_START] 		; point to name
 32618 00006A95 F606[0C05]FF            	TEST	byte [FSPLICE],-1
 32619 00006A9A 7403                    	JZ	short NoServerSplice
 32620 00006A9C E83602                  	CALL    Splice
 32621                                  NoServerSplice:
 32622 00006A9F 16                      	push	ss
 32623 00006AA0 1F                      	pop	ds                      ; for FATREAD
 32624 00006AA1 C43E[3A05]              	LES     DI,[THISCDS]		; for fatread
 32625 00006AA5 E8C4B5                  	call	EcritDisk
 32626 00006AA8 E810F1                  	call	FATREAD_CDS
 32627 00006AAB E8C6B5                  	call	LcritDisk
 32628                                  NoPath:
 32629                                  	;mov	al,3
 32630 00006AAE B003                    	MOV     AL,error_path_not_found ; Set up for possible bad path error
 32631 00006AB0 C3                      	retn				; any errors are in Carry flag
 32632                                  
 32633                                  ;
 32634                                  ; Let the network decide if the name is for a spooled device. It will map
 32635                                  ; the name if so.
 32636                                  ;
 32637                                  CheckUNC:
 32638 00006AB1 36C706[3A05]FFFF        	MOV     WORD [SS:THISCDS],-1	; NULL thisCDS		;smr;SS Override
 32639                                  	;CallInstall NetSpoolCheck,MultNET,35
 32640 00006AB8 B82311                  	mov	ax,1123h
 32641 00006ABB CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - QUALIFY REMOTE FILENAME
 32642                                  			; DS:SI -> ASCIZ filename to canonicalize
 32643                                  			; ES:DI -> 128-byte buffer for qualified name
 32644                                  			; Return: CF set if not resolved
 32645 00006ABD 7329                    	JNC	short UNCDone
 32646                                  ;
 32647                                  ; At this point the name is either a UNC-style name (prefixed with two leading
 32648                                  ; \\s) or is a local file/device. Remember that if a net-spooled device was
 32649                                  ; input, then the name has been changed to the remote spooler by the above net
 32650                                  ; call. Also, there may be a drive in front of the \\.
 32651                                  ;
 32652                                  NO_CHECK:
 32653 00006ABF E8BF02                  	CALL    DriveFromText		; eat drive letter
 32654 00006AC2 50                      	PUSH    AX                      ; save it
 32655 00006AC3 8B04                    	MOV     AX,[SI]			; get first two bytes of path
 32656 00006AC5 E880EB                  	call    PATHCHRCMP              ; convert to normal form
 32657 00006AC8 86E0                    	XCHG    AH,AL                   ; swap for second byte
 32658 00006ACA E87BEB                  	call    PATHCHRCMP              ; convert to normal form
 32659 00006ACD 751F                    	JNZ	short CheckDevice	; not a path char
 32660 00006ACF 38C4                    	CMP     AH,AL                   ; are they same?
 32661 00006AD1 751B                    	JNZ	short CheckDevice	; nope
 32662                                  ;
 32663                                  ; We have a UNC request. We must copy the string up to the beginning of the
 32664                                  ; local machine root path
 32665                                  ;
 32666                                  
 32667 00006AD3 58                      	POP     AX
 32668 00006AD4 A5                      	MOVSW                           ; get the lead \\.
 32669                                  UNCCpy:
 32670 00006AD5 AC                      	LODSB                           ; get a byte
 32671 00006AD6 E833EB                   	call	UCase                   ;AN000;; convert the char
 32672 00006AD9 08C0                    	OR      AL,AL
 32673 00006ADB 740E                    	JZ	short UNCTerm		; end of string. All done.
 32674 00006ADD E868EB                  	call    PATHCHRCMP              ; is it a path char?
 32675 00006AE0 89FB                    	MOV     BX,DI                   ; backup position
 32676 00006AE2 AA                      	STOSB
 32677 00006AE3 75F0                    	JNZ	short UNCCpy		; no, go copy
 32678 00006AE5 E8DD00                  	CALL    Canonicalize            ; wham (and set cMeta)
 32679                                  UNCDone:
 32680 00006AE8 16                      	push	ss
 32681 00006AE9 1F                      	pop	ds
 32682 00006AEA C3                       	retn				; return error code
 32683                                  UNCTerm:
 32684 00006AEB AA                      	STOSB                           ;AN000;
 32685 00006AEC EBFA                    	JMP	short UNCDone		;AN000;
 32686                                  
 32687                                  CheckDevice:
 32688                                  ;
 32689                                  ; Check DS:SI for device. First eat any path stuff
 32690                                  ;
 32691 00006AEE 58                      	POP     AX                      ; retrieve drive info
 32692 00006AEF 803C00                  	CMP     BYTE [SI],0		; check for null file
 32693 00006AF2 7504                    	JNZ	short CheckPath
 32694                                  	;mov	al,2 
 32695 00006AF4 B002                    	MOV     AL,error_file_not_found ; bad file error
 32696 00006AF6 F9                      	STC                             ; signal error on null input
 32697 00006AF7 C3                      	RETN				; bye!
 32698                                  CheckPath:
 32699 00006AF8 50                      	push	ax
 32700 00006AF9 55                      	push	bp			; save drive number
 32701                                  
 32702                                  	; MSDOS 6.0
 32703                                  ;;;BUGBUG BUG 10-26-1992 scottq
 32704                                  ;;;This is a hack for the CDROM extensions (2.1) who scan looking
 32705                                  ;;;for the following POP BP == 5Dh (restore <bp,ax>).
 32706                                  ;;;The problem is that a direct call to CheckThisDevice can (and did)
 32707                                  ;;;end up having a 5D in the opcode's displacement field. The
 32708                                  ;;;scanning code would choke on this thinking it was a POP BP instruction.
 32709                                  ;;;
 32710                                  ;;;What we do here is do a call to a function that is less than 5Dh
 32711                                  ;;;bytes away (and assert its not exactly 5D away) that jmps (transfers)
 32712                                  ;;;to the correct function. This cannot accidently insert a 5Dh.
 32713                                  ;;;
 32714                                  ;;;More info:
 32715                                  ;;;  This particular scan is begun at the UNCdone label for 32 bytes
 32716                                  ;;;looking for pop BP, so you cannot put a 5D between here and there.
 32717                                  ;;;
 32718 00006AFA E82000                  	call	no5Dshere
 32719                                  start5Dhack:
 32720                                  ;following is replaced with 5Dhack code--Invoke  CheckThisDevice         
 32721                                  backfrom5Dhack:
 32722 00006AFD 5D                      	pop	bp
 32723 00006AFE 58                      	pop	ax			; get drive letter back
 32724 00006AFF 731F                    	JNC	short DoFile		; yes we have a file.
 32725                                  ;
 32726                                  ; We have a device. AX has drive letter. At this point we may fake a CDS ala
 32727                                  ; sharing DOS call. We know by getting here that we are NOT in a sharing DOS
 32728                                  ; call.
 32729                                  ;
 32730 00006B01 36C606[0D05]FF          	MOV	byte [SS:FSHARING],-1	; simulate sharing dos call;smr;SS Override
 32731 00006B07 E867FE                  	call	GETTHISDRV              ; set ThisCDS and init DUMMYCDS
 32732 00006B0A 36C606[0D05]00          	MOV     byte [SS:FSHARING],0	;                       ;smr;SS Override
 32733                                  ;
 32734                                  ; Now that we have noted that we have a device, we put it into a form that
 32735                                  ; getpath can understand. Normally getpath requires d:\ to begin the input
 32736                                  ; string. We relax this to state that if the d:\ is present then the path
 32737                                  ; may be a file. If D:/ (note the forward slash) is present then we have
 32738                                  ; a device.
 32739                                  ;
 32740 00006B10 E88502                  	CALL    TextFromDrive
 32741 00006B13 B02F                    	MOV     AL,'/'                  ; path sep.
 32742 00006B15 AA                      	STOSB
 32743 00006B16 E839B4                  	call	StrCpy			; move remainder of string
 32744                                  
 32745 00006B19 F8                      	CLC                             ; everything OK.
 32746 00006B1A 16                      	push	ss
 32747 00006B1B 1F                      	pop	ds                      ; remainder of OK stuff
 32748                                  DoFile_retn:
 32749 00006B1C C3                      	retn
 32750                                  
 32751                                  no5Dshere:
 32752                                  	; 10/08/2018
 32753 00006B1D E902E1                  	jmp	CheckThisDevice		; snoop for device
 32754                                  
 32755                                  ;.erre (no5Dshere - start5Dhack - 5D)
 32756                                  
 32757                                  ;
 32758                                  ; We have a file. Get the raw CDS.
 32759                                  ;
 32760                                  
 32761                                  DoFile:
 32762                                  	; MSDOS 3.3 (& MSDOS 6.0)
 32763                                  
 32764 00006B20 E837FE                  	call	GetVisDrv               ; get proper CDS
 32765                                  	;mov	al,3 
 32766 00006B23 B003                    	MOV     AL,error_path_not_found ; Set up for possible bad file error
 32767 00006B25 72F5                    	jc	short DoFile_retn  ; CARRY set -> bogus drive/spliced
 32768                                  ;
 32769                                  ; ThisCDS has correct CDS. DS:SI advanced to point to beginning of path/file.
 32770                                  ; Make sure that CDS has valid directory; ValidateCDS requires a temp buffer
 32771                                  ; Use the one that we are going to use (ES:DI).
 32772                                  ;
 32773                                  	;SAVE    <DS,SI,ES,DI>		; save all string pointers.
 32774 00006B27 1E                      	push	ds
 32775 00006B28 56                      	push	si
 32776 00006B29 06                      	push	es
 32777 00006B2A 57                      	push	di
 32778 00006B2B E840E0                  	call	ValidateCDS             ; poke CDS and make everything OK
 32779                                  	;RESTORE <DI,ES,SI,DS>		; get back pointers
 32780 00006B2E 5F                      	pop	di
 32781 00006B2F 07                      	pop	es
 32782 00006B30 5E                      	pop	si
 32783 00006B31 1F                      	pop	ds
 32784                                  	;mov	al,3
 32785 00006B32 B003                    	MOV     AL,error_path_not_found ; Set up for possible bad path error
 32786                                  	;retc				; someone failed an operation
 32787 00006B34 72E6                    	jc	short DoFile_retn
 32788                                  ;
 32789                                  ; ThisCDS points to correct CDS. It contains the correct text of the
 32790                                  ; current directory. Copy it in.
 32791                                  ;
 32792 00006B36 1E                      	push	ds
 32793 00006B37 56                      	push	si
 32794 00006B38 36C536[3A05]            	LDS     SI,[SS:THISCDS]		; point to CDS	;smr;SS Override
 32795 00006B3D 89FB                    	MOV     BX,DI                   ; point to destination
 32796 00006B3F 035C4F                  	ADD     BX,[SI+curdir.end]	; point to backup limit
 32797                                  ;       LEA     SI,[SI+curdir.text]	; point to text
 32798                                  	;lea	bp,[di+134]
 32799 00006B42 8DAD8600                	LEA     BP,[DI+TEMPLEN]         ; regenerate end of buffer
 32800                                  					;AN000;
 32801 00006B46 E818B4                  	call	FStrCpy                 ; copy string. ES:DI point to end
 32802 00006B49 4F                      	DEC     DI                      ; point to NUL byte
 32803                                  
 32804                                  ;
 32805                                  ; Make sure that there is a path char at end.
 32806                                  ;
 32807 00006B4A B05C                    	MOV     AL,'\'
 32808 00006B4C 263845FF                	CMP     [ES:DI-1],AL
 32809 00006B50 7401                    	JZ	short GetOrig
 32810 00006B52 AA                      	STOSB
 32811                                  ;
 32812                                  ; Now get original string.
 32813                                  ;
 32814                                  GetOrig:
 32815 00006B53 4F                      	DEC     DI                      ; point to path char
 32816 00006B54 5E                      	pop	si
 32817 00006B55 1F                      	pop	ds
 32818                                  ;
 32819                                  ; BX points to the end of the root part of the CDS (at where a path char
 32820                                  ; should be). Now, we decide whether we use this root or extend it with the
 32821                                  ; current directory.  See if the input string begins with a leading ;
 32823 00006B56 E8D100                  	CALL    PathSep                 ; is DS:SI a path sep?
 32824 00006B59 7511                    	JNZ	short PathAssure	; no, DI is correct. Assure a path char
 32825 00006B5B 08C0                    	OR      AL,AL                   ; end of string?
 32826 00006B5D 7410                    	JZ	short DoCanon		; yes, skip.
 32827                                  ;
 32828                                  ; The string does begin with a \. Reset the beginning of the canonicalization
 32829                                  ; to this root. Make sure that there is a path char there and advance the
 32830                                  ; source string over all leading \'s.
 32831                                  ;
 32832 00006B5F 89DF                    	MOV     DI,BX                   ; back up to root point.
 32833                                  SkipPath:
 32834 00006B61 AC                      	LODSB
 32835 00006B62 E8E3EA                  	call    PATHCHRCMP
 32836 00006B65 74FA                    	JZ	short SkipPath
 32837 00006B67 4E                      	DEC     SI
 32838 00006B68 08C0                    	OR      AL,AL
 32839 00006B6A 7403                    	JZ	short DoCanon
 32840                                  ;
 32841                                  ; DS:SI start at some file name. ES:DI points at some path char. Drop one in
 32842                                  ; for yucks.
 32843                                  ;
 32844                                  PathAssure:
 32845 00006B6C B05C                    	MOV     AL,'\'
 32846 00006B6E AA                      	STOSB
 32847                                  ;
 32848                                  ; ES:DI point to the correct spot for canonicalization to begin.
 32849                                  ; BP is the max extent to advance DI
 32850                                  ; BX is the backup limit for ..
 32851                                  ;
 32852                                  DoCanon:
 32853 00006B6F E85300                  	CALL    Canonicalize            ; wham.
 32854                                  	;retc				; badly formatted path.
 32855 00006B72 72A8                    	jc	short DoFile_retn
 32856                                  
 32857                                  ;
 32858                                  ; The string has been moved to ES:DI. Reset world to DOS context, pointers
 32859                                  ; to wfp_start and do string substitution. BP is still the max position in
 32860                                  ; buffer.
 32861                                  ;
 32862 00006B74 16                      	push	ss
 32863 00006B75 1F                      	pop	ds
 32864 00006B76 8B3E[4A05]              	MOV     DI,[WFP_START]		; DS:SI point to string
 32865 00006B7A C536[3A05]              	LDS     SI,[THISCDS]		; point to CDS
 32866                                  ;       LEA     SI,[SI+curdir.text]	; point to text
 32867 00006B7E E81F02                  	CALL    PathPref                ; is there a prefix?
 32868 00006B81 7514                    	JNZ	short DoSplice		; no, do splice
 32869                                  ;
 32870                                  ; We have a match. Check to see if we ended in a path char.
 32871                                  ;
 32872 00006B83 8A44FF                  	MOV     AL,[SI-1]		; last char to match
 32873 00006B86 E8BFEA                  	call    PATHCHRCMP              ; did we end on a path char? (root)
 32874 00006B89 740C                    	JZ	short DoSplice		; yes, no current dir here.
 32875                                  Pathline:                               ; 2/13/KK
 32876 00006B8B 26803D00                	CMP     BYTE [ES:DI],0		; end at NUL?
 32877 00006B8F 7406                    	JZ	short DoSplice
 32878 00006B91 47                      	INC     DI                      ; point to after current path char
 32879 00006B92 36893E[4E05]            	MOV     [SS:CURR_DIR_END],DI	; point to correct spot ;smr;SS Override
 32880                                  ;
 32881                                  ; Splice the result.
 32882                                  ;
 32883                                  DoSplice:
 32884 00006B97 16                      	push	ss
 32885 00006B98 1F                      	pop	ds			; back to DOSDATA
 32886 00006B99 8B36[4A05]              	MOV     SI,[WFP_START]		; point to beginning of string
 32887 00006B9D 31C9                    	XOR     CX,CX
 32888 00006B9F F606[0C05]FF            	TEST	byte [FSPLICE],-1
 32889 00006BA4 7403                    	JZ	short SkipSplice
 32890 00006BA6 E82C01                  	CALL    Splice                  ; replaces in place.
 32891                                  SkipSplice:
 32892                                  ;
 32893                                  ; The final thing is to assure ourselves that a FATREAD is done on the local
 32894                                  ; device.
 32895                                  ;
 32896 00006BA9 16                      	push	ss
 32897 00006BAA 1F                      	pop	ds
 32898 00006BAB C43E[3A05]              	LES     DI,[THISCDS]		; point to correct drive
 32899                                  	;test	word [es:di+67],8000h
 32900 00006BAF 26F745430080            	TEST	word [ES:DI+curdir.flags],curdir_isnet
 32901 00006BB5 750D                    	JNZ	short Done		; net, no fatread necessary (retnz)
 32902 00006BB7 E30B                    	JCXZ    Done
 32903 00006BB9 E8B0B4                  	call	EcritDisk
 32904 00006BBC E8FCEF                  	call	FATREAD_CDS
 32905 00006BBF E8B2B4                  	call	LcritDisk
 32906                                  	;mov	al, 3
 32907 00006BC2 B003                    	MOV     AL,error_path_not_found ; Set up for possible bad path error
 32908                                  Done:   
 32909 00006BC4 C3                      	retn                         ; any errors in carry flag.
 32910                                  
 32911                                  ; 13/07/2018
 32912                                  
 32913                                  ;BREAK <Canonicalize - copy a path and remove . and .. entries>
 32914                                  ;----------------------------------------------------------------------------
 32915                                  ;   Canonicalize - copy path removing . and .. entries.
 32916                                  ;
 32917                                  ;   Inputs:     DS:SI - point to ASCIZ string path
 32918                                  ;               ES:DI - point to buffer
 32919                                  ;               BX - backup limit (offset from ES) points to slash
 32920                                  ;               BP - end of buffer
 32921                                  ;   Outputs:    Carry Set - invalid path specification: too many .., bad
 32922                                  ;                   syntax, etc.
 32923                                  ;               Carry Clear -
 32924                                  ;                   DS:DI - advanced to end of string
 32925                                  ;                   ES:DI - advanced to end of canonicalized form after nul
 32926                                  ;   Registers modified: AX CX DX (in addition to those above)
 32927                                  ;----------------------------------------------------------------------------
 32928                                  
 32929                                  Canonicalize:
 32930                                  ;
 32931                                  ; We copy all leading path separators.
 32932                                  ;
 32933 00006BC5 AC                      	LODSB                           ;   while (PathChr (*s))
 32934 00006BC6 E87FEA                  	call    PATHCHRCMP
 32935 00006BC9 7507                    	JNZ	short CanonDec
 32936 00006BCB 39EF                    	CMP     DI,BP                   ;       if (d > dlim)
 32937 00006BCD 7319                    	JAE	short CanonBad		;           goto error;
 32938 00006BCF AA                      	STOSB
 32939 00006BD0 EBF3                    	JMP	short Canonicalize	;           *d++ = *s++;
 32940                                  CanonDec:
 32941 00006BD2 4E                      	DEC     SI
 32942                                  ;
 32943                                  ; Main canonicalization loop.  We come here with DS:SI pointing to a textual
 32944                                  ; component (no leading path separators) and ES:DI being the destination
 32945                                  ; buffer.
 32946                                  ;
 32947                                  CanonLoop:
 32948                                  ;
 32949                                  ; If we are at the end of the source string, then we need to check to see that
 32950                                  ; a potential drive specifier is correctly terminated with a path sep char.
 32951                                  ; Otherwise, do nothing
 32952                                  ;
 32953 00006BD3 31C0                    	XOR     AX,AX
 32954 00006BD5 3804                    	CMP     [SI],AL                 ;       if (*s == 0) {
 32955 00006BD7 751A                    	JNZ	short DoComponent
 32956 00006BD9 26807DFF3A              	CMP     BYTE [ES:DI-1],':'	;           if (d[-1] == ':')
 32957 00006BDE 7505                    	JNZ	short DoTerminate
 32958 00006BE0 B05C                    	MOV     AL,'\'                  ;               *d++ = '\';
 32959 00006BE2 AA                      	STOSB
 32960 00006BE3 88E0                    	MOV     AL,AH
 32961                                  DoTerminate:
 32962 00006BE5 AA                      	STOSB                           ;           *d++ = 0;
 32963 00006BE6 F8                      	CLC                             ;           return (0);
 32964 00006BE7 C3                      	retn
 32965                                  
 32966                                  CanonBad:
 32967 00006BE8 E8CE01                  	CALL	ScanPathChar            ; check for path chars in rest of string
 32968                                  	;mov	al,3
 32969 00006BEB B003                    	MOV     AL,error_path_not_found ; Set up for bad path error
 32970 00006BED 7402                    	JZ	short PathEnc		; path character encountered in string
 32971                                  	;mov	al,2
 32972 00006BEF B002                    	MOV     AL,error_file_not_found ; Set bad file error
 32973                                  PathEnc:
 32974 00006BF1 F9                      	STC
 32975                                  CanonBad_retn:
 32976 00006BF2 C3                      	retn
 32977                                  ;
 32978                                  ; We have a textual component that we must copy.  We uppercase it and truncate
 32979                                  ; it to 8.3
 32980                                  ;
 32981                                  DoComponent:                            ;           }
 32982 00006BF3 E85100                  	CALL    CopyComponent		;       if (!CopyComponent (s, d))
 32983 00006BF6 72FA                    	jc	short CanonBad_retn	;           return (-1);
 32984                                  ;
 32985                                  ; We special case the . and .. cases.  These will be backed up.
 32986                                  ;
 32987                                  	;CMP	WORD PTR ES:[DI],'.' + (0 SHL 8)
 32988 00006BF8 26833D2E                	CMP	WORD [ES:DI],002Eh
 32989 00006BFC 7408                    	JZ	short Skip1
 32990                                  	;CMP	WORD PTR ES:[DI],'..'
 32991 00006BFE 26813D2E2E              	CMP     WORD [ES:DI],2E2Eh
 32992 00006C03 750A                    	JNZ	short CanonNormal
 32993 00006C05 4F                      	DEC     DI                      ;           d--;
 32994                                  Skip1:  
 32995 00006C06 E82B00                  	CALL    SkipBack                ;           SkipBack ();
 32996                                  	;mov	al,3
 32997 00006C09 B003                    	MOV     AL,error_path_not_found ; Set up for possible bad path error
 32998 00006C0B 72E5                    	jc	short CanonBad_retn
 32999 00006C0D EB02                    	JMP     short CanonPath         ;           }
 33000                                  ;
 33001                                  ; We have a normal path.  Advance destination pointer over it.
 33002                                  ;
 33003                                  CanonNormal:                            ;       else
 33004 00006C0F 01CF                    	ADD     DI,CX                   ;           d += ct;
 33005                                  ;
 33006                                  ; We have successfully copied a component.  We are now pointing at a path
 33007                                  ; sep char or are pointing at a nul or are pointing at something else.
 33008                                  ; If we point at something else, then we have an error.
 33009                                  ;
 33010                                  CanonPath:
 33011 00006C11 E81600                  	CALL    PathSep
 33012 00006C14 75D2                    	JNZ	short CanonBad		; something else...
 33013                                  ;
 33014                                  ; Copy the first path char we see.
 33015                                  ;
 33016 00006C16 AC                      	LODSB                           ; get the char
 33017 00006C17 E82EEA                  	call    PATHCHRCMP              ; is it path char?
 33018 00006C1A 75B6                    	JNZ	short CanonDec		; no, go test for nul
 33019 00006C1C 39EF                    	CMP     DI,BP                   ; beyond buffer end?
 33020 00006C1E 73C8                    	JAE	short CanonBad		; yep, error.
 33021 00006C20 AA                      	STOSB                           ; copy the one byte
 33022                                  ;
 33023                                  ; Skip all remaining path chars
 33024                                  ;
 33025                                  CanonPathLoop:
 33026 00006C21 AC                      	LODSB                           ; get next byte
 33027 00006C22 E823EA                  	call    PATHCHRCMP              ; path char again?
 33028 00006C25 74FA                    	JZ	short CanonPathLoop	; yep, grab another
 33029 00006C27 4E                      	DEC     SI                      ; back up
 33030 00006C28 EBA9                    	JMP	short  CanonLoop	; go copy component
 33031                                  
 33032                                  ;BREAK <PathSep - determine if char is a path separator>
 33033                                  ;----------------------------------------------------------------------------
 33034                                  ;   PathSep - look at DS:SI and see if char is / \ or NUL
 33035                                  ;   Inputs:     DS:SI - point to a char
 33036                                  ;   Outputs:    AL has char from DS:SI (/ => \)
 33037                                  ;               Zero set if AL is / \ or NUL
 33038                                  ;               Zero reset otherwise
 33039                                  ;   Registers modified: AL
 33040                                  ;----------------------------------------------------------------------------
 33041                                  
 33042                                  PathSep:
 33043 00006C2A 8A04                    	MOV     AL,[SI]                 ; get the character
 33044                                  PathSepGotCh:				; already have character
 33045 00006C2C 08C0                    	OR      AL,AL                   ; test for zero
 33046 00006C2E 74C2                    	jz	short CanonBad_retn	; return if equal to zero (NUL)
 33047 00006C30 E815EA                  	call    PATHCHRCMP              ; check for path character
 33048 00006C33 C3                      	retn				; and return HIS determination
 33049                                  
 33050                                  ;BREAK <SkipBack - move backwards to a path separator>
 33051                                  ;----------------------------------------------------------------------------
 33052                                  ;   SkipBack - look at ES:DI and backup until it points to a / ;   Inputs:     ES:DI - point to a char
 33054                                  ;               BX has current directory back up limit (point to a / \)
 33055                                  ;   Outputs:    ES:DI backed up to point to a path char
 33056                                  ;               AL has char from output ES:DI (path sep if carry clear)
 33057                                  ;               Carry set if illegal backup
 33058                                  ;               Carry Clear if ok
 33059                                  ;   Registers modified: DI,AL
 33060                                  ;----------------------------------------------------------------------------
 33061                                  
 33062                                  SkipBack:
 33063 00006C34 39DF                    	CMP     DI,BX                   ;   while (TRUE) {
 33064 00006C36 720B                    	JB	short SkipBad		;       if (d < dlim)
 33065 00006C38 4F                      	DEC     DI                      ;           goto err;
 33066 00006C39 268A05                  	MOV     AL,[ES:DI]		;       if (pathchr (*--d))
 33067 00006C3C E809EA                  	call    PATHCHRCMP              ;           break;
 33068 00006C3F 75F3                    	JNZ	short SkipBack		;       }
 33069 00006C41 F8                      	CLC                             ;   return (0);
 33070 00006C42 C3                      	retn				;
 33071                                  SkipBad:                                ;err:
 33072                                  	;mov	al,3
 33073 00006C43 B003                    	MOV     AL,error_path_not_found ; bad path error
 33074 00006C45 F9                      	STC                             ;   return (-1);
 33075 00006C46 C3                      	retn                          ;
 33076                                  
 33077                                  ;Break <CopyComponent - copy out a file path component>
 33078                                  ;----------------------------------------------------------------------------
 33079                                  ;   CopyComponent - copy a file component from a path string (DS:SI) into ES:DI
 33080                                  ;
 33081                                  ;   Inputs:     DS:SI - source path
 33082                                  ;               ES:DI - destination
 33083                                  ;               ES:BP - end of buffer
 33084                                  ;   Outputs:    Carry Set - too long
 33085                                  ;               Carry Clear - DS:SI moved past component
 33086                                  ;                   CX has length of destination
 33087                                  ;   Registers modified: AX,CX,DX
 33088                                  ;----------------------------------------------------------------------------
 33089                                  
 33090                                  CopyComponent:
 33091                                  
 33092                                  %define CopyBP	 [BP]		; word
 33093                                  %define CopyD	 [BP+2]		; dword
 33094                                  %define CopyDoff [BP+2]		; word
 33095                                  %define CopyS	 [BP+6]		; dword
 33096                                  %define CopySoff [BP+6]		; word
 33097                                  %define CopyTemp [BP+10]	; byte
 33098                                  
 33099 00006C47 83EC0E                  	SUB     SP,14                   ; room for temp buffer
 33100 00006C4A 1E                      	push	ds
 33101 00006C4B 56                      	push	si
 33102 00006C4C 06                      	push	es
 33103 00006C4D 57                      	push	di
 33104 00006C4E 55                      	push	bp
 33105 00006C4F 89E5                    	MOV     BP,SP
 33106 00006C51 B42E                    	MOV     AH,'.'
 33107 00006C53 AC                      	LODSB
 33108 00006C54 AA                      	STOSB
 33109 00006C55 38E0                    	CMP     AL,AH                   ;   if ((*d++=*s++) == '.') {
 33110 00006C57 7518                    	JNZ	short NormalComp
 33111 00006C59 E8CEFF                  	CALL    PathSep                 ;       if (!pathsep(*s))
 33112 00006C5C 740B                    	JZ	short NulTerm
 33113                                  TryTwoDot:
 33114 00006C5E AC                      	LODSB                           ;           if ((*d++=*s++) != '.'
 33115 00006C5F AA                      	STOSB
 33116 00006C60 38E0                    	CMP     AL,AH
 33117 00006C62 7557                    	JNZ	short CopyBad
 33118 00006C64 E8C3FF                  	CALL    PathSep
 33119 00006C67 7552                    	JNZ	short CopyBad		;               || !pathsep (*s))
 33120                                  NulTerm:                                ;               return -1;
 33121 00006C69 30C0                    	XOR     AL,AL                   ;       *d++ = 0;
 33122 00006C6B AA                      	STOSB
 33123 00006C6C 897606                  	MOV     CopySoff,SI
 33124 00006C6F EB47                    	JMP     SHORT _GoodRet		;       }
 33125                                  NormalComp:                             ;   else {
 33126 00006C71 8B7606                  	MOV     SI,CopySoff ; [bp+6]
 33127 00006C74 E867E9                  	call	NameTrans               ;       s = NameTrans (s, Name1);
 33128 00006C77 3B7606                  	CMP     SI,CopySoff             ;       if (s == CopySOff)
 33129 00006C7A 743F                    	JZ	short CopyBad		;           return (-1);
 33130 00006C7C 36F606[0D05]FF          	TEST	byte [SS:FSHARING],-1	;       if (!fSharing) {;smr;SS Override
 33131 00006C82 7510                    	JNZ	short DoPack
 33132 00006C84 80E201                  	AND     DL,1                    ;           cMeta += fMeta;
 33133 00006C87 360016[1505]            	ADD	[ss:CMETA],DL		;           if (cMeta > 0);smr;SS Override
 33134 00006C8C 7F2D                    	JG	short CopyBad		;               return (-1);
 33135 00006C8E 7504                    	JNZ	short DoPack		;           else
 33136 00006C90 08D2                    	OR      DL,DL                   ;           if (cMeta == 0 && fMeta == 0)
 33137 00006C92 742F                    	JZ	short CopyBadPath	;               return (-1);
 33138                                  DoPack:                                 ;           }
 33139 00006C94 897606                  	MOV     CopySoff,SI ; [bp+6]
 33140 00006C97 16                      	push	ss
 33141 00006C98 1F                      	pop	ds
 33142 00006C99 BE[E604]                	MOV     SI,NAME1
 33143 00006C9C 8D7E0A                  	LEA     DI,CopyTemp ; [bp+10]
 33144 00006C9F 57                      	push	di
 33145 00006CA0 E874C1                  	call	PackName                ;       PackName (Name1, temp);
 33146 00006CA3 5F                      	pop	di
 33147 00006CA4 E8C3B2                  	call	StrLen                  ;       if (strlen(temp)+d > bp)
 33148 00006CA7 49                      	DEC     CX
 33149 00006CA8 034E02                  	ADD     CX,CopyDoff ; [bp+2]
 33150 00006CAB 3B4E00                  	CMP     CX,CopyBP   ; [bp+0]
 33151 00006CAE 730B                    	JAE	short CopyBad		;           return (-1);
 33152 00006CB0 89FE                    	MOV     SI,DI                   ;       strcpy (d, temp);
 33153 00006CB2 C47E02                  	LES     DI,CopyD    ; [bp+2]	
 33154 00006CB5 E8A9B2                  	call	FStrCpy
 33155                                  _GoodRet:				;       }
 33156 00006CB8 F8                      	CLC
 33157 00006CB9 EB0B                    	JMP     SHORT CopyEnd           ;   return 0;
 33158                                  CopyBad:
 33159 00006CBB F9                      	STC
 33160 00006CBC E8FA00                  	CALL    ScanPathChar            ; check for path chars in rest of string
 33161                                  	;mov	al,2
 33162 00006CBF B002                    	MOV     AL,error_file_not_found ; Set up for bad file error
 33163 00006CC1 7503                    	JNZ	short CopyEnd
 33164                                  CopyBadPath:
 33165 00006CC3 F9                      	STC
 33166                                  	;mov	al,3
 33167 00006CC4 B003                    	MOV     AL,error_path_not_found ; Set bad path error
 33168                                  CopyEnd:
 33169 00006CC6 5D                      	pop	bp
 33170 00006CC7 5F                      	pop	di
 33171 00006CC8 07                      	pop	es
 33172 00006CC9 5E                      	pop	si
 33173 00006CCA 1F                      	pop	ds
 33174 00006CCB 9F                      	LAHF
 33175 00006CCC 83C40E                  	ADD     SP,14                   ; reclaim temp buffer
 33176 00006CCF E898B2                  	call	StrLen
 33177 00006CD2 49                      	DEC     CX
 33178 00006CD3 9E                      	SAHF
 33179 00006CD4 C3                      	retn
 33180                                  
 33181                                  ;Break <Splice - pseudo mount by string substitution>
 33182                                  ;----------------------------------------------------------------------------
 33183                                  ;   Splice - take a string and substitute a prefix if one exists. Change
 33184                                  ;       ThisCDS to point to physical drive CDS.
 33185                                  ;   Inputs:     DS:SI point to string
 33186                                  ;               NoSetDir = TRUE => exact matches with splice fail
 33187                                  ;   Outputs:    DS:SI points to thisCDS
 33188                                  ;               ES:DI points to DPB
 33189                                  ;               String at DS:SI may be reduced in length by removing prefix
 33190                                  ;               and substituting drive letter.
 33191                                  ;               CX = 0 If no splice done
 33192                                  ;               CX <> 0 otherwise
 33193                                  ;               ThisCDS points to proper CDS if spliced, otherwise it is
 33194                                  ;                   left alone
 33195                                  ;               ThisDPB points to proper DPB
 33196                                  ;   Registers modified: DS:SI, ES:DI, BX,AX,CX
 33197                                  ;----------------------------------------------------------------------------
 33198                                  
 33199                                  Splice:
 33200 00006CD5 36F606[5A00]FF          	TEST	byte [SS:SPLICES],-1	;smr;SS Override
 33201 00006CDB 746A                    	JZ	short AllDone
 33202 00006CDD 36FF36[3A05]            	push	word [SS:THISCDS]
 33203 00006CE2 36FF36[3C05]            	push	word [SS:THISCDS+2]	; TmpCDS = ThisCDS;smr;SS Override
 33204 00006CE7 1E                      	push	ds
 33205 00006CE8 56                      	push	si
 33206 00006CE9 5F                      	pop	di
 33207 00006CEA 07                      	pop	es
 33208 00006CEB 31C0                    	XOR     AX,AX                   ;   for (i=1; s = GetCDSFromDrv (i); i++)
 33209                                  SpliceScan:
 33210 00006CED E8D4FC                  	call	GetCDSFromDrv
 33211 00006CF0 724B                    	JC	short SpliceDone
 33212 00006CF2 FEC0                    	INC     AL
 33213                                  	;test	word [si+67],2000h
 33214 00006CF4 F744430020              	TEST    word [SI+curdir.flags],curdir_splice
 33215 00006CF9 74F2                    	JZ	short SpliceScan 	;       if ( Spliced (i) ) {
 33216 00006CFB 57                      	push	di
 33217 00006CFC E8A100                  	CALL    PathPref                ;           if (!PathPref (s, d))
 33218 00006CFF 7403                    	JZ	short SpliceFound	;
 33219                                  SpliceSkip:
 33220 00006D01 5F                      	pop	di
 33221 00006D02 EBE9                    	JMP	short SpliceScan	;               continue;
 33222                                  SpliceFound:
 33223 00006D04 26803D00                	CMP     BYTE [ES:DI],0		;           if (*s || NoSetDir) {
 33224 00006D08 7508                    	JNZ	short SpliceDo
 33225 00006D0A 36F606[F802]FF          	TEST	byte [ss:NoSetDir],-1			;smr;SS Override
 33226 00006D10 75EF                    	JNZ	short SpliceSkip
 33227                                  SpliceDo:
 33228 00006D12 89FE                    	MOV     SI,DI                   ;               p = src + strlen (p);
 33229 00006D14 06                      	push	es
 33230 00006D15 1F                      	pop	ds
 33231 00006D16 5F                      	pop	di
 33232 00006D17 E88000                  	CALL    TextFromDrive1          ;               src = TextFromDrive1(src,i);
 33233 00006D1A 36A1[4E05]              	MOV     AX,[SS:CURR_DIR_END]			;smr;SS Override
 33234 00006D1E 09C0                    	OR      AX,AX
 33235 00006D20 7808                    	JS	short NoPoke
 33236 00006D22 01F8                    	ADD     AX,DI                   ;               curdirend += src-p;
 33237 00006D24 29F0                    	SUB     AX,SI
 33238 00006D26 36A3[4E05]              	MOV     [SS:CURR_DIR_END],AX			;smr;SS Override
 33239                                  NoPoke:
 33240 00006D2A 803C00                  	CMP     BYTE [SI],0		;               if (*p)
 33241 00006D2D 7503                    	JNZ	short SpliceCopy	;                   *src++ = '\\';
 33242 00006D2F B05C                    	MOV     AL,"\"
 33243 00006D31 AA                      	STOSB
 33244                                  SpliceCopy:                             ;               strcpy (src, p);
 33245 00006D32 E82CB2                  	call	FStrCpy
 33246 00006D35 83C404                  	ADD     SP,4                    ; throw away saved stuff
 33247 00006D38 80C901                  	OR      CL,1                    ; signal splice done.
 33248 00006D3B EB0C                    	JMP     SHORT DoSet             ;               return;
 33249                                  SpliceDone:                             ;               }
 33250 00006D3D 368F06[3C05]            	pop	word [SS:THISCDS+2]     ;   ThisCDS = TmpCDS;
 33251 00006D42 368F06[3A05]            	pop	word [SS:THISCDS]			;smr;SS Override
 33252                                  AllDone:
 33253 00006D47 31C9                    	XOR     CX,CX
 33254                                  DoSet:
 33255 00006D49 36C536[3A05]            	LDS     SI,[SS:THISCDS]		;   ThisDPB = ThisCDS->devptr;;smr;SS Override
 33256                                  	;les	di,[si+69]
 33257 00006D4E C47C45                  	LES     DI,[SI+curdir.devptr]	
 33258 00006D51 36893E[2405]            	MOV	[SS:THISDPB],DI				;smr;SS Override
 33259 00006D56 368C06[2605]            	MOV	[SS:THISDPB+2],ES			;smr;SS Override
 33260                                  Splice_retn:
 33261 00006D5B C3                      	retn
 33262                                  
 33263                                  ;Break <$NameTrans - partially process a name>
 33264                                  ;----------------------------------------------------------------------------
 33265                                  ;   $NameTrans - allow users to see what names get mapped to. This call
 33266                                  ;   performs only string substitution and canonicalization, not splicing.  Due
 33267                                  ;   to Transpath playing games with devices, we need to insure that the output
 33268                                  ;   has drive letter and : in it.
 33269                                  ;
 33270                                  ;   Inputs:     DS:SI - source string for translation
 33271                                  ;               ES:DI - pointer to buffer
 33272                                  ;   Outputs:
 33273                                  ;       Carry Clear
 33274                                  ;               Buffer at ES:DI is filled in with data
 33275                                  ;               ES:DI point byte after nul byte at end of dest string in buffer
 33276                                  ;       Carry Set
 33277                                  ;               AX = error_path_not_found
 33278                                  ;   Registers modified: all
 33279                                  ;----------------------------------------------------------------------------
 33280                                  
 33281                                  _$NameTrans:
 33282 00006D5C 1E                      	push	ds
 33283 00006D5D 56                      	push	si
 33284 00006D5E 06                      	push	es
 33285 00006D5F 57                      	push	di
 33286 00006D60 51                      	push	cx ; MSDOS 6.0
 33287                                  	
 33288                                  	; MSDOS 6.0	
 33289                                  ; M027 - Start
 33290                                  ;
 33291                                  ; Sattrib must be set up with default values here. Otherwise, the value from
 33292                                  ; a previous DOS call is used for attrib and DevName thinks it is not a 
 33293                                  ; device if the old call set the volume attribute bit. Note that devname in
 33294                                  ; dir2.asm gets ultimately called by Transpath. See also M026. Also save
 33295                                  ; and restore CX.
 33296                                  ;
 33297 00006D61 B516                    	mov     ch,attr_hidden+attr_system+attr_directory
 33298 00006D63 E81C05                  	call	SetAttrib
 33299                                  
 33300                                  ; M027 - End
 33301                                  
 33302                                  	; MSDOS 3.3 (& MSDOS 6.0)
 33303 00006D66 BF[6003]                	MOV     DI,OPENBUF
 33304 00006D69 E8E0FC                  	CALL    TransPath               ; to translation (everything)
 33305 00006D6C 59                      	pop	cx ; MSDOS 6.0
 33306 00006D6D 5F                      	pop     di
 33307 00006D6E 07                      	pop	es
 33308 00006D6F 5E                      	pop     si
 33309 00006D70 1F                      	pop     ds
 33310 00006D71 7303                    	JNC	short TransOK
 33311 00006D73 E993A9                  	jmp	SYS_RET_ERR
 33312                                  TransOK:
 33313 00006D76 BE[6003]                	MOV     SI,OPENBUF
 33314 00006D79 16                      	push	ss
 33315 00006D7A 1F                      	pop	ds
 33316                                  GotText:
 33317 00006D7B E8E3B1                  	call	FStrCpy
 33318 00006D7E E97CA9                  	jmp	SYS_RET_OK
 33319                                  
 33320                                  ;Break   <DriveFromText - return drive number from a text string>
 33321                                  ;----------------------------------------------------------------------------
 33322                                  ;   DriveFromText - examine DS:SI and remove a drive letter, advancing the
 33323                                  ;   pointer.
 33324                                  ;
 33325                                  ;   Inputs:     DS:SI point to a text string
 33326                                  ;   Outputs:    AL has drive number
 33327                                  ;               DS:SI advanced
 33328                                  ;   Registers modified: AX,SI.
 33329                                  ;----------------------------------------------------------------------------
 33330                                  
 33331                                  DriveFromText:
 33332 00006D81 30C0                    	XOR     AL,AL                   ;       drive = 0;
 33333 00006D83 803C00                  	CMP     BYTE [SI],0		;       if (*s &&
 33334 00006D86 74D3                    	jz	short Splice_retn
 33335 00006D88 807C013A                	CMP     BYTE [SI+1],':'		;           s[1] == ':') {
 33336 00006D8C 75CD                    	jnz	short Splice_retn
 33337 00006D8E AD                      	LODSW                           ;           drive = (*s | 020) - 'a'+1;
 33338 00006D8F 0C20                    	OR      AL,20h
 33339                                  	;sub	al,60h
 33340 00006D91 2C60                    	SUB     AL,'a'-1                ;           s += 2;
 33341 00006D93 75C6                    	jnz	short Splice_retn
 33342 00006D95 B0FF                    	MOV     AL,-1                   ; nuke AL...
 33343 00006D97 C3                      	retn				;           }
 33344                                  
 33345                                  ;Break   <TextFromDrive - convert a drive number to a text string>
 33346                                  ;----------------------------------------------------------------------------
 33347                                  ;   TextFromDrive - turn AL into a drive letter: and put it at es:di with
 33348                                  ;   trailing :. TextFromDrive1 takes a 1-based number.
 33349                                  ;
 33350                                  ;   Inputs:     AL has 0-based drive number
 33351                                  ;   Outputs:    ES:DI advanced
 33352                                  ;   Registers modified: AX
 33353                                  ;----------------------------------------------------------------------------
 33354                                  
 33355                                  TextFromDrive:
 33356 00006D98 FEC0                    	INC     AL
 33357                                  TextFromDrive1:
 33358                                  	;add	al,40h
 33359 00006D9A 0440                    	ADD     AL,'A'-1                ;   *d++ = drive-1+'A';
 33360 00006D9C B43A                    	MOV     AH,":"                  ;   strcat (d, ":");
 33361 00006D9E AB                      	STOSW
 33362                                  PathPref_retn:
 33363 00006D9F C3                      	retn
 33364                                  
 33365                                  ;Break   <PathPref - see if one path is a prefix of another>
 33366                                  ;----------------------------------------------------------------------------
 33367                                  ;   PathPref - compare DS:SI with ES:DI to see if one is the prefix of the
 33368                                  ;   other.  Remember that only at a pathchar break are we allowed to have a
 33369                                  ;   prefix: A:\ and A:\FOO
 33370                                  ;
 33371                                  ;   Inputs:     DS:SI potential prefix
 33372                                  ;               ES:DI string
 33373                                  ;   Outputs:    Zero set => prefix found
 33374                                  ;                   DI/SI advanced past matching part
 33375                                  ;               Zero reset => no prefix, DS/SI garbage
 33376                                  ;   Registers modified: CX
 33377                                  ;----------------------------------------------------------------------------
 33378                                  
 33379                                  PathPref:
 33380 00006DA0 E8D5B1                  	call	DStrLen                 ; get length
 33381 00006DA3 49                      	DEC     CX                      ; do not include nul byte
 33382 00006DA4 F3A6                    	REPZ    CMPSB                   ; compare
 33383 00006DA6 75F7                    	jnz	short PathPref_retn	; if NZ then return NZ
 33384 00006DA8 50                      	push	ax			; save char register
 33385 00006DA9 8A44FF                  	MOV     AL,[SI-1]               ; get last byte to match
 33386 00006DAC E899E8                  	call    PATHCHRCMP              ; is it a path char (Root!)
 33387 00006DAF 7406                    	JZ	short Prefix		; yes, match root (I hope)
 33388                                  NotSep:                                 ; 2/13/KK
 33389 00006DB1 268A05                  	MOV     AL,[ES:DI]		; get next char to match
 33390 00006DB4 E875FE                  	CALL    PathSepGotCh            ; was it a pathchar?
 33391                                  Prefix:
 33392 00006DB7 58                      	pop	ax			; get back original
 33393 00006DB8 C3                      	retn
 33394                                  
 33395                                  ;Break   <ScanPathChar - see if there is a path character in a string>
 33396                                  ;----------------------------------------------------------------------------
 33397                                  ;     ScanPathChar - search through the string (pointed to by DS:SI) for
 33398                                  ;     a path separator.
 33399                                  ;
 33400                                  ;     Input:    DS:SI target string (null terminated)
 33401                                  ;     Output:   Zero set => path separator encountered in string
 33402                                  ;               Zero clear => null encountered
 33403                                  ;     Registers modified: SI
 33404                                  ;----------------------------------------------------------------------------
 33405                                  
 33406                                  ScanPathChar:
 33407 00006DB9 AC                      	LODSB                           ; fetch a character
 33408 00006DBA E86FFE                  	call    PathSepGotCh
 33409 00006DBD 75FA                    	JNZ	short ScanPathChar	; not \, / or NUL => go back for more
 33410 00006DBF E886E8                  	call    PATHCHRCMP              ; path separator?
 33411 00006DC2 C3                      	retn
 33412                                  
 33413                                  ;============================================================================
 33414                                  ; HANDLE.ASM, MSDOS 6.0, 1991
 33415                                  ;============================================================================
 33416                                  ; 13/07/2018 - Retro DOS v3.0
 33417                                  
 33418                                  ;	BREAK <$Close - return a handle to the system>
 33419                                  ;----------------------------------------------------------------------------
 33420                                  ;
 33421                                  ;**	$Close - Close a file Handle
 33422                                  ;
 33423                                  ;	BUGBUG - close gets called a LOT with invalid handles - sizzle that
 33424                                  ;		path
 33425                                  ;
 33426                                  ;	Assembler usage:
 33427                                  ;	    MOV     BX, handle
 33428                                  ;	    MOV     AH, Close
 33429                                  ;	    INT     int_command
 33430                                  ;
 33431                                  ;	ENTRY	(bx) = handle
 33432                                  ;	EXIT	<normal INT21 return convention>
 33433                                  ;	USES	all
 33434                                  ;
 33435                                  ;----------------------------------------------------------------------------
 33436                                  
 33437                                  _$CLOSE:
 33438                                  ;	Grab the SFT pointer from the JFN.
 33439                                  
 33440 00006DC3 E85B02                  	call	CheckOwner		; get system file entry
 33441 00006DC6 722B                    	jc	short CloseError	; error return
 33442 00006DC8 16                      	push	ss
 33443 00006DC9 1F                      	pop	ds			; For DOS_CLOSE
 33444 00006DCA 893E[3605]              	MOV	[THISSFT],DI		; save offset of pointer
 33445 00006DCE 8C06[3805]              	MOV	[THISSFT+2],ES		; save segment value
 33446                                  
 33447                                  ; DS:SI point to JFN table entry.
 33448                                  ; ES:DI point to SFT
 33449                                  ;
 33450                                  ; We now examine the user's JFN entry; If the file was a 70-mode file (network
 33451                                  ; FCB, we examine the ref count on the SFT;  if it was 1, we free the JFN.
 33452                                  ; If the file was not a net FCB, we free the JFN too.
 33453                                  
 33454                                  	;CMP	word [ES:DI+SF_ENTRY.sf_ref_count],1
 33455 00006DD2 26833D01                	cmp	word [ES:DI],1		; will the SFT become free?
 33456 00006DD6 740A                    	jz	short FreeJFN 		; yes, free JFN anyway.
 33457                                  	;mov	al,[ES:DI+2]
 33458 00006DD8 268A4502                	MOV	AL,[ES:DI+SF_ENTRY.sf_mode]
 33459                                  	;and	al,0F0h
 33460 00006DDC 24F0                    	AND	AL,SHARING_MASK
 33461                                  	;cmp	al,70h
 33462 00006DDE 3C70                    	CMP	AL,SHARING_NET_FCB
 33463 00006DE0 7407                    	JZ	short PostFree		; 70-mode and big ref count => free it
 33464                                  
 33465                                  ; The JFN must be freed.  Get the pointer to it and replace the contents with
 33466                                  ; -1.
 33467                                  
 33468                                  FreeJFN:
 33469 00006DE2 E8FFF9                  	call	pJFNFromHandle		;   d = pJFN (handle);
 33470 00006DE5 26C605FF                	MOV	BYTE [ES:DI],0FFh	; release the JFN
 33471                                  PostFree:
 33472                                  
 33473                                  ; ThisSFT is correctly set, we have DS = DOSDATA.  Looks OK for a DOS_CLOSE!
 33474                                  
 33475 00006DE9 E8D2CC                  	call	DOS_CLOSE
 33476                                  
 33477                                  ; DOS_Close may return an error.  If we see such an error, we report it but
 33478                                  ; the JFN stays closed because DOS_Close always frees the SFT!
 33479                                  
 33480 00006DEC 7205                    	JC	short CloseError
 33481                                  	;mov	ah,3Eh
 33482 00006DEE B43E                    	MOV	AH,CLOSE		; MZ Bogus multiplan fix
 33483 00006DF0 E90AA9                  	jmp	SYS_RET_OK
 33484                                  CloseError:
 33485 00006DF3 E913A9                  	jmp	SYS_RET_ERR
 33486                                  
 33487                                  
 33488                                  ;	BREAK <$Commit - commit the file>
 33489                                  ;----------------------------------------------------------------------------
 33490                                  ;
 33491                                  ;**	$Commit - Commit a File
 33492                                  ;
 33493                                  ;	$Commit "commits" a file to disk - all of it's buffers are
 33494                                  ;	flushed out.  BUGBUG - I'm pretty sure that $Commit doesn't update
 33495                                  ;	the directory entry, etc., so this commit is pretty useless.  check
 33496                                  ;	and fix this!! jgl
 33497                                  ;
 33498                                  ;	Assembler usage:
 33499                                  ;	    MOV     BX, handle
 33500                                  ;	    MOV     AH, Commit
 33501                                  ;	    INT     int_command
 33502                                  ;
 33503                                  ;	ENTRY	(bx) = handle
 33504                                  ;	EXIT	none
 33505                                  ;	USES	all
 33506                                  ;;----------------------------------------------------------------------------
 33507                                  
 33508                                  _$COMMIT:
 33509                                  ;	Grab the SFT pointer from the JFN.
 33510                                  
 33511 00006DF6 E82802                  	call	CheckOwner		; get system file entry
 33512 00006DF9 7214                    	JC	short CommitError	; error return
 33513 00006DFB 16                      	push	ss
 33514 00006DFC 1F                      	pop	ds			; For DOS_COMMIT
 33515 00006DFD 893E[3605]              	MOV	[THISSFT],DI		; save offset of pointer
 33516 00006E01 8C06[3805]              	MOV	[THISSFT+2],ES		; save segment value
 33517                                  
 33518                                  ;	ThisSFT is correctly set, we have DS = DOSDATA.  Looks OK for a DOS_COMMIT
 33519                                  ;
 33520                                  ;	ES:DI point to SFT
 33521                                  
 33522 00006E05 E8B7CD                  	call	DOS_COMMIT
 33523 00006E08 7205                    	JC	short CommitError
 33524                                  	;mov	ah,68h
 33525 00006E0A B468                    	MOV	AH,COMMIT		;
 33526 00006E0C E9EEA8                  	jmp	SYS_RET_OK
 33527                                  CommitError:
 33528 00006E0F E9F7A8                  	jmp	SYS_RET_ERR
 33529                                  
 33530                                  ;	BREAK <$ExtHandle - extend handle count>
 33531                                  
 33532                                  ;**	$ExtHandle - Extend Handle Count
 33533                                  ;----------------------------------------------------------------------------
 33534                                  ;	Assembler usage:
 33535                                  ;	    MOV     BX, Number of Opens Allowed (MAX=65534;66535 is
 33536                                  ;	    MOV     AX, 6700H			 reserved to mark SFT
 33537                                  ;	    INT     int_command 		 busy )
 33538                                  ;
 33539                                  ;	ENTRY	(bx) = new number of handles
 33540                                  ;	EXIT	'C' clear if OK
 33541                                  ;		'C' set iff err
 33542                                  ;		  (ax) = error code
 33543                                  ;			 AX = error_not_enough_memory
 33544                                  ;			      error_too_many_open_files
 33545                                  ;	USES	all
 33546                                  ;----------------------------------------------------------------------------
 33547                                  
 33548                                  _$ExtHandle:
 33549 00006E12 31ED                    	XOR	BP,BP			; 0: enlarge   1: shrink  2:psp
 33550                                  	;cmp	bx,20
 33551 00006E14 83FB14                  	CMP	BX,FILPERPROC
 33552 00006E17 7303                    	JAE	short exth2		; Don't set less than FilPerProc no
 33553 00006E19 BB1400                  	MOV	BX,FILPERPROC
 33554                                  exth2:	
 33555 00006E1C 368E06[DE02]            	MOV	ES,[ss:CurrentPDB]	; get user process data block;smr;SS Override
 33556                                  	;mov	cx,[ES:32h]
 33557 00006E21 268B0E3200              	MOV	CX,[ES:PDB.JFN_Length]	; get number of handle allowed
 33558 00006E26 39CB                    	CMP	BX,CX			; the requested == current
 33559 00006E28 7452                    	JE	short ok_done 		; yes and exit
 33560 00006E2A 7722                    	JA	short larger		; go allocate new table
 33561                                  
 33562                                  ;	We're going to shrink the # of handles available
 33563                                  
 33564 00006E2C BD0100                  	MOV	BP,1			; shrink
 33565                                  	;mov	ds,[ES:36h]
 33566 00006E2F 268E1E3600              	MOV	DS,[ES:PDB.JFN_Pointer+2] ;
 33567 00006E34 89DE                    	MOV	SI,BX			;
 33568 00006E36 29D9                    	SUB	CX,BX			; get difference
 33569                                  
 33570                                  ;	BUGBUG - code a SCASB here, should be a bit smaller
 33571                                  chck_handles:
 33572 00006E38 803CFF                  	CMP	BYTE [SI],-1		; scan through handles to ensure close
 33573 00006E3B 7542                    	JNZ	short too_many_files	; status
 33574 00006E3D 46                      	INC	SI
 33575 00006E3E E2F8                    	LOOP	chck_handles
 33576 00006E40 83FB14                  	CMP	BX,FILPERPROC		; = 20
 33577 00006E43 7709                    	JA	short larger		; no
 33578                                  
 33579 00006E45 BD0200                  	MOV	BP,2			; psp
 33580                                  	;mov	di,24
 33581 00006E48 BF1800                  	MOV	DI,PDB.JFN_TABLE	; es:di -> jfn table in psp
 33582 00006E4B 53                      	PUSH	BX
 33583 00006E4C EB1F                    	JMP	short movhandl
 33584                                  
 33585                                  larger:
 33586 00006E4E 83FBFF                  	CMP	BX,-1			; 65535 is not allowed
 33587 00006E51 0F848100                	JZ	invalid_func ; 10/08/2018
 33588 00006E55 F8                      	CLC
 33589 00006E56 53                      	PUSH	BX			; save requested number
 33590 00006E57 83C30F                  	ADD	BX,0FH			; adjust to paragraph boundary
 33591 00006E5A B104                    	MOV	CL,4
 33592                                  	;ror	bx,cl			; MSDOS 3.3
 33593 00006E5C D3DB                    	RCR	BX,CL			; DOS 4.00 fix		;AC000;
 33594 00006E5E 81E3FF1F                	AND	BX,1FFFH		; clear most 3 bits
 33595                                  
 33596 00006E62 55                      	PUSH	BP
 33597 00006E63 E8E8F6                  	call	_$ALLOC			; allocate memory
 33598 00006E66 5D                      	POP	BP
 33599 00006E67 7267                    	JC	short no_memory		; not enough meory
 33600                                  
 33601 00006E69 8EC0                    	MOV	ES,AX			; es:di points to new table memory
 33602 00006E6B 31FF                    	XOR	DI,DI
 33603                                  movhandl:
 33604 00006E6D 368E1E[DE02]            	MOV	DS,[ss:CurrentPDB] 	; get user PDB address	;smr;SS Override
 33605                                  
 33606 00006E72 F7C50300                	test	BP,3			; enlarge ?
 33607 00006E76 740C                    	JZ	short enlarge 		; yes
 33608 00006E78 59                      	POP	CX			; cx = the amount you shrink
 33609 00006E79 51                      	PUSH	CX
 33610 00006E7A EB0C                    	JMP	short copy_hand
 33611                                  
 33612                                  ;	Done.  'C' clear
 33613                                  
 33614                                  ok_done:
 33615 00006E7C E97EA8                  	jmp	SYS_RET_OK
 33616                                  
 33617                                  too_many_files:
 33618                                  	;mov	al,4
 33619 00006E7F B004                    	MOV	AL,error_too_many_open_files
 33620 00006E81 E985A8                  	jmp	SYS_RET_ERR
 33621                                  
 33622                                  enlarge:
 33623                                  	;mov	cx,[32h]
 33624 00006E84 8B0E3200                	MOV	CX,[PDB.JFN_Length]	; get number of old handles
 33625                                  copy_hand:
 33626 00006E88 89CA                    	MOV	DX,CX
 33627                                  	;lds	si,[34h]
 33628 00006E8A C5363400                	LDS	SI,[PDB.JFN_Pointer]	; get old table pointer
 33629 00006E8E F3A4                    	REP	MOVSB			; copy infomation to new table
 33630 00006E90 59                      	POP	CX			; get new number of handles
 33631 00006E91 51                      	PUSH	CX			; save it again
 33632 00006E92 29D1                    	SUB	CX,DX			; get the difference
 33633 00006E94 B0FF                    	MOV	AL,-1			; set availability to handles
 33634 00006E96 F3AA                    	REP	STOSB
 33635 00006E98 368E1E[DE02]            	MOV	DS,[ss:CurrentPDB] 	; get user process data block;smr;SS Override
 33636                                  	;cmp	word [34h],0
 33637 00006E9D 833E340000              	CMP	WORD [PDB.JFN_Pointer],0 ; check if original table pointer
 33638 00006EA2 750D                    	JNZ	short update_info	; yes, go update PDB entries
 33639 00006EA4 55                      	PUSH	BP
 33640 00006EA5 1E                      	PUSH	DS			; save old table segment
 33641 00006EA6 06                      	PUSH	ES			; save new table segment
 33642 00006EA7 8E063600                	MOV	ES,[PDB.JFN_Pointer+2]	; get old table segment
 33643 00006EAB E8BDF7                  	call	_$DEALLOC		; deallocate old table meomory
 33644 00006EAE 07                      	POP	ES			; restore new table segment
 33645 00006EAF 1F                      	POP	DS			; restore old table segment
 33646 00006EB0 5D                      	POP	BP
 33647                                  
 33648                                  update_info:
 33649 00006EB1 F7C50200                	test	BP,2			; psp?
 33650 00006EB5 7408                    	JZ	short non_psp 		; no
 33651                                  	;mov	word [34h],18h ; 24
 33652 00006EB7 C70634001800            	MOV	WORD [PDB.JFN_Pointer],PDB.JFN_TABLE ; restore
 33653 00006EBD EB06                    	JMP	short final
 33654                                  non_psp:
 33655                                  	;mov	word [34h],0
 33656 00006EBF C70634000000            	MOV	WORD [PDB.JFN_Pointer],0 ; new table pointer offset always 0
 33657                                  final:
 33658                                  	;mov	word [36h],es	
 33659 00006EC5 8C063600                	MOV	[PDB.JFN_Pointer+2],ES	; update table pointer segment
 33660                                  	;pop	word [32h]
 33661 00006EC9 8F063200                	POP	word [PDB.JFN_Length]	; restore new number of handles
 33662 00006ECD E92DA8                  	jmp	SYS_RET_OK
 33663                                  
 33664                                  no_memory:
 33665 00006ED0 5B                      	POP	BX			; clean stack
 33666                                  	;mov	al,8
 33667 00006ED1 B008                    	MOV	AL,error_not_enough_memory
 33668 00006ED3 E933A8                  	jmp	SYS_RET_ERR
 33669                                  invalid_func:
 33670                                  	;mov	al,1
 33671 00006ED6 B001                    	MOV	AL,error_invalid_function
 33672 00006ED8 E92EA8                  	jmp	SYS_RET_ERR
 33673                                  
 33674                                  
 33675                                  ;	BREAK <$READ - Read from a file handle>
 33676                                  ;----------------------------------------------------------------------------
 33677                                  ;
 33678                                  ;**	$Read - Read from a File Handle
 33679                                  ;
 33680                                  ;   Assembler usage:
 33681                                  ;
 33682                                  ;	LDS	DX, buf
 33683                                  ;	MOV	CX, count
 33684                                  ;	MOV	BX, handle
 33685                                  ;	MOV	AH, Read
 33686                                  ;	INT	int_command
 33687                                  ;	  AX has number of bytes read
 33688                                  ;
 33689                                  ;	ENTRY	(bx) = file handle
 33690                                  ;		(cx) = byte count
 33691                                  ;		(ds:dx) = buffer address
 33692                                  ;	EXIT	Through system call return so that to user:
 33693                                  ;		  'C' clear if OK
 33694                                  ;		    (ax) = bytes read
 33695                                  ;		  'C' set if error
 33696                                  ;		    (ax) = error code
 33697                                  ;
 33698                                  ;----------------------------------------------------------------------------
 33699                                  
 33700                                  _$READ:
 33701 00006EDB BE[003E]                	MOV	SI,DOS_READ
 33702                                  ReadDo:
 33703 00006EDE E803F9                  	call	pJFNFromHandle
 33704 00006EE1 7208                    	JC	short ReadError
 33705 00006EE3 268A05                  	MOV	AL,[ES:DI]
 33706 00006EE6 E83801                  	call	CheckOwner		; get the handle
 33707 00006EE9 7303                    	JNC	short ReadSetup		; no errors do the operation
 33708                                  
 33709                                  ;	Have an error.	'C' set
 33710                                  
 33711                                  ReadError:
 33712 00006EEB E91BA8                  	jmp	SYS_RET_ERR		; go to error traps
 33713                                  
 33714                                  ReadSetup:
 33715 00006EEE 36893E[3605]            	MOV	[SS:THISSFT],DI		; save offset of pointer;smr;SS Override
 33716 00006EF3 368C06[3805]            	MOV	[ss:THISSFT+2],ES	; save segment value	;smr;SS Override
 33717                                  	;;; MSDOS 6.0 
 33718                                  ;; Extended Open
 33719                                  	;;;testb [ES:DI+SF_ENTRY.sf_mode],INT_24_ERROR  ;AN000;;EO. need i24
 33720                                  	;;;JZ	short needi24 		      ;AN000;;EO. yes
 33721                                  	;;;OR	byte [EXTOPEN_ON],EXT_OPEN_I24_OFF 
 33722                                  					;AN000;;EO. set it off;smr;SS Override
 33723                                  needi24:				;AN000;
 33724                                  ;; Extended Open
 33725 00006EF8 36FF36[DA02]            	push	word [SS:DMAADD]
 33726 00006EFD 36FF36[DC02]            	push	word [SS:DMAADD+2]	;smr;SS Override
 33727                                  ;;;;;	BAD SPOT FOR 286!!! SEGMENT ARITHMETIC!!!
 33728                                  	;;; MSDOS 6.0
 33729                                  	;;; CALL Align_Buffer		;AN000;MS. align user's buffer
 33730                                  	; MSDOS 3.3
 33731 00006F02 89D3                    	MOV	BX,DX			; copy offset
 33732 00006F04 51                      	push	cx			; don't stomp on count
 33733 00006F05 B104                    	MOV	CL,4			; bits to shift bytes->para
 33734 00006F07 D3EB                    	SHR	BX,CL			; get number of paragraphs
 33735 00006F09 59                      	pop	cx			; get count back
 33736 00006F0A 8CD8                    	MOV	AX,DS			; get original segment
 33737 00006F0C 01D8                    	ADD	AX,BX			; get new segment
 33738 00006F0E 8ED8                    	MOV	DS,AX			; in seg register
 33739 00006F10 83E20F                  	AND	DX,0Fh			; normalize offset
 33740 00006F13 368916[DA02]            	MOV	[ss:DMAADD],DX		; use user DX as offset	;smr;SS Override
 33741 00006F18 368C1E[DC02]            	MOV	[ss:DMAADD+2],DS 	; use user DS as segment for DMA
 33742                                  						;smr;SS Override
 33743                                  ;;;;;	END BAD SPOT FOR 286!!! SEGMENT ARITHMETIC!!!
 33744 00006F1D 16                      	push	ss			; go for DOS addressability
 33745 00006F1E 1F                      	pop	ds
 33746 00006F1F FFD6                    	CALL	SI ; DOS_READ		; indirect call to operation
 33747 00006F21 8F06[DC02]              	pop	word [DMAADD+2]
 33748 00006F25 8F06[DA02]              	pop	word [DMAADD]
 33749                                  	;JNC	short READ_OK		;AN002;
 33750                                  	;JMP	ReadError		;AN002; if error, say bye bye
 33751 00006F29 72C0                    	jc	short ReadError
 33752                                  READ_OK:
 33753 00006F2B 89C8                    	MOV	AX,CX			; get correct return in correct reg
 33754 00006F2D E9CDA7                  	jmp	SYS_RET_OK		; successful return
 33755                                  
 33756                                  
 33757                                  
 33758                                  ; 13/07/2018 - Retro DOS v3.0
 33759                                  
 33760                                  ;
 33761                                  ;   Input: DS:DX points to user's buffer addr
 33762                                  ;   Function: rearrange segment and offset for READ/WRITE buffer
 33763                                  ;   Output: [DMAADD] set
 33764                                  ;
 33765                                  
 33766                                  ;Align_Buffer:
 33767                                  ;	MOV	BX,DX			; copy offset
 33768                                  ;	push	cx			; don't stomp on count
 33769                                  ;	MOV	CL,4			; bits to shift bytes->para
 33770                                  ;	SHR	BX,CL			; get number of paragraphs
 33771                                  ;	pop	cx			; get count back
 33772                                  ;	MOV	AX,DS			; get original segment
 33773                                  ;	ADD	AX,BX			; get new segment
 33774                                  ;	MOV	DS,AX			; in seg register
 33775                                  ;	AND	DX,0Fh			; normalize offset
 33776                                  ;	MOV	[ss:DMAADD],DX		; use user DX as offset	;smr;SS Override
 33777                                  ;	MOV	[ss:DMAADD+2],DS 	; use user DS as segment for DMA
 33778                                  ;						;smr;SS Override
 33779                                  ;	retn
 33780                                  
 33781                                  ;BREAK <$WRITE - write to a file handle>
 33782                                  ;----------------------------------------------------------------------------
 33783                                  ;
 33784                                  ;   Assembler usage:
 33785                                  ;	    LDS     DX, buf
 33786                                  ;	    MOV     CX, count
 33787                                  ;	    MOV     BX, handle
 33788                                  ;	    MOV     AH, Write
 33789                                  ;	    INT     int_command
 33790                                  ;	  AX has number of bytes written
 33791                                  ;   Errors:
 33792                                  ;	    AX = write_invalid_handle
 33793                                  ;	       = write_access_denied
 33794                                  ;
 33795                                  ;   Returns in register AX
 33796                                  ;
 33797                                  ;----------------------------------------------------------------------------
 33798                                  
 33799                                  _$WRITE:
 33800 00006F30 BE[813F]                	MOV	SI,DOS_WRITE
 33801 00006F33 EBA9                    	JMP	short ReadDo
 33802                                  
 33803                                  ;BREAK <$LSEEK - move r/w pointer>
 33804                                  ;----------------------------------------------------------------------------
 33805                                  ;
 33806                                  ;   Assembler usage:
 33807                                  ;	    MOV     DX, offsetlow
 33808                                  ;	    MOV     CX, offsethigh
 33809                                  ;	    MOV     BX, handle
 33810                                  ;	    MOV     AL, method
 33811                                  ;	    MOV     AH, LSeek
 33812                                  ;	    INT     int_command
 33813                                  ;	  DX:AX has the new location of the pointer
 33814                                  ;   Error returns:
 33815                                  ;	    AX = error_invalid_handle
 33816                                  ;	       = error_invalid_function
 33817                                  ;   Returns in registers DX:AX
 33818                                  ;
 33819                                  ;----------------------------------------------------------------------------
 33820                                  
 33821                                  _$LSEEK:
 33822 00006F35 E8E900                  	call	CheckOwner		; get system file entry
 33823                                  LSeekError:
 33824 00006F38 7302                    	JNC	short CHKOWN_OK		;AN002;
 33825 00006F3A EBAF                    	JMP	short ReadError		;AN002; error return
 33826                                  
 33827                                  CHKOWN_OK:				;AN002;
 33828 00006F3C 3C02                    	CMP	AL,2			; is the seek value correct?
 33829 00006F3E 760A                    	JBE	short LSeekDisp		; yes, go dispatch
 33830                                  	;mov	byte [ss:EXTERR_LOCUS],1 
 33831 00006F40 36C606[D102]01          	MOV	byte [ss:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 33832                                  					;smr;SS Override
 33833                                  	;mov	al,1
 33834 00006F46 B001                    	mov	al, error_invalid_function ; invalid method
 33835 00006F48 EBA1                    	jmp	short ReadError
 33836                                  LSeekDisp:
 33837 00006F4A 3C01                    	CMP	AL,1			; best way to dispatch; check middle
 33838 00006F4C 720A                    	JB	short LSeekStore	; just store CX:DX
 33839 00006F4E 771C                    	JA	short LSeekEOF		; seek from end of file
 33840                                  	;add	dx,[es:di+21]
 33841 00006F50 26035515                	ADD	DX,[ES:DI+SF_ENTRY.sf_position]
 33842                                  	;adc	cx,[es:di+23]
 33843 00006F54 26134D17                	ADC	CX,[ES:DI+SF_ENTRY.sf_position+2]
 33844                                  LSeekStore:
 33845 00006F58 89C8                    	MOV	AX,CX			; AX:DX
 33846 00006F5A 92                      	XCHG	AX,DX			; DX:AX is the correct value
 33847                                  LSeekSetpos:
 33848                                  	;mov	[es:di+21],ax
 33849 00006F5B 26894515                	MOV	[ES:DI+SF_ENTRY.sf_position],AX
 33850                                  	;mov	[es:di+23],dx
 33851 00006F5F 26895517                	MOV	[ES:DI+SF_ENTRY.sf_position+2],DX
 33852 00006F63 E8A5A6                  	call	Get_User_Stack
 33853                                  	;mov	[si+6],dx
 33854 00006F66 895406                  	MOV	[SI+user_env.user_DX],DX ; return DX:AX
 33855 00006F69 E991A7                  	jmp	SYS_RET_OK		; successful return
 33856                                  
 33857                                  LSeekEOF:
 33858                                  	;test	word [es:di+5],8000h
 33859 00006F6C 26F745050080            	test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 33860 00006F72 750A                    	JNZ	short Check_LSeek_Mode	; Is Net
 33861                                  LOCAL_LSeek:
 33862                                  	;add	dx,[es:di+17]
 33863 00006F74 26035511                	ADD	DX,[ES:DI+SF_ENTRY.sf_size]
 33864                                  	;adc	cx,[es:di+19]
 33865 00006F78 26134D13                	ADC	CX,[ES:DI+SF_ENTRY.sf_size+2]
 33866 00006F7C EBDA                    	JMP	short LSeekStore	; go and set the position
 33867                                  
 33868                                  Check_LSeek_Mode:
 33869                                  	;test	word [es:di+2],8000h
 33870 00006F7E 26F745020080            	test	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB
 33871 00006F84 75EE                    	JNZ	short LOCAL_LSeek	; FCB treated like local file
 33872                                  	;mov	ax,[es:di+2]
 33873 00006F86 268B4502                	MOV	AX,[ES:DI+SF_ENTRY.sf_mode]
 33874                                  	;and	ax, 0F0h
 33875 00006F8A 25F000                  	AND	AX,SHARING_MASK
 33876                                  	;cmp	ax,40h
 33877 00006F8D 83F840                  	CMP	AX,SHARING_DENY_NONE
 33878 00006F90 7405                    	JZ	short NET_LSEEK		; LSEEK exported in this mode
 33879                                  	;cmp	ax,30h
 33880 00006F92 83F830                  	CMP	AX,SHARING_DENY_READ
 33881 00006F95 75DD                    	JNZ	short LOCAL_LSeek	; Treated like local Lseek
 33882                                  NET_LSEEK:
 33883                                  ;	JMP	short LOCAL_LSeek
 33884                                  ; REMOVE ABOVE INSTRUCTION TO ENABLE DCR 142
 33885                                  	;CallInstall Net_Lseek,MultNET,33
 33886                                  	;JNC	short LSeekSetPos
 33887                                  
 33888 00006F97 B82111                  	mov     ax, 1121h
 33889 00006F9A CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - SEEK FROM END OF REMOTE FILE
 33890                                  			; CX:DX = offset (in bytes) from end
 33891                                  			; ES:DI -> SFT, SFT DPB field -> DPB of drive with file
 33892                                  			; SS = DOS CS
 33893                                  			; Return: CF set on error
 33894                                  			; CF clear if successful, DX:AX = new file position
 33895 00006F9C 73BD                    	jnb     short LSeekSetpos
 33896 00006F9E E968A7                  	jmp	SYS_RET_ERR
 33897                                  
 33898                                  ;BREAK <FileTimes - modify write times on a handle>
 33899                                  ;----------------------------------------------------------------------------
 33900                                  ;
 33901                                  ;   Assembler usage:
 33902                                  ;	    MOV AH, FileTimes (57H)
 33903                                  ;	    MOV AL, func
 33904                                  ;	    MOV BX, handle
 33905                                  ;	; if AL = 1 then then next two are mandatory
 33906                                  ;	    MOV CX, time
 33907                                  ;	    MOV DX, date
 33908                                  ;	    INT 21h
 33909                                  ;	; if AL = 0 then CX/DX has the last write time/date
 33910                                  ;	; for the handle.
 33911                                  ;
 33912                                  ;	AL=02		 get extended attributes
 33913                                  ;	   BX=handle
 33914                                  ;	   CX=size of buffer (0, return max size )
 33915                                  ;	   DS:SI query list (si=-1, selects all EA)
 33916                                  ;	   ES:DI buffer to hold EA list
 33917                                  ;
 33918                                  ;	AL=03		 get EA name list
 33919                                  ;	   BX=handle
 33920                                  ;	   CX=size of buffer (0, return max size )
 33921                                  ;	   ES:DI buffer to hold name list
 33922                                  ;
 33923                                  ;	AL=04		 set extended attributes
 33924                                  ;	   BX=handle
 33925                                  ;	   ES:DI buffer of EA list
 33926                                  ;
 33927                                  ;
 33928                                  ;   Error returns:
 33929                                  ;	    AX = error_invalid_function
 33930                                  ;	       = error_invalid_handle
 33931                                  ;
 33932                                  ;----------------------------------------------------------------------------
 33933                                  
 33934                                  _$FILE_TIMES:
 33935                                  	; 13/07/2018 - Retro DOS v3.0
 33936                                  
 33937                                  	; MSDOS 3.3
 33938 00006FA1 3C02                    	cmp	al,2			; correct subfunction ?
 33939 00006FA3 720B                    	jb	short ft1
 33940                                  
 33941                                          ;mov	byte [ss:EXTERR_LOCUS], 1
 33942 00006FA5 36C606[D102]01          	mov	byte [ss:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 33943                                  						;SS Overr
 33944                                  	;mov	al,1
 33945 00006FAB B001                    	mov	al,error_invalid_function ; give bad return
 33946 00006FAD E959A7                  	jmp     SYS_RET_ERR
 33947                                  
 33948                                  	; MSDOS 6.0
 33949                                  	;cmp	al,2			; correct subfunction ?
 33950                                  	;jae	short inval_func
 33951                                  ft1:
 33952 00006FB0 E86E00                  	call	CheckOwner		; get sft
 33953 00006FB3 7283                    	jc	short LSeekError	; bad handle
 33954                                  
 33955 00006FB5 08C0                    	or	al,al			; get time/date ?
 33956 00006FB7 7515                    	jnz	short ft_set_time
 33957                                  
 33958                                  ;------ here we get the time & date from the sft for the user
 33959                                  
 33960 00006FB9 FA                      	cli				; is this cli/sti reqd ? BUGBUG
 33961                                  	;mov	cx,[es:di+13]
 33962 00006FBA 268B4D0D                	mov	cx,[es:di+SF_ENTRY.sf_time] ; get the time
 33963                                  	;mov	dx,[es:di+15]
 33964 00006FBE 268B550F                	mov	dx,[es:di+SF_ENTRY.sf_date] ;  & date
 33965 00006FC2 FB                      	sti
 33966 00006FC3 E845A6                  	call	Get_User_Stack
 33967                                  	;mov	[si+4],cx
 33968 00006FC6 894C04                  	mov	[si+user_env.user_CX],cx
 33969                                  	;mov	[si+6],dx
 33970 00006FC9 895406                  	mov	[si+user_env.user_DX],dx
 33971 00006FCC EB20                    	jmp	short ok_ret
 33972                                  
 33973                                  ;------ here we set the time in sft
 33974                                  
 33975                                  ft_set_time:
 33976 00006FCE E89BB0                  	call    EcritSFT
 33977                                  	;mov	[es:di+13],cx
 33978 00006FD1 26894D0D                	mov	[es:di+SF_ENTRY.sf_time],cx ; drop in new time
 33979                                  	;mov	[es:di+15],dx
 33980 00006FD5 2689550F                	mov	[es:di+SF_ENTRY.sf_date],dx ;  and date	
 33981                                  
 33982 00006FD9 31C0                    	xor	ax, ax
 33983 00006FDB 36FF1E[9400]            	call	far [ss:JShare+(14*4)] ; 14 = ShSU	; SS Override
 33984                                  
 33985                                  ;------ set the flags in SFT entry
 33986                                  	;and	word [es:di+5],0FFBFh
 33987 00006FE0 26836505BF              	and	word [es:di+SF_ENTRY.sf_flags],~devid_file_clean 
 33988                                  							; mark file as dirty
 33989                                  	;or	word [es:di+5],4000h
 33990 00006FE5 26814D050040            	or	word [es:di+SF_ENTRY.sf_flags],sf_close_nodate
 33991                                  							; ask close not to
 33992                                  							;   bother about date
 33993                                  							;   and time
 33994 00006FEB E886B0                  	call	LcritSFT
 33995                                  ok_ret:
 33996 00006FEE E90CA7                  	jmp	SYS_RET_OK
 33997                                  
 33998                                  ;inval_func:
 33999                                  ;	mov	byte [ss:EXTERR_LOCUS], 1
 34000                                  ;	mov	byte [ss:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 34001                                  ;						;SS Overr
 34002                                  ;	;mov	al,1
 34003                                  ;	mov	al,error_invalid_function ; give bad return
 34004                                  ;	jmp     SYS_RET_ERR
 34005                                  
 34006                                  ;BREAK <$DUP - duplicate a jfn>
 34007                                  ;----------------------------------------------------------------------------
 34008                                  ;
 34009                                  ;   Assembler usage:
 34010                                  ;	    MOV     BX, fh
 34011                                  ;	    MOV     AH, Dup
 34012                                  ;	    INT     int_command
 34013                                  ;	  AX has the returned handle
 34014                                  ;   Errors:
 34015                                  ;	    AX = dup_invalid_handle
 34016                                  ;	       = dup_too_many_open_files
 34017                                  ;
 34018                                  ;----------------------------------------------------------------------------
 34019                                  
 34020                                  _$DUP:
 34021 00006FF1 89D8                    	MOV	AX,BX			; save away old handle in AX
 34022 00006FF3 E842F8                  	call	JFNFree 		; free handle? into ES:DI, new in BX
 34023                                  DupErrorCheck:
 34024 00006FF6 7218                    	JC	short DupErr		; nope, bye
 34025 00006FF8 06                      	push	es
 34026 00006FF9 57                      	push	di			; save away SFT
 34027 00006FFA 5E                      	pop	si			; into convenient place DS:SI
 34028 00006FFB 1F                      	pop	ds
 34029 00006FFC 93                      	XCHG	AX,BX			; get back old handle
 34030 00006FFD E82100                  	call	CheckOwner		; get sft in ES:DI
 34031 00007000 720E                    	JC	short DupErr		; errors go home
 34032 00007002 E8D7C6                  	call	DOS_Dup_Direct
 34033 00007005 E8DCF7                  	call	pJFNFromHandle		; get pointer
 34034 00007008 268A1D                  	MOV	BL,[ES:DI]		; get SFT number
 34035 0000700B 881C                    	MOV	[SI],BL			; stuff in new SFT
 34036 0000700D E9EDA6                  	jmp	SYS_RET_OK		; and go home
 34037                                  DupErr:
 34038 00007010 E9F6A6                  	jmp	SYS_RET_ERR
 34039                                  
 34040                                  ;BREAK <$DUP2 - force a dup on a particular jfn>
 34041                                  ;----------------------------------------------------------------------------
 34042                                  ;
 34043                                  ;   Assembler usage:
 34044                                  ;	    MOV     BX, fh
 34045                                  ;	    MOV     CX, newfh
 34046                                  ;	    MOV     AH, Dup2
 34047                                  ;	    INT     int_command
 34048                                  ;   Error returns:
 34049                                  ;	    AX = error_invalid_handle
 34050                                  ;
 34051                                  ;----------------------------------------------------------------------------
 34052                                  
 34053                                  _$DUP2:
 34054 00007013 53                      	push	bx
 34055 00007014 51                      	push	cx			; save source
 34056 00007015 89CB                    	MOV	BX,CX			; get one to close
 34057 00007017 E8A9FD                  	call	_$CLOSE			; close destination handle
 34058 0000701A 5B                      	pop	bx
 34059 0000701B 58                      	pop	ax			; old in AX, new in BX
 34060 0000701C E8C5F7                  	call	pJFNFromHandle		; get pointer
 34061 0000701F EBD5                    	JMP	short DupErrorCheck	; check error and do dup
 34062                                  
 34063                                  ;Break	<CheckOwner - verify ownership of handles from server>
 34064                                  ;----------------------------------------------------------------------------
 34065                                  ;   CheckOwner - Due to the ability of the server to close file handles for a
 34066                                  ;   process without the process knowing it (delete/rename of open files, for
 34067                                  ;   example), it is possible for the redirector to issue a call to a handle
 34068                                  ;   that it soes not rightfully own.  We check here to make sure that the
 34069                                  ;   issuing process is the owner of the SFT.  At the same time, we do a
 34070                                  ;   SFFromHandle to really make sure that the SFT is good.
 34071                                  ;
 34072                                  ;	ENTRY	BX has the handle
 34073                                  ;		User_ID is the current user
 34074                                  ;	EXIT	Carry Clear => ES:DI points to SFT
 34075                                  ;		Carry Set => AX has error code
 34076                                  ;	USES	none
 34077                                  ;----------------------------------------------------------------------------
 34078                                  
 34079                                  CheckOwner:
 34080                                  	; 13/07/2018 - Retro DOS v3.0
 34081                                  
 34082 00007021 E8D8F7                  	call	SFFromHandle
 34083 00007024 720F                    	jc	short co_ret_label	; retc
 34084                                  
 34085 00007026 50                      	push	ax
 34086                                  
 34087                                  	; MSDOS 6.0
 34088                                  ;SR;
 34089                                  ;SR; WIN386 patch - Do not check for USER_ID for using handles since these 
 34090                                  ;SR; are shared across multiple VMs in win386.
 34091                                  ;SR;
 34092                                  	;test	byte [IsWin386],1
 34093                                  	;jz	short no_win386		;win386 is not present
 34094                                  	;xor	ax,ax			;set the zero flag
 34095                                  	;jmp	short skip_win386	
 34096                                  
 34097                                  ;no_win386:
 34098 00007027 36A1[EA02]              	mov	ax,[SS:USER_ID]		;smr;SS Override
 34099                                  	;cmp	ax,[es:di+47]
 34100 0000702B 263B452F                	cmp	ax,[es:di+SF_ENTRY.sf_UID]
 34101                                  
 34102                                  ;skip_win386:
 34103 0000702F 58                      	pop	ax
 34104                                  	
 34105 00007030 7403                    	jz	short co_ret_label
 34106                                  	
 34107                                  	;mov	al,6
 34108 00007032 B006                    	mov	al,error_invalid_handle
 34109 00007034 F9                      	stc
 34110                                  
 34111                                  co_ret_label:
 34112 00007035 C3                      	retn
 34113                                  
 34114                                  ;============================================================================
 34115                                  ; FILE.ASM, MSDOS 6.0, 1991
 34116                                  ;============================================================================
 34117                                  ; 14/07/2018 - Retro DOS v3.0
 34118                                  
 34119                                  ; MSDOS 2.11
 34120                                  ;BREAK <$Open - open a file handle>
 34121                                  ;----------------------------------------------------------------------------
 34122                                  ;   Assembler usage:
 34123                                  ;           LDS     DX, Name
 34124                                  ;           MOV     AH, Open
 34125                                  ;           MOV     AL, access
 34126                                  ;           INT     int_command
 34127                                  ;
 34128                                  ;       ACCESS          Function
 34129                                  ;       ------          --------
 34130                                  ;       open_for_read   file is opened for reading
 34131                                  ;       open_for_write  file is opened for writing
 34132                                  ;       open_for_both   file is opened for both reading and writing.
 34133                                  ;
 34134                                  ;   Error returns:
 34135                                  ;           AX = error_invalid_access
 34136                                  ;              = error_file_not_found
 34137                                  ;              = error_access_denied
 34138                                  ;              = error_too_many_open_files
 34139                                  ;----------------------------------------------------------------------------
 34140                                  
 34141                                  ; MSDOS 6.0
 34142                                  ;	BREAK <$Open - open a file from a path string>
 34143                                  ;----------------------------------------------------------------------------
 34144                                  ;
 34145                                  ;**	$OPen - Open a File
 34146                                  ;
 34147                                  ;	given a path name in DS:DX and an open mode in AL, $Open opens the
 34148                                  ;	file and and returns a handle
 34149                                  ;
 34150                                  ;	ENTRY	(DS:DX) = pointer to asciz name
 34151                                  ;		(AL) = open mode
 34152                                  ;	EXIT	'C' clear if OK
 34153                                  ;		  (ax) = file handle
 34154                                  ;		'C' set if error
 34155                                  ;		  (ax) = error code
 34156                                  ;	USES	all
 34157                                  ;
 34158                                  ;----------------------------------------------------------------------------
 34159                                  
 34160                                  _$OPEN:       
 34161 00007036 30E4                    	xor	ah,ah  ; MSDOS 6.0	
 34162                                  _$Open2:
 34163                                  	;mov	ch,16h
 34164 00007038 B516                    	mov	ch,attr_hidden+attr_system+attr_directory
 34165 0000703A E84502                  	call	SetAttrib
 34166 0000703D B9[7E37]                	mov	cx,DOS_OPEN
 34167                                  
 34168                                  	;xor	ah,ah  ; MSDOS 3.3
 34169                                  
 34170 00007040 50                      	push	ax
 34171                                  
 34172                                  ;*	General file open/create code. The $CREATE call and the various
 34173                                  ;	$OPEN calls all come here.
 34174                                  ;
 34175                                  ;	We'll share a lot of the standard stuff of allocating SFTs, cracking
 34176                                  ;	path names, etc., and then dispatch to our individual handlers.
 34177                                  ;	WARNING - this info and list is just a guess, not definitive - jgl
 34178                                  ;
 34179                                  ;	(TOS) = create mode
 34180                                  ;	(CX) = address of routine to call to do actual function
 34181                                  ;	(DS:DX) = ASCIZ name
 34182                                  ;	SAttrib = Attribute mask
 34183                                  
 34184                                  ;	Get a free SFT and mark it "being allocated"
 34185                                  
 34186                                  AccessFile:
 34187 00007041 E828B0                  	call	EcritSFT
 34188 00007044 E804F8                  	call	SFNFree			; get a free sfn
 34189 00007047 E82AB0                  	call	LcritSFT
 34190 0000704A 7214                    	jc	short OpenFailJ		; oops, no free sft's
 34191 0000704C 36891E[4205]            	MOV	[SS:SFN],BX		; save the SFN for later;smr;SS Override
 34192 00007051 36893E[3605]            	MOV	[SS:THISSFT],DI		; save the SF offset	;smr;SS Override
 34193 00007056 368C06[3805]            	MOV	[SS:THISSFT+2],ES	; save the SF segment	;smr;SS Override
 34194                                  
 34195                                  ;	Find a free area in the user's JFN table.
 34196                                  
 34197 0000705B E8DAF7                  	call	JFNFree			; get a free jfn
 34198 0000705E 7303                    	jnc	short SaveJFN
 34199                                  OpenFailJ:
 34200 00007060 E98100                  	JMP	OpenFail		; there were free JFNs... try SFN
 34201                                  
 34202                                  SaveJFN:
 34203 00007063 36893E[4605]            	mov	[ss:PJFN],DI		; save the jfn offset	;smr;SS Override
 34204 00007068 368C06[4805]            	MOV	[ss:PJFN+2],ES		; save the jfn segment	;smr;SS Override
 34205 0000706D 36891E[4405]            	MOV	[ss:JFN],BX		; save the jfn itself	;smr;SS Override
 34206                                  
 34207                                  ;	We have been given an JFN. We lock it down to prevent other tasks from
 34208                                  ;	reusing the same JFN.
 34209                                  
 34210 00007072 368B1E[4205]            	MOV	BX,[ss:SFN]					;smr;SS Override
 34211 00007077 26881D                  	MOV	[ES:DI],BL		; assign the JFN
 34212 0000707A 89D6                    	MOV	SI,DX			; get name in appropriate place
 34213 0000707C BF[6003]                	MOV	DI,OPENBUF		; appropriate buffer
 34214 0000707F 51                      	push	cx			; save routine to call
 34215 00007080 E8C9F9                  	call	TransPath		; convert the path
 34216 00007083 5B                      	pop	bx			; (bx) = routine to call
 34217                                  
 34218 00007084 36C536[3605]            	LDS	SI,[SS:THISSFT]					;smr;SS Override
 34219 00007089 720A                    	JC	short OpenCleanJ	; no error, go and open file
 34220 0000708B 36803E[1505]FF          	CMP	byte [ss:CMETA],-1				;smr;SS Override
 34221 00007091 7404                    	JZ	short SetSearch
 34222                                  	;mov	al,2
 34223 00007093 B002                    	MOV	AL,error_file_not_found ; no meta chars allowed
 34224                                  OpenCleanJ:
 34225 00007095 EB3E                    	JMP	short OpenClean
 34226                                  
 34227                                  SetSearch:
 34228 00007097 58                      	pop	ax			; Mode (Open), Attributes (Create)
 34229                                  
 34230                                  ;	We need to get the new inheritance bits.
 34231                                  
 34232 00007098 31C9                    	xor	cx,cx
 34233                                  	; MSDOS 6.0
 34234                                  	;mov	[si+2],cx ; 0
 34235 0000709A 894C02                  	MOV	[SI+SF_ENTRY.sf_mode],cx ; initialize mode field to 0
 34236                                  	;mov    [si+51],cx ; 0
 34237 0000709D 894C33                  	MOV	[SI+SF_ENTRY.sf_MFT],cx	 ; clean out sharing info
 34238                                  	;
 34239 000070A0 81FB[7E37]              	CMP	BX,DOS_OPEN
 34240 000070A4 7509                    	JNZ	short _DoOper
 34241                                  	;test   al,80h
 34242 000070A6 A880                    	test	AL,SHARING_NO_INHERIT	; look for no inher
 34243 000070A8 7405                    	JZ	short _DoOper ; 10/08/2018
 34244 000070AA 247F                    	AND	AL,7Fh			; mask off inherit bit
 34245                                  	;mov	cx,1000h
 34246 000070AC B90010                  	MOV	CX,sf_no_inherit
 34247                                  _DoOper:
 34248                                  	;; MSDOS 3.3
 34249                                  	;;mov	word [si+2], 0
 34250                                  	;;mov	word [si+33h], 0
 34251                                  	;MOV	word [SI+SF_ENTRY.sf_mode],0
 34252                                  	;MOV	word [SI+SF_ENTRY.sf_MFT],0
 34253                                  
 34254                                  	; MSDOS 6.0
 34255                                  ;**	Check if this is an extended open. If so you must set the
 34256                                  ;	modes in sf_mode. Call Set_EXT_mode to do all this. See
 34257                                  ;	Set_EXT_mode in creat.asm
 34258                                  
 34259                                  	; MSDOS 6.0
 34260                                  	;;SAVE	<di, es>                ;M022 conditional removed here
 34261                                  	;push	di
 34262                                  	;push	es
 34263                                  	;push	ds
 34264                                  	;pop	es
 34265                                  	;push	si
 34266                                  	;pop	di			; (es:di) = SFT address
 34267                                  	;call	Set_EXT_mode
 34268                                  	;;RESTORE <es, di>
 34269                                  	;pop	es
 34270                                  	;pop	di
 34271                                  
 34272                                  	;Context DS
 34273 000070AF 16                      	push	ss
 34274 000070B0 1F                      	pop	ds	
 34275                                  
 34276 000070B1 51                      	push	cx
 34277 000070B2 FFD3                    	CALL	BX			; blam!
 34278 000070B4 59                      	pop	cx
 34279 000070B5 C536[3605]              	LDS	SI,[THISSFT]
 34280                                  	;JC	short OpenE2		;AN000;FT. chek extended open hooks first
 34281 000070B9 721B                    	jc	short OpenE ; MSDOS 3.3
 34282                                  
 34283                                  ;	The SFT was successfully opened. Remove busy mark.
 34284                                  
 34285                                  OpenOK:
 34286                                  	;MOV	word [SI+SF_ENTRY.sf_ref_count],1
 34287 000070BB C7040100                	mov	word [SI],1
 34288                                  	;or	[SI+5],cx
 34289 000070BF 094C05                  	OR	[SI+SF_ENTRY.sf_flags],CX ; set no inherit bit if necessary
 34290                                  
 34291                                  ; If the open mode is 70, we scan the system for other SFT's with the same
 34292                                  ; contents. If we find one, then we can 'collapse' thissft onto the already
 34293                                  ; opened one. Otherwise we use this new one. We compare uid/pid/mode/mft
 34294                                  ;
 34295                                  ; Since this is only relevant on sharer systems, we stick this code into the
 34296                                  ; sharer.
 34297                                  
 34298 000070C2 36A1[4405]              	MOV	AX,[ss:JFN]				;smr;SS Override
 34299 000070C6 36FF1E[8C00]            	Call	far [ss:JShare+(12*4)]	; 12 = ShCol	;smr;SS Override
 34300                                  
 34301 000070CB 36C706[4205]FFFF        	MOV	word [ss:SFN],-1	; clear out sfn pointer	;smr;SS Override
 34302 000070D2 E928A6                  	jmp	SYS_RET_OK		; bye with no errors
 34303                                  
 34304                                  	; MSDOS 6.0
 34305                                  ;Extended Open hooks check
 34306                                  ;OpenE2:					;AN000;;EO.
 34307                                  ;	CMP	AX,error_invalid_parameter ;AN000;;EO. IFS extended open ?
 34308                                  ;	JNZ	short OpenE		;AN000;;EO. no.
 34309                                  ;	JMP	short OpenCritLeave	;AN000;;EO. keep handle
 34310                                  
 34311                                  ;	Extended Open hooks check
 34312                                  ;
 34313                                  ;	AL has error code.  Stack has argument to dos_open/dos_create.
 34314                                  
 34315                                  OpenClean:
 34316 000070D5 5B                      	pop	bx			; clean off stack
 34317                                  OpenE:
 34318                                  	;MOV	word [SI+SF_ENTRY.sf_ref_count],0 ; release SFT
 34319 000070D6 C7040000                	mov	word [SI],0
 34320 000070DA 36C536[4605]            	LDS	SI,[ss:PJFN]				;smr;SS Override
 34321 000070DF C604FF                  	MOV	BYTE [SI],0FFh		; free the SFN...
 34322 000070E2 EB02                    	JMP	SHORT OpenCritLeave
 34323                                  
 34324                                  OpenFail:
 34325 000070E4 FB                      	STI
 34326 000070E5 59                      	pop	cx			; Clean stack
 34327                                  OpenCritLeave:
 34328 000070E6 36C706[4205]FFFF        	MOV	word [SS:SFN],-1	; remove mark.
 34329                                  
 34330                                  	; MSDOS 6.0
 34331                                  ;; File Tagging DOS 4.00
 34332                                  ;	CMP	[SS:EXTERR],error_Code_Page_Mismatched 
 34333                                  ;				;AN000;;FT. code page mismatch;smr;SS Override
 34334                                  ;	JNZ	short NORERR	  	;AN000;;FT. no
 34335                                  ;	jmp	From_GetSet		;AN000;;FT. yes
 34336                                  ;NORERR: 				;AN000;
 34337                                  ;; File Tagging DOS 4.00
 34338                                  
 34339 000070ED E919A6                  	jmp	SYS_RET_ERR		; no free, return error
 34340                                  
 34341                                  ; MSDOS 2.11
 34342                                  ;BREAK <$CREAT - creat a new file and open him for input>
 34343                                  ;----------------------------------------------------------------------------
 34344                                  ;   Assembler usage:
 34345                                  ;           LDS     DX, name
 34346                                  ;           MOV     AH, Creat
 34347                                  ;           MOV     CX, access
 34348                                  ;           INT     21h
 34349                                  ;       ; AX now has the handle
 34350                                  ;
 34351                                  ;   Error returns:
 34352                                  ;           AX = error_access_denied
 34353                                  ;              = error_path_not_found
 34354                                  ;              = error_too_many_open_files
 34355                                  ;----------------------------------------------------------------------------
 34356                                  
 34357                                  ; MSDOS 6.0
 34358                                  ;	BREAK <$Creat - create a brand-new file>
 34359                                  ;----------------------------------------------------------------------------
 34360                                  ;
 34361                                  ;**	$Creat - Create a File
 34362                                  ;
 34363                                  ;	$Creat creates the directory entry specified in DS:DX and gives it the
 34364                                  ;	initial attributes contained in CX
 34365                                  ;
 34366                                  ;	ENTRY	(DS:DX) = ASCIZ path name
 34367                                  ;		(CX) = initial attributes
 34368                                  ;	EXIT	'C' set if error
 34369                                  ;		  (ax) = error code
 34370                                  ;		'C' clear if OK
 34371                                  ;		  (ax) = file handle
 34372                                  ;	USES	all
 34373                                  ;
 34374                                  ;----------------------------------------------------------------------------
 34375                                  
 34376                                  _$CREAT:
 34377 000070F0 51                      	push	cx			; Save attributes on stack
 34378 000070F1 B9[E836]                	mov	CX,DOS_CREATE		; routine to call
 34379                                  AccessSet:
 34380                                  	;mov	byte [ss:SATTRIB],6
 34381 000070F4 36C606[0805]06          	mov	byte [ss:SATTRIB],attr_hidden+attr_system ;smr;SS Override
 34382                                  	; 10/08/2018
 34383 000070FA E944FF                  	JMP	AccessFile		; use good ol' open
 34384                                  
 34385                                  
 34386                                  ; MSDOS 6.0 (MSDOS 3.3)
 34387                                  ;	BREAK <$CHMOD - change file attributes>
 34388                                  ;----------------------------------------------------------------------------
 34389                                  ;
 34390                                  ;**	$CHMOD - Change File Attributes
 34391                                  ;
 34392                                  ;   Assembler usage:
 34393                                  ;	    LDS     DX, name
 34394                                  ;	    MOV     CX, attributes
 34395                                  ;	    MOV     AL,func (0=get, 1=set)
 34396                                  ;	    INT     21h
 34397                                  ;   Error returns:
 34398                                  ;	    AX = error_path_not_found
 34399                                  ;	    AX = error_access_denied
 34400                                  ;
 34401                                  ;----------------------------------------------------------------------------
 34402                                  
 34403                                  _$CHMOD:
 34404                                  	; 05/08/2018 - Retro DOS v3.0
 34405                                  	;IBMDOS.COM (MSDOS 3.3, 1987) - Offset 6FCCh ,
 34406 000070FD BF[6003]                	MOV	DI,OPENBUF		; appropriate buffer
 34407 00007100 50                      	push	ax
 34408 00007101 51                      	push	cx			; save function and attributes
 34409 00007102 89D6                    	MOV	SI,DX			; get things in appropriate places
 34410 00007104 E849F9                  	call	TransPathSet		; get correct path
 34411 00007107 59                      	pop	cx
 34412 00007108 58                      	pop	ax			; and get function and attrs back
 34413 00007109 7235                    	JC	short ChModErr		; errors get mapped to path not found
 34414 0000710B 16                      	push	ss			; set up for later possible calls
 34415 0000710C 1F                      	pop	ds
 34416 0000710D 803E[1505]FF            	CMP	byte [CMETA],-1
 34417 00007112 752C                    	JNZ	short ChModErr
 34418                                  	;mov	byte [SATTRIB],16h
 34419 00007114 C606[0805]16            	MOV	byte [SATTRIB],attr_hidden+attr_system+attr_directory
 34420 00007119 2C01                    	SUB	AL,1			; fast way to discriminate
 34421 0000711B 720B                    	JB	short ChModGet		; 0 -> go get value
 34422 0000711D 7417                    	JZ	short ChModSet		; 1 -> go set value
 34423                                  	;mov	byte [EXTERR_LOCUS],1
 34424 0000711F C606[D102]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 34425                                  	;mov	al,1
 34426 00007124 B001                    	mov	al,error_invalid_function ; bad value
 34427                                  	;jmp	SYS_RET_ERR
 34428 00007126 EB1A                    	jmp	short ChModE	
 34429                                  ChModGet:
 34430 00007128 E8C4C4                  	call	GET_FILE_INFO		; suck out the ol' info
 34431 0000712B 7215                    	JC	short ChModE		; error codes are already set for ret
 34432 0000712D E8DBA4                  	call	Get_User_Stack		; point to user saved vaiables
 34433                                  	;mov	[SI+4],ax
 34434 00007130 894404                  	MOV	[SI+user_env.user_CX],AX  ; return the attributes
 34435 00007133 E9C7A5                  	jmp	SYS_RET_OK		; say sayonara
 34436                                  ChModSet:
 34437 00007136 89C8                    	MOV	AX,CX			; get attrs in position
 34438 00007138 E815C5                  	call	SET_FILE_ATTRIBUTE	; go set
 34439 0000713B 7205                    	JC	short ChModE		; errors are set
 34440 0000713D E9BDA5                  	jmp	SYS_RET_OK
 34441                                  ChModErr:
 34442                                  	;mov	al, 3
 34443 00007140 B003                    	mov	al,error_path_not_found
 34444                                  ChModE:
 34445 00007142 E9C4A5                  	jmp	SYS_RET_ERR
 34446                                  
 34447                                  ;	BREAK <$UNLINK - delete a file entry>
 34448                                  ;----------------------------------------------------------------------------
 34449                                  ;
 34450                                  ;**	$UNLINK - Delete a File
 34451                                  ;
 34452                                  ;
 34453                                  ;	Assembler usage:
 34454                                  ;	    LDS     DX, name
 34455                                  ;	    IF VIA SERVER DOS CALL
 34456                                  ;	     MOV     CX,SEARCH_ATTRIB
 34457                                  ;	    MOV     AH, Unlink
 34458                                  ;	    INT     21h
 34459                                  ;
 34460                                  ;	ENTRY	(ds:dx) = path name
 34461                                  ;		(cx) = search_attribute, if via server_dos
 34462                                  ;	EXIT	'C' clear if no error
 34463                                  ;		'C' set if error
 34464                                  ;		  (ax) = error code
 34465                                  ;			= error_file_not_found
 34466                                  ;			= error_access_denied
 34467                                  ;
 34468                                  ;----------------------------------------------------------------------------
 34469                                  
 34470                                  _$UNLINK:
 34471 00007145 51                      	push	cx			; Save possible CX input parm
 34472 00007146 89D6                    	MOV	SI,DX			; Point at input string
 34473 00007148 BF[6003]                	MOV	DI,OPENBUF		; temp spot for path
 34474 0000714B E802F9                  	call	TransPathSet		; go get normalized path
 34475 0000714E 59                      	pop	cx
 34476 0000714F 72EF                    	JC	short ChModErr		; badly formed path
 34477 00007151 36803E[1505]FF          	CMP	byte [ss:CMETA],-1	; meta chars?	;smr;SS Override
 34478 00007157 750F                    	JNZ	short NotFound
 34479 00007159 16                      	push	ss
 34480 0000715A 1F                      	pop	ds
 34481                                  	;mov	ch,6
 34482 0000715B B506                    	mov	ch,attr_hidden+attr_system ; unlink appropriate files
 34483 0000715D E82201                  	call	SetAttrib
 34484 00007160 E809C1                  	call	DOS_DELETE		; remove that file
 34485 00007163 7205                    	JC	short UnlinkE 		; error is there
 34486 00007165 E995A5                  	jmp	SYS_RET_OK		; okey doksy
 34487                                  NotFound:
 34488                                  	;mov	al, 3
 34489 00007168 B003                    	MOV	AL,error_path_not_found
 34490                                  UnlinkE:
 34491 0000716A E99CA5                  	jmp	SYS_RET_ERR		; bye
 34492                                  
 34493                                  ;BREAK <$RENAME - move directory entries around>
 34494                                  ;----------------------------------------------------------------------------
 34495                                  ;
 34496                                  ;   Assembler usage:
 34497                                  ;	    LDS     DX, source
 34498                                  ;	    LES     DI, dest
 34499                                  ;	    IF VIA SERVER DOS CALL
 34500                                  ;	     MOV     CX,SEARCH_ATTRIB
 34501                                  ;	    MOV     AH, Rename
 34502                                  ;	    INT     21h
 34503                                  ;
 34504                                  ;   Error returns:
 34505                                  ;	    AX = error_file_not_found
 34506                                  ;	       = error_not_same_device
 34507                                  ;	       = error_access_denied
 34508                                  ;
 34509                                  ;----------------------------------------------------------------------------
 34510                                  
 34511                                  _$RENAME:
 34512                                  	; MSDOS 3.3 (& MSDOS 6.0)
 34513 0000716D 51                      	push	cx
 34514 0000716E 1E                      	push	ds
 34515 0000716F 52                      	push	dx			; save source and possible CX arg
 34516 00007170 06                      	PUSH	ES
 34517 00007171 1F                      	POP	DS			; move dest to source
 34518 00007172 89FE                    	MOV	SI,DI			; save for offsets
 34519 00007174 BF[E003]                	MOV	DI,RENBUF
 34520 00007177 E8D6F8                  	call	TransPathSet		; munge the paths
 34521 0000717A 36FF36[4A05]            	PUSH	word [ss:WFP_START]	; get pointer	;smr;SS Override
 34522 0000717F 368F06[4C05]            	POP	word [ss:REN_WFP]	; stash it	;smr;SS Override
 34523 00007184 5E                      	pop	si
 34524 00007185 1F                      	pop	ds
 34525 00007186 59                      	pop	cx			; get back source and possible CX arg
 34526                                  epjc2:	
 34527 00007187 72B7                    	JC	short ChModErr		; get old error
 34528 00007189 36803E[1505]FF          	CMP	byte [ss:CMETA],-1			;smr;SS Override
 34529 0000718F 75D7                    	JNZ	short NotFound
 34530 00007191 51                      	push	cx			; Save possible CX arg
 34531 00007192 BF[6003]                	MOV	DI,OPENBUF		; appropriate buffer
 34532 00007195 E8B8F8                  	call	TransPathSet		; wham
 34533 00007198 59                      	pop	cx
 34534 00007199 72EC                    	JC	short epjc2
 34535 0000719B 16                      	push	ss
 34536 0000719C 1F                      	pop	ds
 34537 0000719D 803E[1505]FF            	CMP	byte [CMETA],-1
 34538 000071A2 72C4                    	JB	short NotFound
 34539                                  
 34540                                  	; MSDOS 6.0
 34541 000071A4 FF36[3A05]              	PUSH	WORD [THISCDS]		   ;AN000;;MS.save thiscds
 34542 000071A8 FF36[3C05]              	PUSH	WORD [THISCDS+2]	   ;AN000;;MS.
 34543 000071AC BF[6003]                	MOV	DI,OPENBUF		   ;AN000;;MS.
 34544 000071AF 16                      	PUSH	SS			   ;AN000;;MS.
 34545 000071B0 07                      	POP	ES			   ;AN000;;MS.es:di-> source
 34546 000071B1 30C0                    	XOR	AL,AL			   ;AN000;;MS.scan all CDS
 34547                                  rnloop: 				   ;AN000;
 34548 000071B3 E80EF8                  	call	GetCDSFromDrv		   ;AN000;;MS.
 34549 000071B6 7211                    	JC	short dorn		   ;AN000;;MS.	end of CDS
 34550 000071B8 E879AD                  	call	StrCmp			   ;AN000;;MS.	current dir ?
 34551 000071BB 7404                    	JZ	short rnerr		   ;AN000;;MS.	yes
 34552 000071BD FEC0                    	INC	AL			   ;AN000;;MS.	next
 34553 000071BF EBF2                    	JMP	short rnloop		   ;AN000;;MS.
 34554                                  rnerr:					   ;AN000;
 34555 000071C1 83C404                  	ADD	SP,4			   ;AN000;;MS. pop thiscds
 34556                                  	;error	error_current_directory    ;AN000;;MS.
 34557 000071C4 B010                    	mov	al,error_current_directory 
 34558 000071C6 E940A5                  	jmp	SYS_RET_ERR
 34559                                  dorn:					   ;AN000;
 34560 000071C9 368F06[3C05]            	POP	WORD [SS:THISCDS+2]	   ;AN000;;MS.;PBUGBUG;SS REQD??
 34561 000071CE 368F06[3A05]            	POP	WORD [SS:THISCDS]	   ;AN000;;MS.;PBUGBUG;SS REQD??
 34562                                  
 34563 000071D3 16                      	push	ss
 34564 000071D4 1F                      	pop	ds
 34565                                  
 34566                                  	; MSDOS 3.3 (& MSDOS 6.0)
 34567                                  	;mov	ch,16h
 34568 000071D5 B516                    	mov	ch,attr_directory+attr_hidden+attr_system
 34569                                  					; rename appropriate files
 34570 000071D7 E8A800                  	call	SetAttrib
 34571 000071DA E83AC2                  	call	DOS_RENAME		; do the deed
 34572 000071DD 728B                    	JC	short UnlinkE 		; errors
 34573                                  
 34574 000071DF E91BA5                  	jmp	SYS_RET_OK
 34575                                  
 34576                                  
 34577                                  ; 14/07/2018 - Retro DOS v3.0
 34578                                  ; MSDOS 3.3 (& MSDOS 6.0)
 34579                                  
 34580                                  ;Break <$CreateNewFile - Create a new directory entry>
 34581                                  ;----------------------------------------------------------------------------
 34582                                  ;   CreateNew - Create a new directory entry.  Return a file handle if there
 34583                                  ;	was no previous directory entry, and fail if a directory entry with
 34584                                  ;	the same name existed previously.
 34585                                  ;
 34586                                  ;   Inputs:	DS:DX point to an ASCIZ file name
 34587                                  ;		CX contains default file attributes
 34588                                  ;   Outputs:	Carry Clear:
 34589                                  ;		    AX has file handle opened for read/write
 34590                                  ;		Carry Set:
 34591                                  ;		    AX has error code
 34592                                  ;   Registers modified: All
 34593                                  ;----------------------------------------------------------------------------
 34594                                  
 34595                                  _$CreateNewFile:
 34596 000071E2 51                      	push	cx			; Save attributes on stack
 34597 000071E3 B9[7937]                	MOV	CX,DOS_Create_New	; routine to call
 34598 000071E6 E90BFF                  	JMP	AccessSet		; use good ol' open
 34599                                  
 34600                                  ;**	BinToAscii - convert a number to a string.
 34601                                  ;----------------------------------------------------------------------------
 34602                                  ;	BinToAscii converts a 16 bit number into a 4 ascii characters.
 34603                                  ;	This routine is used to generate temp file names so we don't spend
 34604                                  ;	the time and code needed for a true hex number, we just use
 34605                                  ;	A thorugh O.
 34606                                  ;
 34607                                  ;	ENTRY	(ax) = value
 34608                                  ;		(es:di) = destination
 34609                                  ;	EXIT	(es:di) updated by 4
 34610                                  ;	USES	cx, di, flags
 34611                                  ;----------------------------------------------------------------------------
 34612                                  
 34613                                  ; MSDOS 3.3
 34614                                  ;BinToAscii:
 34615                                  ;	mov     cx,4
 34616                                  ;bta5:
 34617                                  ;	push    cx
 34618                                  ;	mov     cl,4
 34619                                  ;	rol     ax,cl
 34620                                  ;	push    ax
 34621                                  ;	and     al,0Fh
 34622                                  ;	add     al,'0'
 34623                                  ;	cmp     al,'9'
 34624                                  ;	jbe     short bta6
 34625                                  ;	add     al,7
 34626                                  ;bta6: 
 34627                                  ;	stosb
 34628                                  ;	pop     ax
 34629                                  ;	pop     cx
 34630                                  ;	loop    bta5
 34631                                  ;	retn
 34632                                  
 34633                                  ; MSDOS 6.0
 34634                                  BinToAscii:
 34635 000071E9 B90404                  	mov	cx,404h			; (ch) = digit counter, (cl) = shift cnt
 34636                                  bta5:	
 34637 000071EC D3C0                    	ROL	AX,CL			; move leftmost nibble into rightmost
 34638 000071EE 50                      	push	ax			; preserve remainder of digits
 34639 000071EF 240F                    	AND	AL,0Fh			; grab low nibble
 34640 000071F1 0441                    	ADD	AL,'A'			; turn into ascii
 34641 000071F3 AA                      	STOSB				; drop in the character
 34642 000071F4 58                      	pop	ax			; (ax) = shifted number
 34643 000071F5 FECD                    	dec	ch
 34644 000071F7 75F3                    	jnz	short bta5		; process 4 digits
 34645 000071F9 C3                      	retn
 34646                                  
 34647                                  ;Break	<$CreateTempFile - create a unique name>
 34648                                  ;----------------------------------------------------------------------------
 34649                                  ;   $CreateTemp - given a directory, create a unique name in that directory.
 34650                                  ;	Method used is to get the current time, convert to a name and attempt
 34651                                  ;	a create new.  Repeat until create new succeeds.
 34652                                  ;
 34653                                  ;   Inputs:	DS:DX point to a null terminated directory name.
 34654                                  ;		CX  contains default attributes
 34655                                  ;   Outputs:	Unique name is appended to DS:DX directory.
 34656                                  ;		AX has handle
 34657                                  ;   Registers modified: all
 34658                                  ;----------------------------------------------------------------------------
 34659                                  
 34660                                  _$CreateTempFile:
 34661                                  	;Enter
 34662 000071FA 55                      	push	bp
 34663 000071FB 89E5                    	mov	bp,sp
 34664                                  
 34665                                  	;LocalVar    EndPtr,DWORD
 34666                                  	;LocalVar    FilPtr,DWORD
 34667                                  	;LocalVar    Attr,WORD
 34668                                  
 34669 000071FD 83EC0A                  	sub	sp,10
 34670                                  
 34671                                  	;test	cx,0FFD8h
 34672 00007200 F7C1D8FF                	test	CX,~attr_changeable
 34673 00007204 7405                    	JZ	short OKatts		; Ok if no non-changeable bits set
 34674                                  ;
 34675                                  ; We need this "hook" here to detect these cases (like user sets one both of
 34676                                  ; vol_id and dir bits) because of the structure of the or $CreateNewFile loop
 34677                                  ; below.  The code loops on error_access_denied, but if one of the non
 34678                                  ; changeable attributes is specified, the loop COULD be infinite or WILL be
 34679                                  ; infinite because CreateNewFile will fail with access_denied always.  Thus we
 34680                                  ; need to detect these cases before getting to the loop.
 34681                                  ;
 34682                                  	;mov	ax, 5
 34683 00007206 B80500                  	MOV	AX,error_access_denied
 34684 00007209 EB6B                    	JMP	SHORT SETTMPERR
 34685                                  
 34686                                  OKatts:
 34687                                  	;MOV	attr,CX 		; save attribute
 34688 0000720B 894EF6                  	mov     [bp-10],cx
 34689                                  	;MOV	FilPtrL,DX		; pointer to file
 34690 0000720E 8956F8                  	mov	[bp-8],dx
 34691                                  	;MOV	FilPtrH,DS
 34692 00007211 8C5EFA                  	mov	[bp-6],ds
 34693                                  	;MOV	EndPtrH,DS		; seg pointer to end of dir
 34694 00007214 8C5EFE                  	mov	[bp-2],ds
 34695 00007217 1E                      	PUSH	DS
 34696 00007218 07                      	POP	ES			; destination for nul search
 34697 00007219 89D7                    	MOV	DI,DX
 34698 0000721B 89F9                    	MOV	CX,DI
 34699 0000721D F7D9                    	NEG	CX			; number of bytes remaining in segment
 34700                                  	; MSDOS 6.0
 34701 0000721F 09C9                    	OR	CX,CX			;AN000;MS. cx=0 ? ds:dx on segment boundary
 34702 00007221 7501                    	JNZ	short okok		;AN000;MS. no
 34703                                  	;MOV	CX,-1			;AN000;MS.
 34704 00007223 49                      	dec	cx  ; mov cx,-1
 34705                                  	;
 34706                                  okok:					;AN000;
 34707 00007224 31C0                    	XOR	AX,AX			;AN000;
 34708 00007226 F2AE                    	REPNZ	SCASB			;AN000;
 34709                                  					;AN000;
 34710 00007228 4F                      	DEC	DI			; point back to the null
 34711 00007229 268A45FF                	MOV	AL,[ES:DI-1]		; Get char before the NUL
 34712 0000722D E818E4                  	call	PATHCHRCMP		; Is it a path separator?
 34713 00007230 7403                    	JZ	short SETENDPTR		; Yes
 34714                                  STOREPTH:
 34715 00007232 B05C                    	MOV	AL,'\'
 34716 00007234 AA                      	STOSB				; Add a path separator (and INC DI)
 34717                                  SETENDPTR:
 34718                                  	;MOV	EndPtrL,DI		; pointer to the tail
 34719 00007235 8856FC                  	mov	[bp-4],dl
 34720                                  CreateLoop:
 34721 00007238 16                      	push	ss			; let ReadTime see variables
 34722 00007239 1F                      	pop	ds
 34723 0000723A 55                      	push	bp
 34724 0000723B E8A2A6                  	call	READTIME		; go get time
 34725 0000723E 5D                      	pop	bp
 34726                                  ;
 34727                                  ; Time is in CX:DX.  Go drop it into the string.
 34728                                  ;
 34729                                  	;les	di,EndPtr		; point to the string
 34730 0000723F C47EFC                  	les	di,[BP-4]
 34731 00007242 89C8                    	mov	ax,cx
 34732 00007244 E8A2FF                  	call	BinToAscii		; store upper word
 34733 00007247 89D0                    	mov	ax,dx
 34734 00007249 E89DFF                  	call	BinToAscii		; store lower word
 34735 0000724C 30C0                    	xor	al,al
 34736 0000724E AA                      	STOSB				; nul terminate
 34737                                  	;LDS	DX,FilPtr		; get name
 34738 0000724F C556F8                  	lds	dx,[bp-8]
 34739                                  	;MOV	CX,Attr 		; get attr
 34740 00007252 8B4EF6                  	mov	cx,[bp-10]
 34741 00007255 55                      	push	bp
 34742 00007256 E889FF                  	CALL	_$CreateNewFile		; try to create a new file
 34743 00007259 5D                      	pop	bp
 34744 0000725A 731B                    	JNC	short CreateDone	; failed, go try again
 34745                                  ;
 34746                                  ; The operation failed and the error has been mapped in AX.  Grab the extended
 34747                                  ; error and figure out what to do.
 34748                                  ;
 34749                                  	;; MSDOS 3.3			; M049 - start
 34750                                  ;;	mov	ax,[ss:EXTERR]				;smr;SS Override
 34751                                  ;;	cmp	al,error_file_exists
 34752                                  ;;	jz	short CreateLoop	; file existed => try with new name
 34753                                  ;;	cmp	al,error_access_denied
 34754                                  ;;	jz	short CreateLoop	; access denied (attr mismatch)
 34755                                  
 34756                                  	; MSDOS 6.0
 34757                                  	;cmp	al,50h
 34758 0000725C 3C50                    	CMP	AL,error_file_exists	; Q: did file already exist
 34759 0000725E 74D8                    	JZ	short CreateLoop	; Y: try again
 34760                                  	;cmp	al,5
 34761 00007260 3C05                    	CMP	AL,error_access_denied	; Q: was it access denied
 34762 00007262 7512                    	JNZ	short SETTMPERR		; N: Error out
 34763                                  					; Y: Check to see if we got this due
 34764                                  					;    to the network drive. Note that
 34765                                  					;    the redir will set the exterr
 34766                                  					;    to error_cannot_make if this is 
 34767                                  					;    so. 
 34768 00007264 36803E[D202]41          	CMP	byte [SS:EXTERR],error_net_access_denied ; M069
 34769                                  					; See if it's REALLY an att mismatch
 34770 0000726A 740A                    	je	short SETTMPERR		; no, network error, stop
 34771                                  ;M070
 34772                                  ; If the user failed on an I24, we do not want to try again
 34773                                  ;
 34774 0000726C 36803E[D202]53          	cmp	byte [SS:EXTERR],error_FAIL_I24 ;User failed on I24? ;M070
 34775 00007272 7402                    	je	short SETTMPERR		;yes, do not try again ;M070
 34776                                  
 34777 00007274 EBC2                    	jmp	short CreateLoop	;attr mismatch, try again ;M070
 34778                                  
 34779                                  ;;	MOV	AL,error_access_denied	; Return this "extended" error
 34780                                  					; M049 - end
 34781                                  SETTMPERR:
 34782 00007276 F9                      	STC
 34783                                  CreateDone:
 34784                                  	;Leave
 34785 00007277 89EC                    	mov	sp,bp
 34786 00007279 5D                      	pop	bp
 34787 0000727A 7203                    	JC	short CreateFail
 34788 0000727C E97EA4                  	jmp	SYS_RET_OK		; success!
 34789                                  CreateFail:
 34790 0000727F E987A4                  	jmp	SYS_RET_ERR
 34791                                  
 34792                                  ;
 34793                                  ;   SetAttrib will set the search attribute (SAttrib) either to the normal
 34794                                  ;   (CH) or to the value in CL if the current system call is through
 34795                                  ;   serverdoscall.
 34796                                  ;
 34797                                  ;   Inputs:	fSharing == FALSE => set sattrib to CH
 34798                                  ;		fSharing == TRUE => set sattrib to CL
 34799                                  ;   Outputs:	none
 34800                                  ;   Registers changed:	CX
 34801                                  
 34802                                  SetAttrib:
 34803 00007282 36F606[0D05]FF          	test	byte [SS:FSHARING],-1		;smr;SS Override
 34804 00007288 7502                    	jnz	short Set
 34805 0000728A 88E9                    	mov	cl,ch
 34806                                  Set:
 34807 0000728C 36880E[0805]            	mov	byte [ss:SATTRIB],cl		;smr;SS Override
 34808 00007291 C3                      	retn
 34809                                  
 34810                                  ; 14/07/2018 - Retro DOS v3.0
 34811                                  ; MSDOS 6.0
 34812                                  
 34813                                  ;Break	<Extended_Open- Extended open the file>
 34814                                  ;----------------------------------------------------------------------------
 34815                                  ; Input: AL= 0 reserved  AH=6CH
 34816                                  ;	 BX= mode
 34817                                  ;	 CL= create attribute  CH=search attribute (from server)
 34818                                  ;	 DX= flag
 34819                                  ;	 DS:SI = file name
 34820                                  ;	 ES:DI = parm list
 34821                                  ;			   DD  SET EA list (-1) null
 34822                                  ;			   DW  n  parameters
 34823                                  ;			   DB  type (TTTTTTLL)
 34824                                  ;			   DW  IOMODE
 34825                                  ; Function: Extended Open
 34826                                  ; Output: carry clear
 34827                                  ;		     AX= handle
 34828                                  ;		     CX=1 file opened
 34829                                  ;			2 file created/opened
 34830                                  ;			3 file replaced/opened
 34831                                  ;	  carry set: AX has error code
 34832                                  ;----------------------------------------------------------------------------
 34833                                  
 34834                                  ;_$Extended_Open:			  ;AN000;
 34835                                  ;	;ASSUME	CS:DOSCODE,SS:DOSDATA	  ;AN000;
 34836                                  ;	MOV	[SS:EXTOPEN_FLAG],DX	  ;AN000;EO. save ext. open flag;smr;SS Override
 34837                                  ;	MOV	word [SS:EXTOPEN_IO_MODE],0 ;AN000;EO. initialize IO mode;smr;SS Override
 34838                                  ;	TEST	DX,reserved_bits_mask	  ;AN000;EO. reserved bits 0  ?
 34839                                  ;	JNZ	short ext_inval2	  ;AN000;EO. no
 34840                                  ;	MOV	AH,DL			  ;AN000;EO. make sure flag is right
 34841                                  ;	CMP	DL,0			  ;AN000;EO. all fail ?
 34842                                  ;	JZ	short ext_inval2	  ;AN000;EO. yes, error
 34843                                  ;	AND	DL,exists_mask		  ;AN000;EO. get exists action byte
 34844                                  ;	CMP	DL,2			  ;AN000;EO, > 02
 34845                                  ;	JA	short ext_inval2	  ;AN000;EO. yes ,error
 34846                                  ;	AND	AH,not_exists_mask	  ;AN000;EO. get no exists action byte
 34847                                  ;	CMP	AH,10H			  ;AN000;EO. > 10
 34848                                  ;	JA	short ext_inval2	  ;AN000;EO. yes error
 34849                                  ;
 34850                                  ;	MOV	[SS:SAVE_ES],ES		  ;AN000;EO. save API parms;smr;SS Override
 34851                                  ;	MOV	[SS:SAVE_DI],DI		  ;AN000;EO.;smr;SS Override
 34852                                  ;	PUSH	word [SS:EXTOPEN_FLAG]	  ;AN000;EO.;smr;SS Override
 34853                                  ;	POP	word [SS:SAVE_DX]	  ;AN000;EO.;smr;SS Override
 34854                                  ;	MOV	[SS:SAVE_CX],CX		  ;AN000;EO.;smr;SS Override
 34855                                  ;	MOV	[SS:SAVE_BX],BX		  ;AN000;EO.;smr;SS Override
 34856                                  ;	MOV	[SS:SAVE_DS],DS		  ;AN000;EO.;smr;SS Override
 34857                                  ;	MOV	[SS:SAVE_SI],SI		  ;AN000;EO.;smr;SS Override
 34858                                  ;	MOV	DX,SI			  ;AN000;EO. ds:dx points to file name
 34859                                  ;	MOV	AX,BX			  ;AN000;EO. ax= mode
 34860                                  ;	JMP	SHORT goopen2		  ;AN000;;EO. do normal
 34861                                  ;ext_inval2:				  ;AN000;;EO.
 34862                                  ;	mov	al,error_invalid_function ;AN000;EO.. invalid function
 34863                                  ;	jmp	SYS_RET_ERR
 34864                                  ;error_return:				  ;AN000;EO.
 34865                                  ;	retn				  ;AN000;EO.. return with error
 34866                                  ;goopen2:				  ;AN000;
 34867                                  ;	TEST	BX,int_24_error 	  ;AN000;EO.. disable INT 24 error ?
 34868                                  ;	JZ	short goopen		  ;AN000;EO.. no
 34869                                  ;	OR	byte [SS:EXTOPEN_ON],EXT_OPEN_I24_OFF ;AN000;EO.. set bit to disable;smr;SS Override
 34870                                  ;goopen:					  ;AN000;
 34871                                  ;	OR	byte [SS:EXTOPEN_ON],EXT_OPEN_ON  ;AN000;EO.. set Extended Open active;smr;SS Override
 34872                                  ;	AND	word [SS:EXTOPEN_FLAG],0FFH  ;AN000;EO.create new ?;smr;SS Override
 34873                                  ;	CMP	word [SS:EXTOPEN_FLAG],ext_exists_fail + ext_nexists_create ;AN000;FT.;smr;SS Override
 34874                                  ;	JNZ	short chknext 		  ;AN000;;EO. no
 34875                                  ;	call	_$CreateNewFile		  ;AN000;;EO. yes
 34876                                  ;	JC	short error_return	  ;AN000;;EO. error
 34877                                  ;	CMP	byte [SS:EXTOPEN_ON],0	  ;AN000;;EO. IFS does it;smr;SS Override
 34878                                  ;	JZ	short ok_return2	  ;AN000;;EO. yes
 34879                                  ;	MOV	word [SS:EXTOPEN_FLAG],action_created_opened ;AN000;EO. creted/opened;smr;SS Override
 34880                                  ;	JMP	short setXAttr		  ;AN000;;EO. set XAs
 34881                                  ;ok_return2:
 34882                                  ;	jmp	SYS_RET_OK		  ;AN000;;EO.
 34883                                  ;chknext:
 34884                                  ;	TEST	word [SS:EXTOPEN_FLAG],ext_exists_open ;AN000;;EO. exists open;smr;SS Override
 34885                                  ;	JNZ	short exist_open	  ;AN000;;EO. yes
 34886                                  ;	call	_$CREAT			  ;AN000;;EO. must be replace open
 34887                                  ;	JC	short error_return	  ;AN000;;EO. return with error
 34888                                  ;	CMP	byte [SS:EXTOPEN_ON],0	  ;AN000;;EO. IFS does it;smr;SS Override
 34889                                  ;	JZ	short ok_return2	  ;AN000;;EO. yes
 34890                                  ;	MOV	word [SS:EXTOPEN_FLAG],action_created_opened ;AN000;EO. prsume create/open;smr;SS Override
 34891                                  ;	TEST	byte [SS:EXTOPEN_ON],ext_file_not_exists ;AN000;;EO. file not exists ?;smr;SS Override
 34892                                  ;	JNZ	short setXAttr		  ;AN000;;EO. no
 34893                                  ;	MOV	word [SS:EXTOPEN_FLAG],action_replaced_opened ;AN000;;EO. replaced/opened;smr;SS Override
 34894                                  ;	JMP	SHORT setXAttr		  ;AN000;;EO. set XAs
 34895                                  ;error_return2:
 34896                                  ;	STC 				  ; Set Carry again to flag error ;AN001;
 34897                                  ;	retn				  ;AN000;;EO. return with error
 34898                                  ;					  ;AN000;
 34899                                  ;exist_open:				  ;AN000;
 34900                                  ;	test	byte [SS:FSHARING],-1	  ;AN000;;EO. server doscall?;smr;SS Override
 34901                                  ;	jz	short noserver		  ;AN000;;EO. no
 34902                                  ;	MOV	CL,CH			  ;AN000;;EO. cl=search attribute
 34903                                  ;noserver:
 34904                                  ;	call	_$Open2			  ;AN000;;EO. do open
 34905                                  ;	JNC	short ext_ok		  ;AN000;;EO.
 34906                                  ;	CMP	byte [SS:EXTOPEN_ON],0	  ;AN000;;EO. error and IFS call;smr;SS Override
 34907                                  ;	JZ	short error_return2	  ;AN000;;EO. return with error
 34908                                  ;local_extopen:
 34909                                  ;	CMP	AX,error_file_not_found   ;AN000;;EO. file not found error
 34910                                  ;	JNZ	short error_return2	  ;AN000;;EO. no,
 34911                                  ;	TEST	word [SS:EXTOPEN_FLAG],ext_nexists_create;AN000;;EO. want to fail;smr;SS Override
 34912                                  ;	JNZ	short do_creat		  ;AN000;;EO. yes
 34913                                  ;	JMP	short extexit 		  ;AN000;;EO. yes
 34914                                  ;do_creat:
 34915                                  ;	MOV	CX,[SS:SAVE_CX]		  ;AN000;;EO. get ds:dx for file name;smr;SS Override
 34916                                  ;	LDS	SI,[SS:SAVE_SI]		  ;AN000;;EO. cx = attribute;smr;SS Override
 34917                                  ;	MOV	DX,SI			  ;AN000;;EO.
 34918                                  ;	call	_$CREAT			  ;AN000;;EO. do create
 34919                                  ;	JC	short extexit 		  ;AN000;;EO. error
 34920                                  ;	MOV	word [SS:EXTOPEN_FLAG],action_created_opened 
 34921                                  ;					  ;AN000;;EO. is created/opened;smr;SS Override
 34922                                  ;	JMP	SHORT setXAttr		  ;AN000;;EO. set XAs
 34923                                  ;
 34924                                  ;ext_ok:
 34925                                  ;	CMP	byte [SS:EXTOPEN_ON],0	  ;AN000;;EO. IFS call ?;smr;SS Override
 34926                                  ;	JZ	short ok_return		  ;AN000;;EO. yes
 34927                                  ;	MOV	[SS:EXTOPEN_FLAG],action_opened ;AN000;;EO.  opened;smr;SS Override
 34928                                  ;setXAttr:
 34929                                  ;	call	Get_User_Stack		  ;AN000;;EO.
 34930                                  ;	MOV	AX,[SS:EXTOPEN_FLAG]	  ;AN000;;EO.;smr;SS Override
 34931                                  ;	MOV	[SI+user_env.user_CX],AX  ;AN000;;EO. set action code for cx
 34932                                  ;	POP	AX			  ;AN000;;EO.
 34933                                  ;	MOV	[SI+user_env.user_AX],AX  ;AN000;;EO. set handle for ax
 34934                                  ;
 34935                                  ;ok_return:				  ;AN000;
 34936                                  ;	jmp	SYS_RET_OK		  ;AN000;;EO.
 34937                                  ;
 34938                                  ;extexit2:				  ;AN000; ERROR RECOVERY
 34939                                  ;	POP	BX			  ;AN000;EO. close the handle
 34940                                  ;	PUSH	AX			  ;AN000;EO. save error code from set XA
 34941                                  ;	CMP	word [SS:EXTOPEN_FLAG],action_created_opened 
 34942                                  ;					  ;AN000;EO. from create;smr;SS Override
 34943                                  ;	JNZ	short justopen		  ;AN000;EO.
 34944                                  ;	LDS	SI,[SS:SAVE_SI]		  ;AN000;EO. cx = attribute;smr;SS Override
 34945                                  ;	LDS	DX,[SI]			  ;AN000;EO.
 34946                                  ;	call	_$UNLINK 		  ;AN000;EO. delete the file
 34947                                  ;	JMP	SHORT reserror		  ;AN000;EO.
 34948                                  ;
 34949                                  ;justopen:				  ;AN000;
 34950                                  ;	call	$CLOSE			  ;AN000;EO. pretend never happend
 34951                                  ;reserror:				  ;AN000;
 34952                                  ;	POP	AX			  ;AN000;EO. restore error code from set XA
 34953                                  ;	JMP	SHORT extexit		  ;AN000;EO.
 34954                                  ;
 34955                                  ;ext_file_unfound:			  ;AN000;
 34956                                  ;	MOV	AX,error_file_not_found   ;AN000;EO.
 34957                                  ;	JMP	SHORT extexit		  ;AN000;EO.
 34958                                  ;ext_inval:				  ;AN000;
 34959                                  ;	MOV	AX,error_invalid_function ;AN000;EO.
 34960                                  ;extexit:
 34961                                  ;	jmp	SYS_RET_ERR		  ;AN000;EO.
 34962                                  
 34963                                  ;============================================================================
 34964                                  ; LOCK.ASM, MSDOS 6.0, 1991
 34965                                  ;============================================================================
 34966                                  ; 14/07/2018 - Retro DOS v3.0
 34967                                  
 34968                                  ;BREAK <$LockOper - Lock Calls>
 34969                                  
 34970                                  ;
 34971                                  ;   Assembler usage:
 34972                                  ;	    MOV     BX, Handle	       (DOS 3.3)
 34973                                  ;	    MOV     CX, OffsetHigh
 34974                                  ;	    MOV     DX, OffsetLow
 34975                                  ;	    MOV     SI, LengthHigh
 34976                                  ;	    MOV     DI, LengthLow
 34977                                  ;	    MOV     AH, LockOper
 34978                                  ;	    MOV     AL, Request
 34979                                  ;	    INT     21h
 34980                                  ;
 34981                                  ;   Error returns:
 34982                                  ;	    AX = error_invalid_handle
 34983                                  ;	       = error_invalid_function
 34984                                  ;	       = error_lock_violation
 34985                                  ;
 34986                                  ;   Assembler usage:
 34987                                  ;	    MOV     AX, 5C??	       (DOS 4.00)
 34988                                  ;
 34989                                  ;				    0? lock all
 34990                                  ;				    8? lock write
 34991                                  ;				    ?2 lock multiple
 34992                                  ;				    ?3 unlock multiple
 34993                                  ;				    ?4 lock/read
 34994                                  ;				    ?5 write/unlock
 34995                                  ;				    ?6 add (lseek EOF/lock/write/unlock)
 34996                                  ;	    MOV     BX, Handle
 34997                                  ;	    MOV     CX, count or size
 34998                                  ;	    LDS     DX, buffer
 34999                                  ;	    INT     21h
 35000                                  ;
 35001                                  ;   Error returns:
 35002                                  ;	    AX = error_invalid_handle
 35003                                  ;	       = error_invalid_function
 35004                                  ;	       = error_lock_violation
 35005                                  
 35006                                  _$LockOper:
 35007 00007292 3C01                    	CMP	AL,1
 35008 00007294 770C                    	JA	short lock_bad_func
 35009                                  
 35010 00007296 57                      	PUSH	DI			       ; Save LengthLow
 35011 00007297 E862F5                  	call	SFFromHandle		       ; ES:DI -> SFT
 35012 0000729A 7311                    	JNC	short lock_do 		       ; have valid handle
 35013 0000729C 5F                      	POP	DI			       ; Clean stack
 35014                                  	;mov	al,6
 35015 0000729D B006                    	mov	al,error_invalid_handle
 35016 0000729F E967A4                  	jmp	SYS_RET_ERR
 35017                                  
 35018                                  lock_bad_func:
 35019                                  	;mov	byte [ss:EXTERR_LOCUS],1
 35020 000072A2 36C606[D102]01          	MOV	byte [SS:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus;smr;SS Override
 35021                                  	;mov	al,1
 35022 000072A8 B001                    	mov	al,error_invalid_function
 35023 000072AA E95CA4                  	jmp	SYS_RET_ERR
 35024                                  
 35025                                  	; MSDOS 6.0 
 35026                                  ; Align_buffer call has been deleted, since it corrupts the DTA (6/5/88) P5013
 35027                                  ; Dead code deleted, MD, 23 Mar 90
 35028                                  
 35029                                  lock_do:
 35030                                  	; MSDOS 3.3
 35031 000072AD 08C0                    	or	al,al
 35032 000072AF 58                      	pop	ax
 35033 000072B0 741E                    	jz	short DOS_Lock
 35034                                  DOS_Unlock:
 35035                                   	;test	word [es:di+5],8000h
 35036 000072B2 26F745050080            	test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 35037 000072B8 7409                    	JZ	short LOCAL_UNLOCK
 35038 000072BA 50                      	push    ax
 35039 000072BB B80B11                  	mov     ax,110Bh
 35040 000072BE CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - UNLOCK REGION OF FILE
 35041                                  			; BX = file handle, CX:DX = starting offset, SI = high word of size
 35042                                  			; STACK: WORD low word of size, ES:DI -> SFT for file
 35043                                  			; SFT DPB field -> DPB of drive containing file
 35044                                  			; Return: CF set error
 35045 000072C0 5B                      	pop     bx
 35046 000072C1 EB05                    	jmp     short ValChk
 35047                                  
 35048                                  LOCAL_UNLOCK:
 35049 000072C3 36FF1E[7800]            	Call	far [ss:JShare+(7*4)]	; 7 = clr_block ;smr;SS Override
 35050                                  ValChk:
 35051 000072C8 7303                    	JNC	short Lock_OK
 35052                                  lockerror:
 35053 000072CA E93CA4                  	jmp	SYS_RET_ERR
 35054                                  Lock_OK:
 35055                                  	;MOV	AX,[SS:Temp_VAR] ;AN000;;MS. AX= number of bytes ;smr;SS Override
 35056 000072CD E92DA4                  	jmp	SYS_RET_OK
 35057                                  DOS_Lock:
 35058                                  	;test	word [es:di+5],8000h
 35059 000072D0 26F745050080            	test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 35060 000072D6 7407                    	JZ	short LOCAL_LOCK
 35061                                  	;CallInstall NET_XLock,MultNET,10
 35062 000072D8 B80A11                  	mov     ax, 110Ah
 35063 000072DB CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - LOCK REGION OF FILE
 35064                                  			; BX = file handle, CX:DX = starting offset, SI = high word of size
 35065                                  			; STACK: WORD low word of size, ES:DI -> SFT
 35066                                  			; SFT DPB field -> DPB of drive containing file, SS = DOS CS
 35067                                  			; Return: CF set error
 35068 000072DD EBE9                    	JMP	short ValChk
 35069                                  
 35070                                  LOCAL_LOCK:
 35071 000072DF 36FF1E[7400]            	Call	far [ss:JShare+(6*4)]	; 6 = Set_Block ;smr;SS Override
 35072 000072E4 EBE2                    	JMP	short ValChk
 35073                                  
 35074                                  ;lock_do:
 35075                                  ;	; MSDOS 6.0
 35076                                  ;	MOV	BX,AX				; save AX
 35077                                  ;	MOV	BP,Lock_Buffer			; get DOS LOCK buffer
 35078                                  ;	MOV	[BP+LockBuf.Lock_position],DX	; set low offset
 35079                                  ;	MOV	[BP+LockBuf.Lock_position+2],CX; set high offset
 35080                                  ;	POP	CX				; get low length
 35081                                  ;	MOV	[BP+LockBuf.Lock_length],CX	; set low length
 35082                                  ;	MOV	[BP+LockBuf.Lock_length+2],SI	; set high length
 35083                                  ;	MOV	CX,1				; one range
 35084                                  ;
 35085                                  ;;	PUSH	CS				;
 35086                                  ;;	POP	DS				; DS:DX points to
 35087                                  ;
 35088                                  ;	push	ss
 35089                                  ;	pop	ds
 35090                                  ;
 35091                                  ;	MOV	DX,BP				;   Lock_Buffer
 35092                                  ;	TEST	AL,Unlock_all			; function 1
 35093                                  ;	JNZ	short DOS_Unlock		; yes
 35094                                  ;	JMP	short DOS_Lock			; function 0
 35095                                  ;
 35096                                  ;DOS_Unlock:
 35097                                  ;	;test	word [es:di+5],8000h
 35098                                  ;	test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 35099                                  ;	JZ	short LOCAL_UNLOCK
 35100                                  ;	;CallInstall Net_Xlock,MultNET,10
 35101                                  ;	mov     ax, 110Bh
 35102                                  ;	int     2Fh	; Multiplex - NETWORK REDIRECTOR - UNLOCK REGION OF FILE
 35103                                  ;			; BX = file handle, CX:DX = starting offset, SI = high word of size
 35104                                  ;			; STACK: WORD low word of size, ES:DI -> SFT for file
 35105                                  ;			; SFT DPB field -> DPB of drive containing file
 35106                                  ;			; Return: CF set error
 35107                                  ;
 35108                                  ;	JMP	SHORT ValChk
 35109                                  ;LOCAL_UNLOCK:
 35110                                  ;	Call	far [ss:JShare+(7*4)]	; 7 = clr_block ;smr;SS Override
 35111                                  ;ValChk:
 35112                                  ;	JNC	short Lock_OK
 35113                                  ;lockerror:
 35114                                  ;	jmp	SYS_RET_ERR
 35115                                  ;Lock_OK:
 35116                                  ;	MOV	AX,[SS:Temp_VAR] ;AN000;;MS. AX= number of bytes ;smr;SS Override
 35117                                  ;	jmp	SYS_RET_OK
 35118                                  ;DOS_Lock:
 35119                                  ;	;test	word [es:di+5],8000h
 35120                                  ;	test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 35121                                  ;	JZ	short LOCAL_LOCK
 35122                                  ;	;CallInstall NET_XLock,MultNET,10
 35123                                  ;	mov     ax,110Ah
 35124                                  ;	int     2Fh	; Multiplex - NETWORK REDIRECTOR - LOCK REGION OF FILE
 35125                                  ;			; BX = file handle, CX:DX = starting offset, SI = high word of size
 35126                                  ;			; STACK: WORD low word of size, ES:DI -> SFT
 35127                                  ;			; SFT DPB field -> DPB of drive containing file, SS = DOS CS
 35128                                  ;			; Return: CF set error
 35129                                  ;	JMP	short ValChk
 35130                                  ;
 35131                                  ;LOCAL_LOCK:
 35132                                  ;	Call	far [ss:JShare+(6*4)]	; 6 = Set_Block ;smr;SS Override
 35133                                  ;	JMP	short ValChk
 35134                                  
 35135                                  ; 14/07/2018 - Retro DOS v3.0
 35136                                  ; LOC_CHECK
 35137                                  ;MSDOS6.0 (& MSDOS3.3)
 35138                                  
 35139                                  ; Inputs:
 35140                                  ;	Outputs of SETUP
 35141                                  ;	[USER_ID] Set
 35142                                  ;	[PROC_ID] Set
 35143                                  ; Function:
 35144                                  ;	Check for lock violations on local I/O
 35145                                  ;	Retries are attempted with sleeps in between
 35146                                  ; Outputs:
 35147                                  ;    Carry clear
 35148                                  ;	Operation is OK
 35149                                  ;    Carry set
 35150                                  ;	A lock violation detected
 35151                                  ; Outputs of SETUP preserved
 35152                                  
 35153                                  LOCK_CHECK:
 35154 000072E6 8B1E[1A00]              	MOV	BX,[RetryCount]	; Number retries
 35155                                  LockRetry:
 35156 000072EA 53                      	push	bx		; save regs
 35157                                  	;push	ax ; MSDOS 6.0
 35158                                  	;;MSDOS 3.3
 35159                                  	;;Call	far [JShare+(8*4)]
 35160 000072EB 36FF1E[7C00]            	Call	far [ss:JShare+(8*4)]	; 8 = chk_block
 35161                                  	;pop	ax ; MSDOS 6.0
 35162 000072F0 5B                      	pop	bx		; restrore regs
 35163 000072F1 7307                    	jnc	short lc_ret_label ; There are no locks (retnc)
 35164                                  LockN:
 35165 000072F3 E893AC                  	call	Idle		; wait a while
 35166 000072F6 4B                      	DEC	BX		; remember a retry
 35167 000072F7 75F1                    	JNZ	short LockRetry	; more retries left...
 35168 000072F9 F9                      	STC
 35169                                  lc_ret_label:
 35170 000072FA C3                      	retn
 35171                                  
 35172                                  ; 14/07/2018 - Retro DOS v3.0
 35173                                  ; LOCK_VIOLATION
 35174                                  ;MSDOS6.0 (& MSDOS3.3)
 35175                                  
 35176                                  ; Inputs:
 35177                                  ;	[THISDPB] set
 35178                                  ;	[READOP] indicates whether error on read or write
 35179                                  ; Function:
 35180                                  ;	Handle Lock violation on compatibility (FCB) mode SFTs
 35181                                  ; Outputs:
 35182                                  ;	Carry set if user says FAIL, causes error_lock_violation
 35183                                  ;	Carry clear if user wants a retry
 35184                                  ;
 35185                                  ; DS, ES, DI, CX preserved, others destroyed
 35186                                  
 35187                                  LOCK_VIOLATION:
 35188 000072FB 1E                      	PUSH	DS
 35189 000072FC 06                      	PUSH	ES
 35190 000072FD 57                      	PUSH	DI
 35191 000072FE 51                      	PUSH	CX
 35192                                  	;mov	ax,21h
 35193 000072FF B82100                  	MOV	AX,error_lock_violation
 35194                                  	;mov	byte [ALLOWED],18h
 35195 00007302 C606[F702]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 35196 00007307 C42E[2405]              	LES	BP,[THISDPB]
 35197 0000730B BF0100                  	MOV	DI,1		; Fake some registers
 35198 0000730E 89F9                    	MOV	CX,DI
 35199                                  	;mov	dx,[es:bp+11]
 35200 00007310 268B560B                	MOV	DX,[ES:BP+DPB.FIRST_SECTOR]
 35201 00007314 E831E5                  	call	HARDERR
 35202 00007317 59                      	POP	CX
 35203 00007318 5F                      	POP	DI
 35204 00007319 07                      	POP	ES
 35205 0000731A 1F                      	POP	DS
 35206 0000731B 3C01                    	CMP	AL,1
 35207 0000731D 74DB                    	jz	short lc_ret_label ; 1 = retry, carry clear
 35208 0000731F F9                      	STC
 35209 00007320 C3                      	retn
 35210                                  
 35211                                  ; 14/07/2018 - Retro DOS v3.0
 35212                                  
 35213                                  ;	do a retz to return error
 35214                                  
 35215                                  CheckShare:
 35216                                  	; MSDOS 6.0
 35217                                  	;push	ds			;smr;
 35218                                  	;;getdseg <ds>			; ds -> dosdata
 35219                                  	;push	cs
 35220                                  	;pop	ds
 35221                                  	;CMP	byte [fShare],0
 35222                                  	;pop	ds			;smr;
 35223                                  	;retn
 35224                                  	
 35225                                  	; MSDOS 3.3
 35226 00007321 2E803E[B102]00          	cmp	byte [cs:fShare],0
 35227 00007327 C3                      	retn
 35228                                  
 35229                                  ;============================================================================
 35230                                  ; SHARE.ASM, MSDOS 6.0, 1991
 35231                                  ;============================================================================
 35232                                  ; 14/07/2018 - Retro DOS v3.0
 35233                                  
 35234                                  ; SHARE_CHECK
 35235                                  
 35236                                  ; Inputs:
 35237                                  ;       [THISSFT] Points to filled in local file/device SFT for new
 35238                                  ;               instance of file sf_mode ALWAYS has mode (even on FCB SFTs)
 35239                                  ;       [WFP_START] has full path of name
 35240                                  ;       [USER_ID] Set
 35241                                  ;       [PROC_ID] Set
 35242                                  ; Function:
 35243                                  ;       Check for sharing violations on local file/device access
 35244                                  ; Outputs:
 35245                                  ;    Carry clear
 35246                                  ;       Sharing approved
 35247                                  ;    Carry set
 35248                                  ;       A sharing violation detected
 35249                                  ;           AX is error code
 35250                                  ; USES    ALL but DS
 35251                                  
 35252                                  SHARE_CHECK:
 35253                                  	;call	far [JShare+(1*4)] 	; MSDOS 3.3
 35254 00007328 36FF1E[6000]            	call	far [ss:JShare+(1*4)]	; 1 = MFT_Enter
 35255                                  shchk_retn:
 35256 0000732D C3                      	retn
 35257                                  
 35258                                  ; SHARE_VIOLATION
 35259                                  
 35260                                  ; Inputs:
 35261                                  ;       [THISDPB] Set
 35262                                  ;       AX has error code
 35263                                  ; Function:
 35264                                  ;       Handle Sharing errors
 35265                                  ; Outputs:
 35266                                  ;       Carry set if user says FAIL, causes error_sharing_violation
 35267                                  ;       Carry clear if user wants a retry
 35268                                  ;
 35269                                  ; DS, ES, DI preserved, others destroyed
 35270                                  
 35271                                  SHARE_VIOLATION:
 35272 0000732E 1E                      	PUSH    DS
 35273 0000732F 06                      	PUSH	ES
 35274 00007330 57                      	PUSH    DI
 35275 00007331 C606[1005]00            	MOV     byte [READOP],0		; All share errors are reading
 35276                                  	;mov	byte [ALLOWED],18h
 35277 00007336 C606[F702]18            	MOV     byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 35278 0000733B C42E[2405]              	LES     BP,[THISDPB]
 35279 0000733F BF0100                  	MOV     DI,1			; Fake some registers
 35280 00007342 89F9                    	MOV     CX,DI
 35281                                  	;mov	dx,[es:bp+16]
 35282 00007344 268B5610                	MOV     DX,[ES:BP+DPB.DIR_SECTOR]
 35283 00007348 E8FDE4                  	call	HARDERR
 35284 0000734B 5F                      	POP     DI
 35285 0000734C 07                      	POP	ES
 35286 0000734D 1F                      	POP     DS
 35287 0000734E 3C01                    	CMP     AL,1
 35288 00007350 74DB                    	jz	short shchk_retn	; 1 = retry, carry clear
 35289 00007352 F9                      	STC
 35290 00007353 C3                      	retn
 35291                                  
 35292                                  ;   ShareEnd - terminate sharing info on a particular SFT/UID/PID.  This does
 35293                                  ;       NOT perform a close, it merely asserts that the sharing information
 35294                                  ;       for the SFT/UID/PID may be safely released.
 35295                                  ;
 35296                                  ;   Inputs:     ES:DI points to an SFT
 35297                                  ;   Outputs:    None
 35298                                  ;   Registers modified: all except DS,ES,DI
 35299                                  
 35300                                  ShareEnd:
 35301                                  	;call	far [JShare+(2*4)]	; MSDOS 3.3
 35302 00007354 36FF1E[6400]            	call	far [ss:JShare+(2*4)]	; 2 = MFTClose
 35303 00007359 C3                      	retn
 35304                                  
 35305                                  ;Break <ShareEnter - attempt to enter a node into the sharing set>
 35306                                  
 35307                                  ;
 35308                                  ;   ShareEnter - perform a retried entry of a nodde into the sharing set.  If
 35309                                  ;   the max number of retries is exceeded, we notify the user via int 24.
 35310                                  ;
 35311                                  ;   Inputs:     ThisSFT points to the SFT
 35312                                  ;               WFP_Start points to the WFP
 35313                                  ;   Outputs:    Carry clear => successful entry
 35314                                  ;               Carry set => failed system call
 35315                                  ;   Registers modified: all
 35316                                  
 35317                                  ShareEnter:
 35318 0000735A 51                      	push	cx
 35319                                  retry:
 35320 0000735B 8B0E[1A00]              	mov     cx,[RetryCount]
 35321                                  attempt:
 35322 0000735F C43E[3605]              	les     di,[THISSFT]		; grab sft
 35323 00007363 31C0                    	XOR     AX,AX
 35324                                   	;mov	[es:di+51],ax
 35325 00007365 26894533                	MOV     [ES:DI+SF_ENTRY.sf_MFT],AX ; indicate free SFT
 35326 00007369 51                      	push	cx
 35327 0000736A E8BBFF                  	call    SHARE_CHECK             ; attempt to enter into the sharing set
 35328 0000736D 59                      	pop	cx
 35329 0000736E 730A                    	jnc	short done		; success, let the user see this
 35330 00007370 E816AC                  	call	Idle                    ; wait a while
 35331 00007373 E2EA                    	loop    attempt                 ; go back for another attempt
 35332 00007375 E8B6FF                  	call    SHARE_VIOLATION         ; signal the problem to the user
 35333 00007378 73E1                    	jnc	short retry		; user said to retry, go do it
 35334                                  done:
 35335 0000737A 59                      	pop	cx
 35336 0000737B C3                      	retn
 35337                                  
 35338                                  ;----------------------------------------------------------------------------
 35339                                  
 35340                                  ;align 2 ; 05/09/2018 (Error!)
 35341                                  
 35342 0000737C 90<rep 4h>              align 16 ; 08/09/2018 (OK.)
 35343                                  
 35344                                  ; 06/08/2018 - Retro DOS v3.0
 35345                                  
 35346                                  ;============================================================================
 35347                                  ; MSINIT.ASM
 35348                                  ;============================================================================
 35349                                  ;
 35350                                  ; MAIN ENTRY FOR DOS INITIALIZATION
 35351                                  ;
 35352                                  	; 15/07/2018 - RetroDOS v3.0
 35353                                  	; (MSDOS 3.3, IBMDOS.COM, 1987)
 35354                                  
 35355                                  SYSBUF:
 35356                                  IRETT:
 35357 00007380 CF                      	iret
 35358                                  
 35359                                  	; 07/07/2018 - Retro DOS v3.0
 35360                                  	; Retro DOS v2.0 - 03/03/2018
 35361                                  DOSINIT:
 35362                                  	; Far call from SYSINIT
 35363                                  	; DX = Memory size in paragraphs
 35364                                  	; DS:SI = [DEVICE_LIST] (SYSINIT.S) 
 35365                                  	;	  (Retro DOS v2.0, 16/03/2018)
 35366 00007381 FA                              CLI
 35367 00007382 FC                              CLD
 35368 00007383 2E8916[F202]                    MOV     [CS:ENDMEM],DX
 35369 00007388 2E8926[6804]                    MOV     [CS:INITSP],SP
 35370 0000738D 2E8C16[6A04]                    MOV     [CS:INITSS],SS
 35371 00007392 8CC8                            MOV     AX,CS
 35372 00007394 8ED0                            MOV     SS,AX
 35373 00007396 BC[8476]                        MOV     SP,INITSTACK
 35374                                  	; 08/08/2018
 35375 00007399 368C1E[4A00]            	MOV     [SS:NULDEV+2],DS
 35376 0000739E 368936[4800]                    MOV     [SS:NULDEV],SI	; DS:SI Points to CONSOLE Device
 35377                                  	; 15/07/2018
 35378                                  	; MSDOS 3.3 (IBMDOS.COM, 1987)
 35379                                  	; (Set INT 2Ah handler address to an 'IRET')
 35380 000073A3 1E                      	push    ds
 35381 000073A4 31C0                    	xor     ax,ax
 35382 000073A6 8ED8                    	mov     ds,ax
 35383 000073A8 B8[8073]                	mov     ax,IRETT
 35384 000073AB A3A800                  	mov     [2Ah*4],ax ; 00A8h
 35385 000073AE 8CC8                    	mov     ax,cs
 35386 000073B0 A3AA00                  	mov     [(2Ah*4)+2],ax ; 00AAh
 35387 000073B3 1F                      	pop     ds
 35388                                  	;
 35389 000073B4 E81C02                          CALL    CHARINIT	; initialize console driver
 35390                                  
 35391 000073B7 56                              PUSH	SI		; save pointer to header	
 35392 000073B8 0E                      	PUSH	CS
 35393 000073B9 07                              POP	ES
 35394                                          ; 07/07/2018
 35395 000073BA BF[9E00]                	MOV     DI,SFTABL+SFT.SFTable	; Point to sft 0
 35396 000073BD B80300                          MOV     AX,3
 35397 000073C0 AB                              STOSW           	; Refcount
 35398 000073C1 FEC8                            DEC     AL
 35399 000073C3 AB                              STOSW           	; Access rd/wr, compatibility
 35400 000073C4 30C0                            XOR     AL,AL
 35401 000073C6 AA                              STOSB           	; attribute
 35402                                  	;mov	al,0C3h
 35403 000073C7 B0C3                    	mov	al,devid_device_EOF|devid_device|ISCIN|ISCOUT
 35404 000073C9 AB                      	STOSw			; flags
 35405 000073CA 89F0                            mov	ax,si
 35406 000073CC AB                              stosw			; device pointer in devptr	
 35407 000073CD 8CD8                            mov	ax,ds
 35408 000073CF AB                      	stosw
 35409 000073D0 31C0                    	xor	ax,ax	; 0
 35410 000073D2 AB                      	stosw			; firclus
 35411 000073D3 AB                      	stosw			; time
 35412 000073D4 AB                      	stosw			; date
 35413 000073D5 48                      	dec	ax	; -1
 35414 000073D6 AB                      	stosw			; size
 35415 000073D7 AB                      	stosw
 35416 000073D8 40                      	inc	ax	; 0
 35417 000073D9 AB                      	stosw			; position
 35418 000073DA AB                      	stosw
 35419                                  	;add	di,7
 35420 000073DB 83C707                  	add	di,SF_ENTRY.sf_name - SF_ENTRY.sf_cluspos
 35421                                  				; point at name
 35422                                  	;add	si,10
 35423 000073DE 83C60A                  	add	si,SYSDEV.NAME	; sdevname
 35424                                  				; point to name
 35425 000073E1 B90400                  	mov	cx,4
 35426 000073E4 F3A5                    	rep	movsw		; name
 35427 000073E6 B103                    	mov	cl,3
 35428 000073E8 B020                    	mov	al," "
 35429 000073EA F3AA                    	rep	stosb		; extension
 35430 000073EC 5E                      	POP	SI		; get back pointer to header
 35431                                  
 35432                                  				; mark device as CON I/O
 35433                                  	; 15/07/2018
 35434                                          ;OR	BYTE [SI+4],ISCIN|ISCOUT ; or byte [si+4],3
 35435 000073ED 804C0403                	OR	BYTE [SI+SYSDEV.ATT],ISCIN|ISCOUT
 35436                                  	; 12/03/2018
 35437 000073F1 368936[3200]            	MOV     [SS:BCON],SI
 35438 000073F6 368C1E[3400]                    MOV     [SS:BCON+2],DS
 35439                                  
 35440                                  CHAR_INIT_LOOP:
 35441 000073FB C534                            LDS     SI,[SI]				; AUX device
 35442 000073FD E8D301                          CALL    CHARINIT
 35443                                         	;15/07/2018
 35444                                  	;test	byte [SI+4],8
 35445 00007400 F6440408                	TEST    BYTE [SI+SYSDEV.ATT],ISCLOCK
 35446 00007404 74F5                            JZ      SHORT CHAR_INIT_LOOP
 35447                                  	; 12/03/2018
 35448 00007406 368936[2E00]                    MOV     [SS:BCLOCK],SI
 35449 0000740B 368C1E[3000]                    MOV     [SS:BCLOCK+2],DS
 35450 00007410 BD[8676]                        MOV     BP,MEMSTRT			; ES:BP points to DPB
 35451                                  PERDRV:
 35452                                  	;lds	si,[SI+SYSDEV.NEXT] ; 15/07/2018
 35453 00007413 C534                            LDS     SI,[SI]				; Next device
 35454 00007415 83FEFF                          CMP     SI,-1
 35455 00007418 7468                    	JZ      SHORT CONTINIT
 35456                                  
 35457 0000741A E8B601                          CALL    CHARINIT
 35458                                  
 35459                                  	; Retro DOS v2.0 - 16/03/2018 (NOTE for 'CHARINIT' return):
 35460                                  	; [CALLUNIT] = Number of drives for (Disk) Block Dev Driver ([DRVMAX])
 35461                                  	;           (..When the command is 'DSK$INIT', as in 'CHARINIT')
 35462                                  	; [CALLBPB] = [DEVCALL.COUNT] = Address of the BPB (DEVCALL offset 18) 
 35463                                  	; (REF: MSDOS 3.3 MSBIO2.ASM, MSDATA.INC, MSDISK.ASM, MSBIO1.ASM)
 35464                                  	; (.. !DSK$IN' in MSBIO1.ASM)
 35465                                  	; DEVCALL.MEDIA = CALLUNIT (DEVCALL offset 13)
 35466                                  
 35467                                          ; 15/07/2018
 35468                                  	;test	word [SI+4],8000h		; DEVTYP
 35469 0000741D F744040080                      TEST    word [SI+SYSDEV.ATT],DEVTYP
 35470 00007422 75EF                    	JNZ     SHORT PERDRV			; Skip any other character devs
 35471                                  
 35472 00007424 368A0E[1303]                    MOV	CL,[SS:CALLUNIT] ; 12/03/2018
 35473 00007429 30ED                    	XOR     CH,CH
 35474                                          ; 07/07/2018
 35475                                  	;MOV	[SI+10],CL		; Number of units in name field
 35476 0000742B 884C0A                  	mov	[si+SYSDEV.NAME],cl	; sdevname        
 35477 0000742E 368A16[4600]            	MOV     DL,[SS:NUMIO]	; 15/03/2018
 35478 00007433 30F6                    	XOR     DH,DH
 35479 00007435 36000E[4600]            	ADD	[SS:NUMIO],CL	; 12/03/2018
 35480 0000743A 1E                      	PUSH    DS
 35481 0000743B 56                              PUSH    SI
 35482 0000743C 36C51E[1803]            	LDS	BX,[SS:CALLBPB]	; 12/03/2018
 35483                                  PERUNIT:
 35484 00007441 8B37                            MOV     SI,[BX]                 ; DS:SI Points to BPB
 35485 00007443 43                              INC     BX
 35486 00007444 43                              INC     BX                      ; On to next BPB
 35487                                  	;07/07/2018
 35488                                          ;mov	[ES:BP+DPB.DRIVE],dl
 35489 00007445 26885600                	MOV     [ES:BP],DL
 35490                                  	;MOV	[ES:BP+1],DH
 35491 00007449 26887601                	MOV	[ES:BP+DPB.UNIT],DH
 35492 0000744D 53                              PUSH    BX
 35493 0000744E 51                              PUSH    CX
 35494 0000744F 52                              PUSH    DX
 35495                                  
 35496                                          ;invoke	$SETDPB
 35497 00007450 E839A9                          CALL	_$SETDPB
 35498                                  
 35499                                  	; 07/07/2018
 35500                                  	;MOV	AX,[ES:BP+2]
 35501 00007453 268B4602                	mov	ax,[ES:BP+DPB.SECTOR_SIZE]
 35502                                          ; 12/03/2018
 35503 00007457 363B06[3600]            	CMP	AX,[SS:MAXSEC]
 35504 0000745C 7604                    	JBE     SHORT NOTMAX
 35505 0000745E 36A3[3600]              	MOV	[SS:MAXSEC],AX
 35506                                  NOTMAX:
 35507 00007462 5A                              POP     DX
 35508 00007463 59                              POP     CX
 35509 00007464 5B                              POP     BX
 35510 00007465 8CD8                            MOV     AX,DS                   ; save segment of bpb array
 35511 00007467 5E                              POP     SI
 35512 00007468 1F                              POP     DS
 35513                                  					; ds:si -> device header
 35514                                  					; store it in the corresponding dpb
 35515                                  	; 07/07/2018
 35516                                          ;MOV	[ES:BP+18],SI
 35517 00007469 26897612                	mov	[ES:BP+DPB.DRIVER_ADDR],si
 35518                                          ;MOV	[ES:BP+20],DS
 35519 0000746D 268C5E14                	mov	[ES:BP+DPB.DRIVER_ADDR+2],ds
 35520                                  
 35521 00007471 1E                              PUSH    DS			; save pointer to device header
 35522 00007472 56                              PUSH    SI
 35523 00007473 FEC6                            INC     DH			; inc unit #
 35524 00007475 FEC2                            INC     DL			; inc drive #
 35525 00007477 8ED8                            MOV     DS,AX			; restore segment of BPB array
 35526                                          ;add	bp,32 ;15/07/2018
 35527 00007479 83C520                  	ADD     BP,DPBSIZ		; advance pointer to next dpb
 35528 0000747C E2C3                    	LOOP    PERUNIT			; process all units in each driver
 35529                                          
 35530 0000747E 5E                      	POP     SI			; restore pointer to device header
 35531 0000747F 1F                              POP     DS
 35532 00007480 EB91                    	JMP	SHORT PERDRV		; process all drivers in chain
 35533                                  
 35534                                  CONTINIT:
 35535 00007482 0E                              PUSH    CS
 35536 00007483 1F                              POP     DS
 35537                                  ; Calculate true address of buffers, FATs, free space
 35538 00007484 89EF                            MOV     DI,BP           ; First byte after current DPBs
 35539 00007486 8B2E[3600]                      MOV     BP,[MAXSEC]
 35540 0000748A B8[8073]                        MOV     AX,SYSBUF	; = IRETT (15/07/2018)
 35541                                          ; 07/07/2018
 35542                                  	;MOV	[BUFFSTRT],AX
 35543 0000748D 01E8                            ADD     AX,BP           ; One I/O buffer
 35544 0000748F 83C010                          ADD     AX,BUFINSIZ ; = 16
 35545 00007492 A3[2600]                        MOV     [DPBHEAD],AX	; True start of DPBs
 35546 00007495 89C2                            MOV     DX,AX
 35547 00007497 81EA[8073]                      SUB     DX,SYSBUF	; = IRETT (15/07/2018)
 35548 0000749B 89D5                            MOV     BP,DX
 35549 0000749D 01FD                            ADD     BP,DI           ; Allocate buffer space
 35550                                  	;sub	bp,918 ; = ADJFAC for current DOSINIT (07/07/2018)
 35551 0000749F 81ED0603                        SUB     BP,ADJFAC       ; True address of free memory
 35552 000074A3 55                              PUSH    BP ; ###		
 35553 000074A4 BF[8676]                        MOV     DI,MEMSTRT	; Current start of DPBs
 35554                                  	;add	di,24
 35555 000074A7 83C718                          ADD     DI,DPB.NEXT_DPB	; Point at dpb.next_dpb field
 35556 000074AA 8A0E[4600]                      MOV     CL,[NUMIO]
 35557 000074AE 30ED                            XOR     CH,CH
 35558                                  TRUEDPBAD:
 35559                                  	;add	ax,32
 35560 000074B0 83C020                          ADD     AX,DPBSIZ       ; Compute address of next DPB
 35561 000074B3 AB                              STOSW                   ; Set the link to next DPB
 35562 000074B4 83C71E                          ADD     DI,DPBSIZ-2     ; Point at next address
 35563 000074B7 E2F7                            LOOP    TRUEDPBAD
 35564 000074B9 83EF20                          SUB     DI,DPBSIZ       ; Point at last dpb.next_dpb field
 35565 000074BC B8FFFF                          MOV     AX,-1
 35566 000074BF AB                              STOSW                   ; End of list
 35567 000074C0 83C50F                          ADD     BP,15           ; True start of free space (round up to segment)
 35568                                  	; 15/07/2018
 35569                                  	;MOV	CL,4
 35570                                          ;SHR	BP,CL           ; Number of segments for DOS resources
 35571 000074C3 D1DD                            rcr	bp,1
 35572 000074C5 B103                    	mov	cl,3
 35573 000074C7 D3ED                    	shr	bp,cl
 35574                                  	;
 35575 000074C9 8CCA                    	MOV     DX,CS
 35576 000074CB 01EA                            ADD     DX,BP           ; First free segment
 35577                                  	
 35578                                  	; 06/07/2019
 35579                                  	;MOV	BX,15 ; 0Fh
 35580                                  	;MOV	CX,[ENDMEM]
 35581                                  
 35582 000074CD 8CCD                            MOV     BP,CS
 35583                                  
 35584                                  ; BP has segment of DOS (whether to load high or run in place)
 35585                                  ; DX has program segment (whether after DOS or overlaying DOS)
 35586                                  ; CX has size of memory in paragraphs (reduced by DOS size if HIGHMEM)
 35587                                          
 35588                                  	;MOV	[ENDMEM],CX ; 06/07/2019
 35589                                          
 35590 000074CF 8EC5                    	MOV     ES,BP
 35591 000074D1 268C06[4A03]                    MOV     [ES:DSKCHRET+3],ES ; mov [ES:DOSEG_INIT],es
 35592 000074D6 31C0                            XOR     AX,AX
 35593 000074D8 8ED8                            MOV     DS,AX
 35594 000074DA 8EC0                            MOV     ES,AX
 35595                                  	;mov	di,82h 
 35596 000074DC BF8200                          MOV     DI,INTBASE+2
 35597                                  	; 15/07/2018
 35598 000074DF 89E8                            MOV     AX,BP
 35599                                  	; Set INT 0 (divide by zero) handler
 35600 000074E1 C7060000[E157]          	mov     word [0],DIVOV
 35601 000074E7 A30200                  	mov     word [2],ax  ; = cs
 35602                                  	; Set INT 20h to INT 28h handler segments 
 35603                                  	;mov	cx,17
 35604 000074EA B111                    	mov	cl,17 ; 06/07/2019
 35605 000074EC F3AB                    	rep	stosw
 35606                                  	; DI points to INT 29h vector, offset
 35607 000074EE 83C706                  	add	di,6 
 35608                                  	; DI points to INT 2Ah vector, segment
 35609                                  	;Set  INT 2Ah to INT 3Fh handler segments		
 35610                                  	;mov	cx,43
 35611 000074F1 B12B                    	mov	cl,43 ; 06/07/2019
 35612                                  	
 35613 000074F3 F3AB                    	rep	stosw
 35614                                  	; DI points to INT 40h vector, segment
 35615 000074F5 BF8000                  	mov	di,80h
 35616                                  	; Set INT 20h to INT 28h vectors to their default handler offsets
 35617 000074F8 B8[9114]                	mov	ax,_IRET
 35618                                  	;mov	cx,9
 35619 000074FB B109                    	mov	cl,9 ; 06/07/2019
 35620                                  iset1:
 35621 000074FD AB                      	stosw
 35622 000074FE 83C702                  	add	di,2
 35623 00007501 E2FA                    	loop	iset1
 35624 00007503 83C704                  	add	di,4
 35625                                  	; Set INT 2Ah to INT 3Fh vectors to their default handler offsets
 35626                                  	;mov	cx,22
 35627 00007506 B116                    	mov	cl,22 ; 06/07/2019
 35628                                  iset2:
 35629 00007508 AB                      	stosw
 35630 00007509 83C702                  	add	di,2
 35631 0000750C E2FA                    	loop	iset2
 35632                                  	
 35633 0000750E 89E8                    	mov	ax,bp
 35634                                  	; Set	INT 2Fh handler offset to INT2F
 35635 00007510 C706BC00[C117]          	mov	word [2Fh*4],INT2F  ; 00BCh
 35636                                  
 35637                                  	; set up entry point call at vectors 30-31h
 35638                                  
 35639 00007516 C606C000EA                      MOV     BYTE [ENTRYPOINT],mi_Long_JMP
 35640 0000751B C706C100[9214]                  MOV     WORD [ENTRYPOINT+1],CALL_ENTRY
 35641 00007521 A3C300                          MOV    [ENTRYPOINT+3],AX
 35642                                  
 35643                                  	; Set	INT 20h, 21h, 22h, 23h handler offsets
 35644 00007524 C7068000[8B14]                  MOV     WORD [addr_int_abort],QUIT
 35645 0000752A C7068400[AA14]                  MOV     WORD [addr_int_command],COMMAND
 35646 00007530 C70688000001                    MOV     WORD [addr_int_terminate],100H
 35647 00007536 89168A00                        MOV     [addr_int_terminate+2],DX
 35648                                  	; 15/07/2018 - Retro DOS v3.0
 35649 0000753A C7069400[7316]                  MOV     WORD [addr_int_disk_read],ABSDRD   ; INT 25h
 35650 00007540 C7069800[B616]                  MOV     WORD [addr_int_disk_write],ABSDWRT ; INT 26h
 35651 00007546 C7069C00[9664]                  MOV     WORD [addr_int_keep_process],STAY_RESIDENT ; INT 27h
 35652                                  
 35653                                  	; 15/07/2018
 35654                                  	; MSDOS 3.3 (IBMDOS.COM, 1987)
 35655 0000754C 0E                      	push	cs
 35656 0000754D 1F                      	pop	ds
 35657 0000754E 0E                      	push	cs
 35658 0000754F 07                      	pop	es
 35659                                  	; initialize the jump table for the sharer..
 35660                                  	;	(MSDOS 6.0, MSINIT.ASM, 1991, "patch_misc_segments")
 35661                                  	; MSDOS 3.3
 35662                                  	; (set JSharer jump table segments)
 35663 00007550 BF[5C00]                	mov	di,JShare
 35664 00007553 8CC8                    	mov	ax,cs
 35665 00007555 B90F00                  	mov	cx,15
 35666                                  iset3:
 35667 00007558 83C702                  	add	di,2
 35668 0000755B AB                      	stosw
 35669 0000755C E2FA                    	loop	iset3
 35670                                  
 35671                                  	; MSDOS 2.11, MSDOS 3.3
 35672 0000755E B8[5803]                        MOV     AX,INITBLOCK
 35673 00007561 83C00F                          ADD	AX,0Fh		; round to a paragraph
 35674 00007564 B104                            MOV     CL,4
 35675 00007566 D3E8                            SHR     AX,CL
 35676 00007568 8CDF                            MOV     DI,DS
 35677 0000756A 01C7                            ADD     DI,AX
 35678 0000756C 47                              INC     DI
 35679 0000756D 893E[DE02]                      MOV     [CurrentPDB],DI
 35680 00007571 55                              PUSH    BP ; ##
 35681 00007572 52                              PUSH    DX ; #		; Save COMMAND address
 35682 00007573 A1[F202]                        MOV     AX,[ENDMEM]
 35683 00007576 89FA                            MOV     DX,DI
 35684                                  
 35685                                          ;invoke	SETMEM          ; Basic Header
 35686 00007578 E844A9                  	CALL	SETMEM
 35687 0000757B 0E                              PUSH	CS
 35688 0000757C 1F                              POP	DS
 35689                                  	;mov	di,24
 35690 0000757D BF1800                          MOV     DI,PDB.JFN_TABLE
 35691 00007580 31C0                            XOR     AX,AX
 35692 00007582 AB                              STOSW
 35693 00007583 AA                              STOSB                   ; 0,1 and 2 are CON device
 35694 00007584 B0FF                            MOV     AL,0FFH
 35695                                  	;mov	cx,17
 35696                                  	;MOV     CX,FILPERPROC - 3 ; 17
 35697 00007586 B111                    	mov	cl,FILPERPROC-3 ; 06/07/2019
 35698 00007588 F3AA                            REP     STOSB           ; Rest are unused
 35699 0000758A 0E                              PUSH	CS
 35700 0000758B 07                              POP	ES
 35701 0000758C 8C1E[2C00]                      MOV     [SFT_ADDR+2],DS	; Must be set to print messages
 35702                                  
 35703                                  	; 15/07/2018 - Retro DOS v3.0
 35704                                  	; MSDOS 3.3
 35705                                  	; (set country cdpg table segments)
 35706 00007590 BE[FD0F]                	mov	si,COUNTRY_CDPG ; country_tab
 35707                                  	;mov	[es:si+79],es	; Ucase table segment
 35708                                  	;mov	[es:si+84],es	; File ucase table segment
 35709                                  	;mov	[es:si+89],es	; File char list segment
 35710                                  	;mov	[es:si+94],es	; Collate table segment
 35711                                  	;mov	[es:si+123],es	; Monocase routine segment
 35712 00007593 8C444F                  	mov	[si+79],es
 35713 00007596 8C4454                  	mov	[si+84],es
 35714 00007599 8C4459                  	mov	[Si+89],es
 35715 0000759C 8C445E                  	mov	[si+94],es
 35716 0000759F 8C447B                  	mov	[si+123],es
 35717                                  	; (set SysInitTable -sysinitvars and country_cdpg- segments)
 35718 000075A2 BE[3B0F]                	mov     si,SysInitTable
 35719                                  	;;mov	[es:si+6], es
 35720                                  	;;mov	[es:si+2], es
 35721                                  	;mov	[es:si+SYSI_EXT.Country_Tab+2],es
 35722                                  	;mov	[es:si+SYSI_EXT.SysInitVars+2],es
 35723 000075A5 8C4406                  	mov	[si+SYSI_EXT.Country_Tab+2],es
 35724 000075A8 8C4402                  	mov	[si+SYSI_EXT.SysInitVars+2],es
 35725                                  
 35726                                  	; (set FastOpen table FastRet segment)
 35727 000075AB BE[430F]                	mov     si,FastTable
 35728                                  	;mov	[es:si+4],es
 35729                                  	;;mov	[es:si+8],es
 35730 000075AE 8C4404                  	mov     [si+4],es
 35731                                  	;mov	[si+8],es
 35732                                  	; IBMDOS.COM (Offset 7259h), IBM PC DOS 3.30
 35733 000075B1 C706[8F0F]7258          	mov	word [FETCHI_TAG],5872h ; ? ('Xr')
 35734                                  
 35735                                  	; 10/08/2018 - Retro DOS v3.0
 35736                                  
 35737                                  	; MSDOS 2.11 (Retro DOS v2.0), MSDOS 3.3
 35738                                  
 35739                                  ; After this points the char device functions for CON will work for
 35740                                  ; printing messages
 35741                                  
 35742                                  	;;IF	NOT IBM
 35743                                  	;;IF	NOT ALTVECT
 35744                                  	;MOV	SI,HEADER
 35745                                  	;;invoke OUTMES
 35746                                  	;CALL	OUTMES
 35747                                  	;;PUSH	CS		; Outmes stomps on segments
 35748                                  	;;POP	DS
 35749                                  	;;PUSH	CS
 35750                                  	;;POP	ES
 35751                                  	;;ENDIF
 35752                                  	;;ENDIF
 35753                                  
 35754                                  ; Move the FATs into position
 35755 000075B7 5A                              POP     DX ; #			; Restore COMMAND address
 35756 000075B8 5D                              POP     BP ; ##
 35757 000075B9 59                              POP     CX ; ###		; True address of free memory
 35758 000075BA BE[8676]                        MOV     SI,MEMSTRT		; Place to move DPBs from
 35759 000075BD 8B3E[2600]                      MOV     DI,[DPBHEAD]		; Place to move DPBs to
 35760 000075C1 29F9                            SUB     CX,DI                   ; Total length of DPBs
 35761 000075C3 39F7                            CMP     DI,SI
 35762 000075C5 7607                            JBE     SHORT MOVJMP		; Are we moving to higher or 
 35763                                  					; lower memory?
 35764 000075C7 49                              DEC     CX                      ; Move backwards to higher memory
 35765 000075C8 01CF                            ADD     DI,CX
 35766 000075CA 01CE                            ADD     SI,CX
 35767 000075CC 41                              INC     CX
 35768 000075CD FD                              STD
 35769                                  MOVJMP:
 35770 000075CE 8EC5                            MOV     ES,BP
 35771 000075D0 E9998E                          JMP     MOVDPB
 35772                                  
 35773                                  CHARINIT:
 35774                                  	; 07/07/2018 - Retro DOS v3.0
 35775 000075D3 36C606[0603]1A                  MOV	BYTE [SS:DEVCALL_REQLEN],DINITHL
 35776 000075D9 36C606[0703]00                  MOV	BYTE [SS:DEVCALL_REQUNIT],0
 35777 000075DF 36C606[0803]00                  MOV	BYTE [SS:DEVCALL_REQFUNC],DEVINIT
 35778 000075E5 36C706[0903]0000                MOV	WORD [SS:DEVCALL_REQSTAT],0
 35779 000075EC 06                              PUSH	ES
 35780 000075ED 53                              PUSH	BX
 35781 000075EE 50                              PUSH	AX
 35782 000075EF BB[0603]                        MOV	BX,DEVCALL
 35783 000075F2 0E                              PUSH	CS
 35784 000075F3 07                              POP	ES
 35785 000075F4 E803D9                          CALL	DEVIOCALL2	
 35786 000075F7 58                      	POP	AX
 35787 000075F8 5B                              POP	BX
 35788 000075F9 07                              POP	ES
 35789 000075FA C3                              RETN
 35790                                  
 35791 000075FB 90                      align 2
 35792                                          ;;DB	80H DUP(?)
 35793                                  	;TIMES 	64 dw 0 ; 05/09/2018
 35794                                  	; 10/08/2018
 35795                                  	;times	128 dw 0
 35796                                  	; 12/08/2018
 35797                                  	;times	132 dW 0 ; ADJFAC = 918 ; 08/09/2018 (OK.)
 35798                                  	; 08/09/2018 
 35799 000075FC 00<rep 88h>             	times	136 db 0 ; ADJFAC = 790	; 08/09/2018 (OK.) 
 35800                                  
 35801                                  INITSTACK:	; INITSTACK LABEL BYTE
 35802 00007684 0000                    	DW	0 ; DW ?
 35803                                  
 35804                                  ;MEMSTRT LABEL	WORD
 35805                                  MEMSTRT EQU	$
 35806                                  
 35807                                  ADJFAC  EQU     MEMSTRT-SYSBUF
 35808                                  
 35809 00007686 00                      	db 0
 35810 00007687 00                      	db 0
 35811 00007688 00                      	db 0
 35812 00007689 00                      	db 0
 35813 0000768A 00                      	db 0
 35814 0000768B 00                      	db 0
 35815 0000768C 00                      	db 0
 35816 0000768D 00                      	db 0
 35817 0000768E 00                      	db 0
 35818 0000768F 00                      	db 0
 35819                                  PcDosVersion:
 35820 00007690 1A4040402323232050-     	db 1Ah,'@@@### PC-DOS Version 3.30',0Dh,0Ah
 35820 00007699 432D444F5320566572-
 35820 000076A2 73696F6E20332E3330-
 35820 000076AB 0D0A               
 35821 000076AD 1A00                    	db 1Ah,0
 35822                                  
 35823                                          ;do_ext
 35824                                  ;LAST	ENDS
