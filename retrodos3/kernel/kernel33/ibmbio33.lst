SEG0070:0000 ;
SEG0070:0000 ; +-------------------------------------------------------------------------+
SEG0070:0000 ; |   This	file has been generated	by The Interactive Disassembler	(IDA)	 |
SEG0070:0000 ; |	   Copyright (c) 2013 Hex-Rays,	<support@hex-rays.com>		 |
SEG0070:0000 ; |		      Licensed to: Freeware version			 |
SEG0070:0000 ; +-------------------------------------------------------------------------+
SEG0070:0000 ;
SEG0070:0000 ; Input MD5   : 3D25F376B63A337F42DDE694DE59AD6C
SEG0070:0000
SEG0070:0000 ; ---------------------------------------------------------------------------
SEG0070:0000 ; File Name   : D:\Documents and Settings\Erdoðan Tan\Desktop\ibmbio.bin
SEG0070:0000 ; Format	   : Binary file
SEG0070:0000 ; Base Address: 0000h Range: 0000h	- 5465h	Loaded length: 5465h
SEG0070:0000
SEG0070:0000		     .386
SEG0070:0000		     .model flat
SEG0070:0000
SEG0070:0000 ; ===========================================================================
SEG0070:0000
SEG0070:0000 ; Segment type: Regular
SEG0070:0000 SEG0070	     segment byte public 'SEG0070' use16
SEG0070:0000		     assume cs:SEG0070
SEG0070:0000		     assume es:nothing,	ss:SEG0070, ds:SEG0070,	fs:SEG0070, gs:SEG0070
SEG0070:0000
SEG0070:0000 START$:
SEG0070:0000		     jmp     init
SEG0070:0000 ; ---------------------------------------------------------------------------
SEG0070:0003 DSKTBL	     db	24		     ; DATA XREF: SEG0070:0635o
SEG0070:0004		     dw	offset DSK$INIT
SEG0070:0006		     dw	offset MEDIA$CHK
SEG0070:0008 _08h	     dw	offset GET$BPB	     ; DATA XREF: SEG0070:191Aw
SEG0070:000A _0Ah	     dw	offset CMDERR	     ; DATA XREF: SEG0070:191Ew
SEG0070:000C		     dw	offset DSK$READ
SEG0070:000E		     dw	offset BUS$EXIT
SEG0070:0010		     dw	offset EXIT
SEG0070:0012		     dw	offset EXIT
SEG0070:0014		     dw	offset DSK$WRIT
SEG0070:0016		     dw	offset DSK$WRITV
SEG0070:0018		     dw	offset EXIT
SEG0070:001A		     dw	offset EXIT
SEG0070:001C		     dw	offset CMDERR
SEG0070:001E TABLE_PATCH     dw	offset DSK$OPEN	     ; DATA XREF: purge_96tpi:PatchDoneo
SEG0070:0020 _20h	     dw	offset DSK$CLOSE     ; DATA XREF: SEG0070:192Cw
SEG0070:0022 _22h	     dw	offset DSK$REM	     ; DATA XREF: SEG0070:1930w
SEG0070:0024 _24h	     dw	offset EXIT	     ; DATA XREF: SEG0070:193Ew
SEG0070:0026 _26h	     dw	offset EXIT	     ; DATA XREF: SEG0070:1942w
SEG0070:0028 _28h	     dw	offset EXIT	     ; DATA XREF: SEG0070:1950w
SEG0070:002A _2Ah	     dw	offset GENERIC$IOCTL ; DATA XREF: SEG0070:1954w
SEG0070:002C _2Ch	     dw	offset EXIT	     ; DATA XREF: SEG0070:1962w
SEG0070:002E _2Eh	     dw	offset EXIT	     ; DATA XREF: SEG0070:1966w
SEG0070:0030 _30h	     dw	offset EXIT	     ; DATA XREF: SEG0070:1974w
SEG0070:0032 _32h	     dw	offset IOCTL$GETOWN  ; DATA XREF: SEG0070:1978w
SEG0070:0034 _34h	     dw	offset IOCTL$SETOWN  ; DATA XREF: SEG0070:1986w
SEG0070:0036 _36h	     db	0		     ; DATA XREF: SEG0070:198Aw
SEG0070:0037 CONTBL	     db	10		     ; DATA XREF: SEG0070:loc_5E8o
SEG0070:0038 _38h	     dw	offset EXIT	     ; DATA XREF: SEG0070:1998w
SEG0070:003A _3Ah	     dw	offset EXIT	     ; DATA XREF: SEG0070:199Cw
SEG0070:003C _3Ch	     dw	offset EXIT	     ; DATA XREF: SEG0070:resetintfw
SEG0070:003E _3Eh	     dw	offset CMDERR	     ; DATA XREF: SEG0070:2C4Dr
SEG0070:003E					     ; SEG0070:2C62w
SEG0070:0040 _40h	     dw	offset CON$READ	     ; DATA XREF: OUTCHR+9r
SEG0070:0040					     ; longpath+54r
SEG0070:0042		     dw	offset CON$RDND
SEG0070:0044 _44h	     dw	offset EXIT	     ; DATA XREF: SEG0070:2AF6r
SEG0070:0046		     dw	offset CON$FLSH
SEG0070:0048 _48h	     dw	offset CON$WRIT	     ; DATA XREF: SEG0070:NO_DIDDLEr
SEG0070:004A _4Ah	     dw	offset CON$WRIT
SEG0070:004C _4Ch	     dw	offset EXIT	     ; DATA XREF: read_sector+10r
SEG0070:004C					     ; read_sector+37r	...
SEG0070:004E _4Eh	     db	0		     ; DATA XREF: SEG0070:18EDw
SEG0070:004E					     ; SEG0070:2AC8r ...
SEG0070:004F AUXTBL	     db	10		     ; DATA XREF: SEG0070:AUXENTo
SEG0070:0050 _50h	     dw	offset EXIT	     ; DATA XREF: AUXOP+3r
SEG0070:0050					     ; AUX_INIT+6r
SEG0070:0052		     dw	offset EXIT
SEG0070:0054 _54h	     dw	offset EXIT	     ; DATA XREF: SEG0070:0708r
SEG0070:0054					     ; SEG0070:2B25r ...
SEG0070:0056		     dw	offset CMDERR
SEG0070:0058 _58h	     dw	offset AUX$READ	     ; DATA XREF: CHRIN+Ar
SEG0070:0058					     ; SEG0070:06ECr ...
SEG0070:005A _5Ah	     dw	offset AUX$RDND
SEG0070:005C _5Ch	     dw	offset EXIT	     ; DATA XREF: PRNOP+3r
SEG0070:005C					     ; PRINT_INIT+5r
SEG0070:005E		     dw	offset AUX$FLSH
SEG0070:0060 _60h	     dw	offset AUX$WRIT
SEG0070:0062		     dw	offset AUX$WRIT
SEG0070:0064 _64h	     dw	offset AUX$WRST	     ; DATA XREF: SEG0070:1A11w
SEG0070:0064					     ; SEG0070:1A19r ...
SEG0070:0066 _66h	     db	0		     ; DATA XREF: SEG0070:1A15w
SEG0070:0066					     ; SEG0070:2AE4r ...
SEG0070:0067 TIMTBL	     db	9		     ; DATA XREF: SEG0070:062Fo
SEG0070:0068 _68h	     dw	offset EXIT	     ; DATA XREF: SEG0070:08F7r
SEG0070:0068					     ; SEG0070:0908r ...
SEG0070:006A		     dw	offset EXIT
SEG0070:006C _6Ch	     dw	offset EXIT	     ; DATA XREF: SEG0070:2B8Aw
SEG0070:006E _6Eh	     dw	offset CMDERR	     ; DATA XREF: SEG0070:2B90w
SEG0070:0070 _70h	     dw	offset TIM$READ
SEG0070:0072		     dw	offset BUS$EXIT
SEG0070:0074 _74h	     dw	offset EXIT
SEG0070:0076		     dw	offset EXIT
SEG0070:0078 _78h	     dw	offset TIM$WRIT	     ; DATA XREF: DISKRD+2Fr
SEG0070:0078					     ; FormatStatus+62r ...
SEG0070:007A _7Ah	     dw	offset TIM$WRIT	     ; DATA XREF: RestoreOldDPT+21w
SEG0070:007A					     ; SEG0070:2BBDr ...
SEG0070:007C		     db	0
SEG0070:007D PRNTBL	     db	24		     ; DATA XREF: SEG0070:PRNENTo
SEG0070:007E		     dw	offset EXIT
SEG0070:0080 _80h	     dw	offset EXIT
SEG0070:0082		     dw	offset EXIT
SEG0070:0084 _84h	     dw	offset CMDERR	     ; DATA XREF: SYSINIT:09C9r
SEG0070:0084					     ; SYSINIT:09D4r ...
SEG0070:0086		     dw	offset EXIT$ZER
SEG0070:0088		     dw	offset BUS$EXIT
SEG0070:008A		     dw	offset EXIT
SEG0070:008C		     dw	offset EXIT
SEG0070:008E		     dw	offset PRN$WRIT
SEG0070:0090		     dw	offset PRN$WRIT
SEG0070:0092		     dw	offset PRN$STAT
SEG0070:0094		     dw	offset EXIT
SEG0070:0096		     dw	offset EXIT
SEG0070:0098		     dw	offset EXIT
SEG0070:009A		     dw	offset EXIT
SEG0070:009C		     dw	offset EXIT
SEG0070:009E		     dw	offset PRN$TilBusy
SEG0070:00A0		     dw	offset EXIT
SEG0070:00A2		     dw	offset EXIT
SEG0070:00A4 _A4h	     dw	offset PRN$GenIOCTL  ; DATA XREF: SEG0070:0749r
SEG0070:00A4					     ; SEG0070:2B93w
SEG0070:00A6 _A6h	     dw	offset EXIT	     ; DATA XREF: SEG0070:2B99w
SEG0070:00A8		     dw	offset EXIT
SEG0070:00AA Int08	     dw	offset EXIT	     ; DATA XREF: StackInit+BEo
SEG0070:00AC _ACh	     dw	offset CMDERR
SEG0070:00AE		     dw	offset CMDERR
SEG0070:00B0 OLD13	     dw	3935h		     ; DATA XREF: SEG0070:1820r
SEG0070:00B0					     ; SEG0070:1834w ...
SEG0070:00B2 OLD13_2	     dw	3638h		     ; DATA XREF: SEG0070:1825r
SEG0070:00B2					     ; SEG0070:1839w ...
SEG0070:00B4 ORG13	     dd	3132h		     ; DATA XREF: SEG0070:0F98r
SEG0070:00B4					     ; SEG0070:0FAAr ...
SEG0070:00B8 PTRSAV	     dd	0		     ; DATA XREF: SEG0070:STRATEGYw
SEG0070:00B8					     ; SEG0070:0644r ...
SEG0070:00BC AUXBUF	     db	0, 0, 0, 0	     ; DATA XREF: GETBX+5o
SEG0070:00C0 PrevOper	     dw	0		     ; DATA XREF: SEG0070:Block13w
SEG0070:00C0					     ; SEG0070:103Er ...
SEG0070:00C2 Number_Of_Sec   db	0		     ; DATA XREF: SEG0070:104Ew
SEG0070:00C2					     ; SEG0070:OK11_OPw
SEG0070:00C3 byte_C3	     db	169 dup(0)
SEG0070:016C AUXNUM	     dw	0		     ; DATA XREF: SEG0070:0640w
SEG0070:016C					     ; GETDXr
SEG0070:016E CONHeader	     dw	offset AUXDEV2	     ; DATA XREF: SEG0070:2C16o
SEG0070:0170		     dw	70h
SEG0070:0172		     dw	8013h
SEG0070:0174		     dw	offset STRATEGY
SEG0070:0176		     dw	offset CON$IN
SEG0070:0178		     db	'CON     '
SEG0070:0180 AUXDEV2	     dw	offset PRNDEV2	     ; DATA XREF: SEG0070:CONHeadero
SEG0070:0182		     dw	70h
SEG0070:0184		     dw	8000h
SEG0070:0186		     dw	offset STRATEGY
SEG0070:0188		     dw	offset AUX0$IN
SEG0070:018A		     db	'AUX     '
SEG0070:0192 PRNDEV2	     dw	offset TIMDEV	     ; DATA XREF: SEG0070:AUXDEV2o
SEG0070:0194		     dw	70h
SEG0070:0196		     dw	0A040h
SEG0070:0198		     dw	offset STRATEGY
SEG0070:019A		     dw	offset PRN0$IN
SEG0070:019C		     db	'PRN     '
SEG0070:01A4 TIMDEV	     dw	offset DSKDEV	     ; DATA XREF: SEG0070:PRNDEV2o
SEG0070:01A6		     dw	70h
SEG0070:01A8		     dw	8008h
SEG0070:01AA		     dw	offset STRATEGY
SEG0070:01AC		     dw	offset TIM$IN
SEG0070:01AE asc_1AE	     db	'CLOCK$  '           ; DATA XREF: SEG0070:2F06w
SEG0070:01AE					     ; SEG0070:2F0Aw
SEG0070:01B6 DSKDEV	     dw	offset COM1DEV	     ; DATA XREF: SEG0070:TIMDEVo
SEG0070:01B8		     dw	70h
SEG0070:01BA		     dw	840h
SEG0070:01BC		     dw	offset STRATEGY
SEG0070:01BE		     dw	offset DSK$IN
SEG0070:01C0 DRVMAX	     db	4		     ; DATA XREF: SEG0070:19AAw
SEG0070:01C0					     ; SEG0070:1A1Dr ...
SEG0070:01C1 STEP_DRV	     db	0FEh		     ; DATA XREF: read_sector:OKRET2w
SEG0070:01C1					     ; DISK+39r ...
SEG0070:01C2 PHYS_DRV	     db	0		     ; DATA XREF: SetDrive:Scan_Loopr
SEG0070:01C2					     ; SEG0070:1102w ...
SEG0070:01C3 fHave96	     db	0		     ; DATA XREF: SEG0070:1375r
SEG0070:01C3					     ; SEG0070:2CFEw ...
SEG0070:01C4 single	     db	0		     ; DATA XREF: CHECKSINGLE+4Ar
SEG0070:01C4					     ; SEG0070:2B02w ...
SEG0070:01C5 fHaveK09	     db	0		     ; DATA XREF: SEG0070:nochrr
SEG0070:01C5					     ; SEG0070:2EFDw
SEG0070:01C6 New_Rom	     db	0		     ; DATA XREF: FormatStatus+2Ew
SEG0070:01C6					     ; FormatStatus+92w ...
SEG0070:01C7 fSetOwner	     db	0		     ; DATA XREF: CHECKSINGLE+42r
SEG0070:01C7					     ; SEG0070:172Cw ...
SEG0070:01C8 Secrete_Code    dw	'jk'                 ; DATA XREF: SEG0070:09C7r
SEG0070:01C8					     ; SEG0070:19BCw
SEG0070:01CA COM1DEV	     dw	offset LPT1DEV	     ; DATA XREF: SEG0070:DSKDEVo
SEG0070:01CA					     ; SEG0070:19C0w ...
SEG0070:01CC _1CCh	     dw	70h		     ; DATA XREF: SEG0070:19CEw
SEG0070:01CE _1CEh	     dw	8000h		     ; DATA XREF: SEG0070:19D2w
SEG0070:01D0 _1D0h	     dw	5DCh		     ; DATA XREF: SEG0070:19E0w
SEG0070:01D2 _1D2h	     dw	5EDh		     ; DATA XREF: SEG0070:19E4w
SEG0070:01D4		     db	'COM1    '           ; DATA XREF: SEG0070:19F2w
SEG0070:01D4					     ; SEG0070:19F6w
SEG0070:01DC LPT1DEV	     dw	offset LPT2DEV	     ; DATA XREF: SEG0070:COM1DEVo
SEG0070:01DC					     ; SEG0070:1A04w ...
SEG0070:01DE _1DEh	     dw	70h		     ; DATA XREF: SEG0070:1A08w
SEG0070:01E0		     dw	0A040h
SEG0070:01E2		     dw	offset STRATEGY
SEG0070:01E4		     dw	offset PRN1$IN
SEG0070:01E6		     db	'LPT1    '
SEG0070:01EE LPT2DEV	     dw	offset LPT3DEV	     ; DATA XREF: SEG0070:LPT1DEVo
SEG0070:01EE					     ; SEG0070:2B6Fo
SEG0070:01F0 word_1F0	     dw	70h
SEG0070:01F2		     dw	0A040h
SEG0070:01F4		     dw	offset STRATEGY
SEG0070:01F6		     dw	offset PRN2$IN
SEG0070:01F8 asc_1F8	     db	'LPT2    '
SEG0070:0200 LPT3DEV	     dw	offset COM2DEV	     ; DATA XREF: SEG0070:LPT2DEVo
SEG0070:0200					     ; SEG0070:2B69o
SEG0070:0202		     dw	70h
SEG0070:0204		     dw	0A040h
SEG0070:0206		     dw	offset STRATEGY
SEG0070:0208 off_208	     dw	offset PRN3$IN
SEG0070:020A		     db	'LPT3    '
SEG0070:0212 COM2DEV	     dw	offset COM3DEV	     ; DATA XREF: SEG0070:LPT3DEVo
SEG0070:0212					     ; SEG0070:2B5Do
SEG0070:0214		     dw	70h
SEG0070:0216		     dw	8000h
SEG0070:0218		     dw	offset STRATEGY
SEG0070:021A		     dw	offset AUX1$IN
SEG0070:021C		     db	'COM2    '
SEG0070:0224 COM3DEV	     dw	offset COM4DEV	     ; DATA XREF: SEG0070:COM2DEVo
SEG0070:0224					     ; SEG0070:2B57o
SEG0070:0226		     dw	70h
SEG0070:0228		     dw	8000h
SEG0070:022A		     dw	offset STRATEGY
SEG0070:022C		     dw	offset AUX2$IN
SEG0070:022E		     db	'COM3    '
SEG0070:0236 COM4DEV	     dw	0FFFFh		     ; DATA XREF: SEG0070:COM3DEVo
SEG0070:0236					     ; SEG0070:2B51o
SEG0070:0238		     dw	70h
SEG0070:023A		     dw	8000h
SEG0070:023C		     dw	offset STRATEGY
SEG0070:023E		     dw	offset AUX3$IN
SEG0070:0240		     db	'COM4    '
SEG0070:0248 NEXT2F_13	     dw	offset INT2F_DISK    ; DATA XREF: SEG0070:1811r
SEG0070:024A		     dw	70h
SEG0070:024C START_BDS	     dw	offset BDS1	     ; DATA XREF: SetDrive+3r
SEG0070:024C					     ; CHECKSINGLE+16o	...
SEG0070:024E		     dw	70h
SEG0070:0250 AccessCount     db	0		     ; DATA XREF: CHECK_TIME_OF_ACCESS+1Fw
SEG0070:0250					     ; CHECK_TIME_OF_ACCESS+24r ...
SEG0070:0251 TIM_DRV	     db	0FFh		     ; DATA XREF: SEG0070:09DFw
SEG0070:0251					     ; SEG0070:0A07r ...
SEG0070:0252 FlagBits	     dw	0		     ; DATA XREF: SEG0070:Changed_Patchw
SEG0070:0252					     ; SEG0070:1D4Bw ...
SEG0070:0254 MedByt	     db	0		     ; DATA XREF: DISKRD+Ew
SEG0070:0254					     ; FAT_Check+3r
SEG0070:0255		     db	90h
SEG0070:0256 WRTVERIFY	     dw	2		     ; DATA XREF: SEG0070:DSK$WRITVw
SEG0070:0256					     ; SEG0070:DSK$WRITw ...
SEG0070:0258 SECCNT	     dw	0		     ; DATA XREF: DISKRD+25w
SEG0070:0258					     ; DISKRD+6Cr ...
SEG0070:025A HARDNUM	     db	63h		     ; DATA XREF: SEG0070:2C77w
SEG0070:025A					     ; SEG0070:2DBDr ...
SEG0070:025B MotorStartup    db	0		     ; DATA XREF: IOSetUp+18w
SEG0070:025B					     ; DONE+11r
SEG0070:025C SettleCurrent   db	0		     ; DATA XREF: IOSetUp+33w
SEG0070:025C					     ; DONE+Dr
SEG0070:025D SettleSlow	     db	0		     ; DATA XREF: IOSetUp+3Bw
SEG0070:025D					     ; NormSpeed+2r
SEG0070:025E NextSpeed	     db	0
SEG0070:025F Save_head_sttl  db	0		     ; DATA XREF: read_sector+2Aw
SEG0070:025F					     ; read_sector+40r
SEG0070:0260 EOT	     db	9		     ; DATA XREF: IOSetUp+Er
SEG0070:0260					     ; TrackIO+58r ...
SEG0070:0261		     db	90h
SEG0070:0262 DPT	     dd	0		     ; DATA XREF: read_sector+22r
SEG0070:0262					     ; read_sector+3Br	...
SEG0070:0266 CURSEC	     db	0		     ; DATA XREF: DISKRD+57w
SEG0070:0266					     ; BLOCK+16r ...
SEG0070:0267 CURHD	     db	0		     ; DATA XREF: DISKRD+63w
SEG0070:0267					     ; DISK+2Br ...
SEG0070:0268 CURTRK	     dw	0		     ; DATA XREF: DISKRD+68w
SEG0070:0268					     ; DISK+9r	...
SEG0070:026A SPSAV	     dw	0		     ; DATA XREF: DISKRD+14w
SEG0070:026A					     ; DISK+D4r ...
SEG0070:026C FORMT_EOT	     db	8		     ; DATA XREF: SetDASD+4Ew
SEG0070:026C					     ; to_rom+22r
SEG0070:026D HDNUM	     db	0		     ; DATA XREF: SEG0070:14F3w
SEG0070:026D					     ; to_rom+51r
SEG0070:026E TRKNUM	     dw	0		     ; DATA XREF: SEG0070:14EBw
SEG0070:026E					     ; to_rom:Got_Valid_DPTr
SEG0070:0270 GAP_PATCH	     db	50h		     ; DATA XREF: SetDASD+1Aw
SEG0070:0270					     ; SetDASD+3Ew ...
SEG0070:0271 ERRIN	     db	 80h ; 	     ; DATA XREF: MAPERROR+Co
SEG0070:0272		     db	 40h ; @
SEG0070:0273		     db	 10h
SEG0070:0274		     db	   8
SEG0070:0275		     db	   6
SEG0070:0276		     db	   4
SEG0070:0277		     db	   3
SEG0070:0278 LSTERR	     db	0		     ; DATA XREF: MAPERROR+5w
SEG0070:0279 ERROUT	     db	   2
SEG0070:027A		     db	   6
SEG0070:027B		     db	   4
SEG0070:027C		     db	   4
SEG0070:027D		     db	 0Fh
SEG0070:027E		     db	   8
SEG0070:027F		     db	   0
SEG0070:0280		     db	 0Ch
SEG0070:0281 DiskSector	     db	0		     ; DATA XREF: ReadBootSec+Cr
SEG0070:0281					     ; ReadBootSec+14r	...
SEG0070:0282		     db	0
SEG0070:0283 disksector_2    db	0		     ; DATA XREF: ReadBootSec+24r
SEG0070:0284		     db	   0
SEG0070:0285		     db	   0
SEG0070:0286		     db	   0
SEG0070:0287		     db	   0
SEG0070:0288		     db	   0
SEG0070:0289 disksector_8    dw	0		     ; DATA XREF: ReadBootSec+3Er
SEG0070:028B disksector_9    db	0		     ; DATA XREF: ReadBootSec+47r
SEG0070:028C BPB_In_Sector   dw	0		     ; DATA XREF: MovBPB+4o
SEG0070:028E SECPERCLUSINSECTOR	db 0		     ; DATA XREF: ReadBootSec:MUSTBEEARLIERw
SEG0070:028F		     dw	0
SEG0070:0291		     db	   0
SEG0070:0292		     dw	0
SEG0070:0294		     dw	0
SEG0070:0296 mediabyte	     db	0		     ; DATA XREF: ReadBootSec:Check_bpb_MediaByter
SEG0070:0296					     ; ReadBootSec+36r
SEG0070:0297		     dw	0
SEG0070:0299		     dw	0
SEG0070:029B		     dw	0
SEG0070:029D		     dw	0
SEG0070:029F		     db	282 dup(0)
SEG0070:03B9 SYSINITSEG	     db	200 dup(0)	     ; DATA XREF: SEG0070:2C11o
SEG0070:03B9					     ; SEG0070:2C44o ...
SEG0070:0481		     db	90h
SEG0070:0482 BDS1	     dw	offset BDS2	     ; DATA XREF: SEG0070:START_BDSo
SEG0070:0484		     dw	70h
SEG0070:0486		     db	   0
SEG0070:0487		     db	   0
SEG0070:0488 FDRIVE1	     dw	200h		     ; DATA XREF: SEG0070:DskDrvso
SEG0070:048A		     db	0FFh
SEG0070:048B		     dw	1
SEG0070:048D		     db	   2
SEG0070:048E		     dw	40h
SEG0070:0490		     dw	168h
SEG0070:0492		     db	   0
SEG0070:0493		     dw	2
SEG0070:0495		     dw	9
SEG0070:0497		     dw	1
SEG0070:0499		     dw	0
SEG0070:049B		     db	   0
SEG0070:049C OPCNT1	     dw	0
SEG0070:049E VOLID1	     db	'NO NAME    ',0
SEG0070:04AA		     db	   3
SEG0070:04AB FLAGS1	     dw	20h
SEG0070:04AD		     dw	28h
SEG0070:04AF RecBPB1	     dw	200h
SEG0070:04B1		     db	   1
SEG0070:04B2		     dw	1
SEG0070:04B4		     db	   2
SEG0070:04B5		     dw	0E0h
SEG0070:04B7		     dw	168h
SEG0070:04B9		     db	0F0h ; ð
SEG0070:04BA		     dw	2
SEG0070:04BC		     dw	9
SEG0070:04BE		     dw	2
SEG0070:04C0		     dw	0
SEG0070:04C2		     db	   0
SEG0070:04C3		     dd	0
SEG0070:04C7		     db	   0
SEG0070:04C8		     db	   0
SEG0070:04C9		     db	   0
SEG0070:04CA		     db	   0
SEG0070:04CB		     db	   0
SEG0070:04CC		     db	   0
SEG0070:04CD		     db	   0
SEG0070:04CE TRACK1	     db	0FFh
SEG0070:04CF TIM_LO1	     dw	0FFFFh
SEG0070:04D1 TIM_HI1	     dw	0FFFFh
SEG0070:04D3		     db	 90h ; 
SEG0070:04D4 BDS2	     dw	offset BDS3	     ; DATA XREF: SEG0070:BDS1o
SEG0070:04D6		     dw	70h
SEG0070:04D8		     db	   0
SEG0070:04D9		     db	   0
SEG0070:04DA FDRIVE2	     dw	200h		     ; DATA XREF: SEG0070:18A6o
SEG0070:04DC		     db	0FFh
SEG0070:04DD		     db	   1
SEG0070:04DE		     db	   0
SEG0070:04DF		     db	   2
SEG0070:04E0		     db	 40h ; @
SEG0070:04E1		     db	   0
SEG0070:04E2		     db	 68h ; h
SEG0070:04E3		     db	   1
SEG0070:04E4		     db	   0
SEG0070:04E5		     db	   2
SEG0070:04E6		     db	   0
SEG0070:04E7		     db	   9
SEG0070:04E8		     db	   0
SEG0070:04E9		     db	   1
SEG0070:04EA		     db	   0
SEG0070:04EB		     db	   0
SEG0070:04EC		     db	   0
SEG0070:04ED		     db	   0
SEG0070:04EE		     db	   0
SEG0070:04EF		     db	   0
SEG0070:04F0		     db	'NO NAME    ',0
SEG0070:04FC		     db	   3
SEG0070:04FD		     db	 20h
SEG0070:04FE		     db	   0
SEG0070:04FF		     db	 28h ; (
SEG0070:0500 _500h	     dw	0		     ; DATA XREF: SEG0070:2BB1w
SEG0070:0502		     db	   2
SEG0070:0503		     db	   1
SEG0070:0504 LSTDRV	     dw	1		     ; DATA XREF: CHECKSINGLE+5Ew
SEG0070:0504					     ; SEG0070:1741w ...
SEG0070:0506		     db	   2
SEG0070:0507		     db	0E0h ; à
SEG0070:0508		     db	   0
SEG0070:0509		     db	 68h ; h
SEG0070:050A		     db	   1
SEG0070:050B		     db	0F0h ; ð
SEG0070:050C		     db	   2
SEG0070:050D		     db	   0
SEG0070:050E		     db	   9
SEG0070:050F		     db	   0
SEG0070:0510		     db	   2
SEG0070:0511		     db	   0
SEG0070:0512		     db	   0
SEG0070:0513		     db	   0
SEG0070:0514		     db	   0
SEG0070:0515		     db	   0
SEG0070:0516		     db	   0
SEG0070:0517		     db	   0
SEG0070:0518		     db	   0
SEG0070:0519		     db	   0
SEG0070:051A		     db	   0
SEG0070:051B		     db	   0
SEG0070:051C		     db	   0
SEG0070:051D		     db	   0
SEG0070:051E		     db	   0
SEG0070:051F		     db	   0
SEG0070:0520		     db	0FFh
SEG0070:0521		     db	0FFh
SEG0070:0522 SEC9	     db	0FFh		     ; DATA XREF: SEG0070:2BC1o
SEG0070:0522					     ; SEG0070:2BCBo ...
SEG0070:0523		     db	0FFh
SEG0070:0524		     db	0FFh
SEG0070:0525		     db	 90h ; 
SEG0070:0526 BDS3	     dw	offset BDS4	     ; DATA XREF: SEG0070:BDS2o
SEG0070:0528		     dw	70h
SEG0070:052A		     db	   0
SEG0070:052B word_52B	     dw	0		     ; DATA XREF: SEG0070:2BDDw
SEG0070:052B					     ; SEG0070:18A8o
SEG0070:052D		     db	   2
SEG0070:052E		     db	0FFh
SEG0070:052F		     db	   1
SEG0070:0530		     db	   0
SEG0070:0531		     db	   2
SEG0070:0532		     db	 40h ; @
SEG0070:0533		     db	   0
SEG0070:0534 _0534h	     db	68h		     ; DATA XREF: SEG0070:2B83o
SEG0070:0535		     db	   1
SEG0070:0536		     db	   0
SEG0070:0537		     db	   2
SEG0070:0538		     db	   0
SEG0070:0539		     db	   9
SEG0070:053A _53A	     dw	100h		     ; DATA XREF: SEG0070:2F6Br
SEG0070:053C		     db	   0
SEG0070:053D		     db	   0
SEG0070:053E		     db	   0
SEG0070:053F		     db	   0
SEG0070:0540		     db	   0
SEG0070:0541		     db	   0
SEG0070:0542		     db	'NO NAME    ',0
SEG0070:054E		     db	   3
SEG0070:054F		     db	 20h
SEG0070:0550		     db	   0
SEG0070:0551		     db	 28h ; (
SEG0070:0552		     db	   0
SEG0070:0553		     db	   0
SEG0070:0554		     db	   2
SEG0070:0555		     db	   1
SEG0070:0556		     db	   1
SEG0070:0557		     db	   0
SEG0070:0558		     db	   2
SEG0070:0559		     db	0E0h ; à
SEG0070:055A		     db	   0
SEG0070:055B		     db	 68h ; h
SEG0070:055C		     db	   1
SEG0070:055D		     db	0F0h ; ð
SEG0070:055E		     db	   2
SEG0070:055F		     db	   0
SEG0070:0560		     db	   9
SEG0070:0561		     db	   0
SEG0070:0562		     db	   2
SEG0070:0563		     db	   0
SEG0070:0564		     db	   0
SEG0070:0565		     db	   0
SEG0070:0566		     db	   0
SEG0070:0567		     db	   0
SEG0070:0568		     db	   0
SEG0070:0569		     db	   0
SEG0070:056A		     db	   0
SEG0070:056B		     db	   0
SEG0070:056C		     db	   0
SEG0070:056D		     db	   0
SEG0070:056E		     db	   0
SEG0070:056F		     db	   0
SEG0070:0570		     db	   0
SEG0070:0571		     db	   0
SEG0070:0572		     db	0FFh
SEG0070:0573		     db	0FFh
SEG0070:0574		     db	0FFh
SEG0070:0575		     db	0FFh
SEG0070:0576		     db	0FFh
SEG0070:0577		     db	 90h ; 
SEG0070:0578 BDS4	     dw	0FFFFh		     ; DATA XREF: SEG0070:BDS3o
SEG0070:057A		     dw	70h
SEG0070:057C		     db	   0
SEG0070:057D		     db	   0
SEG0070:057E FDRIVE4	     dw	200h		     ; DATA XREF: SEG0070:18AAo
SEG0070:0580		     db	0FFh
SEG0070:0581		     db	   1
SEG0070:0582		     db	   0
SEG0070:0583		     db	   2
SEG0070:0584		     db	 40h ; @
SEG0070:0585		     db	   0
SEG0070:0586		     db	 68h ; h
SEG0070:0587		     db	   1
SEG0070:0588		     db	   0
SEG0070:0589		     db	   2
SEG0070:058A		     db	   0
SEG0070:058B		     db	   9
SEG0070:058C		     db	   0
SEG0070:058D		     db	   1
SEG0070:058E		     db	   0
SEG0070:058F		     db	   0
SEG0070:0590		     db	   0
SEG0070:0591		     db	   0
SEG0070:0592		     db	   0
SEG0070:0593		     db	   0
SEG0070:0594		     db	'NO NAME    ',0
SEG0070:05A0		     db	   3
SEG0070:05A1		     db	 20h
SEG0070:05A2		     db	   0
SEG0070:05A3		     db	 28h ; (
SEG0070:05A4		     db	   0
SEG0070:05A5		     db	   0
SEG0070:05A6		     db	   2
SEG0070:05A7		     db	   1
SEG0070:05A8		     db	   1
SEG0070:05A9		     db	   0
SEG0070:05AA		     db	   2
SEG0070:05AB		     db	0E0h ; à
SEG0070:05AC		     db	   0
SEG0070:05AD		     db	 68h ; h
SEG0070:05AE		     db	   1
SEG0070:05AF		     db	0F0h ; ð
SEG0070:05B0		     db	   2
SEG0070:05B1		     db	   0
SEG0070:05B2		     db	   9
SEG0070:05B3		     db	   0
SEG0070:05B4		     db	   2
SEG0070:05B5		     db	   0
SEG0070:05B6		     db	   0
SEG0070:05B7		     db	   0
SEG0070:05B8		     db	   0
SEG0070:05B9		     db	   0
SEG0070:05BA		     db	   0
SEG0070:05BB		     db	   0
SEG0070:05BC		     db	   0
SEG0070:05BD		     db	   0
SEG0070:05BE		     db	   0
SEG0070:05BF		     db	   0
SEG0070:05C0		     db	   0
SEG0070:05C1 unk_5C1	     db	   0
SEG0070:05C2 unk_5C2	     db	   0
SEG0070:05C3		     db	   0
SEG0070:05C4		     db	0FFh
SEG0070:05C5		     dw	0FFFFh
SEG0070:05C7		     dw	0FFFFh
SEG0070:05C9 SM92	     db	3		     ; DATA XREF: GETBP+31o
SEG0070:05CA byte_5CA	     db	9
SEG0070:05CB		     db	112
SEG0070:05CC		     dw	1440
SEG0070:05CE		     db	2
SEG0070:05CF		     db	2
SEG0070:05D0 ALTAH	     db	0		     ; DATA XREF: CHRIN+2w
SEG0070:05D0					     ; CHRIN+1Bw ...
SEG0070:05D1 PRINTDEV	     db	0		     ; DATA XREF: SEG0070:0627w
SEG0070:05D1					     ; SEG0070:loc_83Br ...
SEG0070:05D2 WAIT_COUNT	     dw	50h		     ; DATA XREF: SEG0070:0842r
SEG0070:05D2					     ; SEG0070:0896r
SEG0070:05D4		     dw	50h
SEG0070:05D6		     dw	50h
SEG0070:05D8		     dw	50h
SEG0070:05DA DAYCNT	     dw	0		     ; DATA XREF: SEG0070:090Aw
SEG0070:05DA					     ; SEG0070:0971w ...
SEG0070:05DC ; ---------------------------------------------------------------------------
SEG0070:05DC
SEG0070:05DC STRATEGY:				     ; DATA XREF: SEG0070:0174o
SEG0070:05DC					     ; SEG0070:0186o ...
SEG0070:05DC		     mov     word ptr cs:PTRSAV, bx
SEG0070:05E1		     mov     word ptr cs:PTRSAV+2, es
SEG0070:05E6		     retf
SEG0070:05E7 ; ---------------------------------------------------------------------------
SEG0070:05E7
SEG0070:05E7 CON$IN:				     ; DATA XREF: SEG0070:0176o
SEG0070:05E7		     push    si
SEG0070:05E8
SEG0070:05E8 loc_5E8:
SEG0070:05E8		     mov     si, offset	CONTBL
SEG0070:05EB		     jmp     short ENTRY
SEG0070:05ED ; ---------------------------------------------------------------------------
SEG0070:05ED
SEG0070:05ED AUX0$IN:				     ; DATA XREF: SEG0070:0188o
SEG0070:05ED		     push    si
SEG0070:05EE		     push    ax
SEG0070:05EF		     xor     al, al
SEG0070:05F1		     jmp     short AUXENT
SEG0070:05F3 ; ---------------------------------------------------------------------------
SEG0070:05F3
SEG0070:05F3 AUX1$IN:				     ; DATA XREF: SEG0070:021Ao
SEG0070:05F3		     push    si
SEG0070:05F4		     push    ax
SEG0070:05F5		     mov     al, 1
SEG0070:05F7
SEG0070:05F7 loc_5F7:
SEG0070:05F7		     jmp     short AUXENT
SEG0070:05F9 ; ---------------------------------------------------------------------------
SEG0070:05F9
SEG0070:05F9 AUX2$IN:				     ; DATA XREF: SEG0070:022Co
SEG0070:05F9		     push    si
SEG0070:05FA		     push    ax
SEG0070:05FB		     mov     al, 2
SEG0070:05FD		     jmp     short AUXENT
SEG0070:05FF ; ---------------------------------------------------------------------------
SEG0070:05FF
SEG0070:05FF AUX3$IN:				     ; DATA XREF: SEG0070:023Eo
SEG0070:05FF		     push    si
SEG0070:0600		     push    ax
SEG0070:0601		     mov     al, 3
SEG0070:0603
SEG0070:0603 AUXENT:				     ; CODE XREF: SEG0070:05F1j
SEG0070:0603					     ; SEG0070:loc_5F7j ...
SEG0070:0603		     mov     si, offset	AUXTBL
SEG0070:0606		     jmp     short ENTRY1
SEG0070:0608 ; ---------------------------------------------------------------------------
SEG0070:0608
SEG0070:0608 PRN0$IN:				     ; DATA XREF: SEG0070:019Ao
SEG0070:0608		     push    si
SEG0070:0609		     push    ax
SEG0070:060A		     xor     ax, ax
SEG0070:060C		     jmp     short PRNENT
SEG0070:060E ; ---------------------------------------------------------------------------
SEG0070:060E
SEG0070:060E PRN1$IN:				     ; DATA XREF: SEG0070:01E4o
SEG0070:060E		     push    si
SEG0070:060F		     push    ax
SEG0070:0610		     xor     al, al
SEG0070:0612		     mov     ah, 1
SEG0070:0614		     jmp     short PRNENT
SEG0070:0616 ; ---------------------------------------------------------------------------
SEG0070:0616
SEG0070:0616 PRN2$IN:				     ; DATA XREF: SEG0070:01F6o
SEG0070:0616		     push    si
SEG0070:0617		     push    ax
SEG0070:0618		     mov     al, 1
SEG0070:061A		     mov     ah, 2
SEG0070:061C		     jmp     short PRNENT
SEG0070:061E ; ---------------------------------------------------------------------------
SEG0070:061E
SEG0070:061E PRN3$IN:				     ; DATA XREF: SEG0070:off_208o
SEG0070:061E		     push    si
SEG0070:061F		     push    ax
SEG0070:0620		     mov     al, 2
SEG0070:0622		     mov     ah, 3
SEG0070:0624
SEG0070:0624 PRNENT:				     ; CODE XREF: SEG0070:060Cj
SEG0070:0624					     ; SEG0070:0614j ...
SEG0070:0624		     mov     si, offset	PRNTBL
SEG0070:0627		     mov     cs:PRINTDEV, ah
SEG0070:062C		     jmp     short ENTRY1
SEG0070:062E ; ---------------------------------------------------------------------------
SEG0070:062E
SEG0070:062E TIM$IN:				     ; DATA XREF: SEG0070:01ACo
SEG0070:062E		     push    si
SEG0070:062F		     mov     si, offset	TIMTBL
SEG0070:0632		     jmp     short ENTRY
SEG0070:0634 ; ---------------------------------------------------------------------------
SEG0070:0634
SEG0070:0634 DSK$IN:				     ; CODE XREF: SEG0070:1A4Fj
SEG0070:0634					     ; DATA XREF: SEG0070:01BEo
SEG0070:0634		     push    si
SEG0070:0635		     mov     si, offset	DSKTBL
SEG0070:0638
SEG0070:0638 ENTRY:				     ; CODE XREF: SEG0070:05EBj
SEG0070:0638					     ; SEG0070:0632j
SEG0070:0638		     push    ax
SEG0070:0639
SEG0070:0639 ENTRY1:				     ; CODE XREF: SEG0070:0606j
SEG0070:0639					     ; SEG0070:062Cj
SEG0070:0639		     push    cx
SEG0070:063A		     push    dx
SEG0070:063B		     push    di
SEG0070:063C		     push    bp
SEG0070:063D		     push    ds
SEG0070:063E		     push    es
SEG0070:063F		     push    bx
SEG0070:0640		     mov     byte ptr cs:AUXNUM, al
SEG0070:0644		     lds     bx, cs:PTRSAV
SEG0070:0649		     assume ds:nothing
SEG0070:0649		     mov     al, [bx+1]
SEG0070:064C		     mov     ah, [bx+0Dh]
SEG0070:064F		     mov     cx, [bx+12h]
SEG0070:0652		     mov     dx, [bx+14h]
SEG0070:0655		     xchg    ax, di
SEG0070:0656		     mov     al, [bx+2]
SEG0070:0659		     cmp     al, cs:[si]
SEG0070:065C		     ja	     short CMDERR
SEG0070:065E		     cbw
SEG0070:065F		     shl     ax, 1
SEG0070:0661		     add     si, ax
SEG0070:0663		     xchg    ax, di
SEG0070:0664		     les     di, [bx+0Eh]
SEG0070:0667		     assume es:nothing
SEG0070:0667		     push    cs
SEG0070:0668		     pop     ds
SEG0070:0669		     assume ds:SEG0070
SEG0070:0669		     cld
SEG0070:066A		     jmp     word ptr [si+1]
SEG0070:066D ; ---------------------------------------------------------------------------
SEG0070:066D
SEG0070:066D BUS$EXIT:				     ; CODE XREF: SEG0070:CONBUSj
SEG0070:066D					     ; SEG0070:AUXBUSj	...
SEG0070:066D		     mov     ah, 3
SEG0070:066F		     jmp     short ERR1
SEG0070:0671 ; ---------------------------------------------------------------------------
SEG0070:0671
SEG0070:0671 CMDERR:				     ; CODE XREF: SEG0070:065Cj
SEG0070:0671					     ; SEG0070:PrnFuncErrj ...
SEG0070:0671		     mov     al, 3
SEG0070:0673 ; START OF	FUNCTION CHUNK FOR AUXIN
SEG0070:0673
SEG0070:0673 ERR$CNT:				     ; CODE XREF: AUXIN+Dj
SEG0070:0673					     ; SEG0070:07D4j ...
SEG0070:0673		     lds     bx, cs:PTRSAV
SEG0070:0678		     assume ds:nothing
SEG0070:0678		     sub     [bx+12h], cx
SEG0070:067B
SEG0070:067B ERR$EXIT:				     ; CODE XREF: SEG0070:0875j
SEG0070:067B					     ; SEG0070:0A35j ...
SEG0070:067B		     mov     ah, 81h ; ''
SEG0070:067D		     jmp     short ERR1
SEG0070:067D ; END OF FUNCTION CHUNK FOR AUXIN
SEG0070:067F ; ---------------------------------------------------------------------------
SEG0070:067F
SEG0070:067F EXIT$ZER:				     ; DATA XREF: SEG0070:0086o
SEG0070:067F		     lds     bx, ds:0B8h
SEG0070:0683		     xor     ax, ax
SEG0070:0685		     mov     [bx+12h], ax
SEG0070:0688
SEG0070:0688 EXIT:				     ; CODE XREF: SEG0070:CON$EXITj
SEG0070:0688					     ; SEG0070:EXVECj ...
SEG0070:0688		     mov     ah, 1
SEG0070:068A ; START OF	FUNCTION CHUNK FOR AUXIN
SEG0070:068A
SEG0070:068A ERR1:				     ; CODE XREF: SEG0070:066Fj
SEG0070:068A					     ; AUXIN-F1j
SEG0070:068A		     lds     bx, cs:PTRSAV
SEG0070:068F		     mov     [bx+3], ax
SEG0070:0692		     pop     bx
SEG0070:0693		     pop     es
SEG0070:0694		     pop     ds
SEG0070:0695		     pop     bp
SEG0070:0696		     pop     di
SEG0070:0697		     pop     dx
SEG0070:0698		     pop     cx
SEG0070:0699		     pop     ax
SEG0070:069A		     pop     si
SEG0070:069B		     retf
SEG0070:069B ; END OF FUNCTION CHUNK FOR AUXIN
SEG0070:069C
SEG0070:069C ; =============== S U B R O U T I N E =======================================
SEG0070:069C
SEG0070:069C
SEG0070:069C OUTCHR	     proc far		     ; CODE XREF: WRMSG+7p
SEG0070:069C					     ; DATA XREF: SEG0070:2B93o
SEG0070:069C		     push    ax
SEG0070:069D		     push    si
SEG0070:069E		     push    di
SEG0070:069F		     push    bp
SEG0070:06A0		     mov     bx, 7
SEG0070:06A3		     mov     ah, 0Eh
SEG0070:06A5		     int     10h	     ; - VIDEO - WRITE CHARACTER AND ADVANCE CURSOR (TTY WRITE)
SEG0070:06A5					     ; AL = character, BH = display page (alpha	modes)
SEG0070:06A5					     ; BL = foreground color (graphics modes)
SEG0070:06A7		     pop     bp
SEG0070:06A8		     pop     di
SEG0070:06A9		     pop     si
SEG0070:06AA		     pop     ax
SEG0070:06AB		     iret
SEG0070:06AB OUTCHR	     endp
SEG0070:06AB
SEG0070:06AC
SEG0070:06AC ; =============== S U B R O U T I N E =======================================
SEG0070:06AC
SEG0070:06AC
SEG0070:06AC GETDX	     proc near		     ; CODE XREF: AUXOPp
SEG0070:06AC					     ; GETBXp ...
SEG0070:06AC		     mov     dx, cs:AUXNUM
SEG0070:06B1		     retn
SEG0070:06B1 GETDX	     endp
SEG0070:06B1
SEG0070:06B2 ; ---------------------------------------------------------------------------
SEG0070:06B2
SEG0070:06B2 CON$READ:				     ; DATA XREF: SEG0070:_40ho
SEG0070:06B2		     jcxz    short CON$EXIT
SEG0070:06B4
SEG0070:06B4 CON$LOOP:				     ; CODE XREF: SEG0070:06B8j
SEG0070:06B4		     call    CHRIN
SEG0070:06B7		     stosb
SEG0070:06B8		     loop    CON$LOOP
SEG0070:06BA
SEG0070:06BA CON$EXIT:				     ; CODE XREF: SEG0070:CON$READj
SEG0070:06BA		     jmp     EXIT
SEG0070:06BD
SEG0070:06BD ; =============== S U B R O U T I N E =======================================
SEG0070:06BD
SEG0070:06BD
SEG0070:06BD CHRIN	     proc near		     ; CODE XREF: SEG0070:CON$LOOPp
SEG0070:06BD					     ; CHRIN+Ej
SEG0070:06BD		     xor     ax, ax
SEG0070:06BF		     xchg    al, ds:ALTAH
SEG0070:06C3		     or	     al, al
SEG0070:06C5		     jnz     short KEYRET
SEG0070:06C7		     int     16h	     ; KEYBOARD	- READ CHAR FROM BUFFER, WAIT IF EMPTY
SEG0070:06C7					     ; Return: AH = scan code, AL = character
SEG0070:06C9		     or	     ax, ax
SEG0070:06CB		     jz	     short CHRIN
SEG0070:06CD		     cmp     ax, 7200h
SEG0070:06D0		     jnz     short ALT15
SEG0070:06D2		     mov     al, 10h
SEG0070:06D4
SEG0070:06D4 ALT15:				     ; CODE XREF: CHRIN+13j
SEG0070:06D4		     or	     al, al
SEG0070:06D6		     jnz     short KEYRET
SEG0070:06D8		     mov     ds:ALTAH, ah
SEG0070:06DC
SEG0070:06DC KEYRET:				     ; CODE XREF: CHRIN+8j
SEG0070:06DC					     ; CHRIN+19j
SEG0070:06DC		     retn
SEG0070:06DC CHRIN	     endp
SEG0070:06DC
SEG0070:06DD ; ---------------------------------------------------------------------------
SEG0070:06DD
SEG0070:06DD CONBUSJ:				     ; CODE XREF: SEG0070:06F8j
SEG0070:06DD					     ; SEG0070:0703j
SEG0070:06DD		     jmp     short CONBUS
SEG0070:06DF ; ---------------------------------------------------------------------------
SEG0070:06DF		     nop
SEG0070:06E0
SEG0070:06E0 CON$RDND:				     ; CODE XREF: SEG0070:0715j
SEG0070:06E0					     ; DATA XREF: SEG0070:0042o
SEG0070:06E0		     mov     al, ds:ALTAH
SEG0070:06E3		     or	     al, al
SEG0070:06E5		     jz	     short RD1
SEG0070:06E7		     jmp     short RDEXIT
SEG0070:06E9 ; ---------------------------------------------------------------------------
SEG0070:06E9		     nop
SEG0070:06EA
SEG0070:06EA RD1:				     ; CODE XREF: SEG0070:06E5j
SEG0070:06EA		     mov     ah, 1
SEG0070:06EC		     int     16h	     ; KEYBOARD	- CHECK	BUFFER,	DO NOT CLEAR
SEG0070:06EC					     ; Return: ZF clear	if character in	buffer
SEG0070:06EC					     ; AH = scan code, AL = character
SEG0070:06EC					     ; ZF set if no character in buffer
SEG0070:06EE		     jz	     short nochr
SEG0070:06F0		     jmp     short gotchr
SEG0070:06F2 ; ---------------------------------------------------------------------------
SEG0070:06F2		     nop
SEG0070:06F3
SEG0070:06F3 nochr:				     ; CODE XREF: SEG0070:06EEj
SEG0070:06F3		     cmp     ds:fHaveK09, 0
SEG0070:06F8		     jz	     short CONBUSJ
SEG0070:06FA		     lds     bx, ds:PTRSAV
SEG0070:06FE
SEG0070:06FE loc_6FE:
SEG0070:06FE		     test    word ptr [bx+3], 400h
SEG0070:0703		     jz	     short CONBUSJ
SEG0070:0705		     mov     ax, 4100h
SEG0070:0708		     int     15h	     ; SYSTEM -	WAIT ON	EXTERNAL EVENT (CONVERTIBLE)
SEG0070:0708					     ; AL = condition type, BH = condition compare or mask value
SEG0070:0708					     ; BL = timeout value times	55 milliseconds, 00h means no timeout
SEG0070:0708					     ; DX = I/O	port address if	AL bit 4 set
SEG0070:070A		     jmp     short CONBUS
SEG0070:070C ; ---------------------------------------------------------------------------
SEG0070:070C		     nop
SEG0070:070D
SEG0070:070D gotchr:				     ; CODE XREF: SEG0070:06F0j
SEG0070:070D		     or	     ax, ax
SEG0070:070F		     jnz     short NOTBRK
SEG0070:0711		     mov     ah, 0
SEG0070:0713		     int     16h	     ; KEYBOARD	- READ CHAR FROM BUFFER, WAIT IF EMPTY
SEG0070:0713					     ; Return: AH = scan code, AL = character
SEG0070:0715		     jmp     short CON$RDND
SEG0070:0717 ; ---------------------------------------------------------------------------
SEG0070:0717
SEG0070:0717 NOTBRK:				     ; CODE XREF: SEG0070:070Fj
SEG0070:0717		     cmp     ax, 7200h
SEG0070:071A		     jnz     short RDEXIT
SEG0070:071C		     mov     al, 10h
SEG0070:071E
SEG0070:071E RDEXIT:				     ; CODE XREF: SEG0070:06E7j
SEG0070:071E					     ; SEG0070:071Aj ...
SEG0070:071E		     lds     bx, ds:PTRSAV
SEG0070:0722		     mov     [bx+0Dh], al
SEG0070:0725
SEG0070:0725 EXVEC:				     ; CODE XREF: SEG0070:CON$WRITj
SEG0070:0725		     jmp     EXIT
SEG0070:0728 ; ---------------------------------------------------------------------------
SEG0070:0728
SEG0070:0728 CONBUS:				     ; CODE XREF: SEG0070:CONBUSJj
SEG0070:0728					     ; SEG0070:070Aj
SEG0070:0728		     jmp     BUS$EXIT
SEG0070:072B ; ---------------------------------------------------------------------------
SEG0070:072B
SEG0070:072B CON$FLSH:				     ; DATA XREF: SEG0070:0046o
SEG0070:072B		     call    FLUSH
SEG0070:072E		     jmp     EXIT
SEG0070:0731
SEG0070:0731 ; =============== S U B R O U T I N E =======================================
SEG0070:0731
SEG0070:0731
SEG0070:0731 FLUSH	     proc near		     ; CODE XREF: SEG0070:CON$FLSHp
SEG0070:0731					     ; SWPDSK+13p
SEG0070:0731		     mov     ds:ALTAH, 0
SEG0070:0736
SEG0070:0736 FlLoop:				     ; CODE XREF: FLUSH+Fj
SEG0070:0736		     mov     ah, 1
SEG0070:0738		     int     16h	     ; KEYBOARD	- CHECK	BUFFER,	DO NOT CLEAR
SEG0070:0738					     ; Return: ZF clear	if character in	buffer
SEG0070:0738					     ; AH = scan code, AL = character
SEG0070:0738					     ; ZF set if no character in buffer
SEG0070:073A		     jz	     short FlDone
SEG0070:073C		     mov     ah, 0
SEG0070:073E		     int     16h	     ; KEYBOARD	- READ CHAR FROM BUFFER, WAIT IF EMPTY
SEG0070:073E					     ; Return: AH = scan code, AL = character
SEG0070:0740		     jmp     short FlLoop
SEG0070:0742 ; ---------------------------------------------------------------------------
SEG0070:0742
SEG0070:0742 FlDone:				     ; CODE XREF: FLUSH+9j
SEG0070:0742		     retn
SEG0070:0742 FLUSH	     endp
SEG0070:0742
SEG0070:0743 ; ---------------------------------------------------------------------------
SEG0070:0743
SEG0070:0743 CON$WRIT:				     ; DATA XREF: SEG0070:_48ho
SEG0070:0743					     ; SEG0070:_4Aho
SEG0070:0743		     jcxz    short EXVEC
SEG0070:0745
SEG0070:0745 CON$LP:				     ; CODE XREF: SEG0070:074Bj
SEG0070:0745		     mov     al, es:[di]
SEG0070:0748		     inc     di
SEG0070:0749		     int     29h	     ; DOS 2+ internal - FAST PUTCHAR
SEG0070:0749					     ; AL = character to display
SEG0070:074B		     loop    CON$LP
SEG0070:074D		     jmp     EXIT
SEG0070:0750 ; ---------------------------------------------------------------------------
SEG0070:0750
SEG0070:0750 CBREAK:				     ; DATA XREF: SEG0070:2B8Ao
SEG0070:0750		     mov     cs:ALTAH, 3
SEG0070:0756
SEG0070:0756 INTRET:				     ; DATA XREF: SEG0070:2B9Fo
SEG0070:0756					     ; SEG0070:resetintfo
SEG0070:0756		     iret
SEG0070:0756 ; ---------------------------------------------------------------------------
SEG0070:0757		     db	0
SEG0070:0758 ; ---------------------------------------------------------------------------
SEG0070:0758
SEG0070:0758 AUX$READ:				     ; DATA XREF: SEG0070:_58ho
SEG0070:0758		     jcxz    short EXVEC2
SEG0070:075A		     call    GETBX
SEG0070:075D		     xor     ax, ax
SEG0070:075F		     xchg    al, [bx]
SEG0070:0761		     or	     al, al
SEG0070:0763		     jnz     short AUX2
SEG0070:0765
SEG0070:0765 AUX1:				     ; CODE XREF: SEG0070:0769j
SEG0070:0765		     call    near ptr AUXIN
SEG0070:0768
SEG0070:0768 AUX2:				     ; CODE XREF: SEG0070:0763j
SEG0070:0768		     stosb
SEG0070:0769		     loop    AUX1
SEG0070:076B
SEG0070:076B EXVEC2:				     ; CODE XREF: SEG0070:AUX$READj
SEG0070:076B					     ; SEG0070:AUX$WRITj
SEG0070:076B		     jmp     EXIT
SEG0070:076E
SEG0070:076E ; =============== S U B R O U T I N E =======================================
SEG0070:076E
SEG0070:076E
SEG0070:076E AUXIN	     proc far		     ; CODE XREF: SEG0070:AUX1p
SEG0070:076E					     ; SEG0070:0794p
SEG0070:076E
SEG0070:076E ; FUNCTION	CHUNK AT SEG0070:0673 SIZE 0000000C BYTES
SEG0070:076E ; FUNCTION	CHUNK AT SEG0070:068A SIZE 00000012 BYTES
SEG0070:076E
SEG0070:076E		     mov     ah, 2
SEG0070:0770		     call    AUXOP
SEG0070:0773		     test    ah, 0Eh
SEG0070:0776		     jz	     short AROK
SEG0070:0778		     pop     ax
SEG0070:0779		     mov     al, 0B0h ;	'°'
SEG0070:077B		     jmp     ERR$CNT
SEG0070:077E ; ---------------------------------------------------------------------------
SEG0070:077E
SEG0070:077E AROK:				     ; CODE XREF: AUXIN+8j
SEG0070:077E		     retn
SEG0070:077E AUXIN	     endp
SEG0070:077E
SEG0070:077F ; ---------------------------------------------------------------------------
SEG0070:077F
SEG0070:077F AUX$RDND:				     ; DATA XREF: SEG0070:_5Aho
SEG0070:077F		     call    GETBX
SEG0070:0782		     mov     al, [bx]
SEG0070:0784		     or	     al, al
SEG0070:0786		     jnz     short AUXRDX
SEG0070:0788		     call    AUXSTAT
SEG0070:078B		     test    ah, 1
SEG0070:078E		     jz	     short AUXBUS
SEG0070:0790		     test    al, 20h
SEG0070:0792		     jz	     short AUXBUS
SEG0070:0794		     call    near ptr AUXIN
SEG0070:0797		     call    GETBX
SEG0070:079A		     mov     [bx], al
SEG0070:079C
SEG0070:079C AUXRDX:				     ; CODE XREF: SEG0070:0786j
SEG0070:079C		     jmp     RDEXIT
SEG0070:079F ; ---------------------------------------------------------------------------
SEG0070:079F
SEG0070:079F AUXBUS:				     ; CODE XREF: SEG0070:078Ej
SEG0070:079F					     ; SEG0070:0792j ...
SEG0070:079F		     jmp     BUS$EXIT
SEG0070:07A2 ; ---------------------------------------------------------------------------
SEG0070:07A2
SEG0070:07A2 AUX$WRST:				     ; DATA XREF: SEG0070:_64ho
SEG0070:07A2		     call    AUXSTAT
SEG0070:07A5		     test    al, 20h
SEG0070:07A7		     jz	     short AUXBUS
SEG0070:07A9		     test    ah, 20h
SEG0070:07AC		     jz	     short AUXBUS
SEG0070:07AE
SEG0070:07AE loc_7AE:
SEG0070:07AE		     jmp     EXIT
SEG0070:07B1
SEG0070:07B1 ; =============== S U B R O U T I N E =======================================
SEG0070:07B1
SEG0070:07B1
SEG0070:07B1 AUXSTAT	     proc near		     ; CODE XREF: SEG0070:0788p
SEG0070:07B1					     ; SEG0070:AUX$WRSTp
SEG0070:07B1		     mov     ah, 3
SEG0070:07B1 AUXSTAT	     endp
SEG0070:07B1
SEG0070:07B3
SEG0070:07B3 ; =============== S U B R O U T I N E =======================================
SEG0070:07B3
SEG0070:07B3
SEG0070:07B3 AUXOP	     proc near		     ; CODE XREF: AUXIN+2p
SEG0070:07B3					     ; SEG0070:07CAp
SEG0070:07B3		     call    GETDX
SEG0070:07B6		     int     14h
SEG0070:07B8		     retn
SEG0070:07B8 AUXOP	     endp
SEG0070:07B8
SEG0070:07B9 ; ---------------------------------------------------------------------------
SEG0070:07B9
SEG0070:07B9 AUX$FLSH:				     ; DATA XREF: SEG0070:005Eo
SEG0070:07B9		     call    GETBX
SEG0070:07BC		     mov     byte ptr [bx], 0
SEG0070:07BF
SEG0070:07BF loc_7BF:
SEG0070:07BF		     jmp     EXIT
SEG0070:07C2 ; ---------------------------------------------------------------------------
SEG0070:07C2
SEG0070:07C2 AUX$WRIT:				     ; DATA XREF: SEG0070:_60ho
SEG0070:07C2					     ; SEG0070:0062o
SEG0070:07C2		     jcxz    short EXVEC2
SEG0070:07C4
SEG0070:07C4 AUX$LOOP:				     ; CODE XREF: SEG0070:AWOKj
SEG0070:07C4		     mov     al, es:[di]
SEG0070:07C7		     inc     di
SEG0070:07C8		     mov     ah, 1
SEG0070:07CA		     call    AUXOP
SEG0070:07CD		     test    ah, 80h
SEG0070:07D0		     jz	     short AWOK
SEG0070:07D2		     mov     al, 0Ah
SEG0070:07D4		     jmp     ERR$CNT
SEG0070:07D7 ; ---------------------------------------------------------------------------
SEG0070:07D7
SEG0070:07D7 AWOK:				     ; CODE XREF: SEG0070:07D0j
SEG0070:07D7		     loop    AUX$LOOP
SEG0070:07D9		     jmp     EXIT
SEG0070:07DC
SEG0070:07DC ; =============== S U B R O U T I N E =======================================
SEG0070:07DC
SEG0070:07DC
SEG0070:07DC GETBX	     proc near		     ; CODE XREF: SEG0070:075Ap
SEG0070:07DC					     ; SEG0070:AUX$RDNDp ...
SEG0070:07DC		     call    GETDX
SEG0070:07DF		     mov     bx, dx
SEG0070:07E1		     add     bx, offset	AUXBUF
SEG0070:07E5		     retn
SEG0070:07E5 GETBX	     endp
SEG0070:07E5
SEG0070:07E6 ; ---------------------------------------------------------------------------
SEG0070:07E6
SEG0070:07E6 PRN$WRIT:				     ; DATA XREF: SEG0070:008Eo
SEG0070:07E6					     ; SEG0070:0090o
SEG0070:07E6		     jcxz    short EXVEC3
SEG0070:07E8
SEG0070:07E8 PRN$LOOP:				     ; CODE XREF: SEG0070:07F6j
SEG0070:07E8		     mov     bx, 2
SEG0070:07EB
SEG0070:07EB PRN$out:				     ; CODE XREF: SEG0070:07FDj
SEG0070:07EB		     mov     al, es:[di]
SEG0070:07EE		     inc     di
SEG0070:07EF		     xor     ah, ah
SEG0070:07F1		     call    PRNOP
SEG0070:07F4		     jnz     short PrRetry
SEG0070:07F6		     loop    PRN$LOOP
SEG0070:07F8
SEG0070:07F8 EXVEC3:				     ; CODE XREF: SEG0070:PRN$WRITj
SEG0070:07F8					     ; SEG0070:0811j
SEG0070:07F8		     jmp     EXIT
SEG0070:07FB ; ---------------------------------------------------------------------------
SEG0070:07FB
SEG0070:07FB PrRetry:				     ; CODE XREF: SEG0070:07F4j
SEG0070:07FB		     dec     di
SEG0070:07FC		     dec     bx
SEG0070:07FD		     jnz     short PRN$out
SEG0070:07FF
SEG0070:07FF PMESSG:				     ; CODE XREF: SEG0070:0805j
SEG0070:07FF					     ; SEG0070:_80Chj
SEG0070:07FF		     jmp     ERR$CNT
SEG0070:0802 ; ---------------------------------------------------------------------------
SEG0070:0802
SEG0070:0802 PRN$STAT:				     ; DATA XREF: SEG0070:0092o
SEG0070:0802		     call    PRNSTAT
SEG0070:0805		     jnz     short PMESSG
SEG0070:0807		     mov     al, 9
SEG0070:0809		     test    ah, 20h
SEG0070:080C
SEG0070:080C _80Ch:				     ; DATA XREF: SEG0070:2C50r
SEG0070:080C		     jnz     short PMESSG
SEG0070:080E		     test    ah, 80h
SEG0070:0811		     jnz     short EXVEC3
SEG0070:0813		     jmp     BUS$EXIT
SEG0070:0816
SEG0070:0816 ; =============== S U B R O U T I N E =======================================
SEG0070:0816
SEG0070:0816
SEG0070:0816 PRNSTAT	     proc near		     ; CODE XREF: SEG0070:PRN$STATp
SEG0070:0816					     ; SEG0070:PRN$GetStatp
SEG0070:0816		     mov     ah, 2
SEG0070:0816 PRNSTAT	     endp
SEG0070:0816
SEG0070:0818
SEG0070:0818 ; =============== S U B R O U T I N E =======================================
SEG0070:0818
SEG0070:0818
SEG0070:0818 PRNOP	     proc near		     ; CODE XREF: SEG0070:07F1p
SEG0070:0818					     ; SEG0070:0858p
SEG0070:0818		     call    GETDX
SEG0070:081B		     int     17h
SEG0070:081D
SEG0070:081D loc_81D:
SEG0070:081D		     test    ah, 8
SEG0070:0820		     jz	     short CHECKNOTREADY
SEG0070:0822		     mov     al, 9
SEG0070:0824		     test    ah, 20h
SEG0070:0827		     jnz     short RET1
SEG0070:0829		     inc     al
SEG0070:082B
SEG0070:082B RET1:				     ; CODE XREF: PRNOP+Fj
SEG0070:082B		     retn
SEG0070:082C ; ---------------------------------------------------------------------------
SEG0070:082C
SEG0070:082C CHECKNOTREADY:			     ; CODE XREF: PRNOP+8j
SEG0070:082C		     mov     al, 2
SEG0070:082E		     test    ah, 1
SEG0070:0831
SEG0070:0831 locret_831:
SEG0070:0831		     retn
SEG0070:0831 PRNOP	     endp
SEG0070:0831
SEG0070:0832 ; ---------------------------------------------------------------------------
SEG0070:0832
SEG0070:0832 PRN$TilBusy:			     ; DATA XREF: SEG0070:009Eo
SEG0070:0832		     push    ds
SEG0070:0833		     push    es
SEG0070:0834		     pop     ds
SEG0070:0835		     mov     si, di
SEG0070:0837
SEG0070:0837 PRN$TilBLoop:			     ; CODE XREF: SEG0070:loc_85Dj
SEG0070:0837		     push    cx
SEG0070:0838		     push    bx
SEG0070:0839		     xor     bx, bx
SEG0070:083B
SEG0070:083B loc_83B:
SEG0070:083B		     mov     bl, cs:PRINTDEV
SEG0070:0840
SEG0070:0840 loc_840:
SEG0070:0840		     shl     bx, 1
SEG0070:0842		     mov     cx, cs:WAIT_COUNT[bx]
SEG0070:0847
SEG0070:0847 loc_847:
SEG0070:0847		     pop     bx
SEG0070:0848
SEG0070:0848 PRN$GetStat:			     ; CODE XREF: SEG0070:loc_850j
SEG0070:0848		     call    PRNSTAT
SEG0070:084B		     jnz     short PRN$BPERR
SEG0070:084D
SEG0070:084D loc_84D:
SEG0070:084D		     test    ah, 80h
SEG0070:0850
SEG0070:0850 loc_850:
SEG0070:0850		     loope   PRN$GetStat
SEG0070:0852		     pop     cx
SEG0070:0853		     jz	     short PRN$BErr
SEG0070:0855		     lodsb
SEG0070:0856
SEG0070:0856 loc_856:
SEG0070:0856		     xor     ah, ah
SEG0070:0858		     call    PRNOP
SEG0070:085B		     jnz     short PRN$BErr
SEG0070:085D
SEG0070:085D loc_85D:
SEG0070:085D		     loop    PRN$TilBLoop
SEG0070:085F		     pop     ds
SEG0070:0860		     lds     bx, cs:PTRSAV
SEG0070:0865		     sub     [bx+12h], cx
SEG0070:0868		     jmp     EXIT
SEG0070:086B ; ---------------------------------------------------------------------------
SEG0070:086B
SEG0070:086B PRN$BPERR:				     ; CODE XREF: SEG0070:084Bj
SEG0070:086B		     pop     cx
SEG0070:086C
SEG0070:086C PRN$BErr:				     ; CODE XREF: SEG0070:0853j
SEG0070:086C					     ; SEG0070:085Bj
SEG0070:086C		     pop     ds
SEG0070:086D		     lds     bx, cs:PTRSAV
SEG0070:0872		     sub     [bx+12h], cx
SEG0070:0875		     jmp     ERR$EXIT
SEG0070:0878 ; ---------------------------------------------------------------------------
SEG0070:0878
SEG0070:0878 PRN$GenIOCTL:			     ; DATA XREF: SEG0070:_A4ho
SEG0070:0878		     les     di, ds:PTRSAV
SEG0070:087C		     cmp     byte ptr es:[di+0Dh], 5
SEG0070:0881		     jz	     short PrnFunc_OK
SEG0070:0883
SEG0070:0883 PrnFuncErr:			     ; CODE XREF: SEG0070:loc_8A0j
SEG0070:0883		     jmp     CMDERR
SEG0070:0886 ; ---------------------------------------------------------------------------
SEG0070:0886
SEG0070:0886 PrnFunc_OK:			     ; CODE XREF: SEG0070:0881j
SEG0070:0886		     mov     al, es:[di+0Eh]
SEG0070:088A		     les     di, es:[di+13h]
SEG0070:088E		     xor     bx, bx
SEG0070:0890		     mov     bl, ds:PRINTDEV
SEG0070:0894		     shl     bx, 1
SEG0070:0896		     mov     cx, ds:WAIT_COUNT[bx]
SEG0070:089A		     cmp     al, 65h ; 'e'
SEG0070:089C		     jz	     short PrnGetCount
SEG0070:089E		     cmp     al, 45h ; 'E'
SEG0070:08A0
SEG0070:08A0 loc_8A0:
SEG0070:08A0		     jnz     short PrnFuncErr
SEG0070:08A2		     mov     cx, es:[di]
SEG0070:08A5
SEG0070:08A5 PrnGetCount:			     ; CODE XREF: SEG0070:089Cj
SEG0070:08A5		     mov     [bx+5D2h],	cx
SEG0070:08A9		     mov     es:[di], cx
SEG0070:08AC		     jmp     EXIT
SEG0070:08AC ; ---------------------------------------------------------------------------
SEG0070:08AF		     db	0
SEG0070:08B0 HaveCMOSClock   db	0		     ; DATA XREF: SEG0070:08C9r
SEG0070:08B0					     ; SEG0070:090Fr ...
SEG0070:08B1 base_century    db	19		     ; DATA XREF: SEG0070:274Ew
SEG0070:08B1					     ; SEG0070:century20w ...
SEG0070:08B2 base_year	     db	80		     ; DATA XREF: SEG0070:2754w
SEG0070:08B2					     ; SEG0070:2763w ...
SEG0070:08B3 month_tab	     db	31		     ; DATA XREF: SEG0070:27CBo
SEG0070:08B4 month_tab_1     db	28		     ; DATA XREF: SEG0070:Leapyearw
SEG0070:08B4					     ; SEG0070:Month_donew
SEG0070:08B5		     db	31
SEG0070:08B6		     db	30
SEG0070:08B7		     db	31
SEG0070:08B8		     db	30
SEG0070:08B9		     db	31
SEG0070:08BA		     db	31
SEG0070:08BB		     db	30
SEG0070:08BC		     db	31
SEG0070:08BD		     db	30
SEG0070:08BE		     db	31
SEG0070:08BF BinToBCD	     dw	0		     ; DATA XREF: SEG0070:08D4r
SEG0070:08BF					     ; SEG0070:08DFr ...
SEG0070:08C1 DaycntToDay     dw	0		     ; DATA XREF: SEG0070:0916r
SEG0070:08C1					     ; SEG0070:2EB5w
SEG0070:08C3 TimeToTicks     dw	offset time_to_ticks ; DATA XREF: READ_REAL_TIME+34r
SEG0070:08C5 ; ---------------------------------------------------------------------------
SEG0070:08C5
SEG0070:08C5 TIM$WRIT:				     ; DATA XREF: SEG0070:_78ho
SEG0070:08C5					     ; SEG0070:_7Aho
SEG0070:08C5		     mov     ax, es:[di]
SEG0070:08C8		     push    ax
SEG0070:08C9		     cmp     ds:HaveCMOSClock, 0
SEG0070:08CE		     jz	     short No_CMOS_1
SEG0070:08D0		     mov     al, es:[di+3]
SEG0070:08D4		     call    cs:BinToBCD
SEG0070:08D9		     mov     ch, al
SEG0070:08DB		     mov     al, es:[di+2]
SEG0070:08DF		     call    cs:BinToBCD
SEG0070:08E4		     mov     cl, al
SEG0070:08E6		     mov     al, es:[di+5]
SEG0070:08EA		     call    cs:BinToBCD
SEG0070:08EF		     mov     dh, al
SEG0070:08F1		     mov     dl, 0
SEG0070:08F3		     cli
SEG0070:08F4		     mov     ax, 300h
SEG0070:08F7		     int     1Ah	     ; CLOCK - SET REAL	TIME CLOCK (AT,XT286,CONV,PS)
SEG0070:08F7					     ; CH = hours in BCD, CL = minutes in BCD
SEG0070:08F7					     ;	DH = seconds in	BCD,DL = 01h if	daylight savings, 00h if standard time
SEG0070:08F7					     ; Return: CMOS clock set
SEG0070:08F9		     sti
SEG0070:08FA
SEG0070:08FA No_CMOS_1:				     ; CODE XREF: SEG0070:08CEj
SEG0070:08FA		     mov     cx, es:[di+2]
SEG0070:08FE		     mov     dx, es:[di+4]
SEG0070:0902		     call    time_to_ticks
SEG0070:0905		     cli
SEG0070:0906		     mov     ah, 1
SEG0070:0908		     int     1Ah	     ; CLOCK - SET TIME	OF DAY
SEG0070:0908					     ; CX:DX = clock count
SEG0070:0908					     ; Return: time of day set
SEG0070:090A		     pop     ds:DAYCNT
SEG0070:090E		     sti
SEG0070:090F		     cmp     ds:HaveCMOSClock, 0
SEG0070:0914		     jz	     short No_CMOS_2
SEG0070:0916		     call    cs:DaycntToDay
SEG0070:091B		     cli
SEG0070:091C		     mov     ah, 5
SEG0070:091E		     int     1Ah	     ; CLOCK - SET DATE	IN REAL	TIME CLOCK (AT,XT286,CONV,PS)
SEG0070:091E					     ; DL = day	in BCD,	DH = month in BCD, CL =	year in	BCD
SEG0070:091E					     ; CH = century (19h or 20h)
SEG0070:091E					     ; Return: CMOS clock set
SEG0070:0920		     sti
SEG0070:0921
SEG0070:0921 No_CMOS_2:				     ; CODE XREF: SEG0070:0914j
SEG0070:0921		     jmp     EXIT
SEG0070:0924
SEG0070:0924 ; =============== S U B R O U T I N E =======================================
SEG0070:0924
SEG0070:0924
SEG0070:0924 time_to_ticks   proc near		     ; CODE XREF: SEG0070:0902p
SEG0070:0924					     ; READ_REAL_TIME+34p
SEG0070:0924					     ; DATA XREF: ...
SEG0070:0924		     mov     al, 60
SEG0070:0926		     mul     ch
SEG0070:0928		     mov     ch, 0
SEG0070:092A		     add     ax, cx
SEG0070:092C		     mov     cx, 6000
SEG0070:092F		     mov     bx, dx
SEG0070:0931		     mul     cx
SEG0070:0933		     mov     cx, ax
SEG0070:0935		     mov     al, 100
SEG0070:0937		     mul     bh
SEG0070:0939		     add     cx, ax
SEG0070:093B		     adc     dx, 0
SEG0070:093E		     mov     bh, 0
SEG0070:0940		     add     cx, bx
SEG0070:0942
SEG0070:0942 loc_942:
SEG0070:0942		     adc     dx, 0
SEG0070:0945		     xchg    ax, dx
SEG0070:0946		     xchg    ax, cx
SEG0070:0947		     mov     bx, 59659
SEG0070:094A		     mul     bx
SEG0070:094C		     xchg    dx, cx
SEG0070:094E		     xchg    ax, dx
SEG0070:094F
SEG0070:094F loc_94F:
SEG0070:094F		     mul     bx
SEG0070:0951		     add     ax, cx
SEG0070:0953		     adc     dx, 0
SEG0070:0956		     xchg    ax, dx
SEG0070:0957		     mov     bx, 5
SEG0070:095A
SEG0070:095A loc_95A:
SEG0070:095A		     div     bl
SEG0070:095C		     mov     cl, al
SEG0070:095E		     mov     ch, 0
SEG0070:0960
SEG0070:0960 loc_960:
SEG0070:0960		     mov     al, ah
SEG0070:0962		     cbw
SEG0070:0963		     xchg    ax, dx
SEG0070:0964		     div     bx
SEG0070:0966		     mov     dx, ax
SEG0070:0968		     retn
SEG0070:0968 time_to_ticks   endp
SEG0070:0968
SEG0070:0969 ; ---------------------------------------------------------------------------
SEG0070:0969
SEG0070:0969 TIM$READ:				     ; DATA XREF: SEG0070:_70ho
SEG0070:0969		     xor     ah, ah
SEG0070:096B		     int     1Ah	     ; CLOCK - GET TIME	OF DAY
SEG0070:096B					     ; Return: CX:DX = clock count
SEG0070:096B					     ; AL = 00h	if clock was read or written (via AH=0,1) since	the previous
SEG0070:096B					     ; midnight
SEG0070:096B					     ; Otherwise, AL > 0
SEG0070:096D		     or	     al, al
SEG0070:096F		     jz	     short noroll1
SEG0070:0971		     inc     ds:DAYCNT
SEG0070:0975
SEG0070:0975 noroll1:				     ; CODE XREF: SEG0070:096Fj
SEG0070:0975		     mov     si, ds:DAYCNT
SEG0070:0979		     mov     ax, cx
SEG0070:097B		     mov     bx, dx
SEG0070:097D		     shl     dx, 1
SEG0070:097F		     rcl     cx, 1
SEG0070:0981		     shl     dx, 1
SEG0070:0983		     rcl     cx, 1
SEG0070:0985		     add     dx, bx
SEG0070:0987		     adc     ax, cx
SEG0070:0989		     xchg    ax, dx
SEG0070:098A		     mov     cx, 59659
SEG0070:098D		     div     cx
SEG0070:098F		     mov     bx, ax
SEG0070:0991		     xor     ax, ax
SEG0070:0993		     div     cx
SEG0070:0995		     mov     dx, bx
SEG0070:0997		     mov     cx, 200
SEG0070:099A		     div     cx
SEG0070:099C		     cmp     dl, 100
SEG0070:099F		     jb	     short noadj
SEG0070:09A1		     sub     dl, 100
SEG0070:09A4
SEG0070:09A4 noadj:				     ; CODE XREF: SEG0070:099Fj
SEG0070:09A4		     cmc
SEG0070:09A5		     mov     bl, dl
SEG0070:09A7		     rcl     ax, 1
SEG0070:09A9		     mov     dl, 0
SEG0070:09AB		     rcl     dx, 1
SEG0070:09AD		     mov     cx, 60
SEG0070:09B0		     div     cx
SEG0070:09B2		     mov     bh, dl
SEG0070:09B4		     div     cl
SEG0070:09B6		     xchg    al, ah
SEG0070:09B8		     push    ax
SEG0070:09B9		     mov     ax, si
SEG0070:09BB		     stosw
SEG0070:09BC		     pop     ax
SEG0070:09BD		     stosw
SEG0070:09BE		     mov     ax, bx
SEG0070:09C0		     stosw
SEG0070:09C1		     jmp     EXIT
SEG0070:09C4 ; ---------------------------------------------------------------------------
SEG0070:09C4
SEG0070:09C4 MEDIA$CHK:				     ; DATA XREF: SEG0070:0006o
SEG0070:09C4		     call    SetDrive
SEG0070:09C7		     cmp     cs:Secrete_Code, 6A6Bh
SEG0070:09CE		     jnz     short media$done
SEG0070:09D0		     mov     si, 1
SEG0070:09D3		     test    word ptr [di+29h],	100h
SEG0070:09D8		     jz	     short WeAreNotFakingIt
SEG0070:09DA		     and     word ptr [di+29h],	0FEFFh
SEG0070:09DF		     mov     cs:TIM_DRV, 0FFh
SEG0070:09E5		     test    word ptr [di+29h],	1
SEG0070:09EA		     jz	     short WeHaveAFloppy
SEG0070:09EC		     mov     si, 0FFFFh
SEG0070:09EF		     jmp     short media$done
SEG0070:09F1 ; ---------------------------------------------------------------------------
SEG0070:09F1
SEG0070:09F1 WeAreNotFakingIt:			     ; CODE XREF: SEG0070:09D8j
SEG0070:09F1		     test    word ptr [di+29h],	1
SEG0070:09F6		     jnz     short media$done
SEG0070:09F8
SEG0070:09F8 WeHaveAFloppy:			     ; CODE XREF: SEG0070:09EAj
SEG0070:09F8		     xor     si, si
SEG0070:09FA
SEG0070:09FA Media_Patch:			     ; DATA XREF: SEG0070:2A9Co
SEG0070:09FA		     call    MediaCheck
SEG0070:09FD		     jb	     short ERR$EXITJ
SEG0070:09FF		     call    HasChange
SEG0070:0A02		     jnz     short media$done
SEG0070:0A04		     mov     si, 1
SEG0070:0A07		     mov     al, cs:TIM_DRV
SEG0070:0A0B		     cmp     al, [di+4]
SEG0070:0A0E		     jnz     short Media$Unk
SEG0070:0A10		     call    CHECK_TIME_OF_ACCESS
SEG0070:0A13		     jmp     short media$done
SEG0070:0A15 ; ---------------------------------------------------------------------------
SEG0070:0A15
SEG0070:0A15 Media$Unk:				     ; CODE XREF: SEG0070:0A0Ej
SEG0070:0A15		     dec     si
SEG0070:0A16
SEG0070:0A16 media$done:			     ; CODE XREF: SEG0070:09CEj
SEG0070:0A16					     ; SEG0070:09EFj ...
SEG0070:0A16		     les     bx, cs:PTRSAV
SEG0070:0A1B		     mov     es:[bx+0Eh], si
SEG0070:0A1F		     or	     si, si
SEG0070:0A21		     js	     short INIT_PATCH
SEG0070:0A23		     jmp     EXIT
SEG0070:0A26 ; ---------------------------------------------------------------------------
SEG0070:0A26
SEG0070:0A26 INIT_PATCH:			     ; CODE XREF: SEG0070:0A21j
SEG0070:0A26					     ; DATA XREF: SEG0070:2AB4o
SEG0070:0A26		     call    Media_Set_VID
SEG0070:0A29		     mov     cs:TIM_DRV, 0FFh
SEG0070:0A2F
SEG0070:0A2F VOLIDOK:
SEG0070:0A2F		     jmp     EXIT
SEG0070:0A32 ; ---------------------------------------------------------------------------
SEG0070:0A32
SEG0070:0A32 ERR$EXITJ:				     ; CODE XREF: SEG0070:09FDj
SEG0070:0A32					     ; SEG0070:ERR$EXITJ2j
SEG0070:0A32		     call    MAPERROR
SEG0070:0A35		     jmp     ERR$EXIT
SEG0070:0A38
SEG0070:0A38 ; =============== S U B R O U T I N E =======================================
SEG0070:0A38
SEG0070:0A38
SEG0070:0A38 CHECK_TIME_OF_ACCESS proc near	     ; CODE XREF: SEG0070:0A10p
SEG0070:0A38					     ; MediaCheck+2Cp
SEG0070:0A38		     mov     si, 1
SEG0070:0A3B		     xor     ah, ah
SEG0070:0A3D		     int     1Ah	     ; CLOCK - GET TIME	OF DAY
SEG0070:0A3D					     ; Return: CX:DX = clock count
SEG0070:0A3D					     ; AL = 00h	if clock was read or written (via AH=0,1) since	the previous
SEG0070:0A3D					     ; midnight
SEG0070:0A3D					     ; Otherwise, AL > 0
SEG0070:0A3F		     shr     al, 1
SEG0070:0A41		     adc     cs:DAYCNT,	0
SEG0070:0A47		     mov     ax, [di+4Dh]
SEG0070:0A4A		     sub     dx, ax
SEG0070:0A4C		     mov     ax, [di+4Fh]
SEG0070:0A4F		     sbb     cx, ax
SEG0070:0A51		     jnz     short TimeCheck_Unk
SEG0070:0A53		     or	     dx, dx
SEG0070:0A55		     jnz     short TimePassed
SEG0070:0A57		     inc     cs:AccessCount
SEG0070:0A5C		     cmp     cs:AccessCount, 5
SEG0070:0A62		     jb	     short TimeCheck_Ret
SEG0070:0A64		     dec     cs:AccessCount
SEG0070:0A69		     jmp     short TimeCheck_Unk
SEG0070:0A6B ; ---------------------------------------------------------------------------
SEG0070:0A6B
SEG0070:0A6B TimePassed:			     ; CODE XREF: CHECK_TIME_OF_ACCESS+1Dj
SEG0070:0A6B		     cmp     dx, 24h ; '$'
SEG0070:0A6E		     jbe     short TimeCheck_Ret
SEG0070:0A70
SEG0070:0A70 TimeCheck_Unk:			     ; CODE XREF: CHECK_TIME_OF_ACCESS+19j
SEG0070:0A70					     ; CHECK_TIME_OF_ACCESS+31j
SEG0070:0A70		     dec     si
SEG0070:0A71
SEG0070:0A71 TimeCheck_Ret:			     ; CODE XREF: CHECK_TIME_OF_ACCESS+2Aj
SEG0070:0A71					     ; CHECK_TIME_OF_ACCESS+36j
SEG0070:0A71		     retn
SEG0070:0A71 CHECK_TIME_OF_ACCESS endp
SEG0070:0A71
SEG0070:0A72 ; ---------------------------------------------------------------------------
SEG0070:0A72
SEG0070:0A72 ERR$EXITJ2:			     ; CODE XREF: SEG0070:0A84j
SEG0070:0A72		     jmp     short ERR$EXITJ
SEG0070:0A74 ; ---------------------------------------------------------------------------
SEG0070:0A74
SEG0070:0A74 GET$BPB:				     ; DATA XREF: SEG0070:_08ho
SEG0070:0A74		     mov     ah, es:[di]
SEG0070:0A77		     call    SetDrive
SEG0070:0A7A		     test    word ptr [di+29h],	1
SEG0070:0A7F		     jnz     short ALREADY_GOTBPB
SEG0070:0A81		     call    GETBP
SEG0070:0A84		     jb	     short ERR$EXITJ2
SEG0070:0A86
SEG0070:0A86 SET_PATCH:				     ; DATA XREF: SEG0070:2AA4o
SEG0070:0A86		     call    set_volume_id
SEG0070:0A89
SEG0070:0A89 ALREADY_GOTBPB:			     ; CODE XREF: SEG0070:0A7Fj
SEG0070:0A89		     add     di, 6
SEG0070:0A8C
SEG0070:0A8C SetPTRSAV:				     ; CODE XREF: SEG0070:1A24j
SEG0070:0A8C		     les     bx, cs:PTRSAV
SEG0070:0A91		     mov     es:[bx+0Dh], ah
SEG0070:0A95		     mov     es:[bx+12h], di
SEG0070:0A99		     mov     word ptr es:[bx+14h], ds
SEG0070:0A9D		     jmp     EXIT
SEG0070:0AA0
SEG0070:0AA0 ; =============== S U B R O U T I N E =======================================
SEG0070:0AA0
SEG0070:0AA0
SEG0070:0AA0 GETBP	     proc near		     ; CODE XREF: SEG0070:0A81p
SEG0070:0AA0					     ; SEG0070:1343p ...
SEG0070:0AA0		     test    word ptr [di+29h],	5
SEG0070:0AA5		     jz	     short GETBP1
SEG0070:0AA7		     jmp     GETRET_EXIT
SEG0070:0AAA ; ---------------------------------------------------------------------------
SEG0070:0AAA
SEG0070:0AAA GETBP1:				     ; CODE XREF: GETBP+5j
SEG0070:0AAA		     push    cx
SEG0070:0AAB		     push    dx
SEG0070:0AAC		     push    es
SEG0070:0AAD		     push    bx
SEG0070:0AAE		     call    ReadBootSec
SEG0070:0AB1		     jb	     short GetBP_Err_Ret
SEG0070:0AB3
SEG0070:0AB3 NoRdErr:
SEG0070:0AB3		     cmp     bx, 0
SEG0070:0AB6		     jnz     short DoFatBPB
SEG0070:0AB8		     call    MovBPB
SEG0070:0ABB		     jmp     short Has1
SEG0070:0ABD ; ---------------------------------------------------------------------------
SEG0070:0ABD		     nop
SEG0070:0ABE
SEG0070:0ABE DoFatBPB:				     ; CODE XREF: GETBP+16j
SEG0070:0ABE		     call    ReadFat
SEG0070:0AC1		     jb	     short GetBP_Err_Ret
SEG0070:0AC3
SEG0070:0AC3 GETBP1_PATCH:			     ; DATA XREF: SEG0070:2AA0o
SEG0070:0AC3		     call    hidensity
SEG0070:0AC6		     cmp     byte ptr [di+28h],	2
SEG0070:0ACA		     jnz     short Is_Floppy
SEG0070:0ACC		     cmp     ah, 0F9h ;	'ù'
SEG0070:0ACF		     jnz     short Got_Unknown_Medium
SEG0070:0AD1		     mov     bx, offset	SM92
SEG0070:0AD4		     push    cs
SEG0070:0AD5		     pop     es
SEG0070:0AD6		     assume es:SEG0070
SEG0070:0AD6		     mov     al, [bx+0]
SEG0070:0ADA		     mov     cx, [bx+3]
SEG0070:0ADE		     mov     dx, [bx+5]
SEG0070:0AE2		     mov     bx, [bx+1]
SEG0070:0AE6		     jmp     short Has1
SEG0070:0AE8 ; ---------------------------------------------------------------------------
SEG0070:0AE8
SEG0070:0AE8 Is_Floppy:				     ; CODE XREF: GETBP+2Aj
SEG0070:0AE8		     mov     cl, ah
SEG0070:0AEA		     and     cl, 0F8h
SEG0070:0AED		     cmp     cl, 0F8h ;	'ø'
SEG0070:0AF0		     jnz     short Got_Unknown_Medium
SEG0070:0AF2
SEG0070:0AF2 GOODID:
SEG0070:0AF2		     mov     al, 1
SEG0070:0AF4		     mov     bx, 4008h
SEG0070:0AF7		     mov     cx, 140h
SEG0070:0AFA		     mov     dx, 101h
SEG0070:0AFD		     test    ah, 2
SEG0070:0B00		     jnz     short HAS8
SEG0070:0B02		     inc     al
SEG0070:0B04		     inc     bl
SEG0070:0B06		     add     cx, 40
SEG0070:0B09
SEG0070:0B09 HAS8:				     ; CODE XREF: GETBP+60j
SEG0070:0B09		     test    ah, 1
SEG0070:0B0C		     jz	     short Has1
SEG0070:0B0E		     add     cx, cx
SEG0070:0B10		     mov     bh, 112
SEG0070:0B12		     inc     dh
SEG0070:0B14		     inc     dl
SEG0070:0B16
SEG0070:0B16 Has1:				     ; CODE XREF: GETBP+1Bj
SEG0070:0B16					     ; GETBP+46j ...
SEG0070:0B16		     mov     [di+8], dh
SEG0070:0B19		     mov     [di+0Ch], bh
SEG0070:0B1C		     mov     [di+0Eh], cx
SEG0070:0B1F		     mov     [di+10h], ah
SEG0070:0B22		     mov     [di+11h], al
SEG0070:0B25		     mov     [di+13h], bl
SEG0070:0B28		     mov     [di+15h], dl
SEG0070:0B2B
SEG0070:0B2B GETRET:				     ; CODE XREF: GETBP+93j
SEG0070:0B2B					     ; GETBP+98j
SEG0070:0B2B		     pop     bx
SEG0070:0B2C		     pop     es
SEG0070:0B2D		     assume es:nothing
SEG0070:0B2D		     pop     dx
SEG0070:0B2E		     pop     cx
SEG0070:0B2F
SEG0070:0B2F GETRET_EXIT:			     ; CODE XREF: GETBP+7j
SEG0070:0B2F		     retn
SEG0070:0B30 ; ---------------------------------------------------------------------------
SEG0070:0B30
SEG0070:0B30 GetBP_Err_Ret:			     ; CODE XREF: GETBP+11j
SEG0070:0B30					     ; GETBP+21j
SEG0070:0B30		     call    MAPERROR
SEG0070:0B33		     jmp     short GETRET
SEG0070:0B35 ; ---------------------------------------------------------------------------
SEG0070:0B35
SEG0070:0B35 Got_Unknown_Medium:		     ; CODE XREF: GETBP+2Fj
SEG0070:0B35					     ; GETBP+50j
SEG0070:0B35		     mov     al, 7
SEG0070:0B37		     stc
SEG0070:0B38		     jmp     short GETRET
SEG0070:0B38 GETBP	     endp
SEG0070:0B38
SEG0070:0B3A
SEG0070:0B3A ; =============== S U B R O U T I N E =======================================
SEG0070:0B3A
SEG0070:0B3A
SEG0070:0B3A ReadBootSec     proc near		     ; CODE XREF: GETBP+Ep
SEG0070:0B3A		     mov     dh, 0
SEG0070:0B3C		     mov     cx, 1
SEG0070:0B3F		     call    read_sector
SEG0070:0B42		     jb	     short Err_Ret
SEG0070:0B44		     xor     bx, bx
SEG0070:0B46		     cmp     cs:DiskSector, 69h	; 'i'
SEG0070:0B4C		     jz	     short Check_bpb_MediaByte
SEG0070:0B4E		     cmp     cs:DiskSector, 0E9h ; 'é'
SEG0070:0B54		     jz	     short Check_bpb_MediaByte
SEG0070:0B56		     cmp     cs:DiskSector, 0EBh ; 'ë'
SEG0070:0B5C		     jnz     short INVALIDBOOTSEC
SEG0070:0B5E		     cmp     cs:disksector_2, 90h ; ''
SEG0070:0B64		     jnz     short INVALIDBOOTSEC
SEG0070:0B66
SEG0070:0B66 Check_bpb_MediaByte:		     ; CODE XREF: ReadBootSec+12j
SEG0070:0B66					     ; ReadBootSec+1Aj
SEG0070:0B66		     mov     al, cs:mediabyte
SEG0070:0B6A		     and     al, 0F0h
SEG0070:0B6C		     cmp     al, 0F0h ;	'ð'
SEG0070:0B6E		     jnz     short INVALIDBOOTSEC
SEG0070:0B70		     mov     al, cs:mediabyte
SEG0070:0B74		     test    al, 1
SEG0070:0B76		     jnz     short GoodDsk
SEG0070:0B78		     cmp     cs:disksector_8, '.3'
SEG0070:0B7F		     jnz     short MUSTBEEARLIER
SEG0070:0B81		     cmp     cs:disksector_9, '2'
SEG0070:0B87		     jnb     short GoodDsk
SEG0070:0B89
SEG0070:0B89 MUSTBEEARLIER:			     ; CODE XREF: ReadBootSec+45j
SEG0070:0B89		     mov     cs:SECPERCLUSINSECTOR, 1
SEG0070:0B8F		     jmp     short GoodDsk
SEG0070:0B91 ; ---------------------------------------------------------------------------
SEG0070:0B91
SEG0070:0B91 INVALIDBOOTSEC:			     ; CODE XREF: ReadBootSec+22j
SEG0070:0B91					     ; ReadBootSec+2Aj	...
SEG0070:0B91		     inc     bx
SEG0070:0B92
SEG0070:0B92 GoodDsk:				     ; CODE XREF: ReadBootSec+3Cj
SEG0070:0B92					     ; ReadBootSec+4Dj	...
SEG0070:0B92		     clc
SEG0070:0B93		     retn
SEG0070:0B94 ; ---------------------------------------------------------------------------
SEG0070:0B94
SEG0070:0B94 Err_Ret:				     ; CODE XREF: ReadBootSec+8j
SEG0070:0B94		     retn
SEG0070:0B94 ReadBootSec     endp
SEG0070:0B94
SEG0070:0B95
SEG0070:0B95 ; =============== S U B R O U T I N E =======================================
SEG0070:0B95
SEG0070:0B95
SEG0070:0B95 MovBPB	     proc near		     ; CODE XREF: GETBP+18p
SEG0070:0B95		     push    ds
SEG0070:0B96		     push    di
SEG0070:0B97		     push    cs
SEG0070:0B98		     pop     ds
SEG0070:0B99		     assume ds:SEG0070
SEG0070:0B99		     mov     di, offset	BPB_In_Sector
SEG0070:0B9C		     mov     dh, [di+2]
SEG0070:0B9F		     mov     bh, [di+6]
SEG0070:0BA2		     mov     cx, [di+8]
SEG0070:0BA5		     mov     ah, [di+0Ah]
SEG0070:0BA8		     mov     al, [di+0Bh]
SEG0070:0BAB		     mov     bl, [di+0Dh]
SEG0070:0BAE		     mov     dl, [di+0Fh]
SEG0070:0BB1		     pop     di
SEG0070:0BB2		     pop     ds
SEG0070:0BB3		     assume ds:nothing
SEG0070:0BB3		     retn
SEG0070:0BB3 MovBPB	     endp
SEG0070:0BB3
SEG0070:0BB4
SEG0070:0BB4 ; =============== S U B R O U T I N E =======================================
SEG0070:0BB4
SEG0070:0BB4
SEG0070:0BB4 ReadFat	     proc near		     ; CODE XREF: GETBP:DoFatBPBp
SEG0070:0BB4		     push    ax
SEG0070:0BB5		     mov     dh, 0
SEG0070:0BB7		     mov     cx, 2
SEG0070:0BBA		     call    read_sector
SEG0070:0BBD		     jb	     short Bad_FAT_Ret
SEG0070:0BBF		     pop     ax
SEG0070:0BC0		     mov     ah, cs:[bx]
SEG0070:0BC3		     retn
SEG0070:0BC4 ; ---------------------------------------------------------------------------
SEG0070:0BC4
SEG0070:0BC4 Bad_FAT_Ret:			     ; CODE XREF: ReadFat+9j
SEG0070:0BC4		     pop     cx
SEG0070:0BC5		     retn
SEG0070:0BC5 ReadFat	     endp
SEG0070:0BC5
SEG0070:0BC6
SEG0070:0BC6 ; =============== S U B R O U T I N E =======================================
SEG0070:0BC6
SEG0070:0BC6
SEG0070:0BC6 read_sector     proc near		     ; CODE XREF: ReadBootSec+5p
SEG0070:0BC6					     ; ReadFat+6p ...
SEG0070:0BC6		     push    bp
SEG0070:0BC7		     mov     bp, 3
SEG0070:0BCA		     push    es
SEG0070:0BCB		     push    cs
SEG0070:0BCC		     pop     es
SEG0070:0BCD		     assume es:SEG0070
SEG0070:0BCD		     mov     bx, offset	DiskSector
SEG0070:0BD0		     mov     dl, [di+4]
SEG0070:0BD3
SEG0070:0BD3 RD_RET:				     ; CODE XREF: read_sector+1Ej
SEG0070:0BD3		     mov     ax, 201h
SEG0070:0BD6		     int     13h	     ; DISK - READ SECTORS INTO	MEMORY
SEG0070:0BD6					     ; AL = number of sectors to read, CH = track, CL =	sector
SEG0070:0BD6					     ; DH = head, DL = drive, ES:BX -> buffer to fill
SEG0070:0BD6					     ; Return: CF set on error,	AH = status, AL	= number of sectors read
SEG0070:0BD8		     jnb     short OKRET2
SEG0070:0BDA
SEG0070:0BDA Rd_rty:				     ; CODE XREF: read_sector+4Bj
SEG0070:0BDA		     call    Again
SEG0070:0BDD		     jz	     short Err_RD_RET
SEG0070:0BDF		     test    word ptr [di+29h],	1
SEG0070:0BE4		     jnz     short RD_RET
SEG0070:0BE6		     push    ds
SEG0070:0BE7		     push    ax
SEG0070:0BE8		     lds     si, cs:DPT
SEG0070:0BED		     mov     al, [si+9]
SEG0070:0BF0		     mov     cs:Save_head_sttl,	al
SEG0070:0BF4		     mov     byte ptr [si+9], 0Fh
SEG0070:0BF8		     pop     ax
SEG0070:0BF9		     pop     ds
SEG0070:0BFA		     mov     ax, 201h
SEG0070:0BFD		     int     13h	     ; DISK - READ SECTORS INTO	MEMORY
SEG0070:0BFD					     ; AL = number of sectors to read, CH = track, CL =	sector
SEG0070:0BFD					     ; DH = head, DL = drive, ES:BX -> buffer to fill
SEG0070:0BFD					     ; Return: CF set on error,	AH = status, AL	= number of sectors read
SEG0070:0BFF		     push    ds
SEG0070:0C00		     push    ax
SEG0070:0C01		     lds     si, cs:DPT
SEG0070:0C06		     mov     al, cs:Save_head_sttl
SEG0070:0C0A		     mov     [si+9], al
SEG0070:0C0D		     pop     ax
SEG0070:0C0E		     pop     ds
SEG0070:0C0F		     jnb     short OKRET2
SEG0070:0C11		     jmp     short Rd_rty
SEG0070:0C13 ; ---------------------------------------------------------------------------
SEG0070:0C13
SEG0070:0C13 Err_RD_RET:			     ; CODE XREF: read_sector+17j
SEG0070:0C13		     mov     dl, -1
SEG0070:0C15		     stc
SEG0070:0C16
SEG0070:0C16 OKRET2:				     ; CODE XREF: read_sector+12j
SEG0070:0C16					     ; read_sector+49j
SEG0070:0C16		     mov     cs:STEP_DRV, dl
SEG0070:0C1B		     mov     cs:TIM_DRV, dl
SEG0070:0C20		     mov     [di+4Ch], ch
SEG0070:0C23		     pushf
SEG0070:0C24		     call    SET_TIM
SEG0070:0C27		     popf
SEG0070:0C28		     pop     es
SEG0070:0C29		     assume es:nothing
SEG0070:0C29		     pop     bp
SEG0070:0C2A		     retn
SEG0070:0C2A read_sector     endp
SEG0070:0C2A
SEG0070:0C2B ; ---------------------------------------------------------------------------
SEG0070:0C2B
SEG0070:0C2B DSK$REM:				     ; DATA XREF: SEG0070:_22ho
SEG0070:0C2B		     call    SetDrive
SEG0070:0C2E		     test    word ptr [di+29h],	1
SEG0070:0C33		     jnz     short NON_REM
SEG0070:0C35		     jmp     EXIT
SEG0070:0C38 ; ---------------------------------------------------------------------------
SEG0070:0C38
SEG0070:0C38 NON_REM:				     ; CODE XREF: SEG0070:0C33j
SEG0070:0C38		     jmp     BUS$EXIT
SEG0070:0C3B
SEG0070:0C3B ; =============== S U B R O U T I N E =======================================
SEG0070:0C3B
SEG0070:0C3B
SEG0070:0C3B SetDrive	     proc near		     ; CODE XREF: SEG0070:MEDIA$CHKp
SEG0070:0C3B					     ; SEG0070:0A77p ...
SEG0070:0C3B		     push    bx
SEG0070:0C3C		     push    cs
SEG0070:0C3D		     pop     ds
SEG0070:0C3E		     assume ds:SEG0070
SEG0070:0C3E		     mov     di, START_BDS
SEG0070:0C42
SEG0070:0C42 Scan_Loop:				     ; CODE XREF: SetDrive+25j
SEG0070:0C42		     cmp     cs:PHYS_DRV, 1
SEG0070:0C48		     jb	     short USE_LOGICAL_DRV
SEG0070:0C4A		     cmp     [di+4], al
SEG0070:0C4D		     jz	     short SETDRV
SEG0070:0C4F		     jmp     short GET_NXT_BDS
SEG0070:0C51 ; ---------------------------------------------------------------------------
SEG0070:0C51
SEG0070:0C51 USE_LOGICAL_DRV:			     ; CODE XREF: SetDrive+Dj
SEG0070:0C51		     cmp     [di+5], al
SEG0070:0C54		     jz	     short SETDRV
SEG0070:0C56
SEG0070:0C56 GET_NXT_BDS:			     ; CODE XREF: SetDrive+14j
SEG0070:0C56		     mov     bx, [di+2]
SEG0070:0C59		     mov     di, [di]
SEG0070:0C5B		     mov     ds, bx
SEG0070:0C5D		     assume ds:nothing
SEG0070:0C5D		     cmp     di, -1
SEG0070:0C60		     jnz     short Scan_Loop
SEG0070:0C62		     stc
SEG0070:0C63
SEG0070:0C63 SETDRV:				     ; CODE XREF: SetDrive+12j
SEG0070:0C63					     ; SetDrive+19j
SEG0070:0C63		     pop     bx
SEG0070:0C64		     retn
SEG0070:0C64 SetDrive	     endp
SEG0070:0C64
SEG0070:0C65 ; ---------------------------------------------------------------------------
SEG0070:0C65
SEG0070:0C65 DSK$WRITV:				     ; DATA XREF: SEG0070:0016o
SEG0070:0C65		     mov     cs:WRTVERIFY, 103h
SEG0070:0C6C		     jmp     short DSK$CL
SEG0070:0C6E ; ---------------------------------------------------------------------------
SEG0070:0C6E
SEG0070:0C6E DSK$WRIT:				     ; DATA XREF: SEG0070:0014o
SEG0070:0C6E		     mov     cs:WRTVERIFY, 3
SEG0070:0C75
SEG0070:0C75 DSK$CL:				     ; CODE XREF: SEG0070:0C6Cj
SEG0070:0C75		     call    DISKIO
SEG0070:0C78
SEG0070:0C78 DSK$IO:				     ; CODE XREF: SEG0070:0C83j
SEG0070:0C78		     jb	     short DSKBad
SEG0070:0C7A		     jmp     EXIT
SEG0070:0C7D ; ---------------------------------------------------------------------------
SEG0070:0C7D
SEG0070:0C7D DSKBad:				     ; CODE XREF: SEG0070:DSK$IOj
SEG0070:0C7D		     jmp     ERR$CNT
SEG0070:0C80 ; ---------------------------------------------------------------------------
SEG0070:0C80
SEG0070:0C80 DSK$READ:				     ; DATA XREF: SEG0070:000Co
SEG0070:0C80		     call    DISKRD
SEG0070:0C83		     jmp     short DSK$IO
SEG0070:0C85
SEG0070:0C85 ; =============== S U B R O U T I N E =======================================
SEG0070:0C85
SEG0070:0C85
SEG0070:0C85 CHECKSINGLE     proc near		     ; CODE XREF: DISKRD+45p
SEG0070:0C85					     ; SEG0070:1340p ...
SEG0070:0C85		     push    ax
SEG0070:0C86		     push    bx
SEG0070:0C87		     mov     bx, [di+29h]
SEG0070:0C8A		     test    bl, 21h
SEG0070:0C8D		     jnz     short SingleRet
SEG0070:0C8F		     test    bl, 10h
SEG0070:0C92		     jz	     short SingleRet
SEG0070:0C94		     mov     al, [di+4]
SEG0070:0C97		     push    ds
SEG0070:0C98		     push    di
SEG0070:0C99		     push    cs
SEG0070:0C9A		     pop     ds
SEG0070:0C9B		     assume ds:SEG0070
SEG0070:0C9B		     mov     di, offset	START_BDS
SEG0070:0C9E
SEG0070:0C9E Scan_List:				     ; CODE XREF: CHECKSINGLE+28j
SEG0070:0C9E					     ; CHECKSINGLE+30j
SEG0070:0C9E		     mov     bx, [di+2]
SEG0070:0CA1		     mov     di, [di]
SEG0070:0CA3		     mov     ds, bx
SEG0070:0CA5		     assume ds:nothing
SEG0070:0CA5		     cmp     di, -1
SEG0070:0CA8		     jz	     short Single_Err_Ret
SEG0070:0CAA		     cmp     [di+4], al
SEG0070:0CAD		     jnz     short Scan_List
SEG0070:0CAF
SEG0070:0CAF Check_Own:
SEG0070:0CAF		     mov     bx, [di+29h]
SEG0070:0CB2		     test    bl, 20h
SEG0070:0CB5		     jz	     short Scan_List
SEG0070:0CB7		     xor     bl, 20h
SEG0070:0CBA		     mov     [di+29h], bx
SEG0070:0CBD		     pop     di
SEG0070:0CBE		     pop     ds
SEG0070:0CBF		     xor     bx, bx
SEG0070:0CC1		     or	     bl, 20h
SEG0070:0CC4		     or	     [di+29h], bx
SEG0070:0CC7		     cmp     cs:fSetOwner, 1
SEG0070:0CCD		     jz	     short SingleRet
SEG0070:0CCF		     cmp     cs:single,	2
SEG0070:0CD5		     jnz     short Ignore_SDSB
SEG0070:0CD7		     push    ds
SEG0070:0CD8		     push    di
SEG0070:0CD9		     push    ax
SEG0070:0CDA		     mov     al, [di+5]
SEG0070:0CDD		     mov     ah, al
SEG0070:0CDF		     xor     di, di
SEG0070:0CE1		     mov     ds, di
SEG0070:0CE3		     assume ds:SEG0070
SEG0070:0CE3		     xchg    al, byte ptr LSTDRV
SEG0070:0CE7		     cmp     ah, al
SEG0070:0CE9		     pop     ax
SEG0070:0CEA		     pop     di
SEG0070:0CEB		     pop     ds
SEG0070:0CEC		     assume ds:nothing
SEG0070:0CEC		     jz	     short SingleRet
SEG0070:0CEE
SEG0070:0CEE Ignore_SDSB:			     ; CODE XREF: CHECKSINGLE+50j
SEG0070:0CEE		     call    SWPDSK
SEG0070:0CF1
SEG0070:0CF1 SingleRet:				     ; CODE XREF: CHECKSINGLE+8j
SEG0070:0CF1					     ; CHECKSINGLE+Dj ...
SEG0070:0CF1		     pop     bx
SEG0070:0CF2		     pop     ax
SEG0070:0CF3		     retn
SEG0070:0CF4 ; ---------------------------------------------------------------------------
SEG0070:0CF4
SEG0070:0CF4 Single_Err_Ret:			     ; CODE XREF: CHECKSINGLE+23j
SEG0070:0CF4		     stc
SEG0070:0CF5		     pop     di
SEG0070:0CF6		     pop     ds
SEG0070:0CF7		     jmp     short SingleRet
SEG0070:0CF7 CHECKSINGLE     endp
SEG0070:0CF7
SEG0070:0CF9 ; ---------------------------------------------------------------------------
SEG0070:0CF9 ; START OF	FUNCTION CHUNK FOR DISKRD
SEG0070:0CF9
SEG0070:0CF9 BadDrive:				     ; CODE XREF: DISKRD+23j
SEG0070:0CF9		     mov     al, 8
SEG0070:0CFB		     stc
SEG0070:0CFB ; END OF FUNCTION CHUNK FOR DISKRD
SEG0070:0CFC
SEG0070:0CFC ; =============== S U B R O U T I N E =======================================
SEG0070:0CFC
SEG0070:0CFC
SEG0070:0CFC IORET	     proc near		     ; CODE XREF: DISKRD+12j
SEG0070:0CFC		     retn
SEG0070:0CFC IORET	     endp
SEG0070:0CFC
SEG0070:0CFD ; ---------------------------------------------------------------------------
SEG0070:0CFD
SEG0070:0CFD BogusSettle:
SEG0070:0CFD		     mov     al, 0Fh
SEG0070:0CFF		     jmp     GotSlowSettle
SEG0070:0D02
SEG0070:0D02 ; =============== S U B R O U T I N E =======================================
SEG0070:0D02
SEG0070:0D02
SEG0070:0D02 DISKRD	     proc near		     ; CODE XREF: SEG0070:DSK$READp
SEG0070:0D02					     ; GETFAT+11j ...
SEG0070:0D02
SEG0070:0D02 ; FUNCTION	CHUNK AT SEG0070:0CF9 SIZE 00000003 BYTES
SEG0070:0D02
SEG0070:0D02		     mov     byte ptr cs:WRTVERIFY, 2
SEG0070:0D08
SEG0070:0D08 DISKIO:				     ; CODE XREF: SEG0070:DSK$CLp
SEG0070:0D08		     mov     bx, di
SEG0070:0D0A		     call    SetDrive
SEG0070:0D0D		     mov     al, [di+10h]
SEG0070:0D10		     mov     cs:MedByt,	al
SEG0070:0D14		     jcxz    short IORET
SEG0070:0D16		     mov     cs:SPSAV, sp
SEG0070:0D1B		     mov     si, dx
SEG0070:0D1D		     add     si, cx
SEG0070:0D1F		     add     dx, [di+17h]
SEG0070:0D22		     cmp     si, [di+0Eh]
SEG0070:0D25		     ja	     short BadDrive
SEG0070:0D27		     mov     cs:SECCNT,	cx
SEG0070:0D2C		     push    ds
SEG0070:0D2D		     xor     ax, ax
SEG0070:0D2F		     mov     ds, ax
SEG0070:0D31		     assume ds:SEG0070
SEG0070:0D31		     lds     si, dword ptr _78h
SEG0070:0D35		     assume ds:nothing
SEG0070:0D35		     mov     word ptr cs:DPT, si
SEG0070:0D3A		     mov     word ptr cs:DPT+2,	ds
SEG0070:0D3F		     pop     ds
SEG0070:0D40		     test    word ptr [di+29h],	1
SEG0070:0D45		     jnz     short Skip_Setup
SEG0070:0D47		     call    CHECKSINGLE
SEG0070:0D4A
SEG0070:0D4A DiskIO_PATCH:			     ; DATA XREF: SEG0070:2AA8o
SEG0070:0D4A		     call    CheckLatchIO
SEG0070:0D4D		     call    IOSetUp
SEG0070:0D50
SEG0070:0D50 Skip_Setup:			     ; CODE XREF: DISKRD+43j
SEG0070:0D50		     mov     ax, dx
SEG0070:0D52		     xor     dx, dx
SEG0070:0D54		     div     word ptr [di+13h]
SEG0070:0D57		     inc     dl
SEG0070:0D59		     mov     cs:CURSEC,	dl
SEG0070:0D5E		     mov     cx, [di+15h]
SEG0070:0D61		     xor     dx, dx
SEG0070:0D63		     div     cx
SEG0070:0D65		     mov     cs:CURHD, dl
SEG0070:0D6A		     mov     cs:CURTRK,	ax
SEG0070:0D6E		     mov     ax, cs:SECCNT
SEG0070:0D72		     call    BLOCK
SEG0070:0D75		     call    DONE
SEG0070:0D78		     retn
SEG0070:0D78 DISKRD	     endp
SEG0070:0D78
SEG0070:0D79
SEG0070:0D79 ; =============== S U B R O U T I N E =======================================
SEG0070:0D79
SEG0070:0D79
SEG0070:0D79 IOSetUp	     proc near		     ; CODE XREF: DISKRD+4Bp
SEG0070:0D79					     ; TrackIO+12p
SEG0070:0D79		     mov     al, [di+4]
SEG0070:0D7C		     mov     cs:TIM_DRV, al
SEG0070:0D80		     mov     cx, ds
SEG0070:0D82		     lds     si, cs:DPT
SEG0070:0D87		     mov     al, cs:EOT
SEG0070:0D8B		     mov     [si+4], al
SEG0070:0D8E		     mov     al, [si+0Ah]
SEG0070:0D91		     mov     cs:MotorStartup, al
SEG0070:0D95		     push    es
SEG0070:0D96		     mov     es, cx
SEG0070:0D98		     cmp     byte ptr es:[di+28h], 2
SEG0070:0D9D		     jnz     short Motor_Start_OK
SEG0070:0D9F		     mov     al, 4
SEG0070:0DA1		     xchg    al, [si+0Ah]
SEG0070:0DA4
SEG0070:0DA4 Motor_Start_OK:			     ; CODE XREF: IOSetUp+24j
SEG0070:0DA4		     pop     es
SEG0070:0DA5		     xor     al, al
SEG0070:0DA7		     inc     al
SEG0070:0DA9		     xchg    al, [si+9]
SEG0070:0DAC		     mov     cs:SettleCurrent, al
SEG0070:0DB0		     mov     al, 0Fh
SEG0070:0DB2
SEG0070:0DB2 GotSlowSettle:			     ; CODE XREF: SEG0070:0CFFj
SEG0070:0DB2		     mov     ds, cx
SEG0070:0DB4		     mov     cs:SettleSlow, al
SEG0070:0DB8		     retn
SEG0070:0DB8 IOSetUp	     endp
SEG0070:0DB8
SEG0070:0DB9
SEG0070:0DB9 ; =============== S U B R O U T I N E =======================================
SEG0070:0DB9
SEG0070:0DB9
SEG0070:0DB9 DONE	     proc near		     ; CODE XREF: DISKRD+73p
SEG0070:0DB9					     ; TrackIO+74p
SEG0070:0DB9		     test    word ptr [di+29h],	1
SEG0070:0DBE		     jnz     short RETZ
SEG0070:0DC0		     call    SET_TIM
SEG0070:0DC3
SEG0070:0DC3 DiddleBack:			     ; CODE XREF: DISK:MedByt_OKp
SEG0070:0DC3		     push    ax
SEG0070:0DC4		     mov     dx, ds
SEG0070:0DC6		     mov     al, cs:SettleCurrent
SEG0070:0DCA		     mov     ah, cs:MotorStartup
SEG0070:0DCF		     lds     si, cs:DPT
SEG0070:0DD4		     mov     byte ptr [si+4], 9
SEG0070:0DD8		     mov     [si+9], al
SEG0070:0DDB		     mov     byte ptr [si+3], 2
SEG0070:0DDF		     mov     [si+0Ah], ah
SEG0070:0DE2		     mov     ds, dx
SEG0070:0DE4		     pop     ax
SEG0070:0DE5
SEG0070:0DE5 RETZ:				     ; CODE XREF: DONE+5j
SEG0070:0DE5					     ; BLOCK+2j
SEG0070:0DE5		     retn
SEG0070:0DE5 DONE	     endp
SEG0070:0DE5
SEG0070:0DE6
SEG0070:0DE6 ; =============== S U B R O U T I N E =======================================
SEG0070:0DE6
SEG0070:0DE6
SEG0070:0DE6 BLOCK	     proc near		     ; CODE XREF: DISKRD+70p
SEG0070:0DE6					     ; BLOCK+32j
SEG0070:0DE6		     or	     ax, ax
SEG0070:0DE8		     jz	     short RETZ
SEG0070:0DEA		     test    word ptr [di+29h],	1
SEG0070:0DEF		     jz	     short BLOCK_FLOPPY
SEG0070:0DF1		     call    DISK
SEG0070:0DF4		     xor     ax, ax
SEG0070:0DF6		     retn
SEG0070:0DF7 ; ---------------------------------------------------------------------------
SEG0070:0DF7
SEG0070:0DF7 BLOCK_FLOPPY:			     ; CODE XREF: BLOCK+9j
SEG0070:0DF7		     mov     cl, [di+13h]
SEG0070:0DFA		     inc     cl
SEG0070:0DFC		     sub     cl, cs:CURSEC
SEG0070:0E01		     xor     ch, ch
SEG0070:0E03		     cmp     ax, cx
SEG0070:0E05		     jnb     short GotMin
SEG0070:0E07		     mov     cx, ax
SEG0070:0E09
SEG0070:0E09 GotMin:				     ; CODE XREF: BLOCK+1Fj
SEG0070:0E09		     push    ax
SEG0070:0E0A		     push    cx
SEG0070:0E0B		     mov     ax, cx
SEG0070:0E0D		     call    DISK
SEG0070:0E10		     pop     cx
SEG0070:0E11		     pop     ax
SEG0070:0E12		     sub     ax, cx
SEG0070:0E14		     shl     cl, 1
SEG0070:0E16		     add     bh, cl
SEG0070:0E18		     jmp     short BLOCK
SEG0070:0E18 BLOCK	     endp
SEG0070:0E18
SEG0070:0E1A
SEG0070:0E1A ; =============== S U B R O U T I N E =======================================
SEG0070:0E1A
SEG0070:0E1A
SEG0070:0E1A DISK	     proc near		     ; CODE XREF: BLOCK+Bp
SEG0070:0E1A					     ; BLOCK+27p ...
SEG0070:0E1A		     mov     bp, 5
SEG0070:0E1D		     mov     ah, byte ptr cs:WRTVERIFY
SEG0070:0E22
SEG0070:0E22 RETRY:				     ; CODE XREF: DISK+C3j
SEG0070:0E22		     push    ax
SEG0070:0E23		     mov     dx, cs:CURTRK
SEG0070:0E28		     test    word ptr [di+29h],	1
SEG0070:0E2D		     jz	     short DISK_NOT_MINI
SEG0070:0E2F		     cmp     word ptr [di+4Dh],	1
SEG0070:0E33		     jnz     short DISK_NOT_MINI
SEG0070:0E35		     add     dx, [di+4Fh]
SEG0070:0E38
SEG0070:0E38 DISK_NOT_MINI:			     ; CODE XREF: DISK+13j
SEG0070:0E38					     ; DISK+19j
SEG0070:0E38		     ror     dh, 1
SEG0070:0E3A		     ror     dh, 1
SEG0070:0E3C		     or	     dh, cs:CURSEC
SEG0070:0E41		     mov     cx, dx
SEG0070:0E43		     xchg    ch, cl
SEG0070:0E45		     mov     dh, cs:CURHD
SEG0070:0E4A		     mov     dl, [di+4]
SEG0070:0E4D		     cmp     byte ptr [di+28h],	5
SEG0070:0E51		     jz	     short DO_Fast
SEG0070:0E53		     cmp     cs:STEP_DRV, -1
SEG0070:0E59		     jz	     short Do_Writej
SEG0070:0E5B		     cmp     ah, 2
SEG0070:0E5E		     jz	     short DO_Fast
SEG0070:0E60		     cmp     ah, 4
SEG0070:0E63		     jz	     short DO_Fast
SEG0070:0E65
SEG0070:0E65 Do_Writej:				     ; CODE XREF: DISK+3Fj
SEG0070:0E65		     jmp     short DO_WRITE
SEG0070:0E67 ; ---------------------------------------------------------------------------
SEG0070:0E67		     nop
SEG0070:0E68
SEG0070:0E68 DO_Fast:				     ; CODE XREF: DISK+37j
SEG0070:0E68					     ; DISK+44j ...
SEG0070:0E68		     call    FastSpeed
SEG0070:0E6B
SEG0070:0E6B TestErr:				     ; CODE XREF: DISK+AAj
SEG0070:0E6B		     jb	     short DSKERR
SEG0070:0E6D		     mov     cs:STEP_DRV, dl
SEG0070:0E72		     mov     [di+4Ch], ch
SEG0070:0E75
SEG0070:0E75 NO_SET:
SEG0070:0E75		     cmp     cs:WRTVERIFY, 103h
SEG0070:0E7C		     jz	     short DOVERIFY
SEG0070:0E7E
SEG0070:0E7E NOVERIFY:				     ; CODE XREF: DISK+B3j
SEG0070:0E7E		     pop     ax
SEG0070:0E7F		     and     cl, 3Fh
SEG0070:0E82		     xor     ah, ah
SEG0070:0E84		     sub     cs:SECCNT,	ax
SEG0070:0E89		     add     cl, al
SEG0070:0E8B		     mov     cs:CURSEC,	cl
SEG0070:0E90		     cmp     cl, [di+13h]
SEG0070:0E93		     jbe     short Disk_Ret
SEG0070:0E95
SEG0070:0E95 NextTrack:
SEG0070:0E95		     mov     cs:CURSEC,	1
SEG0070:0E9B		     mov     dh, cs:CURHD
SEG0070:0EA0		     inc     dh
SEG0070:0EA2		     cmp     dh, [di+15h]
SEG0070:0EA5		     jb	     short NOXOR
SEG0070:0EA7		     xor     dh, dh
SEG0070:0EA9		     inc     cs:CURTRK
SEG0070:0EAE
SEG0070:0EAE NOXOR:				     ; CODE XREF: DISK+8Bj
SEG0070:0EAE		     mov     cs:CURHD, dh
SEG0070:0EB3
SEG0070:0EB3 Disk_Ret:				     ; CODE XREF: DISK+79j
SEG0070:0EB3		     clc
SEG0070:0EB4		     retn
SEG0070:0EB5 ; ---------------------------------------------------------------------------
SEG0070:0EB5
SEG0070:0EB5 DO_WRITE:				     ; CODE XREF: DISK:Do_Writejj
SEG0070:0EB5		     cmp     dl, cs:STEP_DRV
SEG0070:0EBA		     jnz     short DO_Norm
SEG0070:0EBC		     cmp     ch, [di+4Ch]
SEG0070:0EBF		     jz	     short DO_Fast
SEG0070:0EC1
SEG0070:0EC1 DO_Norm:				     ; CODE XREF: DISK+A0j
SEG0070:0EC1		     call    NormSpeed
SEG0070:0EC4		     jmp     short TestErr
SEG0070:0EC6 ; ---------------------------------------------------------------------------
SEG0070:0EC6
SEG0070:0EC6 DOVERIFY:				     ; CODE XREF: DISK+62j
SEG0070:0EC6		     pop     ax
SEG0070:0EC7		     push    ax
SEG0070:0EC8		     mov     ah, 4
SEG0070:0ECA		     call    FastSpeed
SEG0070:0ECD		     jnb     short NOVERIFY
SEG0070:0ECF
SEG0070:0ECF DSKERR:				     ; CODE XREF: DISK:TestErrj
SEG0070:0ECF					     ; DATA XREF: SEG0070:2AACo
SEG0070:0ECF		     call    CheckIO
SEG0070:0ED2		     call    Again
SEG0070:0ED5		     jz	     short HARDERR
SEG0070:0ED7		     cmp     ah, 80h ; ''
SEG0070:0EDA		     jz	     short HARDERR
SEG0070:0EDC		     pop     ax
SEG0070:0EDD		     jmp     RETRY
SEG0070:0EE0 ; ---------------------------------------------------------------------------
SEG0070:0EE0
SEG0070:0EE0 HARDERR:				     ; CODE XREF: DISK+BBj
SEG0070:0EE0					     ; DISK+C0j ...
SEG0070:0EE0		     call    MAPERROR
SEG0070:0EE3
SEG0070:0EE3 HARDERR2:				     ; CODE XREF: CheckIO:No_Error_Mapj
SEG0070:0EE3		     mov     cs:TIM_DRV, 0FFh
SEG0070:0EE9		     mov     cx, cs:SECCNT
SEG0070:0EEE		     mov     sp, cs:SPSAV
SEG0070:0EF3
SEG0070:0EF3 MedByt_OK:
SEG0070:0EF3		     call    DiddleBack
SEG0070:0EF6		     retn
SEG0070:0EF6 DISK	     endp
SEG0070:0EF6
SEG0070:0EF7
SEG0070:0EF7 ; =============== S U B R O U T I N E =======================================
SEG0070:0EF7
SEG0070:0EF7
SEG0070:0EF7 NormSpeed	     proc near		     ; CODE XREF: DISK:DO_Normp
SEG0070:0EF7		     push    ds
SEG0070:0EF8		     push    ax
SEG0070:0EF9		     mov     al, cs:SettleSlow
SEG0070:0EFD		     lds     si, cs:DPT
SEG0070:0F02		     mov     [si+9], al
SEG0070:0F05		     pop     ax
SEG0070:0F06		     pop     ds
SEG0070:0F07		     call    FastSpeed
SEG0070:0F0A		     push    ds
SEG0070:0F0B		     lds     si, cs:DPT
SEG0070:0F10		     mov     byte ptr [si+9], 1
SEG0070:0F14		     pop     ds
SEG0070:0F15		     retn
SEG0070:0F15 NormSpeed	     endp
SEG0070:0F15
SEG0070:0F16
SEG0070:0F16 ; =============== S U B R O U T I N E =======================================
SEG0070:0F16
SEG0070:0F16
SEG0070:0F16 FastSpeed	     proc near		     ; CODE XREF: DISK:DO_Fastp
SEG0070:0F16					     ; DISK+B0p ...
SEG0070:0F16		     test    byte ptr [di+19h],	80h
SEG0070:0F1A		     jnz     short NotReady
SEG0070:0F1C		     int     13h	     ; DISK -
SEG0070:0F1E
SEG0070:0F1E Death:				     ; CODE XREF: FastSpeed+Cj
SEG0070:0F1E		     retn
SEG0070:0F1F ; ---------------------------------------------------------------------------
SEG0070:0F1F
SEG0070:0F1F NotReady:				     ; CODE XREF: FastSpeed+4j
SEG0070:0F1F		     stc
SEG0070:0F20		     mov     ah, 80h ; ''
SEG0070:0F22		     jmp     short Death
SEG0070:0F22 FastSpeed	     endp
SEG0070:0F22
SEG0070:0F24
SEG0070:0F24 ; =============== S U B R O U T I N E =======================================
SEG0070:0F24
SEG0070:0F24
SEG0070:0F24 MAPERROR	     proc near		     ; CODE XREF: SEG0070:ERR$EXITJp
SEG0070:0F24					     ; GETBP:GetBP_Err_Retp ...
SEG0070:0F24		     push    cx
SEG0070:0F25		     push    cs
SEG0070:0F26		     pop     es
SEG0070:0F27		     assume es:SEG0070
SEG0070:0F27		     mov     al, ah
SEG0070:0F29		     mov     cs:LSTERR,	al
SEG0070:0F2D		     mov     cx, 8
SEG0070:0F30		     mov     di, offset	ERRIN
SEG0070:0F33		     repne scasb
SEG0070:0F35		     mov     al, cs:[di+7]
SEG0070:0F3A		     pop     cx
SEG0070:0F3B		     stc
SEG0070:0F3C		     retn
SEG0070:0F3C MAPERROR	     endp
SEG0070:0F3C
SEG0070:0F3D
SEG0070:0F3D ; =============== S U B R O U T I N E =======================================
SEG0070:0F3D
SEG0070:0F3D
SEG0070:0F3D SET_TIM	     proc near		     ; CODE XREF: read_sector+5Ep
SEG0070:0F3D					     ; DONE+7p
SEG0070:0F3D		     push    ax
SEG0070:0F3E		     xor     ah, ah
SEG0070:0F40		     int     1Ah	     ; CLOCK - GET TIME	OF DAY
SEG0070:0F40					     ; Return: CX:DX = clock count
SEG0070:0F40					     ; AL = 00h	if clock was read or written (via AH=0,1) since	the previous
SEG0070:0F40					     ; midnight
SEG0070:0F40					     ; Otherwise, AL > 0
SEG0070:0F42		     or	     al, al
SEG0070:0F44		     jz	     short NOROLL3
SEG0070:0F46		     inc     cs:DAYCNT
SEG0070:0F4B
SEG0070:0F4B NOROLL3:				     ; CODE XREF: SET_TIM+7j
SEG0070:0F4B		     cmp     dx, [di+4Dh]
SEG0070:0F4E		     jnz     short SetAccess
SEG0070:0F50		     cmp     cx, [di+4Fh]
SEG0070:0F53		     jz	     short Done_Set
SEG0070:0F55
SEG0070:0F55 SetAccess:				     ; CODE XREF: SET_TIM+11j
SEG0070:0F55		     mov     cs:AccessCount, 0
SEG0070:0F5B		     mov     [di+4Dh], dx
SEG0070:0F5E		     mov     [di+4Fh], cx
SEG0070:0F61
SEG0070:0F61 Done_Set:				     ; CODE XREF: SET_TIM+16j
SEG0070:0F61		     clc
SEG0070:0F62		     pop     ax
SEG0070:0F63		     retn
SEG0070:0F63 SET_TIM	     endp
SEG0070:0F63
SEG0070:0F63 ; ---------------------------------------------------------------------------
SEG0070:0F64 Save_AX	     dw	0		     ; DATA XREF: SEG0070:0FAFw
SEG0070:0F64					     ; SEG0070:0FEEr
SEG0070:0F66 Save_BX	     dw	0		     ; DATA XREF: SEG0070:0FB3w
SEG0070:0F66					     ; SEG0070:0FF2r
SEG0070:0F68 Save_CX	     dw	0		     ; DATA XREF: SEG0070:0FB8w
SEG0070:0F68					     ; SEG0070:0FF7r
SEG0070:0F6A Save_DX	     dw	0		     ; DATA XREF: SEG0070:0FBDw
SEG0070:0F6A					     ; SEG0070:0FFCr
SEG0070:0F6C Save_DI	     dw	0		     ; DATA XREF: SEG0070:0FC2w
SEG0070:0F6C					     ; SEG0070:1001r
SEG0070:0F6E Save_SI	     dw	0		     ; DATA XREF: SEG0070:0FC7w
SEG0070:0F6E					     ; SEG0070:1006r
SEG0070:0F70 Save_BP	     dw	0		     ; DATA XREF: SEG0070:0FCCw
SEG0070:0F70					     ; SEG0070:100Br
SEG0070:0F72 Save_DS	     dw	0		     ; DATA XREF: SEG0070:0FD1w
SEG0070:0F72					     ; SEG0070:1010r
SEG0070:0F74 Save_ES	     dw	0		     ; DATA XREF: SEG0070:0FD6w
SEG0070:0F74					     ; SEG0070:1015r
SEG0070:0F76 Prev_DX	     dw	0		     ; DATA XREF: SEG0070:Bus_Problemw
SEG0070:0F76					     ; SEG0070:0FE1r
SEG0070:0F78 Save_Flag	     dw	0		     ; DATA XREF: SEG0070:0FDCw
SEG0070:0F78					     ; SEG0070:101Ar
SEG0070:0F7A ; ---------------------------------------------------------------------------
SEG0070:0F7A
SEG0070:0F7A Block13:				     ; DATA XREF: SEG0070:2AD3o
SEG0070:0F7A		     mov     cs:PrevOper, ax
SEG0070:0F7E		     pushf
SEG0070:0F7F		     cmp     ah, 5
SEG0070:0F82		     jnz     short Not_Format
SEG0070:0F84
SEG0070:0F84 Changed_Patch:			     ; DATA XREF: SEG0070:2AB0o
SEG0070:0F84		     mov     cs:FlagBits, 140h
SEG0070:0F8B		     call    Set_Changed_DL
SEG0070:0F8E
SEG0070:0F8E Not_Format:			     ; CODE XREF: SEG0070:0F82j
SEG0070:0F8E		     cmp     ah, 8
SEG0070:0F91		     jz	     short Bus_Problem
SEG0070:0F93		     cmp     ah, 15h
SEG0070:0F96		     jz	     short Bus_Problem
SEG0070:0F98		     call    cs:ORG13
SEG0070:0F9D		     jb	     short GOTERR13_br
SEG0070:0F9F		     retf    2
SEG0070:0FA2 ; ---------------------------------------------------------------------------
SEG0070:0FA2
SEG0070:0FA2 GOTERR13_br:			     ; CODE XREF: SEG0070:0F9Dj
SEG0070:0FA2		     jmp     Goterr13
SEG0070:0FA5 ; ---------------------------------------------------------------------------
SEG0070:0FA5
SEG0070:0FA5 Bus_Problem:			     ; CODE XREF: SEG0070:0F91j
SEG0070:0FA5					     ; SEG0070:0F96j
SEG0070:0FA5		     mov     cs:Prev_DX, dx
SEG0070:0FAA		     call    cs:ORG13
SEG0070:0FAF		     mov     cs:Save_AX, ax
SEG0070:0FB3		     mov     cs:Save_BX, bx
SEG0070:0FB8		     mov     cs:Save_CX, cx
SEG0070:0FBD		     mov     cs:Save_DX, dx
SEG0070:0FC2		     mov     cs:Save_DI, di
SEG0070:0FC7		     mov     cs:Save_SI, si
SEG0070:0FCC		     mov     cs:Save_BP, bp
SEG0070:0FD1		     mov     cs:Save_DS, ds
SEG0070:0FD6		     mov     cs:Save_ES, es
SEG0070:0FDB		     pushf
SEG0070:0FDC		     pop     cs:Save_Flag
SEG0070:0FE1		     mov     dx, cs:Prev_DX
SEG0070:0FE6		     pushf
SEG0070:0FE7		     mov     ah, 1
SEG0070:0FE9		     call    cs:ORG13
SEG0070:0FEE		     mov     ax, cs:Save_AX
SEG0070:0FF2		     mov     bx, cs:Save_BX
SEG0070:0FF7		     mov     cx, cs:Save_CX
SEG0070:0FFC		     mov     dx, cs:Save_DX
SEG0070:1001		     mov     di, cs:Save_DI
SEG0070:1006		     mov     si, cs:Save_SI
SEG0070:100B		     mov     bp, cs:Save_BP
SEG0070:1010		     mov     ds, cs:Save_DS
SEG0070:1015		     mov     es, cs:Save_ES
SEG0070:101A		     assume es:nothing
SEG0070:101A		     push    cs:Save_Flag
SEG0070:101F		     popf
SEG0070:1020		     jb	     short Goterr13
SEG0070:1022		     retf    2
SEG0070:1025 ; ---------------------------------------------------------------------------
SEG0070:1025
SEG0070:1025 Goterr13:				     ; CODE XREF: SEG0070:GOTERR13_brj
SEG0070:1025					     ; SEG0070:1020j
SEG0070:1025		     pushf
SEG0070:1026		     cmp     ah, 9
SEG0070:1029		     jnz     short CHECK_ECC
SEG0070:102B		     jmp     short GOTDMAERR
SEG0070:102D ; ---------------------------------------------------------------------------
SEG0070:102D		     nop
SEG0070:102E
SEG0070:102E CHECK_ECC:				     ; CODE XREF: SEG0070:1029j
SEG0070:102E		     cmp     ah, 11h
SEG0070:1031		     jz	     short OK11
SEG0070:1033		     popf
SEG0070:1034		     retf    2
SEG0070:1037 ; ---------------------------------------------------------------------------
SEG0070:1037
SEG0070:1037 OK11:				     ; CODE XREF: SEG0070:1031j
SEG0070:1037		     mov     ah, 0
SEG0070:1039		     call    cs:ORG13
SEG0070:103E		     mov     ax, cs:PrevOper
SEG0070:1042		     cmp     al, 1
SEG0070:1044		     jnz     short ECC_Err_Handle
SEG0070:1046		     xor     ah, ah
SEG0070:1048		     retf    2
SEG0070:104B ; ---------------------------------------------------------------------------
SEG0070:104B
SEG0070:104B ECC_Err_Handle:			     ; CODE XREF: SEG0070:1044j
SEG0070:104B		     push    bx
SEG0070:104C		     push    cx
SEG0070:104D		     push    dx
SEG0070:104E		     mov     cs:Number_Of_Sec, al
SEG0070:1052
SEG0070:1052 Loop_ECC:				     ; CODE XREF: SEG0070:107Dj
SEG0070:1052		     mov     ax, cs:PrevOper
SEG0070:1056		     mov     al, 1
SEG0070:1058		     call    Check_Wrap
SEG0070:105B		     pushf
SEG0070:105C		     call    cs:ORG13
SEG0070:1061		     jnb     short OK11_OP
SEG0070:1063		     cmp     ah, 11h
SEG0070:1066		     jnz     short OK11_EXIT_err
SEG0070:1068		     mov     ah, 0
SEG0070:106A		     pushf
SEG0070:106B		     call    cs:ORG13
SEG0070:1070
SEG0070:1070 OK11_OP:				     ; CODE XREF: SEG0070:1061j
SEG0070:1070		     dec     cs:Number_Of_Sec
SEG0070:1075		     jz	     short OK11_Exit
SEG0070:1077		     inc     cl
SEG0070:1079		     inc     bh
SEG0070:107B		     inc     bh
SEG0070:107D		     jmp     short Loop_ECC
SEG0070:107F ; ---------------------------------------------------------------------------
SEG0070:107F
SEG0070:107F OK11_EXIT_err:			     ; CODE XREF: SEG0070:1066j
SEG0070:107F		     stc
SEG0070:1080
SEG0070:1080 OK11_Exit:				     ; CODE XREF: SEG0070:1075j
SEG0070:1080		     pop     dx
SEG0070:1081		     pop     cx
SEG0070:1082		     pop     bx
SEG0070:1083		     retf    2
SEG0070:1086 ; ---------------------------------------------------------------------------
SEG0070:1086
SEG0070:1086 GOTDMAERR:				     ; CODE XREF: SEG0070:102Bj
SEG0070:1086		     pop     ax
SEG0070:1087		     mov     ax, cs:PrevOper
SEG0070:108B		     sti
SEG0070:108C		     cmp     ah, 2
SEG0070:108F		     jb	     short IntDone
SEG0070:1091		     cmp     ah, 4
SEG0070:1094		     jz	     short IntVerify
SEG0070:1096		     cmp     ah, 5
SEG0070:1099		     jz	     short IntFormat
SEG0070:109B		     ja	     short IntDone
SEG0070:109D		     push    dx
SEG0070:109E		     push    cx
SEG0070:109F		     push    bx
SEG0070:10A0		     push    ax
SEG0070:10A1		     push    bp
SEG0070:10A2		     mov     bp, sp
SEG0070:10A4		     mov     dx, es
SEG0070:10A6		     shl     dx, 1
SEG0070:10A8		     shl     dx, 1
SEG0070:10AA		     shl     dx, 1
SEG0070:10AC		     shl     dx, 1
SEG0070:10AE		     add     dx, bx
SEG0070:10B0		     add     dx, 511
SEG0070:10B4		     jnb     short NO_SKIP_FIRST
SEG0070:10B6		     mov     dh, [bp+9]
SEG0070:10B9		     jmp     Buffer
SEG0070:10BC ; ---------------------------------------------------------------------------
SEG0070:10BC
SEG0070:10BC NO_SKIP_FIRST:			     ; CODE XREF: SEG0070:10B4j
SEG0070:10BC		     shr     dh, 1
SEG0070:10BE		     mov     ah, 128
SEG0070:10C0		     sub     ah, dh
SEG0070:10C2		     cmp     ah, al
SEG0070:10C4		     jb	     short DoBlock
SEG0070:10C6		     mov     dh, [bp+9]
SEG0070:10C9		     call    DoInt
SEG0070:10CC		     jmp     Bad13
SEG0070:10CF ; ---------------------------------------------------------------------------
SEG0070:10CF
SEG0070:10CF IntVerify:				     ; CODE XREF: SEG0070:1094j
SEG0070:10CF		     push    es
SEG0070:10D0		     push    bx
SEG0070:10D1		     push    cs
SEG0070:10D2		     pop     es
SEG0070:10D3		     assume es:SEG0070
SEG0070:10D3
SEG0070:10D3 DoSimple:				     ; CODE XREF: SEG0070:10F5j
SEG0070:10D3		     mov     bx, offset	DiskSector
SEG0070:10D6		     pushf
SEG0070:10D7		     call    cs:ORG13
SEG0070:10DC		     pop     bx
SEG0070:10DD		     pop     es
SEG0070:10DE		     assume es:nothing
SEG0070:10DE		     retf    2
SEG0070:10E1 ; ---------------------------------------------------------------------------
SEG0070:10E1
SEG0070:10E1 IntFormat:				     ; CODE XREF: SEG0070:1099j
SEG0070:10E1		     push    es
SEG0070:10E2		     push    bx
SEG0070:10E3		     push    si
SEG0070:10E4		     push    di
SEG0070:10E5		     push    ds
SEG0070:10E6		     push    es
SEG0070:10E7		     push    cs
SEG0070:10E8		     pop     es
SEG0070:10E9		     assume es:SEG0070
SEG0070:10E9		     pop     ds
SEG0070:10EA		     mov     si, bx
SEG0070:10EC		     mov     di, 281h
SEG0070:10EF		     call    Move
SEG0070:10F2		     pop     ds
SEG0070:10F3		     pop     di
SEG0070:10F4		     pop     si
SEG0070:10F5		     jmp     short DoSimple
SEG0070:10F7 ; ---------------------------------------------------------------------------
SEG0070:10F7
SEG0070:10F7 IntDone:				     ; CODE XREF: SEG0070:108Fj
SEG0070:10F7					     ; SEG0070:109Bj
SEG0070:10F7		     jmp     cs:ORG13
SEG0070:10FC ; ---------------------------------------------------------------------------
SEG0070:10FC
SEG0070:10FC DoBlock:				     ; CODE XREF: SEG0070:10C4j
SEG0070:10FC		     mov     dx, [bp+8]
SEG0070:10FF		     push    di
SEG0070:1100		     push    ds
SEG0070:1101		     push    ax
SEG0070:1102		     mov     cs:PHYS_DRV, 1
SEG0070:1108		     mov     al, dl
SEG0070:110A		     call    SetDrive
SEG0070:110D		     pop     ax
SEG0070:110E		     mov     cs:PHYS_DRV, 0
SEG0070:1114		     test    word ptr [di+29h],	1
SEG0070:1119		     jnz     short DoBlockHard
SEG0070:111B		     mov     al, ah
SEG0070:111D		     jmp     short DoBlockCont
SEG0070:111F ; ---------------------------------------------------------------------------
SEG0070:111F
SEG0070:111F DoBlockHard:			     ; CODE XREF: SEG0070:1119j
SEG0070:111F		     push    cx
SEG0070:1120		     xor     cx, cx
SEG0070:1122		     mov     cx, [di+13h]
SEG0070:1125		     mov     ch, 63
SEG0070:1127		     sub     ch, cl
SEG0070:1129		     mov     al, ch
SEG0070:112B		     xchg    ah, al
SEG0070:112D		     pop     cx
SEG0070:112E
SEG0070:112E DoBlockCont:			     ; CODE XREF: SEG0070:111Dj
SEG0070:112E		     pop     ds
SEG0070:112F		     pop     di
SEG0070:1130
SEG0070:1130 DoBlockContinue:			     ; CODE XREF: SEG0070:1154j
SEG0070:1130		     cmp     ah, al
SEG0070:1132		     jnb     short DoBlocklast
SEG0070:1134		     push    ax
SEG0070:1135		     mov     al, ah
SEG0070:1137		     jmp     short DoBlockDoInt
SEG0070:1139 ; ---------------------------------------------------------------------------
SEG0070:1139
SEG0070:1139 DoBlocklast:			     ; CODE XREF: SEG0070:1132j
SEG0070:1139		     mov     ah, al
SEG0070:113B		     push    ax
SEG0070:113C
SEG0070:113C DoBlockDoInt:			     ; CODE XREF: SEG0070:1137j
SEG0070:113C		     call    DoInt
SEG0070:113F		     jb	     short Bad13
SEG0070:1141		     pop     ax
SEG0070:1142		     sub     [bp+2], ah
SEG0070:1145		     add     cl, ah
SEG0070:1147		     add     bh, ah
SEG0070:1149		     add     bh, ah
SEG0070:114B		     cmp     ah, al
SEG0070:114D		     jz	     short Buffer
SEG0070:114F		     sub     al, ah
SEG0070:1151		     call    Check_Wrap
SEG0070:1154		     jmp     short DoBlockContinue
SEG0070:1156 ; ---------------------------------------------------------------------------
SEG0070:1156
SEG0070:1156 Buffer:				     ; CODE XREF: SEG0070:10B9j
SEG0070:1156					     ; SEG0070:114Dj
SEG0070:1156		     push    bx
SEG0070:1157		     mov     ah, [bp+3]
SEG0070:115A		     cmp     ah, 3
SEG0070:115D		     jnz     short DoRead
SEG0070:115F		     push    ds
SEG0070:1160		     push    es
SEG0070:1161		     push    si
SEG0070:1162		     push    di
SEG0070:1163		     push    cs
SEG0070:1164		     push    es
SEG0070:1165		     pop     ds
SEG0070:1166		     assume ds:SEG0070
SEG0070:1166		     pop     es
SEG0070:1167		     assume es:nothing
SEG0070:1167		     mov     di, offset	DiskSector
SEG0070:116A		     push    di
SEG0070:116B		     mov     si, bx
SEG0070:116D		     call    Move
SEG0070:1170		     pop     bx
SEG0070:1171		     pop     di
SEG0070:1172		     pop     si
SEG0070:1173		     mov     al, 1
SEG0070:1175		     mov     dl, [bp+8]
SEG0070:1178		     call    Check_Wrap
SEG0070:117B		     call    DoInt
SEG0070:117E		     pop     es
SEG0070:117F		     pop     ds
SEG0070:1180		     assume ds:nothing
SEG0070:1180		     jb	     short Bad13
SEG0070:1182		     jmp     short DoTail
SEG0070:1184 ; ---------------------------------------------------------------------------
SEG0070:1184
SEG0070:1184 DoRead:				     ; CODE XREF: SEG0070:115Dj
SEG0070:1184		     push    es
SEG0070:1185		     push    bx
SEG0070:1186		     push    cs
SEG0070:1187		     pop     es
SEG0070:1188		     assume es:SEG0070
SEG0070:1188		     mov     bx, offset	DiskSector
SEG0070:118B		     mov     al, 1
SEG0070:118D		     mov     dl, [bp+8]
SEG0070:1190		     call    Check_Wrap
SEG0070:1193		     call    DoInt
SEG0070:1196		     pop     bx
SEG0070:1197		     pop     es
SEG0070:1198		     assume es:nothing
SEG0070:1198		     jb	     short Bad13
SEG0070:119A		     push    ds
SEG0070:119B		     push    si
SEG0070:119C		     push    di
SEG0070:119D		     push    cs
SEG0070:119E		     pop     ds
SEG0070:119F		     assume ds:SEG0070
SEG0070:119F		     mov     di, bx
SEG0070:11A1		     mov     si, offset	DiskSector
SEG0070:11A4		     call    Move
SEG0070:11A7		     pop     di
SEG0070:11A8		     pop     si
SEG0070:11A9		     pop     ds
SEG0070:11AA		     assume ds:nothing
SEG0070:11AA
SEG0070:11AA DoTail:				     ; CODE XREF: SEG0070:1182j
SEG0070:11AA		     pop     bx
SEG0070:11AB		     add     bh, 2
SEG0070:11AE		     inc     cx
SEG0070:11AF		     mov     al, [bp+2]
SEG0070:11B2		     clc
SEG0070:11B3		     dec     al
SEG0070:11B5		     jz	     short Bad13
SEG0070:11B7		     mov     dl, [bp+8]
SEG0070:11BA		     call    Check_Wrap
SEG0070:11BD		     call    DoInt
SEG0070:11C0
SEG0070:11C0 Bad13:				     ; CODE XREF: SEG0070:10CCj
SEG0070:11C0					     ; SEG0070:113Fj ...
SEG0070:11C0		     mov     sp, bp
SEG0070:11C2		     pop     bp
SEG0070:11C3		     pop     bx
SEG0070:11C4		     pop     bx
SEG0070:11C5		     pop     cx
SEG0070:11C6		     pop     dx
SEG0070:11C7		     retf    2
SEG0070:11C7 ; ---------------------------------------------------------------------------
SEG0070:11CA IOReadJumpTable db	   2		     ; DATA XREF: SEG0070:12F0o
SEG0070:11CB		     dw	offset GetDeviceParameters
SEG0070:11CD		     dw	offset ReadTrack
SEG0070:11CF		     dw	offset VerifyTrack
SEG0070:11D1 IOWriteJumpTable db    2		     ; DATA XREF: SEG0070:12F7o
SEG0070:11D2		     dw	offset SetDevParameters
SEG0070:11D4		     dw	offset WriteTrack
SEG0070:11D6		     dw	offset FormatTrack
SEG0070:11D8 SectorsPerTrack dw	0Fh		     ; DATA XREF: SEG0070:13D7w
SEG0070:11D8					     ; SEG0070:1500r ...
SEG0070:11DA TrackTable	     db	0, 0, 1, 2	     ; DATA XREF: SEG0070:13F3o
SEG0070:11DA					     ; SEG0070:14FBo ...
SEG0070:11DA		     db	0, 0, 2, 2
SEG0070:11DA		     db	0, 0, 3, 2
SEG0070:11DA		     db	0, 0, 4, 2
SEG0070:11DA		     db	0, 0, 5, 2
SEG0070:11DA		     db	0, 0, 6, 2
SEG0070:11DA		     db	0, 0, 7, 2
SEG0070:11DA		     db	0, 0, 8, 2
SEG0070:11DA		     db	0, 0, 9, 2
SEG0070:11DA		     db	0, 0, 10, 2
SEG0070:11DA		     db	0, 0, 11, 2
SEG0070:11DA		     db	0, 0, 12, 2
SEG0070:11DA		     db	0, 0, 13, 2
SEG0070:11DA		     db	0, 0, 14, 2
SEG0070:11DA		     db	0, 0, 15, 2
SEG0070:1216		     db	192 dup(0)
SEG0070:12D6 MediaType	     db	0		     ; DATA XREF: SEG0070:1393w
SEG0070:12D6					     ; SetDASD+34r
SEG0070:12D7 Media_Set_For_Format db 0		     ; DATA XREF: FormatStatus+Cr
SEG0070:12D7					     ; FormatStatus+78w ...
SEG0070:12D8 Had_Format_Error db 0		     ; DATA XREF: FormatStatus+4r
SEG0070:12D8					     ; FormatStatus+56r ...
SEG0070:12D9 TempDPT	     dd	0FFFFFFFFh	     ; DATA XREF: FormatStatus+66w
SEG0070:12D9					     ; RestoreOldDPT+13r ...
SEG0070:12DD ; ---------------------------------------------------------------------------
SEG0070:12DD
SEG0070:12DD GENERIC$IOCTL:			     ; DATA XREF: SEG0070:_2Aho
SEG0070:12DD		     les     bx, cs:PTRSAV
SEG0070:12E2		     call    SetDrive
SEG0070:12E5		     cmp     byte ptr es:[bx+0Dh], 8
SEG0070:12EA		     jnz     short IOCTL_Func_Err
SEG0070:12EC		     mov     al, es:[bx+0Eh]
SEG0070:12F0		     mov     si, offset	IOReadJumpTable
SEG0070:12F3		     test    al, 20h
SEG0070:12F5		     jnz     short NotGenericIoctlWrite
SEG0070:12F7		     mov     si, offset	IOWriteJumpTable
SEG0070:12FA
SEG0070:12FA NotGenericIoctlWrite:		     ; CODE XREF: SEG0070:12F5j
SEG0070:12FA		     and     al, 0Fh
SEG0070:12FC		     cmp     al, cs:[si]
SEG0070:12FF		     ja	     short IOCTL_Func_Err
SEG0070:1301		     cbw
SEG0070:1302		     shl     ax, 1
SEG0070:1304		     inc     si
SEG0070:1305		     add     si, ax
SEG0070:1307		     les     bx, es:[bx+13h]
SEG0070:130B		     call    word ptr cs:[si]
SEG0070:130E		     jb	     short FailGeneric$IOCTL
SEG0070:1310		     jmp     EXIT
SEG0070:1313 ; ---------------------------------------------------------------------------
SEG0070:1313
SEG0070:1313 FailGeneric$IOCTL:			     ; CODE XREF: SEG0070:130Ej
SEG0070:1313		     jmp     ERR$EXIT
SEG0070:1316 ; ---------------------------------------------------------------------------
SEG0070:1316
SEG0070:1316 IOCTL_Func_Err:			     ; CODE XREF: SEG0070:12EAj
SEG0070:1316					     ; SEG0070:12FFj
SEG0070:1316		     jmp     CMDERR
SEG0070:1319 ; ---------------------------------------------------------------------------
SEG0070:1319
SEG0070:1319 GetDeviceParameters:		     ; DATA XREF: SEG0070:11CBo
SEG0070:1319		     mov     al, [di+28h]
SEG0070:131C		     mov     es:[bx+1],	al
SEG0070:1320		     mov     ax, [di+29h]
SEG0070:1323		     and     ax, 3
SEG0070:1326		     mov     es:[bx+2],	ax
SEG0070:132A		     mov     ax, [di+2Bh]
SEG0070:132D		     mov     es:[bx+4],	ax
SEG0070:1331		     xor     al, al
SEG0070:1333		     mov     es:[bx+6],	al
SEG0070:1337		     lea     si, [di+2Dh]
SEG0070:133A		     test    byte ptr es:[bx], 1
SEG0070:133E		     jz	     short use_BPB_present
SEG0070:1340		     call    CHECKSINGLE
SEG0070:1343		     call    GETBP
SEG0070:1346		     jb	     short Get_Parm_Ret
SEG0070:1348		     lea     si, [di+6]
SEG0070:134B
SEG0070:134B use_BPB_present:			     ; CODE XREF: SEG0070:133Ej
SEG0070:134B		     lea     di, [bx+7]
SEG0070:134E		     mov     cx, 13h
SEG0070:1351		     rep movsb
SEG0070:1353		     clc
SEG0070:1354
SEG0070:1354 Get_Parm_Ret:			     ; CODE XREF: SEG0070:1346j
SEG0070:1354		     retn
SEG0070:1355 ; ---------------------------------------------------------------------------
SEG0070:1355
SEG0070:1355 SetDevParameters:			     ; DATA XREF: SEG0070:11D2o
SEG0070:1355		     or	     word ptr [di+29h],	140h
SEG0070:135A		     test    byte ptr es:[bx], 2
SEG0070:135E		     jz	     short SetDevParm_1
SEG0070:1360		     jmp     short SetTrackTable
SEG0070:1362 ; ---------------------------------------------------------------------------
SEG0070:1362		     nop
SEG0070:1363
SEG0070:1363 SetDevParm_1:			     ; CODE XREF: SEG0070:135Ej
SEG0070:1363		     mov     al, es:[bx+1]
SEG0070:1367		     mov     [di+28h], al
SEG0070:136A		     mov     ax, es:[bx+4]
SEG0070:136E		     mov     [di+2Bh], ax
SEG0070:1371		     mov     ax, es:[bx+2]
SEG0070:1375		     cmp     cs:fHave96, 0
SEG0070:137B		     jnz     short Have_Change
SEG0070:137D		     and     ax, 0FFFDh
SEG0070:1380
SEG0070:1380 Have_Change:			     ; CODE XREF: SEG0070:137Bj
SEG0070:1380		     and     ax, 3
SEG0070:1383		     mov     cx, [di+29h]
SEG0070:1386		     and     cx, 0FFF4h
SEG0070:138A		     or	     ax, cx
SEG0070:138C		     mov     [di+29h], ax
SEG0070:138F		     mov     al, es:[bx+6]
SEG0070:1393		     mov     cs:MediaType, al
SEG0070:1397		     or	     word ptr [di+29h],	80h
SEG0070:139C		     push    ds
SEG0070:139D		     push    di
SEG0070:139E		     push    es
SEG0070:139F		     push    bx
SEG0070:13A0		     test    byte ptr es:[bx], 1
SEG0070:13A4		     jnz     short InstallFakeBPB
SEG0070:13A6		     test    word ptr [di+29h],	4
SEG0070:13AB		     jz	     short InstallRecommendedBPB
SEG0070:13AD		     and     word ptr [di+29h],	0FFFBh
SEG0070:13B2		     jmp     short DoneWithBPBstuff
SEG0070:13B4 ; ---------------------------------------------------------------------------
SEG0070:13B4		     nop
SEG0070:13B5
SEG0070:13B5 InstallRecommendedBPB:		     ; CODE XREF: SEG0070:13ABj
SEG0070:13B5		     mov     cx, 1Fh
SEG0070:13B8		     lea     di, [di+2Dh]
SEG0070:13BB		     jmp     short CopyTheBPB
SEG0070:13BD ; ---------------------------------------------------------------------------
SEG0070:13BD
SEG0070:13BD InstallFakeBPB:			     ; CODE XREF: SEG0070:13A4j
SEG0070:13BD		     mov     cx, 13h
SEG0070:13C0		     lea     di, [di+6]
SEG0070:13C3
SEG0070:13C3 CopyTheBPB:			     ; CODE XREF: SEG0070:13BBj
SEG0070:13C3		     lea     si, [bx+7]
SEG0070:13C6		     push    es
SEG0070:13C7		     push    ds
SEG0070:13C8		     pop     es
SEG0070:13C9		     pop     ds
SEG0070:13CA		     rep movsb
SEG0070:13CC
SEG0070:13CC DoneWithBPBstuff:			     ; CODE XREF: SEG0070:13B2j
SEG0070:13CC		     call    RestoreOldDPT
SEG0070:13CF		     pop     bx
SEG0070:13D0		     pop     es
SEG0070:13D1		     pop     di
SEG0070:13D2		     pop     ds
SEG0070:13D3
SEG0070:13D3 SetTrackTable:			     ; CODE XREF: SEG0070:1360j
SEG0070:13D3		     mov     cx, es:[bx+26h]
SEG0070:13D7		     mov     cs:SectorsPerTrack, cx
SEG0070:13DC		     and     word ptr [di+29h],	0FFF7h
SEG0070:13E1		     test    byte ptr es:[bx], 4
SEG0070:13E5		     jz	     short UglyTrackLayout
SEG0070:13E7		     or	     word ptr [di+29h],	8
SEG0070:13EC
SEG0070:13EC UglyTrackLayout:			     ; CODE XREF: SEG0070:13E5j
SEG0070:13EC		     cmp     cx, 63
SEG0070:13EF		     ja	     short TooManySectorsPerTrack
SEG0070:13F1		     jcxz    short SectorInfoSaved
SEG0070:13F3		     mov     di, offset	TrackTable
SEG0070:13F6		     lea     si, [bx+28h]
SEG0070:13F9		     push    es
SEG0070:13FA		     pop     ds
SEG0070:13FB		     push    cs
SEG0070:13FC		     pop     es
SEG0070:13FD		     assume es:SEG0070
SEG0070:13FD
SEG0070:13FD TrackLoop:				     ; CODE XREF: SEG0070:1409j
SEG0070:13FD		     inc     di
SEG0070:13FE		     inc     di
SEG0070:13FF		     lodsw
SEG0070:1400		     push    ax
SEG0070:1401		     lodsw
SEG0070:1402		     call    SectorSizeToSectorIndex
SEG0070:1405		     pop     dx
SEG0070:1406		     mov     al, dl
SEG0070:1408		     stosw
SEG0070:1409		     loop    TrackLoop
SEG0070:140B
SEG0070:140B SectorInfoSaved:			     ; CODE XREF: SEG0070:13F1j
SEG0070:140B		     clc
SEG0070:140C		     retn
SEG0070:140D ; ---------------------------------------------------------------------------
SEG0070:140D
SEG0070:140D TooManySectorsPerTrack:		     ; CODE XREF: SEG0070:13EFj
SEG0070:140D		     mov     al, 0Ch
SEG0070:140F		     stc
SEG0070:1410		     retn
SEG0070:1411
SEG0070:1411 ; =============== S U B R O U T I N E =======================================
SEG0070:1411
SEG0070:1411
SEG0070:1411 FormatStatus    proc near		     ; CODE XREF: SEG0070:Do_Status_Onlyp
SEG0070:1411					     ; SEG0070:14D3p ...
SEG0070:1411		     push    cx
SEG0070:1412		     push    dx
SEG0070:1413		     xor     ax, ax
SEG0070:1415		     cmp     cs:Had_Format_Error, 1
SEG0070:141B		     jz	     short Fstat01
SEG0070:141D		     cmp     cs:Media_Set_For_Format, 1
SEG0070:1423		     jnz     short FStat03
SEG0070:1425		     jmp     Stat_Ret
SEG0070:1428 ; ---------------------------------------------------------------------------
SEG0070:1428
SEG0070:1428 Fstat01:				     ; CODE XREF: FormatStatus+Aj
SEG0070:1428		     call    ResetDisk
SEG0070:142B
SEG0070:142B FStat03:				     ; CODE XREF: FormatStatus+12j
SEG0070:142B		     push    ds
SEG0070:142C		     push    si
SEG0070:142D		     mov     ds, ax
SEG0070:142F		     lds     si, ds:78h
SEG0070:1433		     mov     word ptr cs:DPT, si
SEG0070:1438		     mov     word ptr cs:DPT+2,	ds
SEG0070:143D		     pop     si
SEG0070:143E		     pop     ds
SEG0070:143F		     mov     cs:New_Rom, 1
SEG0070:1445		     xor     al, al
SEG0070:1447		     mov     ax, [di+2Bh]
SEG0070:144A		     mov     cx, [di+13h]
SEG0070:144D		     mov     ch, al
SEG0070:144F		     dec     ch
SEG0070:1451		     ror     ah, 1
SEG0070:1453		     ror     ah, 1
SEG0070:1455		     and     ah, 0Ch
SEG0070:1458		     or	     cl, ah
SEG0070:145A		     mov     dl, [di+4]
SEG0070:145D		     mov     ah, 18h
SEG0070:145F		     push    es
SEG0070:1460		     push    ds
SEG0070:1461		     push    si
SEG0070:1462		     push    di
SEG0070:1463		     int     13h	     ; DISK - SET MEDIA	TYPE FOR FORMAT	(AT model 3x9,XT2,XT286,PS)
SEG0070:1463					     ; DL = drive number, CH = lower 8 bits of number of tracks, CL = sectors per track
SEG0070:1465		     jb	     short Format_Stat_Err
SEG0070:1467		     cmp     cs:Had_Format_Error, 1
SEG0070:146D		     jz	     short Fstat04
SEG0070:146F
SEG0070:146F Fstat02:
SEG0070:146F		     xor     cx, cx
SEG0070:1471		     mov     ds, cx
SEG0070:1473		     assume ds:SEG0070
SEG0070:1473		     lds     si, dword ptr _78h
SEG0070:1477		     assume ds:nothing
SEG0070:1477		     mov     word ptr cs:TempDPT, si
SEG0070:147C		     mov     word ptr cs:TempDPT+2, ds
SEG0070:1481		     mov     ds:78h, di
SEG0070:1485		     mov     word ptr ds:7Ah, es
SEG0070:1489		     mov     cs:Media_Set_For_Format, 1
SEG0070:148F
SEG0070:148F Fstat04:				     ; CODE XREF: FormatStatus+5Cj
SEG0070:148F		     xor     al, al
SEG0070:1491		     mov     cs:Had_Format_Error, al
SEG0070:1495		     jmp     short Pop_Stat_Ret
SEG0070:1497 ; ---------------------------------------------------------------------------
SEG0070:1497
SEG0070:1497 Format_Stat_Err:			     ; CODE XREF: FormatStatus+54j
SEG0070:1497		     cmp     ah, 0Ch
SEG0070:149A		     jz	     short Fstat05
SEG0070:149C		     cmp     ah, 80h ; ''
SEG0070:149F		     jz	     short Fstat06
SEG0070:14A1		     mov     al, 1
SEG0070:14A3		     mov     cs:New_Rom, 0
SEG0070:14A9		     jmp     short Pop_Stat_Ret
SEG0070:14AB ; ---------------------------------------------------------------------------
SEG0070:14AB
SEG0070:14AB Fstat05:				     ; CODE XREF: FormatStatus+89j
SEG0070:14AB		     mov     al, 2
SEG0070:14AD		     jmp     short Pop_Stat_Ret
SEG0070:14AF ; ---------------------------------------------------------------------------
SEG0070:14AF
SEG0070:14AF Fstat06:				     ; CODE XREF: FormatStatus+8Ej
SEG0070:14AF		     mov     al, 3
SEG0070:14B1
SEG0070:14B1 Pop_Stat_Ret:			     ; CODE XREF: FormatStatus+84j
SEG0070:14B1					     ; FormatStatus+98j ...
SEG0070:14B1		     pop     di
SEG0070:14B2		     pop     si
SEG0070:14B3		     pop     ds
SEG0070:14B4		     pop     es
SEG0070:14B5		     assume es:nothing
SEG0070:14B5
SEG0070:14B5 Stat_Ret:				     ; CODE XREF: FormatStatus+14j
SEG0070:14B5		     pop     dx
SEG0070:14B6		     pop     cx
SEG0070:14B7		     retn
SEG0070:14B7 FormatStatus    endp
SEG0070:14B7
SEG0070:14B8 ; ---------------------------------------------------------------------------
SEG0070:14B8
SEG0070:14B8 FormatTrack:			     ; DATA XREF: SEG0070:11D6o
SEG0070:14B8		     test    byte ptr es:[bx], 1
SEG0070:14BC		     jz	     short SkipStatusOnly
SEG0070:14BE
SEG0070:14BE Do_Status_Only:
SEG0070:14BE		     call    FormatStatus
SEG0070:14C1		     mov     es:[bx], al
SEG0070:14C4		     clc
SEG0070:14C5		     retn
SEG0070:14C6 ; ---------------------------------------------------------------------------
SEG0070:14C6
SEG0070:14C6 SkipStatusOnly:			     ; CODE XREF: SEG0070:14BCj
SEG0070:14C6		     cmp     byte ptr [di+28h],	5
SEG0070:14CA		     jnz     short SkipVerify
SEG0070:14CC		     jmp     DoVerifyTrack
SEG0070:14CF ; ---------------------------------------------------------------------------
SEG0070:14CF
SEG0070:14CF SkipVerify:			     ; CODE XREF: SEG0070:14CAj
SEG0070:14CF		     push    ds
SEG0070:14D0		     push    di
SEG0070:14D1		     push    es
SEG0070:14D2		     push    bx
SEG0070:14D3		     call    FormatStatus
SEG0070:14D6		     cmp     al, 1
SEG0070:14D8		     jz	     short NeedToSetDasd
SEG0070:14DA		     cmp     al, 3
SEG0070:14DC		     jnz     short NoSetDasd
SEG0070:14DE		     jmp     short Format_Failed
SEG0070:14E0 ; ---------------------------------------------------------------------------
SEG0070:14E0		     nop
SEG0070:14E1
SEG0070:14E1 NeedToSetDasd:			     ; CODE XREF: SEG0070:14D8j
SEG0070:14E1		     call    SetDASD
SEG0070:14E4
SEG0070:14E4 NoSetDasd:				     ; CODE XREF: SEG0070:14DCj
SEG0070:14E4		     call    CHECKSINGLE
SEG0070:14E7		     mov     ax, es:[bx+3]
SEG0070:14EB		     mov     cs:TRKNUM,	ax
SEG0070:14EF		     mov     cx, es:[bx+1]
SEG0070:14F3		     mov     cs:HDNUM, cl
SEG0070:14F8		     mov     ah, cl
SEG0070:14FA		     push    di
SEG0070:14FB		     mov     di, offset	TrackTable
SEG0070:14FE		     push    cs
SEG0070:14FF		     pop     es
SEG0070:1500		     assume es:SEG0070
SEG0070:1500		     mov     cx, cs:SectorsPerTrack
SEG0070:1505
SEG0070:1505 SetUpLoop:				     ; CODE XREF: SEG0070:1508j
SEG0070:1505		     stosw
SEG0070:1506		     inc     di
SEG0070:1507		     inc     di
SEG0070:1508		     loop    SetUpLoop
SEG0070:150A
SEG0070:150A EndSetUpTrackTable:
SEG0070:150A		     pop     di
SEG0070:150B		     mov     cx, 5
SEG0070:150E
SEG0070:150E FormatRetry:			     ; CODE XREF: SEG0070:1539j
SEG0070:150E		     push    cx
SEG0070:150F		     mov     bx, offset	TrackTable
SEG0070:1512		     push    cs
SEG0070:1513		     pop     es
SEG0070:1514		     mov     ax, cs:SectorsPerTrack
SEG0070:1518		     mov     ah, 5
SEG0070:151A		     call    to_rom
SEG0070:151D		     pop     cx
SEG0070:151E		     jnb     short FormatOk
SEG0070:1520
SEG0070:1520 FormatError:
SEG0070:1520		     call    ResetDisk
SEG0070:1523		     mov     cs:Had_Format_Error, 1
SEG0070:1529		     push    ax
SEG0070:152A		     push    cx
SEG0070:152B		     push    dx
SEG0070:152C		     call    FormatStatus
SEG0070:152F		     cmp     al, 1
SEG0070:1531		     jnz     short While_Err
SEG0070:1533		     call    SetDASD
SEG0070:1536
SEG0070:1536 While_Err:				     ; CODE XREF: SEG0070:1531j
SEG0070:1536		     pop     dx
SEG0070:1537		     pop     cx
SEG0070:1538		     pop     ax
SEG0070:1539		     loop    FormatRetry
SEG0070:153B
SEG0070:153B Format_Failed:			     ; CODE XREF: SEG0070:14DEj
SEG0070:153B		     mov     cs:Had_Format_Error, 1
SEG0070:1541		     cmp     ah, 6
SEG0070:1544		     jnz     short Map_Err
SEG0070:1546		     mov     ah, 80h ; ''
SEG0070:1548
SEG0070:1548 Map_Err:				     ; CODE XREF: SEG0070:1544j
SEG0070:1548		     call    MAPERROR
SEG0070:154B		     pop     bx
SEG0070:154C		     pop     es
SEG0070:154D		     assume es:nothing
SEG0070:154D		     pop     di
SEG0070:154E		     pop     ds
SEG0070:154F		     retn
SEG0070:1550 ; ---------------------------------------------------------------------------
SEG0070:1550
SEG0070:1550 FormatOk:				     ; CODE XREF: SEG0070:151Ej
SEG0070:1550		     mov     cs:Had_Format_Error, 0
SEG0070:1556		     pop     bx
SEG0070:1557		     pop     es
SEG0070:1558		     pop     di
SEG0070:1559		     pop     ds
SEG0070:155A
SEG0070:155A DoVerifyTrack:			     ; CODE XREF: SEG0070:14CCj
SEG0070:155A		     call    VerifyTrack
SEG0070:155D		     retn
SEG0070:155E
SEG0070:155E ; =============== S U B R O U T I N E =======================================
SEG0070:155E
SEG0070:155E
SEG0070:155E VerifyTrack     proc near		     ; CODE XREF: SEG0070:DoVerifyTrackp
SEG0070:155E					     ; DATA XREF: SEG0070:11CFo
SEG0070:155E		     mov     byte ptr cs:WRTVERIFY, 4
SEG0070:1564		     mov     ax, es:[bx+3]
SEG0070:1568		     mov     cs:CURTRK,	ax
SEG0070:156C		     mov     ax, es:[bx+1]
SEG0070:1570		     mov     cs:CURHD, al
SEG0070:1574		     xor     ax, ax
SEG0070:1576		     mov     cx, cs:SectorsPerTrack
SEG0070:157B		     xor     bx, bx
SEG0070:157D		     mov     es, bx
SEG0070:157F		     assume es:SEG0070
SEG0070:157F		     call    TrackIO
SEG0070:1582		     retn
SEG0070:1582 VerifyTrack     endp
SEG0070:1582
SEG0070:1583 ; ---------------------------------------------------------------------------
SEG0070:1583
SEG0070:1583 ReadTrack:				     ; DATA XREF: SEG0070:11CDo
SEG0070:1583		     mov     byte ptr cs:WRTVERIFY, 2
SEG0070:1589		     jmp     short ReadWriteTrack
SEG0070:158B ; ---------------------------------------------------------------------------
SEG0070:158B		     nop
SEG0070:158C
SEG0070:158C WriteTrack:			     ; DATA XREF: SEG0070:11D4o
SEG0070:158C		     mov     byte ptr cs:WRTVERIFY, 3
SEG0070:1592		     jmp     short ReadWriteTrack
SEG0070:1594 ; ---------------------------------------------------------------------------
SEG0070:1594		     nop
SEG0070:1595
SEG0070:1595 ReadWriteTrack:			     ; CODE XREF: SEG0070:1589j
SEG0070:1595					     ; SEG0070:1592j
SEG0070:1595		     mov     ax, es:[bx+3]
SEG0070:1599		     mov     cs:CURTRK,	ax
SEG0070:159D		     mov     ax, es:[bx+1]
SEG0070:15A1		     mov     cs:CURHD, al
SEG0070:15A5		     mov     ax, es:[bx+5]
SEG0070:15A9		     mov     cx, es:[bx+7]
SEG0070:15AD		     les     bx, es:[bx+9]
SEG0070:15B1		     assume es:nothing
SEG0070:15B1		     call    TrackIO
SEG0070:15B4		     retn
SEG0070:15B5
SEG0070:15B5 ; =============== S U B R O U T I N E =======================================
SEG0070:15B5
SEG0070:15B5
SEG0070:15B5 TrackIO	     proc near		     ; CODE XREF: VerifyTrack+21p
SEG0070:15B5					     ; SEG0070:15B1p
SEG0070:15B5		     mov     cs:SPSAV, sp
SEG0070:15BA		     call    CHECKSINGLE
SEG0070:15BD		     cmp     cs:Media_Set_For_Format, 1
SEG0070:15C3		     jz	     short DPTAlreadySet
SEG0070:15C5		     push    ax
SEG0070:15C6		     push    cx
SEG0070:15C7		     call    IOSetUp
SEG0070:15CA		     pop     cx
SEG0070:15CB		     pop     ax
SEG0070:15CC
SEG0070:15CC DPTAlreadySet:			     ; CODE XREF: TrackIO+Ej
SEG0070:15CC		     mov     si, offset	TrackTable
SEG0070:15CF		     shl     ax, 1
SEG0070:15D1		     shl     ax, 1
SEG0070:15D3		     add     si, ax
SEG0070:15D5		     mov     dx, 1
SEG0070:15D8		     test    word ptr [di+29h],	8
SEG0070:15DD		     jz	     short IOnextSector
SEG0070:15DF		     xchg    dx, cx
SEG0070:15E1
SEG0070:15E1 IOnextSector:			     ; CODE XREF: TrackIO+28j
SEG0070:15E1					     ; TrackIO+72j
SEG0070:15E1		     push    cx
SEG0070:15E2		     push    dx
SEG0070:15E3		     inc     si
SEG0070:15E4		     inc     si
SEG0070:15E5		     lods    byte ptr cs:[si]
SEG0070:15E7		     mov     cs:CURSEC,	al
SEG0070:15EB		     test    word ptr [di+29h],	1
SEG0070:15F0		     jz	     short IOREMOVABLE
SEG0070:15F2		     mov     cs:SECCNT,	dx
SEG0070:15F7		     mov     ax, dx
SEG0070:15F9		     call    DISK
SEG0070:15FC		     pop     dx
SEG0070:15FD		     pop     cx
SEG0070:15FE		     clc
SEG0070:15FF		     retn
SEG0070:1600 ; ---------------------------------------------------------------------------
SEG0070:1600
SEG0070:1600 IOREMOVABLE:			     ; CODE XREF: TrackIO+3Bj
SEG0070:1600		     lods    byte ptr cs:[si]
SEG0070:1602		     push    ax
SEG0070:1603		     push    si
SEG0070:1604		     push    ds
SEG0070:1605		     lds     si, cs:DPT
SEG0070:160A		     mov     [si+3], al
SEG0070:160D		     mov     al, cs:EOT
SEG0070:1611		     mov     [si+4], al
SEG0070:1614		     pop     ds
SEG0070:1615		     mov     al, dl
SEG0070:1617
SEG0070:1617 DoTheIO:
SEG0070:1617		     mov     cs:SECCNT,	ax
SEG0070:161B		     call    DISK
SEG0070:161E		     pop     si
SEG0070:161F		     pop     ax
SEG0070:1620		     call    SectorSizeIndexToSectorSize
SEG0070:1623		     add     bx, ax
SEG0070:1625		     pop     dx
SEG0070:1626		     pop     cx
SEG0070:1627		     loop    IOnextSector
SEG0070:1629		     call    DONE
SEG0070:162C		     clc
SEG0070:162D		     retn
SEG0070:162D TrackIO	     endp
SEG0070:162D
SEG0070:162E
SEG0070:162E ; =============== S U B R O U T I N E =======================================
SEG0070:162E
SEG0070:162E
SEG0070:162E SectorSizeToSectorIndex proc near	     ; CODE XREF: SEG0070:1402p
SEG0070:162E		     cmp     ah, 2
SEG0070:1631		     ja	     short OneK
SEG0070:1633		     mov     al, ah
SEG0070:1635		     retn
SEG0070:1636 ; ---------------------------------------------------------------------------
SEG0070:1636
SEG0070:1636 OneK:				     ; CODE XREF: SectorSizeToSectorIndex+3j
SEG0070:1636		     mov     al, 3
SEG0070:1638		     retn
SEG0070:1638 SectorSizeToSectorIndex endp
SEG0070:1638
SEG0070:1639
SEG0070:1639 ; =============== S U B R O U T I N E =======================================
SEG0070:1639
SEG0070:1639
SEG0070:1639 SectorSizeIndexToSectorSize proc near   ; CODE XREF: TrackIO+6Bp
SEG0070:1639		     mov     cl, al
SEG0070:163B		     mov     ax, 80h ; ''
SEG0070:163E		     shl     ax, cl
SEG0070:1640		     retn
SEG0070:1640 SectorSizeIndexToSectorSize endp
SEG0070:1640
SEG0070:1641
SEG0070:1641 ; =============== S U B R O U T I N E =======================================
SEG0070:1641
SEG0070:1641
SEG0070:1641 SetDASD	     proc near		     ; CODE XREF: SEG0070:NeedToSetDasdp
SEG0070:1641					     ; SEG0070:1533p
SEG0070:1641		     cmp     cs:Had_Format_Error, 1
SEG0070:1647		     jz	     short DoSetDasd
SEG0070:1649		     test    word ptr [di+29h],	80h
SEG0070:164E		     jz	     short DASDhasBeenSet
SEG0070:1650		     and     word ptr [di+29h],	0FF7Fh
SEG0070:1655
SEG0070:1655 DoSetDasd:				     ; CODE XREF: SetDASD+6j
SEG0070:1655		     mov     cs:Had_Format_Error, 0
SEG0070:165B		     mov     cs:GAP_PATCH, 50h ; 'P'
SEG0070:1661		     mov     al, 4
SEG0070:1663		     cmp     byte ptr [di+28h],	2
SEG0070:1667		     jz	     short Do_Set
SEG0070:1669		     cmp     byte ptr [di+28h],	1
SEG0070:166D		     jz	     short GotBig
SEG0070:166F		     mov     al, 1
SEG0070:1671		     jmp     short Do_Set
SEG0070:1673 ; ---------------------------------------------------------------------------
SEG0070:1673
SEG0070:1673 GotBig:				     ; CODE XREF: SetDASD+2Cj
SEG0070:1673		     mov     al, 2
SEG0070:1675		     cmp     cs:MediaType, 0
SEG0070:167B		     jnz     short Do_Set
SEG0070:167D		     mov     al, 3
SEG0070:167F		     mov     cs:GAP_PATCH, 54h ; 'T'
SEG0070:1685
SEG0070:1685 Do_Set:				     ; CODE XREF: SetDASD+26j
SEG0070:1685					     ; SetDASD+30j ...
SEG0070:1685		     mov     dl, [di+4]
SEG0070:1688		     mov     ah, 17h
SEG0070:168A		     int     13h	     ; DISK - DISK - SET TYPE (AT,XT2,XT286,CONV,PS
SEG0070:168A					     ; AL = disk type AL = 03h - high-capacity disk in high-capacity drive
SEG0070:168C
SEG0070:168C DASDhasBeenSet:			     ; CODE XREF: SetDASD+Dj
SEG0070:168C		     mov     ah, [di+13h]
SEG0070:168F		     mov     cs:FORMT_EOT, ah
SEG0070:1694		     retn
SEG0070:1694 SetDASD	     endp
SEG0070:1694
SEG0070:1695
SEG0070:1695 ; =============== S U B R O U T I N E =======================================
SEG0070:1695
SEG0070:1695
SEG0070:1695 Again	     proc near		     ; CODE XREF: read_sector:Rd_rtyp
SEG0070:1695					     ; DISK+B8p
SEG0070:1695		     call    ResetDisk
SEG0070:1698		     dec     bp
SEG0070:1699		     retn
SEG0070:1699 Again	     endp
SEG0070:1699
SEG0070:169A
SEG0070:169A ; =============== S U B R O U T I N E =======================================
SEG0070:169A
SEG0070:169A
SEG0070:169A ResetDisk	     proc near		     ; CODE XREF: FormatStatus:Fstat01p
SEG0070:169A					     ; SEG0070:FormatErrorp ...
SEG0070:169A		     push    ax
SEG0070:169B		     xor     ah, ah
SEG0070:169D		     int     13h	     ; DISK - RESET DISK SYSTEM
SEG0070:169D					     ; DL = drive (if bit 7 is set both	hard disks and floppy disks reset)
SEG0070:169F		     mov     cs:STEP_DRV, 0FFh
SEG0070:16A5		     pop     ax
SEG0070:16A6		     retn
SEG0070:16A6 ResetDisk	     endp
SEG0070:16A6
SEG0070:16A7
SEG0070:16A7 ; =============== S U B R O U T I N E =======================================
SEG0070:16A7
SEG0070:16A7
SEG0070:16A7 to_rom	     proc near		     ; CODE XREF: SEG0070:151Ap
SEG0070:16A7		     push    ds
SEG0070:16A8		     push    di
SEG0070:16A9		     push    es
SEG0070:16AA		     push    bx
SEG0070:16AB		     push    si
SEG0070:16AC		     test    cs:New_Rom, 1
SEG0070:16B2		     jnz     short Got_Valid_DPT
SEG0070:16B4		     push    ax
SEG0070:16B5		     mov     dx, ds
SEG0070:16B7		     xor     ax, ax
SEG0070:16B9		     mov     ds, ax
SEG0070:16BB		     assume ds:SEG0070
SEG0070:16BB		     lds     si, dword ptr _78h
SEG0070:16BF		     assume ds:nothing
SEG0070:16BF		     mov     word ptr cs:DPT, si
SEG0070:16C4		     mov     word ptr cs:DPT+2,	ds
SEG0070:16C9		     mov     al, cs:FORMT_EOT
SEG0070:16CD		     mov     [si+4], al
SEG0070:16D0		     mov     al, cs:GAP_PATCH
SEG0070:16D4		     mov     [si+7], al
SEG0070:16D7		     mov     byte ptr [si+9], 0Fh
SEG0070:16DB		     push    es
SEG0070:16DC		     mov     es, dx
SEG0070:16DE		     cmp     byte ptr es:[di+28h], 2
SEG0070:16E3		     jnz     short To_ROM2
SEG0070:16E5		     mov     al, 4
SEG0070:16E7		     xchg    al, [si+0Ah]
SEG0070:16EA
SEG0070:16EA To_ROM2:				     ; CODE XREF: to_rom+3Cj
SEG0070:16EA		     pop     es
SEG0070:16EB		     mov     ds, dx
SEG0070:16ED		     pop     ax
SEG0070:16EE
SEG0070:16EE Got_Valid_DPT:			     ; CODE XREF: to_rom+Bj
SEG0070:16EE		     mov     dx, cs:TRKNUM
SEG0070:16F3		     mov     ch, dl
SEG0070:16F5		     mov     dl, [di+4]
SEG0070:16F8		     mov     dh, cs:HDNUM
SEG0070:16FD		     int     13h	     ; DISK -
SEG0070:16FF		     pop     si
SEG0070:1700		     pop     bx
SEG0070:1701		     pop     es
SEG0070:1702		     pop     di
SEG0070:1703		     pop     ds
SEG0070:1704		     retn
SEG0070:1704 to_rom	     endp
SEG0070:1704
SEG0070:1705 ; ---------------------------------------------------------------------------
SEG0070:1705
SEG0070:1705 IOCTL$GETOWN:			     ; DATA XREF: SEG0070:_32ho
SEG0070:1705		     call    SetDrive
SEG0070:1708		     mov     al, [di+4]
SEG0070:170B		     push    cs
SEG0070:170C		     pop     ds
SEG0070:170D		     assume ds:SEG0070
SEG0070:170D		     mov     di, cs:START_BDS
SEG0070:1712
SEG0070:1712 Own_Loop:				     ; CODE XREF: SEG0070:1725j
SEG0070:1712		     cmp     [di+4], al
SEG0070:1715		     jnz     short GetNextBDS
SEG0070:1717		     test    word ptr [di+29h],	20h
SEG0070:171C		     jnz     short Done_GetOwn
SEG0070:171E
SEG0070:171E GetNextBDS:			     ; CODE XREF: SEG0070:1715j
SEG0070:171E		     mov     bx, [di+2]
SEG0070:1721		     mov     di, [di]
SEG0070:1723		     mov     ds, bx
SEG0070:1725		     assume ds:nothing
SEG0070:1725		     jmp     short Own_Loop
SEG0070:1727 ; ---------------------------------------------------------------------------
SEG0070:1727
SEG0070:1727 Done_GetOwn:			     ; CODE XREF: SEG0070:171Cj
SEG0070:1727		     jmp     short EXIT_OWN
SEG0070:1729 ; ---------------------------------------------------------------------------
SEG0070:1729
SEG0070:1729 IOCTL$SETOWN:			     ; DATA XREF: SEG0070:_34ho
SEG0070:1729		     call    SetDrive
SEG0070:172C		     mov     cs:fSetOwner, 1
SEG0070:1732		     call    CHECKSINGLE
SEG0070:1735		     mov     cs:fSetOwner, 0
SEG0070:173B		     xor     bx, bx
SEG0070:173D		     mov     es, bx
SEG0070:173F		     assume es:SEG0070
SEG0070:173F		     mov     cl, 0FFh
SEG0070:1741		     mov     byte ptr es:LSTDRV, cl
SEG0070:1746
SEG0070:1746 EXIT_OWN:				     ; CODE XREF: SEG0070:Done_GetOwnj
SEG0070:1746		     xor     cl, cl
SEG0070:1748		     test    word ptr [di+29h],	10h
SEG0070:174D		     jz	     short EXIT_NO_MULT
SEG0070:174F		     mov     cl, [di+5]
SEG0070:1752		     inc     cl
SEG0070:1754
SEG0070:1754 EXIT_NO_MULT:			     ; CODE XREF: SEG0070:174Dj
SEG0070:1754		     lds     bx, cs:PTRSAV
SEG0070:1759		     mov     [bx+1], cl
SEG0070:175C		     jmp     EXIT
SEG0070:175F
SEG0070:175F ; =============== S U B R O U T I N E =======================================
SEG0070:175F
SEG0070:175F
SEG0070:175F RestoreOldDPT   proc near		     ; CODE XREF: SEG0070:DoneWithBPBstuffp
SEG0070:175F		     push    ax
SEG0070:1760		     xor     al, al
SEG0070:1762		     mov     cs:Had_Format_Error, al
SEG0070:1766		     xchg    al, cs:Media_Set_For_Format
SEG0070:176B		     or	     al, al
SEG0070:176D		     jz	     short DontRestore
SEG0070:176F		     push    si
SEG0070:1770		     push    ds
SEG0070:1771		     push    es
SEG0070:1772		     lds     si, cs:TempDPT
SEG0070:1777		     xor     ax, ax
SEG0070:1779		     mov     es, ax
SEG0070:177B		     mov     es:_78h, si
SEG0070:1780		     mov     es:_7Ah, ds
SEG0070:1785
SEG0070:1785 GotCurrentDPT:
SEG0070:1785		     pop     es
SEG0070:1786		     assume es:nothing
SEG0070:1786		     pop     ds
SEG0070:1787		     pop     si
SEG0070:1788
SEG0070:1788 DontRestore:			     ; CODE XREF: RestoreOldDPT+Ej
SEG0070:1788		     pop     ax
SEG0070:1789		     clc
SEG0070:178A		     retn
SEG0070:178A RestoreOldDPT   endp
SEG0070:178A
SEG0070:178B
SEG0070:178B ; =============== S U B R O U T I N E =======================================
SEG0070:178B
SEG0070:178B
SEG0070:178B Check_Wrap	     proc near		     ; CODE XREF: SEG0070:1058p
SEG0070:178B					     ; SEG0070:1151p ...
SEG0070:178B		     push    ax
SEG0070:178C		     push    bx
SEG0070:178D		     push    ds
SEG0070:178E		     push    di
SEG0070:178F		     mov     cs:PHYS_DRV, 1
SEG0070:1795		     mov     al, dl
SEG0070:1797		     call    SetDrive
SEG0070:179A		     mov     cs:PHYS_DRV, 0
SEG0070:17A0		     jb	     short No_wrap
SEG0070:17A2		     test    word ptr [di+29h],	1
SEG0070:17A7		     jz	     short No_wrap
SEG0070:17A9		     mov     bx, [di+13h]
SEG0070:17AC		     mov     ax, cx
SEG0070:17AE		     and     ax, 3Fh
SEG0070:17B1		     cmp     ax, bx
SEG0070:17B3		     jbe     short No_wrap
SEG0070:17B5		     div     bl
SEG0070:17B7		     or	     ah, ah
SEG0070:17B9		     jnz     short Not_on_Bound
SEG0070:17BB		     mov     ah, bl
SEG0070:17BD		     dec     al
SEG0070:17BF
SEG0070:17BF Not_on_Bound:			     ; CODE XREF: Check_Wrap+2Ej
SEG0070:17BF		     and     cl, 0C0h
SEG0070:17C2		     or	     cl, ah
SEG0070:17C4		     xor     ah, ah
SEG0070:17C6		     inc     ax
SEG0070:17C7		     add     al, dh
SEG0070:17C9		     adc     ah, 0
SEG0070:17CC		     cmp     ax, [di+15h]
SEG0070:17CF		     jbe     short No_Wrap_Head
SEG0070:17D1		     push    dx
SEG0070:17D2		     xor     dx, dx
SEG0070:17D4		     mov     bx, [di+15h]
SEG0070:17D7		     div     bx
SEG0070:17D9		     or	     dx, dx
SEG0070:17DB		     jnz     short No_Head_Bound
SEG0070:17DD		     mov     dx, bx
SEG0070:17DF		     or	     ax, ax
SEG0070:17E1		     jz	     short No_Head_Bound
SEG0070:17E3		     dec     ax
SEG0070:17E4
SEG0070:17E4 No_Head_Bound:			     ; CODE XREF: Check_Wrap+50j
SEG0070:17E4					     ; Check_Wrap+56j
SEG0070:17E4		     mov     bh, dl
SEG0070:17E6		     pop     dx
SEG0070:17E7		     dec     bh
SEG0070:17E9		     mov     dh, bh
SEG0070:17EB		     mov     bh, cl
SEG0070:17ED		     and     bh, 3Fh
SEG0070:17F0		     mov     bl, 6
SEG0070:17F2		     xchg    cl, bl
SEG0070:17F4		     shr     bl, cl
SEG0070:17F6		     add     ch, al
SEG0070:17F8		     adc     bl, ah
SEG0070:17FA		     shl     bl, cl
SEG0070:17FC		     xchg    bl, cl
SEG0070:17FE		     or	     cl, bh
SEG0070:1800
SEG0070:1800 No_wrap:				     ; CODE XREF: Check_Wrap+15j
SEG0070:1800					     ; Check_Wrap+1Cj ...
SEG0070:1800		     clc
SEG0070:1801		     pop     di
SEG0070:1802		     pop     ds
SEG0070:1803		     pop     bx
SEG0070:1804		     pop     ax
SEG0070:1805		     retn
SEG0070:1806 ; ---------------------------------------------------------------------------
SEG0070:1806
SEG0070:1806 No_Wrap_Head:			     ; CODE XREF: Check_Wrap+44j
SEG0070:1806		     mov     dh, al
SEG0070:1808		     dec     dh
SEG0070:180A		     jmp     short No_wrap
SEG0070:180A Check_Wrap	     endp
SEG0070:180A
SEG0070:180C ; ---------------------------------------------------------------------------
SEG0070:180C
SEG0070:180C INT_2F_13:				     ; DATA XREF: SEG0070:1ABEo
SEG0070:180C		     cmp     ah, 13h
SEG0070:180F		     jz	     short Chg_Orig13
SEG0070:1811		     jmp     cs:NEXT2F_13
SEG0070:1816 ; ---------------------------------------------------------------------------
SEG0070:1816
SEG0070:1816 Chg_Orig13:			     ; CODE XREF: SEG0070:180Fj
SEG0070:1816		     push    word ptr cs:ORG13
SEG0070:181B		     push    word ptr cs:ORG13+2
SEG0070:1820		     push    cs:OLD13
SEG0070:1825		     push    cs:OLD13_2
SEG0070:182A		     mov     word ptr cs:ORG13,	dx
SEG0070:182F		     mov     word ptr cs:ORG13+2, ds
SEG0070:1834		     mov     cs:OLD13, bx
SEG0070:1839		     mov     cs:OLD13_2, es
SEG0070:183E		     pop     es
SEG0070:183F		     pop     bx
SEG0070:1840		     pop     ds
SEG0070:1841		     pop     dx
SEG0070:1842		     iret
SEG0070:1843
SEG0070:1843 ; =============== S U B R O U T I N E =======================================
SEG0070:1843
SEG0070:1843
SEG0070:1843 Move	     proc near		     ; CODE XREF: SEG0070:10EFp
SEG0070:1843					     ; SEG0070:116Dp ...
SEG0070:1843		     push    cx
SEG0070:1844		     mov     cx, 256
SEG0070:1847		     cld
SEG0070:1848		     rep movsw
SEG0070:184A		     pop     cx
SEG0070:184B		     retn
SEG0070:184B Move	     endp
SEG0070:184B
SEG0070:184C
SEG0070:184C ; =============== S U B R O U T I N E =======================================
SEG0070:184C
SEG0070:184C
SEG0070:184C DoInt	     proc near		     ; CODE XREF: SEG0070:10C9p
SEG0070:184C					     ; SEG0070:DoBlockDoIntp ...
SEG0070:184C		     mov     dl, [bp+8]
SEG0070:184F		     xor     ah, ah
SEG0070:1851		     or	     al, al
SEG0070:1853		     jz	     short DoIntDone
SEG0070:1855		     mov     ah, [bp+3]
SEG0070:1858		     push    word ptr [bp+0Eh]
SEG0070:185B
SEG0070:185B loc_185B:
SEG0070:185B		     call    cs:ORG13
SEG0070:1860		     pushf
SEG0070:1861		     pop     word ptr [bp+0Eh]
SEG0070:1864
SEG0070:1864 DoIntDone:				     ; CODE XREF: DoInt+7j
SEG0070:1864		     retn
SEG0070:1864 DoInt	     endp
SEG0070:1864
SEG0070:1864 ; ---------------------------------------------------------------------------
SEG0070:1865		     db	0
SEG0070:1866 ORIG19	     dw	0		     ; DATA XREF: SEG0070:doint19r
SEG0070:1866					     ; SEG0070:2AE0w
SEG0070:1868 ORIG19_2	     dw	0		     ; DATA XREF: SEG0070:2AE7w
SEG0070:186A INT19SEM	     db	0		     ; DATA XREF: SEG0070:18F1r
SEG0070:186A					     ; StackInit+316w
SEG0070:186B Int19OLD02	     dd	0FFFFFFFFh	     ; DATA XREF: SEG0070:1910r
SEG0070:186B					     ; StackInit+A9o
SEG0070:186F Int19OLD08	     dd	0FFFFFFFFh	     ; DATA XREF: SEG0070:skip_int1902r
SEG0070:186F					     ; StackInit+B8o
SEG0070:1873 Int19OLD09	     dd	0FFFFFFFFh	     ; DATA XREF: SEG0070:skip_int1908r
SEG0070:1877 Int19OLD0A	     dd	0FFFFFFFFh	     ; DATA XREF: SEG0070:skip_int1909r
SEG0070:187B Int19OLD0B	     dd	0FFFFFFFFh	     ; DATA XREF: SEG0070:skip_int190Ar
SEG0070:187F Int19OLD0C	     dd	0FFFFFFFFh	     ; DATA XREF: SEG0070:skip_int190Br
SEG0070:1883 Int19OLD0D	     dd	0FFFFFFFFh	     ; DATA XREF: SEG0070:skip_int190Cr
SEG0070:1887 Int19OLD0E	     dd	0FFFFFFFFh	     ; DATA XREF: SEG0070:skip_int190Dr
SEG0070:188B Int19OLD70	     dd	0FFFFFFFFh	     ; DATA XREF: SEG0070:skip_int190Er
SEG0070:188F Int19OLD72	     dd	0FFFFFFFFh	     ; DATA XREF: SEG0070:skip_int1970r
SEG0070:1893 Int19OLD73	     dd	0FFFFFFFFh	     ; DATA XREF: SEG0070:skip_int1972r
SEG0070:1897 Int19OLD74	     dd	0FFFFFFFFh	     ; DATA XREF: SEG0070:skip_int1973r
SEG0070:189B Int19OLD76	     dd	0FFFFFFFFh	     ; DATA XREF: SEG0070:skip_int1974r
SEG0070:189F Int19OLD77	     dd	0FFFFFFFFh	     ; DATA XREF: SEG0070:skip_int1976r
SEG0070:18A3		     db	 90h ; 
SEG0070:18A4 DskDrvs	     dw	offset FDRIVE1	     ; DATA XREF: SEG0070:1A21o
SEG0070:18A4					     ; SEG0070:2C7Fo ...
SEG0070:18A6		     dw	offset FDRIVE2
SEG0070:18A8		     dw	offset word_52B+1
SEG0070:18AA		     dw	offset FDRIVE4
SEG0070:18AC HDSKTAB	     dw	offset HDRIVE	     ; DATA XREF: SEG0070:2C84o
SEG0070:18AE		     dw	offset DRIVEX
SEG0070:18B0 MINI_DISK_BPB_PTRS	db 40 dup(0)
SEG0070:18D8 INT_2F_NEXT     dd	0		     ; DATA XREF: SEG0070:1A2Cr
SEG0070:18D8					     ; SEG0070:1AB2w ...
SEG0070:18DC RET_ADDR	     dd	0
SEG0070:18E0 ; ---------------------------------------------------------------------------
SEG0070:18E0
SEG0070:18E0 Int19:				     ; DATA XREF: SEG0070:2AEBo
SEG0070:18E0		     xor     ax, ax
SEG0070:18E2		     mov     ds, ax
SEG0070:18E4		     assume ds:SEG0070
SEG0070:18E4		     les     di, dword ptr cs:OLD13
SEG0070:18E9		     mov     _4Ch, di
SEG0070:18ED		     mov     word ptr _4Eh, es
SEG0070:18F1		     cmp     cs:INT19SEM, 0
SEG0070:18F7		     jnz     short int19vecs
SEG0070:18F9		     jmp     doint19
SEG0070:18FC ; ---------------------------------------------------------------------------
SEG0070:18FC		     mov     ax, 0F000h
SEG0070:18FF		     mov     ds, ax
SEG0070:1901		     assume ds:nothing
SEG0070:1901		     mov     al, 0FDh ;	'ý'
SEG0070:1903		     cmp     al, ds:0FFFEh
SEG0070:1907		     jnz     short int19vecs
SEG0070:1909		     jmp     doint19
SEG0070:190C ; ---------------------------------------------------------------------------
SEG0070:190C
SEG0070:190C int19vecs:				     ; CODE XREF: SEG0070:18F7j
SEG0070:190C					     ; SEG0070:1907j
SEG0070:190C		     xor     ax, ax
SEG0070:190E		     mov     ds, ax
SEG0070:1910		     assume ds:SEG0070
SEG0070:1910		     les     di, cs:Int19OLD02
SEG0070:1915		     cmp     di, -1
SEG0070:1918		     jz	     short skip_int1902
SEG0070:191A		     mov     _08h, di
SEG0070:191E		     mov     _0Ah, es
SEG0070:1922
SEG0070:1922 skip_int1902:			     ; CODE XREF: SEG0070:1918j
SEG0070:1922		     les     di, cs:Int19OLD08
SEG0070:1927		     cmp     di, -1
SEG0070:192A		     jz	     short skip_int1908
SEG0070:192C		     mov     _20h, di
SEG0070:1930		     mov     _22h, es
SEG0070:1934
SEG0070:1934 skip_int1908:			     ; CODE XREF: SEG0070:192Aj
SEG0070:1934		     les     di, cs:Int19OLD09
SEG0070:1939		     cmp     di, -1
SEG0070:193C		     jz	     short skip_int1909
SEG0070:193E		     mov     _24h, di
SEG0070:1942		     mov     _26h, es
SEG0070:1946
SEG0070:1946 skip_int1909:			     ; CODE XREF: SEG0070:193Cj
SEG0070:1946		     les     di, cs:Int19OLD0A
SEG0070:194B		     cmp     di, -1
SEG0070:194E		     jz	     short skip_int190A
SEG0070:1950		     mov     _28h, di
SEG0070:1954		     mov     _2Ah, es
SEG0070:1958
SEG0070:1958 skip_int190A:			     ; CODE XREF: SEG0070:194Ej
SEG0070:1958		     les     di, cs:Int19OLD0B
SEG0070:195D		     cmp     di, -1
SEG0070:1960		     jz	     short skip_int190B
SEG0070:1962		     mov     _2Ch, di
SEG0070:1966		     mov     _2Eh, es
SEG0070:196A
SEG0070:196A skip_int190B:			     ; CODE XREF: SEG0070:1960j
SEG0070:196A		     les     di, cs:Int19OLD0C
SEG0070:196F		     cmp     di, -1
SEG0070:1972		     jz	     short skip_int190C
SEG0070:1974		     mov     _30h, di
SEG0070:1978		     mov     _32h, es
SEG0070:197C
SEG0070:197C skip_int190C:			     ; CODE XREF: SEG0070:1972j
SEG0070:197C		     les     di, cs:Int19OLD0D
SEG0070:1981		     cmp     di, -1
SEG0070:1984		     jz	     short skip_int190D
SEG0070:1986		     mov     _34h, di
SEG0070:198A		     mov     word ptr _36h, es
SEG0070:198E
SEG0070:198E skip_int190D:			     ; CODE XREF: SEG0070:1984j
SEG0070:198E		     les     di, cs:Int19OLD0E
SEG0070:1993		     cmp     di, -1
SEG0070:1996		     jz	     short skip_int190E
SEG0070:1998		     mov     _38h, di
SEG0070:199C		     mov     _3Ah, es
SEG0070:19A0
SEG0070:19A0 skip_int190E:			     ; CODE XREF: SEG0070:1996j
SEG0070:19A0		     les     di, cs:Int19OLD70
SEG0070:19A5		     cmp     di, -1
SEG0070:19A8		     jz	     short skip_int1970
SEG0070:19AA		     mov     word ptr DRVMAX, di
SEG0070:19AE		     mov     word ptr PHYS_DRV,	es
SEG0070:19B2
SEG0070:19B2 skip_int1970:			     ; CODE XREF: SEG0070:19A8j
SEG0070:19B2		     les     di, cs:Int19OLD72
SEG0070:19B7		     cmp     di, -1
SEG0070:19BA		     jz	     short skip_int1972
SEG0070:19BC		     mov     Secrete_Code, di
SEG0070:19C0		     mov     COM1DEV, es
SEG0070:19C4
SEG0070:19C4 skip_int1972:			     ; CODE XREF: SEG0070:19BAj
SEG0070:19C4		     les     di, cs:Int19OLD73
SEG0070:19C9		     cmp     di, -1
SEG0070:19CC		     jz	     short skip_int1973
SEG0070:19CE		     mov     _1CCh, di
SEG0070:19D2		     mov     _1CEh, es
SEG0070:19D6
SEG0070:19D6 skip_int1973:			     ; CODE XREF: SEG0070:19CCj
SEG0070:19D6		     les     di, cs:Int19OLD74
SEG0070:19DB		     cmp     di, -1
SEG0070:19DE		     jz	     short skip_int1974
SEG0070:19E0		     mov     _1D0h, di
SEG0070:19E4		     mov     _1D2h, es
SEG0070:19E8
SEG0070:19E8 skip_int1974:			     ; CODE XREF: SEG0070:19DEj
SEG0070:19E8		     les     di, cs:Int19OLD76
SEG0070:19ED		     cmp     di, -1
SEG0070:19F0		     jz	     short skip_int1976
SEG0070:19F2		     mov     word ptr asc_1D4+4, di
SEG0070:19F6		     mov     word ptr asc_1D4+6, es
SEG0070:19FA
SEG0070:19FA skip_int1976:			     ; CODE XREF: SEG0070:19F0j
SEG0070:19FA		     les     di, cs:Int19OLD77
SEG0070:19FF		     cmp     di, -1
SEG0070:1A02		     jz	     short doint19
SEG0070:1A04		     mov     LPT1DEV, di
SEG0070:1A08		     mov     _1DEh, es
SEG0070:1A0C
SEG0070:1A0C doint19:				     ; CODE XREF: SEG0070:18F9j
SEG0070:1A0C					     ; SEG0070:1909j ...
SEG0070:1A0C		     les     di, dword ptr cs:ORIG19
SEG0070:1A11		     mov     _64h, di
SEG0070:1A15		     mov     word ptr _66h, es
SEG0070:1A19		     int     19h	     ; DISK BOOT
SEG0070:1A19					     ; causes reboot of	disk system
SEG0070:1A1B
SEG0070:1A1B DSK$INIT:				     ; DATA XREF: SEG0070:0004o
SEG0070:1A1B		     push    cs
SEG0070:1A1C		     pop     ds
SEG0070:1A1D		     mov     ah, DRVMAX
SEG0070:1A21		     mov     di, offset	DskDrvs
SEG0070:1A24		     jmp     SetPTRSAV
SEG0070:1A27 ; ---------------------------------------------------------------------------
SEG0070:1A27
SEG0070:1A27 INT2F_DISK:			     ; CODE XREF: SEG0070:1811j
SEG0070:1A27					     ; DATA XREF: SEG0070:NEXT2F_13o
SEG0070:1A27		     cmp     ah, 8
SEG0070:1A2A		     jz	     short Mine
SEG0070:1A2C		     jmp     cs:INT_2F_NEXT
SEG0070:1A31 ; ---------------------------------------------------------------------------
SEG0070:1A31
SEG0070:1A31 Mine:				     ; CODE XREF: SEG0070:1A2Aj
SEG0070:1A31		     cmp     al, 0F8h ;	'ø'
SEG0070:1A33		     jb	     short Do_Func
SEG0070:1A35		     iret
SEG0070:1A36 ; ---------------------------------------------------------------------------
SEG0070:1A36
SEG0070:1A36 Do_Func:				     ; CODE XREF: SEG0070:1A33j
SEG0070:1A36		     or	     al, al
SEG0070:1A38		     jnz     short Disp_Func
SEG0070:1A3A		     mov     al, 0FFh
SEG0070:1A3C		     iret
SEG0070:1A3D ; ---------------------------------------------------------------------------
SEG0070:1A3D
SEG0070:1A3D Disp_Func:				     ; CODE XREF: SEG0070:1A38j
SEG0070:1A3D		     cmp     al, 1
SEG0070:1A3F		     jnz     short Do_DOS_Req
SEG0070:1A41		     call    Install_BDS
SEG0070:1A44		     iret
SEG0070:1A45 ; ---------------------------------------------------------------------------
SEG0070:1A45
SEG0070:1A45 Do_DOS_Req:			     ; CODE XREF: SEG0070:1A3Fj
SEG0070:1A45		     mov     word ptr cs:PTRSAV, bx
SEG0070:1A4A		     mov     word ptr cs:PTRSAV+2, es
SEG0070:1A4F		     jmp     DSK$IN
SEG0070:1A52
SEG0070:1A52 ; =============== S U B R O U T I N E =======================================
SEG0070:1A52
SEG0070:1A52
SEG0070:1A52 Install_BDS     proc near		     ; CODE XREF: SEG0070:1A41p
SEG0070:1A52					     ; SEG0070:HardFile1_OKp ...
SEG0070:1A52		     les     si, dword ptr cs:START_BDS
SEG0070:1A57		     push    es
SEG0070:1A58		     push    si
SEG0070:1A59
SEG0070:1A59 Loop_Next_BDS:			     ; CODE XREF: Install_BDS+42j
SEG0070:1A59		     cmp     si, -1
SEG0070:1A5C		     jz	     short Install_Ret
SEG0070:1A5E		     mov     al, [di+4]
SEG0070:1A61		     cmp     es:[si+4],	al
SEG0070:1A65		     jnz     short Next_BDS
SEG0070:1A67		     xor     bx, bx
SEG0070:1A69		     mov     bl, 10h
SEG0070:1A6B		     or	     [di+29h], bx
SEG0070:1A6E		     or	     es:[si+29h], bx
SEG0070:1A72		     mov     bl, 20h ; ' '
SEG0070:1A74		     xor     bx, 0FFFFh
SEG0070:1A78		     and     [di+29h], bx
SEG0070:1A7B		     mov     bx, es:[si+29h]
SEG0070:1A7F		     and     bl, 2
SEG0070:1A82		     xor     bh, bh
SEG0070:1A84		     or	     [di+29h], bx
SEG0070:1A87
SEG0070:1A87 Next_BDS:				     ; CODE XREF: Install_BDS+13j
SEG0070:1A87		     pop     bx
SEG0070:1A88		     pop     bx
SEG0070:1A89		     push    es
SEG0070:1A8A		     push    si
SEG0070:1A8B		     mov     bx, es:[si+2]
SEG0070:1A8F		     mov     si, es:[si]
SEG0070:1A92		     mov     es, bx
SEG0070:1A94		     jmp     short Loop_Next_BDS
SEG0070:1A96 ; ---------------------------------------------------------------------------
SEG0070:1A96
SEG0070:1A96 Install_Ret:			     ; CODE XREF: Install_BDS+Aj
SEG0070:1A96		     pop     si
SEG0070:1A97		     pop     es
SEG0070:1A98		     mov     ax, ds
SEG0070:1A9A		     mov     es:[si+2],	ax
SEG0070:1A9E		     mov     es:[si], di
SEG0070:1AA1		     mov     word ptr [di], -1
SEG0070:1AA5		     retn
SEG0070:1AA5 Install_BDS     endp
SEG0070:1AA5
SEG0070:1AA6 ; ---------------------------------------------------------------------------
SEG0070:1AA6
SEG0070:1AA6 RE_INIT:
SEG0070:1AA6		     push    ax
SEG0070:1AA7		     push    ds
SEG0070:1AA8		     push    di
SEG0070:1AA9		     xor     di, di
SEG0070:1AAB		     mov     ds, di
SEG0070:1AAD		     mov     di, 0BCh ;	'¼'
SEG0070:1AB0		     mov     ax, [di]
SEG0070:1AB2		     mov     word ptr cs:INT_2F_NEXT, ax
SEG0070:1AB6		     mov     ax, [di+2]
SEG0070:1AB9		     mov     word ptr cs:INT_2F_NEXT+2,	ax
SEG0070:1ABD		     cli
SEG0070:1ABE		     mov     word ptr [di], offset INT_2F_13
SEG0070:1AC2		     mov     word ptr [di+2], cs
SEG0070:1AC5		     sti
SEG0070:1AC6		     pop     di
SEG0070:1AC7		     pop     ds
SEG0070:1AC8		     assume ds:nothing
SEG0070:1AC8		     pop     ax
SEG0070:1AC9		     retf
SEG0070:1ACA
SEG0070:1ACA ; =============== S U B R O U T I N E =======================================
SEG0070:1ACA
SEG0070:1ACA
SEG0070:1ACA SWPDSK	     proc near		     ; CODE XREF: CHECKSINGLE:Ignore_SDSBp
SEG0070:1ACA		     mov     al, [di+5]
SEG0070:1ACD		     add     al, 'A'
SEG0070:1ACF		     mov     byte ptr cs:DRVLET, al ; "A: and strike\r\nany key	when ready\r\n"...
SEG0070:1AD3		     push    ds
SEG0070:1AD4		     push    cs
SEG0070:1AD5		     pop     ds
SEG0070:1AD6		     assume ds:SEG0070
SEG0070:1AD6		     mov     si, offset	SNGMSG ; "\r\nInsert diskette for drive	"
SEG0070:1AD9		     push    bx
SEG0070:1ADA		     call    WRMSG
SEG0070:1ADD		     call    FLUSH
SEG0070:1AE0		     xor     ah, ah
SEG0070:1AE2		     int     16h	     ; KEYBOARD	- READ CHAR FROM BUFFER, WAIT IF EMPTY
SEG0070:1AE2					     ; Return: AH = scan code, AL = character
SEG0070:1AE4		     pop     bx
SEG0070:1AE5		     pop     ds
SEG0070:1AE6		     assume ds:nothing
SEG0070:1AE6
SEG0070:1AE6 WRMRET:				     ; CODE XREF: WRMSG+3j
SEG0070:1AE6		     retn
SEG0070:1AE6 SWPDSK	     endp
SEG0070:1AE6
SEG0070:1AE7
SEG0070:1AE7 ; =============== S U B R O U T I N E =======================================
SEG0070:1AE7
SEG0070:1AE7
SEG0070:1AE7 WRMSG	     proc near		     ; CODE XREF: SWPDSK+10p
SEG0070:1AE7					     ; WRMSG+Aj
SEG0070:1AE7		     lodsb
SEG0070:1AE8		     or	     al, al
SEG0070:1AEA		     jz	     short WRMRET
SEG0070:1AEC		     pushf
SEG0070:1AED		     push    cs
SEG0070:1AEE		     call    near ptr OUTCHR
SEG0070:1AF1		     jmp     short WRMSG
SEG0070:1AF1 WRMSG	     endp
SEG0070:1AF1
SEG0070:1AF1 ; ---------------------------------------------------------------------------
SEG0070:1AF3 SNGMSG	     db	0Dh,0Ah		     ; DATA XREF: SWPDSK+Co
SEG0070:1AF3		     db	'Insert diskette for drive '
SEG0070:1B0F DRVLET	     db	'A: and strike',0Dh,0Ah ; DATA XREF: SWPDSK+5w
SEG0070:1B0F		     db	'any key when ready',0Dh,0Ah
SEG0070:1B0F		     db	0Ah,0
SEG0070:1B34 INT6C_RET_ADDR  dd	0		     ; DATA XREF: SEG0070:2824w
SEG0070:1B34					     ; SEG0070:283Fr ...
SEG0070:1B38 BIN_DATE_TIME   db	0		     ; DATA XREF: READ_REAL_DATE:read_okw
SEG0070:1B38					     ; READ_REAL_DATE+54r ...
SEG0070:1B39 BIN_DATE_TIME_1 db	0		     ; DATA XREF: READ_REAL_DATE+22w
SEG0070:1B39					     ; READ_REAL_DATE+50r ...
SEG0070:1B3A BIN_DATE_TIME_2 db	0		     ; DATA XREF: READ_REAL_DATE+26w
SEG0070:1B3A					     ; READ_REAL_DATE:leap_yearr ...
SEG0070:1B3B BIN_DATE_TIME_3 db	0		     ; DATA XREF: READ_REAL_DATE+2Aw
SEG0070:1B3B					     ; READ_REAL_DATE:no_leap_adjustmentr ...
SEG0070:1B3C MONTH_TABLE     dw	0		     ; DATA XREF: READ_REAL_DATE+A5o
SEG0070:1B3E		     dw	31
SEG0070:1B40		     dw	59
SEG0070:1B42		     dw	90
SEG0070:1B44		     dw	120
SEG0070:1B46		     dw	151
SEG0070:1B48		     dw	181
SEG0070:1B4A		     dw	212
SEG0070:1B4C		     dw	243
SEG0070:1B4E		     dw	273
SEG0070:1B50		     dw	304
SEG0070:1B52		     dw	334
SEG0070:1B54 DAYCNT2	     dw	0		     ; DATA XREF: READ_REAL_DATE+Ew
SEG0070:1B54					     ; READ_REAL_DATE+2Ew ...
SEG0070:1B56 FEB29	     db	0
SEG0070:1B57 HNUM	     db	0		     ; DATA XREF: SEG0070:2C91w
SEG0070:1B57					     ; SEG0070:2DB1r ...
SEG0070:1B58 HARDDRV	     db	80h		     ; DATA XREF: SEG0070:2C70o
SEG0070:1B59		     db	90h
SEG0070:1B5A BDSH	     dw	0FFFFh		     ; DATA XREF: SEG0070:2DBAo
SEG0070:1B5C		     dw	70h
SEG0070:1B5E		     db	50h
SEG0070:1B5F		     db	'C'
SEG0070:1B60 HDRIVE	     dw	512		     ; DATA XREF: SEG0070:HDSKTABo
SEG0070:1B62		     db	1
SEG0070:1B63		     dw	1
SEG0070:1B65		     db	2
SEG0070:1B66		     dw	10h
SEG0070:1B68		     dw	0
SEG0070:1B6A		     db	0F8h ; ø
SEG0070:1B6B		     dw	1
SEG0070:1B6D		     dw	0
SEG0070:1B6F		     dw	0
SEG0070:1B71		     dw	0
SEG0070:1B73		     db	0
SEG0070:1B74 OPCNTH	     dw	0
SEG0070:1B76 VOLIDH	     db	'NO NAME    ',0
SEG0070:1B82		     db	3
SEG0070:1B83 FLAGSH	     dw	20h
SEG0070:1B85		     dw	28h
SEG0070:1B87 RecBPBH	     db	31 dup(0)
SEG0070:1BA6 TRACKH	     db	0FFh
SEG0070:1BA7 TIM_LOH	     dw	0FFFFh
SEG0070:1BA9 TIM_HIH	     dw	0FFFFh
SEG0070:1BAB EndOneHard	     db	90h		     ; DATA XREF: SEG0070:ConfigOneHardo
SEG0070:1BAC BDSX	     dw	0FFFFh		     ; DATA XREF: SEG0070:2DE3o
SEG0070:1BAE		     dw	70h
SEG0070:1BB0		     db	51h
SEG0070:1BB1		     db	'D'
SEG0070:1BB2 DRIVEX	     dw	512		     ; DATA XREF: SEG0070:18AEo
SEG0070:1BB4		     db	0
SEG0070:1BB5		     dw	1
SEG0070:1BB7		     db	2
SEG0070:1BB8		     dw	0
SEG0070:1BBA		     dw	0
SEG0070:1BBC		     db	0F8h ; ø
SEG0070:1BBD		     dw	0
SEG0070:1BBF		     dw	0
SEG0070:1BC1		     dw	0
SEG0070:1BC3		     dw	0
SEG0070:1BC5		     db	0
SEG0070:1BC6 OPCNTD	     dw	0
SEG0070:1BC8 VOLIDD	     db	'NO NAME    ',0
SEG0070:1BD4		     db	3
SEG0070:1BD5 FLAGSD	     dw	20h
SEG0070:1BD7		     dw	40
SEG0070:1BD9 RecBPBD	     db	31 dup(0)
SEG0070:1BF8 TRACKD	     db	0FFh
SEG0070:1BF9 TIM_LOD	     dw	0FFFFh
SEG0070:1BFB TIM_HID	     dw	0FFFFh
SEG0070:1BFD ; ---------------------------------------------------------------------------
SEG0070:1BFD
SEG0070:1BFD DSK$OPEN:				     ; DATA XREF: SEG0070:TABLE_PATCHo
SEG0070:1BFD					     ; SEG0070:2E12o
SEG0070:1BFD		     call    SetDrive
SEG0070:1C00		     inc     word ptr [di+1Ah]
SEG0070:1C03		     jmp     EXIT
SEG0070:1C06 ; ---------------------------------------------------------------------------
SEG0070:1C06
SEG0070:1C06 DSK$CLOSE:				     ; DATA XREF: SEG0070:_20ho
SEG0070:1C06		     call    SetDrive
SEG0070:1C09		     cmp     word ptr [di+1Ah],	0
SEG0070:1C0D		     jz	     short EXITJX
SEG0070:1C0F		     dec     word ptr [di+1Ah]
SEG0070:1C12
SEG0070:1C12 EXITJX:				     ; CODE XREF: SEG0070:1C0Dj
SEG0070:1C12		     jmp     EXIT
SEG0070:1C15
SEG0070:1C15 ; =============== S U B R O U T I N E =======================================
SEG0070:1C15
SEG0070:1C15
SEG0070:1C15 ChkOpCnt	     proc near		     ; CODE XREF: CheckLatchIO+5p
SEG0070:1C15					     ; CheckIO+5p
SEG0070:1C15		     cmp     word ptr [di+1Ah],	0
SEG0070:1C19		     retn
SEG0070:1C19 ChkOpCnt	     endp
SEG0070:1C19
SEG0070:1C1A
SEG0070:1C1A ; =============== S U B R O U T I N E =======================================
SEG0070:1C1A
SEG0070:1C1A
SEG0070:1C1A MediaCheck	     proc near		     ; CODE XREF: SEG0070:Media_Patchp
SEG0070:1C1A		     call    CHECKSINGLE
SEG0070:1C1D		     xor     si, si
SEG0070:1C1F		     call    HasChange
SEG0070:1C22		     jz	     short MediaRet
SEG0070:1C24		     call    CheckROMChange
SEG0070:1C27		     jnz     short MediaDoVOLID
SEG0070:1C29		     push    ax
SEG0070:1C2A		     push    dx
SEG0070:1C2B		     mov     ah, 16h
SEG0070:1C2D		     mov     dl, [di+4]
SEG0070:1C30		     int     13h	     ; DISK - FLOPPY DISK - CHANGE OF DISK STATUS (AT,XT2,XT286,CONV,PS)
SEG0070:1C30					     ; DL = drive to check
SEG0070:1C30					     ; Return: AH = disk change	status
SEG0070:1C32		     pop     dx
SEG0070:1C33		     pop     ax
SEG0070:1C34		     jb	     short MediaDoVOLID
SEG0070:1C36		     mov     si, 1
SEG0070:1C39
SEG0070:1C39 LOSECHNG:
SEG0070:1C39		     mov     bl, cs:TIM_DRV
SEG0070:1C3E		     cmp     [di+4], bl
SEG0070:1C41		     jz	     short MediaRet
SEG0070:1C43		     push    ax
SEG0070:1C44		     push    cx
SEG0070:1C45		     push    dx
SEG0070:1C46		     call    CHECK_TIME_OF_ACCESS
SEG0070:1C49		     pop     dx
SEG0070:1C4A		     pop     cx
SEG0070:1C4B		     pop     ax
SEG0070:1C4C		     or	     si, si
SEG0070:1C4E		     jz	     short MediaDoVOLID
SEG0070:1C50		     xor     si, si
SEG0070:1C52
SEG0070:1C52 MediaRet:				     ; CODE XREF: MediaCheck+8j
SEG0070:1C52					     ; MediaCheck+27j ...
SEG0070:1C52		     retn
SEG0070:1C53 ; ---------------------------------------------------------------------------
SEG0070:1C53
SEG0070:1C53 MediaDoVOLID:			     ; CODE XREF: MediaCheck+Dj
SEG0070:1C53					     ; MediaCheck+1Aj ...
SEG0070:1C53		     call    GETBP
SEG0070:1C56		     jb	     short MediaRet
SEG0070:1C58		     call    Check_VID
SEG0070:1C5B		     jnb     short MediaRet
SEG0070:1C5D		     call    MAPERROR
SEG0070:1C60		     retn
SEG0070:1C60 MediaCheck	     endp
SEG0070:1C60
SEG0070:1C61
SEG0070:1C61 ; =============== S U B R O U T I N E =======================================
SEG0070:1C61
SEG0070:1C61
SEG0070:1C61 CheckLatchIO    proc near		     ; CODE XREF: DISKRD:DiskIO_PATCHp
SEG0070:1C61		     call    HasChange
SEG0070:1C64		     jz	     short CheckRet
SEG0070:1C66		     call    ChkOpCnt
SEG0070:1C69		     jnz     short CheckROM
SEG0070:1C6B
SEG0070:1C6B CheckRet:				     ; CODE XREF: CheckLatchIO+3j
SEG0070:1C6B					     ; CheckLatchIO+Ej	...
SEG0070:1C6B		     retn
SEG0070:1C6C ; ---------------------------------------------------------------------------
SEG0070:1C6C
SEG0070:1C6C CheckROM:				     ; CODE XREF: CheckLatchIO+8j
SEG0070:1C6C		     call    CheckROMChange
SEG0070:1C6F		     jz	     short CheckRet
SEG0070:1C71		     call    GETBP
SEG0070:1C74		     jb	     short Ret_No_Error_Map
SEG0070:1C76		     call    Check_VID
SEG0070:1C79		     jb	     short CheckLatchRet
SEG0070:1C7B
SEG0070:1C7B loc_1C7B:
SEG0070:1C7B		     or	     si, si
SEG0070:1C7D		     jns     short CheckRet
SEG0070:1C7F		     call    ReturnVid
SEG0070:1C82
SEG0070:1C82 CheckLatchRet:			     ; CODE XREF: CheckLatchIO+18j
SEG0070:1C82		     call    MAPERROR
SEG0070:1C85
SEG0070:1C85 Ret_No_Error_Map:			     ; CODE XREF: CheckLatchIO+13j
SEG0070:1C85		     stc
SEG0070:1C86		     pop     si
SEG0070:1C87		     retn
SEG0070:1C87 CheckLatchIO    endp
SEG0070:1C87
SEG0070:1C88
SEG0070:1C88 ; =============== S U B R O U T I N E =======================================
SEG0070:1C88
SEG0070:1C88
SEG0070:1C88 CheckFATVID     proc near		     ; CODE XREF: CheckIO+Fp
SEG0070:1C88		     call    FAT_Check
SEG0070:1C8B		     or	     si, si
SEG0070:1C8D		     js	     short Changed_Drv
SEG0070:1C8D CheckFATVID     endp
SEG0070:1C8D
SEG0070:1C8F
SEG0070:1C8F ; =============== S U B R O U T I N E =======================================
SEG0070:1C8F
SEG0070:1C8F
SEG0070:1C8F Check_VID	     proc near		     ; CODE XREF: MediaCheck+3Ep
SEG0070:1C8F					     ; CheckLatchIO+15p
SEG0070:1C8F		     call    Read_volume_ID
SEG0070:1C92		     jb	     short CheckFatRet
SEG0070:1C94		     call    Check_Volume_id
SEG0070:1C97		     or	     si, si
SEG0070:1C99		     jnz     short Changed_Drv
SEG0070:1C9B		     call    ResetChanged
SEG0070:1C9E
SEG0070:1C9E CheckFatRet:			     ; CODE XREF: Check_VID+3j
SEG0070:1C9E					     ; CheckIO+3j ...
SEG0070:1C9E		     retn
SEG0070:1C9F ; ---------------------------------------------------------------------------
SEG0070:1C9F
SEG0070:1C9F Changed_Drv:			     ; CODE XREF: CheckFATVID+5j
SEG0070:1C9F					     ; Check_VID+Aj
SEG0070:1C9F		     mov     cs:TIM_DRV, 0FFh
SEG0070:1CA5		     retn
SEG0070:1CA5 Check_VID	     endp
SEG0070:1CA5
SEG0070:1CA6
SEG0070:1CA6 ; =============== S U B R O U T I N E =======================================
SEG0070:1CA6
SEG0070:1CA6
SEG0070:1CA6 CheckIO	     proc near		     ; CODE XREF: DISK:DSKERRp
SEG0070:1CA6		     cmp     ah, 6
SEG0070:1CA9		     jnz     short CheckFatRet
SEG0070:1CAB		     call    ChkOpCnt
SEG0070:1CAE		     jz	     short CheckFatRet
SEG0070:1CB0		     call    GETBP
SEG0070:1CB3		     jb	     short No_Error_Map
SEG0070:1CB5		     call    CheckFATVID
SEG0070:1CB8		     jb	     short CheckIORet
SEG0070:1CBA		     or	     si, si
SEG0070:1CBC		     js	     short CheckIOErr
SEG0070:1CBE
SEG0070:1CBE IgnoreChange:
SEG0070:1CBE		     inc     bp
SEG0070:1CBF		     retn
SEG0070:1CC0 ; ---------------------------------------------------------------------------
SEG0070:1CC0
SEG0070:1CC0 CheckIOErr:			     ; CODE XREF: CheckIO+16j
SEG0070:1CC0		     call    ReturnVid
SEG0070:1CC3
SEG0070:1CC3 CheckIORet:			     ; CODE XREF: CheckIO+12j
SEG0070:1CC3		     stc
SEG0070:1CC4		     jmp     HARDERR
SEG0070:1CC7 ; ---------------------------------------------------------------------------
SEG0070:1CC7
SEG0070:1CC7 No_Error_Map:			     ; CODE XREF: CheckIO+Dj
SEG0070:1CC7		     jmp     HARDERR2
SEG0070:1CC7 CheckIO	     endp
SEG0070:1CC7
SEG0070:1CCA
SEG0070:1CCA ; =============== S U B R O U T I N E =======================================
SEG0070:1CCA
SEG0070:1CCA
SEG0070:1CCA ReturnVid	     proc near		     ; CODE XREF: CheckLatchIO+1Ep
SEG0070:1CCA					     ; CheckIO:CheckIOErrp
SEG0070:1CCA		     push    ds
SEG0070:1CCB		     push    di
SEG0070:1CCC		     push    cx
SEG0070:1CCD		     call    init_vid_loop
SEG0070:1CD0		     lds     bx, cs:PTRSAV
SEG0070:1CD5		     mov     [bx+16h], di
SEG0070:1CD8		     mov     word ptr [bx+18h],	es
SEG0070:1CDB		     pop     cx
SEG0070:1CDC		     pop     di
SEG0070:1CDD		     pop     ds
SEG0070:1CDE		     mov     ah, 6
SEG0070:1CE0		     stc
SEG0070:1CE1		     retn
SEG0070:1CE1 ReturnVid	     endp
SEG0070:1CE1
SEG0070:1CE2
SEG0070:1CE2 ; =============== S U B R O U T I N E =======================================
SEG0070:1CE2
SEG0070:1CE2
SEG0070:1CE2 Media_Set_VID   proc near		     ; CODE XREF: SEG0070:INIT_PATCHp
SEG0070:1CE2		     call    init_vid_loop
SEG0070:1CE5		     lds     bx, cs:PTRSAV
SEG0070:1CEA		     mov     [bx+0Fh], di
SEG0070:1CED		     mov     word ptr [bx+11h],	es
SEG0070:1CF0		     retn
SEG0070:1CF0 Media_Set_VID   endp
SEG0070:1CF0
SEG0070:1CF1
SEG0070:1CF1 ; =============== S U B R O U T I N E =======================================
SEG0070:1CF1
SEG0070:1CF1
SEG0070:1CF1 hidensity	     proc near		     ; CODE XREF: GETBP:GETBP1_PATCHp
SEG0070:1CF1		     test    word ptr [di+29h],	2
SEG0070:1CF6		     jz	     short DoFloppy
SEG0070:1CF8		     cmp     byte ptr [di+28h],	2
SEG0070:1CFC		     jz	     short DoFloppy
SEG0070:1CFE		     cmp     ah, 0F9h ;	'ù'
SEG0070:1D01		     jnz     short DoFloppy
SEG0070:1D03		     mov     al, 7
SEG0070:1D05		     mov     bx, 0E00Fh
SEG0070:1D08		     mov     cx, 2400
SEG0070:1D0B		     mov     dx, 102h
SEG0070:1D0E		     add     sp, 2
SEG0070:1D11		     jmp     Has1
SEG0070:1D14 ; ---------------------------------------------------------------------------
SEG0070:1D14
SEG0070:1D14 DoFloppy:				     ; CODE XREF: hidensity+5j
SEG0070:1D14					     ; hidensity+Bj ...
SEG0070:1D14		     retn
SEG0070:1D14 hidensity	     endp
SEG0070:1D14
SEG0070:1D14 ; ---------------------------------------------------------------------------
SEG0070:1D15 REAL13	     dw	0		     ; DATA XREF: SEG0070:1D2Fr
SEG0070:1D15					     ; SEG0070:2E36w
SEG0070:1D17 REAL13_2	     dw	0		     ; DATA XREF: SEG0070:2E3Dw
SEG0070:1D19 OldInt	     dw	0		     ; DATA XREF: SEG0070:Int13w
SEG0070:1D19					     ; SEG0070:1D36r ...
SEG0070:1D1B OldInt_2	     dw	0		     ; DATA XREF: SEG0070:1D24w
SEG0070:1D1D dmy	     dw	0		     ; DATA XREF: SEG0070:1D29w
SEG0070:1D1F ; ---------------------------------------------------------------------------
SEG0070:1D1F
SEG0070:1D1F Int13:				     ; DATA XREF: SEG0070:2E41o
SEG0070:1D1F		     pop     cs:OldInt
SEG0070:1D24		     pop     cs:OldInt_2
SEG0070:1D29		     pop     cs:dmy
SEG0070:1D2E		     pushf
SEG0070:1D2F		     call    dword ptr cs:REAL13
SEG0070:1D34		     jb	     short Err13
SEG0070:1D36		     jmp     dword ptr cs:OldInt
SEG0070:1D3B ; ---------------------------------------------------------------------------
SEG0070:1D3B
SEG0070:1D3B Err13:				     ; CODE XREF: SEG0070:1D34j
SEG0070:1D3B		     pushf
SEG0070:1D3C		     cmp     ah, 6
SEG0070:1D3F		     jz	     short GotErr
SEG0070:1D41
SEG0070:1D41 _B:				     ; CODE XREF: SEG0070:1D49j
SEG0070:1D41					     ; SEG0070:1D55j
SEG0070:1D41		     popf
SEG0070:1D42		     jmp     dword ptr cs:OldInt
SEG0070:1D47 ; ---------------------------------------------------------------------------
SEG0070:1D47
SEG0070:1D47 GotErr:				     ; CODE XREF: SEG0070:1D3Fj
SEG0070:1D47		     or	     dl, dl
SEG0070:1D49		     js	     short _B
SEG0070:1D4B		     mov     cs:FlagBits, 40h ;	'@'
SEG0070:1D52		     call    Set_Changed_DL
SEG0070:1D55		     jmp     short _B
SEG0070:1D57
SEG0070:1D57 ; =============== S U B R O U T I N E =======================================
SEG0070:1D57
SEG0070:1D57
SEG0070:1D57 Set_Changed_DL  proc near		     ; CODE XREF: SEG0070:0F8Bp
SEG0070:1D57					     ; SEG0070:1D52p
SEG0070:1D57		     push    bx
SEG0070:1D58		     push    dx
SEG0070:1D59		     mov     bl, dl
SEG0070:1D5B		     mov     dx, cs:FlagBits
SEG0070:1D60		     xor     bh, bh
SEG0070:1D62		     push    ax
SEG0070:1D63		     push    ds
SEG0070:1D64		     push    di
SEG0070:1D65		     lds     di, dword ptr cs:START_BDS
SEG0070:1D6A
SEG0070:1D6A Scan_BDS:				     ; CODE XREF: Set_Changed_DL+27j
SEG0070:1D6A		     cmp     di, -1
SEG0070:1D6D		     jz	     short SkipSet
SEG0070:1D6F		     cmp     [di+4], bl
SEG0070:1D72		     jnz     short Get_Next_BDS
SEG0070:1D74		     or	     [di+29h], dx
SEG0070:1D77
SEG0070:1D77 Get_Next_BDS:			     ; CODE XREF: Set_Changed_DL+1Bj
SEG0070:1D77		     mov     ax, [di+2]
SEG0070:1D7A		     mov     di, [di]
SEG0070:1D7C		     mov     ds, ax
SEG0070:1D7E		     jmp     short Scan_BDS
SEG0070:1D80 ; ---------------------------------------------------------------------------
SEG0070:1D80
SEG0070:1D80 SkipSet:				     ; CODE XREF: Set_Changed_DL+16j
SEG0070:1D80		     pop     di
SEG0070:1D81		     pop     ds
SEG0070:1D82		     pop     ax
SEG0070:1D83		     pop     dx
SEG0070:1D84		     pop     bx
SEG0070:1D85		     retn
SEG0070:1D85 Set_Changed_DL  endp
SEG0070:1D85
SEG0070:1D86
SEG0070:1D86 ; =============== S U B R O U T I N E =======================================
SEG0070:1D86
SEG0070:1D86
SEG0070:1D86 CheckROMChange  proc near		     ; CODE XREF: MediaCheck+Ap
SEG0070:1D86					     ; CheckLatchIO:CheckROMp
SEG0070:1D86		     test    word ptr [di+29h],	40h
SEG0070:1D8B		     retn
SEG0070:1D8B CheckROMChange  endp
SEG0070:1D8B
SEG0070:1D8C
SEG0070:1D8C ; =============== S U B R O U T I N E =======================================
SEG0070:1D8C
SEG0070:1D8C
SEG0070:1D8C ResetChanged    proc near		     ; CODE XREF: Check_VID+Cp
SEG0070:1D8C					     ; set_volume_id+11p
SEG0070:1D8C		     and     word ptr [di+29h],	0FFBFh
SEG0070:1D91		     retn
SEG0070:1D91 ResetChanged    endp
SEG0070:1D91
SEG0070:1D92
SEG0070:1D92 ; =============== S U B R O U T I N E =======================================
SEG0070:1D92
SEG0070:1D92
SEG0070:1D92 HasChange	     proc near		     ; CODE XREF: SEG0070:09FFp
SEG0070:1D92					     ; MediaCheck+5p ...
SEG0070:1D92		     test    word ptr [di+29h],	2
SEG0070:1D97		     retn
SEG0070:1D97 HasChange	     endp
SEG0070:1D97
SEG0070:1D97 ; ---------------------------------------------------------------------------
SEG0070:1D98 nul_vid	     db	'NO NAME    ',0      ; DATA XREF: Read_volume_ID+Eo
SEG0070:1DA4 tmp_vid	     db	'NO NAME    ',0      ; DATA XREF: Read_volume_ID+Bo
SEG0070:1DA4					     ; Read_volume_ID+7Eo ...
SEG0070:1DB0
SEG0070:1DB0 ; =============== S U B R O U T I N E =======================================
SEG0070:1DB0
SEG0070:1DB0
SEG0070:1DB0 set_volume_id   proc near		     ; CODE XREF: SEG0070:SET_PATCHp
SEG0070:1DB0		     push    dx
SEG0070:1DB1		     push    ax
SEG0070:1DB2		     call    HasChange
SEG0070:1DB5		     jz	     short setvret
SEG0070:1DB7		     push    di
SEG0070:1DB8		     call    Read_volume_ID
SEG0070:1DBB		     pop     di
SEG0070:1DBC		     jb	     short SetErr
SEG0070:1DBE		     call    transfer_volume_ID
SEG0070:1DC1		     call    ResetChanged
SEG0070:1DC4
SEG0070:1DC4 setvret:				     ; CODE XREF: set_volume_id+5j
SEG0070:1DC4		     clc
SEG0070:1DC5		     pop     ax
SEG0070:1DC6		     pop     dx
SEG0070:1DC7		     retn
SEG0070:1DC8 ; ---------------------------------------------------------------------------
SEG0070:1DC8
SEG0070:1DC8 SetErr:				     ; CODE XREF: set_volume_id+Cj
SEG0070:1DC8		     pop     dx
SEG0070:1DC9		     pop     dx
SEG0070:1DCA		     retn
SEG0070:1DCA set_volume_id   endp
SEG0070:1DCA
SEG0070:1DCA ; ---------------------------------------------------------------------------
SEG0070:1DCB root_sec	     dw	0		     ; DATA XREF: Read_volume_ID+23w
SEG0070:1DCB					     ; Read_volume_ID+31r ...
SEG0070:1DCD
SEG0070:1DCD ; =============== S U B R O U T I N E =======================================
SEG0070:1DCD
SEG0070:1DCD
SEG0070:1DCD Read_volume_ID  proc near		     ; CODE XREF: Check_VIDp
SEG0070:1DCD					     ; set_volume_id+8p
SEG0070:1DCD		     push    es
SEG0070:1DCE		     push    dx
SEG0070:1DCF		     push    cx
SEG0070:1DD0		     push    bx
SEG0070:1DD1		     push    ax
SEG0070:1DD2		     push    ds
SEG0070:1DD3		     push    di
SEG0070:1DD4		     push    cs
SEG0070:1DD5		     pop     es
SEG0070:1DD6		     assume es:SEG0070
SEG0070:1DD6		     push    cs
SEG0070:1DD7		     pop     ds
SEG0070:1DD8		     assume ds:SEG0070
SEG0070:1DD8		     mov     di, offset	tmp_vid	; "NO NAME    "
SEG0070:1DDB		     mov     si, offset	nul_vid	; "NO NAME    "
SEG0070:1DDE		     mov     cx, 12
SEG0070:1DE1		     rep movsb
SEG0070:1DE3		     pop     di
SEG0070:1DE4		     pop     ds
SEG0070:1DE5		     assume ds:nothing
SEG0070:1DE5		     mov     al, [di+0Bh]
SEG0070:1DE8		     mov     cx, [di+11h]
SEG0070:1DEB		     mul     cl
SEG0070:1DED		     add     ax, [di+9]
SEG0070:1DF0		     mov     cs:root_sec, ax
SEG0070:1DF4		     mov     ax, [di+0Ch]
SEG0070:1DF7		     mov     cl, 4
SEG0070:1DF9		     shr     ax, cl
SEG0070:1DFB		     mov     cx, ax
SEG0070:1DFD
SEG0070:1DFD next_sec:				     ; CODE XREF: Read_volume_ID+6Fj
SEG0070:1DFD		     push    cx
SEG0070:1DFE		     mov     ax, cs:root_sec
SEG0070:1E02		     mov     cx, [di+13h]
SEG0070:1E05		     xor     dx, dx
SEG0070:1E07		     div     cx
SEG0070:1E09		     inc     dx
SEG0070:1E0A		     mov     cl, dl
SEG0070:1E0C		     xor     dx, dx
SEG0070:1E0E		     div     word ptr [di+15h]
SEG0070:1E11		     mov     dh, dl
SEG0070:1E13		     mov     ch, al
SEG0070:1E15		     call    read_sector
SEG0070:1E18		     jb	     short ReadVIDErr
SEG0070:1E1A		     mov     cx, 16
SEG0070:1E1D		     mov     al, 8
SEG0070:1E1F
SEG0070:1E1F fvid_loop:				     ; CODE XREF: Read_volume_ID+67j
SEG0070:1E1F		     cmp     byte ptr es:[bx], 0
SEG0070:1E23		     jz	     short no_vid
SEG0070:1E25		     cmp     byte ptr es:[bx], 0E5h ; 'å'
SEG0070:1E29		     jz	     short ent_loop
SEG0070:1E2B		     test    es:[bx+0Bh], al
SEG0070:1E2F		     jnz     short found_vid
SEG0070:1E31
SEG0070:1E31 ent_loop:				     ; CODE XREF: Read_volume_ID+5Cj
SEG0070:1E31		     add     bx, 32
SEG0070:1E34		     loop    fvid_loop
SEG0070:1E36		     pop     cx
SEG0070:1E37		     inc     cs:root_sec
SEG0070:1E3C		     loop    next_sec
SEG0070:1E3E
SEG0070:1E3E NotFound:				     ; CODE XREF: Read_volume_ID+95j
SEG0070:1E3E		     xor     si, si
SEG0070:1E40		     jmp     short fvid_ret
SEG0070:1E42 ; ---------------------------------------------------------------------------
SEG0070:1E42
SEG0070:1E42 found_vid:				     ; CODE XREF: Read_volume_ID+62j
SEG0070:1E42		     pop     cx
SEG0070:1E43		     mov     si, bx
SEG0070:1E45		     push    ds
SEG0070:1E46		     push    di
SEG0070:1E47		     push    es
SEG0070:1E48		     pop     ds
SEG0070:1E49		     assume ds:SEG0070
SEG0070:1E49		     push    cs
SEG0070:1E4A		     pop     es
SEG0070:1E4B		     mov     di, offset	tmp_vid	; "NO NAME    "
SEG0070:1E4E		     mov     cx, 11
SEG0070:1E51		     rep movsb
SEG0070:1E53		     xor     al, al
SEG0070:1E55		     stosb
SEG0070:1E56		     xor     si, si
SEG0070:1E58		     pop     di
SEG0070:1E59		     pop     ds
SEG0070:1E5A		     assume ds:nothing
SEG0070:1E5A
SEG0070:1E5A fvid_ret:				     ; CODE XREF: Read_volume_ID+73j
SEG0070:1E5A		     pop     ax
SEG0070:1E5B		     clc
SEG0070:1E5C
SEG0070:1E5C RVIDRet:				     ; CODE XREF: Read_volume_ID+99j
SEG0070:1E5C		     pop     bx
SEG0070:1E5D		     pop     cx
SEG0070:1E5E		     pop     dx
SEG0070:1E5F		     pop     es
SEG0070:1E60		     assume es:nothing
SEG0070:1E60		     retn
SEG0070:1E61 ; ---------------------------------------------------------------------------
SEG0070:1E61
SEG0070:1E61 no_vid:				     ; CODE XREF: Read_volume_ID+56j
SEG0070:1E61		     pop     cx
SEG0070:1E62		     jmp     short NotFound
SEG0070:1E64 ; ---------------------------------------------------------------------------
SEG0070:1E64
SEG0070:1E64 ReadVIDErr:			     ; CODE XREF: Read_volume_ID+4Bj
SEG0070:1E64		     pop     si
SEG0070:1E65		     pop     si
SEG0070:1E66		     jmp     short RVIDRet
SEG0070:1E66 Read_volume_ID  endp
SEG0070:1E66
SEG0070:1E68
SEG0070:1E68 ; =============== S U B R O U T I N E =======================================
SEG0070:1E68
SEG0070:1E68
SEG0070:1E68 transfer_volume_ID	proc near	     ; CODE XREF: set_volume_id+Ep
SEG0070:1E68		     push    ds
SEG0070:1E69		     push    di
SEG0070:1E6A		     push    es
SEG0070:1E6B		     push    si
SEG0070:1E6C		     push    cx
SEG0070:1E6D		     call    init_vid_loop
SEG0070:1E70		     cld
SEG0070:1E71
SEG0070:1E71 loc_1E71:
SEG0070:1E71		     rep movsb
SEG0070:1E73		     pop     cx
SEG0070:1E74		     pop     si
SEG0070:1E75		     pop     es
SEG0070:1E76		     pop     di
SEG0070:1E77		     pop     ds
SEG0070:1E78		     retn
SEG0070:1E78 transfer_volume_ID	endp
SEG0070:1E78
SEG0070:1E79
SEG0070:1E79 ; =============== S U B R O U T I N E =======================================
SEG0070:1E79
SEG0070:1E79
SEG0070:1E79 Check_Volume_id proc near		     ; CODE XREF: Check_VID+5p
SEG0070:1E79		     push    ds
SEG0070:1E7A		     push    di
SEG0070:1E7B		     push    es
SEG0070:1E7C		     push    cx
SEG0070:1E7D		     call    init_vid_loop
SEG0070:1E80		     cld
SEG0070:1E81		     repe cmpsb
SEG0070:1E83		     mov     si, 0
SEG0070:1E86		     jz	     short check_vid_ret
SEG0070:1E88		     mov     si, -1
SEG0070:1E8B
SEG0070:1E8B check_vid_ret:			     ; CODE XREF: Check_Volume_id+Dj
SEG0070:1E8B		     pop     cx
SEG0070:1E8C		     pop     es
SEG0070:1E8D		     pop     di
SEG0070:1E8E		     pop     ds
SEG0070:1E8F		     retn
SEG0070:1E8F Check_Volume_id endp
SEG0070:1E8F
SEG0070:1E90
SEG0070:1E90 ; =============== S U B R O U T I N E =======================================
SEG0070:1E90
SEG0070:1E90
SEG0070:1E90 FAT_Check	     proc near		     ; CODE XREF: CheckFATVIDp
SEG0070:1E90		     push    ax
SEG0070:1E91		     xor     si, si
SEG0070:1E93		     mov     al, cs:MedByt
SEG0070:1E97		     cmp     al, [di+10h]
SEG0070:1E9A		     jz	     short OkRet1
SEG0070:1E9C		     dec     si
SEG0070:1E9D
SEG0070:1E9D OkRet1:				     ; CODE XREF: FAT_Check+Aj
SEG0070:1E9D		     clc
SEG0070:1E9E		     pop     ax
SEG0070:1E9F		     retn
SEG0070:1E9F FAT_Check	     endp
SEG0070:1E9F
SEG0070:1EA0
SEG0070:1EA0 ; =============== S U B R O U T I N E =======================================
SEG0070:1EA0
SEG0070:1EA0
SEG0070:1EA0 init_vid_loop   proc near		     ; CODE XREF: ReturnVid+3p
SEG0070:1EA0					     ; Media_Set_VIDp ...
SEG0070:1EA0		     push    ax
SEG0070:1EA1		     push    ds
SEG0070:1EA2		     pop     es
SEG0070:1EA3		     push    cs
SEG0070:1EA4		     pop     ds
SEG0070:1EA5		     assume ds:SEG0070
SEG0070:1EA5		     mov     si, offset	tmp_vid	; "NO NAME    "
SEG0070:1EA8		     add     di, 1Ch
SEG0070:1EAB		     mov     cx, 0Ch
SEG0070:1EAE		     pop     ax
SEG0070:1EAF		     retn
SEG0070:1EAF init_vid_loop   endp
SEG0070:1EAF
SEG0070:1EAF ; ---------------------------------------------------------------------------
SEG0070:1EB0 BDSMs	     dw	0FFFFh		     ; DATA XREF: SEG0070:2E08o
SEG0070:1EB0					     ; DoMini+1o
SEG0070:1EB2		     db	   0
SEG0070:1EB3		     db	   0
SEG0070:1EB4		     db	 50h ; P
SEG0070:1EB5		     db	   3
SEG0070:1EB6		     db	   0
SEG0070:1EB7		     db	   2
SEG0070:1EB8		     db	   1
SEG0070:1EB9		     db	   1
SEG0070:1EBA		     db	   0
SEG0070:1EBB		     db	   2
SEG0070:1EBC		     db	 10h
SEG0070:1EBD		     db	   0
SEG0070:1EBE		     db	   0
SEG0070:1EBF		     db	   0
SEG0070:1EC0		     db	0F8h ; ø
SEG0070:1EC1		     db	   1
SEG0070:1EC2		     db	   0
SEG0070:1EC3 unk_1EC3	     db	   0
SEG0070:1EC4		     db	   0
SEG0070:1EC5		     db	   0
SEG0070:1EC6		     db	   0
SEG0070:1EC7		     db	   0
SEG0070:1EC8		     db	   0
SEG0070:1EC9		     db	   0
SEG0070:1ECA		     db	   0
SEG0070:1ECB		     db	   0
SEG0070:1ECC		     db	 4Eh ; N
SEG0070:1ECD		     db	 4Fh ; O
SEG0070:1ECE		     db	 20h
SEG0070:1ECF		     db	 4Eh ; N
SEG0070:1ED0		     db	 41h ; A
SEG0070:1ED1		     db	 4Dh ; M
SEG0070:1ED2		     db	 45h ; E
SEG0070:1ED3 unk_1ED3	     db	 20h
SEG0070:1ED4		     db	 20h
SEG0070:1ED5		     db	 20h
SEG0070:1ED6		     db	 20h
SEG0070:1ED7		     db	   0
SEG0070:1ED8		     db	   3
SEG0070:1ED9		     db	 20h
SEG0070:1EDA		     db	   0
SEG0070:1EDB		     db	 28h ; (
SEG0070:1EDC		     db	   0
SEG0070:1EDD		     db	   0
SEG0070:1EDE		     db	   0
SEG0070:1EDF		     db	   0
SEG0070:1EE0		     db	   0
SEG0070:1EE1		     db	   0
SEG0070:1EE2		     db	   0
SEG0070:1EE3		     db	   0
SEG0070:1EE4		     db	   0
SEG0070:1EE5		     db	   0
SEG0070:1EE6		     db	   0
SEG0070:1EE7		     db	   0
SEG0070:1EE8		     db	   0
SEG0070:1EE9		     db	   0
SEG0070:1EEA		     db	   0
SEG0070:1EEB		     db	   0
SEG0070:1EEC		     db	   0
SEG0070:1EED		     db	   0
SEG0070:1EEE		     db	   0
SEG0070:1EEF		     db	   0
SEG0070:1EF0		     db	   0
SEG0070:1EF1		     db	   0
SEG0070:1EF2		     db	   0
SEG0070:1EF3		     db	   0
SEG0070:1EF4		     db	   0
SEG0070:1EF5		     db	   0
SEG0070:1EF6		     db	   0
SEG0070:1EF7		     db	   0
SEG0070:1EF8		     db	   0
SEG0070:1EF9		     db	   0
SEG0070:1EFA		     db	   0
SEG0070:1EFB		     db	   0
SEG0070:1EFC		     db	0FFh
SEG0070:1EFD		     db	   1
SEG0070:1EFE		     db	   0
SEG0070:1EFF		     db	   0
SEG0070:1F00		     db	   0
SEG0070:1F01		     db	0FFh
SEG0070:1F02		     db	0FFh
SEG0070:1F03		     db	   0
SEG0070:1F04		     db	   0
SEG0070:1F05		     db	 50h ; P
SEG0070:1F06		     db	   3
SEG0070:1F07		     db	   0
SEG0070:1F08		     db	   2
SEG0070:1F09		     db	   1
SEG0070:1F0A		     db	   1
SEG0070:1F0B		     db	   0
SEG0070:1F0C		     db	   2
SEG0070:1F0D		     db	 10h
SEG0070:1F0E		     db	   0
SEG0070:1F0F		     db	   0
SEG0070:1F10		     db	   0
SEG0070:1F11		     db	0F8h ; ø
SEG0070:1F12		     db	   1
SEG0070:1F13		     db	   0
SEG0070:1F14		     db	   0
SEG0070:1F15		     db	   0
SEG0070:1F16		     db	   0
SEG0070:1F17		     db	   0
SEG0070:1F18		     db	   0
SEG0070:1F19		     db	   0
SEG0070:1F1A		     db	   0
SEG0070:1F1B		     db	   0
SEG0070:1F1C		     db	   0
SEG0070:1F1D		     db	 4Eh ; N
SEG0070:1F1E		     db	 4Fh ; O
SEG0070:1F1F		     db	 20h
SEG0070:1F20		     db	 4Eh ; N
SEG0070:1F21		     db	 41h ; A
SEG0070:1F22		     db	 4Dh ; M
SEG0070:1F23		     db	 45h ; E
SEG0070:1F24		     db	 20h
SEG0070:1F25		     db	 20h
SEG0070:1F26		     db	 20h
SEG0070:1F27		     db	 20h
SEG0070:1F28		     db	   0
SEG0070:1F29		     db	   3
SEG0070:1F2A		     db	 20h
SEG0070:1F2B		     db	   0
SEG0070:1F2C		     db	 28h ; (
SEG0070:1F2D		     db	   0
SEG0070:1F2E		     db	   0
SEG0070:1F2F		     db	   0
SEG0070:1F30		     db	   0
SEG0070:1F31		     db	   0
SEG0070:1F32		     db	   0
SEG0070:1F33		     db	   0
SEG0070:1F34		     db	   0
SEG0070:1F35		     db	   0
SEG0070:1F36		     db	   0
SEG0070:1F37		     db	   0
SEG0070:1F38		     db	0
SEG0070:1F39		     db	0
SEG0070:1F3A		     db	0
SEG0070:1F3B		     db	0
SEG0070:1F3C		     db	   0
SEG0070:1F3D		     db	   0
SEG0070:1F3E		     db	   0
SEG0070:1F3F		     db	   0
SEG0070:1F40		     db	   0
SEG0070:1F41		     db	   0
SEG0070:1F42		     db	   0
SEG0070:1F43		     db	   0
SEG0070:1F44		     db	   0
SEG0070:1F45		     db	   0
SEG0070:1F46		     db	   0
SEG0070:1F47		     db	   0
SEG0070:1F48		     db	   0
SEG0070:1F49		     db	   0
SEG0070:1F4A		     db	   0
SEG0070:1F4B		     db	   0
SEG0070:1F4C		     db	   0
SEG0070:1F4D		     db	0FFh
SEG0070:1F4E		     db	   1
SEG0070:1F4F		     db	   0
SEG0070:1F50		     db	   0
SEG0070:1F51		     db	   0
SEG0070:1F52		     db	0FFh
SEG0070:1F53		     db	0FFh
SEG0070:1F54		     db	   0
SEG0070:1F55		     db	   0
SEG0070:1F56		     db	 50h ; P
SEG0070:1F57		     db	   3
SEG0070:1F58		     db	   0
SEG0070:1F59		     db	   2
SEG0070:1F5A		     db	   1
SEG0070:1F5B		     db	   1
SEG0070:1F5C		     db	   0
SEG0070:1F5D		     db	   2
SEG0070:1F5E		     db	 10h
SEG0070:1F5F		     db	   0
SEG0070:1F60		     db	   0
SEG0070:1F61		     db	   0
SEG0070:1F62		     db	0F8h ; ø
SEG0070:1F63		     db	   1
SEG0070:1F64		     db	   0
SEG0070:1F65		     db	   0
SEG0070:1F66		     db	   0
SEG0070:1F67		     db	   0
SEG0070:1F68		     db	   0
SEG0070:1F69		     db	   0
SEG0070:1F6A		     db	   0
SEG0070:1F6B		     db	   0
SEG0070:1F6C		     db	   0
SEG0070:1F6D		     db	   0
SEG0070:1F6E		     db	 4Eh ; N
SEG0070:1F6F		     db	 4Fh ; O
SEG0070:1F70		     db	 20h
SEG0070:1F71		     db	 4Eh ; N
SEG0070:1F72		     db	 41h ; A
SEG0070:1F73		     db	 4Dh ; M
SEG0070:1F74		     db	 45h ; E
SEG0070:1F75		     db	 20h
SEG0070:1F76		     db	 20h
SEG0070:1F77		     db	 20h
SEG0070:1F78		     db	 20h
SEG0070:1F79		     db	   0
SEG0070:1F7A		     db	   3
SEG0070:1F7B		     db	 20h
SEG0070:1F7C		     db	   0
SEG0070:1F7D		     db	 28h ; (
SEG0070:1F7E		     db	   0
SEG0070:1F7F		     db	   0
SEG0070:1F80		     db	   0
SEG0070:1F81		     db	   0
SEG0070:1F82		     db	   0
SEG0070:1F83		     db	   0
SEG0070:1F84		     db	   0
SEG0070:1F85		     db	   0
SEG0070:1F86		     db	   0
SEG0070:1F87		     db	   0
SEG0070:1F88		     db	   0
SEG0070:1F89		     db	   0
SEG0070:1F8A		     db	   0
SEG0070:1F8B		     db	   0
SEG0070:1F8C		     db	   0
SEG0070:1F8D		     db	   0
SEG0070:1F8E		     db	   0
SEG0070:1F8F		     db	   0
SEG0070:1F90		     db	   0
SEG0070:1F91		     db	   0
SEG0070:1F92		     db	   0
SEG0070:1F93		     db	   0
SEG0070:1F94		     db	   0
SEG0070:1F95		     db	   0
SEG0070:1F96		     db	   0
SEG0070:1F97		     db	   0
SEG0070:1F98		     db	   0
SEG0070:1F99		     db	   0
SEG0070:1F9A		     db	   0
SEG0070:1F9B		     db	   0
SEG0070:1F9C		     db	   0
SEG0070:1F9D		     db	   0
SEG0070:1F9E		     db	0FFh
SEG0070:1F9F		     db	   1
SEG0070:1FA0		     db	   0
SEG0070:1FA1		     db	   0
SEG0070:1FA2		     db	   0
SEG0070:1FA3		     db	0FFh
SEG0070:1FA4		     db	0FFh
SEG0070:1FA5		     db	   0
SEG0070:1FA6		     db	   0
SEG0070:1FA7		     db	 50h ; P
SEG0070:1FA8		     db	   3
SEG0070:1FA9		     db	   0
SEG0070:1FAA		     db	   2
SEG0070:1FAB		     db	   1
SEG0070:1FAC		     db	   1
SEG0070:1FAD		     db	   0
SEG0070:1FAE		     db	   2
SEG0070:1FAF		     db	 10h
SEG0070:1FB0		     db	   0
SEG0070:1FB1		     db	   0
SEG0070:1FB2		     db	   0
SEG0070:1FB3		     db	0F8h ; ø
SEG0070:1FB4		     db	   1
SEG0070:1FB5		     db	   0
SEG0070:1FB6 unk_1FB6	     db	   0
SEG0070:1FB7		     db	   0
SEG0070:1FB8		     db	   0
SEG0070:1FB9		     db	   0
SEG0070:1FBA		     db	   0
SEG0070:1FBB		     db	   0
SEG0070:1FBC		     db	   0
SEG0070:1FBD		     db	   0
SEG0070:1FBE		     db	   0
SEG0070:1FBF		     db	 4Eh ; N
SEG0070:1FC0		     db	 4Fh ; O
SEG0070:1FC1		     db	 20h
SEG0070:1FC2		     db	 4Eh ; N
SEG0070:1FC3		     db	 41h ; A
SEG0070:1FC4		     db	 4Dh ; M
SEG0070:1FC5		     db	 45h ; E
SEG0070:1FC6		     db	 20h
SEG0070:1FC7		     db	 20h
SEG0070:1FC8		     db	 20h
SEG0070:1FC9		     db	 20h
SEG0070:1FCA		     db	   0
SEG0070:1FCB		     db	   3
SEG0070:1FCC		     db	 20h
SEG0070:1FCD		     db	   0
SEG0070:1FCE		     db	 28h ; (
SEG0070:1FCF		     db	   0
SEG0070:1FD0		     db	   0
SEG0070:1FD1		     db	   0
SEG0070:1FD2		     db	   0
SEG0070:1FD3		     db	   0
SEG0070:1FD4		     db	   0
SEG0070:1FD5		     db	   0
SEG0070:1FD6		     db	   0
SEG0070:1FD7		     db	   0
SEG0070:1FD8		     db	   0
SEG0070:1FD9		     db	   0
SEG0070:1FDA		     db	   0
SEG0070:1FDB		     db	   0
SEG0070:1FDC		     db	   0
SEG0070:1FDD		     db	   0
SEG0070:1FDE		     db	   0
SEG0070:1FDF		     db	   0
SEG0070:1FE0		     db	   0
SEG0070:1FE1		     db	   0
SEG0070:1FE2		     db	   0
SEG0070:1FE3		     db	   0
SEG0070:1FE4		     db	   0
SEG0070:1FE5		     db	   0
SEG0070:1FE6		     db	   0
SEG0070:1FE7		     db	   0
SEG0070:1FE8		     db	   0
SEG0070:1FE9		     db	   0
SEG0070:1FEA		     db	   0
SEG0070:1FEB		     db	   0
SEG0070:1FEC		     db	   0
SEG0070:1FED		     db	   0
SEG0070:1FEE		     db	   0
SEG0070:1FEF		     db	0FFh
SEG0070:1FF0		     db	   1
SEG0070:1FF1		     db	   0
SEG0070:1FF2		     db	   0
SEG0070:1FF3		     db	   0
SEG0070:1FF4		     db	0FFh
SEG0070:1FF5		     db	0FFh
SEG0070:1FF6		     db	   0
SEG0070:1FF7		     db	   0
SEG0070:1FF8		     db	 50h ; P
SEG0070:1FF9		     db	   3
SEG0070:1FFA		     db	   0
SEG0070:1FFB		     db	   2
SEG0070:1FFC		     db	   1
SEG0070:1FFD		     db	   1
SEG0070:1FFE		     db	   0
SEG0070:1FFF		     db	   2
SEG0070:2000		     db	 10h
SEG0070:2001		     db	   0
SEG0070:2002		     db	   0
SEG0070:2003		     db	   0
SEG0070:2004		     db	0F8h ; ø
SEG0070:2005		     db	   1
SEG0070:2006		     db	   0
SEG0070:2007		     db	   0
SEG0070:2008		     db	   0
SEG0070:2009		     db	   0
SEG0070:200A		     db	   0
SEG0070:200B		     db	   0
SEG0070:200C		     db	   0
SEG0070:200D		     db	   0
SEG0070:200E		     db	   0
SEG0070:200F		     db	   0
SEG0070:2010		     db	 4Eh ; N
SEG0070:2011		     db	 4Fh ; O
SEG0070:2012		     db	 20h
SEG0070:2013		     db	 4Eh ; N
SEG0070:2014		     db	 41h ; A
SEG0070:2015		     db	 4Dh ; M
SEG0070:2016		     db	 45h ; E
SEG0070:2017		     db	 20h
SEG0070:2018		     db	 20h
SEG0070:2019		     db	 20h
SEG0070:201A		     db	 20h
SEG0070:201B		     db	   0
SEG0070:201C		     db	   3
SEG0070:201D		     db	 20h
SEG0070:201E		     db	   0
SEG0070:201F		     db	 28h ; (
SEG0070:2020		     db	   0
SEG0070:2021		     db	   0
SEG0070:2022		     db	   0
SEG0070:2023		     db	   0
SEG0070:2024		     db	   0
SEG0070:2025		     db	   0
SEG0070:2026		     db	   0
SEG0070:2027		     db	   0
SEG0070:2028		     db	   0
SEG0070:2029		     db	   0
SEG0070:202A		     db	   0
SEG0070:202B		     db	   0
SEG0070:202C		     db	   0
SEG0070:202D		     db	   0
SEG0070:202E		     db	   0
SEG0070:202F		     db	   0
SEG0070:2030		     db	   0
SEG0070:2031		     db	   0
SEG0070:2032		     db	   0
SEG0070:2033		     db	   0
SEG0070:2034		     db	   0
SEG0070:2035		     db	   0
SEG0070:2036		     db	   0
SEG0070:2037		     db	   0
SEG0070:2038		     db	   0
SEG0070:2039		     db	   0
SEG0070:203A		     db	   0
SEG0070:203B		     db	   0
SEG0070:203C		     db	   0
SEG0070:203D unk_203D	     db	   0
SEG0070:203E		     db	   0
SEG0070:203F		     db	   0
SEG0070:2040		     db	0FFh
SEG0070:2041		     db	   1
SEG0070:2042		     db	   0
SEG0070:2043		     db	   0
SEG0070:2044		     db	   0
SEG0070:2045		     db	0FFh
SEG0070:2046		     db	0FFh
SEG0070:2047		     db	   0
SEG0070:2048		     db	   0
SEG0070:2049		     db	 50h ; P
SEG0070:204A		     db	   3
SEG0070:204B		     db	   0
SEG0070:204C		     db	   2
SEG0070:204D unk_204D	     db	   1
SEG0070:204E		     db	   1
SEG0070:204F		     db	   0
SEG0070:2050		     db	   2
SEG0070:2051		     db	 10h
SEG0070:2052		     db	   0
SEG0070:2053		     db	   0
SEG0070:2054		     db	   0
SEG0070:2055		     db	0F8h ; ø
SEG0070:2056		     db	   1
SEG0070:2057		     db	   0
SEG0070:2058		     db	   0
SEG0070:2059		     db	   0
SEG0070:205A		     db	   0
SEG0070:205B		     db	   0
SEG0070:205C		     db	   0
SEG0070:205D		     db	   0
SEG0070:205E		     db	   0
SEG0070:205F		     db	   0
SEG0070:2060		     db	   0
SEG0070:2061		     db	 4Eh ; N
SEG0070:2062		     db	 4Fh ; O
SEG0070:2063		     db	 20h
SEG0070:2064		     db	 4Eh ; N
SEG0070:2065		     db	 41h ; A
SEG0070:2066		     db	 4Dh ; M
SEG0070:2067		     db	 45h ; E
SEG0070:2068		     db	 20h
SEG0070:2069		     db	 20h
SEG0070:206A		     db	 20h
SEG0070:206B		     db	 20h
SEG0070:206C		     db	   0
SEG0070:206D		     db	   3
SEG0070:206E		     db	 20h
SEG0070:206F		     db	   0
SEG0070:2070		     db	 28h ; (
SEG0070:2071		     db	   0
SEG0070:2072		     db	   0
SEG0070:2073		     db	   0
SEG0070:2074		     db	   0
SEG0070:2075		     db	   0
SEG0070:2076		     db	   0
SEG0070:2077		     db	   0
SEG0070:2078		     db	   0
SEG0070:2079		     db	   0
SEG0070:207A		     db	   0
SEG0070:207B		     db	   0
SEG0070:207C		     db	   0
SEG0070:207D		     db	   0
SEG0070:207E		     db	   0
SEG0070:207F		     db	   0
SEG0070:2080		     db	   0
SEG0070:2081		     db	   0
SEG0070:2082		     db	   0
SEG0070:2083		     db	   0
SEG0070:2084		     db	   0
SEG0070:2085		     db	   0
SEG0070:2086		     db	   0
SEG0070:2087		     db	   0
SEG0070:2088		     db	   0
SEG0070:2089 unk_2089	     db	   0
SEG0070:208A		     db	   0
SEG0070:208B		     db	   0
SEG0070:208C		     db	   0
SEG0070:208D		     db	   0
SEG0070:208E		     db	   0
SEG0070:208F		     db	   0
SEG0070:2090		     db	   0
SEG0070:2091		     db	0FFh
SEG0070:2092		     db	   1
SEG0070:2093		     db	   0
SEG0070:2094		     db	   0
SEG0070:2095		     db	   0
SEG0070:2096		     db	0FFh
SEG0070:2097		     db	0FFh
SEG0070:2098		     db	   0
SEG0070:2099		     db	   0
SEG0070:209A		     db	 50h ; P
SEG0070:209B		     db	   3
SEG0070:209C		     db	   0
SEG0070:209D		     db	   2
SEG0070:209E		     db	   1
SEG0070:209F		     db	   1
SEG0070:20A0		     db	   0
SEG0070:20A1		     db	   2
SEG0070:20A2		     db	 10h
SEG0070:20A3		     db	   0
SEG0070:20A4		     db	   0
SEG0070:20A5		     db	   0
SEG0070:20A6		     db	0F8h ; ø
SEG0070:20A7		     db	   1
SEG0070:20A8		     db	   0
SEG0070:20A9		     db	   0
SEG0070:20AA		     db	   0
SEG0070:20AB		     db	   0
SEG0070:20AC		     db	   0
SEG0070:20AD		     db	   0
SEG0070:20AE		     db	   0
SEG0070:20AF		     db	   0
SEG0070:20B0		     db	   0
SEG0070:20B1		     db	   0
SEG0070:20B2		     db	 4Eh ; N
SEG0070:20B3		     db	 4Fh ; O
SEG0070:20B4		     db	 20h
SEG0070:20B5		     db	 4Eh ; N
SEG0070:20B6		     db	 41h ; A
SEG0070:20B7		     db	 4Dh ; M
SEG0070:20B8		     db	 45h ; E
SEG0070:20B9		     db	 20h
SEG0070:20BA		     db	 20h
SEG0070:20BB		     db	 20h
SEG0070:20BC		     db	 20h
SEG0070:20BD		     db	   0
SEG0070:20BE		     db	   3
SEG0070:20BF		     db	 20h
SEG0070:20C0		     db	   0
SEG0070:20C1		     db	 28h ; (
SEG0070:20C2		     db	   0
SEG0070:20C3		     db	   0
SEG0070:20C4		     db	   0
SEG0070:20C5		     db	   0
SEG0070:20C6		     db	   0
SEG0070:20C7		     db	   0
SEG0070:20C8		     db	   0
SEG0070:20C9		     db	   0
SEG0070:20CA		     db	   0
SEG0070:20CB		     db	   0
SEG0070:20CC		     db	   0
SEG0070:20CD		     db	   0
SEG0070:20CE		     db	   0
SEG0070:20CF		     db	   0
SEG0070:20D0		     db	   0
SEG0070:20D1		     db	   0
SEG0070:20D2		     db	   0
SEG0070:20D3		     db	   0
SEG0070:20D4		     db	   0
SEG0070:20D5		     db	   0
SEG0070:20D6		     db	   0
SEG0070:20D7		     db	   0
SEG0070:20D8		     db	   0
SEG0070:20D9		     db	   0
SEG0070:20DA		     db	   0
SEG0070:20DB		     db	   0
SEG0070:20DC		     db	   0
SEG0070:20DD		     db	   0
SEG0070:20DE		     db	   0
SEG0070:20DF		     db	   0
SEG0070:20E0		     db	   0
SEG0070:20E1		     db	   0
SEG0070:20E2		     db	0FFh
SEG0070:20E3		     db	   1
SEG0070:20E4		     db	   0
SEG0070:20E5		     db	   0
SEG0070:20E6		     db	   0
SEG0070:20E7		     db	0FFh
SEG0070:20E8		     db	0FFh
SEG0070:20E9		     db	   0
SEG0070:20EA		     db	   0
SEG0070:20EB		     db	 50h ; P
SEG0070:20EC		     db	   3
SEG0070:20ED		     db	   0
SEG0070:20EE		     db	   2
SEG0070:20EF		     db	   1
SEG0070:20F0		     db	   1
SEG0070:20F1		     db	   0
SEG0070:20F2		     db	   2
SEG0070:20F3		     db	 10h
SEG0070:20F4		     db	   0
SEG0070:20F5		     db	   0
SEG0070:20F6		     db	   0
SEG0070:20F7		     db	0F8h ; ø
SEG0070:20F8		     db	   1
SEG0070:20F9		     db	   0
SEG0070:20FA		     db	   0
SEG0070:20FB		     db	   0
SEG0070:20FC		     db	   0
SEG0070:20FD		     db	   0
SEG0070:20FE		     db	   0
SEG0070:20FF		     db	   0
SEG0070:2100		     db	   0
SEG0070:2101		     db	   0
SEG0070:2102		     db	   0
SEG0070:2103		     db	 4Eh ; N
SEG0070:2104		     db	 4Fh ; O
SEG0070:2105		     db	 20h
SEG0070:2106		     db	 4Eh ; N
SEG0070:2107		     db	 41h ; A
SEG0070:2108		     db	 4Dh ; M
SEG0070:2109		     db	 45h ; E
SEG0070:210A		     db	 20h
SEG0070:210B		     db	 20h
SEG0070:210C		     db	 20h
SEG0070:210D		     db	 20h
SEG0070:210E		     db	   0
SEG0070:210F		     db	   3
SEG0070:2110		     db	 20h
SEG0070:2111		     db	   0
SEG0070:2112		     db	 28h ; (
SEG0070:2113		     db	   0
SEG0070:2114		     db	   0
SEG0070:2115		     db	   0
SEG0070:2116		     db	   0
SEG0070:2117		     db	   0
SEG0070:2118		     db	   0
SEG0070:2119		     db	   0
SEG0070:211A		     db	   0
SEG0070:211B		     db	   0
SEG0070:211C		     db	   0
SEG0070:211D		     db	   0
SEG0070:211E		     db	   0
SEG0070:211F		     db	   0
SEG0070:2120		     db	   0
SEG0070:2121		     db	   0
SEG0070:2122		     db	   0
SEG0070:2123		     db	   0
SEG0070:2124		     db	   0
SEG0070:2125		     db	   0
SEG0070:2126		     db	   0
SEG0070:2127		     db	   0
SEG0070:2128		     db	   0
SEG0070:2129		     db	   0
SEG0070:212A		     db	   0
SEG0070:212B		     db	   0
SEG0070:212C		     db	   0
SEG0070:212D		     db	   0
SEG0070:212E		     db	   0
SEG0070:212F		     db	   0
SEG0070:2130		     db	   0
SEG0070:2131		     db	   0
SEG0070:2132		     db	   0
SEG0070:2133		     db	0FFh
SEG0070:2134		     db	   1
SEG0070:2135		     db	   0
SEG0070:2136		     db	   0
SEG0070:2137		     db	   0
SEG0070:2138		     db	0FFh
SEG0070:2139		     db	0FFh
SEG0070:213A		     db	   0
SEG0070:213B		     db	   0
SEG0070:213C		     db	 50h ; P
SEG0070:213D		     db	   3
SEG0070:213E		     db	   0
SEG0070:213F		     db	   2
SEG0070:2140		     db	   1
SEG0070:2141		     db	   1
SEG0070:2142		     db	   0
SEG0070:2143		     db	   2
SEG0070:2144		     db	 10h
SEG0070:2145		     db	   0
SEG0070:2146		     db	   0
SEG0070:2147		     db	   0
SEG0070:2148		     db	0F8h ; ø
SEG0070:2149		     db	   1
SEG0070:214A		     db	   0
SEG0070:214B		     db	   0
SEG0070:214C		     db	   0
SEG0070:214D		     db	   0
SEG0070:214E		     db	   0
SEG0070:214F		     db	   0
SEG0070:2150		     db	   0
SEG0070:2151		     db	   0
SEG0070:2152		     db	   0
SEG0070:2153		     db	   0
SEG0070:2154		     db	 4Eh ; N
SEG0070:2155		     db	 4Fh ; O
SEG0070:2156		     db	 20h
SEG0070:2157		     db	 4Eh ; N
SEG0070:2158		     db	 41h ; A
SEG0070:2159		     db	 4Dh ; M
SEG0070:215A		     db	 45h ; E
SEG0070:215B		     db	 20h
SEG0070:215C		     db	 20h
SEG0070:215D		     db	 20h
SEG0070:215E		     db	 20h
SEG0070:215F		     db	   0
SEG0070:2160		     db	   3
SEG0070:2161		     db	 20h
SEG0070:2162		     db	   0
SEG0070:2163		     db	 28h ; (
SEG0070:2164		     db	   0
SEG0070:2165		     db	   0
SEG0070:2166		     db	   0
SEG0070:2167		     db	   0
SEG0070:2168		     db	   0
SEG0070:2169		     db	   0
SEG0070:216A		     db	   0
SEG0070:216B		     db	   0
SEG0070:216C		     db	   0
SEG0070:216D		     db	   0
SEG0070:216E		     db	   0
SEG0070:216F		     db	   0
SEG0070:2170		     db	   0
SEG0070:2171		     db	   0
SEG0070:2172		     db	   0
SEG0070:2173		     db	   0
SEG0070:2174		     db	   0
SEG0070:2175		     db	   0
SEG0070:2176		     db	   0
SEG0070:2177		     db	   0
SEG0070:2178		     db	   0
SEG0070:2179		     db	   0
SEG0070:217A		     db	   0
SEG0070:217B		     db	   0
SEG0070:217C		     db	   0
SEG0070:217D		     db	   0
SEG0070:217E		     db	   0
SEG0070:217F		     db	   0
SEG0070:2180		     db	   0
SEG0070:2181		     db	   0
SEG0070:2182		     db	   0
SEG0070:2183		     db	   0
SEG0070:2184		     db	0FFh
SEG0070:2185		     db	   1
SEG0070:2186		     db	   0
SEG0070:2187		     db	   0
SEG0070:2188		     db	   0
SEG0070:2189		     db	0FFh
SEG0070:218A		     db	0FFh
SEG0070:218B		     db	   0
SEG0070:218C		     db	   0
SEG0070:218D		     db	 50h ; P
SEG0070:218E		     db	   3
SEG0070:218F		     db	   0
SEG0070:2190		     db	   2
SEG0070:2191		     db	   1
SEG0070:2192		     db	   1
SEG0070:2193		     db	   0
SEG0070:2194		     db	   2
SEG0070:2195		     db	 10h
SEG0070:2196		     db	   0
SEG0070:2197		     db	   0
SEG0070:2198		     db	   0
SEG0070:2199		     db	0F8h ; ø
SEG0070:219A		     db	   1
SEG0070:219B		     db	   0
SEG0070:219C		     db	   0
SEG0070:219D		     db	   0
SEG0070:219E		     db	   0
SEG0070:219F		     db	   0
SEG0070:21A0		     db	   0
SEG0070:21A1		     db	   0
SEG0070:21A2		     db	   0
SEG0070:21A3		     db	   0
SEG0070:21A4		     db	   0
SEG0070:21A5		     db	 4Eh ; N
SEG0070:21A6 unk_21A6	     db	 4Fh ; O	     ; CODE XREF: SYSINIT:09ABP
SEG0070:21A7		     db	 20h
SEG0070:21A8		     db	 4Eh ; N
SEG0070:21A9		     db	 41h ; A
SEG0070:21AA		     db	 4Dh ; M
SEG0070:21AB		     db	 45h ; E
SEG0070:21AC		     db	 20h
SEG0070:21AD		     db	 20h
SEG0070:21AE		     db	 20h
SEG0070:21AF		     db	 20h
SEG0070:21B0		     db	   0
SEG0070:21B1		     db	   3
SEG0070:21B2		     db	 20h
SEG0070:21B3		     db	   0
SEG0070:21B4		     db	 28h ; (
SEG0070:21B5		     db	   0
SEG0070:21B6		     db	   0
SEG0070:21B7		     db	   0
SEG0070:21B8		     db	   0
SEG0070:21B9		     db	   0
SEG0070:21BA		     db	   0
SEG0070:21BB		     db	   0
SEG0070:21BC		     db	   0
SEG0070:21BD		     db	   0
SEG0070:21BE		     db	   0
SEG0070:21BF		     db	   0
SEG0070:21C0		     db	   0
SEG0070:21C1		     db	   0
SEG0070:21C2		     db	   0
SEG0070:21C3		     db	   0
SEG0070:21C4		     db	   0
SEG0070:21C5		     db	   0
SEG0070:21C6		     db	   0
SEG0070:21C7		     db	   0
SEG0070:21C8		     db	   0
SEG0070:21C9		     db	   0
SEG0070:21CA		     db	   0
SEG0070:21CB		     db	   0
SEG0070:21CC		     db	   0
SEG0070:21CD		     db	   0
SEG0070:21CE		     db	   0
SEG0070:21CF		     db	   0
SEG0070:21D0		     db	   0
SEG0070:21D1		     db	   0
SEG0070:21D2		     db	   0
SEG0070:21D3		     db	   0
SEG0070:21D4		     db	   0
SEG0070:21D5		     db	0FFh
SEG0070:21D6		     db	   1
SEG0070:21D7		     db	   0
SEG0070:21D8		     db	   0
SEG0070:21D9		     db	   0
SEG0070:21DA		     db	0FFh
SEG0070:21DB		     db	0FFh
SEG0070:21DC		     db	   0
SEG0070:21DD		     db	   0
SEG0070:21DE		     db	 50h ; P
SEG0070:21DF		     db	   3
SEG0070:21E0		     db	   0
SEG0070:21E1		     db	   2
SEG0070:21E2		     db	   1
SEG0070:21E3		     db	   1
SEG0070:21E4		     db	   0
SEG0070:21E5		     db	   2
SEG0070:21E6		     db	 10h
SEG0070:21E7		     db	   0
SEG0070:21E8		     db	   0
SEG0070:21E9		     db	   0
SEG0070:21EA		     db	0F8h ; ø
SEG0070:21EB		     db	   1
SEG0070:21EC		     db	   0
SEG0070:21ED		     db	   0
SEG0070:21EE		     db	   0
SEG0070:21EF		     db	   0
SEG0070:21F0		     db	   0
SEG0070:21F1		     db	   0
SEG0070:21F2		     db	   0
SEG0070:21F3		     db	   0
SEG0070:21F4		     db	   0
SEG0070:21F5		     db	   0
SEG0070:21F6		     db	 4Eh ; N
SEG0070:21F7		     db	 4Fh ; O
SEG0070:21F8		     db	 20h
SEG0070:21F9		     db	 4Eh ; N
SEG0070:21FA		     db	 41h ; A
SEG0070:21FB		     db	 4Dh ; M
SEG0070:21FC		     db	 45h ; E
SEG0070:21FD		     db	 20h
SEG0070:21FE		     db	 20h
SEG0070:21FF		     db	 20h
SEG0070:2200		     db	 20h
SEG0070:2201		     db	   0
SEG0070:2202		     db	   3
SEG0070:2203		     db	 20h
SEG0070:2204		     db	   0
SEG0070:2205		     db	 28h ; (
SEG0070:2206		     db	   0
SEG0070:2207		     db	   0
SEG0070:2208		     db	   0
SEG0070:2209		     db	   0
SEG0070:220A		     db	   0
SEG0070:220B		     db	   0
SEG0070:220C		     db	   0
SEG0070:220D		     db	   0
SEG0070:220E		     db	   0
SEG0070:220F		     db	   0
SEG0070:2210		     db	   0
SEG0070:2211		     db	   0
SEG0070:2212		     db	   0
SEG0070:2213		     db	   0
SEG0070:2214		     db	   0
SEG0070:2215		     db	   0
SEG0070:2216		     db	   0
SEG0070:2217		     db	   0
SEG0070:2218		     db	   0
SEG0070:2219		     db	   0
SEG0070:221A		     db	   0
SEG0070:221B		     db	   0
SEG0070:221C		     db	   0
SEG0070:221D		     db	   0
SEG0070:221E		     db	   0
SEG0070:221F		     db	   0
SEG0070:2220		     db	   0
SEG0070:2221		     db	   0
SEG0070:2222		     db	   0
SEG0070:2223		     db	   0
SEG0070:2224		     db	   0
SEG0070:2225		     db	   0
SEG0070:2226		     db	0FFh
SEG0070:2227		     db	   1
SEG0070:2228		     db	   0
SEG0070:2229		     db	   0
SEG0070:222A		     db	   0
SEG0070:222B		     db	0FFh
SEG0070:222C		     db	0FFh
SEG0070:222D		     db	   0
SEG0070:222E		     db	   0
SEG0070:222F		     db	 50h ; P
SEG0070:2230		     db	   3
SEG0070:2231		     db	   0
SEG0070:2232		     db	   2
SEG0070:2233		     db	   1
SEG0070:2234		     db	   1
SEG0070:2235		     db	   0
SEG0070:2236		     db	   2
SEG0070:2237		     db	 10h
SEG0070:2238		     db	   0
SEG0070:2239		     db	   0
SEG0070:223A		     db	   0
SEG0070:223B		     db	0F8h ; ø
SEG0070:223C		     db	   1
SEG0070:223D		     db	   0
SEG0070:223E		     db	   0
SEG0070:223F		     db	   0
SEG0070:2240		     db	   0
SEG0070:2241		     db	   0
SEG0070:2242		     db	   0
SEG0070:2243		     db	   0
SEG0070:2244		     db	   0
SEG0070:2245		     db	   0
SEG0070:2246		     db	   0
SEG0070:2247		     db	 4Eh ; N
SEG0070:2248		     db	 4Fh ; O
SEG0070:2249		     db	 20h
SEG0070:224A		     db	 4Eh ; N
SEG0070:224B		     db	 41h ; A
SEG0070:224C		     db	 4Dh ; M
SEG0070:224D		     db	 45h ; E
SEG0070:224E		     db	 20h
SEG0070:224F		     db	 20h
SEG0070:2250		     db	 20h
SEG0070:2251		     db	 20h
SEG0070:2252		     db	   0
SEG0070:2253		     db	   3
SEG0070:2254		     db	 20h
SEG0070:2255		     db	   0
SEG0070:2256		     db	 28h ; (
SEG0070:2257		     db	   0
SEG0070:2258		     db	   0
SEG0070:2259		     db	   0
SEG0070:225A		     db	   0
SEG0070:225B		     db	   0
SEG0070:225C		     db	   0
SEG0070:225D		     db	   0
SEG0070:225E		     db	   0
SEG0070:225F		     db	   0
SEG0070:2260		     db	   0
SEG0070:2261		     db	   0
SEG0070:2262		     db	   0
SEG0070:2263		     db	   0
SEG0070:2264		     db	   0
SEG0070:2265		     db	   0
SEG0070:2266		     db	   0
SEG0070:2267		     db	   0
SEG0070:2268		     db	   0
SEG0070:2269		     db	   0
SEG0070:226A		     db	   0
SEG0070:226B		     db	   0
SEG0070:226C		     db	   0
SEG0070:226D		     db	   0
SEG0070:226E		     db	   0
SEG0070:226F		     db	   0
SEG0070:2270		     db	   0
SEG0070:2271		     db	   0
SEG0070:2272		     db	   0
SEG0070:2273		     db	   0
SEG0070:2274		     db	   0
SEG0070:2275		     db	   0
SEG0070:2276		     db	   0
SEG0070:2277		     db	0FFh
SEG0070:2278		     db	   1
SEG0070:2279		     db	   0
SEG0070:227A		     db	   0
SEG0070:227B		     db	   0
SEG0070:227C		     db	0FFh
SEG0070:227D		     db	0FFh
SEG0070:227E		     db	   0
SEG0070:227F		     db	   0
SEG0070:2280		     db	 50h ; P
SEG0070:2281		     db	   3
SEG0070:2282		     db	   0
SEG0070:2283		     db	   2
SEG0070:2284		     db	   1
SEG0070:2285		     db	   1
SEG0070:2286		     db	   0
SEG0070:2287		     db	   2
SEG0070:2288		     db	 10h
SEG0070:2289		     db	   0
SEG0070:228A		     db	   0
SEG0070:228B		     db	   0
SEG0070:228C		     db	0F8h ; ø
SEG0070:228D		     db	   1
SEG0070:228E		     db	   0
SEG0070:228F		     db	   0
SEG0070:2290		     db	   0
SEG0070:2291		     db	   0
SEG0070:2292		     db	   0
SEG0070:2293		     db	   0
SEG0070:2294		     db	   0
SEG0070:2295		     db	   0
SEG0070:2296		     db	   0
SEG0070:2297		     db	   0
SEG0070:2298		     db	 4Eh ; N
SEG0070:2299		     db	 4Fh ; O
SEG0070:229A		     db	 20h
SEG0070:229B		     db	 4Eh ; N
SEG0070:229C		     db	 41h ; A
SEG0070:229D		     db	 4Dh ; M
SEG0070:229E		     db	 45h ; E
SEG0070:229F		     db	 20h
SEG0070:22A0		     db	 20h
SEG0070:22A1		     db	 20h
SEG0070:22A2		     db	 20h
SEG0070:22A3		     db	   0
SEG0070:22A4		     db	   3
SEG0070:22A5		     db	 20h
SEG0070:22A6		     db	   0
SEG0070:22A7		     db	 28h ; (
SEG0070:22A8		     db	   0
SEG0070:22A9		     db	   0
SEG0070:22AA		     db	   0
SEG0070:22AB		     db	   0
SEG0070:22AC		     db	   0
SEG0070:22AD		     db	   0
SEG0070:22AE		     db	   0
SEG0070:22AF		     db	   0
SEG0070:22B0		     db	   0
SEG0070:22B1		     db	   0
SEG0070:22B2		     db	   0
SEG0070:22B3		     db	   0
SEG0070:22B4		     db	   0
SEG0070:22B5		     db	   0
SEG0070:22B6		     db	   0
SEG0070:22B7		     db	   0
SEG0070:22B8		     db	   0
SEG0070:22B9		     db	   0
SEG0070:22BA		     db	   0
SEG0070:22BB		     db	   0
SEG0070:22BC		     db	   0
SEG0070:22BD		     db	   0
SEG0070:22BE		     db	   0
SEG0070:22BF		     db	   0
SEG0070:22C0		     db	   0
SEG0070:22C1		     db	   0
SEG0070:22C2		     db	   0
SEG0070:22C3		     db	   0
SEG0070:22C4		     db	   0
SEG0070:22C5		     db	   0
SEG0070:22C6		     db	   0
SEG0070:22C7		     db	   0
SEG0070:22C8		     db	0FFh
SEG0070:22C9		     db	   1
SEG0070:22CA		     db	   0
SEG0070:22CB		     db	   0
SEG0070:22CC		     db	   0
SEG0070:22CD		     db	0FFh
SEG0070:22CE		     db	0FFh
SEG0070:22CF		     db	   0
SEG0070:22D0		     db	   0
SEG0070:22D1		     db	 50h ; P
SEG0070:22D2		     db	   3
SEG0070:22D3		     db	   0
SEG0070:22D4		     db	   2
SEG0070:22D5		     db	   1
SEG0070:22D6		     db	   1
SEG0070:22D7		     db	   0
SEG0070:22D8		     db	   2
SEG0070:22D9		     db	 10h
SEG0070:22DA		     db	   0
SEG0070:22DB		     db	   0
SEG0070:22DC		     db	   0
SEG0070:22DD		     db	0F8h ; ø
SEG0070:22DE		     db	   1
SEG0070:22DF		     db	   0
SEG0070:22E0		     db	   0
SEG0070:22E1		     db	   0
SEG0070:22E2		     db	   0
SEG0070:22E3		     db	   0
SEG0070:22E4		     db	   0
SEG0070:22E5		     db	   0
SEG0070:22E6		     db	   0
SEG0070:22E7		     db	   0
SEG0070:22E8		     db	   0
SEG0070:22E9		     db	 4Eh ; N
SEG0070:22EA		     db	 4Fh ; O
SEG0070:22EB		     db	 20h
SEG0070:22EC		     db	 4Eh ; N
SEG0070:22ED		     db	 41h ; A
SEG0070:22EE		     db	 4Dh ; M
SEG0070:22EF		     db	 45h ; E
SEG0070:22F0		     db	 20h
SEG0070:22F1		     db	 20h
SEG0070:22F2		     db	 20h
SEG0070:22F3		     db	 20h
SEG0070:22F4		     db	   0
SEG0070:22F5		     db	   3
SEG0070:22F6		     db	 20h
SEG0070:22F7		     db	   0
SEG0070:22F8		     db	 28h ; (
SEG0070:22F9		     db	   0
SEG0070:22FA		     db	   0
SEG0070:22FB		     db	   0
SEG0070:22FC		     db	   0
SEG0070:22FD		     db	   0
SEG0070:22FE		     db	   0
SEG0070:22FF		     db	   0
SEG0070:2300		     db	   0
SEG0070:2301		     db	   0
SEG0070:2302		     db	   0
SEG0070:2303		     db	   0
SEG0070:2304		     db	   0
SEG0070:2305		     db	   0
SEG0070:2306		     db	   0
SEG0070:2307		     db	   0
SEG0070:2308		     db	   0
SEG0070:2309		     db	   0
SEG0070:230A		     db	   0
SEG0070:230B		     db	   0
SEG0070:230C		     db	   0
SEG0070:230D		     db	   0
SEG0070:230E		     db	   0
SEG0070:230F		     db	   0
SEG0070:2310		     db	   0
SEG0070:2311		     db	   0
SEG0070:2312		     db	   0
SEG0070:2313		     db	   0
SEG0070:2314		     db	   0
SEG0070:2315		     db	   0
SEG0070:2316		     db	   0
SEG0070:2317		     db	   0
SEG0070:2318		     db	   0
SEG0070:2319		     db	0FFh
SEG0070:231A		     db	   1
SEG0070:231B		     db	   0
SEG0070:231C		     db	   0
SEG0070:231D		     db	   0
SEG0070:231E		     db	0FFh
SEG0070:231F		     db	0FFh
SEG0070:2320		     db	   0
SEG0070:2321		     db	   0
SEG0070:2322		     db	 50h ; P
SEG0070:2323		     db	   3
SEG0070:2324		     db	   0
SEG0070:2325		     db	   2
SEG0070:2326		     db	   1
SEG0070:2327		     db	   1
SEG0070:2328		     db	   0
SEG0070:2329		     db	   2
SEG0070:232A		     db	 10h
SEG0070:232B		     db	   0
SEG0070:232C		     db	   0
SEG0070:232D		     db	   0
SEG0070:232E		     db	0F8h ; ø
SEG0070:232F		     db	   1
SEG0070:2330		     db	   0
SEG0070:2331		     db	   0
SEG0070:2332		     db	   0
SEG0070:2333		     db	   0
SEG0070:2334		     db	   0
SEG0070:2335		     db	   0
SEG0070:2336		     db	   0
SEG0070:2337		     db	   0
SEG0070:2338		     db	   0
SEG0070:2339		     db	   0
SEG0070:233A		     db	 4Eh ; N
SEG0070:233B		     db	 4Fh ; O
SEG0070:233C		     db	 20h
SEG0070:233D		     db	 4Eh ; N
SEG0070:233E		     db	 41h ; A
SEG0070:233F		     db	 4Dh ; M
SEG0070:2340		     db	 45h ; E
SEG0070:2341		     db	 20h
SEG0070:2342		     db	 20h
SEG0070:2343		     db	 20h
SEG0070:2344		     db	 20h
SEG0070:2345		     db	   0
SEG0070:2346		     db	   3
SEG0070:2347		     db	 20h
SEG0070:2348		     db	   0
SEG0070:2349		     db	 28h ; (
SEG0070:234A		     db	   0
SEG0070:234B		     db	   0
SEG0070:234C		     db	   0
SEG0070:234D		     db	   0
SEG0070:234E		     db	   0
SEG0070:234F		     db	   0
SEG0070:2350		     db	   0
SEG0070:2351		     db	   0
SEG0070:2352		     db	   0
SEG0070:2353		     db	   0
SEG0070:2354		     db	   0
SEG0070:2355		     db	   0
SEG0070:2356		     db	   0
SEG0070:2357		     db	   0
SEG0070:2358		     db	   0
SEG0070:2359		     db	   0
SEG0070:235A		     db	   0
SEG0070:235B		     db	   0
SEG0070:235C		     db	   0
SEG0070:235D		     db	   0
SEG0070:235E		     db	   0
SEG0070:235F		     db	   0
SEG0070:2360		     db	   0
SEG0070:2361		     db	   0
SEG0070:2362		     db	   0
SEG0070:2363		     db	   0
SEG0070:2364		     db	   0
SEG0070:2365		     db	   0
SEG0070:2366		     db	   0
SEG0070:2367		     db	   0
SEG0070:2368		     db	   0
SEG0070:2369		     db	   0
SEG0070:236A		     db	0FFh
SEG0070:236B		     db	   1
SEG0070:236C		     db	   0
SEG0070:236D		     db	   0
SEG0070:236E		     db	   0
SEG0070:236F		     db	0FFh
SEG0070:2370		     db	0FFh
SEG0070:2371		     db	   0
SEG0070:2372		     db	   0
SEG0070:2373		     db	 50h ; P
SEG0070:2374		     db	   3
SEG0070:2375		     db	   0
SEG0070:2376		     db	   2
SEG0070:2377		     db	   1
SEG0070:2378		     db	   1
SEG0070:2379		     db	   0
SEG0070:237A		     db	   2
SEG0070:237B		     db	 10h
SEG0070:237C		     db	   0
SEG0070:237D		     db	   0
SEG0070:237E		     db	   0
SEG0070:237F		     db	0F8h ; ø
SEG0070:2380		     db	   1
SEG0070:2381		     db	   0
SEG0070:2382		     db	   0
SEG0070:2383		     db	   0
SEG0070:2384		     db	   0
SEG0070:2385		     db	   0
SEG0070:2386		     db	   0
SEG0070:2387		     db	   0
SEG0070:2388		     db	   0
SEG0070:2389		     db	   0
SEG0070:238A		     db	   0
SEG0070:238B		     db	 4Eh ; N
SEG0070:238C		     db	 4Fh ; O
SEG0070:238D		     db	 20h
SEG0070:238E		     db	 4Eh ; N
SEG0070:238F		     db	 41h ; A
SEG0070:2390		     db	 4Dh ; M
SEG0070:2391		     db	 45h ; E
SEG0070:2392		     db	 20h
SEG0070:2393		     db	 20h
SEG0070:2394		     db	 20h
SEG0070:2395		     db	 20h
SEG0070:2396		     db	   0
SEG0070:2397		     db	   3
SEG0070:2398		     db	 20h
SEG0070:2399		     db	   0
SEG0070:239A		     db	 28h ; (
SEG0070:239B		     db	   0
SEG0070:239C		     db	   0
SEG0070:239D		     db	   0
SEG0070:239E		     db	   0
SEG0070:239F		     db	   0
SEG0070:23A0		     db	   0
SEG0070:23A1		     db	   0
SEG0070:23A2		     db	   0
SEG0070:23A3		     db	   0
SEG0070:23A4		     db	   0
SEG0070:23A5		     db	   0
SEG0070:23A6		     db	   0
SEG0070:23A7		     db	   0
SEG0070:23A8		     db	   0
SEG0070:23A9		     db	   0
SEG0070:23AA		     db	   0
SEG0070:23AB		     db	   0
SEG0070:23AC		     db	   0
SEG0070:23AD		     db	   0
SEG0070:23AE		     db	   0
SEG0070:23AF		     db	   0
SEG0070:23B0		     db	   0
SEG0070:23B1		     db	   0
SEG0070:23B2		     db	   0
SEG0070:23B3		     db	   0
SEG0070:23B4		     db	   0
SEG0070:23B5		     db	   0
SEG0070:23B6		     db	   0
SEG0070:23B7		     db	   0
SEG0070:23B8		     db	   0
SEG0070:23B9		     db	   0
SEG0070:23BA		     db	   0
SEG0070:23BB		     db	0FFh
SEG0070:23BC		     db	   1
SEG0070:23BD		     db	   0
SEG0070:23BE		     db	   0
SEG0070:23BF		     db	   0
SEG0070:23C0		     db	0FFh
SEG0070:23C1		     db	0FFh
SEG0070:23C2		     db	   0
SEG0070:23C3		     db	   0
SEG0070:23C4		     db	 50h ; P
SEG0070:23C5		     db	   3
SEG0070:23C6		     db	   0
SEG0070:23C7		     db	   2
SEG0070:23C8		     db	   1
SEG0070:23C9		     db	   1
SEG0070:23CA		     db	   0
SEG0070:23CB		     db	   2
SEG0070:23CC		     db	 10h
SEG0070:23CD		     db	   0
SEG0070:23CE		     db	   0
SEG0070:23CF		     db	   0
SEG0070:23D0		     db	0F8h ; ø
SEG0070:23D1		     db	   1
SEG0070:23D2		     db	   0
SEG0070:23D3		     db	   0
SEG0070:23D4		     db	   0
SEG0070:23D5		     db	   0
SEG0070:23D6		     db	   0
SEG0070:23D7		     db	   0
SEG0070:23D8		     db	   0
SEG0070:23D9		     db	   0
SEG0070:23DA		     db	   0
SEG0070:23DB		     db	   0
SEG0070:23DC		     db	 4Eh ; N
SEG0070:23DD		     db	 4Fh ; O
SEG0070:23DE		     db	 20h
SEG0070:23DF		     db	 4Eh ; N
SEG0070:23E0		     db	 41h ; A
SEG0070:23E1		     db	 4Dh ; M
SEG0070:23E2		     db	 45h ; E
SEG0070:23E3		     db	 20h
SEG0070:23E4		     db	 20h
SEG0070:23E5		     db	 20h
SEG0070:23E6		     db	 20h
SEG0070:23E7		     db	   0
SEG0070:23E8		     db	   3
SEG0070:23E9		     db	 20h
SEG0070:23EA		     db	   0
SEG0070:23EB		     db	 28h ; (
SEG0070:23EC		     db	   0
SEG0070:23ED		     db	   0
SEG0070:23EE		     db	   0
SEG0070:23EF		     db	   0
SEG0070:23F0		     db	   0
SEG0070:23F1		     db	   0
SEG0070:23F2		     db	   0
SEG0070:23F3		     db	   0
SEG0070:23F4		     db	   0
SEG0070:23F5		     db	   0
SEG0070:23F6		     db	   0
SEG0070:23F7		     db	   0
SEG0070:23F8		     db	   0
SEG0070:23F9		     db	   0
SEG0070:23FA		     db	   0
SEG0070:23FB		     db	   0
SEG0070:23FC		     db	   0
SEG0070:23FD		     db	   0
SEG0070:23FE		     db	   0
SEG0070:23FF		     db	   0
SEG0070:2400		     db	   0
SEG0070:2401		     db	   0
SEG0070:2402		     db	   0
SEG0070:2403		     db	   0
SEG0070:2404		     db	   0
SEG0070:2405		     db	   0
SEG0070:2406		     db	   0
SEG0070:2407		     db	   0
SEG0070:2408		     db	   0
SEG0070:2409		     db	   0
SEG0070:240A		     db	   0
SEG0070:240B		     db	   0
SEG0070:240C		     db	0FFh
SEG0070:240D		     db	   1
SEG0070:240E		     db	   0
SEG0070:240F		     db	   0
SEG0070:2410		     db	   0
SEG0070:2411		     db	0FFh
SEG0070:2412		     db	0FFh
SEG0070:2413		     db	   0
SEG0070:2414		     db	   0
SEG0070:2415		     db	 50h ; P
SEG0070:2416		     db	   3
SEG0070:2417		     db	   0
SEG0070:2418		     db	   2
SEG0070:2419		     db	   1
SEG0070:241A		     db	   1
SEG0070:241B		     db	   0
SEG0070:241C		     db	   2
SEG0070:241D		     db	 10h
SEG0070:241E		     db	   0
SEG0070:241F		     db	   0
SEG0070:2420		     db	   0
SEG0070:2421		     db	0F8h ; ø
SEG0070:2422		     db	   1
SEG0070:2423		     db	   0
SEG0070:2424		     db	   0
SEG0070:2425		     db	   0
SEG0070:2426		     db	   0
SEG0070:2427		     db	   0
SEG0070:2428		     db	   0
SEG0070:2429		     db	   0
SEG0070:242A		     db	   0
SEG0070:242B		     db	   0
SEG0070:242C		     db	   0
SEG0070:242D		     db	 4Eh ; N
SEG0070:242E		     db	 4Fh ; O
SEG0070:242F		     db	 20h
SEG0070:2430		     db	 4Eh ; N
SEG0070:2431		     db	 41h ; A
SEG0070:2432		     db	 4Dh ; M
SEG0070:2433		     db	 45h ; E
SEG0070:2434		     db	 20h
SEG0070:2435		     db	 20h
SEG0070:2436		     db	 20h
SEG0070:2437		     db	 20h
SEG0070:2438		     db	   0
SEG0070:2439		     db	   3
SEG0070:243A		     db	 20h
SEG0070:243B		     db	   0
SEG0070:243C		     db	 28h ; (
SEG0070:243D		     db	   0
SEG0070:243E		     db	   0
SEG0070:243F		     db	   0
SEG0070:2440		     db	   0
SEG0070:2441		     db	   0
SEG0070:2442		     db	   0
SEG0070:2443		     db	   0
SEG0070:2444		     db	   0
SEG0070:2445		     db	   0
SEG0070:2446		     db	   0
SEG0070:2447		     db	   0
SEG0070:2448		     db	   0
SEG0070:2449		     db	   0
SEG0070:244A		     db	   0
SEG0070:244B		     db	   0
SEG0070:244C		     db	   0
SEG0070:244D		     db	   0
SEG0070:244E		     db	   0
SEG0070:244F		     db	   0
SEG0070:2450		     db	   0
SEG0070:2451		     db	   0
SEG0070:2452		     db	   0
SEG0070:2453		     db	   0
SEG0070:2454		     db	   0
SEG0070:2455		     db	   0
SEG0070:2456		     db	   0
SEG0070:2457		     db	   0
SEG0070:2458		     db	   0
SEG0070:2459		     db	   0
SEG0070:245A		     db	   0
SEG0070:245B		     db	   0
SEG0070:245C		     db	   0
SEG0070:245D		     db	0FFh
SEG0070:245E		     db	   1
SEG0070:245F		     db	   0
SEG0070:2460		     db	   0
SEG0070:2461		     db	   0
SEG0070:2462		     db	0FFh
SEG0070:2463		     db	0FFh
SEG0070:2464		     db	   0
SEG0070:2465		     db	   0
SEG0070:2466		     db	 50h ; P
SEG0070:2467		     db	   3
SEG0070:2468		     db	   0
SEG0070:2469		     db	   2
SEG0070:246A		     db	   1
SEG0070:246B		     db	   1
SEG0070:246C		     db	   0
SEG0070:246D		     db	   2
SEG0070:246E		     db	 10h
SEG0070:246F		     db	   0
SEG0070:2470		     db	   0
SEG0070:2471		     db	   0
SEG0070:2472		     db	0F8h ; ø
SEG0070:2473		     db	   1
SEG0070:2474		     db	   0
SEG0070:2475		     db	   0
SEG0070:2476		     db	   0
SEG0070:2477		     db	   0
SEG0070:2478		     db	   0
SEG0070:2479		     db	   0
SEG0070:247A		     db	   0
SEG0070:247B		     db	   0
SEG0070:247C		     db	   0
SEG0070:247D		     db	   0
SEG0070:247E		     db	 4Eh ; N
SEG0070:247F		     db	 4Fh ; O
SEG0070:2480		     db	 20h
SEG0070:2481		     db	 4Eh ; N
SEG0070:2482		     db	 41h ; A
SEG0070:2483		     db	 4Dh ; M
SEG0070:2484		     db	 45h ; E
SEG0070:2485		     db	 20h
SEG0070:2486		     db	 20h
SEG0070:2487		     db	 20h
SEG0070:2488		     db	 20h
SEG0070:2489		     db	   0
SEG0070:248A		     db	   3
SEG0070:248B		     db	 20h
SEG0070:248C		     db	   0
SEG0070:248D		     db	 28h ; (
SEG0070:248E		     db	   0
SEG0070:248F		     db	   0
SEG0070:2490		     db	   0
SEG0070:2491		     db	   0
SEG0070:2492		     db	   0
SEG0070:2493		     db	   0
SEG0070:2494		     db	   0
SEG0070:2495		     db	   0
SEG0070:2496		     db	   0
SEG0070:2497		     db	   0
SEG0070:2498		     db	   0
SEG0070:2499		     db	   0
SEG0070:249A		     db	   0
SEG0070:249B		     db	   0
SEG0070:249C		     db	   0
SEG0070:249D		     db	   0
SEG0070:249E		     db	   0
SEG0070:249F		     db	   0
SEG0070:24A0		     db	   0
SEG0070:24A1		     db	   0
SEG0070:24A2		     db	   0
SEG0070:24A3		     db	   0
SEG0070:24A4		     db	   0
SEG0070:24A5		     db	   0
SEG0070:24A6		     db	   0
SEG0070:24A7		     db	   0
SEG0070:24A8		     db	   0
SEG0070:24A9		     db	   0
SEG0070:24AA		     db	   0
SEG0070:24AB		     db	   0
SEG0070:24AC		     db	   0
SEG0070:24AD		     db	   0
SEG0070:24AE		     db	0FFh
SEG0070:24AF		     db	   1
SEG0070:24B0		     db	   0
SEG0070:24B1		     db	   0
SEG0070:24B2		     db	   0
SEG0070:24B3		     db	0FFh
SEG0070:24B4		     db	0FFh
SEG0070:24B5		     db	   0
SEG0070:24B6		     db	   0
SEG0070:24B7		     db	 50h ; P
SEG0070:24B8		     db	   3
SEG0070:24B9		     db	   0
SEG0070:24BA		     db	   2
SEG0070:24BB		     db	   1
SEG0070:24BC		     db	   1
SEG0070:24BD		     db	   0
SEG0070:24BE		     db	   2
SEG0070:24BF		     db	 10h
SEG0070:24C0		     db	   0
SEG0070:24C1		     db	   0
SEG0070:24C2		     db	   0
SEG0070:24C3		     db	0F8h ; ø
SEG0070:24C4		     db	   1
SEG0070:24C5		     db	   0
SEG0070:24C6		     db	   0
SEG0070:24C7		     db	   0
SEG0070:24C8		     db	   0
SEG0070:24C9		     db	   0
SEG0070:24CA		     db	   0
SEG0070:24CB		     db	   0
SEG0070:24CC		     db	   0
SEG0070:24CD		     db	   0
SEG0070:24CE		     db	   0
SEG0070:24CF		     db	 4Eh ; N
SEG0070:24D0		     db	 4Fh ; O
SEG0070:24D1		     db	 20h
SEG0070:24D2		     db	 4Eh ; N
SEG0070:24D3		     db	 41h ; A
SEG0070:24D4		     db	 4Dh ; M
SEG0070:24D5		     db	 45h ; E
SEG0070:24D6		     db	 20h
SEG0070:24D7		     db	 20h
SEG0070:24D8		     db	 20h
SEG0070:24D9		     db	 20h
SEG0070:24DA		     db	   0
SEG0070:24DB		     db	   3
SEG0070:24DC		     db	 20h
SEG0070:24DD		     db	   0
SEG0070:24DE		     db	 28h ; (
SEG0070:24DF		     db	   0
SEG0070:24E0		     db	   0
SEG0070:24E1		     db	   0
SEG0070:24E2		     db	   0
SEG0070:24E3		     db	   0
SEG0070:24E4		     db	   0
SEG0070:24E5		     db	   0
SEG0070:24E6		     db	   0
SEG0070:24E7		     db	   0
SEG0070:24E8		     db	   0
SEG0070:24E9		     db	   0
SEG0070:24EA		     db	   0
SEG0070:24EB		     db	   0
SEG0070:24EC		     db	   0
SEG0070:24ED		     db	   0
SEG0070:24EE		     db	   0
SEG0070:24EF		     db	   0
SEG0070:24F0		     db	   0
SEG0070:24F1		     db	   0
SEG0070:24F2		     db	   0
SEG0070:24F3		     db	   0
SEG0070:24F4		     db	   0
SEG0070:24F5		     db	   0
SEG0070:24F6		     db	   0
SEG0070:24F7		     db	   0
SEG0070:24F8		     db	   0
SEG0070:24F9		     db	   0
SEG0070:24FA		     db	   0
SEG0070:24FB		     db	   0
SEG0070:24FC		     db	   0
SEG0070:24FD		     db	   0
SEG0070:24FE		     db	   0
SEG0070:24FF		     db	0FFh
SEG0070:2500		     db	   1
SEG0070:2501		     db	   0
SEG0070:2502		     db	   0
SEG0070:2503		     db	   0
SEG0070:2504		     db	0FFh
SEG0070:2505		     db	0FFh
SEG0070:2506		     db	   0
SEG0070:2507		     db	   0
SEG0070:2508		     db	 50h ; P
SEG0070:2509		     db	   3
SEG0070:250A		     db	   0
SEG0070:250B		     db	   2
SEG0070:250C		     db	   1
SEG0070:250D		     db	   1
SEG0070:250E		     db	   0
SEG0070:250F		     db	   2
SEG0070:2510		     db	 10h
SEG0070:2511		     db	   0
SEG0070:2512		     db	   0
SEG0070:2513		     db	   0
SEG0070:2514		     db	0F8h ; ø
SEG0070:2515		     db	   1
SEG0070:2516		     db	   0
SEG0070:2517		     db	   0
SEG0070:2518		     db	   0
SEG0070:2519		     db	   0
SEG0070:251A		     db	   0
SEG0070:251B		     db	   0
SEG0070:251C		     db	   0
SEG0070:251D		     db	   0
SEG0070:251E		     db	   0
SEG0070:251F		     db	   0
SEG0070:2520		     db	 4Eh ; N
SEG0070:2521		     db	 4Fh ; O
SEG0070:2522		     db	 20h
SEG0070:2523		     db	 4Eh ; N
SEG0070:2524		     db	 41h ; A
SEG0070:2525		     db	 4Dh ; M
SEG0070:2526		     db	 45h ; E
SEG0070:2527		     db	 20h
SEG0070:2528		     db	 20h
SEG0070:2529		     db	 20h
SEG0070:252A		     db	 20h
SEG0070:252B		     db	   0
SEG0070:252C		     db	   3
SEG0070:252D		     db	 20h
SEG0070:252E		     db	   0
SEG0070:252F		     db	 28h ; (
SEG0070:2530		     db	   0
SEG0070:2531		     db	   0
SEG0070:2532		     db	   0
SEG0070:2533		     db	   0
SEG0070:2534		     db	   0
SEG0070:2535		     db	   0
SEG0070:2536		     db	   0
SEG0070:2537		     db	   0
SEG0070:2538		     db	   0
SEG0070:2539		     db	   0
SEG0070:253A		     db	   0
SEG0070:253B		     db	   0
SEG0070:253C		     db	   0
SEG0070:253D		     db	   0
SEG0070:253E		     db	   0
SEG0070:253F		     db	   0
SEG0070:2540		     db	   0
SEG0070:2541		     db	   0
SEG0070:2542		     db	   0
SEG0070:2543		     db	   0
SEG0070:2544		     db	   0
SEG0070:2545		     db	   0
SEG0070:2546		     db	   0
SEG0070:2547		     db	   0
SEG0070:2548		     db	   0
SEG0070:2549		     db	   0
SEG0070:254A		     db	   0
SEG0070:254B		     db	   0
SEG0070:254C		     db	   0
SEG0070:254D		     db	   0
SEG0070:254E		     db	   0
SEG0070:254F		     db	   0
SEG0070:2550		     db	0FFh
SEG0070:2551		     db	   1
SEG0070:2552		     db	   0
SEG0070:2553		     db	   0
SEG0070:2554		     db	   0
SEG0070:2555		     db	0FFh
SEG0070:2556		     db	0FFh
SEG0070:2557		     db	   0
SEG0070:2558		     db	   0
SEG0070:2559		     db	 50h ; P
SEG0070:255A		     db	   3
SEG0070:255B		     db	   0
SEG0070:255C		     db	   2
SEG0070:255D		     db	   1
SEG0070:255E		     db	   1
SEG0070:255F		     db	   0
SEG0070:2560		     db	   2
SEG0070:2561		     db	 10h
SEG0070:2562		     db	   0
SEG0070:2563		     db	   0
SEG0070:2564		     db	   0
SEG0070:2565		     db	0F8h ; ø
SEG0070:2566		     db	   1
SEG0070:2567		     db	   0
SEG0070:2568		     db	   0
SEG0070:2569		     db	   0
SEG0070:256A		     db	   0
SEG0070:256B		     db	   0
SEG0070:256C		     db	   0
SEG0070:256D		     db	   0
SEG0070:256E		     db	   0
SEG0070:256F		     db	   0
SEG0070:2570		     db	   0
SEG0070:2571		     db	 4Eh ; N
SEG0070:2572		     db	 4Fh ; O
SEG0070:2573		     db	 20h
SEG0070:2574		     db	 4Eh ; N
SEG0070:2575		     db	 41h ; A
SEG0070:2576		     db	 4Dh ; M
SEG0070:2577		     db	 45h ; E
SEG0070:2578		     db	 20h
SEG0070:2579		     db	 20h
SEG0070:257A		     db	 20h
SEG0070:257B		     db	 20h
SEG0070:257C		     db	   0
SEG0070:257D		     db	   3
SEG0070:257E		     db	 20h
SEG0070:257F		     db	   0
SEG0070:2580		     db	 28h ; (
SEG0070:2581		     db	   0
SEG0070:2582		     db	   0
SEG0070:2583		     db	   0
SEG0070:2584		     db	   0
SEG0070:2585		     db	   0
SEG0070:2586		     db	   0
SEG0070:2587		     db	   0
SEG0070:2588		     db	   0
SEG0070:2589		     db	   0
SEG0070:258A		     db	   0
SEG0070:258B		     db	   0
SEG0070:258C		     db	   0
SEG0070:258D		     db	   0
SEG0070:258E		     db	   0
SEG0070:258F		     db	   0
SEG0070:2590		     db	   0
SEG0070:2591		     db	   0
SEG0070:2592		     db	   0
SEG0070:2593		     db	   0
SEG0070:2594		     db	   0
SEG0070:2595		     db	   0
SEG0070:2596		     db	   0
SEG0070:2597		     db	   0
SEG0070:2598		     db	   0
SEG0070:2599		     db	   0
SEG0070:259A		     db	   0
SEG0070:259B		     db	   0
SEG0070:259C		     db	   0
SEG0070:259D		     db	   0
SEG0070:259E		     db	   0
SEG0070:259F		     db	   0
SEG0070:25A0		     db	   0
SEG0070:25A1		     db	0FFh
SEG0070:25A2		     db	   1
SEG0070:25A3		     db	   0
SEG0070:25A4		     db	   0
SEG0070:25A5		     db	   0
SEG0070:25A6		     db	0FFh
SEG0070:25A7		     db	0FFh
SEG0070:25A8		     db	   0
SEG0070:25A9		     db	   0
SEG0070:25AA		     db	 50h ; P
SEG0070:25AB		     db	   3
SEG0070:25AC		     db	   0
SEG0070:25AD		     db	   2
SEG0070:25AE		     db	   1
SEG0070:25AF		     db	   1
SEG0070:25B0		     db	   0
SEG0070:25B1		     db	   2
SEG0070:25B2		     db	 10h
SEG0070:25B3		     db	   0
SEG0070:25B4		     db	   0
SEG0070:25B5		     db	   0
SEG0070:25B6		     db	0F8h ; ø
SEG0070:25B7		     db	   1
SEG0070:25B8		     db	   0
SEG0070:25B9		     db	   0
SEG0070:25BA		     db	   0
SEG0070:25BB		     db	   0
SEG0070:25BC		     db	   0
SEG0070:25BD		     db	   0
SEG0070:25BE		     db	   0
SEG0070:25BF		     db	   0
SEG0070:25C0		     db	   0
SEG0070:25C1		     db	   0
SEG0070:25C2		     db	 4Eh ; N
SEG0070:25C3		     db	 4Fh ; O
SEG0070:25C4		     db	 20h
SEG0070:25C5		     db	 4Eh ; N
SEG0070:25C6		     db	 41h ; A
SEG0070:25C7		     db	 4Dh ; M
SEG0070:25C8		     db	 45h ; E
SEG0070:25C9		     db	 20h
SEG0070:25CA		     db	 20h
SEG0070:25CB		     db	 20h
SEG0070:25CC		     db	 20h
SEG0070:25CD		     db	   0
SEG0070:25CE		     db	   3
SEG0070:25CF		     db	 20h
SEG0070:25D0		     db	   0
SEG0070:25D1		     db	 28h ; (
SEG0070:25D2		     db	   0
SEG0070:25D3		     db	   0
SEG0070:25D4		     db	   0
SEG0070:25D5		     db	   0
SEG0070:25D6		     db	   0
SEG0070:25D7		     db	   0
SEG0070:25D8		     db	   0
SEG0070:25D9		     db	   0
SEG0070:25DA		     db	   0
SEG0070:25DB		     db	   0
SEG0070:25DC		     db	   0
SEG0070:25DD		     db	   0
SEG0070:25DE		     db	   0
SEG0070:25DF		     db	   0
SEG0070:25E0		     db	   0
SEG0070:25E1		     db	   0
SEG0070:25E2		     db	   0
SEG0070:25E3		     db	   0
SEG0070:25E4		     db	   0
SEG0070:25E5		     db	   0
SEG0070:25E6		     db	   0
SEG0070:25E7 unk_25E7	     db	   0
SEG0070:25E8		     db	   0
SEG0070:25E9		     db	   0
SEG0070:25EA		     db	   0
SEG0070:25EB		     db	   0
SEG0070:25EC		     db	   0
SEG0070:25ED		     db	   0
SEG0070:25EE		     db	   0
SEG0070:25EF		     db	   0
SEG0070:25F0		     db	   0
SEG0070:25F1		     db	   0
SEG0070:25F2		     db	0FFh
SEG0070:25F3		     db	   1
SEG0070:25F4		     db	   0
SEG0070:25F5		     db	   0
SEG0070:25F6		     db	   0
SEG0070:25F7 ; ---------------------------------------------------------------------------
SEG0070:25F7
SEG0070:25F7 IBM_DISK_IO:			     ; DATA XREF: SEG0070:2E9Eo
SEG0070:25F7		     cmp     dl, 80h ; ''
SEG0070:25FA		     jnb     short ATD0
SEG0070:25FC
SEG0070:25FC ATD1:				     ; CODE XREF: SEG0070:260Cj
SEG0070:25FC		     jmp     dword ptr cs:OLD13
SEG0070:2601 ; ---------------------------------------------------------------------------
SEG0070:2601		     retf    2
SEG0070:2604 ; ---------------------------------------------------------------------------
SEG0070:2604
SEG0070:2604 ATD0:				     ; CODE XREF: SEG0070:25FAj
SEG0070:2604		     cmp     ah, 2
SEG0070:2607		     jz	     short ATD2
SEG0070:2609		     cmp     ah, 0Ah
SEG0070:260C		     jnz     short ATD1
SEG0070:260E
SEG0070:260E ATD2:				     ; CODE XREF: SEG0070:2607j
SEG0070:260E		     sti
SEG0070:260F		     push    bx
SEG0070:2610		     push    cx
SEG0070:2611		     push    dx
SEG0070:2612		     push    ds
SEG0070:2613		     push    es
SEG0070:2614		     push    si
SEG0070:2615		     push    di
SEG0070:2616		     call    ATD3
SEG0070:2619		     push    ax
SEG0070:261A		     mov     ax, 40h ; '@'
SEG0070:261D		     mov     ds, ax
SEG0070:261F		     assume ds:nothing
SEG0070:261F		     pop     ax
SEG0070:2620		     mov     ah, ds:74h
SEG0070:2624		     cmp     ah, 1
SEG0070:2627		     cmc
SEG0070:2628		     pop     di
SEG0070:2629		     pop     si
SEG0070:262A		     pop     es
SEG0070:262B		     pop     ds
SEG0070:262C		     assume ds:nothing
SEG0070:262C		     pop     dx
SEG0070:262D		     pop     cx
SEG0070:262E		     pop     bx
SEG0070:262F		     retf    2
SEG0070:2632
SEG0070:2632 ; =============== S U B R O U T I N E =======================================
SEG0070:2632
SEG0070:2632
SEG0070:2632 ATD3	     proc near		     ; CODE XREF: SEG0070:2616p
SEG0070:2632		     push    ax
SEG0070:2633		     mov     ax, 40h ; '@'
SEG0070:2636		     mov     ds, ax
SEG0070:2638		     assume ds:nothing
SEG0070:2638		     pop     ax
SEG0070:2639		     mov     byte ptr ds:74h, 0
SEG0070:263E		     push    bx
SEG0070:263F		     mov     bl, ds:75h
SEG0070:2643		     push    ax
SEG0070:2644		     and     dl, 7Fh
SEG0070:2647		     cmp     bl, dl
SEG0070:2649		     jbe     short ATD4
SEG0070:264B		     push    es
SEG0070:264C		     push    cs
SEG0070:264D		     call    GET_VEC
SEG0070:2650		     mov     ax, es:[bx+5]
SEG0070:2654		     shr     ax, 2
SEG0070:2657		     mov     ds:42h, al
SEG0070:265A		     mov     al, es:[bx+8]
SEG0070:265E		     push    dx
SEG0070:265F		     mov     dx, 3F6h
SEG0070:2662		     out     dx, al	     ; AT only.	Fixed disk register
SEG0070:2663		     pop     dx
SEG0070:2664		     pop     es
SEG0070:2665		     mov     ah, ds:76h
SEG0070:2669		     and     ah, 0C0h
SEG0070:266C		     or	     ah, al
SEG0070:266E		     mov     ds:76h, ah
SEG0070:2672		     pop     ax
SEG0070:2673		     mov     ds:43h, al
SEG0070:2676		     push    ax
SEG0070:2677
SEG0070:2677 SETC1:
SEG0070:2677		     mov     al, cl
SEG0070:2679		     and     al, 3Fh
SEG0070:267B		     mov     ds:44h, al
SEG0070:267E		     mov     ds:45h, ch
SEG0070:2682		     mov     al, cl
SEG0070:2684		     shr     al, 6
SEG0070:2687		     mov     ds:46h, al
SEG0070:268A		     mov     al, dl
SEG0070:268C		     shl     al, 4
SEG0070:268F		     and     dh, 0Fh
SEG0070:2692		     or	     al, dh
SEG0070:2694		     or	     al, 0A0h
SEG0070:2696		     mov     ds:47h, al
SEG0070:2699		     pop     ax
SEG0070:269A		     pop     bx
SEG0070:269B
SEG0070:269B _ATD3:
SEG0070:269B		     push    cx
SEG0070:269C		     push    ax
SEG0070:269D		     mov     cx, bx
SEG0070:269F		     shr     cx, 4
SEG0070:26A2		     mov     ax, es
SEG0070:26A4		     add     ax, cx
SEG0070:26A6		     mov     es, ax
SEG0070:26A8		     and     bx, 0Fh
SEG0070:26AC		     pop     ax
SEG0070:26AD		     pop     cx
SEG0070:26AE		     mov     byte ptr ds:48h, 20h ; ' '
SEG0070:26B3		     cmp     ah, 2
SEG0070:26B6		     jz	     short SETC2
SEG0070:26B8		     mov     byte ptr ds:48h, 22h ; '"'
SEG0070:26BD		     jmp     short SETC2
SEG0070:26BF ; ---------------------------------------------------------------------------
SEG0070:26BF
SEG0070:26BF ATD4:				     ; CODE XREF: ATD3+17j
SEG0070:26BF		     pop     ax
SEG0070:26C0		     pop     bx
SEG0070:26C1		     mov     byte ptr ds:74h, 1
SEG0070:26C6		     mov     al, 0
SEG0070:26C8		     retn
SEG0070:26C9 ; ---------------------------------------------------------------------------
SEG0070:26C9
SEG0070:26C9 SETC2:				     ; CODE XREF: ATD3+84j
SEG0070:26C9					     ; ATD3+8Bj
SEG0070:26C9		     push    cs
SEG0070:26CA		     call    CHECK_DMA
SEG0070:26CD		     jb	     short DOC3
SEG0070:26CF		     mov     di, bx
SEG0070:26D1		     push    cs
SEG0070:26D2		     call    COMMAND
SEG0070:26D5		     jnz     short DOC3
SEG0070:26D7
SEG0070:26D7 DOC1:				     ; CODE XREF: ATD3+DAj
SEG0070:26D7		     push    cs
SEG0070:26D8		     call    WAIT
SEG0070:26DB		     jnz     short DOC3
SEG0070:26DD		     mov     cx, 100h
SEG0070:26E0		     mov     dx, 1F0h
SEG0070:26E3		     cli
SEG0070:26E4		     cld
SEG0070:26E5		     rep insw
SEG0070:26E7		     sti
SEG0070:26E8		     test    byte ptr ds:48h, 2
SEG0070:26ED		     jz	     short DOC2
SEG0070:26EF		     push    cs
SEG0070:26F0		     call    WAIT_DRQ
SEG0070:26F3		     jb	     short DOC3
SEG0070:26F5		     mov     dx, 1F0h
SEG0070:26F8		     mov     cx, 4
SEG0070:26FB
SEG0070:26FB DOC4:				     ; CODE XREF: ATD3+CEj
SEG0070:26FB		     in	     al, dx	     ; AT hard disk controller:	Data register.
SEG0070:26FB					     ; Read/write data from/to controller sector buffer
SEG0070:26FC		     mov     es:[di], al
SEG0070:26FF		     inc     di
SEG0070:2700		     loop    DOC4
SEG0070:2702
SEG0070:2702 DOC2:				     ; CODE XREF: ATD3+BBj
SEG0070:2702		     push    cs
SEG0070:2703		     call    CHECK_STATUS
SEG0070:2706		     jnz     short DOC3
SEG0070:2708		     dec     byte ptr ds:43h
SEG0070:270C		     jnz     short DOC1
SEG0070:270E
SEG0070:270E DOC3:				     ; CODE XREF: ATD3+9Bj
SEG0070:270E					     ; ATD3+A3j ...
SEG0070:270E		     retn
SEG0070:270E ATD3	     endp
SEG0070:270E
SEG0070:270F
SEG0070:270F ; =============== S U B R O U T I N E =======================================
SEG0070:270F
SEG0070:270F
SEG0070:270F COMMAND	     proc near		     ; CODE XREF: ATD3+A0p
SEG0070:270F		     push    0FF65h
SEG0070:2712		     jmp     far ptr 0F000h:2E1Eh
SEG0070:2712 COMMAND	     endp
SEG0070:2712
SEG0070:2717
SEG0070:2717 ; =============== S U B R O U T I N E =======================================
SEG0070:2717
SEG0070:2717
SEG0070:2717 WAIT	     proc near		     ; CODE XREF: ATD3+A6p
SEG0070:2717		     push    0FF65h
SEG0070:271A		     jmp     far ptr 0F000h:2E7Fh
SEG0070:271A WAIT	     endp
SEG0070:271A
SEG0070:271F
SEG0070:271F ; =============== S U B R O U T I N E =======================================
SEG0070:271F
SEG0070:271F
SEG0070:271F WAIT_DRQ	     proc near		     ; CODE XREF: ATD3+BEp
SEG0070:271F		     push    0FF65h
SEG0070:2722		     jmp     far ptr 0F000h:2EE2h
SEG0070:2722 WAIT_DRQ	     endp
SEG0070:2722
SEG0070:2727
SEG0070:2727 ; =============== S U B R O U T I N E =======================================
SEG0070:2727
SEG0070:2727
SEG0070:2727 CHECK_STATUS    proc near		     ; CODE XREF: ATD3+D1p
SEG0070:2727		     push    0FF65h
SEG0070:272A		     jmp     far ptr 0F000h:2EF8h
SEG0070:272A CHECK_STATUS    endp
SEG0070:272A
SEG0070:272F
SEG0070:272F ; =============== S U B R O U T I N E =======================================
SEG0070:272F
SEG0070:272F
SEG0070:272F CHECK_DMA	     proc near		     ; CODE XREF: ATD3+98p
SEG0070:272F		     push    0FF65h
SEG0070:2732		     jmp     far ptr 0F000h:2F69h
SEG0070:2732 CHECK_DMA	     endp
SEG0070:2732
SEG0070:2737
SEG0070:2737 ; =============== S U B R O U T I N E =======================================
SEG0070:2737
SEG0070:2737
SEG0070:2737 GET_VEC	     proc near		     ; CODE XREF: ATD3+1Bp
SEG0070:2737		     push    0FF65h
SEG0070:273A		     jmp     far ptr 0F000h:2F8Eh
SEG0070:273A GET_VEC	     endp
SEG0070:273A
SEG0070:273A ; ---------------------------------------------------------------------------
SEG0070:273F		     db	   0
SEG0070:2740 ; ---------------------------------------------------------------------------
SEG0070:2740
SEG0070:2740 Daycnt_to_day:			     ; DATA XREF: SEG0070:2E9Bo
SEG0070:2740					     ; SEG0070:2EBBo
SEG0070:2740		     push    cs:DAYCNT
SEG0070:2745		     cmp     cs:DAYCNT,	7305
SEG0070:274C		     jnb     short century20
SEG0070:274E		     mov     cs:base_century, 19
SEG0070:2754		     mov     cs:base_year, 80
SEG0070:275A		     jmp     short years
SEG0070:275C ; ---------------------------------------------------------------------------
SEG0070:275C		     nop
SEG0070:275D
SEG0070:275D century20:				     ; CODE XREF: SEG0070:274Cj
SEG0070:275D		     mov     cs:base_century, 20
SEG0070:2763		     mov     cs:base_year, 0
SEG0070:2769		     sub     cs:DAYCNT,	7305
SEG0070:2770
SEG0070:2770 years:				     ; CODE XREF: SEG0070:275Aj
SEG0070:2770		     xor     dx, dx
SEG0070:2772		     mov     ax, cs:DAYCNT
SEG0070:2776		     mov     bx, 1461
SEG0070:2779		     div     bx
SEG0070:277B		     mov     cs:DAYCNT,	dx
SEG0070:2780		     mov     bl, 4
SEG0070:2782		     mul     bl
SEG0070:2784		     add     cs:base_year, al
SEG0070:2789		     inc     cs:DAYCNT
SEG0070:278E		     cmp     cs:DAYCNT,	366
SEG0070:2795		     jbe     short Leapyear
SEG0070:2797		     inc     cs:base_year
SEG0070:279C		     sub     cs:DAYCNT,	366
SEG0070:27A3		     mov     cx, 3
SEG0070:27A6
SEG0070:27A6 Regularyear:			     ; CODE XREF: SEG0070:27BBj
SEG0070:27A6		     cmp     cs:DAYCNT,	365
SEG0070:27AD		     jbe     short Yeardone
SEG0070:27AF		     inc     cs:base_year
SEG0070:27B4		     sub     cs:DAYCNT,	365
SEG0070:27BB		     loop    Regularyear
SEG0070:27BD
SEG0070:27BD Leapyear:				     ; CODE XREF: SEG0070:2795j
SEG0070:27BD		     mov     cs:month_tab_1, 29
SEG0070:27C3
SEG0070:27C3 Yeardone:				     ; CODE XREF: SEG0070:27ADj
SEG0070:27C3		     xor     bx, bx
SEG0070:27C5		     xor     dx, dx
SEG0070:27C7		     mov     ax, cs:DAYCNT
SEG0070:27CB		     mov     si, offset	month_tab
SEG0070:27CE		     mov     cx, 12
SEG0070:27D1
SEG0070:27D1 Months:				     ; CODE XREF: SEG0070:27DCj
SEG0070:27D1		     inc     bl
SEG0070:27D3		     mov     dl, [si]
SEG0070:27D5		     cmp     ax, dx
SEG0070:27D7		     jbe     short Month_done
SEG0070:27D9		     inc     si
SEG0070:27DA		     sub     ax, dx
SEG0070:27DC		     loop    Months
SEG0070:27DE
SEG0070:27DE Month_done:			     ; CODE XREF: SEG0070:27D7j
SEG0070:27DE		     mov     cs:month_tab_1, 28
SEG0070:27E4		     mov     dl, bl
SEG0070:27E6		     mov     dh, cs:base_year
SEG0070:27EB		     mov     cl, cs:base_century
SEG0070:27F0		     call    cs:BinToBCD
SEG0070:27F5		     xchg    dl, al
SEG0070:27F7		     call    cs:BinToBCD
SEG0070:27FC		     xchg    dh, al
SEG0070:27FE		     call    cs:BinToBCD
SEG0070:2803		     xchg    cl, al
SEG0070:2805		     call    cs:BinToBCD
SEG0070:280A		     mov     ch, al
SEG0070:280C		     pop     cs:DAYCNT
SEG0070:2811		     retn
SEG0070:2812 ; ---------------------------------------------------------------------------
SEG0070:2812
SEG0070:2812 Bin_to_bcd:			     ; DATA XREF: SEG0070:2EB8o
SEG0070:2812					     ; SEG0070:2ECFo
SEG0070:2812		     push    cx
SEG0070:2813		     xor     ah, ah
SEG0070:2815		     mov     cl, 10
SEG0070:2817		     div     cl
SEG0070:2819		     mov     cl, 4
SEG0070:281B		     shl     al, cl
SEG0070:281D		     or	     al, ah
SEG0070:281F		     pop     cx
SEG0070:2820		     retn
SEG0070:2821 ; ---------------------------------------------------------------------------
SEG0070:2821
SEG0070:2821 EndCMOSClockSet:			     ; DATA XREF: SEG0070:2ECCo
SEG0070:2821		     nop
SEG0070:2822
SEG0070:2822 INT6C:				     ; DATA XREF: SEG0070:2EE8o
SEG0070:2822		     push    cs
SEG0070:2823		     pop     ds
SEG0070:2824		     assume ds:SEG0070
SEG0070:2824		     pop     word ptr INT6C_RET_ADDR
SEG0070:2828		     pop     word ptr INT6C_RET_ADDR+2
SEG0070:282C		     popf
SEG0070:282D		     call    READ_REAL_DATE
SEG0070:2830		     cli
SEG0070:2831		     mov     DAYCNT, si
SEG0070:2835		     sti
SEG0070:2836		     call    READ_REAL_TIME
SEG0070:2839		     cli
SEG0070:283A		     mov     ah, 1
SEG0070:283C		     int     1Ah	     ; CLOCK - SET TIME	OF DAY
SEG0070:283C					     ; CX:DX = clock count
SEG0070:283C					     ; Return: time of day set
SEG0070:283E		     sti
SEG0070:283F		     jmp     INT6C_RET_ADDR
SEG0070:2843
SEG0070:2843 ; =============== S U B R O U T I N E =======================================
SEG0070:2843
SEG0070:2843
SEG0070:2843 READ_REAL_DATE  proc near		     ; CODE XREF: SEG0070:282Dp
SEG0070:2843					     ; CMOS_Clock_Read+2Fp
SEG0070:2843		     push    ax
SEG0070:2844		     push    cx
SEG0070:2845		     push    dx
SEG0070:2846		     xor     ah, ah
SEG0070:2848		     int     1Ah	     ; CLOCK - GET TIME	OF DAY
SEG0070:2848					     ; Return: CX:DX = clock count
SEG0070:2848					     ; AL = 00h	if clock was read or written (via AH=0,1) since	the previous
SEG0070:2848					     ; midnight
SEG0070:2848					     ; Otherwise, AL > 0
SEG0070:284A		     pop     dx
SEG0070:284B		     pop     cx
SEG0070:284C		     pop     ax
SEG0070:284D		     push    ax
SEG0070:284E		     push    bx
SEG0070:284F		     push    cx
SEG0070:2850		     push    dx
SEG0070:2851		     mov     cs:DAYCNT2, 1
SEG0070:2858		     mov     ah, 4
SEG0070:285A		     int     1Ah	     ; CLOCK - READ DATE FROM REAL TIME	CLOCK (AT,XT286,CONV,PS)
SEG0070:285A					     ; Return: DL = day	in BCD
SEG0070:285A					     ; DH = month in BCD
SEG0070:285A					     ; CL = year in BCD
SEG0070:285A					     ; CH = century (19h or 20h)
SEG0070:285C		     jnb     short read_ok
SEG0070:285E		     jmp     r_d_ret
SEG0070:2861 ; ---------------------------------------------------------------------------
SEG0070:2861
SEG0070:2861 read_ok:				     ; CODE XREF: READ_REAL_DATE+19j
SEG0070:2861		     mov     BIN_DATE_TIME, ch
SEG0070:2865		     mov     BIN_DATE_TIME_1, cl
SEG0070:2869		     mov     BIN_DATE_TIME_2, dh
SEG0070:286D		     mov     BIN_DATE_TIME_3, dl
SEG0070:2871		     mov     cs:DAYCNT2, 2
SEG0070:2878		     call    bcd_verify
SEG0070:287B		     jb	     short r_d_ret
SEG0070:287D		     mov     cs:DAYCNT2, 3
SEG0070:2884		     call    date_verify
SEG0070:2887		     jb	     short r_d_ret
SEG0070:2889		     mov     cs:DAYCNT2, 0
SEG0070:2890		     call    in_bin
SEG0070:2893		     mov     al, BIN_DATE_TIME_1
SEG0070:2896		     cbw
SEG0070:2897		     cmp     BIN_DATE_TIME, 14h
SEG0070:289C		     jnz     short century_19
SEG0070:289E		     add     ax, 100
SEG0070:28A1
SEG0070:28A1 century_19:			     ; CODE XREF: READ_REAL_DATE+59j
SEG0070:28A1		     sub     ax, 80
SEG0070:28A4		     mov     cl, 4
SEG0070:28A6		     div     cl
SEG0070:28A8		     mov     bl, ah
SEG0070:28AA		     cbw
SEG0070:28AB		     mov     cx, 1461
SEG0070:28AE		     mul     cx
SEG0070:28B0		     mov     cs:DAYCNT2, ax
SEG0070:28B4		     mov     al, bl
SEG0070:28B6		     cbw
SEG0070:28B7		     or	     ax, ax
SEG0070:28B9		     jz	     short leap_year
SEG0070:28BB		     mov     cx, 365
SEG0070:28BE		     mul     cx
SEG0070:28C0		     add     cs:DAYCNT2, ax
SEG0070:28C5		     jmp     short leap_adjustment
SEG0070:28C7 ; ---------------------------------------------------------------------------
SEG0070:28C7
SEG0070:28C7 leap_year:				     ; CODE XREF: READ_REAL_DATE+76j
SEG0070:28C7		     cmp     BIN_DATE_TIME_2, 2
SEG0070:28CC		     jbe     short no_leap_adjustment
SEG0070:28CE
SEG0070:28CE leap_adjustment:			     ; CODE XREF: READ_REAL_DATE+82j
SEG0070:28CE		     inc     cs:DAYCNT2
SEG0070:28D3
SEG0070:28D3 no_leap_adjustment:		     ; CODE XREF: READ_REAL_DATE+89j
SEG0070:28D3		     mov     cl, BIN_DATE_TIME_3
SEG0070:28D7		     xor     ch, ch
SEG0070:28D9		     dec     cx
SEG0070:28DA		     add     cs:DAYCNT2, cx
SEG0070:28DF		     mov     cl, BIN_DATE_TIME_2
SEG0070:28E3		     xor     ch, ch
SEG0070:28E5		     dec     cx
SEG0070:28E6		     shl     cx, 1
SEG0070:28E8		     mov     si, offset	MONTH_TABLE
SEG0070:28EB		     add     si, cx
SEG0070:28ED		     mov     ax, [si]
SEG0070:28EF		     add     cs:DAYCNT2, ax
SEG0070:28F4
SEG0070:28F4 r_d_ret:				     ; CODE XREF: READ_REAL_DATE+1Bj
SEG0070:28F4					     ; READ_REAL_DATE+38j ...
SEG0070:28F4		     mov     si, cs:DAYCNT2
SEG0070:28F9		     pop     dx
SEG0070:28FA		     pop     cx
SEG0070:28FB		     pop     bx
SEG0070:28FC		     pop     ax
SEG0070:28FD		     retn
SEG0070:28FD READ_REAL_DATE  endp
SEG0070:28FD
SEG0070:28FE ; ---------------------------------------------------------------------------
SEG0070:28FE ; START OF	FUNCTION CHUNK FOR READ_REAL_TIME
SEG0070:28FE
SEG0070:28FE r_t_retj:				     ; CODE XREF: READ_REAL_TIME+4j
SEG0070:28FE					     ; READ_REAL_TIME+1Aj ...
SEG0070:28FE		     xor     cx, cx
SEG0070:2900		     xor     dx, dx
SEG0070:2902		     jmp     short r_t_ret
SEG0070:2902 ; END OF FUNCTION CHUNK FOR READ_REAL_TIME
SEG0070:2904 ; ---------------------------------------------------------------------------
SEG0070:2904		     nop
SEG0070:2905
SEG0070:2905 ; =============== S U B R O U T I N E =======================================
SEG0070:2905
SEG0070:2905
SEG0070:2905 READ_REAL_TIME  proc near		     ; CODE XREF: SEG0070:2836p
SEG0070:2905
SEG0070:2905 ; FUNCTION	CHUNK AT SEG0070:28FE SIZE 00000006 BYTES
SEG0070:2905
SEG0070:2905		     mov     ah, 2
SEG0070:2907		     int     1Ah	     ; CLOCK - READ REAL TIME CLOCK (AT,XT286,CONV,PS)
SEG0070:2907					     ; Return: CH = hours in BCD
SEG0070:2907					     ; CL = minutes in BCD
SEG0070:2907					     ; DH = seconds in BCD
SEG0070:2909		     jb	     short r_t_retj
SEG0070:290B		     mov     BIN_DATE_TIME, ch
SEG0070:290F		     mov     BIN_DATE_TIME_1, cl
SEG0070:2913		     mov     BIN_DATE_TIME_2, dh
SEG0070:2917		     mov     BIN_DATE_TIME_3, 0
SEG0070:291C		     call    bcd_verify
SEG0070:291F		     jb	     short r_t_retj
SEG0070:2921		     call    time_verify
SEG0070:2924		     jb	     short r_t_retj
SEG0070:2926		     call    in_bin
SEG0070:2929		     mov     ch, BIN_DATE_TIME
SEG0070:292D		     mov     cl, BIN_DATE_TIME_1
SEG0070:2931		     mov     dh, BIN_DATE_TIME_2
SEG0070:2935		     mov     dl, BIN_DATE_TIME_3
SEG0070:2939		     call    cs:TimeToTicks
SEG0070:293E
SEG0070:293E r_t_ret:				     ; CODE XREF: READ_REAL_TIME-3j
SEG0070:293E		     retn
SEG0070:293E READ_REAL_TIME  endp
SEG0070:293E
SEG0070:293F
SEG0070:293F ; =============== S U B R O U T I N E =======================================
SEG0070:293F
SEG0070:293F
SEG0070:293F in_bin	     proc near		     ; CODE XREF: READ_REAL_DATE+4Dp
SEG0070:293F					     ; READ_REAL_TIME+21p
SEG0070:293F		     mov     al, BIN_DATE_TIME
SEG0070:2942		     call    bcd_to_bin
SEG0070:2945		     mov     BIN_DATE_TIME, al
SEG0070:2948		     mov     al, BIN_DATE_TIME_1
SEG0070:294B		     call    bcd_to_bin
SEG0070:294E		     mov     BIN_DATE_TIME_1, al
SEG0070:2951		     mov     al, BIN_DATE_TIME_2
SEG0070:2954		     call    bcd_to_bin
SEG0070:2957		     mov     BIN_DATE_TIME_2, al
SEG0070:295A		     mov     al, BIN_DATE_TIME_3
SEG0070:295D		     call    bcd_to_bin
SEG0070:2960		     mov     BIN_DATE_TIME_3, al
SEG0070:2963		     retn
SEG0070:2963 in_bin	     endp
SEG0070:2963
SEG0070:2964
SEG0070:2964 ; =============== S U B R O U T I N E =======================================
SEG0070:2964
SEG0070:2964
SEG0070:2964 bcd_to_bin	     proc near		     ; CODE XREF: in_bin+3p
SEG0070:2964					     ; in_bin+Cp ...
SEG0070:2964		     mov     ah, al
SEG0070:2966		     and     ax, 0F00Fh
SEG0070:2969		     mov     bl, al
SEG0070:296B		     xchg    ah, al
SEG0070:296D		     xor     ah, ah
SEG0070:296F		     mov     cl, 4
SEG0070:2971		     shr     ax, cl
SEG0070:2973		     mov     cl, 10
SEG0070:2975		     mul     cl
SEG0070:2977		     add     al, bl
SEG0070:2979		     retn
SEG0070:2979 bcd_to_bin	     endp
SEG0070:2979
SEG0070:297A
SEG0070:297A ; =============== S U B R O U T I N E =======================================
SEG0070:297A
SEG0070:297A
SEG0070:297A date_verify     proc near		     ; CODE XREF: READ_REAL_DATE+41p
SEG0070:297A		     cmp     BIN_DATE_TIME, 20h	; ' '
SEG0070:297F		     ja	     short date_error
SEG0070:2981		     jz	     short century_20
SEG0070:2983		     cmp     BIN_DATE_TIME, 19h
SEG0070:2988		     jb	     short date_error
SEG0070:298A		     cmp     BIN_DATE_TIME_1, 80h ; ''
SEG0070:298F		     jb	     short date_error
SEG0070:2991
SEG0070:2991 century_20:			     ; CODE XREF: date_verify+7j
SEG0070:2991		     cmp     BIN_DATE_TIME_1, 99h ; ''
SEG0070:2996		     ja	     short date_error
SEG0070:2998		     cmp     BIN_DATE_TIME_2, 12h
SEG0070:299D		     ja	     short date_error
SEG0070:299F		     cmp     BIN_DATE_TIME_2, 0
SEG0070:29A4		     jbe     short date_error
SEG0070:29A6		     cmp     BIN_DATE_TIME_3, 31h ; '1'
SEG0070:29AB		     ja	     short date_error
SEG0070:29AD		     cmp     BIN_DATE_TIME_3, 0
SEG0070:29B2		     jbe     short date_error
SEG0070:29B4		     clc
SEG0070:29B5		     retn
SEG0070:29B6 ; ---------------------------------------------------------------------------
SEG0070:29B6
SEG0070:29B6 date_error:			     ; CODE XREF: date_verify+5j
SEG0070:29B6					     ; date_verify+Ej ...
SEG0070:29B6		     stc
SEG0070:29B7		     retn
SEG0070:29B7 date_verify     endp
SEG0070:29B7
SEG0070:29B8
SEG0070:29B8 ; =============== S U B R O U T I N E =======================================
SEG0070:29B8
SEG0070:29B8
SEG0070:29B8 time_verify     proc near		     ; CODE XREF: READ_REAL_TIME+1Cp
SEG0070:29B8		     cmp     BIN_DATE_TIME, 24h	; '$'
SEG0070:29BD		     ja	     short time_error
SEG0070:29BF		     cmp     BIN_DATE_TIME_1, 59h ; 'Y'
SEG0070:29C4		     ja	     short time_error
SEG0070:29C6		     cmp     BIN_DATE_TIME_2, 59h ; 'Y'
SEG0070:29CB		     ja	     short time_error
SEG0070:29CD		     clc
SEG0070:29CE		     retn
SEG0070:29CF ; ---------------------------------------------------------------------------
SEG0070:29CF
SEG0070:29CF time_error:			     ; CODE XREF: time_verify+5j
SEG0070:29CF					     ; time_verify+Cj ...
SEG0070:29CF		     stc
SEG0070:29D0		     retn
SEG0070:29D0 time_verify     endp
SEG0070:29D0
SEG0070:29D1
SEG0070:29D1 ; =============== S U B R O U T I N E =======================================
SEG0070:29D1
SEG0070:29D1
SEG0070:29D1 bcd_verify	     proc near		     ; CODE XREF: READ_REAL_DATE+35p
SEG0070:29D1					     ; READ_REAL_TIME+17p
SEG0070:29D1		     mov     cx, 4
SEG0070:29D4		     mov     bx, offset	BIN_DATE_TIME
SEG0070:29D7
SEG0070:29D7 bv_loop:				     ; CODE XREF: bcd_verify+23j
SEG0070:29D7		     mov     al, [bx]
SEG0070:29D9		     mov     ah, al
SEG0070:29DB		     and     ax, 0F00Fh
SEG0070:29DE		     cmp     al, 10
SEG0070:29E0		     ja	     short bv_error
SEG0070:29E2		     shr     ah, 1
SEG0070:29E4		     shr     ah, 1
SEG0070:29E6		     shr     ah, 1
SEG0070:29E8		     shr     ah, 1
SEG0070:29EA		     and     ah, 0Fh
SEG0070:29ED		     cmp     ah, 10
SEG0070:29F0
SEG0070:29F0 loc_29F0:
SEG0070:29F0		     ja	     short bv_error
SEG0070:29F2		     inc     bx
SEG0070:29F3		     dec     cx
SEG0070:29F4		     jnz     short bv_loop
SEG0070:29F6		     clc
SEG0070:29F7		     retn
SEG0070:29F8 ; ---------------------------------------------------------------------------
SEG0070:29F8
SEG0070:29F8 bv_error:				     ; CODE XREF: bcd_verify+Fj
SEG0070:29F8					     ; bcd_verify:loc_29F0j
SEG0070:29F8		     stc
SEG0070:29F9		     retn
SEG0070:29F9 bcd_verify	     endp
SEG0070:29F9
SEG0070:29F9 ; ---------------------------------------------------------------------------
SEG0070:29FA DRVFAT	     dw	0		     ; DATA XREF: SEG0070:2BEFw
SEG0070:29FA					     ; SEG0070:2EEBo ...
SEG0070:29FC BIOS$	     dw	0		     ; DATA XREF: SEG0070:2B1Bw
SEG0070:29FC					     ; SEG0070:2F60w ...
SEG0070:29FE DOSCNT	     dw	0		     ; DATA XREF: GETCLUS+2w
SEG0070:2A00 fBigFAT	     db	0		     ; DATA XREF: SEG0070:2F56w
SEG0070:2A00					     ; SEG0070:2F8Cr ...
SEG0070:2A01 FatLen	     dw	0		     ; DATA XREF: SEG0070:2BFBw
SEG0070:2A01					     ; GETFAT+5r
SEG0070:2A03 FatLoc	     dw	0		     ; DATA XREF: SEG0070:2C0Cw
SEG0070:2A03					     ; GETFAT+9r ...
SEG0070:2A05 NUM_HEADS	     db	2		     ; DATA XREF: SEG0070:2CD2w
SEG0070:2A05					     ; SEG0070:2D6Fr
SEG0070:2A06 SEC_TRK	     db	9		     ; DATA XREF: SEG0070:2CD9w
SEG0070:2A06					     ; SEG0070:2D0Ar ...
SEG0070:2A07 NUM_CYLN	     db	40		     ; DATA XREF: SEG0070:2CB0w
SEG0070:2A07					     ; SEG0070:2CDDw ...
SEG0070:2A08 MODEL_BYTE	     db	0FFh		     ; DATA XREF: SEG0070:2B32w
SEG0070:2A08					     ; SEG0070:2B49w ...
SEG0070:2A09 Secondary_Model_Byte db 0		     ; DATA XREF: SEG0070:2B3Aw
SEG0070:2A09					     ; CMOSCK+9r ...
SEG0070:2A0A DiskTable	     dw	200h
SEG0070:2A0C		     dw	100h
SEG0070:2A0E		     dw	40h
SEG0070:2A10		     dw	0
SEG0070:2A12		     dw	800h
SEG0070:2A14		     dw	201h
SEG0070:2A16		     dw	70h
SEG0070:2A18		     dw	0
SEG0070:2A1A		     dw	2000h
SEG0070:2A1C		     dw	402h
SEG0070:2A1E		     dw	100h
SEG0070:2A20		     dw	0
SEG0070:2A22 word_2A22	     dw	7FA8h
SEG0070:2A24		     dw	803h
SEG0070:2A26		     dw	200h
SEG0070:2A28		     dw	0
SEG0070:2A2A		     dw	0FFFFh
SEG0070:2A2C		     dw	1004h
SEG0070:2A2E		     dw	400h
SEG0070:2A30		     dw	0
SEG0070:2A32 DiskTable2	     dw	7FA8h		     ; DATA XREF: SETHARD:unknowno
SEG0070:2A34		     dw	803h
SEG0070:2A36		     dw	200h
SEG0070:2A38		     dw	0
SEG0070:2A3A		     dw	0FFFFh
SEG0070:2A3C		     dw	402h
SEG0070:2A3E		     dw	200h
SEG0070:2A40 fBIG	     dw	40h
SEG0070:2A42 End_Of_BDSM     dw	0		     ; DATA XREF: SEG0070:2E6Ar
SEG0070:2A42					     ; FIND_MINI_PARTITION+99w
SEG0070:2A44 numh	     db	0		     ; DATA XREF: DoMini+Fw
SEG0070:2A44					     ; DoMini:DoMiniNextw
SEG0070:2A45 mininum	     db	0		     ; DATA XREF: DoMini+18w
SEG0070:2A45					     ; FIND_MINI_PARTITION+38r	...
SEG0070:2A46 num_mini_dsk    db	0		     ; DATA XREF: SEG0070:2E55r
SEG0070:2A46					     ; SEG0070:2E63r ...
SEG0070:2A47 Rom_Minidsk_num db	80h		     ; DATA XREF: DoMini+28w
SEG0070:2A47					     ; DoMini+40r ...
SEG0070:2A48 Mini_HDLIM	     dw	0		     ; DATA XREF: DoMini+33w
SEG0070:2A48					     ; FIND_MINI_PARTITION+26r
SEG0070:2A4A Mini_SECLIM     dw	0		     ; DATA XREF: DoMini+3Dw
SEG0070:2A4A					     ; FIND_MINI_PARTITION+2Cr
SEG0070:2A4C Mini_BPB_ptr    dw	0		     ; DATA XREF: DoMini+23w
SEG0070:2A4C					     ; FIND_MINI_PARTITION+84r	...
SEG0070:2A4E Bios_Date	     db	'01/10/84',0         ; DATA XREF: SEG0070:2E83o
SEG0070:2A57		     db	 90h ; 
SEG0070:2A58 BPB48T	     dw	200h		     ; DATA XREF: SEG0070:BPBTableo
SEG0070:2A5A		     db	2
SEG0070:2A5B		     dw	1
SEG0070:2A5D		     db	2
SEG0070:2A5E		     dw	112
SEG0070:2A60		     dw	720
SEG0070:2A62		     db	0FDh ; ý
SEG0070:2A63		     dw	2
SEG0070:2A65		     dw	9
SEG0070:2A67		     dw	2
SEG0070:2A69		     dw	0
SEG0070:2A6B		     db	90h
SEG0070:2A6C BPB96T	     dw	200h		     ; DATA XREF: SEG0070:2A96o
SEG0070:2A6E		     db	1
SEG0070:2A6F		     dw	1
SEG0070:2A71		     db	2
SEG0070:2A72		     dw	224
SEG0070:2A74		     dw	2400
SEG0070:2A76		     db	0F9h ; ù
SEG0070:2A77		     dw	7
SEG0070:2A79		     dw	0Fh
SEG0070:2A7B		     dw	2
SEG0070:2A7D		     dw	0
SEG0070:2A7F		     db	90h
SEG0070:2A80 BPB35	     dw	200h		     ; DATA XREF: SEG0070:2A98o
SEG0070:2A82		     db	2
SEG0070:2A83		     dw	1
SEG0070:2A85		     db	2
SEG0070:2A86		     dw	112
SEG0070:2A88		     dw	1440
SEG0070:2A8A		     db	0F9h ; ù
SEG0070:2A8B		     dw	3
SEG0070:2A8D		     dw	9
SEG0070:2A8F		     dw	2
SEG0070:2A91		     dw	0
SEG0070:2A93		     db	90h
SEG0070:2A94 BPBTable	     dw	offset BPB48T	     ; DATA XREF: SETDRVPARMS+6Fo
SEG0070:2A96		     dw	offset BPB96T
SEG0070:2A98		     dw	offset BPB35
SEG0070:2A9A PatchTable	     dw	10		     ; DATA XREF: purge_96tpi+6o
SEG0070:2A9C		     dw	offset Media_Patch
SEG0070:2A9E		     dw	3
SEG0070:2AA0		     dw	offset GETBP1_PATCH
SEG0070:2AA2		     dw	3
SEG0070:2AA4		     dw	offset SET_PATCH
SEG0070:2AA6		     dw	3
SEG0070:2AA8		     dw	offset DiskIO_PATCH
SEG0070:2AAA		     dw	3
SEG0070:2AAC		     dw	offset DSKERR
SEG0070:2AAE		     dw	10
SEG0070:2AB0		     dw	offset Changed_Patch
SEG0070:2AB2		     dw	3
SEG0070:2AB4		     dw	offset INIT_PATCH
SEG0070:2AB6		     dw	0
SEG0070:2AB8 ; ---------------------------------------------------------------------------
SEG0070:2AB8
SEG0070:2AB8 init:				     ; CODE XREF: SEG0070:START$j
SEG0070:2AB8		     cli
SEG0070:2AB9		     xor     ax, ax
SEG0070:2ABB		     mov     ds, ax
SEG0070:2ABD		     mov     ax, _4Ch
SEG0070:2AC0		     mov     cs:OLD13, ax
SEG0070:2AC4		     mov     word ptr cs:ORG13,	ax
SEG0070:2AC8		     mov     ax, word ptr _4Eh
SEG0070:2ACB		     mov     cs:OLD13_2, ax
SEG0070:2ACF		     mov     word ptr cs:ORG13+2, ax
SEG0070:2AD3		     mov     _4Ch, offset Block13
SEG0070:2AD9		     mov     word ptr _4Eh, cs
SEG0070:2ADD		     mov     ax, _64h
SEG0070:2AE0		     mov     cs:ORIG19,	ax
SEG0070:2AE4		     mov     ax, word ptr _66h
SEG0070:2AE7		     mov     cs:ORIG19_2, ax
SEG0070:2AEB		     mov     _64h, offset Int19
SEG0070:2AF1		     mov     word ptr _66h, cs
SEG0070:2AF5		     sti
SEG0070:2AF6		     int     11h	     ; EQUIPMENT DETERMINATION
SEG0070:2AF6					     ; Return: AX = equipment flag bits
SEG0070:2AF8		     rol     al, 1
SEG0070:2AFA		     rol     al, 1
SEG0070:2AFC		     and     ax, 3
SEG0070:2AFF		     jnz     short NOT_SINGLE
SEG0070:2B01		     inc     ax
SEG0070:2B02		     inc     cs:single
SEG0070:2B07
SEG0070:2B07 NOT_SINGLE:			     ; CODE XREF: SEG0070:2AFFj
SEG0070:2B07		     inc     ax
SEG0070:2B08		     mov     cl, al
SEG0070:2B0A		     test    dl, 80h
SEG0070:2B0D		     jnz     short GotHrd
SEG0070:2B0F		     xor     ax, ax
SEG0070:2B11
SEG0070:2B11 GotHrd:				     ; CODE XREF: SEG0070:2B0Dj
SEG0070:2B11		     xor     dx, dx
SEG0070:2B13		     cli
SEG0070:2B14		     mov     ss, dx
SEG0070:2B16		     mov     sp, 700h
SEG0070:2B19		     sti
SEG0070:2B1A		     push    cx
SEG0070:2B1B		     mov     cs:BIOS$, bx
SEG0070:2B20		     mov     ah, ch
SEG0070:2B22		     push    ax
SEG0070:2B23		     mov     ah, 0C0h ;	'À'
SEG0070:2B25		     int     15h
SEG0070:2B27		     jb	     short No_Rom_System_Conf
SEG0070:2B29		     cmp     ah, 0
SEG0070:2B2C		     jnz     short No_Rom_System_Conf
SEG0070:2B2E		     mov     al, es:[bx+2]
SEG0070:2B32		     mov     cs:MODEL_BYTE, al
SEG0070:2B36		     mov     al, es:[bx+3]
SEG0070:2B3A		     mov     cs:Secondary_Model_Byte, al
SEG0070:2B3E		     jmp     short Turn_Timer_On
SEG0070:2B40 ; ---------------------------------------------------------------------------
SEG0070:2B40
SEG0070:2B40 No_Rom_System_Conf:		     ; CODE XREF: SEG0070:2B27j
SEG0070:2B40					     ; SEG0070:2B2Cj
SEG0070:2B40		     mov     si, 0FFFFh
SEG0070:2B43		     mov     es, si
SEG0070:2B45		     assume es:nothing
SEG0070:2B45		     mov     al, es:0Eh
SEG0070:2B49		     mov     cs:MODEL_BYTE, al
SEG0070:2B4D
SEG0070:2B4D Turn_Timer_On:			     ; CODE XREF: SEG0070:2B3Ej
SEG0070:2B4D		     mov     al, 20h ; ' '
SEG0070:2B4F		     out     20h, al	     ; Interrupt controller, 8259A.
SEG0070:2B51		     mov     si, offset	COM4DEV
SEG0070:2B54		     call    AUX_INIT
SEG0070:2B57		     mov     si, offset	COM3DEV
SEG0070:2B5A		     call    AUX_INIT
SEG0070:2B5D		     mov     si, offset	COM2DEV
SEG0070:2B60		     call    AUX_INIT
SEG0070:2B63		     mov     si, offset	COM1DEV
SEG0070:2B66		     call    AUX_INIT
SEG0070:2B69		     mov     si, offset	LPT3DEV
SEG0070:2B6C		     call    PRINT_INIT
SEG0070:2B6F		     mov     si, offset	LPT2DEV
SEG0070:2B72		     call    PRINT_INIT
SEG0070:2B75		     mov     si, offset	LPT1DEV
SEG0070:2B78		     call    PRINT_INIT
SEG0070:2B7B		     xor     dx, dx
SEG0070:2B7D		     mov     ds, dx
SEG0070:2B7F		     mov     es, dx
SEG0070:2B81		     assume es:SEG0070
SEG0070:2B81		     xor     ax, ax
SEG0070:2B83		     mov     di, offset	_0534h
SEG0070:2B86		     stosw
SEG0070:2B87		     stosw
SEG0070:2B88		     mov     ax, cs
SEG0070:2B8A		     mov     _6Ch, offset CBREAK
SEG0070:2B90		     mov     _6Eh, ax
SEG0070:2B93		     mov     _A4h, offset OUTCHR
SEG0070:2B99		     mov     _A6h, ax
SEG0070:2B9C		     mov     di, 4
SEG0070:2B9F		     mov     bx, offset	INTRET
SEG0070:2BA2		     xchg    ax, bx
SEG0070:2BA3		     stosw
SEG0070:2BA4		     xchg    ax, bx
SEG0070:2BA5		     stosw
SEG0070:2BA6		     add     di, 4
SEG0070:2BA9		     xchg    ax, bx
SEG0070:2BAA		     stosw
SEG0070:2BAB		     xchg    ax, bx
SEG0070:2BAC		     stosw
SEG0070:2BAD		     xchg    ax, bx
SEG0070:2BAE		     stosw
SEG0070:2BAF		     xchg    ax, bx
SEG0070:2BB0		     stosw
SEG0070:2BB1		     mov     _500h, dx
SEG0070:2BB5		     mov     LSTDRV, dx
SEG0070:2BB9		     mov     si, _78h
SEG0070:2BBD		     mov     ds, _7Ah
SEG0070:2BC1		     assume ds:nothing
SEG0070:2BC1		     mov     di, offset	SEC9
SEG0070:2BC4		     mov     cx, 11
SEG0070:2BC7		     rep movsb
SEG0070:2BC9		     push    es
SEG0070:2BCA		     pop     ds
SEG0070:2BCB		     assume ds:SEG0070
SEG0070:2BCB		     mov     _78h, offset SEC9
SEG0070:2BD1		     mov     _7Ah, ds
SEG0070:2BD5		     cmp     cs:MODEL_BYTE, 0FDh ; 'ý'
SEG0070:2BDB		     jb	     short NO_DIDDLE
SEG0070:2BDD		     mov     word_52B, 20Fh
SEG0070:2BE3		     mov     SEC9, 0DFh	; 'ß'
SEG0070:2BE8
SEG0070:2BE8 NO_DIDDLE:				     ; CODE XREF: SEG0070:2BDBj
SEG0070:2BE8		     int     12h	     ; MEMORY SIZE -
SEG0070:2BE8					     ; Return: AX = number of contiguous 1K blocks of memory
SEG0070:2BEA		     mov     cl, 6
SEG0070:2BEC		     shl     ax, cl
SEG0070:2BEE		     pop     cx
SEG0070:2BEF		     mov     cs:DRVFAT,	cx
SEG0070:2BF4		     push    ax
SEG0070:2BF5		     mov     dx, ds:7C16h
SEG0070:2BF9		     xor     dh, dh
SEG0070:2BFB		     mov     cs:FatLen,	dx
SEG0070:2C00		     shl     dx, 1
SEG0070:2C02		     shl     dx, 1
SEG0070:2C04		     shl     dx, 1
SEG0070:2C06		     shl     dx, 1
SEG0070:2C08		     shl     dx, 1
SEG0070:2C0A		     sub     ax, dx
SEG0070:2C0C		     mov     cs:FatLoc,	ax
SEG0070:2C10		     pop     ax
SEG0070:2C11		     mov     dx, offset	SYSINITSEG
SEG0070:2C14		     mov     ds, dx
SEG0070:2C16		     assume ds:nothing
SEG0070:2C16		     mov     word ptr ds:DEVICE_LIST, offset CONHeader
SEG0070:2C1C		     mov     word ptr ds:DEVICE_LIST+2,	cs
SEG0070:2C20		     mov     ds:MEMORY_SIZE, ax
SEG0070:2C23		     inc     cl
SEG0070:2C25		     mov     ds:DEFAULT_DRIVE, cl
SEG0070:2C29		     mov     ax, offset	END$
SEG0070:2C2C		     sub     ax, 0
SEG0070:2C2F		     add     ax, 0Fh
SEG0070:2C32		     rcr     ax, 1
SEG0070:2C34		     shr     ax, 1
SEG0070:2C36		     shr     ax, 1
SEG0070:2C38		     shr     ax, 1
SEG0070:2C3A		     add     ax, 200h
SEG0070:2C3D		     add     ax, 70h ; 'p'
SEG0070:2C40		     mov     ds:CURRENT_DOS_LOCATION, ax
SEG0070:2C43		     push    ax
SEG0070:2C44		     mov     ax, offset	SYSINITSEG
SEG0070:2C47		     mov     es, ax
SEG0070:2C49		     assume es:nothing
SEG0070:2C49		     xor     ax, ax
SEG0070:2C4B		     mov     ds, ax
SEG0070:2C4D		     assume ds:SEG0070
SEG0070:2C4D		     mov     ax, _3Eh
SEG0070:2C50		     cmp     ax, word ptr es:_80Ch
SEG0070:2C55		     jbe     short resetintf
SEG0070:2C57		     cmp     ax, 0F000h
SEG0070:2C5A		     jnz     short keepintf
SEG0070:2C5C
SEG0070:2C5C resetintf:				     ; CODE XREF: SEG0070:2C55j
SEG0070:2C5C		     mov     _3Ch, offset INTRET
SEG0070:2C62		     mov     _3Eh, cs
SEG0070:2C66
SEG0070:2C66 keepintf:				     ; CODE XREF: SEG0070:2C5Aj
SEG0070:2C66		     pop     ax
SEG0070:2C67		     push    cs
SEG0070:2C68		     pop     ds
SEG0070:2C69		     push    cs
SEG0070:2C6A		     pop     es
SEG0070:2C6B		     assume es:SEG0070
SEG0070:2C6B		     call    CMOS_Clock_Read
SEG0070:2C6E		     xor     si, si
SEG0070:2C70		     mov     word ptr [si], offset HARDDRV
SEG0070:2C74		     pop     ax
SEG0070:2C75		     xor     ah, ah
SEG0070:2C77		     mov     HARDNUM, al
SEG0070:2C7A		     mov     DRVMAX, al
SEG0070:2C7D		     shl     ax, 1
SEG0070:2C7F		     mov     di, offset	DskDrvs
SEG0070:2C82		     add     di, ax
SEG0070:2C84		     mov     si, offset	HDSKTAB
SEG0070:2C87		     movsw
SEG0070:2C88		     movsw
SEG0070:2C89		     mov     ah, 8
SEG0070:2C8B		     mov     dl, 80h ; ''
SEG0070:2C8D		     int     13h	     ; DISK - DISK - GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)
SEG0070:2C8D					     ; DL = drive number
SEG0070:2C8D					     ; Return: CF set on error,	AH = status code, BL = drive type
SEG0070:2C8D					     ; DL = number of consecutive drives
SEG0070:2C8D					     ; DH = maximum value for head number, ES:DI -> drive parameter
SEG0070:2C8F		     jb	     short ENDDRV
SEG0070:2C91		     mov     HNUM, dl
SEG0070:2C95
SEG0070:2C95 ENDDRV:				     ; CODE XREF: SEG0070:2C8Fj
SEG0070:2C95		     xor     dl, dl
SEG0070:2C97		     push    cs
SEG0070:2C98		     pop     ds
SEG0070:2C99		     mov     EOT, 9
SEG0070:2C9E		     mov     di, offset	START_BDS
SEG0070:2CA1
SEG0070:2CA1 loop_drive:			     ; CODE XREF: SEG0070:2DA9j
SEG0070:2CA1		     cmp     dl, DRVMAX
SEG0070:2CA5		     jb	     short got_more
SEG0070:2CA7		     jmp     done_drives
SEG0070:2CAA ; ---------------------------------------------------------------------------
SEG0070:2CAA
SEG0070:2CAA got_more:				     ; CODE XREF: SEG0070:2CA5j
SEG0070:2CAA		     xor     cx, cx
SEG0070:2CAC		     mov     di, [di]
SEG0070:2CAE		     mov     dh, 0
SEG0070:2CB0		     mov     NUM_CYLN, 40
SEG0070:2CB5		     push    ds
SEG0070:2CB6		     push    di
SEG0070:2CB7		     push    dx
SEG0070:2CB8		     push    cx
SEG0070:2CB9		     push    es
SEG0070:2CBA		     mov     ah, 8
SEG0070:2CBC		     int     13h	     ; DISK - DISK - GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)
SEG0070:2CBC					     ; DL = drive number
SEG0070:2CBC					     ; Return: CF set on error,	AH = status code, BL = drive type
SEG0070:2CBC					     ; DL = number of consecutive drives
SEG0070:2CBC					     ; DH = maximum value for head number, ES:DI -> drive parameter
SEG0070:2CBE		     jnb     short parmsfromrom
SEG0070:2CC0		     jmp     short noparmsfromrom
SEG0070:2CC2 ; ---------------------------------------------------------------------------
SEG0070:2CC2		     nop
SEG0070:2CC3
SEG0070:2CC3 parmsfromrom:			     ; CODE XREF: SEG0070:2CBEj
SEG0070:2CC3		     cmp     ch, 0
SEG0070:2CC6		     jnz     short pfr_ok
SEG0070:2CC8		     mov     ch, 39
SEG0070:2CCA		     mov     cl, 9
SEG0070:2CCC		     mov     dh, 1
SEG0070:2CCE
SEG0070:2CCE pfr_ok:				     ; CODE XREF: SEG0070:2CC6j
SEG0070:2CCE		     inc     dh
SEG0070:2CD0		     inc     ch
SEG0070:2CD2		     mov     NUM_HEADS,	dh
SEG0070:2CD6		     and     cl, 3Fh
SEG0070:2CD9		     mov     SEC_TRK, cl
SEG0070:2CDD		     mov     NUM_CYLN, ch
SEG0070:2CE1		     cmp     cl, EOT
SEG0070:2CE5		     jbe     short eot_ok
SEG0070:2CE7		     mov     EOT, cl
SEG0070:2CEB
SEG0070:2CEB eot_ok:				     ; CODE XREF: SEG0070:2CE5j
SEG0070:2CEB		     pop     es
SEG0070:2CEC		     assume es:nothing
SEG0070:2CEC		     pop     cx
SEG0070:2CED		     pop     dx
SEG0070:2CEE		     pop     di
SEG0070:2CEF		     pop     ds
SEG0070:2CF0		     assume ds:nothing
SEG0070:2CF0		     mov     ah, 15h
SEG0070:2CF2		     int     13h	     ; DISK - DISK - GET TYPE (AT,XT2,XT286,CONV,PS)
SEG0070:2CF2					     ; DL = drive ID
SEG0070:2CF2					     ; Return: CF set on error,	AH = disk type
SEG0070:2CF4		     jb	     short changeline_done
SEG0070:2CF6		     cmp     ah, 2
SEG0070:2CF9		     jnz     short changeline_done
SEG0070:2CFB		     or	     cl, 2
SEG0070:2CFE		     mov     ds:fHave96, 1
SEG0070:2D03
SEG0070:2D03 changeline_done:			     ; CODE XREF: SEG0070:2CF4j
SEG0070:2D03					     ; SEG0070:2CF9j
SEG0070:2D03		     cmp     ds:NUM_CYLN, 40
SEG0070:2D08		     jnz     short try_80
SEG0070:2D0A		     cmp     ds:SEC_TRK, 9
SEG0070:2D0F		     jbe     short got_ff
SEG0070:2D11
SEG0070:2D11 gotother:				     ; CODE XREF: SEG0070:2D1Aj
SEG0070:2D11					     ; SEG0070:2D28j
SEG0070:2D11		     mov     dh, 7
SEG0070:2D13		     jmp     short got_ff
SEG0070:2D15 ; ---------------------------------------------------------------------------
SEG0070:2D15
SEG0070:2D15 try_80:				     ; CODE XREF: SEG0070:2D08j
SEG0070:2D15		     cmp     ds:NUM_CYLN, 80
SEG0070:2D1A		     jnz     short gotother
SEG0070:2D1C		     cmp     ds:SEC_TRK, 15
SEG0070:2D21		     jz	     short got96
SEG0070:2D23		     cmp     ds:SEC_TRK, 9
SEG0070:2D28		     jnz     short gotother
SEG0070:2D2A		     mov     dh, 2
SEG0070:2D2C		     jmp     short got_ff
SEG0070:2D2E ; ---------------------------------------------------------------------------
SEG0070:2D2E
SEG0070:2D2E got96:				     ; CODE XREF: SEG0070:2D21j
SEG0070:2D2E		     mov     dh, 1
SEG0070:2D30
SEG0070:2D30 got_ff:				     ; CODE XREF: SEG0070:2D0Fj
SEG0070:2D30					     ; SEG0070:2D13j ...
SEG0070:2D30		     jmp     short nextdrive
SEG0070:2D32 ; ---------------------------------------------------------------------------
SEG0070:2D32
SEG0070:2D32 noparmsfromrom:			     ; CODE XREF: SEG0070:2CC0j
SEG0070:2D32		     pop     es
SEG0070:2D33		     pop     cx
SEG0070:2D34		     pop     dx
SEG0070:2D35		     pop     di
SEG0070:2D36		     pop     ds
SEG0070:2D37		     mov     ah, 15h
SEG0070:2D39		     int     13h	     ; DISK - DISK - GET TYPE (AT,XT2,XT286,CONV,PS)
SEG0070:2D39					     ; DL = drive ID
SEG0070:2D39					     ; Return: CF set on error,	AH = disk type
SEG0070:2D3B		     jb	     short nextdrive
SEG0070:2D3D		     cmp     ah, 2
SEG0070:2D40		     jnz     short nextdrive
SEG0070:2D42		     or	     cl, 2
SEG0070:2D45		     mov     ds:fHave96, 1
SEG0070:2D4A		     mov     ds:NUM_CYLN, 80
SEG0070:2D4F		     mov     dh, 1
SEG0070:2D51		     mov     al, 0Fh
SEG0070:2D53		     cmp     al, ds:EOT
SEG0070:2D57		     jbe     short nextdrive
SEG0070:2D59		     mov     ds:EOT, al
SEG0070:2D5C
SEG0070:2D5C nextdrive:				     ; CODE XREF: SEG0070:got_ffj
SEG0070:2D5C					     ; SEG0070:2D3Bj ...
SEG0070:2D5C		     or	     cl, 20h
SEG0070:2D5F		     mov     bh, dl
SEG0070:2D61		     cmp     ds:single,	2
SEG0070:2D66		     jnz     short Not_Special
SEG0070:2D68		     dec     bh
SEG0070:2D6A		     xor     cl, 20h
SEG0070:2D6D
SEG0070:2D6D Not_Special:			     ; CODE XREF: SEG0070:2D66j
SEG0070:2D6D		     xor     ax, ax
SEG0070:2D6F		     mov     al, ds:NUM_HEADS
SEG0070:2D72		     mov     [di+3Ch], ax
SEG0070:2D75		     mov     al, ds:SEC_TRK
SEG0070:2D78		     mov     [di+3Ah], ax
SEG0070:2D7B		     mov     [di+29h], cx
SEG0070:2D7E		     mov     [di+28h], dh
SEG0070:2D81		     mov     [di+5], dl
SEG0070:2D84		     mov     [di+4], bh
SEG0070:2D87		     mov     bl, ds:NUM_CYLN
SEG0070:2D8B		     mov     [di+2Bh], bl
SEG0070:2D8E		     cmp     ds:single,	1
SEG0070:2D93		     jnz     short No_Single
SEG0070:2D95		     mov     ds:single,	2
SEG0070:2D9A		     or	     cx, 10h
SEG0070:2D9E		     or	     [di+29h], cx
SEG0070:2DA1		     mov     di, [di]
SEG0070:2DA3		     inc     dl
SEG0070:2DA5		     jmp     short nextdrive
SEG0070:2DA7 ; ---------------------------------------------------------------------------
SEG0070:2DA7
SEG0070:2DA7 No_Single:				     ; CODE XREF: SEG0070:2D93j
SEG0070:2DA7		     inc     dl
SEG0070:2DA9		     jmp     loop_drive
SEG0070:2DAC ; ---------------------------------------------------------------------------
SEG0070:2DAC
SEG0070:2DAC done_drives:			     ; CODE XREF: SEG0070:2CA7j
SEG0070:2DAC		     mov     ax, -1
SEG0070:2DAF		     mov     [di], ax
SEG0070:2DB1		     cmp     ds:HNUM, 0
SEG0070:2DB6		     jle     short STATIC_CONFIGURE
SEG0070:2DB8		     mov     dl, 80h ; ''
SEG0070:2DBA		     mov     di, offset	BDSH
SEG0070:2DBD		     mov     bl, ds:HARDNUM
SEG0070:2DC1		     call    SETHARD
SEG0070:2DC4		     jnb     short HardFile1_OK
SEG0070:2DC6		     dec     ds:HNUM
SEG0070:2DCA		     cmp     ds:HNUM, 0
SEG0070:2DCF		     jg	     short Second_Hard
SEG0070:2DD1		     jmp     short STATIC_CONFIGURE
SEG0070:2DD3 ; ---------------------------------------------------------------------------
SEG0070:2DD3
SEG0070:2DD3 HardFile1_OK:			     ; CODE XREF: SEG0070:2DC4j
SEG0070:2DD3		     call    Install_BDS
SEG0070:2DD6		     cmp     ds:HNUM, 2
SEG0070:2DDB		     jb	     short SetIt
SEG0070:2DDD		     mov     bl, ds:HARDNUM
SEG0070:2DE1		     inc     bl
SEG0070:2DE3		     mov     di, offset	BDSX
SEG0070:2DE6
SEG0070:2DE6 Second_Hard:			     ; CODE XREF: SEG0070:2DCFj
SEG0070:2DE6		     mov     dl, 81h ; ''
SEG0070:2DE8		     call    SETHARD
SEG0070:2DEB		     jnb     short HardFile2_OK
SEG0070:2DED		     dec     ds:HNUM
SEG0070:2DF1		     jmp     short SetIt
SEG0070:2DF3 ; ---------------------------------------------------------------------------
SEG0070:2DF3
SEG0070:2DF3 HardFile2_OK:			     ; CODE XREF: SEG0070:2DEBj
SEG0070:2DF3		     call    Install_BDS
SEG0070:2DF6
SEG0070:2DF6 SetIt:				     ; CODE XREF: SEG0070:2DDBj
SEG0070:2DF6					     ; SEG0070:2DF1j
SEG0070:2DF6		     mov     al, ds:HNUM
SEG0070:2DF9		     or	     al, al
SEG0070:2DFB		     jz	     short STATIC_CONFIGURE
SEG0070:2DFD		     add     al, ds:HARDNUM
SEG0070:2E01		     mov     ds:DRVMAX,	al
SEG0070:2E04		     call    DoMini
SEG0070:2E07
SEG0070:2E07 STATIC_CONFIGURE:			     ; CODE XREF: SEG0070:2DB6j
SEG0070:2E07					     ; SEG0070:2DD1j ...
SEG0070:2E07		     push    ax
SEG0070:2E08		     mov     ax, offset	BDSMs
SEG0070:2E0B		     cmp     ds:fHave96, 0
SEG0070:2E10		     jnz     short Config96
SEG0070:2E12		     mov     ax, offset	DSK$OPEN
SEG0070:2E15		     cmp     ds:HNUM, 1
SEG0070:2E1A		     jbe     short ConfigOneHard
SEG0070:2E1C		     jmp     short ConfigTwoHard
SEG0070:2E1E ; ---------------------------------------------------------------------------
SEG0070:2E1E		     nop
SEG0070:2E1F
SEG0070:2E1F ConfigOneHard:			     ; CODE XREF: SEG0070:2E1Aj
SEG0070:2E1F		     mov     ax, offset	EndOneHard
SEG0070:2E22
SEG0070:2E22 loc_2E22:
SEG0070:2E22		     jnz     short Basic_Floppy
SEG0070:2E24		     jmp     short ConfigTwoHard
SEG0070:2E26 ; ---------------------------------------------------------------------------
SEG0070:2E26		     nop
SEG0070:2E27
SEG0070:2E27 Basic_Floppy:			     ; CODE XREF: SEG0070:loc_2E22j
SEG0070:2E27		     mov     ax, offset	HNUM
SEG0070:2E2A		     jmp     short Dynamic_Configure
SEG0070:2E2C ; ---------------------------------------------------------------------------
SEG0070:2E2C		     nop
SEG0070:2E2D
SEG0070:2E2D Config96:				     ; CODE XREF: SEG0070:2E10j
SEG0070:2E2D		     push    ax
SEG0070:2E2E		     push    ds
SEG0070:2E2F		     xor     ax, ax
SEG0070:2E31
SEG0070:2E31 loc_2E31:
SEG0070:2E31		     mov     ds, ax
SEG0070:2E33		     assume ds:SEG0070
SEG0070:2E33		     mov     ax, _4Ch
SEG0070:2E36		     mov     cs:REAL13,	ax
SEG0070:2E3A		     mov     ax, word ptr _4Eh
SEG0070:2E3D		     mov     cs:REAL13_2, ax
SEG0070:2E41		     mov     _4Ch, offset Int13
SEG0070:2E47		     mov     word ptr _4Eh, cs
SEG0070:2E4B		     pop     ds
SEG0070:2E4C		     assume ds:nothing
SEG0070:2E4C		     pop     ax
SEG0070:2E4D
SEG0070:2E4D ConfigTwoHard:			     ; CODE XREF: SEG0070:2E1Cj
SEG0070:2E4D					     ; SEG0070:2E24j
SEG0070:2E4D		     push    ax
SEG0070:2E4E		     mov     al, ds:HARDNUM
SEG0070:2E51		     add     al, ds:HNUM
SEG0070:2E55		     add     al, ds:num_mini_dsk
SEG0070:2E59		     mov     ds:DRVMAX,	al
SEG0070:2E5C		     pop     ax
SEG0070:2E5D
SEG0070:2E5D Dynamic_Configure:			     ; CODE XREF: SEG0070:2E2Aj
SEG0070:2E5D		     call    Get_Para_Offset
SEG0070:2E60		     push    cs
SEG0070:2E61		     pop     es
SEG0070:2E62		     assume es:SEG0070
SEG0070:2E62		     cld
SEG0070:2E63		     cmp     ds:num_mini_dsk, 0
SEG0070:2E68		     jz	     short CheckATROM
SEG0070:2E6A		     mov     ax, ds:End_Of_BDSM
SEG0070:2E6D		     call    Get_Para_Offset
SEG0070:2E70
SEG0070:2E70 CheckATROM:			     ; CODE XREF: SEG0070:2E68j
SEG0070:2E70		     cmp     ds:MODEL_BYTE, 0FCh ; 'ü'
SEG0070:2E75		     jnz     short CheckCMOSClock
SEG0070:2E77		     cmp     ds:HNUM, 0
SEG0070:2E7C		     jz	     short CheckCMOSClock
SEG0070:2E7E		     mov     si, 0F000h
SEG0070:2E81		     mov     es, si
SEG0070:2E83		     assume es:nothing
SEG0070:2E83		     mov     si, offset	Bios_Date ; "01/10/84"
SEG0070:2E86		     mov     di, 0FFF5h
SEG0070:2E89
SEG0070:2E89 Cmpbyte:				     ; CODE XREF: SEG0070:2E90j
SEG0070:2E89		     cmpsb
SEG0070:2E8A		     jnz     short CheckCMOSClock
SEG0070:2E8C		     cmp     byte ptr [si-1], 0
SEG0070:2E90		     jnz     short Cmpbyte
SEG0070:2E92
SEG0070:2E92 SetRomCode:
SEG0070:2E92		     push    cs
SEG0070:2E93		     pop     es
SEG0070:2E94		     assume es:SEG0070
SEG0070:2E94		     mov     word ptr ds:ORG13,	ax
SEG0070:2E97		     mov     word ptr ds:ORG13+2, cs
SEG0070:2E9B		     mov     cx, offset	Daycnt_to_day
SEG0070:2E9E		     mov     si, offset	IBM_DISK_IO
SEG0070:2EA1		     sub     cx, si
SEG0070:2EA3		     mov     di, ax
SEG0070:2EA5		     rep movsb
SEG0070:2EA7		     mov     ax, di
SEG0070:2EA9		     call    Get_Para_Offset
SEG0070:2EAC
SEG0070:2EAC CheckCMOSClock:			     ; CODE XREF: SEG0070:2E75j
SEG0070:2EAC					     ; SEG0070:2E7Cj ...
SEG0070:2EAC		     push    cs
SEG0070:2EAD		     pop     es
SEG0070:2EAE		     cmp     ds:HaveCMOSClock, 1
SEG0070:2EB3		     jnz     short CheckK09
SEG0070:2EB5		     mov     ds:DaycntToDay, ax
SEG0070:2EB8		     mov     cx, offset	Bin_to_bcd
SEG0070:2EBB		     mov     si, offset	Daycnt_to_day
SEG0070:2EBE		     sub     cx, si
SEG0070:2EC0		     mov     di, ax
SEG0070:2EC2		     rep movsb
SEG0070:2EC4		     mov     ax, di
SEG0070:2EC6		     call    Get_Para_Offset
SEG0070:2EC9		     mov     ds:BinToBCD, ax
SEG0070:2ECC		     mov     cx, offset	EndCMOSClockSet
SEG0070:2ECF		     mov     si, offset	Bin_to_bcd
SEG0070:2ED2		     sub     cx, si
SEG0070:2ED4		     mov     di, ax
SEG0070:2ED6		     rep movsb
SEG0070:2ED8		     mov     ax, di
SEG0070:2EDA		     call    Get_Para_Offset
SEG0070:2EDD
SEG0070:2EDD CheckK09:				     ; CODE XREF: SEG0070:2EB3j
SEG0070:2EDD		     push    ax
SEG0070:2EDE		     mov     ax, 4100h
SEG0070:2EE1		     xor     bl, bl
SEG0070:2EE3		     int     15h	     ; SYSTEM -	WAIT ON	EXTERNAL EVENT (CONVERTIBLE)
SEG0070:2EE3					     ; AL = condition type, BH = condition compare or mask value
SEG0070:2EE3					     ; BL = timeout value times	55 milliseconds, 00h means no timeout
SEG0070:2EE3					     ; DX = I/O	port address if	AL bit 4 set
SEG0070:2EE5		     pop     ax
SEG0070:2EE6		     jb	     short CONFIGDONE
SEG0070:2EE8		     mov     si, offset	INT6C
SEG0070:2EEB		     mov     cx, offset	DRVFAT
SEG0070:2EEE		     sub     cx, si
SEG0070:2EF0		     mov     di, ax
SEG0070:2EF2		     push    di
SEG0070:2EF3		     rep movsb
SEG0070:2EF5		     mov     ax, di
SEG0070:2EF7		     call    Get_Para_Offset
SEG0070:2EFA		     pop     di
SEG0070:2EFB		     push    ax
SEG0070:2EFC		     push    ds
SEG0070:2EFD		     mov     ds:fHaveK09, 1
SEG0070:2F02		     xor     ax, ax
SEG0070:2F04		     mov     ds, ax
SEG0070:2F06		     assume ds:SEG0070
SEG0070:2F06		     mov     word ptr asc_1AE+2, di
SEG0070:2F0A		     mov     word ptr asc_1AE+4, cs
SEG0070:2F0E		     pop     ds
SEG0070:2F0F		     assume ds:nothing
SEG0070:2F0F		     pop     ax
SEG0070:2F10
SEG0070:2F10 CONFIGDONE:			     ; CODE XREF: SEG0070:2EE6j
SEG0070:2F10		     mov     dx, offset	SYSINITSEG
SEG0070:2F13		     mov     ds, dx
SEG0070:2F15		     assume ds:nothing
SEG0070:2F15		     sub     ax, 0
SEG0070:2F18		     add     ax, 0Fh
SEG0070:2F1B		     rcr     ax, 1
SEG0070:2F1D		     shr     ax, 1
SEG0070:2F1F		     shr     ax, 1
SEG0070:2F21		     shr     ax, 1
SEG0070:2F23		     mov     ds:FINAL_DOS_LOCATION, ax
SEG0070:2F26		     pop     ax
SEG0070:2F27		     add     ds:FINAL_DOS_LOCATION, 70h
SEG0070:2F2D		     push    cs
SEG0070:2F2E		     pop     ds
SEG0070:2F2F		     assume ds:SEG0070
SEG0070:2F2F		     cmp     fHave96, 0
SEG0070:2F34		     jnz     short ReadDos
SEG0070:2F36		     call    purge_96tpi
SEG0070:2F39
SEG0070:2F39 ReadDos:				     ; CODE XREF: SEG0070:2F34j
SEG0070:2F39		     mov     ax, DRVFAT
SEG0070:2F3C		     call    SetDrive
SEG0070:2F3F		     call    GETBP
SEG0070:2F42		     call    GETFAT
SEG0070:2F45		     xor     di, di
SEG0070:2F47		     mov     al, es:[di]
SEG0070:2F4A		     mov     byte ptr DRVFAT+1,	al
SEG0070:2F4D		     mov     ax, DRVFAT
SEG0070:2F50		     call    SetDrive
SEG0070:2F53		     mov     bl, [di+19h]
SEG0070:2F56		     mov     fBigFAT, bl
SEG0070:2F5A		     mov     cl, [di+8]
SEG0070:2F5D		     mov     ax, [di+17h]
SEG0070:2F60		     sub     BIOS$, ax
SEG0070:2F64		     xor     ch, ch
SEG0070:2F66		     push    ds
SEG0070:2F67		     xor     di, di
SEG0070:2F69		     mov     ds, di
SEG0070:2F6B		     mov     bx, _53A
SEG0070:2F6F		     pop     ds
SEG0070:2F70		     assume ds:nothing
SEG0070:2F70
SEG0070:2F70 LOADIT:				     ; CODE XREF: SEG0070:ISEOFXj
SEG0070:2F70		     mov     ax, offset	END$
SEG0070:2F73		     sub     ax, 0
SEG0070:2F76		     add     ax, 0Fh
SEG0070:2F79		     rcr     ax, 1
SEG0070:2F7B		     shr     ax, 1
SEG0070:2F7D		     shr     ax, 1
SEG0070:2F7F		     shr     ax, 1
SEG0070:2F81		     add     ax, 200h
SEG0070:2F84		     add     ax, 70h ; 'p'
SEG0070:2F87		     mov     es, ax
SEG0070:2F89		     assume es:nothing
SEG0070:2F89		     call    GETCLUS
SEG0070:2F8C		     test    ds:fBigFAT, 40h
SEG0070:2F91		     jnz     short EOFBig
SEG0070:2F93		     cmp     bx, 0FF7h
SEG0070:2F97		     jmp     short ISEOFX
SEG0070:2F99 ; ---------------------------------------------------------------------------
SEG0070:2F99
SEG0070:2F99 EOFBig:				     ; CODE XREF: SEG0070:2F91j
SEG0070:2F99		     cmp     bx, 0FFF7h
SEG0070:2F9C
SEG0070:2F9C ISEOFX:				     ; CODE XREF: SEG0070:2F97j
SEG0070:2F9C		     jb	     short LOADIT
SEG0070:2F9E		     call    SETDRVPARMS
SEG0070:2FA1		     jmp     far ptr 3B9h:7F1h
SEG0070:2FA6
SEG0070:2FA6 ; =============== S U B R O U T I N E =======================================
SEG0070:2FA6
SEG0070:2FA6
SEG0070:2FA6 Get_Para_Offset proc near		     ; CODE XREF: SEG0070:Dynamic_Configurep
SEG0070:2FA6					     ; SEG0070:2E6Dp ...
SEG0070:2FA6		     add     ax, 0Fh
SEG0070:2FA9		     rcr     ax, 1
SEG0070:2FAB		     shr     ax, 1
SEG0070:2FAD		     shr     ax, 1
SEG0070:2FAF		     shr     ax, 1
SEG0070:2FB1		     shl     ax, 1
SEG0070:2FB3		     shl     ax, 1
SEG0070:2FB5		     shl     ax, 1
SEG0070:2FB7		     shl     ax, 1
SEG0070:2FB9		     retn
SEG0070:2FB9 Get_Para_Offset endp
SEG0070:2FB9
SEG0070:2FBA
SEG0070:2FBA ; =============== S U B R O U T I N E =======================================
SEG0070:2FBA
SEG0070:2FBA
SEG0070:2FBA GETFAT	     proc near		     ; CODE XREF: SEG0070:2F42p
SEG0070:2FBA		     xor     di, di
SEG0070:2FBC		     mov     dx, 1
SEG0070:2FBF		     mov     cx, ds:FatLen
SEG0070:2FC3		     mov     ax, ds:FatLoc
SEG0070:2FC6		     mov     es, ax
SEG0070:2FC8		     mov     ax, ds:DRVFAT
SEG0070:2FCB		     jmp     DISKRD
SEG0070:2FCB GETFAT	     endp
SEG0070:2FCB
SEG0070:2FCE
SEG0070:2FCE ; =============== S U B R O U T I N E =======================================
SEG0070:2FCE
SEG0070:2FCE
SEG0070:2FCE GETBOOT	     proc near		     ; CODE XREF: SETHARD+2Cp
SEG0070:2FCE					     ; DoMini+44p
SEG0070:2FCE		     mov     cx, 1
SEG0070:2FD1		     mov     ax, 201h
SEG0070:2FD4		     mov     bx, 7C0h
SEG0070:2FD7		     mov     es, bx
SEG0070:2FD9		     assume es:nothing
SEG0070:2FD9		     mov     bx, 200h
SEG0070:2FDC		     mov     dh, bl
SEG0070:2FDE		     int     13h	     ; DISK - READ SECTORS INTO	MEMORY
SEG0070:2FDE					     ; AL = number of sectors to read, CH = track, CL =	sector
SEG0070:2FDE					     ; DH = head, DL = drive, ES:BX -> buffer to fill
SEG0070:2FDE					     ; Return: CF set on error,	AH = status, AL	= number of sectors read
SEG0070:2FE0		     jb	     short ERRET
SEG0070:2FE2		     cmp     word ptr es:3FEh, 0AA55h
SEG0070:2FE9		     jz	     short Norm_Ret
SEG0070:2FEB
SEG0070:2FEB ERRET:				     ; CODE XREF: GETBOOT+12j
SEG0070:2FEB		     stc
SEG0070:2FEC
SEG0070:2FEC Norm_Ret:				     ; CODE XREF: GETBOOT+1Bj
SEG0070:2FEC		     retn
SEG0070:2FEC GETBOOT	     endp
SEG0070:2FEC
SEG0070:2FED
SEG0070:2FED ; =============== S U B R O U T I N E =======================================
SEG0070:2FED
SEG0070:2FED
SEG0070:2FED SETHARD	     proc near		     ; CODE XREF: SEG0070:2DC1p
SEG0070:2FED					     ; SEG0070:2DE8p
SEG0070:2FED
SEG0070:2FED arg_21	     = word ptr	 29h
SEG0070:2FED
SEG0070:2FED		     push    di
SEG0070:2FEE		     push    bx
SEG0070:2FEF		     push    ds
SEG0070:2FF0		     mov     [di+5], bl
SEG0070:2FF3		     mov     [di+4], dl
SEG0070:2FF6		     xor     ax, ax
SEG0070:2FF8		     or	     al, 1
SEG0070:2FFA		     or	     [di+29h], ax
SEG0070:2FFD		     mov     byte ptr [di+28h],	5
SEG0070:3001		     mov     byte ptr ds:2A00h,	0
SEG0070:3006		     push    dx
SEG0070:3007		     mov     ah, 8
SEG0070:3009		     int     13h	     ; DISK - DISK - GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)
SEG0070:3009					     ; DL = drive number
SEG0070:3009					     ; Return: CF set on error,	AH = status code, BL = drive type
SEG0070:3009					     ; DL = number of consecutive drives
SEG0070:3009					     ; DH = maximum value for head number, ES:DI -> drive parameter
SEG0070:300B		     inc     dh
SEG0070:300D		     mov     [di+15h], dh
SEG0070:3010		     pop     dx
SEG0070:3011		     jb	     short SETRET
SEG0070:3013		     and     cl, 3Fh
SEG0070:3016		     mov     [di+13h], cl
SEG0070:3019		     call    GETBOOT
SEG0070:301C		     jb	     short SETRET
SEG0070:301E		     mov     bx, 3C2h
SEG0070:3021
SEG0070:3021 SET1:				     ; CODE XREF: SETHARD+47j
SEG0070:3021					     ; SetMini+3j
SEG0070:3021		     cmp     byte ptr es:[bx], 1
SEG0070:3025		     jz	     short SetMini
SEG0070:3027		     cmp     byte ptr es:[bx], 4
SEG0070:302B		     jz	     short SetMini
SEG0070:302D		     add     bx, 10h
SEG0070:3030		     cmp     bx, 402h
SEG0070:3034		     jnz     short SET1
SEG0070:3036
SEG0070:3036 SETRET:				     ; CODE XREF: SETHARD+24j
SEG0070:3036					     ; SETHARD+2Fj ...
SEG0070:3036		     stc
SEG0070:3037		     jmp     Ret_Hard
SEG0070:303A ; ---------------------------------------------------------------------------
SEG0070:303A
SEG0070:303A SetMini:				     ; CODE XREF: SETHARD+38j
SEG0070:303A					     ; SETHARD+3Ej
SEG0070:303A		     push    dx
SEG0070:303B		     mov     ax, es:[bx+4]
SEG0070:303F		     mov     dx, es:[bx+6]
SEG0070:3043		     sub     ax, 1
SEG0070:3046		     sbb     dx, 0
SEG0070:3049		     add     ax, es:[bx+8]
SEG0070:304D		     adc     dx, es:[bx+0Ah]
SEG0070:3051		     jz	     short OKDrive
SEG0070:3053		     or	     byte ptr ds:2A00h,	80h
SEG0070:3058
SEG0070:3058 OKDrive:				     ; CODE XREF: SETHARD+64j
SEG0070:3058		     pop     dx
SEG0070:3059		     mov     ax, es:[bx+4]
SEG0070:305D		     mov     [di+17h], ax
SEG0070:3060		     mov     ax, es:[bx+8]
SEG0070:3064		     cmp     ax, 40h ; '@'
SEG0070:3067		     jb	     short SETRET
SEG0070:3069		     mov     [di+0Eh], ax
SEG0070:306C		     push    ax
SEG0070:306D		     push    dx
SEG0070:306E		     mov     ax, [di+17h]
SEG0070:3071		     xor     dx, dx
SEG0070:3073		     mov     bh, dh
SEG0070:3075		     mov     bl, [di+13h]
SEG0070:3078		     div     bx
SEG0070:307A		     mov     cl, dl
SEG0070:307C		     inc     cl
SEG0070:307E		     cwd
SEG0070:307F		     mov     bl, [di+15h]
SEG0070:3082		     div     bx
SEG0070:3084		     cmp     word ptr [di+4Dh],	1
SEG0070:3088		     jnz     short OKNotMini
SEG0070:308A		     add     ax, [di+4Fh]
SEG0070:308D
SEG0070:308D OKNotMini:				     ; CODE XREF: SETHARD+9Bj
SEG0070:308D		     ror     ah, 1
SEG0070:308F		     ror     ah, 1
SEG0070:3091		     and     ah, 0C0h
SEG0070:3094		     or	     cl, ah
SEG0070:3096		     mov     ch, al
SEG0070:3098		     pop     ax
SEG0070:3099		     mov     dh, dl
SEG0070:309B		     mov     dl, al
SEG0070:309D		     xor     bx, bx
SEG0070:309F		     mov     ax, 201h
SEG0070:30A2		     int     13h	     ; DISK - READ SECTORS INTO	MEMORY
SEG0070:30A2					     ; AL = number of sectors to read, CH = track, CL =	sector
SEG0070:30A2					     ; DH = head, DL = drive, ES:BX -> buffer to fill
SEG0070:30A2					     ; Return: CF set on error,	AH = status, AL	= number of sectors read
SEG0070:30A4		     pop     ax
SEG0070:30A5		     cmp     word ptr es:3, 'BI'
SEG0070:30AC		     jnz     short unknownj
SEG0070:30AE		     cmp     word ptr es:5, ' M'
SEG0070:30B5		     jnz     short unknownj
SEG0070:30B7		     cmp     word ptr es:8, '.2'
SEG0070:30BE		     jnz     short Try5
SEG0070:30C0		     cmp     byte ptr es:0Ah, '0'
SEG0070:30C6		     jnz     short Try5
SEG0070:30C8		     jmp     short CopyBPB
SEG0070:30CA ; ---------------------------------------------------------------------------
SEG0070:30CA
SEG0070:30CA unknownj:				     ; CODE XREF: SETHARD+BFj
SEG0070:30CA					     ; SETHARD+C8j ...
SEG0070:30CA		     jmp     short unknown
SEG0070:30CA ; ---------------------------------------------------------------------------
SEG0070:30CC		     db	 90h ; 
SEG0070:30CD ; ---------------------------------------------------------------------------
SEG0070:30CD
SEG0070:30CD Try5:				     ; CODE XREF: SETHARD+D1j
SEG0070:30CD					     ; SETHARD+D9j
SEG0070:30CD		     cmp     word ptr es:8, 2E33h
SEG0070:30D4		     jnz     short unknownj
SEG0070:30D6		     cmp     byte ptr es:0Ah, 31h ; '1'
SEG0070:30DC		     jb	     short unknownj
SEG0070:30DE
SEG0070:30DE CopyBPB:				     ; CODE XREF: SETHARD+DBj
SEG0070:30DE		     mov     ax, es:13h
SEG0070:30E2		     dec     ax
SEG0070:30E3		     mov     dx, es:16h
SEG0070:30E8		     mov     [di+11h], dx
SEG0070:30EB		     shl     dx, 1
SEG0070:30ED		     sub     ax, dx
SEG0070:30EF		     mov     dx, es:11h
SEG0070:30F4		     mov     [di+0Ch], dx
SEG0070:30F7		     mov     cl, 4
SEG0070:30F9		     shr     dx, cl
SEG0070:30FB		     sub     ax, dx
SEG0070:30FD		     mov     cl, es:0Dh
SEG0070:3102		     mov     [di+8], cl
SEG0070:3105		     xor     dx, dx
SEG0070:3107		     mov     ch, dh
SEG0070:3109		     div     cx
SEG0070:310B		     cmp     ax, 0FF6h
SEG0070:310E		     jb	     short GoodRetj
SEG0070:3110		     or	     byte ptr ds:2A00h,	40h
SEG0070:3115
SEG0070:3115 GoodRetj:				     ; CODE XREF: SETHARD+121j
SEG0070:3115		     jmp     short GoodRet
SEG0070:3115 ; ---------------------------------------------------------------------------
SEG0070:3117		     db	 90h ; 
SEG0070:3118 ; ---------------------------------------------------------------------------
SEG0070:3118
SEG0070:3118 unknown:				     ; CODE XREF: SETHARD:unknownjj
SEG0070:3118		     mov     si, offset	DiskTable2
SEG0070:311B
SEG0070:311B Scan:				     ; CODE XREF: SETHARD+135j
SEG0070:311B		     cmp     ax, [si]
SEG0070:311D		     jbe     short GotParm
SEG0070:311F		     add     si, 8
SEG0070:3122		     jmp     short Scan
SEG0070:3124 ; ---------------------------------------------------------------------------
SEG0070:3124
SEG0070:3124 GotParm:				     ; CODE XREF: SETHARD+130j
SEG0070:3124		     mov     cl, [si+6]
SEG0070:3127		     or	     ds:fBigFAT, cl
SEG0070:312B		     mov     cx, [si+2]
SEG0070:312E		     mov     dx, [si+4]
SEG0070:3131		     mov     [di+0Ch], dx
SEG0070:3134		     mov     [di+8], ch
SEG0070:3137		     test    ds:fBigFAT, 40h
SEG0070:313C		     jnz     short DoBig
SEG0070:313E		     xor     bx, bx
SEG0070:3140		     mov     bl, ch
SEG0070:3142		     dec     bx
SEG0070:3143		     add     bx, ax
SEG0070:3145		     shr     bx, cl
SEG0070:3147		     inc     bx
SEG0070:3148		     and     bl, 0FEh
SEG0070:314B		     mov     si, bx
SEG0070:314D		     shr     bx, 1
SEG0070:314F		     add     bx, si
SEG0070:3151		     add     bx, 1FFh
SEG0070:3155		     shr     bh, 1
SEG0070:3157		     mov     [di+11h], bh
SEG0070:315A		     jmp     short GoodRet
SEG0070:315C ; ---------------------------------------------------------------------------
SEG0070:315C
SEG0070:315C DoBig:				     ; CODE XREF: SETHARD+14Fj
SEG0070:315C		     mov     cl, 4
SEG0070:315E		     shr     dx, cl
SEG0070:3160		     sub     ax, dx
SEG0070:3162		     dec     ax
SEG0070:3163		     mov     bl, 2
SEG0070:3165		     mov     bh, [di+8]
SEG0070:3168		     xor     dx, dx
SEG0070:316A		     add     ax, bx
SEG0070:316C		     adc     dx, 0
SEG0070:316F		     sub     ax, 1
SEG0070:3172		     sbb     dx, 0
SEG0070:3175		     div     bx
SEG0070:3177		     mov     [di+11h], ax
SEG0070:317A
SEG0070:317A GoodRet:				     ; CODE XREF: SETHARD:GoodRetjj
SEG0070:317A					     ; SETHARD+16Dj
SEG0070:317A		     mov     bl, ds:fBigFAT
SEG0070:317E		     mov     [di+19h], bl
SEG0070:3181		     clc
SEG0070:3182
SEG0070:3182 Ret_Hard:				     ; CODE XREF: SETHARD+4Aj
SEG0070:3182		     pop     ds
SEG0070:3183		     pop     bx
SEG0070:3184		     pop     di
SEG0070:3185		     retn
SEG0070:3185 SETHARD	     endp
SEG0070:3185
SEG0070:3186
SEG0070:3186 ; =============== S U B R O U T I N E =======================================
SEG0070:3186
SEG0070:3186
SEG0070:3186 SETDRVPARMS     proc near		     ; CODE XREF: SEG0070:2F9Ep
SEG0070:3186		     xor     bx, bx
SEG0070:3188		     les     di, dword ptr cs:START_BDS
SEG0070:318D		     assume es:nothing
SEG0070:318D
SEG0070:318D Next_BDS:				     ; CODE XREF: SETDRVPARMS+87j
SEG0070:318D		     cmp     di, -1
SEG0070:3190		     jnz     short Do_SetP
SEG0070:3192		     retn
SEG0070:3193 ; ---------------------------------------------------------------------------
SEG0070:3193
SEG0070:3193 Do_SetP:				     ; CODE XREF: SETDRVPARMS+Aj
SEG0070:3193		     push    es
SEG0070:3194		     push    di
SEG0070:3195		     mov     bl, es:[di+28h]
SEG0070:3199		     cmp     bl, 5
SEG0070:319C		     jnz     short NotHardFF
SEG0070:319E		     mov     ax, es:[di+0Eh]
SEG0070:31A2		     push    ax
SEG0070:31A3		     mov     ax, es:[di+15h]
SEG0070:31A7		     mul     word ptr es:[di+13h]
SEG0070:31AB		     mov     cx, ax
SEG0070:31AD		     pop     ax
SEG0070:31AE		     xor     dx, dx
SEG0070:31B0		     div     cx
SEG0070:31B2		     or	     dx, dx
SEG0070:31B4		     jz	     short No_Cyl_Rnd
SEG0070:31B6		     inc     ax
SEG0070:31B7
SEG0070:31B7 No_Cyl_Rnd:			     ; CODE XREF: SETDRVPARMS+2Ej
SEG0070:31B7		     mov     es:[di+2Bh], ax
SEG0070:31BB		     push    es
SEG0070:31BC		     pop     ds
SEG0070:31BD		     lea     si, [di+6]
SEG0070:31C0		     jmp     short Set_RecBPB
SEG0070:31C2 ; ---------------------------------------------------------------------------
SEG0070:31C2
SEG0070:31C2 NotHardFF:				     ; CODE XREF: SETDRVPARMS+16j
SEG0070:31C2		     push    cs
SEG0070:31C3		     pop     ds
SEG0070:31C4		     assume ds:SEG0070
SEG0070:31C4		     cmp     bl, 7
SEG0070:31C7		     jnz     short NOT_PROCESS_OTHER
SEG0070:31C9
SEG0070:31C9 Process_Other:
SEG0070:31C9		     xor     dx, dx
SEG0070:31CB		     mov     ax, [di+2Bh]
SEG0070:31CE		     mov     bx, [di+3Ch]
SEG0070:31D1		     mul     bx
SEG0070:31D3		     mov     bx, [di+3Ah]
SEG0070:31D6		     mul     bx
SEG0070:31D8		     mov     [di+35h], ax
SEG0070:31DB		     dec     ax
SEG0070:31DC		     mov     bx, 3
SEG0070:31DF		     mul     bx
SEG0070:31E1		     mov     bx, 2
SEG0070:31E4		     div     bx
SEG0070:31E6		     xor     dx, dx
SEG0070:31E8		     mov     bx, 512
SEG0070:31EB		     div     bx
SEG0070:31ED		     inc     ax
SEG0070:31EE		     mov     [di+38h], ax
SEG0070:31F1		     jmp     short Go_To_Next_BDS
SEG0070:31F3 ; ---------------------------------------------------------------------------
SEG0070:31F3
SEG0070:31F3 NOT_PROCESS_OTHER:			     ; CODE XREF: SETDRVPARMS+41j
SEG0070:31F3		     shl     bx, 1
SEG0070:31F5		     mov     si, offset	BPBTable
SEG0070:31F8		     mov     si, [bx+si]
SEG0070:31FA
SEG0070:31FA Set_RecBPB:			     ; CODE XREF: SETDRVPARMS+3Aj
SEG0070:31FA		     lea     di, [di+2Dh]
SEG0070:31FD		     mov     cx, 19
SEG0070:3200		     rep movsb
SEG0070:3202
SEG0070:3202 Go_To_Next_BDS:			     ; CODE XREF: SETDRVPARMS+6Bj
SEG0070:3202		     pop     di
SEG0070:3203		     pop     es
SEG0070:3204		     mov     bx, es:[di+2]
SEG0070:3208		     mov     di, es:[di]
SEG0070:320B		     mov     es, bx
SEG0070:320D		     jmp     Next_BDS
SEG0070:320D SETDRVPARMS     endp
SEG0070:320D
SEG0070:3210
SEG0070:3210 ; =============== S U B R O U T I N E =======================================
SEG0070:3210
SEG0070:3210
SEG0070:3210 GETCLUS	     proc near		     ; CODE XREF: SEG0070:2F89p
SEG0070:3210		     push    cx
SEG0070:3211		     push    di
SEG0070:3212		     mov     DOSCNT, cx
SEG0070:3216		     mov     ax, bx
SEG0070:3218		     dec     ax
SEG0070:3219		     dec     ax
SEG0070:321A		     mul     cx
SEG0070:321C		     add     ax, BIOS$
SEG0070:3220		     mov     dx, ax
SEG0070:3222
SEG0070:3222 loc_3222:				     ; CODE XREF: GETCLUS+4Aj
SEG0070:3222		     push    ds
SEG0070:3223		     push    bx
SEG0070:3224		     mov     si, FatLoc
SEG0070:3228		     test    fBigFAT, 40h
SEG0070:322D		     jnz     short loc_3247
SEG0070:322F		     mov     ds, si
SEG0070:3231		     assume ds:nothing
SEG0070:3231		     mov     si, bx
SEG0070:3233		     shr     si, 1
SEG0070:3235		     mov     bx, [bx+si]
SEG0070:3237		     jnb     short loc_3241
SEG0070:3239		     shr     bx, 1
SEG0070:323B		     shr     bx, 1
SEG0070:323D		     shr     bx, 1
SEG0070:323F		     shr     bx, 1
SEG0070:3241
SEG0070:3241 loc_3241:				     ; CODE XREF: GETCLUS+27j
SEG0070:3241		     and     bx, 0FFFh
SEG0070:3245		     jmp     short loc_324D
SEG0070:3247 ; ---------------------------------------------------------------------------
SEG0070:3247
SEG0070:3247 loc_3247:				     ; CODE XREF: GETCLUS+1Dj
SEG0070:3247		     mov     ds, si
SEG0070:3249		     shl     bx, 1
SEG0070:324B		     mov     bx, [bx]
SEG0070:324D
SEG0070:324D loc_324D:				     ; CODE XREF: GETCLUS+35j
SEG0070:324D		     pop     si
SEG0070:324E		     pop     ds
SEG0070:324F		     sub     si, bx
SEG0070:3251		     cmp     si, 0FFFFh
SEG0070:3254		     jnz     short loc_325C
SEG0070:3256		     add     ds:29FEh, cx
SEG0070:325A		     jmp     short loc_3222
SEG0070:325C ; ---------------------------------------------------------------------------
SEG0070:325C
SEG0070:325C loc_325C:				     ; CODE XREF: GETCLUS+44j
SEG0070:325C		     push    bx
SEG0070:325D		     mov     ax, ds:29FAh
SEG0070:3260		     mov     cx, ds:29FEh
SEG0070:3264		     call    DISKRD
SEG0070:3267		     pop     bx
SEG0070:3268		     pop     di
SEG0070:3269		     mov     ax, ds:29FEh
SEG0070:326C		     xchg    ah, al
SEG0070:326E		     shl     ax, 1
SEG0070:3270		     add     di, ax
SEG0070:3272		     pop     cx
SEG0070:3273		     retn
SEG0070:3273 GETCLUS	     endp
SEG0070:3273
SEG0070:3274
SEG0070:3274 ; =============== S U B R O U T I N E =======================================
SEG0070:3274
SEG0070:3274
SEG0070:3274 PRINT_INIT	     proc near		     ; CODE XREF: SEG0070:2B6Cp
SEG0070:3274					     ; SEG0070:2B72p ...
SEG0070:3274		     call    GET_DEVICE_NUMBER
SEG0070:3277		     mov     ah, 1
SEG0070:3279		     int     17h	     ; PRINTER - INITIALIZE
SEG0070:3279					     ; DX = printer port (0-3)
SEG0070:3279					     ; Return: AH = status
SEG0070:327B		     retn
SEG0070:327B PRINT_INIT	     endp
SEG0070:327B
SEG0070:327C
SEG0070:327C ; =============== S U B R O U T I N E =======================================
SEG0070:327C
SEG0070:327C
SEG0070:327C AUX_INIT	     proc near		     ; CODE XREF: SEG0070:2B54p
SEG0070:327C					     ; SEG0070:2B5Ap ...
SEG0070:327C		     call    GET_DEVICE_NUMBER
SEG0070:327F		     mov     ax, 0A3h ;	'£'
SEG0070:3282		     int     14h	     ; SERIAL I/O - INITIALIZE USART
SEG0070:3282					     ; AL = initializing parameters, DX	= port number (0-3)
SEG0070:3282					     ; Return: AH = RS-232 status code bits, AL	= modem	status bits
SEG0070:3284		     retn
SEG0070:3284 AUX_INIT	     endp
SEG0070:3284
SEG0070:3285
SEG0070:3285 ; =============== S U B R O U T I N E =======================================
SEG0070:3285
SEG0070:3285
SEG0070:3285 GET_DEVICE_NUMBER proc near	     ; CODE XREF: PRINT_INITp
SEG0070:3285					     ; AUX_INITp
SEG0070:3285		     mov     al, cs:[si+0Dh]
SEG0070:3289		     sub     al, '1'
SEG0070:328B		     cbw
SEG0070:328C		     mov     dx, ax
SEG0070:328E		     retn
SEG0070:328E GET_DEVICE_NUMBER endp
SEG0070:328E
SEG0070:328F
SEG0070:328F ; =============== S U B R O U T I N E =======================================
SEG0070:328F
SEG0070:328F
SEG0070:328F purge_96tpi     proc near		     ; CODE XREF: SEG0070:2F36p
SEG0070:328F		     push    ds
SEG0070:3290		     push    es
SEG0070:3291		     push    cs
SEG0070:3292		     pop     es
SEG0070:3293		     assume es:SEG0070
SEG0070:3293		     push    cs
SEG0070:3294		     pop     ds
SEG0070:3295		     assume ds:SEG0070
SEG0070:3295		     mov     si, offset	PatchTable
SEG0070:3298
SEG0070:3298 PatchLoop:				     ; CODE XREF: purge_96tpi+15j
SEG0070:3298		     lodsw
SEG0070:3299		     mov     cx, ax
SEG0070:329B		     jcxz    short PatchDone
SEG0070:329D		     lodsw
SEG0070:329E		     mov     di, ax
SEG0070:32A0		     mov     al, 90h
SEG0070:32A2		     rep stosb
SEG0070:32A4		     jmp     short PatchLoop
SEG0070:32A6 ; ---------------------------------------------------------------------------
SEG0070:32A6
SEG0070:32A6 PatchDone:				     ; CODE XREF: purge_96tpi+Cj
SEG0070:32A6		     mov     di, offset	TABLE_PATCH
SEG0070:32A9		     mov     ax, offset	EXIT
SEG0070:32AC		     stosw
SEG0070:32AD		     stosw
SEG0070:32AE		     pop     es
SEG0070:32AF		     assume es:nothing
SEG0070:32AF		     pop     ds
SEG0070:32B0		     assume ds:nothing
SEG0070:32B0		     retn
SEG0070:32B0 purge_96tpi     endp
SEG0070:32B0
SEG0070:32B1
SEG0070:32B1 ; =============== S U B R O U T I N E =======================================
SEG0070:32B1
SEG0070:32B1
SEG0070:32B1 DoMini	     proc near		     ; CODE XREF: SEG0070:2E04p
SEG0070:32B1		     push    ax
SEG0070:32B2		     mov     di, offset	BDSMs
SEG0070:32B5		     mov     dl, 80h ; ''
SEG0070:32B7		     mov     ah, 8
SEG0070:32B9		     int     13h	     ; DISK - DISK - GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)
SEG0070:32B9					     ; DL = drive number
SEG0070:32B9					     ; Return: CF set on error,	AH = status code, BL = drive type
SEG0070:32B9					     ; DL = number of consecutive drives
SEG0070:32B9					     ; DH = maximum value for head number, ES:DI -> drive parameter
SEG0070:32BB		     cmp     dl, 0
SEG0070:32BE		     jz	     short DoMiniRet
SEG0070:32C0		     mov     ds:numh, dl
SEG0070:32C4		     xor     ax, ax
SEG0070:32C6		     mov     al, ds:DRVMAX
SEG0070:32C9		     mov     ds:mininum, al
SEG0070:32CC		     shl     ax, 1
SEG0070:32CE		     push    bx
SEG0070:32CF		     mov     bx, offset	DskDrvs
SEG0070:32D2		     add     bx, ax
SEG0070:32D4		     mov     ds:Mini_BPB_ptr, bx
SEG0070:32D8		     pop     bx
SEG0070:32D9		     mov     ds:Rom_Minidsk_num, 80h
SEG0070:32DE
SEG0070:32DE DoMiniBegin:			     ; CODE XREF: DoMini+5Ej
SEG0070:32DE		     inc     dh
SEG0070:32E0		     xor     ax, ax
SEG0070:32E2		     mov     al, dh
SEG0070:32E4		     mov     ds:Mini_HDLIM, ax
SEG0070:32E7		     xor     ax, ax
SEG0070:32E9		     and     cl, 3Fh
SEG0070:32EC		     mov     al, cl
SEG0070:32EE		     mov     ds:Mini_SECLIM, ax
SEG0070:32F1		     mov     dl, ds:Rom_Minidsk_num
SEG0070:32F5		     call    GETBOOT
SEG0070:32F8		     jb	     short DoMiniNext
SEG0070:32FA		     call    FIND_MINI_PARTITION
SEG0070:32FD
SEG0070:32FD DoMiniNext:			     ; CODE XREF: DoMini+47j
SEG0070:32FD		     dec     ds:numh
SEG0070:3301		     jz	     short DoMiniRet
SEG0070:3303		     inc     ds:Rom_Minidsk_num
SEG0070:3307		     mov     dl, ds:Rom_Minidsk_num
SEG0070:330B		     mov     ah, 8
SEG0070:330D		     int     13h	     ; DISK - DISK - GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)
SEG0070:330D					     ; DL = drive number
SEG0070:330D					     ; Return: CF set on error,	AH = status code, BL = drive type
SEG0070:330D					     ; DL = number of consecutive drives
SEG0070:330D					     ; DH = maximum value for head number, ES:DI -> drive parameter
SEG0070:330F		     jmp     short DoMiniBegin
SEG0070:3311 ; ---------------------------------------------------------------------------
SEG0070:3311
SEG0070:3311 DoMiniRet:				     ; CODE XREF: DoMini+Dj
SEG0070:3311					     ; DoMini+50j
SEG0070:3311		     pop     ax
SEG0070:3312		     retn
SEG0070:3312 DoMini	     endp
SEG0070:3312
SEG0070:3313
SEG0070:3313 ; =============== S U B R O U T I N E =======================================
SEG0070:3313
SEG0070:3313
SEG0070:3313 FIND_MINI_PARTITION proc near	     ; CODE XREF: DoMini+49p
SEG0070:3313		     add     bx, 1C2h
SEG0070:3317
SEG0070:3317 FmpNext:				     ; CODE XREF: FIND_MINI_PARTITION+11j
SEG0070:3317					     ; FIND_MINI_PARTITION:FmpNextChainj
SEG0070:3317		     cmp     byte ptr es:[bx], 5
SEG0070:331B		     jz	     short FmpGot
SEG0070:331D		     add     bx, 10h
SEG0070:3320		     cmp     bx, 402h
SEG0070:3324		     jnz     short FmpNext
SEG0070:3326		     jmp     FmpRet
SEG0070:3329 ; ---------------------------------------------------------------------------
SEG0070:3329
SEG0070:3329 FmpGot:				     ; CODE XREF: FIND_MINI_PARTITION+8j
SEG0070:3329		     xor     ax, ax
SEG0070:332B		     or	     al, 1
SEG0070:332D		     or	     [di+29h], ax
SEG0070:3330		     mov     byte ptr [di+28h],	5
SEG0070:3334		     mov     ds:fBigFAT, 0
SEG0070:3339		     mov     ax, ds:Mini_HDLIM
SEG0070:333C		     mov     [di+15h], ax
SEG0070:333F		     mov     ax, ds:Mini_SECLIM
SEG0070:3342		     mov     [di+13h], ax
SEG0070:3345		     mov     al, ds:Rom_Minidsk_num
SEG0070:3348		     mov     [di+4], al
SEG0070:334B		     mov     al, ds:mininum
SEG0070:334E		     mov     [di+5], al
SEG0070:3351		     cmp     word ptr es:[bx+8], 40h ; '@'
SEG0070:3356		     jz	     short FmpRet
SEG0070:3358		     sub     bx, 4
SEG0070:335B		     mov     dh, es:[bx+2]
SEG0070:335F		     and     dh, 0C0h
SEG0070:3362		     rol     dh, 1
SEG0070:3364		     rol     dh, 1
SEG0070:3366		     mov     dl, es:[bx+3]
SEG0070:336A		     mov     [di+4Fh], dx
SEG0070:336D		     mov     dh, es:[bx+1]
SEG0070:3371		     mov     dl, ds:Rom_Minidsk_num
SEG0070:3375		     mov     cx, es:[bx+2]
SEG0070:3379		     mov     bx, 200h
SEG0070:337C		     mov     ax, 201h
SEG0070:337F		     int     13h	     ; DISK - READ SECTORS INTO	MEMORY
SEG0070:337F					     ; AL = number of sectors to read, CH = track, CL =	sector
SEG0070:337F					     ; DH = head, DL = drive, ES:BX -> buffer to fill
SEG0070:337F					     ; Return: CF set on error,	AH = status, AL	= number of sectors read
SEG0070:3381		     jb	     short FmpRet
SEG0070:3383		     mov     bx, 3C2h
SEG0070:3386		     call    SetMini
SEG0070:3389		     jb	     short FmpNextChain
SEG0070:338B		     call    INSTALL_BDSM
SEG0070:338E		     inc     ds:mininum
SEG0070:3392		     inc     ds:num_mini_dsk
SEG0070:3396		     push    bx
SEG0070:3397		     mov     bx, ds:Mini_BPB_ptr
SEG0070:339B		     lea     si, [di+6]
SEG0070:339E		     mov     [bx], si
SEG0070:33A0		     inc     ds:Mini_BPB_ptr
SEG0070:33A4		     inc     ds:Mini_BPB_ptr
SEG0070:33A8		     pop     bx
SEG0070:33A9		     add     di, 51h ; 'Q'
SEG0070:33AC		     mov     ds:End_Of_BDSM, di
SEG0070:33B0
SEG0070:33B0 FmpNextChain:			     ; CODE XREF: FIND_MINI_PARTITION+76j
SEG0070:33B0		     jmp     FmpNext
SEG0070:33B3 ; ---------------------------------------------------------------------------
SEG0070:33B3
SEG0070:33B3 FmpRet:				     ; CODE XREF: FIND_MINI_PARTITION+13j
SEG0070:33B3					     ; FIND_MINI_PARTITION+43j	...
SEG0070:33B3		     retn
SEG0070:33B3 FIND_MINI_PARTITION endp
SEG0070:33B3
SEG0070:33B4
SEG0070:33B4 ; =============== S U B R O U T I N E =======================================
SEG0070:33B4
SEG0070:33B4
SEG0070:33B4 SetMini	     proc near		     ; CODE XREF: FIND_MINI_PARTITION+73p
SEG0070:33B4		     push    di
SEG0070:33B5		     push    bx
SEG0070:33B6		     push    ds
SEG0070:33B7		     jmp     SET1
SEG0070:33B7 SetMini	     endp
SEG0070:33B7
SEG0070:33BA
SEG0070:33BA ; =============== S U B R O U T I N E =======================================
SEG0070:33BA
SEG0070:33BA
SEG0070:33BA INSTALL_BDSM    proc near		     ; CODE XREF: FIND_MINI_PARTITION+78p
SEG0070:33BA		     push    ax
SEG0070:33BB		     push    si
SEG0070:33BC		     push    es
SEG0070:33BD		     les     si, dword ptr cs:START_BDS
SEG0070:33C2
SEG0070:33C2 I_BDSM_Next:			     ; CODE XREF: INSTALL_BDSM+17j
SEG0070:33C2		     cmp     word ptr es:[si], 0FFFFh
SEG0070:33C6
SEG0070:33C6 _33C6h:				     ; DATA XREF: SYSINIT:09C2w
SEG0070:33C6		     jz	     short I_BDSM_New
SEG0070:33C8		     mov     si, es:[si]
SEG0070:33CB		     mov     ax, es:[si+2]
SEG0070:33CF		     mov     es, ax
SEG0070:33D1		     jmp     short I_BDSM_Next
SEG0070:33D3 ; ---------------------------------------------------------------------------
SEG0070:33D3
SEG0070:33D3 I_BDSM_New:			     ; CODE XREF: INSTALL_BDSM:_33C6hj
SEG0070:33D3		     mov     ax, ds
SEG0070:33D5		     mov     [di+2], ax
SEG0070:33D8		     mov     es:[si+2],	ax
SEG0070:33DC		     mov     es:[si], di
SEG0070:33DF		     mov     word ptr [di], 0FFFFh
SEG0070:33E3		     pop     es
SEG0070:33E4		     pop     si
SEG0070:33E5		     pop     ax
SEG0070:33E6		     retn
SEG0070:33E6 INSTALL_BDSM    endp
SEG0070:33E6
SEG0070:33E7
SEG0070:33E7 ; =============== S U B R O U T I N E =======================================
SEG0070:33E7
SEG0070:33E7
SEG0070:33E7 CMOS_Clock_Read proc near		     ; CODE XREF: SEG0070:2C6Bp
SEG0070:33E7		     push    ax
SEG0070:33E8		     push    cx
SEG0070:33E9		     push    dx
SEG0070:33EA		     push    bp
SEG0070:33EB		     xor     bp, bp
SEG0070:33ED
SEG0070:33ED LOOP_CLOCK:			     ; CODE XREF: CMOS_Clock_Read+23j
SEG0070:33ED		     xor     cx, cx
SEG0070:33EF		     xor     dx, dx
SEG0070:33F1		     mov     ah, 2
SEG0070:33F3		     int     1Ah	     ; CLOCK - READ REAL TIME CLOCK (AT,XT286,CONV,PS)
SEG0070:33F3					     ; Return: CH = hours in BCD
SEG0070:33F3					     ; CL = minutes in BCD
SEG0070:33F3					     ; DH = seconds in BCD
SEG0070:33F5		     cmp     cx, 0
SEG0070:33F8		     jnz     short CLOCK_PRESENT
SEG0070:33FA		     cmp     dx, 0
SEG0070:33FD		     jnz     short CLOCK_PRESENT
SEG0070:33FF		     cmp     bp, 1
SEG0070:3402		     jz	     short NO_READDATE
SEG0070:3404		     inc     bp
SEG0070:3405		     mov     cx, 16384
SEG0070:3408
SEG0070:3408 DELAY:				     ; CODE XREF: CMOS_Clock_Read:DELAYj
SEG0070:3408		     loop    DELAY
SEG0070:340A		     jmp     short LOOP_CLOCK
SEG0070:340C ; ---------------------------------------------------------------------------
SEG0070:340C
SEG0070:340C CLOCK_PRESENT:			     ; CODE XREF: CMOS_Clock_Read+11j
SEG0070:340C					     ; CMOS_Clock_Read+16j
SEG0070:340C		     mov     cs:HaveCMOSClock, 1
SEG0070:3412		     call    CMOSCK
SEG0070:3415		     push    si
SEG0070:3416		     call    READ_REAL_DATE
SEG0070:3419		     cli
SEG0070:341A		     mov     ds:DAYCNT,	si
SEG0070:341E		     sti
SEG0070:341F		     pop     si
SEG0070:3420
SEG0070:3420 NO_READDATE:			     ; CODE XREF: CMOS_Clock_Read+1Bj
SEG0070:3420		     pop     bp
SEG0070:3421		     pop     dx
SEG0070:3422		     pop     cx
SEG0070:3423		     pop     ax
SEG0070:3424		     retn
SEG0070:3424 CMOS_Clock_Read endp
SEG0070:3424
SEG0070:3425
SEG0070:3425 ; =============== S U B R O U T I N E =======================================
SEG0070:3425
SEG0070:3425
SEG0070:3425 CMOSCK	     proc near		     ; CODE XREF: CMOS_Clock_Read+2Bp
SEG0070:3425		     push    ax
SEG0070:3426		     cmp     cs:MODEL_BYTE, 0FCh ; 'ü'
SEG0070:342C		     jnz     short CMOSCK9
SEG0070:342E		     cmp     cs:Secondary_Model_Byte, 6
SEG0070:3434		     jz	     short CMOSCK4
SEG0070:3436		     cmp     cs:Secondary_Model_Byte, 4
SEG0070:343C		     jnb     short CMOSCK9
SEG0070:343E
SEG0070:343E CMOSCK4:				     ; CODE XREF: CMOSCK+Fj
SEG0070:343E		     mov     al, 8Ah ; ''
SEG0070:3440		     mov     ah, 26h ; '&'
SEG0070:3442		     call    CMOS_WRITE
SEG0070:3445		     mov     al, 8Bh ; ''
SEG0070:3447		     call    CMOS_READ
SEG0070:344A		     and     al, 7
SEG0070:344C		     mov     ah, al
SEG0070:344E		     mov     al, 0Bh
SEG0070:3450		     call    CMOS_WRITE
SEG0070:3453
SEG0070:3453 CMOSCK9:				     ; CODE XREF: CMOSCK+7j
SEG0070:3453					     ; CMOSCK+17j
SEG0070:3453		     pop     ax
SEG0070:3454		     retn
SEG0070:3454 CMOSCK	     endp
SEG0070:3454
SEG0070:3455
SEG0070:3455 ; =============== S U B R O U T I N E =======================================
SEG0070:3455
SEG0070:3455
SEG0070:3455 CMOS_READ	     proc near		     ; CODE XREF: CMOSCK+22p
SEG0070:3455		     pushf
SEG0070:3456		     rol     al, 1
SEG0070:3458		     stc
SEG0070:3459		     rcr     al, 1
SEG0070:345B		     cli
SEG0070:345C		     out     70h, al	     ; CMOS Memory:
SEG0070:345C					     ; used by real-time clock
SEG0070:345E		     nop
SEG0070:345F		     in	     al, 71h	     ; CMOS Memory
SEG0070:3461		     push    ax
SEG0070:3462		     mov     al, 1Eh
SEG0070:3464		     rcr     al, 1
SEG0070:3466		     out     70h, al	     ; CMOS Memory:
SEG0070:3466					     ; used by real-time clock
SEG0070:3468		     nop
SEG0070:3469		     in	     al, 71h	     ; CMOS Memory
SEG0070:346B		     pop     ax
SEG0070:346C		     push    cs
SEG0070:346D		     call    near ptr CMOS_POPF
SEG0070:3470		     retn
SEG0070:3470 CMOS_READ	     endp
SEG0070:3470
SEG0070:3471
SEG0070:3471 ; =============== S U B R O U T I N E =======================================
SEG0070:3471
SEG0070:3471
SEG0070:3471 CMOS_POPF	     proc far		     ; CODE XREF: CMOS_READ+18p
SEG0070:3471					     ; CMOS_WRITE+19p
SEG0070:3471		     iret
SEG0070:3471 CMOS_POPF	     endp
SEG0070:3471
SEG0070:3472
SEG0070:3472 ; =============== S U B R O U T I N E =======================================
SEG0070:3472
SEG0070:3472
SEG0070:3472 CMOS_WRITE	     proc near		     ; CODE XREF: CMOSCK+1Dp
SEG0070:3472					     ; CMOSCK+2Bp
SEG0070:3472		     pushf
SEG0070:3473		     push    ax
SEG0070:3474		     rol     al, 1
SEG0070:3476		     stc
SEG0070:3477		     rcr     al, 1
SEG0070:3479		     cli
SEG0070:347A		     out     70h, al	     ; CMOS Memory:
SEG0070:347A					     ; used by real-time clock
SEG0070:347C		     mov     al, ah
SEG0070:347E		     out     71h, al	     ; CMOS Memory:
SEG0070:347E					     ; used by real-time clock
SEG0070:3480		     mov     al, 1Eh
SEG0070:3482		     rcr     al, 1
SEG0070:3484		     out     70h, al	     ; CMOS Memory:
SEG0070:3484					     ; used by real-time clock
SEG0070:3486		     nop
SEG0070:3487		     in	     al, 71h	     ; CMOS Memory
SEG0070:3489		     pop     ax
SEG0070:348A		     push    cs
SEG0070:348B		     call    near ptr CMOS_POPF
SEG0070:348E		     retn
SEG0070:348E CMOS_WRITE	     endp
SEG0070:348E
SEG0070:348E ; ---------------------------------------------------------------------------
SEG0070:348F END$	     db	0		     ; DATA XREF: SEG0070:2C29o
SEG0070:348F					     ; SEG0070:LOADITo
SEG0070:348F SEG0070	     ends
SEG0070:348F
SYSINIT:0000 ; ===========================================================================
SYSINIT:0000
SYSINIT:0000 ; Segment type: Regular
SYSINIT:0000 SYSINIT	     segment byte public 'SYSINIT' use16
SYSINIT:0000		     assume cs:SYSINIT
SYSINIT:0000		     assume es:nothing,	ss:nothing, ds:nothing,	fs:nothing, gs:nothing
SYSINIT:0000 word_3490	     dw	0
SYSINIT:0002 StackCount	     dw	0
SYSINIT:0004 StackAt	     dw	0
SYSINIT:0006 StackSize	     dw	0
SYSINIT:0008 Stacks	     dw	0
SYSINIT:000A Stacks_Seg	     dw	0		     ; DATA XREF: SYSINIT:0033r
SYSINIT:000A					     ; SYSINIT:00ADr ...
SYSINIT:000C FirstEntry	     dw	8		     ; DATA XREF: SYSINIT:foundbad02r
SYSINIT:000C					     ; SYSINIT:FoundBad08r ...
SYSINIT:000E LastEntry	     dw	48h		     ; DATA XREF: longpathr
SYSINIT:0010 NextEntry	     dw	48h		     ; DATA XREF: SYSINIT:0038r
SYSINIT:0010					     ; SYSINIT:0047w ...
SYSINIT:0012 old02	     dd	0		     ; DATA XREF: SYSINIT:loc_34BCr
SYSINIT:0012					     ; SYSINIT:0068r ...
SYSINIT:0016 ; ---------------------------------------------------------------------------
SYSINIT:0016
SYSINIT:0016 int02:				     ; DATA XREF: StackInit+AFo
SYSINIT:0016		     push    ax
SYSINIT:0017		     push    ds
SYSINIT:0018		     mov     ax, 0F000h
SYSINIT:001B		     mov     ds, ax
SYSINIT:001D		     assume ds:nothing
SYSINIT:001D
SYSINIT:001D loc_34AD:
SYSINIT:001D		     cmp     byte ptr ds:0FFFEh, 0F9h ;	'ù'
SYSINIT:0022		     pop     ds
SYSINIT:0023		     assume ds:nothing
SYSINIT:0023
SYSINIT:0023 loc_34B3:
SYSINIT:0023		     jnz     short normal02
SYSINIT:0025		     in	     al, 62h	     ; PC/XT PPI port C. Bits:
SYSINIT:0025					     ; 0-3: values of DIP switches
SYSINIT:0025					     ; 5: 1=Timer 2 channel out
SYSINIT:0025					     ; 6: 1=I/O	channel	check
SYSINIT:0025					     ; 7: 1=RAM	parity check error occurred.
SYSINIT:0027		     test    al, 80h
SYSINIT:0029		     jz	     short normal02
SYSINIT:002B		     pop     ax
SYSINIT:002C
SYSINIT:002C loc_34BC:				     ; DATA XREF: SYSINIT:1B8Br
SYSINIT:002C		     jmp     cs:old02
SYSINIT:0031 ; ---------------------------------------------------------------------------
SYSINIT:0031
SYSINIT:0031 normal02:				     ; CODE XREF: SYSINIT:loc_34B3j
SYSINIT:0031					     ; SYSINIT:0029j
SYSINIT:0031		     push    bp
SYSINIT:0032		     push    es
SYSINIT:0033		     mov     es, cs:Stacks_Seg
SYSINIT:0038		     assume es:SEG0070
SYSINIT:0038		     mov     bp, cs:NextEntry
SYSINIT:003D		     mov     al, 1
SYSINIT:003F
SYSINIT:003F loc_34CF:
SYSINIT:003F		     xchg    al, es:[bp+0]
SYSINIT:0043		     cmp     al, 0
SYSINIT:0045		     jnz     short notfree02
SYSINIT:0047		     sub     cs:NextEntry, 8
SYSINIT:004D
SYSINIT:004D found02:				     ; CODE XREF: SYSINIT:0094j
SYSINIT:004D		     mov     es:[bp+2],	sp
SYSINIT:0051		     mov     word ptr es:[bp+4], ss
SYSINIT:0055		     mov     ax, bp
SYSINIT:0057		     mov     bp, es:[bp+6]
SYSINIT:005B		     cmp     es:[bp+0],	ax
SYSINIT:005F		     jnz     short foundbad02
SYSINIT:0061		     mov     ax, es
SYSINIT:0063		     mov     ss, ax
SYSINIT:0065		     assume ss:SEG0070
SYSINIT:0065		     mov     sp, bp
SYSINIT:0067		     pushf
SYSINIT:0068		     call    cs:old02
SYSINIT:006D		     mov     bp, sp
SYSINIT:006F		     mov     bp, es:[bp+0]
SYSINIT:0073		     mov     ss, word ptr es:[bp+4]
SYSINIT:0077		     assume ss:nothing
SYSINIT:0077		     mov     sp, es:[bp+2]
SYSINIT:007B		     mov     byte ptr es:[bp+0], 0
SYSINIT:0080		     mov     cs:NextEntry, bp
SYSINIT:0085		     pop     es
SYSINIT:0086		     assume es:nothing
SYSINIT:0086		     pop     bp
SYSINIT:0087		     pop     ax
SYSINIT:0088		     iret
SYSINIT:0089 ; ---------------------------------------------------------------------------
SYSINIT:0089
SYSINIT:0089 notfree02:				     ; CODE XREF: SYSINIT:0045j
SYSINIT:0089		     cmp     al, 1
SYSINIT:008B		     jz	     short FindNext02
SYSINIT:008D		     xchg    al, es:[bp+0]
SYSINIT:0091
SYSINIT:0091 FindNext02:			     ; CODE XREF: SYSINIT:008Bj
SYSINIT:0091					     ; SYSINIT:009Bj ...
SYSINIT:0091		     call    longpath
SYSINIT:0094		     jmp     short found02
SYSINIT:0096 ; ---------------------------------------------------------------------------
SYSINIT:0096
SYSINIT:0096 foundbad02:			     ; CODE XREF: SYSINIT:005Fj
SYSINIT:0096		     cmp     bp, cs:FirstEntry
SYSINIT:009B		     jb	     short FindNext02
SYSINIT:009D		     mov     bp, ax
SYSINIT:009F		     mov     byte ptr es:[bp+0], 3
SYSINIT:00A4		     jmp     short FindNext02
SYSINIT:00A4 ; ---------------------------------------------------------------------------
SYSINIT:00A6 Old08	     dd	0		     ; DATA XREF: SYSINIT:00E2r
SYSINIT:00A6					     ; StackInit+BBo
SYSINIT:00AA ; ---------------------------------------------------------------------------
SYSINIT:00AA
SYSINIT:00AA loc_353A:
SYSINIT:00AA		     push    ax
SYSINIT:00AB		     push    bp
SYSINIT:00AC		     push    es
SYSINIT:00AD		     mov     es, cs:Stacks_Seg
SYSINIT:00B2		     assume es:SEG0070
SYSINIT:00B2		     mov     bp, cs:NextEntry
SYSINIT:00B7		     mov     al, 1
SYSINIT:00B9		     xchg    al, es:[bp+0]
SYSINIT:00BD		     cmp     al, 0
SYSINIT:00BF		     jnz     short NotFree08
SYSINIT:00C1		     sub     cs:NextEntry, 8
SYSINIT:00C7
SYSINIT:00C7 Found08:				     ; CODE XREF: SYSINIT:010Ej
SYSINIT:00C7		     mov     es:[bp+2],	sp
SYSINIT:00CB		     mov     word ptr es:[bp+4], ss
SYSINIT:00CF		     mov     ax, bp
SYSINIT:00D1		     mov     bp, es:[bp+6]
SYSINIT:00D5		     cmp     es:[bp+0],	ax
SYSINIT:00D9		     jnz     short FoundBad08
SYSINIT:00DB		     mov     ax, es
SYSINIT:00DD		     mov     ss, ax
SYSINIT:00DF		     assume ss:SEG0070
SYSINIT:00DF		     mov     sp, bp
SYSINIT:00E1		     pushf
SYSINIT:00E2		     call    cs:Old08
SYSINIT:00E7		     mov     bp, sp
SYSINIT:00E9		     mov     bp, es:[bp+0]
SYSINIT:00ED		     mov     ss, word ptr es:[bp+4]
SYSINIT:00F1		     assume ss:nothing
SYSINIT:00F1		     mov     sp, es:[bp+2]
SYSINIT:00F5		     mov     byte ptr es:[bp+0], 0
SYSINIT:00FA		     mov     cs:NextEntry, bp
SYSINIT:00FF
SYSINIT:00FF NewError08:
SYSINIT:00FF		     pop     es
SYSINIT:0100		     assume es:nothing
SYSINIT:0100
SYSINIT:0100 loc_3590:
SYSINIT:0100		     pop     bp
SYSINIT:0101		     pop     ax
SYSINIT:0102		     iret
SYSINIT:0103 ; ---------------------------------------------------------------------------
SYSINIT:0103
SYSINIT:0103 NotFree08:				     ; CODE XREF: SYSINIT:00BFj
SYSINIT:0103		     cmp     al, 1
SYSINIT:0105		     jz	     short FindNext08
SYSINIT:0107		     xchg    al, es:[bp+0]
SYSINIT:010B
SYSINIT:010B FindNext08:			     ; CODE XREF: SYSINIT:0105j
SYSINIT:010B					     ; SYSINIT:0115j ...
SYSINIT:010B		     call    longpath
SYSINIT:010E		     jmp     short Found08
SYSINIT:0110 ; ---------------------------------------------------------------------------
SYSINIT:0110
SYSINIT:0110 FoundBad08:			     ; CODE XREF: SYSINIT:00D9j
SYSINIT:0110		     cmp     bp, cs:FirstEntry
SYSINIT:0115		     jb	     short FindNext08
SYSINIT:0117		     mov     bp, ax
SYSINIT:0119		     mov     byte ptr es:[bp+0], 3
SYSINIT:011E		     jmp     short FindNext08
SYSINIT:011E ; ---------------------------------------------------------------------------
SYSINIT:0120 Old09	     dd	0		     ; DATA XREF: SYSINIT:0161r
SYSINIT:0124 ; ---------------------------------------------------------------------------
SYSINIT:0124		     jmp     short Keyboard_lbl
SYSINIT:0124 ; ---------------------------------------------------------------------------
SYSINIT:0126		     db	90h
SYSINIT:0127		     db	90h
SYSINIT:0128		     db	0
SYSINIT:0129 ; ---------------------------------------------------------------------------
SYSINIT:0129
SYSINIT:0129 Keyboard_lbl:			     ; CODE XREF: SYSINIT:0124j
SYSINIT:0129		     push    ax
SYSINIT:012A		     push    bp
SYSINIT:012B		     push    es
SYSINIT:012C		     mov     es, cs:Stacks_Seg
SYSINIT:0131		     assume es:SEG0070
SYSINIT:0131		     mov     bp, cs:NextEntry
SYSINIT:0136		     mov     al, 1
SYSINIT:0138		     xchg    al, es:[bp+0]
SYSINIT:013C		     cmp     al, 0
SYSINIT:013E		     jnz     short NotFree09
SYSINIT:0140		     sub     cs:NextEntry, 8
SYSINIT:0146
SYSINIT:0146 Found09:				     ; CODE XREF: SYSINIT:018Dj
SYSINIT:0146		     mov     es:[bp+2],	sp
SYSINIT:014A		     mov     word ptr es:[bp+4], ss
SYSINIT:014E		     mov     ax, bp
SYSINIT:0150		     mov     bp, es:[bp+6]
SYSINIT:0154		     cmp     es:[bp+0],	ax
SYSINIT:0158		     jnz     short FoundBad09
SYSINIT:015A		     mov     ax, es
SYSINIT:015C		     mov     ss, ax
SYSINIT:015E		     assume ss:SEG0070
SYSINIT:015E		     mov     sp, bp
SYSINIT:0160		     pushf
SYSINIT:0161		     call    cs:Old09
SYSINIT:0166		     mov     bp, sp
SYSINIT:0168		     mov     bp, es:[bp+0]
SYSINIT:016C		     mov     ss, word ptr es:[bp+4]
SYSINIT:0170		     assume ss:nothing
SYSINIT:0170		     mov     sp, es:[bp+2]
SYSINIT:0174		     mov     byte ptr es:[bp+0], 0
SYSINIT:0179		     mov     cs:NextEntry, bp
SYSINIT:017E		     pop     es
SYSINIT:017F		     assume es:nothing
SYSINIT:017F		     pop     bp
SYSINIT:0180		     pop     ax
SYSINIT:0181		     iret
SYSINIT:0182 ; ---------------------------------------------------------------------------
SYSINIT:0182
SYSINIT:0182 NotFree09:				     ; CODE XREF: SYSINIT:013Ej
SYSINIT:0182		     cmp     al, 1
SYSINIT:0184		     jz	     short FindNext09
SYSINIT:0186		     xchg    al, es:[bp+0]
SYSINIT:018A
SYSINIT:018A FindNext09:			     ; CODE XREF: SYSINIT:0184j
SYSINIT:018A					     ; SYSINIT:0194j ...
SYSINIT:018A		     call    longpath
SYSINIT:018D		     jmp     short Found09
SYSINIT:018F ; ---------------------------------------------------------------------------
SYSINIT:018F
SYSINIT:018F FoundBad09:			     ; CODE XREF: SYSINIT:0158j
SYSINIT:018F		     cmp     bp, cs:FirstEntry
SYSINIT:0194		     jb	     short FindNext09
SYSINIT:0196		     mov     bp, ax
SYSINIT:0198		     mov     byte ptr es:[bp+0], 3
SYSINIT:019D		     jmp     short FindNext09
SYSINIT:019D ; ---------------------------------------------------------------------------
SYSINIT:019F Old70	     dd	0		     ; DATA XREF: SYSINIT:01DBr
SYSINIT:01A3 ; ---------------------------------------------------------------------------
SYSINIT:01A3
SYSINIT:01A3 Int70:
SYSINIT:01A3		     push    ax
SYSINIT:01A4		     push    bp
SYSINIT:01A5		     push    es
SYSINIT:01A6		     mov     es, cs:Stacks_Seg
SYSINIT:01AB		     assume es:SEG0070
SYSINIT:01AB		     mov     bp, cs:NextEntry
SYSINIT:01B0		     mov     al, 1
SYSINIT:01B2		     xchg    al, es:[bp+0]
SYSINIT:01B6		     cmp     al, 0
SYSINIT:01B8		     jnz     short NotFree70
SYSINIT:01BA		     sub     cs:NextEntry, 8
SYSINIT:01C0
SYSINIT:01C0 Found70:				     ; CODE XREF: SYSINIT:loc_3697j
SYSINIT:01C0		     mov     es:[bp+2],	sp
SYSINIT:01C4		     mov     word ptr es:[bp+4], ss
SYSINIT:01C8		     mov     ax, bp
SYSINIT:01CA		     mov     bp, es:[bp+6]
SYSINIT:01CE		     cmp     es:[bp+0],	ax
SYSINIT:01D2		     jnz     short FoundBad70
SYSINIT:01D4		     mov     ax, es
SYSINIT:01D6		     mov     ss, ax
SYSINIT:01D8		     assume ss:SEG0070
SYSINIT:01D8		     mov     sp, bp
SYSINIT:01DA		     pushf
SYSINIT:01DB		     call    cs:Old70
SYSINIT:01E0		     mov     bp, sp
SYSINIT:01E2		     mov     bp, es:[bp+0]
SYSINIT:01E6		     mov     ss, word ptr es:[bp+4]
SYSINIT:01EA		     assume ss:nothing
SYSINIT:01EA		     mov     sp, es:[bp+2]
SYSINIT:01EE		     mov     byte ptr es:[bp+0], 0
SYSINIT:01F3		     mov     cs:NextEntry, bp
SYSINIT:01F8		     pop     es
SYSINIT:01F9		     assume es:nothing
SYSINIT:01F9		     pop     bp
SYSINIT:01FA		     pop     ax
SYSINIT:01FB		     iret
SYSINIT:01FC ; ---------------------------------------------------------------------------
SYSINIT:01FC
SYSINIT:01FC NotFree70:				     ; CODE XREF: SYSINIT:01B8j
SYSINIT:01FC		     cmp     al, 1
SYSINIT:01FE		     jz	     short FindNext70
SYSINIT:0200
SYSINIT:0200 loc_3690:
SYSINIT:0200		     xchg    al, es:[bp+0]
SYSINIT:0204
SYSINIT:0204 FindNext70:			     ; CODE XREF: SYSINIT:01FEj
SYSINIT:0204					     ; SYSINIT:020Ej ...
SYSINIT:0204		     call    longpath
SYSINIT:0207
SYSINIT:0207 loc_3697:
SYSINIT:0207		     jmp     short Found70
SYSINIT:0209 ; ---------------------------------------------------------------------------
SYSINIT:0209
SYSINIT:0209 FoundBad70:			     ; CODE XREF: SYSINIT:01D2j
SYSINIT:0209		     cmp     bp, cs:FirstEntry
SYSINIT:020E		     jb	     short FindNext70
SYSINIT:0210		     mov     bp, ax
SYSINIT:0212		     mov     byte ptr es:[bp+0], 3
SYSINIT:0217		     jmp     short FindNext70
SYSINIT:0219 ; ---------------------------------------------------------------------------
SYSINIT:0219
SYSINIT:0219 Int0A:
SYSINIT:0219		     jmp     short Entry_Int0A_Stk
SYSINIT:0219 ; ---------------------------------------------------------------------------
SYSINIT:021B Old0A	     dd	0		     ; DATA XREF: SYSINIT:0263r
SYSINIT:021F		     dw	424Bh
SYSINIT:0221 FirstFlag0A     db	0
SYSINIT:0222 ; ---------------------------------------------------------------------------
SYSINIT:0222		     jmp     short IntRet_0A
SYSINIT:0222 ; ---------------------------------------------------------------------------
SYSINIT:0224		     db	7 dup(0)
SYSINIT:022B ; ---------------------------------------------------------------------------
SYSINIT:022B
SYSINIT:022B Entry_Int0A_Stk:			     ; CODE XREF: SYSINIT:Int0Aj
SYSINIT:022B		     push    ax
SYSINIT:022C		     push    bp
SYSINIT:022D		     push    es
SYSINIT:022E		     mov     es, cs:Stacks_Seg
SYSINIT:0233		     assume es:SEG0070
SYSINIT:0233		     mov     bp, cs:NextEntry
SYSINIT:0238		     mov     al, 1
SYSINIT:023A		     xchg    al, es:[bp+0]
SYSINIT:023E		     cmp     al, 0
SYSINIT:0240		     jnz     short NotFree0A
SYSINIT:0242		     sub     cs:NextEntry, 8
SYSINIT:0248
SYSINIT:0248 Found0A:				     ; CODE XREF: SYSINIT:028Fj
SYSINIT:0248		     mov     es:[bp+2],	sp
SYSINIT:024C		     mov     word ptr es:[bp+4], ss
SYSINIT:0250		     mov     ax, bp
SYSINIT:0252		     mov     bp, es:[bp+6]
SYSINIT:0256		     cmp     es:[bp+0],	ax
SYSINIT:025A		     jnz     short FoundBad0A
SYSINIT:025C		     mov     ax, es
SYSINIT:025E		     mov     ss, ax
SYSINIT:0260		     assume ss:SEG0070
SYSINIT:0260		     mov     sp, bp
SYSINIT:0262		     pushf
SYSINIT:0263		     call    cs:Old0A
SYSINIT:0268		     mov     bp, sp
SYSINIT:026A		     mov     bp, es:[bp+0]
SYSINIT:026E		     mov     ss, word ptr es:[bp+4]
SYSINIT:0272		     assume ss:nothing
SYSINIT:0272		     mov     sp, es:[bp+2]
SYSINIT:0276		     mov     byte ptr es:[bp+0], 0
SYSINIT:027B		     mov     cs:NextEntry, bp
SYSINIT:0280		     pop     es
SYSINIT:0281		     assume es:nothing
SYSINIT:0281		     pop     bp
SYSINIT:0282		     pop     ax
SYSINIT:0283
SYSINIT:0283 IntRet_0A:				     ; CODE XREF: SYSINIT:0222j
SYSINIT:0283		     iret
SYSINIT:0284 ; ---------------------------------------------------------------------------
SYSINIT:0284
SYSINIT:0284 NotFree0A:				     ; CODE XREF: SYSINIT:0240j
SYSINIT:0284		     cmp     al, 1
SYSINIT:0286		     jz	     short FindNext0A
SYSINIT:0288		     xchg    al, es:[bp+0]
SYSINIT:028C
SYSINIT:028C FindNext0A:			     ; CODE XREF: SYSINIT:0286j
SYSINIT:028C					     ; SYSINIT:0296j ...
SYSINIT:028C		     call    longpath
SYSINIT:028F		     jmp     short Found0A
SYSINIT:0291 ; ---------------------------------------------------------------------------
SYSINIT:0291
SYSINIT:0291 FoundBad0A:			     ; CODE XREF: SYSINIT:025Aj
SYSINIT:0291		     cmp     bp, cs:FirstEntry
SYSINIT:0296		     jb	     short FindNext0A
SYSINIT:0298		     mov     bp, ax
SYSINIT:029A		     mov     byte ptr es:[bp+0], 3
SYSINIT:029F		     jmp     short FindNext0A
SYSINIT:02A1 ; ---------------------------------------------------------------------------
SYSINIT:02A1
SYSINIT:02A1 Int0B:
SYSINIT:02A1		     jmp     short Entry_Int0B_Stk
SYSINIT:02A1 ; ---------------------------------------------------------------------------
SYSINIT:02A3 Old0B	     dd	0		     ; DATA XREF: SYSINIT:02EBr
SYSINIT:02A7		     dw	424Bh
SYSINIT:02A9 FirstFlag0B     db	0
SYSINIT:02AA ; ---------------------------------------------------------------------------
SYSINIT:02AA		     jmp     short IntRet_0B
SYSINIT:02AA ; ---------------------------------------------------------------------------
SYSINIT:02AC		     db	7 dup(0)
SYSINIT:02B3 ; ---------------------------------------------------------------------------
SYSINIT:02B3
SYSINIT:02B3 Entry_Int0B_Stk:			     ; CODE XREF: SYSINIT:Int0Bj
SYSINIT:02B3		     push    ax
SYSINIT:02B4		     push    bp
SYSINIT:02B5		     push    es
SYSINIT:02B6		     mov     es, cs:Stacks_Seg
SYSINIT:02BB		     assume es:SEG0070
SYSINIT:02BB		     mov     bp, cs:NextEntry
SYSINIT:02C0		     mov     al, 1
SYSINIT:02C2		     xchg    al, es:[bp+0]
SYSINIT:02C6		     cmp     al, 0
SYSINIT:02C8		     jnz     short NotFree0B
SYSINIT:02CA		     sub     cs:NextEntry, 8
SYSINIT:02D0
SYSINIT:02D0 Found0B:				     ; CODE XREF: SYSINIT:0317j
SYSINIT:02D0		     mov     es:[bp+2],	sp
SYSINIT:02D4		     mov     word ptr es:[bp+4], ss
SYSINIT:02D8		     mov     ax, bp
SYSINIT:02DA		     mov     bp, es:[bp+6]
SYSINIT:02DE		     cmp     es:[bp+0],	ax
SYSINIT:02E2		     jnz     short FoundBad0B
SYSINIT:02E4		     mov     ax, es
SYSINIT:02E6		     mov     ss, ax
SYSINIT:02E8		     assume ss:SEG0070
SYSINIT:02E8		     mov     sp, bp
SYSINIT:02EA		     pushf
SYSINIT:02EB		     call    cs:Old0B
SYSINIT:02F0		     mov     bp, sp
SYSINIT:02F2		     mov     bp, es:[bp+0]
SYSINIT:02F6		     mov     ss, word ptr es:[bp+4]
SYSINIT:02FA		     assume ss:nothing
SYSINIT:02FA		     mov     sp, es:[bp+2]
SYSINIT:02FE		     mov     byte ptr es:[bp+0], 0
SYSINIT:0303		     mov     cs:NextEntry, bp
SYSINIT:0308		     pop     es
SYSINIT:0309		     assume es:nothing
SYSINIT:0309		     pop     bp
SYSINIT:030A		     pop     ax
SYSINIT:030B
SYSINIT:030B IntRet_0B:				     ; CODE XREF: SYSINIT:02AAj
SYSINIT:030B		     iret
SYSINIT:030C ; ---------------------------------------------------------------------------
SYSINIT:030C
SYSINIT:030C NotFree0B:				     ; CODE XREF: SYSINIT:02C8j
SYSINIT:030C		     cmp     al, 1
SYSINIT:030E		     jz	     short FindNext0B
SYSINIT:0310		     xchg    al, es:[bp+0]
SYSINIT:0314
SYSINIT:0314 FindNext0B:			     ; CODE XREF: SYSINIT:030Ej
SYSINIT:0314					     ; SYSINIT:031Ej ...
SYSINIT:0314		     call    longpath
SYSINIT:0317		     jmp     short Found0B
SYSINIT:0319 ; ---------------------------------------------------------------------------
SYSINIT:0319
SYSINIT:0319 FoundBad0B:			     ; CODE XREF: SYSINIT:02E2j
SYSINIT:0319		     cmp     bp, cs:FirstEntry
SYSINIT:031E		     jb	     short FindNext0B
SYSINIT:0320		     mov     bp, ax
SYSINIT:0322		     mov     byte ptr es:[bp+0], 3
SYSINIT:0327		     jmp     short FindNext0B
SYSINIT:0329 ; ---------------------------------------------------------------------------
SYSINIT:0329
SYSINIT:0329 Int0C:
SYSINIT:0329		     jmp     short Entry_Int0C_Stk
SYSINIT:0329 ; ---------------------------------------------------------------------------
SYSINIT:032B Old0C	     dd	0		     ; DATA XREF: SYSINIT:0373r
SYSINIT:032F		     dw	424Bh
SYSINIT:0331 FirstFlag0C     db	0
SYSINIT:0332 ; ---------------------------------------------------------------------------
SYSINIT:0332		     jmp     short IntRet_0C
SYSINIT:0332 ; ---------------------------------------------------------------------------
SYSINIT:0334		     db	7 dup(0)
SYSINIT:033B ; ---------------------------------------------------------------------------
SYSINIT:033B
SYSINIT:033B Entry_Int0C_Stk:			     ; CODE XREF: SYSINIT:Int0Cj
SYSINIT:033B		     push    ax
SYSINIT:033C		     push    bp
SYSINIT:033D		     push    es
SYSINIT:033E		     mov     es, cs:Stacks_Seg
SYSINIT:0343		     assume es:SEG0070
SYSINIT:0343		     mov     bp, cs:NextEntry
SYSINIT:0348		     mov     al, 1
SYSINIT:034A		     xchg    al, es:[bp+0]
SYSINIT:034E		     cmp     al, 0
SYSINIT:0350		     jnz     short NotFree0C
SYSINIT:0352		     sub     cs:NextEntry, 8
SYSINIT:0358
SYSINIT:0358 Found0C:				     ; CODE XREF: SYSINIT:039Fj
SYSINIT:0358		     mov     es:[bp+2],	sp
SYSINIT:035C		     mov     word ptr es:[bp+4], ss
SYSINIT:0360		     mov     ax, bp
SYSINIT:0362		     mov     bp, es:[bp+6]
SYSINIT:0366		     cmp     es:[bp+0],	ax
SYSINIT:036A		     jnz     short FoundBad0C
SYSINIT:036C		     mov     ax, es
SYSINIT:036E		     mov     ss, ax
SYSINIT:0370		     assume ss:SEG0070
SYSINIT:0370		     mov     sp, bp
SYSINIT:0372		     pushf
SYSINIT:0373		     call    cs:Old0C
SYSINIT:0378		     mov     bp, sp
SYSINIT:037A		     mov     bp, es:[bp+0]
SYSINIT:037E		     mov     ss, word ptr es:[bp+4]
SYSINIT:0382		     assume ss:nothing
SYSINIT:0382		     mov     sp, es:[bp+2]
SYSINIT:0386		     mov     byte ptr es:[bp+0], 0
SYSINIT:038B		     mov     cs:NextEntry, bp
SYSINIT:0390		     pop     es
SYSINIT:0391		     assume es:nothing
SYSINIT:0391		     pop     bp
SYSINIT:0392		     pop     ax
SYSINIT:0393
SYSINIT:0393 IntRet_0C:				     ; CODE XREF: SYSINIT:0332j
SYSINIT:0393		     iret
SYSINIT:0394 ; ---------------------------------------------------------------------------
SYSINIT:0394
SYSINIT:0394 NotFree0C:				     ; CODE XREF: SYSINIT:0350j
SYSINIT:0394		     cmp     al, 1
SYSINIT:0396		     jz	     short FindNext0C
SYSINIT:0398		     xchg    al, es:[bp+0]
SYSINIT:039C
SYSINIT:039C FindNext0C:			     ; CODE XREF: SYSINIT:0396j
SYSINIT:039C					     ; SYSINIT:03A6j ...
SYSINIT:039C		     call    longpath
SYSINIT:039F		     jmp     short Found0C
SYSINIT:03A1 ; ---------------------------------------------------------------------------
SYSINIT:03A1
SYSINIT:03A1 FoundBad0C:			     ; CODE XREF: SYSINIT:036Aj
SYSINIT:03A1		     cmp     bp, cs:FirstEntry
SYSINIT:03A6		     jb	     short FindNext0C
SYSINIT:03A8		     mov     bp, ax
SYSINIT:03AA		     mov     byte ptr es:[bp+0], 3
SYSINIT:03AF		     jmp     short FindNext0C
SYSINIT:03B1 ; ---------------------------------------------------------------------------
SYSINIT:03B1		     jmp     short loc_3853
SYSINIT:03B1 ; ---------------------------------------------------------------------------
SYSINIT:03B3 dword_3843	     dd	0		     ; DATA XREF: SYSINIT:03FBr
SYSINIT:03B7		     dw	424Bh
SYSINIT:03B9 byte_3849	     db	0
SYSINIT:03BA ; ---------------------------------------------------------------------------
SYSINIT:03BA		     jmp     short locret_38AB
SYSINIT:03BA ; ---------------------------------------------------------------------------
SYSINIT:03BC		     db	7 dup(0)
SYSINIT:03C3 ; ---------------------------------------------------------------------------
SYSINIT:03C3
SYSINIT:03C3 loc_3853:				     ; CODE XREF: SYSINIT:03B1j
SYSINIT:03C3		     push    ax
SYSINIT:03C4		     push    bp
SYSINIT:03C5		     push    es
SYSINIT:03C6		     mov     es, cs:Stacks_Seg
SYSINIT:03CB		     assume es:SEG0070
SYSINIT:03CB		     mov     bp, cs:NextEntry
SYSINIT:03D0		     mov     al, 1
SYSINIT:03D2		     xchg    al, es:[bp+0]
SYSINIT:03D6		     cmp     al, 0
SYSINIT:03D8		     jnz     short loc_38AC
SYSINIT:03DA		     sub     cs:NextEntry, 8
SYSINIT:03E0
SYSINIT:03E0 loc_3870:				     ; CODE XREF: SYSINIT:0427j
SYSINIT:03E0		     mov     es:[bp+2],	sp
SYSINIT:03E4		     mov     word ptr es:[bp+4], ss
SYSINIT:03E8		     mov     ax, bp
SYSINIT:03EA		     mov     bp, es:[bp+6]
SYSINIT:03EE		     cmp     es:[bp+0],	ax
SYSINIT:03F2		     jnz     short loc_38B9
SYSINIT:03F4		     mov     ax, es
SYSINIT:03F6		     mov     ss, ax
SYSINIT:03F8		     assume ss:SEG0070
SYSINIT:03F8		     mov     sp, bp
SYSINIT:03FA		     pushf
SYSINIT:03FB		     call    cs:dword_3843
SYSINIT:0400		     mov     bp, sp
SYSINIT:0402		     mov     bp, es:[bp+0]
SYSINIT:0406		     mov     ss, word ptr es:[bp+4]
SYSINIT:040A		     assume ss:nothing
SYSINIT:040A		     mov     sp, es:[bp+2]
SYSINIT:040E		     mov     byte ptr es:[bp+0], 0
SYSINIT:0413		     mov     cs:NextEntry, bp
SYSINIT:0418		     pop     es
SYSINIT:0419		     assume es:nothing
SYSINIT:0419		     pop     bp
SYSINIT:041A		     pop     ax
SYSINIT:041B
SYSINIT:041B locret_38AB:			     ; CODE XREF: SYSINIT:03BAj
SYSINIT:041B		     iret
SYSINIT:041C ; ---------------------------------------------------------------------------
SYSINIT:041C
SYSINIT:041C loc_38AC:				     ; CODE XREF: SYSINIT:03D8j
SYSINIT:041C		     cmp     al, 1
SYSINIT:041E		     jz	     short loc_38B4
SYSINIT:0420		     xchg    al, es:[bp+0]
SYSINIT:0424
SYSINIT:0424 loc_38B4:				     ; CODE XREF: SYSINIT:041Ej
SYSINIT:0424					     ; SYSINIT:042Ej ...
SYSINIT:0424		     call    longpath
SYSINIT:0427		     jmp     short loc_3870
SYSINIT:0429 ; ---------------------------------------------------------------------------
SYSINIT:0429
SYSINIT:0429 loc_38B9:				     ; CODE XREF: SYSINIT:03F2j
SYSINIT:0429		     cmp     bp, cs:FirstEntry
SYSINIT:042E		     jb	     short loc_38B4
SYSINIT:0430		     mov     bp, ax
SYSINIT:0432		     mov     byte ptr es:[bp+0], 3
SYSINIT:0437		     jmp     short loc_38B4
SYSINIT:0439 ; ---------------------------------------------------------------------------
SYSINIT:0439		     jmp     short loc_38DB
SYSINIT:0439 ; ---------------------------------------------------------------------------
SYSINIT:043B dword_38CB	     dd	0		     ; DATA XREF: SYSINIT:0483r
SYSINIT:043F		     db	 4Bh ; K
SYSINIT:0440		     db	 42h ; B
SYSINIT:0441		     db	0
SYSINIT:0442 ; ---------------------------------------------------------------------------
SYSINIT:0442		     jmp     short locret_3933
SYSINIT:0442 ; ---------------------------------------------------------------------------
SYSINIT:0444		     db	7 dup(0)
SYSINIT:044B ; ---------------------------------------------------------------------------
SYSINIT:044B
SYSINIT:044B loc_38DB:				     ; CODE XREF: SYSINIT:0439j
SYSINIT:044B		     push    ax
SYSINIT:044C		     push    bp
SYSINIT:044D		     push    es
SYSINIT:044E		     mov     es, cs:Stacks_Seg
SYSINIT:0453		     assume es:SEG0070
SYSINIT:0453		     mov     bp, cs:NextEntry
SYSINIT:0458		     mov     al, 1
SYSINIT:045A		     xchg    al, es:[bp+0]
SYSINIT:045E		     cmp     al, 0
SYSINIT:0460		     jnz     short loc_3934
SYSINIT:0462		     sub     cs:NextEntry, 8
SYSINIT:0468
SYSINIT:0468 loc_38F8:				     ; CODE XREF: SYSINIT:04AFj
SYSINIT:0468		     mov     es:[bp+2],	sp
SYSINIT:046C		     mov     word ptr es:[bp+4], ss
SYSINIT:0470		     mov     ax, bp
SYSINIT:0472		     mov     bp, es:[bp+6]
SYSINIT:0476		     cmp     es:[bp+0],	ax
SYSINIT:047A		     jnz     short loc_3941
SYSINIT:047C		     mov     ax, es
SYSINIT:047E		     mov     ss, ax
SYSINIT:0480		     assume ss:SEG0070
SYSINIT:0480		     mov     sp, bp
SYSINIT:0482		     pushf
SYSINIT:0483		     call    cs:dword_38CB
SYSINIT:0488		     mov     bp, sp
SYSINIT:048A		     mov     bp, es:[bp+0]
SYSINIT:048E		     mov     ss, word ptr es:[bp+4]
SYSINIT:0492		     assume ss:nothing
SYSINIT:0492		     mov     sp, es:[bp+2]
SYSINIT:0496		     mov     byte ptr es:[bp+0], 0
SYSINIT:049B		     mov     cs:NextEntry, bp
SYSINIT:04A0		     pop     es
SYSINIT:04A1		     assume es:nothing
SYSINIT:04A1		     pop     bp
SYSINIT:04A2		     pop     ax
SYSINIT:04A3
SYSINIT:04A3 locret_3933:			     ; CODE XREF: SYSINIT:0442j
SYSINIT:04A3		     iret
SYSINIT:04A4 ; ---------------------------------------------------------------------------
SYSINIT:04A4
SYSINIT:04A4 loc_3934:				     ; CODE XREF: SYSINIT:0460j
SYSINIT:04A4		     cmp     al, 1
SYSINIT:04A6		     jz	     short loc_393C
SYSINIT:04A8		     xchg    al, es:[bp+0]
SYSINIT:04AC
SYSINIT:04AC loc_393C:				     ; CODE XREF: SYSINIT:04A6j
SYSINIT:04AC					     ; SYSINIT:04B6j ...
SYSINIT:04AC		     call    longpath
SYSINIT:04AF		     jmp     short loc_38F8
SYSINIT:04B1 ; ---------------------------------------------------------------------------
SYSINIT:04B1
SYSINIT:04B1 loc_3941:				     ; CODE XREF: SYSINIT:047Aj
SYSINIT:04B1		     cmp     bp, cs:FirstEntry
SYSINIT:04B6		     jb	     short loc_393C
SYSINIT:04B8		     mov     bp, ax
SYSINIT:04BA		     mov     byte ptr es:[bp+0], 3
SYSINIT:04BF		     jmp     short loc_393C
SYSINIT:04C1 ; ---------------------------------------------------------------------------
SYSINIT:04C1		     jmp     short loc_3963
SYSINIT:04C1 ; ---------------------------------------------------------------------------
SYSINIT:04C3 dword_3953	     dd	0		     ; DATA XREF: SYSINIT:050Br
SYSINIT:04C7		     dw	424Bh
SYSINIT:04C9		     db	0
SYSINIT:04CA ; ---------------------------------------------------------------------------
SYSINIT:04CA		     jmp     short locret_39BB
SYSINIT:04CA ; ---------------------------------------------------------------------------
SYSINIT:04CC		     db	7 dup(0)
SYSINIT:04D3 ; ---------------------------------------------------------------------------
SYSINIT:04D3
SYSINIT:04D3 loc_3963:				     ; CODE XREF: SYSINIT:04C1j
SYSINIT:04D3		     push    ax
SYSINIT:04D4		     push    bp
SYSINIT:04D5		     push    es
SYSINIT:04D6		     mov     es, cs:Stacks_Seg
SYSINIT:04DB		     assume es:SEG0070
SYSINIT:04DB		     mov     bp, cs:NextEntry
SYSINIT:04E0		     mov     al, 1
SYSINIT:04E2		     xchg    al, es:[bp+0]
SYSINIT:04E6		     cmp     al, 0
SYSINIT:04E8		     jnz     short loc_39BC
SYSINIT:04EA		     sub     cs:NextEntry, 8
SYSINIT:04F0
SYSINIT:04F0 loc_3980:				     ; CODE XREF: SYSINIT:0537j
SYSINIT:04F0		     mov     es:[bp+2],	sp
SYSINIT:04F4		     mov     word ptr es:[bp+4], ss
SYSINIT:04F8		     mov     ax, bp
SYSINIT:04FA		     mov     bp, es:[bp+6]
SYSINIT:04FE		     cmp     es:[bp+0],	ax
SYSINIT:0502		     jnz     short loc_39C9
SYSINIT:0504		     mov     ax, es
SYSINIT:0506		     mov     ss, ax
SYSINIT:0508		     assume ss:SEG0070
SYSINIT:0508		     mov     sp, bp
SYSINIT:050A		     pushf
SYSINIT:050B		     call    cs:dword_3953
SYSINIT:0510		     mov     bp, sp
SYSINIT:0512		     mov     bp, es:[bp+0]
SYSINIT:0516		     mov     ss, word ptr es:[bp+4]
SYSINIT:051A		     assume ss:nothing
SYSINIT:051A		     mov     sp, es:[bp+2]
SYSINIT:051E		     mov     byte ptr es:[bp+0], 0
SYSINIT:0523		     mov     cs:NextEntry, bp
SYSINIT:0528		     pop     es
SYSINIT:0529		     assume es:nothing
SYSINIT:0529		     pop     bp
SYSINIT:052A		     pop     ax
SYSINIT:052B
SYSINIT:052B locret_39BB:			     ; CODE XREF: SYSINIT:04CAj
SYSINIT:052B		     iret
SYSINIT:052C ; ---------------------------------------------------------------------------
SYSINIT:052C
SYSINIT:052C loc_39BC:				     ; CODE XREF: SYSINIT:04E8j
SYSINIT:052C		     cmp     al, 1
SYSINIT:052E		     jz	     short loc_39C4
SYSINIT:0530		     xchg    al, es:[bp+0]
SYSINIT:0534
SYSINIT:0534 loc_39C4:				     ; CODE XREF: SYSINIT:052Ej
SYSINIT:0534					     ; SYSINIT:053Ej ...
SYSINIT:0534		     call    longpath
SYSINIT:0537		     jmp     short loc_3980
SYSINIT:0539 ; ---------------------------------------------------------------------------
SYSINIT:0539
SYSINIT:0539 loc_39C9:				     ; CODE XREF: SYSINIT:0502j
SYSINIT:0539		     cmp     bp, cs:FirstEntry
SYSINIT:053E		     jb	     short loc_39C4
SYSINIT:0540		     mov     bp, ax
SYSINIT:0542		     mov     byte ptr es:[bp+0], 3
SYSINIT:0547		     jmp     short loc_39C4
SYSINIT:0549 ; ---------------------------------------------------------------------------
SYSINIT:0549		     jmp     short loc_39EB
SYSINIT:0549 ; ---------------------------------------------------------------------------
SYSINIT:054B dword_39DB	     dd	0		     ; DATA XREF: SYSINIT:0593r
SYSINIT:054F		     dw	424Bh
SYSINIT:0551		     db	0
SYSINIT:0552 ; ---------------------------------------------------------------------------
SYSINIT:0552		     jmp     short locret_3A43
SYSINIT:0552 ; ---------------------------------------------------------------------------
SYSINIT:0554		     db	7 dup(0)
SYSINIT:055B ; ---------------------------------------------------------------------------
SYSINIT:055B
SYSINIT:055B loc_39EB:				     ; CODE XREF: SYSINIT:0549j
SYSINIT:055B		     push    ax
SYSINIT:055C		     push    bp
SYSINIT:055D		     push    es
SYSINIT:055E		     mov     es, cs:Stacks_Seg
SYSINIT:0563		     assume es:SEG0070
SYSINIT:0563		     mov     bp, cs:NextEntry
SYSINIT:0568		     mov     al, 1
SYSINIT:056A		     xchg    al, es:[bp+0]
SYSINIT:056E		     cmp     al, 0
SYSINIT:0570		     jnz     short loc_3A44
SYSINIT:0572		     sub     cs:NextEntry, 8
SYSINIT:0578
SYSINIT:0578 loc_3A08:				     ; CODE XREF: SYSINIT:05BFj
SYSINIT:0578		     mov     es:[bp+2],	sp
SYSINIT:057C		     mov     word ptr es:[bp+4], ss
SYSINIT:0580		     mov     ax, bp
SYSINIT:0582		     mov     bp, es:[bp+6]
SYSINIT:0586		     cmp     es:[bp+0],	ax
SYSINIT:058A		     jnz     short loc_3A51
SYSINIT:058C		     mov     ax, es
SYSINIT:058E		     mov     ss, ax
SYSINIT:0590		     assume ss:SEG0070
SYSINIT:0590		     mov     sp, bp
SYSINIT:0592		     pushf
SYSINIT:0593		     call    cs:dword_39DB
SYSINIT:0598		     mov     bp, sp
SYSINIT:059A		     mov     bp, es:[bp+0]
SYSINIT:059E		     mov     ss, word ptr es:[bp+4]
SYSINIT:05A2		     assume ss:nothing
SYSINIT:05A2		     mov     sp, es:[bp+2]
SYSINIT:05A6		     mov     byte ptr es:[bp+0], 0
SYSINIT:05AB		     mov     cs:NextEntry, bp
SYSINIT:05B0		     pop     es
SYSINIT:05B1		     assume es:nothing
SYSINIT:05B1		     pop     bp
SYSINIT:05B2		     pop     ax
SYSINIT:05B3
SYSINIT:05B3 locret_3A43:			     ; CODE XREF: SYSINIT:0552j
SYSINIT:05B3		     iret
SYSINIT:05B4 ; ---------------------------------------------------------------------------
SYSINIT:05B4
SYSINIT:05B4 loc_3A44:				     ; CODE XREF: SYSINIT:0570j
SYSINIT:05B4		     cmp     al, 1
SYSINIT:05B6		     jz	     short loc_3A4C
SYSINIT:05B8		     xchg    al, es:[bp+0]
SYSINIT:05BC
SYSINIT:05BC loc_3A4C:				     ; CODE XREF: SYSINIT:05B6j
SYSINIT:05BC					     ; SYSINIT:05C6j ...
SYSINIT:05BC		     call    longpath
SYSINIT:05BF		     jmp     short loc_3A08
SYSINIT:05C1 ; ---------------------------------------------------------------------------
SYSINIT:05C1
SYSINIT:05C1 loc_3A51:				     ; CODE XREF: SYSINIT:058Aj
SYSINIT:05C1		     cmp     bp, cs:FirstEntry
SYSINIT:05C6		     jb	     short loc_3A4C
SYSINIT:05C8		     mov     bp, ax
SYSINIT:05CA		     mov     byte ptr es:[bp+0], 3
SYSINIT:05CF
SYSINIT:05CF loc_3A5F:
SYSINIT:05CF		     jmp     short loc_3A4C
SYSINIT:05D1 ; ---------------------------------------------------------------------------
SYSINIT:05D1
SYSINIT:05D1 loc_3A61:
SYSINIT:05D1		     jmp     short loc_3A73
SYSINIT:05D1 ; ---------------------------------------------------------------------------
SYSINIT:05D3 dword_3A63	     dd	0		     ; DATA XREF: SYSINIT:061Br
SYSINIT:05D7		     dw	424Bh
SYSINIT:05D9		     db	0
SYSINIT:05DA ; ---------------------------------------------------------------------------
SYSINIT:05DA
SYSINIT:05DA loc_3A6A:
SYSINIT:05DA		     jmp     short locret_3ACB
SYSINIT:05DA ; ---------------------------------------------------------------------------
SYSINIT:05DC		     db	7 dup(0)
SYSINIT:05E3 ; ---------------------------------------------------------------------------
SYSINIT:05E3
SYSINIT:05E3 loc_3A73:				     ; CODE XREF: SYSINIT:loc_3A61j
SYSINIT:05E3		     push    ax
SYSINIT:05E4		     push    bp
SYSINIT:05E5		     push    es
SYSINIT:05E6		     mov     es, cs:Stacks_Seg
SYSINIT:05EB		     assume es:SEG0070
SYSINIT:05EB		     mov     bp, cs:NextEntry
SYSINIT:05F0		     mov     al, 1
SYSINIT:05F2		     xchg    al, es:[bp+0]
SYSINIT:05F6		     cmp     al, 0
SYSINIT:05F8
SYSINIT:05F8 loc_3A88:
SYSINIT:05F8		     jnz     short loc_3ACC
SYSINIT:05FA		     sub     cs:NextEntry, 8
SYSINIT:0600
SYSINIT:0600 loc_3A90:				     ; CODE XREF: SYSINIT:0647j
SYSINIT:0600		     mov     es:[bp+2],	sp
SYSINIT:0604		     mov     word ptr es:[bp+4], ss
SYSINIT:0608		     mov     ax, bp
SYSINIT:060A		     mov     bp, es:[bp+6]
SYSINIT:060E		     cmp     es:[bp+0],	ax
SYSINIT:0612		     jnz     short loc_3AD9
SYSINIT:0614		     mov     ax, es
SYSINIT:0616		     mov     ss, ax
SYSINIT:0618		     assume ss:SEG0070
SYSINIT:0618		     mov     sp, bp
SYSINIT:061A		     pushf
SYSINIT:061B		     call    cs:dword_3A63
SYSINIT:0620		     mov     bp, sp
SYSINIT:0622		     mov     bp, es:[bp+0]
SYSINIT:0626		     mov     ss, word ptr es:[bp+4]
SYSINIT:062A		     assume ss:nothing
SYSINIT:062A		     mov     sp, es:[bp+2]
SYSINIT:062E		     mov     byte ptr es:[bp+0], 0
SYSINIT:0633		     mov     cs:NextEntry, bp
SYSINIT:0638		     pop     es
SYSINIT:0639		     assume es:nothing
SYSINIT:0639		     pop     bp
SYSINIT:063A		     pop     ax
SYSINIT:063B
SYSINIT:063B locret_3ACB:			     ; CODE XREF: SYSINIT:loc_3A6Aj
SYSINIT:063B		     iret
SYSINIT:063C ; ---------------------------------------------------------------------------
SYSINIT:063C
SYSINIT:063C loc_3ACC:				     ; CODE XREF: SYSINIT:loc_3A88j
SYSINIT:063C		     cmp     al, 1
SYSINIT:063E		     jz	     short loc_3AD4
SYSINIT:0640		     xchg    al, es:[bp+0]
SYSINIT:0644
SYSINIT:0644 loc_3AD4:				     ; CODE XREF: SYSINIT:063Ej
SYSINIT:0644					     ; SYSINIT:064Ej ...
SYSINIT:0644		     call    longpath
SYSINIT:0647		     jmp     short loc_3A90
SYSINIT:0649 ; ---------------------------------------------------------------------------
SYSINIT:0649
SYSINIT:0649 loc_3AD9:				     ; CODE XREF: SYSINIT:0612j
SYSINIT:0649		     cmp     bp, cs:FirstEntry
SYSINIT:064E		     jb	     short loc_3AD4
SYSINIT:0650		     mov     bp, ax
SYSINIT:0652		     mov     byte ptr es:[bp+0], 3
SYSINIT:0657		     jmp     short loc_3AD4
SYSINIT:0659 ; ---------------------------------------------------------------------------
SYSINIT:0659		     jmp     short loc_3AFB
SYSINIT:0659 ; ---------------------------------------------------------------------------
SYSINIT:065B dword_3AEB	     dd	0		     ; DATA XREF: SYSINIT:06A3r
SYSINIT:065F		     dw	424Bh
SYSINIT:0661		     db	0
SYSINIT:0662 ; ---------------------------------------------------------------------------
SYSINIT:0662		     jmp     short locret_3B53
SYSINIT:0662 ; ---------------------------------------------------------------------------
SYSINIT:0664		     db	7 dup(0)
SYSINIT:066B ; ---------------------------------------------------------------------------
SYSINIT:066B
SYSINIT:066B loc_3AFB:				     ; CODE XREF: SYSINIT:0659j
SYSINIT:066B		     push    ax
SYSINIT:066C		     push    bp
SYSINIT:066D		     push    es
SYSINIT:066E		     mov     es, cs:Stacks_Seg
SYSINIT:0673		     assume es:SEG0070
SYSINIT:0673		     mov     bp, cs:NextEntry
SYSINIT:0678		     mov     al, 1
SYSINIT:067A		     xchg    al, es:[bp+0]
SYSINIT:067E		     cmp     al, 0
SYSINIT:0680		     jnz     short loc_3B54
SYSINIT:0682		     sub     cs:NextEntry, 8
SYSINIT:0688
SYSINIT:0688 loc_3B18:				     ; CODE XREF: SYSINIT:06CFj
SYSINIT:0688		     mov     es:[bp+2],	sp
SYSINIT:068C		     mov     word ptr es:[bp+4], ss
SYSINIT:0690		     mov     ax, bp
SYSINIT:0692		     mov     bp, es:[bp+6]
SYSINIT:0696		     cmp     es:[bp+0],	ax
SYSINIT:069A		     jnz     short loc_3B61
SYSINIT:069C		     mov     ax, es
SYSINIT:069E		     mov     ss, ax
SYSINIT:06A0		     assume ss:SEG0070
SYSINIT:06A0		     mov     sp, bp
SYSINIT:06A2		     pushf
SYSINIT:06A3		     call    cs:dword_3AEB
SYSINIT:06A8		     mov     bp, sp
SYSINIT:06AA		     mov     bp, es:[bp+0]
SYSINIT:06AE		     mov     ss, word ptr es:[bp+4]
SYSINIT:06B2		     assume ss:nothing
SYSINIT:06B2		     mov     sp, es:[bp+2]
SYSINIT:06B6		     mov     byte ptr es:[bp+0], 0
SYSINIT:06BB		     mov     cs:NextEntry, bp
SYSINIT:06C0		     pop     es
SYSINIT:06C1		     assume es:nothing
SYSINIT:06C1		     pop     bp
SYSINIT:06C2		     pop     ax
SYSINIT:06C3
SYSINIT:06C3 locret_3B53:			     ; CODE XREF: SYSINIT:0662j
SYSINIT:06C3		     iret
SYSINIT:06C4 ; ---------------------------------------------------------------------------
SYSINIT:06C4
SYSINIT:06C4 loc_3B54:				     ; CODE XREF: SYSINIT:0680j
SYSINIT:06C4		     cmp     al, 1
SYSINIT:06C6		     jz	     short loc_3B5C
SYSINIT:06C8		     xchg    al, es:[bp+0]
SYSINIT:06CC
SYSINIT:06CC loc_3B5C:				     ; CODE XREF: SYSINIT:06C6j
SYSINIT:06CC					     ; SYSINIT:06D6j ...
SYSINIT:06CC		     call    longpath
SYSINIT:06CF		     jmp     short loc_3B18
SYSINIT:06D1 ; ---------------------------------------------------------------------------
SYSINIT:06D1
SYSINIT:06D1 loc_3B61:				     ; CODE XREF: SYSINIT:069Aj
SYSINIT:06D1		     cmp     bp, cs:FirstEntry
SYSINIT:06D6		     jb	     short loc_3B5C
SYSINIT:06D8		     mov     bp, ax
SYSINIT:06DA		     mov     byte ptr es:[bp+0], 3
SYSINIT:06DF		     jmp     short loc_3B5C
SYSINIT:06E1 ; ---------------------------------------------------------------------------
SYSINIT:06E1		     jmp     short loc_3B83
SYSINIT:06E1 ; ---------------------------------------------------------------------------
SYSINIT:06E3 dword_3B73	     dd	0		     ; DATA XREF: SYSINIT:072Br
SYSINIT:06E7		     dw	424Bh
SYSINIT:06E9		     db	0
SYSINIT:06EA ; ---------------------------------------------------------------------------
SYSINIT:06EA		     jmp     short locret_3BDB
SYSINIT:06EA ; ---------------------------------------------------------------------------
SYSINIT:06EC		     db	7 dup(0)
SYSINIT:06F3 ; ---------------------------------------------------------------------------
SYSINIT:06F3
SYSINIT:06F3 loc_3B83:				     ; CODE XREF: SYSINIT:06E1j
SYSINIT:06F3		     push    ax
SYSINIT:06F4		     push    bp
SYSINIT:06F5		     push    es
SYSINIT:06F6		     mov     es, cs:Stacks_Seg
SYSINIT:06FB		     assume es:SEG0070
SYSINIT:06FB		     mov     bp, cs:NextEntry
SYSINIT:0700
SYSINIT:0700 loc_3B90:
SYSINIT:0700		     mov     al, 1
SYSINIT:0702		     xchg    al, es:[bp+0]
SYSINIT:0706		     cmp     al, 0
SYSINIT:0708		     jnz     short loc_3BDC
SYSINIT:070A		     sub     cs:NextEntry, 8
SYSINIT:0710
SYSINIT:0710 loc_3BA0:				     ; CODE XREF: SYSINIT:0757j
SYSINIT:0710		     mov     es:[bp+2],	sp
SYSINIT:0714		     mov     word ptr es:[bp+4], ss
SYSINIT:0718		     mov     ax, bp
SYSINIT:071A		     mov     bp, es:[bp+6]
SYSINIT:071E		     cmp     es:[bp+0],	ax
SYSINIT:0722		     jnz     short loc_3BE9
SYSINIT:0724		     mov     ax, es
SYSINIT:0726		     mov     ss, ax
SYSINIT:0728		     assume ss:SEG0070
SYSINIT:0728		     mov     sp, bp
SYSINIT:072A		     pushf
SYSINIT:072B		     call    cs:dword_3B73
SYSINIT:0730		     mov     bp, sp
SYSINIT:0732		     mov     bp, es:[bp+0]
SYSINIT:0736		     mov     ss, word ptr es:[bp+4]
SYSINIT:073A		     assume ss:nothing
SYSINIT:073A		     mov     sp, es:[bp+2]
SYSINIT:073E		     mov     byte ptr es:[bp+0], 0
SYSINIT:0743		     mov     cs:NextEntry, bp
SYSINIT:0748		     pop     es
SYSINIT:0749		     assume es:nothing
SYSINIT:0749		     pop     bp
SYSINIT:074A		     pop     ax
SYSINIT:074B
SYSINIT:074B locret_3BDB:			     ; CODE XREF: SYSINIT:06EAj
SYSINIT:074B		     iret
SYSINIT:074C ; ---------------------------------------------------------------------------
SYSINIT:074C
SYSINIT:074C loc_3BDC:				     ; CODE XREF: SYSINIT:0708j
SYSINIT:074C		     cmp     al, 1
SYSINIT:074E		     jz	     short loc_3BE4
SYSINIT:0750		     xchg    al, es:[bp+0]
SYSINIT:0754
SYSINIT:0754 loc_3BE4:				     ; CODE XREF: SYSINIT:074Ej
SYSINIT:0754					     ; SYSINIT:075Ej ...
SYSINIT:0754		     call    longpath
SYSINIT:0757		     jmp     short loc_3BA0
SYSINIT:0759 ; ---------------------------------------------------------------------------
SYSINIT:0759
SYSINIT:0759 loc_3BE9:				     ; CODE XREF: SYSINIT:0722j
SYSINIT:0759		     cmp     bp, cs:FirstEntry
SYSINIT:075E		     jb	     short loc_3BE4
SYSINIT:0760		     mov     bp, ax
SYSINIT:0762		     mov     byte ptr es:[bp+0], 3
SYSINIT:0767		     jmp     short loc_3BE4
SYSINIT:0769
SYSINIT:0769 ; =============== S U B R O U T I N E =======================================
SYSINIT:0769
SYSINIT:0769
SYSINIT:0769 longpath	     proc near		     ; CODE XREF: SYSINIT:FindNext02p
SYSINIT:0769					     ; SYSINIT:FindNext08p ...
SYSINIT:0769		     mov     bp, cs:LastEntry
SYSINIT:076E
SYSINIT:076E lploopp:				     ; CODE XREF: longpath+28j
SYSINIT:076E		     cmp     byte ptr es:[bp+0], 0
SYSINIT:0773		     jnz     short inuse
SYSINIT:0775		     mov     al, 1
SYSINIT:0777		     xchg    al, es:[bp+0]
SYSINIT:077B		     cmp     al, 0
SYSINIT:077D		     jz	     short found
SYSINIT:077F		     cmp     al, 1
SYSINIT:0781		     jz	     short inuse
SYSINIT:0783		     mov     es:[bp+0],	al
SYSINIT:0787
SYSINIT:0787 inuse:				     ; CODE XREF: longpath+Aj
SYSINIT:0787					     ; longpath+18j
SYSINIT:0787		     cmp     bp, cs:FirstEntry
SYSINIT:078C		     jz	     short fatal
SYSINIT:078E		     sub     bp, 8
SYSINIT:0791		     jmp     short lploopp
SYSINIT:0793 ; ---------------------------------------------------------------------------
SYSINIT:0793
SYSINIT:0793 found:				     ; CODE XREF: longpath+14j
SYSINIT:0793		     retn
SYSINIT:0794 ; ---------------------------------------------------------------------------
SYSINIT:0794
SYSINIT:0794 fatal:				     ; CODE XREF: longpath+23j
SYSINIT:0794		     push    ds
SYSINIT:0795		     mov     ax, 0F000h
SYSINIT:0798		     mov     ds, ax
SYSINIT:079A		     assume ds:nothing
SYSINIT:079A		     cmp     byte ptr ds:0FFFEh, 0F9h ;	'ù'
SYSINIT:079F		     pop     ds
SYSINIT:07A0		     assume ds:nothing
SYSINIT:07A0		     jnz     short skip_nmis
SYSINIT:07A2		     mov     al, 7
SYSINIT:07A4		     out     72h, al
SYSINIT:07A6
SYSINIT:07A6 skip_nmis:				     ; CODE XREF: longpath+37j
SYSINIT:07A6		     cli
SYSINIT:07A7		     mov     al, 0FFh
SYSINIT:07A9		     out     21h, al	     ; Interrupt controller, 8259A.
SYSINIT:07AB		     out     0A1h, al	     ; Interrupt Controller #2,	8259A
SYSINIT:07AD		     mov     si, cs
SYSINIT:07AF		     mov     ds, si
SYSINIT:07B1		     assume ds:SYSINIT
SYSINIT:07B1		     mov     si, offset	fatal_msg ; "\r\n\a\r\nInternal	stack overflow\r\nSy"...
SYSINIT:07B4
SYSINIT:07B4 fatal_loop:			     ; CODE XREF: longpath:loc_3C4Fj
SYSINIT:07B4		     lodsb
SYSINIT:07B5		     cmp     al, '$'
SYSINIT:07B7		     jz	     short fatal_done
SYSINIT:07B9		     mov     bl, 7
SYSINIT:07BB		     mov     ah, 0Eh
SYSINIT:07BD		     int     10h	     ; - VIDEO - WRITE CHARACTER AND ADVANCE CURSOR (TTY WRITE)
SYSINIT:07BD					     ; AL = character, BH = display page (alpha	modes)
SYSINIT:07BD					     ; BL = foreground color (graphics modes)
SYSINIT:07BF
SYSINIT:07BF loc_3C4F:
SYSINIT:07BF		     jmp     short fatal_loop
SYSINIT:07C1 ; ---------------------------------------------------------------------------
SYSINIT:07C1
SYSINIT:07C1 fatal_done:			     ; CODE XREF: longpath+4Ej
SYSINIT:07C1					     ; longpath:fatal_donej
SYSINIT:07C1		     jmp     short fatal_done
SYSINIT:07C1 longpath	     endp
SYSINIT:07C1
SYSINIT:07C1 ; ---------------------------------------------------------------------------
SYSINIT:07C3 fatal_msg	     db	0Dh,0Ah		     ; DATA XREF: longpath+48o
SYSINIT:07C3		     db	7,0Dh,0Ah
SYSINIT:07C3		     db	'Internal stack overflow',0Dh,0Ah
SYSINIT:07C3		     db	'System halted',0Dh,0Ah,'$'
SYSINIT:07F1 ; ---------------------------------------------------------------------------
SYSINIT:07F1
SYSINIT:07F1 _SYSINIT:
SYSINIT:07F1		     jmp     GOINIT
SYSINIT:07F1 ; ---------------------------------------------------------------------------
SYSINIT:07F4 DOSINFO	     dw	0		     ; DATA XREF: SYSINIT:0972w
SYSINIT:07F4					     ; SYSINIT:098Er ...
SYSINIT:07F6 CURRENT_DOS_LOCATION dw 0		     ; DATA XREF: SEG0070:2C40w
SYSINIT:07F6					     ; SYSINIT:SYSINr ...
SYSINIT:07F8 ENTRY_POINT     dw	0		     ; DATA XREF: SYSINIT:LOCSTACKr
SYSINIT:07F8					     ; DOCONF+10Fw ...
SYSINIT:07FA FINAL_DOS_LOCATION	dw 0		     ; DATA XREF: SEG0070:2F23w
SYSINIT:07FA					     ; SEG0070:2F27w ...
SYSINIT:07FC DEVICE_LIST     dd	0		     ; DATA XREF: SEG0070:2C16w
SYSINIT:07FC					     ; SYSINIT:0957r ...
SYSINIT:0800 SYSI_Country    dd	0		     ; DATA XREF: SYSINIT:0982w
SYSINIT:0800					     ; DOCONF:TRYQ_Set_for_DOSr ...
SYSINIT:0804 STACK_COUNT     dw	9		     ; DATA XREF: ENDFILE:DoInstallStackr
SYSINIT:0804					     ; ENDFILE+242r ...
SYSINIT:0806 STACK_SIZE	     dw	128		     ; DATA XREF: ENDFILE+23Er
SYSINIT:0806					     ; StackInit+11r ...
SYSINIT:0808 STACK_ADDR	     dw	0		     ; DATA XREF: ENDFILE+1F1r
SYSINIT:0808					     ; ENDFILE+232w ...
SYSINIT:080A STACK_ADDR_SEG  dw	0		     ; DATA XREF: ENDFILE+238w
SYSINIT:080A					     ; StackInit+20r
SYSINIT:080C MEMORY_SIZE     dw	1		     ; DATA XREF: SEG0070:2C20w
SYSINIT:080C					     ; SYSINIT:0922r ...
SYSINIT:080E DEFAULT_DRIVE   db	0		     ; DATA XREF: SEG0070:2C25w
SYSINIT:080E					     ; SYSINIT:0847o ...
SYSINIT:080F BUFFERS	     dw	0FFFFh		     ; DATA XREF: ENDFILE+C7r
SYSINIT:080F					     ; ENDFILE:DoDefaultBuffw ...
SYSINIT:0811 FILES	     db	8		     ; DATA XREF: SYSINIT:09FFr
SYSINIT:0811					     ; ENDFILE+Dr ...
SYSINIT:0812 FCBS	     db	4		     ; DATA XREF: ENDFILE+5Fr
SYSINIT:0812					     ; DOCONF+500w ...
SYSINIT:0813 KEEP	     db	0		     ; DATA XREF: ENDFILE+7Ar
SYSINIT:0813					     ; DOCONF+518w
SYSINIT:0814 NUM_CDS	     db	5		     ; DATA XREF: ENDFILE+1ABr
SYSINIT:0814					     ; ENDFILE+1B2r ...
SYSINIT:0815 CONFBOT	     dw	0		     ; DATA XREF: SYSINIT:09A0w
SYSINIT:0815					     ; TEMPCDS+17r ...
SYSINIT:0817 ALLOCLIM	     dw	0		     ; DATA XREF: TEMPCDS+1Dw
SYSINIT:0817					     ; ENDFILE+4w ...
SYSINIT:0819 FOOSTRNG	     db	'A:\',0              ; DATA XREF: FOSETr
SYSINIT:0819					     ; FOSET+Aw ...
SYSINIT:081D COMMAND_LINE    db	2		     ; DATA XREF: SYSINIT:0843o
SYSINIT:081D					     ; SYSINIT:0AAEw
SYSINIT:081E COMMAND_LINE_1  db	0		     ; DATA XREF: SYSINIT:GOSETo
SYSINIT:081E					     ; DOCONF+7w ...
SYSINIT:081F		     db	'P'
SYSINIT:0820		     db	29 dup(0)
SYSINIT:083D ZERO	     db	0		     ; DATA XREF: SYSINIT:084Bo
SYSINIT:083E SEPCHR	     db	0		     ; DATA XREF: DOCONF+458w
SYSINIT:083E					     ; DOCONF+460w ...
SYSINIT:083F Sys_Model_Byte  db	0FFh		     ; DATA XREF: SYSINIT:0903w
SYSINIT:083F					     ; SYSINIT:0919w ...
SYSINIT:0840 Sys_Scnd_Model_Byte db 0		     ; DATA XREF: SYSINIT:090Bw
SYSINIT:0840					     ; ENDFILE+1F8r
SYSINIT:0841 COMEXE	     dw	0		     ; DATA XREF: SYSINIT:0B11o
SYSINIT:0843		     dw	offset COMMAND_LINE
SYSINIT:0845		     dw	3B9h
SYSINIT:0847		     dw	offset DEFAULT_DRIVE
SYSINIT:0849		     dw	3B9h
SYSINIT:084B		     dw	offset ZERO
SYSINIT:084D		     dw	3B9h
SYSINIT:084F COUNT	     dw	0		     ; DATA XREF: DOCONF+2Ew
SYSINIT:084F					     ; DOCONF+3Ar ...
SYSINIT:0851 CHRPTR	     dw	0		     ; DATA XREF: DOCONF+306w
SYSINIT:0851					     ; DOCONF+330w ...
SYSINIT:0853 CntryFileHandle dw	0		     ; DATA XREF: DOCONF+386w
SYSINIT:0853					     ; DOCONF:CoffJ4r
SYSINIT:0855 MEMLO	     dw	0		     ; DATA XREF: ENDFILE+17r
SYSINIT:0855					     ; ENDFILE+30r ...
SYSINIT:0857 MEMHI	     dw	0		     ; DATA XREF: SYSINIT:09E4w
SYSINIT:0857					     ; ENDFILE+1Cr ...
SYSINIT:0859 LDOFF	     dw	0		     ; DATA XREF: DOCONF+118w
SYSINIT:085B AREA	     dw	0		     ; DATA XREF: SYSINIT:09E1w
SYSINIT:085B					     ; ENDFILE+25Er
SYSINIT:085D PACKET	     db	22		     ; DATA XREF: CALLDEV+15o
SYSINIT:085E		     db	12 dup(0)
SYSINIT:086A UNITCOUNT	     db	0		     ; DATA XREF: DOCONF:ISBLOCKr
SYSINIT:086B BREAK_ADDR	     dw	0		     ; DATA XREF: SET_BREAK+Cr
SYSINIT:086B					     ; SET_BREAK+18r
SYSINIT:086D BREAK_ADDR_SEG  dw	0		     ; DATA XREF: DOCONF+1AFr
SYSINIT:086D					     ; SET_BREAK+1r
SYSINIT:086F BPB_ADDR	     dd	0		     ; DATA XREF: DOCONF+102w
SYSINIT:086F					     ; DOCONF+229r ...
SYSINIT:0873 DriveNumber     db	0		     ; DATA XREF: SYSINIT:0997w
SYSINIT:0873					     ; DOCONF+224w
SYSINIT:0874 TempStack	     db	128 dup(0)
SYSINIT:08F4 ; ---------------------------------------------------------------------------
SYSINIT:08F4
SYSINIT:08F4 GOINIT:				     ; CODE XREF: SYSINIT:_SYSINITj
SYSINIT:08F4		     mov     ah, 0C0h ;	'À'
SYSINIT:08F6		     int     15h
SYSINIT:08F8		     jb	     short No_ROM_Config
SYSINIT:08FA		     cmp     ah, 0
SYSINIT:08FD		     jnz     short No_ROM_Config
SYSINIT:08FF		     mov     al, es:[bx+2]
SYSINIT:0903		     mov     cs:Sys_Model_Byte,	al
SYSINIT:0907		     mov     al, es:[bx+3]
SYSINIT:090B		     mov     cs:Sys_Scnd_Model_Byte, al
SYSINIT:090F		     jmp     short Move_Myself
SYSINIT:0911 ; ---------------------------------------------------------------------------
SYSINIT:0911
SYSINIT:0911 No_ROM_Config:			     ; CODE XREF: SYSINIT:08F8j
SYSINIT:0911					     ; SYSINIT:08FDj
SYSINIT:0911		     mov     ax, 0F000h
SYSINIT:0914		     mov     ds, ax
SYSINIT:0916		     assume ds:nothing
SYSINIT:0916		     mov     al, ds:0FFFEh
SYSINIT:0919		     mov     cs:Sys_Model_Byte,	al
SYSINIT:091D
SYSINIT:091D Move_Myself:			     ; CODE XREF: SYSINIT:090Fj
SYSINIT:091D		     cld
SYSINIT:091E		     xor     si, si
SYSINIT:0920		     mov     di, si
SYSINIT:0922		     mov     cx, cs:MEMORY_SIZE
SYSINIT:0927		     mov     ax, cs
SYSINIT:0929		     mov     ds, ax
SYSINIT:092B		     assume ds:SYSINIT
SYSINIT:092B		     mov     ax, 1FB6h
SYSINIT:092E		     call    ParaRound
SYSINIT:0931		     sub     cx, ax
SYSINIT:0933		     mov     es, cx
SYSINIT:0935		     mov     cx, 1FB7h
SYSINIT:0938		     shr     cx, 1
SYSINIT:093A		     rep movsw
SYSINIT:093C		     push    es
SYSINIT:093D		     mov     ax, offset	SYSIN
SYSINIT:0940		     push    ax
SYSINIT:0941		     retf
SYSINIT:0942 ; ---------------------------------------------------------------------------
SYSINIT:0942
SYSINIT:0942 SYSIN:				     ; DATA XREF: SYSINIT:093Do
SYSINIT:0942		     mov     ax, es:CURRENT_DOS_LOCATION
SYSINIT:0946		     mov     ds, ax
SYSINIT:0948		     assume ds:nothing
SYSINIT:0948		     mov     ax, es:FINAL_DOS_LOCATION
SYSINIT:094C		     mov     es, ax
SYSINIT:094E		     xor     si, si
SYSINIT:0950		     mov     di, si
SYSINIT:0952		     mov     cx, 5000h
SYSINIT:0955		     rep movsw
SYSINIT:0957		     lds     si, cs:DEVICE_LIST
SYSINIT:095C		     mov     dx, cs:MEMORY_SIZE
SYSINIT:0961		     cli
SYSINIT:0962		     mov     ax, cs
SYSINIT:0964		     mov     ss, ax
SYSINIT:0966		     assume ss:SYSINIT
SYSINIT:0966		     mov     sp, offset	LOCSTACK
SYSINIT:0969		     sti
SYSINIT:096A
SYSINIT:096A LOCSTACK:				     ; DATA XREF: SYSINIT:0966o
SYSINIT:096A		     call    dword ptr ss:ENTRY_POINT
SYSINIT:096F		     mov     ax, es:[di]
SYSINIT:0972		     mov     ss:DOSINFO, ax
SYSINIT:0976		     mov     ax, es:[di+2]
SYSINIT:097A		     mov     ss:CURRENT_DOS_LOCATION, ax
SYSINIT:097E		     mov     ax, es:[di+4]
SYSINIT:0982		     mov     word ptr ss:SYSI_Country, ax
SYSINIT:0986		     mov     ax, es:[di+6]
SYSINIT:098A		     mov     word ptr ss:SYSI_Country+2, ax
SYSINIT:098E		     les     di, dword ptr ss:DOSINFO
SYSINIT:0993		     mov     al, es:[di+20h]
SYSINIT:0997		     mov     ss:DriveNumber, al
SYSINIT:099B		     mov     ax, cs
SYSINIT:099D		     sub     ax, 11h
SYSINIT:09A0		     mov     ss:CONFBOT, ax
SYSINIT:09A4		     push    ds
SYSINIT:09A5		     push    cs
SYSINIT:09A6		     pop     ds
SYSINIT:09A7		     assume ds:SYSINIT
SYSINIT:09A7		     call    TEMPCDS
SYSINIT:09AA		     pop     ds
SYSINIT:09AB		     assume ds:nothing
SYSINIT:09AB		     call    far ptr 70h:1AA6h
SYSINIT:09B0		     sti
SYSINIT:09B1		     cld
SYSINIT:09B2		     mov     bx, cs
SYSINIT:09B4		     sub     bx, 10h
SYSINIT:09B7		     mov     es, bx
SYSINIT:09B9		     assume es:nothing
SYSINIT:09B9		     xor     si, si
SYSINIT:09BB		     mov     di, si
SYSINIT:09BD		     mov     cx, 80h ; ''
SYSINIT:09C0		     rep movsw
SYSINIT:09C2		     mov     word ptr es:36h, es
SYSINIT:09C7		     mov     ah, 50h
SYSINIT:09C9		     int     21h	     ; DOS - 2+	internal - SET PSP SEGMENT
SYSINIT:09C9					     ; BX = segment address of new PSP
SYSINIT:09CB		     push    ds
SYSINIT:09CC		     push    cs
SYSINIT:09CD		     pop     ds
SYSINIT:09CE		     assume ds:SYSINIT
SYSINIT:09CE		     mov     dx, offset	INT24
SYSINIT:09D1		     mov     ax, 2524h
SYSINIT:09D4		     int     21h	     ; DOS - SET INTERRUPT VECTOR
SYSINIT:09D4					     ; AL = interrupt number
SYSINIT:09D4					     ; DS:DX = new vector to be	used for specified interrupt
SYSINIT:09D6		     mov     bx, 0FFFFh
SYSINIT:09D9		     mov     ah, 48h
SYSINIT:09DB		     int     21h	     ; DOS - 2+	- ALLOCATE MEMORY
SYSINIT:09DB					     ; BX = number of 16-byte paragraphs desired
SYSINIT:09DD		     mov     ah, 48h
SYSINIT:09DF		     int     21h	     ; DOS - 2+	- ALLOCATE MEMORY
SYSINIT:09DF					     ; BX = number of 16-byte paragraphs desired
SYSINIT:09E1		     mov     AREA, ax
SYSINIT:09E4		     mov     MEMHI, ax
SYSINIT:09E7		     pop     ds
SYSINIT:09E8		     assume ds:nothing
SYSINIT:09E8		     mov     dl, ss:DEFAULT_DRIVE
SYSINIT:09ED		     or	     dl, dl
SYSINIT:09EF		     jz	     short NODRVSET
SYSINIT:09F1		     dec     dl
SYSINIT:09F3		     mov     ah, 0Eh
SYSINIT:09F5		     int     21h	     ; DOS - SELECT DISK
SYSINIT:09F5					     ; DL = new	default	drive number (0	= A, 1 = B, etc.)
SYSINIT:09F5					     ; Return: AL = number of logical drives
SYSINIT:09F7
SYSINIT:09F7 NODRVSET:				     ; CODE XREF: SYSINIT:09EFj
SYSINIT:09F7		     call    DOCONF
SYSINIT:09FA		     call    ENDFILE
SYSINIT:09FD		     push    cs
SYSINIT:09FE		     pop     ds
SYSINIT:09FF		     assume ds:SYSINIT
SYSINIT:09FF		     mov     al, FILES
SYSINIT:0A02		     xor     ah, ah
SYSINIT:0A04		     mov     cx, ax
SYSINIT:0A06		     xor     bx, bx
SYSINIT:0A08		     mov     ah, 3Eh
SYSINIT:0A0A		     int     21h	     ; DOS - 2+	- CLOSE	A FILE WITH HANDLE
SYSINIT:0A0A					     ; BX = file handle
SYSINIT:0A0C		     mov     bx, 2
SYSINIT:0A0F
SYSINIT:0A0F RCCLLOOP:				     ; CODE XREF: SYSINIT:0A14j
SYSINIT:0A0F		     mov     ah, 3Eh
SYSINIT:0A11		     int     21h	     ; DOS - 2+	- CLOSE	A FILE WITH HANDLE
SYSINIT:0A11					     ; BX = file handle
SYSINIT:0A13		     inc     bx
SYSINIT:0A14		     loop    RCCLLOOP
SYSINIT:0A16		     mov     dx, offset	CONDEV ; "CON"
SYSINIT:0A19		     mov     al, 2
SYSINIT:0A1B		     mov     ah, 3Dh ; '='
SYSINIT:0A1D		     stc
SYSINIT:0A1E		     int     21h	     ; DOS - 2+	- OPEN DISK FILE WITH HANDLE
SYSINIT:0A1E					     ; DS:DX ->	ASCIZ filename
SYSINIT:0A1E					     ; AL = access mode
SYSINIT:0A1E					     ; 2 - read	& write
SYSINIT:0A20		     jnb     short GOAUX
SYSINIT:0A22		     call    BADFIL
SYSINIT:0A25		     jmp     short goaux2
SYSINIT:0A27 ; ---------------------------------------------------------------------------
SYSINIT:0A27
SYSINIT:0A27 GOAUX:				     ; CODE XREF: SYSINIT:0A20j
SYSINIT:0A27		     push    ax
SYSINIT:0A28		     mov     bx, 1
SYSINIT:0A2B		     mov     ah, 3Eh
SYSINIT:0A2D		     int     21h	     ; DOS - 2+	- CLOSE	A FILE WITH HANDLE
SYSINIT:0A2D					     ; BX = file handle
SYSINIT:0A2F		     pop     ax
SYSINIT:0A30		     mov     bx, ax
SYSINIT:0A32		     mov     ah, 45h
SYSINIT:0A34		     int     21h	     ; DOS - 2+	- CREATE DUPLICATE HANDLE (DUP)
SYSINIT:0A34					     ; BX = file handle	to duplicate
SYSINIT:0A36		     mov     ah, 45h
SYSINIT:0A38		     int     21h	     ; DOS - 2+	- CREATE DUPLICATE HANDLE (DUP)
SYSINIT:0A38					     ; BX = file handle	to duplicate
SYSINIT:0A3A
SYSINIT:0A3A goaux2:				     ; CODE XREF: SYSINIT:0A25j
SYSINIT:0A3A		     mov     dx, offset	AUXDEV ; "AUX"
SYSINIT:0A3D		     mov     al, 2
SYSINIT:0A3F		     call    OPEN_DEV
SYSINIT:0A42		     mov     dx, offset	PRNDEV ; "PRN"
SYSINIT:0A45		     mov     al, 1
SYSINIT:0A47		     call    OPEN_DEV
SYSINIT:0A4A		     push    dx
SYSINIT:0A4B		     mov     dx, 2F2h
SYSINIT:0A4E		     out     dx, al
SYSINIT:0A4F		     mov     dx, 2F3h
SYSINIT:0A52		     out     dx, al
SYSINIT:0A53		     mov     dx, 2F4h
SYSINIT:0A56		     out     dx, al
SYSINIT:0A57		     mov     dx, 2F5h
SYSINIT:0A5A		     out     dx, al
SYSINIT:0A5B		     mov     dx, 2F6h
SYSINIT:0A5E		     out     dx, al
SYSINIT:0A5F		     mov     dx, 2F7h
SYSINIT:0A62		     out     dx, al
SYSINIT:0A63		     pop     dx
SYSINIT:0A64		     push    ds
SYSINIT:0A65		     mov     ax, 0F000h
SYSINIT:0A68		     mov     ds, ax
SYSINIT:0A6A		     assume ds:nothing
SYSINIT:0A6A		     cmp     byte ptr ds:0FFFEh, 0FCh ;	'ü'
SYSINIT:0A6F		     pop     ds
SYSINIT:0A70		     assume ds:nothing
SYSINIT:0A70		     jz	     short startrearm
SYSINIT:0A72		     push    es
SYSINIT:0A73		     push    bx
SYSINIT:0A74		     mov     ah, 0C0h ;	'À'
SYSINIT:0A76		     int     15h
SYSINIT:0A78		     jb	     short REARMDONE
SYSINIT:0A7A		     test    byte ptr es:[bx+5], 40h
SYSINIT:0A7F		     jz	     short REARMDONE
SYSINIT:0A81
SYSINIT:0A81 startrearm:			     ; CODE XREF: SYSINIT:0A70j
SYSINIT:0A81		     push    dx
SYSINIT:0A82		     mov     dx, 6F2h
SYSINIT:0A85		     out     dx, al
SYSINIT:0A86		     mov     dx, 6F3h
SYSINIT:0A89		     out     dx, al
SYSINIT:0A8A		     mov     dx, 6F4h
SYSINIT:0A8D		     out     dx, al
SYSINIT:0A8E		     mov     dx, 6F6h
SYSINIT:0A91		     out     dx, al
SYSINIT:0A92		     mov     dx, 6F7h
SYSINIT:0A95		     out     dx, al
SYSINIT:0A96		     pop     dx
SYSINIT:0A97
SYSINIT:0A97 REARMDONE:				     ; CODE XREF: SYSINIT:0A78j
SYSINIT:0A97					     ; SYSINIT:0A7Fj
SYSINIT:0A97		     pop     bx
SYSINIT:0A98		     pop     es
SYSINIT:0A99		     assume es:nothing
SYSINIT:0A99
SYSINIT:0A99 GOSET:
SYSINIT:0A99		     mov     si, offset	COMMAND_LINE_1
SYSINIT:0A9C		     push    ds
SYSINIT:0A9D		     pop     es
SYSINIT:0A9E		     mov     di, si
SYSINIT:0AA0		     mov     cl, 0FFh
SYSINIT:0AA2
SYSINIT:0AA2 COMTRANLP:				     ; CODE XREF: SYSINIT:0AA8j
SYSINIT:0AA2		     inc     cl
SYSINIT:0AA4		     lodsb
SYSINIT:0AA5		     stosb
SYSINIT:0AA6		     or	     al, al
SYSINIT:0AA8		     jnz     short COMTRANLP
SYSINIT:0AAA		     dec     di
SYSINIT:0AAB		     mov     al, 0Dh
SYSINIT:0AAD		     stosb
SYSINIT:0AAE		     mov     ds:COMMAND_LINE, cl
SYSINIT:0AB2		     mov     dx, offset	COMMND ; "\\COMMAND.COM"
SYSINIT:0AB5		     push    dx
SYSINIT:0AB6		     mov     bx, 0FFFFh
SYSINIT:0AB9		     mov     ah, 48h
SYSINIT:0ABB		     int     21h	     ; DOS - 2+	- ALLOCATE MEMORY
SYSINIT:0ABB					     ; BX = number of 16-byte paragraphs desired
SYSINIT:0ABD		     mov     ah, 48h
SYSINIT:0ABF		     int     21h	     ; DOS - 2+	- ALLOCATE MEMORY
SYSINIT:0ABF					     ; BX = number of 16-byte paragraphs desired
SYSINIT:0AC1		     jb	     short MEMERRJX
SYSINIT:0AC3		     mov     es, ax
SYSINIT:0AC5		     assume es:nothing
SYSINIT:0AC5		     mov     ah, 49h
SYSINIT:0AC7		     int     21h	     ; DOS - 2+	- FREE MEMORY
SYSINIT:0AC7					     ; ES = segment address of area to be freed
SYSINIT:0AC9		     mov     bp, bx
SYSINIT:0ACB		     mov     bx, ds:MEMORY_SIZE
SYSINIT:0ACF		     mov     ax, cs
SYSINIT:0AD1		     sub     bx, ax
SYSINIT:0AD3		     add     bx, 11h
SYSINIT:0AD6		     sub     bp, bx
SYSINIT:0AD8		     jb	     short MEMERRJX
SYSINIT:0ADA		     mov     ax, 3D00h
SYSINIT:0ADD		     stc
SYSINIT:0ADE		     int     21h	     ; DOS - 2+	- OPEN DISK FILE WITH HANDLE
SYSINIT:0ADE					     ; DS:DX ->	ASCIZ filename
SYSINIT:0ADE					     ; AL = access mode
SYSINIT:0ADE					     ; 0 - read
SYSINIT:0AE0		     jb	     short COMERR
SYSINIT:0AE2		     mov     bx, ax
SYSINIT:0AE4		     xor     cx, cx
SYSINIT:0AE6		     xor     dx, dx
SYSINIT:0AE8		     mov     ax, 4202h
SYSINIT:0AEB		     stc
SYSINIT:0AEC		     int     21h	     ; DOS - 2+	- MOVE FILE READ/WRITE POINTER (LSEEK)
SYSINIT:0AEC					     ; AL = method: offset from	end of file
SYSINIT:0AEE		     jb	     short COMERR
SYSINIT:0AF0		     add     ax, 0Fh
SYSINIT:0AF3		     adc     dx, 0
SYSINIT:0AF6		     mov     cl, 4
SYSINIT:0AF8		     shr     ax, cl
SYSINIT:0AFA		     mov     cl, 0Ch
SYSINIT:0AFC		     shl     dx, cl
SYSINIT:0AFE		     or	     ax, dx
SYSINIT:0B00		     add     ax, 10h
SYSINIT:0B03		     cmp     ax, bp
SYSINIT:0B05		     jb	     short OKLD
SYSINIT:0B07
SYSINIT:0B07 MEMERRJX:				     ; CODE XREF: SYSINIT:0AC1j
SYSINIT:0B07					     ; SYSINIT:0AD8j
SYSINIT:0B07		     jmp     MEM_ERR
SYSINIT:0B0A ; ---------------------------------------------------------------------------
SYSINIT:0B0A
SYSINIT:0B0A OKLD:				     ; CODE XREF: SYSINIT:0B05j
SYSINIT:0B0A		     mov     ah, 3Eh
SYSINIT:0B0C		     int     21h	     ; DOS - 2+	- CLOSE	A FILE WITH HANDLE
SYSINIT:0B0C					     ; BX = file handle
SYSINIT:0B0E		     pop     dx
SYSINIT:0B0F		     push    cs
SYSINIT:0B10		     pop     es
SYSINIT:0B11		     assume es:SYSINIT
SYSINIT:0B11		     mov     bx, offset	COMEXE
SYSINIT:0B14		     mov     word ptr [bx+4], cs
SYSINIT:0B17		     mov     word ptr [bx+8], cs
SYSINIT:0B1A		     mov     word ptr [bx+0Ch],	cs
SYSINIT:0B1D		     xor     ax, ax
SYSINIT:0B1F		     mov     ah, 4Bh ; 'K'
SYSINIT:0B21		     stc
SYSINIT:0B22		     int     21h	     ; DOS - 2+	- LOAD OR EXECUTE (EXEC)
SYSINIT:0B22					     ; DS:DX ->	ASCIZ filename
SYSINIT:0B22					     ; ES:BX ->	parameter block
SYSINIT:0B22					     ; AL = subfunc: load & execute program
SYSINIT:0B24
SYSINIT:0B24 COMERR:				     ; CODE XREF: SYSINIT:0AE0j
SYSINIT:0B24					     ; SYSINIT:0AEEj
SYSINIT:0B24		     mov     dx, offset	BADCOM ; "Command Interpreter"
SYSINIT:0B27		     call    BADFIL
SYSINIT:0B2A ; START OF	FUNCTION CHUNK FOR ROUND
SYSINIT:0B2A
SYSINIT:0B2A STALL:				     ; CODE XREF: ROUND:STALLj
SYSINIT:0B2A					     ; ROUND+2Aj
SYSINIT:0B2A		     jmp     short STALL
SYSINIT:0B2A ; END OF FUNCTION CHUNK FOR ROUND
SYSINIT:0B2C
SYSINIT:0B2C ; =============== S U B R O U T I N E =======================================
SYSINIT:0B2C
SYSINIT:0B2C
SYSINIT:0B2C TEMPCDS	     proc near		     ; CODE XREF: SYSINIT:09A7p
SYSINIT:0B2C					     ; DOCONF+49p ...
SYSINIT:0B2C		     les     di, dword ptr ds:DOSINFO
SYSINIT:0B30		     assume es:nothing
SYSINIT:0B30		     mov     cl, es:[di+20h]
SYSINIT:0B34		     xor     ch, ch
SYSINIT:0B36		     mov     es:[di+21h], cl
SYSINIT:0B3A		     mov     al, cl
SYSINIT:0B3C		     mov     ah, 81
SYSINIT:0B3E		     mul     ah
SYSINIT:0B40		     call    ParaRound
SYSINIT:0B43		     mov     si, ds:CONFBOT
SYSINIT:0B47		     sub     si, ax
SYSINIT:0B49		     mov     ds:ALLOCLIM, si
SYSINIT:0B4D		     mov     es:[di+18h], si
SYSINIT:0B51		     mov     ax, si
SYSINIT:0B53		     mov     word ptr es:[di+16h], 0
SYSINIT:0B59		     lds     si, es:[di]
SYSINIT:0B5C		     mov     es, ax
SYSINIT:0B5E		     xor     di, di
SYSINIT:0B5E TEMPCDS	     endp
SYSINIT:0B5E
SYSINIT:0B60
SYSINIT:0B60 ; =============== S U B R O U T I N E =======================================
SYSINIT:0B60
SYSINIT:0B60
SYSINIT:0B60 FOSET	     proc near		     ; CODE XREF: FOSET+3Dj
SYSINIT:0B60					     ; ENDFILE+1E5p
SYSINIT:0B60		     mov     ax, word ptr ss:FOOSTRNG ;	"A:\\"
SYSINIT:0B64		     stosw
SYSINIT:0B65		     mov     ax, word ptr ss:FOOSTRNG+2
SYSINIT:0B69		     stosw
SYSINIT:0B6A		     inc     byte ptr ss:FOOSTRNG ; "A:\\"
SYSINIT:0B6F		     xor     ax, ax
SYSINIT:0B71		     push    cx
SYSINIT:0B72		     mov     cx, 3Fh ; '?'
SYSINIT:0B75		     rep stosb
SYSINIT:0B77		     cmp     si, 0FFFFh
SYSINIT:0B7A		     jnz     short NORMCDS
SYSINIT:0B7C		     xor     ax, ax
SYSINIT:0B7E		     mov     cl, 3
SYSINIT:0B80		     rep stosw
SYSINIT:0B82		     pop     cx
SYSINIT:0B83		     jmp     short FINDCDS
SYSINIT:0B85 ; ---------------------------------------------------------------------------
SYSINIT:0B85
SYSINIT:0B85 NORMCDS:				     ; CODE XREF: FOSET+1Aj
SYSINIT:0B85		     pop     cx
SYSINIT:0B86		     mov     ax, 4000h
SYSINIT:0B89		     stosw
SYSINIT:0B8A		     mov     ax, si
SYSINIT:0B8C		     stosw
SYSINIT:0B8D		     mov     ax, ds
SYSINIT:0B8F		     stosw
SYSINIT:0B90		     lds     si, [si+18h]
SYSINIT:0B93
SYSINIT:0B93 FINDCDS:				     ; CODE XREF: FOSET+23j
SYSINIT:0B93		     mov     ax, 0FFFFh
SYSINIT:0B96		     stosw
SYSINIT:0B97		     stosw
SYSINIT:0B98		     stosw
SYSINIT:0B99		     mov     ax, 2
SYSINIT:0B9C		     stosw
SYSINIT:0B9D		     loop    FOSET
SYSINIT:0B9F		     mov     byte ptr ss:FOOSTRNG, 'A' ; "A:\\"
SYSINIT:0BA5		     retn
SYSINIT:0BA5 FOSET	     endp
SYSINIT:0BA5
SYSINIT:0BA6
SYSINIT:0BA6 ; =============== S U B R O U T I N E =======================================
SYSINIT:0BA6
SYSINIT:0BA6
SYSINIT:0BA6 ENDFILE	     proc near		     ; CODE XREF: SYSINIT:09FAp
SYSINIT:0BA6		     mov     ax, ss:CONFBOT
SYSINIT:0BAA		     mov     ss:ALLOCLIM, ax
SYSINIT:0BAE		     push    cs
SYSINIT:0BAF		     pop     ds
SYSINIT:0BB0		     assume ds:SYSINIT
SYSINIT:0BB0		     call    ROUND
SYSINIT:0BB3		     mov     al, ss:FILES
SYSINIT:0BB7		     sub     al, 5
SYSINIT:0BB9		     jbe     short DOFCBS
SYSINIT:0BBB		     xor     ah, ah
SYSINIT:0BBD		     mov     bx, ss:MEMLO
SYSINIT:0BC2		     mov     dx, ss:MEMHI
SYSINIT:0BC7		     lds     di, dword ptr ss:DOSINFO
SYSINIT:0BCC		     assume ds:nothing
SYSINIT:0BCC		     lds     di, [di+4]
SYSINIT:0BCF		     mov     [di], bx
SYSINIT:0BD1		     mov     [di+2], dx
SYSINIT:0BD4		     push    cs
SYSINIT:0BD5		     pop     ds
SYSINIT:0BD6		     assume ds:SYSINIT
SYSINIT:0BD6		     les     di, dword ptr ss:MEMLO
SYSINIT:0BDB		     mov     word ptr es:[di], 0FFFFh
SYSINIT:0BE0		     mov     es:[di+4],	ax
SYSINIT:0BE4		     mov     bl, 35h ; '5'
SYSINIT:0BE6		     mul     bl
SYSINIT:0BE8		     mov     cx, ax
SYSINIT:0BEA		     add     ss:MEMLO, ax
SYSINIT:0BEF		     mov     ax, 6
SYSINIT:0BF2		     add     ss:MEMLO, ax
SYSINIT:0BF7		     call    ROUND
SYSINIT:0BFA		     add     di, ax
SYSINIT:0BFC		     xor     ax, ax
SYSINIT:0BFE		     rep stosb
SYSINIT:0C00
SYSINIT:0C00 DOFCBS:				     ; CODE XREF: ENDFILE+13j
SYSINIT:0C00		     push    cs
SYSINIT:0C01		     pop     ds
SYSINIT:0C02		     call    ROUND
SYSINIT:0C05		     mov     al, ss:FCBS
SYSINIT:0C09		     xor     ah, ah
SYSINIT:0C0B		     mov     bx, ss:MEMLO
SYSINIT:0C10		     mov     dx, ss:MEMHI
SYSINIT:0C15		     lds     di, dword ptr ss:DOSINFO
SYSINIT:0C1A		     assume ds:nothing
SYSINIT:0C1A		     mov     [di+1Ah], bx
SYSINIT:0C1D		     mov     [di+1Ch], dx
SYSINIT:0C20		     mov     bl, cs:KEEP
SYSINIT:0C25		     xor     bh, bh
SYSINIT:0C27		     mov     [di+1Eh], bx
SYSINIT:0C2A		     push    cs
SYSINIT:0C2B		     pop     ds
SYSINIT:0C2C		     assume ds:SYSINIT
SYSINIT:0C2C		     les     di, dword ptr MEMLO
SYSINIT:0C30		     mov     word ptr es:[di], 0FFFFh
SYSINIT:0C35		     mov     es:[di+4],	ax
SYSINIT:0C39		     mov     bl, 35h ; '5'
SYSINIT:0C3B		     mov     cx, ax
SYSINIT:0C3D		     mul     bl
SYSINIT:0C3F		     add     MEMLO, ax
SYSINIT:0C43		     mov     ax, 6
SYSINIT:0C46		     add     MEMLO, ax
SYSINIT:0C4A		     call    ROUND
SYSINIT:0C4D		     add     di, ax
SYSINIT:0C4F		     mov     al, 41h ; 'A'
SYSINIT:0C51
SYSINIT:0C51 FillLoop:				     ; CODE XREF: ENDFILE+C5j
SYSINIT:0C51		     push    cx
SYSINIT:0C52		     mov     cx, 35h ; '5'
SYSINIT:0C55		     cld
SYSINIT:0C56		     rep stosb
SYSINIT:0C58		     mov     word ptr es:[di-35h], 0
SYSINIT:0C5E		     mov     word ptr es:[di-20h], 0
SYSINIT:0C64		     mov     word ptr es:[di-1Eh], 0
SYSINIT:0C6A		     pop     cx
SYSINIT:0C6B		     loop    FillLoop
SYSINIT:0C6D		     cmp     BUFFERS, 0FFFFh
SYSINIT:0C72		     jz	     short DoDefaultBuff
SYSINIT:0C74		     jmp     DOBUFF
SYSINIT:0C77 ; ---------------------------------------------------------------------------
SYSINIT:0C77
SYSINIT:0C77 DoDefaultBuff:			     ; CODE XREF: ENDFILE+CCj
SYSINIT:0C77		     mov     BUFFERS, 2
SYSINIT:0C7D		     push    ax
SYSINIT:0C7E		     push    ds
SYSINIT:0C7F		     les     bp, dword ptr cs:DOSINFO
SYSINIT:0C84		     les     bp, es:[bp+0]
SYSINIT:0C88		     push    cs
SYSINIT:0C89		     pop     ds
SYSINIT:0C8A
SYSINIT:0C8A NEXTDPB:				     ; CODE XREF: ENDFILE+135j
SYSINIT:0C8A		     mov     bl, es:[bp+0]
SYSINIT:0C8E		     inc     bl
SYSINIT:0C90		     mov     ax, 4408h
SYSINIT:0C93		     int     21h	     ; DOS - 2+	- IOCTL	-
SYSINIT:0C95		     or	     ax, ax
SYSINIT:0C97		     jnz     short NOSETBUF
SYSINIT:0C99		     xor     bx, bx
SYSINIT:0C9B		     mov     bl, es:[bp+0]
SYSINIT:0C9F		     inc     bl
SYSINIT:0CA1		     mov     dx, offset	DEVICEPARAMETERS
SYSINIT:0CA4		     mov     ax, 440Dh
SYSINIT:0CA7		     mov     cx, 860h
SYSINIT:0CAA		     int     21h	     ; DOS - 2+	- IOCTL	-
SYSINIT:0CAC		     jb	     short NOSETBUF
SYSINIT:0CAE		     mov     bx, DP_TOTALSECTORS
SYSINIT:0CB2		     mov     ax, DP_BYTESPERSEC
SYSINIT:0CB5		     xor     dx, dx
SYSINIT:0CB7		     mov     cx, 200h
SYSINIT:0CBA		     div     cx
SYSINIT:0CBC		     mul     bx
SYSINIT:0CBE		     or	     dx, dx
SYSINIT:0CC0		     jnz     short SETBUF
SYSINIT:0CC2		     cmp     ax, 2D0h
SYSINIT:0CC5		     jbe     short NOSETBUF
SYSINIT:0CC7
SYSINIT:0CC7 SETBUF:				     ; CODE XREF: ENDFILE+11Aj
SYSINIT:0CC7		     mov     BUFFERS, 3
SYSINIT:0CCD		     jmp     short Chk_Memsize_for_Buffers
SYSINIT:0CCF ; ---------------------------------------------------------------------------
SYSINIT:0CCF		     nop
SYSINIT:0CD0
SYSINIT:0CD0 NOSETBUF:				     ; CODE XREF: ENDFILE+F1j
SYSINIT:0CD0					     ; ENDFILE+106j ...
SYSINIT:0CD0		     cmp     word ptr es:[bp+18h], 0FFFFh
SYSINIT:0CD5		     jz	     short Chk_Memsize_for_Buffers
SYSINIT:0CD7		     les     bp, es:[bp+18h]
SYSINIT:0CDB		     jmp     short NEXTDPB
SYSINIT:0CDD ; ---------------------------------------------------------------------------
SYSINIT:0CDD
SYSINIT:0CDD Chk_Memsize_for_Buffers:		     ; CODE XREF: ENDFILE+127j
SYSINIT:0CDD					     ; ENDFILE+12Fj
SYSINIT:0CDD		     cmp     MEMORY_SIZE, 2000h
SYSINIT:0CE3		     jbe     short BUFSET
SYSINIT:0CE5		     mov     BUFFERS, 5
SYSINIT:0CEB		     cmp     MEMORY_SIZE, 4000h
SYSINIT:0CF1		     jbe     short BUFSET
SYSINIT:0CF3		     mov     BUFFERS, 0Ah
SYSINIT:0CF9		     cmp     MEMORY_SIZE, 8000h
SYSINIT:0CFF		     jbe     short BUFSET
SYSINIT:0D01		     mov     BUFFERS, 0Fh
SYSINIT:0D07
SYSINIT:0D07 BUFSET:				     ; CODE XREF: ENDFILE+13Dj
SYSINIT:0D07					     ; ENDFILE+14Bj ...
SYSINIT:0D07		     pop     ds
SYSINIT:0D08		     assume ds:nothing
SYSINIT:0D08		     pop     ax
SYSINIT:0D09
SYSINIT:0D09 DOBUFF:				     ; CODE XREF: ENDFILE+CEj
SYSINIT:0D09					     ; ENDFILE+19Dj
SYSINIT:0D09		     call    ROUND
SYSINIT:0D0C		     dec     ss:BUFFERS
SYSINIT:0D11		     jz	     short BUF1
SYSINIT:0D13		     push    ds
SYSINIT:0D14		     les     di, dword ptr ss:MEMLO
SYSINIT:0D19		     lds     bx, dword ptr ss:DOSINFO
SYSINIT:0D1E		     mov     ax, [bx+12h]
SYSINIT:0D21		     mov     es:[di], ax
SYSINIT:0D24		     mov     ax, [bx+14h]
SYSINIT:0D27		     mov     es:[di+2],	ax
SYSINIT:0D2B		     mov     [bx+12h], di
SYSINIT:0D2E		     mov     word ptr [bx+14h],	es
SYSINIT:0D31		     mov     word ptr es:[di+4], 0FFh
SYSINIT:0D37		     mov     bx, [bx+10h]
SYSINIT:0D3A		     pop     ds
SYSINIT:0D3B		     add     bx, 10h
SYSINIT:0D3E		     add     ss:MEMLO, bx
SYSINIT:0D43		     jmp     short DOBUFF
SYSINIT:0D45 ; ---------------------------------------------------------------------------
SYSINIT:0D45
SYSINIT:0D45 BUF1:				     ; CODE XREF: ENDFILE+16Bj
SYSINIT:0D45		     call    ROUND
SYSINIT:0D48		     les     di, dword ptr ss:DOSINFO
SYSINIT:0D4D		     mov     cl, es:[di+20h]
SYSINIT:0D51		     cmp     cl, ss:NUM_CDS
SYSINIT:0D56		     jnb     short GOTNCDS
SYSINIT:0D58		     mov     cl, ss:NUM_CDS
SYSINIT:0D5D
SYSINIT:0D5D GOTNCDS:				     ; CODE XREF: ENDFILE+1B0j
SYSINIT:0D5D		     xor     ch, ch
SYSINIT:0D5F		     mov     es:[di+21h], cl
SYSINIT:0D63		     mov     ax, ss:MEMHI
SYSINIT:0D67		     mov     es:[di+18h], ax
SYSINIT:0D6B		     mov     ax, ss:MEMLO
SYSINIT:0D6F		     mov     es:[di+16h], ax
SYSINIT:0D73		     mov     al, cl
SYSINIT:0D75		     mov     ah, 51h ; 'Q'
SYSINIT:0D77		     mul     ah
SYSINIT:0D79		     call    ParaRound
SYSINIT:0D7C		     add     ss:MEMHI, ax
SYSINIT:0D81		     call    ROUND
SYSINIT:0D84		     lds     si, es:[di]
SYSINIT:0D87		     les     di, es:[di+16h]
SYSINIT:0D8B		     call    FOSET
SYSINIT:0D8E		     push    cs
SYSINIT:0D8F		     pop     ds
SYSINIT:0D90		     assume ds:SYSINIT
SYSINIT:0D90		     cmp     Sys_Model_Byte, 0FDh ; 'ý'
SYSINIT:0D95		     jz	     short SkipStack
SYSINIT:0D97		     cmp     STACK_ADDR, 0FFFFh
SYSINIT:0D9C		     jz	     short DoInstallStack
SYSINIT:0D9E		     cmp     Sys_Scnd_Model_Byte, 0
SYSINIT:0DA3		     jnz     short DoInstallStack
SYSINIT:0DA5		     cmp     Sys_Model_Byte, 0FFh
SYSINIT:0DAA		     jz	     short SkipStack
SYSINIT:0DAC		     cmp     Sys_Model_Byte, 0FEh ; 'þ'
SYSINIT:0DB1		     jz	     short SkipStack
SYSINIT:0DB3
SYSINIT:0DB3 DoInstallStack:			     ; CODE XREF: ENDFILE+1F6j
SYSINIT:0DB3					     ; ENDFILE+1FDj
SYSINIT:0DB3		     mov     ax, STACK_COUNT
SYSINIT:0DB6		     cmp     ax, 0
SYSINIT:0DB9		     jz	     short SkipStack
SYSINIT:0DBB		     call    ROUND
SYSINIT:0DBE		     mov     ax, MEMHI
SYSINIT:0DC1		     mov     es, ax
SYSINIT:0DC3		     push    cs
SYSINIT:0DC4		     pop     ds
SYSINIT:0DC5		     xor     si, si
SYSINIT:0DC7		     xor     di, di
SYSINIT:0DC9		     mov     cx, 7F1h
SYSINIT:0DCC		     mov     MEMLO, cx
SYSINIT:0DD0		     call    ROUND
SYSINIT:0DD3		     rep movsb
SYSINIT:0DD5		     mov     ax, MEMLO
SYSINIT:0DD8		     mov     STACK_ADDR, ax
SYSINIT:0DDB		     mov     ax, MEMHI
SYSINIT:0DDE		     mov     STACK_ADDR_SEG, ax
SYSINIT:0DE1		     mov     ax, 8
SYSINIT:0DE4		     add     ax, STACK_SIZE
SYSINIT:0DE8		     mov     cx, STACK_COUNT
SYSINIT:0DEC		     mul     cx
SYSINIT:0DEE		     call    ParaRound
SYSINIT:0DF1		     add     MEMHI, ax
SYSINIT:0DF5		     call    ROUND
SYSINIT:0DF8		     call    StackInit
SYSINIT:0DFB
SYSINIT:0DFB SkipStack:				     ; CODE XREF: ENDFILE+1EFj
SYSINIT:0DFB					     ; ENDFILE+204j ...
SYSINIT:0DFB		     push    cs
SYSINIT:0DFC		     pop     ds
SYSINIT:0DFD		     call    ROUND
SYSINIT:0E00		     mov     bx, MEMHI
SYSINIT:0E04		     mov     ax, AREA
SYSINIT:0E07		     mov     es, ax
SYSINIT:0E09		     sub     bx, ax
SYSINIT:0E0B		     mov     ah, 4Ah
SYSINIT:0E0D		     int     21h	     ; DOS - 2+	- ADJUST MEMORY	BLOCK SIZE (SETBLOCK)
SYSINIT:0E0D					     ; ES = segment address of block to	change
SYSINIT:0E0D					     ; BX = new	size in	paragraphs
SYSINIT:0E0F		     push    es
SYSINIT:0E10		     mov     ax, es
SYSINIT:0E12		     dec     ax
SYSINIT:0E13		     mov     es, ax
SYSINIT:0E15		     assume es:nothing
SYSINIT:0E15		     mov     word ptr es:1, 8
SYSINIT:0E1C		     pop     es
SYSINIT:0E1D		     assume es:nothing
SYSINIT:0E1D		     retn
SYSINIT:0E1D ENDFILE	     endp
SYSINIT:0E1D
SYSINIT:0E1E
SYSINIT:0E1E ; =============== S U B R O U T I N E =======================================
SYSINIT:0E1E
SYSINIT:0E1E
SYSINIT:0E1E ParaRound	     proc near		     ; CODE XREF: SYSINIT:092Ep
SYSINIT:0E1E					     ; TEMPCDS+14p ...
SYSINIT:0E1E		     add     ax, 0Fh
SYSINIT:0E21		     rcr     ax, 1
SYSINIT:0E23		     shr     ax, 1
SYSINIT:0E25		     shr     ax, 1
SYSINIT:0E27		     shr     ax, 1
SYSINIT:0E29		     retn
SYSINIT:0E29 ParaRound	     endp
SYSINIT:0E29
SYSINIT:0E2A
SYSINIT:0E2A ; =============== S U B R O U T I N E =======================================
SYSINIT:0E2A
SYSINIT:0E2A
SYSINIT:0E2A StackInit	     proc near		     ; CODE XREF: ENDFILE+252p
SYSINIT:0E2A		     push    ax
SYSINIT:0E2B		     push    ds
SYSINIT:0E2C		     push    es
SYSINIT:0E2D		     push    bx
SYSINIT:0E2E		     push    cx
SYSINIT:0E2F		     push    dx
SYSINIT:0E30		     push    di
SYSINIT:0E31		     push    si
SYSINIT:0E32		     push    bp
SYSINIT:0E33		     mov     ax, cs:STACK_COUNT
SYSINIT:0E37		     mov     es:2, ax
SYSINIT:0E3B		     mov     ax, STACK_SIZE
SYSINIT:0E3E		     mov     es:6, ax
SYSINIT:0E42		     mov     ax, cs:STACK_ADDR
SYSINIT:0E46		     mov     es:8, ax
SYSINIT:0E4A		     mov     ax, cs:STACK_ADDR_SEG
SYSINIT:0E4E		     mov     es:0Ah, ax
SYSINIT:0E52		     mov     bp, es:8
SYSINIT:0E57		     mov     es:0Ch, bp
SYSINIT:0E5C		     mov     ax, 8
SYSINIT:0E5F		     mov     cx, es:2
SYSINIT:0E64		     mul     cx
SYSINIT:0E66		     add     ax, bp
SYSINIT:0E68		     mov     es:4, ax
SYSINIT:0E6C		     mov     bx, ax
SYSINIT:0E6E		     sub     bx, 2
SYSINIT:0E71		     mov     di, es:4
SYSINIT:0E76		     mov     ax, es:6
SYSINIT:0E7A		     mul     cx
SYSINIT:0E7C		     mov     cx, ax
SYSINIT:0E7E		     xor     ax, ax
SYSINIT:0E80		     push    es
SYSINIT:0E81		     pop     ds
SYSINIT:0E82		     assume ds:nothing
SYSINIT:0E82		     mov     es, word ptr ds:0Ah
SYSINIT:0E86		     cld
SYSINIT:0E87		     rep stosb
SYSINIT:0E89		     mov     cx, ds:2
SYSINIT:0E8D
SYSINIT:0E8D BUILDLOOP:				     ; CODE XREF: StackInit+82j
SYSINIT:0E8D		     mov     byte ptr es:[bp+0], 0
SYSINIT:0E92		     mov     es:[bp+1],	al
SYSINIT:0E96		     mov     es:[bp+2],	ax
SYSINIT:0E9A		     mov     es:[bp+4],	ax
SYSINIT:0E9E		     add     bx, ds:6
SYSINIT:0EA2		     mov     es:[bp+6],	bx
SYSINIT:0EA6		     mov     es:[bx], bp
SYSINIT:0EA9		     add     bp, 8
SYSINIT:0EAC		     loop    BUILDLOOP
SYSINIT:0EAE		     sub     bp, 8
SYSINIT:0EB1		     mov     ds:0Eh, bp
SYSINIT:0EB5		     mov     ds:10h, bp
SYSINIT:0EB9		     push    ds
SYSINIT:0EBA		     mov     ax, 0F000h
SYSINIT:0EBD		     mov     ds, ax
SYSINIT:0EBF		     assume ds:nothing
SYSINIT:0EBF		     cmp     byte ptr ds:0FFFEh, 0F9h ;	'ù'
SYSINIT:0EC4		     pop     ds
SYSINIT:0EC5		     assume ds:nothing
SYSINIT:0EC5		     jnz     short Skip_DisableNMIS
SYSINIT:0EC7		     mov     al, 7
SYSINIT:0EC9		     out     72h, al
SYSINIT:0ECB
SYSINIT:0ECB Skip_DisableNMIS:			     ; CODE XREF: StackInit+9Bj
SYSINIT:0ECB		     xor     ax, ax
SYSINIT:0ECD		     mov     es, ax
SYSINIT:0ECF		     assume es:SEG0070
SYSINIT:0ECF		     cli
SYSINIT:0ED0		     mov     si, 8
SYSINIT:0ED3		     mov     di, offset	Int19OLD02
SYSINIT:0ED6		     mov     bx, offset	old02
SYSINIT:0ED9		     mov     dx, offset	int02
SYSINIT:0EDC		     call    NEW_INIT_LOOP
SYSINIT:0EDF		     mov     si, 20h ; ' '
SYSINIT:0EE2		     mov     di, offset	Int19OLD08
SYSINIT:0EE5		     mov     bx, offset	Old08
SYSINIT:0EE8		     mov     dx, offset	Int08
SYSINIT:0EEB		     call    NEW_INIT_LOOP
SYSINIT:0EEE		     mov     si, 24h ; '$'
SYSINIT:0EF1
SYSINIT:0EF1 loc_4381:				     ; CODE XREF: SEG0070:2FA1J
SYSINIT:0EF1		     mov     di, 1873h
SYSINIT:0EF4		     mov     bx, 120h
SYSINIT:0EF7		     mov     dx, 124h
SYSINIT:0EFA		     call    NEW_INIT_LOOP
SYSINIT:0EFD		     mov     si, 1C0h
SYSINIT:0F00		     mov     di, 188Bh
SYSINIT:0F03		     mov     bx, 19Fh
SYSINIT:0F06		     mov     dx, 1A3h
SYSINIT:0F09		     call    NEW_INIT_LOOP
SYSINIT:0F0C		     mov     si, 28h ; '('
SYSINIT:0F0F		     push    ds
SYSINIT:0F10		     lds     bx, es:[si]
SYSINIT:0F13		     push    ds
SYSINIT:0F14		     pop     dx
SYSINIT:0F15		     cmp     dx, 0
SYSINIT:0F18		     jz	     short int0A_first
SYSINIT:0F1A		     cmp     byte ptr [bx], 0CFh ; 'Ï'
SYSINIT:0F1D		     jz	     short int0A_first
SYSINIT:0F1F		     cmp     word ptr [bx+6], 424Bh
SYSINIT:0F24		     jz	     short int0A_Not_first
SYSINIT:0F26		     cmp     dx, 0F000h
SYSINIT:0F2A		     jnz     short int0A_Not_first
SYSINIT:0F2C		     cmp     bx, ds:0FF01h
SYSINIT:0F30		     jz	     short int0A_first
SYSINIT:0F32
SYSINIT:0F32 int0A_Not_first:			     ; CODE XREF: StackInit+FAj
SYSINIT:0F32					     ; StackInit+100j
SYSINIT:0F32		     pop     ds
SYSINIT:0F33		     mov     di, 1877h
SYSINIT:0F36		     mov     bx, 21Bh
SYSINIT:0F39		     mov     dx, 219h
SYSINIT:0F3C		     call    NEW_INIT_LOOP
SYSINIT:0F3F		     jmp     short int0A_end
SYSINIT:0F41 ; ---------------------------------------------------------------------------
SYSINIT:0F41
SYSINIT:0F41 int0A_first:			     ; CODE XREF: StackInit+EEj
SYSINIT:0F41					     ; StackInit+F3j ...
SYSINIT:0F41		     pop     ds
SYSINIT:0F42
SYSINIT:0F42 int0A_end:				     ; CODE XREF: StackInit+115j
SYSINIT:0F42		     mov     si, 2Ch ; ','
SYSINIT:0F45		     push    ds
SYSINIT:0F46		     lds     bx, es:[si]
SYSINIT:0F49		     push    ds
SYSINIT:0F4A		     pop     dx
SYSINIT:0F4B		     cmp     dx, 0
SYSINIT:0F4E		     jz	     short loc_4407
SYSINIT:0F50		     cmp     byte ptr [bx], 0CFh ; 'Ï'
SYSINIT:0F53		     jz	     short loc_4407
SYSINIT:0F55		     cmp     word ptr [bx+6], 424Bh
SYSINIT:0F5A		     jz	     short loc_43F8
SYSINIT:0F5C		     cmp     dx, 0F000h
SYSINIT:0F60		     jnz     short loc_43F8
SYSINIT:0F62		     cmp     bx, ds:0FF01h
SYSINIT:0F66		     jz	     short loc_4407
SYSINIT:0F68
SYSINIT:0F68 loc_43F8:				     ; CODE XREF: StackInit+130j
SYSINIT:0F68					     ; StackInit+136j
SYSINIT:0F68		     pop     ds
SYSINIT:0F69		     mov     di, 187Bh
SYSINIT:0F6C		     mov     bx, 2A3h
SYSINIT:0F6F		     mov     dx, 2A1h
SYSINIT:0F72		     call    NEW_INIT_LOOP
SYSINIT:0F75		     jmp     short loc_4408
SYSINIT:0F77 ; ---------------------------------------------------------------------------
SYSINIT:0F77
SYSINIT:0F77 loc_4407:				     ; CODE XREF: StackInit+124j
SYSINIT:0F77					     ; StackInit+129j ...
SYSINIT:0F77		     pop     ds
SYSINIT:0F78
SYSINIT:0F78 loc_4408:				     ; CODE XREF: StackInit+14Bj
SYSINIT:0F78		     mov     si, 30h ; '0'
SYSINIT:0F7B		     push    ds
SYSINIT:0F7C		     lds     bx, es:[si]
SYSINIT:0F7F		     push    ds
SYSINIT:0F80		     pop     dx
SYSINIT:0F81		     cmp     dx, 0
SYSINIT:0F84		     jz	     short loc_443D
SYSINIT:0F86		     cmp     byte ptr [bx], 0CFh ; 'Ï'
SYSINIT:0F89		     jz	     short loc_443D
SYSINIT:0F8B		     cmp     word ptr [bx+6], 424Bh
SYSINIT:0F90		     jz	     short loc_442E
SYSINIT:0F92		     cmp     dx, 0F000h
SYSINIT:0F96		     jnz     short loc_442E
SYSINIT:0F98		     cmp     bx, ds:0FF01h
SYSINIT:0F9C		     jz	     short loc_443D
SYSINIT:0F9E
SYSINIT:0F9E loc_442E:				     ; CODE XREF: StackInit+166j
SYSINIT:0F9E					     ; StackInit+16Cj
SYSINIT:0F9E		     pop     ds
SYSINIT:0F9F		     mov     di, 187Fh
SYSINIT:0FA2		     mov     bx, 32Bh
SYSINIT:0FA5		     mov     dx, 329h
SYSINIT:0FA8		     call    NEW_INIT_LOOP
SYSINIT:0FAB		     jmp     short loc_443E
SYSINIT:0FAD ; ---------------------------------------------------------------------------
SYSINIT:0FAD
SYSINIT:0FAD loc_443D:				     ; CODE XREF: StackInit+15Aj
SYSINIT:0FAD					     ; StackInit+15Fj ...
SYSINIT:0FAD		     pop     ds
SYSINIT:0FAE
SYSINIT:0FAE loc_443E:				     ; CODE XREF: StackInit+181j
SYSINIT:0FAE		     mov     si, 34h ; '4'
SYSINIT:0FB1		     push    ds
SYSINIT:0FB2		     lds     bx, es:[si]
SYSINIT:0FB5		     push    ds
SYSINIT:0FB6		     pop     dx
SYSINIT:0FB7		     cmp     dx, 0
SYSINIT:0FBA		     jz	     short loc_4473
SYSINIT:0FBC		     cmp     byte ptr [bx], 0CFh ; 'Ï'
SYSINIT:0FBF		     jz	     short loc_4473
SYSINIT:0FC1		     cmp     word ptr [bx+6], 424Bh
SYSINIT:0FC6		     jz	     short loc_4464
SYSINIT:0FC8		     cmp     dx, 0F000h
SYSINIT:0FCC		     jnz     short loc_4464
SYSINIT:0FCE		     cmp     bx, ds:0FF01h
SYSINIT:0FD2		     jz	     short loc_4473
SYSINIT:0FD4
SYSINIT:0FD4 loc_4464:				     ; CODE XREF: StackInit+19Cj
SYSINIT:0FD4					     ; StackInit+1A2j
SYSINIT:0FD4		     pop     ds
SYSINIT:0FD5		     mov     di, 1883h
SYSINIT:0FD8		     mov     bx, 3B3h
SYSINIT:0FDB		     mov     dx, 3B1h
SYSINIT:0FDE		     call    NEW_INIT_LOOP
SYSINIT:0FE1		     jmp     short loc_4474
SYSINIT:0FE3 ; ---------------------------------------------------------------------------
SYSINIT:0FE3
SYSINIT:0FE3 loc_4473:				     ; CODE XREF: StackInit+190j
SYSINIT:0FE3					     ; StackInit+195j ...
SYSINIT:0FE3		     pop     ds
SYSINIT:0FE4
SYSINIT:0FE4 loc_4474:				     ; CODE XREF: StackInit+1B7j
SYSINIT:0FE4		     mov     si, 38h ; '8'
SYSINIT:0FE7		     push    ds
SYSINIT:0FE8		     lds     bx, es:[si]
SYSINIT:0FEB		     push    ds
SYSINIT:0FEC		     pop     dx
SYSINIT:0FED		     cmp     dx, 0
SYSINIT:0FF0		     jz	     short loc_44A9
SYSINIT:0FF2		     cmp     byte ptr [bx], 0CFh ; 'Ï'
SYSINIT:0FF5		     jz	     short loc_44A9
SYSINIT:0FF7		     cmp     word ptr [bx+6], 424Bh
SYSINIT:0FFC		     jz	     short loc_449A
SYSINIT:0FFE		     cmp     dx, 0F000h
SYSINIT:1002		     jnz     short loc_449A
SYSINIT:1004		     cmp     bx, ds:0FF01h
SYSINIT:1008		     jz	     short loc_44A9
SYSINIT:100A
SYSINIT:100A loc_449A:				     ; CODE XREF: StackInit+1D2j
SYSINIT:100A					     ; StackInit+1D8j
SYSINIT:100A		     pop     ds
SYSINIT:100B		     mov     di, 1887h
SYSINIT:100E		     mov     bx, 43Bh
SYSINIT:1011		     mov     dx, 439h
SYSINIT:1014		     call    NEW_INIT_LOOP
SYSINIT:1017		     jmp     short loc_44AA
SYSINIT:1019 ; ---------------------------------------------------------------------------
SYSINIT:1019
SYSINIT:1019 loc_44A9:				     ; CODE XREF: StackInit+1C6j
SYSINIT:1019					     ; StackInit+1CBj ...
SYSINIT:1019		     pop     ds
SYSINIT:101A
SYSINIT:101A loc_44AA:				     ; CODE XREF: StackInit+1EDj
SYSINIT:101A		     mov     si, 1C8h
SYSINIT:101D		     push    ds
SYSINIT:101E		     lds     bx, es:[si]
SYSINIT:1021		     push    ds
SYSINIT:1022		     pop     dx
SYSINIT:1023		     cmp     dx, 0
SYSINIT:1026		     jz	     short loc_44DF
SYSINIT:1028		     cmp     byte ptr [bx], 0CFh ; 'Ï'
SYSINIT:102B		     jz	     short loc_44DF
SYSINIT:102D		     cmp     word ptr [bx+6], 424Bh
SYSINIT:1032		     jz	     short loc_44D0
SYSINIT:1034		     cmp     dx, 0F000h
SYSINIT:1038		     jnz     short loc_44D0
SYSINIT:103A		     cmp     bx, ds:0FF01h
SYSINIT:103E		     jz	     short loc_44DF
SYSINIT:1040
SYSINIT:1040 loc_44D0:				     ; CODE XREF: StackInit+208j
SYSINIT:1040					     ; StackInit+20Ej
SYSINIT:1040		     pop     ds
SYSINIT:1041		     mov     di, 188Fh
SYSINIT:1044		     mov     bx, 4C3h
SYSINIT:1047		     mov     dx, 4C1h
SYSINIT:104A		     call    NEW_INIT_LOOP
SYSINIT:104D		     jmp     short loc_44E0
SYSINIT:104F ; ---------------------------------------------------------------------------
SYSINIT:104F
SYSINIT:104F loc_44DF:				     ; CODE XREF: StackInit+1FCj
SYSINIT:104F					     ; StackInit+201j ...
SYSINIT:104F		     pop     ds
SYSINIT:1050
SYSINIT:1050 loc_44E0:				     ; CODE XREF: StackInit+223j
SYSINIT:1050		     mov     si, 1CCh
SYSINIT:1053		     push    ds
SYSINIT:1054		     lds     bx, es:[si]
SYSINIT:1057		     push    ds
SYSINIT:1058		     pop     dx
SYSINIT:1059		     cmp     dx, 0
SYSINIT:105C		     jz	     short loc_4515
SYSINIT:105E		     cmp     byte ptr [bx], 0CFh ; 'Ï'
SYSINIT:1061		     jz	     short loc_4515
SYSINIT:1063		     cmp     word ptr [bx+6], 424Bh
SYSINIT:1068		     jz	     short loc_4506
SYSINIT:106A		     cmp     dx, 0F000h
SYSINIT:106E		     jnz     short loc_4506
SYSINIT:1070		     cmp     bx, ds:0FF01h
SYSINIT:1074		     jz	     short loc_4515
SYSINIT:1076
SYSINIT:1076 loc_4506:				     ; CODE XREF: StackInit+23Ej
SYSINIT:1076					     ; StackInit+244j
SYSINIT:1076		     pop     ds
SYSINIT:1077		     mov     di, 1893h
SYSINIT:107A		     mov     bx, 54Bh
SYSINIT:107D		     mov     dx, 549h
SYSINIT:1080		     call    NEW_INIT_LOOP
SYSINIT:1083		     jmp     short loc_4516
SYSINIT:1085 ; ---------------------------------------------------------------------------
SYSINIT:1085
SYSINIT:1085 loc_4515:				     ; CODE XREF: StackInit+232j
SYSINIT:1085					     ; StackInit+237j ...
SYSINIT:1085		     pop     ds
SYSINIT:1086
SYSINIT:1086 loc_4516:				     ; CODE XREF: StackInit+259j
SYSINIT:1086		     mov     si, 1D0h
SYSINIT:1089		     push    ds
SYSINIT:108A		     lds     bx, es:[si]
SYSINIT:108D		     push    ds
SYSINIT:108E		     pop     dx
SYSINIT:108F		     cmp     dx, 0
SYSINIT:1092		     jz	     short loc_454B
SYSINIT:1094		     cmp     byte ptr [bx], 0CFh ; 'Ï'
SYSINIT:1097		     jz	     short loc_454B
SYSINIT:1099		     cmp     word ptr [bx+6], 424Bh
SYSINIT:109E		     jz	     short loc_453C
SYSINIT:10A0		     cmp     dx, 0F000h
SYSINIT:10A4		     jnz     short loc_453C
SYSINIT:10A6		     cmp     bx, ds:0FF01h
SYSINIT:10AA		     jz	     short loc_454B
SYSINIT:10AC
SYSINIT:10AC loc_453C:				     ; CODE XREF: StackInit+274j
SYSINIT:10AC					     ; StackInit+27Aj
SYSINIT:10AC		     pop     ds
SYSINIT:10AD		     mov     di, 1897h
SYSINIT:10B0		     mov     bx, 5D3h
SYSINIT:10B3		     mov     dx, 5D1h
SYSINIT:10B6		     call    NEW_INIT_LOOP
SYSINIT:10B9		     jmp     short loc_454C
SYSINIT:10BB ; ---------------------------------------------------------------------------
SYSINIT:10BB
SYSINIT:10BB loc_454B:				     ; CODE XREF: StackInit+268j
SYSINIT:10BB					     ; StackInit+26Dj ...
SYSINIT:10BB		     pop     ds
SYSINIT:10BC
SYSINIT:10BC loc_454C:				     ; CODE XREF: StackInit+28Fj
SYSINIT:10BC		     mov     si, 1D8h
SYSINIT:10BF		     push    ds
SYSINIT:10C0		     lds     bx, es:[si]
SYSINIT:10C3		     push    ds
SYSINIT:10C4		     pop     dx
SYSINIT:10C5		     cmp     dx, 0
SYSINIT:10C8		     jz	     short loc_4581
SYSINIT:10CA		     cmp     byte ptr [bx], 0CFh ; 'Ï'
SYSINIT:10CD		     jz	     short loc_4581
SYSINIT:10CF		     cmp     word ptr [bx+6], 424Bh
SYSINIT:10D4		     jz	     short loc_4572
SYSINIT:10D6		     cmp     dx, 0F000h
SYSINIT:10DA		     jnz     short loc_4572
SYSINIT:10DC		     cmp     bx, ds:0FF01h
SYSINIT:10E0		     jz	     short loc_4581
SYSINIT:10E2
SYSINIT:10E2 loc_4572:				     ; CODE XREF: StackInit+2AAj
SYSINIT:10E2					     ; StackInit+2B0j
SYSINIT:10E2		     pop     ds
SYSINIT:10E3		     mov     di, 189Bh
SYSINIT:10E6		     mov     bx, 65Bh
SYSINIT:10E9		     mov     dx, 659h
SYSINIT:10EC		     call    NEW_INIT_LOOP
SYSINIT:10EF		     jmp     short loc_4582
SYSINIT:10F1 ; ---------------------------------------------------------------------------
SYSINIT:10F1
SYSINIT:10F1 loc_4581:				     ; CODE XREF: StackInit+29Ej
SYSINIT:10F1					     ; StackInit+2A3j ...
SYSINIT:10F1		     pop     ds
SYSINIT:10F2
SYSINIT:10F2 loc_4582:				     ; CODE XREF: StackInit+2C5j
SYSINIT:10F2		     mov     si, 1DCh
SYSINIT:10F5		     push    ds
SYSINIT:10F6		     lds     bx, es:[si]
SYSINIT:10F9		     push    ds
SYSINIT:10FA		     pop     dx
SYSINIT:10FB		     cmp     dx, 0
SYSINIT:10FE		     jz	     short int77_first
SYSINIT:1100		     cmp     byte ptr [bx], 0CFh ; 'Ï'
SYSINIT:1103		     jz	     short int77_first
SYSINIT:1105		     cmp     word ptr [bx+6], 424Bh
SYSINIT:110A		     jz	     short int77_Not_first
SYSINIT:110C		     cmp     dx, 0F000h
SYSINIT:1110		     jnz     short int77_Not_first
SYSINIT:1112		     cmp     bx, ds:0FF01h
SYSINIT:1116		     jz	     short int77_first
SYSINIT:1118
SYSINIT:1118 int77_Not_first:			     ; CODE XREF: StackInit+2E0j
SYSINIT:1118					     ; StackInit+2E6j
SYSINIT:1118		     pop     ds
SYSINIT:1119		     mov     di, 189Fh
SYSINIT:111C		     mov     bx, 6E3h
SYSINIT:111F		     mov     dx, 6E1h
SYSINIT:1122		     call    NEW_INIT_LOOP
SYSINIT:1125		     jmp     short int77_end
SYSINIT:1127 ; ---------------------------------------------------------------------------
SYSINIT:1127
SYSINIT:1127 int77_first:			     ; CODE XREF: StackInit+2D4j
SYSINIT:1127					     ; StackInit+2D9j ...
SYSINIT:1127		     pop     ds
SYSINIT:1128
SYSINIT:1128 int77_end:				     ; CODE XREF: StackInit+2FBj
SYSINIT:1128		     push    ds
SYSINIT:1129		     mov     ax, 0F000h
SYSINIT:112C		     mov     ds, ax
SYSINIT:112E		     assume ds:nothing
SYSINIT:112E		     cmp     byte ptr ds:0FFFEh, 0F9h ;	'ù'
SYSINIT:1133		     pop     ds
SYSINIT:1134		     assume ds:nothing
SYSINIT:1134		     jnz     short Skip_EnableNMIS
SYSINIT:1136		     mov     al, 27h ; '''
SYSINIT:1138		     out     72h, al
SYSINIT:113A
SYSINIT:113A Skip_EnableNMIS:			     ; CODE XREF: StackInit+30Aj
SYSINIT:113A		     sti
SYSINIT:113B		     mov     ax, 70h ; 'p'
SYSINIT:113E		     mov     ds, ax
SYSINIT:1140		     assume ds:nothing
SYSINIT:1140		     mov     ds:INT19SEM, 1
SYSINIT:1145		     pop     bp
SYSINIT:1146		     pop     si
SYSINIT:1147		     pop     di
SYSINIT:1148		     pop     dx
SYSINIT:1149		     pop     cx
SYSINIT:114A		     pop     bx
SYSINIT:114B		     pop     es
SYSINIT:114C		     assume es:nothing
SYSINIT:114C		     pop     ds
SYSINIT:114D		     assume ds:nothing
SYSINIT:114D		     pop     ax
SYSINIT:114E		     retn
SYSINIT:114E StackInit	     endp
SYSINIT:114E
SYSINIT:114F
SYSINIT:114F ; =============== S U B R O U T I N E =======================================
SYSINIT:114F
SYSINIT:114F
SYSINIT:114F NEW_INIT_LOOP   proc near		     ; CODE XREF: StackInit+B2p
SYSINIT:114F					     ; StackInit+C1p ...
SYSINIT:114F		     mov     ax, es:[si]
SYSINIT:1152		     mov     [bx], ax
SYSINIT:1154		     mov     ax, es:[si+2]
SYSINIT:1158		     mov     [bx+2], ax
SYSINIT:115B		     push    ds
SYSINIT:115C		     mov     ax, 70h ; 'p'
SYSINIT:115F		     mov     ds, ax
SYSINIT:1161		     assume ds:nothing
SYSINIT:1161		     mov     ax, es:[si]
SYSINIT:1164		     mov     [di], ax
SYSINIT:1166		     mov     ax, es:[si+2]
SYSINIT:116A		     mov     [di+2], ax
SYSINIT:116D		     pop     ds
SYSINIT:116E		     assume ds:nothing
SYSINIT:116E		     mov     es:[si], dx
SYSINIT:1171		     mov     word ptr es:[si+2], ds
SYSINIT:1175		     retn
SYSINIT:1175 NEW_INIT_LOOP   endp
SYSINIT:1175
SYSINIT:1175 ; ---------------------------------------------------------------------------
SYSINIT:1176		     db	10 dup(0)
SYSINIT:1180
SYSINIT:1180 ; =============== S U B R O U T I N E =======================================
SYSINIT:1180
SYSINIT:1180
SYSINIT:1180 DOCONF	     proc near		     ; CODE XREF: SYSINIT:NODRVSETp
SYSINIT:1180		     push    cs
SYSINIT:1181		     pop     ds
SYSINIT:1182		     assume ds:SYSINIT
SYSINIT:1182		     mov     ax, 3700h
SYSINIT:1185		     int     21h	     ; DOS - 2+	internal - GET SWITCHAR/AVAILDEV
SYSINIT:1185					     ; Return: AL = FFh	unsupported subfunction
SYSINIT:1185					     ; DL = current switch character
SYSINIT:1187		     mov     COMMAND_LINE_1, dl
SYSINIT:118B		     mov     dx, offset	CONFIG ; "\\CONFIG.SYS"
SYSINIT:118E		     mov     ax, 3D00h
SYSINIT:1191		     stc
SYSINIT:1192		     int     21h	     ; DOS - 2+	- OPEN DISK FILE WITH HANDLE
SYSINIT:1192					     ; DS:DX ->	ASCIZ filename
SYSINIT:1192					     ; AL = access mode
SYSINIT:1192					     ; 0 - read
SYSINIT:1194		     jb	     short ENDCONF
SYSINIT:1196		     jmp     short NOPROB
SYSINIT:1198 ; ---------------------------------------------------------------------------
SYSINIT:1198		     nop
SYSINIT:1199
SYSINIT:1199 ENDCONF:				     ; CODE XREF: DOCONF+14j
SYSINIT:1199					     ; DOCONF:ENDCONVj
SYSINIT:1199		     retn
SYSINIT:119A ; ---------------------------------------------------------------------------
SYSINIT:119A
SYSINIT:119A BADOP:				     ; CODE XREF: DOCONF+A6j
SYSINIT:119A					     ; DOCONF:TRYBBADj	...
SYSINIT:119A		     mov     dx, offset	BADOPM ; "\r\nUnrecognized command in CONFIG.SYS"
SYSINIT:119D		     call    PRINT
SYSINIT:11A0		     jmp     COFF
SYSINIT:11A3 ; ---------------------------------------------------------------------------
SYSINIT:11A3
SYSINIT:11A3 NOPROB:				     ; CODE XREF: DOCONF+16j
SYSINIT:11A3		     mov     bx, ax
SYSINIT:11A5		     xor     cx, cx
SYSINIT:11A7		     xor     dx, dx
SYSINIT:11A9		     mov     ax, 4202h
SYSINIT:11AC		     int     21h	     ; DOS - 2+	- MOVE FILE READ/WRITE POINTER (LSEEK)
SYSINIT:11AC					     ; AL = method: offset from	end of file
SYSINIT:11AE		     mov     COUNT, ax
SYSINIT:11B1		     xor     dx, dx
SYSINIT:11B3		     mov     ax, 4200h
SYSINIT:11B6		     int     21h	     ; DOS - 2+	- MOVE FILE READ/WRITE POINTER (LSEEK)
SYSINIT:11B6					     ; AL = method: offset from	beginning of file
SYSINIT:11B8		     mov     dx, cs
SYSINIT:11BA		     mov     ax, COUNT
SYSINIT:11BD		     call    ParaRound
SYSINIT:11C0		     sub     dx, ax
SYSINIT:11C2		     sub     dx, 11h
SYSINIT:11C5		     mov     CONFBOT, dx
SYSINIT:11C9		     call    TEMPCDS
SYSINIT:11CC		     mov     dx, cs:CONFBOT
SYSINIT:11D1		     mov     ds, dx
SYSINIT:11D3		     assume ds:nothing
SYSINIT:11D3		     mov     es, dx
SYSINIT:11D5		     xor     dx, dx
SYSINIT:11D7		     mov     cx, cs:COUNT
SYSINIT:11DC		     mov     ah, 3Fh ; '?'
SYSINIT:11DE		     stc
SYSINIT:11DF		     int     21h	     ; DOS - 2+	- READ FROM FILE WITH HANDLE
SYSINIT:11DF					     ; BX = file handle, CX = number of	bytes to read
SYSINIT:11DF					     ; DS:DX ->	buffer
SYSINIT:11E1		     pushf
SYSINIT:11E2		     push    ax
SYSINIT:11E3		     push    di
SYSINIT:11E4		     push    cx
SYSINIT:11E5		     mov     al, 1Ah
SYSINIT:11E7		     mov     di, dx
SYSINIT:11E9		     jcxz    short PUTEOL
SYSINIT:11EB		     repne scasb
SYSINIT:11ED		     jnz     short PUTEOL
SYSINIT:11EF		     dec     di
SYSINIT:11F0
SYSINIT:11F0 PUTEOL:				     ; CODE XREF: DOCONF+69j
SYSINIT:11F0					     ; DOCONF+6Dj
SYSINIT:11F0		     mov     al, 0Dh
SYSINIT:11F2		     stosb
SYSINIT:11F3		     mov     al, 0Ah
SYSINIT:11F5		     stosb
SYSINIT:11F6		     sub     di, dx
SYSINIT:11F8		     mov     cs:COUNT, di
SYSINIT:11FD		     pop     cx
SYSINIT:11FE		     pop     di
SYSINIT:11FF		     pop     ax
SYSINIT:1200		     push    cs
SYSINIT:1201		     pop     ds
SYSINIT:1202		     assume ds:SYSINIT
SYSINIT:1202		     push    ax
SYSINIT:1203		     mov     ah, 3Eh
SYSINIT:1205		     int     21h	     ; DOS - 2+	- CLOSE	A FILE WITH HANDLE
SYSINIT:1205					     ; BX = file handle
SYSINIT:1207		     pop     ax
SYSINIT:1208		     popf
SYSINIT:1209		     jb	     short CONFERR
SYSINIT:120B		     cmp     cx, ax
SYSINIT:120D		     jz	     short GETCOM
SYSINIT:120F
SYSINIT:120F CONFERR:				     ; CODE XREF: DOCONF+89j
SYSINIT:120F		     mov     dx, offset	CONFIG ; "\\CONFIG.SYS"
SYSINIT:1212		     call    BADFIL
SYSINIT:1215
SYSINIT:1215 ENDCONV:				     ; CODE XREF: DOCONF:CONFLPj
SYSINIT:1215		     jmp     short ENDCONF
SYSINIT:1217 ; ---------------------------------------------------------------------------
SYSINIT:1217
SYSINIT:1217 GETCOM:				     ; CODE XREF: DOCONF+8Dj
SYSINIT:1217		     call    ORGANIZE
SYSINIT:121A		     call    GETCHR
SYSINIT:121D
SYSINIT:121D CONFLP:				     ; CODE XREF: DOCONF+AEj
SYSINIT:121D					     ; DOCONF:CONVj
SYSINIT:121D		     jb	     short ENDCONV
SYSINIT:121F		     mov     ah, al
SYSINIT:1221		     call    GETCHR
SYSINIT:1224		     jnb     short TRYB
SYSINIT:1226		     jmp     BADOP
SYSINIT:1229 ; ---------------------------------------------------------------------------
SYSINIT:1229
SYSINIT:1229 COFF:				     ; CODE XREF: DOCONF+20j
SYSINIT:1229					     ; DOCONF+C5j ...
SYSINIT:1229		     push    cs
SYSINIT:122A		     pop     ds
SYSINIT:122B		     call    NEWLINE
SYSINIT:122E		     jmp     short CONFLP
SYSINIT:1230 ; ---------------------------------------------------------------------------
SYSINIT:1230
SYSINIT:1230 TRYB:				     ; CODE XREF: DOCONF+A4j
SYSINIT:1230		     cmp     ah, 'B'
SYSINIT:1233		     jnz     short TRYC
SYSINIT:1235		     call    GETNUM
SYSINIT:1238		     jz	     short TRYBBAD
SYSINIT:123A		     cmp     ax, 100
SYSINIT:123D		     jb	     short SAVEBUF
SYSINIT:123F
SYSINIT:123F TRYBBAD:				     ; CODE XREF: DOCONF+B8j
SYSINIT:123F		     jmp     BADOP
SYSINIT:1242 ; ---------------------------------------------------------------------------
SYSINIT:1242
SYSINIT:1242 SAVEBUF:				     ; CODE XREF: DOCONF+BDj
SYSINIT:1242		     mov     BUFFERS, ax
SYSINIT:1245		     jmp     short COFF
SYSINIT:1247 ; ---------------------------------------------------------------------------
SYSINIT:1247
SYSINIT:1247 TRYC:				     ; CODE XREF: DOCONF+B3j
SYSINIT:1247		     cmp     ah, 'C'
SYSINIT:124A		     jz	     short GOTC
SYSINIT:124C		     jmp     short TRYD
SYSINIT:124E ; ---------------------------------------------------------------------------
SYSINIT:124E		     nop
SYSINIT:124F
SYSINIT:124F GOTC:				     ; CODE XREF: DOCONF+CAj
SYSINIT:124F		     cmp     al, 'O'
SYSINIT:1251		     jnz     short TRYCBAD
SYSINIT:1253		     call    GETCHR
SYSINIT:1256		     jb	     short TRYCBAD
SYSINIT:1258		     cmp     al, 'N'
SYSINIT:125A		     jnz     short TRYCOFF
SYSINIT:125C		     mov     ah, 33h ; '3'
SYSINIT:125E		     mov     al, 1
SYSINIT:1260		     mov     dl, al
SYSINIT:1262		     int     21h	     ; DOS - EXTENDED CONTROL-BREAK CHECKING
SYSINIT:1262					     ; AL = 00h	get state / 01h	set state / 02h	set AND	get
SYSINIT:1262					     ; DL = 00h	for OFF	or 01h for ON
SYSINIT:1264
SYSINIT:1264 COFFJ2:				     ; CODE XREF: DOCONF+F1j
SYSINIT:1264		     jmp     short COFF
SYSINIT:1266 ; ---------------------------------------------------------------------------
SYSINIT:1266
SYSINIT:1266 TRYCOFF:				     ; CODE XREF: DOCONF+DAj
SYSINIT:1266		     cmp     al, 46h ; 'F'
SYSINIT:1268		     jnz     short TRYCBAD
SYSINIT:126A		     call    GETCHR
SYSINIT:126D		     jb	     short TRYCBAD
SYSINIT:126F		     cmp     al, 46h ; 'F'
SYSINIT:1271		     jz	     short COFFJ2
SYSINIT:1273
SYSINIT:1273 TRYCBAD:				     ; CODE XREF: DOCONF+D1j
SYSINIT:1273					     ; DOCONF+D6j ...
SYSINIT:1273		     jmp     BADOP
SYSINIT:1276 ; ---------------------------------------------------------------------------
SYSINIT:1276
SYSINIT:1276 TRYD:				     ; CODE XREF: DOCONF+CCj
SYSINIT:1276		     cmp     ah, 'D'
SYSINIT:1279		     jz	     short GOTD
SYSINIT:127B		     jmp     TRYQ
SYSINIT:127E ; ---------------------------------------------------------------------------
SYSINIT:127E
SYSINIT:127E GOTD:				     ; CODE XREF: DOCONF+F9j
SYSINIT:127E		     mov     bx, cs
SYSINIT:1280		     mov     ds, bx
SYSINIT:1282		     mov     word ptr BPB_ADDR,	si
SYSINIT:1286		     mov     word ptr BPB_ADDR+2, es
SYSINIT:128A		     call    ROUND
SYSINIT:128D		     xor     ax, ax
SYSINIT:128F		     mov     ENTRY_POINT, ax
SYSINIT:1292		     mov     ax, MEMHI
SYSINIT:1295		     mov     FINAL_DOS_LOCATION, ax
SYSINIT:1298		     mov     LDOFF, ax
SYSINIT:129B		     push    es
SYSINIT:129C		     pop     ds
SYSINIT:129D		     assume ds:nothing
SYSINIT:129D		     mov     dx, si
SYSINIT:129F		     mov     es, ax
SYSINIT:12A1		     mov     ax, 3D00h
SYSINIT:12A4		     stc
SYSINIT:12A5		     int     21h	     ; DOS - 2+	- OPEN DISK FILE WITH HANDLE
SYSINIT:12A5					     ; DS:DX ->	ASCIZ filename
SYSINIT:12A5					     ; AL = access mode
SYSINIT:12A5					     ; 0 - read
SYSINIT:12A7		     jb	     short BADLDRESET
SYSINIT:12A9		     mov     bx, ax
SYSINIT:12AB		     push    dx
SYSINIT:12AC		     xor     cx, cx
SYSINIT:12AE		     xor     dx, dx
SYSINIT:12B0		     mov     ax, 4202h
SYSINIT:12B3		     stc
SYSINIT:12B4		     int     21h	     ; DOS - 2+	- MOVE FILE READ/WRITE POINTER (LSEEK)
SYSINIT:12B4					     ; AL = method: offset from	end of file
SYSINIT:12B6		     jnb     short GO_AHEAD_LOAD
SYSINIT:12B8		     mov     ah, 3Eh
SYSINIT:12BA		     int     21h	     ; DOS - 2+	- CLOSE	A FILE WITH HANDLE
SYSINIT:12BA					     ; BX = file handle
SYSINIT:12BC		     pop     dx
SYSINIT:12BD		     stc
SYSINIT:12BE		     jmp     short BADLDRESET
SYSINIT:12C0 ; ---------------------------------------------------------------------------
SYSINIT:12C0
SYSINIT:12C0 GO_AHEAD_LOAD:			     ; CODE XREF: DOCONF+136j
SYSINIT:12C0		     add     ax, 0Fh
SYSINIT:12C3		     adc     dx, 0
SYSINIT:12C6		     mov     cl, 4
SYSINIT:12C8		     shr     ax, cl
SYSINIT:12CA		     mov     cl, 0Ch
SYSINIT:12CC		     shl     dx, cl
SYSINIT:12CE		     or	     ax, dx
SYSINIT:12D0		     mov     cx, es
SYSINIT:12D2		     add     cx, ax
SYSINIT:12D4		     jb	     short MEM_ERRJY
SYSINIT:12D6		     cmp     cx, cs:ALLOCLIM
SYSINIT:12DB		     jb	     short OKLDX
SYSINIT:12DD
SYSINIT:12DD MEM_ERRJY:				     ; CODE XREF: DOCONF+154j
SYSINIT:12DD		     jmp     MEM_ERR
SYSINIT:12E0 ; ---------------------------------------------------------------------------
SYSINIT:12E0
SYSINIT:12E0 OKLDX:				     ; CODE XREF: DOCONF+15Bj
SYSINIT:12E0		     pop     dx
SYSINIT:12E1		     mov     ah, 3Eh
SYSINIT:12E3		     int     21h	     ; DOS - 2+	- CLOSE	A FILE WITH HANDLE
SYSINIT:12E3					     ; BX = file handle
SYSINIT:12E5		     mov     bx, cs
SYSINIT:12E7		     mov     es, bx
SYSINIT:12E9		     assume es:SYSINIT
SYSINIT:12E9		     mov     bx, offset	MEMHI
SYSINIT:12EC		     mov     al, 3
SYSINIT:12EE		     mov     ah, 4Bh ; 'K'
SYSINIT:12F0		     stc
SYSINIT:12F1		     int     21h	     ; DOS - 2+	- LOAD OR EXECUTE (EXEC)
SYSINIT:12F1					     ; DS:DX ->	ASCIZ filename
SYSINIT:12F1					     ; ES:BX ->	parameter block
SYSINIT:12F1					     ; AL = subfunc: called by MSC spawn(P_NOWAIT,...) when running DOS	4.x.
SYSINIT:12F3
SYSINIT:12F3 BADLDRESET:			     ; CODE XREF: DOCONF+127j
SYSINIT:12F3					     ; DOCONF+13Ej
SYSINIT:12F3		     push    ds
SYSINIT:12F4		     pop     es
SYSINIT:12F5		     assume es:nothing
SYSINIT:12F5		     push    cs
SYSINIT:12F6		     pop     ds
SYSINIT:12F7		     assume ds:SYSINIT
SYSINIT:12F7		     jnb     short GOODLD
SYSINIT:12F9
SYSINIT:12F9 BADBRK:				     ; CODE XREF: DOCONF+1BAj
SYSINIT:12F9		     cmp     byte ptr es:[si], 0Dh
SYSINIT:12FD		     jnz     short BADBRK_1
SYSINIT:12FF		     jmp     BADOP
SYSINIT:1302 ; ---------------------------------------------------------------------------
SYSINIT:1302
SYSINIT:1302 BADBRK_1:				     ; CODE XREF: DOCONF+17Dj
SYSINIT:1302		     call    BADLOAD
SYSINIT:1305		     jmp     COFF
SYSINIT:1308 ; ---------------------------------------------------------------------------
SYSINIT:1308
SYSINIT:1308 GOODLD:				     ; CODE XREF: DOCONF+177j
SYSINIT:1308					     ; DOCONF+2DDj
SYSINIT:1308		     push    es
SYSINIT:1309		     push    si
SYSINIT:130A
SYSINIT:130A RESTORE:				     ; CODE XREF: DOCONF+192j
SYSINIT:130A		     mov     bl, es:[si]
SYSINIT:130D		     or	     bl, bl
SYSINIT:130F		     jz	     short GOT
SYSINIT:1311		     inc     si
SYSINIT:1312		     jmp     short RESTORE
SYSINIT:1314 ; ---------------------------------------------------------------------------
SYSINIT:1314
SYSINIT:1314 GOT:				     ; CODE XREF: DOCONF+18Fj
SYSINIT:1314		     mov     byte ptr es:[si], 20h ; ' '
SYSINIT:1318		     push    es
SYSINIT:1319		     push    si
SYSINIT:131A		     push    cs
SYSINIT:131B		     pop     es
SYSINIT:131C		     assume es:SYSINIT
SYSINIT:131C		     mov     bx, 6
SYSINIT:131F		     call    CALLDEV
SYSINIT:1322		     mov     bx, 8
SYSINIT:1325		     call    CALLDEV
SYSINIT:1328		     pop     si
SYSINIT:1329		     pop     ds
SYSINIT:132A		     assume ds:nothing
SYSINIT:132A		     mov     byte ptr [si], 0
SYSINIT:132D		     push    cs
SYSINIT:132E		     pop     ds
SYSINIT:132F		     assume ds:SYSINIT
SYSINIT:132F		     mov     ax, BREAK_ADDR_SEG
SYSINIT:1332		     cmp     ax, MEMORY_SIZE
SYSINIT:1336		     jb	     short BREAKOK
SYSINIT:1338		     pop     si
SYSINIT:1339		     pop     es
SYSINIT:133A		     assume es:nothing
SYSINIT:133A		     jmp     short BADBRK
SYSINIT:133C ; ---------------------------------------------------------------------------
SYSINIT:133C
SYSINIT:133C BREAKOK:				     ; CODE XREF: DOCONF+1B6j
SYSINIT:133C		     lds     dx, dword ptr ENTRY_POINT
SYSINIT:1340		     assume ds:nothing
SYSINIT:1340		     mov     si, dx
SYSINIT:1342		     add     si, 4
SYSINIT:1345		     les     di, dword ptr cs:DOSINFO
SYSINIT:134A		     mov     ax, [si]
SYSINIT:134C		     test    ax, 8000h
SYSINIT:134F		     jz	     short ISBLOCK
SYSINIT:1351		     call    SET_BREAK
SYSINIT:1354		     jb	     short ERASE_DEV
SYSINIT:1356		     test    ax, 1
SYSINIT:1359		     jz	     short TRYCLK
SYSINIT:135B		     mov     es:[di+0Ch], dx
SYSINIT:135F		     mov     word ptr es:[di+0Eh], ds
SYSINIT:1363
SYSINIT:1363 TRYCLK:				     ; CODE XREF: DOCONF+1D9j
SYSINIT:1363		     test    ax, 8
SYSINIT:1366		     jz	     short GOLINK
SYSINIT:1368		     mov     es:[di+8],	dx
SYSINIT:136C		     mov     word ptr es:[di+0Ah], ds
SYSINIT:1370
SYSINIT:1370 GOLINK:				     ; CODE XREF: DOCONF+1E6j
SYSINIT:1370		     jmp     LINKIT
SYSINIT:1373 ; ---------------------------------------------------------------------------
SYSINIT:1373
SYSINIT:1373 ISBLOCK:				     ; CODE XREF: DOCONF+1CFj
SYSINIT:1373		     mov     al, cs:UNITCOUNT
SYSINIT:1377		     or	     al, al
SYSINIT:1379		     jnz     short PERDRV
SYSINIT:137B
SYSINIT:137B ERASE_DEV:				     ; CODE XREF: DOCONF+1D4j
SYSINIT:137B					     ; DOCONF+21Bj
SYSINIT:137B		     mov     ax, 0FFFFh
SYSINIT:137E		     jmp     ENDDEV
SYSINIT:1381 ; ---------------------------------------------------------------------------
SYSINIT:1381
SYSINIT:1381 PERDRV:				     ; CODE XREF: DOCONF+1F9j
SYSINIT:1381		     cbw
SYSINIT:1382		     mov     cx, ax
SYSINIT:1384		     mov     dh, ah
SYSINIT:1386		     mov     dl, es:[di+20h]
SYSINIT:138A		     mov     ah, dl
SYSINIT:138C		     add     ah, al
SYSINIT:138E		     cmp     ah, 1Ah
SYSINIT:1391		     jbe     short OK_BLOCK
SYSINIT:1393		     push    cs
SYSINIT:1394		     pop     ds
SYSINIT:1395		     assume ds:SYSINIT
SYSINIT:1395		     mov     dx, offset	BADBLOCK ; "\r\nToo many Block Devices\r\n$"
SYSINIT:1398		     call    PRINT
SYSINIT:139B		     jmp     short ERASE_DEV
SYSINIT:139D ; ---------------------------------------------------------------------------
SYSINIT:139D
SYSINIT:139D OK_BLOCK:				     ; CODE XREF: DOCONF+211j
SYSINIT:139D		     call    SET_BREAK
SYSINIT:13A0		     add     es:[di+20h], al
SYSINIT:13A4		     add     cs:DriveNumber, al
SYSINIT:13A9		     lds     bx, cs:BPB_ADDR
SYSINIT:13AE		     assume ds:nothing
SYSINIT:13AE
SYSINIT:13AE PERUNIT:				     ; CODE XREF: DOCONF+2ACj
SYSINIT:13AE		     les     bp, dword ptr cs:DOSINFO
SYSINIT:13B3		     les     bp, es:[bp+0]
SYSINIT:13B7
SYSINIT:13B7 SCANDPB:				     ; CODE XREF: DOCONF+242j
SYSINIT:13B7		     cmp     word ptr es:[bp+18h], 0FFFFh
SYSINIT:13BC		     jz	     short FOUNDPB
SYSINIT:13BE		     les     bp, es:[bp+18h]
SYSINIT:13C2		     jmp     short SCANDPB
SYSINIT:13C4 ; ---------------------------------------------------------------------------
SYSINIT:13C4
SYSINIT:13C4 FOUNDPB:				     ; CODE XREF: DOCONF+23Cj
SYSINIT:13C4		     mov     ax, cs:MEMLO
SYSINIT:13C8		     mov     es:[bp+18h], ax
SYSINIT:13CC		     mov     ax, cs:MEMHI
SYSINIT:13D0		     mov     es:[bp+1Ah], ax
SYSINIT:13D4		     les     bp, dword ptr cs:MEMLO
SYSINIT:13D9		     add     cs:MEMLO, 20h ; ' '
SYSINIT:13DF		     call    ROUND
SYSINIT:13E2		     mov     word ptr es:[bp+18h], 0FFFFh
SYSINIT:13E8		     mov     byte ptr es:[bp+17h], 0FFh
SYSINIT:13ED		     mov     si, [bx]
SYSINIT:13EF		     inc     bx
SYSINIT:13F0		     inc     bx
SYSINIT:13F1		     mov     es:[bp+0],	dx
SYSINIT:13F5		     mov     ah, 53h
SYSINIT:13F7		     int     21h	     ; DOS - 2+	internal - TRANSLATE BIOS PARAMETER BLOCK
SYSINIT:13F7					     ; DS:SI ->	BPB (BIOS Parameter Block)
SYSINIT:13F7					     ; ES:BP ->	buffer for DOS Drive Parameter Block
SYSINIT:13F9		     mov     ax, es:[bp+2]
SYSINIT:13FD		     push    es
SYSINIT:13FE		     les     di, dword ptr cs:DOSINFO
SYSINIT:1403		     cmp     ax, es:[di+10h]
SYSINIT:1407		     pop     es
SYSINIT:1408		     jbe     short NOTMAX
SYSINIT:140A		     pop     si
SYSINIT:140B		     pop     es
SYSINIT:140C		     mov     dx, offset	BADSIZ_PRE ; "\r\nSector size too large	in file	$"
SYSINIT:140F		     mov     bx, offset	BADLD_POST ; "\r\n$"
SYSINIT:1412		     call    PRNERR
SYSINIT:1415		     jmp     COFF
SYSINIT:1418 ; ---------------------------------------------------------------------------
SYSINIT:1418
SYSINIT:1418 NOTMAX:				     ; CODE XREF: DOCONF+288j
SYSINIT:1418		     push    ds
SYSINIT:1419		     push    dx
SYSINIT:141A		     lds     dx, dword ptr cs:ENTRY_POINT
SYSINIT:141F		     mov     es:[bp+12h], dx
SYSINIT:1423		     mov     word ptr es:[bp+14h], ds
SYSINIT:1427		     pop     dx
SYSINIT:1428		     pop     ds
SYSINIT:1429		     inc     dx
SYSINIT:142A		     inc     dh
SYSINIT:142C		     loop    PERUNIT
SYSINIT:142E		     push    cs
SYSINIT:142F		     pop     ds
SYSINIT:1430		     assume ds:SYSINIT
SYSINIT:1430		     call    TEMPCDS
SYSINIT:1433
SYSINIT:1433 LINKIT:				     ; CODE XREF: DOCONF:GOLINKj
SYSINIT:1433		     les     di, dword ptr cs:DOSINFO
SYSINIT:1438		     mov     cx, es:[di+22h]
SYSINIT:143C		     mov     dx, es:[di+24h]
SYSINIT:1440		     lds     si, dword ptr cs:ENTRY_POINT
SYSINIT:1445		     assume ds:nothing
SYSINIT:1445		     mov     es:[di+22h], si
SYSINIT:1449		     mov     word ptr es:[di+24h], ds
SYSINIT:144D		     mov     ax, [si]
SYSINIT:144F		     mov     cs:ENTRY_POINT, ax
SYSINIT:1453		     mov     [si], cx
SYSINIT:1455		     mov     [si+2], dx
SYSINIT:1458
SYSINIT:1458 ENDDEV:				     ; CODE XREF: DOCONF+1FEj
SYSINIT:1458		     pop     si
SYSINIT:1459		     pop     es
SYSINIT:145A		     inc     ax
SYSINIT:145B		     jz	     short COFFJ3
SYSINIT:145D		     jmp     GOODLD
SYSINIT:1460 ; ---------------------------------------------------------------------------
SYSINIT:1460
SYSINIT:1460 COFFJ3:				     ; CODE XREF: DOCONF+2DBj
SYSINIT:1460		     jmp     COFF
SYSINIT:1463 ; ---------------------------------------------------------------------------
SYSINIT:1463
SYSINIT:1463 TRYQ:				     ; CODE XREF: DOCONF+FBj
SYSINIT:1463		     cmp     ah, 'Q'
SYSINIT:1466		     jz	     short TRYQ_CONT
SYSINIT:1468		     jmp     TRYF
SYSINIT:146B ; ---------------------------------------------------------------------------
SYSINIT:146B
SYSINIT:146B TRYQ_CONT:				     ; CODE XREF: DOCONF+2E6j
SYSINIT:146B		     call    GETNUM
SYSINIT:146E		     jz	     short TryQBad
SYSINIT:1470		     mov     bx, ax
SYSINIT:1472		     mov     dx, 0
SYSINIT:1475		     call    SKIP_DELIM
SYSINIT:1478		     jb	     short TryQ_Def_File
SYSINIT:147A		     cmp     al, 0Dh
SYSINIT:147C		     jz	     short TryQ_Def_File
SYSINIT:147E		     cmp     al, 0Ah
SYSINIT:1480		     jnz     short TRYQ_YES_EXTENDED
SYSINIT:1482		     inc     ds:COUNT
SYSINIT:1486		     dec     ds:CHRPTR
SYSINIT:148A		     jmp     short TryQ_Def_File
SYSINIT:148C ; ---------------------------------------------------------------------------
SYSINIT:148C		     nop
SYSINIT:148D
SYSINIT:148D TRYQ_YES_EXTENDED:			     ; CODE XREF: DOCONF+300j
SYSINIT:148D		     cmp     al, ','
SYSINIT:148F		     jnz     short TRYQ_GETNUM
SYSINIT:1491		     call    SKIP_DELIM
SYSINIT:1494		     jmp     short TRYQ_PATH
SYSINIT:1496 ; ---------------------------------------------------------------------------
SYSINIT:1496
SYSINIT:1496 TRYQ_GETNUM:			     ; CODE XREF: DOCONF+30Fj
SYSINIT:1496		     call    GETNUM
SYSINIT:1499		     jb	     short TryQBadCOM
SYSINIT:149B		     jz	     short TryQBad
SYSINIT:149D		     mov     dx, ax
SYSINIT:149F		     call    SKIP_DELIM
SYSINIT:14A2		     jb	     short TryQ_Def_File
SYSINIT:14A4		     cmp     al, 0Dh
SYSINIT:14A6		     jz	     short TryQ_Def_File
SYSINIT:14A8		     cmp     al, 0Ah
SYSINIT:14AA		     jnz     short TRYQ_PATH
SYSINIT:14AC		     inc     ds:COUNT
SYSINIT:14B0		     dec     ds:CHRPTR
SYSINIT:14B4
SYSINIT:14B4 TryQ_Def_File:			     ; CODE XREF: DOCONF+2F8j
SYSINIT:14B4					     ; DOCONF+2FCj ...
SYSINIT:14B4		     push    dx
SYSINIT:14B5		     mov     cs:CNTRY_DRV, 0
SYSINIT:14BB		     mov     dx, offset	CNTRY_ROOT ; "\\COUNTRY.SYS"
SYSINIT:14BE		     jmp     short TRYQ_OPEN
SYSINIT:14C0 ; ---------------------------------------------------------------------------
SYSINIT:14C0		     nop
SYSINIT:14C1
SYSINIT:14C1 TryQBad:				     ; CODE XREF: DOCONF+2EEj
SYSINIT:14C1					     ; DOCONF+31Bj ...
SYSINIT:14C1		     stc
SYSINIT:14C2		     mov     dx, offset	BADCOUNTRY ; "\r\nInvalid country code or code page\r"...
SYSINIT:14C5		     jmp     TryQChkErr
SYSINIT:14C8 ; ---------------------------------------------------------------------------
SYSINIT:14C8
SYSINIT:14C8 TryQBadCOM:			     ; CODE XREF: DOCONF+319j
SYSINIT:14C8		     stc
SYSINIT:14C9		     mov     dx, offset	BADCOUNTRYCOM ;	"\r\nError in COUNTRY command\r\n$"
SYSINIT:14CC		     jmp     TryQChkErr
SYSINIT:14CF ; ---------------------------------------------------------------------------
SYSINIT:14CF
SYSINIT:14CF TRYQ_PATH:				     ; CODE XREF: DOCONF+314j
SYSINIT:14CF					     ; DOCONF+32Aj
SYSINIT:14CF		     mov     cx, ds:COUNT
SYSINIT:14D3		     inc     cx
SYSINIT:14D4		     mov     di, si
SYSINIT:14D6
SYSINIT:14D6 TRYQ_PATH_LOOP:			     ; CODE XREF: DOCONF+363j
SYSINIT:14D6		     mov     al, es:[di]
SYSINIT:14D9		     call    DELIM
SYSINIT:14DC		     jz	     short TRYQ_PATH_END
SYSINIT:14DE		     cmp     al, 0Dh
SYSINIT:14E0		     jz	     short TRYQ_PATH_END
SYSINIT:14E2		     inc     di
SYSINIT:14E3		     jmp     short TRYQ_PATH_LOOP
SYSINIT:14E5 ; ---------------------------------------------------------------------------
SYSINIT:14E5
SYSINIT:14E5 TryQBad_Brg:			     ; CODE XREF: DOCONF+3C3j
SYSINIT:14E5		     jmp     short TryQBad
SYSINIT:14E7 ; ---------------------------------------------------------------------------
SYSINIT:14E7
SYSINIT:14E7 TRYQ_PATH_END:			     ; CODE XREF: DOCONF+35Cj
SYSINIT:14E7					     ; DOCONF+360j
SYSINIT:14E7		     mov     byte ptr es:[di], 0
SYSINIT:14EB		     push    ds
SYSINIT:14EC		     push    es
SYSINIT:14ED		     pop     ds
SYSINIT:14EE		     pop     es
SYSINIT:14EF		     mov     di, offset	CNTRY_DRV
SYSINIT:14F2		     call    MOVE_ASCIIZ
SYSINIT:14F5		     push    ds
SYSINIT:14F6		     push    es
SYSINIT:14F7		     pop     ds
SYSINIT:14F8		     pop     es
SYSINIT:14F9		     push    dx
SYSINIT:14FA		     mov     dx, offset	CNTRY_DRV
SYSINIT:14FD
SYSINIT:14FD TRYQ_OPEN:				     ; CODE XREF: DOCONF+33Ej
SYSINIT:14FD		     mov     ax, 3D00h
SYSINIT:1500		     stc
SYSINIT:1501		     int     21h	     ; DOS - 2+	- OPEN DISK FILE WITH HANDLE
SYSINIT:1501					     ; DS:DX ->	ASCIZ filename
SYSINIT:1501					     ; AL = access mode
SYSINIT:1501					     ; 0 - read
SYSINIT:1503		     pop     dx
SYSINIT:1504		     jb	     short TryQFileBad
SYSINIT:1506		     mov     cs:CntryFileHandle, ax
SYSINIT:150A		     xchg    ax, bx
SYSINIT:150B		     mov     cx, cs:MEMHI
SYSINIT:1510		     add     cx, 80h ; ''
SYSINIT:1514		     cmp     cx, cs:ALLOCLIM
SYSINIT:1519		     ja	     short TryQMemory
SYSINIT:151B		     mov     si, offset	CNTRY_DRV
SYSINIT:151E		     cmp     byte ptr [si], 0
SYSINIT:1521		     jnz     short TRYQ_Set_for_DOS
SYSINIT:1523		     inc     si
SYSINIT:1524		     inc     si
SYSINIT:1525
SYSINIT:1525 TRYQ_Set_for_DOS:			     ; CODE XREF: DOCONF+3A1j
SYSINIT:1525		     les     di, cs:SYSI_Country
SYSINIT:152A		     push    di
SYSINIT:152B		     add     di, 8
SYSINIT:152E		     call    MOVE_ASCIIZ
SYSINIT:1531		     pop     di
SYSINIT:1532		     mov     cx, cs:MEMHI
SYSINIT:1537		     mov     ds, cx
SYSINIT:1539		     xor     si, si
SYSINIT:153B		     call    SetDOSCountryInfo
SYSINIT:153E		     jnb     short TryQChkErr
SYSINIT:1540		     cmp     cx, 0FFFFh
SYSINIT:1543		     jz	     short TryQBad_Brg
SYSINIT:1545
SYSINIT:1545 TryQFileBad:			     ; CODE XREF: DOCONF+384j
SYSINIT:1545		     cmp     cs:CNTRY_DRV, 0
SYSINIT:154B		     jz	     short TryQDefBad
SYSINIT:154D		     mov     si, cs:CONFBOT
SYSINIT:1552		     mov     es, si
SYSINIT:1554		     mov     si, cs:CHRPTR
SYSINIT:1559		     dec     si
SYSINIT:155A		     jmp     short TryQBADLOAD
SYSINIT:155C ; ---------------------------------------------------------------------------
SYSINIT:155C
SYSINIT:155C TryQDefBad:			     ; CODE XREF: DOCONF+3CBj
SYSINIT:155C		     push    cs
SYSINIT:155D		     pop     es
SYSINIT:155E		     assume es:SYSINIT
SYSINIT:155E		     mov     si, offset	CNTRY_ROOT ; "\\COUNTRY.SYS"
SYSINIT:1561
SYSINIT:1561 TryQBADLOAD:			     ; CODE XREF: DOCONF+3DAj
SYSINIT:1561		     call    BADLOAD
SYSINIT:1564		     mov     cx, cs:CONFBOT
SYSINIT:1569		     mov     es, cx
SYSINIT:156B		     assume es:nothing
SYSINIT:156B		     jmp     short CoffJ4
SYSINIT:156D ; ---------------------------------------------------------------------------
SYSINIT:156D
SYSINIT:156D TryQMemory:			     ; CODE XREF: DOCONF+399j
SYSINIT:156D		     mov     dx, offset	INSUFMEMORY ; "\r\nInsufficient	memory for COUNTRY.SYS"...
SYSINIT:1570
SYSINIT:1570 TryQChkErr:			     ; CODE XREF: DOCONF+345j
SYSINIT:1570					     ; DOCONF+34Cj ...
SYSINIT:1570		     mov     cx, cs:CONFBOT
SYSINIT:1575		     mov     es, cx
SYSINIT:1577		     push    cs
SYSINIT:1578		     pop     ds
SYSINIT:1579		     assume ds:SYSINIT
SYSINIT:1579		     jnb     short CoffJ4
SYSINIT:157B		     call    PRINT
SYSINIT:157E
SYSINIT:157E CoffJ4:				     ; CODE XREF: DOCONF+3EBj
SYSINIT:157E					     ; DOCONF+3F9j
SYSINIT:157E		     mov     bx, CntryFileHandle
SYSINIT:1582		     mov     ah, 3Eh
SYSINIT:1584		     int     21h	     ; DOS - 2+	- CLOSE	A FILE WITH HANDLE
SYSINIT:1584					     ; BX = file handle
SYSINIT:1586		     jmp     COFF
SYSINIT:1589 ; ---------------------------------------------------------------------------
SYSINIT:1589
SYSINIT:1589 TRYF:				     ; CODE XREF: DOCONF+2E8j
SYSINIT:1589		     cmp     ah, 'F'
SYSINIT:158C		     jnz     short TRYL
SYSINIT:158E		     call    GETNUM
SYSINIT:1591		     cmp     ax, 5
SYSINIT:1594		     jb	     short TRYFBAD
SYSINIT:1596		     cmp     ax, 100h
SYSINIT:1599		     jnb     short TRYFBAD
SYSINIT:159B		     mov     FILES, al
SYSINIT:159E		     jmp     COFF
SYSINIT:15A1 ; ---------------------------------------------------------------------------
SYSINIT:15A1
SYSINIT:15A1 TRYFBAD:				     ; CODE XREF: DOCONF+414j
SYSINIT:15A1					     ; DOCONF+419j
SYSINIT:15A1		     jmp     BADOP
SYSINIT:15A4 ; ---------------------------------------------------------------------------
SYSINIT:15A4
SYSINIT:15A4 TRYL:				     ; CODE XREF: DOCONF+40Cj
SYSINIT:15A4		     cmp     ah, 'L'
SYSINIT:15A7		     jnz     short TRYP
SYSINIT:15A9		     or	     al, 20h
SYSINIT:15AB		     sub     al, 'a'
SYSINIT:15AD		     jb	     short TRYLBAD
SYSINIT:15AF		     inc     al
SYSINIT:15B1		     cmp     al, 26
SYSINIT:15B3		     ja	     short TRYLBAD
SYSINIT:15B5		     mov     NUM_CDS, al
SYSINIT:15B8		     jmp     COFF
SYSINIT:15BB ; ---------------------------------------------------------------------------
SYSINIT:15BB
SYSINIT:15BB TRYLBAD:				     ; CODE XREF: DOCONF+42Dj
SYSINIT:15BB					     ; DOCONF+433j ...
SYSINIT:15BB		     jmp     BADOP
SYSINIT:15BE ; ---------------------------------------------------------------------------
SYSINIT:15BE
SYSINIT:15BE TRYP:				     ; CODE XREF: DOCONF+427j
SYSINIT:15BE		     cmp     ah, 'P'
SYSINIT:15C1		     jnz     short TRYK
SYSINIT:15C3		     call    PARSELINE
SYSINIT:15C6		     jb	     short TRYLBAD
SYSINIT:15C8		     call    SETPARMS
SYSINIT:15CB		     call    DIDDLEBACK
SYSINIT:15CE		     jb	     short TRYLBAD
SYSINIT:15D0		     jmp     COFF
SYSINIT:15D3 ; ---------------------------------------------------------------------------
SYSINIT:15D3
SYSINIT:15D3 TRYK:				     ; CODE XREF: DOCONF+441j
SYSINIT:15D3		     cmp     ah, 'K'
SYSINIT:15D6		     jnz     short TRYW
SYSINIT:15D8		     mov     SEPCHR, 2Ch ; ','
SYSINIT:15DD		     call    GETNUM
SYSINIT:15E0		     mov     SEPCHR, 0
SYSINIT:15E5		     cmp     ax, 0
SYSINIT:15E8		     jz	     short TRYK_0
SYSINIT:15EA		     cmp     ax, 8
SYSINIT:15ED		     jb	     short TryKBad
SYSINIT:15EF		     cmp     ax, 64
SYSINIT:15F2		     ja	     short TryKBad
SYSINIT:15F4
SYSINIT:15F4 TRYK_0:				     ; CODE XREF: DOCONF+468j
SYSINIT:15F4		     mov     STACK_COUNT, ax
SYSINIT:15F7		     call    SKIP_DELIM
SYSINIT:15FA		     jb	     short TryKBad
SYSINIT:15FC		     call    GETNUM
SYSINIT:15FF		     jb	     short TryKBad
SYSINIT:1601		     cmp     ax, 0
SYSINIT:1604		     jz	     short TRYK_SIZE0
SYSINIT:1606		     cmp     ax, 32
SYSINIT:1609		     jb	     short TryKBad
SYSINIT:160B		     cmp     ax, 512
SYSINIT:160E		     ja	     short TryKBad
SYSINIT:1610
SYSINIT:1610 TRYK_SIZE0:			     ; CODE XREF: DOCONF+484j
SYSINIT:1610		     mov     STACK_SIZE, ax
SYSINIT:1613		     cmp     ax, 0
SYSINIT:1616		     jz	     short TRYK_BOTH0
SYSINIT:1618
SYSINIT:1618 TRYK_OK:				     ; CODE XREF: DOCONF+4A6j
SYSINIT:1618		     mov     STACK_ADDR, 0FFFFh
SYSINIT:161E		     jmp     COFF
SYSINIT:1621 ; ---------------------------------------------------------------------------
SYSINIT:1621
SYSINIT:1621 TRYK_BOTH0:			     ; CODE XREF: DOCONF+496j
SYSINIT:1621		     cmp     STACK_COUNT, 0
SYSINIT:1626		     jz	     short TRYK_OK
SYSINIT:1628
SYSINIT:1628 TryKBad:				     ; CODE XREF: DOCONF+46Dj
SYSINIT:1628					     ; DOCONF+472j ...
SYSINIT:1628		     mov     dx, offset	BADSTACK ; "\r\nInvalid	STACK parameters\r\n$"
SYSINIT:162B		     call    PRINT
SYSINIT:162E		     jmp     COFF
SYSINIT:1631 ; ---------------------------------------------------------------------------
SYSINIT:1631
SYSINIT:1631 TRYW:				     ; CODE XREF: DOCONF+456j
SYSINIT:1631		     cmp     ah, 'W'
SYSINIT:1634		     jnz     short TRYA
SYSINIT:1636		     jmp     BADOP
SYSINIT:1639 ; ---------------------------------------------------------------------------
SYSINIT:1639
SYSINIT:1639 TRYA:				     ; CODE XREF: DOCONF+4B4j
SYSINIT:1639		     cmp     ah, 'A'
SYSINIT:163C		     jnz     short TRYS
SYSINIT:163E		     jmp     BADOP
SYSINIT:1641 ; ---------------------------------------------------------------------------
SYSINIT:1641
SYSINIT:1641 TRYS:				     ; CODE XREF: DOCONF+4BCj
SYSINIT:1641		     cmp     ah, 'S'
SYSINIT:1644		     jnz     short TRYX
SYSINIT:1646		     mov     COMMAND_LINE_1, 0
SYSINIT:164B		     mov     di, (offset COMMND+1)
SYSINIT:164E		     mov     [di-1], al
SYSINIT:1651
SYSINIT:1651 STORESHELL:			     ; CODE XREF: DOCONF+4DFj
SYSINIT:1651		     call    GETCHR
SYSINIT:1654		     or	     al, al
SYSINIT:1656		     jz	     short GETSHPARMS
SYSINIT:1658		     cmp     al, 20h ; ' '
SYSINIT:165A		     jb	     short ENDSH
SYSINIT:165C		     mov     [di], al
SYSINIT:165E		     inc     di
SYSINIT:165F		     jmp     short STORESHELL
SYSINIT:1661 ; ---------------------------------------------------------------------------
SYSINIT:1661
SYSINIT:1661 ENDSH:				     ; CODE XREF: DOCONF+4DAj
SYSINIT:1661					     ; DOCONF+52Fj
SYSINIT:1661		     mov     byte ptr [di], 0
SYSINIT:1664		     call    GETCHR
SYSINIT:1667		     cmp     al, 0Ah
SYSINIT:1669		     jnz     short CONV
SYSINIT:166B		     call    GETCHR
SYSINIT:166E
SYSINIT:166E CONV:				     ; CODE XREF: DOCONF+4E9j
SYSINIT:166E		     jmp     CONFLP
SYSINIT:1671 ; ---------------------------------------------------------------------------
SYSINIT:1671
SYSINIT:1671 TRYX:				     ; CODE XREF: DOCONF+4C4j
SYSINIT:1671		     cmp     ah, 'X'
SYSINIT:1674		     jnz     short TRYZ
SYSINIT:1676		     call    GETNUM
SYSINIT:1679		     jz	     short TRYXBAD
SYSINIT:167B		     cmp     ax, 256
SYSINIT:167E		     jnb     short TRYXBAD
SYSINIT:1680		     mov     FCBS, al
SYSINIT:1683		     call    SKIP_DELIM
SYSINIT:1686		     jb	     short TRYXBAD
SYSINIT:1688		     call    GETNUM
SYSINIT:168B		     jb	     short TRYXBAD
SYSINIT:168D		     cmp     ax, 256
SYSINIT:1690		     jnb     short TRYXBAD
SYSINIT:1692		     cmp     al, FCBS
SYSINIT:1696		     ja	     short TRYXBAD
SYSINIT:1698		     mov     KEEP, al
SYSINIT:169B		     jmp     COFF
SYSINIT:169E ; ---------------------------------------------------------------------------
SYSINIT:169E
SYSINIT:169E TRYXBAD:				     ; CODE XREF: DOCONF+4F9j
SYSINIT:169E					     ; DOCONF+4FEj ...
SYSINIT:169E		     jmp     BADOP
SYSINIT:16A1 ; ---------------------------------------------------------------------------
SYSINIT:16A1
SYSINIT:16A1 TRYZ:				     ; CODE XREF: DOCONF+4F4j
SYSINIT:16A1		     jmp     BADOP
SYSINIT:16A4 ; ---------------------------------------------------------------------------
SYSINIT:16A4
SYSINIT:16A4 GETSHPARMS:			     ; CODE XREF: DOCONF+4D6j
SYSINIT:16A4		     mov     byte ptr [di], 0
SYSINIT:16A7		     mov     di, offset	COMMAND_LINE_1
SYSINIT:16AA
SYSINIT:16AA PARMLOOP:				     ; CODE XREF: DOCONF+534j
SYSINIT:16AA		     call    GETCHR
SYSINIT:16AD		     cmp     al, 20h ; ' '
SYSINIT:16AF		     jb	     short ENDSH
SYSINIT:16B1		     mov     [di], al
SYSINIT:16B3		     inc     di
SYSINIT:16B4		     jmp     short PARMLOOP
SYSINIT:16B4 DOCONF	     endp
SYSINIT:16B4
SYSINIT:16B6
SYSINIT:16B6 ; =============== S U B R O U T I N E =======================================
SYSINIT:16B6
SYSINIT:16B6
SYSINIT:16B6 GETCHR	     proc near		     ; CODE XREF: DOCONF+9Ap
SYSINIT:16B6					     ; DOCONF+A1p ...
SYSINIT:16B6		     push    cx
SYSINIT:16B7		     mov     cx, COUNT
SYSINIT:16BB		     jcxz    short NOCHAR
SYSINIT:16BD		     mov     si, CHRPTR
SYSINIT:16C1		     mov     al, es:[si]
SYSINIT:16C4		     dec     COUNT
SYSINIT:16C8		     inc     CHRPTR
SYSINIT:16CC		     clc
SYSINIT:16CD
SYSINIT:16CD GET_RET:				     ; CODE XREF: GETCHR+1Aj
SYSINIT:16CD		     pop     cx
SYSINIT:16CE		     retn
SYSINIT:16CF ; ---------------------------------------------------------------------------
SYSINIT:16CF
SYSINIT:16CF NOCHAR:				     ; CODE XREF: GETCHR+5j
SYSINIT:16CF		     stc
SYSINIT:16D0		     jmp     short GET_RET
SYSINIT:16D0 GETCHR	     endp
SYSINIT:16D0
SYSINIT:16D2
SYSINIT:16D2 ; =============== S U B R O U T I N E =======================================
SYSINIT:16D2
SYSINIT:16D2
SYSINIT:16D2 SETPARMS	     proc near		     ; CODE XREF: DOCONF+448p
SYSINIT:16D2		     push    ds
SYSINIT:16D3		     push    ax
SYSINIT:16D4		     push    bx
SYSINIT:16D5		     push    cx
SYSINIT:16D6		     push    dx
SYSINIT:16D7		     xor     bx, bx
SYSINIT:16D9		     mov     bl, DRIVE
SYSINIT:16DD		     inc     bl
SYSINIT:16DF		     push    cs
SYSINIT:16E0		     pop     ds
SYSINIT:16E1		     mov     dx, offset	DEVICEPARAMETERS
SYSINIT:16E4		     mov     ah, 44h ; 'D'
SYSINIT:16E6		     mov     al, 0Dh
SYSINIT:16E8		     mov     ch, 8
SYSINIT:16EA		     mov     cl, 40h ; '@'
SYSINIT:16EC		     int     21h	     ; DOS - 2+	- IOCTL	-
SYSINIT:16EE		     pop     dx
SYSINIT:16EF		     pop     cx
SYSINIT:16F0		     pop     bx
SYSINIT:16F1		     pop     ax
SYSINIT:16F2		     pop     ds
SYSINIT:16F3		     assume ds:nothing
SYSINIT:16F3		     retn
SYSINIT:16F3 SETPARMS	     endp
SYSINIT:16F3
SYSINIT:16F4
SYSINIT:16F4 ; =============== S U B R O U T I N E =======================================
SYSINIT:16F4
SYSINIT:16F4
SYSINIT:16F4 DIDDLEBACK	     proc near		     ; CODE XREF: DOCONF+44Bp
SYSINIT:16F4		     mov     ds:DP_CYLINDERS, 80
SYSINIT:16FA		     mov     ds:DP_DEVTYPE, 2
SYSINIT:16FF		     mov     ds:DP_DEVATTRIB, 0
SYSINIT:1705		     mov     ds:SWITCHES, 0
SYSINIT:170B		     retn
SYSINIT:170B DIDDLEBACK	     endp
SYSINIT:170B
SYSINIT:170C
SYSINIT:170C ; =============== S U B R O U T I N E =======================================
SYSINIT:170C
SYSINIT:170C
SYSINIT:170C PARSELINE	     proc near		     ; CODE XREF: DOCONF+443p
SYSINIT:170C		     push    ds
SYSINIT:170D		     push    cs
SYSINIT:170E		     pop     ds
SYSINIT:170F		     assume ds:SYSINIT
SYSINIT:170F
SYSINIT:170F NextSwtch:				     ; CODE XREF: PARSELINE+24j
SYSINIT:170F		     cmp     al, 0Dh
SYSINIT:1711		     jz	     short done_line
SYSINIT:1713		     cmp     al, 0Ah
SYSINIT:1715		     jz	     short put_back
SYSINIT:1717		     cmp     al, 20h ; ' '
SYSINIT:1719		     jbe     short get_next
SYSINIT:171B		     cmp     al, 2Fh ; '/'
SYSINIT:171D		     jz	     short getparm
SYSINIT:171F		     stc
SYSINIT:1720		     jmp     short exitpl
SYSINIT:1722 ; ---------------------------------------------------------------------------
SYSINIT:1722
SYSINIT:1722 getparm:				     ; CODE XREF: PARSELINE+11j
SYSINIT:1722		     call    Check_Switch
SYSINIT:1725		     mov     SWITCHES, bx
SYSINIT:1729		     jb	     short swterr
SYSINIT:172B
SYSINIT:172B get_next:				     ; CODE XREF: PARSELINE+Dj
SYSINIT:172B		     call    GETCHR
SYSINIT:172E		     jb	     short done_line
SYSINIT:1730		     jmp     short NextSwtch
SYSINIT:1732 ; ---------------------------------------------------------------------------
SYSINIT:1732
SYSINIT:1732 swterr:				     ; CODE XREF: PARSELINE+1Dj
SYSINIT:1732		     jmp     short exitpl
SYSINIT:1734 ; ---------------------------------------------------------------------------
SYSINIT:1734		     nop
SYSINIT:1735
SYSINIT:1735 done_line:				     ; CODE XREF: PARSELINE+5j
SYSINIT:1735					     ; PARSELINE+22j ...
SYSINIT:1735		     test    SWITCHES, 4
SYSINIT:173B		     jnz     short okay
SYSINIT:173D		     stc
SYSINIT:173E		     jmp     short exitpl
SYSINIT:1740 ; ---------------------------------------------------------------------------
SYSINIT:1740
SYSINIT:1740 okay:				     ; CODE XREF: PARSELINE+2Fj
SYSINIT:1740		     mov     ax, SWITCHES
SYSINIT:1743		     and     ax, 3
SYSINIT:1746		     mov     DP_DEVATTRIB, ax
SYSINIT:1749		     mov     word_51AF,	0
SYSINIT:174F		     clc
SYSINIT:1750		     call    SetDeviceParameters
SYSINIT:1753
SYSINIT:1753 exitpl:				     ; CODE XREF: PARSELINE+14j
SYSINIT:1753					     ; PARSELINE:swterrj ...
SYSINIT:1753		     pop     ds
SYSINIT:1754		     assume ds:nothing
SYSINIT:1754		     retn
SYSINIT:1755 ; ---------------------------------------------------------------------------
SYSINIT:1755
SYSINIT:1755 put_back:				     ; CODE XREF: PARSELINE+9j
SYSINIT:1755		     inc     ds:COUNT
SYSINIT:1759		     dec     ds:CHRPTR
SYSINIT:175D		     jmp     short done_line
SYSINIT:175D PARSELINE	     endp
SYSINIT:175D
SYSINIT:175F
SYSINIT:175F ; =============== S U B R O U T I N E =======================================
SYSINIT:175F
SYSINIT:175F
SYSINIT:175F Check_Switch    proc near		     ; CODE XREF: PARSELINE:getparmp
SYSINIT:175F		     call    GETCHR
SYSINIT:1762		     jb	     short err_check
SYSINIT:1764		     and     al, 0DFh
SYSINIT:1766		     cmp     al, 'A'
SYSINIT:1768		     jb	     short err_check
SYSINIT:176A		     cmp     al, 'Z'
SYSINIT:176C		     ja	     short err_check
SYSINIT:176E		     push    es
SYSINIT:176F		     push    cs
SYSINIT:1770		     pop     es
SYSINIT:1771		     assume es:SYSINIT
SYSINIT:1771		     mov     cl, ds:swtch_list
SYSINIT:1775		     mov     ch, 0
SYSINIT:1777		     mov     di, offset	swtch_list_1 ; "FHSTDCN"
SYSINIT:177A		     repne scasb
SYSINIT:177C		     pop     es
SYSINIT:177D		     assume es:nothing
SYSINIT:177D		     jnz     short err_check
SYSINIT:177F		     mov     ax, 1
SYSINIT:1782		     shl     ax, cl
SYSINIT:1784		     mov     bx, ds:SWITCHES
SYSINIT:1788		     or	     bx, ax
SYSINIT:178A		     mov     cx, ax
SYSINIT:178C		     test    ax, 7Ch
SYSINIT:178F		     jz	     short done_swtc
SYSINIT:1791		     call    GETCHR
SYSINIT:1794		     jb	     short err_swtch
SYSINIT:1796		     cmp     al, ':'
SYSINIT:1798		     jnz     short err_swtch
SYSINIT:179A		     call    GETCHR
SYSINIT:179D		     push    bx
SYSINIT:179E		     mov     cs:SEPCHR,	20h ; ' '
SYSINIT:17A4		     call    GETNUM
SYSINIT:17A7		     mov     cs:SEPCHR,	0
SYSINIT:17AD		     pop     bx
SYSINIT:17AE		     call    Process_Num
SYSINIT:17B1
SYSINIT:17B1 done_swtc:				     ; CODE XREF: Check_Switch+30j
SYSINIT:17B1		     clc
SYSINIT:17B2		     retn
SYSINIT:17B3 ; ---------------------------------------------------------------------------
SYSINIT:17B3
SYSINIT:17B3 err_swtch:				     ; CODE XREF: Check_Switch+35j
SYSINIT:17B3					     ; Check_Switch+39j
SYSINIT:17B3		     xor     bx, cx
SYSINIT:17B5
SYSINIT:17B5 err_check:				     ; CODE XREF: Check_Switch+3j
SYSINIT:17B5					     ; Check_Switch+9j	...
SYSINIT:17B5		     stc
SYSINIT:17B6		     retn
SYSINIT:17B6 Check_Switch    endp
SYSINIT:17B6
SYSINIT:17B7
SYSINIT:17B7 ; =============== S U B R O U T I N E =======================================
SYSINIT:17B7
SYSINIT:17B7
SYSINIT:17B7 Process_Num     proc near		     ; CODE XREF: Check_Switch+4Fp
SYSINIT:17B7		     test    ds:SWITCHES, cx
SYSINIT:17BB		     jnz     short done_ret
SYSINIT:17BD		     test    cx, 4
SYSINIT:17C1		     jz	     short try_f
SYSINIT:17C3		     mov     ds:DRIVE, al
SYSINIT:17C6		     jmp     short done_ret
SYSINIT:17C8 ; ---------------------------------------------------------------------------
SYSINIT:17C8
SYSINIT:17C8 try_f:				     ; CODE XREF: Process_Num+Aj
SYSINIT:17C8		     test    cx, 40h
SYSINIT:17CC		     jz	     short try_t
SYSINIT:17CE		     mov     ds:DP_DEVTYPE, al
SYSINIT:17D1		     jmp     short done_ret
SYSINIT:17D3 ; ---------------------------------------------------------------------------
SYSINIT:17D3
SYSINIT:17D3 try_t:				     ; CODE XREF: Process_Num+15j
SYSINIT:17D3		     or	     ax, ax
SYSINIT:17D5		     jz	     short done_ret
SYSINIT:17D7		     test    cx, 8
SYSINIT:17DB		     jz	     short try_s
SYSINIT:17DD		     mov     ds:DP_CYLINDERS, ax
SYSINIT:17E0		     jmp     short done_ret
SYSINIT:17E2 ; ---------------------------------------------------------------------------
SYSINIT:17E2
SYSINIT:17E2 try_s:				     ; CODE XREF: Process_Num+24j
SYSINIT:17E2		     test    cx, 10h
SYSINIT:17E6		     jz	     short try_h
SYSINIT:17E8		     mov     ds:SLIM, ax
SYSINIT:17EB		     jmp     short done_ret
SYSINIT:17ED ; ---------------------------------------------------------------------------
SYSINIT:17ED
SYSINIT:17ED try_h:				     ; CODE XREF: Process_Num+2Fj
SYSINIT:17ED		     mov     ds:HLIM, ax
SYSINIT:17F0
SYSINIT:17F0 done_ret:				     ; CODE XREF: Process_Num+4j
SYSINIT:17F0					     ; Process_Num+Fj ...
SYSINIT:17F0		     clc
SYSINIT:17F1		     retn
SYSINIT:17F1 Process_Num     endp
SYSINIT:17F1
SYSINIT:17F2
SYSINIT:17F2 ; =============== S U B R O U T I N E =======================================
SYSINIT:17F2
SYSINIT:17F2
SYSINIT:17F2 SetDeviceParameters proc near	     ; CODE XREF: PARSELINE+44p
SYSINIT:17F2		     push    es
SYSINIT:17F3		     push    cs
SYSINIT:17F4		     pop     es
SYSINIT:17F5		     assume es:SYSINIT
SYSINIT:17F5		     xor     bx, bx
SYSINIT:17F7		     mov     bl, ds:DP_DEVTYPE
SYSINIT:17FB		     cmp     bl, 0
SYSINIT:17FE		     jnz     short Got_80
SYSINIT:1800		     mov     cx, 40
SYSINIT:1803		     mov     ds:DP_CYLINDERS, cx
SYSINIT:1807
SYSINIT:1807 Got_80:				     ; CODE XREF: SetDeviceParameters+Cj
SYSINIT:1807		     shl     bx, 1
SYSINIT:1809		     mov     si, offset	BPB_Table
SYSINIT:180C		     mov     si, [bx+si]
SYSINIT:180E		     mov     di, offset	DP_BYTESPERSEC
SYSINIT:1811		     mov     cx, 31
SYSINIT:1814		     cld
SYSINIT:1815		     rep movsb
SYSINIT:1817		     pop     es
SYSINIT:1818		     assume es:nothing
SYSINIT:1818		     test    ds:SWITCHES, 10h
SYSINIT:181E		     jz	     short see_heads
SYSINIT:1820		     mov     ax, ds:SLIM
SYSINIT:1823		     mov     ds:DP_SECPERTRACK,	ax
SYSINIT:1826
SYSINIT:1826 see_heads:				     ; CODE XREF: SetDeviceParameters+2Cj
SYSINIT:1826		     test    word ptr ds:1E22h,	20h
SYSINIT:182C		     jz	     short Set_All_Done
SYSINIT:182E		     mov     ax, ds:HLIM
SYSINIT:1831		     mov     ds:DP_HEADS, ax
SYSINIT:1834		     mov     cx, ax
SYSINIT:1836		     dec     cl
SYSINIT:1838		     mov     ax, ds:DP_TOTALSECTORS
SYSINIT:183B		     sar     ax, 1
SYSINIT:183D		     shl     ax, cl
SYSINIT:183F		     jb	     short Set_All_Done
SYSINIT:1841		     mov     ds:DP_TOTALSECTORS, ax
SYSINIT:1844		     cmp     cl, 1
SYSINIT:1847		     mov     bl, 0F0h ;	'ð'
SYSINIT:1849		     mov     al, 2
SYSINIT:184B		     ja	     short Got_Correct_Mediad
SYSINIT:184D		     mov     bl, ds:DP_MEDIAID
SYSINIT:1851		     jz	     short Got_Correct_Mediad
SYSINIT:1853		     mov     al, 1
SYSINIT:1855		     mov     ch, ds:DP_DEVTYPE
SYSINIT:1859		     cmp     ch, 0
SYSINIT:185C		     jz	     short Dec_Mediad
SYSINIT:185E		     mov     bl, 0F0h ;	'ð'
SYSINIT:1860		     jmp     short Got_Correct_Mediad
SYSINIT:1862 ; ---------------------------------------------------------------------------
SYSINIT:1862
SYSINIT:1862 Dec_Mediad:			     ; CODE XREF: SetDeviceParameters+6Aj
SYSINIT:1862		     dec     bl
SYSINIT:1864
SYSINIT:1864 Got_Correct_Mediad:		     ; CODE XREF: SetDeviceParameters+59j
SYSINIT:1864					     ; SetDeviceParameters+5Fj	...
SYSINIT:1864		     mov     ds:DP_MEDIAID, bl
SYSINIT:1868		     mov     ds:DP_SECPERCLUS, al
SYSINIT:186B		     clc
SYSINIT:186C
SYSINIT:186C Set_All_Done:			     ; CODE XREF: SetDeviceParameters+3Aj
SYSINIT:186C					     ; SetDeviceParameters+4Dj
SYSINIT:186C		     retn
SYSINIT:186C SetDeviceParameters endp
SYSINIT:186C
SYSINIT:186D ; ---------------------------------------------------------------------------
SYSINIT:186D ; START OF	FUNCTION CHUNK FOR ORGANIZE
SYSINIT:186D
SYSINIT:186D NOCHAR1:				     ; CODE XREF: ORGANIZE+5j
SYSINIT:186D		     stc
SYSINIT:186E		     retn
SYSINIT:186E ; END OF FUNCTION CHUNK FOR ORGANIZE
SYSINIT:186F
SYSINIT:186F ; =============== S U B R O U T I N E =======================================
SYSINIT:186F
SYSINIT:186F
SYSINIT:186F ORGANIZE	     proc near		     ; CODE XREF: DOCONF:GETCOMp
SYSINIT:186F
SYSINIT:186F ; FUNCTION	CHUNK AT SYSINIT:186D SIZE 00000002 BYTES
SYSINIT:186F
SYSINIT:186F		     mov     cx, cs:COUNT
SYSINIT:1874		     jcxz    short NOCHAR1
SYSINIT:1876		     call    MAPCASE
SYSINIT:1879		     xor     si, si
SYSINIT:187B		     mov     di, si
SYSINIT:187D
SYSINIT:187D ORG1:				     ; CODE XREF: ORGANIZE+13j
SYSINIT:187D					     ; ORGANIZE+56j ...
SYSINIT:187D		     call    GET
SYSINIT:1880		     cmp     al, 20h ; ' '
SYSINIT:1882		     jb	     short ORG1
SYSINIT:1884		     push    cx
SYSINIT:1885		     push    si
SYSINIT:1886		     push    di
SYSINIT:1887		     mov     bp, si
SYSINIT:1889		     dec     bp
SYSINIT:188A		     mov     si, offset	COMTAB
SYSINIT:188D		     mov     ch, 0
SYSINIT:188F
SYSINIT:188F FINDCOM:				     ; CODE XREF: ORGANIZE+2Ej
SYSINIT:188F		     mov     di, bp
SYSINIT:1891		     mov     cl, [si]
SYSINIT:1893		     inc     si
SYSINIT:1894		     jcxz    short NOCOM
SYSINIT:1896		     repe cmpsb
SYSINIT:1898		     lahf
SYSINIT:1899		     add     si, cx
SYSINIT:189B		     sahf
SYSINIT:189C		     lodsb
SYSINIT:189D		     jnz     short FINDCOM
SYSINIT:189F		     pop     di
SYSINIT:18A0		     pop     si
SYSINIT:18A1		     pop     cx
SYSINIT:18A2		     jmp     short GOTCOM
SYSINIT:18A4 ; ---------------------------------------------------------------------------
SYSINIT:18A4
SYSINIT:18A4 NOCOM:				     ; CODE XREF: ORGANIZE+25j
SYSINIT:18A4		     pop     di
SYSINIT:18A5		     pop     si
SYSINIT:18A6		     pop     cx
SYSINIT:18A7		     mov     al, 'Z'
SYSINIT:18A9
SYSINIT:18A9 GOTCOM:				     ; CODE XREF: ORGANIZE+33j
SYSINIT:18A9		     stosb
SYSINIT:18AA
SYSINIT:18AA ORG2:				     ; CODE XREF: ORGANIZE+41j
SYSINIT:18AA		     call    GET2
SYSINIT:18AD		     call    DELIM
SYSINIT:18B0		     jnz     short ORG2
SYSINIT:18B2		     call    GET
SYSINIT:18B5		     stosb
SYSINIT:18B6
SYSINIT:18B6 ORG4:				     ; CODE XREF: ORGANIZE+52j
SYSINIT:18B6		     call    GET2
SYSINIT:18B9		     call    DELIM
SYSINIT:18BC		     jz	     short ORG_EXT
SYSINIT:18BE		     stosb
SYSINIT:18BF		     cmp     al, 20h ; ' '
SYSINIT:18C1		     ja	     short ORG4
SYSINIT:18C3		     cmp     al, 0Ah
SYSINIT:18C5		     jz	     short ORG1
SYSINIT:18C7		     mov     byte ptr es:[di-1], 0
SYSINIT:18CC
SYSINIT:18CC ORG5:				     ; CODE XREF: ORGANIZE+63j
SYSINIT:18CC					     ; ORGANIZE+6Dj
SYSINIT:18CC		     call    GET2
SYSINIT:18CF		     stosb
SYSINIT:18D0		     cmp     al, 0Ah
SYSINIT:18D2		     jnz     short ORG5
SYSINIT:18D4		     jmp     short ORG1
SYSINIT:18D6 ; ---------------------------------------------------------------------------
SYSINIT:18D6
SYSINIT:18D6 ORG_EXT:				     ; CODE XREF: ORGANIZE+4Dj
SYSINIT:18D6		     mov     byte ptr es:[di], 0
SYSINIT:18DA		     inc     di
SYSINIT:18DB		     stosb
SYSINIT:18DC		     jmp     short ORG5
SYSINIT:18DC ORGANIZE	     endp
SYSINIT:18DC
SYSINIT:18DE
SYSINIT:18DE ; =============== S U B R O U T I N E =======================================
SYSINIT:18DE
SYSINIT:18DE
SYSINIT:18DE GET2	     proc near		     ; CODE XREF: ORGANIZE:ORG2p
SYSINIT:18DE					     ; ORGANIZE:ORG4p ...
SYSINIT:18DE
SYSINIT:18DE ; FUNCTION	CHUNK AT SYSINIT:190E SIZE 0000000E BYTES
SYSINIT:18DE
SYSINIT:18DE		     jcxz    short NOGET
SYSINIT:18E0		     mov     al, es:[si]
SYSINIT:18E3		     inc     si
SYSINIT:18E4		     dec     cx
SYSINIT:18E5		     retn
SYSINIT:18E5 GET2	     endp
SYSINIT:18E5
SYSINIT:18E6
SYSINIT:18E6 ; =============== S U B R O U T I N E =======================================
SYSINIT:18E6
SYSINIT:18E6
SYSINIT:18E6 GET	     proc near		     ; CODE XREF: ORGANIZE:ORG1p
SYSINIT:18E6					     ; ORGANIZE+43p ...
SYSINIT:18E6		     jcxz    short NOGET
SYSINIT:18E8		     mov     al, es:[si]
SYSINIT:18EB		     inc     si
SYSINIT:18EC		     dec     cx
SYSINIT:18ED		     call    DELIM
SYSINIT:18F0		     jz	     short GET
SYSINIT:18F2
SYSINIT:18F2 GRET:				     ; CODE XREF: DELIM+2j
SYSINIT:18F2					     ; DELIM+6j ...
SYSINIT:18F2		     retn
SYSINIT:18F2 GET	     endp
SYSINIT:18F2
SYSINIT:18F3
SYSINIT:18F3 ; =============== S U B R O U T I N E =======================================
SYSINIT:18F3
SYSINIT:18F3
SYSINIT:18F3 DELIM	     proc near		     ; CODE XREF: DOCONF+359p
SYSINIT:18F3					     ; ORGANIZE+3Ep ...
SYSINIT:18F3		     cmp     al, ' '
SYSINIT:18F5		     jz	     short GRET
SYSINIT:18F7		     cmp     al, 9
SYSINIT:18F9		     jz	     short GRET
SYSINIT:18FB		     cmp     al, '='
SYSINIT:18FD		     jz	     short GRET
SYSINIT:18FF		     cmp     al, ','
SYSINIT:1901		     jz	     short GRET
SYSINIT:1903		     cmp     al, ';'
SYSINIT:1905		     jz	     short GRET
SYSINIT:1907		     cmp     al, '/'
SYSINIT:1909		     jz	     short GRET
SYSINIT:190B		     cmp     al, 0
SYSINIT:190D		     retn
SYSINIT:190D DELIM	     endp
SYSINIT:190D
SYSINIT:190E ; ---------------------------------------------------------------------------
SYSINIT:190E ; START OF	FUNCTION CHUNK FOR GET2
SYSINIT:190E
SYSINIT:190E NOGET:				     ; CODE XREF: GET2j GETj
SYSINIT:190E		     pop     cx
SYSINIT:190F		     mov     cs:COUNT, di
SYSINIT:1914		     xor     si, si
SYSINIT:1916		     mov     cs:CHRPTR,	si
SYSINIT:191B
SYSINIT:191B NONEW:				     ; CODE XREF: NEWLINE+3j
SYSINIT:191B		     retn
SYSINIT:191B ; END OF FUNCTION CHUNK FOR GET2
SYSINIT:191C
SYSINIT:191C ; =============== S U B R O U T I N E =======================================
SYSINIT:191C
SYSINIT:191C
SYSINIT:191C NEWLINE	     proc near		     ; CODE XREF: DOCONF+ABp
SYSINIT:191C					     ; NEWLINE+7j
SYSINIT:191C		     call    GETCHR
SYSINIT:191F		     jb	     short NONEW
SYSINIT:1921		     cmp     al, 0Ah
SYSINIT:1923		     jnz     short NEWLINE
SYSINIT:1925		     call    GETCHR
SYSINIT:1928		     retn
SYSINIT:1928 NEWLINE	     endp
SYSINIT:1928
SYSINIT:1929
SYSINIT:1929 ; =============== S U B R O U T I N E =======================================
SYSINIT:1929
SYSINIT:1929
SYSINIT:1929 MAPCASE	     proc near		     ; CODE XREF: ORGANIZE+7p
SYSINIT:1929		     push    cx
SYSINIT:192A		     push    si
SYSINIT:192B		     push    ds
SYSINIT:192C		     push    es
SYSINIT:192D		     pop     ds
SYSINIT:192E		     xor     si, si
SYSINIT:1930
SYSINIT:1930 CONVLOOP:				     ; CODE XREF: MAPCASE:NOCONVj
SYSINIT:1930		     lodsb
SYSINIT:1931		     cmp     al, 'a'
SYSINIT:1933		     jb	     short NOCONV
SYSINIT:1935		     cmp     al, 'z'
SYSINIT:1937		     ja	     short NOCONV
SYSINIT:1939		     sub     al, 20h
SYSINIT:193B		     mov     [si-1], al
SYSINIT:193E
SYSINIT:193E NOCONV:				     ; CODE XREF: MAPCASE+Aj
SYSINIT:193E					     ; MAPCASE+Ej
SYSINIT:193E		     loop    CONVLOOP
SYSINIT:1940		     pop     ds
SYSINIT:1941		     pop     si
SYSINIT:1942		     pop     cx
SYSINIT:1943		     retn
SYSINIT:1943 MAPCASE	     endp
SYSINIT:1943
SYSINIT:1944 ; ---------------------------------------------------------------------------
SYSINIT:1944 ; START OF	FUNCTION CHUNK FOR SET_BREAK
SYSINIT:1944
SYSINIT:1944 Yes_Break_Failed:			     ; CODE XREF: SET_BREAK+12j
SYSINIT:1944		     stc
SYSINIT:1945		     pop     ax
SYSINIT:1946		     retn
SYSINIT:1946 ; END OF FUNCTION CHUNK FOR SET_BREAK
SYSINIT:1947
SYSINIT:1947 ; =============== S U B R O U T I N E =======================================
SYSINIT:1947
SYSINIT:1947
SYSINIT:1947 SET_BREAK	     proc near		     ; CODE XREF: DOCONF+1D1p
SYSINIT:1947					     ; DOCONF:OK_BLOCKp
SYSINIT:1947
SYSINIT:1947 ; FUNCTION	CHUNK AT SYSINIT:1944 SIZE 00000003 BYTES
SYSINIT:1947
SYSINIT:1947		     push    ax
SYSINIT:1948		     mov     ax, cs:BREAK_ADDR_SEG
SYSINIT:194C		     cmp     ax, cs:MEMHI
SYSINIT:1951		     jnz     short Set_Break_Continue
SYSINIT:1953		     cmp     cs:BREAK_ADDR, 0
SYSINIT:1959		     jz	     short Yes_Break_Failed
SYSINIT:195B
SYSINIT:195B Set_Break_Continue:		     ; CODE XREF: SET_BREAK+Aj
SYSINIT:195B		     mov     cs:MEMHI, ax
SYSINIT:195F		     mov     ax, cs:BREAK_ADDR
SYSINIT:1963		     mov     cs:MEMLO, ax
SYSINIT:1967		     pop     ax
SYSINIT:1967 SET_BREAK	     endp
SYSINIT:1967
SYSINIT:1968
SYSINIT:1968 ; =============== S U B R O U T I N E =======================================
SYSINIT:1968
SYSINIT:1968
SYSINIT:1968 ROUND	     proc near		     ; CODE XREF: ENDFILE+Ap
SYSINIT:1968					     ; ENDFILE+51p ...
SYSINIT:1968
SYSINIT:1968 ; FUNCTION	CHUNK AT SYSINIT:0B2A SIZE 00000002 BYTES
SYSINIT:1968
SYSINIT:1968		     push    ax
SYSINIT:1969		     mov     ax, cs:MEMLO
SYSINIT:196D		     call    ParaRound
SYSINIT:1970		     add     cs:MEMHI, ax
SYSINIT:1975		     mov     cs:MEMLO, 0
SYSINIT:197C		     mov     ax, cs:MEMHI
SYSINIT:1980		     cmp     ax, cs:ALLOCLIM
SYSINIT:1985		     jnb     short MEM_ERR
SYSINIT:1987		     pop     ax
SYSINIT:1988		     clc
SYSINIT:1989		     retn
SYSINIT:198A ; ---------------------------------------------------------------------------
SYSINIT:198A
SYSINIT:198A MEM_ERR:				     ; CODE XREF: SYSINIT:MEMERRJXj
SYSINIT:198A					     ; DOCONF:MEM_ERRJYj ...
SYSINIT:198A		     mov     dx, offset	BADMEM ; "\r\nConfiguration too	large for memory\"...
SYSINIT:198D		     push    cs
SYSINIT:198E		     pop     ds
SYSINIT:198F		     assume ds:SYSINIT
SYSINIT:198F		     call    PRINT
SYSINIT:1992		     jmp     STALL
SYSINIT:1992 ROUND	     endp
SYSINIT:1992
SYSINIT:1995
SYSINIT:1995 ; =============== S U B R O U T I N E =======================================
SYSINIT:1995
SYSINIT:1995
SYSINIT:1995 CALLDEV	     proc near		     ; CODE XREF: DOCONF+19Fp
SYSINIT:1995					     ; DOCONF+1A5p
SYSINIT:1995		     mov     ds, cs:FINAL_DOS_LOCATION
SYSINIT:199A		     assume ds:nothing
SYSINIT:199A		     add     bx, cs:ENTRY_POINT
SYSINIT:199F		     mov     ax, [bx]
SYSINIT:19A1		     push    cs:ENTRY_POINT
SYSINIT:19A6		     mov     cs:ENTRY_POINT, ax
SYSINIT:19AA		     mov     bx, offset	PACKET
SYSINIT:19AD		     call    dword ptr cs:ENTRY_POINT
SYSINIT:19B2		     pop     cs:ENTRY_POINT
SYSINIT:19B7		     retn
SYSINIT:19B7 CALLDEV	     endp
SYSINIT:19B7
SYSINIT:19B8 ; ---------------------------------------------------------------------------
SYSINIT:19B8 ; START OF	FUNCTION CHUNK FOR GETNUM
SYSINIT:19B8
SYSINIT:19B8 BADNUM:				     ; CODE XREF: GETNUM+6j
SYSINIT:19B8					     ; GETNUM+15j
SYSINIT:19B8		     mov     cs:SEPCHR,	0
SYSINIT:19BE		     xor     ax, ax
SYSINIT:19C0		     pop     bx
SYSINIT:19C1		     stc
SYSINIT:19C2		     retn
SYSINIT:19C2 ; END OF FUNCTION CHUNK FOR GETNUM
SYSINIT:19C3
SYSINIT:19C3 ; =============== S U B R O U T I N E =======================================
SYSINIT:19C3
SYSINIT:19C3
SYSINIT:19C3 TODIGIT	     proc near		     ; CODE XREF: GETNUM:B2p
SYSINIT:19C3		     sub     al, '0'
SYSINIT:19C5		     jb	     short NOTDIG
SYSINIT:19C7		     cmp     al, 9
SYSINIT:19C9		     ja	     short NOTDIG
SYSINIT:19CB		     clc
SYSINIT:19CC		     retn
SYSINIT:19CD ; ---------------------------------------------------------------------------
SYSINIT:19CD
SYSINIT:19CD NOTDIG:				     ; CODE XREF: TODIGIT+2j
SYSINIT:19CD					     ; TODIGIT+6j
SYSINIT:19CD		     stc
SYSINIT:19CE		     retn
SYSINIT:19CE TODIGIT	     endp
SYSINIT:19CE
SYSINIT:19CF
SYSINIT:19CF ; =============== S U B R O U T I N E =======================================
SYSINIT:19CF
SYSINIT:19CF
SYSINIT:19CF GETNUM	     proc near		     ; CODE XREF: DOCONF+B5p
SYSINIT:19CF					     ; DOCONF:TRYQ_CONTp ...
SYSINIT:19CF
SYSINIT:19CF ; FUNCTION	CHUNK AT SYSINIT:19B8 SIZE 0000000B BYTES
SYSINIT:19CF
SYSINIT:19CF		     push    bx
SYSINIT:19D0		     xor     bx, bx
SYSINIT:19D2
SYSINIT:19D2 B2:				     ; CODE XREF: GETNUM+40j
SYSINIT:19D2		     call    TODIGIT
SYSINIT:19D5		     jb	     short BADNUM
SYSINIT:19D7		     xchg    ax, bx
SYSINIT:19D8		     push    bx
SYSINIT:19D9		     mov     bx, 0Ah
SYSINIT:19DC		     mul     bx
SYSINIT:19DE		     pop     bx
SYSINIT:19DF		     add     al, bl
SYSINIT:19E1		     adc     ah, 0
SYSINIT:19E4		     jb	     short BADNUM
SYSINIT:19E6		     xchg    ax, bx
SYSINIT:19E7		     call    GETCHR
SYSINIT:19EA		     jb	     short B1
SYSINIT:19EC		     cmp     al, 20h ; ' '
SYSINIT:19EE		     jz	     short B15
SYSINIT:19F0		     cmp     al, 2Ch ; ','
SYSINIT:19F2		     jz	     short B15
SYSINIT:19F4		     cmp     al, 9
SYSINIT:19F6		     jz	     short B15
SYSINIT:19F8		     cmp     al, cs:SEPCHR
SYSINIT:19FD		     jz	     short B15
SYSINIT:19FF		     cmp     al, 2Fh ; '/'
SYSINIT:1A01		     nop
SYSINIT:1A02		     nop
SYSINIT:1A03		     jz	     short B15
SYSINIT:1A05		     cmp     al, 0Ah
SYSINIT:1A07		     jz	     short B15
SYSINIT:1A09		     cmp     al, 0Dh
SYSINIT:1A0B		     jz	     short B15
SYSINIT:1A0D		     or	     al, al
SYSINIT:1A0F		     jnz     short B2
SYSINIT:1A11
SYSINIT:1A11 B15:				     ; CODE XREF: GETNUM+1Fj
SYSINIT:1A11					     ; GETNUM+23j ...
SYSINIT:1A11		     inc     cs:COUNT
SYSINIT:1A16		     dec     cs:CHRPTR
SYSINIT:1A1B
SYSINIT:1A1B B1:				     ; CODE XREF: GETNUM+1Bj
SYSINIT:1A1B		     mov     ax, bx
SYSINIT:1A1D		     or	     ax, ax
SYSINIT:1A1F		     pop     bx
SYSINIT:1A20		     retn
SYSINIT:1A20 GETNUM	     endp
SYSINIT:1A20
SYSINIT:1A21
SYSINIT:1A21 ; =============== S U B R O U T I N E =======================================
SYSINIT:1A21
SYSINIT:1A21
SYSINIT:1A21 SKIP_DELIM	     proc near		     ; CODE XREF: DOCONF+2F5p
SYSINIT:1A21					     ; DOCONF+311p ...
SYSINIT:1A21		     call    GETCHR
SYSINIT:1A24		     jb	     short Skip_delim_exit
SYSINIT:1A26		     cmp     al, 2Ch ; ','
SYSINIT:1A28		     jz	     short Skip_delim_next
SYSINIT:1A2A		     call    DELIM
SYSINIT:1A2D		     jz	     short SKIP_DELIM
SYSINIT:1A2F		     jmp     short Skip_delim_exit
SYSINIT:1A31 ; ---------------------------------------------------------------------------
SYSINIT:1A31
SYSINIT:1A31 Skip_delim_next:			     ; CODE XREF: SKIP_DELIM+7j
SYSINIT:1A31					     ; SKIP_DELIM+1Cj
SYSINIT:1A31		     call    GETCHR
SYSINIT:1A34		     jb	     short Skip_delim_exit
SYSINIT:1A36		     cmp     al, 2Ch ; ','
SYSINIT:1A38		     jz	     short Skip_delim_exit
SYSINIT:1A3A		     call    DELIM
SYSINIT:1A3D		     jz	     short Skip_delim_next
SYSINIT:1A3F
SYSINIT:1A3F Skip_delim_exit:			     ; CODE XREF: SKIP_DELIM+3j
SYSINIT:1A3F					     ; SKIP_DELIM+Ej ...
SYSINIT:1A3F		     retn
SYSINIT:1A3F SKIP_DELIM	     endp
SYSINIT:1A3F
SYSINIT:1A40
SYSINIT:1A40 ; =============== S U B R O U T I N E =======================================
SYSINIT:1A40
SYSINIT:1A40
SYSINIT:1A40 SetDOSCountryInfo proc near	     ; CODE XREF: DOCONF+3BBp
SYSINIT:1A40		     push    di
SYSINIT:1A41		     push    ax
SYSINIT:1A42		     push    dx
SYSINIT:1A43		     xor     cx, cx
SYSINIT:1A45		     xor     dx, dx
SYSINIT:1A47		     mov     ax, 512
SYSINIT:1A4A		     call    ReadInControlBuffer
SYSINIT:1A4D		     jb	     short SetDOSData_fail
SYSINIT:1A4F		     push    es
SYSINIT:1A50		     push    si
SYSINIT:1A51		     push    cs
SYSINIT:1A52		     pop     es
SYSINIT:1A53		     assume es:SYSINIT
SYSINIT:1A53		     mov     di, offset	COUNTRY_FILE_SIGNATURE
SYSINIT:1A56		     mov     cx, 8
SYSINIT:1A59		     repe cmpsb
SYSINIT:1A5B		     pop     si
SYSINIT:1A5C		     pop     es
SYSINIT:1A5D		     assume es:nothing
SYSINIT:1A5D		     jnz     short SetDOSData_fail
SYSINIT:1A5F		     add     si, 12h
SYSINIT:1A62		     cmp     byte ptr [si], 1
SYSINIT:1A65		     jnz     short SetDOSData_fail
SYSINIT:1A67		     inc     si
SYSINIT:1A68		     mov     dx, [si]
SYSINIT:1A6A		     mov     cx, [si+2]
SYSINIT:1A6D		     mov     ax, 400h
SYSINIT:1A70		     call    ReadInControlBuffer
SYSINIT:1A73		     jb	     short SetDOSData_fail
SYSINIT:1A75		     mov     cx, [si]
SYSINIT:1A77		     cmp     cx, 48h ; 'H'
SYSINIT:1A7A		     ja	     short SetDOSData_fail
SYSINIT:1A7C		     inc     si
SYSINIT:1A7D		     inc     si
SYSINIT:1A7E		     pop     dx
SYSINIT:1A7F		     pop     ax
SYSINIT:1A80		     pop     di
SYSINIT:1A81
SYSINIT:1A81 SetDOSCntry_find:			     ; CODE XREF: SetDOSCountryInfo+54j
SYSINIT:1A81		     cmp     ax, [si+2]
SYSINIT:1A84		     jnz     short SetDOSCntry_next
SYSINIT:1A86		     cmp     dx, 0
SYSINIT:1A89		     jz	     short SetDOSCntry_any_CodePage
SYSINIT:1A8B		     cmp     dx, [si+4]
SYSINIT:1A8E		     jz	     short SetDOSCntry_got_it
SYSINIT:1A90
SYSINIT:1A90 SetDOSCntry_next:			     ; CODE XREF: SetDOSCountryInfo+44j
SYSINIT:1A90		     add     si, [si]
SYSINIT:1A92		     inc     si
SYSINIT:1A93		     inc     si
SYSINIT:1A94		     loop    SetDOSCntry_find
SYSINIT:1A96		     mov     cx, 0FFFFh
SYSINIT:1A99
SYSINIT:1A99 SetDOSCntry_fail:			     ; CODE XREF: SetDOSCountryInfo+5Ej
SYSINIT:1A99					     ; SetDOSCountryInfo+74j
SYSINIT:1A99		     stc
SYSINIT:1A9A		     retn
SYSINIT:1A9B ; ---------------------------------------------------------------------------
SYSINIT:1A9B
SYSINIT:1A9B SetDOSData_fail:			     ; CODE XREF: SetDOSCountryInfo+Dj
SYSINIT:1A9B					     ; SetDOSCountryInfo+1Dj ...
SYSINIT:1A9B		     pop     si
SYSINIT:1A9C		     pop     cx
SYSINIT:1A9D		     pop     di
SYSINIT:1A9E		     jmp     short SetDOSCntry_fail
SYSINIT:1AA0 ; ---------------------------------------------------------------------------
SYSINIT:1AA0
SYSINIT:1AA0 SetDOSCntry_any_CodePage:		     ; CODE XREF: SetDOSCountryInfo+49j
SYSINIT:1AA0		     mov     dx, [si+4]
SYSINIT:1AA3
SYSINIT:1AA3 SetDOSCntry_got_it:		     ; CODE XREF: SetDOSCountryInfo+4Ej
SYSINIT:1AA3		     mov     cs:CntryCodePage_Id, dx
SYSINIT:1AA8		     mov     dx, [si+0Ah]
SYSINIT:1AAB		     mov     cx, [si+0Ch]
SYSINIT:1AAE		     mov     ax, 200h
SYSINIT:1AB1		     call    ReadInControlBuffer
SYSINIT:1AB4		     jb	     short SetDOSCntry_fail
SYSINIT:1AB6		     mov     cx, [si]
SYSINIT:1AB8		     inc     si
SYSINIT:1AB9		     inc     si
SYSINIT:1ABA
SYSINIT:1ABA SetDOSCntry_data:			     ; CODE XREF: SetDOSCountryInfo+E3j
SYSINIT:1ABA		     push    di
SYSINIT:1ABB		     push    cx
SYSINIT:1ABC		     push    si
SYSINIT:1ABD		     mov     al, [si+2]
SYSINIT:1AC0		     call    GetCountryDestination
SYSINIT:1AC3		     jb	     short SetDOSCntry_data_next
SYSINIT:1AC5		     mov     dx, [si+4]
SYSINIT:1AC8		     mov     cx, [si+6]
SYSINIT:1ACB		     mov     ax, 4200h
SYSINIT:1ACE		     stc
SYSINIT:1ACF		     int     21h	     ; DOS - 2+	- MOVE FILE READ/WRITE POINTER (LSEEK)
SYSINIT:1ACF					     ; AL = method: offset from	beginning of file
SYSINIT:1AD1		     jb	     short SetDOSData_fail
SYSINIT:1AD3		     mov     dx, 512
SYSINIT:1AD6		     mov     cx, es:[di]
SYSINIT:1AD9		     add     cx, 10
SYSINIT:1ADC		     mov     ah, 3Fh ; '?'
SYSINIT:1ADE		     stc
SYSINIT:1ADF		     int     21h	     ; DOS - 2+	- READ FROM FILE WITH HANDLE
SYSINIT:1ADF					     ; BX = file handle, CX = number of	bytes to read
SYSINIT:1ADF					     ; DS:DX ->	buffer
SYSINIT:1AE1		     jb	     short SetDOSData_fail
SYSINIT:1AE3		     cmp     ax, cx
SYSINIT:1AE5		     jnz     short SetDOSData_fail
SYSINIT:1AE7		     mov     al, [si+2]
SYSINIT:1AEA		     mov     si, 520	     ; 512+8
SYSINIT:1AED		     mov     cx, [si]
SYSINIT:1AEF		     inc     cx
SYSINIT:1AF0		     inc     cx
SYSINIT:1AF1		     cmp     cx, 1528	     ; 2048-512-8
SYSINIT:1AF5		     ja	     short SetDOSData_fail
SYSINIT:1AF7		     cmp     al, 1
SYSINIT:1AF9		     jnz     short SetDOSCntry_Mov
SYSINIT:1AFB		     push    word ptr es:[di+18h]
SYSINIT:1AFF		     push    word ptr es:[di+1Ah]
SYSINIT:1B03		     push    di
SYSINIT:1B04		     push    ax
SYSINIT:1B05		     mov     ax, cs:CntryCodePage_Id
SYSINIT:1B09		     mov     [si+4], ax
SYSINIT:1B0C		     pop     ax
SYSINIT:1B0D
SYSINIT:1B0D SetDOSCntry_Mov:			     ; CODE XREF: SetDOSCountryInfo+B9j
SYSINIT:1B0D		     rep movsb
SYSINIT:1B0F		     cmp     al, 1
SYSINIT:1B11		     jnz     short SetDOSCntry_data_next
SYSINIT:1B13		     pop     di
SYSINIT:1B14		     pop     word ptr es:[di+1Ah]
SYSINIT:1B18		     pop     word ptr es:[di+18h]
SYSINIT:1B1C
SYSINIT:1B1C SetDOSCntry_data_next:		     ; CODE XREF: SetDOSCountryInfo+83j
SYSINIT:1B1C					     ; SetDOSCountryInfo+D1j
SYSINIT:1B1C		     pop     si
SYSINIT:1B1D		     pop     cx
SYSINIT:1B1E		     pop     di
SYSINIT:1B1F		     add     si, [si]
SYSINIT:1B21		     inc     si
SYSINIT:1B22		     inc     si
SYSINIT:1B23		     loop    SetDOSCntry_data
SYSINIT:1B25		     retn
SYSINIT:1B25 SetDOSCountryInfo endp
SYSINIT:1B25
SYSINIT:1B26
SYSINIT:1B26 ; =============== S U B R O U T I N E =======================================
SYSINIT:1B26
SYSINIT:1B26
SYSINIT:1B26 GetCountryDestination proc	near	     ; CODE XREF: SetDOSCountryInfo+80p
SYSINIT:1B26		     push    cx
SYSINIT:1B27		     add     di, 4Ah ; 'J'
SYSINIT:1B2A		     mov     cx, es:[di]
SYSINIT:1B2D		     inc     di
SYSINIT:1B2E		     inc     di
SYSINIT:1B2F
SYSINIT:1B2F GetCntryDest:			     ; CODE XREF: GetCountryDestination:GetCntryDest_loopj
SYSINIT:1B2F		     cmp     es:[di], al
SYSINIT:1B32		     jz	     short GetCntryDest_OK
SYSINIT:1B34		     cmp     byte ptr es:[di], 1
SYSINIT:1B38		     jz	     short GetCntryDest_1
SYSINIT:1B3A		     add     di, 5
SYSINIT:1B3D		     jmp     short GetCntryDest_loop
SYSINIT:1B3F ; ---------------------------------------------------------------------------
SYSINIT:1B3F
SYSINIT:1B3F GetCntryDest_1:			     ; CODE XREF: GetCountryDestination+12j
SYSINIT:1B3F		     add     di, 29h ; ')'
SYSINIT:1B42
SYSINIT:1B42 GetCntryDest_loop:			     ; CODE XREF: GetCountryDestination+17j
SYSINIT:1B42		     loop    GetCntryDest
SYSINIT:1B44		     stc
SYSINIT:1B45		     jmp     short GetCntryDest_Exit
SYSINIT:1B47 ; ---------------------------------------------------------------------------
SYSINIT:1B47
SYSINIT:1B47 GetCntryDest_OK:			     ; CODE XREF: GetCountryDestination+Cj
SYSINIT:1B47		     cmp     al, 1
SYSINIT:1B49		     jnz     short GetCntryDest_OK1
SYSINIT:1B4B		     inc     di
SYSINIT:1B4C		     jmp     short GetCntryDest_Exit
SYSINIT:1B4E ; ---------------------------------------------------------------------------
SYSINIT:1B4E
SYSINIT:1B4E GetCntryDest_OK1:			     ; CODE XREF: GetCountryDestination+23j
SYSINIT:1B4E		     les     di, es:[di+1]
SYSINIT:1B52
SYSINIT:1B52 GetCntryDest_Exit:			     ; CODE XREF: GetCountryDestination+1Fj
SYSINIT:1B52					     ; GetCountryDestination+26j
SYSINIT:1B52		     pop     cx
SYSINIT:1B53		     retn
SYSINIT:1B53 GetCountryDestination endp
SYSINIT:1B53
SYSINIT:1B54
SYSINIT:1B54 ; =============== S U B R O U T I N E =======================================
SYSINIT:1B54
SYSINIT:1B54
SYSINIT:1B54 ReadInControlBuffer proc near	     ; CODE XREF: SetDOSCountryInfo+Ap
SYSINIT:1B54					     ; SetDOSCountryInfo+30p ...
SYSINIT:1B54		     push    ax
SYSINIT:1B55		     mov     ax, 4200h
SYSINIT:1B58		     stc
SYSINIT:1B59		     int     21h	     ; DOS - 2+	- MOVE FILE READ/WRITE POINTER (LSEEK)
SYSINIT:1B59					     ; AL = method: offset from	beginning of file
SYSINIT:1B5B		     pop     cx
SYSINIT:1B5C		     jb	     short locret_4FF7
SYSINIT:1B5E		     xor     dx, dx
SYSINIT:1B60		     xor     si, si
SYSINIT:1B62		     mov     ah, 3Fh ; '?'
SYSINIT:1B64		     stc
SYSINIT:1B65		     int     21h	     ; DOS - 2+	- READ FROM FILE WITH HANDLE
SYSINIT:1B65					     ; BX = file handle, CX = number of	bytes to read
SYSINIT:1B65					     ; DS:DX ->	buffer
SYSINIT:1B67
SYSINIT:1B67 locret_4FF7:			     ; CODE XREF: ReadInControlBuffer+8j
SYSINIT:1B67		     retn
SYSINIT:1B67 ReadInControlBuffer endp
SYSINIT:1B67
SYSINIT:1B68 ; ---------------------------------------------------------------------------
SYSINIT:1B68
SYSINIT:1B68 SET_COUNTRY_PATH:
SYSINIT:1B68		     push    si
SYSINIT:1B69		     push    ds
SYSINIT:1B6A		     push    es
SYSINIT:1B6B		     pop     ds
SYSINIT:1B6C		     pop     es
SYSINIT:1B6D		     call    CHK_DRIVE_LETTER
SYSINIT:1B70		     jb	     short SCP_Default_drv
SYSINIT:1B72		     mov     al, [si]
SYSINIT:1B74		     inc     si
SYSINIT:1B75		     inc     si
SYSINIT:1B76		     jmp     short SCP_SetDrv
SYSINIT:1B78 ; ---------------------------------------------------------------------------
SYSINIT:1B78
SYSINIT:1B78 SCP_Default_drv:			     ; CODE XREF: SYSINIT:1B70j
SYSINIT:1B78		     mov     ah, 19h
SYSINIT:1B7A		     int     21h	     ; DOS - GET DEFAULT DISK NUMBER
SYSINIT:1B7C		     add     al, 41h
SYSINIT:1B7E
SYSINIT:1B7E SCP_SetDrv:			     ; CODE XREF: SYSINIT:1B76j
SYSINIT:1B7E		     mov     cs:CNTRY_DRV, al
SYSINIT:1B82		     mov     di, (offset CNTRY_ROOT+1)
SYSINIT:1B85		     mov     al, [si]
SYSINIT:1B87		     cmp     al, '\'
SYSINIT:1B89		     jz	     short SCP_Root_Dir
SYSINIT:1B8B		     cmp     al, byte ptr cs:loc_34BC+3
SYSINIT:1B90		     jz	     short SCP_Root_Dir
SYSINIT:1B92		     jmp     short SCP_Path
SYSINIT:1B94 ; ---------------------------------------------------------------------------
SYSINIT:1B94
SYSINIT:1B94 SCP_Root_Dir:			     ; CODE XREF: SYSINIT:1B89j
SYSINIT:1B94					     ; SYSINIT:1B90j
SYSINIT:1B94		     dec     di
SYSINIT:1B95
SYSINIT:1B95 SCP_Path:				     ; CODE XREF: SYSINIT:1B92j
SYSINIT:1B95		     call    MOVE_ASCIIZ
SYSINIT:1B98		     mov     di, offset	CNTRY_DRV
SYSINIT:1B9B		     push    ds
SYSINIT:1B9C		     push    es
SYSINIT:1B9D		     pop     ds
SYSINIT:1B9E		     pop     es
SYSINIT:1B9F		     pop     si
SYSINIT:1BA0		     retn
SYSINIT:1BA1
SYSINIT:1BA1 ; =============== S U B R O U T I N E =======================================
SYSINIT:1BA1
SYSINIT:1BA1
SYSINIT:1BA1 CHK_DRIVE_LETTER proc near		     ; CODE XREF: SYSINIT:1B6Dp
SYSINIT:1BA1		     push    ax
SYSINIT:1BA2		     cmp     byte ptr [si], 'A'
SYSINIT:1BA5		     jb	     short CDLetter_NO
SYSINIT:1BA7		     cmp     byte ptr [si], 'Z'
SYSINIT:1BAA		     ja	     short CDLetter_NO
SYSINIT:1BAC		     cmp     byte ptr [si+1], ':'
SYSINIT:1BB0		     jnz     short CDLetter_NO
SYSINIT:1BB2		     jmp     short CDLetter_exit
SYSINIT:1BB4 ; ---------------------------------------------------------------------------
SYSINIT:1BB4
SYSINIT:1BB4 CDLetter_NO:			     ; CODE XREF: CHK_DRIVE_LETTER+4j
SYSINIT:1BB4					     ; CHK_DRIVE_LETTER+9j ...
SYSINIT:1BB4		     stc
SYSINIT:1BB5
SYSINIT:1BB5 CDLetter_exit:			     ; CODE XREF: CHK_DRIVE_LETTER+11j
SYSINIT:1BB5		     pop     ax
SYSINIT:1BB6		     retn
SYSINIT:1BB6 CHK_DRIVE_LETTER endp
SYSINIT:1BB6
SYSINIT:1BB7
SYSINIT:1BB7 ; =============== S U B R O U T I N E =======================================
SYSINIT:1BB7
SYSINIT:1BB7
SYSINIT:1BB7 MOVE_ASCIIZ     proc near		     ; CODE XREF: DOCONF+372p
SYSINIT:1BB7					     ; DOCONF+3AEp ...
SYSINIT:1BB7		     movsb
SYSINIT:1BB8		     cmp     byte ptr [si-1], 0
SYSINIT:1BBC		     jnz     short MOVE_ASCIIZ
SYSINIT:1BBE		     retn
SYSINIT:1BBE MOVE_ASCIIZ     endp
SYSINIT:1BBE
SYSINIT:1BBF
SYSINIT:1BBF ; =============== S U B R O U T I N E =======================================
SYSINIT:1BBF
SYSINIT:1BBF
SYSINIT:1BBF BADFIL	     proc near		     ; CODE XREF: SYSINIT:0A22p
SYSINIT:1BBF					     ; SYSINIT:0B27p ...
SYSINIT:1BBF		     push    cs
SYSINIT:1BC0		     pop     es
SYSINIT:1BC1		     assume es:SYSINIT
SYSINIT:1BC1		     mov     si, dx
SYSINIT:1BC1 BADFIL	     endp
SYSINIT:1BC1
SYSINIT:1BC3
SYSINIT:1BC3 ; =============== S U B R O U T I N E =======================================
SYSINIT:1BC3
SYSINIT:1BC3
SYSINIT:1BC3 BADLOAD	     proc near		     ; CODE XREF: DOCONF:BADBRK_1p
SYSINIT:1BC3					     ; DOCONF:TryQBADLOADp
SYSINIT:1BC3		     mov     dx, offset	BADLD_PRE ; "\r\nBad or	missing	$"
SYSINIT:1BC6		     mov     bx, offset	BADLD_POST ; "\r\n$"
SYSINIT:1BC6 BADLOAD	     endp
SYSINIT:1BC6
SYSINIT:1BC9
SYSINIT:1BC9 ; =============== S U B R O U T I N E =======================================
SYSINIT:1BC9
SYSINIT:1BC9
SYSINIT:1BC9 PRNERR	     proc near		     ; CODE XREF: DOCONF+292p
SYSINIT:1BC9		     push    cs
SYSINIT:1BCA		     pop     ds
SYSINIT:1BCB		     assume ds:SYSINIT
SYSINIT:1BCB		     mov     ah, 9
SYSINIT:1BCD		     int     21h	     ; DOS - PRINT STRING
SYSINIT:1BCD					     ; DS:DX ->	string terminated by "$"
SYSINIT:1BCF
SYSINIT:1BCF PRN1:				     ; CODE XREF: PRNERR+12j
SYSINIT:1BCF		     mov     dl, es:[si]
SYSINIT:1BD2		     or	     dl, dl
SYSINIT:1BD4		     jz	     short PRN2
SYSINIT:1BD6		     mov     ah, 2
SYSINIT:1BD8		     int     21h	     ; DOS - DISPLAY OUTPUT
SYSINIT:1BD8					     ; DL = character to send to standard output
SYSINIT:1BDA		     inc     si
SYSINIT:1BDB		     jmp     short PRN1
SYSINIT:1BDD ; ---------------------------------------------------------------------------
SYSINIT:1BDD
SYSINIT:1BDD PRN2:				     ; CODE XREF: PRNERR+Bj
SYSINIT:1BDD		     mov     dx, bx
SYSINIT:1BDD PRNERR	     endp
SYSINIT:1BDD
SYSINIT:1BDF
SYSINIT:1BDF ; =============== S U B R O U T I N E =======================================
SYSINIT:1BDF
SYSINIT:1BDF
SYSINIT:1BDF PRINT	     proc near		     ; CODE XREF: DOCONF+1Dp
SYSINIT:1BDF					     ; DOCONF+218p ...
SYSINIT:1BDF		     mov     ah, 9
SYSINIT:1BE1		     int     21h	     ; DOS - PRINT STRING
SYSINIT:1BE1					     ; DS:DX ->	string terminated by "$"
SYSINIT:1BE3		     retn
SYSINIT:1BE3 PRINT	     endp
SYSINIT:1BE3
SYSINIT:1BE4
SYSINIT:1BE4 ; =============== S U B R O U T I N E =======================================
SYSINIT:1BE4
SYSINIT:1BE4
SYSINIT:1BE4 OPEN_DEV	     proc near		     ; CODE XREF: SYSINIT:0A3Fp
SYSINIT:1BE4					     ; SYSINIT:0A47p
SYSINIT:1BE4		     call    OPEN_FILE
SYSINIT:1BE7		     jnb     short OPEN_DEV3
SYSINIT:1BE9
SYSINIT:1BE9 OPEN_DEV1:				     ; CODE XREF: OPEN_DEV+1Dj
SYSINIT:1BE9		     mov     dx, offset	NULDEV ; "NUL"
SYSINIT:1BEC		     call    OPEN_FILE
SYSINIT:1BEF
SYSINIT:1BEF OPEN_DEV2:				     ; CODE XREF: OPEN_DEV+17j
SYSINIT:1BEF		     retn
SYSINIT:1BF0 ; ---------------------------------------------------------------------------
SYSINIT:1BF0
SYSINIT:1BF0 OPEN_DEV3:				     ; CODE XREF: OPEN_DEV+3j
SYSINIT:1BF0		     mov     bx, ax
SYSINIT:1BF2		     xor     ax, ax
SYSINIT:1BF4		     mov     ah, 44h
SYSINIT:1BF6		     int     21h	     ; DOS - 2+	- IOCTL	- GET DEVICE INFORMATION
SYSINIT:1BF6					     ; BX = file or device handle
SYSINIT:1BF8		     test    dl, 80h
SYSINIT:1BFB		     jnz     short OPEN_DEV2
SYSINIT:1BFD		     mov     ah, 3Eh
SYSINIT:1BFF		     int     21h	     ; DOS - 2+	- CLOSE	A FILE WITH HANDLE
SYSINIT:1BFF					     ; BX = file handle
SYSINIT:1C01		     jmp     short OPEN_DEV1
SYSINIT:1C01 OPEN_DEV	     endp
SYSINIT:1C01
SYSINIT:1C03
SYSINIT:1C03 ; =============== S U B R O U T I N E =======================================
SYSINIT:1C03
SYSINIT:1C03
SYSINIT:1C03 OPEN_FILE	     proc near		     ; CODE XREF: OPEN_DEVp
SYSINIT:1C03					     ; OPEN_DEV+8p
SYSINIT:1C03		     mov     ah, 3Dh ; '='
SYSINIT:1C05		     stc
SYSINIT:1C06		     int     21h	     ; DOS - 2+	- OPEN DISK FILE WITH HANDLE
SYSINIT:1C06					     ; DS:DX ->	ASCIZ filename
SYSINIT:1C06					     ; AL = access mode
SYSINIT:1C06					     ; 0 - read
SYSINIT:1C08		     retn
SYSINIT:1C08 OPEN_FILE	     endp
SYSINIT:1C08
SYSINIT:1C09 ; ---------------------------------------------------------------------------
SYSINIT:1C09
SYSINIT:1C09 INT24:				     ; DATA XREF: SYSINIT:09CEo
SYSINIT:1C09		     add     sp, 6
SYSINIT:1C0C		     pop     ax
SYSINIT:1C0D		     pop     bx
SYSINIT:1C0E		     pop     cx
SYSINIT:1C0F		     pop     dx
SYSINIT:1C10		     pop     si
SYSINIT:1C11		     pop     di
SYSINIT:1C12		     pop     bp
SYSINIT:1C13		     pop     ds
SYSINIT:1C14		     assume ds:nothing
SYSINIT:1C14		     pop     es
SYSINIT:1C15		     assume es:nothing
SYSINIT:1C15		     push    ax
SYSINIT:1C16		     mov     ah, 19h
SYSINIT:1C18		     int     21h	     ; DOS - GET DEFAULT DISK NUMBER
SYSINIT:1C1A		     pop     ax
SYSINIT:1C1B		     iret
SYSINIT:1C1B ; ---------------------------------------------------------------------------
SYSINIT:1C1C NULDEV	     db	'NUL',0              ; DATA XREF: OPEN_DEV:OPEN_DEV1o
SYSINIT:1C20 CONDEV	     db	'CON',0              ; DATA XREF: SYSINIT:0A16o
SYSINIT:1C24 AUXDEV	     db	'AUX',0              ; DATA XREF: SYSINIT:goaux2o
SYSINIT:1C28 PRNDEV	     db	'PRN',0              ; DATA XREF: SYSINIT:0A42o
SYSINIT:1C2C CONFIG	     db	'\CONFIG.SYS',0      ; DATA XREF: DOCONF+Bo
SYSINIT:1C2C					     ; DOCONF:CONFERRo
SYSINIT:1C38 CNTRY_DRV	     db	41h		     ; DATA XREF: DOCONF+335w
SYSINIT:1C38					     ; DOCONF+36Fo ...
SYSINIT:1C39		     db	 3Ah ; :
SYSINIT:1C3A CNTRY_ROOT	     db	'\COUNTRY.SYS',0     ; DATA XREF: DOCONF+33Bo
SYSINIT:1C3A					     ; DOCONF+3DEo ...
SYSINIT:1C47		     db	52 dup(0)
SYSINIT:1C7B COUNTRY_FILE_SIGNATURE db 0FFh	     ; DATA XREF: SetDOSCountryInfo+13o
SYSINIT:1C7C		     db	'COUNTRY'
SYSINIT:1C83 CntryCodePage_Id dw 0		     ; DATA XREF: SetDOSCountryInfo:SetDOSCntry_got_itw
SYSINIT:1C83					     ; SetDOSCountryInfo+C5r
SYSINIT:1C85 COMMND	     db	'\COMMAND.COM',0     ; DATA XREF: SYSINIT:0AB2o
SYSINIT:1C85					     ; DOCONF+4CBo
SYSINIT:1C92		     db	14h dup(0)
SYSINIT:1CA6 COMTAB	     db	7		     ; DATA XREF: ORGANIZE+1Bo
SYSINIT:1CA7		     db	'BUFFERS'
SYSINIT:1CAE		     db	'B'
SYSINIT:1CAF		     db	5
SYSINIT:1CB0		     db	'BREAK'
SYSINIT:1CB5		     db	'C'
SYSINIT:1CB6		     db	6
SYSINIT:1CB7		     db	'DEVICE'
SYSINIT:1CBD		     db	'D'
SYSINIT:1CBE		     db	5
SYSINIT:1CBF		     db	'FILES'
SYSINIT:1CC4		     db	'F'
SYSINIT:1CC5		     db	4
SYSINIT:1CC6		     db	'FCBS'
SYSINIT:1CCA		     db	'X'
SYSINIT:1CCB		     db	9
SYSINIT:1CCC		     db	'LASTDRIVE'
SYSINIT:1CD5		     db	'L'
SYSINIT:1CD6		     db	8
SYSINIT:1CD7		     db	'DRIVPARM'
SYSINIT:1CDF		     db	'P'
SYSINIT:1CE0		     db	6
SYSINIT:1CE1		     db	'STACKS'
SYSINIT:1CE7		     db	'K'
SYSINIT:1CE8		     db	7
SYSINIT:1CE9		     db	'COUNTRY'
SYSINIT:1CF0		     db	'Q'
SYSINIT:1CF1		     db	5
SYSINIT:1CF2		     db	'SHELL'
SYSINIT:1CF7		     db	'S'
SYSINIT:1CF8		     db	0
SYSINIT:1CF9 DEVICEPARAMETERS db 0		     ; DATA XREF: ENDFILE+FBo
SYSINIT:1CF9					     ; SETPARMS+Fo
SYSINIT:1CFA DP_DEVTYPE	     db	2		     ; DATA XREF: DIDDLEBACK+6w
SYSINIT:1CFA					     ; Process_Num+17w	...
SYSINIT:1CFB DP_DEVATTRIB    dw	0		     ; DATA XREF: DIDDLEBACK+Bw
SYSINIT:1CFB					     ; PARSELINE+3Aw
SYSINIT:1CFD DP_CYLINDERS    dw	50h		     ; DATA XREF: DIDDLEBACKw
SYSINIT:1CFD					     ; Process_Num+26w	...
SYSINIT:1CFF		     db	   0
SYSINIT:1D00 DP_BYTESPERSEC  dw	0		     ; DATA XREF: ENDFILE+10Cr
SYSINIT:1D00					     ; SetDeviceParameters+1Co
SYSINIT:1D02 DP_SECPERCLUS   db	0		     ; DATA XREF: SetDeviceParameters+76w
SYSINIT:1D03		     db	   0
SYSINIT:1D04		     db	   0
SYSINIT:1D05		     db	   0
SYSINIT:1D06		     db	   0
SYSINIT:1D07		     db	   0
SYSINIT:1D08 DP_TOTALSECTORS dw	0		     ; DATA XREF: ENDFILE+108r
SYSINIT:1D08					     ; SetDeviceParameters+46r	...
SYSINIT:1D0A DP_MEDIAID	     db	0		     ; DATA XREF: SetDeviceParameters+5Br
SYSINIT:1D0A					     ; SetDeviceParameters:Got_Correct_Mediadw
SYSINIT:1D0B		     db	   0
SYSINIT:1D0C		     db	   0
SYSINIT:1D0D DP_SECPERTRACK  dw	0		     ; DATA XREF: SetDeviceParameters+31w
SYSINIT:1D0F DP_HEADS	     dw	0		     ; DATA XREF: SetDeviceParameters+3Fw
SYSINIT:1D11		     db	   0
SYSINIT:1D12		     db	   0
SYSINIT:1D13		     db	   0
SYSINIT:1D14		     db	   0
SYSINIT:1D15		     db	   0
SYSINIT:1D16		     db	   0
SYSINIT:1D17		     db	   0
SYSINIT:1D18		     db	   0
SYSINIT:1D19		     db	   0
SYSINIT:1D1A		     db	   0
SYSINIT:1D1B		     db	   0
SYSINIT:1D1C		     db	   0
SYSINIT:1D1D		     db	   0
SYSINIT:1D1E		     db	   0
SYSINIT:1D1F word_51AF	     dw	0		     ; DATA XREF: PARSELINE+3Dw
SYSINIT:1D21		     db	   0
SYSINIT:1D22		     db	   0
SYSINIT:1D23		     db	   0
SYSINIT:1D24		     db	   0
SYSINIT:1D25		     db	   0
SYSINIT:1D26		     db	   0
SYSINIT:1D27		     db	   0
SYSINIT:1D28		     db	   0
SYSINIT:1D29		     db	   0
SYSINIT:1D2A		     db	   0
SYSINIT:1D2B		     db	   0
SYSINIT:1D2C		     db	   0
SYSINIT:1D2D		     db	   0
SYSINIT:1D2E		     db	   0
SYSINIT:1D2F		     db	   0
SYSINIT:1D30		     db	   0
SYSINIT:1D31		     db	   0
SYSINIT:1D32		     db	   0
SYSINIT:1D33		     db	   0
SYSINIT:1D34		     db	   0
SYSINIT:1D35		     db	   0
SYSINIT:1D36		     db	   0
SYSINIT:1D37		     db	   0
SYSINIT:1D38		     db	   0
SYSINIT:1D39		     db	   0
SYSINIT:1D3A		     db	   0
SYSINIT:1D3B		     db	   0
SYSINIT:1D3C		     db	   0
SYSINIT:1D3D		     db	   0
SYSINIT:1D3E		     db	   0
SYSINIT:1D3F		     db	   0
SYSINIT:1D40		     db	   0
SYSINIT:1D41		     db	   0
SYSINIT:1D42		     db	   0
SYSINIT:1D43		     db	   0
SYSINIT:1D44		     db	   0
SYSINIT:1D45		     db	   0
SYSINIT:1D46		     db	   0
SYSINIT:1D47		     db	   0
SYSINIT:1D48		     db	   0
SYSINIT:1D49		     db	   0
SYSINIT:1D4A		     db	   0
SYSINIT:1D4B		     db	   0
SYSINIT:1D4C		     db	   0
SYSINIT:1D4D		     db	   0
SYSINIT:1D4E		     db	   0
SYSINIT:1D4F		     db	   0
SYSINIT:1D50		     db	   0
SYSINIT:1D51		     db	   0
SYSINIT:1D52		     db	   0
SYSINIT:1D53		     db	   0
SYSINIT:1D54		     db	   0
SYSINIT:1D55		     db	   0
SYSINIT:1D56		     db	   0
SYSINIT:1D57		     db	   0
SYSINIT:1D58		     db	   0
SYSINIT:1D59		     db	   0
SYSINIT:1D5A		     db	   0
SYSINIT:1D5B		     db	   0
SYSINIT:1D5C		     db	   0
SYSINIT:1D5D		     db	   0
SYSINIT:1D5E		     db	   0
SYSINIT:1D5F		     db	   0
SYSINIT:1D60		     db	   0
SYSINIT:1D61		     db	   0
SYSINIT:1D62		     db	   0
SYSINIT:1D63		     db	   0
SYSINIT:1D64		     db	   0
SYSINIT:1D65		     db	   0
SYSINIT:1D66		     db	   0
SYSINIT:1D67		     db	   0
SYSINIT:1D68		     db	   0
SYSINIT:1D69		     db	   0
SYSINIT:1D6A		     db	   0
SYSINIT:1D6B		     db	   0
SYSINIT:1D6C		     db	   0
SYSINIT:1D6D		     db	   0
SYSINIT:1D6E		     db	   0
SYSINIT:1D6F		     db	   0
SYSINIT:1D70		     db	   0
SYSINIT:1D71		     db	   0
SYSINIT:1D72		     db	   0
SYSINIT:1D73		     db	   0
SYSINIT:1D74		     db	   0
SYSINIT:1D75		     db	   0
SYSINIT:1D76		     db	   0
SYSINIT:1D77		     db	   0
SYSINIT:1D78		     db	   0
SYSINIT:1D79		     db	   0
SYSINIT:1D7A		     db	   0
SYSINIT:1D7B		     db	   0
SYSINIT:1D7C		     db	   0
SYSINIT:1D7D		     db	   0
SYSINIT:1D7E		     db	   0
SYSINIT:1D7F		     db	   0
SYSINIT:1D80		     db	   0
SYSINIT:1D81		     db	   0
SYSINIT:1D82		     db	   0
SYSINIT:1D83		     db	   0
SYSINIT:1D84		     db	   0
SYSINIT:1D85		     db	   0
SYSINIT:1D86		     db	   0
SYSINIT:1D87		     db	   0
SYSINIT:1D88		     db	   0
SYSINIT:1D89		     db	   0
SYSINIT:1D8A		     db	   0
SYSINIT:1D8B		     db	   0
SYSINIT:1D8C		     db	   0
SYSINIT:1D8D		     db	   0
SYSINIT:1D8E		     db	   0
SYSINIT:1D8F		     db	   0
SYSINIT:1D90		     db	   0
SYSINIT:1D91		     db	   0
SYSINIT:1D92		     db	   0
SYSINIT:1D93		     db	   0
SYSINIT:1D94		     db	   0
SYSINIT:1D95		     db	   0
SYSINIT:1D96		     db	   0
SYSINIT:1D97		     db	   0
SYSINIT:1D98		     db	   0
SYSINIT:1D99		     db	   0
SYSINIT:1D9A		     db	   0
SYSINIT:1D9B		     db	   0
SYSINIT:1D9C		     db	   0
SYSINIT:1D9D		     db	   0
SYSINIT:1D9E		     db	   0
SYSINIT:1D9F		     db	   0
SYSINIT:1DA0		     db	   0
SYSINIT:1DA1		     db	   0
SYSINIT:1DA2		     db	   0
SYSINIT:1DA3		     db	   0
SYSINIT:1DA4		     db	   0
SYSINIT:1DA5		     db	   0
SYSINIT:1DA6		     db	   0
SYSINIT:1DA7		     db	   0
SYSINIT:1DA8		     db	   0
SYSINIT:1DA9		     db	   0
SYSINIT:1DAA		     db	   0
SYSINIT:1DAB		     db	   0
SYSINIT:1DAC		     db	   0
SYSINIT:1DAD		     db	   0
SYSINIT:1DAE		     db	   0
SYSINIT:1DAF		     db	   0
SYSINIT:1DB0		     db	   0
SYSINIT:1DB1		     db	   0
SYSINIT:1DB2		     db	   0
SYSINIT:1DB3		     db	   0
SYSINIT:1DB4		     db	   0
SYSINIT:1DB5		     db	   0
SYSINIT:1DB6		     db	   0
SYSINIT:1DB7		     db	   0
SYSINIT:1DB8		     db	   0
SYSINIT:1DB9		     db	   0
SYSINIT:1DBA		     db	   0
SYSINIT:1DBB		     db	   0
SYSINIT:1DBC		     db	   0
SYSINIT:1DBD		     db	   0
SYSINIT:1DBE		     db	   0
SYSINIT:1DBF		     db	   0
SYSINIT:1DC0		     db	   0
SYSINIT:1DC1		     db	   0
SYSINIT:1DC2		     db	   0
SYSINIT:1DC3		     db	   0
SYSINIT:1DC4		     db	   0
SYSINIT:1DC5		     db	   0
SYSINIT:1DC6		     db	   0
SYSINIT:1DC7		     db	   0
SYSINIT:1DC8		     db	   0
SYSINIT:1DC9		     db	   0
SYSINIT:1DCA		     db	   0
SYSINIT:1DCB		     db	   0
SYSINIT:1DCC		     db	   0
SYSINIT:1DCD		     db	   0
SYSINIT:1DCE		     db	   0
SYSINIT:1DCF		     db	   0
SYSINIT:1DD0		     db	   0
SYSINIT:1DD1		     db	   0
SYSINIT:1DD2		     db	   0
SYSINIT:1DD3		     db	   0
SYSINIT:1DD4		     db	   0
SYSINIT:1DD5		     db	   0
SYSINIT:1DD6		     db	   0
SYSINIT:1DD7		     db	   0
SYSINIT:1DD8		     db	   0
SYSINIT:1DD9		     db	   0
SYSINIT:1DDA		     db	   0
SYSINIT:1DDB		     db	   0
SYSINIT:1DDC		     db	   0
SYSINIT:1DDD		     db	   0
SYSINIT:1DDE		     db	   0
SYSINIT:1DDF		     db	   0
SYSINIT:1DE0		     db	   0
SYSINIT:1DE1		     db	   0
SYSINIT:1DE2		     db	   0
SYSINIT:1DE3		     db	   0
SYSINIT:1DE4		     db	   0
SYSINIT:1DE5		     db	   0
SYSINIT:1DE6		     db	   0
SYSINIT:1DE7		     db	   0
SYSINIT:1DE8		     db	   0
SYSINIT:1DE9		     db	   0
SYSINIT:1DEA		     db	   0
SYSINIT:1DEB		     db	   0
SYSINIT:1DEC		     db	   0
SYSINIT:1DED		     db	   0
SYSINIT:1DEE		     db	   0
SYSINIT:1DEF		     db	   0
SYSINIT:1DF0		     db	   0
SYSINIT:1DF1		     db	   0
SYSINIT:1DF2		     db	   0
SYSINIT:1DF3		     db	   0
SYSINIT:1DF4		     db	   0
SYSINIT:1DF5		     db	   0
SYSINIT:1DF6		     db	   0
SYSINIT:1DF7		     db	   0
SYSINIT:1DF8		     db	   0
SYSINIT:1DF9		     db	   0
SYSINIT:1DFA		     db	   0
SYSINIT:1DFB		     db	   0
SYSINIT:1DFC		     db	   0
SYSINIT:1DFD		     db	   0
SYSINIT:1DFE		     db	   0
SYSINIT:1DFF		     db	   0
SYSINIT:1E00		     db	   0
SYSINIT:1E01		     db	   0
SYSINIT:1E02		     db	   0
SYSINIT:1E03		     db	   0
SYSINIT:1E04		     db	   0
SYSINIT:1E05		     db	   0
SYSINIT:1E06		     db	   0
SYSINIT:1E07		     db	   0
SYSINIT:1E08		     db	   0
SYSINIT:1E09		     db	   0
SYSINIT:1E0A		     db	   0
SYSINIT:1E0B		     db	   0
SYSINIT:1E0C		     db	   0
SYSINIT:1E0D		     db	   0
SYSINIT:1E0E		     db	   0
SYSINIT:1E0F		     db	   0
SYSINIT:1E10		     db	   0
SYSINIT:1E11		     db	   0
SYSINIT:1E12		     db	   0
SYSINIT:1E13		     db	   0
SYSINIT:1E14		     db	   0
SYSINIT:1E15		     db	   0
SYSINIT:1E16		     db	   0
SYSINIT:1E17		     db	   0
SYSINIT:1E18		     db	   0
SYSINIT:1E19		     db	   0
SYSINIT:1E1A		     db	   0
SYSINIT:1E1B		     db	   0
SYSINIT:1E1C		     db	   0
SYSINIT:1E1D HLIM	     dw	2		     ; DATA XREF: Process_Num:try_hw
SYSINIT:1E1D					     ; SetDeviceParameters+3Cr
SYSINIT:1E1F SLIM	     dw	9		     ; DATA XREF: Process_Num+31w
SYSINIT:1E1F					     ; SetDeviceParameters+2Er
SYSINIT:1E21 DRIVE	     db	0		     ; DATA XREF: SETPARMS+7r
SYSINIT:1E21					     ; Process_Num+Cw
SYSINIT:1E22 SWITCHES	     dw	0		     ; DATA XREF: DIDDLEBACK+11w
SYSINIT:1E22					     ; PARSELINE+19w ...
SYSINIT:1E24 BPB_48T	     db	0, 2, 2, 1, 0, 2, 70h, 0, 0D0h,	2, 0FDh, 2, 0, 9, 0
SYSINIT:1E24					     ; DATA XREF: SYSINIT:BPB_Tableo
SYSINIT:1E24		     db	2, 0, 0, 0, 0, 0
SYSINIT:1E39 BPB_96T	     db	0, 2, 1, 1, 0, 2, 0E0h,	0, 60h,	9, 0F9h, 7, 0, 0Fh
SYSINIT:1E39					     ; DATA XREF: SYSINIT:1E63o
SYSINIT:1E39		     db	0, 2, 0, 0, 0, 0, 0
SYSINIT:1E4E BPB_35	     db	0, 2, 2, 1, 0, 2, 70h, 0, 0A0h,	5, 0F9h, 3, 0, 9, 0
SYSINIT:1E4E					     ; DATA XREF: SYSINIT:1E65o
SYSINIT:1E4E					     ; SYSINIT:1E67o ...
SYSINIT:1E4E		     db	2, 0, 0, 0
SYSINIT:1E61 BPB_Table	     dw	offset BPB_48T	     ; DATA XREF: SetDeviceParameters+17o
SYSINIT:1E63		     dw	offset BPB_96T
SYSINIT:1E65		     dw	offset BPB_35
SYSINIT:1E67		     dw	offset BPB_35
SYSINIT:1E69		     dw	offset BPB_35
SYSINIT:1E6B		     dw	offset BPB_35
SYSINIT:1E6D		     dw	offset BPB_35
SYSINIT:1E6F		     dw	offset BPB_35
SYSINIT:1E71 swtch_list	     db	7		     ; DATA XREF: Check_Switch+12r
SYSINIT:1E72 swtch_list_1    db	'FHSTDCN'            ; DATA XREF: Check_Switch+18o
SYSINIT:1E79 BADOPM	     db	0Dh,0Ah		     ; DATA XREF: DOCONF:BADOPo
SYSINIT:1E79		     db	'Unrecognized command in CONFIG.SYS'
SYSINIT:1E9D BADLD_POST	     db	0Dh,0Ah,'$'          ; DATA XREF: DOCONF+28Fo
SYSINIT:1E9D					     ; BADLOAD+3o
SYSINIT:1EA0 BADSIZ_PRE	     db	0Dh,0Ah		     ; DATA XREF: DOCONF+28Co
SYSINIT:1EA0		     db	'Sector size too large in file $'
SYSINIT:1EC1 BADLD_PRE	     db	0Dh,0Ah		     ; DATA XREF: BADLOADo
SYSINIT:1EC1		     db	'Bad or missing $'
SYSINIT:1ED3 BADCOM	     db	'Command Interpreter',0 ; DATA XREF: SYSINIT:COMERRo
SYSINIT:1EE7 BADCOUNTRY	     db	0Dh,0Ah		     ; DATA XREF: DOCONF+342o
SYSINIT:1EE7		     db	'Invalid country code or code page',0Dh,0Ah,'$'
SYSINIT:1F0D BADCOUNTRYCOM   db	0Dh,0Ah		     ; DATA XREF: DOCONF+349o
SYSINIT:1F0D		     db	'Error in COUNTRY command',0Dh,0Ah,'$'
SYSINIT:1F2A INSUFMEMORY     db	0Dh,0Ah		     ; DATA XREF: DOCONF:TryQMemoryo
SYSINIT:1F2A		     db	'Insufficient memory for COUNTRY.SYS file',0Dh,0Ah,'$'
SYSINIT:1F57 BADMEM	     db	0Dh,0Ah		     ; DATA XREF: ROUND:MEM_ERRo
SYSINIT:1F57		     db	'Configuration too large for memory',0Dh,0Ah,'$'
SYSINIT:1F7E BADBLOCK	     db	0Dh,0Ah		     ; DATA XREF: DOCONF+215o
SYSINIT:1F7E		     db	'Too many Block Devices',0Dh,0Ah,'$'
SYSINIT:1F99 BADSTACK	     db	0Dh,0Ah		     ; DATA XREF: DOCONF:TryKBado
SYSINIT:1F99		     db	'Invalid STACK parameters',0Dh,0Ah,'$'
SYSINIT:1FB6 PCDOSVERSION    db	1Ah,'@@@### PC-DOS Version 3.30',0Dh,0Ah
SYSINIT:1FB6		     db	1Ah,0
SYSINIT:1FB6 SYSINIT	     ends
SYSINIT:1FB6
SYSINIT:1FB6
SYSINIT:1FB6		     end
