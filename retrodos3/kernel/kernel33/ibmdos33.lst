seg000:0000 ;
seg000:0000 ; +-------------------------------------------------------------------------+
seg000:0000 ; |	  This file has	been generated by The Interactive Disassembler (IDA)	|
seg000:0000 ; |		  Copyright (c)	2013 Hex-Rays, <support@hex-rays.com>		|
seg000:0000 ; |			     Licensed to: Freeware version			|
seg000:0000 ; +-------------------------------------------------------------------------+
seg000:0000 ;
seg000:0000 ; Input MD5	  : EF2ADCA1CB3882118FD247DD4C672C81
seg000:0000
seg000:0000 ; ---------------------------------------------------------------------------
seg000:0000 ; File Name	  : D:\Documents and Settings\Erdoan Tan\Desktop\MSDOS33.BIN
seg000:0000 ; Format	  : Binary file
seg000:0000 ; Base Address: 0000h Range: 0000h - 75CFh Loaded length: 75CFh
seg000:0000
seg000:0000		    .8086
seg000:0000		    .model flat
seg000:0000
seg000:0000 ; ===========================================================================
seg000:0000
seg000:0000 ; Segment type: Regular
seg000:0000 seg000	    segment byte public	''
seg000:0000		    assume cs:seg000
seg000:0000		    assume es:nothing, ss:nothing, ds:nothing
seg000:0000
seg000:0000 START:				    ; DATA XREF: seg000:04F7w
seg000:0000					    ; setmem+34w ...
seg000:0000		    jmp	    DOSINIT
seg000:0000 ; ---------------------------------------------------------------------------
seg000:0003 ARENA_SIZE	    dw 0		    ; DATA XREF: seg000:fSplice_x2w
seg000:0003					    ; arena_next+2r ...
seg000:0005 PDB_CPM_CALL    db 0		    ; DATA XREF: setmem+3Aw
seg000:0006 PDB_CPM_CALL_1  db	42h ; B		    ; DATA XREF: setmem+2Dw
seg000:0007		    db	55h ; U
seg000:0008 PDB_CPM_CALL_3  db	47h ; G		    ; DATA XREF: setmem+30w
seg000:0009		    db	20h
seg000:000A PDB_EXIT	    dw 0		    ; DATA XREF: seg000:6280w
seg000:000C PDB_EXIT_2	    dw 0		    ; DATA XREF: seg000:6285w
seg000:000E MYNUM	    dw 0		    ; DATA XREF: seg000:67FEr
seg000:000E					    ; seg000:UserSetw
seg000:0010 FCBLRU	    dw 0		    ; DATA XREF: SaveFCBInfo+8Br
seg000:0010					    ; SaveFCBInfo:SimpleStuffw	...
seg000:0012 OpenLRU	    dw 0		    ; DATA XREF: SetOpenAger
seg000:0012					    ; SetOpenAge:SetDonew
seg000:0014 OEM_HANDLER	    dw -1
seg000:0016 OEM_HANDLER_2   dw -1		    ; DATA XREF: _$DUP_PDB+79w
seg000:0016					    ; FATALC+F8r
seg000:0018 LeaveAddr	    dw offset LeaveDOS	    ; DATA XREF: setmem+4Ao
seg000:001A RetryCount	    dw 3		    ; DATA XREF: _$IOCTL+137w
seg000:001A					    ; seg000:DO_SHARE_CHECKr ...
seg000:001C RetryLoop	    dw 1		    ; DATA XREF: Idle+9r
seg000:001C					    ; _$IOCTL:Set_Retry_Parametersw
seg000:001E LastBuffer	    dd -1		    ; DATA XREF: seg000:1C62w
seg000:001E					    ; GETBUFFRB+7r ...
seg000:0022 CONTPOS	    dw 0		    ; DATA XREF: DOS_READ+133w
seg000:0022					    ; DOS_READ+14Fr
seg000:0024 arena_head	    dw 0		    ; DATA XREF: seg000:NAME2_2w
seg000:0024					    ; arena_free_process+3r ...
seg000:0026 DPBHEAD	    dd 0		    ; DATA XREF: DOSINIT-6D93r
seg000:0026					    ; seg000:SysInitTableo ...
seg000:002A SFT_ADDR	    dd SFTABL		    ; DATA XREF: SFFromSFNr
seg000:002A					    ; DOSINIT-6D8Aw ...
seg000:002E BCLOCK	    dd 0		    ; DATA XREF: STATCHK-413Ew
seg000:002E					    ; seg000:1809r ...
seg000:0032 BCON	    dd 0		    ; DATA XREF: setmem+54w
seg000:0032					    ; DOS_ABORT+5r ...
seg000:0036 MAXSEC	    dw 128		    ; DATA XREF: setmem+50w
seg000:0036					    ; seg000:6D04r ...
seg000:0038 BUFFHEAD	    dd 0		    ; DATA XREF: DOSINIT-6D50w
seg000:0038					    ; seg000:1C66r ...
seg000:003C CDSAddr	    dd 0		    ; DATA XREF: FatRead_CDS+27r
seg000:003C					    ; GetCDSFromDrv+Br
seg000:0040 SFTFCB	    dd 0		    ; DATA XREF: SaveFCBInfo+7Fr
seg000:0040					    ; ResetLRU+5r ...
seg000:0044 KEEPCOUNT	    dw 0		    ; DATA XREF: LRUFCB+3r
seg000:0046 NUMIO	    db 0		    ; DATA XREF: DOSINIT-6D85r
seg000:0046					    ; InitCDS+5r ...
seg000:0047 CDSCOUNT	    db 0		    ; DATA XREF: seg000:SETRETr
seg000:0047					    ; FatRead_CDS+1Dr ...
seg000:0048 NULDEV	    dd 0		    ; DATA XREF: DEVNAME+1Bo
seg000:0048					    ; DOSINIT+1Dw ...
seg000:004C word_4C	    dw 8004h
seg000:004E		    dw offset SNULDEV
seg000:0050 off_50	    dw offset INULDEV	    ; DATA XREF: setmem+3Fw
seg000:0052 asc_52	    db 'NUL     '           ; DATA XREF: setmem+45w
seg000:005A SPLICES	    db 0		    ; DATA XREF: Splicer
seg000:005B		    db 90h
seg000:005C JShare	    dd BadCall		    ; DATA XREF: DOSINIT+1DEo
seg000:0060 MFT_enter	    dd OKCall		    ; DATA XREF: SHARE_CHECKr
seg000:0064 MFTClose	    dd OKCall		    ; DATA XREF: ShareEndr
seg000:0068 MFTclU	    dd BadCall		    ; DATA XREF: seg000:CLOSE_UIDr
seg000:006C MFTCloseP	    dd BadCall		    ; DATA XREF: DOS_ABORT+1Br
seg000:006C					    ; seg000:CLOSE_UID_PIDr
seg000:0070 MFTCloN	    dd BadCall		    ; DATA XREF: seg000:CLOSE_NAMEr
seg000:0074 set_block	    dd BadCall		    ; DATA XREF: seg000:LOCAL_LOCKr
seg000:0078 clr_block	    dd BadCall		    ; DATA XREF: seg000:LOCAL_UNLOCKr
seg000:007C chk_block	    dd OKCall		    ; DATA XREF: LOCK_CHECK+5r
seg000:0080 MFT_get	    dd BadCall		    ; DATA XREF: seg000:GET_LISTr
seg000:0080					    ; DOSINIT+1B2w
seg000:0084 ShSave	    dd BadCall		    ; DATA XREF: SaveFCBInfo:SaveSharer
seg000:0084					    ; DOSINIT+1B8w
seg000:0088 ShChk	    dd BadCall		    ; DATA XREF: CheckFCB+33r
seg000:0088					    ; seg000:628Ew ...
seg000:008C ShCol	    dd OKCall		    ; DATA XREF: STATCHK+C6r
seg000:008C					    ; _$OPEN+95r
seg000:0090 ShCloseFile	    dd BadCall		    ; DATA XREF: REN_DEL_Check+2Br
seg000:0090					    ; FATALC+48r
seg000:0094 ShSU	    dd BadCall		    ; DATA XREF: seg000:366Br
seg000:0094					    ; seg000:3755r ...
seg000:0098 SFTABL	    dd -1		    ; DATA XREF: seg000:SFT_ADDRo
seg000:0098					    ; DOSINIT+1CEw
seg000:009C SFTABL_SFT_SFCOUNT dw 5		    ; DATA XREF: DOSINIT+1D4w
seg000:009E SFTABL_SFT_SFTable dw 0		    ; DATA XREF: seg000:SECCLUSPOSo
seg000:009E					    ; DOSINIT+39o
seg000:00A0 SFTABL_SFT_SFTable_2 dw 0		    ; DATA XREF: SPOOLINT+16r
seg000:00A2		    dw 0
seg000:00A4 word_A4	    dw 0		    ; DATA XREF: seg000:222Er
seg000:00A6		    dw 0
seg000:00A8 word_A8	    dw 0		    ; DATA XREF: STATCHK-40DDr
seg000:00A8					    ; AbsSetup+2Dr ...
seg000:00AA word_AA	    dw 0		    ; DATA XREF: DOSINIT+2Fw
seg000:00AC		    db 16 dup(0)
seg000:00BC word_BC	    dw 0		    ; DATA XREF: international_get+Fr
seg000:00BC					    ; international_get+1Dr ...
seg000:00BE		    dw 0
seg000:00C0 ENTRYPOINT	    db 0		    ; DATA XREF: DOSINIT+1A4w
seg000:00C1 ENTRYPOINT_1    dw 0		    ; DATA XREF: DOSINIT+1A9w
seg000:00C3 ENTRYPOINT_3    dw 0		    ; DATA XREF: DOSINIT+1AFw
seg000:00C5		    db 226 dup(0)
seg000:01A7 CARPOS	    db 0		    ; DATA XREF: seg000:newlinr
seg000:01A7					    ; OUTT:OUTCHAw ...
seg000:01A8 STARTPOS	    db 0		    ; DATA XREF: seg000:1FEBw
seg000:01A8					    ; seg000:20A4r ...
seg000:01A9 INBUF	    db 0		    ; DATA XREF: seg000:1FF0o
seg000:01A9					    ; COPYNEW+4o
seg000:01AA		    db 127 dup(0)
seg000:0229 CONBUF	    dw 0		    ; DATA XREF: DOS_READ+157r
seg000:0229					    ; DOS_READ+15Ew ...
seg000:022B CONBUF_2	    db 0		    ; DATA XREF: DOS_READ+170o
seg000:022C		    db 128 dup(0)
seg000:02AC PFLAG	    db 0		    ; DATA XREF: OUTT+26r
seg000:02AC					    ; OUTT+57w	...
seg000:02AD VERFLG	    db 0		    ; DATA XREF: seg000:_$GET_VERIFY_ON_WRITEr
seg000:02AD					    ; seg000:198Dw ...
seg000:02AE CHARCO	    db 3		    ; DATA XREF: OUTT+Fw
seg000:02AE					    ; OUTT+14w
seg000:02AF chSwitch	    db '/'                  ; DATA XREF: seg000:chop_1r
seg000:02AF					    ; seg000:chop_2w
seg000:02B0 AllocMethod	    db 0		    ; DATA XREF: _$ALLOC:alloc_do_splitr
seg000:02B0					    ; seg000:AllocOperGetr ...
seg000:02B1 fShare	    db 0		    ; DATA XREF: CheckSharer
seg000:02B2 DIFFNAM	    db 1		    ; DATA XREF: seg000:6825w
seg000:02B3 MYNAME	    db 10h dup(20h)	    ; DATA XREF: seg000:680Bo
seg000:02B3					    ; seg000:6822o
seg000:02C3		    dw offset EcritDisk
seg000:02C5		    dw offset LcritDisk
seg000:02C7		    dw offset EcritDevice
seg000:02C9		    dw offset LcritDevice
seg000:02CB		    dw 0
seg000:02CD		    db	90h ; ê
seg000:02CE ERRORMODE	    db 0		    ; DATA XREF: STATCHK:IOROUTr
seg000:02CE					    ; STATCHK-40EAw ...
seg000:02CF INDOS	    db 0		    ; DATA XREF: STATCHK-4167w
seg000:02CF					    ; STATCHK-40B3w ...
seg000:02D0 WPERR	    db 0FFh		    ; DATA XREF: STATCHK-40E5w
seg000:02D0					    ; HARDERR+Fw ...
seg000:02D1 EXTERR_LOCUS    db 0		    ; DATA XREF: STATCHK-40EFw
seg000:02D1					    ; CAL_LK+2Dw ...
seg000:02D2 EXTERR	    dw 0		    ; DATA XREF: AbsSetup+34w
seg000:02D2					    ; seg000:1651w ...
seg000:02D4 EXTERR_ACTION   db 0		    ; DATA XREF: CAL_LK+1Dw
seg000:02D4					    ; seg000:1AE6w ...
seg000:02D5 EXTERR_CLASS    db 0		    ; DATA XREF: CAL_LK+25w
seg000:02D5					    ; seg000:1AEBw ...
seg000:02D6 EXTERRPT	    dw 0		    ; DATA XREF: seg000:1BB1r
seg000:02D6					    ; HARDERRRW+10w ...
seg000:02D8 EXTERRPT_2	    dw 0		    ; DATA XREF: HARDERRRW+Bw
seg000:02D8					    ; FAT_GOT_DPB+79w ...
seg000:02DA DMAADD	    dw 80h		    ; DATA XREF: seg000:_$GET_DMAr
seg000:02DA					    ; seg000:_$SET_DMAw ...
seg000:02DC DMAADD_2	    dw 0		    ; DATA XREF: DOSINIT-6D98w
seg000:02DC					    ; seg000:1B2Er ...
seg000:02DE CurrentPDB	    dw 0		    ; DATA XREF: DOSINIT-6D30r
seg000:02DE					    ; seg000:NAME1_1w ...
seg000:02E0 ConC_Spsave	    dw 0		    ; DATA XREF: STATCHK+C0w
seg000:02E0					    ; STATCHK+CFr
seg000:02E2 exit_code	    dw 0		    ; DATA XREF: seg000:5EF3w
seg000:02E2					    ; FATALC+BF5w
seg000:02E4 CURDRV	    db 0		    ; DATA XREF: seg000:_$GET_DEFAULT_DRIVEr
seg000:02E4					    ; seg000:1B56w ...
seg000:02E5 CNTCFLAG	    db 0		    ; DATA XREF: seg000:1417r
seg000:02E5					    ; seg000:1427w ...
seg000:02E6 USER_IN_AX	    db 0		    ; DATA XREF: STATCHK:DSKROUTw
seg000:02E6					    ; FCBRegen:RegenFailr ...
seg000:02E7 USER_IN_AX_1    db 0		    ; DATA XREF: ETAB_LK+Er
seg000:02E8 PROC_ID	    dw 0		    ; DATA XREF: STATCHK-415Bw
seg000:02E8					    ; FCBRegen+4Er ...
seg000:02EA USER_ID	    dw 0		    ; DATA XREF: STATCHK-4161w
seg000:02EA					    ; DOS_ABORT+5Br ...
seg000:02EC FirstArena	    dw 0		    ; DATA XREF: _$ALLOC+7w
seg000:02EC					    ; _$ALLOC:alloc_endr ...
seg000:02EE BestArena	    dw 0		    ; DATA XREF: _$ALLOC+Bw
seg000:02EE					    ; _$ALLOC:alloc_bestr ...
seg000:02F0 LastArena	    dw 0		    ; DATA XREF: _$ALLOC+Fw
seg000:02F0					    ; _$ALLOC:alloc_lastw ...
seg000:02F2 ENDMEM	    dw 0		    ; DATA XREF: DOSINIT-6D38r
seg000:02F2					    ; seg000:ATTRIB_4r	...
seg000:02F4 LASTENT	    dw 0		    ; DATA XREF: DOS_SEARCH_FIRST+41w
seg000:02F4					    ; DOS_SEARCH_FIRST+76r ...
seg000:02F6 FAILERR	    db 0		    ; DATA XREF: STATCHK-4115w
seg000:02F6					    ; ErrorMap+4r ...
seg000:02F7 ALLOWED	    db 0		    ; DATA XREF: FCBHardErr+3w
seg000:02F7					    ; DirFromSFT+14w ...
seg000:02F8 NoSetDir	    db 0		    ; DATA XREF: STATCHK-4119w
seg000:02F8					    ; seg000:2D6Ew ...
seg000:02F9 DidCTRLC	    db 0		    ; DATA XREF: STATCHK+E8w
seg000:02F9					    ; seg000:6377w
seg000:02FA SpaceFlag	    db 0		    ; DATA XREF: MAKEFCBw
seg000:02FA					    ; MUSTGETWORD+7r ...
seg000:02FB		    db 90h
seg000:02FC DAY		    db 0		    ; DATA XREF: seg000:179Ar
seg000:02FC					    ; DATE16+22r ...
seg000:02FD MONTH	    db 0		    ; DATA XREF: DATE16+18r
seg000:02FD					    ; READTIME+64w
seg000:02FE YEAR	    dw 0		    ; DATA XREF: seg000:1797r
seg000:02FE					    ; seg000:SETYEARw ...
seg000:0300 DAYCNT	    dw 0FFFFh		    ; DATA XREF: READTIME+2Br
seg000:0300					    ; READTIME+36w ...
seg000:0302 WEEKDAY	    db 0		    ; DATA XREF: seg000:17AAr
seg000:0302					    ; seg000:195Cw
seg000:0303 CONSWAP	    db 0		    ; DATA XREF: STATCHK-4122w
seg000:0303					    ; SWAPBACKw ...
seg000:0304 IDLEINT	    db 1		    ; DATA XREF: STATCHK-411Ew
seg000:0304					    ; STATCHK-40DAw ...
seg000:0305 fAborting	    db 0		    ; DATA XREF: FATALC:NOSWAP2r
seg000:0305					    ; FATALC+DEw ...
seg000:0306 DEVCALL	    db 0		    ; DATA XREF: Save_Restore_Packet+Co
seg000:0306					    ; Save_Restore_Packet+15o ...
seg000:0307 DEVCALL_REQUNIT db 0		    ; DATA XREF: CHARINIT+6w
seg000:0308 DEVCALL_REQFUNC db 0		    ; DATA XREF: FAT_GOT_DPB+Bw
seg000:0308					    ; FAT_GOT_DPB+11Bw	...
seg000:0309 DEVCALL_REQSTAT db 10 dup(0)	    ; DATA XREF: DOS_READ+7Br
seg000:0309					    ; DOS_READ+CCr ...
seg000:0313 CALLMED	    db 0		    ; DATA XREF: FAT_GOT_DPB+1Aw
seg000:0313					    ; FAT_GOT_DPB+12Aw	...
seg000:0314 CALLXAD	    db 0		    ; DATA XREF: DOS_READ:DVRDIGNw
seg000:0314					    ; DOS_WRITE+100w ...
seg000:0315 CALLVIDM	    db 0		    ; DATA XREF: FAT_GOT_DPB+75r
seg000:0316 CALLXAD_2	    dw 0		    ; DATA XREF: DOS_READ+F8r
seg000:0316					    ; DOS_WRITE+107r ...
seg000:0318 CALLSCNT	    dd 0		    ; DATA XREF: DOS_READ+A2r
seg000:0318					    ; DOS_READ+DBw ...
seg000:031C CALLVIDRW	    dd 0		    ; DATA XREF: HARDERRRW+6r
seg000:0320 CALLDEVAD	    dw 0		    ; DATA XREF: DEVIOCALL2+6w
seg000:0320					    ; DEVIOCALL2+Fr ...
seg000:0322 CALLDEVAD_2	    dw 0		    ; DATA XREF: DEVIOCALL2+Aw
seg000:0324 IOCALL	    db 0		    ; DATA XREF: _$IOCTL+FEw
seg000:0324					    ; _$IOCTL+124o ...
seg000:0325 IOCALL_REQUNIT  db 0		    ; DATA XREF: _$IOCTL+108w
seg000:0325					    ; _$IOCTL+2E6r
seg000:0326 IOCALL_REQFUNC  db 0		    ; DATA XREF: _$IOCTL+103w
seg000:0326					    ; _$IOCTL+157w ...
seg000:0327 IOCALL_REQSTAT  db 0		    ; DATA XREF: _$IOCTL+167w
seg000:0327					    ; _$IOCTL+17Br ...
seg000:0328 IOCALL_REQSTAT_1 db	9 dup(0)	    ; DATA XREF: IOFUNC:DNODRDr
seg000:0328					    ; IOFUNC:NO_RETRYw
seg000:0331 IOMED	    db 0		    ; DATA XREF: _$IOCTL+10Cw
seg000:0331					    ; _$IOCTL+21Aw ...
seg000:0332 IOXAD	    db 0		    ; DATA XREF: _$IOCTL+110w
seg000:0332					    ; _$IOCTL+221w ...
seg000:0333 IOCTL_REQ_REG_SI db	0		    ; DATA XREF: _$IOCTL+114w
seg000:0334 IOXAD_2	    db 0		    ; DATA XREF: _$IOCTL+225w
seg000:0334					    ; IOFUNCw ...
seg000:0335 IOCTL_REQ_REG_DI db	0		    ; DATA XREF: _$IOCTL+118w
seg000:0336 IOSCNT	    db 0		    ; DATA XREF: _$IOCTL+21Dw
seg000:0336					    ; _$IOCTL+23Er ...
seg000:0337 IOCTL_REQ_GENERICIOCTL_PACKET db 0	    ; DATA XREF: _$IOCTL+11Cw
seg000:0338		    db 0
seg000:0339 IOCTL_REQ_GENERICIOCTL_PACKET_2 db 0    ; DATA XREF: _$IOCTL+120w
seg000:033A DSKSTCALL	    dw 0Eh		    ; DATA XREF: DSKSTATCHK+17w
seg000:033A					    ; DSKSTATCHK+22o ...
seg000:033C DSKSTCOM	    db 5		    ; DATA XREF: DSKSTATCHK+12w
seg000:033C					    ; DSKSTATCHK+45w ...
seg000:033D DSKSTST	    db 10 dup(0)	    ; DATA XREF: DSKSTATCHK+1Cw
seg000:033D					    ; DSKSTATCHK+2Cr ...
seg000:0347 DSKCHRET	    db 0		    ; DATA XREF: DSKSTATCHK:GotChr
seg000:0347					    ; DSKSTATCHK+51w
seg000:0348 DEVIOBUF_PTR    db 5Eh		    ; DATA XREF: RealDivOv+1Bw
seg000:0348					    ; RealDivOv+26w
seg000:0349		    db 3
seg000:034A DSKCHRET_3	    dw 0		    ; DATA XREF: DOSINIT+15Bw
seg000:034C DSKSTCNT	    db 1		    ; DATA XREF: DSKSTATCHK+5Dw
seg000:034C					    ; RealDivOv+14w ...
seg000:034D		    db 0
seg000:034E		    db 0
seg000:034F		    db 0
seg000:0350 CreatePDB	    db 0		    ; DATA XREF: seg000:NAME1_8_5w
seg000:0350					    ; _$DUP_PDBw ...
seg000:0351		    db 0
seg000:0352 USERNUM	    dw 0		    ; DATA XREF: seg000:1973r
seg000:0354 USERNUM_2	    db 0		    ; DATA XREF: seg000:196Fr
seg000:0355 OEMNUM	    db 0
seg000:0356		    dw offset USTABLE
seg000:0358 TIMEBUF	    dw 0		    ; DATA XREF: seg000:17FAo
seg000:0358					    ; READTIME+8o ...
seg000:035A TIMEBUF_2	    dw 0		    ; DATA XREF: seg000:1819w
seg000:035A					    ; READTIME+23r
seg000:035C TIMEBUF_4	    dw 0		    ; DATA XREF: seg000:1815w
seg000:035C					    ; READTIME+27r
seg000:035E DEVIOBUF	    dw 0		    ; DATA XREF: IOFUNC+5o
seg000:035E					    ; IOFUNC+13w ...
seg000:0360 OPENBUF	    db 0		    ; DATA XREF: AbsSetup+1Co
seg000:0360					    ; seg000:_$FCB_DELETEo ...
seg000:0361		    db 127 dup(0)
seg000:03E0 RENBUF	    dw 0		    ; DATA XREF: seg000:24A1o
seg000:03E0					    ; seg000:3B3Ao ...
seg000:03E2		    db 49 dup(0)
seg000:0413 RENBUF_SF_ENTRY_sf_MFT dw 0		    ; DATA XREF: seg000:3B40w
seg000:0415		    db 75 dup(0)
seg000:0460 SEARCHBUF	    db 0		    ; DATA XREF: seg000:2BB6o
seg000:0460					    ; seg000:SearchSeto ...
seg000:0461		    db 7 dup(0)
seg000:0468 INITSP	    dw 0		    ; DATA XREF: DOSINIT-6DA0r
seg000:0468					    ; DOSINIT+7w
seg000:046A INITSS	    dw 0		    ; DATA XREF: DOSINIT:MOVDPBr
seg000:046A					    ; DOSINIT:loc_721Dw
seg000:046C ; ---------------------------------------------------------------------------
seg000:046C ; START OF FUNCTION	CHUNK FOR DOSINIT
seg000:046C
seg000:046C MOVDPB:				    ; CODE XREF: DOSINIT+268j
seg000:046C		    mov	    ss,	cs:INITSS
seg000:0471		    mov	    sp,	cs:INITSP
seg000:0476		    rep	movsb
seg000:0478		    cld
seg000:0479		    mov	    es:DMAADD_2, dx
seg000:047E		    mov	    si,	word ptr ds:DPBHEAD
seg000:0482		    mov	    word ptr es:DPBHEAD+2, es
seg000:0487		    mov	    word ptr es:SFT_ADDR+2, es
seg000:048C		    mov	    cl,	ds:NUMIO
seg000:0490		    xor	    ch,	ch
seg000:0492
seg000:0492 SETFINDPB:				    ; CODE XREF: DOSINIT-6D73j
seg000:0492					    ; DATA XREF: DOS_SEARCH_NEXT+19o ...
seg000:0492		    mov	    word ptr es:[si+1Ah], es
seg000:0496		    mov	    byte ptr es:[si+17h], -1
seg000:049B		    add	    si,	32
seg000:049E		    loop    SETFINDPB
seg000:04A0		    sub	    si,	32
seg000:04A3		    mov	    word ptr es:[si+1Ah], -1
seg000:04A9		    push    es
seg000:04AA		    mov	    di,	721Fh	    ; SYSBUF+15
seg000:04AD		    rcr	    di,	1
seg000:04AF		    shr	    di,	1
seg000:04B1		    shr	    di,	1
seg000:04B3		    shr	    di,	1
seg000:04B5		    mov	    ax,	es
seg000:04B7		    add	    ax,	di
seg000:04B9		    mov	    es,	ax
seg000:04BB		    xor	    di,	di
seg000:04BD		    mov	    word ptr ds:BUFFHEAD+2, es
seg000:04C1		    mov	    word ptr ds:BUFFHEAD, di
seg000:04C5		    mov	    word ptr es:[di+4],	0FFh
seg000:04CB		    mov	    word ptr es:[di], -1
seg000:04D0		    mov	    word ptr es:[di+2],	-1
seg000:04D6		    pop	    es
seg000:04D7		    push    es
seg000:04D8		    inc	    dx
seg000:04D9		    mov	    si,	ds:ENDMEM
seg000:04DD		    call    _$DUP_PDB
seg000:04E0		    pop	    es
seg000:04E1		    mov	    ax,	cs:CurrentPDB
seg000:04E1 ; END OF FUNCTION CHUNK FOR	DOSINIT
seg000:04E5
seg000:04E5 NAME1_1:				    ; DATA XREF: FCBRegen+5Co
seg000:04E5					    ; DOS_RENAME+CCo ...
seg000:04E5		    mov	    es:CurrentPDB, ax
seg000:04E9
seg000:04E9 NAME1_8_5:				    ; DATA XREF: GetPath:setExto
seg000:04E9					    ; Build_device_ent+3o
seg000:04E9		    mov	    es:CreatePDB, 0
seg000:04EF		    dec	    ax
seg000:04F0
seg000:04F0 NAME2_2:				    ; DATA XREF: DOS_RENAME+C9o
seg000:04F0					    ; DOS_RENAME+E2o
seg000:04F0		    mov	    es:arena_head, ax
seg000:04F4		    push    ds
seg000:04F5		    mov	    ds,	ax
seg000:04F7		    mov	    byte ptr ds:START, 5Ah
seg000:04FC
seg000:04FC DEVFCB_dir_time:			    ; DATA XREF: Build_device_ent+15o
seg000:04FC					    ; DOS_RENAME+D7w ...
seg000:04FC		    mov	    word ptr ds:START+1, 0
seg000:0502
seg000:0502 ATTRIB_4:				    ; DATA XREF: seg000:NoAttrw
seg000:0502					    ; seg000:2445r ...
seg000:0502		    sub	    ax,	es:ENDMEM
seg000:0507
seg000:0507 ExtFCB:				    ; DATA XREF: seg000:2BD7r
seg000:0507					    ; seg000:2BFCr ...
seg000:0507		    neg	    ax
seg000:0509
seg000:0509 Open_Access:			    ; DATA XREF: Check_Access_AXw
seg000:0509		    dec	    ax
seg000:050A
seg000:050A fSplice_x2:				    ; DATA XREF: DOS_DELETE:LOCAL_DELETEw
seg000:050A					    ; DOS_DELETE:DELFILEw ...
seg000:050A		    mov	    ds:ARENA_SIZE, ax
seg000:050D
seg000:050D fSharing:				    ; DATA XREF: STATCHK-4136w
seg000:050D					    ; Idler ...
seg000:050D		    pop	    ds
seg000:050E
seg000:050E SECCLUSPOS:				    ; DATA XREF: DIRREAD:DoReadw
seg000:050E					    ; SETUP+57w ...
seg000:050E		    mov	    di,	offset SFTABL_SFT_SFTable
seg000:0511
seg000:0511 THISDRV:				    ; DATA XREF: DOS_RENAME+9Dr
seg000:0511					    ; seg000:35B6r ...
seg000:0511		    mov	    ax,	3
seg000:0514
seg000:0514 INSMODE:				    ; DATA XREF: seg000:1FF3w
seg000:0514					    ; seg000:203Ar ...
seg000:0514		    stosw
seg000:0515
seg000:0515 cMeta:				    ; DATA XREF: seg000:rmlsetr
seg000:0515					    ; seg000:ChDirCrackr ...
seg000:0515		    mov	    di,	offset SysInitTable
seg000:0518
seg000:0518 CREATING:				    ; DATA XREF: DOS_DELETE+13w
seg000:0518					    ; DOS_RENAME+86w ...
seg000:0518		    retf
seg000:0518 ; ---------------------------------------------------------------------------
seg000:0519 DELALL	    db 0		    ; DATA XREF: DOS_DELETE+59w
seg000:0519					    ; DOS_DELETE+7Dr ...
seg000:051A EXITHOLD	    dd 0		    ; DATA XREF: CHARHARD+Dw
seg000:051A					    ; FATAL1+5w ...
seg000:051E User_SP	    dw 0		    ; DATA XREF: seg000:1448w
seg000:051E					    ; seg000:1450r ...
seg000:0520 User_SS	    dw 0		    ; DATA XREF: STATCHK-4152r
seg000:0520					    ; STATCHK-4146w ...
seg000:0522 CONTSTK	    dw 0		    ; DATA XREF: FATALC:NoSetFailw
seg000:0522					    ; FATALC+58r
seg000:0524 THISDPB	    dd 0		    ; DATA XREF: seg000:GOTDPBw
seg000:0524					    ; FCBHardErr+9r ...
seg000:0528 CLUSSAVE	    dw 0		    ; DATA XREF: PACK+43r
seg000:0528					    ; MAPCLUSTER+59w ...
seg000:052A CLUSSEC	    dw 0		    ; DATA XREF: PACK+52r
seg000:052A					    ; MAPCLUSTER+5Cw
seg000:052C PREREAD	    dw 0		    ; DATA XREF: GETBUFFRBw
seg000:052C					    ; GETBUFFRB+46r
seg000:052E FATBYT	    dw 0		    ; DATA XREF: ALLOCATE+6w
seg000:052E					    ; RESTFATBYT+5r
seg000:0530 FATBYTE	    dw 0		    ; DATA XREF: seg000:1BECw
seg000:0530					    ; seg000:1BF0o
seg000:0532 DEVPT	    dd 0		    ; DATA XREF: FCBRegen+83r
seg000:0532					    ; DEVNAME+59w ...
seg000:0536 THISSFT	    dd 0		    ; DATA XREF: _$DUP_PDB+5Cw
seg000:0536					    ; seg000:2474r ...
seg000:053A THISCDS	    dd 0		    ; DATA XREF: seg000:1645r
seg000:053A					    ; seg000:1C2Br ...
seg000:053E THISFCB	    dd 0		    ; DATA XREF: seg000:_$DIR_SEARCH_FIRSTw
seg000:053E					    ; seg000:2BD3r ...
seg000:0542 SFN		    dw -1		    ; DATA XREF: FATALC+1Fr
seg000:0542					    ; FATALC+8Dr ...
seg000:0544 JFN		    dw 0		    ; DATA XREF: _$OPEN+37w
seg000:0544					    ; _$OPEN+91r
seg000:0546 PJFN	    dd 0		    ; DATA XREF: FATALC+29r
seg000:0546					    ; FATALC+9Dr ...
seg000:054A WFP_START	    dw 0		    ; DATA XREF: seg000:24B6r
seg000:054A					    ; seg000:2E48r ...
seg000:054C REN_WFP	    dw 0		    ; DATA XREF: seg000:24BBw
seg000:054C					    ; DOS_RENAME+14r ...
seg000:054E CURR_DIR_END    dw 0		    ; DATA XREF: DOS_RENAME+80w
seg000:054E					    ; GetPath:CrackItr	...
seg000:0550 NEXTADD	    dw 0		    ; DATA XREF: DOS_READ+139w
seg000:0550					    ; SETUP+13w ...
seg000:0552 LASTPOS	    dw 0		    ; DATA XREF: DISKREAD:SKIPERRw
seg000:0552					    ; DISKREAD+108w ...
seg000:0554 CLUSNUM	    dw 0		    ; DATA XREF: DIRREAD+2Ar
seg000:0554					    ; SETUP+62w ...
seg000:0556 DIRSEC	    dw 0		    ; DATA XREF: DIRREAD+21r
seg000:0556					    ; SETDIRSRCH+30w ...
seg000:0558 DIRSTART	    dw 0		    ; DATA XREF: DOS_RENAME+D4r
seg000:0558					    ; DOS_SEARCH_FIRST+7Ar ...
seg000:055A SECPOS	    dw 0		    ; DATA XREF: SETUP+4Aw
seg000:055A					    ; DISKWRITE+109w ...
seg000:055C VALSEC	    dw 0		    ; DATA XREF: DISKWRITE:NORNDw
seg000:055C					    ; BUFWRT+7r
seg000:055E BYTSECPOS	    dw 0		    ; DATA XREF: SETUP+4Dw
seg000:055E					    ; BREAKDOWNr ...
seg000:0560 BYTPOS	    dd 0		    ; DATA XREF: SETUP+28w
seg000:0560					    ; DISKREAD+8r ...
seg000:0564 BYTCNT1	    dw 0		    ; DATA XREF: BREAKDOWN:SAVFIRw
seg000:0564					    ; BREAKDOWN+29r ...
seg000:0566 BYTCNT2	    dw 0		    ; DATA XREF: BREAKDOWN+25w
seg000:0566					    ; BREAKDOWN+38w ...
seg000:0568 SECCNT	    dw 0		    ; DATA XREF: BREAKDOWN+22w
seg000:0568					    ; BREAKDOWN+3Bw ...
seg000:056A ENTFREE	    dw 0		    ; DATA XREF: FINDENTRY+61r
seg000:056A					    ; FINDENTRY+67w ...
seg000:056C ENTLAST	    dw 0		    ; DATA XREF: FINDENTRY+71w
seg000:056C					    ; NEXTENTRY+3r ...
seg000:056E NXTCLUSNUM	    dw 0		    ; DATA XREF: DIRREAD+2Ew
seg000:056E					    ; DIRREAD:HAVESKIPPEDw ...
seg000:0570 GROWCNT	    dd 0		    ; DATA XREF: DISKWRITE+73w
seg000:0570					    ; DISKWRITE:SETGRWw ...
seg000:0574 CURBUF	    dd 0		    ; DATA XREF: DOS_DELETE+97r
seg000:0574					    ; DOS_RENAME+151r ...
seg000:0578 CONSFT	    dd 0		    ; DATA XREF: SWAPCON+Bw
seg000:0578					    ; GET_IO_SFT+1Fr ...
seg000:057C SaveBX	    dw 0		    ; DATA XREF: STATCHK-4170w
seg000:057C					    ; STATCHK-40C1w ...
seg000:057E SaveDS	    dw 0		    ; DATA XREF: STATCHK-4175w
seg000:057E					    ; STATCHK-40BDr ...
seg000:0580 restore_tmp	    dw 0		    ; DATA XREF: restore_worldw
seg000:0580					    ; restore_world+Er	...
seg000:0582 NSS		    dw 0		    ; DATA XREF: STATCHK-414Fw
seg000:0582					    ; STATCHK-4097r
seg000:0584 NSP		    dw 0		    ; DATA XREF: STATCHK-4155w
seg000:0584					    ; STATCHK-409Fr
seg000:0586 RENAMEDMA	    db 0		    ; DATA XREF: DOS_RENAME+34o
seg000:0587 RENAMEDMA_1	    db 12 dup(0)	    ; DATA XREF: DOS_RENAME+193o
seg000:0593 RENAMEDMA_13    dw 0		    ; DATA XREF: GET_SOURCE+11r
seg000:0595 RENAMEDMA_15    dw 0		    ; DATA XREF: DOS_RENAME+11Er
seg000:0595					    ; GET_SOURCEr
seg000:0597		    dd 0
seg000:059B RENAMEDMA_21    db 11 dup(0)	    ; DATA XREF: DOS_RENAME+DCo
seg000:05A6 RENAMEDMA_21_dir_attr db 0		    ; DATA XREF: DOS_RENAME+124r
seg000:05A6					    ; DOS_RENAME+15Fo
seg000:05A7		    db 298 dup(0)
seg000:06D1 AUX_STACK_SF_ENTRY_size dw 0	    ; DATA XREF: REN_DEL_Check+33o
seg000:06D1					    ; DOS_RENAME+132o
seg000:06D3		    db 51 dup(0)
seg000:0706 AUXSTACK	    dw 0		    ; DATA XREF: STATCHK:REDISPo
seg000:0706					    ; seg000:56F4o
seg000:0708		    db 382 dup(0)
seg000:0886 DSKSTACK	    dw 0		    ; DATA XREF: STATCHK-40D5o
seg000:0886					    ; seg000:15E9o ...
seg000:0888		    db 144 dup(0)
seg000:0918 ADJFAC	    dw 0
seg000:091A		    db 236 dup(0)
seg000:0A06 IOSTACK	    db 0		    ; DATA XREF: seg000:_$SET_PRINTER_FLAGw
seg000:0A06					    ; STATCHK-40F7o ...
seg000:0A07 VOLCHNG_FLAG    db 0		    ; DATA XREF: DOS_DELETE+10Bw
seg000:0A07					    ; seg000:3635w ...
seg000:0A08 VIRTUAL_OPEN    db 0		    ; DATA XREF: NewEntry+92w
seg000:0A08					    ; CHECK_VIRT_OPEN+2r ...
seg000:0A09 SWAP_END	    dw 0		    ; DATA XREF: seg000:665Do
seg000:0A0B		    db 621 dup(0)
seg000:0C78 MSVERS	    db 3		    ; DATA XREF: seg000:1977r
seg000:0C79		    db 30
seg000:0C7A YRTAB	    db 200		    ; DATA XREF: READTIME+4Bo
seg000:0C7A					    ; seg000:1907o
seg000:0C7B		    db 166
seg000:0C7C		    db 200
seg000:0C7D		    db 165
seg000:0C7E		    db 200
seg000:0C7F		    db 165
seg000:0C80		    db 200
seg000:0C81 MONTAB_x1	    db 165		    ; DATA XREF: seg000:18E4o
seg000:0C82 MONTAB	    db 31		    ; DATA XREF: READTIME+5Eo
seg000:0C82					    ; seg000:1913o
seg000:0C83 february	    db 28		    ; DATA XREF: seg000:SAVFEBw
seg000:0C84		    db 31
seg000:0C85		    db 30
seg000:0C86		    db 31
seg000:0C87		    db 30
seg000:0C88		    db 31
seg000:0C89		    db 31
seg000:0C8A		    db 30
seg000:0C8B		    db 31
seg000:0C8C		    db 30
seg000:0C8D		    db 31
seg000:0C8E I21_MAP_E_TAB   db 38h,2,1,2	    ; DATA XREF: ETAB_LK+9o
seg000:0C92		    db 39h,3,3,2,5
seg000:0C97		    db 3Ah,4,10h,3,2,5
seg000:0C9D		    db 3Bh,2,2,3
seg000:0CA1		    db 3Ch,4,3,2,4,5
seg000:0CA7		    db 3Dh,5,3,2,0Ch,4,5
seg000:0CAE		    db 3Eh,1,6
seg000:0CB1		    db 3Fh,2,6,5
seg000:0CB5		    db 40h,2,6,5
seg000:0CB9		    db 41h, 3, 3, 2, 5
seg000:0CBE		    db 42h,2,6,1
seg000:0CC2		    db 43h, 4, 3, 2, 1,	5
seg000:0CC8		    db 44h,5,0Fh,0Dh,1,6,5
seg000:0CCF		    db 45h,2,6,4
seg000:0CCF		    db 46h,2,6,4
seg000:0CD7		    db 47h,1,0Fh
seg000:0CDA		    db 48h,2,7,8
seg000:0CDA		    db 49h,2,7,9
seg000:0CE2		    db 4Ah,3,7,9,8
seg000:0CE7		    db 4Bh,8,3,1,2,4,0Bh,0Ah,8,5
seg000:0CF1		    db 4Eh,3,3,2,12h
seg000:0CF6		    db 4Fh,1,12h
seg000:0CF9		    db 56h,4,11h,3,2,5
seg000:0CFF		    db 57h,2,6,1
seg000:0D03		    db 58h,1,1
seg000:0D06		    db 5Ah,4,3,2,4,5
seg000:0D0C		    db 5Bh,5,50h,3,2,4,5
seg000:0D13		    db 5Ch,4,6,1,24h,21h
seg000:0D19		    db 65h,2,1,2
seg000:0D1D		    db 66h,2,1,2
seg000:0D21		    db 68h,1,6
seg000:0D24		    db 67h,3,4,8,1
seg000:0D29		    db 0FFh
seg000:0D2A ERR_TABLE_21    db 1,7,4,0FFh	    ; DATA XREF: ErrorMap+1o
seg000:0D2A					    ; ErrorMap+13o
seg000:0D2A		    db 2,8,3,2
seg000:0D2A		    db 3,8,3,2
seg000:0D2A		    db 4,1,4,1
seg000:0D2A		    db 5,3,3,0FFh
seg000:0D2A		    db 6,7,4,1
seg000:0D2A		    db 7,7,5,5
seg000:0D2A		    db 8,1,4,5
seg000:0D2A		    db 9,7,4,5
seg000:0D2A		    db 0Ah,7,4,5
seg000:0D2A		    db 0Bh,9,3,1
seg000:0D2A		    db 0Ch,7,4,1
seg000:0D2A		    db 0Dh,9,4,1
seg000:0D2A		    db 0Fh,8,3,2
seg000:0D2A		    db 10h,3,3,2
seg000:0D2A		    db 11h,0Dh,3,2
seg000:0D2A		    db 12h,8,3,2
seg000:0D2A		    db 50h,0Ch,3,2
seg000:0D2A		    db 20h,0Ah,2,2
seg000:0D2A		    db 21h,0Ah,2,2
seg000:0D2A		    db 54h,1,4,0FFh
seg000:0D2A		    db 56h,3,3,1
seg000:0D2A		    db 52h,1,4,2
seg000:0D2A		    db 32h,9,3,3
seg000:0D2A		    db 55h,0Ch,3,3
seg000:0D2A		    db 57h,9,3,1
seg000:0D2A		    db 53h,0Dh,4,1
seg000:0D2A		    db 24h,1,4,5
seg000:0D2A		    db 0FFh,0FFh,0FFh,0FFh
seg000:0D9E ERR_TABLE_24    db 13h,0Bh,7,2	    ; DATA XREF: SET_I24_EXTENDED_ERROR+1Ao
seg000:0D9E		    db 14h,4,5,1
seg000:0D9E		    db 15h,5,7,0FFh
seg000:0D9E		    db 16h,4,5,1
seg000:0D9E		    db 17h,0Bh,4,2
seg000:0D9E		    db 18h,4,5,1
seg000:0D9E		    db 19h,5,1,2
seg000:0D9E		    db 1Ah,0Bh,7,2
seg000:0D9E		    db 1Bh,0Bh,4,2
seg000:0D9E		    db 1Ch,2,7,4
seg000:0D9E		    db 1Dh,5,4,0FFh
seg000:0D9E		    db 1Eh,5,4,0FFh
seg000:0D9E		    db 1Fh,0Dh,4,0FFh
seg000:0D9E		    db 20h,0Ah,2,2
seg000:0D9E		    db 21h,0Ah,2,2
seg000:0D9E		    db 22h,0Bh,7,2
seg000:0D9E		    db 32h,9,3,3
seg000:0D9E		    db 23h,7,4,1
seg000:0D9E		    db 24h,1,4,5
seg000:0D9E		    db 0FFh,0Dh,5,0FFh
seg000:0DEE ErrMap24	    db 13h		    ; DATA XREF: SET_I24_EXTENDED_ERROR+4o
seg000:0DEE					    ; SET_I24_EXTENDED_ERROR+Dr
seg000:0DEF		    db	14h
seg000:0DF0		    db	15h
seg000:0DF1		    db	16h
seg000:0DF2		    db	17h
seg000:0DF3		    db	18h
seg000:0DF4		    db	19h
seg000:0DF5		    db	1Ah
seg000:0DF6		    db	1Bh
seg000:0DF7		    db	1Ch
seg000:0DF8		    db	1Dh
seg000:0DF9		    db	1Eh
seg000:0DFA		    db	1Fh
seg000:0DFB		    db	1Fh
seg000:0DFC		    db	1Fh
seg000:0DFD		    db	22h ; "
seg000:0DFE MAXCALL	    db 36		    ; DATA XREF: seg000:1455r
seg000:0DFE					    ; SET_I24_EXTENDED_ERROR+1o
seg000:0DFF MAXCOM	    db 104		    ; DATA XREF: STATCHK:COMMANDr
seg000:0E00 DISPATCH	    dw offset _$ABORT	    ; DATA XREF: STATCHK:DISPCALLr
seg000:0E02		    dw offset _$STD_CON_INPUT
seg000:0E04		    dw offset _$STD_CON_OUTPUT
seg000:0E06		    dw offset _$STD_AUX_INPUT
seg000:0E08		    dw offset _$STD_AUX_OUTPUT
seg000:0E0A		    dw offset _$STD_PRINTER_OUTPUT
seg000:0E0C		    dw offset _$RAW_CON_IO
seg000:0E0E		    dw offset _$RAW_CON_INPUT
seg000:0E10		    dw offset _$STD_CON_INPUT_NO_ECHO
seg000:0E12		    dw offset _$STD_CON_STRING_OUTPUT
seg000:0E14		    dw offset _$STD_CON_STRING_INPUT
seg000:0E16		    dw offset _$STD_CON_INPUT_STATUS
seg000:0E18		    dw offset _$STD_CON_INPUT_FLUSH
seg000:0E1A		    dw offset _$DISK_RESET
seg000:0E1C		    dw offset _$SET_DEFAULT_DRIVE
seg000:0E1E		    dw offset _$FCB_OPEN
seg000:0E20		    dw offset _$FCB_CLOSE
seg000:0E22		    dw offset _$DIR_SEARCH_FIRST
seg000:0E24		    dw offset _$DIR_SEARCH_NEXT
seg000:0E26		    dw offset _$FCB_DELETE
seg000:0E28		    dw offset _$FCB_SEQ_READ
seg000:0E2A		    dw offset _$FCB_SEQ_WRITE
seg000:0E2C		    dw offset _$FCB_CREATE
seg000:0E2E		    dw offset _$FCB_RENAME
seg000:0E30		    dw offset NO_OP
seg000:0E32		    dw offset _$GET_DEFAULT_DRIVE
seg000:0E34		    dw offset _$SET_DMA
seg000:0E36		    dw offset _$SLEAZEFUNC
seg000:0E38		    dw offset _$SLEAZEFUNCDL
seg000:0E3A		    dw offset NO_OP
seg000:0E3C		    dw offset NO_OP
seg000:0E3E		    dw offset _$GET_DEFAULT_DPB
seg000:0E40		    dw offset NO_OP
seg000:0E42		    dw offset _$FCB_RANDOM_READ
seg000:0E44		    dw offset _$FCB_RANDOM_WRITE
seg000:0E46		    dw offset _$GET_FCB_FILE_LENGTH
seg000:0E48		    dw offset _$GET_FCB_POSITION
seg000:0E4A		    dw offset _$SET_INTERRUPT_VECTOR
seg000:0E4C		    dw offset _$CREATE_PROCESS_DATA_BLOCK
seg000:0E4E		    dw offset _$FCB_RANDOM_READ_BLOCK
seg000:0E50		    dw offset _$FCB_RANDOM_WRITE_BLOCK
seg000:0E52		    dw offset _$PARSE_FILE_DESCRIPTOR
seg000:0E54		    dw offset _$GET_DATE
seg000:0E56		    dw offset _$SET_DATE
seg000:0E58		    dw offset _$GET_TIME
seg000:0E5A		    dw offset _$SET_TIME
seg000:0E5C		    dw offset _$SET_VERIFY_ON_WRITE
seg000:0E5E		    dw offset _$GET_DMA
seg000:0E60		    dw offset _$GET_VERSION
seg000:0E62		    dw offset _$KEEP_PROCESS
seg000:0E64		    dw offset _$GET_DPB
seg000:0E66		    dw offset _$SET_CTRL_C_TRAPPING
seg000:0E68		    dw offset _$GET_INDOS_FLAG
seg000:0E6A		    dw offset _$GET_INTERRUPT_VECTOR
seg000:0E6C		    dw offset _$GET_DRIVE_FREESPACE
seg000:0E6E		    dw offset _$CHAR_OPER
seg000:0E70		    dw offset _$INTERNATIONAL
seg000:0E72		    dw offset _$MKDIR
seg000:0E74		    dw offset _$RMDIR
seg000:0E76		    dw offset _$CHDIR
seg000:0E78		    dw offset _$CREAT
seg000:0E7A		    dw offset _$OPEN
seg000:0E7C		    dw offset _$CLOSE
seg000:0E7E		    dw offset _$READ
seg000:0E80		    dw offset _$WRITE
seg000:0E82		    dw offset _$UNLINK
seg000:0E84		    dw offset _$LSEEK
seg000:0E86		    dw offset _$CHMOD
seg000:0E88		    dw offset _$IOCTL
seg000:0E8A		    dw offset _$DUP
seg000:0E8C		    dw offset _$DUP2
seg000:0E8E		    dw offset _$CURRENT_DIR
seg000:0E90		    dw offset _$ALLOC
seg000:0E92		    dw offset _$DEALLOC
seg000:0E94		    dw offset _$SETBLOCK
seg000:0E96		    dw offset _$EXEC
seg000:0E98		    dw offset _$EXIT
seg000:0E9A		    dw offset _$WAIT
seg000:0E9C		    dw offset _$FIND_FIRST
seg000:0E9E		    dw offset _$FIND_NEXT
seg000:0EA0		    dw offset _$SET_CURRENT_PDB
seg000:0EA2		    dw offset _$GET_CURRENT_PDB
seg000:0EA4		    dw offset _$GET_IN_VARS
seg000:0EA6		    dw offset _$SETDPB
seg000:0EA8		    dw offset _$GET_VERIFY_ON_WRITE
seg000:0EAA		    dw offset _$DUP_PDB
seg000:0EAC		    dw offset _$RENAME
seg000:0EAE		    dw offset _$FILE_TIMES
seg000:0EB0		    dw offset _$ALLOCOPER
seg000:0EB2		    dw offset _$GetExtendedError
seg000:0EB4		    dw offset _$CreateTempFile
seg000:0EB6		    dw offset _$CreateNewFile
seg000:0EB8		    dw offset _$LockOper
seg000:0EBA		    dw offset _$ServerCall
seg000:0EBC		    dw offset _$UserOper
seg000:0EBE		    dw offset _$AssignOper
seg000:0EC0		    dw offset _$NameTrans
seg000:0EC2		    dw offset NO_OP
seg000:0EC4		    dw offset _$GET_CURRENT_PDB
seg000:0EC6		    dw offset NO_OP
seg000:0EC8		    dw offset _$SET_PRINTER_FLAG
seg000:0ECA		    dw offset _$GetExtCntry
seg000:0ECC		    dw offset _$GetSetCdPg
seg000:0ECE		    dw offset _$ExtHandle
seg000:0ED0		    dw offset _$COMMIT
seg000:0ED2 FOO		    dw offset Leave2F	    ; DATA XREF: seg000:DispatchDOSr
seg000:0ED4 DTab	    dw offset DOSTable	    ; DATA XREF: seg000:1754r
seg000:0ED6 DOSTable	    db 46		    ; DATA XREF: seg000:DTabo
seg000:0ED7		    dw offset DOSInstall
seg000:0ED9		    dw offset DOS_CLOSE
seg000:0EDB		    dw offset RECSET
seg000:0EDD		    dw offset DOSGetGroup
seg000:0EDF		    dw offset PATHCHRCMP
seg000:0EE1		    dw offset OUTT
seg000:0EE3		    dw offset NET_I24_ENTRY
seg000:0EE5		    dw offset PLACEBUF
seg000:0EE7		    dw offset FREESFT
seg000:0EE9		    dw offset BUFWRITE
seg000:0EEB		    dw offset SHARE_VIOLATION
seg000:0EED		    dw offset SHARE_ERROR
seg000:0EEF		    dw offset SET_SFT_MODE
seg000:0EF1		    dw offset DATE16
seg000:0EF3		    dw offset SETVISIT
seg000:0EF5		    dw offset SCANPLACE
seg000:0EF7		    dw offset SKIPVISIT
seg000:0EF9		    dw offset StrCpy
seg000:0EFB		    dw offset StrLen
seg000:0EFD		    dw offset Ucase
seg000:0EFF		    dw offset POINTCOMP
seg000:0F01		    dw offset CHECKFLUSH
seg000:0F03		    dw offset SFFromSFN
seg000:0F05		    dw offset GetCDSFromDrv
seg000:0F07		    dw offset Get_User_Stack
seg000:0F09		    dw offset GetThisDrv
seg000:0F0B		    dw offset DriveFromText
seg000:0F0D		    dw offset SETYEAR
seg000:0F0F		    dw offset DSUM
seg000:0F11		    dw offset DSLIDE
seg000:0F13		    dw offset StrCmp
seg000:0F15		    dw offset InitCDS
seg000:0F17		    dw offset pJFNFromHandle
seg000:0F19		    dw offset _$NameTrans
seg000:0F1B		    dw offset CAL_LK
seg000:0F1D		    dw offset DEVNAME
seg000:0F1F		    dw offset Idle
seg000:0F21		    dw offset DStrLen
seg000:0F23		    dw offset NLS_OPEN
seg000:0F25		    dw offset _$CLOSE
seg000:0F27		    dw offset NLS_LSEEK
seg000:0F29		    dw offset _$READ
seg000:0F2B		    dw offset FastInit
seg000:0F2D		    dw offset NLS_IOCTL
seg000:0F2F		    dw offset GetDevList
seg000:0F31		    dw offset NLS_GETEXT
seg000:0F33 SysInitTable    dd DPBHEAD		    ; DATA XREF: seg000:cMetao
seg000:0F33					    ; seg000:GetDevListo ...
seg000:0F37		    dd COUNTRY_CDPG
seg000:0F3B FastTable	    dw 4		    ; DATA XREF: seg000:FastInito
seg000:0F3B					    ; seg000:ok_installo ...
seg000:0F3D		    dw offset FastRet
seg000:0F3F		    dw 0
seg000:0F41 FastOpen_Ext_Info db 5 dup(0)	    ; DATA XREF: GetPath+9Bo
seg000:0F41					    ; LookupPath+1Bo ...
seg000:0F46 Dir_Info_Buff   db 32 dup(0)	    ; DATA XREF: GetPath+98o
seg000:0F46					    ; LookupPath+18o
seg000:0F66 FastOpenFlg	    db 0		    ; DATA XREF: seg000:36B6w
seg000:0F66					    ; seg000:36CAw ...
seg000:0F67 Next_Element_Start dw 0		    ; DATA XREF: GetPath+270r
seg000:0F67					    ; LookupPath+31w ...
seg000:0F69 User_SP_2F	    dw offset FAKE_STACK_2F ; DATA XREF: Fake_User_Stackr
seg000:0F6B FAKE_STACK_2F   dw 12 dup( 0)	    ; DATA XREF: seg000:User_SP_2Fo
seg000:0F6B					    ; Save_Restore_Packet+9o ...
seg000:0F83 SCAN_FLAG	    db 0		    ; DATA XREF: seg000:1FB5w
seg000:0F83					    ; STATCHK+82r ...
seg000:0F84 DISK_FULL	    db 0		    ; DATA XREF: seg000:29BBr
seg000:0F84					    ; seg000:29C3w ...
seg000:0F85 DATE_FLAG	    dw 0		    ; DATA XREF: READTIMEw
seg000:0F85					    ; seg000:1F6Er ...
seg000:0F87 FETCHI_TAG	    dw 0		    ; DATA XREF: FETCHI_CHECK+1r
seg000:0F87					    ; DOSINIT+248w
seg000:0F89 ERRIN	    db 2		    ; DATA XREF: seg000:15FFo
seg000:0F8A		    db 6
seg000:0F8B		    db 12
seg000:0F8C		    db 4
seg000:0F8D		    db 8
seg000:0F8E		    db 0
seg000:0F8F ERROUT	    db 80h
seg000:0F90		    db 40h
seg000:0F91		    db 2
seg000:0F92		    db 10h
seg000:0F93		    db 4
seg000:0F94		    db 3
seg000:0F95 international_table	db 24
seg000:0F96		    dw 1
seg000:0F98 USTABLE	    dw 0		    ; DATA XREF: seg000:0356o
seg000:0F9A		    db '$'
seg000:0F9B		    db 0
seg000:0F9C		    db 0
seg000:0F9D		    db 0
seg000:0F9E		    db 0
seg000:0F9F		    db ','
seg000:0FA0		    db 0
seg000:0FA1		    db '.'
seg000:0FA2		    db 0
seg000:0FA3		    db '-'
seg000:0FA4		    db 0
seg000:0FA5		    db ':'
seg000:0FA6		    db 0
seg000:0FA7		    db 0
seg000:0FA8		    db 2
seg000:0FA9		    db 0
seg000:0FAA		    dw offset MAP_CASE
seg000:0FAC		    dw 0
seg000:0FAE		    db ','
seg000:0FAF		    db 0
seg000:0FB0		    db -1
seg000:0FB1 COUNTRY_CDPG    db 0		    ; DATA XREF: seg000:0F37o
seg000:0FB1					    ; seg000:19A9o ...
seg000:0FB2		    db 0
seg000:0FB3		    db 0
seg000:0FB4		    db 0
seg000:0FB5		    db 0
seg000:0FB6		    db 0
seg000:0FB7		    db 0
seg000:0FB8		    db 0
seg000:0FB9		    db '\COUNTRY.SYS',0
seg000:0FC6		    db 51 dup(0)
seg000:0FF9		    dw 437
seg000:0FFB		    dw 5
seg000:0FFD CDPG_ccSetUcase db 2		    ; DATA XREF: seg000:1A44o
seg000:0FFE		    dw offset UCASE_TAB
seg000:1000		    dw 0
seg000:1002		    db 4
seg000:1003		    dw offset FILE_UCASE_TAB
seg000:1005		    dw 0
seg000:1007		    db 5
seg000:1008		    dw offset FILE_CHAR_TAB
seg000:100A		    dw 0
seg000:100C		    db 6
seg000:100D		    dw offset COLLATE_TAB
seg000:100F		    dw 0
seg000:1011		    db 1
seg000:1012		    dw 38
seg000:1014		    dw 1
seg000:1016		    dw 437
seg000:1018 CDPG_ccDFormat  dw 0		    ; DATA XREF: seg000:19F3o
seg000:101A		    db '$'
seg000:101B		    db 0
seg000:101C		    db 0
seg000:101D		    db 0
seg000:101E		    db 0
seg000:101F		    db ','
seg000:1020		    db 0
seg000:1021		    db '.'
seg000:1022		    db 0
seg000:1023		    db '-'
seg000:1024		    db 0
seg000:1025		    db ':'
seg000:1026		    db 0
seg000:1027		    db 0
seg000:1028		    db 2
seg000:1029		    db 0
seg000:102A		    dw offset MAP_CASE
seg000:102C		    dw 0
seg000:102E		    db ','
seg000:102F		    db 0
seg000:1030		    dw 0
seg000:1032		    dw 0
seg000:1034		    dw 0
seg000:1036		    dw 0
seg000:1038		    dw 0
seg000:103A UCASE_TAB	    dw 128		    ; DATA XREF: seg000:0FFEo
seg000:103C UCASE_TAB_2	    db 128,154,69,65,142,65,143,128 ; DATA XREF: seg000:1775o
seg000:103C		    db 69,69,69,73,73,73,142,143
seg000:103C		    db 144,146,146,79,153,79,85,85
seg000:103C		    db 89,153,154,155,156,157,158,159
seg000:103C		    db 65,73,79,85,165,165,166,167
seg000:103C		    db 168,169,170,171,172,173,174,175
seg000:103C		    db 176,177,178,179,180,181,182,183
seg000:103C		    db 184,185,186,187,188,189,190,191
seg000:103C		    db 192,193,194,195,196,197,198,199
seg000:103C		    db 200,201,202,203,204,205,206,207
seg000:103C		    db 208,209,210,211,212,213,214,215
seg000:103C		    db 216,217,218,219,220,221,222,223
seg000:103C		    db 224,225,226,227,228,229,230,231
seg000:103C		    db 232,233,234,235,236,237,238,239
seg000:103C		    db 240,241,242,243,244,245,246,247
seg000:103C		    db 248,249,250,251,252,253,254,255
seg000:10BC FILE_UCASE_TAB  dw 128		    ; DATA XREF: seg000:1003o
seg000:10BE FILE_UCASE_TAB_2 db	128,154,69,65,142,65,143,128 ; DATA XREF: _UCase+11o
seg000:10BE		    db 69,69,69,73,73,73,142,143
seg000:10BE		    db 144,146,146,79,153,79,85,85
seg000:10BE		    db 89,153,154,155,156,157,158,159
seg000:10BE		    db 65,73,79,85,165,165,166,167
seg000:10BE		    db 168,169,170,171,172,173,174,175
seg000:10BE		    db 176,177,178,179,180,181,182,183
seg000:10BE		    db 184,185,186,187,188,189,190,191
seg000:10BE		    db 192,193,194,195,196,197,198,199
seg000:10BE		    db 200,201,202,203,204,205,206,207
seg000:10BE		    db 208,209,210,211,212,213,214,215
seg000:10BE		    db 216,217,218,219,220,221,222,223
seg000:10BE		    db 224,225,226,227,228,229,230,231
seg000:10BE		    db 232,233,234,235,236,237,238,239
seg000:10BE		    db 240,241,242,243,244,245,246,247
seg000:10BE		    db 248,249,250,251,252,253,254,255
seg000:113E FILE_CHAR_TAB   dw 22		    ; DATA XREF: seg000:1008o
seg000:1140		    db 1,0,255
seg000:1143		    db 0,0,20h
seg000:1146		    db 2,14
seg000:1148		    db '."/\[]:|<>+=;,',0
seg000:1157		    db 23 dup(0)
seg000:116E COLLATE_TAB	    dw 256		    ; DATA XREF: seg000:100Do
seg000:1170		    db 0,1,2,3,4,5,6,7
seg000:1170		    db 8,9,0Ah,0Bh,0Ch,0Dh,0Eh,0Fh
seg000:1170		    db 10h,11h,12h,13h,14h,15h,16h,17h
seg000:1170		    db 18h,19h,1Ah,1Bh,1Ch,1Dh,1Eh,1Fh
seg000:1170		    db 20h,21h,22h,23h,24h,25h,26h,27h
seg000:1170		    db 28h,29h,2Ah,2Bh,2Ch,2Dh,2Eh,2Fh
seg000:1170		    db 30h,31h,32h,33h,34h,35h,36h,37h
seg000:1170		    db 38h,39h,3Ah,3Bh,3Ch,3Dh,3Eh,3Fh
seg000:1170		    db 40h,41h,42h,43h,44h,45h,46h,47h
seg000:1170		    db 48h,49h,4Ah,4Bh,4Ch,4Dh,4Eh,4Fh
seg000:1170		    db 50h,51h,52h,53h,54h,55h,56h,57h
seg000:1170		    db 58h,59h,5Ah,5Bh,5Ch,5Dh,5Eh,5Fh
seg000:1170		    db 60h,41h,42h,43h,44h,45h,46h,47h
seg000:1170		    db 48h,49h,4Ah,4Bh,4Ch,4Dh,4Eh,4Fh
seg000:1170		    db 50h,51h,52h,53h,54h,55h,56h,57h
seg000:1170		    db 58h,59h,5Ah,7Bh,7Ch,7Dh,7Eh,7Fh
seg000:1170		    db 43h,55h,45h,41h,41h,41h,41h,43h
seg000:1170		    db 45h,45h,45h,49h,49h,49h,41h,41h
seg000:1170		    db 45h,41h,41h,4Fh,4Fh,4Fh,55h,55h
seg000:1170		    db 59h,4Fh,55h,24h,24h,24h,24h,24h
seg000:1170		    db 41h,49h,4Fh,55h,4Eh,4Eh,0A6h,0A7h
seg000:1170		    db 3Fh,0A9h,0AAh,0ABh,0ACh,21h,22h,22h
seg000:1170		    db 0B0h,0B1h,0B2h,0B3h,0B4h,0B5h,0B6h,0B7h
seg000:1170		    db 0B8h,0B9h,0BAh,0BBh,0BCh,0BDh,0BEh,0BFh
seg000:1170		    db 0C0h,0C1h,0C2h,0C3h,0C4h,0C5h,0C6h,0C7h
seg000:1170		    db 0C8h,0C9h,0CAh,0CBh,0CCh,0CDh,0CEh,0CFh
seg000:1170		    db 0D0h,0D1h,0D2h,0D3h,0D4h,0D5h,0D6h,0D7h
seg000:1170		    db 0D8h,0D9h,0DAh,0DBh,0DCh,0DDh,0DEh,0DFh
seg000:1170		    db 0E0h,53h,0E2h,0E3h,0E4h,0E5h,0E6h,0E7h
seg000:1170		    db 0E8h,0E9h,0EAh,0EBh,0ECh,0EDh,0EEh,0EFh
seg000:1170		    db 0F0h,0F1h,0F2h,0F3h,0F4h,0F5h,0F6h,0F7h
seg000:1170		    db 0F8h,0F9h,0FAh,0FBh,0FCh,0FDh,0FEh,0FFh
seg000:1270 DIVMES	    db 0Dh,0Ah		    ; DATA XREF: seg000:DIVOVo
seg000:1270		    db 'Divide overflow',0Dh,0Ah
seg000:1283 DivMesLen	    dw 19		    ; DATA XREF: seg000:56EBr
seg000:1285 CANCHAR	    db 1Bh		    ; DATA XREF: seg000:2029r
seg000:1286 ESCCHAR	    db 0		    ; DATA XREF: seg000:200Ar
seg000:1286					    ; seg000:TwoEscr ...
seg000:1287 ESCTAB	    db	40h ; @		    ; DATA XREF: seg000:1784o
seg000:1288		    db	4Dh ; M
seg000:1289		    db	3Bh ; ;
seg000:128A		    db	53h ; S
seg000:128B		    db	3Ch ; <
seg000:128C		    db	3Eh ; >
seg000:128D		    db	3Dh ; =
seg000:128E		    db	3Dh ; =
seg000:128F		    db	3Fh ; ?
seg000:1290		    db	4Bh ; K
seg000:1291		    db	52h ; R
seg000:1292		    db	52h ; R
seg000:1293		    db	41h ; A
seg000:1294		    db	41h ; A
seg000:1295 ESCFUNC	    dw offset GETCH	    ; DATA XREF: seg000:178Er
seg000:1297		    dw offset TwoEsc
seg000:1299		    dw offset ENTERINS_EXITINS
seg000:129B		    dw offset ENTERINS_EXITINS
seg000:129D		    dw offset BACKSP
seg000:129F		    dw offset REEDIT
seg000:12A1		    dw offset KILNEW
seg000:12A3		    dw offset COPYLIN
seg000:12A5		    dw offset SKIPSTR
seg000:12A7		    dw offset CopyStr
seg000:12A9		    dw offset SKIPONE
seg000:12AB		    dw offset COPYONE
seg000:12AD		    dw offset COPYONE
seg000:12AF		    dw offset CTRLZ
seg000:12B1 CRTERRTAB	    db 0		    ; DATA XREF: seg000:SET_MKND_ERRo
seg000:12B2		    db 5
seg000:12B3		    db 52h
seg000:12B4		    db 50h
seg000:12B5		    db 3
seg000:12B6		    db 5
seg000:12B7		    db 20h
seg000:12B8 LenTab	    db 22,14,22,13,15,14    ; DATA XREF: IOFUNC+47r
seg000:12BE CmdTab	    db 86h,4		    ; DATA XREF: IOFUNC+4Dr
seg000:12BE		    db 86h,5
seg000:12BE		    db 87h,8
seg000:12BE		    db 87h,0Ah
seg000:12BE		    db 86h,7
seg000:12BE		    db 86h,5
seg000:12CA CharType	    db 0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h
seg000:12CA					    ; DATA XREF: _UCase+17o
seg000:12CA					    ; DELIM+2o	...
seg000:12CA		    db 0F6h,0F0h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h
seg000:12CA		    db 0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h
seg000:12CA		    db 0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h
seg000:12CA		    db 0F8h,0FFh,0F6h,0FFh,0FFh,0FFh,0FFh,0FFh
seg000:12CA		    db 0FFh,0FFh,0FFh,0F4h,0F4h,0FFh,0FEh,0F6h
seg000:12CA		    db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
seg000:12CA		    db 0FFh,0FFh,0F4h,0F4h,0F4h,0F4h,0F4h,0FFh
seg000:12CA		    db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
seg000:12CA		    db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
seg000:12CA		    db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
seg000:12CA		    db 0FFh,0FFh,0FFh,0F6h,0F6h,0F6h,0FFh,0FFh
seg000:12CA		    db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
seg000:12CA		    db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
seg000:12CA		    db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
seg000:12CA		    db 0FFh,0FFh,0FFh,0FFh,0F4h,0FFh,0FFh,0FFh
seg000:12CA		    db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
seg000:12CA		    db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
seg000:12CA		    db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
seg000:12CA		    db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
seg000:12CA		    db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
seg000:12CA		    db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
seg000:12CA		    db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
seg000:12CA		    db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
seg000:12CA		    db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
seg000:12CA		    db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
seg000:12CA		    db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
seg000:12CA		    db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
seg000:12CA		    db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
seg000:12CA		    db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
seg000:12CA		    db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
seg000:12CA		    db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
seg000:13CA exec_init_sp    dw 0		    ; DATA XREF: seg000:60F8w
seg000:13CA					    ; seg000:61D3w ...
seg000:13CC exec_init_ss    dw 0		    ; DATA XREF: seg000:60F2w
seg000:13CC					    ; seg000:61D8w
seg000:13CE exec_init_ip    dw 0		    ; DATA XREF: seg000:60FFw
seg000:13CE					    ; seg000:61C8w ...
seg000:13D0 exec_init_cs    dw 0		    ; DATA XREF: seg000:6106w
seg000:13D0					    ; seg000:61C4w
seg000:13D2 exec_signature  dw 0		    ; DATA XREF: seg000:5FC3o
seg000:13D2					    ; seg000:Exec_Check_Sigr
seg000:13D4 exec_len_mod_512 dw	0
seg000:13D6 exec_pages	    dw 0		    ; DATA XREF: seg000:Exec_Save_Startr
seg000:13D8 exec_rle_count  dw 0		    ; DATA XREF: seg000:Exec_Get_Entriesr
seg000:13DA exec_par_dir    dw 0		    ; DATA XREF: seg000:5FFBr
seg000:13DA					    ; seg000:Exec_Find_Resr
seg000:13DC exec_min_BSS    dw 0		    ; DATA XREF: seg000:604Fr
seg000:13DC					    ; seg000:6059r
seg000:13DE exec_max_BSS    dw 0		    ; DATA XREF: seg000:5FD8r
seg000:13DE					    ; seg000:605Dr
seg000:13E0 exec_SS	    dw 0		    ; DATA XREF: seg000:60EDr
seg000:13E2 exec_SP	    dw 0		    ; DATA XREF: seg000:60F5r
seg000:13E4 exec_chksum	    dw 0
seg000:13E6 exec_IP	    dw 0		    ; DATA XREF: seg000:60FBr
seg000:13E8 exec_CS	    dw 0
seg000:13EA exec_rle_table  dw 0		    ; DATA XREF: seg000:610Br
seg000:13EC SERVERTAB	    dw offset SERVER_DISP   ; DATA XREF: seg000:659Ar
seg000:13EE SERVERLEAVE	    dw offset SERVERRETURN  ; DATA XREF: seg000:NO_SET_IDr
seg000:13F0 SERVER_DISP	    db 11		    ; DATA XREF: seg000:SERVERTABo
seg000:13F1		    dw offset SRV_CALL
seg000:13F3		    dw offset COMMIT_ALL
seg000:13F5		    dw offset CLOSE_NAME
seg000:13F7		    dw offset CLOSE_UID
seg000:13F9		    dw offset CLOSE_UID_PID
seg000:13FB		    dw offset GET_LIST
seg000:13FD		    dw offset GET_DOS_DATA
seg000:13FF		    dw offset SPOOL_OPER
seg000:1401		    dw offset SPOOL_OPER
seg000:1403		    dw offset SPOOL_OPER
seg000:1405		    dw offset _$setExtendedError
seg000:1407 ; ---------------------------------------------------------------------------
seg000:1407
seg000:1407 _$SET_CURRENT_PDB:			    ; CODE XREF: STATCHK-4184j
seg000:1407					    ; DATA XREF: seg000:0EA0o
seg000:1407		    mov	    cs:CurrentPDB, bx
seg000:140C		    iret
seg000:140D ; ---------------------------------------------------------------------------
seg000:140D
seg000:140D _$GET_CURRENT_PDB:			    ; CODE XREF: STATCHK-418Ej
seg000:140D					    ; STATCHK-4189j
seg000:140D					    ; DATA XREF: ...
seg000:140D		    mov	    bx,	cs:CurrentPDB
seg000:1412		    iret
seg000:1413 ; ---------------------------------------------------------------------------
seg000:1413
seg000:1413 _$SET_CTRL_C_TRAPPING:		    ; CODE XREF: STATCHK-417Fj
seg000:1413					    ; DATA XREF: seg000:0E66o
seg000:1413		    or	    al,	al
seg000:1415		    jnz	    short CTRL_C_set
seg000:1417		    mov	    dl,	cs:CNTCFLAG
seg000:141C		    iret
seg000:141D ; ---------------------------------------------------------------------------
seg000:141D
seg000:141D CTRL_C_set:				    ; CODE XREF: seg000:1415j
seg000:141D		    cmp	    al,	2
seg000:141F		    ja	    short bad_val
seg000:1421		    jz	    short scct_3
seg000:1423		    push    dx
seg000:1424		    and	    dl,	1
seg000:1427		    mov	    cs:CNTCFLAG, dl
seg000:142C		    pop	    dx
seg000:142D		    iret
seg000:142E ; ---------------------------------------------------------------------------
seg000:142E
seg000:142E scct_3:				    ; CODE XREF: seg000:1421j
seg000:142E		    and	    dl,	1
seg000:1431		    xchg    dl,	cs:CNTCFLAG
seg000:1436		    iret
seg000:1437 ; ---------------------------------------------------------------------------
seg000:1437
seg000:1437 bad_val:				    ; CODE XREF: seg000:141Fj
seg000:1437		    mov	    al,	0FFh
seg000:1439		    iret
seg000:143A ; ---------------------------------------------------------------------------
seg000:143A
seg000:143A _$SET_PRINTER_FLAG:			    ; CODE XREF: STATCHK-417Aj
seg000:143A					    ; DATA XREF: seg000:0EC8o
seg000:143A		    mov	    cs:IOSTACK,	al
seg000:143E		    iret
seg000:143F ; ---------------------------------------------------------------------------
seg000:143F
seg000:143F QUIT:				    ; DATA XREF: DOSINIT+1B2o
seg000:143F		    mov	    ah,	0
seg000:1441		    jmp	    short SAVREGS
seg000:1443 ; ---------------------------------------------------------------------------
seg000:1443 ; START OF FUNCTION	CHUNK FOR STATCHK
seg000:1443
seg000:1443 BADCALL:				    ; CODE XREF: seg000:145Aj
seg000:1443					    ; STATCHK-4193j
seg000:1443		    mov	    al,	0
seg000:1445
seg000:1445 _IRET:				    ; DATA XREF: DOSINIT+184o
seg000:1445		    iret
seg000:1445 ; END OF FUNCTION CHUNK FOR	STATCHK
seg000:1446 ; ---------------------------------------------------------------------------
seg000:1446
seg000:1446 CALL_ENTRY:				    ; DATA XREF: DOSINIT+1A9o
seg000:1446		    pop	    ax
seg000:1447		    pop	    ax
seg000:1448		    pop	    cs:User_SP
seg000:144D		    pushf
seg000:144E		    cli
seg000:144F		    push    ax
seg000:1450		    push    cs:User_SP
seg000:1455		    cmp	    cl,	cs:MAXCALL
seg000:145A		    ja	    short BADCALL
seg000:145C		    mov	    ah,	cl
seg000:145E		    jmp	    short SAVREGS
seg000:1460 ; ---------------------------------------------------------------------------
seg000:1460 ; START OF FUNCTION	CHUNK FOR STATCHK
seg000:1460
seg000:1460 COMMAND:				    ; CODE XREF: STATCHK:COMMANDJj
seg000:1460					    ; seg000:6372j
seg000:1460					    ; DATA XREF: ...
seg000:1460		    cmp	    ah,	cs:MAXCOM
seg000:1465		    ja	    short BADCALL
seg000:1467
seg000:1467 SAVREGS:				    ; CODE XREF: seg000:1441j
seg000:1467					    ; seg000:145Ej
seg000:1467		    cmp	    ah,	51h
seg000:146A		    jz	    short _$GET_CURRENT_PDB
seg000:146C		    cmp	    ah,	62h
seg000:146F		    jz	    short _$GET_CURRENT_PDB
seg000:1471		    cmp	    ah,	50h
seg000:1474		    jz	    short _$SET_CURRENT_PDB
seg000:1476		    cmp	    ah,	33h
seg000:1479		    jz	    short _$SET_CTRL_C_TRAPPING
seg000:147B		    cmp	    ah,	64h
seg000:147E		    jz	    short _$SET_PRINTER_FLAG
seg000:1480		    call    save_world
seg000:1483		    mov	    cs:SaveDS, ds
seg000:1488		    mov	    cs:SaveBX, bx
seg000:148D		    mov	    bx,	cs
seg000:148F		    mov	    ds,	bx
seg000:1491		    inc	    ds:INDOS
seg000:1495		    xor	    ax,	ax
seg000:1497		    mov	    ds:USER_ID,	ax
seg000:149A		    mov	    ax,	ds:CurrentPDB
seg000:149D		    mov	    ds:PROC_ID,	ax
seg000:14A0		    mov	    ax,	ds:User_SP
seg000:14A3		    mov	    ds:NSP, ax
seg000:14A6		    mov	    ax,	ds:User_SS
seg000:14A9		    mov	    ds:NSS, ax
seg000:14AC		    pop	    ax
seg000:14AD		    push    ax
seg000:14AE		    mov	    ds:User_SP,	sp
seg000:14B2		    mov	    ds:User_SS,	ss
seg000:14B6		    mov	    ds,	ds:CurrentPDB
seg000:14BA		    mov	    word ptr ds:BCLOCK,	sp
seg000:14BE		    mov	    word ptr ds:BCLOCK+2, ss
seg000:14C2		    mov	    byte ptr cs:fSharing, 0
seg000:14C8		    mov	    bx,	cs
seg000:14CA		    mov	    ss,	bx
seg000:14CC
seg000:14CC REDISP:				    ; CODE XREF: seg000:23A8j
seg000:14CC					    ; seg000:6655j
seg000:14CC		    mov	    sp,	offset AUXSTACK
seg000:14CF		    sti
seg000:14D0		    mov	    bx,	cs
seg000:14D2		    mov	    ds,	bx
seg000:14D4		    xor	    bh,	bh
seg000:14D6		    mov	    ds:CONSWAP,	bh
seg000:14DA		    mov	    ds:IDLEINT,	1
seg000:14DF		    mov	    ds:NoSetDir, bh
seg000:14E3		    mov	    ds:FAILERR,	bh
seg000:14E7		    mov	    bl,	ah
seg000:14E9		    shl	    bx,	1
seg000:14EB		    cld
seg000:14EC		    or	    ah,	ah
seg000:14EE		    jz	    short DSKROUT
seg000:14F0		    cmp	    ah,	59h
seg000:14F3		    jz	    short DISPCALL
seg000:14F5		    cmp	    ah,	0Ch
seg000:14F8		    ja	    short DSKROUT
seg000:14FA
seg000:14FA IOROUT:
seg000:14FA		    cmp	    ds:ERRORMODE, 0
seg000:14FF		    jnz	    short DISPCALL
seg000:1501		    mov	    sp,	offset IOSTACK
seg000:1504		    jmp	    short DISPCALL
seg000:1506 ; ---------------------------------------------------------------------------
seg000:1506
seg000:1506 DSKROUT:				    ; CODE XREF: STATCHK-410Aj
seg000:1506					    ; STATCHK-4100j
seg000:1506		    mov	    word ptr ds:USER_IN_AX, ax
seg000:1509		    mov	    ds:EXTERR_LOCUS, 1
seg000:150E		    mov	    ds:ERRORMODE, 0
seg000:1513		    mov	    ds:WPERR, -1
seg000:1518		    push    ax
seg000:1519		    mov	    ah,	82h
seg000:151B		    int	    2Ah		    ; Microsoft	Networks - END DOS CRITICAL SECTIONS 0 THROUGH 7
seg000:151D		    pop	    ax
seg000:151E		    mov	    ds:IDLEINT,	0
seg000:1523		    mov	    sp,	offset DSKSTACK
seg000:1526		    test    ds:CNTCFLAG, -1
seg000:152B		    jz	    short DISPCALL
seg000:152D		    push    ax
seg000:152E		    call    DSKSTATCHK
seg000:1531		    pop	    ax
seg000:1532
seg000:1532 DISPCALL:				    ; CODE XREF: STATCHK-4105j
seg000:1532					    ; STATCHK-40F9j ...
seg000:1532		    mov	    bx,	cs:DISPATCH[bx]
seg000:1537		    xchg    bx,	ds:SaveBX
seg000:153B		    mov	    ds,	ds:SaveDS
seg000:153F		    call    ss:SaveBX
seg000:1544
seg000:1544 LeaveDOS:				    ; DATA XREF: seg000:LeaveAddro
seg000:1544		    cli
seg000:1545		    dec	    cs:INDOS
seg000:154A		    mov	    ss,	cs:User_SS
seg000:154F		    mov	    sp,	cs:User_SP
seg000:1554		    mov	    bp,	sp
seg000:1556		    mov	    [bp+0], al
seg000:1559		    mov	    ax,	cs:NSP
seg000:155D		    mov	    cs:User_SP,	ax
seg000:1561		    mov	    ax,	cs:NSS
seg000:1565		    mov	    cs:User_SS,	ax
seg000:1569		    call    restore_world
seg000:156C		    iret
seg000:156C ; END OF FUNCTION CHUNK FOR	STATCHK
seg000:156D
seg000:156D ; =============== S	U B R O	U T I N	E =======================================
seg000:156D
seg000:156D
seg000:156D restore_world   proc near		    ; CODE XREF: STATCHK-408Fp
seg000:156D					    ; LRUFCB:lruDeadp ...
seg000:156D		    pop	    cs:restore_tmp
seg000:1572		    pop	    ax
seg000:1573		    pop	    bx
seg000:1574		    pop	    cx
seg000:1575		    pop	    dx
seg000:1576		    pop	    si
seg000:1577		    pop	    di
seg000:1578		    pop	    bp
seg000:1579		    pop	    ds
seg000:157A		    pop	    es
seg000:157B		    jmp	    cs:restore_tmp
seg000:157B restore_world   endp
seg000:157B
seg000:1580
seg000:1580 ; =============== S	U B R O	U T I N	E =======================================
seg000:1580
seg000:1580
seg000:1580 save_world	    proc near		    ; CODE XREF: STATCHK-4178p
seg000:1580					    ; LRUFCBp ...
seg000:1580		    pop	    cs:restore_tmp
seg000:1585		    push    es
seg000:1586		    push    ds
seg000:1587		    push    bp
seg000:1588		    push    di
seg000:1589		    push    si
seg000:158A		    push    dx
seg000:158B		    push    cx
seg000:158C		    push    bx
seg000:158D		    push    ax
seg000:158E		    jmp	    cs:restore_tmp
seg000:158E save_world	    endp
seg000:158E
seg000:1593
seg000:1593 ; =============== S	U B R O	U T I N	E =======================================
seg000:1593
seg000:1593
seg000:1593 Get_User_Stack  proc near		    ; CODE XREF: _$IOCTL-1829p
seg000:1593					    ; _$IOCTL:From_GetSetp ...
seg000:1593		    lds	    si,	dword ptr cs:User_SP
seg000:1598		    retn
seg000:1598 Get_User_Stack  endp
seg000:1598
seg000:1599 ; ---------------------------------------------------------------------------
seg000:1599
seg000:1599 SNULDEV:				    ; DATA XREF: seg000:004Eo
seg000:1599		    or	    word ptr es:[bx+3],	100h
seg000:159F
seg000:159F INULDEV:				    ; DATA XREF: seg000:off_50o
seg000:159F		    retf
seg000:15A0
seg000:15A0 ; =============== S	U B R O	U T I N	E =======================================
seg000:15A0
seg000:15A0
seg000:15A0 AbsSetup	    proc near		    ; CODE XREF: seg000:15EDp
seg000:15A0					    ; seg000:1630p
seg000:15A0		    inc	    ss:INDOS
seg000:15A5		    sti
seg000:15A6		    cld
seg000:15A7		    push    ds
seg000:15A8		    push    ss
seg000:15A9		    pop	    ds
seg000:15AA		    call    GETBP
seg000:15AD		    mov	    word ptr es:[bp+30], -1
seg000:15B3		    pop	    ds
seg000:15B4		    jnb	    short AbsSetup2
seg000:15B6
seg000:15B6 AbsSetup_retn:			    ; CODE XREF: AbsSetup+32j
seg000:15B6		    retn
seg000:15B7 ; ---------------------------------------------------------------------------
seg000:15B7
seg000:15B7 AbsSetup2:				    ; CODE XREF: AbsSetup+14j
seg000:15B7		    push    ds
seg000:15B8		    push    si
seg000:15B9		    push    ax
seg000:15BA		    push    ss
seg000:15BB		    pop	    ds
seg000:15BC		    mov	    si,	offset OPENBUF
seg000:15BF		    mov	    [si], al
seg000:15C1		    add	    byte ptr [si], 'A'
seg000:15C4		    mov	    word ptr [si+1], ':'
seg000:15C9		    mov	    ax,	300h
seg000:15CC		    clc
seg000:15CD		    int	    2Ah		    ; Microsoft	Networks - CHECK DIRECT	I/O
seg000:15CD					    ; DS:SI -> ASCIZ disk device name (may be full path	or only	drive
seg000:15CD					    ; specifier--must include the colon)
seg000:15CD					    ; Return: CF clear if absolute disk	access allowed
seg000:15CF		    pop	    ax
seg000:15D0		    pop	    si
seg000:15D1		    pop	    ds
seg000:15D2		    jnb	    short AbsSetup_retn
seg000:15D4		    mov	    ss:EXTERR, 32h
seg000:15DB
seg000:15DB GETBP_RETN:				    ; CODE XREF: seg000:1643j
seg000:15DB		    retn
seg000:15DB AbsSetup	    endp
seg000:15DB
seg000:15DC ; ---------------------------------------------------------------------------
seg000:15DC
seg000:15DC ABSDRD:				    ; DATA XREF: DOSINIT+1C8o
seg000:15DC		    cli
seg000:15DD		    mov	    cs:User_SS,	ss
seg000:15E2		    mov	    cs:User_SP,	sp
seg000:15E7		    push    cs
seg000:15E8		    pop	    ss
seg000:15E9		    mov	    sp,	offset DSKSTACK
seg000:15EC		    push    es
seg000:15ED		    call    AbsSetup
seg000:15F0		    jb	    short ILEAVE
seg000:15F2		    call    DSKREAD
seg000:15F5
seg000:15F5 TLEAVE:				    ; CODE XREF: seg000:1638j
seg000:15F5		    jz	    short ILEAVE
seg000:15F7		    push    es
seg000:15F8		    push    cs
seg000:15F9		    pop	    es
seg000:15FA		    xor	    ah,	ah
seg000:15FC		    mov	    cx,	6
seg000:15FF		    mov	    di,	offset ERRIN
seg000:1602		    repne scasb
seg000:1604		    jnz	    short LEAVECODE
seg000:1606		    mov	    ah,	es:[di+5]
seg000:160A
seg000:160A LEAVECODE:				    ; CODE XREF: seg000:1604j
seg000:160A		    pop	    es
seg000:160B		    stc
seg000:160C
seg000:160C ILEAVE:				    ; CODE XREF: seg000:15F0j
seg000:160C					    ; seg000:TLEAVEj ...
seg000:160C		    pop	    es
seg000:160D		    cli
seg000:160E		    dec	    ss:INDOS
seg000:1613		    mov	    ss,	ss:User_SS
seg000:1618		    mov	    sp,	cs:User_SP
seg000:161D		    sti
seg000:161E		    retf
seg000:161F ; ---------------------------------------------------------------------------
seg000:161F
seg000:161F ABSDWRT:				    ; DATA XREF: DOSINIT+1CEo
seg000:161F		    cli
seg000:1620		    mov	    cs:User_SS,	ss
seg000:1625		    mov	    cs:User_SP,	sp
seg000:162A		    push    cs
seg000:162B		    pop	    ss
seg000:162C		    mov	    sp,	offset DSKSTACK
seg000:162F		    push    es
seg000:1630		    call    AbsSetup
seg000:1633		    jb	    short ILEAVE
seg000:1635		    call    DSKWRITE
seg000:1638		    jmp	    short TLEAVE
seg000:163A ; ---------------------------------------------------------------------------
seg000:163A
seg000:163A GETBP:				    ; CODE XREF: AbsSetup+Ap
seg000:163A		    push    ax
seg000:163B		    add	    al,	1
seg000:163D		    jb	    short SKIPGET
seg000:163F		    call    GetThisDrv
seg000:1642
seg000:1642 SKIPGET:				    ; CODE XREF: seg000:163Dj
seg000:1642		    pop	    ax
seg000:1643		    jb	    short GETBP_RETN
seg000:1645		    les	    bp,	ds:THISCDS
seg000:1649		    test    word ptr es:[bp+43h], 8000h
seg000:164F		    jz	    short GETBP_CDS
seg000:1651		    mov	    ds:EXTERR, 32h
seg000:1657		    stc
seg000:1658		    retn
seg000:1659 ; ---------------------------------------------------------------------------
seg000:1659
seg000:1659 GETBP_CDS:				    ; CODE XREF: seg000:164Fj
seg000:1659		    les	    bp,	es:[bp+45h]
seg000:165D
seg000:165D GOTDPB:				    ; CODE XREF: DOS_SEARCH_NEXT+32p
seg000:165D					    ; FATREAD_SFT+Bp ...
seg000:165D		    mov	    word ptr ds:THISDPB, bp
seg000:1661		    mov	    word ptr ds:THISDPB+2, es
seg000:1665		    retn
seg000:1666 ; ---------------------------------------------------------------------------
seg000:1666 ; START OF FUNCTION	CHUNK FOR _$IOCTL
seg000:1666
seg000:1666 SYS_RET_OK:				    ; CODE XREF: seg000:international_okjj
seg000:1666					    ; seg000:1BCCj ...
seg000:1666		    call    FETCHI_CHECK
seg000:1669		    call    Get_User_Stack
seg000:166C		    and	    word ptr [si+16h], 0FFFEh
seg000:1671		    jmp	    short DO_RET
seg000:1673 ; ---------------------------------------------------------------------------
seg000:1673
seg000:1673 SYS_Ret_Err:			    ; CODE XREF: seg000:errtn1j
seg000:1673					    ; seg000:fff_errjj	...
seg000:1673		    xor	    ah,	ah
seg000:1675		    call    ETAB_LK
seg000:1678		    call    ErrorMap
seg000:167B
seg000:167B From_GetSet:			    ; CODE XREF: seg000:1AF5j
seg000:167B		    call    Get_User_Stack
seg000:167E		    or	    word ptr [si+16h], 1
seg000:1683		    stc
seg000:1684
seg000:1684 DO_RET:				    ; CODE XREF: _$IOCTL-1821j
seg000:1684		    mov	    [si], ax
seg000:1686		    retn
seg000:1686 ; END OF FUNCTION CHUNK FOR	_$IOCTL
seg000:1687 ; ---------------------------------------------------------------------------
seg000:1687
seg000:1687 NO_OP:				    ; CODE XREF: seg000:GetFCBByej
seg000:1687					    ; seg000:24CDj ...
seg000:1687		    xor	    al,	al
seg000:1689		    retn
seg000:168A
seg000:168A ; =============== S	U B R O	U T I N	E =======================================
seg000:168A
seg000:168A
seg000:168A FCB_Ret_Err	    proc near		    ; CODE XREF: seg000:1B21p
seg000:168A					    ; seg000:BADSLDRIVEj ...
seg000:168A		    xor	    ah,	ah
seg000:168C		    mov	    ss:EXTERR, ax
seg000:1690		    call    ErrorMap
seg000:1693		    mov	    al,	-1
seg000:1695		    retn
seg000:1695 FCB_Ret_Err	    endp
seg000:1695
seg000:1696
seg000:1696 ; =============== S	U B R O	U T I N	E =======================================
seg000:1696
seg000:1696
seg000:1696 ErrorMap	    proc near		    ; CODE XREF: _$IOCTL-181Ap
seg000:1696					    ; FCB_Ret_Err+6p
seg000:1696		    push    si
seg000:1697		    mov	    si,	offset ERR_TABLE_21
seg000:169A		    cmp	    ss:FAILERR,	0
seg000:16A0		    jz	    short EXTENDED_NORMAL
seg000:16A2		    mov	    ss:EXTERR, 53h
seg000:16A9		    mov	    si,	offset ERR_TABLE_21
seg000:16AC
seg000:16AC EXTENDED_NORMAL:			    ; CODE XREF: ErrorMap+Aj
seg000:16AC		    call    CAL_LK
seg000:16AF		    pop	    si
seg000:16B0		    retn
seg000:16B0 ErrorMap	    endp
seg000:16B0
seg000:16B1
seg000:16B1 ; =============== S	U B R O	U T I N	E =======================================
seg000:16B1
seg000:16B1
seg000:16B1 CAL_LK	    proc near		    ; CODE XREF: ErrorMap:EXTENDED_NORMALp
seg000:16B1					    ; SET_I24_EXTENDED_ERROR+1Dp
seg000:16B1					    ; DATA XREF: ...
seg000:16B1		    push    ds
seg000:16B2		    push    ax
seg000:16B3		    push    bx
seg000:16B4		    push    ss
seg000:16B5		    pop	    ds
seg000:16B6		    mov	    bx,	ds:EXTERR
seg000:16BA
seg000:16BA TABLK1:				    ; CODE XREF: CAL_LK+15j
seg000:16BA		    lodsb
seg000:16BB		    cmp	    al,	0FFh
seg000:16BD		    jz	    short GOT_VALS
seg000:16BF		    cmp	    al,	bl
seg000:16C1		    jz	    short GOT_VALS
seg000:16C3		    add	    si,	3
seg000:16C6		    jmp	    short TABLK1
seg000:16C8 ; ---------------------------------------------------------------------------
seg000:16C8
seg000:16C8 GOT_VALS:				    ; CODE XREF: CAL_LK+Cj
seg000:16C8					    ; CAL_LK+10j
seg000:16C8		    lodsw
seg000:16C9		    cmp	    ah,	0FFh
seg000:16CC		    jz	    short NO_SET_ACT
seg000:16CE		    mov	    ds:EXTERR_ACTION, ah
seg000:16D2
seg000:16D2 NO_SET_ACT:				    ; CODE XREF: CAL_LK+1Bj
seg000:16D2		    cmp	    al,	0FFh
seg000:16D4		    jz	    short NO_SET_CLS
seg000:16D6		    mov	    ds:EXTERR_CLASS, al
seg000:16D9
seg000:16D9 NO_SET_CLS:				    ; CODE XREF: CAL_LK+23j
seg000:16D9		    lodsb
seg000:16DA		    cmp	    al,	0FFh
seg000:16DC		    jz	    short NO_SET_LOC
seg000:16DE		    mov	    ds:EXTERR_LOCUS, al
seg000:16E1
seg000:16E1 NO_SET_LOC:				    ; CODE XREF: CAL_LK+2Bj
seg000:16E1		    pop	    bx
seg000:16E2		    pop	    ax
seg000:16E3		    pop	    ds
seg000:16E4		    retn
seg000:16E4 CAL_LK	    endp
seg000:16E4
seg000:16E5
seg000:16E5 ; =============== S	U B R O	U T I N	E =======================================
seg000:16E5
seg000:16E5
seg000:16E5 ETAB_LK	    proc near		    ; CODE XREF: _$IOCTL-181Dp
seg000:16E5		    push    ds
seg000:16E6		    push    si
seg000:16E7		    push    cx
seg000:16E8		    push    bx
seg000:16E9		    push    ss
seg000:16EA		    pop	    ds
seg000:16EB		    mov	    ds:EXTERR, ax
seg000:16EE		    mov	    si,	offset I21_MAP_E_TAB
seg000:16F1		    mov	    bh,	al
seg000:16F3		    mov	    bl,	ds:USER_IN_AX_1
seg000:16F7
seg000:16F7 TABLK2:				    ; CODE XREF: ETAB_LK+21j
seg000:16F7		    lodsw
seg000:16F8		    cmp	    al,	0FFh
seg000:16FA		    jz	    short NOT_IN_TABLE
seg000:16FC		    cmp	    al,	bl
seg000:16FE		    jz	    short GOT_CALL
seg000:1700		    xchg    ah,	al
seg000:1702		    xor	    ah,	ah
seg000:1704		    add	    si,	ax
seg000:1706		    jmp	    short TABLK2
seg000:1708 ; ---------------------------------------------------------------------------
seg000:1708
seg000:1708 NOT_IN_TABLE:			    ; CODE XREF: ETAB_LK+15j
seg000:1708		    mov	    al,	bh
seg000:170A		    jmp	    short NO_MAP
seg000:170C ; ---------------------------------------------------------------------------
seg000:170C
seg000:170C GOT_CALL:				    ; CODE XREF: ETAB_LK+19j
seg000:170C		    mov	    cl,	ah
seg000:170E		    xor	    ch,	ch
seg000:1710
seg000:1710 CHECK_CODE:				    ; CODE XREF: ETAB_LK+30j
seg000:1710		    lodsb
seg000:1711		    cmp	    al,	bh
seg000:1713		    jz	    short NO_MAP
seg000:1715		    loop    CHECK_CODE
seg000:1717
seg000:1717 NO_MAP:				    ; CODE XREF: ETAB_LK+25j
seg000:1717					    ; ETAB_LK+2Ej
seg000:1717		    xor	    ah,	ah
seg000:1719		    pop	    bx
seg000:171A		    pop	    cx
seg000:171B		    pop	    si
seg000:171C		    pop	    ds
seg000:171D		    retn
seg000:171D ETAB_LK	    endp
seg000:171D
seg000:171E
seg000:171E ; =============== S	U B R O	U T I N	E =======================================
seg000:171E
seg000:171E
seg000:171E SetBad	    proc near		    ; CODE XREF: seg000:BadCallp
seg000:171E					    ; seg000:BadFuncp
seg000:171E		    mov	    ax,	1
seg000:1721		    mov	    cs:EXTERR_LOCUS, 1
seg000:1727		    stc
seg000:1728		    retn
seg000:1728 SetBad	    endp
seg000:1728
seg000:1729 ; ---------------------------------------------------------------------------
seg000:1729
seg000:1729 BadCall:				    ; DATA XREF: seg000:JShareo
seg000:1729					    ; seg000:MFTclUo ...
seg000:1729		    call    SetBad
seg000:172C		    retf
seg000:172D ; ---------------------------------------------------------------------------
seg000:172D
seg000:172D OKCall:				    ; DATA XREF: seg000:MFT_entero
seg000:172D					    ; seg000:MFTCloseo	...
seg000:172D		    clc
seg000:172E		    retf
seg000:172F ; ---------------------------------------------------------------------------
seg000:172F
seg000:172F INT2F:				    ; DATA XREF: DOSINIT+19Eo
seg000:172F		    sti
seg000:1730		    cmp	    ah,	11h
seg000:1733		    jnz	    short INT2FSHR
seg000:1735
seg000:1735 TestInstall:			    ; CODE XREF: seg000:1742j
seg000:1735					    ; seg000:1747j
seg000:1735		    or	    al,	al
seg000:1737		    jz	    short Leave2F
seg000:1739
seg000:1739 BadFunc:				    ; CODE XREF: seg000:1764j
seg000:1739		    call    SetBad
seg000:173C
seg000:173C Leave2F:				    ; CODE XREF: seg000:1737j
seg000:173C					    ; DATA XREF: seg000:FOOo
seg000:173C		    retf    2
seg000:173F ; ---------------------------------------------------------------------------
seg000:173F
seg000:173F INT2FSHR:				    ; CODE XREF: seg000:1733j
seg000:173F		    cmp	    ah,	10h
seg000:1742		    jz	    short TestInstall
seg000:1744		    cmp	    ah,	14h
seg000:1747		    jz	    short TestInstall
seg000:1749		    cmp	    ah,	12h
seg000:174C		    jz	    short DispatchDOS
seg000:174E		    iret
seg000:174F ; ---------------------------------------------------------------------------
seg000:174F
seg000:174F DispatchDOS:			    ; CODE XREF: seg000:174Cj
seg000:174F		    push    cs:FOO
seg000:1754		    push    cs:DTab
seg000:1759		    push    ax
seg000:175A		    push    bp
seg000:175B		    mov	    bp,	sp
seg000:175D		    mov	    ax,	[bp+0Eh]
seg000:1760		    pop	    bp
seg000:1761		    call    TableDispatch
seg000:1764		    jmp	    short BadFunc
seg000:1766 ; ---------------------------------------------------------------------------
seg000:1766
seg000:1766 DOSGetGroup:			    ; DATA XREF: seg000:0EDDo
seg000:1766		    push    cs
seg000:1767		    pop	    ds
seg000:1768		    retn
seg000:1769 ; ---------------------------------------------------------------------------
seg000:1769
seg000:1769 DOSInstall:				    ; DATA XREF: seg000:0ED7o
seg000:1769		    mov	    al,	0FFh
seg000:176B		    retn
seg000:176C ; ---------------------------------------------------------------------------
seg000:176C
seg000:176C MAP_CASE:				    ; DATA XREF: seg000:0FAAo
seg000:176C					    ; seg000:102Ao
seg000:176C		    cmp	    al,	80h
seg000:176E		    jnb	    short Map1
seg000:1770		    retf
seg000:1771 ; ---------------------------------------------------------------------------
seg000:1771
seg000:1771 Map1:				    ; CODE XREF: seg000:176Ej
seg000:1771		    sub	    al,	80h
seg000:1773		    push    ds
seg000:1774		    push    bx
seg000:1775		    mov	    bx,	offset UCASE_TAB_2
seg000:1778		    push    cs
seg000:1779		    pop	    ds
seg000:177A		    xlat
seg000:177B		    pop	    bx
seg000:177C		    pop	    ds
seg000:177D		    retf
seg000:177E ; ---------------------------------------------------------------------------
seg000:177E
seg000:177E OEMFunctionKey:			    ; CODE XREF: seg000:ESCapej
seg000:177E		    call    _$STD_CON_INPUT_NO_ECHO
seg000:1781		    mov	    cl,	14
seg000:1783		    push    di
seg000:1784		    mov	    di,	offset ESCTAB
seg000:1787		    repne scasb
seg000:1789		    pop	    di
seg000:178A		    shl	    cx,	1
seg000:178C		    mov	    bp,	cx
seg000:178E		    jmp	    ss:ESCFUNC[bp]
seg000:1792 ; ---------------------------------------------------------------------------
seg000:1792
seg000:1792 _$GET_DATE:				    ; DATA XREF: seg000:0E54o
seg000:1792		    push    ss
seg000:1793		    pop	    ds
seg000:1794		    call    READTIME
seg000:1797		    mov	    ax,	ds:YEAR
seg000:179A		    mov	    bx,	word ptr ds:DAY
seg000:179E		    call    Get_User_Stack
seg000:17A1		    mov	    [si+6], bx
seg000:17A4		    add	    ax,	1980
seg000:17A7		    mov	    [si+4], ax
seg000:17AA		    mov	    al,	ss:WEEKDAY
seg000:17AE
seg000:17AE GetDT_retn:				    ; CODE XREF: seg000:17B5j
seg000:17AE					    ; seg000:17BEj ...
seg000:17AE		    retn
seg000:17AF ; ---------------------------------------------------------------------------
seg000:17AF
seg000:17AF _$SET_DATE:				    ; DATA XREF: seg000:0E56o
seg000:17AF		    mov	    al,	-1
seg000:17B1		    sub	    cx,	1980
seg000:17B5		    jb	    short GetDT_retn
seg000:17B7		    cmp	    cx,	119
seg000:17BA		    ja	    short RET24
seg000:17BC		    or	    dh,	dh
seg000:17BE		    jz	    short GetDT_retn
seg000:17C0		    or	    dl,	dl
seg000:17C2		    jz	    short GetDT_retn
seg000:17C4		    cmp	    dh,	12
seg000:17C7		    ja	    short RET24
seg000:17C9		    push    ss
seg000:17CA		    pop	    ds
seg000:17CB		    call    DODATE
seg000:17CE
seg000:17CE RET24:				    ; CODE XREF: seg000:17BAj
seg000:17CE					    ; seg000:17C7j
seg000:17CE		    retn
seg000:17CF ; ---------------------------------------------------------------------------
seg000:17CF
seg000:17CF _$GET_TIME:				    ; DATA XREF: seg000:0E58o
seg000:17CF		    push    ss
seg000:17D0		    pop	    ds
seg000:17D1		    call    READTIME
seg000:17D4		    call    Get_User_Stack
seg000:17D7		    mov	    [si+6], dx
seg000:17DA		    mov	    [si+4], cx
seg000:17DD		    xor	    al,	al
seg000:17DF
seg000:17DF RET26:				    ; CODE XREF: seg000:17E5j
seg000:17DF					    ; seg000:17EAj ...
seg000:17DF		    retn
seg000:17E0 ; ---------------------------------------------------------------------------
seg000:17E0
seg000:17E0 _$SET_TIME:				    ; DATA XREF: seg000:0E5Ao
seg000:17E0		    mov	    al,	-1
seg000:17E2		    cmp	    ch,	24
seg000:17E5		    jnb	    short RET26
seg000:17E7		    cmp	    cl,	60
seg000:17EA		    jnb	    short RET26
seg000:17EC		    cmp	    dh,	60
seg000:17EF		    jnb	    short RET26
seg000:17F1		    cmp	    dl,	100
seg000:17F4		    jnb	    short RET26
seg000:17F6		    push    cx
seg000:17F7		    push    dx
seg000:17F8		    push    ss
seg000:17F9		    pop	    ds
seg000:17FA		    mov	    bx,	offset TIMEBUF
seg000:17FD		    mov	    cx,	6
seg000:1800		    xor	    dx,	dx
seg000:1802		    mov	    ax,	dx
seg000:1804		    push    bx
seg000:1805		    call    SETREAD
seg000:1808		    push    ds
seg000:1809		    lds	    si,	ds:BCLOCK
seg000:180D		    call    DEVIOCALL2
seg000:1810		    pop	    ds
seg000:1811		    pop	    bx
seg000:1812		    call    SETWRITE
seg000:1815		    pop	    ds:TIMEBUF_4
seg000:1819		    pop	    ds:TIMEBUF_2
seg000:181D		    lds	    si,	ds:BCLOCK
seg000:1821		    call    DEVIOCALL2
seg000:1824		    xor	    al,	al
seg000:1826		    retn
seg000:1827
seg000:1827 ; =============== S	U B R O	U T I N	E =======================================
seg000:1827
seg000:1827
seg000:1827 DATE16	    proc near		    ; CODE XREF: seg000:2A69p
seg000:1827					    ; SetSFTTimes+Ep ...
seg000:1827		    push    ss
seg000:1828		    pop	    ds
seg000:1829		    push    cx
seg000:182A		    push    es
seg000:182B		    call    READTIME
seg000:182E		    pop	    es
seg000:182F		    shl	    cl,	1
seg000:1831		    shl	    cl,	1
seg000:1833		    shl	    cx,	1
seg000:1835		    shl	    cx,	1
seg000:1837		    shl	    cx,	1
seg000:1839		    shr	    dh,	1
seg000:183B		    or	    cl,	dh
seg000:183D		    mov	    dx,	cx
seg000:183F		    mov	    ax,	word ptr ds:MONTH
seg000:1842		    mov	    cl,	4
seg000:1844		    shl	    al,	cl
seg000:1846		    shl	    ax,	1
seg000:1848		    pop	    cx
seg000:1849		    or	    al,	ds:DAY
seg000:184D
seg000:184D RET21:				    ; CODE XREF: READTIME+2Fj
seg000:184D		    retn
seg000:184D DATE16	    endp
seg000:184D
seg000:184E
seg000:184E ; =============== S	U B R O	U T I N	E =======================================
seg000:184E
seg000:184E
seg000:184E READTIME	    proc near		    ; CODE XREF: seg000:1794p
seg000:184E					    ; seg000:17D1p ...
seg000:184E		    mov	    ds:DATE_FLAG, 0
seg000:1854		    push    si
seg000:1855		    push    bx
seg000:1856		    mov	    bx,	offset TIMEBUF
seg000:1859		    mov	    cx,	6
seg000:185C		    xor	    dx,	dx
seg000:185E		    mov	    ax,	dx
seg000:1860		    call    SETREAD
seg000:1863		    push    ds
seg000:1864		    lds	    si,	ds:BCLOCK
seg000:1868		    call    DEVIOCALL2
seg000:186B		    pop	    ds
seg000:186C		    pop	    bx
seg000:186D		    pop	    si
seg000:186E		    mov	    ax,	ds:TIMEBUF
seg000:1871		    mov	    cx,	ds:TIMEBUF_2
seg000:1875		    mov	    dx,	ds:TIMEBUF_4
seg000:1879		    cmp	    ax,	ds:DAYCNT
seg000:187D		    jz	    short RET21
seg000:187F		    cmp	    ax,	43830
seg000:1882		    jnb	    short RET22
seg000:1884		    mov	    ds:DAYCNT, ax
seg000:1887		    push    si
seg000:1888		    push    cx
seg000:1889		    push    dx
seg000:188A		    xor	    dx,	dx
seg000:188C		    mov	    cx,	1461
seg000:188F		    div	    cx
seg000:1891		    shl	    ax,	1
seg000:1893		    shl	    ax,	1
seg000:1895		    shl	    ax,	1
seg000:1897		    mov	    cx,	ax
seg000:1899		    mov	    si,	offset YRTAB
seg000:189C		    call    DSLIDE
seg000:189F		    shr	    cx,	1
seg000:18A1		    jnb	    short SK
seg000:18A3		    add	    dx,	200
seg000:18A7
seg000:18A7 SK:					    ; CODE XREF: READTIME+53j
seg000:18A7		    call    SETYEAR
seg000:18AA		    mov	    cl,	1
seg000:18AC		    mov	    si,	offset MONTAB
seg000:18AF		    call    DSLIDE
seg000:18B2		    mov	    ds:MONTH, cl
seg000:18B6		    inc	    dx
seg000:18B7		    mov	    ds:DAY, dl
seg000:18BB		    call    WKDAY
seg000:18BE		    pop	    dx
seg000:18BF		    pop	    cx
seg000:18C0		    pop	    si
seg000:18C1
seg000:18C1 RET22:				    ; CODE XREF: READTIME+34j
seg000:18C1					    ; DSLIDE+5j
seg000:18C1		    retn
seg000:18C1 READTIME	    endp
seg000:18C1
seg000:18C2
seg000:18C2 ; =============== S	U B R O	U T I N	E =======================================
seg000:18C2
seg000:18C2
seg000:18C2 DSLIDE	    proc near		    ; CODE XREF: READTIME+4Ep
seg000:18C2					    ; READTIME+61p
seg000:18C2					    ; DATA XREF: ...
seg000:18C2		    mov	    ah,	0
seg000:18C4
seg000:18C4 DSLIDE1:				    ; CODE XREF: DSLIDE+Aj
seg000:18C4		    lodsb
seg000:18C5		    cmp	    dx,	ax
seg000:18C7		    jb	    short RET22
seg000:18C9		    sub	    dx,	ax
seg000:18CB		    inc	    cx
seg000:18CC		    jmp	    short DSLIDE1
seg000:18CC DSLIDE	    endp
seg000:18CC
seg000:18CE ; ---------------------------------------------------------------------------
seg000:18CE
seg000:18CE SETYEAR:				    ; CODE XREF: READTIME:SKp
seg000:18CE					    ; seg000:18EEp
seg000:18CE					    ; DATA XREF: ...
seg000:18CE		    mov	    byte ptr ds:YEAR, cl
seg000:18D2
seg000:18D2 CHKYR:				    ; CODE XREF: seg000:DODATEp
seg000:18D2		    test    cl,	3
seg000:18D5		    mov	    al,	28
seg000:18D7		    jnz	    short SAVFEB
seg000:18D9		    inc	    al
seg000:18DB
seg000:18DB SAVFEB:				    ; CODE XREF: seg000:18D7j
seg000:18DB		    mov	    ds:february, al
seg000:18DE
seg000:18DE RET23:				    ; CODE XREF: seg000:18ECj
seg000:18DE		    retn
seg000:18DF ; ---------------------------------------------------------------------------
seg000:18DF
seg000:18DF DODATE:				    ; CODE XREF: seg000:17CBp
seg000:18DF		    call    CHKYR
seg000:18E2		    mov	    al,	dh
seg000:18E4		    mov	    bx,	offset MONTAB_x1
seg000:18E7		    xlat
seg000:18E8		    cmp	    al,	dl
seg000:18EA		    mov	    al,	-1
seg000:18EC		    jb	    short RET23
seg000:18EE		    call    SETYEAR
seg000:18F1		    mov	    word ptr ds:DAY, dx
seg000:18F5		    shr	    cx,	1
seg000:18F7		    shr	    cx,	1
seg000:18F9		    mov	    ax,	1461
seg000:18FC		    mov	    bx,	dx
seg000:18FE		    mul	    cx
seg000:1900		    mov	    cl,	byte ptr ds:YEAR
seg000:1904		    and	    cl,	3
seg000:1907		    mov	    si,	offset YRTAB
seg000:190A		    mov	    dx,	ax
seg000:190C		    shl	    cx,	1
seg000:190E		    call    DSUM
seg000:1911		    mov	    cl,	bh
seg000:1913		    mov	    si,	offset MONTAB
seg000:1916		    dec	    cx
seg000:1917		    call    DSUM
seg000:191A		    mov	    cl,	bl
seg000:191C		    dec	    cx
seg000:191D		    add	    dx,	cx
seg000:191F		    xchg    ax,	dx
seg000:1920		    mov	    ds:DAYCNT, ax
seg000:1923		    push    si
seg000:1924		    push    bx
seg000:1925		    push    ax
seg000:1926		    mov	    bx,	offset TIMEBUF
seg000:1929		    mov	    cx,	6
seg000:192C		    xor	    dx,	dx
seg000:192E		    mov	    ax,	dx
seg000:1930		    push    bx
seg000:1931		    call    SETREAD
seg000:1934		    push    ds
seg000:1935		    lds	    si,	ds:BCLOCK
seg000:1939		    call    DEVIOCALL2
seg000:193C		    pop	    ds
seg000:193D		    pop	    bx
seg000:193E		    call    SETWRITE
seg000:1941		    pop	    ds:TIMEBUF
seg000:1945		    push    ds
seg000:1946		    lds	    si,	ds:BCLOCK
seg000:194A		    call    DEVIOCALL2
seg000:194D		    pop	    ds
seg000:194E		    pop	    bx
seg000:194F		    pop	    si
seg000:1950
seg000:1950 WKDAY:				    ; CODE XREF: READTIME+6Dp
seg000:1950		    mov	    ax,	ds:DAYCNT
seg000:1953		    xor	    dx,	dx
seg000:1955		    mov	    cx,	7
seg000:1958		    inc	    ax
seg000:1959		    inc	    ax
seg000:195A		    div	    cx
seg000:195C		    mov	    ds:WEEKDAY,	dl
seg000:1960		    xor	    al,	al
seg000:1962
seg000:1962 RET25:				    ; CODE XREF: DSUM+2j
seg000:1962		    retn
seg000:1963
seg000:1963 ; =============== S	U B R O	U T I N	E =======================================
seg000:1963
seg000:1963
seg000:1963 DSUM	    proc near		    ; CODE XREF: seg000:190Ep
seg000:1963					    ; seg000:1917p
seg000:1963					    ; DATA XREF: ...
seg000:1963		    mov	    ah,	0
seg000:1965		    jcxz    short RET25
seg000:1967
seg000:1967 DSUM1:				    ; CODE XREF: DSUM+7j
seg000:1967		    lodsb
seg000:1968		    add	    dx,	ax
seg000:196A		    loop    DSUM1
seg000:196C		    retn
seg000:196C DSUM	    endp
seg000:196C
seg000:196D ; ---------------------------------------------------------------------------
seg000:196D
seg000:196D _$GET_VERSION:			    ; DATA XREF: seg000:0E60o
seg000:196D		    push    ss
seg000:196E		    pop	    ds
seg000:196F		    mov	    bx,	word ptr ds:USERNUM_2
seg000:1973		    mov	    cx,	ds:USERNUM
seg000:1977		    mov	    ax,	word ptr ds:MSVERS
seg000:197A		    call    Get_User_Stack
seg000:197D		    mov	    [si+2], bx
seg000:1980		    mov	    [si+4], cx
seg000:1983		    mov	    [si], ax
seg000:1985		    retn
seg000:1986 ; ---------------------------------------------------------------------------
seg000:1986
seg000:1986 _$GET_VERIFY_ON_WRITE:		    ; DATA XREF: seg000:0EA8o
seg000:1986		    mov	    al,	ss:VERFLG
seg000:198A		    retn
seg000:198B ; ---------------------------------------------------------------------------
seg000:198B
seg000:198B _$SET_VERIFY_ON_WRITE:		    ; DATA XREF: seg000:0E5Co
seg000:198B		    and	    al,	1
seg000:198D		    mov	    ss:VERFLG, al
seg000:1991
seg000:1991 RET27:				    ; CODE XREF: international_get+6j
seg000:1991					    ; international_get+29j
seg000:1991		    retn
seg000:1992 ; ---------------------------------------------------------------------------
seg000:1992
seg000:1992 _$INTERNATIONAL:			    ; DATA XREF: seg000:0E70o
seg000:1992		    cmp	    al,	0FFh
seg000:1994		    jz	    short BX_HAS_CODE
seg000:1996		    mov	    bl,	al
seg000:1998		    xor	    bh,	bh
seg000:199A
seg000:199A BX_HAS_CODE:			    ; CODE XREF: seg000:1994j
seg000:199A		    push    ds
seg000:199B		    pop	    es
seg000:199C		    push    dx
seg000:199D		    pop	    di
seg000:199E		    push    ss
seg000:199F		    pop	    ds
seg000:19A0		    cmp	    di,	-1
seg000:19A3		    jz	    short international_set
seg000:19A5		    or	    bx,	bx
seg000:19A7		    jnz	    short international_find
seg000:19A9		    mov	    si,	offset COUNTRY_CDPG
seg000:19AC		    jmp	    short international_copy
seg000:19AE ; ---------------------------------------------------------------------------
seg000:19AE
seg000:19AE international_find:			    ; CODE XREF: seg000:19A7j
seg000:19AE		    mov	    bp,	0
seg000:19B1		    call    international_get
seg000:19B4		    jb	    short errtn
seg000:19B6		    cmp	    bx,	0
seg000:19B9		    jnz	    short international_copy
seg000:19BB		    mov	    bx,	dx
seg000:19BD		    jmp	    short international_ok3
seg000:19BF
seg000:19BF ; =============== S	U B R O	U T I N	E =======================================
seg000:19BF
seg000:19BF
seg000:19BF international_get proc near		    ; CODE XREF: seg000:19B1p
seg000:19BF					    ; seg000:1A09p
seg000:19BF		    mov	    si,	offset COUNTRY_CDPG
seg000:19C2		    cmp	    bx,	[si+63h]
seg000:19C5		    jz	    short RET27
seg000:19C7		    mov	    dx,	bx
seg000:19C9		    xor	    bx,	bx
seg000:19CB		    mov	    ax,	1400h
seg000:19CE		    int	    2Fh		    ; -	Multiplex - NLSFUNC.COM	- INSTALLATION CHECK
seg000:19CE					    ; Return: AL = 00h not installed, OK to install
seg000:19CE					    ; 01h not installed, not OK
seg000:19CE					    ; FFh installed
seg000:19D0		    cmp	    al,	0FFh
seg000:19D2		    jnz	    short interr
seg000:19D4		    cmp	    bp,	0
seg000:19D7		    jnz	    short stcdpg
seg000:19D9		    mov	    ax,	1404h
seg000:19DC		    int	    2Fh		    ; -	Multiplex - NLSFUNC.COM	- GET COUNTRY INFO
seg000:19DC					    ; BX = code	page, DX = country code, DS:SI -> internal code	page structure
seg000:19DC					    ; ES:DI -> user buffer
seg000:19DC					    ; Return: AL = status
seg000:19DE		    jmp	    short chkok
seg000:19E0 ; ---------------------------------------------------------------------------
seg000:19E0		    nop
seg000:19E1
seg000:19E1 stcdpg:				    ; CODE XREF: international_get+18j
seg000:19E1		    mov	    ax,	1403h
seg000:19E4		    int	    2Fh		    ; -	Multiplex - NLSFUNC.COM	- SET COUNTRY INFO
seg000:19E4					    ; DS:SI -> internal	code page structure
seg000:19E4					    ; BX = code	page, DX = country code
seg000:19E4					    ; Return: AL = status
seg000:19E6
seg000:19E6 chkok:				    ; CODE XREF: international_get+1Fj
seg000:19E6		    cmp	    al,	0
seg000:19E8		    jz	    short RET27
seg000:19EA
seg000:19EA setcarry:				    ; CODE XREF: international_get+2Fj
seg000:19EA		    stc
seg000:19EB		    retn
seg000:19EC ; ---------------------------------------------------------------------------
seg000:19EC
seg000:19EC interr:				    ; CODE XREF: international_get+13j
seg000:19EC		    mov	    al,	0FFh
seg000:19EE		    jmp	    short setcarry
seg000:19EE international_get endp
seg000:19EE
seg000:19F0 ; ---------------------------------------------------------------------------
seg000:19F0
seg000:19F0 international_copy:			    ; CODE XREF: seg000:19ACj
seg000:19F0					    ; seg000:19B9j
seg000:19F0		    mov	    bx,	[si+63h]
seg000:19F3		    mov	    si,	offset CDPG_ccDFormat
seg000:19F6		    mov	    cx,	24
seg000:19F9		    rep	movsb
seg000:19FB
seg000:19FB international_ok3:			    ; CODE XREF: seg000:19BDj
seg000:19FB		    call    Get_User_Stack
seg000:19FE		    mov	    [si+2], bx
seg000:1A01
seg000:1A01 international_ok:			    ; CODE XREF: seg000:1A0Cj
seg000:1A01		    mov	    ax,	bx
seg000:1A03
seg000:1A03 international_okj:			    ; CODE XREF: seg000:GETDONE_Jj
seg000:1A03		    jmp	    SYS_RET_OK
seg000:1A06 ; ---------------------------------------------------------------------------
seg000:1A06
seg000:1A06 international_set:			    ; CODE XREF: seg000:19A3j
seg000:1A06		    mov	    bp,	1
seg000:1A09		    call    international_get
seg000:1A0C		    jnb	    short international_ok
seg000:1A0E
seg000:1A0E errtn:				    ; CODE XREF: seg000:19B4j
seg000:1A0E		    cmp	    al,	0FFh
seg000:1A10		    jz	    short errtn2
seg000:1A12
seg000:1A12 errtn1:				    ; CODE XREF: seg000:errtn3j
seg000:1A12		    jmp	    SYS_Ret_Err
seg000:1A15 ; ---------------------------------------------------------------------------
seg000:1A15
seg000:1A15 errtn2:				    ; CODE XREF: seg000:1A10j
seg000:1A15		    mov	    al,	1
seg000:1A17
seg000:1A17 errtn3:				    ; CODE XREF: seg000:capinvaljj
seg000:1A17		    jmp	    short errtn1
seg000:1A19 ; ---------------------------------------------------------------------------
seg000:1A19
seg000:1A19 _$GetExtCntry:			    ; DATA XREF: seg000:0ECAo
seg000:1A19		    cmp	    cx,	5
seg000:1A1C		    jb	    short sizeerror
seg000:1A1E		    push    ss
seg000:1A1F		    pop	    ds
seg000:1A20		    mov	    si,	offset COUNTRY_CDPG
seg000:1A23		    cmp	    dx,	-1
seg000:1A26		    jnz	    short GETCDPG
seg000:1A28		    mov	    dx,	[si+63h]
seg000:1A2B
seg000:1A2B GETCDPG:				    ; CODE XREF: seg000:1A26j
seg000:1A2B		    cmp	    bx,	-1
seg000:1A2E		    jnz	    short CHKAGAIN
seg000:1A30		    mov	    bx,	[si+65h]
seg000:1A33
seg000:1A33 CHKAGAIN:				    ; CODE XREF: seg000:1A2Ej
seg000:1A33		    cmp	    dx,	[si+63h]
seg000:1A36		    jnz	    short CHKNLS
seg000:1A38		    cmp	    bx,	[si+65h]
seg000:1A3B		    jnz	    short CHKNLS
seg000:1A3D		    mov	    bx,	[si+48h]
seg000:1A40		    push    cx
seg000:1A41		    mov	    cx,	[si+4Ah]
seg000:1A44		    mov	    si,	offset CDPG_ccSetUcase
seg000:1A47
seg000:1A47 NXTENTRY:				    ; CODE XREF: seg000:1A4Ej
seg000:1A47		    cmp	    al,	[si]
seg000:1A49		    jz	    short FOUNDIT
seg000:1A4B		    add	    si,	5
seg000:1A4E		    loop    NXTENTRY
seg000:1A50		    pop	    cx
seg000:1A51
seg000:1A51 capinval:
seg000:1A51		    mov	    al,	1
seg000:1A53
seg000:1A53 capinvalj:				    ; CODE XREF: seg000:sizerrorjj
seg000:1A53		    jmp	    short errtn3
seg000:1A55 ; ---------------------------------------------------------------------------
seg000:1A55
seg000:1A55 FOUNDIT:				    ; CODE XREF: seg000:1A49j
seg000:1A55		    movsb
seg000:1A56		    pop	    cx
seg000:1A57		    cmp	    al,	1
seg000:1A59		    jz	    short setsize
seg000:1A5B		    mov	    cx,	4
seg000:1A5E		    mov	    ax,	5
seg000:1A61
seg000:1A61 OK_RETN:				    ; CODE XREF: seg000:1A86j
seg000:1A61		    rep	movsb
seg000:1A63		    mov	    cx,	ax
seg000:1A65		    mov	    ax,	bx
seg000:1A67
seg000:1A67 GETDONE:				    ; CODE XREF: seg000:1AA5j
seg000:1A67		    call    Get_User_Stack
seg000:1A6A		    mov	    [si+4], cx
seg000:1A6D
seg000:1A6D GETDONE_J:				    ; CODE XREF: seg000:OK_RETURNj
seg000:1A6D		    jmp	    short international_okj
seg000:1A6F ; ---------------------------------------------------------------------------
seg000:1A6F
seg000:1A6F setsize:				    ; CODE XREF: seg000:1A59j
seg000:1A6F		    sub	    cx,	3
seg000:1A72		    cmp	    [si], cx
seg000:1A74		    jnb	    short setsize2
seg000:1A76		    mov	    cx,	[si]
seg000:1A78
seg000:1A78 setsize2:				    ; CODE XREF: seg000:1A74j
seg000:1A78		    mov	    es:[di], cx
seg000:1A7B		    add	    di,	2
seg000:1A7E		    add	    si,	2
seg000:1A81		    mov	    ax,	cx
seg000:1A83		    add	    ax,	3
seg000:1A86		    jmp	    short OK_RETN
seg000:1A88 ; ---------------------------------------------------------------------------
seg000:1A88
seg000:1A88 CHKNLS:				    ; CODE XREF: seg000:1A36j
seg000:1A88					    ; seg000:1A3Bj
seg000:1A88		    xor	    ah,	ah
seg000:1A8A		    push    ax
seg000:1A8B		    pop	    bp
seg000:1A8C		    mov	    ax,	1400h
seg000:1A8F		    int	    2Fh		    ; -	Multiplex - NLSFUNC.COM	- INSTALLATION CHECK
seg000:1A8F					    ; Return: AL = 00h not installed, OK to install
seg000:1A8F					    ; 01h not installed, not OK
seg000:1A8F					    ; FFh installed
seg000:1A91		    cmp	    al,	0FFh
seg000:1A93		    jz	    short NLSNXT
seg000:1A95
seg000:1A95 sizeerror:				    ; CODE XREF: seg000:1A1Cj
seg000:1A95		    mov	    al,	1
seg000:1A97
seg000:1A97 sizerrorj:				    ; CODE XREF: seg000:NLSERRORj
seg000:1A97		    jmp	    short capinvalj
seg000:1A99 ; ---------------------------------------------------------------------------
seg000:1A99
seg000:1A99 NLSNXT:				    ; CODE XREF: seg000:1A93j
seg000:1A99		    mov	    ax,	1402h
seg000:1A9C		    int	    2Fh		    ; -	Multiplex - NLSFUNC.COM	- GET COUNTRY INFO
seg000:1A9C					    ; BP = subfunction,	BX = code page
seg000:1A9C					    ; DX = country code, DS:SI -> internal code	page structure
seg000:1A9C					    ; ES:DI -> user buffer, CX = size of user buffer
seg000:1A9C					    ; Return: AL = status
seg000:1A9C					    ; 00h successful
seg000:1A9C					    ; else DOS error code
seg000:1A9E		    cmp	    al,	0
seg000:1AA0		    jnz	    short NLSERROR
seg000:1AA2		    mov	    ax,	[si+48h]
seg000:1AA5		    jmp	    short GETDONE
seg000:1AA7 ; ---------------------------------------------------------------------------
seg000:1AA7
seg000:1AA7 NLSERROR:				    ; CODE XREF: seg000:1AA0j
seg000:1AA7					    ; seg000:seterrj
seg000:1AA7		    jmp	    short sizerrorj
seg000:1AA9 ; ---------------------------------------------------------------------------
seg000:1AA9
seg000:1AA9 _$GetSetCdPg:			    ; DATA XREF: seg000:0ECCo
seg000:1AA9		    push    ss
seg000:1AAA		    pop	    ds
seg000:1AAB		    mov	    si,	offset COUNTRY_CDPG
seg000:1AAE		    cmp	    al,	1
seg000:1AB0		    jnz	    short setglpg
seg000:1AB2		    mov	    bx,	[si+65h]
seg000:1AB5		    mov	    dx,	[si+48h]
seg000:1AB8		    call    Get_User_Stack
seg000:1ABB		    mov	    [si+2], bx
seg000:1ABE		    mov	    [si+6], dx
seg000:1AC1
seg000:1AC1 OK_RETURN:				    ; CODE XREF: seg000:1ADAj
seg000:1AC1		    jmp	    short GETDONE_J
seg000:1AC3 ; ---------------------------------------------------------------------------
seg000:1AC3
seg000:1AC3 setglpg:				    ; CODE XREF: seg000:1AB0j
seg000:1AC3		    cmp	    al,	2
seg000:1AC5		    jnz	    short nomem
seg000:1AC7		    mov	    dx,	[si+63h]
seg000:1ACA		    mov	    ax,	1400h
seg000:1ACD		    int	    2Fh		    ; -	Multiplex - NLSFUNC.COM	- INSTALLATION CHECK
seg000:1ACD					    ; Return: AL = 00h not installed, OK to install
seg000:1ACD					    ; 01h not installed, not OK
seg000:1ACD					    ; FFh installed
seg000:1ACF		    cmp	    al,	0FFh
seg000:1AD1		    jnz	    short nomem
seg000:1AD3		    mov	    ax,	1401h
seg000:1AD6		    int	    2Fh		    ; -	Multiplex - NLSFUNC.COM	- CHANGE CODE PAGE
seg000:1AD6					    ; DS:SI -> internal	code page structure
seg000:1AD6					    ; BX = new code page, DX = country code???
seg000:1AD6					    ; Return: AL = status
seg000:1AD6					    ; 00h successful
seg000:1AD6					    ; else DOS error code
seg000:1AD8		    cmp	    al,	0
seg000:1ADA		    jz	    short OK_RETURN
seg000:1ADC		    cmp	    al,	65
seg000:1ADE		    jnz	    short seterr
seg000:1AE0		    mov	    ax,	65
seg000:1AE3		    mov	    ds:EXTERR, ax
seg000:1AE6		    mov	    ds:EXTERR_ACTION, 6
seg000:1AEB		    mov	    ds:EXTERR_CLASS, 5
seg000:1AF0		    mov	    ds:EXTERR_LOCUS, 4
seg000:1AF5		    jmp	    From_GetSet
seg000:1AF8 ; ---------------------------------------------------------------------------
seg000:1AF8
seg000:1AF8 seterr:				    ; CODE XREF: seg000:1ADEj
seg000:1AF8					    ; seg000:1AFCj
seg000:1AF8		    jmp	    short NLSERROR
seg000:1AFA ; ---------------------------------------------------------------------------
seg000:1AFA
seg000:1AFA nomem:				    ; CODE XREF: seg000:1AC5j
seg000:1AFA					    ; seg000:1AD1j
seg000:1AFA		    mov	    al,	1
seg000:1AFC		    jmp	    short seterr
seg000:1AFE ; ---------------------------------------------------------------------------
seg000:1AFE
seg000:1AFE _$GET_DRIVE_FREESPACE:		    ; DATA XREF: seg000:0E6Co
seg000:1AFE		    push    ss
seg000:1AFF		    pop	    ds
seg000:1B00		    mov	    al,	dl
seg000:1B02		    call    GetThisDrv
seg000:1B05
seg000:1B05 SET_AX_RET:				    ; CODE XREF: seg000:1B0Cj
seg000:1B05		    jb	    short BADFDRV
seg000:1B07		    call    DISK_INFO
seg000:1B0A		    xchg    dx,	bx
seg000:1B0C		    jb	    short SET_AX_RET
seg000:1B0E		    xor	    ah,	ah
seg000:1B10
seg000:1B10 DoSt:				    ; CODE XREF: seg000:1B27j
seg000:1B10		    call    Get_User_Stack
seg000:1B13		    mov	    [si+6], dx
seg000:1B16		    mov	    [si+4], cx
seg000:1B19		    mov	    [si+2], bx
seg000:1B1C		    mov	    [si], ax
seg000:1B1E		    retn
seg000:1B1F ; ---------------------------------------------------------------------------
seg000:1B1F
seg000:1B1F BADFDRV:				    ; CODE XREF: seg000:SET_AX_RETj
seg000:1B1F		    mov	    al,	0Fh
seg000:1B21		    call    FCB_Ret_Err
seg000:1B24		    mov	    ax,	-1
seg000:1B27		    jmp	    short DoSt
seg000:1B29 ; ---------------------------------------------------------------------------
seg000:1B29
seg000:1B29 _$GET_DMA:				    ; DATA XREF: seg000:0E5Eo
seg000:1B29		    mov	    bx,	ss:DMAADD
seg000:1B2E		    mov	    cx,	ss:DMAADD_2
seg000:1B33		    call    Get_User_Stack
seg000:1B36		    mov	    [si+2], bx
seg000:1B39		    mov	    [si+10h], cx
seg000:1B3C		    retn
seg000:1B3D ; ---------------------------------------------------------------------------
seg000:1B3D
seg000:1B3D _$SET_DMA:				    ; DATA XREF: seg000:0E34o
seg000:1B3D		    mov	    ss:DMAADD, dx
seg000:1B42		    mov	    ss:DMAADD_2, ds
seg000:1B47		    retn
seg000:1B48 ; ---------------------------------------------------------------------------
seg000:1B48
seg000:1B48 _$GET_DEFAULT_DRIVE:		    ; DATA XREF: seg000:0E32o
seg000:1B48		    mov	    al,	ss:CURDRV
seg000:1B4C		    retn
seg000:1B4D ; ---------------------------------------------------------------------------
seg000:1B4D
seg000:1B4D _$SET_DEFAULT_DRIVE:		    ; DATA XREF: seg000:0E1Co
seg000:1B4D		    mov	    al,	dl
seg000:1B4F		    inc	    al
seg000:1B51		    call    GETVISDRV
seg000:1B54		    jb	    short SETRET
seg000:1B56		    mov	    ss:CURDRV, al
seg000:1B5A
seg000:1B5A SETRET:				    ; CODE XREF: seg000:1B54j
seg000:1B5A		    mov	    al,	ss:CDSCOUNT
seg000:1B5E		    retn
seg000:1B5F
seg000:1B5F ; =============== S	U B R O	U T I N	E =======================================
seg000:1B5F
seg000:1B5F
seg000:1B5F _$GET_INTERRUPT_VECTOR proc	near	    ; CODE XREF: FATALC+EBp
seg000:1B5F					    ; DATA XREF: seg000:0E6Ao
seg000:1B5F		    call    RECSET
seg000:1B62		    les	    bx,	es:[bx]
seg000:1B65		    call    Get_User_Stack
seg000:1B68		    mov	    [si+2], bx
seg000:1B6B		    mov	    word ptr [si+10h], es
seg000:1B6E		    retn
seg000:1B6E _$GET_INTERRUPT_VECTOR endp
seg000:1B6E
seg000:1B6F ; ---------------------------------------------------------------------------
seg000:1B6F
seg000:1B6F _$SET_INTERRUPT_VECTOR:		    ; DATA XREF: seg000:0E4Ao
seg000:1B6F		    call    RECSET
seg000:1B72		    cli
seg000:1B73		    mov	    es:[bx], dx
seg000:1B76		    mov	    word ptr es:[bx+2],	ds
seg000:1B7A		    sti
seg000:1B7B		    retn
seg000:1B7C
seg000:1B7C ; =============== S	U B R O	U T I N	E =======================================
seg000:1B7C
seg000:1B7C
seg000:1B7C RECSET	    proc near		    ; CODE XREF: _$GET_INTERRUPT_VECTORp
seg000:1B7C					    ; seg000:_$SET_INTERRUPT_VECTORp
seg000:1B7C					    ; DATA XREF: ...
seg000:1B7C		    xor	    bx,	bx
seg000:1B7E		    mov	    es,	bx
seg000:1B80		    mov	    bl,	al
seg000:1B82		    shl	    bx,	1
seg000:1B84		    shl	    bx,	1
seg000:1B86		    retn
seg000:1B86 RECSET	    endp
seg000:1B86
seg000:1B87 ; ---------------------------------------------------------------------------
seg000:1B87
seg000:1B87 _$CHAR_OPER:			    ; DATA XREF: seg000:0E6Eo
seg000:1B87		    push    ss
seg000:1B88		    pop	    ds
seg000:1B89		    cmp	    al,	1
seg000:1B8B		    jb	    short chop_1
seg000:1B8D		    jz	    short chop_2
seg000:1B8F		    cmp	    al,	3
seg000:1B91		    jb	    short chop_3
seg000:1B93		    jz	    short chop_5
seg000:1B95		    mov	    al,	0FFh
seg000:1B97		    retn
seg000:1B98 ; ---------------------------------------------------------------------------
seg000:1B98
seg000:1B98 chop_1:				    ; CODE XREF: seg000:1B8Bj
seg000:1B98		    mov	    dl,	ds:chSwitch
seg000:1B9C		    jmp	    short chop_4
seg000:1B9E ; ---------------------------------------------------------------------------
seg000:1B9E
seg000:1B9E chop_2:				    ; CODE XREF: seg000:1B8Dj
seg000:1B9E		    mov	    ds:chSwitch, dl
seg000:1BA2		    retn
seg000:1BA3 ; ---------------------------------------------------------------------------
seg000:1BA3
seg000:1BA3 chop_3:				    ; CODE XREF: seg000:1B91j
seg000:1BA3		    mov	    dl,	0FFh
seg000:1BA5
seg000:1BA5 chop_4:				    ; CODE XREF: seg000:1B9Cj
seg000:1BA5		    call    Get_User_Stack
seg000:1BA8		    mov	    [si+6], dx
seg000:1BAB
seg000:1BAB chop_5:				    ; CODE XREF: seg000:1B93j
seg000:1BAB		    retn
seg000:1BAC ; ---------------------------------------------------------------------------
seg000:1BAC
seg000:1BAC _$GetExtendedError:			    ; DATA XREF: seg000:0EB2o
seg000:1BAC		    push    ss
seg000:1BAD		    pop	    ds
seg000:1BAE		    mov	    ax,	ds:EXTERR
seg000:1BB1		    les	    di,	dword ptr ds:EXTERRPT
seg000:1BB5		    mov	    bx,	word ptr ds:EXTERR_ACTION
seg000:1BB9		    mov	    ch,	ds:EXTERR_LOCUS
seg000:1BBD		    call    Get_User_Stack
seg000:1BC0		    mov	    [si+0Ah], di
seg000:1BC3		    mov	    word ptr [si+10h], es
seg000:1BC6		    mov	    [si+2], bx
seg000:1BC9		    mov	    [si+4], cx
seg000:1BCC		    jmp	    SYS_RET_OK
seg000:1BCF ; ---------------------------------------------------------------------------
seg000:1BCF
seg000:1BCF _$PARSE_FILE_DESCRIPTOR:		    ; DATA XREF: seg000:0E52o
seg000:1BCF		    call    MAKEFCB
seg000:1BD2		    push    si
seg000:1BD3		    call    Get_User_Stack
seg000:1BD6		    pop	    word ptr [si+8]
seg000:1BD9		    retn
seg000:1BDA ; ---------------------------------------------------------------------------
seg000:1BDA
seg000:1BDA _$SLEAZEFUNC:			    ; DATA XREF: seg000:0E36o
seg000:1BDA		    mov	    dl,	0
seg000:1BDC
seg000:1BDC _$SLEAZEFUNCDL:			    ; DATA XREF: seg000:0E38o
seg000:1BDC		    push    ss
seg000:1BDD		    pop	    ds
seg000:1BDE		    mov	    al,	dl
seg000:1BE0		    call    GetThisDrv
seg000:1BE3
seg000:1BE3 SET_AL_RET:				    ; CODE XREF: seg000:1BEAj
seg000:1BE3		    mov	    al,	0Fh
seg000:1BE5		    jb	    short BADSLDRIVE
seg000:1BE7		    call    DISK_INFO
seg000:1BEA		    jb	    short SET_AL_RET
seg000:1BEC		    mov	    byte ptr ds:FATBYTE, ah
seg000:1BF0		    mov	    di,	offset FATBYTE
seg000:1BF3		    xor	    ah,	ah
seg000:1BF5		    call    Get_User_Stack
seg000:1BF8		    mov	    [si+4], cx
seg000:1BFB		    mov	    [si+6], bx
seg000:1BFE		    mov	    [si+2], di
seg000:1C01		    mov	    word ptr [si+0Eh], cs
seg000:1C04		    retn
seg000:1C05 ; ---------------------------------------------------------------------------
seg000:1C05
seg000:1C05 BADSLDRIVE:				    ; CODE XREF: seg000:1BE5j
seg000:1C05		    jmp	    FCB_Ret_Err
seg000:1C08 ; ---------------------------------------------------------------------------
seg000:1C08
seg000:1C08 _$GET_INDOS_FLAG:			    ; DATA XREF: seg000:0E68o
seg000:1C08		    call    Get_User_Stack
seg000:1C0B		    mov	    word ptr [si+2], offset INDOS
seg000:1C10		    mov	    word ptr [si+10h], ss
seg000:1C13		    retn
seg000:1C14 ; ---------------------------------------------------------------------------
seg000:1C14
seg000:1C14 _$GET_IN_VARS:			    ; DATA XREF: seg000:0EA4o
seg000:1C14		    call    Get_User_Stack
seg000:1C17		    mov	    word ptr [si+2], offset DPBHEAD
seg000:1C1C		    mov	    word ptr [si+10h], ss
seg000:1C1F		    retn
seg000:1C20 ; ---------------------------------------------------------------------------
seg000:1C20
seg000:1C20 _$GET_DEFAULT_DPB:			    ; DATA XREF: seg000:0E3Eo
seg000:1C20		    mov	    dl,	0
seg000:1C22
seg000:1C22 _$GET_DPB:				    ; DATA XREF: seg000:0E64o
seg000:1C22		    push    ss
seg000:1C23		    pop	    ds
seg000:1C24		    mov	    al,	dl
seg000:1C26		    call    GetThisDrv
seg000:1C29		    jb	    short ISNODRV
seg000:1C2B		    les	    di,	ds:THISCDS
seg000:1C2F		    test    word ptr es:[di+43h], 8000h
seg000:1C35		    jnz	    short ISNODRV
seg000:1C37		    call    EcritDisk
seg000:1C3A		    call    FatRead_CDS
seg000:1C3D		    call    LcritDisk
seg000:1C40		    jb	    short ISNODRV
seg000:1C42		    call    Get_User_Stack
seg000:1C45		    mov	    [si+2], bp
seg000:1C48		    mov	    word ptr [si+0Eh], es
seg000:1C4B		    xor	    al,	al
seg000:1C4D		    retn
seg000:1C4E ; ---------------------------------------------------------------------------
seg000:1C4E
seg000:1C4E ISNODRV:				    ; CODE XREF: seg000:1C29j
seg000:1C4E					    ; seg000:1C35j ...
seg000:1C4E		    mov	    al,	-1
seg000:1C50		    retn
seg000:1C51 ; ---------------------------------------------------------------------------
seg000:1C51
seg000:1C51 _$DISK_RESET:			    ; DATA XREF: seg000:0E1Ao
seg000:1C51		    push    ss
seg000:1C52		    pop	    ds
seg000:1C53		    mov	    al,	-1
seg000:1C55		    call    EcritDisk
seg000:1C58		    call    FLUSHBUF
seg000:1C5B		    mov	    bx,	-1
seg000:1C5E		    mov	    word ptr ds:LastBuffer+2, bx
seg000:1C62		    mov	    word ptr ds:LastBuffer, bx
seg000:1C66		    lds	    si,	ds:BUFFHEAD
seg000:1C6A		    mov	    ax,	20FFh
seg000:1C6D
seg000:1C6D DRST_1:				    ; CODE XREF: seg000:1C7Dj
seg000:1C6D		    mov	    [si+4], ax
seg000:1C70		    lds	    si,	[si]
seg000:1C72		    cmp	    si,	bx
seg000:1C74		    jz	    short DRST_2
seg000:1C76		    mov	    [si+4], ax
seg000:1C79		    lds	    si,	[si]
seg000:1C7B		    cmp	    si,	bx
seg000:1C7D		    jnz	    short DRST_1
seg000:1C7F
seg000:1C7F DRST_2:				    ; CODE XREF: seg000:1C74j
seg000:1C7F		    call    LcritDisk
seg000:1C82		    mov	    ax,	-1
seg000:1C85		    mov	    ax,	1120h
seg000:1C88		    int	    2Fh		    ; Multiplex	- NETWORK REDIRECTOR - FLUSH ALL DISK BUFFERS
seg000:1C88					    ; DS = DOS CS
seg000:1C88					    ; Return: CF clear (successful)
seg000:1C8A		    retn
seg000:1C8B
seg000:1C8B ; =============== S	U B R O	U T I N	E =======================================
seg000:1C8B
seg000:1C8B
seg000:1C8B _$SETDPB	    proc near		    ; CODE XREF: FAT_GOT_DPB+15Bp
seg000:1C8B					    ; DOSINIT+CFp
seg000:1C8B					    ; DATA XREF: ...
seg000:1C8B		    mov	    di,	bp
seg000:1C8D		    add	    di,	2
seg000:1C90		    lodsw
seg000:1C91		    stosw
seg000:1C92		    mov	    dx,	ax
seg000:1C94		    lodsb
seg000:1C95		    dec	    al
seg000:1C97		    stosb
seg000:1C98		    inc	    al
seg000:1C9A		    xor	    ah,	ah
seg000:1C9C
seg000:1C9C LOG2LOOP:				    ; CODE XREF: _$SETDPB+19j
seg000:1C9C		    test    al,	1
seg000:1C9E		    jnz	    short SAVLOG
seg000:1CA0		    inc	    ah
seg000:1CA2		    shr	    al,	1
seg000:1CA4		    jmp	    short LOG2LOOP
seg000:1CA6 ; ---------------------------------------------------------------------------
seg000:1CA6
seg000:1CA6 SAVLOG:				    ; CODE XREF: _$SETDPB+13j
seg000:1CA6		    mov	    al,	ah
seg000:1CA8		    stosb
seg000:1CA9		    mov	    bl,	al
seg000:1CAB		    movsw
seg000:1CAC		    lodsb
seg000:1CAD		    stosb
seg000:1CAE		    mov	    bh,	al
seg000:1CB0		    lodsw
seg000:1CB1		    stosw
seg000:1CB2		    mov	    cl,	5
seg000:1CB4		    shr	    dx,	cl
seg000:1CB6		    dec	    ax
seg000:1CB7		    add	    ax,	dx
seg000:1CB9		    mov	    cx,	dx
seg000:1CBB		    xor	    dx,	dx
seg000:1CBD		    div	    cx
seg000:1CBF		    mov	    cx,	ax
seg000:1CC1		    inc	    di
seg000:1CC2		    inc	    di
seg000:1CC3		    movsw
seg000:1CC4		    lodsb
seg000:1CC5		    mov	    es:[bp+16h], al
seg000:1CC9		    lodsw
seg000:1CCA		    stosb
seg000:1CCB		    mul	    bh
seg000:1CCD		    add	    ax,	es:[bp+6]
seg000:1CD1		    stosw
seg000:1CD2		    add	    ax,	cx
seg000:1CD4		    mov	    es:[bp+0Bh], ax
seg000:1CD8		    sub	    ax,	es:[bp+0Dh]
seg000:1CDC		    neg	    ax
seg000:1CDE		    mov	    cl,	bl
seg000:1CE0		    shr	    ax,	cl
seg000:1CE2		    inc	    ax
seg000:1CE3		    mov	    es:[bp+0Dh], ax
seg000:1CE7		    mov	    word ptr es:[bp+1Ch], 0
seg000:1CED		    mov	    word ptr es:[bp+1Eh], -1
seg000:1CF3		    retn
seg000:1CF3 _$SETDPB	    endp
seg000:1CF3
seg000:1CF4
seg000:1CF4 ; =============== S	U B R O	U T I N	E =======================================
seg000:1CF4
seg000:1CF4
seg000:1CF4 _$DUP_PDB	    proc near		    ; CODE XREF: DOSINIT-6D34p
seg000:1CF4					    ; seg000:621Cp
seg000:1CF4					    ; DATA XREF: ...
seg000:1CF4		    mov	    cs:CreatePDB, 0FFh
seg000:1CFA		    mov	    ds,	cs:CurrentPDB
seg000:1CFF		    push    si
seg000:1D00		    jmp	    short CreateCopy
seg000:1D02 ; ---------------------------------------------------------------------------
seg000:1D02
seg000:1D02 _$CREATE_PROCESS_DATA_BLOCK:	    ; DATA XREF: seg000:0E4Co
seg000:1D02		    call    Get_User_Stack
seg000:1D05		    mov	    ds,	word ptr [si+14h]
seg000:1D08		    push    word ptr ds:START+2
seg000:1D0C
seg000:1D0C CreateCopy:				    ; CODE XREF: _$DUP_PDB+Cj
seg000:1D0C		    mov	    es,	dx
seg000:1D0E		    xor	    si,	si
seg000:1D10		    mov	    di,	si
seg000:1D12		    mov	    cx,	80h
seg000:1D15		    rep	movsw
seg000:1D17		    mov	    cx,	20
seg000:1D1A		    mov	    di,	18h
seg000:1D1D		    push    ds
seg000:1D1E		    lds	    si,	ds:BCON+2
seg000:1D22		    rep	movsb
seg000:1D24		    pop	    ds
seg000:1D25		    test    cs:CreatePDB, 0FFh
seg000:1D2B		    jz	    short Create_PDB_cont
seg000:1D2D		    push    cs
seg000:1D2E		    pop	    ds
seg000:1D2F		    xor	    bx,	bx
seg000:1D31		    mov	    cx,	20
seg000:1D34
seg000:1D34 Create_dup_jfn:			    ; CODE XREF: _$DUP_PDB+73j
seg000:1D34		    push    es
seg000:1D35		    call    SFFromHandle
seg000:1D38		    mov	    al,	-1
seg000:1D3A		    jb	    short CreateStash
seg000:1D3C		    test    word ptr es:[di+5],	1000h
seg000:1D42		    jnz	    short CreateStash
seg000:1D44		    mov	    ah,	es:[di+2]
seg000:1D48		    and	    ah,	0F0h
seg000:1D4B		    cmp	    ah,	70h
seg000:1D4E		    jz	    short CreateStash
seg000:1D50		    mov	    word ptr ds:THISSFT, di
seg000:1D54		    mov	    word ptr ds:THISSFT+2, es
seg000:1D58		    call    DOS_DUP
seg000:1D5B		    call    pJFNFromHandle
seg000:1D5E		    mov	    al,	es:[di]
seg000:1D61
seg000:1D61 CreateStash:			    ; CODE XREF: _$DUP_PDB+46j
seg000:1D61					    ; _$DUP_PDB+4Ej ...
seg000:1D61		    pop	    es
seg000:1D62		    mov	    es:[bx+18h], al
seg000:1D66		    inc	    bx
seg000:1D67		    loop    Create_dup_jfn
seg000:1D69		    mov	    bx,	ds:CurrentPDB
seg000:1D6D		    mov	    es:OEM_HANDLER_2, bx
seg000:1D72		    mov	    ds:CurrentPDB, es
seg000:1D76		    mov	    ds,	bx
seg000:1D78
seg000:1D78 Create_PDB_cont:			    ; CODE XREF: _$DUP_PDB+37j
seg000:1D78		    mov	    cs:CreatePDB, 0
seg000:1D7E		    pop	    ax
seg000:1D7E _$DUP_PDB	    endp
seg000:1D7E
seg000:1D7F
seg000:1D7F ; =============== S	U B R O	U T I N	E =======================================
seg000:1D7F
seg000:1D7F
seg000:1D7F setmem	    proc near		    ; CODE XREF: DOSINIT+206p
seg000:1D7F		    xor	    cx,	cx
seg000:1D81		    mov	    ds,	cx
seg000:1D83		    mov	    es,	dx
seg000:1D85		    mov	    si,	88h
seg000:1D88		    mov	    di,	10
seg000:1D8B		    mov	    cx,	6
seg000:1D8E		    rep	movsw
seg000:1D90		    mov	    word ptr es:START+2, ax
seg000:1D94		    sub	    ax,	dx
seg000:1D96		    cmp	    ax,	0FFFh
seg000:1D99		    jbe	    short HAVDIF
seg000:1D9B		    mov	    ax,	0FFFh
seg000:1D9E
seg000:1D9E HAVDIF:				    ; CODE XREF: setmem+1Aj
seg000:1D9E		    sub	    ax,	10h
seg000:1DA1		    mov	    bx,	0Ch
seg000:1DA4		    sub	    bx,	ax
seg000:1DA6		    mov	    cl,	4
seg000:1DA8		    shl	    ax,	cl
seg000:1DAA		    mov	    ds,	dx
seg000:1DAC		    mov	    word ptr ds:PDB_CPM_CALL_1,	ax
seg000:1DAF		    mov	    word ptr ds:PDB_CPM_CALL_3,	bx
seg000:1DB3		    mov	    word ptr ds:START, 20CDh
seg000:1DB9		    mov	    ds:PDB_CPM_CALL, 9Ah
seg000:1DBE		    mov	    ds:off_50, 21CDh
seg000:1DC4		    mov	    byte ptr ds:asc_52,	0CBh ; "NUL	"
seg000:1DC9		    mov	    word ptr ds:BCON+2,	offset LeaveAddr
seg000:1DCF		    mov	    ds:MAXSEC, ds
seg000:1DD3		    mov	    word ptr ds:BCON, 20
seg000:1DD9		    mov	    word ptr ds:BUFFHEAD, -1
seg000:1DDF		    mov	    word ptr ds:BUFFHEAD+2, -1
seg000:1DE5		    retn
seg000:1DE5 setmem	    endp
seg000:1DE5
seg000:1DE6
seg000:1DE6 ; =============== S	U B R O	U T I N	E =======================================
seg000:1DE6
seg000:1DE6
seg000:1DE6 FETCHI_CHECK    proc near		    ; CODE XREF: _$IOCTL:SYS_RET_OKp
seg000:1DE6		    pushf
seg000:1DE7		    cmp	    cs:FETCHI_TAG, 5872h
seg000:1DEE		    jz	    short FETCHI_CHK_RETN
seg000:1DF0		    call    DOSINIT
seg000:1DF3
seg000:1DF3 FETCHI_CHK_RETN:			    ; CODE XREF: FETCHI_CHECK+8j
seg000:1DF3		    popf
seg000:1DF4		    retn
seg000:1DF4 FETCHI_CHECK    endp
seg000:1DF4
seg000:1DF5
seg000:1DF5 ; =============== S	U B R O	U T I N	E =======================================
seg000:1DF5
seg000:1DF5
seg000:1DF5 StrCmp	    proc near		    ; CODE XREF: seg000:2DDBp
seg000:1DF5					    ; DATA XREF: seg000:0F13o
seg000:1DF5		    push    si
seg000:1DF6		    push    di
seg000:1DF7		    push    ax
seg000:1DF8
seg000:1DF8 Cmplp:				    ; CODE XREF: StrCmp+1Cj
seg000:1DF8		    lodsb
seg000:1DF9		    call    Ucase
seg000:1DFC		    call    PATHCHRCMP
seg000:1DFF		    mov	    ah,	al
seg000:1E01		    mov	    al,	es:[di]
seg000:1E04		    inc	    di
seg000:1E05		    call    Ucase
seg000:1E08		    call    PATHCHRCMP
seg000:1E0B		    cmp	    ah,	al
seg000:1E0D		    jnz	    short PopRet
seg000:1E0F		    or	    al,	al
seg000:1E11		    jnz	    short Cmplp
seg000:1E13
seg000:1E13 PopRet:				    ; CODE XREF: StrCmp+18j
seg000:1E13		    pop	    ax
seg000:1E14		    pop	    di
seg000:1E15		    pop	    si
seg000:1E16		    retn
seg000:1E16 StrCmp	    endp
seg000:1E16
seg000:1E17
seg000:1E17 ; =============== S	U B R O	U T I N	E =======================================
seg000:1E17
seg000:1E17
seg000:1E17 StrCpy	    proc near		    ; CODE XREF: TransPathSet+C6p
seg000:1E17					    ; DATA XREF: seg000:0EF9o
seg000:1E17		    push    ax
seg000:1E18
seg000:1E18 CPYLoop:				    ; CODE XREF: StrCpy+Bj
seg000:1E18		    lodsb
seg000:1E19		    call    Ucase
seg000:1E1C		    call    PATHCHRCMP
seg000:1E1F		    stosb
seg000:1E20		    or	    al,	al
seg000:1E22		    jnz	    short CPYLoop
seg000:1E24		    pop	    ax
seg000:1E25		    retn
seg000:1E25 StrCpy	    endp
seg000:1E25
seg000:1E26
seg000:1E26 ; =============== S	U B R O	U T I N	E =======================================
seg000:1E26
seg000:1E26
seg000:1E26 FStrCpy	    proc near		    ; CODE XREF: seg000:SkipRecencyp
seg000:1E26					    ; seg000:4AB3p ...
seg000:1E26		    push    ax
seg000:1E27
seg000:1E27 FCPYLoop:				    ; CODE XREF: FStrCpy+5j
seg000:1E27		    lodsb
seg000:1E28		    stosb
seg000:1E29		    or	    al,	al
seg000:1E2B		    jnz	    short FCPYLoop
seg000:1E2D		    pop	    ax
seg000:1E2E		    retn
seg000:1E2E FStrCpy	    endp
seg000:1E2E
seg000:1E2F
seg000:1E2F ; =============== S	U B R O	U T I N	E =======================================
seg000:1E2F
seg000:1E2F
seg000:1E2F Ucase	    proc near		    ; CODE XREF: StrCmp+4p
seg000:1E2F					    ; StrCmp+10p ...
seg000:1E2F		    call    _UCase
seg000:1E32		    retn
seg000:1E32 Ucase	    endp
seg000:1E32
seg000:1E33
seg000:1E33 ; =============== S	U B R O	U T I N	E =======================================
seg000:1E33
seg000:1E33
seg000:1E33 StrLen	    proc near		    ; CODE XREF: DStrLen+3p
seg000:1E33					    ; REN_DEL_Check+18p ...
seg000:1E33		    push    di
seg000:1E34		    push    ax
seg000:1E35		    mov	    cx,	65535
seg000:1E38		    xor	    al,	al
seg000:1E3A		    repne scasb
seg000:1E3C		    not	    cx
seg000:1E3E		    pop	    ax
seg000:1E3F		    pop	    di
seg000:1E40		    retn
seg000:1E40 StrLen	    endp
seg000:1E40
seg000:1E41
seg000:1E41 ; =============== S	U B R O	U T I N	E =======================================
seg000:1E41
seg000:1E41
seg000:1E41 DStrLen	    proc near		    ; CODE XREF: seg000:2E4Dp
seg000:1E41					    ; seg000:5F2Cp ...
seg000:1E41		    call    XCHGP
seg000:1E44		    call    StrLen
seg000:1E47		    call    XCHGP
seg000:1E4A		    retn
seg000:1E4A DStrLen	    endp
seg000:1E4A
seg000:1E4B
seg000:1E4B ; =============== S	U B R O	U T I N	E =======================================
seg000:1E4B
seg000:1E4B
seg000:1E4B XCHGP	    proc near		    ; CODE XREF: DStrLenp
seg000:1E4B					    ; DStrLen+6p ...
seg000:1E4B		    push    ds
seg000:1E4C		    push    es
seg000:1E4D		    pop	    ds
seg000:1E4E		    pop	    es
seg000:1E4F		    xchg    si,	di
seg000:1E51
seg000:1E51 xchgp_retn:				    ; CODE XREF: Idle+6j
seg000:1E51		    retn
seg000:1E51 XCHGP	    endp
seg000:1E51
seg000:1E52
seg000:1E52 ; =============== S	U B R O	U T I N	E =======================================
seg000:1E52
seg000:1E52
seg000:1E52 Idle	    proc near		    ; CODE XREF: seg000:3734p
seg000:1E52					    ; LOCK_CHECK:LockNp ...
seg000:1E52		    test    byte ptr ss:fSharing, 0FFh
seg000:1E58		    jnz	    short xchgp_retn
seg000:1E5A		    push    cx
seg000:1E5B		    mov	    cx,	ss:RetryLoop
seg000:1E60		    jcxz    short Idle3
seg000:1E62
seg000:1E62 Idle1:				    ; CODE XREF: Idle+16j
seg000:1E62		    push    cx
seg000:1E63		    xor	    cx,	cx
seg000:1E65
seg000:1E65 Idle2:				    ; CODE XREF: Idle:Idle2j
seg000:1E65		    loop    Idle2
seg000:1E67		    pop	    cx
seg000:1E68		    loop    Idle1
seg000:1E6A
seg000:1E6A Idle3:				    ; CODE XREF: Idle+Ej
seg000:1E6A		    pop	    cx
seg000:1E6B		    retn
seg000:1E6B Idle	    endp
seg000:1E6B
seg000:1E6C ; ---------------------------------------------------------------------------
seg000:1E6C
seg000:1E6C TableDispatch:			    ; CODE XREF: seg000:1761p
seg000:1E6C					    ; seg000:65A0p
seg000:1E6C		    push    bp
seg000:1E6D		    mov	    bp,	sp
seg000:1E6F		    push    bx
seg000:1E70		    mov	    bx,	[bp+6]
seg000:1E73		    mov	    bl,	cs:[bx]
seg000:1E76		    cmp	    [bp+4], bl
seg000:1E79		    jnb	    short TableError
seg000:1E7B		    mov	    bl,	[bp+4]
seg000:1E7E		    xor	    bh,	bh
seg000:1E80		    shl	    bx,	1
seg000:1E82		    inc	    bx
seg000:1E83		    add	    bx,	[bp+6]
seg000:1E86		    mov	    bx,	cs:[bx]
seg000:1E89		    mov	    [bp+6], bx
seg000:1E8C		    pop	    bx
seg000:1E8D		    pop	    bp
seg000:1E8E		    add	    sp,	4
seg000:1E91		    retn
seg000:1E92 ; ---------------------------------------------------------------------------
seg000:1E92
seg000:1E92 TableError:				    ; CODE XREF: seg000:1E79j
seg000:1E92		    pop	    bx
seg000:1E93		    pop	    bp
seg000:1E94		    retn    6
seg000:1E97
seg000:1E97 ; =============== S	U B R O	U T I N	E =======================================
seg000:1E97
seg000:1E97
seg000:1E97 TestNet	    proc near		    ; CODE XREF: DOS_DELETEp
seg000:1E97					    ; DOS_RENAMEp ...
seg000:1E97		    les	    di,	cs:THISCDS
seg000:1E9C		    cmp	    di,	-1
seg000:1E9F		    jz	    short CMCRet
seg000:1EA1		    test    word ptr es:[di+43h], 8000h
seg000:1EA7		    jnz	    short CMCRet
seg000:1EA9		    retn
seg000:1EAA ; ---------------------------------------------------------------------------
seg000:1EAA
seg000:1EAA CMCRet:				    ; CODE XREF: TestNet+8j
seg000:1EAA					    ; TestNet+10j
seg000:1EAA		    cmc
seg000:1EAB		    retn
seg000:1EAB TestNet	    endp
seg000:1EAB
seg000:1EAC
seg000:1EAC ; =============== S	U B R O	U T I N	E =======================================
seg000:1EAC
seg000:1EAC
seg000:1EAC IsSFTNet	    proc near		    ; CODE XREF: SaveFCBInfo+5p
seg000:1EAC					    ; DOS_DUP:DOS_Dup_Directp ...
seg000:1EAC		    test    word ptr es:[di+5],	8000h
seg000:1EB2		    retn
seg000:1EB2 IsSFTNet	    endp
seg000:1EB2
seg000:1EB3 ; ---------------------------------------------------------------------------
seg000:1EB3
seg000:1EB3 FastInit:				    ; DATA XREF: seg000:0F2Bo
seg000:1EB3		    mov	    di,	offset FastTable
seg000:1EB6		    mov	    ax,	cs:[di+4]
seg000:1EBA		    mov	    bx,	cs
seg000:1EBC		    cmp	    ax,	bx
seg000:1EBE		    jz	    short ok_install
seg000:1EC0		    stc
seg000:1EC1		    retn
seg000:1EC2 ; ---------------------------------------------------------------------------
seg000:1EC2
seg000:1EC2 ok_install:				    ; CODE XREF: seg000:1EBEj
seg000:1EC2		    mov	    bx,	offset FastTable
seg000:1EC5		    mov	    cx,	ds
seg000:1EC7		    mov	    cs:[bx+4], cx
seg000:1ECB		    mov	    cs:[bx+2], si
seg000:1ECF		    retn
seg000:1ED0 ; ---------------------------------------------------------------------------
seg000:1ED0
seg000:1ED0 FastRet:				    ; DATA XREF: seg000:0F3Do
seg000:1ED0		    mov	    ax,	-1
seg000:1ED3		    stc
seg000:1ED4		    retf
seg000:1ED5 ; ---------------------------------------------------------------------------
seg000:1ED5
seg000:1ED5 NLS_OPEN:				    ; DATA XREF: seg000:0F23o
seg000:1ED5		    mov	    al,	cl
seg000:1ED7		    call    _$OPEN
seg000:1EDA		    retn
seg000:1EDB ; ---------------------------------------------------------------------------
seg000:1EDB
seg000:1EDB NLS_LSEEK:				    ; DATA XREF: seg000:0F27o
seg000:1EDB		    push    cs:User_SP
seg000:1EE0		    push    cs:User_SS
seg000:1EE5		    call    Fake_User_Stack
seg000:1EE8		    mov	    ax,	bp
seg000:1EEA		    call    _$LSEEK
seg000:1EED		    pop	    cs:User_SS
seg000:1EF2		    pop	    cs:User_SP
seg000:1EF7		    retn
seg000:1EF8
seg000:1EF8 ; =============== S	U B R O	U T I N	E =======================================
seg000:1EF8
seg000:1EF8
seg000:1EF8 Fake_User_Stack proc near		    ; CODE XREF: seg000:1EE5p
seg000:1EF8					    ; seg000:1F1Ep
seg000:1EF8		    mov	    ax,	cs:User_SP_2F
seg000:1EFC		    mov	    cs:User_SP,	ax
seg000:1F00		    mov	    ax,	cs
seg000:1F02		    mov	    cs:User_SS,	ax
seg000:1F06		    retn
seg000:1F06 Fake_User_Stack endp
seg000:1F06
seg000:1F07 ; ---------------------------------------------------------------------------
seg000:1F07
seg000:1F07 GetDevList:				    ; DATA XREF: seg000:0F2Fo
seg000:1F07		    mov	    si,	offset SysInitTable
seg000:1F0A		    lds	    si,	cs:[si]
seg000:1F0D		    mov	    ax,	[si+34]
seg000:1F10		    mov	    bx,	[si+36]
seg000:1F13		    retn
seg000:1F14 ; ---------------------------------------------------------------------------
seg000:1F14
seg000:1F14 NLS_IOCTL:				    ; DATA XREF: seg000:0F2Do
seg000:1F14		    push    cs:User_SP
seg000:1F19		    push    cs:User_SS
seg000:1F1E		    call    Fake_User_Stack
seg000:1F21		    mov	    ax,	bp
seg000:1F23		    call    _$IOCTL
seg000:1F26		    pop	    cs:User_SS
seg000:1F2B		    pop	    cs:User_SP
seg000:1F30		    retn
seg000:1F31 ; ---------------------------------------------------------------------------
seg000:1F31
seg000:1F31 NLS_GETEXT:				    ; DATA XREF: seg000:0F31o
seg000:1F31		    mov	    ax,	cs:EXTERR
seg000:1F35		    retn
seg000:1F36
seg000:1F36 ; =============== S	U B R O	U T I N	E =======================================
seg000:1F36
seg000:1F36
seg000:1F36 EcritDisk	    proc near		    ; CODE XREF: seg000:1C37p
seg000:1F36					    ; seg000:1C55p ...
seg000:1F36		    retn
seg000:1F36 EcritDisk	    endp
seg000:1F36
seg000:1F37 ; ---------------------------------------------------------------------------
seg000:1F37		    mov	    ax,	8001h
seg000:1F3A		    int	    2Ah		    ; Microsoft	Networks - BEGIN DOS CRITICAL SECTION
seg000:1F3A					    ; AL = critical section number (00h-0Fh)
seg000:1F3C		    pop	    ax
seg000:1F3D		    retn
seg000:1F3E
seg000:1F3E ; =============== S	U B R O	U T I N	E =======================================
seg000:1F3E
seg000:1F3E
seg000:1F3E LcritDisk	    proc near		    ; CODE XREF: seg000:1C3Dp
seg000:1F3E					    ; seg000:DRST_2p ...
seg000:1F3E		    retn
seg000:1F3E LcritDisk	    endp
seg000:1F3E
seg000:1F3F ; ---------------------------------------------------------------------------
seg000:1F3F		    mov	    ax,	8101h
seg000:1F42		    int	    2Ah		    ; Microsoft	Networks - END DOS CRITICAL SECTION
seg000:1F42					    ; AL = critical section number (00h-0Fh)
seg000:1F44		    pop	    ax
seg000:1F45		    retn
seg000:1F46
seg000:1F46 ; =============== S	U B R O	U T I N	E =======================================
seg000:1F46
seg000:1F46
seg000:1F46 EcritDevice	    proc near		    ; CODE XREF: DEVIOCALL2p
seg000:1F46					    ; DATA XREF: seg000:02C7o
seg000:1F46		    retn
seg000:1F46 EcritDevice	    endp
seg000:1F46
seg000:1F47 ; ---------------------------------------------------------------------------
seg000:1F47		    mov	    ax,	8002h
seg000:1F4A		    int	    2Ah		    ; Microsoft	Networks - BEGIN DOS CRITICAL SECTION
seg000:1F4A					    ; AL = critical section number (00h-0Fh)
seg000:1F4C		    pop	    ax
seg000:1F4D		    retn
seg000:1F4E
seg000:1F4E ; =============== S	U B R O	U T I N	E =======================================
seg000:1F4E
seg000:1F4E
seg000:1F4E LcritDevice	    proc near		    ; CODE XREF: DEVIOCALL2+20p
seg000:1F4E					    ; DATA XREF: seg000:02C9o
seg000:1F4E		    retn
seg000:1F4E LcritDevice	    endp
seg000:1F4E
seg000:1F4F ; ---------------------------------------------------------------------------
seg000:1F4F		    mov	    ax,	8102h
seg000:1F52		    int	    2Ah		    ; Microsoft	Networks - END DOS CRITICAL SECTION
seg000:1F52					    ; AL = critical section number (00h-0Fh)
seg000:1F54		    pop	    ax
seg000:1F55		    retn
seg000:1F56 ; ---------------------------------------------------------------------------
seg000:1F56
seg000:1F56 _$STD_CON_INPUT_NO_ECHO:		    ; CODE XREF: seg000:OEMFunctionKeyp
seg000:1F56					    ; seg000:1FFCp ...
seg000:1F56		    push    ds
seg000:1F57		    push    si
seg000:1F58
seg000:1F58 INTEST:				    ; CODE XREF: seg000:1FA8j
seg000:1F58		    call    near ptr STATCHK
seg000:1F5B		    jnz	    short GET
seg000:1F5D		    cmp	    ss:IOSTACK,	0
seg000:1F63		    jnz	    short no_sys_wait
seg000:1F65		    mov	    ah,	5
seg000:1F67		    call    IOFUNC
seg000:1F6A
seg000:1F6A no_sys_wait:			    ; CODE XREF: seg000:1F63j
seg000:1F6A		    mov	    ah,	84h
seg000:1F6C		    int	    2Ah		    ; Microsoft	Networks - KEYBOARD BUSY LOOP
seg000:1F6E		    cmp	    byte ptr ss:DATE_FLAG, -1
seg000:1F74		    jnz	    short NoUpdate
seg000:1F76		    push    ax
seg000:1F77		    push    bx
seg000:1F78		    push    cx
seg000:1F79		    push    dx
seg000:1F7A		    push    ds
seg000:1F7B		    push    cs
seg000:1F7C		    pop	    ds
seg000:1F7D		    mov	    ax,	0
seg000:1F80		    call    Save_Restore_Packet
seg000:1F83		    call    READTIME
seg000:1F86		    mov	    ax,	1
seg000:1F89		    call    Save_Restore_Packet
seg000:1F8C		    push    bx
seg000:1F8D		    mov	    bx,	offset DATE_FLAG
seg000:1F90		    add	    bx,	2
seg000:1F93		    cmp	    word ptr cs:[bx], 5872h
seg000:1F98		    jz	    short FETCHI_TAG_chk_ok
seg000:1F9A		    call    DOSINIT
seg000:1F9D
seg000:1F9D FETCHI_TAG_chk_ok:			    ; CODE XREF: seg000:1F98j
seg000:1F9D		    pop	    bx
seg000:1F9E		    pop	    ds
seg000:1F9F		    pop	    dx
seg000:1FA0		    pop	    cx
seg000:1FA1		    pop	    bx
seg000:1FA2		    pop	    ax
seg000:1FA3
seg000:1FA3 NoUpdate:				    ; CODE XREF: seg000:1F74j
seg000:1FA3		    inc	    ss:DATE_FLAG
seg000:1FA8		    jmp	    short INTEST
seg000:1FAA ; ---------------------------------------------------------------------------
seg000:1FAA
seg000:1FAA GET:				    ; CODE XREF: seg000:1F5Bj
seg000:1FAA		    xor	    ah,	ah
seg000:1FAC		    call    IOFUNC
seg000:1FAF		    pop	    si
seg000:1FB0		    pop	    ds
seg000:1FB1		    cmp	    al,	0
seg000:1FB3		    jnz	    short noscan
seg000:1FB5		    mov	    ss:SCAN_FLAG, 1
seg000:1FBB
seg000:1FBB noscan:				    ; CODE XREF: seg000:1FB3j
seg000:1FBB					    ; seg000:1FC1j ...
seg000:1FBB		    retn
seg000:1FBC ; ---------------------------------------------------------------------------
seg000:1FBC
seg000:1FBC _$STD_CON_STRING_OUTPUT:		    ; DATA XREF: seg000:0E12o
seg000:1FBC		    mov	    si,	dx
seg000:1FBE
seg000:1FBE STRING_OUT1:			    ; CODE XREF: seg000:1FC6j
seg000:1FBE		    lodsb
seg000:1FBF		    cmp	    al,	'$'
seg000:1FC1		    jz	    short noscan
seg000:1FC3		    call    OUTT
seg000:1FC6		    jmp	    short STRING_OUT1
seg000:1FC8 ; ---------------------------------------------------------------------------
seg000:1FC8
seg000:1FC8 _$STD_CON_STRING_INPUT:		    ; CODE XREF: DOS_READ+16Ap
seg000:1FC8					    ; DATA XREF: seg000:0E14o
seg000:1FC8		    mov	    ax,	ss
seg000:1FCA		    mov	    es,	ax
seg000:1FCC		    mov	    si,	dx
seg000:1FCE		    xor	    ch,	ch
seg000:1FD0		    lodsw
seg000:1FD1		    or	    al,	al
seg000:1FD3		    jz	    short noscan
seg000:1FD5		    mov	    bl,	ah
seg000:1FD7		    mov	    bh,	ch
seg000:1FD9		    cmp	    al,	bl
seg000:1FDB		    jbe	    short noedit
seg000:1FDD		    cmp	    byte ptr [bx+si], 0Dh
seg000:1FE0		    jz	    short editon
seg000:1FE2
seg000:1FE2 noedit:				    ; CODE XREF: seg000:1FDBj
seg000:1FE2		    mov	    bl,	ch
seg000:1FE4
seg000:1FE4 editon:				    ; CODE XREF: seg000:1FE0j
seg000:1FE4		    mov	    dl,	al
seg000:1FE6		    dec	    dx
seg000:1FE7
seg000:1FE7 newlin:				    ; CODE XREF: seg000:20ABj
seg000:1FE7		    mov	    al,	ss:CARPOS
seg000:1FEB		    mov	    ss:STARTPOS, al
seg000:1FEF		    push    si
seg000:1FF0		    mov	    di,	offset INBUF
seg000:1FF3		    mov	    byte ptr ss:INSMODE, ch
seg000:1FF8		    mov	    bh,	ch
seg000:1FFA		    mov	    dh,	ch
seg000:1FFC		    call    _$STD_CON_INPUT_NO_ECHO
seg000:1FFF		    cmp	    al,	0Ah
seg000:2001		    jnz	    short GOTCH
seg000:2003
seg000:2003 GETCH:				    ; CODE XREF: seg000:178Ej
seg000:2003					    ; seg000:2008j ...
seg000:2003		    call    _$STD_CON_INPUT_NO_ECHO
seg000:2006
seg000:2006 GOTCH:				    ; CODE XREF: seg000:2001j
seg000:2006		    cmp	    al,	6
seg000:2008		    jz	    short GETCH
seg000:200A		    cmp	    al,	ss:ESCCHAR
seg000:200F		    jz	    short ESCape
seg000:2011		    cmp	    al,	7Fh
seg000:2013		    jz	    short BACKSPJ
seg000:2015		    cmp	    al,	8
seg000:2017		    jz	    short BACKSPJ
seg000:2019		    cmp	    al,	17h
seg000:201B		    nop
seg000:201C		    nop
seg000:201D		    cmp	    al,	15h
seg000:201F		    nop
seg000:2020		    nop
seg000:2021		    cmp	    al,	0Dh
seg000:2023		    jz	    short ENDLIN
seg000:2025		    cmp	    al,	0Ah
seg000:2027		    jz	    short PHYCRLF
seg000:2029		    cmp	    al,	ss:CANCHAR
seg000:202E		    jz	    short KILNEW
seg000:2030
seg000:2030 SAVCH:				    ; CODE XREF: seg000:2129j
seg000:2030					    ; seg000:21B8j
seg000:2030		    cmp	    dh,	dl
seg000:2032		    jnb	    short BUFFUL
seg000:2034		    stosb
seg000:2035		    inc	    dh
seg000:2037		    call    BUFOUT
seg000:203A		    cmp	    byte ptr ss:INSMODE, 0
seg000:2040		    jnz	    short GETCH
seg000:2042		    cmp	    bh,	bl
seg000:2044		    jnb	    short GETCH
seg000:2046		    inc	    si
seg000:2047		    inc	    bh
seg000:2049		    jmp	    short GETCH
seg000:204B ; ---------------------------------------------------------------------------
seg000:204B
seg000:204B BACKSPJ:				    ; CODE XREF: seg000:2013j
seg000:204B					    ; seg000:2017j
seg000:204B		    jmp	    short BACKSP
seg000:204D ; ---------------------------------------------------------------------------
seg000:204D
seg000:204D BUFFUL:				    ; CODE XREF: seg000:2032j
seg000:204D		    mov	    al,	7
seg000:204F		    call    OUTT
seg000:2052		    jmp	    short GETCH
seg000:2054 ; ---------------------------------------------------------------------------
seg000:2054
seg000:2054 ESCape:				    ; CODE XREF: seg000:200Fj
seg000:2054		    jmp	    OEMFunctionKey
seg000:2057 ; ---------------------------------------------------------------------------
seg000:2057
seg000:2057 ENDLIN:				    ; CODE XREF: seg000:2023j
seg000:2057		    stosb
seg000:2058		    call    OUTT
seg000:205B		    pop	    di
seg000:205C		    mov	    [di-1], dh
seg000:205F		    inc	    dh
seg000:2061
seg000:2061 ; =============== S	U B R O	U T I N	E =======================================
seg000:2061
seg000:2061
seg000:2061 COPYNEW	    proc near		    ; CODE XREF: seg000:21A3p
seg000:2061		    push    ds
seg000:2062		    push    es
seg000:2063		    pop	    ds
seg000:2064		    pop	    es
seg000:2065		    mov	    si,	offset INBUF
seg000:2068		    mov	    cl,	dh
seg000:206A		    rep	movsb
seg000:206C
seg000:206C OLDBAK_RETN:			    ; CODE XREF: BackSpace+23j
seg000:206C					    ; BackSpace+27j
seg000:206C		    retn
seg000:206C COPYNEW	    endp
seg000:206C
seg000:206D ; ---------------------------------------------------------------------------
seg000:206D
seg000:206D PHYCRLF:				    ; CODE XREF: seg000:2027j
seg000:206D		    call    CRLF
seg000:2070		    jmp	    short GETCH
seg000:2072 ; ---------------------------------------------------------------------------
seg000:2072
seg000:2072 LineDel:				    ; CODE XREF: seg000:2079j
seg000:2072		    or	    dh,	dh
seg000:2074		    jz	    short GETCH
seg000:2076		    call    BackSpace
seg000:2079		    jmp	    short LineDel
seg000:207B ; ---------------------------------------------------------------------------
seg000:207B
seg000:207B WordDel:				    ; CODE XREF: seg000:208Cj
seg000:207B					    ; seg000:2096j
seg000:207B		    call    BackSpace
seg000:207E		    or	    dh,	dh
seg000:2080		    jz	    short GetChJ
seg000:2082		    mov	    al,	es:[di-1]
seg000:2086		    cmp	    al,	'0'
seg000:2088		    jb	    short GetChJ
seg000:208A		    cmp	    al,	'9'
seg000:208C		    jbe	    short WordDel
seg000:208E		    or	    al,	20h
seg000:2090		    cmp	    al,	'a'
seg000:2092		    jb	    short GetChJ
seg000:2094		    cmp	    al,	'z'
seg000:2096		    jbe	    short WordDel
seg000:2098
seg000:2098 GetChJ:				    ; CODE XREF: seg000:2080j
seg000:2098					    ; seg000:2088j ...
seg000:2098		    jmp	    GETCH
seg000:209B ; ---------------------------------------------------------------------------
seg000:209B
seg000:209B KILNEW:				    ; CODE XREF: seg000:178Ej
seg000:209B					    ; seg000:202Ej
seg000:209B					    ; DATA XREF: ...
seg000:209B		    mov	    al,	'\'
seg000:209D		    call    OUTT
seg000:20A0		    pop	    si
seg000:20A1
seg000:20A1 PUTNEW:				    ; CODE XREF: seg000:21ABj
seg000:20A1		    call    CRLF
seg000:20A4		    mov	    al,	ss:STARTPOS
seg000:20A8		    call    TAB
seg000:20AB		    jmp	    newlin
seg000:20AE ; ---------------------------------------------------------------------------
seg000:20AE
seg000:20AE BACKSP:				    ; CODE XREF: seg000:178Ej
seg000:20AE					    ; seg000:BACKSPJj
seg000:20AE					    ; DATA XREF: ...
seg000:20AE		    call    BackSpace
seg000:20B1		    jmp	    GETCH
seg000:20B4
seg000:20B4 ; =============== S	U B R O	U T I N	E =======================================
seg000:20B4
seg000:20B4
seg000:20B4 BackSpace	    proc near		    ; CODE XREF: seg000:2076p
seg000:20B4					    ; seg000:WordDelp ...
seg000:20B4		    or	    dh,	dh
seg000:20B6		    jz	    short OLDBAK
seg000:20B8		    call    BACKUP
seg000:20BB		    mov	    al,	es:[di]
seg000:20BE		    cmp	    al,	' '
seg000:20C0		    jnb	    short OLDBAK
seg000:20C2		    cmp	    al,	9
seg000:20C4		    jz	    short BAKTAB
seg000:20C6		    cmp	    al,	15h
seg000:20C8		    jz	    short OLDBAK
seg000:20CA		    cmp	    al,	14h
seg000:20CC		    jz	    short OLDBAK
seg000:20CE		    call    BACKMES
seg000:20D1
seg000:20D1 OLDBAK:				    ; CODE XREF: BackSpace+2j
seg000:20D1					    ; BackSpace+Cj ...
seg000:20D1		    cmp	    byte ptr ss:INSMODE, 0
seg000:20D7		    jnz	    short OLDBAK_RETN
seg000:20D9		    or	    bh,	bh
seg000:20DB		    jz	    short OLDBAK_RETN
seg000:20DD		    dec	    bh
seg000:20DF		    dec	    si
seg000:20E0		    retn
seg000:20E1 ; ---------------------------------------------------------------------------
seg000:20E1
seg000:20E1 BAKTAB:				    ; CODE XREF: BackSpace+10j
seg000:20E1		    push    di
seg000:20E2		    dec	    di
seg000:20E3		    std
seg000:20E4		    mov	    cl,	dh
seg000:20E6		    mov	    al,	' '
seg000:20E8		    push    bx
seg000:20E9		    mov	    bl,	7
seg000:20EB		    jcxz    short FIGTAB
seg000:20ED
seg000:20ED FNDPOS:				    ; CODE XREF: BackSpace:CHKCNTj
seg000:20ED		    scasb
seg000:20EE		    jbe	    short CHKCNT
seg000:20F0		    cmp	    byte ptr es:[di+1],	9
seg000:20F5		    jz	    short HAVTAB
seg000:20F7		    dec	    bl
seg000:20F9
seg000:20F9 CHKCNT:				    ; CODE XREF: BackSpace+3Aj
seg000:20F9		    loop    FNDPOS
seg000:20FB
seg000:20FB FIGTAB:				    ; CODE XREF: BackSpace+37j
seg000:20FB		    sub	    bl,	ss:STARTPOS
seg000:2100
seg000:2100 HAVTAB:				    ; CODE XREF: BackSpace+41j
seg000:2100		    sub	    bl,	dh
seg000:2102		    add	    cl,	bl
seg000:2104		    and	    cl,	7
seg000:2107		    cld
seg000:2108		    pop	    bx
seg000:2109		    pop	    di
seg000:210A		    jz	    short OLDBAK
seg000:210C
seg000:210C TABBAK:				    ; CODE XREF: BackSpace+5Bj
seg000:210C		    call    BACKMES
seg000:210F		    loop    TABBAK
seg000:2111		    jmp	    short OLDBAK
seg000:2111 BackSpace	    endp
seg000:2111
seg000:2113 ; ---------------------------------------------------------------------------
seg000:2113
seg000:2113 BACKUP:				    ; CODE XREF: BackSpace+4p
seg000:2113		    dec	    dh
seg000:2115		    dec	    di
seg000:2116
seg000:2116 BACKMES:				    ; CODE XREF: BackSpace+1Ap
seg000:2116					    ; BackSpace:TABBAKp
seg000:2116		    mov	    al,	8
seg000:2118		    call    OUTT
seg000:211B		    mov	    al,	' '
seg000:211D		    call    OUTT
seg000:2120		    mov	    al,	8
seg000:2122		    jmp	    OUTT
seg000:2125 ; ---------------------------------------------------------------------------
seg000:2125
seg000:2125 TwoEsc:				    ; CODE XREF: seg000:178Ej
seg000:2125					    ; DATA XREF: seg000:1297o
seg000:2125		    mov	    al,	ss:ESCCHAR
seg000:2129		    jmp	    SAVCH
seg000:212C ; ---------------------------------------------------------------------------
seg000:212C
seg000:212C COPYLIN:				    ; CODE XREF: seg000:178Ej
seg000:212C					    ; DATA XREF: seg000:12A3o
seg000:212C		    mov	    cl,	bl
seg000:212E		    sub	    cl,	bh
seg000:2130		    jmp	    short COPYEACH
seg000:2132 ; ---------------------------------------------------------------------------
seg000:2132
seg000:2132 CopyStr:				    ; CODE XREF: seg000:178Ej
seg000:2132					    ; DATA XREF: seg000:12A7o
seg000:2132		    call    FINDOLD
seg000:2135		    jmp	    short COPYEACH
seg000:2137 ; ---------------------------------------------------------------------------
seg000:2137
seg000:2137 COPYONE:				    ; CODE XREF: seg000:178Ej
seg000:2137					    ; DATA XREF: seg000:12ABo ...
seg000:2137		    mov	    cl,	1
seg000:2139
seg000:2139 COPYEACH:				    ; CODE XREF: seg000:2130j
seg000:2139					    ; seg000:2135j ...
seg000:2139		    mov	    byte ptr ss:INSMODE, 0
seg000:213F		    cmp	    dh,	dl
seg000:2141		    jz	    short GETCH2
seg000:2143		    cmp	    bh,	bl
seg000:2145		    jz	    short GETCH2
seg000:2147		    lodsb
seg000:2148		    stosb
seg000:2149		    call    BUFOUT
seg000:214C		    inc	    bh
seg000:214E		    inc	    dh
seg000:2150		    loop    COPYEACH
seg000:2152
seg000:2152 GETCH2:				    ; CODE XREF: seg000:2141j
seg000:2152					    ; seg000:2145j ...
seg000:2152		    jmp	    GETCH
seg000:2155 ; ---------------------------------------------------------------------------
seg000:2155
seg000:2155 SKIPONE:				    ; CODE XREF: seg000:178Ej
seg000:2155					    ; DATA XREF: seg000:12A9o
seg000:2155		    cmp	    bh,	bl
seg000:2157		    jz	    short GETCH2
seg000:2159		    inc	    bh
seg000:215B		    inc	    si
seg000:215C		    jmp	    GETCH
seg000:215F ; ---------------------------------------------------------------------------
seg000:215F
seg000:215F SKIPSTR:				    ; CODE XREF: seg000:178Ej
seg000:215F					    ; DATA XREF: seg000:12A5o
seg000:215F		    call    FINDOLD
seg000:2162		    add	    si,	cx
seg000:2164		    add	    bh,	cl
seg000:2166		    jmp	    GETCH
seg000:2169
seg000:2169 ; =============== S	U B R O	U T I N	E =======================================
seg000:2169
seg000:2169
seg000:2169 FINDOLD	    proc near		    ; CODE XREF: seg000:CopyStrp
seg000:2169					    ; seg000:SKIPSTRp
seg000:2169		    call    _$STD_CON_INPUT_NO_ECHO
seg000:216C		    cmp	    al,	ss:ESCCHAR
seg000:2171		    jnz	    short FindSetup
seg000:2173		    call    _$STD_CON_INPUT_NO_ECHO
seg000:2176		    jmp	    short NotFnd
seg000:2178 ; ---------------------------------------------------------------------------
seg000:2178		    nop
seg000:2179
seg000:2179 FindSetup:				    ; CODE XREF: FINDOLD+8j
seg000:2179		    mov	    cl,	bl
seg000:217B		    sub	    cl,	bh
seg000:217D		    jz	    short NotFnd
seg000:217F		    dec	    cx
seg000:2180		    jz	    short NotFnd
seg000:2182		    push    es
seg000:2183		    push    ds
seg000:2184		    pop	    es
seg000:2185		    push    di
seg000:2186		    mov	    di,	si
seg000:2188		    inc	    di
seg000:2189		    repne scasb
seg000:218B		    pop	    di
seg000:218C		    pop	    es
seg000:218D		    jnz	    short NotFnd
seg000:218F		    not	    cl
seg000:2191		    add	    cl,	bl
seg000:2193		    sub	    cl,	bh
seg000:2195
seg000:2195 FINDOLD_RETN:			    ; CODE XREF: seg000:21D5j
seg000:2195		    retn
seg000:2196 ; ---------------------------------------------------------------------------
seg000:2196
seg000:2196 NotFnd:				    ; CODE XREF: FINDOLD+Dj
seg000:2196					    ; FINDOLD+14j ...
seg000:2196		    pop	    bp
seg000:2197		    jmp	    GETCH
seg000:2197 FINDOLD	    endp
seg000:2197
seg000:219A ; ---------------------------------------------------------------------------
seg000:219A
seg000:219A REEDIT:				    ; CODE XREF: seg000:178Ej
seg000:219A					    ; DATA XREF: seg000:129Fo
seg000:219A		    mov	    al,	40h ; '@'
seg000:219C		    call    OUTT
seg000:219F		    pop	    di
seg000:21A0		    push    di
seg000:21A1		    push    es
seg000:21A2		    push    ds
seg000:21A3		    call    COPYNEW
seg000:21A6		    pop	    ds
seg000:21A7		    pop	    es
seg000:21A8		    pop	    si
seg000:21A9		    mov	    bl,	dh
seg000:21AB		    jmp	    PUTNEW
seg000:21AE ; ---------------------------------------------------------------------------
seg000:21AE
seg000:21AE ENTERINS_EXITINS:			    ; CODE XREF: seg000:178Ej
seg000:21AE					    ; DATA XREF: seg000:1299o ...
seg000:21AE		    not	    byte ptr ss:INSMODE
seg000:21B3		    jmp	    GETCH
seg000:21B6 ; ---------------------------------------------------------------------------
seg000:21B6
seg000:21B6 CTRLZ:				    ; CODE XREF: seg000:178Ej
seg000:21B6					    ; DATA XREF: seg000:12AFo
seg000:21B6		    mov	    al,	1Ah
seg000:21B8		    jmp	    SAVCH
seg000:21BB
seg000:21BB ; =============== S	U B R O	U T I N	E =======================================
seg000:21BB
seg000:21BB
seg000:21BB CRLF	    proc near		    ; CODE XREF: seg000:PHYCRLFp
seg000:21BB					    ; seg000:PUTNEWp ...
seg000:21BB		    mov	    al,	0Dh
seg000:21BD		    call    OUTT
seg000:21C0		    mov	    al,	0Ah
seg000:21C2		    jmp	    OUTT
seg000:21C2 CRLF	    endp
seg000:21C2
seg000:21C5 ; ---------------------------------------------------------------------------
seg000:21C5
seg000:21C5 _$RAW_CON_IO:			    ; DATA XREF: seg000:0E0Co
seg000:21C5		    mov	    al,	dl
seg000:21C7		    cmp	    al,	-1
seg000:21C9		    jnz	    short RAWOUT
seg000:21CB		    les	    di,	dword ptr ss:User_SP
seg000:21D0		    xor	    bx,	bx
seg000:21D2		    call    GET_IO_SFT
seg000:21D5		    jb	    short FINDOLD_RETN
seg000:21D7		    mov	    ah,	1
seg000:21D9		    call    IOFUNC
seg000:21DC		    jnz	    short RESFLG
seg000:21DE		    call    SPOOLINT
seg000:21E1		    or	    byte ptr es:[di+16h], 40h
seg000:21E6		    xor	    al,	al
seg000:21E8
seg000:21E8 RET17:				    ; CODE XREF: seg000:21F8j
seg000:21E8		    retn
seg000:21E9 ; ---------------------------------------------------------------------------
seg000:21E9
seg000:21E9 RESFLG:				    ; CODE XREF: seg000:21DCj
seg000:21E9		    and	    byte ptr es:[di+16h], 0BFh
seg000:21EE
seg000:21EE rci0:				    ; CODE XREF: seg000:2205j
seg000:21EE		    call    SPOOLINT
seg000:21F1
seg000:21F1 _$RAW_CON_INPUT:			    ; DATA XREF: seg000:0E0Eo
seg000:21F1		    push    bx
seg000:21F2		    xor	    bx,	bx
seg000:21F4		    call    GET_IO_SFT
seg000:21F7		    pop	    bx
seg000:21F8		    jb	    short RET17
seg000:21FA		    mov	    ah,	1
seg000:21FC		    call    IOFUNC
seg000:21FF		    jnz	    short rci5
seg000:2201		    mov	    ah,	84h
seg000:2203		    int	    2Ah		    ; Microsoft	Networks - KEYBOARD BUSY LOOP
seg000:2205		    jmp	    short rci0
seg000:2207 ; ---------------------------------------------------------------------------
seg000:2207
seg000:2207 rci5:				    ; CODE XREF: seg000:21FFj
seg000:2207		    xor	    ah,	ah
seg000:2209		    call    IOFUNC
seg000:220C		    retn
seg000:220D ; ---------------------------------------------------------------------------
seg000:220D
seg000:220D RAWOUT:				    ; CODE XREF: seg000:21C9j
seg000:220D					    ; OUTT:OUTSKIPp
seg000:220D		    push    bx
seg000:220E		    mov	    bx,	1
seg000:2211		    call    GET_IO_SFT
seg000:2214		    jb	    short RAWRET1
seg000:2216		    mov	    bx,	[si+5]
seg000:2219		    and	    bx,	8080h
seg000:221D		    cmp	    bx,	80h
seg000:2221		    jnz	    short RAWNORM
seg000:2223		    push    ds
seg000:2224		    lds	    bx,	[si+7]
seg000:2227		    test    byte ptr [bx+4], 10h
seg000:222B		    pop	    ds
seg000:222C		    jz	    short RAWNORM
seg000:222E		    int	    29h		    ; DOS 2+ internal -	FAST PUTCHAR
seg000:222E					    ; AL = character to	display
seg000:2230
seg000:2230 RAWRET:				    ; CODE XREF: seg000:2236j
seg000:2230		    clc
seg000:2231
seg000:2231 RAWRET1:				    ; CODE XREF: seg000:2214j
seg000:2231		    pop	    bx
seg000:2232
seg000:2232 RAWRET2:				    ; CODE XREF: RAWOUT2+3j
seg000:2232		    retn
seg000:2233 ; ---------------------------------------------------------------------------
seg000:2233
seg000:2233 RAWNORM:				    ; CODE XREF: seg000:2221j
seg000:2233					    ; seg000:222Cj
seg000:2233		    call    RAWOUT3
seg000:2236		    jmp	    short RAWRET
seg000:2238
seg000:2238 ; =============== S	U B R O	U T I N	E =======================================
seg000:2238
seg000:2238
seg000:2238 RAWOUT2	    proc near		    ; CODE XREF: OUTT:LISSTRT2p
seg000:2238		    call    GET_IO_SFT
seg000:223B		    jb	    short RAWRET2
seg000:223B RAWOUT2	    endp
seg000:223B
seg000:223D
seg000:223D ; =============== S	U B R O	U T I N	E =======================================
seg000:223D
seg000:223D
seg000:223D RAWOUT3	    proc near		    ; CODE XREF: seg000:RAWNORMp
seg000:223D		    push    ax
seg000:223E		    jmp	    short RAWOSTRT
seg000:2240 ; ---------------------------------------------------------------------------
seg000:2240
seg000:2240 ROLP:				    ; CODE XREF: RAWOUT3+Bj
seg000:2240		    call    SPOOLINT
seg000:2243
seg000:2243 RAWOSTRT:				    ; CODE XREF: RAWOUT3+1j
seg000:2243		    mov	    ah,	3
seg000:2245		    call    IOFUNC
seg000:2248		    jz	    short ROLP
seg000:224A		    pop	    ax
seg000:224B		    mov	    ah,	2
seg000:224D		    call    IOFUNC
seg000:2250		    clc
seg000:2251		    retn
seg000:2251 RAWOUT3	    endp
seg000:2251
seg000:2252
seg000:2252 ; =============== S	U B R O	U T I N	E =======================================
seg000:2252
seg000:2252
seg000:2252 Save_Restore_Packet	proc near	    ; CODE XREF: seg000:1F80p
seg000:2252					    ; seg000:1F89p
seg000:2252		    push    ds
seg000:2253		    push    es
seg000:2254		    push    si
seg000:2255		    push    di
seg000:2256		    cmp	    ax,	0
seg000:2259		    jz	    short save_packet
seg000:225B		    mov	    si,	offset FAKE_STACK_2F
seg000:225E		    mov	    di,	offset DEVCALL
seg000:2261		    jmp	    short set_seg
seg000:2263 ; ---------------------------------------------------------------------------
seg000:2263		    nop
seg000:2264
seg000:2264 save_packet:			    ; CODE XREF: Save_Restore_Packet+7j
seg000:2264		    mov	    di,	offset FAKE_STACK_2F
seg000:2267		    mov	    si,	offset DEVCALL
seg000:226A
seg000:226A set_seg:				    ; CODE XREF: Save_Restore_Packet+Fj
seg000:226A		    mov	    ax,	cs
seg000:226C		    mov	    ds,	ax
seg000:226E		    mov	    es,	ax
seg000:2270		    mov	    cx,	11
seg000:2273		    rep	movsw
seg000:2275		    pop	    di
seg000:2276		    pop	    si
seg000:2277		    pop	    es
seg000:2278		    pop	    ds
seg000:2279		    retn
seg000:2279 Save_Restore_Packet	endp
seg000:2279
seg000:227A ; ---------------------------------------------------------------------------
seg000:227A
seg000:227A _$STD_CON_INPUT:			    ; DATA XREF: seg000:0E02o
seg000:227A		    call    _$STD_CON_INPUT_NO_ECHO
seg000:227D		    push    ax
seg000:227E		    call    OUTT
seg000:2281		    pop	    ax
seg000:2282
seg000:2282 CON_INPUT_RETN:			    ; CODE XREF: OUTT+2Cj
seg000:2282		    retn
seg000:2283 ; ---------------------------------------------------------------------------
seg000:2283
seg000:2283 _$STD_CON_OUTPUT:			    ; DATA XREF: seg000:0E04o
seg000:2283		    mov	    al,	dl
seg000:2285
seg000:2285 ; =============== S	U B R O	U T I N	E =======================================
seg000:2285
seg000:2285
seg000:2285 OUTT	    proc near		    ; CODE XREF: seg000:1FC3p
seg000:2285					    ; seg000:204Fp ...
seg000:2285
seg000:2285 ; FUNCTION CHUNK AT	seg000:230C SIZE 00000009 BYTES
seg000:2285 ; FUNCTION CHUNK AT	seg000:2318 SIZE 00000008 BYTES
seg000:2285 ; FUNCTION CHUNK AT	seg000:236D SIZE 00000007 BYTES
seg000:2285
seg000:2285		    cmp	    al,	20h
seg000:2287		    jb	    short CTRLOUT
seg000:2289		    cmp	    al,	7Fh
seg000:228B		    jz	    short OUTCH
seg000:228D
seg000:228D OUTCHA:
seg000:228D		    inc	    ss:CARPOS
seg000:2292
seg000:2292 OUTCH:				    ; CODE XREF: OUTT+6j
seg000:2292					    ; OUTT+6Dj	...
seg000:2292		    push    ds
seg000:2293		    push    si
seg000:2294		    inc	    ss:CHARCO
seg000:2299		    and	    ss:CHARCO, 3
seg000:229F		    jnz	    short OUTSKIP
seg000:22A1		    push    ax
seg000:22A2		    call    near ptr STATCHK
seg000:22A5		    pop	    ax
seg000:22A6
seg000:22A6 OUTSKIP:				    ; CODE XREF: OUTT+1Aj
seg000:22A6		    call    RAWOUT
seg000:22A9		    pop	    si
seg000:22AA		    pop	    ds
seg000:22AB		    test    ss:PFLAG, 0FFh
seg000:22B1		    jz	    short CON_INPUT_RETN
seg000:22B3		    push    bx
seg000:22B4		    push    ds
seg000:22B5		    push    si
seg000:22B6		    mov	    bx,	1
seg000:22B9		    call    GET_IO_SFT
seg000:22BC		    jb	    short TRIPOPJ
seg000:22BE		    mov	    bx,	[si+5]
seg000:22C1		    test    bx,	8000h
seg000:22C5		    jnz	    short TRIPOPJ
seg000:22C7		    test    bx,	80h
seg000:22CB		    jz	    short TRIPOPJ
seg000:22CD		    mov	    bx,	4
seg000:22D0		    call    GET_IO_SFT
seg000:22D3		    jb	    short TRIPOPJ
seg000:22D5		    test    word ptr [si+5], 800h
seg000:22DA		    jz	    short LISSTRT2J
seg000:22DC		    mov	    ss:PFLAG, 0
seg000:22E2
seg000:22E2 TRIPOPJ:				    ; CODE XREF: OUTT+37j
seg000:22E2					    ; OUTT+40j	...
seg000:22E2		    jmp	    TRIPOP
seg000:22E5 ; ---------------------------------------------------------------------------
seg000:22E5
seg000:22E5 LISSTRT2J:				    ; CODE XREF: OUTT+55j
seg000:22E5		    jmp	    LISSTRT2
seg000:22E8 ; ---------------------------------------------------------------------------
seg000:22E8
seg000:22E8 CTRLOUT:				    ; CODE XREF: OUTT+2j
seg000:22E8		    cmp	    al,	0Dh
seg000:22EA		    jz	    short ZERPOS
seg000:22EC		    cmp	    al,	8
seg000:22EE		    jz	    short BACKPOS
seg000:22F0		    cmp	    al,	9
seg000:22F2		    jnz	    short OUTCH
seg000:22F4		    mov	    al,	ss:CARPOS
seg000:22F8		    or	    al,	0F8h
seg000:22FA		    neg	    al
seg000:22FA OUTT	    endp
seg000:22FA
seg000:22FC
seg000:22FC ; =============== S	U B R O	U T I N	E =======================================
seg000:22FC
seg000:22FC
seg000:22FC TAB		    proc near		    ; CODE XREF: seg000:20A8p
seg000:22FC		    push    cx
seg000:22FD		    mov	    cl,	al
seg000:22FF		    mov	    ch,	0
seg000:2301		    jcxz    short POPTAB
seg000:2303
seg000:2303 TABLP:				    ; CODE XREF: TAB+Cj
seg000:2303		    mov	    al,	' '
seg000:2305		    call    OUTT
seg000:2308		    loop    TABLP
seg000:230A
seg000:230A POPTAB:				    ; CODE XREF: TAB+5j
seg000:230A		    pop	    cx
seg000:230B		    retn
seg000:230B TAB		    endp
seg000:230B
seg000:230C ; ---------------------------------------------------------------------------
seg000:230C ; START OF FUNCTION	CHUNK FOR OUTT
seg000:230C
seg000:230C ZERPOS:				    ; CODE XREF: OUTT+65j
seg000:230C		    mov	    ss:CARPOS, 0
seg000:2312		    jmp	    OUTCH
seg000:2312 ; END OF FUNCTION CHUNK FOR	OUTT
seg000:2315 ; ---------------------------------------------------------------------------
seg000:2315 ; START OF FUNCTION	CHUNK FOR BUFOUT
seg000:2315
seg000:2315 OUTJ:				    ; CODE XREF: BUFOUT+2j
seg000:2315					    ; BUFOUT+6j
seg000:2315		    jmp	    OUTT
seg000:2315 ; END OF FUNCTION CHUNK FOR	BUFOUT
seg000:2318 ; ---------------------------------------------------------------------------
seg000:2318 ; START OF FUNCTION	CHUNK FOR OUTT
seg000:2318
seg000:2318 BACKPOS:				    ; CODE XREF: OUTT+69j
seg000:2318		    dec	    ss:CARPOS
seg000:231D		    jmp	    OUTCH
seg000:231D ; END OF FUNCTION CHUNK FOR	OUTT
seg000:2320
seg000:2320 ; =============== S	U B R O	U T I N	E =======================================
seg000:2320
seg000:2320
seg000:2320 BUFOUT	    proc near		    ; CODE XREF: seg000:2037p
seg000:2320					    ; seg000:2149p ...
seg000:2320
seg000:2320 ; FUNCTION CHUNK AT	seg000:2315 SIZE 00000003 BYTES
seg000:2320
seg000:2320		    cmp	    al,	' '
seg000:2322		    jnb	    short OUTJ
seg000:2324		    cmp	    al,	9
seg000:2326		    jz	    short OUTJ
seg000:2328		    cmp	    al,	15h
seg000:232A		    jz	    short CTRLU
seg000:232C		    cmp	    al,	14h
seg000:232E		    jz	    short CTRLU
seg000:2330		    push    ax
seg000:2331		    mov	    al,	'^'
seg000:2333		    call    OUTT
seg000:2336		    pop	    ax
seg000:2337		    or	    al,	40h
seg000:2339
seg000:2339 CTRLU:				    ; CODE XREF: BUFOUT+Aj
seg000:2339					    ; BUFOUT+Ej
seg000:2339		    call    OUTT
seg000:233C
seg000:233C BUFOUT_RETN:			    ; CODE XREF: seg000:2346j
seg000:233C		    retn
seg000:233C BUFOUT	    endp
seg000:233C
seg000:233D ; ---------------------------------------------------------------------------
seg000:233D
seg000:233D _$STD_AUX_INPUT:			    ; DATA XREF: seg000:0E06o
seg000:233D		    call    near ptr STATCHK
seg000:2340		    mov	    bx,	3
seg000:2343		    call    GET_IO_SFT
seg000:2346		    jb	    short BUFOUT_RETN
seg000:2348		    jmp	    short TAISTRT
seg000:234A ; ---------------------------------------------------------------------------
seg000:234A
seg000:234A AUXILP:				    ; CODE XREF: seg000:2352j
seg000:234A		    call    SPOOLINT
seg000:234D
seg000:234D TAISTRT:				    ; CODE XREF: seg000:2348j
seg000:234D		    mov	    ah,	1
seg000:234F		    call    IOFUNC
seg000:2352		    jz	    short AUXILP
seg000:2354		    xor	    ah,	ah
seg000:2356		    call    IOFUNC
seg000:2359		    retn
seg000:235A ; ---------------------------------------------------------------------------
seg000:235A
seg000:235A _$STD_AUX_OUTPUT:			    ; DATA XREF: seg000:0E08o
seg000:235A		    push    bx
seg000:235B		    mov	    bx,	3
seg000:235E		    jmp	    short SENDOUT
seg000:2360 ; ---------------------------------------------------------------------------
seg000:2360
seg000:2360 _$STD_PRINTER_OUTPUT:		    ; DATA XREF: seg000:0E0Ao
seg000:2360		    push    bx
seg000:2361		    mov	    bx,	4
seg000:2364
seg000:2364 SENDOUT:				    ; CODE XREF: seg000:235Ej
seg000:2364		    mov	    al,	dl
seg000:2366		    push    ax
seg000:2367		    call    near ptr STATCHK
seg000:236A		    pop	    ax
seg000:236B		    push    ds
seg000:236C		    push    si
seg000:236D ; START OF FUNCTION	CHUNK FOR OUTT
seg000:236D
seg000:236D LISSTRT2:				    ; CODE XREF: OUTT:LISSTRT2Jj
seg000:236D		    call    RAWOUT2
seg000:2370
seg000:2370 TRIPOP:				    ; CODE XREF: OUTT:TRIPOPJj
seg000:2370		    pop	    si
seg000:2371		    pop	    ds
seg000:2372		    pop	    bx
seg000:2373
seg000:2373 SCIS_RETN:				    ; CODE XREF: seg000:2379j
seg000:2373		    retn
seg000:2373 ; END OF FUNCTION CHUNK FOR	OUTT
seg000:2374 ; ---------------------------------------------------------------------------
seg000:2374
seg000:2374 _$STD_CON_INPUT_STATUS:		    ; DATA XREF: seg000:0E16o
seg000:2374		    call    near ptr STATCHK
seg000:2377		    mov	    al,	0
seg000:2379		    jz	    short SCIS_RETN
seg000:237B		    or	    al,	-1
seg000:237D		    retn
seg000:237E ; ---------------------------------------------------------------------------
seg000:237E
seg000:237E _$STD_CON_INPUT_FLUSH:		    ; DATA XREF: seg000:0E18o
seg000:237E		    push    ax
seg000:237F		    push    dx
seg000:2380		    xor	    bx,	bx
seg000:2382		    call    GET_IO_SFT
seg000:2385		    jb	    short BADJFNCON
seg000:2387		    mov	    ah,	4
seg000:2389		    call    IOFUNC
seg000:238C
seg000:238C BADJFNCON:				    ; CODE XREF: seg000:2385j
seg000:238C		    pop	    dx
seg000:238D		    pop	    ax
seg000:238E		    mov	    ah,	al
seg000:2390		    cmp	    al,	1
seg000:2392		    jz	    short REDISPJ
seg000:2394		    cmp	    al,	6
seg000:2396		    jz	    short REDISPJ
seg000:2398		    cmp	    al,	7
seg000:239A		    jz	    short REDISPJ
seg000:239C		    cmp	    al,	8
seg000:239E		    jz	    short REDISPJ
seg000:23A0		    cmp	    al,	0Ah
seg000:23A2		    jz	    short REDISPJ
seg000:23A4		    mov	    al,	0
seg000:23A6		    retn
seg000:23A7 ; ---------------------------------------------------------------------------
seg000:23A7
seg000:23A7 REDISPJ:				    ; CODE XREF: seg000:2392j
seg000:23A7					    ; seg000:2396j ...
seg000:23A7		    cli
seg000:23A8		    jmp	    REDISP
seg000:23AB ; ---------------------------------------------------------------------------
seg000:23AB
seg000:23AB _$GET_FCB_POSITION:			    ; DATA XREF: seg000:0E48o
seg000:23AB		    call    GetExtended
seg000:23AE		    call    GetExtent
seg000:23B1		    mov	    [si+21h], ax
seg000:23B4		    mov	    [si+23h], dl
seg000:23B7		    cmp	    word ptr [si+0Eh], 64
seg000:23BB		    jnb	    short GetFCBBye
seg000:23BD		    mov	    [si+24h], dh
seg000:23C0
seg000:23C0 GetFCBBye:				    ; CODE XREF: seg000:23BBj
seg000:23C0					    ; seg000:GoodPathj
seg000:23C0		    jmp	    NO_OP
seg000:23C3 ; ---------------------------------------------------------------------------
seg000:23C3
seg000:23C3 _$FCB_DELETE:			    ; DATA XREF: seg000:0E26o
seg000:23C3		    mov	    di,	offset OPENBUF
seg000:23C6		    call    TransFCB
seg000:23C9		    jb	    short BadPath
seg000:23CB		    push    ss
seg000:23CC		    pop	    ds
seg000:23CD		    call    DOS_DELETE
seg000:23D0		    jb	    short BadPath
seg000:23D2
seg000:23D2 GoodPath:				    ; CODE XREF: seg000:241Fj
seg000:23D2					    ; seg000:GoodRetj
seg000:23D2		    jmp	    short GetFCBBye
seg000:23D4 ; ---------------------------------------------------------------------------
seg000:23D4
seg000:23D4 BadPath:				    ; CODE XREF: seg000:23C9j
seg000:23D4					    ; seg000:23D0j ...
seg000:23D4		    jmp	    FCB_Ret_Err
seg000:23D7 ; ---------------------------------------------------------------------------
seg000:23D7
seg000:23D7 _$GET_FCB_FILE_LENGTH:		    ; DATA XREF: seg000:0E46o
seg000:23D7		    call    GetExtended
seg000:23DA		    mov	    di,	offset OPENBUF
seg000:23DD		    push    ds
seg000:23DE		    push    si
seg000:23DF		    call    TransFCB
seg000:23E2		    pop	    si
seg000:23E3		    pop	    ds
seg000:23E4		    jb	    short BadPath
seg000:23E6		    push    ds
seg000:23E7		    push    si
seg000:23E8		    push    ss
seg000:23E9		    pop	    ds
seg000:23EA		    call    GET_FILE_INFO
seg000:23ED		    pop	    si
seg000:23EE		    pop	    ds
seg000:23EF		    jb	    short BadPath
seg000:23F1		    mov	    dx,	bx
seg000:23F3		    mov	    ax,	di
seg000:23F5		    mov	    bx,	[si+0Eh]
seg000:23F8		    or	    bx,	bx
seg000:23FA		    jnz	    short GetSize
seg000:23FC		    mov	    bx,	128
seg000:23FF
seg000:23FF GetSize:				    ; CODE XREF: seg000:23FAj
seg000:23FF		    mov	    di,	ax
seg000:2401		    mov	    ax,	dx
seg000:2403		    xor	    dx,	dx
seg000:2405		    div	    bx
seg000:2407		    push    ax
seg000:2408		    mov	    ax,	di
seg000:240A		    div	    bx
seg000:240C		    mov	    cx,	dx
seg000:240E		    pop	    dx
seg000:240F		    jcxz    short LengthStore
seg000:2411		    add	    ax,	1
seg000:2414		    adc	    dx,	0
seg000:2417
seg000:2417 LengthStore:			    ; CODE XREF: seg000:240Fj
seg000:2417		    mov	    [si+21h], ax
seg000:241A		    mov	    [si+23h], dl
seg000:241D		    or	    dh,	dh
seg000:241F		    jz	    short GoodPath
seg000:2421		    mov	    [si+24h], dh
seg000:2424
seg000:2424 GoodRet:				    ; CODE XREF: seg000:2437j
seg000:2424					    ; seg000:248Dj ...
seg000:2424		    jmp	    short GoodPath
seg000:2426 ; ---------------------------------------------------------------------------
seg000:2426
seg000:2426 _$FCB_CLOSE:			    ; DATA XREF: seg000:0E20o
seg000:2426		    xor	    al,	al
seg000:2428		    call    GetExtended
seg000:242B		    jz	    short NoAttr
seg000:242D		    mov	    al,	[si-1]
seg000:2430
seg000:2430 NoAttr:				    ; CODE XREF: seg000:242Bj
seg000:2430		    mov	    byte ptr ss:ATTRIB_4+4, al
seg000:2434		    call    SFTFromFCB
seg000:2437		    jb	    short GoodRet
seg000:2439		    mov	    al,	es:[di+4]
seg000:243D		    xor	    ah,	ah
seg000:243F		    push    ax
seg000:2440		    call    CheckShare
seg000:2443		    jnz	    short NoStash
seg000:2445		    mov	    al,	byte ptr ss:ATTRIB_4+4
seg000:2449		    mov	    es:[di+4], al
seg000:244D
seg000:244D NoStash:				    ; CODE XREF: seg000:2443j
seg000:244D		    mov	    ax,	[si+14h]
seg000:2450		    mov	    es:[di+0Fh], ax
seg000:2454		    mov	    ax,	[si+16h]
seg000:2457		    mov	    es:[di+0Dh], ax
seg000:245B		    mov	    ax,	[si+10h]
seg000:245E		    mov	    es:[di+11h], ax
seg000:2462		    mov	    ax,	[si+12h]
seg000:2465		    mov	    es:[di+13h], ax
seg000:2469		    or	    word ptr es:[di+5],	4000h
seg000:246F		    push    ss
seg000:2470		    pop	    ds
seg000:2471		    call    DOS_CLOSE
seg000:2474		    les	    di,	ds:THISSFT
seg000:2478		    pop	    cx
seg000:2479		    mov	    es:[di+4], cl
seg000:247D		    pushf
seg000:247E		    test    word ptr es:[di], 0FFFFh
seg000:2483		    jnz	    short CloseOK
seg000:2485		    push    ax
seg000:2486		    mov	    al,	'M'
seg000:2488		    call    BlastSFT
seg000:248B		    pop	    ax
seg000:248C
seg000:248C CloseOK:				    ; CODE XREF: seg000:2483j
seg000:248C		    popf
seg000:248D		    jnb	    short GoodRet
seg000:248F		    cmp	    al,	6
seg000:2491		    jz	    short GoodRet
seg000:2493		    mov	    al,	2
seg000:2495
seg000:2495 fcb_close_err:			    ; CODE XREF: seg000:fren90j
seg000:2495		    jmp	    FCB_Ret_Err
seg000:2498 ; ---------------------------------------------------------------------------
seg000:2498
seg000:2498 _$FCB_RENAME:			    ; DATA XREF: seg000:0E2Eo
seg000:2498		    call    GetExtended
seg000:249B		    push    dx
seg000:249C		    mov	    al,	[si]
seg000:249E		    add	    si,	10h
seg000:24A1		    mov	    di,	offset RENBUF
seg000:24A4		    push    word ptr [si]
seg000:24A6		    push    ds
seg000:24A7		    push    si
seg000:24A8		    mov	    [si], al
seg000:24AA		    mov	    dx,	si
seg000:24AC		    call    TransFCB
seg000:24AF		    pop	    si
seg000:24B0		    pop	    ds
seg000:24B1		    pop	    word ptr [si]
seg000:24B3		    pop	    dx
seg000:24B4		    jb	    short fren90
seg000:24B6		    mov	    si,	ss:WFP_START
seg000:24BB		    mov	    ss:REN_WFP,	si
seg000:24C0		    mov	    di,	offset OPENBUF
seg000:24C3		    call    TransFCB
seg000:24C6		    jb	    short fren90
seg000:24C8		    call    DOS_RENAME
seg000:24CB		    jb	    short fren90
seg000:24CD		    jmp	    NO_OP
seg000:24D0 ; ---------------------------------------------------------------------------
seg000:24D0
seg000:24D0 fren90:				    ; CODE XREF: seg000:24B4j
seg000:24D0					    ; seg000:24C6j ...
seg000:24D0		    jmp	    short fcb_close_err
seg000:24D2
seg000:24D2 ; =============== S	U B R O	U T I N	E =======================================
seg000:24D2
seg000:24D2
seg000:24D2 SaveFCBInfo	    proc near		    ; CODE XREF: seg000:29D0p
seg000:24D2					    ; seg000:2ADEp
seg000:24D2		    les	    di,	ss:THISSFT
seg000:24D7		    call    IsSFTNet
seg000:24DA		    jz	    short SaveLocal
seg000:24DC		    mov	    ax,	es:[di+1Dh]
seg000:24E0		    mov	    [si+1Ah], ax
seg000:24E3		    push    es
seg000:24E4		    push    di
seg000:24E5		    les	    di,	es:[di+19h]
seg000:24E9		    mov	    [si+1Ch], di
seg000:24EC		    mov	    word ptr [si+1Eh], es
seg000:24EF		    pop	    di
seg000:24F0		    pop	    es
seg000:24F1		    mov	    bl,	80h
seg000:24F3		    jmp	    short SaveSFN
seg000:24F5 ; ---------------------------------------------------------------------------
seg000:24F5
seg000:24F5 SaveLocal:				    ; CODE XREF: SaveFCBInfo+8j
seg000:24F5		    call    CheckShare
seg000:24F8		    jz	    short SaveNoShare
seg000:24FA		    jmp	    short SaveShare
seg000:24FC ; ---------------------------------------------------------------------------
seg000:24FC		    nop
seg000:24FD
seg000:24FD SaveNoShare:			    ; CODE XREF: SaveFCBInfo+26j
seg000:24FD		    test    word ptr es:[di+5],	80h
seg000:2503		    jnz	    short SaveNoShareDev
seg000:2505		    mov	    ax,	es:[di+1Dh]
seg000:2509		    mov	    [si+1Dh], ax
seg000:250C		    mov	    al,	es:[di+1Fh]
seg000:2510		    mov	    [si+1Fh], al
seg000:2513		    mov	    ax,	es:[di+0Bh]
seg000:2517		    mov	    [si+1Bh], ax
seg000:251A		    mov	    bl,	0
seg000:251C
seg000:251C SetFCBBits:				    ; CODE XREF: SaveFCBInfo+6Aj
seg000:251C		    mov	    ax,	es:[di+5]
seg000:2520		    and	    al,	0C0h
seg000:2522		    or	    al,	es:[di+2]
seg000:2526		    mov	    [si+1Ah], al
seg000:2529		    jmp	    short SaveSFN
seg000:252B ; ---------------------------------------------------------------------------
seg000:252B		    nop
seg000:252C
seg000:252C SaveNoShareDev:			    ; CODE XREF: SaveFCBInfo+31j
seg000:252C		    mov	    ax,	es:[di+7]
seg000:2530		    mov	    [si+1Ah], ax
seg000:2533		    mov	    ax,	es:[di+9]
seg000:2537		    mov	    [si+1Ch], ax
seg000:253A		    mov	    bl,	40h
seg000:253C		    jmp	    short SetFCBBits
seg000:253E ; ---------------------------------------------------------------------------
seg000:253E
seg000:253E SaveShare:				    ; CODE XREF: SaveFCBInfo+28j
seg000:253E		    call    ss:ShSave
seg000:2543
seg000:2543 SaveSFN:				    ; CODE XREF: SaveFCBInfo+21j
seg000:2543					    ; SaveFCBInfo+57j
seg000:2543		    mov	    ax,	es:[di+5]
seg000:2547		    and	    al,	3Fh
seg000:2549		    or	    al,	bl
seg000:254B		    mov	    [si+19h], al
seg000:254E		    lea	    ax,	[di-6]
seg000:2551		    sub	    ax,	word ptr ss:SFTFCB
seg000:2556		    mov	    bl,	53
seg000:2558		    div	    bl
seg000:255A		    mov	    [si+18h], al
seg000:255D		    mov	    ax,	ss:FCBLRU
seg000:2561		    inc	    ax
seg000:2562		    mov	    es:[di+15h], ax
seg000:2566		    jnz	    short SimpleStuff
seg000:2568		    mov	    bx,	15h
seg000:256B		    call    ResetLRU
seg000:256E
seg000:256E SimpleStuff:			    ; CODE XREF: SaveFCBInfo+94j
seg000:256E		    mov	    ss:FCBLRU, ax
seg000:2572		    retn
seg000:2572 SaveFCBInfo	    endp
seg000:2572
seg000:2573
seg000:2573 ; =============== S	U B R O	U T I N	E =======================================
seg000:2573
seg000:2573
seg000:2573 ResetLRU	    proc near		    ; CODE XREF: SaveFCBInfo+99p
seg000:2573					    ; SetOpenAge+Ep
seg000:2573		    mov	    ax,	8000h
seg000:2576		    push    es
seg000:2577		    push    di
seg000:2578		    les	    di,	cs:SFTFCB
seg000:257D		    mov	    cx,	es:[di+4]
seg000:2581		    lea	    di,	[di+6]
seg000:2584
seg000:2584 ovScan:				    ; CODE XREF: ResetLRU+1Cj
seg000:2584		    sub	    es:[bx+di],	ax
seg000:2587		    ja	    short ovLoop
seg000:2589		    mov	    es:[bx+di],	ax
seg000:258C
seg000:258C ovLoop:				    ; CODE XREF: ResetLRU+14j
seg000:258C		    add	    di,	53
seg000:258F		    loop    ovScan
seg000:2591		    pop	    di
seg000:2592		    pop	    es
seg000:2593		    mov	    es:[bx+di],	ax
seg000:2596		    retn
seg000:2596 ResetLRU	    endp
seg000:2596
seg000:2597
seg000:2597 ; =============== S	U B R O	U T I N	E =======================================
seg000:2597
seg000:2597
seg000:2597 SetOpenAge	    proc near		    ; CODE XREF: seg000:2AE1p
seg000:2597		    mov	    ax,	cs:OpenLRU
seg000:259B		    inc	    ax
seg000:259C		    mov	    es:[di+17h], ax
seg000:25A0		    jnz	    short SetDone
seg000:25A2		    mov	    bx,	17h
seg000:25A5		    call    ResetLRU
seg000:25A8
seg000:25A8 SetDone:				    ; CODE XREF: SetOpenAge+9j
seg000:25A8		    mov	    cs:OpenLRU,	ax
seg000:25AC		    retn
seg000:25AC SetOpenAge	    endp
seg000:25AC
seg000:25AD
seg000:25AD ; =============== S	U B R O	U T I N	E =======================================
seg000:25AD
seg000:25AD
seg000:25AD LRUFCB	    proc near		    ; CODE XREF: FCBRegen+28p
seg000:25AD					    ; seg000:2AA5p
seg000:25AD		    call    save_world
seg000:25B0		    mov	    bp,	cs:KEEPCOUNT
seg000:25B5		    xor	    ax,	ax
seg000:25B7
seg000:25B7 lru1:				    ; CODE XREF: LRUFCB+5Cj
seg000:25B7		    cmp	    bp,	0
seg000:25BA		    jz	    short lru75
seg000:25BC		    dec	    bp
seg000:25BD		    mov	    bx,	-1
seg000:25C0		    mov	    si,	bx
seg000:25C2		    les	    di,	cs:SFTFCB
seg000:25C7		    mov	    cx,	es:[di+4]
seg000:25CB		    lea	    di,	[di+6]
seg000:25CE
seg000:25CE lru2:				    ; CODE XREF: LRUFCB+52j
seg000:25CE		    cmp	    word ptr es:[di], 0
seg000:25D2		    jz	    short lru25
seg000:25D4		    cmp	    word ptr es:[di], 0FFFFh
seg000:25D8		    jnz	    short lru3
seg000:25DA
seg000:25DA lru25:				    ; CODE XREF: LRUFCB+25j
seg000:25DA		    mov	    si,	di
seg000:25DC		    jmp	    short lru11
seg000:25DE ; ---------------------------------------------------------------------------
seg000:25DE		    nop
seg000:25DF
seg000:25DF lru3:				    ; CODE XREF: LRUFCB+2Bj
seg000:25DF		    test    word ptr es:[di+5],	8000h
seg000:25E5		    jnz	    short lru35
seg000:25E7		    call    CheckShare
seg000:25EA		    jz	    short lru5
seg000:25EC
seg000:25EC lru35:				    ; CODE XREF: LRUFCB+38j
seg000:25EC		    mov	    dx,	es:[di+17h]
seg000:25F0		    cmp	    dx,	ax
seg000:25F2		    jb	    short lru5
seg000:25F4		    cmp	    dx,	bx
seg000:25F6		    jnb	    short lru5
seg000:25F8		    mov	    bx,	dx
seg000:25FA		    mov	    si,	di
seg000:25FC
seg000:25FC lru5:				    ; CODE XREF: LRUFCB+3Dj
seg000:25FC					    ; LRUFCB+45j ...
seg000:25FC		    add	    di,	53
seg000:25FF		    loop    lru2
seg000:2601		    cmp	    si,	-1
seg000:2604		    jz	    short lru75
seg000:2606		    lea	    ax,	[bx+1]
seg000:2609		    jmp	    short lru1
seg000:260B ; ---------------------------------------------------------------------------
seg000:260B
seg000:260B lru65:				    ; CODE XREF: LRUFCB+99j
seg000:260B		    stc
seg000:260C		    jmp	    short lruDead
seg000:260E ; ---------------------------------------------------------------------------
seg000:260E
seg000:260E lru75:				    ; CODE XREF: LRUFCB+Dj
seg000:260E					    ; LRUFCB+57j
seg000:260E		    mov	    bx,	-1
seg000:2611		    mov	    si,	bx
seg000:2613		    les	    di,	cs:SFTFCB
seg000:2618		    mov	    cx,	es:[di+4]
seg000:261C		    lea	    di,	[di+6]
seg000:261F
seg000:261F lru8:				    ; CODE XREF: LRUFCB+94j
seg000:261F		    test    word ptr es:[di+5],	8000h
seg000:2625		    jnz	    short lru85
seg000:2627		    call    CheckShare
seg000:262A		    jz	    short lru86
seg000:262C
seg000:262C lru85:				    ; CODE XREF: LRUFCB+78j
seg000:262C		    cmp	    es:[di+17h], ax
seg000:2630		    jb	    short lru9
seg000:2632
seg000:2632 lru86:				    ; CODE XREF: LRUFCB+7Dj
seg000:2632		    cmp	    es:[di+15h], bx
seg000:2636		    jnb	    short lru9
seg000:2638		    mov	    si,	di
seg000:263A		    mov	    bx,	es:[di+15h]
seg000:263E
seg000:263E lru9:				    ; CODE XREF: LRUFCB+83j
seg000:263E					    ; LRUFCB+89j
seg000:263E		    add	    di,	53
seg000:2641		    loop    lru8
seg000:2643
seg000:2643 lru10:
seg000:2643		    cmp	    si,	-1
seg000:2646		    jz	    short lru65
seg000:2648
seg000:2648 lru11:				    ; CODE XREF: LRUFCB+2Fj
seg000:2648		    mov	    di,	si
seg000:264A		    mov	    word ptr cs:THISSFT, di
seg000:264F		    mov	    word ptr cs:THISSFT+2, es
seg000:2654		    test    word ptr es:[di+5],	8000h
seg000:265A		    jnz	    short LRUClose
seg000:265C		    call    CheckShare
seg000:265F		    jz	    short LRUDone
seg000:2661
seg000:2661 LRUClose:				    ; CODE XREF: LRUFCB+ADj
seg000:2661					    ; LRUFCB+C3j ...
seg000:2661		    push    ss
seg000:2662		    pop	    ds
seg000:2663		    les	    di,	ds:THISSFT
seg000:2667		    cmp	    word ptr es:[di], 0
seg000:266B		    jz	    short LRUDone
seg000:266D		    call    DOS_CLOSE
seg000:2670		    jnb	    short LRUClose
seg000:2672		    cmp	    al,	6
seg000:2674		    jz	    short LRUClose
seg000:2676		    stc
seg000:2677		    jmp	    short lruDead
seg000:2679 ; ---------------------------------------------------------------------------
seg000:2679
seg000:2679 LRUDone:				    ; CODE XREF: LRUFCB+B2j
seg000:2679					    ; LRUFCB+BEj
seg000:2679		    xor	    al,	al
seg000:267B		    call    BlastSFT
seg000:267E
seg000:267E lruDead:				    ; CODE XREF: LRUFCB+5Fj
seg000:267E					    ; LRUFCB+CAj
seg000:267E		    call    restore_world
seg000:2681		    les	    di,	cs:THISSFT
seg000:2686		    jb	    short LRUFCB_err
seg000:2688		    retn
seg000:2689 ; ---------------------------------------------------------------------------
seg000:2689
seg000:2689 LRUFCB_err:				    ; CODE XREF: LRUFCB+D9j
seg000:2689		    mov	    al,	23h
seg000:268B		    retn
seg000:268B LRUFCB	    endp
seg000:268B
seg000:268C
seg000:268C ; =============== S	U B R O	U T I N	E =======================================
seg000:268C
seg000:268C
seg000:268C FCBRegen	    proc near		    ; CODE XREF: SFTFromFCB+19p
seg000:268C		    mov	    al,	[si+19h]
seg000:268F		    test    al,	80h
seg000:2691		    jz	    short RegenNoSharing
seg000:2693		    call    CheckShare
seg000:2696		    jnz	    short RegenFail
seg000:2698		    mov	    ax,	1100h
seg000:269B		    int	    2Fh		    ; Multiplex	- NETWORK REDIRECTOR - INSTALLATION CHECK
seg000:269B					    ; Return: AL = 00h	not installed, OK to install
seg000:269B					    ; 01h  not installed, not OK to install
seg000:269B					    ; FFh  installed
seg000:269D		    or	    al,	al
seg000:269F		    jz	    short RegenDead
seg000:26A1
seg000:26A1 RegenFail:				    ; CODE XREF: FCBRegen+Aj
seg000:26A1					    ; FCBRegen+26j
seg000:26A1		    mov	    ax,	word ptr cs:USER_IN_AX
seg000:26A5		    cmp	    ah,	10h
seg000:26A8		    jz	    short RegenDead
seg000:26AA		    call    FCBHardErr
seg000:26AD
seg000:26AD RegenDead:				    ; CODE XREF: FCBRegen+13j
seg000:26AD					    ; FCBRegen+1Cj ...
seg000:26AD		    stc
seg000:26AE
seg000:26AE FCBRegen_retn:			    ; CODE XREF: FCBRegen+2Bj
seg000:26AE		    retn
seg000:26AF ; ---------------------------------------------------------------------------
seg000:26AF
seg000:26AF RegenNoSharing:			    ; CODE XREF: FCBRegen+5j
seg000:26AF		    call    CheckShare
seg000:26B2		    jnz	    short RegenFail
seg000:26B4		    call    LRUFCB
seg000:26B7		    jb	    short FCBRegen_retn
seg000:26B9		    mov	    word ptr es:[di+2],	8002h
seg000:26BF		    and	    al,	3Fh
seg000:26C1		    cbw
seg000:26C2		    or	    ax,	4000h
seg000:26C5		    mov	    cl,	[si+1Ah]
seg000:26C8		    mov	    ch,	cl
seg000:26CA		    and	    ch,	0C0h
seg000:26CD		    or	    al,	ch
seg000:26CF		    and	    cl,	0Fh
seg000:26D2		    mov	    es:[di+2], cl
seg000:26D6		    mov	    es:[di+5], ax
seg000:26DA		    mov	    ax,	cs:PROC_ID
seg000:26DE		    mov	    es:[di+31h], ax
seg000:26E2		    push    ds
seg000:26E3		    push    si
seg000:26E4		    push    es
seg000:26E5		    push    di
seg000:26E6		    push    ss
seg000:26E7		    pop	    es
seg000:26E8		    mov	    di,	(offset	NAME1_1+1)
seg000:26EB		    mov	    cx,	8
seg000:26EE		    inc	    si
seg000:26EF
seg000:26EF RegenCopyName:			    ; CODE XREF: FCBRegen+68j
seg000:26EF		    lodsb
seg000:26F0		    call    Ucase
seg000:26F3		    stosb
seg000:26F4		    loop    RegenCopyName
seg000:26F6		    push    ss
seg000:26F7		    pop	    ds
seg000:26F8		    mov	    byte ptr ds:ATTRIB_4+4, 16h
seg000:26FD		    call    DEVNAME
seg000:2700		    pop	    di
seg000:2701		    pop	    es
seg000:2702		    pop	    si
seg000:2703		    pop	    ds
seg000:2704		    jb	    short RegenFileNoSharing
seg000:2706		    mov	    es:[di+5], bh
seg000:270A		    mov	    byte ptr es:[di+4],	0
seg000:270F		    lds	    si,	cs:DEVPT
seg000:2714		    mov	    es:[di+7], si
seg000:2718		    mov	    word ptr es:[di+9],	ds
seg000:271C		    retn
seg000:271D ; ---------------------------------------------------------------------------
seg000:271D
seg000:271D RegenDeadJ:				    ; CODE XREF: FCBRegen+A9j
seg000:271D		    jmp	    short RegenDead
seg000:271F ; ---------------------------------------------------------------------------
seg000:271F
seg000:271F RegenFileNoSharing:			    ; CODE XREF: FCBRegen+78j
seg000:271F		    mov	    ax,	es:[di+5]
seg000:2723		    and	    ax,	3Fh
seg000:2726		    push    ds
seg000:2727		    push    si
seg000:2728		    call    Find_DPB
seg000:272B		    mov	    es:[di+7], si
seg000:272F		    mov	    word ptr es:[di+9],	ds
seg000:2733		    pop	    si
seg000:2734		    pop	    ds
seg000:2735		    jb	    short RegenDeadJ
seg000:2737		    mov	    ax,	[si+1Dh]
seg000:273A		    mov	    es:[di+1Dh], ax
seg000:273E		    mov	    ax,	[si+1Bh]
seg000:2741		    mov	    es:[di+0Bh], ax
seg000:2745		    mov	    es:[di+1Bh], ax
seg000:2749		    mov	    al,	[si+1Fh]
seg000:274C		    mov	    es:[di+1Fh], al
seg000:2750		    inc	    word ptr es:[di]
seg000:2753		    lea	    si,	[si+1]
seg000:2756		    lea	    di,	[di+20h]
seg000:2759		    mov	    cx,	11
seg000:275C
seg000:275C RegenCopyName2:			    ; CODE XREF: FCBRegen+D5j
seg000:275C		    lodsb
seg000:275D		    call    Ucase
seg000:2760		    stosb
seg000:2761		    loop    RegenCopyName2
seg000:2763		    clc
seg000:2764		    retn
seg000:2764 FCBRegen	    endp
seg000:2764
seg000:2765
seg000:2765 ; =============== S	U B R O	U T I N	E =======================================
seg000:2765
seg000:2765
seg000:2765 BlastSFT	    proc near		    ; CODE XREF: seg000:2488p
seg000:2765					    ; LRUFCB+CEp ...
seg000:2765		    push    di
seg000:2766		    mov	    cx,	53
seg000:2769		    rep	stosb
seg000:276B		    pop	    di
seg000:276C		    mov	    word ptr es:[di], 0
seg000:2771		    mov	    word ptr es:[di+15h], 0
seg000:2777		    mov	    word ptr es:[di+17h], -1
seg000:277D
seg000:277D BlastSFT_retn:			    ; CODE XREF: CheckFCB+4Dj
seg000:277D		    retn
seg000:277D BlastSFT	    endp
seg000:277D
seg000:277E
seg000:277E ; =============== S	U B R O	U T I N	E =======================================
seg000:277E
seg000:277E
seg000:277E CheckFCB	    proc near		    ; CODE XREF: SFTFromFCB+5p
seg000:277E					    ; seg000:2B2Ap
seg000:277E		    les	    di,	cs:SFTFCB
seg000:2783		    cmp	    es:[di+4], al
seg000:2787		    jb	    short BadSFT
seg000:2789		    mov	    bl,	53
seg000:278B		    mul	    bl
seg000:278D		    lea	    di,	[di+6]
seg000:2790		    add	    di,	ax
seg000:2792		    mov	    ax,	cs:PROC_ID
seg000:2796		    cmp	    es:[di+31h], ax
seg000:279A		    jnz	    short BadSFT
seg000:279C		    cmp	    word ptr es:[di], 0
seg000:27A0		    jz	    short BadSFT
seg000:27A2		    mov	    al,	[si+19h]
seg000:27A5		    test    al,	80h
seg000:27A7		    jz	    short CheckNoShare
seg000:27A9		    push    ax
seg000:27AA		    and	    al,	0C0h
seg000:27AC		    cmp	    al,	0C0h
seg000:27AE		    pop	    ax
seg000:27AF		    jnz	    short CheckNet
seg000:27B1		    call    cs:ShChk
seg000:27B6		    jb	    short BadSFT
seg000:27B8		    jmp	    short CheckD
seg000:27BA ; ---------------------------------------------------------------------------
seg000:27BA
seg000:27BA CheckFirClus:			    ; CODE XREF: CheckFCB+AEj
seg000:27BA		    cmp	    bx,	es:[di+0Bh]
seg000:27BE		    jnz	    short BadSFT
seg000:27C0
seg000:27C0 CheckD:				    ; CODE XREF: CheckFCB+3Aj
seg000:27C0					    ; CheckFCB+C2j
seg000:27C0		    and	    al,	3Fh
seg000:27C2		    mov	    ah,	es:[di+5]
seg000:27C6		    and	    ah,	3Fh
seg000:27C9		    cmp	    ah,	al
seg000:27CB		    jz	    short BlastSFT_retn
seg000:27CD
seg000:27CD BadSFT:				    ; CODE XREF: CheckFCB+9j
seg000:27CD					    ; CheckFCB+1Cj ...
seg000:27CD		    stc
seg000:27CE		    retn
seg000:27CF ; ---------------------------------------------------------------------------
seg000:27CF
seg000:27CF CheckNet:				    ; CODE XREF: CheckFCB+31j
seg000:27CF		    mov	    ax,	[si+1Ah]
seg000:27D2		    cmp	    ax,	es:[di+1Dh]
seg000:27D6		    jnz	    short BadSFT
seg000:27D8		    mov	    ax,	[si+1Ch]
seg000:27DB		    cmp	    ax,	es:[di+19h]
seg000:27DF		    jnz	    short BadSFT
seg000:27E1		    mov	    ax,	[si+1Eh]
seg000:27E4		    cmp	    ax,	es:[di+1Bh]
seg000:27E8		    jnz	    short BadSFT
seg000:27EA
seg000:27EA CheckNet_retn:			    ; CODE XREF: SFTFromFCB+23j
seg000:27EA		    retn
seg000:27EB ; ---------------------------------------------------------------------------
seg000:27EB
seg000:27EB CheckNoShare:			    ; CODE XREF: CheckFCB+29j
seg000:27EB		    test    al,	40h
seg000:27ED		    jnz	    short CheckNoShareDev
seg000:27EF		    mov	    bx,	[si+1Dh]
seg000:27F2		    cmp	    bx,	es:[di+1Dh]
seg000:27F6		    jnz	    short BadSFT
seg000:27F8		    mov	    bl,	[si+1Fh]
seg000:27FB		    cmp	    bl,	es:[di+1Fh]
seg000:27FF		    jnz	    short BadSFT
seg000:2801		    mov	    bl,	[si+1Ah]
seg000:2804		    mov	    bh,	es:[di+5]
seg000:2808		    xor	    bh,	bl
seg000:280A		    and	    bh,	0C0h
seg000:280D		    jnz	    short BadSFT
seg000:280F		    xor	    bl,	es:[di+2]
seg000:2813		    and	    bl,	0Fh
seg000:2816		    jnz	    short BadSFT
seg000:2818		    push    di
seg000:2819		    push    si
seg000:281A		    lea	    di,	[di+20h]
seg000:281D		    lea	    si,	[si+1]
seg000:2820		    mov	    cx,	0Bh
seg000:2823		    repe cmpsb
seg000:2825		    pop	    si
seg000:2826		    pop	    di
seg000:2827		    jnz	    short BadSFT
seg000:2829		    mov	    bx,	[si+1Bh]
seg000:282C		    jmp	    short CheckFirClus
seg000:282E ; ---------------------------------------------------------------------------
seg000:282E
seg000:282E CheckNoShareDev:			    ; CODE XREF: CheckFCB+6Fj
seg000:282E		    mov	    bx,	[si+1Ah]
seg000:2831		    cmp	    bx,	es:[di+7]
seg000:2835		    jnz	    short BadSFT
seg000:2837		    mov	    bx,	[si+1Ch]
seg000:283A		    cmp	    bx,	es:[di+9]
seg000:283E		    jnz	    short BadSFT
seg000:2840		    jmp	    CheckD
seg000:2840 CheckFCB	    endp
seg000:2840
seg000:2843
seg000:2843 ; =============== S	U B R O	U T I N	E =======================================
seg000:2843
seg000:2843
seg000:2843 SFTFromFCB	    proc near		    ; CODE XREF: seg000:2434p
seg000:2843					    ; seg000:DoGetExtp
seg000:2843		    push    ax
seg000:2844		    push    bx
seg000:2845		    mov	    al,	[si+18h]
seg000:2848		    call    CheckFCB
seg000:284B		    pop	    bx
seg000:284C		    pop	    ax
seg000:284D		    mov	    word ptr cs:THISSFT, di
seg000:2852		    mov	    word ptr cs:THISSFT+2, es
seg000:2857		    jnb	    short SetSFT
seg000:2859		    call    save_world
seg000:285C		    call    FCBRegen
seg000:285F		    call    restore_world
seg000:2862		    mov	    ax,	cs:EXTERR
seg000:2866		    jb	    short CheckNet_retn
seg000:2868
seg000:2868 SetSFT:				    ; CODE XREF: SFTFromFCB+14j
seg000:2868		    les	    di,	cs:THISSFT
seg000:286D		    push    cs:PROC_ID
seg000:2872		    pop	    word ptr es:[di+31h]
seg000:2876		    retn
seg000:2876 SFTFromFCB	    endp
seg000:2876
seg000:2877
seg000:2877 ; =============== S	U B R O	U T I N	E =======================================
seg000:2877
seg000:2877
seg000:2877 FCBHardErr	    proc near		    ; CODE XREF: FCBRegen+1Ep
seg000:2877					    ; seg000:2AD5p
seg000:2877		    mov	    ax,	23h
seg000:287A		    mov	    cs:ALLOWED,	8
seg000:2880		    les	    bp,	cs:THISDPB
seg000:2885		    mov	    di,	1
seg000:2888		    mov	    cx,	di
seg000:288A		    mov	    dx,	es:[bp+0Bh]
seg000:288E		    call    HARDERR
seg000:2891		    stc
seg000:2892		    retn
seg000:2892 FCBHardErr	    endp
seg000:2892
seg000:2893
seg000:2893 ; =============== S	U B R O	U T I N	E =======================================
seg000:2893
seg000:2893
seg000:2893 GetRR	    proc near		    ; CODE XREF: seg000:2914p
seg000:2893		    mov	    ax,	[si+21h]
seg000:2896		    mov	    dx,	[si+23h]
seg000:2899		    cmp	    bx,	64
seg000:289C		    jb	    short GetRRBye
seg000:289E		    xor	    dh,	dh
seg000:28A0
seg000:28A0 GetRRBye:				    ; CODE XREF: GetRR+9j
seg000:28A0		    retn
seg000:28A0 GetRR	    endp
seg000:28A0
seg000:28A1
seg000:28A1 ; =============== S	U B R O	U T I N	E =======================================
seg000:28A1
seg000:28A1
seg000:28A1 GetExtent	    proc near		    ; CODE XREF: seg000:23AEp
seg000:28A1					    ; seg000:2905p
seg000:28A1		    mov	    al,	[si+20h]
seg000:28A4		    mov	    dx,	[si+0Ch]
seg000:28A7		    shl	    al,	1
seg000:28A9		    shr	    dx,	1
seg000:28AB		    rcr	    al,	1
seg000:28AD		    mov	    ah,	dl
seg000:28AF		    mov	    dl,	dh
seg000:28B1		    xor	    dh,	dh
seg000:28B3		    retn
seg000:28B3 GetExtent	    endp
seg000:28B3
seg000:28B4
seg000:28B4 ; =============== S	U B R O	U T I N	E =======================================
seg000:28B4
seg000:28B4
seg000:28B4 SetExtent	    proc near		    ; CODE XREF: seg000:291Dp
seg000:28B4					    ; seg000:DoSetExtp
seg000:28B4		    push    ax
seg000:28B5		    push    dx
seg000:28B6		    mov	    cx,	ax
seg000:28B8		    and	    al,	7Fh
seg000:28BA		    mov	    [si+20h], al
seg000:28BD		    and	    cl,	80h
seg000:28C0		    shl	    cx,	1
seg000:28C2		    rcl	    dx,	1
seg000:28C4		    mov	    al,	ch
seg000:28C6		    mov	    ah,	dl
seg000:28C8		    mov	    [si+0Ch], ax
seg000:28CB		    pop	    dx
seg000:28CC		    pop	    ax
seg000:28CD		    retn
seg000:28CD SetExtent	    endp
seg000:28CD
seg000:28CE
seg000:28CE ; =============== S	U B R O	U T I N	E =======================================
seg000:28CE
seg000:28CE
seg000:28CE GetExtended	    proc near		    ; CODE XREF: seg000:_$GET_FCB_POSITIONp
seg000:28CE					    ; seg000:_$GET_FCB_FILE_LENGTHp ...
seg000:28CE		    mov	    si,	dx
seg000:28D0		    cmp	    byte ptr [si], -1
seg000:28D3		    jnz	    short GetBye
seg000:28D5		    add	    si,	7
seg000:28D8
seg000:28D8 GetBye:				    ; CODE XREF: GetExtended+5j
seg000:28D8		    cmp	    si,	dx
seg000:28DA
seg000:28DA getextd_retn:			    ; CODE XREF: GetRecSize+5j
seg000:28DA		    retn
seg000:28DA GetExtended	    endp
seg000:28DA
seg000:28DB
seg000:28DB ; =============== S	U B R O	U T I N	E =======================================
seg000:28DB
seg000:28DB
seg000:28DB GetRecSize	    proc near		    ; CODE XREF: seg000:2908p
seg000:28DB		    mov	    bx,	[si+0Eh]
seg000:28DE		    or	    bx,	bx
seg000:28E0		    jnz	    short getextd_retn
seg000:28E2		    mov	    bx,	128
seg000:28E5		    mov	    [si+0Eh], bx
seg000:28E8		    retn
seg000:28E8 GetRecSize	    endp
seg000:28E8
seg000:28E9 ; ---------------------------------------------------------------------------
seg000:28E9
seg000:28E9 FCBIO:				    ; CODE XREF: seg000:2B6Cj
seg000:28E9					    ; seg000:2B71j ...
seg000:28E9		    push    bp
seg000:28EA		    mov	    bp,	sp
seg000:28EC		    sub	    sp,	20
seg000:28EF		    mov	    [bp-20], al
seg000:28F2		    mov	    byte ptr [bp-1], 0
seg000:28F6		    call    GetExtended
seg000:28F9		    test    byte ptr [bp-20], 8
seg000:28FD		    jnz	    short GetPos
seg000:28FF		    mov	    cx,	1
seg000:2902
seg000:2902 GetPos:				    ; CODE XREF: seg000:28FDj
seg000:2902		    mov	    [bp-3], cx
seg000:2905		    call    GetExtent
seg000:2908		    call    GetRecSize
seg000:290B		    mov	    [bp-9], bx
seg000:290E		    test    byte ptr [bp-20], 2
seg000:2912		    jz	    short GetRec
seg000:2914		    call    GetRR
seg000:2917
seg000:2917 GetRec:				    ; CODE XREF: seg000:2912j
seg000:2917		    mov	    [bp-7], ax
seg000:291A		    mov	    [bp-5], dx
seg000:291D		    call    SetExtent
seg000:2920		    mov	    ax,	[bp-5]
seg000:2923		    mul	    bx
seg000:2925		    mov	    di,	ax
seg000:2927		    mov	    ax,	[bp-7]
seg000:292A		    mul	    bx
seg000:292C		    add	    dx,	di
seg000:292E		    mov	    [bp-13], ax
seg000:2931		    mov	    [bp-11], dx
seg000:2934		    mov	    ax,	[bp-3]
seg000:2937		    mul	    bx
seg000:2939		    mov	    [bp-15], ax
seg000:293C		    add	    ax,	ss:DMAADD
seg000:2941		    adc	    dx,	0
seg000:2944		    jz	    short DoOper
seg000:2946		    mov	    byte ptr [bp-1], 2
seg000:294A		    mov	    ax,	ss:DMAADD
seg000:294E		    neg	    ax
seg000:2950		    jnz	    short DoDiv
seg000:2952		    dec	    ax
seg000:2953
seg000:2953 DoDiv:				    ; CODE XREF: seg000:2950j
seg000:2953		    xor	    dx,	dx
seg000:2955		    div	    bx
seg000:2957		    mov	    [bp-3], ax
seg000:295A		    mul	    bx
seg000:295C		    mov	    [bp-15], ax
seg000:295F
seg000:295F DoOper:				    ; CODE XREF: seg000:2944j
seg000:295F		    xor	    bx,	bx
seg000:2961		    mov	    [bp-17], bx
seg000:2964		    cmp	    [bp-15], bx
seg000:2967		    jnz	    short DoGetExt
seg000:2969		    test    byte ptr [bp-1], 2
seg000:296D		    jnz	    short SkipOp
seg000:296F
seg000:296F DoGetExt:				    ; CODE XREF: seg000:2967j
seg000:296F		    call    SFTFromFCB
seg000:2972		    jnb	    short ContinueOp
seg000:2974
seg000:2974 FCBDeath:				    ; CODE XREF: seg000:29B9j
seg000:2974		    call    FCB_Ret_Err
seg000:2977		    mov	    word ptr [bp-19], 0
seg000:297C		    mov	    byte ptr [bp-1], 1
seg000:2980		    jmp	    FCBSave
seg000:2983 ; ---------------------------------------------------------------------------
seg000:2983
seg000:2983 ContinueOp:				    ; CODE XREF: seg000:2972j
seg000:2983		    mov	    ax,	[si+10h]
seg000:2986		    mov	    es:[di+11h], ax
seg000:298A		    mov	    ax,	[si+12h]
seg000:298D		    mov	    es:[di+13h], ax
seg000:2991		    mov	    ax,	[bp-13]
seg000:2994		    mov	    dx,	[bp-11]
seg000:2997		    mov	    es:[di+15h], ax
seg000:299B		    xchg    dx,	es:[di+17h]
seg000:299F		    push    dx
seg000:29A0		    mov	    cx,	[bp-15]
seg000:29A3		    mov	    di,	offset DOS_READ
seg000:29A6		    test    byte ptr [bp-20], 4
seg000:29AA		    jnz	    short DoContext
seg000:29AC		    mov	    di,	offset DOS_WRITE
seg000:29AF
seg000:29AF DoContext:				    ; CODE XREF: seg000:29AAj
seg000:29AF		    push    bp
seg000:29B0		    push    ds
seg000:29B1		    push    si
seg000:29B2		    push    ss
seg000:29B3		    pop	    ds
seg000:29B4		    call    di ; DOS_WRITE
seg000:29B6		    pop	    si
seg000:29B7		    pop	    ds
seg000:29B8		    pop	    bp
seg000:29B9		    jb	    short FCBDeath
seg000:29BB		    cmp	    ss:DISK_FULL, 0
seg000:29C1		    jz	    short NODSKFULL
seg000:29C3		    mov	    ss:DISK_FULL, 0
seg000:29C9		    mov	    byte ptr [bp-1], 1
seg000:29CD
seg000:29CD NODSKFULL:				    ; CODE XREF: seg000:29C1j
seg000:29CD		    mov	    [bp-17], cx
seg000:29D0		    call    SaveFCBInfo
seg000:29D3		    pop	    word ptr es:[di+17h]
seg000:29D7		    mov	    ax,	es:[di+11h]
seg000:29DB		    mov	    [si+10h], ax
seg000:29DE		    mov	    ax,	es:[di+13h]
seg000:29E2		    mov	    [si+12h], ax
seg000:29E5
seg000:29E5 SkipOp:				    ; CODE XREF: seg000:296Dj
seg000:29E5		    mov	    ax,	[bp-17]
seg000:29E8		    xor	    dx,	dx
seg000:29EA		    div	    word ptr [bp-9]
seg000:29ED		    mov	    [bp-19], ax
seg000:29F0		    add	    [bp-7], ax
seg000:29F3		    adc	    word ptr [bp-5], 0
seg000:29F7		    cmp	    ax,	[bp-3]
seg000:29FA		    jz	    short TryBlank
seg000:29FC		    test    byte ptr [bp-20], 4
seg000:2A00		    jnz	    short SetEOF
seg000:2A02		    test    word ptr es:[di+5],	80h
seg000:2A08		    jnz	    short TryBlank
seg000:2A0A
seg000:2A0A SetEOF:				    ; CODE XREF: seg000:2A00j
seg000:2A0A		    mov	    byte ptr [bp-1], 1
seg000:2A0E
seg000:2A0E TryBlank:				    ; CODE XREF: seg000:29FAj
seg000:2A0E					    ; seg000:2A08j
seg000:2A0E		    or	    dx,	dx
seg000:2A10		    jz	    short SetExt
seg000:2A12		    add	    word ptr [bp-7], 1
seg000:2A16		    adc	    word ptr [bp-5], 0
seg000:2A1A		    test    byte ptr [bp-20], 4
seg000:2A1E		    jz	    short SetExt
seg000:2A20		    inc	    word ptr [bp-19]
seg000:2A23		    mov	    byte ptr [bp-1], 3
seg000:2A27		    mov	    cx,	[bp-9]
seg000:2A2A		    sub	    cx,	dx
seg000:2A2C		    xor	    al,	al
seg000:2A2E		    les	    di,	dword ptr ss:DMAADD
seg000:2A33		    add	    di,	[bp-17]
seg000:2A36		    rep	stosb
seg000:2A38
seg000:2A38 SetExt:				    ; CODE XREF: seg000:2A10j
seg000:2A38					    ; seg000:2A1Ej
seg000:2A38		    mov	    dx,	[bp-5]
seg000:2A3B		    mov	    ax,	[bp-7]
seg000:2A3E		    test    byte ptr [bp-20], 2
seg000:2A42		    jz	    short DoSetExt
seg000:2A44		    test    byte ptr [bp-20], 8
seg000:2A48		    jz	    short TrySetRR
seg000:2A4A
seg000:2A4A DoSetExt:				    ; CODE XREF: seg000:2A42j
seg000:2A4A		    call    SetExtent
seg000:2A4D
seg000:2A4D TrySetRR:				    ; CODE XREF: seg000:2A48j
seg000:2A4D		    test    byte ptr [bp-20], 8
seg000:2A51		    jz	    short TryReturn
seg000:2A53		    mov	    [si+21h], ax
seg000:2A56		    mov	    [si+23h], dl
seg000:2A59		    cmp	    word ptr [si+0Eh], 64
seg000:2A5D		    jnb	    short TryReturn
seg000:2A5F		    mov	    [si+24h], dh
seg000:2A62
seg000:2A62 TryReturn:				    ; CODE XREF: seg000:2A51j
seg000:2A62					    ; seg000:2A5Dj
seg000:2A62		    test    byte ptr [bp-20], 4
seg000:2A66		    jnz	    short FCBSave
seg000:2A68		    push    ds
seg000:2A69		    call    DATE16
seg000:2A6C		    pop	    ds
seg000:2A6D		    mov	    [si+14h], ax
seg000:2A70		    mov	    [si+16h], dx
seg000:2A73
seg000:2A73 FCBSave:				    ; CODE XREF: seg000:2980j
seg000:2A73					    ; seg000:2A66j
seg000:2A73		    test    byte ptr [bp-20], 8
seg000:2A77		    jz	    short DoReturn
seg000:2A79		    mov	    cx,	[bp-19]
seg000:2A7C		    call    Get_User_Stack
seg000:2A7F		    mov	    [si+4], cx
seg000:2A82
seg000:2A82 DoReturn:				    ; CODE XREF: seg000:2A77j
seg000:2A82		    mov	    al,	[bp-1]
seg000:2A85		    mov	    sp,	bp
seg000:2A87		    pop	    bp
seg000:2A88		    retn
seg000:2A89 ; ---------------------------------------------------------------------------
seg000:2A89
seg000:2A89 _$FCB_OPEN:				    ; DATA XREF: seg000:0E1Eo
seg000:2A89		    mov	    ax,	2
seg000:2A8C		    mov	    cx,	offset DOS_OPEN
seg000:2A8F
seg000:2A8F DoAccess:				    ; CODE XREF: seg000:DoAccessJj
seg000:2A8F		    push    ds
seg000:2A90		    push    dx
seg000:2A91		    push    cx
seg000:2A92		    push    ax
seg000:2A93		    mov	    di,	offset OPENBUF
seg000:2A96		    call    TransFCB
seg000:2A99		    pop	    ax
seg000:2A9A		    pop	    cx
seg000:2A9B		    pop	    dx
seg000:2A9C		    pop	    ds
seg000:2A9D		    jnb	    short FindFCB
seg000:2A9F
seg000:2A9F FCBOpenErr:				    ; CODE XREF: seg000:DeadFCBj
seg000:2A9F		    jmp	    FCB_Ret_Err
seg000:2AA2 ; ---------------------------------------------------------------------------
seg000:2AA2
seg000:2AA2 FindFCB:				    ; CODE XREF: seg000:2A9Dj
seg000:2AA2		    call    GetExtended
seg000:2AA5		    call    LRUFCB
seg000:2AA8		    jb	    short HardMessage
seg000:2AAA		    mov	    word ptr es:[di+2],	8000h
seg000:2AB0		    push    ds
seg000:2AB1		    push    si
seg000:2AB2		    push    bx
seg000:2AB3		    mov	    si,	cx
seg000:2AB5		    push    ss
seg000:2AB6		    pop	    ds
seg000:2AB7		    call    si
seg000:2AB9		    pop	    bx
seg000:2ABA		    pop	    si
seg000:2ABB		    pop	    ds
seg000:2ABC		    les	    di,	ss:THISSFT
seg000:2AC1		    jnb	    short FCBOK
seg000:2AC3		    push    ax
seg000:2AC4		    mov	    al,	'R'
seg000:2AC6		    call    BlastSFT
seg000:2AC9		    pop	    ax
seg000:2ACA		    cmp	    ax,	4
seg000:2ACD		    jz	    short HardMessage
seg000:2ACF		    cmp	    ax,	24h
seg000:2AD2		    jnz	    short DeadFCB
seg000:2AD4
seg000:2AD4 HardMessage:			    ; CODE XREF: seg000:2AA8j
seg000:2AD4					    ; seg000:2ACDj
seg000:2AD4		    push    ax
seg000:2AD5		    call    FCBHardErr
seg000:2AD8		    pop	    ax
seg000:2AD9
seg000:2AD9 DeadFCB:				    ; CODE XREF: seg000:2AD2j
seg000:2AD9		    jmp	    short FCBOpenErr
seg000:2ADB ; ---------------------------------------------------------------------------
seg000:2ADB
seg000:2ADB FCBOK:				    ; CODE XREF: seg000:2AC1j
seg000:2ADB		    inc	    word ptr es:[di]
seg000:2ADE		    call    SaveFCBInfo
seg000:2AE1		    call    SetOpenAge
seg000:2AE4		    test    word ptr es:[di+5],	80h
seg000:2AEA		    jnz	    short FCBNoDrive
seg000:2AEC		    mov	    al,	[si]
seg000:2AEE		    call    GetThisDrv
seg000:2AF1		    inc	    al
seg000:2AF3		    mov	    [si], al
seg000:2AF5
seg000:2AF5 FCBNoDrive:				    ; CODE XREF: seg000:2AEAj
seg000:2AF5		    mov	    word ptr [si+0Eh], 128
seg000:2AFA		    mov	    ax,	es:[di+0Dh]
seg000:2AFE		    mov	    [si+16h], ax
seg000:2B01		    mov	    ax,	es:[di+0Fh]
seg000:2B05		    mov	    [si+14h], ax
seg000:2B08		    mov	    ax,	es:[di+11h]
seg000:2B0C		    mov	    [si+10h], ax
seg000:2B0F		    mov	    ax,	es:[di+13h]
seg000:2B13		    mov	    [si+12h], ax
seg000:2B16		    xor	    ax,	ax
seg000:2B18		    mov	    [si+0Ch], ax
seg000:2B1B		    les	    di,	ss:SFTFCB
seg000:2B20		    mov	    ah,	es:[di+4]
seg000:2B24
seg000:2B24 OpenScan:				    ; CODE XREF: seg000:2B34j
seg000:2B24		    cmp	    al,	[si+18h]
seg000:2B27		    jz	    short SkipCheck
seg000:2B29		    push    ax
seg000:2B2A		    call    CheckFCB
seg000:2B2D		    pop	    ax
seg000:2B2E		    jnb	    short OpenFound
seg000:2B30
seg000:2B30 SkipCheck:				    ; CODE XREF: seg000:2B27j
seg000:2B30		    inc	    al
seg000:2B32		    cmp	    al,	ah
seg000:2B34		    jnz	    short OpenScan
seg000:2B36
seg000:2B36 OpenDone:				    ; CODE XREF: seg000:2B58j
seg000:2B36		    xor	    al,	al
seg000:2B38		    retn
seg000:2B39 ; ---------------------------------------------------------------------------
seg000:2B39
seg000:2B39 OpenFound:				    ; CODE XREF: seg000:2B2Ej
seg000:2B39		    mov	    [si+18h], al
seg000:2B3C		    inc	    word ptr es:[di]
seg000:2B3F		    mov	    ax,	ss:FCBLRU
seg000:2B43		    mov	    es:[di+15h], ax
seg000:2B47		    push    ss
seg000:2B48		    pop	    ds
seg000:2B49		    les	    di,	ds:THISSFT
seg000:2B4D		    dec	    word ptr es:[di]
seg000:2B50		    call    ShareEnd
seg000:2B53		    mov	    al,	'C'
seg000:2B55		    call    BlastSFT
seg000:2B58		    jmp	    short OpenDone
seg000:2B5A ; ---------------------------------------------------------------------------
seg000:2B5A
seg000:2B5A _$FCB_CREATE:			    ; DATA XREF: seg000:0E2Co
seg000:2B5A		    mov	    cx,	offset DOS_CREATE
seg000:2B5D		    xor	    ax,	ax
seg000:2B5F		    call    GetExtended
seg000:2B62		    jz	    short DoAccessJ
seg000:2B64		    mov	    al,	[si-1]
seg000:2B67
seg000:2B67 DoAccessJ:				    ; CODE XREF: seg000:2B62j
seg000:2B67		    jmp	    DoAccess
seg000:2B6A ; ---------------------------------------------------------------------------
seg000:2B6A
seg000:2B6A _$FCB_RANDOM_WRITE_BLOCK:		    ; DATA XREF: seg000:0E50o
seg000:2B6A		    mov	    al,	0Ah
seg000:2B6C		    jmp	    FCBIO
seg000:2B6F ; ---------------------------------------------------------------------------
seg000:2B6F
seg000:2B6F _$FCB_RANDOM_READ_BLOCK:		    ; DATA XREF: seg000:0E4Eo
seg000:2B6F		    mov	    al,	0Eh
seg000:2B71		    jmp	    FCBIO
seg000:2B74 ; ---------------------------------------------------------------------------
seg000:2B74
seg000:2B74 _$FCB_SEQ_READ:			    ; DATA XREF: seg000:0E28o
seg000:2B74		    mov	    al,	4
seg000:2B76		    jmp	    FCBIO
seg000:2B79 ; ---------------------------------------------------------------------------
seg000:2B79
seg000:2B79 _$FCB_SEQ_WRITE:			    ; DATA XREF: seg000:0E2Ao
seg000:2B79		    mov	    al,	0
seg000:2B7B		    jmp	    FCBIO
seg000:2B7E ; ---------------------------------------------------------------------------
seg000:2B7E
seg000:2B7E _$FCB_RANDOM_READ:			    ; DATA XREF: seg000:0E42o
seg000:2B7E		    mov	    al,	6
seg000:2B80		    jmp	    FCBIO
seg000:2B83 ; ---------------------------------------------------------------------------
seg000:2B83
seg000:2B83 _$FCB_RANDOM_WRITE:			    ; DATA XREF: seg000:0E44o
seg000:2B83		    mov	    al,	2
seg000:2B85		    jmp	    FCBIO
seg000:2B88 ; ---------------------------------------------------------------------------
seg000:2B88
seg000:2B88 _$DIR_SEARCH_FIRST:			    ; DATA XREF: seg000:0E22o
seg000:2B88		    mov	    word ptr ss:THISFCB, dx
seg000:2B8D		    mov	    word ptr ss:THISFCB+2, ds
seg000:2B92		    mov	    si,	dx
seg000:2B94		    cmp	    byte ptr [si], 0FFh
seg000:2B97		    jnz	    short NORMFCB4
seg000:2B99		    add	    si,	7
seg000:2B9C
seg000:2B9C NORMFCB4:				    ; CODE XREF: seg000:2B97j
seg000:2B9C		    push    word ptr [si]
seg000:2B9E		    push    ss
seg000:2B9F		    pop	    es
seg000:2BA0		    mov	    di,	offset OPENBUF
seg000:2BA3		    call    TransFCB
seg000:2BA6		    jnb	    short SearchIt
seg000:2BA8		    pop	    bx
seg000:2BA9
seg000:2BA9 DIR_SF_retn:			    ; CODE XREF: seg000:2BCEj
seg000:2BA9		    jmp	    FCB_Ret_Err
seg000:2BAC ; ---------------------------------------------------------------------------
seg000:2BAC
seg000:2BAC SearchIt:				    ; CODE XREF: seg000:2BA6j
seg000:2BAC		    push    ss
seg000:2BAD		    pop	    ds
seg000:2BAE		    push    ds:DMAADD
seg000:2BB2		    push    ds:DMAADD_2
seg000:2BB6		    mov	    ds:DMAADD, offset SEARCHBUF
seg000:2BBC		    mov	    ds:DMAADD_2, ds
seg000:2BC0		    call    DOS_SEARCH_FIRST
seg000:2BC3		    pop	    ds:DMAADD_2
seg000:2BC7		    pop	    ds:DMAADD
seg000:2BCB		    jnb	    short SearchSet
seg000:2BCD		    pop	    bx
seg000:2BCE		    jmp	    short DIR_SF_retn
seg000:2BD0 ; ---------------------------------------------------------------------------
seg000:2BD0
seg000:2BD0 SearchSet:				    ; CODE XREF: seg000:2BCBj
seg000:2BD0					    ; seg000:2C77j
seg000:2BD0		    mov	    si,	offset SEARCHBUF
seg000:2BD3		    les	    di,	ds:THISFCB
seg000:2BD7		    test    byte ptr ds:ExtFCB,	0FFh
seg000:2BDC		    jz	    short NORMFCB1
seg000:2BDE		    add	    di,	7
seg000:2BE1
seg000:2BE1 NORMFCB1:				    ; CODE XREF: seg000:2BDCj
seg000:2BE1		    pop	    bx
seg000:2BE2		    or	    bl,	bl
seg000:2BE4		    jnz	    short SearchDrv
seg000:2BE6		    mov	    bl,	ds:CURDRV
seg000:2BEA		    inc	    bl
seg000:2BEC
seg000:2BEC SearchDrv:				    ; CODE XREF: seg000:2BE4j
seg000:2BEC		    lodsb
seg000:2BED		    xchg    al,	bl
seg000:2BEF		    inc	    di
seg000:2BF0		    mov	    cx,	10
seg000:2BF3		    rep	movsw
seg000:2BF5		    xchg    al,	bl
seg000:2BF7		    stosb
seg000:2BF8		    les	    di,	dword ptr ds:DMAADD
seg000:2BFC		    test    byte ptr ds:ExtFCB,	0FFh
seg000:2C01		    jz	    short NORMFCB2
seg000:2C03		    mov	    al,	0FFh
seg000:2C05		    stosb
seg000:2C06		    inc	    al
seg000:2C08		    mov	    cx,	5
seg000:2C0B		    rep	stosb
seg000:2C0D		    mov	    al,	byte ptr ds:ExtFCB+1
seg000:2C10		    stosb
seg000:2C11
seg000:2C11 NORMFCB2:				    ; CODE XREF: seg000:2C01j
seg000:2C11		    mov	    al,	bl
seg000:2C13		    stosb
seg000:2C14		    mov	    cx,	16
seg000:2C17		    rep	movsw
seg000:2C19		    jmp	    NO_OP
seg000:2C1C ; ---------------------------------------------------------------------------
seg000:2C1C
seg000:2C1C _$DIR_SEARCH_NEXT:			    ; DATA XREF: seg000:0E24o
seg000:2C1C		    mov	    word ptr ss:THISFCB, dx
seg000:2C21		    mov	    word ptr ss:THISFCB+2, ds
seg000:2C26		    mov	    byte ptr ss:ExtFCB+1, 0
seg000:2C2C		    mov	    byte ptr ss:ExtFCB,	0
seg000:2C32		    push    ss
seg000:2C33		    pop	    es
seg000:2C34		    mov	    di,	offset SEARCHBUF
seg000:2C37		    mov	    si,	dx
seg000:2C39		    cmp	    byte ptr [si], 0FFh
seg000:2C3C		    jnz	    short NORMFCB6
seg000:2C3E		    add	    si,	6
seg000:2C41		    lodsb
seg000:2C42		    mov	    byte ptr ss:ExtFCB+1, al
seg000:2C46		    dec	    byte ptr ss:ExtFCB
seg000:2C4B
seg000:2C4B NORMFCB6:				    ; CODE XREF: seg000:2C3Cj
seg000:2C4B		    lodsb
seg000:2C4C		    push    ax
seg000:2C4D		    mov	    al,	[si+20]
seg000:2C50		    stosb
seg000:2C51		    mov	    cx,	10
seg000:2C54		    rep	movsw
seg000:2C56		    push    ss
seg000:2C57		    pop	    ds
seg000:2C58		    push    ds:DMAADD
seg000:2C5C		    push    ds:DMAADD_2
seg000:2C60		    mov	    ds:DMAADD, offset SEARCHBUF
seg000:2C66		    mov	    ds:DMAADD_2, ds
seg000:2C6A		    call    DOS_SEARCH_NEXT
seg000:2C6D		    pop	    ds:DMAADD_2
seg000:2C71		    pop	    ds:DMAADD
seg000:2C75		    jb	    short SearchNoMore
seg000:2C77		    jmp	    SearchSet
seg000:2C7A ; ---------------------------------------------------------------------------
seg000:2C7A
seg000:2C7A SearchNoMore:			    ; CODE XREF: seg000:2C75j
seg000:2C7A		    les	    di,	ds:THISFCB
seg000:2C7E		    test    byte ptr ds:ExtFCB,	0FFh
seg000:2C83		    jz	    short NORMFCB8
seg000:2C85		    add	    di,	7
seg000:2C88
seg000:2C88 NORMFCB8:				    ; CODE XREF: seg000:2C83j
seg000:2C88		    pop	    bx
seg000:2C89		    mov	    es:[di], bl
seg000:2C8C		    jmp	    FCB_Ret_Err
seg000:2C8F ; ---------------------------------------------------------------------------
seg000:2C8F
seg000:2C8F _$FIND_FIRST:			    ; DATA XREF: seg000:0E9Co
seg000:2C8F		    mov	    si,	dx
seg000:2C91		    mov	    byte ptr ss:ExtFCB+1, cl
seg000:2C96		    mov	    di,	offset OPENBUF
seg000:2C99		    call    TransPathSet
seg000:2C9C		    jnb	    short Find_it
seg000:2C9E		    mov	    al,	3
seg000:2CA0
seg000:2CA0 fff_errj:				    ; CODE XREF: seg000:findit_errjj
seg000:2CA0		    jmp	    SYS_Ret_Err
seg000:2CA3 ; ---------------------------------------------------------------------------
seg000:2CA3
seg000:2CA3 Find_it:				    ; CODE XREF: seg000:2C9Cj
seg000:2CA3		    push    ss
seg000:2CA4		    pop	    ds
seg000:2CA5		    push    ds:DMAADD
seg000:2CA9		    push    ds:DMAADD_2
seg000:2CAD		    mov	    ds:DMAADD, offset SEARCHBUF
seg000:2CB3		    mov	    ds:DMAADD_2, ds
seg000:2CB7		    call    DOS_SEARCH_FIRST
seg000:2CBA		    pop	    ds:DMAADD_2
seg000:2CBE		    pop	    ds:DMAADD
seg000:2CC2		    jnb	    short FindSet
seg000:2CC4
seg000:2CC4 findit_errj:			    ; CODE XREF: seg000:2D17j
seg000:2CC4		    jmp	    short fff_errj
seg000:2CC6 ; ---------------------------------------------------------------------------
seg000:2CC6
seg000:2CC6 FindSet:				    ; CODE XREF: seg000:2CC2j
seg000:2CC6					    ; seg000:2D15j
seg000:2CC6		    mov	    si,	offset SEARCHBUF
seg000:2CC9		    les	    di,	dword ptr ds:DMAADD
seg000:2CCD		    mov	    cx,	21
seg000:2CD0		    rep	movsb
seg000:2CD2		    push    si
seg000:2CD3		    mov	    al,	[si+0Bh]
seg000:2CD6		    stosb
seg000:2CD7		    add	    si,	16h
seg000:2CDA		    movsw
seg000:2CDB		    movsw
seg000:2CDC		    inc	    si
seg000:2CDD		    inc	    si
seg000:2CDE		    movsw
seg000:2CDF		    movsw
seg000:2CE0		    pop	    si
seg000:2CE1		    call    PackName
seg000:2CE4		    jmp	    SYS_RET_OK
seg000:2CE7 ; ---------------------------------------------------------------------------
seg000:2CE7
seg000:2CE7 _$FIND_NEXT:			    ; DATA XREF: seg000:0E9Eo
seg000:2CE7		    push    ss
seg000:2CE8		    pop	    es
seg000:2CE9		    mov	    di,	offset SEARCHBUF
seg000:2CEC		    lds	    si,	dword ptr ss:DMAADD
seg000:2CF1		    mov	    cx,	21
seg000:2CF4		    rep	movsb
seg000:2CF6		    push    ss
seg000:2CF7		    pop	    ds
seg000:2CF8		    push    ds:DMAADD
seg000:2CFC		    push    ds:DMAADD_2
seg000:2D00		    mov	    ds:DMAADD, offset SEARCHBUF
seg000:2D06		    mov	    ds:DMAADD_2, ds
seg000:2D0A		    call    DOS_SEARCH_NEXT
seg000:2D0D		    pop	    ds:DMAADD_2
seg000:2D11		    pop	    ds:DMAADD
seg000:2D15		    jnb	    short FindSet
seg000:2D17		    jmp	    short findit_errj
seg000:2D19
seg000:2D19 ; =============== S	U B R O	U T I N	E =======================================
seg000:2D19
seg000:2D19
seg000:2D19 PackName	    proc near		    ; CODE XREF: seg000:2CE1p
seg000:2D19					    ; REN_DEL_Check+22p ...
seg000:2D19		    mov	    cx,	8
seg000:2D1C		    rep	movsb
seg000:2D1E
seg000:2D1E main_kill_tail:			    ; CODE XREF: PackName+11j
seg000:2D1E		    cmp	    byte ptr es:[di-1],	' '
seg000:2D23		    jnz	    short find_check_dot
seg000:2D25		    dec	    di
seg000:2D26		    inc	    cx
seg000:2D27		    cmp	    cx,	8
seg000:2D2A		    jb	    short main_kill_tail
seg000:2D2C
seg000:2D2C find_check_dot:			    ; CODE XREF: PackName+Aj
seg000:2D2C		    cmp	    word ptr [si], 2020h
seg000:2D30		    jnz	    short got_ext
seg000:2D32		    cmp	    byte ptr [si+2], 20h
seg000:2D36		    jz	    short find_done
seg000:2D38
seg000:2D38 got_ext:				    ; CODE XREF: PackName+17j
seg000:2D38		    mov	    al,	'.'
seg000:2D3A		    stosb
seg000:2D3B		    mov	    cx,	3
seg000:2D3E		    rep	movsb
seg000:2D40
seg000:2D40 ext_kill_tail:			    ; CODE XREF: PackName+2Fj
seg000:2D40		    cmp	    byte ptr es:[di-1],	' '
seg000:2D45		    jnz	    short find_done
seg000:2D47		    dec	    di
seg000:2D48		    jmp	    short ext_kill_tail
seg000:2D4A ; ---------------------------------------------------------------------------
seg000:2D4A
seg000:2D4A find_done:				    ; CODE XREF: PackName+1Dj
seg000:2D4A					    ; PackName+2Cj
seg000:2D4A		    xor	    ax,	ax
seg000:2D4C		    stosb
seg000:2D4D		    retn
seg000:2D4D PackName	    endp
seg000:2D4D
seg000:2D4E ; ---------------------------------------------------------------------------
seg000:2D4E
seg000:2D4E _$CURRENT_DIR:			    ; DATA XREF: seg000:0E8Eo
seg000:2D4E		    call    EcritDisk
seg000:2D51		    mov	    al,	dl
seg000:2D53		    call    GETVISDRV
seg000:2D56		    jnb	    short CurrentValidate
seg000:2D58
seg000:2D58 CurdirErr:				    ; CODE XREF: seg000:2D80j
seg000:2D58		    call    LcritDisk
seg000:2D5B		    mov	    al,	0Fh
seg000:2D5D
seg000:2D5D curdir_errj:			    ; CODE XREF: seg000:rmdir_errorj
seg000:2D5D		    jmp	    SYS_Ret_Err
seg000:2D60 ; ---------------------------------------------------------------------------
seg000:2D60
seg000:2D60 CurrentValidate:			    ; CODE XREF: seg000:2D56j
seg000:2D60		    push    ds
seg000:2D61		    push    si
seg000:2D62		    lds	    si,	cs:THISCDS
seg000:2D67		    test    word ptr [si+43h], 8000h
seg000:2D6C		    jnz	    short $+2
seg000:2D6E		    mov	    cs:NoSetDir, 0
seg000:2D74		    mov	    di,	offset OPENBUF
seg000:2D77		    call    ValidateCDS
seg000:2D7A		    push    es
seg000:2D7B		    push    di
seg000:2D7C		    pop	    si
seg000:2D7D		    pop	    ds
seg000:2D7E		    pop	    di
seg000:2D7F		    pop	    es
seg000:2D80		    jb	    short CurdirErr
seg000:2D82		    add	    si,	0
seg000:2D85		    add	    si,	[si+4Fh]
seg000:2D88		    cmp	    byte ptr [si], '\'
seg000:2D8B		    jnz	    short CurrentCopy
seg000:2D8D		    inc	    si
seg000:2D8E
seg000:2D8E CurrentCopy:			    ; CODE XREF: seg000:2D8Bj
seg000:2D8E		    push    ax
seg000:2D8F		    lodsb
seg000:2D90		    or	    al,	al
seg000:2D92		    jz	    short FOK
seg000:2D94		    cmp	    al,	5
seg000:2D96		    jz	    short FCHANGE
seg000:2D98		    jmp	    short FFF
seg000:2D9A ; ---------------------------------------------------------------------------
seg000:2D9A		    nop
seg000:2D9B
seg000:2D9B FCPYNEXT:				    ; CODE XREF: seg000:2DABj
seg000:2D9B		    lodsb
seg000:2D9C
seg000:2D9C FFF:				    ; CODE XREF: seg000:2D98j
seg000:2D9C		    cmp	    al,	'\'
seg000:2D9E		    jnz	    short FOK
seg000:2DA0		    stosb
seg000:2DA1		    lodsb
seg000:2DA2		    cmp	    al,	5
seg000:2DA4		    jnz	    short FOK
seg000:2DA6
seg000:2DA6 FCHANGE:				    ; CODE XREF: seg000:2D96j
seg000:2DA6		    mov	    al,	0E5h
seg000:2DA8
seg000:2DA8 FOK:				    ; CODE XREF: seg000:2D92j
seg000:2DA8					    ; seg000:2D9Ej ...
seg000:2DA8		    stosb
seg000:2DA9		    or	    al,	al
seg000:2DAB		    jnz	    short FCPYNEXT
seg000:2DAD		    pop	    ax
seg000:2DAE		    xor	    al,	al
seg000:2DB0		    call    LcritDisk
seg000:2DB3		    jmp	    SYS_RET_OK
seg000:2DB6 ; ---------------------------------------------------------------------------
seg000:2DB6
seg000:2DB6 _$RMDIR:				    ; DATA XREF: seg000:0E74o
seg000:2DB6		    push    dx
seg000:2DB7		    push    ds
seg000:2DB8		    mov	    si,	dx
seg000:2DBA		    mov	    di,	offset OPENBUF
seg000:2DBD		    push    di
seg000:2DBE		    call    TransPathNoSet
seg000:2DC1		    pop	    di
seg000:2DC2		    jnb	    short rmlset
seg000:2DC4		    pop	    ds
seg000:2DC5		    pop	    dx
seg000:2DC6		    mov	    al,	3
seg000:2DC8
seg000:2DC8 rmdir_error:			    ; CODE XREF: seg000:chdir_errjj
seg000:2DC8		    jmp	    short curdir_errj
seg000:2DCA ; ---------------------------------------------------------------------------
seg000:2DCA
seg000:2DCA rmlset:				    ; CODE XREF: seg000:2DC2j
seg000:2DCA		    cmp	    byte ptr ss:cMeta, -1
seg000:2DD0		    jnz	    short rmerr
seg000:2DD2		    push    ss
seg000:2DD3		    pop	    es
seg000:2DD4		    xor	    al,	al
seg000:2DD6
seg000:2DD6 rmloop:				    ; CODE XREF: seg000:2DE2j
seg000:2DD6		    call    GetCDSFromDrv
seg000:2DD9		    jb	    short rmcont
seg000:2DDB		    call    StrCmp
seg000:2DDE		    jz	    short rmerr
seg000:2DE0		    inc	    al
seg000:2DE2		    jmp	    short rmloop
seg000:2DE4 ; ---------------------------------------------------------------------------
seg000:2DE4
seg000:2DE4 rmerr:				    ; CODE XREF: seg000:2DD0j
seg000:2DE4					    ; seg000:2DDEj
seg000:2DE4		    pop	    ds
seg000:2DE5		    pop	    dx
seg000:2DE6		    mov	    al,	10h
seg000:2DE8
seg000:2DE8 chdir_errj:				    ; CODE XREF: seg000:ChdirErrj
seg000:2DE8		    jmp	    short rmdir_error
seg000:2DEA ; ---------------------------------------------------------------------------
seg000:2DEA
seg000:2DEA rmcont:				    ; CODE XREF: seg000:2DD9j
seg000:2DEA		    pop	    ds
seg000:2DEB		    pop	    dx
seg000:2DEC		    mov	    si,	offset DOS_RMDIR
seg000:2DEF		    jmp	    DoDirCall
seg000:2DF2 ; ---------------------------------------------------------------------------
seg000:2DF2
seg000:2DF2 _$CHDIR:				    ; DATA XREF: seg000:0E76o
seg000:2DF2		    mov	    di,	offset OPENBUF
seg000:2DF5		    mov	    si,	dx
seg000:2DF7		    call    TransPath
seg000:2DFA		    jnb	    short ChDirCrack
seg000:2DFC
seg000:2DFC ChDirErrP:				    ; CODE XREF: seg000:2E05j
seg000:2DFC					    ; seg000:2E0Ej ...
seg000:2DFC		    mov	    al,	3
seg000:2DFE
seg000:2DFE ChdirErr:				    ; CODE XREF: seg000:2E13j
seg000:2DFE		    jmp	    short chdir_errj
seg000:2E00 ; ---------------------------------------------------------------------------
seg000:2E00
seg000:2E00 ChDirCrack:				    ; CODE XREF: seg000:2DFAj
seg000:2E00		    cmp	    byte ptr ds:cMeta, 0FFh
seg000:2E05		    jnz	    short ChDirErrP
seg000:2E07		    les	    di,	ds:THISCDS
seg000:2E0B		    cmp	    di,	-1
seg000:2E0E		    jz	    short ChDirErrP
seg000:2E10		    call    DOS_CHDIR
seg000:2E13		    jb	    short ChdirErr
seg000:2E15		    les	    di,	ds:THISCDS
seg000:2E19		    test    word ptr es:[di+43h], 2000h
seg000:2E1F		    jz	    short GotCDS
seg000:2E21		    push    es
seg000:2E22		    push    di
seg000:2E23		    push    cx
seg000:2E24		    call    Get_User_Stack
seg000:2E27		    mov	    di,	[si+6]
seg000:2E2A		    mov	    ds,	word ptr [si+14]
seg000:2E2D		    mov	    si,	offset OPENBUF
seg000:2E30		    xchg    si,	di
seg000:2E32		    xor	    al,	al
seg000:2E34		    push    di
seg000:2E35		    call    TransPathNoSet
seg000:2E38		    pop	    si
seg000:2E39		    les	    di,	ds:THISCDS
seg000:2E3D		    mov	    word ptr es:[di+49h], -1
seg000:2E43		    pop	    cx
seg000:2E44		    pop	    di
seg000:2E45		    pop	    es
seg000:2E46
seg000:2E46 GotCDS:				    ; CODE XREF: seg000:2E1Fj
seg000:2E46		    push    ss
seg000:2E47		    pop	    ds
seg000:2E48		    mov	    si,	ds:WFP_START
seg000:2E4C		    push    cx
seg000:2E4D		    call    DStrLen
seg000:2E50		    cmp	    cx,	67
seg000:2E53		    pop	    cx
seg000:2E54		    ja	    short ChDirErrP
seg000:2E56		    test    word ptr es:[di+43h], 8000h
seg000:2E5C		    jnz	    short SkipRecency
seg000:2E5E		    mov	    es:[di+49h], cx
seg000:2E62		    les	    di,	ds:THISCDS
seg000:2E66
seg000:2E66 SkipRecency:			    ; CODE XREF: seg000:2E5Cj
seg000:2E66		    call    FStrCpy
seg000:2E69		    xor	    al,	al
seg000:2E6B
seg000:2E6B chdir_ok:				    ; CODE XREF: seg000:2E90j
seg000:2E6B		    jmp	    SYS_RET_OK
seg000:2E6E ; ---------------------------------------------------------------------------
seg000:2E6E
seg000:2E6E _$MKDIR:				    ; DATA XREF: seg000:0E72o
seg000:2E6E		    mov	    si,	offset DOS_MKDIR
seg000:2E71
seg000:2E71 DoDirCall:				    ; CODE XREF: seg000:2DEFj
seg000:2E71		    mov	    di,	offset OPENBUF
seg000:2E74		    push    si
seg000:2E75		    mov	    si,	dx
seg000:2E77		    call    TransPath
seg000:2E7A		    pop	    si
seg000:2E7B		    jnb	    short MkDirCrack
seg000:2E7D
seg000:2E7D MkErrP:				    ; CODE XREF: seg000:2E88j
seg000:2E7D		    mov	    al,	3
seg000:2E7F
seg000:2E7F MkErr:				    ; CODE XREF: seg000:2E8Ej
seg000:2E7F		    jmp	    SYS_Ret_Err
seg000:2E82 ; ---------------------------------------------------------------------------
seg000:2E82
seg000:2E82 MkDirCrack:				    ; CODE XREF: seg000:2E7Bj
seg000:2E82		    cmp	    byte ptr ss:cMeta, -1
seg000:2E88		    jnz	    short MkErrP
seg000:2E8A		    push    ss
seg000:2E8B		    pop	    ds
seg000:2E8C		    call    si
seg000:2E8E		    jb	    short MkErr
seg000:2E90		    jmp	    short chdir_ok
seg000:2E92
seg000:2E92 ; =============== S	U B R O	U T I N	E =======================================
seg000:2E92
seg000:2E92
seg000:2E92 _$IOCTL	    proc near		    ; CODE XREF: seg000:1F23p
seg000:2E92					    ; seg000:5F42p
seg000:2E92					    ; DATA XREF: ...
seg000:2E92
seg000:2E92 ; FUNCTION CHUNK AT	seg000:1666 SIZE 00000021 BYTES
seg000:2E92 ; FUNCTION CHUNK AT	seg000:3131 SIZE 0000004E BYTES
seg000:2E92
seg000:2E92		    mov	    si,	ds
seg000:2E94		    push    ss
seg000:2E95		    pop	    ds
seg000:2E96		    cmp	    al,	3
seg000:2E98		    ja	    short ioctl_1
seg000:2E9A		    call    SFFromHandle
seg000:2E9D		    jnb	    short ioctl_check_permissions
seg000:2E9F
seg000:2E9F ioctl_bad_handle:			    ; CODE XREF: _$IOCTL+95j
seg000:2E9F					    ; _$IOCTL:ioctl_bad_handlejj
seg000:2E9F		    mov	    al,	6
seg000:2EA1
seg000:2EA1 ioctl_error:			    ; CODE XREF: _$IOCTL+24j
seg000:2EA1		    jmp	    SYS_Ret_Err
seg000:2EA4 ; ---------------------------------------------------------------------------
seg000:2EA4
seg000:2EA4 ioctl_check_permissions:		    ; CODE XREF: _$IOCTL+Bj
seg000:2EA4		    cmp	    al,	2
seg000:2EA6		    jnb	    short ioctl_check_device2
seg000:2EA8		    cmp	    al,	0
seg000:2EAA		    mov	    al,	es:[di+5]
seg000:2EAE		    jz	    short ioctl_read
seg000:2EB0		    or	    dh,	dh
seg000:2EB2		    jz	    short ioctl_check_device
seg000:2EB4		    mov	    al,	0Dh
seg000:2EB6		    jmp	    short ioctl_error
seg000:2EB8 ; ---------------------------------------------------------------------------
seg000:2EB8
seg000:2EB8 ioctl_bad_funj2:			    ; CODE XREF: _$IOCTL+2Bj
seg000:2EB8		    jmp	    ioctl_bad_fun
seg000:2EBB ; ---------------------------------------------------------------------------
seg000:2EBB
seg000:2EBB ioctl_check_device:			    ; CODE XREF: _$IOCTL+20j
seg000:2EBB		    test    al,	80h
seg000:2EBD		    jz	    short ioctl_bad_funj2
seg000:2EBF		    mov	    ds:EXTERR_LOCUS, 4
seg000:2EC4		    or	    dl,	80h
seg000:2EC7		    mov	    es:[di+5], dl
seg000:2ECB
seg000:2ECB ioctl_ok:				    ; CODE XREF: _$IOCTL:ioctl_sr_okj
seg000:2ECB		    jmp	    SYS_RET_OK
seg000:2ECE ; ---------------------------------------------------------------------------
seg000:2ECE
seg000:2ECE ioctl_read:				    ; CODE XREF: _$IOCTL+1Cj
seg000:2ECE		    mov	    ds:EXTERR_LOCUS, 2
seg000:2ED3		    xor	    ah,	ah
seg000:2ED5		    test    al,	80h
seg000:2ED7		    jz	    short ioctl_no_high
seg000:2ED9		    mov	    ds:EXTERR_LOCUS, 4
seg000:2EDE		    les	    di,	es:[di+7]
seg000:2EE2		    mov	    ah,	es:[di+5]
seg000:2EE6
seg000:2EE6 ioctl_no_high:			    ; CODE XREF: _$IOCTL+45j
seg000:2EE6		    mov	    dx,	ax
seg000:2EE8		    call    Get_User_Stack
seg000:2EEB		    mov	    [si+6], dx
seg000:2EEE
seg000:2EEE ioctl_sr_ok:			    ; CODE XREF: _$IOCTL:ioctl_status_retj
seg000:2EEE		    jmp	    short ioctl_ok
seg000:2EF0 ; ---------------------------------------------------------------------------
seg000:2EF0
seg000:2EF0 ioctl_check_device2:		    ; CODE XREF: _$IOCTL+14j
seg000:2EF0		    test    word ptr es:[di+5],	80h
seg000:2EF6		    jnz	    short ioctl_control_string
seg000:2EF8		    jmp	    ioctl_bad_fun
seg000:2EFB ; ---------------------------------------------------------------------------
seg000:2EFB
seg000:2EFB ioctl_control_string:		    ; CODE XREF: _$IOCTL+64j
seg000:2EFB		    mov	    ds:EXTERR_LOCUS, 4
seg000:2F00		    les	    di,	es:[di+7]
seg000:2F04		    xor	    bl,	bl
seg000:2F06		    jmp	    ioctl_do_string
seg000:2F09 ; ---------------------------------------------------------------------------
seg000:2F09
seg000:2F09 ioctl_getdevj:			    ; CODE XREF: _$IOCTL+80j
seg000:2F09		    jmp	    ioctl_get_dev
seg000:2F0C ; ---------------------------------------------------------------------------
seg000:2F0C
seg000:2F0C ioctl_1:				    ; CODE XREF: _$IOCTL+6j
seg000:2F0C		    dec	    al
seg000:2F0E		    dec	    al
seg000:2F10		    cmp	    al,	3
seg000:2F12		    jbe	    short ioctl_getdevj
seg000:2F14		    cmp	    al,	6
seg000:2F16		    jnb	    short ioctl_2
seg000:2F18
seg000:2F18 ioctl_status:
seg000:2F18		    mov	    ah,	1
seg000:2F1A		    sub	    al,	4
seg000:2F1C		    jz	    short ioctl_get_status
seg000:2F1E		    mov	    ah,	3
seg000:2F20
seg000:2F20 ioctl_get_status:			    ; CODE XREF: _$IOCTL+8Aj
seg000:2F20		    push    ax
seg000:2F21		    call    GET_IO_SFT
seg000:2F24		    pop	    ax
seg000:2F25		    jnb	    short DO_IOFUNC
seg000:2F27		    jmp	    ioctl_bad_handle
seg000:2F2A ; ---------------------------------------------------------------------------
seg000:2F2A
seg000:2F2A DO_IOFUNC:				    ; CODE XREF: _$IOCTL+93j
seg000:2F2A		    call    IOFUNC
seg000:2F2D		    mov	    ah,	al
seg000:2F2F		    mov	    al,	0FFh
seg000:2F31		    jnz	    short ioctl_status_ret
seg000:2F33		    inc	    al
seg000:2F35
seg000:2F35 ioctl_status_ret:			    ; CODE XREF: _$IOCTL+9Fj
seg000:2F35		    jmp	    short ioctl_sr_ok
seg000:2F37 ; ---------------------------------------------------------------------------
seg000:2F37
seg000:2F37 ioctl_2:				    ; CODE XREF: _$IOCTL+84j
seg000:2F37		    jz	    short ioctl_3
seg000:2F39		    sub	    al,	7
seg000:2F3B		    jnz	    short ioctl_5
seg000:2F3D		    jmp	    Ioctl_Drive_attr
seg000:2F40 ; ---------------------------------------------------------------------------
seg000:2F40
seg000:2F40 ioctl_3:				    ; CODE XREF: _$IOCTL:ioctl_2j
seg000:2F40		    jmp	    ioctl_rem_media
seg000:2F43 ; ---------------------------------------------------------------------------
seg000:2F43
seg000:2F43 ioctl_4:				    ; CODE XREF: _$IOCTL+C9j
seg000:2F43		    jmp	    ioctl_bad_fun
seg000:2F46 ; ---------------------------------------------------------------------------
seg000:2F46
seg000:2F46 ioctl_5:				    ; CODE XREF: _$IOCTL+A9j
seg000:2F46		    dec	    al
seg000:2F48		    jnz	    short ioctl_6
seg000:2F4A		    jmp	    ioctl_redirj
seg000:2F4D ; ---------------------------------------------------------------------------
seg000:2F4D
seg000:2F4D ioctl_6:				    ; CODE XREF: _$IOCTL+B6j
seg000:2F4D		    dec	    al
seg000:2F4F		    jz	    short Set_Retry_Parameters
seg000:2F51		    dec	    al
seg000:2F53		    jz	    short GENERICIOCTLHANDLE
seg000:2F55		    dec	    al
seg000:2F57		    jz	    short GENERICIOCTL
seg000:2F59		    cmp	    al,	2
seg000:2F5B		    ja	    short ioctl_4
seg000:2F5D		    jmp	    ioctl_drive_owner
seg000:2F60 ; ---------------------------------------------------------------------------
seg000:2F60
seg000:2F60 GENERICIOCTLHANDLE:			    ; CODE XREF: _$IOCTL+C1j
seg000:2F60		    call    SFFromHandle
seg000:2F63		    jb	    short ioctl_bad_handlej
seg000:2F65		    test    word ptr [di+5], 8000h
seg000:2F6A		    jnz	    short ioctl_bad_fun
seg000:2F6C		    mov	    ds:EXTERR_LOCUS, 4
seg000:2F71		    les	    di,	es:[di+7]
seg000:2F75		    jmp	    short Do_GenIOCTL
seg000:2F77 ; ---------------------------------------------------------------------------
seg000:2F77
seg000:2F77 GENERICIOCTL:			    ; CODE XREF: _$IOCTL+C5j
seg000:2F77		    mov	    ds:EXTERR_LOCUS, 2
seg000:2F7C		    cmp	    ch,	8
seg000:2F7F		    jnz	    short ioctl_bad_fun
seg000:2F81		    call    Check_If_Net
seg000:2F84		    jnz	    short ioctl_bad_fun
seg000:2F86
seg000:2F86 Do_GenIOCTL:			    ; CODE XREF: _$IOCTL+E3j
seg000:2F86		    test    word ptr es:[di+4],	40h
seg000:2F8C		    jz	    short ioctl_bad_fun
seg000:2F8E		    push    es
seg000:2F8F		    push    di
seg000:2F90		    mov	    ds:IOCALL, 23
seg000:2F95		    mov	    ds:IOCALL_REQFUNC, 19
seg000:2F9A		    mov	    ds:IOCALL_REQUNIT, bl
seg000:2F9E		    mov	    ds:IOMED, ch
seg000:2FA2		    mov	    ds:IOXAD, cl
seg000:2FA6		    mov	    word ptr ds:IOCTL_REQ_REG_SI, si
seg000:2FAA		    mov	    word ptr ds:IOCTL_REQ_REG_DI, di
seg000:2FAE		    mov	    word ptr ds:IOCTL_REQ_GENERICIOCTL_PACKET, dx
seg000:2FB2		    mov	    word ptr ds:IOCTL_REQ_GENERICIOCTL_PACKET_2, si
seg000:2FB6		    mov	    bx,	offset IOCALL
seg000:2FB9		    push    ss
seg000:2FBA		    pop	    es
seg000:2FBB		    pop	    si
seg000:2FBC		    pop	    ds
seg000:2FBD		    jmp	    ioctl_do_IO
seg000:2FC0 ; ---------------------------------------------------------------------------
seg000:2FC0
seg000:2FC0 Set_Retry_Parameters:		    ; CODE XREF: _$IOCTL+BDj
seg000:2FC0		    mov	    ss:RetryLoop, cx
seg000:2FC5		    or	    dx,	dx
seg000:2FC7		    jz	    short ioctl_bad_fun
seg000:2FC9		    mov	    ss:RetryCount, dx
seg000:2FCE
seg000:2FCE doneok:				    ; CODE XREF: _$IOCTL:ioctl_okj1j
seg000:2FCE		    jmp	    SYS_RET_OK
seg000:2FD1 ; ---------------------------------------------------------------------------
seg000:2FD1
seg000:2FD1 ioctl_redirj:			    ; CODE XREF: _$IOCTL+B8j
seg000:2FD1		    jmp	    Ioctl_Handle_redir
seg000:2FD4 ; ---------------------------------------------------------------------------
seg000:2FD4
seg000:2FD4 ioctl_bad_fun:			    ; CODE XREF: _$IOCTL:ioctl_bad_funj2j
seg000:2FD4					    ; _$IOCTL+66j ...
seg000:2FD4		    mov	    al,	1
seg000:2FD6		    jmp	    SYS_Ret_Err
seg000:2FD9 ; ---------------------------------------------------------------------------
seg000:2FD9
seg000:2FD9 ioctl_bad_handlej:			    ; CODE XREF: _$IOCTL+D1j
seg000:2FD9		    jmp	    ioctl_bad_handle
seg000:2FDC ; ---------------------------------------------------------------------------
seg000:2FDC
seg000:2FDC ioctl_rem_media:			    ; CODE XREF: _$IOCTL:ioctl_3j
seg000:2FDC		    call    Check_If_Net
seg000:2FDF		    jnz	    short ioctl_bad_fun
seg000:2FE1		    test    word ptr es:[di+4],	800h
seg000:2FE7		    jz	    short ioctl_bad_fun
seg000:2FE9		    mov	    ss:IOCALL_REQFUNC, 0Fh
seg000:2FEF		    mov	    al,	13
seg000:2FF1		    mov	    ah,	bl
seg000:2FF3		    mov	    word ptr ss:IOCALL,	ax
seg000:2FF7		    xor	    ax,	ax
seg000:2FF9		    mov	    word ptr ss:IOCALL_REQSTAT,	ax
seg000:2FFD		    push    es
seg000:2FFE		    pop	    ds
seg000:2FFF		    mov	    si,	di
seg000:3001		    push    ss
seg000:3002		    pop	    es
seg000:3003		    mov	    bx,	offset IOCALL
seg000:3006		    push    ds
seg000:3007		    push    si
seg000:3008		    call    DEVIOCALL2
seg000:300B		    pop	    si
seg000:300C		    pop	    ds
seg000:300D		    mov	    ax,	word ptr ss:IOCALL_REQSTAT
seg000:3011		    and	    ax,	200h
seg000:3014		    mov	    cl,	9
seg000:3016		    shr	    ax,	cl
seg000:3018
seg000:3018 ioctl_okj1:				    ; CODE XREF: _$IOCTL:ioctl_okj2j
seg000:3018		    jmp	    short doneok
seg000:301A ; ---------------------------------------------------------------------------
seg000:301A
seg000:301A Ioctl_Drive_attr:			    ; CODE XREF: _$IOCTL+ABj
seg000:301A		    mov	    al,	bl
seg000:301C		    call    GetThisDrv
seg000:301F		    jb	    short ioctl_drv_err
seg000:3021		    call    Get_Driver_BL
seg000:3024		    mov	    dx,	es:[di+4]
seg000:3028		    mov	    bl,	al
seg000:302A		    les	    di,	ss:THISCDS
seg000:302F		    test    word ptr es:[di+43h], 8000h
seg000:3035		    jz	    short IOCTLShare
seg000:3037		    or	    dx,	1000h
seg000:303B
seg000:303B IOCTLShare:				    ; CODE XREF: _$IOCTL+1A3j
seg000:303B		    push    ss
seg000:303C		    pop	    ds
seg000:303D		    mov	    si,	offset OPENBUF
seg000:3040		    add	    bl,	'A'
seg000:3043		    mov	    [si], bl
seg000:3045		    mov	    word ptr [si+1], ':'
seg000:304A		    mov	    ax,	300h
seg000:304D		    clc
seg000:304E		    int	    2Ah		    ; Microsoft	Networks - CHECK DIRECT	I/O
seg000:304E					    ; DS:SI -> ASCIZ disk device name (may be full path	or only	drive
seg000:304E					    ; specifier--must include the colon)
seg000:304E					    ; Return: CF clear if absolute disk	access allowed
seg000:3050		    jnb	    short IOCTLLocal
seg000:3052		    or	    dx,	200h
seg000:3056
seg000:3056 IOCTLLocal:				    ; CODE XREF: _$IOCTL+1BEj
seg000:3056		    test    word ptr es:[di+43h], 1000h
seg000:305C		    jz	    short ioctl_set_DX
seg000:305E		    or	    dx,	8000h
seg000:3062
seg000:3062 ioctl_set_DX:			    ; CODE XREF: _$IOCTL+1CAj
seg000:3062					    ; _$IOCTL+1EAj
seg000:3062		    call    Get_User_Stack
seg000:3065		    mov	    [si+6], dx
seg000:3068
seg000:3068 ioctl_okj2:				    ; CODE XREF: _$IOCTL+242j
seg000:3068		    jmp	    short ioctl_okj1
seg000:306A ; ---------------------------------------------------------------------------
seg000:306A
seg000:306A ioctl_drv_err:			    ; CODE XREF: _$IOCTL+18Dj
seg000:306A					    ; Check_If_Net+15j
seg000:306A		    mov	    al,	0Fh
seg000:306C
seg000:306C ioctl_errj:				    ; CODE XREF: _$IOCTL:ioctl_errj1j
seg000:306C		    jmp	    SYS_Ret_Err
seg000:306F ; ---------------------------------------------------------------------------
seg000:306F
seg000:306F Ioctl_Handle_redir:			    ; CODE XREF: _$IOCTL:ioctl_redirjj
seg000:306F		    call    SFFromHandle
seg000:3072		    jnb	    short ioctl_got_sft
seg000:3074		    mov	    al,	6
seg000:3076
seg000:3076 ioctl_errj1:			    ; CODE XREF: _$IOCTL+256j
seg000:3076		    jmp	    short ioctl_errj
seg000:3078 ; ---------------------------------------------------------------------------
seg000:3078
seg000:3078 ioctl_got_sft:			    ; CODE XREF: _$IOCTL+1E0j
seg000:3078		    mov	    dx,	es:[di+5]
seg000:307C		    jmp	    short ioctl_set_DX
seg000:307E ; ---------------------------------------------------------------------------
seg000:307E
seg000:307E ioctl_bad_funj:			    ; CODE XREF: _$IOCTL+1F2j
seg000:307E					    ; _$IOCTL+1FAj
seg000:307E		    jmp	    ioctl_bad_fun
seg000:3081 ; ---------------------------------------------------------------------------
seg000:3081
seg000:3081 ioctl_get_dev:			    ; CODE XREF: _$IOCTL:ioctl_getdevjj
seg000:3081		    call    Check_If_Net
seg000:3084		    jnz	    short ioctl_bad_funj
seg000:3086
seg000:3086 ioctl_do_string:			    ; CODE XREF: _$IOCTL+74j
seg000:3086		    test    word ptr es:[di+4],	4000h
seg000:308C		    jz	    short ioctl_bad_funj
seg000:308E		    dec	    al
seg000:3090		    dec	    al
seg000:3092		    jz	    short ioctl_reqfunc_read
seg000:3094		    mov	    ds:IOCALL_REQFUNC, 12
seg000:3099		    jmp	    short ioctl_control_call
seg000:309B ; ---------------------------------------------------------------------------
seg000:309B
seg000:309B ioctl_reqfunc_read:			    ; CODE XREF: _$IOCTL+200j
seg000:309B		    mov	    ds:IOCALL_REQFUNC, 3
seg000:30A0
seg000:30A0 ioctl_control_call:			    ; CODE XREF: _$IOCTL+207j
seg000:30A0		    mov	    al,	22
seg000:30A2
seg000:30A2 ioctl_setup_pkt:
seg000:30A2		    mov	    ah,	bl
seg000:30A4		    mov	    word ptr ds:IOCALL,	ax
seg000:30A7		    xor	    ax,	ax
seg000:30A9		    mov	    word ptr ds:IOCALL_REQSTAT,	ax
seg000:30AC		    mov	    ds:IOMED, al
seg000:30AF		    mov	    word ptr ds:IOSCNT,	cx
seg000:30B3		    mov	    word ptr ds:IOXAD, dx
seg000:30B7		    mov	    word ptr ds:IOXAD_2, si
seg000:30BB		    push    es
seg000:30BC		    pop	    ds
seg000:30BD		    mov	    si,	di
seg000:30BF		    push    ss
seg000:30C0		    pop	    es
seg000:30C1		    mov	    bx,	offset IOCALL
seg000:30C4
seg000:30C4 ioctl_do_IO:			    ; CODE XREF: _$IOCTL+12Bj
seg000:30C4		    call    DEVIOCALL2
seg000:30C7		    test    word ptr ss:IOCALL_REQSTAT,	8000h
seg000:30CE		    jnz	    short Ioctl_string_err
seg000:30D0		    mov	    ax,	word ptr ss:IOSCNT
seg000:30D4		    jmp	    short ioctl_okj2
seg000:30D6 ; ---------------------------------------------------------------------------
seg000:30D6
seg000:30D6 Ioctl_string_err:			    ; CODE XREF: _$IOCTL+23Cj
seg000:30D6					    ; _$IOCTL:ioctl_string_errjj
seg000:30D6		    mov	    di,	word ptr ss:IOCALL_REQSTAT
seg000:30DB		    and	    di,	0FFh
seg000:30DF		    mov	    ax,	di
seg000:30E1		    call    SET_I24_EXTENDED_ERROR
seg000:30E4		    mov	    ax,	cs:EXTERR
seg000:30E8		    jmp	    short ioctl_errj1
seg000:30E8 _$IOCTL	    endp
seg000:30E8
seg000:30EA
seg000:30EA ; =============== S	U B R O	U T I N	E =======================================
seg000:30EA
seg000:30EA
seg000:30EA Get_Driver_BL   proc near		    ; CODE XREF: _$IOCTL+18Fp
seg000:30EA					    ; Check_If_Netp
seg000:30EA		    push    ax
seg000:30EB		    mov	    al,	bl
seg000:30ED		    call    GetThisDrv
seg000:30F0		    jb	    short ioctl_bad_drv
seg000:30F2		    xor	    bl,	bl
seg000:30F4		    mov	    ds:EXTERR_LOCUS, 3
seg000:30F9		    les	    di,	ds:THISCDS
seg000:30FD		    test    word ptr es:[di+43h], 8000h
seg000:3103		    les	    di,	es:[di+45h]
seg000:3107		    jnz	    short got_dev_ptr
seg000:3109		    mov	    ds:EXTERR_LOCUS, 2
seg000:310E		    mov	    bl,	es:[di+1]
seg000:3112		    les	    di,	es:[di+12h]
seg000:3116
seg000:3116 got_dev_ptr:			    ; CODE XREF: Get_Driver_BL+1Dj
seg000:3116		    clc
seg000:3117
seg000:3117 ioctl_bad_drv:			    ; CODE XREF: Get_Driver_BL+6j
seg000:3117		    pop	    ax
seg000:3118		    retn
seg000:3118 Get_Driver_BL   endp
seg000:3118
seg000:3119
seg000:3119 ; =============== S	U B R O	U T I N	E =======================================
seg000:3119
seg000:3119
seg000:3119 Check_If_Net    proc near		    ; CODE XREF: _$IOCTL+EFp
seg000:3119					    ; _$IOCTL:ioctl_rem_mediap	...
seg000:3119		    call    Get_Driver_BL
seg000:311C		    jb	    short ioctl_drv_err_pop
seg000:311E		    push    es
seg000:311F		    push    di
seg000:3120		    les	    di,	ds:THISCDS
seg000:3124		    test    word ptr es:[di+43h], 8000h
seg000:312A		    pop	    di
seg000:312B		    pop	    es
seg000:312C		    retn
seg000:312D ; ---------------------------------------------------------------------------
seg000:312D
seg000:312D ioctl_drv_err_pop:			    ; CODE XREF: Check_If_Net+3j
seg000:312D		    pop	    ax
seg000:312E		    jmp	    ioctl_drv_err
seg000:312E Check_If_Net    endp
seg000:312E
seg000:3131 ; ---------------------------------------------------------------------------
seg000:3131 ; START OF FUNCTION	CHUNK FOR _$IOCTL
seg000:3131
seg000:3131 ioctl_bad_funj3:			    ; CODE XREF: _$IOCTL+2A7j
seg000:3131					    ; _$IOCTL+2AFj
seg000:3131		    jmp	    ioctl_bad_fun
seg000:3134 ; ---------------------------------------------------------------------------
seg000:3134
seg000:3134 ioctl_string_errj:			    ; CODE XREF: _$IOCTL+2E4j
seg000:3134		    jmp	    short Ioctl_string_err
seg000:3136 ; ---------------------------------------------------------------------------
seg000:3136
seg000:3136 ioctl_drive_owner:			    ; CODE XREF: _$IOCTL+CBj
seg000:3136		    call    Check_If_Net
seg000:3139		    jnz	    short ioctl_bad_funj3
seg000:313B		    test    word ptr es:[di+4],	40h
seg000:3141		    jz	    short ioctl_bad_funj3
seg000:3143		    dec	    al
seg000:3145		    jz	    short SetOwner
seg000:3147		    mov	    ds:IOCALL_REQFUNC, 24
seg000:314C		    jmp	    short GetOwner
seg000:314E ; ---------------------------------------------------------------------------
seg000:314E
seg000:314E SetOwner:				    ; CODE XREF: _$IOCTL+2B3j
seg000:314E		    mov	    ds:IOCALL_REQFUNC, 23
seg000:3153
seg000:3153 GetOwner:				    ; CODE XREF: _$IOCTL+2BAj
seg000:3153		    mov	    al,	13
seg000:3155		    mov	    ah,	bl
seg000:3157		    mov	    word ptr ds:IOCALL,	ax
seg000:315A		    xor	    ax,	ax
seg000:315C		    mov	    word ptr ds:IOCALL_REQSTAT,	ax
seg000:315F		    push    es
seg000:3160		    pop	    ds
seg000:3161		    mov	    si,	di
seg000:3163		    push    ss
seg000:3164		    pop	    es
seg000:3165		    mov	    bx,	offset IOCALL
seg000:3168		    push    ds
seg000:3169		    push    si
seg000:316A		    call    DEVIOCALL2
seg000:316D		    pop	    si
seg000:316E		    pop	    ds
seg000:316F		    test    word ptr ss:IOCALL_REQSTAT,	8000h
seg000:3176		    jnz	    short ioctl_string_errj
seg000:3178		    mov	    al,	ss:IOCALL_REQUNIT
seg000:317C		    jmp	    SYS_RET_OK
seg000:317C ; END OF FUNCTION CHUNK FOR	_$IOCTL
seg000:317F
seg000:317F ; =============== S	U B R O	U T I N	E =======================================
seg000:317F
seg000:317F
seg000:317F DOS_DELETE	    proc near		    ; CODE XREF: seg000:23CDp
seg000:317F					    ; seg000:702Cp
seg000:317F		    call    TestNet
seg000:3182		    jnb	    short LOCAL_DELETE
seg000:3184		    mov	    ax,	1113h
seg000:3187		    int	    2Fh		    ; Multiplex	- NETWORK REDIRECTOR - DELETE REMOTE FILE
seg000:3187					    ; SS = DS =	DOS CS,	SDA first filename pointer -> fully-qualified filename in DOS CS
seg000:3187					    ; SDA CDS pointer -> current directory structure for drive with file
seg000:3187					    ; Return: CF set on	error
seg000:3189		    retn
seg000:318A ; ---------------------------------------------------------------------------
seg000:318A
seg000:318A LOCAL_DELETE:			    ; CODE XREF: DOS_DELETE+3j
seg000:318A		    mov	    byte ptr ds:fSplice_x2, 0
seg000:318F		    call    EcritDisk
seg000:3192		    mov	    word ptr ds:CREATING, 0E500h
seg000:3198		    mov	    si,	ds:WFP_START
seg000:319C
seg000:319C SKPNUL:				    ; CODE XREF: DOS_DELETE+20j
seg000:319C		    lodsb
seg000:319D		    or	    al,	al
seg000:319F		    jnz	    short SKPNUL
seg000:31A1		    sub	    si,	4
seg000:31A4		    cmp	    word ptr [si], 2E2Ah
seg000:31A8		    jnz	    short TEST_QUEST
seg000:31AA		    cmp	    byte ptr [si+2], '*'
seg000:31AE		    jz	    short CHECK_ATTS
seg000:31B0
seg000:31B0 TEST_QUEST:				    ; CODE XREF: DOS_DELETE+29j
seg000:31B0		    sub	    si,	9
seg000:31B3		    xchg    di,	si
seg000:31B5		    push    ss
seg000:31B6		    pop	    es
seg000:31B7		    mov	    ax,	'??'
seg000:31BA		    mov	    cx,	4
seg000:31BD		    repe scasw
seg000:31BF		    jnz	    short NOT_ALL
seg000:31C1		    xchg    di,	si
seg000:31C3		    lodsw
seg000:31C4		    cmp	    ax,	'?.'
seg000:31C7		    jnz	    short NOT_ALL
seg000:31C9		    lodsw
seg000:31CA		    cmp	    ax,	'??'
seg000:31CD		    jnz	    short NOT_ALL
seg000:31CF
seg000:31CF CHECK_ATTS:				    ; CODE XREF: DOS_DELETE+2Fj
seg000:31CF		    mov	    al,	byte ptr ds:ExtFCB+1
seg000:31D2		    and	    al,	1Fh
seg000:31D4		    cmp	    al,	1Fh
seg000:31D6		    jnz	    short NOT_ALL
seg000:31D8		    mov	    ds:DELALL, 0
seg000:31DD
seg000:31DD NOT_ALL:				    ; CODE XREF: DOS_DELETE+40j
seg000:31DD					    ; DOS_DELETE+48j ...
seg000:31DD		    mov	    ds:NoSetDir, 1
seg000:31E2		    call    GetPathNoSet
seg000:31E5		    jnb	    short Del_found
seg000:31E7		    jnz	    short _bad_path
seg000:31E9		    or	    cl,	cl
seg000:31EB		    jz	    short _bad_path
seg000:31ED
seg000:31ED No_file:				    ; CODE XREF: DOS_DELETE:No_fileJj
seg000:31ED		    mov	    ax,	2
seg000:31F0
seg000:31F0 ErrorReturn:			    ; CODE XREF: DOS_DELETE+79j
seg000:31F0					    ; DOS_DELETE+87j
seg000:31F0		    stc
seg000:31F1		    call    LcritDisk
seg000:31F4		    retn
seg000:31F5 ; ---------------------------------------------------------------------------
seg000:31F5
seg000:31F5 _bad_path:				    ; CODE XREF: DOS_DELETE+68j
seg000:31F5					    ; DOS_DELETE+6Cj
seg000:31F5		    mov	    ax,	3
seg000:31F8		    jmp	    short ErrorReturn
seg000:31FA ; ---------------------------------------------------------------------------
seg000:31FA
seg000:31FA Del_found:				    ; CODE XREF: DOS_DELETE+66j
seg000:31FA		    jnz	    short NOT_DIR
seg000:31FC		    cmp	    ds:DELALL, 0
seg000:3201		    jz	    short NOT_DIR
seg000:3203
seg000:3203 Del_access_err:			    ; CODE XREF: DOS_DELETE+8Bj
seg000:3203					    ; DOS_DELETE:Del_Access_errJj
seg000:3203		    mov	    ax,	5
seg000:3206		    jmp	    short ErrorReturn
seg000:3208 ; ---------------------------------------------------------------------------
seg000:3208
seg000:3208 NOT_DIR:				    ; CODE XREF: DOS_DELETE:Del_foundj
seg000:3208					    ; DOS_DELETE+82j
seg000:3208		    or	    ah,	ah
seg000:320A		    js	    short Del_access_err
seg000:320C
seg000:320C DELFILE:				    ; CODE XREF: DOS_DELETE+E1j
seg000:320C		    or	    byte ptr ds:fSplice_x2, 1
seg000:3211		    push    ds
seg000:3212		    mov	    ah,	ds:DELALL
seg000:3216		    lds	    di,	ds:CURBUF
seg000:321A		    test    byte ptr ss:ATTRIB_4+4, 1
seg000:3220		    jnz	    short DoDelete
seg000:3222		    test    byte ptr [bx+0Bh], 1
seg000:3226		    jz	    short DoDelete
seg000:3228		    pop	    ds
seg000:3229		    jmp	    short DELNXT
seg000:322B ; ---------------------------------------------------------------------------
seg000:322B
seg000:322B DoDelete:				    ; CODE XREF: DOS_DELETE+A1j
seg000:322B					    ; DOS_DELETE+A7j
seg000:322B		    call    REN_DEL_Check
seg000:322E		    jnb	    short DEL_SHARE_OK
seg000:3230		    pop	    ds
seg000:3231		    jmp	    short DELNXT
seg000:3233 ; ---------------------------------------------------------------------------
seg000:3233
seg000:3233 DEL_SHARE_OK:			    ; CODE XREF: DOS_DELETE+AFj
seg000:3233		    or	    byte ptr [di+5], 40h
seg000:3237		    mov	    [bx], ah
seg000:3239		    mov	    bx,	[si]
seg000:323B		    pop	    ds
seg000:323C		    or	    byte ptr ds:fSplice_x2, 10h
seg000:3241		    cmp	    bx,	2
seg000:3244		    jb	    short DELNXT
seg000:3246		    cmp	    bx,	es:[bp+0Dh]
seg000:324A		    ja	    short DELNXT
seg000:324C		    call    RELEASE
seg000:324F		    jb	    short No_fileJ
seg000:3251		    call    FastOpen_Delete
seg000:3254
seg000:3254 DELNXT:				    ; CODE XREF: DOS_DELETE+AAj
seg000:3254					    ; DOS_DELETE+B2j ...
seg000:3254		    les	    bp,	ds:THISDPB
seg000:3258		    call    GETENTRY
seg000:325B		    jb	    short No_fileJ
seg000:325D		    call    NextEnt
seg000:3260		    jnb	    short DELFILE
seg000:3262		    les	    bp,	ds:THISDPB
seg000:3266		    mov	    al,	es:[bp+0]
seg000:326A		    call    FLUSHBUF
seg000:326D		    jb	    short No_fileJ
seg000:326F		    test    byte ptr ds:fSplice_x2, 10h
seg000:3274		    jz	    short DelError
seg000:3276		    test    byte ptr ds:ATTRIB_4+4, 8
seg000:327B		    jz	    short No_Set_Flag
seg000:327D		    push    ax
seg000:327E		    push    es
seg000:327F		    push    di
seg000:3280		    les	    di,	ds:THISCDS
seg000:3284		    mov	    ah,	es:[di]
seg000:3287		    sub	    ah,	'A'
seg000:328A		    mov	    ds:VOLCHNG_FLAG, ah
seg000:328E		    call    FatRead_CDS
seg000:3291		    pop	    di
seg000:3292		    pop	    es
seg000:3293		    pop	    ax
seg000:3294
seg000:3294 No_Set_Flag:			    ; CODE XREF: DOS_DELETE+FCj
seg000:3294		    call    LcritDisk
seg000:3297		    retn
seg000:3298 ; ---------------------------------------------------------------------------
seg000:3298
seg000:3298 DelError:				    ; CODE XREF: DOS_DELETE+F5j
seg000:3298		    test    byte ptr ds:fSplice_x2, 1
seg000:329D		    jnz	    short Del_Access_errJ
seg000:329F
seg000:329F No_fileJ:				    ; CODE XREF: DOS_DELETE+D0j
seg000:329F					    ; DOS_DELETE+DCj ...
seg000:329F		    jmp	    No_file
seg000:32A2 ; ---------------------------------------------------------------------------
seg000:32A2
seg000:32A2 Del_Access_errJ:			    ; CODE XREF: DOS_DELETE+11Ej
seg000:32A2		    jmp	    Del_access_err
seg000:32A2 DOS_DELETE	    endp
seg000:32A2
seg000:32A5
seg000:32A5 ; =============== S	U B R O	U T I N	E =======================================
seg000:32A5
seg000:32A5
seg000:32A5 REN_DEL_Check   proc near		    ; CODE XREF: DOS_DELETE:DoDeletep
seg000:32A5					    ; DOS_RENAME+6Bp ...
seg000:32A5		    push    ds
seg000:32A6		    push    di
seg000:32A7		    push    ax
seg000:32A8		    push    bx
seg000:32A9		    push    si
seg000:32AA		    push    ss
seg000:32AB		    pop	    es
seg000:32AC		    mov	    di,	ss:WFP_START
seg000:32B1		    mov	    si,	bx
seg000:32B3		    mov	    ds,	word ptr ss:CURBUF+2
seg000:32B8		    mov	    bx,	di
seg000:32BA		    add	    bx,	2
seg000:32BD		    call    StrLen
seg000:32C0		    dec	    cx
seg000:32C1		    add	    di,	cx
seg000:32C3		    call    SkipBack
seg000:32C6		    inc	    di
seg000:32C7		    call    PackName
seg000:32CA		    pop	    si
seg000:32CB		    pop	    bx
seg000:32CC		    push    bx
seg000:32CD		    push    si
seg000:32CE		    push    ss
seg000:32CF		    pop	    ds
seg000:32D0		    call    ds:ShCloseFile
seg000:32D4		    mov	    word ptr ds:THISSFT+2, ds
seg000:32D8		    mov	    word ptr ds:THISSFT, offset	AUX_STACK_SF_ENTRY_size
seg000:32DE		    xor	    ah,	ah
seg000:32E0		    call    DOOPEN
seg000:32E3		    les	    di,	ds:THISSFT
seg000:32E7		    mov	    word ptr es:[di+2],	10h
seg000:32ED		    mov	    word ptr es:[di], 1
seg000:32F2		    call    ShareEnter
seg000:32F5		    jb	    short CheckDone
seg000:32F7		    les	    di,	ds:THISSFT
seg000:32FB		    mov	    word ptr es:[di], 0
seg000:3300		    call    ShareEnd
seg000:3303		    clc
seg000:3304
seg000:3304 CheckDone:				    ; CODE XREF: REN_DEL_Check+50j
seg000:3304		    les	    bp,	ds:THISDPB
seg000:3308		    pop	    si
seg000:3309		    pop	    bx
seg000:330A		    pop	    ax
seg000:330B		    pop	    di
seg000:330C		    pop	    ds
seg000:330D		    retn
seg000:330D REN_DEL_Check   endp
seg000:330D
seg000:330E
seg000:330E ; =============== S	U B R O	U T I N	E =======================================
seg000:330E
seg000:330E
seg000:330E FastOpen_Delete proc near		    ; CODE XREF: DOS_DELETE+D2p
seg000:330E					    ; DOS_RENAME:REN_OK1p ...
seg000:330E		    pushf
seg000:330F		    push    si
seg000:3310		    push    bx
seg000:3311		    push    ax
seg000:3312		    mov	    si,	ds:WFP_START
seg000:3316		    mov	    bx,	offset FastTable
seg000:3319		    mov	    al,	3
seg000:331B		    call    dword ptr [bx+2]
seg000:331E		    pop	    ax
seg000:331F		    pop	    bx
seg000:3320		    pop	    si
seg000:3321		    popf
seg000:3322		    retn
seg000:3322 FastOpen_Delete endp
seg000:3322
seg000:3323
seg000:3323 ; =============== S	U B R O	U T I N	E =======================================
seg000:3323
seg000:3323
seg000:3323 FastOpen_Update proc near		    ; CODE XREF: seg000:35C1p
seg000:3323					    ; DOS_CLOSE:do_updatep ...
seg000:3323		    pushf
seg000:3324		    push    bx
seg000:3325		    push    ax
seg000:3326		    mov	    bx,	offset FastTable
seg000:3329		    mov	    al,	4
seg000:332B		    call    dword ptr [bx+2]
seg000:332E		    pop	    ax
seg000:332F		    pop	    bx
seg000:3330		    popf
seg000:3331		    retn
seg000:3331 FastOpen_Update endp
seg000:3331
seg000:3332
seg000:3332 ; =============== S	U B R O	U T I N	E =======================================
seg000:3332
seg000:3332
seg000:3332 DOS_RENAME	    proc near		    ; CODE XREF: seg000:24C8p
seg000:3332					    ; seg000:7073p
seg000:3332		    call    TestNet
seg000:3335		    jnb	    short LOCAL_RENAME
seg000:3337		    mov	    ax,	1111h
seg000:333A		    int	    2Fh		    ; Multiplex	- NETWORK REDIRECTOR - RENAME REMOTE FILE
seg000:333A					    ; SS = DS =	DOS CS,	SDA first filename pointer = offset of fully-qualified old name
seg000:333A					    ; SDA CDS pointer -> current directory
seg000:333A					    ; Return: CF set on	error
seg000:333C		    retn
seg000:333D ; ---------------------------------------------------------------------------
seg000:333D
seg000:333D LOCAL_RENAME:			    ; CODE XREF: DOS_RENAME+3j
seg000:333D		    mov	    ds:EXTERR_LOCUS, 2
seg000:3342		    mov	    si,	ds:WFP_START
seg000:3346		    mov	    di,	ds:REN_WFP
seg000:334A		    mov	    al,	[si]
seg000:334C		    mov	    ah,	[di]
seg000:334E		    or	    ax,	2020h
seg000:3351		    cmp	    al,	ah
seg000:3353		    jz	    short SAMEDRV
seg000:3355		    mov	    ax,	11h
seg000:3358		    stc
seg000:3359		    retn
seg000:335A ; ---------------------------------------------------------------------------
seg000:335A
seg000:335A SAMEDRV:				    ; CODE XREF: DOS_RENAME+21j
seg000:335A		    push    ds:DMAADD_2
seg000:335E		    push    ds:DMAADD
seg000:3362		    mov	    ds:DMAADD_2, ds
seg000:3366		    mov	    ds:DMAADD, offset RENAMEDMA
seg000:336C		    mov	    byte ptr ds:fSplice_x2+1, 0
seg000:3371		    call    EcritDisk
seg000:3374		    call    DOS_SEARCH_FIRST
seg000:3377		    jnb	    short Check_Dev
seg000:3379		    cmp	    ax,	12h
seg000:337C		    jnz	    short GOTERR
seg000:337E		    mov	    ax,	2
seg000:3381
seg000:3381 GOTERR:				    ; CODE XREF: DOS_RENAME+4Aj
seg000:3381					    ; DOS_RENAME+64j ...
seg000:3381		    stc
seg000:3382
seg000:3382 RENAME_POP:				    ; CODE XREF: DOS_RENAME+73j
seg000:3382					    ; DOS_RENAME+ACj ...
seg000:3382		    pop	    ds:DMAADD
seg000:3386		    pop	    ds:DMAADD_2
seg000:338A		    call    LcritDisk
seg000:338D		    retn
seg000:338E ; ---------------------------------------------------------------------------
seg000:338E
seg000:338E Check_Dev:				    ; CODE XREF: DOS_RENAME+45j
seg000:338E		    mov	    ax,	5
seg000:3391		    cmp	    byte ptr ds:fSplice_x2+1, 0
seg000:3396		    jnz	    short GOTERR
seg000:3398		    mov	    si,	bx
seg000:339A		    add	    si,	1Ah
seg000:339D		    call    REN_DEL_Check
seg000:33A0		    jnb	    short REN_OK1
seg000:33A2		    mov	    ax,	20h
seg000:33A5		    jmp	    short RENAME_POP
seg000:33A7 ; ---------------------------------------------------------------------------
seg000:33A7
seg000:33A7 REN_OK1:				    ; CODE XREF: DOS_RENAME+6Ej
seg000:33A7		    call    FastOpen_Delete
seg000:33AA
seg000:33AA SWAP_SOURCE:
seg000:33AA		    mov	    si,	ds:REN_WFP
seg000:33AE		    mov	    ds:WFP_START, si
seg000:33B2		    mov	    ds:CURR_DIR_END, 0FFFFh
seg000:33B8		    mov	    word ptr ds:CREATING, 0E5FFh
seg000:33BE		    call    GetPathNoSet
seg000:33C1		    jb	    short NODEST
seg000:33C3		    jz	    short BAD_ACC
seg000:33C5		    or	    ah,	ah
seg000:33C7		    jns	    short SAVEDEST
seg000:33C9
seg000:33C9 BAD_ACC:				    ; CODE XREF: DOS_RENAME+91j
seg000:33C9					    ; DOS_RENAME+100j ...
seg000:33C9		    mov	    ax,	5
seg000:33CC		    stc
seg000:33CD
seg000:33CD RENAME_CLEAN:			    ; CODE XREF: DOS_RENAME+1AEj
seg000:33CD					    ; DOS_RENAME+1B8j
seg000:33CD		    pushf
seg000:33CE		    push    ax
seg000:33CF		    mov	    al,	byte ptr ds:THISDRV
seg000:33D2		    call    FLUSHBUF
seg000:33D5		    pop	    ax
seg000:33D6		    cmp	    ds:FAILERR,	0
seg000:33DB		    jnz	    short BAD_ERR
seg000:33DD		    popf
seg000:33DE		    jmp	    short RENAME_POP
seg000:33E0 ; ---------------------------------------------------------------------------
seg000:33E0
seg000:33E0 BAD_ERR:				    ; CODE XREF: DOS_RENAME+A9j
seg000:33E0		    pop	    ax
seg000:33E1		    mov	    ax,	3
seg000:33E4		    jmp	    short GOTERR
seg000:33E6 ; ---------------------------------------------------------------------------
seg000:33E6
seg000:33E6 NODEST:				    ; CODE XREF: DOS_RENAME+8Fj
seg000:33E6		    jnz	    short BAD_PATH
seg000:33E8		    cmp	    ds:FAILERR,	0
seg000:33ED		    jnz	    short BAD_PATH
seg000:33EF		    or	    cl,	cl
seg000:33F1		    jnz	    short SAVEDEST
seg000:33F3
seg000:33F3 BAD_PATH:				    ; CODE XREF: DOS_RENAME:NODESTj
seg000:33F3					    ; DOS_RENAME+BBj
seg000:33F3		    mov	    ax,	3
seg000:33F6		    stc
seg000:33F7		    jmp	    short RENAME_POP
seg000:33F9 ; ---------------------------------------------------------------------------
seg000:33F9
seg000:33F9 SAVEDEST:				    ; CODE XREF: DOS_RENAME+95j
seg000:33F9					    ; DOS_RENAME+BFj
seg000:33F9		    push    ss
seg000:33FA		    pop	    es
seg000:33FB		    mov	    di,	(offset	NAME2_2+2)
seg000:33FE		    mov	    si,	(offset	NAME1_1+1)
seg000:3401		    mov	    cx,	11
seg000:3404		    rep	movsb
seg000:3406		    mov	    ax,	ds:DIRSTART
seg000:3409		    mov	    word ptr ds:DEVFCB_dir_time+3, ax
seg000:340C
seg000:340C BUILDDEST:				    ; CODE XREF: DOS_RENAME+1B4j
seg000:340C		    push    ss
seg000:340D		    pop	    es
seg000:340E		    mov	    bx,	offset RENAMEDMA_21
seg000:3411		    mov	    di,	(offset	NAME1_1+1)
seg000:3414		    mov	    si,	(offset	NAME2_2+2)
seg000:3417		    mov	    cx,	11
seg000:341A
seg000:341A NEWNAM:				    ; CODE XREF: DOS_RENAME+F1j
seg000:341A		    lodsb
seg000:341B		    cmp	    al,	'?'
seg000:341D		    jnz	    short NOCHG
seg000:341F		    mov	    al,	[bx]
seg000:3421
seg000:3421 NOCHG:				    ; CODE XREF: DOS_RENAME+EBj
seg000:3421		    stosb
seg000:3422		    inc	    bx
seg000:3423		    loop    NEWNAM
seg000:3425		    mov	    byte ptr ds:ATTRIB_4+4, 16h
seg000:342A		    mov	    byte ptr ds:CREATING, 0FFh
seg000:342F		    call    DEVNAME
seg000:3432		    jnb	    short BAD_ACC
seg000:3434		    mov	    bx,	word ptr ds:DEVFCB_dir_time+3
seg000:3438		    les	    bp,	ds:THISDPB
seg000:343C		    call    SETDIRSRCH
seg000:343F		    jb	    short BAD_ACC
seg000:3441		    call    FINDENTRY
seg000:3444		    jnb	    short BAD_ACC
seg000:3446		    cmp	    ds:FAILERR,	0
seg000:344B		    jnz	    short BAD_ACCJ
seg000:344D		    mov	    ax,	word ptr ds:DEVFCB_dir_time+3
seg000:3450		    cmp	    ax,	ds:RENAMEDMA_15
seg000:3454		    jz	    short SIMPLE_RENAME
seg000:3456		    mov	    al,	ds:RENAMEDMA_21_dir_attr
seg000:3459		    test    al,	10h
seg000:345B		    jnz	    short BAD_ACCJ
seg000:345D		    mov	    byte ptr ds:ATTRIB_4+4, al
seg000:3460		    mov	    word ptr ds:THISSFT+2, ds
seg000:3464		    mov	    si,	offset AUX_STACK_SF_ENTRY_size
seg000:3467		    mov	    word ptr ds:THISSFT, si
seg000:346B		    mov	    word ptr [si+2], 2
seg000:3470		    xor	    cx,	cx
seg000:3472		    call    make_type	    ; RENAME_MAKE
seg000:3475		    jnb	    short GOT_DEST
seg000:3477
seg000:3477 BAD_ACCJ:				    ; CODE XREF: DOS_RENAME+119j
seg000:3477					    ; DOS_RENAME+129j
seg000:3477		    jmp	    BAD_ACC
seg000:347A ; ---------------------------------------------------------------------------
seg000:347A
seg000:347A GOT_DEST:				    ; CODE XREF: DOS_RENAME+143j
seg000:347A		    push    bx
seg000:347B		    les	    di,	ds:THISSFT
seg000:347F		    call    ShareEnd
seg000:3482		    pop	    bx
seg000:3483		    les	    di,	ds:CURBUF
seg000:3487		    or	    byte ptr es:[di+5],	40h
seg000:348C		    mov	    di,	bx
seg000:348E		    add	    di,	0Bh
seg000:3491		    mov	    si,	offset RENAMEDMA_21_dir_attr
seg000:3494		    mov	    cx,	21
seg000:3497		    rep	movsb
seg000:3499		    call    GET_SOURCE
seg000:349C		    jb	    short RENAME_OVER
seg000:349E		    mov	    di,	bx
seg000:34A0		    mov	    es,	word ptr ds:CURBUF+2
seg000:34A4		    mov	    al,	0E5h
seg000:34A6		    stosb
seg000:34A7		    jmp	    short DIRTY_IT
seg000:34A9 ; ---------------------------------------------------------------------------
seg000:34A9
seg000:34A9 SIMPLE_RENAME:			    ; CODE XREF: DOS_RENAME+122j
seg000:34A9		    call    GET_SOURCE
seg000:34AC		    jb	    short RENAME_OVER
seg000:34AE		    mov	    di,	bx
seg000:34B0		    mov	    es,	word ptr ds:CURBUF+2
seg000:34B4		    mov	    si,	(offset	NAME1_1+1)
seg000:34B7		    mov	    cx,	11
seg000:34BA		    rep	movsb
seg000:34BC
seg000:34BC DIRTY_IT:				    ; CODE XREF: DOS_RENAME+175j
seg000:34BC		    mov	    di,	word ptr ds:CURBUF
seg000:34C0		    or	    byte ptr es:[di+5],	40h
seg000:34C5		    mov	    si,	offset RENAMEDMA_1
seg000:34C8		    call    EcritDisk
seg000:34CB		    mov	    byte ptr ds:CREATING, 0
seg000:34D0		    call    RENAME_NEXT
seg000:34D3		    jb	    short RENAME_OVER
seg000:34D5		    lea	    si,	[bx+1Ah]
seg000:34D8		    call    REN_DEL_Check
seg000:34DB		    jnb	    short REN_OK2
seg000:34DD		    mov	    ax,	20h
seg000:34E0		    jmp	    RENAME_CLEAN
seg000:34E3 ; ---------------------------------------------------------------------------
seg000:34E3
seg000:34E3 REN_OK2:				    ; CODE XREF: DOS_RENAME+1A9j
seg000:34E3		    call    FastOpen_Delete
seg000:34E6		    jmp	    BUILDDEST
seg000:34E9 ; ---------------------------------------------------------------------------
seg000:34E9
seg000:34E9 RENAME_OVER:			    ; CODE XREF: DOS_RENAME+16Aj
seg000:34E9					    ; DOS_RENAME+17Aj ...
seg000:34E9		    clc
seg000:34EA		    jmp	    RENAME_CLEAN
seg000:34EA DOS_RENAME	    endp
seg000:34EA
seg000:34ED
seg000:34ED ; =============== S	U B R O	U T I N	E =======================================
seg000:34ED
seg000:34ED
seg000:34ED GET_SOURCE	    proc near		    ; CODE XREF: DOS_RENAME+167p
seg000:34ED					    ; DOS_RENAME:SIMPLE_RENAMEp
seg000:34ED		    mov	    bx,	ds:RENAMEDMA_15
seg000:34F1		    les	    bp,	ds:THISDPB
seg000:34F5		    call    SETDIRSRCH
seg000:34F8		    jnb	    short gs_startsrch
seg000:34FA		    retn
seg000:34FB ; ---------------------------------------------------------------------------
seg000:34FB
seg000:34FB gs_startsrch:			    ; CODE XREF: GET_SOURCE+Bj
seg000:34FB		    call    STARTSRCH
seg000:34FE		    mov	    ax,	ds:RENAMEDMA_13
seg000:3501		    call    GetEnt
seg000:3504		    retn
seg000:3504 GET_SOURCE	    endp
seg000:3504
seg000:3505
seg000:3505 ; =============== S	U B R O	U T I N	E =======================================
seg000:3505
seg000:3505
seg000:3505 GET_FILE_INFO   proc near		    ; CODE XREF: seg000:23EAp
seg000:3505					    ; seg000:ChModGetp
seg000:3505		    call    TestNet
seg000:3508		    jnb	    short LOCAL_INFO
seg000:350A		    mov	    ax,	110Fh
seg000:350D		    int	    2Fh		    ; Multiplex	- NETWORK REDIRECTOR - GET REMOTE FILE'S ATTRIBUTES
seg000:350D					    ; SS = DOS CS, SDA first filename pointer -> fully-qualified name of file
seg000:350D					    ; SDA CDS pointer -> current directory
seg000:350D					    ; Return: CF set on	error, AX = file attributes
seg000:350F		    retn
seg000:3510 ; ---------------------------------------------------------------------------
seg000:3510
seg000:3510 LOCAL_INFO:				    ; CODE XREF: GET_FILE_INFO+3j
seg000:3510		    call    EcritDisk
seg000:3513		    mov	    ds:NoSetDir, 1
seg000:3518		    call    GetPath
seg000:351B		    jnb	    short info_check_dev
seg000:351D
seg000:351D NO_PATH:				    ; CODE XREF: seg000:358Dj
seg000:351D		    jnz	    short bad_path1
seg000:351F		    or	    cl,	cl
seg000:3521		    jz	    short bad_path1
seg000:3523
seg000:3523 info_no_file:			    ; CODE XREF: GET_FILE_INFO+2Dj
seg000:3523		    mov	    ax,	2
seg000:3526
seg000:3526 BadRet:				    ; CODE XREF: GET_FILE_INFO+29j
seg000:3526		    stc
seg000:3527
seg000:3527 justRet:				    ; CODE XREF: GET_FILE_INFO+51j
seg000:3527		    call    LcritDisk
seg000:352A		    retn
seg000:352B ; ---------------------------------------------------------------------------
seg000:352B
seg000:352B bad_path1:				    ; CODE XREF: GET_FILE_INFO:NO_PATHj
seg000:352B					    ; GET_FILE_INFO+1Cj
seg000:352B		    mov	    ax,	3
seg000:352E		    jmp	    short BadRet
seg000:3530 ; ---------------------------------------------------------------------------
seg000:3530
seg000:3530 info_check_dev:			    ; CODE XREF: GET_FILE_INFO+16j
seg000:3530		    or	    ah,	ah
seg000:3532		    js	    short info_no_file
seg000:3534		    push    ds
seg000:3535		    mov	    ds,	word ptr ds:CURBUF+2
seg000:3539		    mov	    si,	bx
seg000:353B		    xor	    bx,	bx
seg000:353D		    mov	    di,	bx
seg000:353F		    mov	    cx,	[si+16h]
seg000:3542		    mov	    dx,	[si+18h]
seg000:3545		    xor	    ah,	ah
seg000:3547		    mov	    al,	[si+0Bh]
seg000:354A		    test    al,	10h
seg000:354C		    jnz	    short NO_SIZE
seg000:354E		    mov	    di,	[si+1Ch]
seg000:3551		    mov	    bx,	[si+1Eh]
seg000:3554
seg000:3554 NO_SIZE:				    ; CODE XREF: GET_FILE_INFO+47j
seg000:3554		    pop	    ds
seg000:3555		    clc
seg000:3556		    jmp	    short justRet
seg000:3556 GET_FILE_INFO   endp
seg000:3556
seg000:3558 ; ---------------------------------------------------------------------------
seg000:3558
seg000:3558 SET_FILE_ATTRIBUTE:			    ; CODE XREF: seg000:7006p
seg000:3558		    test    ax,	0FFD8h
seg000:355B		    jz	    short set_look
seg000:355D
seg000:355D BAD_ACC:				    ; CODE XREF: seg000:3597j
seg000:355D		    mov	    ds:EXTERR_LOCUS, 1
seg000:3562		    mov	    ds:EXTERR_CLASS, 7
seg000:3567		    mov	    ds:EXTERR_ACTION, 4
seg000:356C		    mov	    ax,	5
seg000:356F		    stc
seg000:3570		    retn
seg000:3571 ; ---------------------------------------------------------------------------
seg000:3571
seg000:3571 set_look:				    ; CODE XREF: seg000:355Bj
seg000:3571		    call    TestNet
seg000:3574		    jnb	    short Local_Set
seg000:3576		    push    ax
seg000:3577		    mov	    ax,	110Eh
seg000:357A		    int	    2Fh		    ; Multiplex	- NETWORK REDIRECTOR - SET REMOTE FILE'S ATTRIBUTES
seg000:357A					    ; SS = DOS CS, SDA first filename pointer -> fully-qualified name of file
seg000:357A					    ; SDA CDS pointer -> current directory
seg000:357A					    ; STACK: WORD new file attributes
seg000:357A					    ; Return: CF set on	error
seg000:357C		    pop	    bx
seg000:357D		    retn
seg000:357E ; ---------------------------------------------------------------------------
seg000:357E
seg000:357E Local_Set:				    ; CODE XREF: seg000:3574j
seg000:357E		    call    EcritDisk
seg000:3581		    push    ax
seg000:3582		    mov	    ds:NoSetDir, 1
seg000:3587		    call    GetPath
seg000:358A		    jnb	    short set_check_device
seg000:358C		    pop	    bx
seg000:358D		    jmp	    short NO_PATH
seg000:358F ; ---------------------------------------------------------------------------
seg000:358F
seg000:358F set_check_device:			    ; CODE XREF: seg000:358Aj
seg000:358F		    or	    ah,	ah
seg000:3591		    jns	    short set_check_share
seg000:3593		    pop	    ax
seg000:3594		    call    LcritDisk
seg000:3597		    jmp	    short BAD_ACC
seg000:3599 ; ---------------------------------------------------------------------------
seg000:3599
seg000:3599 set_check_share:			    ; CODE XREF: seg000:3591j
seg000:3599		    pop	    ax
seg000:359A		    call    REN_DEL_Check
seg000:359D		    jnb	    short set_do
seg000:359F		    mov	    ax,	20h
seg000:35A2		    jmp	    short OK_BYE
seg000:35A4 ; ---------------------------------------------------------------------------
seg000:35A4
seg000:35A4 set_do:				    ; CODE XREF: seg000:359Dj
seg000:35A4		    les	    di,	ds:CURBUF
seg000:35A8		    and	    byte ptr es:[bx+0Bh], 0D8h
seg000:35AD		    or	    es:[bx+0Bh], al
seg000:35B1		    or	    byte ptr es:[di+5],	40h
seg000:35B6		    mov	    al,	byte ptr ds:THISDRV
seg000:35B9		    push    dx
seg000:35BA		    push    di
seg000:35BB		    mov	    ah,	0
seg000:35BD		    mov	    dl,	al
seg000:35BF		    mov	    di,	bx
seg000:35C1		    call    FastOpen_Update
seg000:35C4		    pop	    di
seg000:35C5		    pop	    dx
seg000:35C6		    call    FLUSHBUF
seg000:35C9		    jnb	    short OK_BYE
seg000:35CB		    mov	    ax,	2
seg000:35CE
seg000:35CE OK_BYE:				    ; CODE XREF: seg000:35A2j
seg000:35CE					    ; seg000:35C9j
seg000:35CE		    call    LcritDisk
seg000:35D1		    retn
seg000:35D2
seg000:35D2 ; =============== S	U B R O	U T I N	E =======================================
seg000:35D2
seg000:35D2
seg000:35D2 DOS_DUP	    proc near		    ; CODE XREF: _$DUP_PDB+64p
seg000:35D2		    les	    di,	cs:THISSFT
seg000:35D7
seg000:35D7 DOS_Dup_Direct:			    ; CODE XREF: seg000:6ECDp
seg000:35D7		    call    IsSFTNet
seg000:35DA		    jnz	    short DO_INC
seg000:35DC		    call    DEV_OPEN_SFT
seg000:35DF
seg000:35DF DO_INC:				    ; CODE XREF: DOS_DUP+8j
seg000:35DF		    inc	    word ptr es:[di]
seg000:35E2		    retn
seg000:35E2 DOS_DUP	    endp
seg000:35E2
seg000:35E3 ; ---------------------------------------------------------------------------
seg000:35E3
seg000:35E3 DOS_CREATE:				    ; DATA XREF: seg000:_$FCB_CREATEo
seg000:35E3					    ; seg000:6FC0o
seg000:35E3		    xor	    ah,	ah
seg000:35E5
seg000:35E5 Create_inter:			    ; CODE XREF: seg000:3677j
seg000:35E5		    test    al,	80h
seg000:35E7		    jnz	    short AttErr
seg000:35E9		    test    al,	8
seg000:35EB		    jz	    short NoReset
seg000:35ED		    mov	    al,	8
seg000:35EF
seg000:35EF NoReset:				    ; CODE XREF: seg000:35EBj
seg000:35EF		    or	    al,	20h
seg000:35F1		    test    al,	50h
seg000:35F3		    jz	    short ATT_OK
seg000:35F5
seg000:35F5 AttErr:				    ; CODE XREF: seg000:35E7j
seg000:35F5		    mov	    ax,	5
seg000:35F8		    mov	    ds:EXTERR_LOCUS, 1
seg000:35FD		    jmp	    short SET_MKND_ERR
seg000:35FF ; ---------------------------------------------------------------------------
seg000:35FF
seg000:35FF ATT_OK:				    ; CODE XREF: seg000:35F3j
seg000:35FF		    les	    di,	ds:THISSFT
seg000:3603		    push    es
seg000:3604		    les	    si,	ds:THISCDS
seg000:3608		    cmp	    si,	0FFFFh
seg000:360B		    jnz	    short TEST_RE_NET
seg000:360D		    pop	    es
seg000:360E		    push    ax
seg000:360F		    mov	    ax,	1118h
seg000:3612		    int	    2Fh		    ; Multiplex	- NETWORK REDIRECTOR - CREATE/TRUNCATE FILE
seg000:3612					    ; ES:DI -> uninitialized SFT, SS = DOS CS
seg000:3612					    ; SDA first	filename pointer -> fully-qualified name of file
seg000:3612					    ; STACK: WORD file creation	mode???
seg000:3614		    pop	    bx
seg000:3615		    retn
seg000:3616 ; ---------------------------------------------------------------------------
seg000:3616
seg000:3616 TEST_RE_NET:			    ; CODE XREF: seg000:360Bj
seg000:3616		    test    word ptr es:[si+43h], 8000h
seg000:361C		    pop	    es
seg000:361D		    jz	    short LOCAL_CREATE
seg000:361F		    push    ax
seg000:3620		    mov	    ax,	1117h
seg000:3623		    int	    2Fh		    ; Multiplex	- NETWORK REDIRECTOR - CREATE/TRUNCATE REMOTE FILE
seg000:3623					    ; ES:DI -> uninitialized SFT, SS = DOS CS
seg000:3623					    ; SDA first	filename pointer -> fully-qualified name of file to open
seg000:3623					    ; SDA CDS pointer -> current directory
seg000:3623					    ; Return: CF set on	error
seg000:3625		    pop	    bx
seg000:3626		    retn
seg000:3627 ; ---------------------------------------------------------------------------
seg000:3627
seg000:3627 LOCAL_CREATE:			    ; CODE XREF: seg000:361Dj
seg000:3627		    or	    word ptr es:[di+2],	2
seg000:362D		    call    EcritDisk
seg000:3630		    call    MakeNode
seg000:3633		    jnb	    short Create_ok
seg000:3635		    mov	    ds:VOLCHNG_FLAG, -1
seg000:363A		    call    LcritDisk
seg000:363D
seg000:363D SET_MKND_ERR:			    ; CODE XREF: seg000:35FDj
seg000:363D					    ; seg000:3B30j
seg000:363D		    mov	    bx,	offset CRTERRTAB
seg000:3640		    xlat
seg000:3641		    stc
seg000:3642		    retn
seg000:3643 ; ---------------------------------------------------------------------------
seg000:3643
seg000:3643 Create_ok:				    ; CODE XREF: seg000:3633j
seg000:3643		    call    FastOpen_Delete
seg000:3646		    mov	    al,	byte ptr ds:ExtFCB+1
seg000:3649		    test    al,	8
seg000:364B		    jz	    short NoVolLabel
seg000:364D		    les	    di,	ds:THISCDS
seg000:3651		    mov	    ah,	es:[di]
seg000:3654		    sub	    ah,	'A'
seg000:3657		    mov	    ds:VOLCHNG_FLAG, ah
seg000:365B		    call    EcritDisk
seg000:365E		    call    FatRead_CDS
seg000:3661		    call    LcritDisk
seg000:3664
seg000:3664 NoVolLabel:				    ; CODE XREF: seg000:364Bj
seg000:3664		    mov	    ax,	2
seg000:3667		    les	    di,	ds:THISSFT
seg000:366B		    call    ds:ShSU
seg000:366F		    call    LcritDisk
seg000:3672		    jmp	    SET_SFT_MODE
seg000:3675 ; ---------------------------------------------------------------------------
seg000:3675
seg000:3675 DOS_Create_New:			    ; DATA XREF: _$CreateNewFile+1o
seg000:3675		    mov	    ah,	1
seg000:3677		    jmp	    Create_inter
seg000:367A ; ---------------------------------------------------------------------------
seg000:367A
seg000:367A DOS_OPEN:				    ; DATA XREF: seg000:2A8Co
seg000:367A					    ; _$OPEN+5o ...
seg000:367A		    mov	    ds:NoSetDir, 0
seg000:367F		    call    Check_Access_AX
seg000:3682		    jnb	    short dos_open1
seg000:3684		    retn
seg000:3685 ; ---------------------------------------------------------------------------
seg000:3685
seg000:3685 dos_open1:				    ; CODE XREF: seg000:3682j
seg000:3685		    les	    di,	ds:THISSFT
seg000:3689		    xor	    ah,	ah
seg000:368B		    mov	    es:[di+2], al
seg000:368F		    push    es
seg000:3690		    les	    si,	ds:THISCDS
seg000:3694		    cmp	    si,	-1
seg000:3697		    jnz	    short TEST_RE_NET1
seg000:3699		    pop	    es
seg000:369A		    push    ax
seg000:369B		    mov	    ax,	1116h
seg000:369E		    int	    2Fh		    ; Multiplex	- NETWORK REDIRECTOR - OPEN EXISTING REMOTE FILE
seg000:369E					    ; ES:DI -> uninitialized SFT, SS = DOS CS
seg000:369E					    ; SDA first	filename pointer -> fully-qualified name of file to open
seg000:369E					    ; STACK: WORD file open mode
seg000:369E					    ; Return: CF set on	error
seg000:36A0		    pop	    bx
seg000:36A1		    retn
seg000:36A2 ; ---------------------------------------------------------------------------
seg000:36A2
seg000:36A2 TEST_RE_NET1:			    ; CODE XREF: seg000:3697j
seg000:36A2		    test    word ptr es:[si+43h], 8000h
seg000:36A8		    pop	    es
seg000:36A9		    jz	    short LOCAL_OPEN
seg000:36AB		    push    ax
seg000:36AC		    mov	    ax,	1116h
seg000:36AF		    int	    2Fh		    ; Multiplex	- NETWORK REDIRECTOR - OPEN EXISTING REMOTE FILE
seg000:36AF					    ; ES:DI -> uninitialized SFT, SS = DOS CS
seg000:36AF					    ; SDA first	filename pointer -> fully-qualified name of file to open
seg000:36AF					    ; STACK: WORD file open mode
seg000:36AF					    ; Return: CF set on	error
seg000:36B1		    pop	    bx
seg000:36B2		    retn
seg000:36B3 ; ---------------------------------------------------------------------------
seg000:36B3
seg000:36B3 LOCAL_OPEN:				    ; CODE XREF: seg000:36A9j
seg000:36B3		    call    EcritDisk
seg000:36B6		    or	    ds:FastOpenFlg, 5
seg000:36BB		    call    GetPath
seg000:36BE		    jnb	    short Open_found
seg000:36C0		    jnz	    short bad_path2
seg000:36C2		    or	    cl,	cl
seg000:36C4		    jz	    short bad_path2
seg000:36C6		    mov	    ax,	2
seg000:36C9
seg000:36C9 OpenBadRet:				    ; CODE XREF: seg000:36D9j
seg000:36C9					    ; seg000:36DEj
seg000:36C9		    stc
seg000:36CA		    mov	    cs:FastOpenFlg, 0
seg000:36D0		    call    LcritDisk
seg000:36D3		    jmp	    Clear_FastOpen
seg000:36D6 ; ---------------------------------------------------------------------------
seg000:36D6
seg000:36D6 bad_path2:				    ; CODE XREF: seg000:36C0j
seg000:36D6					    ; seg000:36C4j
seg000:36D6		    mov	    ax,	3
seg000:36D9		    jmp	    short OpenBadRet
seg000:36DB ; ---------------------------------------------------------------------------
seg000:36DB
seg000:36DB open_bad_access:			    ; CODE XREF: seg000:Open_foundj
seg000:36DB					    ; seg000:36F0j ...
seg000:36DB		    mov	    ax,	5
seg000:36DE		    jmp	    short OpenBadRet
seg000:36E0 ; ---------------------------------------------------------------------------
seg000:36E0
seg000:36E0 Open_found:				    ; CODE XREF: seg000:36BEj
seg000:36E0		    jz	    short open_bad_access
seg000:36E2		    or	    ah,	ah
seg000:36E4		    js	    short open_ok
seg000:36E6		    mov	    es,	word ptr ds:CURBUF+2
seg000:36EA		    mov	    al,	es:[bx+0Bh]
seg000:36EE		    test    al,	8
seg000:36F0		    jnz	    short open_bad_access
seg000:36F2		    test    al,	1
seg000:36F4		    jz	    short open_ok
seg000:36F6		    push    ds
seg000:36F7		    push    si
seg000:36F8		    lds	    si,	ds:THISSFT
seg000:36FC		    mov	    cx,	[si+2]
seg000:36FF		    test    cx,	8000h
seg000:3703		    jnz	    short ResetAccess
seg000:3705		    mov	    dl,	cl
seg000:3707		    and	    dl,	0F0h
seg000:370A		    cmp	    dl,	70h
seg000:370D		    jnz	    short NormalOpen
seg000:370F
seg000:370F ResetAccess:			    ; CODE XREF: seg000:3703j
seg000:370F		    and	    cx,	0FFF0h
seg000:3713		    mov	    [si+2], cx
seg000:3716		    jmp	    short FillSFT
seg000:3718 ; ---------------------------------------------------------------------------
seg000:3718
seg000:3718 NormalOpen:				    ; CODE XREF: seg000:370Dj
seg000:3718		    and	    cl,	0Fh
seg000:371B		    cmp	    cl,	0
seg000:371E		    jz	    short FillSFT
seg000:3720		    pop	    si
seg000:3721		    pop	    ds
seg000:3722		    jmp	    short open_bad_access
seg000:3724 ; ---------------------------------------------------------------------------
seg000:3724
seg000:3724 FillSFT:				    ; CODE XREF: seg000:3716j
seg000:3724					    ; seg000:371Ej
seg000:3724		    pop	    si
seg000:3725		    pop	    ds
seg000:3726
seg000:3726 open_ok:				    ; CODE XREF: seg000:36E4j
seg000:3726					    ; seg000:36F4j
seg000:3726		    call    DOOPEN
seg000:3729
seg000:3729 DO_SHARE_CHECK:			    ; CODE XREF: seg000:3740j
seg000:3729		    mov	    cx,	ds:RetryCount
seg000:372D
seg000:372D OpenShareRetry:			    ; CODE XREF: seg000:3737j
seg000:372D		    push    cx
seg000:372E		    call    SHARE_CHECK
seg000:3731		    pop	    cx
seg000:3732		    jnb	    short SHARE_OK
seg000:3734		    call    Idle
seg000:3737		    loop    OpenShareRetry
seg000:3739		    les	    di,	ds:THISSFT
seg000:373D		    call    SHARE_ERROR
seg000:3740		    jnb	    short DO_SHARE_CHECK
seg000:3742		    mov	    cs:FastOpenFlg, 0
seg000:3748		    call    LcritDisk
seg000:374B		    jmp	    short Clear_FastOpen
seg000:374D ; ---------------------------------------------------------------------------
seg000:374D		    nop
seg000:374E
seg000:374E SHARE_OK:				    ; CODE XREF: seg000:3732j
seg000:374E		    mov	    ax,	3
seg000:3751		    les	    di,	ds:THISSFT
seg000:3755		    call    ds:ShSU
seg000:3759		    mov	    cs:FastOpenFlg, 0
seg000:375F		    call    LcritDisk
seg000:3762
seg000:3762 SET_SFT_MODE:			    ; CODE XREF: seg000:3672j
seg000:3762					    ; DATA XREF: seg000:0EEFo
seg000:3762		    les	    di,	ds:THISSFT
seg000:3766		    call    DEV_OPEN_SFT
seg000:3769		    test    word ptr es:[di+2],	8000h
seg000:376F		    jnz	    short set_sft_mode_not_fcb
seg000:3771		    retn
seg000:3772 ; ---------------------------------------------------------------------------
seg000:3772
seg000:3772 set_sft_mode_not_fcb:		    ; CODE XREF: seg000:376Fj
seg000:3772		    mov	    ax,	ds:CurrentPDB
seg000:3775		    mov	    es:[di+31h], ax
seg000:3779
seg000:3779 Clear_FastOpen:			    ; CODE XREF: seg000:36D3j
seg000:3779					    ; seg000:374Bj ...
seg000:3779		    retn
seg000:377A
seg000:377A ; =============== S	U B R O	U T I N	E =======================================
seg000:377A
seg000:377A
seg000:377A SHARE_ERROR	    proc near		    ; CODE XREF: seg000:373Dp
seg000:377A					    ; DATA XREF: seg000:0EEDo
seg000:377A		    test    word ptr es:[di+2],	8000h
seg000:3780		    jnz	    short HARD_ERR
seg000:3782		    mov	    cl,	es:[di+2]
seg000:3786		    and	    cl,	0F0h
seg000:3789		    cmp	    cl,	0
seg000:378C		    jnz	    short NO_HARD_ERR
seg000:378E
seg000:378E HARD_ERR:				    ; CODE XREF: SHARE_ERROR+6j
seg000:378E		    call    SHARE_VIOLATION
seg000:3791		    jnb	    short Clear_FastOpen
seg000:3793
seg000:3793 NO_HARD_ERR:			    ; CODE XREF: SHARE_ERROR+12j
seg000:3793		    mov	    ax,	20h
seg000:3796		    stc
seg000:3797		    retn
seg000:3797 SHARE_ERROR	    endp
seg000:3797
seg000:3798
seg000:3798 ; =============== S	U B R O	U T I N	E =======================================
seg000:3798
seg000:3798
seg000:3798 Check_Access_AX proc near		    ; CODE XREF: seg000:367Fp
seg000:3798		    mov	    byte ptr ds:Open_Access, al
seg000:379B		    push    bx
seg000:379C		    mov	    bl,	al
seg000:379E		    and	    bl,	0F0h
seg000:37A1		    cmp	    byte ptr ds:fSharing, -1
seg000:37A6		    jnz	    short CheckShareMode
seg000:37A8		    cmp	    bl,	70h
seg000:37AB		    jz	    short CheckAccessMode
seg000:37AD
seg000:37AD CheckShareMode:			    ; CODE XREF: Check_Access_AX+Ej
seg000:37AD		    cmp	    bl,	40h
seg000:37B0		    ja	    short Make_Bad_Access
seg000:37B2
seg000:37B2 CheckAccessMode:			    ; CODE XREF: Check_Access_AX+13j
seg000:37B2		    mov	    bl,	al
seg000:37B4		    and	    bl,	0Fh
seg000:37B7		    cmp	    bl,	2
seg000:37BA		    ja	    short Make_Bad_Access
seg000:37BC		    pop	    bx
seg000:37BD		    clc
seg000:37BE		    retn
seg000:37BF ; ---------------------------------------------------------------------------
seg000:37BF
seg000:37BF Make_Bad_Access:			    ; CODE XREF: Check_Access_AX+18j
seg000:37BF					    ; Check_Access_AX+22j
seg000:37BF		    mov	    ax,	0Ch
seg000:37C2		    pop	    bx
seg000:37C3		    stc
seg000:37C4		    retn
seg000:37C4 Check_Access_AX endp
seg000:37C4
seg000:37C5
seg000:37C5 ; =============== S	U B R O	U T I N	E =======================================
seg000:37C5
seg000:37C5
seg000:37C5 DISK_INFO	    proc near		    ; CODE XREF: seg000:1B07p
seg000:37C5					    ; seg000:1BE7p
seg000:37C5		    call    TestNet
seg000:37C8		    jnb	    short LOCAL_INFO
seg000:37CA		    mov	    ax,	110Ch
seg000:37CD		    int	    2Fh		    ; Multiplex	- NETWORK REDIRECTOR - GET DISK	SPACE
seg000:37CD					    ; ES:DI -> current directory
seg000:37CD					    ; Return: AL = sectors per cluster,	BX = total clusters
seg000:37CD					    ; CX = bytes per sector, DX	= number of available clusters
seg000:37CF		    retn
seg000:37D0 ; ---------------------------------------------------------------------------
seg000:37D0
seg000:37D0 LOCAL_INFO:				    ; CODE XREF: DISK_INFO+3j
seg000:37D0		    mov	    ds:EXTERR_LOCUS, 2
seg000:37D5		    call    EcritDisk
seg000:37D8		    call    FatRead_CDS
seg000:37DB		    jb	    short CRIT_LEAVE
seg000:37DD		    mov	    bx,	2
seg000:37E0		    call    UNPACK
seg000:37E3		    jb	    short CRIT_LEAVE
seg000:37E5		    lds	    si,	ds:CURBUF
seg000:37E9		    mov	    ah,	[si+16]
seg000:37EC		    push    ss
seg000:37ED		    pop	    ds
seg000:37EE		    mov	    cx,	es:[bp+0Dh]
seg000:37F2		    mov	    dx,	es:[bp+1Eh]
seg000:37F6		    cmp	    dx,	-1
seg000:37F9		    jz	    short DoScan
seg000:37FB		    cmp	    dx,	cx
seg000:37FD		    jb	    short GotVal
seg000:37FF
seg000:37FF DoScan:				    ; CODE XREF: DISK_INFO+34j
seg000:37FF		    xor	    dx,	dx
seg000:3801		    dec	    cx
seg000:3802
seg000:3802 SCANFREE:				    ; CODE XREF: DISK_INFO+46j
seg000:3802		    call    UNPACK
seg000:3805		    jb	    short CRIT_LEAVE
seg000:3807		    jnz	    short NOTFREECLUS
seg000:3809		    inc	    dx
seg000:380A
seg000:380A NOTFREECLUS:			    ; CODE XREF: DISK_INFO+42j
seg000:380A		    inc	    bx
seg000:380B		    loop    SCANFREE
seg000:380D		    dec	    bx
seg000:380E
seg000:380E ReturnVals:				    ; CODE XREF: DISK_INFO+5Fj
seg000:380E		    dec	    bx
seg000:380F		    mov	    al,	es:[bp+4]
seg000:3813		    inc	    al
seg000:3815		    mov	    cx,	es:[bp+2]
seg000:3819		    mov	    es:[bp+1Eh], dx
seg000:381D		    clc
seg000:381E
seg000:381E CRIT_LEAVE:				    ; CODE XREF: DISK_INFO+16j
seg000:381E					    ; DISK_INFO+1Ej ...
seg000:381E		    call    LcritDisk
seg000:3821		    retn
seg000:3822 ; ---------------------------------------------------------------------------
seg000:3822
seg000:3822 GotVal:				    ; CODE XREF: DISK_INFO+38j
seg000:3822		    mov	    bx,	cx
seg000:3824		    jmp	    short ReturnVals
seg000:3824 DISK_INFO	    endp
seg000:3824
seg000:3826
seg000:3826 ; =============== S	U B R O	U T I N	E =======================================
seg000:3826
seg000:3826
seg000:3826 DOS_SEARCH_FIRST proc near		    ; CODE XREF: seg000:2BC0p
seg000:3826					    ; seg000:2CB7p ...
seg000:3826		    les	    di,	ds:THISCDS
seg000:382A		    cmp	    di,	-1
seg000:382D		    jnz	    short TEST_RE_NET
seg000:382F		    mov	    ax,	1119h
seg000:3832		    int	    2Fh		    ; Multiplex	- NETWORK REDIRECTOR - ???
seg000:3834		    retn
seg000:3835 ; ---------------------------------------------------------------------------
seg000:3835
seg000:3835 TEST_RE_NET:			    ; CODE XREF: DOS_SEARCH_FIRST+7j
seg000:3835		    test    word ptr es:[di+43h], 8000h
seg000:383B		    jz	    short LOCAL_SEARCH_FIRST
seg000:383D		    mov	    ax,	111Bh
seg000:3840		    int	    2Fh		    ; Multiplex	- NETWORK REDIRECTOR - FINDFIRST
seg000:3840					    ; SS = DS =	DOS CS,	[DTA] =	uninitialized 21-byte findfirst	search data
seg000:3840					    ; SDA first	filename pointer -> fully-qualified search template
seg000:3840					    ; SDA CDS pointer -> current directory
seg000:3840					    ; Return: CF set on	error
seg000:3842		    retn
seg000:3843 ; ---------------------------------------------------------------------------
seg000:3843
seg000:3843 LOCAL_SEARCH_FIRST:			    ; CODE XREF: DOS_SEARCH_FIRST+15j
seg000:3843		    call    EcritDisk
seg000:3846		    mov	    ds:NoSetDir, 1
seg000:384B		    call    GetPath
seg000:384E		    jnb	    short find_check_dev
seg000:3850		    jnz	    short bad_path3
seg000:3852		    or	    cl,	cl
seg000:3854		    jz	    short bad_path3
seg000:3856
seg000:3856 find_no_more:			    ; CODE XREF: DOS_SEARCH_FIRST+93j
seg000:3856					    ; RENAME_NEXT:No_filesj
seg000:3856		    mov	    ax,	12h
seg000:3859
seg000:3859 BadBye:				    ; CODE XREF: DOS_SEARCH_FIRST+3Bj
seg000:3859		    stc
seg000:385A		    call    LcritDisk
seg000:385D		    retn
seg000:385E ; ---------------------------------------------------------------------------
seg000:385E
seg000:385E bad_path3:				    ; CODE XREF: DOS_SEARCH_FIRST+2Aj
seg000:385E					    ; DOS_SEARCH_FIRST+2Ej
seg000:385E		    mov	    ax,	3
seg000:3861		    jmp	    short BadBye
seg000:3863 ; ---------------------------------------------------------------------------
seg000:3863
seg000:3863 find_check_dev:			    ; CODE XREF: DOS_SEARCH_FIRST+28j
seg000:3863		    or	    ah,	ah
seg000:3865		    jns	    short found_entry
seg000:3867		    mov	    ds:LASTENT,	-1
seg000:386D		    inc	    byte ptr ds:fSplice_x2+1
seg000:3871
seg000:3871 found_entry:			    ; CODE XREF: DOS_SEARCH_FIRST+3Fj
seg000:3871		    les	    di,	dword ptr ds:DMAADD
seg000:3875		    mov	    si,	ds:WFP_START
seg000:3879		    lodsb
seg000:387A		    sub	    al,	40h
seg000:387C		    stosb
seg000:387D
seg000:387D found_it:				    ; CODE XREF: RENAME_NEXT+39j
seg000:387D		    les	    di,	dword ptr ds:DMAADD
seg000:3881		    inc	    di
seg000:3882		    mov	    si,	(offset	NAME1_1+1)
seg000:3885		    movsb
seg000:3886		    cmp	    byte ptr es:[di-1],	5
seg000:388B		    jnz	    short NOTKANJB
seg000:388D		    mov	    byte ptr es:[di-1],	0E5h
seg000:3892
seg000:3892 NOTKANJB:				    ; CODE XREF: DOS_SEARCH_FIRST+65j
seg000:3892		    mov	    cx,	10
seg000:3895		    rep	movsb
seg000:3897		    mov	    al,	byte ptr ds:ATTRIB_4+4
seg000:389A		    stosb
seg000:389B		    push    ax
seg000:389C		    mov	    ax,	ds:LASTENT
seg000:389F		    stosw
seg000:38A0		    mov	    ax,	ds:DIRSTART
seg000:38A3		    stosw
seg000:38A4		    add	    di,	4
seg000:38A7		    pop	    ax
seg000:38A8		    or	    ah,	ah
seg000:38AA		    js	    short DOSREL
seg000:38AC		    cmp	    word ptr ds:CURBUF,	-1
seg000:38B1		    jnz	    short OKSTORE
seg000:38B3		    mov	    word ptr es:[di-8],	-1
seg000:38B9		    jmp	    short find_no_more
seg000:38BB ; ---------------------------------------------------------------------------
seg000:38BB
seg000:38BB OKSTORE:				    ; CODE XREF: DOS_SEARCH_FIRST+8Bj
seg000:38BB		    mov	    ds,	word ptr ds:CURBUF+2
seg000:38BF
seg000:38BF DOSREL:				    ; CODE XREF: DOS_SEARCH_FIRST+84j
seg000:38BF		    mov	    si,	bx
seg000:38C1		    mov	    cx,	32
seg000:38C4		    mov	    ax,	di
seg000:38C6		    rep	movsb
seg000:38C8		    mov	    di,	ax
seg000:38CA		    cmp	    byte ptr es:[di], 5
seg000:38CE		    jnz	    short NO05
seg000:38D0		    mov	    byte ptr es:[di], 0E5h
seg000:38D4
seg000:38D4 NO05:				    ; CODE XREF: DOS_SEARCH_FIRST+A8j
seg000:38D4		    push    ss
seg000:38D5		    pop	    ds
seg000:38D6		    clc
seg000:38D7		    call    LcritDisk
seg000:38DA		    retn
seg000:38DA DOS_SEARCH_FIRST endp
seg000:38DA
seg000:38DB
seg000:38DB ; =============== S	U B R O	U T I N	E =======================================
seg000:38DB
seg000:38DB
seg000:38DB DOS_SEARCH_NEXT proc near		    ; CODE XREF: seg000:2C6Ap
seg000:38DB					    ; seg000:2D0Ap
seg000:38DB		    les	    di,	dword ptr ds:DMAADD
seg000:38DF		    mov	    al,	es:[di]
seg000:38E2		    test    al,	80h
seg000:38E4		    jz	    short LOCAL_SEARCH_NEXT
seg000:38E6		    mov	    ax,	111Ch
seg000:38E9		    int	    2Fh		    ; Multiplex	- NETWORK REDIRECTOR - FINDNEXT
seg000:38E9					    ; SS = DS =	DOS CS,	[DTA] =	21-byte	findfirst search data
seg000:38E9					    ; Return: CF set on	error, AX = DOS	error code
seg000:38E9					    ; CF clear if successful
seg000:38EB		    retn
seg000:38EC ; ---------------------------------------------------------------------------
seg000:38EC
seg000:38EC LOCAL_SEARCH_NEXT:			    ; CODE XREF: DOS_SEARCH_NEXT+9j
seg000:38EC		    mov	    ds:EXTERR_LOCUS, 2
seg000:38F1		    call    EcritDisk
seg000:38F4		    mov	    word ptr ds:THISCDS, (offset SETFINDPB+3)
seg000:38FA		    mov	    word ptr ds:THISCDS+2, cs
seg000:38FE		    add	    al,	40h
seg000:3900		    call    InitCDS
seg000:3903		    jb	    short No_files
seg000:3905		    les	    di,	ds:THISCDS
seg000:3909		    les	    bp,	es:[di+45h]
seg000:390D		    call    GOTDPB
seg000:3910		    mov	    al,	es:[bp+0]
seg000:3914		    mov	    byte ptr ds:THISDRV, al
seg000:3917		    mov	    word ptr ds:CREATING, 0E500h
seg000:391D		    mov	    ds:NoSetDir, 1
seg000:3922		    lds	    si,	dword ptr ds:DMAADD
seg000:3926		    lodsb
seg000:3926 DOS_SEARCH_NEXT endp
seg000:3926
seg000:3927
seg000:3927 ; =============== S	U B R O	U T I N	E =======================================
seg000:3927
seg000:3927
seg000:3927 RENAME_NEXT	    proc near		    ; CODE XREF: DOS_RENAME+19Ep
seg000:3927		    push    ss
seg000:3928		    pop	    es
seg000:3929		    mov	    di,	(offset	NAME1_1+1)
seg000:392C		    mov	    cx,	11
seg000:392F		    rep	movsb
seg000:3931		    lodsb
seg000:3932		    mov	    byte ptr ss:ATTRIB_4+4, al
seg000:3936		    lodsw
seg000:3937		    or	    ax,	ax
seg000:3939		    jns	    short cont_load
seg000:393B
seg000:393B No_files:				    ; CODE XREF: DOS_SEARCH_NEXT+28j
seg000:393B					    ; RENAME_NEXT+27j ...
seg000:393B		    jmp	    find_no_more
seg000:393E ; ---------------------------------------------------------------------------
seg000:393E
seg000:393E cont_load:				    ; CODE XREF: RENAME_NEXT+12j
seg000:393E		    push    ax
seg000:393F		    lodsw
seg000:3940		    mov	    bx,	ax
seg000:3942		    push    ss
seg000:3943		    pop	    ds
seg000:3944		    les	    bp,	ds:THISDPB
seg000:3948		    call    SETDIRSRCH
seg000:394B		    jnb	    short SEARCH_GOON
seg000:394D		    pop	    ax
seg000:394E		    jmp	    short No_files
seg000:3950 ; ---------------------------------------------------------------------------
seg000:3950
seg000:3950 SEARCH_GOON:			    ; CODE XREF: RENAME_NEXT+24j
seg000:3950		    call    STARTSRCH
seg000:3953		    pop	    ax
seg000:3954		    call    GetEnt
seg000:3957		    jb	    short No_files
seg000:3959		    call    NextEnt
seg000:395C		    jb	    short No_files
seg000:395E		    xor	    ah,	ah
seg000:3960		    jmp	    found_it
seg000:3960 RENAME_NEXT	    endp
seg000:3960
seg000:3963
seg000:3963 ; =============== S	U B R O	U T I N	E =======================================
seg000:3963
seg000:3963
seg000:3963 DOS_ABORT	    proc near		    ; CODE XREF: FATALC+10Fp
seg000:3963		    mov	    es,	ss:CurrentPDB
seg000:3968		    mov	    cx,	word ptr es:BCON
seg000:396D
seg000:396D reset_free_jfn:			    ; CODE XREF: DOS_ABORT+12j
seg000:396D		    mov	    bx,	cx
seg000:396F		    push    cx
seg000:3970		    dec	    bx
seg000:3971		    call    _$CLOSE
seg000:3974		    pop	    cx
seg000:3975		    loop    reset_free_jfn
seg000:3977		    push    ss
seg000:3978		    pop	    ds
seg000:3979		    mov	    ax,	111Dh
seg000:397C		    int	    2Fh		    ; Multiplex	- NETWORK REDIRECTOR - CLOSE ALL REMOTE	FILES FOR PROCESS
seg000:397C					    ; DS???, SS	= DOS CS
seg000:397E		    call    ds:MFTCloseP
seg000:3982		    les	    di,	ss:SFTFCB
seg000:3987		    mov	    cx,	es:[di+4]
seg000:398B		    jcxz    short FCBScanDone
seg000:398D		    lea	    di,	[di+6]
seg000:3990		    mov	    ax,	ss:PROC_ID
seg000:3994
seg000:3994 FCBTest:				    ; CODE XREF: DOS_ABORT+3Fj
seg000:3994		    cmp	    es:[di+31h], ax
seg000:3998		    jnz	    short FCBNext
seg000:399A		    mov	    word ptr es:[di], 0
seg000:399F
seg000:399F FCBNext:				    ; CODE XREF: DOS_ABORT+35j
seg000:399F		    add	    di,	53
seg000:39A2		    loop    FCBTest
seg000:39A4
seg000:39A4 FCBScanDone:			    ; CODE XREF: DOS_ABORT+28j
seg000:39A4		    xor	    bx,	bx
seg000:39A6
seg000:39A6 Scan:				    ; CODE XREF: DOS_ABORT+6Bj
seg000:39A6		    push    bx
seg000:39A7		    call    SFFromSFN
seg000:39AA		    pop	    bx
seg000:39AB		    jnb	    short Scan1
seg000:39AD		    retn
seg000:39AE ; ---------------------------------------------------------------------------
seg000:39AE
seg000:39AE Scan1:				    ; CODE XREF: DOS_ABORT+48j
seg000:39AE		    cmp	    word ptr es:[di], 0
seg000:39B2		    jz	    short scan_next
seg000:39B4		    mov	    ax,	ss:PROC_ID
seg000:39B8		    cmp	    es:[di+31h], ax
seg000:39BC		    jnz	    short scan_next
seg000:39BE		    mov	    ax,	ss:USER_ID
seg000:39C2		    cmp	    es:[di+2Fh], ax
seg000:39C6		    jnz	    short scan_next
seg000:39C8		    mov	    word ptr es:[di], 0
seg000:39CD
seg000:39CD scan_next:				    ; CODE XREF: DOS_ABORT+4Fj
seg000:39CD					    ; DOS_ABORT+59j ...
seg000:39CD		    inc	    bx
seg000:39CE		    jmp	    short Scan
seg000:39CE DOS_ABORT	    endp
seg000:39CE
seg000:39D0
seg000:39D0 ; =============== S	U B R O	U T I N	E =======================================
seg000:39D0
seg000:39D0
seg000:39D0 DOS_CLOSE	    proc near		    ; CODE XREF: seg000:2471p
seg000:39D0					    ; LRUFCB+C0p ...
seg000:39D0		    les	    di,	ds:THISSFT
seg000:39D4		    mov	    bx,	es:[di+5]
seg000:39D8		    test    bx,	8000h
seg000:39DC		    jz	    short LocalClose
seg000:39DE		    mov	    ax,	1106h
seg000:39E1		    int	    2Fh		    ; Multiplex	- NETWORK REDIRECTOR - CLOSE REMOTE FILE
seg000:39E1					    ; ES:DI -> SFT
seg000:39E1					    ; SFT DPB field -> DPB of drive containing file
seg000:39E1					    ; Return: CF set on	error, AX = DOS	error code
seg000:39E1					    ; CF clear if successful
seg000:39E3		    retn
seg000:39E4 ; ---------------------------------------------------------------------------
seg000:39E4
seg000:39E4 LocalClose:				    ; CODE XREF: DOS_CLOSE+Cj
seg000:39E4		    call    EcritDisk
seg000:39E7		    call    SetSFTTimes
seg000:39EA		    call    FREESFT
seg000:39ED		    push    ss
seg000:39EE		    pop	    ds
seg000:39EF		    push    ax
seg000:39F0		    push    bx
seg000:39F1		    call    ShareEnd
seg000:39F4		    pop	    bx
seg000:39F5		    pop	    ax
seg000:39F6
seg000:39F6 CloseEntry:				    ; CODE XREF: seg000:3AF4p
seg000:39F6		    push    ax
seg000:39F7		    test    bx,	0C0h
seg000:39FB		    jnz	    short FREE_SFT_OK
seg000:39FD
seg000:39FD rdir:
seg000:39FD		    call    DirFromSFT
seg000:3A00		    mov	    al,	5
seg000:3A02		    jb	    short CloseFinish
seg000:3A04
seg000:3A04 clook:
seg000:3A04		    push    di
seg000:3A05		    push    si
seg000:3A06		    lea	    si,	[si+20h]
seg000:3A09		    call    XCHGP
seg000:3A0C		    call    MetaCompare
seg000:3A0F		    call    XCHGP
seg000:3A12		    pop	    si
seg000:3A13		    pop	    di
seg000:3A14		    jz	    short CLOSE_GO
seg000:3A16
seg000:3A16 Bye:				    ; CODE XREF: DOS_CLOSE+5Fj
seg000:3A16		    mov	    di,	si
seg000:3A18		    push    ds
seg000:3A19		    pop	    es
seg000:3A1A		    push    ss
seg000:3A1B		    pop	    ds
seg000:3A1C		    stc
seg000:3A1D		    mov	    al,	2
seg000:3A1F		    jmp	    short CloseFinish
seg000:3A21 ; ---------------------------------------------------------------------------
seg000:3A21
seg000:3A21 CLOSE_GO:				    ; CODE XREF: DOS_CLOSE+44j
seg000:3A21		    mov	    ch,	es:[di+0Bh]
seg000:3A25		    mov	    al,	[si+4]
seg000:3A28		    mov	    byte ptr ss:ATTRIB_4+4, al
seg000:3A2C		    call    MatchAttributes
seg000:3A2F		    jnz	    short Bye
seg000:3A31
seg000:3A31 setattr:
seg000:3A31		    or	    byte ptr es:[di+0Bh], 20h
seg000:3A36		    mov	    ax,	[si+0Bh]
seg000:3A39		    mov	    es:[di+1Ah], ax
seg000:3A3D		    mov	    ax,	[si+11h]
seg000:3A40		    mov	    es:[di+1Ch], ax
seg000:3A44		    mov	    ax,	[si+13h]
seg000:3A47		    mov	    es:[di+1Eh], ax
seg000:3A4B		    mov	    ax,	[si+0Fh]
seg000:3A4E		    mov	    es:[di+18h], ax
seg000:3A52		    mov	    ax,	[si+0Dh]
seg000:3A55		    mov	    es:[di+16h], ax
seg000:3A59		    or	    byte ptr es:[bx+5],	40h
seg000:3A5E
seg000:3A5E yesdirty:
seg000:3A5E		    push    ds
seg000:3A5F		    push    si
seg000:3A60		    push    ss
seg000:3A61		    pop	    ds
seg000:3A62		    mov	    al,	byte ptr ds:THISDRV
seg000:3A65		    push    dx
seg000:3A66		    mov	    ah,	0
seg000:3A68		    mov	    dl,	al
seg000:3A6A
seg000:3A6A do_update:
seg000:3A6A		    call    FastOpen_Update
seg000:3A6D		    pop	    dx
seg000:3A6E		    call    FLUSHBUF
seg000:3A71		    pop	    di
seg000:3A72		    pop	    es
seg000:3A73		    mov	    al,	5
seg000:3A75		    jb	    short CloseFinish
seg000:3A77
seg000:3A77 FREE_SFT_OK:			    ; CODE XREF: DOS_CLOSE+2Bj
seg000:3A77		    clc
seg000:3A78
seg000:3A78 CloseFinish:			    ; CODE XREF: DOS_CLOSE+32j
seg000:3A78					    ; DOS_CLOSE+4Fj ...
seg000:3A78		    pushf
seg000:3A79		    call    DEV_CLOSE_SFT
seg000:3A7C		    popf
seg000:3A7D		    pop	    cx
seg000:3A7E		    pushf
seg000:3A7F		    dec	    cx
seg000:3A80		    jnz	    short NoFree
seg000:3A82		    mov	    es:[di], cx
seg000:3A85
seg000:3A85 NoFree:				    ; CODE XREF: DOS_CLOSE+B0j
seg000:3A85		    call    LcritDisk
seg000:3A88		    popf
seg000:3A89		    retn
seg000:3A89 DOS_CLOSE	    endp
seg000:3A89
seg000:3A8A
seg000:3A8A ; =============== S	U B R O	U T I N	E =======================================
seg000:3A8A
seg000:3A8A
seg000:3A8A FREESFT	    proc near		    ; CODE XREF: DOS_CLOSE+1Ap
seg000:3A8A					    ; DATA XREF: seg000:0EE7o
seg000:3A8A		    pushf
seg000:3A8B		    mov	    ax,	es:[di]
seg000:3A8E		    dec	    ax
seg000:3A8F		    jnz	    short SetCount
seg000:3A91		    dec	    ax
seg000:3A92
seg000:3A92 SetCount:				    ; CODE XREF: FREESFT+5j
seg000:3A92		    xchg    ax,	es:[di]
seg000:3A95		    popf
seg000:3A96		    retn
seg000:3A96 FREESFT	    endp
seg000:3A96
seg000:3A97
seg000:3A97 ; =============== S	U B R O	U T I N	E =======================================
seg000:3A97
seg000:3A97
seg000:3A97 DirFromSFT	    proc near		    ; CODE XREF: DOS_CLOSE:rdirp
seg000:3A97		    mov	    ds:EXTERR_LOCUS, 2
seg000:3A9C		    push    es
seg000:3A9D		    push    di
seg000:3A9E		    mov	    dx,	es:[di+1Dh]
seg000:3AA2		    push    dx
seg000:3AA3		    call    FATREAD_SFT
seg000:3AA6		    pop	    dx
seg000:3AA7		    jb	    short PopDone
seg000:3AA9		    xor	    al,	al
seg000:3AAB		    mov	    ds:ALLOWED,	18h
seg000:3AB0		    call    GETBUFFR
seg000:3AB3		    jb	    short PopDone
seg000:3AB5		    pop	    si
seg000:3AB6		    pop	    ds
seg000:3AB7		    les	    di,	ss:CURBUF
seg000:3ABC		    or	    byte ptr es:[di+5],	4
seg000:3AC1		    mov	    bx,	di
seg000:3AC3		    lea	    di,	[di+10h]
seg000:3AC6		    mov	    al,	32
seg000:3AC8		    mul	    byte ptr [si+1Fh]
seg000:3ACB		    add	    di,	ax
seg000:3ACD		    retn
seg000:3ACE ; ---------------------------------------------------------------------------
seg000:3ACE
seg000:3ACE PopDone:				    ; CODE XREF: DirFromSFT+10j
seg000:3ACE					    ; DirFromSFT+1Cj
seg000:3ACE		    pop	    di
seg000:3ACF		    pop	    es
seg000:3AD0
seg000:3AD0 PopDone_retn:			    ; CODE XREF: seg000:3ADDj
seg000:3AD0		    retn
seg000:3AD0 DirFromSFT	    endp
seg000:3AD0
seg000:3AD1 ; ---------------------------------------------------------------------------
seg000:3AD1
seg000:3AD1 DOS_COMMIT:				    ; CODE XREF: seg000:65D8p
seg000:3AD1					    ; seg000:6CDCp
seg000:3AD1		    les	    di,	ds:THISSFT
seg000:3AD5		    mov	    bx,	es:[di+5]
seg000:3AD9		    test    bx,	0C0h
seg000:3ADD		    jnz	    short PopDone_retn
seg000:3ADF		    test    bx,	8000h
seg000:3AE3		    jz	    short LOCAL_COMMIT
seg000:3AE5		    mov	    ax,	1107h
seg000:3AE8		    int	    2Fh		    ; Multiplex	- NETWORK REDIRECTOR - COMMIT REMOTE FILE
seg000:3AE8					    ; ES:DI -> SFT
seg000:3AE8					    ; SFT DPB field -> DPB of drive containing file
seg000:3AE8					    ; Return: CF set on	error, AX = DOS	error code
seg000:3AE8					    ; CF clear if successful
seg000:3AEA		    retn
seg000:3AEB ; ---------------------------------------------------------------------------
seg000:3AEB
seg000:3AEB LOCAL_COMMIT:			    ; CODE XREF: seg000:3AE3j
seg000:3AEB		    call    EcritDisk
seg000:3AEE		    call    SetSFTTimes
seg000:3AF1		    mov	    ax,	-1
seg000:3AF4		    call    CloseEntry
seg000:3AF7
seg000:3AF7 localcommit_retn:			    ; CODE XREF: SetSFTTimes+4j
seg000:3AF7					    ; SetSFTTimes+Aj
seg000:3AF7		    retn
seg000:3AF8
seg000:3AF8 ; =============== S	U B R O	U T I N	E =======================================
seg000:3AF8
seg000:3AF8
seg000:3AF8 SetSFTTimes	    proc near		    ; CODE XREF: DOS_CLOSE+17p
seg000:3AF8					    ; seg000:3AEEp
seg000:3AF8		    test    bx,	0C0h
seg000:3AFC		    jnz	    short localcommit_retn
seg000:3AFE		    test    bx,	4000h
seg000:3B02		    jnz	    short localcommit_retn
seg000:3B04		    push    ax
seg000:3B05		    push    bx
seg000:3B06		    call    DATE16
seg000:3B09		    mov	    es:[di+0Fh], ax
seg000:3B0D		    mov	    es:[di+0Dh], dx
seg000:3B11		    xor	    ax,	ax
seg000:3B13		    call    ds:ShSU
seg000:3B17		    pop	    bx
seg000:3B18		    pop	    ax
seg000:3B19		    retn
seg000:3B19 SetSFTTimes	    endp
seg000:3B19
seg000:3B1A ; ---------------------------------------------------------------------------
seg000:3B1A
seg000:3B1A DOS_MKDIR:				    ; DATA XREF: seg000:_$MKDIRo
seg000:3B1A		    call    TestNet
seg000:3B1D		    jnb	    short LOCAL_MKDIR
seg000:3B1F		    mov	    ax,	1103h
seg000:3B22		    int	    2Fh		    ; Multiplex	- NETWORK REDIRECTOR - MAKE REMOTE DIRECTORY
seg000:3B22					    ; SS = DOS CS
seg000:3B22					    ; SDA first	filename pointer -> fully-qualified directory name
seg000:3B22					    ; SDA CDS pointer -> current directory
seg000:3B22					    ; Return: CF set on	error, AX = DOS	error code
seg000:3B22					    ; CF clear if successful
seg000:3B24		    retn
seg000:3B25 ; ---------------------------------------------------------------------------
seg000:3B25 ; START OF FUNCTION	CHUNK FOR DOS_CHDIR
seg000:3B25
seg000:3B25 NODEACCERRJ:			    ; CODE XREF: seg000:3B50j
seg000:3B25					    ; seg000:NODEEXISTSj ...
seg000:3B25		    mov	    ax,	5
seg000:3B28
seg000:3B28 BadRet:				    ; CODE XREF: DOS_CHDIR+61j
seg000:3B28		    stc
seg000:3B29		    call    LcritDisk
seg000:3B2C		    retn
seg000:3B2C ; END OF FUNCTION CHUNK FOR	DOS_CHDIR
seg000:3B2D ; ---------------------------------------------------------------------------
seg000:3B2D
seg000:3B2D PATHNFJ:				    ; CODE XREF: seg000:3B4Bj
seg000:3B2D		    call    LcritDisk
seg000:3B30		    jmp	    SET_MKND_ERR
seg000:3B33 ; ---------------------------------------------------------------------------
seg000:3B33
seg000:3B33 LOCAL_MKDIR:			    ; CODE XREF: seg000:3B1Dj
seg000:3B33		    call    EcritDisk
seg000:3B36		    mov	    word ptr ds:THISSFT+2, ss
seg000:3B3A		    mov	    word ptr ds:THISSFT, offset	RENBUF
seg000:3B40		    mov	    ds:RENBUF_SF_ENTRY_sf_MFT, 0
seg000:3B46		    mov	    al,	10h
seg000:3B48		    call    MakeNode
seg000:3B4B		    jb	    short PATHNFJ
seg000:3B4D		    cmp	    ax,	3
seg000:3B50		    jz	    short NODEACCERRJ
seg000:3B52		    les	    bp,	ds:THISDPB
seg000:3B56		    lds	    di,	ds:CURBUF
seg000:3B5A		    sub	    si,	di
seg000:3B5C		    push    si
seg000:3B5D		    push    word ptr [di+6]
seg000:3B60		    push    ss
seg000:3B61		    pop	    ds
seg000:3B62		    push    ds:DIRSTART
seg000:3B66		    xor	    ax,	ax
seg000:3B68		    mov	    ds:DIRSTART, ax
seg000:3B6B		    call    NEWDIR
seg000:3B6E		    jb	    short NODEEXISTSPOPDEL
seg000:3B70		    call    GetEnt
seg000:3B73		    jb	    short NODEEXISTSPOPDEL
seg000:3B75		    les	    di,	ds:CURBUF
seg000:3B79		    or	    byte ptr es:[di+5],	40h
seg000:3B7E
seg000:3B7E yesdirty1:
seg000:3B7E		    add	    di,	16
seg000:3B81		    mov	    ax,	202Eh
seg000:3B84		    mov	    dx,	ds:DIRSTART
seg000:3B88		    call    SETDOTENT
seg000:3B8B		    mov	    ax,	2E2Eh
seg000:3B8E		    pop	    dx
seg000:3B8F		    call    SETDOTENT
seg000:3B92		    les	    bp,	ds:THISDPB
seg000:3B96		    mov	    ds:ALLOWED,	18h
seg000:3B9B		    pop	    dx
seg000:3B9C		    xor	    al,	al
seg000:3B9E		    call    GETBUFFR
seg000:3BA1		    jb	    short NODEEXISTSP
seg000:3BA3		    mov	    dx,	ds:DIRSTART
seg000:3BA7		    lds	    di,	ds:CURBUF
seg000:3BAB		    or	    byte ptr [di+5], 4
seg000:3BAF		    pop	    si
seg000:3BB0		    add	    si,	di
seg000:3BB2		    mov	    [si], dx
seg000:3BB4		    xor	    dx,	dx
seg000:3BB6		    mov	    [si+2], dx
seg000:3BB9		    mov	    [si+4], dx
seg000:3BBC
seg000:3BBC ; =============== S	U B R O	U T I N	E =======================================
seg000:3BBC
seg000:3BBC
seg000:3BBC DIRUP	    proc near		    ; CODE XREF: seg000:3BF3p
seg000:3BBC					    ; DOS_CHDIR+F9j
seg000:3BBC		    or	    byte ptr [di+5], 40h
seg000:3BC0
seg000:3BC0 yesdirty2:
seg000:3BC0		    push    ss
seg000:3BC1		    pop	    ds
seg000:3BC2		    mov	    al,	es:[bp+0]
seg000:3BC6		    call    FLUSHBUF
seg000:3BC9		    mov	    ax,	5
seg000:3BCC		    call    LcritDisk
seg000:3BCF		    retn
seg000:3BCF DIRUP	    endp
seg000:3BCF
seg000:3BD0 ; ---------------------------------------------------------------------------
seg000:3BD0
seg000:3BD0 NODEEXISTSPOPDEL:			    ; CODE XREF: seg000:3B6Ej
seg000:3BD0					    ; seg000:3B73j
seg000:3BD0		    pop	    dx
seg000:3BD1		    pop	    dx
seg000:3BD2		    les	    bp,	ds:THISDPB
seg000:3BD6		    mov	    ds:ALLOWED,	18h
seg000:3BDB		    xor	    al,	al
seg000:3BDD		    call    GETBUFFR
seg000:3BE0		    jb	    short NODEEXISTSP
seg000:3BE2		    lds	    di,	ds:CURBUF
seg000:3BE6		    or	    byte ptr [di+5], 4
seg000:3BEA		    pop	    si
seg000:3BEB		    add	    si,	di
seg000:3BED		    sub	    si,	1Ah
seg000:3BF0		    mov	    byte ptr [si], 0E5h
seg000:3BF3		    call    DIRUP
seg000:3BF6
seg000:3BF6 NODEEXISTS:				    ; CODE XREF: seg000:3BFAj
seg000:3BF6		    jmp	    NODEACCERRJ
seg000:3BF9 ; ---------------------------------------------------------------------------
seg000:3BF9
seg000:3BF9 NODEEXISTSP:			    ; CODE XREF: seg000:3BA1j
seg000:3BF9					    ; seg000:3BE0j
seg000:3BF9		    pop	    si
seg000:3BFA		    jmp	    short NODEEXISTS
seg000:3BFC
seg000:3BFC ; =============== S	U B R O	U T I N	E =======================================
seg000:3BFC
seg000:3BFC
seg000:3BFC DOS_CHDIR	    proc near		    ; CODE XREF: seg000:2E10p
seg000:3BFC					    ; seg000:4AF7p
seg000:3BFC
seg000:3BFC ; FUNCTION CHUNK AT	seg000:3B25 SIZE 00000008 BYTES
seg000:3BFC ; FUNCTION CHUNK AT	seg000:3C65 SIZE 00000093 BYTES
seg000:3BFC
seg000:3BFC		    call    TestNet
seg000:3BFF		    jnb	    short LOCAL_CHDIR
seg000:3C01		    mov	    ax,	1105h
seg000:3C04		    int	    2Fh		    ; Multiplex	- NETWORK REDIRECTOR - CHDIR
seg000:3C04					    ; SS = DOS CS
seg000:3C04					    ; SDA first	filename pointer -> fully-qualified directory name
seg000:3C04					    ; SDA CDS pointer -> current directory
seg000:3C04					    ; Return: CF set on	error, AX = DOS	error code
seg000:3C04					    ; CF clear if successful
seg000:3C06		    retn
seg000:3C07 ; ---------------------------------------------------------------------------
seg000:3C07
seg000:3C07 LOCAL_CHDIR:			    ; CODE XREF: DOS_CHDIR+3j
seg000:3C07		    call    EcritDisk
seg000:3C0A		    mov	    ds:NoSetDir, 0
seg000:3C0F		    mov	    byte ptr ds:ExtFCB+1, 16h
seg000:3C14		    or	    ds:FastOpenFlg, 1
seg000:3C19		    call    GetPath
seg000:3C1C		    mov	    ds:FastOpenFlg, 0
seg000:3C21		    mov	    ax,	3
seg000:3C24		    jb	    short ChDirDone
seg000:3C26		    jnz	    short NOTDIRPATH
seg000:3C28		    mov	    cx,	ds:DIRSTART
seg000:3C2C		    clc
seg000:3C2D
seg000:3C2D ChDirDone:				    ; CODE XREF: DOS_CHDIR+28j
seg000:3C2D		    call    LcritDisk
seg000:3C30		    retn
seg000:3C31 ; ---------------------------------------------------------------------------
seg000:3C31
seg000:3C31 DOS_RMDIR:				    ; DATA XREF: seg000:2DECo
seg000:3C31		    call    TestNet
seg000:3C34		    jnb	    short LOCAL_RMDIR
seg000:3C36		    mov	    ax,	1101h
seg000:3C39		    int	    2Fh		    ; Multiplex	- NETWORK REDIRECTOR - REMOVE REMOTE DIRECTORY
seg000:3C39					    ; SS = DOS CS
seg000:3C39					    ; SDA first	filename pointer -> fully-qualified directory name
seg000:3C39					    ; SDA CDS pointer -> current directory
seg000:3C39					    ; Return: CF set on	error, AX = DOS	error code
seg000:3C39					    ; CF clear if successful
seg000:3C3B		    retn
seg000:3C3C ; ---------------------------------------------------------------------------
seg000:3C3C
seg000:3C3C LOCAL_RMDIR:			    ; CODE XREF: DOS_CHDIR+38j
seg000:3C3C		    call    EcritDisk
seg000:3C3F		    mov	    ds:NoSetDir, 0
seg000:3C44		    mov	    byte ptr ds:ExtFCB+1, 16h
seg000:3C49		    call    GetPath
seg000:3C4C		    jb	    short NOPATH
seg000:3C4E		    jnz	    short NOTDIRPATH
seg000:3C50		    mov	    di,	ds:DIRSTART
seg000:3C54		    or	    di,	di
seg000:3C56		    jnz	    short rmdir_get_buf
seg000:3C58		    jmp	    short NOTDIRPATH
seg000:3C5A ; ---------------------------------------------------------------------------
seg000:3C5A
seg000:3C5A NOPATH:				    ; CODE XREF: DOS_CHDIR+50j
seg000:3C5A		    mov	    ax,	3
seg000:3C5D		    jmp	    BadRet
seg000:3C60 ; ---------------------------------------------------------------------------
seg000:3C60
seg000:3C60 NOTDIRPATHPOP:			    ; CODE XREF: DOS_CHDIR+8Aj
seg000:3C60					    ; DOS_CHDIR+96j ...
seg000:3C60		    pop	    ax
seg000:3C61
seg000:3C61 NOTDIRPATHPOP2:			    ; CODE XREF: DOS_CHDIR+D7j
seg000:3C61		    pop	    ax
seg000:3C62
seg000:3C62 NOTDIRPATH:				    ; CODE XREF: DOS_CHDIR+2Aj
seg000:3C62					    ; DOS_CHDIR+52j ...
seg000:3C62		    jmp	    NODEACCERRJ
seg000:3C62 DOS_CHDIR	    endp
seg000:3C62
seg000:3C65 ; ---------------------------------------------------------------------------
seg000:3C65 ; START OF FUNCTION	CHUNK FOR DOS_CHDIR
seg000:3C65
seg000:3C65 rmdir_get_buf:			    ; CODE XREF: DOS_CHDIR+5Aj
seg000:3C65		    lds	    di,	ds:CURBUF
seg000:3C69		    sub	    bx,	di
seg000:3C6B		    push    bx
seg000:3C6C		    push    word ptr [di+6]
seg000:3C6F		    push    ss
seg000:3C70		    pop	    ds
seg000:3C71		    push    ss
seg000:3C72		    pop	    es
seg000:3C73		    mov	    di,	(offset	NAME1_1+1)
seg000:3C76		    mov	    al,	'?'
seg000:3C78		    mov	    cx,	11
seg000:3C7B		    rep	stosb
seg000:3C7D		    xor	    al,	al
seg000:3C7F		    stosb
seg000:3C80		    call    STARTSRCH
seg000:3C83		    call    GETENTRY
seg000:3C86		    jb	    short NOTDIRPATHPOP
seg000:3C88		    mov	    ds,	word ptr ds:CURBUF+2
seg000:3C8C		    mov	    si,	bx
seg000:3C8E		    lodsw
seg000:3C8F		    cmp	    ax,	202Eh
seg000:3C92		    jnz	    short NOTDIRPATHPOP
seg000:3C94		    add	    si,	30
seg000:3C97		    lodsw
seg000:3C98		    cmp	    ax,	'..'
seg000:3C9B		    jnz	    short NOTDIRPATHPOP
seg000:3C9D		    push    ss
seg000:3C9E		    pop	    ds
seg000:3C9F		    mov	    ds:LASTENT,	2
seg000:3CA5		    call    GETENTRY
seg000:3CA8		    jb	    short NOTDIRPATHPOP
seg000:3CAA		    mov	    byte ptr ds:ATTRIB_4+4, 16h
seg000:3CAF		    call    SRCH
seg000:3CB2		    jnb	    short NOTDIRPATHPOP
seg000:3CB4		    cmp	    ds:FAILERR,	0
seg000:3CB9		    jnz	    short NOTDIRPATHPOP
seg000:3CBB		    les	    bp,	ds:THISDPB
seg000:3CBF		    mov	    bx,	ds:DIRSTART
seg000:3CC3		    call    RELEASE
seg000:3CC6		    jb	    short NOTDIRPATHPOP
seg000:3CC8		    pop	    dx
seg000:3CC9		    mov	    ds:ALLOWED,	18h
seg000:3CCE		    xor	    al,	al
seg000:3CD0		    call    GETBUFFR
seg000:3CD3		    jb	    short NOTDIRPATHPOP2
seg000:3CD5		    lds	    di,	ds:CURBUF
seg000:3CD9		    or	    byte ptr [di+5], 4
seg000:3CDD		    pop	    bx
seg000:3CDE		    add	    bx,	di
seg000:3CE0		    mov	    byte ptr [bx], 0E5h
seg000:3CE3		    push    ds
seg000:3CE4		    push    ss
seg000:3CE5		    pop	    ds
seg000:3CE6		    push    ax
seg000:3CE7		    mov	    si,	ds:WFP_START
seg000:3CEB		    mov	    bx,	offset FastTable
seg000:3CEE		    mov	    al,	3
seg000:3CF0		    call    dword ptr [bx+2]
seg000:3CF3		    pop	    ax
seg000:3CF4		    pop	    ds
seg000:3CF5		    jmp	    DIRUP
seg000:3CF5 ; END OF FUNCTION CHUNK FOR	DOS_CHDIR
seg000:3CF8
seg000:3CF8 ; =============== S	U B R O	U T I N	E =======================================
seg000:3CF8
seg000:3CF8
seg000:3CF8 SWAPBACK	    proc near		    ; CODE XREF: DOS_READ+130p
seg000:3CF8					    ; DOS_WRITE+139p ...
seg000:3CF8		    mov	    ds:CONSWAP,	0
seg000:3CFD		    retn
seg000:3CFD SWAPBACK	    endp
seg000:3CFD
seg000:3CFE
seg000:3CFE ; =============== S	U B R O	U T I N	E =======================================
seg000:3CFE
seg000:3CFE
seg000:3CFE SWAPCON	    proc near		    ; CODE XREF: DOS_READ:READCONp
seg000:3CFE					    ; DOS_WRITE+124p
seg000:3CFE		    push    es
seg000:3CFF		    push    di
seg000:3D00		    mov	    ds:CONSWAP,	1
seg000:3D05		    les	    di,	ds:THISSFT
seg000:3D09		    mov	    word ptr ds:CONSFT,	di
seg000:3D0D		    mov	    word ptr ds:CONSFT+2, es
seg000:3D11		    pop	    di
seg000:3D12		    pop	    es
seg000:3D13		    retn
seg000:3D13 SWAPCON	    endp
seg000:3D13
seg000:3D14
seg000:3D14 ; =============== S	U B R O	U T I N	E =======================================
seg000:3D14
seg000:3D14
seg000:3D14 DOS_READ	    proc near		    ; CODE XREF: IOIN+3p
seg000:3D14					    ; _$READ+44p
seg000:3D14					    ; DATA XREF: ...
seg000:3D14		    les	    di,	ds:THISSFT
seg000:3D18		    mov	    al,	es:[di+2]
seg000:3D1C		    and	    al,	0Fh
seg000:3D1E		    cmp	    al,	1
seg000:3D20		    jnz	    short READ_NO_MODE
seg000:3D22		    jmp	    SET_ACC_ERR
seg000:3D25 ; ---------------------------------------------------------------------------
seg000:3D25
seg000:3D25 READ_NO_MODE:			    ; CODE XREF: DOS_READ+Cj
seg000:3D25		    call    SETUP
seg000:3D28		    jcxz    short NoIORet
seg000:3D2A		    call    IsSFTNet
seg000:3D2D		    jz	    short LOCAL_READ
seg000:3D2F		    mov	    ax,	1108h
seg000:3D32		    int	    2Fh		    ; Multiplex	- NETWORK REDIRECTOR - READ FROM REMOTE	FILE
seg000:3D32					    ; ES:DI -> SFT
seg000:3D32					    ; SFT DPB field -> DPB of drive containing file
seg000:3D32					    ; CX = number of bytes, SS = DOS CS, SDA DTA field -> user buffer
seg000:3D32					    ; Return: CF set on	error, CX = bytes read
seg000:3D34		    retn
seg000:3D35 ; ---------------------------------------------------------------------------
seg000:3D35
seg000:3D35 NoIORet:				    ; CODE XREF: DOS_READ+14j
seg000:3D35		    clc
seg000:3D36		    retn
seg000:3D37 ; ---------------------------------------------------------------------------
seg000:3D37
seg000:3D37 LOCAL_READ:				    ; CODE XREF: DOS_READ+19j
seg000:3D37		    test    word ptr es:[di+5],	80h
seg000:3D3D		    jnz	    short READDEV
seg000:3D3F		    mov	    ds:EXTERR_LOCUS, 2
seg000:3D44		    call    EcritDisk
seg000:3D47		    call    DISKREAD
seg000:3D4A		    call    LcritDisk
seg000:3D4D		    retn
seg000:3D4E ; ---------------------------------------------------------------------------
seg000:3D4E
seg000:3D4E READDEV:				    ; CODE XREF: DOS_READ+29j
seg000:3D4E		    mov	    ds:EXTERR_LOCUS, 4
seg000:3D53		    mov	    bl,	es:[di+5]
seg000:3D57		    les	    di,	dword ptr ds:DMAADD
seg000:3D5B		    test    bl,	40h
seg000:3D5E		    jz	    short ENDRDDEVJ3
seg000:3D60		    test    bl,	4
seg000:3D63		    jz	    short TESTRAW
seg000:3D65		    xor	    al,	al
seg000:3D67
seg000:3D67 ENDRDDEVJ3:				    ; CODE XREF: DOS_READ+4Aj
seg000:3D67					    ; DOS_READ+A7j
seg000:3D67		    jmp	    ENDRDDEVJ2
seg000:3D6A ; ---------------------------------------------------------------------------
seg000:3D6A
seg000:3D6A TESTRAW:				    ; CODE XREF: DOS_READ+4Fj
seg000:3D6A		    test    bl,	20h
seg000:3D6D		    jnz	    short DVRDRAW
seg000:3D6F		    test    bl,	1
seg000:3D72		    jz	    short NOTRDCON
seg000:3D74		    jmp	    READCON
seg000:3D77 ; ---------------------------------------------------------------------------
seg000:3D77
seg000:3D77 DVRDRAW:				    ; CODE XREF: DOS_READ+59j
seg000:3D77		    push    es
seg000:3D78		    pop	    ds
seg000:3D79
seg000:3D79 ReadRawRetry:			    ; CODE XREF: DOS_READ+94j
seg000:3D79		    mov	    bx,	di
seg000:3D7B		    xor	    ax,	ax
seg000:3D7D		    mov	    dx,	ax
seg000:3D7F		    call    SETREAD
seg000:3D82		    push    ds
seg000:3D83		    lds	    si,	ss:THISSFT
seg000:3D88		    call    DEVIOCALL
seg000:3D8B		    mov	    dx,	di
seg000:3D8D		    mov	    ah,	86h
seg000:3D8F		    mov	    di,	word ptr ss:DEVCALL_REQSTAT
seg000:3D94		    test    di,	8000h
seg000:3D98		    jz	    short CRDROK
seg000:3D9A		    call    CHARHARD
seg000:3D9D		    mov	    di,	dx
seg000:3D9F		    or	    al,	al
seg000:3DA1		    jz	    short CRDROK
seg000:3DA3		    cmp	    al,	3
seg000:3DA5		    jz	    short CRDFERR
seg000:3DA7		    pop	    ds
seg000:3DA8		    jmp	    short ReadRawRetry
seg000:3DAA ; ---------------------------------------------------------------------------
seg000:3DAA
seg000:3DAA CRDFERR:				    ; CODE XREF: DOS_READ+91j
seg000:3DAA					    ; DOS_WRITE+73j ...
seg000:3DAA		    pop	    di
seg000:3DAB
seg000:3DAB DEVIOFERR:				    ; CODE XREF: DOS_READ+E8j
seg000:3DAB		    les	    di,	ss:THISSFT
seg000:3DB0		    jmp	    SET_ACC_ERR_DS
seg000:3DB3 ; ---------------------------------------------------------------------------
seg000:3DB3
seg000:3DB3 CRDROK:				    ; CODE XREF: DOS_READ+84j
seg000:3DB3					    ; DOS_READ+8Dj
seg000:3DB3		    pop	    di
seg000:3DB4		    mov	    di,	dx
seg000:3DB6		    add	    di,	word ptr ss:CALLSCNT
seg000:3DBB		    jmp	    short ENDRDDEVJ3
seg000:3DBD ; ---------------------------------------------------------------------------
seg000:3DBD
seg000:3DBD NOTRDCON:				    ; CODE XREF: DOS_READ+5Ej
seg000:3DBD		    mov	    ax,	es
seg000:3DBF		    mov	    ds,	ax
seg000:3DC1		    mov	    bx,	di
seg000:3DC3		    xor	    dx,	dx
seg000:3DC5		    mov	    ax,	dx
seg000:3DC7		    push    cx
seg000:3DC8		    mov	    cx,	1
seg000:3DCB		    call    SETREAD
seg000:3DCE		    pop	    cx
seg000:3DCF		    lds	    si,	ss:THISSFT
seg000:3DD4		    lds	    si,	[si+7]
seg000:3DD7
seg000:3DD7 DVRDLP:				    ; CODE XREF: DOS_READ+E4j
seg000:3DD7					    ; DOS_READ+113j
seg000:3DD7		    call    DSKSTATCHK
seg000:3DDA		    call    DEVIOCALL2
seg000:3DDD		    push    di
seg000:3DDE		    mov	    ah,	86h
seg000:3DE0		    mov	    di,	word ptr ss:DEVCALL_REQSTAT
seg000:3DE5		    test    di,	8000h
seg000:3DE9		    jz	    short CRDOK
seg000:3DEB		    call    CHARHARD
seg000:3DEE		    pop	    di
seg000:3DEF		    mov	    word ptr ss:CALLSCNT, 1
seg000:3DF6		    cmp	    al,	1
seg000:3DF8		    jz	    short DVRDLP
seg000:3DFA		    cmp	    al,	3
seg000:3DFC		    jz	    short DEVIOFERR
seg000:3DFE		    xor	    al,	al
seg000:3E00		    jmp	    short DVRDIGN
seg000:3E02 ; ---------------------------------------------------------------------------
seg000:3E02
seg000:3E02 CRDOK:				    ; CODE XREF: DOS_READ+D5j
seg000:3E02		    pop	    di
seg000:3E03		    cmp	    word ptr ss:CALLSCNT, 1
seg000:3E09		    jnz	    short ENDRDDEVJ2
seg000:3E0B		    push    ds
seg000:3E0C		    mov	    ds,	ss:CALLXAD_2
seg000:3E11		    mov	    al,	[di]
seg000:3E13		    pop	    ds
seg000:3E14
seg000:3E14 DVRDIGN:				    ; CODE XREF: DOS_READ+ECj
seg000:3E14		    inc	    word ptr ss:CALLXAD
seg000:3E19		    mov	    word ptr ss:DEVCALL_REQSTAT, 0
seg000:3E20		    inc	    di
seg000:3E21		    cmp	    al,	1Ah
seg000:3E23		    jz	    short ENDRDDEVJ2
seg000:3E25		    cmp	    al,	0Dh
seg000:3E27		    loopne  DVRDLP
seg000:3E29		    inc	    ax
seg000:3E2A
seg000:3E2A ENDRDDEVJ2:				    ; CODE XREF: DOS_READ:ENDRDDEVJ3j
seg000:3E2A					    ; DOS_READ+F5j ...
seg000:3E2A		    jmp	    short ENDRDDEV
seg000:3E2C ; ---------------------------------------------------------------------------
seg000:3E2C
seg000:3E2C TRANBUF:				    ; CODE XREF: DOS_READ+123j
seg000:3E2C					    ; DOS_READ+155j ...
seg000:3E2C		    lodsb
seg000:3E2D		    stosb
seg000:3E2E		    cmp	    al,	0Dh
seg000:3E30		    jnz	    short NORMCH
seg000:3E32		    mov	    byte ptr [si], 0Ah
seg000:3E35
seg000:3E35 NORMCH:				    ; CODE XREF: DOS_READ+11Cj
seg000:3E35		    cmp	    al,	0Ah
seg000:3E37		    loopne  TRANBUF
seg000:3E39		    jnz	    short ENDRDCON
seg000:3E3B		    xor	    si,	si
seg000:3E3D		    call    OUTT
seg000:3E40		    or	    al,	1
seg000:3E42
seg000:3E42 ENDRDCON:				    ; CODE XREF: DOS_READ+125j
seg000:3E42					    ; DOS_READ+183j
seg000:3E42		    push    ss
seg000:3E43		    pop	    ds
seg000:3E44		    call    SWAPBACK
seg000:3E47		    mov	    ds:CONTPOS,	si
seg000:3E4B
seg000:3E4B ENDRDDEV:				    ; CODE XREF: DOS_READ:ENDRDDEVJ2j
seg000:3E4B		    push    ss
seg000:3E4C		    pop	    ds
seg000:3E4D		    mov	    ds:NEXTADD,	di
seg000:3E51		    jnz	    short SETSFTC
seg000:3E53		    les	    di,	ds:THISSFT
seg000:3E57		    and	    byte ptr es:[di+5],	0BFh
seg000:3E5C
seg000:3E5C SETSFTC:				    ; CODE XREF: DOS_READ+13Dj
seg000:3E5C		    call    SETSFT
seg000:3E5F		    retn
seg000:3E60 ; ---------------------------------------------------------------------------
seg000:3E60
seg000:3E60 READCON:				    ; CODE XREF: DOS_READ+60j
seg000:3E60		    call    SWAPCON
seg000:3E63		    mov	    si,	ds:CONTPOS
seg000:3E67		    or	    si,	si
seg000:3E69		    jnz	    short TRANBUF
seg000:3E6B		    cmp	    byte ptr ds:CONBUF,	128
seg000:3E70		    jz	    short GETBUF
seg000:3E72		    mov	    ds:CONBUF, 0FF80h
seg000:3E78
seg000:3E78 GETBUF:				    ; CODE XREF: DOS_READ+15Cj
seg000:3E78		    push    cx
seg000:3E79		    push    es
seg000:3E7A		    push    di
seg000:3E7B		    mov	    dx,	offset CONBUF
seg000:3E7E		    call    _$STD_CON_STRING_INPUT
seg000:3E81		    pop	    di
seg000:3E82		    pop	    es
seg000:3E83		    pop	    cx
seg000:3E84		    mov	    si,	offset CONBUF_2
seg000:3E87		    cmp	    byte ptr [si], 1Ah
seg000:3E8A		    jnz	    short TRANBUF
seg000:3E8C		    mov	    al,	1Ah
seg000:3E8E		    stosb
seg000:3E8F		    dec	    di
seg000:3E90		    mov	    al,	0Ah
seg000:3E92		    call    OUTT
seg000:3E95		    xor	    si,	si
seg000:3E97		    jmp	    short ENDRDCON
seg000:3E97 DOS_READ	    endp
seg000:3E97
seg000:3E99
seg000:3E99 ; =============== S	U B R O	U T I N	E =======================================
seg000:3E99
seg000:3E99
seg000:3E99 DOS_WRITE	    proc near		    ; CODE XREF: seg000:29B4p
seg000:3E99					    ; IOFUNC+C5p
seg000:3E99					    ; DATA XREF: ...
seg000:3E99		    les	    di,	ds:THISSFT
seg000:3E9D		    mov	    al,	es:[di+2]
seg000:3EA1		    and	    al,	0Fh
seg000:3EA3		    cmp	    al,	0
seg000:3EA5		    jnz	    short Check_FCB_RO
seg000:3EA7
seg000:3EA7 BadMode:				    ; CODE XREF: DOS_WRITE+1Ej
seg000:3EA7		    jmp	    SET_ACC_ERR
seg000:3EAA ; ---------------------------------------------------------------------------
seg000:3EAA
seg000:3EAA Check_FCB_RO:			    ; CODE XREF: DOS_WRITE+Cj
seg000:3EAA		    test    word ptr es:[di+2],	8000h
seg000:3EB0		    jz	    short WRITE_NO_MODE
seg000:3EB2		    test    byte ptr es:[di+4],	1
seg000:3EB7		    jnz	    short BadMode
seg000:3EB9
seg000:3EB9 WRITE_NO_MODE:			    ; CODE XREF: DOS_WRITE+17j
seg000:3EB9		    call    SETUP
seg000:3EBC		    call    IsSFTNet
seg000:3EBF		    jz	    short LOCAL_WRITE
seg000:3EC1		    mov	    ax,	1109h
seg000:3EC4		    int	    2Fh		    ; Multiplex	- NETWORK REDIRECTOR - WRITE TO	REMOTE FILE
seg000:3EC4					    ; ES:DI -> SFT
seg000:3EC4					    ; SFT DPB field -> DPB of drive containing file
seg000:3EC4					    ; CX = number of bytes, SS = DOS CS, SDA DTA field -> user buffer
seg000:3EC4					    ; Return: CF set on	error, CX = bytes written
seg000:3EC6		    retn
seg000:3EC7 ; ---------------------------------------------------------------------------
seg000:3EC7
seg000:3EC7 LOCAL_WRITE:			    ; CODE XREF: DOS_WRITE+26j
seg000:3EC7		    test    word ptr es:[di+5],	80h
seg000:3ECD		    jnz	    short WRTDEV
seg000:3ECF		    mov	    ds:EXTERR_LOCUS, 2
seg000:3ED4		    call    EcritDisk
seg000:3ED7		    call    DISKWRITE
seg000:3EDA		    call    LcritDisk
seg000:3EDD		    retn
seg000:3EDE ; ---------------------------------------------------------------------------
seg000:3EDE
seg000:3EDE DVWRTRAW:				    ; CODE XREF: DOS_WRITE+70j
seg000:3EDE					    ; DOS_WRITE+ABj
seg000:3EDE		    xor	    ax,	ax
seg000:3EE0		    call    SETWRITE
seg000:3EE3		    push    ds
seg000:3EE4		    lds	    si,	ss:THISSFT
seg000:3EE9		    call    DEVIOCALL
seg000:3EEC		    mov	    dx,	di
seg000:3EEE		    mov	    ah,	87h
seg000:3EF0		    mov	    di,	word ptr ss:DEVCALL_REQSTAT
seg000:3EF5		    test    di,	8000h
seg000:3EF9		    jz	    short CWRTROK
seg000:3EFB		    call    CHARHARD
seg000:3EFE		    mov	    bx,	dx
seg000:3F00		    or	    al,	al
seg000:3F02		    jz	    short CWRTROK
seg000:3F04		    cmp	    al,	3
seg000:3F06		    jz	    short CWRFERR
seg000:3F08		    pop	    ds
seg000:3F09		    jmp	    short DVWRTRAW
seg000:3F0B ; ---------------------------------------------------------------------------
seg000:3F0B
seg000:3F0B CWRFERR:				    ; CODE XREF: DOS_WRITE+6Dj
seg000:3F0B		    pop	    ax
seg000:3F0C		    jmp	    CRDFERR
seg000:3F0F ; ---------------------------------------------------------------------------
seg000:3F0F
seg000:3F0F CWRTROK:				    ; CODE XREF: DOS_WRITE+60j
seg000:3F0F					    ; DOS_WRITE+69j
seg000:3F0F		    pop	    ax
seg000:3F10		    pop	    ds
seg000:3F11		    mov	    ax,	word ptr ds:CALLSCNT
seg000:3F14
seg000:3F14 ENDWRDEV:				    ; CODE XREF: DOS_WRITE+9Aj
seg000:3F14					    ; DOS_WRITE+11Ej ...
seg000:3F14		    les	    di,	ds:THISSFT
seg000:3F18		    mov	    cx,	ax
seg000:3F1A		    call    ADDREC
seg000:3F1D		    retn
seg000:3F1E ; ---------------------------------------------------------------------------
seg000:3F1E
seg000:3F1E WRTNUL:				    ; CODE XREF: DOS_WRITE+B3j
seg000:3F1E		    mov	    dx,	cx
seg000:3F20
seg000:3F20 WRTCOOKJ:				    ; CODE XREF: DOS_WRITE+BAj
seg000:3F20		    jmp	    WRTCOOKDONE
seg000:3F23 ; ---------------------------------------------------------------------------
seg000:3F23
seg000:3F23 WRTDEV:				    ; CODE XREF: DOS_WRITE+34j
seg000:3F23		    mov	    ds:EXTERR_LOCUS, 4
seg000:3F28		    or	    byte ptr es:[di+5],	40h
seg000:3F2D		    mov	    bl,	es:[di+5]
seg000:3F31		    xor	    ax,	ax
seg000:3F33		    jcxz    short ENDWRDEV
seg000:3F35		    push    ds
seg000:3F36		    mov	    al,	bl
seg000:3F38		    lds	    bx,	dword ptr ds:DMAADD
seg000:3F3C		    mov	    di,	bx
seg000:3F3E		    xor	    dx,	dx
seg000:3F40		    test    al,	20h
seg000:3F42		    jz	    short TEST_DEV_CON
seg000:3F44		    jmp	    short DVWRTRAW
seg000:3F46 ; ---------------------------------------------------------------------------
seg000:3F46
seg000:3F46 TEST_DEV_CON:			    ; CODE XREF: DOS_WRITE+A9j
seg000:3F46		    test    al,	2
seg000:3F48		    jnz	    short WRITECON
seg000:3F4A		    test    al,	4
seg000:3F4C		    jnz	    short WRTNUL
seg000:3F4E		    mov	    ax,	dx
seg000:3F50		    cmp	    byte ptr [bx], 1Ah
seg000:3F53		    jz	    short WRTCOOKJ
seg000:3F55		    push    cx
seg000:3F56		    mov	    cx,	1
seg000:3F59		    call    SETWRITE
seg000:3F5C		    pop	    cx
seg000:3F5D		    lds	    si,	ss:THISSFT
seg000:3F62		    lds	    si,	[si+7]
seg000:3F65
seg000:3F65 DVWRTLP:				    ; CODE XREF: DOS_WRITE+EDj
seg000:3F65					    ; DOS_WRITE+119j
seg000:3F65		    call    DSKSTATCHK
seg000:3F68		    call    DEVIOCALL2
seg000:3F6B		    push    di
seg000:3F6C		    mov	    ah,	87h
seg000:3F6E		    mov	    di,	word ptr ss:DEVCALL_REQSTAT
seg000:3F73		    test    di,	8000h
seg000:3F77		    jz	    short CWROK
seg000:3F79		    call    CHARHARD
seg000:3F7C		    pop	    di
seg000:3F7D		    mov	    word ptr ss:CALLSCNT, 1
seg000:3F84		    cmp	    al,	1
seg000:3F86		    jz	    short DVWRTLP
seg000:3F88		    or	    al,	al
seg000:3F8A		    jz	    short DVWRTIGN
seg000:3F8C		    jmp	    CRDFERR
seg000:3F8F ; ---------------------------------------------------------------------------
seg000:3F8F
seg000:3F8F CWROK:				    ; CODE XREF: DOS_WRITE+DEj
seg000:3F8F		    pop	    di
seg000:3F90		    cmp	    word ptr ss:CALLSCNT, 0
seg000:3F96		    jz	    short WRTCOOKDONE
seg000:3F98
seg000:3F98 DVWRTIGN:				    ; CODE XREF: DOS_WRITE+F1j
seg000:3F98		    inc	    dx
seg000:3F99		    inc	    word ptr ss:CALLXAD
seg000:3F9E		    inc	    di
seg000:3F9F		    push    ds
seg000:3FA0		    mov	    ds,	ss:CALLXAD_2
seg000:3FA5		    cmp	    byte ptr [di], 1Ah
seg000:3FA8		    pop	    ds
seg000:3FA9		    jz	    short WRTCOOKDONE
seg000:3FAB		    mov	    word ptr ss:DEVCALL_REQSTAT, 0
seg000:3FB2		    loop    DVWRTLP
seg000:3FB4
seg000:3FB4 WRTCOOKDONE:			    ; CODE XREF: DOS_WRITE:WRTCOOKJj
seg000:3FB4					    ; DOS_WRITE+FDj ...
seg000:3FB4		    mov	    ax,	dx
seg000:3FB6		    pop	    ds
seg000:3FB7		    jmp	    ENDWRDEV
seg000:3FBA ; ---------------------------------------------------------------------------
seg000:3FBA
seg000:3FBA WRITECON:				    ; CODE XREF: DOS_WRITE+AFj
seg000:3FBA		    push    ds
seg000:3FBB		    push    ss
seg000:3FBC		    pop	    ds
seg000:3FBD		    call    SWAPCON
seg000:3FC0		    pop	    ds
seg000:3FC1		    mov	    si,	bx
seg000:3FC3		    push    cx
seg000:3FC4
seg000:3FC4 WRCONLP:				    ; CODE XREF: DOS_WRITE+133j
seg000:3FC4		    lodsb
seg000:3FC5		    cmp	    al,	1Ah
seg000:3FC7		    jz	    short CONEOF
seg000:3FC9		    call    OUTT
seg000:3FCC		    loop    WRCONLP
seg000:3FCE
seg000:3FCE CONEOF:				    ; CODE XREF: DOS_WRITE+12Ej
seg000:3FCE		    pop	    ax
seg000:3FCF		    sub	    ax,	cx
seg000:3FD1		    pop	    ds
seg000:3FD2		    call    SWAPBACK
seg000:3FD5		    jmp	    ENDWRDEV
seg000:3FD5 DOS_WRITE	    endp
seg000:3FD5
seg000:3FD8
seg000:3FD8 ; =============== S	U B R O	U T I N	E =======================================
seg000:3FD8
seg000:3FD8
seg000:3FD8 GET_IO_SFT	    proc near		    ; CODE XREF: seg000:21D2p
seg000:3FD8					    ; seg000:21F4p ...
seg000:3FD8		    test    ss:CONSWAP,	0FFh
seg000:3FDE		    jnz	    short GetRedir
seg000:3FE0
seg000:3FE0 GetNormal:				    ; CODE XREF: GET_IO_SFT+1Dj
seg000:3FE0		    push    ss
seg000:3FE1		    pop	    ds
seg000:3FE2		    push    es
seg000:3FE3		    push    di
seg000:3FE4		    call    SFFromHandle
seg000:3FE7		    jb	    short RET44P
seg000:3FE9		    mov	    si,	es
seg000:3FEB		    mov	    ds,	si
seg000:3FED		    mov	    si,	di
seg000:3FEF
seg000:3FEF RET44P:				    ; CODE XREF: GET_IO_SFT+Fj
seg000:3FEF		    pop	    di
seg000:3FF0		    pop	    es
seg000:3FF1		    retn
seg000:3FF2 ; ---------------------------------------------------------------------------
seg000:3FF2
seg000:3FF2 GetRedir:				    ; CODE XREF: GET_IO_SFT+6j
seg000:3FF2		    cmp	    bx,	1
seg000:3FF5		    ja	    short GetNormal
seg000:3FF7		    lds	    si,	ss:CONSFT
seg000:3FFC		    clc
seg000:3FFD
seg000:3FFD get_io_sft_retn:			    ; CODE XREF: DIRREAD+37j
seg000:3FFD					    ; FIRSTCLUSTER+Aj
seg000:3FFD		    retn
seg000:3FFD GET_IO_SFT	    endp
seg000:3FFD
seg000:3FFE
seg000:3FFE ; =============== S	U B R O	U T I N	E =======================================
seg000:3FFE
seg000:3FFE
seg000:3FFE DIRREAD	    proc near		    ; CODE XREF: GETENTRY+1Fp
seg000:3FFE		    xor	    dx,	dx
seg000:4000		    cmp	    ds:DIRSTART, 0
seg000:4005		    jnz	    short SubDir
seg000:4007		    xchg    ax,	dx
seg000:4008		    jmp	    short DoRead
seg000:400A ; ---------------------------------------------------------------------------
seg000:400A		    nop
seg000:400B
seg000:400B SubDir:				    ; CODE XREF: DIRREAD+7j
seg000:400B		    mov	    dl,	al
seg000:400D		    and	    dl,	es:[bp+4]
seg000:4011		    mov	    cl,	es:[bp+5]
seg000:4015		    shr	    ax,	cl
seg000:4017
seg000:4017 DoRead:				    ; CODE XREF: DIRREAD+Aj
seg000:4017		    mov	    byte ptr ds:SECCLUSPOS, dl
seg000:401B		    mov	    cx,	ax
seg000:401D		    mov	    ah,	dl
seg000:401F		    mov	    dx,	ds:DIRSEC
seg000:4023		    add	    dl,	ah
seg000:4025		    adc	    dh,	0
seg000:4028		    mov	    bx,	ds:CLUSNUM
seg000:402C		    mov	    ds:NXTCLUSNUM, bx
seg000:4030		    jcxz    short FIRSTCLUSTER
seg000:4032
seg000:4032 SKPCLLP:				    ; CODE XREF: DIRREAD+40j
seg000:4032		    call    UNPACK
seg000:4035		    jb	    short get_io_sft_retn
seg000:4037		    xchg    bx,	di
seg000:4039		    call    IsEOF
seg000:403C		    jnb	    short HAVESKIPPED
seg000:403E		    loop    SKPCLLP
seg000:4040
seg000:4040 HAVESKIPPED:			    ; CODE XREF: DIRREAD+3Ej
seg000:4040		    mov	    ds:NXTCLUSNUM, bx
seg000:4044		    mov	    dx,	di
seg000:4046		    mov	    bl,	ah
seg000:4048		    call    FIGREC
seg000:4048 DIRREAD	    endp
seg000:4048
seg000:404B
seg000:404B ; =============== S	U B R O	U T I N	E =======================================
seg000:404B
seg000:404B
seg000:404B FIRSTCLUSTER    proc near		    ; CODE XREF: DIRREAD+32j
seg000:404B					    ; NEXTENTRY+46p
seg000:404B		    mov	    ds:ALLOWED,	18h
seg000:4050		    xor	    al,	al
seg000:4052		    call    GETBUFFR
seg000:4055		    jb	    short get_io_sft_retn
seg000:4055 FIRSTCLUSTER    endp
seg000:4055
seg000:4057
seg000:4057 ; =============== S	U B R O	U T I N	E =======================================
seg000:4057
seg000:4057
seg000:4057 SET_BUF_AS_DIR  proc near		    ; CODE XREF: GetPath:SET_THE_BUFp
seg000:4057					    ; FREEENT+31p
seg000:4057		    push    ds
seg000:4058		    push    si
seg000:4059		    lds	    si,	ds:CURBUF
seg000:405D		    or	    byte ptr [si+5], 4
seg000:4061		    pop	    si
seg000:4062		    pop	    ds
seg000:4063
seg000:4063 dirread_retn:			    ; CODE XREF: DREAD+3j
seg000:4063		    retn
seg000:4063 SET_BUF_AS_DIR  endp
seg000:4063
seg000:4064
seg000:4064 ; =============== S	U B R O	U T I N	E =======================================
seg000:4064
seg000:4064
seg000:4064 FATSECRD	    proc near		    ; CODE XREF: GETBUFFRB+5Bp
seg000:4064
seg000:4064 ; FUNCTION CHUNK AT	seg000:40A4 SIZE 00000002 BYTES
seg000:4064
seg000:4064		    mov	    ss:ALLOWED,	18h
seg000:406A		    mov	    di,	cx
seg000:406C		    mov	    cl,	es:[bp+8]
seg000:4070		    mov	    al,	es:[bp+0Fh]
seg000:4074		    xor	    ah,	ah
seg000:4076		    mov	    ch,	ah
seg000:4078		    push    dx
seg000:4079
seg000:4079 NXTFAT:				    ; CODE XREF: FATSECRD+22j
seg000:4079		    push    cx
seg000:407A		    push    ax
seg000:407B		    mov	    cx,	di
seg000:407D		    call    DSKREAD
seg000:4080		    pop	    ax
seg000:4081		    pop	    cx
seg000:4082		    jz	    short RET41P
seg000:4084		    add	    dx,	ax
seg000:4086		    loop    NXTFAT
seg000:4088		    pop	    dx
seg000:4089		    mov	    cx,	di
seg000:4089 FATSECRD	    endp
seg000:4089
seg000:408B
seg000:408B ; =============== S	U B R O	U T I N	E =======================================
seg000:408B
seg000:408B
seg000:408B DREAD	    proc near		    ; CODE XREF: DREAD+10j
seg000:408B					    ; DISKREAD+9Bp ...
seg000:408B		    call    DSKREAD
seg000:408E		    jz	    short dirread_retn
seg000:4090		    mov	    byte ptr ss:SECCLUSPOS+2, 0
seg000:4096		    call    HARDERRRW
seg000:4099		    cmp	    al,	1
seg000:409B		    jz	    short DREAD
seg000:409D		    cmp	    al,	3
seg000:409F		    clc
seg000:40A0		    jnz	    short NO_CAR
seg000:40A2		    stc
seg000:40A3
seg000:40A3 NO_CAR:				    ; CODE XREF: DREAD+15j
seg000:40A3		    retn
seg000:40A3 DREAD	    endp
seg000:40A3
seg000:40A4 ; ---------------------------------------------------------------------------
seg000:40A4 ; START OF FUNCTION	CHUNK FOR FATSECRD
seg000:40A4
seg000:40A4 RET41P:				    ; CODE XREF: FATSECRD+1Ej
seg000:40A4		    pop	    dx
seg000:40A5		    retn
seg000:40A5 ; END OF FUNCTION CHUNK FOR	FATSECRD
seg000:40A6
seg000:40A6 ; =============== S	U B R O	U T I N	E =======================================
seg000:40A6
seg000:40A6
seg000:40A6 DSKREAD	    proc near		    ; CODE XREF: seg000:15F2p
seg000:40A6					    ; FATSECRD+19p ...
seg000:40A6		    push    cx
seg000:40A7		    mov	    ah,	es:[bp+16h]
seg000:40AB		    mov	    al,	es:[bp+1]
seg000:40AF		    push    bx
seg000:40B0		    push    es
seg000:40B1		    call    SETREAD
seg000:40B4		    jmp	    short DODSKOP
seg000:40B4 DSKREAD	    endp
seg000:40B4
seg000:40B6 ; ---------------------------------------------------------------------------
seg000:40B6		    nop
seg000:40B7
seg000:40B7 ; =============== S	U B R O	U T I N	E =======================================
seg000:40B7
seg000:40B7
seg000:40B7 DWRITE	    proc near		    ; CODE XREF: DWRITE+11j
seg000:40B7					    ; DISKWRITE+164p ...
seg000:40B7		    call    DSKWRITE
seg000:40BA		    jnz	    short DWRITE_ERR
seg000:40BC		    retn
seg000:40BD ; ---------------------------------------------------------------------------
seg000:40BD
seg000:40BD DWRITE_ERR:				    ; CODE XREF: DWRITE+3j
seg000:40BD		    mov	    byte ptr ss:SECCLUSPOS+2, 1
seg000:40C3		    call    HARDERRRW
seg000:40C6		    cmp	    al,	1
seg000:40C8		    jz	    short DWRITE
seg000:40CA		    cmp	    al,	3
seg000:40CC		    clc
seg000:40CD		    jnz	    short ret_label
seg000:40CF		    stc
seg000:40D0
seg000:40D0 ret_label:				    ; CODE XREF: DWRITE+16j
seg000:40D0		    retn
seg000:40D0 DWRITE	    endp
seg000:40D0
seg000:40D1
seg000:40D1 ; =============== S	U B R O	U T I N	E =======================================
seg000:40D1
seg000:40D1
seg000:40D1 DSKWRITE	    proc near		    ; CODE XREF: seg000:1635p
seg000:40D1					    ; DWRITEp
seg000:40D1		    push    cx
seg000:40D2		    mov	    ah,	es:[bp+16h]
seg000:40D6		    mov	    al,	es:[bp+1]
seg000:40DA		    push    bx
seg000:40DB		    push    es
seg000:40DC		    call    SETWRITE
seg000:40DF
seg000:40DF DODSKOP:				    ; CODE XREF: DSKREAD+Ej
seg000:40DF		    mov	    cx,	ds
seg000:40E1		    pop	    ds
seg000:40E2		    push    ds
seg000:40E3		    lds	    si,	ds:[bp+12h]
seg000:40E7		    call    DEVIOCALL2
seg000:40EA		    mov	    ds,	cx
seg000:40EC		    pop	    es
seg000:40ED		    pop	    bx
seg000:40EE		    mov	    cx,	word ptr ss:CALLSCNT
seg000:40F3		    pop	    di
seg000:40F4		    sub	    cx,	di
seg000:40F6		    neg	    cx
seg000:40F8		    mov	    ax,	word ptr ss:DEVCALL_REQSTAT
seg000:40FC		    test    ax,	8000h
seg000:40FF		    retn
seg000:40FF DSKWRITE	    endp
seg000:40FF
seg000:4100
seg000:4100 ; =============== S	U B R O	U T I N	E =======================================
seg000:4100
seg000:4100
seg000:4100 HARDERRRW	    proc near		    ; CODE XREF: DREAD+Bp
seg000:4100					    ; DWRITE+Cp
seg000:4100		    cmp	    al,	0Fh
seg000:4102		    jnz	    short DO_ERR
seg000:4104		    push    ds
seg000:4105		    push    si
seg000:4106		    lds	    si,	ss:CALLVIDRW
seg000:410B		    mov	    ss:EXTERRPT_2, ds
seg000:4110		    mov	    ss:EXTERRPT, si
seg000:4115		    pop	    si
seg000:4116		    pop	    ds
seg000:4117
seg000:4117 DO_ERR:				    ; CODE XREF: HARDERRRW+2j
seg000:4117		    call    HARDERR
seg000:411A		    retn
seg000:411A HARDERRRW	    endp
seg000:411A
seg000:411B
seg000:411B ; =============== S	U B R O	U T I N	E =======================================
seg000:411B
seg000:411B
seg000:411B SETUP	    proc near		    ; CODE XREF: DOS_READ:READ_NO_MODEp
seg000:411B					    ; DOS_WRITE:WRITE_NO_MODEp
seg000:411B		    lds	    si,	es:[di+7]
seg000:411F		    mov	    word ptr ss:THISDPB+2, ds
seg000:4124		    push    ss
seg000:4125		    pop	    ds
seg000:4126		    mov	    word ptr ds:THISDPB, si
seg000:412A		    mov	    bx,	ds:DMAADD
seg000:412E		    mov	    ds:NEXTADD,	bx
seg000:4132		    mov	    byte ptr ds:SECCLUSPOS+1, 0
seg000:4137		    mov	    ax,	es:[di+15h]
seg000:413B		    mov	    dx,	es:[di+17h]
seg000:413F		    mov	    word ptr ds:BYTPOS+2, dx
seg000:4143		    mov	    word ptr ds:BYTPOS,	ax
seg000:4146		    test    word ptr es:[di+5],	8080h
seg000:414C		    jnz	    short NOSETSTUFF
seg000:414E		    push    es
seg000:414F		    les	    bp,	ds:THISDPB
seg000:4153		    mov	    bl,	es:[bp+0]
seg000:4157		    mov	    byte ptr ds:THISDRV, bl
seg000:415B		    mov	    bx,	es:[bp+2]
seg000:415F		    cmp	    dx,	bx
seg000:4161		    jnb	    short EOFERR
seg000:4163		    div	    bx
seg000:4165		    mov	    ds:SECPOS, ax
seg000:4168		    mov	    ds:BYTSECPOS, dx
seg000:416C		    mov	    dx,	ax
seg000:416E		    and	    al,	es:[bp+4]
seg000:4172		    mov	    byte ptr ds:SECCLUSPOS, al
seg000:4175		    mov	    ax,	cx
seg000:4177		    mov	    cl,	es:[bp+5]
seg000:417B		    shr	    dx,	cl
seg000:417D		    mov	    ds:CLUSNUM,	dx
seg000:4181		    pop	    es
seg000:4182		    mov	    cx,	ax
seg000:4184
seg000:4184 NOSETSTUFF:				    ; CODE XREF: SETUP+31j
seg000:4184		    mov	    ax,	cx
seg000:4186		    add	    ax,	ds:DMAADD
seg000:418A		    jnb	    short setup_OK
seg000:418C		    mov	    ax,	ds:DMAADD
seg000:418F		    neg	    ax
seg000:4191		    jnz	    short NoDec
seg000:4193		    dec	    ax
seg000:4194
seg000:4194 NoDec:				    ; CODE XREF: SETUP+76j
seg000:4194		    mov	    cx,	ax
seg000:4196		    jcxz    short NOROOM
seg000:4198
seg000:4198 setup_OK:				    ; CODE XREF: SETUP+6Fj
seg000:4198		    retn
seg000:4199 ; ---------------------------------------------------------------------------
seg000:4199
seg000:4199 EOFERR:				    ; CODE XREF: SETUP+46j
seg000:4199		    pop	    es
seg000:419A		    xor	    cx,	cx
seg000:419C		    mov	    ds:DISK_FULL, 1
seg000:41A1
seg000:41A1 NOROOM:				    ; CODE XREF: SETUP+7Bj
seg000:41A1		    pop	    bx
seg000:41A2		    clc
seg000:41A3
seg000:41A3 breakdown_retn:			    ; CODE XREF: BREAKDOWN+2Dj
seg000:41A3					    ; BREAKDOWN+32j
seg000:41A3		    retn
seg000:41A3 SETUP	    endp
seg000:41A3
seg000:41A4
seg000:41A4 ; =============== S	U B R O	U T I N	E =======================================
seg000:41A4
seg000:41A4
seg000:41A4 BREAKDOWN	    proc near		    ; CODE XREF: DISKREAD+34p
seg000:41A4					    ; DISKWRITE+2Bp
seg000:41A4		    mov	    ax,	ds:BYTSECPOS
seg000:41A7		    mov	    bx,	cx
seg000:41A9		    or	    ax,	ax
seg000:41AB		    jz	    short SAVFIR
seg000:41AD		    sub	    ax,	es:[bp+2]
seg000:41B1		    neg	    ax
seg000:41B3		    sub	    bx,	ax
seg000:41B5		    jnb	    short SAVFIR
seg000:41B7		    add	    ax,	bx
seg000:41B9		    xor	    bx,	bx
seg000:41BB
seg000:41BB SAVFIR:				    ; CODE XREF: BREAKDOWN+7j
seg000:41BB					    ; BREAKDOWN+11j
seg000:41BB		    mov	    ds:BYTCNT1,	ax
seg000:41BE		    mov	    ax,	bx
seg000:41C0		    xor	    dx,	dx
seg000:41C2		    div	    word ptr es:[bp+2]
seg000:41C6		    mov	    ds:SECCNT, ax
seg000:41C9		    mov	    ds:BYTCNT2,	dx
seg000:41CD		    or	    dx,	ds:BYTCNT1
seg000:41D1		    jnz	    short breakdown_retn
seg000:41D3		    cmp	    ax,	1
seg000:41D6		    jnz	    short breakdown_retn
seg000:41D8		    mov	    ax,	es:[bp+2]
seg000:41DC		    mov	    ds:BYTCNT2,	ax
seg000:41DF		    mov	    ds:SECCNT, dx
seg000:41E3
seg000:41E3 _RET45:				    ; CODE XREF: READ_LOCK_VIOLATION+1Ej
seg000:41E3		    retn
seg000:41E3 BREAKDOWN	    endp
seg000:41E3
seg000:41E4
seg000:41E4 ; =============== S	U B R O	U T I N	E =======================================
seg000:41E4
seg000:41E4
seg000:41E4 READ_LOCK_VIOLATION	proc near	    ; CODE XREF: DISKREAD+2Ap
seg000:41E4		    mov	    byte ptr ds:SECCLUSPOS+2, 0
seg000:41E9
seg000:41E9 ERR_ON_CHECK:			    ; CODE XREF: WRITE_LOCK_VIOLATION+5j
seg000:41E9		    test    word ptr es:[di+2],	8000h
seg000:41EF		    jnz	    short HARD_ERR
seg000:41F1		    push    cx
seg000:41F2		    mov	    cl,	es:[di+2]
seg000:41F6		    and	    cl,	0F0h
seg000:41F9		    cmp	    cl,	0
seg000:41FC		    pop	    cx
seg000:41FD		    jnz	    short NO_HARD_ERR
seg000:41FF
seg000:41FF HARD_ERR:				    ; CODE XREF: READ_LOCK_VIOLATION+Bj
seg000:41FF		    call    LOCK_VIOLATION
seg000:4202		    jnb	    short _RET45
seg000:4204
seg000:4204 NO_HARD_ERR:			    ; CODE XREF: READ_LOCK_VIOLATION+19j
seg000:4204		    xor	    cx,	cx
seg000:4206		    mov	    ax,	21h
seg000:4209		    stc
seg000:420A		    retn
seg000:420A READ_LOCK_VIOLATION	endp
seg000:420A
seg000:420B
seg000:420B ; =============== S	U B R O	U T I N	E =======================================
seg000:420B
seg000:420B
seg000:420B WRITE_LOCK_VIOLATION proc near	    ; CODE XREF: DISKWRITE+18p
seg000:420B		    mov	    byte ptr ds:SECCLUSPOS+2, 1
seg000:4210		    jmp	    short ERR_ON_CHECK
seg000:4210 WRITE_LOCK_VIOLATION endp
seg000:4210
seg000:4212
seg000:4212 ; =============== S	U B R O	U T I N	E =======================================
seg000:4212
seg000:4212
seg000:4212 DISKREAD	    proc near		    ; CODE XREF: DOS_READ+33p
seg000:4212		    mov	    ax,	es:[di+11h]
seg000:4216		    mov	    bx,	es:[di+13h]
seg000:421A		    sub	    ax,	word ptr ds:BYTPOS
seg000:421E		    sbb	    bx,	word ptr ds:BYTPOS+2
seg000:4222		    jb	    short RDERR
seg000:4224		    jnz	    short ENUF
seg000:4226		    or	    ax,	ax
seg000:4228		    jz	    short RDERR
seg000:422A		    cmp	    ax,	cx
seg000:422C		    jnb	    short ENUF
seg000:422E		    mov	    cx,	ax
seg000:4230
seg000:4230 ENUF:				    ; CODE XREF: DISKREAD+12j
seg000:4230					    ; DISKREAD+1Aj ...
seg000:4230		    test    byte ptr es:[di+4],	8
seg000:4235		    jnz	    short SET_ACC_ERR
seg000:4237		    call    LOCK_CHECK
seg000:423A		    jnb	    short READ_OK
seg000:423C		    call    READ_LOCK_VIOLATION
seg000:423F		    jnb	    short ENUF
seg000:4241		    retn
seg000:4242 ; ---------------------------------------------------------------------------
seg000:4242
seg000:4242 READ_OK:				    ; CODE XREF: DISKREAD+28j
seg000:4242		    les	    bp,	ds:THISDPB
seg000:4246		    call    BREAKDOWN
seg000:4249		    mov	    cx,	ds:CLUSNUM
seg000:424D		    call    FNDCLUS
seg000:4250		    or	    cx,	cx
seg000:4252		    jz	    short SKIPERR
seg000:4254
seg000:4254 RDERR:				    ; CODE XREF: DISKREAD+10j
seg000:4254					    ; DISKREAD+16j
seg000:4254		    jmp	    WRTERR
seg000:4257 ; ---------------------------------------------------------------------------
seg000:4257
seg000:4257 RDLASTJ:				    ; CODE XREF: DISKREAD+70j
seg000:4257		    jmp	    RDLAST
seg000:425A ; ---------------------------------------------------------------------------
seg000:425A
seg000:425A SETSFTJ2:				    ; CODE XREF: DISKREAD+75j
seg000:425A		    jmp	    SETSFT
seg000:425D ; ---------------------------------------------------------------------------
seg000:425D
seg000:425D CANOT_READ:				    ; CODE XREF: DISKREAD+A0j
seg000:425D		    pop	    cx
seg000:425E		    pop	    cx
seg000:425F		    pop	    bx
seg000:4260
seg000:4260 SET_ACC_ERR_DS:			    ; CODE XREF: DOS_READ+9Cj
seg000:4260					    ; DISKREAD+69j ...
seg000:4260		    push    ss
seg000:4261		    pop	    ds
seg000:4262
seg000:4262 SET_ACC_ERR:			    ; CODE XREF: DOS_READ+Ej
seg000:4262					    ; DOS_WRITE:BadModej ...
seg000:4262		    xor	    cx,	cx
seg000:4264		    mov	    ax,	5
seg000:4267		    stc
seg000:4268		    retn
seg000:4269 ; ---------------------------------------------------------------------------
seg000:4269
seg000:4269 SKIPERR:				    ; CODE XREF: DISKREAD+40j
seg000:4269		    mov	    ds:LASTPOS,	dx
seg000:426D		    mov	    ds:CLUSNUM,	bx
seg000:4271		    cmp	    ds:BYTCNT1,	0
seg000:4276		    jz	    short RDMID
seg000:4278		    call    BUFRD
seg000:427B		    jb	    short SET_ACC_ERR_DS
seg000:427D
seg000:427D RDMID:				    ; CODE XREF: DISKREAD+64j
seg000:427D		    cmp	    ds:SECCNT, 0
seg000:4282		    jz	    short RDLASTJ
seg000:4284		    call    NEXTSEC
seg000:4287		    jb	    short SETSFTJ2
seg000:4289		    mov	    byte ptr ds:SECCLUSPOS+1, 1
seg000:428E		    mov	    dl,	byte ptr ds:SECCLUSPOS
seg000:4292		    mov	    cx,	ds:SECCNT
seg000:4296		    mov	    bx,	ds:CLUSNUM
seg000:429A
seg000:429A RDLP:				    ; CODE XREF: DISKREAD+10Cj
seg000:429A		    call    OPTIMIZE
seg000:429D		    jb	    short SET_ACC_ERR_DS
seg000:429F		    push    di
seg000:42A0		    push    ax
seg000:42A1		    push    bx
seg000:42A2		    mov	    ds:ALLOWED,	38h
seg000:42A7		    mov	    ds,	ds:DMAADD_2
seg000:42AB		    push    dx
seg000:42AC		    push    cx
seg000:42AD		    call    DREAD
seg000:42B0		    pop	    bx
seg000:42B1		    pop	    dx
seg000:42B2		    jb	    short CANOT_READ
seg000:42B4		    add	    bx,	dx
seg000:42B6		    mov	    al,	es:[bp+0]
seg000:42BA		    call    SETVISIT
seg000:42BD
seg000:42BD bufq:				    ; CODE XREF: DISKREAD+F8j
seg000:42BD		    or	    byte ptr [di+5], 20h
seg000:42C1		    cmp	    al,	[di+4]
seg000:42C4		    jnz	    short bufq3
seg000:42C6		    cmp	    [di+6], dx
seg000:42C9		    jb	    short bufq3
seg000:42CB		    cmp	    [di+6], bx
seg000:42CE		    jnb	    short bufq3
seg000:42D0		    test    byte ptr [di+5], 40h
seg000:42D4		    jz	    short bufq2
seg000:42D6		    pop	    ax
seg000:42D7		    push    ax
seg000:42D8		    push    di
seg000:42D9		    push    dx
seg000:42DA		    sub	    dx,	[di+6]
seg000:42DD		    neg	    dx
seg000:42DF		    mov	    si,	di
seg000:42E1		    mov	    di,	ax
seg000:42E3		    mov	    ax,	dx
seg000:42E5		    mov	    cx,	es:[bp+2]
seg000:42E9		    mul	    cx
seg000:42EB		    add	    di,	ax
seg000:42ED		    lea	    si,	[si+16]
seg000:42F0		    shr	    cx,	1
seg000:42F2		    push    es
seg000:42F3		    mov	    es,	ss:DMAADD_2
seg000:42F8		    rep	movsw
seg000:42FA		    jnb	    short bufq1
seg000:42FC		    movsb
seg000:42FD
seg000:42FD bufq1:				    ; CODE XREF: DISKREAD+E8j
seg000:42FD		    pop	    es
seg000:42FE		    pop	    dx
seg000:42FF		    pop	    di
seg000:4300		    mov	    al,	es:[bp+0]
seg000:4304
seg000:4304 bufq2:				    ; CODE XREF: DISKREAD+C2j
seg000:4304		    call    SCANPLACE
seg000:4307
seg000:4307 bufq3:				    ; CODE XREF: DISKREAD+B2j
seg000:4307					    ; DISKREAD+B7j ...
seg000:4307		    call    SKIPVISIT
seg000:430A		    jnz	    short bufq
seg000:430C		    push    ss
seg000:430D		    pop	    ds
seg000:430E		    pop	    cx
seg000:430F		    pop	    cx
seg000:4310		    pop	    bx
seg000:4311
seg000:4311 bufq4:
seg000:4311		    jcxz    short RDLAST
seg000:4313		    call    IsEOF
seg000:4316		    jnb	    short SETSFT
seg000:4318		    mov	    dl,	0
seg000:431A		    inc	    ds:LASTPOS
seg000:431E		    jmp	    RDLP
seg000:4321 ; ---------------------------------------------------------------------------
seg000:4321
seg000:4321 RDLAST:				    ; CODE XREF: DISKREAD:RDLASTJj
seg000:4321					    ; DISKREAD:bufq4j
seg000:4321		    mov	    ax,	ds:BYTCNT2
seg000:4324		    or	    ax,	ax
seg000:4326		    jz	    short SETSFT
seg000:4328		    mov	    ds:BYTCNT1,	ax
seg000:432B		    call    NEXTSEC
seg000:432E		    jb	    short SETSFT
seg000:4330		    mov	    ds:BYTSECPOS, 0
seg000:4336		    call    BUFRD
seg000:4339		    jnb	    short SETSFT
seg000:433B		    jmp	    SET_ACC_ERR_DS
seg000:433B DISKREAD	    endp
seg000:433B
seg000:433E
seg000:433E ; =============== S	U B R O	U T I N	E =======================================
seg000:433E
seg000:433E
seg000:433E SETSFT	    proc near		    ; CODE XREF: DOS_READ:SETSFTCp
seg000:433E					    ; DISKREAD:SETSFTJ2j ...
seg000:433E		    les	    di,	ds:THISSFT
seg000:4342
seg000:4342 SETCLUS:				    ; CODE XREF: DISKWRITE:SAMSIZj
seg000:4342		    mov	    cx,	ds:NEXTADD
seg000:4346		    sub	    cx,	ds:DMAADD
seg000:434A		    test    word ptr es:[di+5],	80h
seg000:4350		    jnz	    short ADDREC
seg000:4352		    mov	    ax,	ds:CLUSNUM
seg000:4355		    mov	    es:[di+1Bh], ax
seg000:4359		    mov	    ax,	ds:LASTPOS
seg000:435C		    mov	    es:[di+19h], ax
seg000:435C SETSFT	    endp
seg000:435C
seg000:4360
seg000:4360 ; =============== S	U B R O	U T I N	E =======================================
seg000:4360
seg000:4360
seg000:4360 ADDREC	    proc near		    ; CODE XREF: DOS_WRITE+81p
seg000:4360					    ; SETSFT+12j ...
seg000:4360		    jcxz    short RET28
seg000:4362		    add	    es:[di+15h], cx
seg000:4366		    adc	    word ptr es:[di+17h], 0
seg000:436B
seg000:436B RET28:				    ; CODE XREF: ADDRECj
seg000:436B		    clc
seg000:436C		    retn
seg000:436C ADDREC	    endp
seg000:436C
seg000:436D
seg000:436D ; =============== S	U B R O	U T I N	E =======================================
seg000:436D
seg000:436D
seg000:436D DISKWRITE	    proc near		    ; CODE XREF: DOS_WRITE+3Ep
seg000:436D					    ; DISKWRITE+1Bj
seg000:436D		    test    byte ptr es:[di+4],	8
seg000:4372		    jz	    short write_cont
seg000:4374		    jmp	    ACC_ERRWJ
seg000:4377 ; ---------------------------------------------------------------------------
seg000:4377
seg000:4377 write_cont:				    ; CODE XREF: DISKWRITE+5j
seg000:4377		    push    cx
seg000:4378		    or	    cx,	cx
seg000:437A		    jnz	    short Not_Truncate
seg000:437C		    mov	    cx,	-1
seg000:437F
seg000:437F Not_Truncate:			    ; CODE XREF: DISKWRITE+Dj
seg000:437F		    call    LOCK_CHECK
seg000:4382		    pop	    cx
seg000:4383		    jnb	    short WRITE_OK
seg000:4385		    call    WRITE_LOCK_VIOLATION
seg000:4388		    jnb	    short DISKWRITE
seg000:438A		    retn
seg000:438B ; ---------------------------------------------------------------------------
seg000:438B
seg000:438B WRTEOFJ:				    ; CODE XREF: DISKWRITE+35j
seg000:438B		    jmp	    WRTEOF
seg000:438E ; ---------------------------------------------------------------------------
seg000:438E
seg000:438E WRITE_OK:				    ; CODE XREF: DISKWRITE+16j
seg000:438E		    and	    word ptr es:[di+5],	0BFBFh
seg000:4394		    les	    bp,	ds:THISDPB
seg000:4398		    call    BREAKDOWN
seg000:439B		    mov	    ax,	word ptr ds:BYTPOS
seg000:439E		    mov	    dx,	word ptr ds:BYTPOS+2
seg000:43A2		    jcxz    short WRTEOFJ
seg000:43A4		    add	    ax,	cx
seg000:43A6		    adc	    dx,	0
seg000:43A9		    mov	    bx,	es:[bp+2]
seg000:43AD		    cmp	    dx,	bx
seg000:43AF		    jnb	    short WRTERR
seg000:43B1		    div	    bx
seg000:43B3		    mov	    bx,	ax
seg000:43B5		    or	    dx,	dx
seg000:43B7		    jnz	    short CALCLUS
seg000:43B9		    dec	    ax
seg000:43BA
seg000:43BA CALCLUS:				    ; CODE XREF: DISKWRITE+4Aj
seg000:43BA		    mov	    cl,	es:[bp+5]
seg000:43BE		    shr	    ax,	cl
seg000:43C0		    push    ax
seg000:43C1		    push    dx
seg000:43C2		    push    es
seg000:43C3		    les	    di,	ds:THISSFT
seg000:43C7		    mov	    ax,	es:[di+11h]
seg000:43CB		    mov	    dx,	es:[di+13h]
seg000:43CF		    pop	    es
seg000:43D0		    div	    word ptr es:[bp+2]
seg000:43D4		    mov	    cx,	ax
seg000:43D6		    or	    dx,	dx
seg000:43D8		    jz	    short NORND
seg000:43DA		    inc	    ax
seg000:43DB
seg000:43DB NORND:				    ; CODE XREF: DISKWRITE+6Bj
seg000:43DB		    mov	    ds:VALSEC, ax
seg000:43DE		    xor	    ax,	ax
seg000:43E0		    mov	    word ptr ds:GROWCNT, ax
seg000:43E3		    mov	    word ptr ds:GROWCNT+2, ax
seg000:43E6		    pop	    ax
seg000:43E7		    sub	    bx,	cx
seg000:43E9		    jb	    short NOGROW
seg000:43EB		    jz	    short TESTTAIL
seg000:43ED
seg000:43ED yesgrow:
seg000:43ED		    mov	    cx,	dx
seg000:43EF		    xchg    ax,	bx
seg000:43F0		    mul	    word ptr es:[bp+2]
seg000:43F4		    sub	    ax,	cx
seg000:43F6		    sbb	    dx,	0
seg000:43F9		    add	    ax,	bx
seg000:43FB		    adc	    dx,	0
seg000:43FE		    jmp	    short SETGRW
seg000:4400 ; ---------------------------------------------------------------------------
seg000:4400
seg000:4400 HAVSTART:				    ; CODE XREF: DISKWRITE+D0j
seg000:4400		    mov	    cx,	ax
seg000:4402		    call    SKPCLP
seg000:4405		    jcxz    short DOWRTJ
seg000:4407		    call    ALLOCATE
seg000:440A		    jnb	    short DOWRTJ
seg000:440C
seg000:440C WRTERR:				    ; CODE XREF: DISKREAD:RDERRj
seg000:440C					    ; DISKWRITE+42j ...
seg000:440C		    xor	    cx,	cx
seg000:440E		    les	    di,	ds:THISSFT
seg000:4412		    clc
seg000:4413		    retn
seg000:4414 ; ---------------------------------------------------------------------------
seg000:4414
seg000:4414 DOWRTJ:				    ; CODE XREF: DISKWRITE+98j
seg000:4414					    ; DISKWRITE+9Dj
seg000:4414		    jmp	    short DOWRT
seg000:4416 ; ---------------------------------------------------------------------------
seg000:4416		    nop
seg000:4417
seg000:4417 ACC_ERRWJ:				    ; CODE XREF: DISKWRITE+7j
seg000:4417					    ; DISKWRITE+C2j ...
seg000:4417		    jmp	    SET_ACC_ERRW
seg000:441A ; ---------------------------------------------------------------------------
seg000:441A
seg000:441A TESTTAIL:				    ; CODE XREF: DISKWRITE+7Ej
seg000:441A		    sub	    ax,	dx
seg000:441C		    jbe	    short NOGROW
seg000:441E		    xor	    dx,	dx
seg000:4420
seg000:4420 SETGRW:				    ; CODE XREF: DISKWRITE+91j
seg000:4420		    mov	    word ptr ds:GROWCNT, ax
seg000:4423		    mov	    word ptr ds:GROWCNT+2, dx
seg000:4427
seg000:4427 NOGROW:				    ; CODE XREF: DISKWRITE+7Cj
seg000:4427					    ; DISKWRITE+AFj
seg000:4427		    pop	    ax
seg000:4428		    mov	    cx,	ds:CLUSNUM
seg000:442C		    call    FNDCLUS
seg000:442F		    jb	    short ACC_ERRWJ
seg000:4431		    mov	    ds:CLUSNUM,	bx
seg000:4435		    mov	    ds:LASTPOS,	dx
seg000:4439		    sub	    ax,	dx
seg000:443B		    jz	    short DOWRT
seg000:443D		    jcxz    short HAVSTART
seg000:443F		    push    cx
seg000:4440		    mov	    cx,	ax
seg000:4442		    call    ALLOCATE
seg000:4445		    pop	    ax
seg000:4446		    jb	    short WRTERR
seg000:4448		    mov	    cx,	ax
seg000:444A		    mov	    dx,	ds:LASTPOS
seg000:444E		    inc	    dx
seg000:444F		    dec	    cx
seg000:4450		    jz	    short NOSKIP
seg000:4452		    call    SKPCLP
seg000:4455		    jb	    short ACC_ERRWJ
seg000:4457
seg000:4457 NOSKIP:				    ; CODE XREF: DISKWRITE+E3j
seg000:4457		    mov	    ds:CLUSNUM,	bx
seg000:445B		    mov	    ds:LASTPOS,	dx
seg000:445F
seg000:445F DOWRT:				    ; CODE XREF: DISKWRITE:DOWRTJj
seg000:445F					    ; DISKWRITE+CEj
seg000:445F		    cmp	    ds:BYTCNT1,	0
seg000:4464		    jz	    short WRTMID
seg000:4466		    mov	    bx,	ds:CLUSNUM
seg000:446A		    call    BUFWRT
seg000:446D		    jb	    short ACC_ERRWJ
seg000:446F
seg000:446F WRTMID:				    ; CODE XREF: DISKWRITE+F7j
seg000:446F		    mov	    ax,	ds:SECCNT
seg000:4472		    or	    ax,	ax
seg000:4474		    jz	    short WRTLAST
seg000:4476		    add	    ds:SECPOS, ax
seg000:447A		    call    NEXTSEC
seg000:447D		    jb	    short ACC_ERRWJ
seg000:447F		    mov	    byte ptr ds:SECCLUSPOS+1, 1
seg000:4484		    mov	    dl,	byte ptr ds:SECCLUSPOS
seg000:4488		    mov	    bx,	ds:CLUSNUM
seg000:448C		    mov	    cx,	ds:SECCNT
seg000:4490
seg000:4490 WRTLP:				    ; CODE XREF: DISKWRITE+175j
seg000:4490		    call    OPTIMIZE
seg000:4493		    jb	    short ACC_ERRWJ
seg000:4495		    push    di
seg000:4496		    push    ax
seg000:4497		    push    dx
seg000:4498		    push    bx
seg000:4499		    mov	    al,	es:[bp+0]
seg000:449D		    mov	    bx,	cx
seg000:449F		    add	    bx,	dx
seg000:44A1		    call    SETVISIT
seg000:44A4
seg000:44A4 wbufq1:				    ; CODE XREF: DISKWRITE+155j
seg000:44A4		    or	    byte ptr [di+5], 20h
seg000:44A8		    cmp	    al,	[di+4]
seg000:44AB		    jnz	    short wbufq2
seg000:44AD		    cmp	    [di+6], dx
seg000:44B0		    jb	    short wbufq2
seg000:44B2		    cmp	    [di+6], bx
seg000:44B5		    jnb	    short wbufq2
seg000:44B7		    mov	    word ptr [di+4], 20FFh
seg000:44BC		    call    SCANPLACE
seg000:44BF
seg000:44BF wbufq2:				    ; CODE XREF: DISKWRITE+13Ej
seg000:44BF					    ; DISKWRITE+143j ...
seg000:44BF		    call    SKIPVISIT
seg000:44C2		    jnz	    short wbufq1
seg000:44C4		    pop	    bx
seg000:44C5		    pop	    dx
seg000:44C6		    mov	    ds,	ss:DMAADD_2
seg000:44CB		    mov	    ss:ALLOWED,	38h
seg000:44D1		    call    DWRITE
seg000:44D4
seg000:44D4 DWRITE_OKAY:
seg000:44D4		    pop	    cx
seg000:44D5		    pop	    bx
seg000:44D6		    push    ss
seg000:44D7		    pop	    ds
seg000:44D8		    jb	    short SET_ACC_ERRW
seg000:44DA		    jcxz    short WRTLAST
seg000:44DC		    mov	    dl,	0
seg000:44DE		    inc	    ds:LASTPOS
seg000:44E2		    jmp	    short WRTLP
seg000:44E4 ; ---------------------------------------------------------------------------
seg000:44E4
seg000:44E4 WRTLAST:				    ; CODE XREF: DISKWRITE+107j
seg000:44E4					    ; DISKWRITE+16Dj
seg000:44E4		    mov	    ax,	ds:BYTCNT2
seg000:44E7		    or	    ax,	ax
seg000:44E9		    jz	    short FINWRT
seg000:44EB		    mov	    ds:BYTCNT1,	ax
seg000:44EE		    call    NEXTSEC
seg000:44F1		    jb	    short SET_ACC_ERRW
seg000:44F3		    mov	    ds:BYTSECPOS, 0
seg000:44F9		    call    BUFWRT
seg000:44FC		    jb	    short SET_ACC_ERRW
seg000:44FE
seg000:44FE FINWRT:				    ; CODE XREF: DISKWRITE+17Cj
seg000:44FE		    les	    di,	ds:THISSFT
seg000:4502		    mov	    ax,	word ptr ds:GROWCNT
seg000:4505		    mov	    cx,	word ptr ds:GROWCNT+2
seg000:4509		    or	    ax,	ax
seg000:450B		    jnz	    short UPDATE_size
seg000:450D		    jcxz    short SAMSIZ
seg000:450F
seg000:450F UPDATE_size:			    ; CODE XREF: DISKWRITE+19Ej
seg000:450F		    add	    es:[di+11h], ax
seg000:4513		    adc	    es:[di+13h], cx
seg000:4517		    mov	    ax,	1
seg000:451A		    call    ds:ShSU
seg000:451E
seg000:451E SAMSIZ:				    ; CODE XREF: DISKWRITE+1A0j
seg000:451E		    jmp	    SETCLUS
seg000:4521 ; ---------------------------------------------------------------------------
seg000:4521
seg000:4521 SET_ACC_ERRW:			    ; CODE XREF: DISKWRITE:ACC_ERRWJj
seg000:4521					    ; DISKWRITE+16Bj ...
seg000:4521		    jmp	    SET_ACC_ERR_DS
seg000:4524 ; ---------------------------------------------------------------------------
seg000:4524
seg000:4524 WRTEOF:				    ; CODE XREF: DISKWRITE:WRTEOFJj
seg000:4524		    mov	    cx,	ax
seg000:4526		    or	    cx,	dx
seg000:4528		    jz	    short KILLFIL
seg000:452A		    sub	    ax,	1
seg000:452D		    sbb	    dx,	0
seg000:4530		    div	    word ptr es:[bp+2]
seg000:4534		    mov	    cl,	es:[bp+5]
seg000:4538		    shr	    ax,	cl
seg000:453A		    mov	    cx,	ax
seg000:453C		    call    FNDCLUS
seg000:453F
seg000:453F SET_ACC_ERRWJ2:			    ; CODE XREF: DISKWRITE:SET_ACC_ERRWJJj
seg000:453F		    jb	    short SET_ACC_ERRW
seg000:4541		    jcxz    short RELFILE
seg000:4543		    call    ALLOCATE
seg000:4546		    jb	    short WRTERRJ
seg000:4548
seg000:4548 UPDATE:				    ; CODE XREF: DISKWRITE+20Cj
seg000:4548					    ; DISKWRITE:UpDateJj
seg000:4548		    les	    di,	ds:THISSFT
seg000:454C		    mov	    ax,	word ptr ds:BYTPOS
seg000:454F		    mov	    es:[di+11h], ax
seg000:4553		    mov	    ax,	word ptr ds:BYTPOS+2
seg000:4556		    mov	    es:[di+13h], ax
seg000:455A		    mov	    ax,	2
seg000:455D		    call    ds:ShSU
seg000:4561		    xor	    cx,	cx
seg000:4563		    jmp	    ADDREC
seg000:4566 ; ---------------------------------------------------------------------------
seg000:4566		    jmp	    WRTERR
seg000:4569 ; ---------------------------------------------------------------------------
seg000:4569
seg000:4569 WRTERRJ:				    ; CODE XREF: DISKWRITE+1D9j
seg000:4569		    mov	    ds:DISK_FULL, 1
seg000:456E		    jmp	    WRTERR
seg000:4571 ; ---------------------------------------------------------------------------
seg000:4571
seg000:4571 RELFILE:				    ; CODE XREF: DISKWRITE+1D4j
seg000:4571		    mov	    dx,	0FFFFh
seg000:4574		    call    RELBLKS
seg000:4577
seg000:4577 SET_ACC_ERRWJJ:			    ; CODE XREF: DISKWRITE+242j
seg000:4577		    jb	    short SET_ACC_ERRWJ2
seg000:4579		    jmp	    short UPDATE
seg000:457B ; ---------------------------------------------------------------------------
seg000:457B
seg000:457B KILLFIL:				    ; CODE XREF: DISKWRITE+1BBj
seg000:457B		    xor	    bx,	bx
seg000:457D		    push    es
seg000:457E		    les	    di,	ds:THISSFT
seg000:4582		    mov	    es:[di+19h], bx
seg000:4586		    mov	    es:[di+1Bh], bx
seg000:458A		    xchg    bx,	es:[di+0Bh]
seg000:458E		    pop	    es
seg000:458F		    or	    bx,	bx
seg000:4591		    jz	    short UpDateJ
seg000:4593		    push    es
seg000:4594		    push    bp
seg000:4595		    push    ax
seg000:4596		    push    cx
seg000:4597		    push    dx
seg000:4598		    les	    bp,	ds:THISDPB
seg000:459C		    mov	    dl,	es:[bp+0]
seg000:45A0		    mov	    cx,	bx
seg000:45A2		    mov	    ah,	2
seg000:45A4		    call    FastOpen_Update
seg000:45A7		    pop	    dx
seg000:45A8		    pop	    cx
seg000:45A9		    pop	    ax
seg000:45AA		    pop	    bp
seg000:45AB		    pop	    es
seg000:45AC		    call    RELEASE
seg000:45AF		    jb	    short SET_ACC_ERRWJJ
seg000:45B1
seg000:45B1 UpDateJ:				    ; CODE XREF: DISKWRITE+224j
seg000:45B1		    jmp	    short UPDATE
seg000:45B1 DISKWRITE	    endp
seg000:45B1
seg000:45B3
seg000:45B3 ; =============== S	U B R O	U T I N	E =======================================
seg000:45B3
seg000:45B3
seg000:45B3 FINDENTRY	    proc near		    ; CODE XREF: DOS_RENAME+10Fp
seg000:45B3					    ; GetPath+1BEp
seg000:45B3		    call    STARTSRCH
seg000:45B6		    mov	    al,	byte ptr ds:ATTRIB_4+4
seg000:45B9		    and	    al,	9Eh
seg000:45BB		    cmp	    al,	8
seg000:45BD		    jnz	    short NOTVOLSRCH
seg000:45BF		    call    SETROOTSRCH
seg000:45C2
seg000:45C2 NOTVOLSRCH:				    ; CODE XREF: FINDENTRY+Aj
seg000:45C2		    call    GETENTRY
seg000:45C5		    jnb	    short SRCH
seg000:45C7		    jmp	    SETESRET
seg000:45CA ; ---------------------------------------------------------------------------
seg000:45CA
seg000:45CA SRCH:				    ; CODE XREF: DOS_CHDIR+B3p
seg000:45CA					    ; FINDENTRY+12j ...
seg000:45CA		    push    ds
seg000:45CB		    mov	    ds,	word ptr ds:CURBUF+2
seg000:45CF		    mov	    ah,	[bx]
seg000:45D1		    or	    ah,	ah
seg000:45D3		    jz	    short FREE
seg000:45D5		    cmp	    ah,	ss:DELALL
seg000:45DA		    jz	    short FREE
seg000:45DC		    test    byte ptr [bx+0Bh], 8
seg000:45E0		    jz	    short CHKFNAM
seg000:45E2		    inc	    byte ptr ss:cMeta+1
seg000:45E7
seg000:45E7 CHKFNAM:				    ; CODE XREF: FINDENTRY+2Dj
seg000:45E7		    mov	    si,	ss
seg000:45E9		    mov	    es,	si
seg000:45EB		    mov	    si,	bx
seg000:45ED		    mov	    di,	(offset	NAME1_1+1)
seg000:45F0		    cmp	    byte ptr ss:NAME1_1+1, 0E5h
seg000:45F6		    jnz	    short NO_E5
seg000:45F8		    mov	    byte ptr ss:NAME1_1+1, 5
seg000:45FE
seg000:45FE NO_E5:				    ; CODE XREF: FINDENTRY+43j
seg000:45FE		    call    MetaCompare
seg000:4601		    jz	    short FOUND
seg000:4603		    pop	    ds
seg000:4604
seg000:4604 NextEnt:				    ; CODE XREF: DOS_DELETE+DEp
seg000:4604					    ; RENAME_NEXT+32p ...
seg000:4604		    les	    bp,	ds:THISDPB
seg000:4608		    call    NEXTENTRY
seg000:460B		    jnb	    short SRCH
seg000:460D		    jmp	    short SETESRET
seg000:460F ; ---------------------------------------------------------------------------
seg000:460F
seg000:460F FREE:				    ; CODE XREF: FINDENTRY+20j
seg000:460F					    ; FINDENTRY+27j
seg000:460F		    pop	    ds
seg000:4610		    mov	    cx,	ds:LASTENT
seg000:4614		    cmp	    cx,	ds:ENTFREE
seg000:4618		    jnb	    short TSTALL
seg000:461A		    mov	    ds:ENTFREE,	cx
seg000:461E
seg000:461E TSTALL:				    ; CODE XREF: FINDENTRY+65j
seg000:461E		    cmp	    ah,	ds:DELALL
seg000:4622
seg000:4622 NEXTENTJ:				    ; CODE XREF: FINDENTRY+8Dj
seg000:4622					    ; FINDENTRY+96j ...
seg000:4622		    jz	    short NextEnt
seg000:4624		    mov	    ds:ENTLAST,	cx
seg000:4628		    stc
seg000:4629		    jmp	    short SETESRET
seg000:462B ; ---------------------------------------------------------------------------
seg000:462B
seg000:462B FOUND:				    ; CODE XREF: FINDENTRY+4Ej
seg000:462B		    mov	    ch,	[si]
seg000:462D		    pop	    ds
seg000:462E		    mov	    ah,	byte ptr ds:ATTRIB_4+4
seg000:4632		    and	    ah,	9Eh
seg000:4635		    lea	    si,	[si+15]
seg000:4638		    test    ch,	8
seg000:463B		    jz	    short CHECK_ONE_VOLUME_ID
seg000:463D		    test    ah,	8
seg000:4640		    jz	    short NEXTENTJ
seg000:4642		    xor	    ah,	ah
seg000:4644		    jmp	    short RETFF
seg000:4646 ; ---------------------------------------------------------------------------
seg000:4646
seg000:4646 CHECK_ONE_VOLUME_ID:		    ; CODE XREF: FINDENTRY+88j
seg000:4646		    cmp	    ah,	8
seg000:4649		    jz	    short NEXTENTJ
seg000:464B		    call    MatchAttributes
seg000:464E		    jz	    short RETFF
seg000:4650		    test    byte ptr ds:CREATING, -1
seg000:4655		    jz	    short NEXTENTJ
seg000:4657
seg000:4657 RETFF:				    ; CODE XREF: FINDENTRY+91j
seg000:4657					    ; FINDENTRY+9Bj
seg000:4657		    les	    bp,	ds:THISDPB
seg000:465B		    mov	    ah,	es:[bp+0]
seg000:465F
seg000:465F SETESRET:				    ; CODE XREF: FINDENTRY+14j
seg000:465F					    ; FINDENTRY+5Aj ...
seg000:465F		    push    ss
seg000:4660		    pop	    es
seg000:4661		    retn
seg000:4661 FINDENTRY	    endp
seg000:4661
seg000:4662
seg000:4662 ; =============== S	U B R O	U T I N	E =======================================
seg000:4662
seg000:4662
seg000:4662 MetaCompare	    proc near		    ; CODE XREF: DOS_CLOSE+3Cp
seg000:4662					    ; FINDENTRY:NO_E5p
seg000:4662		    mov	    cx,	11
seg000:4665
seg000:4665 WILDCRD:				    ; CODE XREF: MetaCompare+Cj
seg000:4665		    repe cmpsb
seg000:4667		    jz	    short MetaRet
seg000:4669		    cmp	    byte ptr es:[di-1],	'?'
seg000:466E		    jz	    short WILDCRD
seg000:4670
seg000:4670 MetaRet:				    ; CODE XREF: MetaCompare+5j
seg000:4670		    retn
seg000:4670 MetaCompare	    endp
seg000:4670
seg000:4671
seg000:4671 ; =============== S	U B R O	U T I N	E =======================================
seg000:4671
seg000:4671
seg000:4671 NEXTENTRY	    proc near		    ; CODE XREF: FINDENTRY+55p
seg000:4671		    mov	    ax,	ds:LASTENT
seg000:4674		    cmp	    ax,	ds:ENTLAST
seg000:4678		    jz	    short NONE
seg000:467A		    inc	    ax
seg000:467B		    lea	    bx,	[bx+32]
seg000:467E		    cmp	    bx,	dx
seg000:4680		    jb	    short HAVIT
seg000:4682		    mov	    bl,	byte ptr ds:SECCLUSPOS
seg000:4686		    inc	    bl
seg000:4688		    cmp	    bl,	byte ptr ds:THISDRV+1
seg000:468C		    jb	    short SAMECLUS
seg000:468E		    mov	    bx,	ds:NXTCLUSNUM
seg000:4692		    call    IsEOF
seg000:4695		    jnb	    short NONE
seg000:4697		    cmp	    bx,	2
seg000:469A		    jb	    short NONE
seg000:469C		    jmp	    short GetEnt
seg000:469E ; ---------------------------------------------------------------------------
seg000:469E		    nop
seg000:469F
seg000:469F NONE:				    ; CODE XREF: NEXTENTRY+7j
seg000:469F					    ; NEXTENTRY+24j ...
seg000:469F		    stc
seg000:46A0		    retn
seg000:46A1 ; ---------------------------------------------------------------------------
seg000:46A1
seg000:46A1 HAVIT:				    ; CODE XREF: NEXTENTRY+Fj
seg000:46A1		    mov	    ds:LASTENT,	ax
seg000:46A4		    clc
seg000:46A5
seg000:46A5 nextentry_retn:			    ; CODE XREF: GETENTRY+23j
seg000:46A5		    retn
seg000:46A6 ; ---------------------------------------------------------------------------
seg000:46A6
seg000:46A6 SAMECLUS:				    ; CODE XREF: NEXTENTRY+1Bj
seg000:46A6		    mov	    byte ptr ds:SECCLUSPOS, bl
seg000:46AA		    mov	    ds:LASTENT,	ax
seg000:46AD		    push    ds
seg000:46AE		    lds	    di,	ds:CURBUF
seg000:46B2		    mov	    dx,	[di+6]
seg000:46B5		    inc	    dx
seg000:46B6		    pop	    ds
seg000:46B7		    call    FIRSTCLUSTER
seg000:46BA		    xor	    bx,	bx
seg000:46BC		    jmp	    short SETENTRY
seg000:46BC NEXTENTRY	    endp
seg000:46BC
seg000:46BE ; ---------------------------------------------------------------------------
seg000:46BE		    nop
seg000:46BF
seg000:46BF ; =============== S	U B R O	U T I N	E =======================================
seg000:46BF
seg000:46BF
seg000:46BF GETENTRY	    proc near		    ; CODE XREF: DOS_DELETE+D9p
seg000:46BF					    ; DOS_CHDIR+87p ...
seg000:46BF		    mov	    ax,	ds:LASTENT
seg000:46C2
seg000:46C2 GetEnt:				    ; CODE XREF: GET_SOURCE+14p
seg000:46C2					    ; RENAME_NEXT+2Dp ...
seg000:46C2		    mov	    ds:LASTENT,	ax
seg000:46C5		    mov	    cl,	5
seg000:46C7		    rol	    ax,	cl
seg000:46C9		    mov	    dx,	ax
seg000:46CB		    and	    ax,	0FFE0h
seg000:46CE		    and	    dx,	1Fh
seg000:46D2		    mov	    bx,	es:[bp+2]
seg000:46D6		    and	    bl,	0E0h
seg000:46D9		    div	    bx
seg000:46DB		    mov	    bx,	dx
seg000:46DD		    push    bx
seg000:46DE		    call    DIRREAD
seg000:46E1		    pop	    bx
seg000:46E2		    jb	    short nextentry_retn
seg000:46E4
seg000:46E4 SETENTRY:				    ; CODE XREF: NEXTENTRY+4Bj
seg000:46E4		    mov	    dx,	word ptr ds:CURBUF
seg000:46E8		    add	    dx,	16
seg000:46EB		    add	    bx,	dx
seg000:46ED		    add	    dx,	es:[bp+2]
seg000:46F1		    retn
seg000:46F1 GETENTRY	    endp
seg000:46F1
seg000:46F2
seg000:46F2 ; =============== S	U B R O	U T I N	E =======================================
seg000:46F2
seg000:46F2
seg000:46F2 SETDIRSRCH	    proc near		    ; CODE XREF: DOS_RENAME+10Ap
seg000:46F2					    ; GET_SOURCE+8p ...
seg000:46F2		    or	    bx,	bx
seg000:46F4		    jz	    short SETROOTSRCH
seg000:46F6		    mov	    ds:DIRSTART, bx
seg000:46FA		    mov	    al,	es:[bp+4]
seg000:46FE		    inc	    al
seg000:4700		    mov	    byte ptr ds:THISDRV+1, al
seg000:4703		    push    si
seg000:4704		    test    ds:FastOpenFlg, 2
seg000:4709		    jnz	    short UNP_OK
seg000:470B		    call    UNPACK
seg000:470E		    jnb	    short UNP_OK
seg000:4710		    pop	    si
seg000:4711		    retn
seg000:4712 ; ---------------------------------------------------------------------------
seg000:4712
seg000:4712 UNP_OK:				    ; CODE XREF: SETDIRSRCH+17j
seg000:4712					    ; SETDIRSRCH+1Cj
seg000:4712		    mov	    ds:CLUSNUM,	di
seg000:4716		    mov	    dx,	bx
seg000:4718		    xor	    bl,	bl
seg000:471A		    mov	    byte ptr ds:SECCLUSPOS, bl
seg000:471E		    call    FIGREC
seg000:4721		    pop	    si
seg000:4722		    mov	    ds:DIRSEC, dx
seg000:4726		    clc
seg000:4727		    retn
seg000:4727 SETDIRSRCH	    endp
seg000:4727
seg000:4728
seg000:4728 ; =============== S	U B R O	U T I N	E =======================================
seg000:4728
seg000:4728
seg000:4728 SETROOTSRCH	    proc near		    ; CODE XREF: FINDENTRY+Cp
seg000:4728					    ; SETDIRSRCH+2j ...
seg000:4728		    xor	    ax,	ax
seg000:472A		    mov	    ds:DIRSTART, ax
seg000:472D		    mov	    byte ptr ds:SECCLUSPOS, al
seg000:4730		    dec	    ax
seg000:4731		    mov	    ds:CLUSNUM,	ax
seg000:4734		    mov	    ax,	es:[bp+0Bh]
seg000:4738		    mov	    dx,	es:[bp+10h]
seg000:473C		    sub	    ax,	dx
seg000:473E		    mov	    byte ptr ds:THISDRV+1, al
seg000:4741		    mov	    ds:DIRSEC, dx
seg000:4745		    clc
seg000:4746		    retn
seg000:4746 SETROOTSRCH	    endp
seg000:4746
seg000:4747
seg000:4747 ; =============== S	U B R O	U T I N	E =======================================
seg000:4747
seg000:4747
seg000:4747 GetPath	    proc near		    ; CODE XREF: GET_FILE_INFO+13p
seg000:4747					    ; seg000:3587p ...
seg000:4747
seg000:4747 ; FUNCTION CHUNK AT	seg000:484F SIZE 00000106 BYTES
seg000:4747 ; FUNCTION CHUNK AT	seg000:4956 SIZE 00000084 BYTES
seg000:4747
seg000:4747		    mov	    word ptr ds:CREATING, 0E500h
seg000:474D
seg000:474D GetPathNoSet:			    ; CODE XREF: DOS_DELETE+63p
seg000:474D					    ; DOS_RENAME+8Cp ...
seg000:474D		    mov	    ds:EXTERR_LOCUS, 2
seg000:4752		    mov	    word ptr ds:CURBUF,	-1
seg000:4758		    mov	    di,	ds:WFP_START
seg000:475C		    cmp	    word ptr [di+1], '\:'
seg000:4761		    jz	    short CrackIt
seg000:4763		    add	    di,	3
seg000:4766		    mov	    si,	di
seg000:4768		    call    CHKDEV
seg000:476B		    jb	    short InternalError
seg000:476D
seg000:476D Build_devJ:				    ; CODE XREF: GetPath+1A7j
seg000:476D		    mov	    al,	byte ptr ds:ExtFCB+1
seg000:4770		    mov	    byte ptr ds:ATTRIB_4+4, al
seg000:4773		    mov	    ds:EXTERR_LOCUS, 1
seg000:4778		    push    ss
seg000:4779		    pop	    es
seg000:477A		    mov	    si,	(offset	NAME1_1+1)
seg000:477D		    mov	    di,	ds:WFP_START
seg000:4781		    mov	    dx,	di
seg000:4783		    mov	    cx,	8
seg000:4786
seg000:4786 MoveLoop:				    ; CODE XREF: GetPath:nosavej
seg000:4786		    lodsb
seg000:4787		    stosb
seg000:4788		    cmp	    al,	' '
seg000:478A		    jz	    short nosave
seg000:478C		    mov	    dx,	di
seg000:478E
seg000:478E nosave:				    ; CODE XREF: GetPath+43j
seg000:478E		    loop    MoveLoop
seg000:4790		    mov	    di,	dx
seg000:4792		    mov	    byte ptr [di], 0
seg000:4795		    call    Build_device_ent
seg000:4798		    inc	    al
seg000:479A		    retn
seg000:479B ; ---------------------------------------------------------------------------
seg000:479B
seg000:479B InternalError:			    ; CODE XREF: GetPath+24j
seg000:479B					    ; GetPath:InternalErrorj
seg000:479B		    jmp	    short InternalError
seg000:479D ; ---------------------------------------------------------------------------
seg000:479D
seg000:479D CrackIt:				    ; CODE XREF: GetPath+1Aj
seg000:479D		    mov	    si,	ds:CURR_DIR_END
seg000:47A1		    cmp	    si,	-1
seg000:47A4		    jnz	    short LOOK_SING
seg000:47A6		    lea	    si,	[di+3]
seg000:47A9
seg000:47A9 LOOK_SING:				    ; CODE XREF: GetPath+5Dj
seg000:47A9		    mov	    byte ptr ds:ATTRIB_4+4, 16h
seg000:47AE		    les	    di,	ds:THISCDS
seg000:47B2		    mov	    ax,	-1
seg000:47B5		    mov	    bx,	es:[di+73]
seg000:47B9		    mov	    si,	ds:CURR_DIR_END
seg000:47BD		    cmp	    si,	ax
seg000:47BF		    jz	    short NO_CURR_D
seg000:47C1		    cmp	    bx,	ax
seg000:47C3		    jz	    short NO_CURR_D
seg000:47C5		    test    ds:FastOpenFlg, 1
seg000:47CA		    jz	    short GOT_SEARCH_CLUSTER
seg000:47CC		    push    es
seg000:47CD		    push    di
seg000:47CE		    push    cx
seg000:47CF		    push    word ptr [si-1]
seg000:47D2		    push    si
seg000:47D3		    push    bx
seg000:47D4		    mov	    byte ptr [si-1], 0
seg000:47D8		    mov	    si,	ds:WFP_START
seg000:47DC		    mov	    bx,	offset FastTable
seg000:47DF		    mov	    di,	offset Dir_Info_Buff
seg000:47E2		    mov	    cx,	offset FastOpen_Ext_Info
seg000:47E5		    mov	    al,	1
seg000:47E7		    push    ds
seg000:47E8		    pop	    es
seg000:47E9		    call    dword ptr [bx+2]
seg000:47EC		    jb	    short GO_Chk_end1
seg000:47EE		    cmp	    byte ptr [si], 0
seg000:47F1		    jz	    short GO_Chk_end
seg000:47F3		    stc
seg000:47F4		    jmp	    short GO_Chk_end
seg000:47F6 ; ---------------------------------------------------------------------------
seg000:47F6
seg000:47F6 GO_Chk_end1:			    ; CODE XREF: GetPath+A5j
seg000:47F6		    clc
seg000:47F7
seg000:47F7 GO_Chk_end:				    ; CODE XREF: GetPath+AAj
seg000:47F7					    ; GetPath+ADj
seg000:47F7		    pop	    bx
seg000:47F8		    pop	    si
seg000:47F9		    pop	    word ptr [si-1]
seg000:47FC		    pop	    cx
seg000:47FD		    pop	    di
seg000:47FE		    pop	    es
seg000:47FF		    jnb	    short GOT_SEARCH_CLUSTER
seg000:4801
seg000:4801 NO_CURR_D:				    ; CODE XREF: GetPath+78j
seg000:4801					    ; GetPath+7Cj
seg000:4801		    mov	    si,	ds:WFP_START
seg000:4805		    lea	    si,	[si+3]
seg000:4808		    les	    bp,	ds:THISDPB
seg000:480C		    jmp	    short ROOTPATH
seg000:480E ; ---------------------------------------------------------------------------
seg000:480E		    nop
seg000:480F
seg000:480F GOT_SEARCH_CLUSTER:			    ; CODE XREF: GetPath+83j
seg000:480F					    ; GetPath+B8j
seg000:480F		    les	    bp,	ds:THISDPB
seg000:4813		    call    SETDIRSRCH
seg000:4816		    jb	    short SETFERR
seg000:4818		    jmp	    short FINDPATH
seg000:481A ; ---------------------------------------------------------------------------
seg000:481A		    nop
seg000:481B
seg000:481B SETFERR:				    ; CODE XREF: GetPath+CFj
seg000:481B		    xor	    cl,	cl
seg000:481D		    stc
seg000:481E		    retn
seg000:481E GetPath	    endp
seg000:481E
seg000:481F
seg000:481F ; =============== S	U B R O	U T I N	E =======================================
seg000:481F
seg000:481F
seg000:481F CHKDEV	    proc near		    ; CODE XREF: GetPath+21p
seg000:481F		    mov	    si,	di
seg000:4821		    mov	    di,	ss
seg000:4823		    mov	    es,	di
seg000:4825		    mov	    di,	(offset	NAME1_1+1)
seg000:4828		    mov	    cx,	9
seg000:482B
seg000:482B TESTLOOP:				    ; CODE XREF: CHKDEV+1Dj
seg000:482B		    call    GETLET
seg000:482E		    cmp	    al,	'.'
seg000:4830		    jz	    short TESTDEVICE
seg000:4832		    call    PATHCHRCMP
seg000:4835		    jz	    short NOTDEV
seg000:4837		    or	    al,	al
seg000:4839		    jz	    short TESTDEVICE
seg000:483B		    stosb
seg000:483C		    loop    TESTLOOP
seg000:483E
seg000:483E NOTDEV:				    ; CODE XREF: CHKDEV+16j
seg000:483E		    stc
seg000:483F		    retn
seg000:4840 ; ---------------------------------------------------------------------------
seg000:4840
seg000:4840 TESTDEVICE:				    ; CODE XREF: CHKDEV+11j
seg000:4840					    ; CHKDEV+1Aj
seg000:4840		    add	    cx,	2
seg000:4843		    mov	    al,	' '
seg000:4845		    rep	stosb
seg000:4847		    mov	    ax,	ss
seg000:4849		    mov	    ds,	ax
seg000:484B		    call    DEVNAME
seg000:484E		    retn
seg000:484E CHKDEV	    endp
seg000:484E
seg000:484F ; ---------------------------------------------------------------------------
seg000:484F ; START OF FUNCTION	CHUNK FOR GetPath
seg000:484F
seg000:484F ROOTPATH:				    ; CODE XREF: GetPath+C5j
seg000:484F		    call    SETROOTSRCH
seg000:4852		    cmp	    byte ptr [si], 0
seg000:4855		    jnz	    short FINDPATH
seg000:4857		    mov	    al,	byte ptr ds:ExtFCB+1
seg000:485A		    mov	    byte ptr ds:ATTRIB_4+4, al
seg000:485D		    xor	    ah,	ah
seg000:485F		    retn
seg000:4860 ; ---------------------------------------------------------------------------
seg000:4860
seg000:4860 FINDPATH:				    ; CODE XREF: GetPath+D1j
seg000:4860					    ; GetPath+10Ej ...
seg000:4860		    push    es
seg000:4861		    push    si
seg000:4862		    mov	    di,	si
seg000:4864		    mov	    cx,	ds:DIRSTART
seg000:4868		    cmp	    ds:CURR_DIR_END, -1
seg000:486D		    jz	    short NOIDS
seg000:486F		    cmp	    di,	ds:CURR_DIR_END
seg000:4873		    jnz	    short NOIDS
seg000:4875		    les	    di,	ds:THISCDS
seg000:4879		    mov	    es:[di+73],	cx
seg000:487D
seg000:487D NOIDS:				    ; CODE XREF: GetPath+126j
seg000:487D					    ; GetPath+12Cj
seg000:487D		    mov	    ax,	ss
seg000:487F		    mov	    es,	ax
seg000:4881		    mov	    di,	(offset	NAME1_1+1)
seg000:4884		    mov	    ax,	'  '
seg000:4887		    stosb
seg000:4888		    stosw
seg000:4889		    stosw
seg000:488A		    stosw
seg000:488B		    stosw
seg000:488C		    stosw
seg000:488D		    mov	    di,	(offset	NAME1_1+1)
seg000:4890		    xor	    ah,	ah
seg000:4892
seg000:4892 GetNam:				    ; CODE XREF: GetPath+160j
seg000:4892		    lodsb
seg000:4893		    cmp	    al,	'.'
seg000:4895		    jz	    short setExt
seg000:4897		    or	    al,	al
seg000:4899		    jz	    short _GetDone
seg000:489B		    cmp	    al,	'\'
seg000:489D		    jz	    short _GetDone
seg000:489F		    cmp	    al,	'?'
seg000:48A1		    jnz	    short StoNam
seg000:48A3		    or	    ah,	1
seg000:48A6
seg000:48A6 StoNam:				    ; CODE XREF: GetPath+15Aj
seg000:48A6		    stosb
seg000:48A7		    jmp	    short GetNam
seg000:48A9 ; ---------------------------------------------------------------------------
seg000:48A9
seg000:48A9 setExt:				    ; CODE XREF: GetPath+14Ej
seg000:48A9		    mov	    di,	(offset	NAME1_8_5+5)
seg000:48AC
seg000:48AC GetExt:				    ; CODE XREF: GetPath+176j
seg000:48AC		    lodsb
seg000:48AD		    or	    al,	al
seg000:48AF		    jz	    short _GetDone
seg000:48B1		    cmp	    al,	'\'
seg000:48B3		    jz	    short _GetDone
seg000:48B5		    cmp	    al,	'?'
seg000:48B7		    jnz	    short StoExt
seg000:48B9		    or	    ah,	1
seg000:48BC
seg000:48BC StoExt:				    ; CODE XREF: GetPath+170j
seg000:48BC		    stosb
seg000:48BD		    jmp	    short GetExt
seg000:48BF ; ---------------------------------------------------------------------------
seg000:48BF
seg000:48BF _GetDone:				    ; CODE XREF: GetPath+152j
seg000:48BF					    ; GetPath+156j ...
seg000:48BF		    dec	    si
seg000:48C0		    mov	    cl,	ah
seg000:48C2		    or	    cl,	80h
seg000:48C5		    pop	    di
seg000:48C6		    pop	    es
seg000:48C7		    cmp	    si,	di
seg000:48C9		    jnz	    short check_device
seg000:48CB		    jmp	    BADPATH
seg000:48CE ; ---------------------------------------------------------------------------
seg000:48CE
seg000:48CE check_device:			    ; CODE XREF: GetPath+182j
seg000:48CE		    push    si
seg000:48CF		    mov	    al,	[si]
seg000:48D1		    or	    al,	al
seg000:48D3		    jnz	    short NOT_LAST
seg000:48D5		    mov	    bh,	byte ptr ds:ExtFCB+1
seg000:48D9		    mov	    byte ptr ds:ATTRIB_4+4, bh
seg000:48DD
seg000:48DD NOT_LAST:				    ; CODE XREF: GetPath+18Cj
seg000:48DD		    push    es
seg000:48DE		    push    ss
seg000:48DF		    pop	    es
seg000:48E0		    call    DEVNAME
seg000:48E3		    pop	    es
seg000:48E4		    jb	    short FindFile
seg000:48E6		    or	    al,	al
seg000:48E8		    jz	    short GO_BDEV
seg000:48EA		    jmp	    FileInPath
seg000:48ED ; ---------------------------------------------------------------------------
seg000:48ED
seg000:48ED GO_BDEV:				    ; CODE XREF: GetPath+1A1j
seg000:48ED		    pop	    si
seg000:48EE		    jmp	    Build_devJ
seg000:48F1 ; ---------------------------------------------------------------------------
seg000:48F1
seg000:48F1 FindFile:				    ; CODE XREF: GetPath+19Dj
seg000:48F1		    cmp	    byte ptr ds:NAME1_1+1, 0E5h
seg000:48F6		    jnz	    short NOE5
seg000:48F8		    mov	    byte ptr ds:NAME1_1+1, 5
seg000:48FD
seg000:48FD NOE5:				    ; CODE XREF: GetPath+1AFj
seg000:48FD		    push    di
seg000:48FE		    push    es
seg000:48FF		    push    cx
seg000:4900		    call    LookupPath
seg000:4903		    jnb	    short DIR_FOUND
seg000:4905		    call    FINDENTRY
seg000:4908
seg000:4908 DIR_FOUND:				    ; CODE XREF: GetPath+1BCj
seg000:4908		    pop	    cx
seg000:4909		    pop	    es
seg000:490A		    pop	    di
seg000:490B		    jnb	    short LOAD_BUF
seg000:490D		    jmp	    BADPATHPOP
seg000:4910 ; ---------------------------------------------------------------------------
seg000:4910
seg000:4910 LOAD_BUF:				    ; CODE XREF: GetPath+1C4j
seg000:4910		    lds	    di,	ds:CURBUF
seg000:4914		    test    byte ptr [bx+0Bh], 10h
seg000:4918		    jnz	    short GO_NEXT
seg000:491A		    jmp	    FileInPath
seg000:491D ; ---------------------------------------------------------------------------
seg000:491D
seg000:491D GO_NEXT:				    ; CODE XREF: GetPath+1D1j
seg000:491D		    cmp	    ss:NoSetDir, 0
seg000:4923		    jz	    short SetDir
seg000:4925		    mov	    dx,	di
seg000:4927		    mov	    cx,	ds
seg000:4929		    push    ss
seg000:492A		    pop	    ds
seg000:492B		    pop	    di
seg000:492C		    cmp	    byte ptr [di], 0
seg000:492F		    jnz	    short NEXT_ONE
seg000:4931		    jmp	    SetRet
seg000:4934 ; ---------------------------------------------------------------------------
seg000:4934
seg000:4934 NEXT_ONE:				    ; CODE XREF: GetPath+1E8j
seg000:4934		    push    di
seg000:4935		    mov	    di,	dx
seg000:4937		    mov	    ds,	cx
seg000:4939
seg000:4939 SetDir:				    ; CODE XREF: GetPath+1DCj
seg000:4939		    mov	    dx,	[si]
seg000:493B		    push    ds
seg000:493C		    push    ss
seg000:493D		    pop	    ds
seg000:493E		    test    ds:FastOpenFlg, 2
seg000:4943		    jz	    short DO_NORMAL
seg000:4945		    mov	    bx,	dx
seg000:4947		    mov	    di,	ds:CLUSNUM
seg000:494B		    push    ax
seg000:494C		    call    SETDIRSRCH
seg000:494F		    pop	    ax
seg000:4950		    add	    sp,	2
seg000:4953		    jmp	    short FAST_OPEN_SKIP
seg000:4953 ; END OF FUNCTION CHUNK FOR	GetPath
seg000:4955 ; ---------------------------------------------------------------------------
seg000:4955		    nop
seg000:4956 ; START OF FUNCTION	CHUNK FOR GetPath
seg000:4956
seg000:4956 DO_NORMAL:				    ; CODE XREF: GetPath+1FCj
seg000:4956		    pop	    ds
seg000:4957		    sub	    bx,	di
seg000:4959		    sub	    si,	di
seg000:495B		    push    bx
seg000:495C		    push    ax
seg000:495D		    push    si
seg000:495E		    push    cx
seg000:495F		    push    word ptr [di+6]
seg000:4962		    mov	    bx,	dx
seg000:4964		    push    ss
seg000:4965		    pop	    ds
seg000:4966		    call    SETDIRSRCH
seg000:4969		    pop	    dx
seg000:496A		    jb	    short SKIP_GETB
seg000:496C		    mov	    ds:ALLOWED,	18h
seg000:4971		    xor	    al,	al
seg000:4973		    call    GETBUFFR
seg000:4976
seg000:4976 SKIP_GETB:				    ; CODE XREF: GetPath+223j
seg000:4976		    pop	    cx
seg000:4977		    pop	    si
seg000:4978		    pop	    ax
seg000:4979		    pop	    bx
seg000:497A		    jnb	    short SET_THE_BUF
seg000:497C		    pop	    di
seg000:497D		    mov	    si,	di
seg000:497F		    jmp	    short BADPATH
seg000:4981 ; ---------------------------------------------------------------------------
seg000:4981
seg000:4981 SET_THE_BUF:			    ; CODE XREF: GetPath+233j
seg000:4981		    call    SET_BUF_AS_DIR
seg000:4984		    mov	    di,	word ptr ds:CURBUF
seg000:4988		    add	    si,	di
seg000:498A		    add	    bx,	di
seg000:498C
seg000:498C FAST_OPEN_SKIP:			    ; CODE XREF: GetPath+20Cj
seg000:498C		    pop	    di
seg000:498D		    call    InsertPath
seg000:4990		    mov	    al,	[di]
seg000:4992		    or	    al,	al
seg000:4994		    jz	    short SetRet
seg000:4996		    inc	    di
seg000:4997		    mov	    si,	di
seg000:4999		    call    PATHCHRCMP
seg000:499C		    jnz	    short find_bad_name
seg000:499E		    jmp	    FINDPATH
seg000:49A1 ; ---------------------------------------------------------------------------
seg000:49A1
seg000:49A1 find_bad_name:			    ; CODE XREF: GetPath+255j
seg000:49A1		    dec	    si
seg000:49A2
seg000:49A2 BADPATH:				    ; CODE XREF: GetPath+184j
seg000:49A2					    ; GetPath+238j
seg000:49A2		    xor	    cl,	cl
seg000:49A4		    jmp	    short BADPRET
seg000:49A6 ; ---------------------------------------------------------------------------
seg000:49A6
seg000:49A6 FileInPath:				    ; CODE XREF: GetPath+1A3j
seg000:49A6					    ; GetPath+1D3j
seg000:49A6		    pop	    di
seg000:49A7		    push    ss
seg000:49A8		    pop	    ds
seg000:49A9		    test    ds:FastOpenFlg, 1
seg000:49AE		    jz	    short NO_FAST
seg000:49B0		    test    ds:FastOpenFlg, 2
seg000:49B5		    jz	    short NO_FAST
seg000:49B7		    mov	    di,	ds:Next_Element_Start
seg000:49BB
seg000:49BB NO_FAST:				    ; CODE XREF: GetPath+267j
seg000:49BB					    ; GetPath+26Ej
seg000:49BB		    mov	    al,	[di]
seg000:49BD		    or	    al,	al
seg000:49BF		    jz	    short INCRET
seg000:49C1		    mov	    si,	di
seg000:49C3		    jmp	    short BADPRET
seg000:49C5 ; ---------------------------------------------------------------------------
seg000:49C5
seg000:49C5 INCRET:				    ; CODE XREF: GetPath+278j
seg000:49C5		    call    InsertPath
seg000:49C8		    inc	    al
seg000:49CA
seg000:49CA SetRet:				    ; CODE XREF: GetPath+1EAj
seg000:49CA					    ; GetPath+24Dj
seg000:49CA		    retn
seg000:49CB ; ---------------------------------------------------------------------------
seg000:49CB
seg000:49CB BADPATHPOP:				    ; CODE XREF: GetPath+1C6j
seg000:49CB		    pop	    si
seg000:49CC		    mov	    al,	[si]
seg000:49CE		    mov	    si,	di
seg000:49D0		    or	    al,	al
seg000:49D2
seg000:49D2 BADPRET:				    ; CODE XREF: GetPath+25Dj
seg000:49D2					    ; GetPath+27Cj
seg000:49D2		    mov	    al,	byte ptr ds:ExtFCB+1
seg000:49D5		    mov	    byte ptr ds:ATTRIB_4+4, al
seg000:49D8		    stc
seg000:49D9		    retn
seg000:49D9 ; END OF FUNCTION CHUNK FOR	GetPath
seg000:49DA
seg000:49DA ; =============== S	U B R O	U T I N	E =======================================
seg000:49DA
seg000:49DA
seg000:49DA STARTSRCH	    proc near		    ; CODE XREF: GET_SOURCE:gs_startsrchp
seg000:49DA					    ; RENAME_NEXT:SEARCH_GOONp	...
seg000:49DA		    les	    bp,	ds:THISDPB
seg000:49DE		    xor	    ax,	ax
seg000:49E0		    mov	    ds:LASTENT,	ax
seg000:49E3		    mov	    byte ptr ds:cMeta+1, al
seg000:49E6		    dec	    ax
seg000:49E7		    mov	    ds:ENTFREE,	ax
seg000:49EA		    mov	    ds:ENTLAST,	ax
seg000:49ED		    retn
seg000:49ED STARTSRCH	    endp
seg000:49ED
seg000:49EE
seg000:49EE ; =============== S	U B R O	U T I N	E =======================================
seg000:49EE
seg000:49EE
seg000:49EE MatchAttributes proc near		    ; CODE XREF: DOS_CLOSE+5Cp
seg000:49EE					    ; FINDENTRY+98p ...
seg000:49EE		    push    ax
seg000:49EF		    mov	    al,	byte ptr ss:ATTRIB_4+4
seg000:49F3		    not	    al
seg000:49F5		    and	    al,	ch
seg000:49F7		    and	    al,	16h
seg000:49F9		    pop	    ax
seg000:49FA		    retn
seg000:49FA MatchAttributes endp
seg000:49FA
seg000:49FB
seg000:49FB ; =============== S	U B R O	U T I N	E =======================================
seg000:49FB
seg000:49FB
seg000:49FB DEVNAME	    proc near		    ; CODE XREF: FCBRegen+71p
seg000:49FB					    ; DOS_RENAME+FDp ...
seg000:49FB		    push    si
seg000:49FC		    push    di
seg000:49FD		    push    cx
seg000:49FE		    push    ax
seg000:49FF		    push    word ptr ds:NAME1_1+1
seg000:4A03		    cmp	    byte ptr ds:NAME1_1+1, 5
seg000:4A08		    jnz	    short NOKTR
seg000:4A0A		    mov	    byte ptr ds:NAME1_1+1, 0E5h
seg000:4A0F
seg000:4A0F NOKTR:				    ; CODE XREF: DEVNAME+Dj
seg000:4A0F		    test    byte ptr ds:ATTRIB_4+4, 8
seg000:4A14		    jnz	    short RET31
seg000:4A16		    mov	    si,	offset NULDEV
seg000:4A19
seg000:4A19 LOOKIO:				    ; CODE XREF: DEVNAME+3Bj
seg000:4A19		    test    word ptr [si+4], 8000h
seg000:4A1E		    jz	    short SKIPDEV
seg000:4A20		    mov	    ax,	si
seg000:4A22		    add	    si,	10
seg000:4A25		    mov	    di,	(offset	NAME1_1+1)
seg000:4A28		    mov	    cx,	4
seg000:4A2B		    repe cmpsw
seg000:4A2D		    mov	    si,	ax
seg000:4A2F		    jz	    short IOCHK
seg000:4A31
seg000:4A31 SKIPDEV:				    ; CODE XREF: DEVNAME+23j
seg000:4A31		    lds	    si,	[si]
seg000:4A33		    cmp	    si,	-1
seg000:4A36		    jnz	    short LOOKIO
seg000:4A38
seg000:4A38 RET31:				    ; CODE XREF: DEVNAME+19j
seg000:4A38		    stc
seg000:4A39
seg000:4A39 RETNV:				    ; CODE XREF: DEVNAME+5Ej
seg000:4A39		    mov	    cx,	ss
seg000:4A3B		    mov	    ds,	cx
seg000:4A3D		    pop	    word ptr ds:NAME1_1+1
seg000:4A41		    pop	    ax
seg000:4A42		    pop	    cx
seg000:4A43		    pop	    di
seg000:4A44		    pop	    si
seg000:4A45		    retn
seg000:4A46 ; ---------------------------------------------------------------------------
seg000:4A46
seg000:4A46 IOCHK:				    ; CODE XREF: DEVNAME+34j
seg000:4A46		    mov	    word ptr ss:DEVPT+2, ds
seg000:4A4B		    mov	    bh,	[si+4]
seg000:4A4E		    or	    bh,	0C0h
seg000:4A51		    and	    bh,	0DFh
seg000:4A54		    mov	    word ptr ss:DEVPT, si
seg000:4A59		    jmp	    short RETNV
seg000:4A59 DEVNAME	    endp
seg000:4A59
seg000:4A5B
seg000:4A5B ; =============== S	U B R O	U T I N	E =======================================
seg000:4A5B
seg000:4A5B
seg000:4A5B Build_device_ent proc near		    ; CODE XREF: GetPath+4Ep
seg000:4A5B		    mov	    ax,	2020h
seg000:4A5E		    mov	    di,	(offset	NAME1_8_5+5)
seg000:4A61		    stosw
seg000:4A62		    stosb
seg000:4A63		    mov	    al,	40h
seg000:4A65		    stosb
seg000:4A66		    xor	    ax,	ax
seg000:4A68		    mov	    cx,	10
seg000:4A6B		    rep	stosw
seg000:4A6D		    call    DATE16
seg000:4A70		    mov	    di,	offset DEVFCB_dir_time
seg000:4A73		    xchg    ax,	dx
seg000:4A74		    stosw
seg000:4A75		    xchg    ax,	dx
seg000:4A76		    stosw
seg000:4A77		    mov	    si,	di
seg000:4A79		    mov	    ax,	word ptr ds:DEVPT
seg000:4A7C		    stosw
seg000:4A7D		    mov	    ax,	word ptr ds:DEVPT+2
seg000:4A80		    stosw
seg000:4A81		    mov	    ah,	bh
seg000:4A83		    mov	    bx,	(offset	NAME1_1+1)
seg000:4A86		    xor	    al,	al
seg000:4A88		    retn
seg000:4A88 Build_device_ent endp
seg000:4A88
seg000:4A89 ; ---------------------------------------------------------------------------
seg000:4A89
seg000:4A89 ValidateCDS:			    ; CODE XREF: seg000:2D77p
seg000:4A89					    ; TransPathSet+D8p
seg000:4A89		    push    bp
seg000:4A8A		    mov	    bp,	sp
seg000:4A8C		    sub	    sp,	6
seg000:4A8F		    mov	    [bp-2], di
seg000:4A92		    lds	    si,	ss:THISCDS
seg000:4A97		    mov	    [bp-6], si
seg000:4A9A		    mov	    word ptr [bp-4], ds
seg000:4A9D		    call    EcritDisk
seg000:4AA0		    test    word ptr [si+67], 8000h
seg000:4AA5		    jz	    short DoSplice
seg000:4AA7		    jmp	    FatFail
seg000:4AAA ; ---------------------------------------------------------------------------
seg000:4AAA
seg000:4AAA DoSplice:				    ; CODE XREF: seg000:4AA5j
seg000:4AAA		    xor	    dl,	dl
seg000:4AAC		    xchg    dl,	ss:NoSetDir
seg000:4AB1		    push    ss
seg000:4AB2		    pop	    es
seg000:4AB3		    call    FStrCpy
seg000:4AB6		    mov	    si,	[bp-2]
seg000:4AB9		    push    ss
seg000:4ABA		    pop	    ds
seg000:4ABB		    call    Splice
seg000:4ABE		    push    ss
seg000:4ABF		    pop	    ds
seg000:4AC0		    mov	    ds:NoSetDir, dl
seg000:4AC4		    les	    di,	ds:THISCDS
seg000:4AC8		    push    bp
seg000:4AC9		    call    FatRead_CDS
seg000:4ACC		    pop	    bp
seg000:4ACD		    jb	    short FatFail
seg000:4ACF		    lds	    si,	ds:THISCDS
seg000:4AD3		    cmp	    word ptr [si+73], -1
seg000:4AD7		    jnz	    short RestoreCDS
seg000:4AD9		    push    ss
seg000:4ADA		    pop	    es
seg000:4ADB		    push    ss:WFP_START
seg000:4AE0		    cmp	    si,	[bp-6]
seg000:4AE3		    jnz	    short DoChdir
seg000:4AE5		    mov	    di,	[bp-2]
seg000:4AE8		    mov	    ss:WFP_START, di
seg000:4AED		    call    FStrCpy
seg000:4AF0
seg000:4AF0 DoChdir:				    ; CODE XREF: seg000:4AE3j
seg000:4AF0		    push    ss
seg000:4AF1		    pop	    ds
seg000:4AF2		    push    word ptr ds:ExtFCB+1
seg000:4AF6		    push    bp
seg000:4AF7		    call    DOS_CHDIR
seg000:4AFA		    pop	    bp
seg000:4AFB		    pop	    bx
seg000:4AFC		    pop	    ds:WFP_START
seg000:4B00		    mov	    byte ptr ds:ExtFCB+1, bl
seg000:4B04		    lds	    si,	[bp-6]
seg000:4B07		    jnb	    short SetCluster
seg000:4B09		    mov	    word ptr ss:THISCDS, si
seg000:4B0E		    mov	    word ptr ss:THISCDS+2, ds
seg000:4B13		    xor	    cx,	cx
seg000:4B15		    mov	    [si+3], cl
seg000:4B18
seg000:4B18 SetCluster:				    ; CODE XREF: seg000:4B07j
seg000:4B18		    mov	    word ptr [si+73], 0FFFFh
seg000:4B1D		    lds	    si,	ss:THISCDS
seg000:4B22		    mov	    [si+73], cx
seg000:4B25
seg000:4B25 RestoreCDS:				    ; CODE XREF: seg000:4AD7j
seg000:4B25		    les	    di,	[bp-6]
seg000:4B28		    mov	    word ptr ss:THISCDS, di
seg000:4B2D		    mov	    word ptr ss:THISCDS+2, es
seg000:4B32		    clc
seg000:4B33
seg000:4B33 FatFail:				    ; CODE XREF: seg000:4AA7j
seg000:4B33					    ; seg000:4ACDj
seg000:4B33		    call    LcritDisk
seg000:4B36		    les	    di,	[bp-6]
seg000:4B39		    mov	    sp,	bp
seg000:4B3B		    pop	    bp
seg000:4B3C		    retn
seg000:4B3D
seg000:4B3D ; =============== S	U B R O	U T I N	E =======================================
seg000:4B3D
seg000:4B3D
seg000:4B3D CheckThisDevice proc near		    ; CODE XREF: TransPathSet+AAp
seg000:4B3D		    push    di
seg000:4B3E		    push    si
seg000:4B3F		    mov	    di,	si
seg000:4B41		    mov	    al,	[si]
seg000:4B43		    call    PATHCHRCMP
seg000:4B46		    jnz	    short ParseDev
seg000:4B48		    inc	    si
seg000:4B49		    lodsw
seg000:4B4A		    or	    ax,	2020h
seg000:4B4D		    cmp	    ax,	'ed'
seg000:4B50		    jnz	    short NotDevice
seg000:4B52		    lodsb
seg000:4B53		    or	    al,	20h
seg000:4B55		    cmp	    al,	'v'
seg000:4B57		    jnz	    short NotDevice
seg000:4B59		    lodsb
seg000:4B5A		    call    PATHCHRCMP
seg000:4B5D		    jnz	    short NotDevice
seg000:4B5F
seg000:4B5F ParseDev:				    ; CODE XREF: CheckThisDevice+9j
seg000:4B5F		    push    ds
seg000:4B60		    push    si
seg000:4B61		    call    NameTrans
seg000:4B64		    cmp	    byte ptr [si], 0
seg000:4B67		    stc
seg000:4B68		    jnz	    short SkipSearch
seg000:4B6A		    push    ss
seg000:4B6B		    pop	    ds
seg000:4B6C		    call    DEVNAME
seg000:4B6F
seg000:4B6F SkipSearch:				    ; CODE XREF: CheckThisDevice+2Bj
seg000:4B6F		    pop	    si
seg000:4B70		    pop	    ds
seg000:4B71
seg000:4B71 CheckReturn:			    ; CODE XREF: CheckThisDevice+3Dj
seg000:4B71		    pop	    di
seg000:4B72		    jnb	    short CheckDone
seg000:4B74		    mov	    si,	di
seg000:4B76
seg000:4B76 CheckDone:				    ; CODE XREF: CheckThisDevice+35j
seg000:4B76		    pop	    di
seg000:4B77		    cmc
seg000:4B78		    retn
seg000:4B79 ; ---------------------------------------------------------------------------
seg000:4B79
seg000:4B79 NotDevice:				    ; CODE XREF: CheckThisDevice+13j
seg000:4B79					    ; CheckThisDevice+1Aj ...
seg000:4B79		    stc
seg000:4B7A		    jmp	    short CheckReturn
seg000:4B7A CheckThisDevice endp
seg000:4B7A
seg000:4B7C
seg000:4B7C ; =============== S	U B R O	U T I N	E =======================================
seg000:4B7C
seg000:4B7C
seg000:4B7C LookupPath	    proc near		    ; CODE XREF: GetPath+1B9p
seg000:4B7C		    test    ss:FastOpenFlg, 1
seg000:4B82		    jz	    short NOLOOKUP
seg000:4B84		    test    ss:FastOpenFlg, 8
seg000:4B8A		    jnz	    short NOLOOKUP
seg000:4B8C		    mov	    bx,	offset FastTable
seg000:4B8F		    mov	    si,	ss:WFP_START
seg000:4B94		    mov	    di,	offset Dir_Info_Buff
seg000:4B97		    mov	    cx,	offset FastOpen_Ext_Info
seg000:4B9A		    mov	    al,	1
seg000:4B9C		    push    ds
seg000:4B9D		    pop	    es
seg000:4B9E		    call    dword ptr [bx+2]
seg000:4BA1		    jb	    short NOTFOUND
seg000:4BA3		    lea	    bx,	[si-2]
seg000:4BA6		    cmp	    bx,	ss:WFP_START
seg000:4BAB		    jz	    short NOTFOUND
seg000:4BAD		    mov	    ss:Next_Element_Start, si
seg000:4BB2		    mov	    bx,	cx
seg000:4BB4		    mov	    ax,	[bx+3]
seg000:4BB7		    mov	    ss:CLUSNUM,	ax
seg000:4BBB		    push    es
seg000:4BBC		    les	    bx,	ss:THISDPB
seg000:4BC1		    mov	    ah,	es:[bx]
seg000:4BC4		    pop	    es
seg000:4BC5		    mov	    word ptr ss:CURBUF+2, es
seg000:4BCA		    mov	    bx,	di
seg000:4BCC		    lea	    si,	[di+1Ah]
seg000:4BCF		    or	    ss:FastOpenFlg, 2
seg000:4BD5		    retn
seg000:4BD6 ; ---------------------------------------------------------------------------
seg000:4BD6
seg000:4BD6 NOTFOUND:				    ; CODE XREF: LookupPath+25j
seg000:4BD6					    ; LookupPath+2Fj
seg000:4BD6		    cmp	    ax,	-1
seg000:4BD9		    jnz	    short Partial_Success
seg000:4BDB		    mov	    ss:FastOpenFlg, 0
seg000:4BE1
seg000:4BE1 Partial_Success:			    ; CODE XREF: LookupPath+5Dj
seg000:4BE1		    and	    ss:FastOpenFlg, 0FBh
seg000:4BE7
seg000:4BE7 NOLOOKUP:				    ; CODE XREF: LookupPath+6j
seg000:4BE7					    ; LookupPath+Ej
seg000:4BE7		    stc
seg000:4BE8		    retn
seg000:4BE8 LookupPath	    endp
seg000:4BE8
seg000:4BE9
seg000:4BE9 ; =============== S	U B R O	U T I N	E =======================================
seg000:4BE9
seg000:4BE9
seg000:4BE9 InsertPath	    proc near		    ; CODE XREF: GetPath+246p
seg000:4BE9					    ; GetPath:INCRETp
seg000:4BE9		    pushf
seg000:4BEA		    test    ss:FastOpenFlg, 1
seg000:4BF0		    jz	    short GET_NEXT_ELEMENT
seg000:4BF2		    test    ss:FastOpenFlg, 2
seg000:4BF8		    jz	    short INSERT_DIR_INFO
seg000:4BFA		    and	    ss:FastOpenFlg, 0FDh
seg000:4C00		    mov	    di,	ss:Next_Element_Start
seg000:4C05		    jmp	    short GET_NEXT2
seg000:4C07 ; ---------------------------------------------------------------------------
seg000:4C07		    nop
seg000:4C08
seg000:4C08 INSERT_DIR_INFO:			    ; CODE XREF: InsertPath+Fj
seg000:4C08		    push    ds
seg000:4C09		    push    es
seg000:4C0A		    push    bx
seg000:4C0B		    push    si
seg000:4C0C		    push    di
seg000:4C0D		    push    cx
seg000:4C0E		    push    ax
seg000:4C0F		    lds	    di,	ss:CURBUF
seg000:4C14		    mov	    si,	offset FastOpen_Ext_Info
seg000:4C17		    mov	    ax,	[di+6]
seg000:4C1A		    push    ss
seg000:4C1B		    pop	    ds
seg000:4C1C		    mov	    [si+1], ax
seg000:4C1F		    mov	    ax,	ds:CLUSNUM
seg000:4C22		    mov	    [si+3], ax
seg000:4C25		    mov	    ax,	bx
seg000:4C27		    add	    di,	16
seg000:4C2A		    sub	    ax,	di
seg000:4C2C		    mov	    cl,	32
seg000:4C2E		    div	    cl
seg000:4C30		    mov	    [si], al
seg000:4C32		    push    ds
seg000:4C33		    pop	    es
seg000:4C34		    mov	    ds,	word ptr ds:CURBUF+2
seg000:4C38		    mov	    di,	bx
seg000:4C3A		    cmp	    word ptr [di+1Ah], 0
seg000:4C3E		    jz	    short SKIP_INSERT
seg000:4C40		    push    si
seg000:4C41		    pop	    bx
seg000:4C42		    mov	    al,	2
seg000:4C44		    mov	    si,	offset FastTable
seg000:4C47		    call    dword ptr es:[si+2]
seg000:4C4B		    clc
seg000:4C4C
seg000:4C4C SKIP_INSERT:			    ; CODE XREF: InsertPath+55j
seg000:4C4C		    pop	    ax
seg000:4C4D		    pop	    cx
seg000:4C4E		    pop	    di
seg000:4C4F		    pop	    si
seg000:4C50		    pop	    bx
seg000:4C51		    pop	    es
seg000:4C52		    pop	    ds
seg000:4C53
seg000:4C53 GET_NEXT2:				    ; CODE XREF: InsertPath+1Cj
seg000:4C53		    or	    ss:FastOpenFlg, 8
seg000:4C59
seg000:4C59 GET_NEXT_ELEMENT:			    ; CODE XREF: InsertPath+7j
seg000:4C59		    popf
seg000:4C5A		    retn
seg000:4C5A InsertPath	    endp
seg000:4C5A
seg000:4C5B
seg000:4C5B ; =============== S	U B R O	U T I N	E =======================================
seg000:4C5B
seg000:4C5B
seg000:4C5B IOFUNC	    proc near		    ; CODE XREF: seg000:1F67p
seg000:4C5B					    ; seg000:1FACp ...
seg000:4C5B		    mov	    word ptr ss:IOXAD_2, ss
seg000:4C60		    mov	    word ptr ss:IOXAD, offset DEVIOBUF
seg000:4C67		    mov	    word ptr ss:IOSCNT,	1
seg000:4C6E		    mov	    ss:DEVIOBUF, ax
seg000:4C72		    test    word ptr [si+5], 8000h
seg000:4C77		    jnz	    short IOTOFILEJ
seg000:4C79		    test    word ptr [si+5], 80h
seg000:4C7E		    jz	    short IOTOFILEJ
seg000:4C80		    call    save_world
seg000:4C83		    mov	    dx,	ds
seg000:4C85		    mov	    bx,	ss
seg000:4C87		    mov	    ds,	bx
seg000:4C89		    mov	    es,	bx
seg000:4C8B		    xor	    bx,	bx
seg000:4C8D		    cmp	    ah,	5
seg000:4C90		    jnz	    short no_sys_wait
seg000:4C92		    or	    bx,	400h
seg000:4C96
seg000:4C96 no_sys_wait:			    ; CODE XREF: IOFUNC+35j
seg000:4C96		    mov	    word ptr ds:IOCALL_REQSTAT,	bx
seg000:4C9A		    xor	    bx,	bx
seg000:4C9C		    mov	    ds:IOMED, bl
seg000:4CA0		    mov	    bl,	ah
seg000:4CA2		    mov	    ah,	ds:LenTab[bx]
seg000:4CA6		    shl	    bx,	1
seg000:4CA8		    mov	    cx,	word ptr ds:CmdTab[bx]
seg000:4CAC		    mov	    bx,	offset IOCALL
seg000:4CAF		    mov	    ds:IOCALL, ah
seg000:4CB3		    mov	    ds:IOCALL_REQFUNC, ch
seg000:4CB7		    mov	    ds,	dx
seg000:4CB9		    call    DEVIOCALL
seg000:4CBC		    mov	    di,	word ptr ss:IOCALL_REQSTAT
seg000:4CC1		    test    di,	8000h
seg000:4CC5		    jnz	    short DevErr
seg000:4CC7
seg000:4CC7 OkDevIO:				    ; CODE XREF: IOFUNC+A3j
seg000:4CC7		    mov	    ax,	ss
seg000:4CC9		    mov	    ds,	ax
seg000:4CCB		    cmp	    ch,	5
seg000:4CCE		    jnz	    short DNODRD
seg000:4CD0		    mov	    al,	ds:IOMED
seg000:4CD3		    mov	    byte ptr ds:DEVIOBUF, al
seg000:4CD6
seg000:4CD6 DNODRD:				    ; CODE XREF: IOFUNC+73j
seg000:4CD6		    mov	    ah,	ds:IOCALL_REQSTAT_1
seg000:4CDA		    not	    ah
seg000:4CDC		    and	    ah,	2
seg000:4CDF		    call    restore_world
seg000:4CE2		    mov	    ax,	ss:DEVIOBUF
seg000:4CE6		    retn
seg000:4CE7 ; ---------------------------------------------------------------------------
seg000:4CE7
seg000:4CE7 IOTOFILEJ:				    ; CODE XREF: IOFUNC+1Cj
seg000:4CE7					    ; IOFUNC+23j
seg000:4CE7		    jmp	    short IOTOFILE
seg000:4CE9 ; ---------------------------------------------------------------------------
seg000:4CE9
seg000:4CE9 DevErr:				    ; CODE XREF: IOFUNC+6Aj
seg000:4CE9		    mov	    ah,	cl
seg000:4CEB		    call    CHARHARD
seg000:4CEE		    cmp	    al,	1
seg000:4CF0		    jnz	    short NO_RETRY
seg000:4CF2		    call    restore_world
seg000:4CF5		    jmp	    IOFUNC
seg000:4CF8 ; ---------------------------------------------------------------------------
seg000:4CF8
seg000:4CF8 NO_RETRY:				    ; CODE XREF: IOFUNC+95j
seg000:4CF8		    and	    ss:IOCALL_REQSTAT_1, 0FDh
seg000:4CFE		    jmp	    short OkDevIO
seg000:4D00 ; ---------------------------------------------------------------------------
seg000:4D00
seg000:4D00 IOTOFILE:				    ; CODE XREF: IOFUNC:IOTOFILEJj
seg000:4D00		    or	    ah,	ah
seg000:4D02		    jz	    short IOIN
seg000:4D04		    dec	    ah
seg000:4D06		    jz	    short IOIST
seg000:4D08		    dec	    ah
seg000:4D0A		    jz	    short IOUT
seg000:4D0C		    retn
seg000:4D0D ; ---------------------------------------------------------------------------
seg000:4D0D
seg000:4D0D IOIST:				    ; CODE XREF: IOFUNC+ABj
seg000:4D0D		    push    word ptr [si+15h]
seg000:4D10		    push    word ptr [si+17h]
seg000:4D13		    call    IOIN
seg000:4D16		    pop	    word ptr [si+17h]
seg000:4D19		    pop	    word ptr [si+15h]
seg000:4D1C		    retn
seg000:4D1D ; ---------------------------------------------------------------------------
seg000:4D1D
seg000:4D1D IOUT:				    ; CODE XREF: IOFUNC+AFj
seg000:4D1D		    call    SETXADDR
seg000:4D20		    call    DOS_WRITE
seg000:4D23		    call    RESTXADDR
seg000:4D26
seg000:4D26 IOUT_retn:				    ; CODE XREF: IOIN+Fj
seg000:4D26		    retn
seg000:4D26 IOFUNC	    endp
seg000:4D26
seg000:4D27
seg000:4D27 ; =============== S	U B R O	U T I N	E =======================================
seg000:4D27
seg000:4D27
seg000:4D27 IOIN	    proc near		    ; CODE XREF: IOFUNC+A7j
seg000:4D27					    ; IOFUNC+B8p
seg000:4D27		    call    SETXADDR
seg000:4D2A		    call    DOS_READ
seg000:4D2D		    or	    cx,	cx
seg000:4D2F		    call    RESTXADDR
seg000:4D32		    mov	    al,	byte ptr ss:DEVIOBUF
seg000:4D36		    jnz	    short IOUT_retn
seg000:4D38		    mov	    al,	1Ah
seg000:4D3A		    retn
seg000:4D3A IOIN	    endp
seg000:4D3A
seg000:4D3B
seg000:4D3B ; =============== S	U B R O	U T I N	E =======================================
seg000:4D3B
seg000:4D3B
seg000:4D3B SETXADDR	    proc near		    ; CODE XREF: IOFUNC:IOUTp
seg000:4D3B					    ; IOINp
seg000:4D3B		    pop	    word ptr ss:CALLSCNT
seg000:4D40		    call    save_world
seg000:4D43		    push    ss:DMAADD
seg000:4D48		    push    ss:DMAADD_2
seg000:4D4D		    mov	    word ptr ss:THISSFT+2, ds
seg000:4D52		    push    ss
seg000:4D53		    pop	    ds
seg000:4D54		    mov	    word ptr ds:THISSFT, si
seg000:4D58		    mov	    cx,	word ptr ds:IOXAD_2
seg000:4D5C		    mov	    ds:DMAADD_2, cx
seg000:4D60		    mov	    cx,	word ptr ds:IOXAD
seg000:4D64		    mov	    ds:DMAADD, cx
seg000:4D68		    mov	    cx,	word ptr ds:IOSCNT
seg000:4D6C		    jmp	    short RESTRET
seg000:4D6C SETXADDR	    endp
seg000:4D6C
seg000:4D6E
seg000:4D6E ; =============== S	U B R O	U T I N	E =======================================
seg000:4D6E
seg000:4D6E
seg000:4D6E RESTXADDR	    proc near		    ; CODE XREF: IOFUNC+C8p
seg000:4D6E					    ; IOIN+8p
seg000:4D6E		    pop	    word ptr ds:CALLSCNT
seg000:4D72		    pop	    ds:DMAADD_2
seg000:4D76		    pop	    ds:DMAADD
seg000:4D7A		    call    restore_world
seg000:4D7D
seg000:4D7D RESTRET:				    ; CODE XREF: SETXADDR+31j
seg000:4D7D		    jmp	    word ptr ss:CALLSCNT
seg000:4D7D RESTXADDR	    endp
seg000:4D7D
seg000:4D82
seg000:4D82 ; =============== S	U B R O	U T I N	E =======================================
seg000:4D82
seg000:4D82
seg000:4D82 DEV_OPEN_SFT    proc near		    ; CODE XREF: DOS_DUP+Ap
seg000:4D82					    ; seg000:3766p ...
seg000:4D82		    call    save_world
seg000:4D85		    mov	    al,	0Dh
seg000:4D87		    jmp	    short DO_OPCLS
seg000:4D87 DEV_OPEN_SFT    endp
seg000:4D87
seg000:4D89
seg000:4D89 ; =============== S	U B R O	U T I N	E =======================================
seg000:4D89
seg000:4D89
seg000:4D89 DEV_CLOSE_SFT   proc near		    ; CODE XREF: DOS_CLOSE+A9p
seg000:4D89					    ; CHECK_VIRT_OPEN+14p ...
seg000:4D89		    call    save_world
seg000:4D8C		    mov	    al,	0Eh
seg000:4D8E
seg000:4D8E DO_OPCLS:				    ; CODE XREF: DEV_OPEN_SFT+5j
seg000:4D8E		    call    IsSFTNet
seg000:4D91		    jnz	    short OPCLS_DONE
seg000:4D93		    xor	    ah,	ah
seg000:4D95		    test    word ptr es:[di+5],	80h
seg000:4D9B		    les	    di,	es:[di+7]
seg000:4D9F		    jnz	    short Got_Dev_Addr
seg000:4DA1		    call    CheckShare
seg000:4DA4		    jz	    short OPCLS_DONE
seg000:4DA6		    mov	    ah,	es:[di+1]
seg000:4DAA		    mov	    cl,	es:[di]
seg000:4DAD		    les	    di,	es:[di+12h]
seg000:4DB1
seg000:4DB1 Got_Dev_Addr:			    ; CODE XREF: DEV_CLOSE_SFT+16j
seg000:4DB1		    test    word ptr es:[di+4],	800h
seg000:4DB7		    jz	    short OPCLS_DONE
seg000:4DB9		    push    es
seg000:4DBA		    pop	    ds
seg000:4DBB		    mov	    si,	di
seg000:4DBD
seg000:4DBD OPCLS_RETRY:			    ; CODE XREF: DEV_CLOSE_SFT+70j
seg000:4DBD		    push    ss
seg000:4DBE		    pop	    es
seg000:4DBF		    mov	    di,	offset DEVCALL
seg000:4DC2		    mov	    bx,	di
seg000:4DC4		    push    ax
seg000:4DC5		    mov	    al,	13
seg000:4DC7		    stosb
seg000:4DC8		    pop	    ax
seg000:4DC9		    xchg    ah,	al
seg000:4DCB		    stosb
seg000:4DCC		    xchg    ah,	al
seg000:4DCE		    stosb
seg000:4DCF		    mov	    word ptr es:[di], 0
seg000:4DD4		    push    ax
seg000:4DD5		    call    DEVIOCALL2
seg000:4DD8		    mov	    di,	es:[bx+3]
seg000:4DDC		    test    di,	8000h
seg000:4DE0		    jz	    short OPCLS_DONEP
seg000:4DE2		    test    word ptr [si+4], 8000h
seg000:4DE7		    jz	    short BLKDEV
seg000:4DE9		    mov	    ah,	86h
seg000:4DEB		    jmp	    short HRDERR
seg000:4DED ; ---------------------------------------------------------------------------
seg000:4DED
seg000:4DED BLKDEV:				    ; CODE XREF: DEV_CLOSE_SFT+5Ej
seg000:4DED		    mov	    al,	cl
seg000:4DEF		    mov	    ah,	6
seg000:4DF1
seg000:4DF1 HRDERR:				    ; CODE XREF: DEV_CLOSE_SFT+62j
seg000:4DF1		    call    CHARHARD
seg000:4DF4		    cmp	    al,	1
seg000:4DF6		    jnz	    short OPCLS_DONEP
seg000:4DF8		    pop	    ax
seg000:4DF9		    jmp	    short OPCLS_RETRY
seg000:4DFB ; ---------------------------------------------------------------------------
seg000:4DFB
seg000:4DFB OPCLS_DONEP:			    ; CODE XREF: DEV_CLOSE_SFT+57j
seg000:4DFB					    ; DEV_CLOSE_SFT+6Dj
seg000:4DFB		    pop	    ax
seg000:4DFC
seg000:4DFC OPCLS_DONE:				    ; CODE XREF: DEV_CLOSE_SFT+8j
seg000:4DFC					    ; DEV_CLOSE_SFT+1Bj ...
seg000:4DFC		    call    restore_world
seg000:4DFF		    retn
seg000:4DFF DEV_CLOSE_SFT   endp
seg000:4DFF
seg000:4E00
seg000:4E00 ; =============== S	U B R O	U T I N	E =======================================
seg000:4E00
seg000:4E00
seg000:4E00 DEVIOCALL	    proc near		    ; CODE XREF: DOS_READ+74p
seg000:4E00					    ; DOS_WRITE+50p ...
seg000:4E00		    lds	    si,	[si+7]
seg000:4E00 DEVIOCALL	    endp
seg000:4E00
seg000:4E03
seg000:4E03 ; =============== S	U B R O	U T I N	E =======================================
seg000:4E03
seg000:4E03
seg000:4E03 DEVIOCALL2	    proc near		    ; CODE XREF: seg000:180Dp
seg000:4E03					    ; seg000:1821p ...
seg000:4E03		    call    EcritDevice
seg000:4E06		    mov	    ax,	[si+6]
seg000:4E09		    mov	    ss:CALLDEVAD, ax
seg000:4E0D		    mov	    ss:CALLDEVAD_2, ds
seg000:4E12		    call    dword ptr ss:CALLDEVAD
seg000:4E17		    mov	    ax,	[si+8]
seg000:4E1A		    mov	    ss:CALLDEVAD, ax
seg000:4E1E		    call    dword ptr ss:CALLDEVAD
seg000:4E23		    call    LcritDevice
seg000:4E26		    retn
seg000:4E26 DEVIOCALL2	    endp
seg000:4E26
seg000:4E27
seg000:4E27 ; =============== S	U B R O	U T I N	E =======================================
seg000:4E27
seg000:4E27
seg000:4E27 SETREAD	    proc near		    ; CODE XREF: seg000:1805p
seg000:4E27					    ; READTIME+12p ...
seg000:4E27		    push    di
seg000:4E28		    push    cx
seg000:4E29		    push    ax
seg000:4E2A		    mov	    cl,	4
seg000:4E2C
seg000:4E2C SETCALLHEAD:			    ; CODE XREF: SETWRITE+Aj
seg000:4E2C		    mov	    al,	16h
seg000:4E2E		    push    ss
seg000:4E2F		    pop	    es
seg000:4E30		    mov	    di,	offset DEVCALL
seg000:4E33		    stosb
seg000:4E34		    pop	    ax
seg000:4E35		    stosb
seg000:4E36		    push    ax
seg000:4E37		    mov	    al,	cl
seg000:4E39		    stosb
seg000:4E3A		    xor	    ax,	ax
seg000:4E3C		    stosw
seg000:4E3D		    add	    di,	8
seg000:4E40		    pop	    ax
seg000:4E41		    xchg    ah,	al
seg000:4E43		    stosb
seg000:4E44		    xchg    al,	ah
seg000:4E46		    push    ax
seg000:4E47		    mov	    ax,	bx
seg000:4E49		    stosw
seg000:4E4A		    mov	    ax,	ds
seg000:4E4C		    stosw
seg000:4E4D		    pop	    cx
seg000:4E4E		    pop	    ax
seg000:4E4F		    stosw
seg000:4E50		    xchg    ax,	dx
seg000:4E51		    stosw
seg000:4E52		    xchg    ax,	cx
seg000:4E53		    xchg    dx,	cx
seg000:4E55		    pop	    di
seg000:4E56		    mov	    bx,	offset DEVCALL
seg000:4E59		    retn
seg000:4E59 SETREAD	    endp
seg000:4E59
seg000:4E5A
seg000:4E5A ; =============== S	U B R O	U T I N	E =======================================
seg000:4E5A
seg000:4E5A
seg000:4E5A SETWRITE	    proc near		    ; CODE XREF: seg000:1812p
seg000:4E5A					    ; seg000:193Ep ...
seg000:4E5A		    push    di
seg000:4E5B		    push    cx
seg000:4E5C		    push    ax
seg000:4E5D		    mov	    cl,	8
seg000:4E5F		    add	    cl,	ss:VERFLG
seg000:4E64		    jmp	    short SETCALLHEAD
seg000:4E64 SETWRITE	    endp
seg000:4E64
seg000:4E66
seg000:4E66 ; =============== S	U B R O	U T I N	E =======================================
seg000:4E66
seg000:4E66
seg000:4E66 BUILDDIR	    proc near		    ; CODE XREF: NewEntry+Ep
seg000:4E66		    mov	    ax,	ds:ENTFREE
seg000:4E69		    cmp	    ax,	-1
seg000:4E6C		    jz	    short CHECK_IF_ROOT
seg000:4E6E		    clc
seg000:4E6F		    retn
seg000:4E70 ; ---------------------------------------------------------------------------
seg000:4E70
seg000:4E70 CHECK_IF_ROOT:			    ; CODE XREF: BUILDDIR+6j
seg000:4E70		    cmp	    ds:DIRSTART, 0
seg000:4E75		    jnz	    short NEWDIR
seg000:4E77		    stc
seg000:4E78
seg000:4E78 builddir_retn:			    ; CODE XREF: BUILDDIR+1Ej
seg000:4E78					    ; BUILDDIR+26j ...
seg000:4E78		    retn
seg000:4E79 ; ---------------------------------------------------------------------------
seg000:4E79
seg000:4E79 NEWDIR:				    ; CODE XREF: seg000:3B6Bp
seg000:4E79					    ; BUILDDIR+Fj
seg000:4E79		    mov	    bx,	ds:DIRSTART
seg000:4E7D		    or	    bx,	bx
seg000:4E7F		    jz	    short NULLDIR
seg000:4E81		    call    GETEOF
seg000:4E84		    jb	    short builddir_retn
seg000:4E86
seg000:4E86 NULLDIR:				    ; CODE XREF: BUILDDIR+19j
seg000:4E86		    mov	    cx,	1
seg000:4E89		    call    ALLOCATE
seg000:4E8C		    jb	    short builddir_retn
seg000:4E8E		    mov	    dx,	ds:DIRSTART
seg000:4E92		    or	    dx,	dx
seg000:4E94		    jnz	    short ADDINGDIR
seg000:4E96		    call    SETDIRSRCH
seg000:4E99		    jb	    short builddir_retn
seg000:4E9B		    mov	    ds:LASTENT,	-1
seg000:4EA1		    jmp	    short GOTDIRREC
seg000:4EA3 ; ---------------------------------------------------------------------------
seg000:4EA3
seg000:4EA3 ADDINGDIR:				    ; CODE XREF: BUILDDIR+2Ej
seg000:4EA3		    push    bx
seg000:4EA4		    mov	    bx,	ds:CLUSNUM
seg000:4EA8		    call    IsEOF
seg000:4EAB		    pop	    bx
seg000:4EAC		    jb	    short NOTFIRSTGROW
seg000:4EAE		    mov	    ds:CLUSNUM,	bx
seg000:4EB2		    push    cx
seg000:4EB3		    push    ax
seg000:4EB4		    push    bp
seg000:4EB5		    mov	    ah,	1
seg000:4EB7		    mov	    dl,	es:[bp+0]
seg000:4EBB		    mov	    cx,	ds:DIRSTART
seg000:4EBF		    mov	    bp,	bx
seg000:4EC1		    call    FastOpen_Update
seg000:4EC4		    pop	    bp
seg000:4EC5		    pop	    ax
seg000:4EC6		    pop	    cx
seg000:4EC7
seg000:4EC7 NOTFIRSTGROW:			    ; CODE XREF: BUILDDIR+46j
seg000:4EC7		    mov	    dx,	bx
seg000:4EC9		    xor	    bl,	bl
seg000:4ECB		    call    FIGREC
seg000:4ECE
seg000:4ECE GOTDIRREC:				    ; CODE XREF: BUILDDIR+3Bj
seg000:4ECE		    mov	    cl,	es:[bp+4]
seg000:4ED2		    inc	    cl
seg000:4ED4		    xor	    ch,	ch
seg000:4ED6
seg000:4ED6 ZERODIR:				    ; CODE XREF: BUILDDIR+A3j
seg000:4ED6		    push    cx
seg000:4ED7		    mov	    ds:ALLOWED,	18h
seg000:4EDC		    mov	    al,	0FFh
seg000:4EDE		    call    GETBUFFR
seg000:4EE1		    jnb	    short GET_SSIZE
seg000:4EE3		    pop	    cx
seg000:4EE4		    retn
seg000:4EE5 ; ---------------------------------------------------------------------------
seg000:4EE5
seg000:4EE5 GET_SSIZE:				    ; CODE XREF: BUILDDIR+7Bj
seg000:4EE5		    mov	    cx,	es:[bp+2]
seg000:4EE9		    push    es
seg000:4EEA		    les	    di,	ds:CURBUF
seg000:4EEE		    or	    byte ptr es:[di+5],	4
seg000:4EF3		    push    di
seg000:4EF4		    add	    di,	16
seg000:4EF7		    xor	    ax,	ax
seg000:4EF9		    shr	    cx,	1
seg000:4EFB		    rep	stosw
seg000:4EFD		    jnb	    short EVENZ
seg000:4EFF		    stosb
seg000:4F00
seg000:4F00 EVENZ:				    ; CODE XREF: BUILDDIR+97j
seg000:4F00		    pop	    di
seg000:4F01		    or	    byte ptr es:[di+5],	40h
seg000:4F06		    pop	    es
seg000:4F07		    pop	    cx
seg000:4F08		    inc	    dx
seg000:4F09		    loop    ZERODIR
seg000:4F0B		    mov	    ax,	ds:LASTENT
seg000:4F0E		    inc	    ax
seg000:4F0F		    clc
seg000:4F10		    retn
seg000:4F10 BUILDDIR	    endp
seg000:4F10
seg000:4F11
seg000:4F11 ; =============== S	U B R O	U T I N	E =======================================
seg000:4F11
seg000:4F11
seg000:4F11 SETDOTENT	    proc near		    ; CODE XREF: seg000:3B88p
seg000:4F11					    ; seg000:3B8Fp
seg000:4F11		    stosw
seg000:4F12		    mov	    cx,	4
seg000:4F15		    mov	    ax,	'  '
seg000:4F18		    rep	stosw
seg000:4F1A		    stosb
seg000:4F1B		    mov	    al,	10h
seg000:4F1D		    stosb
seg000:4F1E		    add	    di,	10
seg000:4F21		    mov	    si,	word ptr ds:THISSFT
seg000:4F25		    mov	    ax,	[si+0Dh]
seg000:4F28		    stosw
seg000:4F29		    mov	    ax,	[si+0Fh]
seg000:4F2C		    stosw
seg000:4F2D		    mov	    ax,	dx
seg000:4F2F		    stosw
seg000:4F30		    xor	    ax,	ax
seg000:4F32		    stosw
seg000:4F33		    stosw
seg000:4F34		    retn
seg000:4F34 SETDOTENT	    endp
seg000:4F34
seg000:4F35
seg000:4F35 ; =============== S	U B R O	U T I N	E =======================================
seg000:4F35
seg000:4F35
seg000:4F35 MakeNode	    proc near		    ; CODE XREF: seg000:3630p
seg000:4F35					    ; seg000:3B48p
seg000:4F35
seg000:4F35 ; FUNCTION CHUNK AT	seg000:4F65 SIZE 00000041 BYTES
seg000:4F35 ; FUNCTION CHUNK AT	seg000:4FAA SIZE 00000009 BYTES
seg000:4F35 ; FUNCTION CHUNK AT	seg000:4FF2 SIZE 00000030 BYTES
seg000:4F35
seg000:4F35		    mov	    word ptr ds:CREATING, 0E5FFh
seg000:4F3B		    push    ax
seg000:4F3C		    mov	    ds:NoSetDir, 0
seg000:4F41		    mov	    byte ptr ds:ExtFCB+1, al
seg000:4F44		    call    GetPathNoSet
seg000:4F47		    mov	    dl,	cl
seg000:4F49		    mov	    cx,	ax
seg000:4F4B		    pop	    ax
seg000:4F4C		    jnb	    short make_exists
seg000:4F4E		    jnz	    short make_err_4
seg000:4F50		    cmp	    dl,	80h
seg000:4F53		    jz	    short make_type
seg000:4F55
seg000:4F55 make_err_4:				    ; CODE XREF: MakeNode+19j
seg000:4F55		    mov	    al,	4
seg000:4F55 MakeNode	    endp
seg000:4F55
seg000:4F57 ; START OF FUNCTION	CHUNK FOR make_type
seg000:4F57
seg000:4F57 make_err_ret:			    ; CODE XREF: MakeNode+41j
seg000:4F57					    ; make_type+4Dj ...
seg000:4F57		    xor	    ah,	ah
seg000:4F59		    stc
seg000:4F59 ; END OF FUNCTION CHUNK FOR	make_type
seg000:4F5A
seg000:4F5A make_retn:				    ; CODE XREF: make_save+7j
seg000:4F5A		    retn
seg000:4F5B
seg000:4F5B ; =============== S	U B R O	U T I N	E =======================================
seg000:4F5B
seg000:4F5B
seg000:4F5B make_type	    proc near		    ; CODE XREF: DOS_RENAME+140p
seg000:4F5B					    ; MakeNode+1Ej
seg000:4F5B
seg000:4F5B ; FUNCTION CHUNK AT	seg000:4F57 SIZE 00000003 BYTES
seg000:4F5B ; FUNCTION CHUNK AT	seg000:4FA6 SIZE 00000004 BYTES
seg000:4F5B ; FUNCTION CHUNK AT	seg000:4FBF SIZE 00000033 BYTES
seg000:4F5B
seg000:4F5B		    les	    di,	ds:THISSFT
seg000:4F5F		    xor	    ax,	ax
seg000:4F61		    stc
seg000:4F62		    jmp	    short make_new
seg000:4F62 make_type	    endp
seg000:4F62
seg000:4F64 ; ---------------------------------------------------------------------------
seg000:4F64		    nop
seg000:4F65 ; START OF FUNCTION	CHUNK FOR MakeNode
seg000:4F65
seg000:4F65 make_exists:			    ; CODE XREF: MakeNode+17j
seg000:4F65		    jz	    short make_exists_dir
seg000:4F67		    mov	    al,	3
seg000:4F69		    test    byte ptr ds:ATTRIB_4+4, 18h
seg000:4F6E		    jnz	    short make_err_ret_5
seg000:4F70		    or	    ch,	ch
seg000:4F72		    js	    short make_share
seg000:4F74		    or	    ah,	ah
seg000:4F76		    jnz	    short make_err_ret
seg000:4F78		    push    cx
seg000:4F79		    mov	    es,	word ptr ds:CURBUF+2
seg000:4F7D		    mov	    ch,	es:[bx+0Bh]
seg000:4F81		    test    ch,	1
seg000:4F84		    jnz	    short make_err_ret_5P
seg000:4F86		    call    MatchAttributes
seg000:4F89		    pop	    cx
seg000:4F8A		    jnz	    short make_err_ret_5
seg000:4F8C		    xor	    al,	al
seg000:4F8E
seg000:4F8E make_share:				    ; CODE XREF: MakeNode+3Dj
seg000:4F8E		    xor	    ah,	ah
seg000:4F90		    push    ax
seg000:4F91		    push    cx
seg000:4F92		    mov	    ah,	ch
seg000:4F94		    call    DOOPEN
seg000:4F97		    les	    di,	ds:THISSFT
seg000:4F9B		    push    si
seg000:4F9C		    push    bx
seg000:4F9D		    call    ShareEnter
seg000:4FA0		    jnb	    short MakeEndShare
seg000:4FA2		    pop	    bx
seg000:4FA3		    pop	    si
seg000:4FA4		    pop	    cx
seg000:4FA5		    pop	    ax
seg000:4FA5 ; END OF FUNCTION CHUNK FOR	MakeNode
seg000:4FA6 ; START OF FUNCTION	CHUNK FOR make_type
seg000:4FA6
seg000:4FA6 Make_Share_ret:			    ; CODE XREF: make_type+95j
seg000:4FA6		    mov	    al,	6
seg000:4FA8		    jmp	    short make_err_ret
seg000:4FA8 ; END OF FUNCTION CHUNK FOR	make_type
seg000:4FAA ; ---------------------------------------------------------------------------
seg000:4FAA ; START OF FUNCTION	CHUNK FOR MakeNode
seg000:4FAA
seg000:4FAA make_err_ret_5P:			    ; CODE XREF: MakeNode+4Fj
seg000:4FAA		    pop	    cx
seg000:4FAB
seg000:4FAB make_err_ret_5:			    ; CODE XREF: MakeNode+39j
seg000:4FAB					    ; MakeNode+55j
seg000:4FAB		    mov	    al,	5
seg000:4FAD		    jmp	    short make_err_ret
seg000:4FAF ; ---------------------------------------------------------------------------
seg000:4FAF
seg000:4FAF make_exists_dir:			    ; CODE XREF: MakeNode:make_existsj
seg000:4FAF		    mov	    al,	1
seg000:4FB1		    jmp	    short make_err_ret
seg000:4FB1 ; END OF FUNCTION CHUNK FOR	MakeNode
seg000:4FB3
seg000:4FB3 ; =============== S	U B R O	U T I N	E =======================================
seg000:4FB3
seg000:4FB3
seg000:4FB3 make_save	    proc near		    ; CODE XREF: make_type:make_newp
seg000:4FB3					    ; MakeNode+DDp
seg000:4FB3		    push    ax
seg000:4FB4		    mov	    ax,	cx
seg000:4FB6		    call    NewEntry
seg000:4FB9		    pop	    ax
seg000:4FBA		    jnb	    short make_retn
seg000:4FBC		    mov	    al,	2
seg000:4FBE
seg000:4FBE make_save_retn:			    ; CODE XREF: make_type+67j
seg000:4FBE					    ; make_type+6Ej ...
seg000:4FBE		    retn
seg000:4FBE make_save	    endp
seg000:4FBE
seg000:4FBF ; ---------------------------------------------------------------------------
seg000:4FBF ; START OF FUNCTION	CHUNK FOR make_type
seg000:4FBF
seg000:4FBF make_new:				    ; CODE XREF: make_type+7j
seg000:4FBF		    call    make_save
seg000:4FC2		    jb	    short make_save_retn
seg000:4FC4		    test    byte ptr ds:ATTRIB_4+4, 10h
seg000:4FC9		    jnz	    short make_save_retn
seg000:4FCB		    push    ax
seg000:4FCC		    push    bx
seg000:4FCD		    push    si
seg000:4FCE		    call    ShareEnter
seg000:4FD1		    pop	    si
seg000:4FD2		    pop	    bx
seg000:4FD3		    pop	    ax
seg000:4FD4		    jnb	    short make_save_retn
seg000:4FD6		    push    ax
seg000:4FD7		    les	    di,	ds:CURBUF
seg000:4FDB		    mov	    byte ptr es:[bx], 0E5h
seg000:4FDF		    or	    byte ptr es:[di+5],	40h
seg000:4FE4		    les	    bp,	ds:THISDPB
seg000:4FE8		    mov	    al,	es:[bp+0]
seg000:4FEC		    call    FLUSHBUF
seg000:4FEF		    pop	    ax
seg000:4FF0		    jmp	    short Make_Share_ret
seg000:4FF0 ; END OF FUNCTION CHUNK FOR	make_type
seg000:4FF2 ; ---------------------------------------------------------------------------
seg000:4FF2 ; START OF FUNCTION	CHUNK FOR MakeNode
seg000:4FF2
seg000:4FF2 MakeEndShare:			    ; CODE XREF: MakeNode+6Bj
seg000:4FF2		    les	    di,	ds:THISSFT
seg000:4FF6		    xor	    ax,	ax
seg000:4FF8		    call    EcritDisk
seg000:4FFB		    xchg    ax,	es:[di]
seg000:4FFE		    push    ax
seg000:4FFF		    push    di
seg000:5000		    push    es
seg000:5001		    pushf
seg000:5002		    call    ShareEnd
seg000:5005		    popf
seg000:5006		    pop	    es
seg000:5007		    pop	    di
seg000:5008		    pop	    word ptr es:[di]
seg000:500B		    call    LcritDisk
seg000:500E		    pop	    bx
seg000:500F		    pop	    si
seg000:5010		    pop	    cx
seg000:5011		    pop	    ax
seg000:5012		    call    make_save
seg000:5015		    jb	    short make_save_retn
seg000:5017		    push    ax
seg000:5018		    push    bx
seg000:5019		    push    si
seg000:501A		    pushf
seg000:501B		    call    ShareEnter
seg000:501E		    popf
seg000:501F		    pop	    si
seg000:5020		    pop	    bx
seg000:5021		    pop	    ax
seg000:5021 ; END OF FUNCTION CHUNK FOR	MakeNode
seg000:5022
seg000:5022 makeendshare_retn:			    ; CODE XREF: NewEntry+Cj
seg000:5022					    ; NewEntry+11j ...
seg000:5022		    retn
seg000:5023
seg000:5023 ; =============== S	U B R O	U T I N	E =======================================
seg000:5023
seg000:5023
seg000:5023 NewEntry	    proc near		    ; CODE XREF: make_save+3p
seg000:5023		    les	    bp,	ds:THISDPB
seg000:5027		    jnb	    short EXISTENT
seg000:5029		    cmp	    ds:FAILERR,	0
seg000:502E		    stc
seg000:502F		    jnz	    short makeendshare_retn
seg000:5031		    call    BUILDDIR
seg000:5034		    jb	    short makeendshare_retn
seg000:5036		    call    GetEnt
seg000:5039		    jb	    short makeendshare_retn
seg000:503B		    jmp	    short FREESPOT
seg000:503D ; ---------------------------------------------------------------------------
seg000:503D
seg000:503D ERRRET3:				    ; CODE XREF: NewEntry+34j
seg000:503D		    stc
seg000:503E
seg000:503E newentry_retn:			    ; CODE XREF: NewEntry:newentry_errjj
seg000:503E		    retn
seg000:503F ; ---------------------------------------------------------------------------
seg000:503F
seg000:503F EXISTENT:				    ; CODE XREF: NewEntry+4j
seg000:503F		    or	    ah,	ah
seg000:5041		    jns	    short NOT_DEV1
seg000:5043		    jmp	    DOOPEN
seg000:5046 ; ---------------------------------------------------------------------------
seg000:5046
seg000:5046 NOT_DEV1:				    ; CODE XREF: NewEntry+1Ej
seg000:5046		    call    FREEENT
seg000:5049
seg000:5049 newentry_errj:			    ; CODE XREF: NewEntry+A4j
seg000:5049		    jb	    short newentry_retn
seg000:504B
seg000:504B FREESPOT:				    ; CODE XREF: NewEntry+18j
seg000:504B		    test    byte ptr ds:ATTRIB_4+4, 8
seg000:5050		    jz	    short NOTVOLID
seg000:5052		    cmp	    byte ptr ds:cMeta+1, 0
seg000:5057		    jnz	    short ERRRET3
seg000:5059
seg000:5059 NOTVOLID:				    ; CODE XREF: NewEntry+2Dj
seg000:5059		    mov	    es,	word ptr ds:CURBUF+2
seg000:505D		    mov	    di,	bx
seg000:505F		    mov	    si,	(offset	NAME1_1+1)
seg000:5062		    mov	    cx,	5
seg000:5065		    rep	movsw
seg000:5067		    movsb
seg000:5068		    mov	    al,	byte ptr ds:ATTRIB_4+4
seg000:506B		    stosb
seg000:506C		    mov	    cl,	5
seg000:506E		    xor	    ax,	ax
seg000:5070		    rep	stosw
seg000:5072		    call    DATE16
seg000:5075		    xchg    ax,	dx
seg000:5076		    stosw
seg000:5077		    xchg    ax,	dx
seg000:5078		    stosw
seg000:5079		    xor	    ax,	ax
seg000:507B		    push    di
seg000:507C		    stosw
seg000:507D		    stosw
seg000:507E		    stosw
seg000:507F		    mov	    si,	word ptr ds:CURBUF
seg000:5083		    or	    byte ptr es:[si+5],	40h
seg000:5088		    les	    bp,	ds:THISDPB
seg000:508C		    mov	    al,	es:[bp+0]
seg000:5090		    push    ax
seg000:5091		    push    bx
seg000:5092		    push    es
seg000:5093		    push    di
seg000:5094		    les	    di,	ds:THISSFT
seg000:5098		    test    word ptr es:[di+5],	80h
seg000:509E		    jnz	    short GotADevice
seg000:50A0		    push    ds
seg000:50A1		    push    bx
seg000:50A2		    lds	    bx,	ds:THISDPB
seg000:50A6		    mov	    es:[di+7], bx
seg000:50AA		    mov	    bx,	ds
seg000:50AC		    mov	    es:[di+9], bx
seg000:50B0		    pop	    bx
seg000:50B1		    pop	    ds
seg000:50B2		    call    DEV_OPEN_SFT
seg000:50B5		    mov	    ds:VIRTUAL_OPEN, 1
seg000:50BA
seg000:50BA GotADevice:				    ; CODE XREF: NewEntry+7Bj
seg000:50BA		    pop	    di
seg000:50BB		    pop	    es
seg000:50BC		    call    FLUSHBUF
seg000:50BF		    call    CHECK_VIRT_OPEN
seg000:50C2		    pop	    bx
seg000:50C3		    pop	    ax
seg000:50C4		    pop	    si
seg000:50C5		    mov	    ah,	al
seg000:50C7		    jb	    short newentry_errj
seg000:50C7 NewEntry	    endp
seg000:50C7
seg000:50C9
seg000:50C9 ; =============== S	U B R O	U T I N	E =======================================
seg000:50C9
seg000:50C9
seg000:50C9 DOOPEN	    proc near		    ; CODE XREF: REN_DEL_Check+3Bp
seg000:50C9					    ; seg000:open_okp ...
seg000:50C9		    mov	    dh,	ah
seg000:50CB		    les	    di,	ds:THISSFT
seg000:50CF		    add	    di,	4
seg000:50D2		    xor	    al,	al
seg000:50D4		    or	    dh,	dh
seg000:50D6		    js	    short DEV_SFT1
seg000:50D8		    mov	    ds,	word ptr ds:CURBUF+2
seg000:50DC		    mov	    al,	[bx+0Bh]
seg000:50DF
seg000:50DF DEV_SFT1:				    ; CODE XREF: DOOPEN+Dj
seg000:50DF		    stosb
seg000:50E0		    xor	    ax,	ax
seg000:50E2		    mov	    al,	dh
seg000:50E4		    or	    al,	40h
seg000:50E6		    stosw
seg000:50E7		    push    ds
seg000:50E8		    lds	    ax,	[bx+1Ah]
seg000:50EB		    or	    dh,	dh
seg000:50ED		    js	    short DEV_SFT2
seg000:50EF		    lds	    ax,	ss:THISDPB
seg000:50F4
seg000:50F4 DEV_SFT2:				    ; CODE XREF: DOOPEN+24j
seg000:50F4		    stosw
seg000:50F5		    mov	    ax,	ds
seg000:50F7		    pop	    ds
seg000:50F8		    stosw
seg000:50F9		    push    si
seg000:50FA		    movsw
seg000:50FB		    sub	    si,	6
seg000:50FE		    movsw
seg000:50FF		    movsw
seg000:5100		    lodsw
seg000:5101		    lodsw
seg000:5102		    mov	    cx,	ax
seg000:5104		    lodsw
seg000:5105		    or	    dh,	dh
seg000:5107		    jns	    short FILE_SFT1
seg000:5109		    xor	    ax,	ax
seg000:510B		    mov	    cx,	ax
seg000:510D
seg000:510D FILE_SFT1:				    ; CODE XREF: DOOPEN+3Ej
seg000:510D		    xchg    ax,	cx
seg000:510E		    stosw
seg000:510F		    xchg    ax,	cx
seg000:5110		    stosw
seg000:5111		    xor	    ax,	ax
seg000:5113		    stosw
seg000:5114		    stosw
seg000:5115		    or	    dh,	dh
seg000:5117		    js	    short DEV_SFT3
seg000:5119		    stosw
seg000:511A		    mov	    ax,	[bx+1Ah]
seg000:511D		    stosw
seg000:511E		    push    ds
seg000:511F		    push    ss
seg000:5120		    pop	    ds
seg000:5121		    test    ds:FastOpenFlg, 4
seg000:5126		    jz	    short Not_FastOpen
seg000:5128		    mov	    si,	offset FastOpen_Ext_Info
seg000:512B		    mov	    ax,	[si+1]
seg000:512E		    stosw
seg000:512F		    mov	    al,	[si]
seg000:5131		    stosb
seg000:5132		    pop	    ds
seg000:5133		    jmp	    short Next_Name
seg000:5135 ; ---------------------------------------------------------------------------
seg000:5135		    nop
seg000:5136
seg000:5136 Not_FastOpen:			    ; CODE XREF: DOOPEN+5Dj
seg000:5136		    pop	    ds
seg000:5137		    mov	    si,	word ptr ss:CURBUF
seg000:513C		    mov	    ax,	[si+6]
seg000:513F		    stosw
seg000:5140		    mov	    ax,	bx
seg000:5142		    add	    si,	16
seg000:5145		    sub	    ax,	si
seg000:5147		    mov	    cl,	32
seg000:5149		    div	    cl
seg000:514B		    stosb
seg000:514C
seg000:514C Next_Name:				    ; CODE XREF: DOOPEN+6Aj
seg000:514C		    jmp	    short FILE_SFT2
seg000:514E ; ---------------------------------------------------------------------------
seg000:514E
seg000:514E DEV_SFT3:				    ; CODE XREF: DOOPEN+4Ej
seg000:514E		    add	    di,	7
seg000:5151
seg000:5151 FILE_SFT2:				    ; CODE XREF: DOOPEN:Next_Namej
seg000:5151		    mov	    si,	bx
seg000:5153		    mov	    cx,	11
seg000:5156		    rep	movsb
seg000:5158		    pop	    si
seg000:5159		    push    ss
seg000:515A		    pop	    ds
seg000:515B		    clc
seg000:515C		    retn
seg000:515C DOOPEN	    endp
seg000:515C
seg000:515D
seg000:515D ; =============== S	U B R O	U T I N	E =======================================
seg000:515D
seg000:515D
seg000:515D FREEENT	    proc near		    ; CODE XREF: NewEntry:NOT_DEV1p
seg000:515D		    push    ds
seg000:515E		    lds	    di,	ds:CURBUF
seg000:5162		    mov	    cx,	[si]
seg000:5164		    mov	    dx,	[di+6]
seg000:5167		    pop	    ds
seg000:5168		    cmp	    cx,	2
seg000:516B		    jb	    short RET1
seg000:516D		    cmp	    cx,	es:[bp+0Dh]
seg000:5171		    ja	    short RET1
seg000:5173		    sub	    bx,	di
seg000:5175		    push    bx
seg000:5176		    push    dx
seg000:5177		    mov	    bx,	cx
seg000:5179		    call    RELEASE
seg000:517C		    pop	    dx
seg000:517D		    jnb	    short GET_BUF_BACK
seg000:517F		    pop	    bx
seg000:5180
seg000:5180 freeent_retn:			    ; CODE XREF: FREEENT+2Fj
seg000:5180		    retn
seg000:5181 ; ---------------------------------------------------------------------------
seg000:5181
seg000:5181 GET_BUF_BACK:			    ; CODE XREF: FREEENT+20j
seg000:5181		    mov	    ds:ALLOWED,	18h
seg000:5186		    xor	    al,	al
seg000:5188		    call    GETBUFFR
seg000:518B		    pop	    bx
seg000:518C		    jb	    short freeent_retn
seg000:518E		    call    SET_BUF_AS_DIR
seg000:5191		    add	    bx,	word ptr ds:CURBUF
seg000:5195		    mov	    si,	bx
seg000:5197		    add	    si,	1Ah
seg000:519A
seg000:519A RET1:				    ; CODE XREF: FREEENT+Ej
seg000:519A					    ; FREEENT+14j
seg000:519A		    clc
seg000:519B		    retn
seg000:519B FREEENT	    endp
seg000:519B
seg000:519C
seg000:519C ; =============== S	U B R O	U T I N	E =======================================
seg000:519C
seg000:519C
seg000:519C CHECK_VIRT_OPEN proc near		    ; CODE XREF: NewEntry+9Cp
seg000:519C					    ; FATALC+124p
seg000:519C		    push    ax
seg000:519D		    lahf
seg000:519E		    cmp	    ds:VIRTUAL_OPEN, 0
seg000:51A3		    jz	    short ALL_CLOSED
seg000:51A5		    mov	    ds:VIRTUAL_OPEN, 0
seg000:51AA		    push    es
seg000:51AB		    push    di
seg000:51AC		    les	    di,	ds:THISSFT
seg000:51B0		    call    DEV_CLOSE_SFT
seg000:51B3		    pop	    di
seg000:51B4		    pop	    es
seg000:51B5
seg000:51B5 ALL_CLOSED:				    ; CODE XREF: CHECK_VIRT_OPEN+7j
seg000:51B5		    sahf
seg000:51B6		    pop	    ax
seg000:51B7		    retn
seg000:51B7 CHECK_VIRT_OPEN endp
seg000:51B7
seg000:51B8
seg000:51B8 ; =============== S	U B R O	U T I N	E =======================================
seg000:51B8
seg000:51B8
seg000:51B8 FNDCLUS	    proc near		    ; CODE XREF: DISKREAD+3Bp
seg000:51B8					    ; DISKWRITE+BFp ...
seg000:51B8
seg000:51B8 ; FUNCTION CHUNK AT	seg000:51EE SIZE 00000005 BYTES
seg000:51B8
seg000:51B8		    push    es
seg000:51B9		    les	    di,	ds:THISSFT
seg000:51BD		    mov	    bx,	es:[di+1Bh]
seg000:51C1		    mov	    dx,	es:[di+19h]
seg000:51C5		    or	    bx,	bx
seg000:51C7		    jz	    short NOCLUS
seg000:51C9		    sub	    cx,	dx
seg000:51CB		    jnb	    short FINDIT
seg000:51CD		    add	    cx,	dx
seg000:51CF		    xor	    dx,	dx
seg000:51D1		    mov	    bx,	es:[di+0Bh]
seg000:51D5
seg000:51D5 FINDIT:				    ; CODE XREF: FNDCLUS+13j
seg000:51D5		    pop	    es
seg000:51D6		    jcxz    short RET9
seg000:51D6 FNDCLUS	    endp
seg000:51D6
seg000:51D8
seg000:51D8 ; =============== S	U B R O	U T I N	E =======================================
seg000:51D8
seg000:51D8
seg000:51D8 SKPCLP	    proc near		    ; CODE XREF: DISKWRITE+95p
seg000:51D8					    ; DISKWRITE+E5p ...
seg000:51D8		    call    UNPACK
seg000:51DB		    jnb	    short skpclp1
seg000:51DD		    retn
seg000:51DE ; ---------------------------------------------------------------------------
seg000:51DE
seg000:51DE skpclp1:				    ; CODE XREF: SKPCLP+3j
seg000:51DE		    push    bx
seg000:51DF		    mov	    bx,	di
seg000:51E1		    call    IsEOF
seg000:51E4		    pop	    bx
seg000:51E5		    jnb	    short RET9
seg000:51E7		    xchg    bx,	di
seg000:51E9		    inc	    dx
seg000:51EA		    loop    SKPCLP
seg000:51EC
seg000:51EC RET9:				    ; CODE XREF: FNDCLUS+1Ej
seg000:51EC					    ; SKPCLP+Dj
seg000:51EC		    clc
seg000:51ED		    retn
seg000:51ED SKPCLP	    endp
seg000:51ED
seg000:51EE ; ---------------------------------------------------------------------------
seg000:51EE ; START OF FUNCTION	CHUNK FOR FNDCLUS
seg000:51EE
seg000:51EE NOCLUS:				    ; CODE XREF: FNDCLUS+Fj
seg000:51EE		    pop	    es
seg000:51EF		    inc	    cx
seg000:51F0		    dec	    dx
seg000:51F1		    clc
seg000:51F2
seg000:51F2 fndclus_retn:			    ; CODE XREF: BUFSEC+13j
seg000:51F2		    retn
seg000:51F2 ; END OF FUNCTION CHUNK FOR	FNDCLUS
seg000:51F3
seg000:51F3 ; =============== S	U B R O	U T I N	E =======================================
seg000:51F3
seg000:51F3
seg000:51F3 BUFSEC	    proc near		    ; CODE XREF: BUFRD+4p
seg000:51F3					    ; BUFWRT+12p
seg000:51F3		    mov	    dx,	ds:CLUSNUM
seg000:51F7		    mov	    bl,	byte ptr ds:SECCLUSPOS
seg000:51FB		    mov	    ds:ALLOWED,	38h
seg000:5200		    call    FIGREC
seg000:5203		    call    GETBUFFR
seg000:5206		    jb	    short fndclus_retn
seg000:5208		    mov	    byte ptr ds:SECCLUSPOS+1, 1
seg000:520D		    mov	    si,	ds:NEXTADD
seg000:5211		    mov	    di,	si
seg000:5213		    mov	    cx,	ds:BYTCNT1
seg000:5217		    add	    di,	cx
seg000:5219		    mov	    ds:NEXTADD,	di
seg000:521D		    les	    di,	ds:CURBUF
seg000:5221		    or	    byte ptr es:[di+5],	8
seg000:5226		    lea	    di,	[di+16]
seg000:5229		    add	    di,	ds:BYTSECPOS
seg000:522D		    clc
seg000:522E		    retn
seg000:522E BUFSEC	    endp
seg000:522E
seg000:522F
seg000:522F ; =============== S	U B R O	U T I N	E =======================================
seg000:522F
seg000:522F
seg000:522F BUFRD	    proc near		    ; CODE XREF: DISKREAD+66p
seg000:522F					    ; DISKREAD+124p
seg000:522F		    push    es
seg000:5230		    mov	    ax,	0
seg000:5233		    call    BUFSEC
seg000:5236		    jnb	    short BUF_OK
seg000:5238
seg000:5238 BUF_IO_FAIL:			    ; CODE XREF: BUFWRT+15j
seg000:5238		    pop	    es
seg000:5239		    jmp	    short RBUFPLACED
seg000:523B ; ---------------------------------------------------------------------------
seg000:523B
seg000:523B BUF_OK:				    ; CODE XREF: BUFRD+7j
seg000:523B		    mov	    bx,	es
seg000:523D		    mov	    es,	ds:DMAADD_2
seg000:5241		    mov	    ds,	bx
seg000:5243		    xchg    di,	si
seg000:5245		    shr	    cx,	1
seg000:5247		    jnb	    short EVENRD
seg000:5249		    movsb
seg000:524A
seg000:524A EVENRD:				    ; CODE XREF: BUFRD+18j
seg000:524A		    rep	movsw
seg000:524C		    pop	    es
seg000:524D		    lds	    di,	ss:CURBUF
seg000:5252		    lea	    bx,	[di+16]
seg000:5255		    sub	    si,	bx
seg000:5257		    call    PLACEBUF
seg000:525A		    cmp	    si,	es:[bp+2]
seg000:525E		    jb	    short RBUFPLACEDC
seg000:5260		    call    PLACEHEAD
seg000:5263
seg000:5263 RBUFPLACEDC:			    ; CODE XREF: BUFRD+2Fj
seg000:5263		    clc
seg000:5264
seg000:5264 RBUFPLACED:				    ; CODE XREF: BUFRD+Aj
seg000:5264		    push    ss
seg000:5265		    pop	    ds
seg000:5266		    retn
seg000:5266 BUFRD	    endp
seg000:5266
seg000:5267
seg000:5267 ; =============== S	U B R O	U T I N	E =======================================
seg000:5267
seg000:5267
seg000:5267 BUFWRT	    proc near		    ; CODE XREF: DISKWRITE+FDp
seg000:5267					    ; DISKWRITE+18Cp
seg000:5267		    mov	    ax,	ds:SECPOS
seg000:526A		    inc	    ax
seg000:526B		    mov	    ds:SECPOS, ax
seg000:526E		    cmp	    ax,	ds:VALSEC
seg000:5272		    mov	    al,	1
seg000:5274		    ja	    short NOREAD
seg000:5276		    xor	    al,	al
seg000:5278
seg000:5278 NOREAD:				    ; CODE XREF: BUFWRT+Dj
seg000:5278		    push    es
seg000:5279		    call    BUFSEC
seg000:527C		    jb	    short BUF_IO_FAIL
seg000:527E		    mov	    ds,	ds:DMAADD_2
seg000:5282		    shr	    cx,	1
seg000:5284		    jnb	    short EVENWRT
seg000:5286		    movsb
seg000:5287
seg000:5287 EVENWRT:				    ; CODE XREF: BUFWRT+1Dj
seg000:5287		    rep	movsw
seg000:5289		    pop	    es
seg000:528A		    lds	    bx,	ss:CURBUF
seg000:528F		    or	    byte ptr [bx+5], 40h
seg000:5293		    lea	    si,	[bx+16]
seg000:5296		    sub	    di,	si
seg000:5298		    mov	    si,	di
seg000:529A		    mov	    di,	bx
seg000:529C		    call    PLACEBUF
seg000:529F		    cmp	    si,	es:[bp+2]
seg000:52A3		    jb	    short WBUFPLACED
seg000:52A5		    call    PLACEHEAD
seg000:52A8
seg000:52A8 WBUFPLACED:				    ; CODE XREF: BUFWRT+3Cj
seg000:52A8		    clc
seg000:52A9		    push    ss
seg000:52AA		    pop	    ds
seg000:52AB		    retn
seg000:52AB BUFWRT	    endp
seg000:52AB
seg000:52AC
seg000:52AC ; =============== S	U B R O	U T I N	E =======================================
seg000:52AC
seg000:52AC
seg000:52AC NEXTSEC	    proc near		    ; CODE XREF: DISKREAD+72p
seg000:52AC					    ; DISKREAD+119p ...
seg000:52AC		    test    byte ptr ds:SECCLUSPOS+1, -1
seg000:52B1		    jz	    short CLRET
seg000:52B3		    mov	    al,	byte ptr ds:SECCLUSPOS
seg000:52B6		    inc	    al
seg000:52B8		    cmp	    al,	es:[bp+4]
seg000:52BC		    jbe	    short SAVPOS
seg000:52BE		    mov	    bx,	ds:CLUSNUM
seg000:52C2		    call    IsEOF
seg000:52C5		    jnb	    short NONEXT
seg000:52C7		    call    UNPACK
seg000:52CA		    jb	    short NONEXT
seg000:52CC		    mov	    ds:CLUSNUM,	di
seg000:52D0		    inc	    ds:LASTPOS
seg000:52D4		    mov	    al,	0
seg000:52D6
seg000:52D6 SAVPOS:				    ; CODE XREF: NEXTSEC+10j
seg000:52D6		    mov	    byte ptr ds:SECCLUSPOS, al
seg000:52D9
seg000:52D9 CLRET:				    ; CODE XREF: NEXTSEC+5j
seg000:52D9		    clc
seg000:52DA		    retn
seg000:52DB ; ---------------------------------------------------------------------------
seg000:52DB
seg000:52DB NONEXT:				    ; CODE XREF: NEXTSEC+19j
seg000:52DB					    ; NEXTSEC+1Ej
seg000:52DB		    stc
seg000:52DC		    retn
seg000:52DC NEXTSEC	    endp
seg000:52DC
seg000:52DD
seg000:52DD ; =============== S	U B R O	U T I N	E =======================================
seg000:52DD
seg000:52DD
seg000:52DD OPTIMIZE	    proc near		    ; CODE XREF: DISKREAD:RDLPp
seg000:52DD					    ; DISKWRITE:WRTLPp
seg000:52DD		    push    dx
seg000:52DE		    push    bx
seg000:52DF		    mov	    al,	es:[bp+4]
seg000:52E3		    inc	    al
seg000:52E5		    mov	    ah,	al
seg000:52E7		    sub	    al,	dl
seg000:52E9		    mov	    dx,	cx
seg000:52EB		    mov	    cx,	0
seg000:52EE
seg000:52EE OPTCLUS:				    ; CODE XREF: OPTIMIZE+24j
seg000:52EE		    call    UNPACK
seg000:52F1		    jb	    short OP_ERR
seg000:52F3		    add	    cl,	al
seg000:52F5		    adc	    ch,	0
seg000:52F8		    cmp	    cx,	dx
seg000:52FA		    jnb	    short BLKDON
seg000:52FC		    mov	    al,	ah
seg000:52FE		    inc	    bx
seg000:52FF		    cmp	    di,	bx
seg000:5301		    jz	    short OPTCLUS
seg000:5303		    dec	    bx
seg000:5304
seg000:5304 FINCLUS:				    ; CODE XREF: OPTIMIZE+5Ej
seg000:5304		    mov	    ds:CLUSNUM,	bx
seg000:5308		    sub	    dx,	cx
seg000:530A		    push    dx
seg000:530B		    mov	    ax,	cx
seg000:530D		    mul	    word ptr es:[bp+2]
seg000:5311		    mov	    si,	ds:NEXTADD
seg000:5315		    add	    ax,	si
seg000:5317		    mov	    ds:NEXTADD,	ax
seg000:531A		    pop	    ax
seg000:531B		    pop	    dx
seg000:531C		    sub	    bx,	dx
seg000:531E		    add	    ds:LASTPOS,	bx
seg000:5322		    pop	    bx
seg000:5323		    call    FIGREC
seg000:5326		    mov	    bx,	si
seg000:5328		    clc
seg000:5329		    retn
seg000:532A ; ---------------------------------------------------------------------------
seg000:532A
seg000:532A OP_ERR:				    ; CODE XREF: OPTIMIZE+14j
seg000:532A		    add	    sp,	4
seg000:532D		    stc
seg000:532E		    retn
seg000:532F ; ---------------------------------------------------------------------------
seg000:532F
seg000:532F BLKDON:				    ; CODE XREF: OPTIMIZE+1Dj
seg000:532F		    sub	    cx,	dx
seg000:5331		    sub	    ah,	cl
seg000:5333		    dec	    ah
seg000:5335		    mov	    byte ptr ds:SECCLUSPOS, ah
seg000:5339		    mov	    cx,	dx
seg000:533B		    jmp	    short FINCLUS
seg000:533B OPTIMIZE	    endp
seg000:533B
seg000:533D
seg000:533D ; =============== S	U B R O	U T I N	E =======================================
seg000:533D
seg000:533D
seg000:533D FIGREC	    proc near		    ; CODE XREF: DIRREAD+4Ap
seg000:533D					    ; SETDIRSRCH+2Cp ...
seg000:533D		    push    cx
seg000:533E		    mov	    cl,	es:[bp+5]
seg000:5342		    dec	    dx
seg000:5343		    dec	    dx
seg000:5344		    shl	    dx,	cl
seg000:5346		    or	    dl,	bl
seg000:5348		    add	    dx,	es:[bp+0Bh]
seg000:534C		    pop	    cx
seg000:534D
seg000:534D figrec_retn:			    ; CODE XREF: ALLOCATE+Bj
seg000:534D					    ; ALLOCATE+60j ...
seg000:534D		    retn
seg000:534D FIGREC	    endp
seg000:534D
seg000:534E
seg000:534E ; =============== S	U B R O	U T I N	E =======================================
seg000:534E
seg000:534E
seg000:534E ALLOCATE	    proc near		    ; CODE XREF: DISKWRITE+9Ap
seg000:534E					    ; DISKWRITE+D5p ...
seg000:534E		    push    bx
seg000:534F		    xor	    bx,	bx
seg000:5351		    call    UNPACK
seg000:5354		    mov	    ds:FATBYT, di
seg000:5358		    pop	    bx
seg000:5359		    jb	    short figrec_retn
seg000:535B		    push    cx
seg000:535C		    push    bx
seg000:535D		    mov	    dx,	bx
seg000:535F		    mov	    bx,	es:[bp+1Ch]
seg000:5363		    cmp	    bx,	2
seg000:5366		    ja	    short FINDFRE
seg000:5368
seg000:5368 ads1:				    ; CODE XREF: ALLOCATE+86j
seg000:5368		    mov	    word ptr es:[bp+1Ch], 2
seg000:536E		    mov	    bx,	1
seg000:5371
seg000:5371 FINDFRE:				    ; CODE XREF: ALLOCATE+18j
seg000:5371					    ; ALLOCATE+2Fj ...
seg000:5371		    inc	    bx
seg000:5372		    cmp	    bx,	es:[bp+0Dh]
seg000:5376		    ja	    short ads7
seg000:5378		    call    UNPACK
seg000:537B		    jb	    short ads4
seg000:537D		    jnz	    short FINDFRE
seg000:537F		    mov	    es:[bp+1Ch], bx
seg000:5383		    xchg    ax,	dx
seg000:5384		    mov	    dx,	1
seg000:5387		    call    PACK
seg000:538A		    jb	    short ads4
seg000:538C		    cmp	    word ptr es:[bp+1Eh], -1
seg000:5391		    jz	    short NO_ALLOC
seg000:5393		    dec	    word ptr es:[bp+1Eh]
seg000:5397
seg000:5397 NO_ALLOC:				    ; CODE XREF: ALLOCATE+43j
seg000:5397		    xchg    ax,	dx
seg000:5398		    xchg    bx,	dx
seg000:539A		    mov	    ax,	dx
seg000:539C		    call    PACK
seg000:539F		    jb	    short ads4
seg000:53A1		    xchg    ax,	bx
seg000:53A2		    mov	    dx,	bx
seg000:53A4		    loop    FINDFRE
seg000:53A6		    mov	    dx,	0FFFFh
seg000:53A9		    call    PACK
seg000:53AC
seg000:53AC ads4:				    ; CODE XREF: ALLOCATE+2Dj
seg000:53AC					    ; ALLOCATE+3Cj ...
seg000:53AC		    pop	    bx
seg000:53AD		    pop	    cx
seg000:53AE		    jb	    short figrec_retn
seg000:53B0		    call    UNPACK
seg000:53B3		    jb	    short figrec_retn
seg000:53B5		    call    RESTFATBYT
seg000:53B8		    jb	    short figrec_retn
seg000:53BA		    xchg    bx,	di
seg000:53BC		    or	    di,	di
seg000:53BE		    jnz	    short figrec_retn
seg000:53C0		    push    es
seg000:53C1		    les	    di,	ds:THISSFT
seg000:53C5		    mov	    es:[di+0Bh], bx
seg000:53C9		    mov	    es:[di+1Bh], bx
seg000:53CD		    pop	    es
seg000:53CE		    retn
seg000:53CF ; ---------------------------------------------------------------------------
seg000:53CF
seg000:53CF ads7:				    ; CODE XREF: ALLOCATE+28j
seg000:53CF		    cmp	    word ptr es:[bp+1Ch], 2
seg000:53D4		    jnz	    short ads1
seg000:53D6		    pop	    bx
seg000:53D7		    mov	    dx,	0FFFFh
seg000:53DA		    call    RELBLKS
seg000:53DD		    pop	    ax
seg000:53DE		    sub	    ax,	cx
seg000:53E0		    call    RESTFATBYT
seg000:53E3		    stc
seg000:53E4		    retn
seg000:53E4 ALLOCATE	    endp
seg000:53E4
seg000:53E5
seg000:53E5 ; =============== S	U B R O	U T I N	E =======================================
seg000:53E5
seg000:53E5
seg000:53E5 RESTFATBYT	    proc near		    ; CODE XREF: ALLOCATE+67p
seg000:53E5					    ; ALLOCATE+92p
seg000:53E5		    push    bx
seg000:53E6		    push    dx
seg000:53E7		    push    di
seg000:53E8		    xor	    bx,	bx
seg000:53EA		    mov	    dx,	ds:FATBYT
seg000:53EE		    call    PACK
seg000:53F1		    pop	    di
seg000:53F2		    pop	    dx
seg000:53F3		    pop	    bx
seg000:53F4
seg000:53F4 RELEASE_flush:			    ; CODE XREF: RELBLKS+3j
seg000:53F4					    ; RELBLKS+5j ...
seg000:53F4		    retn
seg000:53F4 RESTFATBYT	    endp
seg000:53F4
seg000:53F5
seg000:53F5 ; =============== S	U B R O	U T I N	E =======================================
seg000:53F5
seg000:53F5
seg000:53F5 RELEASE	    proc near		    ; CODE XREF: DOS_DELETE+CDp
seg000:53F5					    ; DOS_CHDIR+C7p ...
seg000:53F5		    xor	    dx,	dx
seg000:53F5 RELEASE	    endp
seg000:53F5
seg000:53F7
seg000:53F7 ; =============== S	U B R O	U T I N	E =======================================
seg000:53F7
seg000:53F7
seg000:53F7 RELBLKS	    proc near		    ; CODE XREF: DISKWRITE+207p
seg000:53F7					    ; ALLOCATE+8Cp
seg000:53F7		    call    UNPACK
seg000:53FA		    jb	    short RELEASE_flush
seg000:53FC		    jz	    short RELEASE_flush
seg000:53FE		    mov	    ax,	di
seg000:5400		    push    dx
seg000:5401		    call    PACK
seg000:5404		    pop	    dx
seg000:5405		    jb	    short RELEASE_flush
seg000:5407		    or	    dx,	dx
seg000:5409		    jnz	    short NO_DEALLOC
seg000:540B		    cmp	    word ptr es:[bp+1Eh], -1
seg000:5410		    jz	    short NO_DEALLOC
seg000:5412		    inc	    word ptr es:[bp+1Eh]
seg000:5416
seg000:5416 NO_DEALLOC:				    ; CODE XREF: RELBLKS+12j
seg000:5416					    ; RELBLKS+19j
seg000:5416		    mov	    bx,	ax
seg000:5418		    dec	    ax
seg000:5419		    jz	    short RELEASE_flush
seg000:541B		    call    IsEOF
seg000:541E		    jb	    short RELEASE
seg000:5420
seg000:5420 RET12:				    ; CODE XREF: GETEOF+3j
seg000:5420					    ; GETEOF+Cj
seg000:5420		    retn
seg000:5420 RELBLKS	    endp
seg000:5420
seg000:5421
seg000:5421 ; =============== S	U B R O	U T I N	E =======================================
seg000:5421
seg000:5421
seg000:5421 GETEOF	    proc near		    ; CODE XREF: BUILDDIR+1Bp
seg000:5421					    ; GETEOF+10j
seg000:5421		    call    UNPACK
seg000:5424		    jb	    short RET12
seg000:5426		    push    bx
seg000:5427		    mov	    bx,	di
seg000:5429		    call    IsEOF
seg000:542C		    pop	    bx
seg000:542D		    jnb	    short RET12
seg000:542F		    mov	    bx,	di
seg000:5431		    jmp	    short GETEOF
seg000:5431 GETEOF	    endp
seg000:5431
seg000:5433
seg000:5433 ; =============== S	U B R O	U T I N	E =======================================
seg000:5433
seg000:5433
seg000:5433 MAKEFCB	    proc near		    ; CODE XREF: seg000:_$PARSE_FILE_DESCRIPTORp
seg000:5433		    mov	    ss:SpaceFlag, 0
seg000:5439		    xor	    dl,	dl
seg000:543B		    test    al,	2
seg000:543D		    jnz	    short DEFDRV
seg000:543F		    mov	    byte ptr es:[di], 0
seg000:5443
seg000:5443 DEFDRV:				    ; CODE XREF: MAKEFCB+Aj
seg000:5443		    inc	    di
seg000:5444		    mov	    cx,	8
seg000:5447		    test    al,	4
seg000:5449		    xchg    ax,	bx
seg000:544A		    mov	    al,	' '
seg000:544C		    jz	    short FILLB
seg000:544E		    add	    di,	cx
seg000:5450		    xor	    cx,	cx
seg000:5452
seg000:5452 FILLB:				    ; CODE XREF: MAKEFCB+19j
seg000:5452		    rep	stosb
seg000:5454		    mov	    cl,	3
seg000:5456		    test    bl,	8
seg000:5459		    jz	    short FILLB2
seg000:545B		    add	    di,	cx
seg000:545D		    xor	    cx,	cx
seg000:545F
seg000:545F FILLB2:				    ; CODE XREF: MAKEFCB+26j
seg000:545F		    rep	stosb
seg000:5461		    xchg    ax,	cx
seg000:5462		    stosw
seg000:5463		    stosw
seg000:5464		    sub	    di,	16
seg000:5467		    test    bl,	1
seg000:546A		    jz	    short SKPSPC
seg000:546C		    call    SCANB
seg000:546F		    call    DELIM
seg000:5472		    jnz	    short NOSCAN
seg000:5474		    inc	    si
seg000:5475
seg000:5475 SKPSPC:				    ; CODE XREF: MAKEFCB+37j
seg000:5475		    call    SCANB
seg000:5478
seg000:5478 NOSCAN:				    ; CODE XREF: MAKEFCB+3Fj
seg000:5478		    call    GETLET
seg000:547B		    jbe	    short NODRV
seg000:547D		    cmp	    byte ptr [si], ':'
seg000:5480		    jnz	    short NODRV
seg000:5482		    inc	    si
seg000:5483		    sub	    al,	40h
seg000:5485		    jbe	    short BADDRV
seg000:5487		    push    ax
seg000:5488		    call    GETVISDRV
seg000:548B		    pop	    ax
seg000:548C		    jnb	    short HavDrv
seg000:548E
seg000:548E BADDRV:				    ; CODE XREF: MAKEFCB+52j
seg000:548E		    mov	    dl,	-1
seg000:5490
seg000:5490 HavDrv:				    ; CODE XREF: MAKEFCB+59j
seg000:5490		    stosb
seg000:5491		    inc	    si
seg000:5492		    dec	    di
seg000:5493
seg000:5493 NODRV:				    ; CODE XREF: MAKEFCB+48j
seg000:5493					    ; MAKEFCB+4Dj
seg000:5493		    dec	    si
seg000:5494		    inc	    di
seg000:5494 MAKEFCB	    endp
seg000:5494
seg000:5495
seg000:5495 ; =============== S	U B R O	U T I N	E =======================================
seg000:5495
seg000:5495
seg000:5495 NORMSCAN	    proc near		    ; CODE XREF: NameTrans+1Bp
seg000:5495		    mov	    cx,	8
seg000:5498		    call    GETWORD
seg000:549B		    cmp	    byte ptr [si], '.'
seg000:549E		    jnz	    short NODOT
seg000:54A0		    inc	    si
seg000:54A1		    mov	    cx,	3
seg000:54A4		    call    MUSTGETWORD
seg000:54A7
seg000:54A7 NODOT:				    ; CODE XREF: NORMSCAN+9j
seg000:54A7		    mov	    al,	dl
seg000:54A9		    retn
seg000:54A9 NORMSCAN	    endp
seg000:54A9
seg000:54AA ; ---------------------------------------------------------------------------
seg000:54AA ; START OF FUNCTION	CHUNK FOR GETWORD
seg000:54AA
seg000:54AA NONAM:				    ; CODE XREF: GETWORD+3j
seg000:54AA		    add	    di,	cx
seg000:54AC		    dec	    si
seg000:54AD		    retn
seg000:54AD ; END OF FUNCTION CHUNK FOR	GETWORD
seg000:54AE
seg000:54AE ; =============== S	U B R O	U T I N	E =======================================
seg000:54AE
seg000:54AE
seg000:54AE GETWORD	    proc near		    ; CODE XREF: NORMSCAN+3p
seg000:54AE
seg000:54AE ; FUNCTION CHUNK AT	seg000:54AA SIZE 00000004 BYTES
seg000:54AE
seg000:54AE		    call    GETLET
seg000:54B1		    jbe	    short NONAM
seg000:54B3		    dec	    si
seg000:54B3 GETWORD	    endp
seg000:54B3
seg000:54B4
seg000:54B4 ; =============== S	U B R O	U T I N	E =======================================
seg000:54B4
seg000:54B4
seg000:54B4 MUSTGETWORD	    proc near		    ; CODE XREF: NORMSCAN+Fp
seg000:54B4					    ; MUSTGETWORD:MustCheckCXj	...
seg000:54B4		    call    GETLET
seg000:54B7		    jb	    short FILLNAM
seg000:54B9		    jnz	    short MustCheckCX
seg000:54BB		    test    ss:SpaceFlag, 0FFh
seg000:54C1		    jz	    short FILLNAM
seg000:54C3		    cmp	    al,	' '
seg000:54C5		    jnz	    short FILLNAM
seg000:54C7
seg000:54C7 MustCheckCX:			    ; CODE XREF: MUSTGETWORD+5j
seg000:54C7		    jcxz    short MUSTGETWORD
seg000:54C9		    dec	    cx
seg000:54CA		    cmp	    al,	'*'
seg000:54CC		    jnz	    short NOSTAR
seg000:54CE		    mov	    al,	'?'
seg000:54D0		    rep	stosb
seg000:54D2
seg000:54D2 NOSTAR:				    ; CODE XREF: MUSTGETWORD+18j
seg000:54D2		    stosb
seg000:54D3		    cmp	    al,	'?'
seg000:54D5		    jnz	    short MUSTGETWORD
seg000:54D7		    or	    dl,	1
seg000:54DA		    jmp	    short MUSTGETWORD
seg000:54DC ; ---------------------------------------------------------------------------
seg000:54DC
seg000:54DC FILLNAM:				    ; CODE XREF: MUSTGETWORD+3j
seg000:54DC					    ; MUSTGETWORD+Dj ...
seg000:54DC		    mov	    al,	' '
seg000:54DE		    rep	stosb
seg000:54E0		    dec	    si
seg000:54E1		    retn
seg000:54E1 MUSTGETWORD	    endp
seg000:54E1
seg000:54E2
seg000:54E2 ; =============== S	U B R O	U T I N	E =======================================
seg000:54E2
seg000:54E2
seg000:54E2 SCANB	    proc near		    ; CODE XREF: MAKEFCB+39p
seg000:54E2					    ; MAKEFCB:SKPSPCp ...
seg000:54E2		    lodsb
seg000:54E3		    call    SPCHK
seg000:54E6		    jz	    short SCANB
seg000:54E8		    dec	    si
seg000:54E8 SCANB	    endp
seg000:54E8
seg000:54E9
seg000:54E9 scanb_retn:				    ; CODE XREF: NameTrans+24j
seg000:54E9		    retn
seg000:54EA
seg000:54EA ; =============== S	U B R O	U T I N	E =======================================
seg000:54EA
seg000:54EA
seg000:54EA NameTrans	    proc near		    ; CODE XREF: CheckThisDevice+24p
seg000:54EA					    ; CopyComponent+2Dp
seg000:54EA		    mov	    ss:SpaceFlag, 1
seg000:54F0		    push    ss
seg000:54F1		    pop	    es
seg000:54F2		    mov	    di,	(offset	NAME1_1+1)
seg000:54F5		    push    di
seg000:54F6		    mov	    ax,	'  '
seg000:54F9		    mov	    cx,	5
seg000:54FC		    stosb
seg000:54FD		    rep	stosw
seg000:54FF		    xor	    al,	al
seg000:5501		    mov	    dl,	al
seg000:5503		    stosb
seg000:5504		    pop	    di
seg000:5505		    call    NORMSCAN
seg000:5508		    cmp	    byte ptr ss:NAME1_1+1, 0E5h
seg000:550E		    jnz	    short scanb_retn
seg000:5510		    mov	    byte ptr ss:NAME1_1+1, 5
seg000:5516		    retn
seg000:5516 NameTrans	    endp
seg000:5516
seg000:5517
seg000:5517 ; =============== S	U B R O	U T I N	E =======================================
seg000:5517
seg000:5517
seg000:5517 GETLET	    proc near		    ; CODE XREF: CHKDEV:TESTLOOPp
seg000:5517					    ; MAKEFCB:NOSCANp ...
seg000:5517		    lodsb
seg000:5517 GETLET	    endp
seg000:5517
seg000:5518
seg000:5518 ; =============== S	U B R O	U T I N	E =======================================
seg000:5518
seg000:5518
seg000:5518 _UCase	    proc near		    ; CODE XREF: Ucasep
seg000:5518		    push    bx
seg000:5519		    cmp	    al,	'a'
seg000:551B		    jb	    short gl_1
seg000:551D		    cmp	    al,	'z'
seg000:551F		    ja	    short gl_1
seg000:5521		    sub	    al,	' '
seg000:5523
seg000:5523 gl_1:				    ; CODE XREF: _UCase+3j
seg000:5523					    ; _UCase+7j
seg000:5523		    cmp	    al,	80h
seg000:5525		    jb	    short gl_2
seg000:5527		    sub	    al,	80h
seg000:5529		    mov	    bx,	offset FILE_UCASE_TAB_2
seg000:552C		    xlat    byte ptr cs:[bx]
seg000:552E
seg000:552E gl_2:				    ; CODE XREF: _UCase+Dj
seg000:552E		    push    ax
seg000:552F		    mov	    bx,	offset CharType
seg000:5532		    xlat    byte ptr cs:[bx]
seg000:5534		    test    al,	1
seg000:5536		    pop	    ax
seg000:5537		    pop	    bx
seg000:5538		    retn
seg000:5538 _UCase	    endp
seg000:5538
seg000:5539
seg000:5539 ; =============== S	U B R O	U T I N	E =======================================
seg000:5539
seg000:5539
seg000:5539 DELIM	    proc near		    ; CODE XREF: MAKEFCB+3Cp
seg000:5539		    push    ax
seg000:553A		    push    bx
seg000:553B		    mov	    bx,	offset CharType
seg000:553E		    xlat    byte ptr cs:[bx]
seg000:5540		    test    al,	2
seg000:5542		    pop	    bx
seg000:5543		    pop	    ax
seg000:5544		    retn
seg000:5544 DELIM	    endp
seg000:5544
seg000:5545
seg000:5545 ; =============== S	U B R O	U T I N	E =======================================
seg000:5545
seg000:5545
seg000:5545 SPCHK	    proc near		    ; CODE XREF: SCANB+1p
seg000:5545		    push    ax
seg000:5546		    push    bx
seg000:5547		    mov	    bx,	offset CharType
seg000:554A		    xlat    byte ptr cs:[bx]
seg000:554C		    test    al,	4
seg000:554E		    pop	    bx
seg000:554F		    pop	    ax
seg000:5550		    retn
seg000:5550 SPCHK	    endp
seg000:5550
seg000:5551
seg000:5551 ; =============== S	U B R O	U T I N	E =======================================
seg000:5551
seg000:5551
seg000:5551 PATHCHRCMP	    proc near		    ; CODE XREF: StrCmp+7p
seg000:5551					    ; StrCmp+13p ...
seg000:5551		    cmp	    al,	'/'
seg000:5553		    jbe	    short PathRet
seg000:5555		    cmp	    al,	'\'
seg000:5557		    retn
seg000:5558 ; ---------------------------------------------------------------------------
seg000:5558
seg000:5558 GotFor:				    ; CODE XREF: PATHCHRCMP:PathRetj
seg000:5558		    mov	    al,	'\'
seg000:555A		    retn
seg000:555B ; ---------------------------------------------------------------------------
seg000:555B
seg000:555B PathRet:				    ; CODE XREF: PATHCHRCMP+2j
seg000:555B		    jz	    short GotFor
seg000:555D		    retn
seg000:555D PATHCHRCMP	    endp
seg000:555D
seg000:555E
seg000:555E ; =============== S	U B R O	U T I N	E =======================================
seg000:555E
seg000:555E
seg000:555E DSKSTATCHK	    proc near		    ; CODE XREF: STATCHK-40CAp
seg000:555E					    ; DOS_READ:DVRDLPp	...
seg000:555E		    cmp	    ss:INDOS, 1
seg000:5564		    jz	    short dskstatuschk1
seg000:5566		    retn
seg000:5567 ; ---------------------------------------------------------------------------
seg000:5567
seg000:5567 dskstatuschk1:			    ; CODE XREF: DSKSTATCHK+6j
seg000:5567		    push    cx
seg000:5568		    push    es
seg000:5569		    push    bx
seg000:556A		    push    ds
seg000:556B		    push    si
seg000:556C		    push    cs
seg000:556D		    pop	    es
seg000:556E		    push    ss
seg000:556F		    pop	    ds
seg000:5570		    mov	    ds:DSKSTCOM, 5
seg000:5575		    mov	    byte ptr ds:DSKSTCALL, 14
seg000:557A		    mov	    word ptr ds:DSKSTST, 0
seg000:5580		    mov	    bx,	offset DSKSTCALL
seg000:5583		    lds	    si,	ds:BCON
seg000:5587		    call    DEVIOCALL2
seg000:558A		    test    word ptr ss:DSKSTST, 200h
seg000:5591		    jz	    short GotCh
seg000:5593		    xor	    al,	al
seg000:5595
seg000:5595 RET36:				    ; CODE XREF: DSKSTATCHK+43j
seg000:5595		    pop	    si
seg000:5596		    pop	    ds
seg000:5597		    pop	    bx
seg000:5598		    pop	    es
seg000:5599		    pop	    cx
seg000:559A		    retn
seg000:559B ; ---------------------------------------------------------------------------
seg000:559B
seg000:559B GotCh:				    ; CODE XREF: DSKSTATCHK+33j
seg000:559B		    mov	    al,	ss:DSKCHRET
seg000:559F		    cmp	    al,	3	    ; "C"-"@"
seg000:55A1		    jnz	    short RET36
seg000:55A3		    mov	    ss:DSKSTCOM, 4
seg000:55A9		    mov	    byte ptr ss:DSKSTCALL, 16h
seg000:55AF		    mov	    ss:DSKCHRET, cl
seg000:55B4		    mov	    word ptr ss:DSKSTST, 0
seg000:55BB		    mov	    word ptr ss:DSKSTCNT, 1
seg000:55C2		    call    DEVIOCALL2
seg000:55C5		    pop	    si
seg000:55C6		    pop	    ds
seg000:55C7		    pop	    bx
seg000:55C8		    pop	    es
seg000:55C9		    pop	    cx
seg000:55CA		    jmp	    CNTCHAND
seg000:55CA DSKSTATCHK	    endp
seg000:55CA
seg000:55CD ; ---------------------------------------------------------------------------
seg000:55CD ; START OF FUNCTION	CHUNK FOR STATCHK
seg000:55CD
seg000:55CD NOSTOP:				    ; CODE XREF: STATCHK+15j
seg000:55CD		    cmp	    al,	16	    ; "P"-"@"
seg000:55CF		    jz	    short INCHKJ
seg000:55D1		    cmp	    al,	3	    ; "C"-"@"
seg000:55D3		    jz	    short INCHKJ
seg000:55D5		    retn
seg000:55D6 ; ---------------------------------------------------------------------------
seg000:55D6
seg000:55D6 INCHKJ:				    ; CODE XREF: STATCHK-29j
seg000:55D6					    ; STATCHK-25j
seg000:55D6		    jmp	    INCHK
seg000:55D6 ; END OF FUNCTION CHUNK FOR	STATCHK
seg000:55D9
seg000:55D9 ; =============== S	U B R O	U T I N	E =======================================
seg000:55D9
seg000:55D9
seg000:55D9 SPOOLINT	    proc near		    ; CODE XREF: seg000:21DEp
seg000:55D9					    ; seg000:rci0p ...
seg000:55D9		    pushf
seg000:55DA		    test    ss:IDLEINT,	0FFh
seg000:55E0		    jz	    short POPFRET
seg000:55E2		    test    ss:ERRORMODE, 0FFh
seg000:55E8		    jnz	    short POPFRET
seg000:55EA		    push    word ptr ss:IDLEINT
seg000:55EF		    int	    28h		    ; DOS 2+ internal -	KEYBOARD BUSY LOOP
seg000:55F1		    pop	    word ptr ss:IDLEINT
seg000:55F6
seg000:55F6 POPFRET:				    ; CODE XREF: SPOOLINT+7j
seg000:55F6					    ; SPOOLINT+Fj
seg000:55F6		    popf
seg000:55F7
seg000:55F7 _RET18:				    ; CODE XREF: STATCHK+Aj
seg000:55F7					    ; STATCHK+2Bj
seg000:55F7		    retn
seg000:55F7 SPOOLINT	    endp
seg000:55F7
seg000:55F8
seg000:55F8 ; =============== S	U B R O	U T I N	E =======================================
seg000:55F8
seg000:55F8
seg000:55F8 STATCHK	    proc far		    ; CODE XREF: seg000:INTESTp
seg000:55F8					    ; OUTT+1Dp	...
seg000:55F8
seg000:55F8 ; FUNCTION CHUNK AT	seg000:1443 SIZE 00000003 BYTES
seg000:55F8 ; FUNCTION CHUNK AT	seg000:1460 SIZE 0000010D BYTES
seg000:55F8 ; FUNCTION CHUNK AT	seg000:55CD SIZE 0000000C BYTES
seg000:55F8
seg000:55F8		    call    DSKSTATCHK
seg000:55FB		    push    bx
seg000:55FC		    xor	    bx,	bx
seg000:55FE		    call    GET_IO_SFT
seg000:5601		    pop	    bx
seg000:5602		    jb	    short _RET18
seg000:5604		    mov	    ah,	1
seg000:5606		    call    IOFUNC
seg000:5609		    jz	    short SPOOLINT
seg000:560B		    cmp	    al,	19	    ; S'-'@'
seg000:560D		    jnz	    short NOSTOP
seg000:560F		    xor	    ah,	ah
seg000:5611		    call    IOFUNC
seg000:5614		    jmp	    short PAUSOSTRT
seg000:5616 ; ---------------------------------------------------------------------------
seg000:5616
seg000:5616 PRINTON_OFF:			    ; CODE XREF: STATCHK+88j
seg000:5616		    not	    ss:PFLAG
seg000:561B		    push    bx
seg000:561C		    mov	    bx,	4
seg000:561F		    call    GET_IO_SFT
seg000:5622		    pop	    bx
seg000:5623		    jb	    short _RET18
seg000:5625		    push    es
seg000:5626		    push    di
seg000:5627		    push    ds
seg000:5628		    pop	    es
seg000:5629		    mov	    di,	si
seg000:562B		    test    word ptr es:[di+5],	800h
seg000:5631		    jz	    short NORM_PR
seg000:5633		    push    ax
seg000:5634		    mov	    ax,	1126h
seg000:5637		    int	    2Fh		    ; Multiplex	- NETWORK REDIRECTOR - ???
seg000:5637					    ; Return: CF set on	error, AX = error code
seg000:5637					    ; STACK unchanged
seg000:5639		    pop	    ax
seg000:563A		    jnb	    short NORM_PR
seg000:563C		    mov	    ss:PFLAG, 0
seg000:5642		    push    ax
seg000:5643		    mov	    ax,	1124h
seg000:5646		    int	    2Fh		    ; Multiplex	- NETWORK REDIRECTOR - ???
seg000:5646					    ; ES:DI -> SFT, SS = DOS CS
seg000:5648		    pop	    ax
seg000:5649		    jmp	    short RETP6
seg000:564B ; ---------------------------------------------------------------------------
seg000:564B
seg000:564B NORM_PR:				    ; CODE XREF: STATCHK+39j
seg000:564B					    ; STATCHK+42j
seg000:564B		    cmp	    ss:PFLAG, 0
seg000:5651		    jnz	    short PRNOPN
seg000:5653		    call    DEV_CLOSE_SFT
seg000:5656		    jmp	    short RETP6
seg000:5658 ; ---------------------------------------------------------------------------
seg000:5658
seg000:5658 PRNOPN:				    ; CODE XREF: STATCHK+59j
seg000:5658		    call    DEV_OPEN_SFT
seg000:565B
seg000:565B RETP6:				    ; CODE XREF: STATCHK+51j
seg000:565B					    ; STATCHK+5Ej
seg000:565B		    pop	    di
seg000:565C		    pop	    es
seg000:565D
seg000:565D STATCHK_RETN:			    ; CODE XREF: STATCHK+77j
seg000:565D					    ; STATCHK+92j
seg000:565D		    retn
seg000:565E ; ---------------------------------------------------------------------------
seg000:565E
seg000:565E PAUSOLP:				    ; CODE XREF: STATCHK+6Ej
seg000:565E		    call    SPOOLINT
seg000:5661
seg000:5661 PAUSOSTRT:				    ; CODE XREF: STATCHK+1Cj
seg000:5661		    mov	    ah,	1
seg000:5663		    call    IOFUNC
seg000:5666		    jz	    short PAUSOLP
seg000:5668
seg000:5668 INCHK:				    ; CODE XREF: STATCHK:INCHKJj
seg000:5668		    push    bx
seg000:5669		    xor	    bx,	bx
seg000:566B		    call    GET_IO_SFT
seg000:566E		    pop	    bx
seg000:566F		    jb	    short STATCHK_RETN
seg000:5671		    xor	    ah,	ah
seg000:5673		    call    IOFUNC
seg000:5676		    cmp	    al,	16	    ; 'P'-'@'
seg000:5678		    jnz	    short NOPRINT
seg000:567A		    cmp	    ss:SCAN_FLAG, 0
seg000:5680		    jz	    short PRINTON_OFF
seg000:5682		    mov	    ss:SCAN_FLAG, 0
seg000:5688
seg000:5688 NOPRINT:				    ; CODE XREF: STATCHK+80j
seg000:5688		    cmp	    al,	3	    ; "C"-"@"
seg000:568A		    jnz	    short STATCHK_RETN
seg000:568C
seg000:568C CNTCHAND:				    ; CODE XREF: DSKSTATCHK+6Cj
seg000:568C		    mov	    al,	3	    ; ;	Display	"^C"
seg000:568E		    call    BUFOUT
seg000:5691		    call    CRLF
seg000:5694		    push    ss
seg000:5695		    pop	    ds
seg000:5696		    cmp	    ds:CONSWAP,	0
seg000:569B		    jz	    short NOSWAP
seg000:569D		    call    SWAPBACK
seg000:56A0
seg000:56A0 NOSWAP:				    ; CODE XREF: STATCHK+A3j
seg000:56A0		    cli
seg000:56A1		    mov	    ss,	ds:User_SS
seg000:56A5		    mov	    sp,	ds:User_SP
seg000:56A9		    call    restore_world
seg000:56AC		    mov	    cs:INDOS, 0
seg000:56B2		    mov	    cs:ERRORMODE, 0
seg000:56B8		    mov	    cs:ConC_Spsave, sp
seg000:56BD		    clc
seg000:56BE		    int	    23h		    ; DOS - CONTROL "C"	EXIT ADDRESS
seg000:56BE					    ; Return: return via RETF 2	with CF	set
seg000:56BE					    ; DOS will abort program with errorlevel 0
seg000:56BE					    ; else
seg000:56BE					    ; interrupted DOS call continues
seg000:56C0		    cli
seg000:56C1		    mov	    word ptr cs:USER_IN_AX, ax
seg000:56C5		    pushf
seg000:56C6		    pop	    ax
seg000:56C7		    cmp	    sp,	cs:ConC_Spsave
seg000:56CC		    jnz	    short ctrlc_try_new
seg000:56CE
seg000:56CE ctrlc_repeat:			    ; CODE XREF: STATCHK+E3j
seg000:56CE		    mov	    ax,	word ptr cs:USER_IN_AX
seg000:56D2
seg000:56D2 COMMANDJ:				    ; CODE XREF: STATCHK+EEj
seg000:56D2		    jmp	    COMMAND
seg000:56D5 ; ---------------------------------------------------------------------------
seg000:56D5
seg000:56D5 ctrlc_try_new:			    ; CODE XREF: STATCHK+D4j
seg000:56D5		    add	    sp,	2
seg000:56D8		    test    ax,	1
seg000:56DB		    jz	    short ctrlc_repeat
seg000:56DD
seg000:56DD ctrlc_abort:			    ; CODE XREF: seg000:56FAj
seg000:56DD		    mov	    ax,	4C00h
seg000:56E0		    mov	    cs:DidCTRLC, 0FFh
seg000:56E6		    jmp	    short COMMANDJ
seg000:56E6 STATCHK	    endp
seg000:56E6
seg000:56E8 ; ---------------------------------------------------------------------------
seg000:56E8
seg000:56E8 DIVOV:				    ; DATA XREF: DOSINIT+16Bo
seg000:56E8		    mov	    si,	offset DIVMES ;	"\r\nDivide overflow\r\n"
seg000:56EB		    mov	    bx,	cs:DivMesLen
seg000:56F0		    mov	    ax,	cs
seg000:56F2		    mov	    ss,	ax
seg000:56F4		    mov	    sp,	offset AUXSTACK
seg000:56F7		    call    RealDivOv
seg000:56FA		    jmp	    short ctrlc_abort
seg000:56FC
seg000:56FC ; =============== S	U B R O	U T I N	E =======================================
seg000:56FC
seg000:56FC
seg000:56FC RealDivOv	    proc near		    ; CODE XREF: seg000:56F7p
seg000:56FC		    push    ss
seg000:56FD		    pop	    es
seg000:56FE		    push    ss
seg000:56FF		    pop	    ds
seg000:5700		    mov	    ds:DSKSTCOM, 8
seg000:5705		    mov	    byte ptr ds:DSKSTCALL, 16h
seg000:570A		    mov	    word ptr ds:DSKSTST, 0
seg000:5710		    mov	    word ptr ds:DSKSTCNT, bx
seg000:5714		    mov	    bx,	offset DSKSTCALL
seg000:5717		    mov	    word ptr ds:DEVIOBUF_PTR, si
seg000:571B		    lds	    si,	ds:BCON
seg000:571F		    call    DEVIOCALL2
seg000:5722		    mov	    word ptr cs:DEVIOBUF_PTR, offset DEVIOBUF
seg000:5729		    mov	    word ptr cs:DSKSTCNT, 1
seg000:5730		    retn
seg000:5730 RealDivOv	    endp
seg000:5730
seg000:5731
seg000:5731 ; =============== S	U B R O	U T I N	E =======================================
seg000:5731
seg000:5731
seg000:5731 CHARHARD	    proc near		    ; CODE XREF: DOS_READ+86p
seg000:5731					    ; DOS_READ+D7p ...
seg000:5731		    or	    ah,	38h
seg000:5734		    mov	    ss:ALLOWED,	ah
seg000:5739		    mov	    word ptr ss:EXITHOLD+2, es
seg000:573E		    mov	    word ptr ss:EXITHOLD, bp
seg000:5743		    push    si
seg000:5744		    and	    di,	0FFh
seg000:5748		    mov	    bp,	ds
seg000:574A		    call    near ptr FATALC
seg000:574D		    pop	    si
seg000:574E		    retn
seg000:574E CHARHARD	    endp
seg000:574E
seg000:574F
seg000:574F ; =============== S	U B R O	U T I N	E =======================================
seg000:574F
seg000:574F
seg000:574F HARDERR	    proc near		    ; CODE XREF: FCBHardErr+17p
seg000:574F					    ; HARDERRRW:DO_ERRp ...
seg000:574F		    xchg    ax,	di
seg000:5750		    and	    di,	0FFh
seg000:5754		    cmp	    di,	0
seg000:5757		    jnz	    short NOSETWRPERR
seg000:5759		    push    ax
seg000:575A		    mov	    al,	es:[bp+0]
seg000:575E		    mov	    ss:WPERR, al
seg000:5762		    pop	    ax
seg000:5763
seg000:5763 NOSETWRPERR:			    ; CODE XREF: HARDERR+8j
seg000:5763		    sub	    ax,	cx
seg000:5765		    add	    dx,	ax
seg000:5767		    push    dx
seg000:5768		    mul	    word ptr es:[bp+2]
seg000:576C		    pop	    dx
seg000:576D		    add	    bx,	ax
seg000:576F		    xor	    ah,	ah
seg000:5771		    cmp	    dx,	es:[bp+6]
seg000:5775		    jb	    short ERRINT
seg000:5777		    inc	    ah
seg000:5779		    cmp	    dx,	es:[bp+10h]
seg000:577D		    jnb	    short TESTDIR
seg000:577F		    mov	    word ptr es:[bp+1Eh], -1
seg000:5785		    jmp	    short ERRINT
seg000:5787 ; ---------------------------------------------------------------------------
seg000:5787
seg000:5787 TESTDIR:				    ; CODE XREF: HARDERR+2Ej
seg000:5787		    inc	    ah
seg000:5789		    cmp	    dx,	es:[bp+0Bh]
seg000:578D		    jb	    short ERRINT
seg000:578F		    inc	    ah
seg000:5791
seg000:5791 ERRINT:				    ; CODE XREF: HARDERR+26j
seg000:5791					    ; HARDERR+36j ...
seg000:5791		    shl	    ah,	1
seg000:5793		    or	    ah,	byte ptr ss:SECCLUSPOS+2
seg000:5798		    or	    ah,	ss:ALLOWED
seg000:5798 HARDERR	    endp
seg000:5798
seg000:579D
seg000:579D ; =============== S	U B R O	U T I N	E =======================================
seg000:579D
seg000:579D
seg000:579D FATAL	    proc near		    ; CODE XREF: UNPACK+3Ep
seg000:579D		    mov	    al,	es:[bp+0]
seg000:579D FATAL	    endp
seg000:579D
seg000:57A1
seg000:57A1 ; =============== S	U B R O	U T I N	E =======================================
seg000:57A1
seg000:57A1
seg000:57A1 FATAL1	    proc near		    ; CODE XREF: FAT_GOT_DPB-Dp
seg000:57A1		    mov	    word ptr ss:EXITHOLD+2, es
seg000:57A6		    mov	    word ptr ss:EXITHOLD, bp
seg000:57AB		    les	    si,	es:[bp+12h]
seg000:57AF		    mov	    bp,	es
seg000:57AF FATAL1	    endp
seg000:57AF
seg000:57B1
seg000:57B1 ; =============== S	U B R O	U T I N	E =======================================
seg000:57B1
seg000:57B1
seg000:57B1 FATALC	    proc far		    ; CODE XREF: CHARHARD+19p
seg000:57B1
seg000:57B1 ; FUNCTION CHUNK AT	seg000:588A SIZE 0000008F BYTES
seg000:57B1 ; FUNCTION CHUNK AT	seg000:638C SIZE 0000000D BYTES
seg000:57B1 ; FUNCTION CHUNK AT	seg000:63A1 SIZE 00000022 BYTES
seg000:57B1
seg000:57B1		    call    SET_I24_EXTENDED_ERROR
seg000:57B4		    cmp	    di,	0Ch
seg000:57B7		    jbe	    short NET_I24_ENTRY
seg000:57B9		    mov	    di,	0Ch
seg000:57BC
seg000:57BC NET_I24_ENTRY:			    ; CODE XREF: FATALC+6j
seg000:57BC					    ; DATA XREF: seg000:0EE3o
seg000:57BC		    cmp	    ss:ERRORMODE, 0
seg000:57C2		    jz	    short NoSetFail
seg000:57C4		    mov	    al,	3
seg000:57C6		    jmp	    short FailRet
seg000:57C8 ; ---------------------------------------------------------------------------
seg000:57C8		    nop
seg000:57C9
seg000:57C9 NoSetFail:				    ; CODE XREF: FATALC+11j
seg000:57C9		    mov	    ss:CONTSTK,	sp
seg000:57CE		    push    ss
seg000:57CF		    pop	    es
seg000:57D0		    cmp	    ss:SFN, -1
seg000:57D6		    jz	    short NoFree
seg000:57D8		    push    ds
seg000:57D9		    push    si
seg000:57DA		    lds	    si,	ss:PJFN
seg000:57DF		    mov	    byte ptr [si], 0FFh
seg000:57E2		    pop	    si
seg000:57E3		    pop	    ds
seg000:57E4
seg000:57E4 NoFree:				    ; CODE XREF: FATALC+25j
seg000:57E4		    cli
seg000:57E5		    inc	    ss:ERRORMODE
seg000:57EA		    dec	    ss:INDOS
seg000:57EF		    mov	    ss,	ss:User_SS
seg000:57F4		    mov	    sp,	es:User_SP
seg000:57F9		    int	    24h		    ; DOS - FATAL ERROR	HANDLER	ADDRESS
seg000:57F9					    ; Automatically called upon	detection of unrecoverable I/O error.
seg000:57FB		    mov	    es:User_SP,	sp
seg000:5800		    mov	    es:User_SS,	ss
seg000:5805		    mov	    bp,	es
seg000:5807		    mov	    ss,	bp
seg000:5809		    mov	    sp,	ss:CONTSTK
seg000:580E		    inc	    ss:INDOS
seg000:5813		    mov	    ss:ERRORMODE, 0
seg000:5819		    sti
seg000:581A
seg000:581A FailRet:				    ; CODE XREF: FATALC+15j
seg000:581A		    les	    bp,	ss:EXITHOLD
seg000:581F		    cmp	    al,	1
seg000:5821		    jb	    short CheckIgnore
seg000:5823		    jz	    short CheckRetry
seg000:5825		    cmp	    al,	3
seg000:5827		    jnz	    short DoAbort
seg000:5829		    test    ss:ALLOWED,	8
seg000:582F		    jz	    short DoAbort
seg000:5831
seg000:5831 DoFail:				    ; CODE XREF: FATALC+AEj
seg000:5831					    ; FATALC+B8j ...
seg000:5831		    mov	    al,	3
seg000:5833		    inc	    ss:FAILERR
seg000:5838
seg000:5838 CleanUp:				    ; CODE XREF: FATALC+B0j
seg000:5838					    ; FATALC+BAj
seg000:5838		    mov	    ss:WPERR, -1
seg000:583E		    cmp	    ss:SFN, -1
seg000:5844		    jnz	    short CleanUp2
seg000:5846		    retn
seg000:5847 ; ---------------------------------------------------------------------------
seg000:5847
seg000:5847 CleanUp2:				    ; CODE XREF: FATALC+93j
seg000:5847		    push    ds
seg000:5848		    push    si
seg000:5849		    push    ax
seg000:584A		    mov	    ax,	ss:SFN
seg000:584E		    lds	    si,	ss:PJFN
seg000:5853		    mov	    [si], al
seg000:5855		    pop	    ax
seg000:5856		    pop	    si
seg000:5857		    pop	    ds
seg000:5858		    retn
seg000:5859 ; ---------------------------------------------------------------------------
seg000:5859
seg000:5859 CheckIgnore:			    ; CODE XREF: FATALC+70j
seg000:5859		    test    ss:ALLOWED,	20h
seg000:585F		    jz	    short DoFail
seg000:5861		    jmp	    short CleanUp
seg000:5863 ; ---------------------------------------------------------------------------
seg000:5863
seg000:5863 CheckRetry:				    ; CODE XREF: FATALC+72j
seg000:5863		    test    ss:ALLOWED,	10h
seg000:5869		    jz	    short DoFail
seg000:586B		    jmp	    short CleanUp
seg000:586D ; ---------------------------------------------------------------------------
seg000:586D
seg000:586D DoAbort:				    ; CODE XREF: FATALC+76j
seg000:586D					    ; FATALC+7Ej
seg000:586D		    push    ss
seg000:586E		    pop	    ds
seg000:586F		    cmp	    ds:CONSWAP,	0
seg000:5874		    jz	    short NOSWAP2
seg000:5876		    call    SWAPBACK
seg000:5879
seg000:5879 NOSWAP2:				    ; CODE XREF: FATALC+C3j
seg000:5879		    test    ds:fAborting, 0FFh
seg000:587E		    jnz	    short DoFail
seg000:5880		    mov	    byte ptr ds:cMeta+2, 2
seg000:5885		    xor	    al,	al
seg000:5887		    jmp	    exit_inner
seg000:5887 FATALC	    endp
seg000:5887
seg000:588A ; ---------------------------------------------------------------------------
seg000:588A ; START OF FUNCTION	CHUNK FOR FATALC
seg000:588A
seg000:588A reset_environment:			    ; CODE XREF: FATALC+C0Fj
seg000:588A		    push    ds
seg000:588B		    mov	    ah,	82h
seg000:588D		    int	    2Ah		    ; Microsoft	Networks - END DOS CRITICAL SECTIONS 0 THROUGH 7
seg000:588F		    mov	    ss:fAborting, -1
seg000:5895		    mov	    ax,	1122h
seg000:5898		    int	    2Fh		    ; Multiplex	- NETWORK REDIRECTOR - PROCESS TERMINATION HOOK
seg000:5898					    ; SS = DOS CS
seg000:589A		    mov	    al,	22h
seg000:589C		    call    _$GET_INTERRUPT_VECTOR
seg000:589F		    pop	    cx
seg000:58A0		    push    es
seg000:58A1		    push    bx
seg000:58A2		    mov	    bx,	ss:CurrentPDB
seg000:58A7		    mov	    ds,	bx
seg000:58A9		    mov	    ax,	ds:OEM_HANDLER_2
seg000:58AC		    cmp	    ax,	bx
seg000:58AE		    jz	    short reset_return
seg000:58B0		    cmp	    bx,	cx
seg000:58B2		    jnz	    short reset_return
seg000:58B4		    push    ax
seg000:58B5		    cmp	    byte ptr ss:cMeta+2, 3
seg000:58BB		    jz	    short reset_to_parent
seg000:58BD		    call    arena_free_process
seg000:58C0		    call    DOS_ABORT
seg000:58C3
seg000:58C3 reset_to_parent:			    ; CODE XREF: FATALC+10Aj
seg000:58C3		    pop	    ss:CurrentPDB
seg000:58C8
seg000:58C8 reset_return:			    ; CODE XREF: FATALC+FDj
seg000:58C8					    ; FATALC+101j
seg000:58C8		    push    cs
seg000:58C9		    pop	    ds
seg000:58CA		    mov	    al,	-1
seg000:58CC		    call    EcritDisk
seg000:58CF		    call    FLUSHBUF
seg000:58D2		    call    LcritDisk
seg000:58D5		    call    CHECK_VIRT_OPEN
seg000:58D8		    cli
seg000:58D9		    mov	    ds:INDOS, 0
seg000:58DE		    mov	    ds:WPERR, -1
seg000:58E3		    mov	    ds:fAborting, 0
seg000:58E8		    pop	    word ptr ds:EXITHOLD
seg000:58EC		    pop	    word ptr ds:EXITHOLD+2
seg000:58F0		    mov	    ds,	ds:CurrentPDB
seg000:58F4		    mov	    ss,	word ptr ds:BCLOCK+2
seg000:58F8		    mov	    sp,	word ptr ds:BCLOCK
seg000:58FC		    call    restore_world
seg000:58FF		    mov	    cs:User_SP,	ax
seg000:5903		    pop	    ax
seg000:5904		    pop	    ax
seg000:5905		    pop	    ax
seg000:5906		    mov	    ax,	0F202h
seg000:5909		    push    ax
seg000:590A		    push    word ptr cs:EXITHOLD+2
seg000:590F		    push    word ptr cs:EXITHOLD
seg000:5914		    mov	    ax,	cs:User_SP
seg000:5918		    iret
seg000:5918 ; END OF FUNCTION CHUNK FOR	FATALC
seg000:5919
seg000:5919 ; =============== S	U B R O	U T I N	E =======================================
seg000:5919
seg000:5919
seg000:5919 SET_I24_EXTENDED_ERROR proc	near	    ; CODE XREF: _$IOCTL+24Fp
seg000:5919					    ; FATALCp
seg000:5919		    push    ax
seg000:591A		    mov	    ax,	offset MAXCALL
seg000:591D		    sub	    ax,	offset ErrMap24
seg000:5920		    cmp	    di,	ax
seg000:5922		    mov	    ax,	di
seg000:5924		    jnb	    short NoTrans
seg000:5926		    mov	    al,	cs:ErrMap24[di]
seg000:592B		    xor	    ah,	ah
seg000:592D
seg000:592D NoTrans:				    ; CODE XREF: SET_I24_EXTENDED_ERROR+Bj
seg000:592D		    mov	    cs:EXTERR, ax
seg000:5931		    pop	    ax
seg000:5932		    push    si
seg000:5933		    mov	    si,	offset ERR_TABLE_24
seg000:5936		    call    CAL_LK
seg000:5939		    pop	    si
seg000:593A		    retn
seg000:593A SET_I24_EXTENDED_ERROR endp
seg000:593A
seg000:593B
seg000:593B ; =============== S	U B R O	U T I N	E =======================================
seg000:593B
seg000:593B
seg000:593B IsEOF	    proc near		    ; CODE XREF: DIRREAD+3Bp
seg000:593B					    ; DISKREAD+101p ...
seg000:593B		    cmp	    word ptr es:[bp+0Dh], 0FF6h
seg000:5941		    jnb	    short EOF16
seg000:5943		    cmp	    bx,	0FF0h
seg000:5947		    jz	    short IsEOF_other
seg000:5949		    cmp	    bx,	0FF8h
seg000:594D
seg000:594D IsEOF_other:			    ; CODE XREF: IsEOF+Cj
seg000:594D		    retn
seg000:594E ; ---------------------------------------------------------------------------
seg000:594E
seg000:594E EOF16:				    ; CODE XREF: IsEOF+6j
seg000:594E		    cmp	    bx,	0FFF8h
seg000:5951		    retn
seg000:5951 IsEOF	    endp
seg000:5951
seg000:5952
seg000:5952 ; =============== S	U B R O	U T I N	E =======================================
seg000:5952
seg000:5952
seg000:5952 UNPACK	    proc near		    ; CODE XREF: DISK_INFO+1Bp
seg000:5952					    ; DISK_INFO:SCANFREEp ...
seg000:5952		    cmp	    bx,	es:[bp+0Dh]
seg000:5956		    ja	    short HURTFAT
seg000:5958		    call    MAPCLUSTER
seg000:595B		    jb	    short _DoContext
seg000:595D		    mov	    di,	[di]
seg000:595F		    jnz	    short High12
seg000:5961		    mov	    si,	es:[bp+0Dh]
seg000:5965		    cmp	    si,	0FF6h
seg000:5969		    jb	    short Unpack12
seg000:596B		    or	    di,	di
seg000:596D		    jmp	    short _DoContext
seg000:596F ; ---------------------------------------------------------------------------
seg000:596F
seg000:596F High12:				    ; CODE XREF: UNPACK+Dj
seg000:596F		    shr	    di,	1
seg000:5971		    shr	    di,	1
seg000:5973		    shr	    di,	1
seg000:5975		    shr	    di,	1
seg000:5977
seg000:5977 Unpack12:				    ; CODE XREF: UNPACK+17j
seg000:5977		    and	    di,	0FFFh
seg000:597B
seg000:597B _DoContext:				    ; CODE XREF: UNPACK+9j
seg000:597B					    ; UNPACK+1Bj ...
seg000:597B		    push    ss
seg000:597C		    pop	    ds
seg000:597D		    retn
seg000:597E ; ---------------------------------------------------------------------------
seg000:597E
seg000:597E HURTFAT:				    ; CODE XREF: UNPACK+4j
seg000:597E		    mov	    word ptr es:[bp+1Eh], 0FFFFh
seg000:5984		    push    ax
seg000:5985		    mov	    ah,	88h
seg000:5987		    mov	    ss:ALLOWED,	8
seg000:598D		    mov	    di,	0FFFh
seg000:5990		    call    FATAL
seg000:5993		    cmp	    al,	3
seg000:5995		    clc
seg000:5996		    jnz	    short OKU_RET
seg000:5998		    stc
seg000:5999
seg000:5999 OKU_RET:				    ; CODE XREF: UNPACK+44j
seg000:5999		    pop	    ax
seg000:599A
seg000:599A hurtfat_retn:			    ; CODE XREF: PACK+3Ej
seg000:599A		    retn
seg000:599A UNPACK	    endp
seg000:599A
seg000:599B
seg000:599B ; =============== S	U B R O	U T I N	E =======================================
seg000:599B
seg000:599B
seg000:599B PACK	    proc near		    ; CODE XREF: ALLOCATE+39p
seg000:599B					    ; ALLOCATE+4Ep ...
seg000:599B		    call    MAPCLUSTER
seg000:599E		    jb	    short _DoContext
seg000:59A0		    mov	    si,	[di]
seg000:59A2		    jz	    short ALIGNED
seg000:59A4		    push    cx
seg000:59A5		    mov	    cl,	4
seg000:59A7		    shl	    dx,	cl
seg000:59A9		    pop	    cx
seg000:59AA		    and	    si,	0Fh
seg000:59AE		    jmp	    short PACKIN
seg000:59B0 ; ---------------------------------------------------------------------------
seg000:59B0
seg000:59B0 ALIGNED:				    ; CODE XREF: PACK+7j
seg000:59B0		    cmp	    word ptr es:[bp+0Dh], 0FF6h
seg000:59B6		    jnb	    short Pack16
seg000:59B8		    and	    si,	0F000h
seg000:59BC		    and	    dx,	0FFFh
seg000:59C0		    jmp	    short PACKIN
seg000:59C2 ; ---------------------------------------------------------------------------
seg000:59C2
seg000:59C2 Pack16:				    ; CODE XREF: PACK+1Bj
seg000:59C2		    xor	    si,	si
seg000:59C4
seg000:59C4 PACKIN:				    ; CODE XREF: PACK+13j
seg000:59C4					    ; PACK+25j
seg000:59C4		    or	    si,	dx
seg000:59C6		    mov	    [di], si
seg000:59C8		    lds	    si,	ss:CURBUF
seg000:59CD		    or	    byte ptr [si+5], 40h
seg000:59D1		    cmp	    byte ptr ss:THISDRV+2, 0
seg000:59D7		    push    ss
seg000:59D8		    pop	    ds
seg000:59D9		    jz	    short hurtfat_retn
seg000:59DB		    push    ax
seg000:59DC		    push    bx
seg000:59DD		    push    cx
seg000:59DE		    mov	    ax,	ds:CLUSSAVE
seg000:59E1		    mov	    ds,	word ptr ds:CURBUF+2
seg000:59E5		    add	    si,	16
seg000:59E8		    mov	    [si], ah
seg000:59EA		    push    ss
seg000:59EB		    pop	    ds
seg000:59EC		    push    ax
seg000:59ED		    mov	    dx,	ds:CLUSSEC
seg000:59F1		    mov	    si,	1
seg000:59F4		    xor	    al,	al
seg000:59F6		    call    GETBUFFRB
seg000:59F9		    pop	    ax
seg000:59FA		    jb	    short POPP_RET
seg000:59FC		    lds	    di,	ds:CURBUF
seg000:5A00		    or	    byte ptr [di+5], 40h
seg000:5A04		    add	    di,	10h
seg000:5A07		    dec	    di
seg000:5A08		    add	    di,	es:[bp+2]
seg000:5A0C		    mov	    [di], al
seg000:5A0E		    clc
seg000:5A0F
seg000:5A0F POPP_RET:				    ; CODE XREF: PACK+5Fj
seg000:5A0F		    push    ss
seg000:5A10		    pop	    ds
seg000:5A11		    pop	    cx
seg000:5A12		    pop	    bx
seg000:5A13		    pop	    ax
seg000:5A14		    retn
seg000:5A14 PACK	    endp
seg000:5A14
seg000:5A15
seg000:5A15 ; =============== S	U B R O	U T I N	E =======================================
seg000:5A15
seg000:5A15
seg000:5A15 MAPCLUSTER	    proc near		    ; CODE XREF: UNPACK+6p
seg000:5A15					    ; PACKp
seg000:5A15		    mov	    byte ptr ds:THISDRV+2, 0
seg000:5A1A		    push    ax
seg000:5A1B		    push    bx
seg000:5A1C		    push    cx
seg000:5A1D		    push    dx
seg000:5A1E		    mov	    ax,	bx
seg000:5A20		    mov	    cx,	0FF6h
seg000:5A23		    cmp	    es:[bp+0Dh], cx
seg000:5A27		    jnb	    short Map16
seg000:5A29		    shr	    ax,	1
seg000:5A2B
seg000:5A2B Map16:				    ; CODE XREF: MAPCLUSTER+12j
seg000:5A2B		    add	    ax,	bx
seg000:5A2D		    mov	    cx,	es:[bp+2]
seg000:5A31		    cmp	    cx,	512
seg000:5A35		    jnz	    short DoDiv
seg000:5A37		    mov	    dx,	ax
seg000:5A39		    and	    dx,	511
seg000:5A3D		    mov	    al,	ah
seg000:5A3F		    shr	    al,	1
seg000:5A41		    cbw
seg000:5A42
seg000:5A42 DivDone:				    ; CODE XREF: MAPCLUSTER+98j
seg000:5A42		    add	    ax,	es:[bp+6]
seg000:5A46		    dec	    cx
seg000:5A47		    push    ax
seg000:5A48		    push    dx
seg000:5A49		    push    cx
seg000:5A4A		    mov	    dx,	ax
seg000:5A4C		    xor	    al,	al
seg000:5A4E		    mov	    si,	1
seg000:5A51		    call    GETBUFFRB
seg000:5A54		    pop	    cx
seg000:5A55		    pop	    ax
seg000:5A56		    pop	    dx
seg000:5A57		    jb	    short MAP_POP
seg000:5A59		    lds	    si,	ds:CURBUF
seg000:5A5D		    lea	    di,	[si+16]
seg000:5A60		    add	    di,	ax
seg000:5A62		    cmp	    ax,	cx
seg000:5A64		    jnz	    short MAPRET
seg000:5A66		    mov	    al,	[di]
seg000:5A68		    push    ss
seg000:5A69		    pop	    ds
seg000:5A6A		    inc	    byte ptr ds:THISDRV+2
seg000:5A6E		    mov	    byte ptr ds:CLUSSAVE, al
seg000:5A71		    mov	    ds:CLUSSEC,	dx
seg000:5A75		    inc	    dx
seg000:5A76		    xor	    al,	al
seg000:5A78		    mov	    si,	1
seg000:5A7B		    call    GETBUFFRB
seg000:5A7E		    jb	    short MAP_POP
seg000:5A80		    lds	    si,	ds:CURBUF
seg000:5A84		    lea	    di,	[si+16]
seg000:5A87		    mov	    al,	[di]
seg000:5A89		    push    ss
seg000:5A8A		    pop	    ds
seg000:5A8B		    mov	    byte ptr ds:CLUSSAVE+1, al
seg000:5A8E		    mov	    di,	offset CLUSSAVE
seg000:5A91
seg000:5A91 MAPRET:				    ; CODE XREF: MAPCLUSTER+4Fj
seg000:5A91		    pop	    dx
seg000:5A92		    pop	    cx
seg000:5A93		    pop	    bx
seg000:5A94		    xor	    ax,	ax
seg000:5A96		    cmp	    word ptr es:[bp+0Dh], 4086
seg000:5A9C		    jnb	    short MapSet
seg000:5A9E		    mov	    ax,	bx
seg000:5AA0
seg000:5AA0 MapSet:				    ; CODE XREF: MAPCLUSTER+87j
seg000:5AA0		    test    al,	1
seg000:5AA2		    pop	    ax
seg000:5AA3		    retn
seg000:5AA4 ; ---------------------------------------------------------------------------
seg000:5AA4
seg000:5AA4 MAP_POP:				    ; CODE XREF: MAPCLUSTER+42j
seg000:5AA4					    ; MAPCLUSTER+69j
seg000:5AA4		    pop	    dx
seg000:5AA5		    pop	    cx
seg000:5AA6		    pop	    bx
seg000:5AA7		    pop	    ax
seg000:5AA8		    retn
seg000:5AA9 ; ---------------------------------------------------------------------------
seg000:5AA9
seg000:5AA9 DoDiv:				    ; CODE XREF: MAPCLUSTER+20j
seg000:5AA9		    xor	    dx,	dx
seg000:5AAB		    div	    cx
seg000:5AAD		    jmp	    short DivDone
seg000:5AAD MAPCLUSTER	    endp
seg000:5AAD
seg000:5AAF
seg000:5AAF ; =============== S	U B R O	U T I N	E =======================================
seg000:5AAF
seg000:5AAF
seg000:5AAF FATREAD_SFT	    proc near		    ; CODE XREF: DirFromSFT+Cp
seg000:5AAF		    les	    bp,	es:[di+7]
seg000:5AB3		    mov	    al,	es:[bp+0]
seg000:5AB7		    mov	    byte ptr ds:THISDRV, al
seg000:5ABA		    call    GOTDPB
seg000:5ABD		    call    FAT_GOT_DPB
seg000:5AC0
seg000:5AC0 fatread_sft_retn:			    ; CODE XREF: FatRead_CDS+15j
seg000:5AC0		    retn
seg000:5AC0 FATREAD_SFT	    endp
seg000:5AC0
seg000:5AC1
seg000:5AC1 ; =============== S	U B R O	U T I N	E =======================================
seg000:5AC1
seg000:5AC1
seg000:5AC1 FatRead_CDS	    proc near		    ; CODE XREF: seg000:1C3Ap
seg000:5AC1					    ; DOS_DELETE+10Fp ...
seg000:5AC1		    push    es
seg000:5AC2		    push    di
seg000:5AC3		    les	    bp,	es:[di+45h]
seg000:5AC7		    mov	    al,	es:[bp+0]
seg000:5ACB		    mov	    byte ptr ds:THISDRV, al
seg000:5ACE		    call    GOTDPB
seg000:5AD1		    call    FAT_GOT_DPB
seg000:5AD4		    pop	    di
seg000:5AD5		    pop	    es
seg000:5AD6		    jb	    short fatread_sft_retn
seg000:5AD8		    jnz	    short NO_CHANGE
seg000:5ADA		    xor	    ax,	ax
seg000:5ADC		    dec	    ax
seg000:5ADD		    push    ds
seg000:5ADE		    mov	    cl,	ds:CDSCOUNT
seg000:5AE2		    xor	    ch,	ch
seg000:5AE4		    lds	    si,	es:[di+45h]
seg000:5AE8		    les	    di,	ss:CDSAddr
seg000:5AED
seg000:5AED frcd20:				    ; CODE XREF: FatRead_CDS+4Ej
seg000:5AED		    test    word ptr es:[di+43h], 8000h
seg000:5AF3		    jnz	    short frcd25
seg000:5AF5		    push    es
seg000:5AF6		    push    di
seg000:5AF7		    les	    di,	es:[di+45h]
seg000:5AFB		    call    POINTCOMP
seg000:5AFE		    pop	    di
seg000:5AFF		    pop	    es
seg000:5B00		    jnz	    short frcd25
seg000:5B02		    test    es:[di+49h], ax
seg000:5B06		    jz	    short frcd25
seg000:5B08		    mov	    es:[di+49h], ax
seg000:5B0C
seg000:5B0C frcd25:				    ; CODE XREF: FatRead_CDS+32j
seg000:5B0C					    ; FatRead_CDS+3Fj ...
seg000:5B0C		    add	    di,	81
seg000:5B0F		    loop    frcd20
seg000:5B11		    pop	    ds
seg000:5B12
seg000:5B12 NO_CHANGE:				    ; CODE XREF: FatRead_CDS+17j
seg000:5B12		    les	    bp,	ds:THISDPB
seg000:5B16		    clc
seg000:5B17		    retn
seg000:5B17 FatRead_CDS	    endp
seg000:5B17
seg000:5B18 ; ---------------------------------------------------------------------------
seg000:5B18 ; START OF FUNCTION	CHUNK FOR FAT_GOT_DPB
seg000:5B18
seg000:5B18 FATERR:				    ; CODE XREF: FAT_GOT_DPB+35j
seg000:5B18					    ; FAT_GOT_DPB:FATERRJj
seg000:5B18		    mov	    word ptr es:[bp+1Eh], -1
seg000:5B1E		    and	    di,	0FFh
seg000:5B22		    mov	    ds:ALLOWED,	18h
seg000:5B27		    mov	    ah,	1Ah
seg000:5B29		    mov	    al,	byte ptr ds:THISDRV
seg000:5B2C		    call    FATAL1
seg000:5B2F		    les	    bp,	ds:THISDPB
seg000:5B33		    cmp	    al,	3
seg000:5B35		    jnz	    short FAT_GOT_DPB
seg000:5B37		    stc
seg000:5B38		    retn
seg000:5B38 ; END OF FUNCTION CHUNK FOR	FAT_GOT_DPB
seg000:5B39
seg000:5B39 ; =============== S	U B R O	U T I N	E =======================================
seg000:5B39
seg000:5B39
seg000:5B39 FAT_GOT_DPB	    proc near		    ; CODE XREF: FATREAD_SFT+Ep
seg000:5B39					    ; FatRead_CDS+10p ...
seg000:5B39
seg000:5B39 ; FUNCTION CHUNK AT	seg000:5B18 SIZE 00000021 BYTES
seg000:5B39
seg000:5B39		    push    ss
seg000:5B3A		    pop	    ds
seg000:5B3B		    mov	    al,	0Fh
seg000:5B3D		    mov	    ah,	es:[bp+1]
seg000:5B41		    mov	    word ptr ds:DEVCALL, ax
seg000:5B44		    mov	    ds:DEVCALL_REQFUNC,	1
seg000:5B49		    mov	    word ptr ds:DEVCALL_REQSTAT, 0
seg000:5B4F		    mov	    al,	es:[bp+16h]
seg000:5B53		    mov	    ds:CALLMED,	al
seg000:5B56		    push    es
seg000:5B57		    push    ds
seg000:5B58		    mov	    bx,	offset DEVCALL
seg000:5B5B		    lds	    si,	es:[bp+12h]
seg000:5B5F		    pop	    es
seg000:5B60		    call    DEVIOCALL2
seg000:5B63		    push    ss
seg000:5B64		    pop	    ds
seg000:5B65		    pop	    es
seg000:5B66		    mov	    di,	word ptr ds:DEVCALL_REQSTAT
seg000:5B6A		    test    di,	8000h
seg000:5B6E		    jnz	    short FATERR
seg000:5B70		    xor	    ah,	ah
seg000:5B72		    xchg    ah,	es:[bp+17h]
seg000:5B76		    mov	    al,	byte ptr ds:THISDRV
seg000:5B79		    cmp	    ds:VOLCHNG_FLAG, al
seg000:5B7D		    jnz	    short CHECK_BYT
seg000:5B7F		    mov	    ds:VOLCHNG_FLAG, -1
seg000:5B84		    jmp	    GOGETBPB
seg000:5B87 ; ---------------------------------------------------------------------------
seg000:5B87
seg000:5B87 CHECK_BYT:				    ; CODE XREF: FAT_GOT_DPB+44j
seg000:5B87		    or	    ah,	ds:CALLXAD
seg000:5B8B		    jns	    short CHECK_ZR
seg000:5B8D		    jmp	    short NEWDSK
seg000:5B8F ; ---------------------------------------------------------------------------
seg000:5B8F		    nop
seg000:5B90
seg000:5B90 CHECK_ZR:				    ; CODE XREF: FAT_GOT_DPB+52j
seg000:5B90		    jz	    short CHKBUFFDIRT
seg000:5B92		    clc
seg000:5B93		    retn
seg000:5B94 ; ---------------------------------------------------------------------------
seg000:5B94
seg000:5B94 DISK_CHNG_ERR:			    ; CODE XREF: FAT_GOT_DPB+CCj
seg000:5B94		    push    es
seg000:5B95		    push    bp
seg000:5B96		    les	    bp,	es:[bp+12h]
seg000:5B9A		    test    word ptr es:[bp+4],	800h
seg000:5BA0		    pop	    bp
seg000:5BA1		    pop	    es
seg000:5BA2		    jz	    short FAIL_OPJ2
seg000:5BA4		    push    ds
seg000:5BA5		    push    di
seg000:5BA6		    push    ss
seg000:5BA7		    pop	    ds
seg000:5BA8		    mov	    ds:ALLOWED,	18h
seg000:5BAD		    push    es
seg000:5BAE		    les	    di,	dword ptr ds:CALLVIDM
seg000:5BB2		    mov	    ds:EXTERRPT_2, es
seg000:5BB6		    pop	    es
seg000:5BB7		    mov	    ds:EXTERRPT, di
seg000:5BBB		    mov	    ax,	0Fh
seg000:5BBE		    mov	    byte ptr ds:SECCLUSPOS+2, 1
seg000:5BC3		    call    HARDERR
seg000:5BC6		    pop	    di
seg000:5BC7		    pop	    ds
seg000:5BC8		    cmp	    al,	3
seg000:5BCA
seg000:5BCA FAIL_OPJ2:				    ; CODE XREF: FAT_GOT_DPB+69j
seg000:5BCA		    jz	    short FAIL_OP
seg000:5BCC		    jmp	    FAT_GOT_DPB
seg000:5BCF ; ---------------------------------------------------------------------------
seg000:5BCF
seg000:5BCF CHKBUFFDIRT:			    ; CODE XREF: FAT_GOT_DPB:CHECK_ZRj
seg000:5BCF		    lds	    di,	ds:BUFFHEAD
seg000:5BD3
seg000:5BD3 nbuffer:				    ; CODE XREF: FAT_GOT_DPB+B2j
seg000:5BD3		    cmp	    al,	[di+4]
seg000:5BD6		    jnz	    short lfnxt
seg000:5BD8		    test    byte ptr [di+5], 40h
seg000:5BDC		    jz	    short lfnxt
seg000:5BDE		    push    ss
seg000:5BDF		    pop	    ds
seg000:5BE0		    clc
seg000:5BE1		    retn
seg000:5BE2 ; ---------------------------------------------------------------------------
seg000:5BE2
seg000:5BE2 FAIL_OP:				    ; CODE XREF: FAT_GOT_DPB:FAIL_OPJ2j
seg000:5BE2					    ; FAT_GOT_DPB:FAIL_OPJj
seg000:5BE2		    push    ss
seg000:5BE3		    pop	    ds
seg000:5BE4		    stc
seg000:5BE5		    retn
seg000:5BE6 ; ---------------------------------------------------------------------------
seg000:5BE6
seg000:5BE6 lfnxt:				    ; CODE XREF: FAT_GOT_DPB+9Dj
seg000:5BE6					    ; FAT_GOT_DPB+A3j
seg000:5BE6		    lds	    di,	[di]
seg000:5BE8		    cmp	    di,	-1
seg000:5BEB		    jnz	    short nbuffer
seg000:5BED
seg000:5BED NEWDSK:				    ; CODE XREF: FAT_GOT_DPB+54j
seg000:5BED		    mov	    word ptr es:[bp+1Eh], 0FFFFh
seg000:5BF3		    call    SETVISIT
seg000:5BF6
seg000:5BF6 nxbuffer:				    ; CODE XREF: FAT_GOT_DPB+D9j
seg000:5BF6		    or	    byte ptr [di+5], 20h
seg000:5BFA		    cmp	    al,	[di+4]
seg000:5BFD		    jnz	    short lfnxt2
seg000:5BFF		    test    byte ptr [di+5], 40h
seg000:5C03		    jz	    short lfnxt1
seg000:5C05		    jmp	    short DISK_CHNG_ERR
seg000:5C07 ; ---------------------------------------------------------------------------
seg000:5C07
seg000:5C07 lfnxt1:				    ; CODE XREF: FAT_GOT_DPB+CAj
seg000:5C07		    mov	    word ptr [di+4], 20FFh
seg000:5C0C		    call    SCANPLACE
seg000:5C0F
seg000:5C0F lfnxt2:				    ; CODE XREF: FAT_GOT_DPB+C4j
seg000:5C0F		    call    SKIPVISIT
seg000:5C12		    jnz	    short nxbuffer
seg000:5C14
seg000:5C14 GOGETBPB:				    ; CODE XREF: FAT_GOT_DPB+4Bj
seg000:5C14		    lds	    di,	es:[bp+12h]
seg000:5C18		    test    word ptr [di+4], 2000h
seg000:5C1D		    jnz	    short GETFREEBUF
seg000:5C1F		    push    ss
seg000:5C20		    pop	    ds
seg000:5C21		    mov	    bx,	2
seg000:5C24		    call    UNPACK
seg000:5C27
seg000:5C27 FAIL_OPJ:				    ; CODE XREF: FAT_GOT_DPB+102j
seg000:5C27		    jb	    short FAIL_OP
seg000:5C29		    lds	    di,	ds:CURBUF
seg000:5C2D		    jmp	    short GOTGETBUF
seg000:5C2F ; ---------------------------------------------------------------------------
seg000:5C2F
seg000:5C2F GETFREEBUF:				    ; CODE XREF: FAT_GOT_DPB+E4j
seg000:5C2F		    push    es
seg000:5C30		    push    bp
seg000:5C31		    lds	    di,	ss:BUFFHEAD
seg000:5C36		    call    BUFWRITE
seg000:5C39		    pop	    bp
seg000:5C3A		    pop	    es
seg000:5C3B		    jb	    short FAIL_OPJ
seg000:5C3D
seg000:5C3D GOTGETBUF:				    ; CODE XREF: FAT_GOT_DPB+F4j
seg000:5C3D		    add	    di,	16
seg000:5C40		    mov	    ss:CALLXAD_2, ds
seg000:5C45		    push    ss
seg000:5C46		    pop	    ds
seg000:5C47		    mov	    word ptr ds:CALLXAD, di
seg000:5C4B		    mov	    al,	16h
seg000:5C4D		    mov	    ah,	es:[bp+1]
seg000:5C51		    mov	    word ptr ds:DEVCALL, ax
seg000:5C54		    mov	    ds:DEVCALL_REQFUNC,	2
seg000:5C59		    mov	    word ptr ds:DEVCALL_REQSTAT, 0
seg000:5C5F		    mov	    al,	es:[bp+16h]
seg000:5C63		    mov	    ds:CALLMED,	al
seg000:5C66		    push    es
seg000:5C67		    push    ds
seg000:5C68		    push    word ptr es:[bp+14h]
seg000:5C6C		    push    word ptr es:[bp+12h]
seg000:5C70		    mov	    bx,	offset DEVCALL
seg000:5C73		    pop	    si
seg000:5C74		    pop	    ds
seg000:5C75		    pop	    es
seg000:5C76		    call    DEVIOCALL2
seg000:5C79		    pop	    es
seg000:5C7A		    push    ss
seg000:5C7B		    pop	    ds
seg000:5C7C		    mov	    di,	word ptr ds:DEVCALL_REQSTAT
seg000:5C80		    test    di,	8000h
seg000:5C84		    jnz	    short FATERRJ
seg000:5C86		    mov	    al,	es:[bp+16h]
seg000:5C8A		    lds	    si,	ds:CALLSCNT
seg000:5C8E		    mov	    word ptr es:[bp+1Ch], 0
seg000:5C94		    call    _$SETDPB
seg000:5C97		    lds	    di,	dword ptr ss:CALLXAD
seg000:5C9C		    mov	    al,	es:[bp+8]
seg000:5CA0		    mov	    ah,	es:[bp+0Fh]
seg000:5CA4		    mov	    [di-8], ax
seg000:5CA7		    push    ss
seg000:5CA8		    pop	    ds
seg000:5CA9		    xor	    al,	al
seg000:5CAB		    retn
seg000:5CAC ; ---------------------------------------------------------------------------
seg000:5CAC
seg000:5CAC FATERRJ:				    ; CODE XREF: FAT_GOT_DPB+14Bj
seg000:5CAC		    jmp	    FATERR
seg000:5CAC FAT_GOT_DPB	    endp
seg000:5CAC
seg000:5CAF
seg000:5CAF ; =============== S	U B R O	U T I N	E =======================================
seg000:5CAF
seg000:5CAF
seg000:5CAF SETVISIT	    proc near		    ; CODE XREF: DISKREAD+A8p
seg000:5CAF					    ; DISKWRITE+134p ...
seg000:5CAF		    lds	    di,	ss:BUFFHEAD
seg000:5CB4		    push    ax
seg000:5CB5		    mov	    al,	0DFh
seg000:5CB7
seg000:5CB7 SETLOOP:				    ; CODE XREF: SETVISIT+10j
seg000:5CB7		    and	    [di+5], al
seg000:5CBA		    lds	    di,	[di]
seg000:5CBC		    cmp	    di,	-1
seg000:5CBF		    jnz	    short SETLOOP
seg000:5CC1		    pop	    ax
seg000:5CC2		    lds	    di,	ss:BUFFHEAD
seg000:5CC7
seg000:5CC7 SVISIT_RETN:			    ; CODE XREF: SKIPVISIT+3j
seg000:5CC7		    retn
seg000:5CC7 SETVISIT	    endp
seg000:5CC7
seg000:5CC8
seg000:5CC8 ; =============== S	U B R O	U T I N	E =======================================
seg000:5CC8
seg000:5CC8
seg000:5CC8 SKIPVISIT	    proc near		    ; CODE XREF: DISKREAD:bufq3p
seg000:5CC8					    ; DISKWRITE:wbufq2p ...
seg000:5CC8		    cmp	    di,	-1
seg000:5CCB		    jz	    short SVISIT_RETN
seg000:5CCD		    test    byte ptr [di+5], 20h
seg000:5CD1		    jnz	    short SKIPLOOP
seg000:5CD3		    push    ax
seg000:5CD4		    or	    al,	1
seg000:5CD6		    pop	    ax
seg000:5CD7		    retn
seg000:5CD8 ; ---------------------------------------------------------------------------
seg000:5CD8
seg000:5CD8 SKIPLOOP:				    ; CODE XREF: SKIPVISIT+9j
seg000:5CD8		    lds	    di,	[di]
seg000:5CDA		    jmp	    short SKIPVISIT
seg000:5CDA SKIPVISIT	    endp
seg000:5CDA
seg000:5CDC
seg000:5CDC ; =============== S	U B R O	U T I N	E =======================================
seg000:5CDC
seg000:5CDC
seg000:5CDC SCANPLACE	    proc near		    ; CODE XREF: DISKREAD:bufq2p
seg000:5CDC					    ; DISKWRITE+14Fp ...
seg000:5CDC		    push    es
seg000:5CDD		    les	    si,	[di]
seg000:5CDF		    call    PLACEBUF
seg000:5CE2		    push    es
seg000:5CE3		    pop	    ds
seg000:5CE4		    mov	    di,	si
seg000:5CE6		    pop	    es
seg000:5CE7
seg000:5CE7 scanplace_retn:			    ; CODE XREF: PLACEBUF+5Cj
seg000:5CE7		    retn
seg000:5CE7 SCANPLACE	    endp
seg000:5CE7
seg000:5CE8
seg000:5CE8 ; =============== S	U B R O	U T I N	E =======================================
seg000:5CE8
seg000:5CE8
seg000:5CE8 PLACEBUF	    proc near		    ; CODE XREF: BUFRD+28p
seg000:5CE8					    ; BUFWRT+35p ...
seg000:5CE8		    call    save_world
seg000:5CEB		    les	    cx,	[di]
seg000:5CED		    cmp	    cx,	-1
seg000:5CF0		    jz	    short NRET
seg000:5CF2		    mov	    bp,	es
seg000:5CF4		    push    ds
seg000:5CF5		    pop	    es
seg000:5CF6		    lds	    si,	ss:BUFFHEAD
seg000:5CFB		    call    POINTCOMP
seg000:5CFE		    jnz	    short BUFLOOP
seg000:5D00		    mov	    word ptr ss:BUFFHEAD, cx
seg000:5D05		    mov	    word ptr ss:BUFFHEAD+2, bp
seg000:5D0A		    jmp	    short LOOKEND
seg000:5D0C ; ---------------------------------------------------------------------------
seg000:5D0C
seg000:5D0C BUFLOOP:				    ; CODE XREF: PLACEBUF+16j
seg000:5D0C					    ; PLACEBUF+2Dj
seg000:5D0C		    mov	    ax,	ds
seg000:5D0E		    mov	    bx,	si
seg000:5D10		    lds	    si,	[si]
seg000:5D12		    call    POINTCOMP
seg000:5D15		    jnz	    short BUFLOOP
seg000:5D17		    mov	    ds,	ax
seg000:5D19		    mov	    si,	bx
seg000:5D1B		    mov	    [si], cx
seg000:5D1D		    mov	    [si+2], bp
seg000:5D20
seg000:5D20 LOOKEND:				    ; CODE XREF: PLACEBUF+22j
seg000:5D20					    ; PLACEBUF+41j
seg000:5D20		    mov	    ax,	ds
seg000:5D22		    mov	    bx,	si
seg000:5D24		    lds	    si,	[si]
seg000:5D26		    cmp	    si,	-1
seg000:5D29		    jnz	    short LOOKEND
seg000:5D2B		    mov	    ds,	ax
seg000:5D2D		    mov	    [bx], di
seg000:5D2F		    mov	    word ptr [bx+2], es
seg000:5D32		    mov	    word ptr es:[di], -1
seg000:5D37		    mov	    word ptr es:[di+2],	-1
seg000:5D3D
seg000:5D3D NRET:				    ; CODE XREF: PLACEBUF+8j
seg000:5D3D		    call    restore_world
seg000:5D40		    cmp	    byte ptr [di+4], -1
seg000:5D44		    jnz	    short scanplace_retn
seg000:5D46		    call    PLACEHEAD
seg000:5D49		    retn
seg000:5D49 PLACEBUF	    endp
seg000:5D49
seg000:5D4A
seg000:5D4A ; =============== S	U B R O	U T I N	E =======================================
seg000:5D4A
seg000:5D4A
seg000:5D4A PLACEHEAD	    proc near		    ; CODE XREF: BUFRD+31p
seg000:5D4A					    ; BUFWRT+3Ep ...
seg000:5D4A		    call    save_world
seg000:5D4D		    push    ds
seg000:5D4E		    pop	    es
seg000:5D4F		    lds	    si,	ss:BUFFHEAD
seg000:5D54		    call    POINTCOMP
seg000:5D57		    jz	    short GOTHEEND2
seg000:5D59		    mov	    es:[di], si
seg000:5D5C		    mov	    word ptr es:[di+2],	ds
seg000:5D60		    mov	    word ptr ss:BUFFHEAD, di
seg000:5D65		    mov	    word ptr ss:BUFFHEAD+2, es
seg000:5D6A
seg000:5D6A LOOKEND2:				    ; CODE XREF: PLACEHEAD+29j
seg000:5D6A		    mov	    ax,	ds
seg000:5D6C		    mov	    bx,	si
seg000:5D6E		    lds	    si,	[si]
seg000:5D70		    call    POINTCOMP
seg000:5D73		    jnz	    short LOOKEND2
seg000:5D75		    mov	    ds,	ax
seg000:5D77		    mov	    word ptr [bx], 0FFFFh
seg000:5D7B		    mov	    word ptr [bx+2], 0FFFFh
seg000:5D80
seg000:5D80 GOTHEEND2:				    ; CODE XREF: PLACEHEAD+Dj
seg000:5D80		    call    restore_world
seg000:5D83
seg000:5D83 placehead_retn:			    ; CODE XREF: POINTCOMP+2j
seg000:5D83		    retn
seg000:5D83 PLACEHEAD	    endp
seg000:5D83
seg000:5D84
seg000:5D84 ; =============== S	U B R O	U T I N	E =======================================
seg000:5D84
seg000:5D84
seg000:5D84 POINTCOMP	    proc near		    ; CODE XREF: FatRead_CDS+3Ap
seg000:5D84					    ; PLACEBUF+13p ...
seg000:5D84		    cmp	    si,	di
seg000:5D86		    jnz	    short placehead_retn
seg000:5D88		    push    cx
seg000:5D89		    push    dx
seg000:5D8A		    mov	    cx,	ds
seg000:5D8C		    mov	    dx,	es
seg000:5D8E		    cmp	    cx,	dx
seg000:5D90		    pop	    dx
seg000:5D91		    pop	    cx
seg000:5D92		    retn
seg000:5D92 POINTCOMP	    endp
seg000:5D92
seg000:5D93
seg000:5D93 ; =============== S	U B R O	U T I N	E =======================================
seg000:5D93
seg000:5D93
seg000:5D93 GETBUFFR	    proc near		    ; CODE XREF: DirFromSFT+19p
seg000:5D93					    ; seg000:3B9Ep ...
seg000:5D93		    xor	    si,	si
seg000:5D93 GETBUFFR	    endp
seg000:5D93
seg000:5D95
seg000:5D95 ; =============== S	U B R O	U T I N	E =======================================
seg000:5D95
seg000:5D95
seg000:5D95 GETBUFFRB	    proc near		    ; CODE XREF: PACK+5Bp
seg000:5D95					    ; MAPCLUSTER+3Cp ...
seg000:5D95		    mov	    ds:PREREAD,	ax
seg000:5D98		    mov	    al,	es:[bp+0]
seg000:5D9C		    lds	    di,	ds:LastBuffer
seg000:5DA0		    cmp	    di,	-1
seg000:5DA3		    jz	    short getb5
seg000:5DA5		    cmp	    dx,	[di+6]
seg000:5DA8		    jnz	    short getb5
seg000:5DAA		    cmp	    al,	[di+4]
seg000:5DAD		    jnz	    short getb5
seg000:5DAF		    jmp	    short getb35
seg000:5DB1 ; ---------------------------------------------------------------------------
seg000:5DB1
seg000:5DB1 getb5:				    ; CODE XREF: GETBUFFRB+Ej
seg000:5DB1					    ; GETBUFFRB+13j ...
seg000:5DB1		    lds	    di,	ss:BUFFHEAD
seg000:5DB6
seg000:5DB6 getb10:				    ; CODE XREF: GETBUFFRB+30j
seg000:5DB6		    cmp	    dx,	[di+6]
seg000:5DB9		    jnz	    short getb12
seg000:5DBB		    cmp	    al,	[di+4]
seg000:5DBE		    jz	    short getb25
seg000:5DC0
seg000:5DC0 getb12:				    ; CODE XREF: GETBUFFRB+24j
seg000:5DC0		    lds	    di,	[di]
seg000:5DC2		    cmp	    di,	-1
seg000:5DC5		    jnz	    short getb10
seg000:5DC7		    lds	    di,	ss:BUFFHEAD
seg000:5DCC		    push    si
seg000:5DCD		    push    dx
seg000:5DCE		    push    bp
seg000:5DCF		    push    es
seg000:5DD0		    call    BUFWRITE
seg000:5DD3		    pop	    es
seg000:5DD4		    pop	    bp
seg000:5DD5		    pop	    dx
seg000:5DD6		    pop	    si
seg000:5DD7		    jb	    short getbx
seg000:5DD9		    xor	    ah,	ah
seg000:5DDB		    test    byte ptr ss:PREREAD, 0FFh
seg000:5DE1		    jnz	    short getb20
seg000:5DE3		    lea	    bx,	[di+16]
seg000:5DE6		    mov	    cx,	1
seg000:5DE9		    push    si
seg000:5DEA		    push    di
seg000:5DEB		    push    dx
seg000:5DEC		    or	    si,	si
seg000:5DEE		    jz	    short getb15
seg000:5DF0		    call    FATSECRD
seg000:5DF3		    mov	    ah,	2
seg000:5DF5		    jmp	    short getb17
seg000:5DF7 ; ---------------------------------------------------------------------------
seg000:5DF7
seg000:5DF7 getb15:				    ; CODE XREF: GETBUFFRB+59j
seg000:5DF7		    call    DREAD
seg000:5DFA		    mov	    ah,	0
seg000:5DFC
seg000:5DFC getb17:				    ; CODE XREF: GETBUFFRB+60j
seg000:5DFC		    pop	    dx
seg000:5DFD		    pop	    di
seg000:5DFE		    pop	    si
seg000:5DFF		    jb	    short getbx
seg000:5E01
seg000:5E01 getb20:				    ; CODE XREF: GETBUFFRB+4Cj
seg000:5E01		    mov	    [di+6], dx
seg000:5E04		    mov	    [di+0Ah], bp
seg000:5E07		    mov	    word ptr [di+0Ch], es
seg000:5E0A		    mov	    al,	es:[bp+0]
seg000:5E0E		    mov	    [di+4], ax
seg000:5E11
seg000:5E11 getb25:				    ; CODE XREF: GETBUFFRB+29j
seg000:5E11		    mov	    ax,	1
seg000:5E14		    or	    si,	si
seg000:5E16		    jz	    short getb30
seg000:5E18		    mov	    al,	es:[bp+8]
seg000:5E1C		    mov	    ah,	es:[bp+0Fh]
seg000:5E20
seg000:5E20 getb30:				    ; CODE XREF: GETBUFFRB+81j
seg000:5E20		    mov	    [di+8], ax
seg000:5E23		    call    PLACEBUF
seg000:5E26
seg000:5E26 getb35:				    ; CODE XREF: GETBUFFRB+1Aj
seg000:5E26		    mov	    word ptr ss:CURBUF+2, ds
seg000:5E2B		    mov	    word ptr ss:LastBuffer+2, ds
seg000:5E30		    mov	    word ptr ss:CURBUF,	di
seg000:5E35		    mov	    word ptr ss:LastBuffer, di
seg000:5E3A		    clc
seg000:5E3B
seg000:5E3B getbx:				    ; CODE XREF: GETBUFFRB+42j
seg000:5E3B					    ; GETBUFFRB+6Aj
seg000:5E3B		    push    ss
seg000:5E3C		    pop	    ds
seg000:5E3D		    retn
seg000:5E3D GETBUFFRB	    endp
seg000:5E3D
seg000:5E3E
seg000:5E3E ; =============== S	U B R O	U T I N	E =======================================
seg000:5E3E
seg000:5E3E
seg000:5E3E FLUSHBUF	    proc near		    ; CODE XREF: seg000:1C58p
seg000:5E3E					    ; DOS_DELETE+EBp ...
seg000:5E3E		    mov	    ah,	-1
seg000:5E40		    lds	    di,	ds:BUFFHEAD
seg000:5E44
seg000:5E44 scan_buf_queue:			    ; CODE XREF: FLUSHBUF+1Aj
seg000:5E44		    call    CHECKFLUSH
seg000:5E47		    push    ax
seg000:5E48		    mov	    al,	[di+4]
seg000:5E4B		    cmp	    al,	ss:WPERR
seg000:5E50		    jz	    short free_the_buf
seg000:5E52
seg000:5E52 dont_free_the_buf:			    ; CODE XREF: FLUSHBUF+2Dj
seg000:5E52		    pop	    ax
seg000:5E53		    lds	    di,	[di]
seg000:5E55		    cmp	    di,	-1
seg000:5E58		    jnz	    short scan_buf_queue
seg000:5E5A		    push    ss
seg000:5E5B		    pop	    ds
seg000:5E5C		    cmp	    ds:FAILERR,	0
seg000:5E61		    jnz	    short bad_flush
seg000:5E63		    retn
seg000:5E64 ; ---------------------------------------------------------------------------
seg000:5E64
seg000:5E64 bad_flush:				    ; CODE XREF: FLUSHBUF+23j
seg000:5E64		    stc
seg000:5E65
seg000:5E65 flushbuf_retn:			    ; CODE XREF: CHECKFLUSH+3j
seg000:5E65					    ; CHECKFLUSH+Dj ...
seg000:5E65		    retn
seg000:5E66 ; ---------------------------------------------------------------------------
seg000:5E66
seg000:5E66 free_the_buf:			    ; CODE XREF: FLUSHBUF+12j
seg000:5E66		    mov	    word ptr [di+4], 0FFh
seg000:5E6B		    jmp	    short dont_free_the_buf
seg000:5E6B FLUSHBUF	    endp
seg000:5E6B
seg000:5E6D
seg000:5E6D ; =============== S	U B R O	U T I N	E =======================================
seg000:5E6D
seg000:5E6D
seg000:5E6D CHECKFLUSH	    proc near		    ; CODE XREF: FLUSHBUF:scan_buf_queuep
seg000:5E6D					    ; DATA XREF: seg000:0F01o
seg000:5E6D		    cmp	    [di+4], ah
seg000:5E70		    jz	    short flushbuf_retn
seg000:5E72		    cmp	    ah,	al
seg000:5E74		    jz	    short DOBUFFER
seg000:5E76		    cmp	    al,	[di+4]
seg000:5E79		    clc
seg000:5E7A		    jnz	    short flushbuf_retn
seg000:5E7C
seg000:5E7C DOBUFFER:				    ; CODE XREF: CHECKFLUSH+7j
seg000:5E7C		    test    byte ptr [di+5], 40h
seg000:5E80		    jz	    short flushbuf_retn
seg000:5E82		    push    ax
seg000:5E83		    push    word ptr [di+4]
seg000:5E86		    call    BUFWRITE
seg000:5E89		    pop	    ax
seg000:5E8A		    jb	    short LEAVE_BUF
seg000:5E8C		    and	    ah,	0BFh
seg000:5E8F		    mov	    [di+4], ax
seg000:5E92
seg000:5E92 LEAVE_BUF:				    ; CODE XREF: CHECKFLUSH+1Dj
seg000:5E92		    pop	    ax
seg000:5E93
seg000:5E93 checkflush_retn:			    ; CODE XREF: BUFWRITE+8j
seg000:5E93					    ; BUFWRITE+Dj ...
seg000:5E93		    retn
seg000:5E93 CHECKFLUSH	    endp
seg000:5E93
seg000:5E94
seg000:5E94 ; =============== S	U B R O	U T I N	E =======================================
seg000:5E94
seg000:5E94
seg000:5E94 BUFWRITE	    proc near		    ; CODE XREF: FAT_GOT_DPB+FDp
seg000:5E94					    ; GETBUFFRB+3Bp ...
seg000:5E94		    mov	    ax,	0FFh
seg000:5E97		    xchg    ax,	[di+4]
seg000:5E9A		    cmp	    al,	0FFh
seg000:5E9C		    jz	    short checkflush_retn
seg000:5E9E		    test    ah,	40h
seg000:5EA1		    jz	    short checkflush_retn
seg000:5EA3		    cmp	    al,	ss:WPERR
seg000:5EA8		    jz	    short checkflush_retn
seg000:5EAA		    les	    bp,	[di+10]
seg000:5EAD		    lea	    bx,	[di+16]
seg000:5EB0		    mov	    dx,	[di+6]
seg000:5EB3		    mov	    cx,	[di+8]
seg000:5EB6		    mov	    al,	ch
seg000:5EB8		    xor	    ch,	ch
seg000:5EBA		    mov	    ah,	ch
seg000:5EBC		    mov	    ss:ALLOWED,	18h
seg000:5EC2		    test    byte ptr [di+5], 8
seg000:5EC6		    jz	    short NO_IGNORE
seg000:5EC8		    or	    ss:ALLOWED,	20h
seg000:5ECE
seg000:5ECE NO_IGNORE:				    ; CODE XREF: BUFWRITE+32j
seg000:5ECE		    push    di
seg000:5ECF		    xor	    di,	di
seg000:5ED1
seg000:5ED1 WRTAGAIN:				    ; CODE XREF: BUFWRITE+54j
seg000:5ED1		    push    di
seg000:5ED2		    push    cx
seg000:5ED3		    push    ax
seg000:5ED4		    mov	    cx,	1
seg000:5ED7		    push    bx
seg000:5ED8		    push    dx
seg000:5ED9		    push    ds
seg000:5EDA		    call    DWRITE
seg000:5EDD		    pop	    ds
seg000:5EDE		    pop	    dx
seg000:5EDF		    pop	    bx
seg000:5EE0		    pop	    ax
seg000:5EE1		    pop	    cx
seg000:5EE2		    pop	    di
seg000:5EE3		    jb	    short NOSET
seg000:5EE5		    inc	    di
seg000:5EE6
seg000:5EE6 NOSET:				    ; CODE XREF: BUFWRITE+4Fj
seg000:5EE6		    add	    dx,	ax
seg000:5EE8		    loop    WRTAGAIN
seg000:5EEA		    or	    di,	di
seg000:5EEC		    jnz	    short BWROK
seg000:5EEE		    stc
seg000:5EEF
seg000:5EEF BWROK:				    ; CODE XREF: BUFWRITE+58j
seg000:5EEF		    pop	    di
seg000:5EF0		    retn
seg000:5EF0 BUFWRITE	    endp
seg000:5EF0
seg000:5EF1 ; ---------------------------------------------------------------------------
seg000:5EF1
seg000:5EF1 _$WAIT:				    ; DATA XREF: seg000:0E9Ao
seg000:5EF1		    xor	    ax,	ax
seg000:5EF3		    xchg    ax,	ss:exit_code
seg000:5EF8		    jmp	    SYS_RET_OK
seg000:5EFB ; ---------------------------------------------------------------------------
seg000:5EFB
seg000:5EFB _$EXEC:				    ; DATA XREF: seg000:0E96o
seg000:5EFB		    push    bp
seg000:5EFC		    mov	    bp,	sp
seg000:5EFE		    sub	    sp,	26
seg000:5F01		    cmp	    al,	3
seg000:5F03		    jbe	    short Exec_Check_2
seg000:5F05
seg000:5F05 Exec_Bad_Fun:			    ; CODE XREF: seg000:5F15j
seg000:5F05		    mov	    ss:EXTERR_LOCUS, 1
seg000:5F0B		    mov	    al,	1
seg000:5F0D
seg000:5F0D Exec_Ret_Err:			    ; CODE XREF: seg000:5F39j
seg000:5F0D					    ; seg000:6030j
seg000:5F0D		    mov	    sp,	bp
seg000:5F0F		    pop	    bp
seg000:5F10		    jmp	    SYS_Ret_Err
seg000:5F13 ; ---------------------------------------------------------------------------
seg000:5F13
seg000:5F13 Exec_Check_2:			    ; CODE XREF: seg000:5F03j
seg000:5F13		    cmp	    al,	2
seg000:5F15		    jz	    short Exec_Bad_Fun
seg000:5F17		    mov	    [bp-4], bx
seg000:5F1A		    mov	    word ptr [bp-2], es
seg000:5F1D		    mov	    [bp-5], al
seg000:5F20		    mov	    byte ptr [bp-6], 0
seg000:5F24		    mov	    [bp-26], dx
seg000:5F27		    mov	    word ptr [bp-24], ds
seg000:5F2A		    mov	    si,	dx
seg000:5F2C		    call    DStrLen
seg000:5F2F		    mov	    [bp-22], cx
seg000:5F32		    xor	    al,	al
seg000:5F34		    push    bp
seg000:5F35		    call    _$OPEN
seg000:5F38		    pop	    bp
seg000:5F39		    jb	    short Exec_Ret_Err
seg000:5F3B		    mov	    [bp-8], ax
seg000:5F3E		    mov	    bx,	ax
seg000:5F40		    xor	    al,	al
seg000:5F42		    call    _$IOCTL
seg000:5F45		    jb	    short Exec_BombJ
seg000:5F47		    test    dl,	80h
seg000:5F4A		    jz	    short Exec_Check_Environ
seg000:5F4C		    mov	    al,	2
seg000:5F4E
seg000:5F4E Exec_BombJ:				    ; CODE XREF: seg000:5F45j
seg000:5F4E		    jmp	    Exec_Bomb
seg000:5F51 ; ---------------------------------------------------------------------------
seg000:5F51
seg000:5F51 BadEnv:				    ; CODE XREF: seg000:5F89j
seg000:5F51					    ; seg000:5F8Cj
seg000:5F51		    mov	    al,	0Ah
seg000:5F53		    jmp	    Exec_Bomb
seg000:5F56 ; ---------------------------------------------------------------------------
seg000:5F56
seg000:5F56 Exec_Check_Environ:			    ; CODE XREF: seg000:5F4Aj
seg000:5F56		    mov	    word ptr [bp-18], 0
seg000:5F5B		    mov	    word ptr [bp-14], 0
seg000:5F60		    test    byte ptr [bp-5], 2
seg000:5F64		    jnz	    short Exec_Read_Header
seg000:5F66		    lds	    si,	[bp-4]
seg000:5F69		    mov	    ax,	[si]
seg000:5F6B		    or	    ax,	ax
seg000:5F6D		    jnz	    short exec_scan_env
seg000:5F6F		    mov	    ds,	ss:CurrentPDB
seg000:5F74		    mov	    ax,	word ptr ds:SFT_ADDR+2
seg000:5F77		    mov	    [bp-14], ax
seg000:5F7A		    or	    ax,	ax
seg000:5F7C		    jz	    short Exec_Read_Header
seg000:5F7E
seg000:5F7E exec_scan_env:			    ; CODE XREF: seg000:5F6Dj
seg000:5F7E		    mov	    es,	ax
seg000:5F80		    xor	    di,	di
seg000:5F82		    mov	    cx,	7FFFh
seg000:5F85		    xor	    al,	al
seg000:5F87
seg000:5F87 Exec_Get_Environ_Len:		    ; CODE XREF: seg000:5F8Fj
seg000:5F87		    repne scasb
seg000:5F89		    jnz	    short BadEnv
seg000:5F8B		    dec	    cx
seg000:5F8C		    jb	    short BadEnv
seg000:5F8E		    scasb
seg000:5F8F		    jnz	    short Exec_Get_Environ_Len
seg000:5F91		    push    di
seg000:5F92		    lea	    bx,	[di+11h]
seg000:5F95		    add	    bx,	[bp-22]
seg000:5F98		    mov	    cl,	4
seg000:5F9A		    shr	    bx,	cl
seg000:5F9C		    push    es
seg000:5F9D		    call    _$ALLOC
seg000:5FA0		    pop	    ds
seg000:5FA1		    pop	    cx
seg000:5FA2		    jnb	    short Exec_Save_Environ
seg000:5FA4		    jmp	    short Exec_No_Mem
seg000:5FA6 ; ---------------------------------------------------------------------------
seg000:5FA6		    nop
seg000:5FA7
seg000:5FA7 Exec_Save_Environ:			    ; CODE XREF: seg000:5FA2j
seg000:5FA7		    mov	    es,	ax
seg000:5FA9		    mov	    [bp-14], ax
seg000:5FAC		    xor	    si,	si
seg000:5FAE		    mov	    di,	si
seg000:5FB0		    rep	movsb
seg000:5FB2		    mov	    ax,	1
seg000:5FB5		    stosw
seg000:5FB6		    lds	    si,	[bp-26]
seg000:5FB9		    mov	    cx,	[bp-22]
seg000:5FBC		    rep	movsb
seg000:5FBE
seg000:5FBE Exec_Read_Header:			    ; CODE XREF: seg000:5F64j
seg000:5FBE					    ; seg000:5F7Cj
seg000:5FBE		    push    ss
seg000:5FBF		    pop	    ds
seg000:5FC0		    mov	    cx,	26
seg000:5FC3		    mov	    dx,	offset exec_signature
seg000:5FC6		    push    es
seg000:5FC7		    push    ds
seg000:5FC8		    call    ExecRead
seg000:5FCB		    pop	    ds
seg000:5FCC		    pop	    es
seg000:5FCD		    jb	    short Exec_Bad_File
seg000:5FCF		    or	    ax,	ax
seg000:5FD1		    jz	    short Exec_Bad_File
seg000:5FD3		    cmp	    ax,	26
seg000:5FD6		    jnz	    short Exec_Com_Filej
seg000:5FD8		    test    ds:exec_max_BSS, 0FFFFh
seg000:5FDE		    jnz	    short Exec_Check_Sig
seg000:5FE0		    mov	    byte ptr [bp-6], 0FFh
seg000:5FE4
seg000:5FE4 Exec_Check_Sig:			    ; CODE XREF: seg000:5FDEj
seg000:5FE4		    mov	    ax,	ds:exec_signature
seg000:5FE7		    cmp	    ax,	5A4Dh
seg000:5FEA		    jz	    short Exec_Save_Start
seg000:5FEC		    cmp	    ax,	4D5Ah
seg000:5FEF		    jz	    short Exec_Save_Start
seg000:5FF1
seg000:5FF1 Exec_Com_Filej:			    ; CODE XREF: seg000:5FD6j
seg000:5FF1		    jmp	    Exec_Com_file
seg000:5FF4 ; ---------------------------------------------------------------------------
seg000:5FF4
seg000:5FF4 Exec_Save_Start:			    ; CODE XREF: seg000:5FEAj
seg000:5FF4					    ; seg000:5FEFj
seg000:5FF4		    mov	    ax,	ds:exec_pages
seg000:5FF7		    mov	    cl,	5
seg000:5FF9		    shl	    ax,	cl
seg000:5FFB		    sub	    ax,	ds:exec_par_dir
seg000:5FFF		    mov	    [bp-12], ax
seg000:6002		    test    byte ptr [bp-5], 2
seg000:6006		    jz	    short exec_allocate
seg000:6008		    les	    di,	[bp-4]
seg000:600B		    mov	    ax,	es:[di]
seg000:600E		    mov	    [bp-20], ax
seg000:6011		    mov	    ax,	es:[di+2]
seg000:6015		    mov	    [bp-10], ax
seg000:6018		    jmp	    short Exec_Find_Res
seg000:601A ; ---------------------------------------------------------------------------
seg000:601A
seg000:601A Exec_No_Mem:			    ; CODE XREF: seg000:5FA4j
seg000:601A					    ; seg000:6043j ...
seg000:601A		    mov	    al,	8
seg000:601C		    jmp	    short Exec_Bomb
seg000:601E ; ---------------------------------------------------------------------------
seg000:601E
seg000:601E Exec_Bad_File:			    ; CODE XREF: seg000:5FCDj
seg000:601E					    ; seg000:5FD1j ...
seg000:601E		    mov	    al,	0Bh
seg000:6020
seg000:6020 Exec_Bomb:				    ; CODE XREF: seg000:Exec_BombJj
seg000:6020					    ; seg000:5F53j ...
seg000:6020		    mov	    bx,	[bp-8]
seg000:6023		    call    Exec_Dealloc
seg000:6026		    call    LcritDisk
seg000:6029		    push    ax
seg000:602A		    push    bp
seg000:602B		    call    _$CLOSE
seg000:602E		    pop	    bp
seg000:602F		    pop	    ax
seg000:6030		    jmp	    Exec_Ret_Err
seg000:6033 ; ---------------------------------------------------------------------------
seg000:6033
seg000:6033 exec_allocate:			    ; CODE XREF: seg000:6006j
seg000:6033		    push    ax
seg000:6034		    mov	    bx,	0FFFFh
seg000:6037		    push    ds
seg000:6038		    call    _$ALLOC
seg000:603B		    pop	    ds
seg000:603C		    pop	    ax
seg000:603D		    add	    ax,	10h
seg000:6040		    cmp	    bx,	11h
seg000:6043		    jb	    short Exec_No_Mem
seg000:6045		    cmp	    ax,	bx
seg000:6047		    ja	    short Exec_No_Mem
seg000:6049		    test    byte ptr [bp-6], 0FFh
seg000:604D		    jnz	    short Exec_BX_Max
seg000:604F		    add	    ax,	ds:exec_min_BSS
seg000:6053		    jb	    short Exec_No_Mem
seg000:6055		    cmp	    ax,	bx
seg000:6057		    ja	    short Exec_No_Mem
seg000:6059		    sub	    ax,	ds:exec_min_BSS
seg000:605D		    add	    ax,	ds:exec_max_BSS
seg000:6061		    jb	    short Exec_BX_Max
seg000:6063		    cmp	    ax,	bx
seg000:6065		    jbe	    short Exec_Got_Block
seg000:6067
seg000:6067 Exec_BX_Max:			    ; CODE XREF: seg000:604Dj
seg000:6067					    ; seg000:6061j
seg000:6067		    mov	    ax,	bx
seg000:6069
seg000:6069 Exec_Got_Block:			    ; CODE XREF: seg000:6065j
seg000:6069		    push    ds
seg000:606A		    mov	    bx,	ax
seg000:606C		    mov	    [bp-16], bx
seg000:606F		    call    _$ALLOC
seg000:6072		    pop	    ds
seg000:6073		    jb	    short Exec_No_Mem
seg000:6075		    mov	    [bp-18], ax
seg000:6078		    add	    ax,	10h
seg000:607B		    test    byte ptr [bp-6], 0FFh
seg000:607F		    jz	    short Exec_Use_Ax
seg000:6081		    add	    ax,	[bp-16]
seg000:6084		    sub	    ax,	[bp-12]
seg000:6087		    sub	    ax,	10h
seg000:608A
seg000:608A Exec_Use_Ax:			    ; CODE XREF: seg000:607Fj
seg000:608A		    mov	    [bp-10], ax
seg000:608D		    mov	    [bp-20], ax
seg000:6090
seg000:6090 Exec_Find_Res:			    ; CODE XREF: seg000:6018j
seg000:6090		    mov	    dx,	ds:exec_par_dir
seg000:6094		    push    dx
seg000:6095		    mov	    cl,	4
seg000:6097		    shl	    dx,	cl
seg000:6099		    pop	    ax
seg000:609A		    mov	    cl,	12
seg000:609C		    shr	    ax,	cl
seg000:609E		    mov	    cx,	ax
seg000:60A0		    mov	    bx,	[bp-8]
seg000:60A3		    push    ds
seg000:60A4		    xor	    al,	al
seg000:60A6		    call    _$LSEEK
seg000:60A9		    pop	    ds
seg000:60AA		    jnb	    short exec_big_read
seg000:60AC		    jmp	    Exec_Bomb
seg000:60AF ; ---------------------------------------------------------------------------
seg000:60AF
seg000:60AF exec_big_read:			    ; CODE XREF: seg000:60AAj
seg000:60AF					    ; seg000:60E8j
seg000:60AF		    mov	    bx,	[bp-12]
seg000:60B2		    cmp	    bx,	1000h
seg000:60B6		    jb	    short Exec_Read_OK
seg000:60B8		    mov	    bx,	0FE0h
seg000:60BB
seg000:60BB Exec_Read_OK:			    ; CODE XREF: seg000:60B6j
seg000:60BB		    sub	    [bp-12], bx
seg000:60BE		    push    bx
seg000:60BF		    mov	    cl,	4
seg000:60C1		    shl	    bx,	cl
seg000:60C3		    mov	    cx,	bx
seg000:60C5		    push    ds
seg000:60C6		    mov	    ds,	word ptr [bp-20]
seg000:60C9		    xor	    dx,	dx
seg000:60CB		    push    cx
seg000:60CC		    call    ExecRead
seg000:60CF		    pop	    cx
seg000:60D0		    pop	    ds
seg000:60D1		    jb	    short Exec_Bad_FileJ
seg000:60D3		    cmp	    cx,	ax
seg000:60D5		    pop	    bx
seg000:60D6		    jz	    short ExecCheckEnd
seg000:60D8		    sub	    cx,	ax
seg000:60DA		    cmp	    cx,	512
seg000:60DE		    jnb	    short Exec_Bad_FileJ
seg000:60E0
seg000:60E0 ExecCheckEnd:			    ; CODE XREF: seg000:60D6j
seg000:60E0		    add	    [bp-20], bx
seg000:60E3		    test    word ptr [bp-12], 0FFFFh
seg000:60E8		    jnz	    short exec_big_read
seg000:60EA		    mov	    cx,	[bp-10]
seg000:60ED		    mov	    ax,	ds:exec_SS
seg000:60F0		    add	    ax,	cx
seg000:60F2		    mov	    ds:exec_init_ss, ax
seg000:60F5		    mov	    ax,	ds:exec_SP
seg000:60F8		    mov	    ds:exec_init_sp, ax
seg000:60FB		    les	    ax,	dword ptr ds:exec_IP
seg000:60FF		    mov	    ds:exec_init_ip, ax
seg000:6102		    mov	    ax,	es
seg000:6104		    add	    ax,	cx
seg000:6106		    mov	    ds:exec_init_cs, ax
seg000:6109		    xor	    cx,	cx
seg000:610B		    mov	    dx,	ds:exec_rle_table
seg000:610F		    mov	    bx,	[bp-8]
seg000:6112		    push    ds
seg000:6113		    xor	    ax,	ax
seg000:6115		    call    _$LSEEK
seg000:6118		    pop	    ds
seg000:6119		    jnb	    short Exec_Get_Entries
seg000:611B
seg000:611B Exec_Bad_FileJ:			    ; CODE XREF: seg000:60D1j
seg000:611B					    ; seg000:60DEj ...
seg000:611B		    jmp	    Exec_Bad_File
seg000:611E ; ---------------------------------------------------------------------------
seg000:611E
seg000:611E Exec_Get_Entries:			    ; CODE XREF: seg000:6119j
seg000:611E		    mov	    dx,	ds:exec_rle_count
seg000:6122
seg000:6122 exec_read_reloc:			    ; CODE XREF: seg000:6151j
seg000:6122		    push    dx
seg000:6123		    mov	    dx,	offset OPENBUF
seg000:6126		    mov	    cx,	388
seg000:6129		    push    ds
seg000:612A		    call    ExecRead
seg000:612D		    pop	    es
seg000:612E		    pop	    dx
seg000:612F		    jb	    short Exec_Bad_FileJ
seg000:6131		    mov	    cx,	97
seg000:6134		    mov	    di,	offset OPENBUF
seg000:6137		    mov	    si,	[bp-10]
seg000:613A
seg000:613A exec_reloc_one:			    ; CODE XREF: seg000:614Dj
seg000:613A		    or	    dx,	dx
seg000:613C		    jz	    short Exec_Set_PDBJ
seg000:613E		    lds	    bx,	es:[di]
seg000:6141		    mov	    ax,	ds
seg000:6143		    add	    ax,	si
seg000:6145		    mov	    ds,	ax
seg000:6147		    add	    [bx], si
seg000:6149		    add	    di,	4
seg000:614C		    dec	    dx
seg000:614D		    loop    exec_reloc_one
seg000:614F		    push    es
seg000:6150		    pop	    ds
seg000:6151		    jmp	    short exec_read_reloc
seg000:6153 ; ---------------------------------------------------------------------------
seg000:6153
seg000:6153 Exec_Set_PDBJ:			    ; CODE XREF: seg000:613Cj
seg000:6153		    jmp	    Exec_Set_PDB
seg000:6156 ; ---------------------------------------------------------------------------
seg000:6156
seg000:6156 Exec_No_Memj:			    ; CODE XREF: seg000:6173j
seg000:6156					    ; seg000:61B6j
seg000:6156		    jmp	    Exec_No_Mem
seg000:6159 ; ---------------------------------------------------------------------------
seg000:6159
seg000:6159 Exec_Com_file:			    ; CODE XREF: seg000:Exec_Com_Filejj
seg000:6159		    test    byte ptr [bp-5], 2
seg000:615D		    jz	    short Exec_Alloc_Com_File
seg000:615F		    lds	    si,	[bp-4]
seg000:6162		    lodsw
seg000:6163		    mov	    [bp-20], ax
seg000:6166		    mov	    ax,	0FFFFh
seg000:6169		    jmp	    short Exec_Read_Block
seg000:616B ; ---------------------------------------------------------------------------
seg000:616B
seg000:616B Exec_Alloc_Com_File:		    ; CODE XREF: seg000:615Dj
seg000:616B		    mov	    bx,	0FFFFh
seg000:616E		    call    _$ALLOC
seg000:6171		    or	    bx,	bx
seg000:6173		    jz	    short Exec_No_Memj
seg000:6175		    mov	    [bp-16], bx
seg000:6178		    push    bx
seg000:6179		    call    _$ALLOC
seg000:617C		    pop	    bx
seg000:617D		    mov	    [bp-18], ax
seg000:6180		    add	    ax,	10h
seg000:6183		    mov	    [bp-20], ax
seg000:6186		    xor	    ax,	ax
seg000:6188		    cmp	    bx,	1000h
seg000:618C		    jnb	    short Exec_Read_Com
seg000:618E		    mov	    ax,	bx
seg000:6190		    mov	    cl,	4
seg000:6192		    shl	    ax,	cl
seg000:6194
seg000:6194 Exec_Read_Com:			    ; CODE XREF: seg000:618Cj
seg000:6194		    sub	    ax,	100h
seg000:6197
seg000:6197 Exec_Read_Block:			    ; CODE XREF: seg000:6169j
seg000:6197		    push    ax
seg000:6198		    mov	    bx,	[bp-8]
seg000:619B		    xor	    cx,	cx
seg000:619D		    mov	    dx,	cx
seg000:619F		    xor	    ax,	ax
seg000:61A1		    call    _$LSEEK
seg000:61A4		    pop	    cx
seg000:61A5		    mov	    ds,	word ptr [bp-20]
seg000:61A8		    xor	    dx,	dx
seg000:61AA		    push    cx
seg000:61AB		    call    ExecRead
seg000:61AE		    pop	    si
seg000:61AF		    jnb	    short OkRead
seg000:61B1		    jmp	    Exec_Bad_File
seg000:61B4 ; ---------------------------------------------------------------------------
seg000:61B4
seg000:61B4 OkRead:				    ; CODE XREF: seg000:61AFj
seg000:61B4		    cmp	    ax,	si
seg000:61B6		    jz	    short Exec_No_Memj
seg000:61B8		    test    byte ptr [bp-5], 2
seg000:61BC		    jnz	    short Exec_Set_PDB
seg000:61BE		    mov	    ax,	[bp-20]
seg000:61C1		    sub	    ax,	10h
seg000:61C4		    mov	    ss:exec_init_cs, ax
seg000:61C8		    mov	    ss:exec_init_ip, 100h
seg000:61CF		    add	    si,	0FEh
seg000:61D3		    mov	    ss:exec_init_sp, si
seg000:61D8		    mov	    ss:exec_init_ss, ax
seg000:61DC		    mov	    ds,	ax
seg000:61DE		    mov	    word ptr [si], 0
seg000:61E2
seg000:61E2 Exec_Set_PDB:			    ; CODE XREF: seg000:Exec_Set_PDBJj
seg000:61E2					    ; seg000:61BCj
seg000:61E2		    mov	    bx,	[bp-8]
seg000:61E5		    call    Exec_Dealloc
seg000:61E8		    push    bp
seg000:61E9		    call    _$CLOSE
seg000:61EC		    pop	    bp
seg000:61ED		    call    Exec_Alloc
seg000:61F0		    test    byte ptr [bp-5], 2
seg000:61F4		    jz	    short Exec_Build_Header
seg000:61F6		    mov	    sp,	bp
seg000:61F8		    pop	    bp
seg000:61F9		    jmp	    SYS_RET_OK
seg000:61FC ; ---------------------------------------------------------------------------
seg000:61FC
seg000:61FC Exec_Build_Header:			    ; CODE XREF: seg000:61F4j
seg000:61FC		    mov	    dx,	[bp-18]
seg000:61FF		    mov	    si,	1
seg000:6202		    mov	    ax,	[bp-14]
seg000:6205		    or	    ax,	ax
seg000:6207		    jz	    short No_Owner
seg000:6209		    dec	    ax
seg000:620A		    mov	    ds,	ax
seg000:620C		    mov	    [si], dx
seg000:620E
seg000:620E No_Owner:				    ; CODE XREF: seg000:6207j
seg000:620E		    mov	    ax,	[bp-18]
seg000:6211		    dec	    ax
seg000:6212		    mov	    ds,	ax
seg000:6214		    mov	    [si], dx
seg000:6216		    push    dx
seg000:6217		    mov	    si,	[bp-16]
seg000:621A		    add	    si,	dx
seg000:621C		    call    _$DUP_PDB
seg000:621F		    pop	    dx
seg000:6220		    push    word ptr [bp-14]
seg000:6223		    pop	    word ptr es:SFT_ADDR+2
seg000:6228		    lds	    si,	[bp-4]
seg000:622B		    push    ds
seg000:622C		    push    si
seg000:622D		    lds	    si,	[si+6]
seg000:6230		    mov	    cx,	12
seg000:6233		    push    cx
seg000:6234		    mov	    di,	5Ch
seg000:6237		    mov	    bl,	[si]
seg000:6239		    rep	movsb
seg000:623B		    xor	    ax,	ax
seg000:623D		    stosw
seg000:623E		    stosw
seg000:623F		    pop	    cx
seg000:6240		    pop	    si
seg000:6241		    pop	    ds
seg000:6242		    push    ds
seg000:6243		    push    si
seg000:6244		    lds	    si,	[si+0Ah]
seg000:6247		    mov	    bh,	[si]
seg000:6249		    rep	movsb
seg000:624B		    stosw
seg000:624C		    stosw
seg000:624D		    pop	    si
seg000:624E		    pop	    ds
seg000:624F		    lds	    si,	[si+2]
seg000:6252		    or	    cl,	80h
seg000:6255		    mov	    di,	cx
seg000:6257		    rep	movsb
seg000:6259		    dec	    cl
seg000:625B		    mov	    al,	bh
seg000:625D		    xor	    bh,	bh
seg000:625F		    call    GETVISDRV
seg000:6262		    jnb	    short Exec_BL
seg000:6264		    mov	    bh,	cl
seg000:6266
seg000:6266 Exec_BL:				    ; CODE XREF: seg000:6262j
seg000:6266		    mov	    al,	bl
seg000:6268		    xor	    bl,	bl
seg000:626A		    call    GETVISDRV
seg000:626D		    jnb	    short exec_Set_Return
seg000:626F		    mov	    bl,	cl
seg000:6271
seg000:6271 exec_Set_Return:			    ; CODE XREF: seg000:626Dj
seg000:6271		    call    Get_User_Stack
seg000:6274		    push    word ptr [si+14h]
seg000:6277		    push    word ptr [si+12h]
seg000:627A		    push    word ptr [si+14h]
seg000:627D		    push    word ptr [si+12h]
seg000:6280		    pop	    es:PDB_EXIT
seg000:6285		    pop	    es:PDB_EXIT_2
seg000:628A		    xor	    ax,	ax
seg000:628C		    mov	    ds,	ax
seg000:628E		    pop	    word ptr ds:ShChk
seg000:6292		    pop	    word ptr ds:ShChk+2
seg000:6296		    mov	    ss:DMAADD, 80h
seg000:629D		    mov	    ds,	ss:CurrentPDB
seg000:62A2		    mov	    ss:DMAADD_2, ds
seg000:62A7		    test    byte ptr [bp-5], 1
seg000:62AB		    jz	    short exec_go
seg000:62AD		    lds	    si,	dword ptr ss:exec_init_sp
seg000:62B2		    les	    di,	[bp-4]
seg000:62B5		    mov	    word ptr es:[di+10h], ds
seg000:62B9		    dec	    si
seg000:62BA		    dec	    si
seg000:62BB		    mov	    [si], bx
seg000:62BD		    mov	    es:[di+0Eh], si
seg000:62C1		    lds	    ax,	dword ptr ss:exec_init_ip
seg000:62C6		    mov	    word ptr es:[di+14h], ds
seg000:62CA		    mov	    es:[di+12h], ax
seg000:62CE		    mov	    sp,	bp
seg000:62D0		    pop	    bp
seg000:62D1		    jmp	    SYS_RET_OK
seg000:62D4 ; ---------------------------------------------------------------------------
seg000:62D4
seg000:62D4 exec_go:				    ; CODE XREF: seg000:62ABj
seg000:62D4		    lds	    si,	dword ptr ss:exec_init_ip
seg000:62D9		    les	    di,	dword ptr ss:exec_init_sp
seg000:62DE		    mov	    ax,	es
seg000:62E0
seg000:62E0 Xfer_To_User:
seg000:62E0		    cli
seg000:62E1		    mov	    ss:INDOS, 0
seg000:62E7		    mov	    ss,	ax
seg000:62E9		    mov	    sp,	di
seg000:62EB		    sti
seg000:62EC		    push    ds
seg000:62ED		    push    si
seg000:62EE		    mov	    es,	dx
seg000:62F0		    mov	    ds,	dx
seg000:62F2		    mov	    ax,	bx
seg000:62F4		    retf
seg000:62F5
seg000:62F5 ; =============== S	U B R O	U T I N	E =======================================
seg000:62F5
seg000:62F5
seg000:62F5 ExecRead	    proc near		    ; CODE XREF: seg000:5FC8p
seg000:62F5					    ; seg000:60CCp ...
seg000:62F5		    call    Exec_Dealloc
seg000:62F8		    mov	    bx,	[bp-8]
seg000:62FB		    push    bp
seg000:62FC		    call    _$READ
seg000:62FF		    pop	    bp
seg000:6300		    call    Exec_Alloc
seg000:6303		    retn
seg000:6303 ExecRead	    endp
seg000:6303
seg000:6304
seg000:6304 ; =============== S	U B R O	U T I N	E =======================================
seg000:6304
seg000:6304
seg000:6304 Exec_Dealloc    proc near		    ; CODE XREF: seg000:6023p
seg000:6304					    ; seg000:61E5p ...
seg000:6304		    push    bx
seg000:6305		    mov	    bx,	0
seg000:6308		    call    EcritDisk
seg000:630B		    call    ChangeOwners
seg000:630E		    pop	    bx
seg000:630F		    retn
seg000:630F Exec_Dealloc    endp
seg000:630F
seg000:6310
seg000:6310 ; =============== S	U B R O	U T I N	E =======================================
seg000:6310
seg000:6310
seg000:6310 Exec_Alloc	    proc near		    ; CODE XREF: seg000:61EDp
seg000:6310					    ; ExecRead+Bp
seg000:6310		    push    bx
seg000:6311		    mov	    bx,	cs:CurrentPDB
seg000:6316		    call    ChangeOwners
seg000:6319		    call    LcritDisk
seg000:631C		    pop	    bx
seg000:631D		    retn
seg000:631D Exec_Alloc	    endp
seg000:631D
seg000:631E
seg000:631E ; =============== S	U B R O	U T I N	E =======================================
seg000:631E
seg000:631E
seg000:631E ChangeOwners    proc near		    ; CODE XREF: Exec_Dealloc+7p
seg000:631E					    ; Exec_Alloc+6p
seg000:631E		    pushf
seg000:631F		    push    ax
seg000:6320		    mov	    ax,	[bp-14]
seg000:6323		    call    ChangeOwner
seg000:6326		    mov	    ax,	[bp-18]
seg000:6329		    call    ChangeOwner
seg000:632C		    pop	    ax
seg000:632D		    popf
seg000:632E
seg000:632E chgown_retn:			    ; CODE XREF: ChangeOwner+2j
seg000:632E		    retn
seg000:632E ChangeOwners    endp
seg000:632E
seg000:632F
seg000:632F ; =============== S	U B R O	U T I N	E =======================================
seg000:632F
seg000:632F
seg000:632F ChangeOwner	    proc near		    ; CODE XREF: ChangeOwners+5p
seg000:632F					    ; ChangeOwners+Bp
seg000:632F		    or	    ax,	ax
seg000:6331		    jz	    short chgown_retn
seg000:6333		    dec	    ax
seg000:6334		    push    ds
seg000:6335		    mov	    ds,	ax
seg000:6337		    mov	    word ptr ds:START+1, bx
seg000:633B		    pop	    ds
seg000:633C		    retn
seg000:633C ChangeOwner	    endp
seg000:633C
seg000:633D ; ---------------------------------------------------------------------------
seg000:633D
seg000:633D _$KEEP_PROCESS:			    ; DATA XREF: seg000:0E62o
seg000:633D		    push    ax
seg000:633E		    mov	    byte ptr ss:cMeta+2, 3
seg000:6344		    mov	    es,	ss:CurrentPDB
seg000:6349		    cmp	    dx,	6
seg000:634C		    jnb	    short Keep_shrink
seg000:634E		    mov	    dx,	6
seg000:6351
seg000:6351 Keep_shrink:			    ; CODE XREF: seg000:634Cj
seg000:6351		    mov	    bx,	dx
seg000:6353		    push    bx
seg000:6354		    push    es
seg000:6355		    call    _$SETBLOCK
seg000:6358		    pop	    ds
seg000:6359		    pop	    bx
seg000:635A		    jb	    short Keep_Done
seg000:635C		    mov	    ax,	ds
seg000:635E		    add	    ax,	bx
seg000:6360		    mov	    word ptr ds:START+2, ax
seg000:6363
seg000:6363 Keep_Done:				    ; CODE XREF: seg000:635Aj
seg000:6363		    pop	    ax
seg000:6364		    jmp	    short exit_inner
seg000:6366 ; ---------------------------------------------------------------------------
seg000:6366
seg000:6366 STAY_RESIDENT:			    ; DATA XREF: DOSINIT+1D4o
seg000:6366		    mov	    ax,	3100h
seg000:6369		    add	    dx,	15
seg000:636C		    rcr	    dx,	1
seg000:636E		    mov	    cl,	3
seg000:6370		    shr	    dx,	cl
seg000:6372		    jmp	    COMMAND
seg000:6375 ; ---------------------------------------------------------------------------
seg000:6375
seg000:6375 _$EXIT:				    ; DATA XREF: seg000:0E98o
seg000:6375		    xor	    ah,	ah
seg000:6377		    xchg    ah,	ss:DidCTRLC
seg000:637C		    or	    ah,	ah
seg000:637E		    mov	    byte ptr ss:cMeta+2, 0
seg000:6384		    jz	    short exit_inner
seg000:6386		    mov	    byte ptr ss:cMeta+2, 1
seg000:638C ; START OF FUNCTION	CHUNK FOR FATALC
seg000:638C
seg000:638C exit_inner:				    ; CODE XREF: FATALC+D6j
seg000:638C					    ; seg000:6364j ...
seg000:638C		    call    Get_User_Stack
seg000:638F		    push    ss:CurrentPDB
seg000:6394		    pop	    word ptr [si+14h]
seg000:6397		    jmp	    short abort_inner
seg000:6397 ; END OF FUNCTION CHUNK FOR	FATALC
seg000:6399 ; ---------------------------------------------------------------------------
seg000:6399
seg000:6399 _$ABORT:				    ; DATA XREF: seg000:DISPATCHo
seg000:6399		    xor	    al,	al
seg000:639B		    mov	    byte ptr ss:cMeta+2, 0
seg000:63A1 ; START OF FUNCTION	CHUNK FOR FATALC
seg000:63A1
seg000:63A1 abort_inner:			    ; CODE XREF: FATALC+BE6j
seg000:63A1		    mov	    ah,	byte ptr ss:cMeta+2
seg000:63A6		    mov	    ss:exit_code, ax
seg000:63AA		    call    Get_User_Stack
seg000:63AD		    mov	    ds,	word ptr [si+14h]
seg000:63B0		    xor	    ax,	ax
seg000:63B2		    mov	    es,	ax
seg000:63B4		    mov	    si,	0Ah
seg000:63B7		    mov	    di,	88h
seg000:63BA		    movsw
seg000:63BB		    movsw
seg000:63BC		    movsw
seg000:63BD		    movsw
seg000:63BE		    movsw
seg000:63BF		    movsw
seg000:63C0		    jmp	    reset_environment
seg000:63C0 ; END OF FUNCTION CHUNK FOR	FATALC
seg000:63C3
seg000:63C3 ; =============== S	U B R O	U T I N	E =======================================
seg000:63C3
seg000:63C3
seg000:63C3 arena_free_process proc near	    ; CODE XREF: FATALC+10Cp
seg000:63C3		    mov	    di,	0
seg000:63C6		    mov	    ax,	ss:arena_head
seg000:63CA		    call    check_signature
seg000:63CD
seg000:63CD arena_free_process_loop:		    ; CODE XREF: arena_free_process+21j
seg000:63CD		    jnb	    short afp_chksign_ok
seg000:63CF
seg000:63CF afp_retn:				    ; CODE XREF: arena_free_process+1Cj
seg000:63CF					    ; check_signature+6j ...
seg000:63CF		    retn
seg000:63D0 ; ---------------------------------------------------------------------------
seg000:63D0
seg000:63D0 afp_chksign_ok:			    ; CODE XREF: arena_free_process:arena_free_process_loopj
seg000:63D0		    push    es
seg000:63D1		    pop	    ds
seg000:63D2		    cmp	    word ptr ds:START+1, bx
seg000:63D6		    jnz	    short arena_free_next
seg000:63D8		    mov	    word ptr ds:START+1, di
seg000:63DC
seg000:63DC arena_free_next:			    ; CODE XREF: arena_free_process+13j
seg000:63DC		    cmp	    byte ptr [di], 5Ah
seg000:63DF		    jz	    short afp_retn
seg000:63E1		    call    arena_next
seg000:63E4		    jmp	    short arena_free_process_loop
seg000:63E4 arena_free_process endp
seg000:63E4
seg000:63E6
seg000:63E6 ; =============== S	U B R O	U T I N	E =======================================
seg000:63E6
seg000:63E6
seg000:63E6 arena_next	    proc near		    ; CODE XREF: arena_free_process+1Ep
seg000:63E6					    ; Coalesce+5p ...
seg000:63E6		    mov	    ax,	ds
seg000:63E8		    add	    ax,	ds:ARENA_SIZE
seg000:63EC		    inc	    ax
seg000:63EC arena_next	    endp
seg000:63EC
seg000:63ED
seg000:63ED ; =============== S	U B R O	U T I N	E =======================================
seg000:63ED
seg000:63ED
seg000:63ED check_signature proc near		    ; CODE XREF: arena_free_process+7p
seg000:63ED					    ; _$ALLOC+18p ...
seg000:63ED		    mov	    es,	ax
seg000:63EF		    cmp	    byte ptr es:[di], 4Dh ; 'M'
seg000:63F3		    jz	    short afp_retn
seg000:63F5		    cmp	    byte ptr es:[di], 5Ah ; 'Z'
seg000:63F9		    jz	    short afp_retn
seg000:63FB		    stc
seg000:63FC
seg000:63FC COALESCE_RETN:			    ; CODE XREF: Coalesce+3j
seg000:63FC					    ; Coalesce+8j ...
seg000:63FC		    retn
seg000:63FC check_signature endp
seg000:63FC
seg000:63FD
seg000:63FD ; =============== S	U B R O	U T I N	E =======================================
seg000:63FD
seg000:63FD
seg000:63FD Coalesce	    proc near		    ; CODE XREF: Coalesce+20j
seg000:63FD					    ; _$ALLOC:alloc_freep ...
seg000:63FD		    cmp	    byte ptr [di], 5Ah
seg000:6400		    jz	    short COALESCE_RETN
seg000:6402		    call    arena_next
seg000:6405		    jb	    short COALESCE_RETN
seg000:6407		    cmp	    word ptr es:START+1, di
seg000:640C		    jnz	    short COALESCE_RETN
seg000:640E		    mov	    cx,	es:ARENA_SIZE
seg000:6413		    inc	    cx
seg000:6414		    add	    ds:ARENA_SIZE, cx
seg000:6418		    mov	    cl,	es:[di]
seg000:641B		    mov	    [di], cl
seg000:641D		    jmp	    short Coalesce
seg000:641D Coalesce	    endp
seg000:641D
seg000:641F
seg000:641F ; =============== S	U B R O	U T I N	E =======================================
seg000:641F
seg000:641F
seg000:641F _$ALLOC	    proc near		    ; CODE XREF: seg000:5F9Dp
seg000:641F					    ; seg000:6038p ...
seg000:641F		    call    EcritDisk
seg000:6422		    xor	    ax,	ax
seg000:6424		    mov	    di,	ax
seg000:6426		    mov	    ss:FirstArena, ax
seg000:642A		    mov	    ss:BestArena, ax
seg000:642E		    mov	    ss:LastArena, ax
seg000:6432		    push    ax
seg000:6433		    mov	    ax,	ss:arena_head
seg000:6437		    call    check_signature
seg000:643A		    jb	    short alloc_err
seg000:643C
seg000:643C alloc_scan:				    ; CODE XREF: _$ALLOC+2Dj
seg000:643C		    push    es
seg000:643D		    pop	    ds
seg000:643E		    cmp	    word ptr ds:START+1, di
seg000:6442		    jz	    short alloc_free
seg000:6444
seg000:6444 alloc_next:				    ; CODE XREF: _$ALLOC+61j
seg000:6444					    ; _$ALLOC+90j
seg000:6444		    cmp	    byte ptr [di], 5Ah
seg000:6447		    jz	    short alloc_end
seg000:6449		    call    arena_next
seg000:644C		    jnb	    short alloc_scan
seg000:644E
seg000:644E alloc_err:				    ; CODE XREF: _$ALLOC+1Bj
seg000:644E					    ; _$ALLOC+51j
seg000:644E		    pop	    ax
seg000:644F
seg000:644F alloc_trashed:			    ; CODE XREF: _$SETBLOCK:setblock_badj
seg000:644F		    call    LcritDisk
seg000:6452		    mov	    al,	7
seg000:6454
seg000:6454 alloc_errj:				    ; CODE XREF: _$ALLOC+4Cj
seg000:6454		    jmp	    SYS_Ret_Err
seg000:6457 ; ---------------------------------------------------------------------------
seg000:6457
seg000:6457 alloc_end:				    ; CODE XREF: _$ALLOC+28j
seg000:6457		    cmp	    ss:FirstArena, 0
seg000:645D		    jnz	    short alloc_do_split
seg000:645F
seg000:645F alloc_fail:				    ; CODE XREF: _$SETBLOCK+21j
seg000:645F		    call    Get_User_Stack
seg000:6462		    pop	    bx
seg000:6463		    mov	    [si+2], bx
seg000:6466		    call    LcritDisk
seg000:6469		    mov	    al,	8
seg000:646B		    jmp	    short alloc_errj
seg000:646D ; ---------------------------------------------------------------------------
seg000:646D
seg000:646D alloc_free:				    ; CODE XREF: _$ALLOC+23j
seg000:646D		    call    Coalesce
seg000:6470		    jb	    short alloc_err
seg000:6472		    mov	    cx,	ds:ARENA_SIZE
seg000:6476		    pop	    dx
seg000:6477		    cmp	    cx,	dx
seg000:6479		    jbe	    short alloc_test
seg000:647B		    mov	    dx,	cx
seg000:647D
seg000:647D alloc_test:				    ; CODE XREF: _$ALLOC+5Aj
seg000:647D		    push    dx
seg000:647E		    cmp	    bx,	cx
seg000:6480		    ja	    short alloc_next
seg000:6482		    cmp	    ss:FirstArena, 0
seg000:6488		    jnz	    short alloc_best
seg000:648A		    mov	    ss:FirstArena, ds
seg000:648F
seg000:648F alloc_best:				    ; CODE XREF: _$ALLOC+69j
seg000:648F		    cmp	    ss:BestArena, 0
seg000:6495		    jz	    short alloc_make_best
seg000:6497		    push    es
seg000:6498		    mov	    es,	ss:BestArena
seg000:649D		    cmp	    es:ARENA_SIZE, cx
seg000:64A2		    pop	    es
seg000:64A3		    jbe	    short alloc_last
seg000:64A5
seg000:64A5 alloc_make_best:			    ; CODE XREF: _$ALLOC+76j
seg000:64A5		    mov	    ss:BestArena, ds
seg000:64AA
seg000:64AA alloc_last:				    ; CODE XREF: _$ALLOC+84j
seg000:64AA		    mov	    ss:LastArena, ds
seg000:64AF		    jmp	    short alloc_next
seg000:64B1 ; ---------------------------------------------------------------------------
seg000:64B1
seg000:64B1 alloc_do_split_high:		    ; CODE XREF: _$ALLOC+B1j
seg000:64B1		    mov	    ds,	ss:LastArena
seg000:64B6		    mov	    cx,	ds:ARENA_SIZE
seg000:64BA		    sub	    cx,	bx
seg000:64BC		    mov	    dx,	ds
seg000:64BE		    jz	    short alloc_set_owner
seg000:64C0		    add	    dx,	cx
seg000:64C2		    mov	    es,	dx
seg000:64C4		    dec	    cx
seg000:64C5		    xchg    bx,	cx
seg000:64C7		    jmp	    short alloc_set_sizes
seg000:64C9 ; ---------------------------------------------------------------------------
seg000:64C9		    nop
seg000:64CA
seg000:64CA alloc_do_split:			    ; CODE XREF: _$ALLOC+3Ej
seg000:64CA		    cmp	    ss:AllocMethod, 1
seg000:64D0		    ja	    short alloc_do_split_high
seg000:64D2		    mov	    ds,	ss:FirstArena
seg000:64D7		    jb	    short alloc_get_size
seg000:64D9		    mov	    ds,	ss:BestArena
seg000:64DE
seg000:64DE alloc_get_size:			    ; CODE XREF: _$ALLOC+B8j
seg000:64DE					    ; _$SETBLOCK+1Fj
seg000:64DE		    mov	    cx,	ds:ARENA_SIZE
seg000:64E2		    sub	    cx,	bx
seg000:64E4		    mov	    ax,	ds
seg000:64E6		    mov	    dx,	ax
seg000:64E8		    jz	    short alloc_set_owner
seg000:64EA		    add	    ax,	bx
seg000:64EC		    inc	    ax
seg000:64ED		    mov	    es,	ax
seg000:64EF		    dec	    cx
seg000:64F0
seg000:64F0 alloc_set_sizes:			    ; CODE XREF: _$ALLOC+A8j
seg000:64F0		    mov	    ds:ARENA_SIZE, bx
seg000:64F4		    mov	    es:ARENA_SIZE, cx
seg000:64F9		    mov	    bl,	4Dh
seg000:64FB		    xchg    bl,	[di]
seg000:64FD		    mov	    es:[di], bl
seg000:6500		    mov	    word ptr es:START+1, di
seg000:6505
seg000:6505 alloc_set_owner:			    ; CODE XREF: _$ALLOC+9Fj
seg000:6505					    ; _$ALLOC+C9j
seg000:6505		    mov	    ds,	dx
seg000:6507		    mov	    ax,	ss:CurrentPDB
seg000:650B		    mov	    word ptr ds:START+1, ax
seg000:650E		    mov	    ax,	ds
seg000:6510		    inc	    ax
seg000:6511		    pop	    bx
seg000:6512		    call    LcritDisk
seg000:6515
seg000:6515 alloc_ok:				    ; CODE XREF: _$DEALLOC:dealloc_okj
seg000:6515		    jmp	    SYS_RET_OK
seg000:6515 _$ALLOC	    endp
seg000:6515
seg000:6518
seg000:6518 ; =============== S	U B R O	U T I N	E =======================================
seg000:6518
seg000:6518
seg000:6518 _$SETBLOCK	    proc near		    ; CODE XREF: seg000:6355p
seg000:6518					    ; DATA XREF: seg000:0E94o
seg000:6518		    call    EcritDisk
seg000:651B		    mov	    di,	0
seg000:651E		    mov	    ax,	es
seg000:6520		    dec	    ax
seg000:6521		    call    check_signature
seg000:6524		    jnb	    short setblock_grab
seg000:6526
seg000:6526 setblock_bad:			    ; CODE XREF: _$SETBLOCK+16j
seg000:6526		    jmp	    alloc_trashed
seg000:6529 ; ---------------------------------------------------------------------------
seg000:6529
seg000:6529 setblock_grab:			    ; CODE XREF: _$SETBLOCK+Cj
seg000:6529		    mov	    ds,	ax
seg000:652B		    call    Coalesce
seg000:652E		    jb	    short setblock_bad
seg000:6530		    mov	    cx,	ds:ARENA_SIZE
seg000:6534		    push    cx
seg000:6535		    cmp	    bx,	cx
seg000:6537		    jbe	    short alloc_get_size
seg000:6539		    jmp	    alloc_fail
seg000:6539 _$SETBLOCK	    endp
seg000:6539
seg000:653C
seg000:653C ; =============== S	U B R O	U T I N	E =======================================
seg000:653C
seg000:653C
seg000:653C _$DEALLOC	    proc near		    ; CODE XREF: seg000:6D7Ep
seg000:653C					    ; DATA XREF: seg000:0E92o
seg000:653C		    call    EcritDisk
seg000:653F		    mov	    di,	0
seg000:6542		    mov	    ax,	es
seg000:6544		    dec	    ax
seg000:6545		    call    check_signature
seg000:6548		    jb	    short dealloc_err
seg000:654A		    mov	    word ptr es:START+1, di
seg000:654F		    call    LcritDisk
seg000:6552
seg000:6552 dealloc_ok:				    ; CODE XREF: seg000:allocoper_okj
seg000:6552		    jmp	    short alloc_ok
seg000:6554 ; ---------------------------------------------------------------------------
seg000:6554
seg000:6554 dealloc_err:			    ; CODE XREF: _$DEALLOC+Cj
seg000:6554		    call    LcritDisk
seg000:6557		    mov	    al,	9
seg000:6559
seg000:6559 dealloc_errj:			    ; CODE XREF: seg000:656Aj
seg000:6559		    jmp	    SYS_Ret_Err
seg000:6559 _$DEALLOC	    endp
seg000:6559
seg000:655C ; ---------------------------------------------------------------------------
seg000:655C
seg000:655C _$ALLOCOPER:			    ; DATA XREF: seg000:0EB0o
seg000:655C		    cmp	    al,	1
seg000:655E		    jb	    short AllocOperGet
seg000:6560		    jz	    short AllocOperSet
seg000:6562
seg000:6562 allocoper_err:
seg000:6562		    mov	    ss:EXTERR_LOCUS, 5
seg000:6568		    mov	    al,	1
seg000:656A		    jmp	    short dealloc_errj
seg000:656C ; ---------------------------------------------------------------------------
seg000:656C
seg000:656C AllocOperGet:			    ; CODE XREF: seg000:655Ej
seg000:656C		    mov	    al,	ss:AllocMethod
seg000:6570		    xor	    ah,	ah
seg000:6572
seg000:6572 allocoper_ok:			    ; CODE XREF: seg000:6579j
seg000:6572		    jmp	    short dealloc_ok
seg000:6574 ; ---------------------------------------------------------------------------
seg000:6574
seg000:6574 AllocOperSet:			    ; CODE XREF: seg000:6560j
seg000:6574		    mov	    ss:AllocMethod, bl
seg000:6579		    jmp	    short allocoper_ok
seg000:657B ; ---------------------------------------------------------------------------
seg000:657B
seg000:657B _$ServerCall:			    ; DATA XREF: seg000:0EBAo
seg000:657B		    cmp	    al,	7
seg000:657D		    jb	    short SET_STUFF
seg000:657F		    cmp	    al,	9
seg000:6581		    jbe	    short NO_SET_ID
seg000:6583
seg000:6583 SET_STUFF:				    ; CODE XREF: seg000:657Dj
seg000:6583		    mov	    si,	dx
seg000:6585		    mov	    bx,	[si+12h]
seg000:6588		    mov	    ss:USER_ID,	bx
seg000:658D		    mov	    bx,	[si+14h]
seg000:6590		    mov	    ss:PROC_ID,	bx
seg000:6595
seg000:6595 NO_SET_ID:				    ; CODE XREF: seg000:6581j
seg000:6595		    push    ss:SERVERLEAVE
seg000:659A		    push    ss:SERVERTAB
seg000:659F		    push    ax
seg000:65A0		    call    TableDispatch
seg000:65A3		    mov	    ss:EXTERR_LOCUS, 1
seg000:65A9		    mov	    al,	1
seg000:65AB
seg000:65AB servercall_error:			    ; CODE XREF: seg000:func_errj
seg000:65AB		    jmp	    SYS_Ret_Err
seg000:65AE ; ---------------------------------------------------------------------------
seg000:65AE
seg000:65AE SERVERRETURN:			    ; DATA XREF: seg000:SERVERLEAVEo
seg000:65AE		    retn
seg000:65AF ; ---------------------------------------------------------------------------
seg000:65AF
seg000:65AF COMMIT_ALL:				    ; DATA XREF: seg000:13F3o
seg000:65AF		    xor	    bx,	bx
seg000:65B1		    push    ss
seg000:65B2		    pop	    ds
seg000:65B3		    call    EcritDisk
seg000:65B6
seg000:65B6 CommitLoop:				    ; CODE XREF: seg000:65DDj
seg000:65B6		    push    bx
seg000:65B7		    call    SFFromSFN
seg000:65BA		    jb	    short CommitDone
seg000:65BC		    cmp	    word ptr es:[di], 0
seg000:65C0		    jz	    short CommitNext
seg000:65C2		    cmp	    word ptr es:[di], 0FFFFh
seg000:65C6		    jz	    short CommitNext
seg000:65C8		    test    word ptr es:[di+5],	8000h
seg000:65CE		    jnz	    short CommitNext
seg000:65D0		    mov	    word ptr ds:THISSFT, di
seg000:65D4		    mov	    word ptr ds:THISSFT+2, es
seg000:65D8		    call    DOS_COMMIT
seg000:65DB
seg000:65DB CommitNext:				    ; CODE XREF: seg000:65C0j
seg000:65DB					    ; seg000:65C6j ...
seg000:65DB		    pop	    bx
seg000:65DC		    inc	    bx
seg000:65DD		    jmp	    short CommitLoop
seg000:65DF ; ---------------------------------------------------------------------------
seg000:65DF
seg000:65DF CommitDone:				    ; CODE XREF: seg000:65BAj
seg000:65DF		    call    LcritDisk
seg000:65E2		    pop	    bx
seg000:65E3
seg000:65E3 commit_all_return:			    ; CODE XREF: seg000:close_name_returnj
seg000:65E3		    jmp	    SYS_RET_OK
seg000:65E6 ; ---------------------------------------------------------------------------
seg000:65E6
seg000:65E6 CLOSE_NAME:				    ; DATA XREF: seg000:13F5o
seg000:65E6		    call    ss:MFTCloN
seg000:65EB
seg000:65EB CheckReturns:			    ; CODE XREF: seg000:65F6j
seg000:65EB					    ; seg000:65FDj
seg000:65EB		    jb	    short func_err
seg000:65ED
seg000:65ED close_name_return:			    ; CODE XREF: seg000:get_list_returnj
seg000:65ED		    jmp	    short commit_all_return
seg000:65EF ; ---------------------------------------------------------------------------
seg000:65EF
seg000:65EF func_err:				    ; CODE XREF: seg000:CheckReturnsj
seg000:65EF					    ; seg000:6604j
seg000:65EF		    jmp	    short servercall_error
seg000:65F1 ; ---------------------------------------------------------------------------
seg000:65F1
seg000:65F1 CLOSE_UID:				    ; DATA XREF: seg000:13F7o
seg000:65F1		    call    ss:MFTclU
seg000:65F6		    jmp	    short CheckReturns
seg000:65F8 ; ---------------------------------------------------------------------------
seg000:65F8
seg000:65F8 CLOSE_UID_PID:			    ; DATA XREF: seg000:13F9o
seg000:65F8		    call    ss:MFTCloseP
seg000:65FD		    jmp	    short CheckReturns
seg000:65FF ; ---------------------------------------------------------------------------
seg000:65FF
seg000:65FF GET_LIST:				    ; DATA XREF: seg000:13FBo
seg000:65FF		    call    ss:MFT_get
seg000:6604		    jb	    short func_err
seg000:6606		    call    Get_User_Stack
seg000:6609		    mov	    [si+2], bx
seg000:660C		    mov	    [si+10], di
seg000:660F		    mov	    word ptr [si+16], es
seg000:6612
seg000:6612 SetCXOK:				    ; CODE XREF: seg000:667Aj
seg000:6612		    mov	    [si+4], cx
seg000:6615
seg000:6615 get_list_return:			    ; CODE XREF: seg000:6685j
seg000:6615		    jmp	    short close_name_return
seg000:6617 ; ---------------------------------------------------------------------------
seg000:6617
seg000:6617 SRV_CALL:				    ; DATA XREF: seg000:13F1o
seg000:6617		    pop	    ax
seg000:6618		    push    ds
seg000:6619		    push    si
seg000:661A		    call    Get_User_Stack
seg000:661D		    pop	    di
seg000:661E		    pop	    es
seg000:661F		    call    XCHGP
seg000:6622		    push    si
seg000:6623		    mov	    cx,	6
seg000:6626		    rep	movsw
seg000:6628		    inc	    di
seg000:6629		    inc	    di
seg000:662A		    movsw
seg000:662B		    movsw
seg000:662C		    pop	    si
seg000:662D		    mov	    ax,	[si]
seg000:662F		    mov	    bx,	[si+2]
seg000:6632		    mov	    cx,	[si+4]
seg000:6635		    mov	    dx,	[si+6]
seg000:6638		    mov	    di,	[si+10]
seg000:663B		    mov	    es,	word ptr [si+14]
seg000:663E		    push    word ptr [si+8]
seg000:6641		    mov	    ds,	word ptr [si+12]
seg000:6644		    pop	    si
seg000:6645		    mov	    ss:SaveDS, ds
seg000:664A		    mov	    ss:SaveBX, bx
seg000:664F		    mov	    byte ptr ss:fSharing, -1
seg000:6655		    jmp	    REDISP
seg000:6658 ; ---------------------------------------------------------------------------
seg000:6658
seg000:6658 GET_DOS_DATA:			    ; DATA XREF: seg000:13FDo
seg000:6658		    push    ss
seg000:6659		    pop	    es
seg000:665A		    mov	    di,	offset ERRORMODE ; SWAPSTART
seg000:665D		    mov	    cx,	offset SWAP_END
seg000:6660		    mov	    dx,	offset USER_IN_AX
seg000:6663		    sub	    cx,	di
seg000:6665		    sub	    dx,	di
seg000:6667		    shr	    cx,	1
seg000:6669		    adc	    cx,	0
seg000:666C		    shl	    cx,	1
seg000:666E		    call    Get_User_Stack
seg000:6671		    mov	    word ptr [si+14], es
seg000:6674		    mov	    [si+8], di
seg000:6677		    mov	    [si+6], dx
seg000:667A		    jmp	    short SetCXOK
seg000:667C ; ---------------------------------------------------------------------------
seg000:667C
seg000:667C SPOOL_OPER:				    ; DATA XREF: seg000:13FFo
seg000:667C					    ; seg000:1401o ...
seg000:667C		    push    ax
seg000:667D		    mov	    ax,	1125h
seg000:6680		    int	    2Fh		    ; Multiplex	- NETWORK REDIRECTOR - REDIRECTED PRINTER MODE
seg000:6680					    ; STACK: WORD subfunction
seg000:6680					    ; Return: CF set on	error, AX = error code
seg000:6680					    ; STACK unchanged
seg000:6682		    pop	    bx
seg000:6683		    jb	    short func_err2
seg000:6685		    jmp	    short get_list_return
seg000:6687 ; ---------------------------------------------------------------------------
seg000:6687
seg000:6687 func_err2:				    ; CODE XREF: seg000:6683j
seg000:6687		    jmp	    SYS_Ret_Err
seg000:668A ; ---------------------------------------------------------------------------
seg000:668A
seg000:668A _$setExtendedError:			    ; DATA XREF: seg000:1405o
seg000:668A		    mov	    ax,	[si]
seg000:668C		    mov	    ss:EXTERR, ax
seg000:6690		    mov	    ax,	[si+10]
seg000:6693		    mov	    ss:EXTERRPT, ax
seg000:6697		    mov	    ax,	[si+14]
seg000:669A		    mov	    ss:EXTERRPT_2, ax
seg000:669E		    mov	    ax,	[si+2]
seg000:66A1		    mov	    word ptr ss:EXTERR_ACTION, ax
seg000:66A5		    mov	    ax,	[si+4]
seg000:66A8		    mov	    ss:EXTERR_LOCUS, ah
seg000:66AD		    retn
seg000:66AE
seg000:66AE ; =============== S	U B R O	U T I N	E =======================================
seg000:66AE
seg000:66AE
seg000:66AE pJFNFromHandle  proc near		    ; CODE XREF: _$DUP_PDB+67p
seg000:66AE					    ; SFFromHandlep ...
seg000:66AE		    mov	    es,	cs:CurrentPDB
seg000:66B3		    cmp	    bx,	word ptr es:BCON
seg000:66B8		    jb	    short pjfn10
seg000:66BA		    mov	    al,	6
seg000:66BC
seg000:66BC ReturnCarry:			    ; CODE XREF: SFFromHandle+Dj
seg000:66BC		    stc
seg000:66BD		    retn
seg000:66BE ; ---------------------------------------------------------------------------
seg000:66BE
seg000:66BE pjfn10:				    ; CODE XREF: pJFNFromHandle+Aj
seg000:66BE		    les	    di,	es:BCON+2
seg000:66C3		    add	    di,	bx
seg000:66C5		    clc
seg000:66C6
seg000:66C6 pJFNFromHandle_error:		    ; CODE XREF: SFFromHandle+3j
seg000:66C6		    retn
seg000:66C6 pJFNFromHandle  endp
seg000:66C6
seg000:66C7
seg000:66C7 ; =============== S	U B R O	U T I N	E =======================================
seg000:66C7
seg000:66C7
seg000:66C7 SFFromHandle    proc near		    ; CODE XREF: _$DUP_PDB+41p
seg000:66C7					    ; _$IOCTL+8p ...
seg000:66C7		    call    pJFNFromHandle
seg000:66CA		    jb	    short pJFNFromHandle_error
seg000:66CC		    cmp	    byte ptr es:[di], -1
seg000:66D0		    jnz	    short GetSF
seg000:66D2		    mov	    al,	6
seg000:66D4		    jmp	    short ReturnCarry
seg000:66D6 ; ---------------------------------------------------------------------------
seg000:66D6
seg000:66D6 GetSF:				    ; CODE XREF: SFFromHandle+9j
seg000:66D6		    push    bx
seg000:66D7		    mov	    bl,	es:[di]
seg000:66DA		    xor	    bh,	bh
seg000:66DC		    call    SFFromSFN
seg000:66DF		    pop	    bx
seg000:66E0		    retn
seg000:66E0 SFFromHandle    endp
seg000:66E0
seg000:66E1
seg000:66E1 ; =============== S	U B R O	U T I N	E =======================================
seg000:66E1
seg000:66E1
seg000:66E1 SFFromSFN	    proc near		    ; CODE XREF: DOS_ABORT+44p
seg000:66E1					    ; seg000:65B7p ...
seg000:66E1		    les	    di,	cs:SFT_ADDR
seg000:66E6
seg000:66E6 sfsfn5:				    ; CODE XREF: SFFromSFN+15j
seg000:66E6		    cmp	    bx,	es:[di+4]
seg000:66EA		    jb	    short sfsfn7
seg000:66EC		    sub	    bx,	es:[di+4]
seg000:66F0		    les	    di,	es:[di]
seg000:66F3		    cmp	    di,	0FFFFh
seg000:66F6		    jnz	    short sfsfn5
seg000:66F8		    stc
seg000:66F9		    jmp	    short sfsfn_err
seg000:66FB ; ---------------------------------------------------------------------------
seg000:66FB
seg000:66FB sfsfn7:				    ; CODE XREF: SFFromSFN+9j
seg000:66FB		    push    ax
seg000:66FC		    mov	    ax,	53
seg000:66FF		    mul	    bl
seg000:6701		    add	    di,	ax
seg000:6703		    pop	    ax
seg000:6704		    add	    di,	6
seg000:6707		    clc
seg000:6708
seg000:6708 sfsfn_err:				    ; CODE XREF: SFFromSFN+18j
seg000:6708		    retn
seg000:6708 SFFromSFN	    endp
seg000:6708
seg000:6709
seg000:6709 ; =============== S	U B R O	U T I N	E =======================================
seg000:6709
seg000:6709
seg000:6709 JFNFree	    proc near		    ; CODE XREF: seg000:6EBEp
seg000:6709					    ; _$OPEN+25p
seg000:6709		    xor	    bx,	bx
seg000:670B
seg000:670B jfnf1:				    ; CODE XREF: JFNFree+Ej
seg000:670B		    call    pJFNFromHandle
seg000:670E		    jb	    short jfnf5
seg000:6710		    cmp	    byte ptr es:[di], -1
seg000:6714		    jz	    short jfnfx
seg000:6716		    inc	    bx
seg000:6717		    jmp	    short jfnf1
seg000:6719 ; ---------------------------------------------------------------------------
seg000:6719
seg000:6719 jfnf5:				    ; CODE XREF: JFNFree+5j
seg000:6719		    mov	    al,	4
seg000:671B
seg000:671B jfnfx:				    ; CODE XREF: JFNFree+Bj
seg000:671B		    retn
seg000:671B JFNFree	    endp
seg000:671B
seg000:671C
seg000:671C ; =============== S	U B R O	U T I N	E =======================================
seg000:671C
seg000:671C
seg000:671C SFNFree	    proc near		    ; CODE XREF: _$OPEN+Ep
seg000:671C		    xor	    bx,	bx
seg000:671E
seg000:671E sfnf5:				    ; CODE XREF: SFNFree+33j
seg000:671E		    push    bx
seg000:671F		    call    SFFromSFN
seg000:6722		    pop	    bx
seg000:6723		    jnb	    short sfnf6
seg000:6725
seg000:6725 sfn95:
seg000:6725		    mov	    al,	4
seg000:6727		    jmp	    short sfnfree_return
seg000:6729 ; ---------------------------------------------------------------------------
seg000:6729		    nop
seg000:672A
seg000:672A sfnf6:				    ; CODE XREF: SFNFree+7j
seg000:672A		    cmp	    word ptr es:[di], 0
seg000:672E		    jz	    short sfnf20
seg000:6730		    cmp	    word ptr es:[di], 0FFFFh
seg000:6734		    jnz	    short sfnf7
seg000:6736
seg000:6736 sfnf10:
seg000:6736		    push    bx
seg000:6737		    mov	    bx,	ss:USER_ID
seg000:673C		    cmp	    es:[di+2Fh], bx
seg000:6740		    jnz	    short sfnf67
seg000:6742		    mov	    bx,	ss:PROC_ID
seg000:6747		    cmp	    es:[di+31h], bx
seg000:674B		    jz	    short sfnf21
seg000:674D
seg000:674D sfnf67:				    ; CODE XREF: SFNFree+24j
seg000:674D		    pop	    bx
seg000:674E
seg000:674E sfnf7:				    ; CODE XREF: SFNFree+18j
seg000:674E		    inc	    bx
seg000:674F		    jmp	    short sfnf5
seg000:6751 ; ---------------------------------------------------------------------------
seg000:6751
seg000:6751 sfnf20:				    ; CODE XREF: SFNFree+12j
seg000:6751		    push    bx
seg000:6752
seg000:6752 sfnf21:				    ; CODE XREF: SFNFree+2Fj
seg000:6752		    clc
seg000:6753		    mov	    word ptr es:[di], 0FFFFh
seg000:6758		    mov	    bx,	ss:USER_ID
seg000:675D		    mov	    es:[di+2Fh], bx
seg000:6761		    mov	    bx,	ss:PROC_ID
seg000:6766		    mov	    es:[di+31h], bx
seg000:676A		    pop	    bx
seg000:676B
seg000:676B sfnfree_return:			    ; CODE XREF: SFNFree+Bj
seg000:676B		    retn
seg000:676B SFNFree	    endp
seg000:676B
seg000:676C ; ---------------------------------------------------------------------------
seg000:676C
seg000:676C _$AssignOper:			    ; DATA XREF: seg000:0EBEo
seg000:676C		    push    ax
seg000:676D		    mov	    ax,	111Eh
seg000:6770		    int	    2Fh		    ; Multiplex	- NETWORK REDIRECTOR - DO REDIRECTION
seg000:6770					    ; SS = DOS CS
seg000:6770					    ; STACK: WORD function to execute
seg000:6770					    ; Return: CF set on	error, AX = error code
seg000:6770					    ; STACK unchanged
seg000:6772		    pop	    bx
seg000:6773		    jb	    short ASS_ERR
seg000:6775		    jmp	    SYS_RET_OK
seg000:6778 ; ---------------------------------------------------------------------------
seg000:6778
seg000:6778 ASS_ERR:				    ; CODE XREF: seg000:6773j
seg000:6778		    jmp	    SYS_Ret_Err
seg000:677B
seg000:677B ; =============== S	U B R O	U T I N	E =======================================
seg000:677B
seg000:677B
seg000:677B Find_DPB	    proc near		    ; CODE XREF: FCBRegen+9Cp
seg000:677B					    ; InitCDS+41p
seg000:677B		    lds	    si,	ss:DPBHEAD
seg000:6780
seg000:6780 fdpb5:				    ; CODE XREF: Find_DPB+12j
seg000:6780		    cmp	    si,	0FFFFh
seg000:6783		    jz	    short fdpb10
seg000:6785		    cmp	    al,	[si]
seg000:6787		    jnz	    short fdpb7
seg000:6789		    retn
seg000:678A ; ---------------------------------------------------------------------------
seg000:678A
seg000:678A fdpb7:				    ; CODE XREF: Find_DPB+Cj
seg000:678A		    lds	    si,	[si+18h]
seg000:678D		    jmp	    short fdpb5
seg000:678F ; ---------------------------------------------------------------------------
seg000:678F
seg000:678F fdpb10:				    ; CODE XREF: Find_DPB+8j
seg000:678F		    stc
seg000:6790		    retn
seg000:6790 Find_DPB	    endp
seg000:6790
seg000:6791
seg000:6791 ; =============== S	U B R O	U T I N	E =======================================
seg000:6791
seg000:6791
seg000:6791 InitCDS	    proc near		    ; CODE XREF: DOS_SEARCH_NEXT+25p
seg000:6791					    ; GetThisDrv+2Dp
seg000:6791					    ; DATA XREF: ...
seg000:6791		    mov	    ah,	':'
seg000:6793		    push    ax
seg000:6794		    sub	    al,	40h
seg000:6796		    cmp	    ss:NUMIO, al
seg000:679B		    pop	    ax
seg000:679C		    les	    di,	ss:THISCDS
seg000:67A1		    mov	    word ptr es:[di+67], 0
seg000:67A7		    jb	    short RET45
seg000:67A9		    mov	    es:[di], ax
seg000:67AC		    push    ax
seg000:67AD		    mov	    ax,	'\'
seg000:67B0		    mov	    es:[di+2], ax
seg000:67B4		    pop	    ax
seg000:67B5		    or	    word ptr es:[di+67], 4000h
seg000:67BB		    mov	    word ptr es:[di+79], 2
seg000:67C1		    mov	    word ptr es:[di+73], 0
seg000:67C7		    mov	    word ptr es:[di+75], 0
seg000:67CD		    push    ax
seg000:67CE		    push    ds
seg000:67CF		    push    si
seg000:67D0		    sub	    al,	'A'
seg000:67D2		    call    Find_DPB
seg000:67D5		    jb	    short icds5
seg000:67D7		    mov	    es:[di+69],	si
seg000:67DB		    mov	    word ptr es:[di+71], ds
seg000:67DF
seg000:67DF icds5:				    ; CODE XREF: InitCDS+44j
seg000:67DF		    pop	    si
seg000:67E0		    pop	    ds
seg000:67E1		    pop	    ax
seg000:67E2
seg000:67E2 RET45:				    ; CODE XREF: InitCDS+16j
seg000:67E2					    ; GETVISDRV+3j ...
seg000:67E2		    retn
seg000:67E2 InitCDS	    endp
seg000:67E2
seg000:67E3 ; ---------------------------------------------------------------------------
seg000:67E3
seg000:67E3 _$UserOper:				    ; DATA XREF: seg000:0EBCo
seg000:67E3		    push    ax
seg000:67E4		    sub	    al,	1
seg000:67E6		    pop	    ax
seg000:67E7		    jb	    short UserGet
seg000:67E9		    jz	    short UserSet
seg000:67EB		    cmp	    al,	5
seg000:67ED		    jbe	    short UserPrint
seg000:67EF		    mov	    ss:EXTERR_LOCUS, 1
seg000:67F5		    mov	    al,	1
seg000:67F7
seg000:67F7 useroper_error:			    ; CODE XREF: seg000:6835j
seg000:67F7		    jmp	    SYS_Ret_Err
seg000:67FA ; ---------------------------------------------------------------------------
seg000:67FA
seg000:67FA UserGet:				    ; CODE XREF: seg000:67E7j
seg000:67FA		    push    ds
seg000:67FB		    pop	    es
seg000:67FC		    mov	    di,	dx
seg000:67FE		    mov	    cx,	ss:MYNUM
seg000:6803		    call    Get_User_Stack
seg000:6806		    mov	    [si+4], cx
seg000:6809		    push    ss
seg000:680A		    pop	    ds
seg000:680B		    mov	    si,	offset MYNAME
seg000:680E
seg000:680E UserMove:				    ; CODE XREF: seg000:682Aj
seg000:680E		    mov	    cx,	15
seg000:6811		    rep	movsb
seg000:6813		    xor	    ax,	ax
seg000:6815		    stosb
seg000:6816
seg000:6816 UserBye:				    ; CODE XREF: seg000:OKPAj
seg000:6816		    jmp	    SYS_RET_OK
seg000:6819 ; ---------------------------------------------------------------------------
seg000:6819
seg000:6819 UserSet:				    ; CODE XREF: seg000:67E9j
seg000:6819		    mov	    ss:MYNUM, cx
seg000:681E		    mov	    si,	dx
seg000:6820		    push    ss
seg000:6821		    pop	    es
seg000:6822		    mov	    di,	offset MYNAME
seg000:6825		    inc	    ss:DIFFNAM
seg000:682A		    jmp	    short UserMove
seg000:682C ; ---------------------------------------------------------------------------
seg000:682C
seg000:682C UserPrint:				    ; CODE XREF: seg000:67EDj
seg000:682C		    push    ax
seg000:682D		    mov	    ax,	111Fh
seg000:6830		    int	    2Fh		    ; Multiplex	- NETWORK REDIRECTOR - PRINTER SETUP
seg000:6830					    ; STACK: WORD function
seg000:6830					    ; Return: CF set on	error, AX = error code
seg000:6830					    ; STACK unchanged
seg000:6832		    pop	    dx
seg000:6833		    jnb	    short OKPA
seg000:6835		    jmp	    short useroper_error
seg000:6837 ; ---------------------------------------------------------------------------
seg000:6837
seg000:6837 OKPA:				    ; CODE XREF: seg000:6833j
seg000:6837		    jmp	    short UserBye
seg000:6839
seg000:6839 ; =============== S	U B R O	U T I N	E =======================================
seg000:6839
seg000:6839
seg000:6839 GETVISDRV	    proc near		    ; CODE XREF: seg000:1B51p
seg000:6839					    ; seg000:2D53p ...
seg000:6839		    call    GetThisDrv
seg000:683C		    jb	    short RET45
seg000:683E		    push    ds
seg000:683F		    push    si
seg000:6840		    lds	    si,	ss:THISCDS
seg000:6845		    test    word ptr [si+67], 2000h
seg000:684A		    pop	    si
seg000:684B		    pop	    ds
seg000:684C		    jz	    short RET45
seg000:684E		    stc
seg000:684F		    retn
seg000:684F GETVISDRV	    endp
seg000:684F
seg000:6850
seg000:6850 ; =============== S	U B R O	U T I N	E =======================================
seg000:6850
seg000:6850
seg000:6850 GetThisDrv	    proc near		    ; CODE XREF: seg000:163Fp
seg000:6850					    ; seg000:1B02p ...
seg000:6850		    or	    al,	al
seg000:6852		    jnz	    short GTD10
seg000:6854		    mov	    al,	ss:CURDRV
seg000:6858		    inc	    al
seg000:685A
seg000:685A GTD10:				    ; CODE XREF: GetThisDrv+2j
seg000:685A		    dec	    al
seg000:685C		    push    ds
seg000:685D		    push    si
seg000:685E		    mov	    ss:EXTERR_LOCUS, 2
seg000:6864		    test    byte ptr ss:fSharing, -1
seg000:686A		    jz	    short GTD20
seg000:686C		    push    ax
seg000:686D		    push    es
seg000:686E		    push    di
seg000:686F		    mov	    word ptr ss:THISCDS, (offset SETFINDPB+3)
seg000:6876		    mov	    word ptr ss:THISCDS+2, cs
seg000:687B		    add	    al,	'A'
seg000:687D		    call    InitCDS
seg000:6880		    test    word ptr es:[di+67], 4000h
seg000:6886		    pop	    di
seg000:6887		    pop	    es
seg000:6888		    pop	    ax
seg000:6889		    jz	    short GTD30
seg000:688B		    jmp	    short GTDX
seg000:688D ; ---------------------------------------------------------------------------
seg000:688D
seg000:688D GTD20:				    ; CODE XREF: GetThisDrv+1Aj
seg000:688D		    call    GetCDSFromDrv
seg000:6890		    jb	    short GTD30
seg000:6892		    test    word ptr [si+43h], 4000h
seg000:6897		    jnz	    short GTDX
seg000:6899
seg000:6899 GTD30:				    ; CODE XREF: GetThisDrv+39j
seg000:6899					    ; GetThisDrv+40j
seg000:6899		    mov	    ss:EXTERR_LOCUS, 1
seg000:689F		    stc
seg000:68A0
seg000:68A0 GTDX:				    ; CODE XREF: GetThisDrv+3Bj
seg000:68A0					    ; GetThisDrv+47j
seg000:68A0		    pop	    si
seg000:68A1		    pop	    ds
seg000:68A2		    retn
seg000:68A2 GetThisDrv	    endp
seg000:68A2
seg000:68A3
seg000:68A3 ; =============== S	U B R O	U T I N	E =======================================
seg000:68A3
seg000:68A3
seg000:68A3 GetCDSFromDrv   proc near		    ; CODE XREF: seg000:rmloopp
seg000:68A3					    ; GetThisDrv:GTD20p ...
seg000:68A3		    cmp	    al,	ss:CDSCOUNT
seg000:68A8		    jb	    short GetCDS
seg000:68AA		    stc
seg000:68AB		    retn
seg000:68AC ; ---------------------------------------------------------------------------
seg000:68AC
seg000:68AC GetCDS:				    ; CODE XREF: GetCDSFromDrv+5j
seg000:68AC		    push    bx
seg000:68AD		    push    ax
seg000:68AE		    lds	    si,	ss:CDSAddr
seg000:68B3		    mov	    bl,	81
seg000:68B5		    mul	    bl
seg000:68B7		    add	    si,	ax
seg000:68B9		    mov	    word ptr ss:THISCDS, si
seg000:68BE		    mov	    word ptr ss:THISCDS+2, ds
seg000:68C3		    pop	    ax
seg000:68C4		    pop	    bx
seg000:68C5		    clc
seg000:68C6		    retn
seg000:68C6 GetCDSFromDrv   endp
seg000:68C6
seg000:68C7 ; ---------------------------------------------------------------------------
seg000:68C7
seg000:68C7 TransFCB:				    ; CODE XREF: seg000:23C6p
seg000:68C7					    ; seg000:23DFp ...
seg000:68C7		    push    bp
seg000:68C8		    mov	    bp,	sp
seg000:68CA		    sub	    sp,	15
seg000:68CD		    push    ss
seg000:68CE		    pop	    es
seg000:68CF		    push    es
seg000:68D0		    push    di
seg000:68D1		    lea	    di,	[bp-15]
seg000:68D4		    mov	    byte ptr ss:ExtFCB,	0
seg000:68DA		    mov	    byte ptr ss:ExtFCB+1, 0
seg000:68E0		    call    GetExtended
seg000:68E3		    jz	    short GetDrive
seg000:68E5		    mov	    al,	[si-1]
seg000:68E8		    mov	    byte ptr ss:ExtFCB+1, al
seg000:68EC		    mov	    byte ptr ss:ExtFCB,	-1
seg000:68F2
seg000:68F2 GetDrive:				    ; CODE XREF: seg000:68E3j
seg000:68F2		    lodsb
seg000:68F3		    call    GetThisDrv
seg000:68F6		    jb	    short BadPack
seg000:68F8		    call    TextFromDrive
seg000:68FB		    mov	    bx,	offset CharType
seg000:68FE		    mov	    cx,	11
seg000:6901		    push    si
seg000:6902
seg000:6902 FCBScan:				    ; CODE XREF: seg000:6909j
seg000:6902		    lodsb
seg000:6903		    xlat    byte ptr es:[bx]
seg000:6905		    test    al,	8
seg000:6907		    jz	    short BadPack
seg000:6909		    loop    FCBScan
seg000:690B		    pop	    si
seg000:690C		    mov	    bx,	di
seg000:690E		    call    PackName
seg000:6911		    pop	    di
seg000:6912		    pop	    es
seg000:6913		    push    ss
seg000:6914		    pop	    ds
seg000:6915		    lea	    si,	[bp-15]
seg000:6918		    cmp	    byte ptr [bx], 0
seg000:691B		    jz	    short BadPack
seg000:691D		    push    bp
seg000:691E		    call    TransPathSet
seg000:6921		    pop	    bp
seg000:6922		    jnb	    short FCBRet
seg000:6924
seg000:6924 BadPack:				    ; CODE XREF: seg000:68F6j
seg000:6924					    ; seg000:6907j ...
seg000:6924		    stc
seg000:6925		    mov	    al,	3
seg000:6927
seg000:6927 FCBRet:				    ; CODE XREF: seg000:6922j
seg000:6927		    mov	    sp,	bp
seg000:6929		    pop	    bp
seg000:692A
seg000:692A TransPath_retn:			    ; CODE XREF: TransPathSet+3Dj
seg000:692A		    retn
seg000:692B
seg000:692B ; =============== S	U B R O	U T I N	E =======================================
seg000:692B
seg000:692B
seg000:692B TransPath	    proc near		    ; CODE XREF: seg000:2DF7p
seg000:692B					    ; seg000:2E77p ...
seg000:692B		    xor	    al,	al
seg000:692D		    jmp	    short SetSplice
seg000:692D TransPath	    endp
seg000:692D
seg000:692F
seg000:692F ; =============== S	U B R O	U T I N	E =======================================
seg000:692F
seg000:692F
seg000:692F TransPathSet    proc near		    ; CODE XREF: seg000:2C99p
seg000:692F					    ; seg000:691Ep ...
seg000:692F		    mov	    al,	-1
seg000:6931
seg000:6931 SetSplice:				    ; CODE XREF: TransPath+2j
seg000:6931		    mov	    ss:NoSetDir, al
seg000:6935		    mov	    al,	-1
seg000:6937
seg000:6937 TransPathNoSet:			    ; CODE XREF: seg000:2DBEp
seg000:6937					    ; seg000:2E35p
seg000:6937		    mov	    byte ptr ss:fSplice_x2+2, al
seg000:693B		    mov	    byte ptr ss:cMeta, -1
seg000:6941		    mov	    ss:WFP_START, di
seg000:6946		    mov	    ss:CURR_DIR_END, -1
seg000:694D		    push    ss
seg000:694E		    pop	    es
seg000:694F		    lea	    bp,	[di+134]
seg000:6953		    test    byte ptr ss:fSharing, -1
seg000:6959		    jz	    short CheckUNC
seg000:695B		    call    DriveFromText
seg000:695E		    call    GetThisDrv
seg000:6961		    jb	    short NoPath
seg000:6963		    call    TextFromDrive
seg000:6966		    lea	    bx,	[di+1]
seg000:6969		    call    Canonicalize
seg000:696C		    jb	    short TransPath_retn
seg000:696E		    push    ss
seg000:696F		    pop	    ds
seg000:6970		    mov	    si,	ds:WFP_START
seg000:6974		    test    byte ptr ds:fSplice_x2+2, -1
seg000:6979		    jz	    short NoServerSplice
seg000:697B		    call    Splice
seg000:697E
seg000:697E NoServerSplice:			    ; CODE XREF: TransPathSet+4Aj
seg000:697E		    push    ss
seg000:697F		    pop	    ds
seg000:6980		    les	    di,	ds:THISCDS
seg000:6984		    call    EcritDisk
seg000:6987		    call    FatRead_CDS
seg000:698A		    call    LcritDisk
seg000:698D
seg000:698D NoPath:				    ; CODE XREF: TransPathSet+32j
seg000:698D		    mov	    al,	3
seg000:698F		    retn
seg000:6990 ; ---------------------------------------------------------------------------
seg000:6990
seg000:6990 CheckUNC:				    ; CODE XREF: TransPathSet+2Aj
seg000:6990		    mov	    word ptr ss:THISCDS, -1
seg000:6997		    mov	    ax,	1123h
seg000:699A		    int	    2Fh		    ; Multiplex	- NETWORK REDIRECTOR - QUALIFY REMOTE FILENAME
seg000:699A					    ; DS:SI -> ASCIZ filename to canonicalize
seg000:699A					    ; ES:DI -> 128-byte	buffer for qualified name
seg000:699A					    ; Return: CF set if	not resolved
seg000:699C		    jnb	    short UNCDone
seg000:699E		    call    DriveFromText
seg000:69A1		    push    ax
seg000:69A2		    mov	    ax,	[si]
seg000:69A4		    call    PATHCHRCMP
seg000:69A7		    xchg    ah,	al
seg000:69A9		    call    PATHCHRCMP
seg000:69AC		    jnz	    short CheckDevice
seg000:69AE		    cmp	    ah,	al
seg000:69B0		    jnz	    short CheckDevice
seg000:69B2		    pop	    ax
seg000:69B3		    movsw
seg000:69B4
seg000:69B4 UNCCpy:				    ; CODE XREF: TransPathSet+93j
seg000:69B4		    lodsb
seg000:69B5		    call    Ucase
seg000:69B8		    or	    al,	al
seg000:69BA		    jz	    short UNCTerm
seg000:69BC		    call    PATHCHRCMP
seg000:69BF		    mov	    bx,	di
seg000:69C1		    stosb
seg000:69C2		    jnz	    short UNCCpy
seg000:69C4		    call    Canonicalize
seg000:69C7
seg000:69C7 UNCDone:				    ; CODE XREF: TransPathSet+6Dj
seg000:69C7					    ; TransPathSet+9Cj
seg000:69C7		    push    ss
seg000:69C8		    pop	    ds
seg000:69C9		    retn
seg000:69CA ; ---------------------------------------------------------------------------
seg000:69CA
seg000:69CA UNCTerm:				    ; CODE XREF: TransPathSet+8Bj
seg000:69CA		    stosb
seg000:69CB		    jmp	    short UNCDone
seg000:69CD ; ---------------------------------------------------------------------------
seg000:69CD
seg000:69CD CheckDevice:			    ; CODE XREF: TransPathSet+7Dj
seg000:69CD					    ; TransPathSet+81j
seg000:69CD		    pop	    ax
seg000:69CE		    cmp	    byte ptr [si], 0
seg000:69D1		    jnz	    short CheckPath
seg000:69D3		    mov	    al,	2
seg000:69D5		    stc
seg000:69D6		    retn
seg000:69D7 ; ---------------------------------------------------------------------------
seg000:69D7
seg000:69D7 CheckPath:				    ; CODE XREF: TransPathSet+A2j
seg000:69D7		    push    ax
seg000:69D8		    push    bp
seg000:69D9		    call    CheckThisDevice
seg000:69DC		    pop	    bp
seg000:69DD		    pop	    ax
seg000:69DE		    jnb	    short DoFile
seg000:69E0		    mov	    byte ptr ss:fSharing, -1
seg000:69E6		    call    GetThisDrv
seg000:69E9		    mov	    byte ptr ss:fSharing, 0
seg000:69EF		    call    TextFromDrive
seg000:69F2		    mov	    al,	'/'
seg000:69F4		    stosb
seg000:69F5		    call    StrCpy
seg000:69F8		    clc
seg000:69F9		    push    ss
seg000:69FA		    pop	    ds
seg000:69FB
seg000:69FB DoFile_retn:			    ; CODE XREF: TransPathSet+D2j
seg000:69FB					    ; TransPathSet+E1j	...
seg000:69FB		    retn
seg000:69FC ; ---------------------------------------------------------------------------
seg000:69FC
seg000:69FC DoFile:				    ; CODE XREF: TransPathSet+AFj
seg000:69FC		    call    GETVISDRV
seg000:69FF		    mov	    al,	3
seg000:6A01		    jb	    short DoFile_retn
seg000:6A03		    push    ds
seg000:6A04		    push    si
seg000:6A05		    push    es
seg000:6A06		    push    di
seg000:6A07		    call    ValidateCDS
seg000:6A0A		    pop	    di
seg000:6A0B		    pop	    es
seg000:6A0C		    pop	    si
seg000:6A0D		    pop	    ds
seg000:6A0E		    mov	    al,	3
seg000:6A10		    jb	    short DoFile_retn
seg000:6A12		    push    ds
seg000:6A13		    push    si
seg000:6A14		    lds	    si,	ss:THISCDS
seg000:6A19		    mov	    bx,	di
seg000:6A1B		    add	    bx,	[si+79]
seg000:6A1E		    lea	    bp,	[di+134]
seg000:6A22		    call    FStrCpy
seg000:6A25		    dec	    di
seg000:6A26		    mov	    al,	'\'
seg000:6A28		    cmp	    es:[di-1], al
seg000:6A2C		    jz	    short GetOrig
seg000:6A2E		    stosb
seg000:6A2F
seg000:6A2F GetOrig:				    ; CODE XREF: TransPathSet+FDj
seg000:6A2F		    dec	    di
seg000:6A30		    pop	    si
seg000:6A31		    pop	    ds
seg000:6A32		    call    PathSep
seg000:6A35		    jnz	    short PathAssure
seg000:6A37		    or	    al,	al
seg000:6A39		    jz	    short DoCanon
seg000:6A3B		    mov	    di,	bx
seg000:6A3D
seg000:6A3D SkipPath:				    ; CODE XREF: TransPathSet+112j
seg000:6A3D		    lodsb
seg000:6A3E		    call    PATHCHRCMP
seg000:6A41		    jz	    short SkipPath
seg000:6A43		    dec	    si
seg000:6A44		    or	    al,	al
seg000:6A46		    jz	    short DoCanon
seg000:6A48
seg000:6A48 PathAssure:				    ; CODE XREF: TransPathSet+106j
seg000:6A48		    mov	    al,	'\'
seg000:6A4A		    stosb
seg000:6A4B
seg000:6A4B DoCanon:				    ; CODE XREF: TransPathSet+10Aj
seg000:6A4B					    ; TransPathSet+117j
seg000:6A4B		    call    Canonicalize
seg000:6A4E		    jb	    short DoFile_retn
seg000:6A50		    push    ss
seg000:6A51		    pop	    ds
seg000:6A52		    mov	    di,	ds:WFP_START
seg000:6A56		    lds	    si,	ds:THISCDS
seg000:6A5A		    call    PathPref
seg000:6A5D		    jnz	    short DoSplice
seg000:6A5F		    mov	    al,	[si-1]
seg000:6A62		    call    PATHCHRCMP
seg000:6A65		    jz	    short DoSplice
seg000:6A67		    cmp	    byte ptr es:[di], 0
seg000:6A6B		    jz	    short DoSplice
seg000:6A6D		    inc	    di
seg000:6A6E		    mov	    ss:CURR_DIR_END, di
seg000:6A73
seg000:6A73 DoSplice:				    ; CODE XREF: TransPathSet+12Ej
seg000:6A73					    ; TransPathSet+136j ...
seg000:6A73		    push    ss
seg000:6A74		    pop	    ds
seg000:6A75		    mov	    si,	ds:WFP_START
seg000:6A79		    xor	    cx,	cx
seg000:6A7B		    test    byte ptr ds:fSplice_x2+2, -1
seg000:6A80		    jz	    short SkipSplice
seg000:6A82		    call    Splice
seg000:6A85
seg000:6A85 SkipSplice:				    ; CODE XREF: TransPathSet+151j
seg000:6A85		    push    ss
seg000:6A86		    pop	    ds
seg000:6A87		    les	    di,	ds:THISCDS
seg000:6A8B		    test    word ptr es:[di+67], 8000h
seg000:6A91		    jz	    short SkipSplice2
seg000:6A93		    retn
seg000:6A94 ; ---------------------------------------------------------------------------
seg000:6A94
seg000:6A94 SkipSplice2:			    ; CODE XREF: TransPathSet+162j
seg000:6A94		    jcxz    short Done
seg000:6A96		    call    EcritDisk
seg000:6A99		    call    FatRead_CDS
seg000:6A9C		    call    LcritDisk
seg000:6A9F		    mov	    al,	3
seg000:6AA1
seg000:6AA1 Done:				    ; CODE XREF: TransPathSet:SkipSplice2j
seg000:6AA1		    retn
seg000:6AA1 TransPathSet    endp
seg000:6AA1
seg000:6AA2
seg000:6AA2 ; =============== S	U B R O	U T I N	E =======================================
seg000:6AA2
seg000:6AA2
seg000:6AA2 Canonicalize    proc near		    ; CODE XREF: TransPathSet+3Ap
seg000:6AA2					    ; TransPathSet+95p	...
seg000:6AA2		    lodsb
seg000:6AA3		    call    PATHCHRCMP
seg000:6AA6		    jnz	    short CanonDec
seg000:6AA8		    cmp	    di,	bp
seg000:6AAA		    jnb	    short CanonBad
seg000:6AAC		    stosb
seg000:6AAD		    jmp	    short Canonicalize
seg000:6AAF ; ---------------------------------------------------------------------------
seg000:6AAF
seg000:6AAF CanonDec:				    ; CODE XREF: Canonicalize+4j
seg000:6AAF					    ; Canonicalize+56j
seg000:6AAF		    dec	    si
seg000:6AB0
seg000:6AB0 CanonLoop:				    ; CODE XREF: Canonicalize+64j
seg000:6AB0		    xor	    ax,	ax
seg000:6AB2		    cmp	    [si], al
seg000:6AB4		    jnz	    short DoComponent
seg000:6AB6		    cmp	    byte ptr es:[di-1],	':'
seg000:6ABB		    jnz	    short DoTerminate
seg000:6ABD		    mov	    al,	'\'
seg000:6ABF		    stosb
seg000:6AC0		    mov	    al,	ah
seg000:6AC2
seg000:6AC2 DoTerminate:			    ; CODE XREF: Canonicalize+19j
seg000:6AC2		    stosb
seg000:6AC3		    clc
seg000:6AC4		    retn
seg000:6AC5 ; ---------------------------------------------------------------------------
seg000:6AC5
seg000:6AC5 CanonBad:				    ; CODE XREF: Canonicalize+8j
seg000:6AC5					    ; Canonicalize+50j	...
seg000:6AC5		    call    ScanPathChar
seg000:6AC8		    mov	    al,	3
seg000:6ACA		    jz	    short PathEnc
seg000:6ACC		    mov	    al,	2
seg000:6ACE
seg000:6ACE PathEnc:				    ; CODE XREF: Canonicalize+28j
seg000:6ACE		    stc
seg000:6ACF
seg000:6ACF CanonBad_retn:			    ; CODE XREF: Canonicalize+31j
seg000:6ACF					    ; Canonicalize+46j	...
seg000:6ACF		    retn
seg000:6AD0 ; ---------------------------------------------------------------------------
seg000:6AD0
seg000:6AD0 DoComponent:			    ; CODE XREF: Canonicalize+12j
seg000:6AD0		    call    CopyComponent
seg000:6AD3		    jb	    short CanonBad_retn
seg000:6AD5		    cmp	    word ptr es:[di], 2Eh
seg000:6AD9		    jz	    short Skip1
seg000:6ADB		    cmp	    word ptr es:[di], '..'
seg000:6AE0		    jnz	    short CanonNormal
seg000:6AE2		    dec	    di
seg000:6AE3
seg000:6AE3 Skip1:				    ; CODE XREF: Canonicalize+37j
seg000:6AE3		    call    SkipBack
seg000:6AE6		    mov	    al,	3
seg000:6AE8		    jb	    short CanonBad_retn
seg000:6AEA		    jmp	    short CanonPath
seg000:6AEC ; ---------------------------------------------------------------------------
seg000:6AEC		    nop
seg000:6AED
seg000:6AED CanonNormal:			    ; CODE XREF: Canonicalize+3Ej
seg000:6AED		    add	    di,	cx
seg000:6AEF
seg000:6AEF CanonPath:				    ; CODE XREF: Canonicalize+48j
seg000:6AEF		    call    PathSep
seg000:6AF2		    jnz	    short CanonBad
seg000:6AF4		    lodsb
seg000:6AF5		    call    PATHCHRCMP
seg000:6AF8		    jnz	    short CanonDec
seg000:6AFA		    cmp	    di,	bp
seg000:6AFC		    jnb	    short CanonBad
seg000:6AFE		    stosb
seg000:6AFF
seg000:6AFF CanonPathLoop:			    ; CODE XREF: Canonicalize+61j
seg000:6AFF		    lodsb
seg000:6B00		    call    PATHCHRCMP
seg000:6B03		    jz	    short CanonPathLoop
seg000:6B05		    dec	    si
seg000:6B06		    jmp	    short CanonLoop
seg000:6B06 Canonicalize    endp
seg000:6B06
seg000:6B08
seg000:6B08 ; =============== S	U B R O	U T I N	E =======================================
seg000:6B08
seg000:6B08
seg000:6B08 PathSep	    proc near		    ; CODE XREF: TransPathSet+103p
seg000:6B08					    ; Canonicalize:CanonPathp ...
seg000:6B08		    mov	    al,	[si]
seg000:6B08 PathSep	    endp
seg000:6B08
seg000:6B0A
seg000:6B0A ; =============== S	U B R O	U T I N	E =======================================
seg000:6B0A
seg000:6B0A
seg000:6B0A PathSepGotCh    proc near		    ; CODE XREF: PathPref+14p
seg000:6B0A					    ; ScanPathChar+1p
seg000:6B0A		    or	    al,	al
seg000:6B0C		    jz	    short CanonBad_retn
seg000:6B0E		    call    PATHCHRCMP
seg000:6B11		    retn
seg000:6B11 PathSepGotCh    endp
seg000:6B11
seg000:6B12
seg000:6B12 ; =============== S	U B R O	U T I N	E =======================================
seg000:6B12
seg000:6B12
seg000:6B12 SkipBack	    proc near		    ; CODE XREF: REN_DEL_Check+1Ep
seg000:6B12					    ; Canonicalize:Skip1p ...
seg000:6B12		    cmp	    di,	bx
seg000:6B14		    jb	    short SkipBad
seg000:6B16		    dec	    di
seg000:6B17		    mov	    al,	es:[di]
seg000:6B1A		    call    PATHCHRCMP
seg000:6B1D		    jnz	    short SkipBack
seg000:6B1F		    clc
seg000:6B20		    retn
seg000:6B21 ; ---------------------------------------------------------------------------
seg000:6B21
seg000:6B21 SkipBad:				    ; CODE XREF: SkipBack+2j
seg000:6B21		    mov	    al,	3
seg000:6B23		    stc
seg000:6B24		    retn
seg000:6B24 SkipBack	    endp
seg000:6B24
seg000:6B25
seg000:6B25 ; =============== S	U B R O	U T I N	E =======================================
seg000:6B25
seg000:6B25
seg000:6B25 CopyComponent   proc near		    ; CODE XREF: Canonicalize:DoComponentp
seg000:6B25		    sub	    sp,	14
seg000:6B28		    push    ds
seg000:6B29		    push    si
seg000:6B2A		    push    es
seg000:6B2B		    push    di
seg000:6B2C		    push    bp
seg000:6B2D		    mov	    bp,	sp
seg000:6B2F		    mov	    ah,	'.'
seg000:6B31		    lodsb
seg000:6B32		    stosb
seg000:6B33		    cmp	    al,	ah
seg000:6B35		    jnz	    short NormalComp
seg000:6B37		    call    PathSep
seg000:6B3A		    jz	    short NulTerm
seg000:6B3C
seg000:6B3C TryTwoDot:
seg000:6B3C		    lodsb
seg000:6B3D		    stosb
seg000:6B3E		    cmp	    al,	ah
seg000:6B40		    jnz	    short CopyBad
seg000:6B42		    call    PathSep
seg000:6B45		    jnz	    short CopyBad
seg000:6B47
seg000:6B47 NulTerm:				    ; CODE XREF: CopyComponent+15j
seg000:6B47		    xor	    al,	al
seg000:6B49		    stosb
seg000:6B4A		    mov	    [bp+6], si
seg000:6B4D		    jmp	    short GoodRet
seg000:6B4F ; ---------------------------------------------------------------------------
seg000:6B4F
seg000:6B4F NormalComp:				    ; CODE XREF: CopyComponent+10j
seg000:6B4F		    mov	    si,	[bp+6]
seg000:6B52		    call    NameTrans
seg000:6B55		    cmp	    si,	[bp+6]
seg000:6B58		    jz	    short CopyBad
seg000:6B5A		    test    byte ptr ss:fSharing, -1
seg000:6B60		    jnz	    short DoPack
seg000:6B62		    and	    dl,	1
seg000:6B65		    add	    byte ptr ss:cMeta, dl
seg000:6B6A		    jg	    short CopyBad
seg000:6B6C		    jnz	    short DoPack
seg000:6B6E		    or	    dl,	dl
seg000:6B70		    jz	    short CopyBadPath
seg000:6B72
seg000:6B72 DoPack:				    ; CODE XREF: CopyComponent+3Bj
seg000:6B72					    ; CopyComponent+47j
seg000:6B72		    mov	    [bp+6], si
seg000:6B75		    push    ss
seg000:6B76		    pop	    ds
seg000:6B77		    mov	    si,	(offset	NAME1_1+1)
seg000:6B7A		    lea	    di,	[bp+10]
seg000:6B7D		    push    di
seg000:6B7E		    call    PackName
seg000:6B81		    pop	    di
seg000:6B82		    call    StrLen
seg000:6B85		    dec	    cx
seg000:6B86		    add	    cx,	[bp+2]
seg000:6B89		    cmp	    cx,	[bp+0]
seg000:6B8C		    jnb	    short CopyBad
seg000:6B8E		    mov	    si,	di
seg000:6B90		    les	    di,	[bp+2]
seg000:6B93		    call    FStrCpy
seg000:6B96
seg000:6B96 GoodRet:				    ; CODE XREF: CopyComponent+28j
seg000:6B96		    clc
seg000:6B97		    jmp	    short CopyEnd
seg000:6B99 ; ---------------------------------------------------------------------------
seg000:6B99
seg000:6B99 CopyBad:				    ; CODE XREF: CopyComponent+1Bj
seg000:6B99					    ; CopyComponent+20j ...
seg000:6B99		    stc
seg000:6B9A		    call    ScanPathChar
seg000:6B9D		    mov	    al,	2
seg000:6B9F		    jnz	    short CopyEnd
seg000:6BA1
seg000:6BA1 CopyBadPath:			    ; CODE XREF: CopyComponent+4Bj
seg000:6BA1		    stc
seg000:6BA2		    mov	    al,	3
seg000:6BA4
seg000:6BA4 CopyEnd:				    ; CODE XREF: CopyComponent+72j
seg000:6BA4					    ; CopyComponent+7Aj
seg000:6BA4		    pop	    bp
seg000:6BA5		    pop	    di
seg000:6BA6		    pop	    es
seg000:6BA7		    pop	    si
seg000:6BA8		    pop	    ds
seg000:6BA9		    lahf
seg000:6BAA		    add	    sp,	14
seg000:6BAD		    call    StrLen
seg000:6BB0		    dec	    cx
seg000:6BB1		    sahf
seg000:6BB2		    retn
seg000:6BB2 CopyComponent   endp
seg000:6BB2
seg000:6BB3
seg000:6BB3 ; =============== S	U B R O	U T I N	E =======================================
seg000:6BB3
seg000:6BB3
seg000:6BB3 Splice	    proc near		    ; CODE XREF: seg000:4ABBp
seg000:6BB3					    ; TransPathSet+4Cp	...
seg000:6BB3		    test    ss:SPLICES,	-1
seg000:6BB9		    jz	    short AllDone
seg000:6BBB		    push    word ptr ss:THISCDS
seg000:6BC0		    push    word ptr ss:THISCDS+2
seg000:6BC5		    push    ds
seg000:6BC6		    push    si
seg000:6BC7		    pop	    di
seg000:6BC8		    pop	    es
seg000:6BC9		    xor	    ax,	ax
seg000:6BCB
seg000:6BCB SpliceScan:				    ; CODE XREF: Splice+24j
seg000:6BCB					    ; Splice+2Dj
seg000:6BCB		    call    GetCDSFromDrv
seg000:6BCE		    jb	    short SpliceDone
seg000:6BD0		    inc	    al
seg000:6BD2		    test    word ptr [si+67], 2000h
seg000:6BD7		    jz	    short SpliceScan
seg000:6BD9		    push    di
seg000:6BDA		    call    PathPref
seg000:6BDD		    jz	    short SpliceFound
seg000:6BDF
seg000:6BDF SpliceSkip:				    ; CODE XREF: Splice+3Bj
seg000:6BDF		    pop	    di
seg000:6BE0		    jmp	    short SpliceScan
seg000:6BE2 ; ---------------------------------------------------------------------------
seg000:6BE2
seg000:6BE2 SpliceFound:			    ; CODE XREF: Splice+2Aj
seg000:6BE2		    cmp	    byte ptr es:[di], 0
seg000:6BE6		    jnz	    short SpliceDo
seg000:6BE8		    test    ss:NoSetDir, -1
seg000:6BEE		    jnz	    short SpliceSkip
seg000:6BF0
seg000:6BF0 SpliceDo:				    ; CODE XREF: Splice+33j
seg000:6BF0		    mov	    si,	di
seg000:6BF2		    push    es
seg000:6BF3		    pop	    ds
seg000:6BF4		    pop	    di
seg000:6BF5		    call    TextFromDrive1
seg000:6BF8		    mov	    ax,	ss:CURR_DIR_END
seg000:6BFC		    or	    ax,	ax
seg000:6BFE		    js	    short NoPoke
seg000:6C00		    add	    ax,	di
seg000:6C02		    sub	    ax,	si
seg000:6C04		    mov	    ss:CURR_DIR_END, ax
seg000:6C08
seg000:6C08 NoPoke:				    ; CODE XREF: Splice+4Bj
seg000:6C08		    cmp	    byte ptr [si], 0
seg000:6C0B		    jnz	    short SpliceCopy
seg000:6C0D		    mov	    al,	'\'
seg000:6C0F		    stosb
seg000:6C10
seg000:6C10 SpliceCopy:				    ; CODE XREF: Splice+58j
seg000:6C10		    call    FStrCpy
seg000:6C13		    add	    sp,	4
seg000:6C16		    or	    cl,	1
seg000:6C19		    jmp	    short DoSet
seg000:6C1B ; ---------------------------------------------------------------------------
seg000:6C1B
seg000:6C1B SpliceDone:				    ; CODE XREF: Splice+1Bj
seg000:6C1B		    pop	    word ptr ss:THISCDS+2
seg000:6C20		    pop	    word ptr ss:THISCDS
seg000:6C25
seg000:6C25 AllDone:				    ; CODE XREF: Splice+6j
seg000:6C25		    xor	    cx,	cx
seg000:6C27
seg000:6C27 DoSet:				    ; CODE XREF: Splice+66j
seg000:6C27		    lds	    si,	ss:THISCDS
seg000:6C2C		    les	    di,	[si+69]
seg000:6C2F		    mov	    word ptr ss:THISDPB, di
seg000:6C34		    mov	    word ptr ss:THISDPB+2, es
seg000:6C39
seg000:6C39 Splice_retn:			    ; CODE XREF: DriveFromText+5j
seg000:6C39					    ; DriveFromText+Bj	...
seg000:6C39		    retn
seg000:6C39 Splice	    endp
seg000:6C39
seg000:6C3A ; ---------------------------------------------------------------------------
seg000:6C3A
seg000:6C3A _$NameTrans:			    ; DATA XREF: seg000:0EC0o
seg000:6C3A					    ; seg000:0F19o
seg000:6C3A		    push    ds
seg000:6C3B		    push    si
seg000:6C3C		    push    es
seg000:6C3D		    push    di
seg000:6C3E		    mov	    di,	offset OPENBUF
seg000:6C41		    call    TransPath
seg000:6C44		    pop	    di
seg000:6C45		    pop	    es
seg000:6C46		    pop	    si
seg000:6C47		    pop	    ds
seg000:6C48		    jnb	    short TransOK
seg000:6C4A		    jmp	    SYS_Ret_Err
seg000:6C4D ; ---------------------------------------------------------------------------
seg000:6C4D
seg000:6C4D TransOK:				    ; CODE XREF: seg000:6C48j
seg000:6C4D		    mov	    si,	offset OPENBUF
seg000:6C50		    push    ss
seg000:6C51		    pop	    ds
seg000:6C52
seg000:6C52 GotText:
seg000:6C52		    call    FStrCpy
seg000:6C55		    jmp	    SYS_RET_OK
seg000:6C58
seg000:6C58 ; =============== S	U B R O	U T I N	E =======================================
seg000:6C58
seg000:6C58
seg000:6C58 DriveFromText   proc near		    ; CODE XREF: TransPathSet+2Cp
seg000:6C58					    ; TransPathSet+6Fp
seg000:6C58					    ; DATA XREF: ...
seg000:6C58		    xor	    al,	al
seg000:6C5A		    cmp	    byte ptr [si], 0
seg000:6C5D		    jz	    short Splice_retn
seg000:6C5F		    cmp	    byte ptr [si+1], ':'
seg000:6C63		    jnz	    short Splice_retn
seg000:6C65		    lodsw
seg000:6C66		    or	    al,	20h
seg000:6C68		    sub	    al,	60h
seg000:6C6A		    jnz	    short Splice_retn
seg000:6C6C		    mov	    al,	-1
seg000:6C6E		    retn
seg000:6C6E DriveFromText   endp
seg000:6C6E
seg000:6C6F
seg000:6C6F ; =============== S	U B R O	U T I N	E =======================================
seg000:6C6F
seg000:6C6F
seg000:6C6F TextFromDrive   proc near		    ; CODE XREF: seg000:68F8p
seg000:6C6F					    ; TransPathSet+34p	...
seg000:6C6F		    inc	    al
seg000:6C6F TextFromDrive   endp
seg000:6C6F
seg000:6C71
seg000:6C71 ; =============== S	U B R O	U T I N	E =======================================
seg000:6C71
seg000:6C71
seg000:6C71 TextFromDrive1  proc near		    ; CODE XREF: Splice+42p
seg000:6C71		    add	    al,	40h
seg000:6C73		    mov	    ah,	':'
seg000:6C75		    stosw
seg000:6C76
seg000:6C76 PathPref_retn:			    ; CODE XREF: PathPref+6j
seg000:6C76		    retn
seg000:6C76 TextFromDrive1  endp
seg000:6C76
seg000:6C77
seg000:6C77 ; =============== S	U B R O	U T I N	E =======================================
seg000:6C77
seg000:6C77
seg000:6C77 PathPref	    proc near		    ; CODE XREF: TransPathSet+12Bp
seg000:6C77					    ; Splice+27p
seg000:6C77		    call    DStrLen
seg000:6C7A		    dec	    cx
seg000:6C7B		    repe cmpsb
seg000:6C7D		    jnz	    short PathPref_retn
seg000:6C7F		    push    ax
seg000:6C80		    mov	    al,	[si-1]
seg000:6C83		    call    PATHCHRCMP
seg000:6C86		    jz	    short Prefix
seg000:6C88
seg000:6C88 NotSep:
seg000:6C88		    mov	    al,	es:[di]
seg000:6C8B		    call    PathSepGotCh
seg000:6C8E
seg000:6C8E Prefix:				    ; CODE XREF: PathPref+Fj
seg000:6C8E		    pop	    ax
seg000:6C8F		    retn
seg000:6C8F PathPref	    endp
seg000:6C8F
seg000:6C90
seg000:6C90 ; =============== S	U B R O	U T I N	E =======================================
seg000:6C90
seg000:6C90
seg000:6C90 ScanPathChar    proc near		    ; CODE XREF: Canonicalize:CanonBadp
seg000:6C90					    ; CopyComponent+75p ...
seg000:6C90		    lodsb
seg000:6C91		    call    PathSepGotCh
seg000:6C94		    jnz	    short ScanPathChar
seg000:6C96		    call    PATHCHRCMP
seg000:6C99		    retn
seg000:6C99 ScanPathChar    endp
seg000:6C99
seg000:6C9A
seg000:6C9A ; =============== S	U B R O	U T I N	E =======================================
seg000:6C9A
seg000:6C9A
seg000:6C9A _$CLOSE	    proc near		    ; CODE XREF: DOS_ABORT+Ep
seg000:6C9A					    ; seg000:602Bp ...
seg000:6C9A		    call    CheckOwner
seg000:6C9D		    jb	    short CloseError
seg000:6C9F		    push    ss
seg000:6CA0		    pop	    ds
seg000:6CA1		    mov	    word ptr ds:THISSFT, di
seg000:6CA5		    mov	    word ptr ds:THISSFT+2, es
seg000:6CA9		    cmp	    word ptr es:[di], 1
seg000:6CAD		    jz	    short FreeJFN
seg000:6CAF		    mov	    al,	es:[di+2]
seg000:6CB3		    and	    al,	0F0h
seg000:6CB5		    cmp	    al,	70h
seg000:6CB7		    jz	    short PostFree
seg000:6CB9
seg000:6CB9 FreeJFN:				    ; CODE XREF: _$CLOSE+13j
seg000:6CB9		    call    pJFNFromHandle
seg000:6CBC		    mov	    byte ptr es:[di], 0FFh
seg000:6CC0
seg000:6CC0 PostFree:				    ; CODE XREF: _$CLOSE+1Dj
seg000:6CC0		    call    DOS_CLOSE
seg000:6CC3		    jb	    short CloseError
seg000:6CC5		    mov	    ah,	3Eh
seg000:6CC7
seg000:6CC7 Sys_Ret_OK_j1:			    ; CODE XREF: _$READ:Sys_Ret_OK_j2j
seg000:6CC7		    jmp	    SYS_RET_OK
seg000:6CCA ; ---------------------------------------------------------------------------
seg000:6CCA
seg000:6CCA CloseError:				    ; CODE XREF: _$CLOSE+3j
seg000:6CCA					    ; _$CLOSE+29j ...
seg000:6CCA		    jmp	    SYS_Ret_Err
seg000:6CCA _$CLOSE	    endp
seg000:6CCA
seg000:6CCD ; ---------------------------------------------------------------------------
seg000:6CCD
seg000:6CCD _$COMMIT:				    ; DATA XREF: seg000:0ED0o
seg000:6CCD		    call    CheckOwner
seg000:6CD0		    jb	    short CommitError
seg000:6CD2		    push    ss
seg000:6CD3		    pop	    ds
seg000:6CD4		    mov	    word ptr ds:THISSFT, di
seg000:6CD8		    mov	    word ptr ds:THISSFT+2, es
seg000:6CDC		    call    DOS_COMMIT
seg000:6CDF		    jb	    short CommitError
seg000:6CE1		    mov	    ah,	68h
seg000:6CE3 ; START OF FUNCTION	CHUNK FOR _$READ
seg000:6CE3
seg000:6CE3 Sys_Ret_OK_j2:			    ; CODE XREF: _$READ:ok_donej
seg000:6CE3		    jmp	    short Sys_Ret_OK_j1
seg000:6CE5 ; ---------------------------------------------------------------------------
seg000:6CE5
seg000:6CE5 CommitError:			    ; CODE XREF: seg000:6CD0j
seg000:6CE5					    ; seg000:6CDFj ...
seg000:6CE5		    jmp	    short CloseError
seg000:6CE5 ; END OF FUNCTION CHUNK FOR	_$READ
seg000:6CE7 ; ---------------------------------------------------------------------------
seg000:6CE7
seg000:6CE7 _$ExtHandle:			    ; DATA XREF: seg000:0ECEo
seg000:6CE7		    xor	    bp,	bp
seg000:6CE9		    cmp	    bx,	20
seg000:6CEC		    jnb	    short exth2
seg000:6CEE		    mov	    bx,	20
seg000:6CF1
seg000:6CF1 exth2:				    ; CODE XREF: seg000:6CECj
seg000:6CF1		    mov	    es,	ss:CurrentPDB
seg000:6CF6		    mov	    cx,	word ptr es:BCON
seg000:6CFB		    cmp	    bx,	cx
seg000:6CFD		    jz	    short ok_done
seg000:6CFF		    ja	    short larger
seg000:6D01		    mov	    bp,	1
seg000:6D04		    mov	    ds,	es:MAXSEC
seg000:6D09		    mov	    si,	bx
seg000:6D0B		    sub	    cx,	bx
seg000:6D0D
seg000:6D0D chck_handles:			    ; CODE XREF: seg000:6D13j
seg000:6D0D		    cmp	    byte ptr [si], -1
seg000:6D10		    jnz	    short too_many_files
seg000:6D12		    inc	    si
seg000:6D13		    loop    chck_handles
seg000:6D15		    cmp	    bx,	20
seg000:6D18		    ja	    short larger
seg000:6D1A		    mov	    bp,	2
seg000:6D1D		    mov	    di,	24
seg000:6D20		    push    bx
seg000:6D21		    jmp	    short movhandl
seg000:6D23 ; ---------------------------------------------------------------------------
seg000:6D23		    nop
seg000:6D24
seg000:6D24 larger:				    ; CODE XREF: seg000:6CFFj
seg000:6D24					    ; seg000:6D18j
seg000:6D24		    cmp	    bx,	0FFFFh
seg000:6D27		    jz	    short invalid_func
seg000:6D29		    clc
seg000:6D2A		    push    bx
seg000:6D2B		    add	    bx,	0Fh
seg000:6D2E		    mov	    cl,	4
seg000:6D30		    ror	    bx,	cl
seg000:6D32		    and	    bx,	1FFFh
seg000:6D36		    push    bp
seg000:6D37		    call    _$ALLOC
seg000:6D3A		    pop	    bp
seg000:6D3B		    jb	    short no_memory
seg000:6D3D		    mov	    es,	ax
seg000:6D3F		    xor	    di,	di
seg000:6D41
seg000:6D41 movhandl:				    ; CODE XREF: seg000:6D21j
seg000:6D41		    mov	    ds,	ss:CurrentPDB
seg000:6D46		    test    bp,	3
seg000:6D4A		    jz	    short enlarge
seg000:6D4C		    pop	    cx
seg000:6D4D		    push    cx
seg000:6D4E		    jmp	    short copy_hand
seg000:6D50 ; ---------------------------------------------------------------------------
seg000:6D50		    nop
seg000:6D51 ; START OF FUNCTION	CHUNK FOR _$READ
seg000:6D51
seg000:6D51 ok_done:				    ; CODE XREF: seg000:6CFDj
seg000:6D51					    ; _$READ:ExtHandle_okj
seg000:6D51		    jmp	    short Sys_Ret_OK_j2
seg000:6D51 ; END OF FUNCTION CHUNK FOR	_$READ
seg000:6D53 ; ---------------------------------------------------------------------------
seg000:6D53
seg000:6D53 too_many_files:			    ; CODE XREF: seg000:6D10j
seg000:6D53		    mov	    al,	4
seg000:6D55 ; START OF FUNCTION	CHUNK FOR _$READ
seg000:6D55
seg000:6D55 ExtHandle_err_j1:			    ; CODE XREF: _$READ:ExtHandle_errj_2j
seg000:6D55		    jmp	    short CommitError
seg000:6D55 ; END OF FUNCTION CHUNK FOR	_$READ
seg000:6D57 ; ---------------------------------------------------------------------------
seg000:6D57
seg000:6D57 enlarge:				    ; CODE XREF: seg000:6D4Aj
seg000:6D57		    mov	    cx,	word ptr ds:BCON
seg000:6D5B
seg000:6D5B copy_hand:				    ; CODE XREF: seg000:6D4Ej
seg000:6D5B		    mov	    dx,	cx
seg000:6D5D		    lds	    si,	ds:BCON+2
seg000:6D61		    rep	movsb
seg000:6D63		    pop	    cx
seg000:6D64		    push    cx
seg000:6D65		    sub	    cx,	dx
seg000:6D67		    mov	    al,	-1
seg000:6D69		    rep	stosb
seg000:6D6B		    mov	    ds,	ss:CurrentPDB
seg000:6D70		    cmp	    word ptr ds:BCON+2,	0
seg000:6D75		    jnz	    short update_info
seg000:6D77		    push    bp
seg000:6D78		    push    ds
seg000:6D79		    push    es
seg000:6D7A		    mov	    es,	ds:MAXSEC
seg000:6D7E		    call    _$DEALLOC
seg000:6D81		    pop	    es
seg000:6D82		    pop	    ds
seg000:6D83		    pop	    bp
seg000:6D84
seg000:6D84 update_info:			    ; CODE XREF: seg000:6D75j
seg000:6D84		    test    bp,	2
seg000:6D88		    jz	    short non_psp
seg000:6D8A		    mov	    word ptr ds:BCON+2,	18h
seg000:6D90		    jmp	    short final
seg000:6D92 ; ---------------------------------------------------------------------------
seg000:6D92		    nop
seg000:6D93
seg000:6D93 non_psp:				    ; CODE XREF: seg000:6D88j
seg000:6D93		    mov	    word ptr ds:BCON+2,	0
seg000:6D99
seg000:6D99 final:				    ; CODE XREF: seg000:6D90j
seg000:6D99		    mov	    ds:MAXSEC, es
seg000:6D9D		    pop	    word ptr ds:BCON
seg000:6DA1 ; START OF FUNCTION	CHUNK FOR _$READ
seg000:6DA1
seg000:6DA1 ExtHandle_ok:			    ; CODE XREF: _$READ:READ_OKj
seg000:6DA1		    jmp	    short ok_done
seg000:6DA1 ; END OF FUNCTION CHUNK FOR	_$READ
seg000:6DA3 ; ---------------------------------------------------------------------------
seg000:6DA3
seg000:6DA3 no_memory:				    ; CODE XREF: seg000:6D3Bj
seg000:6DA3		    pop	    bx
seg000:6DA4		    mov	    al,	8
seg000:6DA6 ; START OF FUNCTION	CHUNK FOR _$READ
seg000:6DA6
seg000:6DA6 ExtHandle_errj_2:			    ; CODE XREF: _$READ:ExtHandle_errj_3j
seg000:6DA6		    jmp	    short ExtHandle_err_j1
seg000:6DA6 ; END OF FUNCTION CHUNK FOR	_$READ
seg000:6DA8 ; ---------------------------------------------------------------------------
seg000:6DA8
seg000:6DA8 invalid_func:			    ; CODE XREF: seg000:6D27j
seg000:6DA8		    mov	    al,	1
seg000:6DAA ; START OF FUNCTION	CHUNK FOR _$READ
seg000:6DAA
seg000:6DAA ExtHandle_errj_3:			    ; CODE XREF: _$READ:ReadErrorj
seg000:6DAA		    jmp	    short ExtHandle_errj_2
seg000:6DAA ; END OF FUNCTION CHUNK FOR	_$READ
seg000:6DAC
seg000:6DAC ; =============== S	U B R O	U T I N	E =======================================
seg000:6DAC
seg000:6DAC
seg000:6DAC _$READ	    proc near		    ; CODE XREF: ExecRead+7p
seg000:6DAC					    ; DATA XREF: seg000:0E7Eo ...
seg000:6DAC
seg000:6DAC ; FUNCTION CHUNK AT	seg000:6CE3 SIZE 00000004 BYTES
seg000:6DAC ; FUNCTION CHUNK AT	seg000:6D51 SIZE 00000002 BYTES
seg000:6DAC ; FUNCTION CHUNK AT	seg000:6D55 SIZE 00000002 BYTES
seg000:6DAC ; FUNCTION CHUNK AT	seg000:6DA1 SIZE 00000002 BYTES
seg000:6DAC ; FUNCTION CHUNK AT	seg000:6DA6 SIZE 00000002 BYTES
seg000:6DAC ; FUNCTION CHUNK AT	seg000:6DAA SIZE 00000002 BYTES
seg000:6DAC
seg000:6DAC		    mov	    si,	offset DOS_READ
seg000:6DAF
seg000:6DAF ReadDo:				    ; CODE XREF: seg000:6E03j
seg000:6DAF		    call    pJFNFromHandle
seg000:6DB2		    jb	    short ReadError
seg000:6DB4		    mov	    al,	es:[di]
seg000:6DB7		    call    CheckOwner
seg000:6DBA		    jnb	    short ReadSetup
seg000:6DBC
seg000:6DBC ReadError:				    ; CODE XREF: _$READ+6j
seg000:6DBC					    ; _$READ+4Ej ...
seg000:6DBC		    jmp	    short ExtHandle_errj_3
seg000:6DBE ; ---------------------------------------------------------------------------
seg000:6DBE
seg000:6DBE ReadSetup:				    ; CODE XREF: _$READ+Ej
seg000:6DBE		    mov	    word ptr ss:THISSFT, di
seg000:6DC3		    mov	    word ptr ss:THISSFT+2, es
seg000:6DC8		    push    ss:DMAADD
seg000:6DCD		    push    ss:DMAADD_2
seg000:6DD2		    mov	    bx,	dx
seg000:6DD4		    push    cx
seg000:6DD5		    mov	    cl,	4
seg000:6DD7		    shr	    bx,	cl
seg000:6DD9		    pop	    cx
seg000:6DDA		    mov	    ax,	ds
seg000:6DDC		    add	    ax,	bx
seg000:6DDE		    mov	    ds,	ax
seg000:6DE0		    and	    dx,	0Fh
seg000:6DE4		    mov	    ss:DMAADD, dx
seg000:6DE9		    mov	    ss:DMAADD_2, ds
seg000:6DEE		    push    ss
seg000:6DEF		    pop	    ds
seg000:6DF0		    call    si ; DOS_READ
seg000:6DF2		    pop	    ds:DMAADD_2
seg000:6DF6		    pop	    ds:DMAADD
seg000:6DFA		    jb	    short ReadError
seg000:6DFC		    mov	    ax,	cx
seg000:6DFE
seg000:6DFE READ_OK:				    ; CODE XREF: _$LSEEK:LSeek_okj
seg000:6DFE		    jmp	    short ExtHandle_ok
seg000:6DFE _$READ	    endp
seg000:6DFE
seg000:6E00 ; ---------------------------------------------------------------------------
seg000:6E00
seg000:6E00 _$WRITE:				    ; DATA XREF: seg000:0E80o
seg000:6E00		    mov	    si,	offset DOS_WRITE
seg000:6E03		    jmp	    short ReadDo
seg000:6E05
seg000:6E05 ; =============== S	U B R O	U T I N	E =======================================
seg000:6E05
seg000:6E05
seg000:6E05 _$LSEEK	    proc near		    ; CODE XREF: seg000:1EEAp
seg000:6E05					    ; seg000:60A6p ...
seg000:6E05		    call    CheckOwner
seg000:6E08
seg000:6E08 LSeekError:				    ; CODE XREF: seg000:6E7Ej
seg000:6E08		    jb	    short ReadError
seg000:6E0A		    cmp	    al,	2
seg000:6E0C		    jbe	    short LSeekDisp
seg000:6E0E		    mov	    ss:EXTERR_LOCUS, 1
seg000:6E14		    mov	    al,	1
seg000:6E16
seg000:6E16 LSeekError_j1:			    ; CODE XREF: _$LSEEK:LSeekError_j2j
seg000:6E16		    jmp	    short ReadError
seg000:6E18 ; ---------------------------------------------------------------------------
seg000:6E18
seg000:6E18 LSeekDisp:				    ; CODE XREF: _$LSEEK+7j
seg000:6E18		    cmp	    al,	1
seg000:6E1A		    jb	    short LSeekStore
seg000:6E1C		    ja	    short LSeekEOF
seg000:6E1E		    add	    dx,	es:[di+15h]
seg000:6E22		    adc	    cx,	es:[di+17h]
seg000:6E26
seg000:6E26 LSeekStore:				    ; CODE XREF: _$LSEEK+15j
seg000:6E26					    ; _$LSEEK+44j
seg000:6E26		    mov	    ax,	cx
seg000:6E28		    xchg    ax,	dx
seg000:6E29
seg000:6E29 LSeekSetpos:			    ; CODE XREF: _$LSEEK+64j
seg000:6E29		    mov	    es:[di+15h], ax
seg000:6E2D		    mov	    es:[di+17h], dx
seg000:6E31		    call    Get_User_Stack
seg000:6E34		    mov	    [si+6], dx
seg000:6E37
seg000:6E37 LSeek_ok:				    ; CODE XREF: seg000:ft_okj
seg000:6E37		    jmp	    short READ_OK
seg000:6E39 ; ---------------------------------------------------------------------------
seg000:6E39
seg000:6E39 LSeekEOF:				    ; CODE XREF: _$LSEEK+17j
seg000:6E39		    test    word ptr es:[di+5],	8000h
seg000:6E3F		    jnz	    short Check_LSeek_Mode
seg000:6E41
seg000:6E41 LOCAL_LSeek:			    ; CODE XREF: _$LSEEK+4Cj
seg000:6E41					    ; _$LSEEK+5Dj
seg000:6E41		    add	    dx,	es:[di+11h]
seg000:6E45		    adc	    cx,	es:[di+13h]
seg000:6E49		    jmp	    short LSeekStore
seg000:6E4B ; ---------------------------------------------------------------------------
seg000:6E4B
seg000:6E4B Check_LSeek_Mode:			    ; CODE XREF: _$LSEEK+3Aj
seg000:6E4B		    test    word ptr es:[di+2],	8000h
seg000:6E51		    jnz	    short LOCAL_LSeek
seg000:6E53		    mov	    ax,	es:[di+2]
seg000:6E57		    and	    ax,	0F0h
seg000:6E5A		    cmp	    ax,	40h
seg000:6E5D		    jz	    short NET_LSEEK
seg000:6E5F		    cmp	    ax,	30h
seg000:6E62		    jnz	    short LOCAL_LSeek
seg000:6E64
seg000:6E64 NET_LSEEK:				    ; CODE XREF: _$LSEEK+58j
seg000:6E64		    mov	    ax,	1121h
seg000:6E67		    int	    2Fh		    ; Multiplex	- NETWORK REDIRECTOR - SEEK FROM END OF	REMOTE FILE
seg000:6E67					    ; CX:DX = offset (in bytes)	from end
seg000:6E67					    ; ES:DI -> SFT, SFT	DPB field -> DPB of drive with file
seg000:6E67					    ; SS = DOS CS
seg000:6E67					    ; Return: CF set on	error
seg000:6E67					    ; CF clear if successful, DX:AX = new file position
seg000:6E69		    jnb	    short LSeekSetpos
seg000:6E6B
seg000:6E6B LSeekError_j2:			    ; CODE XREF: seg000:ft_err_jj
seg000:6E6B		    jmp	    short LSeekError_j1
seg000:6E6B _$LSEEK	    endp
seg000:6E6B
seg000:6E6D ; ---------------------------------------------------------------------------
seg000:6E6D
seg000:6E6D _$FILE_TIMES:			    ; DATA XREF: seg000:0EAEo
seg000:6E6D		    cmp	    al,	2
seg000:6E6F		    jb	    short ft1
seg000:6E71		    mov	    ss:EXTERR_LOCUS, 1
seg000:6E77		    mov	    al,	1
seg000:6E79
seg000:6E79 ft_err_j:				    ; CODE XREF: seg000:DupErrj
seg000:6E79		    jmp	    short LSeekError_j2
seg000:6E7B ; ---------------------------------------------------------------------------
seg000:6E7B
seg000:6E7B ft1:				    ; CODE XREF: seg000:6E6Fj
seg000:6E7B		    call    CheckOwner
seg000:6E7E		    jb	    short LSeekError
seg000:6E80		    or	    al,	al
seg000:6E82		    jnz	    short ft_set_time
seg000:6E84		    cli
seg000:6E85		    mov	    cx,	es:[di+0Dh]
seg000:6E89		    mov	    dx,	es:[di+0Fh]
seg000:6E8D		    sti
seg000:6E8E		    call    Get_User_Stack
seg000:6E91		    mov	    [si+4], cx
seg000:6E94		    mov	    [si+6], dx
seg000:6E97
seg000:6E97 ft_ok:				    ; CODE XREF: seg000:ok_retj
seg000:6E97		    jmp	    short LSeek_ok
seg000:6E99 ; ---------------------------------------------------------------------------
seg000:6E99
seg000:6E99 ft_set_time:			    ; CODE XREF: seg000:6E82j
seg000:6E99		    call    EcritDisk
seg000:6E9C		    mov	    es:[di+0Dh], cx
seg000:6EA0		    mov	    es:[di+0Fh], dx
seg000:6EA4		    xor	    ax,	ax
seg000:6EA6		    call    ss:ShSU
seg000:6EAB		    and	    word ptr es:[di+5],	0FFBFh
seg000:6EB1		    or	    word ptr es:[di+5],	4000h
seg000:6EB7		    call    LcritDisk
seg000:6EBA
seg000:6EBA ok_ret:				    ; CODE XREF: seg000:6ED8j
seg000:6EBA		    jmp	    short ft_ok
seg000:6EBC ; ---------------------------------------------------------------------------
seg000:6EBC
seg000:6EBC _$DUP:				    ; DATA XREF: seg000:0E8Ao
seg000:6EBC		    mov	    ax,	bx
seg000:6EBE		    call    JFNFree
seg000:6EC1
seg000:6EC1 DupErrorCheck:			    ; CODE XREF: seg000:6EE8j
seg000:6EC1		    jb	    short DupErr
seg000:6EC3		    push    es
seg000:6EC4		    push    di
seg000:6EC5		    pop	    si
seg000:6EC6		    pop	    ds
seg000:6EC7		    xchg    ax,	bx
seg000:6EC8		    call    CheckOwner
seg000:6ECB		    jb	    short DupErr
seg000:6ECD		    call    DOS_Dup_Direct
seg000:6ED0		    call    pJFNFromHandle
seg000:6ED3		    mov	    bl,	es:[di]
seg000:6ED6		    mov	    [si], bl
seg000:6ED8		    jmp	    short ok_ret
seg000:6EDA ; ---------------------------------------------------------------------------
seg000:6EDA
seg000:6EDA DupErr:				    ; CODE XREF: seg000:DupErrorCheckj
seg000:6EDA					    ; seg000:6ECBj
seg000:6EDA		    jmp	    short ft_err_j
seg000:6EDC ; ---------------------------------------------------------------------------
seg000:6EDC
seg000:6EDC _$DUP2:				    ; DATA XREF: seg000:0E8Co
seg000:6EDC		    push    bx
seg000:6EDD		    push    cx
seg000:6EDE		    mov	    bx,	cx
seg000:6EE0		    call    _$CLOSE
seg000:6EE3		    pop	    bx
seg000:6EE4		    pop	    ax
seg000:6EE5		    call    pJFNFromHandle
seg000:6EE8		    jmp	    short DupErrorCheck
seg000:6EEA
seg000:6EEA ; =============== S	U B R O	U T I N	E =======================================
seg000:6EEA
seg000:6EEA
seg000:6EEA CheckOwner	    proc near		    ; CODE XREF: _$CLOSEp
seg000:6EEA					    ; seg000:_$COMMITp	...
seg000:6EEA		    call    SFFromHandle
seg000:6EED		    jnb	    short no_win386
seg000:6EEF
seg000:6EEF ret_label:				    ; CODE XREF: CheckOwner+10j
seg000:6EEF		    retn
seg000:6EF0 ; ---------------------------------------------------------------------------
seg000:6EF0
seg000:6EF0 no_win386:				    ; CODE XREF: CheckOwner+3j
seg000:6EF0		    push    ax
seg000:6EF1		    mov	    ax,	ss:USER_ID
seg000:6EF5		    cmp	    ax,	es:[di+47]
seg000:6EF9		    pop	    ax
seg000:6EFA		    jz	    short ret_label
seg000:6EFC		    mov	    al,	6
seg000:6EFE		    stc
seg000:6EFF		    retn
seg000:6EFF CheckOwner	    endp
seg000:6EFF
seg000:6F00
seg000:6F00 ; =============== S	U B R O	U T I N	E =======================================
seg000:6F00
seg000:6F00
seg000:6F00 _$OPEN	    proc near		    ; CODE XREF: seg000:1ED7p
seg000:6F00					    ; seg000:5F35p
seg000:6F00					    ; DATA XREF: ...
seg000:6F00		    mov	    ch,	16h
seg000:6F02		    call    SetAttrib
seg000:6F05		    mov	    cx,	offset DOS_OPEN
seg000:6F08		    xor	    ah,	ah
seg000:6F0A		    push    ax
seg000:6F0B
seg000:6F0B AccessFile:				    ; CODE XREF: _$CreateNewFile-B1j
seg000:6F0B		    call    EcritDisk
seg000:6F0E		    call    SFNFree
seg000:6F11		    call    LcritDisk
seg000:6F14		    jb	    short OpenFailJ
seg000:6F16		    mov	    ss:SFN, bx
seg000:6F1B		    mov	    word ptr ss:THISSFT, di
seg000:6F20		    mov	    word ptr ss:THISSFT+2, es
seg000:6F25		    call    JFNFree
seg000:6F28		    jnb	    short SaveJFN
seg000:6F2A
seg000:6F2A OpenFailJ:				    ; CODE XREF: _$OPEN+14j
seg000:6F2A		    jmp	    OpenFail
seg000:6F2D ; ---------------------------------------------------------------------------
seg000:6F2D
seg000:6F2D SaveJFN:				    ; CODE XREF: _$OPEN+28j
seg000:6F2D		    mov	    word ptr ss:PJFN, di
seg000:6F32		    mov	    word ptr ss:PJFN+2,	es
seg000:6F37		    mov	    ss:JFN, bx
seg000:6F3C		    mov	    bx,	ss:SFN
seg000:6F41		    mov	    es:[di], bl
seg000:6F44		    mov	    si,	dx
seg000:6F46		    mov	    di,	offset OPENBUF
seg000:6F49		    push    cx
seg000:6F4A		    call    TransPath
seg000:6F4D		    pop	    bx
seg000:6F4E		    lds	    si,	ss:THISSFT
seg000:6F53		    jb	    short OpenCleanJ
seg000:6F55		    cmp	    byte ptr ss:cMeta, -1
seg000:6F5B		    jz	    short SetSearch
seg000:6F5D		    mov	    al,	2
seg000:6F5F
seg000:6F5F OpenCleanJ:				    ; CODE XREF: _$OPEN+53j
seg000:6F5F		    jmp	    short OpenClean
seg000:6F61 ; ---------------------------------------------------------------------------
seg000:6F61		    nop
seg000:6F62
seg000:6F62 SetSearch:				    ; CODE XREF: _$OPEN+5Bj
seg000:6F62		    pop	    ax
seg000:6F63		    xor	    cx,	cx
seg000:6F65		    cmp	    bx,	offset DOS_OPEN
seg000:6F69		    jnz	    short DoOper
seg000:6F6B		    test    al,	80h
seg000:6F6D		    jz	    short DoOper
seg000:6F6F		    and	    al,	7Fh
seg000:6F71		    mov	    cx,	1000h
seg000:6F74
seg000:6F74 DoOper:				    ; CODE XREF: _$OPEN+69j
seg000:6F74					    ; _$OPEN+6Dj
seg000:6F74		    mov	    word ptr [si+2], 0
seg000:6F79		    mov	    word ptr [si+51], 0
seg000:6F7E		    push    ss
seg000:6F7F		    pop	    ds
seg000:6F80		    push    cx
seg000:6F81		    call    bx
seg000:6F83		    pop	    cx
seg000:6F84		    lds	    si,	ds:THISSFT
seg000:6F88		    jb	    short OpenE
seg000:6F8A
seg000:6F8A OpenOK:
seg000:6F8A		    mov	    word ptr [si], 1
seg000:6F8E		    or	    [si+5], cx
seg000:6F91		    mov	    ax,	ss:JFN
seg000:6F95		    call    ss:ShCol
seg000:6F9A		    mov	    ss:SFN, -1
seg000:6FA1
seg000:6FA1 OpenOKJ:				    ; CODE XREF: seg000:chmod_ok_j1j
seg000:6FA1		    jmp	    SYS_RET_OK
seg000:6FA4 ; ---------------------------------------------------------------------------
seg000:6FA4
seg000:6FA4 OpenClean:				    ; CODE XREF: _$OPEN:OpenCleanJj
seg000:6FA4		    pop	    bx
seg000:6FA5
seg000:6FA5 OpenE:				    ; CODE XREF: _$OPEN+88j
seg000:6FA5		    mov	    word ptr [si], 0
seg000:6FA9		    lds	    si,	ss:PJFN
seg000:6FAE		    mov	    byte ptr [si], 0FFh
seg000:6FB1		    jmp	    short OpenCritLeave
seg000:6FB3 ; ---------------------------------------------------------------------------
seg000:6FB3
seg000:6FB3 OpenFail:				    ; CODE XREF: _$OPEN:OpenFailJj
seg000:6FB3		    sti
seg000:6FB4		    pop	    cx
seg000:6FB5
seg000:6FB5 OpenCritLeave:			    ; CODE XREF: _$OPEN+B1j
seg000:6FB5		    mov	    ss:SFN, -1
seg000:6FBC
seg000:6FBC OpenErrJ:				    ; CODE XREF: seg000:chmod_errjj
seg000:6FBC		    jmp	    SYS_Ret_Err
seg000:6FBC _$OPEN	    endp
seg000:6FBC
seg000:6FBF ; ---------------------------------------------------------------------------
seg000:6FBF
seg000:6FBF _$CREAT:				    ; DATA XREF: seg000:0E78o
seg000:6FBF		    push    cx
seg000:6FC0		    mov	    cx,	offset DOS_CREATE
seg000:6FC3 ; START OF FUNCTION	CHUNK FOR _$CreateNewFile
seg000:6FC3
seg000:6FC3 AccessSet:				    ; CODE XREF: _$CreateNewFile+4j
seg000:6FC3		    mov	    byte ptr ss:ExtFCB+1, 6
seg000:6FC9		    jmp	    AccessFile
seg000:6FC9 ; END OF FUNCTION CHUNK FOR	_$CreateNewFile
seg000:6FCC ; ---------------------------------------------------------------------------
seg000:6FCC
seg000:6FCC _$CHMOD:				    ; DATA XREF: seg000:0E86o
seg000:6FCC		    mov	    di,	offset OPENBUF
seg000:6FCF		    push    ax
seg000:6FD0		    push    cx
seg000:6FD1		    mov	    si,	dx
seg000:6FD3		    call    TransPathSet
seg000:6FD6		    pop	    cx
seg000:6FD7		    pop	    ax
seg000:6FD8		    jb	    short ChModErr
seg000:6FDA		    push    ss
seg000:6FDB		    pop	    ds
seg000:6FDC		    cmp	    byte ptr ds:cMeta, -1
seg000:6FE1		    jnz	    short ChModErr
seg000:6FE3		    mov	    byte ptr ds:ExtFCB+1, 16h
seg000:6FE8		    sub	    al,	1
seg000:6FEA		    jb	    short ChModGet
seg000:6FEC		    jz	    short ChModSet
seg000:6FEE		    mov	    ds:EXTERR_LOCUS, 1
seg000:6FF3		    mov	    al,	1
seg000:6FF5
seg000:6FF5 chmod_errj:				    ; CODE XREF: seg000:ChModEj
seg000:6FF5		    jmp	    short OpenErrJ
seg000:6FF7 ; ---------------------------------------------------------------------------
seg000:6FF7
seg000:6FF7 ChModGet:				    ; CODE XREF: seg000:6FEAj
seg000:6FF7		    call    GET_FILE_INFO
seg000:6FFA		    jb	    short ChModE
seg000:6FFC		    call    Get_User_Stack
seg000:6FFF		    mov	    [si+4], ax
seg000:7002
seg000:7002 chmod_ok_j1:			    ; CODE XREF: seg000:chmod_ok_j2j
seg000:7002		    jmp	    short OpenOKJ
seg000:7004 ; ---------------------------------------------------------------------------
seg000:7004
seg000:7004 ChModSet:				    ; CODE XREF: seg000:6FECj
seg000:7004		    mov	    ax,	cx
seg000:7006		    call    SET_FILE_ATTRIBUTE
seg000:7009		    jb	    short ChModE
seg000:700B
seg000:700B chmod_ok_j2:			    ; CODE XREF: seg000:unlink_ok_Jj
seg000:700B		    jmp	    short chmod_ok_j1
seg000:700D ; ---------------------------------------------------------------------------
seg000:700D
seg000:700D ChModErr:				    ; CODE XREF: seg000:6FD8j
seg000:700D					    ; seg000:6FE1j ...
seg000:700D		    mov	    al,	3
seg000:700F
seg000:700F ChModE:				    ; CODE XREF: seg000:6FFAj
seg000:700F					    ; seg000:7009j ...
seg000:700F		    jmp	    short chmod_errj
seg000:7011 ; ---------------------------------------------------------------------------
seg000:7011
seg000:7011 _$UNLINK:				    ; DATA XREF: seg000:0E82o
seg000:7011		    push    cx
seg000:7012		    mov	    si,	dx
seg000:7014		    mov	    di,	offset OPENBUF
seg000:7017		    call    TransPathSet
seg000:701A		    pop	    cx
seg000:701B		    jb	    short ChModErr
seg000:701D		    cmp	    byte ptr ss:cMeta, -1
seg000:7023		    jnz	    short NotFound
seg000:7025		    push    ss
seg000:7026		    pop	    ds
seg000:7027		    mov	    ch,	6
seg000:7029		    call    SetAttrib
seg000:702C		    call    DOS_DELETE
seg000:702F		    jb	    short UnlinkE
seg000:7031
seg000:7031 unlink_ok_J:			    ; CODE XREF: seg000:7078j
seg000:7031		    jmp	    short chmod_ok_j2
seg000:7033 ; ---------------------------------------------------------------------------
seg000:7033
seg000:7033 NotFound:				    ; CODE XREF: seg000:7023j
seg000:7033					    ; seg000:7059j ...
seg000:7033		    mov	    al,	3
seg000:7035
seg000:7035 UnlinkE:				    ; CODE XREF: seg000:702Fj
seg000:7035					    ; seg000:7076j
seg000:7035		    jmp	    short ChModE
seg000:7037 ; ---------------------------------------------------------------------------
seg000:7037
seg000:7037 _$RENAME:				    ; DATA XREF: seg000:0EACo
seg000:7037		    push    cx
seg000:7038		    push    ds
seg000:7039		    push    dx
seg000:703A		    push    es
seg000:703B		    pop	    ds
seg000:703C		    mov	    si,	di
seg000:703E		    mov	    di,	offset RENBUF
seg000:7041		    call    TransPathSet
seg000:7044		    push    ss:WFP_START
seg000:7049		    pop	    ss:REN_WFP
seg000:704E		    pop	    si
seg000:704F		    pop	    ds
seg000:7050		    pop	    cx
seg000:7051
seg000:7051 epjc2:				    ; CODE XREF: seg000:7063j
seg000:7051		    jb	    short ChModErr
seg000:7053		    cmp	    byte ptr ss:cMeta, -1
seg000:7059		    jnz	    short NotFound
seg000:705B		    push    cx
seg000:705C		    mov	    di,	offset OPENBUF
seg000:705F		    call    TransPathSet
seg000:7062		    pop	    cx
seg000:7063		    jb	    short epjc2
seg000:7065		    push    ss
seg000:7066		    pop	    ds
seg000:7067		    cmp	    byte ptr ds:cMeta, -1
seg000:706C		    jb	    short NotFound
seg000:706E		    mov	    ch,	16h
seg000:7070		    call    SetAttrib
seg000:7073		    call    DOS_RENAME
seg000:7076		    jb	    short UnlinkE
seg000:7078		    jmp	    short unlink_ok_J
seg000:707A
seg000:707A ; =============== S	U B R O	U T I N	E =======================================
seg000:707A
seg000:707A
seg000:707A _$CreateNewFile proc near		    ; CODE XREF: seg000:70F1p
seg000:707A					    ; DATA XREF: seg000:0EB6o
seg000:707A
seg000:707A ; FUNCTION CHUNK AT	seg000:6FC3 SIZE 00000009 BYTES
seg000:707A
seg000:707A		    push    cx
seg000:707B		    mov	    cx,	offset DOS_Create_New
seg000:707E		    jmp	    AccessSet
seg000:707E _$CreateNewFile endp
seg000:707E
seg000:7081
seg000:7081 ; =============== S	U B R O	U T I N	E =======================================
seg000:7081
seg000:7081
seg000:7081 BinToAscii	    proc near		    ; CODE XREF: seg000:70DFp
seg000:7081					    ; seg000:70E4p
seg000:7081		    mov	    cx,	4
seg000:7084
seg000:7084 bta5:				    ; CODE XREF: BinToAscii+16j
seg000:7084		    push    cx
seg000:7085		    mov	    cl,	4
seg000:7087		    rol	    ax,	cl
seg000:7089		    push    ax
seg000:708A		    and	    al,	0Fh
seg000:708C		    add	    al,	'0'
seg000:708E		    cmp	    al,	'9'
seg000:7090		    jbe	    short bta6
seg000:7092		    add	    al,	7
seg000:7094
seg000:7094 bta6:				    ; CODE XREF: BinToAscii+Fj
seg000:7094		    stosb
seg000:7095		    pop	    ax
seg000:7096		    pop	    cx
seg000:7097		    loop    bta5
seg000:7099		    retn
seg000:7099 BinToAscii	    endp
seg000:7099
seg000:709A ; ---------------------------------------------------------------------------
seg000:709A
seg000:709A _$CreateTempFile:			    ; DATA XREF: seg000:0EB4o
seg000:709A		    push    bp
seg000:709B		    mov	    bp,	sp
seg000:709D		    sub	    sp,	10
seg000:70A0		    test    cx,	0FFD8h
seg000:70A4		    jz	    short OKatts
seg000:70A6		    mov	    ax,	5
seg000:70A9		    jmp	    short SETTMPERR
seg000:70AB ; ---------------------------------------------------------------------------
seg000:70AB
seg000:70AB OKatts:				    ; CODE XREF: seg000:70A4j
seg000:70AB		    mov	    [bp-10], cx
seg000:70AE		    mov	    [bp-8], dx
seg000:70B1		    mov	    word ptr [bp-6], ds
seg000:70B4		    mov	    word ptr [bp-2], ds
seg000:70B7		    push    ds
seg000:70B8		    pop	    es
seg000:70B9		    mov	    di,	dx
seg000:70BB		    mov	    cx,	di
seg000:70BD		    neg	    cx
seg000:70BF		    xor	    ax,	ax
seg000:70C1		    repne scasb
seg000:70C3		    dec	    di
seg000:70C4		    mov	    al,	es:[di-1]
seg000:70C8		    call    PATHCHRCMP
seg000:70CB		    jz	    short SETENDPTR
seg000:70CD
seg000:70CD STOREPTH:
seg000:70CD		    mov	    al,	'\'
seg000:70CF		    stosb
seg000:70D0
seg000:70D0 SETENDPTR:				    ; CODE XREF: seg000:70CBj
seg000:70D0		    mov	    [bp-4], di
seg000:70D3
seg000:70D3 CreateLoop:				    ; CODE XREF: seg000:70FDj
seg000:70D3					    ; seg000:7101j
seg000:70D3		    push    ss
seg000:70D4		    pop	    ds
seg000:70D5		    push    bp
seg000:70D6		    call    READTIME
seg000:70D9		    pop	    bp
seg000:70DA		    les	    di,	[bp-4]
seg000:70DD		    mov	    ax,	cx
seg000:70DF		    call    BinToAscii
seg000:70E2		    mov	    ax,	dx
seg000:70E4		    call    BinToAscii
seg000:70E7		    xor	    al,	al
seg000:70E9		    stosb
seg000:70EA		    lds	    dx,	[bp-8]
seg000:70ED		    mov	    cx,	[bp-10]
seg000:70F0		    push    bp
seg000:70F1		    call    _$CreateNewFile
seg000:70F4		    pop	    bp
seg000:70F5		    jnb	    short CreateDone
seg000:70F7		    mov	    ax,	ss:EXTERR
seg000:70FB		    cmp	    al,	50h
seg000:70FD		    jz	    short CreateLoop
seg000:70FF		    cmp	    al,	5
seg000:7101		    jz	    short CreateLoop
seg000:7103
seg000:7103 SETTMPERR:				    ; CODE XREF: seg000:70A9j
seg000:7103		    stc
seg000:7104
seg000:7104 CreateDone:				    ; CODE XREF: seg000:70F5j
seg000:7104		    mov	    sp,	bp
seg000:7106		    pop	    bp
seg000:7107		    jb	    short CreateFail
seg000:7109		    jmp	    SYS_RET_OK
seg000:710C ; ---------------------------------------------------------------------------
seg000:710C
seg000:710C CreateFail:				    ; CODE XREF: seg000:7107j
seg000:710C		    jmp	    SYS_Ret_Err
seg000:710F
seg000:710F ; =============== S	U B R O	U T I N	E =======================================
seg000:710F
seg000:710F
seg000:710F SetAttrib	    proc near		    ; CODE XREF: _$OPEN+2p
seg000:710F					    ; seg000:7029p ...
seg000:710F		    test    byte ptr ss:fSharing, -1
seg000:7115		    jnz	    short Set
seg000:7117		    mov	    cl,	ch
seg000:7119
seg000:7119 Set:				    ; CODE XREF: SetAttrib+6j
seg000:7119		    mov	    byte ptr ss:ExtFCB+1, cl
seg000:711E		    retn
seg000:711E SetAttrib	    endp
seg000:711E
seg000:711F ; ---------------------------------------------------------------------------
seg000:711F
seg000:711F _$LockOper:				    ; DATA XREF: seg000:0EB8o
seg000:711F		    cmp	    al,	1
seg000:7121		    ja	    short lock_bad_func
seg000:7123		    push    di
seg000:7124		    call    SFFromHandle
seg000:7127		    jnb	    short lock_do
seg000:7129		    pop	    di
seg000:712A		    mov	    al,	6
seg000:712C
seg000:712C LockOper_Err_J1:			    ; CODE XREF: seg000:LockOper_Err_J2j
seg000:712C		    jmp	    SYS_Ret_Err
seg000:712F ; ---------------------------------------------------------------------------
seg000:712F
seg000:712F lock_bad_func:			    ; CODE XREF: seg000:7121j
seg000:712F		    mov	    ss:EXTERR_LOCUS, 1
seg000:7135		    mov	    al,	1
seg000:7137
seg000:7137 LockOper_Err_J2:			    ; CODE XREF: seg000:7156j
seg000:7137		    jmp	    short LockOper_Err_J1
seg000:7139 ; ---------------------------------------------------------------------------
seg000:7139
seg000:7139 lock_do:				    ; CODE XREF: seg000:7127j
seg000:7139		    or	    al,	al
seg000:713B		    pop	    ax
seg000:713C		    jz	    short DOS_Lock
seg000:713E		    test    word ptr es:[di+5],	8000h
seg000:7144		    jz	    short LOCAL_UNLOCK
seg000:7146		    push    ax
seg000:7147		    mov	    ax,	110Bh
seg000:714A		    int	    2Fh		    ; Multiplex	- NETWORK REDIRECTOR - UNLOCK REGION OF	FILE
seg000:714A					    ; BX = file	handle,	CX:DX =	starting offset, SI = high word	of size
seg000:714A					    ; STACK: WORD low word of size, ES:DI -> SFT for file
seg000:714A					    ; SFT DPB field -> DPB of drive containing file
seg000:714A					    ; Return: CF set error
seg000:714C		    pop	    bx
seg000:714D		    jmp	    short ValChk
seg000:714F ; ---------------------------------------------------------------------------
seg000:714F
seg000:714F LOCAL_UNLOCK:			    ; CODE XREF: seg000:7144j
seg000:714F		    call    ss:clr_block
seg000:7154
seg000:7154 ValChk:				    ; CODE XREF: seg000:714Dj
seg000:7154					    ; seg000:716Aj ...
seg000:7154		    jnb	    short Lock_OK
seg000:7156		    jmp	    short LockOper_Err_J2
seg000:7158 ; ---------------------------------------------------------------------------
seg000:7158
seg000:7158 Lock_OK:				    ; CODE XREF: seg000:ValChkj
seg000:7158		    jmp	    SYS_RET_OK
seg000:715B ; ---------------------------------------------------------------------------
seg000:715B
seg000:715B DOS_Lock:				    ; CODE XREF: seg000:713Cj
seg000:715B		    test    word ptr es:[di+5],	8000h
seg000:7161		    jz	    short LOCAL_LOCK
seg000:7163		    push    ax
seg000:7164		    mov	    ax,	110Ah
seg000:7167		    int	    2Fh		    ; Multiplex	- NETWORK REDIRECTOR - LOCK REGION OF FILE
seg000:7167					    ; BX = file	handle,	CX:DX =	starting offset, SI = high word	of size
seg000:7167					    ; STACK: WORD low word of size, ES:DI -> SFT
seg000:7167					    ; SFT DPB field -> DPB of drive containing file, SS	= DOS CS
seg000:7167					    ; Return: CF set error
seg000:7169		    pop	    bx
seg000:716A		    jmp	    short ValChk
seg000:716C ; ---------------------------------------------------------------------------
seg000:716C
seg000:716C LOCAL_LOCK:				    ; CODE XREF: seg000:7161j
seg000:716C		    call    ss:set_block
seg000:7171		    jmp	    short ValChk
seg000:7173
seg000:7173 ; =============== S	U B R O	U T I N	E =======================================
seg000:7173
seg000:7173
seg000:7173 LOCK_CHECK	    proc near		    ; CODE XREF: DISKREAD+25p
seg000:7173					    ; DISKWRITE:Not_Truncatep
seg000:7173		    mov	    bx,	ds:RetryCount
seg000:7177
seg000:7177 LockRetry:				    ; CODE XREF: LOCK_CHECK+11j
seg000:7177		    push    bx
seg000:7178		    call    ds:chk_block
seg000:717C		    pop	    bx
seg000:717D		    jb	    short LockN
seg000:717F		    retn
seg000:7180 ; ---------------------------------------------------------------------------
seg000:7180
seg000:7180 LockN:				    ; CODE XREF: LOCK_CHECK+Aj
seg000:7180		    call    Idle
seg000:7183		    dec	    bx
seg000:7184		    jnz	    short LockRetry
seg000:7186		    stc
seg000:7187
seg000:7187 ret_label:				    ; CODE XREF: LOCK_VIOLATION+22j
seg000:7187		    retn
seg000:7187 LOCK_CHECK	    endp
seg000:7187
seg000:7188
seg000:7188 ; =============== S	U B R O	U T I N	E =======================================
seg000:7188
seg000:7188
seg000:7188 LOCK_VIOLATION  proc near		    ; CODE XREF: READ_LOCK_VIOLATION:HARD_ERRp
seg000:7188		    push    ds
seg000:7189		    push    es
seg000:718A		    push    di
seg000:718B		    push    cx
seg000:718C		    mov	    ax,	21h
seg000:718F		    mov	    ds:ALLOWED,	18h
seg000:7194		    les	    bp,	ds:THISDPB
seg000:7198		    mov	    di,	1
seg000:719B		    mov	    cx,	di
seg000:719D		    mov	    dx,	es:[bp+11]
seg000:71A1		    call    HARDERR
seg000:71A4		    pop	    cx
seg000:71A5		    pop	    di
seg000:71A6		    pop	    es
seg000:71A7		    pop	    ds
seg000:71A8		    cmp	    al,	1
seg000:71AA		    jz	    short ret_label
seg000:71AC		    stc
seg000:71AD		    retn
seg000:71AD LOCK_VIOLATION  endp
seg000:71AD
seg000:71AE
seg000:71AE ; =============== S	U B R O	U T I N	E =======================================
seg000:71AE
seg000:71AE
seg000:71AE CheckShare	    proc near		    ; CODE XREF: seg000:2440p
seg000:71AE					    ; SaveFCBInfo:SaveLocalp ...
seg000:71AE		    cmp	    cs:fShare, 0
seg000:71B4		    retn
seg000:71B4 CheckShare	    endp
seg000:71B4
seg000:71B5
seg000:71B5 ; =============== S	U B R O	U T I N	E =======================================
seg000:71B5
seg000:71B5
seg000:71B5 SHARE_CHECK	    proc near		    ; CODE XREF: seg000:372Ep
seg000:71B5					    ; ShareEnter+10p
seg000:71B5		    call    ds:MFT_enter
seg000:71B9
seg000:71B9 shchk_retn:				    ; CODE XREF: SHARE_VIOLATION+22j
seg000:71B9		    retn
seg000:71B9 SHARE_CHECK	    endp
seg000:71B9
seg000:71BA
seg000:71BA ; =============== S	U B R O	U T I N	E =======================================
seg000:71BA
seg000:71BA
seg000:71BA SHARE_VIOLATION proc near		    ; CODE XREF: SHARE_ERROR:HARD_ERRp
seg000:71BA					    ; ShareEnter+1Bp
seg000:71BA					    ; DATA XREF: ...
seg000:71BA		    push    ds
seg000:71BB		    push    es
seg000:71BC		    push    di
seg000:71BD		    mov	    byte ptr ds:SECCLUSPOS+2, 0
seg000:71C2		    mov	    ds:ALLOWED,	18h
seg000:71C7		    les	    bp,	ds:THISDPB
seg000:71CB		    mov	    di,	1
seg000:71CE		    mov	    cx,	di
seg000:71D0		    mov	    dx,	es:[bp+10h]
seg000:71D4		    call    HARDERR
seg000:71D7		    pop	    di
seg000:71D8		    pop	    es
seg000:71D9		    pop	    ds
seg000:71DA		    cmp	    al,	1
seg000:71DC		    jz	    short shchk_retn
seg000:71DE		    stc
seg000:71DF		    retn
seg000:71DF SHARE_VIOLATION endp
seg000:71DF
seg000:71E0
seg000:71E0 ; =============== S	U B R O	U T I N	E =======================================
seg000:71E0
seg000:71E0
seg000:71E0 ShareEnd	    proc near		    ; CODE XREF: seg000:2B50p
seg000:71E0					    ; REN_DEL_Check+5Bp ...
seg000:71E0		    call    ds:MFTClose
seg000:71E4		    retn
seg000:71E4 ShareEnd	    endp
seg000:71E4
seg000:71E5
seg000:71E5 ; =============== S	U B R O	U T I N	E =======================================
seg000:71E5
seg000:71E5
seg000:71E5 ShareEnter	    proc near		    ; CODE XREF: REN_DEL_Check+4Dp
seg000:71E5					    ; MakeNode+68p ...
seg000:71E5		    push    cx
seg000:71E6
seg000:71E6 retry:				    ; CODE XREF: ShareEnter+1Ej
seg000:71E6		    mov	    cx,	ds:RetryCount
seg000:71EA
seg000:71EA attempt:				    ; CODE XREF: ShareEnter+19j
seg000:71EA		    les	    di,	ds:THISSFT
seg000:71EE		    xor	    ax,	ax
seg000:71F0		    mov	    es:[di+51],	ax
seg000:71F4		    push    cx
seg000:71F5		    call    SHARE_CHECK
seg000:71F8		    pop	    cx
seg000:71F9		    jnb	    short done
seg000:71FB		    call    Idle
seg000:71FE		    loop    attempt
seg000:7200		    call    SHARE_VIOLATION
seg000:7203		    jnb	    short retry
seg000:7205
seg000:7205 done:				    ; CODE XREF: ShareEnter+14j
seg000:7205		    pop	    cx
seg000:7206		    retn
seg000:7206 ShareEnter	    endp
seg000:7206
seg000:7206 ; ---------------------------------------------------------------------------
seg000:7207		    db 9 dup(0)
seg000:7210 ; ---------------------------------------------------------------------------
seg000:7210
seg000:7210 IRETT:				    ; DATA XREF: DOSINIT+27o
seg000:7210					    ; DOSINIT+109o ...
seg000:7210		    iret
seg000:7211
seg000:7211 ; =============== S	U B R O	U T I N	E =======================================
seg000:7211
seg000:7211
seg000:7211 DOSINIT	    proc near		    ; CODE XREF: seg000:STARTj
seg000:7211					    ; FETCHI_CHECK+Ap ...
seg000:7211
seg000:7211 ; FUNCTION CHUNK AT	seg000:046C SIZE 00000079 BYTES
seg000:7211
seg000:7211		    cli
seg000:7212		    cld
seg000:7213		    mov	    cs:ENDMEM, dx
seg000:7218		    mov	    cs:INITSP, sp
seg000:721D
seg000:721D loc_721D:
seg000:721D		    mov	    cs:INITSS, ss
seg000:7222		    mov	    ax,	cs
seg000:7224		    mov	    ss,	ax
seg000:7226		    mov	    sp,	offset INITSTACK
seg000:7229		    mov	    word ptr ss:NULDEV+2, ds
seg000:722E		    mov	    word ptr ss:NULDEV,	si
seg000:7233		    push    ds
seg000:7234		    xor	    ax,	ax
seg000:7236		    mov	    ds,	ax
seg000:7238		    mov	    ax,	offset IRETT
seg000:723B		    mov	    ds:word_A8,	ax
seg000:723E		    mov	    ax,	cs
seg000:7240		    mov	    ds:word_AA,	ax
seg000:7243		    pop	    ds
seg000:7244		    call    CHARINIT
seg000:7247		    push    si
seg000:7248		    push    cs
seg000:7249		    pop	    es
seg000:724A		    mov	    di,	offset SFTABL_SFT_SFTable
seg000:724D		    mov	    ax,	3
seg000:7250		    stosw
seg000:7251		    dec	    al
seg000:7253		    stosw
seg000:7254		    xor	    al,	al
seg000:7256		    stosb
seg000:7257		    mov	    al,	0C3h
seg000:7259		    stosw
seg000:725A		    mov	    ax,	si
seg000:725C		    stosw
seg000:725D		    mov	    ax,	ds
seg000:725F		    stosw
seg000:7260		    xor	    ax,	ax
seg000:7262		    stosw
seg000:7263		    stosw
seg000:7264		    stosw
seg000:7265		    dec	    ax
seg000:7266		    stosw
seg000:7267		    stosw
seg000:7268		    inc	    ax
seg000:7269		    stosw
seg000:726A		    stosw
seg000:726B		    add	    di,	7
seg000:726E		    add	    si,	10
seg000:7271		    mov	    cx,	4
seg000:7274		    rep	movsw
seg000:7276		    mov	    cl,	3
seg000:7278		    mov	    al,	' '
seg000:727A		    rep	stosb
seg000:727C		    pop	    si
seg000:727D		    or	    byte ptr [si+4], 3
seg000:7281		    mov	    word ptr ss:BCON, si
seg000:7286		    mov	    word ptr ss:BCON+2,	ds
seg000:728B
seg000:728B CHAR_INIT_LOOP:			    ; CODE XREF: DOSINIT+83j
seg000:728B		    lds	    si,	[si]
seg000:728D		    call    CHARINIT
seg000:7290		    test    byte ptr [si+4], 8
seg000:7294		    jz	    short CHAR_INIT_LOOP
seg000:7296		    mov	    word ptr ss:BCLOCK,	si
seg000:729B		    mov	    word ptr ss:BCLOCK+2, ds
seg000:72A0		    mov	    bp,	offset MEMSTRT
seg000:72A3
seg000:72A3 PERDRV:				    ; CODE XREF: DOSINIT+A1j
seg000:72A3					    ; DOSINIT+FFj
seg000:72A3		    lds	    si,	[si]
seg000:72A5		    cmp	    si,	-1
seg000:72A8		    jz	    short CONTINIT
seg000:72AA		    call    CHARINIT
seg000:72AD		    test    word ptr [si+4], 8000h
seg000:72B2		    jnz	    short PERDRV
seg000:72B4		    mov	    cl,	ss:CALLMED
seg000:72B9		    xor	    ch,	ch
seg000:72BB		    mov	    [si+10], cl
seg000:72BE		    mov	    dl,	ss:NUMIO
seg000:72C3		    xor	    dh,	dh
seg000:72C5		    add	    ss:NUMIO, cl
seg000:72CA		    push    ds
seg000:72CB		    push    si
seg000:72CC		    lds	    bx,	ss:CALLSCNT
seg000:72D1
seg000:72D1 PERUNIT:				    ; CODE XREF: DOSINIT+FBj
seg000:72D1		    mov	    si,	[bx]
seg000:72D3		    inc	    bx
seg000:72D4		    inc	    bx
seg000:72D5		    mov	    es:[bp+0], dl
seg000:72D9		    mov	    es:[bp+1], dh
seg000:72DD		    push    bx
seg000:72DE		    push    cx
seg000:72DF		    push    dx
seg000:72E0		    call    _$SETDPB
seg000:72E3		    mov	    ax,	es:[bp+2]
seg000:72E7		    cmp	    ax,	ss:MAXSEC
seg000:72EC		    jbe	    short NOTMAX
seg000:72EE		    mov	    ss:MAXSEC, ax
seg000:72F2
seg000:72F2 NOTMAX:				    ; CODE XREF: DOSINIT+DBj
seg000:72F2		    pop	    dx
seg000:72F3		    pop	    cx
seg000:72F4		    pop	    bx
seg000:72F5		    mov	    ax,	ds
seg000:72F7		    pop	    si
seg000:72F8		    pop	    ds
seg000:72F9		    mov	    es:[bp+18],	si
seg000:72FD		    mov	    word ptr es:[bp+20], ds
seg000:7301		    push    ds
seg000:7302		    push    si
seg000:7303		    inc	    dh
seg000:7305		    inc	    dl
seg000:7307		    mov	    ds,	ax
seg000:7309		    add	    bp,	32
seg000:730C		    loop    PERUNIT
seg000:730E		    pop	    si
seg000:730F		    pop	    ds
seg000:7310		    jmp	    short PERDRV
seg000:7312 ; ---------------------------------------------------------------------------
seg000:7312
seg000:7312 CONTINIT:				    ; CODE XREF: DOSINIT+97j
seg000:7312		    push    cs
seg000:7313		    pop	    ds
seg000:7314		    mov	    di,	bp
seg000:7316		    mov	    bp,	ds:MAXSEC
seg000:731A		    mov	    ax,	offset IRETT
seg000:731D		    add	    ax,	bp
seg000:731F		    add	    ax,	16
seg000:7322		    mov	    word ptr ds:DPBHEAD, ax
seg000:7325		    mov	    dx,	ax
seg000:7327		    sub	    dx,	offset IRETT ; SYSBUF
seg000:732B		    mov	    bp,	dx
seg000:732D		    add	    bp,	di
seg000:732F		    sub	    bp,	918	    ; ADJFAC
seg000:7333		    push    bp
seg000:7334		    mov	    di,	offset MEMSTRT
seg000:7337		    add	    di,	24
seg000:733A		    mov	    cl,	ds:NUMIO
seg000:733E		    xor	    ch,	ch
seg000:7340
seg000:7340 TRUEDPBAD:				    ; CODE XREF: DOSINIT+136j
seg000:7340		    add	    ax,	32
seg000:7343		    stosw
seg000:7344		    add	    di,	30
seg000:7347		    loop    TRUEDPBAD
seg000:7349		    sub	    di,	32
seg000:734C		    mov	    ax,	-1
seg000:734F		    stosw
seg000:7350		    add	    bp,	15
seg000:7353		    rcr	    bp,	1
seg000:7355		    mov	    cl,	3
seg000:7357		    shr	    bp,	cl
seg000:7359		    mov	    dx,	cs
seg000:735B		    add	    dx,	bp
seg000:735D		    mov	    bx,	15
seg000:7360		    mov	    cx,	ds:ENDMEM
seg000:7364		    mov	    bp,	cs
seg000:7366		    mov	    ds:ENDMEM, cx
seg000:736A		    mov	    es,	bp
seg000:736C		    mov	    es:DSKCHRET_3, es
seg000:7371		    xor	    ax,	ax
seg000:7373		    mov	    ds,	ax
seg000:7375		    mov	    es,	ax
seg000:7377		    mov	    di,	82h
seg000:737A		    mov	    ax,	bp
seg000:737C		    mov	    word ptr ds:START, offset DIVOV
seg000:7382		    mov	    word ptr ds:START+2, ax
seg000:7385		    mov	    cx,	17
seg000:7388		    rep	stosw
seg000:738A		    add	    di,	6
seg000:738D		    mov	    cx,	43
seg000:7390		    rep	stosw
seg000:7392		    mov	    di,	80h
seg000:7395		    mov	    ax,	offset _IRET
seg000:7398		    mov	    cx,	9
seg000:739B
seg000:739B iset1:				    ; CODE XREF: DOSINIT+18Ej
seg000:739B		    stosw
seg000:739C		    add	    di,	2
seg000:739F		    loop    iset1
seg000:73A1		    add	    di,	4
seg000:73A4		    mov	    cx,	22
seg000:73A7
seg000:73A7 iset2:				    ; CODE XREF: DOSINIT+19Aj
seg000:73A7		    stosw
seg000:73A8		    add	    di,	2
seg000:73AB		    loop    iset2
seg000:73AD		    mov	    ax,	bp
seg000:73AF		    mov	    ds:word_BC,	offset INT2F
seg000:73B5		    mov	    ds:ENTRYPOINT, 0EAh
seg000:73BA		    mov	    ds:ENTRYPOINT_1, offset CALL_ENTRY
seg000:73C0		    mov	    ds:ENTRYPOINT_3, ax
seg000:73C3		    mov	    word ptr ds:MFT_get, offset	QUIT
seg000:73C9		    mov	    word ptr ds:ShSave,	offset COMMAND
seg000:73CF		    mov	    word ptr ds:ShChk, 100h
seg000:73D5		    mov	    word ptr ds:ShChk+2, dx
seg000:73D9		    mov	    word ptr ds:ShSU, offset ABSDRD
seg000:73DF		    mov	    word ptr ds:SFTABL,	offset ABSDWRT
seg000:73E5		    mov	    ds:SFTABL_SFT_SFCOUNT, offset STAY_RESIDENT
seg000:73EB		    push    cs
seg000:73EC		    pop	    ds
seg000:73ED		    push    cs
seg000:73EE		    pop	    es
seg000:73EF		    mov	    di,	offset JShare
seg000:73F2		    mov	    ax,	cs
seg000:73F4		    mov	    cx,	15
seg000:73F7
seg000:73F7 iset3:				    ; CODE XREF: DOSINIT+1EAj
seg000:73F7		    add	    di,	2
seg000:73FA		    stosw
seg000:73FB		    loop    iset3
seg000:73FD		    mov	    ax,	offset TIMEBUF
seg000:7400		    add	    ax,	0Fh
seg000:7403		    mov	    cl,	4
seg000:7405		    shr	    ax,	cl
seg000:7407		    mov	    di,	ds
seg000:7409		    add	    di,	ax
seg000:740B		    inc	    di
seg000:740C		    mov	    ds:CurrentPDB, di
seg000:7410		    push    bp
seg000:7411		    push    dx
seg000:7412		    mov	    ax,	ds:ENDMEM
seg000:7415		    mov	    dx,	di
seg000:7417		    call    setmem
seg000:741A		    push    cs
seg000:741B		    pop	    ds
seg000:741C		    mov	    di,	24
seg000:741F		    xor	    ax,	ax
seg000:7421		    stosw
seg000:7422		    stosb
seg000:7423		    mov	    al,	0FFh
seg000:7425		    mov	    cx,	17
seg000:7428		    rep	stosb
seg000:742A		    push    cs
seg000:742B		    pop	    es
seg000:742C		    mov	    word ptr ds:SFT_ADDR+2, ds
seg000:7430		    mov	    si,	offset COUNTRY_CDPG
seg000:7433		    mov	    word ptr es:[si+79], es
seg000:7437		    mov	    word ptr es:[si+84], es
seg000:743B		    mov	    word ptr es:[si+89], es
seg000:743F		    mov	    word ptr es:[si+94], es
seg000:7443		    mov	    word ptr es:[si+123], es
seg000:7447		    mov	    si,	offset SysInitTable
seg000:744A		    mov	    word ptr es:[si+6],	es
seg000:744E		    mov	    word ptr es:[si+2],	es
seg000:7452		    mov	    si,	offset FastTable
seg000:7455		    mov	    word ptr es:[si+4],	es
seg000:7459		    mov	    es:FETCHI_TAG, 5872h
seg000:7460		    pop	    dx
seg000:7461		    pop	    bp
seg000:7462		    pop	    cx
seg000:7463		    mov	    si,	offset MEMSTRT
seg000:7466		    mov	    di,	word ptr ds:DPBHEAD
seg000:746A		    sub	    cx,	di
seg000:746C		    cmp	    di,	si
seg000:746E		    jbe	    short MOVJMP
seg000:7470		    dec	    cx
seg000:7471		    add	    di,	cx
seg000:7473		    add	    si,	cx
seg000:7475		    inc	    cx
seg000:7476		    std
seg000:7477
seg000:7477 MOVJMP:				    ; CODE XREF: DOSINIT+25Dj
seg000:7477		    mov	    es,	bp
seg000:7479		    jmp	    MOVDPB
seg000:7479 DOSINIT	    endp
seg000:7479
seg000:747C
seg000:747C ; =============== S	U B R O	U T I N	E =======================================
seg000:747C
seg000:747C
seg000:747C CHARINIT	    proc near		    ; CODE XREF: DOSINIT+33p
seg000:747C					    ; DOSINIT+7Cp ...
seg000:747C		    mov	    ss:DEVCALL,	26
seg000:7482		    mov	    ss:DEVCALL_REQUNIT,	0
seg000:7488		    mov	    ss:DEVCALL_REQFUNC,	0
seg000:748E		    mov	    word ptr ss:DEVCALL_REQSTAT, 0
seg000:7495		    push    es
seg000:7496		    push    bx
seg000:7497		    push    ax
seg000:7498		    mov	    bx,	offset DEVCALL
seg000:749B		    push    cs
seg000:749C		    pop	    es
seg000:749D		    call    DEVIOCALL2
seg000:74A0		    pop	    ax
seg000:74A1		    pop	    bx
seg000:74A2		    pop	    es
seg000:74A3		    retn
seg000:74A3 CHARINIT	    endp
seg000:74A3
seg000:74A3 ; ---------------------------------------------------------------------------
seg000:74A4		    db 256 dup(0)
seg000:75A4 INITSTACK	    dw 0		    ; DATA XREF: DOSINIT+15o
seg000:75A6 MEMSTRT	    db 10 dup(0)	    ; DATA XREF: DOSINIT+8Fo
seg000:75A6					    ; DOSINIT+123o ...
seg000:75B0 PcDosVersion    db 1Ah,'@@@### PC-DOS Version 3.30',0Dh,0Ah
seg000:75B0		    db 1Ah,0
seg000:75B0 seg000	    ends
seg000:75B0
seg000:75B0
seg000:75B0		    end
