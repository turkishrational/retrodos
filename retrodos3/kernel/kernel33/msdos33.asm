;
; ===========================================================================
; º	This file is generated by The Interactive Disassembler (IDA)	    º
; º	Copyright (c) 2010 by Hex-Rays SA, <support@hex-rays.com>	    º
; º			 Licensed to: Freeware version			    º
; ===========================================================================
;
; Input	MD5   :	EF2ADCA1CB3882118FD247DD4C672C81

; ---------------------------------------------------------------------------
; File Name   :	D:\Documents and Settings\Erdoðan Tan\Desktop\MSDOS33.BIN
; Format      :	Binary file
; Base Address:	0000h Range: 0000h - 75CFh Loaded length: 75CFh

		;.8086
		;.model flat

; --------------------------------------------------------------------------
; Disassembled IBMDOS.COM (PCDOS 3.3 kernel) source has been converted to
; NASM syntax by Erdogan Tan (09/09/2022)
; --------------------------------------------------------------------------
;
; retrodos 3 sysinit:
; c:\nasm> nasm sysini33.s -l sysini33.txt -o SYSINI33.BIN -Z error.txt
;
; original msdos kernel: (original source code instead of retro source code) 
; c:\nasm> nasm msdos33.asm -l msdos33.txt -o MSDOS33.BIN -Z error.txt
;
; retrodos3.s: (retrodos IO.SYS + SYSINI33.BIN + MSDOS33.BIN = RETRODOS.SYS)
; c:\nasm> nasm retrodos33.s -l retrodos33.txt -o MSDOS.SYS -Z error.txt
;
; Name of the RETRODOS.SYS (retrodos 'IO.SYS'+'MSDOS.SYS') is 'MSDOS.SYS'
;
; 'MSDOS.SYS' must be in root directory of bootable Retrodos 3 disk/diskette
; Retrodos 3 boot sector loads 'msdos.sys' and it runs as PCDOS (MSDOS) 3.3

; ===========================================================================

; 09/09/2022

ARENA_SIZE	equ 3	; word
PDB_CPM_CALL	equ 5	; 5 bytes
PDB_EXIT	equ 10	; dword
PDB_CALL_SYSTEM equ 50h	; 5 bytes
ENTRYPOINT	equ 30h*4  ; INT30h vector

; ===========================================================================

[BITS 16]
[ORG 0]
		; 15/09/2022
		; 14/09/2022
		; 13/09/2022
		; 10/09/2022
		; 09/09/2022
		; 08/09/2022
		; 07/09/2022 - Erdogan Tan (Istanbul) - Retro DOS v3.x (2022)
START:
		jmp	DOSINIT

; ---------------------------------------------------------------------------

		; 07/09/2022

		dw 0
		db 0
		db 42h	; B
		db 55h	; U
		db 47h	; G
		db 20h
		dw 0
		dw 0
MYNUM:		dw 0
FCBLRU:		dw 0
OpenLRU:	dw 0
OEM_HANDLER:	dw -1
		dw -1
LeaveAddr:	dw LeaveDOS
RetryCount:	dw 3
RetryLoop:	dw 1
LastBuffer:	dd -1
CONTPOS:	dw 0
arena_head:	dw 0
SYSINITVARS:
DPBHEAD:	dd 0
SFT_ADDR:	dd SFTABL
BCLOCK:		dd 0
BCON:		dd 0
MAXSEC:		dw 128
BUFFHEAD:	dd 0
CDSAddr:	dd 0
SFTFCB:		dd 0
KEEPCOUNT:	dw 0
NUMIO:		db 0
CDSCOUNT:	db 0
NULDEV:		dd 0
		dw 8004h
		dw SNULDEV
		dw INULDEV
		db 'NUL     '
SPLICES:	db 0

		db 90h

JShare:		dd BadCall
MFT_enter:	dd OKCall
MFTClose:	dd OKCall
MFTclU:		dd BadCall
MFTCloseP:	dd BadCall
MFTCloN:	dd BadCall
set_block:	dd BadCall
clr_block:	dd BadCall
chk_block:	dd OKCall
MFT_get:	dd BadCall
ShSave:		dd BadCall
ShChk:		dd BadCall
ShCol:		dd OKCall
ShCloseFile:	dd BadCall
ShSU:		dd BadCall

SFTABL:		dd -1
SFTABL_SFT_SFCOUNT:
		dw 5
SFTABL_SFT_SFTable:
		dw 0
		dw 0
		dw 0
		dw 0
		dw 0
		dw 0
		dw 0
		times 16 db 0
		dw 0
		db 0
		db 0
		db 0
		dw 0
		dw 0
		times 226 db 0
CARPOS:		db 0
STARTPOS:	db 0
INBUF:		db 0
		times 127 db 0
CONBUF:		dw 0
		db 0
		times 128 db 0
PFLAG:		db 0
VERFLG:		db 0
CHARCO:		db 3
chSwitch:	db '/'
AllocMethod:	db 0
fShare:		db 0
DIFFNAM:	db 1
MYNAME:		times 16 db 20h

		dw EcritDisk
		dw LcritDisk
		dw EcritDevice
		dw LcritDevice
		dw 0

		db 90h

ERRORMODE:	db 0
INDOS:		db 0
WPERR:		db 0FFh
EXTERR_LOCUS:	db 0
EXTERR:		dw 0
EXTERR_ACTION:	db 0
EXTERR_CLASS:	db 0
EXTERRPT:	dw 0
		dw 0
DMAADD:		dw 80h
		dw 0
CurrentPDB:	dw 0
ConC_Spsave:	dw 0
exit_code:	dw 0
CURDRV:		db 0
CNTCFLAG:	db 0
USER_IN_AX:	db 0
		db 0
PROC_ID:	dw 0
USER_ID:	dw 0
FirstArena:	dw 0
BestArena:	dw 0
LastArena:	dw 0
ENDMEM:		dw 0
LASTENT:	dw 0
FAILERR:	db 0
ALLOWED:	db 0
NoSetDir:	db 0
DidCTRLC:	db 0
SpaceFlag:	db 0
		db 90h
DAY:		db 0
MONTH:		db 0
YEAR:		dw 0
DAYCNT:		dw 0FFFFh
WEEKDAY:	db 0
CONSWAP:	db 0
IDLEINT:	db 1
fAborting:	db 0

DEVCALL:	db 0
DEVCALL_REQUNIT:
		db 0
DEVCALL_REQFUNC:
		db 0
DEVCALL_REQSTAT:
		times 10 db 0

CALLMED:	db 0
CALLXAD:	db 0
CALLVIDM:	db 0
		dw 0
CALLSCNT:	dd 0
CALLVIDRW:	dd 0
CALLDEVAD:	dw 0
		dw 0

IOCALL		db 0
IOCALL_REQUNIT	db 0
IOCALL_REQFUNC	db 0
IOCALL_REQSTAT: db 0
		times 9 db 0
IOMED:		db 0
IOXAD:		db 0
IOCTL_REQ_REG_SI:
		db 0
		db 0
IOCTL_REQ_REG_DI:
		db 0
IOSCNT:		db 0
IOCTL_REQ_GENERICIOCTL_PACKET:
		db 0
		db 0
		db 0
DSKSTCALL:	dw 0Eh
DSKSTCOM:	db 5
DSKSTST:	times 10 db 0
DSKCHRET:	db 0
DEVIOBUF_PTR:	db 5Eh
		db 3
		dw 0
DSKSTCNT:	db 1
		db 0
		db 0
		db 0
CreatePDB:	db 0
		db 0
USERNUM:	dw 0
		db 0
OEMNUM:		db 0
		dw USTABLE
DATASEGMENT:
INITBLOCK:	; 272 bytes
TIMEBUF:	dw 0
		dw 0
		dw 0
DEVIOBUF:	dw 0
OPENBUF:	db 0
		times 127 db 0
RENBUF:		dw 0
		times 49 db 0
RENBUF_SF_ENTRY_sf_MFT:
		dw 0
		times 75 db 0
SEARCHBUF:	times 8 db 0

INITSP:		dw 0
INITSS:		dw 0

; ---------------------------------------------------------------------------

		; 07/09/2022
MOVDPB:
		mov	ss, [cs:INITSS]
		mov	sp, [cs:INITSP]
		rep movsb
		cld
		mov	[es:DMAADD+2], dx
		mov	si, word [DPBHEAD]
		mov	[es:DPBHEAD+2], es
		mov	[es:SFT_ADDR+2], es
		mov	cl, [NUMIO]
		xor	ch, ch
SETFINDPB:
		mov	word [es:si+1Ah], es
		mov	byte [es:si+17h], -1
		add	si, 32
		loop	SETFINDPB
		sub	si, 32
		mov	word [es:si+1Ah], -1
		push	es
		mov	di, 721Fh ; SYSBUF+15
		rcr	di, 1
		shr	di, 1
		shr	di, 1
		shr	di, 1
		mov	ax, es
		add	ax, di
		mov	es, ax
		xor	di, di
		mov	word [BUFFHEAD+2], es
		mov	word [BUFFHEAD], di
		mov	word [es:di+4], 0FFh
		mov	word [es:di], -1
		mov	word [es:di+2], -1
		pop	es
		push	es
		inc	dx
		mov	si, [ENDMEM]
		call	_$DUP_PDB
		pop	es
		mov	ax, [cs:CurrentPDB]
		mov	[es:CurrentPDB], ax
		mov	byte [es:CreatePDB], 0
		dec	ax
		mov	[es:arena_head], ax
		push	ds
		mov	ds, ax
		mov	byte [START], 5Ah
		mov	word [START+1], 0
		sub	ax, [es:ENDMEM]
		neg	ax
		dec	ax
		mov	[ARENA_SIZE], ax
		pop	ds
		mov	di, SFTABL_SFT_SFTable
		mov	ax, 3
		stosw
		mov	di, SysInitTable
		retf

; ---------------------------------------------------------------------------

; 09/09/2022

DEVFCB		equ DATASEGMENT+398
NAME1		equ DEVFCB  ; DATASEGMENT+398
NAME2		equ NAME1+12
DEVFCB_dir_time equ NAME2+10
ATTRIB		equ DEVFCB+32 
ExtFCB		equ ATTRIB+1
SATTRIB		equ ExtFCB+1	
Open_Access	equ SATTRIB+1
FOUNDDEL	equ Open_Access+1
FOUND_DEV	equ FOUNDDEL+1	
fSplice		equ FOUND_DEV+1
fSharing	equ fSplice+1
SECCLUSPOS	equ fSharing+1
TRANS		EQU SECCLUSPOS+1 ; DATASEGMENT+439
READOP		EQU TRANS+1
THISDRV		equ READOP+1
INSMODE		equ THISDRV+3
cMeta		equ INSMODE+1
CREATING	equ cMeta+3	
 
; ---------------------------------------------------------------------------

		; 07/09/2022

DELALL:		db 0 ; DELALL equ CREATING+1 ; 09/09/2022
EXITHOLD:	dd 0
User_SP:	dw 0
User_SS:	dw 0
CONTSTK:	dw 0
THISDPB:	dd 0
CLUSSAVE:	dw 0
CLUSSEC:	dw 0
PREREAD:	dw 0
FATBYT:		dw 0
FATBYTE:	dw 0
DEVPT:		dd 0
THISSFT:	dd 0
THISCDS:	dd 0
THISFCB:	dd 0
SFN:		dw -1
JFN:		dw 0
PJFN:		dd 0
WFP_START:	dw 0
REN_WFP:	dw 0
CURR_DIR_END:	dw 0
NEXTADD:	dw 0
LASTPOS:	dw 0
CLUSNUM:	dw 0
DIRSEC:		dw 0
DIRSTART:	dw 0
SECPOS:		dw 0
VALSEC:		dw 0
BYTSECPOS:	dw 0
BYTPOS:		dd 0
BYTCNT1:	dw 0
BYTCNT2:	dw 0
SECCNT:		dw 0
ENTFREE:	dw 0
ENTLAST:	dw 0
NXTCLUSNUM:	dw 0
GROWCNT:	dd 0
CURBUF:		dd 0
CONSFT:		dd 0
SaveBX:		dw 0
SaveDS:		dw 0
restore_tmp:	dw 0
NSS:		dw 0
NSP:		dw 0
RENAMEDMA:	db 0
RENAMEDMA_1:	times 12 db 0
RENAMEDMA_13:	dw 0
RENAMEDMA_15:	dw 0
		dd 0
RENAMEDMA_21:	times 11 db 0
RENAMEDMA_21_dir_attr:
		db 0
		times 298 db 0
AUX_STACK_SF_ENTRY_size:
		dw 0
		times 51 db 0
AUXSTACK:	dw 0
		times 382 db 0
DSKSTACK:	dw 0
		times 144 db 0
		; 15/09/2022	
;ADJFAC:	dw 0
		;times 236 db 0
		times 238 db 0
IOSTACK:	db 0
VOLCHNG_FLAG:	db 0
VIRTUAL_OPEN:	db 0
SWAP_END:	dw 0
		times 621 db 0

MSVERS:		db 3
		db 30
		;db 31 ; 14/09/2022

YRTAB:		db 200
		db 166
		db 200
		db 165
		db 200
		db 165
		db 200
MONTAB_x1:	db 165
MONTAB:		db 31
february:	db 28
		db 31
		db 30
		db 31
		db 30
		db 31
		db 31
		db 30
		db 31
		db 30
		db 31

I21_MAP_E_TAB:
		db 38h,2,1,2
		db 39h,3,3,2,5
		db 3Ah,4,10h,3,2,5
		db 3Bh,2,2,3
		db 3Ch,4,3,2,4,5
		db 3Dh,5,3,2,0Ch,4,5
		db 3Eh,1,6
		db 3Fh,2,6,5
		db 40h,2,6,5
		db 41h,	3, 3, 2, 5
		db 42h,2,6,1
		db 43h,	4, 3, 2, 1, 5
		db 44h,5,0Fh,0Dh,1,6,5
		db 45h,2,6,4
		db 46h,2,6,4
		db 47h,1,0Fh
		db 48h,2,7,8
		db 49h,2,7,9
		db 4Ah,3,7,9,8
		db 4Bh,8,3,1,2,4,0Bh,0Ah,8,5
		db 4Eh,3,3,2,12h
		db 4Fh,1,12h
		db 56h,4,11h,3,2,5
		db 57h,2,6,1
		db 58h,1,1
		db 5Ah,4,3,2,4,5
		db 5Bh,5,50h,3,2,4,5
		db 5Ch,4,6,1,24h,21h
		db 65h,2,1,2
		db 66h,2,1,2
		db 68h,1,6
		db 67h,3,4,8,1
		db 0FFh
ERR_TABLE_21:
		db 1,7,4,0FFh
		db 2,8,3,2
		db 3,8,3,2
		db 4,1,4,1
		db 5,3,3,0FFh
		db 6,7,4,1
		db 7,7,5,5
		db 8,1,4,5
		db 9,7,4,5
		db 0Ah,7,4,5
		db 0Bh,9,3,1
		db 0Ch,7,4,1
		db 0Dh,9,4,1
		db 0Fh,8,3,2
		db 10h,3,3,2
		db 11h,0Dh,3,2
		db 12h,8,3,2
		db 50h,0Ch,3,2
		db 20h,0Ah,2,2
		db 21h,0Ah,2,2
		db 54h,1,4,0FFh
		db 56h,3,3,1
		db 52h,1,4,2
		db 32h,9,3,3
		db 55h,0Ch,3,3
		db 57h,9,3,1
		db 53h,0Dh,4,1
		db 24h,1,4,5
		db 0FFh,0FFh,0FFh,0FFh
ERR_TABLE_24:
		db 13h,0Bh,7,2
		db 14h,4,5,1
		db 15h,5,7,0FFh
		db 16h,4,5,1
		db 17h,0Bh,4,2
		db 18h,4,5,1
		db 19h,5,1,2
		db 1Ah,0Bh,7,2
		db 1Bh,0Bh,4,2
		db 1Ch,2,7,4
		db 1Dh,5,4,0FFh
		db 1Eh,5,4,0FFh
		db 1Fh,0Dh,4,0FFh
		db 20h,0Ah,2,2
		db 21h,0Ah,2,2
		db 22h,0Bh,7,2
		db 32h,9,3,3
		db 23h,7,4,1
		db 24h,1,4,5
		db 0FFh,0Dh,5,0FFh
ErrMap24:
		db 13h
		db 14h
		db 15h
		db 16h
		db 17h
		db 18h
		db 19h
		db 1Ah
		db 1Bh
		db 1Ch
		db 1Dh
		db 1Eh
		db 1Fh
		db 1Fh
		db 1Fh
		db 22h

MAXCALL:	db 36
MAXCOM:		db 104
DISPATCH:	
		dw _$ABORT
		dw _$STD_CON_INPUT
		dw _$STD_CON_OUTPUT
		dw _$STD_AUX_INPUT
		dw _$STD_AUX_OUTPUT
		dw _$STD_PRINTER_OUTPUT
		dw _$RAW_CON_IO
		dw _$RAW_CON_INPUT
		dw _$STD_CON_INPUT_NO_ECHO
		dw _$STD_CON_STRING_OUTPUT
		dw _$STD_CON_STRING_INPUT
		dw _$STD_CON_INPUT_STATUS
		dw _$STD_CON_INPUT_FLUSH
		dw _$DISK_RESET
		dw _$SET_DEFAULT_DRIVE
		dw _$FCB_OPEN
		dw _$FCB_CLOSE
		dw _$DIR_SEARCH_FIRST
		dw _$DIR_SEARCH_NEXT
		dw _$FCB_DELETE
		dw _$FCB_SEQ_READ
		dw _$FCB_SEQ_WRITE
		dw _$FCB_CREATE
		dw _$FCB_RENAME
		dw NO_OP
		dw _$GET_DEFAULT_DRIVE
		dw _$SET_DMA
		dw _$SLEAZEFUNC
		dw _$SLEAZEFUNCDL
		dw NO_OP
		dw NO_OP
		dw _$GET_DEFAULT_DPB
		dw NO_OP
		dw _$FCB_RANDOM_READ
		dw _$FCB_RANDOM_WRITE
		dw _$GET_FCB_FILE_LENGTH
		dw _$GET_FCB_POSITION
		dw _$SET_INTERRUPT_VECTOR
		dw _$CREATE_PROCESS_DATA_BLOCK
		dw _$FCB_RANDOM_READ_BLOCK
		dw _$FCB_RANDOM_WRITE_BLOCK
		dw _$PARSE_FILE_DESCRIPTOR
		dw _$GET_DATE
		dw _$SET_DATE
		dw _$GET_TIME
		dw _$SET_TIME
		dw _$SET_VERIFY_ON_WRITE
		dw _$GET_DMA
		dw _$GET_VERSION
		dw _$KEEP_PROCESS
		dw _$GET_DPB
		dw _$SET_CTRL_C_TRAPPING
		dw _$GET_INDOS_FLAG
		dw _$GET_INTERRUPT_VECTOR
		dw _$GET_DRIVE_FREESPACE
		dw _$CHAR_OPER
		dw _$INTERNATIONAL
		dw _$MKDIR
		dw _$RMDIR
		dw _$CHDIR
		dw _$CREAT
		dw _$OPEN
		dw _$CLOSE
		dw _$READ
		dw _$WRITE
		dw _$UNLINK
		dw _$LSEEK
		dw _$CHMOD
		dw _$IOCTL
		dw _$DUP
		dw _$DUP2
		dw _$CURRENT_DIR
		dw _$ALLOC
		dw _$DEALLOC
		dw _$SETBLOCK
		dw _$EXEC
		dw _$EXIT
		dw _$WAIT
		dw _$FIND_FIRST
		dw _$FIND_NEXT
		dw _$SET_CURRENT_PDB
		dw _$GET_CURRENT_PDB
		dw _$GET_IN_VARS
		dw _$SETDPB
		dw _$GET_VERIFY_ON_WRITE
		dw _$DUP_PDB
		dw _$RENAME
		dw _$FILE_TIMES
		dw _$ALLOCOPER
		dw _$GetExtendedError
		dw _$CreateTempFile
		dw _$CreateNewFile
		dw _$LockOper
		dw _$ServerCall
		dw _$UserOper
		dw _$AssignOper
		dw _$NameTrans
		dw NO_OP
		dw _$GET_CURRENT_PDB
		dw NO_OP
		dw _$SET_PRINTER_FLAG
		dw _$GetExtCntry
		dw _$GetSetCdPg
		dw _$ExtHandle
		dw _$COMMIT
FOO:		dw Leave2F
DTab:		dw DOSTable
DOSTable:
		db 46
		dw DOSInstall
		dw DOS_CLOSE
		dw RECSET
		dw DOSGetGroup
		dw PATHCHRCMP
		dw OUTT
		dw NET_I24_ENTRY
		dw PLACEBUF
		dw FREESFT
		dw BUFWRITE
		dw SHARE_VIOLATION
		dw SHARE_ERROR
		dw SET_SFT_MODE
		dw DATE16
		dw SETVISIT
		dw SCANPLACE
		dw SKIPVISIT
		dw StrCpy
		dw StrLen
		dw Ucase
		dw POINTCOMP
		dw CHECKFLUSH
		dw SFFromSFN
		dw GetCDSFromDrv
		dw Get_User_Stack
		dw GetThisDrv
		dw DriveFromText
		dw SETYEAR
		dw DSUM
		dw DSLIDE
		dw StrCmp
		dw InitCDS
		dw pJFNFromHandle
		dw _$NameTrans
		dw CAL_LK
		dw DEVNAME
		dw Idle
		dw DStrLen
		dw NLS_OPEN
		dw _$CLOSE
		dw NLS_LSEEK
		dw _$READ
		dw FastInit
		dw NLS_IOCTL
		dw GetDevList
		dw NLS_GETEXT
SysInitTable:	dd DPBHEAD
		dd COUNTRY_CDPG
FastTable:	dw 4
		dw FastRet
		dw 0
FastOpen_Ext_Info:
		times 5 db 0
Dir_Info_Buff:	times 32 db 0
FastOpenFlg:	db 0
Next_Element_Start:
		dw 0
User_SP_2F:	dw FAKE_STACK_2F
FAKE_STACK_2F:	times 12 dw 0
SCAN_FLAG:	db 0
DISK_FULL:	db 0
DATE_FLAG:	dw 0
FETCHI_TAG:	dw 0

ERRIN:		db 2
		db 6
		db 12
		db 4
		db 8
		db 0
ERROUT		db 80h
		db 40h
		db 2
		db 10h
		db 4
		db 3

international_table:
		db 24
		dw 1
USTABLE:
		dw 0
		db '$'
		db 0
		db 0
		db 0
		db 0
		db ','
		db 0
		db '.'
		db 0
		db '-'
		db 0
		db ':'
		db 0
		db 0
		db 2
		db 0
		dw MAP_CASE
		dw 0
		db ','
		db 0
		db -1
COUNTRY_CDPG:
		db 0
		db 0
		db 0
		db 0
		db 0
		db 0
		db 0
		db 0
		db '\COUNTRY.SYS',0
		times 51 db 0
		dw 437
		dw 5
CDPG_ccSetUcase:
		db 2
		dw UCASE_TAB
		dw 0
		db 4
		dw FILE_UCASE_TAB
		dw 0
		db 5
		dw FILE_CHAR_TAB
		dw 0
		db 6
		dw COLLATE_TAB
		dw 0
		db 1
		dw 38
		dw 1
		dw 437
CDPG_ccDFormat:
		dw 0
		db '$'
		db 0
		db 0
		db 0
		db 0
		db ','
		db 0
		db '.'
		db 0
		db '-'
		db 0
		db ':'
		db 0
		db 0
		db 2
		db 0
		dw MAP_CASE
		dw 0
		db ','
		db 0
		dw 0
		dw 0
		dw 0
		dw 0
		dw 0
UCASE_TAB:
		dw 128
		db 128,154,69,65,142,65,143,128
		db 69,69,69,73,73,73,142,143
		db 144,146,146,79,153,79,85,85
		db 89,153,154,155,156,157,158,159
		db 65,73,79,85,165,165,166,167
		db 168,169,170,171,172,173,174,175
		db 176,177,178,179,180,181,182,183
		db 184,185,186,187,188,189,190,191
		db 192,193,194,195,196,197,198,199
		db 200,201,202,203,204,205,206,207
		db 208,209,210,211,212,213,214,215
		db 216,217,218,219,220,221,222,223
		db 224,225,226,227,228,229,230,231
		db 232,233,234,235,236,237,238,239
		db 240,241,242,243,244,245,246,247
		db 248,249,250,251,252,253,254,255
FILE_UCASE_TAB:
		dw 128
		db 128,154,69,65,142,65,143,128
		db 69,69,69,73,73,73,142,143
		db 144,146,146,79,153,79,85,85
		db 89,153,154,155,156,157,158,159
		db 65,73,79,85,165,165,166,167
		db 168,169,170,171,172,173,174,175
		db 176,177,178,179,180,181,182,183
		db 184,185,186,187,188,189,190,191
		db 192,193,194,195,196,197,198,199
		db 200,201,202,203,204,205,206,207
		db 208,209,210,211,212,213,214,215
		db 216,217,218,219,220,221,222,223
		db 224,225,226,227,228,229,230,231
		db 232,233,234,235,236,237,238,239
		db 240,241,242,243,244,245,246,247
		db 248,249,250,251,252,253,254,255
FILE_CHAR_TAB:
		dw 22
		db 1,0,255
		db 0,0,20h
		db 2,14
		db '."/\[]:|<>+=;,',0
		db 23 dup(0)
COLLATE_TAB:
		dw 256
		db 0,1,2,3,4,5,6,7
		db 8,9,0Ah,0Bh,0Ch,0Dh,0Eh,0Fh
		db 10h,11h,12h,13h,14h,15h,16h,17h
		db 18h,19h,1Ah,1Bh,1Ch,1Dh,1Eh,1Fh
		db 20h,21h,22h,23h,24h,25h,26h,27h
		db 28h,29h,2Ah,2Bh,2Ch,2Dh,2Eh,2Fh
		db 30h,31h,32h,33h,34h,35h,36h,37h
		db 38h,39h,3Ah,3Bh,3Ch,3Dh,3Eh,3Fh
		db 40h,41h,42h,43h,44h,45h,46h,47h
		db 48h,49h,4Ah,4Bh,4Ch,4Dh,4Eh,4Fh
		db 50h,51h,52h,53h,54h,55h,56h,57h
		db 58h,59h,5Ah,5Bh,5Ch,5Dh,5Eh,5Fh
		db 60h,41h,42h,43h,44h,45h,46h,47h
		db 48h,49h,4Ah,4Bh,4Ch,4Dh,4Eh,4Fh
		db 50h,51h,52h,53h,54h,55h,56h,57h
		db 58h,59h,5Ah,7Bh,7Ch,7Dh,7Eh,7Fh
		db 43h,55h,45h,41h,41h,41h,41h,43h
		db 45h,45h,45h,49h,49h,49h,41h,41h
		db 45h,41h,41h,4Fh,4Fh,4Fh,55h,55h
		db 59h,4Fh,55h,24h,24h,24h,24h,24h
		db 41h,49h,4Fh,55h,4Eh,4Eh,0A6h,0A7h
		db 3Fh,0A9h,0AAh,0ABh,0ACh,21h,22h,22h
		db 0B0h,0B1h,0B2h,0B3h,0B4h,0B5h,0B6h,0B7h
		db 0B8h,0B9h,0BAh,0BBh,0BCh,0BDh,0BEh,0BFh
		db 0C0h,0C1h,0C2h,0C3h,0C4h,0C5h,0C6h,0C7h
		db 0C8h,0C9h,0CAh,0CBh,0CCh,0CDh,0CEh,0CFh
		db 0D0h,0D1h,0D2h,0D3h,0D4h,0D5h,0D6h,0D7h
		db 0D8h,0D9h,0DAh,0DBh,0DCh,0DDh,0DEh,0DFh
		db 0E0h,53h,0E2h,0E3h,0E4h,0E5h,0E6h,0E7h
		db 0E8h,0E9h,0EAh,0EBh,0ECh,0EDh,0EEh,0EFh
		db 0F0h,0F1h,0F2h,0F3h,0F4h,0F5h,0F6h,0F7h
		db 0F8h,0F9h,0FAh,0FBh,0FCh,0FDh,0FEh,0FFh
DIVMES:
		db 0Dh,0Ah
		db 'Divide overflow',0Dh,0Ah
DivMesLen:	dw 19
CANCHAR:	db 1Bh
ESCCHAR:	db 0

ESCTAB:		db  40h	; @
		db  4Dh	; M
		db  3Bh	; ;
		db  53h	; S
		db  3Ch	; <
		db  3Eh	; >
		db  3Dh	; =
		db  3Dh	; =
		db  3Fh	; ?
		db  4Bh	; K
		db  52h	; R
		db  52h	; R
		db  41h	; A
		db  41h	; A
ESCFUNC:
		dw GETCH
		dw TwoEsc
		dw ENTERINS_EXITINS
		dw ENTERINS_EXITINS
		dw BACKSP
		dw REEDIT
		dw KILNEW
		dw COPYLIN
		dw SKIPSTR
		dw CopyStr
		dw SKIPONE
		dw COPYONE
		dw COPYONE
		dw CTRLZ
CRTERRTAB:	
		db 0
		db 5
		db 52h
		db 50h
		db 3
		db 5
		db 20h
LenTab:		db 22,14,22,13,15,14
CmdTab:		db 86h,4
		db 86h,5
		db 87h,8
		db 87h,0Ah
		db 86h,7
		db 86h,5
CharType:
		db 0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h
		db 0F6h,0F0h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h
		db 0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h
		db 0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h
		db 0F8h,0FFh,0F6h,0FFh,0FFh,0FFh,0FFh,0FFh
		db 0FFh,0FFh,0FFh,0F4h,0F4h,0FFh,0FEh,0F6h
		db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
		db 0FFh,0FFh,0F4h,0F4h,0F4h,0F4h,0F4h,0FFh
		db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
		db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
		db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
		db 0FFh,0FFh,0FFh,0F6h,0F6h,0F6h,0FFh,0FFh
		db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
		db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
		db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
		db 0FFh,0FFh,0FFh,0FFh,0F4h,0FFh,0FFh,0FFh
		db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
		db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
		db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
		db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
		db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
		db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
		db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
		db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
		db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
		db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
		db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
		db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
		db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
		db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
		db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
		db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
exec_init_sp:
		dw 0
exec_init_ss:	dw 0
exec_init_ip:	dw 0
exec_init_cs:	dw 0
exec_signature:	dw 0
exec_len_mod_512:
		dw 0
exec_pages:	dw 0
exec_rle_count:	dw 0
exec_par_dir:	dw 0
exec_min_BSS:	dw 0
exec_max_BSS:	dw 0
exec_SS:	dw 0
exec_SP:	dw 0
exec_chksum:	dw 0
exec_IP:	dw 0
exec_CS:	dw 0
exec_rle_table:	dw 0

SERVERTAB:	dw SERVER_DISP
SERVERLEAVE:	dw SERVERRETURN
SERVER_DISP:
		db 11
		dw SRV_CALL
		dw COMMIT_ALL
		dw CLOSE_NAME
		dw CLOSE_UID
		dw CLOSE_UID_PID
		dw GET_LIST
		dw GET_DOS_DATA
		dw SPOOL_OPER
		dw SPOOL_OPER
		dw SPOOL_OPER
		dw _$setExtendedError

; ---------------------------------------------------------------------------

		; 07/09/2022
_$SET_CURRENT_PDB:			
		mov	[cs:CurrentPDB], bx
		iret

; ---------------------------------------------------------------------------

		; 07/09/2022
_$GET_CURRENT_PDB:
		mov	bx, [cs:CurrentPDB]
		iret

; ---------------------------------------------------------------------------

		; 07/09/2022
_$SET_CTRL_C_TRAPPING:
		or	al, al
		jnz	short CTRL_C_set
		mov	dl, [cs:CNTCFLAG]
		iret

; ---------------------------------------------------------------------------

		; 07/09/2022
CTRL_C_set:
		cmp	al, 2
		ja	short bad_val
		jz	short scct_3
		push	dx
		and	dl, 1
		mov	[cs:CNTCFLAG], dl
		pop	dx
		iret
scct_3:
		and	dl, 1
		xchg	dl, [cs:CNTCFLAG]
		iret
bad_val:
		mov	al, 0FFh
		iret

; ---------------------------------------------------------------------------

		; 07/09/2022
_$SET_PRINTER_FLAG:
		mov	[cs:IOSTACK], al
		iret

; ---------------------------------------------------------------------------

		; 07/09/2022
QUIT:
		mov	ah, 0
		jmp	short SAVREGS

; ---------------------------------------------------------------------------

		; 07/09/2022
BADCALL:
		mov	al, 0
_IRET:
		iret

; ---------------------------------------------------------------------------

		; 07/09/2022
CALL_ENTRY:
		pop	ax
		pop	ax
		pop	word [cs:User_SP]
		pushf
		cli
		push	ax
		push	word [cs:User_SP]
		cmp	cl, [cs:MAXCALL]
		ja	short BADCALL
		mov	ah, cl
		jmp	short SAVREGS

		; 07/09/2022
COMMAND:
		cmp	ah, [cs:MAXCOM]
		ja	short BADCALL
SAVREGS:
		cmp	ah, 51h
		jz	short _$GET_CURRENT_PDB
		cmp	ah, 62h
		jz	short _$GET_CURRENT_PDB
		cmp	ah, 50h
		jz	short _$SET_CURRENT_PDB
		cmp	ah, 33h
		jz	short _$SET_CTRL_C_TRAPPING
		cmp	ah, 64h
		jz	short _$SET_PRINTER_FLAG
		call	save_world
		mov	[cs:SaveDS], ds
		mov	[cs:SaveBX], bx
		mov	bx, cs
		mov	ds, bx
		inc	byte [INDOS]
		;xor	ax, ax
		; 13/09/2022 - Temporary! (Magic code for Windows 3.1)
		db 	33h, 0C0h
		mov	[USER_ID], ax
		mov	ax, [CurrentPDB]
		mov	[PROC_ID], ax
		mov	ax, [User_SP]
		mov	[NSP], ax
		mov	ax, [User_SS]
		mov	[NSS], ax
		pop	ax
		push	ax
		mov	[User_SP], sp
		mov	[User_SS], ss
		mov	ds, [CurrentPDB]
		mov	word [BCLOCK], sp
		mov	word [BCLOCK+2], ss
		mov	byte [cs:fSharing], 0
		mov	bx, cs
		mov	ss, bx
REDISP:
		mov	sp, AUXSTACK
		sti
		mov	bx, cs
		mov	ds, bx
		xor	bh, bh
		mov	[CONSWAP], bh
		mov	byte [IDLEINT], 1
		mov	[NoSetDir], bh
		mov	[FAILERR], bh
		mov	bl, ah
		shl	bx, 1
		cld
		or	ah, ah
		jz	short DSKROUT
		cmp	ah, 59h
		jz	short DISPCALL
		cmp	ah, 0Ch
		ja	short DSKROUT
IOROUT:
		cmp	byte [ERRORMODE], 0
		jnz	short DISPCALL
		mov	sp, IOSTACK
		jmp	short DISPCALL
DSKROUT:
		mov	word [USER_IN_AX], ax
		mov	byte [EXTERR_LOCUS], 1
		mov	byte [ERRORMODE], 0
		mov	byte [WPERR], -1
		push	ax
		mov	ah, 82h
		int	2Ah		; Microsoft Networks - END DOS CRITICAL	SECTIONS 0 THROUGH 7
		pop	ax
		mov	byte [IDLEINT], 0
		mov	sp, DSKSTACK
		test	byte [CNTCFLAG], -1
		jz	short DISPCALL
		push	ax
		call	DSKSTATCHK
		pop	ax
DISPCALL:
		mov	bx, [cs:bx+DISPATCH]
		xchg	bx, [SaveBX]
		mov	ds, [SaveDS]
		call	word [ss:SaveBX]
LeaveDOS:
		cli
		dec	byte [cs:INDOS]
		mov	ss, [cs:User_SS]
		mov	sp, [cs:User_SP]
		mov	bp, sp
		mov	[bp+0],	al
		mov	ax, [cs:NSP]
		mov	[cs:User_SP], ax
		mov	ax, [cs:NSS]
		mov	[cs:User_SS], ax
		call	restore_world
		iret

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 07/09/2022
restore_world:
		pop	word [cs:restore_tmp]
		pop	ax
		pop	bx
		pop	cx
		pop	dx
		pop	si
		pop	di
		pop	bp
		pop	ds
		pop	es
		jmp	word [cs:restore_tmp]

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 07/09/2022
save_world:
		pop	word [cs:restore_tmp]
		push	es
		push	ds
		push	bp
		push	di
		push	si
		push	dx
		push	cx
		push	bx
		push	ax
		jmp	word [cs:restore_tmp]

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 07/09/2022
Get_User_Stack:
		lds	si, [cs:User_SP]
		retn

; ---------------------------------------------------------------------------

		; 07/09/2022
SNULDEV:
		or	word [es:bx+3], 100h
INULDEV:
		retf

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 07/09/2022
AbsSetup:
		inc	byte [ss:INDOS]
		sti
		cld
		push	ds
		push	ss
		pop	ds
		call	GETBP
		mov	word [es:bp+30], -1
		pop	ds
		jnb	short AbsSetup2
AbsSetup_retn:
		retn
AbsSetup2:
		push	ds
		push	si
		push	ax
		push	ss
		pop	ds
		mov	si, OPENBUF
		mov	[si], al
		add	byte [si], 'A'
		mov	word [si+1], ':'
		mov	ax, 300h
		clc
		int	2Ah		; Microsoft Networks - CHECK DIRECT I/O
					; DS:SI	-> ASCIZ disk device name (may be full path or only drive
					; specifier--must include the colon)
					; Return: CF clear if absolute disk access allowed
		pop	ax
		pop	si
		pop	ds
		jnb	short AbsSetup_retn
		mov	word [ss:EXTERR], 32h
GETBP_RETN:
		retn

; ---------------------------------------------------------------------------

		; 07/09/2022
ABSDRD:
		cli
		mov	[cs:User_SS], ss
		mov	[cs:User_SP], sp
		push	cs
		pop	ss
		mov	sp, DSKSTACK
		push	es
		call	AbsSetup
		jb	short ILEAVE
		call	DSKREAD
TLEAVE:
		jz	short ILEAVE
		push	es
		push	cs
		pop	es
		xor	ah, ah
		mov	cx, 6
		mov	di, ERRIN
		repne scasb
		jnz	short LEAVECODE
		mov	ah, [es:di+5]
LEAVECODE:
		pop	es
		stc
ILEAVE:
		pop	es
		cli
		dec	byte [ss:INDOS]
		mov	ss, [ss:User_SS]
		mov	sp, [cs:User_SP]
		sti
		retf

; ---------------------------------------------------------------------------

		; 07/09/2022
ABSDWRT:
		cli
		mov	[cs:User_SS], ss
		mov	[cs:User_SP], sp
		push	cs
		pop	ss
		mov	sp, DSKSTACK
		push	es
		call	AbsSetup
		jb	short ILEAVE
		call	DSKWRITE
		jmp	short TLEAVE

; ---------------------------------------------------------------------------

		; 07/09/2022
GETBP:
		push	ax
		add	al, 1
		jb	short SKIPGET
		call	GetThisDrv

SKIPGET:
		pop	ax
		jb	short GETBP_RETN
		les	bp, [THISCDS]
		test	word [es:bp+43h], 8000h
		jz	short GETBP_CDS
		mov	word [EXTERR], 32h
		stc
		retn

; ---------------------------------------------------------------------------

		; 07/09/2022
GETBP_CDS:
		les	bp, [es:bp+45h]
GOTDPB:
		mov	word [THISDPB], bp
		mov	word [THISDPB+2], es
		retn
; ---------------------------------------------------------------------------

		; 14/09/2022
		; 07/09/2022
SYS_RET_OK:
		call	FETCHI_CHECK
		call	Get_User_Stack
		and	word [si+16h], 0FFFEh ; 14/09/2022
		; 09/09/2022 - Temporary !
		;db 	81h, 64h, 16h, 0FEh, 0FFh
		jmp	short DO_RET

; ---------------------------------------------------------------------------

		; 07/09/2022
SYS_Ret_Err:
		xor	ah, ah
		call	ETAB_LK
		call	ErrorMap
From_GetSet:
		call	Get_User_Stack
		;or	word [si+16h], 1
		; 09/09/2022 - Temporary !
		db	81h, 4Ch, 16h, 1, 0
		stc
DO_RET:
		mov	[si], ax
		retn

; ---------------------------------------------------------------------------

		; 07/09/2022
NO_OP:
		xor	al, al
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 07/09/2022
FCB_Ret_Err:
		xor	ah, ah
		mov	[ss:EXTERR], ax
		call	ErrorMap
		mov	al, -1
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 07/09/2022
ErrorMap:
		push	si
		mov	si, ERR_TABLE_21
		cmp	byte [ss:FAILERR], 0
		jz	short EXTENDED_NORMAL
		mov	word [ss:EXTERR], 53h
		mov	si, ERR_TABLE_21
EXTENDED_NORMAL:
		call	CAL_LK
		pop	si
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 07/09/2022
CAL_LK:
		push	ds
		push	ax
		push	bx
		push	ss
		pop	ds
		mov	bx, [EXTERR]
TABLK1:
		lodsb
		cmp	al, 0FFh
		jz	short GOT_VALS
		cmp	al, bl
		jz	short GOT_VALS
		add	si, 3
		jmp	short TABLK1
GOT_VALS:
		lodsw
		cmp	ah, 0FFh
		jz	short NO_SET_ACT
		mov	[EXTERR_ACTION], ah
NO_SET_ACT:
		cmp	al, 0FFh
		jz	short NO_SET_CLS
		mov	[EXTERR_CLASS], al
NO_SET_CLS:
		lodsb
		cmp	al, 0FFh
		jz	short NO_SET_LOC
		mov	[EXTERR_LOCUS], al
NO_SET_LOC:
		pop	bx
		pop	ax
		pop	ds
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 07/09/2022
ETAB_LK:
		push	ds
		push	si
		push	cx
		push	bx
		push	ss
		pop	ds
		mov	[EXTERR], ax
		mov	si, I21_MAP_E_TAB
		mov	bh, al
		mov	bl, [USER_IN_AX+1]
TABLK2:
		lodsw
		cmp	al, 0FFh
		jz	short NOT_IN_TABLE
		cmp	al, bl
		jz	short GOT_CALL
		xchg	ah, al
		xor	ah, ah
		add	si, ax
		jmp	short TABLK2
NOT_IN_TABLE:
		mov	al, bh
		jmp	short NO_MAP
GOT_CALL:
		mov	cl, ah
		xor	ch, ch
CHECK_CODE:
		lodsb
		cmp	al, bh
		jz	short NO_MAP
		loop	CHECK_CODE
NO_MAP:
		xor	ah, ah
		pop	bx
		pop	cx
		pop	si
		pop	ds
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 07/09/2022
SetBad:
		mov	ax, 1
		mov	byte [cs:EXTERR_LOCUS], 1
		stc
		retn

; ---------------------------------------------------------------------------

		; 07/09/2022
BadCall:
		call	SetBad
		retf

; ---------------------------------------------------------------------------

		; 07/09/2022
OKCall:
		clc
		retf

; ---------------------------------------------------------------------------

		; 07/09/2022
INT2F:
		sti
		cmp	ah, 11h
		jnz	short INT2FSHR
TestInstall:
		or	al, al
		jz	short Leave2F
BadFunc:
		call	SetBad
Leave2F:
		retf	2

; ---------------------------------------------------------------------------

		; 07/09/2022
INT2FSHR:
		cmp	ah, 10h
		jz	short TestInstall
		cmp	ah, 14h
		jz	short TestInstall
		cmp	ah, 12h
		jz	short DispatchDOS
		iret

; ---------------------------------------------------------------------------

		; 07/09/2022
DispatchDOS:
		push	word [cs:FOO]
		push	word [cs:DTab]
		push	ax
		push	bp
		mov	bp, sp
		mov	ax, [bp+0Eh]
		pop	bp
		call	TableDispatch
		jmp	short BadFunc

; ---------------------------------------------------------------------------

		; 07/09/2022
DOSGetGroup:
		push	cs
		pop	ds
		retn

; ---------------------------------------------------------------------------

		; 07/09/2022
DOSInstall:
		mov	al, 0FFh
		retn

; ---------------------------------------------------------------------------

		; 07/09/2022
MAP_CASE:
		cmp	al, 80h
		jnb	short Map1
		retf
Map1:
		sub	al, 80h
		push	ds
		push	bx
		mov	bx, UCASE_TAB+2
		push	cs
		pop	ds
		xlat
		pop	bx
		pop	ds
		retf

; ---------------------------------------------------------------------------

		; 07/09/2022
OEMFunctionKey:
		call	_$STD_CON_INPUT_NO_ECHO
		mov	cl, 14
		push	di
		mov	di, ESCTAB
		repne scasb
		pop	di
		shl	cx, 1
		mov	bp, cx
		jmp	word [bp+ESCFUNC]

; ---------------------------------------------------------------------------

		; 07/09/2022
_$GET_DATE:
		push	ss
		pop	ds
		call	READTIME
		mov	ax, [YEAR]
		mov	bx, word [DAY]
		call	Get_User_Stack
		mov	[si+6],	bx
		add	ax, 1980
		mov	[si+4],	ax
		mov	al, [ss:WEEKDAY]
GetDT_retn:
		retn

; ---------------------------------------------------------------------------

		; 07/09/2022
_$SET_DATE:
		mov	al, -1
		sub	cx, 1980
		jb	short GetDT_retn
		cmp	cx, 119
		ja	short RET24
		or	dh, dh
		jz	short GetDT_retn
		or	dl, dl
		jz	short GetDT_retn
		cmp	dh, 12
		ja	short RET24
		push	ss
		pop	ds
		call	DODATE
RET24:
		retn

; ---------------------------------------------------------------------------

		; 07/09/2022
_$GET_TIME:
		push	ss
		pop	ds
		call	READTIME
		call	Get_User_Stack
		mov	[si+6],	dx
		mov	[si+4],	cx
		xor	al, al
RET26:
		retn
; ---------------------------------------------------------------------------

		; 07/09/2022
_$SET_TIME:
		mov	al, -1
		cmp	ch, 24
		jnb	short RET26
		cmp	cl, 60
		jnb	short RET26
		cmp	dh, 60
		jnb	short RET26
		cmp	dl, 100
		jnb	short RET26
		push	cx
		push	dx
		push	ss
		pop	ds
		mov	bx, TIMEBUF
		mov	cx, 6
		xor	dx, dx
		mov	ax, dx
		push	bx
		call	SETREAD
		push	ds
		lds	si, [BCLOCK]
		call	DEVIOCALL2
		pop	ds
		pop	bx
		call	SETWRITE
		pop	word [TIMEBUF+4]
		pop	word [TIMEBUF+2]
		lds	si, [BCLOCK]
		call	DEVIOCALL2
		xor	al, al
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 07/09/2022
DATE16:
		push	ss
		pop	ds
		push	cx
		push	es
		call	READTIME
		pop	es
		shl	cl, 1
		shl	cl, 1
		shl	cx, 1
		shl	cx, 1
		shl	cx, 1
		shr	dh, 1
		or	cl, dh
		mov	dx, cx
		mov	ax, word [MONTH]
		mov	cl, 4
		shl	al, cl
		shl	ax, 1
		pop	cx
		or	al, [DAY]
RET21:
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 09/09/2022
		; 07/09/2022
READTIME:
		mov	word [DATE_FLAG], 0
		push	si
		push	bx
		mov	bx, TIMEBUF
		mov	cx, 6
		xor	dx, dx
		mov	ax, dx
		call	SETREAD
		push	ds
		lds	si, [BCLOCK]
		call	DEVIOCALL2
		pop	ds
		pop	bx
		pop	si
		mov	ax, [TIMEBUF]
		mov	cx, [TIMEBUF+2] ; 09/09/2022
		mov	dx, [TIMEBUF+4] ; 09/09/2022
		cmp	ax, [DAYCNT]
		jz	short RET21
		cmp	ax, 43830
		jnb	short RET22
		mov	[DAYCNT], ax
		push	si
		push	cx
		push	dx
		xor	dx, dx
		mov	cx, 1461
		div	cx
		shl	ax, 1
		shl	ax, 1
		shl	ax, 1
		mov	cx, ax
		mov	si, YRTAB
		call	DSLIDE
		shr	cx, 1
		jnb	short SK
		add	dx, 200
SK:
		call	SETYEAR
		mov	cl, 1
		mov	si, MONTAB
		call	DSLIDE
		mov	[MONTH], cl
		inc	dx
		mov	[DAY], dl
		call	WKDAY
		pop	dx
		pop	cx
		pop	si
RET22:
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 07/09/2022
DSLIDE:
		mov	ah, 0
DSLIDE1:
		lodsb
		cmp	dx, ax
		jb	short RET22
		sub	dx, ax
		inc	cx
		jmp	short DSLIDE1

; ---------------------------------------------------------------------------

		; 07/09/2022
SETYEAR:
		mov	byte [YEAR], cl
CHKYR:
		test	cl, 3
		mov	al, 28
		jnz	short SAVFEB
		inc	al
SAVFEB:
		mov	[february], al
RET23:
		retn

; ---------------------------------------------------------------------------

		; 07/09/2022
DODATE:
		call	CHKYR
		mov	al, dh
		mov	bx, MONTAB_x1
		xlat
		cmp	al, dl
		mov	al, -1
		jb	short RET23
		call	SETYEAR
		mov	word [DAY], dx
		shr	cx, 1
		shr	cx, 1
		mov	ax, 1461
		mov	bx, dx
		mul	cx
		mov	cl, byte [YEAR]
		and	cl, 3
		mov	si, YRTAB
		mov	dx, ax
		shl	cx, 1
		call	DSUM
		mov	cl, bh
		mov	si, MONTAB
		dec	cx
		call	DSUM
		mov	cl, bl
		dec	cx
		add	dx, cx
		xchg	ax, dx
		mov	[DAYCNT], ax
		push	si
		push	bx
		push	ax
		mov	bx, TIMEBUF
		mov	cx, 6
		xor	dx, dx
		mov	ax, dx
		push	bx
		call	SETREAD
		push	ds
		lds	si, [BCLOCK]
		call	DEVIOCALL2
		pop	ds
		pop	bx
		call	SETWRITE
		pop	word [TIMEBUF]
		push	ds
		lds	si, [BCLOCK]
		call	DEVIOCALL2
		pop	ds
		pop	bx
		pop	si
WKDAY:
		mov	ax, [DAYCNT]
		xor	dx, dx
		mov	cx, 7
		inc	ax
		inc	ax
		div	cx
		mov	[WEEKDAY], dl
		xor	al, al
RET25:
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 07/09/2022
DSUM:
		mov	ah, 0
		jcxz	RET25
DSUM1:
		lodsb
		add	dx, ax
		loop	DSUM1
		retn

; ---------------------------------------------------------------------------

		; 07/09/2022
_$GET_VERSION:
		push	ss
		pop	ds
		mov	bx, word [USERNUM+2]
		mov	cx, [USERNUM]
		mov	ax, word [MSVERS]
		call	Get_User_Stack
		mov	[si+2],	bx
		mov	[si+4],	cx
		mov	[si], ax
		retn

; ---------------------------------------------------------------------------

		; 07/09/2022
_$GET_VERIFY_ON_WRITE:
		mov	al, [ss:VERFLG]
		retn

; ---------------------------------------------------------------------------

_$SET_VERIFY_ON_WRITE:
		and	al, 1
		mov	[ss:VERFLG], al
RET27:
		retn

; ---------------------------------------------------------------------------

		; 07/09/2022
_$INTERNATIONAL:
		cmp	al, 0FFh
		jz	short BX_HAS_CODE
		mov	bl, al
		xor	bh, bh
BX_HAS_CODE:
		push	ds
		pop	es
		push	dx
		pop	di
		push	ss
		pop	ds
		cmp	di, -1
		jz	short international_set
		or	bx, bx
		jnz	short international_find
		mov	si, COUNTRY_CDPG
		jmp	short international_copy

; ---------------------------------------------------------------------------

		; 07/09/2022
international_find:
		mov	bp, 0
		call	international_get
		jb	short errtn
		cmp	bx, 0
		jnz	short international_copy
		mov	bx, dx
		jmp	short international_ok3

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 07/09/2022
international_get:
		mov	si, COUNTRY_CDPG
		cmp	bx, [si+63h]
		jz	short RET27
		mov	dx, bx
		xor	bx, bx
		mov	ax, 1400h
		int	2Fh		; - Multiplex -	NLSFUNC.COM - INSTALLATION CHECK
					; Return: AL = 00h not installed, OK to	install
					; 01h not installed, not OK
					; FFh installed
		cmp	al, 0FFh
		jnz	short interr
		cmp	bp, 0
		jnz	short stcdpg
		mov	ax, 1404h
		int	2Fh		; - Multiplex -	NLSFUNC.COM - GET COUNTRY INFO
					; BX = code page, DX = country code, [SI -> internal code page structure
					; ES:DI	-> user	buffer
					; Return: AL = status
		jmp	short chkok

		nop
stcdpg:
		mov	ax, 1403h
		int	2Fh		; - Multiplex -	NLSFUNC.COM - SET COUNTRY INFO
					; DS:SI	-> internal code page structure
					; BX = code page, DX = country code
					; Return: AL = status
chkok:
		cmp	al, 0
		jz	short RET27
setcarry:
		stc
		retn
interr:
		mov	al, 0FFh
		jmp	short setcarry

; ---------------------------------------------------------------------------

		; 07/09/2022
international_copy:
		mov	bx, [si+63h]
		mov	si, CDPG_ccDFormat
		mov	cx, 24
		rep movsb

international_ok3:
		call	Get_User_Stack
		mov	[si+2],	bx

international_ok:
		mov	ax, bx

international_okj:
		jmp	SYS_RET_OK

; ---------------------------------------------------------------------------

		; 07/09/2022
international_set:
		mov	bp, 1
		call	international_get
		jnb	short international_ok
errtn:
		cmp	al, 0FFh
		jz	short errtn2
errtn1:
		jmp	SYS_Ret_Err
errtn2:
		mov	al, 1
errtn3:
		jmp	short errtn1

; ---------------------------------------------------------------------------

		; 07/09/2022
_$GetExtCntry:
		cmp	cx, 5
		jb	short sizeerror
		push	ss
		pop	ds
		mov	si, COUNTRY_CDPG
		cmp	dx, -1
		jnz	short GETCDPG
		mov	dx, [si+63h]
GETCDPG:
		cmp	bx, -1
		jnz	short CHKAGAIN
		mov	bx, [si+65h]
CHKAGAIN:
		cmp	dx, [si+63h]
		jnz	short CHKNLS
		cmp	bx, [si+65h]
		jnz	short CHKNLS
		mov	bx, [si+48h]
		push	cx
		mov	cx, [si+4Ah]
		mov	si, CDPG_ccSetUcase
NXTENTRY:
		cmp	al, [si]
		jz	short FOUNDIT
		add	si, 5
		loop	NXTENTRY
		pop	cx
capinval:
		mov	al, 1
capinvalj:
		jmp	short errtn3
FOUNDIT:
		movsb
		pop	cx
		cmp	al, 1
		jz	short setsize
		mov	cx, 4
		mov	ax, 5
OK_RETN:
		rep movsb
		mov	cx, ax
		mov	ax, bx
GETDONE:
		call	Get_User_Stack
		mov	[si+4],	cx
GETDONE_J:
		jmp	short international_okj
setsize:
		sub	cx, 3
		cmp	[si], cx
		jnb	short setsize2
		mov	cx, [si]
setsize2:
		mov	[es:di], cx
		add	di, 2
		add	si, 2
		mov	ax, cx
		add	ax, 3
		jmp	short OK_RETN

; ---------------------------------------------------------------------------

		; 07/09/2022
CHKNLS:
		xor	ah, ah
		push	ax
		pop	bp
		mov	ax, 1400h
		int	2Fh		; - Multiplex -	NLSFUNC.COM - INSTALLATION CHECK
					; Return: AL = 00h not installed, OK to	install
					; 01h not installed, not OK
					; FFh installed
		cmp	al, 0FFh
		jz	short NLSNXT
sizeerror:
		mov	al, 1
sizerrorj:
		jmp	short capinvalj
NLSNXT:
		mov	ax, 1402h
		int	2Fh		; - Multiplex -	NLSFUNC.COM - GET COUNTRY INFO
					; BP = subfunction, BX = code page
					; DX = country code, [SI -> internal code page structure
					; ES:DI	-> user	buffer,	CX = size of user buffer
					; Return: AL = status
					; 00h successful
					; else DOS error code
		cmp	al, 0
		jnz	short NLSERROR
		mov	ax, [si+48h]
		jmp	short GETDONE
NLSERROR:
		jmp	short sizerrorj

; ---------------------------------------------------------------------------

		; 07/09/2022
_$GetSetCdPg:
		push	ss
		pop	ds
		mov	si, COUNTRY_CDPG
		cmp	al, 1
		jnz	short setglpg
		mov	bx, [si+65h]
		mov	dx, [si+48h]
		call	Get_User_Stack
		mov	[si+2],	bx
		mov	[si+6],	dx
OK_RETURN:
		jmp	short GETDONE_J
setglpg:
		cmp	al, 2
		jnz	short nomem
		mov	dx, [si+63h]
		mov	ax, 1400h
		int	2Fh		; - Multiplex -	NLSFUNC.COM - INSTALLATION CHECK
					; Return: AL = 00h not installed, OK to	install
					; 01h not installed, not OK
					; FFh installed
		cmp	al, 0FFh
		jnz	short nomem
		mov	ax, 1401h
		int	2Fh		; - Multiplex -	NLSFUNC.COM - CHANGE CODE PAGE
					; DS:SI	-> internal code page structure
					; BX = new code	page, DX = country code???
					; Return: AL = status
					; 00h successful
					; else DOS error code
		cmp	al, 0
		jz	short OK_RETURN
		cmp	al, 65
		jnz	short seterr
		mov	ax, 65
		mov	[EXTERR], ax
		mov	byte [EXTERR_ACTION], 6
		mov	byte [EXTERR_CLASS], 5
		mov	byte [EXTERR_LOCUS], 4
		jmp	From_GetSet
seterr:	
		jmp	short NLSERROR
nomem:
		mov	al, 1
		jmp	short seterr

; ---------------------------------------------------------------------------

		; 07/09/2022
_$GET_DRIVE_FREESPACE:
		push	ss
		pop	ds
		mov	al, dl
		call	GetThisDrv
SET_AX_RET:
		jb	short BADFDRV
		call	DISK_INFO
		xchg	dx, bx
		jb	short SET_AX_RET
		xor	ah, ah
DoSt:
		call	Get_User_Stack
		mov	[si+6],	dx
		mov	[si+4],	cx
		mov	[si+2],	bx
		mov	[si], ax
		retn
BADFDRV:
		mov	al, 0Fh
		call	FCB_Ret_Err
		mov	ax, -1
		jmp	short DoSt

; ---------------------------------------------------------------------------

		; 07/09/2022
_$GET_DMA:
		mov	bx, [ss:DMAADD]
		mov	cx, [ss:DMAADD+2]
		call	Get_User_Stack
		mov	[si+2],	bx
		mov	[si+10h], cx
		retn

; ---------------------------------------------------------------------------

		; 07/09/2022
_$SET_DMA:
		mov	[ss:DMAADD], dx
		mov	[ss:DMAADD+2], ds
		retn

; ---------------------------------------------------------------------------

		; 07/09/2022
_$GET_DEFAULT_DRIVE:
		mov	al, [ss:CURDRV]
		retn

; ---------------------------------------------------------------------------

		; 07/09/2022
_$SET_DEFAULT_DRIVE:
		mov	al, dl
		inc	al
		call	GETVISDRV
		jb	short SETRET
		mov	[ss:CURDRV], al
SETRET:
		mov	al, [ss:CDSCOUNT]
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 07/09/2022
_$GET_INTERRUPT_VECTOR:
		call	RECSET
		les	bx, [es:bx]
		call	Get_User_Stack
		mov	[si+2],	bx
		mov	word [si+10h], es
		retn

; ---------------------------------------------------------------------------

		; 07/09/2022
_$SET_INTERRUPT_VECTOR:
		call	RECSET
		cli
		mov	[es:bx], dx
		mov	word [es:bx+2], ds
		sti
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 07/09/2022
RECSET:
		xor	bx, bx
		mov	es, bx
		mov	bl, al
		shl	bx, 1
		shl	bx, 1
		retn

; ---------------------------------------------------------------------------

		; 07/09/2022
_$CHAR_OPER:
		push	ss
		pop	ds
		cmp	al, 1
		jb	short chop_1
		jz	short chop_2
		cmp	al, 3
		jb	short chop_3
		jz	short chop_5
		mov	al, 0FFh
		retn
chop_1:
		mov	dl, [chSwitch]
		jmp	short chop_4
chop_2:
		mov	[chSwitch], dl
		retn
chop_3:
		mov	dl, 0FFh
chop_4:
		call	Get_User_Stack
		mov	[si+6],	dx
chop_5:
		retn

; ---------------------------------------------------------------------------

		; 07/09/2022
_$GetExtendedError:
		push	ss
		pop	ds
		mov	ax, [EXTERR]
		les	di, [EXTERRPT]
		mov	bx, word [EXTERR_ACTION]
		mov	ch, [EXTERR_LOCUS]
		call	Get_User_Stack
		mov	[si+0Ah], di
		mov	word [si+10h], es
		mov	[si+2],	bx
		mov	[si+4],	cx
		jmp	SYS_RET_OK

; ---------------------------------------------------------------------------

		; 07/09/2022
_$PARSE_FILE_DESCRIPTOR:
		call	MAKEFCB
		push	si
		call	Get_User_Stack
		pop	word [si+8]
		retn

; ---------------------------------------------------------------------------

		; 07/09/2022
_$SLEAZEFUNC:
		mov	dl, 0
_$SLEAZEFUNCDL:
		push	ss
		pop	ds
		mov	al, dl
		call	GetThisDrv
SET_AL_RET:
		mov	al, 0Fh
		jb	short BADSLDRIVE
		call	DISK_INFO
		jb	short SET_AL_RET
		mov	byte [FATBYTE], ah
		mov	di, FATBYTE
		xor	ah, ah
		call	Get_User_Stack
		mov	[si+4],	cx
		mov	[si+6],	bx
		mov	[si+2],	di
		mov	word [si+0Eh], cs
		retn

BADSLDRIVE:
		jmp	FCB_Ret_Err

; ---------------------------------------------------------------------------

		; 07/09/2022
_$GET_INDOS_FLAG:
		call	Get_User_Stack
		mov	word [si+2], INDOS
		mov	word [si+10h], ss
		retn

; ---------------------------------------------------------------------------

		; 07/09/2022
_$GET_IN_VARS:
		call	Get_User_Stack
		mov	word [si+2], DPBHEAD
		mov	word [si+10h], ss
		retn

; ---------------------------------------------------------------------------

		; 07/09/2022
_$GET_DEFAULT_DPB:
		mov	dl, 0
_$GET_DPB:
		push	ss
		pop	ds
		mov	al, dl
		call	GetThisDrv
		jb	short ISNODRV
		les	di, [THISCDS]
		test	word [es:di+43h], 8000h
		jnz	short ISNODRV
		call	EcritDisk
		call	FatRead_CDS
		call	LcritDisk
		jb	short ISNODRV
		call	Get_User_Stack
		mov	[si+2],	bp
		mov	word [si+0Eh], es
		xor	al, al
		retn
ISNODRV:
		mov	al, -1
		retn
; ---------------------------------------------------------------------------

		; 07/09/2022
_$DISK_RESET:
		push	ss
		pop	ds
		mov	al, -1
		call	EcritDisk
		call	FLUSHBUF
		mov	bx, -1
		mov	word [LastBuffer+2], bx
		mov	word [LastBuffer], bx
		lds	si, [BUFFHEAD]
		mov	ax, 20FFh
DRST_1:
		mov	[si+4],	ax
		lds	si, [si]
		cmp	si, bx
		jz	short DRST_2
		mov	[si+4],	ax
		lds	si, [si]
		cmp	si, bx
		jnz	short DRST_1
DRST_2:
		call	LcritDisk
		mov	ax, -1
		mov	ax, 1120h
		int	2Fh		; Multiplex - NETWORK REDIRECTOR - FLUSH ALL DISK BUFFERS
					; DS = DOS CS
					; Return: CF clear (successful)
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 07/09/2022
_$SETDPB:
		mov	di, bp
		add	di, 2
		lodsw
		stosw
		mov	dx, ax
		lodsb
		dec	al
		stosb
		inc	al
		xor	ah, ah
LOG2LOOP:
		test	al, 1
		jnz	short SAVLOG
		inc	ah
		shr	al, 1
		jmp	short LOG2LOOP
SAVLOG:
		mov	al, ah
		stosb
		mov	bl, al
		movsw
		lodsb
		stosb
		mov	bh, al
		lodsw
		stosw
		mov	cl, 5
		shr	dx, cl
		dec	ax
		add	ax, dx
		mov	cx, dx
		xor	dx, dx
		div	cx
		mov	cx, ax
		inc	di
		inc	di
		movsw
		lodsb
		mov	[es:bp+16h], al
		lodsw
		stosb
		mul	bh
		add	ax, [es:bp+6]
		stosw
		add	ax, cx
		mov	[es:bp+0Bh], ax
		sub	ax, [es:bp+0Dh]
		neg	ax
		mov	cl, bl
		shr	ax, cl
		inc	ax
		mov	[es:bp+0Dh], ax
		mov	word [es:bp+1Ch], 0
		mov	word [es:bp+1Eh], -1
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 07/09/2022
_$DUP_PDB:
		mov	byte [cs:CreatePDB], 0FFh
		mov	ds, [cs:CurrentPDB]
		push	si
		jmp	short CreateCopy

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 07/09/2022 
_$CREATE_PROCESS_DATA_BLOCK:
		call	Get_User_Stack
		mov	ds, word [si+14h]
		push	word [START+2]
CreateCopy:
		mov	es, dx
		xor	si, si
		mov	di, si
		mov	cx, 80h
		rep movsw
		mov	cx, 20
		mov	di, 18h
		push	ds
		lds	si, [BCON+2]
		rep movsb
		pop	ds
		test	byte [cs:CreatePDB], 0FFh
		jz	short Create_PDB_cont
		push	cs
		pop	ds
		xor	bx, bx
		mov	cx, 20
Create_dup_jfn:
		push	es
		call	SFFromHandle
		mov	al, -1
		jb	short CreateStash
		test	word [es:di+5], 1000h
		jnz	short CreateStash
		mov	ah, [es:di+2]
		and	ah, 0F0h
		cmp	ah, 70h
		jz	short CreateStash
		mov	word [THISSFT], di
		mov	word [THISSFT+2], es
		call	DOS_DUP
		call	pJFNFromHandle
		mov	al, [es:di]
CreateStash:
		pop	es
		mov	[es:bx+18h], al
		inc	bx
		loop	Create_dup_jfn
		mov	bx, [CurrentPDB]
		mov	[es:OEM_HANDLER+2], bx
		mov	[CurrentPDB], es
		mov	ds, bx
Create_PDB_cont:
		mov	byte [cs:CreatePDB], 0
		pop	ax

; ---------------------------------------------------------------------------

		; 09/09/2022
		; 07/09/2022 
setmem:
		xor	cx, cx
		mov	ds, cx
		mov	es, dx
		mov	si, 88h
		mov	di, 10
		mov	cx, 6
		rep movsw
		mov	word [es:START+2], ax
		sub	ax, dx
		cmp	ax, 0FFFh
		jbe	short HAVDIF
		mov	ax, 0FFFh
HAVDIF:
		sub	ax, 10h
		mov	bx, 0Ch
		sub	bx, ax
		mov	cl, 4
		shl	ax, cl
		mov	ds, dx
		mov	word [PDB_CPM_CALL+1], ax
		mov	word [PDB_CPM_CALL+3], bx
		mov	word [START], 20CDh
		mov	byte [PDB_CPM_CALL], 9Ah
		mov	word [PDB_CALL_SYSTEM], 21CDh  ; 09/09/2022
		mov	byte [PDB_CALL_SYSTEM+2], 0CBh ; "NUL	    "
		mov	word [BCON+2], LeaveAddr
		mov	[MAXSEC], ds
		mov	word [BCON], 20
		mov	word [BUFFHEAD], -1
		mov	word [BUFFHEAD+2], -1
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 07/09/2022
FETCHI_CHECK:
		pushf
		cmp	word [cs:FETCHI_TAG], 5872h
		jz	short FETCHI_CHK_RETN
		call	DOSINIT
FETCHI_CHK_RETN:
		popf
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 07/09/2022
StrCmp:
		push	si
		push	di
		push	ax
Cmplp:
		lodsb
		call	Ucase
		call	PATHCHRCMP
		mov	ah, al
		mov	al, [es:di]
		inc	di
		call	Ucase
		call	PATHCHRCMP
		cmp	ah, al
		jnz	short PopRet
		or	al, al
		jnz	short Cmplp
PopRet:
		pop	ax
		pop	di
		pop	si
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 07/09/2022
StrCpy:
		push	ax
CPYLoop:
		lodsb
		call	Ucase
		call	PATHCHRCMP
		stosb
		or	al, al
		jnz	short CPYLoop
		pop	ax
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 07/09/2022
FStrCpy:
		push	ax
FCPYLoop:
		lodsb
		stosb
		or	al, al
		jnz	short FCPYLoop
		pop	ax
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 07/09/2022
Ucase:
		call	_UCase
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 07/09/2022
StrLen:
		push	di
		push	ax
		mov	cx, 65535
		xor	al, al
		repne scasb
		not	cx
		pop	ax
		pop	di
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 07/09/2022
DStrLen:
		call	XCHGP
		call	StrLen
		call	XCHGP
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 07/09/2022
XCHGP:
		push	ds
		push	es
		pop	ds
		pop	es
		xchg	si, di
xchgp_retn:
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 07/09/2022
Idle:
		test	byte [ss:fSharing], 0FFh
		jnz	short xchgp_retn
		push	cx
		mov	cx, [ss:RetryLoop]
		jcxz	Idle3
Idle1:
		push	cx
		xor	cx, cx
Idle2:
		loop	Idle2
		pop	cx
		loop	Idle1
Idle3:
		pop	cx
		retn

; ---------------------------------------------------------------------------

		; 07/09/2022
TableDispatch:
		push	bp
		mov	bp, sp
		push	bx
		mov	bx, [bp+6]
		mov	bl, [cs:bx]
		cmp	[bp+4],	bl
		jnb	short TableError
		mov	bl, [bp+4]
		xor	bh, bh
		shl	bx, 1
		inc	bx
		add	bx, [bp+6]
		mov	bx, [cs:bx]
		mov	[bp+6],	bx
		pop	bx
		pop	bp
		add	sp, 4
		retn
TableError:
		pop	bx
		pop	bp
		retn	6

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 07/09/2022
TestNet:
		les	di, [cs:THISCDS]
		cmp	di, -1
		jz	short CMCRet
		test	word [es:di+43h], 8000h
		jnz	short CMCRet
		retn
CMCRet:
		cmc
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 07/09/2022
IsSFTNet:
		test	word [es:di+5], 8000h
		retn

; ---------------------------------------------------------------------------

		; 07/09/2022
FastInit:
		mov	di, FastTable
		mov	ax, [cs:di+4]
		mov	bx, cs
		cmp	ax, bx
		jz	short ok_install
		stc
		retn

; ---------------------------------------------------------------------------

		; 07/09/2022
ok_install:
		mov	bx, FastTable
		mov	cx, ds
		mov	[cs:bx+4], cx
		mov	[cs:bx+2], si
		retn

; ---------------------------------------------------------------------------

		; 07/09/2022
FastRet:
		mov	ax, -1
		stc
		retf

; ---------------------------------------------------------------------------

		; 07/09/2022
NLS_OPEN:
		mov	al, cl
		call	_$OPEN
		retn

; ---------------------------------------------------------------------------

		; 07/09/2022
NLS_LSEEK:
		push	word [cs:User_SP]
		push	word [cs:User_SS]
		call	Fake_User_Stack
		mov	ax, bp
		call	_$LSEEK
		pop	word [cs:User_SS]
		pop	word [cs:User_SP]
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 07/09/2022
Fake_User_Stack:
		mov	ax, [cs:User_SP_2F]
		mov	[cs:User_SP], ax
		mov	ax, cs
		mov	[cs:User_SS], ax
		retn

; ---------------------------------------------------------------------------

		; 07/09/2022
GetDevList:
		mov	si, SysInitTable
		lds	si, [cs:si]
		mov	ax, [si+34]
		mov	bx, [si+36]
		retn

; ---------------------------------------------------------------------------

		; 07/09/2022
NLS_IOCTL:
		push	word [cs:User_SP]
		push	word [cs:User_SS]
		call	Fake_User_Stack
		mov	ax, bp
		call	_$IOCTL
		pop	word [cs:User_SS]
		pop	word [cs:User_SP]
		retn

; ---------------------------------------------------------------------------

		; 07/09/2022
NLS_GETEXT:
		mov	ax, [cs:EXTERR]
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 07/09/2022
EcritDisk:
		retn

; ---------------------------------------------------------------------------
		
		; 07/09/2022
		mov	ax, 8001h
		int	2Ah		; Microsoft Networks - BEGIN DOS CRITICAL SECTION
					; AL = critical	section	number (00h-0Fh)
		pop	ax
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 07/09/2022
LcritDisk:
		retn

; ---------------------------------------------------------------------------
		
		; 07/09/2022
		mov	ax, 8101h
		int	2Ah		; Microsoft Networks - END DOS CRITICAL	SECTION
					; AL = critical	section	number (00h-0Fh)
		pop	ax
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 07/09/2022
EcritDevice:
		retn

; ---------------------------------------------------------------------------
		
		; 07/09/2022
		mov	ax, 8002h
		int	2Ah		; Microsoft Networks - BEGIN DOS CRITICAL SECTION
					; AL = critical	section	number (00h-0Fh)
		pop	ax
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 07/09/2022
LcritDevice:
		retn

; ---------------------------------------------------------------------------

		; 07/09/2022
		mov	ax, 8102h
		int	2Ah		; Microsoft Networks - END DOS CRITICAL	SECTION
					; AL = critical	section	number (00h-0Fh)
		pop	ax
		retn

; ---------------------------------------------------------------------------

		; 07/09/2022
_$STD_CON_INPUT_NO_ECHO:
		push	ds
		push	si
INTEST:
		call	STATCHK
		jnz	short GET
		cmp	byte [ss:IOSTACK], 0
		jnz	short no_sys_wait
		mov	ah, 5
		call	IOFUNC
no_sys_wait:
		mov	ah, 84h
		int	2Ah		; Microsoft Networks - KEYBOARD	BUSY LOOP
		cmp	byte [ss:DATE_FLAG], -1
		jnz	short NoUpdate
		push	ax
		push	bx
		push	cx
		push	dx
		push	ds
		push	cs
		pop	ds
		mov	ax, 0
		call	Save_Restore_Packet
		call	READTIME
		mov	ax, 1
		call	Save_Restore_Packet
		push	bx
		mov	bx, DATE_FLAG
		add	bx, 2
		cmp	word [cs:bx], 5872h
		jz	short FETCHI_TAG_chk_ok
		call	DOSINIT
FETCHI_TAG_chk_ok:
		pop	bx
		pop	ds
		pop	dx
		pop	cx
		pop	bx
		pop	ax
NoUpdate:
		inc	word [ss:DATE_FLAG]
		jmp	short INTEST

GET:
		xor	ah, ah
		call	IOFUNC
		pop	si
		pop	ds
		cmp	al, 0
		jnz	short noscan
		mov	byte [ss:SCAN_FLAG], 1
noscan:
		retn

; ---------------------------------------------------------------------------

		; 07/09/2022
_$STD_CON_STRING_OUTPUT:
		mov	si, dx
STRING_OUT1:
		lodsb
		cmp	al, '$'
		jz	short noscan
		call	OUTT
		jmp	short STRING_OUT1

; ---------------------------------------------------------------------------

		; 07/09/2022
_$STD_CON_STRING_INPUT:
		mov	ax, ss
		mov	es, ax
		mov	si, dx
		xor	ch, ch
		lodsw
		or	al, al
		jz	short noscan
		mov	bl, ah
		mov	bh, ch
		cmp	al, bl
		jbe	short noedit
		cmp	byte [bx+si], 0Dh
		jz	short editon
noedit:
		mov	bl, ch
editon:
		mov	dl, al
		dec	dx
newlin:
		mov	al, [ss:CARPOS]
		mov	[ss:STARTPOS], al
		push	si
		mov	di, INBUF
		mov	byte [ss:INSMODE], ch
		mov	bh, ch
		mov	dh, ch
		call	_$STD_CON_INPUT_NO_ECHO
		cmp	al, 0Ah
		jnz	short GOTCH
GETCH:
		call	_$STD_CON_INPUT_NO_ECHO
GOTCH:
		cmp	al, 6
		jz	short GETCH
		cmp	al, [ss:ESCCHAR]
		jz	short ESCape
		cmp	al, 7Fh
		jz	short BACKSPJ
		cmp	al, 8
		jz	short BACKSPJ
		cmp	al, 17h
		nop
		nop
		cmp	al, 15h
		nop
		nop
		cmp	al, 0Dh
		jz	short ENDLIN
		cmp	al, 0Ah
		jz	short PHYCRLF
		cmp	al, [ss:CANCHAR]
		jz	short KILNEW
SAVCH:
		cmp	dh, dl
		jnb	short BUFFUL
		stosb
		inc	dh
		call	BUFOUT
		cmp	byte [ss:INSMODE], 0
		jnz	short GETCH
		cmp	bh, bl
		jnb	short GETCH
		inc	si
		inc	bh
		jmp	short GETCH
BACKSPJ:
		jmp	short BACKSP
BUFFUL:
		mov	al, 7
		call	OUTT
		jmp	short GETCH
ESCape:
		jmp	OEMFunctionKey
ENDLIN:
		stosb
		call	OUTT
		pop	di
		mov	[di-1],	dh
		inc	dh

; ---------------------------------------------------------------------------

		; 07/09/2022
COPYNEW:
		push	ds
		push	es
		pop	ds
		pop	es
		mov	si, INBUF
		mov	cl, dh
		rep movsb

OLDBAK_RETN:
		retn

; ---------------------------------------------------------------------------

		; 07/09/2022
PHYCRLF:
		call	CRLF
		jmp	short GETCH

; ---------------------------------------------------------------------------

		; 07/09/2022
LineDel:
		or	dh, dh
		jz	short GETCH
		call	BackSpace
		jmp	short LineDel

; ---------------------------------------------------------------------------

		; 07/09/2022
WordDel:
		call	BackSpace
		or	dh, dh
		jz	short GetChJ
		mov	al, [es:di-1]
		cmp	al, '0'
		jb	short GetChJ
		cmp	al, '9'
		jbe	short WordDel
		or	al, 20h
		cmp	al, 'a'
		jb	short GetChJ
		cmp	al, 'z'
		jbe	short WordDel
GetChJ:
		jmp	GETCH

; ---------------------------------------------------------------------------

		; 07/09/2022
KILNEW:
		mov	al, '\'
		call	OUTT
		pop	si
PUTNEW:
		call	CRLF
		mov	al, [ss:STARTPOS]
		call	TAB
		jmp	newlin

; ---------------------------------------------------------------------------

		; 07/09/2022
BACKSP:
		call	BackSpace
		jmp	GETCH

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 07/09/2022
BackSpace:
		or	dh, dh
		jz	short OLDBAK
		call	BACKUP
		mov	al, [es:di]
		cmp	al, ' '
		jnb	short OLDBAK
		cmp	al, 9
		jz	short BAKTAB
		cmp	al, 15h
		jz	short OLDBAK
		cmp	al, 14h
		jz	short OLDBAK
		call	BACKMES
OLDBAK:
		cmp	byte [ss:INSMODE], 0
		jnz	short OLDBAK_RETN
		or	bh, bh
		jz	short OLDBAK_RETN
		dec	bh
		dec	si
		retn

; ---------------------------------------------------------------------------

		; 07/09/2022
BAKTAB:
		push	di
		dec	di
		std
		mov	cl, dh
		mov	al, ' '
		push	bx
		mov	bl, 7
		jcxz	FIGTAB
FNDPOS:
		scasb
		jbe	short CHKCNT
		cmp	byte [es:di+1], 9
		jz	short HAVTAB
		dec	bl
CHKCNT:
		loop	FNDPOS
FIGTAB:
		sub	bl, [ss:STARTPOS]
HAVTAB:
		sub	bl, dh
		add	cl, bl
		and	cl, 7
		cld
		pop	bx
		pop	di
		jz	short OLDBAK
TABBAK:
		call	BACKMES
		loop	TABBAK
		jmp	short OLDBAK

; ---------------------------------------------------------------------------

		; 07/09/2022
BACKUP:
		dec	dh
		dec	di
BACKMES:
		mov	al, 8
		call	OUTT
		mov	al, ' '
		call	OUTT
		mov	al, 8
		jmp	OUTT

; ---------------------------------------------------------------------------

		; 07/09/2022
TwoEsc:
		mov	al, [ss:ESCCHAR]
		jmp	SAVCH

; ---------------------------------------------------------------------------

		; 07/09/2022
COPYLIN:
		mov	cl, bl
		sub	cl, bh
		jmp	short COPYEACH

; ---------------------------------------------------------------------------

		; 07/09/2022
CopyStr:
		call	FINDOLD
		jmp	short COPYEACH

; ---------------------------------------------------------------------------

		; 07/09/2022
COPYONE:
		mov	cl, 1
COPYEACH:
		mov	byte [ss:INSMODE], 0
		cmp	dh, dl
		jz	short GETCH2
		cmp	bh, bl
		jz	short GETCH2
		lodsb
		stosb
		call	BUFOUT
		inc	bh
		inc	dh
		loop	COPYEACH
GETCH2:
		jmp	GETCH

; ---------------------------------------------------------------------------

		; 07/09/2022
SKIPONE:
		cmp	bh, bl
		jz	short GETCH2
		inc	bh
		inc	si
		jmp	GETCH

; ---------------------------------------------------------------------------

		; 07/09/2022
SKIPSTR:
		call	FINDOLD
		add	si, cx
		add	bh, cl
		jmp	GETCH

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 07/09/2022
FINDOLD:
		call	_$STD_CON_INPUT_NO_ECHO
		cmp	al, [ss:ESCCHAR]
		jnz	short FindSetup
		call	_$STD_CON_INPUT_NO_ECHO
		jmp	short NotFnd

		nop
FindSetup:
		mov	cl, bl
		sub	cl, bh
		jz	short NotFnd
		dec	cx
		jz	short NotFnd
		push	es
		push	ds
		pop	es
		push	di
		mov	di, si
		inc	di
		repne scasb
		pop	di
		pop	es
		jnz	short NotFnd
		not	cl
		add	cl, bl
		sub	cl, bh
FINDOLD_RETN:
		retn

; ---------------------------------------------------------------------------

		; 07/09/2022
NotFnd:
		pop	bp
		jmp	GETCH

; ---------------------------------------------------------------------------

		; 07/09/2022
REEDIT:
		mov	al, 40h	; '@'
		call	OUTT
		pop	di
		push	di
		push	es
		push	ds
		call	COPYNEW
		pop	ds
		pop	es
		pop	si
		mov	bl, dh
		jmp	PUTNEW

; ---------------------------------------------------------------------------

		; 07/09/2022
ENTERINS_EXITINS:
		not	byte [ss:INSMODE]
		jmp	GETCH

; ---------------------------------------------------------------------------

		; 07/09/2022
CTRLZ:
		mov	al, 1Ah
		jmp	SAVCH

; ---------------------------------------------------------------------------

		; 07/09/2022
CRLF:
		mov	al, 0Dh
		call	OUTT
		mov	al, 0Ah
		jmp	OUTT

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 07/09/2022
_$RAW_CON_IO:
		mov	al, dl
		cmp	al, -1
		jnz	short RAWOUT
		les	di, [ss:User_SP]
		xor	bx, bx
		call	GET_IO_SFT
		jb	short FINDOLD_RETN
		mov	ah, 1
		call	IOFUNC
		jnz	short RESFLG
		call	SPOOLINT
		or	byte [es:di+16h], 40h
		xor	al, al
RET17:
		retn
RESFLG:
		and	byte [es:di+16h], 0BFh
rci0:
		call	SPOOLINT

; ---------------------------------------------------------------------------

		; 07/09/2022
_$RAW_CON_INPUT:
		push	bx
		xor	bx, bx
		call	GET_IO_SFT
		pop	bx
		jb	short RET17
		mov	ah, 1
		call	IOFUNC
		jnz	short rci5
		mov	ah, 84h
		int	2Ah		; Microsoft Networks - KEYBOARD	BUSY LOOP
		jmp	short rci0
rci5:
		xor	ah, ah
		call	IOFUNC
		retn

; ---------------------------------------------------------------------------

		; 07/09/2022
RAWOUT:
		push	bx
		mov	bx, 1
		call	GET_IO_SFT
		jb	short RAWRET1
		mov	bx, [si+5]
		and	bx, 8080h
		cmp	bx, 80h
		jnz	short RAWNORM
		push	ds
		lds	bx, [si+7]
		test	byte [bx+4], 10h
		pop	ds
		jz	short RAWNORM
		int	29h		; DOS 2+ internal - FAST PUTCHAR
					; AL = character to display
RAWRET:
		clc
RAWRET1:
		pop	bx
RAWRET2:
		retn
RAWNORM:
		call	RAWOUT3
		jmp	short RAWRET

; ---------------------------------------------------------------------------

		; 07/09/2022
RAWOUT2:
		call	GET_IO_SFT
		jb	short RAWRET2

; ---------------------------------------------------------------------------

		; 07/09/2022
RAWOUT3:
		push	ax
		jmp	short RAWOSTRT

; ---------------------------------------------------------------------------

		; 07/09/2022
ROLP:
		call	SPOOLINT
RAWOSTRT:
		mov	ah, 3
		call	IOFUNC
		jz	short ROLP
		pop	ax
		mov	ah, 2
		call	IOFUNC
		clc
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 07/09/2022
Save_Restore_Packet:
		push	ds
		push	es
		push	si
		push	di
		cmp	ax, 0
		jz	short save_packet
		mov	si, FAKE_STACK_2F
		mov	di, DEVCALL
		jmp	short set_seg

		nop
save_packet:
		mov	di, FAKE_STACK_2F
		mov	si, DEVCALL
set_seg:
		mov	ax, cs
		mov	ds, ax
		mov	es, ax
		mov	cx, 11
		rep movsw
		pop	di
		pop	si
		pop	es
		pop	ds
		retn

; ---------------------------------------------------------------------------

		; 07/09/2022
_$STD_CON_INPUT:
		call	_$STD_CON_INPUT_NO_ECHO
		push	ax
		call	OUTT
		pop	ax

CON_INPUT_RETN:
		retn

; ---------------------------------------------------------------------------

		; 07/09/2022
_$STD_CON_OUTPUT:
		mov	al, dl

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 07/09/2022
OUTT:
		cmp	al, 20h
		jb	short CTRLOUT
		cmp	al, 7Fh
		jz	short OUTCH
OUTCHA:
		inc	byte [ss:CARPOS]
OUTCH:
		push	ds
		push	si
		inc	byte [ss:CHARCO]
		and	byte [ss:CHARCO], 3
		jnz	short OUTSKIP
		push	ax
		call	STATCHK
		pop	ax
OUTSKIP:
		call	RAWOUT
		pop	si
		pop	ds
		test	byte [ss:PFLAG], 0FFh
		jz	short CON_INPUT_RETN
		push	bx
		push	ds
		push	si
		mov	bx, 1
		call	GET_IO_SFT
		jb	short TRIPOPJ
		mov	bx, [si+5]
		test	bx, 8000h
		jnz	short TRIPOPJ
		test	bx, 80h
		jz	short TRIPOPJ
		mov	bx, 4
		call	GET_IO_SFT
		jb	short TRIPOPJ
		test	word [si+5], 800h
		jz	short LISSTRT2J
		mov	byte [ss:PFLAG], 0
TRIPOPJ:
		jmp	TRIPOP
LISSTRT2J:
		jmp	LISSTRT2
CTRLOUT:
		cmp	al, 0Dh
		jz	short ZERPOS
		cmp	al, 8
		jz	short BACKPOS
		cmp	al, 9
		jnz	short OUTCH
		mov	al, [ss:CARPOS]
		or	al, 0F8h
		neg	al

; ---------------------------------------------------------------------------

		; 07/09/2022
TAB:
		push	cx
		mov	cl, al
		mov	ch, 0
		jcxz	POPTAB
TABLP:
		mov	al, ' '
		call	OUTT
		loop	TABLP
POPTAB:
		pop	cx
		retn

; ---------------------------------------------------------------------------

		; 07/09/2022
ZERPOS:
		mov	byte [ss:CARPOS], 0
		jmp	OUTCH

; ---------------------------------------------------------------------------

		; 07/09/2022
OUTJ:
		jmp	OUTT

; ---------------------------------------------------------------------------

		; 07/09/2022
BACKPOS:
		dec	byte [ss:CARPOS]
		jmp	OUTCH

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 07/09/2022
BUFOUT:
		cmp	al, ' '
		jnb	short OUTJ
		cmp	al, 9
		jz	short OUTJ
		cmp	al, 15h
		jz	short CTRLU
		cmp	al, 14h
		jz	short CTRLU
		push	ax
		mov	al, '^'
		call	OUTT
		pop	ax
		or	al, 40h
CTRLU:
		call	OUTT
BUFOUT_RETN:
		retn

; ---------------------------------------------------------------------------

		; 07/09/2022
_$STD_AUX_INPUT:
		call	STATCHK
		mov	bx, 3
		call	GET_IO_SFT
		jb	short BUFOUT_RETN
		jmp	short TAISTRT

; ---------------------------------------------------------------------------

		; 07/09/2022
AUXILP:
		call	SPOOLINT
TAISTRT:
		mov	ah, 1
		call	IOFUNC
		jz	short AUXILP
		xor	ah, ah
		call	IOFUNC
		retn

; ---------------------------------------------------------------------------

		; 07/09/2022
_$STD_AUX_OUTPUT:
		push	bx
		mov	bx, 3
		jmp	short SENDOUT

; ---------------------------------------------------------------------------

		; 07/09/2022
_$STD_PRINTER_OUTPUT:
		push	bx
		mov	bx, 4
SENDOUT:
		mov	al, dl
		push	ax
		call	STATCHK
		pop	ax
		push	ds
		push	si
LISSTRT2:
		call	RAWOUT2
TRIPOP:
		pop	si
		pop	ds
		pop	bx
SCIS_RETN:
		retn

; ---------------------------------------------------------------------------

		; 07/09/2022
_$STD_CON_INPUT_STATUS:
		call	STATCHK
		mov	al, 0
		jz	short SCIS_RETN
		or	al, -1
		retn

; ---------------------------------------------------------------------------

		; 07/09/2022
_$STD_CON_INPUT_FLUSH:
		push	ax
		push	dx
		xor	bx, bx
		call	GET_IO_SFT
		jb	short BADJFNCON
		mov	ah, 4
		call	IOFUNC
BADJFNCON:
		pop	dx
		pop	ax
		mov	ah, al
		cmp	al, 1
		jz	short REDISPJ
		cmp	al, 6
		jz	short REDISPJ
		cmp	al, 7
		jz	short REDISPJ
		cmp	al, 8
		jz	short REDISPJ
		cmp	al, 0Ah
		jz	short REDISPJ
		mov	al, 0
		retn
REDISPJ:
		cli
		jmp	REDISP

; ---------------------------------------------------------------------------

		; 07/09/2022
_$GET_FCB_POSITION:
		call	GetExtended
		call	GetExtent
		mov	[si+21h], ax
		mov	[si+23h], dl
		cmp	word [si+0Eh], 64
		jnb	short GetFCBBye
		mov	[si+24h], dh
GetFCBBye:
		jmp	NO_OP

; ---------------------------------------------------------------------------

		; 07/09/2022
_$FCB_DELETE:
		mov	di, OPENBUF
		call	TransFCB
		jb	short BadPath
		push	ss
		pop	ds
		call	DOS_DELETE
		jb	short BadPath
GoodPath:
		jmp	short GetFCBBye
BadPath:
		jmp	FCB_Ret_Err

; ---------------------------------------------------------------------------

		; 07/09/2022
_$GET_FCB_FILE_LENGTH:
		call	GetExtended
		mov	di, OPENBUF
		push	ds
		push	si
		call	TransFCB
		pop	si
		pop	ds
		jb	short BadPath
		push	ds
		push	si
		push	ss
		pop	ds
		call	GET_FILE_INFO
		pop	si
		pop	ds
		jb	short BadPath
		mov	dx, bx
		mov	ax, di
		mov	bx, [si+0Eh]
		or	bx, bx
		jnz	short GetSize
		mov	bx, 128
GetSize:
		mov	di, ax
		mov	ax, dx
		xor	dx, dx
		div	bx
		push	ax
		mov	ax, di
		div	bx
		mov	cx, dx
		pop	dx
		jcxz	LengthStore
		add	ax, 1
		adc	dx, 0
LengthStore:
		mov	[si+21h], ax
		mov	[si+23h], dl
		or	dh, dh
		jz	short GoodPath
		mov	[si+24h], dh
GoodRet:
		jmp	short GoodPath

; ---------------------------------------------------------------------------

		; 07/09/2022
_$FCB_CLOSE:
		xor	al, al
		call	GetExtended
		jz	short NoAttr
		mov	al, [si-1]
NoAttr:
		mov	byte [ss:ATTRIB], al
		call	SFTFromFCB
		jb	short GoodRet
		mov	al, [es:di+4]
		xor	ah, ah
		push	ax
		call	CheckShare
		jnz	short NoStash
		mov	al, byte [ss:ATTRIB]
		mov	[es:di+4], al
NoStash:
		mov	ax, [si+14h]
		mov	[es:di+0Fh], ax
		mov	ax, [si+16h]
		mov	[es:di+0Dh], ax
		mov	ax, [si+10h]
		mov	[es:di+11h], ax
		mov	ax, [si+12h]
		mov	[es:di+13h], ax
		or	word [es:di+5], 4000h
		push	ss
		pop	ds
		call	DOS_CLOSE
		les	di, [THISSFT]
		pop	cx
		mov	[es:di+4], cl
		pushf
		test	word [es:di], 0FFFFh
		jnz	short CloseOK
		push	ax
		mov	al, 'M'
		call	BlastSFT
		pop	ax
CloseOK:
		popf
		jnb	short GoodRet
		cmp	al, 6
		jz	short GoodRet
		mov	al, 2
fcb_close_err:
		jmp	FCB_Ret_Err

; ---------------------------------------------------------------------------

		; 07/09/2022
_$FCB_RENAME:
		call	GetExtended
		push	dx
		mov	al, [si]
		add	si, 10h
		mov	di, RENBUF
		push	word [si]
		push	ds
		push	si
		mov	[si], al
		mov	dx, si
		call	TransFCB
		pop	si
		pop	ds
		pop	word [si]
		pop	dx
		jb	short fren90
		mov	si, [ss:WFP_START]
		mov	[ss:REN_WFP], si
		mov	di, OPENBUF
		call	TransFCB
		jb	short fren90
		call	DOS_RENAME
		jb	short fren90
		jmp	NO_OP
fren90:
		jmp	short fcb_close_err

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 07/09/2022
SaveFCBInfo:
		les	di, [ss:THISSFT]
		call	IsSFTNet
		jz	short SaveLocal
		mov	ax, [es:di+1Dh]
		mov	[si+1Ah], ax
		push	es
		push	di
		les	di, [es:di+19h]
		mov	[si+1Ch], di
		mov	word [si+1Eh], es
		pop	di
		pop	es
		mov	bl, 80h
		jmp	short SaveSFN
SaveLocal:
		call	CheckShare
		jz	short SaveNoShare
		jmp	short SaveShare

		nop
SaveNoShare:
		test	word [es:di+5], 80h
		jnz	short SaveNoShareDev
		mov	ax, [es:di+1Dh]
		mov	[si+1Dh], ax
		mov	al, [es:di+1Fh]
		mov	[si+1Fh], al
		mov	ax, [es:di+0Bh]
		mov	[si+1Bh], ax
		mov	bl, 0
SetFCBBits:
		mov	ax, [es:di+5]
		and	al, 0C0h
		or	al, [es:di+2]
		mov	[si+1Ah], al
		jmp	short SaveSFN

		nop
SaveNoShareDev:
		mov	ax, [es:di+7]
		mov	[si+1Ah], ax
		mov	ax, [es:di+9]
		mov	[si+1Ch], ax
		mov	bl, 40h
		jmp	short SetFCBBits

; ---------------------------------------------------------------------------

		; 07/09/2022
SaveShare:
		call	far [ss:ShSave]
SaveSFN:
		mov	ax, [es:di+5]
		and	al, 3Fh
		or	al, bl
		mov	[si+19h], al
		lea	ax, [di-6]
		sub	ax, word [ss:SFTFCB]
		mov	bl, 53
		div	bl
		mov	[si+18h], al
		mov	ax, [ss:FCBLRU]
		inc	ax
		mov	[es:di+15h], ax
		jnz	short SimpleStuff
		mov	bx, 15h
		call	ResetLRU
SimpleStuff:
		mov	[ss:FCBLRU], ax
		retn

; ---------------------------------------------------------------------------

		; 07/09/2022
ResetLRU:
		mov	ax, 8000h
		push	es
		push	di
		les	di, [cs:SFTFCB]
		mov	cx, [es:di+4]
		lea	di, [di+6]
ovScan:
		sub	[es:bx+di], ax
		ja	short ovLoop
		mov	[es:bx+di], ax
ovLoop:
		add	di, 53
		loop	ovScan
		pop	di
		pop	es
		mov	[es:bx+di], ax
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 07/09/2022
SetOpenAge:
		mov	ax, [cs:OpenLRU]
		inc	ax
		mov	[es:di+17h], ax
		jnz	short SetDone
		mov	bx, 17h
		call	ResetLRU
SetDone:
		mov	[cs:OpenLRU], ax
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 07/09/2022
LRUFCB:
		call	save_world
		mov	bp, [cs:KEEPCOUNT]
		xor	ax, ax
lru1:
		cmp	bp, 0
		jz	short lru75
		dec	bp
		mov	bx, -1
		mov	si, bx
		les	di, [cs:SFTFCB]
		mov	cx, [es:di+4]
		lea	di, [di+6]
lru2:
		cmp	word [es:di], 0
		jz	short lru25
		cmp	word [es:di], 0FFFFh
		jnz	short lru3
lru25:
		mov	si, di
		jmp	short lru11

		nop
lru3:
		test	word [es:di+5], 8000h
		jnz	short lru35
		call	CheckShare
		jz	short lru5
lru35:
		mov	dx, [es:di+17h]
		cmp	dx, ax
		jb	short lru5
		cmp	dx, bx
		jnb	short lru5
		mov	bx, dx
		mov	si, di
lru5:
		add	di, 53
		loop	lru2
		cmp	si, -1
		jz	short lru75
		lea	ax, [bx+1]
		jmp	short lru1
lru65:
		stc
		jmp	short lruDead
lru75:
		mov	bx, -1
		mov	si, bx
		les	di, [cs:SFTFCB]
		mov	cx, [es:di+4]
		lea	di, [di+6]
lru8:
		test	word [es:di+5], 8000h
		jnz	short lru85
		call	CheckShare
		jz	short lru86
lru85:
		cmp	[es:di+17h], ax
		jb	short lru9
lru86:
		cmp	[es:di+15h], bx
		jnb	short lru9
		mov	si, di
		mov	bx, [es:di+15h]
lru9:
		add	di, 53
		loop	lru8
lru10:
		cmp	si, -1
		jz	short lru65
lru11:
		mov	di, si
		mov	word [cs:THISSFT], di
		mov	word [cs:THISSFT+2], es
		test	word [es:di+5], 8000h
		jnz	short LRUClose
		call	CheckShare
		jz	short LRUDone
LRUClose:
		push	ss
		pop	ds
		les	di, [THISSFT]
		cmp	word [es:di], 0
		jz	short LRUDone
		call	DOS_CLOSE
		jnb	short LRUClose
		cmp	al, 6
		jz	short LRUClose
		stc
		jmp	short lruDead
LRUDone:
		xor	al, al
		call	BlastSFT
lruDead:
		call	restore_world
		les	di, [cs:THISSFT]
		jb	short LRUFCB_err
		retn
LRUFCB_err:
		mov	al, 23h
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 07/09/2022
FCBRegen:
		mov	al, [si+19h]
		test	al, 80h
		jz	short RegenNoSharing
		call	CheckShare
		jnz	short RegenFail
		mov	ax, 1100h
		int	2Fh		; Multiplex - NETWORK REDIRECTOR - INSTALLATION	CHECK
					; Return: AL = 00h  not	installed, OK to install
					; 01h  not installed, not OK to	install
					; FFh  installed
		or	al, al
		jz	short RegenDead
RegenFail:
		mov	ax, word [cs:USER_IN_AX]
		cmp	ah, 10h
		jz	short RegenDead
		call	FCBHardErr
RegenDead:
		stc
FCBRegen_retn:
		retn

; ---------------------------------------------------------------------------

		; 09/09/2022
		; 07/09/2022
RegenNoSharing:
		call	CheckShare
		jnz	short RegenFail
		call	LRUFCB
		jb	short FCBRegen_retn
		mov	word [es:di+2], 8002h
		and	al, 3Fh
		cbw
		or	ax, 4000h
		mov	cl, [si+1Ah]
		mov	ch, cl
		and	ch, 0C0h
		or	al, ch
		and	cl, 0Fh
		mov	[es:di+2], cl
		mov	[es:di+5], ax
		mov	ax, [cs:PROC_ID]
		mov	[es:di+31h], ax
		push	ds
		push	si
		push	es
		push	di
		push	ss
		pop	es
		mov	di, NAME1
		mov	cx, 8
		inc	si
RegenCopyName:
		lodsb
		call	Ucase
		stosb
		loop	RegenCopyName
		push	ss
		pop	ds
		mov	byte [ATTRIB], 16h
		call	DEVNAME
		pop	di
		pop	es
		pop	si
		pop	ds
		jb	short RegenFileNoSharing
		mov	[es:di+5], bh
		mov	byte [es:di+4], 0
		lds	si, [cs:DEVPT]
		mov	[es:di+7], si
		mov	word [es:di+9], ds
		retn
RegenDeadJ:
		jmp	short RegenDead
RegenFileNoSharing:
		mov	ax, [es:di+5]
		and	ax, 3Fh
		push	ds
		push	si
		call	Find_DPB
		mov	[es:di+7], si
		mov	word [es:di+9], ds
		pop	si
		pop	ds
		jb	short RegenDeadJ
		mov	ax, [si+1Dh]
		mov	[es:di+1Dh], ax
		mov	ax, [si+1Bh]
		mov	[es:di+0Bh], ax
		mov	[es:di+1Bh], ax
		mov	al, [si+1Fh]
		mov	[es:di+1Fh], al
		inc	word [es:di]
		lea	si, [si+1]
		lea	di, [di+20h]
		mov	cx, 11
RegenCopyName2:
		lodsb
		call	Ucase
		stosb
		loop	RegenCopyName2
		clc
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 07/09/2022
BlastSFT:
		push	di
		mov	cx, 53
		rep stosb
		pop	di
		mov	word [es:di], 0
		mov	word [es:di+15h], 0
		mov	word [es:di+17h], -1
BlastSFT_retn:
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 07/09/2022
CheckFCB:
		les	di, [cs:SFTFCB]
		cmp	[es:di+4], al
		jb	short BadSFT
		mov	bl, 53
		mul	bl
		lea	di, [di+6]
		add	di, ax
		mov	ax, [cs:PROC_ID]
		cmp	[es:di+31h], ax
		jnz	short BadSFT
		cmp	word [es:di], 0
		jz	short BadSFT
		mov	al, [si+19h]
		test	al, 80h
		jz	short CheckNoShare
		push	ax
		and	al, 0C0h
		cmp	al, 0C0h
		pop	ax
		jnz	short CheckNet
		call	far [cs:ShChk]
		jb	short BadSFT
		jmp	short CheckD

; ---------------------------------------------------------------------------

		; 07/09/2022
CheckFirClus:
		cmp	bx, [es:di+0Bh]
		jnz	short BadSFT
CheckD:
		and	al, 3Fh
		mov	ah, [es:di+5]
		and	ah, 3Fh
		cmp	ah, al
		jz	short BlastSFT_retn
BadSFT:
		stc
		retn

; ---------------------------------------------------------------------------

		; 07/09/2022
CheckNet:
		mov	ax, [si+1Ah]
		cmp	ax, [es:di+1Dh]
		jnz	short BadSFT
		mov	ax, [si+1Ch]
		cmp	ax, [es:di+19h]
		jnz	short BadSFT
		mov	ax, [si+1Eh]
		cmp	ax, [es:di+1Bh]
		jnz	short BadSFT
CheckNet_retn:
		retn

; ---------------------------------------------------------------------------

		; 07/09/2022
CheckNoShare:
		test	al, 40h
		jnz	short CheckNoShareDev
		mov	bx, [si+1Dh]
		cmp	bx, [es:di+1Dh]
		jnz	short BadSFT
		mov	bl, [si+1Fh]
		cmp	bl, [es:di+1Fh]
		jnz	short BadSFT
		mov	bl, [si+1Ah]
		mov	bh, [es:di+5]
		xor	bh, bl
		and	bh, 0C0h
		jnz	short BadSFT
		xor	bl, [es:di+2]
		and	bl, 0Fh
		jnz	short BadSFT
		push	di
		push	si
		lea	di, [di+20h]
		lea	si, [si+1]
		mov	cx, 0Bh
		repe cmpsb
		pop	si
		pop	di
		jnz	short BadSFT
		mov	bx, [si+1Bh]
		jmp	short CheckFirClus

CheckNoShareDev:
		mov	bx, [si+1Ah]
		cmp	bx, [es:di+7]
		jnz	short BadSFT
		mov	bx, [si+1Ch]
		cmp	bx, [es:di+9]
		jnz	short BadSFT
		jmp	CheckD

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 07/09/2022
SFTFromFCB:
		push	ax
		push	bx
		mov	al, [si+18h]
		call	CheckFCB
		pop	bx
		pop	ax
		mov	word [cs:THISSFT], di
		mov	word [cs:THISSFT+2], es
		jnb	short SetSFT
		call	save_world
		call	FCBRegen
		call	restore_world
		mov	ax, [cs:EXTERR]
		jb	short CheckNet_retn
SetSFT:
		les	di, [cs:THISSFT]
		push	word [cs:PROC_ID]
		pop	word [es:di+31h]
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 07/09/2022
FCBHardErr:
		mov	ax, 23h
		mov	byte [cs:ALLOWED], 8
		les	bp, [cs:THISDPB]
		mov	di, 1
		mov	cx, di
		mov	dx, [es:bp+0Bh]
		call	HARDERR
		stc
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 07/09/2022
GetRR:
		mov	ax, [si+21h]
		mov	dx, [si+23h]
		cmp	bx, 64
		jb	short GetRRBye
		xor	dh, dh
GetRRBye:
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 07/09/2022
GetExtent:
		mov	al, [si+20h]
		mov	dx, [si+0Ch]
		shl	al, 1
		shr	dx, 1
		rcr	al, 1
		mov	ah, dl
		mov	dl, dh
		xor	dh, dh
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 07/09/2022
SetExtent:
		push	ax
		push	dx
		mov	cx, ax
		and	al, 7Fh
		mov	[si+20h], al
		and	cl, 80h
		shl	cx, 1
		rcl	dx, 1
		mov	al, ch
		mov	ah, dl
		mov	[si+0Ch], ax
		pop	dx
		pop	ax
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 07/09/2022
GetExtended:
		mov	si, dx
		cmp	byte [si], -1
		jnz	short GetBye
		add	si, 7
GetBye:
		cmp	si, dx
getextd_retn:
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 07/09/2022
GetRecSize:
		mov	bx, [si+0Eh]
		or	bx, bx
		jnz	short getextd_retn
		mov	bx, 128
		mov	[si+0Eh], bx
		retn

; ---------------------------------------------------------------------------

		; 07/09/2022
FCBIO:
		push	bp
		mov	bp, sp
		sub	sp, 20
		mov	[bp-20], al
		mov	byte [bp-1], 0
		call	GetExtended
		test	byte [bp-20], 8
		jnz	short GetPos
		mov	cx, 1
GetPos:
		mov	[bp-3],	cx
		call	GetExtent
		call	GetRecSize
		mov	[bp-9],	bx
		test	byte [bp-20], 2
		jz	short GetRec
		call	GetRR
GetRec:
		mov	[bp-7],	ax
		mov	[bp-5],	dx
		call	SetExtent
		mov	ax, [bp-5]
		mul	bx
		mov	di, ax
		mov	ax, [bp-7]
		mul	bx
		add	dx, di
		mov	[bp-13], ax
		mov	[bp-11], dx
		mov	ax, [bp-3]
		mul	bx
		mov	[bp-15], ax
		add	ax, [ss:DMAADD]
		adc	dx, 0
		jz	short DoOper
		mov	byte [bp-1], 2
		mov	ax, [ss:DMAADD]
		neg	ax
		jnz	short DoDiv
		dec	ax
DoDiv:
		xor	dx, dx
		div	bx
		mov	[bp-3],	ax
		mul	bx
		mov	[bp-15], ax
DoOper:
		xor	bx, bx
		mov	[bp-17], bx
		cmp	[bp-15], bx
		jnz	short DoGetExt
		test	byte [bp-1], 2
		jnz	short SkipOp
DoGetExt:
		call	SFTFromFCB
		jnb	short ContinueOp
FCBDeath:
		call	FCB_Ret_Err
		mov	word [bp-19], 0
		mov	byte [bp-1], 1
		jmp	FCBSave
ContinueOp:
		mov	ax, [si+10h]
		mov	[es:di+11h], ax
		mov	ax, [si+12h]
		mov	[es:di+13h], ax
		mov	ax, [bp-13]
		mov	dx, [bp-11]
		mov	[es:di+15h], ax
		xchg	dx, [es:di+17h]
		push	dx
		mov	cx, [bp-15]
		mov	di, DOS_READ
		test	byte [bp-20], 4
		jnz	short DoContext
		mov	di, DOS_WRITE
DoContext:
		push	bp
		push	ds
		push	si
		push	ss
		pop	ds
		call	di ; DOS_READ or DOS_WRITE
		pop	si
		pop	ds
		pop	bp
		jb	short FCBDeath
		cmp	byte [ss:DISK_FULL], 0
		jz	short NODSKFULL
		mov	byte [ss:DISK_FULL], 0
		mov	byte [bp-1], 1
NODSKFULL:
		mov	[bp-17], cx
		call	SaveFCBInfo
		pop	word [es:di+17h]
		mov	ax, [es:di+11h]
		mov	[si+10h], ax
		mov	ax, [es:di+13h]
		mov	[si+12h], ax
SkipOp:
		mov	ax, [bp-17]
		xor	dx, dx
		div	word [bp-9]
		mov	[bp-19], ax
		add	[bp-7],	ax
		adc	word [bp-5], 0
		cmp	ax, [bp-3]
		jz	short TryBlank
		test	byte [bp-20], 4
		jnz	short SetEOF
		test	word [es:di+5], 80h
		jnz	short TryBlank
SetEOF:
		mov	byte [bp-1], 1
TryBlank:
		or	dx, dx
		jz	short SetExt
		add	word [bp-7], 1
		adc	word [bp-5], 0
		test	byte [bp-20], 4
		jz	short SetExt
		inc	word [bp-19]
		mov	byte [bp-1], 3
		mov	cx, [bp-9]
		sub	cx, dx
		xor	al, al
		les	di, [ss:DMAADD]
		add	di, [bp-17]
		rep stosb
SetExt:
		mov	dx, [bp-5]
		mov	ax, [bp-7]
		test	byte [bp-20], 2
		jz	short DoSetExt
		test	byte [bp-20], 8
		jz	short TrySetRR
DoSetExt:
		call	SetExtent
TrySetRR:
		test	byte [bp-20], 8
		jz	short TryReturn
		mov	[si+21h], ax
		mov	[si+23h], dl
		cmp	word [si+0Eh], 64
		jnb	short TryReturn
		mov	[si+24h], dh
TryReturn:
		test	byte [bp-20], 4
		jnz	short FCBSave
		push	ds
		call	DATE16
		pop	ds
		mov	[si+14h], ax
		mov	[si+16h], dx
FCBSave:
		test	byte [bp-20], 8
		jz	short DoReturn
		mov	cx, [bp-19]
		call	Get_User_Stack
		mov	[si+4],	cx
DoReturn:
		mov	al, [bp-1]
		mov	sp, bp
		pop	bp
		retn

; ---------------------------------------------------------------------------

		; 07/09/2022
_$FCB_OPEN:
		mov	ax, 2
		mov	cx, DOS_OPEN
DoAccess:
		push	ds
		push	dx
		push	cx
		push	ax
		mov	di, OPENBUF
		call	TransFCB
		pop	ax
		pop	cx
		pop	dx
		pop	ds
		jnb	short FindFCB
FCBOpenErr:
		jmp	FCB_Ret_Err

; ---------------------------------------------------------------------------

		; 07/09/2022
FindFCB:
		call	GetExtended
		call	LRUFCB
		jb	short HardMessage
		mov	word [es:di+2], 8000h
		push	ds
		push	si
		push	bx
		mov	si, cx
		push	ss
		pop	ds
		call	si
		pop	bx
		pop	si
		pop	ds
		les	di, [ss:THISSFT]
		jnb	short FCBOK
		push	ax
		mov	al, 'R'
		call	BlastSFT
		pop	ax
		cmp	ax, 4
		jz	short HardMessage
		cmp	ax, 24h
		jnz	short DeadFCB
HardMessage:
		push	ax
		call	FCBHardErr
		pop	ax
DeadFCB:
		jmp	short FCBOpenErr

; ---------------------------------------------------------------------------

		; 07/09/2022
FCBOK:
		inc	word [es:di]
		call	SaveFCBInfo
		call	SetOpenAge
		test	word [es:di+5], 80h
		jnz	short FCBNoDrive
		mov	al, [si]
		call	GetThisDrv
		inc	al
		mov	[si], al
FCBNoDrive:
		mov	word [si+0Eh], 128
		mov	ax, [es:di+0Dh]
		mov	[si+16h], ax
		mov	ax, [es:di+0Fh]
		mov	[si+14h], ax
		mov	ax, [es:di+11h]
		mov	[si+10h], ax
		mov	ax, [es:di+13h]
		mov	[si+12h], ax
		xor	ax, ax
		mov	[si+0Ch], ax
		les	di, [ss:SFTFCB]
		mov	ah, [es:di+4]
OpenScan:
		cmp	al, [si+18h]
		jz	short SkipCheck
		push	ax
		call	CheckFCB
		pop	ax
		jnb	short OpenFound
SkipCheck:
		inc	al
		cmp	al, ah
		jnz	short OpenScan
OpenDone:
		xor	al, al
		retn

; ---------------------------------------------------------------------------

		; 07/09/2022
OpenFound:
		mov	[si+18h], al
		inc	word [es:di]
		mov	ax, [ss:FCBLRU]
		mov	[es:di+15h], ax
		push	ss
		pop	ds
		les	di, [THISSFT]
		dec	word [es:di]
		call	ShareEnd
		mov	al, 'C'
		call	BlastSFT
		jmp	short OpenDone

; ---------------------------------------------------------------------------

		; 07/09/2022
_$FCB_CREATE:
		mov	cx, DOS_CREATE
		xor	ax, ax
		call	GetExtended
		jz	short DoAccessJ
		mov	al, [si-1]
DoAccessJ:
		jmp	DoAccess

; ---------------------------------------------------------------------------

		; 07/09/2022
_$FCB_RANDOM_WRITE_BLOCK:
		mov	al, 0Ah
		jmp	FCBIO

; ---------------------------------------------------------------------------

		; 07/09/2022
_$FCB_RANDOM_READ_BLOCK:
		mov	al, 0Eh
		jmp	FCBIO

; ---------------------------------------------------------------------------

		; 07/09/2022
_$FCB_SEQ_READ:
		mov	al, 4
		jmp	FCBIO

; ---------------------------------------------------------------------------

		; 07/09/2022
_$FCB_SEQ_WRITE:
		mov	al, 0
		jmp	FCBIO

; ---------------------------------------------------------------------------

		; 07/09/2022
_$FCB_RANDOM_READ:
		mov	al, 6
		jmp	FCBIO

; ---------------------------------------------------------------------------

		; 07/09/2022
_$FCB_RANDOM_WRITE:
		mov	al, 2
		jmp	FCBIO

; ---------------------------------------------------------------------------

		; 07/09/2022
_$DIR_SEARCH_FIRST:
		mov	word [ss:THISFCB], dx
		mov	word [ss:THISFCB+2], ds
		mov	si, dx
		cmp	byte [si], 0FFh
		jnz	short NORMFCB4
		add	si, 7
NORMFCB4:
		push	word [si]
		push	ss
		pop	es
		mov	di, OPENBUF
		call	TransFCB
		jnb	short SearchIt
		pop	bx
DIR_SF_retn:
		jmp	FCB_Ret_Err

; ---------------------------------------------------------------------------

		; 07/09/2022
SearchIt:
		push	ss
		pop	ds
		push	word [DMAADD]
		push	word [DMAADD+2]
		mov	word [DMAADD], SEARCHBUF
		mov	[DMAADD+2], ds
		call	DOS_SEARCH_FIRST
		pop	word [DMAADD+2]
		pop	word [DMAADD]
		jnb	short SearchSet
		pop	bx
		jmp	short DIR_SF_retn

; ---------------------------------------------------------------------------

		; 07/09/2022
SearchSet:
		mov	si, SEARCHBUF
		les	di, [THISFCB]
		test	byte [ExtFCB], 0FFh
		jz	short NORMFCB1
		add	di, 7
NORMFCB1:
		pop	bx
		or	bl, bl
		jnz	short SearchDrv
		mov	bl, [CURDRV]
		inc	bl
SearchDrv:
		lodsb
		xchg	al, bl
		inc	di
		mov	cx, 10
		rep movsw
		xchg	al, bl
		stosb
		les	di, [DMAADD]
		test	byte [ExtFCB], 0FFh
		jz	short NORMFCB2
		mov	al, 0FFh
		stosb
		inc	al
		mov	cx, 5
		rep stosb
		mov	al, byte [ExtFCB+1]
		stosb
NORMFCB2:
		mov	al, bl
		stosb
		mov	cx, 16
		rep movsw
		jmp	NO_OP

; ---------------------------------------------------------------------------

		; 07/09/2022
_$DIR_SEARCH_NEXT:
		mov	word [ss:THISFCB], dx
		mov	word [ss:THISFCB+2], ds
		mov	byte [ss:ExtFCB+1], 0
		mov	byte [ss:ExtFCB], 0
		push	ss
		pop	es
		mov	di, SEARCHBUF
		mov	si, dx
		cmp	byte [si], 0FFh
		jnz	short NORMFCB6
		add	si, 6
		lodsb
		mov	byte [ss:ExtFCB+1], al
		dec	byte [ss:ExtFCB]
NORMFCB6:
		lodsb
		push	ax
		mov	al, [si+20]
		stosb
		mov	cx, 10
		rep movsw
		push	ss
		pop	ds
		push	word [DMAADD]
		push	word [DMAADD+2]
		mov	word [DMAADD], SEARCHBUF
		mov	[DMAADD+2], ds
		call	DOS_SEARCH_NEXT
		pop	word [DMAADD+2]
		pop	word [DMAADD]
		jb	short SearchNoMore
		jmp	SearchSet
SearchNoMore:
		les	di, [THISFCB]
		test	byte [ExtFCB], 0FFh
		jz	short NORMFCB8
		add	di, 7
NORMFCB8:
		pop	bx
		mov	[es:di], bl
		jmp	FCB_Ret_Err

; ---------------------------------------------------------------------------

		; 07/09/2022
_$FIND_FIRST:
		mov	si, dx
		mov	byte [ss:ExtFCB+1], cl
		mov	di, OPENBUF
		call	TransPathSet
		jnb	short Find_it
		mov	al, 3
fff_errj:
		jmp	SYS_Ret_Err
Find_it:
		push	ss
		pop	ds
		push	word [DMAADD]
		push	word [DMAADD+2]
		mov	word [DMAADD], SEARCHBUF
		mov	[DMAADD+2], ds
		call	DOS_SEARCH_FIRST
		pop	word [DMAADD+2]
		pop	word [DMAADD]
		jnb	short FindSet
findit_errj:
		jmp	short fff_errj

; ---------------------------------------------------------------------------

		; 07/09/2022
FindSet:
		mov	si, SEARCHBUF
		les	di, [DMAADD]
		mov	cx, 21
		rep movsb
		push	si
		mov	al, [si+0Bh]
		stosb
		add	si, 16h
		movsw
		movsw
		inc	si
		inc	si
		movsw
		movsw
		pop	si
		call	PackName
		jmp	SYS_RET_OK

; ---------------------------------------------------------------------------

		; 07/09/2022
_$FIND_NEXT:
		push	ss
		pop	es
		mov	di, SEARCHBUF
		lds	si, [ss:DMAADD]
		mov	cx, 21
		rep movsb
		push	ss
		pop	ds
		push	word [DMAADD]
		push	word [DMAADD+2]
		mov	word [DMAADD], SEARCHBUF
		mov	[DMAADD+2], ds
		call	DOS_SEARCH_NEXT
		pop	word [DMAADD+2]
		pop	word [DMAADD]
		jnb	short FindSet
		jmp	short findit_errj

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 07/09/2022
PackName:
		mov	cx, 8
		rep movsb
main_kill_tail:
		cmp	byte [es:di-1], ' '
		jnz	short find_check_dot
		dec	di
		inc	cx
		cmp	cx, 8
		jb	short main_kill_tail
find_check_dot:
		cmp	word [si], 2020h
		jnz	short got_ext
		cmp	byte [si+2], 20h
		jz	short find_done
got_ext:
		mov	al, '.'
		stosb
		mov	cx, 3
		rep movsb
ext_kill_tail:
		cmp	byte [es:di-1], ' '
		jnz	short find_done
		dec	di
		jmp	short ext_kill_tail
find_done:
		xor	ax, ax
		stosb
		retn

; ---------------------------------------------------------------------------

		; 07/09/2022
_$CURRENT_DIR:
		call	EcritDisk
		mov	al, dl
		call	GETVISDRV
		jnb	short CurrentValidate
CurdirErr:
		call	LcritDisk
		mov	al, 0Fh
curdir_errj:
		jmp	SYS_Ret_Err
CurrentValidate:
		push	ds
		push	si
		lds	si, [cs:THISCDS]
		test	word [si+43h], 8000h
		jnz	short $+2
		mov	byte [cs:NoSetDir], 0
		mov	di, OPENBUF
		call	ValidateCDS
		push	es
		push	di
		pop	si
		pop	ds
		pop	di
		pop	es
		jb	short CurdirErr
		add	si, 0
		add	si, [si+4Fh]
		cmp	byte [si], '\'
		jnz	short CurrentCopy
		inc	si
CurrentCopy:
		push	ax
		lodsb
		or	al, al
		jz	short FOK
		cmp	al, 5
		jz	short FCHANGE
		jmp	short FFF

		nop
FCPYNEXT:
		lodsb
FFF:
		cmp	al, '\'
		jnz	short FOK
		stosb
		lodsb
		cmp	al, 5
		jnz	short FOK
FCHANGE:
		mov	al, 0E5h
FOK:
		stosb
		or	al, al
		jnz	short FCPYNEXT
		pop	ax
		xor	al, al
		call	LcritDisk
		jmp	SYS_RET_OK

; ---------------------------------------------------------------------------

		; 07/09/2022
_$RMDIR:
		push	dx
		push	ds
		mov	si, dx
		mov	di, OPENBUF
		push	di
		call	TransPathNoSet
		pop	di
		jnb	short rmlset
		pop	ds
		pop	dx
		mov	al, 3
rmdir_error:
		jmp	short curdir_errj
rmlset:
		cmp	byte [ss:cMeta], -1
		jnz	short rmerr
		push	ss
		pop	es
		xor	al, al
rmloop:
		call	GetCDSFromDrv
		jb	short rmcont
		call	StrCmp
		jz	short rmerr
		inc	al
		jmp	short rmloop
rmerr:
		pop	ds
		pop	dx
		mov	al, 10h
chdir_errj:
		jmp	short rmdir_error
rmcont:
		pop	ds
		pop	dx
		mov	si, DOS_RMDIR
		;jmp	DoDirCall
		; 09/09/2022 - Temporary !
		db	0E9h, 7Fh, 0

; ---------------------------------------------------------------------------

		; 07/09/2022
_$CHDIR:
		mov	di, OPENBUF
		mov	si, dx
		call	TransPath
		jnb	short ChDirCrack
ChDirErrP:
		mov	al, 3
ChdirErr:
		jmp	short chdir_errj
ChDirCrack:
		cmp	byte [cMeta], 0FFh
		jnz	short ChDirErrP
		les	di, [THISCDS]
		cmp	di, -1
		jz	short ChDirErrP
		call	DOS_CHDIR
		jb	short ChdirErr
		les	di, [THISCDS]
		test	word [es:di+43h], 2000h
		jz	short GotCDS
		push	es
		push	di
		push	cx
		call	Get_User_Stack
		mov	di, [si+6]
		mov	ds, word [si+14]
		mov	si, OPENBUF
		xchg	si, di
		xor	al, al
		push	di
		call	TransPathNoSet
		pop	si
		les	di, [THISCDS]
		mov	word [es:di+49h], -1
		pop	cx
		pop	di
		pop	es
GotCDS:
		push	ss
		pop	ds
		mov	si, [WFP_START]
		push	cx
		call	DStrLen
		cmp	cx, 67
		pop	cx
		ja	short ChDirErrP
		test	word [es:di+43h], 8000h
		jnz	short SkipRecency
		mov	[es:di+49h], cx
		les	di, [THISCDS]
SkipRecency:
		call	FStrCpy
		xor	al, al
chdir_ok:
		jmp	SYS_RET_OK

; ---------------------------------------------------------------------------

		; 07/09/2022
_$MKDIR:
		mov	si, DOS_MKDIR
DoDirCall:
		mov	di, OPENBUF
		push	si
		mov	si, dx
		call	TransPath
		pop	si
		jnb	short MkDirCrack
MkErrP:
		mov	al, 3
MkErr:
		jmp	SYS_Ret_Err
MkDirCrack:
		cmp	byte [ss:cMeta], -1
		jnz	short MkErrP
		push	ss
		pop	ds
		call	si
		jb	short MkErr
		jmp	short chdir_ok

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 07/09/2022
_$IOCTL:
		mov	si, ds
		push	ss
		pop	ds
		cmp	al, 3
		ja	short ioctl_1
		call	SFFromHandle
		jnb	short ioctl_check_permissions
ioctl_bad_handle:
		mov	al, 6
ioctl_error:
		jmp	SYS_Ret_Err
ioctl_check_permissions:
		cmp	al, 2
		jnb	short ioctl_check_device2
		cmp	al, 0
		mov	al, [es:di+5]
		jz	short ioctl_read
		or	dh, dh
		jz	short ioctl_check_device
		mov	al, 0Dh
		jmp	short ioctl_error
ioctl_bad_funj2:
		jmp	ioctl_bad_fun

; ---------------------------------------------------------------------------

		; 07/09/2022
ioctl_check_device:
		test	al, 80h
		jz	short ioctl_bad_funj2
		mov	byte [EXTERR_LOCUS], 4
		or	dl, 80h
		mov	[es:di+5], dl
ioctl_ok:
		jmp	SYS_RET_OK

; ---------------------------------------------------------------------------

		; 07/09/2022
ioctl_read:
		mov	byte [EXTERR_LOCUS], 2
		xor	ah, ah
		test	al, 80h
		jz	short ioctl_no_high
		mov	byte [EXTERR_LOCUS], 4
		les	di, [es:di+7]
		mov	ah, [es:di+5]
ioctl_no_high:
		mov	dx, ax
		call	Get_User_Stack
		mov	[si+6],	dx
ioctl_sr_ok:
		jmp	short ioctl_ok

; ---------------------------------------------------------------------------

		; 07/09/2022
ioctl_check_device2:
		test	word [es:di+5], 80h
		jnz	short ioctl_control_string
		jmp	ioctl_bad_fun
ioctl_control_string:
		mov	byte [EXTERR_LOCUS], 4
		les	di, [es:di+7]
		xor	bl, bl
		jmp	ioctl_do_string
ioctl_getdevj:
		jmp	ioctl_get_dev

; ---------------------------------------------------------------------------

		; 07/09/2022
ioctl_1:
		dec	al
		dec	al
		cmp	al, 3
		jbe	short ioctl_getdevj
		cmp	al, 6
		jnb	short ioctl_2
ioctl_status:
		mov	ah, 1
		sub	al, 4
		jz	short ioctl_get_status
		mov	ah, 3
ioctl_get_status:
		push	ax
		call	GET_IO_SFT
		pop	ax
		jnb	short DO_IOFUNC
		jmp	ioctl_bad_handle
DO_IOFUNC:
		call	IOFUNC
		mov	ah, al
		mov	al, 0FFh
		jnz	short ioctl_status_ret
		inc	al
ioctl_status_ret:
		jmp	short ioctl_sr_ok
ioctl_2:
		jz	short ioctl_3
		sub	al, 7
		jnz	short ioctl_5
		jmp	Ioctl_Drive_attr
ioctl_3:
		jmp	ioctl_rem_media
ioctl_4:
		jmp	ioctl_bad_fun
ioctl_5:
		dec	al
		jnz	short ioctl_6
		jmp	ioctl_redirj
ioctl_6:
		dec	al
		jz	short Set_Retry_Parameters
		dec	al
		jz	short GENERICIOCTLHANDLE
		dec	al
		jz	short GENERICIOCTL
		cmp	al, 2
		ja	short ioctl_4
		jmp	ioctl_drive_owner

; ---------------------------------------------------------------------------

		; 07/09/2022
GENERICIOCTLHANDLE:
		call	SFFromHandle
		jb	short ioctl_bad_handlej
		test	word [di+5], 8000h
		jnz	short ioctl_bad_fun
		mov	byte [EXTERR_LOCUS], 4
		les	di, [es:di+7]
		jmp	short Do_GenIOCTL

; ---------------------------------------------------------------------------

		; 07/09/2022
GENERICIOCTL:
		mov	byte [EXTERR_LOCUS], 2
		cmp	ch, 8
		jnz	short ioctl_bad_fun
		call	Check_If_Net
		jnz	short ioctl_bad_fun
Do_GenIOCTL:
		test	word [es:di+4], 40h
		jz	short ioctl_bad_fun
		push	es
		push	di
		mov	byte [IOCALL], 23
		mov	byte [IOCALL_REQFUNC], 19
		mov	[IOCALL_REQUNIT], bl
		mov	[IOMED], ch
		mov	[IOXAD], cl
		mov	word [IOCTL_REQ_REG_SI], si
		mov	word [IOCTL_REQ_REG_DI], di
		mov	word [IOCTL_REQ_GENERICIOCTL_PACKET], dx
		mov	word [IOCTL_REQ_GENERICIOCTL_PACKET+2], si
		mov	bx, IOCALL
		push	ss
		pop	es
		pop	si
		pop	ds
		jmp	ioctl_do_IO
; ---------------------------------------------------------------------------

		; 07/09/2022
Set_Retry_Parameters:
		mov	[ss:RetryLoop], cx
		or	dx, dx
		jz	short ioctl_bad_fun
		mov	[ss:RetryCount], dx
doneok:
		jmp	SYS_RET_OK
ioctl_redirj:
		jmp	Ioctl_Handle_redir
ioctl_bad_fun:
		mov	al, 1
		jmp	SYS_Ret_Err
ioctl_bad_handlej:
		jmp	ioctl_bad_handle

; ---------------------------------------------------------------------------

		; 07/09/2022
ioctl_rem_media:
		call	Check_If_Net
		jnz	short ioctl_bad_fun
		test	word [es:di+4], 800h
		jz	short ioctl_bad_fun
		mov	byte [ss:IOCALL_REQFUNC], 0Fh
		mov	al, 13
		mov	ah, bl
		mov	word [ss:IOCALL], ax
		xor	ax, ax
		mov	word [ss:IOCALL_REQSTAT], ax
		push	es
		pop	ds
		mov	si, di
		push	ss
		pop	es
		mov	bx, IOCALL
		push	ds
		push	si
		call	DEVIOCALL2
		pop	si
		pop	ds
		mov	ax, word [ss:IOCALL_REQSTAT]
		and	ax, 200h
		mov	cl, 9
		shr	ax, cl
ioctl_okj1:
		jmp	short doneok
Ioctl_Drive_attr:
		mov	al, bl
		call	GetThisDrv
		jb	short ioctl_drv_err
		call	Get_Driver_BL
		mov	dx, [es:di+4]
		mov	bl, al
		les	di, [ss:THISCDS]
		test	word [es:di+43h], 8000h
		jz	short IOCTLShare
		or	dx, 1000h
IOCTLShare:
		push	ss
		pop	ds
		mov	si, OPENBUF
		add	bl, 'A'
		mov	[si], bl
		mov	word [si+1], ':'
		mov	ax, 300h
		clc
		int	2Ah		; Microsoft Networks - CHECK DIRECT I/O
					; DS:SI	-> ASCIZ disk device name (may be full path or only drive
					; specifier--must include the colon)
					; Return: CF clear if absolute disk access allowed
		jnb	short IOCTLLocal
		or	dx, 200h
IOCTLLocal:
		test	word [es:di+43h], 1000h
		jz	short ioctl_set_DX
		or	dx, 8000h
ioctl_set_DX:
		call	Get_User_Stack
		mov	[si+6],	dx

ioctl_okj2:
		jmp	short ioctl_okj1

; ---------------------------------------------------------------------------

		; 07/09/2022
ioctl_drv_err:
		mov	al, 0Fh
ioctl_errj:
		jmp	SYS_Ret_Err
Ioctl_Handle_redir:
		call	SFFromHandle
		jnb	short ioctl_got_sft
		mov	al, 6
ioctl_errj1:
		jmp	short ioctl_errj
ioctl_got_sft:
		mov	dx, [es:di+5]
		jmp	short ioctl_set_DX

; ---------------------------------------------------------------------------

		; 07/09/2022
ioctl_bad_funj:
		jmp	ioctl_bad_fun
ioctl_get_dev:
		call	Check_If_Net
		jnz	short ioctl_bad_funj
ioctl_do_string:
		test	word [es:di+4], 4000h
		jz	short ioctl_bad_funj
		dec	al
		dec	al
		jz	short ioctl_reqfunc_read
		mov	byte [IOCALL_REQFUNC], 12
		jmp	short ioctl_control_call

; ---------------------------------------------------------------------------

		; 07/09/2022
ioctl_reqfunc_read:
		mov	byte [IOCALL_REQFUNC], 3
ioctl_control_call:
		mov	al, 22
ioctl_setup_pkt:
		mov	ah, bl
		mov	word [IOCALL], ax
		xor	ax, ax
		mov	word [IOCALL_REQSTAT], ax
		mov	[IOMED], al
		mov	word [IOSCNT], cx
		mov	word [IOXAD], dx
		mov	word [IOXAD+2], si
		push	es
		pop	ds
		mov	si, di
		push	ss
		pop	es
		mov	bx, IOCALL
ioctl_do_IO:
		call	DEVIOCALL2
		test	word [ss:IOCALL_REQSTAT], 8000h
		jnz	short Ioctl_string_err
		mov	ax, word [ss:IOSCNT]
		jmp	short ioctl_okj2
Ioctl_string_err:
		mov	di, word [ss:IOCALL_REQSTAT]
		and	di, 0FFh
		mov	ax, di
		call	SET_I24_EXTENDED_ERROR
		mov	ax, [cs:EXTERR]
		; 09/09/2022
		jmp     short ioctl_errj1

; ---------------------------------------------------------------------------

		; 07/09/2022
Get_Driver_BL:
		push	ax
		mov	al, bl
		call	GetThisDrv
		jb	short ioctl_bad_drv
		xor	bl, bl
		mov	byte [EXTERR_LOCUS], 3
		les	di, [THISCDS]
		test	word [es:di+43h], 8000h
		les	di, [es:di+45h]
		jnz	short got_dev_ptr
		mov	byte [EXTERR_LOCUS], 2
		mov	bl, [es:di+1]
		les	di, [es:di+12h]
got_dev_ptr:
		clc
ioctl_bad_drv:
		pop	ax
		retn

; ---------------------------------------------------------------------------

		; 07/09/2022
Check_If_Net:
		call	Get_Driver_BL
		jb	short ioctl_drv_err_pop
		push	es
		push	di
		les	di, [THISCDS]
		test	word [es:di+43h], 8000h
		pop	di
		pop	es
		retn
ioctl_drv_err_pop:
		pop	ax
		jmp	ioctl_drv_err

; ---------------------------------------------------------------------------

		; 07/09/2022
ioctl_bad_funj3:
		jmp	ioctl_bad_fun

; ---------------------------------------------------------------------------

		; 07/09/2022
ioctl_string_errj:
		jmp	short Ioctl_string_err

; ---------------------------------------------------------------------------

		; 07/09/2022
ioctl_drive_owner:
		call	Check_If_Net
		jnz	short ioctl_bad_funj3
		test	word [es:di+4], 40h
		jz	short ioctl_bad_funj3
		dec	al
		jz	short SetOwner
		mov	byte [IOCALL_REQFUNC], 24
		jmp	short GetOwner

; ---------------------------------------------------------------------------

		; 07/09/2022
SetOwner:
		mov	byte [IOCALL_REQFUNC], 23

GetOwner:
		mov	al, 13
		mov	ah, bl
		mov	word [IOCALL], ax
		xor	ax, ax
		mov	word [IOCALL_REQSTAT], ax
		push	es
		pop	ds
		mov	si, di
		push	ss
		pop	es
		mov	bx, IOCALL
		push	ds
		push	si
		call	DEVIOCALL2
		pop	si
		pop	ds
		test	word [ss:IOCALL_REQSTAT], 8000h
		jnz	short ioctl_string_errj
		mov	al, [ss:IOCALL_REQUNIT]
		jmp	SYS_RET_OK


; --------------- S U B	R O U T	I N E ---------------------------------------

		; 08/09/2022
DOS_DELETE:
		call	TestNet
		jnb	short LOCAL_DELETE
		mov	ax, 1113h
		int	2Fh		; Multiplex - NETWORK REDIRECTOR - DELETE REMOTE FILE
					; SS = DS = DOS	CS, SDA	first filename pointer -> fully-qualified filename in DOS CS
					; SDA CDS pointer -> current directory structure for drive with	file
					; Return: CF set on error
		retn

; ---------------------------------------------------------------------------

		; 09/09/2022
		; 08/09/2022
LOCAL_DELETE:
		mov	byte [FOUNDDEL], 0 ; 09/09/2022
		call	EcritDisk
		mov	word [CREATING], 0E500h
		mov	si, [WFP_START]
SKPNUL:
		lodsb
		or	al, al
		jnz	short SKPNUL
		sub	si, 4
		cmp	word [si], 2E2Ah
		jnz	short TEST_QUEST
		cmp	byte [si+2], '*'
		jz	short CHECK_ATTS
TEST_QUEST:
		sub	si, 9
		xchg	di, si
		push	ss
		pop	es
		mov	ax, '??'
		mov	cx, 4
		repe scasw
		jnz	short NOT_ALL
		xchg	di, si
		lodsw
		cmp	ax, '.?'
		jnz	short NOT_ALL
		lodsw
		cmp	ax, '??'
		jnz	short NOT_ALL
CHECK_ATTS:
		mov	al, byte [ExtFCB+1]
		and	al, 1Fh
		cmp	al, 1Fh
		jnz	short NOT_ALL
		mov	byte [DELALL], 0
NOT_ALL:
		mov	byte [NoSetDir], 1
		call	GetPathNoSet
		jnb	short Del_found
		jnz	short _bad_path
		or	cl, cl
		jz	short _bad_path
No_file:
		mov	ax, 2
ErrorReturn:
		stc
		call	LcritDisk
		retn
_bad_path:
		mov	ax, 3
		jmp	short ErrorReturn
Del_found:
		jnz	short NOT_DIR
		cmp	byte [DELALL], 0
		jz	short NOT_DIR
Del_access_err:
		mov	ax, 5
		jmp	short ErrorReturn
NOT_DIR:
		or	ah, ah
		js	short Del_access_err
DELFILE:
		or	byte [FOUNDDEL], 1 ; 09/09/2022
		push	ds
		mov	ah, [DELALL]
		lds	di, [CURBUF]
		test	byte [ss:ATTRIB], 1
		jnz	short DoDelete
		test	byte [bx+0Bh], 1
		jz	short DoDelete
		pop	ds
		jmp	short DELNXT

; ---------------------------------------------------------------------------

		; 09/09/2022
		; 08/09/2022
DoDelete:
		call	REN_DEL_Check
		jnb	short DEL_SHARE_OK
		pop	ds
		jmp	short DELNXT
DEL_SHARE_OK:
		or	byte [di+5], 40h
		mov	[bx], ah
		mov	bx, [si]
		pop	ds
		or	byte [FOUNDDEL], 10h ; 09/09/2022
		cmp	bx, 2
		jb	short DELNXT
		cmp	bx, [es:bp+0Dh]
		ja	short DELNXT
		call	RELEASE
		jb	short No_fileJ
		call	FastOpen_Delete
DELNXT:
		les	bp, [THISDPB]
		call	GETENTRY
		jb	short No_fileJ
		call	NextEnt
		jnb	short DELFILE
		les	bp, [THISDPB]
		mov	al, [es:bp+0]
		call	FLUSHBUF
		jb	short No_fileJ
		test	byte [FOUNDDEL], 10h ; 09/09/2022
		jz	short DelError
		test	byte [ATTRIB], 8
		jz	short No_Set_Flag
		push	ax
		push	es
		push	di
		les	di, [THISCDS]
		mov	ah, [es:di]
		sub	ah, 'A'
		mov	[VOLCHNG_FLAG], ah
		call	FatRead_CDS
		pop	di
		pop	es
		pop	ax
No_Set_Flag:
		call	LcritDisk
		retn
DelError:
		test	byte [FOUNDDEL], 1 ; 09/09/2022
		jnz	short Del_Access_errJ
No_fileJ:
		jmp	No_file
Del_Access_errJ:
		jmp	Del_access_err

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 08/09/2022
REN_DEL_Check:
		push	ds
		push	di
		push	ax
		push	bx
		push	si
		push	ss
		pop	es
		mov	di, [ss:WFP_START]
		mov	si, bx
		mov	ds, word [ss:CURBUF+2]
		mov	bx, di
		add	bx, 2
		call	StrLen
		dec	cx
		add	di, cx
		call	SkipBack
		inc	di
		call	PackName
		pop	si
		pop	bx
		push	bx
		push	si
		push	ss
		pop	ds
		call	far [ShCloseFile]
		mov	word [THISSFT+2], ds
		mov	word [THISSFT], AUX_STACK_SF_ENTRY_size
		xor	ah, ah
		call	DOOPEN
		les	di, [THISSFT]
		mov	word [es:di+2], 10h
		mov	word [es:di], 1
		call	ShareEnter
		jb	short CheckDone
		les	di, [THISSFT]
		mov	word [es:di], 0
		call	ShareEnd
		clc
CheckDone:
		les	bp, [THISDPB]
		pop	si
		pop	bx
		pop	ax
		pop	di
		pop	ds
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 08/09/2022
FastOpen_Delete:
		pushf
		push	si
		push	bx
		push	ax
		mov	si, [WFP_START]
		mov	bx, FastTable
		mov	al, 3
		call	far [bx+2] ; 09/09/2022
		pop	ax
		pop	bx
		pop	si
		popf
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 08/09/2022
FastOpen_Update:
		pushf
		push	bx
		push	ax
		mov	bx, FastTable
		mov	al, 4
		call	far [bx+2] ; 09/09/2022
		pop	ax
		pop	bx
		popf
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 08/09/2022
DOS_RENAME:
		call	TestNet
		jnb	short LOCAL_RENAME
		mov	ax, 1111h
		int	2Fh		; Multiplex - NETWORK REDIRECTOR - RENAME REMOTE FILE
					; SS = DS = DOS	CS, SDA	first filename pointer = offset	of fully-qualified old name
					; SDA CDS pointer -> current directory
					; Return: CF set on error
		retn

; ---------------------------------------------------------------------------

		; 08/09/2022
LOCAL_RENAME:
		mov	byte [EXTERR_LOCUS], 2
		mov	si, [WFP_START]
		mov	di, [REN_WFP]
		mov	al, [si]
		mov	ah, [di]
		or	ax, 2020h
		cmp	al, ah
		jz	short SAMEDRV
		mov	ax, 11h
		stc
		retn
SAMEDRV:
		push	word [DMAADD+2]
		push	word [DMAADD]
		mov	[DMAADD+2], ds
		mov	word [DMAADD], RENAMEDMA
		mov	byte [FOUND_DEV], 0
		call	EcritDisk
		call	DOS_SEARCH_FIRST
		jnb	short Check_Dev
		cmp	ax, 12h
		jnz	short GOTERR
		mov	ax, 2
GOTERR:
		stc
RENAME_POP:
		pop	word [DMAADD]
		pop	word [DMAADD+2]
		call	LcritDisk
		retn

; ---------------------------------------------------------------------------

		; 09/09/2022
		; 08/09/2022
Check_Dev:
		mov	ax, 5
		cmp	byte [FOUND_DEV], 0 ; 09/09/2022
		jnz	short GOTERR
		mov	si, bx
		add	si, 1Ah
		call	REN_DEL_Check
		jnb	short REN_OK1
		mov	ax, 20h
		jmp	short RENAME_POP
REN_OK1:
		call	FastOpen_Delete
SWAP_SOURCE:
		mov	si, [REN_WFP]
		mov	[WFP_START], si
		mov	word [CURR_DIR_END], 0FFFFh
		mov	word [CREATING], 0E5FFh
		call	GetPathNoSet
		jb	short NODEST
		jz	short BAD_ACC
		or	ah, ah
		jns	short SAVEDEST
BAD_ACC:
		mov	ax, 5
		stc
RENAME_CLEAN:
		pushf
		push	ax
		mov	al, byte [THISDRV]
		call	FLUSHBUF
		pop	ax
		cmp	byte [FAILERR], 0
		jnz	short BAD_ERR
		popf
		jmp	short RENAME_POP
BAD_ERR:
		pop	ax
		mov	ax, 3
		jmp	short GOTERR
NODEST:
		jnz	short BAD_PATH
		cmp	byte [FAILERR], 0
		jnz	short BAD_PATH
		or	cl, cl
		jnz	short SAVEDEST
BAD_PATH:
		mov	ax, 3
		stc
		jmp	short RENAME_POP
SAVEDEST:
		push	ss
		pop	es
		mov	di, NAME2
		mov	si, NAME1
		mov	cx, 11
		rep movsb
		mov	ax, [DIRSTART]
		mov	word [DEVFCB_dir_time+3], ax

BUILDDEST:
		push	ss
		pop	es
		mov	bx, RENAMEDMA_21
		mov	di, NAME1
		mov	si, NAME2
		mov	cx, 11
NEWNAM:
		lodsb
		cmp	al, '?'
		jnz	short NOCHG
		mov	al, [bx]
NOCHG:
		stosb
		inc	bx
		loop	NEWNAM
		mov	byte [ATTRIB], 16h
		mov	byte [CREATING], 0FFh
		call	DEVNAME
		jnb	short BAD_ACC
		mov	bx, word [DEVFCB_dir_time+3]
		les	bp, [THISDPB]
		call	SETDIRSRCH
		jb	short BAD_ACC
		call	FINDENTRY
		jnb	short BAD_ACC
		cmp	byte [FAILERR], 0
		jnz	short BAD_ACCJ
		mov	ax, word [DEVFCB_dir_time+3]
		cmp	ax, [RENAMEDMA_15]
		jz	short SIMPLE_RENAME
		mov	al, [RENAMEDMA_21_dir_attr]
		test	al, 10h
		jnz	short BAD_ACCJ
		mov	byte [ATTRIB], al
		mov	word [THISSFT+2], ds
		mov	si, AUX_STACK_SF_ENTRY_size
		mov	word [THISSFT], si
		mov	word [si+2], 2
		xor	cx, cx
		call	make_type	; RENAME_MAKE
		jnb	short GOT_DEST
BAD_ACCJ:
		jmp	BAD_ACC

; ---------------------------------------------------------------------------

		; 08/09/2022
GOT_DEST:
		push	bx
		les	di, [THISSFT]
		call	ShareEnd
		pop	bx
		les	di, [CURBUF]
		or	byte [es:di+5], 40h
		mov	di, bx
		add	di, 0Bh
		mov	si, RENAMEDMA_21_dir_attr
		mov	cx, 21
		rep movsb
		call	GET_SOURCE
		jb	short RENAME_OVER
		mov	di, bx
		mov	es, word [CURBUF+2]
		mov	al, 0E5h
		stosb
		jmp	short DIRTY_IT

; ---------------------------------------------------------------------------

		; 09/09/2022
		; 08/09/2022
SIMPLE_RENAME:
		call	GET_SOURCE
		jb	short RENAME_OVER
		mov	di, bx
		mov	es, word [CURBUF+2]
		mov	si, NAME1
		mov	cx, 11
		rep movsb
DIRTY_IT:
		mov	di, word [CURBUF]
		or	byte [es:di+5], 40h
		mov	si, RENAMEDMA_1
		call	EcritDisk
		mov	byte [CREATING], 0
		call	RENAME_NEXT
		jb	short RENAME_OVER
		lea	si, [bx+1Ah]
		call	REN_DEL_Check
		jnb	short REN_OK2
		mov	ax, 20h
		jmp	RENAME_CLEAN
REN_OK2:
		call	FastOpen_Delete
		jmp	BUILDDEST
RENAME_OVER:
		clc
		jmp	RENAME_CLEAN

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 08/09/2022
GET_SOURCE:
		mov	bx, [RENAMEDMA_15]
		les	bp, [THISDPB]
		call	SETDIRSRCH
		jnb	short gs_startsrch
		retn
gs_startsrch:
		call	STARTSRCH
		mov	ax, [RENAMEDMA_13]
		call	GetEnt
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 08/09/2022
GET_FILE_INFO:
		call	TestNet
		jnb	short LOCAL_INFO
		mov	ax, 110Fh
		int	2Fh		; Multiplex - NETWORK REDIRECTOR - GET REMOTE FILE'S ATTRIBUTES
					; SS = DOS CS, SDA first filename pointer -> fully-qualified name of file
					; SDA CDS pointer -> current directory
					; Return: CF set on error, AX =	file attributes
		retn

; ---------------------------------------------------------------------------

		; 08/09/2022
LOCAL_INFO:
		call	EcritDisk
		mov	byte [NoSetDir], 1
		call	GetPath
		jnb	short info_check_dev
NO_PATH:
		jnz	short bad_path1
		or	cl, cl
		jz	short bad_path1
info_no_file:
		mov	ax, 2
BadRet:
		stc
justRet:
		call	LcritDisk
		retn
bad_path1:
		mov	ax, 3
		jmp	short BadRet
info_check_dev:
		or	ah, ah
		js	short info_no_file
		push	ds
		mov	ds, word [CURBUF+2]
		mov	si, bx
		xor	bx, bx
		mov	di, bx
		mov	cx, [si+16h]
		mov	dx, [si+18h]
		xor	ah, ah
		mov	al, [si+0Bh]
		test	al, 10h
		jnz	short NO_SIZE
		mov	di, [si+1Ch]
		mov	bx, [si+1Eh]
NO_SIZE:
		pop	ds
		clc
		jmp	short justRet

; ---------------------------------------------------------------------------

		; 08/09/2022
SET_FILE_ATTRIBUTE:
		test	ax, 0FFD8h
		jz	short set_look
_BAD_ACC:
		mov	byte [EXTERR_LOCUS], 1
		mov	byte [EXTERR_CLASS], 7
		mov	byte [EXTERR_ACTION], 4
		mov	ax, 5
		stc
		retn
set_look:
		call	TestNet
		jnb	short Local_Set
		push	ax
		mov	ax, 110Eh
		int	2Fh		; Multiplex - NETWORK REDIRECTOR - SET REMOTE FILE'S ATTRIBUTES
					; SS = DOS CS, SDA first filename pointer -> fully-qualified name of file
					; SDA CDS pointer -> current directory
					; STACK: WORD new file attributes
					; Return: CF set on error
		pop	bx
		retn
Local_Set:
		call	EcritDisk
		push	ax
		mov	byte [NoSetDir], 1
		call	GetPath
		jnb	short set_check_device
		pop	bx
		jmp	short NO_PATH
set_check_device:
		or	ah, ah
		jns	short set_check_share
		pop	ax
		call	LcritDisk
		jmp	short _BAD_ACC
set_check_share:
		pop	ax
		call	REN_DEL_Check
		jnb	short set_do
		mov	ax, 20h
		jmp	short OK_BYE
set_do:
		les	di, [CURBUF]
		and	byte [es:bx+0Bh], 0D8h
		or	[es:bx+0Bh], al
		or	byte [es:di+5], 40h
		mov	al, byte [THISDRV]
		push	dx
		push	di
		mov	ah, 0
		mov	dl, al
		mov	di, bx
		call	FastOpen_Update
		pop	di
		pop	dx
		call	FLUSHBUF
		jnb	short OK_BYE
		mov	ax, 2
OK_BYE:
		call	LcritDisk
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 08/09/2022
DOS_DUP:
		les	di, [cs:THISSFT]
DOS_Dup_Direct:
		call	IsSFTNet
		jnz	short DO_INC
		call	DEV_OPEN_SFT
DO_INC:
		inc	word [es:di]
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 08/09/2022
DOS_CREATE:
		xor	ah, ah
Create_inter:
		test	al, 80h
		jnz	short AttErr
		test	al, 8
		jz	short NoReset
		mov	al, 8
NoReset:
		or	al, 20h
		test	al, 50h
		jz	short ATT_OK
AttErr:
		mov	ax, 5
		mov	byte [EXTERR_LOCUS], 1
		jmp	short SET_MKND_ERR
ATT_OK:
		les	di, [THISSFT]
		push	es
		les	si, [THISCDS]
		cmp	si, 0FFFFh
		jnz	short TEST_RE_NET
		pop	es
		push	ax
		mov	ax, 1118h
		int	2Fh		; Multiplex - NETWORK REDIRECTOR - CREATE/TRUNCATE FILE
					; ES:DI	-> uninitialized SFT, SS = DOS CS
					; SDA first filename pointer ->	fully-qualified	name of	file
					; STACK: WORD file creation mode???
		pop	bx
		retn
TEST_RE_NET:
		test	word [es:si+43h], 8000h
		pop	es
		jz	short LOCAL_CREATE
		push	ax
		mov	ax, 1117h
		int	2Fh		; Multiplex - NETWORK REDIRECTOR - CREATE/TRUNCATE REMOTE FILE
					; ES:DI	-> uninitialized SFT, SS = DOS CS
					; SDA first filename pointer ->	fully-qualified	name of	file to	open
					; SDA CDS pointer -> current directory
					; Return: CF set on error
		pop	bx
		retn

; ---------------------------------------------------------------------------

		; 08/09/2022
LOCAL_CREATE:
		;or	word [es:di+2], 2
		; 09/09/2022 - Temporary !
		db	26h, 81h, 4Dh, 2, 2, 0 
		
		call	EcritDisk
		call	MakeNode
		jnb	short Create_ok
		mov	byte [VOLCHNG_FLAG], -1
		call	LcritDisk
SET_MKND_ERR:
		mov	bx, CRTERRTAB
		xlat
		stc
		retn
Create_ok:
		call	FastOpen_Delete
		mov	al, byte [ExtFCB+1]
		test	al, 8
		jz	short NoVolLabel
		les	di, [THISCDS]
		mov	ah, [es:di]
		sub	ah, 'A'
		mov	[VOLCHNG_FLAG], ah
		call	EcritDisk
		call	FatRead_CDS
		call	LcritDisk
NoVolLabel:
		mov	ax, 2
		les	di, [THISSFT]
		call	far [ShSU]
		call	LcritDisk
		jmp	SET_SFT_MODE

; ---------------------------------------------------------------------------

		; 08/09/2022
DOS_Create_New:
		mov	ah, 1
		jmp	Create_inter

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 08/09/2022
DOS_OPEN:
		mov	byte [NoSetDir], 0
		call	Check_Access_AX
		jnb	short dos_open1
		retn

; ---------------------------------------------------------------------------

		; 08/09/2022
dos_open1:
		les	di, [THISSFT]
		xor	ah, ah
		mov	[es:di+2], al
		push	es
		les	si, [THISCDS]
		cmp	si, -1
		jnz	short TEST_RE_NET1
		pop	es
		push	ax
		mov	ax, 1116h
		int	2Fh		; Multiplex - NETWORK REDIRECTOR - OPEN	EXISTING REMOTE	FILE
					; ES:DI	-> uninitialized SFT, SS = DOS CS
					; SDA first filename pointer ->	fully-qualified	name of	file to	open
					; STACK: WORD file open	mode
					; Return: CF set on error
		pop	bx
		retn
TEST_RE_NET1:
		test	word [es:si+43h], 8000h
		pop	es
		jz	short LOCAL_OPEN
		push	ax
		mov	ax, 1116h
		int	2Fh		; Multiplex - NETWORK REDIRECTOR - OPEN	EXISTING REMOTE	FILE
					; ES:DI	-> uninitialized SFT, SS = DOS CS
					; SDA first filename pointer ->	fully-qualified	name of	file to	open
					; STACK: WORD file open	mode
					; Return: CF set on error
		pop	bx
		retn
; ---------------------------------------------------------------------------

		; 08/09/2022
LOCAL_OPEN:
		call	EcritDisk
		or	byte [FastOpenFlg], 5
		call	GetPath
		jnb	short Open_found
		jnz	short bad_path2
		or	cl, cl
		jz	short bad_path2
		mov	ax, 2
OpenBadRet:
		stc
		mov	byte [cs:FastOpenFlg], 0
		call	LcritDisk
		jmp	Clear_FastOpen
bad_path2:
		mov	ax, 3
		jmp	short OpenBadRet
open_bad_access:
		mov	ax, 5
		jmp	short OpenBadRet
Open_found:
		jz	short open_bad_access
		or	ah, ah
		js	short open_ok
		mov	es, word [CURBUF+2]
		mov	al, [es:bx+0Bh]
		test	al, 8
		jnz	short open_bad_access
		test	al, 1
		jz	short open_ok
		push	ds
		push	si
		lds	si, [THISSFT]
		mov	cx, [si+2]
		test	cx, 8000h
		jnz	short ResetAccess
		mov	dl, cl
		and	dl, 0F0h
		cmp	dl, 70h
		jnz	short NormalOpen
ResetAccess:
		;and	cx, 0FFF0h
		; 09/09/2022 - Temporary !
		db	81h, 0E1h, 0F0h, 0FFh	
		
		mov	[si+2],	cx
		jmp	short FillSFT
NormalOpen:
		and	cl, 0Fh
		cmp	cl, 0
		jz	short FillSFT
		pop	si
		pop	ds
		jmp	short open_bad_access
FillSFT:
		pop	si
		pop	ds
open_ok:
		call	DOOPEN
DO_SHARE_CHECK:
		mov	cx, [RetryCount]
OpenShareRetry:
		push	cx
		call	SHARE_CHECK
		pop	cx
		jnb	short SHARE_OK
		call	Idle
		loop	OpenShareRetry
		les	di, [THISSFT]
		call	SHARE_ERROR
		jnb	short DO_SHARE_CHECK
		mov	byte [cs:FastOpenFlg], 0
		call	LcritDisk
		jmp	short Clear_FastOpen

		nop
SHARE_OK:
		mov	ax, 3
		les	di, [THISSFT]
		call	far [ShSU]
		mov	byte [cs:FastOpenFlg], 0
		call	LcritDisk
SET_SFT_MODE:
		les	di, [THISSFT]
		call	DEV_OPEN_SFT
		test	word [es:di+2], 8000h
		jnz	short set_sft_mode_not_fcb
		retn
set_sft_mode_not_fcb:
		mov	ax, [CurrentPDB]
		mov	[es:di+31h], ax
Clear_FastOpen:
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 08/09/2022
SHARE_ERROR:
		test	word [es:di+2], 8000h
		jnz	short HARD_ERR
		mov	cl, [es:di+2]
		and	cl, 0F0h
		cmp	cl, 0
		jnz	short NO_HARD_ERR
HARD_ERR:
		call	SHARE_VIOLATION
		jnb	short Clear_FastOpen
NO_HARD_ERR:
		mov	ax, 20h
		stc
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 08/09/2022
Check_Access_AX:
		mov	byte [Open_Access], al
		push	bx
		mov	bl, al
		and	bl, 0F0h
		cmp	byte [fSharing], -1
		jnz	short CheckShareMode
		cmp	bl, 70h
		jz	short CheckAccessMode
CheckShareMode:
		cmp	bl, 40h
		ja	short Make_Bad_Access
CheckAccessMode:
		mov	bl, al
		and	bl, 0Fh
		cmp	bl, 2
		ja	short Make_Bad_Access
		pop	bx
		clc
		retn
Make_Bad_Access:
		mov	ax, 0Ch
		pop	bx
		stc
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 08/09/2022
DISK_INFO:
		call	TestNet
		jnb	short _LOCAL_INFO
		mov	ax, 110Ch
		int	2Fh		; Multiplex - NETWORK REDIRECTOR - GET DISK SPACE
					; ES:DI	-> current directory
					; Return: AL = sectors per cluster, BX = total clusters
					; CX = bytes per sector, DX = number of	available clusters
		retn

; ---------------------------------------------------------------------------

		; 08/09/2022
_LOCAL_INFO:
		mov	byte [EXTERR_LOCUS], 2
		call	EcritDisk
		call	FatRead_CDS
		jb	short CRIT_LEAVE
		mov	bx, 2
		call	UNPACK
		jb	short CRIT_LEAVE
		lds	si, [CURBUF]
		mov	ah, [si+16]
		push	ss
		pop	ds
		mov	cx, [es:bp+0Dh]
		mov	dx, [es:bp+1Eh]
		cmp	dx, -1
		jz	short DoScan
		cmp	dx, cx
		jb	short GotVal
DoScan:
		xor	dx, dx
		dec	cx
SCANFREE:
		call	UNPACK
		jb	short CRIT_LEAVE
		jnz	short NOTFREECLUS
		inc	dx
NOTFREECLUS:
		inc	bx
		loop	SCANFREE
		dec	bx
ReturnVals:
		dec	bx
		mov	al, [es:bp+4]
		inc	al
		mov	cx, [es:bp+2]
		mov	[es:bp+1Eh], dx
		clc
CRIT_LEAVE:
		call	LcritDisk
		retn
GotVal:
		mov	bx, cx
		jmp	short ReturnVals

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 08/09/2022
DOS_SEARCH_FIRST:
		les	di, [THISCDS]
		cmp	di, -1
		jnz	short _TEST_RE_NET
		mov	ax, 1119h
		int	2Fh		; Multiplex - NETWORK REDIRECTOR - ???
		retn

; ---------------------------------------------------------------------------

		; 08/09/2022
_TEST_RE_NET:
		test	word [es:di+43h], 8000h
		jz	short LOCAL_SEARCH_FIRST
		mov	ax, 111Bh
		int	2Fh		; Multiplex - NETWORK REDIRECTOR - FINDFIRST
					; SS = DS = DOS	CS, [DTA] = uninitialized 21-byte findfirst search data
					; SDA first filename pointer ->	fully-qualified	search template
					; SDA CDS pointer -> current directory
					; Return: CF set on error
		retn

; ---------------------------------------------------------------------------

		; 09/09/2022
		; 08/09/2022
LOCAL_SEARCH_FIRST:
		call	EcritDisk
		mov	byte [NoSetDir], 1
		call	GetPath
		jnb	short find_check_dev
		jnz	short bad_path3
		or	cl, cl
		jz	short bad_path3
find_no_more:
		mov	ax, 12h
BadBye:
		stc
		call	LcritDisk
		retn
bad_path3:
		mov	ax, 3
		jmp	short BadBye
find_check_dev:
		or	ah, ah
		jns	short found_entry
		mov	word [LASTENT], -1
		inc	byte [FOUND_DEV] ; 09/09/2022
found_entry:
		les	di, [DMAADD]
		mov	si, [WFP_START]
		lodsb
		sub	al, 40h
		stosb
found_it:
		les	di, [DMAADD]
		inc	di
		mov	si, NAME1
		movsb
		cmp	byte [es:di-1], 5
		jnz	short NOTKANJB
		mov	byte [es:di-1], 0E5h
NOTKANJB:
		mov	cx, 10
		rep movsb
		mov	al, byte [ATTRIB]
		stosb
		push	ax
		mov	ax, word [LASTENT]
		stosw
		mov	ax, [DIRSTART]
		stosw
		add	di, 4
		pop	ax
		or	ah, ah
		js	short DOSREL
		cmp	word [CURBUF], -1
		jnz	short OKSTORE
		mov	word [es:di-8], -1
		jmp	short find_no_more
OKSTORE:
		mov	ds, word [CURBUF+2]
DOSREL:
		mov	si, bx
		mov	cx, 32
		mov	ax, di
		rep movsb
		mov	di, ax
		cmp	byte [es:di], 5
		jnz	short NO05
		mov	byte [es:di], 0E5h
NO05:
		push	ss
		pop	ds
		clc
		call	LcritDisk
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 08/09/2022
DOS_SEARCH_NEXT:
		les	di, [DMAADD]
		mov	al, [es:di]
		test	al, 80h
		jz	short LOCAL_SEARCH_NEXT
		mov	ax, 111Ch
		int	2Fh		; Multiplex - NETWORK REDIRECTOR - FINDNEXT
					; SS = DS = DOS	CS, [DTA] = 21-byte findfirst search data
					; Return: CF set on error, AX =	DOS error code
					; CF clear if successful
		retn

; ---------------------------------------------------------------------------

		; 08/09/2022
LOCAL_SEARCH_NEXT:
		mov	byte [EXTERR_LOCUS], 2
		call	EcritDisk
		mov	word [THISCDS], SETFINDPB+3
		mov	word [THISCDS+2], cs
		add	al, 40h
		call	InitCDS
		jb	short No_files
		les	di, [THISCDS]
		les	bp, [es:di+45h]
		call	GOTDPB
		mov	al, [es:bp+0]
		mov	byte [THISDRV], al
		mov	word [CREATING], 0E500h
		mov	byte [NoSetDir], 1
		lds	si, [DMAADD]
		lodsb

; ---------------------------------------------------------------------------

		; 08/09/2022
RENAME_NEXT:
		push	ss
		pop	es
		mov	di, NAME1
		mov	cx, 11
		rep movsb
		lodsb
		mov	byte [ss:ATTRIB], al
		lodsw
		or	ax, ax
		jns	short cont_load
No_files:
		jmp	find_no_more
cont_load:
		push	ax
		lodsw
		mov	bx, ax
		push	ss
		pop	ds
		les	bp, [THISDPB]
		call	SETDIRSRCH
		jnb	short SEARCH_GOON
		pop	ax
		jmp	short No_files
SEARCH_GOON:
		call	STARTSRCH
		pop	ax
		call	GetEnt
		jb	short No_files
		call	NextEnt
		jb	short No_files
		xor	ah, ah
		jmp	found_it

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 08/09/2022
DOS_ABORT:
		mov	es, [ss:CurrentPDB]
		mov	cx, word [es:BCON]
reset_free_jfn:
		mov	bx, cx
		push	cx
		dec	bx
		call	_$CLOSE
		pop	cx
		loop	reset_free_jfn
		push	ss
		pop	ds
		mov	ax, 111Dh
		int	2Fh		; Multiplex - NETWORK REDIRECTOR - CLOSE ALL REMOTE FILES FOR PROCESS
					; DS???, SS = DOS CS
		call	far [MFTCloseP]
		les	di, [ss:SFTFCB]
		mov	cx, [es:di+4]
		jcxz	FCBScanDone
		lea	di, [di+6]
		mov	ax, [ss:PROC_ID]
FCBTest:
		cmp	[es:di+31h], ax
		jnz	short FCBNext
		mov	word [es:di], 0
FCBNext:
		add	di, 53
		loop	FCBTest
FCBScanDone:
		xor	bx, bx
Scan:
		push	bx
		call	SFFromSFN
		pop	bx
		jnb	short Scan1
		retn

; ---------------------------------------------------------------------------

		; 08/09/2022
Scan1:
		cmp	word [es:di], 0
		jz	short scan_next
		mov	ax, [ss:PROC_ID]
		cmp	[es:di+31h], ax
		jnz	short scan_next
		mov	ax, [ss:USER_ID]
		cmp	[es:di+2Fh], ax
		jnz	short scan_next
		mov	word [es:di], 0
scan_next:
		inc	bx
		jmp	short Scan

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 08/09/2022
DOS_CLOSE:
		les	di, [THISSFT]
		mov	bx, [es:di+5]
		test	bx, 8000h
		jz	short LocalClose
		mov	ax, 1106h
		int	2Fh		; Multiplex - NETWORK REDIRECTOR - CLOSE REMOTE	FILE
					; ES:DI	-> SFT
					; SFT DPB field	-> DPB of drive	containing file
					; Return: CF set on error, AX =	DOS error code
					; CF clear if successful
		retn

; ---------------------------------------------------------------------------

		; 08/09/2022
LocalClose:
		call	EcritDisk
		call	SetSFTTimes
		call	FREESFT
		push	ss
		pop	ds
		push	ax
		push	bx
		call	ShareEnd
		pop	bx
		pop	ax
CloseEntry:
		push	ax
		test	bx, 0C0h
		jnz	short FREE_SFT_OK
rdir:
		call	DirFromSFT
		mov	al, 5
		jb	short CloseFinish
clook:
		push	di
		push	si
		lea	si, [si+20h]
		call	XCHGP
		call	MetaCompare
		call	XCHGP
		pop	si
		pop	di
		jz	short CLOSE_GO
Bye:
		mov	di, si
		push	ds
		pop	es
		push	ss
		pop	ds
		stc
		mov	al, 2
		jmp	short CloseFinish

; ---------------------------------------------------------------------------

		; 08/09/2022
CLOSE_GO:
		mov	ch, [es:di+0Bh]
		mov	al, [si+4]
		mov	byte [ss:ATTRIB], al
		call	MatchAttributes
		jnz	short Bye

setattr:
		or	byte [es:di+0Bh], 20h
		mov	ax, [si+0Bh]
		mov	[es:di+1Ah], ax
		mov	ax, [si+11h]
		mov	[es:di+1Ch], ax
		mov	ax, [si+13h]
		mov	[es:di+1Eh], ax
		mov	ax, [si+0Fh]
		mov	[es:di+18h], ax
		mov	ax, [si+0Dh]
		mov	[es:di+16h], ax
		or	byte [es:bx+5], 40h
yesdirty:
		push	ds
		push	si
		push	ss
		pop	ds
		mov	al, byte [THISDRV]
		push	dx
		mov	ah, 0
		mov	dl, al

do_update:
		call	FastOpen_Update
		pop	dx
		call	FLUSHBUF
		pop	di
		pop	es
		mov	al, 5
		jb	short CloseFinish
FREE_SFT_OK:
		clc
CloseFinish:
		pushf
		call	DEV_CLOSE_SFT
		popf
		pop	cx
		pushf
		dec	cx
		jnz	short NoFree
		mov	[es:di], cx
NoFree:
		call	LcritDisk
		popf
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 08/09/2022
FREESFT:
		pushf
		mov	ax, [es:di]
		dec	ax
		jnz	short SetCount
		dec	ax
SetCount:
		xchg	ax, [es:di]
		popf
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 08/09/2022
DirFromSFT:
		mov	byte [EXTERR_LOCUS], 2
		push	es
		push	di
		mov	dx, [es:di+1Dh]
		push	dx
		call	FATREAD_SFT
		pop	dx
		jb	short PopDone
		xor	al, al
		mov	byte [ALLOWED], 18h
		call	GETBUFFR
		jb	short PopDone
		pop	si
		pop	ds
		les	di, [ss:CURBUF]
		or	byte [es:di+5], 4
		mov	bx, di
		lea	di, [di+10h]
		mov	al, 32
		mul	byte [si+1Fh]
		add	di, ax
		retn
PopDone:
		pop	di
		pop	es
PopDone_retn:
		retn

; ---------------------------------------------------------------------------

		; 08/09/2022
DOS_COMMIT:
		les	di, [THISSFT]
		mov	bx, [es:di+5]
		test	bx, 0C0h
		jnz	short PopDone_retn
		test	bx, 8000h
		jz	short LOCAL_COMMIT
		mov	ax, 1107h
		int	2Fh		; Multiplex - NETWORK REDIRECTOR - COMMIT REMOTE FILE
					; ES:DI	-> SFT
					; SFT DPB field	-> DPB of drive	containing file
					; Return: CF set on error, AX =	DOS error code
					; CF clear if successful
		retn

; ---------------------------------------------------------------------------

		; 08/09/2022
LOCAL_COMMIT:
		call	EcritDisk
		call	SetSFTTimes
		mov	ax, -1
		call	CloseEntry

localcommit_retn:
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 08/09/2022
SetSFTTimes:
		test	bx, 0C0h
		jnz	short localcommit_retn
		test	bx, 4000h
		jnz	short localcommit_retn
		push	ax
		push	bx
		call	DATE16
		mov	[es:di+0Fh], ax
		mov	[es:di+0Dh], dx
		xor	ax, ax
		call	far [ShSU]
		pop	bx
		pop	ax
		retn

; ---------------------------------------------------------------------------

		; 08/09/2022
DOS_MKDIR:
		call	TestNet
		jnb	short LOCAL_MKDIR
		mov	ax, 1103h
		int	2Fh		; Multiplex - NETWORK REDIRECTOR - MAKE	REMOTE DIRECTORY
					; SS = DOS CS
					; SDA first filename pointer ->	fully-qualified	directory name
					; SDA CDS pointer -> current directory
					; Return: CF set on error, AX =	DOS error code
					; CF clear if successful
		retn

; ---------------------------------------------------------------------------

		; 08/09/2022
NODEACCERRJ:
		mov	ax, 5
_BadRet:
		stc
		call	LcritDisk
		retn
PATHNFJ:
		call	LcritDisk
		jmp	SET_MKND_ERR

; ---------------------------------------------------------------------------

		; 08/09/2022
LOCAL_MKDIR:
		call	EcritDisk
		mov	word [THISSFT+2], ss
		mov	word [THISSFT], RENBUF
		mov	word [RENBUF_SF_ENTRY_sf_MFT], 0
		mov	al, 10h
		call	MakeNode
		jb	short PATHNFJ
		cmp	ax, 3
		jz	short NODEACCERRJ
		les	bp, [THISDPB]
		lds	di, [CURBUF]
		sub	si, di
		push	si
		push	word [di+6]
		push	ss
		pop	ds
		push	word [DIRSTART]
		xor	ax, ax
		mov	[DIRSTART], ax
		call	NEWDIR
		jb	short NODEEXISTSPOPDEL
		call	GetEnt
		jb	short NODEEXISTSPOPDEL
		les	di, [CURBUF]
		or	byte [es:di+5], 40h

yesdirty1:
		add	di, 16
		mov	ax, 202Eh
		mov	dx, [DIRSTART]
		call	SETDOTENT
		mov	ax, 2E2Eh
		pop	dx
		call	SETDOTENT
		les	bp, [THISDPB]
		mov	byte [ALLOWED], 18h
		pop	dx
		xor	al, al
		call	GETBUFFR
		jb	short NODEEXISTSP
		mov	dx, [DIRSTART]
		lds	di, [CURBUF]
		or	byte [di+5], 4
		pop	si
		add	si, di
		mov	[si], dx
		xor	dx, dx
		mov	[si+2],	dx
		mov	[si+4],	dx
DIRUP:
		or	byte [di+5], 40h
yesdirty2:
		push	ss
		pop	ds
		mov	al, [es:bp+0]
		call	FLUSHBUF
		mov	ax, 5
		call	LcritDisk
		retn

NODEEXISTSPOPDEL:
		pop	dx
		pop	dx
		les	bp, [THISDPB]
		mov	byte [ALLOWED], 18h
		xor	al, al
		call	GETBUFFR
		jb	short NODEEXISTSP
		lds	di, [CURBUF]
		or	byte [di+5], 4
		pop	si
		add	si, di
		sub	si, 1Ah
		mov	byte [si], 0E5h
		call	DIRUP
NODEEXISTS:
		jmp	NODEACCERRJ
NODEEXISTSP:
		pop	si
		jmp	short NODEEXISTS

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 08/09/2022
DOS_CHDIR:
		call	TestNet
		jnb	short LOCAL_CHDIR
		mov	ax, 1105h
		int	2Fh		; Multiplex - NETWORK REDIRECTOR - CHDIR
					; SS = DOS CS
					; SDA first filename pointer ->	fully-qualified	directory name
					; SDA CDS pointer -> current directory
					; Return: CF set on error, AX =	DOS error code
					; CF clear if successful
		retn

; ---------------------------------------------------------------------------

		; 08/09/2022
LOCAL_CHDIR:
		call	EcritDisk
		mov	byte [NoSetDir], 0
		mov	byte [ExtFCB+1], 16h
		or	byte [FastOpenFlg], 1
		call	GetPath
		mov	byte [FastOpenFlg], 0
		mov	ax, 3
		jb	short ChDirDone
		jnz	short NOTDIRPATH
		mov	cx, [DIRSTART]
		clc
ChDirDone:
		call	LcritDisk
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 08/09/2022
DOS_RMDIR:
		call	TestNet
		jnb	short LOCAL_RMDIR
		mov	ax, 1101h
		int	2Fh		; Multiplex - NETWORK REDIRECTOR - REMOVE REMOTE DIRECTORY
					; SS = DOS CS
					; SDA first filename pointer ->	fully-qualified	directory name
					; SDA CDS pointer -> current directory
					; Return: CF set on error, AX =	DOS error code
					; CF clear if successful
		retn

; ---------------------------------------------------------------------------
		
		; 09/09/2022
		; 08/09/2022
LOCAL_RMDIR:
		call	EcritDisk
		mov	byte [NoSetDir], 0
		mov	byte [ExtFCB+1], 16h
		call	GetPath
		jb	short NOPATH
		jnz	short NOTDIRPATH
		mov	di, [DIRSTART]
		or	di, di
		jnz	short rmdir_get_buf
		jmp	short NOTDIRPATH
NOPATH:
		mov	ax, 3
		jmp	_BadRet
NOTDIRPATHPOP:
		pop	ax
NOTDIRPATHPOP2:
		pop	ax
NOTDIRPATH:
		jmp	NODEACCERRJ
rmdir_get_buf:
		lds	di, [CURBUF]
		sub	bx, di
		push	bx
		push	word [di+6]
		push	ss
		pop	ds
		push	ss
		pop	es
		mov	di, NAME1
		mov	al, '?'
		mov	cx, 11
		rep stosb
		xor	al, al
		stosb
		call	STARTSRCH
		call	GETENTRY
		jb	short NOTDIRPATHPOP
		mov	ds, word [CURBUF+2]
		mov	si, bx
		lodsw
		cmp	ax, 202Eh
		jnz	short NOTDIRPATHPOP
		add	si, 30
		lodsw
		cmp	ax, '..'
		jnz	short NOTDIRPATHPOP
		push	ss
		pop	ds
		mov	word [LASTENT], 2
		call	GETENTRY
		jb	short NOTDIRPATHPOP
		mov	byte [ATTRIB], 16h
		call	SRCH
		jnb	short NOTDIRPATHPOP
		cmp	byte [FAILERR], 0
		jnz	short NOTDIRPATHPOP
		les	bp, [THISDPB]
		mov	bx, [DIRSTART]
		call	RELEASE
		jb	short NOTDIRPATHPOP
		pop	dx
		mov	byte [ALLOWED], 18h
		xor	al, al
		call	GETBUFFR
		jb	short NOTDIRPATHPOP2
		lds	di, [CURBUF]
		or	byte [di+5], 4
		pop	bx
		add	bx, di
		mov	byte [bx], 0E5h
		push	ds
		push	ss
		pop	ds
		push	ax
		mov	si, [WFP_START]
		mov	bx, FastTable
		mov	al, 3
		call	far [bx+2] ; 09/09/2022
		pop	ax
		pop	ds
		jmp	DIRUP

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 08/09/2022
SWAPBACK:
		mov	byte [CONSWAP], 0
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 08/09/2022
SWAPCON:
		push	es
		push	di
		mov	byte [CONSWAP], 1
		les	di, [THISSFT]
		mov	word [CONSFT], di
		mov	word [CONSFT+2], es
		pop	di
		pop	es
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 08/09/2022
DOS_READ:
		les	di, [THISSFT]
		mov	al, [es:di+2]
		and	al, 0Fh
		cmp	al, 1
		jnz	short READ_NO_MODE
		jmp	SET_ACC_ERR
READ_NO_MODE:
		call	SETUP
		jcxz	NoIORet
		call	IsSFTNet
		jz	short LOCAL_READ
		mov	ax, 1108h
		int	2Fh		; Multiplex - NETWORK REDIRECTOR - READ	FROM REMOTE FILE
					; ES:DI	-> SFT
					; SFT DPB field	-> DPB of drive	containing file
					; CX = number of bytes,	SS = DOS CS, SDA DTA field -> user buffer
					; Return: CF set on error, CX =	bytes read
		retn
NoIORet:
		clc
		retn

; ---------------------------------------------------------------------------

		; 14/09/2022
		; 10/09/2022
		; 08/09/2022
LOCAL_READ:
		test	word [es:di+5], 80h
		jnz	short READDEV
		mov	byte [EXTERR_LOCUS], 2
		call	EcritDisk
		call	DISKREAD
		call	LcritDisk
		retn
READDEV:
		mov	byte [EXTERR_LOCUS], 4
		mov	bl, [es:di+5]
		les	di, [DMAADD]
		test	bl, 40h
		jz	short ENDRDDEVJ3
		test	bl, 4
		jz	short TESTRAW
		xor	al, al
ENDRDDEVJ3:
		jmp	ENDRDDEVJ2
TESTRAW:
		test	bl, 20h
		jnz	short DVRDRAW
		test	bl, 1
		jz	short NOTRDCON
		jmp	READCON
DVRDRAW:
		push	es
		pop	ds
ReadRawRetry:
		; 14/09/2022
		;mov	bx, di
		; 10/09/2022 - Magic Code ! (for Windows 3.1)
		db	8Bh, 0DFh
		;xor	ax, ax
		db	33h, 0C0h
		;mov	dx, ax
		db	8Bh, 0D0h
		call	SETREAD
		push	ds
		lds	si, [ss:THISSFT]
		call	DEVIOCALL
		;mov	dx, di
		db	8Bh, 0D7h
		mov	ah, 86h
		mov	di, word [ss:DEVCALL_REQSTAT]
		test	di, 8000h
		jz	short CRDROK
		call	CHARHARD
		;mov	di, dx
		db	8Bh, 0FAh
		or	al, al
		jz	short CRDROK
		cmp	al, 3
		jz	short CRDFERR
		pop	ds
		jmp	short ReadRawRetry
CRDFERR:
		pop	di
DEVIOFERR:
		les	di, [ss:THISSFT]
		jmp	SET_ACC_ERR_DS
CRDROK:
		pop	di
		mov	di, dx
		add	di, word [ss:CALLSCNT]
		jmp	short ENDRDDEVJ3
NOTRDCON:
		mov	ax, es
		mov	ds, ax
		mov	bx, di
		xor	dx, dx
		mov	ax, dx
		push	cx
		mov	cx, 1
		call	SETREAD
		pop	cx
		lds	si, [ss:THISSFT]
		lds	si, [si+7]
DVRDLP:
		call	DSKSTATCHK
		call	DEVIOCALL2
		push	di
		mov	ah, 86h
		mov	di, word [ss:DEVCALL_REQSTAT]
		test	di, 8000h
		jz	short CRDOK
		call	CHARHARD
		pop	di
		mov	word [ss:CALLSCNT], 1
		cmp	al, 1
		jz	short DVRDLP
		cmp	al, 3
		jz	short DEVIOFERR
		xor	al, al
		jmp	short DVRDIGN
CRDOK:
		pop	di
		cmp	word [ss:CALLSCNT], 1
		jnz	short ENDRDDEVJ2
		push	ds
		mov	ds, [ss:CALLXAD+2]
		mov	al, [di]
		pop	ds
DVRDIGN:
		inc	word [ss:CALLXAD]
		mov	word [ss:DEVCALL_REQSTAT], 0
		inc	di
		cmp	al, 1Ah
		jz	short ENDRDDEVJ2
		cmp	al, 0Dh
		loopne	DVRDLP
		inc	ax
ENDRDDEVJ2:
		jmp	short ENDRDDEV

; ---------------------------------------------------------------------------

		; 08/09/2022
TRANBUF:
		lodsb
		stosb
		cmp	al, 0Dh
		jnz	short NORMCH
		mov	byte [si], 0Ah
NORMCH:
		cmp	al, 0Ah
		loopne	TRANBUF
		jnz	short ENDRDCON
		xor	si, si
		call	OUTT
		or	al, 1
ENDRDCON:
		push	ss
		pop	ds
		call	SWAPBACK
		mov	[CONTPOS], si
ENDRDDEV:
		push	ss
		pop	ds
		mov	[NEXTADD], di
		jnz	short SETSFTC
		les	di, [THISSFT]
		and	byte [es:di+5], 0BFh
SETSFTC:
		call	SETSFT
		retn

; ---------------------------------------------------------------------------

		; 08/09/2022
READCON:
		call	SWAPCON
		mov	si, [CONTPOS]
		or	si, si
		jnz	short TRANBUF
		cmp	byte [CONBUF], 128
		jz	short GETBUF
		mov	word [CONBUF], 0FF80h
GETBUF:
		push	cx
		push	es
		push	di
		mov	dx, CONBUF
		call	_$STD_CON_STRING_INPUT
		pop	di
		pop	es
		pop	cx
		mov	si, CONBUF+2
		cmp	byte [si], 1Ah
		jnz	short TRANBUF
		mov	al, 1Ah
		stosb
		dec	di
		mov	al, 0Ah
		call	OUTT
		xor	si, si
		jmp	short ENDRDCON

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 08/09/2022
DOS_WRITE:
		les	di, [THISSFT]
		mov	al, [es:di+2]
		and	al, 0Fh
		cmp	al, 0
		jnz	short Check_FCB_RO
BadMode:
		jmp	SET_ACC_ERR
Check_FCB_RO:
		test	word [es:di+2], 8000h
		jz	short WRITE_NO_MODE
		test	byte [es:di+4], 1
		jnz	short BadMode
WRITE_NO_MODE:
		call	SETUP
		call	IsSFTNet
		jz	short LOCAL_WRITE
		mov	ax, 1109h
		int	2Fh		; Multiplex - NETWORK REDIRECTOR - WRITE TO REMOTE FILE
					; ES:DI	-> SFT
					; SFT DPB field	-> DPB of drive	containing file
					; CX = number of bytes,	SS = DOS CS, SDA DTA field -> user buffer
					; Return: CF set on error, CX =	bytes written
		retn

; ---------------------------------------------------------------------------

		; 08/09/2022
LOCAL_WRITE:
		test	word [es:di+5], 80h
		jnz	short WRTDEV
		mov	byte [EXTERR_LOCUS], 2
		call	EcritDisk
		call	DISKWRITE
		call	LcritDisk
		retn
DVWRTRAW:
		xor	ax, ax
		call	SETWRITE
		push	ds
		lds	si, [ss:THISSFT]
		call	DEVIOCALL
		mov	dx, di
		mov	ah, 87h
		mov	di, word [ss:DEVCALL_REQSTAT]
		test	di, 8000h
		jz	short CWRTROK
		call	CHARHARD
		mov	bx, dx
		or	al, al
		jz	short CWRTROK
		cmp	al, 3
		jz	short CWRFERR
		pop	ds
		jmp	short DVWRTRAW
CWRFERR:
		pop	ax
		jmp	CRDFERR
CWRTROK:
		pop	ax
		pop	ds
		mov	ax, word [CALLSCNT]
ENDWRDEV:
		les	di, [THISSFT]
		mov	cx, ax
		call	ADDREC
		retn
WRTNUL:	
		mov	dx, cx
WRTCOOKJ:
		jmp	WRTCOOKDONE
WRTDEV:
		mov	byte [EXTERR_LOCUS], 4
		or	byte [es:di+5], 40h
		mov	bl, [es:di+5]
		xor	ax, ax
		jcxz	ENDWRDEV
		push	ds
		mov	al, bl
		lds	bx, [DMAADD]
		mov	di, bx
		xor	dx, dx
		test	al, 20h
		jz	short TEST_DEV_CON
		jmp	short DVWRTRAW
TEST_DEV_CON:
		test	al, 2
		jnz	short WRITECON
		test	al, 4
		jnz	short WRTNUL
		mov	ax, dx
		cmp	byte [bx], 1Ah
		jz	short WRTCOOKJ
		push	cx
		mov	cx, 1
		call	SETWRITE
		pop	cx
		lds	si, [ss:THISSFT]
		lds	si, [si+7]
DVWRTLP:
		call	DSKSTATCHK
		call	DEVIOCALL2
		push	di
		mov	ah, 87h
		mov	di, word [ss:DEVCALL_REQSTAT]
		test	di, 8000h
		jz	short CWROK
		call	CHARHARD
		pop	di
		mov	word [ss:CALLSCNT], 1
		cmp	al, 1
		jz	short DVWRTLP
		or	al, al
		jz	short DVWRTIGN
		jmp	CRDFERR

; ---------------------------------------------------------------------------

		; 08/09/2022
CWROK:
		pop	di
		cmp	word [ss:CALLSCNT], 0
		jz	short WRTCOOKDONE
DVWRTIGN:
		inc	dx
		inc	word [ss:CALLXAD]
		inc	di
		push	ds
		mov	ds, [ss:CALLXAD+2]
		cmp	byte [di], 1Ah
		pop	ds
		jz	short WRTCOOKDONE
		mov	word [ss:DEVCALL_REQSTAT], 0
		loop	DVWRTLP
WRTCOOKDONE:
		mov	ax, dx
		pop	ds
		jmp	ENDWRDEV
WRITECON:
		push	ds
		push	ss
		pop	ds
		call	SWAPCON
		pop	ds
		mov	si, bx
		push	cx
WRCONLP:
		lodsb
		cmp	al, 1Ah
		jz	short CONEOF
		call	OUTT
		loop	WRCONLP
CONEOF:
		pop	ax
		sub	ax, cx
		pop	ds
		call	SWAPBACK
		jmp	ENDWRDEV

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 08/09/2022
GET_IO_SFT:
		test	byte [ss:CONSWAP], 0FFh
		jnz	short GetRedir
GetNormal:
		push	ss
		pop	ds
		push	es
		push	di
		call	SFFromHandle
		jb	short RET44P
		mov	si, es
		mov	ds, si
		mov	si, di
RET44P:
		pop	di
		pop	es
		retn
GetRedir:
		cmp	bx, 1
		ja	short GetNormal
		lds	si, [ss:CONSFT]
		clc
get_io_sft_retn:
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 08/09/2022
DIRREAD:
		xor	dx, dx
		cmp	word [DIRSTART], 0
		jnz	short SubDir
		xchg	ax, dx
		jmp	short DoRead

		nop
SubDir:
		mov	dl, al
		and	dl, [es:bp+4]
		mov	cl, [es:bp+5]
		shr	ax, cl
DoRead:
		mov	byte [SECCLUSPOS], dl
		mov	cx, ax
		mov	ah, dl
		mov	dx, [DIRSEC]
		add	dl, ah
		adc	dh, 0
		mov	bx, [CLUSNUM]
		mov	[NXTCLUSNUM], bx
		jcxz	FIRSTCLUSTER
SKPCLLP:
		call	UNPACK
		jb	short get_io_sft_retn
		xchg	bx, di
		call	IsEOF
		jnb	short HAVESKIPPED
		loop	SKPCLLP
HAVESKIPPED:
		mov	[NXTCLUSNUM], bx
		mov	dx, di
		mov	bl, ah
		call	FIGREC
FIRSTCLUSTER:
		mov	byte [ALLOWED], 18h
		xor	al, al
		call	GETBUFFR
		jb	short get_io_sft_retn
SET_BUF_AS_DIR:
		push	ds
		push	si
		lds	si, [CURBUF]
		or	byte [si+5], 4
		pop	si
		pop	ds
dirread_retn:
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 08/09/2022
FATSECRD:
		mov	byte [ss:ALLOWED], 18h
		mov	di, cx
		mov	cl, [es:bp+8]
		mov	al, [es:bp+0Fh]
		xor	ah, ah
		mov	ch, ah
		push	dx
NXTFAT:
		push	cx
		push	ax
		mov	cx, di
		call	DSKREAD
		pop	ax
		pop	cx
		jz	short RET41P
		add	dx, ax
		loop	NXTFAT
		pop	dx
		mov	cx, di
DREAD:
		call	DSKREAD
		jz	short dirread_retn
		mov	byte [ss:SECCLUSPOS+2], 0
		call	HARDERRRW
		cmp	al, 1
		jz	short DREAD
		cmp	al, 3
		clc
		jnz	short NO_CAR
		stc
NO_CAR:
		retn
RET41P:
		pop	dx
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 08/09/2022
DSKREAD:
		push	cx
		mov	ah, [es:bp+16h]
		mov	al, [es:bp+1]
		push	bx
		push	es
		call	SETREAD
		jmp	short DODSKOP

		nop

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 08/09/2022
DWRITE:
		call	DSKWRITE
		jnz	short DWRITE_ERR
		retn
DWRITE_ERR:
		mov	byte [ss:SECCLUSPOS+2], 1
		call	HARDERRRW
		cmp	al, 1
		jz	short DWRITE
		cmp	al, 3
		clc
		jnz	short ret_label
		stc
ret_label:
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 08/09/2022
DSKWRITE:
		push	cx
		mov	ah, [es:bp+16h]
		mov	al, [es:bp+1]
		push	bx
		push	es
		call	SETWRITE
DODSKOP:
		mov	cx, ds
		pop	ds
		push	ds
		lds	si, [ds:bp+12h]
		call	DEVIOCALL2
		mov	ds, cx
		pop	es
		pop	bx
		mov	cx, word [ss:CALLSCNT]
		pop	di
		sub	cx, di
		neg	cx
		mov	ax, word [ss:DEVCALL_REQSTAT]
		test	ax, 8000h
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 08/09/2022
HARDERRRW:
		cmp	al, 0Fh
		jnz	short DO_ERR
		push	ds
		push	si
		lds	si, [ss:CALLVIDRW]
		mov	[ss:EXTERRPT+2], ds
		mov	[ss:EXTERRPT], si
		pop	si
		pop	ds
DO_ERR:
		call	HARDERR
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 08/09/2022
SETUP:
		lds	si, [es:di+7]
		mov	word [ss:THISDPB+2], ds
		push	ss
		pop	ds
		mov	word [THISDPB], si
		mov	bx, [DMAADD]
		mov	[NEXTADD], bx
		mov	byte [SECCLUSPOS+1], 0
		mov	ax, [es:di+15h]
		mov	dx, [es:di+17h]
		mov	word [BYTPOS+2], dx
		mov	word [BYTPOS], ax
		test	word [es:di+5], 8080h
		jnz	short NOSETSTUFF
		push	es
		les	bp, [THISDPB]
		mov	bl, [es:bp+0]
		mov	byte [THISDRV], bl
		mov	bx, [es:bp+2]
		cmp	dx, bx
		jnb	short EOFERR
		div	bx
		mov	[SECPOS], ax
		mov	[BYTSECPOS], dx
		mov	dx, ax
		and	al, [es:bp+4]
		mov	byte [SECCLUSPOS], al
		mov	ax, cx
		mov	cl, [es:bp+5]
		shr	dx, cl
		mov	[CLUSNUM], dx
		pop	es
		mov	cx, ax
NOSETSTUFF:
		mov	ax, cx
		add	ax, [DMAADD]
		jnb	short setup_OK
		mov	ax, [DMAADD]
		neg	ax
		jnz	short NoDec
		dec	ax
NoDec:
		mov	cx, ax
		jcxz	NOROOM
setup_OK:
		retn
EOFERR:
		pop	es
		xor	cx, cx
		mov	byte [DISK_FULL], 1
NOROOM:
		pop	bx
		clc
breakdown_retn:
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 08/09/2022
BREAKDOWN:
		mov	ax, [BYTSECPOS]
		mov	bx, cx
		or	ax, ax
		jz	short SAVFIR
		sub	ax, [es:bp+2]
		neg	ax
		sub	bx, ax
		jnb	short SAVFIR
		add	ax, bx
		xor	bx, bx
SAVFIR:
		mov	[BYTCNT1], ax
		mov	ax, bx
		xor	dx, dx
		div	word [es:bp+2]
		mov	[SECCNT], ax
		mov	[BYTCNT2], dx
		or	dx, [BYTCNT1]
		jnz	short breakdown_retn
		cmp	ax, 1
		jnz	short breakdown_retn
		mov	ax, [es:bp+2]
		mov	[BYTCNT2], ax
		mov	[SECCNT], dx
_RET45:
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 08/09/2022
READ_LOCK_VIOLATION:
		mov	byte [SECCLUSPOS+2], 0
ERR_ON_CHECK:
		test	word [es:di+2], 8000h
		jnz	short _HARD_ERR
		push	cx
		mov	cl, [es:di+2]
		and	cl, 0F0h
		cmp	cl, 0
		pop	cx
		jnz	short _NO_HARD_ERR
_HARD_ERR:
		call	LOCK_VIOLATION
		jnb	short _RET45
_NO_HARD_ERR:
		xor	cx, cx
		mov	ax, 21h
		stc
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 08/09/2022
WRITE_LOCK_VIOLATION:
		mov	byte [SECCLUSPOS+2], 1
		jmp	short ERR_ON_CHECK

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 14/09/2022
		; 10/09/2022
		; 08/09/2022
DISKREAD:
		mov	ax, [es:di+11h]
		mov	bx, [es:di+13h]
		sub	ax, word [BYTPOS]
		sbb	bx, word [BYTPOS+2]
		jb	short RDERR
		jnz	short ENUF
		or	ax, ax
		jz	short RDERR
		cmp	ax, cx
		jnb	short ENUF
		mov	cx, ax
ENUF:
		test	byte [es:di+4], 8
		jnz	short SET_ACC_ERR
		call	LOCK_CHECK
		jnb	short READ_OK
		call	READ_LOCK_VIOLATION
		jnb	short ENUF
		retn
READ_OK:
		les	bp, [THISDPB]
		call	BREAKDOWN
		mov	cx, [CLUSNUM]
		call	FNDCLUS
		or	cx, cx
		jz	short SKIPERR
RDERR:
		jmp	WRTERR
RDLASTJ:
		jmp	RDLAST
SETSFTJ2:
		jmp	SETSFT
CANOT_READ:
		pop	cx
		pop	cx
		pop	bx
SET_ACC_ERR_DS:
		push	ss
		pop	ds
SET_ACC_ERR:
		xor	cx, cx
		mov	ax, 5
		stc
		retn
SKIPERR:
		mov	[LASTPOS], dx
		mov	[CLUSNUM], bx
		;cmp	byte [BYTCNT1], 0 ; 14/09/2022
		; 10/09/2022 - Magic Code ! (for Windows 3.1)
		db	83h, 3Eh, 64h, 5, 0
		jz	short RDMID
		call	BUFRD
		jb	short SET_ACC_ERR_DS
RDMID:
		cmp	word [SECCNT], 0
		jz	short RDLASTJ
		call	NEXTSEC
		jb	short SETSFTJ2
		mov	byte [SECCLUSPOS+1], 1
		mov	dl, byte [SECCLUSPOS]
		mov	cx, [SECCNT]
		mov	bx, [CLUSNUM]
RDLP:
		call	OPTIMIZE
		jb	short SET_ACC_ERR_DS
		push	di
		push	ax
		push	bx
		mov	byte [ALLOWED], 38h
		mov	ds, [DMAADD+2]
		push	dx
		push	cx
		call	DREAD
		pop	bx
		pop	dx
		jb	short CANOT_READ
		add	bx, dx
		mov	al, [es:bp+0]
		call	SETVISIT
bufq:
		or	byte [di+5], 20h
		cmp	al, [di+4]
		jnz	short bufq3
		cmp	[di+6],	dx
		jb	short bufq3
		cmp	[di+6],	bx
		jnb	short bufq3
		test	byte [di+5], 40h
		jz	short bufq2
		pop	ax
		push	ax
		push	di
		push	dx
		sub	dx, [di+6]
		neg	dx
		mov	si, di
		mov	di, ax
		mov	ax, dx
		mov	cx, [es:bp+2]
		mul	cx
		add	di, ax
		lea	si, [si+16]
		shr	cx, 1
		push	es
		mov	es, [ss:DMAADD+2]
		rep movsw
		jnb	short bufq1
		movsb
bufq1:
		pop	es
		pop	dx
		pop	di
		mov	al, [es:bp+0]
bufq2:
		call	SCANPLACE
bufq3:
		call	SKIPVISIT
		jnz	short bufq
		push	ss
		pop	ds
		pop	cx
		pop	cx
		pop	bx
bufq4:
		jcxz	RDLAST
		call	IsEOF
		jnb	short SETSFT
		mov	dl, 0
		inc	word [LASTPOS]
		jmp	RDLP
RDLAST:
		mov	ax, [BYTCNT2]
		or	ax, ax
		jz	short SETSFT
		mov	[BYTCNT1], ax
		call	NEXTSEC
		jb	short SETSFT
		mov	word [BYTSECPOS], 0
		call	BUFRD
		jnb	short SETSFT
		jmp	SET_ACC_ERR_DS
SETSFT:
		les	di, [THISSFT]
SETCLUS:
		mov	cx, [NEXTADD]
		sub	cx, [DMAADD]
		test	word [es:di+5], 80h
		jnz	short ADDREC
		mov	ax, [CLUSNUM]
		mov	[es:di+1Bh], ax
		mov	ax, [LASTPOS]
		mov	[es:di+19h], ax
ADDREC:
		jcxz	RET28
		add	[es:di+15h], cx
		adc	word [es:di+17h], 0
RET28:
		clc
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 08/09/2022
DISKWRITE:
		test	byte [es:di+4], 8
		jz	short write_cont
		jmp	ACC_ERRWJ
write_cont:
		push	cx
		or	cx, cx
		jnz	short Not_Truncate
		mov	cx, -1
Not_Truncate:
		call	LOCK_CHECK
		pop	cx
		jnb	short WRITE_OK
		call	WRITE_LOCK_VIOLATION
		jnb	short DISKWRITE
		retn
WRTEOFJ:
		jmp	WRTEOF
WRITE_OK:
		and	word [es:di+5], 0BFBFh
		les	bp, [THISDPB]
		call	BREAKDOWN
		mov	ax, word [BYTPOS]
		mov	dx, word [BYTPOS+2]
		jcxz	WRTEOFJ
		add	ax, cx
		adc	dx, 0
		mov	bx, [es:bp+2]
		cmp	dx, bx
		jnb	short WRTERR
		div	bx
		mov	bx, ax
		or	dx, dx
		jnz	short CALCLUS
		dec	ax
CALCLUS:
		mov	cl, [es:bp+5]
		shr	ax, cl
		push	ax
		push	dx
		push	es
		les	di, [THISSFT]
		mov	ax, [es:di+11h]
		mov	dx, [es:di+13h]
		pop	es
		div	word [es:bp+2]
		mov	cx, ax
		or	dx, dx
		jz	short NORND
		inc	ax
NORND:
		mov	[VALSEC], ax
		xor	ax, ax
		mov	word [GROWCNT], ax
		mov	word [GROWCNT+2], ax
		pop	ax
		sub	bx, cx
		jb	short NOGROW
		jz	short TESTTAIL
yesgrow:
		mov	cx, dx
		xchg	ax, bx
		mul	word [es:bp+2]
		sub	ax, cx
		sbb	dx, 0
		add	ax, bx
		adc	dx, 0
		jmp	short SETGRW

; ---------------------------------------------------------------------------

		; 08/09/2022
HAVSTART:
		mov	cx, ax
		call	SKPCLP
		jcxz	DOWRTJ
		call	ALLOCATE
		jnb	short DOWRTJ
WRTERR:
		xor	cx, cx
		les	di, [THISSFT]
		clc
		retn
DOWRTJ:
		jmp	short DOWRT

		nop
ACC_ERRWJ:
		jmp	SET_ACC_ERRW
TESTTAIL:
		sub	ax, dx
		jbe	short NOGROW
		xor	dx, dx
SETGRW:
		mov	word [GROWCNT], ax
		mov	word [GROWCNT+2], dx
NOGROW:
		pop	ax
		mov	cx, [CLUSNUM]
		call	FNDCLUS
		jb	short ACC_ERRWJ
		mov	[CLUSNUM], bx
		mov	[LASTPOS], dx
		sub	ax, dx
		jz	short DOWRT
		jcxz	HAVSTART
		push	cx
		mov	cx, ax
		call	ALLOCATE
		pop	ax
		jb	short WRTERR
		mov	cx, ax
		mov	dx, [LASTPOS]
		inc	dx
		dec	cx
		jz	short NOSKIP
		call	SKPCLP
		jb	short ACC_ERRWJ
NOSKIP:
		mov	[CLUSNUM], bx
		mov	[LASTPOS], dx
DOWRT:
		cmp	word [BYTCNT1], 0
		jz	short WRTMID
		mov	bx, [CLUSNUM]
		call	BUFWRT
		jb	short ACC_ERRWJ
WRTMID:
		mov	ax, [SECCNT]
		or	ax, ax
		jz	short WRTLAST
		add	[SECPOS], ax
		call	NEXTSEC
		jb	short ACC_ERRWJ
		mov	byte [SECCLUSPOS+1], 1
		mov	dl, byte [SECCLUSPOS]
		mov	bx, [CLUSNUM]
		mov	cx, [SECCNT]
WRTLP:
		call	OPTIMIZE
		jb	short ACC_ERRWJ
		push	di
		push	ax
		push	dx
		push	bx
		mov	al, [es:bp+0]
		mov	bx, cx
		add	bx, dx
		call	SETVISIT
wbufq1:
		or	byte [di+5], 20h
		cmp	al, [di+4]
		jnz	short wbufq2
		cmp	[di+6],	dx
		jb	short wbufq2
		cmp	[di+6],	bx
		jnb	short wbufq2
		mov	word [di+4], 20FFh
		call	SCANPLACE
wbufq2:
		call	SKIPVISIT
		jnz	short wbufq1
		pop	bx
		pop	dx
		mov	ds, [ss:DMAADD+2]
		mov	byte [ss:ALLOWED], 38h
		call	DWRITE
DWRITE_OKAY:
		pop	cx
		pop	bx
		push	ss
		pop	ds
		jb	short SET_ACC_ERRW
		jcxz	WRTLAST
		mov	dl, 0
		inc	word [LASTPOS]
		jmp	short WRTLP
WRTLAST:
		mov	ax, [BYTCNT2]
		or	ax, ax
		jz	short FINWRT
		mov	[BYTCNT1], ax
		call	NEXTSEC
		jb	short SET_ACC_ERRW
		mov	word [BYTSECPOS], 0
		call	BUFWRT
		jb	short SET_ACC_ERRW
FINWRT:
		les	di, [THISSFT]
		mov	ax, word [GROWCNT]
		mov	cx, word [GROWCNT+2]
		or	ax, ax
		jnz	short UPDATE_size
		jcxz	SAMSIZ
UPDATE_size:
		add	[es:di+11h], ax
		adc	[es:di+13h], cx
		mov	ax, 1
		call	far [ShSU]
SAMSIZ:
		jmp	SETCLUS
SET_ACC_ERRW:
		jmp	SET_ACC_ERR_DS
WRTEOF:
		mov	cx, ax
		or	cx, dx
		jz	short KILLFIL
		sub	ax, 1
		sbb	dx, 0
		div	word [es:bp+2]
		mov	cl, [es:bp+5]
		shr	ax, cl
		mov	cx, ax
		call	FNDCLUS
SET_ACC_ERRWJ2:
		jb	short SET_ACC_ERRW
		jcxz	RELFILE
		call	ALLOCATE
		jb	short WRTERRJ
UPDATE:
		les	di, [THISSFT]
		mov	ax, word [BYTPOS]
		mov	[es:di+11h], ax
		mov	ax, word [BYTPOS+2]
		mov	[es:di+13h], ax
		mov	ax, 2
		call	far [ShSU]
		xor	cx, cx
		jmp	ADDREC

		jmp	WRTERR

WRTERRJ:
		mov	byte [DISK_FULL], 1
		jmp	WRTERR
RELFILE:
		mov	dx, 0FFFFh
		call	RELBLKS
SET_ACC_ERRWJJ:
		jb	short SET_ACC_ERRWJ2
		jmp	short UPDATE
KILLFIL:
		xor	bx, bx
		push	es
		les	di, [THISSFT]
		mov	[es:di+19h], bx
		mov	[es:di+1Bh], bx
		xchg	bx, [es:di+0Bh]
		pop	es
		or	bx, bx
		jz	short UpDateJ
		push	es
		push	bp
		push	ax
		push	cx
		push	dx
		les	bp, [THISDPB]
		mov	dl, [es:bp+0]
		mov	cx, bx
		mov	ah, 2
		call	FastOpen_Update
		pop	dx
		pop	cx
		pop	ax
		pop	bp
		pop	es
		call	RELEASE
		jb	short SET_ACC_ERRWJJ
UpDateJ:
		jmp	short UPDATE

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 09/09/2022
		; 08/09/2022
FINDENTRY:
		call	STARTSRCH
		mov	al, byte [ATTRIB]
		and	al, 9Eh
		cmp	al, 8
		jnz	short NOTVOLSRCH
		call	SETROOTSRCH
NOTVOLSRCH:
		call	GETENTRY
		jnb	short SRCH
		jmp	SETESRET
SRCH:
		push	ds
		mov	ds, word [CURBUF+2]
		mov	ah, [bx]
		or	ah, ah
		jz	short FREE
		cmp	ah, [ss:DELALL]
		jz	short FREE
		test	byte [bx+0Bh], 8
		jz	short CHKFNAM
		inc	byte [ss:cMeta+1]
CHKFNAM:
		mov	si, ss
		mov	es, si
		mov	si, bx
		mov	di, NAME1
		cmp	byte [ss:NAME1], 0E5h
		jnz	short NO_E5
		mov	byte [ss:NAME1], 5
NO_E5:
		call	MetaCompare
		jz	short FOUND
		pop	ds
NextEnt:
		les	bp, [THISDPB]
		call	NEXTENTRY
		jnb	short SRCH
		jmp	short SETESRET
FREE:
		pop	ds
		mov	cx, word [LASTENT]
		cmp	cx, [ENTFREE]
		jnb	short TSTALL
		mov	[ENTFREE], cx
TSTALL:
		cmp	ah, [DELALL]
NEXTENTJ:
		jz	short NextEnt
		mov	[ENTLAST], cx
		stc
		jmp	short SETESRET
FOUND:
		mov	ch, [si]
		pop	ds
		mov	ah, byte [ATTRIB]
		and	ah, 9Eh
		lea	si, [si+15]
		test	ch, 8
		jz	short CHECK_ONE_VOLUME_ID
		test	ah, 8
		jz	short NEXTENTJ
		xor	ah, ah
		jmp	short RETFF
CHECK_ONE_VOLUME_ID:
		cmp	ah, 8
		jz	short NEXTENTJ
		call	MatchAttributes
		jz	short RETFF
		test	byte [CREATING], -1
		jz	short NEXTENTJ
RETFF:
		les	bp, [THISDPB]
		mov	ah, [es:bp+0]
SETESRET:
		push	ss
		pop	es
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 08/09/2022
MetaCompare:
		mov	cx, 11
WILDCRD:
		repe cmpsb
		jz	short MetaRet
		cmp	byte [es:di-1], '?'
		jz	short WILDCRD
MetaRet:
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 08/09/2022
NEXTENTRY:
		mov	ax, word [LASTENT]
		cmp	ax, [ENTLAST]
		jz	short NONE
		inc	ax
		lea	bx, [bx+32]
		cmp	bx, dx
		jb	short HAVIT
		mov	bl, byte [SECCLUSPOS]
		inc	bl
		cmp	bl, byte [THISDRV+1]
		jb	short SAMECLUS
		mov	bx, [NXTCLUSNUM]
		call	IsEOF
		jnb	short NONE
		cmp	bx, 2
		jb	short NONE
		jmp	short GetEnt

		nop
NONE:
		stc
		retn
HAVIT:
		mov	word [LASTENT], ax
		clc
nextentry_retn:
		retn
SAMECLUS:
		mov	byte [SECCLUSPOS], bl
		mov	word [LASTENT], ax
		push	ds
		lds	di, [CURBUF]
		mov	dx, [di+6]
		inc	dx
		pop	ds
		call	FIRSTCLUSTER
		xor	bx, bx
		jmp	short SETENTRY

		nop

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 08/09/2022
GETENTRY:
		mov	ax, word [LASTENT]
GetEnt:
		mov	word [LASTENT], ax
		mov	cl, 5
		rol	ax, cl
		mov	dx, ax
		and	ax, 0FFE0h
		;and	dx, 1Fh
		; 09/09/2022 - Temporary !
		db	81h, 0E2h, 1Fh, 0
		mov	bx, [es:bp+2]
		and	bl, 0E0h
		div	bx
		mov	bx, dx
		push	bx
		call	DIRREAD
		pop	bx
		jb	short nextentry_retn
SETENTRY:
		mov	dx, word [CURBUF]
		add	dx, 16
		add	bx, dx
		add	dx, [es:bp+2]
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 08/09/2022
SETDIRSRCH:
		or	bx, bx
		jz	short SETROOTSRCH
		mov	[DIRSTART], bx
		mov	al, [es:bp+4]
		inc	al
		mov	byte [THISDRV+1], al
		push	si
		test	byte [FastOpenFlg], 2
		jnz	short UNP_OK
		call	UNPACK
		jnb	short UNP_OK
		pop	si
		retn
UNP_OK:
		mov	[CLUSNUM], di
		mov	dx, bx
		xor	bl, bl
		mov	byte [SECCLUSPOS], bl
		call	FIGREC
		pop	si
		mov	[DIRSEC], dx
		clc
		retn
SETROOTSRCH:
		xor	ax, ax
		mov	[DIRSTART], ax
		mov	byte [SECCLUSPOS], al
		dec	ax
		mov	[CLUSNUM], ax
		mov	ax, [es:bp+0Bh]
		mov	dx, [es:bp+10h]
		sub	ax, dx
		mov	byte [THISDRV+1], al
		mov	[DIRSEC], dx
		clc
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 09/09/2022
		; 08/09/2022
GetPath:
		mov	word [CREATING], 0E500h
GetPathNoSet:
		mov	byte [EXTERR_LOCUS], 2
		mov	word [CURBUF], -1
		mov	di, [WFP_START]
		cmp	word [di+1], ':\'
		jz	short CrackIt
		add	di, 3
		mov	si, di
		call	CHKDEV
		jb	short InternalError
Build_devJ:
		mov	al, byte [ExtFCB+1]
		mov	byte [ATTRIB], al
		mov	byte [EXTERR_LOCUS], 1
		push	ss
		pop	es
		mov	si, NAME1
		mov	di, [WFP_START]
		mov	dx, di
		mov	cx, 8
MoveLoop:
		lodsb
		stosb
		cmp	al, ' '
		jz	short nosave
		mov	dx, di
nosave:
		loop	MoveLoop
		mov	di, dx
		mov	byte [di], 0
		call	Build_device_ent
		inc	al
		retn
InternalError:
		jmp	short InternalError
CrackIt:
		mov	si, [CURR_DIR_END]
		cmp	si, -1
		jnz	short LOOK_SING
		lea	si, [di+3]
LOOK_SING:
		mov	byte [ATTRIB], 16h
		les	di, [THISCDS]
		mov	ax, -1
		mov	bx, [es:di+73]
		mov	si, [CURR_DIR_END]
		cmp	si, ax
		jz	short NO_CURR_D
		cmp	bx, ax
		jz	short NO_CURR_D
		test	byte [FastOpenFlg], 1
		jz	short GOT_SEARCH_CLUSTER
		push	es
		push	di
		push	cx
		push	word [si-1]
		push	si
		push	bx
		mov	byte [si-1], 0
		mov	si, [WFP_START]
		mov	bx, FastTable
		mov	di, Dir_Info_Buff
		mov	cx, FastOpen_Ext_Info
		mov	al, 1
		push	ds
		pop	es
		call	far [bx+2] ; 09/09/2022
		jb	short GO_Chk_end1
		cmp	byte [si], 0
		jz	short GO_Chk_end
		stc
		jmp	short GO_Chk_end
GO_Chk_end1:
		clc
GO_Chk_end:
		pop	bx
		pop	si
		pop	word [si-1]
		pop	cx
		pop	di
		pop	es
		jnb	short GOT_SEARCH_CLUSTER
NO_CURR_D:
		mov	si, [WFP_START]
		lea	si, [si+3]
		les	bp, [THISDPB]
		jmp	short ROOTPATH

		nop
GOT_SEARCH_CLUSTER:
		les	bp, [THISDPB]
		call	SETDIRSRCH
		jb	short SETFERR
		jmp	short FINDPATH

		nop
SETFERR:
		xor	cl, cl
		stc
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 09/09/2022
		; 08/09/2022
CHKDEV:
		mov	si, di
		mov	di, ss
		mov	es, di
		mov	di, NAME1
		mov	cx, 9
TESTLOOP:
		call	GETLET
		cmp	al, '.'
		jz	short TESTDEVICE
		call	PATHCHRCMP
		jz	short NOTDEV
		or	al, al
		jz	short TESTDEVICE
		stosb
		loop	TESTLOOP
NOTDEV:
		stc
		retn
TESTDEVICE:
		add	cx, 2
		mov	al, ' '
		rep stosb
		mov	ax, ss
		mov	ds, ax
		call	DEVNAME
		retn

; ---------------------------------------------------------------------------

		; 08/09/2022
ROOTPATH:
		call	SETROOTSRCH
		cmp	byte [si], 0
		jnz	short FINDPATH
		mov	al, byte [ExtFCB+1]
		mov	byte [ATTRIB], al
		xor	ah, ah
		retn
; ---------------------------------------------------------------------------

		; 09/09/2022
		; 08/09/2022
FINDPATH:
		push	es
		push	si
		mov	di, si
		mov	cx, [DIRSTART]
		cmp	word [CURR_DIR_END], -1
		jz	short NOIDS
		cmp	di, [CURR_DIR_END]
		jnz	short NOIDS
		les	di, [THISCDS]
		mov	[es:di+73], cx
NOIDS:
		mov	ax, ss
		mov	es, ax
		mov	di, NAME1
		mov	ax, '  '
		stosb
		stosw
		stosw
		stosw
		stosw
		stosw
		mov	di, NAME1
		xor	ah, ah
GetNam:
		lodsb
		cmp	al, '.'
		jz	short setExt
		or	al, al
		jz	short _GetDone
		cmp	al, '\'
		jz	short _GetDone
		cmp	al, '?'
		jnz	short StoNam
		or	ah, 1
StoNam:
		stosb
		jmp	short GetNam
setExt:
		mov	di, NAME1+8
GetExt:
		lodsb
		or	al, al
		jz	short _GetDone
		cmp	al, '\'
		jz	short _GetDone
		cmp	al, '?'
		jnz	short StoExt
		or	ah, 1
StoExt:
		stosb
		jmp	short GetExt
_GetDone:
		dec	si
		mov	cl, ah
		or	cl, 80h
		pop	di
		pop	es
		cmp	si, di
		jnz	short check_device
		jmp	BADPATH
check_device:
		push	si
		mov	al, [si]
		or	al, al
		jnz	short NOT_LAST
		mov	bh, byte [ExtFCB+1]
		mov	byte [ATTRIB], bh
NOT_LAST:
		push	es
		push	ss
		pop	es
		call	DEVNAME
		pop	es
		jb	short FindFile
		or	al, al
		jz	short GO_BDEV
		jmp	FileInPath
GO_BDEV:
		pop	si
		jmp	Build_devJ

; ---------------------------------------------------------------------------

		; 09/09/2022
		; 08/09/2022
FindFile:
		cmp	byte [NAME1], 0E5h
		jnz	short NOE5
		mov	byte [NAME1], 5
NOE5:
		push	di
		push	es
		push	cx
		call	LookupPath
		jnb	short DIR_FOUND
		call	FINDENTRY
DIR_FOUND:
		pop	cx
		pop	es
		pop	di
		jnb	short LOAD_BUF
		jmp	BADPATHPOP
LOAD_BUF:
		lds	di, [CURBUF]
		test	byte [bx+0Bh], 10h
		jnz	short GO_NEXT
		jmp	FileInPath
GO_NEXT:
		cmp	byte [ss:NoSetDir], 0
		jz	short SetDir
		mov	dx, di
		mov	cx, ds
		push	ss
		pop	ds
		pop	di
		cmp	byte [di], 0
		jnz	short NEXT_ONE
		jmp	SetRet
NEXT_ONE:
		push	di
		mov	di, dx
		mov	ds, cx
SetDir:
		mov	dx, [si]
		push	ds
		push	ss
		pop	ds
		test	byte [FastOpenFlg], 2
		jz	short DO_NORMAL
		mov	bx, dx
		mov	di, [CLUSNUM]
		push	ax
		call	SETDIRSRCH
		pop	ax
		add	sp, 2
		jmp	short FAST_OPEN_SKIP

		nop
DO_NORMAL:
		pop	ds
		sub	bx, di
		sub	si, di
		push	bx
		push	ax
		push	si
		push	cx
		push	word [di+6]
		mov	bx, dx
		push	ss
		pop	ds
		call	SETDIRSRCH
		pop	dx
		jb	short SKIP_GETB
		mov	byte [ALLOWED], 18h
		xor	al, al
		call	GETBUFFR
SKIP_GETB:
		pop	cx
		pop	si
		pop	ax
		pop	bx
		jnb	short SET_THE_BUF
		pop	di
		mov	si, di
		jmp	short BADPATH
SET_THE_BUF:
		call	SET_BUF_AS_DIR
		mov	di, word [CURBUF]
		add	si, di
		add	bx, di
FAST_OPEN_SKIP:
		pop	di
		call	InsertPath
		mov	al, [di]
		or	al, al
		jz	short SetRet
		inc	di
		mov	si, di
		call	PATHCHRCMP
		jnz	short find_bad_name
		jmp	FINDPATH
find_bad_name:
		dec	si
BADPATH:
		xor	cl, cl
		jmp	short BADPRET
; ---------------------------------------------------------------------------

		; 08/09/2022
FileInPath:
		pop	di
		push	ss
		pop	ds
		test	byte [FastOpenFlg], 1
		jz	short NO_FAST
		test	byte [FastOpenFlg], 2
		jz	short NO_FAST
		mov	di, [Next_Element_Start]
NO_FAST:
		mov	al, [di]
		or	al, al
		jz	short INCRET
		mov	si, di
		jmp	short BADPRET
INCRET:
		call	InsertPath
		inc	al
SetRet:
		retn
BADPATHPOP:
		pop	si
		mov	al, [si]
		mov	si, di
		or	al, al
BADPRET:
		mov	al, byte [ExtFCB+1]
		mov	byte [ATTRIB], al
		stc
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 08/09/2022
STARTSRCH:
		les	bp, [THISDPB]
		xor	ax, ax
		mov	word [LASTENT], ax
		mov	byte [cMeta+1], al
		dec	ax
		mov	[ENTFREE], ax
		mov	[ENTLAST], ax
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 08/09/2022
MatchAttributes:
		push	ax
		mov	al, byte [ss:ATTRIB]
		not	al
		and	al, ch
		and	al, 16h
		pop	ax
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 09/09/2022
		; 08/09/2022
DEVNAME:
		push	si
		push	di
		push	cx
		push	ax
		push	word [NAME1]
		cmp	byte [NAME1], 5
		jnz	short NOKTR
		mov	byte [NAME1], 0E5h
NOKTR:
		test	byte [ATTRIB], 8
		jnz	short RET31
		mov	si, NULDEV
LOOKIO:
		test	word [si+4], 8000h
		jz	short SKIPDEV
		mov	ax, si
		add	si, 10
		mov	di, NAME1
		mov	cx, 4
		repe cmpsw
		mov	si, ax
		jz	short IOCHK
SKIPDEV:
		lds	si, [si]
		cmp	si, -1
		jnz	short LOOKIO
RET31:
		stc
RETNV:
		mov	cx, ss
		mov	ds, cx
		pop	word [NAME1]
		pop	ax
		pop	cx
		pop	di
		pop	si
		retn
IOCHK:
		mov	word [ss:DEVPT+2], ds
		mov	bh, [si+4]
		or	bh, 0C0h
		and	bh, 0DFh
		mov	word [ss:DEVPT], si
		jmp	short RETNV

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 09/09/2022
		; 08/09/2022
Build_device_ent:
		mov	ax, 2020h
		mov	di, DEVFCB+8 ; 09/09/2022
		stosw
		stosb
		mov	al, 40h
		stosb
		xor	ax, ax
		mov	cx, 10
		rep stosw
		call	DATE16
		mov	di, DEVFCB_dir_time
		xchg	ax, dx
		stosw
		xchg	ax, dx
		stosw
		mov	si, di
		mov	ax, word [DEVPT]
		stosw
		mov	ax, word [DEVPT+2]
		stosw
		mov	ah, bh
		mov	bx, NAME1
		xor	al, al
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 08/09/2022
ValidateCDS:
		push	bp
		mov	bp, sp
		sub	sp, 6
		mov	[bp-2],	di
		lds	si, [ss:THISCDS]
		mov	[bp-6],	si
		mov	word [bp-4], ds
		call	EcritDisk
		test	word [si+67], 8000h
		jz	short DoSplice
		jmp	FatFail
DoSplice:
		xor	dl, dl
		xchg	dl, [ss:NoSetDir]
		push	ss
		pop	es
		call	FStrCpy
		mov	si, [bp-2]
		push	ss
		pop	ds
		call	Splice
		push	ss
		pop	ds
		mov	[NoSetDir], dl
		les	di, [THISCDS]
		push	bp
		call	FatRead_CDS
		pop	bp
		jb	short FatFail
		lds	si, [THISCDS]
		cmp	word [si+73], -1
		jnz	short RestoreCDS
		push	ss
		pop	es
		push	word [ss:WFP_START]
		cmp	si, [bp-6]
		jnz	short DoChdir
		mov	di, [bp-2]
		mov	[ss:WFP_START], di
		call	FStrCpy
DoChdir:
		push	ss
		pop	ds
		push	word [ExtFCB+1]
		push	bp
		call	DOS_CHDIR
		pop	bp
		pop	bx
		pop	word [WFP_START]
		mov	byte [ExtFCB+1], bl
		lds	si, [bp-6]
		jnb	short SetCluster
		mov	word [ss:THISCDS], si
		mov	word [ss:THISCDS+2], ds
		xor	cx, cx
		mov	[si+3],	cl
SetCluster:
		mov	word [si+73], 0FFFFh
		lds	si, [ss:THISCDS]
		mov	[si+73], cx
RestoreCDS:
		les	di, [bp-6]
		mov	word [ss:THISCDS], di
		mov	word [ss:THISCDS+2], es
		clc
FatFail:
		call	LcritDisk
		les	di, [bp-6]
		mov	sp, bp
		pop	bp
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 08/09/2022
CheckThisDevice:
		push	di
		push	si
		mov	di, si
		mov	al, [si]
		call	PATHCHRCMP
		jnz	short ParseDev
		inc	si
		lodsw
		or	ax, 2020h
		cmp	ax, 'de'
		jnz	short NotDevice
		lodsb
		or	al, 20h
		cmp	al, 'v'
		jnz	short NotDevice
		lodsb
		call	PATHCHRCMP
		jnz	short NotDevice
ParseDev:
		push	ds
		push	si
		call	NameTrans
		cmp	byte [si], 0
		stc
		jnz	short SkipSearch
		push	ss
		pop	ds
		call	DEVNAME
SkipSearch:
		pop	si
		pop	ds
CheckReturn:
		pop	di
		jnb	short _CheckDone
		mov	si, di
_CheckDone:
		pop	di
		cmc
		retn
NotDevice:
		stc
		jmp	short CheckReturn

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 08/09/2022
LookupPath:
		test	byte [ss:FastOpenFlg], 1
		jz	short NOLOOKUP
		test	byte [ss:FastOpenFlg], 8
		jnz	short NOLOOKUP
		mov	bx, FastTable
		mov	si, [ss:WFP_START]
		mov	di, Dir_Info_Buff
		mov	cx, FastOpen_Ext_Info
		mov	al, 1
		push	ds
		pop	es
		call	far [bx+2] ; 09/09/2022
		jb	short NOTFOUND
		lea	bx, [si-2]
		cmp	bx, [ss:WFP_START]
		jz	short NOTFOUND
		mov	[ss:Next_Element_Start], si
		mov	bx, cx
		mov	ax, [bx+3]
		mov	[ss:CLUSNUM], ax
		push	es
		les	bx, [ss:THISDPB]
		mov	ah, [es:bx]
		pop	es
		mov	word [ss:CURBUF+2], es
		mov	bx, di
		lea	si, [di+1Ah]
		or	byte [ss:FastOpenFlg], 2
		retn
NOTFOUND:
		cmp	ax, -1
		jnz	short Partial_Success
		mov	byte [ss:FastOpenFlg], 0
Partial_Success:
		and	byte [ss:FastOpenFlg], 0FBh
NOLOOKUP:
		stc
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 08/09/2022
InsertPath:
		pushf
		test	byte [ss:FastOpenFlg], 1
		jz	short GET_NEXT_ELEMENT
		test	byte [ss:FastOpenFlg], 2
		jz	short INSERT_DIR_INFO
		and	byte [ss:FastOpenFlg], 0FDh
		mov	di, [ss:Next_Element_Start]
		jmp	short GET_NEXT2

		nop
INSERT_DIR_INFO:
		push	ds
		push	es
		push	bx
		push	si
		push	di
		push	cx
		push	ax
		lds	di, [ss:CURBUF]
		mov	si, FastOpen_Ext_Info
		mov	ax, [di+6]
		push	ss
		pop	ds
		mov	[si+1],	ax
		mov	ax, [CLUSNUM]
		mov	[si+3],	ax
		mov	ax, bx
		add	di, 16
		sub	ax, di
		mov	cl, 32
		div	cl
		mov	[si], al
		push	ds
		pop	es
		mov	ds, word [CURBUF+2]
		mov	di, bx
		cmp	word [di+1Ah], 0
		jz	short SKIP_INSERT
		push	si
		pop	bx
		mov	al, 2
		mov	si, FastTable
		call	far [es:si+2] ; 09/09/2022
		clc
SKIP_INSERT:
		pop	ax
		pop	cx
		pop	di
		pop	si
		pop	bx
		pop	es
		pop	ds
GET_NEXT2:
		or	byte [ss:FastOpenFlg], 8
GET_NEXT_ELEMENT:
		popf
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 08/09/2022
IOFUNC:
		mov	word [ss:IOXAD+2], ss
		mov	word [ss:IOXAD], DEVIOBUF
		mov	word [ss:IOSCNT], 1
		mov	[ss:DEVIOBUF], ax
		test	word [si+5], 8000h
		jnz	short IOTOFILEJ
		test	word [si+5], 80h
		jz	short IOTOFILEJ
		call	save_world
		mov	dx, ds
		mov	bx, ss
		mov	ds, bx
		mov	es, bx
		xor	bx, bx
		cmp	ah, 5
		jnz	short _no_sys_wait
		or	bx, 400h
_no_sys_wait:
		mov	word [IOCALL_REQSTAT], bx
		xor	bx, bx
		mov	[IOMED], bl
		mov	bl, ah
		mov	ah, [bx+LenTab]
		shl	bx, 1
		mov	cx, word [bx+CmdTab]
		mov	bx, IOCALL
		mov	[IOCALL], ah
		mov	[IOCALL_REQFUNC], ch
		mov	ds, dx
		call	DEVIOCALL
		mov	di, word [ss:IOCALL_REQSTAT]
		test	di, 8000h
		jnz	short DevErr
OkDevIO:
		mov	ax, ss
		mov	ds, ax
		cmp	ch, 5
		jnz	short DNODRD
		mov	al, [IOMED]
		mov	byte [DEVIOBUF], al
DNODRD:
		mov	ah, [IOCALL_REQSTAT+1]
		not	ah
		and	ah, 2
		call	restore_world
		mov	ax, [ss:DEVIOBUF]
		retn
IOTOFILEJ:
		jmp	short IOTOFILE
DevErr:
		mov	ah, cl
		call	CHARHARD
		cmp	al, 1
		jnz	short NO_RETRY
		call	restore_world
		jmp	IOFUNC
NO_RETRY:
		and	byte [ss:IOCALL_REQSTAT+1], 0FDh
		jmp	short OkDevIO
IOTOFILE:
		or	ah, ah
		jz	short IOIN
		dec	ah
		jz	short IOIST
		dec	ah
		jz	short IOUT
		retn
IOIST:
		push	word [si+15h]
		push	word [si+17h]
		call	IOIN
		pop	word [si+17h]
		pop	word [si+15h]
		retn
IOUT:
		call	SETXADDR
		call	DOS_WRITE
		call	RESTXADDR
IOUT_retn:
		retn
IOIN:
		call	SETXADDR
		call	DOS_READ
		or	cx, cx
		call	RESTXADDR
		mov	al, byte [ss:DEVIOBUF]
		jnz	short IOUT_retn
		mov	al, 1Ah
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 08/09/2022
SETXADDR:
		pop	word [ss:CALLSCNT]
		call	save_world
		push	word [ss:DMAADD]
		push	word [ss:DMAADD+2]
		mov	word [ss:THISSFT+2], ds
		push	ss
		pop	ds
		mov	word [THISSFT], si
		mov	cx, word [IOXAD+2]
		mov	[DMAADD+2], cx
		mov	cx, word [IOXAD]
		mov	[DMAADD], cx
		mov	cx, word [IOSCNT]

		jmp	short RESTRET


; --------------- S U B	R O U T	I N E ---------------------------------------

		; 08/09/2022
RESTXADDR:
		pop	word [CALLSCNT]
		pop	word [DMAADD+2]
		pop	word [DMAADD]
		call	restore_world
RESTRET:
		jmp	word [ss:CALLSCNT]

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 08/09/2022
DEV_OPEN_SFT:
		call	save_world
		mov	al, 0Dh
		jmp	short DO_OPCLS

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 08/09/2022
DEV_CLOSE_SFT:
		call	save_world
		mov	al, 0Eh
DO_OPCLS:
		call	IsSFTNet
		jnz	short OPCLS_DONE
		xor	ah, ah
		test	word [es:di+5], 80h
		les	di, [es:di+7]
		jnz	short Got_Dev_Addr
		call	CheckShare
		jz	short OPCLS_DONE
		mov	ah, [es:di+1]
		mov	cl, [es:di]
		les	di, [es:di+12h]
Got_Dev_Addr:
		test	word [es:di+4], 800h
		jz	short OPCLS_DONE
		push	es
		pop	ds
		mov	si, di
OPCLS_RETRY:
		push	ss
		pop	es
		mov	di, DEVCALL
		mov	bx, di
		push	ax
		mov	al, 13
		stosb
		pop	ax
		xchg	ah, al
		stosb
		xchg	ah, al
		stosb
		mov	word [es:di], 0
		push	ax
		call	DEVIOCALL2
		mov	di, [es:bx+3]
		test	di, 8000h
		jz	short OPCLS_DONEP
		test	word [si+4], 8000h
		jz	short BLKDEV
		mov	ah, 86h
		jmp	short HRDERR
BLKDEV:
		mov	al, cl
		mov	ah, 6
HRDERR:
		call	CHARHARD
		cmp	al, 1
		jnz	short OPCLS_DONEP
		pop	ax
		jmp	short OPCLS_RETRY
OPCLS_DONEP:
		pop	ax
OPCLS_DONE:
		call	restore_world
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 08/09/2022
DEVIOCALL:
		lds	si, [si+7]

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 08/09/2022
DEVIOCALL2:
		call	EcritDevice
		mov	ax, [si+6]
		mov	[ss:CALLDEVAD], ax
		mov	[ss:CALLDEVAD+2], ds
		call	far [ss:CALLDEVAD] ; 09/09/2022
		mov	ax, [si+8]
		mov	[ss:CALLDEVAD], ax
		call	far [ss:CALLDEVAD] ; 09/09/2022
		call	LcritDevice
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 08/09/2022
SETREAD:
		push	di
		push	cx
		push	ax
		mov	cl, 4
SETCALLHEAD:
		mov	al, 16h
		push	ss
		pop	es
		mov	di, DEVCALL
		stosb
		pop	ax
		stosb
		push	ax
		mov	al, cl
		stosb
		xor	ax, ax
		stosw
		add	di, 8
		pop	ax
		xchg	ah, al
		stosb
		xchg	al, ah
		push	ax
		mov	ax, bx
		stosw
		mov	ax, ds
		stosw
		pop	cx
		pop	ax
		stosw
		xchg	ax, dx
		stosw
		xchg	ax, cx
		xchg	dx, cx
		pop	di
		mov	bx, DEVCALL
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 08/09/2022
SETWRITE:
		push	di
		push	cx
		push	ax
		mov	cl, 8
		add	cl, [ss:VERFLG]
		jmp	short SETCALLHEAD

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 08/09/2022
BUILDDIR:
		mov	ax, [ENTFREE]
		cmp	ax, -1
		jz	short CHECK_IF_ROOT
		clc
		retn
CHECK_IF_ROOT:
		cmp	word [DIRSTART], 0
		jnz	short NEWDIR
		stc
builddir_retn:
		retn
NEWDIR:
		mov	bx, [DIRSTART]
		or	bx, bx
		jz	short NULLDIR
		call	GETEOF
		jb	short builddir_retn
NULLDIR:
		mov	cx, 1
		call	ALLOCATE
		jb	short builddir_retn
		mov	dx, [DIRSTART]
		or	dx, dx
		jnz	short ADDINGDIR
		call	SETDIRSRCH
		jb	short builddir_retn
		mov	word [LASTENT], -1
		jmp	short GOTDIRREC
ADDINGDIR:
		push	bx
		mov	bx, [CLUSNUM]
		call	IsEOF
		pop	bx
		jb	short NOTFIRSTGROW
		mov	[CLUSNUM], bx
		push	cx
		push	ax
		push	bp
		mov	ah, 1
		mov	dl, [es:bp+0]
		mov	cx, [DIRSTART]
		mov	bp, bx
		call	FastOpen_Update
		pop	bp
		pop	ax
		pop	cx
NOTFIRSTGROW:
		mov	dx, bx
		xor	bl, bl
		call	FIGREC
GOTDIRREC:
		mov	cl, [es:bp+4]
		inc	cl
		xor	ch, ch
ZERODIR:
		push	cx
		mov	byte [ALLOWED], 18h
		mov	al, 0FFh
		call	GETBUFFR
		jnb	short GET_SSIZE
		pop	cx
		retn
GET_SSIZE:
		mov	cx, [es:bp+2]
		push	es
		les	di, [CURBUF]
		or	byte [es:di+5], 4
		push	di
		add	di, 16
		xor	ax, ax
		shr	cx, 1
		rep stosw
		jnb	short EVENZ
		stosb
EVENZ:
		pop	di
		or	byte [es:di+5], 40h
		pop	es
		pop	cx
		inc	dx
		loop	ZERODIR
		mov	ax, word [LASTENT]
		inc	ax
		clc
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 08/09/2022
SETDOTENT:
		stosw
		mov	cx, 4
		mov	ax, '  '
		rep stosw
		stosb
		mov	al, 10h
		stosb
		add	di, 10
		mov	si, word [THISSFT]
		mov	ax, [si+0Dh]
		stosw
		mov	ax, [si+0Fh]
		stosw
		mov	ax, dx
		stosw
		xor	ax, ax
		stosw
		stosw
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 08/09/2022
MakeNode:
		mov	word [CREATING], 0E5FFh
		push	ax
		mov	byte [NoSetDir], 0
		mov	byte [ExtFCB+1], al
		call	GetPathNoSet
		mov	dl, cl
		mov	cx, ax
		pop	ax
		jnb	short make_exists
		jnz	short make_err_4
		cmp	dl, 80h
		jz	short make_type
make_err_4:
		mov	al, 4
make_err_ret:
		xor	ah, ah
		stc
make_retn:
		retn
make_type:
		les	di, [THISSFT]
		xor	ax, ax
		stc
		jmp	short make_new

		nop
make_exists:
		jz	short make_exists_dir
		mov	al, 3
		test	byte [ATTRIB], 18h
		jnz	short make_err_ret_5
		or	ch, ch
		js	short make_share
		or	ah, ah
		jnz	short make_err_ret
		push	cx
		mov	es, word [CURBUF+2]
		mov	ch, [es:bx+0Bh]
		test	ch, 1
		jnz	short make_err_ret_5P
		call	MatchAttributes
		pop	cx
		jnz	short make_err_ret_5
		xor	al, al
make_share:
		xor	ah, ah
		push	ax
		push	cx
		mov	ah, ch
		call	DOOPEN
		les	di, [THISSFT]
		push	si
		push	bx
		call	ShareEnter
		jnb	short MakeEndShare
		pop	bx
		pop	si
		pop	cx
		pop	ax
Make_Share_ret:
		mov	al, 6
		jmp	short make_err_ret
make_err_ret_5P:
		pop	cx
make_err_ret_5:
		mov	al, 5
		jmp	short make_err_ret
make_exists_dir:
		mov	al, 1
		jmp	short make_err_ret

; ---------------------------------------------------------------------------

		; 08/09/2022
make_save:
		push	ax
		mov	ax, cx
		call	NewEntry
		pop	ax
		jnb	short make_retn
		mov	al, 2
make_save_retn:
		retn

; ---------------------------------------------------------------------------

		; 08/09/2022
make_new:
		call	make_save
		jb	short make_save_retn
		test	byte [ATTRIB], 10h
		jnz	short make_save_retn
		push	ax
		push	bx
		push	si
		call	ShareEnter
		pop	si
		pop	bx
		pop	ax
		jnb	short make_save_retn
		push	ax
		les	di, [CURBUF]
		mov	byte [es:bx], 0E5h
		or	byte [es:di+5], 40h
		les	bp, [THISDPB]
		mov	al, [es:bp+0]
		call	FLUSHBUF
		pop	ax
		jmp	short Make_Share_ret

; ---------------------------------------------------------------------------

		; 08/09/2022
MakeEndShare:
		les	di, [THISSFT]
		xor	ax, ax
		call	EcritDisk
		xchg	ax, [es:di]
		push	ax
		push	di
		push	es
		pushf
		call	ShareEnd
		popf
		pop	es
		pop	di
		pop	word [es:di]
		call	LcritDisk
		pop	bx
		pop	si
		pop	cx
		pop	ax
		call	make_save
		jb	short make_save_retn
		push	ax
		push	bx
		push	si
		pushf
		call	ShareEnter
		popf
		pop	si
		pop	bx
		pop	ax
makeendshare_retn:
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 09/09/2022
		; 08/09/2022
NewEntry:
		les	bp, [THISDPB]
		jnb	short EXISTENT
		cmp	byte [FAILERR], 0
		stc
		jnz	short makeendshare_retn
		call	BUILDDIR
		jb	short makeendshare_retn
		call	GetEnt
		jb	short makeendshare_retn
		jmp	short FREESPOT
ERRRET3:
		stc
newentry_retn:
		retn
EXISTENT:
		or	ah, ah
		jns	short NOT_DEV1
		jmp	DOOPEN
NOT_DEV1:
		call	FREEENT
newentry_errj:
		jb	short newentry_retn
FREESPOT:
		test	byte [ATTRIB], 8
		jz	short NOTVOLID
		cmp	byte [cMeta+1], 0
		jnz	short ERRRET3
NOTVOLID:
		mov	es, word [CURBUF+2]
		mov	di, bx
		mov	si, NAME1
		mov	cx, 5
		rep movsw
		movsb
		mov	al, byte [ATTRIB]
		stosb
		mov	cl, 5
		xor	ax, ax
		rep stosw
		call	DATE16
		xchg	ax, dx
		stosw
		xchg	ax, dx
		stosw
		xor	ax, ax
		push	di
		stosw
		stosw
		stosw
		mov	si, word [CURBUF]
		or	byte [es:si+5], 40h
		les	bp, [THISDPB]
		mov	al, [es:bp+0]
		push	ax
		push	bx
		push	es
		push	di
		les	di, [THISSFT]
		test	word [es:di+5], 80h
		jnz	short GotADevice
		push	ds
		push	bx
		lds	bx, [THISDPB]
		mov	[es:di+7], bx
		mov	bx, ds
		mov	[es:di+9], bx
		pop	bx
		pop	ds
		call	DEV_OPEN_SFT
		mov	byte [VIRTUAL_OPEN], 1
GotADevice:
		pop	di
		pop	es
		call	FLUSHBUF
		call	CHECK_VIRT_OPEN
		pop	bx
		pop	ax
		pop	si
		mov	ah, al
		jb	short newentry_errj

; ---------------------------------------------------------------------------

		; 08/09/2022
DOOPEN:
		mov	dh, ah
		les	di, [THISSFT]
		add	di, 4
		xor	al, al
		or	dh, dh
		js	short DEV_SFT1
		mov	ds, word [CURBUF+2]
		mov	al, [bx+0Bh]
DEV_SFT1:
		stosb
		xor	ax, ax
		mov	al, dh
		or	al, 40h
		stosw
		push	ds
		lds	ax, [bx+1Ah]
		or	dh, dh
		js	short DEV_SFT2
		lds	ax, [ss:THISDPB]
DEV_SFT2:
		stosw
		mov	ax, ds
		pop	ds
		stosw
		push	si
		movsw
		sub	si, 6
		movsw
		movsw
		lodsw
		lodsw
		mov	cx, ax
		lodsw
		or	dh, dh
		jns	short FILE_SFT1
		xor	ax, ax
		mov	cx, ax
FILE_SFT1:
		xchg	ax, cx
		stosw
		xchg	ax, cx
		stosw
		xor	ax, ax
		stosw
		stosw
		or	dh, dh
		js	short DEV_SFT3
		stosw
		mov	ax, [bx+1Ah]
		stosw
		push	ds
		push	ss
		pop	ds
		test	byte [FastOpenFlg], 4
		jz	short Not_FastOpen
		mov	si, FastOpen_Ext_Info
		mov	ax, [si+1]
		stosw
		mov	al, [si]
		stosb
		pop	ds
		jmp	short Next_Name

		nop
Not_FastOpen:
		pop	ds
		mov	si, word [ss:CURBUF]
		mov	ax, [si+6]
		stosw
		mov	ax, bx
		add	si, 16
		sub	ax, si
		mov	cl, 32
		div	cl
		stosb
Next_Name:
		jmp	short FILE_SFT2
DEV_SFT3:
		add	di, 7
FILE_SFT2:
		mov	si, bx
		mov	cx, 11
		rep movsb
		pop	si
		push	ss
		pop	ds
		clc
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 08/09/2022
FREEENT:
		push	ds
		lds	di, [CURBUF]
		mov	cx, [si]
		mov	dx, [di+6]
		pop	ds
		cmp	cx, 2
		jb	short RET1
		cmp	cx, [es:bp+0Dh]
		ja	short RET1
		sub	bx, di
		push	bx
		push	dx
		mov	bx, cx
		call	RELEASE
		pop	dx
		jnb	short GET_BUF_BACK
		pop	bx
freeent_retn:
		retn

; ---------------------------------------------------------------------------

		; 08/09/2022
GET_BUF_BACK:
		mov	byte [ALLOWED], 18h
		xor	al, al
		call	GETBUFFR
		pop	bx
		jb	short freeent_retn
		call	SET_BUF_AS_DIR
		add	bx, word [CURBUF]
		mov	si, bx
		add	si, 1Ah
RET1:
		clc
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 08/09/2022
CHECK_VIRT_OPEN:
		push	ax
		lahf
		cmp	byte [VIRTUAL_OPEN], 0
		jz	short ALL_CLOSED
		mov	byte [VIRTUAL_OPEN], 0
		push	es
		push	di
		les	di, [THISSFT]
		call	DEV_CLOSE_SFT
		pop	di
		pop	es
ALL_CLOSED:
		sahf
		pop	ax
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 08/09/2022
FNDCLUS:
		push	es
		les	di, [THISSFT]
		mov	bx, [es:di+1Bh]
		mov	dx, [es:di+19h]
		or	bx, bx
		jz	short NOCLUS
		sub	cx, dx
		jnb	short FINDIT
		add	cx, dx
		xor	dx, dx
		mov	bx, [es:di+0Bh]
FINDIT:
		pop	es
		jcxz	RET9
SKPCLP:
		call	UNPACK
		jnb	short skpclp1
		retn
skpclp1:
		push	bx
		mov	bx, di
		call	IsEOF
		pop	bx
		jnb	short RET9
		xchg	bx, di
		inc	dx
		loop	SKPCLP
RET9:
		clc
		retn
NOCLUS:
		pop	es
		inc	cx
		dec	dx
		clc
fndclus_retn:
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 08/09/2022
BUFSEC:
		mov	dx, [CLUSNUM]
		mov	bl, byte [SECCLUSPOS]
		mov	byte [ALLOWED], 38h
		call	FIGREC
		call	GETBUFFR
		jb	short fndclus_retn
		mov	byte [SECCLUSPOS+1], 1
		mov	si, [NEXTADD]
		mov	di, si
		mov	cx, [BYTCNT1]
		add	di, cx
		mov	[NEXTADD], di
		les	di, [CURBUF]
		or	byte [es:di+5], 8
		lea	di, [di+16]
		add	di, [BYTSECPOS]
		clc
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 08/09/2022
BUFRD:
		push	es
		mov	ax, 0
		call	BUFSEC
		jnb	short BUF_OK
BUF_IO_FAIL:
		pop	es
		jmp	short RBUFPLACED
BUF_OK:
		mov	bx, es
		mov	es, [DMAADD+2]
		mov	ds, bx
		xchg	di, si
		shr	cx, 1
		jnb	short EVENRD
		movsb
EVENRD:
		rep movsw
		pop	es
		lds	di, [ss:CURBUF]
		lea	bx, [di+16]
		sub	si, bx
		call	PLACEBUF
		cmp	si, [es:bp+2]
		jb	short RBUFPLACEDC
		call	PLACEHEAD
RBUFPLACEDC:
		clc
RBUFPLACED:
		push	ss
		pop	ds
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 08/09/2022
BUFWRT:
		mov	ax, [SECPOS]
		inc	ax
		mov	[SECPOS], ax
		cmp	ax, [VALSEC]
		mov	al, 1
		ja	short NOREAD
		xor	al, al
NOREAD:
		push	es
		call	BUFSEC
		jb	short BUF_IO_FAIL
		mov	ds, [DMAADD+2]
		shr	cx, 1
		jnb	short EVENWRT
		movsb
EVENWRT:
		rep movsw
		pop	es
		lds	bx, [ss:CURBUF]
		or	byte [bx+5], 40h
		lea	si, [bx+16]
		sub	di, si
		mov	si, di
		mov	di, bx
		call	PLACEBUF
		cmp	si, [es:bp+2]
		jb	short WBUFPLACED
		call	PLACEHEAD
WBUFPLACED:
		clc
		push	ss
		pop	ds
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 08/09/2022
NEXTSEC:
		test	byte [SECCLUSPOS+1], -1
		jz	short CLRET
		mov	al, byte [SECCLUSPOS]
		inc	al
		cmp	al, [es:bp+4]
		jbe	short SAVPOS
		mov	bx, [CLUSNUM]
		call	IsEOF
		jnb	short NONEXT
		call	UNPACK
		jb	short NONEXT
		mov	[CLUSNUM], di
		inc	word [LASTPOS]
		mov	al, 0
SAVPOS:
		mov	byte [SECCLUSPOS], al
CLRET:
		clc
		retn
NONEXT:
		stc
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 08/09/2022
OPTIMIZE:
		push	dx
		push	bx
		mov	al, [es:bp+4]
		inc	al
		mov	ah, al
		sub	al, dl
		mov	dx, cx
		mov	cx, 0
OPTCLUS:
		call	UNPACK
		jb	short OP_ERR
		add	cl, al
		adc	ch, 0
		cmp	cx, dx
		jnb	short BLKDON
		mov	al, ah
		inc	bx
		cmp	di, bx
		jz	short OPTCLUS
		dec	bx
FINCLUS:
		mov	[CLUSNUM], bx
		sub	dx, cx
		push	dx
		mov	ax, cx
		mul	word [es:bp+2]
		mov	si, [NEXTADD]
		add	ax, si
		mov	[NEXTADD], ax
		pop	ax
		pop	dx
		sub	bx, dx
		add	[LASTPOS], bx
		pop	bx
		call	FIGREC
		mov	bx, si
		clc
		retn
OP_ERR:
		add	sp, 4
		stc
		retn
BLKDON:
		sub	cx, dx
		sub	ah, cl
		dec	ah
		mov	byte [SECCLUSPOS], ah
		mov	cx, dx
		jmp	short FINCLUS

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 08/09/2022
FIGREC:
		push	cx
		mov	cl, [es:bp+5]
		dec	dx
		dec	dx
		shl	dx, cl
		or	dl, bl
		add	dx, [es:bp+0Bh]
		pop	cx
figrec_retn:
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 08/09/2022
ALLOCATE:
		push	bx
		xor	bx, bx
		call	UNPACK
		mov	[FATBYT], di
		pop	bx
		jb	short figrec_retn
		push	cx
		push	bx
		mov	dx, bx
		mov	bx, [es:bp+1Ch]
		cmp	bx, 2
		ja	short FINDFRE
ads1:
		mov	word [es:bp+1Ch], 2
		mov	bx, 1
FINDFRE:
		inc	bx
		cmp	bx, [es:bp+0Dh]
		ja	short ads7
		call	UNPACK
		jb	short ads4
		jnz	short FINDFRE
		mov	[es:bp+1Ch], bx
		xchg	ax, dx
		mov	dx, 1
		call	PACK
		jb	short ads4
		cmp	word [es:bp+1Eh], -1
		jz	short NO_ALLOC
		dec	word [es:bp+1Eh]
NO_ALLOC:
		xchg	ax, dx
		xchg	bx, dx
		mov	ax, dx
		call	PACK
		jb	short ads4
		xchg	ax, bx
		mov	dx, bx
		loop	FINDFRE
		mov	dx, 0FFFFh
		call	PACK
ads4:
		pop	bx
		pop	cx
		jb	short figrec_retn
		call	UNPACK
		jb	short figrec_retn
		call	RESTFATBYT
		jb	short figrec_retn
		xchg	bx, di
		or	di, di
		jnz	short figrec_retn
		push	es
		les	di, [THISSFT]
		mov	[es:di+0Bh], bx
		mov	[es:di+1Bh], bx
		pop	es
		retn
ads7:
		cmp	word [es:bp+1Ch], 2
		jnz	short ads1
		pop	bx
		mov	dx, 0FFFFh
		call	RELBLKS
		pop	ax
		sub	ax, cx
		call	RESTFATBYT
		stc
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 08/09/2022
RESTFATBYT:
		push	bx
		push	dx
		push	di
		xor	bx, bx
		mov	dx, [FATBYT]
		call	PACK
		pop	di
		pop	dx
		pop	bx
RELEASE_flush:
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 08/09/2022
RELEASE:
		xor	dx, dx
RELBLKS:
		call	UNPACK
		jb	short RELEASE_flush
		jz	short RELEASE_flush
		mov	ax, di
		push	dx
		call	PACK
		pop	dx
		jb	short RELEASE_flush
		or	dx, dx
		jnz	short NO_DEALLOC
		cmp	word [es:bp+1Eh], -1
		jz	short NO_DEALLOC
		inc	word [es:bp+1Eh]
NO_DEALLOC:
		mov	bx, ax
		dec	ax
		jz	short RELEASE_flush
		call	IsEOF
		jb	short RELEASE
RET12:
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 08/09/2022
GETEOF:
		call	UNPACK
		jb	short RET12
		push	bx
		mov	bx, di
		call	IsEOF
		pop	bx
		jnb	short RET12
		mov	bx, di
		jmp	short GETEOF

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 08/09/2022
MAKEFCB:
		mov	byte [ss:SpaceFlag], 0
		xor	dl, dl
		test	al, 2
		jnz	short DEFDRV
		mov	byte [es:di], 0
DEFDRV:
		inc	di
		mov	cx, 8
		test	al, 4
		xchg	ax, bx
		mov	al, ' '
		jz	short FILLB
		add	di, cx
		xor	cx, cx
FILLB:
		rep stosb
		mov	cl, 3
		test	bl, 8
		jz	short FILLB2
		add	di, cx
		xor	cx, cx
FILLB2:
		rep stosb
		xchg	ax, cx
		stosw
		stosw
		sub	di, 16
		test	bl, 1
		jz	short SKPSPC
		call	SCANB
		call	DELIM
		jnz	short NOSCAN
		inc	si
SKPSPC:
		call	SCANB
NOSCAN:
		call	GETLET
		jbe	short NODRV
		cmp	byte [si], ':'
		jnz	short NODRV
		inc	si
		sub	al, 40h
		jbe	short BADDRV
		push	ax
		call	GETVISDRV
		pop	ax
		jnb	short HavDrv
BADDRV:
		mov	dl, -1
HavDrv:
		stosb
		inc	si
		dec	di
NODRV:
		dec	si
		inc	di

; ---------------------------------------------------------------------------
	
		; 08/09/2022
NORMSCAN:
		mov	cx, 8
		call	GETWORD
		cmp	byte [si], '.'
		jnz	short NODOT
		inc	si
		mov	cx, 3
		call	MUSTGETWORD
NODOT:
		mov	al, dl
		retn

; ---------------------------------------------------------------------------

		; 08/09/2022
NONAM:
		add	di, cx
		dec	si
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 08/09/2022
GETWORD:

		call	GETLET
		jbe	short NONAM
		dec	si

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 08/09/2022
MUSTGETWORD:
		call	GETLET
		jb	short FILLNAM
		jnz	short MustCheckCX
		test	byte [ss:SpaceFlag], 0FFh
		jz	short FILLNAM
		cmp	al, ' '
		jnz	short FILLNAM
MustCheckCX:
		jcxz	MUSTGETWORD
		dec	cx
		cmp	al, '*'
		jnz	short NOSTAR
		mov	al, '?'
		rep stosb
NOSTAR:
		stosb
		cmp	al, '?'
		jnz	short MUSTGETWORD
		or	dl, 1
		jmp	short MUSTGETWORD
FILLNAM:
		mov	al, ' '
		rep stosb
		dec	si
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 08/09/2022
SCANB:
		lodsb
		call	SPCHK
		jz	short SCANB
		dec	si
scanb_retn:
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 09/09/2022
		; 08/09/2022
NameTrans:
		mov	byte [ss:SpaceFlag], 1
		push	ss
		pop	es
		mov	di, NAME1
		push	di
		mov	ax, '  '
		mov	cx, 5
		stosb
		rep stosw
		xor	al, al
		mov	dl, al
		stosb
		pop	di
		call	NORMSCAN
		cmp	byte [ss:NAME1], 0E5h
		jnz	short scanb_retn
		mov	byte [ss:NAME1], 5
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 08/09/2022
GETLET:
		lodsb

; ---------------------------------------------------------------------------

		; 08/09/2022
_UCase:
		push	bx
		cmp	al, 'a'
		jb	short gl_1
		cmp	al, 'z'
		ja	short gl_1
		sub	al, ' '
gl_1:
		cmp	al, 80h
		jb	short gl_2
		sub	al, 80h
		mov	bx, FILE_UCASE_TAB+2
		;xlat	byte [cs:bx]
		cs	xlat
gl_2:
		push	ax
		mov	bx, CharType
		;xlat	byte [cs:bx]
		cs	xlat
		test	al, 1
		pop	ax
		pop	bx
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 08/09/2022
DELIM:
		push	ax
		push	bx
		mov	bx, CharType
		;xlat	byte [cs:bx]
		cs	xlat
		test	al, 2
		pop	bx
		pop	ax
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 08/09/2022
SPCHK:
		push	ax
		push	bx
		mov	bx, CharType
		;xlat	byte [cs:bx]
		cs	xlat
		test	al, 4
		pop	bx
		pop	ax
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 08/09/2022
PATHCHRCMP:
		cmp	al, '/'
		jbe	short PathRet
		cmp	al, '\'
		retn
GotFor:	
		mov	al, '\'
		retn
PathRet:
		jz	short GotFor
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 08/09/2022
DSKSTATCHK:
		cmp	byte [ss:INDOS], 1
		jz	short dskstatuschk1
		retn
dskstatuschk1:
		push	cx
		push	es
		push	bx
		push	ds
		push	si
		push	cs
		pop	es
		push	ss
		pop	ds
		mov	byte [DSKSTCOM], 5
		mov	byte [DSKSTCALL], 14
		mov	word [DSKSTST], 0
		mov	bx, DSKSTCALL
		lds	si, [BCON]
		call	DEVIOCALL2
		test	word [ss:DSKSTST], 200h
		jz	short GotCh
		xor	al, al
RET36:
		pop	si
		pop	ds
		pop	bx
		pop	es
		pop	cx
		retn
GotCh:
		mov	al, [ss:DSKCHRET]
		cmp	al, 3		; "C"-"@"
		jnz	short RET36
		mov	byte [ss:DSKSTCOM], 4
		mov	byte [ss:DSKSTCALL], 16h
		mov	[ss:DSKCHRET], cl
		mov	word [ss:DSKSTST], 0
		mov	word [ss:DSKSTCNT], 1
		call	DEVIOCALL2
		pop	si
		pop	ds
		pop	bx
		pop	es
		pop	cx
		jmp	CNTCHAND

; ---------------------------------------------------------------------------

		; 08/09/2022
NOSTOP:
		cmp	al, 16		; "P"-"@"
		jz	short INCHKJ
		cmp	al, 3		; "C"-"@"
		jz	short INCHKJ
		retn
INCHKJ:
		jmp	INCHK

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 08/09/2022
SPOOLINT:
		pushf
		test	byte [ss:IDLEINT], 0FFh
		jz	short POPFRET
		test	byte [ss:ERRORMODE], 0FFh
		jnz	short POPFRET
		push	word [ss:IDLEINT]
		int	28h		; DOS 2+ internal - KEYBOARD BUSY LOOP
		pop	word [ss:IDLEINT]
POPFRET:
		popf
_RET18:
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 08/09/2022
STATCHK:
		call	DSKSTATCHK
		push	bx
		xor	bx, bx
		call	GET_IO_SFT
		pop	bx
		jb	short _RET18
		mov	ah, 1
		call	IOFUNC
		jz	short SPOOLINT
		cmp	al, 19		; S'-'@'
		jnz	short NOSTOP
		xor	ah, ah
		call	IOFUNC
		jmp	short PAUSOSTRT

; ---------------------------------------------------------------------------

		; 08/09/2022
PRINTON_OFF:
		not	byte [ss:PFLAG]
		push	bx
		mov	bx, 4
		call	GET_IO_SFT
		pop	bx
		jb	short _RET18
		push	es
		push	di
		push	ds
		pop	es
		mov	di, si
		test	word [es:di+5], 800h
		jz	short NORM_PR
		push	ax
		mov	ax, 1126h
		int	2Fh		; Multiplex - NETWORK REDIRECTOR - ???
					; Return: CF set on error, AX =	error code
					; STACK	unchanged
		pop	ax
		jnb	short NORM_PR
		mov	byte [ss:PFLAG], 0
		push	ax
		mov	ax, 1124h
		int	2Fh		; Multiplex - NETWORK REDIRECTOR - ???
					; ES:DI	-> SFT,	SS = DOS CS
		pop	ax
		jmp	short RETP6
NORM_PR:
		cmp	byte [ss:PFLAG], 0
		jnz	short PRNOPN
		call	DEV_CLOSE_SFT
		jmp	short RETP6
PRNOPN:	
		call	DEV_OPEN_SFT
RETP6:
		pop	di
		pop	es
STATCHK_RETN:
		retn
; ---------------------------------------------------------------------------

		; 08/09/2022
PAUSOLP:
		call	SPOOLINT

PAUSOSTRT:
		mov	ah, 1
		call	IOFUNC
		jz	short PAUSOLP
INCHK:
		push	bx
		xor	bx, bx
		call	GET_IO_SFT
		pop	bx
		jb	short STATCHK_RETN
		xor	ah, ah
		call	IOFUNC
		cmp	al, 16		; 'P'-'@'
		jnz	short NOPRINT
		cmp	byte [ss:SCAN_FLAG], 0
		jz	short PRINTON_OFF
		mov	byte [ss:SCAN_FLAG], 0
NOPRINT:
		cmp	al, 3		; "C"-"@"
		jnz	short STATCHK_RETN

; ---------------------------------------------------------------------------
		
		; 08/09/2022
CNTCHAND:
		mov	al, 3		; ; Display "^C"
		call	BUFOUT
		call	CRLF
		push	ss
		pop	ds
		cmp	byte [CONSWAP], 0
		jz	short NOSWAP
		call	SWAPBACK
NOSWAP:
		cli
		mov	ss, [User_SS]
		mov	sp, [User_SP]
		call	restore_world
		mov	byte [cs:INDOS], 0
		mov	byte [cs:ERRORMODE], 0
		mov	[cs:ConC_Spsave], sp
		clc
		int	23h		; DOS -	CONTROL	"C" EXIT ADDRESS
					; Return: return via RETF 2 with CF set
					; DOS will abort program with errorlevel 0
					; else
					; interrupted DOS call continues
		cli
		mov	word [cs:USER_IN_AX], ax
		pushf
		pop	ax
		cmp	sp, [cs:ConC_Spsave]
		jnz	short ctrlc_try_new
ctrlc_repeat:
		mov	ax, word [cs:USER_IN_AX]

COMMANDJ:
		jmp	COMMAND
ctrlc_try_new:
		add	sp, 2
		test	ax, 1
		jz	short ctrlc_repeat
ctrlc_abort:
		mov	ax, 4C00h
		mov	byte [cs:DidCTRLC], 0FFh
		jmp	short COMMANDJ

; ---------------------------------------------------------------------------

		; 08/09/2022
DIVOV:
		mov	si, DIVMES ; "\r\nDivide overflow\r\n"
		mov	bx, [cs:DivMesLen]
		mov	ax, cs
		mov	ss, ax
		mov	sp, AUXSTACK
		call	RealDivOv
		jmp	short ctrlc_abort

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 08/09/2022
RealDivOv:
		push	ss
		pop	es
		push	ss
		pop	ds
		mov	byte [DSKSTCOM], 8
		mov	byte [DSKSTCALL], 16h
		mov	word [DSKSTST], 0
		mov	word [DSKSTCNT], bx
		mov	bx, DSKSTCALL
		mov	word [DEVIOBUF_PTR], si
		lds	si, [BCON]
		call	DEVIOCALL2
		mov	word [cs:DEVIOBUF_PTR], DEVIOBUF
		mov	word [cs:DSKSTCNT], 1
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 08/09/2022
CHARHARD:
		or	ah, 38h
		mov	[ss:ALLOWED], ah
		mov	word [ss:EXITHOLD+2], es
		mov	word [ss:EXITHOLD], bp
		push	si
		and	di, 0FFh
		mov	bp, ds
		call	FATALC
		pop	si
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 08/09/2022
HARDERR:
		xchg	ax, di
		and	di, 0FFh
		cmp	di, 0
		jnz	short NOSETWRPERR
		push	ax
		mov	al, [es:bp+0]
		mov	[ss:WPERR], al
		pop	ax
NOSETWRPERR:
		sub	ax, cx
		add	dx, ax
		push	dx
		mul	word [es:bp+2]
		pop	dx
		add	bx, ax
		xor	ah, ah
		cmp	dx, [es:bp+6]
		jb	short ERRINT
		inc	ah
		cmp	dx, [es:bp+10h]
		jnb	short TESTDIR
		mov	word [es:bp+1Eh], -1
		jmp	short ERRINT
TESTDIR:
		inc	ah
		cmp	dx, [es:bp+0Bh]
		jb	short ERRINT
		inc	ah
ERRINT:
		shl	ah, 1
		or	ah, byte [ss:SECCLUSPOS+2]
		or	ah, [ss:ALLOWED]

; ---------------------------------------------------------------------------

		; 08/09/2022
FATAL:
		mov	al, [es:bp+0]
FATAL1:
		mov	word [ss:EXITHOLD+2], es
		mov	word [ss:EXITHOLD], bp
		les	si, [es:bp+12h]
		mov	bp, es
FATALC:
		call	SET_I24_EXTENDED_ERROR
		cmp	di, 0Ch
		jbe	short NET_I24_ENTRY
		mov	di, 0Ch
NET_I24_ENTRY:
		cmp	byte [ss:ERRORMODE], 0
		jz	short NoSetFail
		mov	al, 3
		jmp	short FailRet

		nop
NoSetFail:
		mov	[ss:CONTSTK], sp
		push	ss
		pop	es
		cmp	word [ss:SFN], -1
		jz	short _NoFree
		push	ds
		push	si
		lds	si, [ss:PJFN]
		mov	byte [si], 0FFh
		pop	si
		pop	ds
_NoFree:
		cli
		inc	byte [ss:ERRORMODE]
		dec	byte [ss:INDOS]
		mov	ss, [ss:User_SS]
		mov	sp, [es:User_SP]
		int	24h		; DOS -	FATAL ERROR HANDLER ADDRESS
					; Automatically	called upon detection of unrecoverable I/O error.
		mov	[es:User_SP], sp
		mov	[es:User_SS], ss
		mov	bp, es
		mov	ss, bp
		mov	sp, [ss:CONTSTK]
		inc	byte [ss:INDOS]
		mov	byte [ss:ERRORMODE], 0
		sti
FailRet:
		les	bp, [ss:EXITHOLD]
		cmp	al, 1
		jb	short CheckIgnore
		jz	short CheckRetry
		cmp	al, 3
		jnz	short DoAbort
		test	byte [ss:ALLOWED], 8
		jz	short DoAbort
DoFail:
		mov	al, 3
		inc	byte [ss:FAILERR]
CleanUp:
		mov	byte [ss:WPERR], -1
		cmp	word [ss:SFN], -1
		jnz	short CleanUp2
		retn
CleanUp2:
		push	ds
		push	si
		push	ax
		mov	ax, [ss:SFN]
		lds	si, [ss:PJFN]
		mov	[si], al
		pop	ax
		pop	si
		pop	ds
		retn
CheckIgnore:
		test	byte [ss:ALLOWED], 20h
		jz	short DoFail
		jmp	short CleanUp
CheckRetry:
		test	byte [ss:ALLOWED], 10h
		jz	short DoFail
		jmp	short CleanUp
DoAbort:
		push	ss
		pop	ds
		cmp	byte [CONSWAP], 0
		jz	short NOSWAP2
		call	SWAPBACK
NOSWAP2:
		test	byte [fAborting], 0FFh
		jnz	short DoFail
		mov	byte [cMeta+2], 2
		xor	al, al
		jmp	exit_inner

; ---------------------------------------------------------------------------

		; 08/09/2022
reset_environment:
		push	ds
		mov	ah, 82h
		int	2Ah		; Microsoft Networks - END DOS CRITICAL	SECTIONS 0 THROUGH 7
		mov	byte [ss:fAborting], -1
		mov	ax, 1122h
		int	2Fh		; Multiplex - NETWORK REDIRECTOR - PROCESS TERMINATION HOOK
					; SS = DOS CS
		mov	al, 22h
		call	_$GET_INTERRUPT_VECTOR
		pop	cx
		push	es
		push	bx
		mov	bx, [ss:CurrentPDB]
		mov	ds, bx
		mov	ax, [OEM_HANDLER+2]
		cmp	ax, bx
		jz	short reset_return
		cmp	bx, cx
		jnz	short reset_return
		push	ax
		cmp	byte [ss:cMeta+2], 3
		jz	short reset_to_parent
		call	arena_free_process
		call	DOS_ABORT
reset_to_parent:
		pop	word [ss:CurrentPDB]
reset_return:
		push	cs
		pop	ds
		mov	al, -1
		call	EcritDisk
		call	FLUSHBUF
		call	LcritDisk
		call	CHECK_VIRT_OPEN
		cli
		mov	byte [INDOS], 0
		mov	byte [WPERR], -1
		mov	byte [fAborting], 0
		pop	word [EXITHOLD]
		pop	word [EXITHOLD+2]
		mov	ds, [CurrentPDB]
		mov	ss, word [BCLOCK+2]
		mov	sp, word [BCLOCK]
		call	restore_world
		mov	[cs:User_SP], ax
		pop	ax
		pop	ax
		pop	ax
		mov	ax, 0F202h
		push	ax
		push	word [cs:EXITHOLD+2]
		push	word [cs:EXITHOLD]
		mov	ax, [cs:User_SP]
		iret

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 08/09/2022
SET_I24_EXTENDED_ERROR:
		push	ax
		mov	ax, MAXCALL
		sub	ax, ErrMap24
		cmp	di, ax
		mov	ax, di
		jnb	short NoTrans
		mov	al, [cs:di+ErrMap24]
		xor	ah, ah
NoTrans:
		mov	[cs:EXTERR], ax
		pop	ax
		push	si
		mov	si, ERR_TABLE_24
		call	CAL_LK
		pop	si
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 08/09/2022
IsEOF:
		cmp	word [es:bp+0Dh], 0FF6h
		jnb	short EOF16
		cmp	bx, 0FF0h
		jz	short IsEOF_other
		cmp	bx, 0FF8h
IsEOF_other:
		retn
EOF16:
		cmp	bx, 0FFF8h
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 08/09/2022
UNPACK:
		cmp	bx, [es:bp+0Dh]
		ja	short HURTFAT
		call	MAPCLUSTER
		jb	short _DoContext
		mov	di, [di]
		jnz	short High12
		mov	si, [es:bp+0Dh]
		cmp	si, 0FF6h
		jb	short Unpack12
		or	di, di
		jmp	short _DoContext
High12:
		shr	di, 1
		shr	di, 1
		shr	di, 1
		shr	di, 1
Unpack12:
		and	di, 0FFFh
_DoContext:
		push	ss
		pop	ds
		retn
HURTFAT:
		mov	word [es:bp+1Eh], 0FFFFh
		push	ax
		mov	ah, 88h
		mov	byte [ss:ALLOWED], 8
		mov	di, 0FFFh
		call	FATAL
		cmp	al, 3
		clc
		jnz	short OKU_RET
		stc
OKU_RET:
		pop	ax
hurtfat_retn:
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 08/09/2022
PACK:
		call	MAPCLUSTER
		jb	short _DoContext
		mov	si, [di]
		jz	short ALIGNED
		push	cx
		mov	cl, 4
		shl	dx, cl
		pop	cx
		;and	si, 0Fh
		; 09/09/2022 - Temporary !
		db	81h, 0E6h, 0Fh, 0
		jmp	short PACKIN
ALIGNED:
		cmp	word [es:bp+0Dh], 0FF6h
		jnb	short Pack16
		and	si, 0F000h
		and	dx, 0FFFh
		jmp	short PACKIN
Pack16:
		xor	si, si
PACKIN:
		or	si, dx
		mov	[di], si
		lds	si, [ss:CURBUF]
		or	byte [si+5], 40h
		cmp	byte [ss:THISDRV+2], 0
		push	ss
		pop	ds
		jz	short hurtfat_retn
		push	ax
		push	bx
		push	cx
		mov	ax, [CLUSSAVE]
		mov	ds, word [CURBUF+2]
		add	si, 16
		mov	[si], ah
		push	ss
		pop	ds
		push	ax
		mov	dx, [CLUSSEC]
		mov	si, 1
		xor	al, al
		call	GETBUFFRB
		pop	ax
		jb	short POPP_RET
		lds	di, [CURBUF]
		or	byte [di+5], 40h
		add	di, 10h
		dec	di
		add	di, [es:bp+2]
		mov	[di], al
		clc
POPP_RET:
		push	ss
		pop	ds
		pop	cx
		pop	bx
		pop	ax
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 08/09/2022
MAPCLUSTER:
		mov	byte [THISDRV+2], 0
		push	ax
		push	bx
		push	cx
		push	dx
		mov	ax, bx
		mov	cx, 0FF6h
		cmp	[es:bp+0Dh], cx
		jnb	short Map16
		shr	ax, 1
Map16:
		add	ax, bx
		mov	cx, [es:bp+2]
		cmp	cx, 512
		jnz	short _DoDiv
		mov	dx, ax
		and	dx, 511
		mov	al, ah
		shr	al, 1
		cbw
DivDone:
		add	ax, [es:bp+6]
		dec	cx
		push	ax
		push	dx
		push	cx
		mov	dx, ax
		xor	al, al
		mov	si, 1
		call	GETBUFFRB
		pop	cx
		pop	ax
		pop	dx
		jb	short MAP_POP
		lds	si, [CURBUF]
		lea	di, [si+16]
		add	di, ax
		cmp	ax, cx
		jnz	short MAPRET
		mov	al, [di]
		push	ss
		pop	ds
		inc	byte [THISDRV+2]
		mov	byte [CLUSSAVE], al
		mov	[CLUSSEC], dx
		inc	dx
		xor	al, al
		mov	si, 1
		call	GETBUFFRB
		jb	short MAP_POP
		lds	si, [CURBUF]
		lea	di, [si+16]
		mov	al, [di]
		push	ss
		pop	ds
		mov	byte [CLUSSAVE+1], al
		mov	di, CLUSSAVE
MAPRET:
		pop	dx
		pop	cx
		pop	bx
		xor	ax, ax
		cmp	word [es:bp+0Dh], 4086
		jnb	short MapSet
		mov	ax, bx
MapSet:
		test	al, 1
		pop	ax
		retn
MAP_POP:
		pop	dx
		pop	cx
		pop	bx
		pop	ax
		retn
_DoDiv:
		xor	dx, dx
		div	cx
		jmp	short DivDone

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 08/09/2022
FATREAD_SFT:
		les	bp, [es:di+7]
		mov	al, [es:bp+0]
		mov	byte [THISDRV], al
		call	GOTDPB
		call	FAT_GOT_DPB
fatread_sft_retn:
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 08/09/2022
FatRead_CDS:
		push	es
		push	di
		les	bp, [es:di+45h]
		mov	al, [es:bp+0]
		mov	byte [THISDRV], al
		call	GOTDPB
		call	FAT_GOT_DPB
		pop	di
		pop	es
		jb	short fatread_sft_retn
		jnz	short NO_CHANGE
		xor	ax, ax
		dec	ax
		push	ds
		mov	cl, [CDSCOUNT]
		xor	ch, ch
		lds	si, [es:di+45h]
		les	di, [ss:CDSAddr]
frcd20:
		test	word [es:di+43h], 8000h
		jnz	short frcd25
		push	es
		push	di
		les	di, [es:di+45h]
		call	POINTCOMP
		pop	di
		pop	es
		jnz	short frcd25
		test	[es:di+49h], ax
		jz	short frcd25
		mov	[es:di+49h], ax
frcd25:
		add	di, 81
		loop	frcd20
		pop	ds
NO_CHANGE:
		les	bp, [THISDPB]
		clc
		retn

; ---------------------------------------------------------------------------

		; 08/09/2022
FATERR:
		mov	word [es:bp+1Eh], -1
		and	di, 0FFh
		mov	byte [ALLOWED], 18h
		mov	ah, 1Ah
		mov	al, byte [THISDRV]
		call	FATAL1
		les	bp, [THISDPB]
		cmp	al, 3
		jnz	short FAT_GOT_DPB
		stc
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 08/09/2022
FAT_GOT_DPB:
		push	ss
		pop	ds
		mov	al, 0Fh
		mov	ah, [es:bp+1]
		mov	word [DEVCALL], ax
		mov	byte [DEVCALL_REQFUNC], 1
		mov	word [DEVCALL_REQSTAT], 0
		mov	al, [es:bp+16h]
		mov	[CALLMED], al
		push	es
		push	ds
		mov	bx, DEVCALL
		lds	si, [es:bp+12h]
		pop	es
		call	DEVIOCALL2
		push	ss
		pop	ds
		pop	es
		mov	di, word [DEVCALL_REQSTAT]
		test	di, 8000h
		jnz	short FATERR
		xor	ah, ah
		xchg	ah, [es:bp+17h]
		mov	al, byte [THISDRV]
		cmp	[VOLCHNG_FLAG], al
		jnz	short CHECK_BYT
		mov	byte [VOLCHNG_FLAG], -1
		jmp	GOGETBPB
CHECK_BYT:
		or	ah, [CALLXAD]
		jns	short CHECK_ZR
		jmp	short NEWDSK

		nop
CHECK_ZR:
		jz	short CHKBUFFDIRT
		clc
		retn

; ---------------------------------------------------------------------------

		; 08/09/2022
DISK_CHNG_ERR:
		push	es
		push	bp
		les	bp, [es:bp+12h]
		test	word [es:bp+4], 800h
		pop	bp
		pop	es
		jz	short FAIL_OPJ2
		push	ds
		push	di
		push	ss
		pop	ds
		mov	byte [ALLOWED], 18h
		push	es
		les	di, [CALLVIDM]
		mov	[EXTERRPT+2], es
		pop	es
		mov	[EXTERRPT], di
		mov	ax, 0Fh
		mov	byte [SECCLUSPOS+2], 1
		call	HARDERR
		pop	di
		pop	ds
		cmp	al, 3
FAIL_OPJ2:
		jz	short FAIL_OP
		jmp	FAT_GOT_DPB

; ---------------------------------------------------------------------------

		; 08/09/2022
CHKBUFFDIRT:
		lds	di, [BUFFHEAD]

nbuffer:
		cmp	al, [di+4]
		jnz	short lfnxt
		test	byte [di+5], 40h
		jz	short lfnxt
		push	ss
		pop	ds
		clc
		retn

; ---------------------------------------------------------------------------

		; 08/09/2022
FAIL_OP:
		push	ss
		pop	ds
		stc
		retn
; ---------------------------------------------------------------------------

		; 08/09/2022
lfnxt:
		lds	di, [di]
		cmp	di, -1
		jnz	short nbuffer
NEWDSK:
		mov	word [es:bp+1Eh], 0FFFFh
		call	SETVISIT
nxbuffer:
		or	byte [di+5], 20h
		cmp	al, [di+4]
		jnz	short lfnxt2
		test	byte [di+5], 40h
		jz	short lfnxt1
		jmp	short DISK_CHNG_ERR
lfnxt1:
		mov	word [di+4], 20FFh
		call	SCANPLACE
lfnxt2:
		call	SKIPVISIT
		jnz	short nxbuffer
GOGETBPB:
		lds	di, [es:bp+12h]
		test	word [di+4], 2000h
		jnz	short GETFREEBUF
		push	ss
		pop	ds
		mov	bx, 2
		call	UNPACK
FAIL_OPJ:
		jb	short FAIL_OP
		lds	di, [CURBUF]
		jmp	short GOTGETBUF

; ---------------------------------------------------------------------------

		; 08/09/2022
GETFREEBUF:
		push	es
		push	bp
		lds	di, [ss:BUFFHEAD]
		call	BUFWRITE
		pop	bp
		pop	es
		jb	short FAIL_OPJ
GOTGETBUF:
		add	di, 16
		mov	[ss:CALLXAD+2], ds
		push	ss
		pop	ds
		mov	word [CALLXAD], di
		mov	al, 16h
		mov	ah, [es:bp+1]
		mov	word [DEVCALL], ax
		mov	byte [DEVCALL_REQFUNC], 2
		mov	word [DEVCALL_REQSTAT], 0
		mov	al, [es:bp+16h]
		mov	[CALLMED], al
		push	es
		push	ds
		push	word [es:bp+14h]
		push	word [es:bp+12h]
		mov	bx, DEVCALL
		pop	si
		pop	ds
		pop	es
		call	DEVIOCALL2
		pop	es
		push	ss
		pop	ds
		mov	di, word [DEVCALL_REQSTAT]
		test	di, 8000h
		jnz	short FATERRJ
		mov	al, [es:bp+16h]
		lds	si, [CALLSCNT]
		mov	word [es:bp+1Ch], 0
		call	_$SETDPB
		lds	di, [ss:CALLXAD]
		mov	al, [es:bp+8]
		mov	ah, [es:bp+0Fh]
		mov	[di-8],	ax
		push	ss
		pop	ds
		xor	al, al
		retn
; ---------------------------------------------------------------------------

		; 08/09/2022
FATERRJ:
		jmp	FATERR

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 08/09/2022

SETVISIT:
		lds	di, [ss:BUFFHEAD]
		push	ax
		mov	al, 0DFh
SETLOOP:
		and	[di+5],	al
		lds	di, [di]
		cmp	di, -1
		jnz	short SETLOOP
		pop	ax
		lds	di, [ss:BUFFHEAD]
SVISIT_RETN:
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 08/09/2022
SKIPVISIT:
		cmp	di, -1
		jz	short SVISIT_RETN
		test	byte [di+5], 20h
		jnz	short SKIPLOOP
		push	ax
		or	al, 1
		pop	ax
		retn
SKIPLOOP:
		lds	di, [di]
		jmp	short SKIPVISIT

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 08/09/2022
SCANPLACE:
		push	es
		les	si, [di]
		call	PLACEBUF
		push	es
		pop	ds
		mov	di, si
		pop	es
scanplace_retn:
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 08/09/2022
PLACEBUF:
		call	save_world
		les	cx, [di]
		cmp	cx, -1
		jz	short NRET
		mov	bp, es
		push	ds
		pop	es
		lds	si, [ss:BUFFHEAD]
		call	POINTCOMP
		jnz	short BUFLOOP
		mov	word [ss:BUFFHEAD], cx
		mov	word [ss:BUFFHEAD+2], bp
		jmp	short LOOKEND
BUFLOOP:
		mov	ax, ds
		mov	bx, si
		lds	si, [si]
		call	POINTCOMP
		jnz	short BUFLOOP
		mov	ds, ax
		mov	si, bx
		mov	[si], cx
		mov	[si+2],	bp
LOOKEND:
		mov	ax, ds
		mov	bx, si
		lds	si, [si]
		cmp	si, -1
		jnz	short LOOKEND
		mov	ds, ax
		mov	[bx], di
		mov	word [bx+2], es
		mov	word [es:di], -1
		mov	word [es:di+2], -1
NRET:
		call	restore_world
		cmp	byte [di+4], -1
		jnz	short scanplace_retn
		call	PLACEHEAD
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 08/09/2022
PLACEHEAD:
		call	save_world
		push	ds
		pop	es
		lds	si, [ss:BUFFHEAD]
		call	POINTCOMP
		jz	short GOTHEEND2
		mov	[es:di], si
		mov	word [es:di+2], ds
		mov	word [ss:BUFFHEAD], di
		mov	word [ss:BUFFHEAD+2], es
LOOKEND2:
		mov	ax, ds
		mov	bx, si
		lds	si, [si]
		call	POINTCOMP
		jnz	short LOOKEND2
		mov	ds, ax
		mov	word [bx], 0FFFFh
		mov	word [bx+2], 0FFFFh
GOTHEEND2:
		call	restore_world
placehead_retn:
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 08/09/2022
POINTCOMP:
		cmp	si, di
		jnz	short placehead_retn
		push	cx
		push	dx
		mov	cx, ds
		mov	dx, es
		cmp	cx, dx
		pop	dx
		pop	cx
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 08/09/2022
GETBUFFR:
		xor	si, si

; ---------------------------------------------------------------------------

		; 08/09/2022
GETBUFFRB:
		mov	[PREREAD], ax
		mov	al, [es:bp+0]
		lds	di, [LastBuffer]
		cmp	di, -1
		jz	short getb5
		cmp	dx, [di+6]
		jnz	short getb5
		cmp	al, [di+4]
		jnz	short getb5
		jmp	short getb35
getb5:
		lds	di, [ss:BUFFHEAD]
getb10:
		cmp	dx, [di+6]
		jnz	short getb12
		cmp	al, [di+4]
		jz	short getb25
getb12:
		lds	di, [di]
		cmp	di, -1
		jnz	short getb10
		lds	di, [ss:BUFFHEAD]
		push	si
		push	dx
		push	bp
		push	es
		call	BUFWRITE
		pop	es
		pop	bp
		pop	dx
		pop	si
		jb	short getbx
		xor	ah, ah
		test	byte [ss:PREREAD], 0FFh
		jnz	short getb20
		lea	bx, [di+16]
		mov	cx, 1
		push	si
		push	di
		push	dx
		or	si, si
		jz	short getb15
		call	FATSECRD
		mov	ah, 2
		jmp	short getb17
getb15:
		call	DREAD
		mov	ah, 0
getb17:
		pop	dx
		pop	di
		pop	si
		jb	short getbx
getb20:
		mov	[di+6],	dx
		mov	[di+0Ah], bp
		mov	word [di+0Ch], es
		mov	al, [es:bp+0]
		mov	[di+4],	ax
getb25:
		mov	ax, 1
		or	si, si
		jz	short getb30
		mov	al, [es:bp+8]
		mov	ah, [es:bp+0Fh]
getb30:
		mov	[di+8],	ax
		call	PLACEBUF
getb35:
		mov	word [ss:CURBUF+2], ds
		mov	word [ss:LastBuffer+2], ds
		mov	word [ss:CURBUF], di
		mov	word [ss:LastBuffer], di
		clc
getbx:
		push	ss
		pop	ds
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 08/09/2022
FLUSHBUF:
		mov	ah, -1
		lds	di, [BUFFHEAD]
scan_buf_queue:
		call	CHECKFLUSH
		push	ax
		mov	al, [di+4]
		cmp	al, [ss:WPERR]
		jz	short free_the_buf
dont_free_the_buf:
		pop	ax
		lds	di, [di]
		cmp	di, -1
		jnz	short scan_buf_queue
		push	ss
		pop	ds
		cmp	byte [FAILERR], 0
		jnz	short bad_flush
		retn
bad_flush:
		stc
flushbuf_retn:
		retn
free_the_buf:
		mov	word [di+4], 0FFh
		jmp	short dont_free_the_buf

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 08/09/2022
CHECKFLUSH:
		cmp	[di+4],	ah
		jz	short flushbuf_retn
		cmp	ah, al
		jz	short DOBUFFER
		cmp	al, [di+4]
		clc
		jnz	short flushbuf_retn
DOBUFFER:
		test	byte [di+5], 40h
		jz	short flushbuf_retn
		push	ax
		push	word [di+4]
		call	BUFWRITE
		pop	ax
		jb	short LEAVE_BUF
		and	ah, 0BFh
		mov	[di+4],	ax
LEAVE_BUF:
		pop	ax
checkflush_retn:
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 08/09/2022
BUFWRITE:
		mov	ax, 0FFh
		xchg	ax, [di+4]
		cmp	al, 0FFh
		jz	short checkflush_retn
		test	ah, 40h
		jz	short checkflush_retn
		cmp	al, [ss:WPERR]
		jz	short checkflush_retn
		les	bp, [di+10]
		lea	bx, [di+16]
		mov	dx, [di+6]
		mov	cx, [di+8]
		mov	al, ch
		xor	ch, ch
		mov	ah, ch
		mov	byte [ss:ALLOWED], 18h
		test	byte [di+5], 8
		jz	short NO_IGNORE
		or	byte [ss:ALLOWED], 20h
NO_IGNORE:
		push	di
		xor	di, di
WRTAGAIN:
		push	di
		push	cx
		push	ax
		mov	cx, 1
		push	bx
		push	dx
		push	ds
		call	DWRITE
		pop	ds
		pop	dx
		pop	bx
		pop	ax
		pop	cx
		pop	di
		jb	short NOSET
		inc	di
NOSET:
		add	dx, ax
		loop	WRTAGAIN
		or	di, di
		jnz	short BWROK
		stc
BWROK:
		pop	di
		retn

; ---------------------------------------------------------------------------

		; 08/09/2022
_$WAIT:
		xor	ax, ax
		xchg	ax, [ss:exit_code]
		jmp	SYS_RET_OK

; ---------------------------------------------------------------------------

		; 09/09/2022
_$EXEC:
		push	bp
		mov	bp, sp
		sub	sp, 26
		cmp	al, 3
		jbe	short Exec_Check_2
Exec_Bad_Fun:
		mov	byte [ss:EXTERR_LOCUS], 1
		mov	al, 1
Exec_Ret_Err:
		mov	sp, bp
		pop	bp
		jmp	SYS_Ret_Err
Exec_Check_2:
		cmp	al, 2
		jz	short Exec_Bad_Fun
		mov	[bp-4],	bx
		mov	word [bp-2], es
		mov	[bp-5],	al
		mov	byte [bp-6], 0
		mov	[bp-26], dx
		mov	word [bp-24], ds
		mov	si, dx
		call	DStrLen
		mov	[bp-22], cx
		xor	al, al
		push	bp
		call	_$OPEN
		pop	bp
		jb	short Exec_Ret_Err
		mov	[bp-8],	ax
		mov	bx, ax
		xor	al, al
		call	_$IOCTL
		jb	short Exec_BombJ
		test	dl, 80h
		jz	short Exec_Check_Environ
		mov	al, 2
Exec_BombJ:
		jmp	Exec_Bomb
BadEnv:
		mov	al, 0Ah
		jmp	Exec_Bomb
Exec_Check_Environ:
		mov	word [bp-18], 0
		mov	word [bp-14], 0
		test	byte [bp-5], 2
		jnz	short Exec_Read_Header
		lds	si, [bp-4]
		mov	ax, [si]
		or	ax, ax
		jnz	short exec_scan_env
		mov	ds, [ss:CurrentPDB]
		mov	ax, word [SFT_ADDR+2]
		mov	[bp-14], ax
		or	ax, ax
		jz	short Exec_Read_Header
exec_scan_env:
		mov	es, ax
		xor	di, di
		mov	cx, 7FFFh
		xor	al, al
Exec_Get_Environ_Len:
		repne scasb
		jnz	short BadEnv
		dec	cx
		jb	short BadEnv
		scasb
		jnz	short Exec_Get_Environ_Len
		push	di
		lea	bx, [di+11h]
		add	bx, [bp-22]
		mov	cl, 4
		shr	bx, cl
		push	es
		call	_$ALLOC
		pop	ds
		pop	cx
		jnb	short Exec_Save_Environ
		jmp	short Exec_No_Mem

		nop
Exec_Save_Environ:
		mov	es, ax
		mov	[bp-14], ax
		xor	si, si
		mov	di, si
		rep movsb
		mov	ax, 1
		stosw
		lds	si, [bp-26]
		mov	cx, [bp-22]
		rep movsb
Exec_Read_Header:
		push	ss
		pop	ds
		mov	cx, 26
		mov	dx, exec_signature
		push	es
		push	ds
		call	ExecRead
		pop	ds
		pop	es
		jb	short Exec_Bad_File
		or	ax, ax
		jz	short Exec_Bad_File
		cmp	ax, 26
		jnz	short Exec_Com_Filej
		test	word [exec_max_BSS], 0FFFFh
		jnz	short Exec_Check_Sig
		mov	byte [bp-6], 0FFh
Exec_Check_Sig:
		mov	ax, [exec_signature]
		cmp	ax, 5A4Dh  ; 'MZ'
		jz	short Exec_Save_Start
		cmp	ax, 4D5Ah  ; 'ZM'
		jz	short Exec_Save_Start
Exec_Com_Filej:
		jmp	Exec_Com_file
Exec_Save_Start:
		mov	ax, [exec_pages]
		mov	cl, 5
		shl	ax, cl
		sub	ax, [exec_par_dir]
		mov	[bp-12], ax
		test	byte [bp-5], 2
		jz	short exec_allocate
		les	di, [bp-4]
		mov	ax, [es:di]
		mov	[bp-20], ax
		mov	ax, [es:di+2]
		mov	[bp-10], ax
		jmp	short Exec_Find_Res
Exec_No_Mem:
		mov	al, 8
		jmp	short Exec_Bomb

; ---------------------------------------------------------------------------

		; 09/09/2022
Exec_Bad_File:
		mov	al, 0Bh
Exec_Bomb:
		mov	bx, [bp-8]
		call	Exec_Dealloc
		call	LcritDisk
		push	ax
		push	bp
		call	_$CLOSE
		pop	bp
		pop	ax
		jmp	Exec_Ret_Err
exec_allocate:
		push	ax
		mov	bx, 0FFFFh
		push	ds
		call	_$ALLOC
		pop	ds
		pop	ax
		add	ax, 10h
		cmp	bx, 11h
		jb	short Exec_No_Mem
		cmp	ax, bx
		ja	short Exec_No_Mem
		test	byte [bp-6], 0FFh
		jnz	short Exec_BX_Max
		add	ax, [exec_min_BSS]
		jb	short Exec_No_Mem
		cmp	ax, bx
		ja	short Exec_No_Mem
		sub	ax, [exec_min_BSS]
		add	ax, [exec_max_BSS]
		jb	short Exec_BX_Max
		cmp	ax, bx
		jbe	short Exec_Got_Block
Exec_BX_Max:
		mov	ax, bx
Exec_Got_Block:
		push	ds
		mov	bx, ax
		mov	[bp-16], bx
		call	_$ALLOC
		pop	ds
		jb	short Exec_No_Mem
		mov	[bp-18], ax
		add	ax, 10h
		test	byte [bp-6], 0FFh
		jz	short Exec_Use_Ax
		add	ax, [bp-16]
		sub	ax, [bp-12]
		sub	ax, 10h
Exec_Use_Ax:
		mov	[bp-10], ax
		mov	[bp-20], ax
Exec_Find_Res:
		mov	dx, [exec_par_dir]
		push	dx
		mov	cl, 4
		shl	dx, cl
		pop	ax
		mov	cl, 12
		shr	ax, cl
		mov	cx, ax
		mov	bx, [bp-8]
		push	ds
		xor	al, al
		call	_$LSEEK
		pop	ds
		jnb	short exec_big_read
		jmp	Exec_Bomb
exec_big_read:
		mov	bx, [bp-12]
		cmp	bx, 1000h
		jb	short Exec_Read_OK
		mov	bx, 0FE0h
Exec_Read_OK:
		sub	[bp-12], bx
		push	bx
		mov	cl, 4
		shl	bx, cl
		mov	cx, bx
		push	ds
		mov	ds, word [bp-20]
		xor	dx, dx
		push	cx
		call	ExecRead
		pop	cx
		pop	ds
		jb	short Exec_Bad_FileJ
		cmp	cx, ax
		pop	bx
		jz	short ExecCheckEnd
		sub	cx, ax
		cmp	cx, 512
		jnb	short Exec_Bad_FileJ
ExecCheckEnd:
		add	[bp-20], bx
		test	word [bp-12], 0FFFFh
		jnz	short exec_big_read
		mov	cx, [bp-10]
		mov	ax, [exec_SS]
		add	ax, cx
		mov	[exec_init_ss], ax
		mov	ax, [exec_SP]
		mov	[exec_init_sp], ax
		les	ax, [exec_IP]
		mov	[exec_init_ip], ax
		mov	ax, es
		add	ax, cx
		mov	[exec_init_cs], ax
		xor	cx, cx
		mov	dx, [exec_rle_table]
		mov	bx, [bp-8]
		push	ds
		xor	ax, ax
		call	_$LSEEK
		pop	ds
		jnb	short Exec_Get_Entries
Exec_Bad_FileJ:
		jmp	Exec_Bad_File
; ---------------------------------------------------------------------------

		; 09/09/2022
Exec_Get_Entries:
		mov	dx, [exec_rle_count]

exec_read_reloc:
		push	dx
		mov	dx, OPENBUF
		mov	cx, 388
		push	ds
		call	ExecRead
		pop	es
		pop	dx
		jb	short Exec_Bad_FileJ
		mov	cx, 97
		mov	di, OPENBUF
		mov	si, [bp-10]
exec_reloc_one:
		or	dx, dx
		jz	short Exec_Set_PDBJ
		lds	bx, [es:di]
		mov	ax, ds
		add	ax, si
		mov	ds, ax
		add	[bx], si
		add	di, 4
		dec	dx
		loop	exec_reloc_one
		push	es
		pop	ds
		jmp	short exec_read_reloc
Exec_Set_PDBJ:
		jmp	Exec_Set_PDB
Exec_No_Memj:
		jmp	Exec_No_Mem

; ---------------------------------------------------------------------------

		; 09/09/2022
Exec_Com_file:
		test	byte [bp-5], 2
		jz	short Exec_Alloc_Com_File
		lds	si, [bp-4]
		lodsw
		mov	[bp-20], ax
		mov	ax, 0FFFFh
		jmp	short Exec_Read_Block
Exec_Alloc_Com_File:
		mov	bx, 0FFFFh
		call	_$ALLOC
		or	bx, bx
		jz	short Exec_No_Memj
		mov	[bp-16], bx
		push	bx
		call	_$ALLOC
		pop	bx
		mov	[bp-18], ax
		add	ax, 10h
		mov	[bp-20], ax
		xor	ax, ax
		cmp	bx, 1000h
		jnb	short Exec_Read_Com
		mov	ax, bx
		mov	cl, 4
		shl	ax, cl
Exec_Read_Com:
		sub	ax, 100h
Exec_Read_Block:
		push	ax
		mov	bx, [bp-8]
		xor	cx, cx
		mov	dx, cx
		xor	ax, ax
		call	_$LSEEK
		pop	cx
		mov	ds, word [bp-20]
		xor	dx, dx
		push	cx
		call	ExecRead
		pop	si
		jnb	short OkRead
		jmp	Exec_Bad_File
OkRead:
		cmp	ax, si
		jz	short Exec_No_Memj
		test	byte [bp-5], 2
		jnz	short Exec_Set_PDB
		mov	ax, [bp-20]
		sub	ax, 10h
		mov	[ss:exec_init_cs], ax
		mov	word [ss:exec_init_ip], 100h
		add	si, 0FEh
		mov	[ss:exec_init_sp], si
		mov	[ss:exec_init_ss], ax
		mov	ds, ax
		mov	word [si], 0
Exec_Set_PDB:
		mov	bx, [bp-8]
		call	Exec_Dealloc
		push	bp
		call	_$CLOSE
		pop	bp
		call	Exec_Alloc
		test	byte [bp-5], 2
		jz	short Exec_Build_Header
		mov	sp, bp
		pop	bp
		jmp	SYS_RET_OK

; ---------------------------------------------------------------------------

		; 09/09/2022
Exec_Build_Header:
		mov	dx, [bp-18]
		mov	si, 1
		mov	ax, [bp-14]
		or	ax, ax
		jz	short No_Owner
		dec	ax
		mov	ds, ax
		mov	[si], dx
No_Owner:
		mov	ax, [bp-18]
		dec	ax
		mov	ds, ax
		mov	[si], dx
		push	dx
		mov	si, [bp-16]
		add	si, dx
		call	_$DUP_PDB
		pop	dx
		push	word [bp-14]
		pop	word [es:SFT_ADDR+2]
		lds	si, [bp-4]
		push	ds
		push	si
		lds	si, [si+6]
		mov	cx, 12
		push	cx
		mov	di, 5Ch
		mov	bl, [si]
		rep movsb
		xor	ax, ax
		stosw
		stosw
		pop	cx
		pop	si
		pop	ds
		push	ds
		push	si
		lds	si, [si+0Ah]
		mov	bh, [si]
		rep movsb
		stosw
		stosw
		pop	si
		pop	ds
		lds	si, [si+2]
		or	cl, 80h
		mov	di, cx
		rep movsb
		dec	cl
		mov	al, bh
		xor	bh, bh
		call	GETVISDRV
		jnb	short Exec_BL
		mov	bh, cl
Exec_BL:
		mov	al, bl
		xor	bl, bl
		call	GETVISDRV
		jnb	short exec_Set_Return
		mov	bl, cl
exec_Set_Return:
		call	Get_User_Stack
		push	word [si+14h]
		push	word [si+12h]
		push	word [si+14h]
		push	word [si+12h]
		pop	word [es:PDB_EXIT]
		pop	word [es:PDB_EXIT+2]
		xor	ax, ax
		mov	ds, ax
		pop	word [ShChk]
		pop	word [ShChk+2]
		mov	word [ss:DMAADD], 80h
		mov	ds, [ss:CurrentPDB]
		mov	[ss:DMAADD+2], ds
		test	byte [bp-5], 1
		jz	short exec_go
		lds	si, [ss:exec_init_sp]
		les	di, [bp-4]
		mov	word [es:di+10h], ds
		dec	si
		dec	si
		mov	[si], bx
		mov	[es:di+0Eh], si
		lds	ax, [ss:exec_init_ip]
		mov	word [es:di+14h], ds
		mov	[es:di+12h], ax
		mov	sp, bp
		pop	bp
		jmp	SYS_RET_OK

; ---------------------------------------------------------------------------

		; 09/09/2022
exec_go:
		lds	si, [ss:exec_init_ip]
		les	di, [ss:exec_init_sp]
		mov	ax, es
Xfer_To_User:
		cli
		mov	byte [ss:INDOS], 0
		mov	ss, ax
		mov	sp, di
		sti
		push	ds
		push	si
		mov	es, dx
		mov	ds, dx
		mov	ax, bx
		retf

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 09/09/2022
ExecRead:
		call	Exec_Dealloc
		mov	bx, [bp-8]
		push	bp
		call	_$READ
		pop	bp
		call	Exec_Alloc
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 09/09/2022
Exec_Dealloc:
		push	bx
		mov	bx, 0
		call	EcritDisk
		call	ChangeOwners
		pop	bx
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 09/09/2022
Exec_Alloc:
		push	bx
		mov	bx, [cs:CurrentPDB]
		call	ChangeOwners
		call	LcritDisk
		pop	bx
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 09/09/2022
ChangeOwners:
		pushf
		push	ax
		mov	ax, [bp-14]
		call	ChangeOwner
		mov	ax, [bp-18]
		call	ChangeOwner
		pop	ax
		popf
chgown_retn:
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 09/09/2022
ChangeOwner:
		or	ax, ax
		jz	short chgown_retn
		dec	ax
		push	ds
		mov	ds, ax
		mov	word [START+1], bx
		pop	ds
		retn

; ---------------------------------------------------------------------------

		; 09/09/2022
_$KEEP_PROCESS:
		push	ax
		mov	byte [ss:cMeta+2], 3
		mov	es, [ss:CurrentPDB]
		cmp	dx, 6
		jnb	short Keep_shrink
		mov	dx, 6
Keep_shrink:
		mov	bx, dx
		push	bx
		push	es
		call	_$SETBLOCK
		pop	ds
		pop	bx
		jb	short Keep_Done
		mov	ax, ds
		add	ax, bx
		mov	word [START+2], ax
Keep_Done:
		pop	ax
		jmp	short exit_inner

; ---------------------------------------------------------------------------

		; 09/09/2022
STAY_RESIDENT:
		mov	ax, 3100h
		add	dx, 15
		rcr	dx, 1
		mov	cl, 3
		shr	dx, cl
		jmp	COMMAND

; ---------------------------------------------------------------------------

		; 09/09/2022
_$EXIT:
		xor	ah, ah
		xchg	ah, [ss:DidCTRLC]
		or	ah, ah
		mov	byte [ss:cMeta+2], 0
		jz	short exit_inner
		mov	byte [ss:cMeta+2], 1
exit_inner:
		call	Get_User_Stack
		push	word [ss:CurrentPDB]
		pop	word [si+14h]
		jmp	short abort_inner

; ---------------------------------------------------------------------------

		; 09/09/2022
_$ABORT:
		xor	al, al
		mov	byte [ss:cMeta+2], 0
abort_inner:
		mov	ah, byte [ss:cMeta+2]
		mov	[ss:exit_code], ax
		call	Get_User_Stack
		mov	ds, word [si+14h]
		xor	ax, ax
		mov	es, ax
		mov	si, 0Ah
		mov	di, 88h
		movsw
		movsw
		movsw
		movsw
		movsw
		movsw
		jmp	reset_environment

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 09/09/2022
arena_free_process:
		mov	di, 0
		mov	ax, [ss:arena_head]
		call	check_signature
arena_free_process_loop:
		jnb	short afp_chksign_ok
afp_retn:
		retn
afp_chksign_ok:
		push	es
		pop	ds
		cmp	word [START+1], bx
		jnz	short arena_free_next
		mov	word [START+1], di
arena_free_next:
		cmp	byte [di], 5Ah
		jz	short afp_retn
		call	arena_next
		jmp	short arena_free_process_loop

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 09/09/2022
arena_next:
		mov	ax, ds
		add	ax, [ARENA_SIZE]
		inc	ax
check_signature:
		mov	es, ax
		cmp	byte [es:di], 4Dh ; 'M'
		jz	short afp_retn
		cmp	byte [es:di], 5Ah ; 'Z'
		jz	short afp_retn
		stc
COALESCE_RETN:
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 09/09/2022
Coalesce:
		cmp	byte [di], 5Ah
		jz	short COALESCE_RETN
		call	arena_next
		jb	short COALESCE_RETN
		cmp	word [es:START+1], di
		jnz	short COALESCE_RETN
		mov	cx, [es:ARENA_SIZE]
		inc	cx
		add	[ARENA_SIZE], cx
		mov	cl, [es:di]
		mov	[di], cl
		jmp	short Coalesce

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 09/09/2022
_$ALLOC:
		call	EcritDisk
		xor	ax, ax
		mov	di, ax
		mov	word [ss:FirstArena], ax
		mov	word [ss:BestArena], ax
		mov	word [ss:LastArena], ax
		push	ax
		mov	ax, [ss:arena_head]
		call	check_signature
		jb	short alloc_err
alloc_scan:
		push	es
		pop	ds
		cmp	word [START+1], di
		jz	short alloc_free
alloc_next:
		cmp	byte [di], 5Ah
		jz	short alloc_end
		call	arena_next
		jnb	short alloc_scan
alloc_err:
		pop	ax
alloc_trashed:
		call	LcritDisk
		mov	al, 7
alloc_errj:
		jmp	SYS_Ret_Err
alloc_end:
		cmp	word [ss:FirstArena], 0
		jnz	short alloc_do_split
alloc_fail:
		call	Get_User_Stack
		pop	bx
		mov	[si+2],	bx
		call	LcritDisk
		mov	al, 8
		jmp	short alloc_errj
alloc_free:
		call	Coalesce
		jb	short alloc_err
		mov	cx, [ARENA_SIZE]
		pop	dx
		cmp	cx, dx
		jbe	short alloc_test
		mov	dx, cx
alloc_test:
		push	dx
		cmp	bx, cx
		ja	short alloc_next
		cmp	word [ss:FirstArena], 0
		jnz	short alloc_best
		mov	word [ss:FirstArena], ds

alloc_best:				; CODE XREF: _$ALLOC+69j
		cmp	word [ss:BestArena], 0
		jz	short alloc_make_best
		push	es
		mov	es, word [ss:BestArena]
		cmp	[es:ARENA_SIZE], cx
		pop	es
		jbe	short alloc_last
alloc_make_best:
		mov	word [ss:BestArena], ds
alloc_last:
		mov	word [ss:LastArena], ds
		jmp	short alloc_next
alloc_do_split_high:
		mov	ds, word [ss:LastArena]
		mov	cx, [ARENA_SIZE]
		sub	cx, bx
		mov	dx, ds
		jz	short alloc_set_owner
		add	dx, cx
		mov	es, dx
		dec	cx
		xchg	bx, cx
		jmp	short alloc_set_sizes

		nop
alloc_do_split:
		cmp	byte [ss:AllocMethod], 1
		ja	short alloc_do_split_high
		mov	ds, word [ss:FirstArena]
		jb	short alloc_get_size
		mov	ds, word [ss:BestArena]
alloc_get_size:
		mov	cx, [ARENA_SIZE]
		sub	cx, bx
		mov	ax, ds
		mov	dx, ax
		jz	short alloc_set_owner
		add	ax, bx
		inc	ax
		mov	es, ax
		dec	cx
alloc_set_sizes:
		mov	[ARENA_SIZE], bx
		mov	[es:ARENA_SIZE], cx
		mov	bl, 4Dh
		xchg	bl, [di]
		mov	[es:di], bl
		mov	word [es:START+1], di
alloc_set_owner:
		mov	ds, dx
		mov	ax, [ss:CurrentPDB]
		mov	word [START+1], ax
		mov	ax, ds
		inc	ax
		pop	bx
		call	LcritDisk
alloc_ok:
		jmp	SYS_RET_OK

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 09/09/2022
_$SETBLOCK:
		call	EcritDisk
		mov	di, 0
		mov	ax, es
		dec	ax
		call	check_signature
		jnb	short setblock_grab
setblock_bad:
		jmp	alloc_trashed
setblock_grab:
		mov	ds, ax
		call	Coalesce
		jb	short setblock_bad
		mov	cx, [ARENA_SIZE]
		push	cx
		cmp	bx, cx
		jbe	short alloc_get_size
		jmp	alloc_fail

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 09/09/2022
_$DEALLOC:
		call	EcritDisk
		mov	di, 0
		mov	ax, es
		dec	ax
		call	check_signature
		jb	short dealloc_err
		mov	word [es:START+1], di
		call	LcritDisk
dealloc_ok:
		jmp	short alloc_ok
dealloc_err:
		call	LcritDisk
		mov	al, 9
dealloc_errj:
		jmp	SYS_Ret_Err

; ---------------------------------------------------------------------------

		; 09/09/2022
_$ALLOCOPER:
		cmp	al, 1
		jb	short AllocOperGet
		jz	short AllocOperSet
allocoper_err:
		mov	byte [ss:EXTERR_LOCUS], 5
		mov	al, 1
		jmp	short dealloc_errj
AllocOperGet:
		mov	al, [ss:AllocMethod]
		xor	ah, ah
allocoper_ok:
		jmp	short dealloc_ok
AllocOperSet:
		mov	[ss:AllocMethod], bl
		jmp	short allocoper_ok

; ---------------------------------------------------------------------------

		; 14/09/2022
		; 10/09/2022
		; 09/09/2022
_$ServerCall:
		cmp	al, 7
		jb	short SET_STUFF
		cmp	al, 9
		jbe	short NO_SET_ID
SET_STUFF:
		;mov	si, dx ; 14/09/2022
		; 10/09/2022 - Magic Code ! (for Windows 3.1)
		db	8Bh, 0F2h
		mov	bx, [si+12h]
		mov	[ss:USER_ID], bx
		mov	bx, [si+14h]
		mov	[ss:PROC_ID], bx
NO_SET_ID:
		push	word [ss:SERVERLEAVE]
		push	word [ss:SERVERTAB]
		push	ax
		call	TableDispatch
		mov	byte [ss:EXTERR_LOCUS], 1
		mov	al, 1
servercall_error:
		jmp	SYS_Ret_Err
SERVERRETURN:
		retn
COMMIT_ALL:
		xor	bx, bx
		push	ss
		pop	ds
		call	EcritDisk
CommitLoop:
		push	bx
		call	SFFromSFN
		jb	short CommitDone
		cmp	word [es:di], 0
		jz	short CommitNext
		cmp	word [es:di], 0FFFFh
		jz	short CommitNext
		test	word [es:di+5], 8000h
		jnz	short CommitNext
		mov	word [THISSFT], di
		mov	word [THISSFT+2], es
		call	DOS_COMMIT
CommitNext:
		pop	bx
		inc	bx
		jmp	short CommitLoop
CommitDone:
		call	LcritDisk
		pop	bx
commit_all_return:
		jmp	SYS_RET_OK

; ---------------------------------------------------------------------------

		; 09/09/2022
CLOSE_NAME:
		call	far [ss:MFTCloN]
CheckReturns:
		jb	short func_err
close_name_return:
		jmp	short commit_all_return
func_err:
		jmp	short servercall_error
CLOSE_UID:
		call	far [ss:MFTclU]
		jmp	short CheckReturns
CLOSE_UID_PID:
		call	far [ss:MFTCloseP]
		jmp	short CheckReturns

; ---------------------------------------------------------------------------

		; 09/09/2022
GET_LIST:
		call	far [ss:MFT_get]
		jb	short func_err
		call	Get_User_Stack
		mov	[si+2],	bx
		mov	[si+10], di
		mov	word [si+16], es
SetCXOK:
		mov	[si+4],	cx
get_list_return:
		jmp	short close_name_return

; ---------------------------------------------------------------------------

		; 09/09/2022
SRV_CALL:
		pop	ax
		push	ds
		push	si
		call	Get_User_Stack
		pop	di
		pop	es
		call	XCHGP
		push	si
		mov	cx, 6
		rep movsw
		inc	di
		inc	di
		movsw
		movsw
		pop	si
		mov	ax, [si]
		mov	bx, [si+2]
		mov	cx, [si+4]
		mov	dx, [si+6]
		mov	di, [si+10]
		mov	es, word [si+14]
		push	word [si+8]
		mov	ds, word [si+12]
		pop	si
		mov	[ss:SaveDS], ds
		mov	[ss:SaveBX], bx
		mov	byte [ss:fSharing], -1
		jmp	REDISP

; ---------------------------------------------------------------------------

		; 09/09/2022
GET_DOS_DATA:
		push	ss
		pop	es
		mov	di, ERRORMODE ; SWAPSTART
		mov	cx, SWAP_END
		mov	dx, USER_IN_AX
		sub	cx, di
		sub	dx, di
		shr	cx, 1
		adc	cx, 0
		shl	cx, 1
		call	Get_User_Stack
		mov	word [si+14], es
		mov	[si+8],	di
		mov	[si+6],	dx
		jmp	short SetCXOK

; ---------------------------------------------------------------------------

		; 09/09/2022
SPOOL_OPER:
		push	ax
		mov	ax, 1125h
		int	2Fh		; Multiplex - NETWORK REDIRECTOR - REDIRECTED PRINTER MODE
					; STACK: WORD subfunction
					; Return: CF set on error, AX =	error code
					; STACK	unchanged
		pop	bx
		jb	short func_err2
		jmp	short get_list_return
func_err2:
		jmp	SYS_Ret_Err

; ---------------------------------------------------------------------------

		; 09/09/2022
_$setExtendedError:
		mov	ax, [si]
		mov	[ss:EXTERR], ax
		mov	ax, [si+10]
		mov	[ss:EXTERRPT], ax
		mov	ax, [si+14]
		mov	[ss:EXTERRPT+2], ax
		mov	ax, [si+2]
		mov	word [ss:EXTERR_ACTION], ax
		mov	ax, [si+4]
		mov	[ss:EXTERR_LOCUS], ah
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 09/09/2022
pJFNFromHandle:
		mov	es, [cs:CurrentPDB]
		cmp	bx, word [es:BCON]
		jb	short pjfn10
		mov	al, 6
ReturnCarry:
		stc
		retn
pjfn10:
		les	di, [es:BCON+2]
		add	di, bx
		clc
pJFNFromHandle_error:
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 09/09/2022
SFFromHandle:
		call	pJFNFromHandle
		jb	short pJFNFromHandle_error
		cmp	byte [es:di], -1
		jnz	short GetSF
		mov	al, 6
		jmp	short ReturnCarry
GetSF:
		push	bx
		mov	bl, [es:di]
		xor	bh, bh
		call	SFFromSFN
		pop	bx
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 09/09/2022
SFFromSFN:
		les	di, [cs:SFT_ADDR]
sfsfn5:
		cmp	bx, [es:di+4]
		jb	short sfsfn7
		sub	bx, [es:di+4]
		les	di, [es:di]
		cmp	di, 0FFFFh
		jnz	short sfsfn5
		stc
		jmp	short sfsfn_err
sfsfn7:
		push	ax
		mov	ax, 53
		mul	bl
		add	di, ax
		pop	ax
		add	di, 6
		clc
sfsfn_err:
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 09/09/2022
JFNFree:
		xor	bx, bx
jfnf1:
		call	pJFNFromHandle
		jb	short jfnf5
		cmp	byte [es:di], -1
		jz	short jfnfx
		inc	bx
		jmp	short jfnf1
jfnf5:
		mov	al, 4
jfnfx:
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 07/09/2022
SFNFree:
		xor	bx, bx
sfnf5:
		push	bx
		call	SFFromSFN
		pop	bx
		jnb	short sfnf6
sfn95:
		mov	al, 4
		jmp	short sfnfree_return

		nop
sfnf6:
		cmp	word [es:di], 0
		jz	short sfnf20
		cmp	word [es:di], 0FFFFh
		jnz	short sfnf7
sfnf10:
		push	bx
		mov	bx, [ss:USER_ID]
		cmp	[es:di+2Fh], bx
		jnz	short sfnf67
		mov	bx, [ss:PROC_ID]
		cmp	[es:di+31h], bx
		jz	short sfnf21
sfnf67:
		pop	bx
sfnf7:
		inc	bx
		jmp	short sfnf5
sfnf20:
		push	bx
sfnf21:
		clc
		mov	word [es:di], 0FFFFh
		mov	bx, [ss:USER_ID]
		mov	[es:di+2Fh], bx
		mov	bx, [ss:PROC_ID]
		mov	[es:di+31h], bx
		pop	bx
sfnfree_return:
		retn

; ---------------------------------------------------------------------------

		; 07/09/2022
_$AssignOper:
		push	ax
		mov	ax, 111Eh
		int	2Fh		; Multiplex - NETWORK REDIRECTOR - DO REDIRECTION
					; SS = DOS CS
					; STACK: WORD function to execute
					; Return: CF set on error, AX =	error code
					; STACK	unchanged
		pop	bx
		jb	short ASS_ERR
		jmp	SYS_RET_OK
ASS_ERR:
		jmp	SYS_Ret_Err

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 07/09/2022
Find_DPB:
		lds	si, [ss:DPBHEAD]
fdpb5:
		cmp	si, 0FFFFh
		jz	short fdpb10
		cmp	al, [si]
		jnz	short fdpb7
		retn
fdpb7:
		lds	si, [si+18h]
		jmp	short fdpb5
fdpb10:
		stc
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 07/09/2022
InitCDS:
		mov	ah, ':'
		push	ax
		sub	al, 40h
		cmp	[ss:NUMIO], al
		pop	ax
		les	di, [ss:THISCDS]
		mov	word [es:di+67], 0
		jb	short RET45
		mov	[es:di], ax
		push	ax
		mov	ax, '\'
		mov	[es:di+2], ax
		pop	ax
		or	word [es:di+67], 4000h
		mov	word [es:di+79], 2
		mov	word [es:di+73], 0
		mov	word [es:di+75], 0
		push	ax
		push	ds
		push	si
		sub	al, 'A'
		call	Find_DPB
		jb	short icds5
		mov	[es:di+69], si
		mov	word [es:di+71], ds
icds5:
		pop	si
		pop	ds
		pop	ax
RET45:
		retn

; ---------------------------------------------------------------------------

		; 07/09/2022
_$UserOper:
		push	ax
		sub	al, 1
		pop	ax
		jb	short UserGet
		jz	short UserSet
		cmp	al, 5
		jbe	short UserPrint
		mov	byte [ss:EXTERR_LOCUS], 1
		mov	al, 1
useroper_error:
		jmp	SYS_Ret_Err
UserGet:
		push	ds
		pop	es
		mov	di, dx
		mov	cx, [ss:MYNUM]
		call	Get_User_Stack
		mov	[si+4],	cx
		push	ss
		pop	ds
		mov	si, MYNAME
UserMove:
		mov	cx, 15
		rep movsb
		xor	ax, ax
		stosb
UserBye:
		jmp	SYS_RET_OK
UserSet:
		mov	[ss:MYNUM], cx
		mov	si, dx
		push	ss
		pop	es
		mov	di, MYNAME
		inc	byte [ss:DIFFNAM]
		jmp	short UserMove
UserPrint:
		push	ax
		mov	ax, 111Fh
		int	2Fh		; Multiplex - NETWORK REDIRECTOR - PRINTER SETUP
					; STACK: WORD function
					; Return: CF set on error, AX =	error code
					; STACK	unchanged
		pop	dx
		jnb	short OKPA
		jmp	short useroper_error
OKPA:
		jmp	short UserBye

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 07/09/2022
GETVISDRV:
		call	GetThisDrv
		jb	short RET45
		push	ds
		push	si
		lds	si, [ss:THISCDS]
		test	word [si+67], 2000h
		pop	si
		pop	ds
		jz	short RET45
		stc
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 07/09/2022
GetThisDrv:
		or	al, al
		jnz	short GTD10
		mov	al, [ss:CURDRV]
		inc	al
GTD10:
		dec	al
		push	ds
		push	si
		mov	byte [ss:EXTERR_LOCUS], 2
		test	byte [ss:fSharing], -1
		jz	short GTD20
		push	ax
		push	es
		push	di
		mov	word [ss:THISCDS], SETFINDPB+3
		mov	word [ss:THISCDS+2], cs
		add	al, 'A'
		call	InitCDS
		test	word [es:di+67], 4000h
		pop	di
		pop	es
		pop	ax
		jz	short GTD30
		jmp	short GTDX
GTD20:
		call	GetCDSFromDrv
		jb	short GTD30
		test	word [si+43h], 4000h
		jnz	short GTDX
GTD30:
		mov	byte [ss:EXTERR_LOCUS], 1
		stc
GTDX:
		pop	si
		pop	ds
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------
		
		; 07/09/2022
GetCDSFromDrv:
		cmp	al, [ss:CDSCOUNT]
		jb	short GetCDS
		stc
		retn

; ---------------------------------------------------------------------------

		; 07/09/2022
GetCDS:
		push	bx
		push	ax
		lds	si, [ss:CDSAddr]
		mov	bl, 81
		mul	bl
		add	si, ax
		mov	word [ss:THISCDS], si
		mov	word [ss:THISCDS+2], ds
		pop	ax
		pop	bx
		clc
		retn

; ---------------------------------------------------------------------------

		; 07/09/2022
TransFCB:
		push	bp
		mov	bp, sp
		sub	sp, 15
		push	ss
		pop	es
		push	es
		push	di
		lea	di, [bp-15]
		mov	byte [ss:ExtFCB], 0
		mov	byte [ss:ExtFCB+1], 0
		call	GetExtended
		jz	short GetDrive
		mov	al, [si-1]
		mov	byte [ss:ExtFCB+1], al
		mov	byte [ss:ExtFCB], -1
GetDrive:
		lodsb
		call	GetThisDrv
		jb	short BadPack
		call	TextFromDrive
		mov	bx, CharType
		mov	cx, 11
		push	si
FCBScan:
		lodsb
		;xlat	byte [es:bx]
		es	xlat
		test	al, 8
		jz	short BadPack
		loop	FCBScan
		pop	si
		mov	bx, di
		call	PackName
		pop	di
		pop	es
		push	ss
		pop	ds
		lea	si, [bp-15]
		cmp	byte [bx], 0
		jz	short BadPack
		push	bp
		call	TransPathSet
		pop	bp
		jnb	short FCBRet
BadPack:
		stc
		mov	al, 3
FCBRet:
		mov	sp, bp
		pop	bp
TransPath_retn:
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 07/09/2022
TransPath:
		xor	al, al
		jmp	short SetSplice


; --------------- S U B	R O U T	I N E ---------------------------------------

		; 09/09/2022
		; 07/09/2022
TransPathSet:
		mov	al, -1
SetSplice:
		mov	[ss:NoSetDir], al
		mov	al, -1
TransPathNoSet:
		mov	byte [ss:fSplice], al ; 09/09/2022
		mov	byte [ss:cMeta], -1
		mov	[ss:WFP_START], di
		mov	word [ss:CURR_DIR_END], -1
		push	ss
		pop	es
		lea	bp, [di+134]
		test	byte [ss:fSharing], -1
		jz	short CheckUNC
		call	DriveFromText
		call	GetThisDrv
		jb	short NoPath
		call	TextFromDrive
		lea	bx, [di+1]
		call	Canonicalize
		jb	short TransPath_retn
		push	ss
		pop	ds
		mov	si, [WFP_START]
		test	byte [fSplice], -1 ; 09/09/2022
		jz	short NoServerSplice
		call	Splice
NoServerSplice:
		push	ss
		pop	ds
		les	di, [THISCDS]
		call	EcritDisk
		call	FatRead_CDS
		call	LcritDisk
NoPath:
		mov	al, 3
		retn

; ---------------------------------------------------------------------------

		; 07/09/2022
CheckUNC:
		mov	word [ss:THISCDS], -1
		mov	ax, 1123h
		int	2Fh		; Multiplex - NETWORK REDIRECTOR - QUALIFY REMOTE FILENAME
					; DS:SI	-> ASCIZ filename to canonicalize
					; ES:DI	-> 128-byte buffer for qualified name
					; Return: CF set if not	resolved
		jnb	short UNCDone
		call	DriveFromText
		push	ax
		mov	ax, [si]
		call	PATHCHRCMP
		xchg	ah, al
		call	PATHCHRCMP
		jnz	short CheckDevice
		cmp	ah, al
		jnz	short CheckDevice
		pop	ax
		movsw
UNCCpy:
		lodsb
		call	Ucase
		or	al, al
		jz	short UNCTerm
		call	PATHCHRCMP
		mov	bx, di
		stosb
		jnz	short UNCCpy
		call	Canonicalize
UNCDone:
		push	ss
		pop	ds
		retn
UNCTerm:
		stosb
		jmp	short UNCDone

; ---------------------------------------------------------------------------

		; 07/09/2022
CheckDevice:
		pop	ax
		cmp	byte [si], 0
		jnz	short CheckPath
		mov	al, 2
		stc
		retn

; ---------------------------------------------------------------------------

		; 07/09/2022
CheckPath:
		push	ax
		push	bp
		call	CheckThisDevice
		pop	bp
		pop	ax
		jnb	short DoFile
		mov	byte [ss:fSharing], -1
		call	GetThisDrv
		mov	byte [ss:fSharing], 0
		call	TextFromDrive
		mov	al, '/'
		stosb
		call	StrCpy
		clc
		push	ss
		pop	ds
DoFile_retn:
		retn

; ---------------------------------------------------------------------------

		; 09/09/2022
		; 07/09/2022
DoFile:
		call	GETVISDRV
		mov	al, 3
		jb	short DoFile_retn
		push	ds
		push	si
		push	es
		push	di
		call	ValidateCDS
		pop	di
		pop	es
		pop	si
		pop	ds
		mov	al, 3
		jb	short DoFile_retn
		push	ds
		push	si
		lds	si, [ss:THISCDS]
		mov	bx, di
		add	bx, [si+79]
		lea	bp, [di+134]
		call	FStrCpy
		dec	di
		mov	al, '\'
		cmp	[es:di-1], al
		jz	short GetOrig
		stosb
GetOrig:
		dec	di
		pop	si
		pop	ds
		call	PathSep
		jnz	short PathAssure
		or	al, al
		jz	short DoCanon
		mov	di, bx
SkipPath:
		lodsb
		call	PATHCHRCMP
		jz	short SkipPath
		dec	si
		or	al, al
		jz	short DoCanon
PathAssure:
		mov	al, '\'
		stosb
DoCanon:
		call	Canonicalize
		jb	short DoFile_retn
		push	ss
		pop	ds
		mov	di, [WFP_START]
		lds	si, [THISCDS]
		call	PathPref
		jnz	short _DoSplice
		mov	al, [si-1]
		call	PATHCHRCMP
		jz	short _DoSplice
		cmp	byte [es:di], 0
		jz	short _DoSplice
		inc	di
		mov	[ss:CURR_DIR_END], di
_DoSplice:
		push	ss
		pop	ds
		mov	si, [WFP_START]
		xor	cx, cx
		test	byte [fSplice], -1 ; 09/09/2022
		jz	short SkipSplice
		call	Splice
SkipSplice:
		push	ss
		pop	ds
		les	di, [THISCDS]
		test	word [es:di+67], 8000h
		jz	short SkipSplice2
		retn

; ---------------------------------------------------------------------------
		
		; 07/09/2022
SkipSplice2:
		jcxz	Done
		call	EcritDisk
		call	FatRead_CDS
		call	LcritDisk
		mov	al, 3
Done:
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 07/09/2022
Canonicalize:
		lodsb
		call	PATHCHRCMP
		jnz	short CanonDec
		cmp	di, bp
		jnb	short CanonBad
		stosb
		jmp	short Canonicalize
CanonDec:
		dec	si
CanonLoop:
		xor	ax, ax
		cmp	[si], al
		jnz	short DoComponent
		cmp	byte [es:di-1], ':'
		jnz	short DoTerminate
		mov	al, '\'
		stosb
		mov	al, ah
DoTerminate:
		stosb
		clc
		retn

; ---------------------------------------------------------------------------

		; 07/09/2022
CanonBad:
		call	ScanPathChar
		mov	al, 3
		jz	short PathEnc
		mov	al, 2
PathEnc:
		stc
CanonBad_retn:
		retn

; ---------------------------------------------------------------------------

		; 07/09/2022
DoComponent:
		call	CopyComponent
		jb	short CanonBad_retn
		cmp	word [es:di], 2Eh
		jz	short Skip1
		cmp	word [es:di], '..'
		jnz	short CanonNormal
		dec	di
Skip1:
		call	SkipBack
		mov	al, 3
		jb	short CanonBad_retn
		jmp	short CanonPath

		nop
CanonNormal:
		add	di, cx
CanonPath:
		call	PathSep
		jnz	short CanonBad
		lodsb
		call	PATHCHRCMP
		jnz	short CanonDec
		cmp	di, bp
		jnb	short CanonBad
		stosb
CanonPathLoop:
		lodsb
		call	PATHCHRCMP
		jz	short CanonPathLoop
		dec	si
		jmp	short CanonLoop

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 07/09/2022
PathSep:
		mov	al, [si]

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 07/09/2022
PathSepGotCh:
		or	al, al
		jz	short CanonBad_retn
		call	PATHCHRCMP
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 07/09/2022
SkipBack:
		cmp	di, bx
		jb	short SkipBad
		dec	di
		mov	al, [es:di]
		call	PATHCHRCMP
		jnz	short SkipBack
		clc
		retn
SkipBad:
		mov	al, 3
		stc
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 09/09/2022
		; 07/09/2022
CopyComponent:
		sub	sp, 14
		push	ds
		push	si
		push	es
		push	di
		push	bp
		mov	bp, sp
		mov	ah, '.'
		lodsb
		stosb
		cmp	al, ah
		jnz	short NormalComp
		call	PathSep
		jz	short NulTerm
TryTwoDot:
		lodsb
		stosb
		cmp	al, ah
		jnz	short CopyBad
		call	PathSep
		jnz	short CopyBad
NulTerm:
		xor	al, al
		stosb
		mov	[bp+6],	si
		jmp	short _GoodRet
NormalComp:
		mov	si, [bp+6]
		call	NameTrans
		cmp	si, [bp+6]
		jz	short CopyBad
		test	byte [ss:fSharing], -1
		jnz	short DoPack
		and	dl, 1
		add	byte [ss:cMeta], dl
		jg	short CopyBad
		jnz	short DoPack
		or	dl, dl
		jz	short CopyBadPath
DoPack:
		mov	[bp+6],	si
		push	ss
		pop	ds
		mov	si, NAME1
		lea	di, [bp+10]
		push	di
		call	PackName
		pop	di
		call	StrLen
		dec	cx
		add	cx, [bp+2]
		cmp	cx, [bp+0]
		jnb	short CopyBad
		mov	si, di
		les	di, [bp+2]
		call	FStrCpy
_GoodRet:
		clc
		jmp	short CopyEnd
CopyBad:
		stc
		call	ScanPathChar
		mov	al, 2
		jnz	short CopyEnd
CopyBadPath:
		stc
		mov	al, 3
CopyEnd:
		pop	bp
		pop	di
		pop	es
		pop	si
		pop	ds
		lahf
		add	sp, 14
		call	StrLen
		dec	cx
		sahf
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 07/09/2022
Splice:
		test	byte [ss:SPLICES], -1
		jz	short AllDone
		push	word [ss:THISCDS]
		push	word [ss:THISCDS+2]
		push	ds
		push	si
		pop	di
		pop	es
		xor	ax, ax
SpliceScan:
		call	GetCDSFromDrv
		jb	short SpliceDone
		inc	al
		test	word [si+67], 2000h
		jz	short SpliceScan
		push	di
		call	PathPref
		jz	short SpliceFound
SpliceSkip:
		pop	di
		jmp	short SpliceScan
SpliceFound:
		cmp	byte [es:di], 0
		jnz	short SpliceDo
		test	byte [ss:NoSetDir], -1
		jnz	short SpliceSkip
SpliceDo:
		mov	si, di
		push	es
		pop	ds
		pop	di
		call	TextFromDrive1
		mov	ax, [ss:CURR_DIR_END]
		or	ax, ax
		js	short NoPoke
		add	ax, di
		sub	ax, si
		mov	[ss:CURR_DIR_END], ax
NoPoke:
		cmp	byte [si], 0
		jnz	short SpliceCopy
		mov	al, '\'
		stosb
SpliceCopy:
		call	FStrCpy
		add	sp, 4
		or	cl, 1
		jmp	short DoSet
SpliceDone:
		pop	word [ss:THISCDS+2]
		pop	word [ss:THISCDS]
AllDone:
		xor	cx, cx
DoSet:
		lds	si, [ss:THISCDS]
		les	di, [si+69]
		mov	word [ss:THISDPB], di
		mov	word [ss:THISDPB+2], es
Splice_retn:
		retn

; ---------------------------------------------------------------------------

		; 07/09/2022
_$NameTrans:
		push	ds
		push	si
		push	es
		push	di
		mov	di, OPENBUF
		call	TransPath
		pop	di
		pop	es
		pop	si
		pop	ds
		jnb	short TransOK
		jmp	SYS_Ret_Err
TransOK:
		mov	si, OPENBUF
		push	ss
		pop	ds
GotText:
		call	FStrCpy
		jmp	SYS_RET_OK

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 07/09/2022
DriveFromText:
		xor	al, al
		cmp	byte [si], 0
		jz	short Splice_retn
		cmp	byte [si+1], ':'
		jnz	short Splice_retn
		lodsw
		or	al, 20h
		sub	al, 60h
		jnz	short Splice_retn
		mov	al, -1
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 07/09/2022
TextFromDrive:
		inc	al

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 07/09/2022
TextFromDrive1:
		add	al, 40h
		mov	ah, ':'
		stosw
PathPref_retn:
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 07/09/2022
PathPref:
		call	DStrLen
		dec	cx
		repe cmpsb
		jnz	short PathPref_retn
		push	ax
		mov	al, [si-1]
		call	PATHCHRCMP
		jz	short Prefix
NotSep:
		mov	al, [es:di]
		call	PathSepGotCh
Prefix:
		pop	ax
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 07/09/2022
ScanPathChar:
		lodsb
		call	PathSepGotCh
		jnz	short ScanPathChar
		call	PATHCHRCMP
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 07/09/2022
_$CLOSE:
		call	CheckOwner
		jb	short CloseError
		push	ss
		pop	ds
		mov	word [THISSFT], di
		mov	word [THISSFT+2], es
		cmp	word [es:di], 1
		jz	short FreeJFN
		mov	al, [es:di+2]
		and	al, 0F0h
		cmp	al, 70h
		jz	short PostFree
FreeJFN:
		call	pJFNFromHandle
		mov	byte [es:di], 0FFh
PostFree:
		call	DOS_CLOSE
		jb	short CloseError
		mov	ah, 3Eh
Sys_Ret_OK_j1:
		jmp	SYS_RET_OK
CloseError:
		jmp	SYS_Ret_Err

; ---------------------------------------------------------------------------

		; 07/09/2022
_$COMMIT:
		call	CheckOwner
		jb	short CommitError
		push	ss
		pop	ds
		mov	word [THISSFT], di
		mov	word [THISSFT+2], es
		call	DOS_COMMIT
		jb	short CommitError
		mov	ah, 68h
Sys_Ret_OK_j2:
		jmp	short Sys_Ret_OK_j1
CommitError:
		jmp	short CloseError

; ---------------------------------------------------------------------------

		; 07/09/2022
_$ExtHandle:
		xor	bp, bp
		cmp	bx, 20
		jnb	short exth2
		mov	bx, 20
exth2:
		mov	es, [ss:CurrentPDB]
		mov	cx, word [es:BCON]
		cmp	bx, cx
		jz	short ok_done
		ja	short larger
		mov	bp, 1
		mov	ds, [es:MAXSEC]
		mov	si, bx
		sub	cx, bx
chck_handles:
		cmp	byte [si], -1
		jnz	short too_many_files
		inc	si
		loop	chck_handles
		cmp	bx, 20
		ja	short larger
		mov	bp, 2
		mov	di, 24
		push	bx
		jmp	short movhandl

		nop
larger:
		cmp	bx, 0FFFFh
		jz	short invalid_func
		clc
		push	bx
		add	bx, 0Fh
		mov	cl, 4
		ror	bx, cl
		and	bx, 1FFFh
		push	bp
		call	_$ALLOC
		pop	bp
		jb	short no_memory
		mov	es, ax
		xor	di, di
movhandl:
		mov	ds, [ss:CurrentPDB]
		test	bp, 3
		jz	short enlarge
		pop	cx
		push	cx
		jmp	short copy_hand

		nop
ok_done:
		jmp	short Sys_Ret_OK_j2
too_many_files:
		mov	al, 4
ExtHandle_err_j1:
		jmp	short CommitError
enlarge:
		mov	cx, word [BCON]
copy_hand:
		mov	dx, cx
		lds	si, [BCON+2]
		rep movsb
		pop	cx
		push	cx
		sub	cx, dx
		mov	al, -1
		rep stosb
		mov	ds, [ss:CurrentPDB]
		cmp	word [BCON+2], 0
		jnz	short update_info
		push	bp
		push	ds
		push	es
		mov	es, [MAXSEC]
		call	_$DEALLOC
		pop	es
		pop	ds
		pop	bp
update_info:
		test	bp, 2
		jz	short non_psp
		mov	word [BCON+2], 18h
		jmp	short final

		nop
non_psp:
		mov	word [BCON+2], 0
final:
		mov	[MAXSEC], es
		pop	word [BCON]
ExtHandle_ok:
		jmp	short ok_done
no_memory:
		pop	bx
		mov	al, 8
ExtHandle_errj_2:
		jmp	short ExtHandle_err_j1

; ---------------------------------------------------------------------------

		; 07/09/2022
invalid_func:
		mov	al, 1
ExtHandle_errj_3:
		jmp	short ExtHandle_errj_2

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 07/09/2022
_$READ:
		mov	si, DOS_READ
ReadDo:
		call	pJFNFromHandle
		jb	short ReadError
		mov	al, [es:di]
		call	CheckOwner
		jnb	short ReadSetup
ReadError:
		jmp	short ExtHandle_errj_3
ReadSetup:
		mov	word [ss:THISSFT], di
		mov	word [ss:THISSFT+2], es
		push	word [ss:DMAADD]
		push	word [ss:DMAADD+2]
		mov	bx, dx
		push	cx
		mov	cl, 4
		shr	bx, cl
		pop	cx
		mov	ax, ds
		add	ax, bx
		mov	ds, ax
		;and	dx, 0Fh
		; 09/09/2022 - Temporary !
		db	81h, 0E2h, 0Fh, 0
		mov	[ss:DMAADD], dx
		mov	[ss:DMAADD+2], ds
		push	ss
		pop	ds
		call	si ; DOS_READ or DOS_WRITE
		pop	word [DMAADD+2]
		pop	word [DMAADD]
		jb	short ReadError
		mov	ax, cx
_READ_OK:
		jmp	short ExtHandle_ok

; ---------------------------------------------------------------------------

		; 07/09/2022
_$WRITE:
		mov	si, DOS_WRITE
		jmp	short ReadDo

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 07/09/2022
_$LSEEK:
		call	CheckOwner
LSeekError:
		jb	short ReadError
		cmp	al, 2
		jbe	short LSeekDisp
		mov	byte [ss:EXTERR_LOCUS], 1
		mov	al, 1
LSeekError_j1:
		jmp	short ReadError
LSeekDisp:
		cmp	al, 1
		jb	short LSeekStore
		ja	short LSeekEOF
		add	dx, [es:di+15h]
		adc	cx, [es:di+17h]
LSeekStore:
		mov	ax, cx
		xchg	ax, dx
LSeekSetpos:
		mov	[es:di+15h], ax
		mov	[es:di+17h], dx
		call	Get_User_Stack
		mov	[si+6],	dx
LSeek_ok:
		jmp	short _READ_OK
LSeekEOF:
		test	word [es:di+5], 8000h
		jnz	short Check_LSeek_Mode
LOCAL_LSeek:
		add	dx, [es:di+11h]
		adc	cx, [es:di+13h]
		jmp	short LSeekStore
Check_LSeek_Mode:
		test	word [es:di+2], 8000h
		jnz	short LOCAL_LSeek
		mov	ax, [es:di+2]
		and	ax, 0F0h
		cmp	ax, 40h
		jz	short NET_LSEEK
		cmp	ax, 30h
		jnz	short LOCAL_LSeek
NET_LSEEK:
		mov	ax, 1121h
		int	2Fh		; Multiplex - NETWORK REDIRECTOR - SEEK	FROM END OF REMOTE FILE
					; CX:DX	= offset (in bytes) from end
					; ES:DI	-> SFT,	SFT DPB	field -> DPB of	drive with file
					; SS = DOS CS
					; Return: CF set on error
					; CF clear if successful, DX:AX	= new file position
		jnb	short LSeekSetpos
LSeekError_j2:
		jmp	short LSeekError_j1

; ---------------------------------------------------------------------------

		; 09/09/2022
		; 07/09/2022
_$FILE_TIMES:
		cmp	al, 2
		jb	short ft1
		mov	byte [ss:EXTERR_LOCUS], 1
		mov	al, 1
ft_err_j:
		jmp	short LSeekError_j2
ft1:
		call	CheckOwner
		jb	short LSeekError
		or	al, al
		jnz	short ft_set_time
		cli
		mov	cx, [es:di+0Dh]
		mov	dx, [es:di+0Fh]
		sti
		call	Get_User_Stack
		mov	[si+4],	cx
		mov	[si+6],	dx
ft_ok:
		jmp	short LSeek_ok
ft_set_time:
		call	EcritDisk
		mov	[es:di+0Dh], cx
		mov	[es:di+0Fh], dx
		xor	ax, ax
		call	far [ss:ShSU]
		;and	word [es:di+5], 0FFBFh ; 14/09/2022
		; 09/09/2022 - Temporary !
		db	26h, 81h, 65h, 05h, 0BFh, 0FFh
		or	word [es:di+5], 4000h
		call	LcritDisk
ok_ret:
		jmp	short ft_ok
; ---------------------------------------------------------------------------

		; 07/09/2022
_$DUP:
		mov	ax, bx
		call	JFNFree
DupErrorCheck:
		jb	short DupErr
		push	es
		push	di
		pop	si
		pop	ds
		xchg	ax, bx
		call	CheckOwner
		jb	short DupErr
		call	DOS_Dup_Direct
		call	pJFNFromHandle
		mov	bl, [es:di]
		mov	[si], bl
		jmp	short ok_ret
DupErr:
		jmp	short ft_err_j

; ---------------------------------------------------------------------------
		
		; 07/09/2022
_$DUP2:
		push	bx
		push	cx
		mov	bx, cx
		call	_$CLOSE
		pop	bx
		pop	ax
		call	pJFNFromHandle
		jmp	short DupErrorCheck

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 07/09/2022
CheckOwner:
		call	SFFromHandle
		jnb	short no_win386
_ret_label:
		retn
no_win386:
		push	ax
		mov	ax, [ss:USER_ID]
		cmp	ax, [es:di+47]
		pop	ax
		jz	short _ret_label
		mov	al, 6
		stc
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 07/09/2022
_$OPEN:
		mov	ch, 16h
		call	SetAttrib
		mov	cx, DOS_OPEN
		xor	ah, ah
		push	ax
AccessFile:
		call	EcritDisk
		call	SFNFree
		call	LcritDisk
		jb	short OpenFailJ
		mov	[ss:SFN], bx
		mov	word [ss:THISSFT], di
		mov	word [ss:THISSFT+2], es
		call	JFNFree
		jnb	short SaveJFN
OpenFailJ:
		jmp	OpenFail
SaveJFN:
		mov	word [ss:PJFN], di
		mov	word [ss:PJFN+2], es
		mov	[ss:JFN], bx
		mov	bx, [ss:SFN]
		mov	[es:di], bl
		mov	si, dx
		mov	di, OPENBUF
		push	cx
		call	TransPath
		pop	bx
		lds	si, [ss:THISSFT]
		jb	short OpenCleanJ
		cmp	byte [ss:cMeta], -1
		jz	short SetSearch
		mov	al, 2
OpenCleanJ:
		jmp	short OpenClean

		nop
SetSearch:
		pop	ax
		xor	cx, cx
		cmp	bx, DOS_OPEN
		jnz	short _DoOper
		test	al, 80h
		jz	short _DoOper
		and	al, 7Fh
		mov	cx, 1000h
_DoOper:
		mov	word [si+2], 0
		mov	word [si+51], 0
		push	ss
		pop	ds
		push	cx
		call	bx
		pop	cx
		lds	si, [THISSFT]
		jb	short OpenE
OpenOK:
		mov	word [si], 1
		or	[si+5],	cx
		mov	ax, [ss:JFN]
		call	far [ss:ShCol]
		mov	word [ss:SFN], -1
OpenOKJ:
		jmp	SYS_RET_OK
OpenClean:
		pop	bx
OpenE:
		mov	word [si], 0
		lds	si, [ss:PJFN]
		mov	byte [si], 0FFh
		jmp	short OpenCritLeave
OpenFail:
		sti
		pop	cx
OpenCritLeave:
		mov	word [ss:SFN], -1
OpenErrJ:
		jmp	SYS_Ret_Err

; ---------------------------------------------------------------------------

		; 07/09/2022
_$CREAT:
		push	cx
		mov	cx, DOS_CREATE
AccessSet:
		mov	byte [ss:ExtFCB+1], 6
		jmp	AccessFile

; ---------------------------------------------------------------------------

		; 07/09/2022
_$CHMOD:
		mov	di, OPENBUF
		push	ax
		push	cx
		mov	si, dx
		call	TransPathSet
		pop	cx
		pop	ax
		jb	short ChModErr
		push	ss
		pop	ds
		cmp	byte [cMeta], -1
		jnz	short ChModErr
		mov	byte [ExtFCB+1], 16h
		sub	al, 1
		jb	short ChModGet
		jz	short ChModSet
		mov	byte [EXTERR_LOCUS], 1
		mov	al, 1
chmod_errj:
		jmp	short OpenErrJ
ChModGet:
		call	GET_FILE_INFO
		jb	short ChModE
		call	Get_User_Stack
		mov	[si+4],	ax

chmod_ok_j1:
		jmp	short OpenOKJ
ChModSet:
		mov	ax, cx
		call	SET_FILE_ATTRIBUTE
		jb	short ChModE
chmod_ok_j2:
		jmp	short chmod_ok_j1
ChModErr:
		mov	al, 3
ChModE:
		jmp	short chmod_errj

; ---------------------------------------------------------------------------

		; 07/09/2022
_$UNLINK:
		push	cx
		mov	si, dx
		mov	di, OPENBUF
		call	TransPathSet
		pop	cx
		jb	short ChModErr
		cmp	byte [ss:cMeta], -1
		jnz	short NotFound
		push	ss
		pop	ds
		mov	ch, 6
		call	SetAttrib
		call	DOS_DELETE
		jb	short UnlinkE
unlink_ok_J:
		jmp	short chmod_ok_j2
NotFound:
		mov	al, 3
UnlinkE:
		jmp	short ChModE

; ---------------------------------------------------------------------------

		; 07/09/2022
_$RENAME:
		push	cx
		push	ds
		push	dx
		push	es
		pop	ds
		mov	si, di
		mov	di, RENBUF
		call	TransPathSet
		push	word [ss:WFP_START]
		pop	word [ss:REN_WFP]
		pop	si
		pop	ds
		pop	cx

epjc2:
		jb	short ChModErr
		cmp	byte [ss:cMeta], -1
		jnz	short NotFound
		push	cx
		mov	di, OPENBUF
		call	TransPathSet
		pop	cx
		jb	short epjc2
		push	ss
		pop	ds
		cmp	byte [cMeta], -1
		jb	short NotFound
		mov	ch, 16h
		call	SetAttrib
		call	DOS_RENAME
		jb	short UnlinkE
		jmp	short unlink_ok_J

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 07/09/2022
_$CreateNewFile:
		push	cx
		mov	cx, DOS_Create_New
		jmp	AccessSet

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 07/09/2022
BinToAscii:
		mov	cx, 4
bta5:
		push	cx
		mov	cl, 4
		rol	ax, cl
		push	ax
		and	al, 0Fh
		add	al, '0'
		cmp	al, '9'
		jbe	short bta6
		add	al, 7
bta6:
		stosb
		pop	ax
		pop	cx
		loop	bta5
		retn

; ---------------------------------------------------------------------------

		; 07/09/2022
_$CreateTempFile:
		push	bp
		mov	bp, sp
		sub	sp, 10
		test	cx, 0FFD8h
		jz	short OKatts
		mov	ax, 5
		jmp	short SETTMPERR
OKatts:
		mov	[bp-10], cx
		mov	[bp-8],	dx
		mov	word [bp-6], ds
		mov	word [bp-2], ds
		push	ds
		pop	es
		mov	di, dx
		mov	cx, di
		neg	cx
		xor	ax, ax
		repne scasb
		dec	di
		mov	al, [es:di-1]
		call	PATHCHRCMP
		jz	short SETENDPTR
STOREPTH:
		mov	al, '\'
		stosb
SETENDPTR:
		mov	[bp-4],	di
CreateLoop:
		push	ss
		pop	ds
		push	bp
		call	READTIME
		pop	bp
		les	di, [bp-4]
		mov	ax, cx
		call	BinToAscii
		mov	ax, dx
		call	BinToAscii
		xor	al, al
		stosb
		lds	dx, [bp-8]
		mov	cx, [bp-10]
		push	bp
		call	_$CreateNewFile
		pop	bp
		jnb	short CreateDone
		mov	ax, [ss:EXTERR]
		cmp	al, 50h
		jz	short CreateLoop
		cmp	al, 5
		jz	short CreateLoop
SETTMPERR:
		stc
CreateDone:
		mov	sp, bp
		pop	bp
		jb	short CreateFail
		jmp	SYS_RET_OK
CreateFail:
		jmp	SYS_Ret_Err

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 07/09/2022
SetAttrib:
		test	byte [ss:fSharing], -1
		jnz	short Set
		mov	cl, ch
Set:
		mov	byte [ss:ExtFCB+1], cl
		retn

; ---------------------------------------------------------------------------

		; 07/09/2022
_$LockOper:
		cmp	al, 1
		ja	short lock_bad_func
		push	di
		call	SFFromHandle
		jnb	short lock_do
		pop	di
		mov	al, 6
LockOper_Err_J1:
		jmp	SYS_Ret_Err
lock_bad_func:
		mov	byte [ss:EXTERR_LOCUS], 1
		mov	al, 1
LockOper_Err_J2:
		jmp	short LockOper_Err_J1

; ---------------------------------------------------------------------------

lock_do:
		or	al, al
		pop	ax
		jz	short DOS_Lock

		test	word [es:di+5], 8000h
		jz	short LOCAL_UNLOCK
		push	ax
		mov	ax, 110Bh
		int	2Fh		; Multiplex - NETWORK REDIRECTOR - UNLOCK REGION OF FILE
					; BX = file handle, CX:DX = starting offset, SI	= high word of size
					; STACK: WORD low word of size,	ES:DI -> SFT for file
					; SFT DPB field	-> DPB of drive	containing file
					; Return: CF set error
		pop	bx
		jmp	short ValChk
LOCAL_UNLOCK:
		call	far [ss:clr_block]
ValChk:
		jnb	short Lock_OK
		jmp	short LockOper_Err_J2
Lock_OK:
		jmp	SYS_RET_OK
; ---------------------------------------------------------------------------

		; 07/09/2022
DOS_Lock:
		test	word [es:di+5], 8000h
		jz	short LOCAL_LOCK
		push	ax
		mov	ax, 110Ah
		int	2Fh		; Multiplex - NETWORK REDIRECTOR - LOCK	REGION OF FILE
					; BX = file handle, CX:DX = starting offset, SI	= high word of size
					; STACK: WORD low word of size,	ES:DI -> SFT
					; SFT DPB field	-> DPB of drive	containing file, SS = DOS CS
					; Return: CF set error
		pop	bx
		jmp	short ValChk
LOCAL_LOCK:
		call	far [ss:set_block]
		jmp	short ValChk

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 07/09/2022
LOCK_CHECK:
		mov	bx, [RetryCount]
LockRetry:
		push	bx
		call	far [chk_block]
		pop	bx
		jb	short LockN
		retn
LockN:
		call	Idle
		dec	bx
		jnz	short LockRetry
		stc
retlabel:
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 07/09/2022
LOCK_VIOLATION:
		push	ds
		push	es
		push	di
		push	cx
		mov	ax, 21h
		mov	byte [ALLOWED], 18h
		les	bp, [THISDPB]
		mov	di, 1
		mov	cx, di
		mov	dx, [es:bp+11]
		call	HARDERR
		pop	cx
		pop	di
		pop	es
		pop	ds
		cmp	al, 1
		jz	short retlabel
		stc
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 07/09/2022
CheckShare:
		cmp	byte [cs:fShare], 0
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 07/09/2022
SHARE_CHECK:
		call	far [MFT_enter]
shchk_retn:
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 07/09/2022
SHARE_VIOLATION:
		push	ds
		push	es
		push	di
		mov	byte [SECCLUSPOS+2], 0
		mov	byte [ALLOWED], 18h
		les	bp, [THISDPB]
		mov	di, 1
		mov	cx, di
		mov	dx, [es:bp+10h]
		call	HARDERR
		pop	di
		pop	es
		pop	ds
		cmp	al, 1
		jz	short shchk_retn
		stc
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 07/09/2022
ShareEnd:
		call	far [MFTClose]
		retn

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 07/09/2022
ShareEnter:
		push	cx
retry:
		mov	cx, [RetryCount]
attempt:
		les	di, [THISSFT]
		xor	ax, ax
		mov	[es:di+51], ax
		push	cx
		call	SHARE_CHECK
		pop	cx
		jnb	short done
		call	Idle
		loop	attempt
		call	SHARE_VIOLATION
		jnb	short retry
done:
		pop	cx
		retn

; ---------------------------------------------------------------------------
		;times 9 db 0
; 15/09/2022
align 16

; ---------------------------------------------------------------------------
	
		; 15/09/2022
SYSBUF:	
		; 07/09/2022
IRETT:
		iret

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 07/09/2022
DOSINIT:
		cli
		cld
		mov	[cs:ENDMEM], dx
		mov	[cs:INITSP], sp
		mov	[cs:INITSS], ss
		mov	ax, cs
		mov	ss, ax
		mov	sp, INITSTACK
		mov	word [ss:NULDEV+2], ds
		mov	word [ss:NULDEV], si
		push	ds
		xor	ax, ax
		mov	ds, ax
		mov	ax, IRETT
		mov	[2Ah*4], ax
		mov	ax, cs
		mov	[(2Ah*4)+2], ax
		pop	ds
		call	CHARINIT
		push	si
		push	cs
		pop	es
		mov	di, SFTABL_SFT_SFTable
		mov	ax, 3
		stosw
		dec	al
		stosw
		xor	al, al
		stosb
		mov	al, 0C3h
		stosw
		mov	ax, si
		stosw
		mov	ax, ds
		stosw
		xor	ax, ax
		stosw
		stosw
		stosw
		dec	ax
		stosw
		stosw
		inc	ax
		stosw
		stosw
		add	di, 7
		add	si, 10
		mov	cx, 4
		rep movsw
		mov	cl, 3
		mov	al, ' '
		rep stosb
		pop	si
		or	byte [si+4], 3
		mov	word [ss:BCON], si
		mov	word [ss:BCON+2], ds
CHAR_INIT_LOOP:
		lds	si, [si]
		call	CHARINIT
		test	byte [si+4], 8
		jz	short CHAR_INIT_LOOP
		mov	word [ss:BCLOCK], si
		mov	word [ss:BCLOCK+2], ds
		mov	bp, MEMSTRT
PERDRV:
		lds	si, [si]
		cmp	si, -1
		jz	short CONTINIT
		call	CHARINIT
		test	word [si+4], 8000h
		jnz	short PERDRV
		mov	cl, [ss:CALLMED]
		xor	ch, ch
		mov	[si+10], cl
		mov	dl, [ss:NUMIO]
		xor	dh, dh
		add	[ss:NUMIO], cl
		push	ds
		push	si
		lds	bx, [ss:CALLSCNT]
PERUNIT:
		mov	si, [bx]
		inc	bx
		inc	bx
		mov	[es:bp+0], dl
		mov	[es:bp+1], dh
		push	bx
		push	cx
		push	dx
		call	_$SETDPB
		mov	ax, [es:bp+2]
		cmp	ax, [ss:MAXSEC]
		jbe	short NOTMAX
		mov	[ss:MAXSEC], ax
NOTMAX:
		pop	dx
		pop	cx
		pop	bx
		mov	ax, ds
		pop	si
		pop	ds
		mov	[es:bp+18], si
		mov	word [es:bp+20], ds
		push	ds
		push	si
		inc	dh
		inc	dl
		mov	ds, ax
		add	bp, 32
		loop	PERUNIT
		pop	si
		pop	ds
		jmp	short PERDRV

; ---------------------------------------------------------------------------

		; 15/09/2022
		; 07/09/2022
CONTINIT:
		push	cs
		pop	ds
		mov	di, bp
		mov	bp, [MAXSEC]
		;mov	ax, IRETT
		; 15/09/2022
		mov	ax, SYSBUF
		add	ax, bp
		add	ax, 16
		mov	word [DPBHEAD], ax
		mov	dx, ax
		;sub	dx, IRETT ; SYSBUF
		; 15/09/2022
		sub	dx, SYSBUF
		mov	bp, dx
		add	bp, di
		;sub	bp, 918	; ADJFAC
		; 15/09/2022
		sub	bp, ADJFAC
		push	bp
		mov	di, MEMSTRT
		add	di, 24
		mov	cl, [NUMIO]
		xor	ch, ch
TRUEDPBAD:
		add	ax, 32
		stosw
		add	di, 30
		loop	TRUEDPBAD
		sub	di, 32
		mov	ax, -1
		stosw
		add	bp, 15
		rcr	bp, 1
		mov	cl, 3
		shr	bp, cl
		mov	dx, cs
		add	dx, bp
		mov	bx, 15
		mov	cx, [ENDMEM]
		mov	bp, cs
		mov	[ENDMEM], cx
		mov	es, bp
		mov	[es:DSKCHRET+3], es
		xor	ax, ax
		mov	ds, ax
		mov	es, ax
		mov	di, 82h
		mov	ax, bp
		mov	word [START], DIVOV
		mov	word [START+2], ax
		mov	cx, 17
		rep stosw
		add	di, 6
		mov	cx, 43
		rep stosw
		mov	di, 80h
		mov	ax, _IRET
		mov	cx, 9
iset1:
		stosw
		add	di, 2
		loop	iset1
		add	di, 4
		mov	cx, 22
iset2:
		stosw
		add	di, 2
		loop	iset2
		mov	ax, bp
		mov	word [2Fh*4], INT2F
		mov	byte [ENTRYPOINT], 0EAh
		mov	word [ENTRYPOINT+1], CALL_ENTRY
		mov	[ENTRYPOINT+3], ax
		mov	word [MFT_get], QUIT
		mov	word [ShSave], COMMAND
		mov	word [ShChk], 100h
		mov	word [ShChk+2], dx
		mov	word [ShSU], ABSDRD
		mov	word [SFTABL], ABSDWRT
		mov	word [SFTABL_SFT_SFCOUNT], STAY_RESIDENT
		push	cs
		pop	ds
		push	cs
		pop	es
		mov	di, JShare
		mov	ax, cs
		mov	cx, 15
iset3:
		add	di, 2
		stosw
		loop	iset3
		mov	ax, TIMEBUF
		add	ax, 0Fh
		mov	cl, 4
		shr	ax, cl
		mov	di, ds
		add	di, ax
		inc	di
		mov	[CurrentPDB], di
		push	bp
		push	dx
		mov	ax, [ENDMEM]
		mov	dx, di
		call	setmem
		push	cs
		pop	ds
		mov	di, 24
		xor	ax, ax
		stosw
		stosb
		mov	al, 0FFh
		mov	cx, 17
		rep stosb
		push	cs
		pop	es
		mov	word [SFT_ADDR+2], ds
		mov	si, COUNTRY_CDPG
		mov	word [es:si+79], es
		mov	word [es:si+84], es
		mov	word [es:si+89], es
		mov	word [es:si+94], es
		mov	word [es:si+123], es
		mov	si, SysInitTable
		mov	word [es:si+6], es
		mov	word [es:si+2], es
		mov	si, FastTable
		mov	word [es:si+4], es
		mov	word [es:FETCHI_TAG], 5872h
		pop	dx
		pop	bp
		pop	cx
		mov	si, MEMSTRT
		mov	di, word [DPBHEAD]
		sub	cx, di
		cmp	di, si
		jbe	short MOVJMP
		dec	cx
		add	di, cx
		add	si, cx
		inc	cx
		std
MOVJMP:
		mov	es, bp
		jmp	MOVDPB

; --------------- S U B	R O U T	I N E ---------------------------------------

		; 07/09/2022
CHARINIT:
		mov	byte [ss:DEVCALL], 26
		mov	byte [ss:DEVCALL_REQUNIT], 0
		mov	byte [ss:DEVCALL_REQFUNC], 0
		mov	word [ss:DEVCALL_REQSTAT], 0
		push	es
		push	bx
		push	ax
		mov	bx, DEVCALL
		push	cs
		pop	es
		call	DEVIOCALL2
		pop	ax
		pop	bx
		pop	es
		retn

; ---------------------------------------------------------------------------

align 2 ; 14/09/2022

		; 15/09/2022
		times 128 db 0	; ADJFAC = 790
		; 07/09/2022
		;times 256 db 0 ; ADJFAC = 918

INITSTACK:	dw 0
;MEMSTRT:	times 10 db 0
; 15/09/2022
MEMSTRT		equ $
ADJFAC		equ MEMSTRT-SYSBUF

		; 15/09/2022
		;times 10 db 0
; 15/09/2022
RETRODOSMSG:
	db	13,10
	db	"Retro DOS v3.30 (for Windows 3.1) by Erdogan Tan [2018-2022]"
	db	13,10,"$", 0 

; 14/09/2022
;PcDosVersion	db 1Ah,'@@@### PC-DOS Version 3.30',0Dh,0Ah
;		db 1Ah,0
